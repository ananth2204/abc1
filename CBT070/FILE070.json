{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011150000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 2704156, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 11, "INMDSNAM": "CBT.V500.FILE070.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 2704156, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 2704156, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE070.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00-\\x04'", "DS1TRBAL": "b'\\xbbD'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00o\\x00\\x07\\x00r\\x00\\x07\\x00.'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$VTOC": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x934\\x1f\\x00\\x934\\x1f\\x12H\\x00\\xc8\\x00\\xc8\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-12-07T00:00:00", "modifydate": "1993-12-07T12:48:00", "lines": 200, "newlines": 200, "modlines": 0, "user": "SBGCSC"}, "text": "                        GENERAL DYNAMICS\n             DATA SYSTEMS DIVISION - WESTERN CENTER\n                 LOCAL MODIFICATIONS TO MVS/JES3\n               -----------------------------------\n\n************************************************************************\n*                                                                      *\n*      THESE MODIFICATIONS HAVE BEEN USED SUCCESSFULLY AND TO THE BEST *\n* OF OUR KNOWLEDGE THEY ARE OPERATIONAL.  HOWEVER, NO WARRANTY IS MADE *\n* AS TO THE ACCURACY OF THIS MATERIAL AND NO RESPONSIBILITY IS ASSUMED *\n* FOR ANY PROBLEMS OR ERRORS CAUSED EITHER DIRECTLY OR INDIRECTLY BY   *\n* THE USE OF THIS MATERIAL.  IT IS THE USER'S RESPONSIBILITY TO EVAL-  *\n* UATE THE USEFULNESS AND APPLICABILITY OF THIS MATERIAL.              *\n*                                                                      *\n*               ( ...... USE AT YOUR OWN RISK ......)                  *\n*                                                                      *\n*    WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE NOR  *\n* DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS DESCRIBED   *\n* BY THE USER OR CORRECTIONS OR EXTENSIONS MADE IN THE FUTURE.         *\n*                                                                      *\n************************************************************************\n\n      THESE SYSTEM MODIFICATIONS ARE FOR MVS/XA RELEASE 2.2.0. AND\n      JES3 2.1.5 PTFS. APPLICABLE FMIDS ARE INDICATED ON EACH\n      ++ VER STATEMENT. THESE MODS ARE APPLIED TO A PRODUCTION\n      MVS/XA JES3 SYSTEM AT GENERALLY PUT TAPE 8804 LEVEL.\n      NOTES AND RESTRICTIONS APPEAR IN THE COMMENTS WHICH DESCRIBE\n      EACH MODIFICATION ON THE ++ USERMOD STATEMENT.\n\n      SOME MODIFICATIONS MAY APPEAR IN THIS ENTRY ($$$VTOC) BUT\n      WILL NOT ACTUALLY BE IN THE FOLLOWING DATA. THIS HAS BEEN\n      DONE WHEN THE MOD CONTAINS OR INSTALLS PROPRIETARY PROGRAM\n      PRODUCT MATERIAL WHICH UNRESTRICTED PUBLIC DISTRIBUTION\n      IS NOT ALLOWED FOR. EXAMPLES OF THIS ARE ADPW001 (UCC ONE\n      INSTALLATION).\n\n\n         ADDITIONAL INFORMATION CAN BE OBTAINED FROM -\n\n                  C.M. SINGER\n                  COMPUTER SCIENCES CORPORATION - TMD\n                  MAIL ZONE W1-5311\n                  5021 KEARNY VILLA ROAD\n                  SAN DIEGO, CALIFORNIA 92123-1407\n\n                  TELEPHONE 619-573-3020\n\n*  MODID   MODULE/MACRO HIT            ABSTRACT\n- ------- -----------------  ------------------------------------------\n\n  A$$W001 IGC0020{-IGC0402{  MODEL 204 SVCS\n          IGC0024A-IGC0424A\n          IGC0020C,IGC0022B\n          IGC240,IGC253\n  A$$W002 WCSVC244,WCSVC245  IMS SVCS\n          IGC207,IGC234\n  A$$W003 IGC227-IGC232      CICS SVCS\n  A$$W004 IGC206,IGC239      IDMS SVCS\n  A$$W005 WCSVC209           DATA ENCRYPTION SVC\n  A$$W006 WCSVC212           AUTHORIZE IEBCOPY SVC\n  A$$W007 WCSVC216,WCSVC236  RMDS SVCS\n  A$$W008 WCSVC233           OBTAIN VTAM TERMINAL ID\n  A$$W009 NULLSVC1,NULLSVC2  NULL SVC MODULES\n          NULLSVC3,NULLSVC4\n          NULLSVC6\n  A$$W010 WCSVC217,WCSVC251  DF/SORT SVCS FOR RELEASE 9 AND 10\n  A$$W011 WCSVC237           CA7 SVC (WAS UCC7)\n  A$$W012 WCSVC238           WC DSAD PCS STAMP SVC\n  A$$W013 WCSVC242           MASTERCAT SVC\n  A$$W014 CLR3270,CLEAR      CLEAR SCREEN PROGRAM FOR TSO\n  A$$W015 WCSVC225           FLASHER SVC\n  A$$W016 WCSVC224           CAEDS SVC\n  A$$W017 WCSVC226           PCS NUMBER VALIDATION SVC\n  A$$W018 IGC252             CMOVE SVC\n  A$$W019 WCSVC218           NCCF SMFWTR SVC\nXXA$$W020 WCSVC215           CA11 SVC (WAS UCC11)\n  A$$W021 IGC0021{,IGC0021A  CA1 (TMS) SVCS\n\n  AAEW001 ADRSBRTN           ALLOW DF/DSS TO RESTORE TO ALLOC VOL\n  AAEW002 ADRUENQ            DF/DSS ENQ EXIT - SKIP ENQ FOR ALL VOLS\n  AAEW003 ADRDYNA            FORCE DF/DSS TO RESTORE DSN LIKE FDRDSF\n\n  ABBW001 IEFAB461           UPDATE GDG BASE LEVEL AT STEP END\n  ABBW002 IKJEBELE           MAKE '#' TAB CHARACTER FOR TSO EDIT\n  ABBW003 IEFAB473           CHANGE VARY ON MOUNT ATTRIB TO PRIVATE\n  ABBW010 IEFAB464           DO NOT ALLOW VIO FOR LARGE DATASETS, ETC.\n  ABBW011 IEAVTRML           IMS/VS AND NETEX RESOURCE CLEANUP MOD\n  ABBW012 IEAVADFM           IGC0805A ZAP FOR IMSVS FORMATTED DUMPS\n  ABBW013 IEFU83             IEFU83 TO NOT WRITE CERTAIN RECORDS, ETC\n  ABBW014 IKJEFD30           MAKE DEFAULT TSO ALLOC DISP=SHR\n  ABBW015 IKJEFD20           BYPASS 'DATA SET NOT FREED MESSAGE'\n  ABBW019 IEFUSI             REGION LIMIT VALUES\n  ABBW020 IEFUTL             EXTEND CERTAIN TSO USERS WAIT TIME TO 5 HR\n  ABBW025 IKJEBLMT           LIMIT NUMBER OF RECORDS FOR SYS1.BROADCAST\n  ABBW026 IKJEFLP1           LOGON PARAMTER CSECT\n  ABBW028 IEFACTRT,JOBCUU$   INSTALL STEP END STATISTICS MODULE\n  ABBW032 IEAVAP00           MAKE REAL DASD NOT IN VATLST PRIV/RSVD\n  ABBW042 IEFAB4A4           MAKE 'RETAIN' DEFAULT VOL SPECIFICATION\n  ABBW043 IEAVNP03           USE IEASYSXX AS DEFAULT (XX=F(CPU SERIAL))\n  ABBW049 IKJEFF10           TSO SUBMIT EXIT - KILL BAD JOBNAMES\n  ABBW051 IECVHIDT           CHANGES TO HOT IO DETECTION CONSTANTS\n  ABBW052 IEAVMXIT           SUPPLY OUR IEAVMXIT (CHANGE ROUTE CODES)\n  ABBW056 IKJEBMA9,ACF$X     ADD X AS SUBCOMMAND OF EDIT\n  ABBW058 IEFUJI             PUT ACCT NUMBER IN ACF2 ACCT FIELD\n  ABBW059 ISGGRS00           DECREASE GVTOLINT AND GVTMEINT\n  ABBW060 IEAIPL04           INCREASE NIP SQA ALLOCATION\n  ABBW061 IEFU84             SMF EXIT TO CATCH TYPE04 & 34 RECORDS\n  ABBW062 IEFAB445           ZAP DYNALLOC TO SYSDA FROM SYSALLDA\n  ABBW063 IASXSD82           ZAP EXTERNAL WTR FOR JESLOGX (AJSW040)\n  ABBW064 IEFSSCS            UPDATE MACRO FOR SYSOUT COST EST.(AJSW042)\n  ABBW066 ERBFMENU           INCREASE NUMBER OF DEVICES ALLOWED TO 512\n  ABBW069 INMXPARM           INTERACTIVE DATA TRANSMISSION OPTIONS DSECT\n\n  ACFW001 VLDEXIT            ACF2 PRE-VALIDATION EXIT\n  ACFW002 VIOEXIT            ACF2 VIOLATION EXIT\n  ACFW003 LGNPXIT            ACF2 LOGON POST VALIDATION EXIT\n  ACFW005 ACF$CMDS           COMMAND LIMITING LIST FOR ACF2\n  ACFW006 ACF$IMSP,ACF$IMST  ACF2/IMS INSTALLATION OPTIONS PROD & TEST\n  ACFW007 ACFFDR             ACF2 FDR RECORD DEFINITION\n  ACFW008 DSNGEN             SKIP SECURITY CHECK FOR TAPES OUTSIDE TMS\n  ACFW009 ACFUSX02           ADD INFO TO TYPE 26 SMF RECORD\n  ACFW010 ACFUSX01           SET TRANSMISSION SEQUENCE FOR NJE SECTIONS\n  ACFW012 ACFEERRN           INSTALL NOTE11 NEXT-KEY FUNCTION\n  ACFW014 ACFEEPSW           NOTE12 INSTALLATION UM12001\n\n  ADPW001 EMODVOL1 OMODVOL1  UCC ONE (TMS)\n          IFG0552V IFG0551T\n          IFG0194F,IFG0194K  UCC ONE (TMS)\n          IFG0196Q,IFG0195H\n          IFG0552B,IFG0196N\n          IFG0553F,IFG0200Y\n  ADPW003 IEBGENER           MAKE OLDGENER ALIAS\n  ADPW002 IGG0192A           ALLOW ISAM UPDATES WITH DISP=SHR\n  ADPW004 IGG0196B           IF DATASET IS VIO THEN BUFNO=1\n  ADPW007 IGG0325E,IGG032I3, PUT CHARGE NUMBER IN FMT1 DSCB\n          IGG0553C\n  ADPW008 IGGPRE00           DF/DS DASD ALLOCATION PREPROCESSING EXIT\n  ADPW009 IGGPOST0           DF/DS DASD ALLOCATION POSTPROCESSING EXIT\n  ADPW011 JOBCARD            CHANGES TO SYSGEN JOBCARD MACRO\n\n  ADVW001 ISRPCP             SPF COMMAND TO FRONT END ISPF/PDF\n  AIFW001 ISPTCM             TSO COMMAND IN ISPF COMMAND TABLE\n\n  AHMW001 ARCMVEXT           MIGRATION VOLUME EXIT\n  AHMW002 ARCTDEXT           HSM TAPE DATASET EXIT\n  AHMW003 IGX00024           HSM - ACF2 INTERFACE EXIT\n  AHMW005 ARCMDEXT           HSM MIGRATION EXIT - LIMIT TO < 50 CYL.\n\n  AJSW002 IATUX29            ACF2,RINGCHK,EXPDTCHK,STARS FOR IMS,CICS\n  AJSW003 IATUX28            ACCT + MAKE LINES FOR STC + TSO = OUTLIM\n  AJSW004 IATUX25            NON-STANDARD LABEL VERIFY ROUTINE\n  AJSW005 IATUX18            ALLOW GENERAL INQUIRY CMDS FROM RJP TERMS\n  AJSW006 IATUX06,IATYTVT    UPDATE GDG BASE LEVEL AT STEP END\n  AJSW007 IATUX20            JOB HEADER PAGE INFORMATION\n  AJSW008 IATUX04,IATGRPT    ACCT (ACCT #) VALIDATION + DSP DICT.\n          ACCTSAVE,ACCT      (PRE AJSW003) / RESTRICTED CLASS CHECKING\n  AJSW009 IATMOHR            DO NOT ALLOW PRTY=0 TO BE RELEASED\n  AJSW011 IATOSWS            MAKE ANYLOCAL MEAN PRT3800 + PRT3211\n  AJSW012 IATUX19            COMPUTE OSE PRIORITIES, CANCEL JUNK,\n                             MAKE SOME STARTED TASKS CLASS A\n  AJSW013 IATYTVT            DEFINE USER FIELDS IN MACRO IATYTVT\n  AJSW014 IATIICM            COMPUTE JOB PRIORITY + CHANGE CLASS\n  AJSW016 IATUX23            JOB TRAILER PAGE INFORMATION\n  AJSW017 IATMDDR            DON'T MLOG VERIFY MESSAGES DURING CONNECT\n  AJSW018 IATCNIN            ALLOW *T ALL COMMAND TO SEND TO ALL SYSTEMS\n  AJSW020 IATUX30            ALLOW GENERIC STATUS AND CHECK OWNERSHIP\n  AJSW021 IATOSNT,IATUX36    SMF RECORDING FOR NJE SYSOUT DATASETS\n          IATYNJH,IATYNWR\n  AJSW022 IATYRJP,IATRJM5    CHANGE MULTILEAVING DELAY TO .50 SECS\n  AJSW023 IATGRWQ            RETURN NEW SECOND LEVEL MESSAGE TO STATUS\n  AJSW024 IATCNMR            PUT JULIAN DATE IN MLG MESSAGES(FROM EDSC)\n  AJSW025 IATCNSL,IATCN84    DELETE TIME STAMP FROM 3277 MESSAGES\n  AJSW027 IATCNSV,JESDJC1    USE RQNETID IF NET = *NET-ID* FOR DJC WTO\n  AJSW028 IATIQGM,IATMOGM    ALLOW ALL AS MPNAME ON *I G AND *F G CMDS\n  AJSW030 IATGRWP            BYPASS DESTINATION VALIDATION FOR XWTRS\n  AJSW031 IATOSSC            PUT DATASET LINECOUNT IN SSOB FOR XWTR\n  AJSW032 IATUX33            ACF2 CODE FOR JCL PROCESSING\n  AJSW035 IATUX21            DON'T PRINT JESMSG, SYSMSG, JESJCL HEADERS\n  AJSW036 IATGRPT            DSP DICTIONARY ENTRIES\n  AJSW037 IATGRLD            ADD INIT BLIP MESSAGE IAT0001\n  AJSW038 IATGRPT,IATUTWTP   CREATE WRITE-TO-PROGRAMMER DSP (WTP)\n  AJSW039 IATMOVR            *V XXX,ALL WILL VARY DEVICE TO ALL SYSTEMS\n  AJSW040 JESLOGX            SYSLOG/EXTERNAL WTR EXECUTIVE\n  AJSW042 IATGRWQ            COST ESTIMATE INFO\n  AJSW043 IATGRWJ,IATIQBK,   ENHANCEMENTS TO THE *I,B COMMAND\n          IATIQDV\n  AJSW045 IATUTSM            MODS TO JSM TO SCAN ALL JOBS + NO CANCEL\n  AJSW046 JESCMD             PROGRAM TO ISSUE JES3 COMMANDS\n  AJSW048 JESOPER            JESOPER COMMAND\n  AJSW049 IATUX23            ISSUE DEVICE CLOSE IF UNDER VM\n  AJSW057 IATMDAL,IATUX09    SILO JES3 SUPPORT MODS\n          IATUX31,IATUX32\n  AJSW208 CVER,CVERDATA      RESTRICTED CLASS VERIFICATON USERMOD\n\n  AVTW001 ISTAUCAG           VTAM USER EXIT (FRANK NASH)\n  AVTW003 IKTRTX1            3767 USER OUTPUT EXIT ROUTINE\n\n      ADDITIONAL MODIFICATIONS ARE IN SPF.V2R2M0.INSTALL\n\n *******************  END OF $$$VTOC ENTRY  ********************\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A$$W001": {"ttr": 520, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (A$$W001)   /*\n      THIS USERMOD IS TO INSTALL THE\n      SVC MODULES FOR CAD/CAM (MODEL204)\n\n      SVC = 200 - TYPE 4 (DEVL)\n      SVC = 203 - TYPE 3 (DEVL) *** THESE TYPE 3'S NEED ** RMODE ANY ***\n      SVC = 222 - TYPE 3 (PROD) ***                     ** AMODE 31  ***\n      SVC = 240 - TYPE 2 (DEVL)\n      SVC = 241 - TYPE 4 (PROD)\n      SVC = 253 - TYPE 2 (PROD)\n\n      THIS USERMOD REQUIRES THAT A UCLIN\n      BE DONE TO ADD THE FMID TO BE VER'D\n      AND TO ADD THE SVC TO THE NUCLEUS.\n\n      SET BOUNDARY(GLOBAL) .\n          UCLIN .\n             ADD GLOBALZONE FMID(A$$SVCS) .\n          ENDUCL .\n      SET BOUNDARY(TARGETZONE) .\n          UCLIN .\n             ADD SYSMOD(A$$SVCS) FUNCTION\n                 RECDATE(YYDDD) INSDATE(YYDDD) .\n             ADD MOD(IGC240) LMOD(IEANUC01)\n                 DISTLIB(ASRCLIB)  FMID(A$$SVCS) .\n             ADD MOD(IGC253) LMOD(IEANUC01)\n                 DISTLIB(ASRCLIB)  FMID(A$$SVCS) .\n          ENDUCL .\n      SET BOUNDARY(DLIBZONE) .\n          UCLIN .\n             ADD SYSMOD(A$$SVCS) FUNCTION\n                 RECDATE(YYDDD) INSDATE(YYDDD) .\n             ADD MOD(IGC240) FMID(A$$SVCS)\n                 DISTLIB(ASRCLIB)  .\n             ADD MOD(IGC253) FMID(A$$SVCS)\n                 DISTLIB(ASRCLIB)  .\n          ENDUCL .\n\n                                                     09/14/88 BRM  */.\n++VER (Z038) FMID(A$$SVCS) .\n++JCLIN .\n//A$$W001 JOB WC07N0323,'W1-5311  CR SINGER'\n//LPASVC  EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS2,NAME=HSSLPA,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE  DD  DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN   DD  *\n   INCLUDE INCLUDE(IGC0020{)\n  MODE AMODE(31),RMODE(ANY)\n   NAME IGC0020{(R)\n   INCLUDE INCLUDE(IGC0120{)\n  MODE AMODE(31),RMODE(ANY)\n   NAME IGC0120{(R)\n   INCLUDE INCLUDE(IGC0220{)\n  MODE AMODE(31),RMODE(ANY)\n   NAME IGC0220{(R)\n   INCLUDE INCLUDE(IGC0320{)\n  MODE AMODE(31),RMODE(ANY)\n   NAME IGC0320{(R)\n   INCLUDE INCLUDE(IGC0420{)\n  MODE AMODE(31),RMODE(ANY)\n   NAME IGC0420{(R)\n   INCLUDE INCLUDE(IGC0024A)\n  MODE AMODE(31),RMODE(ANY)\n   NAME IGC0024A(R)\n   INCLUDE INCLUDE(IGC0124A)\n  MODE AMODE(31),RMODE(ANY)\n   NAME IGC0124A(R)\n   INCLUDE INCLUDE(IGC0224A)\n  MODE AMODE(31),RMODE(ANY)\n   NAME IGC0224A(R)\n   INCLUDE INCLUDE(IGC0324A)\n  MODE AMODE(31),RMODE(ANY)\n   NAME IGC0324A(R)\n   INCLUDE INCLUDE(IGC0424A)\n  MODE AMODE(31),RMODE(ANY)\n   NAME IGC0424A(R)\n   INCLUDE INCLUDE(IGC0020C)\n   NAME IGC0020C(R)\n   INCLUDE INCLUDE(IGC0022B)\n   ALIAS   M204PCC0\n   ALIAS   M204PCC1\n   ALIAS   M204PCC2\n   ALIAS   M204PCC3\n   ALIAS   M204PCC4\n   NAME IGC0022B(R)\n/*\n++MOD (IGC0020{) LKLIB(INCLUDE) .\n++MOD (IGC0120{) LKLIB(INCLUDE) .\n++MOD (IGC0220{) LKLIB(INCLUDE) .\n++MOD (IGC0320{) LKLIB(INCLUDE) .\n++MOD (IGC0420{) LKLIB(INCLUDE) .\n++MOD (IGC0024A) LKLIB(INCLUDE) .\n++MOD (IGC0124A) LKLIB(INCLUDE) .\n++MOD (IGC0224A) LKLIB(INCLUDE) .\n++MOD (IGC0324A) LKLIB(INCLUDE) .\n++MOD (IGC0424A) LKLIB(INCLUDE) .\n++MOD (IGC0020C) LKLIB(INCLUDE) .\n++MOD (IGC0022B) LKLIB(INCLUDE) .\n++MOD (IGC240)   LKLIB(INCLUDE) .\n++MOD (IGC253)   LKLIB(INCLUDE) .\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A$$W002": {"ttr": 523, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (A$$W002)   /*\n      THIS USERMOD IS TO INSTALL THE\n      SVC MODULES FOR IMS\n\n      SVC = 207 - TYPE 2 (IMS 2.2)\n      SVC = 234 - TYPE 2 (IMS 1.3)\n      SVC = 244 - TYPE 4 (IMS 1.3)\n      SVC = 245 - TYPE 4 (IMS 2.2)\n\n      THIS USERMOD REQUIRES THAT A UCLIN\n      BE DONE TO ADD THE FMID TO BE VER'D\n      AND TO ADD THE SVC TO THE NUCLEUS.\n\n      SET BOUNDARY(GLOBAL) .\n          UCLIN .\n             ADD GLOBALZONE FMID(A$$SVCS) .\n          ENDUCL .\n      SET BOUNDARY(TARGETZONE) .\n          UCLIN .\n             ADD SYSMOD(A$$SVCS) FUNCTION\n                 RECDATE(YYDDD) INSDATE(YYDDD) .\n             ADD MOD(IGC207) LMOD(IEANUC01)\n                 DISTLIB(ASRCLIB)  FMID(A$$SVCS) .\n             ADD MOD(IGC234) LMOD(IEANUC01)\n                 DISTLIB(ASRCLIB)  FMID(A$$SVCS) .\n          ENDUCL .\n      SET BOUNDARY(DLIBZONE) .\n          UCLIN .\n             ADD SYSMOD(A$$SVCS) FUNCTION\n                 RECDATE(YYDDD) INSDATE(YYDDD) .\n             ADD MOD(IGC207) FMID(A$$SVCS)\n                 DISTLIB(ASRCLIB)  .\n             ADD MOD(IGC234) FMID(A$$SVCS)\n                 DISTLIB(ASRCLIB)  .\n          ENDUCL .\n\n                                                     07/26/88 BRM  */.\n++VER (Z038) FMID(A$$SVCS) .\n++HOLD(A$$W002) SYSTEM FMID(A$$SVCS) REASON(UCLIN) DATE(88208)\n                COMMENT(RUN UCLIN AS SHOWN IN USERMOD COMMENTS) .\n++JCLIN .\n//A$$W002 JOB WC07N0323,'W1-5311  CR SINGER'\n//LPASVC  EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS2,NAME=HSSLPA,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE  DD  DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN   DD  *\n   INCLUDE INCLUDE(WCSVC244)\n   NAME WCSVC244(R)\n   INCLUDE INCLUDE(WCSVC245)\n   NAME WCSVC245(R)\n/*\n++MOD (IGC207)   LKLIB(INCLUDE) .\n++MOD (IGC234)   LKLIB(INCLUDE) .\n++MOD (WCSVC244) LKLIB(INCLUDE) .\n++MOD (WCSVC245) LKLIB(INCLUDE) .\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A$$W003": {"ttr": 525, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (A$$W003)   /*\n      THIS USERMOD IS TO INSTALL THE\n      SVC MODULES FOR CICS MODULES BEGIN WITH IGC INSTEAD OF WCSVC\n\n      SVC = 227 - TYPE 6 (CICS PROD)\n      SVC = 228 - TYPE 2 (CICS PROD)\n      SVC = 229 - TYPE 6 (CICS TEST)\n      SVC = 230 - TYPE 2 (CICS TEST)\n      SVC = 231 - TYPE 6 (CICS DEVL)\n      SVC = 232 - TYPE 2 (CICS DEVL)\n\n      THIS USERMOD REQUIRES THAT A UCLIN\n      BE DONE TO ADD THE FMID TO BE VER'D\n      AND TO ADD THE SVC TO THE NUCLEUS.\n\n      SET BOUNDARY(GLOBAL) .\n          UCLIN .\n             ADD GLOBALZONE FMID(A$$SVCS) .\n          ENDUCL .\n      SET BOUNDARY(TARGETZONE) .\n          UCLIN .\n             ADD SYSMOD(A$$SVCS) FUNCTION\n                 RECDATE(YYDDD) INSDATE(YYDDD) .\n             ADD MOD(IGC227) LMOD(IEANUC01)\n                 DISTLIB(ASRCLIB)  FMID(A$$SVCS) .\n             ADD MOD(IGC228) LMOD(IEANUC01)\n                 DISTLIB(ASRCLIB)  FMID(A$$SVCS) .\n             ADD MOD(IGC229) LMOD(IEANUC01)\n                 DISTLIB(ASRCLIB)  FMID(A$$SVCS) .\n             ADD MOD(IGC230) LMOD(IEANUC01)\n                 DISTLIB(ASRCLIB)  FMID(A$$SVCS) .\n             ADD MOD(IGC231) LMOD(IEANUC01)\n                 DISTLIB(ASRCLIB)  FMID(A$$SVCS) .\n             ADD MOD(IGC232) LMOD(IEANUC01)\n                 DISTLIB(ASRCLIB)  FMID(A$$SVCS) .\n          ENDUCL .\n      SET BOUNDARY(DLIBZONE) .\n          UCLIN .\n             ADD SYSMOD(A$$SVCS) FUNCTION\n                 RECDATE(YYDDD) INSDATE(YYDDD) .\n             ADD MOD(IGC227) FMID(A$$SVCS)\n                 DISTLIB(ASRCLIB)  .\n             ADD MOD(IGC228) FMID(A$$SVCS)\n                 DISTLIB(ASRCLIB)  .\n             ADD MOD(IGC229) FMID(A$$SVCS)\n                 DISTLIB(ASRCLIB)  .\n             ADD MOD(IGC230) FMID(A$$SVCS)\n                 DISTLIB(ASRCLIB)  .\n             ADD MOD(IGC231) FMID(A$$SVCS)\n                 DISTLIB(ASRCLIB)  .\n             ADD MOD(IGC232) FMID(A$$SVCS)\n                 DISTLIB(ASRCLIB)  .\n          ENDUCL .\n\n                                                     07/26/88 BRM  */.\n++VER (Z038) FMID(A$$SVCS) .\n++MOD (IGC227) LKLIB(INCLUDE) .\n++MOD (IGC228) LKLIB(INCLUDE) .\n++MOD (IGC229) LKLIB(INCLUDE) .\n++MOD (IGC230) LKLIB(INCLUDE) .\n++MOD (IGC231) LKLIB(INCLUDE) .\n++MOD (IGC232) LKLIB(INCLUDE) .\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A$$W004": {"ttr": 527, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (A$$W004)   /*\n      THIS USERMOD IS TO INSTALL THE\n      SVC MODULES FOR IDMS\n\n      SVC = 206 - TYPE 1 (IDMS PROD)\n      SVC = 239 - TYPE 1 (IDMS PROD)\n\n      THIS USERMOD REQUIRES THAT A UCLIN\n      BE DONE TO ADD THE FMID TO BE VER'D\n      AND TO ADD THE SVC TO THE NUCLEUS.\n\n      SET BOUNDARY(GLOBAL) .\n          UCLIN .\n             ADD GLOBALZONE FMID(A$$SVCS) .\n          ENDUCL .\n      SET BOUNDARY(TARGETZONE) .\n          UCLIN .\n             ADD SYSMOD(A$$SVCS) FUNCTION\n                 RECDATE(YYDDD) INSDATE(YYDDD) .\n             ADD MOD(IGC206) LMOD(IEANUC01)\n                 DISTLIB(ASRCLIB)  FMID(A$$SVCS) .\n             ADD MOD(IGC239) LMOD(IEANUC01)\n                 DISTLIB(ASRCLIB)  FMID(A$$SVCS) .\n          ENDUCL .\n      SET BOUNDARY(DLIBZONE) .\n          UCLIN .\n             ADD SYSMOD(A$$SVCS) FUNCTION\n                 RECDATE(YYDDD) INSDATE(YYDDD) .\n             ADD MOD(IGC206) FMID(A$$SVCS)\n                 DISTLIB(ASRCLIB)  .\n             ADD MOD(IGC239) FMID(A$$SVCS)\n                 DISTLIB(ASRCLIB)  .\n          ENDUCL .\n\n                                                     07/26/88 BRM  */.\n++VER (Z038) FMID(A$$SVCS) .\n++HOLD(A$$W004) SYSTEM FMID(A$$SVCS) REASON(UCLIN) DATE(88208)\n                COMMENT(RUN UCLIN AS SHOWN IN USERMOD COMMENTS) .\n++MOD (IGC206) LKLIB(INCLUDE) .\n++MOD (IGC239) LKLIB(INCLUDE) .\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A$$W005": {"ttr": 529, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (A$$W005)   /*\n      THIS USERMOD IS TO INSTALL THE\n      DATA ENCRYPTION STANDARD SVC\n\n      SVC = 209 - TYPE 4\n                                                     07/26/88 BRM  */.\n++VER (Z038) FMID(A$$SVCS) .\n++JCLIN .\n//A$$W005 JOB WC07N0323,'W1-5311  CR SINGER'\n//LPASVC  EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS2,NAME=HSSLPA,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//SYSLIN   DD  *\n   INCLUDE SYSPUNCH(WCSVC209)\n   NAME WCSVC209(R)\n/*\n++SRC (WCSVC209) DISTLIB(ASRCLIB)  .\n         TITLE 'SVC 209 - DATA ENCRYPTION'\nWCSVC209 CSECT\n*\n*  THIS SVC ENCRYPTS 8 BYTES OF DATA ACCORDING TO THE NATIONAL BUREAU\n*  OF STANDARDS DATA ENCRYPTION STANDARD.\n*\n*  AT ENTRY, REG 1 MUST POINT TO A PARAMETER LIST CONTAINING:\n*       WORD 1:  ADDRESS OF INPUT DATA (8 BYTES)\n*       WORD 2:  ADDRESS OF KEY (8 BYTES) TO USE IN ENCRYPTION\n*                (NOTE:  IF THIS KEY IS ZERO, A KEY WILL BE GENERATED\n*                BY REVERSING THE INPUT ON A BIT-BY-BIT BASIS.)\n*       WORD 3:  ADDRESS OF OUTPUT AREA (8 BYTES) - AT EXIT, THIS\n*                FIELD WILL CONTAIN THE ENCRYPTED DATA\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         USING WCSVC209,R12\n         USING WORK,R13       ADDRESSABILITY FOR WORK AREA\n         USING PARMS,R10      ADDRESSABILITY FOR PARMLIST\n         LR    R12,R6\n         LR    R10,R1         R10 - SAVE PARM PTR\n*\n         LA    R0,WORKLEN\n         GETMAIN R,LV=(0)     GET AREA FOR SAVE AND KEYS\n         LR    R13,R1         R13 PTS TO SAVE AREA\n*\n         ST    R14,SAVE       SAVE RETURN ADDRESS\n*\n         CALL  KEYGEN         GENERATE KEYS\n*\n         L     R8,IN          GET ADDRESS OF INPUT DATA\n         LM    R2,R3,0(R8)    LOAD INPUT DATA\n         BAL   R14,IP         DO INITIAL PERMUTATION - RESULT IN R2,R3\n*\n         LA    R11,KEYS       GET ADDRESS OF KEYS\n         LA    R9,16          COUNTER\nMAINLOOP EQU   *\n         CALL  MAINSUB        GENERATE NEXT L,R - RESULT IN R2,R3\n         LA    R11,8(R11)     GET ADDR OF NEXT KEY\n         BCT   R9,MAINLOOP\n*\n         BAL   R14,IPINV      DO INVERSE INITIAL PERMUTATION\n         L     R8,OUT         LOAD ADDR FOR OUTPUT\n         STM   R2,R3,0(R8)    STORE OUTPUT\n*\n         L     R14,SAVE       RESTORE R14\n         LR    R1,R13\n         LA    R0,WORKLEN\n         FREEMAIN R,LV=(0),A=(R1)  FREE GETMAINED AREA\n         LR    R1,R10         RESTORE R1\n         BR    R14\n*\n*\nIP       EQU   *\n         XR    R6,R6\n         XR    R7,R7\n*** IP START\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,6\n         SLDL  R4,63\n*        SRDL  R4,0\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,14\n         SLDL  R4,63\n         SRDL  R4,1\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,22\n         SLDL  R4,63\n         SRDL  R4,2\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,30\n         SLDL  R4,63\n         SRDL  R4,3\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,38\n         SLDL  R4,63\n         SRDL  R4,4\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,46\n         SLDL  R4,63\n         SRDL  R4,5\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,54\n         SLDL  R4,63\n         SRDL  R4,6\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,62\n         SLDL  R4,63\n         SRDL  R4,7\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,4\n         SLDL  R4,63\n         SRDL  R4,8\n         OR    R6,R4\n*        OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,12\n         SLDL  R4,63\n         SRDL  R4,9\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,20\n         SLDL  R4,63\n         SRDL  R4,10\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,28\n         SLDL  R4,63\n         SRDL  R4,11\n         OR    R6,R4\n*        OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,36\n         SLDL  R4,63\n         SRDL  R4,12\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,44\n         SLDL  R4,63\n         SRDL  R4,13\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,52\n         SLDL  R4,63\n         SRDL  R4,14\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,60\n         SLDL  R4,63\n         SRDL  R4,15\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,2\n         SLDL  R4,63\n         SRDL  R4,16\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,10\n         SLDL  R4,63\n         SRDL  R4,17\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,18\n         SLDL  R4,63\n         SRDL  R4,18\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,26\n         SLDL  R4,63\n         SRDL  R4,19\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,34\n         SLDL  R4,63\n         SRDL  R4,20\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,42\n         SLDL  R4,63\n         SRDL  R4,21\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,50\n         SLDL  R4,63\n         SRDL  R4,22\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,58\n         SLDL  R4,63\n         SRDL  R4,23\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n*        SRDL  R4,0\n         SLDL  R4,63\n         SRDL  R4,24\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,8\n         SLDL  R4,63\n         SRDL  R4,25\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,16\n         SLDL  R4,63\n         SRDL  R4,26\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,24\n         SLDL  R4,63\n         SRDL  R4,27\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,32\n         SLDL  R4,63\n         SRDL  R4,28\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,40\n         SLDL  R4,63\n         SRDL  R4,29\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,48\n         SLDL  R4,63\n         SRDL  R4,30\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,56\n         SLDL  R4,63\n         SRDL  R4,31\n         OR    R6,R4\n*        OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,7\n         SLDL  R4,63\n         SRDL  R4,32\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,15\n         SLDL  R4,63\n         SRDL  R4,33\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,23\n         SLDL  R4,63\n         SRDL  R4,34\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,31\n         SLDL  R4,63\n         SRDL  R4,35\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,39\n         SLDL  R4,63\n         SRDL  R4,36\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,47\n         SLDL  R4,63\n         SRDL  R4,37\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,55\n         SLDL  R4,63\n         SRDL  R4,38\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,63\n         SLDL  R4,63\n         SRDL  R4,39\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,5\n         SLDL  R4,63\n         SRDL  R4,40\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,13\n         SLDL  R4,63\n         SRDL  R4,41\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,21\n         SLDL  R4,63\n         SRDL  R4,42\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,29\n         SLDL  R4,63\n         SRDL  R4,43\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,37\n         SLDL  R4,63\n         SRDL  R4,44\n*        OR    R6,R4\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,45\n         SLDL  R4,63\n         SRDL  R4,45\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,53\n         SLDL  R4,63\n         SRDL  R4,46\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,61\n         SLDL  R4,63\n         SRDL  R4,47\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,3\n         SLDL  R4,63\n         SRDL  R4,48\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,11\n         SLDL  R4,63\n         SRDL  R4,49\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,19\n         SLDL  R4,63\n         SRDL  R4,50\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,27\n         SLDL  R4,63\n         SRDL  R4,51\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,35\n         SLDL  R4,63\n         SRDL  R4,52\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,43\n         SLDL  R4,63\n         SRDL  R4,53\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,51\n         SLDL  R4,63\n         SRDL  R4,54\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,59\n         SLDL  R4,63\n         SRDL  R4,55\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,1\n         SLDL  R4,63\n         SRDL  R4,56\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,9\n         SLDL  R4,63\n         SRDL  R4,57\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,17\n         SLDL  R4,63\n         SRDL  R4,58\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,25\n         SLDL  R4,63\n         SRDL  R4,59\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,33\n         SLDL  R4,63\n         SRDL  R4,60\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,41\n         SLDL  R4,63\n         SRDL  R4,61\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,49\n         SLDL  R4,63\n         SRDL  R4,62\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,57\n         SLDL  R4,63\n         SRDL  R4,63\n         OR    R7,R5\n*\n***  IP END\n         LR    R2,R6\n         LR    R3,R7\n         BR    R14\nIPINV    EQU   *\n         XR    R6,R6\n         XR    R7,R7\n*** IPINV START\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,24\n         SLDL  R4,63\n*        SRDL  R4,0\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,56\n         SLDL  R4,63\n         SRDL  R4,1\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,16\n         SLDL  R4,63\n         SRDL  R4,2\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,48\n         SLDL  R4,63\n         SRDL  R4,3\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,8\n         SLDL  R4,63\n         SRDL  R4,4\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,40\n         SLDL  R4,63\n         SRDL  R4,5\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n*        SRDL  R4,0\n         SLDL  R4,63\n         SRDL  R4,6\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,32\n         SLDL  R4,63\n         SRDL  R4,7\n         OR    R6,R4\n*        OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,25\n         SLDL  R4,63\n         SRDL  R4,8\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,57\n         SLDL  R4,63\n         SRDL  R4,9\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,17\n         SLDL  R4,63\n         SRDL  R4,10\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,49\n         SLDL  R4,63\n         SRDL  R4,11\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,9\n         SLDL  R4,63\n         SRDL  R4,12\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,41\n         SLDL  R4,63\n         SRDL  R4,13\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,1\n         SLDL  R4,63\n         SRDL  R4,14\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,33\n         SLDL  R4,63\n         SRDL  R4,15\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,26\n         SLDL  R4,63\n         SRDL  R4,16\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,58\n         SLDL  R4,63\n         SRDL  R4,17\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,18\n         SLDL  R4,63\n         SRDL  R4,18\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,50\n         SLDL  R4,63\n         SRDL  R4,19\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,10\n         SLDL  R4,63\n         SRDL  R4,20\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,42\n         SLDL  R4,63\n         SRDL  R4,21\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,2\n         SLDL  R4,63\n         SRDL  R4,22\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,34\n         SLDL  R4,63\n         SRDL  R4,23\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,27\n         SLDL  R4,63\n         SRDL  R4,24\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,59\n         SLDL  R4,63\n         SRDL  R4,25\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,19\n         SLDL  R4,63\n         SRDL  R4,26\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,51\n         SLDL  R4,63\n         SRDL  R4,27\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,11\n         SLDL  R4,63\n         SRDL  R4,28\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,43\n         SLDL  R4,63\n         SRDL  R4,29\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,3\n         SLDL  R4,63\n         SRDL  R4,30\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,35\n         SLDL  R4,63\n         SRDL  R4,31\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,28\n         SLDL  R4,63\n         SRDL  R4,32\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,60\n         SLDL  R4,63\n         SRDL  R4,33\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,20\n         SLDL  R4,63\n         SRDL  R4,34\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,52\n         SLDL  R4,63\n         SRDL  R4,35\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,12\n         SLDL  R4,63\n         SRDL  R4,36\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,44\n         SLDL  R4,63\n         SRDL  R4,37\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,4\n         SLDL  R4,63\n         SRDL  R4,38\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,36\n         SLDL  R4,63\n         SRDL  R4,39\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,29\n         SLDL  R4,63\n         SRDL  R4,40\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,61\n         SLDL  R4,63\n         SRDL  R4,41\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,21\n         SLDL  R4,63\n         SRDL  R4,42\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,53\n         SLDL  R4,63\n         SRDL  R4,43\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,13\n         SLDL  R4,63\n         SRDL  R4,44\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,45\n         SLDL  R4,63\n         SRDL  R4,45\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,5\n         SLDL  R4,63\n         SRDL  R4,46\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,37\n         SLDL  R4,63\n         SRDL  R4,47\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,30\n         SLDL  R4,63\n         SRDL  R4,48\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,62\n         SLDL  R4,63\n         SRDL  R4,49\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,22\n         SLDL  R4,63\n         SRDL  R4,50\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,54\n         SLDL  R4,63\n         SRDL  R4,51\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,14\n         SLDL  R4,63\n         SRDL  R4,52\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,46\n         SLDL  R4,63\n         SRDL  R4,53\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,6\n         SLDL  R4,63\n         SRDL  R4,54\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,38\n         SLDL  R4,63\n         SRDL  R4,55\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,31\n         SLDL  R4,63\n         SRDL  R4,56\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,63\n         SLDL  R4,63\n         SRDL  R4,57\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,23\n         SLDL  R4,63\n         SRDL  R4,58\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,55\n         SLDL  R4,63\n         SRDL  R4,59\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,15\n         SLDL  R4,63\n         SRDL  R4,60\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,47\n         SLDL  R4,63\n         SRDL  R4,61\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,7\n         SLDL  R4,63\n         SRDL  R4,62\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,39\n         SLDL  R4,63\n         SRDL  R4,63\n         OR    R7,R5\n*\n***  IPINV END\n         LR    R2,R6\n         LR    R3,R7\n         BR    R14\n         EJECT\nWORK     DSECT                MAPPING FOR GETMAINED WORK AREA\nSAVE     DS    18F\nKEYS     DS    32F            FOR 16 GENERATED KEYS\nWORKLEN  EQU   *-WORK\n*\nPARMS    DSECT\nIN       DS    F\nKEY      DS    F\nOUT      DS    F\n         DROP  R12\n         EJECT\nKEYGEN   CSECT\n         STM   R14,R12,12(R13)\n         USING KEYGEN,R12\n         USING PARMS,R10     ADDRESSABILITY OF WCSVC209 PARMS\n         USING WORK,R13      ADDRESSABILITY OF WCSVC209 WORKAREA\n         LR    R12,R15\n         L     R9,KEY        GET ADDR OF INPUT KEY\n         LM    R2,R3,0(R9)   GET INPUT KEY\n         LTR   R2,R2\n         BNZ   KBEGIN\n         LTR   R3,R3\n         BNZ   KBEGIN\n         BAL   R14,KGEN      IF ZERO, GENERATE KEY FROM INPUT DATA\nKBEGIN   EQU   *\n         LA    R11,KEYS      GET ADDRESS OF AREA FOR KEYS\n         XR    R6,R6\n         XR    R7,R7\n         BAL   R14,KPC1\n         BAL   R14,KSHIFT1   KEY1\n         BAL   R14,KSHIFT1   KEY2\n         LA    R9,6\nKLOOP1   BAL   R14,KSHIFT2   KEY3-KEY8\n         BCT   R9,KLOOP1\n         BAL   R14,KSHIFT1   KEY9\n         LA    R9,6\nKLOOP2   BAL   R14,KSHIFT2   KEY10-KEY15\n         BCT   R9,KLOOP2\n         BAL   R14,KSHIFT1   KEY16\n*\n         LM    R14,R12,12(R13)\n         BR    R14\n*\nKGEN     EQU   *             GENERATE KEY BY FLIPPING INPUT DATA\n         L     R11,IN        GET ADDR OF INPUT DATA\n         L     R2,0(,R11)\n         BAL   R8,KGLOOP1\n         ST    R4,4(,R9)\n         L     R2,4(,R11)\n         BAL   R8,KGLOOP1\n         ST    R4,0(,R9)     STORE RESULT IN INPUT KEY AREA\n         LM    R2,R3,0(R9)      AND RELOAD R2,R3\n         BR    R14\nKGLOOP1  LA    R6,32\nKGLOOP2  SRDL  R2,1\n         SRL   R3,31\n         SLL   R4,1\n         OR    R4,R3\n         BCT   R6,KGLOOP2\n         BR    R8\nKSHIFT1  EQU   *\n         LR    R5,R2\n         XR    R4,R4\n         SLDL  R4,1  *\n         SLL   R4,4\n         OR    R5,R4\n         LR    R2,R5\n         LR    R5,R3\n         XR    R4,R4\n         SLDL  R4,1  *\n         SLL   R4,4\n         OR    R5,R4\n         LR    R3,R5\n         B     KPC2\nKSHIFT2  EQU   *\n         LR    R5,R2\n         XR    R4,R4\n         SLDL  R4,2  *\n         SLL   R4,4\n         OR    R5,R4\n         LR    R2,R5\n         LR    R5,R3\n         XR    R4,R4\n         SLDL  R4,2  *\n         SLL   R4,4\n         OR    R5,R4\n         LR    R3,R5\n         B     KPC2\n*\nKPC1     EQU   *\n***   PC1 START\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,7\n         SLDL  R4,63\n*        SRDL  R4,0\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,15\n         SLDL  R4,63\n         SRDL  R4,1\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,23\n         SLDL  R4,63\n         SRDL  R4,2\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,31\n         SLDL  R4,63\n         SRDL  R4,3\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,39\n         SLDL  R4,63\n         SRDL  R4,4\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,47\n         SLDL  R4,63\n         SRDL  R4,5\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,55\n         SLDL  R4,63\n         SRDL  R4,6\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,63\n         SLDL  R4,63\n         SRDL  R4,7\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,6\n         SLDL  R4,63\n         SRDL  R4,8\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,14\n         SLDL  R4,63\n         SRDL  R4,9\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,22\n         SLDL  R4,63\n         SRDL  R4,10\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,30\n         SLDL  R4,63\n         SRDL  R4,11\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,38\n         SLDL  R4,63\n         SRDL  R4,12\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,46\n         SLDL  R4,63\n         SRDL  R4,13\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,54\n         SLDL  R4,63\n         SRDL  R4,14\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,62\n         SLDL  R4,63\n         SRDL  R4,15\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,5\n         SLDL  R4,63\n         SRDL  R4,16\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,13\n         SLDL  R4,63\n         SRDL  R4,17\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,21\n         SLDL  R4,63\n         SRDL  R4,18\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,29\n         SLDL  R4,63\n         SRDL  R4,19\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,37\n         SLDL  R4,63\n         SRDL  R4,20\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,45\n         SLDL  R4,63\n         SRDL  R4,21\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,53\n         SLDL  R4,63\n         SRDL  R4,22\n         OR    R6,R4\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,61\n         SLDL  R4,63\n         SRDL  R4,23\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,4\n         SLDL  R4,63\n         SRDL  R4,24\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,12\n         SLDL  R4,63\n         SRDL  R4,25\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,20\n         SLDL  R4,63\n         SRDL  R4,26\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,28\n         SLDL  R4,63\n         SRDL  R4,27\n         OR    R6,R4\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,1\n         SLDL  R4,63\n         SRDL  R4,32\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,9\n         SLDL  R4,63\n         SRDL  R4,33\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,17\n         SLDL  R4,63\n         SRDL  R4,34\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,25\n         SLDL  R4,63\n         SRDL  R4,35\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,33\n         SLDL  R4,63\n         SRDL  R4,36\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,41\n         SLDL  R4,63\n         SRDL  R4,37\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,49\n         SLDL  R4,63\n         SRDL  R4,38\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,57\n         SLDL  R4,63\n         SRDL  R4,39\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,2\n         SLDL  R4,63\n         SRDL  R4,40\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,10\n         SLDL  R4,63\n         SRDL  R4,41\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,18\n         SLDL  R4,63\n         SRDL  R4,42\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,26\n         SLDL  R4,63\n         SRDL  R4,43\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,34\n         SLDL  R4,63\n         SRDL  R4,44\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,42\n         SLDL  R4,63\n         SRDL  R4,45\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,50\n         SLDL  R4,63\n         SRDL  R4,46\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,58\n         SLDL  R4,63\n         SRDL  R4,47\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,3\n         SLDL  R4,63\n         SRDL  R4,48\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,11\n         SLDL  R4,63\n         SRDL  R4,49\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,19\n         SLDL  R4,63\n         SRDL  R4,50\n         OR    R7,R5\n*\n*        LR    R4,R2\n         LR    R5,R3\n         SRDL  R4,27\n         SLDL  R4,63\n         SRDL  R4,51\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,35\n         SLDL  R4,63\n         SRDL  R4,52\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,43\n         SLDL  R4,63\n         SRDL  R4,53\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,51\n         SLDL  R4,63\n         SRDL  R4,54\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,59\n         SLDL  R4,63\n         SRDL  R4,55\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,36\n         SLDL  R4,63\n         SRDL  R4,56\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,44\n         SLDL  R4,63\n         SRDL  R4,57\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,52\n         SLDL  R4,63\n         SRDL  R4,58\n         OR    R7,R5\n*\n         LR    R4,R2\n*        LR    R5,R3\n         SRDL  R4,60\n         SLDL  R4,63\n         SRDL  R4,59\n         OR    R7,R5\n***   PC1 END\n         LR    R2,R6\n         LR    R3,R7\n         BR    R14\n*\nKPC2     EQU   *\n         XR    R6,R6\n         XR    R7,R7\n***  PC2 START\n         LR    R4,R2\n         SRL   R4,18\n         SLL   R4,31\n*        SRL   R4,0\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,15\n         SLL   R4,31\n         SRL   R4,1\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,21\n         SLL   R4,31\n         SRL   R4,2\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,8\n         SLL   R4,31\n         SRL   R4,3\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,31\n         SLL   R4,31\n         SRL   R4,4\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,27\n         SLL   R4,31\n         SRL   R4,5\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,29\n         SLL   R4,31\n         SRL   R4,6\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,4\n         SLL   R4,31\n         SRL   R4,7\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,17\n         SLL   R4,31\n         SRL   R4,8\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,26\n         SLL   R4,31\n         SRL   R4,9\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,11\n         SLL   R4,31\n         SRL   R4,10\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,22\n         SLL   R4,31\n         SRL   R4,11\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,9\n         SLL   R4,31\n         SRL   R4,12\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,13\n         SLL   R4,31\n         SRL   R4,13\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,20\n         SLL   R4,31\n         SRL   R4,14\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,28\n         SLL   R4,31\n         SRL   R4,15\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,6\n         SLL   R4,31\n         SRL   R4,16\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,24\n         SLL   R4,31\n         SRL   R4,17\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,16\n         SLL   R4,31\n         SRL   R4,18\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,25\n         SLL   R4,31\n         SRL   R4,19\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,5\n         SLL   R4,31\n         SRL   R4,20\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,12\n         SLL   R4,31\n         SRL   R4,21\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,19\n         SLL   R4,31\n         SRL   R4,22\n         OR    R6,R4\n*\n         LR    R4,R2\n         SRL   R4,30\n         SLL   R4,31\n         SRL   R4,23\n         OR    R6,R4\n*\n         LR    R5,R3\n         SRL   R5,19\n         SLL   R5,31\n*        SRL   R5,0\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,8\n         SLL   R5,31\n         SRL   R5,1\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,29\n         SLL   R5,31\n         SRL   R5,2\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,23\n         SLL   R5,31\n         SRL   R5,3\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,13\n         SLL   R5,31\n         SRL   R5,4\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,5\n         SLL   R5,31\n         SRL   R5,5\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,30\n         SLL   R5,31\n         SRL   R5,6\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,20\n         SLL   R5,31\n         SRL   R5,7\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,9\n         SLL   R5,31\n         SRL   R5,8\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,15\n         SLL   R5,31\n         SRL   R5,9\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,27\n         SLL   R5,31\n         SRL   R5,10\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,12\n         SLL   R5,31\n         SRL   R5,11\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,16\n         SLL   R5,31\n         SRL   R5,12\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,11\n         SLL   R5,31\n         SRL   R5,13\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,21\n         SLL   R5,31\n         SRL   R5,14\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,4\n         SLL   R5,31\n         SRL   R5,15\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,26\n         SLL   R5,31\n         SRL   R5,16\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,7\n         SLL   R5,31\n         SRL   R5,17\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,14\n         SLL   R5,31\n         SRL   R5,18\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,18\n         SLL   R5,31\n         SRL   R5,19\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,10\n         SLL   R5,31\n         SRL   R5,20\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,24\n         SLL   R5,31\n         SRL   R5,21\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,31\n         SLL   R5,31\n         SRL   R5,22\n         OR    R7,R5\n*\n         LR    R5,R3\n         SRL   R5,28\n         SLL   R5,31\n         SRL   R5,23\n         OR    R7,R5\n*\n***  PC2 END\n         STM   R6,R7,0(R11)\n         LA    R11,8(R11)\n         BR    R14\n         DROP  R12\n         EJECT\nMAINSUB  CSECT\n         STM   R14,R12,12(R13)\n         USING MAINSUB,R12\n         LR    R12,R15\n*\n         XR    R6,R6\n         XR    R7,R7\n         LR    R4,R3\n         LR    R5,R3\n         SRDL  R4,1\n*\n         LA    R8,8\nERLOOP   EQU   *\n         XR    R4,R4\n         SLDL  R4,6\n         OR    R7,R4\n         SLDL  R6,6\n         SRDL  R4,2\n         BCT   R8,ERLOOP\n*\n         SLDL  R6,2\n         SLL   R6,8\n*\n         LR    R4,R6\n         SRL   R6,30\n         SLL   R6,8\n         OR    R7,R6\n         LR    R5,R7\n*                             R4,R5 = E(R)\n         LM    R6,R7,0(R11)\n         XR    R4,R6\n         XR    R5,R7\n*                             R4,R5 = E(R) (+) K\n         LA    R11,STABLE\n         XR    R10,R10\n         LR    R7,R4\nSBLOOP1  EQU   *\n         LA    R1,4\n*\nSBLOOP2  EQU   *\n         XR    R6,R6\n         SLDL  R6,6\n         LR    R8,R6\n         SRDL  R6,1\n         SRL   R6,4\n         SLDL  R6,1\n         SLL   R6,4\n         SRDL  R8,5\n         SRL   R9,28\n         OR    R9,R6\n         SLL   R10,4\n         XR    R15,R15\n         IC    R15,0(R9,R11)\n         OR    R10,R15\n         LA    R11,64(R11)\n         BCT   R1,SBLOOP2\n*\n         LA    R15,STABEND\n         CR    R11,R15\n         BNL   SBEND\n         LR    R7,R5\n         B     SBLOOP1\n*\nSBEND    EQU   *\n         LR    R4,R10         R4 = S(B1...B8)\n         B     MSPERM\n*\nSTABLE   DS    0F\nS1       DC    XL16'0E040D01020F0B08030A060C05090007'\n         DC    XL16'000F07040E020D010A060C0B09050308'\n         DC    XL16'04010E080D06020B0F0C0907030A0500'\n         DC    XL16'0F0C080204090107050B030E0A00060D'\nS2       DC    XL16'0F01080E060B03040907020D0C00050A'\n         DC    XL16'030D04070F02080E0C00010A06090B05'\n         DC    XL16'000E070B0A040D0105080C060903020F'\n         DC    XL16'0D080A01030F04020B06070C00050E09'\nS3       DC    XL16'0A00090E06030F05010D0C070B040208'\n         DC    XL16'0D0700090304060A0208050E0C0B0F01'\n         DC    XL16'0D060409080F03000B01020C050A0E07'\n         DC    XL16'010A0D0006090807040F0E030B05020C'\nS4       DC    XL16'070D0E030006090A010208050B0C040F'\n         DC    XL16'0D080B05060F00030407020C010A0E09'\n         DC    XL16'0A0609000C0B070D0F01030E05020804'\n         DC    XL16'030F00060A010D080904050B0C07020E'\nS5       DC    XL16'020C0401070A0B060805030F0D000E09'\n         DC    XL16'0E0B020C04070D0105000F0A03090806'\n         DC    XL16'0402010B0A0D07080F090C050603000E'\n         DC    XL16'0B080C07010E020D060F00090A040503'\nS6       DC    XL16'0C010A0F09020608000D03040E07050B'\n         DC    XL16'0A0F0402070C090506010D0E000B0308'\n         DC    XL16'090E0F0502080C030700040A010D0B06'\n         DC    XL16'0403020C09050F0A0B0E01070600080D'\nS7       DC    XL16'040B020E0F00080D030C0907050A0601'\n         DC    XL16'0D000B070409010A0E03050C020F0806'\n         DC    XL16'01040B0D0C03070E0A0F060800050902'\n         DC    XL16'060B0D0801040A070905000F0E02030C'\nS8       DC    XL16'0D020804060F0B010A09030E05000C07'\n         DC    XL16'010F0D080A0307040C05060B000E0902'\n         DC    XL16'070B0401090C0E0200060A0D0F030508'\n         DC    XL16'02010E07040A080D0F0C09000305060B'\nSTABEND  DS    F\n*\nMSPERM   EQU   *\n         XR    R6,R6\n***   PERM START\n         LR    R5,R4\n         SRL   R5,16\n         SLL   R5,31\n*        SRL   R5,0\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,25\n         SLL   R5,31\n         SRL   R5,1\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,12\n         SLL   R5,31\n         SRL   R5,2\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,11\n         SLL   R5,31\n         SRL   R5,3\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,3\n         SLL   R5,31\n         SRL   R5,4\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,10\n         SLL   R5,31\n         SRL   R5,5\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,4\n         SLL   R5,31\n         SRL   R5,6\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,15\n         SLL   R5,31\n         SRL   R5,7\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,31\n         SLL   R5,31\n         SRL   R5,8\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,17\n         SLL   R5,31\n         SRL   R5,9\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,11\n         SLL   R5,31\n         SRL   R5,10\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,6\n         SLL   R5,31\n         SRL   R5,11\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,27\n         SLL   R5,31\n         SRL   R5,12\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,14\n         SLL   R5,31\n         SRL   R5,13\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,1\n         SLL   R5,31\n         SRL   R5,14\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,22\n         SLL   R5,31\n         SRL   R5,15\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,30\n         SLL   R5,31\n         SRL   R5,16\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,24\n         SLL   R5,31\n         SRL   R5,17\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,8\n         SLL   R5,31\n         SRL   R5,18\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,18\n         SLL   R5,31\n         SRL   R5,19\n         OR    R6,R5\n*\n         LR    R5,R4\n*        SRL   R5,0\n         SLL   R5,31\n         SRL   R5,20\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,5\n         SLL   R5,31\n         SRL   R5,21\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,29\n         SLL   R5,31\n         SRL   R5,22\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,23\n         SLL   R5,31\n         SRL   R5,23\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,13\n         SLL   R5,31\n         SRL   R5,24\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,19\n         SLL   R5,31\n         SRL   R5,25\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,2\n         SLL   R5,31\n         SRL   R5,26\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,26\n         SLL   R5,31\n         SRL   R5,27\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,10\n         SLL   R5,31\n         SRL   R5,28\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,21\n         SLL   R5,31\n         SRL   R5,29\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,28\n         SLL   R5,31\n         SRL   R5,30\n         OR    R6,R5\n*\n         LR    R5,R4\n         SRL   R5,7\n         SLL   R5,31\n         SRL   R5,31\n         OR    R6,R5\n*\n***  PERM END\n         LR    R4,R6\n*\n         XR    R4,R2\n         LR    R2,R3\n         LR    R3,R4\n         LM    R14,R1,12(R13)\n         LM    R4,R12,36(R13)\n         BR    R14\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A$$W006": {"ttr": 1540, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (A$$W006)   /*\n      THIS USERMOD IS TO INSTALL THE\n      AUTHORIZE IEBCOPY SVC\n\n      SVC = 212 - TYPE 3\n                                                     07/26/88 BRM  */.\n++VER (Z038) FMID(A$$SVCS) .\n++JCLIN .\n//A$$W006 JOB WC07N0323,'W1-5311  CR SINGER'\n//LPASVC  EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS2,NAME=HSSLPA,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//SYSLIN   DD  *\n   INCLUDE SYSPUNCH(WCSVC212)\n   NAME WCSVC212(R)\n/*\n++SRC (WCSVC212) DISTLIB(ASRCLIB)  .\nWCSVC212 CSECT                    AUTHORIZATION ON/OFF SVC              00001\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 00002\n*                                                                     * 00003\n*   ROUTINE NAME - WCSVC212                                           * 00004\n*           DATE - 21 OCTOBER 1982                                    * 00005\n*           BRUCE R. MINTON                                           * 00006\n*           GENERAL DYNAMICS - DATA SYSTEMS DIVISION                  * 00007\n*           P.O. BOX 85808                                            * 00008\n*           SAN DIEGO, CALIFORNIA 92138                               * 00009\n*                                                                     * 00010\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 00011\n         SPACE 4                                                        00012\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 00013\n*   THIS SVC TURNS ON THE AUTHORIZATION BIT FROM CALLER. IT WAS SETUP * 00014\n*   FOR PROGRAM ISPFCOPY BECAUSE IT NEEDS TO CALL IEBCOPY.            * 00015\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 00016\n         BALR  12,0               PROGRAM ADDRESSABILITY                00017\n         USING *,12                                                     00018\n         L     2,28(5)            ADDRESS OF CALLERS RB TO R2           00019\n         CLC   21(3,2),361(3)     CHECK RESUME PSW                      00020\n         BL    RETURN             EXIT, CALLER NOT IN PLPA              00021\n         L     2,180(4)           ADDRESS JSCB TO R2                    00022\n         BCT   0,AUTHOFF          R0 NOT EQUAL 1 REQUESTS AUTH OFF      00023\nAUTHON   OI    236(2),X'01'       SET JSCBAUTH BIT                      00024\n         B     RETURN             EXIT WITH AUTHORIZATION ON            00025\nAUTHOFF  NI    236(2),X'FE'       CLEAR JSCBAUTH BIT                    00026\nRETURN   BR    14                 RETURN                                00027\n         END   WCSVC212                                                 00028\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A$$W007": {"ttr": 1542, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (A$$W007)   /*\n      THIS USERMOD IS TO INSTALL THE\n      SVC MODULES FOR RMDS\n\n      SVC = 216 - TYPE 3 (PROD)\n      SVC = 236 - TYPE 3 (DEVL)\n\n                                                     07/26/88 BRM  */.\n++VER (Z038) FMID(A$$SVCS) .\n++JCLIN .\n//A$$W007 JOB WC07N0323,'W1-5311  CR SINGER'\n//LPASVC  EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS2,NAME=HSSLPA,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE  DD  DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN   DD  *\n   INCLUDE INCLUDE(WCSVC216)\n   NAME WCSVC216(R)\n   INCLUDE INCLUDE(WCSVC236)\n   NAME WCSVC236(R)\n/*\n++MOD (WCSVC216) LKLIB(INCLUDE) .\n++MOD (WCSVC236) LKLIB(INCLUDE) .\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A$$W008": {"ttr": 1544, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (A$$W008)   /*\n      THIS USERMOD IS TO INSTALL THE\n      SVC THAT OBTAINS THE TERMINAL ID FOR VTAM\n\n      SVC = 233 - TYPE 4\n                                                     07/26/88 BRM  */.\n++VER (Z038) FMID(A$$SVCS) .\n++JCLIN .\n//A$$W008 JOB WC07N0323,'W1-5311  CR SINGER'\n//LPASVC  EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS2,NAME=HSSLPA,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//SYSLIN   DD  *\n   INCLUDE SYSPUNCH(WCSVC233)\n   NAME WCSVC233(R)\n/*\n++SRC (WCSVC233) DISTLIB(ASRCLIB)  .\n         TITLE 'SVC 233 - OBTAIN TERMINAL ID'\nWCSVC233 CSECT\n*\n*  THIS SVC OBTAINS THE TERMINAL ID FOR AN ADDRESS SPACE (CURRENT OR\n*  OTHERWISE) FROM THE TSB.  FOR VTAM, THIS IS THE FIELD 'TSBXSYM'.\n*  FOR TCAM, THIS IS THE FIELD 'TSBLINE', TRANSLATED TO CHARACTER\n*  FORMAT (E.G., X'0A12' BECOMES C'0A12') AND PRECEDED BY THE\n*  CHARACTERS 'TCAM'.\n*\n*  AT ENTRY, REG 1 MUST POINT TO A PARAMETER LIST CONTAINING:\n*       WORD 1:  ADDRESS OF THE ASCB TO BE USED\n*                           - OR -\n*                0 (IN WHICH CASE THE CURRENT ASCB WILL BE USED)\n*       WORD 2:  ADDRESS OF 8-CHARACTER AREA IN WHICH THE TERMINAL\n*                    ID WILL BE RETURNED\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         USING WCSVC233,R12\n         USING WORK,R13       ADDRESSABILITY FOR WORK AREA\n         LR    R12,R6\n         LR    R2,R1          GET ADDRESS OF PARMS\n         USING PARMS,R2       ADDRESSABILITY FOR PARMS\n*\n         LA    R0,WORKLEN\n         GETMAIN R,LV=(0)     GET AREA FOR SAVE\n         LR    R13,R1         R13 PTS TO SAVE AREA\n*\n         ST    R14,SAVE       SAVE RETURN ADDRESS\n*\n         L     R7,OUTADDR     GET ADDRESS OF OUTPUT AREA\n         MVI   0(R7),C' '     CLEAR OUTPUT AREA\n         MVC   1(7,R7),0(R7)\n         L     R8,ASCBADDR    GET ASCB ADDRESS\n         LTR   R8,R8          ZERO?\n         BNZ   GOTASCB\n*                             YES, GET CURRENT ASCB ADDRESS\n         L     R8,16(0,0)     CVT\n         L     R8,0(0,R8)     PTR TO CURRENT TCB'S, ASCB'S\n         L     R8,12(0,R8)    CURRENT ASCB\nGOTASCB  EQU   *              GET TERMINAL ID\n         L     R8,60(0,R8)    TSB\n         TM    25(R8),X'01'   VTAM?\n         BO    VTAM\nTCAM     EQU   *\n         MVC   0(4,R7),=C'TCAM'  FLAG AS TCAM\n         MVC   4(1,R7),82(R8) PUT FIRST HEX DIGIT IN OUTPUT AREA\n         IC    R9,83(R8)      GET 2ND AND 3RD DIGITS\n         STC   R9,6(,R7)      PUT 3RD DIGIT IN OUTPUT AREA\n         SRL   R9,4           GET 2ND DIGIT\n         STC   R9,5(,R7)      PUT 2ND DIGIT IN OUTPUT AREA\n         NC    4(3,R7),=X'0F0F0F'    PREPARE TO TRANSLATE\n         TR    4(3,R7),=C'0123456789ABCDEF'    TRANSLATE\n         B     EXIT\n*\nVTAM     EQU   *\n         MVC   0(8,R7),104(R8) YES, PUT VTAM TERMID IN OUTPUT AREA\n*\nEXIT     L     R14,SAVE       RESTORE R14\n         LR    R1,R13\n         LA    R0,WORKLEN\n         FREEMAIN R,LV=(0),A=(R1)  FREE GETMAINED AREA\n         BR    R14\n         LTORG\nWORK     DSECT\n         DS    2F\nSAVE     DS    16F\nWORKLEN  EQU   *-WORK\nPARMS    DSECT\nASCBADDR DS    F\nOUTADDR  DS    F\n         END   WCSVC233\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A$$W009": {"ttr": 1547, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (A$$W009)   /*\n      THIS USERMOD INSTALLS THE 'NULLSVC' ROUTINES.\n      AN S0C1 ABEND WILL RESULT IF INVOKED INVALIDLY.\n\n      A UCLIN MUST BE DONE TO ADD THE MODULE\n      TO THE NUCLEUS.\n\n      SET BOUNDARY(GLOBAL) .\n          UCLIN .\n             ADD GLOBALZONE FMID(A$$SVCS) .  <====== FMID A$$SVCS\n          ENDUCL .                                   MUST BE DEFINED.\n      SET BOUNDARY(TARGETZONE) .\n          UCLIN .\n             ADD SYSMOD(A$$SVCS) FUNCTION\n                 RECDATE(YYDDD) INSDATE(YYDDD) .\n             ADD MOD(NULLSVC1) LMOD(IEANUC01)\n                 DISTLIB(ASRCLIB)  FMID(A$$SVCS) .\n             ADD MOD(NULLSVC2) LMOD(IEANUC01)\n                 DISTLIB(ASRCLIB)  FMID(A$$SVCS) .\n             ADD MOD(NULLSVC6) LMOD(IEANUC01)\n                 DISTLIB(ASRCLIB)  FMID(A$$SVCS) .\n          ENDUCL .\n      SET BOUNDARY(DLIBZONE) .\n          UCLIN .\n             ADD SYSMOD(A$$SVCS) FUNCTION\n                 RECDATE(YYDDD) INSDATE(YYDDD) .\n             ADD MOD(NULLSVC1) LMOD(IEANUC01)\n                 DISTLIB(ASRCLIB)  FMID(A$$SVCS) .\n             ADD MOD(NULLSVC2) FMID(A$$SVCS)\n                 DISTLIB(ASRCLIB)  .\n             ADD MOD(NULLSVC6) FMID(A$$SVCS)\n                 DISTLIB(ASRCLIB)  .\n          ENDUCL .\n\n\n                                                     07/26/88 BRM  */.\n++VER (Z038) FMID(A$$SVCS) .\n++JCLIN .\n//A$$W009 JOB WC07N0323,'W1-5311  CR SINGER'\n//LPASVC  EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS2,NAME=HSSLPA,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//SYSLIN   DD  *\n   INCLUDE SYSPUNCH(NULLSVC3)\n   NAME NULLSVC3(R)\n   INCLUDE SYSPUNCH(NULLSVC4)\n   NAME NULLSVC4(R)\n/*\n++SRC (NULLSVC1) DISTLIB(ASRCLIB)  .\nNULLSVC1 TITLE '*** NULL SVC ROUTINE FOR NUCLEUS *** NULLSVC1'\nNULLSVC1 CSECT\nABEND0C1 DC    F'0'\n         END   NULLSVC1\n++SRC (NULLSVC2) DISTLIB(ASRCLIB)  .\nNULLSVC2 TITLE '*** NULL SVC ROUTINE FOR NUCLEUS *** NULLSVC2'\nNULLSVC2 CSECT\nABEND0C1 DC    F'0'\n         END   NULLSVC2\n++SRC (NULLSVC3) DISTLIB(ASRCLIB)  .\nNULLSVC3 TITLE '*** NULL SVC ROUTINE FOR LPALIB *** NULLSVC3'\nNULLSVC3 CSECT\nABEND0C1 DC    F'0'\n         END   NULLSVC3\n++SRC (NULLSVC4) DISTLIB(ASRCLIB)  .\nNULLSVC4 TITLE '*** NULL SVC ROUTINE FOR LPALIB *** NULLSVC4'\nNULLSVC4 CSECT\nABEND0C1 DC    F'0'\n         END   NULLSVC4\n++SRC (NULLSVC6) DISTLIB(ASRCLIB)  .\nNULLSVC6 TITLE '*** NULL SVC ROUTINE FOR NUCLEUS *** NULLSVC6'\nNULLSVC6 CSECT\nABEND0C1 DC    F'0'\n         END   NULLSVC6\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A$$W010": {"ttr": 1550, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (A$$W010)   /*\n      THIS USERMOD IS TO INSTALL THE\n      SVC MODULES FOR DF/SORT RELEASE 9 AND RELEASE 10\n\n      SVC = 217 - TYPE 3 (SORT 9)\n      SVC = 251 - TYPE 3 (SORT 10)\n                                               07/27/88 BRM */ .\n++VER (Z038) FMID(A$$SVCS) .\n++JCLIN .\n//A$$W010 JOB WC07N0323,'W1-5311  CR SINGER'\n//LPASVC  EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS2,NAME=HSSLPA,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE  DD  DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN   DD  *\n   INCLUDE INCLUDE(WCSVC217)\n   ENTRY ICEFIXM\n   NAME WCSVC217(R)\n   INCLUDE INCLUDE(WCSVC251)\n   ENTRY ICEFIXM\n   NAME WCSVC251(R)\n/*\n++MOD (WCSVC217) LKLIB(INCLUDE) .\n++MOD (WCSVC251) LKLIB(INCLUDE) .\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A$$W011": {"ttr": 1552, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (A$$W011)   /*\n      THIS USERMOD IS TO INSTALL THE\n      SVC MODULES FOR CA7 (WAS UCC7)\n      **NOTE - PRODUCTION MODULE WILL BE PUT IN SYS2.LINKLIB AND WILL\n               THEN BE PUT INTO FIXED LPA VIA IEAFIX00 PARMLIB MEMBER\n\n      SVC = 237 - TYPE 4 (PROD)\n      SVC = 247 - TYPE 4 (TEST)\n                                               08/08/88 BRM */ .\n++VER (Z038) FMID(A$$SVCS) .\n++JCLIN .\n//A$$W011 JOB WC07N0323,'W1-5311  CR SINGER'\n//LINKLIB EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS2,NAME=HSSLINK,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE  DD  DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN   DD  *\n   INCLUDE INCLUDE(WCSVC237)\n   NAME WCSVC237(R)\n/*\n//LPASVC  EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS2,NAME=HSSLPA,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE  DD  DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN   DD  *\n   INCLUDE INCLUDE(WCSVC247)\n   NAME WCSVC247(R)\n/*\n++MOD (WCSVC237) LKLIB(INCLUDE) .\n++MOD (WCSVC247) LKLIB(INCLUDE) .\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A$$W012": {"ttr": 1554, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (A$$W012)   /*\n      THIS USERMOD IS TO INSTALL THE\n      WC DASD PCS STAMP\n      SVC = 238 - TYPE 4  'HSSLPA' DDNAME = SYS2.LPALIB\n\n                                                     07/27/88 BRM  */.\n++VER (Z038) FMID(A$$SVCS) .\n++JCLIN .\n//A$$W012 JOB WC07N0322,'W1-5311 RC CREWS'\n//LPASVC  EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS2,NAME=HSSLPA,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//SYSLIN   DD  *\n   INCLUDE SYSPUNCH(WCSVC238)\n   NAME WCSVC238(R)\n/*\n++SRC (WCSVC238) DISTLIB(ASRCLIB)  .\n         TITLE 'WCSVC238 - OWNERSHIP STAMPER FOR DATA SETS'\nWCSVC238 CSECT\n         SPACE\n***********************************************************************\n*                                                                     *\n*      THIS ROUTINE IS INVOKED BY A SVC 238 INSTRUCTION INSERTED      *\n*      INTO EACH SVC 32 MODULE WHICH WRITES A NEW FORMAT 1 DSCB.      *\n*      ITS FUNCTION IS TO STORE THE FIRST 12 BYTES OF THE FIRST       *\n*      JOBCARD ACCOUNTING FIELD (PCS NUMBER) AND THE THIRD JOBCARD    *\n*      ACCOUNTING FIELD (LOGONID).  THIS IS TO ENHANCE OUR DASD       *\n*      ACCOUNTING. PARAMETERS TO THIS SVC ARE: THE ADDRESS OF THE     *\n*      DSCB TO BE WRITTEN IN REG 1, AND THE UCB ADDRESS IN REG 0.     *\n*      THE ACCOUNTING FIELD IS PICKED UP FROM THE JOB TYPE 30 SMF     *\n*      RECORD POINTED TO BY THE TCT. IF A STARTED TASK IS ALLOC-      *\n*      ATING THE DATASET THAN THE STC NAME AND A FIXED PCS NUMBER     *\n*      (WC07N0998) IS PUT INTO THE DS1SYSCD FIELD.                    *\n*                                                                     *\n***********************************************************************\n         SPACE\n         REGS\n         USING TCB,R4             STANDARD REGS FOR SVC\n         USING RBSECT,R5\n         USING WCSVC238,R6        SET UP BY SLIH\n*\n         L     R7,RBLINK          LOOK AT CALLER'S RB\n         TM    RBOPSW+1-RBSECT(R7),X'81'    KEY<8, SUPER STATE?\n         BNZR  R14                NO, IGNORE CALL\n         LR    R8,R0              COPY UCB ADDR FOR CONVENIENCE\n         USING UCB,R8             ESTABLISH UCB ADDRESSABILITY\n         USING DSCBF1,R1          ESTABLISH FORMAT 1 ADDRESSABILITY\n         CLI   DS1FMTID,X'F1'     CHECK IF FORMAT 1 DSCB\n         BNER  R14                IF NOT WE WANT OUT\n*\n***********************************************************************\n*                                                                     *\n*        OTHER THINGS THAT WE COULD DO IN THIS EXIT (BUT DONT).       *\n*                                                                     *\n***********************************************************************\n*\n*        MVC   DS1REFD,DS1CREDT   COPY CREATION DATE TO REF DATE\n*\n*        TM    UCBSTAB,UCBBSTR    STORAGE VOLUME?\n*        BZR   R14                NO, DO NOTHING\n*\n*        STCK  DS1SYSCD           GET TOD CLOCK VALUE\n*        LM    R2,R3,DS1SYSCD     PICK UP TOD CLOCK\n*        SRDL  R2,12              GET NUMBER OF MICROSECONDS\n*        D     R2,=F'60000000'    GET NUMBER OF MINUTES\n*        C     R2,=F'30000000'    MORE THAN 1/2\n*        BNH   *+8                NO - SKIP ADDING\n*        A     R3,=F'1'           ADD ONE\n*        SR    R2,R2              CLEAR REG ZERO\n*        D     R2,=F'1440'        GET NUMBER OF MINUTES + DAYS\n*        SRDL  R2,32              GET NUMBER OF MINUTES TODAY\n*        D     R2,=F'60'          GET NUMBER OF MINUTES + HOURS TODAY\n*        CVD   R3,DS1SYSCD        CONVERT HOURS TO DECIMAL\n*        UNPK  DS1SYSCD(3),DS1SYSCD+6(2) UNPACK NUMBER OF HOURS\n*        OI    DS1SYSCD+2,X'F0'   CONVERT TO CHARACTER\n*        MVC   DS1REFD+3(2),DS1SYSCD+1 MOVE TO TIME STAMP\n*        CVD   R2,DS1SYSCD        CONVERT MINUTES TO DECIMAL\n*        UNPK  DS1SYSCD(3),DS1SYSCD+6(2) UNPACK NUMBER OF MINUTES\n*        OI    DS1SYSCD+2,X'F0'   CONVERT TO CHARACTER\n*        MVC   DS1REFD+5(2),DS1SYSCD+1 MOVE TO TIME STAMP\n*\n***********************************************************************\n*\n         ICM   R10,07,DS1SYSCD+13  SAVE FOR WORK AREA\n         ICM   R11,15,DS1SYSCD+16  SAVE FOR WORK AREA\n         MVC   DS1SYSCD(20),=CL20' '  CLEAR ACCOUNT TO BLANKS\n         L     R2,TCBTCT          FIND THE TCT\n         LA    R2,0(,R2)          CLEAR HIGH BYTE\n         LTR   R2,R2              GOT ONE?\n         BZ    COMPACT            LEAVE ACCOUNT BLANK IF NONE\n         L     R2,TCTT30J-SMFTCT(R2)  FIND JOB TYPE30 RECORD\n         LTR   R2,R2              ONE THERE ?\n         BZ    COMPACT            NO ACCOUNT IF NOT\n         LA    R2,8(,R2)          POINT TO BEGINNING OF RECORD\n         USING SMFRCD30,R2        ADDRESSABILITY\n         CLC   SMF30WID,=C'STC '  STARTED TASK ?\n         BNE   GETACCT            NO - GO GET ACCOUNTING FIELD\n         LH    R3,SMF30ION        GET NUMBER OF IDENTIFICATION SECTIONS\n         LTR   R3,R3              ANY THERE ?\n         BZ    COMPACT            NO - SKIP IT\n         L     R3,SMF30IOF        OFFSET TO IDENTIFICATION SECTION\n         LA    R3,0(R2,R3)        POINT TO IT\n         MVC   DS1SYSCD(8),0(R3)  MOVE STC NAME TO DSCB\n         MVC   DS1SYSCD+8(12),=C'WC07N0998   ' MOVE OVERHEAD PCS NUMBER\n         B     COMPACT            AND GO COMPACT IT\nGETACCT  LH    R3,SMF30AON        GET NUMBER OF ACCOUNTING SECTIONS\n         LTR   R3,R3              ANY THERE ?\n         BZ    COMPACT            NO - SKIP IT\n         L     R3,SMF30AOF        OFFSET TO ACCOUNTING SECTION\n         LA    R3,0(R2,R3)        POINT TO IT\n         SR    R2,R2              CLEAR REG\n         IC    R2,0(R3)           LENGTH OF FIRST ACCOUNTING SECTION\n         LTR   R2,R2              ANYTHING THERE ?\n         BZ    COMPACT            NO - SKIP IT\n         C     R2,=F'12'          LONGER THAN 12 ?\n         BNH   *+8                NO - SKIP DEFAULT\n         LA    R2,12              ONLY USE FIRST 12\n         BCTR  R2,R0              DECREMENT BY ONE\n         EX    R2,MOVEPCS         AND MOVE IN PCS NUMBER\n         LA    R3,2(R2,R3)        POINT TO 2ND ACCOUNTING FIELD\n         IC    R2,0(R3)           LENGTH OF 2ND ACCOUNTING SECTION\n         LTR   R2,R2              ANYTHING THERE ?\n         BZ    COMPACT            NO - SKIP IT\n         LA    R3,1(R2,R3)        POINT TO 3RD ACCOUNTING FIELD\n         IC    R2,0(R3)           LENGTH OF 3RD ACCOUNTING SECTION\n         LTR   R2,R2              ANYTHING THERE ?\n         BZ    COMPACT            NO - SKIP IT\n         C     R2,=F'8'           LONGER THAN 8 ?\n         BNH   *+8                NO - SKIP DEFAULT\n         LA    R2,8               ONLY USE FIRST 8\n         BCTR  R2,R0              DECREMENT BY ONE\n         EX    R2,MOVELID         AND MOVE IN LID\n*\nCOMPACT  TR    DS1SYSCD(20),TABLE01 TRANSLATE TO OUR CHAR SET\n         LA    R2,DS1SYSCD        POINT TO INPUT\n         LR    R12,R2             POINT TO OUTPUT\n         LA    R3,6               NUMBER OF TRIPLETS\n         SR    R8,R8              CLEAR REG\nCOMLOOP  SR    R9,R9              CLEAR REG\n         IC    R9,0(R2)           FIRST CHARACTER\n         M     R8,=F'40'          PRODUCT\n         IC    R8,1(R2)           SECOND CHARACTER\n         AR    R9,R8              ADD IT IN\n         M     R8,=F'40'          PRODUCT\n         AR    R0,R9              ADD TO FIRST\n         IC    R8,2(R2)           THIRD CHARACTER\n         AR    R9,R8              ADD IT IN\n         STCM  R9,3,0(R12)        SAVE\n         LA    R2,3(R2)           NEXT GROUP IN\n         LA    R12,2(R12)         NEXT GROUP OUT\n         BCT   R3,COMLOOP         AND DO IT AGAIN\n         SR    R9,R9              CLEAR REG\n         IC    R8,0(R2)           19TH CHARACTER\n         IC    R9,1(R2)           20TH CHARACTER\n         SLL   R8,4               SHIFT TO HIGH BITS\n         OR    R9,R8              AND MOVE IT ONTO 20TH CHAR\n         LA    R9,80(R9)          MAKE SURE > X'40'\n         STC   R9,0(R12)          SAVE\n*\n         STCM  R10,07,DS1SYSCD+13 RESTORE WORK AREA\n         STCM  R11,15,DS1SYSCD+16 RESTORE WORK AREA\n         BR    R14                AND RETURN TO DADSM\n*\nMOVELID  MVC   DS1SYSCD(0),1(R3)  MOVE LID TO DSCB\nMOVEPCS  MVC   DS1SYSCD+8(0),1(R3)  MOVE PCS NUMBER TO DSCB\n*\n*                   .0.1.2.3.4.5.6.7.8.9.A.B.C.D.E.F\n*\nTABLE01  DC    XL16'0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A'  0.\n         DC    XL16'0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A'  1.\n         DC    XL16'0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A'  2.\n         DC    XL16'0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A'  3.\n         DC    XL16'0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A'  4.\n         DC    XL16'0A0A0A0A0A0A0A0A0A0A0A250A0A0A0A'  5.\n         DC    XL16'0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A'  6.\n         DC    XL16'0A0A0A0A0A0A0A0A0A0A0A26270A0A0A'  7.\n         DC    XL16'0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A'  8.\n         DC    XL16'0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A'  9.\n         DC    XL16'0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A'  A.\n         DC    XL16'0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A'  B.\n         DC    XL16'0A0B0C0D0E0F101112130A0A0A0A0A0A'  C.\n         DC    XL16'0A1415161718191A1B1C0A0A0A0A0A0A'  D.\n         DC    XL16'0A0A1D1E1F20212223240A0A0A0A0A0A'  E.\n         DC    XL16'000102030405060708090A0A0A0A0A0A'  F.\n*\n         LTORG\n         EJECT\nDSCBF1   DSECT\n         IECSDSL1 (1)             MAP FORMAT 1 DSCB\n         EJECT\n         PRINT NOGEN\n         IKJTCB\n         SPACE\n         IKJRB\n         SPACE\nUCB      DSECT\n         IEFUCBOB\n         SPACE\n         IEFTCT\n         SPACE\n         IFASMFR 30\n         SPACE\n         END   WCSVC238\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A$$W013": {"ttr": 1796, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (A$$W013)   /*\n      THIS USERMOD IS TO INSTALL THE\n      SVC MODULE FOR MASTERCAT\n\n      SVC = 242 - TYPE 3\n                                               07/27/88 BRM */ .\n++VER (Z038) FMID(A$$SVCS) .\n++JCLIN .\n//A$$W013 JOB WC07N0323,'W1-5311  CR SINGER'\n//LPASVC  EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS2,NAME=HSSLPA,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE  DD  DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN   DD  *\n   INCLUDE INCLUDE(WCSVC242)\n   NAME WCSVC242(R)\n/*\n++MOD (WCSVC242) LKLIB(INCLUDE) .\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A$$W014": {"ttr": 1798, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (A$$W014)   /*\n\n   THIS USERMOD IS TO INSTALL THE TSO CLR3270 COMMAND (ALIAS CLEAR).\n   THIS PROGRAM WILL CLEAR ANY 3270 SCREEN AND THEN WRITE OUT AN\n   SMF RECORD (TYPE 201) REPORTING THE TIME REQUIRED TO DO IT.\n                                                   09/01/88 BRM  */ .\n++VER (Z038) FMID(A$$PGMS) PRE(A$$W006,A$$W008) .\n++JCLIN .\n//A$$W014 JOB WC07N0323,'W1-5311  CR SINGER'\n//LPAPGM  EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT,AC=1',\n//    UNIT='3380',SER=IPLXXX,N=SYS2,NAME=HSSLPA,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//SYSLIN   DD  *\n   INCLUDE SYSPUNCH(CLR3270)\n   ALIAS CLEAR\n   NAME CLR3270(R)\n/*\n++SRC (CLR3270)  DISTLIB(ASRCLIB) .\n         MACRO\n         REGS\n         LCLA  &R\n.R       AIF   (&R EQ 16).END\nR&R      EQU   &R\n&R       SETA  &R+1\n         AGO   .R\n.END     MEND\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CLR3270 :                                                    *\n*                                                                     *\n*        FUNCTION OF THIS COMMAND IT TWO FOLD: (1) PERFORM A          *\n*        SCREEN CLEAR ON ANY 3270 AND (2) REPORT WITH AN SMF          *\n*        RECORD (TYPE 201) THE TIME REQUIRED TO DO IT (A MEA-         *\n*        SURE OF THE SO CALLED \"NETWORK DELAY\" SINCE THE TPUT         *\n*        IS DONE WITH THE \"HOLD\" OPTION).                             *\n*                                                                     *\n***********************************************************************\n*\nCLR3270  CSECT\n         PRINT NOGEN\n         REGS\n         SAVE  (14,12),,*         SAVE REGS\n         LR    R10,R15            SET UP BASE REGISTER\n         USING CLR3270,R10        GIVE ADDRESSABILITY\n         GTSIZE\n         LTR   R0,R0              IS IT A 3270?\n         BZ    EXIT               ..NO, RETURN\n         SR    R8,R8              SET TPUT SWITCH\n*\n         LA    R2,SMFWSIZ         GET SIZE OF WORKAREA\n         A     R2,=F'7'           ROUND UP TO\n         N     R2,=X'FFFFFFF8'    A DOUBLE WORD\n       GETMAIN R,LV=(R2)          GETMAIN WORK AREA\n         LR    R9,R1              SAVE POINTER\n         USING SMFXLEN,R9         SET UP ADDRESSABILITY\n         LA    R1,SMFSAVE         CHAIN\n         ST    R1,8(R13)                THE\n         ST    R13,4(R1)                    SAVE\n         LR    R13,R1                            AREAS\n*\n*        INITIALIZE SMF HEADER AND DATA AREA\n*\n         LA    R3,SMFXSIZ         GET SMF RECORD LENGTH\n         STH   R3,SMFXLEN         INITIALIZE RECORD LENGTH\n         XC    SMFXSEG,SMFXSEG    CLEAR SEG DESCRIPTOR\n         MVI   SMFXFLG,X'02'      INITILIZE SYSTEM INDICATOR\n         MVI   SMFXRTY,201        INITIALIZE RECORD TYPE\n         LA    R1,SMFXTME         BORROW TIME OF DAY FOR SVC 233\n         XC    SMFXTME,SMFXTME    CLEAR (USE CURRENT ASCB)\n         LA    R3,SMFXTID         GET ADDRESS OF TERMINAL ID\n         ST    R3,SMFXDTE         SAVE IN ARG LIST\n         MVI   SMFXTID,C' '       BLANK IT OUT JUST IN CASE\n         MVC   SMFXTID+1(7),SMFXTID SVC 233 DOESNT WORK\n         SVC   233                GO GET TERMINAL ID\n         TIME  BIN                GET TIME\n         ST    R0,SMFXTME         SAVE TIME OF DAY\n         ST    R1,SMFXDTE         SAVE DATE\n         L     R3,16              GET CVT POINTER\n         L     R4,196(R3)         GET SMCA POINTER\n         MVC   SMFXSID,16(R4)     MOVE IN SYSTEM ID\n         L     R3,0(R3)           GET TCB WORDS\n         L     R4,12(R3)          GET CURRENT ASCB POINTER\n         L     R4,176(R4)         GET TSONAME POINTER\n         MVC   SMFXUID,0(R4)      MOVE IN USERID\n         L     R4,4(R3)           GET CURRENT TCB POINTER\n         L     R4,164(R4)         GET TCT POINTER\n         L     R4,28(R4)          GET JMR POINTER\n         MVC   SMFXACT,20(R4)     MOVE IN DPAP NUMBER\n*\n*        MAKE THIS ADDRESS SPACE AS \"NON INTERUPTABLE\" AS POSSIBLE\n*\n         XC    SMFAUTH,SMFAUTH    CLEAR AUTH (DEFAULT IS OFF)\n      TESTAUTH FCTN=1             ARE WE AUTHORIZED ALREADY ?\n         LTR   R15,R15            CHECK RETURN\n         BNZ   *+10               NO - WE MUST UNAUTHORIZE IT AT END\n         MVC   SMFAUTH,=F'1'      SET AUTH STATE FLAG TO ON\n*\n         STAX  DEFER=YES          DEFER ATTENTION INTERRUPTS\n         LTR   R15,R15            CHECK FOR STAX ERROR\n         BNZ   BYPASS             EXIT, STAX ERROR\n*\n         ESTAE ESTAEX,PARAM=(R9),MF=(E,SMFESTL) ESTABLISH ESTAE\n         LTR   R15,R15            CHECK ESTAE ERROR\n         BNZ   STAXOFF            EXIT, ESTAE ERROR\n*\n         LA    R0,1               REQUEST AUTHORIZATION ON\n         SVC   212                SET AUTHORIZATION ON\n      TESTAUTH FCTN=1             ARE WE AUTHORIZED ?\n         LTR   R15,R15            CHECK RETURN\n         BNZ   ESTAEOFF           NO - SOMETHING WRONG - BYPASS\n*\n      SYSEVENT DONTSWAP           ISSUE SYSEVENT MACRO\n*\n         L     R0,SMFAUTH         RESTORE AUTHORIZATION\n         SVC   212                SET AUTHORIZATION\n*\n*        ISSUE TPUT (HOLD) AND TIME IT\n*\n         STCK  SMFXTIM            CAPTURE CURRENT CLOCK\n         LM    R4,R5,SMFXTIM      PUT IT IN REGS 4,5\n         TPUT  CMD3270,80,FULLSCR,WAIT,HOLD   CLEAR THE SCREEN\n         STCK  SMFXTIM            CAPTURE CURRENT CLOCK\n         LA    R8,1               SET SWITCH TO INDICATE TPUT DONE\n         LTR   R15,R15            WAS TPUT ANY GOOD ?\n         BNZ   ESTAEOFF           NO - DON'T DROP SMF RECORD\n*\n         LM    R6,R7,SMFXTIM      PUT IT IN REGS 6,7\n         SLR   R6,R4              SUBTRACT MOST SIGNIFICANT HALF\n         SLR   R7,R5              SUBTRACT LEASE SIGNIFICANT HALF\n         BNM   *+8                RESULT > 0 SO WE DON'T NEED TO ADJUST\n         SL    R6,=F'1'           ADJUST FOR NEGATIVE VALUE\n         SRDL  R6,12              CONVERT TO MICROSECONDS\n         AL    R7,=F'500'         SETUP FOR ROUND UP\n         D     R6,=F'1000'        CONVERT TO MILLISECONDS\n         ST    R7,SMFXTIM         SAVE TIME DELTA\n*\n*        WRITE OUT SMF RECORD AND SET OKSWAP\n*\n         LA    R0,1               REQUEST AUTHORIZATION ON\n         SVC   212                SET AUTHORIZATION ON\n        SMFWTM SMFXLEN            WRITE THE SMF RECORD\n      SYSEVENT OKSWAP             ISSUE SYSEVENT MACRO\n         L     R0,SMFAUTH         RESTORE AUTHORIZATION\n         SVC   212                SET AUTHORIZATION\nESTAEOFF ESTAE 0                  CANCEL ESTAE ENVIRONMENT\nSTAXOFF  STAX  DEFER=NO           ALLOW ATTENTION INTERRUPTS\n*\nBYPASS   L     R13,4(R13)         BACK CHAIN SAVE AREAS\n      FREEMAIN R,LV=(R2),A=(R9)   FREEMAIN WORK AREA\n         DROP  R9\n         LTR   R8,R8              TEST TPUT SWITCH\n         BNZ   EXIT               YES - TPUT WAS DONE\n         TPUT  CMD3270,8,FULLSCR,WAIT,HOLD   TPUT NOT DONE - DO IT NOW\nEXIT    RETURN (14,12),RC=0       RETURN\n         DROP  R10\n         EJECT\n*\n*        ESTAE EXIT ROUTINE\n*\nESTAEX   DS    0H                 ESTAE ADDRESSABILITY\n         LR    R10,R15            SET UP BASE REGISTER\n         USING ESTAEX,R10         GIVE ADDRESSABILITY\n         LR    R11,R14            SAVE RETURN ADDRESS\n         C     R0,=F'12'          IS THERE A SDWA\n         BNE   SDWA               YES - USE IT\n         LR    R9,R2              SAVE POINTER\n         B     *+8                AND SKIP OVER SDWA\nSDWA     L     R9,0(R1)           LOAD REG 9 FROM SDWAPARM\n         USING SMFXLEN,R9         SET UP ADDRESSABILITY\n         LA    R0,1               REQUEST AUTHORIZATION ON\n         SVC   212                SET AUTHORIZATION ON\n      TESTAUTH FCTN=1             ARE WE AUTHORIZED ?\n         LTR   R15,R15            CHECK RETURN\n         BNZ   AUTHOFF            NO - BYPASS\n      SYSEVENT OKSWAP             ISSUE SYSEVENT MACRO\nAUTHOFF  LA    R0,0               SET DEFAULT TO UNAUTHORIZE\n         LTR   R9,R9              DID WE GET A PARM AREA ?\n         BZ    *+8                NO - THEN ASSUME UNAUTHORIZED\n         L     R0,SMFAUTH         RESTORE AUTHORIZATION\n         SVC   212                SET AUTHORIZATION\n         STAX  DEFER=NO           ALLOW ATTENTION INTERRUPTS\n         XR    R15,R15            CONTINUE WITH ABEND\n         LR    R14,R11            RESTORE REG 14\n         B     R14                RETURN\n         DROP  R10,R9\n*\nCMD3270  DC    XL8'F31140403C404000' TPUT PARMS\n         DC    24XL3'114040'         TPUT PARMS\n         LTORG\n         EJECT\nSMFWORK  DSECT\nSMFXLEN  DS    H                  RECORD LENGTH\nSMFXSEG  DS    H                  SEGMENT DESCRIPTOR\nSMFXFLG  DS    XL1                SYSTEM INDICATOR (X'02')\nSMFXRTY  DS    XL1                RECORD TYPE 201 (X'C9')\nSMFXTME  DS    XL4                TIME IN 1/100 SEC RECORD WRITTEN\nSMFXDTE  DS    XL4                DATE RECORD WRITTEN\nSMFXSID  DS    XL4                SYSTEM IDENTIFICATION\n*\nSMFXUID  DS    XL8                USERID\nSMFXACT  DS    XL8                DPAP NUMBER (PACKED DECIMAL)\nSMFXTID  DS    XL8                TERMINAL ID\nSMFXTIM  DS    XL4                TIME DELTA (IN MILLISECONDS)\n*\nSMFXSIZ  EQU   *-SMFXLEN          LENGTH OF SMF RECORD\nSMFSAVE  DS    18F                SAVE AREA\nSMFESTL  ESTAE ESTAEX,MF=L        ESTAE PARAMETER LIST\nSMFAUTH  DS    F                  AUTHORIZATION CODE SAVE AREA\nSMFWSIZ  EQU   *-SMFXLEN          LENGTH OF WORK AREA\n         END   CLR3270\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A$$W015": {"ttr": 1803, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (A$$W015)   /*\n      THIS USERMOD IS TO INSTALL THE\n      SVC MODULE FOR FLASHER\n\n      SVC = 225 - TYPE 4\n                                               07/27/88 BRM */ .\n++VER (Z038) FMID(A$$SVCS) .\n++JCLIN .\n//A$$W015 JOB WC07N0323,'W1-5311  CR SINGER'\n//LPASVC  EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS2,NAME=HSSLPA,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE  DD  DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN   DD  *\n   INCLUDE INCLUDE(WCSVC225)\n   NAME WCSVC225(R)\n/*\n++MOD (WCSVC225) LKLIB(INCLUDE) .\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A$$W016": {"ttr": 1805, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (A$$W016)   /*\n      THIS USERMOD IS TO INSTALL THE\n      SVC MODULE FOR CAEDS (RAY SMITH)\n\n      SVC = 224 - TYPE 3\n                                               07/27/88 BRM */ .\n++VER (Z038) FMID(A$$SVCS) .\n++JCLIN .\n//A$$W016 JOB WC07N0323,'W1-5311  CR SINGER'\n//LPASVC  EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS2,NAME=HSSLPA,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE  DD  DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN   DD  *\n   INCLUDE INCLUDE(WCSVC224)\n   NAME WCSVC224(R)\n/*\n++MOD (WCSVC224) LKLIB(INCLUDE) .\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A$$W017": {"ttr": 1807, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (A$$W017)   /*\n      THIS USERMOD IS TO INSTALL THE\n      PCS NUMBER VALIDATION SVC\n\n      SVC = 226 - TYPE 4\n\n      MOD HISTORY:\n          07/27/88 - INITIAL BUILD\n                                                     07/27/88 BRM  */.\n++VER (Z038) FMID(A$$SVCS) .\n++JCLIN .\n//A$$W017 JOB WC07N0323,'W1-5311  CR SINGER'\n//LPASVC  EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT,AMODE=31,RMODE=ANY,AC=1',\n//    UNIT='3380',SER=IPLXXX,N=SYS2,NAME=HSSLPA,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//SYSLIN   DD  *\n   INCLUDE SYSPUNCH(WCSVC226)\n   NAME WCSVC226(R)\n/*\n++MAC (PCSVER) DISTLIB(ASAMPLIB) SYSLIB(SYS3MAC).\n         MACRO\n&NAME    PCSVER  &PCS,&LOGID,&MF=I\n.**********************************************************************\n.*       VALIDATE GENERAL DYNAMICS PCS ACCOUNTING NUMBERS             *\n.**********************************************************************\n.*                                                                    *\n.*       PCSVER  PCS@,LOGID@,MF=                                      *\n.*                                                                    *\n.*    PCS    - ADDRESS OF PCS NUMBER TO BE VALIDATED.                 *\n.*             THIS PARAMETER IS REQUIRED.                            *\n.*                                                                    *\n.*    LOGID  - ADDRESS OF LOGON-ID TO BE VALIDATED IN                 *\n.*             CONJUCTION WITH THE PCS NUMBER.                        *\n.*             THIS PARAMETER IS OPTIONAL.                            *\n.*                                                                    *\n.*    MF=I         -INCLUDE FORM.                                     *\n.*       L         -LIST FORM                                         *\n.*       (E,PARM@) -EXECUTE FORM. PARM@ IS ADDRESS OF PARAMETER       *\n.*                  LIST.                                             *\n.*                                                                    *\n.*    ALL ADRESSES MAY BE AN RX-TYPE OR REGISTER-TYPE.                *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &P#SW,&P1SW,&P2SW\n         LCLC  &RR0,&RR4\n.*\n.*             &P#SW SETTINGS ARE\n.*              1  -  PCS PARM PASSED\n.*              2  -  PCS AND LOGON-ID PARMS PASSED\n.*\n.*             &P1SW SETTINGS ARE (PCS PARAMETER):\n.*              1  -  ADDRESS TYPE IS REGISTER\n.*              2  -  ADDRESS TYPE IS RX-TYPE\n.*\n.*\n.*             &P2SW SETTINGS ARE (LOGOIN-ID PARAMETER):\n.*              1  -  ADDRESS TYPE IS REGISTER\n.*              2  -  ADDRESS TYPE IS RX-TYPE\n.*\n&P#SW    SETA  0                        SET DEFAULT\n&P1SW    SETA  0                        SET DEFAULT REGISTER ADDR\n&P2SW    SETA  0                        SET DEFAULT REGISTER ADDR\n.* *****************************************************************\n.* PARSE PARAMETERS\n.* *****************************************************************\n         AIF   ('&PCS' EQ '').CHKLOGS\n&P1SW    SETA  1\n&P#SW    SETA  1\n         AIF   ('&PCS'(1,1) EQ '(').CHKLOGS\n&P1SW    SETA  2\n.CHKLOGS ANOP\n         AIF   ('&LOGID' EQ '').CHKMFS\n&P2SW    SETA  1\n&P#SW    SETA  2\n         AIF   ('&LOGID'(1,1) EQ '(').CHKMFS\n&P2SW    SETA  2\n.*\n.CHKMFS  ANOP\n         AIF   ('&MF' EQ 'I').MFINCL    IF MF=E GOTO .MFINCL\n         AIF   ('&MF' EQ 'L').MFLIST    IF MF=E GOTO .MFLIST\n         AIF   (N'&MF NE 2).BADPARM     IF MF= INVALID GOTO .BADPARM\n         AIF   ('&MF(1)' EQ 'E').MFEXEC IF MF=E GOTO .MFEXEC\n         AGO   .BADPARM\n.*\n.MFINCL  ANOP\n.*\n         AIF   (&P#SW EQ 0).NOPCS\n.*\n         CNOP  0,4                ALIGN TO FULLWORD BOUNDARY\n.*\n         AIF   (&P#SW EQ 1).DOP1             ONLY PCS PARM PASSED\n.* *****************************************************************\n.*       PCS AND LOGON-ID PARAMETERS PASSED TO MACRO\n.* *****************************************************************\n         AIF   (&P1SW NE &P2SW).DOMIX        ADDR-TYPE MIXED ?\n         AIF   (&P1SW EQ 1).DOREG            ADDR-TYPES REGISTER ?\n         LA    1,&PCS             -> PCS NUMBER\n         ST    1,*+16             STORE PCS ADDR IN PARM\n         LA    1,&LOGID           -> LOGON-ID\n         ST    1,*+12             STORE LOGON-ID ADDR IN PARM\n         AGO   .P2END\n.DOREG   ANOP\n         ST    &PCS,*+12          STORE PCS ADDR IN PARM\n         ST    &LOGID,*+12        STORE LOGON-ID ADDR IN PARM\n         AGO   .P2END\n.DOMIX   ANOP\n         AIF   (&P1SW EQ 1).DOMIX2\n         LA    1,&PCS             -> PCS NUMBER\n         ST    1,*+12             STORE PCS ADDR IN PARM\n         ST    &LOGID,*+12        STORE LOGON-ID ADDR IN PARM\n         AGO   .P2END\n.DOMIX2  ANOP\n         ST    &PCS,*+16          STORE PCS ADDR IN PARM\n         LA    1,&LOGID           -> LOGON-ID\n         ST    1,*+12             STORE LOGON-ID ADDR IN PARM\n         AGO   .P2END\n.P2END   ANOP\n         BAL   1,*+12             PARM ADDR IN REG 1\n&NAME    DS    F                  PARM1 - PCS ->\n         DS    F                  PARM2 - LOGON-ID ->\n         SVC   226                VALIDATE PCS NUMBER\n         MEXIT\n.* *******************************************************************\n.*       ONLY PCS PARAMETER PASSED TO MACRO\n.* *******************************************************************\n.DOP1    ANOP\n         AIF   (&P1SW EQ 1).P1ST             IF REG PASSED GO TO P1ST\n.*\n.*       PCS PARAMETER IS AN RX-TYPE ADDRESS\n.*\n         LA    1,&PCS             -> PCS NUMBER\n         ST    1,*+8              STORE PCS ADDR IN PARM\n         AGO   .P1END\n.P1ST    ANOP\n.*\n.*       PCS PARAMETER IS A REGISTER\n.*\n         ST    &PCS,*+8           STORE PCS ADDR IN PARM\n         AGO   .P1END\n.*\n.P1END   ANOP\n         BAL   1,*+12             PARM ADDR IN REG 1\n&NAME    DS    F                  PARM 1\n         DC    A(0)               PARM 2\n         SVC   226                VALIDATE PCS NUMBER\n.*\n         MEXIT\n.* *******************************************************************\n.* MF=L SPECIFIED\n.* *******************************************************************\n.MFLIST  ANOP\n         AIF   ('&NAME' EQ '').NONAME\n         AIF   (&P#SW EQ 0).NOPCS\n         AIF   (&P1SW EQ 1 OR &P2SW EQ 1).NORX\n         AIF   (&P#SW EQ 2).MFLTWO\n.* **********************************\n.* BUILD PARAMETER LIST OF PCS@     *\n.* **********************************\n&NAME    DC    A(&PCS)            PARM 1\n         DC    A(0)               PARM 2\n.*\n         MEXIT\n.*\n.MFLTWO  ANOP\n.* ******************************************\n.* BUILD PARAMETER LIST OF PCS@ AND LOGONID *\n.* ******************************************\n&NAME    DC    A(&PCS)            PARM 1\n         DC    A(&LOGID)          PARM 2\n.*\n         MEXIT\n.*\n.* *****************************************************************\n.*       PCS AND LOGON-ID PARAMETERS PASSED TO MACRO\n.* *****************************************************************\n         AIF   (&P1SW NE &P2SW).DOMIX        ADDR-TYPE MIXED ?\n         AIF   (&P1SW EQ 1).DOREG            ADDR-TYPES REGISTER ?\n         AGO   .MFINCL\n.* *******************************************************************\n.* MF=E SPECIFIED\n.* *******************************************************************\n.*\n.MFEXEC  ANOP\n         AIF   (&P#SW EQ 0).MFEGO\n         AIF   (&P1SW EQ 2).MFEP1RX          IF PCS@ = RX TYPE\n.* **********************************\n.* PCS@ = REGISTER TYPE             *\n.* **********************************\n         AIF   ('&MF(2)'(1,1) EQ '(').P1RX1RR IF PARM@ = REG TYPE\n         ST    &PCS,&MF(2)        STORE PCS ADDRESS IN PARM AREA\n         AIF   (&P#SW EQ 2).MFEP2GO\n         AGO   .MFEGO\n.P1RX1RR ANOP\n&RR0     SETC  '0'.'&MF(2)'\n         ST    &PCS,&RR0          STORE PCS ADDRESS IN PARM AREA\n         AIF   (&P#SW EQ 2).MFEP2GO\n         AGO   .MFEGO\n.MFEP1RX ANOP\n.* **********************************\n.* PCS@ = RX TYPE                   *\n.* **********************************\n         AIF   ('&MF(2)'(1,1) EQ '(').P1RX2RX IF PARM@ = REG TYPE\n         LA    1,&PCS             GET PCS ADDRESS\n         ST    1,&MF(2)           STORE PCS ADDRESS IN PARM\n         AIF   (&P#SW EQ 2).MFEP2GO\n         AGO   .MFEGO\n.P1RX2RX ANOP\n&RR0     SETC  '0'.'&MF(2)'\n         LA    1,&PCS             GET PCS ADDRESS\n         ST    1,&RR0             STORE PCS ADDRESS IN PARM\n         AIF   (&P#SW EQ 2).MFEP2GO\n         AGO   .MFEGO\n.*\n.MFEP2GO ANOP\n         AIF   (&P2SW EQ 2).MFEP2RX          IF LOGID@ = RX TYPE\n.* **********************************\n.* LOGID@ = REGISTER TYPE           *\n.* **********************************\n         AIF   ('&MF(2)'(1,1) EQ '(').P2RX1RR IF PARM@ = REG TYPE\n         ST    &LOGID,&MF(2)+4    STORE LOGON-ID ADDRESS IN PARM AREA\n         AGO   .MFEGO\n.P2RX1RR ANOP\n&RR4     SETC  '4'.'&MF(2)'\n         ST    &LOGID,&RR4        STORE LOGON-ID ADDRESS IN PARM AREA\n         AGO   .MFEGO\n.MFEP2RX ANOP\n.* **********************************\n.* LOGID@ = RX TYPE                 *\n.* **********************************\n         AIF   ('&MF(2)'(1,1) EQ '(').P2RX2RX IF PARM@ = REG TYPE\n         LA    1,&LOGID           GET PCS ADDRESS\n         ST    1,&MF(2)+4         STORE PCS ADDRESS IN PARM\n         AGO   .MFEGO\n.P2RX2RX ANOP\n&RR4     SETC  '4'.'&MF(2)'\n         LA    1,&LOGID           GET PCS ADDRESS\n         ST    1,&RR4             STORE PCS ADDRESS IN PARM\n         AGO   .MFEGO\n.*\n.MFEGO   ANOP\n         AIF   ('&MF(2)'(1,1) EQ '(').MFEREG   IF REGISTER BRANCH OUT\n         LA    1,&MF(2)           PARM ADDR IN REG 1\n&NAME    SVC   226                VALIDATE PCS NUMBER\n         MEXIT\n.MFEREG  ANOP\n         AIF   ('&MF(2)'(1,3) EQ '(1)').MFESVC\n         LR    1,&MF(2)           PARM ADDR IN REG 1\n.MFESVC  ANOP\n&NAME    SVC   226                VALIDATE PCS NUMBER\n         MEXIT\n.*\n.NOPCS   ANOP\n         MNOTE  8,'*** PCS PARAMETER MISSING ***'\n         MEXIT\n.*\n.NORX    ANOP\n         MNOTE  8,'***MF=L: PARAMETERS MUST BE RX-TYPE ADDR ***'\n         MEXIT\n.*\n.NONAME  ANOP\n         MNOTE  8,'*** LABEL NAME IS MISSING ***'\n         MEXIT\n.*\n.BADPARM ANOP\n         MNOTE  8,'*** INVALID MF PARAMETER SPECIFIED ***'\n         MEXIT\n.*\n.NOEPARM ANOP\n         MNOTE  8,'*** PARAMETER ADDRESS ON MF=E MISSING ***'\n         MEXIT\n.*\n.FINI    ANOP\n         MEXIT\n         MEND\n++SRC (WCSVC226) DISTLIB(ASRCLIB)  .\n*\n*   SEVERAL INSTREAM MACROS ARE FIRST. REAL CODE STARTS AT LINE 143800\n*\n         MACRO\n         $POPI\n.*********************************************************************\n.*********************************************************************\n.*       1.  $POPI    POP LABELS FOR THE IF-ELSE-ENDIF MACROS        *\n.*********************************************************************\n         GBLC  &$LBL\n         GBLA  &$LIFNDX,&$LVLI,&$STACKI(50)\n&$LBL    SETC  '$LIF&$STACKI(&$LVLI)'\n&$LVLI   SETA  &$LVLI-1\n         MEND\n         MACRO\n         $PUSHI\n.*********************************************************************\n.*********************************************************************\n.*       1.  $PUSHI    PUSH LABELS FOR THE IF-ELSE-ENDIF MACROS      *\n.*********************************************************************\n         GBLC  &$LBL\n         GBLA  &$LIFNDX,&$LVLI,&$STACKI(50)\n.*\n.*       1. RETURNS A NEW LABEL IN $LBL.\n.*       2. SETS THIS LABEL ON TOP OF THE STACK\n.*\n&$LIFNDX SETA  &$LIFNDX+1     INCREMENT INDEX\n&$LVLI   SETA  &$LVLI+1       INCREMANT LEVEL\n&$LBL    SETC  '$LIF&$LIFNDX'      SET LABEL VALUE\n&$STACKI(&$LVLI) SETA &$LIFNDX     SET CURRENT INDEX ON CURRENT LEVEL\n         MEND\n         MACRO\n         $UPSEL\n.*********************************************************************\n.* $UPSEL    PUSH LABELS FOR THE SELECT-WHEN-OTHERWISE MACROS        *\n.*********************************************************************\n         GBLC  &$LBSEL\n         GBLA  &$SELNDX,&$LVSEL,&$STKSEL(50)\n.*\n.*       1. RETURNS A NEW LABEL IN $LBSEL.\n.*       2. SETS THIS LABEL ON TOP OF THE STACK\n.*\n&$SELNDX SETA  &$SELNDX+1           INCREMENT INDEX\n&$LVSEL  SETA  &$LVSEL+1            INCREMANT LEVEL\n&$LBSEL  SETC  '$ESEL&$SELNDX'      SET LABEL VALUE\n&$STKSEL(&$LVSEL) SETA &$SELNDX     SET CURRENT INDEX ON CURRENT LEVEL\n         MEND\n         MACRO\n         $UPWHEN\n.*********************************************************************\n.* $UPWHEN   PUSH LABELS FOR THE SELECT-WHEN-OTHERWISE MACROS        *\n.*********************************************************************\n         GBLC  &$LBWIN\n         GBLA  &$WINDEX,&$LVWIN,&$STKWIN(50)\n.*\n.*       1. RETURNS A NEW LABEL IN $LBWIN.\n.*       2. SETS THIS LABEL ON TOP OF THE STACK\n.*\n&$WINDEX SETA  &$WINDEX+1           INCREMENT INDEX\n&$LVWIN  SETA  &$LVWIN+1            INCREMANT LEVEL\n&$LBWIN  SETC  '$WHEN&$WINDEX'      SET LABEL VALUE\n&$STKWIN(&$LVWIN) SETA &$WINDEX     SET CURRENT INDEX ON CURRENT LEVEL\n         MEND\n         MACRO\n         ELSE\n.*********************************************************************\n.*********************************************************************\n.*       ELSE                                                        *\n.*********************************************************************\n         GBLC  &$LBL\n         GBLA  &$LIFNDX,&$LVLI,&$STACKI(50)\n         LCLC  &X\n         $POPI\n&X       SETC  '&$LBL'\n         $PUSHI\n         B     &$LBL\n&X       DS    0H\n         MEND\n         MACRO\n         ENDIF\n.*********************************************************************\n.*********************************************************************\n.*       ENDIF                                                       *\n.*********************************************************************\n         GBLC  &$LBL\n         GBLA  &$LIFNDX,&$LVLI,&$STACKI(50)\n         $POPI\n&$LBL    DS    0H\n         MEND\n         MACRO\n         ENDSEL\n.*********************************************************************\n.*       ENDSEL  EXIT POINT FOR SELECT/WHEN/ENDSEL CONSTRUCT         *\n.*               1. GENERATE ENDSELECT LABEL                         *\n.*********************************************************************\n         GBLC  &$LBSEL\n         GBLA  &$SELNDX,&$LVSEL,&$STKSEL(50)\n         LCLC  &X\n&X       SETC  '&$LBSEL'\n&X       DS    0H\n         MEND\n         MACRO\n         ENDWHEN\n.*********************************************************************\n.*       ENDWHEN EXIT POINT FOR WHEN/ENDWHEN CONSTRUCT               *\n.*               1. BRANCH TO ENDSELECT LABEL                        *\n.*********************************************************************\n         GBLC  &$LBSEL\n         GBLA  &$SELNDX,&$LVSEL,&$STKSEL(50)\n         B     &$LBSEL\n         MEND\n         MACRO\n.*********************************************************************\n.*       EXIT         USED TO RETURN TO CALLERS                      *\n.*             1. EXIT 8               --RETURN CODE IS 8            *\n.*             2. EXIT (15)            --RETURN CODE IN REG15        *\n.*             3. EXIT 8,FREE,R3,LEN   --RETURN CODE IS 8,           *\n.*                                       FREEMAIN AREA ADDR BY R3,   *\n.*                                       LEN = FULLWORD AREA NAME    *\n.*                                             CONTAINING LL TO FREE *\n.*********************************************************************\n&NAME    EXIT  &RC,&FREE,&REG=,&SVLEN=\n         LCLC  &REG1,&REG2,&REGSW,&RCSW\n&REG1    SETC  '14'\n&REG2    SETC  '12'\n&REGSW   SETC  ' '\n&RCSW    SETC  ' '\n         SPACE\n         AIF   ('&REG' EQ '').NOREG\n         AIF   (N'&REG GT 2).REGPL\n         AIF   (N'&REG EQ 1).REGONE\n&REG1    SETC  '&REG(1)'\n&REG2    SETC  '&REG(2)'\n         AGO   .NOREG\n.REGPL   ANOP\n         MNOTE 4,'***** MORE THAN 2 ''REG'' OPERANDS, ENTRY IGNORED'\n         AGO   .NOREG\n.REGONE  ANOP\n&REG1    SETC  '&REG(1)'\n&REGSW   SETC  '1'\n.NOREG   ANOP\n&NAME    L     13,4(,13)                GET ADDR OF PREV SAVE CHAIN\n         STM   15,1,16(13)              SAVE PARAM REGS\n         AIF   ('&FREE' EQ '').RCCK     IS FREE PARAMETER PRESENT\n         AIF   ('&FREE' EQ 'FREE').DOF  IS FREE PARAMETER VALID\n         MNOTE 8,******** ''FREE'' PARAMETER IS NOT VALID AND IS IGNOREX\n               D\n         AGO   .RCCK\n.DOF     ANOP\n         L     1,8(,13)                 GET SAVE AREA ADDRESS\n         AIF   ('&SVLEN' EQ '').DOFA\n         L     0,&SVLEN                 LENGTH TO FREE IN REG 0\n         AGO   .DOFB\n.DOFA    ANOP\n         LA    0,72                     LENGTH TO FREE\n.DOFB    ANOP\n         FREEMAIN R,LV=(0),A=(1)        ISSUE FREEMAIN\n.RCCK    ANOP\n         XC    8(4,13),8(13)            DE-CHAIN CURRENT ENTRY\n         AIF   ('&RC' EQ '').NORC\n         AIF   ('&RC'(1,1) EQ '(').REGRC\n         AIF   ('&RC' GT '4095').BADRC\n&RCSW    SETC  '1'\n         AGO   .NORC\n.REGRC   ANOP\n&RCSW    SETC  '2'\n         AGO   .NORC\n.BADRC   ANOP\n         MNOTE 4,'***** RETURN CODE (RC) GREATER THAN 4095, ENTRY IGNORX\n               ED'\n         AGO   .NORC\n.*\n.NORC    ANOP\n         AIF   ('&RCSW' NE ' ').TYPE2\n         AIF   ('&REGSW' EQ '1').TYPE1A\n         RETURN (&REG1,&REG2)\n         SPACE\n         MEXIT\n.TYPE1A  ANOP\n         RETURN (&REG1)\n         SPACE\n         MEXIT\n.*\n.TYPE2   ANOP\n         AIF   ('&RCSW' NE '1').TYPE3\n         AIF   ('&REGSW' EQ '1').TYPE2A\n         RETURN (&REG1,&REG2),RC=&RC\n         SPACE\n         MEXIT\n.TYPE2A  ANOP\n         RETURN (&REG1),RC=&RC\n         SPACE\n         MEXIT\n.*\n.TYPE3   ANOP\n         AIF   ('&RC(1)' EQ '15').IS15\n         AIF   ('&RC(1)' EQ 'R15').IS15\n         LR    15,&RC(1)                SHIFT RETURN CODE TO REG 15\n         AGO   .RTN3\n.IS15    ANOP\n         L     15,16(,13)               RESTORE REG 15\n.RTN3    AIF   ('&REGSW' EQ '1').TYPE3A\n         RETURN (&REG1,&REG2),RC=(15)\n         SPACE\n         MEXIT\n.TYPE3A  ANOP\n         RETURN (&REG1),RC=(15)\n         SPACE\n         MEND\n         MACRO\n&LABEL   GOTO  &LB,&TEST,&R\n&LABEL   JUMP  &LB,&TEST,&R\n         MEND\n         MACRO\n         IF    &P1,&P2,&P3,&P4\n.*********************************************************************\n.*       1.  IF    CLI,A,NE,B                                        *\n.*       2.  IF    (CLI,A,NE,B),AND,(CLC,A,E,B)                      *\n.*       3.  IF    (CLI,A,NE,B),OR,(CLC,A,E,B)                       *\n.*********************************************************************\n         LCLC  &SYM\n         GBLC  &$LBL\n         GBLA  &$LIFNDX,&$LVLI,&$STACKI(50)\n         AIF   ('&P1'(1,1) EQ '(').COMPLEX\n         AIF   ('&P3' NE 'EQ').CHKEQ2\n.*********************************************************************\n.*                                        CONVERT 'EQ' TO 'E'        *\n.*********************************************************************\n&SYM     SETC  'E '\n         AGO   .SIMPLE\n.CHKEQ2  ANOP\n         AIF   ('&P3' NE '=').CHKGT1\n.*********************************************************************\n.*                                        CONVERT '=' TO 'E'         *\n.*********************************************************************\n&SYM     SETC  'E '\n         AGO   .SIMPLE\n.CHKGT1  ANOP\n         AIF   ('&P3' NE 'GT').CHKGT2\n.*********************************************************************\n.*                                        CONVERT 'GT' TO 'H'        *\n.*********************************************************************\n&SYM     SETC  'H '\n         AGO   .SIMPLE\n.CHKGT2  ANOP\n         AIF   ('&P3' NE '>').CHKLT1\n.*********************************************************************\n.*                                        CONVERT '>'  TO 'H'        *\n.*********************************************************************\n&SYM     SETC  'H '\n         AGO   .SIMPLE\n.CHKLT1  ANOP\n         AIF   ('&P3' NE 'LT').CHKLT2\n.*********************************************************************\n.*                                        CONVERT 'LT' TO 'L'        *\n.*********************************************************************\n&SYM     SETC  'L '\n         AGO   .SIMPLE\n.CHKLT2  ANOP\n         AIF   ('&P3' NE '<').CHKON\n.*********************************************************************\n.*                                        CONVERT '<'  TO 'L'        *\n.*********************************************************************\n&SYM     SETC  'L '\n         AGO   .SIMPLE\n.CHKON   ANOP\n         AIF   ('&P3' NE 'ON').CHKOFF\n.*********************************************************************\n.*                                       CONVERT 'ON'  TO 'O'        *\n.*********************************************************************\n&SYM     SETC  'O '\n         AGO   .SIMPLE\n.CHKOFF  ANOP\n         AIF   ('&P3' NE 'OFF').CHKDFLT\n.*********************************************************************\n.*                                      CONVERT 'OFF'  TO 'Z'        *\n.*********************************************************************\n&SYM     SETC  'Z '\n         AGO   .SIMPLE\n.CHKDFLT ANOP\n.*********************************************************************\n.*                              BRANCH CODE = SUPPLIED PARAMETER     *\n.*********************************************************************\n&SYM     SETC  '&P3'\n.SIMPLE  ANOP\n         &P1   &P2,&P4\n         B&SYM *+8\n         $PUSHI\n         B     &$LBL\n         MEXIT\n.COMPLEX ANOP\n         AIF   ('&P1(3)' NE 'EQ').AAAEQ2\n.*********************************************************************\n.*                                        CONVERT 'EQ' TO 'E'        *\n.*********************************************************************\n&AAA     SETC  'E '\n         AGO   .BBBEQ1\n.AAAEQ2  ANOP\n         AIF   ('&P1(3)' NE '=').AAAGT1\n.*********************************************************************\n.*                                        CONVERT '=' TO 'E'         *\n.*********************************************************************\n&AAA     SETC  'E '\n         AGO   .BBBEQ1\n.AAAGT1  ANOP\n         AIF   ('&P1(3)' NE 'GT').AAAGT2\n.*********************************************************************\n.*                                        CONVERT 'GT' TO 'H'        *\n.*********************************************************************\n&AAA     SETC  'H '\n         AGO   .BBBEQ1\n.AAAGT2  ANOP\n         AIF   ('&P1(3)' NE '>').AAALT1\n.*********************************************************************\n.*                                        CONVERT '>'  TO 'H'        *\n.*********************************************************************\n&AAA     SETC  'H '\n         AGO   .BBBEQ1\n.AAALT1  ANOP\n         AIF   ('&P1(3)' NE 'LT').AAALT2\n.*********************************************************************\n.*                                        CONVERT 'LT' TO 'L'        *\n.*********************************************************************\n&AAA     SETC  'L '\n         AGO   .BBBEQ1\n.AAALT2  ANOP\n         AIF   ('&P1(3)' NE '<').AAAON\n.*********************************************************************\n.*                                        CONVERT '<'  TO 'L'        *\n.*********************************************************************\n&AAA     SETC  'L '\n         AGO   .BBBEQ1\n.AAAON   ANOP\n         AIF   ('&P1(3)' NE 'ON').AAAOFF\n.*********************************************************************\n.*                                       CONVERT 'ON'  TO 'O'        *\n.*********************************************************************\n&AAA     SETC  'O '\n         AGO   .BBBEQ1\n.AAAOFF  ANOP\n         AIF   ('&P1(3)' NE 'OFF').AAADFLT\n.*********************************************************************\n.*                                      CONVERT 'OFF'  TO 'Z'        *\n.*********************************************************************\n&AAA     SETC  'Z '\n         AGO   .BBBEQ1\n.AAADFLT ANOP\n.*********************************************************************\n.*                                BRANCH COND = SUPPLIED PARAMETER   *\n.*********************************************************************\n&AAA     SETC  '&P1(3)'\n         AGO   .BBBEQ1\n.BBBEQ1  ANOP\n         AIF   ('&P3(3)' NE 'EQ').BBBEQ2\n.*********************************************************************\n.*                                        CONVERT 'EQ' TO 'E'        *\n.*********************************************************************\n&BBB     SETC  'E '\n         AGO   .CMPCONT\n.BBBEQ2  ANOP\n         AIF   ('&P3(3)' NE '=').BBBGT1\n.*********************************************************************\n.*                                        CONVERT '=' TO 'E'         *\n.*********************************************************************\n&BBB     SETC  'E '\n         AGO   .CMPCONT\n.BBBGT1  ANOP\n         AIF   ('&P3(3)' NE 'GT').BBBGT2\n.*********************************************************************\n.*                                        CONVERT 'GT' TO 'H'        *\n.*********************************************************************\n&BBB     SETC  'H '\n         AGO   .CMPCONT\n.BBBGT2  ANOP\n         AIF   ('&P3(3)' NE '>').BBBLT1\n.*********************************************************************\n.*                                        CONVERT '>'  TO 'H'        *\n.*********************************************************************\n&BBB     SETC  'H '\n         AGO   .CMPCONT\n.BBBLT1  ANOP\n         AIF   ('&P3(3)' NE 'LT').BBBLT2\n.*********************************************************************\n.*                                        CONVERT 'LT' TO 'L'        *\n.*********************************************************************\n&BBB     SETC  'L '\n         AGO   .CMPCONT\n.BBBLT2  ANOP\n         AIF   ('&P3(3)' NE '<').BBBON\n.*********************************************************************\n.*                                        CONVERT '<'  TO 'L'        *\n.*********************************************************************\n&BBB     SETC  'L '\n         AGO   .CMPCONT\n.BBBON   ANOP\n         AIF   ('&P3(3)' NE 'ON').BBBOFF\n.*********************************************************************\n.*                                       CONVERT 'ON'  TO 'O'        *\n.*********************************************************************\n&BBB     SETC  'O '\n         AGO   .CMPCONT\n.BBBOFF  ANOP\n         AIF   ('&P3(3)' NE 'OFF').BBBDFLT\n.*********************************************************************\n.*                                      CONVERT 'OFF'  TO 'Z'        *\n.*********************************************************************\n&BBB     SETC  'Z '\n         AGO   .CMPCONT\n.BBBDFLT ANOP\n.*********************************************************************\n.*                         BRANCH CODE = SUPPLIED PARAMETER          *\n.*********************************************************************\n&BBB     SETC  '&P3(3)'\n         AGO   .CMPCONT\n.CMPCONT ANOP\n         AIF   ('&P2' EQ 'AND').CAND\n         AIF   ('&P2' EQ 'OR').COR\n         MNOTE *,'CONNECTOR MUST BE ''AND'' OR ''OR'''\n         MEXIT\n.CAND    ANOP\n         &P1(1) &P1(2),&P1(4)\n         B&AAA *+8\n         $PUSHI\n         B     &$LBL\n         &P3(1) &P3(2),&P3(4)\n         B&BBB *+8\n         B     &$LBL\n         MEXIT\n.COR     ANOP\n         &P1(1) &P1(2),&P1(4)\n         B&AAA  $T&SYSNDX\n         &P3(1) &P3(2),&P3(4)\n         B&BBB  $T&SYSNDX\n         $PUSHI\n         B     &$LBL\n$T&SYSNDX DS   0H\n         MEXIT\n         MEND\n         MACRO\n&LABEL   JUMP  &LB,&TEST,&R\n         LCLA  &N\n         LCLC  &LBL,&OP1,&OP2\n         AIF   (T'&LABEL EQ 'O').NOLBL\n&LABEL   EQU   *\n.NOLBL   ANOP\n         AIF   (T'&R EQ 'O').SETLBL\n&LBL     SETC  '0(0,&LB)'\n         AGO   .CONT\n.SETLBL  ANOP\n&LBL     SETC  '&LB'\n&N       SETA  N'&LB\n         AIF   (&N GT 1).IND\n         AGO   .CONT\n.IND     ANOP\n         AIF   ('&LB(1)'(1,1) EQ '(').LA1\n         AIF   ('&LB(1)'(1,2) EQ '0(').LA2\n         AGO   .NOLA1\n.LA1     ANOP\n&OP1     SETC  '0'.'&LB(1)'\n         AGO   .DOLA1\n.LA2     ANOP\n&OP1     SETC  '&LB(1)'\n.DOLA1   ANOP\n         SETRA 15,&OP1\n         AGO   .NXT1\n.NOLA1   ANOP\n         SETRA 15,&LB(1)\n.NXT1    ANOP\n         AIF   (T'&LB(2) EQ 'F').FW\n         AIF   (T'&LB(2) EQ 'H').HW\n         AIF   ('&LB(2)'(1,1) EQ '(').LA3\n         AIF   ('&LB(2)'(1,2) EQ '0(').LA4\n         AGO   .NOLA2\n.LA3     ANOP\n&OP2     SETC  '0'.'&LB(2)'\n         AGO   .DOLA2\n.LA4     ANOP\n&OP2     SETC  '&LB(2)'\n.DOLA2   ANOP\n         SETRA 14,&OP2\n         AGO   .NXT2\n.NOLA2   ANOP\n         SETRA 14,&LB(2)\n.NXT2    ANOP\n         AGO   .IND2\n.FW      ANOP\n         SETR  14,&LB(2)\n         AGO   .IND2\n.HW      ANOP\n         SETR  14,&LB(2)\n.IND2    ANOP\n         DECR  14\n         SLL   14,2\n         INCRR 15,14\n&LBL     SETC  '0(0,15)'\n.CONT    ANOP\n         AIF   (T'&TEST EQ 'O').UNCBR\n         AIF   ('&TEST' EQ 'FALSE').BNEQ\n         AIF   ('&TEST' EQ 'TRUE').BEQ\n         AIF   ('&TEST' EQ 'PLUS').BPL\n         AIF   ('&TEST' EQ 'MINUS').BM\n         AIF   ('&TEST' EQ 'ZERO').BZ\n         AIF   ('&TEST' EQ 'LOW').BL\n         AIF   ('&TEST' EQ 'HIGH').BH\n         AIF   ('&TEST' EQ 'GT' OR '&TEST' EQ 'HT').BH\n         AIF   ('&TEST' EQ 'LT').BL\n         AIF   ('&TEST' EQ 'NGT' OR '&TEST' EQ 'NHT').BNH\n         AIF   ('&TEST' EQ 'NLT').BNL\n         AIF   ('&TEST' EQ 'NLOW').BNL\n         AIF   ('&TEST' EQ 'NHIGH').BNH\n         AIF   ('&TEST' EQ 'NPLUS').BNPL\n         AIF   ('&TEST' EQ 'NMINUS').BNM\n         AIF   ('&TEST' EQ 'NZERO').BNZ\n         AIF   ('&TEST' EQ 'EQUAL').BEQ\n         AIF   ('&TEST' EQ 'NEQUAL').BNEQ\n         AIF   ('&TEST'(1,3) EQ 'ONE').BONE\n         AIF   ('&TEST'(1,3) EQ 'MIX').BMIX\n         AIF   ('&TEST'(1,4) EQ 'NONE').BNONE\n         AIF   ('&TEST'(1,4) EQ 'NMIX').BNMIX\n         AIF   ('&TEST' EQ '=').BEQ\n         AIF   ('&TEST' EQ '>').BH\n         AIF   ('&TEST' EQ '<').BL\n         AIF   ('&TEST' EQ 'NOT=').BNEQ\n         AIF   ('&TEST' EQ 'NOT>').BNH\n         AIF   ('&TEST' EQ 'NOT<').BNL\n         AIF   ('&TEST' EQ '\u00ac=').BNEQ\n         AIF   ('&TEST' EQ '\u00ac>').BNH\n         AIF   ('&TEST' EQ '\u00ac<').BNL\n         AIF   ('&TEST' EQ '<=' OR '&TEST' EQ '=<').BNH\n         AIF   ('&TEST' EQ '>=' OR '&TEST' EQ '=>').BNL\n         AIF   ('&TEST'(1,3) EQ 'POS').BPL\n         AIF   ('&TEST'(1,3) EQ 'NEG').BM\n         AIF   ('&TEST'(1,4) EQ 'NPOS').BNPL\n         AIF   ('&TEST'(1,4) EQ 'NNEG').BNM\n         AIF   ('&TEST' EQ '+').BPL\n         AIF   ('&TEST' EQ '-').BM\n         AIF   ('&TEST' EQ 'NOT+' OR '&TEST' EQ '\u00ac+').BNPL\n         AIF   ('&TEST' EQ 'NOT-' OR '&TEST' EQ '\u00ac-').BNM\n         AIF   ('&TEST' EQ 'NE').BNEQ\n         AIF   ('&TEST' EQ 'EQ').BEQ\n         AIF   ('&TEST' EQ 'NM').BNM\n         AIF   ('&TEST' EQ 'NP').BNPL\n         AIF   ('&TEST' EQ 'NL').BNL\n         AIF   ('&TEST' EQ 'NZ').BNZ\n         AIF   ('&TEST' EQ 'NTRUE').BNEQ\n         AIF   ('&TEST' EQ 'NFALSE').BEQ\n         MNOTE 1,'INVALID OR UNDEFINED TEST CODE - &TEST'\n.BEQ     ANOP\n         BE    &LBL\n         MEXIT\n.BNEQ    ANOP\n         BNE   &LBL\n         MEXIT\n.BPL     ANOP\n         BP    &LBL\n         MEXIT\n.BM      ANOP\n         BM    &LBL\n         MEXIT\n.BZ      ANOP\n         BZ    &LBL\n         MEXIT\n.BL      ANOP\n         BL    &LBL\n         MEXIT\n.BH      ANOP\n         BH    &LBL\n         MEXIT\n.BNL     ANOP\n         BNL   &LBL\n         MEXIT\n.BNH     ANOP\n         BNH   &LBL\n         MEXIT\n.BNPL    ANOP\n         BNP   &LBL\n         MEXIT\n.BNM     ANOP\n         BNM   &LBL\n         MEXIT\n.BNZ     ANOP\n         BNZ   &LBL\n         MEXIT\n.BONE    ANOP\n         BO    &LBL\n         MEXIT\n.BMIX    ANOP\n         BM    &LBL\n         MEXIT\n.BNONE   ANOP\n         BNO   &LBL\n         MEXIT\n.BNMIX   ANOP\n         BNM   &LBL\n         MEXIT\n.UNCBR   ANOP\n         B     &LBL\n         MEND\n         MACRO\n         SELECT\n.*********************************************************************\n.*       SELECT  BEGIN SELECT/WHEN/ENDSEL SEQUENCE                   *\n.*               1. CREATE ENDSELECT LABEL                           *\n.*               2. CREATE NEXT WHEN LABEL AND BRANCH TO IT          *\n.*********************************************************************\n         GBLC  &$LBSEL\n         GBLA  &$SELNDX,&$LVSEL,&$STKSEL(50)\n         $UPSEL\n         GBLC  &$LBWIN\n         GBLA  &$WINDEX,&$LVWIN,&$STKWIN(50)\n         $UPWHEN\n         B     &$LBWIN\n         MEND\n         MACRO\n&NAME    SETUP &T=,&C=,&BASE=,&ENTRY=,&SV=,&SVLEN=\n.**********************************************************************\n.**********************************************************************\n.*           GENERAL PROGRAM SETUP AND INITIALIZATION MACRO           *\n.**********************************************************************\n.*                                                                    *\n.* PGNAME SETUP T=Y,C=Y,BASE=(XX,XX,XX),ENTRY=NNNN,SV=SSSS,R=RR,      *\n.*               SVLEN=NNNN                                           *\n.*                                                                    *\n.*    PGNAME - NAME OF MODULE                                         *\n.*           - IF OMITTED AND 'C' IS CODED 'Y' -                      *\n.*             THE NAME FROM THE PRECEDING START, CSECT, OR           *\n.*             DSECT WILL BE USED AS THE MODULE NAME.                 *\n.*             IF THERE IS STILL NO NAME, AN ERROR WILL BE            *\n.*             GENERATED.                                             *\n.*           - IF OMITTED AND 'C' IS NOT CODED 'Y' -                  *\n.*             NO MODULE NAME NEED BE CODED.                          *\n.*                                                                    *\n.*    T      - IF 'T=Y', THE PROGRAM LISTING WIL BE TITLED            *\n.*             ON EACH PAGE.                                          *\n.*                                                                    *\n.*    C      - IF 'C' OMITTED OR 'C=Y', A CSECT WILL BE               *\n.*             GENERTATED, ELSE NO CSECT WILL BE GENERATED.           *\n.*                                                                    *\n.*    BASE   - THE BASE REGISTERS TO BE USED IN THE MODULE.           *\n.*             IF MORE THAN ONE BASE, THE LIST MUST BE ENCLOSED       *\n.*             IN PARENTHESES.                                        *\n.*           - IF OMITTED REG 12 WILL BE ASSIGNED.                    *\n.*                                                                    *\n.*    ENTRY  - THE LABEL OF THE INSTRUCTION TO WHICH CONTROL IS       *\n.*             TO BE TRANSFERRED AFTER THE MACRO IS EXECUTED.         *\n.*           - IF OMITTED, THE NEXT SEQUENTIAL INSTRUCTION WILL       *\n.*             RECEIVE CONTROL.                                       *\n.*                                                                    *\n.*    SV     - NAME TO BE ASSIGNED TO THE SAVE AREA.                  *\n.*           - IF OMITTED, SAVE1, SAVE2, ETC. WILL BE USED AS         *\n.*             SAVE AREA NAMES.                                       *\n.*           - IF ENCLOSED IN PARENTHESIS, GENERATE A SAVE AREA WITH  *\n.*             THE NAME SUPPLIED WITHIN THE PARENTHESIS.              *\n.*           - IF CODED AS (0), A GETMAIN WILL BE ISSUED FOR THE SAVE *\n.*             AREA, AND NO NAME WILL BE ASSIGNED TO THE AREA.        *\n.*             (THE CORRESPONDING EXIT SHOULD INDICATE A FREEMAIN).   *\n.*                                                                    *\n.*    SVLEN  - IF SV=(0) IS CODED, SVLEN MAY BE USED TO INDICATE THE  *\n.*             LENGTH OF THE AREA TO BE ACQUIRED. (THE CORRESPONDING  *\n.*             EXIT MACRO SHOULD ALSO SUPPLY THE SVLEN OPERAND). IT   *\n.*             SHALL BE THE PROBLEM PROGRAM RESPONSIBILITY TO INSURE  *\n.*             THAT THE LENGTH IS AT LEAST 72 BYTES.                  *\n.*                                                                    *\n.**********************************************************************\n.*\n         GBLA  &JR                      MACRO USAGE COUNT\n         LCLC  &JRS                     NAME OF SAVE AREA\n         LCLC  &TYPE,&S,&K\n         LCLA  &I,&CNT,&PTR,&CSW,&TSW\n         LCLA  &SVSW,&ERSW\n.*\n.*             &SVSW SETTINGS ARE\n.*              0  -  &SV OMITTED                 CREATE SAVE AND NAME\n.*              1  -  &SV = NAME, NO PARENTHESIS  CREATE SAVE WITH NAME\n.*              2  -  &SV = ()                    CREATE SAVE AND NAME\n.*              3  -  &SV = (NAME)                NO SAVE AND USE NAME\n.*              4  -  &SV = (0)                   GETMAIN AND NO NAME\n.*\n&JR      SETA  &JR+1\n         AIF   (T'&SV EQ 'O').SV3       CHECK FOR OMITTED\n         AIF   ('&SV'(1,1) EQ '(').SV1  CHECK FOR PAREN\n&SVSW    SETA  1\n.SV2     ANOP\n&JRS     SETC  '&SV(1)'                 USE INPUT NAME FOR SAVE AREA\n         AGO   .SVEND\n.SV3     ANOP\n&JRS     SETC  'SAVE&JR'                GENERATE NAME FOR SAVE AREA\n         AGO   .SVEND\n.SV1     ANOP\n&SVSW    SETA  2\n&JRS     SETC  '&SV(1)'\n         AIF   ('&JRS' EQ '').SV3\n         AIF   ('&JRS' EQ '0').SV4\n&SVSW    SETA  3\n         AGO   .SVEND\n.SV4     ANOP\n&SVSW    SETA  4\n.SVEND   ANOP\n.*\n.*             CHECK IF CSECT WANTED\n         AIF   (T'&C EQ 'O').C\n         AIF   ('&C'(1,1) NE 'Y').NOC\n.*\n.*             GET CSECT NAME\n.C       ANOP\n&TYPE    SETC  '&SYSECT'\n         AIF   (T'&NAME EQ 'O').NONM\n&TYPE    SETC  '&NAME'\n.NONM    AIF   ('&TYPE' NE '').HVNM\n&ERSW    SETA  1              SET LABEL ERROR SWITCH\n.*\n.*             DETERMINE LENGTH OF CSECT NAME AND SET &K = TO SPACES\n.*              WITH LENGTH OF 9 - LENGTH OF CSECT NAME\n.HVNM    ANOP\n&I       SETA  1\n.CTR     AIF   ('&TYPE'(1,&I) EQ '&TYPE').LSET\n&I       SETA  &I+1\n         AGO   .CTR\n.LSET    ANOP\n&I       SETA  9-&I\n&S       SETC  '        '\n&K       SETC  '&S'(1,&I)\n         AGO   .CKCNT\n.*\n.*             SET CSECT SW OFF SINCE NOT REQUESTED\n.NOC     ANOP\n&CSW     SETA  1\n.*\n.*             CHECK IF TITLE REQUESTED\n.CKCNT   AIF   (T'&T EQ 'O').NOT\n         AIF   ('&T'(1,1) NE 'Y').NOT\n.*             IF NO CSECT - NO TITLE\n.CKT     AIF   (&CSW EQ 1).NOCSECT\n         TITLE '&TYPE.&K.&TYPE.&K.&TYPE.&K.&TYPE.&K.&TYPE.&K.&TYPE.&K.&X\n               TYPE.&K.&TYPE.&K.&TYPE.&K.&TYPE.&K.&TYPE'\n.NOT     AIF   (&CSW EQ 1).NOCSECT\n         AIF   ('&NAME' EQ '').PREVNM\n.*\n.*             GENERATE CSECT\n&TYPE    CSECT\n&S       SETC  '&TYPE'\n         AGO   .CKR\n.PREVNM  ANOP\n&S       SETC  'SETUP&JR'               CREATE DS NAME FOR ADDRESSING\n&S       DS    0H\n         AGO   .CKR\n.NOCSECT ANOP\n.*\n.*             GENERATE DS WHEN NO CSECT WANTED\n&NAME    DS    0H\n.*\n.*             CHECK FOR REGISTER EQUATES\n.CKR     AIF   (&JR NE 1).NOEQ\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*                          REGISTER  EQUATES                          *\n*                                                                     *\n***********************************************************************\n*                                                                     *\nR0       EQU   0 .                                                    *\nR1       EQU   1 .                                                    *\nR2       EQU   2 .                                                    *\nR3       EQU   3 .                                                    *\nR4       EQU   4 .                                                    *\nR5       EQU   5 .                                                    *\nR6       EQU   6 .                                                    *\nR7       EQU   7 .                                                    *\nR8       EQU   8 .                                                    *\nR9       EQU   9 .                                                    *\nR10      EQU   10 .                                                   *\nR11      EQU   11 .                                                   *\nR12      EQU   12 .                                                   *\nR13      EQU   13 .                                                   *\nR14      EQU   14 .                                                   *\nR15      EQU   15 .                                                   *\n*                                                                     *\n***********************************************************************\n.NOEQ    SPACE 2\n.*\n.*             GENERATE 'SAVE' - CSECT REQUEST DETERMINES TYPE OF SAVE\n         AIF   (&CSW EQ 1).SAVEB\n         AIF   (&JR NE 1).SAVEA\n         SAVE  (14,12),,&TYPE.&SYSDATE..&SYSTIME\n         AGO   .CKBASE\n.SAVEA   ANOP\n         SAVE  (14,12),,&TYPE\n         AGO   .CKBASE\n.SAVEB   ANOP\n         SAVE  (14,12)\n         AIF   ('&NAME' EQ '').SETAST\n&S       SETC  '&NAME'\n         AGO   .CKBASE\n.SETAST  ANOP\n.*\n.*             DETERMINE HOW BASE REGISTER INITIALIZATION IS TO BE DONE\n.*\n.*             IF FALL INTO 'SETAST' WILL INITIALIZE BY 'BALR'\n&S       SETC  '*'\n         AIF   (T'&BASE EQ 'O').BALR12\n         BALR  &BASE(1),0    LOAD BASE REGISTER\n         AGO   .CKBASE\n.BALR12  ANOP\n         BALR  12,0         LOAD BASE REGISTER\n.*\n.*             INITIALIZE BASE REG BY LOADING IT WITH REG 15 AFTER\n.*              USING GENERATED\n.CKBASE  AIF   (T'&BASE NE 'O').HVBASE\n         USING &S,12         BASE REGISTER USAGE\n         AIF   ('&S' EQ '*').L6\n         LR    12,15          LOAD BASE REGISTER\n         AGO   .L6\n.*\n.*             GENERATE USING\n.HVBASE  ANOP\n&CNT     SETA  N'&BASE\n         AIF   (&CNT EQ 1).B1\n         AIF   (&CNT EQ 2).B2\n         AIF   (&CNT EQ 3).B3\n         AIF   (&CNT EQ 4).B4\n         AIF   (&CNT EQ 5).B5\n.B6      USING &S,&BASE(1),&BASE(2),&BASE(3),&BASE(4),&BASE(5),&BASE(6)\n         AGO   .CKS\n.B5      USING &S,&BASE(1),&BASE(2),&BASE(3),&BASE(4),&BASE(5)\n         AGO   .CKS\n.B4      USING &S,&BASE(1),&BASE(2),&BASE(3),&BASE(4)\n         AGO   .CKS\n.B3      USING &S,&BASE(1),&BASE(2),&BASE(3)\n         AGO   .CKS\n.B2      USING &S,&BASE(1),&BASE(2)\n         AGO   .CKS\n.B1      USING &S,&BASE(1)\n.CKS     AIF   ('&S' EQ '*').RLOAD\n         LR    &BASE(1),15   LOAD PRIMARY BASE REGISTER\n         AIF   (&SVSW EQ 3).RLOAD\n         AIF   (&SVSW EQ 4).RLOAD\n         AGO   .L6\n.RLOAD   ANOP\n.*\n.*             GENERATE CONTENTS OF SECONDARY BASE REGS AFTER 'BALR'\n.*              LOAD OF PRIMARY BASE OR IF HAVE NO SAVE AREA NAME.\n&PTR     SETA  2\n.SLOAD   AIF   (&PTR GT &CNT).L6\n         LA    &BASE(&PTR),4095(,&BASE(&PTR-1)) LOAD NEXT BASE REGISTER\n         LA    &BASE(&PTR),1(,&BASE(&PTR))\n&PTR     SETA  &PTR+1\n         AGO   .SLOAD\n.*\n.*             CHAINING\n.L6      ANOP\n         AIF   (&SVSW EQ 4).GETMAIN\n         ST    13,&JRS+4     SET BACK CHAIN\n         LA    15,&JRS       POINT R15 AT CURRENT SAVE AREA\n         ST    15,8(,13)     SET FORWARD CHAIN\n         L     15,16(,13)    RESTORE R15\n         LA    13,&JRS       POINT R13 AT CURRENT SAVE AREA\n.*\n.*             GENERATE SECONDARY BASE REGISTER LOADS AFTER 'LOAD REG'\n.*              OF PRIMARY\n.L0      AIF   ('&S' EQ '*').L4\n         AIF   (&SVSW EQ 3).L4\n&PTR     SETA  1\n.L1      AIF   (&PTR GE &CNT).L4\n&I       SETA  72+4*(&PTR-1)\n         L     &BASE(&PTR+1),&JRS+&I LOAD FOLLOWING BASE REGISTER\n&PTR     SETA  &PTR+1\n         AGO   .L1\n.*\n.*             ISSUE GETMAIN FOR SAVEAREA\n.*\n.GETMAIN ANOP\n         AIF   ('&SVLEN' EQ '').GETMA\n         L     0,&SVLEN\n         AGO   .GETMB\n.GETMA   ANOP\n         LA    0,72          LENGTH OF GETMAIN\n.GETMB   ANOP\n         GETMAIN R,LV=(0)    DO GETMAIN\n         XC    0(72,1),0(1)  CLEAR SAVE AREA\n         ST    13,4(,1)      SET BACK CHAIN\n         ST    1,8(,13)      SET FORWARD CHAIN\n         LM    13,1,8(13)    SET UP SAVE REG AND RESTORE PARAM REGS\n.*\n.*             DETERMINE ENTRY\n.L4      ANOP\n         AIF   (T'&ENTRY EQ 'O').NOENT  CHECK IF ENTRY CODED\n         B     &ENTRY        BRANCH TO PGM ENTRY POINT\n         AGO   .MAKESA\n.NOENT   ANOP\n&TYPE    SETC  '&SYSNDX'(2,3)           GET LAST 3 POSITIONS OF &SYSNDX\n&TYPE    SETC  'SETUP&TYPE'             CREATE BRANCH NAME\n         AIF   (&SVSW EQ 3).MAKESA      CHECK IF BRANCH NECESSARY\n         AIF   (&SVSW EQ 4).MAKESA      CHECK IF BRANCH NECESSARY\n         B     &TYPE          BRANCH TO PGM ENTRY POINT\n.*\n.*             SAVE AREA SETUP\n.MAKESA  ANOP\n*\n         AIF   (&SVSW EQ 3).MACEND      SHALL SAVEAREA BE GENERATED\n         AIF   (&SVSW EQ 4).MACEND      SHALL SAVEAREA BE GENERATED\n&JRS     DS    18F            SAVE AREA\n         AIF   ('&S' EQ '*').MACEND\n&PTR     SETA  1\n.S3      AIF   (&PTR GE &CNT).S4\n         DC    A(&S+4096*&PTR)\n&PTR     SETA  &PTR+1\n         AGO   .S3\n.S4      ANOP\n*\n.MACEND  AIF   (T'&ENTRY NE 'O').DONE\n         AIF   (&SVSW EQ 3).DONE\n         AIF   (&SVSW EQ 4).DONE\n&TYPE    EQU   *\n.DONE    ANOP\n         AIF   (&ERSW NE 1).FINI\n         MNOTE 12,'*** SETUP LABEL MISSING ***'\n.FINI    ANOP\n         EJECT\n         MEND\n         MACRO\n         WHEN &P1,&P2,&P3,&P4\n.*********************************************************************\n.*       1.  WHEN       CLI,A,NE,B                                   *\n.*       2.  WHEN       (CLI,A,NE,B),AND,(CLC,A,E,B)                 *\n.*       3.  WHEN       (CLI,A,NE,B),OR,(CLC,A,E,B)                  *\n.*       4.  WHEN       OTHERWISE                                    *\n.*********************************************************************\n         GBLC  &$LBWIN\n         GBLA  &$WINDEX,&$LVWIN,&$STKWIN(50)\n&$LBWIN  DS    0H\n         AIF   ('&P1'(1,1) EQ '(').COMPLEX\n         AIF   ('&P1' EQ 'OTHERWISE').OTHER\n         AIF   ('&P3' NE 'EQ').CHKEQ2\n.*********************************************************************\n.*                                        CONVERT 'EQ' TO 'E'        *\n.*********************************************************************\n&SYM     SETC  'E '\n         AGO   .SIMPLE\n.CHKEQ2  ANOP\n         AIF   ('&P3' NE '=').CHKGT1\n.*********************************************************************\n.*                                        CONVERT '=' TO 'E'         *\n.*********************************************************************\n&SYM     SETC  'E '\n         AGO   .SIMPLE\n.CHKGT1  ANOP\n         AIF   ('&P3' NE 'GT').CHKGT2\n.*********************************************************************\n.*                                        CONVERT 'GT' TO 'H'        *\n.*********************************************************************\n&SYM     SETC  'H '\n         AGO   .SIMPLE\n.CHKGT2  ANOP\n         AIF   ('&P3' NE '>').CHKLT1\n.*********************************************************************\n.*                                        CONVERT '>'  TO 'H'        *\n.*********************************************************************\n&SYM     SETC  'H '\n         AGO   .SIMPLE\n.CHKLT1  ANOP\n         AIF   ('&P3' NE 'LT').CHKLT2\n.*********************************************************************\n.*                                        CONVERT 'LT' TO 'L'        *\n.*********************************************************************\n&SYM     SETC  'L '\n         AGO   .SIMPLE\n.CHKLT2  ANOP\n         AIF   ('&P3' NE '<').CHKON\n.*********************************************************************\n.*                                        CONVERT '<'  TO 'L'        *\n.*********************************************************************\n&SYM     SETC  'L '\n         AGO   .SIMPLE\n.CHKON   ANOP\n         AIF   ('&P3' NE 'ON').CHKOFF\n.*********************************************************************\n.*                                       CONVERT 'ON'  TO 'O'        *\n.*********************************************************************\n&SYM     SETC  'O '\n         AGO   .SIMPLE\n.CHKOFF  ANOP\n         AIF   ('&P3' NE 'OFF').CHKDFLT\n.*********************************************************************\n.*                                      CONVERT 'OFF'  TO 'Z'        *\n.*********************************************************************\n&SYM     SETC  'Z '\n         AGO   .SIMPLE\n.CHKDFLT ANOP\n.*********************************************************************\n.*                              BRANCH CODE = SUPPLIED PARAMETER     *\n.*********************************************************************\n&SYM     SETC  '&P3'\n.SIMPLE  ANOP\n         &P1   &P2,&P4\n         B&SYM *+8\n         $UPWHEN\n         B     &$LBWIN\n         MEXIT\n.OTHER   ANOP\n         MEXIT\n.COMPLEX ANOP\n         AIF   ('&P1(3)' NE 'EQ').AAAEQ2\n.*********************************************************************\n.*                                        CONVERT 'EQ' TO 'E'        *\n.*********************************************************************\n&AAA     SETC  'E '\n         AGO   .BBBEQ1\n.AAAEQ2  ANOP\n         AIF   ('&P1(3)' NE '=').AAAGT1\n.*********************************************************************\n.*                                        CONVERT '=' TO 'E'         *\n.*********************************************************************\n&AAA     SETC  'E '\n         AGO   .BBBEQ1\n.AAAGT1  ANOP\n         AIF   ('&P1(3)' NE 'GT').AAAGT2\n.*********************************************************************\n.*                                        CONVERT 'GT' TO 'H'        *\n.*********************************************************************\n&AAA     SETC  'H '\n         AGO   .BBBEQ1\n.AAAGT2  ANOP\n         AIF   ('&P1(3)' NE '>').AAALT1\n.*********************************************************************\n.*                                        CONVERT '>'  TO 'H'        *\n.*********************************************************************\n&AAA     SETC  'H '\n         AGO   .BBBEQ1\n.AAALT1  ANOP\n         AIF   ('&P1(3)' NE 'LT').AAALT2\n.*********************************************************************\n.*                                        CONVERT 'LT' TO 'L'        *\n.*********************************************************************\n&AAA     SETC  'L '\n         AGO   .BBBEQ1\n.AAALT2  ANOP\n         AIF   ('&P1(3)' NE '<').AAAON\n.*********************************************************************\n.*                                        CONVERT '<'  TO 'L'        *\n.*********************************************************************\n&AAA     SETC  'L '\n         AGO   .BBBEQ1\n.AAAON   ANOP\n         AIF   ('&P1(3)' NE 'ON').AAAOFF\n.*********************************************************************\n.*                                       CONVERT 'ON'  TO 'O'        *\n.*********************************************************************\n&AAA     SETC  'O '\n         AGO   .BBBEQ1\n.AAAOFF  ANOP\n         AIF   ('&P1(3)' NE 'OFF').AAADFLT\n.*********************************************************************\n.*                                      CONVERT 'OFF'  TO 'Z'        *\n.*********************************************************************\n&AAA     SETC  'Z '\n         AGO   .BBBEQ1\n.AAADFLT ANOP\n.*********************************************************************\n.*                                BRANCH COND = SUPPLIED PARAMETER   *\n.*********************************************************************\n&AAA     SETC  '&P1(3)'\n         AGO   .BBBEQ1\n.BBBEQ1  ANOP\n         AIF   ('&P3(3)' NE 'EQ').BBBEQ2\n.*********************************************************************\n.*                                        CONVERT 'EQ' TO 'E'        *\n.*********************************************************************\n&BBB     SETC  'E '\n         AGO   .CMPCONT\n.BBBEQ2  ANOP\n         AIF   ('&P3(3)' NE '=').BBBGT1\n.*********************************************************************\n.*                                        CONVERT '=' TO 'E'         *\n.*********************************************************************\n&BBB     SETC  'E '\n         AGO   .CMPCONT\n.BBBGT1  ANOP\n         AIF   ('&P3(3)' NE 'GT').BBBGT2\n.*********************************************************************\n.*                                        CONVERT 'GT' TO 'H'        *\n.*********************************************************************\n&BBB     SETC  'H '\n         AGO   .CMPCONT\n.BBBGT2  ANOP\n         AIF   ('&P3(3)' NE '>').BBBLT1\n.*********************************************************************\n.*                                        CONVERT '>'  TO 'H'        *\n.*********************************************************************\n&BBB     SETC  'H '\n         AGO   .CMPCONT\n.BBBLT1  ANOP\n         AIF   ('&P3(3)' NE 'LT').BBBLT2\n.*********************************************************************\n.*                                        CONVERT 'LT' TO 'L'        *\n.*********************************************************************\n&BBB     SETC  'L '\n         AGO   .CMPCONT\n.BBBLT2  ANOP\n         AIF   ('&P3(3)' NE '<').BBBON\n.*********************************************************************\n.*                                        CONVERT '<'  TO 'L'        *\n.*********************************************************************\n&BBB     SETC  'L '\n         AGO   .CMPCONT\n.BBBON   ANOP\n         AIF   ('&P3(3)' NE 'ON').BBBOFF\n.*********************************************************************\n.*                                       CONVERT 'ON'  TO 'O'        *\n.*********************************************************************\n&BBB     SETC  'O '\n         AGO   .CMPCONT\n.BBBOFF  ANOP\n         AIF   ('&P3(3)' NE 'OFF').BBBDFLT\n.*********************************************************************\n.*                                      CONVERT 'OFF'  TO 'Z'        *\n.*********************************************************************\n&BBB     SETC  'Z '\n         AGO   .CMPCONT\n.BBBDFLT ANOP\n.*********************************************************************\n.*                         BRANCH CODE = SUPPLIED PARAMETER          *\n.*********************************************************************\n&BBB     SETC  '&P3(3)'\n         AGO   .CMPCONT\n.CMPCONT ANOP\n         AIF   ('&P2' EQ 'AND').CAND\n         AIF   ('&P2' EQ 'OR').COR\n         MNOTE *,'CONNECTOR MUST BE ''AND'' OR ''OR'''\n         MEXIT\n.CAND    ANOP\n         &P1(1) &P1(2),&P1(4)\n         B&AAA  *+8\n         $UPWHEN\n         B     &$LBWIN\n         &P3(1) &P3(2),&P3(4)\n         B&BBB  *+8\n         B     &$LBWIN\n         MEXIT\n.COR     ANOP\n         &P1(1) &P1(2),&P1(4)\n         B&AAA  $T&SYSNDX\n         &P3(1) &P3(2),&P3(4)\n         B&BBB  $T&SYSNDX\n         $UPWHEN\n         B     &$LBWIN\n$T&SYSNDX DS   0H\n         MEND\n         EJECT\n         TITLE 'SVC 226 - VALIDATE PCS ACCOUNTING NUMBER'\nWCSVC226 CSECT\n*\n*  THIS SVC VALIDATES THE PASSED PCS NUMBER AGAINST THE PCS TABLE\n*  LOCATED IN EXTENDED CSA.\n*\n*  AT ENTRY, REG 1 MUST POINT TO A PARAMETER LIST CONTAINING:\n*       WORD 1:  ADDRESS OF THE PCS NUMBER TO BE VALIDATED\n*       WORD 2:  ADDRESS OF THE LOGON-ID NAME (OPTIONAL)\n*\n*  AT EXIT, REG 15 WILL CONTAIN THE RETURN CODE VALUE OF:\n*       0  = VALIDATION SUCCESSFUL\n*       4  = PCS TABLE HAS BEEN MARKED 'INVALID'\n*            OR TABLE NOT LOCATED IN STORAGE\n*       8  = LOGON-ID NOT ALLOWED TO USE PCS NUMBER\n*      12  = PCS NUMBER NOT VALID\n   EJECT\n*\nR0       EQU   0                            STD\nR1       EQU   1                            STD\nR2       EQU   2                            BASE PARM AREA\nR3       EQU   3                            WORK REG\nR4       EQU   4                            WORK REG\nR5       EQU   5                            WORK REG\nR6       EQU   6                            BASE REG\nR7       EQU   7                            -> PASSED PCS NUMBER\nR8       EQU   8                            -> PCS TABLE\nR9       EQU   9                            -> PASSED LOGON-ID\nR10      EQU   10                           WORK REG\nR11      EQU   11                           WORK REG\nR12      EQU   12                           WORK REG\nR13      EQU   13                           BASE 'WORK AREA'\nR14      EQU   14                           RETURN ADDR TO CALLER\nR15      EQU   15                           RETURN CODE\n*\n  USING WCSVC226,R6                         ON ENTRY R6 -> MODULE\n  USING WORK,R13                            BASE WORK AREA\n  USING PARMS,R2                            BASE PARMS\n*\n  LR    R2,R1                               -> PASSED PARMS\n*\n  PRINT NOGEN\n  LA    R0,WORKLEN\n  GETMAIN R,LV=(0)                          GET AREA FOR SAVE\n  LR    R13,R1                              -> WORK AREA\n*\n  XC    0(WORKLEN,R13),WORK                 CLEAR WORK AREA\n*\n  ST    R14,SAVE                            SAVE RETURN ADDRESS\n*\n  EJECT\n  XR    R15,R15                             ZERO RETURN CODE\n  STH   R15,RETCODE                         INIT RC = 0\n***********************************************************************\n* ADDRESS PCS TABLE IN EXTENDED CSA                                   *\n***********************************************************************\n  L     R8,16(0)                            -> CVT\n  L     R3,CVTUSER-CVT(R8)                  -> C9605TAB MODULE\n  L     R8,C96PCS@-C9605(R3)                -> CSA PCS_TABLE\n  SPACE 3\n***********************************************************************\n* CHECK IF PCS_TABLE PRESENT AND ACTIVE                               *\n***********************************************************************\n  IF   (CLI,TBLSTAT-TABLE(R8),NE,OFF),OR,   IF PCS_TABLE INVALID THEN  X\n               (CLC,TBLEYE-TABLE(L'TBLEYE,R8),NE,EYECATCH)\n    LH    R15,FOUR                          SET RETCODE = 4\n    STH   R15,RETCODE                       SAVE RC\n    GOTO  PGMEXIT                           AND EXIT FROM PROGRAM\n  ENDIF\n***********************************************************************\n* VALIDATE PASSED PCS NUMBER AGAINST PCS_TABLE                        *\n***********************************************************************\n  XR    R4,R4                               CLEAR REG\n  L     R5,TABLE-TBLSIZE(R8)                GET LENGTH OF PCS_TABLE\n  LA    R3,L'TBLENTRY                       GET LENGTH OF TABLE ENTRY\n***********************************************************************\n* --- FIND NUMBER OF TABLE ENTRIES                                    *\n***********************************************************************\n  DR    R4,R3                               GET LENGTH OF TABLE ENTRY\n*                                             R4 = REMAINDER\n*                                             R5 = QUOTIENT\n  BCTR  R5,0                                SUBTRACT HEADER ENTRY\n***********************************************************************\n* --- INIT HI-TABLE-INDEX AND LOW-TABLE-INDEX                         *\n***********************************************************************\n  ST    R5,HIINDEX                          HI INDEX = # TBL ENTRIES\n  LA    R4,1                                LOW INDEX = 1\n  ST    R4,LOWINDEX                         SAVE IT\n***********************************************************************\n* --- INIT CURRENT-TABLE-INDEX (CURRENT POSITION IN TABLE) POINTER    *\n***********************************************************************\n  SRL   R5,1(0)                             DIVIDE BY 2 (FIND MIDDLE)\n  ST    R5,CURINDEX                         SAVE CURRENT TABLE INDEX\n***********************************************************************\n* COMPARE PASSED PCS NUMBER TO CURRENT PCS_TABLE ENTRY                *\n***********************************************************************\nCOMPARE DS 0H\n  XR    R4,R4                               CLEAR REG\n  L     R5,CURINDEX                         CURRENT TABLE INDEX\n  LA    R3,L'TBLENTRY                       GET LENGTH OF TABLE ENTRY\n  MR    R4,R3                               GET ADDR-INDEX TO TABLE\n  LA    R5,0(R5,R8)                         -> CURRENT TABLE ENTRY\n  L     R7,PCS@                             -> ARGUMENT PCS NUMBER\n  CLC   0(L'TBLENTRY,R5),0(R7)              MATCH ?\n  BH    TBLHIGH                             ... GO LOWER TABLE ->\n  BL    TBLLOW                              ... GO RAISE TABLE ->\n***********************************************************************\n* PCS TABLE MATCH ... EXIT FROM PGM RC=0                              *\n***********************************************************************\n  GOTO  CHKUSER                             GO CHECK LOGON-ID USE\n  EJECT\n***********************************************************************\n* ADJUST CURRENT TABLE POINTER \"DOWNWARD\"                             *\n***********************************************************************\nTBLHIGH DS 0H\n  L     R5,CURINDEX                         CURRENT TABLE INDEX\n  ST    R5,HIINDEX                          RESET HI TABLE INDEX\n  L     R4,LOWINDEX                         GET LOW TABLE INDEX\n  SR    R5,R4                               GET NEW INDEX RANGE\n  IF    CH,R5,EQ,ZERO                       IF NO MORE ENTRIES THEN\n    GOTO  NOFIND                            ... PCS NOT IN TABLE\n  ENDIF\n  IF    CH,R5,LT,FOUR                       IF RANGE LESS THAN 4 THEN\n    L     R4,HIINDEX                        ... SINGLE STEP THRU\n    BCTR  R4,0                              ... REMAINDING TABLE\n    ST    R4,CURINDEX                       ... ENTRIES\n    ST    R4,HIINDEX                        RESET NEW TABLE HI\n  ELSE\n    SRL   R5,1(0)                           DIVIDE BY 2\n    AR    R5,R4                             ADD TO LOW INDEX\n    ST    R5,CURINDEX                       AND SAVE NEW CURRENT INDEX\n  ENDIF\n  GOTO  COMPARE                             GO COMPARE NEXT ENTRY\n  SPACE 3\n***********************************************************************\n* ADJUST CURRENT TABLE POINTER \"UPWARD\"                               *\n***********************************************************************\nTBLLOW  DS 0H\n  L     R4,CURINDEX                         CURRENT TABLE INDEX\n  ST    R4,LOWINDEX                         RESET LOW TABLE INDEX\n  L     R5,HIINDEX                          GET HI TABLE INDEX\n  SR    R5,R4                               GET NEW INDEX RANGE\n  IF    CH,R5,EQ,ZERO                       IF NO MORE ENTRIES THEN\n    GOTO  NOFIND                            ... PCS NOT IN TABLE\n  ENDIF\n  IF    CH,R5,LT,FOUR                       IF RANGE LESS THAN 4 THEN\n    LA    R4,1(R4)                          ... SINGLE STEP THRU\n    ST    R4,CURINDEX                       ... REMAINING TABLE\n    ST    R4,LOWINDEX                       ... ENTRIES\n  ELSE\n    SRL   R5,1(0)                           DIVIDE BY 2\n    AR    R5,R4                             ADD TO LOW INDEX\n    ST    R5,CURINDEX                       AND SAVE NEW CURRENT INDEX\n  ENDIF\n  GOTO  COMPARE                             GO COMPARE NEXT ENTRY\n  SPACE 3\n***********************************************************************\n* PCS NUMBER IS NOT IN TABLE                                          *\n***********************************************************************\nNOFIND  DS 0H\n  LH    R15,TWELVE                          SET RETCODE = 12\n  STH   R15,RETCODE                         SET RETCODE = 12\n  GOTO  PGMEXIT                             AND EXIT FROM PROGRAM\n  EJECT\n***********************************************************************\n* CHKUSER:   PROC.                                                    *\n*   - IF LOGON-ID PASSED, VALIDATE IF USER IS USING PROPER PCS NUMBER *\n***********************************************************************\nCHKUSER DS 0H\n*                                           R7 -> TO PCS NUMBER\n  L     R3,LOGID@                           R3 -> LOGON-ID NAME\n*\n  IF    CH,R3,EQ,ZERO                       IF LOGID@ = 0 THEN\n    GOTO  PGMEXIT                           ... EXIT FROM PROGRAM\n  ENDIF\n*-------------------------------------------------------------*\n*  PREVENT TSO JOBS FROM USING PRODUCTION PUCS  DDAAYSS8      *\n*   WHERE: DD = DIVISION                                      *\n*          AA = APPLICATION                                   *\n*           Y = ALWAYS 'P'                                    *\n*          SS = PROJECT SERIES 88-99                          *\n*           8 = ALWAYS '8'                                    *\n*-------------------------------------------------------------*\nUSR040   DS    0H\n         CLI   4(R7),C'P'         *PRODUCTION PUCS?\n         BC    NE,USR050          *NO, CONTINUE CHECK\n         CLI   7(R7),C'8'         *DOUBLE CHECK. PROD PUCS?\n         BC    EQ,FLUSH           *YES, NOT ALLOWED - FLUSH JOB\nUSR050   DS    0H\n         LA    R5,IDTABLE         *ADDRESS OF DSD ID'S\nUSR060   DS    0H\n         CLC   0(3,R3),0(R5)      *IS THIS A DSD ID?\n         BC    EQ,USR100          *YES, GO CHECK ACCOUNT NUM\n         LA    R5,3(R5)           *POINT TO NEXT TABLE ENTRY\n         CLC   TABLEND(3),0(R5)   *END OF DSD ID TABLE?\n         BC    NE,USR060          *NO, CHECK NEXT ENTRY\n         LA    R5,FCIDS           *ADDR OF FORT WORTH DSD IDS\nUSR065   DS    0H\n         CLC   1(3,R3),0(R5)      *IS THIS A DSD ID?\n         BC    EQ,USR100          *YES, GO CHECK ACCOUNT NUM\n         LA    R5,3(R5)           *POINT TO NEXT TABLE ENTRY\n         CLC   TABLEND(3),0(R5)   *END OF DSD ID TABLE?\n         BC    NE,USR065          *NO, CHECK NEXT ENTRY\n*-------------------------------------------------------------*\n* CHECK NON-DSD ID FOR VALID ACCOUNT NUMBER (PUCS)  DDAAZXXXX *\n*   WHERE: DD = DIVISION                                      *\n*          AA = APPLICATION                                   *\n*           Z = ALWAYS 'Z' - OPEN SHOP INDICATOR              *\n*        XXXX = 2, 3, OR 4 NUMERICS                           *\n*-------------------------------------------------------------*\nUSR070   DS    0H\n         CLI   4(R7),C'Z'         *OPEN SHOP INDICATOR PRESENT?\n         BC    EQ,PGMEXIT         *YES, LOGONID CAN USE PCS\n         B     FLUSH              *INVALID ACCT NUM - FLUSH JOB\n         SPACE 1\n*-------------------------------------------------------------*\n*   CHECK DSD ID FOR VALID PCS ACCOUNT NUMBER  DDAAYSSPTTSS   *\n*                                            (ANY 12 DIGITS)  *\n*   OR VALID PUCS NUMBER  DDAAZXXXX                           *\n*     WHERE: DD = DIVISION - DSD ID (EG: WC, EC, FC )         *\n*            AA = APPLICATION (01 THRU 09)                    *\n*             Z = 'N' FOR NON-BILLABLE                        *\n*          XXXX = 2, 3, OR 4 NUMERICS                         *\n*-------------------------------------------------------------*\nUSR100   DS    0H\n         CLI   4(R7),C'N'         *PUCS NON-BILLABLE?\n         BC    NE,USR120          *NO SEE IF PCS NUMBER\n         LA    R5,IDTABLE         *ADDRESS OF DSD ID'S\nUSR110   DS    0H\n         CLC   0(2,R7),1(R5)      *IS THIS A DSD ID?\n         BC    EQ,PGMEXIT         *YES, LOGONID OK\n         LA    R5,3(R5)           *POINT TO NEXT TABLE ENTRY\n         CLC   TABLEND(3),0(R5)   *END OF DSD ID TABLE?\n         BC    NE,USR110          *NO, CHECK NEXT ENTRY\n         LA    R5,FCIDS           *ADDR OF FORT WORTH DSD IDS\nUSR115   DS    0H\n         CLC   0(2,R7),0(R5)      *IS THIS A DSD ID?\n         BC    EQ,PGMEXIT         *YES, LOGONID OK\n         LA    R5,3(R5)           *POINT TO NEXT TABLE ENTRY\n         CLC   TABLEND(3),0(R5)   *END OF DSD ID TABLE?\n         BC    NE,USR115          *NO, CHECK NEXT ENTRY\n*-----     CHECK IF ACCOUNT NUMBER IS A 12 DIGIT PCS     -----*\nUSR120   DS    0H\n         SLR   R12,R12            *PREPARE FOR COUNT\n         LR    R10,R7             *R10 -> PCS NUMBER\nUSR130   DS    0H\n         CLI   0(R10),C' '        *END OF ACCOUNT NUMBER?\n         BC    EQ,USR140          *YES, GO CHECK COUNT\n         LA    R10,1(R10)         *POINT TO NEXT ACCT CHAR\n         LA    R12,1(R12)         *ADD TO COUNT\n         CH    R12,TWELVE         *COUNT > 12 ?\n         BC    GT,FLUSH           *YES, INVALID USE\n         B     USR130             *CONTINUE CHECKING FOR END\nUSR140   DS    0H\n         LA    R11,12             *NUMBER OF CHARS IN VALID PCS\n         CR    R12,R11            *VALID PCS?\n         BC    EQ,PGMEXIT         *YES, LOGONID CAN USE PCS\n*\nFLUSH    DS    0H\n*        USER CANNOT USE PCS NUMBER\n  LH    R15,EIGHT                           SET RETCODE = 8\n  STH   R15,RETCODE                         SET RETCODE = 8\n  GOTO  PGMEXIT                             AND EXIT FROM PROGRAM\n  EJECT\n***********************************************************************\n* PGMEXIT:   PROC.                                                    *\n*   - EXIT FROM PROGRAM                                               *\n***********************************************************************\nPGMEXIT DS   0H\n  L     R14,SAVE                            RESTORE R14\n  LH    R5,RETCODE                          SAVE RETURN CODE\n  LA    R0,WORKLEN                          R0 = WORK AREA LENGTH\n  LA    R1,WORK                             R1 -> WORK AREA\n*\n  FREEMAIN R,LV=(0),A=(R1)                  FREE GETMAINED AREA\n*\n  XR    R0,R0                               R0 = 0\n  XR    R1,R1                               R1 = 0\n  LR    R15,R5                              R15 = RETURN CODE\n*\n  BR    R14                                 RETURN TO CALLER\n*\n  EJECT\n***********************************************************************\n*  CONSTANT DATA DEFINITIONS                                          *\n***********************************************************************\n*\nZERO     DC    H'0'                         HALFWORD ZERO\nFOUR     DC    H'4'                         HALFWORD FOUR\nEIGHT    DC    H'8'                         HALFWORD EIGHT\nTWELVE   DC    H'12'                        HALFWORD TWELVE\nEYECATCH DC    CL10'PCS TABLE'              TABLE EYECATCHER\n*\nIDTABLE  DC    C'$EC'\n         DC    C'$WC'\n         DC    C'$WP'\nTABLEND  DC    C'FFF'\n*\nFCIDS    DC    C'FCA'\n         DC    C'FCD'\n         DC    C'FCE'\n         DC    C'FCF'\n         DC    C'FCG'\n         DC    C'FCH'\n         DC    C'FCI'\n         DC    C'FCJ'\n         DC    C'FCM'\n         DC    C'FCO'\n         DC    C'FCP'\n         DC    C'FCQ'\n         DC    C'FCR'\n         DC    C'FCS'\n         DC    C'FCT'\n         DC    C'FCW'\n         DC    C'FCZ'\n         DC    C'FFF'\n*\n  SPACE  3\n***********************************************************************\n*  EQUATED DATA DEFINITIONS                                           *\n***********************************************************************\nGT       EQU   2                            A HIGH\nLT       EQU   4                            A LOW\nNE       EQU   7                            A NOT EQUAL B\nEQ       EQU   8                            A EQUAL B\nGE       EQU   11                           A NOT LOW\nLE       EQU   13                           A NOT HIGH\nOFF      EQU   X'00'                        SWITCH-OFF INDICATOR\nON       EQU   X'FF'                        SWITCH-ON INDICATOR\n  LTORG\n  EJECT\n***********************************************************************\n*  MAP PROGRAM WORKING STORAGE AREA (FOR REENTRABILITY)               *\n***********************************************************************\nWORK      DSECT\n*\n          DS    2F\nSAVE      DS    16F\n*\nCURINDEX  DS    F                           -> CURRENT TABLE ENTRY\nLOWINDEX  DS    F                           -> LOWEST TABLE ENTRY\nHIINDEX   DS    F                           -> HIGHEST TABLE ENTRY\n*\nRETCODE   DS    H                           RETURN CODE\n*\nWORKLEN   EQU   *-WORK\n*\n***********************************************************************\n*  MAP IN-STORAGE PCS_TABLE                                           *\n***********************************************************************\nTABLE     DSECT                             PCS STORAGE TABLE MAP\nTBLHDR    DS   0F                           BEGIN TABLE HEADER\nTBLSIZE   DS    F                           SIZE OF TABLE\nTBLSTAT   DS    X                           STATUS FLAG\n*                                           X'00' = TABLE VALID\n*                                           X'FF' = TABLE INVALID\nTBLEYE    DS    CL10                        EYECATCHER 'PCS TABLE '\nTBLENTRY  DS    CL15                        1ST TABLE ENTRY\n*\nTBLHDRLL  EQU   TBLENTRY-TBLHDR             LENGTH OF TABLE HEADER\n  EJECT\n***********************************************************************\n*  MAP PARAMETER LIST                                                 *\n***********************************************************************\nPARMS     DSECT                             PARAMETER LIST DSECT\nPCS@      DS    F                           -> PCS NUM (15 BYTE AREA)\nLOGID@    DS    F                           -> LOGON-ID (8 BYTE AREA)\n          SPACE 3\n***********************************************************************\n*  MAP C9605TAB CONTROL BLOCK                                         *\n***********************************************************************\nC9605     DSECT                             BEGIN MAP OF C9605TAB\n          DS    4F                          FILLER\nC96PCS@   DS    F                           -> PCS TABLE\n          SPACE 3\n***********************************************************************\n*  MAP OS CVT                                                         *\n***********************************************************************\n          CVT  DSECT=YES                    GENERATE CVT DSECT\n*\n          END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "A$$W018": {"ttr": 2568, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (A$$W018)   /*\n      THIS USERMOD IS TO INSTALL THE\n      SVC MODULE FOR CMOVE\n\n      SVC = 252 - TYPE 2\n\n      THIS USERMOD REQUIRES THAT A UCLIN\n      BE DONE TO ADD THE FMID TO BE VER'D\n      AND TO ADD THE SVC TO THE NUCLEUS.\n\n      SET BOUNDARY(GLOBAL) .\n          UCLIN .\n             ADD GLOBALZONE FMID(A$$SVCS) .\n          ENDUCL .\n      SET BOUNDARY(TARGETZONE) .\n          UCLIN .\n             ADD SYSMOD(A$$SVCS) FUNCTION\n                 RECDATE(YYDDD) INSDATE(YYDDD) .\n             ADD MOD(IGC252)   LMOD(IEANUC01)\n                 DISTLIB(ASRCLIB)  FMID(A$$SVCS) .\n          ENDUCL .\n      SET BOUNDARY(DLIBZONE) .\n          UCLIN .\n             ADD SYSMOD(A$$SVCS) FUNCTION\n                 RECDATE(YYDDD) INSDATE(YYDDD) .\n             ADD MOD(IGC252)   FMID(A$$SVCS)\n                 DISTLIB(ASRCLIB) .\n          ENDUCL .\n\n                                                     07/26/88 BRM  */.\n++VER (Z038) FMID(A$$SVCS) .\n++HOLD(A$$W018) SYSTEM FMID(A$$SVCS) REASON(UCLIN) DATE(88208)\n                COMMENT(RUN UCLIN AS SHOWN IN USERMOD COMMENTS) .\n++MOD (IGC252)   LKLIB(INCLUDE) .\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A$$W019": {"ttr": 2570, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (A$$W019)   /*\n      THIS USERMOD IS TO INSTALL THE\n      SVC MODULE FOR NCCF SMFWTR\n\n      SVC = 218 - TYPE 3\n                                               07/27/88 BRM */ .\n++VER (Z038) FMID(A$$SVCS) .\n++JCLIN .\n//A$$W019 JOB WC07N0323,'W1-5311  CR SINGER'\n//LPASVC  EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS2,NAME=HSSLPA,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE  DD  DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN   DD  *\n   INCLUDE INCLUDE(WCSVC218)\n   NAME WCSVC218(R)\n/*\n++MOD (WCSVC218) LKLIB(INCLUDE) .\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "A$$W020": {"ttr": 2572, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (A$$W020)   /*\n      THIS USERMOD IS TO INSTALL THE\n      SVC MODULE FOR UCC11\n\n      SVC = 215 - TYPE 4\n                                               07/27/88 BRM */ .\n++VER (Z038) FMID(A$$SVCS) .\n++JCLIN .\n//A$$W020 JOB WC07N0323,'W1-5311  CR SINGER'\n//LPASVC  EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS2,NAME=HSSLPA,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE  DD  DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN   DD  *\n   INCLUDE INCLUDE(WCSVC215)\n   NAME WCSVC215(R)\n/*\n++MOD (WCSVC215) LKLIB(INCLUDE) .\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AAEW001": {"ttr": 2574, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AAEW001)  /* ALLOW DF/DSS TO RESTORE TO ALLOCATED VOLUMES.\n\n         THIS MODIFICATION WILL FORCE DF/DSS TO ALLOW FULL VOLUME\n         RESTORES TO BE DONE TO ALLOCATED VOLUMES.\n                                               DF/DSS 2.3        */ .\n++ VER(Z038) FMID(HAE2302) PRE(UL19709)  /* 8709 NO FICHE */ .\n++ ZAP(ADRSBRTN) DISTLIB(ADRLIB) .\n NAME ADRSBRTN\n VER 1668 5810,1020               L     1,...\n VER 166C 1F00                    SLR   0,0\n VER 166E 4300,1023               IC    @00,UCBDMCT(,@01) UCB USE CNT\n VER 1672 1950                    CR    #OFENTR,@00       ALL OURS?\n*VER 1674 4740,A61F    ****       BL                      NO\n VER 1678 1F55                    SLR   5,5\n*VER 167A 4350,4000               IC    ...\n VER 167E 1965                    CR    6,5\n*VER 1680 47B0,A6DB    ****       BNL   ...\n REP 1674 4700                    NOP                     NEVER BRANCH\n REP 167A 4350                                     REPLACE INSTRUCTION\n REP 1680 47F0                    B                       ALWAYS BRANCH\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AAEW002": {"ttr": 2576, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AAEW002)  /* DF/DSS USER ENQ EXIT - SKIP ENQ FOR ALL VOLS.\n\n         THIS MODIFICATION WILL CAUSE DF/DSS TO BYPASS ENQ WHICH\n         LOCKS OUT VOLUME FOR ENTIRE JOB STEP.\n                                                                 */ .\n++ VER(Z038) FMID(HAE2302)          /* BASE DF/DSS 2.3.0.    */ .\n++ SRC(ADRUENQ) DISTLIB(ASRCLIB) .\n         TITLE 'DF/DSS USER ENQ EXIT'\nADRUENQ  CSECT                                                  AAEW002\n         LA    15,4               *SKIP ENQ EXCEPT FOR VTOC     AAEW002\n         BR    14                 *RETURN                       AAEW002\n         END   ADRUENQ                                          AAEW002\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AAEW003": {"ttr": 2578, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AAEW003)  /* FORCE DF/DSS TO RESTORE DSNS LIKE FDRDSF DID\n\n         THIS MODIFICATION WILL FORCE DF/DSS NOT TO USE SYSDSN AS\n         THE MAJOR ENQUEUE NAME IN ORDER TO RESTORE A DATASET THAT\n         IS ALREADY ALLOCATED TO A USER.  IT WILL USE SYSDSS INSTEAD.\n                                                                 */ .\n++ VER(Z038) FMID(HAE2302) PRE(UL26776) /*       DF/DSS 2.3.0. */ .\n++ ZAP(ADRDYNA) DISTLIB(ADRLIB) .\n NAME  ADRDYNA\n VER 378E E2E8E2C4,E2D54040       SYSDSN\n REP 378E E2E8E2C4,E2E24040       SYSDSS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW001": {"ttr": 2580, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW001) /* MODIFICATION TO CAUSE STEP LEVEL GDG BASE:\n\n         THIS MODIFICATION CAUSES THE GDG BASE LEVEL TO BE UPDATED\n         AT THE END OF EACH STEP RATHER THAN REMAIN THE SAME\n         THROUGHOUT THE ENTIRE JOB. THIS IS DONE BY APPLYING A\n         ZAP TO GDG SINGLE PROCESSING (IEFAB461) TO CAUSE GDGNT SEARCH\n         TO FAIL FOR ALL DATA SETS .  THIS CAUSES JLOCATE (IEFAB469)\n         TO OBTAIN THE CURRENT BASE GENERATION FROM THE CATALOG\n         RATHER THAN USING THE OLD ONE FROM THE GDGNT. ZAP ALSO\n         FORCES REUSE OF THE FIRST GDGNT ENTRY TO CONSERVE SWA AND\n         AVOID UNECESSARY SEARCHES OF A LENGTHY GDGNT .\n                                                                 */ .\n++ VER(Z038) FMID(JBB2220)               /* BASE   */ .\n++ ZAP(IEFAB461) DISTLIB(AOSB3) .\n NAME IEFAB461\n VER 03F2 4770,C5EE          BNE   @RF00152\n REP 03F2 4700               NOP   @RF00152\n VER 05C0 1E5A               ALR   @05,@10\n REP 05C0 0700               NOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW002": {"ttr": 2817, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW002) /* CHANGE THE TSO LOGICAL TAB CHARACTER:\n\n           THE TSO LOGICAL TAB CHARACTER IS CHANGED TO BE '#'\n           (POUND SIGN). THIS ALLOWS LOGICAL TABING ON 3270S.\n                                                                 */ .\n++ VER(Z038) FMID(HTE1402)  /*  BASE                    */ .\n++ ZAP (IKJEBELE) DISTLIB(ACMDLIB) .\n NAME IKJEBELE\n VER 0232 9240,6003          MVI   TEXTBFR-1(@06),C' '\n REP 0232 927B,6003          MVI   TEXTBFR-1(@06),C'#'\n VER 0860 7A7B7C                   TRANSLATE TABLE ENTRY\n REP 0860 7A057C                   TRANSLATE TABLE ENTRY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW003": {"ttr": 2819, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW003) /* CAUSE VOLUMES VARIED ONLINE TO BE PRIVATE\n\n           THIS MODIFICATION WILL CAUSE ANY VOLUMES THAT ARE SIMPLY\n           VARIED ONLINE TO BE BE MARKED PRIVATE/RESERVED (RATHER\n           THAN PUBLIC/REMOVEABLE). THIS IS A FIX FOR OZ95421.\n                                                                 */ .\n++ VER(Z038) FMID(JBB2220)        /* MVS/XA 2.2                  */ .\n++ ZAP(IEFAB473) DISTLIB(AOSB3) .\n NAME IEFAB473\n VER 0020 05A0                BALR R10,R0      SET UP BASE REG\n VER 0396 96087022    BACK    OI   UCBBPUB(@07),B'00001000' PUBLIC\n VER 0690 A66EA670            DC               AFTER PATCH EYECATCHERS\n VER 0694 A672A674    @PSPACE DC   95S(*)\n VER 0698 A676A678\n*\n REP 0396 47F0A66E           B     PATCH   A=X'22'\n REP 0690 94E37022    PATCH  NI    UCBSTAB,B'11100011'  RESET OTHERS\n REP 0694 96107022           OI    UCBSTAB,B'00010000'  PRIVATE\n REP 0698 47F0A378           B     BACK + 4\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW010": {"ttr": 2821, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW010) /*     VIO ALLOCATION FILTER  :\n\n         LIMIT VIO ALLOCATION TO SMALLER DATASETS : PRIMARY SPACE\n         PLUS 4 TIMES SECONDARY MUST BE LESS THAN : 3.0 MEGABYTES OR\n         240 TRACKS, OR 12 CYLINDERS (DEPENDING ON WHAT UNITS THE\n         SPACE WAS REQUESTED IN). THESE NUMBERS ARE ROUGHLY BASED\n         ON THE VIO 'WINDOW' DEVICE TYPE BEING A 3330. THIS MOD\n         ALSO PREVENTS SORTWORK FILES BEING ASSIGNED VIO.\n                                                                 */ .\n++ VER(Z038) FMID(JBB2220)               /*   BASE          */ .\n++ ZAP(IEFAB464) DISTLIB(AOSB3) .\n NAME IEFAB464\n VER 08CC 47E0,B8B2               BNO   @RF00338     NOT VIO ELGIBLE\n VER 0FA8 BF86,BF88     PATCH     DC\n VER 1002 BFE0,BFE2     PATCHEND  DC\n REP 08CC 47F0,BF90               B     PATCH+A    BRANCH TO PATCH\n REP 0FA8 0030,0000               DC    F'3.0 MB'  MAXIMUM CORE FOR VIO\n REP 0FAC E2D6,D9E3,E6D2          DC    C'SORTWK'  SORT WORK FILE\n REP 0FB2 47E0,B8B2     PATCH+A   BNO   @RF00338   ZAPPED INSTRUCTION\n REP 0FB6 1BFF                    SR    R15,R15    CLEAR 1ST WORK REG\n REP 0FB8 BFF7,709C               ICM   R15,7,JFCBSQTY  GET SECONDARY\n REP 0FBC 89F0,0002               SLL   R15,2      MULT BY 4\n REP 0FC0 1BEE                    SR    R14,R14    CLEAR 2ND WORK REG\n REP 0FC2 BFE7,7098               ICM   R14,7,JFCBPQTY  GET PRIMARY\n REP 0FC6 1AFE                    AR    R15,R14    ADD TOGETHER\n REP 0FC8 4190,000C               LA    R9,12      SET CYL LIMIT\n REP 0FCC 91C0,709B               TM    JFCBCTRI,B'11000000' IN CYLS ?\n REP 0FD0 4710,BFD0               BO    COMPARE\n REP 0FD4 4190,00F0               LA    R9,240     SET TRK LIMIT\n REP 0FD8 9180,709B               TM    JFCBCTRI,B'10000000' IN TRKS ?\n REP 0FDC 4710,BFD0               BO    COMPARE    YES\n REP 0FE0 9140,709B               TM    JFCBCTRI,B'01000000' IN BLKS ?\n REP 0FE4 4780,B8B2               BZ    @RF00338   NO - THEN NO VIO\n REP 0FE8 5890,BF86               L     R9,=X'00300000'  F'3.0 MB'\n REP 0FEC BFE7,70AB               ICM   R14,7,JFCBDRLH GET BLK SIZE\n REP 0FF0 1CEE                    MR    R14,R14    GET # BYTES\n REP 0FF2 19F9          COMPARE   CR    R15,R9     IS IT ALLOWED\n REP 0FF4 47B0,B8B2               BNL   @RF00338   MORE THAN ALLOWED\n REP 0FF8 D505,6004,BF8A          CLC   SCTDDNAM(6,CSIOTP),=C'SORTWK'\n REP 0FFE 4780,B8B2               BE    @RF00338   DONT ALLOW VIO\n REP 1002 47F0,B8AE               B     BACK       RETURN AND ALLOW VIO\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW011": {"ttr": 2823, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW011) /* MOD TO IEAVTRML FOR IMS/VS, NETEX AND RMF V3R2\n                       AND NETVIEW\n       THIS MODIFICATION ADDS THE IMS/VS RESOURCE CLEANUP MODULE\n       DFSMRCL0 TO THE TASK/MEMORY TERMINATION PROCESSING MODULE\n       LIST. THIS CAUSES DFSMRCL0 TO GET CONTROL AT EVERY TASK\n       OR MEMORY TERMINATION.\n       THIS MODIFICATION ALSO ADDS NETEX MODULE NXMTERM0 AND RMF\n       MODULE ERBMFRES TO THE TASK/MEMORY TERMINATION PROCESSING\n       MODULE LIST .\n       1/17/88 ADDED BNJMTERM FOR NETVIEW. HBSKJDED MODULE TO ALLOW\n       FOR 2 FULLWORDS OF ZEROES TO INDICATE END OF TABLE.       */ .\n++ VER(Z038) FMID(HBB2102) /*  XA BASE     */ .\n++ SRC(IEAVTRML) DISTLIB(ASRCLIB) .\nIEAVTRML CSECT                    *CSECT NAME                   ABBW011\n         DC    CL8'DFSMRCL0'      *IMS                          ABBW011\n         DC    XL4'00'            *ZEROS                        ABBW011\n         DC    CL8'NXMTERM0'      *NETEX                        ABBW011\n         DC    XL4'00'            *AND ZEROS                    ABBW011\n         DC    CL8'ERBMFRES'      *RMF                          ABBW011\n         DC    XL4'00'            *AND MORE ZEROS               ABBW011\n         DC    CL8'BNJMTERM'      *NETVIEW                      ABBW011\n         DC    XL4'00'            *AND MORE ZEROS               ABBW011\n         DC    XL12'00'           *END OF TABLE                 ABBW011\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW012": {"ttr": 2825, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW012) /* MOD TO IEAVADFM FOR IMSVS\n                       ONLINE DUMP FORMATTING.\n                      (LOAD MODULE IGC0805A)\n\n                                                                 */ .\n++ VER(Z038) FMID(HBB2102) /*  XA BASE     */ .\n++ ZAP(IEAVADFM) DISTLIB(AOSC5) .\n  NAME IEAVADFM\n  VER 0000 0000000000000000\n  REP 0000 C4C6E2C1C6D4C4F0\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW013": {"ttr": 2827, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW013) /* INSTALL OUR IEFU83 SMF EXIT:\n\n    THIS MODIFICATION INSTALLS THE IEFU83 SMF EXIT WHICH WILL:\n\n    1. CHANGE TYPE 14/15 RECORDS INTO TYPE 214/215 RECORDS.\n       TYPE 214/215 RECORDS ARE SHORTENED 14/15 RECORDS AND\n       CONTAIN ONLY THE SMF HEADER PLUS: DDNAME, DSNAME, JFCBNVOL,\n       JFCBVOL, AND SMFEXCP(ALL UCBS). TYPE 214/215 RECORDS\n       ARE NOT GENERATED FOR THE FOLLOWING TYPES OF CLOSES:\n             1. TEMPORARY OR VIO DATASETS.\n             2. TSO USER TO DATASET BEGINNING WITH USERID.\n             3. TSO USER TO DATASET BEGINNING WITH 'SPF.' FOR INPUT.\n\n    2. WHEN A TYPE 21 RECORD (TAPE UNLOAD) IS ENCOUNTERED THE\n       TEMP IO ERROR FIELDS ARE COMPARED TO THE SIO COUNT DIVIDED\n       BY 500 AND IF GREATER THEN A MESSAGE IS WRITTEN TO THE\n       OPERATOR (HOPEFULLY HE/IT WILL CLEAN THE DRIVE AND OR\n       SEND THE VOLUME TO THE TAPE LIBRARY TO BE CLEANED).\n\n    3. WHEN A TYPE 40 RECORD IS ENCOUNTERED THEN IF IT IS A DYNAMIC\n       UNALLOCATION THEN THE I/O COUNT IS ACCUMULATED IN THE FIRST\n       FOUR BYTES IN THE USER SMF WORK AREA.  THIS WORKAREA IS POINT-\n       ED TO BY THE JMRUCOM FIELD AND IS ALSO USED BY THE IEFACTRT\n       SMF EXIT TO ACCUMULATE DATA FOR JOBS BETWEEN EXITS. THIS AREA\n       IS GETMAINED BY THE FIRST EXIT TO NEED IT (IEFU83, IEFU84 OR\n       IEFACTRT) AND FREEMAINED (ONLY) BY IEFACTRT WHEN PROCESSING\n       A TYPE 05 OR TYPE 35 SMF RECORD.  WHENEVER A TYPE 04 OR 34\n       RECORD IS ENCOUNTERED THEN THE TYPE 40 I/O COUNT ACCUMULATION\n       IS ADDED TO THE FIRST DISK DEVICE ENTRY IN THAT RECORD. ALL\n       TYPE40 RECORDS ARE SUPPRESSED FROM BEING PHYSICALLY WRITTEN\n       TO THE SMF DATASETS (THEY ARE STOPPED BY THIS ROUTINE RETURN-\n       ING WITH RC=4 BUT THEY MUST BE ENABLED IN THE SMFPRM00 MEMBER\n       OF PARMLIB FOR THIS ROUTINE TO EVER SEE THEM).\n\n       THE BASIC REASON FOR DOING ALL THIS IS TO ALLOW FOR THE\n       ACCOUNTING ROUTINES TO CORRECTLY CHARGE FOR ALL I/O WITHOUT\n       COLLECTING MILLIONS OF TYPE40 RECORDS.\n\n       TAPE I/O IS ADJUSTED TO DISK I/O BY K03/K02 AND THAT CODE\n       MUST BE CHANGED IF THE ALGORITHM VALUES CHANGE.  THERE IS\n       NO ATTEMPT TO COMPENSATE FOR THE (SLIGHT) DIFFERENCE IN\n       I/O TIME USED IN COMPUTING STORAGE OCCUPANCY.\n\n       THIS CODE MUST BE IN BOTH IEFU83 AND IEFU84 TO WORK.\n\n    4. WILL INHIBIT ACTUAL WRITING OF SELECTED ACF2 RECORDS:\n\n       'D' (DATASET ACCESS RECORDS) FOR HSMS*.\n       'L' (LOGONID DATABASE MODIFICATION JOURNAL RECORD) FOR\n           JES3 (BATCH JOB ACCESS) AND MSTRJCL00 (TSO LOGONS).\n       'V' (GENERALIZED RESOURCE ACCESS JOURNAL RECORD) FOR\n           FLASHER JOBNAME RESOURCE.\n\n    5. JCLIN IS REQUIRED ONLY IF UCC7 IS INSTALLED.\n                                                                 */ .\n++ VER(Z038) FMID(HBB2102) /*   MVSXA VER 2  */ .\n++ JCLIN .\n//GEN11 JOB WC07N0322,'531-1 RC CREWS'\n//SG21 EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS1,NAME=LPALIB,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE  DD  DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN DD *\n  CHANGE USERU831(SASSU83)\n  INCLUDE INCLUDE(UCCU83)\n  INCLUDE INCLUDE(SASSU83)\n  INCLUDE INCLUDE(ICMDSECT)\n  CHANGE IEFU83(USERU832)\n  INCLUDE SYSPUNCH(IEFU83)\n  CHANGE IEFU83(USERU833)\n  INCLUDE INCLUDE(FNMU83)\n  ENTRY UCCU83\n  NAME IEFU83(R)\n/*\n++ MOD(UCCU83)   LKLIB(INCLUDE) .\n++ MOD(SASSU83)  LKLIB(INCLUDE) .\n++ MOD(ICMDSECT) LKLIB(INCLUDE) .\n++ MOD(FNMU83)   LKLIB(INCLUDE) .\n++ SRC(IEFU83) DISTLIB(ASRCLIB) .\n         MACRO\n         REGS\n         LCLA  &R\n.R       AIF   (&R EQ 16).END\nR&R      EQU   &R\n&R       SETA  &R+1\n         AGO   .R\n.END     MEND\n         TITLE 'LAST CHANCE SMF RECORD EXAMINATION ROUTINE - IEFU83'\nIEFU83   CSECT\n         REGS\n         STM   R14,R12,12(R13)     SAVE REGS\n         BALR  R10,R0              SET UP BASE REG\n         USING *,R10               USING\n         L     R12,0(R1)           GET SMF RDW ADDRESS\n         LH    R14,0(R12)          GET SMF RECORD LENGTH\n         C     R14,=F'6'           CHECK IF LONG ENOUGH\n         BL    EXIT                NO - DONT LOOK AT IT\n         SPACE 2\n*\n*        THIS PART OF CODE CHANGES TYPE 14/15 RECORDS\n*        INTO (SHORTENED) TYPE 214/215 RECORDS.\n*\n         SPACE 1\n         CLI   5(R12),14           TYPE 14 RECORD\n         BE    TYPE14              YES - GO SHORTEN IT\n         CLI   5(R12),15           TYPE 15 RECORD\n         BNE   CHECK21             NO - CHECK IF TYPE21\n*\n         USING SMFTYP14,R12        ESTABLISH ADDRESSING\nTYPE14   TM    SMF14RIN,SMF14VIO+SMF14TDS IS IT VIO OR TEMP\n         BNZ   SUPRESS             YES - DON'T WRITE THIS RECORD\n         LA    R7,SMFJFCB1         GET POINTER TO JFCB SECTION\n         USING JFCBDSNM,R7         ESTABLISH ADDRESSING\n         CLI   SMF14JBN,C'$'       IS IT TSO ?\n         BNE   PROCESS             NO - SHORTEN AND WRITE RECORD\n         CLI   SMF14JBN+7,C' '     IS IT TSO ?\n         BNE   PROCESS             NO - SHORTEN AND WRITE RECORD\n         MVI   SMF14JBN+7,C'.'     PUT IN '.'\n         CLC   SMF14JBN,JFCBDSNM   DOES DSNAME BEGIN WITH USERID ?\n         MVI   SMF14JBN+7,C' '     PUT BLANK BACK IN\n         BE    SUPRESS             YES - DON'T WRITE THIS RECORD\n         CLC   JFCBDSNM(4),=C'SPF.' WAS IT AN SPF DATASET\n         BNE   PROCESS             NO - SHORTEN AND WRITE RECORD\n         CLI   SMF14RTY,14         YES - WAS IT FOR INPUT ?\n         BE    SUPRESS             YES - DON'T WRITE THIS RECORD\n*\nPROCESS  IC    R2,SMF14RTY         PICK UP RECORD TYPE\n         LA    R2,200(R2)          ADD 200\n         STC   R2,SMF14RTY         AND SAVE IT BACK\n         LA    R2,L214RD           GET LENGTH OF TYPE 214/215 RECORDS\n         STH   R2,SMF14LEN         FORCE NEW RECORD LENGTH\n*\n         LM    R2,R5,ZEROS         CLEAR REGS\n         IC    R2,SMF14SDC         GET DCB/DEB SECTION LENGTH\n         IC    R3,SMF14NUC         GET NUMBER OF UCB SECTIONS\n         IC    R4,SMF14SUC         GET SIZE OF EACH UCB SECTION\n*\n         LA    R8,SMF14SDC         SET POINTER JUST PAST HEADER\n         USING SMF214RD,R8         ESTABLISH ADDRESSING\n         MVC   DDNAME,SMFTIOE5     MOVE DDNAME\n         MVC   DSNAME,JFCBDSNM     MOVE DSNAME\n         MVC   NVOL,JFCBNVOL       MOVE NUMBER OF VOLUMES\n         MVC   VOLS(30),JFCBVOLS   MOVE VOLUME SERIAL #S\n         DROP  R7\n*\n         LA    R9,SMFDCBDE         GET POINTER TO DCB/DEB SECTION\n         LA    R9,0(R2,R9)         POINT PAST DCB/DEB SECTION\n         USING SMF14UCB,R9         ESTABLISH ADDRESSING\nUCBLOOP  A     R5,SMFEXCP          ADD IN COUNT FOR THIS UCB\n         LA    R9,0(R4,R9)         POINT TO NEXT UCB SECTION\n         BCT   R3,UCBLOOP          AND LOOP\n         ST    R5,EXCP             SAVE EXCP COUNT IN RECORD\n         B     EXIT                AND THEN EXIT\n         DROP  R8,R9,R12\n         SPACE 2\n*\n*        THIS PART OF CODE WRITES WTO MESSAGE WHENEVER TYPE 21\n*        RECORD INDICATES EXCESSIVE (>.005*SIOS) TEMP IO ERRORS.\n*\n         SPACE 1\nCHECK21  CLI   5(R12),21           TYPE 21 RECORD\n         BNE   CHECK40             NO - CHECK FOR TYPE 04/34/40\n*\n         LM    R2,R5,ZEROS         CLEAR REGS\n         USING SMFTYP21,R12        ESTABLISH ADDRESSING\n         IC    R2,SMF21TR          GET TEMP READS\n         IC    R3,SMF21TW          GET TEMP WRITES\n         ICM   R5,3,SMF21SIO       GET SIO COUNT\n         D     R4,=F'500'          DIVIDE\n         LA    R5,1(R5)            ADD ONE\n         LA    R7,0(R2,R3)         TOTAL NUMBER OF TEMP ERRORS\n         CR    R7,R5               TEMP ERRORS > SIO/500 + 1 ?\n         BNH   EXIT                NO - WE DON'T NEED TO DO ANYTHING\n*\n         LA    R0,LENGTH           GET LENGTH OF AREA\n       GETMAIN R,LV=(0)            GETMAIN\n         ST    R13,4(R1)           SAVE AREA\n         ST    R1,8(R13)           CHAINING\n         LR    R13,R1              BASE FOR WORK AREA\n         USING GETAREA,R13\n*\n         MVC   WTO1(WTOLEN1),WTOMSG1 MOVE WTO1 TO GETMAINED AREA\n         MVC   WTO2(WTOLEN2),WTOMSG2 MOVE WTO2 TO GETMAINED AREA\n         MVC   WTO3(WTOLEN3),WTOMSG3 MOVE WTO3 TO GETMAINED AREA\n*\n         MVC   VOL1(6),SMF21VOL    MOVE VOLUME SER\n         MVC   VOL3(6),SMF21VOL    DITTO\n*\n         ICM   R7,3,SMF21CA        GET UNIT ADDRESS\n         MVI   WORK+2,X'0C'        PUT IN SIGN\n         STH   R7,WORK             STORE UNIT ADDRESS\n         UNPK  WORK+3(5),WORK(3)   UNPACK DIGITS\n         TR    WORK+4(3),HEXTABLE  CONVERT HEX TO CHARS\n         MVC   UNIT1(3),WORK+4     MOVE TO MESSAGE\n         MVC   UNIT3(3),WORK+4     MOVE TO MESSAGE\n*\n         ICM   R5,3,SMF21SIO       GET SIO COUNT\n         CVD   R5,WORK             DECIMAL\n         OI    WORK+7,X'0F'        FIX SIGN\n         MVC   SIOS-1(6),=X'402020202120' MOVE IN EDIT MASK\n         ED    SIOS-1(6),WORK+5    CONVERT TO CHARS\n*\n         CVD   R2,WORK             MAKE READ ERRORS DECIMAL\n         OI    WORK+7,X'0F'        FIX SIGN\n         MVC   READS-1(4),=X'40202120' MOVE IN EDIT MASK\n         ED    READS-1(4),WORK+6   CONVERT TO CHARS\n*\n         CVD   R3,WORK             MAKE WRITE ERRORS DECIMAL\n         OI    WORK+7,X'0F'        FIX SIGN\n         MVC   WRITES-1(4),=X'40202120' MOVE IN EDIT MASK\n         ED    WRITES-1(4),WORK+6  CONVERT TO CHARS\n*\n         WTO   MF=(E,WTO1)         WRITE WTO 1\n         WTO   MF=(E,WTO2)         WRITE WTO 2\n         WTO   MF=(E,WTO3)         WRITE WTO 3\n*\n         LR    R1,R13              UNCHAIN\n         L     R13,4(R13)          SAVE AREAS\n         LA    R0,LENGTH           GET LENGTH TO FREE\n      FREEMAIN R,LV=(0),A=(1)      FREE STORAGE\n         B     EXIT                THEN END\n         DROP  R12\n         SPACE 2\n*\n*        THIS PART OF CODE SAVES IO COUNTS FROM TYPE40 RECORDS\n*        AND ADDS THEM IN TO THE IO COUNTS IN THE 04/34 RECORDS.\n*\n         SPACE 1\nCHECK40  CLI   5(R12),40           TYPE 40 RECORD ?\n         BNE   CHECK04             NO - CHECK FOR TYPE 04\n         USING SMFTYP40,R12        ESTABLISH ADDRESSING\n*\n         CLI   TDDFLG,X'02'        DYNAMIC UNALLOCATION (ONLY)\n         BNE   SUPRESS             NO - DON'T TOUCH ANYTHING\n         SR    R6,R6               CLEAR FOR DIVIDE\n         LH    R7,TDDVAR           GET LENGTH OF DEVICE ENTRY SECTION\n         D     R6,=F'8'            GET COUNT OF DEVICES\n         LTR   R7,R7               ANY THERE ?\n         BZ    SUPRESS             NO - GET OUT\n         L     R3,16               CVT POINTER\n         L     R3,0(R3)            GET TCB WORDS\n         L     R3,4(R3)            GET CURRENT TCB\n         L     R3,X'A4'(R3)        GET TCT POINTER\n         LTR   R3,R3               IS THERE ONE ?\n         BZ    SUPRESS             NO - GET OUT\n         L     R3,X'1C'(R3)        GET JMR POINTER\n         USING JMR,R3              ESTABLISH ADDRESSING\n*\n         SR    R9,R9               CLEAR REG 9\n         ICM   R9,7,JMRUCOM+1      PICK UP USER COMMUNICATION FIELD\n         LTR   R9,R9               ANY THERE NOW ?\n         BNZ   T40HAVE             YES BYPASS GETMAIN & INIT\n         LA    R4,SMFWSIZ          GET SIZE OF WORKAREA\n         A     R4,=F'7'            ROUND UP TO\n         N     R4,=X'FFFFFFF8'     A DOUBLE WORD\n       GETMAIN R,LV=(R4),SP=255    GETMAIN WORK AREA\n         LR    R9,R1               SAVE POINTER\n         USING SMFWORK,R9          SET UP ADDRESSING\n         MVI   0(R9),X'0'          ZERO ONE\n         MVC   1(SMFWSIZ-1,R9),0(R9)  ZERO IT ALL OUT\n         STCM  R9,7,JMRUCOM+1      SAVE POINTER\n*\nT40HAVE  L     R6,T40SAVE          PICK UP ACCUMULATOR\n         LA    R8,TDDEXCP          POINT TO FIRST DEVICE SECTION\nT40LOOP  CLI   0(R8),X'20'         DISK UNIT ?\n         BNE   *+12                NO - LOOK FOR TAPE\n         A     R6,4(R8)            ADD EXCP COUNT TO BUCKET\n         B     T40NEXT             AND GO GET NEXT DEVICE\n         CLI   0(R8),X'80'         TAPE UNIT ?\n         BNE   T40NEXT             NO - SKIP\n         L     R1,4(R8)            GET TAPE EXCP COUNT\n*\n*        1984  ALGORITHM :\n*\n*        M     R0,=F'12272'        MULTIPLY BY K03 * BLKSTAPE * 10E5\n*        D     R0,=F'12052'        DIVIDE BY K02 * BLKSDISK * 10E5\n*\n*        1985  ALGORITHM :\n*\n         M     R0,=F'95070'        MULTIPLY BY K03 * BLKSTAPE * 10E6\n         D     R0,=F'18416'        DIVIDE BY K02 * BLKSDISK * 10E6\n*\n         AR    R6,R1               AND ADD TO ACCUMULATOR\nT40NEXT  LA    R8,8(R8)            POINT TO NEXT DEVICE SECTION\n         BCT   R7,T40LOOP          DO ALL DEVICES\n         ST    R6,T40SAVE          SAVE ACCUMULATED VALUE\n         B     SUPRESS             THEN END\n         DROP  R3,R9,R12\n*\nCHECK04  CLI   5(R12),04           TYPE 04 RECORD ?\n         BE    *+12                YES - GO UNLOAD I/O COUNTS\n         CLI   5(R12),34           TYPE 34 RECORD ?\n         BNE   CHECK250            NO - END\n         USING SMFTYP04,R12        ESTABLISH ADDRESSING\n*\n         L     R3,16               CVT POINTER\n         L     R3,0(R3)            GET TCB WORDS\n         L     R3,4(R3)            GET CURRENT TCB\n         L     R3,X'A4'(R3)        GET TCT POINTER\n         LTR   R3,R3               IS THERE ONE ?\n         BZ    EXIT                NO - GET OUT\n         L     R3,X'1C'(R3)        GET JMR POINTER\n         USING JMR,R3              ESTABLISH ADDRESSING\n         SR    R9,R9               CLEAR REG 9\n         ICM   R9,7,JMRUCOM+1      PICK UP USER COMMUNICATION FIELD\n         LTR   R9,R9               ANY THERE NOW ?\n         BZ    EXIT                NO - NOTHING TO REPORT\n         USING SMFWORK,R9          SET UP ADDRESSING\n         CLC   T40SAVE(4),=F'0'    ANYTHING TO REPORT ?\n         BE    EXIT                NO - SKIP REST\n*\n         SR    R6,R6               CLEAR FOR DIVIDE\n         LH    R7,SMF4LENN         GET LENGTH OF DEVICE ENTRY SECTION\n         D     R6,=F'8'            GET COUNT OF DEVICES\n         LTR   R7,R7               ANY THERE ?\n         BZ    EXIT                NO - GET OUT\n         LA    R8,SMF4DEVC         POINT TO FIRST DEVICE SECTION\nT04LOOP  CLI   0(R8),X'20'         DISK UNIT ?\n         BE    T04HIT              YES - UNLOAD HERE\n         LA    R8,8(R8)            POINT TO NEXT DEVICE SECTION\n         BCT   R7,T04LOOP          DO ALL DEVICES\n         B     EXIT                NONE FOUND .....\nT04HIT   A     R6,T40SAVE          ADD EXISTING TYPE 04 COUNT\n*\n         ST    R6,4(R8)            UPDATE TYPE04|34 EXCP COUNT\n         MVC   T40SAVE(4),=F'0'    RESET T40SAVE FIELD\n         B     EXIT                THEN END\n         DROP  R3,R9,R12\n*\nCHECK250 CLI   5(R12),250          TYPE 250 RECORD ?\n         BNE   EXIT                NO - END\n*\nACFD     CLI   44(R12),C'D'        SUB TYPE 'D' RECORD ?\n         BNE   ACFL                NO - CHECK FOR NEXT\n         CLC   48(4,R12),=C'ADMP'  LOGON ID = 'ADMP****' ?\n         BE    SUPRESS             YES - DUMP IT\n         CLC   48(4,R12),=C'HSMS'  LOGON ID = 'HSMS****' ?\n         BE    SUPRESS             YES - DUMP IT\n         B     EXIT                NO - WRITE THE RECORD\n*\nACFL     CLI   44(R12),C'L'        SUB TYPE 'L' RECORD ?\n         BNE   ACFV                NO - CHECK FOR NEXT\n         CLC   18(8,R12),=C'JES3    ' JES3 ?\n         BE    SUPRESS             YES - SUPRESS IT\n         CLC   18(8,R12),=C'MSTJCL00' MSTRJCL0 ?\n         BE    SUPRESS             YES - SUPRESS IT\n         B     EXIT                NO - WRITE IT\n*\nACFV     CLI   44(R12),C'V'        SUB TYPE 'V' RECORD ?\n         BNE   EXIT                NO - CHECK FOR NEXT\n         CLC   136(4,R12),=C'RFLH' FLASHER RESOURCE ?\n         BE    SUPRESS             YES - SUPRESS IT\n*\n*        COMMON EXIT CODE\n*\n         SPACE 1\nEXIT     LM    R14,R12,12(R13)     RESTORE REGS\n         SR    R15,R15             CLEAR REG TO WRITE RECORD\n         BR    R14                 RETURN\n         SPACE 1\nSUPRESS  LM    R14,R12,12(R13)     RESTORE REGS\n         LA    R15,4               DON'T WRITE THIS RECORD\n         BR    R14                 RETURN\n         SPACE 2\nZEROS    DC    4F'0'               ZEROS\n*\nWTOMSG1  WTO   'IGD083I TAPE ( VVVVVV ) ON UNIT ( UUU ) HAD EXCESSIVE T*\n               EMPORARY IO ERRORS',ROUTCDE=(1,3,5,14),DESC=2,MF=L\nWTOLEN1  EQU   *-WTOMSG1\n*\nWTOMSG2  WTO   'IGD083I ( SIO COUNT = NNNNN ; READ ERRORS = NNN ; WRITE*\n                ERRORS = NNN )   ',ROUTCDE=(1,3,5,14),DESC=4,MF=L\nWTOLEN2  EQU   *-WTOMSG2\n*\nWTOMSG3  WTO   'IGD083I TAKE APPROPRIATE ACTION FOR VOLUME ( VVVVVV ) O*\n               R UNIT ( UUU )    ',ROUTCDE=(1,3,5,14),DESC=4,MF=L\nWTOLEN3  EQU   *-WTOMSG3\n         SPACE 1\nHEXTABLE DC    240C'?'\n         DC    C'0123456789ABCDEF'\n         SPACE 1\n         LTORG\n         SPACE 1\nTOTWORK  DSECT\nSMFWORK  EQU   *\nT40SAVE  DS    F                  TYPE 40 I/O COUNTER (FROM IEFU83)\n         DS    F                  EXTRA WORD FOR FUTURE USE\nC1ASAVE  DS    F                  TOTAL JOB TCB MILLISECONDS (C1A)\nC1CSAVE  DS    F                  TOTAL JOB TAPE MOUNTS (C1C)\n         DS    F                  EXTRA WORD FOR FUTURE USE\n         DS    F                  EXTRA WORD FOR FUTURE USE\nC1BSAVE  DS    D                  TOTAL JOB VMEM OCCUPANCY (C1B)\nC1FSAVE  DS    D                  TOTAL JOB COMM (C1F) (TPUT,TGET)\nC1JSAVE  DS    D                  TOTAL JOB I/O TIME (C1J) (DISK,TAPE)\n         DS    D                  EXTRA DOUBLE WORD FOR FUTURE USE\n         DS    D                  EXTRA DOUBLE WORD FOR FUTURE USE\nSMFWSIZ  EQU   *-SMFWORK          LENGTH OF WORK AREA\n         EJECT\nSMFTYP14 DSECT\n       IFASMFR 14\n         EJECT\nIEFJFCBN DSECT\n      IEFJFCBN\n         EJECT\nSMFTYP21 DSECT\n       IFASMFR 21\n         EJECT\n        IEFJMR\n         EJECT\nSMFTYP04 DSECT\n       IFASMFR 04\n         EJECT\nSMFTYP40 DSECT\n       IFASMFR 40\n         EJECT\nSMF214RD DSECT\nDDNAME   DS    CL8\nDSNAME   DS    CL44\nEXCP     DS    F\nNVOL     DS    AL1\nVOLS     DS    5CL6\nL214RD   EQU   (SMF14SDC-SMF14HDR)+(*-DDNAME)\n         SPACE 2\nGETAREA  DSECT\nSAVEAREA DS    9D                  SAVEAREA\nWORK     DS    D                   WORKAREA\nWTO1     DS    CL(WTOLEN1)         WTO MESSAGE AREA\nVOL1     EQU   WTO1+4+15\nUNIT1    EQU   WTO1+4+34\nWTO2     DS    CL(WTOLEN2)         WTO MESSAGE AREA\nSIOS     EQU   WTO2+4+22\nREADS    EQU   WTO2+4+44\nWRITES   EQU   WTO2+4+65\nWTO3     DS    CL(WTOLEN3)         WTO MESSAGE AREA\nVOL3     EQU   WTO3+4+45\nUNIT3    EQU   WTO3+4+64\nLENGTH   EQU   *-GETAREA           LENGTH OF GETMAINED AREA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW014": {"ttr": 2835, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW014) /* CHANGE TSO ALLOCATE DISP TO SHR:\n\n           THIS MODIFICATION CHANGES THE DEFAULT DISPOSITION\n           FOR THE TSO ALLOCATE COMMAND FROM OLD TO SHR.\n                       5665-285                                  */ .\n++ VER(Z038) FMID(HTE1402) PRE(UY90218)    /* TSO/E BASE REL 4.0  */.\n++ ZAP(IKJEFD30) DISTLIB(AOST4) .\n NAME IKJEFD30\n VER 0A22 5880,800C           LA  R8,12(R8)      WANT TO SEE\n VER 0A26 48E0,8008           LH  R14,8(R8)      IF DISP SPECIFIED\n VER 0A2A 12EE                LTR R14,R14        IS IT POSITIVE?\n VER 0A2C 47D0,BA3C           BNP @RF00464       ..NO, DISP SPECIFIED\n VER 0A30 41F0,0001           LA  R15,1          SET DEFAULT TO OLD\n REP 0A30 41F0,0002           LA  R15,2          SET DEFAULT TO SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW015": {"ttr": 3074, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW015) /* BYPASS THE 'DATA SET NOT FREED' ERROR:\n\n       WHEN A USER ON TSO FREES A DATASET THAT IS NOT ALLOCATED\n       TSO RESPONDS WITH 'DATASET NOT FREED - IS NOT ALLOCATED'.\n       THIS SEEMS LIKE A DUMB ERROR TO US AND THIS MOD CHANGES\n       FREE SO THAT THESE ARE NOLONGER TREATED AS ERRORS.\n                                                                 */ .\n++ VER(Z038) FMID(HTE1402) PRE(UY14199 )   /*  UY14199  */ .\n++ ZAP(IKJEFD20) DISTLIB(ACMDLIB) .\n NAME IKJEFD20\n VER 07E6 D501,B5B6,A161          CLC   S99INFO(2),@CB00576   ZERO ?\n VER 07EC 4780,C7F8               BE    @RF00450              YES\n VER 07F0 9608,B3B8               OI    ERRCONT,B'00001000'   ERRCONT\n VER 07F4 45E0,CAAC               BAL   @14,ALCFAIL           DAIRFAIL\n*\n VER 0AAC 90EC,B318      ALCFAIL  STM   @14,@12,@SA00016      SAVE REGS\n VER 0AB0 9102,B45E               TM    LOADSW,B'00000010'    BEFORE ?\n VER 0AB4 4770,CAD4               BNZ   @RF00575              YES\n*\n VER 14A0 0000,0000      FEPATCH  DC    20F'0'\n VER 14C2 0000,0000      PATCHEND DC    F'0'\n*\n REP 0AAC 47F0,A4A5      ALCFAIL   B     FEPATCH+4             HOOK\n REP 14A0 0438           DDNAME    DC    X'0438'    DDNAME NOT FOUND\n REP 14A2 0440           DSNAME    DC    X'0440'    DSNAME NOT FOUND\n REP 14A4 D501,B5B4,A4A1 FEPATCH+4 CLC   S99ERROR(2),DDNAME\n REP 14AA 4780,A4B9               BE    RESET      YES - RESET ERROR\n REP 14AE D501,B5B4,A4A3          CLC   S99ERROR(2),DSNAME\n REP 14B4 4770,A4BF               BNE   CONTINUE   NO - CONTINUE\n REP 14B8 94F7,B3B8      RESET    NI    ERRCONT,B'11110111' NO ERROR\n REP 14BC 07FE                    BR    @14        SKIP DAIRFAIL\n REP 14BE 90EC,B318      CONTINUE STM   @14,@12,@SA00016      SAVE REGS\n REP 14C2 47F0,CAB0               B     ALCFAIL+4  AND CONTINUE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW016": {"ttr": 3076, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW016) /* ADD ADDITIONAL AMDPRDMP EXITS TO AMDPRECT:\n\n       THIS MODIFICATION DEFINES ADDITIONAL AMDPRDMP EXITS. REFER\n       SERVICE AIDS - PRTDUMP.\n       THIS ENTRY IS FOR IMS 2.2 ONLINE DUMP FORMATTING MODULE.\n       THE ACTUAL MODULE MUST ALSO BE IN A LINKLIST LIBRARY.\n                                                                 */ .\n++ VER(Z038) FMID(JBB2217) PRE(UZ90508) /* UZ90508 NO FICHE*/ .\n++ ZAP(AMDPRECT) DISTLIB(ALINKLIB) .\n NAME AMDPRECT\n VER 0258 40404040,40404040\n VER 0260 00000000\n VER 0268 40404040,40404040\n*\n*    FORMAT OF ENTRY IS MODULE NAME USED TO DO FORMATTING\n*    FOLLOWED BY THE AMDPRDMP VERB USED TO INVOKE THAT MODULE.\n*\n REP 0258 C4C6E2D6,C6D4C4F0  DFSOFMD0\n REP 0264 C9D4E2C4,E4D4D740  IMSDUMP\n*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW019": {"ttr": 3078, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW019) /* SMF STEP INITIATION EXIT:\n\n  THIS MODIFICATION INSTALLS THE IEFUSI SMF EXIT WHICH WILL\n  SUPPORT REGION LIMIT VALUES INSTEAD OF USING IEALIMIT.\n                                                    */ .\n++ VER(Z038) FMID(HBB2102)     /*   MVSXA VER 2     */ .\n++ JCLIN .\n//GEN11 JOB WC07N0323,'W1-5311  CR SINGER'\n//SG21 EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3350',SER=IPLXXX,N=SYS1,NAME=LPALIB,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//SYSLIN DD *\n  MODE AMODE(31) RMODE(ANY)\n  ENTRY  IEFUSI\n  NAME IEFUSI(R)\n/*\n++ SRC(IEFUSI) DISTLIB(ASAMPLIB) DISTOBJ(AOSB3).\nIEFUSI TITLE '*** SMF STEP INITIATION EXIT *** IEFUSI'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ROUTINE NAME - IEFUSI                                              *\n*          DATE - 12 JAN 1988                                         *\n*          JERRY BECKSTRAND                                           *\n*          GENERAL DYNAMICS - DATA SYSTEMS DIVISION                   *\n*          P.O. BOX 85808                                             *\n*          SAN DIEGO, CALIFORNIA 92138                                *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 4\n         ACFREGS\nIEFUSI CSECT\n       AMODE 31\n       RMODE ANY\n         SAVE  (14,12),,IEFUSI_&SYSDATE._&SYSTIME.\n*        R1 ADDRESS OF INPUT PARAMETERS\n*        R3 ADDR OF COMMON EXIT PARAMETER AREA\n*        R4 ADDR OF AN EIGHT BYTE AREA CONTAINING JOB STEP NAME\n*        R5 ADDR OF AN EIGHT BYTE AREA CONTAINING JOB PROGRAM NAME\n*        R6 ADDR OF AREA CONTAINING ACCOUNT INFO\n*        R7 SIX WORD AREA CONTAINING REGION LIMIT VALUES\n*        R8 ADDR OF A WORD CONTAINING V=R FLAG\n*\n         LR    R10,R15                 BASE REGISTER\n         USING IEFUSI,R10              SET UP ADDRESSABILITY\n         LM    R3,R8,0(R1)             PARM LIST ADDRESSES\n*\n* GET BEGINNING ADDRESS OF VSM PARAMETER LIST\n*     VSM PARAMETER LIST POINTED TO BY R7\n*\n         USING VSMPARM,R7              LOAD R7 ADDR VSM PARAMETE LIST\n         OI    VSMFLAG,X'80'           SET HI-ORDER BIT TO 1\n*\n*  SET BATCH DEFAULTS ABOVE 16 MEGABYTES TO 32 MEGABYTES .\n*\n         MVC   VSMSIZA,RMAX32MG        REGION SIZE  ABOVE 16MG TO 32MG\n         MVC   VSMLIMA,RMAX32MG        REGION LIMIT ABOVE 16MG TO 32MG\n*\n         SLR   R9,R9                   GET PSA POINTER AT LOCATION 0\n         USING PSA,R9                  ADDRESSABILITY\n         L     R9,PSAAOLD              GET ASCB POINTER\n         USING ASCB,R9                 ADDRESSABILITY\n         L     R2,ASCBJBNI             GET POINTER TO JOBNAME FIELD\n         LTR   R2,R2                   IS IT A BATCH JOB?\n         BZ    CHKTSO                  ..NO, SEE IF IS TSO\n         B     RETURN                  ..YES, RETURN\nCHKTSO   DS    0H\n         L     R9,ASCBOUCB             GET POINTER TO OUCB\n         USING OUCB,R9                 ADDRESSABILITY\n         TM    OUCBYFL,X'20'           IS IT A TSO TASK?\n         BZ    RETURN\nTSO      DS    0H\n*\n*   SET TSO   REGION ABOVE 16MG TO  4MG\n*\n         MVC   VSMSIZA,RMAX4MG         REGION SIZE  ABOVE 16MG TO 4MG\n         MVC   VSMLIMA,RMAX4MG         REGION LIMIT ABOVE 16MG TO 4MG\n*\nRETURN   DS    0H\n*\n*   ADD 128K TO REQUEST REGION SIZE\n*\n         L     R2,VSMSZREQ          GET REQUEST REGION SIZE\n         AL    R2,N128K          ADD 128K TO REQUESTED REGION SIZE\n         ST    R2,VSMSZREQ          STORE NEW REGION SIZE\n*\n         DS    0H\n         LA    R2,0                    INSTRUCTION TO ZAP FOR TESTING\n         RETURN (14,12),RC=0           ALL DONE\n*\n*        DATA AREA\n*\nRMAX4MG  DC    F'4194304'\nRMAX32MG DC    F'33554432'\nN128K    DC    F'131072'\n         DS    0F\nVSMPARM  DSECT\nVSMFLAG  DS    F   VSM FLAG WORK\nVSMSZREQ DS    F   REQUEST REGION\nVSMLIMB  DS    F   REGION LIMIT BELOW 16MG\nVSMSIZB  DS    F   REGION SIZE BELOW 16MG\nVSMLIMA  DS    F   REGION LIMIT ABOVE 16MG\nVSMSIZA  DS    F   REGION SIZE ABOVE 16MG\n         EJECT\n         LTORG\n         IHAPSA\n         IHAASCB\n         IRAOUCB\n         END IEFUSI\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW020": {"ttr": 3081, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW020) /* INSTALL IEFUTL EXIT:\n\n  THIS MODIFICATION INSTALLS THE IEFUTL SMF EXIT WHICH WILL:\n   1) CHECK ACF2 FLAG TSOWAIT TO SEE IF USER WAIT TIME WILL BE\n      EXTENDED.\n   2) IF THE FLAG IS ON, SET EXTENSION TO 5 HOURS AND TURN THE FLAG\n      OFF (THIS GIVES USER ONE TIME EXTENSION OF 5 HOURS).\n   3) IF FLAG IS OFF, DON'T DO ANYTHING.\n                                                    */ .\n++ VER(Z038) FMID(HBB2102)     /*   MVSXA VER 2     */ .\n++ JCLIN .\n//GEN11 JOB WC07N0323,'W1-5311  CR SINGER'\n//SG21 EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3350',SER=IPLXXX,N=GEN1,NAME=LPALIB,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//SYSLIN DD *\n  ENTRY  IEFUTL\n  NAME IEFUTL(R)\n/*\n++ SRC(IEFUTL) DISTLIB(ASAMPLIB) DISTOBJ(AOSB3).\nIEFUTL TITLE '*** SMF WAIT TIME EXIT *** IEFUTL'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ROUTINE NAME - IEFUTL                                              *\n*          BRUCE R. MINTON                                            *\n*          GENERAL DYNAMICS - DATA SYSTEMS DIVISION                   *\n*          P.O. BOX 85808                                             *\n*          SAN DIEGO, CALIFORNIA 92138                                *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 4\n         ACFREGS\nIEFUTL   CSECT\n         SAVE  (14,12),,*              SAVE REGS\n         LR    R10,R15                 BASE REGISTER\n         USING IEFUTL,R10              SET UP ADDRESSABILITY\n         LR    R2,R0                   SAVE PARM INFO\n         LR    R8,R1                   SAVE PARM INFO\n         USING SMFEPLA,R8              ADDR SMF INFO\n         LA    R6,0                    SET DEFAULT TIME EXTENSION\n         LA    R12,0                   SET DEFAULT RETURN CODE\n         C     R2,=F'08'               HAS WAIT TIME EXPIRED?\n         BNE   FINI                    ..NO, DONT DO ANYTHING\n         GETMAIN RU,LV=WORKLEN         GET WORKING STORAGE\n         LR    R9,R1                   SAVE POINTER\n         USING WORKAREA,R9             SET UP ADDRESSABILITY\n         ST    R1,8(R13)               <= CHAIN THE\n         ST    R13,4(R1)               <= SAVE\n         LR    R13,R1                  <= AREAS\n         L     R3,16                   GET CVT POINTER\n         L     R4,0(R3)                GET TCB WORDS\n         L     R4,12(R4)               GET CURRENT ASCB POINTER\n         L     R5,172(R4)              GET POINTER TO JOBNAME FIELD\n         LTR   R5,R5                   IS IT A BATCH JOB?\n         BZ    CHKTSO                  ..NO, SEE IF IS TSO\n         B     RETURN                  ..YES, DONT DO ANYTHING\nCHKTSO   DS    0H\n         L     R5,144(R4)              GET POINTER TO OUCB\n         TM    X'74'(R3),X'80'         IS THIS MVS/XA?\n         BZ    SP13                    ..NO, MUST BE MVS/SP 1.3\n         L     R15,=A(X'80000000'+CKTASK) SET UP FOR 31 BIT MODE\n         BSM   R0,R15                  SWITCH TO 31 BIT MODE\nCKTASK   DS    0H\n         TM    18(R5),X'20'            IS IT A TSO TASK?\n         BO    OFF31BIT                ..YES, CONTINUE\n         B     A24BIT                  ..NO, DONT DO ANYTHING\nOFF31BIT DS    0H\n         L     R15,=A(X'00000000'+ACF2CVT) SET UP FOR 24 BIT MODE\n         BSM   R0,R15                  SWITCH TO 24 BIT MODE\n         B     ACF2CVT                 GO CHECK ACF2 INFO\nSP13     DS    0H\n         TM    18(R5),X'20'            IS IT A TSO TASK?\n         BZ    RETURN                  ..NO, DONT DO ANYTHING\nACF2CVT  DS    0H\n         ACFINCVT R11,NONE=RETURN      FIND ACF2 CVT\n         USING ACCVT,R11               ADDRESS IT\n         ACFGUCB R7,NONE=RETURN,       GET ACF2 ACUCB                  X\n               INLINE=YES,SYS=AOS2\n         USING ACUCB,R7                ADDRESS ACUCB\n         L     R3,ACULRECP             POINT AT LOGONID RECORD\n         USING LIDREC,R3               ADDRESS LOGONID\n         TM    LIDI2FLG,LIDI2F1        IS USER TO WAIT TIME EXTENDED?\n         BNO   RETURN                  ..NO, DONT DO ANYTHING\nEXTENDTM DS    0H\n         NI    LIDI2FLG,X'7F'          TURN OFF TSO WAIT FLAG\n         L     R12,=F'08'              SET RC TO EXTEND WAIT\n         L     R6,WAITTIME             LOAD TIME EXTENSION TIMER\n         B     RETURN                  ALL DONE\nA24BIT   DS    0H\n         L     R15,=A(X'00000000'+RETURN) SET UP FOR 24 BIT MODE\n         BSM   R0,R15                  SWITCH TO 24 BIT MODE\nRETURN   DS    0H\n         LR    R1,R9                   COPY WORKAREA ADDR\n         L     R13,SAVEAREA+4          POINT AT SAVE AREA\n         FREEMAIN RU,LV=WORKLEN,A=(1)  FREE STORAGE\nFINI     DS    0H\n         LR    R1,R6                   GET TIMER EXTENSION\n         LR    R15,R12                 GET RETURN CODE\n         L     R14,12(,R13)            RESTORE R14\n         LM    R2,R12,28(R13)          RESTORE REGS EXCEPT R0,R1,R15\n         BR    14                      ALL DONE\n         EJECT\n         LTORG\nWAITTIME DC    F'18000'                18,000 SECONDS OR 5 HOURS\nWORKAREA DSECT\nSAVEAREA DS    9D\nWORKLEN  EQU   *-WORKAREA\n         SPACE 4\nSMFEPLA  DSECT\nSMFJOBN  DS    CL8                     JOBNAME\nSMFTIME  DS    CL4                     TIME JOB ENTERED SYSTEM\nSMFDATE  DS    CL4                     DATE JOB ENTERED SYSTEM\nSMFSID   DS    CL4                     SMF SYSTEM ID\nSMFUSID  DS    CL8                     SMF USER IDENTIFICATION\nSMFSTEP  DS    CL1                     NUMBER OF STEP BEING PROCESSED\nSMFOPT   DS    CL1                     SMF OPTIONS\nSMFREST  DS    CL1                     SMF RESTART INDICATOR\nSMFCLAS  DS    CL1                     JOB CLASS\nSMFUSER  DS    CL4                     USER COMMUNICATION FIELDS\n         EJECT\n         LIDREC\n         EJECT\n         ACUCB\n         EJECT\n         ACFASVT\n         EJECT\n         ACCVT\n         EJECT\n         IHAPSA\n         EJECT\n         IHAASCB\n         END IEFUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW025": {"ttr": 3084, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (ABBW025) .\n++VER (Z038) FMID (HTE1402) .\n++SRC(IKJEBLMT) DISTLIB(ASAMPLIB) DISTOBJ(AOST4) .\n*****************************************************************\n*                                                               *\n*  IKJEBLMT - BRODCAST LIMIT                                    *\n*                                                               *\n*  FUNCTION:                                                    *\n*    THE MACRO IKJBCAST GENERATES A CSECT, IKJEBLMT THAT IS     *\n*    USED BY THE TSO RIM, IKJEFXSR, TO SET THE NUMBER OF        *\n*    RECORDS THAT ARE TO BE SET ASIDE FOR THE SYS1.BRODCAST     *\n*    DATA SET.                                                  *\n*                                                               *\n*****************************************************************\n         IKJBCAST BCLMT=24\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW026": {"ttr": 3086, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (ABBW026) .\n++VER (Z038) FMID (HTE1402) .\n++SRC(IKJEFLP1) DISTLIB(ASAMPLIB) DISTOBJ(AOST4) .\n*****************************************************************\n*                                                               *\n*  IKJEFLP1 - LOGON PARAMETER CSECT                             *\n*                                                               *\n*  FUNCTION:                                                    *\n*    THE MACRO IKJTSO GENERATES A CSECT, IKJEFLP1, THAT IS      *\n*    USED BY THE LOGON MODULES.                                 *\n*                                                               *\n*****************************************************************\n         IKJTSO LOGTIME=30,LOGLINE=10\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW028": {"ttr": 3088, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW028) /* ADD SMF STEP END USEREXIT IEFACTRT:\n\n        1) THIS MODIFICATION ADDS IEFACTRT WHICH PRODUCES DEVICE\n           AND OTHER STEP STATISTICAL DATA ON SYSMSG FOR THE USER.\n        2) IT ALSO ADDS IEFCUU$ WHICH PRODUCES JOB COST AND OTHER\n           STEP STATISTICAL DATA ON SYSMSG FOR THE USER.\n        3) IT ALSO ADDS JOBCUU$ TO LPALIB FOR TSO USAGE (REALTIME)\n           AND JESCUU$ TO LINKLIB FOR JOB USAGE (JES OUTPUT ONLY).\n\n    UPDATE HISTORY:\n\n        05/01/88 - PUT APR 1988 NUU RATES INTO CFACTOR. (RCC)\n        10/12/88 - PUT SEP 1988 NUU RATES INTO CFACTOR. (RCC)\n        10/18/88 - RESTRUCTURE  FOR MVS/XA 2.2.1        (RCC)\n        10/11/88 - PUT OCT 1988 NUU RATES INTO CFACTOR. (RCC)\n        11/23/88 - PUT NOV 1988 NUU RATES INTO CFACTOR. (RCC)\n\n                                                                 */ .\n++ VER(Z038) FMID(HBB2102) /* 1988 ALGORITHM - R.C. CREWS 1/5/88 */ .\n++ JCLIN .\n//GEN11 JOB WC07N0044,'531-1 CM SINGER'\n//SG21 EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3350',SER=IPLXXX,N=GEN1,NAME=LPALIB,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//AOSB3   DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=SYS1.AOSB3\n//INCLUDE DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=SYS1.AOSB3\n//SYSLIN DD *\n INCLUDE INCLUDE(IGX00016)\n NAME    IGX00016(R)\n INCLUDE INCLUDE(IEFACTRT)\n INCLUDE INCLUDE(JOBCUU$)\n INCLUDE INCLUDE(CFACTOR)\n INCLUDE INCLUDE(FORMTAB)\n INCLUDE AOSB3(IEFTB724)\n ALIAS   JOBCUU$\n ALIAS   PRTCUU$\n ENTRY   IEFACTRT\n NAME    IEFACTRT(R)\n/*\n//SG22 EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3350',SER=IPLXXX,N=SYS2,NAME=HSSLINK,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//AOSB3   DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=SYS1.AOSB3\n//INCLUDE DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=SYS1.AOSB3\n//SYSLIN DD *\n INCLUDE INCLUDE(JESCUU$)\n INCLUDE INCLUDE(CFACTOR)\n INCLUDE INCLUDE(FORMTAB)\n ENTRY   JESCUU$\n NAME    JESCUU$(R)\n/*\n++ SRC(IEFACTRT) DISTLIB(ASRCLIB) .\n         TITLE 'IEFACTRT SMF STATISTICS PRINTING PROGRAM'\nIEFACTRT CSECT\n*\n*  PURPOSE - IEFACTRT IS AN SMF EXIT WHICH IS INVOKED AT JOB\n*            AND STEP TERMINATION TIME AND WHOSE PURPOSE IS\n*            TO PROVIDE STEP RESOURCE UTILIZATION INFORMATION\n*            ON THE JOB'S SYSOUT.\n*\n*  RELEASE - VS2, R3.7\n*\n*  MACROS USED - FREEMAIN,GETMAIN,RETURN,SAVE\n*\n*  ENTRY POINTS - IEFACTRT\n*\n*  EXTERNAL REFERENCES - IEFYS\n*\n*  OUTPUTS - RESOURCE USAGE DATA ON THE SYSOUT VIA IEFYS\n*\n*  INPUTS -  A. REG 12 CONTAINS THE ADDRESS OF IEFYS'S WORKAREA\n*            B. REG 1 CONTAINS THE ADDRESS OF A TEN WORD LIST\n*               CONSISTING OF THE FOLLOWING PARAMETERS....\n*               +00 - ADDR OF AN (SMF) EXIT PARM AREA\n*               +04 - ADDR OF AN 8 BYTE AREA CONTAINING THE\n*                     LEFT JUSTIFIED, BLANK PADDED, STEPNAME.\n*               +08 - ADDR OF A 20 BYTE AREA CONTAINING PGMR NAME\n*               +12 - ADDR OF A 4 BYTE AREA CONTAINING, IN THE\n*                     FIRST THREE BYTES THE ACCUMULATIVE JOB TCB\n*                     CPU TIME IN HUNDREDTHS OF A SECOND (BINARY)\n*                     AND, IN THE LAST BYTE, THE BINARY NUMBER\n*                     OF ACCOUNTING FIELDS IN THE JOB STATEMENT.\n*               +16 - ADDRESS OF AN AREA CONTAINING ACCOUNTING\n*                     INFORMATION FROM THE JOB CARD.\n*               +20 - THE ADDRESS OF A 4 BYTE AREA CONTAINING,\n*                     IN THE FIRST THREE BYTES STEP CPU TIME IN\n*                     HUNDREDTHS OF A SECOND (BINARY) NUMBER OF\n*                     ACCOUNTING FIELDS IN THE EXEC STMT.\n*               +24 - ADDR OF AN AREA CONTAINING ACCOUNTING INFO\n*                     FROM THE EXEC STMT.\n*               +28 - ADDR OF A 2 BYTE AREA.  THE FIRST BYTE IS AN\n*                     INDICATOR.  IF BIT 7 IS SET TO 1 THE JOB HAS\n*                     BEEN CANCELED. (IF THE EXIT SETS BIT 7 TO 1,\n*                     THE JOB WILL BE CANCELED.)  THE 2ND BYTE\n*                     CONTAINS THE NUMBER OF CURRENT JOB STEP.\n*               +32 - THE ADDRESS OF A 2 BYTE AREA CONTAINING THE\n*                     CONDITION OR COMPLETION CODE OF THE STEP.\n*               +36 - THE ADDRESS OF AN AREA CONTAINING A 4 BYTE\n*                     RDW IMMEDIATELY FOLLOWED BY THE TYPE 30\n*                     SMF RECORD TO BE WRITTEN TO THE SMF\n*                     DATA SET.\n         EJECT\nR0       EQU   0\nR1       EQU   1              AT ENTRY, ADDR OF THE 10 WORK PARM LIST\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7              ADDR OF THE 10 WORD PARM LIST\nR8       EQU   8              ADDR OF THE SMF RECORD\nR9       EQU   9              BASE FOR THE GOTTEN CORE DSECT\nR10      EQU   10             BASE FOR THE CSECT\nR11      EQU   11             INTERNAL BALR'S ONLY\nR12      EQU   12             PARM REG FOR IEFYS - MUST NOT BE MODIFIED\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n* * * * * * * * * * * * *\n*                       *\n*  LINKAGE AND GETMAIN  *\n*                       *\n* * * * * * * * * * * * *\n         SAVE  (14,12)\n         BALR  R10,0          REG 10 FOR BASE\n         USING *,R10\n         WXTRN IEFCUU$\n         LR    R7,R1          SAVE REG 1\n         LA    R0,WORKLEN     GET SIZE OF WORK AREA\n         GETMAIN R,LV=(0)     ISSUE UNCONDITIONAL GETMAIN FOR WORKSPACE\n         LR    R9,R1\n         USING WORK,R9        REG 9 IS BASE FOR GOTTEN CORE\n         ST    R13,SAV+4\n         LA    R14,SAV\n         ST    R14,8(,R13)\n         LR    R13,R14\n* INITIALIZE GOTTEN CORE\n         MVC   LINE1,SKLINE1\n         MVC   LINE2,SKLINE2\n         MVC   LINE3,SKLINE3\n         MVC   EDMASK1,EDSKEL1\n         MVC   EDMASK2,EDSKEL2\n         MVC   EDMASK3,EDSKEL3\n         MVC   EDMASK4,EDSKEL4\n* POINT REG 8 AT THE SMF RECORD\n         L     R8,36(,R7)     POINT AT RDW\n         USING SMFRCD30,R8    PROVIDE ADDRESSABILITY               @JBD\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  AT THIS POINT, ALL DATA SKELETONS HAVE BEEN MOVED TO GOTTEN CORE,  *\n*  REG 7 POINTS TO THE LIST OF (10) INPUT PARMS, REG 8 POINTS TO THE  *\n*  TYPE 30 SUBTYPE 4 (STEP TERMINATION), AND WE ARE READY TO START    *\n*  BUILDING THE (3) OUTPUT LINES, FILLING IN THE FIELDS FROM LEFT TO  *\n*  RIGHT, TOP TO BOTTOM (AS THEY OCCUR ON THE SYSOUT).                *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  TEST FOR TYPE 30 SUBTYPE 4 (STEP TERMINATION TOTAL)                *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         CLI   SMF30RTY,30    IS THIS A TYPE 30 ?                  @JBD\n         BNE   RET            NO - SKIP IT\n         L     R3,SMF30SOF    OFFSET TO SUBSYSTEM SECTION          @JBD\n         AR    R3,R8          ADDRESS OF SUBSYSTEM SECTION\n         USING SMF30PSS,R3                                         @JBD\n         CLC   SMF30TYP,=H'4' IS THIS A SUBTYPE 4?                 @JBD\n         BNE   RET            EXIT IF NOT\n         L     R3,SMF30TOF                                         @JBD\n         AR    R3,R8          ADDRESS OF COMPLETION SECTION\n         USING SMF30CMP,R3    ADDRESS IT                           @JBD\n         TM    SMF30STI,SMF30FLH WAS THIS STEP FLUSHED?            @JBD\n         BO    RET            EXIT IF IT WAS\n         L     R3,16          CVT POINTER\n         L     R3,0(R3)       TCB WORDS\n         L     R3,4(R3)       CURRENT TCB\n         ICM   R3,B'1111',TCBTCT-TCB(R3) IS THERE A TCT            @JBD\n         BZ    RET            NO - GET OUT\n         L     R3,TCTLCTAD-SMFTCT(,R3) LCT POINTER                 @JBD\n         L     R3,LCTJCTAD-LCT(,R3) JOBS JCT POINTER               @JBD\n         USING JCT,R3                                              @JBD\n         TM    JCTJMGLV,INCMALL  MSGLEVEL=(,1)                     @JBD\n         BZ    RET            NO - DON'T DO IT\n* * * * * * * *\n*             *\n*  STEP NAME  *\n*             *\n* * * * * * * *\n         L     R3,SMF30IOF    OFFSET TO IDENTIFICATION SECTION     @JBD\n         AR    R3,R8          ADDRESS OF IDENTIFICATION SECTION\n         MVC   L1STEP,SMF30STM-SMF30ID(R3)                         @JBD\n* * * * * * * * * * *\n*                   *\n*  ELAPSED TIME     *\n*                   *\n* * * * * * * * * * *\n         L     R3,SMF30POF    OFFSET TO PERFORMANCE SECTION        @JBD\n         USING SMF30PRF,R3                                         @JBD\n         AR    R3,R8          ADDRESS OF PERFORMANCE SECTION\n         ICM   R1,15,SMF30TAT                                      @JBD\n         M     R0,=F'1024'    CONVERT TO USECS\n         D     R0,=F'10000'   CONVERT TO 100THS OF SEC\n         LTR   R1,R1          TEST FOR ZERO\n         BNZ   ETNZ                                                @JBD\n         LA    R1,1           MAKE IT NOT ZERO\nETNZ     DS    0H                                                  @JBD\n         LA    R2,L2ELP       ADDR OF ELAPSED FIELD IN OUTPUT LINE\n         BAL   R11,CNVHE      CONVERT AND SAVE IN OUTPUT LINE\n* * * * * * * * * * *\n*                   *\n*  RESIDENCY TIME   *\n*                   *\n* * * * * * * * * * *\n         ICM   R1,15,SMF30RES R1 = RESIDENCY TIME                  @JBD\n         M     R0,=F'1024'    CONVERT TO USECS\n         D     R0,=F'10000'   CONVERT TO 100THS OF SEC\n         LTR   R1,R1          TEST FOR ZERO\n         BNZ   RTNZ                                                @JBD\n         LA    R1,1           MAKE IT NOT ZERO\nRTNZ     DS    0H                                                  @JBD\n         ST    R1,RESSAV1\n*        LA    R2,L2RES       ADDR OF RESIDENCY FIELD IN OUTPUT LINE\n*        BAL   R11,CNVHE      CONVERT AND SAVE IN OUTPUT LINE\n* * * * *\n*       *\n* VECTR *\n*       *\n* * * * *\n         L     R3,SMF30COF    OFFSET TO PROCESSOR SECTION          @JBD\n         USING SMF30CAS,R3                                         @JBD\n         AR    R3,R8          ADDRESS OF PROCESSOR SECTION\n         ICM   R1,15,SMF30JVU R1 = STEP VECTOR TIME                @JBD\n         LA    R2,L2VCT       ADDR OF VECTOR FIELD IN OUTPUT LINE\n         BAL   R11,CNVHE      CONVERT AND SAVE IN OUTPUT LINE\n* * * * *\n*       *\n*  SRB  *\n*       *\n* * * * *\n         ICM   R1,15,SMF30CPS R1 = SRB TIME                        @JBD\n         A     R1,SMF30ISB       + INIT SRB TIME                   @JBD\n         LA    R2,L2SRB       ADDR OF SRB FIELD IN OUTPUT LINE\n         BAL   R11,CNVHE\n* * * * *\n*       *\n*  TCB  *\n*       *\n* * * * *\n         ICM   R1,15,SMF30CPT R1 = TCB TIME                        @JBD\n         A     R1,SMF30ICU       + ITCB TIME                       @JBD\n         LA    R2,L2TCB       ADDR OF TCB FIELD IN OUTPUT LINE\n         BAL   R11,CNVHE      CONVERT AND SAVE IN OUTPUT LINE\n         EJECT\n* * * * * * *\n*           *\n*  PAGE/SEC *\n*           *\n* * * * * * *\n         L     R3,SMF30ROF                                         @JBD\n         USING SMF30SAP,R3                                         @JBD\n         AR    R3,R8          ADDRESS OF STORAGE SECTION\n         ICM   R1,15,SMF30PGI R1 = NO. PAGEINS                     @JBD\n         A     R1,SMF30PGO       + NO. PAGEOUTS                    @JBD\n         A     R1,SMF30PSI       + NO. SWAP PAGES IN               @JBD\n         A     R1,SMF30PSO       + NO. SWAP PAGES OUT              @JBD\n         A     R1,SMF30VPI       + NO. VIO PAGES IN                @JBD\n         A     R1,SMF30VPO       + NO. VIO PAGES OUT               @JBD\n         M     R0,=F'100'     R1 = PAGE/SEC IN 100'S OF SECOND\n         D     R0,RESSAV1     R3 = PAGE/SEC\n         CVD   R1,CVDWORK\n         ED    EDMASK2,CVDWORK+6     STRIP ZEROS (ALLOW 3 CHARS)\n         MVC   L1PSEC(2),EDMASK2+2  PAGE/SEC TO OUTPUT LINE\n* * * * * * * * *\n*               *\n*  SYSIN COUNT  *\n*               *\n* * * * * * * * *\n         L     R3,SMF30UOF                                         @JBD\n         USING SMF30URA,R3                                         @JBD\n         AR    R3,R8          ADDRESS OF I/O SECTION\n         ICM   R1,15,SMF30INP                                      @JBD\n         CVD   R1,CVDWORK\n         ED    EDMASK3,CVDWORK+5     STRIP ZEROS (ALLOW 5 CHARS)\n         MVC   L1SYSIN(4),EDMASK3+2  SYSIN COUNT TO OUTPUT LINE\n* * * * * * * * *\n*               *\n*  TYPE40 EXCPS *\n*               *\n* * * * * * * * *\n         L     R1,16                 CVT POINTER\n         L     R1,0(R1)              GET TCB WORDS\n         L     R1,4(R1)              GET CURRENT TCB\n         ICM   R1,B'1111',TCBTCT-TCB(R1) GET TCT POINTER           @JBD\n         ICM   R1,B'1111',TCTJMR-SMFTCT(R1) GET JMR POINTER        @JBD\n         SR    R2,R2                 CLEAR REG 2\n         ICM   R2,7,JMRUCOM-JMR+1(R1) PICK UP USER COMM. FIELD     @JBD\n         BZ    NOUCF                                               @JBD\n         L     R2,0(R2)              GET T40SAVE VALUE\nNOUCF    DS    0H                                                  @JBD\n         CVD   R2,CVDWORK\n         ED    EDMASK4,CVDWORK+4     STRIP ZEROS (ALLOW 5 CHARS)\n         MVC   L1TYP40(8),EDMASK4    SYSIN COUNT TO OUTPUT LINE\n* * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                 *\n*  FIRST TWO DATA LINES FORMATTED. WRITE BOX AND  *\n*  THE TWO LINES IN PREPARATION FOR POSSIBLE      *\n*  MULTIPLE DEVICE LINES.                         *\n*                                                 *\n* * * * * * * * * * * * * * * * * * * * * * * * * *\n         LA    R14,ASTALL     * * * * * * * * ...*\n         BAL   R11,WRLINE\n         LA    R14,ASTEND     *               ...*\n         BAL   R11,WRLINE\n         LA    R14,LINE1      *  GD/DSD       ...*\n         BAL   R11,WRLINE\n         LA    R14,ASTEND     *               ...*\n         BAL   R11,WRLINE\n         LA    R14,LINE2      *  CORE         ...*\n         BAL   R11,WRLINE\n         LA    R14,ASTEND     *               ...*\n         BAL   R11,WRLINE\n         EJECT\n* * * * * * * * *\n*               *\n*  EXCP-DEVICE  *\n*               *\n* * * * * * * * *\n         LH    R1,SMF30EON    R1 = NUMBER OF EXCP SECTIONS         @JBD\n         LTR   R1,R1          ARE THERE ANY DEVICE ENTRIES\n         BZ    ENDLINES       GO IF NO DEVICE ENTRIES\n         LH    R6,SMF30ELN    R3 = LENGTH OF EXCP SECTIONS         @JBD\n         MR    R0,R6          NUMBER * LENGTH\n         L     R2,SMF30EOF    OFFSET TO EXCP SECTIONS              @JBD\n         USING SMF30EXP,R2                                         @JBD\n         AR    R2,R8          ADDRESS OF EXCP SECTION\n         LA    R1,0(R1,R2)   *R1 = END OF DEVICE ENTRIES\n         LA    R3,L3FIELDS   *R3 = ADDR OF (FIRST) OUTPUT FIELD\n         LA    R4,8          *R4 = NUMBER OF FIELDS IN OUTPUT LINE\nNEXTDEV  EQU   *\n         ICM   R5,15,SMF30BLK R5 = EXCP COUNT FOR THIS ENTRY       @JBD\n         CVD   R5,CVDWORK\n         MVC   0(8,R3),EDSKEL4   SET EDIT MASK FOR EXCP COUNT\n         ED    0(8,R3),CVDWORK+4     STRIP ZEROS AND UNPK INTO OUTPUT\n         MVI   8(R3),C'-'     INSERT THE MAGIC DASH SEPARATOR\n* TEST THE UNIT ADDRESS FIELD FOR X'0000' (SPOOLED DATA SET)\n*                                 X'0FFF' (VIO)\n         CLC   =X'0000',SMF30CUA IS THIS A SPOOLED DATASET         @JBD\n         BE    SPOOL          GO IS SPOOL\n         CLC   =X'0FFF',SMF30CUA IS THIS VIO                       @JBD\n         BE    VIO            GO IF VIO\n         CLC   =X'7FFF',SMF30CUA IS THIS VIO                       @JBD\n         BE    VIO            GO IF VIO\n*  NOT SPOOL OR VIO.  TRANSLATE THE UNIT ADDRESS.\n         IC    R5,SMF30CUA    FIRST CHAR OF UAD                    @JBD\n         SLL   R5,28          TURN OFF THE\n         SRL   R5,28                     MSS BIT\n         STC   R5,XCHAR\n         TR    XCHAR,XTAB     XLATE 1ST CHAR TO EBCDIC 'HEX'\n         MVC   9(1,R3),XCHAR  1ST CHAR TO OUTPUT FIELD\n         IC    R5,SMF30CUA+1  2ND CHAR OF UADR                     @JBD\n         SLL   R5,24          LEAVE LEFTMOST\n         SRL   R5,28                      FOUR BITS\n         STC   R5,XCHAR\n         TR    XCHAR,XTAB     XLATE 2ND CHAR TO EBCDIC 'HEX'\n         MVC   10(1,R3),XCHAR 2ND CHAR TO OUTPUT FIELD\n         IC    R5,SMF30CUA+2  3RD CHAR OF UADR                     @JBD\n         SLL   R5,28          LEAVE RIGHTMOST\n         SRL   R5,28                       FOUR BITS\n         STC   R5,XCHAR\n         TR    XCHAR,XTAB     XLATE 3RD CHAR TO EBCDIC 'HEX'\n         MVC   11(1,R3),XCHAR 3RD CHAR TO OUTPUT FIELD\n         B     TESTNEXT\nSPOOL    EQU   *\n         MVC   9(3,R3),=C'SPL'  UAD = SPOOL\n         B     TESTNEXT\nVIO      EQU   *\n         MVC   9(3,R3),=C'VIO'  UAD = VIO\nTESTNEXT EQU   *\n         LA    R2,0(R2,R6)    POINT TO (NEXT) DEVICE ENTRY\n         LA    R3,12(,R3)     POINT TO (NEXT) FIELD IN OUTPUT LINE\n         CR    R2,R1          ANY MORE DEVICE ENTRIES\n         BNL   LASTEXCP       GO IF NO MORE\n         BCT   R4,NEXTDEV     GO DO NEXT DEVICE IF THIS OUTPUT\n*                             LINE IS NOT FULL\n*  EXCP LINE IS FULL.  PRINT IT AND SET UP FOR THE NEXT.\n         LA    R14,LINE3\n         BAL   R11,WRLINE     WRITE THE EXCP LINE ON THE SYSOUT\n         LA    R4,8           RESET OUTPUT FIELD COUNTER\n         LA    R3,L3FIELDS    RESET OUTPUT FIELD POINTER\n         MVC   LINE3,SKLINE3  REBUILD OUTPUT LINE SKELETON\n         B     NEXTDEV\nLASTEXCP EQU   *\n         LA    R14,LINE3\n         BAL   R11,WRLINE     WRITE THE (LAST) EXCP LINE\nENDLINES EQU   *\n         LA    R14,ASTEND     *               ...*\n         BAL   R11,WRLINE\n         B     DONE           EXIT\n         EJECT\n* * * * * * * * * * * *\n*                     *    ENTRY REQMTS ...\n*  WRITE SYSOUT DATA  *        REG 14 = ADDR OF LINE TO PRINT\n*                     *\n* * * * * * * * * * * *\nWRLINE   EQU   *\n         ST    R14,36(,R12)   SAVE ADDR OF MSG IN IEFYS PARM AREA\n         LA    R14,111        ASSUME A LENGTH OF 111 CHARACTERS\n         STH   R14,42(,R12)   SAVE LENGTH OF MSG IN IEFYS PARM AREA\n         ST    R13,SAV13      SAVE REG 13\n         LA    R13,IEFYSWA    45 WORD WORK AREA FOR IEFYS\n         L     R15,=V(IEFYS)\n         BALR  R14,R15\n         L     R13,SAV13      RESTORE REG 13\n         BR    R11            RETURN\n* * * * * * * * * * * * * * * * *    INPUT REQMTS....\n*                               *\n*  CONVERT BINARY HUNDREDTHS OF *        REG 1 = BINARY TIME IN HUNDRED\n*  A SECOND TO EBCDIC MM.SS.HH  *        REG 2 = ADDR OF EBCDIC FIELD\n*                               *        REG 4 AND REG 5 ARE DESTROYED\n* * * * * * * * * * * * * * * * *\nCNVHE    EQU   *\n         SR    R4,R4          SET UP FOR\n         LR    R5,R1                  DIVIDE\n         D     R4,=F'100'     R4 = HUNDREDTHS, R5 = SECONDS\n         CVD   R4,CVDWORK\n         UNPK  9(2,R2),CVDWORK+6(2)  HUNDREDTHS TO OUTPUT LINE\n         OI    10(R2),X'F0'\n         SR    R4,R4          CLEAR HUNDREDTHS\n         D     R4,=F'60'      R4 = SECONDS, R5 = MINUTES\n         CVD   R4,CVDWORK\n         UNPK  6(2,R2),CVDWORK+6(2)   SECONDS TO OUTPUT LINE\n         OI    7(R2),X'F0'\n         SR    R4,R4\n         D     R4,=F'60'      R4 = MINUTES, R5 = HOURS\n         CVD   R4,CVDWORK\n         UNPK  3(2,R2),CVDWORK+6(2)   MINUTES TO OUTPUT LINE\n         OI    4(R2),X'F0'\n         CVD   R5,CVDWORK\n         UNPK  0(2,R2),CVDWORK+6(2) HOURS TO OUT LINE\n         OI    1(R2),X'F0'\n         MVI   2(R2),C':'     INSERT PERIODS\n         MVI   5(R2),C':'                 BETWEEN FIELDS\n         MVI   8(R2),C'.'\n         BR    R11\n         SPACE 3\n* * * * * * * * * * * * * * * * * * * * * * * *\n*                                             *\n*  FREE GOTTEN CORE, ZERO RET CODES, AND EXIT *\n*                                             *\n* * * * * * * * * * * * * * * * * * * * * * * *\nDONE     L     R15,=V(IEFCUU$)\n         LTR   R15,R15\n         BZ    PUTAST\n         LA    R14,ASDASH     - - - - - - - - ...*\n         BAL   R11,WRLINE\n         B     CALL$\nPUTAST   LA    R14,ASTALL     * * * * * * * * ...*\n         BAL   R11,WRLINE\n         B     NO$\n*\nRET      L     R15,=V(IEFCUU$)\n         LTR   R15,R15\n         BZ    NO$\nCALL$    LR    R1,R7          GET PARM POINTER BACK\n         L     R15,=V(IEFCUU$)\n         BALR  R14,R15\nNO$      L     R11,SAV+4      GET 'OLD' R13 ADDRESS FROM GOTTEN CORE\n         LA    R0,WORKLEN     GET SIZE OF WORK AREA\n         A     R0,=F'7'       AND ROUND UP\n         N     R0,=X'FFFFFFF8' TO A DOUBLE WORD\n         FREEMAIN R,LV=(0),A=(9)  RETURN GOTTEN CORE\n         LR    R13,R11        RESTORE 'OLD' R13\n         RETURN (14,12),RC=0\n         EJECT\n* * * * * * * * * * * * * * *\n*                           *\n*  SKELETONS FOR DSECT AREA *\n*                           *\n* * * * * * * * * * * * * * *\nSKLINE1  DS    0CL111\n         DC    C'*  GD/DSD RESOURCE USAGE FOR STEP 12345678  PAGE/S'\n         DC    C'EC      SYSIN 1234   EXCPS TO DEALLOCATED DATASETS'\n         DC    C'          *'\n*\nSKLINE2  DS    0CL111\n         DC    C'*  ELAPSED TIME                VECTOR USE TIME    '\n         DC    C'             TCB TIME                 SRB TIME    '\n         DC    C'          *'\n*\nSKLINE3  DS    0CL111\n         DC    C'*  EXCP-UNIT'\n         DC    8X'404040404040404040404040'\n         DC    C'  *'\n*\nEDSKEL1  DC    X'40202020202020202120'\nEDSKEL2  DC    X'40202120'\nEDSKEL3  DC    X'402020202120'\nEDSKEL4  DC    X'4020202020202120'\n         SPACE 3\n* * * * * * * *\n*             *\n*  CONSTANTS  *\n*             *\n* * * * * * * *\nASTALL   DS    0CL111\n         DC    C'**************************************************'\n         DC    C'**************************************************'\n         DC    C'***********'\n*\nASDASH   DS    0CL111\n         DC    C'*  -----------------------------------------------'\n         DC    C'--------------------------------------------------'\n         DC    C'--------  *'\n*\nASTEND   DS    0CL111\n         DC    C'*                                                 '\n         DC    C'                                                  '\n         DC    C'          *'\n*\nXTAB     DC    C'0123456789ABCDEF'\n         EJECT\n* * * * * * * * * * * * * *\n*                         *\n*  DSECT FOR GOTTEN CORE  *\n*                         *\n* * * * * * * * * * * * * *\nWORK     DSECT\nCVDWORK  DS    D              CONVERT-TO-DECIMAL WORK AREA\nSAV      DS    18F            LINKAGE REG SAVE AREA\nSAV13    DS    F              REG 13 SAVE DURING IEFYS\nIEFYSWA  DS    18F            WORK AREA FOR IEFYS\nRESSAV1  DS    F              COMPUTED RESIDENCY TIME IN HUNDREDTHS\nEDMASK1  DS    CL10\nEDMASK2  DS    CL4\nEDMASK3  DS    CL6\nEDMASK4  DS    CL8\nXCHAR    DS    C              STORAGE FOR CHAR TO XLATE\n* FIRST LINE OF THE REPORT DATA\nLINE1    DS    0CL111\n         DS    CL34\nL1STEP   DS    CL8\n         DS    CL11\nL1PSEC   DS    CL2\n         DS    CL9\nL1SYSIN  DS    CL4\n         DS    CL32\nL1TYP40  DS    CL8\n         DS    CL3\n* SECOND LINE OF THE REPORT DATA\nLINE2    DS    0CL111\n         DS    CL16\nL2ELP    DS    CL11\n         DS    CL20\nL2VCT    DS    CL11\n         DS    CL14\nL2TCB    DS    CL11\n         DS    CL14\nL2SRB    DS    CL11\n         DS    CL3\n* THIRD LINE OF THE REPORT DATA\nLINE3    DS    0CL111\n         DS    CL12\nL3FIELDS DS    CL99\nWORKLEN  EQU   ((*-WORK+7)/8)*8                                    @JBD\n         EJECT ,                                                   @JBD\n         IFASMFR 30                                                @JBD\n         IKJTCB ,                                                  @JBD\n         IEFTCT ,                                                  @JBD\nLCT      DSECT ,                                                   @JBD\n         IEFALLCT ,                                                @JBD\nJCT      DSECT ,                                                   @JBD\n         IEFAJCTB ,                                                @JBD\n         IEFJMR ,                                                  @JBD\n         END   IEFACTRT\n++ SRC(IGX00016) DISTLIB(ASRCLIB) .\n         TITLE 'IEFSSREQ ISSUEING SVC'\nIGX00016 CSECT\n         DC    X'0DF0'            BASR  15,0 (SET UP BASE REG)\n         USING *,15\n         L     14,0(1)            GET PARAMETER BLOCK ADDRESS\n*\n         CLC   0(4,14),=C'SSOB'   GOT AN SSOB ?\n         BE    SSOB               YES - GO ISSUE IEFSSREQ\n*\n         CLC   0(4,14),=C'TEST'   FOR TESTING ?\n         BE    TEST               YES - GO PROCESS\n*\n         CLC   0(4,14),=C'DMC '   GOT A DMC REQUEST?\n         BNE   RETURN             NO - WHY ARE WE HERE ?\n*\n         L     10,16              CVT POINTER\n         TM    X'74'(10),X'80'    IS THIS MVS XA ?\n         BZ    *+10               NO - DON'T NEED 31 BIT MODE\n         L     10,=A(X'80000000'+MODX31) SET RETURN ADDRESS\n         DC    X'0B0A'            (BSM   R0,10) SET 31 BIT MODE\nMODX31   EQU   *\n*\n         L     1,4(14)            GET ADDRESS OF REQUESTED DMC\n         CLC   56(4,1),=C'DMC '   VALID DMC ?\n         BNE   RETM24             NO - RETURN\n         MVC   8(84,14),0(1)      MOVE DMC TO OUR WORK AREA\n*\nRETM24   L     10,16              CVT POINTER\n         TM    X'74'(10),X'80'    IS THIS MVS XA ?\n         BZ    *+10               NO - DON'T NEED 31 BIT MODE\n         LA    10,MODX24          SET RETURN ADDRESS\n         DC    X'0B0A'            (BSM   R0,10) SET 24 BIT MODE\nMODX24   EQU   *\n*\n         B     RETURN             AND RETURN\n*\nTEST     EQU   *\n         B     RETURN\n         L     2,180(4)           FOR TESTING ONLY\n         BCT   0,SETOFF           DELETE WHEN DONE\n         OI    236(2),X'01'\n         B     RETURN\nSETOFF   NI    236(2),X'FE'\n         B     RETURN             AND RETURN\n*\nSSOB     EQU   *                  JES SSOB REQUEST\n      IEFSSREQ ,                  ISSUE SUBSYSTEM REQUEST\n*\nRETURN   L     14,CVTPTR          GET CVT POINTER\n         USING CVTMAP,14\n         L     14,CVTEXP1         GET EXIT PROLOGUE ADDRESS\n         BR    14\n         DROP  14\n*\n         PRINT NOGEN\nCVTMAP   CVT   DSECT=YES\n*\n      IEFJESCT ,                  JES COMMUNICATION TABLE DSECT\n         END\n++ SRC(CFACTOR) DISTLIB(ASRCLIB) .\nCFACTOR  CSECT\n*\nEYECATCH DC    CL12'DIMES/NUU = ' EYECATCHER FOR ZAPING\nCDURATE  DC    F'1000'            NUU SCALING FACTOR (JANUARY 1988)\n*\n***********************************************************************\n*                                                                     *\n*      ***************  1988 (NUU) ALGORITHM    ***************       *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*      THE EIGHT C-FACTORS ARE:                                       *\n*                                                                     *\n*      FACTOR       RESOURCE         NATURAL UNITS           RATE     *\n*      ------    ---------------   ----------------------   ------    *\n*        C1A  =  PROCESSOR         (PROCESSING MINUTES)     $12.89    *\n*        C1B  =  PROCESSOR         (PROCESSING MINUTES)     $ 6.45    *\n*        C1C  =  TAPE SERVICES     (TAPE MOUNTS)            $ 1.97    *\n*        C1D  =  DASD STORAGE      (MEGABYTE WEEKS)         $ 0.38    *\n*        C1F  =  INTERACTIVE       (MEGABYTES TRANSFERED)   $21.12    *\n*        C1G  =  OUTPUT SERVICES   (10K LINES PRINTED)      $ 1.72    *\n*        C1J  =  DASD I/O          (DEV CONNECT MINUTES)    $ 2.05    *\n*        C1M  =  MEMORY            (MEGABYTE HOURS)         $ 0.00    *\n*        C1P  =  FORMS CHARGE      (PAGES PRINTED) X 1000   $10.59    *\n*                                                                     *\n***********************************************************************\n*\nSTANDSRM DC    F'7125'            STANDARD CPU SRM CONSTANT * 10\n*\nBYTTGET  DC    F'20'              \"AVERAGE\" TERM TGET BYTES\nBYTTPUT  DC    F'200'             \"AVERAGE\" TERM TPUT BYTES\n*\nCFACT1A  DC    F'1289000'         NET C1A * 100000    NOVEMBER 88\nCFACT1B  DC    F'0645000'         NET C1B * 100000    NOVEMBER 88\nCFACT1C  DC    F'0197000'         NET C1C * 100000    NOVEMBER 88\nCFACT1D  DC    F'0038000'         NET C1D * 100000    NOVEMBER 88\nCFACT1F  DC    F'2112000'         NET C1F * 100000     OCTOBER 88\nCFACT1G  DC    F'0172000'         NET C1G * 100000        JULY 88\nCFACT1J  DC    F'0205000'         NET C1J * 100000   SEPTEMBER 88\nCFACT1M  DC    F'0000000'         NET C1M * 100000     JANUARY 88\nCFACT1P  DC    F'1059000'         NET C1P * 100000000SEPTEMBER 88\n         EJECT\n*\n*YECATCH DC    CL12'CENTS/CDU = ' EYECATCHER FOR ZAPING\n*DURATE  DC    F'2180'            CENTS PER CDU (NOVEMBER 1987)\n*\n***********************************************************************\n*                                                                     *\n*      ***************  1987 (CDU) ALGORITHM    ***************       *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*      THE EIGHT C-FACTORS ARE:                                       *\n*                                                                     *\n*      FACTOR       RESOURCE         NATURAL UNITS                    *\n*      ------    ---------------   ----------------------             *\n*        C1A  =  PROCESSOR         (PROCESSING MINUTES)               *\n*        C1B  =  PROCESSOR         (PROCESSING MINUTES)               *\n*        C1C  =  TAPE SERVICES     (TAPE MOUNTS)                      *\n*        C1D  =  DASD STORAGE      (MEGABYTE WEEKS)                   *\n*        C1F  =  INTERACTIVE       (MEGABYTES TRANSFERED)             *\n*        C1G  =  OUTPUT SERVICES   (10K LINES PRINTED)                *\n*        C1J  =  DASD I/O          (DEV CONNECT MINUTES)              *\n*        C1M  =  MEMORY            (MEGABYTE HOURS)                   *\n*        C1P  =  FORMS CHARGE      (PAGES PRINTED)                    *\n*                                                                     *\n*                                                                     *\n*      NET C-FACTORS ARE COMPUTED USING THE FOLLOWING NUMBERS:        *\n*                                                                     *\n*                  1987      1987     1987                            *\n*                  CUUS    OP PLAN  NAT UNIT                          *\n*      FACTOR    ESTIMATE   %COST   ESTIMATE     C FACTOR             *\n*      ------    -------    -----   --------     --------             *\n*        C1A  =  1388066 *  0.372 /   742829  =  0.695127             *\n*        C1B  =  1388066 *  0.372 /   742829  =  0.695127             *\n*        C1C  =  1388066 *  0.080 /  1218991  =  0.091096             *\n*        C1D  =  1388066 *  0.111 /  4299846  =  0.035833             *\n*        C1F  =  1388066 *  0.220 /   229303  =  1.331751             *\n*        C1G  =  1388066 *  0.110 /  2201543  =  0.069355             *\n*        C1J  =  1388066 *  0.041 /   824288  =  0.069042             *\n*        C1M  =  1388066 *  0.000 /   400000  =  0.000000             *\n*        C1P  =  1388066 *  0.066 /214737253  =  0.000426824          *\n*                                                                     *\n*                                                                     *\n*      THE ABOVE NET C-FACTORS ARE USED AS FOLLOWS:                   *\n*                                                                     *\n*   CDUS (COST DISTRIBUTION UNITS) = NATURAL UNITS * NET CFACTOR      *\n*               JOB COST (DOLLARS) = CDUS * CDURATE                   *\n*                                                                     *\n***********************************************************************\n*\n*TANDSRM DC    F'7125'            STANDARD CPU SRM CONSTANT * 10\n*\n*YTTGET  DC    F'20'              \"AVERAGE\" TERM TGET BYTES\n*YTTPUT  DC    F'200'             \"AVERAGE\" TERM TPUT BYTES\n*\n*FACT1A  DC    F'0621695'         NET C1A * 1000000      AUGUST 87\n*FACT1B  DC    F'0621695'         NET C1B * 1000000      AUGUST 87\n*FACT1C  DC    F'0104685'         NET C1C * 1000000      AUGUST 87\n*FACT1D  DC    F'0019945'         NET C1D * 1000000      AUGUST 87\n*FACT1F  DC    F'1105084'         NET C1F * 1000000      AUGUST 87\n*FACT1G  DC    F'0143346'         NET C1G * 1000000    NOVEMBER 87\n*FACT1J  DC    F'0127349'         NET C1J * 1000000      AUGUST 87\n*FACT1M  DC    F'0000000'         NET C1M * 1000000      AUGUST 87\n*FACT1P  DC    F'0744000'         NET C1P * 1000000000 NOVEMBER 87\n         EJECT\n*\n*YECATCH DC    CL12'CENTS/CUU = ' EYECATCHER FOR ZAPING\n*UURATE  DC    F'2975'            CENTS PER CUU (NOV 1986)\n*\n***********************************************************************\n*                                                                     *\n*      ***************     1985 ALGORITHM       ***************       *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*      NET K FACTORS ARE COMPUTED USING THE FOLLOWING NUMBERS:        *\n*                                                                     *\n*      SYSADJUST IS COMPUTED BY TAKING THE SRM CPU CONSTANT FOR       *\n*      THE MACHINE AND DIVIDING BY 368.4 (3081K32 SRM CONSTANT).      *\n*      CAPTURE RATIO IS EITHER 1.855 FOR TSO OR 1.357 FOR BATCH.      *\n*      SYSADJUST AND CAPTURE RATIO ARE APPLIED TO ALL MEASURES        *\n*      USING CPU TIME (K01 &  - ALL - OF K04) BEFORE MULTIPLYING      *\n*      BY THE NET K FACTORS AS SHOWN BELOW.                           *\n*                                                                     *\n*                       K00        KXX             NET KXX            *\n*                    --------   --------         -----------          *\n*                                                                     *\n*        K01    =    0.165156 * 0.0345672     =  .0057090             *\n*        K02    =    0.165156 * 2.954590E-6   =  .0000004880          *\n*        K03    =    0.165156 * 5.802620E-6   =  .0000009583          *\n*        K04    =    0.165156 * 2.713970E-6   =  .0000004482          *\n*        K05    =    0.165156 * 1.359985E-5   =  .0000022461          *\n*        K14    =    0.165156 * 6.880570E-6   =  .0000011364          *\n*        K15    =    0.165156 * 6.137730E-5   =  .0000101368          *\n*        K16    =    FROM FORMS TABLE (K00 NOT APPLIED)               *\n*        K18    =    0.165156 * 9.023050E-4   =  .0001490211          *\n*        K21    =    0.165156 * 2.953150E-3   =  .0004877             *\n*                                                                     *\n***********************************************************************\n*\n*TANDARD DC    F'3684'            STANDARD CPU SRM CONSTANT * 10\n*SOCR    DC    F'1855'            TSO CAPTURE RATIO * 1000\n*ATCR    DC    F'1357'            BATCH CAPTURE RATIO * 1000\n*\n*VGDBLK  DC    F'6233'            \"AVERAGE\" DISK BLOCK LENGTH\n*VGTBLK  DC    F'16384'           \"AVERAGE\" TAPE BLOCK LENGTH\n*VGDTIM  DC    F'13951'           \"AVERAGE\" NUMBER USECS PER DISK I/O\n*VGTTIM  DC    F'13048'           \"AVERAGE\" NUMBER USECS PER TAPE I/O\n*VGTGET  DC    F'20'              \"AVERAGE\" TERM TGET BYTES\n*VGTPUT  DC    F'200'             \"AVERAGE\" TERM TPUT BYTES\n*\n*FACT01  DC    F'005709'          NET K01 * 1000000\n*FACT02  DC    F'000488'          NET K02 * 1000000000\n*FACT03  DC    F'000958'          NET K03 * 1000000000\n*FACT04  DC    F'000448'          NET K04 * 1000000000\n*FACT05  DC    F'002246'          NET K05 * 1000000000\n*FACT14  DC    F'001136'          NET K14 * 1000000000\n*FACT15  DC    F'010137'          NET K15 * 1000000000\n*FACT18  DC    F'149021'          NET K18 * 1000000000\n*FACT21  DC    F'000488'          NET K21 * 1000000\n         EJECT\n***********************************************************************\n*                                                                     *\n*      ***************  1984 (81) ALGORITHM     ***************       *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*      NET K FACTORS ARE COMPUTED USING THE FOLLOWING NUMBERS:        *\n*                                                                     *\n*      SYSADJUST IS COMPUTED BY TAKING THE SRM CPU CONSTANT FOR       *\n*      THE MACHINE AND DIVIDING BY 260.8 (3081K+ SRM CONSTANT/1.5).   *\n*      CAPTURE RATIO IS EITHER 2.000 FOR TSO OR 1.000 FOR BATCH.      *\n*      SYSADJUST AND CAPTURE RATIO ARE APPLIED TO ALL MEASURES        *\n*      USING CPU TIME (K01 &  - ALL - OF K04) BEFORE MULTIPLYING      *\n*      BY THE NET K FACTORS AS SHOWN BELOW.                           *\n*                                                                     *\n*                       K00        KXX             NET KXX            *\n*                    --------   --------         -----------          *\n*                                                                     *\n*        K01    =    0.073888 * 0.0616340     =  .0045549             *\n*        K02    =    0.073888 * 1.933640E-5   =  .0000014287          *\n*        K03    =    0.073888 * 1.498050E-5   =  .0000011069          *\n*        K04    =    0.073888 * 5.904840E-6   =  .0000004363          *\n*        K05    =    0.073888 * 2.952420E-5   =  .0000021815          *\n*        K14    =    0.073888 * 6.567040E-6   =  .0000004852          *\n*        K15    =    0.073888 * 6.756530E-5   =  .0000049923          *\n*        K16    =    FROM FORMS TABLE (K00 NOT APPLIED)               *\n*        K18    =    0.073888 * 4.172970E-4   =  .0000308332          *\n*        K21    =    0.073888 * 3.102380E-3   =  .0002292             *\n*                                                                     *\n***********************************************************************\n*\n*TANDARD DC    F'2608'            STANDARD CPU SRM CONSTANT * 10\n*SOCR    DC    F'2000'            TSO CAPTURE RATIO * 1000\n*ATCR    DC    F'1000'            BATCH CAPTURE RATIO * 1000\n*\n*VGDBLK  DC    F'6233'            \"AVERAGE\" DISK BLOCK LENGTH\n*VGTBLK  DC    F'8192'            \"AVERAGE\" TAPE BLOCK LENGTH\n*VGDTIM  DC    F'13951'           \"AVERAGE\" NUMBER USECS PER DISK I/O\n*VGTTIM  DC    F'13048'           \"AVERAGE\" NUMBER USECS PER TAPE I/O\n*VGTGET  DC    F'60'              \"AVERAGE\" TERM TGET BYTES\n*VGTPUT  DC    F'60'              \"AVERAGE\" TERM TPUT BYTES\n*\n*FACT01  DC    F'004555'          NET K01 * 1000000\n*FACT02  DC    F'001429'          NET K02 * 1000000000\n*FACT03  DC    F'001107'          NET K03 * 1000000000\n*FACT04  DC    F'000436'          NET K04 * 1000000000\n*FACT05  DC    F'002182'          NET K05 * 1000000000\n*FACT14  DC    F'000485'          NET K14 * 1000000000\n*FACT15  DC    F'004992'          NET K15 * 1000000000\n*FACT18  DC    F'030833'          NET K18 * 1000000000\n*FACT21  DC    F'000229'          NET K21 * 1000000\n         END\n++ SRC(FORMTAB) DISTLIB(ASRCLIB) .\nFORMTAB  CSECT\n***********************************************************************\n*                                                                     *\n*                    DSD FORM CHARGE RATE TABLE                       *\n*                                                                     *\n*        ORIGINAL DATA IS IN 'DCW9.SYSINLIB(WC02IBM)' AND 'DCWT.      *\n*        SYSINLIB(OH02R902)'.  IF ANY ADDITIONS OR CHANGES ARE        *\n*        MADE TO THESE OTHER TABLES THEY MUST ALSO BE MADE HERE.      *\n*                                                                     *\n*    ENTRY = FORMID,(CUUS/LINE)*10**9,LINES/PAGE,(CDUS/PAGE)*10**9    *\n*                                                                     *\n***********************************************************************\n         DC    CL4'M001',F'001980',F'050',F'1059000'\n         DC    CL4'PD21',F'010570',F'050',F'1059000'\n         DC    CL4'PLT2',F'014770',F'085',F'1059000'\n         DC    CL4'PLT3',F'014770',F'999',F'1059000'\n         DC    CL4'PLT4',F'014770',F'763',F'1059000'\n         DC    CL4'PLT5',F'014770',F'094',F'1059000'\n         DC    CL4'PLT7',F'014770',F'097',F'1059000'\n         DC    CL4'PTW1',F'007887',F'050',F'1059000'\n         DC    CL4'P021',F'008010',F'050',F'1059000'\n         DC    CL4'P392',F'006030',F'050',F'1059000'\n         DC    CL4'UNKN',F'014770',F'050',F'1059000'\n         DC    CL4'V001',F'001980',F'050',F'1059000'\n         DC    CL4'0000',F'014770',F'034',F'1059000'\n         DC    CL4'0001',F'014770',F'003',F'1059000'\n         DC    CL4'0002',F'014770',F'023',F'1059000'\n         DC    CL4'0003',F'014770',F'026',F'1059000'\n         DC    CL4'0009',F'014770',F'001',F'1059000'\n         DC    CL4'0019',F'014770',F'001',F'1059000'\n         DC    CL4'0021',F'062820',F'050',F'1059000'\n         DC    CL4'0039',F'070070',F'050',F'1059000'\n         DC    CL4'0068',F'101420',F'050',F'1059000'\n         DC    CL4'0069',F'084560',F'050',F'1059000'\n         DC    CL4'0075',F'083100',F'050',F'1059000'\n         DC    CL4'0099',F'083100',F'058',F'1059000'\n         DC    CL4'0100',F'014770',F'001',F'1059000'\n         DC    CL4'0121',F'014770',F'037',F'1059000'\n         DC    CL4'0122',F'083100',F'050',F'1059000'\n         DC    CL4'0131',F'253700',F'050',F'1059000'\n         DC    CL4'0132',F'383600',F'050',F'1059000'\n         DC    CL4'0133',F'063800',F'050',F'1059000'\n         DC    CL4'0138',F'185800',F'050',F'1059000'\n         DC    CL4'0141',F'090150',F'050',F'1059000'\n         DC    CL4'0163',F'014770',F'001',F'1059000'\n         DC    CL4'0163',F'014770',F'001',F'1059000'\n         DC    CL4'0164',F'014770',F'001',F'1059000'\n         DC    CL4'0166',F'014770',F'035',F'1059000'\n         DC    CL4'0167',F'014770',F'016',F'1059000'\n         DC    CL4'0168',F'014770',F'035',F'1059000'\n         DC    CL4'0170',F'014770',F'016',F'1059000'\n         DC    CL4'0173',F'014770',F'010',F'1059000'\n         DC    CL4'0180',F'014770',F'016',F'1059000'\n         DC    CL4'0182',F'023120',F'050',F'1059000'\n         DC    CL4'0183',F'014770',F'001',F'1059000'\n         DC    CL4'0184',F'014770',F'001',F'1059000'\n         DC    CL4'0188',F'014770',F'007',F'1059000'\n         DC    CL4'0190',F'014770',F'003',F'1059000'\n         DC    CL4'0191',F'014770',F'003',F'1059000'\n         DC    CL4'0192',F'014770',F'003',F'1059000'\n         DC    CL4'0193',F'014770',F'003',F'1059000'\n         DC    CL4'0194',F'014770',F'003',F'1059000'\n         DC    CL4'0195',F'014770',F'003',F'1059000'\n         DC    CL4'0202',F'014770',F'001',F'1059000'\n         DC    CL4'0203',F'014770',F'003',F'1059000'\n         DC    CL4'0204',F'014770',F'003',F'1059000'\n         DC    CL4'0208',F'014770',F'001',F'1059000'\n         DC    CL4'0212',F'016800',F'050',F'1059000'\n         DC    CL4'0213',F'025300',F'050',F'1059000'\n         DC    CL4'0214',F'020700',F'050',F'1059000'\n         DC    CL4'0215',F'028900',F'050',F'1059000'\n         DC    CL4'0216',F'025300',F'050',F'1059000'\n         DC    CL4'0217',F'025300',F'050',F'1059000'\n         DC    CL4'0218',F'021900',F'050',F'1059000'\n         DC    CL4'0224',F'014770',F'003',F'1059000'\n         DC    CL4'0225',F'014770',F'003',F'1059000'\n         DC    CL4'0226',F'014770',F'003',F'1059000'\n         DC    CL4'0228',F'014770',F'055',F'1059000'\n         DC    CL4'0237',F'020800',F'050',F'1059000'\n         DC    CL4'0249',F'014770',F'001',F'1059000'\n         DC    CL4'0250',F'014770',F'040',F'1059000'\n         DC    CL4'0251',F'014770',F'040',F'1059000'\n         DC    CL4'0255',F'014770',F'001',F'1059000'\n         DC    CL4'0261',F'009960',F'050',F'1059000'\n         DC    CL4'0261',F'014770',F'016',F'1059000'\n         DC    CL4'0269',F'090100',F'050',F'1059000'\n         DC    CL4'0270',F'090100',F'055',F'1059000'\n         DC    CL4'0271',F'090100',F'055',F'1059000'\n         DC    CL4'0272',F'090100',F'055',F'1059000'\n         DC    CL4'0273',F'090100',F'055',F'1059000'\n         DC    CL4'0274',F'090100',F'055',F'1059000'\n         DC    CL4'0275',F'014770',F'010',F'1059000'\n         DC    CL4'0276',F'014770',F'038',F'1059000'\n         DC    CL4'0277',F'014770',F'051',F'1059000'\n         DC    CL4'0279',F'008010',F'050',F'1059000'\n         DC    CL4'0279',F'014770',F'057',F'1059000'\n         DC    CL4'0280',F'014770',F'055',F'1059000'\n         DC    CL4'0281',F'014770',F'049',F'1059000'\n         DC    CL4'0282',F'014770',F'043',F'1059000'\n         DC    CL4'0284',F'009960',F'050',F'1059000'\n         DC    CL4'0288',F'014770',F'020',F'1059000'\n         DC    CL4'0289',F'014770',F'039',F'1059000'\n         DC    CL4'0291',F'014770',F'019',F'1059000'\n         DC    CL4'0299',F'014770',F'038',F'1059000'\n         DC    CL4'0304',F'002520',F'036',F'1059000'\n         DC    CL4'0309',F'014770',F'027',F'1059000'\n         DC    CL4'0312',F'014770',F'039',F'1059000'\n         DC    CL4'0316',F'010570',F'050',F'1059000'\n         DC    CL4'0317',F'014770',F'030',F'1059000'\n         DC    CL4'0705',F'014770',F'001',F'1059000'\n         DC    CL4'0732',F'014770',F'001',F'1059000'\n         DC    CL4'0904',F'014770',F'001',F'1059000'\n         DC    CL4'0905',F'014770',F'001',F'1059000'\n         DC    CL4'1075',F'014770',F'002',F'1059000'\n         DC    CL4'1076',F'014770',F'002',F'1059000'\n         DC    CL4'1093',F'014770',F'037',F'1059000'\n         DC    CL4'1103',F'014770',F'033',F'1059000'\n         DC    CL4'1109',F'014770',F'033',F'1059000'\n         DC    CL4'1115',F'014770',F'038',F'1059000'\n         DC    CL4'1130',F'014770',F'016',F'1059000'\n         DC    CL4'1132',F'014770',F'008',F'1059000'\n         DC    CL4'1145',F'014770',F'030',F'1059000'\n         DC    CL4'1148',F'050200',F'050',F'1059000'\n         DC    CL4'1154',F'014770',F'031',F'1059000'\n         DC    CL4'1160',F'014770',F'037',F'1059000'\n         DC    CL4'1161',F'014770',F'043',F'1059000'\n         DC    CL4'1184',F'014770',F'002',F'1059000'\n         DC    CL4'1233',F'014770',F'055',F'1059000'\n         DC    CL4'1234',F'014770',F'055',F'1059000'\n         DC    CL4'1235',F'014770',F'055',F'1059000'\n         DC    CL4'1600',F'014770',F'031',F'1059000'\n         DC    CL4'1601',F'014770',F'030',F'1059000'\n         DC    CL4'1602',F'014770',F'030',F'1059000'\n         DC    CL4'2999',F'014770',F'059',F'1059000'\n         DC    CL4'3101',F'014770',F'009',F'1059000'\n         DC    CL4'3104',F'006620',F'023',F'1059000'\n         DC    CL4'3105',F'015612',F'051',F'1059000'\n         DC    CL4'3106',F'014770',F'024',F'1059000'\n         DC    CL4'3108',F'014770',F'053',F'1059000'\n         DC    CL4'3109',F'014770',F'037',F'1059000'\n         DC    CL4'3110',F'022370',F'062',F'1059000'\n         DC    CL4'3111',F'014770',F'043',F'1059000'\n         DC    CL4'3113',F'013108',F'050',F'1059000'\n         DC    CL4'3114',F'014770',F'011',F'1059000'\n         DC    CL4'3115',F'006350',F'050',F'1059000'\n         DC    CL4'3117',F'014770',F'022',F'1059000'\n         DC    CL4'3118',F'014770',F'022',F'1059000'\n         DC    CL4'3122',F'014770',F'019',F'1059000'\n         DC    CL4'3123',F'018750',F'023',F'1059000'\n         DC    CL4'3124',F'009915',F'050',F'1059000'\n         DC    CL4'3125',F'022552',F'050',F'1059000'\n         DC    CL4'3130',F'025643',F'050',F'1059000'\n         DC    CL4'3132',F'014770',F'031',F'1059000'\n         DC    CL4'3133',F'014770',F'031',F'1059000'\n         DC    CL4'3134',F'014770',F'049',F'1059000'\n         DC    CL4'3139',F'014770',F'007',F'1059000'\n         DC    CL4'3144',F'014770',F'014',F'1059000'\n         DC    CL4'3146',F'058330',F'026',F'1059000'\n         DC    CL4'3147',F'058330',F'026',F'1059000'\n         DC    CL4'3148',F'201760',F'010',F'1059000'\n         DC    CL4'3149',F'025480',F'016',F'1059000'\n         DC    CL4'3150',F'014770',F'008',F'1059000'\n         DC    CL4'3152',F'014770',F'012',F'1059000'\n         DC    CL4'3154',F'014770',F'026',F'1059000'\n         DC    CL4'3155',F'014770',F'026',F'1059000'\n         DC    CL4'3159',F'014770',F'016',F'1059000'\n         DC    CL4'3160',F'014770',F'001',F'1059000'\n         DC    CL4'3161',F'014770',F'001',F'1059000'\n         DC    CL4'3165',F'014770',F'003',F'1059000'\n         DC    CL4'3166',F'014770',F'003',F'1059000'\n         DC    CL4'3169',F'014770',F'003',F'1059000'\n         DC    CL4'3170',F'014770',F'003',F'1059000'\n         DC    CL4'3174',F'014770',F'003',F'1059000'\n         DC    CL4'3175',F'014770',F'003',F'1059000'\n         DC    CL4'3176',F'014770',F'001',F'1059000'\n         DC    CL4'3177',F'014770',F'001',F'1059000'\n         DC    CL4'3187',F'014770',F'003',F'1059000'\n         DC    CL4'3188',F'014770',F'003',F'1059000'\n         DC    CL4'3189',F'014770',F'003',F'1059000'\n         DC    CL4'3190',F'014770',F'001',F'1059000'\n         DC    CL4'3192',F'014770',F'003',F'1059000'\n         DC    CL4'3193',F'014770',F'003',F'1059000'\n         DC    CL4'3194',F'014770',F'001',F'1059000'\n         DC    CL4'3195',F'014770',F'003',F'1059000'\n         DC    CL4'3196',F'014770',F'003',F'1059000'\n         DC    CL4'3197',F'014770',F'003',F'1059000'\n         DC    CL4'3200',F'014770',F'016',F'1059000'\n         DC    CL4'3201',F'050742',F'020',F'1059000'\n         DC    CL4'3202',F'014770',F'010',F'1059000'\n         DC    CL4'3203',F'032980',F'032',F'1059000'\n         DC    CL4'3204',F'013972',F'050',F'1059000'\n         DC    CL4'3209',F'014770',F'026',F'1059000'\n         DC    CL4'3210',F'014770',F'025',F'1059000'\n         DC    CL4'3239',F'014770',F'026',F'1059000'\n         DC    CL4'3240',F'014770',F'022',F'1059000'\n         DC    CL4'3255',F'014770',F'012',F'1059000'\n         DC    CL4'3256',F'018010',F'054',F'1059000'\n         DC    CL4'3257',F'014700',F'054',F'1059000'\n         DC    CL4'3259',F'030420',F'050',F'1059000'\n         DC    CL4'3262',F'014770',F'055',F'1059000'\n         DC    CL4'3265',F'014770',F'011',F'1059000'\n         DC    CL4'3266',F'014770',F'016',F'1059000'\n         DC    CL4'3268',F'014770',F'008',F'1059000'\n         DC    CL4'3276',F'014770',F'026',F'1059000'\n         DC    CL4'3278',F'014770',F'054',F'1059000'\n         DC    CL4'3280',F'014770',F'001',F'1059000'\n         DC    CL4'3286',F'014770',F'001',F'1059000'\n         DC    CL4'3287',F'014770',F'098',F'1059000'\n         DC    CL4'3289',F'014770',F'027',F'1059000'\n         DC    CL4'3290',F'014770',F'056',F'1059000'\n         DC    CL4'3291',F'014770',F'003',F'1059000'\n         DC    CL4'3292',F'014770',F'003',F'1059000'\n         DC    CL4'3293',F'014770',F'003',F'1059000'\n         DC    CL4'3294',F'014770',F'003',F'1059000'\n         DC    CL4'3296',F'014770',F'026',F'1059000'\n         DC    CL4'3297',F'014770',F'008',F'1059000'\n         DC    CL4'3314',F'042623',F'050',F'1059000'\n         DC    CL4'3318',F'014770',F'035',F'1059000'\n         DC    CL4'3319',F'014770',F'018',F'1059000'\n         DC    CL4'3320',F'012090',F'047',F'1059000'\n         DC    CL4'3321',F'014770',F'031',F'1059000'\n         DC    CL4'3330',F'014770',F'042',F'1059000'\n         DC    CL4'3374',F'005843',F'027',F'1059000'\n         DC    CL4'3401',F'014770',F'006',F'1059000'\n         DC    CL4'3402',F'004630',F'050',F'1059000'\n         DC    CL4'3407',F'014770',F'028',F'1059000'\n         DC    CL4'3408',F'014770',F'055',F'1059000'\n         DC    CL4'3411',F'042100',F'050',F'1059000'\n         DC    CL4'3414',F'003759',F'030',F'1059000'\n         DC    CL4'3416',F'014770',F'010',F'1059000'\n         DC    CL4'3419',F'118479',F'050',F'1059000'\n         DC    CL4'3420',F'014770',F'034',F'1059000'\n         DC    CL4'3421',F'014770',F'026',F'1059000'\n         DC    CL4'3422',F'014770',F'040',F'1059000'\n         DC    CL4'3423',F'131130',F'050',F'1059000'\n         DC    CL4'3425',F'014770',F'020',F'1059000'\n         DC    CL4'3426',F'014770',F'056',F'1059000'\n         DC    CL4'3428',F'014770',F'059',F'1059000'\n         DC    CL4'3429',F'014770',F'042',F'1059000'\n         DC    CL4'3430',F'014770',F'033',F'1059000'\n         DC    CL4'3479',F'014770',F'001',F'1059000'\n         DC    CL4'3482',F'014770',F'001',F'1059000'\n         DC    CL4'3483',F'014770',F'001',F'1059000'\n         DC    CL4'3500',F'012685',F'050',F'1059000'\n         DC    CL4'3502',F'055100',F'014',F'1059000'\n         DC    CL4'3506',F'014770',F'010',F'1059000'\n         DC    CL4'3507',F'014770',F'023',F'1059000'\n         DC    CL4'3511',F'045040',F'050',F'1059000'\n         DC    CL4'3512',F'046574',F'050',F'1059000'\n         DC    CL4'3513',F'014770',F'009',F'1059000'\n         DC    CL4'3516',F'014770',F'028',F'1059000'\n         DC    CL4'3519',F'014770',F'046',F'1059000'\n         DC    CL4'3524',F'014770',F'929',F'1059000'\n         DC    CL4'3563',F'014770',F'001',F'1059000'\n         DC    CL4'3566',F'014770',F'001',F'1059000'\n         DC    CL4'3600',F'009573',F'048',F'1059000'\n         DC    CL4'3601',F'062030',F'116',F'1059000'\n         DC    CL4'3604',F'014770',F'015',F'1059000'\n         DC    CL4'3639',F'049800',F'012',F'1059000'\n         DC    CL4'3800',F'014770',F'003',F'1059000'\n         DC    CL4'3801',F'014770',F'003',F'1059000'\n         DC    CL4'3802',F'075700',F'008',F'1059000'\n         DC    CL4'3815',F'014770',F'001',F'1059000'\n         DC    CL4'3902',F'009960',F'058',F'1059000'\n         DC    CL4'3903',F'028543',F'050',F'1059000'\n         DC    CL4'3904',F'040792',F'050',F'1059000'\n         DC    CL4'3910',F'020453',F'050',F'1059000'\n         DC    CL4'3912',F'014770',F'007',F'1059000'\n         DC    CL4'3917',F'006230',F'044',F'1059000'\n         DC    CL4'3918',F'008143',F'058',F'1059000'\n         DC    CL4'3919',F'004398',F'050',F'1059000'\n         DC    CL4'3920',F'003810',F'055',F'1059000'\n         DC    CL4'3921',F'014960',F'045',F'1059000'\n         DC    CL4'3922',F'023855',F'049',F'1059000'\n         DC    CL4'3923',F'034633',F'043',F'1059000'\n         DC    CL4'3924',F'034633',F'055',F'1059000'\n         DC    CL4'3925',F'034633',F'050',F'1059000'\n         DC    CL4'3926',F'034633',F'046',F'1059000'\n         DC    CL4'3931',F'014498',F'050',F'1059000'\n         DC    CL4'3932',F'002120',F'062',F'1059000'\n         DC    CL4'3933',F'006150',F'048',F'1059000'\n         DC    CL4'3937',F'015328',F'050',F'1059000'\n         DC    CL4'3940',F'014770',F'007',F'1059000'\n         DC    CL4'3941',F'012081',F'050',F'1059000'\n         DC    CL4'3942',F'008698',F'050',F'1059000'\n         DC    CL4'3943',F'007650',F'050',F'1059000'\n         DC    CL4'3949',F'002520',F'050',F'1059000'\n         DC    CL4'3950',F'007733',F'050',F'1059000'\n         DC    CL4'3952',F'001933',F'044',F'1059000'\n         DC    CL4'3953',F'003810',F'033',F'1059000'\n         DC    CL4'3954',F'014770',F'009',F'1059000'\n         DC    CL4'3955',F'002910',F'062',F'1059000'\n         DC    CL4'3956',F'003880',F'063',F'1059000'\n         DC    CL4'3999',F'014770',F'058',F'1059000'\n         DC    CL4'4444',F'014770',F'381',F'1059000'\n         DC    CL4'5060',F'014770',F'903',F'1059000'\n         DC    CL4'5068',F'014770',F'026',F'1059000'\n         DC    CL4'5069',F'014770',F'026',F'1059000'\n         DC    CL4'5203',F'014770',F'016',F'1059000'\n         DC    CL4'5555',F'014770',F'081',F'1059000'\n         DC    CL4'7777',F'014770',F'034',F'1059000'\n         DC    CL4'7868',F'014770',F'002',F'1059000'\n         DC    CL4'8888',F'014770',F'028',F'1059000'\n         DC    CL4'9999',F'014770',F'065',F'1059000'\n*\n         DC    CL4'DFLT',F'014770',F'050',F'1059000'\n         END\n++ SRC(JESCUU$) DISTLIB(ASRCLIB) .\n         MACRO\n         REGS\n         LCLA  &R\n.R       AIF   (&R EQ 16).END\nR&R      EQU   &R\n&R       SETA  &R+1\n         AGO   .R\n.END     MEND\n         TITLE 'CDU CALCULATION AND REPORTING PROGRAM'\n*        PRINT NOGEN\n         REGS\nJESCUU$  CSECT\n         SAVE  (14,12),,*         SAVE REGS\n         BALR  R10,R0             SET UP TRUE BASE REG\n         USING *,R10              SET UP ADDRESSABILITY\n         LA    R10,0(R10)         CLEAR HIGH ORDER BYTE FOR XA\n         LR    R7,R1              SAVE REG 1\n         LA    R2,CDUWSIZ         GET SIZE OF WORKAREA\n         A     R2,=F'7'           ROUND UP TO\n         N     R2,=X'FFFFFFF8'    A DOUBLE WORD\n       GETMAIN R,LV=(R2)          GETMAIN WORK AREA\n         LR    R11,R1             SAVE POINTER\n         USING CDUSAVE,R11        SET UP ADDRESSABILITY\n         LA    R1,CDUSAVE         CHAIN\n         ST    R1,8(R13)                THE\n         ST    R13,4(R1)                    SAVE\n         LR    R13,R1                            AREAS\n*\n         LA    R2,CUUPRINT        ADDRESS OF GETMAINED AREA TO INIT\n         LA    R3,CDUISIZ         GET SIZE OF AREA TO INITIALIZE\n         LA    R4,INITDCB         ADDRESS OF INITIALIZATION LINES\n         LR    R5,R3              SIZE OF SOURCE (SAME)\n         MVCL  R2,R4              INITIALIZE IT\n         OPEN  (CUUPRINT,OUTPUT),MF=(E,OPENPL)\n         L     R12,=V(CFACTOR)    GET CONSTANT CSECT ADDRESS\n         USING CFACTOR,R12        ESTABLISH ADDRESSABILITY\n*\n         LA    R8,DMAREA          POINT TO DMC HEADER\n         STCM  R8,7,DMPARM+1      SAVE IT BACK\n         LA    R8,SSAREA          POINT TO SSOB HEADER\n         STCM  R8,7,SSPARM+1      SAVE IT BACK\n*\n         L     R2,=A(SSCS$ASZ*25) GET SIZE OF ARRAY AREA\n         A     R2,=A(SSCSIZE+SSCS$PSZ+SSCS$ASZ) SSOB + WORK + 1 ZEROS\n         A     R2,=F'7'           ROUND UP TO\n         N     R2,=X'FFFFFFF8'    A DOUBLE WORD\n       GETMAIN R,LV=(R2)          GETMAIN WORK AREA\n*\n         STM   R2,R5,CDUSAVE+12   SAVE REGS\n*\n         ST    R1,STORLIST        SAVE IN STOR LIST\n         LR    R3,R2              GET SIZE OF AREA TO INITIALIZE\n         AR    R3,R1              ADD BEGINNING ADDRESS\n         BCTR  R3,R0              AND SUBTRACT 1\n         STCM  R3,7,STORLIST+5    AND SAVE DOWN\n*\n         LR    R3,R2              GET SIZE OF AREA TO INITIALIZE\n         LR    R2,R1              ADDRESS OF GETMAINED AREA TO INIT\n         LA    R4,=F'0'           ADDRESS OF DUMMY INIT DATA AREA\n         SR    R5,R5              FILL CHAR (00) AND SOURCE SIZE (0)\n         MVCL  R2,R4              INITIALIZE IT\n         LM    R2,R5,CDUSAVE+12   RESTORE REGS\n         LR    R3,R1              POINT TO SSOB PROPER\n         ST    R3,SSOBPTR         PUT IN HEADER\n         USING SSCSBGN,R3         ESTABLISH ADDRESSABILITY\n         LA    R8,SSCS$CAE        POINT TO FIRST ARRAY ENTRY\n         USING SSCS$CAE,R8        ESTABLISH ADDRESSABILITY\n*\n         MVI   SSCSFLGS,SSCS$CST  INDICATE EXTENDED STATUS\n*\n         L     R2,=A(SSCS$ASZ*25) GET SIZE OF ARRAY AREA\n         STH   R2,SSCSDIMP        SAVE DOWN SIZE OF WORK AREA\n         LR    R1,R8              POINT TO FIRST ARRAY ENTRY\n         AR    R1,R2              POINT TO END OF LAST ARRAY ENTRY\n         ST    R1,LASTONE         SAVE FOR END TEST\n         A     R2,=A(SSCSIZE+SSCS$PSZ+SSCS$ASZ) SSOB + WORK + 1 ZEROS\n         STH   R2,SSCSLEN         SAVE TOTAL LENGTH\n*\n         L     R1,0(R7)           GET PARM POINTER\n         LTR   R1,R1              ANY THERE ?\n         BZ    THISJOB            NO - DO THIS JOB\n         LH    R2,0(R1)           GET LENGTH\n         C     R2,=F'16'          IS IT 16 BYTES ?\n         BNE   THISJOB            NO - DON'T KNOW WHAT IT IS\n         MVC   SSCSJOBN(16),2(R1) MOVE IT IN\n         B     SVC109             AND GO DO IT\n*\nTHISJOB  L     R2,16              CVT POINTER\n         L     R2,0(R2)           TCB WORDS POINTER\n         L     R2,4(R2)           CURRENT TCB POINTER\n         L     R2,X'B4'(R2)       ADDRESS OF JSCB\n         L     R1,X'104'(R2)      JCT-10 POINTER\n         MVC   SSCSJOBN(8),24(R1) MOVE IN CURRENT JOBNAME FROM JCT\n         L     R2,X'13C'(R2)      ADDRESS OF SSIB\n         MVC   SSCSJOBI(4),=CL4'JOB0' FIRST PART\n         MVC   SSCSJOBI+4(4),16(R2) MOVE IN CURRENT JOB NUMBER\n         L     R2,X'20'(R2)       ADDRESS OF MEME\n*\n         L     R15,16             CVT POINTER\n         TM    X'74'(R15),X'80'   IS THIS MVS XA ?\n         BZ    *+10               NO - DON'T NEED 31 BIT MODE\n         L     R15,=A(X'80000000'+MODX31) SET RETURN ADDRESS\n         DC    X'0B0F'            (BSM   R0,R12) SET 31 BIT MODE\nMODX31   EQU   *\n*\n         L     R1,X'120'(R2)      ACB ADDR FROM MEMSACB FLD IN IATYMEM\n         LTR   R1,R1              IS THERE ONE THERE?\n         BZ    RETM24             NO - RETURN\n         L     R2,X'124'(R2)      DEB ADDR FROM MEMSDEB FLD IN IATYMEM\n         L     R2,X'08'(R2)       DSS ADDR FROM DEBIRBAD FLD IN IEZDEB\n         CLC   0(4,R2),=CL4'DSS ' IS THIS A DSS? (JES3 1.3.4)\n         BE    DSSPTR             YES GO GET DSB POINTER\n         CLC   0(4,R2),=CL4'DSB ' IS THIS A DSB? (JES3 2.1.5)\n         BE    DSSPTR+4           YES - SKIP DSS\n         B     RETM24             NO - I DONT KNOW WHO THIS IS\nDSSPTR   L     R2,X'04'(R2)       DSB ADDR FROM DSSDSB FLD IN IATYDSS\n         L     R2,X'24'(R2)       DMC ADDR FROM DSBCDMC FLD IN IATYDSB\n         ST    R2,DMADDR          SAVE IT IN PARM LIST\n         LA    R1,DMPARM          LOAD ADDRESS OF DMPARM\n         LA    R15,16             ESR CODE FOR DMC GET\n         SVC   109                ESR SVC\n*\nRETM24   L     R15,16             CVT POINTER\n         TM    X'74'(R15),X'80'   IS THIS MVS XA ?\n         BZ    *+10               NO - DON'T NEED 31 BIT MODE\n         LA    R15,MODX24         SET RETURN ADDRESS\n         DC    X'0B0F'            (BSM   R0,R12) SET 24 BIT MODE\nMODX24   EQU   *\n*\nSVC109   LA    R1,SSPARM          LOAD ADDRESS OF SSOB\n         LA    R15,16             ESR CODE FOR IEFSSREQ\n         SVC   109                ESR SVC\n*\n*        STM   R2,R5,CDUSAVE+12   SAVE REGS\n*        LR    R5,R15             SAVE R15\n*        OPEN  (SNAPDUMP,OUTPUT),MF=(E,SNAPPL)\n*        LR    R15,R5             RESTORE R15\n*        TM    SNAPDUMP+48,X'10'  DID IT OPEN ?\n*        BNO   SKIPSNAP           NO SKIP ALL THIS\n*        LA    R2,SNAPDUMP        POINT TO DCB\n*        LA    R3,STORLIST        POINT TO LIST\n*        SNAP  DCB=(2),LIST=(3),MF=(E,SNAPLIST)\n*        CLOSE MF=(E,SNAPPL)\n*        LR    R15,R5             RESTORE R15\n*KIPSNAP LM    R2,R5,CDUSAVE+12   RESTORE REGS\n*\n         LTR   R15,R15            TEST RETURN CODE\n         BNZ   DEFAULT            NOT ZERO - SSOB ERROR - NO DATA\n         CLC   SSOBRC(4),=F'0'    SSOB RETURN CODE ALSO ZERO ?\n         BE    SSOB1              YES - GO PROCESS\n*\nDEFAULT  MVC   SSOBRC(4),=F'0'    ZERO OUT RETURN CODE\n         MVC   SSCS$JDS(4),=F'0'  CLEAR JDS POINTER JUST IN CASE\n         MVI   SSCS$CAE,X'00'     ZERO OUT\n         MVC   SSCS$CAE+1(255),SSCS$CAE    AREA\n         MVC   SSCS$TYP,=CL8'PRT     ' DEFAULT\n         MVC   SSCS$FRM,=CL4'3920' DEFAULT\n         MVI   SSCS$CPY,1         DEFAULT\n         MVC   SSCS$LNC,=F'10000' NO - MUST BE BATCH SO CHANGE TO 10K\n*\nSSOB1    CLC   LINESUM(4),=F'0'   FIRST TIME THROUGH\n         BNE   SSOBQ              YES - SKIP HEADINGS\n         MVC   LINEXX+00(46),SSCS$FIL+26\n*\n*        ABORT PRINTING CDU NUMBERS\n*\n         MVC   LINEXX+73(22),LINEXX+95\n         MVI   LINEXX+95,C' '\n         MVC   LINEXX+96(21),LINEXX+95\n*\n         PUT   CUUPRINT,LINEPX\n         MVI   LINEXX,C' '        BLANK\n         MVC   LINEXX+1(120),LINEXX      OUT LINE\n         PUT   CUUPRINT,LINE00\n         PUT   CUUPRINT,LINE01\n         PUT   CUUPRINT,LINE02\nSSOBQ    L     R1,LASTONE         GET POINTER TO LAST (ZERO) ARRAY\n         CLC   SSCS$CAE(SSCS$ASZ),0(R1) IS THIS ONE EMPTY ?\n         BE    SPOOLED            YES - GET OUT\n         CLC   SSCS$CAE(SSCS$ASZ),SSCS$FIL OR DUPLICATE MESSAGE ?\n         BE    SPOOLED            YES - GET OUT\n*\n         MVC   LINEXX+00(8),SSCS$STP\n         MVC   LINEXX+09(8),SSCS$DDN\n         MVC   LINEXX+18(8),SSCS$DST\n         MVC   LINEXX+27(4),SSCS$TYP\n         MVC   LINEXX+32(4),SSCS$FRM\n         MVC   LINEXX+37(4),SSCS$CAR\n         MVC   LINEXX+42(3),SSCS$UCS\n         MVC   LINEXX+47(1),SSCS$CLS\n*\n         CLC   SSCS$DDN(8),=CL8'SYSMSG  '\n         BNE   NORMALC\n         L     R1,DMC+72          GET SYSMSG LINECOUNT FROM OUR DMC\n         LTR   R1,R1              WAS IT ZERO ?\n         BZ    NORMALC            YES - USE SSOB COUNT\n         LA    R1,12(R1)          12 LINES FOR US\n         ST    R1,SSCS$LNC        STORE SYSMSG LINECOUNT\n*\nNORMALC  L     R1,SSCS$LNC        GET LINECOUNT FROM SSOB\n         CVD   R1,WORK            CVD\n         L     R6,LINESUM         GET SUM\n         AR    R6,R1              ADD SUM\n         ST    R6,LINESUM         AND SAVE IT\n         MVC   LINEXX+48(10),=X'40206B2020206B202120'\n         ED    LINEXX+48(10),WORK+4\n*\n         L     R6,=V(FORMTAB)     GET ADDRESS OF FORM CHARGE TABLE\nFLOOP    CLC   0(4,R6),=CL4'DFLT' END OF LIST ?\n         BE    FHIT               YES - GO USE IT\n         CLC   0(4,R6),SSCS$FRM   THIS OUR FORM?\n         BE    FHIT               YES - GO USE IT\n         LA    R6,16(R6)          NEXT ONE\n         B     FLOOP              AROUND\nFHIT     L     R7,SSCS$PGS        GET PAGE COUNT\n         LTR   R7,R7              ANYTHING?\n         B     PAGCALC            ALWAYS USE TABLE LINECOUNT (LIKE R2)\n         BZ    PAGCALC            NO - USE LINECOUNT\n         LR    R1,R7              PUT IN REG 1\n         B     FRMCALC            GO COMPUT CDUS\nPAGCALC  SR    R0,R0              CLEAR REG\n         A     R1,8(R6)           ADD LINES/PAGE FOR LAST PAGE\n         S     R1,=F'1'           SUBTRACT ONE\n         D     R0,8(R6)           DIVIDE BY LINES/PAGE\nFRMCALC  SR    R7,R7              CLEAR REG\n         IC    R7,SSCS$CPY        GET COPY COUNT\n         MR    R0,R7              AND MULTIPLY\n         L     R9,PAGESUM         GET SUM\n         AR    R9,R1              ADD SUM\n         ST    R9,PAGESUM         AND SAVE IT\n         CVD   R1,WORK            CVD\n         MVC   LINEXX+60(10),=X'40206B2020206B202120'\n         ED    LINEXX+60(10),WORK+4\n*\n         SR    R9,R9              CLEAR REG\n         IC    R9,SSCS$CPY        GET COPY COUNT\n         CVD   R9,WORK            CVD\n         MVC   LINEXX+58(4),=X'40202120'\n         ED    LINEXX+58(4),WORK+6\n*\n         CLI   SSCS$CLS,C'V'      SPECIAL TEST FOR VPS\n         BE    NOPAGES            YES - WE CAN NOT YET BILL FOR VPS\n         CLC   SSCS$DST,=CL8'AUTOCOM ' MICROFICHE ?\n         BE    NOPAGES            YES - WE DONT CHARGE PAGES FOR FICHE\n         CLC   SSCS$DST(3),=C'RMT' REMOTE DESTINATION ?\n         BNE   SIPAGES            NO - PROBABLY CHARGED FOR\n         CLC   SSCS$DST+3(2),=C'05' SPECIAL CHARGED-FOR REMOTE\n         BE    SIPAGES            YES - GO COUNT THIS ONE\n         CLC   SSCS$DST+3(2),=C'27' SPECIAL CHARGED-FOR REMOTE\n         BE    SIPAGES            YES - GO COUNT THIS ONE\n         CLC   SSCS$DST+3(2),=C'29' SPECIAL CHARGED-FOR REMOTE\n         BE    SIPAGES            YES - GO COUNT THIS ONE\n         CLC   SSCS$DST+3(2),=C'31' SPECIAL CHARGED-FOR REMOTE\n         BE    SIPAGES            YES - GO COUNT THIS ONE\n         CLC   SSCS$DST+3(2),=C'34' SPECIAL CHARGED-FOR REMOTE\n         BE    SIPAGES            YES - GO COUNT THIS ONE\n         CLC   SSCS$DST+3(2),=C'66' SPECIAL CHARGED-FOR REMOTE\n         BE    SIPAGES            YES - GO COUNT THIS ONE\n         CLC   SSCS$DST+3(2),=C'72' SPECIAL CHARGED-FOR REMOTE\n         BE    SIPAGES            YES - GO COUNT THIS ONE\n         CLC   SSCS$DST+3(2),=C'73' SPECIAL CHARGED-FOR REMOTE\n         BE    SIPAGES            YES - GO COUNT THIS ONE\n         CLC   SSCS$DST+3(2),=C'77' SPECIAL CHARGED-FOR REMOTE\n         BNE   NOPAGES            NO - SKIP COUNTING\nNOPAGES  MVC   LINEXX+100(9),=X'4040404040F04BF0F0'\n         MVC   LINEXX+78(7),=X'4040F04BF0F0F0'\n         B     EXPAGES\n*\nSIPAGES  M     R0,12(R6)          MULTIPLY PAGECOUNT BY TOTAL CHARGE\n         LA    R14,FORMS          POINT TO FORMS\n         BAL   R9,DOLLARS         CONVERT TO DOLLARS\n         MVC   LINEXX+100(9),=X'4020202021204B2020'\n         ED    LINEXX+100(9),WORK+4\n         AP    DOLSUM,WORK        ADD TO TOTAL\n         CVD   R1,WORK            CONVERT CDUS TO DECIMAL\n         MVC   LINEXX+78(7),=X'4021204B202020'\n         ED    LINEXX+78(7),WORK+5\n         AP    CDUSUM,WORK        ADD TO TOTAL\n*\nEXPAGES  CLC   SSCS$DDN(8),=CL8'JESMSG  '  DONT\n         BE    NORMALX                         COUNT\n         CLC   SSCS$DDN(8),=CL8'JESJCL  '           THESE\n         BE    NORMALX                                   IN\n         CLC   SSCS$DDN(8),=CL8'SYSMSG  '      LINES SPOOLED\n         BE    NORMALX\n         LA    R7,1(R7)           ADD ONE FOR COPY SPOOLED\nNORMALX  L     R1,SSCS$LNC        GET LINECOUNT\n         MR    R0,R7              GET TOTAL LINES PRINTED\n         L     R15,PRINT          GET TOTAL SO FAR\n         AR    R15,R1             ADD THIS ONE\n         ST    R15,PRINT          SAVE IT BACK\n         D     R0,=F'10'          SCALE TO 10K LINES\n         C     R0,=F'05'          MORE THAN 1/2\n         BNH   *+8                NO - SKIP ADDING\n         A     R1,=F'1'           ADD ONE\n*\n         CLI   SSCS$CLS,C'V'      SPECIAL TEST FOR VPS\n         BE    NOLINES            YES - WE CAN NOT YET BILL FOR VPS\n         CLC   SSCS$DST(3),=C'RMT' REMOTE DESTINATION ?\n         BNE   SILINES            NO - PROBABLY CHARGED FOR\n         CLC   SSCS$DST+3(2),=C'05' SPECIAL CHARGED-FOR REMOTE\n         BE    SILINES            YES - GO COUNT THIS ONE\n         CLC   SSCS$DST+3(2),=C'27' SPECIAL CHARGED-FOR REMOTE\n         BE    SILINES            YES - GO COUNT THIS ONE\n         CLC   SSCS$DST+3(2),=C'29' SPECIAL CHARGED-FOR REMOTE\n         BE    SILINES            YES - GO COUNT THIS ONE\n         CLC   SSCS$DST+3(2),=C'31' SPECIAL CHARGED-FOR REMOTE\n         BE    SILINES            YES - GO COUNT THIS ONE\n         CLC   SSCS$DST+3(2),=C'34' SPECIAL CHARGED-FOR REMOTE\n         BE    SILINES            YES - GO COUNT THIS ONE\n         CLC   SSCS$DST+3(2),=C'66' SPECIAL CHARGED-FOR REMOTE\n         BE    SILINES            YES - GO COUNT THIS ONE\n         CLC   SSCS$DST+3(2),=C'72' SPECIAL CHARGED-FOR REMOTE\n         BE    SILINES            YES - GO COUNT THIS ONE\n         CLC   SSCS$DST+3(2),=C'73' SPECIAL CHARGED-FOR REMOTE\n         BE    SILINES            YES - GO COUNT THIS ONE\n         CLC   SSCS$DST+3(2),=C'77' SPECIAL CHARGED-FOR REMOTE\n         BNE   NOLINES            NO - SKIP COUNTING\nNOLINES  MVC   LINEXX+92(9),=X'4040404040F04BF0F0'\n         MVC   LINEXX+71(7),=X'4040F04BF0F0F0'\n         B     EXLINES\n*\nSILINES  M     R0,CFACT1G         MULTIPLY BY CFACTOR\n         LA    R14,PRT10          DUMMY POINTER\n         BAL   R9,DOLLARS         CONVERT TO DOLLARS\n         MVC   LINEXX+92(9),=X'4020202021204B2020'\n         ED    LINEXX+92(9),WORK+4\n         AP    DOLSUM,WORK        ADD TO TOTAL\n         CVD   R1,WORK            CONVERT CDUS TO DECIMAL\n         MVC   LINEXX+71(7),=X'4021204B202020'\n         ED    LINEXX+71(7),WORK+5\n         AP    CDUSUM,WORK        ADD TO TOTAL\n*\nEXLINES  MVC   WORK(9),=X'4020202021204B2020'\n         ED    WORK(9),DOLSUM+4\n         MVC   LINEXX+109(8),WORK+1\n         AP    DOLTOT,DOLSUM      ADD TO TOTAL\n         MVC   DOLSUM,=PL8'0'     THEN CLEAR\n         MVC   WORK(9),=X'40202021204B202020'\n         ED    WORK(9),CDUSUM+4\n         MVC   LINEXX+85(7),WORK+2\n         AP    CDUTOT,CDUSUM      ADD TO TOTAL\n         MVC   CDUSUM,=PL8'0'     THEN CLEAR\n*\n*        ABORT PRINTING CDU NUMBERS\n*\n         MVC   LINEXX+73(22),LINEXX+95\n         MVI   LINEXX+95,C' '\n         MVC   LINEXX+96(21),LINEXX+95\n*\n         PUT   CUUPRINT,LINEPX\n         LA    R8,SSCS$ASZ(R8)    POINT TO NEXT ARRAY ENTRY\n         B     SSOBQ              GO LOOK FOR ANOTHER ONE\n*\nSPOOLED  CLC   SSCS$JDS(4),=F'0'  LAST JDS POINTER THERE ?\n         BE    FREEJES            NO - FREE GETMAINED AREA\n*\n         L     R1,SSCS$JDS        PICK UP JDS POINTER\n         STM   R2,R5,CDUSAVE+12   SAVE REGS\n         LA    R2,SSCSDIMR        POINT TO BEGINNING OF RETURNED AREA\n         LH    R3,SSCSDIMP        GET SIZE OF ARRAY AREA\n         A     R3,=A(SSCSELSZ+SSCS$PSZ+SSCS$ASZ+2) ARRAY+WORK+1 ZEROS\n         LA    R4,=F'0'           ADDRESS OF DUMMY INIT DATA AREA\n         SR    R5,R5              FILL CHAR (00) AND SOURCE SIZE (0)\n         MVCL  R2,R4              INITIALIZE IT\n         LM    R2,R5,CDUSAVE+12   RESTORE REGS\n         ST    R1,SSCS$JDS        SAVE JDS POINTER\n         LA    R8,SSCSIZE+SSCS$PSZ(,R3) FIRST ARRAY ENTRY\n         B     SVC109             AND GO GET ANOTHER LOAD\n*\nFREEJES  L     R1,SSOBPTR         ADDRESS OF ARRAY\n         LH    R2,SSCSLEN         SIZE OF WORK AREA\n         A     R2,=F'7'           ROUND UP TO\n         N     R2,=X'FFFFFFF8'    A DOUBLE WORD\n      FREEMAIN R,LV=(R2),A=(R1)   FREEMAIN WORK AREA\n         DROP  R3,R8              RELEASE REGS\n         MVI   LINEXX,C' '        BLANK\n         MVC   LINEXX+1(120),LINEXX      OUT LINE\n         L     R1,LINESUM         GET SUM\n         CVD   R1,WORK            CVD\n         MVC   LINEXX+48(10),=X'40206B2020206B202120'\n         ED    LINEXX+48(10),WORK+4\n*\n         L     R1,PAGESUM         GET SUM\n         CVD   R1,WORK            CVD\n         MVC   LINEXX+60(10),=X'40206B2020206B202120'\n         ED    LINEXX+60(10),WORK+4\n*\n         L     R15,FORMS          POINT TO FORMS\n         BAL   R9,CENTS           CONVERT TO DOLLARS\n         MVC   LINEXX+100(9),=X'4020202021204B2020'\n         ED    LINEXX+100(9),WORK+4\n         CVD   R1,WORK            CONVERT CDUS TO DECIMAL\n         MVC   LINEXX+78(7),=X'4021204B202020'\n         ED    LINEXX+78(7),WORK+5\n*\n         SR    R0,R0              CLEAR REG\n         L     R1,PRINT           POINT TO TRUE SPOOL COUNT\n         D     R0,=F'10'          SCALE TO 10K LINES\n         C     R0,=F'05'          MORE THAN 1/2\n         BNH   *+8                NO - SKIP ADDING\n         A     R1,=F'1'           ADD ONE\n         M     R0,CFACT1G         MULTIPLY BY CFACTOR\n         LA    R14,PRT10          DUMMY POINTER\n         BAL   R9,DOLLARS         CONVERT TO DOLLARS\n         MVC   LINEXX+92(9),=X'4020202021204B2020'\n         ED    LINEXX+92(9),WORK+4\n         CVD   R1,WORK            CONVERT CDUS TO DECIMAL\n         MVC   LINEXX+71(7),=X'4021204B202020'\n         ED    LINEXX+71(7),WORK+5\n*\n         MVC   WORK(9),=X'4020202021204B2020'\n         ED    WORK(9),DOLTOT+4\n         MVC   LINEXX+109(8),WORK+1\n         MVC   WORK(9),=X'40202021204B202020'\n         ED    WORK(9),CDUTOT+4\n         MVC   LINEXX+85(7),WORK+2\n*\n         PUT   CUUPRINT,LINE09\n*\n*        ABORT PRINTING CDU NUMBERS\n*\n         MVC   LINEXX+73(22),LINEXX+95\n         MVI   LINEXX+95,C' '\n         MVC   LINEXX+96(21),LINEXX+95\n*\n         PUT   CUUPRINT,LINEPX\n         CLOSE MF=(E,OPENPL)\n         LA    R2,CDUWSIZ         GET SIZE OF WORKAREA\n         A     R2,=F'7'           ROUND UP TO\n         N     R2,=X'FFFFFFF8'    A DOUBLE WORD\n         L     R13,4(R13)         BACK CHAIN SAVE AREAS\n      FREEMAIN R,LV=(R2),A=(R11)  FREEMAIN WORK AREA\n        RETURN (14,12),RC=0       RETURN\n*\nDOLLARS  D     R0,=F'1000000'     GET CDUS * 1000\n         C     R0,=F'500000'      MORE THAN 1/2 ?\n         BNH   *+8                NO - SKIP ADDING\n         A     R1,=F'1'           ADD ONE\n         LR    R15,R1             SAVE REG\n         A     R1,0(R14)          ADD THIS ONE\n         ST    R1,0(R14)          SAVE IT BACK\nCENTS    LR    R1,R15             RESTORE REG\n         M     R0,CDURATE         MULTIPLY BY $/CDU * 100\n         D     R0,=F'1000'        GET DOLLARS\n         C     R0,=F'500'         MORE THAN 1/2 ?\n         BNH   *+8                NO - SKIP ADDING\n         A     R1,=F'1'           ADD ONE\n         CVD   R1,WORK            CVD\n         LR    R1,R15             RESTORE REG\n         BR    R9                 RETURN\n         EJECT\nLINE00   DC    CL01' '\n         DC    CL40'                                        '\n         DC    CL40'                                   1G   '\n         DC    CL40'   1P    TOTAL                          '\nLINE01   DC    CL01' '\n         DC    CL40'STEPNAME  DDNAME    DEST   TYPE FORM FCB'\n         DC    CL40'  UCS  C LINECOUNT CPY  PAGES   DOLLARS '\n         DC    CL40'DOLLARS DOLLARS                         '\nLINE02   DC    CL01' '\n         DC    CL40'-------- -------- -------- ---- ---- ---'\n         DC    CL40'- ---- - --------- --- -------  ------- '\n         DC    CL40'------- -------                         '\nLINE09   DC    CL01' '\n         DC    CL40'                                        '\n         DC    CL40'         ---------     -------  ------- '\n         DC    CL40'------- -------                         '\n         LTORG\n         EJECT\n         PRINT GEN\nSSOB     DSECT\n      IEFJSSOB CS,CONTIG=NO       SSOB HEADER + NON-CONTIG SSOB\n         EJECT\nCDUWORK  DSECT\nCDUSAVE  DS    18F                SAVE AREA\nWORK     DS    2D\nCUUPRINT DS    0D\n         DCB   DDNAME=CUUPRINT,MACRF=PM,DSORG=PS,                      X\n               RECFM=FA,LRECL=121,BLKSIZE=121\nSNAPDUMP DCB   DDNAME=SNAPDUMP,MACRF=(W),DSORG=PS,                     X\n               RECFM=VBA,LRECL=125,BLKSIZE=1632\nSNAPLIST SNAP  MF=L\n         DS    0D\nSTORLIST DS    F\n         DS    XL1,AL3\nDMPARM   DS    XL1,AL3            ADDRESS OF DMC HEADER\nDMAREA   DS    CL4                CONTROL BLOCK IDENTIFIER\nDMADDR   DS    AL4                CONTROL BLOCK ADDRESS\nDMC      DS    XL84               DMC ITSELF\nSSPARM   DS    XL1,AL3            ADDRESS OF SSOB HEADER\nSSAREA   DS    CL4                CONTROL BLOCK IDENTIFIER\n         DS    AL2                LENGTH OF SSOB HEADER\n         DS    AL2                FUNCTION ID\n         DS    AL4                ADDRESS OF SSIB OR ZERO\nSSOBRC   DS    F                  RETURN CODE FROM SUBSYSTEM\nSSOBPTR  DS    AL4                FUNCTION DEPENDENT AREA POINTER\n         DS    F                  SAVE RETURN ADDRESS FOR 31 BIT CALL\n         DS    CL4                RESERVED\nOPENPL   DS    F                  OPEN PARM LIST\nSNAPPL   DS    F                  OPEN PARM LIST\nLASTONE  DS    F\nLINESUM  DS    F\nPAGESUM  DS    F\nPRINT    DS    F\nPRT10    DS    F\nFORMS    DS    F\nCDUSUM   DS    PL8\nDOLSUM   DS    PL8\nCDUTOT   DS    PL8\nDOLTOT   DS    PL8\nLINEPX   DS    CL1\nLINEXX   DS    CL120\nCDUWSIZ  EQU   *-CDUSAVE          LENGTH OF WORK AREA\nCDUISIZ  EQU   *-CUUPRINT         LENGTH TO INITIALIZE\n         EJECT\nCFACTOR  DSECT\n*\nEYECATCH DS    CL12               EYECATCHER FOR ZAPING\nCDURATE  DS    F                  CENTS PER CDU (JAN 1987)\n*\nSTANDSRM DS    F                  STANDARD CPU SRM CONSTANT * 10\n*\nBYTTGET  DS    F                  \"AVERAGE\" TERM TGET BYTES\nBYTTPUT  DS    F                  \"AVERAGE\" TERM TPUT BYTES\n*\nCFACT1A  DS    F                  NET C1A * 1000000\nCFACT1B  DS    F                  NET C1B * 1000000\nCFACT1C  DS    F                  NET C1C * 1000000\nCFACT1D  DS    F                  NET C1D * 1000000\nCFACT1F  DS    F                  NET C1F * 1000000\nCFACT1G  DS    F                  NET C1G * 1000000\nCFACT1J  DS    F                  NET C1J * 1000000\nCFACT1M  DS    F                  NET C1M * 1000000\nCFACT1P  DS    F                  NET C1P * 1000000\n         EJECT\nJESCUU$  CSECT\nINITDCB  DS    0D\n         DCB   DDNAME=CUUPRINT,MACRF=PM,DSORG=PS,                      X\n               RECFM=FA,LRECL=121,BLKSIZE=121\n         DCB   DDNAME=SNAPDUMP,MACRF=(W),DSORG=PS,                     X\n               RECFM=VBA,LRECL=125,BLKSIZE=1632\n         SNAP  MF=L\n         DS    0D\n         DC    F'0'\n         DC    XL1'80',AL3(0)\n         DC    X'80',AL3(0)       ADDRESS OF DMC HEADER\n         DC    C'DMC '            CONTROL BLOCK IDENTIFIER\n         DC    A(0)               ADDRESS OF DMC\n         DC    XL84'00'           DMC ITSELF\n         DC    X'80',AL3(0)       ADDRESS OF SSOB HEADER\n         DC    C'SSOB'            CONTROL BLOCK IDENTIFIER\n         DC    AL2(SSOBHSIZ)      LENGTH OF SSOB HEADER\n         DC    AL2(03)            FUNCTION ID (JOB STATUS - SPECIAL)\n         DC    A(0)               ADDRESS OF SSIB OR ZERO\n         DC    F'0'               RETURN CODE FROM SUBSYSTEM\n         DC    A(0)               FUNCTION DEPENDENT AREA POINTER\n         DC    F'0'               SAVE RETURN ADDRESS FOR 31 BIT CALL\n         DC    XL4'00000000'      RESERVED\n         DC    XL4'80000000'      OPEN PARM LIST\n         DC    XL4'80000000'      OPEN SNAP LIST\n         DC    F'0'\n         DC    F'0'\n         DC    F'0'\n         DC    F'0'\n         DC    F'0'\n         DC    F'0'\n         DC    PL8'0'\n         DC    PL8'0'\n         DC    PL8'0'\n         DC    PL8'0'\n         DC    CL121' '\n         END\n++ SRC(JOBCUU$) DISTLIB(ASRCLIB) .\n         MACRO\n         REGS\n         LCLA  &R\n.R       AIF   (&R EQ 16).END\nR&R      EQU   &R\n&R       SETA  &R+1\n         AGO   .R\n.END     MEND\n         TITLE 'CDU CALCULATION AND REPORTING PROGRAM'\n         PRINT NOGEN\nJOBCUU$  CSECT\n***********************************************************************\n*                                                                     *\n*        JOBCUU$:                                                     *\n*                                                                     *\n*        THIS PROGRAM COMPUTES THE ESTIMATED COST OF THE CURRENT      *\n*        JOB STEP.  IT OBTAINS DATA FROM THE CURRENT ASCB AND TCT.    *\n*        IT ALSO OBTAINS SYSOUT DATA FROM JES3 USING THE \"STATUS\"     *\n*        SUB SYSTEM INTERFACE (REQUIRES MODIFICATION TO IATGRWQ TO    *\n*        RUN THE JDS CHAIN AND RETURN REQUSTED DATA).  OUTPUT IS      *\n*        WRITTEN TO DDNAME OF CUUPRINT OR IF IN FOREGROUND TPUTS      *\n*        ARE USED TO WRITE OUTPUT LINES TO THE TERMINAL.              *\n*                                                                     *\n***********************************************************************\n         REGS\n         ENTRY PRTCUU$\n         ENTRY IEFCUU$\n         WXTRN IEFYS\n         USING *,R15\n         SAVE  (14,12),,*         SAVE REGS\n         SR    R8,R8              SET UP FLAG REG (NON-IEFACTRT)\n         SR    R9,R9              SET UP FLAG REG (NON-TSO-JOB)\n         B     SETUP              GET ON WITH IT\n*\n         USING *,R15\nPRTCUU$  SAVE  (14,12),,*         SAVE REGS\n***********************************************************************\n*                                                                     *\n*        PRTCUU$:                                                     *\n*                                                                     *\n*        SAME AS JOBCUU$ EXCEPT THAT IN FOREGROUND OUTPUT WILL BE     *\n*        WRITTEN TO DDNAME CUUPRINT.  IF CUUPRINT CANNOT BE OPENED    *\n*        (AND IT IS IN FOREGROUND) THEN TPUTS ARE USED INSTEAD.       *\n*                                                                     *\n***********************************************************************\n         SR    R8,R8              SET UP FLAG REG (NON-IEFACTRT)\n         ICM   R9,15,=X'000000FF' SET UP FLAG REG (TSO-JOB)\n         B     SETUP              GET ON WITH IT\n*\n         USING *,R15\nIEFCUU$  SAVE  (14,12),,*         SAVE REGS\n***********************************************************************\n*                                                                     *\n*        IEFCUU$:                                                     *\n*                                                                     *\n*        THIS PROGRAM COMPUTES THE ESTIMATED COST OF THE CURRENT      *\n*        JOB STEP. IT IS CALLED FROM IEFACTRT AND OBTAINS DATA FROM   *\n*        THE TYPE 30 SUBTYPE 4 SMF RECORD CURRENTLY BEING PROCESSED.  *\n*        A WORK AREA IS GETMAINED AND DATA FROM ALL SUBTYPE 4 REC-    *\n*        ORDS IS ACCUMULATED AND A JOB TOTAL IS WRITTEN OUT WHEN      *\n*        A SUBTYPE 5 RECORD IS ENCOUNTERED.  FOR ALL SUBTYPE 5S IT    *\n*        ALSO OBTAINS SYSOUT DATA FROM JES3 USING THE \"STATUS\"        *\n*        SUB SYSTEM INTERFACE (REQUIRES MODIFICATION TO IATGRWQ TO    *\n*        RUN THE JDS CHAIN AND RETURN REQUSTED DATA).  OUTPUT IS      *\n*        ALWAYS WRITTEN TO TO THE JOBS SYSMSG FILE.                   *\n*                                                                     *\n***********************************************************************\n         ICM   R8,15,=X'000000FF' SET UP FLAG REG (IEFACTRT)\n         SR    R9,R9              SET UP FLAG REG (NON-TSO-JOB)\n         DROP  R15                DROP ENTRY REG\n*\nSETUP    BALR  R10,R0             SET UP BASE REG\n         USING *,R10              SET UP ADDRESSABILITY\n         LA    R10,0(R10)         CLEAR HIGH ORDER BYTE FOR XA\n         LR    R7,R1              SAVE REG 1\n         LA    R2,CDUWSIZ         GET SIZE OF WORKAREA\n         A     R2,=F'7'           ROUND UP TO\n         N     R2,=X'FFFFFFF8'    A DOUBLE WORD\n       GETMAIN R,LV=(R2)          GETMAIN WORK AREA\n         LR    R11,R1             SAVE POINTER\n         USING CDUSAVE,R11        SET UP ADDRESSABILITY\n         LA    R1,CDUSAVE         CHAIN\n         ST    R1,8(R13)                THE\n         ST    R13,4(R1)                    SAVE\n         LR    R13,R1                            AREAS\n*\n         ST    R7,SAV1            SAVE POINTER TO PARM AREA\n         ST    R12,SAV12          SAVE R12\n         L     R12,=V(CFACTOR)    GET ADDRESS OF CFACTOR CSECT\n         USING CFACTOR,R12        SET UP ADDRESSABILITY\n         STC   R8,IEFFLAG         SAVE IEFACTRT FLAG\n         STC   R9,TJBFLAG         SAVE TSO-JOB FLAG\n         MVI   BATLINE+110,C'*'   INITIALIZE END OF LINE\n         LA    R2,CUUPRINT        ADDRESS OF GETMAINED AREA TO INIT\n         LA    R3,CDUISIZ         GET SIZE OF AREA TO INITIALIZE\n         LA    R4,INITDCB         ADDRESS OF INITIALIZATION LINES\n         LR    R5,R3              SIZE OF SOURCE (SAME)\n         MVCL  R2,R4              INITIALIZE IT\n*\n         L     R2,16              CVT POINTER\n         L     R3,X'25C'(R2)      SRM CONTROL TABLE ADDRESS\n         L     R4,0(R2)           TCB WORDS\n         L     R4,12(R4)          CURRENT ASCB\n         L     R4,X'90'(R4)       OUCB POINTER\n         L     R1,=F'16000000'    SET CONSTANT\n         M     R0,=F'10000'       SCALE FACTOR\n*\n         TM    X'74'(R2),X'80'    IS THIS MVS XA ?\n         BZ    *+10               NO - DON'T NEED 31 BIT MODE\n         L     R15,=A(X'80000000'+MODE31) SET RETURN ADDRESS\n         DC    X'0B0F'            (BSM   R0,R15) SET 31 BIT MODE\n*\nMODE31   L     R5,X'40'(R3)       GET SRM CPU CONSTANT\n         L     R6,X'10'(R4)       GET OUCB TYPE FIELD\n*\n         TM    X'74'(R2),X'80'    IS THIS MVS XA ?\n         BZ    *+10               NO - DON'T NEED TO RETURN TO EARTH\n         LA    R15,MODE24         SET RETURN ADDRESS\n         DC    X'0B0F'            (BSM   R0,R15) SET 24 BIT MODE\n*\nMODE24   DR    R0,R5              DIVIDE TO GET SRM CPU CONSTANT*10000\n         SRL   R5,1               DIVIDE BY 2\n         CR    R0,R5              MORE THAN 1/2 ?\n         BNH   *+8                NO - SKIP ADDING\n         A     R1,=F'1'           ADD ONE\n         L     R5,STANDSRM        GET STANDARD CPU SRM NUMBER\n         SR    R0,R0              CLEAR FOR DIVIDE\n         DR    R0,R5              DIVIDE BY STANDARD CPU SRM NUMBER\n         SRL   R5,1               DIVIDE BY 2\n         CR    R0,R5              MORE THAN 1/2 ?\n         BNH   *+8                NO - SKIP ADDING\n         A     R1,=F'1'           ADD ONE ( R1 = SYSADJUST * 1000 )\n         ST    R1,ADJUST          SAVE CPU ADJUST FACTOR\n*\n         CLI   IEFFLAG,X'FF'      ARE WE IN IEFACTRT ?\n         BNE   TSOCODE            NO - MUST BE STANDALONE (NOT ACTRT)\n         L     R8,16              CVT POINTER\n         L     R8,0(R8)           TCB WORDS\n         L     R8,4(R8)           CURRENT TCB\n         L     R8,X'A4'(R8)       TCT POINTER\n         LTR   R8,R8              ANY TCT ?\n         BZ    STOP               NO - DON'T GO NO FURTHER\n         L     R8,X'98'(R8)       LCT POINTER\n         L     R8,X'10'(R8)       JOBS JCT POINTER\n         TM    X'07'(R8),B'10000000' MSGLEVEL=(,1) ?\n         BZ    STOP               NO - DON'T DO IT\n*\n         L     R4,36(R7)          GET POINTER TO RECORD\n         ST    R4,RECPTR          SAVE POINTER TO RECORD\n         CLI   5(R4),30           IS IT A TYPE 30?\n         BNE   STOP               NO - STOP RIGHT HERE\n*\n         L     R8,24(R4)          OFFSET TO SUBSYSTEM SECTION\n         AR    R8,R4              ADDRESS OF SUBSYSTEM SECTION\n         CLC   0(2,R8),=H'04'     IS IT A STEP TOTAL RECORD?\n         BNE   TRY05              NO - TRY NEXT ONE\n*\n         CLC   18(4,R4),=CL4'TSO ' TSO?\n         BNE   *+12               NO - SKIP SWITCH\n         MVI   TSOFLAG,X'F0'      TURN ON TSO SWITCH\n         B     XXXTSO1            SKIP OTHER CHECK\n         L     R8,32(R4)          OFFSET TO IDENTIFICATION SECTION\n         AR    R8,R4              ADDRESS OF IDENTIFICATION SECTION\n         CLI   42(R8),C'O'        OVERNITE CLASS ?\n         BNE   XXXTSO1            NO\n         MVI   TSOFLAG,X'0F'      TURN ON OVN SWITCH\n*\nXXXTSO1  L     R8,48(R4)          OFFSET TO COMPLETION SECTION\n         AR    R8,R4              ADDRESS OF COMPLETION SECTION\n         TM    2(R8),X'01'        WAS THIS STEP FLUSHED ?\n         BO    STOP               YES - STOP\n*\n         MVC   LINETO+27(10),=CL10'TOTAL STEP' CHANGE TOTAL LINE\n         MVC   LINETO+55(05),=CL05' STEP' CHANGE TOTAL LINE\n         L     R5,0(R7)           GET COMMON PARAMETER AREA\n         SR    R9,R9              CLEAR REG 9\n         ICM   R9,7,33(R5)        PICK UP USER COMMUNICATION FIELD\n         LTR   R9,R9              ANY THERE NOW ?\n         BNZ   JOBCODE            YES BYPASS GETMAIN & INIT\n*\n         LA    R4,SMFWSIZ         GET SIZE OF WORKAREA\n         A     R4,=F'7'           ROUND UP TO\n         N     R4,=X'FFFFFFF8'    A DOUBLE WORD\n       GETMAIN R,LV=(R4),SP=255   GETMAIN WORK AREA\n         LR    R9,R1              SAVE POINTER\n         USING SMFWORK,R9         SET UP ADDRESSING\n         MVI   0(R9),X'0'         ZERO ONE\n         MVC   1(SMFWSIZ-1,R9),0(R9)  ZERO IT ALL OUT\n         STCM  R9,7,33(R5)        SAVE POINTER\n         B     JOBCODE            GO SET CAPTURE RATIO\n*\nTRY05    CLC   0(2,R8),=H'05'     IS IT A JOB TOTAL RECORD?\n         BNE   STOP               NO - NOTHING ELSE TO DO HERE\n*\n         CLC   18(4,R4),=CL4'TSO ' TSO?\n         BNE   *+12               NO - SKIP SWITCH\n         MVI   TSOFLAG,X'F0'      TURN ON TSO SWITCH\n         B     XXXTSO2            SKIP OTHER CHECK\n         L     R8,32(R4)          OFFSET TO IDENTIFICATION SECTION\n         AR    R8,R4              ADDRESS OF IDENTIFICATION SECTION\n         CLI   42(R8),C'O'        OVERNITE CLASS ?\n         BNE   XXXTSO2            NO\n         MVI   TSOFLAG,X'0F'      TURN ON OVN SWITCH\n*\nXXXTSO2  L     R5,0(R7)           GET COMMON PARAMETER AREA\n         SR    R9,R9              CLEAR REG 9\n         ICM   R9,7,33(R5)        PICK UP USER COMMUNICATION FIELD\n         LTR   R9,R9              ANY THERE NOW ?\n         BZ    STOP               YES BYPASS (ENTIRE JOB FLUSHED)\n*\n         MVI   T05FLAG,X'FF'      TURN ON FLAG\n         MVC   LINETO+27(10),=CL10' TOTAL JOB' CHANGE TOTAL LINE\n         MVC   LINETO+55(05),=CL05'  JOB' CHANGE TOTAL LINE\n         B     JOBCODE            GO ON WITH IT\n*\nTSOCODE  ST    R6,OUCBFLG         SAVE OUCB FLAG\n         TM    OUCBFLG+2,X'20'    LOGON CREATED ASID\n         BZ    JOBCODE            NO - SKIP TSO FLAG\n         MVI   TSOFLAG,X'F0'      SET TSOFLAG\n*\nJOBCODE  CLI   IEFFLAG,X'FF'      ARE WE IEFACTRT ?\n         BE    NOOPEN             YES - BYPASS OPEN\n         CLI   TSOFLAG,X'F0'      ARE WE TSO ?\n         BNE   OPENER             NO - MUST DO OPEN\n         CLI   TJBFLAG,X'FF'      ARE WE TSO-JOB ?\n         BNE   PSTARS             NO - WILL DO TPUTS\n         MVC   CUUPRINT+82(2),=H'80' CHANGE LRECL\n         MVC   CUUPRINT+62(2),=H'80' CHANGE BLKSIZE\nOPENER   OPEN  (CUUPRINT,OUTPUT),MF=(E,OPENPL)\n         TM    CUUPRINT+48,X'10'  DID IT OPEN ?\n         BO    PSTARS             YES - GO PUT OUT STAR LINE\n         CLI   TJBFLAG,X'FF'      ARE WE TSO-JOB ?\n         BNE   STOP               NO - NO RECOURSE\n         MVI   TJBFLAG,X'00'      TURN OFF TSO-JOB FLAG (DO TPUTS)\n         B     PSTARS             AND GO WRITE OUT STAR LINE\n*\nNOOPEN   CLI   T05FLAG,X'FF'      ARE WE IN IEFACTRT FOR A TYPE 05 ?\n         BNE   NSTARS             NO - SKIP STARS (IEFACTRT DID THEM)\nPSTARS   LA    R2,STARS           POINT TO LINE TO BE WRITTEN\n         LA    R15,STARS          POINT TO BATCH TITLE IF NEEDED\n         BAL   R3,PRINTER         THEN WRITE IT OUT\nNSTARS   LA    R2,STAR1           POINT TO LINE TO BE WRITTEN\n         LA    R15,STAR1          POINT TO BATCH TITLE IF NEEDED\n         BAL   R3,PRINTER         THEN WRITE IT OUT\n         B     NOABORT\n*\n*        PATCH TO ABORT PROCESSING\n*\n         LA    R2,ABORT1          POINT TO ABORT MESSAGE\n         LA    R15,ABORT1         POINT TO ABORT MESSAGE\n         BAL   R3,PRINTER         THEN WRITE IT OUT\n         B     EXITA              THEN END\nABORT1   DC    CL50'*                    ESTIMATED JOB COST USING THE '\n         DC    CL50'1987 DSD ALGORITHM IS NOT YET AVAILABLE.          '\n         DC    CL11'          *'\n*\nNOABORT  L     R2,16              CVT POINTER\n         L     R2,0(R2)           TCB WORDS POINTER\n         L     R3,4(R2)           CURRENT TCB POINTER\n         L     R4,X'A4'(R3)       CURRENT TCT POINTER\n         ST    R4,TCTPTR          SAVE TCT POINTER\n         L     R2,12(R2)          CURRENT ASCB POINTER\n*\n         L     R1,28(R4)          PICK UP JMR POINTER\n         CLC   24(2,R1),=CL2'OS'  IS THIS AN OUTSIDE SALES PCS ?\n         BNE   *+8                NO - SKIP SWITCH\n         MVI   OSSFLAG,X'FF'      YES - SET SWITCH\n         EJECT\n***********************************************************************\n*                                                                     *\n*              CPU TIME (C1A)                                         *\n*                                                                     *\n***********************************************************************\n         CLI   IEFFLAG,X'FF'      ARE WE IN IEFACTRT ?\n         BNE   JOBTCB             NO - USE ASCB TIME\n         CLI   T05FLAG,X'FF'      ARE WE IN IEFACTRT FOR A SUB TYPE 5 ?\n         BNE   T04C1A             NO - USE SUBTYPE 4 TIMES\n         L     R1,C1ASAVE         GET TOTAL SO FAR\n         B     JOBC1A             AND GO ON\n*\nT04C1A   L     R1,RECPTR          GET SMF RECORD POINTER\n         L     R5,56(R1)          OFFSET TO PROCESSOR SECTION\n         AR    R5,R1              ADDRESS OF PROCESSOR SECTION\n         L     R1,4(R5)           GET STEP TCB TIME\n         A     R1,8(R5)           GET STEP SRB TIME\n         A     R1,12(R5)          GET STEP ITCB TIME\n         A     R1,16(R5)          GET STEP ISRB TIME\n         M     R0,=F'10'          CONVERT TO MILLISECONDS\n         L     R14,C1ASAVE        GET PREVIOUS TOTAL\n         AR    R14,R1             ADD CURRENT STEP IN\n         ST    R14,C1ASAVE        GET PREVIOUS TOTAL\n         B     JOBC1A             GO DO IT\n*\nJOBTCB   LM    R0,R1,64(R2)       PICK UP TCB TIME FROM ASCB\n         SRDL  R0,12              GET NUMBER OF TCB MICROSECONDS\n         D     R0,=F'1000'        GET NUMBER IN MILLISECONDS\n         C     R0,=F'500'         MORE THAN 1/2\n         BNH   *+8                NO - SKIP ADDING\n         A     R1,=F'1'           ADD ONE\n         LR    R15,R1             PUT IN REG 15\n         LM    R0,R1,200(R2)      PICK UP SRB TIME FROM ASCB\n         SRDL  R0,12              GET NUMBER OF TCB MICROSECONDS\n         D     R0,=F'1000'        GET NUMBER IN MILLISECONDS\n         C     R0,=F'500'         MORE THAN 1/2\n         BNH   *+8                NO - SKIP ADDING\n         A     R1,=F'1'           ADD ONE\n         AR    R15,R1             ADD TO REG 15\n         L     R1,132(R4)         PICK UP INITIATOR TCB TIME FROM TCT\n         M     R0,=F'10'          GET NUMBER IN MILLISECONDS\n         AR    R15,R1             ADD TO REG 15\n         L     R1,136(R4)         PICK UP INITIATOR SRB TIME FROM TCT\n         M     R0,=F'10'          GET NUMBER IN MILLISECONDS\n         AR    R1,R15             ADD IN THE REST\n*\nJOBC1A   LTR   R1,R1              ANYTHING ?\n         BZ    C1GCODE            NO - DON'T PRINT LINE\n         M     R0,ADJUST          MULTIPLY BY SYSADJUST * 1000\n         D     R0,=F'1000'        GET ADJUSTED CPU MILLISECONDS\n         C     R0,=F'500'         MORE THAN 1/2\n         BNH   *+8                NO - SKIP ADDING\n         A     R1,=F'1'           ADD ONE\n         ST    R1,TCBSECS         SAVE FOR LATER (MILLISECONDS)\n         SR    R0,R0              CLEAR REG\n         D     R0,=F'60'          GET ADJUSTED CPU 60 MSEC UNITS\n         C     R0,=F'30'          MORE THAN 1/2\n         BNH   *+8                NO - SKIP ADDING\n         A     R1,=F'1'           ADD ONE\n         CVD   R1,WORK            MAKE DECIMAL\n         CLI   TSOFLAG,X'0F'      OVERNITE CLASS ?\n         BE    JOBC1B             YES\n         L     R0,CFACT1A         MULTIPLY BY NET C FACTOR * 10E6\n         LA    R2,LINE1A          POINT TO LINE TO BE WRITTEN\n         L     R15,=A(BLNE1A)     POINT BATCH TITLE IF NEEDED\n         BAL   R3,FORMATM         THEN WRITE IT OUT\n         B     C1GCODE            TAPE MOUNTS NEXT\n*\nJOBC1B   L     R0,CFACT1B         MULTIPLY BY NET C FACTOR * 10E6\n         LA    R2,LINE1B          POINT TO LINE TO BE WRITTEN\n         L     R15,=A(BLNE1B)     POINT BATCH TITLE IF NEEDED\n         BAL   R3,FORMATM         THEN WRITE IT OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*              JES3 EXTENDED STATUS - ONLY RUN AT JOB TERMINATION     *\n*              THIS PROVIDES DATA FOR THREE CHARGE FACTORS:           *\n*                                                                     *\n*              TAPE MOUNTS (C1C) (MDS PART)                           *\n*              LINES SPOOLED AND PRINTED/PUNCHED (C1G)                *\n*              PAGES PRINTED (C1P)                                    *\n*                                                                     *\n***********************************************************************\nC1GCODE  CLI   IEFFLAG,X'FF'      ARE WE IN IEFACTRT ?\n         BE    C1GCK01            YES - CHECK WHY WE ARE HERE\n         CLI   TJBFLAG,X'FF'      WERE WE CALLED FROM PROGRAM ?\n         BE    C1CCODE            YES - DONT DO THIS THEN\n         B     JOBSPL             NO - THEN DO SPOOL REPORT\nC1GCK01  CLI   T05FLAG,X'FF'      ARE WE IN IEFACTRT FOR A SUBTYPE 5 ?\n         BNE   C1CCODE            NO - SKIP THIS ALTOGETHER\n*\nJOBSPL   LA    R8,DMAREA          POINT TO DMC HEADER\n         STCM  R8,7,DMPARM+1      SAVE IT BACK\n         LA    R8,SSAREA          POINT TO SSOB HEADER\n         STCM  R8,7,SSPARM+1      SAVE IT BACK\n*\n         L     R2,=A(SSCS$ASZ*25) GET SIZE OF ARRAY AREA\n         A     R2,=A(SSCSIZE+SSCS$PSZ+SSCS$ASZ) SSOB + WORK + 1 ZEROS\n         A     R2,=F'7'           ROUND UP TO\n         N     R2,=X'FFFFFFF8'    A DOUBLE WORD\n       GETMAIN R,LV=(R2)          GETMAIN WORK AREA\n*\n         STM   R2,R5,CDUSAVE+12   SAVE REGS\n         LR    R3,R2              GET SIZE OF AREA TO INITIALIZE\n         LR    R2,R1              ADDRESS OF GETMAINED AREA TO INIT\n         LA    R4,=F'0'           ADDRESS OF DUMMY INIT DATA AREA\n         SR    R5,R5              FILL CHAR (00) AND SOURCE SIZE (0)\n         MVCL  R2,R4              INITIALIZE IT\n         LM    R2,R5,CDUSAVE+12   RESTORE REGS\n         LR    R3,R1              POINT TO SSOB PROPER\n         ST    R3,SSOBPTR         PUT IN HEADER\n         USING SSCSBGN,R3         ESTABLISH ADDRESSABILITY\n         LA    R8,SSCS$CAE        POINT TO FIRST ARRAY ENTRY\n         USING SSCS$CAE,R8        ESTABLISH ADDRESSABILITY\n         MVI   SSCSFLGS,SSCS$CST  INDICATE EXTENDED STATUS\n         L     R2,=A(SSCS$ASZ*25) GET SIZE OF ARRAY AREA\n         STH   R2,SSCSDIMP        SAVE DOWN SIZE OF WORK AREA\n         LR    R1,R8              POINT TO FIRST ARRAY ENTRY\n         AR    R1,R2              POINT TO END OF LAST ARRAY ENTRY\n         ST    R1,LASTONE         SAVE FOR END TEST\n         A     R2,=A(SSCSIZE+SSCS$PSZ+SSCS$ASZ) SSOB + WORK + 1 ZEROS\n         STH   R2,SSCSLEN         SAVE TOTAL LENGTH\n*\n         L     R2,16              CVT POINTER\n         L     R2,0(R2)           TCB WORDS POINTER\n         L     R2,4(R2)           CURRENT TCB POINTER\n         CLI   IEFFLAG,X'FF'      ARE WE IN IEFACTRT ?\n         BNE   JOBTASK            NO - USE JOBS SSIB FROM JSCB\n         L     R2,X'A4'(R2)       TCT POINTER\n         L     R2,X'98'(R2)       LCT POINTER\n         L     R1,X'10'(R2)       ADDRESS OF JCT\n         MVC   SSCSJOBN(8),8(R1)  MOVE IN CURRENT JOBNAME FROM JCT\n         L     R2,X'194'(R2)      SSOB POINTER\n         L     R2,X'08'(R2)       SSIB POINTER\n         B     JOBSSIB            SKIP CODE FOR NON IEFACTRT\nJOBTASK  L     R2,X'B4'(R2)       ADDRESS OF JSCB\n         L     R1,X'104'(R2)      JCT-10 POINTER\n         MVC   SSCSJOBN(8),24(R1) MOVE IN CURRENT JOBNAME FROM JCT\n         L     R2,X'13C'(R2)      ADDRESS OF SSIB\nJOBSSIB  MVC   SSCSJOBI(4),=CL4'JOB0' FIRST PART\n         MVC   SSCSJOBI+4(4),16(R2) MOVE IN CURRENT JOB NUMBER\n         L     R2,X'20'(R2)       ADDRESS OF MEME\n*\n         L     R15,16             CVT POINTER\n         TM    X'74'(R15),X'80'   IS THIS MVS XA ?\n         BZ    *+10               NO - DON'T NEED 31 BIT MODE\n         L     R15,=A(X'80000000'+MODX31) SET RETURN ADDRESS\n         DC    X'0B0F'            (BSM   R0,R12) SET 31 BIT MODE\nMODX31   EQU   *\n*\n         L     R1,X'120'(R2)      ACB ADDR FROM MEMSACB FLD IN IATYMEM\n         LTR   R1,R1              IS THERE ONE THERE?\n         BZ    RETM24             NO - RETURN\n         L     R2,X'124'(R2)      DEB ADDR FROM MEMSDEB FLD IN IATYMEM\n         L     R2,X'08'(R2)       DSS ADDR FROM DEBIRBAD FLD IN IEZDEB\n         CLC   0(4,R2),=CL4'DSS ' IS THIS A DSS? (JES3 1.3.4)\n         BE    DSSPTR             YES GO GET DSB POINTER\n         CLC   0(4,R2),=CL4'DSB ' IS THIS A DSB? (JES3 2.1.5)\n         BE    DSSPTR+4           YES - SKIP DSS\n         B     RETM24             NO - I DONT KNOW WHO THIS IS\nDSSPTR   L     R2,X'04'(R2)       DSB ADDR FROM DSSDSB FLD IN IATYDSS\n         L     R2,X'24'(R2)       DMC ADDR FROM DSBCDMC FLD IN IATYDSB\n         ST    R2,DMADDR          SAVE IT IN PARM LIST\n         LA    R1,DMPARM          LOAD ADDRESS OF DMPARM\n         LA    R15,16             ESR CODE FOR DMC GET\n         SVC   109                ESR SVC\n*\nRETM24   L     R15,16             CVT POINTER\n         TM    X'74'(R15),X'80'   IS THIS MVS XA ?\n         BZ    *+10               NO - DON'T NEED 31 BIT MODE\n         LA    R15,MODX24         SET RETURN ADDRESS\n         DC    X'0B0F'            (BSM   R0,R12) SET 24 BIT MODE\nMODX24   EQU   *\n*\nSVC109   LA    R1,SSPARM          LOAD ADDRESS OF SSOB\n         LA    R15,16             ESR CODE FOR IEFSSREQ\n         SVC   109                ESR SVC\n*\n*        NOP   DEFAULT            ALWAYS DO IT NOW (TEST ONLY)\n*\n         LTR   R15,R15            TEST RETURN CODE\n         BNZ   DEFAULT            NOT ZERO - SSOB ERROR - NO DATA\n         CLC   SSOBRC(4),=F'0'    SSOB RETURN CODE ALSO ZERO ?\n         BE    SSOBQ              YES - GO PROCESS\n*\nDEFAULT  MVI   JESFLAG,X'FF'      SET BAD JES FLAG\n         MVC   SSOBRC(4),=F'0'    ZERO OUT RETURN CODE\n         MVC   SSCS$JDS(4),=F'0'  CLEAR JDS POINTER JUST IN CASE\n         MVI   SSCS$CAE,X'00'     ZERO OUT\n         MVC   SSCS$CAE+1(255),SSCS$CAE    AREA\n         MVC   SSCS$TYP,=CL8'PRT     ' DEFAULT\n         MVC   SSCS$FRM,=CL4'3920' DEFAULT\n         MVI   SSCS$CPY,1         DEFAULT\n*\n         MVC   SSCS$LNC,=F'1000'  ALWAYS PUT IN SAMPLE OF 1000\n         CLI   TSOFLAG,X'F0'      ARE WE TSO ?\n         BE    *+10               YES - THEN 1000 IS OK\n         MVC   SSCS$LNC,=F'10000' NO - MUST BE BATCH SO CHANGE TO 10K\n*\nSSOBQ    L     R1,LASTONE         GET POINTER TO LAST (ZERO) ARRAY\n         CLC   SSCS$CAE(SSCS$ASZ),0(R1) IS THIS ONE EMPTY ?\n         BE    SPOOLED            YES - GET OUT\n*\n         L     R1,SSCS$LNC        GET LINE COUNT\n         CLC   SSCS$DDN(8),=CL8'JESMSG  '   DONT\n         BE    NORMALX                          COUNT\n         CLC   SSCS$DDN(8),=CL8'JESJCL  '            THESE\n         BE    NORMALX                                    IN\n         CLC   SSCS$DDN(8),=CL8'SYSMSG  '       LINES SPOOLED\n         BNE   NORMALC\n         L     R6,DMC+72          GET SYSMSG LINECOUNT FROM OUR DMC\n         LTR   R6,R6              WAS IT ZERO ?\n         BZ    NORMALX            YES - USE SSOB COUNT\n         LA    R1,12(R6)          12 LINES FOR US\n         ST    R1,SSCS$LNC        STORE SYSMSG LINECOUNT\n         B     NORMALX\n*\nNORMALC  L     R6,SPOOL           GET NUMBER OF LINES SPOOLED\n         AR    R6,R1              GET LINECOUNT\n         ST    R6,SPOOL           ADD TO COUNT SPOOLED ALREADY\nNORMALX  SR    R6,R6              CLEAR REG\n         CLI   SSCS$CLS,C'V'      SPECIAL TEST FOR VPS\n         BE    NOPRINT            YES - WE CAN NOT YET BILL FOR VPS\n         LA    R15,RMTTABLE       POINT TO TABLE\nRM1LOOP  CLC   SSCS$DST(5),0(R15) CHARGE FOR THIS ONE ?\n         BE    SIPRINT            YES - GO COUNT THIS ONE\n         LA    R15,5(R15)         POINT TO NEXT ENTRY\n         CLC   ENDTABLE(5),0(R15) END OF TABLE?\n         BE    NOPRINT            YES - DO NOT CHARGE FOR\n         B     RM1LOOP            CHECK THIS ONE\nSIPRINT  IC    R6,SSCS$CPY        GET COPY COUNT\nNOPRINT  MR    R0,R6              MULTIPLY BY LINE COUNT\n         L     R6,PRINT           GET LINE COUNT\n         AR    R6,R1              ADD CURRENT PRINTED\n         ST    R6,PRINT           AND SAVE\n         L     R6,=V(FORMTAB)     GET ADDRESS OF FORM CHARGE TABLE\nFLOOP    CLC   0(4,R6),=CL4'DFLT' END OF LIST ?\n         BE    FHIT               YES - GO USE IT\n         CLC   0(4,R6),SSCS$FRM   THIS OUR FORM?\n         BE    FHIT               YES - GO USE IT\n         LA    R6,16(R6)          NEXT ONE\n         B     FLOOP              AROUND\nFHIT     L     R7,SSCS$PGS        GET PAGE COUNT\n         LTR   R7,R7              ANYTHING ?\n         B     PAGCALC            ALWAYS USE TABLE LINECOUNT (LIKE R2)\n         BZ    PAGCALC            NO - USE LINECOUNT\n         LR    R1,R7              PUT IN REG1 (OVERLAY LINES)\n         B     FRMCALC            GO COMPUTE CDUS\nPAGCALC  SR    R0,R0              CLEAR R0\n         L     R1,SSCS$LNC        GET ORIGINAL LINE COUNT\n         A     R1,8(R6)           ADD LINES/PAGE FOR LAST PAGE\n         S     R1,=F'1'           SUBTRACT ONE\n         D     R0,8(R6)           DIVIDE BY LINES/PAGE\nFRMCALC  SR    R7,R7              CLEAR REG 7\n         CLI   SSCS$CLS,C'V'      SPECIAL TEST FOR VPS\n         BE    NOPAGES            YES - WE CAN NOT YET BILL FOR VPS\n         CLC   SSCS$DST,=CL8'AUTOCOM ' MICROFICHE ?\n         BE    NOPAGES            YES - WE DONT CHARGE PAGES FOR FICHE\n         CLC   SSCS$DST(3),=C'RMT' REMOTE DESTINATION ?\n         BNE   SIPAGES            NO - PROBABLY CHARGED FOR\n         LA    R15,RMTTABLE       POINT TO TABLE\nRM2LOOP  CLC   SSCS$DST(5),0(R15) CHARGE FOR THIS ONE ?\n         BE    SIPAGES            YES - GO COUNT THIS ONE\n         LA    R15,5(R15)         POINT TO NEXT ENTRY\n         CLC   ENDTABLE(5),0(R15) END OF TABLE?\n         BE    NOPAGES            YES - DO NOT CHARGE FOR\n         B     RM2LOOP            CHECK THIS ONE\nSIPAGES  IC    R7,SSCS$CPY        GET COPY COUNT\nNOPAGES  MR    R0,R7              MULTIPLY BY COPY COUNT\n         L     R7,PAGES           GET PREVIOUS PAGE COUNT\n         AR    R7,R1              ADD IN CURRENT\n         ST    R7,PAGES           AND SAVE\n         M     R0,12(R6)          MULTIPLY BY TOTAL CHARGE\n         D     R0,=F'1000000'     TOTAL CDU * 1000\n         C     R0,=F'500000'      MORE THAN 1/2\n         BNH   *+8                NO - SKIP ADDING\n         A     R1,=F'1'           ADD ONE\n         A     R1,PAGES+4         ADD PREVIOUS CHARGES\n         ST    R1,PAGES+4         AND SAVE\n         LA    R8,SSCS$ASZ(R8)    POINT TO NEXT ARRAY ENTRY\n         B     SSOBQ              GO LOOK FOR ANOTHER ONE\n*\nSPOOLED  LH    R1,SSCS$NTM        GET NUMBER OF MDS TAPE MOUNTS\n         CLI   IEFFLAG,X'FF'      ARE WE IN IEFACTRT ?\n         BNE   NOTAPES            MO - SKIP ADDING IN MDS TAPE MOUNTS\n         A     R1,C1CSAVE         ADD NUMBER OF MVS TAPE MOUNTS\n         ST    R1,C1CSAVE         SAVE BACK\nNOTAPES  CLC   SSCS$JDS(4),=F'0'  LAST JDS POINTER THERE ?\n         BE    FREEJES            NO - FREE GETMAINED AREA\n*\n         L     R1,SSCS$JDS        PICK UP JDS POINTER\n         STM   R2,R5,CDUSAVE+12   SAVE REGS\n         LA    R2,SSCSDIMR        POINT TO BEGINNING OF RETURNED AREA\n         LH    R3,SSCSDIMP        GET SIZE OF ARRAY AREA\n         A     R3,=A(SSCSELSZ+SSCS$PSZ+SSCS$ASZ+2) ARRAY+WORK+1 ZEROS\n         LA    R4,=F'0'           ADDRESS OF DUMMY INIT DATA AREA\n         SR    R5,R5              FILL CHAR (00) AND SOURCE SIZE (0)\n         MVCL  R2,R4              INITIALIZE IT\n         LM    R2,R5,CDUSAVE+12   RESTORE REGS\n         ST    R1,SSCS$JDS        SAVE JDS POINTER\n         LA    R8,SSCSIZE+SSCS$PSZ(,R3) FIRST ARRAY ENTRY\n         B     SVC109             AND GO GET ANOTHER LOAD\n*\nFREEJES  L     R1,SSOBPTR         ADDRESS OF ARRAY\n         LH    R2,SSCSLEN         SIZE OF WORK AREA\n         A     R2,=F'7'           ROUND UP TO\n         N     R2,=X'FFFFFFF8'    A DOUBLE WORD\n      FREEMAIN R,LV=(R2),A=(R1)   FREEMAIN WORK AREA\n         DROP  R3,R8              RELEASE REGS\n         B     C1CCODE            SKIP OVER RMT TABEL\n*\n*        TABLE OF RJE STATIONS THAT WE CHARGE FOR PRINTED OUTPUT\n*\nRMTTABLE DC    C'RMT05'\n         DC    C'RMT27'\n         DC    C'RMT29'\n         DC    C'RMT31'\n         DC    C'RMT34'\n         DC    C'RMT66'\n         DC    C'RMT72'\n         DC    C'RMT73'\n         DC    C'RMT77'\nENDTABLE DC    C'99999'\n         EJECT\n***********************************************************************\n*                                                                     *\n*              TAPE VOLUME MOUNTS (C1C)                               *\n*                                                                     *\n***********************************************************************\nC1CCODE  L     R4,TCTPTR          RESTORE TCT POINTER\n         CLI   IEFFLAG,X'FF'      ARE WE IN IEFACTRT ?\n         BNE   JOBTAP             NO - USE TCT COUNT\n         CLI   T05FLAG,X'FF'      ARE WE IN IEFACTRT FOR A TYPE 05 ?\n         BNE   T04C1C             NO - USE SUBTYPE 4 FIELDS\n         L     R1,C1CSAVE         GET TOTAL SO FAR\n         B     JOBC1C             AND GO ON\n*\nT04C1C   L     R5,RECPTR          GET SMF RECORD POINTER\n         L     R1,88(R5)          OFFSET TO OPERATOR SECTION\n         AR    R5,R1              ADDRESS OF OPERATOR SECTION\n         L     R1,8(R5)           GET NONSPECIFIC MOUNTS\n         A     R1,12(R5)          GET SPECIFIC MOUNTS\n         L     R14,C1CSAVE        GET PREVIOUS TOTAL\n         AR    R14,R1             ADD CURRENT STEP IN\n         ST    R14,C1CSAVE        GET PREVIOUS TOTAL\n         B     JOBC1C             GO DO IT\n*\nJOBTAP   L     R1,92(R4)          GET NONSPECIFIC MOUNTS\n         A     R1,96(R4)          ADD SPECIFIC MOUNTS\n         ST    R1,TAPEMTS         SAVE FOR LATER\n*\nJOBC1C   LTR   R1,R1              ANYTHING ?\n         BZ    C1FCODE            NO - DON'T PRINT LINE\n         CVD   R1,WORK            MAKE DECIMAL\n         MVC   LINE1C+18(12),=X'402020206B2020206B202120'\n         ED    LINE1C+18(12),WORK+3 DO THE EDIT\n         MVI   LINE1C+18,C'='     PUT '=' BACK\n         M     R0,=F'1000'        SCALE FOR LATER EDIT\n         L     R0,CFACT1C         MULTIPLY BY TOTAL C FACTOR * 10E6\n         LA    R2,LINE1C          POINT TO LINE TO BE WRITTEN\n         L     R15,=A(BLNE1C)     POINT BATCH TITLE IF NEEDED\n         BAL   R3,FORMATX         THEN WRITE IT OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*              COMMUNICATIONS MBYTES TRANSFERED (C1F)                 *\n*                                                                     *\n***********************************************************************\nC1FCODE  CLI   IEFFLAG,X'FF'      ARE WE IN IEFACTRT ?\n         BNE   JOBCOM             NO - USE TCT DATA\n         CLI   T05FLAG,X'FF'      ARE WE IN IEFACTRT FOR A TYPE 05 ?\n         BNE   T04C1F             NO - USE SUBTYPE 4 FIELDS\n         LM    R0,R1,C1FSAVE      GET TOTAL (TPUTS,TGETS)\n         B     JOBC1F             AND GO ON\n*\nT04C1F   L     R5,RECPTR          GET SMF RECORD POINTER\n         L     R7,40(R5)          OFFSET TO I/O ACTIVITY SECTION\n         AR    R5,R7              ADDRESS OF I/O ACTIVITY SECTION\n         LM    R0,R1,8(R5)        GET TPUT,TGET COUNTS\n         LM    R14,R15,C1FSAVE    GET TPUT,TGET TOTAL SO FAR\n         AR    R14,R0             ADD CURRENT STEP TPUTS\n         AR    R15,R1             ADD CURRENT STEP TGETS\n         STM   R14,R15,C1FSAVE    SAV TPUT,TGET TOTAL SO FAR\n         B     JOBC1F             GO DO IT\n*\nJOBCOM   L     R0,52(R4)          GET TPUT COUNT\n         L     R1,48(R4)          GET TGET COUNT\n*\nJOBC1F   LR    R7,R0              SAVE TPUT COUNT\n         M     R0,BYTTGET         GET NUMBER OF BYTES (TGET)\n         M     R6,BYTTPUT         GET NUMBER OF BYTES (TPUT)\n         AR    R0,R6              ADD HIGH ORDER WORDS\n         ALR   R1,R7              ADD TPUT TO TGET BYTES\n         BNO   *+8                OVERFLOW ?\n         A     R0,=F'1'           YES - ADD IT IN\n         SRDL  R0,10              CONVERT TO 1K\n         M     R0,=F'1000'        SCALE FOR DIVIDE\n         D     R0,=F'1024'        CONVERT TO MEGABYTES * 1000\n         C     R0,=F'512'         MORE THAN 1/2\n         BNH   *+8                NO - SKIP ADDING\n         A     R1,=F'1'           ADD ONE\n         LTR   R1,R1              ANYTHING ?\n         BZ    C1GPRNT            NO - DON'T PRINT LINE\n         CVD   R1,WORK            MAKE DECIMAL\n         L     R0,CFACT1F         MULTIPLY BY TOTAL C FACTOR * 10E6\n         LA    R2,LINE1F          POINT TO LINE TO BE WRITTEN\n         L     R15,=A(BLNE1F)     POINT BATCH TITLE IF NEEDED\n         BAL   R3,FORMATM         THEN WRITE IT OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PRINT LINES SPOOLED (C1G)                                    *\n*                                                                     *\n***********************************************************************\nC1GPRNT  L     R1,SPOOL           GET SPOOLED LINE COUNT\n         A     R1,PRINT           ADD PRINT LINE COUNT\n         LTR   R1,R1              ANYTHING ?\n         BZ    C1JCODE            NO - DON'T PRINT LINE\n         SR    R0,R0              CLEAR REG\n         D     R0,=F'10'          CONVERT TO 10K LINE UNITS\n         C     R0,=F'05'          MORE THAN 1/2\n         BNH   *+8                NO - SKIP ADDING\n         A     R1,=F'1'           ADD ONE\n         CVD   R1,WORK            MAKE DECIMAL\n         L     R0,CFACT1G         MULTIPLY BY TOTAL C FACTOR * 10E6\n         LA    R2,LINE1G          POINT TO LINE TO BE WRITTEN\n         L     R15,=A(BLNE1G)     POINT BATCH TITLE IF NEEDED\n         BAL   R3,FORMATM         THEN WRITE IT OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*              DEVICE CONNECT MINUTES (C1J)                           *\n*                                                                     *\n***********************************************************************\nC1JCODE  CLI   IEFFLAG,X'FF'      ARE WE IN IEFACTRT ?\n         BNE   JOBIO              NO - USE TCT TIMES\n         CLI   T05FLAG,X'FF'      ARE WE IN IEFACTRT FOR A TYPE 05 ?\n         BNE   T04C1J             NO - USE SUBTYPE 4 TIMES\n         LM    R0,R1,C1JSAVE      GET TOTALS SO FAR (DISK,TAPE)\n         B     JOBC1J             AND GO ON\n*\nT04C1J   SR    R0,R0              CLEAR DISK TIME ACCUMULATOR\n         SR    R1,R1              CLEAR TAPE TIME ACCUMULATOR\n         SR    R15,R15            CLEAR DISC TIME ACCUMULATOR\nT04C1K   L     R5,RECPTR          GET SMF RECORD POINTER\n         LH    R7,102(R5)         NUMBER OF EXCP SECTIONS\n         LTR   R7,R7              ARE THERE ANY ?\n         BZ    DONEDD1            NO - GO AROUND\n         L     R6,96(R5)          OFFSET TO EXCP SECTION\n         AR    R5,R6              ADDRESS OF EXCP SECTION\nDDLOOP1  CLI   0(R5),X'20'        DISK DEVICE ?\n         BNE   TAPEDD1            NO - LOOK FOR TAPE\n         A     R0,18(R5)          ADD CONNECT TIME (128 USECS)\n         A     R15,12(R5)         ADD BLOCK COUNT\n         B     NEXTDD1            AND DO NEXT ENTRY\nTAPEDD1  CLI   0(R5),X'80'        TAPE DEVICE ?\n         BNE   NEXTDD1            NO - SKIP IT\n         A     R1,18(R5)          ADD CONNECT TIME (128 USECS)\n         A     R15,12(R5)         ADD BLOCK COUNT\nNEXTDD1  LA    R5,22(R5)          POINT TO NEXT DD ENTRY\n         BCT   R7,DDLOOP1         AND AROUND AGAIN\n*\nDONEDD1  EQU   *\n*\n*        M     R14,=F'32'         MULTIPLY BY 4 MSEC/IO\n*        AR    R1,R15             ADD TO TAPE CONNECT TIME\n*\n         CLI   IEFFLAG,X'FF'      ARE WE IN IEFACTRT ?\n         BNE   JOBIO2             NO - THIS WAS THE EXCP HOLD REC\n*\n*        CLI   TSOFLAG,X'F0'      ARE WE A TSO USER?\n*        BNE   JOBC1X             NO - SKIP TGETS\n*        L     R5,RECPTR          GET SMF RECORD POINTER\n*        L     R7,40(R5)          OFFSET TO I/O ACTIVITY SECTION\n*        AR    R5,R7              ADDRESS OF I/O ACTIVITY SECTION\n*        L     R15,12(R5)         GET TGET COUNT\n*        M     R14,=F'7812'       MULTIPLY BY 1 SECONDS\n*        AR    R1,R15             ADD TO TAPE CONNECT TIME\n*\nJOBC1X   LM    R14,R15,C1JSAVE    GET TOTAL SO FAR\n         AR    R14,R0             ADD CURRENT STEP IN\n         AR    R15,R1             ADD CURRENT STEP IN\n         STM   R14,R15,C1JSAVE    SAVE BACK DOWN\n         B     JOBC1J             SKIP OVER\n*\nJOBIO    L     R5,144(R4)         GET ADDRESS OF STEP TOTAL TYPE 30\n         LA    R5,8(R5)           GET TRUE ADDRESS\n         ST    R5,RECPTR          SAVE IT\n         B     T04C1J             GO GET STEP COUNTS SO FAR\nJOBIO2   L     R5,148(R4)         GET ADDRESS OF EXCP HOLD TYPE 30\n         LA    R5,8(R5)           GET TRUE ADDRESS\n         C     R5,RECPTR          SECOND TIME AROUND ?\n         BE    JOBIO3             YES - GO RUN THE TCT ENTRIES\n         ST    R5,RECPTR          SAVE IT\n         B     T04C1K             GO GET STEP COUNTS SO FAR\nJOBIO3   L     R5,12(R4)          GET TCT I/O TABLE ADDRESS\n         LA    R6,8(R5)           START OF DD ENTRY TABLE\n         SR    R8,R8              CLEAR BLOCK COUNT REG\nDDLOOP   CLC   0(8,R6),=XL8'00'   ALL ZEROS ?\n         BE    DONEDDX            YES - DONE\n         L     R7,4(R6)           PICK UP POINTER TO I/O COUNTER ENTRY\n         LA    R7,0(R5,R7)        ADD TO ORGIN OF I/O TABLE\n         L     R14,0(R7)          GET UCB ADDRESS\n         LTR   R14,R14            ANY THERE ?\n         BZ    NEXTDD             NO - SKIP THIS ONE\n         L     R15,16(R7)         GET 128 USEC UNITS\n         S     R15,20(R7)         SUBTRACT OUT THOSE ALREADY SAVED\n         LTR   R15,R15            ANY THERE ?\n         BZ    NEXTDD             NO - SKIP THIS ONE\n         CLI   18(R14),X'20'      DISK DEVICE ?\n         BNE   TAPEDD             NO - LOOK FOR TAPE\n         AR    R0,R15             ADD CONNECT TIME (128 USECS)\n         A     R8,8(R7)           GET BLOCK COUNTS\n         S     R8,12(R7)          SUBTRACT OUT THOSE ALREADY SAVED\n         B     NEXTDD             AND DO NEXT ENTRY\nTAPEDD   CLI   18(R14),X'80'      TAPE DEVICE ?\n         BNE   NEXTDD             NO - SKIP IT\n         AR    R1,R15             ADD CONNECT TIME (128 USECS)\n         A     R8,8(R7)           GET BLOCK COUNTS\n         S     R8,12(R7)          SUBTRACT OUT THOSE ALREADY SAVED\nNEXTDD   LA    R6,8(R6)           POINT TO NEXT DD ENTRY\n         B     DDLOOP             AND AROUND AGAIN\n*\nDONEDDX  EQU   *\n*\n*        LR    R15,R8             GET TOTAL BLOCK COUNT\n*        M     R14,=F'32'         MULTIPLY BY 4 MSEC/IO\n*        AR    R1,R15             ADD TO TAPE CONNECT TIME\n*        L     R15,TAPEMTS        GET TAPE MOUNTS IF ANY\n*        M     R14,=F'234375'     MULTIPLY BY 30 SECONDS\n*        AR    R1,R15             ADD TO TAPE CONNECT TIME\n*        CLI   TSOFLAG,X'F0'      ARE WE A TSO USER?\n*        BNE   JOBC1J             NO - SKIP TGETS\n*        L     R15,48(R4)         GET TGET COUNT\n*        M     R14,=F'7812'       MULTIPLY BY 4 SECONDS\n*        AR    R1,R15             ADD TO TAPE CONNECT TIME\n*\nJOBC1J   LR    R15,R0             GET DISK IO CONNECT TIME\n         M     R14,=F'128'        GET USECS\n         D     R14,=F'1000'       GET CONNECT MILLISECONDS\n         C     R14,=F'500'        MORE THAN 1/2\n         BNH   *+8                NO - SKIP ADDING\n         A     R15,=F'1'          ADD ONE\n*\n*        M     R0,=F'128'         GET TAPE USECS\n*        D     R0,=F'1000'        GET CONNECT MILLISECONDS\n*        C     R0,=F'500'         MORE THAN 1/2\n*        BNH   *+8                NO - SKIP ADDING\n*        A     R1,=F'1'           ADD ONE\n*        AR    R1,R15             ADD DISK I/O TIME (FOR C1M)\n*        A     R1,TCBSECS         ADD TCB MILLISECONDS * SYSADJUST\n*        STM   R0,R1,OCCUPCY      SAVE OCCUPANCY TIME\n*\n         SR    R0,R0              CLEAR REG\n         LR    R1,R15             GET DISK IO TIME (FOR C1J)\n         D     R0,=F'60'          CONVERT TO 60 MSEC UNITS\n         C     R0,=F'30'          MORE THAN 1/2\n         BNH   *+8                NO - SKIP ADDING\n         A     R1,=F'1'           ADD ONE\n         LTR   R1,R1              ANYTHING ?\n*\n         BZ    C1PPRNT            SKIP MEMORY (NOT IN ALGORITHM)\n*\n         CVD   R1,WORK            MAKE DECIMAL\n         L     R0,CFACT1J         MULTIPLY BY TOTAL C FACTOR * 10E6\n         LA    R2,LINE1J          POINT TO LINE TO BE WRITTEN\n         L     R15,=A(BLNE1J)     POINT BATCH TITLE IF NEEDED\n         BAL   R3,FORMATM         THEN WRITE IT OUT\n*\n         B     C1PPRNT            SKIP MEMORY (NOT IN ALGORITHM)\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*              VIRTUAL MEMORY OCCUPANCY (C1M)                         *\n*                                                                     *\n***********************************************************************\nC1MCODE  CLI   IEFFLAG,X'FF'      ARE WE IN IEFACTRT ?\n         BNE   JOBMEM             NO - USE TCT FIELDS\n         CLI   T05FLAG,X'FF'      ARE WE IN IEFACTRT FOR A TYPE 05 ?\n         BNE   T04C1M             NO - USE SUBTYPE 4 FIELDS\n         LM    R0,R1,C1MSAVE      GET TOTAL SO FAR\n         B     JOBC1M             AND GO ON\n*\nT04C1M   L     R5,RECPTR          GET SMF RECORD POINTER\n         L     R6,72(R5)          OFFSET TO STORAGE SECTION\n         AR    R5,R6              ADDRESS OF STORAGE SECTION\n         LH    R6,6(R5)           REGION USED FROM THE TOP (SMF30SYS)\n         SLL   R6,10              MULTIPLY BY 1024\n         A     R6,88(R5)          REGION USED FROM BOTTOM (SMF30URB)\n         TM    2(R5),X'80'        V=R JOB ?\n         BO    *+8                YES - DONT ADD IN EXTENDED\n         A     R6,92(R5)          ADD EXTENDED PRIVATE (SMF30EUR)\n         SRL   R6,10              CONVERT TO KBYTES\n         LM    R0,R1,OCCUPCY      LOAD OCCUPANCY TIME\n         MR    R0,R6              AND MULTIPLY BY OCCUPANCY\n         STM   R0,R1,WORK         SAVE REGS\n         A     R0,C1MSAVE         ADD HIGH ORDER WORD\n         AL    R1,C1MSAVE+4       ADD CURRENT STEP IN\n         BNO   *+8                OVERFLOW ?\n         A     R0,=F'1'           YES - ADD IT IN\n         STM   R0,R1,C1MSAVE      SAVE BACK DOWN\n         LM    R0,R1,WORK         RESTORE REGS\n         B     JOBC1M             GO DO IT\n*\nJOBMEM   L     R4,16              CVT POINTER\n         L     R4,0(R4)           TCB WORDS POINTER\n         L     R4,4(R4)           CURRENT TCB POINTER\n         L     R4,X'A4'(R4)       CURRENT TCT POINTER\n         L     R5,8(R4)           GET TCT STORAGE TABLE ADDRESS\n         L     R6,0(R5)           GET REGION USED FROM BOTTOM\n         A     R6,4(R5)           ADD REGION USED FROM TOP\n         L     R2,16              CVT POINTER\n         L     R2,0(R2)           TCB WORDS\n         L     R2,12(R2)          CURRENT ASCB POINTER\n         TM    52(R2),X'10'       IS THIS A V=R ADDRESS SPACE ?\n         BO    *+8                YES - SKIP EXTENDED PRIVATE\n         A     R6,20(R5)          ADD EXTENDED PRIVATE AREA\n         SRL   R6,10              CONVERT TO KBYTES\n         LM    R0,R1,OCCUPCY      LOAD OCCUPANCY TIME\n         MR    R0,R6              AND MULTIPLY BY OCCUPANCY\n*\nJOBC1M   SRDL  R0,10              CONVERT TO  MBYTE-MILLISECS\n         D     R0,=F'3600'        CONVERT TO  MBYTE-MILLIHOURS\n         C     R0,=F'1800'        MORE THAN 1/2\n         BNH   *+8                NO - SKIP ADDING\n         A     R1,=F'1'           ADD ONE\n         LTR   R1,R1              ANYTHING ?\n         BZ    C1PPRNT            NO - DON'T PRINT LINE\n         CVD   R1,WORK            MAKE DECIMAL\n         L     R0,CFACT1M         MULTIPLY BY C1M FACTOR\n         LA    R2,LINE1M          POINT TO LINE TO BE WRITTEN\n         L     R15,=A(BLNE1M)     POINT BATCH TITLE IF NEEDED\n         BAL   R3,FORMATM         THEN WRITE IT OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PRINT PAGES CHARGE (C1P)                                     *\n*                                                                     *\n***********************************************************************\nC1PPRNT  L     R1,PAGES           GET PAGES COUNT\n         LTR   R1,R1              ANYTHING ?\n         BZ    TOTCODE            NO - DON'T PRINT LINE\n         CVD   R1,WORK            MAKE DECIMAL\n         L     R0,CFACT1P         MULTIPLY BY TOTAL C FACTOR * 10E6\n         LA    R2,LINE1P          POINT TO LINE TO BE WRITTEN\n         L     R15,=A(BLNE1P)     POINT BATCH TITLE IF NEEDED\n         BAL   R3,FORMATM         THEN WRITE IT OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*              TOTAL COST                                             *\n*                                                                     *\n***********************************************************************\nTOTCODE  L     R1,DOLTOT          GET TOTAL DOLLARS (STEP)\n         CVD   R1,WORK            MAKE DECIMAL\n         MVC   LINETO+68(09),=X'4020202021204B2020'\n         ED    LINETO+68(09),WORK+4 DO THE EDIT\n         MVI   LINETO+68,C'$'     REPLACE $\n         CLI   OSSFLAG,X'FF'      ARE WE OUTSIDE SALES ?\n         BNE   *+16               NO - SKIP OVERWRITE\n         MVC   LINETO+48(6),=C'  *.**'   DON'T DISPLAY IT\n         MVC   LINETO+69(8),=C'    *.**' DON'T DISPLAY IT\n         L     R2,=A(LINETX)      POINT TO LINE TO BE WRITTEN\n         LA    R15,STAR1          POINT BATCH TITLE IF NEEDED\n         BAL   R3,PRINTER         THEN WRITE IT OUT\n         LA    R2,LINETO          POINT TO LINE TO BE WRITTEN\n         LA    R15,STAR1          POINT BATCH TITLE IF NEEDED\n         BAL   R3,PRINTER         THEN WRITE IT OUT\n         EJECT\n*\n*              RETURN\n*\nEXITA    LA    R2,STAR1           POINT TO LINE TO BE WRITTEN\n         LA    R15,STAR1          POINT BATCH TITLE IF NEEDED\n         BAL   R3,PRINTER         THEN WRITE IT OUT\n         CLI   IEFFLAG,X'FF'      ARE WE IEFACTRT ?\n         BNE   CKJES              NO - WE MAY NEED EXTRA LINES\n         CLI   T05FLAG,X'FF'      ARE WE A TYPE 5 ?\n         BE    CKJES              YES - WE MAY NEED EXTRA LINES\n         CLI   TSOFLAG,X'F0'      TSO (TYPE 34)?\n         BNE   LSTAR              NO - DON'T  NEED EXTRA LINES (TYPE 4)\nCKJES    CLI   JESFLAG,X'FF'      DID JES SSOB FAIL ?\n         BNE   OSSCK              NO - SKIP PUTTING IN (GOT REAL STUFF)\n         L     R15,=A(BLNEXX)     POINT BATCH TITLE IF NEEDED\n         L     R2,=A(BLNETT)      POINT TO LINE TO BE WRITTEN\n         BAL   R3,PRINTER         THEN WRITE IT OUT\nOSSCK    CLI   OSSFLAG,X'FF'      OUTSIDE SALES ?\n         BNE   *+20               NO - GO PUT OUT LAST LINE\n         L     R15,=A(BLNEOS)     POINT BATCH TITLE IF NEEDED\n         LA    R2,30(R15)         POINT TO LINE TO BE WRITTEN\n         BAL   R3,PRINTER         WRITE IT OUT\n         B     *+12               SKIP OVER TEST\n         CLI   JESFLAG,X'FF'      DID WE PUT OUT EXTRA LINE ?\n         BNE   LSTAR              NO - SKIP EXTRA LINE\n         LA    R2,STAR1           POINT TO LINE TO BE WRITTEN\n         LA    R15,STAR1          POINT BATCH TITLE IF NEEDED\n         BAL   R3,PRINTER         THEN WRITE IT OUT\nLSTAR    LA    R2,STARS           POINT TO LINE TO BE WRITTEN\n         LA    R15,STARS          POINT BATCH TITLE IF NEEDED\n         BAL   R3,PRINTER         THEN WRITE IT OUT\n         CLI   IEFFLAG,X'FF'      ARE WE IEFACTRT ?\n         BE    NOCLOSE            YES - BYPASS CLOSE\n         CLI   TSOFLAG,X'F0'      ARE WE TSO ?\n         BNE   CLOSER             NO - MUST DO CLOSE\n         CLI   TJBFLAG,X'FF'      ARE WE TSO-JOB ?\n         BNE   NOCLOSE            NO - WILL DO TPUTS\nCLOSER   CLOSE MF=(E,OPENPL)\nNOCLOSE  CLI   T05FLAG,X'FF'      WAS THIS A TYPE 5 ?\n         BNE   STOP               NO - JUST RETURN\n         LA    R2,SMFWSIZ         GET SIZE OF WORKAREA\n         A     R2,=F'7'           ROUND UP TO\n         N     R2,=X'FFFFFFF8'    A DOUBLE WORD\n         LTR   R9,R9              STILL THERE ?\n         BZ    CLEAR              NO\n      FREEMAIN R,LV=(R2),A=(R9),SP=255  FREEMAIN WORK AREA\nCLEAR    L     R2,SAV1            GET PARM AREA ADDRESS\n         L     R2,0(R2)           GET COMMON EXIT AREA\n         MVC   33(3,R2),X'000000' ZERO OUT USER COMMUNICATIONS FIELD\nSTOP     LA    R2,CDUWSIZ         GET SIZE OF WORKAREA\n         A     R2,=F'7'           ROUND UP TO\n         N     R2,=X'FFFFFFF8'    A DOUBLE WORD\n         L     R13,4(R13)         BACK CHAIN SAVE AREAS\n      FREEMAIN R,LV=(R2),A=(R11)  FREEMAIN WORK AREA\n        RETURN (14,12),RC=0       RETURN\n         EJECT\nFORMATM  MVC   18(12,R2),=X'402020206B2021204B202020'\n         ED    18(12,R2),WORK+3   DO THE EDIT\n         MVI   18(R2),C'='        PUT '=' BACK\n*\nFORMATX  CVD   R0,WORK            MAKE DECIMAL\n         MVC   46(09,R2),=X'40202021204B202040'\n         ED    46(09,R2),WORK+3   DO THE EDIT\n         MVI   47(R2),C'='        PUT '=' BACK\n         MR    R0,R0              MULTIPLY BY RATE\n         CVD   R0,WORK            MAKE DECIMAL\n         D     R0,=F'1000000'     GET CDUS * 1000\n         C     R0,=F'500000'      MORE THAN 1/2\n         BNH   *+8                NO - SKIP ADDING\n         A     R1,=F'1'           ADD ONE\n         M     R0,CDURATE         MULTIPLY BY TOTAL $/CDU * 100\n         D     R0,=F'1000'        GET ACTUAL DOLLARS\n         C     R0,=F'500'         MORE THAN 1/2\n         BNH   *+8                NO - SKIP ADDING\n         A     R1,=F'1'           ADD ONE\n         L     R14,DOLTOT         GET DOLLARS TOTAL (STEP)\n         AR    R14,R1             ACCUMULATE DOLLARS\n         ST    R14,DOLTOT         SAVE DOLLARS TOTAL (STEP)\n         CVD   R1,WORK            MAKE DECIMAL\n         MVC   68(09,R2),=X'4020202021204B2020'\n         ED    68(09,R2),WORK+4   DO THE EDIT\n         MVI   68(R2),C'$'        REPLACE $\n         CLI   OSSFLAG,X'FF'      ARE WE OUTSIDE SALES ?\n         BNE   *+16               NO - SKIP OVERWRITE\n         MVC   48(06,R2),=C'  *.**'   DON'T DISPLAY IT\n         MVC   69(08,R2),=C'    *.**' DON'T DISPLAY IT\nPRINTER  CLI   TSOFLAG,X'F0'      ARE WE TSO ?\n         BE    TPUTER             YES - POSSIBILITY OF TPUT EXISTS\nBATMAT   L     R14,=A(BLNEXX)     C1G LINE  ADDRESS\n         CLC   0(25,R15),0(R14)   C1G SPECIAL LINE?\n         BE    PTALLT             NO - MOVE IT AROUND\n         L     R14,=A(ABORT1)     NEXT TEST\n         CLC   0(50,R15),0(R14)   ABORT LINE ?\n         BNE   *+14               NO - MOVE IT AROUND\nPTALLT   MVC   BATLINE(111),0(R15) MOVE IN WHAT WE GOT\n         B     PTTEST             AND GO ON\n         MVC   BATLINE(50),0(R15) MOVE IN BATCH TITLE\n         MVC   BATLINE+48(60),18(R2) MOVE TO BATLINE\n         MVC   BATLINE+108(2),BATLINE+107 FIX UP LINE END\nPTTEST   LA    R2,BATLINE         POINT TO IT\n         CLI   IEFFLAG,X'FF'      ARE WE IEFACTRT ?\n         BE    IEFPUT             YES - GO WRITE TO SYSMSG\nPUTIT    PUT   CUUPRINT,(R2)      NO - MUST BE PLAIN BATCH\n         BR    R3                 AND RETURN\nTPUTER   CLI   IEFFLAG,X'FF'      ARE WE IEFACTRT ?\n         BE    BATMAT             YES - GO FORMAT AND WRITE TO SYSMSG\n         L     R14,=A(BLNEOS)     OUTSIDE SALES LINE\n         CLC   0(10,R2),30(R14)   SPECIAL FIX UP NEEDED?\n         BNE   TPUTTZ             NO\n         MVC   BATLINE(4),=CL4'*   ' MOVE IN NEW STRING\n         MVC   BATLINE+4(74),4(R2) REST OF LINE\n         MVC   BATLINE+78,=CL2'* ' LAST CHARACTERS\n         LA    R2,BATLINE         CHANGE POINTER\n         B     TPUTTS             AND CONTINUE\nTPUTTZ   L     R14,=A(ABORT1)     ABORT MESSAGE?\n         CLC   0(50,R2),0(R14)    SPECIAL FIX UP NEEDED?\n         BNE   TPUTTS             NO\n         MVC   BATLINE(4),=CL4'*   ' MOVE IN NEW STRING\n         MVC   BATLINE+4(74),20(R2) REST OF LINE\n         MVC   BATLINE+78,=CL2'* ' LAST CHARACTERS\n         LA    R2,BATLINE         CHANGE POINTER\nTPUTTS   CLI   TJBFLAG,X'FF'      ARE WE TSO-JOB ?\n         BE    PUTIT              YES - GO DO PUT TO CUUPRINT\n         TPUT  (R2),79,MF=(E,TPUT) TPUT TO TERMINAL\n         BR    R3                 AND RETURN\nIEFPUT   L     R12,SAV12          RESTORE REG 12\n         ST    R2,36(,R12)        SAVE ADDR OF MSG IN IEFYS PARM AREA\n         LA    R14,111            ASSUME A LENGTH OF 111 CHARACTERS\n         STH   R14,42(,R12)       SAVE LENGTH OF MSG IN IEFYS PARM\n         ST    R13,SAV13          SAVE REG 13\n         LA    R13,IEFYSWA        45 WORD WORK AREA FOR IEFYS\n         L     R15,=V(IEFYS)\n         LTR   R15,R15            IS IT THERE ?\n         BZ    *+6                NO - SKIP THE 0C1\n         BALR  R14,R15\n         L     R12,=V(CFACTOR)    RESTORE REG 12\n         L     R13,SAV13      RESTORE REG 13\n         BR    R3                 AND RETURN\n         EJECT\nSTARS    DC    79C'*'\n         DC    CL1' '\nSTAR1    DC    CL78'*'\n         DC    CL2'* '\n         LTORG\n         EJECT\n         PRINT GEN\nSSOB     DSECT\n      IEFJSSOB CS,CONTIG=NO       SSOB HEADER + NON-CONTIG SSOB\n         PRINT NOGEN\n         EJECT\nCFACTOR  DSECT\n*\nEYECATCH DS    CL12               EYECATCHER FOR ZAPING\nCDURATE  DS    F                  CENTS PER CDU (JAN 1987)\n*\nSTANDSRM DS    F                  STANDARD CPU SRM CONSTANT * 10\n*\nBYTTGET  DS    F                  \"AVERAGE\" TERM TGET BYTES\nBYTTPUT  DS    F                  \"AVERAGE\" TERM TPUT BYTES\n*\nCFACT1A  DS    F                  NET C1A * 1000000\nCFACT1B  DS    F                  NET C1B * 1000000\nCFACT1C  DS    F                  NET C1C * 1000000\nCFACT1D  DS    F                  NET C1D * 1000000\nCFACT1F  DS    F                  NET C1F * 1000000\nCFACT1G  DS    F                  NET C1G * 1000000\nCFACT1J  DS    F                  NET C1J * 1000000\nCFACT1M  DS    F                  NET C1M * 1000000\nCFACT1P  DS    F                  NET C1P * 1000000\n         EJECT\nTOTWORK  DSECT\nSMFWORK  EQU   *\nT40SAVE  DS    F                  TYPE 40 I/O COUNTER (FROM IEFU83)\n         DS    F                  EXTRA WORD FOR FUTURE USE\nC1ASAVE  DS    F                  TOTAL JOB TCB MILLISECONDS (C1A)\nC1CSAVE  DS    F                  TOTAL JOB TAPE MOUNTS (C1C)\n         DS    F                  EXTRA WORD FOR FUTURE USE\n         DS    F                  EXTRA WORD FOR FUTURE USE\nC1MSAVE  DS    D                  TOTAL JOB VMEM OCCUPANCY (C1M)\nC1FSAVE  DS    D                  TOTAL JOB COMM (C1F) (TPUT,TGET)\nC1JSAVE  DS    D                  TOTAL JOB I/O TIME (C1J) (DISK,TAPE)\n         DS    D                  EXTRA DOUBLE WORD FOR FUTURE USE\n         DS    D                  EXTRA DOUBLE WORD FOR FUTURE USE\nSMFWSIZ  EQU   *-SMFWORK          LENGTH OF WORK AREA\n         EJECT\nCDUWORK  DSECT\nCDUSAVE  DS    18F                SAVE AREA\nIEFYSWA  DS    18F                18 WORD WORK AREA FOR IEFYS\nOUCBFLG  DS    F                  HOLDER FOR OUCBFLG FIELD\nADJUST   DS    F                  CPU ADJUST FACTOR (SYSADJ*1000)\nSAV1     DS    F                  SAVE REG 1\nSAV12    DS    F                  SAVE REG 12 FOR CALL TO IEFYS\nSAV13    DS    F                  SAVE REG 13 DURING CALL TO IEFYS\nRECPTR   DS    F                  POINTER TO SMF RECORD\nTCTPTR   DS    F                  POINTER TO TCT\nLASTONE  DS    F                  POINTER TO LAST (ZERO) ARRAY ENTRY\nIEFFLAG  DS    XL1                IEFACTRT/USER SWITCH\nTJBFLAG  DS    XL1                TSO-JOB FLAG\nBATLINE  DS    CL111              BATCH LINE WORK AREA\nWORK     DS    D                  CVD/EDIT WORK AREA\nCUUPRINT DS    0D\n         DCB   DDNAME=CUUPRINT,MACRF=PM,DSORG=PS,                      X\n               RECFM=F,LRECL=111,BLKSIZE=111\nTPUT     TPUT  ,,MF=L\n         DS    0D\nDMPARM   DS    XL1,AL3            ADDRESS OF DMC HEADER\nDMAREA   DS    CL4                CONTROL BLOCK IDENTIFIER\nDMADDR   DS    AL4                CONTROL BLOCK ADDRESS\nDMC      DS    XL84               DMC ITSELF\nSSPARM   DS    XL1,AL3            ADDRESS OF SSOB HEADER\nSSAREA   DS    CL4                CONTROL BLOCK IDENTIFIER\n         DS    AL2                LENGTH OF SSOB HEADER\n         DS    AL2                FUNCTION ID\n         DS    AL4                ADDRESS OF SSIB OR ZERO\nSSOBRC   DS    F                  RETURN CODE FROM SUBSYSTEM\nSSOBPTR  DS    AL4                FUNCTION DEPENDENT AREA POINTER\n         DS    F                  SAVE RETURN ADDRESS FOR 31 BIT CALL\n         DS    CL4                RESERVED\nOPENPL   DS    F                  OPEN PARM LIST\nLINE1A   DS    CL80               C1A CHARGES\nLINE1B   DS    CL80               C1B CHARGES\nLINE1C   DS    CL80               C1C CHARGES\nLINE1F   DS    CL80               C1F CHARGES\nLINE1G   DS    CL80               C1G CHARGES\nLINE1J   DS    CL80               C1J CHARGES\nLINE1M   DS    CL80               C1M CHARGES\nLINE1P   DS    CL80               C1P CHARGES\nLINETO   DS    CL80               TOTAL CHARGES\nCDUTOT   DS    F                  CDU TOTAL (STEP)\nDOLTOT   DS    F                  DOLLAR TOTAL (STEP)\nSPOOL    DS    F                  SPOOLED LINE ACCUMULATOR\nPRINT    DS    F                  PRINTED LINE ACCUMULATOR\nPAGES    DS    D                  PAGES,CDU  ACCUMULATOR\nTCBSECS  DS    F                  HOLDER FOR TCB MILLISECONDS\nTAPEMTS  DS    F                  HOLDER FOR TAPE MOUNTS\nOCCUPCY  DS    D                  HOLDER FOR JOB OCCUPANCY TIME\nTSOFLAG  DS    XL1                BATCH/TSO SWITCH + OVERNITE CLASS\nT05FLAG  DS    XL1                WE HAVE A TYPE05 RECORD FOLKS\nOSSFLAG  DS    XL1                WE HAVE AN OUTSIDE SALES PCS NUMBER\nJESFLAG  DS    XL1                JES SSOB PROCESSING FAILED\nCDUWSIZ  EQU   *-CDUSAVE          LENGTH OF WORK AREA\nCDUISIZ  EQU   *-CUUPRINT         LENGTH TO INITIALIZE\n         EJECT\nJOBCUU$  CSECT\nINITDCB  DS    0D\n         DCB   DDNAME=CUUPRINT,MACRF=PM,DSORG=PS,                      X\n               RECFM=F,LRECL=111,BLKSIZE=111\n         TPUT  ,,MF=L\n         DS    0D\n         DC    X'80',AL3(0)       ADDRESS OF DMC HEADER\n         DC    C'DMC '            CONTROL BLOCK IDENTIFIER\n         DC    A(0)               ADDRESS OF DMC\n         DC    XL84'00'           DMC ITSELF\n         DC    X'80',AL3(0)       ADDRESS OF SSOB HEADER\n         DC    C'SSOB'            CONTROL BLOCK IDENTIFIER\n         DC    AL2(SSOBHSIZ)      LENGTH OF SSOB HEADER\n         DC    AL2(03)            FUNCTION ID (JOB STATUS - SPECIAL)\n         DC    A(0)               ADDRESS OF SSIB OR ZERO\n         DC    F'0'               RETURN CODE FROM SUBSYSTEM\n         DC    A(0)               FUNCTION DEPENDENT AREA POINTER\n         DC    F'0'               SAVE RETURN ADDRESS FOR 31 BIT CALL\n         DC    XL4'00000000'      RESERVED\n         DC    XL4'80000000'      OPEN PARM LIST\n         DC    CL36'* CPU PROCESS MIN =            NUUS '\n         DC    CL19'   1A RATE =       '\n         DC    CL25'   1A COST = $         * '\n         DC    CL36'* CPU PROCESS MIN =            NUUS '\n         DC    CL19'   1B RATE =       '\n         DC    CL25'   1B COST = $         * '\n         DC    CL36'* TAPE VOL MOUNTS =            NUUS '\n         DC    CL19'   1C RATE =       '\n         DC    CL25'   1C COST = $         * '\n         DC    CL36'* COMM MBYTE XFER =            NUUS '\n         DC    CL19'   1F RATE =       '\n         DC    CL25'   1F COST = $         * '\n         DC    CL36'* 10K REC SPL+PRT =            NUUS '\n         DC    CL19'   1G RATE =       '\n         DC    CL25'   1G COST = $         * '\n         DC    CL36'* DASD CONECT MIN =            NUUS '\n         DC    CL19'   1J RATE =       '\n         DC    CL25'   1J COST = $         * '\n         DC    CL36'* VMEM MBYTE-HOUR =            NUUS '\n         DC    CL19'   1M RATE =       '\n         DC    CL25'   1M COST = $         * '\n         DC    CL36'* FORMS: 1K PAGES =            NUUS '\n         DC    CL19'   1P RATE =       '\n         DC    CL25'   1P COST = $         * '\n         DC    CL36'*                                   '\n         DC    CL19'                   '\n         DC    CL25'TOTAL COST = $         * '\n         DC    F'0'               CDU TOTAL (STEP)\n         DC    F'0'               DOLLAR TOTAL (STEP)\n         DC    F'0'               SPOOLED LINE ACCUMULATOR\n         DC    F'0'               PRINTED LINE ACCUMULATOR\n         DC    D'0'               PAGES ACCUMULATOR\n         DC    F'0'               HOLDER FOR TCT POINTER\n         DC    F'0'               HOLDER FOR TCB MILLISECONDS\n         DC    F'0'               HOLDER FOR DASD IO MILLISECONDS\n         DC    F'0'               HOLDER FOR TAPE MOUNTS\n         DC    D'0'               HOLDER FOR JOB OCCUPANCY TIME\n         DC    XL1'00'            BATCH/TSO SWITCH\n         DC    XL1'00'            WE HAVE A TYPE05 RECORD FOLKS\n         DC    XL1'00'            WE HAVE AN OUTSIDE SALES PCS NUMBER\n         DS    XL1'00'            JES SSOB PROCESSING FAILED\n*\nBLNE1A   DC    CL50'*     CPU PROCESSING (ADJUSTED TCB+SRB MINUTES)  ='\nBLNE1B   DC    CL50'*     CPU PROCESSING (ADJUSTED TCB+SRB MINUTES)  ='\nBLNE1C   DC    CL50'*                 TAPE SERVICES (VOLUME MOUNTS)  ='\nBLNE1F   DC    CL50'*     COMMUNICATIONS I/O (MEGABYTES TRANSFERED)  ='\nBLNE1G   DC    CL50'*   ESTIMATED OUTPUT SERV (10K REC SPL+PRT+PUN)  ='\nBLNE1J   DC    CL50'*             DASD I/O (DEVICE CONNECT MINUTES)  ='\nBLNE1M   DC    CL50'*     VIRTUAL MEMORY OCCUPANCY (MEGABYTE-HOURS)  ='\nBLNE1P   DC    CL50'*   ESTIMATED OUTPUT FORMS CHARGE (1,000 PAGES)  ='\nLINETX   DC    CL32'*                                       '\n         DC    CL23'                       '\n         DC    CL25'               ------- * '\nBLNEXX   DC    CL50'*     C1G AND C1P CHARGES ARE NOT ACTUALS FOR JOB '\n         DC    CL50'BUT THE RATE PER 10,000 LINES ON STANDARD ONE PART'\n         DC    CL11' FORM.    *'\nBLNETT   DC    CL50'*     C1G AND C1P CHARGES ARE RATE PER 1,000 LINES'\n         DC    CL30' ON STANDARD ONE PART FORM. * '\nBLNEOS   DC    CL50'*  YOU ARE AN OUTSIDE SALES USER. PLEASE CONTACT D'\n         DC    CL50'SD ADMINISTRATION AND FINANCE FOR YOUR ACTUAL CDU '\n         DC    CL11'RATE.     *'\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ABBW031": {"ttr": 4358, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (ABBW031)   /*\n      THIS USERMOD IS TO INSTALL THE\n      SVC MODULE FOR MASTERCAT\n\n      SVC = 242 - TYPE 3\n\n                                                     07/24/88 BRM  */.\n++VER (Z038) FMID(HBB2102) .\n++JCLIN .\n//ABBW031 JOB WC07N0323,'W1-5311  CR SINGER'\n//LPASVC  EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS1,NAME=LPALIB,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE  DD  DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN   DD  *\n   INCLUDE INCLUDE(IGC0024B)\n   NAME IGC0024B(R)\n/*\n++MOD (IGC0024B) LKLIB(INCLUDE) .\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW032": {"ttr": 4360, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW032) /* CAUSE ANY VOLUMES NOT IN VATLST TO BE PRIVATE\n\n           THIS MODIFICATION WILL CAUSE ANY VOLUMES THAT HAVE BEEN\n           FORGOTTEN IN THE VATLST TO BE MARKED PRIVATE/RESERVED\n           AT IPL (RATHER THAN PUBLIC/REMOVEABLE)-(R9=2020,RC=22).\n                                                                 */ .\n++ VER(Z038) FMID(JBB2220)        /*   MVSXA 2.2 BASE   */ .\n++ ZAP(IEAVAP00) DISTLIB(AOSC5) .\n EXPAND IEAVAP00(24)\n NAME IEAVAP00\n VER 0026 4190BFFF           LA    R09,4095(R10) SET UP BASE REG\n VER 027E 9608A022           OI    UCBSTAB,B'00001000'  PUBLIC\n VER 2A08 00000000  PATCH    DC    F'0'\n VER 2A0C 00000000  AREA     DC    F'0'\n VER 2A10 00000000\n*\n REP 027E 47F099E8           B     PATCH\n REP 2A08 94E3A022           NI    UCBSTAB,B'11100011'  RESET OTHERS\n REP 2A0C 9610A022           OI    UCBSTAB,B'00010000'  PRIVATE\n REP 2A10 47F0C260           B     BACK\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW042": {"ttr": 4362, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW042) /* CHANGE VOLUME DEFAULT BACK TO 'RETAIN':\n\n           THIS MODIFICATION WILL RESTORE VOLUME DEFAULT TO 'RETAIN'\n           (LIKE IT WAS BEFORE APPLYING SU 5). THE ZAP TO IEFAB434\n           IS IN ABBW045 DUE TO FMID MISMATCH.\n                                                            */ .\n++ VER(Z038) FMID(JBB2220) PRE(UY19677)    /* XA 22     */ .\n++ ZAP(IEFAB4A4) DISTLIB(AOSB3) .\n NAME IEFAB4A4\n*        ZAP TO CAUSE ALLOCATION TO ALWAYS USE 'RETAIN'\n VER 0416 9180C037   TM SIOTRETN(@12),B'10000000'\n VER 041A 4710A432   BO @RT00334\n REP 041A 47F0A432   B  @RT00334\n++ ZAP(IEFAB434) DISTLIB(AOSB3) .\n NAME IEFAB434\n VER 0236 9180C037   TM SIOTRETN(@12),B'10000000'\n VER 023A 47E0A22C   BNO @RF00162\n REP 0236 4700A22C\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW043": {"ttr": 4364, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW043) /* CAUSE NIP TO USE IEASYSXX (XX FROM TABLE):\n\n           THIS MODIFICATION CHANGES NIP SO THAT INSTEAD OF USING\n           IEASYS00 AS THE DEFAULT SYSP MEMBER IT WILL USE IEASYSXX\n           WHERE XX IS DETERMINED BY THE CPU SERIAL NUMBER AND A\n           TABLE LOOK UP. THIS INSURES THAT WITH A SHARED (OR\n           DUPLICATE) PARMLIB THAT EACH SYSTEM WILL BE STARTED\n           WITH THE CORRECT SYSP MEMBER.\n\n           10/04/87 - CHANGED SERIAL NUMBER FOR 3083 SY5\n           12/04/87 - ADDED   SERIAL NUMBER FOR 3090-600\n           12/31/87 - CHANGED SERIAL NUMBER FOR 3084 -> 3090-200\n           10/09/88 - REFIT FOR XA22\n           01/08/89 - ADDED SERIAL NUMBER FOR 3090-300 SY1\n                                                                 */ .\n++ VER(Z038) FMID(JBB2220)   /*       XA 22 BASE        */ .\n++ ZAP(IEAVNP03) DISTLIB(AOSC5) .\n NAME IEAVNP03\n*VER 049E D201,B382,B31C  NP3SYSDE MVC   LISTNAM(2),=C'00'\n*VER 04A4 47F0,9494                B     NP3MOVNM\n*VER 2F90 0000,0000       PATCHLOC DC    F'0'\n*VER 3058 0000,0000       PCH END  DC    F'0'\n*\n*REP 04A4 47F0,BF6E                B     PATCH+8  B=202A\n*REP 2F98 B202,BF66       PATCH+8  STIDP PATCHLOC (DOUBLE WORD BOUNDARY)\n*REP 2F9C 41A0,BF9E                LA    R10,TABLE    GET TABLE ADDRESS\n*REP 2FA0 95FF,A000       LOOP     CLI   0(R10),X'FF' ARE WE AT END?\n*REP 2FA4 4780,BF90                BE    DONE         YES - GET OUT\n*REP 2FA8 D504,BF67,A000           CLC   PATCHLOC+1(5),0(R10) THIS ONE?\n*REP 2FAE 4780,BF90                BE    DONE         YES - GET OUT\n*REP 2FB2 41A0,A007                LA    R10,7(R10)   NEXT ENTRY\n*REP 2FB6 47F0,BF76                B     LOOP         AND TEST\n*REP 2FBA D201,B382,A005  DONE     MVC   LISTNAM(2),5(R10) MOVE NAME\n*REP 2FC0 41A0,9FFF                LA    R10,4095(R9) RESTORE\n*REP 2FC4 47F0,9494                B     NP3MOVNM\n*\n REP 2FC8 074352,3090,E2F1 TABLE   DC    X'074352',X'3090',C'S1'\n REP 2FCF 174352,3090,E2F1         DC    X'174352',X'3090',C'S1'\n REP 2FD6 274352,3090,E2F1         DC    X'274352',X'3090',C'S1'\n REP 2FDD 170903,3090,E2F1         DC    X'170903',X'3090',C'S1'\n REP 2FE4 270903,3090,E2F1         DC    X'270903',X'3090',C'S1'\n REP 2FEB 070303,3090,E2F3         DC    X'070303',X'3090',C'S3'\n REP 2FF2 170303,3090,E2F3         DC    X'170303',X'3090',C'S3'\n REP 2FF9 270303,3090,E2F3         DC    X'270303',X'3090',C'S3'\n REP 3000 370303,3090,E2F4         DC    X'370303',X'3090',C'S4'\n REP 3007 470303,3090,E2F4         DC    X'470303',X'3090',C'S4'\n REP 300E 570303,3090,E2F4         DC    X'570303',X'3090',C'S4'\n REP 3015 282092,3083,E2F5         DC    X'282092',X'3083',C'S5'\n REP 301C 382092,3083,E7E7 <-XX    DC    X'382092',X'3083',C'XX'\n REP 3023 482092,3083,E8E8 <-YY    DC    X'482092',X'3083',C'YY'\n REP 302A 582092,3083,E9E9 <-ZZ    DC    X'582092',X'3083',C'ZZ'\n REP 3031 FF0000,0000,F0F0 PCH END DC    X'FF0000',X'0000',C'00'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW049": {"ttr": 4366, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW049) /*   WDSC SUBMIT EXIT ROUTINE\n\n   THIS PROGRAM WILL FORCE ALL JOBS SUBMITTED VIA TSO TO CONFORM\n   TO STANDARD JOB NAME, I.E. JOB NAME TO BEGIN WITH VALID DIVISION\n   CODE OR TSO USER ID.  IF JOB DOES NOT MEET THIS SPECIFICATION,\n   THEN IT WILL NOT BE SUBMITTED AND A MESSAGE WILL BE SENT TO THE\n   USER.\n                                                         */ .\n++ VER(Z038) FMID(HTE1402)  /* TSO/E REL 4 BASE */ .\n++ JCLIN .\n//GEN49 JOB Y51024509,'531-0 C SINGER'\n//SG21  EXEC LINKS,\n// PARM='XREF,LET,LIST,RENT,REUS,REFR',\n//    UNIT='3350',SER=IPLXXX,N=SYS1,NAME=CMDLIB,P1=' ',\n//    MOD=,P2=' ',CLASS=T\n//LK.SYSPUNCH DD DUMMY\n//SYSLIN DD *\n NAME IKJEFF10(R)\n/*\n++ SRC(IKJEFF10) DISTLIB(ACMDLIB) .\n         TITLE 'IKJEFF10 -- WDSC SUBMIT EXIT ROUTINE'\nIKJEFF10 CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\nSTART    DS    0H                 START IT UP\n         STM   R14,R12,12(R13)    SAVE REGISTERS\n         BALR  R10,0              LOAD R10\n         USING *,R10              USE R10 AS BASE REG\n         LR    R9,R1              SAVE POINTER TO POINTER\n         GETMAIN R,LV=SAVLGTH     GET SOME CORE\n         LR    R11,R1             SET UP ADRESSABILITY\n         USING WORK,R11           R8 POINTS TO SAVE AREA\n         ST    R13,SAV+4          STORE R13\n         LA    R14,SAV            GET ADDRESS TO SAVE AREA\n         ST    R14,8(R13)         STORE IT AWAY\n         LR    R13,R14            RESET R13\n         SPACE 2\n         L     R3,16              GET CVT POINTER\n         L     R3,0(R3)           GET TCB WORDS\n         L     R3,12(R3)          GET CURRENT ASCB POINTER\n         L     R3,172(R3)         GET POINTER TO JOBNAME FIELD\n         LTR   R3,R3              IS THIS A BATCH JOB?\n         BNZ   RETURN             ..YES, ALLOW SUBMIT\n         SPACE 2\n         L     R9,0(R9)           SAVE POINTER TO SUBMIT DSECT\n         USING IEDSECTD,R9        SET R9 POINTER TO SUBMIT DATA\n         L     R7,IESUBCTP        LOAD R7 WITH ADDR SUB POINTER\n         USING IESUBCTD,R7        MAKE R7 POINTER TO 2ND DSECT\n         L     R5,IEMSGP          LOAD R5 WITH MESSAGE TO REPLY\n         LTR   R5,R5              IS THERE A MESSAGE THERE?\n         BZ    CHKJOB             KEEP LOOKING\n         FREEMAIN R,LV=WORKLTH,A=(5)  FREE SAVE AREA\n         LA    R15,IEABORT        TERMINATE SUBMIT COMMAND RC=16\n         MVI   0(R7),IETJOB       RETURN ONLY JOB CARDS\n         B     RETURN             GET OUT OF HERE\nCHKJOB   DS    0H\n         TM    IESTMTYP,IESCONTN  IS THIS A CONTINUATION?\n         BO    ZERO               ..YES, DONT WANT TO SEE\n         TM    IETAKEEX,IETJOB    IS THIS A JOB CARD?\n         BO    CHKJOB1            ..YES, GO SEE IF VALID JOB NAME\nZERO     DS    0H\n         MVI   0(R7),IETJOB       RETURN ONLY JOB CARDS\n         LA    R15,IECONTIN       RETURN CODE OF ZERO\n         B     RETURN             GET OUT OF HERE\nCHKJOB1  DS    0H\n         L     R3,IECARDP         LOAD R3 POINTER TO JCL CARD\n         LR    R6,R3              SAVE POINTER TO JCL CARD\n         LA    R3,2(R3)           BUMP POINTER TO JOBNAME\n         LA    R4,PREEND          LOAD R4 TO LENGTH OF TABLE\n         LA    R5,PERF            LOAD R5 TO START OF TABLE\n         CLI   2(R6),C'$'         IS START OF JOB NAME $ FOR TSOID?\n         BNE   CHKJOB2            ..NO, GO SEE IF VALID DIVISION CODE\n         L     R2,IEUSRIDP        PUT ADDR OF USERID INTO R2\n         CLC   0(3,R2),2(R6)      COMPARE JOBNAME AND USERID (3 CHAR)\n         BE    ZERO               ..YES, LET JOB BE SUBMITTED\n         B     INVALID            ..NO, GOT INVALID JOBNAME\nCHKJOB2  DS    0H\n         CLC   2(2,R6),0(R5)      IS DIVISION CODE IN TABLE?\n         BE    ZERO               ..YES, LET JOB BE SUBMITTED\n         LA    R5,2(R5)           BUMP TABLE POINTER UP NEXT ENTRY\n         S     R4,=F'02'          SUBTRACT 2 BYTES FROM LGTH OF TBL\n         LTR   R4,R4              SEE IF R4 ZERO\n         BZ    INVALID            DIV CODE NOT IN TABLE\n         B     CHKJOB2            LOOP\nINVALID  DS    0H\n         GETMAIN R,LV=WORKLTH     GET SOME STORAGE\n         LR    R8,R1              SET R8 TO POINT AT STORAGE\n         USING WORKAREA,R8        WORKAREA IS DSECT\n         MVC   WORKLGTH,=X'0038'  MOVE LENGTH OF 56 FOR MESSAGE\n         LA    R5,8               LOAD MAX LENGTH OF JOBNAME\n         LR    R2,R3              LOAD R2 TO BEGINNING OF JOBNAME\nLOOP     DS    0H\n         CLI   0(R2),C' '         FIND A BLANK?\n         BE    PRINT              ..YES, WRITE OUT INVALID JOBNAME\n         LA    R2,1(R2)           BUMP POINTER BY ONE\n         BCT   R5,LOOP            KEEP LOOPING\nPRINT    DS    0H\n         LA    R2,8               LOAD WITH MAXIMUM JOBNAME LENGTH\n         SR    R2,R5              SUBTRACT # BYTES USED\n         LTR   R2,R2              MAKE SURE R2 HAS SOMETHING IN IT\n         BZ    WRITEIT            NO, IT IS EMPTY\n         S     R2,=F'01'          SUBTRACT ONE FOR EXECUTE\nWRITEIT  DS    0H\n         MVC   WORKMSG,MSGCONST   MOVE IN INVALID MSG\n         EX    R2,MOVE            MOVE JOBNAME TO MESSAGE\n         ST    R8,IEMSGP          STORE POINTER TO MESSAGE AWAY\n         LA    R15,IEMSG          SET RETURN CODE\n         B     RETURN             RETURN\nMOVE     MVC   WORKMSG+46(0),0(R3) MOVE IN JOBNAME\nRETURN   DS    0H\n         L     R13,SAV+4          RESTORE R13\n         ST    R15,16(R13)        STORE RETURN CODE\n         FREEMAIN R,LV=SAVLGTH,A=(11) FREE SAVE AREA\n         LM    R14,R12,12(R13)    RESTORE REGISTERS\n         BR    R14                RETURN\n         EJECT\n         DS    0F\nPERF     DC    CL2'WC'           WESTERN CENTER\n         DC    CL2'SD'           SAN DIEGO\n         DC    CL2'PD'           POMONA\n         DC    CL2'ED'           ELECTRONICS\n         DC    CL2'DX'           DATAGRAPHIX\n         DC    CL2'CW'           CORPORATE WIDE\n         DC    CL2'GF'           GENERAL FIELD\n         DC    CL2'GS'           GENERAL SERVICES\n         DC    CL2'DS'           DSS\n         DC    CL2'OH'           HOME OFFICE - DSS\n         DC    CL2'FC'           CENTRAL CENTER\n         DC    CL2'FS'           FINANCIAL SERVICES\n         DC    CL2'FW'           FORT WORTH\n         DC    CL2'VS'           VALLEY SYSTEMS\n         DC    CL2'SS'           SPACE SYSTEMS\n         DC    CL2'EC'           EASTERN CENTER\n         DC    CL2'EB'           ELECTRIC BOAT\n         DC    CL2'GD'           CORPORATE OFFICE\n         DC    CL2'XC'           WDSC AND CONVAIR TOGETHER\n         DC    CL2'YF'           CDSC AND FORT WORTH TOGETHER\n         DC    CL2'ZE'           EDSC AND ELECTIC BOAT TOGETHER\n         DC    CL2'AM'           AMSEA\n         DC    CL2'AS'\n         DC    CL2'C0'           SAN DIEGO\n         DC    CL2'C1'           SAN DIEGO\n         DC    CL2'C2'           SAN DIEGO\n         DC    CL2'C3'           SAN DIEGO\n         DC    CL2'C4'           SAN DIEGO\n         DC    CL2'C5'           SAN DIEGO\n         DC    CL2'C6'           SAN DIEGO\n         DC    CL2'C7'           SAN DIEGO\n         DC    CL2'C8'           SAN DIEGO\n         DC    CL2'C9'           SAN DIEGO\n         DC    CL2'CM'           SPACE SYSTEMS COMMERICAL LAUNCH\n         DC    CL2'EP'           EL PASO SAND\n         DC    CL2'FA'           ABILENE\n         DC    CL2'FP'           FREEMAN UNITED COAL - PVT\n         DC    CL2'LS'           LAND SYSTEMS\n         DC    CL2'LL'           LASER SYSTEMS\n         DC    CL2'MP'           MARBLE HEAD LIME - PVT\n         DC    CL2'PP'           EL PASO SAND - PVT\n         DC    CL2'RR'           FORE RIVER RAILROAD\n         DC    CL2'SP'           MATERIAL SERVICE - PVT\n         DC    CL2'TM'\n         DC    CL2'CL'\n         DC    CL2'CF'\n         DC    CL2'CV'\n         DC    CL2'ET'\n         DC    CL2'WT'\n         DC    CL2'AV'\n         DC    CL2'EG'\n         DC    CL2'EQ'\n         DC    CL2'EL'\n         DC    CL2'DY'\n         DC    CL2'ER'\n         DC    CL2'FR'\n         DC    CL2'WF'\n         DC    CL2'ML'\n         DC    CL2'DB'\n         DC    CL2'MS'\n         DC    CL2'QY'\n         DC    CL2'BP'\n         DC    CL2'SC'\n         DC    CL2'RC'\n         DC    CL2'SF'\n         DC    CL2'CA'           CAMDEN (ARKANSAS)\n         DC    CL2'AR'\n         DC    CL2'CH'\n         DC    CL2'UE'\n         DC    CL2'SM'\n         DC    CL2'SL'\n         DC    CL2'GA'\n         DC    CL2'LC'\n         DC    CL2'WP'\n         DC    CL2'ES'\nPREEND   EQU   *-PERF\nMSGCONST DC    CL54'*** NON STANDARD JOBNAME, JOB NOT SUBMITTED - '\n         EJECT\n         LTORG\n         EJECT\nWORK     DSECT\n         DS    0F\nSAV      DS    18F   *** OS SAVE AREA ***\nSAVLGTH  EQU   *-WORK\nWORKAREA DSECT\nWORKLGTH DS    CL2\nWORKMSG  DS    CL54\nWORKLTH  EQU   *-WORKLGTH\n         IKJEFFIE IETYPE=SUBMIT   SUBMIT DSECT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW051": {"ttr": 4612, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW051) /* CHANGES TO HOT IO DETECT CONSTANTS:\n\n           THIS MODIFICATION INCREASES THE HOT IO DETECTION\n           THRESHOLD VALUES TO REDUCE THE POSSIBILITY OF A\n           FALSE DETECT.\n                                                                 */ .\n++ VER(Z038) FMID(JBB2220)    /*  XA 2.2 BASE */ .\n++ ZAP(IOSRHIDT) .\n NAME IOSRHIDT\n VER 0018 0064     HIDTCHAN DC    H'100'  CHANNEL I/O THRESHOLD\n*\n REP 0018 0200     HIDTCHAN DC    H'512'  CHANNEL I/O THRESHOLD\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW052": {"ttr": 4614, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW052) /* SUPPLY OUR IEAVMXIT ROUTINE\n\n         SUPPLIES OUR IEAVMXIT TO CHANGE ROUTE AND DESC CODES.\n         MAJOR PURPOSES OF OUR IEAVMXIT ARE:\n         1. ADD ROUTE CODE OF 14 TO ALL JOB ABEND MESSAGES.\n         2. CHANGE DESCRIPTOR CODE FOR SOME MESSAGES WHICH WE\n            WOULD REALLY NOT LIKE JES3 TO KEEP AROUND FOREVER.\n\n CHANGE ACTIVITY\n 10/20/88 J DAILEY       CONVERTED TO USER EXIT IEAVMXIT.\n                         REMOVED CHECKING FOR MASS STOR MESSAGES\n                           */ .\n++ VER(Z038) FMID(JBB2220)              /* XA BASE*/ .\n++ JCLIN .\n//GEN49 JOB WC07N0044,'531-1 CM SINGER'\n//SG21  EXEC LINKS,\n// PARM='XREF,LET,LIST,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS2,NAME=HSSLINK,P1=' ',\n//    MOD=,P2=' ',CLASS=T\n//LK.SYSPUNCH DD DUMMY\n//INCLUDE DD DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN DD *\n INCLUDE INCLUDE(IEAVMXIT)\n ENTRY IEAVMXIT\n NAME IEAVMXIT(R)\n++ SRC(IEAVMXIT) DISTLIB(ASRCLIB) .\nIEAVMXIT TITLE 'DSD WESTERN CENTER GENERAL WTO/WTOR EXIT'\n***********************************************************************\n*                                                                     *\n* MODULE NAME : IEAVMXIT                                              *\n*                                                                     *\n* DESCRIPTION : GENERALIZED WTO/WTOR USER EXIT                        *\n*                                                                     *\n* COPYRIGHT (C) GENERAL DYNAMICS                                      *\n*               DATA SYSTEMS DIVISION - WESTERN CENTER                *\n*                                                                     *\n* FUNCTION : THIS ROUTINE INTERCEPTS AND CHANGES THE ROUTING AND      *\n*            OR DESCRIPTOR CODES FOR CERTAIN SYSTEM MESSAGES.         *\n*            A COPY OF ALL ACF MESSAGES WILL BE FORCED TO SYSLOG.     *\n*                                                                     *\n*                                                                     *\n* DEPENDENCIES : NONE                                                 *\n*                                                                     *\n* RESTRICTIONS : CAN NOT ENTER AN 'MVS WAIT' OR INVOKE ANY SERVICE    *\n*                ISSUING AN 'MVS WAIT'.                               *\n*                                                                     *\n*                THIS EXIT MUST RESIDE IN A LIBRARY THAT IS IN THE    *\n*                'LNKLST' CONCATENATION.                              *\n*                                                                     *\n* PROCESSOR : ASSEMBLER H                                             *\n*                                                                     *\n* ATTRIBUTES : RE-ENTRANT, RE-USABLE, AMODE 31, RMODE ANY             *\n*                                                                     *\n* ENTRY POINT : IEAVMXIT                                              *\n*                                                                     *\n* ENTRY PURPOSE : MAIN ENTRY POINT                                    *\n*                                                                     *\n* LINKAGE : BALR FROM THE SYSTEMS COMMUNICATIONS TASK                 *\n*                                                                     *\n* INPUT : REGISTER 1 CONTAINS THE ADDRESS OF A POINTER TO THE         *\n*         COMMUNICATIONS TASK EXIT PARAMETER LIST (CTXT)              *\n*                                                                     *\n* OUTPUT : CERTAIN MESSAGES WILL HAVE THEIR DESCRIPTOR AND/OR         *\n*          ROUTING CODE CHANGED. THE CTXT WILL CONTAIN THE NEW        *\n*          ROUTING AND DESCRIPTOR CODES. FLAGS WILL BE SET TO         *\n*          TELL THE COMMUNICATIONS TASK THAT THIS EXIT MADE           *\n*          CHANGES TO THE MESSAGE.                                    *\n*                                                                     *\n* EXIT NORMAL : VIA CALLERS REGISTER 14                               *\n*                                                                     *\n* EXIT ERROR  : NONE                                                  *\n*                                                                     *\n* EXTERNAL ROUTINES : NONE                                            *\n*                                                                     *\n* REGISTER USAGE: R2  = COMMUNICATIONS TASK EXIT PARAMETER LIST       *\n*                 R3  = MESSAGE ATTRIBUTES AND TEXT                   *\n*                 R4  = -> MESSAGE ROUTING CODES                      *\n*                 R5  = -> MESSAGE DESCRIPTOR CODES                   *\n*                 R12 = MODULE BASE REGISTER                          *\n*                                                                     *\n* CONTROL BLOCKS  :                                                   *\n*                     IEZVX100                                        *\n*                                                                     *\n* EXECUTABLE MACROS : NONE                                            *\n*                                                                     *\n* MESSAGES: NONE                                                      *\n*                                                                     *\n* ABEND CODES : NONE                                                  *\n*                                                                     *\n* CHANGE ACTIVITY :                                                   *\n*                                                                     *\n* 10/20/88 J DAILEY        INITIAL IMPLEMENTATION                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nIEAVMXIT AMODE 31\nIEAVMXIT RMODE ANY\nIEAVMXIT CSECT ,\n         USING IEAVMXIT,R15\n         B     START\n         DC    CL9'IEAVMXIT'       MODULE NAME\n         DC    CL9'&SYSDATE'       ASSEMBLE DATE\n         DC    CL6'&SYSTIME'       ASSEMBLE TIME\n         DROP  R15\n*\nSTART    DS    0H\n         STM   14,12,12(R13)       SAVE CALLERS REGISTERS\n         LR    R12,R15             SET LOCAL BASE REGISTER\n         USING IEAVMXIT,R12        TELL THE ASSEMBLER ABOUT IT.\n*\n         L     R2,0(,R1)           SET PARAMETER LIST BASE\n         USING CTXT,R2\n         L     R3,CTXTTXPJ         MESSAGE TEXT BASE\n         USING CTXTATTR,R3\n         L     R4,CTXTRCP          MESSAGE ROUTING CODES\n         USING CTXTROUT,R4\n         L     R5,CTXTDCP          MESSAGE DESCRIPTOR CODES\n         USING CTXTDESC,R5\n         EJECT\n*********************************************************************\n*                                                                   *\n*        TURN OFF SECURITY ROUTING FOR ALL ACF MESSAGES             *\n*                                                                   *\n*********************************************************************\n*\n         CLC   =C'ACF',MSGID\n         BNE   NOTACF\n         NI    CTXTR002,TURNOFF-CTXTR09\n         B     SETRCHNG\n*\n*********************************************************************\n*                                                                   *\n*        FOLLOWING MESSAGES HAVE ROUTE CODE 14 ADDED                *\n*                                                                   *\n*********************************************************************\n*\nNOTACF   DS    0H\n         CLC   =C'IEF450I',MSGID   LOOK FOR (JOB ABENDED)\n         BE    SETR14              YES - GO ADD ROUTE CODE 14\n         CLC   =C'IEF451I',MSGID   LOOK FOR (JOB ENDED BY CC)\n         BE    SETR14              YES - GO ADD ROUTE CODE 14\n         CLC   =C'IEF452I',MSGID   LOOK FOR (JOB NOT RUN - JCL ERROR)\n         BE    SETR14              YES - GO ADD ROUTE CODE 14\n         CLC   =C'IEF453I',MSGID   LOOK FOR (JOB FAILED - JCL ERROR)\n         BNE   DESCODES            NO - GO DO DESC CODE CHANGES\n*\nSETR14   DS    0H\n         OI    CTXTR002,CTXTR14    ADD ROUTE CODE 14\n*\nSETRCHNG DS    0H\n         OI    CTXTRFB1,CTXTRCRC   INDICATE ROUTING CODE CHANGED\n         EJECT\n*********************************************************************\n*                                                                   *\n*        CHECK FOR DESCRIPTOR CODE CHANGE MESSAGES                  *\n*                                                                   *\n*********************************************************************\n*\nDESCODES DS    0H\n         CLC   =C'IEA000A',MSGID LOOK FOR INTERVENTION REQ MESSAGE\n         BE    SETD4A              THEN CHANGE DESCRIPTOR CODE TO 4\n         CLC   =C'IOS003A',MSGID LOOK FOR INTERVENTION REQ MESSAGE\n         BE    SETD4A              THEN CHANGE DESCRIPTOR CODE TO 4\n         CLC   =C'IEA000I',MSGID LOOK FOR INTERVENTION REQ MESSAGE\n         BNE   SETD4C              THEN CHANGE DESCRIPTOR CODE TO 4\n*\nSETD4A   DS    0H\n         CLC   =C'00E',MSGID+8     PRINTER ????\n         BE    SETD4               THEN CHANGE DESCRIPTOR CODE TO 4\n         CLC   =C'00F',MSGID+8     PRINTER ????\n         BE    SETD4               THEN CHANGE DESCRIPTOR CODE TO 4\n         CLC   =C'011',MSGID+8     PRINTER ????\n         BE    SETD4               THEN CHANGE DESCRIPTOR CODE TO 4\n         CLC   =C'610',MSGID+8     PRINTER ????\n         BE    SETD4               THEN CHANGE DESCRIPTOR CODE TO 4\n         CLC   =C'620',MSGID+8     PRINTER ????\n         BE    SETD4               THEN CHANGE DESCRIPTOR CODE TO 4\n         CLC   =C'630',MSGID+8     PRINTER ????\n         BE    SETD4               THEN CHANGE DESCRIPTOR CODE TO 4\n         CLC   =C'640',MSGID+8     PRINTER ????\n         BE    SETD4               THEN CHANGE DESCRIPTOR CODE TO 4\n         CLC   =C'650',MSGID+8     PRINTER ????\n         BE    SETD4               THEN CHANGE DESCRIPTOR CODE TO 4\n         CLC   =C'660',MSGID+8     PRINTER ????\n         BE    SETD4               THEN CHANGE DESCRIPTOR CODE TO 4\n*\nSETD4C   DS    0H\n         CLC   =C'IEA911E',MSGID   LOOK FOR 'SYS1.DUMP' MESSAGE\n         BE    SETD4               THEN CHANGE DESCRIPTOR CODE TO 4\n         CLC   =C'IEA994A',MSGID   LOOK FOR 'ALL DUMPS FULL' MESSAGE\n         BE    SETD4               THEN CHANGE DESCRIPTOR CODE TO 4\n         CLC   =C'IST129I',MSGID   LOOK FOR VTAM ERROR MESSAGE\n         BE    SETD4               THEN CHANGE DESCRIPTOR CODE TO 4\n         CLC   =C'IST852I',MSGID   LOOK FOR VTAM ERROR MESSAGE\n         BE    SETD4               THEN CHANGE DESCRIPTOR CODE TO 4\n         CLC   =C'IAT6360',MSGID   LOOK FOR JES3 CHECK POINT MESSAGE\n         BE    SETD4               THEN CHANGE DESCRIPTOR CODE TO 4\n         CLC   =C'ACF0B900',MSGID  LOOK FOR ACF2 ERROR MESSAGE\n         BE    SETD4               THEN CHANGE DESCRIPTOR CODE TO 4\n         CLC   =C'ACF0B906',MSGID  LOOK FOR ACF2 ERROR MESSAGE\n         BE    SETD4               THEN CHANGE DESCRIPTOR CODE TO 4\n         CLC   =C'ACF999',MSGID    LOOK FOR ACF2 ERROR MESSAGE\n         BNE   RETURN              NO, TIME TO EXIT...STAGE RIGHT\n*\nSETD4    DS    0H\n         MVI   CTXTDC1,CTXTDC04    SET DESCRIPTOR CODE 4\n         OI    CTXTRFB1,CTXTRCDC   INDICATE DESCRIPTOR CODE CHANGED\n         OI    CTXTRFB2,CTXTRNRT   DO NOT RETAIN IN AMR FACILITY\n*\nRETURN   DS    0H\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGISTER\n         BR    R14                 RETURN TO CALLER\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\nTURNOFF  EQU   255\n*\n         LTORG\n         TITLE 'COMMUNICATIONS TASK EXIT PARAMETER LIST'\n         IEZVX100\nCTXTATTR DSECT ,\nMSGID    EQU   CTXTTMSG            START OF MESSAGE ID\nIEAVMXIT CSECT ,\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW056": {"ttr": 4619, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW056) /* ADD X COMMAND AS SUBCOMMAND OF EDIT:\n\n       THIS MODIFICATION WILL ALLOW TSO USERS IN EDIT MODE TO ISSUE\n       THE X COMMAND WITHOUT HAVING PCF INSTALLED.  THE MACRO\n       IKJEBEST WAS COPIED FROM SYS1.APVTMACS.\n                                                                 */ .\n++ VER(Z038) FMID(HTE1402)  /*  PRE(ACF5000) TSO/E REL 4 BASE */ .\n++ JCLIN .\n//GEN49 JOB WC07N0044,'531-1 CM SINGER'\n//SG21  EXEC LINKS,\n// PARM='XREF,LET,LIST,NCAL,RENT,REFR',\n//    UNIT='3350',SER=IPLXXX,N=SYS1,NAME=CMDLIB,P1=' ',\n//    MOD=,P2=' ',CLASS=T\n//LK.SYSPUNCH DD DUMMY\n//ACFMOD DD DSN=SYS1.ACFMOD,DISP=SHR\n//INCLUDE DD DSN=MVS3.INCLUDE,DISP=SHR\n//ACMDLIB DD DSN=SYS1.ACMDLIB,DISP=SHR\n//SYSLIN DD *\n INCLUDE ACFMOD(ACF$GCVT)\n INCLUDE INCLUDE(ACF$X)\n ALIAS EXTEND\n ALIAS X\n ENTRY ACF$X\n NAME ACF$X(R)\n INCLUDE INCLUDE(IKJEBMA9)\n INCLUDE ACMDLIB(IKJEBEMA)\n INCLUDE ACMDLIB(IKJEBEAT,IKJEBEUT,IKJEBEAE)\n INCLUDE ACMDLIB(IKJEBEEN)\n ALIAS IKJEBEEN,IKJEBEXT\n ENTRY IKJEBEMA\n ALIAS IKJEBEUT\n ALIAS IKJEBEAE\n NAME IKJEBEMA(R)\n/*\n++ SRC(IKJEBMA9) DISTLIB(ASRCLIB) .\n         IKJEBEST (EXTEND,X,IKJEBEHE),                                 X\n               (TSO,TSO,IKJEBEHE),CSECT=USER\n         END\n++ SRC(ACF$X) DISTLIB(ASRCLIB) .\n         COPY ACF$X\n++ MAC(IKJEBEST) DISTLIB(AMACLIB) .\n         MACRO\n         IKJEBEST &CSECT=IBM\n         LCLA  &A,&B,&C,&D,&E\n         LCLA  &F                                                A42956\n         LCLC  &CNAME,&SCNAME,&ABBR,&LDMOD,&LABEL,&LABEL1,&LABEL2,&NMBR\n.*A035000,185000,230600-239000,255000                            A42956\n         AIF   ('&CSECT' NE 'IBM').CONT0\n&CNAME   SETC  'IKJEBMA8'     DEFINE CSECT NAME FOR IBM TABLE.\nIKJEBMA8 CSECT\n         ENTRY MA8IP002\n         ENTRY MA8LI002\n         AGO   .CONT1\n.CONT0   ANOP\n         AIF   ('&CSECT' NE 'USER').ERROR2\n&CNAME   SETC  'IKJEBMA9'     DEFINE CSECT NAME FOR USER TABLE.\nIKJEBMA9 CSECT\n.CONT1   ANOP\n&A       SETA  N'&SYSLIST\n         AIF   (&A EQ 0).END\n&B       SETA  1\n&F       SETA  1                                                 A42956\n.CONT2   ANOP\n&C       SETA  N'&SYSLIST(&B)\n         AIF   (&C LT 2 OR &C GT 3).ERROR1\n&E       SETA  K'&SYSLIST(&B,&C)\n&D       SETA  &E-1\n.*  THE FOLLOWING FLAGED INSTRUCTIONS WERE ADDED TO PROVIDE      A42956\n.*  UNIQUE LABELS, EVEN IF MODULES HAVE IDENTICAL LAST TWO       A42956\n.*  CHARACTERS IN ENTRY POINT NAMES.  THE LABELS FOR MODULES     A42956\n.*  IKJEBELI AND IKJEBEIP ARE UNCHANGED, SINCE THEY ARE          A42956\n.*  REFERENCED WITHIN IKJEBEMA.                                  A42956\n         AIF   ('&CSECT' NE 'IBM').CONT10                        A42956\n         AIF   ('&SYSLIST(&B,&C)'(&D,&E) EQ 'LI' OR                    X\n                '&SYSLIST(&B,&C)'(&D,&E) EQ 'IP' ).CONT11        A42956\n.CONT10  ANOP                                                    A42956\n&LABEL1  SETC  '&CNAME'(6,8).'@'.'&F'                            A42956\n&F       SETA  &F+1                                              A42956\n&LABEL2  SETC  '&CNAME'(6,8).'@'.'&F'                            A42956\n&F       SETA  &F+1                                              A42956\n         AGO   .CONT12                                           A42956\n.CONT11  ANOP                                                    A42956\n&LABEL1  SETC  '&CNAME'(6,8).'&SYSLIST(&B,&C)'(&D,&E).'001'\n&LABEL2  SETC  '&CNAME'(6,8).'&SYSLIST(&B,&C)'(&D,&E).'002'\n.CONT12  ANOP                                                    A42956\n&SCNAME  SETC  '&SYSLIST(&B,1)'\n         SPACE 2\n         DC    AL1(&LABEL1-*-1) LENGTH OF SUBCOMMAND NAME.\n         DC    C'&SCNAME' SUBCOMMAND NAME.\n&LABEL1  EQU   *\n         DC    AL1(&LABEL2-*-1) LENGTH OF ABBREVIATION.\n         AIF   (K'&SYSLIST(&B,2) EQ 0).CONT5\n&ABBR    SETC '&SYSLIST(&B,2)'\n         DC    C'&ABBR' ABBREVIATION FOR SUBCOMMAND.\n.CONT5   ANOP\n&LABEL2  EQU   *\n&LDMOD   SETC  '&SYSLIST(&B,&C)'\n         DC    CL8'&LDMOD' LOAD MODULE NAME.\n         AIF   (&B EQ &A).END\n&B       SETA  &B+1\n         AGO   .CONT2\n.END     ANOP\n         SPACE 2\n         DC    AL1(255)       END OF TABLE MARKER.\n         MEXIT\n.ERROR1  MNOTE 12,'INVALID TABLE ENTRY'\n         MEXIT\n.ERROR2  MNOTE 12,'INVALID KEYWORD VALUE'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW058": {"ttr": 4622, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW058) /* ADD IEFUJI SMF EXIT ROUTINE\n\n         THE FUNCTION OF THIS PROGRAM IS TO TAKE THE ACCOUNT NUMBER\n         FROM THE FIRST ACCOUNTING FIELD AND STORE IT IN THE ACCT\n         FIELD OF THE ACF2 LOGONID.\n\n                                                                 */ .\n++ VER(Z038) FMID(HBB2102) PRE(ACF5000) .\n++ JCLIN .\n//GEN49 JOB WC07N0044,'531-1 CM SINGER'\n//SG21  EXEC LINKS,\n// PARM='XREF,LET,LIST,RENT',\n//    UNIT='3350',SER=IPLXXX,N=SYS1,NAME=LPALIB,P1=' ',\n//    MOD=,P2=' ',CLASS=T\n//LK.SYSPUNCH DD DUMMY\n//INCLUDE DD DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN DD *\n INCLUDE INCLUDE(IEFUJI)\n ENTRY IEFUJI\n NAME IEFUJI(R)\n/*\n++ SRC(IEFUJI) DISTLIB(ASRCLIB) .\nIEFUJI TITLE '*** SMF JOB INITIATION EXIT *** IEFUJI'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ROUTINE NAME - IEFUJI                                              *\n*          DATE - 15 NOV 1983                                         *\n*          BRUCE R. MINTON                                            *\n*          GENERAL DYNAMICS - DATA SYSTEMS DIVISION                   *\n*          P.O. BOX 85808                                             *\n*          SAN DIEGO, CALIFORNIA 92138                                *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 4\n         ACFREGS\nIEFUJI CSECT\n         SAVE  (14,12),,*              SAVE REGS\n         LR    R10,R15                 BASE REGISTER\n         USING IEFUJI,R10              SET UP ADDRESSABILITY\n         LR    R8,R1                   SAVE PARM INFO\n         GETMAIN RU,LV=WORKLEN         GET WORKING STORAGE\n         LR    R9,R1                   SAVE POINTER\n         USING WORKAREA,R9             SET UP ADDRESSABILITY\n         ST    R1,8(R13)               <= CHAIN THE\n         ST    R13,4(R1)               <= SAVE\n         LR    R13,R1                  <= AREAS\n         MVI   TSOFLAG,X'00'           TURN TSO FLAG OFF\n         L     R3,16                   GET CVT POINTER\n         L     R4,0(R3)                GET TCB WORDS\n         L     R5,12(R4)               GET CURRENT ASCB POINTER\n         L     R6,172(R5)              GET POINTER TO JOBNAME FIELD\n         LTR   R6,R6                   IS IT A BATCH JOB?\n         BZ    CHKTSO                  ..NO, SEE IF IS TSO\n         B     ACF2CVT                 ..YES, PROCESS ACCT NUMBER\nCHKTSO   DS    0H\n         L     R7,144(R5)              GET POINTER TO OUCB\n         L     R15,=A(X'80000000'+CKTASK) SET UP FOR 31 BIT MODE\n         BSM   R0,R15                  SWITCH TO 31 BIT MODE\nCKTASK   DS    0H\n         TM    18(R7),X'20'            IS IT A TSO TASK?\n         BO    OFF31BIT                ..YES, PROCESS ACCT NUMBER\n         B     A24BIT                  ..NO, DONT DO ANYTHING\nOFF31BIT DS    0H\n         MVI   TSOFLAG,X'01'           TURN TSO FLAG ON\n         L     R15,=A(X'00000000'+ACF2CVT) SET UP FOR 24 BIT MODE\n         BSM   R0,R15                  SWITCH TO 24 BIT MODE\nACF2CVT  DS    0H\n         ACFINCVT R11,NONE=RETURN      FIND ACF2 CVT\n         USING ACCVT,R11               ADDRESS IT\n         ACFGUCB R7,NONE=RETURN,       GET ACF2 ACUCB                  X\n               INLINE=YES,SYS=AOS2\n         USING ACUCB,R7                ADDRESS ACUCB\n         MVC   ACCNUMBR(2),INIT        INITIALIZE ACCOUNT FIELD\n         MVC   ACCNUMBR+2(38),BLANKS   CLEAR ACCOUNT FIELD\n         L     R6,12(R8)               GET ACCOUNT FIELD ADDR\n         CLI   0(R6),0                 WAS IT SPECIFIED?\n         BE    MOVEACCT                ..NO, GO PUT DEFAULT\n         SR    R15,R15                 CLEAR R15\n         ICM   R15,1,1(R6)             GET LENGTH OF FIELD\n         BZ    MOVEACCT                NULL FIELD, GO PUT DEFAULT\n         EX    R15,MVCACCT             MOVE ACCT FIELD TO ACF2 LOGONID\nMOVEACCT DS    0H\n         L     R3,ACULRECP             POINT AT LOGONID RECORD\n         USING LIDREC,R3               ADDRESS LOGONID\n         MVC   LIDACCT,ACCNUMBR        MOVE ACCOUNT NUMBER\n         MVI   0(R6),X'04'             SET UP FOUR ACCT FIELDS\n         LA    R4,2(R6,R15)            BUMP TO SECOND ACCT FIELD\n         TM    TSOFLAG,X'01'           IS IT TSO?\n         BO    MOVBADGE                ..YES, SKIP VTAM NODE NAME\n         MVC   0(2,R4),INIT            PUT DUMMY 2ND ACCOUNT FIELD\nMOVBADGE DS    0H\n         SR    R5,R5                   CLEAR R5\n         ICM   R5,1,0(R4)              GET LENGTH OF 2ND ACCT FIELD\n         LA    R4,1(R5,R4)             BUMP TO THIRD ACCT FIELD\n         LA    R14,8              *MAXIMUM LENGTH OF LOGONID    ACFW009\n         LA    R15,LIDLID         *POINT TO LOGONID             ACFW009\nLIDLOOP  CLI   0(R15),C' '        *BLANK YET                    ACFW009\n         BE    LIDBLNK            *YES - STOP SCAN              ACFW009\n         LA    R15,1(R15)         *POINT TO NEXT CHARACTER      ACFW009\n         BCT   R14,LIDLOOP        *AND AROUND AGAIN             ACFW009\nLIDBLNK  LA    R14,LIDLID         *POINT TO LOGONID             ACFW009\n         SR    R15,R14            *COMPUTE LENGTH OF LOGONID    ACFW009\n         LTR   R15,R15            *TEST FOR ZERO                ACFW009\n         BZ    LIDNULL            *YES - IT WAS ZERO            ACFW009\n         STC   R15,0(R4)          *MOVE IN LOGONID LENGTH       ACFW009\n         BCTR  R15,R0             *SUBTRACT ONE FOR EX INST     ACFW009\n         EX    R15,LIDMOVE        *MOVE IN LOGONID              ACFW009\n         B     *+10               *SKIP MOVE FOR DUMMY LOGONID  ACFW009\nLIDNULL  MVC   0(2,R4),INIT       *MOVE IN DUMMY 3ND ACCT FLD   ACFW009\n         LA    R4,2(R15,R4)       *POINT TO DIVISION FIELD      ACFW009\n         MVI   0(R4),X'02'        *MOVE IN LENGTH OF DIVISON    ACFW009\n         MVC   1(2,R4),LIDDIV     *MOVE IN DIVISION CODE        ACFW009\n         B     RETURN             *ALL DONE                     ACFW009\nLIDMOVE  MVC   1(0,R4),LIDLID     *MOVE IN LOGONID              ACFW009\n         B     RETURN                  ALL DONE\nA24BIT   DS    0H\n         L     R15,=A(X'00000000'+RETURN) SET UP FOR 24 BIT MODE\n         BSM   R0,R15                  SWITCH TO 24 BIT MODE\nRETURN   DS    0H\n         LR    R1,R9                   COPY WORKAREA ADDR\n         L     R13,SAVEAREA+4          POINT AT SAVE AREA\n         FREEMAIN RU,LV=WORKLEN,A=(1)  FREE STORAGE\n         RETURN (14,12),RC=0           ALL DONE\n         EJECT\n         LTORG\nINIT     DC    XL2'01F0'               LENGTH=1, ACCT=0\nBLANKS   DC    CL38' '                 BLANKS\nMVCACCT  MVC   ACCNUMBR(0),1(R6)       COPY ACCOUNT FIELD\nWORKAREA DSECT\nSAVEAREA DS    9D\nTSOFLAG  DS    CL1\nACCNUMBR DS    CL40\nWORKLEN  EQU   *-WORKAREA\n         LIDREC\n         ACUCB\n         ACFASVT\n         ACCVT\n         IHAPSA\n         IHAASCB\n         END IEFUJI\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW059": {"ttr": 4865, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW059) /* ZAP TO DECREASE GVTOLINT AND GVTMEINT:\n\n       THIS MODIFICATION DECREASES THE GRS TOLLERANCE LIMIT AND\n       THE MISSING EVENT INTERVAL.  THIS WILL CAUSE THE SYSTEM\n       TO DETECT GRS RING DISRUPTIONS MUCH QUICKER (IN AT LEAST\n       1 MINUTE AND 15 SECONDS).\n                                                                 */ .\n++ VER(Z038) FMID(JBB2220) PRE(UY11493)  /* MVS XA 2.2        */ .\n++ ZAP(ISGGRS00) .\n NAME ISGGRS00\n VER 00E8 0002BF20    GVTMEINT DC    3 MIN\n VER 00EC 0002BF20    GVTOLINT DC    3 MIN\n*\n REP 00E8 00003A98    GVTMEINT DC   15 SEC\n REP 00EC 0000EA60    GVTOLINT DC    1 MIN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW060": {"ttr": 4867, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW060) /* ZAP TO INCREASE SQA AVAILABLE TO NIP :\n\n       THIS MODIFICATION INCREASES THE SQA AVAILABLE TO NIP BEFORE\n       PROCESSING REAL SQA SPECIFICATION.  THIS ALLOWS LARGE PAGE\n       DEFINITIONS TO BE SPECIFIED.\n                                                                 */ .\n++ VER(Z038) FMID(JBB2220)           /* MVS XA 22         */ .\n++ ZAP(IEAIPL04) .\n NAME IEAIPL04\n VER 0E28 0004,0005       LOWER SQA , UPPER SQA\n REP 0E28 0004,0006\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW061": {"ttr": 4869, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW061) /* INSTALL OUR IEFU84 SMF EXIT:\n\n       THIS MODIFICATION INSTALLS THE IEFU84 SMF EXIT WHICH WILL:\n\n       WHEN A TYPE 40 RECORD IS ENCOUNTERED THEN IF IT IS A DYNAMIC\n       UNALLOCATION THEN THE I/O COUNT IS ACCUMULATED IN THE FIRST\n       FOUR BYTES IN THE USER SMF WORK AREA.  THIS WORKAREA IS POINT-\n       ED TO BY THE JMRUCOM FIELD AND IS ALSO USED BY THE IEFACTRT\n       SMF EXIT TO ACCUMULATE DATA FOR JOBS BETWEEN EXITS. THIS AREA\n       IS GETMAINED BY THE FIRST EXIT TO NEED IT (IEFU83, IEFU84 OR\n       IEFACTRT) AND FREEMAINED (ONLY) BY IEFACTRT WHEN PROCESSING\n       A TYPE 05 OR TYPE 35 SMF RECORD.  WHENEVER A TYPE 04 OR 34\n       RECORD IS ENCOUNTERED THEN THE TYPE 40 I/O COUNT ACCUMULATION\n       IS ADDED TO THE FIRST DISK DEVICE ENTRY IN THAT RECORD. ALL\n       TYPE40 RECORDS ARE SUPPRESSED FROM BEING PHYSICALLY WRITTEN\n       TO THE SMF DATASETS (THEY ARE STOPPED BY THIS ROUTINE RETURN-\n       ING WITH RC=4 BUT THEY MUST BE ENABLED IN THE SMFPRM00 MEMBER\n       OF PARMLIB FOR THIS ROUTINE TO EVER SEE THEM).\n\n       THE BASIC REASON FOR DOING ALL THIS IS TO ALLOW FOR THE\n       ACCOUNTING ROUTINES TO CORRECTLY CHARGE FOR ALL I/O WITHOUT\n       COLLECTING MILLIONS OF TYPE40 RECORDS.\n\n       TAPE I/O IS ADJUSTED TO DISK I/O BY K03/K02 AND THAT CODE\n       MUST BE CHANGED IF THE ALGORITHM VALUES CHANGE.  THERE IS\n       NO ATTEMPT TO COMPENSATE FOR THE (SLIGHT) DIFFERENCE IN\n       I/O TIME USED IN COMPUTING STORAGE OCCUPANCY.\n\n       THIS CODE MUST BE IN BOTH IEFU83 AND IEFU84 TO WORK.\n\n       JCLIN IS REQUIRED ONLY IF UCC7 IS INSTALLED.\n                                                                 */ .\n++ VER(Z038) FMID(HBB2102) PRE(ABBW013) /*   MVSXA VER 2  */ .\n++ JCLIN .\n//GEN11 JOB WC07N0322,'531-1 RC CREWS'\n//SG21 EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,REUS,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS1,NAME=LPALIB,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE  DD  DSN=VS2.NPM.LPALIB,DISP=SHR\n//SYSLIN DD *\n  CHANGE USERU841(SASSU84)\n  INCLUDE INCLUDE(UCCU84)\n  INCLUDE INCLUDE(SASSU84)\n  INCLUDE INCLUDE(ICMDSECT)\n  CHANGE IEFU84(USERU842)\n  INCLUDE SYSPUNCH(IEFU84)\n  CHANGE IEFU84(USERU843)\n  INCLUDE INCLUDE(FNMU83)\n  ENTRY UCCU84\n  NAME IEFU84(R)\n/*\n++ MOD(UCCU84)   LKLIB(INCLUDE) .\n++ MOD(SASSU84)  LKLIB(INCLUDE) .\n++ SRC(IEFU84) DISTLIB(ASRCLIB) .\n         MACRO\n         REGS\n         LCLA  &R\n.R       AIF   (&R EQ 16).END\nR&R      EQU   &R\n&R       SETA  &R+1\n         AGO   .R\n.END     MEND\n         TITLE 'LAST CHANCE SMF RECORD EXAMINATION ROUTINE - IEFU84'\nIEFU84   CSECT\n         REGS\n         STM   R14,R12,12(R13)     SAVE REGS\n         BALR  R10,R0              SET UP BASE REG\n         USING *,R10               USING\n         L     R12,0(R1)           GET SMF RDW ADDRESS\n         LH    R14,0(R12)          GET SMF RECORD LENGTH\n         C     R14,=F'6'           CHECK IF LONG ENOUGH\n         BL    EXIT                NO - DONT LOOK AT IT\n         SPACE 2\n*\n*        THIS PART OF CODE SAVES IO COUNTS FROM TYPE40 RECORDS\n*        AND ADDS THEM IN TO THE IO COUNTS IN THE 04/34 RECORDS.\n*\n         SPACE 1\nCHECK40  CLI   5(R12),40           TYPE 40 RECORD ?\n         BNE   CHECK04             NO - CHECK FOR TYPE 04\n         USING SMFTYP40,R12        ESTABLISH ADDRESSING\n*\n         CLI   TDDFLG,X'02'        DYNAMIC UNALLOCATION (ONLY)\n         BNE   SUPRESS             NO - DON'T TOUCH ANYTHING\n         SR    R6,R6               CLEAR FOR DIVIDE\n         LH    R7,TDDVAR           GET LENGTH OF DEVICE ENTRY SECTION\n         D     R6,=F'8'            GET COUNT OF DEVICES\n         LTR   R7,R7               ANY THERE ?\n         BZ    SUPRESS             NO - GET OUT\n         L     R3,16               CVT POINTER\n         L     R3,0(R3)            GET TCB WORDS\n         L     R3,4(R3)            GET CURRENT TCB\n         L     R3,X'A4'(R3)        GET TCT POINTER\n         LTR   R3,R3               IS THERE ONE ?\n         BZ    SUPRESS             NO - GET OUT\n         L     R3,X'1C'(R3)        GET JMR POINTER\n         USING JMR,R3              ESTABLISH ADDRESSING\n*\n         SR    R9,R9               CLEAR REG 9\n         ICM   R9,7,JMRUCOM+1      PICK UP USER COMMUNICATION FIELD\n         LTR   R9,R9               ANY THERE NOW ?\n         BNZ   T40HAVE             YES BYPASS GETMAIN & INIT\n         LA    R4,SMFWSIZ          GET SIZE OF WORKAREA\n         A     R4,=F'7'            ROUND UP TO\n         N     R4,=X'FFFFFFF8'     A DOUBLE WORD\n       GETMAIN R,LV=(R4),SP=255    GETMAIN WORK AREA\n         LR    R9,R1               SAVE POINTER\n         USING SMFWORK,R9          SET UP ADDRESSING\n         MVI   0(R9),X'0'          ZERO ONE\n         MVC   1(SMFWSIZ-1,R9),0(R9)  ZERO IT ALL OUT\n         STCM  R9,7,JMRUCOM+1      SAVE POINTER\n*\nT40HAVE  L     R6,T40SAVE          PICK UP ACCUMULATOR\n         LA    R8,TDDEXCP          POINT TO FIRST DEVICE SECTION\nT40LOOP  CLI   0(R8),X'20'         DISK UNIT ?\n         BNE   *+12                NO - LOOK FOR TAPE\n         A     R6,4(R8)            ADD EXCP COUNT TO BUCKET\n         B     T40NEXT             AND GO GET NEXT DEVICE\n         CLI   0(R8),X'80'         TAPE UNIT ?\n         BNE   T40NEXT             NO - SKIP\n         L     R1,4(R8)            GET TAPE EXCP COUNT\n*\n*        1984  ALGORITHM :\n*\n*        M     R0,=F'12272'        MULTIPLY BY K03 * BLKSTAPE * 10E5\n*        D     R0,=F'12052'        DIVIDE BY K02 * BLKSDISK * 10E5\n*\n*        1985  ALGORITHM :\n*\n         M     R0,=F'95070'        MULTIPLY BY K03 * BLKSTAPE * 10E6\n         D     R0,=F'18416'        DIVIDE BY K02 * BLKSDISK * 10E6\n*\n         AR    R6,R1               AND ADD TO ACCUMULATOR\nT40NEXT  LA    R8,8(R8)            POINT TO NEXT DEVICE SECTION\n         BCT   R7,T40LOOP          DO ALL DEVICES\n         ST    R6,T40SAVE          SAVE ACCUMULATED VALUE\n         B     SUPRESS             THEN END\n         DROP  R3,R9,R12\n*\nCHECK04  CLI   5(R12),04           TYPE 04 RECORD ?\n         BE    *+12                YES - GO UNLOAD I/O COUNTS\n         CLI   5(R12),34           TYPE 34 RECORD ?\n         BNE   EXIT                NO - END\n         USING SMFTYP04,R12        ESTABLISH ADDRESSING\n*\n         L     R3,16               CVT POINTER\n         L     R3,0(R3)            GET TCB WORDS\n         L     R3,4(R3)            GET CURRENT TCB\n         L     R3,X'A4'(R3)        GET TCT POINTER\n         LTR   R3,R3               IS THERE ONE ?\n         BZ    EXIT                NO - GET OUT\n         L     R3,X'1C'(R3)        GET JMR POINTER\n         USING JMR,R3              ESTABLISH ADDRESSING\n         SR    R9,R9               CLEAR REG 9\n         ICM   R9,7,JMRUCOM+1      PICK UP USER COMMUNICATION FIELD\n         LTR   R9,R9               ANY THERE NOW ?\n         BZ    EXIT                NO - NOTHING TO REPORT\n         USING SMFWORK,R9          SET UP ADDRESSING\n         CLC   T40SAVE(4),=F'0'    ANYTHING TO REPORT ?\n         BE    EXIT                NO - SKIP REST\n*\n         SR    R6,R6               CLEAR FOR DIVIDE\n         LH    R7,SMF4LENN         GET LENGTH OF DEVICE ENTRY SECTION\n         D     R6,=F'8'            GET COUNT OF DEVICES\n         LTR   R7,R7               ANY THERE ?\n         BZ    EXIT                NO - GET OUT\n         LA    R8,SMF4DEVC         POINT TO FIRST DEVICE SECTION\nT04LOOP  CLI   0(R8),X'20'         DISK UNIT ?\n         BE    T04HIT              YES - UNLOAD HERE\n         LA    R8,8(R8)            POINT TO NEXT DEVICE SECTION\n         BCT   R7,T04LOOP          DO ALL DEVICES\n         B     EXIT                NONE FOUND .....\nT04HIT   A     R6,T40SAVE          ADD EXISTING TYPE 04 COUNT\n*\n         ST    R6,4(R8)            UPDATE TYPE04|34 EXCP COUNT\n         MVC   T40SAVE(4),=F'0'    RESET T40SAVE FIELD\n*\n         B     EXIT                THEN END\n         DROP  R3,R9,R12\n*\n*        COMMON EXIT CODE\n*\n         SPACE 1\nEXIT     LM    R14,R12,12(R13)     RESTORE REGS\n         SR    R15,R15             CLEAR REG TO WRITE RECORD\n         BR    R14                 RETURN\n         SPACE 1\nSUPRESS  LM    R14,R12,12(R13)     RESTORE REGS\n         LA    R15,4               DON'T WRITE THIS RECORD\n         BR    R14                 RETURN\n         SPACE 1\n         LTORG\n         SPACE 1\nTOTWORK  DSECT\nSMFWORK  EQU   *\nT40SAVE  DS    F                  TYPE 40 I/O COUNTER (FROM IEFU83)\n         DS    F                  EXTRA WORD FOR FUTURE USE\nC1ASAVE  DS    F                  TOTAL JOB TCB MILLISECONDS (C1A)\nC1CSAVE  DS    F                  TOTAL JOB TAPE MOUNTS (C1C)\n         DS    F                  EXTRA WORD FOR FUTURE USE\n         DS    F                  EXTRA WORD FOR FUTURE USE\nC1BSAVE  DS    D                  TOTAL JOB VMEM OCCUPANCY (C1B)\nC1FSAVE  DS    D                  TOTAL JOB COMM (C1F) (TPUT,TGET)\nC1JSAVE  DS    D                  TOTAL JOB I/O TIME (C1J) (DISK,TAPE)\n         DS    D                  EXTRA DOUBLE WORD FOR FUTURE USE\n         DS    D                  EXTRA DOUBLE WORD FOR FUTURE USE\nSMFWSIZ  EQU   *-SMFWORK          LENGTH OF WORK AREA\n         EJECT\n        IEFJMR\n         EJECT\nSMFTYP04 DSECT\n       IFASMFR 04\n         EJECT\nSMFTYP40 DSECT\n       IFASMFR 40\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW062": {"ttr": 4874, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW062) /* CHANGE DYNALLOC TO SYSWRK INSTEAD OF SYSALLDA:\n\n       THIS MODIFICATION WILL FORCE DYNAMIC ALLOCATION TO USE\n       'SYSWRK' FOR NONSPECIFIC DYNAMIC ALLOCATION REQUESTS. THIS IS\n       MAINLY TO SATISFY DFDSS V2 BUT WILL ALSO STOP OTHER DYNALLOC\n       SYSTEM GENERATED DATASETS FROM SPLATTERING THE ENTIRE DASD POOL.\n       'SYSWRK' IS USED INSTEAD OF 'SYSDA' BECAUSE THERE ARE PROBLEMS\n       IF THE ESOTERIC IS VIO ELGIBLE.\n                                                                */ .\n++ VER(Z038) FMID(JBB2220)          /* XA 22 BASE     */ .\n++ ZAP(IEFAB445) DISTLIB(AOSB3) .\n NAME IEFAB445\n VER 000D E2E8E2C1,D3D3C4C1   SYSALLDA\n REP 000D E2E8E2E6,D9D24040   SYSWRK\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW063": {"ttr": 4876, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW063) /* ZAP EXTERNAL WTR FOR JESLOGX (AJSW040)\n\n   - CHANGE DEFAULT FOR DEST FOR SYSOUT L TO ANYLOCAL\n   - IF SYSTASK NAME IS \"XWTRPROC\" DO NOT WAIT FOR WORK\n   - THIS ZAP IS NEEDED FOR JESLOGX (AJSW040)\n     ====== NOTE NOTE BASE REG 9 = 2 =========        */.\n++VER (Z038) FMID(HBB2102) PRE(UY16936)  /* T8802  */ .\n++ZAP (IASXSD82).\n NAME IASXSD82\n  VER     0898 4110,4014               LA R1,HASPECB\n  VER     0C30 D3D6,C3C1,D340,4040     =C'LOCAL'\n  VER     0D6B E9C1D7,E9C1D7           'ZAPZAP' PATCH AREA\n  REP     0898 47F0,9D6A               GO TO D6C PATCH\n  REP     0C30 C1D5,E8D3,D6C3,C1D3     =C'ANYLOCAL'\n  REP     0D6C 5810,0224     PATCH     L R1,ADDR OF ASCB\n  REP     0D70 5811,00B0               L R1,JFCBLGTH(R1)\n  REP     0D74 1211                    LTR R1,R1\n  REP     0D76 4780,9D82               BZ GOBACK\n  REP     0D7A D507,1000,9D8A          CLC R1,XWTRPROC\n  REP     0D80 4780,98DA               BZ EXIT CODE (STOP THE WTR.)\n  REP     0D84 4110,4014     GOBACK    LA R1,HASPECB (REPLACE INST.)\n  REP     0D88 47F0,989A               RETURN  (REPLACED INST + 4)\n  REP     0D8C E7E6E3D9,D7D9D6C3       =C'XWTRPROC'\nIDRDATA   ABBW063\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ABBW064": {"ttr": 4878, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW064) /*\n  MACRO UPDATE FOR TSO COST ESTIMATE INFO AJSW042\n                       */.\n++ VER(Z038) FMID(HTE1402) PRE(UY15439) .\n++ MACUPD(IEFSSCS).\n./ CHANGE NAME=IEFSSCS\nSSCS$CST EQU   X'01'              *REQUEST FOR COST INFO        AJSW042\n         SPACE 3                                                AJSW042\n*-----              U S E R   S E C T I O N             -----*  AJSW042\nSSCS$FIL DS    XL72               *FILLER FOR IAT8969 MESSAGE   AJSW042\nSSCS$JDS DS    F                  *LAST DATASET JDS POINTER     AJSW042\nSSCS$NTM DS    XL2                *JST25NTM - # OF TAPE MOUNTS  AJSW042\nSSCS$RS1 DS    XL2                *RESERVED - FIELD FOR FUTURE  AJSW042\nSSCS$PSZ EQU   *-SSCS$FIL         *SIZE OF PREFIX WORK AREA     AJSW042\n*-----              COST ESTIMATE ARRAY ELEMENT         -----*  AJSW042\nSSCS$CAE DS    0CL60              *START OF ARRAY ELEMENT       AJSW042\nSSCS$STP DS    CL8                *JDSSTEPN - STEP NAME         AJSW042\nSSCS$DDN DS    CL8                *JDSDDNAM - DDNAME            AJSW042\nSSCS$DST DS    CL8                *JDSDEST  - DESTINATION       AJSW042\nSSCS$TYP DS    CL8                *JDSTYPE  - TYPE              AJSW042\nSSCS$FRM DS    CL8                *JDSFORM  - FORMS             AJSW042\nSSCS$CAR DS    CL8                *JDSFCB   - CARRIAGE TAPE     AJSW042\nSSCS$UCS DS    CL4                *JDSUCS   - UCS               AJSW042\nSSCS$LNC DS    F                  *JDSLINES - LINECOUNT         AJSW042\nSSCS$CLS DS    XL1                *JDSCLASS - CLASS             AJSW042\nSSCS$CPY DS    XL1                *JDSCOPY  - COPIES            AJSW042\nSSCS$RSV DS    XL2                *RESERVED - FIELD FOR FUTURE  AJSW042\nSSCS$PGS DS    F                  *JDSPAGES - PAGECOUNT         AJSW042\nSSCS$ASZ EQU   *-SSCS$CAE         *SIZE OF ARRAY ELEMENT        AJSW042\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW066": {"ttr": 4880, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ABBW066) /* INCREASE NUMBER OF DEVICES ALLOWED IN RMF DEV\n\n         THIS MODIFICATION WILL INCREASE THE NUMBER OF DEVICES THAT\n         THE RMFMON DEV SCREEN WILL DISPLAY FROM 400 TO 1024.\n                                                                 */ .\n++ VER(Z038) FMID(HRM3502)  .\n++ ZAP(ERBFMENU) DISTLIB(RMFMOD01) .\n NAME ERBFMENU\n VER 0267 0190          400 DEVICES  FIND 'ERBRDEV'\n REP 0267 0400         1024 DEVICES\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABBW069": {"ttr": 4882, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (ABBW069) /*\n\n\n   INMXPARM - INTERACTIVE DATA TRANSMISSION FACILITY\n              INSTALLATION OPTIONS CSECT\n\n   SEE SYS1.SAMPLIB(IMNINOPT) FOR COMPLETE DESCRIPTION .\n\n   FUNCTION:\n     THE MACROS INMXP, INMNODE, AND INMEND GENERATE A CSECT\n     INMXPARM USED BY THE RECEIVE AND TRANSMIT (XMIT) COMMANDS\n     OF THE INTERACTIVE DATA TRANSMISSION FACILITY.\n     IF THE INMXPARM CSECT IS MISSING OR THE IBM SUPPLIED\n     DUMMY CSECT HAS NOT BEEN REPLACED, MESSAGES INMR152I AND\n     INMX152I WILL BE GENERATED WHEN THE COMMANDS ARE ISSUED.\n\n                                                            */ .\n++VER (Z038) FMID (HTE1402) .\n++SRC(INMXPARM) DISTLIB(ASAMPLIB) DISTOBJ(AOST4) .\n         INMXP   CIPHER=YES,OUTWARN(5000,2000),OUTLIM=15000,VIO=SYSDA\n         INMNODE WDSCE,W190\n         INMNODE WDSCE,W390\n         INMNODE WDSCE,W490\n         INMNODE WCSY5,W183\n         INMEND\n         END\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACFW001": {"ttr": 4884, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ACFW001) /* ADD ACF2 PREVALIDATION  EXIT ROUTINE\n\n        1. THIS ROUTINE WILL VALIDATE A USER'S AUTHORITY TO ALLOCATE\n           A NEW DATASET ON A GIVEN VOLUME VIA THE GENERALIZED\n           RESOURCE FACILITY TYPE DSD RESOURCE RULES.  FOR EXAMPLE,\n           TO ALLOW ALL TSO USERS TO ALLOCATE ON THE TSO PACKS, THE\n           FOLLOWING RULE WOUD APPLY:\n            $KEY(TSO***) TYPE(DSD)\n             UID($) ALLOW\n        2. THIS ROUTINE WILL ALSO ALLOW ALL STARTED TASKS WITH THE\n           DEFAULT ID OF @STC TO HAVE ACCESS WITHOUT LOGGING.\n                                                                 */ .\n++ VER(Z038) FMID(ACF5000) .\n++ JCLIN .\n//GEN49 JOB WC07N0044,'531-1 CM SINGER'\n//SG21  EXEC LINKS,\n// PARM='XREF,LET,LIST,RENT',\n//    UNIT='3350',SER=IPLXXX,N=SYS1,NAME=LPALIB,P1=' ',\n//    MOD=,P2=' ',CLASS=T\n//LK.SYSPUNCH DD DUMMY\n//INCLUDE DD DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN DD *\n INCLUDE INCLUDE(VLDEXIT)\n NAME VLDEXIT(R)\n/*\n++ SRC(VLDEXIT) DISTLIB(ASRCLIB) .\n         TITLE     'VLDEXIT -- ACF RULE PRE VALIDATION EXIT'\n         ACSXP                    MAP EXIT PARAMETER LIST\n         ACUCB                    USER CONTROL BLOCK\n         ACFREGS                  REGISTER EQUATES\nWORKAREA DSECT\n         ACGRSRC  DSECT=NO        GENERALIZED RESOURCE PARM LIST\nWORKMSG  DS    CL128              ERROR MESSAGE AREA\nWORKLEN  EQU   *-WORKAREA         MAY NOT EXCEED 256 BYTES\n         SPACE 2\n         ACCVT                    ACF2 CVT\n         EJECT\nVLDEXIT  CSECT\n         SAVE  (14,12),,*         SAVE FOR RETURN\n         LR    R11,R15            COPY BASE REGISTER\n         USING VLDEXIT,R11        ANNOUNCE ADDRESSIBILITY\n         LR    R10,R1             COPY PARAMETER LIST POINTER\n         USING ACSXP,R10          ANNOUNCE ADDRESSIBILITY\n         TM    ACUUFLG1,ACUU1ABE  ERROR CONDITION?\n         BO    RETURN0            ..YES, FINI\n         CLI   ACUUFLG3,ACUU3PGM  PROGRAM NAME VALIDATION?\n         BE    RETURN0            ..YES, FINI\n         L     R5,ACUUAUCB        POINT AT ACUCB\n         USING ACUCB,R5           ANNOUNCE ADDRESSIBILITY\nLOOKUP   DS    0H\n         LA    R6,TABLE           LOAD TABLE ADDRESS\nCHKID    DS    0H\n         CLC   ACULID(8),DFLTLID      CHECK FOR STC DFLT LID=@STC\n         BNE   TABEND             ..NO,PROCEED AS NORMAL ACCESS\nLOOP     CLI   0(R6),X'FF'        TEST FOR END OF TABLE\n         BE    TABEND             BRANCH IF END OF TABLE\nCKNAME   CLC   ACUSJOBN(8),0(R6)    COMPARE JES NAME WITH TABLE ENTRIES\n         BE    RETURN4            ..YES, ALLOW IMMEDIATE ACCESS\n         LA    R6,8(R6)           INCREMENT INTO TABLE\n         B     LOOP\nTABEND   DS    0H\n         DROP  R5                 DROP ADDRESSIBILITY\n         CLI   ACUUFLG3,ACUU3DSD  NEW DASDM ALLOCATION?\n         BNE   RETURN0            ..NO, PROCEED AS NORMAL\n         SPACE 3\nDASDCHK  DS    0H\n         L     R4,ACUUWORK        POINT AT WORKAREA ADDRESS\n         USING WORKAREA,R4        ADDRESS TO BUILD VALIDATION PARM LIST\n         XC    ACGRSRC(ACGRSLEN),ACGRSRC  CLEAR IT\n         MVI   ACGFCN,4           GENERALIZED RSRC FCTN CODE\n         MVI   ACGSFCN,ACGSINP    INTERPRET CALL SUB FCTN\n         LA    R0,WORKMSG         POINT TO ERROR MESSAGE AREA\n         ST    R0,ACGMSG          PUT ADDR INTO PARM BLOCK\n         MVC   ACGRTYPE,=C'RDSD'  RSRC TYPE = DSD\n         MVI   ACGRNAME,C' '      BLANK NAME FIELD\n         MVC   ACGRNAME+1(L'ACGRNAME-1),ACGRNAME\n         L     R1,ACUUVOL         GET VOLSER ADDRESS\n         MVC   ACGRNAME(6),0(R1)  MAKE VOLSER RSRC NAME\n         MVC   ACGUCB,ACUUAUCB    PASS ON USER IDENT\n         MVC   ACGMODID,=CL8'VLDEXIT '  MODULE NAME FOR RPTS\n         SPACE 1\n         L     R3,ACUUACVT        GET ACF2 CVT ADDRESS\n         USING ACCVT,R3           ADDRESS ACF2 CVT\n         ACFSVC ACGRSRC,TYPE=A,CVT=HAVE  ISSUE SVC VALIDATION CALL\n         LTR   R15,R15            IS ALLOCATION OK?\n         BZ    RETURN0            ..YES, ALL DONE\n         SPACE 1\n         MVI   WORKMSG+2,X'80'    MCS FLAG\n         LH    R1,WORKMSG         MESSAGE TEXT LENGTH\n         LA    R1,WORKMSG(R1)     NEXT AVAILABLE CHARACTER\n         MVC   0(4,R1),ERROUTE    COPY ROUTE AND DESC CODES\n         WTO   MF=(E,WORKMSG)     WRITE ACF2 ERROR MSG\n         MVC   WORKMSG(ERRMSGL),ERRMSG LOCAL MESSAGE PROTOTYPE\n         MVC   ERRVOL-ERRMSG+WORKMSG,ACGRNAME  INCLUDE VOLSER\n         WTO   MF=(E,WORKMSG)     WRITE ADDL ERROR MESSAGE\n         B     RETURN8            TERMINATE..NOTE LOG DONE BY RSRC CALL\n         SPACE 3\nRETURN0  DS    0H                 FINI\n         RETURN (14,12),RC=0      GIVE RETURN CODE ZERO\n         SPACE 3\nRETURN4  DS    0H                 FINI\n         RETURN (14,12),RC=4      GIVE RETURN CODE FOUR - ALLOW STC\n         SPACE 3\nRETURN8  DS    0H                 FINI\n         RETURN (14,12),RC=8      GIVE RETURN CODE EIGHT FOR ABORT\n         SPACE 3\nERRMSG   DC    AL2(ERRMSGL-4),X'8000'  MESSAGE HEADER\n         DC    C'         NEW DATASET ALLOCATION FOR VOLUME '\nERRVOL   DC    CL6'XXXXXX'        ROOM FOR VOLUME SERIAL NUMBER\n         DC    C' DENIED'\nERROUTE  DC    X'00000020'        DESC=0, ROUTE=11\nERRMSGL  EQU   *-ERRMSG           LENGTH OF MESSAGE\n         SPACE 2\nDFLTLID  DC    CL8'@STC    '\nTABLE    DS    0D\n         DC    CL8'ACF2'\n         DC    CL8'ADMPRINT'\n         DC    CL8'AP1 '\n         DC    CL8'APSWPROC'\n         DC    CL8'ARTSINIU'\n         DC    CL8'CLRDUMP'\n         DC    CL8'CMD1'\n         DC    CL8'DB2TDBM1'\n         DC    CL8'DB2TMSTR'\n         DC    CL8'D'\n         DC    CL8'DEALLOC'\n         DC    CL8'DUMPSRV'\n         DC    CL8'HSMS1 '\n         DC    CL8'HSMS2 '\n         DC    CL8'HSMS3 '\n         DC    CL8'HSMS4 '\n         DC    CL8'IEESYSAS'\n         DC    CL8'IEEVMPCR'\n         DC    CL8'IKJACCNT'\n         DC    CL8'INIT'\n         DC    CL8'INTRDR'\n         DC    CL8'INCORZAP'\n         DC    CL8'IRLM'\n         DC    CL8'JES2 '\n         DC    CL8'JES3 '\n         DC    CL8'JES4 '\n         DC    CL8'JES5 '\n         DC    CL8'JES7 '\n         DC    CL8'JESN '\n         DC    CL8'JRLMPROC'\n         DC    CL8'M204PJCL'\n         DC    CL8'M204PROD'\n         DC    CL8'M204TJCL'\n         DC    CL8'M204TEST'\n         DC    CL8'LLA  '\n         DC    CL8'LOCAL'\n         DC    CL8'NET  '\n         DC    CL8'PAGEADD'\n         DC    CL8'PANEIPL'\n         DC    CL8'RMF  '\n         DC    CL8'RMFREP'\n         DC    CL8'RMFGAT'\n         DC    CL8'SETCACHE'\n         DC    CL8'SMFDMPS1'\n         DC    CL8'SMFDMPS2'\n         DC    CL8'SMFDMPS3'\n         DC    CL8'SMFDMPS4'\n         DC    CL8'SYS1DUMP'\n         DC    CL8'TSMSHOW '\n         DC    CL8'TSMSTART'\n         DC    CL8'TSMSTOP '\n         DC    CL8'TSO  '\n         DC    CL8'TSSO '\n         DC    CL8'VFETCH'\n         DC    CL8'VFETCHP'\n         DC    CL8'VFETCHT'\n         DC    CL8'WCICOM  '\n         DC    CL8'WCLOGON '\n         DC    CL8'WCLOGON1'\n         DC    CL8'WCLOGON2'\n         DC    CL8'WCLOGON3'\n         DC    CL8'WCLOGON4'\n         DC    CL8'WC0TA07'\n         DC    CL8'WC0TA0B'\n         DC    CL8'WC0TA0G'\n         DC    CL8'WC0TA02'\n         DC    CL8'WCUCC7 '\n         DC    CL8'NETEXTST'\n         DC    X'FF'\n         END   VLDEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACFW002": {"ttr": 5122, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ACFW002) /* ADD ACF2 VIOLATION EXIT ROUTINE\n\n       1.  THE VIOEXIT ROUTINE WILL DETERMINE IF A RETRY SHOULD BE\n           DONE ON A RULE.  IF DATASET IS A TSO TYPE (BEGINS WITH A $),\n           THEN RETRY IF FIRST FOUR CHARACTER RULE WAS NOT CHECKED\n           ($DDX INSTEAD OF $DDXAAA).\n       2.  ALSO IF A BLP TAPE VIOLATON OCCURS, THEN THE VOLSER IS\n           CHECKED TO SEE IF IT IS NUMERIC. IF SO, THE DATASET IS\n           CONSIDERED A VALID DSD TAPE AND ACCESS IS DENIED.  IF\n           VOLSER IS NOT ALL NUMERICS, ACCESS IS ALLOWED.\n                                                                 */ .\n++ VER(Z038) FMID(ACF5000) .\n++ JCLIN .\n//GEN49 JOB WC07N0044,'531-1 CM SINGER'\n//SG21  EXEC LINKS,\n// PARM='XREF,LET,LIST,RENT',\n//    UNIT='3350',SER=IPLXXX,N=SYS1,NAME=LPALIB,P1=' ',\n//    MOD=,P2=' ',CLASS=T\n//LK.SYSPUNCH DD DUMMY\n//INCLUDE DD DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN DD *\n INCLUDE INCLUDE(VIOEXIT)\n NAME VIOEXIT(R)\n/*\n++ SRC(VIOEXIT) DISTLIB(ASRCLIB) .\n         TITLE     'VIOEXIT -- ACF RULE VIOLATION EXIT'        ACFW002\n         SPACE     1                                           ACFW002\n         SPACE 3                                               ACFW002\n         ACSXP                    MAP EXIT PARAMETER LIST      ACFW002\n         ACFREGS                  REGISTER EQUATES             ACFW002\nWORK     DSECT                                                 ACFW002\nVOLID    DS    CL6                EBCDIC VOLUME ID             ACFW002\nWORKLEN  EQU   *-WORK             LENGTH OF WORK AREA          ACFW002\n         EJECT                                                 ACFW002\nVIOEXIT  CSECT                                                 ACFW002\n         SAVE  (14,12),,*         SAVE FOR RETURN              ACFW002\n         LR    R11,R15            COPY BASE REGISTER           ACFW002\n         USING VIOEXIT,R11        ANNOUNCE ADDRESSIBILITY      ACFW002\n         LR    R10,R1             COPY PARAMETER LIST POINTER  ACFW002\n         USING ACSXP,R10          ANNOUNCE ADDERSSIBILITY      ACFW002\n         CLI   ACUUFLG3,ACUU3PGM  PROGRAM NAME VALIDATION?     ACFW002\n         BE    RETURN0            ..YES, ABORT                 ACFW002\n         TM    ACUUFLG1,ACUU1PGM  ACCESSED BY RESTRICTED PGM?  ACFW002\n         BO    RETURN0            ..YES, ABORT                 ACFW002\n         TM    ACUUFLG2,ACUU2BLP  BLP VIOLATION?               ACFW002\n         BO    CHKBLP             ..YES, GO CHECK VOLSER       ACFW002\n         CLI   ACUURRET,ACUURNAC  RULE FOUND?                  ACFW002\n         BE    RETURN0            ..YES, ABORT                 ACFW002\n         B     DOLLAR             GO LOOK FOR TSO TYPE DATASET ACFW002\n         SPACE 3                                               ACFW002\nCHKBLP   DS    0H                                              ACFW002\n         GETMAIN RU,LV=WORKLEN    GET SOME STORAGE             ACFW002\n         LR    R3,R1              GET POINTER TO WORKAREA      ACFW002\n         USING WORK,R3            POINT AT WORK AREA           ACFW002\n         SR    R2,R2              ZERO R2 TO USE AS SWITCH     ACFW002\n         L     R1,ACUUVOL         POINT AT VOLSER FOR TAPE     ACFW002\n         MVC   VOLID,0(R1)        MOVE VOLSER TO WORK AREA     ACFW002\n         NC    VOLID,=C'000000'   IS VOLUME ID IN RANGE        ACFW002\n         CLC   VOLID,=C'000000'   IS IT 000000 THRU 999999?    ACFW002\n         BE    FREESTOR           ..YES, PROCESS AS NORMAL     ACFW002\n         LA    R2,4               SET SWITCH TO ALLOW ACCESS   ACFW002\nFREESTOR DS    0H                                              ACFW002\n         LR    R1,R3              GET POINTER TO WORK AREA     ACFW002\n         FREEMAIN RU,LV=WORKLEN,  FREE                         ACFW002 X\n               A=(1)              STORAGE                      ACFW002\n         LTR   R2,R2              CHECK R2 FOR ZEROS           ACFW002\n         BZ    RETURN0            ..YES, DO NORMAL PROCESS     ACFW002\n         B     RETURN4            ..NO, ALLOW ACCESS           ACFW002\n         DROP  R3                                              ACFW002\n         SPACE 3                                               ACFW002\nDOLLAR   DS    0H                                              ACFW002\n         L     R5,ACUUDSN         POINT AT BEGINNING OF DSN    ACFW002\n         L     R6,ACUUPFX         POINT AT RULE PREFIX         ACFW002\n         CLI   0(R5),C'$'         IS IT A TSO DATASET?         ACFW002\n         BNE   RETURN0            ..NO, ALL DONE               ACFW002\n         L     R4,ACUUPFX         SAVE ENTRY TO RULE PREFIX    ACFW002\n         LA    R7,8               MAX LGHT 1ST LEVEL QUALIFIER ACFW002\n         SPACE 1                                               ACFW002\nMLOOP    DS    0H                 LOOP LOOKING FOR BLANK       ACFW002\n         CLI   0(R6),C' '         BLANK?                       ACFW002\n         BE    ENDPFX             ..YES, ALL DONE              ACFW002\n         LA    R6,1(R6)           BUMP POINTER TO PREFIX       ACFW002\n         BCT   R7,MLOOP           KEEP LOOKING, MAX OF 8 TIMES ACFW002\n         SPACE 1                                               ACFW002\nENDPFX   DS    0H                 TSO TYPE DATASET             ACFW002\n         CH    R7,=H'04'          MAX LGTH 1ST LEVEL QUALIFIER ACFW002\n         BL    NEWPFX             GO TRY $DDX PREFIX           ACFW002\n         B     RETURN0            ALREADY TRIED $DDX (ABORT)   ACFW002\n         SPACE 1                                               ACFW002\nNEWPFX   DS    0H                 TSO TYPE DATASET             ACFW002\n         MVC   0(8,R4),=CL8' '    BLANK OUT PREFIX (ACUUPFX)   ACFW002\n         MVC   0(4,R4),0(R5)      MOVE 4 CHAR PREFIX           ACFW002\n         B     RETURN24           TRY $DDX PREFIX (RETRY)      ACFW002\n         SPACE 1                                               ACFW002\nRETURN0  DS    0H                 FINI                         ACFW002\n         RETURN (14,12),RC=0      GIVE RETURN CODE 0 (ABORT)   ACFW002\nRETURN4  DS    0H                 FINI                         ACFW002\n         RETURN (14,12),RC=4      GIVE RETURN CODE 4 (ALLOW)   ACFW002\nRETURN24 DS    0H                 FINI                         ACFW002\n         RETURN (14,12),RC=24     GIVE RETURN CODE 24 (RETRY)  ACFW002\n         END   VIOEXIT                                         ACFW002\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACFW003": {"ttr": 5125, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ACFW003) /* ADD ACF2 LOGON POST VALIDATION EXIT\n\n           THE LGNPXIT ROUTINE WILL GET THE VTAM NODE NAME OR\n           TCAM LINE NAME AND ADD IT TO JOB CARD FOR A TSO USER\n           SESSION. THIS WILL ALLOW THE SMF TYPE 35 RECORD\n           TO CONTAIN INFORMATION ABOUT TERMINAL UTIIZATION.\n                                                                 */ .\n++ VER(Z038) FMID(ACF5000) .\n++ JCLIN .\n//GEN49 JOB WC07N0044,'531-1 CM SINGER'\n//SG21  EXEC LINKS,\n// PARM='XREF,LET,LIST,RENT',\n//    UNIT='3350',SER=IPLXXX,N=SYS1,NAME=LPALIB,P1=' ',\n//    MOD=,P2=' ',CLASS=T\n//LK.SYSPUNCH DD DUMMY\n//INCLUDE DD DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN DD *\n INCLUDE INCLUDE(LGNPXIT)\n NAME LGNPXIT(R)\n/*\n++ SRC(LGNPXIT) DISTLIB(ASRCLIB) .\nLGNPXIT  TITLE '*** ACF2 LOGON POST VALIDATION EXIT *** LGNPXIT'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ROUTINE NAME - LGNPXIT                                             *\n*          DATE - 1 MAY 1981                                          *\n*          BRUCE R. MINTON                                            *\n*          GENERAL DYNAMICS - DATA SYSTEMS DIVISION                   *\n*          P.O. BOX 85808                                             *\n*          SAN DIEGO, CALIFORNIA 92138                                *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 4\nLGNPXIT  CSECT\n         SAVE  (14,12),,*         SAVE FOR RETURN\n         LR    R10,R15            COPY BASE REGISTER\n         USING LGNPXIT,R10        ANNOUNCE ADDRESSIBILITY\n         L     R12,4(R1)          GET LWA BUFFER ADDRESS\n         L     R11,28(R1)         GET POINTER TO LWAJCL\n         L     R12,0(R12)         GET POINTER TO LWA BUFFER\n         LA    R3,1               SET COUNTER TO BEGINING\n         LA    R2,0               SET DEFAULT RETURN CODE TO ZERO\nLWACHK   DS    0H\n         CLC   0(5,R12),RECON     IS THIS A RECONNECT?\n         BE    FINI               ..YES, DONT DO ANYTHING\n         LA    R12,1(R12)         BUMP POINTER BY ONE\n         LA    R3,1(R3)           BUMP COUNTER BY ONE\n         C     R3,=F'250'         ARE WE AT END OF SEARCH?\n         BNE   LWACHK             ..NO, KEEP TRYING\n         LR    R3,R0              GET POINTER TO ACVALD\n         USING ACVALD,R3          ANNOUNCE ADDRESSIBILITY\n         LA    R2,SMFWSIZ         GET SIZE OF WORKAREA\n         A     R2,=F'7'           ROUND UP TO\n         N     R2,=X'FFFFFFF8'    A DOUBLE WORD\n         GETMAIN R,LV=(R2)        GETMAIN WORK AREA\n         LR    R9,R1              SAVE POINTER\n         USING SMFXLEN,R9         SET UP ADDRESSABILITY\n         ST    R2,WORKLEN         SAVE GETMAINED LENGTH\n         LA    R1,SMFSAVE         CHAIN\n         ST    R1,8(R13)                THE\n         ST    R13,4(R1)                    SAVE\n         LR    R13,R1                            AREAS\n         LA    R1,SMFXTME         BORROW TIME OF DAY FOR SVC 233\n         XC    SMFXTME,SMFXTME    CLEAR (USE CURRENT ASCB)\n         LA    R5,SMFXTID         GET ADDRESS OF TERMINAL ID\n         ST    R5,SMFXDTE         SAVE IN ARG LIST\n         MVI   SMFXTID,C' '       BLANK IT OUT JUST IN CASE\n         MVC   SMFXTID+1(7),SMFXTID SVC 233 DOESNT WORK\n         SVC   233                GO GET TERMINAL ID\n         MVC   TERMID,SMFXTID     SAVE TERMINAL ID\n         SPACE 3\nLOGON    DS    0H\n         L     R4,ACVRECB         POINT AT LOGONID BUFFER\n         USING LIDREC,R4          ANNOUNCE ADDRESSIBILITY\n         L     R6,0(R11)          POINT AT JCL\n         L     R15,16             CVT POINTER\n         L     R15,196(0,R15)     SMCA\n         CLC   SYSID,16(R15)      IS IT SY1?\n         BNE   JCLCARD2           ..NO, KEEP GOING\n         TM    LIDU2FLG,LIDU2F4   IS TSOSY1 FLAG SET?\n         BO    JCLCARD2           ..YES, KEEP GOING\n         CLC   2(4,R6),OPER       IS IT OPERATIONS?\n         BE    JCLCARD2           ..YES, KEEP GOING\n         CLC   2(4,R6),HSS        IS IT HSS?\n         BE    JCLCARD2           ..YES, KEEP GOING\n         CLC   2(4,R6),IBM        IS IT IBM?\n         BE    JCLCARD2           ..YES, KEEP GOING\n         CLC   2(7,R6),USER1      IS IT SPECIAL USER?\n         BE    JCLCARD2           ..YES, KEEP GOING\n         CLC   2(7,R6),USER2      IS IT SPECIAL USER?\n         BE    JCLCARD2           ..YES, KEEP GOING\n         CLC   2(7,R6),USER3      IS IT SPECIAL USER?\n         BE    JCLCARD2           ..YES, KEEP GOING\n         CLC   2(7,R6),USER4      IS IT SPECIAL USER?\n         BE    JCLCARD2           ..YES, KEEP GOING\n         CLC   2(7,R6),USER5      IS IT SPECIAL USER?\n         BE    JCLCARD2           ..YES, KEEP GOING\n         TPUT  MSG1,72            WRITE ERROR MESSAGE\n         LA    R2,4               SET RETURN CODE 4 FOR CANCEL\n         B     RETURN             FINI, DO NOT WRITE SMF RECORD\n         SPACE 2\nJCLCARD2 DS    0H\n         LA    R7,80(R6)          POINT AT 2ND JCL CARD\n         LA    R8,80(R7)          POINT AT 3RD JCL CARD\n         LA    R6,2(R6)           POINT AT JOBNAME ON JOBCARD\n         LA    R5,61              MAX SEARCH LENGTH\n         LA    R15,7              MAX NUMBER OF SEARCHES FOR JOBNAME\n         MVC   SMFXUID,=CL8' '    BLANK OUT USERID JUST IN CASE\n         LA    R1,SMFXUID         POINT AT USERID FOR SMF RECORD\nJOBLOOP  DS    0H\n         CLI   0(R6),C' '         IS IT A BLANK?\n         BE    FINDJOB            ..YES, FOUND END OF JOBNAME\n         MVC   0(1,R1),0(R6)      MOVE ONE BYTE AT A TIME\n         LA    R6,1(R6)           BUMP POINTER TO NEXT BYTE\n         LA    R1,1(R1)           BUMP COUNTER BY ONE\n         BCT   R15,JOBLOOP        KEEP LOOKING FOR JOBNAME\nFINDJOB  DS    0H\n         CLC   0(6,R6),=C' JOB (' LOOKING FOR JOB CARD\n         BE    CHCKACCT           GO CHECK ACCT INFO\n         LA    R6,1(R6)           BUMP POINTER BY ONE\n         BCT   R5,FINDJOB         KEEP LOOKING FOR JOB\n         B     RETURN             CANNT FIND IT, FORGET IT\nCHCKACCT DS    0H\n         LA    R5,52              SET MAX LENGTH OF LINE TO CLEAR\n         LA    R6,6(R6)           BUMP POINTER PAST JOB PARAMETER\n         MVC   SMFXACT(8),0(R6)   GIVE 1ST 8 BYTES OF ACCT NUMBER\n         LA    R15,14             SET MAX LENGTH TO FIND END OF ACCT\n         LA    R1,0               CLEAR R1\nNUMACCT  DS    0H\n         CLC   0(2,R6),=C'),'     IS IT END OF ACCT NUMBER?\n         BE    MOVCARDS           ..YES, GO MOVE JCL CARDS\n         LA    R6,1(R6)           BUMP TO NEXT CHARACTER\n         LA    R1,1(R1)           BUMP COUNTER BY 1\n         BCT   R15,NUMACCT        MAX LENGTH OF NUMERIC PART\n         B     RETURN             DID NOT FIND END OF ACCT\nMOVCARDS DS    0H\n         MVC   0(80,R8),0(R7)     MOVE 2ND JCL CARD TO 3RD JCL CARD\n         MVI   2(R7),C' '         CLEAR FIRST BYTE\n         MVC   3(77,R7),2(R7)     CLEAR 2ND JCL CARD\n         SR    R5,R1              SUBTRACT LENGTH OF ACCT FIELD\n         EX    R5,MOVENAM         MOVE NAME FIELD TO 2ND JCL CARD\n         MVI   2(R6),C' '         CLEAR FIRST BYTE\n         EX    R5,CLRNAME         CLEAR REST OF JCL CARD\n         MVC   0(2,R6),=X'6B7D'   MOVE IN ,'\n         MVC   2(8,R6),TERMID     MOVE TERMID FROM SVC 233\n         MVC   10(3,R6),=X'7D5D6B' MOVE IN '),\nDIALUP   DS    0H\n         LA    R2,0               SET DEFAULT RETURN CODE TO ZERO\n         CLC   TERMID(4),=C'TCAM' IS TERMINAL A DIALUP?\n         BE    CHKDIAL            ..YES, SEE IF DIAL-UP AUTHORIZED\n         CLC   TERMID(5),=C'WCK41' IS TERMINAL A DIALUP?\n         BE    CHKDIAL            ..YES, SEE IF DIAL-UP AUTHORIZED\n         CLC   TERMID(4),=C'SDX6' IS TERMINAL A DIALUP?\n         BE    CHKDIAL            ..YES, SEE IF DIAL-UP AUTHORIZED\n         CLC   TERMID(4),=C'SDX7' IS TERMINAL A DIALUP?\n         BE    CHKDIAL            ..YES, SEE IF DIAL-UP AUTHORIZED\n         B     SMFREC             GO PUMP OUT SMF RECORD\nCHKDIAL  DS    0H\n         TM    LIDI1FLG,LIDI1F1   IS USER DIAL-UP AUTHORIZED?\n         BO    SMFREC             ..YES, GO PUT OUT SMF RECORD\n         TPUT  MSG,72             WRITE ERROR MESSAGE\n         LA    R2,4               SET RETURN CODE 4 FOR CANCEL\n         B     RETURN             FINI, DO NOT WRITE SMF RECORD\nSMFREC   DS    0H\n         GTSIZE\n         LTR   R0,R0              IS IT A 3270?\n         BZ    RETURN             ..NO, ALL DONE\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        INITIALIZE SMF HEADER AND DATA AREA                          *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         NOP   RETURN             ESCAPE IF PROBLEMS\n         LA    R3,SMFXSIZ         GET SMF RECORD LENGTH\n         STH   R3,SMFXLEN         INITIALIZE RECORD LENGTH\n         XC    SMFXSEG,SMFXSEG    CLEAR SEG DESCRIPTOR\n         MVI   SMFXFLG,X'02'      INITILIZE SYSTEM INDICATOR\n         MVI   SMFXRTY,201        INITIALIZE RECORD TYPE\n         TIME  BIN                GET TIME\n         ST    R0,SMFXTME         SAVE TIME OF DAY\n         ST    R1,SMFXDTE         SAVE DATE\n         L     R3,16              GET CVT POINTER\n         L     R4,196(R3)         GET SMCA POINTER\n         MVC   SMFXSID,16(R4)     MOVE IN SYSTEM ID\n         LA    R0,1               REQUEST AUTHORIZATION ON\n         SVC   212                SET AUTHORIZATION ON\n         TESTAUTH FCTN=1          ARE WE AUTHORIZATED?\n         LTR   R15,R15            CHECK RETURN\n         BNZ   RETURN             ..NO, ALL DONE\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        MAKE THIS ADDRESS SPACE AS \"NON INTERUPTABLE\" AS POSSIBLE    *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SYSEVENT DONTSWAP        ISSUE SYSEVENT MACRO NOT TO SWAP\n         SPACE 2\n         STCK  SMFXTIM            CAPTURE CURRENT CLOCK\n         LM    R4,R5,SMFXTIM      PUT IT IN REGS 4,5\n         TPUT  CMD3270,80,FULLSCR,WAIT,HOLD   CLEAR THE SCREEN\n         STCK  SMFXTIM            CAPTURE CURRENT CLOCK\n         LTR   R15,R15            WAS TPUT ANY GOOD ?\n         BNZ   OKSWAP             NO - DON'T WRITE SMF RECORD\n         SPACE 2\n         LM    R6,R7,SMFXTIM      PUT IT IN REGS 6,7\n         SLR   R6,R4              SUBTRACT MOST SIGNIFICANT HALF\n         SLR   R7,R5              SUBTRACT LEASE SIGNIFICANT HALF\n         BNM   *+8                RESULT > 0 SO WE DON'T NEED TO ADJUST\n         SL    R6,=F'1'           ADJUST FOR NEGATIVE VALUE\n         SRDL  R6,12              CONVERT TO MICROSECONDS\n         AL    R7,=F'500'         SETUP FOR ROUND UP\n         D     R6,=F'1000'        CONVERT TO MILLISECONDS\n         ST    R7,SMFXTIM         SAVE TIME DELTA\n         SPACE 2\n         SMFWTM SMFXLEN           WRITE THE SMF RECORD\nOKSWAP   DS    0H\n         SYSEVENT OKSWAP          ISSUE SYSEVENT MACRO TO ALLOW SWAP\n         XR    R0,R0              REQUEST AUTHORIZATION OFF\n         SVC   212                SET AUTHORIZATION OFF\n         EJECT\nRETURN   DS    0H                 FINI\n         L     R13,4(R13)         BACK CHAIN SAVE AREAS\n         L     R0,WORKLEN         LOAD GOTTEN CORE LENGTH\n         FREEMAIN R,LV=(0),A=(9)  FREE GOTTEN CORE\nFINI     DS    0H\n         LR    R15,R2             LOAD RETURN CODE\n         RETURN (14,12),RC=(15)   GIVE RETURN CODE ZERO\nMOVENAM  MVC   3(0,R7),2(R6)      MOVE NAME TO THIRD JCL CARD\nCLRNAME  MVC   3(0,R6),2(R6)      MOVE SPACES TO REST OF JCL CARD\n         LTORG\nZEROS    DC    PL8'0'             DEFAULT ZERO ACCT NUMBER\nOPER     DC    CL4'$WC4'          OPERATIONS\nHSS      DC    CL4'$WC3'          HSS\nIBM      DC    CL4'$WCI'          IBM\nSYSID    DC    CL4'W190'          SYSTEM ID\nUSER1    DC    CL8'$WC9JWW '      SPECIAL USER\nUSER2    DC    CL8'$WCPCMS '      SPECIAL USER\nUSER3    DC    CL8'$WC6RMC '      SPECIAL USER\nUSER4    DC    CL8'$WC2DBA '      SPECIAL USER\nUSER5    DC    CL8'$WC2DB2 '      SPECIAL USER\nRECON    DC    CL5'RECON'         RECONNECT PARM\nMSG      DC    CL72'USER NOT AUTHORIZED FOR DIAL-UP, SESSION CANCELLED'\nMSG1     DC    CL72'NOT AUTHORIZED FOR TSO ON SY1, SESSION CANCELLED  '\nCMD3270  DC    XL8'F31140403C404000' TPUT PARMS\n         DC    24XL3'114040'         TPUT PARMS\n         ACFREGS                  REGISTER EQUATES\n         ACVALD                   SVC PARAMETER LIST\n         LIDREC                   LOGONID RECORD\nSMFWORK  DSECT\nSMFXLEN  DS    H                  RECORD LENGTH\nSMFXSEG  DS    H                  SEGMENT DESCRIPTOR\nSMFXFLG  DS    XL1                SYSTEM INDICATOR (X'02')\nSMFXRTY  DS    XL1                RECORD TYPE 201 (X'C9')\nSMFXTME  DS    XL4                TIME IN 1/100 SEC RECORD WRITTEN\nSMFXDTE  DS    XL4                DATE RECORD WRITTEN\nSMFXSID  DS    XL4                SYSTEM IDENTIFICATION\n*\nSMFXUID  DS    XL8                USERID\nSMFXACT  DS    XL8                DPAP NUMBER (PACKED DECIMAL)\nSMFXTID  DS    XL8                TERMINAL ID\nSMFXTIM  DS    XL4                TIME DELTA (IN MILLISECONDS)\n*\nSMFXSIZ  EQU   *-SMFXLEN          LENGTH OF SMF RECORD\nSMFSAVE  DS    18F                SAVE AREA\nTERMID   DS    CL8                TERMID FROM SVC 233\nWORKLEN  DS    1F                 LENGTH OF GETMAINED AREA\nSMFWSIZ  EQU   *-SMFXLEN          LENGTH OF WORK AREA\n         END   LGNPXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ACFW005": {"ttr": 5130, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ACFW005) /* ACF$CMDS COMMAND LIMITING LIST FOR ACF2\n\n           ACF$CMDS IS ACF2 MODULE THAT LIMITS WHICH COMMANDS\n           TSO USERS ARE ALLOWED TO EXECUTE.\n\n     8/21/88 COMMENT OUT HBDEL HBDELETE COMMANDS UNTIL IGX00024 CAN\n             HANDLE THIS FUNCTION CODE.\n                                                                 */ .\n++ VER(Z038) FMID(ACF5000) .\n++ JCLIN .\n//GEN49 JOB WC07N0044,'531-1 CM SINGER'\n//SG21  EXEC LINKS,\n// PARM='XREF,LET,LIST,RENT,NCAL',\n//    UNIT='3380',SER=IPLXXX,N=SYS1,NAME=LINKLIB,P1=' ',\n//    MOD=,P2=' ',CLASS=T\n//LK.SYSPUNCH DD DUMMY\n//INCLUDE DD DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN DD *\n INCLUDE INCLUDE(ACF$CMDS)\n NAME ACF$CMDS(R)\n/*\n++ SRC(ACF$CMDS) DISTLIB(ASRCLIB) .\n         COPY   ACF$CMDS\n++ MAC(ACF$CMDS) DISTLIB(ACFAMAC) SYSLIB(ACFMAC) .\n$CMDS    TITLE  'A C F 2  --> STANDARD TSO COMMAND LIST ***'    ACFW005\nACF$CMDS CSECT                                                  ACFW005\n         SPACE 2                                                ACFW005\n*                                                               ACFW005\n*        THIS IS THE TSO COMMAND LIMITTING TABLE FOR            ACFW005\n*        DATA SYSTEMS DIVISION - WESTERN CENTER                 ACFW005\n*                                                               ACFW005\n         SPACE 3                                                ACFW005\n         $TSOCST  ,                                             ACFW005\n         $TSOCMD  $                                             ACFW005\n         $TSOCMD  ACCOUNT                                       ACFW005\n         $TSOCMD  ACF                                           ACFW005\n         $TSOCMD  ACFCOMP                                       ACFW005\n         $TSOCMD  ACFDEL                                        ACFW005\n         $TSOCMD  ACFSUB                                        ACFW005\n         $TSOCMD  (ACFN,ACFNRULE)                               ACFW005\n         $TSOCMD  AD                                            ACFW005\n         $TSOCMD  ADD                                           ACFW005\n         $TSOCMD  ADDALIAS                                      ACFW005\n         $TSOCMD  ADDGROUP                                      ACFW005\n         $TSOCMD  ADDSD                                         ACFW005\n         $TSOCMD  ADDUSER                                       ACFW005\n         $TSOCMD  ADMCHART                                      ACFW005\n         $TSOCMD  AFEDCMDS                                      ACFW005\n         $TSOCMD  AG                                            ACFW005\n         $TSOCMD  ALD                                           ACFW005\n         $TSOCMD  ALG                                           ACFW005\n         $TSOCMD  (ALLOCATE,ALLOC)                              ACFW005\n         $TSOCMD  ALTDSD                                        ACFW005\n         $TSOCMD  ALTER                                         ACFW005\n         $TSOCMD  ALTGROUP                                      ACFW005\n         $TSOCMD  ALTUSER                                       ACFW005\n         $TSOCMD  ALU                                           ACFW005\n         $TSOCMD  AMDPRDMP                                      ACFW005\n         $TSOCMD  APL                                           ACFW005\n         $TSOCMD  ASADMIN                                       ACFW005\n         $TSOCMD  ASM                                           ACFW005\n         $TSOCMD  ASOPER                                        ACFW005\n         $TSOCMD  (ATTRIB,ATTR)                                 ACFW005\n         $TSOCMD  AU                                            ACFW005\n         $TSOCMD  BASIC                                         ACFW005\n         $TSOCMD  BASICD                                        ACFW005\n         $TSOCMD  BASICDF                                       ACFW005\n         $TSOCMD  BASICDRN                                      ACFW005\n         $TSOCMD  BASICF                                        ACFW005\n         $TSOCMD  BASICRUN                                      ACFW005\n         $TSOCMD  BIX                                           ACFW005\n         $TSOCMD  BLDINDEX                                      ACFW005\n         $TSOCMD  BLGI2I1                                       ACFW005\n         $TSOCMD  CALL                                          ACFW005\n         $TSOCMD  CANCEL                                        ACFW005\n         $TSOCMD  CHANGE                                        ACFW005\n         $TSOCMD  CLASS                                         ACFW005\n         $TSOCMD  (CLEAR,CLR3270)                               ACFW005\n         $TSOCMD  CNVTCAT                                       ACFW005\n         $TSOCMD  COBOL                                         ACFW005\n         $TSOCMD  CONCAT                                        ACFW005\n         $TSOCMD  CONNECT                                       ACFW005\n         $TSOCMD  CONVERT                                       ACFW005\n         $TSOCMD  COPY                                          ACFW005\n         $TSOCMD  CREATE                                        ACFW005\n         $TSOCMD  CREATEH                                       ACFW005\n         $TSOCMD  CSPF                                          ACFW005\n         $TSOCMD  DD                                            ACFW005\n         $TSOCMD  (DEF,DEFINE)                                  ACFW005\n         $TSOCMD  DELALIAS                                      ACFW005\n         $TSOCMD  DELDSD                                        ACFW005\n         $TSOCMD  (DELETE,DEL)                                  ACFW005\n         $TSOCMD  DELGROUP                                      ACFW005\n         $TSOCMD  DELUSER                                       ACFW005\n         $TSOCMD  DG                                            ACFW005\n         $TSOCMD  DIGITIZE                                      ACFW005\n         $TSOCMD  DMSTATE                                       ACFW005\n         $TSOCMD  DSAT                                          ACFW005\n         $TSOCMD  DSN                                           ACFW005\n         $TSOCMD  DSPRINT                                       ACFW005\n         $TSOCMD  DSPRINTX                                      ACFW005\n         $TSOCMD  DU                                            ACFW005\n         $TSOCMD  (E,EDIT)                                      ACFW005\n         $TSOCMD  EDITIV                                        ACFW005\n         $TSOCMD  END                                           ACFW005\n         $TSOCMD  ESS                                           ACFW005\n         $TSOCMD  (EX,EXEC)                                     ACFW005\n         $TSOCMD  EXPORT                                        ACFW005\n         $TSOCMD  EXPORTRA                                      ACFW005\n         $TSOCMD  FAKEUSER                                      ACFW005\n         $TSOCMD  FCS                                           ACFW005\n         $TSOCMD  FINDALC                                       ACFW005\n         $TSOCMD  FORMAT                                        ACFW005\n         $TSOCMD  FORT                                          ACFW005\n         $TSOCMD  FREE                                          ACFW005\n         $TSOCMD  (FREEALL,FA)                                  ACFW005\n         $TSOCMD  GETSRC                                        ACFW005\n         $TSOCMD  GINFOSRC                                      ACFW005\n         $TSOCMD  GIXCMD                                        ACFW005\n         $TSOCMD  GIXPF                                         ACFW005\n         $TSOCMD  GOFORT                                        ACFW005\n         $TSOCMD  (H,HELP)                                      ACFW005\n         $TSOCMD  (HBACK,HBACKDS)                               ACFW005\n         $TSOCMD  (HBDEL,HBDELETE)                              ACFW005\n         $TSOCMD  (HDEL,HDELETE)                                ACFW005\n         $TSOCMD  HIDE                                          ACFW005\n         $TSOCMD  (HP9830,HP)                                   ACFW005\n         $TSOCMD  (HL,HLIST)                                    ACFW005\n         $TSOCMD  (HMIG,HMIGRATE)                               ACFW005\n         $TSOCMD  (HRECA,HRECALL)                               ACFW005\n         $TSOCMD  (HRECOV,HRECOVER)                             ACFW005\n         $TSOCMD  (HQ,HQUERY)                                   ACFW005\n         $TSOCMD  IIFEXEC                                       ACFW005\n         $TSOCMD  IIS                                           ACFW005\n         $TSOCMD  IIS2                                          ACFW005\n         $TSOCMD  IKJEFT25                                      ACFW005\n         $TSOCMD  IMPORT                                        ACFW005\n         $TSOCMD  IMPORTRA                                      ACFW005\n         $TSOCMD  IND$FILE                                      ACFW005\n         $TSOCMD  IPCS                                          ACFW005\n         $TSOCMD  ISPCALL                                       ACFW005\n         $TSOCMD  ISPF                                          ACFW005\n         $TSOCMD  ISPSTART                                      ACFW005\n         $TSOCMD  JESOPER                                       ACFW005\n         $TSOCMD  JMKEY                                         ACFW005\n         $TSOCMD  JOBCUU$                                       ACFW005\n         $TSOCMD  KERMIT                                        ACFW005\n         $TSOCMD  LD                                            ACFW005\n         $TSOCMD  LG                                            ACFW005\n         $TSOCMD  LIB                                           ACFW005\n         $TSOCMD  LINK                                          ACFW005\n         $TSOCMD  (LIST,L)                                      ACFW005\n         $TSOCMD  (LISTA,LISTALC)                               ACFW005\n         $TSOCMD  LISTAX                                        ACFW005\n         $TSOCMD  (LISTB,LISTBC)                                ACFW005\n         $TSOCMD  (LISTC,LISTCAT)                               ACFW005\n         $TSOCMD  LISTCRA                                       ACFW005\n         $TSOCMD  (LISTD,LISTDS)                                ACFW005\n         $TSOCMD  LISTDSD                                       ACFW005\n         $TSOCMD  LISTGRP                                       ACFW005\n         $TSOCMD  LISTR                                         ACFW005\n         $TSOCMD  LISTUSER                                      ACFW005\n         $TSOCMD  LISTV                                         ACFW005\n         $TSOCMD  LMEMBER                                       ACFW005\n         $TSOCMD  LOADGO                                        ACFW005\n         $TSOCMD  LOCK                                          ACFW005\n         $TSOCMD  LOGOFF                                        ACFW005\n         $TSOCMD  LOGON                                         ACFW005\n         $TSOCMD  LUINFO                                        ACFW005\n         $TSOCMD  MERGE                                         ACFW005\n         $TSOCMD  MPRA                                          ACFW005\n         $TSOCMD  MS                                            ACFW005\n         $TSOCMD  MSPF                                          ACFW005\n         $TSOCMD  MULTISPF                                      ACFW005\n         $TSOCMD  MVSUSERS                                      ACFW005\n         $TSOCMD  MVSAS                                         ACFW005\n         $TSOCMD  M4EXEC                                        ACFW005\n         $TSOCMD  NEWS                                          ACFW005\n         $TSOCMD  NOTE                                          ACFW005\n         $TSOCMD  OLDPROF                                       ACFW005\n         $TSOCMD  (OPERATOR,OPER)                               ACFW005\n         $TSOCMD  (OUTPUT,OUT)                                  ACFW005\n         $TSOCMD  PAN                                           ACFW005\n         $TSOCMD  PANE                                          ACFW005\n         $TSOCMD  PASSWORD                                      ACFW005\n         $TSOCMD  PCSTSOLV                                      ACFW005\n         $TSOCMD  PCXFER                                        ACFW005\n         $TSOCMD  PIECHECK                                      ACFW005\n         $TSOCMD  PIEEXEC                                       ACFW005\n         $TSOCMD  PDF                                           ACFW005\n         $TSOCMD  PDS                                           ACFW005\n         $TSOCMD  PERMIT                                        ACFW005\n         $TSOCMD  PLI                                           ACFW005\n         $TSOCMD  PLIC                                          ACFW005\n         $TSOCMD  PLOT                                          ACFW005\n         $TSOCMD  PLOTFORT                                      ACFW005\n         $TSOCMD  PLOTX                                         ACFW005\n         $TSOCMD  PM@CP                                         ACFW005\n         $TSOCMD  PRINT                                         ACFW005\n         $TSOCMD  PRTCUU$                                       ACFW005\n         $TSOCMD  PROTECT                                       ACFW005\n         $TSOCMD  PTAPE                                         ACFW005\n         $TSOCMD  PULL                                          ACFW005\n         $TSOCMD  PULLAB                                        ACFW005\n         $TSOCMD  PULLNC                                        ACFW005\n         $TSOCMD  PUNCHNC                                       ACFW005\n         $TSOCMD  PW                                            ACFW005\n         $TSOCMD  QUERYIV                                       ACFW005\n         $TSOCMD  QUIKPLOT                                      ACFW005\n         $TSOCMD  RAMIS                                         ACFW005\n         $TSOCMD  RALTER                                        ACFW005\n         $TSOCMD  RCAT                                          ACFW005\n         $TSOCMD  RDEFINE                                       ACFW005\n         $TSOCMD  RDELETE                                       ACFW005\n         $TSOCMD  RECEIVE                                       ACFW005\n         $TSOCMD  RELOGON                                       ACFW005\n         $TSOCMD  REMOVE                                        ACFW005\n         $TSOCMD  (RENAME,REN)                                  ACFW005\n         $TSOCMD  REPRO                                         ACFW005\n         $TSOCMD  RESETCAT                                      ACFW005\n         $TSOCMD  RESTDCAD                                      ACFW005\n         $TSOCMD  RESTDINS                                      ACFW005\n         $TSOCMD  RESTDSHR                                      ACFW005\n         $TSOCMD  RETRIEVE                                      ACFW005\n         $TSOCMD  RMFMON                                        ACFW005\n         $TSOCMD  RLIST                                         ACFW005\n         $TSOCMD  RLSE                                          ACFW005\n         $TSOCMD  (R,RUN)                                       ACFW005\n         $TSOCMD  RUNIV                                         ACFW005\n         $TSOCMD  RVARY                                         ACFW005\n         $TSOCMD  SA                                            ACFW005\n         $TSOCMD  SASCP                                         ACFW005\n         $TSOCMD  SEARCH                                        ACFW005\n         $TSOCMD  SETPCSDV                                      ACFW005\n         $TSOCMD  SCREEN                                        ACFW005\n         $TSOCMD  SCRIPT                                        ACFW005\n         $TSOCMD  (SE,SEND)                                     ACFW005\n         $TSOCMD  SETROPTS                                      ACFW005\n         $TSOCMD  SMCOPY                                        ACFW005\n         $TSOCMD  SPF                                           ACFW005\n         $TSOCMD  SPFALC                                        ACFW005\n         $TSOCMD  SPFCALCP                                      ACFW005\n         $TSOCMD  SPFDELT                                       ACFW005\n         $TSOCMD  SPFPRINT                                      ACFW005\n         $TSOCMD  SPFSUB                                        ACFW005\n         $TSOCMD  SPF22                                         ACFW005\n         $TSOCMD  SR                                            ACFW005\n         $TSOCMD  START                                         ACFW005\n         $TSOCMD  STARTH                                        ACFW005\n         $TSOCMD  (ST,STATUS)                                   ACFW005\n         $TSOCMD  STOP                                          ACFW005\n         $TSOCMD  STORE                                         ACFW005\n         $TSOCMD  SUBAPT                                        ACFW005\n         $TSOCMD  SUBIV                                         ACFW005\n         $TSOCMD  (SUB,SUBMIT)                                  ACFW005\n         $TSOCMD  SWCHAR                                        ACFW005\n         $TSOCMD  SWKEY                                         ACFW005\n         $TSOCMD  SWITCH                                        ACFW005\n         $TSOCMD  SYSRC                                         ACFW005\n         $TSOCMD  SYSW                                          ACFW005\n         $TSOCMD  TELAGRAF                                      ACFW005\n         $TSOCMD  (TERM,TERMINAL)                               ACFW005\n         $TSOCMD  TEST                                          ACFW005\n         $TSOCMD  TESTCOB                                       ACFW005\n         $TSOCMD  TESTFORT                                      ACFW005\n         $TSOCMD  TIME                                          ACFW005\n         $TSOCMD  TMTPUT                                        ACFW005\n         $TSOCMD  (TRANSMIT,XMIT)                               ACFW005\n         $TSOCMD  TSMSHOW                                       ACFW005\n         $TSOCMD  TSOACCT                                       ACFW005\n         $TSOCMD  TSOCUU$                                       ACFW005\n         $TSOCMD  TSOHFT                                        ACFW005\n         $TSOCMD  UNHIDE                                        ACFW005\n         $TSOCMD  USERINFO                                      ACFW005\n         $TSOCMD  (VERIFY,VFY)                                  ACFW005\n         $TSOCMD  VPS                                           ACFW005\n         $TSOCMD  VPSPRINT                                      ACFW005\n         $TSOCMD  VSAPL                                         ACFW005\n         $TSOCMD  VSBASIC                                       ACFW005\n         $TSOCMD  WAIT                                          ACFW005\n         $TSOCMD  WHEN                                          ACFW005\n         $TSOCMD  WHOAMI                                        ACFW005\n         $TSOCMD  X                                             ACFW005\n         $TSOCMD  XPRA                                          ACFW005\n         $TSOCMD  ,                PATCH AREA                   ACFW005\n         $TSOCMD  ,                PATCH AREA                   ACFW005\n         $TSOCEND ,                                             ACFW005\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACFW006": {"ttr": 5380, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ACFW006) /* DEFINES ALL OPTIONS FOR ACF2/IMS\n\n         DEFINES GLOBAL ACF2/IMS PARAMETER SELECTIONS FOR THE\n         PRODUCTION AND TEST SYSTEMS AT THE WESTERN CENTER.\n                                                     */ .\n++ VER(Z038) FMID(ACF5000) .\n++ JCLIN .\n//GEN49 JOB WC07N0044,'531-1 CM SINGER'\n//SG21  EXEC LINKS,\n// PARM='XREF,LET,LIST,RENT',\n//    UNIT='3350',SER=IPLXXX,N=SYS1,NAME=LPALIB,P1=' ',\n//    MOD=,P2=' ',CLASS=T\n//LK.SYSPUNCH DD DUMMY\n//INCLUDE DD DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN DD *\n INCLUDE INCLUDE(ACF$IMSP)\n NAME ACF$IMSP(R)\n INCLUDE INCLUDE(ACF$IMST)\n NAME ACF$IMST(R)\n INCLUDE INCLUDE(ACF$IMSX)\n NAME ACF$IMSX(R)\n/*\n++ SRC(ACF$IMSP) DISTLIB(ASRCLIB) .\n         COPY ACF$IMSP                                         ACFW006\n++ MAC(ACF$IMSP) DISTLIB(ACFAMAC) SYSLIB(ACFMAC) .\nIIMSP    TITLE 'ACF2/IMS PARAMETER MODULE FOR PRODUCTION'      ACFW006\n*                                                              ACFW006\n*              ACF2/IMS PRODUCTION OPTIONS                     ACFW006\n*              -------- ---------- -------                     ACFW006\n*                                                              ACFW006\nACF$IMSP CSECT                                                 ACFW006\n         @IMS  DFTLID=IMSPDFT,        DEFAULT LOGONID          ACFW006 X\n               RELOAD=RELOAD,         RELOAD TRANSACTION NAME  ACFW006 X\n               QNAME=,                NOT DOCUMENTED MUTLI APP ACFW006 X\n               MAXVIO=10,             MAX VIO SESSION          ACFW006 X\n               SUSPEND=NO,            WHEN MAX VIO REACHED     ACFW006 X\n               MODE=ABORT,            IMS MODE                 ACFW006 X\n               DCWTO=YES,             WTOS FOR DC VIOLATIONS   ACFW006 X\n               BMPWTO=YES,            WTOS FOR BMP VIOLATIONS  ACFW006 X\n               AUTH=(LIDM2FLG,LIDM2IMS),  AUTH IMS BIT         ACFW006 X\n               ROUTE=(8,9,11),        ROUTE CODES FOR WTOS     ACFW006 X\n               DESC=0,                DESCRIPTOR CODES FOR WTO ACFW006 X\n               AGN=IGNORE,            APPLICATION GROUP NAME   ACFW006 X\n               TRN=ITR,               TRANSACTION RESOURCE     ACFW006 X\n               TLK=IGNORE,            TRANSACTION FROM LINK    ACFW006 X\n               PTP=ITR,               PROG TO PROG SWITCH      ACFW006 X\n               CDL=ITR,               CHANGE DL/I CALL         ACFW006 X\n               SET=ITR,               /SET COMMAND             ACFW006 X\n               LCK=IGNORE             /LOCK COMMAND            ACFW006\n         EJECT                                                 ACFW006\n         LIDREC ,                      EXPAND LOGONID RECORD   ACFW006\n         END   ACF$IMSP                                        ACFW006\n++ SRC(ACF$IMST) DISTLIB(ASRCLIB) .\n         COPY ACF$IMST                                         ACFW006\n++ MAC(ACF$IMST) DISTLIB(ACFAMAC) SYSLIB(ACFMAC) .\nIIMST    TITLE 'ACF2/IMS PARAMETER MODULE FOR PRODUCTION'      ACFW006\n*                                                              ACFW006\n*              ACF2/IMS TEST OPTIONS                           ACFW006\n*              -------- ---- -------                           ACFW006\n*                                                              ACFW006\nACF$IMST CSECT                                                 ACFW006\n         @IMS  DFTLID=IMSTDFT,        DEFAULT LOGONID          ACFW006 X\n               RELOAD=RELOAD,         RELOAD TRANSACTION NAME  ACFW006 X\n               QNAME=,                NOT DOCUMENTED MUTLI APP ACFW006 X\n               MAXVIO=10,             MAX VIO SESSION          ACFW006 X\n               SUSPEND=NO,            WHEN MAX VIO REACHED     ACFW006 X\n               MODE=ABORT,            IMS MODE                 ACFW006 X\n               DCWTO=YES,             WTOS FOR DC VIOLATIONS   ACFW006 X\n               BMPWTO=YES,            WTOS FOR BMP VIOLATIONS  ACFW006 X\n               AUTH=(LIDM2FLG,LIDM2IMS),  AUTH IMS BIT         ACFW006 X\n               ROUTE=(8,9,11),        ROUTE CODES FOR WTOS     ACFW006 X\n               DESC=0,                DESCRIPTOR CODES FOR WTO ACFW006 X\n               AGN=IGNORE,            APPLICATION GROUP NAME   ACFW006 X\n               TRN=ITT,               TRANSACTION RESOURCE     ACFW006 X\n               TLK=IGNORE,            TRANSACTION FROM LINK    ACFW006 X\n               PTP=ITT,               PROG TO PROG SWITCH      ACFW006 X\n               CDL=ITT,               CHANGE DL/I CALL         ACFW006 X\n               SET=ITT,               /SET COMMAND             ACFW006 X\n               LCK=IGNORE             /LOCK COMMAND            ACFW006\n         EJECT                                                 ACFW006\n         LIDREC ,                      EXPAND LOGONID RECORD   ACFW006\n         END   ACF$IMST                                        ACFW006\n++ SRC(ACF$IMSX) DISTLIB(ASRCLIB) .\n         COPY ACF$IMSX                                         ACFW006\n++ MAC(ACF$IMSX) DISTLIB(ACFAMAC) SYSLIB(ACFMAC) .\nIIMSX    TITLE 'ACF2/IMS PARAMETER MODULE FOR PRODUCTION'      ACFW006\n*                                                              ACFW006\n*              ACF2/IMS TEST OPTIONS                           ACFW006\n*              -------- ---- -------                           ACFW006\n*                                                              ACFW006\nACF$IMSX CSECT                                                 ACFW006\n         @IMS  DFTLID=IMSTDFT,        DEFAULT LOGONID          ACFW006 X\n               RELOAD=RELOAD,         RELOAD TRANSACTION NAME  ACFW006 X\n               QNAME=,                NOT DOCUMENTED MUTLI APP ACFW006 X\n               MAXVIO=10,             MAX VIO SESSION          ACFW006 X\n               SUSPEND=NO,            WHEN MAX VIO REACHED     ACFW006 X\n               MODE=ABORT,            IMS MODE                 ACFW006 X\n               DCWTO=YES,             WTOS FOR DC VIOLATIONS   ACFW006 X\n               BMPWTO=YES,            WTOS FOR BMP VIOLATIONS  ACFW006 X\n               AUTH=(LIDM2FLG,LIDM2IMS),  AUTH IMS BIT         ACFW006 X\n               ROUTE=(8,9,11),        ROUTE CODES FOR WTOS     ACFW006 X\n               DESC=0,                DESCRIPTOR CODES FOR WTO ACFW006 X\n               AGN=IGNORE,            APPLICATION GROUP NAME   ACFW006 X\n               TRN=ITT,               TRANSACTION RESOURCE     ACFW006 X\n               TLK=IGNORE,            TRANSACTION FROM LINK    ACFW006 X\n               PTP=ITT,               PROG TO PROG SWITCH      ACFW006 X\n               CDL=ITT,               CHANGE DL/I CALL         ACFW006 X\n               SET=ITT,               /SET COMMAND             ACFW006 X\n               LCK=IGNORE             /LOCK COMMAND            ACFW006\n         EJECT                                                 ACFW006\n         LIDREC ,                      EXPAND LOGONID RECORD   ACFW006\n         END   ACF$IMSX                                        ACFW006\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACFW007": {"ttr": 5383, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ACFW007) /* DEFINES ALL OPTIONS FOR ACFFDR FOR ACF2\n\n           FIELD DEFINITION RECORD IS ACF2 MODULE THAT DEFINES\n           ALL INSTALLATION OPTIONS FOR ACF2.  ALSO CONTAINS\n           MACRO USERLID WHICH DEFINES USER INSTALLATION OPTIONS\n                                                                 */ .\n++ VER(Z038) FMID(ACF5000) .\n++ SRC(ACFFDR) DISTLIB(ACFAMAC) SYSLIB(ACFMAC) .\nACFFDR   TITLE '-   FIELD DEFINITION RECORD'\n***********************************************************************\n*                                                                     *\n*        LOCAL INSTALLATIONS SHOULD NOT RENUMBER ANY SKK PROVIDED     *\n*        PORTIONS OF THE FDR AS ACF2 MAINTENANCE MAY BE APPLIED TO    *\n*        IT IN THE FUTURE.                                            *\n*                                                                     *\n***********************************************************************\nACFFDR   CSECT\n         @SETUP ,\n*                                GROUP\n*                                  0  (DEFAULT) HEADING INFO\n         @GROUP 'CANCEL/SUSPEND'   1\n         @GROUP 'PRIVILEGES'       2\n         @GROUP 'ACCESS'           3\n         @GROUP 'PASSWORD'         4\n         @GROUP 'TSO'              5\n         @GROUP 'STATISTICS'       6\n         @GROUP 'CICS'             7\n         @GROUP 'IMS'              8\n         @GROUP 'IDMS'             9\n         @GROUP 'RESTRICTIONS'     10\n         @GROUP 'WESTERN CENTER'   11\n         @GROUP 'UNION'            12\n         @GROUP 'ACCOUNT'          13\n         @GROUP 'MISCELLANEOUS'    14\n*\nSEC      EQU   SECURITY\nACCT     EQU   ACCOUNT\nLEAD     EQU   LEADER\nCON      EQU   CONSULT\nAUD      EQU   AUDIT\n*\n         COPY  ACFCFDE             INCLUDE ACF2 FIELD DEFS\n*\n         COPY  USERCFDE            INCLUDE USER DEFINITIONS\n         EJECT ,\n***************************************************************\n*\n*   THE CSVC ENTRY DEFINES THE TWO SVC NUMBERS THAT ARE\n*   DEDICATED FOR ACF2 USE.\n*\n***************************************************************\n         @CSVC  ALTER=214,VALD=213\n*\n***************************************************************\n*                                                               TS72813\n*   SPECIFY DEFAULT ACF2 CLUSTER/BACKUP DATASET NAMES WITH      TS72813\n*   GROUP NAME OF PRIMARY.                                      TS72813\n*                                                               TS72813\n*      S ACF2 -OR-  S ACF2,PARM='DDSN(PRIMARY)'                 TS72813\n*                                                               TS72813\n*   TO DYNAMICALLY ALLOCATE THE SPECIFIED PRIMARY DATASETS      TS72813\n*                                                               TS72813\n***************************************************************\n         @DDSN PRIMARY,                   ** DEFAULT GROUP NDX  TS72813X\n               RULE='ACF2.RULES',         ** RULES CLUSTER      TS72813X\n               LID='ACF2.LOGONIDS',       ** LOGONID CLUSTER    TS72813X\n               INFO='ACF2.INFOSTG',       ** GEN RESOURCE CLSTR TS72813X\n               BRULE='ACF2.BKRULES',      ** RULES BACKUP       TS72813X\n               BLID='ACF2.BKLIDS',        ** LOGONIDS BACKUP    TS72813X\n               BINFO='ACF2.BKINFO'        ** RESOURCE BACKUP    TS72813\n*\n***************************************************************\n*                                                               TS72813\n*   SPECIFY ALTERNATE ACF2 CLUSTER/BACKUP DATASET NAMES         TS72813\n*   WITH A GROUP NAME OF ALT.                                   TS72813\n*                                                               TS72813\n*      S ACF2,PARM='DDSN(ALT)'                                  TS72813\n*                                                               TS72813\n*   TO DYNAMICALLY ALLOCATE THE SPECIFIED DATASETS.             TS72813\n*                                                               TS72813\n***************************************************************\n         @DDSN ALT,                       ** ALTERNATE GROUP NDXTS72813X\n               RULE='VSW3.ACF2.ALTRULES', ** ALT RULES CLUSTER  TS72813X\n               LID='VSW3.ACF2.ALTLIDS',   ** ALT LOGONID CLUSTERTS72813X\n               INFO='VSW3.ACF2.ALTINFO',  ** ALT RESOURCE CLUSTETS72813X\n               BRULE='VSW3.ACF2.ABKRULES', ** ALT RULES BACKUP  TS72813X\n               BLID='VSW3.ACF2.ABKLIDS',  ** ALT LOGONID BACKUP TS72813X\n               BINFO='VSW3.ACF2.ABKINFO'  ** ALT RESOURCE BACKUPTS72813\n*\n***************************************************************\n*\n*   THE HEADER ENTRY DEFINES THE FORMAT OF THE FIRST LINE\n*   OF THE LOGONID DISPLAY OF THE ACF COMMAND.\n*\n***************************************************************\n         @HEADER LID,UID,NAME\n*\n***************************************************************\n*\n*   SPECIFY @MLID MACROS TO DESCRIBE THE VARIOUS LOGONID RECORD\n*   COMPRESSION ALGORITHMS FOR THE DIFFERENT MULTI USER SINGLE\n*   ADDRESS SPACE SYSTEMS AND THEIR INDIVIDUAL REQUIREMENTS.\n*   THE ACF2 @MLID SPECIFICATION MUST BE FIRST AND MUST NOT BE\n*   MODIFIED BY THE INSTALLATION.\n*\n***************************************************************\n         @MLID ACF2,MLAREC,MLALENG,    NAME, START, LENGTH      EN00020X\n               (LIDLID,MLALID),        LOGONID                  EN00020X\n               (LIDNAME,MLANAME),      USER'S NAME              EN00020X\n               (LIDPFX,MLAPFX),        OWNED DSET PREFIX        EN00020X\n               (LIDSSCOP,MLASSCOP),    DSN SCOPE                EN00020X\n               (LIDASCOP,MLAASCOP),    LID SCOPE                EN00020X\n               (LIDUSCOP,MLAUSCOP),    UID SCOPE                EN00020X\n               (LIDSCPL,MLASCPL),      SCOP LIST NAME           TS73800X\n               (LIDTFLAG,MLATFLAG),    USER TYPE                EN00020X\n               (LIDMFLG,MLAMFLG),      MISCELLANEOUS FLAGS      EN00020X\n               (LIDCFLAG,MLACFLAG),    CANCEL/SUSPEND FLAGS     EN00020X\n               (LIDPSWD,MLAPSWD),      ENCRIPTED PASSWORD DATA  EN00020X\n               (LIDPSTOD,MLAPSTOD),    PASSWORD SET TIME OF DAY EN00020X\n               (LIDZONE,MLAZONE),      ZONE NAME FOR TIME ADJ   TS77916X\n               (LIDNPSWD,MLANPSWD)     NEW FORMATTED PASSWORD   TS73845\n*\n         @MLID CICS,MLACICS,MLACICSL,  NAME, START, LENGTH      TS77227X\n               (LIDCOPCL,MLACOPCL),    OPERATOR CLASS           TS77227X\n               (LIDCOPID,MLACOPID),    OPERATOR ID              TS77227X\n               (LIDCOPKY,MLACOPKY),    OPERATOR SECURITY KEY    TS77227X\n               (LIDCOPRL,MLACOPRL),    RESOURCE LEVEL KEY       TS77227X\n               (LIDCOPPR,MLACOPPR),    OPERATOR PRIORITY        TS77227X\n               (LIDIDLE,MLACIDLE),     MAX IDLE TIME IN MINUTES TS75717X\n               (LIDM2FLG,MLACAUTH),    CICS SIGNON AUTH BYTE;   TS77227X\n               (LIDCOPKX,MLACOPKX)     MAX IDLE TIME IN MINUTES TS75717\n*                                 NOTE: THIS FIELD CORRESPONDS  TS77227\n*                                       TO THE @CICS AUTH= PARM TS77227\n*                                                               IDMS200\n*        SPECIFY THE IDMS @MLID DEFINITION                      IDMS200\n*                                                               IDMS200\n         @MLID IDMS,MLAIDMS,MLAIDMSL,  NAME, START, LENGTH      IDMS200X\n               (LIDMAUTH,MLAIAUTH),    IDMS AUTHORIZATION BYTE  IDMS200X\n               (LIDIDMPC,MLAIPROF),    IDMS PROFILE CLIST NAME  TS79845X\n               (LIDIDMPV,MLAIPRVS),    IDMS PROF. CLIST VERSION TS79845X\n               (LIDISCGP,MLAISCG)      IDMS SECURITY CLASSES    TS79845\n*\n***************************************************************\n*\n*   SPECIFY @MUSASS MACROS TO DEFINE THE MULTIUSER SINGLE\n*   ADDRESS SPACE SYSTEMS THAT ARE TO HAVE SPECIAL MUSASS\n*   SUPPORT.\n*\n***************************************************************\n         @MUSASS M204ENGR,MLID=ACF2,CACHE=NO                   ACFW007\n         @MUSASS M204GAF,MLID=ACF2,CACHE=NO                    ACFW007\n         @MUSASS M204PURC,MLID=ACF2,CACHE=NO                   ACFW007\n         @MUSASS M204TEST,MLID=ACF2,CACHE=NO                   ACFW007\n         @MUSASS M204PROD,MLID=ACF2,CACHE=NO                   ACFW007\n         @MUSASS NETVS1,MLID=ACF2,CACHE=NO                     ACFW007\n         @MUSASS NETVS3,MLID=ACF2,CACHE=NO                     ACFW007\n         @MUSASS NETVS4,MLID=ACF2,CACHE=NO                     ACFW007\n         @MUSASS NTV1AP,MLID=ACF2,CACHE=NO                     ACFW007\n         @MUSASS NTV2AP,MLID=ACF2,CACHE=NO                     ACFW007\n         @MUSASS NTV4AP,MLID=ACF2,CACHE=NO                     ACFW007\n         @MUSASS IMSPROD,MLID=ACF2,CACHE=NO                    ACFW007\n         @MUSASS IMSTEST3,MLID=ACF2,CACHE=NO                   ACFW007\n         @MUSASS IMSTEST2,MLID=ACF2,CACHE=NO                   ACFW007\n         @MUSASS IMSTEST,MLID=ACF2,CACHE=NO                    ACFW007\n         @MUSASS VTP,MLID=ACF2,CACHE=NO VTAMPLUS(SUPERSESSION) ACFW007\n         @MUSASS CICSCVT,MLID=CICS,                            ACFW007 X\n               CVTNAME=ACF##CVT,CVTCOM=YES,WORK=(0,0),         ACFW007 X\n               FASTPTH=YES,CACHE=YES,CACHE#=5                  ACFW007\n*\n***************************************************************\n*\n*   THE SMF ENTRY DEFINES THE RECORD NUMBERS THAT ACF2 IS\n*   TO USE WHEN PRODUCING ITS SMF RECORDS.\n*\n***************************************************************\n         @SMF  PSWD=0,       INVALID PASSWORD/AUTHORITY         ACF400 X\n               DSN=0,        DSN AND PROG VIO/LOG/TRACE         ACF400 X\n               LID=0,        LOGONID MODIFICAITON JOURNAL       ACF400 X\n               RULE=0,       ACCESS RULE MODIFICATION JOURNAL   ACF400 X\n               JTRACE=0,     RESTRICTED LOGONID JOB LOG         ACF400 X\n               COMMAND=0,    TSO COMMAND RECORDS                ACF400 X\n               INFO=0,       INFO STG MODIFICATION JOURNAL      ACF400 X\n               RSRC=0,       RESOURCE VIO/LOG/TRACE             ACF400 X\n               ACF2=250,     COMBINED SMF RECORD (R400)         ACF400 X\n               JINIT=FIRST,  ACF2 JOB INIT IS BEFORE IEFUJI     ACF400 X\n               SINIT=FIRST,  ACF2 STEP INIT IS BEFORE IEFUSI    ACF400 X\n               JTERM=LAST    ACF2 JOB TERM IS AFTER IEFACTRT    ACF400\n*\n***************************************************************\n*\n*   THE UID ENTRY DEFINES THE USER IDENTIFICATION STRING.\n*\n***************************************************************\n         @UID   LID,TYPE,DIV,UNIT,DEPT,FCN,DUTY,TOOL,CENTER,SECGRP\n*\n         EJECT ,\n***************************************************************\n*\n*   GENERATE THE ACFFDR CSECT\n*\n***************************************************************\n         @GENFDR ,\n         END\n++ MAC(USERLID) DISTLIB(ACFAMAC) SYSLIB(ACFMAC) .\n*        COPY  USERLID                 IN LIDREC MACRO         ACFW007\nUSERLID  DS        0D                  START USER AREA IN LID  ACFW007\nLIDDSSZZ DC        Y(LIDDSSLN,192-LIDDSSLN)  ERR IF TOO BIG    ACFW007\n         ORG       USERLID             REUSE SPACE             ACFW007\n         SPACE     1                                           ACFW007\n*************************************************************  ACFW007\n*                                                              ACFW007\n*  USERLID - THIS SOURCE MATERIAL IS COPIED INTO THE USER      ACFW007\n*            DEFINITION SECTION OF THE LOGONID RECORD 'DSECT'. ACFW007\n*            THE INSTALLATION MAY REPLACE THIS MODULE OR       ACFW007\n*            EDIT IN ITEMS WHICH ARE TO BE DEFINED BY @CFDE    ACFW007\n*            MACRO ENTRIES IN THE ACFFDR. THE LENGTH ATTRIBUTE ACFW007\n*            OF EACH SYMBOL DEFINED HERE IS USED IN THE        ACFW007\n*            RELATED @CFDE MACRO EXPANSION.                    ACFW007\n*                                                              ACFW007\n*  NOTE -- THE TOTAL LENGTH OF ALL INSTALLATION ADDED SYMBOLS  ACFW007\n*          SHOULD NOT EXCEED 192(DECIMAL), C0(HEX) BYTES.      ACFW007\n*                                                              ACFW007\n*************************************************************  ACFW007\n*                                                              ACFW007\n*        USER IDENTIFICATION FIELDS                            ACFW007\n*                                                              ACFW007\nLIDKWRD1 DS        CL8               DAIL-UP KEYWORD           ACFW007\nLIDSECGP DS        CL3               SECURITY GROUP            ACFW007\nLIDPLANT DS        CL4               PLANT/WORK LOCATION       ACFW007\nLIDMZONE DS        CL10              INTERNAL MAIL ZONE        ACFW007\nLIDBOSS  DS        CL20              SUPERVISOR'S NAME         ACFW007\nLIDBADGE DS        CL13              EMPLOYEE/BADGE NUMBER     ACFW007\nLIDBXXXX DS        CL8               DISTRIBUTION OUTPUT BIN   ACFW007\n*                                                              ACFW007\n*        USER IDENTIFICATION STRING FIELDS                     ACFW007\n*                                                              ACFW007\nLIDTYPE  DS        CL1               TYPE OF LID, IE TSO, IMS  ACFW007\nLIDDIV   DS        CL2               DSS STD DIVISION CODE     ACFW007\nLIDUNIT  DS        CL1               DIVISION DEFINED SUB-UNIT ACFW007\nLIDDEPT  DS        CL3               DEPARTMENT NUMBER         ACFW007\nLIDFCN   DS        CL2               SUB-DEPARTMENT/FUNCTION   ACFW007\nLIDDUTY  DS        CL1               DEPARTMENT DEFINED        ACFW007\nLIDTOOL  DS        CL2               DSD WIDE TOOL ID          ACFW007\nLIDCENTR DS        CL1               DATA CENTER               ACFW007\n         DS        CL3               PLACE HOLDER              ACFW007\n         SPACE     1                                           ACFW007\n*        MISC FIELDS FOR NOW...                                ACFW007\n*                                                              ACFW007\nLIDQUOTA DS        CL8               GROUP FOR SESSION QUOTA   ACFW007\nLIDBDAY  DS        PL4               BIRTHDAY                  ACFW007\nLIDSDAT  DS        PL4               CREATION DATE             ACFW007\nLIDREAS  DS        CL20              CANCELLED USER REASON     ACFW007\n         SPACE     3                                           ACFW007\nLIDXXXXX DS        CL5               CICS/ACF 4.0 EXTENDED KEY ACFW007\nLIDTSAR  DS        CL6               TSAR NUMBER               ACFW007\nLIDPAYN  DS        CL20              PAYNAME                   ACFW007\n         SPACE     3                                           ACFW007\nLIDISCG  DS        0XL32        DEFINE IDMS SECURITY CLASS GRP ACFW007\nLIDISCGP DS        0XL2         DEFINE ACTIVE SECURITY CLASS   ACFW007\nLIDISC01 DS        XL1          IDMS SECURITY CLASS BYTE 01    ACFW007\nLIDIS001 EQU       X'80'        IDMS SECURITY CLASS BYTE 001   ACFW007\nLIDIS002 EQU       X'40'        IDMS SECURITY CLASS BYTE 002   ACFW007\nLIDIS003 EQU       X'20'        IDMS SECURITY CLASS BYTE 003   ACFW007\nLIDIS004 EQU       X'10'        IDMS SECURITY CLASS BYTE 004   ACFW007\nLIDIS005 EQU       X'08'        IDMS SECURITY CLASS BYTE 005   ACFW007\nLIDIS006 EQU       X'04'        IDMS SECURITY CLASS BYTE 006   ACFW007\nLIDIS007 EQU       X'02'        IDMS SECURITY CLASS BYTE 007   ACFW007\nLIDIS008 EQU       X'01'        IDMS SECURITY CLASS BYTE 008   ACFW007\nLIDISC02 DS        XL1          IDMS SECURITY CLASS BYTE 02    ACFW007\nLIDIS009 EQU       X'80'        IDMS SECURITY CLASS BYTE 009   ACFW007\nLIDIS010 EQU       X'40'        IDMS SECURITY CLASS BYTE 010   ACFW007\nLIDIS011 EQU       X'20'        IDMS SECURITY CLASS BYTE 011   ACFW007\nLIDIS012 EQU       X'10'        IDMS SECURITY CLASS BYTE 012   ACFW007\nLIDIS013 EQU       X'08'        IDMS SECURITY CLASS BYTE 013   ACFW007\nLIDIS014 EQU       X'04'        IDMS SECURITY CLASS BYTE 014   ACFW007\nLIDIS015 EQU       X'02'        IDMS SECURITY CLASS BYTE 015   ACFW007\nLIDIS016 EQU       X'01'        IDMS SECURITY CLASS BYTE 016   ACFW007\nLIDIRSVD DS        XL30         RESERVED FOR FUTURE IDMS USE   ACFW007\n         SPACE     1                                           ACFW007\nLIDDSSLN EQU       *-USERLID        CURRENT HIGH WATER MARK   ACFW007\n************* END OF USERLID ********************************  ACFW007\n         SPACE     3                                           ACFW007\n++ MAC(USERXLID) DISTLIB(ACFAMAC) SYSLIB(ACFMAC) .\nLIDP2ACT DS        CL12              M204 PROD ACCOUNT         ACFW007\nLIDT2ACT DS        CL12              M204 TEST ACCOUNT         ACFW007\nLIDPIACT DS        CL12              IDMS PROD ACCOUNT         ACFW007\nLIDTIACT DS        CL12              IDMS TEST ACCOUNT         ACFW007\nLIDVMACT DS        CL12              VM ACCOUNT                ACFW007\nLIDBIN   DS        CL11              DISTRIBUTION OUTPUT BIN   ACFW007\nLIDU1FLG DS        XL1          USER FLAGS 03/16/88            ACFW007\nLIDU1F1  EQU       X'80'        MVSCMND FLAG                   ACFW007\nLIDU1F2  EQU       X'40'        SUPERCESSION  AUTH BIT         ACFW007\nLIDU1F3  EQU       X'20'        NETVS1 AUTH BIT                ACFW007\nLIDU1F4  EQU       X'10'        NETVS3 AUTH BIT                ACFW007\nLIDU1F5  EQU       X'08'        NETVS4 AUTH BIT                ACFW007\nLIDU1F6  EQU       X'04'        NETVS1 AUTH BIT                ACFW007\nLIDU1F7  EQU       X'02'        NETVS3 AUTH BIT                ACFW007\nLIDU1F8  EQU       X'01'        NETVS4 AUTH BIT                ACFW007\nLIDU2FLG DS        XL1          USER FLAGS 08/07/88            ACFW007\nLIDU2F1  EQU       X'80'        TSOALIAS COMMAND FLAG          ACFW007\nLIDU2F2  EQU       X'40'        OWNER FLAG FOR RCHANGE         ACFW007\nLIDU2F3  EQU       X'20'        SILO AUTHORIZATION FLAG        ACFW007\nLIDU2F4  EQU       X'10'        TSOSY1                         ACFW007\nLIDU2F5  EQU       X'08'        AVAILABLE                      ACFW007\nLIDU2F6  EQU       X'04'        AVAILABLE                      ACFW007\nLIDU2F7  EQU       X'02'        AVAILABLE                      ACFW007\nLIDU2F8  EQU       X'01'        AVAILABLE                      ACFW007\n         SPACE     3                                           ACFW007\n++ MAC(ACFCFDE) DISTLIB(ACFAMAC) SYSLIB(ACFMAC) .\n*\n*\n***************************************************************\n*                                                             *\n*                      A C F C F D E                          *\n*                                                             *\n***************************************************************\n*                                                             *\n*    THIS PORTION OF THE FIELD DEFINITION RECORD (FDR)        *\n*    DEFINES THOSE LOGONID RECORD FIELDS THAT ARE SUPPLIED    *\n*    BY SKK AND ARE REQUIRED FOR ACF2 OPERATION. THE          *\n*    INSTALLATION MAY CHANGE THE 'LIST' AND 'ALTER'           *\n*    AUTHORITIES AND THE FIELD DISPLAY GROUPS ONLY.           *\n*                                                             *\n*                                                             *\n*    THIS CODE IS PART OF THE ACF2 SYSTEM, A LICENSED         *\n*    PROGRAM PRODUCT OF SKK, INC.                             *\n*                                                             *\n***************************************************************\n*                                                             *\n*                                                             *\n*              M A I N T E N A N C E   L O G                  *\n*              ---------------------   -----                  *\n*                                                             *\n*  TS75896  02/18/83  REL 3.1.4                               * TS75896\n*         CORRECT CICSCL @CFDE                                * TS75896\n*                                                             * TS75896\n*  TS77806  04/18/83  REL 3.1.4                               * TS77806\n*         ADDED ACC-SRCE TO CFDE'S                            * TS77806\n*                                                             * TS77806\n*  TS77263  04/18/83  REL 3.1.4                               * TS77263\n*         ADDED TSORBA TO CFDE'S                              * TS77263\n*                                                             * TS77263\n*-------------------------------------------------------------*\n*                                                             * TS75360\n*  TS75360  12/21/83  REL 4.0.0                               * TS75360\n*                                                             * TS75360\n*         ADDED UADSINDX, LGN-INDX, OID, AND OID-ALL          * TS75360\n*                                                             * TS79135\n*  TS79135  02/14/84  REL 4.0.0                               * TS79135\n*                                                             * TS79135\n*         ADDED MAINT FIELD @CFDE                             * TS79135\n*                                                             * TS73994\n*  TS73994  04/16/84  REL 4.0.0                               * TS73994\n*                                                             * TS73994\n*       - SIMPLIFIED CODING OF @CFDE MACROS BY ALLOWING       * TS73994\n*         RRTN= AND PRTN= TO DEFAULT IN MOST CASES            * TS73994\n*                                                             * TS77555\n*  TS77555  04/16/84  REL 4.0.0                               * TS77555\n*                                                             * TS77555\n*       - SPECIFIED MINDAYS VALIDATION ROUTINE FOR 'PASSWORD' * TS77555\n*         FIELD                                               * TS77555\n*                                                             * TS77555\n*       - PREVENT THE ASSIGNMENT OF NEGATIVE VALUES TO        * TS77555\n*         SELECTED BINARY DATA ITEMS VIA VALIDATION-2 RTN14   * TS77555\n*                                                             * TS77555\n*  TS78019  05/14/84  REL 4.0.0                               * TS78019\n*                                                             * TS78019\n*       - ADDED NEW FIELD MON-LOG                             * TS78019\n*                                                             * TS78019\n*  TS75222  06/26/84  REL 4.0.0                               * TS75222\n*                                                             * TS75222\n*       - ADDED NEW CICSKEYX FIELD TO HANDLE SECURITY KEY     * TS75222\n*         EXTENSIONS FOR CICS 1.6                             * TS75222\n*                                                             *\n*------------------ ACF2/MVS REL 4.1 -------------------------*\n*                                                             *\n*                                                             * TS76456\n*  TS76456  02/04/85  REL 4.1                                 * TS76456\n*                                                             * TS76456\n*       - ADDED ACTIVE FIELD TO ALLOW A LOGONID TO BECOME     * TS76456\n*         ACTIVE ON A GIVEN DATE.                             * TS76456\n*                                                             *\n*  TS74354  06/04/85  REL 4.1                                 * TS74354\n*                                                             * TS74354\n*       - ADDED RRTN=0 TO PGM FIELD TO PREVENT ITS RETURN     * TS74354\n*         DURING A FORMATTED LOGONID LIST. PGM IS AN ALIAS    * TS74354\n*         FOR PROGRAM.                                        * TS74354\n*                                                             *\n*  TS85129  06/04/85  REL 4.1                                 * TS85129\n*                                                             * TS85129\n*       - ADDED VM PRIVILEGE BIT FOR ACF2/VM COMPATIBILITY    * TS85129\n*       - ADDED SRF BIT FOR ACF2/VM COMPATIBILITY             * TS85129\n*                                                             *\n*                                                             *\n*  TS76575  06/11/85  REL 4.1                                 * TS76575\n*                                                             * TS76575\n*       - CHANGED ACC-SRCE AND TSORBA LIST FLAGS TO NULL TO   * TS76575\n*         PREVENT THE FIELDS FROM BEING SEEN UNLESS THERE     * TS76575\n*         IS ACTUAL DATA IN THE FIELDS.                       * TS76575\n*                                                             *\n*  TS73765  06/11/85  REL 4.1                                 * TS73765\n*                                                             * TS73765\n*       - ADDED ZERO=YES TO ALL CFDES FOR FIELDS THAT WERE    * TS73765\n*         PREVIOUSLY DISTRIBUTED IN THE @ZEROFLDS MACRO.      * TS73765\n*                                                             *\n*  TS73768  06/20/85  REL 4.1                                 * TS73768\n*                                                             * TS73768\n*       - ADDED TRIM=NO PARAMETER TO VARIOUS HEX FIELDS TO    * TS73768\n*         SUPPRESS THE TRIMMING OF TRAILING ZEROES WHEN       * TS73768\n*         THE LOGONID RECORD IS DISPLAYED. THIS PARAMETER     * TS73768\n*         WAS INTRODUCED IN REL 4.1.                          * TS73768\n*                                                             *\n*  TS72700  07/12/85  REL 4.1                                 * TS72700\n*                                                             * TS72700\n*       - ADDED USER AUTHENTICATION DEVICE BITS TO THE        * TS72700\n*         LOGONID RECORD.  EACH OF THESE BITS DESCRIBES A     * TS72700\n*         USER AUTH SUPPORT FACILITY THAT AN INDIVIDUAL       * TS72700\n*         MUST USE TO OBTAIN ACCESS TO THE SYSTEM.  ONLY      * TS72700\n*         ONE BIT MAY BE TURNED ON PER USER.  THE NAMES       * TS72700\n*         CHOSEN FOR THESE BITS ARE NOT VARY MEANINGFULL      * TS72700\n*         AND SHOULD BE CHANGED TO REFLECT THE AUTH SUPPORT   * TS72700\n*         FACILITY NAME.                                      * TS72700\n*                                                             * TS72700\n*       - ADDED THE PROMPT FLAG TO THE PASSWORD FIELD TO      * TS72700\n*         ALLOW A USER TO CHANGE HIS/HER PASSWORD IN A        * TS72700\n*         NON-DISPLAY FIELD.                                  * TS72700\n*                                                             *\n*  TS79845  09/18/85  REL 4.1                                 * TS79845\n*                                                             * TS79845\n*       - ADDED IDMSPROF & IDMSPRVS FIELD DEFINITIONS TO      * TS79845\n*         DEFINE THE IDMS SIGNON PROFILE CLIST NAME/VERSION.  * TS79845\n*                                                             *\n*  TS85178  02/07/86  REL 4.1   BETA2                         * TS85178\n*                                                             * TS85178\n*       - ADDED ZERO=YES PARAMETER TO AUTODUMP FIELD.         * TS85178\n*         REMOVED FLAGS=RESTRICT FROM THE ACF2/VSE FIELDS     * TS85178\n*         SRF AND VSESRF.                                     * TS85178\n*                                                             *\n*  TS72961  04/25/86  REL 4.1 PTF                             * TS72961\n*                                                             * TS72961\n*       - ADDED 'NO-SAF' BIT TO DISREGARD THE SAF INTERFACE   * TS72961\n*         VALIDATION.                                         * TS72961\n*       - ADDED 'SAF-TRC' BIT FOR SAFTRACE SUPPORT.           * TS72961\n*       - ADDED 'BDT' BIT FOR BDT SAF INTERFACE.              * TS72961\n*                                                             *\n*  TS77817  07/08/86  REL 5.0                                 * TS77817\n*                                                             * TS77817\n*       - ADDED LGN-DEST BIT FIELD TO INDICATE AUTHORITY      * TS77817\n*         TO SPECIFY A DEFAULT DESTINATION AT LOGON TIME.     * TS77817\n*                                                             * TS79857\n*  TS79857  07/31/86  REL 5.0                                 * TS79857\n*                                                             * TS79857\n*       - RESTRUCTURED CFDE GROUPS.                           * TS79857\n*                                                             * TS77317\n*  TS77317  08/26/86  REL 5.0                                 * TS77317\n*                                                             * TS77317\n*       - ADDED SUPPORT FOR DDB REMOTE LIDREC UPDATING.       * TS77317\n*                                                             * TS73799\n*  TS73799  09/05/86  REL 5.0                                 * TS73799\n*                                                             * TS73799\n*       - ADDED NEW FIELDS FOR DODCSC PASSWORD MESSAGE.       * TS73799\n*                                                             * TS73799\n*  TS80229  09/26/86  REL 5.0                                 * TS80229\n*                                                             * TS80229\n*       - ADDED NOINHER FLAG TO DISALLOW OR ALLOW             * TS80229\n*         NJE LOGONID INHERITANCE.                            * TS80229\n*  TS80607  09/30/86  REL 5.0 AND TK50008                     * TS80607\n*       - INSURE THAT BDT BIT INITIALIZED TO ZERO.            * TS80607\n*                                                             * TS80229\n*  TS85129  01/21/87  REL 5.0                                 * TS85129\n*       - ADDED GRPLOGON CFDE                                 * TS85129\n*       - ADDED VMSPOOL CFDE                                  * TS85129\n*       - ADDED ZERO=YES TO SRF CFDE                          * TS85129\n*       - ADDED ZERO=YES TO VSESRF CFDE                       * TS85129\n*                                                             * TS80616\n*  TS80616 02/03/86 REL 5.0                                   * TS80616\n*         ADDED ADDITIONAL PASSWORD AND TIME OF DAY FIELDS    * TS80616\n*         TO PREVENT THE RE-USE OF UP TO FOUR PASSWORDS       * TS80616\n*                                                             *\n*  TS81897 03/05/87 REL 5.0                                   * TS81897\n*         SET THE RANGE ON THE TSOTIME FIELD TO 0-1440 SO     * TS81897\n*         INVALID TIMES COULD NOT BE ENTERED WHICH WOULD      * TS81897\n*         CAUSE JCL ERRORS AT LOGON TIME.                     * TS81897\n*                                                             * TS81897\n*  TK50718 03/05/87 REL 5.0                                   * TK50718\n*         CHANGED THE DEFAULT VALUE OF THE HOMENODE FIELD     * TK50718\n*         TO BLANKS.                                          * TK50718\n*                                                             * TK50532\n*  TK50532 05/22/87 REL 5.0                                   * TK50532\n*         ADDED TRIM=NO TO @HEADER FIELDS.                    * TK50532\n*                                                             * TK50532\n***************************************************************\n*\n   @CFDE  ACC-CNT,LIDACCNT,BINARY,LIST=ALL,GROUP=3,FLAGS=LIMIT,        X\n               VRTN2=14,ZERO=YES,COUNTER=YES                    TS77317\n   @CFDE  ACC-DATE,LIDADATE,PACKED,LIST=ALL,GROUP=3,                   X\n               FLAGS=LIMIT,ZERO=YES                             TS73765\n   @CFDE  ACC-SRCE,LIDXSRCE,CHAR,LIST=ALL,GROUP=3,              TS76575X\n               FLAGS=LIMIT+NULL,ZERO=YES                        TS73765\n   @CFDE  ACC-TIME,LIDATIME,TIMEBIN,LIST=ALL,GROUP=3,FLAGS=LIMIT,      X\n               ZERO=YES                                         TS73765\n   @CFDE  ACCOUNT,LIDTFLAG,BIT,ALTER=SECURITY,                         X\n               LIST=SECURITY+ACCOUNT+AUDIT,                            X\n               FLAGS=NULL+RESTRICT,BITMAP=LIDTACT,GROUP=2,      TS73765X\n               ZERO=YES                                         TS73765\n   @CFDE  ACCTPRIV,LIDTFLG3,BIT,BITMAP=LIDT3ACC,LIST=ALL,              X\n               ALTER=SECURITY,FLAGS=NULL,GROUP=5,ZERO=YES       TS73765\n   @CFDE  ACTIVE,LIDACTV,PACKED,ALTER=SECURITY+ACCOUNT,         TS76456X\n               LIST=ALL,FLAGS=NULL,PRTN=2,RRTN=2,GROUP=1        TS76456\n   @CFDE  ALLCMDS,LIDTFLG1,BIT,BITMAP=LIDT1BYP,LIST=ALL,               X\n               ALTER=SECURITY+ACCOUNT,FLAGS=NULL,GROUP=5\n   @CFDE  ATTR2,LIDTAT2,HEX,LIST=ALL,FLAGS=NULL,                       X\n               ALTER=SECURITY+ACCOUNT,GROUP=5,TRIM=NO\n   @CFDE  AUDIT,LIDTFLAG,BIT,ALTER=SECURITY,                           X\n               LIST=SECURITY+ACCOUNT+AUDIT,                            X\n               FLAGS=NULL+RESTRICT,BITMAP=LIDTAUD,GROUP=2,      TS73765X\n               ZERO=YES                                         TS73765\n   @CFDE  AUTHSUP1,LIDAFLG1,BIT,BITMAP=LIDA1A1,LIST=ALL,        TS72700X\n               ALTER=ACCOUNT+SECURITY,FLAGS=NULL+MUTEXC,        TS72700X\n               GROUP=10,ZERO=YES                                TS79857\n   @CFDE  AUTHSUP2,LIDAFLG1,BIT,BITMAP=LIDA1A2,LIST=ALL,        TS72700X\n               ALTER=ACCOUNT+SECURITY,FLAGS=NULL+MUTEXC,        TS72700X\n               GROUP=10,ZERO=YES                                TS79857\n   @CFDE  AUTHSUP3,LIDAFLG1,BIT,BITMAP=LIDA1A3,LIST=ALL,        TS72700X\n               ALTER=ACCOUNT+SECURITY,FLAGS=NULL+MUTEXC,        TS72700X\n               GROUP=10,ZERO=YES                                TS79857\n   @CFDE  AUTHSUP4,LIDAFLG1,BIT,BITMAP=LIDA1A4,LIST=ALL,        TS72700X\n               ALTER=ACCOUNT+SECURITY,FLAGS=NULL+MUTEXC,        TS72700X\n               GROUP=10,ZERO=YES                                TS79857\n   @CFDE  AUTHSUP5,LIDAFLG1,BIT,BITMAP=LIDA1A5,LIST=ALL,        TS72700X\n               ALTER=ACCOUNT+SECURITY,FLAGS=NULL+MUTEXC,        TS72700X\n               GROUP=10,ZERO=YES                                TS79857\n   @CFDE  AUTHSUP6,LIDAFLG1,BIT,BITMAP=LIDA1A6,LIST=ALL,        TS72700X\n               ALTER=ACCOUNT+SECURITY,FLAGS=NULL+MUTEXC,        TS72700X\n               GROUP=10,ZERO=YES                                TS79857\n   @CFDE  AUTHSUP7,LIDAFLG1,BIT,BITMAP=LIDA1A7,LIST=ALL,        TS72700X\n               ALTER=ACCOUNT+SECURITY,FLAGS=NULL+MUTEXC,        TS72700X\n               GROUP=10,ZERO=YES                                TS79857\n   @CFDE  AUTHSUP8,LIDAFLG1,BIT,BITMAP=LIDA1A8,LIST=ALL,        TS72700X\n               ALTER=ACCOUNT+SECURITY,FLAGS=NULL+MUTEXC,        TS72700X\n               GROUP=10,ZERO=YES                                TS79857\n   @CFDE  AUTODUMP,LIDMFLG,BIT,ALTER=SECURITY,LIST=ALL,                X\n               FLAGS=NULL+RESTRICT,BITMAP=LIDMADMP,GROUP=2,     TS85178X\n               ZERO=YES                                         TS85178\n   @CFDE  BDT,LIDSFLAG,BIT,BITMAP=LIDSBDT,FLAGS=NULL,           TS72961X\n               ALTER=SECURITY+ACCOUNT,LIST=ALL,                 TS72961X\n               GROUP=2,ZERO=YES                                 TS80607\n   @CFDE  CANCEL,LIDCFLAG,BIT,ALTER=SECURITY+ACCOUNT,LIST=ALL,         X\n               FLAGS=NULL,BITMAP=LIDCCAN,PRTN=6,RRTN=3,GROUP=1\n   @CFDE  CHAR,LIDCHAR,CHAR,LIST=ALL,ALTER=ALL-AUDIT,                  X\n               FLAGS=NULL+SPECIAL+LIMIT,PRTN=7,RRTN=7,GROUP=5\n   @CFDE  CICS,LIDM2FLG,BIT,ALTER=SECURITY+ACCOUNT,LIST=ALL,           X\n               FLAGS=NULL,BITMAP=LIDM2CIC,GROUP=2\n   @CFDE  CICSCL,LIDCOPCL,HEX,ALTER=SECURITY+ACCOUNT,LIST=ALL,  TS72813X\n               FLAGS=NULL,GROUP=7,TRIM=NO                       TS79857\n   @CFDE  CICSID,LIDCOPID,CHAR,LIST=ALL,ALTER=SECURITY+ACCOUNT, TS72813X\n               FLAGS=NULL,GROUP=7                               TS79857\n   @CFDE  CICSKEY,LIDCOPKY,HEX,ALTER=SECURITY+ACCOUNT,LIST=ALL, TS72813X\n               FLAGS=NULL,GROUP=7,TRIM=NO                       TS79857\n   @CFDE  CICSKEYX,LIDCOPKX,HEX,ALTER=SECURITY+ACCOUNT,LIST=ALL, S75222X\n               FLAGS=NULL,GROUP=7,TRIM=NO                       TS79857\n   @CFDE  CICSPRI,LIDCOPPR,BINARY,ALTER=SECURITY+ACCOUNT,       TS72813X\n               LIST=ALL,FLAGS=NULL,GROUP=7,                     TS79857X\n               VRTN2=14                                         TS77555\n   @CFDE  CICSRSL,LIDCOPRL,HEX,ALTER=SECURITY+ACCOUNT,LIST=ALL,        X\n               FLAGS=NULL,GROUP=7,TRIM=NO                       TS79857\n   @CFDE  CMD-LONG,LIDTFLG3,BIT,BITMAP=LIDT3CMD,LIST=ALL,              X\n               ALTER=SECURITY+ACCOUNT,GROUP=5,                         X\n               FLAGS=NULL+LIMIT\n   @CFDE  CONSULT,LIDTFLAG,BIT,ALTER=SECURITY+ACCOUNT,                 X\n               LIST=SECURITY+ACCOUNT+AUDIT+CONSULT,                    X\n               FLAGS=NULL,BITMAP=LIDTCONS,GROUP=2,ZERO=YES      TS73765\n   @CFDE  CSDATE,LIDCDATE,PACKED,LIST=SECURITY+ACCOUNT+AUDIT,          X\n               FLAGS=NULL,GROUP=1\n   @CFDE  CSWHO,LIDCWHO,CHAR,LIST=SECURITY+ACCOUNT+AUDIT,              X\n               FLAGS=NULL,GROUP=1\n   @CFDE  DFT-DEST,LIDTDRMT,CHAR,LIST=ALL,FLAGS=NULL+LIMIT,            X\n               ALTER=SECURITY+ACCOUNT,GROUP=5\n   @CFDE  DFT-PFX,LIDTPPFX,CHAR,LIST=ALL,ALTER=ALL-AUDIT,              X\n               FLAGS=NULL+LIMIT,GROUP=5                         TS73870\n   @CFDE  DFT-SOUT,LIDTSOUT,CHAR,LIST=ALL,                             X\n               ALTER=ALL-AUDIT,FLAGS=NULL+LIMIT,GROUP=5\n   @CFDE  DFT-SUBC,LIDTSUBC,CHAR,LIST=ALL,                             X\n               ALTER=ALL-AUDIT,FLAGS=NULL+LIMIT,GROUP=5\n   @CFDE  DFT-SUBH,LIDTSUBH,CHAR,LIST=ALL,                             X\n               ALTER=ALL-AUDIT,FLAGS=NULL+LIMIT,GROUP=5\n   @CFDE  DFT-SUBM,LIDTSUBM,CHAR,LIST=ALL,                             X\n               ALTER=ALL-AUDIT,FLAGS=NULL+LIMIT,GROUP=5\n   @CFDE  DSNSCOPE,LIDSSCOP,CHAR,ALTER=SECURITY,                       X\n               LIST=ALL-USER,                                          X\n               FLAGS=NULL+RESTRICT,PRTN=10,RRTN=10,GROUP=2\n   @CFDE  DUMPAUTH,LIDMFLG,BIT,ALTER=SECURITY,LIST=ALL,                X\n               FLAGS=NULL+RESTRICT,BITMAP=LIDMRDMP,GROUP=2\n   @CFDE  EXPIRE,LIDEXPDT,PACKED,ALTER=SECURITY+ACCOUNT,        TS72813X\n               LIST=ALL,FLAGS=NULL,GROUP=1                      TS72813\n   @CFDE  GRPLOGON,LIDV1FLG,BIT,ALTER=SECURITY+ACCOUNT,         TS85129X\n               LIST=SECURITY+ACCOUNT+AUDIT,FLAGS=NULL+RESTRICT, TS85129X\n               BITMAP=LIDV1GRP,PRTN=3,RRTN=3,GROUP=2,ZERO=YES   TS85129\n   @CFDE  HOMENODE,LIDHNODE,CHAR,PRTN=00,                       TS77317X\n               ZERO=YES,FLAGS=NULL+SPECIAL,CBPROC=YES           TS77317\n   @CFDE  IDLE,LIDIDLE,BINARY,LIST=ALL,ALTER=SECURITY+ACCOUNT,         X\n               FLAGS=NULL+LIMIT,GROUP=8,                        TS79857X\n               VRTN2=14                                         TS77555\n   @CFDE  IDMS,LIDMAUTH,BIT,ALTER=SECURITY+ACCOUNT,LIST=ALL,    TK50611X\n               FLAGS=NULL,GROUP=2,BITMAP=LIDMAIDM               IDMS200\n   @CFDE  IDMSPROF,LIDIDMPC,CHAR,ALTER=ALL-AUDIT,LIST=ALL,      TS79845X\n               FLAGS=NULL+LIMIT,GROUP=9                         TS79857\n   @CFDE  IDMSPRVS,LIDIDMPV,BINARY,ALTER=ALL-AUDIT,LIST=ALL,    TS79845X\n               FLAGS=NULL+LIMIT,GROUP=9                         TS79857\n   @CFDE  IMS,LIDM2FLG,BIT,ALTER=SECURITY+ACCOUNT,LIST=ALL,            X\n               FLAGS=NULL,BITMAP=LIDM2IMS,GROUP=2\n   @CFDE  INTERCOM,LIDTFLG2,BIT,BITMAP=LIDT2INT,LIST=ALL,              X\n               ALTER=ALL-AUDIT,FLAGS=NULL+LIMIT,GROUP=5\n   @CFDE  JCL,LIDTFLG3,BIT,BITMAP=LIDT3JCL,LIST=ALL,GROUP=5,FLAGS=NULL,X\n               ALTER=SECURITY+ACCOUNT\n   @CFDE  JOB,LIDM2FLG,BIT,BITMAP=LIDM2JOB,                     TS72379X\n               ALTER=SECURITY+ACCOUNT,FLAGS=NULL,               TS72379X\n               GROUP=2,LIST=ALL                                 TS72379\n   @CFDE  JOBFROM,LIDMUSAS,BIT,BITMAP=LIDMUSID,                 TS72813X\n               ALTER=SECURITY,LIST=ALL,FLAGS=NULL+RESTRICT,     TS72813X\n               GROUP=2,ZERO=YES                                 TS72813\n   @CFDE  LEADER,LIDTFLAG,BIT,ALTER=SECURITY+ACCOUNT,                  X\n               LIST=SECURITY+ACCOUNT+AUDIT+LEADER+CONSULT,             X\n               FLAGS=NULL,BITMAP=LIDTLDR,GROUP=2,ZERO=YES       TS73765\n   @CFDE  LGN-ACCT,LIDTFLG1,BIT,BITMAP=LIDT1ACC,LIST=ALL,FLAGS=NULL,   X\n               ALTER=SECURITY+ACCOUNT,GROUP=13\n   @CFDE  LGN-DEST,LIDTFLG3,BIT,BITMAP=LIDT3DST,                TS77817X\n               LIST=ALL,FLAGS=NULL,                             TS77817X\n               ALTER=SECURITY+ACCOUNT,GROUP=5                   TS77817\n   @CFDE  LGN-INDX,LIDTFLG4,BIT,BITMAP=LIDT4IND,LIST=ALL,FLAGS=NULL,   X\n               ALTER=SECURITY+ACCOUNT,GROUP=5\n   @CFDE  LGN-MSG,LIDTFLG1,BIT,BITMAP=LIDT1MSG,LIST=ALL,FLAGS=NULL,    X\n               ALTER=SECURITY+ACCOUNT,GROUP=5\n   @CFDE  LGN-PERF,LIDTFLG1,BIT,BITMAP=LIDT1PER,LIST=ALL,FLAGS=NULL,   X\n               ALTER=SECURITY+ACCOUNT,GROUP=5\n   @CFDE  LGN-PROC,LIDTFLG1,BIT,BITMAP=LIDT1PRC,LIST=ALL,FLAGS=NULL,   X\n               ALTER=SECURITY+ACCOUNT,GROUP=5\n   @CFDE  LGN-RCVR,LIDTFLG3,BIT,BITMAP=LIDT3RVR,FLAGS=NULL+LIMIT,      X\n               LIST=ALL,ALTER=SECURITY+ACCOUNT,GROUP=5\n   @CFDE  LGN-SIZE,LIDTFLG1,BIT,BITMAP=LIDT1SIZ,LIST=ALL,FLAGS=NULL,   X\n               ALTER=SECURITY+ACCOUNT,GROUP=5\n   @CFDE  LGN-TIME,LIDTFLG1,BIT,BITMAP=LIDT1TIM,LIST=ALL,FLAGS=NULL,   X\n               ALTER=ACCOUNT+SECURITY,GROUP=5\n   @CFDE  LGN-UNIT,LIDTFLG1,BIT,BITMAP=LIDT1UNT,LIST=ALL,FLAGS=NULL,   X\n               ALTER=SECURITY+ACCOUNT,GROUP=5\n   @CFDE  LID,LIDLID,CHAR,LIST=ALL,TRIM=NO                      TK50532\n   @CFDE  LIDSCOPE,LIDASCOP,CHAR,ALTER=SECURITY,                       X\n               LIST=ALL-USER,                                          X\n               FLAGS=NULL+RESTRICT,PRTN=10,RRTN=10,GROUP=2\n   @CFDE  LINE,LIDLINE,CHAR,LIST=ALL,ALTER=ALL-AUDIT,                  X\n               FLAGS=NULL+SPECIAL+LIMIT,PRTN=7,RRTN=7,GROUP=5\n   @CFDE  LOGSHIFT,LIDM3FLG,BIT,ALTER=SECURITY,LIST=ALL,        TS73827X\n               FLAGS=NULL+RESTRICT,BITMAP=LIDM3SFT,GROUP=2,     TS73765X\n               ZERO=YES                                         TS73765\n   @CFDE  MAIL,LIDTFLG2,BIT,BITMAP=LIDT2MAL,LIST=ALL,                  X\n               ALTER=ALL-AUDIT,FLAGS=NULL+LIMIT,GROUP=5\n   @CFDE  MAINT,LIDFLAG5,BIT,BITMAP=LID5MAIN,LIST=ALL,                 X\n               ALTER=SECURITY,FLAGS=RESTRICT+NULL,GROUP=2,      TS73765X\n               ZERO=YES                                         TS73765\n   @CFDE  MAXDAYS,LIDNDAYS,BINARY,ALTER=SECURITY+ACCOUNT,              X\n               LIST=ALL,FLAGS=NULL,GROUP=4,                            X\n               VRTN2=14                                         TS77555\n   @CFDE  MINDAYS,LIDMINDY,BINARY,ALTER=SECURITY+ACCOUNT,              X\n               LIST=ALL,FLAGS=NULL,GROUP=4,                     TS73851X\n               VRTN2=14                                         TS77555\n   @CFDE  MODE,LIDTFLG2,BIT,BITMAP=LIDT2MOD,LIST=ALL,                  X\n               ALTER=ALL-AUDIT,FLAGS=NULL+LIMIT,GROUP=5\n   @CFDE  MON-LOG,LIDCFLAG,BIT,ALTER=SECURITY,LIST=SECURITY+AUDIT,     X\n               FLAGS=NULL,BITMAP=LIDCMLOG,PRTN=6,RRTN=3,GROUP=1\n   @CFDE  MONITOR,LIDCFLAG,BIT,ALTER=SECURITY,LIST=SECURITY+AUDIT,     X\n               FLAGS=NULL,BITMAP=LIDCMON,PRTN=6,RRTN=3,GROUP=1\n   @CFDE  MOUNT,LIDTFLG3,BIT,BITMAP=LIDT3MNT,LIST=ALL,                 X\n               ALTER=SECURITY+ACCOUNT,GROUP=5,                         X\n               FLAGS=NULL+LIMIT,ZERO=YES                        TS73765\n   @CFDE  MSGID,LIDTFLG2,BIT,BITMAP=LIDT2MSG,LIST=ALL,                 X\n               ALTER=ALL-AUDIT,FLAGS=NULL+LIMIT,GROUP=5\n   @CFDE  MUSASS,LIDMUSAS,BIT,BITMAP=LIDMUMUS,ALTER=SECURITY,   TS72813X\n               LIST=ALL,FLAGS=NULL+RESTRICT,GROUP=2,            TS72813X\n               ZERO=YES                                         TS73765\n   @CFDE  MUSOPT,LIDMUOPT,CHAR,ALTER=SECURITY,LIST=ALL,         IDMS200X\n               FLAGS=NULL,PRTN=1,RRTN=1,GROUP=14                TS79857\n   @CFDE  MUSPGM,LIDMUPGM,CHAR,ALTER=SECURITY,LIST=ALL,         IDMS200X\n               FLAGS=NULL,PRTN=1,RRTN=1,GROUP=14                TS79857\n   @CFDE  NAME,LIDNAME,CHAR,ALTER=SECURITY+ACCOUNT+USER,        TK50532X\n               LIST=ALL,FLAGS=NULL,GROUP=0,ZERO=YES,TRIM=NO     TS73765\n   @CFDE  NO-INH,LIDM3FLG,BIT,BITMAP=LIDM3INH,                  TS80229X\n               ALTER=SECURITY+ACCOUNT,FLAGS=NULL,               TS80229X\n               GROUP=2,LIST=ALL                                 TS80229\n   @CFDE  NO-SAF,LIDSFLAG,BIT,BITMAP=LIDSNSAF,                  TS72961X\n               ALTER=SECURITY,LIST=ALL,                         TS72961X\n               FLAGS=NULL+RESTRICT,GROUP=2,ZERO=YES             TS79857\n   @CFDE  NO-SMC,LIDMUSAS,BIT,BITMAP=LIDMUSMC,                  TS72813X\n               ALTER=SECURITY,LIST=ALL,                         TS72813X\n               FLAGS=NULL+RESTRICT,GROUP=2,ZERO=YES             TS73765\n   @CFDE  NO-STORE,LIDMFLG,BIT,ALTER=SECURITY,LIST=ALL,                X\n               FLAGS=NULL+RESTRICT,BITMAP=LIDMNSTO,GROUP=2\n   @CFDE  NON-CNCL,LIDMFLG,BIT,ALTER=SECURITY,LIST=ALL,                X\n               FLAGS=NULL+RESTRICT,BITMAP=LIDMNCNL,GROUP=2,     TS73765X\n               ZERO=YES                                         TS73765\n   @CFDE  NOTICES,LIDTFLG2,BIT,BITMAP=LIDT2NOT,LIST=ALL,               X\n               ALTER=ALL-AUDIT,FLAGS=NULL+LIMIT,GROUP=5\n   @CFDE  OIDOLD,LIDTFLG4,BIT,BITMAP=LIDT4OID,LIST=ALL,         TS72700X\n               ALTER=ACCOUNT+SECURITY,FLAGS=NULL,GROUP=5,       TS72700X\n               ZERO=YES                                         TS73765\n   @CFDE  OIDOLD-A,LIDTFLG4,BIT,BITMAP=LIDT4ALL,LIST=ALL,       TS72700X\n               ALTER=ACCOUNT+SECURITY,FLAGS=NULL,GROUP=5,       TS72700X\n               ZERO=YES                                         TS73765\n   @CFDE  OPERATOR,LIDTFLG3,BIT,BITMAP=LIDT3OPR,LIST=ALL,              X\n               ALTER=SECURITY,FLAGS=NULL,GROUP=5,ZERO=YES       TS73765\n   @CFDE  PASSWORD,LIDNPSWD,CHEN,ALTER=SECURITY+ACCOUNT+USER,   TS77317X\n               FLAGS=NEVER,PRTN=5,VRTN1=05,PROMPT=YES,          TS77317X\n               CBPROC=YES                                       TS77317\n   @CFDE  PAUSE,LIDTFLG2,BIT,BITMAP=LIDT2PAU,LIST=ALL,                 X\n               ALTER=ALL-AUDIT,FLAGS=NULL+LIMIT,GROUP=5\n   @CFDE  PGM,LIDRSUPB,CHAR,LIST=ALL,   DUPLICATE OF 'PROGRAM'  TS73928X\n               ALTER=SECURITY+ACCOUNT,FLAGS=NULL,               TS74354X\n               GROUP=2,PRTN=10,RRTN=00 (ALIAS OF PROGRAM)       TS74354\n   @CFDE  PHONE,LIDPHONE,CHAR,ALTER=SECURITY+ACCOUNT+USER,             X\n               LIST=ALL,FLAGS=NULL,GROUP=11,ZERO=YES,TRIM=NO    TK50532\n   @CFDE  PMT-ACCT,LIDTFLG4,BIT,BITMAP=LIDT4PAC,LIST=ALL,FLAGS=NULL,   X\n               ALTER=ACCOUNT+SECURITY+USER,GROUP=13\n   @CFDE  PMT-PROC,LIDTFLG4,BIT,BITMAP=LIDT4PPR,LIST=ALL,FLAGS=NULL,   X\n               ALTER=ACCOUNT+SECURITY,GROUP=5\n   @CFDE  PREFIX,LIDPFX,CHAR,ALTER=SECURITY,LIST=ALL,                  X\n               FLAGS=RESTRICT,PRTN=9,RRTN=1,GROUP=5             TS79857\n   @CFDE  PROGRAM,LIDRSUPB,CHAR,LIST=ALL,                              X\n               ALTER=SECURITY+ACCOUNT,FLAGS=NULL,PRTN=10,RRTN=10,      X\n               GROUP=2\n   @CFDE  PROMPT,LIDTFLG2,BIT,BITMAP=LIDT2PRO,LIST=ALL,                X\n               ALTER=ALL-AUDIT,FLAGS=NULL+LIMIT,GROUP=5\n   @CFDE  PRVPSWD1,LIDNPSWD,CHEN,FLAGS=NEVER,PRTN=0,            TS80616X\n               CBPROC=YES                                       TS80616\n   @CFDE  PRV-TOD1,LIDPSTOD,TOD,FLAGS=NEVER,PRTN=0,             TS80616X\n               CBPROC=YES                                       TS80616\n   @CFDE  PRVPSWD2,LIDPSWD2,CHEN,FLAGS=NEVER,PRTN=0,            TS80616X\n               CBPROC=YES                                       TS80616\n   @CFDE  PRV-TOD2,LIDTOD2,TOD,FLAGS=NEVER,PRTN=0,              TS80616X\n               CBPROC=YES                                       TS80616\n   @CFDE  PRVPSWD3,LIDPSWD3,CHEN,FLAGS=NEVER,PRTN=0,            TS80616X\n               CBPROC=YES                                       TS80616\n   @CFDE  PRV-TOD3,LIDTOD3,TOD,FLAGS=NEVER,PRTN=0,              TS80616X\n               CBPROC=YES                                       TS80616\n   @CFDE  PRVPSWD4,LIDPSWD4,CHEN,FLAGS=NEVER,PRTN=0,            TS80616X\n               CBPROC=YES                                       TS80616\n   @CFDE  PRV-TOD4,LIDTOD4,TOD,FLAGS=NEVER,PRTN=0,              TS80616X\n               CBPROC=YES                                       TS80616\n   @CFDE  PSWD-DAT,LIDIPDAT,PACKED,ALTER=SECURITY,LIST=ALL,            X\n               FLAGS=LIMIT,GROUP=4,ZERO=YES                     TS79857\n   @CFDE  PSWD-EXP,LIDM2FLG,BIT,BITMAP=LIDM2PXP,GROUP=4,        TS79857X\n               LIST=ALL,FLAGS=NULL,ALTER=SECURITY               TS72813\n   @CFDE  PSWD-INV,LIDNIPSD,BINARY,ALTER=SECURITY,LIST=ALL,     TS73799X\n               FLAGS=LIMIT,GROUP=4,ZERO=YES,                    TS73799X\n               VRTN2=14,COUNTER=YES                             TS73799\n   @CFDE  PSWD-SRC,LIDIPSRC,CHAR,LIST=ALL,GROUP=4,              TS73799X\n               FLAGS=LIMIT+NULL,ZERO=YES                        TS73799\n   @CFDE  PSWD-TIM,LIDIPTIM,TIMEBIN,LIST=ALL,GROUP=4,           TS73799X\n               FLAGS=LIMIT+NULL,ZERO=YES                        TS73799\n   @CFDE  PSWD-TOD,LIDPSTOD,TOD,LIST=ALL,GROUP=4,FLAGS=LIMIT,   TS77317X\n               CBPROC=YES                                       TS77317\n   @CFDE  PSWD-VIO,LIDIPSD,BINARY,ALTER=SECURITY,LIST=ALL,             X\n               FLAGS=LIMIT,GROUP=4,ZERO=YES,                    TS79857X\n               VRTN2=14,COUNTER=YES                             TS77317\n   @CFDE  READALL,LIDM2FLG,BIT,BITMAP=LIDM2RDA,                 TS73833X\n               LIST=ALL,ALTER=SECURITY,FLAGS=NULL+RESTRICT,     TS73833X\n               GROUP=2,ZERO=YES                                 TS73765\n   @CFDE  RECOVER,LIDTFLG3,BIT,BITMAP=LIDT3RCV,                        X\n               LIST=ALL,ALTER=ALL-AUDIT,FLAGS=NULL+LIMIT,              X\n               GROUP=5\n   @CFDE  REFRESH,LIDFLAG5,BIT,ALTER=SECURITY,                         X\n               LIST=SECURITY+ACCOUNT+AUDIT,                            X\n               FLAGS=NULL+RESTRICT,BITMAP=LID5REFR,GROUP=2,     TS73765X\n               ZERO=YES                                         TS73765\n   @CFDE  RESTRICT,LIDMFLG,BIT,ALTER=SECURITY+ACCOUNT,LIST=ALL,        X\n               FLAGS=NULL,BITMAP=LIDMRST,GROUP=2\n   @CFDE  RULEVLD,LIDM2FLG,BIT,BITMAP=LIDM2VLD,                 TS73849X\n               LIST=ALL,ALTER=SECURITY,FLAGS=NULL+RESTRICT,     TS73849X\n               GROUP=2,ZERO=YES                                 TS73765\n   @CFDE  R221PSWD,LIDPSWD,CHAR,FLAGS=NEVER,PRTN=00,CBPROC=YES  TS77317\n   @CFDE  SAF-TRC,LIDSFLAG,BIT,ALTER=SECURITY,                  TS72961X\n               LIST=SECURITY+AUDIT,FLAGS=NULL,BITMAP=LIDSTRC,   TS72961X\n               GROUP=2,ZERO=YES                                 TS79857\n   @CFDE  SCPLIST,LIDSCPL,CHAR,LIST=ALL-USER,                   TS73800X\n               ALTER=SECURITY,FLAGS=RESTRICT+NULL,              TS73800X\n               GROUP=2,ZERO=YES                                 TS73765\n   @CFDE  SEC-VIO,LIDSECV,BINARY,ALTER=SECURITY,                       X\n               LIST=SECURITY+ACCOUNT+AUDIT,                            X\n               FLAGS=LIMIT,GROUP=6,ZERO=YES,                    TS73765X\n               VRTN2=14,COUNTER=YES                             TS77317\n   @CFDE  SECURITY,LIDTFLAG,BIT,ALTER=SECURITY,                        X\n               LIST=SECURITY+ACCOUNT+AUDIT,                            X\n               FLAGS=NULL+RESTRICT,BITMAP=LIDTSEC,GROUP=2,      TS73765X\n               ZERO=YES                                         TS73765\n   @CFDE  SHIFT,LIDSHIFT,CHAR,LIST=ALL,ALTER=ACCOUNT+SECURITY,  TS73827X\n               FLAGS=NULL,GROUP=10,ZERO=YES                     TS79857\n   @CFDE  SOURCE,LIDSRCE,CHAR,LIST=ALL,ALTER=ACCOUNT+SECURITY,         X\n               FLAGS=NULL,GROUP=10                              TS79857\n   @CFDE  SRF,LIDV1FLG,BIT,BITMAP=LIDV1SRF,LIST=ALL,            TS79857X\n               ALTER=SECURITY,FLAGS=NULL,ZERO=YES,              TS79857X\n               PRTN=3,RRTN=3,GROUP=2                            TS79857\n   @CFDE  STC,LIDMFLG,BIT,ALTER=SECURITY,LIST=ALL,                     X\n               FLAGS=NULL+RESTRICT,BITMAP=LIDMSTC,GROUP=2\n   @CFDE  SUBAUTH,LIDMFLG,BIT,ALTER=SECURITY+ACCOUNT,LIST=ALL,         X\n               FLAGS=NULL,BITMAP=LIDMRSTA,GROUP=2\n   @CFDE  SUSPEND,LIDCFLAG,BIT,ALTER=SECURITY+ACCOUNT,                 X\n               LIST=ALL,FLAGS=NULL,BITMAP=LIDCSUS,PRTN=6,RRTN=3,GROUP=1\n   @CFDE  TAPE-BLP,LIDMFLG,BIT,ALTER=SECURITY,LIST=ALL,                X\n               FLAGS=NULL+RESTRICT,BITMAP=LIDMBLP,GROUP=2\n   @CFDE  TAPE-LBL,LIDM2FLG,BIT,ALTER=SECURITY,LIST=ALL,               X\n               FLAGS=NULL+RESTRICT,BITMAP=LIDM2PBL,GROUP=2\n   @CFDE  TRACE,LIDCFLAG,BIT,ALTER=SECURITY,                           X\n               LIST=SECURITY+AUDIT,FLAGS=NULL,BITMAP=LIDCTRC,          X\n               GROUP=1\n   @CFDE  TSO,LIDM2FLG,BIT,BITMAP=LIDM2TSO,FLAGS=NULL,          TS72813X\n               ALTER=SECURITY+ACCOUNT,LIST=ALL,                 TS72813X\n               GROUP=2                                          TS72813\n   @CFDE  TSO-TRC,LIDCFLAG,BIT,ALTER=SECURITY+ACCOUNT,                 X\n               LIST=SECURITY+AUDIT,FLAGS=NULL,BITMAP=LIDCTSO,          X\n               GROUP=1\n   @CFDE  TSOACCT,LIDACCT,CHAR,LIST=ALL,ALTER=SECURITY+ACCOUNT+USER,   X\n               FLAGS=NULL+LIMIT,GROUP=13\n   @CFDE  TSOCMDS,LIDTCMDS,CHAR,ALTER=SECURITY+ACCOUNT,                X\n               LIST=ALL,FLAGS=NULL,GROUP=5\n   @CFDE  TSOFSCRN,LIDTFLG4,BIT,BITMAP=LIDT4FSC,LIST=ALL,              X\n               ALTER=ACCOUNT+SECURITY,FLAGS=NULL,GROUP=5\n   @CFDE  TSOPERF,LIDPERF,BINARY,LIST=ALL,FLAGS=NULL+LIMIT,            X\n               ALTER=SECURITY+ACCOUNT,GROUP=5,                         X\n               VRTN2=14                                         TS77555\n   @CFDE  TSOPROC,LIDPROC,CHAR,LIST=ALL,ALTER=SECURITY+ACCOUNT,        X\n               FLAGS=NULL+LIMIT,GROUP=5\n   @CFDE  TSORBA,LIDTRBA,HEX,ALTER=SECURITY,GROUP=5,            TS77263X\n               LIST=SECURITY,FLAGS=NULL,                        TS76575X\n               ZERO=YES,TRIM=NO                                 TS73768\n   @CFDE  TSORGN,LIDSIZE,BINARY,LIST=ALL,ALTER=SECURITY+ACCOUNT,       X\n               FLAGS=NULL+LIMIT,GROUP=5,                               X\n               VRTN2=14                                         TS77555\n   @CFDE  TSOSIZE,LIDTMAXS,BINARY,LIST=ALL,GROUP=5,                    X\n               ALTER=SECURITY+ACCOUNT,FLAGS=NULL+LIMIT,                X\n               VRTN2=14                                         TS77555\n   @CFDE  TSOTIME,LIDTTIME,BINARY,LIST=ALL,FLAGS=NULL+LIMIT,           X\n               ALTER=SECURITY+ACCOUNT,GROUP=5,                         X\n               VRTN1=04,VPRM1=TIMEVALS,                         TS81897X\n               VRTN2=14                                         TS77555\n   @CFDE  TSOUNIT,LIDTUNIT,CHAR,LIST=ALL,ALTER=SECURITY+ACCOUNT,       X\n               FLAGS=NULL+LIMIT,GROUP=5\n   @CFDE  UADSINDX,LIDXINDX,CHAR,LIST=ALL,ALTER=ACCOUNT+SECURITY,      X\n               FLAGS=NULL+LIMIT,GROUP=5,ZERO=YES                TS73765\n   @CFDE  UID,PSEUDO,CHAR,LIST=ALL,RRTN=6,FLAGS=SPECIAL,TRIM=NO TK50532\n   @CFDE  UIDSCOPE,LIDUSCOP,CHAR,ALTER=SECURITY,                       X\n               LIST=ALL-USER,                                          X\n               FLAGS=NULL+RESTRICT,PRTN=10,RRTN=10,GROUP=2\n   @CFDE  UPD-TOD,LIDLUPT,TOD,LIST=ALL,GROUP=6,FLAGS=LIMIT,     TS73765X\n               ZERO=YES,CBPROC=YES                              TS77317\n   @CFDE  USER,LIDTFLAG,BIT,ALTER=SECURITY+ACCOUNT,                    X\n               LIST=0,FLAGS=NEVER,BITMAP=LIDTUSR,GROUP=2\n   @CFDE  VLD-ACCT,LIDTFLG4,BIT,BITMAP=LIDT4ACC,LIST=ALL,              X\n               ALTER=ACCOUNT+SECURITY,FLAGS=NULL,GROUP=5\n   @CFDE  VLD-PROC,LIDTFLG4,BIT,BITMAP=LIDT4PRC,LIST=ALL,              X\n               ALTER=ACCOUNT+SECURITY,FLAGS=NULL,GROUP=5\n   @CFDE  VM,LIDV1FLG,BIT,BITMAP=LIDV1VM,FLAGS=NULL,            TS85129X\n               ALTER=SECURITY+ACCOUNT,LIST=ALL,GROUP=2          TS85129\n   @CFDE  VMSPOOL,LIDV1FLG,BIT,BITMAP=LIDV1SPL,LIST=ALL,        TS85129X\n               ALTER=SECURITY,FLAGS=NULL+RESTRICT,              TS85129X\n               PRTN=3,RRTN=3,GROUP=2                            TS85129\n   @CFDE  VSESRF,LIDV2FLG,BIT,BITMAP=LIDV2SRF,LIST=ALL,         TS85129X\n               ALTER=SECURITY,FLAGS=NULL,ZERO=YES,              TS85178X\n               PRTN=3,RRTN=3,GROUP=2                            TS85129\n   @CFDE  WTP,LIDTFLG2,BIT,BITMAP=LIDT2WTP,LIST=ALL,                   X\n               ALTER=ALL-AUDIT,FLAGS=NULL+LIMIT,GROUP=5\n   @CFDE  ZONE,LIDZONE,CHAR,LIST=ALL,ALTER=ACCOUNT+SECURITY,    TS73827X\n               FLAGS=NULL,GROUP=10,ZERO=YES                     TS79857\n*\n*\n***************************************************************\n*                                                             *\n*          END OF ACF2 DEFINED LOGONID FIELDS                 *\n*                                                             *\n***************************************************************\n++ MAC(USERCFDE) DISTLIB(ACFAMAC) SYSLIB(ACFMAC) .\n  @CFDE  ADSOGRP1,LIDISC01,BIT,                                ACFW007 X\n               BITMAP=LIDIS001,                                ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SECURITY                                  ACFW007 X\n               AUTH=IDMSDBA,                                   ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  ADSOGRP2,LIDISC01,BIT,                                ACFW007 X\n               BITMAP=LIDIS002,                                ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SECURITY                                  ACFW007 X\n               AUTH=IDMSDBA,                                   ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  ADSOGRP3,LIDISC01,BIT,                                ACFW007 X\n               BITMAP=LIDIS003,                                ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SECURITY                                  ACFW007 X\n               AUTH=IDMSDBA,                                   ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  ADSOGRP4,LIDISC01,BIT,                                ACFW007 X\n               BITMAP=LIDIS004,                                ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SECURITY                                  ACFW007 X\n               AUTH=IDMSDBA,                                   ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  ADSOGRP5,LIDISC01,BIT,                                ACFW007 X\n               BITMAP=LIDIS005,                                ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SECURITY                                  ACFW007 X\n               AUTH=IDMSDBA,                                   ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  ADSOGRP6,LIDISC01,BIT,                                ACFW007 X\n               BITMAP=LIDIS006,                                ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SECURITY                                  ACFW007 X\n               AUTH=IDMSDBA,                                   ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  ADSOGRP7,LIDISC01,BIT,                                ACFW007 X\n               BITMAP=LIDIS007,                                ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SECURITY                                  ACFW007 X\n               AUTH=IDMSDBA,                                   ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  ADSOGRP8,LIDISC01,BIT,                                ACFW007 X\n               BITMAP=LIDIS008,                                ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SECURITY                                  ACFW007 X\n               AUTH=IDMSDBA,                                   ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  DCMTGRP1,LIDISC02,BIT,                                ACFW007 X\n               BITMAP=LIDIS009,                                ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SECURITY                                  ACFW007 X\n               AUTH=IDMSDBA,                                   ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  DCMTGRP2,LIDISC02,BIT,                                ACFW007 X\n               BITMAP=LIDIS010,                                ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SECURITY                                  ACFW007 X\n               AUTH=IDMSDBA,                                   ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  DCMTGRP3,LIDISC02,BIT,                                ACFW007 X\n               BITMAP=LIDIS011,                                ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SECURITY                                  ACFW007 X\n               AUTH=IDMSDBA,                                   ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  DCMTGRP4,LIDISC02,BIT,                                ACFW007 X\n               BITMAP=LIDIS012,                                ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SECURITY                                  ACFW007 X\n               AUTH=IDMSDBA,                                   ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  DCMTGRP5,LIDISC02,BIT,                                ACFW007 X\n               BITMAP=LIDIS013,                                ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SECURITY                                  ACFW007 X\n               AUTH=IDMSDBA,                                   ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  DCMTGRP6,LIDISC02,BIT,                                ACFW007 X\n               BITMAP=LIDIS014,                                ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SECURITY                                  ACFW007 X\n               AUTH=IDMSDBA,                                   ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  DCMTGRP7,LIDISC02,BIT,                                ACFW007 X\n               BITMAP=LIDIS015,                                ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SECURITY                                  ACFW007 X\n               AUTH=IDMSDBA,                                   ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  DCMTGRP8,LIDISC02,BIT,                                ACFW007 X\n               BITMAP=LIDIS016,                                ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SECURITY                                  ACFW007 X\n               AUTH=IDMSDBA,                                   ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  BADGE,LIDBADGE,CHAR,          BADGE NUMBER            ACFW007 X\n               GROUP=11,                                       ACFW007 X\n               ALTER=ACCT,ZERO=YES,                            ACFW007 X\n               LIST=ALL,FLAGS=NULL                             ACFW007\n  @CFDE  BIN,LIDBIN,CHAR,              DISTRIBUTION BIN        ACFW007 X\n               GROUP=11,                                       ACFW007 X\n               ALTER=ACCT+SEC+USER,                            ACFW007 X\n               LIST=ALL,FLAGS=NULL                             ACFW007\n  @CFDE  BIRTHDAY,LIDBDAY,PACKED,      DATE FOR BIRTHDAY       ACFW007 X\n               GROUP=11,                                       ACFW007 X\n               ALTER=ACCT,ZERO=YES,                            ACFW007 X\n               LIST=ALL,FLAGS=NULL                             ACFW007\n  @CFDE  BOSS,LIDBOSS,CHAR,            SUPERVISOR'S NAME       ACFW007 X\n               GROUP=11,                                       ACFW007 X\n               ALTER=ACCT+SEC+USER,                            ACFW007 X\n               LIST=ALL,FLAGS=NULL                             ACFW007\n  @CFDE  CENTER,LIDCENTR,CHAR,         CENTER CONTROLING LID   ACFW007 X\n               GROUP=11,                                       ACFW007 X\n               ALTER=ACCT,                                     ACFW007 X\n               LIST=ALL,FLAGS=LIMIT                            ACFW007\n  @CFDE  CENTRAL,LIDI2FLG,BIT,         CENTRAL CENTER LOGONID  ACFW007 X\n               BITMAP=LIDI2F6,                                 ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SEC+ACCT,ZERO=YES,                        ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  CREATED,LIDSDAT,PACKED,       CREATION DATE           ACFW007 X\n               GROUP=11,                                       ACFW007 X\n               ALTER=ACCT,ZERO=YES,                            ACFW007 X\n               LIST=ALL,FLAGS=NULL                             ACFW007\n  @CFDE  CSREASON,LIDREAS,CHAR,        CANCELLED USER REASON   ACFW007 X\n               GROUP=1,                                        ACFW007 X\n               ALTER=ACCT,                                     ACFW007 X\n               LIST=ALL,FLAGS=NULL                             ACFW007\n  @CFDE  CYBER,LIDI2FLG,BIT,           CYBER ACTIVITY FLAG     ACFW007 X\n               BITMAP=LIDI2F4,         FOR IBM PRINTING        ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=ACCT,ZERO=YES,                            ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  DEPT,LIDDEPT,CHAR,            DEPARTMENT NUMBER       ACFW007 X\n               GROUP=11,               (1ST 3)                 ACFW007 X\n               ALTER=ACCT+SEC,                                 ACFW007 X\n               LIST=ALL,FLAGS=LIMIT                            ACFW007\n  @CFDE  TSOWAIT,LIDI2FLG,BIT,         WAIT TIME FOR PAPERLESS ACFW007 X\n               BITMAP=LIDI2F1,         FACTORY                 ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SEC+ACCT,ZERO=YES,                        ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  NON-IBM,LIDI1FLG,BIT,         DIAL-UP USE AUTHORIZED  ACFW007 X\n               BITMAP=LIDI1F1,                                 ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SECURITY+ACCOUNT,ZERO=YES,                ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL+RESTRICT              ACFW007\n  @CFDE  DIAL-KEY,LIDKWRD1,CHAR,       DIAL-UP KEYWORD         ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=ACCT+SEC,ZERO=YES,                        ACFW007 X\n               LIST=ACCT+AUDIT,FLAGS=LIMIT+NULL+RESTRICT       ACFW007\n  @CFDE  DIV,LIDDIV,CHAR,              GD DIVISION             ACFW007 X\n               GROUP=11,                                       ACFW007 X\n               ALTER=ACCT+SEC,                                 ACFW007 X\n               LIST=ALL,FLAGS=LIMIT                            ACFW007\n  @CFDE  DB2,LIDI2FLG,BIT,             DB2 USER                ACFW007 X\n               BITMAP=LIDI2F8,                                 ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=ACCT,ZERO=YES,                            ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  DUTY,LIDDUTY,CHAR,            DEFINED BY DEPARTMENT   ACFW007 X\n               GROUP=11,                                       ACFW007 X\n               ALTER=ACCT+SEC,                                 ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  EAA,LIDI1FLG,BIT,             EAA UNION CODE          ACFW007 X\n               BITMAP=LIDI1F8,                                 ACFW007 X\n               GROUP=12,                                       ACFW007 X\n               ALTER=SEC+ACCT,                                 ACFW007 X\n               LIST=AUD+SEC+ACCT,FLAGS=LIMIT+NULL+RESTRICT     ACFW007\n  @CFDE  EASTERN,LIDI2FLG,BIT,        EASTERN CENTER LOGONID   ACFW007 X\n               BITMAP=LIDI2F5,                                 ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SEC+ACCT,ZERO=YES,                        ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  FCN,LIDFCN,CHAR,              DEPARTMENT NUMBER       ACFW007 X\n               GROUP=11,               (LAST 2)                ACFW007 X\n               ALTER=ACCT+SEC,                                 ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  GUARD,LIDI1FLG,BIT,           GUARD UNION CODE        ACFW007 X\n               BITMAP=LIDI1F3,                                 ACFW007 X\n               GROUP=12,                                       ACFW007 X\n               ALTER=SEC+ACCT,                                 ACFW007 X\n               LIST=AUD+SEC+ACCT,FLAGS=LIMIT+NULL+RESTRICT     ACFW007\n  @CFDE  HOURLY,LIDI2FLG,BIT,          HOURLY EMPLOYEE FLAG    ACFW007 X\n               BITMAP=LIDI2F7,                                 ACFW007 X\n               GROUP=12,                                       ACFW007 X\n               ALTER=SEC+ACCT,                                 ACFW007 X\n               LIST=AUD+SEC+ACCT,FLAGS=LIMIT+NULL              ACFW007\n  @CFDE  IAM,LIDI1FLG,BIT,             IAM UNION CODE          ACFW007 X\n               BITMAP=LIDI1F6,                                 ACFW007 X\n               GROUP=12,                                       ACFW007 X\n               ALTER=SEC+ACCT,                                 ACFW007 X\n               LIST=AUD+SEC+ACCT,FLAGS=LIMIT+NULL+RESTRICT     ACFW007\n  @CFDE  IATSE,LIDI1FLG,BIT,           IATSE UNION CODE        ACFW007 X\n               BITMAP=LIDI1F2,                                 ACFW007 X\n               GROUP=12,                                       ACFW007 X\n               ALTER=SEC+ACCT,                                 ACFW007 X\n               LIST=AUD+SEC+ACCT,FLAGS=LIMIT+NULL+RESTRICT     ACFW007\n  @CFDE  IBEW,LIDI1FLG,BIT,            IBEW UNION CODE         ACFW007 X\n               BITMAP=LIDI1F4,                                 ACFW007 X\n               GROUP=12,                                       ACFW007 X\n               ALTER=SEC+ACCT,                                 ACFW007 X\n               LIST=AUD+SEC+ACCT,FLAGS=LIMIT+NULL+RESTRICT     ACFW007\n  @CFDE  IUOE,LIDI1FLG,BIT,            IUOE UNION CODE         ACFW007 X\n               BITMAP=LIDI1F7,                                 ACFW007 X\n               GROUP=12,                                       ACFW007 X\n               ALTER=SEC+ACCT,                                 ACFW007 X\n               LIST=AUD+SEC+ACCT,FLAGS=LIMIT+NULL+RESTRICT     ACFW007\n  @CFDE  JESOPER,LIDI2FLG,BIT,         JESOPER FLAG            ACFW007 X\n               BITMAP=LIDI2F3,                                 ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SEC+ACCT,ZERO=YES,                        ACFW007 X\n               LIST=AUD+SEC+ACCT,FLAGS=LIMIT+NULL+RESTRICT     ACFW007\n  @CFDE  MZONE,LIDMZONE,CHAR,          INTERNAL MAIL ZONE      ACFW007 X\n               GROUP=11,                                       ACFW007 X\n               ALTER=ACCT+SEC+USER,                            ACFW007 X\n               LIST=ALL,FLAGS=NULL                             ACFW007\n  @CFDE  M204,LIDI2FLG,BIT,            MODEL 204 USER          ACFW007 X\n               BITMAP=LIDI2F2,                                 ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=ACCT,ZERO=YES,                            ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  MVSCMND,LIDU1FLG,BIT,         MVSCMND FLAG            ACFW007 X\n               BITMAP=LIDU1F1,                                 ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SEC+ACCT,ZERO=YES,                        ACFW007 X\n               LIST=AUD+SEC+ACCT,FLAGS=LIMIT+NULL+RESTRICT     ACFW007\n  @CFDE  NETVS1,LIDU1FLG,BIT,          NETVS1  AUTH FLAG       ACFW007 X\n               BITMAP=LIDU1F3,                                 ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SEC+ACCT,ZERO=YES,                        ACFW007 X\n               LIST=AUD+SEC+ACCT,FLAGS=LIMIT+NULL+RESTRICT     ACFW007\n  @CFDE  NETVS3,LIDU1FLG,BIT,          NETVS3  AUTH FLAG       ACFW007 X\n               BITMAP=LIDU1F4,                                 ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SEC+ACCT,ZERO=YES,                        ACFW007 X\n               LIST=AUD+SEC+ACCT,FLAGS=LIMIT+NULL+RESTRICT     ACFW007\n  @CFDE  NETVS4,LIDU1FLG,BIT,          NETVS4  AUTH FLAG       ACFW007 X\n               BITMAP=LIDU1F5,                                 ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SEC+ACCT,ZERO=YES,                        ACFW007 X\n               LIST=AUD+SEC+ACCT,FLAGS=LIMIT+NULL+RESTRICT     ACFW007\n  @CFDE  NTV1AP,LIDU1FLG,BIT,          NTV1AP  AUTH FLAG       ACFW007 X\n               BITMAP=LIDU1F6,                                 ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SEC+ACCT,ZERO=YES,                        ACFW007 X\n               LIST=AUD+SEC+ACCT,FLAGS=LIMIT+NULL+RESTRICT     ACFW007\n  @CFDE  NTV3AP,LIDU1FLG,BIT,          NTV3AP  AUTH FLAG       ACFW007 X\n               BITMAP=LIDU1F7,                                 ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SEC+ACCT,ZERO=YES,                        ACFW007 X\n               LIST=AUD+SEC+ACCT,FLAGS=LIMIT+NULL+RESTRICT     ACFW007\n  @CFDE  NTV4AP,LIDU1FLG,BIT,          NTV4AP  AUTH FLAG       ACFW007 X\n               BITMAP=LIDU1F8,                                 ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SEC+ACCT,ZERO=YES,                        ACFW007 X\n               LIST=AUD+SEC+ACCT,FLAGS=LIMIT+NULL+RESTRICT     ACFW007\n   @CFDE  OWNER,LIDU2FLG,BIT,ALTER=SECURITY+ACCOUNT,           ACFW007 X\n               LIST=ALL,                                       ACFW007 X\n               FLAGS=NULL,BITMAP=LIDU2F2,GROUP=2,ZERO=YES      ACFW007\n  @CFDE  PAYNAME,LIDPAYN,CHAR,         PAYROLL NAME            ACFW007 X\n               GROUP=11,                                       ACFW007 X\n               ALTER=ACCT+SEC,                                 ACFW007 X\n               LIST=ALL,FLAGS=NULL                             ACFW007\n  @CFDE  PLANT,LIDPLANT,CHAR,          EMPLOYMENT STATION      ACFW007 X\n               GROUP=11,                                       ACFW007 X\n               ALTER=ACCT+SEC+USER,                            ACFW007 X\n               LIST=ALL,FLAGS=NULL                             ACFW007\n  @CFDE P204ACCT,LIDP2ACT,CHAR,LIST=ALL,ALTER=SEC+ACCT+USER,           X\n               FLAGS=NULL+LIMIT,GROUP=13\n  @CFDE PIDMACCT,LIDPIACT,CHAR,LIST=ALL,ALTER=SEC+ACCT+USER,           X\n               FLAGS=NULL+LIMIT,GROUP=13\n   @CFDE  SILO,LIDU2FLG,BIT,ALTER=SECURITY+ACCOUNT,            ACFW007 X\n               LIST=ALL,                                       ACFW007 X\n               FLAGS=NULL,BITMAP=LIDU2F3,GROUP=2,ZERO=YES      ACFW007\n  @CFDE  SUPERC,LIDU1FLG,BIT,          SUPERC AUTH FLAG        ACFW007 X\n               BITMAP=LIDU1F2,                                 ACFW007 X\n               GROUP=2,                                        ACFW007 X\n               ALTER=SEC+ACCT,ZERO=YES,                        ACFW007 X\n               LIST=AUD+SEC+ACCT,FLAGS=LIMIT+NULL+RESTRICT     ACFW007\n  @CFDE  TOOL,LIDTOOL,CHAR,            TOOLS (SDNP USAGE)      ACFW007 X\n               GROUP=11,                                       ACFW007 X\n               ALTER=ACCOUNT+SECURITY,                         ACFW007 X\n               ZERO=YES,                                       ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  TSOALIAS,LIDU2FLG,BIT,        TSOALIAS AUTH FLAG      ACFW007 X\n               BITMAP=LIDU2F1,                                 ACFW007 X\n               GROUP=5,                                        ACFW007 X\n               ALTER=SEC+ACCT,ZERO=YES,                        ACFW007 X\n               LIST=AUD+SEC+ACCT,FLAGS=LIMIT+NULL+RESTRICT     ACFW007\n   @CFDE  TSOSY1,LIDU2FLG,BIT,ALTER=SECURITY+ACCOUNT,          ACFW007 X\n               LIST=ALL,                                       ACFW007 X\n               FLAGS=NULL,BITMAP=LIDU2F4,GROUP=2,ZERO=YES      ACFW007\n  @CFDE T204ACCT,LIDT2ACT,CHAR,LIST=ALL,ALTER=SEC+ACCT+USER,           X\n               FLAGS=NULL+LIMIT,GROUP=13\n  @CFDE TIDMACCT,LIDTIACT,CHAR,LIST=ALL,ALTER=SEC+ACCT+USER,           X\n               FLAGS=NULL+LIMIT,GROUP=13\n  @CFDE  QUOTA-GP,LIDQUOTA,CHAR,       NAME OF GROUP FOR QUOTA ACFW007 X\n               GROUP=14,                                       ACFW007 X\n               ALTER=ACCT+SEC,                                 ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL+RESTRICT              ACFW007\n  @CFDE  SECGRP,LIDSECGP,CHAR,         SECURITY GROUP          ACFW007 X\n               GROUP=11,                                       ACFW007 X\n               ALTER=ACCT+SEC,                                 ACFW007 X\n               LIST=ALL,FLAGS=LIMIT                            ACFW007\n  @CFDE  TSAR,LIDTSAR,CHAR,            TSAR NUMBER             ACFW007 X\n               GROUP=11,                                       ACFW007 X\n               ALTER=ACCT+SEC,                                 ACFW007 X\n               LIST=ALL,FLAGS=LIMIT                            ACFW007\n  @CFDE  TYPE,LIDTYPE,CHAR,            TYPE OF TSO USER        ACFW007 X\n               GROUP=11,                                       ACFW007 X\n               ALTER=ACCT+SEC,                                 ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE  UAPP,LIDI1FLG,BIT,            UAPP UNION CODE         ACFW007 X\n               BITMAP=LIDI1F5,                                 ACFW007 X\n               GROUP=12,                                       ACFW007 X\n               ALTER=SEC+ACCT,                                 ACFW007 X\n               LIST=AUD+SEC+ACCT,FLAGS=LIMIT+NULL+RESTRICT     ACFW007\n  @CFDE  UNIT,LIDUNIT,CHAR,            LOCAL DIVISION          ACFW007 X\n               GROUP=11,               DEFINED UNIT            ACFW007 X\n               ALTER=ACCT,                                     ACFW007 X\n               LIST=ALL,FLAGS=LIMIT+NULL                       ACFW007\n  @CFDE VMACCT,LIDVMACT,CHAR,LIST=ALL,ALTER=SEC+ACCT+USER,             X\n               FLAGS=NULL+LIMIT,GROUP=13\n************************************************************** ACFW007\n*                                                            * ACFW007\n*        END OF ACF2 USER DEFINED FIELDS                     * ACFW007\n*                                                            * ACFW007\n************************************************************** ACFW007\n++MACUPD (MLAIDMS) DISTLIB(ACFAMAC) .\n./ CHANGE NAME=MLAIDMS\nMLAISCG  DS        0XL2         DEFINE ACTIVE SECURITY CLASS   ACFW007\nMLAISC01 DS        XL1          IDMS SECURITY CLASS BYTE 01    ACFW007\nMLAIS001 EQU       X'80'        IDMS SECURITY CLASS BYTE 001   ACFW007\nMLAIS002 EQU       X'40'        IDMS SECURITY CLASS BYTE 002   ACFW007\nMLAIS003 EQU       X'20'        IDMS SECURITY CLASS BYTE 003   ACFW007\nMLAIS004 EQU       X'10'        IDMS SECURITY CLASS BYTE 004   ACFW007\nMLAIS005 EQU       X'08'        IDMS SECURITY CLASS BYTE 005   ACFW007\nMLAIS006 EQU       X'04'        IDMS SECURITY CLASS BYTE 006   ACFW007\nMLAIS007 EQU       X'02'        IDMS SECURITY CLASS BYTE 007   ACFW007\nMLAIS008 EQU       X'01'        IDMS SECURITY CLASS BYTE 008   ACFW007\nMLAISC02 DS        XL1          IDMS SECURITY CLASS BYTE 02    ACFW007\nMLAIS009 EQU       X'80'        IDMS SECURITY CLASS BYTE 009   ACFW007\nMLAIS010 EQU       X'40'        IDMS SECURITY CLASS BYTE 010   ACFW007\nMLAIS011 EQU       X'20'        IDMS SECURITY CLASS BYTE 011   ACFW007\nMLAIS012 EQU       X'10'        IDMS SECURITY CLASS BYTE 012   ACFW007\nMLAIS013 EQU       X'08'        IDMS SECURITY CLASS BYTE 013   ACFW007\nMLAIS014 EQU       X'04'        IDMS SECURITY CLASS BYTE 014   ACFW007\nMLAIS015 EQU       X'02'        IDMS SECURITY CLASS BYTE 015   ACFW007\nMLAIS016 EQU       X'01'        IDMS SECURITY CLASS BYTE 016   ACFW007\n./ ENDUP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACFW008": {"ttr": 5893, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ACFW008) /* ADD ACF2 DSNGEN EXIT ROUTINE\n\n           THE DSNGEN ROUTINE WILL CHECK THE VOLSER ON A TAPE\n           VOLUME AND IF IT OUTSIDE RANGE OF 000000 TO 999999,\n           ACCEES WILL BE ALLOWED.  OTHERWISE, NORMAL ACF2 PROCESSING\n           WILL OCCUR.\n                                                                 */ .\n++ VER(Z038) FMID(ACF5000) .\n++ JCLIN .\n//GEN49 JOB WC07N0044,'531-1 CM SINGER'\n//SG21  EXEC LINKS,\n// PARM='XREF,LET,LIST,RENT',\n//    UNIT='3350',SER=IPLXXX,N=SYS1,NAME=LPALIB,P1=' ',\n//    MOD=,P2=' ',CLASS=T\n//LK.SYSPUNCH DD DUMMY\n//INCLUDE DD DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN DD *\n INCLUDE INCLUDE(DSNGEN)\n NAME DSNGEN(R)\n/*\n++ SRC(DSNGEN) DISTLIB(ASRCLIB) .\n         TITLE     'DSNGEN  -- ACF2 EXIT TEST FOR TMS'\n         SPACE     1\n*  PROGRAM ATTRIBUTES -- REENTRANT, KEY 0, SUPERVISOR STATE, ENABLED.\n*  A TABLE LOOKUP WILL BE DONE TO SEE IF FIRST LEVEL\n*  QUALIFIER MATCHES DSN FIRST LEVEL QUALIFIER.  IF SO,\n*  THE SECOND LEVEL QUALIFIER WILL BE USED.\n         SPACE 3\n         ACSXP                    MAP EXIT PARAMETER LIST\n         ACFREGS                  REGISTER EQUATES\n         IEFJFCBN                 JFCB LIST\n         EJECT\nWORK     DSECT\nSAVEAREA DS    9D                 SAVEAREA\nVOLID    DS    CL6                EBCDIC VOLUME ID\nDECVOLID DS    PL4                DECIMAL VOLID (IF NUMERIC)\nWORKLEN  EQU   *-WORK             LENGTH OF WORK AREA\n         EJECT\nDSNGEN   CSECT\n         SAVE  (14,12),,*         SAVE FOR RETURN\n         LR    R11,R15            COPY BASE REGISTER\n         USING DSNGEN,R11         ANNOUNCE ADDRESSIBILITY\n         LR    R10,R1             COPY PARAMETER LIST POINTER\n         USING ACSXP,R10          ANNOUNCE ADDERSSIBILITY\n         TM    ACUUFLG1,ACUU1ABE  ERROR CONDITION?\n         BO    EXIT1              ..YES, FINI\n         TM    ACUUFLG1,ACUU1TDS  TAPE DATASET?\n         BZ    EXIT1              ..NO, FINI\n         GETMAIN RU,LV=WORKLEN    GET SOME STORAGE\n         ST    R1,8(R13)          CHAIN SAVE AREAS\n         ST    R13,4(R1)          CHAIN SAVE AREAS\n         LR    R13,R1             GET POINTER TO WORKAREA\n         USING WORK,R13           POINT AT WORK AREA\n         SPACE 2\n         L     R1,ACUUVOL         POINT AT VOLSER FOR THIS TAPE\n         MVC   VOLID,0(R1)        MOVE VOLSER TO WORK AREA\n         NC    VOLID,=C'000000'   IS VOLUME ID IN RANGE\n         CLC   VOLID,=C'000000'   IS IT 000000 THRU 999999?\n         BNE   RETURN4            ..NO, BYPASS ACF2 CHECKING\n*--------------------------------------------------------------*\n*  BELOW CODE NOT ADDED TO CHECK GIVEN RANGE OF TAPES          *\n*  JUST ASSUME IF VOLSER IS ALL NUMERIC, THEN FOLLOW RULES     *\n*  4/20/82 - BRM                                               *\n*--------------------------------------------------------------*\n*        SPACE 2\n*        MVC   VOLID,0(R1)        MOVE VOLSER TO WORK AREA\n*        NI    VOLID+5,X'CF'      SET UP FOR PACKING\n*        PACK  DECVOLID,VOLID     MAKE IT PACKED DECIMAL\n*        CP    DECVOLID,=PL4'199999' IS IT BETWEEN VALID RANGE\n*        BH    RETURN4            ..NO, BYPASS ACF2 CHECKING\n         B     RETURN0            RETURN NORMAL\n*        SPACE 2\n*--------------------------------------------------------------*\n* AT THIS POINT THE TAPE IS A TMS VOLUME.  DETERMINE IF USER   *\n* IS ATTEMPTING TO BYPASS TMS VIA THE EXPDT=98000 MECHANISM.   *\n* IF SO, ABORT THIS ACCESS ATTEMP.                             *\n* BELOW CODE NOT ADDED UNTIL MANAGEMENT DECIDES. 4/20/82 - BRM *\n*--------------------------------------------------------------*\n*        L     R15,ACUUJFCB       POINT TO JFCB\n*        CLC   JFCBXPDT-INFMJFCB(3,R15),YDD   EXPDT=98000?\n*        BE    RETURN16           ..YES, ABORT ATTEMPT\n*        B     RETURN0            RETURN NORMAL\n*--------------------------------------------------------------*\n         SPACE 1\nEXIT1    DS    0H\n         LA    R2,0               SET RETURN CODE ZERO\n         B     EXIT               GO RETURN\nRETURN0  DS    0H\n         LA    R2,0               SET RETURN CODE ZERO\n         B     RETURN             GO RETURN\nRETURN4  DS    0H\n         LA    R2,4               BYPASS ACF2 CHECKING, ALLOW ACCESS\n         B     RETURN             GO RETURN\nRETURN16 DS    0H\n         LA    R2,16              TERMINATE ACCESS AND LOG\n         B     RETURN             GO RETURN\nRETURN   DS    0H\n         LR    R1,R13             GET POINTER TO WORK AREA\n         L     R13,4(R13)         GET OLD SAVE AREA ADDRESS\n         FREEMAIN RU,LV=WORKLEN,A=(1) FREE STORAGE\n         SPACE 1\nEXIT     DS    0H                 FOUND MATCH\n         LR    R15,R2             SET RETURN CODE\n         RETURN (14,12),RC=(15)   FINI\n         END   DSNGEN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACFW009": {"ttr": 5896, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ACFW009) /* ADD ACF2/JES3 USER EXIT 02\n\n           THE ACFUSX02 ROUTINE WILL ADD TO ACCOUNT FIELDS IN\n           THE TYPE 26 SMF RECORD.  IT WILL ADD A DUMMY 2ND ACCT\n           FIELD AS WELL AS THE USERS LOGONID AND DIVISION\n           CODE TO THE 3RD AND 4TH ACCOUNTING FIELDS.\n                                                                 */ .\n++ VER(Z038) FMID(ACF5000) PRE(TS75402,TS75397) .\n++ SRCUPD(ACFUSX02) DISTLIB(ACFAMAC) SYSLIB(ACFMAC) .\n./ CHANGE NAME=ACFUSX02\n*  USER MODS =                                                  ACFW009\n*       ADD INFO TO TYPE 26 SMF RECORD.                         ACFW009\n*                                                               ACFW009\n         EJECT                                                  ACFW009\n         IATYJMR  ,                                             ACFW009\n         EJECT                                                  ACFW009\n         ACCVT    ,                                             ACFW009\n         LR    R2,R1              *GET POINTER TO IATISDT       ACFW009\n         USING IATISDT,R2         *SET UP ADDRESSABILITY        ACFW009\n         GETMAIN RU,LV=WORKLEN    *GET WORK AREA                ACFW009\n         ST    R13,4(R1)          *SAVE AREA CHAIN              ACFW009\n         ST    R1,8(R13)          *SAVE GETMAINED AREA          ACFW009\n         LR    R3,R1              *POINT AT GETMAIN AREA        ACFW009\n         USING WORKAREA,R3        *ADDRESS GETMAINED AREA       ACFW009\n         TM    ISFLAG9,ISDSEL     *IS THIS A DEMAND SELECT JOB? ACFW009\n         BC    ALLOFF,GETCVT      *NO, GO PUT IN ACCT DATA      ACFW009\n         TM    ISFLAG10,ISMVSTSO  *IS IT A TSO JOB?             ACFW009\n         BC    ALLOFF,RETURN      *NO, RETURN TO CALLER         ACFW009\n         SPACE 3                                                ACFW009\nGETCVT   ACFINCVT 6,NONE=RETURN   *GO GET ACF2 CVT              ACFW009\n         USING ACCVT,R6           *ADDRESS ACF2 CVT             ACFW009\n         XC    ACALT(ACALEN),ACALT *ZERO PARM BLOCK             ACFW009\n         SPACE 2                                                ACFW009\n         MVI   ACAFCN,X'02'       *SET UP ACF2 SVC CALL         ACFW009\n         MVI   ACASFCN,ACASURT    *RETURN UNFORMATTED LOGONID   ACFW009\n         LA    R1,ERRINFO         *MESSAGE AREA ADDRESS         ACFW009\n         ST    R1,ACAMSG          *STORE IT                     ACFW009\n         MVC   ACALID,ACVLID      *GET LOGONID TO RETURN        ACFW009\n         DROP  R5                                               ACFW009\n         LA    R7,LOGONREC        *POINT AT DATA RETURN AREA    ACFW009\n         USING LIDREC,R7          *SETUP ADDRESSABILITY         ACFW009\n         ST    R7,ACARETB         *STORE ADDR OF RETURN AREA    ACFW009\n         MVC   ACARETL,=A(1024)   *GET LOGONID LENGTH           ACFW009\n         SPACE 2                                                ACFW009\n         ACFSVC ACALT,TYPE=A,     *GO FIND ACF2 LOGONID         ACFW009X\n               NONE=RETURN,                                     ACFW009X\n               CVT=HAVE                                         ACFW009\n         LTR   R15,R15            *EVERYTHING OK?               ACFW009\n         BZ    GETSMF             *YES, GO GET LOGONID INFO     ACFW009\n         SPACE 2                                                ACFW009\nERROR    DS    0H                                               ACFW009\n         LH    R1,ERRINFO         *GET MESSAGE LENGTH           ACFW009\n         LA    R1,ERRINFO(R1)     *NEXT AVAILABLE BYTE IN MSG   ACFW009\n         MVC   0(L'RCODE,R1),RCODE *ADD ROUTING CODES           ACFW009\n         MVI   ERRINFO+1,X'80'    *AND MCS FLAG                 ACFW009\n         WTO   MF=(E,ERRINFO)     *ISSUE THE WTO                ACFW009\n         B     RETURN             *ALL DONE                     ACFW009\n         SPACE 2                                                ACFW009\nGETSMF   DS    0H                                               ACFW009\n         L     R4,JDABADDR        *GET JDAB POINTER             ACFW009\n         USING JDABSTRT,R4        *SET UP BASE REG              ACFW009\n         BAL   R14,SMF26          *GET ADDR OF SMF26JAF         ACFW009\n         B     RETURN             *ACTUAL SECT DOES NOT EXIST   ACFW009\n         MVI   0(R1),X'04'        *SPECIFY FOUR ACCT FIELDS     ACFW009\n         SR    R15,R15            *CLEAR R15                    ACFW009\n         IC    R15,1(R1)          *GET LENGTH OF 1ST ACCT FLD   ACFW009\n         LA    R15,2(R15)         *ADD 2 FOR 1ST TWO FIELDS     ACFW009\n         LA    R1,0(R15,R1)       *GET POINTER TO 2ND ACCT FLD  ACFW009\n         MVC   0(2,R1),INIT       *MOVE IN DUMMY 2ND ACCT FLD   ACFW009\n         LA    R1,2(R1)           *POINT TO LOGONID FIELD       ACFW009\n         LA    R14,8              *MAXIMUM LENGTH OF LOGONID    ACFW009\n         LA    R15,LIDLID         *POINT TO LOGONID             ACFW009\nLIDLOOP  CLI   0(R15),C' '        *BLANK YET                    ACFW009\n         BE    LIDBLNK            *YES - STOP SCAN              ACFW009\n         LA    R15,1(R15)         *POINT TO NEXT CHARACTER      ACFW009\n         BCT   R14,LIDLOOP        *AND AROUND AGAIN             ACFW009\nLIDBLNK  LA    R14,LIDLID         *POINT TO LOGONID             ACFW009\n         SR    R15,R14            *COMPUTE LENGTH OF LOGONID    ACFW009\n         LTR   R15,R15            *TEST FOR ZERO                ACFW009\n         BZ    LIDNULL            *YES - IT WAS ZERO            ACFW009\n         STC   R15,0(R1)          *MOVE IN LOGONID LENGTH       ACFW009\n         BCTR  R15,R0             *SUBTRACT ONE FOR EX INST     ACFW009\n         EX    R15,LIDMOVE        *MOVE IN LOGONID              ACFW009\n         B     *+10               *SKIP MOVE FOR DUMMY LOGONID  ACFW009\nLIDNULL  MVC   0(2,R1),INIT       *MOVE IN DUMMY 3ND ACCT FLD   ACFW009\n         LA    R1,2(R15,R1)       *POINT TO DIVISION FIELD      ACFW009\n         MVI   0(R1),X'02'        *MOVE IN LENGTH OF DIVISON    ACFW009\n         MVC   1(2,R1),LIDDIV     *MOVE IN DIVISION CODE        ACFW009\n         B     RETURN             *ALL DONE                     ACFW009\nLIDMOVE  MVC   1(0,R1),LIDLID     *MOVE IN LOGONID              ACFW009\n*-------------------------------------------------------------* ACFW009\n*  SMF26 - POINT AT ACCOUNTING FIELDS IN TYPE 26 SMF RECORD   * ACFW009\n*-------------------------------------------------------------* ACFW009\nSMF26    L     R1,JMRADDR         *GET JMR ADDR                 ACFW009\n         USING JMR,R1             *ADDRESSABILITY               ACFW009\n         TM    SMF26IND,X'20'     *ACTUAL SECTION EXIST?        ACFW009\n         BZR   R14                *..NO, RETURN TO CALLER       ACFW009\n         TM    SMF26IND,X'C0'     *DOES DESCR OR EVENT EXIST?   ACFW009\n         BZ    SMFACT             *..NEITHER, JUST ACTUAL       ACFW009\n         BM    SMFONE             *..JUST ONE OF THEM EXISTS    ACFW009\n         AH    R1,SMF26LN1        *ALLOW FOR DESCR SECT         ACFW009\nSMFONE   AH    R1,SMF26LN1        *ALLOW FOR EVENT (OR DESCR)   ACFW009\nSMFACT   LA    R1,SMF26JAF        *POINT TO JOB ACCTNG FLDS     ACFW009\n         B     4(R14)             *NORMAL RETURN                ACFW009\n         SPACE 3                                                ACFW009\nRETURN   DS    0H                                               ACFW009\n         LR    R1,R3              *UNCHAIN SAVE AREAS           ACFW009\n         L     R13,4(R3)          *POINT BACK AT SAVE AREA      ACFW009\n         FREEMAIN RU,LV=WORKLEN,A=(1) *FREE STORAGE             ACFW009\n*-------------------------------------------------------------* ACFW009\n*        C O N S T A N T S                                    * ACFW009\n*-------------------------------------------------------------* ACFW009\nINIT     DC    XL2'01F0'          *LENGTH=1, ACCT=0             ACFW009\nRCODE    DC    X'000080A0'        *WTO ROUTING CODES            ACFW009\nWORKAREA DSECT                                                  ACFW009\nSAVEREGS DS    9D                 *SAVE AREA                    ACFW009\n         ACALT DSECT=NO           *RESOURCE PARM BLOCK          ACFW009\nACALEN   EQU       *-ACALT        *LENGTH OF CONTROL BLOCK      ACFW009\nERRINFO  DS    CL128              *MESSAGE AREA                 ACFW009\nLOGONREC DS    CL1024             *LOGONID RECORD               ACFW009\nWORKLEN  EQU   *-WORKAREA         *WORK AREA LENGTH             ACFW009\nUMODNUM  DC    CL7'ACFW009'       *USER NUMBER                  ACFW009\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACFW010": {"ttr": 5899, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ACFW010) /* SET NJE TRANSMISSION SEQUENCE\n                       FOR NJE SECTIONS\n\n           ACFUSX01 - ACF2/JES3 JOB PRE-VALIDATION EXIT\n\n  THIS MOD SETS THE NJE TRANSMISSION SEQUENCE FOR THE NJE SECTIONS\n  AND SEQUENCES GD'S NJE SECTION AHEAD OF THE ACF2 SECTION.\n  THIS MOD PREREQS  ****** AJSW021 ***** THE NJE JES3 MOD WHICH\n  PASSES ACCOUNTING INFORMATION IN A NJE USER DEFINED 'SECTION'.\n   NOTE NOTE NOTE .... THIS VERSION HAS A DIFFERENT PRE THAN THE\n   MOD FOR JES 1.3.1.(REF 'MVS3.XAMODS.DATA').\n                                                                 */ .\n++ VER(Z038) FMID(ACF5000) PRE(AJSW021,TS75397,TS75401,TS75402) .\n++ SRCUPD(ACFUSX01) DISTLIB(ACFAMAC) SYSLIB(ACFMAC).\n./ CHANGE NAME=ACFUSX01\n*  USER MODS =                                                  ACFW010\n*        SET TRANSMISSION SEQUENCE NUMBER TO ALLOW FOR          ACFW010\n*        OTHER NJE SECTIONS                                     ACFW010\n*        BO    PROCESS             YES, SKIP INPUT SERVICE RTN  ACFW010\n         BO    CHKSEQ             *..YES, GO CHECK SEQ. NUMBER  ACFW010\nCHKSEQ   DS    0H                  ..                           ACFW010\n         OI    ACFNJBUF+3,X'80'   *SET HIGH ORDER BIT IN SEQ NO ACFW010\n         B     PROCESS            *FINISHED                     ACFW010\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACFW012": {"ttr": 5901, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (ACFW012)\n   /* -----------------------------------------------------------\n            ACF2 UM11011  -- NOTE 11 INSTALLATION\n\n      THIS USERMOD IS PROVIDED TO INSTALL SKK NOTE #11, ACF2\n      RESOURCE RULE POST PROCESSING EXIT (NEXT-KEY FUNCTION\n      FOR RULE DATA).\n\n      PLEASE REFER TO THE NOTE 11 DISTRIBUTED DOCUMENTATION\n      FOR INFORMATION ON THE INSTALLATION OF THIS FEATURE.\n         (FROM 'ACF2.R412.ACFPTFS(UM1101)')\n       (NEED //DISTMAC DD DSN=ACF2.R412.DISTMACS,DISP=SHR CARD)\n      ----------------------------------------------------------- */ .\n++VER (Z038) FMID(ACF5000) .\n++SRC(ACFEERRN) DISTLIB(ACFAMAC) SYSLIB(ACFMAC) TXLIB(DISTMACS) .\n++JCLIN .\n//LK1 EXEC PGM=IEWL,PARM='RENT,NCAL,LET,MAP,LIST,XREF'\n//SYSPRINT DD SYSOUT=*\n//SYSLMOD  DD DSN=SYS1.LPALIB,DISP=SHR,VOL=SER=IPLXXX,UNIT=DISK\n//ACFAMOD  DD DSN=SYS1.ACFAMOD,DISP=SHR,VOL=SER=DLBXA1,UNIT=DISK\n//SYSLIN   DD *\n ORDER   ACFEERRN\n INCLUDE ACFAMOD(ACFEERRN)\n ENTRY   ACFEERRN\n NAME    ACFEERRN(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACFW014": {"ttr": 5903, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (ACFW014)\n   /* -----------------------------------------------------------\n                 UM12001  -- NOTE12 INSTALLATION\n\n      THIS USERMOD IS PROVIDED TO INSTALL SKK NOTE #12, ACF2\n      SAMPLE NEW PASSWORD EXIT. THIS USERMOD WILL ASSEMBLE AND\n      LINK ACFEEPSW. AFTER INSTALLING THIS USERMOD THE GSO EXITS\n      RECORD MUST BE UPDATED TO REFER TO 'ACFEEPSW' FOR THE NEW\n      PASSWORD EXIT.\n\n      PLEASE REFER TO THE DOCUMENTATION IN THE SYSTEMS PROGRAMMER\n      GUIDE AND THE DOCUMENTATION IN THE ASSEMBLED LISTINGS\n      OF THESE MODULES FOR FURTHER INFORMATION ON NOTE #12\n      INSTALLATION.\n\n      ----------------------------------------------------------- */ .\n++VER (Z038) FMID(ACF5000) .\n++SRC(ACFEEPSW) DISTLIB(ACFAMAC) SYSLIB(ACFMAC) TXLIB(DISTMACS) .\n++MAC(ACLOCFDE) DISTLIB(ACFAMAC) SYSLIB(ACFMAC) TXLIB(DISTMACS) .\n++MOD(A1200FDE) DISTLIB(ACFAMOD) .\n INCLUDE ACFMOD(ACF00FDE)\n++MOD(A12CODEP) DISTLIB(ACFAMOD) .\n INCLUDE ACFMOD(ACSCODEP)\n++MOD(A1200DES) DISTLIB(ACFAMOD) .\n INCLUDE ACFMOD(ACF00DES)\n++MOD(A1200PEN) DISTLIB(ACFAMOD) .\n INCLUDE ACFMOD(ACF00PEN)\n++MOD(A12FFTRT) DISTLIB(ACFAMOD) .\n INCLUDE ACFMOD(ACFFFTRT)\n++MOD(A12$GCVT) DISTLIB(ACFAMOD) .\n INCLUDE ACFMOD(ACF$GCVT)\n++JCLIN .\n//LK1 EXEC PGM=IEWL,PARM='RENT,NCAL,LET,MAP,LIST,XREF'\n//SYSPRINT DD SYSOUT=*\n//SYSLMOD  DD DSN=SYS1.LPALIB,DISP=SHR\n//ACFAMOD  DD DSN=SYS1.ACFAMOD,DISP=SHR\n//SYSLIN   DD *\n INCLUDE ACFAMOD(ACFEEPSW)\n INCLUDE ACFAMOD(ACF00FDE)\n INCLUDE ACFAMOD(ACF$GCVT)\n INCLUDE ACFAMOD(ACSCODEP)\n INCLUDE ACFAMOD(ACF00DES)\n INCLUDE ACFAMOD(ACF00PEN)\n INCLUDE ACFAMOD(ACFFFTRT)\n ENTRY   ACFEEPSW\n NAME    ACFEEPSW(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADPW002": {"ttr": 5905, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ADPW002) /* ALLOW ISAM UPDATES WITH DISP=SHR:\n\n       THIS MODIFICATION REMOVES THE REQUIREMENT THAT ANY\n             ========>    ISAM    <=========\n       DATASET MUST BE ALLOCATED DISP=OLD IF AN UPDATE IS BEING\n       DONE. THIS ALLOWS A BATCH UPDATE PROGRAM TO BE RUN AGAINST\n       AN IMS DATABASE WITHOUT BRINGING IMS DOWN. THIS IS FOR\n       A PRE IMS 1.1.5 SYSTEM WHERE YOU CANNOT DYNAMICALLY\n       ALLOCATE ALL YOUR DATABASES AT IMS STARTUP TIME.\n\n       ********************  CAUTION  *************************\n\n       YOU MUST (AND I MEAN MUST) TAKE POSITIVE STEPS TO INSURE\n       THAT (1) THE IMS DATABASE IS DBR'D WHILE YOU ARE RUNNING\n       ANY BATCH UPDATES AGAINST IT AND/OR (2) YOU DO NOT ATTEMPT\n       TO SCHEDULE TWO BATCH JOBS WHICH UPDATE THE SAME ISAM DATA-\n       SET AT THE SAME TIME.\n                                                                 */ .\n++ VER(Z038) FMID(HDP2230)       /* THIS SPACE AVAIL.FOR COMMENT. */.\n++ ZAP(IGG0192A) DISTLIB(AOSD8) .\n NAME IGG0192A\n VER 0164 9108,A0BB          TM    JFCBIND2,JFCBSHR LOAD WITH DISP=SHR\n VER 0168 4710,31CE          BO    ISL00F21  YES, GO ABEND\n VER 016C 5890,A228          L     R9,DXDEBXAD DEB EXTENSION ADDRESS\n REP 0168 4700,31CE          NOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADPW003": {"ttr": 5907, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (ADPW003)   /*\n      THIS USERMOD WILL ADD ALIAS OLDGENER TO IEBGENER IN LINKLIB.\n      THE ICEGENER/IEBGENER VERSION IS IN LPALIB (DFSORT).\n                                                           */ .\n++VER (Z038) FMID(HDP2230) .\n++JCLIN .\n//ADPW003 JOB WC07N0323,'W1-5311  CR SINGER'\n//LINKGEN EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET',\n//    UNIT='3380',SER=IPLXXX,N=SYS1,NAME=LINKLIB,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//SYSLIN DD *\n INCLUDE SYSPUNCH(NULGENER)\n ENTRY IEBGENER\n ALIAS   OLDGENER\n NAME    IEBGENER(R)\n/*\n++SRC (NULGENER) DISTLIB(USERDLIB) /* JUST TO FORCE A RE-LINK */ .\nNULGENER CSECT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADPW004": {"ttr": 6145, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ADPW004) /* MOD TO MAKE BUFNO=1 THE DEFAULT IF VIO:\n\n       THIS MODIFICATION CHANGES THE OPEN TIME DEFAULT OF BUFNO=5\n       TO BUFNO=1 IF THE DATASET IS GOING TO BE VIO. ITS NOT\n       NECESSARY TO DO ALL THE CHAIN SCHEDULING STUFF IF IT\n       IS ALL REALLY GOING TO BE IN STORAGE ANYWAY.\n                                                                 */ .\n++ VER(Z038) FMID(HDP2230) PRE(UY15187) /* DFP 2.3       */ .\n++ ZAP(IGG0196B) DISTLIB(AOSD0) .\n NAME IGG0196B\n*VER 00D4 9505,2014               CLI   DCBBUFNO,GENDEF\n*VER 00D8 4740,30DE               BL    SETBUFN2\n*VER 00DC 9205,2014     OVLY      MVI   DCBBUFNO,GENDEF\n*VER 025C 0000,0000     PATCH     DC    NF'0'\n*VER 0260 0000,0000     PATCH     DC    NF'0'\n*VER 0264 0000,0000     PATCH     DC    NF'0'\n*VER 0268 0000,0000     PATCH     DC    NF'0'\n*VER 026C 0000,0000     PATCH     DC    NF'0'\n*VER 0270 0000,0000     PATCH     DC    NF'0'\n REP 00DC 47F0,325A               B     PATCH\n REP 025C 9205,2014     PATCH     MVI   DCBBUFNO,GENDEF\n REP 0260 5810,B020               L     RF,DEBSUCBA\n REP 0264 9180,1000               TM    0(RF),UCBVRDEV  VIO ?\n REP 0268 47E0,30DE               BZ    OVLY+4      NO - RETURN\n REP 026C 9201,2014               MVI   DCBBUFNO,X'01'   DEFAULT\n REP 0270 47F0,30DE               B     OVLY+4   RETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADPW007": {"ttr": 6147, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ADPW007) /* PUT THE ALLOCATING JOBS PCS NUMBER IN DSCB.\n\n     THIS MODIFICATION WILL CAUSE THE ALLOCATING JOBS FIRST ACCOUNT\n     FIELD TO BE PLACED INTO ALL NEWLY ALLOCATED FORMAT1 DSCBS IN\n     PLACE OF THE DS1SYSCD FIELD.  THIS ENABLES US TO CHARGEBACK ALL\n     DATASETS BASED UPON (AT LEAST) THE ALLOCATING JOBS PCS NUMBER.\n\n             IGG0325E = DADSM NON-ISAM ALLOCATE\n             IGG032I3 = DADSM ISAM ALLOCATE\n             IGG0553C = DADSM NON-ISAM EXTEND\n             WCSVC238 = SVC TO GET PCS NUMBER AND MOVE TO DSCB\n                        SEE A$$W012\n                                                                  */ .\n++ VER(Z038) FMID(HDP2230) PRE(UY11311,A$$W012)  /* 8707 */ .\n++ ZAP(IGG0325E) DISTLIB(AOSD0) /* UY11311 (8707) DADSM NON-ISAM  */ .\n NAME IGG0325E\n VER 032C 4200,D1DB\n VER 0330 4590,C490\n VER 0334 94EF,DAE7\n VER 0900 0000,0000               PATCH AREA\n REP 0330 4590,C8FE               BRANCH TO PATCH\n REP 0900 4110,D1A0               PUT DSCB ADDR IN R1\n REP 0904 5800,D080               PUT UCB ADDR IN R0\n REP 0908 0AEE                    ISSUE STAMPING SVC\n REP 090A 47F0,C490               RETURN FROM PATCH\n++ ZAP(IGG032I3) DISTLIB(AOSD0) /* UY11311 (8707) DADSM ISAM      */ .\n NAME IGG032I3\n VER 012E 1B99\n VER 0130 4390,D7A5\n VER 0134 D601,D9A8,D9A8\n VER 013A 4780,C144\n VER 06E0 0000,0000               PATCH AREA\n REP 0134 47F0,C6DE               BRANCH TO PATCH\n REP 06E0 4110,D1A0               PASS DSCB ADDR IN R1\n REP 06E4 5800,D080               UCB ADDR IN R0\n REP 06E8 0AEE                    ISSUE STAMPING SVC\n REP 06EA D601,D9A8,D9A8          REPLACED INSTRUCTION\n REP 06F0 47F0,C144               RETURN FROM PATCH\n++ ZAP(IGG0553C) DISTLIB(AOSD0) /* UY11311 (8707) NON-ISAM EXTEND */ .\n NAME IGG0553C\n VER 05F8 1B55\n VER 05FA 41A0,B0C9\n VER 05FE 47F0,3260\n VER 0AA0 0000,0000               PATCH AREA\n REP 05FE 47F0,3A9E               BRANCH TO PATCH\n REP 0AA0 4110,B060               PASS DSCB ADDR IN R1\n REP 0AA4 5800,415C               UCB ADDR IN R0\n REP 0AA8 0AEE                    ISSUE STAMPING SVC\n REP 0AAA 47F0,3260               RETURN FROM PATCH\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADPW008": {"ttr": 6149, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ADPW008) /* ADD DFDS DASD EXIT ROUTINE\n\n   A. FOR ALL ALLOCATIONS AND EXTENDS THIS EXIT WILL FORCE\n      THE DS1REFD FIELD TO BE UPDATED WITH THE CURRENT DATE.\n\n   B. WILL NOT ALLOW VSAM OR ISAM DATASETS ON ANY PACK FOR TSO TYPE\n      DATASETS (THOSE BEGINNING WITH A DOLLOR SIGN).\n\n   C. THIS PROGRAM WILL PERFORM THE FOLLOWING FUNCTIONS ON\n      THE TSO8XX PACKS:\n      1.  WILL LIMIT DA TYPE DATASETS TO 1 EXTENT.\n      2.  WILL FORCE MAX ALLOCATION PER DATASET OF:\n          A. 10 CYLINDERS.\n          B. 150 TRACKS.\n      3.  WILL FORCE ALLOCATION OF 5,5 CYLINDERS TO 5,5 TRACKS\n          (5,5 CYLINDERS IS NORMAL ALLOCATION FOR SYSDA, THIS SHOULD\n          NOT BE USED FOR TSO VOLUMES).\n      4.  IF ALLOCATION IS GREATER THAN ONE OF THE ABOVE, THEN\n          THE ALLOCATION IS CHANGED TO THE MAXIMUM ALLOWED (I.E.\n          REQUESTED AMOUNT OF 30 CYL, ACTUAL AMOUNT GIVEN IS 10 CYL).\n      5.  IF ALLOCATION HAS SECONDARY EXTENTS, THE RELEASE BIT\n          IS TURNED ON.\n\n   D. THIS PROGRAM WILL PERFORM THE FOLLOWING FUNCTIONS ON\n      THE WRKXXX PACKS:\n      1.  IF ALLOCATION HAS SECONDARY EXTENTS, THE RELEASE BIT\n          IS TURNED ON.\n      2.  WILL SETUP TWO WORK POOLS (I.E. ONE SET OF VOLUMES FOR\n          PRODUCTION AND ONE SET FOR EVERYBODY ELSE) .\n\n   E. THIS PROGRAM WILL PERFORM THE FOLLOWING FUNCTIONS ON\n      THE MKWXXX PACKS:\n      1.  WILL FORCE MAX ALLOCATION PER DATASET OF:\n          A. 50 CYLINDERS.\n          B. 750 TRACKS.\n      2.  IF ALLOCATION IS GREATER THAN ONE OF THE ABOVE, THEN\n          THE ALLOCATION IS CHANGED TO THE MAXIMUM ALLOWED (I.E.\n          REQUESTED AMOUNT OF 90 CYL, ACTUAL AMOUNT GIVEN IS 50 CYL).\n      3.  WILL FORCE ALLOCATION OF 5,5 CYLINDERS TO 5,5 TRACKS.\n      4.  IF ALLOCATION HAS SECONDARY EXTENTS, THE RELEASE BIT\n          IS TURNED ON.\n\n   F. THIS PROGRAM WILL PERFORM THE FOLLOWING FUNCTIONS ON\n      THE MPRXXX PACKS:\n      1.  WILL ALLOW ONLY DATASETS THAT BEGIN WITH DCWX (EXCEPT FOR\n          DCWT), $WC4, AND $WC3 TO BE ALLOCATED.\n                                                                 */ .\n++ VER(Z038) FMID(HDP2230) .\n++ JCLIN .\n//GEN49 JOB WC07N0323,'531-0 CM SINGER'\n//SG21  EXEC LINKS,\n// PARM='XREF,LET,LIST,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS1,NAME=LPALIB,P1=' ',\n//    MOD=,P2=' ',CLASS=T\n//LK.SYSPUNCH DD DUMMY\n//INCLUDE DD DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN DD *\n INCLUDE INCLUDE(IGGPRE00)\n NAME IGGPRE00(R)\n/*\n++ SRC(IGGPRE00) DISTLIB(ASRCLIB) .\nIGGPRE00 TITLE '*** DFDS PREPROCESSING EXIT *** IGGPRE00'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ROUTINE NAME - IGGPRE00                                            *\n*          DATE - 10 MAY 1983                                         *\n*          BRUCE R. MINTON                                            *\n*          GENERAL DYNAMICS - DATA SYSTEMS DIVISION                   *\n*          P.O. BOX 85808                                             *\n*          SAN DIEGO, CALIFORNIA 92138                                *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 4\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nIGGPRE00 CSECT\n         SAVE  (14,12),,*          SAVE FOR RETURN\n         LR    R10,R15             COPY BASE REGISTER\n         USING IGGPRE00,R10        SET ADDRESABILITY\n         LR    R2,R1               GET POINTER TO PARAMETER LIST\n         USING IGGIEPL,R2          POINT AT PARAMETER LIST\n*\n         TM    IEXFLAG,IEXVIO      IS IT VIO DATASET?\n         BO    RETURN0             ..YES, DONT DO ANYTHING\n         CLI   IEXFUNC,IEXALL      IS THIS ALLOCATE\n         BE    GETDATE             ..YES - DATE STAMP\n         CLI   IEXFUNC,IEXEXT      IS THIS EXTEND\n         BNE   RETURN0             ..NO, DONT DO ANYTHING\n*\nGETDATE  L     R3,16               GET POINTER TO CVT\n         LM    R4,R5,IEXFMT1       SAVE DATA FOR 8 BYTE WORK AREA\n         XC    IEXFMT1(8),IEXFMT1 CLEAR WORK AREA\n         XC    IEXRSVWD(4),IEXRSVWD CLEAR RESERVED WORD\n         SR    R6,R6               CLEAR WORK REG\n         IC    R6,X'39'(R3)        PICK UP YEAR FROM CVTDATE\n         SLL   R6,4                SHIFT OVER 4 BITS\n         O     R6,=X'0000000F'     MAKE PACKED DECIMAL\n         ST    R6,IEXFMT1+4        SAVE DOWN\n         CVB   R6,IEXFMT1          MAKE BINARY\n         SR    R7,R7               CLEAR WORK REG\n         MVC   IEXFMT1+6(2),X'3A'(R3) MOVE IN DAY NUMBER FROM CVTDATE\n         CVB   R7,IEXFMT1          MAKE BINARY\n         STM   R4,R5,IEXFMT1       RESTORE DATA FROM 8 BYTE WORK AREA\n*\n         TM    IEXFLAG,IEXMF1      WAS PARTIAL DSCB SUPPLIED\n         BZ    GETDSCB             ..NO, MUST BUILD ONE\n         L     R1,IEXFMT1          GET POINTER TO PARTIAL FMT1 DSCB\n         STC   R6,X'1F'(R1)        SAVE DOWN YEAR\n         STCM  R7,3,X'20'(R1)      SAVE DOWN DAY\n         B     RETURN0             AND RETURN (NO JFCB AVAILABLE)\n*\nGETDSCB  LA    R5,96               LENGTH OF MODEL DSCB\n       GETMAIN R,LV=(R5)           GETMAIN MODEL\n         ST    R1,IEXFMT1          SAVE FOR ALLOCATE\n         ST    R1,IEXRSVWD         SAVE FOR POST EXIT\n         MVI   0(R1),X'00'         ZERO IT\n         MVC   1(95,R1),0(R1)      ALL OUT\n         STC   R6,X'1F'(R1)        SAVE DOWN YEAR\n         STCM  R7,3,X'20'(R1)      SAVE DOWN DAY\n*\n         L     R3,IEXUCB           GET POINTER TO UCB\n         USING IGGUCB,R3           POINT AT UCB\n         L     R4,IEXPTR1          GET POINTER TO JFCB\n         USING IGGJFCB,R4          POINT AT JFCB\n         CLI   IEXFUNC,X'02'       IS IT EXTEND FUNCTION?\n         BE    CHKEXTA             ..YES, GO CHECK EXTENTS\n         CLI   IEXFUNC,X'01'       IS IT ALLOCATE FUNCTION?\n         BNE   RETURN0             ..NO, DONT DO ANYTHING\n         BAL   R11,CHKWORKA        GO CHECK WORK PACK PARTITION\n         BAL   R11,VSAMTSO         GO CHECK TSO TYPE VSAM DATASETS\n         CLC   UCBVOLI(3),MSSVOL   IS IT A MSS PACK?\n         BE    CHKMSS              ..YES, GO PROCESS IT\n         CLC   UCBVOLI(3),MPRXXX   IS IT MPRXXX VOLUME (I.E. PROD)?\n         BE    MPRCHK              ..YES, GO CHECK MPRXXX PACKS\n         CLC   UCBVOLI(4),TSO8XX   IS IT TSO8XX (3380)?\n         BE    DSORG               ..YES, GO CHECK DSORG\n         B     RETURN0             ALL DONE\n         SPACE 4\nCHKWORKA DS    0H\n         CLC   UCBVOLI(3),WRKXXX   IS IT A WORK PACK?\n         BNER  R11                 ..NO, KEEP CHECKING\n         CLC   JFCBDSNM(3),SYS1    IS IT SYSTEM NAME?\n         B     CHKWORKB            ..YES, SKIP ALL SEPARATING <--- TEMP\n         CLC   JFCBDSNM(4),VS01    IS IT VSAM WORK FILE?\n         BE    CHKWORKB            ..YES, SKIP ALL SEPARATING\n         CLC   JFCBDSNM(4),VSW1    IS IT VSAM WORK FILE?\n         BE    CHKWORKB            ..YES, SKIP ALL SEPARATING\n         CLI   UCBVOLI+5,X'F0'     IS LAST BYTE OF VOLUME ZERO?\n         BE    PRODONLY            ..YES, ONLY PROD DATASETS\n         CLI   UCBVOLI+5,X'F2'     IS LAST BYTE OF VOLUME TWO?\n         BE    PRODONLY            ..YES, ONLY PROD DATASETS\n         CLI   UCBVOLI+5,X'F4'     IS LAST BYTE OF VOLUME FOUR?\n         BE    PRODONLY            ..YES, ONLY PROD DATASETS\n         CLI   UCBVOLI+5,X'F6'     IS LAST BYTE OF VOLUME SIX?\n         BE    PRODONLY            ..YES, ONLY PROD DATASETS\n         CLI   UCBVOLI+5,X'F8'     IS LAST BYTE OF VOLUME EIGHT?\n         BE    PRODONLY            ..YES, ONLY PROD DATASETS\n         CLC   JFCBDSNM(4),DCWT    IS IT DCWT TEMP DATASET?\n         BE    CHKWORKB            ..YES, ALLOW ON THIS VOLUME\n         CLC   JFCBDSNM(3),DCWT    IS IT DCWX PROD DATASET?\n         BE    RETURN4             ..YES, DO NOT ALLOW ON THIS VOLUME\n         CLC   JFCBDSNM(4),PROD    IS IT PROD DATASET?\n         BE    RETURN4             ..YES, DO NOT ALLOW ON THIS VOLUME\n         B     CHKWORKB            EVERYBODY ELSE IS ALLOWED\nPRODONLY DS    0H\n         CLC   JFCBDSNM(4),DCWT    IS IT DCWT TEMP DATASET?\n         BE    RETURN4             ..YES, DO NOT ALLOW ON THIS VOLUME\n         CLC   JFCBDSNM(3),DCWT    IS IT DCWX PROD DATASET?\n         BE    CHKWORKB            ..YES, ALLOW AND CONTINUE PROCESSING\n         CLC   JFCBDSNM(4),PROD    IS IT PROD DATASET?\n         BE    CHKWORKB            ..YES, ALLOW AND CONTINUE PROCESSING\n         B     RETURN4             EVERYBODY ELSE NOT ALLOWED\n         SPACE 5\nCHKWORKB DS    0H\n         CLC   JFCBDSNM(4),PROD    IS IT A PRODUCTION DATASET?\n         BER   R11                 ..YES, DONT DO ANYTHING\n         CLC   JFCBSQTY,ZEROS      IS THERE SECONDARY ALLOCATION?\n         BER   R11                 ..NO, DONT DO ANYTHING\n         OI    JFCBIND1,JFCRLSE    TURN ON RELEASE FLAG\n         BR    R11                 ALL DONE\n         EJECT\nMPRCHK   DS    0H\n         CLC   JFCBDSNM(8),HSM     IS IT AN HSM RECALL DATASET?\n         BE    RETURN0             ..YES, DONT DO ANYTHING\n         CLC   JFCBDSNM(4),SYS1    IS IT SYS1?\n         BE    RETURN0             ..YES, DONT DO ANYTHING\n         CLC   JFCBDSNM(4),DCWT    IS IT DCWT DATASET?\n         BE    RETURN4             ..YES, DONT ALLOW ON MPRXXX PACK\n         CLC   JFCBDSNM(3),DCWT    IS IT DCW1, DCW2, ETC?\n         BE    RETURN0             ..YES, DONT DO ANYTHING\n         CLC   JFCBDSNM(4),$WC3    IS IT HSS NAME?\n         BE    RETURN0             ..YES, DONT DO ANYTHING\n         CLC   JFCBDSNM(4),$WC4    IS IT PC TYPE DATASET?\n         BE    RETURN0             ..YES, DONT DO ANYTHING\n         B     RETURN4             ..NO, DONT ALLOW ON MPRXXX PACK\n         EJECT\nDSORG    DS    0H\n         CLC   JFCBDSNM(8),HSM     IS IT AN HSM RECALL DATASET?\n         BE    RETURN0             ..YES, DONT DO ANYTHING\n         CLC   JFCBDSNM(4),SYS1    IS IT SYS1?\n         BE    RETURN0             ..YES, DONT DO ANYTHING\n         CLC   JFCBDSNM(3),SYS1    IS IT SYSTEM NAME?\n         BE    CHKDSORG            ..YES, FOLLOW NORMAL RULES\n         CLC   JFCBDSNM(1),DOLLAR  IS IT A TSO TYPE DATASET?\n         BNE   RETURN8             ..NO, DSN NOT ALLOWED ON TSO PACK\n         SPACE 2\nCHKDSORG DS    0H\n         TM    JFCDSRG1,JFCORGDA   IS DSORG DA?\n         BO    DATYPE              ..YES, GO PROCESS IT\n         B     SPACE               GO CHECK PRIMARY ALLOCATION\n         SPACE 2\nDATYPE   DS    0H\n         MVC   JFCBSQTY,ZEROS      MAKE SECONDARY QAUNTITY ZERO FOR DA\n         SPACE 2\nSPACE    DS    0H\n         CLC   JFCBSQTY,ZEROS      IS THERE SECONDARY ALLOCATION?\n         BE    CHKTYPE             ..NO, DONT TURN ON RELEASE FLAG\n         OI    JFCBIND1,JFCRLSE    TURN ON RELEASE FLAG\nCHKTYPE  DS    0H\n         TM    JFCBCTRI,JFCBCYL    IS ALLOCATION BY CYLINDERS?\n         BO    CYLINDER            ..YES, GO DO CHECKING FOR CYLINDERS?\n         TM    JFCBCTRI,JFCBTRK    IS ALLOCATION BY TRACKS?\n         BO    TRACKS              ..YES, GO DO CHECKING FOR TRACKS?\n         TM    JFCBCTRI,JFCBAVR    IS ALLOCATION BY BLOCKS?\n         BO    BLOCKS              ..YES, GO DO CHECKING FOR BLOCKS?\n         B     RETURN0             DONT CHECK ANYTHING ELSE\n         SPACE 2\nCYLINDER DS    0H\n         CLC   JFCBPQTY,CYL5       IS PRIMARY CYLINDERS EQUAL TO 5?\n         BNE   CYLA                ..NO, GO DO NORMAL CHECKING\n         CLC   JFCBSQTY,CYL5       IS SECONDARY CYLINDERS EQUAL TO 5?\n         BNE   CYLA                ..NO, GO DO NORMAL CHECKING\n         XI    JFCBCTRI,JFCBCYL    TURN OFF ALLOCATION BY CYLINDERS\n         XI    JFCBCTRI,JFCBTRK    TURN ON ALLOCATION BY TRACKS\n         B     RETURN0             ALL DONE\nCYLA     DS    0H\n         MVC   JFCBSQTY,CYL1       MAKE EXTENT INFORMATION 1 CYL\n         CLC   JFCBPQTY,CYLNUM     IS NUMBER CYLINDERS MORE THAN MAX?\n         BNH   RETURN0             ..NO, ALLOW ALLOCATION\n         MVC   JFCBPQTY,CYLNUM     MORE IN MAX NUMBER OF CYLINDERS\n         MVC   JFCBSQTY,ZEROS      MAKE SECONDARY QAUNTITY ZERO\n         B     RETURN0             ALL DONE\n         SPACE 2\nTRACKS   DS    0H\n         MVC   JFCBSQTY,TRK15      FORCE EXTENT ALLOCATION TO 15TRKS\n         CLC   JFCBPQTY,TRK3380    IS NUMBER OF TRACKS MORE THAN MAX?\n         BNH   RETURN0             ..NO, ALLOW ALLOCATION\n         MVC   JFCBPQTY,TRK3380    MORE IN MAX NUMBER OF TRACKS\n         MVC   JFCBSQTY,ZEROS      MAKE SECONDARY QAUNTITY ZERO\n         B     RETURN0             ALL DONE\n         SPACE 2\nBLOCKS   DS    0H\n         L     R5,BYTES            GET MAX NUMBER OF BYTES\n         SR    R6,R6               CLEAR R6\n         ICM   R6,7,JFCBDRLH       GET BLOCK SIZE\n         LR    R8,R6               SAVE BLOCK SIZE FOR LATER\n         SR    R7,R7               CLEAR R7\n         ICM   R7,7,JFCBPQTY       GET NUMBER OF BLOCKS\n         MR    R6,R6               GET TOTAL NUMBER OF BYTES REQUESTED\n         CR    R7,R5               IS AMOUNT TOO BIG?\n         BL    RETURN0             ..NO, ALLOW REQUEST\n         LR    R6,R5               GET MAX NUMBER OF BYTES\n         SRDA  R6,32               SHIFT IT FOR DIVIDE\n         DR    R6,R8               DIVIDE MAX BYTES BY BLOCK SIZE\n         STCM  R7,7,JFCBPQTY       MORE IN MAX NUMBER OF BLOCKS\n         MVC   JFCBSQTY,ZEROS      MAKE SECONDARY QAUNTITY ZERO\n         B     RETURN0             ALL DONE\n         EJECT\nVSAMTSO  DS    0H\n         CLC   JFCBDSNM(1),DOLLAR  IS IT A TSO TYPE DATASET?\n         BNER  R11                 ..NO, RETURN TO NORMAL PROCESSING\n         TM    JFCDSRG2,JFCORGAM   IS DSORG VSAM?\n         BO    RETURN8             ..YES, DO NOT ALLOW VSAM\n         TM    JFCDSRG1,JFCORGIS   IS DSORG ISAM?\n         BO    RETURN8             ..YES, DO NOT ALLOW ISAM\n         BR    R11                 GO DO NORMAL PROCESSING\n         EJECT\nCHKMSS   DS    0H\n         CLC   JFCBDSNM(8),HSM     IS IT AN HSM RECALL DATASET?\n         BE    RETURN0             ..YES, DONT DO ANYTHING\n         CLC   JFCBDSNM(4),SYS1    IS IT SYS1?\n         BE    RETURN0             ..YES, DONT DO ANYTHING\n         CLC   JFCBSQTY,ZEROS      IS THERE SECONDARY ALLOCATION?\n         BE    CHKMSSA             ..NO, DONT TURN ON RELEASE FLAG\n         OI    JFCBIND1,JFCRLSE    TURN ON RELEASE FLAG\n         SPACE 2\nCHKMSSA  DS    0H\n         TM    JFCBCTRI,JFCBCYL    IS ALLOCATION BY CYLINDERS?\n         BO    MSSCYLA             ..YES, GO DO CHECKING FOR CYLINDERS?\n         TM    JFCBCTRI,JFCBTRK    IS ALLOCATION BY TRACKS?\n         BO    MSSTRKS             ..YES, GO DO CHECKING FOR TRACKS?\n         TM    JFCBCTRI,JFCBAVR    IS ALLOCATION BY BLOCKS?\n         BO    MSSBLKS             ..YES, GO DO CHECKING FOR BLOCKS?\n         B     RETURN0             DONT CHECK ANYTHING ELSE\n         SPACE 2\nMSSCYLA  DS    0H\n         CLC   JFCBPQTY,CYL5       IS PRIMARY CYLINDERS EQUAL TO 5?\n         BNE   MSSCYLB             ..NO, GO DO NORMAL CHECKING\n         CLC   JFCBSQTY,CYL5       IS SECONDARY CYLINDERS EQUAL TO 5?\n         BNE   MSSCYLB             ..NO, GO DO NORMAL CHECKING\n         XI    JFCBCTRI,JFCBCYL    TURN OFF ALLOCATION BY CYLINDERS\n         XI    JFCBCTRI,JFCBTRK    TURN ON ALLOCATION BY TRACKS\n         B     RETURN0             ALL DONE\nMSSCYLB  DS    0H\n         CLC   JFCBPQTY,MSSCYL     IS NUMBER CYLINDERS MORE THAN MAX?\n         BNH   RETURN0             ..NO, ALLOW ALLOCATION\n         MVC   JFCBPQTY,MSSCYL     MORE IN MAX NUMBER OF CYLINDERS\n         MVC   JFCBSQTY,ZEROS      MAKE SECONDARY QAUNTITY ZERO\n         B     RETURN0             ALL DONE\n         SPACE 2\nMSSTRKS  DS    0H\n         CLC   JFCBPQTY,MSSTRK     IS NUMBER OF TRACKS MORE THAN MAX?\n         BNH   RETURN0             ..NO, ALLOW ALLOCATION\n         MVC   JFCBPQTY,MSSTRK     MORE IN MAX NUMBER OF TRACKS\n         MVC   JFCBSQTY,ZEROS      MAKE SECONDARY QAUNTITY ZERO\n         B     RETURN0             ALL DONE\n         SPACE 2\nMSSBLKS  DS    0H\n         L     R5,MSSBYTES         GET MAX NUMBER OF BYTES\n         SR    R6,R6               CLEAR R6\n         ICM   R6,7,JFCBDRLH       GET BLOCK SIZE\n         LR    R8,R6               SAVE BLOCK SIZE FOR LATER\n         SR    R7,R7               CLEAR R7\n         ICM   R7,7,JFCBPQTY       GET NUMBER OF BLOCKS\n         MR    R6,R6               GET TOTAL NUMBER OF BYTES REQUESTED\n         CR    R7,R5               IS AMOUNT TOO BIG?\n         BL    RETURN0             ..NO, ALLOW REQUEST\n         LR    R6,R5               GET MAX NUMBER OF BYTES\n         SRDA  R6,32               SHIFT IT FOR DIVIDE\n         DR    R6,R8               DIVIDE MAX BYTES BY BLOCK SIZE\n         STCM  R7,7,JFCBPQTY       MORE IN MAX NUMBER OF BLOCKS\n         MVC   JFCBSQTY,ZEROS      MAKE SECONDARY QAUNTITY ZERO\n         B     RETURN0             ALL DONE\n         EJECT\nCHKEXTA  DS    0H\n         CLC   JFCBDSNM(8),HSM     IS IT AN HSM RECALL DATASET?\n         BE    RETURN0             ..YES, DONT DO ANYTHING\n         CLC   JFCBDSNM(4),SYS1    IS IT SYS1?\n         BE    RETURN0             ..YES, DONT DO ANYTHING\n         TM    JFCDSRG1,JFCORGIS   IS DSORG ISAM?\n         BO    RETURN0             ..YES, DONT DO ANYTHING\n         SR    R6,R6               CLEAR R6\n         SR    R7,R7               CLEAR R7\n         CLC   UCBVOLI(3),MSSVOL   IS IT A MSS PACK?\n         BE    CHKEXTB             ..YES, GO PROCESS IT\n         CLC   UCBVOLI(4),TSO8XX   IS IT A TSO PACK?\n         BNE   RETURN0             ..NO, ALL DONE\n         ICM   R7,7,TRK3380        GET MAX ALLOCATION FOR TSO\n         B     CHKEXTC             GO PROCESS DEB INFO\n         SPACE 2\nCHKEXTB  DS    0H\n         ICM   R7,7,MSSTRK         GET MAX ALLOCATION FOR MSS\n         SPACE 2\nCHKEXTC  DS    0H\n         L     R9,IEXPTR2          GET POINTER TO DEB\n         USING DEB,R9              SET ADDRESABILITY\n         SR    R5,R5               CLEAR R5\n         ICM   R5,1,16(R9)         GET NUMBER OF EXTENTS\n         LA    R9,32(R9)           BUMP PAST BASIC SECTION TO DASD\n         DROP  R9                  DROP ADDRESSABILITY\n         USING DEBDASD,R9          SET ADDRESABILITY\n         SPACE 2\nCHKEXTD  DS    0H\n         AH    R6,DEBNMTRK         ADD NUMBER OF TRACKS FOR THIS EXTENT\n         CR    R6,R7               IS ALLOCATION OVER THE MAX?\n         BH    RETURN8             ..YES, DO NOT ALLOW ANY MORE EXTENTS\n         LA    R9,16(R9)           BUMP TO NEXT EXTENT SECTION\n         BCT   R5,CHKEXTD          LOOP THROUGH ALL EXTENTS\n         SPACE 2\nRETURN0  DS    0H\n         RETURN (14,12),RC=0       RETURN - EVERYTHING OK\nRETURN4  DS    0H\n         RETURN (14,12),RC=4       RETURN - NOT ALLOWED ON THIS VOLUME\nRETURN8  DS    0H\n         RETURN (14,12),RC=8       RETURN - NOT ALLOWED ON ANY VOLUME\n         EJECT\n         LTORG\nZEROS    DC    X'00000000'         HEX ZEROES\nTSO8XX   DC    C'TSO8'             VOLSER TSO8XX\nWRKXXX   DC    C'WRKXXX'           WORK PACK\nMSSVOL   DC    C'MWKXXX'           MSS PACK\nMPRXXX   DC    C'MPRXXX'           PROD PACK\nPROD     DC    C'PROD'             PRODUCTION WORK DATASET\nHSM      DC    C'HSM.MDB.'         HSM RECALL DATASET NAME\nSYS1     DC    C'SYS1'             SYS1 DATASET\nVS01     DC    C'VS01'             VS01 DATASET\nVSW1     DC    C'VSW1'             VSW1 DATASET\nDCWT     DC    C'DCWT'             DCWT DATASET\n$WC3     DC    C'$WC3'             HSS DATASET\n$WC4     DC    C'$WC4'             PC DATASET\nDOLLAR   DC    C'$'                TSO DSN MUST START WITH $\nCYL5     DC    X'000005'           SPACE OF 5 CYLINDERS\nCYL1     DC    X'000001'           SPACE OF 1 CYLINDER FOR EXTENT INFO\nCYLNUM   DC    X'00000A'           SPACE OF 10 CYLINDERS\nBLKNUM   DC    X'0003E8'           SPACE OF 1000 BLOCKS\nTRK15    DC    X'00000F'           SPACE OF 15 TRACKS FOR EXTENT INFO\nTRK3380  DC    X'000096'           SPACE OF 150 TRACKS\nBYTES    DC    F'6000000'          6 MEGA BYTES\nMSSCYL   DC    X'000032'           SPACE OF 50 CYLINDERS\nMSSTRK   DC    X'0002EE'           SPACE OF 750 TRACKS\nMSSBYTES DC    F'35000000'         35 MEGA BYTES\n         EJECT\nIGGIEPL  IECIEXPL                  PARAMETER LIST MAP IEPL\n         EJECT\nIGGJFCB  DSECT\n         IEFJFCBN LIST=YES         JFCB DSECT\n         EJECT\nIGGUCB   DSECT\n         IEFUCBOB LIST=NO          UCB DSECT\n         EJECT\n         IEZDEB LIST=YES           DEB DSECT\n         END   IGGPRE00\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADPW009": {"ttr": 6157, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(ADPW009) /* ADD DFDS DASD EXIT ROUTINE\n\n      FOR ALL ALLOCATIONS AND EXTENDS THIS EXIT WILL FREE THE\n      MODEL FORMAT1 DSCB GETMAINED BY THE PRE-ALLOCATION EXIT.\n                                                                 */ .\n++ VER(Z038) FMID(HDP2230) .\n++ JCLIN .\n//GEN49 JOB Y51024509,'531-0 CM SINGER'\n//SG21  EXEC LINKS,\n// PARM='XREF,LET,LIST,RENT',\n//    UNIT='3350',SER=IPLXXX,N=SYS1,NAME=LPALIB,P1=' ',\n//    MOD=,P2=' ',CLASS=T\n//LK.SYSPUNCH DD DUMMY\n//INCLUDE DD DSN=MVS3.INCLUDE,DISP=SHR\n//SYSLIN DD *\n INCLUDE INCLUDE(IGGPOST0)\n NAME IGGPOST0(R)\n/*\n++ SRC(IGGPOST0) DISTLIB(ASRCLIB) .\nIGGPOST0 TITLE '*** DFDS POSTPROCESSING EXIT *** IGGPOST0'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ROUTINE NAME - IGGPOST0                                            *\n*          DATE - 17 APRIL 1987                                       *\n*          R.C. CREWS                                                 *\n*          GENERAL DYNAMICS - DATA SYSTEMS DIVISION                   *\n*          P.O. BOX 85808                                             *\n*          SAN DIEGO, CALIFORNIA 92138                                *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 4\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nIGGPOST0 CSECT\n         SAVE  (14,12),,*          SAVE FOR RETURN\n         LR    R10,R15             COPY BASE REGISTER\n         USING IGGPOST0,R10        SET ADDRESABILITY\n         LR    R2,R1               GET POINTER TO PARAMETER LIST\n         USING IGGIEPL,R2          POINT AT PARAMETER LIST\n*\n         TM    IEXFLAG,IEXVIO      IS IT VIO DATASET?\n         BO    RETURN0             ..YES, DONT DO ANYTHING\n         CLI   IEXFUNC,IEXALL      IS THIS ALLOCATE\n         BE    GETDATE             ..YES - DATE STAMP\n         CLI   IEXFUNC,IEXEXT      IS THIS EXTEND\n         BNE   RETURN0             ..NO, DONT DO ANYTHING\n*\nGETDATE  L     R3,IEXRSVWD         GET ADDRESS\n         LTR   R3,R3               ANY THING THERE?\n         BZ    RETURN0             NO\n         XC    IEXRSVWD(4),IEXRSVWD CLEAR RESERVED WORD\n         LA    R4,96               LENGTH\n      FREEMAIN R,LV=(R4),A=(R3)    FREEMAIN\n*\nRETURN0  DS    0H\n         RETURN (14,12),RC=0       RETURN - EVERYTHING OK\n*\n         LTORG\n         EJECT\nIGGIEPL  IECIEXPL                  PARAMETER LIST MAP IEPL\n         END   IGGPOST0\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADVW001": {"ttr": 6401, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD(ADVW001)  /* INSTALLS SPF COMMAND TO FRONT-END ISPF/PDF\n                                                   */ .\n++VER(Z038) FMID(HDV2302) .\n++JCLIN .\n//ADVW001  JOB WC07N0323,'THOMPSON - HSS'\n//ADVW001  EXEC LINKS,PARM='MAP,LET,LIST,RENT,REUS,NCAL'\n//SYSLMOD  DD DSN=SYS1.ISR.V2R3M0.ISRLOAD,DISP=SHR\n//AISRMOD1 DD DISP=SHR,DSNAME=SYS1.AISRMOD1,DISP=SHR\n//SYSLIN   DD *\n  ORDER ISRPCP\n  INCLUDE AISRMOD1(ISRPCP)\n  INCLUDE AISRMOD1(SPF)\n  MODE AMODE(31),RMODE(24)\n  ALIAS ISPF\n  ALIAS PDF\n  ENTRY SPF\n  NAME SPF(R)\n++SRC(SPF) DISTLIB(ASRCLIB)  .\n         TITLE 'SPF - FRONTEND FOR ISPF/PDF'\n**       PRINT NOGEN\n**********************************************************************\n***               SPF (ALIAS PDF,ISPF) COMMAND                     ***\n***   DESC:                                                        ***\n***     THIS COMMAND IS A FRONTEND FOR ISPF/PDF.                   ***\n***                                                                ***\n***   FORMAT:                                                      ***\n***        SPF  OPTION  TEST/TESTX/TRACE/TRACEX                    ***\n***                                                                ***\n***   FUNCTION:                                                    ***\n***                                                                ***\n***     SPF FIRST FREES DD(ISPPROF), THEN TRIES TO ALLOCATE        ***\n***     DD(ISPPROF) TO DSN('&SYSPREF..ISPF.PROFILE') WITH          ***\n***     DISP=(OLD,KEEP,KEEP).  IF IT CANNOT ALLOCATE BECAUSE OF    ***\n***     LOCATE ERROR 1708 (NOT FOUND IN CATALOG), IT ALLOCATES THE ***\n***     DATASET WITH DISP=(NEW,CATLG,CATLG), UNIT=SYSTSO,          ***\n***     DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PO),             ***\n***     SPACE=(TRK,(1,2,10)).  FOR ANY OTHER ALLOCATION ERROR      ***\n***     CODE, THE PROGRAM TERMINATES AND GIVES THE NORMAL IKJEFF18 ***\n***     ERROR MESSAGES.                                            ***\n***                                                                ***\n***     SPF MAKES A NEW COPY OF THE COMMAND BUFFER (CBUF) AND THE  ***\n***     COMMAND PROCESSOR PARAMETER LIST (CPPL), POINTING THE NEW  ***\n***     CPPL TO THE NEW CBUF.  SPF THEN PLACES THE LITERAL         ***\n***     'ISP' INTO THE NEW CBUF BEGINNING AT THE LOCATION OF THE   ***\n***     FIRST NONBLANK CHARACTER OF THE COMMAND TEXT.              ***\n***                                                                ***\n***     SPF THEN POINTS R1 TO THE NEW CPPL, AND ATTACHES ISRPCP.   ***\n***     IT THEN WAITS FOR ISRPCP TO COMPLETE, DETACHES ISRPCP,     ***\n***     FREES STORAGE AND TERMINATES.                              ***\n***                                                                ***\n***   RETURN CODES:                                                ***\n***     IF ISP EXECUTES, THE CODE RETURNED IS THE CODE FROM ISP.   ***\n***     OTHERWISE THE RETURN CODE IS 12.                           ***\n***                                                                ***\n***   REGISTER USAGE:                                              ***\n***     R0-R3    - USED BY MACROS                                  ***\n***     R4-R5    - WORK REGISTERS                                  ***\n***     R6-R9    - (UNUSED)                                        ***\n***     R10      - LINKAGE REGISTER USED WITH BAL                  ***\n***     R11      - BASE OF SP0A1 WORK AREA IN SP-000               ***\n***     R12      - BASE REGISTER FOR PROGRAM SPF                   ***\n***     R13      - BASE REGISTER FOR AREA OBTAINED IN LINKSAVE,    ***\n***                AREA BEGINS WITH REGISTER SAVE AREA             ***\n***     R14      - USED BY MACROS                                  ***\n***     R15      - USED BY MACROS, RETURN CODE AT END              ***\n***                                                                ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***   MACROS:                                                      ***\n***                                                                ***\n***     IBM:                                                       ***\n***       IKJUPT    - MAP OF THE USER PROFILE TABLE                ***\n***       IKJCPPL   - MAP OF THE COMMAND PROCESSOR PARM LIST       ***\n***       IEFZB4D0  - MAP OF SVC-99 CONTROL BLOCKS                 ***\n***       IKJEFFDF  - MAP OF IKJEFF18 (DAIRFAIL) CONTROL BLOCKS    ***\n***       ATTACH    - ATTACH A COMMAND                             ***\n***       WAIT      - WAIT FOR AN ECB TO BE POSTED                 ***\n***       DETACH    - DETACH A COMMAND                             ***\n***       GETMAIN   - GET STORAGE IN SUBPOOL 0                     ***\n***       FREEMAIN  - FREE STORAGE IN SUBPOOL 0                    ***\n***       TPUT      - WRITE TO THE TERMINAL                        ***\n***       TGET      - READ FROM THE TERMINAL                       ***\n***                                                                ***\n***     GTEL:                                                      ***\n***       LINKSAVE  - LINKAGE CONVENTIONS UPON ENTRY, AND OBTAIN   ***\n***                   A SMALL AMOUNT OF WORKING STORAGE.           ***\n***       EQ$R      - REGISTER EQUATES                             ***\n***       LINKBACK  - THE OPPOSITE OF LINKSAVE                     ***\n***       GTEDADAT  - CREATE SVC-99 AND IKJEFF18 CONTROL BLOCKS    ***\n***       GTEDASET  - INITIALIZE SVC-99 AND IKJEFF18 CONTROL BLKS  ***\n***       GTEDAALC  - EXECUTE SVC-99 AND IKJEFF18                  ***\n***                                                                ***\n***   ASSEMBLER OPTIONS:      RENT                                 ***\n***   LINKAGE EDITOR OPTIONS: RENT, REUS                           ***\n***                                                                ***\n***   CULPRIT:                                                     ***\n***     CHUCK HOFFMAN, SYSTEMS PROGRAMMING,                        ***\n***     GTE LABORATORIES TECHNICAL COMPUTING CENTER,               ***\n***     WALTHAM, MASSACHUSETTS.  617/466-2131.  12/29/82           ***\n***                                                                ***\n***   MAINTENANCE HISTORY:                                         ***\n***                                                                ***\n***   GENERAL DYNAMICS:                                            ***\n***     FLOYD THOMPSON, SYSTEMS PROGRAMMING,                       ***\n***     CHANGED FROM ATTACH TO LINK FOR ISRPCP                     ***\n**********************************************************************\n         EJECT\n**********************************************************************\n***                                                                ***\n***          MAINLINE                                              ***\n***                                                                ***\n**********************************************************************\n*\nSPF      LINKSAVE BASE=12,GETMAIN=YES   LINKAGES PLUS A LITTLE STORAGE\n         EQ$R                           REGISTER EQUATES\n         USING SP0A0,R13                R13 BASE OF GETMAIN AREA\n         ST    R1,CPPLADR               SAVE ADDRESS OF CPPL\n*\n         BAL   R10,GETSTRGE             GET MORE STORAGE\n         USING SP0A1,R11                R11 BASE OF NEW AREA\n*\n         BAL   R10,CHNGECMD             CREATE ISP COMMAND FROM INPUT\n*\n         BAL   R10,BILDSN               BILD DSN &SYSPREF..ISPF.PROFILE\n*\n         BAL   R10,OLDALLOC                     ALLOCATE DATASET OLD\n         CLC   RETCDE,HWZERO                    IF OKAY\n         BE    ISP                                GO TO PERFORM ISPF\n         LA    R4,OLDRB                         ELSE\n         CLC   (S99ERROR-S99RB)(2,R4),LOCERR08  IF NOT 'NOT IN CATLG'\n         BNE   RETCDE12                           BRANCH TO END OF PGM\n*\n         BAL   R10,NEWALLOC                     ELSE ALLOCATE NEW\n         CLC   RETCDE,HWZERO                    IF NOT OKAY\n         BNE   RETCDE12                           BRANCH TO END OF PGM\n*\nISP      BAL   R10,ATTCHISP             PERFORM ISPF PROCEDURE\n         B     ENDING                   GO TO ENDING\n*\nRETCDE12 MVC   COMPCDE(4),FW12          IF BAD ALLOCATION, SET RC=12\n*\nENDING   FREEMAIN R,LV=SP0A1LEN,A=(11)  FREE MAIN STORAGE\n         L     R15,COMPCDE              LOAD COMPLETION CODE TO R15\n         LINKBACK                       RETURN TO CALLER\n         EJECT\n**********************************************************************\n***                                                                ***\n***  GET MAIN STORAGE FOR WORK AREA.                               ***\n***                                                                ***\n**********************************************************************\nGETSTRGE ST    R10,GER10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         GETMAIN R,LV=SP0A1LEN        , GET MAIN STORAGE\n         LR    R11,R1                   R11 POINTS TO NEW AREA\n*\nGEEND    L     R10,GER10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***   CREATE NEW ISP COMMAND BUFFER FROM OLD SPF COMMAND           ***\n***                                                                ***\n**********************************************************************\nCHNGECMD ST    R10,CHR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R4,CPPLADR               R4 POINTS TO CPPL\n         MVC   NCPPL(16),0(R4)          COPY CPPL TO NEW CPPL\n         LA    R4,NCPPL                 SAVE ADDR OF\n         ST    R4,NCPPLADR                OF NEW CPPL\n         LA    R4,NCBUF                 PLACE ADDR OF NEW CMMD\n         ST    R4,NCPPL+(CPPLCBUF-CPPL)   INTO NEW CPPL\n*\n         L     R4,CPPLADR               R4 POINTS TO CPPL\n         L     R4,(CPPLCBUF-CPPL)(0,R4) R4 POINTS TO OLD CBUF\n         LH    R5,0(0,R4)               R5 IS LEN OF OLD CBUF\n         BCTR  R5,0                       MINUS ONE FOR EXEC\n         EX    R5,CHMVC1                MOVE OLD BUFFER TO NEW\n*\n         LA    R4,NCBUFTXT-1            R4 PNTS 1 CHAR BEFORE NCBUFTXT\nCHLOOP1  LA    R4,1(0,R4)               R4 POINTS TO NEXT CHAR IN TEXT\n         CLI   0(R4),X'40'              IF BLANK,\n         BE    CHLOOP1                    STAY IN LOOP\n         MVC   0(3,R4),CHISP            MOVE 'ISP' OVER 'PDF' OR 'SPF'\n*\nCHEND    L     R10,CHR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n*\nCHMVC1   MVC   NCBUF(0),0(R4)           MOVE OLD BUFFER TO NEW\n         EJECT\n**********************************************************************\n***                                                                ***\n***   BUILD DATASET NAME '&SYSPREF..ISPF.PROFILE'                  ***\n***                                                                ***\n**********************************************************************\nBILDSN   ST    R10,BIR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   PROFDSN(44),BLANK44      CLEAR DSN FIELD\n         XR    R4,R4                    CLEAR R4 FOR IC\n         L     R5,CPPLADR               ADDR OF CPPL TO R5\n         L     R5,(CPPLUPT-CPPL)(0,R5)  R5 POINTS TO UPT\n         IC    R4,(UPTPREFL-UPT)(0,R5)  R4 IS LENGTH OF PREFIX\n         BCTR  R4,0                       MINUS ONE FOR EXEC\n         EX    R4,BIMVC1                MOVE &SYSPREF TO PROFILE DSN\n*\n         LA    R5,PROFDSN               R5 IS ADDR OF PROFILE DSN\n         AR    R5,R4                    R5 IS ADDR OF LAST CHAR OF PREF\n         MVI   1(R5),C'.'               PUT DOT INTO NAME\n         MVC   2(12,R5),LOWDSN          MOVE LOW END OF DSN TO NAME\n*\n         LA    R4,14(0,R4)              R4 IS LENGTH OF PROFILE DSN\n         STH   R4,PROFDSLN              SAVE THE LENGTH\n*\nBIEND    L     R10,BIR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n*\n*\nBIMVC1   MVC   PROFDSN(0),(UPTPREFX-UPT)(R5)  MOVE &SYSPREF TO PROF DSN\n         EJECT\n**********************************************************************\n***                                                                ***\n*** TRY TO ALLOCATE '&SYSPREF..ISPF.PROFILE'  DISP=(OLD,KEEP,KEEP) ***\n***                                                                ***\n**********************************************************************\nOLDALLOC ST    R10,OLR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         MVC   FRE(@FRLEN),@FR          COPY DATA TO WORK AREA\n         GTEDASET FRE,CPPLPTR=NCPPLADR  INITIALIZE WORK DATA\n         GTEDAALC FRE,VERB=UN           FREE DD(ISPPROF)\n*\n         MVC   OLD(@OLLEN),@OL          COPY DATA TO WORK AREA\n         GTEDASET OLD,CPPLPTR=NCPPLADR  INITIALIZE WORK DATA\n         MVC   OLDDSNAM(44),PROFDSN     MOVE DSN TO WORK DATA\n         GTEDAALC OLD,VERB=AL,ERRMSG=NO TRY TO ALLOCATE OLD (NOMSG)\n         MVC   RETCDE(2),OLDS99RC+2     MOVE SVC-99 RC TO PROC RETCDE\n*\nOLEND    L     R10,OLR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n*** TRY TO ALLOCATE '&SYSPREF..ISPF.PROFILE' DISP=(NEW,CATLG,CATLG)***\n***                                                                ***\n**********************************************************************\nNEWALLOC ST    R10,NER10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         GTEDAALC FRE,VERB=UN           FREE DD(ISPPROF)\n*\n         MVC   NEW(256),@NE             COPY DATA TO WORK AREA\n         MVC   NEW+256(@NELEN-256),@NE+256 COPY THE REST OF IT\n         GTEDASET NEW,CPPLPTR=NCPPLADR  INITIALIZE WORK DATA\n         MVC   NEWDSNAM(44),PROFDSN     MOVE DSN TO WORK DATA\n         GTEDAALC NEW,VERB=AL           TRY TO ALLOCATE NEW\n         MVC   RETCDE(2),NEWS99RC+2     MOVE SVC-99 RC TO PROC RETCDE\n*\nNEEND    L     R10,NER10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***                                                                ***\n***     ATTACH ISRPCP COMMAND PROCESSOR                            ***\n***                                                                ***\n**********************************************************************\nATTCHISP ST    R10,ATR10SAV             SAVE RETURN ADDRESS\n         XC    RETCDE,RETCDE            SET ERROR CODE TO ZERO\n*\n         L     R1,NCPPLADR              LOAD POINTER TO NEW CPPL\n         L     R15,=V(ISRPCP)           GET ISRPCP ADDRESS\n         BALR  R14,R15                  OFF TO ISPF\n*        LINK   EP=ISRPCP               LINK TO SPF ISRPCP\n*        ST    R15,COMPCDE              SAVE COMPLETION CODE\n*        ATTACH EP=ISRPCP,              ATTACH ISRPCP                  X\n               ECB=ISPECB,                                             X\n               SHSPV=78,                                               X\n               SF=(E,LISTATT)\n*        ST    R1,ISPTCBAD              SAVE TCB ADDRESS\n*        WAIT  ECB=ISPECB             , WAIT FOR ISPF TO COMPLETE\n*        ST    R15,COMPCDE              SAVE COMPLETION CODE\n*        DETACH ISPTCBAD              , DETACH ISPF\n*\nATEND    L     R10,ATR10SAV             RESTORE RETURN ADDRESS\n         BR    R10                      RETURN\n         EJECT\n**********************************************************************\n***      DATA CONSTANTS                                            ***\n**********************************************************************\nCONSTNTS DS    0F\nBLANK44  DC    CL44' '                  CLEAR DSN\nLOWDSN   DC    CL12'ISPF.PROFILE'       LOWER END OF DSN\n@FR      GTEDADAT DDNAM=ISPPROF,UNALC=YES\n@OL      GTEDADAT DDNAM=ISPPROF,DSNAM=00,STATS=OLD,NDISP=KEEP,         X\n               CDISP=KEEP,CNVRT=YES\n@NE      GTEDADAT DDNAM=ISPPROF,DSNAM=00,STATS=NEW,NDISP=CATLG,        X\n               CDISP=CATLG,CNVRT=YES,TRK=YES,PRIME=1,SECND=2,DIR=10,   X\n               UNIT=SYSTSO,BLKSZ=3120,DSORG=PO,LRECL=80,               X\n               RECFM=FB\nCHISP    DC    CL3'ISP'                 NEW COMMAND NAME\nHWZERO   DC    H'0'                     ZERO ERROR CODE\nLOCERR08 DC    X'1708'                  LOCATE ERR CODE 08 (NOT CATLG)\nFW12     DC    F'12'                    COMPLETION CODE 12\n         EJECT\n**********************************************************************\n***     AREA OBTAINED WITH LINKSAVE GETMAIN=YES,  ADDRESSED BY R13 ***\n**********************************************************************\nSP0A0    DSECT\nMYSAVE   DS    18F                      REGISTER SAVE AREA\nCPPLADR DS     F                        ADDRESS OF CPPL\nGER10SAV DS    F                        RETURN ADDR SAVE AREA\nCOMPCDE  DS    F                        FINAL COMPLETION CODE\nRETCDE   DS    H                        RETURN CODE FROM PROC BLOCKS\n         DS    CL50                     UNUSED\n         EJECT\n**********************************************************************\n***      WORK STORAGE AREA, ADDRESSED BY R11                       ***\n**********************************************************************\nSP0A1    DSECT\n         DS    0D\nNCBUF    DS    0CL255                   NEW COMMAND BUFFER\nNCBUFLN  DS    H                          LENGTH\nNCBUFOFF DS    H                          OFFSET\nNCBUFTXT DS    CL251                      TEXT\nNCPPLADR DS    A\nNCPPL    DS    4F                       NEW COMMAND CPPL\nLISTATT  ATTACH EP=ISRPCP,ECB=ISPECB,SHSPV=78,SF=L  ATTACH LIST\nISPECB   DS    F                        ECB FOR ATTACHED ISPF\nISPTCBAD DS    F                        ISPF TCB ADDRESS\nCHR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nBIR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nOLR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nNER10SAV DS    F                        RETURN ADDRESS SAVE AREA\nATR10SAV DS    F                        RETURN ADDRESS SAVE AREA\nPROFDSLN DS    H                        LENGTH OF DSN OF PROFILE DS\nPROFDSN  DS    CL44                     DSN OF PROFILE DATASET\nFRE      GTEDADAT DDNAM=ISPPROF,UNALC=YES,MAP=ONLY\nOLD      GTEDADAT DDNAM=ISPPROF,DSNAM=00,STATS=OLD,NDISP=KEEP,         X\n               CDISP=KEEP,CNVRT=YES,MAP=ONLY\nNEW      GTEDADAT DDNAM=ISPPROF,DSNAM=00,STATS=NEW,NDISP=CATLG,        X\n               CDISP=CATLG,CNVRT=YES,TRK=YES,PRIME=1,SECND=2,DIR=10,   X\n               UNIT=SYSTSO,BLKSZ=3120,DSORG=PO,LRECL=80,               X\n               RECFM=FB,MAP=ONLY\nSP0A1END DS    0D                       D/W BOUNDRY FOR GETMAIN\nSP0A1LEN EQU   SP0A1END-SP0A1           EQUATE FOR LENGTH\n         EJECT\n**********************************************************************\n***      MAPPING DSECTS                                            ***\n**********************************************************************\n         PRINT NOGEN\n         SPACE 3\nUPT      IKJUPT                         USER PROFILE TABLE\n         SPACE 3\nCPPL     IKJCPPL                        COMMAND PROCESSOR PARM LIST\n         SPACE 3\n         IEFZB4D0\n         SPACE 3\n         IKJEFFDF DFDSECT=YES,DFDSEC2=YES\n         END\n++MAC(EQ$R) DISTLIB(ISPAMAC) SYSLIB(ISPMACS) .\n         MACRO\n         EQ$R\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         MEND\n++MAC(LINKSAVE) DISTLIB(ISPAMAC) SYSLIB(ISPMACS) .\n         MACRO\n&CSNAME  LINKSAVE &BASE=,&GETMAIN=NO\n.*********************************************************************\n.*  MACRO FOR STANDARD LINKAGE CONVENTIONS AT PROGRAM ENTRY.       ***\n.*  USED IN CONJUNCTION WITH THE LINKBACK MACRO.                   ***\n.*                                                                 ***\n.*  BASE=NN     REGISTER NUMBER OF BASE REGISTER.                  ***\n.*                                                                 ***\n.*  GETMAIN=YES WILL DO A GETMAIN FOR STORAGE SPACE.  SPACE        ***\n.*              OBTAINED WILL BE 72 BYTES FOR SAVE AREA, PLUS      ***\n.*              64 BYTES FOR PROGRAMMER'S USE.  R13 WILL BE        ***\n.*              THE BASE ADDRESS OF THE STORAGE AREA.              ***\n.*                                                                 ***\n.*  CHUCK HOFFMAN, SYSTEMS PROGRAMMING, GTEL COMPUTING CENTER      ***\n.*********************************************************************\n         GBLC  &GMN\n         LCLA  &C,&D\n&GMN     SETC  '&GETMAIN'\n         AIF   ('&GMN' EQ 'YES').FORM2\n&CSNAME  CSECT\n&C       SETA  K'&CSNAME\n&D       SETA  ((20+&C)/2)*2\n         B     &D.(0,15)                BRANCH AROUND ID\n         DC    AL1(&C)                    LENGTH\n         DC    CL&C'&CSNAME'              ID\n         DC    CL8'&SYSDATE'              SYSTEM DATE:  MM/DD/YY\n         DC    CL6' &SYSTIME'             SYSTEM TIME:  HH.MM\n         STM   14,12,12(13)             SAVE R0-R12, R14-R15\n         LR    &BASE,15                 LOAD BASE ADDRESS\n         USING &CSNAME,&BASE            ASSIGN BASE REGISTER\n         ST    13,MYSV&SYSNDX+4         STORE ADDR OF PREV SAVE AREA\n*                                         INTO MY SAVE AREA\n         LA    14,MYSV&SYSNDX           LOAD ADDR OF MY SAVE AREA\n         ST    14,8(0,13)                 STORE IT INTO PREV SAVE AREA\n         LR    13,14                      ALSO LOAD IT INTO R13\n         B     MYSV&SYSNDX+72           BRANCH AROUND MY SAVE AREA\nMYSV&SYSNDX DC 18F'0'                   MY SAVE AREA\n         MEXIT\n.FORM2   ANOP\n&CSNAME  CSECT\n&C       SETA  K'&CSNAME\n&D       SETA  ((20+&C)/2)*2\n         B     &D.(0,15)                BRANCH AROUND ID\n         DC    AL1(&C)                    LENGTH\n         DC    CL&C'&CSNAME'              ID\n         DC    CL8'&SYSDATE'              SYSTEM DATE:  MM/DD/YY\n         DC    CL6' &SYSTIME'             SYSTEM TIME:  HH.MM\n         STM   14,12,12(13)             SAVE R0-R12, R14-R15\n         LR    &BASE,15                 LOAD BASE ADDRESS\n         USING &CSNAME,&BASE            ASSIGN BASE REGISTER\n*        GETMAIN R,LV=136               GET STORAGE FOR S.A. + 64 BYTES\n         GETMAIN R,LV=136               GET STORAGE FOR S.A. + 64 BYTES\n         ST    13,4(0,1)                STORE ADDR OF PREV SAVE AREA\n*                                         INTO MY SAVE AREA\n         ST    1,8(0,13)                ADDR OF MY SA TO PREV SAVE AREA\n         LM    0,1,20(13)               RESTORE R0-R1 TO ORIGINAL VALUE\n         L     13,8(0,13)               POINT R13 TO MY SAVE AREA\n         MEND\n++MAC(LINKBACK) DISTLIB(ISPAMAC) SYSLIB(ISPMACS) .\n         MACRO\n&ENDNAME LINKBACK &RCADDR=\n.*********************************************************************\n.*  MACRO FOR STANDARD LINKAGE CONVENTIONS AT PROGRAM EXIT.        ***\n.*  USED IN CONJUNCTION WITH THE LINKSAVE MACRO.                   ***\n.*                                                                 ***\n.*  RCADDR=NAME   NAME OF FULLWORD RETURN CODE TO BE LOADED        ***\n.*                INTO R15.  IF THIS OPERAND IS NOT USED, THE      ***\n.*                RETURN CODE WILL BE THE VALUE CONTAINED IN R15   ***\n.*                JUST PRIOR TO ENTERING THE CODE GENERATED BY     ***\n.*                THIS MACRO.                                      ***\n.*                                                                 ***\n.* NOTE -                                                          ***\n.*  IF GETMAIN=YES WAS USED WITH LINKSAVE, THIS MACRO WILL         ***\n.*  FREEMAIN THE STORAGE AREA WHICH LINKSAVE GOTMAINED.            ***\n.*                                                                 ***\n.*  CHUCK HOFFMAN, SYSTEMS PROGRAMMING, GTEL COMPUTING CENTER      ***\n.*********************************************************************\n         GBLC  &GMN\n         LCLA  &RCLEN\n&RCLEN   SETA  K'&RCADDR               LENGTH OF NAME OF RETURN CODE\n         AIF ('&GMN' EQ 'YES').FORM2   IF LINKSAVE USED A GETMAIN, GO\n&ENDNAME L     13,4(0,13)              RESTORE R13 FROM MY SAVE AREA\n         AIF (&RCLEN EQ 0).FORM1A\n         L     15,&RCADDR              SET RETURN CODE\n.FORM1A  ANOP\n         LM    0,12,20(13)             RESTORE R0-12\n         L     14,12(0,13)             RESTORE R14\n         MVI   12(13),X'FF'            RETURN INDICATOR\n         BR    14                      RETURN TO CALLING PROGRAM\n         MEXIT\n.FORM2   ANOP\n&ENDNAME LR    1,13                    COPY MY SA ADDR FOR FREEMAIN\n         AIF (K'&RCADDR EQ 0).FORM2C\n         L     14,&RCADDR              SAVE RETURN CODE\n         AGO .FORM2A\n.FORM2C  LR    14,15                   SAVE RETURN CODE\n.FORM2A  ANOP\n         L     13,4(0,13)              RESTORE R13 FROM MY SAVE AREA\n*        FREEMAIN R,LV=136,A=(1)       FREE STORAGE\n         FREEMAIN R,LV=136,A=(1)       FREE STORAGE\n         LR    15,14                   SET RETURN ADDRESS\n.FORM2B  ANOP\n         LM    0,12,20(13)             RESTORE R0-12\n         L     14,12(0,13)             RESTORE R14\n         MVI   12(13),X'FF'            RETURN INDICATOR\n         BR    14                      RETURN TO CALLING PROGRAM\n         MEND\n++MAC(GTEDADAT) DISTLIB(ISPAMAC) SYSLIB(ISPMACS) .\n         MACRO\n&NM      GTEDADAT  &MAP=,&DDNAM=,&DSNAM=,&MEMBR=,&STATS=,              X\n               &NDISP=,&CDISP=,                                        X\n               &TRK=,&CYL=,&BLKLN=,&PRIME=,&SECND=,&DIR=,&RLSE=,       X\n               &SPFRM=,&ROUND=,&VLSER=,&PRIVT=,&VLSEQ=,&VLCNT=,        X\n               &VLRDS=,&UNIT=,&UNCNT=,&PARAL=,&SYSOU=,&SPGNM=,&SFMNO=, X\n               &OUTLM=,&CLOSE=,&COPYS=,&LABEL=,&DSSEQ=,&PASPR=,        X\n               &INOUT=,&EXPDT=,&RETPD=,&DUMMY=,&FCBIM=,&FCBAV=,        X\n               &QNAME=,&TERM=,&UCS=,&UFOLD=,&UVRFY=,&DCBDS=,&DCBDD=,   X\n               &SUSER=,&SHOLD=,&MSVGP=,&SSNM=,&PROT=,&BFALN=,&BFTEK=,  X\n               &BLKSZ=,&BUFIN=,&BUFL=,&BUFMX=,&BUFNO=,&BUFOF=,&BUFOU=, X\n               &BUFRQ=,&BUFSZ=,&CODE=,&CPRI=,&DEN=,&DSORG=,&EROPT=,    X\n               &GNCP=,&INTVL=,&KYLEN=,&LIMCT=,&LRECL=,&MODE=,&NCP=,    X\n               &OPTCD=,&PCIR=,&PCIS=,&PRTSP=,&RECFM=,&RSRVF=,&RSRVS=,  X\n               &SOWA=,&STACK=,&THRSH=,&TRTCH=,&IPLTX=,&DIAGN=,&FUNC=,  X\n               &FRID=,&PASSW=,&PERMA=,&CNVRT=,                         X\n               &RTDDN=,&RTDSN=,&RTORG=,       <== FOR DSN ALLOCATION   X\n               &INDDN=,&INDSN=,&INORG=,       <== FOR INFO RETRIEVAL   X\n               &RTMEM=,&RTSTA=,&RTNDP=,&RTCDP=,&RTLIM=,&RTATT=,        X\n               &RTLST=,&RTTYP=,&RELNO=,                                X\n               &RTVOL=,&SSPRM=,&TCBAD=,&REMOV=,&UNALC=\n.*\n.*          +-----------------------------------------------+\n.*          |  SEE MACRO GTEDADOC FOR DOCUMENTATION OF THE  |\n.*          |  USE OF THIS AND OTHER GTEDAXXX MACROS.       |\n.*          +-----------------------------------------------+\n.*\n           LCLA  &TUPLEN\n&TUPLEN    SETA  0\n*\n&NM        DS  0D                       ALIGN FOR GETMAIN\n*\n**********************************************************************\n***        TEXT UNITS FOR SVC99                                    ***\n**********************************************************************\n*\n&NM.TU     DS  0F   TEXT UNITS FOR SVC99\n.*\n.*********************************************************************\n.***       DSNAME ALLOCATION TEXT UNITS - VERB CODE 01             ***\n.*********************************************************************\n.*\n.TUDDNAM   AIF ('&DDNAM' EQ '').TUDSNAM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDDNA#\n           DS  XL6\n&NM.DDNAM  DS  CL8                      DDNAME\n           AGO .TUDSNAM\n.TUDDNA#   ANOP\n           DC  X'0001,0001,0008'\n&NM.DDNAM  DC  CL8'&DDNAM'              DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDSNAM   AIF ('&DSNAM' EQ '').TUMEMBR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDSNA#\n           DS  XL6\n&NM.DSNAM  DS  CL44                     DATASET NAME\n           AGO .TUMEMBR\n.TUDSNA#   ANOP\n           DC  X'0002,0001,002C'        DATASET NAME (NEXT LINE)\n&NM.DSNAM  DC  CL44'&DSNAM'\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUMEMBR   AIF ('&MEMBR' EQ '').TUSTATS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUMEMB#\n&NM.MEMKY  DS  XL6\n&NM.MEMBR  DS  CL8                      MEMBER NAME\n           AGO .TUSTATS\n.TUMEMB#   ANOP\n&NM.MEMKY  DC  X'0003,0001,0008'\n&NM.MEMBR  DC  CL8'&MEMBR'              MEMBER NAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSTATS   AIF ('&STATS' EQ '').TUNDISP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSTAT#\n&NM.STATS  DS  XL7                      STATUS\n           AGO .TUNDISP\n.TUSTAT#   AIF ('&STATS' NE 'OLD').TUSTAT2\n&NM.STATS  DC  X'0004,0001,0001,01'     STATUS=OLD\n           AGO .TUNDISP\n.TUSTAT2   AIF ('&STATS' NE 'MOD').TUSTAT4\n&NM.STATS  DC  X'0004,0001,0001,02'     STATUS=MOD\n           AGO .TUNDISP\n.TUSTAT4   AIF ('&STATS' NE 'NEW').TUSTAT8\n&NM.STATS  DC  X'0004,0001,0001,04'     STATUS=NEW\n           AGO .TUNDISP\n.TUSTAT8   AIF ('&STATS' NE 'SHR').TUNDISP\n&NM.STATS  DC  X'0004,0001,0001,08'     STATUS=SHR\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUNDISP   AIF ('&NDISP' EQ '').TUCDISP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUNDIS#\n&NM.NDISP  DS  XL7                      NORMAL DISP\n           AGO .TUCDISP\n.TUNDIS#   AIF ('&NDISP' NE 'UNCATLG').TUNDIS2\n&NM.NDISP  DC  X'0005,0001,0001,01'     NORMAL DISP=UNCATLG\n           AGO .TUCDISP\n.TUNDIS2   AIF ('&NDISP' NE 'CATLG').TUNDIS4\n&NM.NDISP  DC  X'0005,0001,0001,02'     NORMAL DISP=CATLG\n           AGO .TUCDISP\n.TUNDIS4   AIF ('&NDISP' NE 'DELETE').TUNDIS8\n&NM.NDISP  DC  X'0005,0001,0001,04'     NORMAL DISP=DELETE\n           AGO .TUCDISP\n.TUNDIS8   AIF ('&NDISP' NE 'KEEP').TUCDISP\n&NM.NDISP  DC  X'0005,0001,0001,08'     NORMAL DISP=KEEP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCDISP   AIF ('&CDISP' EQ '').TUTRK\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCDIS#\n&NM.CDISP  DS  XL7                      COND DISP\n           AGO .TUTRK\n.TUCDIS#   AIF ('&CDISP' NE 'UNCATLG').TUCDIS2\n&NM.CDISP  DC  X'0006,0001,0001,01'     COND DISP=UNCATLG\n           AGO .TUTRK\n.TUCDIS2   AIF ('&CDISP' NE 'CATLG').TUCDIS4\n&NM.CDISP  DC  X'0006,0001,0001,02'     COND DISP=CATLG\n           AGO .TUTRK\n.TUCDIS4   AIF ('&CDISP' NE 'DELETE').TUCDIS8\n&NM.CDISP  DC  X'0006,0001,0001,04'     COND DISP=DELETE\n           AGO .TUTRK\n.TUCDIS8   AIF ('&CDISP' NE 'KEEP').TUTRK\n&NM.CDISP  DC  X'0006,0001,0001,08'     COND DISP=KEEP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUTRK     AIF ('&TRK' EQ '').TUCYL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUTRKA\n&NM.TRK    DS  XL4                      TRK\n           AGO .TUCYL\n.TUTRKA    ANOP\n&NM.TRK    DC  X'0007,0000'             TRK\n           AGO .TUPRIME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCYL     AIF ('&CYL' EQ '').TUBLKLN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCYLA\n&NM.CYL    DS  XL4                      CYL\n           AGO .TUBLKLN\n.TUCYLA    ANOP\n&NM.CYL    DC  X'0008,0000'             CYL\n           AGO .TUPRIME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBLKLN   AIF ('&BLKLN' EQ '').TUPRIME\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBLKL#\n           DS  XL6\n&NM.BLKLN  DS  AL3                      AVERAGE BLOCK LENGTH\n           AGO .TUPRIME\n.TUBLKL#   ANOP\n           DC  X'0009,0001,0003'\n&NM.BLKLN  DC  AL3(&BLKLN)              AVERAGE BLOCK LENGTH\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPRIME   AIF ('&PRIME' EQ '').TUSECND\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPRIM#\n           DS  XL6\n&NM.PRIME  DS  AL3                      PRIMARY SPACE QUANTITY\n           AGO .TUSECND\n.TUPRIM#   ANOP\n           DC  X'000A,0001,0003'\n&NM.PRIME  DC  AL3(&PRIME)              PRIMARY SPACE QUANTITY\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSECND   AIF ('&SECND' EQ '').TUDIR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSECN#\n           DS  XL6\n&NM.SECND  DS  AL3                      SECONDARY SPACE QUANTITY\n           AGO .TUDIR\n.TUSECN#   ANOP\n           DC  X'000B,0001,0003'\n&NM.SECND  DC  AL3(&SECND)              SECONDARY SPACE QUANTITY\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDIR     AIF ('&DIR' EQ '').TURLSE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDIRA\n           DS  XL6\n&NM.DIR    DS  AL3                      NUMBER OF DIRECTORY BLOCKS\n           AGO .TURLSE\n.TUDIRA    ANOP\n           DC  X'000C,0001,0003'\n&NM.DIR    DC  AL3(&DIR)                NUMBER OF DIRECTORY BLOCKS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURLSE    AIF ('&RLSE' EQ '').TUSPFRM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURLSEA\n&NM.RLSE   DS  XL4                      RLSE\n           AGO .TUSPFRM\n.TURLSEA   ANOP\n&NM.RLSE   DC  X'000D,0000'             RLSE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSPFRM   AIF ('&SPFRM' EQ '').TUROUND\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSPFR#\n&NM.SPFRM  DS  XL7                      SPACE FORMAT\n           AGO .TUROUND\n.TUSPFR#   AIF ('&SPFRM' NE 'ALX').TUSPFR4\n&NM.SPFRM  DC  X'000E,0001,0001,02'     ALX\n           AGO .TUROUND\n.TUSPFR4   AIF ('&SPFRM' NE 'MXIG').TUSPFR8\n&NM.SPFRM  DC  X'000E,0001,0001,04'     MXIG\n           AGO .TUROUND\n.TUSPFR8   AIF ('&SPFRM' NE 'CONTIG').TUROUND\n&NM.SPFRM  DC  X'000E,0001,0001,08'     CONTIG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUROUND   AIF ('&ROUND' EQ '').TUVLSER\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUROUN#\n&NM.ROUND  DS  XL4                      ROUND\n           AGO .TUVLSER\n.TUROUN#   ANOP\n&NM.ROUND  DC  X'000F,0000'             ROUND\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLSER   AIF ('&VLSER' EQ '').TUPRIVT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLSE#\n           DS  XL6\n&NM.VLSER  DS  CL6                      VOLUME SERIAL NUMBER\n           AGO .TUPRIVT\n.TUVLSE#   ANOP\n           DC  X'0010,0001,0006'\n&NM.VLSER  DC  CL6'&VLSER'              VOLUME SERIAL NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPRIVT   AIF ('&PRIVT' EQ '').TUVLSEQ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPRIV#\n&NM.PRIVT  DS  XL4                      PVT\n           AGO .TUVLSEQ\n.TUPRIV#   ANOP\n&NM.PRIVT  DC  X'0011,0000'             PVT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLSEQ   AIF ('&VLSEQ' EQ '').TUVLCNT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLSQ#\n           DS  XL6\n&NM.VLSEQ  DS  AL2                      VOLUME SEQUENCE NUMBER\n           AGO .TUVLCNT\n.TUVLSQ#   ANOP\n           DC  X'0012,0001,0002'\n&NM.VLSEQ  DC  AL2(&VLSEQ)              VOLUME SEQUENCE NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLCNT   AIF ('&VLCNT' EQ '').TUVLRDS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLCN#\n           DS  XL6\n&NM.VLCNT  DC  AL1                      VOLUME COUNT\n           AGO .TUVLRDS\n.TUVLCN#   ANOP\n           DC  X'0013,0001,0001'\n&NM.VLCNT  DC  AL1(&VLCNT)              VOLUME COUNT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLRDS   AIF ('&VLRDS' EQ '').TUUNIT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLRD#\n           DS  XL6\n&NM.VLRDS  DS  CL44                     VOLUME REF TO THIS DSN\n           AGO .TUUNIT\n.TUVLRD#   ANOP\n           DC  X'0014,0001,002C'        VOLUME REF TO DSN (BELOW)\n&NM.VLRDS  DC  CL44'&VLRDS'\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUNIT    AIF ('&UNIT' EQ '').TUUNCNT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUNITA\n           DS  XL6\n&NM.UNIT   DS  CL6                      UNIT\n           AGO .TUUNCNT\n.TUUNITA   ANOP\n           DC  X'0015,0001,0006'\n&NM.UNIT   DC  CL6'&UNIT'               UNIT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUNCNT   AIF ('&UNCNT' EQ '').TUPARAL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUNCN#\n           DS  XL6\n&NM.UNCNT  DS  AL1                      UNIT COUNT\n           AGO .TUPARAL\n.TUUNCN#   ANOP\n           DC  X'0016,0001,0001'\n&NM.UNCNT  DC  AL1(&UNCNT)              UNIT COUNT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPARAL   AIF ('&PARAL' EQ '').TUSYSOU\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPARA#\n&NM.PARAL  DS  XL4                      PARALLEL MOUNT\n           AGO .TUSYSOU\n.TUPARA#   ANOP\n&NM.PARAL  DC  X'0017,0000'             PARALLEL MOUNT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSYSOU   AIF ('&SYSOU' EQ '').TUSPGNM\n           AIF ('&SYSOU' NE '*').TUSYSO2\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSYSO#\n&NM.SYSOU  DS  XL4                      SYSOUT=*\n           AGO .TUSPGNM\n.TUSYSO#   ANOP\n&NM.SYSOU  DC  X'0018,0000'             SYSOUT=*\n           AGO .TUSPGNM\n.TUSYSO2   ANOP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSYS##\n           DS  XL6\n&NM.SYSOU  DS  CL1                      SYSOUT CLASS\n           AGO .TUSPGNM\n.TUSYS##   ANOP\n           DC  X'0018,0001,0001'\n&NM.SYSOU  DC  CL1'&SYSOU'              SYSOUT CLASS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSPGNM   AIF ('&SPGNM' EQ '').TUSFMNO\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSPGN#\n           DS  XL6\n&NM.SPGNM  DS  CL8                      SYSOUT PROGRAM NAME\n           AGO .TUSFMNO\n.TUSPGN#   ANOP\n           DC  X'0019,0001,0008'\n&NM.SPGNM  DC  CL8'&SPGNM'              SYSOUT PROGRAM NAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSFMNO   AIF ('&SFMNO' EQ '').TUOUTLM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSFMN#\n           DS  XL6\n&NM.SFMNO  DS  CL4                      SYSOUT FORM NAME/NUMBER\n           AGO .TUOUTLM\n.TUSFMN#   ANOP\n           DC  X'001A,0001,0004'\n&NM.SFMNO  DC  CL4'&SFMNO'              SYSOUT FORM NAME/NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUOUTLM   AIF ('&OUTLM' EQ '').TUCLOSE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUOUTL#\n           DS  XL6\n&NM.OUTLM  DS  AL3                      OUTLIM\n           AGO .TUCLOSE\n.TUOUTL#   ANOP\n           DC  X'001B,0001,0003'\n&NM.OUTLM  DC  AL3(&OUTLM)              OUTLIM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCLOSE   AIF ('&CLOSE' EQ '').TUCOPYS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCLOS#\n&NM.CLOSE  DS  XL4                      FREE=CLOSE\n           AGO .TUCOPYS\n.TUCLOS#   ANOP\n&NM.CLOSE  DC  X'001C,0000'             FREE=CLOSE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCOPYS   AIF ('&COPYS' EQ '').TULABEL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCOPY#\n           DS  XL6\n&NM.COPYS  DS  AL1                      COPIES\n           AGO .TULABEL\n.TUCOPY#   ANOP\n           DC  X'001D,0001,0001'\n&NM.COPYS  DC  AL1(&COPYS)              COPIES\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TULABEL   AIF ('&LABEL' EQ '').TUDSSEQ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TULABE#\n&NM.LABEL  DS  XL7                      LABEL\n           AGO .TUDSSEQ\n.TULABE#   AIF ('&LABEL' NE 'NL').TULABE2\n&NM.LABEL  DC  X'001E,0001,0001,01'     LABEL=NL\n           AGO .TUDSSEQ\n.TULABE2   AIF ('&LABEL' NE 'SL').TULABE3\n&NM.LABEL  DC  X'001E,0001,0001,02'     LABEL=SL\n           AGO .TUDSSEQ\n.TULABE3   AIF ('&LABEL' NE 'NSL').TULABE4\n&NM.LABEL  DC  X'001E,0001,0001,04'     LABEL=NSL\n           AGO .TUDSSEQ\n.TULABE4   AIF ('&LABEL' NE 'SUL').TULABE5\n&NM.LABEL  DC  X'001E,0001,0001,0A'     LABEL=SUL\n           AGO .TUDSSEQ\n.TULABE5   AIF ('&LABEL' NE 'BLP').TULABE6\n&NM.LABEL  DC  X'001E,0001,0001,10'     LABEL=BLP\n           AGO .TUDSSEQ\n.TULABE6   AIF ('&LABEL' NE 'LTM').TULABE7\n&NM.LABEL  DC  X'001E,0001,0001,21'     LABEL=LTM\n           AGO .TUDSSEQ\n.TULABE7   AIF ('&LABEL' NE 'AL').TULABE8\n&NM.LABEL  DC  X'001E,0001,0001,40'     LABEL=AL\n           AGO .TUDSSEQ\n.TULABE8   AIF ('&LABEL' NE 'AUL').TUDSSEQ\n&NM.LABEL  DC  X'001E,0001,0001,48'     LABEL=AUL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDSSEQ   AIF ('&DSSEQ' EQ '').TUPASPR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDSSE#\n           DS  XL6\n&NM.DSSEQ  DS  AL2                      LABEL= DATASET SEQUENCE NUMBER\n           AGO .TUPASPR\n.TUDSSE#   ANOP\n           DC  X'001F,0001,0002'\n&NM.DSSEQ  DC  AL2(&DSSEQ)              LABEL= DATASET SEQUENCE NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPASPR   AIF ('&PASPR' EQ '').TUINOUT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINOUT   AIF ('&INOUT' EQ '').TUEXPDT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINOU#\n&NM.INOUT  DS  XL7                      LABEL=IN OR OUT\n           AGO .TUEXPDT\n.TUINOU#   AIF ('&INOUT' NE 'IN').TUINOU2\n&NM.INOUT  DC  X'0021,0001,0001,40'     LABEL=IN\n           AGO .TUEXPDT\n.TUINOU2   AIF ('&INOUT' NE 'OUT').TUEXPDT\n&NM.INOUT  DC  X'0021,0001,0001,80'     LABEL=OUT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUEXPDT   AIF ('&EXPDT' EQ '').TURETPD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUEXPD#\n           DS  XL6\n&NM.EXPDT  DS  CL5                      EXPDT\n           AGO .TURETPD\n.TUEXPD#   ANOP\n           DC  X'0022,0001,0005'\n&NM.EXPDT  DC  CL5'&EXPDT'              EXPDT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURETPD   AIF ('&RETPD' EQ '').TUDUMMY\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURETP#\n           DS  XL6\n&NM.RETPD  DS  AL2                      RETPD\n           AGO .TUDUMMY\n.TURETP#   ANOP\n           DC  X'0023,0001,0002'\n&NM.RETPD  DC  AL2(&RETPD)              RETPD\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDUMMY   AIF ('&DUMMY' EQ '').TUFCBIM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDUMM#\n&NM.DUMMY  DS  XL4                      DD DUMMY / DSN=NULLFILE\n           AGO .TUFCBIM\n.TUDUMM#   ANOP\n&NM.DUMMY  DC  X'0024,0000'             DD DUMMY / DSN=NULLFILE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUFCBIM   AIF ('&FCBIM' EQ '').TUFCBAV\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUFCBI#\n           DS  XL6\n&NM.FCBIM  DS  CL4                      FCB\n           AGO .TUFCBAV\n.TUFCBI#   ANOP\n           DC  X'0025,0001,0004'\n&NM.FCBIM  DC  CL4'&FCBIM'              FCB\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUFCBAV   AIF ('&FCBAV' EQ '').TUQNAME\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUFCBA#\n&NM.FCBAV  DS  XL7                      FCB VERIFY OR ALIGN\n           AGO .TUQNAME\n.TUFCBA#   AIF ('&FCBAV' NE 'VERIFY').TUFCBA2\n&NM.FCBAV  DC  X'0026,0001,0001,04'     FCB VERIFY\n           AGO .TUQNAME\n.TUFCBA2   AIF ('&FCBAV' NE 'ALIGN').TUQNAME\n&NM.FCBAV  DC  X'0026,0001,0001,08'     FCB ALIGN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUQNAME   AIF ('&QNAME' EQ '').TUTERM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUTERM    AIF ('&TERM' EQ '').TUUCS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUTERMA\n&NM.TERM   DS  XL4                      TERM=TS / DSN(*)\n           AGO .TUUCS\n.TUTERMA   ANOP\n&NM.TERM   DC  X'0028,0000'             TERM=TS / DSN(*)\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUCS     AIF ('&UCS' EQ '').TUUFOLD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUCSA\n           DS  XL6\n&NM.UCS    DS  CL4                      UCS CHARACTER SET\n           AGO .TUUFOLD\n.TUUCSA    ANOP\n           DC  X'0029,0001,0004'\n&NM.UCS    DC  CL4'&UCS'                UCS CHARACTER SET\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUFOLD   AIF ('&UFOLD' EQ '').TUUVRFY\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUFOL#\n&NM.UFOLD  DS  XL4                      UCS FOLD\n           AGO .TUUVRFY\n.TUUFOL#   ANOP\n&NM.UFOLD  DC  X'002A,0000'             UCS FOLD\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUVRFY   AIF ('&UVRFY' EQ '').TUDCBDS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUVRF#\n&NM.UVRFY  DS  XL4                      UCS VERIFY\n           AGO .TUDCBDS\n.TUUVRF#   ANOP\n&NM.UVRFY  DC  X'002B,0000'             UCS VERIFY\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDCBDS   AIF ('&DCBDS' EQ '').TUDCBDD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDCBS#\n           DS  XL6\n&NM.DCBDS  DS  CL44                     DCB REFERENCE TO DSN\n           AGO .TUDCBDD\n.TUDCBS#   ANOP\n           DC  X'002C,0001,0003'        DCB REFERENCE TO DSN (BELOW)\n&NM.DCBDS  DC  CL44'&DCBDS'\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDCBDD   AIF ('&DCBDD' EQ '').TUSUSER\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDCBD#\n           DS  XL6\n&NM.DCBDD  DS  CL8                      DCB REFERENCE TO DDNAME\n           AGO .TUSUSER\n.TUDCBD#   ANOP\n           DC  X'002D,0001,0008'\n&NM.DCBDD  DC  CL8'&DCBDD'              DCB REFERENCE TO DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSUSER   AIF ('&SUSER' EQ '').TUSHOLD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSUSE#\n           DS  XL6\n&NM.SUSER  DS  CL8                      SYSOUT DESTINATION\n           AGO .TUSHOLD\n.TUSUSE#   ANOP\n           DC  X'0058,0001,0008'\n&NM.SUSER  DC  CL8'&SUSER'              SYSOUT DESTINATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSHOLD   AIF ('&SHOLD' EQ '').TUMSVGP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSHOL#\n&NM.SHOLD  DS  XL4                      SYSOUT HOLD=YES\n           AGO .TUMSVGP\n.TUSHOL#   ANOP\n&NM.SHOLD  DC  X'0059,0000'             SYSOUT HOLD=YES\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUMSVGP   AIF ('&MSVGP' EQ '').TUSSNM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSSNM    AIF ('&SSNM' EQ '').TUSSPRM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSSPRM   AIF ('&SSPRM' EQ '').TUPROT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPROT    AIF ('&PROT' EQ '').TUBFALN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.*\n.*********************************************************************\n.***          DCB ATTRIBUTE TEXT UNITS - VERB CODE 01              ***\n.*********************************************************************\n.*\n.TUBFALN   AIF ('&BFALN' EQ '').TUBFTEK\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBFAL#\n&NM.BFALN  DS  XL7                      BFALN\n           AGO .TUBFTEK\n.TUBFAL#   AIF ('&BFALN' NE 'F').TUBFAL2\n&NM.BFALN  DC  X'002E,0001,0001,01'     BFALN=F\n           AGO .TUBFTEK\n.TUBFAL2   AIF ('&BFALN' NE 'D').TUBFTEK\n&NM.BFALN  DC  X'002E,0001,0001,02'     BFALN=D\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBFTEK   AIF ('&BFTEK' EQ '').TUBLKSZ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBFTE#\n&NM.BFTEK  DS  XL7                      BFTEK\n           AGO .TUBLKSZ\n.TUBFTE#   AIF ('&BFTEK' NE 'D').TUBFTE2\n&NM.BFTEK  DC  X'002F,0001,0001,08'     BFTEK=D\n           AGO .TUBLKSZ\n.TUBFTE2   AIF ('&BFTEK' NE 'E').TUBFTE3\n&NM.BFTEK  DC  X'002F,0001,0001,10'     BFTEK=E\n           AGO .TUBLKSZ\n.TUBFTE3   AIF ('&BFTEK' NE 'R').TUBFTE4\n&NM.BFTEK  DC  X'002F,0001,0001,20'     BFTEK=R\n           AGO .TUBLKSZ\n.TUBFTE4   AIF ('&BFTEK' NE 'S').TUBFTE5\n&NM.BFTEK  DC  X'002F,0001,0001,40'     BFTEK=S\n           AGO .TUBLKSZ\n.TUBFTE5   AIF ('&BFTEK' NE 'A').TUBLKSZ\n&NM.BFTEK  DC  X'002F,0001,0001,60'     BFTEK=A\n           AGO .TUBLKSZ\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBLKSZ   AIF ('&BLKSZ' EQ '').TUBUFIN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBLKS#\n           DS  XL6\n&NM.BLKSZ  DS  AL2                      BLKSIZE\n           AGO .TUBUFIN\n.TUBLKS#   ANOP\n           DC  X'0030,0001,0002'\n&NM.BLKSZ  DC  AL2(&BLKSZ)              BLKSIZE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFIN   AIF ('&BUFIN' EQ '').TUBUFL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFI#\n           DS  XL6\n&NM.BUFIN  DS  AL1                      BUFIN\n           AGO .TUBUFL\n.TUBUFI#   ANOP\n           DC  X'0031,0001,0001'\n&NM.BUFIN  DC  AL1(&BUFIN)              BUFIN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFL    AIF ('&BUFL' EQ '').TUBUFMX\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFLA\n           DS  XL6\n&NM.BUFL   DC  AL2                      BUFL\n           AGO .TUBUFMX\n.TUBUFLA   ANOP\n           DC  X'0032,0001,0002'\n&NM.BUFL   DC  AL2(&BUFL)               BUFL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFMX   AIF ('&BUFMX' EQ '').TUBUFNO\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFM#\n           DS  XL6\n&NM.BUFMX  DS  AL1                      BUFMAX\n           AGO .TUBUFNO\n.TUBUFM#   ANOP\n           DC  X'0033,0001,0001'\n&NM.BUFMX  DC  AL1(&BUFMX)              BUFMAX\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFNO   AIF ('&BUFNO' EQ '').TUBUFOF\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFN#\n           DS  XL6\n&NM.BUFNO  DC  AL1                      BUFNO\n           AGO .TUBUFOF\n.TUBUFN#   ANOP\n           DC  X'0034,0001,0001'\n&NM.BUFNO  DC  AL1(&BUFNO)              BUFNO\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFOF   AIF ('&BUFOF' EQ '').TUBUFOU\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&BUFOF' NE 'L').TUBUFO2\n           AIF ('&MAP' NE 'ONLY').TUBUFF#\n&NM.BUFOF  DS  XL7                      BUFOFF=L\n           AGO .TUBUFOU\n.TUBUFF#   ANOP\n&NM.BUFOF  DC  X'0035,0001,0001,80'     BUFOFF=L\n           AGO .TUBUFOU\n.TUBUFO2   ANOP\n           AIF ('&MAP' NE 'ONLY').TUBUF##\n           DS  XL6\n&NM.BUFOF  DS  AL1                      BUFOFF\n           AGO .TUBUFOU\n.TUBUF##   ANOP\n           DC  X'0035,0001,0001'\n&NM.BUFOF  DC  AL1(&BUFOF)              BUFOFF\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFOU   AIF ('&BUFOU' EQ '').TUBUFRQ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFO#\n           DS  XL6\n&NM.BUFOU  DS  AL1                      BUFOUT\n           AGO .TUBUFRQ\n.TUBUFO#   ANOP\n           DC  X'0036,0001,0001'\n&NM.BUFOU  DC  AL1(&BUFOU)              BUFOUT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFRQ   AIF ('&BUFRQ' EQ '').TUBUFSZ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFR#\n           DS  XL6\n&NM.BUFRQ  DS  AL1                      BUFRQ\n           AGO .TUBUFSZ\n.TUBUFR#   ANOP\n           DC  X'0037,0001,0001'\n&NM.BUFRQ  DC  AL1(&BUFRQ)              BUFRQ\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFSZ   AIF ('&BUFSZ' EQ '').TUCODE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFS#\n           DS  XL6\n&NM.BUFSZ  DS  AL2                      BUFSIZE\n           AGO .TUCODE\n.TUBUFS#   ANOP\n           DC  X'0038,0001,0002'\n&NM.BUFSZ  DC  AL2(&BUFSZ)              BUFSIZE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCODE    AIF ('&CODE' EQ '').TUCPRI\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCPRI    AIF ('&CPRI' EQ '').TUDEN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDEN     AIF ('&DEN' EQ '').TUDSORG\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDENA\n&NM.DEN    DS  XL7                      DEN\n           AGO .TUDSORG\n.TUDENA    AIF ('&DEN' NE '0').TUDE2\n&NM.DEN    DC  X'003B,0001,0001,03'     DEN=0  (200 BPI, 7-TRACK)\n           AGO .TUDSORG\n.TUDE2     AIF ('&DEN' NE '1').TUDE3\n&NM.DEN    DC  X'003B,0001,0001,43'     DEN=1  (556 BPI, 7-TRACK)\n           AGO .TUDSORG\n.TUDE3     AIF ('&DEN' NE '2').TUDE4\n&NM.DEN    DC  X'003B,0001,0001,83'     DEN=2  (800 BPI, 7/9-TRACK)\n           AGO .TUDSORG\n.TUDE4     AIF ('&DEN' NE '3').TUDE5\n&NM.DEN    DC  X'003B,0001,0001,C3'     DEN=3  (1600 BPI, 9-TRACK)\n           AGO .TUDSORG\n.TUDE5     AIF ('&DEN' NE '4').TUDSORG\n&NM.DEN    DC  X'003B,0001,0001,D3'     DEN=4  (6250 BPI, 9-TRACK)\n           AGO .TUDSORG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDSORG   AIF ('&DSORG' EQ '').TUEROPT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDSOR#\n&NM.DSORG  DS  XL8                      DSORG\n           AGO .TUEROPT\n.TUDSOR#   AIF ('&DSORG' NE 'VS').TUDSOR2\n&NM.DSORG  DC  X'003C,0001,0002,0008'   DSORG=VS\n           AGO .TUEROPT\n.TUDSOR2   AIF ('&DSORG' NE 'TQ').TUDSOR3\n&NM.DSORG  DC  X'003C,0001,0002,0020'   DSORG=TQ\n           AGO .TUEROPT\n.TUDSOR3   AIF ('&DSORG' NE 'TX').TUDSOR4\n&NM.DSORG  DC  X'003C,0001,0002,0040'   DSORG=TX\n           AGO .TUEROPT\n.TUDSOR4   AIF ('&DSORG' NE 'GS').TUDSOR5\n&NM.DSORG  DC  X'003C,0001,0002,0080'   DSORG=GS\n           AGO .TUEROPT\n.TUDSOR5   AIF ('&DSORG' NE 'PO').TUDSOR6\n&NM.DSORG  DC  X'003C,0001,0002,0200'   DSORG=PO\n           AGO .TUEROPT\n.TUDSOR6   AIF ('&DSORG' NE 'POU').TUDSOR7\n&NM.DSORG  DC  X'003C,0001,0002,0300'   DSORG=POU\n           AGO .TUEROPT\n.TUDSOR7   AIF ('&DSORG' NE 'MQ').TUDSOR8\n&NM.DSORG  DC  X'003C,0001,0002,0400'   DSORG=MQ\n           AGO .TUEROPT\n.TUDSOR8   AIF ('&DSORG' NE 'CQ').TUDSOR9\n&NM.DSORG  DC  X'003C,0001,0002,0800'   DSORG=CQ\n           AGO .TUEROPT\n.TUDSOR9   AIF ('&DSORG' NE 'CX').TUDSORA\n&NM.DSORG  DC  X'003C,0001,0002,1000'   DSORG=CX\n           AGO .TUEROPT\n.TUDSORA   AIF ('&DSORG' NE 'DA').TUDSORB\n&NM.DSORG  DC  X'003C,0001,0002,2000'   DSORG=DA\n           AGO .TUEROPT\n.TUDSORB   AIF ('&DSORG' NE 'DAU').TUDSORC\n&NM.DSORG  DC  X'003C,0001,0002,2100'   DSORG=DAU\n           AGO .TUEROPT\n.TUDSORC   AIF ('&DSORG' NE 'PS').TUDSORD\n&NM.DSORG  DC  X'003C,0001,0002,4000'   DSORG=PS\n           AGO .TUEROPT\n.TUDSORD   AIF ('&DSORG' NE 'PSU').TUEROPT\n&NM.DSORG  DC  X'003C,0001,0002,4100'   DSORG=PSU\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUEROPT   AIF ('&EROPT' EQ '').TUGNCP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUEROP#\n&NM.EROPT  DS  XL7                      EROPT\n           AGO .TUGNCP\n.TUEROP#   AIF ('&EROPT' NE 'T').TUEROP2\n&NM.EROPT  DC  X'003D,0001,0001,10'     EROPT=T\n           AGO .TUGNCP\n.TUEROP2   AIF ('&EROPT' NE 'ABE').TUEROP3\n&NM.EROPT  DC  X'003D,0001,0001,20'     EROPT=ABE\n           AGO .TUGNCP\n.TUEROP3   AIF ('&EROPT' NE 'SKP').TUEROP4\n&NM.EROPT  DC  X'003D,0001,0001,40'     EROPT=SKP\n           AGO .TUGNCP\n.TUEROP4   AIF ('&EROPT' NE 'ACC').TUGNCP\n&NM.EROPT  DC  X'003D,0001,0001,80'     EROPT=ACC\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUGNCP    AIF ('&GNCP' EQ '').TUINTVL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUGNCPA\n           DS  XL6\n&NM.GNCP   DC  AL1                      GNCP\n           AGO .TUINTVL\n.TUGNCPA   ANOP\n           DC  X'003E,0001,0001'\n&NM.GNCP   DC  AL1(&GNCP)               GNCP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINTVL   AIF ('&INTVL' EQ '').TUKYLEN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUKYLEN   AIF ('&KYLEN' EQ '').TULIMCT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUKYLE#\n           DS  XL6\n&NM.KYLEN  DS  AL1                      KEYLEN\n           AGO .TULIMCT\n.TUKYLE#   ANOP\n           DC  X'0040,0001,0001'\n&NM.KYLEN  DC  AL1(&KYLEN)              KEYLEN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TULIMCT   AIF ('&LIMCT' EQ '').TULRECL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TULRECL   AIF ('&LRECL' EQ '').TUMODE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TULREC#\n           DS  XL6\n&NM.LRECL  DS  AL2                      LRECL\n           AGO .TUMODE\n.TULREC#   ANOP\n           DC  X'0042,0001,0002'\n&NM.LRECL  DC  AL2(&LRECL)              LRECL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUMODE    AIF ('&MODE' EQ '').TUNCP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUNCP     AIF ('&NCP' EQ '').TUOPTCD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUNCPA\n           DS  XL6\n&NM.NCP    DS  AL1                      NCP\n           AGO .TUOPTCD\n.TUNCPA    ANOP\n           DC  X'0044,0001,0001'\n&NM.NCP    DC  AL1(&NCP)                NCP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUOPTCD   AIF ('&OPTCD' EQ '').TUPCIR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUOPTC#\n&NM.OPTCD  DS  XL7                      OPTCD\n           AGO .TUPCIR\n.TUOPTC#   AIF ('&OPTCD' NE 'W').TUPCIR\n&NM.OPTCD  DC  X'0045,0001,0001,80'     OPTCD=W\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPCIR    AIF ('&PCIR' EQ '').TUPCIS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPCIS    AIF ('&PCIS' EQ '').TUPRTSP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPRTSP   AIF ('&PRTSP' EQ '').TURECFM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPRTS#\n&NM.PRTSP  DS  XL7                      PRTSP\n           AGO .TURECFM\n.TUPRTS#   AIF ('&PRTSP' NE '0').TUPRTS2\n&NM.PRTSP  DC  X'0048,0001,0001,01'     PRTSP=0\n           AGO .TURECFM\n.TUPRTS2   AIF ('&PRTSP' NE '1').TUPRTS3\n&NM.PRTSP  DC  X'0048,0001,0001,09'     PRTSP=1\n           AGO .TURECFM\n.TUPRTS3   AIF ('&PRTSP' NE '2').TUPRTS4\n&NM.PRTSP  DC  X'0048,0001,0001,11'     PRTSP=2\n           AGO .TURECFM\n.TUPRTS4   AIF ('&PRTSP' NE '3').TURECFM\n&NM.PRTSP  DC  X'0048,0001,0001,19'     PRTSP=3\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURECFM   AIF ('&RECFM' EQ '').TURSRVF\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURECF#\n&NM.RECFM  DS  XL7                      RECFM=F\n           AGO .TURSRVF\n.TURECF#   AIF ('&RECFM' NE 'F').TURECF2\n&NM.RECFM  DC  X'0049,0001,0001,80'     RECFM=F\n           AGO .TURSRVF\n.TURECF2   AIF ('&RECFM' NE 'FA').TURECF3\n&NM.RECFM  DC  X'0049,0001,0001,84'     RECFM=FA\n           AGO .TURSRVF\n.TURECF3   AIF ('&RECFM' NE 'FB').TURECF4\n&NM.RECFM  DC  X'0049,0001,0001,90'     RECFM=FB\n           AGO .TURSRVF\n.TURECF4   AIF ('&RECFM' NE 'FBA').TURECF5\n&NM.RECFM  DC  X'0049,0001,0001,94'     RECFM=FBA\n           AGO .TURSRVF\n.TURECF5   AIF ('&RECFM' NE 'V').TURECF6\n&NM.RECFM  DC  X'0049,0001,0001,40'     RECFM=V\n           AGO .TURSRVF\n.TURECF6   AIF ('&RECFM' NE 'VB').TURECF7\n&NM.RECFM  DC  X'0049,0001,0001,50'     RECFM=VB\n           AGO .TURSRVF\n.TURECF7   AIF ('&RECFM' NE 'U').TURSRVF\n&NM.RECFM  DC  X'0049,0001,0001,C0'     RECFM=U\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURSRVF   AIF ('&RSRVF' EQ '').TURSRVS\n.TURSRVS   AIF ('&RSRVS' EQ '').TUSOWA\n.TUSOWA    AIF ('&SOWA' EQ '').TUSTACK\n.TUSTACK   AIF ('&STACK' EQ '').TUTHRSH\n.TUTHRSH   AIF ('&THRSH' EQ '').TUTRTCH\n.TUTRTCH   AIF ('&TRTCH' EQ '').TUIPLTX\n.TUIPLTX   AIF ('&IPLTX' EQ '').TUDIAGN\n.TUDIAGN   AIF ('&DIAGN' EQ '').TUFUNC\n.TUFUNC    AIF ('&FUNC' EQ '').TUFRID\n.TUFRID    AIF ('&FRID' EQ '').TUPASSW\n.*\n.*********************************************************************\n.***       NON-JCL DYNAMIC ALLOCATION FUNCTIONS - VERB CODE 01     ***\n.*********************************************************************\n.*\n.TUPASSW   AIF ('&PASSW' EQ '').TUPERMA\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPERMA   AIF ('&PERMA' EQ '').TUCNVRT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPERM#\n&NM.PERMA  DS  XL4                      PERMANENT ALLOCATION\n           AGO .TUCNVRT\n.TUPERM#   ANOP\n&NM.PERMA  DC  X'0052,0000'             PERMANENT ALLOCATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCNVRT   AIF ('&CNVRT' EQ '').TURTDDN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCNVR#\n&NM.CNVRT  DS  XL4                      CONVERTABLE ALLOCATION\n           AGO .TURTDDN\n.TUCNVR#   ANOP\n&NM.CNVRT  DC  X'0053,0000'             CONVERTABLE ALLOCATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTDDN   AIF ('&RTDDN' EQ '').TURTDSN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTDD#\n           DS  XL4\n           DS  XL2                      LEN OF RETURNED DDNAME\n&NM.RTDDN  DS  CL8                      RETURNED DDNAME\n           AGO .TURTDSN\n.TURTDD#   ANOP\n           DC  X'0055,0001'\n           DC  XL2'0008'                LEN OF RETURNED DDNAME\n&NM.RTDDN  DC  CL8' '                   RETURNED DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTDSN   AIF ('&RTDSN' EQ '').TURTORG\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTDS#\n           DS  XL4\n           DS  AL2                      LEN OF RETURNED DSNAME\n&NM.RTDSN  DS  CL44                     RETURNED DSNAME\n           AGO .TURTORG\n.TURTDS#   ANOP\n           DC  X'0056,0001'\n           DC  AL2(44)                  LEN OF RETURNED DSNAME\n&NM.RTDSN  DC  CL44' '                  RETURNED DSNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTORG   AIF ('&RTORG' EQ '').TURTVOL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTOR#\n           DS  XL6\n&NM.RTORG  DS  XL2                      RETURNED DSORG\n           AGO .TURTVOL\n.TURTOR#   DC  X'0057,0001,0002'\n&NM.RTORG  DC  XL2'0000'                RETURNED DSORG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTVOL   AIF ('&RTVOL' EQ '').TUREMOV\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTVO#\n           DS  XL4\n           DS  XL2                      LEN OF RETURNED VOLSER\n&NM.RTVOL  DS  CL6                      RETURNED VOLSER\n           AGO .TUREMOV\n.TURTVO#   ANOP\n           DC  X'005D,0001'\n           DC  XL2'0006'                LEN OF RETURNED VOLSER\n&NM.RTVOL  DC  CL6' '                   RETURNED VOLSER\n.*\n.*********************************************************************\n.***       UNALLOCATE - VERB CODE 02                               ***\n.*********************************************************************\n.*\n.TUREMOV   AIF ('&REMOV' EQ '').TUUNALC\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUREMO#\n&NM.REMOV  DS  XL4                      REMOVE INUSE EVEN IF PERMANENT\n           AGO .TUUNALC\n.TUREMO#   ANOP\n&NM.REMOV  DC  X'0008,0000'             REMOVE INUSE EVEN IF PERMANENT\n.*\n.TUUNALC   AIF ('&UNALC' EQ '').TUTCBAD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUNAL#\n&NM.UNALC  DS  XL4                      UNALLOCATE EVEN IF PERMANENT\n           AGO .TUTCBAD\n.TUUNAL#   ANOP\n&NM.UNALC  DC  X'0007,0000'             UNALLOCATE EVEN IF PERMANENT\n.*\n.*********************************************************************\n.***       REMOVE IN-USE ATTRIBUTE - VERB CODE 05                  ***\n.*********************************************************************\n.*\n.TUTCBAD   AIF ('&TCBAD' EQ '').TUINDDN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUTCBA#\n           DS  XL6\n&NM.TCBAD  DS  XL4                      TCB ADDRESS\n           AGO .TUINDDN\n.TUTCBA#   ANOP\n           DC  X'0001,0001,0004'\n&NM.TCBAD  DS  XL4                      TCB ADDRESS\n.*\n.*********************************************************************\n.***       RETURN INFORMATION - VERB CODE 07                       ***\n.*********************************************************************\n.*\n.TUINDDN   AIF ('&INDDN' EQ '').TUINDSN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINDD#\n           DS  XL4\n           DS  XL2                      LEN OF RETURNED DDNAME\n&NM.INDDN  DS  CL8                      RETURNED DDNAME\n           AGO .TUINDSN\n.TUINDD#   ANOP\n           DC  X'0004,0001'\n           DC  XL2'0008'                LEN OF RETURNED DDNAME\n&NM.INDDN  DC  CL8' '                   RETURNED DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINDSN   AIF ('&INDSN' EQ '').TUINORG\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINDS#\n           DS  XL4\n           DS  AL2                      LEN OF RETURNED DSNAME\n&NM.INDSN  DS  CL44                     RETURNED DSNAME\n           AGO .TUINORG\n.TUINDS#   ANOP\n           DC  X'0005,0001'\n           DC  AL2(44)                  LEN OF RETURNED DSNAME\n&NM.INDSN  DC  CL44' '                  RETURNED DSNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINORG   AIF ('&INORG' EQ '').TURTMEM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINOR#\n           DS  XL6\n&NM.INORG  DS  XL2                      RETURNED DSORG\n           AGO .TURTMEM\n.TUINOR#   DC  X'000A,0001,0002'\n&NM.INORG  DC  XL2'0000'                RETURNED DSORG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTMEM   AIF ('&RTMEM' EQ '').TURTSTA\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTME#\n           DS  XL6\n&NM.RTMEM  DS  CL8                      RETURNED MEMBER NAME\n           AGO .TURTSTA\n.TURTME#   ANOP\n           DC  X'0006,0001,0008'\n&NM.RTMEM  DC  CL8' '                   RETURNED MEMBER NAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTSTA   AIF ('&RTSTA' EQ '').TURTNDP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTST#\n           DS  XL6\n&NM.RTSTA  DS  XL1                      RETURNED DATASET STATUS\n           AGO .TURTNDP\n.TURTST#   ANOP\n           DC  X'0007,0001,0001'\n&NM.RTSTA  DS  XL1'00'                  RETURNED DATASET STATUS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTNDP   AIF ('&RTNDP' EQ '').TURTCDP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTND#\n           DS  XL6\n&NM.RTNDP  DS  XL1                      RETURNED NORMAL DISP\n           AGO .TURTCDP\n.TURTND#   ANOP\n           DC  X'0008,0001,0001'\n&NM.RTNDP  DS  XL1'00'                  RETURNED NORMAL DISP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTCDP   AIF ('&RTCDP' EQ '').TURTLIM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTCD#\n           DS  XL6\n&NM.RTCDP  DS  XL1                      RETURNED CONDITIONAL DISP\n           AGO .TURTLIM\n.TURTCD#   ANOP\n           DC  X'0009,0001,0001'\n&NM.RTCDP  DS  XL1'00'                  RETURNED CONDITIONAL DISP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTLIM   AIF ('&RTLIM' EQ '').TURTATT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTLI#\n           DS  XL6\n&NM.RTLIM  DS  XL2                      RETURNED LIMIT SPECIFICATION\n           AGO .TURTATT\n.TURTLI#   ANOP\n           DC  X'000B,0001,0002'\n&NM.RTLIM  DS  XL2'0000'                RETURNED LIMIT SPECIFICATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTATT   AIF ('&RTATT' EQ '').TURTLST\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTAT#\n           DS  XL6\n&NM.RTATT  DS  XL1                      RETURNED D.A. ATTRIBUTE\n           AGO .TURTLST\n.TURTAT#   ANOP\n           DC  X'000C,0001,0001'\n&NM.RTATT  DS  XL1'00'                  RETURNED D.A. ATTRIBUTE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTLST   AIF ('&RTLST' EQ '').TURTTYP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTLS#\n           DS  XL6\n&NM.RTLST  DS  XL1                      RETURNED LAST ENTRY SPEC.\n           AGO .TURTTYP\n.TURTLS#   ANOP\n           DC  X'000D,0001,0001'\n&NM.RTLST  DS  XL1'00'                  RETURNED LAST ENTRY SPEC.\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTTYP   AIF ('&RTTYP' EQ '').TURELNO\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTTY#\n           DS  XL6\n&NM.RTTYP  DS  XL1                      RETURNED DATASET TYPE\n           AGO .TURELNO\n.TURTTY#   ANOP\n           DC  X'000E,0001,0001'\n&NM.RTTYP  DS  XL1'00'                  RETURNED DATASET TYPE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURELNO   AIF ('&RELNO' EQ '').TUENDM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURELN#\n           DS  XL6\n&NM.RELNO  DS  XL2                      RETURNED RELATIVE REQUEST NO.\n           AGO .TUENDM\n.TURELN#   ANOP\n           DC  X'000F,0001,0002'\n&NM.RELNO  DS  XL2'0000'                RETURNED RELATIVE REQUEST NO.\n.*\n.*********************************************************************\n.***       MARK END OF LIST OF TEXT UNITS                          ***\n.*********************************************************************\n.*\n.TUENDM    AIF ('&MAP' NE 'ONLY').TUENDU#\n           DS  XL1                      END OF LIST MARKER\n           AGO .TUEND\n.TUENDU#   ANOP\n           DC  X'FF'                    END OF LIST MARKER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUEND     ANOP\n.*\n**********************************************************************\n***        REQUEST BLOCKS FOR SVC99                                ***\n**********************************************************************\n*\n&NM.RBP    DS  A                        POINTER TO REQUEST BLOCK\n&NM.RB     DS  5A                       REQUEST BLOCK\n&NM.TUPL   DS  &TUPLEN.A                TEXT UNIT POINTER LIST\n*\n**********************************************************************\n***        DAIRFAIL PARAMETER BLOCK & MISCELLANEOUS STORAGE        ***\n**********************************************************************\n*\n&NM.DFPRM  DS  6F                       PARM BLOCK FOR IKJEFF18\n*\n&NM.S99RC  DS  F                        STORAGE AREA FOR SVC 99 R/C\n           AIF ('&MAP' NE 'ONLY').DF2\n&NM.F02EP  DS  F                        STORGE AREA FOR EP OF IKJEFF18\n&NM.ID     DS  XL2                      DAIRFAIL SWITCHES & CALLER ID\n           AGO .DF3\n.DF2       ANOP\n&NM.F02EP  DC  F'0'                     STORGE AREA FOR EP OF IKJEFF18\n&NM.ID     DC  X'0032'                  DAIRFAIL SWITCHES & CALLER ID\n.DF3       ANOP\n*\n**********************************************************************\n***        EQUATE FOR TOTAL LENGTH                                 ***\n**********************************************************************\n*\n           DS  0D                       ALIGN FOR GETMAIN\n&NM.LEN    EQU *-&NM                    TOTAL LENGTH\n           MEND\n++MAC(GTEDAALC) DISTLIB(ISPAMAC) SYSLIB(ISPMACS) .\n         MACRO\n&LABEL   GTEDAALC  &NM,&VERB=AL,&ERRMSG=YES\n.*\n.*          +-----------------------------------------------+\n.*          |  SEE MACRO GTEDADOC FOR DOCUMENTATION OF THE  |\n.*          |  USE OF THIS AND OTHER GTEDAXXX MACROS.       |\n.*          +-----------------------------------------------+\n.*\n*\n**********************************************************************\n***   PERFORM DYNAMIC ALLOCATION USING A DATA AREA CREATED         ***\n***   BY MACRO GTEDADAT, AND POINTERS/DATA SET BY MACRO GTEDASET.  ***\n**********************************************************************\n*\n**********************************************************************\n***   SET VERB CODE INTO S99RB.                                    ***\n***   MAPPING MACRO IEFZB4D0 MUST APPEAR IN THE SOURCE.            ***\n**********************************************************************\n*\n&LABEL   LA    1,&NM.RB\n.*\n.VBAL    AIF   ('&VERB' NE 'AL').VBUN\n         MVI   (S99VERB-S99RB)(1),S99VRBAL   SET VERB, DSN ALLOC\n         AGO   .VBEND\n.VBUN    AIF   ('&VERB' NE 'UN').VBCC\n         MVI   (S99VERB-S99RB)(1),S99VRBUN   SET VERB, DSN UNALLOC\n         AGO   .VBEND\n.VBCC    AIF   ('&VERB' NE 'CC').VBDC\n         MVI   (S99VERB-S99RB)(1),S99VRBCC   SET VERB, CONCATENATE\n         AGO   .VBEND\n.VBDC    AIF   ('&VERB' NE 'DC').VBRI\n         MVI   (S99VERB-S99RB)(1),S99VRBDC   SET VERB, DECONCATENATE\n         AGO   .VBEND\n.VBRI    AIF   ('&VERB' NE 'RI').VBDN\n         MVI   (S99VERB-S99RB)(1),S99VRBRI   SET VERB, REMOVE IN-USE\n         AGO   .VBEND\n.VBDN    AIF   ('&VERB' NE 'DN').VBIN\n         MVI   (S99VERB-S99RB)(1),S99VRBDN   SET VERB, DDN ALLOC\n         AGO   .VBEND\n.VBIN    AIF   ('&VERB' NE 'IN').VBEND\n         MVI   (S99VERB-S99RB)(1),S99VRBIN   SET VERB, REQUEST INFO\n         AGO   .VBEND\n.VBEND   ANOP\n.*\n*\n**********************************************************************\n***    DO DYNAMIC ALLOCATION                                       ***\n**********************************************************************\n*\n         LA    1,&NM.RBP                ADDRESS OF PTR TO SVC-99 RB\n         SVC   99                       DYNALLOC\n         ST    15,&NM.S99RC             SAVE RETURN CODE FROM SVC-99\n.*\n.*********************************************************************\n.**                                                                ***\n.**   IF &ERRMSG=NO, DO NOT EVER GENERATE CODE FOR IKJEFF18        ***\n.**                                                                ***\n.*********************************************************************\n.*\n         AIF   ('&ERRMSG' EQ 'NO').NOPR\n.*\n*\n**********************************************************************\n***    IF R/C FROM DYNAMIC ALLOCATION NOT ZERO,                    ***\n***    EXECUTE THE IKJEFF18 (DAIRFAIL) PROGRAM TO PRODUCE          ***\n***    ERROR MESSAGES.                                             ***\n**********************************************************************\n*\n         CNOP  2,4                      ALIGN FOR BRANCH INSTRUCTION\n         LTR   15,15                    IF RETURN CODE IS GOOD\n         BZ    EXZ&SYSNDX                 BRANCH TO END OF ROUTINE\n         BAL   1,EXA&SYSNDX  BRANCH AROUND LIST\n*\n**********************************************************************\n***    EXCEPTIONS, DON'T USE IKJEFF18 FOR THESE VERB/ERROR COMBOS  ***\n***                                                                ***\n         DC    H'1'          NUMBER OF MEMBERS IN THIS LIST\n         DC    X'02,0438'    VERB 02 ERR 0438 DDNAME NOT FOUND\n***                                                                ***\n**********************************************************************\n*\nEXA&SYSNDX LA    2,2(0,1)                    R2 IS POINTER TO COMBOS\n           LH    1,0(0,1)                    R1 IS COUNT OF COMBOS\n           LA    15,&NM.RB                   R15 IS BASE OF RB\n*\n           CLC   (S99VERB-S99RB)(1,15),0(2)  IF NO MATCH ON VERB\n           BNE   *+14                          BRANCH TO END OF LOOP\n           CLC   (S99ERROR-S99RB)(2,15),1(2) ELSE IF ERRCDE MATCHES\n           BE    EXZ&SYSNDX                    BRANCH TO ENDING\n           LA    2,6(0,2)                    POINT TO NEXT ENTRY\n           BCT   1,*-24                      LOOP BACK UP TIL EOL\n*\n         LA    1,&NM.DFPRM              POINT TO IKJEFF18 PARM BLOCK\n         CNOP  0,4                      ALIGN FOR FOLLOWING BAL\n         BAL   15,*+20                  LOAD CONST ADDR AND BRANCH\n         DC    A(*+8)                   ADDR OF LINK PARM LIST\n         DC    A(0)                     ADDR OF DCB (NONE)\n         DC    CL8'IKJEFF18'            EP NAME\n         SVC   6                        LINK\n*\n.NOPR    ANOP\nEXZ&SYSNDX NOPR  0                        END POINT\n         MEND\n++MAC(GTEDASET) DISTLIB(ISPAMAC) SYSLIB(ISPMACS) .\n         MACRO\n&LABEL   GTEDASET &NM,&CPPLPTR=\n.*\n.*          +-----------------------------------------------+\n.*          |  SEE MACRO GTEDADOC FOR DOCUMENTATION OF THE  |\n.*          |  USE OF THIS AND OTHER GTEDAXXX MACROS.       |\n.*          +-----------------------------------------------+\n.*\n*\n**********************************************************************\n***   SET POINTERS AND DATA FOR DYNAMIC ALLOCATION IN DATA AREAS   ***\n***   CREATED BY MACRO GTEDADAT.                                   ***\n**********************************************************************\n*\n**********************************************************************\n***      PLACE ADDRESS OF S99RB INTO S99RBPTR.                     ***\n**********************************************************************\n*\n&LABEL   LA    1,&NM.RB                       ==> R1 POINTS TO S99RB\n         ST    1,&NM.RBP                          FILL IN S99RBPTR\n         OI    &NM.RBP,X'80'                      TURN ON HI BIT\n*\n**********************************************************************\n***      FILL IN S99RB REQUEST BLOCK.                              ***\n***      MAPPING MACRO IEFZB4D0 MUST APPEAR IN SOURCE.             ***\n**********************************************************************\n*\n         MVI   (S99RBLN-S99RB)(1),X'14'           FILL IN LENGTH\n         MVI   (S99VERB-S99RB)(1),X'00'           ZERO VERB CODE\n         XC    (S99FLAG1-S99RB)(4,1),(S99FLAG1-S99RB)(1)   ZERO FLAGS1\n         OI    (S99FLAG1-S99RB)(1),S99ONCNV       SET FLAGS1 OK CONVRT\n         OI    (S99FLAG1-S99RB)(1),S99NOMNT       SET FLAGS1 NO MOUNT\n         LA    2,&NM.TUPL                     ==> R2 POINTS TO TUPL\n         ST    2,(S99TXTPP-S99RB)(0,1)            TUPL ADDR INTO RB\n         XC    (S99FLAG2-S99RB)(4,1),(S99FLAG2-S99RB)(1)   ZERO FLAGS2\n*\n**********************************************************************\n***  BUILD TUPL.                                                   ***\n***  KEY OF LAST TEXT UNIT MUST BE X'FF..'                         ***\n**********************************************************************\n*\n         LA    1,&NM.TU                       ==> R1 POINTS TO TUNITS\n         XR    0,0                                CLEAR R0 FOR COUNTER\n         XR    15,15                              CLEAR R15 WORK REG\n*\nRBA&SYSNDX CLI (S99TUKEY-S99TUNIT)(1),X'FF'       IF KEY IS X'FF..'\n         BE    RBD&SYSNDX                           BRANCH OUT OF LOOP\n         ST    1,0(0,2)                           ADDR OF KEY TO TUPL\n         LA    2,4(0,2)                           INCR POINTER TO TUPL\n*\n         ICM   0,3,(S99TUNUM-S99TUNIT)(1)         TU NUM TO R0\n         LA    1,4(0,1)                           R1 POINTS BEYOND NUM\n         LTR   0,0                                IF TU NUM IS 0\n         BZ    RBA&SYSNDX                         PROCESS NEXT TU\n*\n         ICM   15,3,0(1)                          TU LEN TO R15\n         LA    1,2(15,1)                          PNT BEYND LEN & PARM\n         BCT   0,*-8                              DO FOR EACH LEN+PARM\n*\n         B     RBA&SYSNDX                         PROCESS NEXT TU\n*\nRBD&SYSNDX LA  15,4(0,0)                          POINT TO LAST\n         SR    2,15                                 TUPL ENTRY\n         OI    0(2),S99TUPLN                      MARK LAST TUPL ENTRY\n*\n**********************************************************************\n***  FILL IN THE DAIRFAIL PARAMETER BLOCK.                         ***\n***  IKJEFFDF DFDSECT=YES,DFDSEC2=YES MUST APPEAR IN SOURCE.       ***\n**********************************************************************\n*\n         MVC   &NM.DFPRM+(DFS99RBP-DFDSECTD)(4),&NM.RBP *PTR TO RB\n*\n         LA    1,&NM.S99RC\n         ST    1,&NM.DFPRM+(DFRCP-DFDSECTD)             *PTR TO S99RC\n*\n         LA    1,&NM.F02EP\n         ST    1,&NM.DFPRM+(DFJEFF02-DFDSECTD)          *PTR TO EP\n*\n         LA    1,&NM.ID\n         ST    1,&NM.DFPRM+(DFIDP-DFDSECTD)             *PTR TO SW+ID\n*\n         MVC   &NM.DFPRM+(DFCPPLP-DFDSECTD)(4),&CPPLPTR *PTR TO CPPL\n*\n         XC  &NM.DFPRM+(DFBUFP-DFDSECTD)(4),&NM.DFPRM+(DFBUFP-DFDSECTD)\n*                                                       *ZERO BUFF ADDR\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AHMW001": {"ttr": 7169, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AHMW001) /* DFHSM MIGRATION VOLUME EXIT :\n\n       THIS EXIT WILL EXAMINE THE CURRENT FRAGMENTATION OF A VOLUME\n       AND WILL SUBMIT A DFDSS DEFRAG JOB IF NECESSARY.\n\n       NOTE: THIS EXIT WILL GO TO SYS2.LINKLIB (DDDEF HSSLINK).\n                                                                 */ .\n++ VER(Z038) FMID(HHM2302) .\n++ JCLIN .\n//GEN11 JOB WC07N0323,'531-1  CM SINGER'\n//SG22 EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,RENT,AC=1',\n//    UNIT='3380',SER=IPLXXX,N=SYS2,NAME=HSSLINK,P1=' ',\n//    MOD=,P2=' ',CLASS=T\n//SYSPUNCH DD DUMMY\n//INCLUDE DD DISP=SHR,DSNAME=MVS3.INCLUDE\n//SYSLIN DD *\n INCLUDE INCLUDE(ARCMVEXT)\n NAME ARCMVEXT(R)\n/*\n++ SRC(ARCMVEXT) DISTLIB(ASRCLIB) .\nARCMVEXT TITLE 'DFHSM ARCMVEXT - DFHSM MIGRATION VOLUME EXIT'\n***********************************************************************\n*                                                                     *\n*    NAME: DFHSM EXIT ARCMVEXT                                        *\n*                                                                     *\n*          SETSYS EXITS(YNNNNNNNN)                                    *\n*                                        **** ****                    *\n*   SPECIAL OPTIONS FOR LINKAGE EDITOR:  RENT,AC=1,NCAL,LIST,MAP,LET  *\n*                                        **** ****                    *\n*                                                                     *\n*   PURPOSE:  TO EXAMINE THE CURRENT FRAGMENTATION OF A VOLUME TO     *\n* SEE IF IT NEEDS TO BE DE-FRAGED BY A DF/DSS JOB.                    *\n*                                                                     *\n*                                                                     *\n*       WHO    |    DATE     |     PURPOSE                            *\n*   -----------+-------------+------------------------------------    *\n*     CROWLEY  |  10 FEB 88  | STARTED !!!                            *\n*     CROWLEY  |  12 FEB 88  | TESTED                                 *\n*     CROWLEY  |  06 APR 88  | ADDED TIME CHECK AND VOL CHECK         *\n*     CROWLEY  |  14 APR 88  | REDID VOLUME CHECK LOGIC TO ALL MPR VOL*\n*     CROWLEY  |  27 JUL 88  | CHANGED TO ONLY START THE JOB ON SY3   *\n*     CROWLEY  |  11 JAN 89  | CHANGED TO DEFRAG SHR80 VOLS           *\n*                                                                     *\n***********************************************************************\n*        SAVE REGS AND GETMAIN MY STORAGE\nARCMVEXT CSECT\n         SAVE    (14,12),,*\n         LR      R12,R15\n*                         LOAD REG 10 WITH PARMETER LIST\n         LR      R10,R1\n         USING   ARCMVEXT,R12\n         GETMAIN R,LV=WORKSIZE,SP=0\n         LR      R11,R1\n         USING   SAVEAREA,R11\n         ST      R13,SAVE+4\n         ST      R11,8(,R13)\n         LR      R13,R11\n         LM      R3,R5,0(R10)    PICKUP PARAMETER LIST\n*                                R3 @ VOLSER ---=> CHAR(6)\n*                                R4 @ DEVTYPE --=> FIXED(31)\n*                                R5 @ FRAG. IN -=> FIXED(31) 1-1000\n        L       R5,0(R5)\n        C       R5,=F'250'       IS FRAGMENTATION OVER .250\n        BL      EXIT             NO, EXIT.\n        MVC     PARM,SKELETON    YES, BUILD START COMMAND\n        MVC     VOLSER,0(R3)\n        CLC     =C'TSO',VOLSER   IS IT A TSO VOLUME\n        BE      TIME             YES, GOOD VOLUMES GO CHECK TIME\n        CLC     =C'SHR80',VOLSER IS IT A SHR80 VOLUME\n        BE      TIME             YES, GOOD VOLUMES GO CHECK TIME\n        C       R5,=F'450'       IS FRAGMENTATION OVER .450\n        BL      EXIT             NO, EXIT.\n        CLC     =C'MPR',VOLSER   IS IT A MPR VOLUME\n        BE      TIME             YES, GOOD VOLUMES GO CHECK TIME\n        B       EXIT             NOT A KNOWN VOLUME\nTIME    EQU     *\n        TIME    DEC,ERRET=EXIT\n        CLM     R0,B'1100',=X'1800'   IS IT AFTER SIX PM\n        BH      START               YES START JOB\n        CLM     R0,B'1100',=X'0559'   IS IT BEFORE SIX AM\n        BL      START               YES START JOB\n        B       EXIT                NOT THE RIGHT TIME\nSTART   EQU     *\n        MODESET KEY=ZERO,MODE=SUP  GOTO SUPERVISOR STATE\n        SLR     R0,R0\n        LA      R1,PARM\n        SVC     34                ISSUE THE START\n        MODESET KEY=NZERO,MODE=PROB\nEXIT    EQU     *\n        LR      R1,R11\n        L       R13,SAVE+4\n        FREEMAIN R,A=(1),LV=WORKSIZE,SP=0      FREE THE STORAGE\n        RETURN (14,12),T,RC=0                  AND RETURN\nSKELETON DC     CL80' '\n        ORG    SKELETON\nLENGTH  DC      H'50'\n        DC      H'0'\nCOMMAND DC      C'S JESCMD,PARM=''*T SY3,S HSMDFDSS,V='\nVOLUME  DC      C'XXXXXX'\nTICK    DC      X'7D'\n        ORG\n        LTORG\nSAVEAREA DSECT\nSAVE     DS    18F\nSAVESIZE EQU   *-SAVEAREA\nPARM     DS    CL80\n         ORG   PARM\nPARMLEN  DS    H\n         DS    H\nCMDTEXT  DS    CL(L'COMMAND)\nVOLSER   DS    CL(L'VOLUME)\nQUOTE    DS    CL(L'TICK)      CLOSING QUOTE MARK\n         ORG\nWORKSIZE EQU   *-SAVEAREA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nA        EQU   10\nB        EQU   11\nC        EQU   12\nD        EQU   13\nE        EQU   14\nF        EQU   15\nFF       EQU   255\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AHMW002": {"ttr": 7172, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AHMW002) /* HSM TAPE DATASET EXIT   :\n\n       THIS MODIFICATION WILL CAUSE DFHSM TO HOLD BACKUP OR SECOND\n       LEVEL MIGRATION, INSTEAD OF ASKING FOR A SCRATCH TAPE MOUNT.\n\n       NOTE: THIS EXIT WILL GO TO SYS2.LINKLIB (DDDEF HSSLINK).\n                                                                 */ .\n++ VER(Z038) FMID(HHM2302) .\n++ JCLIN .\n//GEN11 JOB WC07N0323,'531-1  CM SINGER'\n//SG22 EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS2,NAME=HSSLINK,P1=' ',\n//    MOD=,P2=' ',CLASS=T\n//SYSPUNCH DD DUMMY\n//INCLUDE DD DISP=SHR,DSNAME=MVS3.INCLUDE\n//SYSLIN DD *\n INCLUDE INCLUDE(ARCTDEXT)\n NAME ARCTDEXT(R)\n/*\n++ SRC(ARCTDEXT) DISTLIB(ASRCLIB) .\nARCTDEXT TITLE 'DFHSM ARCTDEXT - DFHSM TAPE DATASET EXIT'\n***********************************************************************\n*                                                                     *\n*    NAME: DFHSM EXIT ARCTDEXT                                        *\n*                                                                     *\n*          SETSYS EXITS(NNNNNNYNN)                                    *\n*                                        ****                         *\n*   SPECIAL OPTIONS FOR LINKAGE EDITOR:  RENT,NCAL,LIST,MAP,LET       *\n*                                        ****                         *\n*                                                                     *\n*   PURPOSE:  TO EXAMINE THE JFCB TO SEE IF THE VOLSER IS OUT OF      *\n* SPECIFIED RANGE FOR HSM USE.  IF IT IS, ABEND AND CUASE WHAT EVER   *\n* FUNCTION (IE. BACKUP MIGRATION OR DELVOL) TO BE HELD.               *\n*                                                                     *\n*       WHO    |    DATE     |     PURPOSE                            *\n*   -----------+-------------+------------------------------------    *\n*     CROWLEY  |  14 JAN 87  | STARTED !!!                            *\n*     CROWLEY  |  14 JAN 87  | TESTED                                 *\n*     CROWLEY  |  15 JAN 87  | CHANGED ROUTE CODE DESCRIPTOR          *\n*     SINGER   |  21 APR 88  | CHANGED FMID FOR DFHSM 2.3.1 (HHM2302) *\n*                                                                     *\n***********************************************************************\nARCTDEXT CSECT\n*\n*    SETUP SAVE AREA AND SAVE CALLERS REGS AND GETMAIN STORAGE\n*\n         SAVE  (14,12),,*\n         LR    R12,R15\n         LR    R10,R1\n         USING ARCTDEXT,R12\n         GETMAIN R,LV=WORKSIZE,SP=0      GET SAVEAREA + WORKAREA\n         LR    R11,R1\n         USING SAVEAREA,R11\n         ST    R13,SAVE+4\n         ST    R11,8(,R13)\n*\n*     SETUP BASE REGISTERS\n*\n         LM    R3,R3,0(R10)          PICKUP PARAMETER ADDRESS VECTOR\n*                                  R3 @ JFCB --->CHAR(176)\n*\n         MVC   VOLSER,118(R3)        MOVE THE VOLSER\n         CLC   VOLSER,=C'21'         BEGIN WITH 21\n         BE    DONE                  YES DONE\n         CLC   VOLSER,=C'22'         BEGIN WITH 22\n         BE    DONE                  YES DONE\n         WTO   'WARNING, DFHSM HAS CALLED FOR A NON HSM TAPE'\n         WTO   'FUNCTION BEING HELD'\n         LR     R1,R11\n         L      R13,SAVE+4\n         FREEMAIN R,A=(1),LV=WORKSIZE,SP=0\n         ABEND  122\nDONE     EQU    *\n         LR     R1,R11\n         L      R13,SAVE+4\n         FREEMAIN R,A=(1),LV=WORKSIZE,SP=0\n         RETURN (14,12),T,RC=0\n*\n         ORG\n*\n         LTORG\n*\nSAVEAREA DSECT\nSAVE     DS     18F\nSAVESIZE EQU    *-SAVEAREA\nVOLSER   DS     CL2\n         ORG\nWORKSIZE EQU    *-SAVEAREA\n         EJECT\nR0       EQU    0\nR1       EQU    1\nR2       EQU    2\nR3       EQU    3\nR4       EQU    4\nR5       EQU    5\nR6       EQU    6\nR7       EQU    7\nR8       EQU    8\nR9       EQU    9\nR10      EQU    10\nR11      EQU    11\nR12      EQU    12\nR13      EQU    13\nR14      EQU    14\nR15      EQU    15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AHMW003": {"ttr": 7175, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AHMW003) /* HSM - ACF2 SUPPORT:\n\n       THIS MODIFICATION IS A FRONT END FOR IGX00024 ( THE HSM\n       COMMUNICATIONS SVC).  ALL USER HSM COMMANDS ARE PASSED ONE\n       AT A TIME THROUGH THIS INTERFACE.  NOTE THAT THE VOLUME\n       FUNCTIONS AND THE HSEND COMMAND ARE NOT CHECKED IN THIS EXIT,\n       THEIR USE IS LIMITED BY THE HSM AUTH COMMAND.\n                                                                 */ .\n++ VER(Z038) FMID(HHM2302) .\n++ JCLIN .\n//GEN11 JOB WC07N0323,'W15311 C SINGER'\n//SG17 EXEC LINKS,\n// PARM='RENT,LIST,XREF,LET',\n//    UNIT='3380',SER=IPLXXX,N=SYS1,NAME=LPALIB,P1=' ',\n//    MOD=,P2=' ',CLASS=T\n//SYSPUNCH DD DUMMY\n//AOS28 DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=SYS1.AOS28\n//INCLUDE DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=MVS3.INCLUDE\n//ACFMOD DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=SYS1.ACFMOD\n//SYSLIN DD *\n INCLUDE AOS28(IGX00024)\n INCLUDE INCLUDE(ACX00024)\n INCLUDE ACFMOD(ACF$GCVT)\n ENTRY ACX00024\n NAME IGX00024(R)\n/*\n++ SRC (ACX00024) DISTLIB(ASRCLIB) .\n         TITLE 'ACF2 FRONT END FOR HSM SVC INTERFACE'\n         ACDSV\n         ACCVT\n         ACFREGS\nACX00024 CSECT\n         BALR  R15,0                  LOCATE ENTRY POINT\n         USING *,R15                  ADDRESS IT\n         SAVE  (14,12),,*             SAVE CALLERS REGISTERS\n         DROP  R15                    DROP IT\n         BALR  R12,0                  LOCATE ENTRY POINT\n         USING *,R12                  ADDRESS IT\n         LR    R11,R1                 INIT BASE FOR MWE\n         USING MWE,R11                SET UP ADDRESSABLITY\n         SR    R9,R9                  CLEAR ACDSV BASE REGISTER\n* * * * * * * * * * * * * * * * * * * * * * * *\n*   EXAMINE FUNCTION CODE PASSED TO THE SVC   *\n*   IF APPROPRIATE, PASS CONTROL ON TO THE    *\n*   HSM SVC WITH A MINIMUM AMOUNT OF FUSS     *\n* * * * * * * * * * * * * * * * * * * * * * * *\n         LTR   R10,R0                 IS CHECK FUNCTION CODE > 0?\n         BNP   HSMSVC                 ..NO, GO TO HSM SVC\n         C     R10,=F'12'             IS FUNCTION CODE OUT OF RANGE?\n         BH    HSMSVC                 ..YES, GO TO HSM SVC\n         MH    R10,=H'04'             MULTIPLY BY 4 FOR BRANCH INDEX\nFUNCTION B     FUNCTION(10)           CHOSE THE PROPER FUNCTION\nF1       B     HSMSVC                 START UP HSM\nF2       B     HSMSVC                 SHUT DOWN HSM\nF3       B     RECALL                 RECALL DATASET\nF4       B     HSMSVC                 UNUSED\nF5       B     RECOVER                RECOVER DATASET\nF6       B     MIGRATE                MIGRATE DATASET\nF7       B     BACKDS                 BACKUP DATASET\nF8       B     HSMSVC                 RETURN CDS RECORD\nF9       B     HSMSVC                 SEND COMMAND TO HSM\nF10      B     HSMSVC                 POST REQUEST COMPLETE\nF11      B     HSMSVC                 MWE PURGE REQUEST\nF12      B     DELETE                 DELETE MIGRATED\n         EJECT\nRECALL   DS    0H\n         B     HSMSVC                 IMPLICIT OR EXPLICIT RECALL OK\n         SPACE 3\nRECOVER  DS    0H                     RECOVER DATASET\n         LA    R6,MWEDSN              GET DSNAME ADDRESS\n         LA    R7,MWEVSN              GET VOLSER ADDRESS\n         BAL   R8,VALIDATE            VALIDATE AND RETURN HERE IF OK\n         CLC   MWENDSN,=44C' '        WAS A NEW NAME SPECIFIED?\n         BE    HSMSVC                 ..NO, GO TO HSM SVC\n         CLC   MWENDSN,MWEDSN         IS NEW NAME SAME AS OLD NAME?\n         BE    HSMSVC                 ..YES, GO TO HSM SVC\n         LA    R6,MWENDSN             GET RENAME ADDRESS\n         XR    R7,R7                  SET A ZERO VOLSER ADDRESS\n         BAL   R8,VALIDATE            VALIDATE AND RETURN HERE IF OK\n         B     HSMSVC                 ALL DONE, GO DO HSM SVC\n         SPACE 3\nMIGRATE  DS    0H                     MIGRATE DATASET\n         LA    R6,MWEDSN              GET DSNAME ADDRESS\n         LA    R7,MWEVSN              GET VOLSER ADDRESS\n         BAL   R8,VALIDATE            VALIDATE AND RETURN HERE IF OK\n         B     HSMSVC                 ALL DONE, GO DO HSM SVC\n         SPACE 3\nBACKDS   DS    0H                     BACKUP DATASET\n         LA    R6,MWEDSN              GET DSNAME ADDRESS\n         LA    R7,MWEVSN              GET VOLSER ADDRESS\n         BAL   R8,VALIDATE            VALIDATE AND RETURN HERE IF OK\n         B     HSMSVC                 ALL DONE, GO DO HSM SVC\n         SPACE 3\nDELETE   DS    0H                     DELETE DATASET\n         LA    R6,MWEDSN              GET DSNAME ADDRESS\n         XR    R7,R7                  SET VOLSER ADDRESS TO ZERO\n         BAL   R8,VALIDATE            VALIDATE AND RETURN HERE IF OK\n         B     HSMSVC                 ALL DONE, GO DO HSM SVC\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*   R5 ==> RETURN CODE FROM ACCESS REQUEST                      *\n*   R6 ==> ADDRESS OF 44 CHARACTER DATASET NAME FOR ACCESS RULE *\n*   R7 ==> ADDRESS OF 6 BYTE VOLSER                             *\n*   R8 ==> RETURN ADDRESS IF REQUEST IS VALID                   *\n*   R9 ==> ADDRESS OF ACDSV                                     *\n*   IF ACCESS IS AUTHORIZED, CONTROL IS RETURNED TO CALLER      *\n*   IF ACF2 IS NOT ACTIVE, CONTROL IS RETURNED TO CALLER        *\n*   IF ACCESS IS NOT AUTHORIZED, ALL FURTHER PROCESSING ABORTED *\n*   IF ACF2 PARMS ARE INVALID, ALL FURTHER PROCESSING ABORTED   *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nVALIDATE DS    0H                     DELETE DATASET\n         LTR   R9,R9                  DOES ACDSV EXIST?\n         BNZ   INITDSV                ..YES, GO FILL IN THE VALUES\n         GETMAIN RU,LV=ACFSPRML       GET WORK AREA FOR ACDSV\n         LR    R9,R1                  SET POINTER TO GETMAINED AREA\n         USING ACDSV,R9               SET UP ADDRESSABILITY\n         SPACE 3\nINITDSV  DS    0H\n         MVI   ACFSPARM,X'00'         INIT 1ST BYTE OF ACDSV TO ZERO\n         MVC   1(ACFSPRML-2,R9),ACFSPARM  ZERO OUT THE REST OF ACDSV\n         MVI   ACFSPREQ,ACFSPRAC      VALIDATE DSN/VOL/DDN\n         MVI   ACFSPID1,ACFSPIUR      SECURITY REQUESTOR ID = USER REQ\n         MVI   ACFSPAC1,ACFSPAOT      ACCESS TYPE RENAME/SCRATCH/ALLOC\n         ST    R6,ACFSPDSN            INIT DSN ADDRESS\n         LTR   R7,R7                  SHOULD VOLSER BE USED?\n         BZ    USERSVC                ..NO, GO ISSUE SVC\n         CLC   0(6,R7),=C'      '     IS VOLSER BLANK?\n         BE    USERSVC                ..YES, DONT USE VOLSER\n         CLI   0(R7),C'*'             IS THIS GLOBAL VOLUME FUNCTION?\n         BE    USERSVC                ..YES, DONT USE VOLSER\n         ST    R7,ACFSPVOL            INIT VOLSER INFORMATION\n         SPACE 3\nUSERSVC  ACFSVC ACDSV,TYPE=S,NONE=NOACF2  ISSUE ACF2 SVC\n         LTR   R15,R15                TEST SVC RETURN CODE\n         BZR   R8                     EVERTHING OK, RETURN TO CALLER\n         CH    R15,=H'12'             IS REQUEST A VIOLATION?\n         BE    ABORT                  ..YES, DO NOT ALLOW REQUEST\n         B     BADPARM                MUST BE INVALID SVC INPUT PARM\n         SPACE 3\nNOACF2   DS    0H\n         BR    R8                     RETURN TO COMMAND IF ACF2 INACT\n         SPACE 3\nABORT    DS    0H\n         LA    R5,24                  INDICATE HSM SECURITY VIOLATION\n         B     TESTFREE               GO FREE STORAGE IF NEEDED\n         SPACE 3\nBADPARM  DS    0H\n         LA    R5,100                 INDICATE BAD HSM PARM LIST\n         B     TESTFREE               GO FREE STORAGE IF NEEDED\n         SPACE 3\nTESTFREE DS    0H\n         LTR   R9,R9                  IS FREEMAIN NEEDED?\n         BZ    RETURN                 ..NO, SKIP FREEMAIN\n         FREEMAIN RU,LV=ACFSPRML,A=(R9)  FREE STORAGE\n         SPACE 3\nRETURN   DS    0H\n         L     R14,12(,R13)           RESTORE R14\n         LR    R15,R5                 MOVE RETURN CODE TO R15\n         LM    R0,R12,20(R13)         RESTORE CALLERS REGISTERS\n         BR    R14                    RETURN TO CALLER\n         SPACE 3\nHSMSVC   DS    0H\n         LTR   R9,R9                  IS FREEMAIN NEEDED?\n         BZ    PROCEED                ..NO, SKIP FREEMAIN\n         FREEMAIN RU,LV=ACFSPRML,A=(R9)  FREE STORAGE\n         SPACE 3\nPROCEED  DS    0H\n         L     R14,12(,R13)           RESTORE R14\n         L     R15,IGX00024           POINT AT IGX00024\n         LM    R0,R12,20(R13)         RESTORE CALLERS REGISTERS\n         BR    R15                    BRANCH TO HSM SVC\n         LTORG\nIGX00024 DC    V(IGX00024)            CSECT ADDRESS FOR REAL HSM SVC\nMWE      DSECT                        HSM MANAGEMENT WORK ELEMENT\n         DS    CL148\nMWEDSN   DS    CL44                   MWE DATASET NAME\n         DS    CL20\nMWEVSN   DS    CL6                    MWE VOLSER\n         DS    CL70\nMWERETR  DS    0CL1                   MWE RECOVER EXTENTION (MWE+256)\nMWENDSN  DS    CL44                   MWE NEW DATASET NAME\nMWEFRVOL DS    CL6                    MWE VOLSER\n         END   ACX00024\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AHMW005": {"ttr": 7179, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AHMW005) /* HSM RECALL EXIT    :\n\n       THIS MODIFICATION WILL STOP MIGRATION OF 'LARGE' DATASETS.\n       DATASETS LARGER THAN 75 CYLINDERS IN LENGTH WILL NOT BE\n       MIGRATED.\n       NOTE: THIS EXIT IS IN SYS2.LINKLIB (DDDEF HSSLINK) .\n                                                                 */ .\n++ VER(Z038) FMID(HHM2302) .\n++ JCLIN .\n//GEN11 JOB WC07N0323,'531-1  CM SINGER'\n//SG22 EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,RENT',\n//    UNIT='3380',SER=IPLXXX,N=SYS2,NAME=HSSLINK,P1=' ',\n//    MOD=,P2=' ',CLASS=T\n//SYSPUNCH DD DUMMY\n//INCLUDE DD DISP=SHR,DSNAME=MVS3.INCLUDE\n//SYSLIN DD *\n INCLUDE INCLUDE(ARCMDEXT)\n NAME ARCMDEXT(R)\n/*\n++ SRC(ARCMDEXT) DISTLIB(ASRCLIB) .\nARCMDEXT TITLE 'DFHSM ARCMDEXT - DFHSM MIGRATION LEVEL 1 EXIT'\n***********************************************************************\n*                                                                     *\n*    NAME: DFHSM EXIT ARCMDEXT                                        *\n*                                                                     *\n*          SETSYS EXITS(NYNNNNNNN)                                    *\n* *\n*   SPECIAL OPTIONS FOR LINKAGE EDITOR:  NCAL,LIST,MAP,LET            *\n* *\n*                                                                     *\n*   PURPOSE:  TO STOP MIGRATION OF \"LARGE\" DATA SETS.  DATA SETS      *\n* OVER 52158 * 1024 (75 CYLINDERS) IN LENGTH WILL NOT BE MIGRATED.    *\n*                                                                     *\n*   RETURN CODES IN ADRESS OF REG 6                                   *\n*                                                                     *\n*    CODE         WHAT IT WILL DO                                     *\n*     0           MIGRATE NORMALLY                                    *\n*     4           MIGRATE BUT, NO COMPACTION                          *\n*     8           DO NOT MIGRATE                                      *\n*    12           MIGRATE NORMALLY (SAME AS 0)                        *\n*    16           MIGRATE BUT, NO COMPACTION (SAME AS 4)              *\n*                                                                     *\n*       WHO    |    DATE     |     PURPOSE                            *\n*   -----------+-------------+------------------------------------    *\n*     CROWLEY  |  05 JUL 88  | STARTED !!!                            *\n*     SINGER   |  15 JUL 88  | MOVED CODE TO MVS3.XAMODS.DATA(AHMW005)*\n*     W.EVANS  |  31 OCT 88  | INCREASED MIGR LIMIT TO 75 CYLS FROM 50*\n*                                                                     *\n***********************************************************************\nARCMDEXT CSECT\n*\n*    SETUP SAVE AREA AND SAVE CALLERS REGS AND GETMAIN STORAGE\n*\n         SAVE  (14,12),,*\n         LR    R12,R15\n         LR    R10,R1\n         USING ARCMDEXT,R12\n         GETMAIN R,LV=WORKSIZE,SP=0      GET SAVEAREA + WORKAREA\n         LR    R11,R1\n         USING SAVEAREA,R13\n         ST    R13,4(R1)\n         ST    R1,8(R13)\n         LR    R13,R1\n*\n*     SETUP BASE REGISTERS\n*\n         LM    R3,R6,0(R10)          PICKUP PARAMETER ADDRESS VECTOR\n*                                  R3 @ FMT1 DCB ----==> 140 BYTES LONG\n*                                  R4 @ VOLSER ------==> 6 BYTES LONG\n*                                  R5 @ DSSIZE   ----==> 4 BYTES LONG\n*                                  R6 @ RETURN CODE--==> 4 BYTES LONG\n         USING  DSCBF1,R3            DSCDF1 DSECT MAPPING MACRO\n         USING  RCODE,R6             RETURN CODE\n         L      R5,0(R5)             GET WHAT IS AT THE ADDRESS OF R5\n         C      R5,=F'52158'         LARGER THAN 75 CYLINDERS??\n*                                    52158 * 1024 = 75 CYLINDERS\n         BL     RETURN0\nRETURN8  EQU    *\n         MVC    CODE,EIGHT\n         B      DONE\nRETURN0  EQU    *\n         MVC    CODE,ZERO\n         B      DONE\n****************************************************************\n*   ALL DONE, CLEAN UP STORAGE AND RETURN\n****************************************************************\nDONE     EQU    *                     DONE RESET REGS AND RETURN CNTL\n         LR     R1,R11\n         L      R13,SAVE+4\n         FREEMAIN R,A=(1),LV=WORKSIZE,SP=0\n*        DC     F'0'\n         RETURN (14,12),T,RC=0\n         EJECT\n****************************************************************\n*   CONSTANTS\n****************************************************************\nEIGHT    DC     F'8'\nZERO     DC     F'0'\n*\n         ORG\n*\n         LTORG\n*\n         EJECT\nSAVEAREA DSECT\nSAVE     DS     18F\nSAVESIZE EQU    *-SAVEAREA\n         ORG\nWORKSIZE EQU    *-SAVEAREA\n         EJECT\nR0       EQU    0\nR1       EQU    1\nR2       EQU    2\nR3       EQU    3\nR4       EQU    4\nR5       EQU    5\nR6       EQU    6\nR7       EQU    7\nR8       EQU    8\nR9       EQU    9\nR10      EQU    10\nR11      EQU    11\nR12      EQU    12\nR13      EQU    13\nR14      EQU    14\nR15      EQU    15\n         CNOP  2,4\n         EJECT\nRCODE    DSECT\nCODE     DS     1F\nDSCBF1   DSECT\n         IECSDSL1 (1)             MAP FORMAT 1 DSCB\n         EJECT\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AIFW001": {"ttr": 7425, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD(AIFW001)  /* INSTALLS TSO COMMAND IN ISPF COMMAND TABLE\n                                                   */ .\n++VER(Z038) FMID(HIF2302) .\n++JCLIN .\n//AIFW001  JOB WC07N0323,'THOMPSON - HSS'\n//AIFW001  EXEC LINKS,PARM='MAP,LET,LIST,RENT,REUS,NCAL'\n//SYSLMOD  DD DSN=SYS1.ISP.V2R3M0.ISPLOAD,DISP=SHR\n//AISPMOD1 DD DISP=SHR,DSNAME=SYS1.AISPMOD1,DISP=SHR\n//SYSLIN   DD *\n  INCLUDE AISPMOD1(ISPTCM)\n  NAME ISPTCM(R)\n++SRC(ISPTCM) DISTLIB(ASRCLIB) .\n********************************************************************\n*\n*    COPYRIGHT =\n*       5665-319 COPYRIGHT (C) IBM CORP 1987\n*       LICENSED MATERIALS - PROGRAM PROPERTY OF IBM\n*       REFER TO COPYRIGHT INSTRUCTIONS FORM NUMBER G120-2083\n*\n*    STATUS =  ISPF VERSION 2 RELEASE 3\n*\n*    FUNCTION =\n*       GENERATE ISPTCM  MODULE\n*\n*    INVOCATION =\n*       REFER TO 'ISPF AND ISPF/PDF INSTALLATION AND CUSTOMIZATION\n*       GUIDE' VERSION 2 RELEASE 3 FOR INFORMATION ON CUSTOMIZING\n*       THE ISPTCM MODULE.\n*    NOTES =\n*     1. THE ENTNAME VALUES MUST BE IN UPPER CASE.\n*     2. THE FIELDS OF THE FLAG BYTE FOR AN ENTRY ARE AS FOLLOWS\n*          B'.       ' = RESERVED\n*          B' 1      ' = COMMAND TO HAVE VARIABLE POOL\n*          B'  1     ' = COMMAND CANDIDATE FOR AUTH CHECK\n*          B'   1    ' = COMMAND IS NOT TO BE LOGGED\n*          B'    1   ' = COMMAND IS NOT SUPPORTED UNDER ISPF\n*          B'     1  ' = COMMAND IS A COMMAND PROCEDURE (CLIST)\n*          B'      1 ' = COMMAND IS A COMMAND PROCESSOR\n*          B'       1' = COMMAND REQUIRES A BLDL TO BE ISSUED\n********************************************************************\n* HEADER\n*\n      ISPMTCM HEADER\n*\n* ONE ENTRY TYPE CALL FOR EACH COMMAND IN THE TCM.\n* IT IS NOT REQUIRED THAT THE ENTRY NAMES BE IN ALPHABETIC ORDER\n*\n        ISPMTCM  FLAG=02,ENTNAME=ACCOUNT  TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=42,ENTNAME=ADDALIAS PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=ALLOC    TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=ALLOCATE TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=ALTER    AMS COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=42,ENTNAME=APL2     PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=ASM      PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=ATTR     TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=ATTRIB   TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=BIX      AMS COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=BLDINDEX AMS COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=CALC     PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=42,ENTNAME=CALL     TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=CANCEL   TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=CHKLIST  AMS COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=CKLST    AMS COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=CNVTCAT  AMS COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=COB      PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=COBOL    PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=CON      PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=CONVERT  PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=COPY     PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=D        TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=DEF      AMS COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=42,ENTNAME=DELALIAS PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=DEFINE   TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=DEL      TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=DELETE   TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=DSPRINT  PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=E        TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=EDIT     TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=END      TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=EX       TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=EXEC     TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=EXP      AMS COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=EXPORT   AMS COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=EXPORTRA AMS COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=FORM     PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=FORMAT   PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=FORT     PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=FREE     TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=42,ENTNAME=GOFORT   PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=H        TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=HELP     TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=IMP      AMS COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=IMPORT   AMS COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=IMPORTRA AMS COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=08,ENTNAME=ISPF     PP  COMMAND, INVALID\n        ISPMTCM  FLAG=08,ENTNAME=ISPSTART PP  COMMAND, INVALID\n        ISPMTCM  FLAG=03,ENTNAME=JOBCUU$  TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=L        PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=LINK     TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=LIST     PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=LISTA    TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=LISTALC  TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=22,ENTNAME=LISTB    TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=22,ENTNAME=LISTBC   TSO CMD, CMD PROC,AUTHCK\n        ISPMTCM  FLAG=02,ENTNAME=LISTC    TSO CMD, CMD PROC,AUTHCK\n        ISPMTCM  FLAG=02,ENTNAME=LISTCAT  TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=LISTCRA  AMS COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=22,ENTNAME=LISTD    TSO CMD, CMD PROC,AUTHCK\n        ISPMTCM  FLAG=22,ENTNAME=LISTDS   TSO CMD, CMD PROC,AUTHCK\n        ISPMTCM  FLAG=02,ENTNAME=LISTR    AMS COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=LOAD     TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=42,ENTNAME=LOADGO   TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=08,ENTNAME=LOGOFF   TSO COMMAND, INVALID\n        ISPMTCM  FLAG=08,ENTNAME=LOGON    TSO COMMAND, INVALID\n        ISPMTCM  FLAG=02,ENTNAME=MERGE    PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=MPRA     AMS COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=OLDPROF  TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=OPER     TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=OPERATOR TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=OUT      TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=OUTPUT   TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=04,ENTNAME=PASCALVS PP  COMMAND, CLIST\n        ISPMTCM  FLAG=08,ENTNAME=PDF      PP  COMMAND, INVALID\n        ISPMTCM  FLAG=02,ENTNAME=PLI      PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=42,ENTNAME=PLIC     PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=PRINT    AMS COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=PROF     TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=PROFILE  TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=12,ENTNAME=PROT     TSO CMD, CMD PROC, NO LOG\n        ISPMTCM  FLAG=12,ENTNAME=PROTECT  TSO CMD, CMD PROC, NO LOG\n        ISPMTCM  FLAG=02,ENTNAME=PRTCUU$  TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=42,ENTNAME=R        TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=RCAT     AMS COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=REN      TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=RENAME   TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=REPRO    AMS COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=RESETCAT AMS COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=42,ENTNAME=RUN      TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=SCRIPT   PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=22,ENTNAME=SE       TSO CMD, CMD PROC, AUTHCK\n        ISPMTCM  FLAG=22,ENTNAME=SEND     TSO CMD, CMD PROC, AUTHCK\n        ISPMTCM  FLAG=08,ENTNAME=SPF      PP  COMMAND, INVALID\n        ISPMTCM  FLAG=02,ENTNAME=ST       TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=STATUS   TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=SUB      TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=SUBMIT   TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=TERM     TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=TERMINAL TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=08,ENTNAME=TEST     TSO COMMAND, INVALID\n        ISPMTCM  FLAG=42,ENTNAME=TESTCOB  PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=42,ENTNAME=TESTFORT PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=TIME     TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=TSOCUU$  TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=VERIFY   AMS COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=VFY      AMS COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=VPSPRINT PP  COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=WHEN     TSO COMMAND, CMD PROCESSOR\n        ISPMTCM  FLAG=02,ENTNAME=XPRA     AMS COMMAND, CMD PROCESSOR\n* END CARD. STATEMENTS AFTER THIS CARD WILL BE IGNORED\n        ISPMTCM  END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW002": {"ttr": 7429, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW002)  /*\n\n           THIS MODIFICATION PERFORMS THESE FUNCTIONS IN IATUX29:\n\n    1. - CHANGES THE JES3 DEFAULTS TO BE NORINGCK AND NO EXPDTCK.\n                 THIS IS NECESSARY SINCE ALL OUR TAPES HAVE RINGS\n                 IN THEM AND OUR TAPE LIBRARY SYSTEM USES THE EXPDT\n                 FIELD FOR OTHER THINGS (AND IT MAY BE HIGH).\n    2. - CAUSES STARTED TASKS BEGINING WITH 'IMS', 'CIC', AND 'NET'\n                TO BE ASSIGNED 50 STAGING AREAS RATHER THAN THE\n                (NORMAL) DEFAULT OF 10.\n    3. - INSTALLS THE ACF2 CODE FOR JOB VALIDATION.\n    4. - DOES ACCOUNT VALIDATION FOR USAGE CHARGES.\n                                                           */ .\n++ VER(Z038) FMID(HJS2215).\n++ SRCUPD(IATUX29) .\n./ CHANGE NAME=IATUX29\n* USER MODS:                                                    AJSW002\n*            - CHANGE DEFAULTS TO NORINGCK AND NO EXPDTCK.      AJSW002\n*                                                               AJSW002\n*            - GIVE 50 STARS TO STARTED TASKS BEGINNING WITH    AJSW002\n*              'IMS', 'CICS', 'NET', 'IDMS', 'M204', 'WCRMO',   AJSW002\n*              AND 'HSM' (DEFAULT IS 10).                       AJSW002\n*                                                               AJSW002\n*            - INSTALL ACF2 CODE FOR JOB VALIDATION.            AJSW002\n*                                                               AJSW002\n*            - ACCOUNT VALIDATION FOR TSO LOGONS AND SUBMITS.   AJSW002\n*                                                               AJSW002\n*-------------------------------------------------------------* AJSW002\n*           IATUX29 - DEFAULT NORINGCK AND NOEXPDTCK          * AJSW002\n*-------------------------------------------------------------* AJSW002\n         IATYJDA ,                                              AJSW002\n         IATYJMR ,                                              AJSW002\n         IATYRSQ                                                AJSW002\n         IATYMPC                                                AJSW002\n         IATYDST                                                AJSW002\n         IATYJQE                                                AJSW002\n*        LA    R15,8               SET FOR DUMMY USER EXIT 29   AJSW002\n*        ARETURN                                                AJSW002\n*        IATXPTCH LT                                            AJSW002\n         L     R8,ISJCTBLD                                      AJSW002\n         USING JCTSTART,R8                                      AJSW002\n         L     R6,JDABADDR                                      AJSW002\n         TM    TVTUFLG1,TVTUSTOP ACCT. VALIDATION TURNED OFF    AJSW002\n         BC    ALLON,ACCEPT      YES, NOTHING TO DO HERE        AJSW002\n         USING JDABSTRT,R6                                      AJSW002\n         OI    JDABFLG3,JDABNOXP  *NO EXPDT CHECK               AJSW002\n         OI    JDABFLG2,JDABRNGC  *NO RING CHECK                AJSW002\n*-------------------------------------------------------------* AJSW002\n*     THIS WILL SET STAR LIMIT TO 50 FOR 'IMS' 'CIC' 'NET'    * AJSW002\n*-------------------------------------------------------------* AJSW002\n         TM    ISFLAG9,ISDSEL     *IS THIS A DEMAND SELECT?     AJSW002\n         BNO   USR010             *IF NOT, USE DEFAULT LIMIT    AJSW002\n         TM    ISFLAG10,ISMVSTSO  *IS THIS A TSO USER?          AJSW002\n         BO    USR010             *IF YES, USE DEFAULT LIMIT    AJSW002\n         CLC   JDABJNAM(3),=C'IMS'   *IS IT IMS?                AJSW002\n         BE    SETSTAR               *YES                       AJSW002\n         CLC   JDABJNAM(4),=C'CICS'  *IS IT CICS?               AJSW002\n         BE    SETSTAR               *YES                       AJSW002\n         CLC   JDABJNAM(5),=C'WCMRO' *IS IT CICS?               AJSW002\n         BE    SETSTAR               *YES                       AJSW002\n         CLC   JDABJNAM(4),=C'IDMS'  *IS IT IDMS?               AJSW002\n         BE    SETSTAR               *YES                       AJSW002\n         CLC   JDABJNAM(4),=C'M204'  *IS IT M204?               AJSW002\n         BE    SETSTAR               *YES                       AJSW002\n         CLC   JDABJNAM(3),=C'HSM'   *IS IT HSM?                AJSW002\n         BE    SETSTAR               *YES                       AJSW002\n         CLC   JDABJNAM(3),=C'NET'   *IS IT NET?                AJSW002\n         BNE   USR010                *NO                        AJSW002\nSETSTAR  DS    0H                                               AJSW002\n         LA    R0,50              *SET LIMIT TO 50              AJSW002\n         STH   R0,JDASALIM        *IN JDAB                      AJSW002\nUSR010   DS    0H                                               AJSW002\n         LA    R2,JDABJBCD+4      *START OF SEARCH              AJSW002\n         LA    R4,71-4            *MAXIMUM SEARCH LENGTH        AJSW002\nUSR020   DS    0H                                               AJSW002\n         CLC   0(4,R2),=C'JOB '                                 AJSW002\n         BC    EQ,USR030          *FOUND ACCT FLD - GO PROCESS  AJSW002\n         LA    R2,1(R2)           *BUMP TO NEXT CHARACTER       AJSW002\n         BCT   R4,USR020          *CONTINUE CHECKING            AJSW002\n         B     ACCEPT             *ACCT FLD NEVER FOUND         AJSW002\nUSR030   DS    0H                                               AJSW002\n         CLC   0(13,R2),JOBINFO   *DEMAND SELECT?               AJSW002\n         BC    EQ,ACCEPT          *YES, ACCEPT JOB              AJSW002\n         LA    R2,4(R2)           *POINT TO ACCOUNT FIELD       AJSW002\n         LA    R7,60              *NUMBER OF BYTES TO SEARCH    AJSW002\nUSR032   DS    0H                                               AJSW002\n         CLI   0(R2),C'('         *START OF ACCOUNT FIELD       AJSW002\n         BC    EQ,USR035          *YES, GO PROCESS              AJSW002\n         CLI   0(R2),C' '         *START OF ACCOUNT FIELD       AJSW002\n         BC    NE,USR037          *YES, GO PROCESS              AJSW002\n         LA    R2,1(R2)           *POINT TO NEXT CHAR           AJSW002\n         BCT   R7,USR032          *CHECK AGAIN                  AJSW002\n         TM    ISFLAG9,ISDSEL     *STARTED TASK?                AJSW002\n         BC    ALLOFF,FLUSH       *NO, FLUSH JOB - NO ACCT CODE AJSW002\n         B     ACCEPT             *YES, DON'T NEED ACCOUNT CODE AJSW002\nJOBINFO  DC    CL13'JOB MSGLEVEL='                              AJSW002\n*-------------------------------------------------------------* AJSW002\n*            DETERMINE IF JOB IS TSO OR BATCH                 * AJSW002\n*-------------------------------------------------------------* AJSW002\nUSR035   DS    0H                                               AJSW002\n         LA    R2,1(R2)           *POINT TO ACCOUNT CODE        AJSW002\nUSR037   DS    0H                                               AJSW002\n         TM    ISFLAG10,ISMVSTSO  *IS THIS A TSO USER?          AJSW002\n         BC    ALLON,USR040       *YES, DO CHECKING             AJSW002\n         TM    ISFLAG9,ISDSEL     *IS THIS A DEMAND SELECT JOB? AJSW002\n         BC    ALLOFF,ACCEPT      *NO, SKIP CHECKING            AJSW002\n         CLC   JDABUSID,=CL8'0'   *TSO LOGON?                   AJSW002\n         BC    EQ,ACCEPT          *NO, SKIP CHECKING            AJSW002\n*-------------------------------------------------------------* AJSW002\n*  PREVENT TSO JOBS FROM USING PRODUCTION PUCS  DDAAYSS8      * AJSW002\n*   WHERE: DD = DIVISION                                      * AJSW002\n*          AA = APPLICATION                                   * AJSW002\n*           Y = ALWAYS 'P'                                    * AJSW002\n*          SS = PROJECT SERIES 88-99                          * AJSW002\n*           8 = ALWAYS '8'                                    * AJSW002\n*-------------------------------------------------------------* AJSW002\nUSR040   DS    0H                                               AJSW002\n         CLI   4(R2),C'P'         *PRODUCTION PUCS?             AJSW002\n         BC    NE,USR050          *NO, CONTINUE CHECK           AJSW002\n         CLI   7(R2),C'8'         *DOUBLE CHECK. PROD PUCS?     AJSW002\n         BC    EQ,FLUSH           *YES, NOT ALLOWED - FLUSH JOB AJSW002\nUSR050   DS    0H                                               AJSW002\n         LA    R5,IDTABLE         *ADDRESS OF DSD ID'S          AJSW002\nUSR060   DS    0H                                               AJSW002\n         CLC   JDABUSID(3),0(R5)  *IS THIS A DSD ID?            AJSW002\n         BC    EQ,USR100          *YES, GO CHECK ACCOUNT NUM    AJSW002\n         LA    R5,3(R5)           *POINT TO NEXT TABLE ENTRY    AJSW002\n         CLC   TABLEND(3),0(R5)   *END OF DSD ID TABLE?         AJSW002\n         BC    NE,USR060          *NO, CHECK NEXT ENTRY         AJSW002\n         LA    R5,FCIDS           *ADDR OF FORT WORTH DSD IDS   AJSW002\nUSR065   DS    0H                                               AJSW002\n         CLC   JDABUSID+1(3),0(R5) *IS THIS A DSD ID?           AJSW002\n         BC    EQ,USR100          *YES, GO CHECK ACCOUNT NUM    AJSW002\n         LA    R5,3(R5)           *POINT TO NEXT TABLE ENTRY    AJSW002\n         CLC   TABLEND(3),0(R5)   *END OF DSD ID TABLE?         AJSW002\n         BC    NE,USR065          *NO, CHECK NEXT ENTRY         AJSW002\n*-------------------------------------------------------------* AJSW002\n* CHECK NON-DSD ID FOR VALID ACCOUNT NUMBER (PUCS)  DDAAZXXXX * AJSW002\n*   WHERE: DD = DIVISION                                      * AJSW002\n*          AA = APPLICATION                                   * AJSW002\n*           Z = ALWAYS 'Z' - OPEN SHOP INDICATOR              * AJSW002\n*        XXXX = 2, 3, OR 4 NUMERICS                           * AJSW002\n*-------------------------------------------------------------* AJSW002\nUSR070   DS    0H                                               AJSW002\n         CLI   4(R2),C'Z'         *OPEN SHOP INDICATOR PRESENT? AJSW002\n         BC    EQ,ACCEPT          *YES, LET JOB RUN             AJSW002\n         B     FLUSH              *INVALID ACCT NUM - FLUSH JOB AJSW002\n         SPACE 1                                                AJSW002\nIDTABLE  DC    C'$WC$EC$WP'                                     AJSW002\nTABLEND  DC    C'FFF'                                           AJSW002\nFCIDS    DC    C'FCAFCDFCEFCFFCGFCHFCIFCJFCM'                   AJSW002\n         DC    C'FCOFCPFCQFCRFCSFCTFCWFCZ'                      AJSW002\n         DC    C'FFF'                                           AJSW002\n         SPACE 1                                                AJSW002\n*-------------------------------------------------------------* AJSW002\n*   CHECK DSD ID FOR VALID PCS ACCOUNT NUMBER  DDAAYSSPTTSS   * AJSW002\n*                                            (ANY 12 DIGITS)  * AJSW002\n*   OR VALID PUCS NUMBER  DDAAZXXXX                           * AJSW002\n*     WHERE: DD = DIVISION - DSD ID (EG: WC, EC, FC )         * AJSW002\n*            AA = APPLICATION (01 THRU 09)                    * AJSW002\n*             Z = 'N' FOR NON-BILLABLE                        * AJSW002\n*          XXXX = 2, 3, OR 4 NUMERICS                         * AJSW002\n*-------------------------------------------------------------* AJSW002\nUSR100   DS    0H                                               AJSW002\n         CLI   4(R2),C'N'         *PUCS NON-BILLABLE?           AJSW002\n         BC    NE,USR120          *NO SEE IF PCS NUMBER         AJSW002\n         LA    R5,IDTABLE         *ADDRESS OF DSD ID'S          AJSW002\nUSR110   DS    0H                                               AJSW002\n         CLC   0(2,R2),1(R5)      *IS THIS A DSD ID?            AJSW002\n         BC    EQ,ACCEPT          *YES, ACCEPT JOB              AJSW002\n         LA    R5,3(R5)           *POINT TO NEXT TABLE ENTRY    AJSW002\n         CLC   TABLEND(3),0(R5)   *END OF DSD ID TABLE?         AJSW002\n         BC    NE,USR110          *NO, CHECK NEXT ENTRY         AJSW002\n         LA    R5,FCIDS           *ADDR OF FORT WORTH DSD IDS   AJSW002\nUSR115   DS    0H                                               AJSW002\n         CLC   0(2,R2),0(R5)      *IS THIS A DSD ID?            AJSW002\n         BC    EQ,ACCEPT          *YES, ACCEPT JOB              AJSW002\n         LA    R5,3(R5)           *POINT TO NEXT TABLE ENTRY    AJSW002\n         CLC   TABLEND(3),0(R5)   *END OF DSD ID TABLE?         AJSW002\n         BC    NE,USR115          *NO, CHECK NEXT ENTRY         AJSW002\n*-----     CHECK IF ACCOUNT NUMBER IS A 12 DIGIT PCS     -----* AJSW002\nUSR120   DS    0H                                               AJSW002\n         SLR   R7,R7              *PREPARE FOR COUNT            AJSW002\nUSR130   DS    0H                                               AJSW002\n         CLI   0(R2),C','         *END OF ACCOUNT NUMBER?       AJSW002\n         BC    EQ,USR140          *YES, GO CHECK COUNT          AJSW002\n         CLI   0(R2),C' '         *END OF ACCOUNT NUMBER?       AJSW002\n         BC    EQ,USR140          *YES, GO CHECK COUNT          AJSW002\n         LA    R7,1(R7)           *ADD TO COUNT                 AJSW002\n         LA    R2,1(R2)           *POINT TO NEXT ACCT CHAR      AJSW002\n         B     USR130             *CONTINUE CHECKING FOR END    AJSW002\nUSR140   DS    0H                                               AJSW002\n         LA    R9,12              *NUMBER OF CHARS IN VALID PCS AJSW002\n         CR    R7,R9              *VALID PCS?                   AJSW002\n         BC    EQ,ACCEPT          *YES, LET JOB RUN             AJSW002\nFLUSH    DS    0H                                               AJSW002\n         MVC   WTO+16(8),JDABJNAM *PUT JOBNAME IN MSG           AJSW002\n         MVC   WTO+25(4),JDABJNUM *PUT JOB NUMBER IN MSG        AJSW002\nWTO     WTO 'IAT0205 JOBNAME (    ) UNAUTHORIZED ACCOUNT CODE', AJSW002X\n               ROUTCDE=(11)                                     AJSW002\n         B     USR999             *GO FLUSH JOB                 AJSW002\n         SPACE 1                                                AJSW002\n         DROP R6                                                AJSW002\n         DROP R8                                                AJSW002\nACCEPT   DS    0H                 *INDICATE PROCESS JOB OK      AJSW002\n         IATXCUE EP=ACFJBEOR,ALOAD=YES                          AJSW002\n         ICM   R15,15,ACFFDB      *R15 = ACF2 RETURN CODE       AJSW002\n         XC    ACFFDB,ACFFDB      *MUST CLEAR ACFFDB            AJSW002\n         ARETURN                                                AJSW002\nUSR999   DS    0H                                               AJSW002\n         IATXCUE EP=ACFJBEOR,ALOAD=YES                          AJSW002\n         ICM   R15,15,ACFFDB      *R15 = ACF2 RETURN CODE       AJSW002\n         XC    ACFFDB,ACFFDB      *MUST CLEAR ACFFDB            AJSW002\n         LA    R15,4              *INDICATE JOB NO GOOD         AJSW002\n         ARETURN                                                AJSW002\n         IATXPTCH LT                                            AJSW002\nUMODNUM  DC    CL7'AJSW002'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW003": {"ttr": 7434, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW003) /*\n\n    THIS MODIFICATION TO IATUX28 CONTAINS THE FOLLOWING:\n    1.  ACCT VALIDATION CODE FOR BATCH JOBS AND TSO.\n    2.  CHANGE PROCID FOR STC.\n    3.  ADD ACF2 SUPPORT CODE.\n    4.  CAUSE DEFAULT OUTPUT LIMIT FOR STARTED TASKS AND TSO USERS TO\n        BE EQUAL TO THE SYSTEM OUTLIM DEFAULT (THIS IS USUALLY QUITE\n        HIGH - 2 MILLION LINES AT WC - AND IS SET HIGH SIMPLY BECAUSE\n        IT IS NOT POSSIBLE TO SUPPLY A //*MAIN CARD FOR STARTED TASKS\n        AND TSO USERS).\n\n        ******* THIS IS PRE FOR AJSW008 ACCT CODE *******\n                                                                 */ .\n++ VER(Z038) FMID(HJS2215) PRE(AJSW013).\n++ SRCUPD(IATUX28) .\n./ CHANGE NAME=IATUX28\n* USER MODS:                                                    AJSW003\n*                                                               AJSW003\n*      - ACCT VALIDATION CODE                                   AJSW003\n*      - CHANGE PROCID FOR STC                                  AJSW003\n*      - ADD ACF2 CODE                                          AJSW003\n*      - SET OUTPUT LIMIT FOR STC AND TSO TO SYSTEM OUTLIM      AJSW003\n*                                                               AJSW003\n         IATYJDA ,                                              AJSW003\n         EJECT                                                  AJSW003\n         IATYJMR ,                                              AJSW003\n         EJECT                                                  AJSW003\n         IATYSVT ,                                              AJSW003\n         EJECT                                                  AJSW003\n         IATYRSQ ,                                              AJSW003\n         EJECT                                                  AJSW003\n*-------------------------------------------------------------* AJSW003\n*            USRAREA DSECT FOR USER RELATED DATA              * AJSW003\n*-------------------------------------------------------------* AJSW003\nUSRAREA  DSECT                                                  AJSW003\nUSRLGTH  DS    F                  *LENGTH OF ACCT NUMBER        AJSW003\nUSRACCT  DS    CL15               *USER AREA FOR ACCT NUMBER    AJSW003\nUSRERR   DC    F'0'               *USER ERROR FIELD             AJSW003\nUSRRPL   DS    CL76               *USER RPL                     AJSW003\nUSRGENA  DS    CL(USRGENL)        *USER GENCB WORK AREA         AJSW003\nUSRREC   DS    CL64                USER INPUT RECORD            AJSW003\nUSRMSG   DS    CL70                USER OUTPUT MESSAGE AREA     AJSW003\nUSRSHWA  DS    CL(USRSHWL)         USER SHOWCB WORK AREA        AJSW003\nUSRSHW   DS    F                   USER SHOW AREA FDBK FIELD    AJSW003\nUSRSAVE  DS    18F                 USER SAVE AREA FOR OS CALLS  AJSW003\nTSOFLAG  DS    CL1                 TSO FLAG                     AJSW003\nUSRBSY   DC    XL1'00'             X'FF' IN USE, X'00' FREE     AJSW003\nUSROPN   DC    F'0'                STORAGE FOR OPEN LIST        AJSW003\nACCTACB  ACB   DDNAME=ACCTFILE,MACRF=(KEY,DIR,IN,AMODE31)       AJSW003\nUSREND   DC    0D'0'               ALIGNMENT TO DWD BNDRY       AJSW003\nUSRLEN   EQU   USREND-USRAREA      LENGTH OF USER DSECT         AJSW003\n         EJECT                                                  AJSW003\n         IATXCUE EP=ACFJBINT,ALOAD=YES                          AJSW003\n         SR    R15,R15            *SET ACF2 RETURN CODE TO 0    AJSW003\n         SPACE 1                                                AJSW003\n*                                                               AJSW003\n         ICM   R9,B'1111',ISDWORK  GET -> UX28 WORK SPACE       AJSW003\n         BC    NZERO,GOTWORK       WORK SPACE ALREADY ACQUIRED  AJSW003\n         LA    R0,USRLEN          *GET LENGTH FOR GETMAIN       AJSW003\nGETSTOR  DS    0H                                               AJSW003\n         AGETMAIN SIZE=(R0),       GET WORKAREA STORAGE         AJSW003*\n               LOC=(BELOW,ANY)     BELOW THE LINE.              AJSW003\n* NOTE: WITH 2.1.5, ECF & MASK NO LONGER RETURNED, IF NO BUSY=  AJSW003\nWAITSTOR DS    0H                  SERVICE RTN AWAITS.  IF      AJSW003\n*        AWAIT TYPE=ON,            LOCAL WAIT DESIRED, UNCOMMNT AJSW003\n*              ECFMASK=FCTAGET     MACRO, ADD BUSY= PARM TO     AJSW003\n*              ECFADD=FCTFLAG1     GETMAIN.                     AJSW003\nGOTSTOR  DS    0H                                               AJSW003\n         LR    R9,R1                                            AJSW003\n         LA    R1,USRLEN           SIZE OF STORAGE OBTAINED     AJSW003\n         XR    R15,R15             CLEAR DEST LENGTH SET PAD    AJSW003\n         MVCL  R0,R14              CLEAR ACQUIRED STORAGE       AJSW003\n         ST    R9,ISDWORK          -> WORKSPACE IN DRVR DATA    AJSW003\n         USING USRAREA,R9          ESTABLISH ADDRESSABILITY     AJSW003\n         MVC   ACCTACB(ACBLEN),ACCTACBP COPY ACB TO WORK AREA   AJSW003\n         MVI   USROPN,X'80'        SET END OF LIST FLAG         AJSW003\nGOTWORK  DC    0H'0'                                            AJSW003\n         TM    USRBSY,XFF          WORK SPACE IN USE?           AJSW003\n         BZ    HOLDWORK            NO, FLAG AS IN USE           AJSW003\n         AWAIT TYPE=OFF,ECFMASK=X'FF',ECFADD=USRBSY             AJSW003\nHOLDWORK DC    0H'0'                                            AJSW003\n         MVI   USRBSY,XFF          SET WORK AREA BUSY FLAG      AJSW003\n         L     R4,LOCADDR          GET JOB CARD POINTER         AJSW003\n         SPACE 1                                                AJSW003\nNOLJOB   DS    0H                                               AJSW003\n         TM    TVTUFLG1,TVTUCLOS  *SHOULD WE STOP VALIDATION?   AJSW003\n         BC    ALLON,STOPIT       *YES, CLOSE FILE AND END      AJSW003\n         CLC   2(8,R4),=C'ACCTSTOP' *LOOK FOR STOP JOB?         AJSW003\n         BC    NE,NOSJOB          *NO, IS NOT ACCT STOP JOB     AJSW003\n         CLC   62(8,R4),=C'*/$-STOP' *CHECK VALIDITY?           AJSW003\n         BC    NE,NOSJOB          *NO, IS NOT ACCT STOP JOB     AJSW003\nSTOPIT   DS    0H                                               AJSW003\n         MVI   TVTUFLG1,TVTUSTOP  *SET STOP SWITCH              AJSW003\n         TM    ACCTACB+48,X'10'   *IS FILE OPEN?                AJSW003\n         BC    ALLOFF,STFREE      *NO, DONT NEED TO CLOSE IT    AJSW003\n         IATXCSF ENTER=CLOSEACB,  *GO CLOSE ACB                 AJSW003X\n               ID=152                                           AJSW003\n         LTR   R15,R15            *CLOSE WORK OK?               AJSW003\n         BC    NZERO,CLOSFAIL     *NO, PROCESS ERROR            AJSW003\n         MESSAGE TEXT=CLOSOK,     *WRITE OUT MESSAGE            AJSW003X\n               CLASS=S2                                         AJSW003\nSTFREE   DC    0H'0'                                            AJSW003\n         LTR   R1,R9               HAVE ACQUIRED WORK SPACE?    AJSW003\n         BC    ZERO,STRETURN       NO, JUST RETURN              AJSW003\n         LA    R0,USRLEN           YES, SET LENGTH TO FREE      AJSW003\n         APUTMAIN SIZE=(R0),       FREE WORK SPACE              AJSW003X\n               AREA=(R1)                                        AJSW003\n         XC    ISDWORK,ISDWORK     CLEAR -> WORK SPACE          AJSW003\n         B     STRETURN            ALL DONE                     AJSW003\n         SPACE 1                                                AJSW003\nNOSJOB   DS    0H                                               AJSW003\n         CLC   2(8,R4),=C'ACCTSTRT' *IS THIS ACCT START JOB?    AJSW003\n         BC    NE,CKOPEN          *NO, IS NOT START JOB         AJSW003\n         CLC   62(8,R4),=C'*/$-STRT' *CHECK VALIDITY?           AJSW003\n         BC    NE,CKOPEN          *NO, IS NOT START JOB         AJSW003\n         MVI   TVTUFLG1,TVTUOPEN  *TURN ON OPEN SWITCH          AJSW003\n         B     OPEN               *GO DO OPEN                   AJSW003\n         SPACE 1                                                AJSW003\nCKOPEN   DS    0H                                               AJSW003\n         TM    TVTUFLG1,TVTUSTRT  *SHOULD VALIDATION STARTUP?   AJSW003\n         BC    ALLON,OPENIT       *YES, START IT UP             AJSW003\n         TM    TVTUFLG1,TVTUSTOP  *ACCT VALIDATION STOPPED?     AJSW003\n         BC    ALLON,STRETURN     *BRANCH IF YES                AJSW003\n         TM    TVTUFLG1,TVTUOPEN  *IS THIS 1ST PASS AFTER IPL?  AJSW003\n         BC    ALLON,NOOPEN       *NO, FILE OPEN                AJSW003\nOPENIT   DS    0H                                               AJSW003\n         MVI   TVTUFLG1,TVTUOPEN  *SET FILE TO OPEN STATUS      AJSW003\n         SPACE 1                                                AJSW003\nOPEN     DS    0H                                               AJSW003\n         TM    ACCTACB+48,X'10'   *IS ACB OPEN?                 AJSW003\n         BC    ALLON,NOOPEN        YES, NO OPEN REQUIRED        AJSW003\n         IATXCSF ENTER=OPENACB,    CALL MVS OPEN FOR ACB        AJSW003X\n               ID=152                                           AJSW003\n         LTR   R15,R15             OPEN SUCCESSFUL?             AJSW003\n         BC    NZERO,OPENFAIL      NO, OPEN FAILED              AJSW003\n         MVI   TVTUFLG1,TVTUOPEN   TURN ON OPEN SWITCH          AJSW003\n         MESSAGE TEXT=OPENOK,      WRITE OUT MESSAGE            AJSW003X\n               CLASS=S2                                         AJSW003\n         GENCB BLK=RPL,            CONSTRUCT AN RPL             AJSW003X\n               WAREA=(S,USRRPL),   IN THIS AREA OF STORAGE      AJSW003X\n               LENGTH=76,          WHICH IS 76 BYTES LONG       AJSW003X\n               ACB=(S,ACCTACB),    CONNECT RPL W/THIS ACB       AJSW003X\n               AREA=(S,USRREC),    READ RECORDS INTO THIS AREA  AJSW003X\n               RECLEN=64,          RECORDS ARE 64 BYTES LONG    AJSW003X\n               AREALEN=64,         AND THE BUFFER IS 64 BYTES!  AJSW003X\n               ARG=(S,USRACCT),    THE RETRIEVAL KEY WILL BE H  AJSW003X\n               OPTCD=(KEY,DIR),    READ KSDS BY KEY, NONSEQ.    AJSW003X\n               MF=(L,USRGENA,USRGENL) BUILD PARMLIST HERE       AJSW003\n         IATXCSF ENTER=GENACB,     GO DO GENCB                  AJSW003X\n               ID=152                                           AJSW003\n         LTR   R15,R15             GENCB SUCCESSFUL?            AJSW003\n         BC    NZERO,GENCBAD       NO, ISSUE ERROR MESSAGE      AJSW003\nNOOPEN   DS    0H                                               AJSW003\n         LA    R6,3(R4)            R6=CURRENT SEARCH POSITION   AJSW003\n         LA    R7,61(R4)           R7=END SEARCH POSITION       AJSW003\n         L     R4,JDABADDR         GET JDAB POINTER             AJSW003\n         USING JDABSTRT,R4         SET UP BASE REG              AJSW003\n         TM    ISFLAG9,ISDSEL      IS THIS A DEMAND SELECT JOB? AJSW003\n         BC    ALLOFF,JOBSCAN      NO, GO VALIDATE IT           AJSW003\n         CLC   8(13,R6),JOBINFO    IS IT A STC JOB?             AJSW003\n         BC    EQ,STCORMNT         YES, GO PROCESS STC JOB      AJSW003\n         MVI   TSOFLAG,TSO         MUST BE TSO JOB              AJSW003\nJOBSCAN  DS    0H                                               AJSW003\n         CLC   =C' JOB ',0(R6)     LOOKING FOR ' JOB '          AJSW003\n         BC    EQ,JOBFOUND         YES, GO PROCESS IT           AJSW003\n         CLC   =C' NJB ',0(R6)     LOOKING FOR ' NJB '          AJSW003\n         BC    NE,NEXTCHAR         NO, LOOK AT NEXT ONE         AJSW003\n         B     JOBFOUND            WE MAY NOT EVER GET HERE     AJSW003\n         SPACE 2                                                AJSW003\nMOVESMF  MVC   2(0,R1),0(R2)       MOVE IN ACCTNG DATA          AJSW003\nNEXTCHAR DS    0H                                               AJSW003\n         CR    R6,R7               POSSIBILITY OF JOB EXCEEDED? AJSW003\n         BC    GT,RETURN           YES, IGNORE IT               AJSW003\n         LA    R6,1(R6)            TRY NEXT POSITION            AJSW003\n         B     JOBSCAN             TRY AGAIN                    AJSW003\nJOBFOUND DS    0H                                               AJSW003\n         LA    R6,5(R6)            SKIP ' JOB '                 AJSW003\nJCLSCAN  DS    0H                                               AJSW003\n         CLI   0(R6),X'4D'         OPEN PAREN?                  AJSW003\n         BC    EQ,ACCTNEXT         YES, ACCT SHOULD BE NEXT     AJSW003\n         CLI   0(R6),X'7D'         QUOTE?                       AJSW003\n         BC    EQ,ACCTNEXT         YES, ACCT SHOULD BE NEXT     AJSW003\n         CLI   0(R6),X'40'         BLANK?                       AJSW003\n         BC    NE,ACCTDSD          NO, MUST BE ACCT NUMBER      AJSW003\n         LA    R6,1(R6)            YES, LET'S TRY NEXT POSITION AJSW003\n         CR    R6,R7               POSSIBILITY ACCT EXCEEDED?   AJSW003\n         BC    GT,ACCTBAD          YES, GO TO BAD ACCT MSG      AJSW003\n         B     JCLSCAN             TRY AGAIN                    AJSW003\nACCTNEXT DS    0H                                               AJSW003\n         LA    R6,1(R6)            POINT AT ACCT                AJSW003\nACCTDSD  DS    0H                                               AJSW003\n         LR    R5,R6               GET POINTER TO ACCT          AJSW003\n         SR    R8,R8               USE R8 AS COUNTER            AJSW003\n         LA    R7,12(R6)           END OF ACCT NUMBER           AJSW003\nACCTSCAN DS    0H                                               AJSW003\n         CLI   1(R6),C','          COMMA FOLLOWS ACCT?          AJSW003\n         BC    EQ,READ             YES, END OF ACCT NMBR        AJSW003\n         CLI   1(R6),X'5D'         CLOSE PAREN FOLLOWS ACCT?    AJSW003\n         BC    EQ,READ             YES, END OF ACCT NMBER       AJSW003\n         CLI   1(R6),X'7D'         QUOTE FOLLOWS ACCT?          AJSW003\n         BC    EQ,READ             YES, END OF ACCT NMBR        AJSW003\n         CLI   1(R6),X'40'         BLANK FOLLOWS ACCT?          AJSW003\n         BC    EQ,READ             YES, END OF ACCT NMBR        AJSW003\n         CR    R6,R7               ARE WE AT END?               AJSW003\n         BC    EQ,READ             YES, END OF ACCT NMBR        AJSW003\n         LA    R6,1(R6)            GO TO NEXT POSITION          AJSW003\n         LA    R8,1(R8)            BUMP COUNTER BY 1            AJSW003\n         B     ACCTSCAN            KEEP LOOKING                 AJSW003\nREAD     DS    0H                                               AJSW003\n         LA    R2,USRACCT          POINT AT ACCT NUMBER         AJSW003\n         MVC   USRACCT,BLANKS      ZERO OUT ACCT NUMBER         AJSW003\n         EX    R8,MOVEACCT         SAVE ACCT NUMBER             AJSW003\n         LA    R8,1(R8)            BUMP TO GET TRUE LENGTH      AJSW003\n         ST    R8,USRLGTH          SAVE IT                      AJSW003\n*                                                               AJSW003\n*                                                               AJSW003\n         CLI   0(R2),C'A'          START WITH 'A' FOR CC?       AJSW003\n         BC    NE,DOGENCB          NO, PROCESS AS NORMAL        AJSW003\n         C     R8,=F'6'            IS ACCT 6 BYTES LONG?        AJSW003\n         BC    EQ,GOODREAD         YES, MUST BE CC ACCOUNT      AJSW003\nDOGENCB  DS    0H                                               AJSW003\n         IATXCSF ENTER=READACB,    GO DO VSAM READ              AJSW003X\n               ID=152                                           AJSW003\n         LTR   R15,R15             READ SUCCESSFUL?             AJSW003\n         BC    NZERO,READBAD       NO, ISSUE ERROR MESSAGE      AJSW003\nGOODREAD DS    0H                                               AJSW003\n         BAL   R14,SMF26           GET ADDR OF SMF26JAF         AJSW003\n         B     RETURN              ACTUAL SECT DOES NOT EXIST   AJSW003\n         MVI   0(R1),X'01'         SPECIFY ONE ACCT FIELD       AJSW003\n         L     R15,USRLGTH         GET LENGTH OF ACCT NUMBER    AJSW003\n         STC   R15,1(R1)           MOVE IN LENGTH OF ACCT FLD   AJSW003\n         BCTR  R15,R0              SUBTRACT ONE FOR EXECUTE     AJSW003\n         EX    R15,MOVESMF         MOVE TO SMF RECORD           AJSW003\n         LA    R15,0               SET RETURN CODE TO 0 - AND   AJSW003\n         ST    R15,USRERR          ALLOW EXECUTION              AJSW003\n         B     RETURN              ALL DONE                     AJSW003\nMOVEACCT MVC   USRACCT(0),0(R5)    MOVE IN ACCTNG DATA          AJSW003\nACCTBAD  DS    0H                                               AJSW003\n         BAL   R14,SMF26           GET ADDR OF SMF26JAF         AJSW003\n         B     MAINCODE            NO ACT SECT RET POINT        AJSW003\n         MVC   0(24,R1),BADACCT    MOVE IN BAD ACCT MSG         AJSW003\n         B     MAINCODE            GET BACK TO MAIN LOGIC       AJSW003\nBADACCT  DC    X'01',X'09',C'WC05N0007'                    @JBD AJSW003\nMAINCODE DS    0H                  RESUME POINT                 AJSW003\n         TM    TSOFLAG,TSO         IS THIS A TSO JOB?           AJSW003\n         BC    ALLON,SETTSO        YES, GO CANCEL IN IATUX04    AJSW003\n         LA    R15,4               SET RETURN CODE TO 4 AND...  AJSW003\n         ST    R15,USRERR          ..REJECT THE JOB             AJSW003\n         MVC   USRMSG(70),MSG3     MOVE IN MESSAGE              AJSW003\n         MVC   USRMSG+16(8),JDABJNAM  MOVE IN JOB NAME          AJSW003\n         MVC   USRMSG+25(4),JDABJNUM  MOVE IN JOB NUMBER        AJSW003\n         BAL   R7,USERMSG          GO PRINT MESSAGE             AJSW003\n         LA    R1,USRMSG           POINT TO MESSAGE             AJSW003\n         MESSAGE TEXT=(R1),        WRITE IT TO OPER             AJSW003X\n               CLASS=S2                                         AJSW003\n         B     RETURN              ALL DONE                     AJSW003\nSETTSO   DS    0H                                               AJSW003\n         MVI   JDABUFLG,JDABFTSO   SET TO CANCEL JOB LATER      AJSW003\n         LA    R15,0               SET RETURN CODE TO ZERO      AJSW003\n         STC   R15,USRERR          SAVE RETURN CODE             AJSW003\n         B     RETURN              ALL DONE                     AJSW003\n         SPACE 1                                                AJSW003\n*-------------------------------------------------------------* AJSW003\n*  SMF26 - POINT AT ACCOUNTING FIELDS IN TYPE 26 SMF RECORD   * AJSW003\n*-------------------------------------------------------------* AJSW003\nSMF26    DS    0H                                               AJSW003\n         L     R1,JMRADDR          GET JMR ADDR                 AJSW003\n         USING JMR,R1              ADDRESSABILITY               AJSW003\n         TM    SMF26IND,X'20'      ACTUAL SECTION EXIST?        AJSW003\n         BC    ALLOFF,R14          NO, RETURN TO CALLER         AJSW003\n         TM    SMF26IND,X'C0'      DOES DESCR OR EVENT EXIST?   AJSW003\n         BC    ALLOFF,SMFACT       NEITHER, JUST ACTUAL         AJSW003\n         BC    MIXED,SMFONE        JUST ONE OF THEM EXISTS      AJSW003\n         AH    R1,SMF26LN1         ALLOW FOR DESCR SECT         AJSW003\nSMFONE   DS    0H                                               AJSW003\n         AH    R1,SMF26LN1         ALLOW FOR EVENT (OR DESCR)   AJSW003\nSMFACT   DS    0H                                               AJSW003\n         LA    R1,SMF26JAF         POINT TO JOB ACCTNG FLDS     AJSW003\n         B     4(R14)              NORMAL RETURN                AJSW003\n         SPACE 1                                                AJSW003\n*-------------------------------------------------------------* AJSW003\n*           OPENACB - OPEN ACB FOR ACCT NUMBER FILE           * AJSW003\n*-------------------------------------------------------------* AJSW003\nOPENACB  DS    0H                                               AJSW003\n         LR    R6,R14              SAVE R14                     AJSW003\n         OPEN  ACCTACB,MF=(E,USROPN) OPEN ACB                   AJSW003\n         LR    R14,R6              RESET R14                    AJSW003\n         BR    R14                 RETURN TO CALLER             AJSW003\n         SPACE 1                                                AJSW003\n*-------------------------------------------------------------* AJSW003\n*          CLOSEACB - CLOSE ACB FOR ACCT NUMBER FILE          * AJSW003\n*-------------------------------------------------------------* AJSW003\nCLOSEACB DS    0H                                               AJSW003\n         LR    R6,R14              SAVE R14                     AJSW003\n         CLOSE ACCTACB,MF=(E,USROPN) CLOSE ACB                  AJSW003\n         LR    R14,R6              RESET R14                    AJSW003\n         BR    R14                 RETURN TO CALLER             AJSW003\n         SPACE 1                                                AJSW003\n*-------------------------------------------------------------* AJSW003\n*    READACB - EXECUTE OS GET FOR VSAM ACCT NUMBER RECORD     * AJSW003\n*-------------------------------------------------------------* AJSW003\nREADACB  DS    0H                                               AJSW003\n         LR    R6,R14              SAVE R14                     AJSW003\n         LR    R8,R13              SAVE R13                     AJSW003\n         LA    R13,USRSAVE         POINT AT USER SAVE AREA      AJSW003\n         GET   RPL=USRRPL          EXECUTE VSAM GET             AJSW003\n         LR    R14,R6              RESTORE R14                  AJSW003\n         LR    R13,R8              RESTORE R13                  AJSW003\n         BR    R14                 RETURN TO CALLER             AJSW003\n         SPACE 1                                                AJSW003\n*-------------------------------------------------------------* AJSW003\n*             OPENFAIL - OPEN FAILED FOR ACB                  * AJSW003\n*-------------------------------------------------------------* AJSW003\nOPENFAIL DS    0H                                               AJSW003\n         MESSAGE TEXT=MSG1,        ISSUE FAIL                   AJSW003X\n               CLASS=S2            MESSAGE                      AJSW003\n         MVI   TVTUFLG1,TVTUSTOP   STOP VALIDATION              AJSW003\n         LA    R15,0               SET RETURN CODE TO 0         AJSW003\n         ST    R15,USRERR          SAVE RETURN CODE             AJSW003\n         TM    ISFLAG9,ISDSEL      IS IT DEMAND SELECT JOB?     AJSW003\n         BC    ALLON,STCORMNT      YES, GO DO STC PROCESSING    AJSW003\n         B     RETURN              ALL DONE                     AJSW003\n         SPACE 1                                                AJSW003\n*-------------------------------------------------------------* AJSW003\n*            CLOSFAIL - CLOSE FAILED FOR ACB                  * AJSW003\n*-------------------------------------------------------------* AJSW003\nCLOSFAIL DS    0H                                               AJSW003\n         MESSAGE TEXT=MSG9,        ISSUE FAIL                   AJSW003X\n               CLASS=S2            MESSAGE                      AJSW003\n         MVI   TVTUFLG1,TVTUSTOP   STOP VALIDATION              AJSW003\n         LA    R15,0               SET RETURN CODE TO 0         AJSW003\n         ST    R15,USRERR          SAVE RETURN CODE             AJSW003\n         B     RETURN              ALL DONE                     AJSW003\n         SPACE 1                                                AJSW003\n*-------------------------------------------------------------* AJSW003\n*  SHOWCB - EXECUTE SHOWCB FOR USER RPL AFTER READ ERROR      * AJSW003\n*-------------------------------------------------------------* AJSW003\nSHOWCB   DS    0H                                               AJSW003\n         LR    R6,R14              SAVE R14                     AJSW003\n         LR    R8,R13              SAVE R13                     AJSW003\n         LA    R13,USRSAVE         POINT AT SAVE AREA           AJSW003\n         SHOWCB AREA=(R0),         EXECUTE                      AJSW003X\n               MF=(E,USRSHWA)      SHOWCB                       AJSW003\n         LR    R14,R6              RESTORE R14                  AJSW003\n         LR    R13,R8              RESTORE R13                  AJSW003\n         BR    R14                 RETURN TO CALLER             AJSW003\n         SPACE 1                                                AJSW003\n*-------------------------------------------------------------* AJSW003\n*            GENACB - EXECUTE GENCB FOR USER RPL              * AJSW003\n*-------------------------------------------------------------* AJSW003\nGENACB   DS    0H                                               AJSW003\n         LR    R6,R14              SAVE R14                     AJSW003\n         LR    R8,R13              SAVE R13                     AJSW003\n         LA    R13,USRSAVE         POINT AT SAVE AREA           AJSW003\n         GENCB BLK=RPL,            EXECUTE                      AJSW003X\n               MF=(E,USRGENA)      GENCB                        AJSW003\n         LR    R14,R6              RESTORE R14                  AJSW003\n         LR    R13,R8              RESTORE R13                  AJSW003\n         BR    R14                 RETURN TO CALLER             AJSW003\n         SPACE 1                                                AJSW003\n*-------------------------------------------------------------* AJSW003\n*             GENCBAD - GENCB FAILED FOR USER                 * AJSW003\n*-------------------------------------------------------------* AJSW003\nGENCBAD  DS    0H                                               AJSW003\n         MVC   USRMSG(70),MSG2     GET ERROR MESSAGE            AJSW003\n         MVC   USRMSG+16(8),JDABJNAM  MOVE IN JOB NAME          AJSW003\n         MVC   USRMSG+25(4),JDABJNUM  MOVE IN JOB NUMBER        AJSW003\n         BAL   R7,USERMSG          BRANCH TO WRITE ROUTINE      AJSW003\n         LA    R1,USRMSG           POINT TO USER MESSAGE        AJSW003\n         MESSAGE TEXT=(R1),        INFORM USR OF GENCB FAILURE  AJSW003X\n               CLASS=S2                                         AJSW003\n         LA    R15,0               SET RETURN CODE TO 0 - AND   AJSW003\n         ST    R15,USRERR          ALLOW EXECUTION              AJSW003\n         B     GOODREAD            PROCESS LIKE ITS OK          AJSW003\n         SPACE 1                                                AJSW003\n*-------------------------------------------------------------* AJSW003\n*             READBAD - READ FAILED FOR USER                  * AJSW003\n*-------------------------------------------------------------* AJSW003\nREADBAD  DS    0H                                               AJSW003\n         C     R15,=F'08'          LOGICAL ERROR?               AJSW003\n         BC    NE,READERR1         NO, KEEP PROCESSING ERROR    AJSW003\n         CLI   USRRPL+15,X'10'     RECORD NOT FOUND?            AJSW003\n         BC    EQ,ACCTBAD          YES, MEANS INVALID ACCT      AJSW003\nREADERR1 DS    0H                                               AJSW003\n         LA    R6,USRSHW           POINT TO SHOWCB AREA         AJSW003\n         LR    R2,R15              SAVE RETURN CODE             AJSW003\n         SHOWCB RPL=(S,USRRPL),    SHOWCB LIST FORM             AJSW003X\n               AREA=(R6),                                       AJSW003X\n               LENGTH=4,                                        AJSW003X\n               FIELDS=(FDBK),                                   AJSW003X\n               MF=(L,USRSHWA,USRSHWL)                           AJSW003\n         IATXCSF ENTER=SHOWCB,     EXECUTE FORM                 AJSW003X\n               ID=152              OF SHOWCB                    AJSW003\n         LTR   R15,R15             SHOWCB SUCCESSFUL?           AJSW003\n         BC    NZERO,SHOWERR       NO, GOT REAL PROBLEMS        AJSW003\n         LR    R15,R2              RELOAD ORIGINAL REG15        AJSW003\n         C     R15,=F'04'          RPL ERROR?                   AJSW003\n         BC    EQ,READERR4         YES, GO PROCESS ERROR        AJSW003\n         C     R15,=F'12'          PHYSICAL ERROR?              AJSW003\n         BC    EQ,READERRC         YES, GO PROCESS ERROR        AJSW003\n         C     R15,=F'08'          LOGICAL ERROR?               AJSW003\n         BC    EQ,READERR8         YES, GO PROCESS ERROR        AJSW003\n         MVC   USRMSG(70),MSG5     UNKNOWN ERROR MESSAGE        AJSW003\n         B     OUTMSG              GO PUT OUT MESSAGE           AJSW003\n         SPACE 1                                                AJSW003\nSHOWERR  DS    0H                                               AJSW003\n         MVC   USRMSG(70),MSG4     SHOWCB ERROR MESSAGE         AJSW003\n         B     OUTMSG              GO PUT OUT MESSAGE           AJSW003\n         SPACE 1                                                AJSW003\nREADERR4 DS    0H                                               AJSW003\n         MVC   USRMSG(70),MSG6     RPL ERROR MESSAGE            AJSW003\n         B     OUTMSG              GO PUT OUT MESSAGE           AJSW003\n         SPACE 1                                                AJSW003\nREADERRC DS    0H                                               AJSW003\n         MVC   USRMSG(70),MSG7     PHYSICAL ERROR MESSAGE       AJSW003\n         B     OUTMSG              GO PUT OUT MESSAGE           AJSW003\n         SPACE 1                                                AJSW003\nREADERR8 DS    0H                                               AJSW003\n         MVC   USRMSG(70),MSG8     LOGICAL ERROR MESSAGE        AJSW003\n         B     OUTMSG              GO PUT OUT MESSAGE           AJSW003\n         SPACE 1                                                AJSW003\nOUTMSG   DS    0H                                               AJSW003\n         MVC   USRMSG+16(8),JDABJNAM  MOVE IN JOB NAME          AJSW003\n         MVC   USRMSG+25(4),JDABJNUM  MOVE IN JOB NUMBER        AJSW003\n         BAL   R7,USERMSG          TELL USER ABOUT ERROR        AJSW003\n         LA    R1,USRMSG           POINT AT ERROR MESSAGE       AJSW003\n         MESSAGE TEXT=(R1),        INFORM OPERATOR OF ERROR     AJSW003X\n               CLASS=S2                                         AJSW003\n         LA    R15,0               SET RETURN CODE TO ALLOW     AJSW003\n         ST    R15,USRERR          SAVE RETURN CODE             AJSW003\n         B     GOODREAD            GO FINISH PROCESSING         AJSW003\n         SPACE 1                                                AJSW003\n*-------------------------------------------------------------* AJSW003\n*  USERMSG - WRITE A MESSAGE TO THE USER'S JESMSG DATASET     * AJSW003\n*-------------------------------------------------------------* AJSW003\nUSERMSG  DS    0H                                               AJSW003\n         L     R1,MSGCURR          LOAD POINTER TO MESSAGE      AJSW003\n         ALOCATE FDB=(R1),COUNT=70  AREA FOR NEW MESSAGE        AJSW003\n         MVC   0(70,R1),USRMSG     MESSAGE TO ALOCATE AREA      AJSW003\n         L     R1,MSGCURR          RELOAD MESSAGE POINTER       AJSW003\n         ABLOCK FDB=(R1),COUNT=70  WRITE MESSAGE                AJSW003\n         BR    R7                  RETURN TO CALLER             AJSW003\n         SPACE 1                                                AJSW003\n         DROP  R4                  DROP BASE REG                AJSW003\n*-------------------------------------------------------------* AJSW003\n*           DEFAULT LINES/CARDS FOR STC AND TSO               * AJSW003\n*-------------------------------------------------------------* AJSW003\n         USING JCTSTART,R4                                      AJSW003\n         USING JDABSTRT,R5                                      AJSW003\nSTCORMNT DS    0H                                               AJSW003\n         L     R4,ISJCTBLD         PTR TO JCT                   AJSW003\n         L     R5,JDABADDR         PTR TO JDAB                  AJSW003\n         L     R3,TVTSSVT          PTR TO SSVT                  AJSW003\n         USING SSVT,R3                                          AJSW003\n         L     R3,SVTOLIM          OUTLIM FROM OUTSERV CARD     AJSW003\n         ST    R3,JDABMAXC         JDAB CARD ESTIMATE           AJSW003\n         ST    R3,JDABMAXL         JDAB LINE ESTIMATE           AJSW003\n         L     R2,JMRADDR          GET JMR ADDRESS              AJSW003\n         USING JMR,R2                                           AJSW003\n         STCM  R3,15,SMF26EPU      JMR CARD ESTIMATE            AJSW003\n         STCM  R3,15,SMF26ELN      JMR LINE ESTIMATE            AJSW003\n         SR    R2,R2               CLEAR R2                     AJSW003\n         D     R2,=F'1000'         DIVIDE LINE COUNT            AJSW003\n         STH   R3,JCTMAXC          JCT CARD ESTIMATE            AJSW003\n         STH   R3,JCTMAXL          JCT LINE ESTIMATE            AJSW003\n         TM    ISFLAG10,ISMVSTSO   IS THIS A TSO JOB?           AJSW003\n         BC    ALLON,FINI          BIY                          AJSW003\n         MVC   JDABPROC,=C'SS'     PROC=SS FOR START OR MOUNT   AJSW003\n         MVC   JCTPROC,=C'SS'      DITTO                        AJSW003\n         B     FINI                ALL DONE                     AJSW003\nSTRETURN DS    0H                                               AJSW003\n         TM    ISFLAG9,ISDSEL      IS THIS A DEMAND SELECT JOB? AJSW003\n         BC    ALLON,STCORMNT      YES, GO SET LINE DEFAULTS    AJSW003\n         B     FINI                NO, RETURN                   AJSW003\nRETURN   DS    0H                                               AJSW003\n         TM    TSOFLAG,TSO         IS THIS A TSO JOB?           AJSW003\n         BC    ALLON,STCORMNT      YES, GO FIX OUTPUT LINES     AJSW003\nFINI     DS    0H                                               AJSW003\n         MVI   TSOFLAG,X00         CLEAR TSO JOB FLAG           AJSW003\n         MVI   USRBSY,X00          CLEAR USER WORKSPACE LOCK    AJSW003\n         L     R15,USRERR          LOAD RETURN CODE             AJSW003\n         XC    USRERR,USRERR       CLEAR RETURN CODE            AJSW003\n*        LA    R15,12              COMMENT DUMMY USER EXIT      AJSW003\n         SPACE 1                                                AJSW003\nTSO      EQU   1                                                AJSW003\nX00      EQU   0                   USEFUL CONSTANT              AJSW003\nXFF      EQU   X'FF'               USEFUL CONSTANT              AJSW003\nBLANKS   DC    CL20' '             BLANKS                       AJSW003\nJOBINFO  DC    CL13'JOB MSGLEVEL=' STC JOB CARD                 AJSW003\n         SPACE 2                                                AJSW003\nOPENOK   DS    0F                                               AJSW003\n         DC    AL1(69)                                          AJSW003\n         DC    CL35'IAT0004 ***** ACCOUNT VALIDATION FI'        AJSW003\n         DC    CL34'LE SUCCESSFULLY OPENED *****      '         AJSW003\nCLOSOK   DS    0F                                               AJSW003\n         DC    AL1(69)                                          AJSW003\n         DC    CL35'IAT0104 ***** ACCOUNT VALIDATION FI'        AJSW003\n         DC    CL34'LE SUCCESSFULLY CLOSED *****      '         AJSW003\nMSG1     DS    0F                                               AJSW003\n         DC    AL1(69)                                          AJSW003\n         DC    CL35'IAT0204 ***** OPEN FAILED FOR ACCOU'        AJSW003\n         DC    CL34'NT VALIDATION FILE *****          '         AJSW003\nMSG2     DS    0F                                               AJSW003\n         DC    AL1(69)                                          AJSW003\n         DC    CL35'IAT0304 *****          (    ) GENCB'        AJSW003\n         DC    CL34' FAILED FOR USER *****            '         AJSW003\nMSG3     DS    0F                                               AJSW003\n         DC    AL1(69)                                          AJSW003\n         DC    CL35'IAT0404 *****          (    ) REJEC'        AJSW003\n         DC    CL34'TED --- INVALID ACCT NUMBER ***** '         AJSW003\nMSG4     DS    0F                                               AJSW003\n         DC    AL1(69)                                          AJSW003\n         DC    CL35'IAT0504 *****          (    ) READ '        AJSW003\n         DC    CL34'AND SHOWCB FAILED *****           '         AJSW003\nMSG5     DS    0F                                               AJSW003\n         DC    AL1(69)                                          AJSW003\n         DC    CL35'IAT0604 *****          (    ) UNDET'        AJSW003\n         DC    CL34'ERMINABLE ERROR - REG15 = 04 *****'         AJSW003\nMSG6     DS    0F                                               AJSW003\n         DC    AL1(69)                                          AJSW003\n         DC    CL35'IAT0704 *****          (    ) RPL E'        AJSW003\n         DC    CL34'RROR - REG15 = 04 *****           '         AJSW003\nMSG7     DS    0F                                               AJSW003\n         DC    AL1(69)                                          AJSW003\n         DC    CL35'IAT0804 *****          (    ) PHYSI'        AJSW003\n         DC    CL34'CAL ERROR READ - REG15 = 04 ***** '         AJSW003\nMSG8     DS    0F                                               AJSW003\n         DC    AL1(69)                                          AJSW003\n         DC    CL35'IAT0005 *****          (    ) UNDET'        AJSW003\n         DC    CL34'ERMINED LOGICAL ERROR *****       '         AJSW003\nMSG9     DS    0F                                               AJSW003\n         DC    AL1(69)                                          AJSW003\n         DC    CL35'IAT0105 ***** CLOSE FAILED FOR ACCO'        AJSW003\n         DC    CL34'UNT VALIDATION FILE *****         '         AJSW003\nACCTACBP ACB   DDNAME=ACCTFILE,MACRF=(KEY,DIR,IN,AMODE31)       AJSW003\nACBEND   DC    0X'00'                                           AJSW003\nACBLEN   EQU   ACBEND-ACCTACBP     LENGTH OF ACB                AJSW003\nUMODNUM  DC    CL7'AJSW003'       *USER NUMBER                  AJSW003\n++MACUPD(IATYJDA).\n./ CHANGE NAME=IATYJDA\nJDABUFLG EQU   JDABRSV2,1         *U S E R   F L A G  1         AJSW003\nJDABFTSO EQU   X'01'              *CANCEL TSO JOB               AJSW003\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW004": {"ttr": 7687, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW004) /* ALLOW CORRECT NSL VERIFY:\n\n       THIS MODIFICATION WILL ALLOW CORRECT VERIFICATION OF OUR\n       NON-STANDARD LABEL VOLUMES AT JES3 SETUP TIME.\n                                                                 */.\n++ VER(Z038) FMID(HJS2215).\n++ SRCUPD(IATUX25) DISTLIB(AJES3SRC) .\n./ CHANGE NAME=IATUX25\n* USER MODS:                                                    AJSW004\n*                                                               AJSW004\n*      - ALLOW CORRECT NON-STANDARD LABEL VERIFICATION          AJSW004\n*                                                               AJSW004\n*-------------------------------------------------------------* AJSW004\n*              IATUX25 - NON-STANDARD LABEL VERIFY            * AJSW004\n*-------------------------------------------------------------* AJSW004\n         USING NSLPARM,R1          PARAMETER LIST ADDRBLTY      AJSW042\n         L     R2,NSLRDA           -> LABEL READ IN AREA        AJSW004\n         USING VOLLABEL,R2         LABEL READ IN AREA ADDRBLTY  AJSW004\n         L     R3,NSLVOL           -> REQUESTED VOLUME SERIAL   AJSW042\n         LA    R15,4(,0)           SET ERROR RETURN CODE        AJSW042\n         MVC   NSLSER,VOLSERNO     PRELOAD ACTUAL VOLUME SER    AJSW042\n         MVI   NSLLAB,NOLAB        SET NL TYPE VOLUME           AJSW042\n         TM    NSLFLAG,NSLEOF      EOF FOUND BY LABEL READ?     AJSW042\n         BC    ALLON,UX25XIT       YES, LTM ON THIS VOLUME      AJSW042\n         MVI   NSLLAB,STANLAB      PRESET SL TYPE               AJSW042\n         CLC   VOL1,VOLLABI        IS VOLUME SL?                AJSW042\n         BC    EQ,UX25XIT          YES, ERROR, S/B NSL TYPE     AJSW042\n         CLC   NSL1,VOLLABI        IS VOLUME NSL?               AJSW042\n         BC    NE,UX25XIT          NO, RETURN ERROR             AJSW042\n         MVI   NSLLAB,NSLAB        YES, SET NSL TYPE            AJSW042\n         XR    R15,R15             SET TO RETURN                AJSW004\nUX25XIT  DC    0H'0'               RETURN TO CALLER             AJSW004\nNSL1     DC    CL4'1HDR'           NON-STANDARD LABEL ID        AJSW004\nVOL1     DC    CL4'VOL1'           STANDARD LABEL ID            AJSW004\nUMODNUM  DC    CL7'AJSW004'        USER NUMBER\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW005": {"ttr": 7689, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW005) /* ALLOW VARIOUS COMMANDS FOR RJP TERMINALS:\n\n       THIS MODIFICATION WILL ALLOW RJE TERMINALS TO ENTER\n       *I A AND *I J= COMMANDS AND NOT HAVE THE COMMAND RESPONSE\n       LIMITED TO THOSE JOBS SUBMITTED BY THAT TERMINAL.  IT\n       WILL ALSO ALLOW CERTAIN JOB MODIFY COMMANDS FROM\n       SELECTED RJP TERMINALS .\n                                                                        $\nCHANGE HISTORY                                                          $\n                                                                        $\n12/11/88 DAILEY       ADD SUPPORT TO CALL OTHER UX18 EXITS.             $\n                                                                        $\n                                                                 */ .\n++ VER(Z038) FMID(HJS2215).\n++ SRCUPD(IATUX18) DISTLIB(AJES3SRC) .\n./ CHANGE NAME=IATUX18\n*        USER MODS =                                            AJSW005\n*                                                               AJSW005\n*             - ALLOW COMMANDS FROM RJP TERMINALS               AJSW005\n*                                                               AJSW005\n         TITLE 'IATYJQE - JOB QUEUE ELEMENT DEFINITION'         AJSW005\n         IATYJQE ,                                              AJSW005\n         TITLE 'IATYMCL - MAIN PROCESSOR JOB CLASS TABLE'       AJSW005\n         IATYMCL ,                                              AJSW005\n         TITLE 'IATYSUP - SUPPORT UNITS TABLE'                  AJSW005\n         IATYSUP                                                AJSW205\n         TITLE 'CONSOLE AUTHORITY HANDLING USER EXIT'           AJSW205\n*        BC    EQ,CNA510           YES                          AJSW005\n         BC    EQ,GDW501          *YES                          AJSW005\n*        BC    EQ,CNA510           BIY             5728@ZA20706 AJSW005\n         BC    EQ,GDW501          *BIY                          AJSW005\nGDW501   LA    R2,GDWTBL          *GET ADDRESS OF OUR TABLE     AJSW005\n         CLI   0(R2),X'FF'        *END OF TABLE?                AJSW005\n         BC    EQ,GDWXIT          *YES, NOT FOR US              AJSW005\n         CLC   CONSDDNM,0(R2)     *IS THIS ONE OF THE SPECIALS? AJSW005\n         BC    EQ,GDW502          *YES, GO CHECK JOB            AJSW005\n         LA    R2,16(0,R2)        *POINT TO NEXT ENTRY          AJSW005\n         B     GDW501+4           *AND AROUND AGAIN             AJSW005\nGDW502   CR    R3,R4              *ARE WE DONE YET?             AJSW005\n         BC    GE,GDWXIT          *YES, BACK TO VANILLA CODE    AJSW005\n         CLC   0(2,R3),=C'J='     *IS THIS 'J='?                AJSW005\n         BC    EQ,GDW504          *YES, BRANCH                  AJSW005\n         CLC   0(2,R3),=C'J/'     *ALTERNATE FORM?              AJSW005\n         BC    EQ,GDW504          *YES, BRANCH                  AJSW005\n         LA    R3,1(0,R3)         *ADD ONE TO POINTER           AJSW005\n         B     GDW502             *AND AROUND AGAIN             AJSW005\nGDW504   BCTR  R3,0               *POINT TO LAST CHARACTER      AJSW005\n         CLI   0(R3),X'C0'        *PART OF PREV KEYWORD?        AJSW005\n         LA    R3,3(0,R3)         *POINT PAST 'J='              AJSW005\n         BC    GE,GDW502          *AND CONTINUE LOOP            AJSW005\n         SR    R15,R15            *INDICATE NORMAL PARM         AJSW005\n         BAL   R14,CNASUB2        *ISOLATE J= PARM IN WDSAVE    AJSW005\n         C     R5,=F'4'           *IS PARM GREATER THAN FOUR?   AJSW005\n         BNL   GDW508             *YES, MUST BE BY JOBNAME      AJSW005\n         TM    WDSAVE,X'F0'       *IS FIRST CHAR NUMERIC?       AJSW005\n         BNO   GDW508             *NO, CANNOT BE JOB NUMBER     AJSW005\n         MVC   WDSAVE+4(4),=X'F0F0F0F0' *MOVE IN ZEROS          AJSW005\n         LA    R14,WDSAVE+7       *POINT TO LAST CHARACTER      AJSW005\n         SR    R14,R5             *POINT TO START OF PARM       AJSW005\n         EX    R5,GDWOC           *MOVE TO WDSAVE+4 RIGHT JUST  AJSW005\n         PACK  TVTWORKD(8),WDSAVE+4(4) *AND THEN PACK IT        AJSW005\n         LR    R5,R1              *SAVE CONTENTS OF REG 1       AJSW005\n         CVB   R1,TVTWORKD        *CONVERT TO BINARY            AJSW005\n         B     GDW509             *AND GO GET JQE               AJSW005\nGDW508   LR    R5,R1              *SAVE CONTENTS OF REG 1       AJSW005\n         LA    R1,TVTWORKD        *GET ADDRESS OF NAME/NUMBER   AJSW005\nGDW509   IATXJQE JOBNUM=(R1),ERROR=GDWERR *GET JQE ADDRESS      AJSW005\n         SR    R6,R6              *CLEAR REG                    AJSW005\n         USING JQESTART,R1        *SET ADDRESSABILITY           AJSW005\n         IC    R6,JQECLS          *GET JOB CLASS                AJSW005\n         DROP  R1                 *DROP REG 1                   AJSW005\n         LR    R1,R5              *RESTORE REG1                 AJSW005\n         LTR   R6,R6              *DID WE GET SOMETHING?        AJSW005\n         BZ    GDWXIT             *NO, EXIT                     AJSW005\n         BCTR  R6,0               *MAKE OFFSET INSTEAD OF COUNT AJSW005\n         L     R7,MCLASS          *GET CLASS TABLE ADDRESS      AJSW005\n         USING MCNAME,R7          *SET ADDRESSING               AJSW005\n         MH    R6,MCLNG           *DEVELOP POINTER TO CLASS     AJSW005\n         LA    R7,0(R7,R6)        *POINT TO OUR ENTRY           AJSW005\n         CLC   MCNAME,8(R2)       *IS THIS OUR CLASS?           AJSW005\n         BE    CNA600             *YES, PROCESS COMMAND AS IS   AJSW005\n         B     GDWXIT             *NO, BACK TO VANILLA CODE     AJSW005\n         DROP  R7                 *FREE UP BASE REG             AJSW005\nGDWERR   LR    R1,R5              *RESTORE REG 1                AJSW005\nGDWXIT   SR    R2,R2              *CLEAR REG 2                  AJSW005\n         LR    R3,R1              *POINT BACK TO BEGINNING      AJSW005\n         B     CNA510             *AND GO BACK TO VANILLA CODE  AJSW005\nGDWTBL   DC    CL8'RMT11',CL8'PROD    ' *RJP TERM/JOB CLASS     AJSW005\n         DC    CL8'RMT19',CL8'PDEST   '    D                    AJSW005\n         DC    CL8'RMT21',CL8'SDEST   '      I                  AJSW005\n         DC    CL8'RMT37',CL8'PDEST   '        T                AJSW005\n         DC    CL8'SPARE',CL8'ENTRY   '          T              AJSW005\n         DC    CL8'SPARE',CL8'ENTRY   '            O            AJSW005\n         DC    X'FF'              *END OF TABLE                 AJSW005\nGDWOC    OC    0(0,R14),WDSAVE    *RIGHT JUSTIFY + MAKE NUMERIC AJSW005\n*                                  * * * D E L E T E D * * *    AJSW205\n*                                  * * * D E L E T E D * * *    AJSW205\n*                                  * * * D E L E T E D * * *    AJSW205\n*                                  * * * D E L E T E D * * *    AJSW205\n*                                  * * * D E L E T E D * * *    AJSW205\n*                                  * * * D E L E T E D * * *    AJSW205\n*                                  * * * D E L E T E D * * *    AJSW205\n*                                  * * * D E L E T E D * * *    AJSW205\n*                                  * * * D E L E T E D * * *    AJSW205\n         LTR   R15,R15             HAS THE COMMAND BEEN REJ.    AJSW005\n         BC    ZERO,GDUX18         NO, TRY OTHER USER EXITS.    AJSW005\nGDUX18R  DS    0H                  NO, TRY OTHER USER EXITS.    AJSW005\n         CLI   CNINQ,C'A'         *EVERYTHING?                  AJSW005\n         BC    EQ,CNA600          *YES                          AJSW005\n*        BC    EQ,CNA720           YES, BRANCH                  AJSW005\n         BC    EQ,CNA600          *YES                          AJSW005\nCNA760   DC    0H'0'                                            AJSW205\n         LR    R3,R15              RESET TO START OF MESSAGE    AJSW205\nWDINQD0  DC    0H'0'                                            AJSW205\n         CLC   CNAD,0(R3)          INQ W/ D=?                   AJSW205\n         BC    EQ,WDDEV            YES, LOCATE PARAMETER VALUE  AJSW205\n         CLC   CNAD2,0(R3)         INQ W/ D/?                   AJSW205\n         BC    EQ,WDDEV            YES, LOCATE PARAMETER VALUE  AJSW205\n         LA    R3,1(,R3)           NO, STEP TO NEXT CHAR        AJSW205\n         CR    R3,R4               END OF TEXT?                 AJSW205\n         BC    LT,WDINQD0          NO, TRY NEXT CHARACTER       AJSW205\n         MVC   WDSAVE,0(R2)        RTTNAME OR RTTGNAME TO SAVE  AJSW205\n         B     CNA580              AND GO INSERT T= PARAMETER   AJSW205\nWDDEV    DC    0H'0'                                            AJSW205\n         LA    R3,2(,R3)           STEP OVER 'D=' OR 'D/'       AJSW205\n         BAL   R14,CNASUB2         GET VALUE FOR D= PARAMETER   AJSW205\n         LA    R14,CNA600          -> NORMAL EXIT ROUTINE       AJSW205\n         BAL   R15,WDALIAS         CHECK FOR ALIAS W/IN GROUP   AJSW205\n         MVC   WDSAVE,WDDGROUP     SET GROUP NAME FOR SUBRTN    AJSW205\n         B     CNA580              NO ALIAS, ERROR              AJSW205\n         BAL   R15,WDALIAS         GO CHECK FOR DEV. ALIAS      AJSW205\n         EJECT                                                  AJSW205\n**                                                              AJSW205\n*                                                               AJSW205\n*        WDALIAS - COMPARE CONSOLE NAME WITH A LIST OF          AJSW205\n*              CONSOLES HAVING DEVICES WHICH REQUIRE            AJSW205\n*              ALIAS SUBSTITUTION.  IF A MATCH IS FOUND,        AJSW205\n*              SUPPLY REPLACEMENT DEVICE NAME.                  AJSW205\n*                                                               AJSW205\n**                                                              AJSW205\n         SPACE 1                                                AJSW205\nWDALIAS  DC    0H'0'                                            AJSW205\n         MVC   WDCONDD,CONSDDNM    SAVE CONSOLE NAME            AJSW205\n         MVC   WDSVWDSV,WDSAVE     SAVE DEVICE NAME             AJSW205\n**                                                              AJSW205\n*                                                               AJSW205\n*        RUN THE RJP TABLE LOOKING FOR A MATCH BEWEEN THE       AJSW205\n*              CONSOLE NAME AND RJP TERMINAL NAME.  ON A        AJSW205\n*              MATCH, EXTRACT THE  GROUP NAME OF THE            AJSW205\n*              TERMINAL.                                        AJSW205\n*                                                               AJSW205\n**                                                              AJSW205\n         ICM   R1,B'1111',RJPTAB   -> RJP TABLE                 AJSW205\n         BC    ZERO,WDNORJP        NO RJP TABLE, SKIP SEARCH    AJSW205\n         N     R1,=X'7FFFFFFF'     STRIP HI-BIT                 AJSW205\n         B     WDGETGRP            GO SEARCH FOR GROUP NAME     AJSW205\nWDNORJP  DC    0H'0'                                            AJSW205\n         ICM   R1,B'1111',SRJPRTRM -> SNA RJP TABLE             AJSW205\n         BC    ZERO,WDNOSRJ        NO SNARJP TABLE, SKIP SEARCH AJSW205\n         O     R1,=X'80000000'     SET SNA RJP FLAG             AJSW205\nWDGETGRP DC    0H'0'                                            AJSW205\n         USING RTTSTART,R1         RJP/SNARJP TABLE MAP ADDRBLT AJSW205\n         CLC   CONSDDNM,RTTNAME    CONSOLE(JNAME):TERMINAL NAME AJSW205\n         BC    NE,WDSTPRTT         NO MATCH, STEP TO NEXT ENTRY AJSW205\n         MVC   WDSUBSTT,RTTGNAME   COPY GROUP TO SUBSTITUTION   AJSW205\n         MVC   WDDGROUP,RTTGNAME   SAVE THIS CONSOLE'S GROUP    AJSW205\n         B     WDGETSUP            GO DO SUBSTITUTION           AJSW205\nWDSTPRTT DC    0H'0'                                            AJSW205\n         LA    R1,RTTEND           -> NEXT ENTRY IN RJP TABLE   AJSW205\n         CLI   RTTSTART,FF         END OF TABLE?                AJSW205\n         BC    NE,WDGETGRP         NO, LOOP FOR NEXT ENTRY      AJSW205\n         LTR   R1,R1               DOING SNARJP?                AJSW205\n         BC    NMINUS,WDNORJP      NO, GO SETUP FOR SNA         AJSW205\n         B     WDNOSRJ             YES, SKIP OVER SUPUNITS      AJSW205\nWDGETSUP DC    0H'0'                                            AJSW205\n         XR    R1,R1               CLEAR FOR INSERTION          AJSW205\n         MVC   WDSUBSTT(3),=C'SNA' OVERLAY DEVICE GENERAL TYPE  AJSW205\n         LA    R1,WDSAVE+(L'WDSAVE-1) -> LAST CHAR IN NAME      AJSW205\nWDGETDEV DC    0H'0'                                            AJSW205\n         CLI   0(R1),C' '          TRAILING BLANK               AJSW205\n         BC    NE,WDSETDEV         NO, GET LAST THREE CHARS     AJSW205\n         BCT   R1,WDGETDEV         YES, BACK UP AND TRY NEXT    AJSW205\nWDSETDEV DC    0H'0'                                            AJSW205\n         SL    R1,=F'2'            BACK UP TO INCLUDE 2 MORE    AJSW205\n         MVC   WDSUBSTT+5(3),0(R1) DEVICE NAME TO SEARCH ARG    AJSW205\n         LA    R1,SUPUNITS-(SUPCHAIN-SUPSTART) DUMMY UP POINTER AJSW205\n         USING SUPSTART,R1         SUPUNIT TABLE ADDRBLTY       AJSW205\nWDSUPSTP DC    0H'0'                                            AJSW205\n         ICM   R1,B'1111',SUPCHAIN -> NEXT ENTRY IN CHAIN       AJSW205\n         BCR   ZERO,R15            END OF TABLE, NO MATCH       AJSW205\n         CLC   SUPGROUP,WDDGROUP   IN SAME GROUP AS CONSOLE?    AJSW205\n         BC    NE,WDSUPSTP         NO, TRY NEXT ENTRY           AJSW205\n         CLC   SUPDD,WDSUBSTT      DEV(JNAME):SUBSTITUTION VAL  AJSW205\n         BC    NE,WDSUPSTP         TRY NEXT IF NOT EQUAL        AJSW205\n         BC    EQ,WDSUBSTC         FOUND DEVICE, SUBSTITUTE IT  AJSW205\nWDNOSRJ  DC    0H'0'                                            AJSW205\n         BR    R15                 RETURN ON FAILURE TO MATCH   AJSW205\nWDSUBSTC DC    0H'0'                                            AJSW205\n         STM   R3,R7,WDSUBSV0      SAVE VOLATILE REGISTERS      AJSW205\n         ST    R14,WDSUBSV1        SAVE RETURN ADDRESS          AJSW205\n         LA    R15,CONMESSG+(L'CONMESSG-1) -> LAST CHAR IN BUFR AJSW205\nWDLOCEND DC    0H'0'                                            AJSW205\n         CLI   0(R15),C' '         TRAILING BLANK?              AJSW205\n         BC    NE,WDENDLOC         NO, FOUND END OF COMMAND     AJSW205\n         BCT   R15,WDLOCEND        YES, TRY PREVIOUS CHAR       AJSW205\nWDENDLOC DC    0H'0'                                            AJSW205\n         LA    R14,1(,R3)          -> INSERTION POINT           AJSW205\nWDLOCNXT DC    0H'0'                                            AJSW205\n         CLI   0(R14),C' '         TERMINATING BLANK?           AJSW205\n         BC    EQ,WDNXTLOC         YES, COMPUTE LENGTH TO SAVE  AJSW205\n         CLI   0(R14),C','         TERMINATING COMMA?           AJSW205\n         BC    EQ,WDNXTLOC         YES, COMPUTE LENGTH TO SAVE  AJSW205\n         LA    R14,1(,R14)         NO, STEP TO NEXT CHARACTER   AJSW205\n         CR    R14,R15             START OF SAVE:END OF SAVE    AJSW205\n         BC    LT,WDLOCNXT         SOMETHING LEFT TO SAVE       AJSW205\nWDNXTLOC DC    0H'0'                                            AJSW205\n         SR    R15,R14             LENGTH REMAINING TO SAVE     AJSW205\n         ST    R15,WDSAVELN        SAVE LENGTH FOLLOWING SUBST  AJSW205\n         BC    NPLUS,WDNOSAVE      NOTHING AFTER SUBSTITUTION   AJSW205\n         EX    R15,WDSTSAVE        SAVE MESSAGE AFTER DEVICE    AJSW205\nWDNOSAVE DC    0H'0'                                            AJSW205\n         LR    R14,R3              -> INSERTION POINT           AJSW205\n         LA    R15,CONMESSG+(L'CONMESSG-1) -> LAST BUFFER POS   AJSW205\n         SR    R15,R14             SPACE LEFT IN BUFFER         AJSW205\n         LA    R0,WDSUBSTT         -> INSERTION VALUE           AJSW205\n         LA    R1,L'WDSUBSTT(,0)   MAX LENGTH OF INSERTION      AJSW205\n         ICM   R1,B'1000',TVTBLANK SET PADDING CHARACTER        AJSW205\n         MVCL  R14,R0              INSERTION, CLEAR TO BLANKS   AJSW205\n         LA    R1,CONMESSG+(L'CONMESSG-1) -> LAST CHAR IN BUFR  AJSW205\nWDLOCND0 DC    0H'0'                                            AJSW205\n         CLI   0(R1),C' '          TRAILING BLANK?              AJSW205\n         BC    NE,WDNDLOC0         NO, FOUND END OF COMMAND     AJSW205\n         BCT   R1,WDLOCND0         YES, TRY PREVIOUS CHAR       AJSW205\nWDNDLOC0 DC    0H'0'                                            AJSW205\n         CR    R5,R8               LENGTH OR POINTER?           AJSW205\n         BC    LT,WDSETLEN         LENGTH                       AJSW205\n         LA    R5,1(,R1)           POINTER                      AJSW205\n         B     WDNOTLEN            CHECK FOR NEED TO RESTORE    AJSW205\nWDSETLEN DC    0H'0'                                            AJSW205\n         LR    R5,R1               COPY -> END OF SUBSTITUTION  AJSW205\n         SR    R5,R3               COMPUTE SUBSTITUTION LENGTH  AJSW205\nWDNOTLEN DC    0H'0'                                            AJSW205\n         ICM   R15,B'1111',WDSAVELN DATA AFTER INSERTION        AJSW205\n         BC    ZERO,WDNOREST       NOTHING TO RESTORE           AJSW205\n         LA    R14,CONMESSG+(L'CONMESSG-1) -> END OF BUFFER     AJSW205\n         SR    R14,R1              SPACE LEFT IN BUFFER         AJSW205\n         C     R14,WDSAVELN        V. LENGTH OF SAVED DATA      AJSW205\n         BC    LT,CNA460           BUFFER OVERFLOW, EXIT        AJSW205\n         EX    R15,WDSTREST        RESTORE ALL AFTER SUBSTITUTE AJSW205\nWDNOREST DC    0H'0'                                            AJSW205\n         LA    R4,1(R1,R15)        UPDATE END OF COMMAND PTR.   AJSW205\n         CR    R5,R3               POINTER OR LENGTH?           AJSW205\n         BC    LT,WDSETLN0         LENGTH, COMPUTE NEW LENGTH   AJSW205\n         LA    R5,1(,R1)           POINTER, SET NEW POINTER     AJSW205\n         B     WDAKARET            SKIP OVER LENGTH HANDLING    AJSW205\nWDSETLN0 DC    0H'0'                                            AJSW205\n         LA    R5,0(,R1)           -> END OF SUBSTITUTED VALUE  AJSW205\n         SR    R5,R3               LENGTH-1 OF NEW VALUE        AJSW205\nWDAKARET DC    0H'0'                                            AJSW205\n         MVC   CNASTART,CONMESSG   SAVE ALTERED MESSAGE TEXT    AJSW205\n         L     R14,WDSUBSV1        RELOAD RETURN ADDRESS        AJSW205\n         LR    R15,R14             SIGNAL ALL O.K.              AJSW205\n         BR    R14                 RETURN TO CALLER             AJSW205\nWDSTSAVE MVC   CNASTART(0),0(R14)  TRAILING PORTION OF MSG      AJSW205\nWDSTREST MVC   1(,R1),CNASTART     RESTORE AFTER SUBSTITUTION   AJSW205\n         EJECT                                                  AJSW205\n***                                                             AJSW005\n*                                                               AJSW005\n*  THIS CODE ALLOWS FOR OTHER/VENDOR UX18 MODULES TO BE         AJSW005\n*  INCORPORATED INTO THE UX18 PROCESSING. THIS ROUTINE IS       AJSW005\n*  ENTERED ONLY IF THE RETURN CODE IS 0 AFTER COMPLETION        AJSW005\n*  OF THE MAIN CODE.  IF ANY OF THE CALLED MODULES RETURN A     AJSW005\n*  NON-ZERO RETURN CODE, NO OTHER MODULES WILL BE CALLED.       AJSW005\n*                                                               AJSW005\n***                                                             AJSW005\n*                                                               AJSW005\nGDUX18   DS    0H                                               AJSW005\n         LA    R7,MODTBL          GET FIRST ENTRY               AJSW005\n         SLR   R8,R8              INIT RET. CODE REG            AJSW005\n         SLR   R15,R15                                          AJSW005\n*                                                               AJSW005\nGDUX18A  DS    0H                                               AJSW005\n         CLI   0(R7),X'FF'        END OF TABLE                  AJSW005\n         BE    GDUX18R            YES, RETURN TO EXIT           AJSW005\n         LR    R0,R7              SET ALOAD PARM REG            AJSW005\n*                                                               AJSW005\n         ALOAD EPLOC=(R0),ERROR=GDUX18C   LOAD THE EXIT MODULE  AJSW005\n         LR    R15,R0             COPY EPA                      AJSW005\n         ACALL ENTER=(R15)                                      AJSW005\n*                                                               AJSW005\n         B     GDUX18B            RC=0 BRANCH                   AJSW005\n         B     GDUX18B            RC=4 BRANCH                   AJSW005\n*                                                               AJSW005\nGDUX18B  DS    0H                                               AJSW005\n         LR    R8,R15             SAVE RETURN CODE              AJSW005\n         LR    R0,R7              GET MODULE NAME               AJSW005\n         ADELETE EPLOC=(R0)       DELETE THE MODULE             AJSW005\n*                                                               AJSW005\nGDUX18C  DS    0H                                               AJSW005\n         LTR   R15,R8             RETURN CODE STILL 0           AJSW005\n         BNZ   GDUX18R            NO, PROCESS NO MORE           AJSW005\n         LA    R7,8(,R7)          GET NEXT MODULE IN TABLE      AJSW005\n         B     GDUX18A            LOOP BACK TIL DONE            AJSW005\n*                                                               AJSW005\nMODTBL   DS    0F                                               AJSW005\n         DC    CL8'AOEXIT18'                                    AJSW005\n         DC    8X'FF'                                           AJSW005\n         DC    8X'FF'                                           AJSW005\n         DC    8X'FF'                                           AJSW005\n         DC    8X'FF'                                           AJSW005\n         DC    8X'FF'                                           AJSW005\n         DC    8X'FF'                                           AJSW005\nMODTBLE  DC    8X'FF'  <==== END OF TABLE ENTRY                 AJSW005\n         EJECT                                                  AJSW005\nCNASTRTL DC    X'50'               * * * D E B U G * * *        AJSW205\nWDSUBSV0 DC    5F'0'               SAVE VOLATILE REGISTERS      AJSW205\nWDSUBSV1 DC    F'0'                SAVE RETURN ADDRESS          AJSW205\nWDSAVELN DC    F'0'                SAVE LENGTH FOLLOWING SUBST  AJSW205\n         SPACE 2                                                AJSW205\nWDCONDD  DC    CL8' '              NAME OF REMOTE CONSOLE       AJSW205\nWDSVWDSV DC    CL8' '              ORIGINAL DEVICE ID           AJSW205\nWDSUBSTT DC    CL8' '              DEVELOPED SUBSTITUTION VALUE AJSW205\nWDDGROUP DC    CL8' '              DGROUP OF REMOTE CONSOLE     AJSW205\nIATUX18  CSECT                                                  AJSW205\nUMODNUM  DC    CL7'AJSW005'       *USER NUMBER\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW006": {"ttr": 7940, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW006) /*\n\n  UPDATE GDG BASE LVL AT STEP END.\n  BYPASS TSO LOGON SETUP.\n                                         */.\n++ VER(Z038) FMID(HJS2215) PRE(AJSW013).\n++ SRCUPD(IATUX06) DISTLIB(AJES3SRC) .\n./ CHANGE NAME=IATUX06\n* USER MODS:                                                          *\n*      UPDATE GDG BASE LVL AT STEP END, BYPASS TSO LOGON SETUP. AJSW006\n*                                                               AJSW006\n*-------------------------------------------------------------* AJSW006\n*                                                             * AJSW006\n*        IATUX06 - STEP LEVEL GDG & TSO SETUP BYPASS          * AJSW006\n*                                                             * AJSW006\n*-------------------------------------------------------------* AJSW006\nJFCB     DSECT                                                  AJSW006\n         IEFJFCBN LIST=YES                                      AJSW006\n         SPACE 2                                                AJSW006\nSIOT     DSECT                                                  AJSW006\n         IEFASIOT ,                                             AJSW006\n         SPACE 2                                                AJSW006\n         IATYVAT ,                                              AJSW006\n         SPACE 2                                                AJSW006\n         IATYVSR ,                                              AJSW006\n         SPACE 2                                                AJSW006\n         IATYPAS ,                                              AJSW006\n         SPACE 2                                                AJSW006\n         IATYTVT ,                                              AJSW006\n         SPACE 2                                                AJSW006\n         IATYDNT ,                                              AJSW006\n         SPACE 2                                                AJSW006\n         DROP  R15                                              AJSW006\n         LR    R10,R15                                          AJSW006\n         USING IATUX06,R10        *ESTABLISH BASE               AJSW006\n         USING IATYIDD,R13        *INTERPRETER DATA AREA        AJSW006\n*-------------------------------------------------------------* AJSW006\n* BYPASS SETUP FOR TSO LOGON DATASETS THAT ARE IN THE RESDSN  * AJSW006\n* LIST AND ARE VOLUME SPECIFIC.  COMPARE DATASET NAME TO      * AJSW006\n* RESDSN TABLE AND STRIKE IT OUT IF FOUND.                    * AJSW006\n*-------------------------------------------------------------* AJSW006\n         TM    IDDGTRC1,IDDGTSOL  *TSO LOGON?                   AJSW006\n         BC    ALLOFF,GDGMOD      *NO, BYPASS THIS PART OF MOD  AJSW006\n         TM    DDLFLG3,DDLVLRDD+DDLVLRDS *VOL=REF SPECIFIED?    AJSW006\n         BC    NALLOFF,DISPCHK    *YES - GO CHECK DISP          AJSW006\n         CLI   DDLNOVLS,0         *VOLSER SPECIFIED?            AJSW006\n         BC    EQ,GDGMOD          *NO - SKIP THIS PART OF MOD   AJSW006\nDISPCHK  TM    DDLFLG2,DDLNEW     *DISP=NEW?                    AJSW006\n         BC    ALLON,GDGMOD       *YES - SKIP THIS PART OF MOD  AJSW006\n         TM    DDLFLG2,DDLMOD     *DISP=MOD?                    AJSW006\n         BC    ALLON,GDGMOD       *YES - SKIP THIS PART OF MOD  AJSW006\n         ICM   R6,15,DDLUNIT      *UNIT PARM SPECIFIED?         AJSW006\n         BC    ZERO,GDGMOD        *NO - SKIP THIS PART OF MOD   AJSW006\n         CLI   0(R6),C' '         *IS THERE ONE THERE?          AJSW006\n         BC    EQ,GDGMOD          *NO - SKIP THIS PART OF MOD   AJSW006\n         CLI   0(R6),X'00'        *IS THERE ONE THERE?          AJSW006\n         BC    EQ,GDGMOD          *NO - SKIP THIS PART OF MOD   AJSW006\n         TM    DDLFLG5,DDLCAT     *CONCATENATED DD STATEMENT?   AJSW006\n         BC    ALLOFF,GETDDNM     *NO - CONTINUE                AJSW006\n         LA    R4,IDDCONNM        *PTR TO DDNAME                AJSW006\n         B     *+8                *GO CHECK DDNAME BYPASS       AJSW006\nGETDDNM  L     R4,DDLDDNAM        *PTR TO DDNAME                AJSW006\n         CLC   =CL8'JOBCAT',0(R4) *IS IT JOBCAT?                AJSW006\n         BC    EQ,GDGMOD          *YES - SKIP THIS PART OF MOD  AJSW006\n         CLC   =CL8'STEPCAT',0(R4) *IS IT STEPCAT?              AJSW006\n         BC    EQ,GDGMOD          *YES - SKIP THIS PART OF MOD  AJSW006\nRESDSN   ICM   R1,15,DDLDSN       *DSNAME SPECIFIED?            AJSW006\n         BC    ZERO,GDGMOD        *NO - SKIP THIS PART OF MOD   AJSW006\n         L     R7,TIDSNT          *PTR TO RESDSN TABLE          AJSW006\n         USING DNTHDR,R7                                        AJSW006\n         OC    DNTNUM,DNTNUM      *ANY TABLE ENTRIES?           AJSW006\n         BC    ZERO,GDGMOD        *NO - SKIP THIS PART OF MOD   AJSW006\n         LH    R6,DNTNUM          *PICK UP NUMBER OF ENTRIES    AJSW006\n         LH    R4,DNTELGH         *PICK UP SIZE OF EACH ENTRY   AJSW006\n         AH    R7,DNTHLGH         *PTR TO FIRST ENTRY           AJSW006\n         USING DNTENT,R7                                        AJSW006\nRESDLP   CLC   DNTDSN,0(R1)       *SAME DSN?                    AJSW006\n         BC    EQ,RESFAKE         *YES - GO FAKE RESDSN         AJSW006\n         BC    GT,GDGMOD          *NO - AND PAST IT IN TABLE    AJSW006\n         AR    R7,R4              *BUMP BY LENGTH               AJSW006\n         BCT   R6,RESDLP          *LOOP UNTIL  END OF TABLE     AJSW006\n         DROP  R7                                               AJSW006\nRESFAKE  TM    DDLFLG5,DDLCAT     *CONCATENATED DD STATEMENT?   AJSW006\n         BC    ALLOFF,RESFAKE1    *NO - GO STRIKE OUT ENTRY     AJSW006\n         OI    DDLFLG4,DDLDUM     *SET DUMMY STRIKE OUT         AJSW006\n         B     GDGMOD             *AND CONTINUE                 AJSW006\nRESFAKE1 OI    DDLFLG4,DDLSYS     *SET TO STRIKE OUT            AJSW006\n         SPACE 1                                                AJSW006\n*-------------------------------------------------------------* AJSW006\n*        BEGINNING OF GDG BIAS MODIFICATION                   * AJSW006\n*-------------------------------------------------------------* AJSW006\nGDGMOD   DS    0H                                               AJSW006\n*************************************************************** AJSW006\n* USE ESTABLISHED PTRS TO GET AT JFCB VIA SIOT. FOR SIOT,IICM * AJSW006\n* HAS ALREADY CONVERTED SWA POINTER TO BE A REAL ADDRESS, BUT * AJSW006\n* THE JFCB PTR STILL NEEDS TO GO THRU COMPATIBILITY INTERFACE * AJSW006\n* TO POINT TO REAL BEGINNING. NOTE THAT FOR RI, DDLUNIQ IS A  * AJSW006\n* LTTR POINTER SO WE MAY NEED TO FURTHER MANIPULATE THIS PTR  * AJSW006\n*************************************************************** AJSW006\n         L     R5,DDLUNIQ         *GET SIOT SWA                 AJSW006\n         LTR   R5,R5              *IF IT IS ZERO                AJSW006\nMESELF1  BC    ZERO,WDNOGDG       *RI CALLED, NOT CI, EXIT      AJSW006\n         LA    R6,16(R5)          *POINT TO BEGIN OF SIOT       AJSW006\n         LR    R8,R6              *USE R8 FOR IT                AJSW006\n         USING SIOT,R8                                          AJSW006\n         L     R5,SCTPJFCB        *PT TO JFCB                   AJSW006\n         BAL   R7,CMGET0          *MUST GET COMPATIBLE JFCB     AJSW006\n         LR    R4,R6              *USE R4 FOR JFCB              AJSW006\n         USING JFCB,R4                                          AJSW006\n*************************************************************** AJSW006\n*     WARDS GDG MODIFICATION                                  * AJSW006\n*  BAIS COUNT IS MAINTAINED FOR EACH GDG DATA SET PROCESSED   * AJSW006\n*  IT'S INCREMENTED ONCE FOR EACH STEP WITH A NEW GENERATION  * AJSW006\n*        R8 - SIOT                                            * AJSW006\n*        R4 - JFCB                                            * AJSW006\n* IT CREATES AND USES A DUMMY ENTRY IN THE JES3 PASS/CTLG     * AJSW006\n* TABLE TO SAVE GDG DSNAMES AND THE CURRENT LEVEL NUMBER.     * AJSW006\n* IT POINTS IATIIPR AT THIS DUMMY ENTRY FOR ALL REFERENCES    * AJSW006\n* TO THE GDG LEVEL NUMBER. IN THIS WAY IT WILL USE STEPEND    * AJSW006\n* CATALOG LOGIC FOR DECIDING WHAT TAPE FETCHS TO ISSUE        * AJSW006\n* WITHOUT ACTUALLY CHANGING THE JFCB. HENCE STEP COND CODES   * AJSW006\n* WILL NOT PRODUCE INCORRECT GDG REFERENCES.                  * AJSW006\n* -NOTE-IF PASS/CATLG TABLE CREATION LOGIC CHANGED IN IICM    * AJSW006\n* OR IIPR,THE CORRESPONDING CHANGES MUST BE MADE TO PRTBUILD, * AJSW006\n* PRTPSCN AND CMGET0 IN UX28.                                 * AJSW006\n*                                                             * AJSW006\n*        PURPOSE OF THIS MOD IS TO OBTAIN ASP COMPATABILITY   * AJSW006\n*        WITH WARD'S VS SYSTEM WHICH EFFECTIVELY TREATS       * AJSW006\n*        'DISP=(XXX,CATLG)' AS AN END-OF-STEP FUNCTION FOR    * AJSW006\n*        GDG'S RATHER THAN END-OF-JOB.                        * AJSW006\n*************************************************************** AJSW006\nWDLP0    DS    0H                                               AJSW006\n         TM    JFCBIND1,JFCGDG    *IS THIS DATA SET A GDG?      AJSW006\n         BC    ZERO,WDNOGDG       *NO - FORGET IT               AJSW006\n*-------------------------------------------------------------* AJSW006\n*        IS THIS GDG ALREADY IN THE PASS/CATLG TABLE?         * AJSW006\n*-------------------------------------------------------------* AJSW006\n         LA    R2,IDDPCAT         *PASS/CATLG TAB START         AJSW006\nWDLP1    DS    0H                                               AJSW006\n         BAL   R14,PRTPSCN        *GET NEXT ENTRY               AJSW006\n         B     WDNFND             *EOF - NO MORE                AJSW006\n*-------------------------------------------------------------* AJSW006\n*  IF PASSDSN+43 = '+' THEN IT IS ONE OF OUR SPECIAL ENTRIES  * AJSW006\n*-------------------------------------------------------------* AJSW006\n         USING PASSCTLG,R2                                      AJSW006\n         CLI   PASSDSN+43,C'+'    *OUR KEY IN DSN FIELD         AJSW006\n         BC    NE,WDLP1           *NO GET NEXT ENTRY            AJSW006\n         CLC   PASSDSN(43),JFCBDSNM *SAME DSNAME                AJSW006\n         BC    NE,WDLP1           *NO - GET NEXT ENTRY          AJSW006\n*-------------------------------------------------------------* AJSW006\n*        PACK THE EXISTING GDG NUMBER                         * AJSW006\n*-------------------------------------------------------------* AJSW006\n         LA    R15,0              *COUNT SIGNIFICANT DIGITS     AJSW006\n         LA    R3,L'JFCBELNM      *LEN OF GDG NO FIELD          AJSW006\n         LA    R1,JFCBELNM        *START OF GDG NUMBER          AJSW006\n         CLI   0(R1),C'0'         *CHECK FOR '-' OR '+'         AJSW006\n         BC    LT,WDPKLP2         *YES - BR ON '+' OR '-'       AJSW006\nWDPKLP1  DS    0H                 *SEARCH FOR LAST DIGIT        AJSW006\n         CLI   0(R1),C'0'         *STOP IF LESS THAN ZERO       AJSW006\n         BC    LT,WDPCK           *NOW BR TO PACK IT            AJSW006\n         LA    R15,1(R15)         *COUNT SIGNIFICANT DIGIT      AJSW006\nWDPKLP2  DS    0H                 *GET NEXT CHAR IN GDG FIELD   AJSW006\n         LA    R1,1(R1)                                         AJSW006\n         BCT   R3,WDPKLP1         *LOOP ON SEARCH               AJSW006\nWDPCK    DS    0H                 *R15=LEN OF SIGNIF. DIGITS    AJSW006\n         LTR   R15,R15            *ANY SIGNIFICANT DIGITS       AJSW006\n         BC    NZERO,WDPCK2       *YES  - BR AND CONTINUE       AJSW006\n         MVC   IDDUWORK+4(2),=PL2'0' *SET GDG COUNT TO 0        AJSW006\n         B     WDSIGN                                           AJSW006\nWDPACK   PACK  IDDUWORK+4(2),0(,R1) *EXECUTE TO PACK GDG NUMBER AJSW006\nWDPCK2   DS    0H                                               AJSW006\n         BCTR  R15,0              *REDUCE LEN BY 1 FOR EX       AJSW006\n         LA    R1,JFCBELNM        *ADDR OF UNPK'D GDG NUMBER    AJSW006\n         CLI   JFCBELNM,C'0'      *START WITH '-' OR '+'?       AJSW006\n         BC    GE,WDPCK3          *NO - BRANCH                  AJSW006\n         LA    R1,1(R1)           *YES - SKIP '-' OR '+'        AJSW006\nWDPCK3   DS    0H                                               AJSW006\n         EX    R15,WDPACK         *PACK GDG N(R1) TO WDGEN      AJSW006\nWDSIGN   DS    0H                 *DETERMINE SIGN OF GDG NUMBR  AJSW006\n         CLI   JFCBELNM,C'-'      *IS SIGN MINUS?               AJSW006\n         BC    NE,WDPOS           *NO - BRANCH                  AJSW006\n         NI    IDDUWORK+5,X'F0'   *SET SIGN...                  AJSW006\n         OI    IDDUWORK+5,X'0B'          ...NEGATIVE            AJSW006\nWDPOS    DS    0H                                               AJSW006\n         AP    IDDUWORK+4(2),PASSID *INCR BY BIAS COUNT         AJSW006\n         CLC   PASSSTPN,IDDCSTPN  *CURRENT STEP ALREADY HIT?    AJSW006\n         BC    NE,WDNEWSTP        *NO - THIS IS A NEW STEP      AJSW006\n         SP    IDDUWORK+4(2),=PL1'1' *DONE FOR SAME STEP        AJSW006\n         B     WDUNPKR                                          AJSW006\nWDNEWSTP DS    0H                 *LOOK FOR NEW ONE             AJSW006\n         TM    SCTSDISP,X'02'     *IS NEW DSN TO BE CATLGED?    AJSW006\n         BC    ZERO,WDNOPLUS      *NO - FORGET IT               AJSW006\n         AP    PASSID,=PL1'1'     *INCREMENT BIAS COUNT         AJSW006\n         MVC   PASSSTPN,IDDCSTPN  *REPLACE STEP NUMBER          AJSW006\nWDNOPLUS DS    0H                                               AJSW006\n*-------------------------------------------------------------* AJSW006\n*        UNPACK NEW GDG NUMBER TO REPLACE IN DUMMY P/C ENTRY  * AJSW006\n*-------------------------------------------------------------* AJSW006\nWDUNPKR  DS    0H                                               AJSW006\n         MVI   PASSELNM,C' '      *CLEAR GDG LEVEL              AJSW006\n         MVC   PASSELNM+1(L'PASSELNM-1),PASSELNM *WITH BLANKS   AJSW006\n         CP    IDDUWORK+4(2),=PL2'0' *CHK FOR 0 GENERATION      AJSW006\n         BC    NE,WDUN1           *NO, BRANCH                   AJSW006\n         MVI   PASSELNM,C'0'      *SET GDG NUMBER TO ZERO       AJSW006\n         B     MW017A             *ALL DONE                     AJSW006\nWDUN1    DS    0H                 *INSERT SIGN FIRST            AJSW006\n         UNPK  IDDUWORK(4),IDDUWORK+4(2) *UNPK NEW GDG NUMBER   AJSW006\n         OI    IDDUWORK+3,X'F0'   *MAKE SURE OF NUMERIC         AJSW006\n         MVI   PASSELNM,C'+'      *ASSUME '+'                   AJSW006\n         CP    IDDUWORK+4(2),=PL2'0' *CHK FOR MINUS             AJSW006\n         BC    GE,WDUNPOS         *NO - ASSUME POSITIVE         AJSW006\n         MVI   PASSELNM,C'-'      *SET WITH MINUS SIGN          AJSW006\nWDUNPOS  DS    0H                 *REMOVE LEADING ZEROS         AJSW006\n         LA    R3,IDDUWORK        *R3 IS SEARCH REG             AJSW006\n         LA    R1,4               *R1 IS LOOP REG               AJSW006\nWDUNLP1  DS    0H                 *LOOP ON LEADING ZEROS        AJSW006\n         CLI   0(R3),C'0'         *CHECK FOR ZERO               AJSW006\n         BC    NE,WDUNMOV         *BR ON END OF LEADING ZEROS   AJSW006\n         LA    R3,1(R3)           *NEXT CHAR IN WDUNPK          AJSW006\n         BCT   R1,WDUNLP1         *LOOP THRU WDUNPK             AJSW006\n         LA    R3,IDDUWORK+3      *RESET TO END OF WDUNPK       AJSW006\nWDUNMOV  DS    0H                 *MOVE SIGNF. DIGITS           AJSW006\n         LA    R1,IDDUWORK+3      *ADDR OF LAST CHAR WDUNPK     AJSW006\n         SR    R1,R3              *CALC NUM OF CHARS TO MOVE    AJSW006\n         CH    R1,=H'2'           *CHECK FOR MAX                AJSW006\n         BC    LE,WDLNOK          *BR IF LEN OK                 AJSW006\n         LA    R1,2               *JUST IN CASE                 AJSW006\nWDLNOK   DS    0H                 *ALMOST DONE                  AJSW006\n         EX    R1,WDMVC           *NEW GDG TO PASSELNM+1        AJSW006\nMW017A   LA    R1,PASSELNM        *POINT IIPR TO DUMMY          AJSW006\n         ST    R1,DDLDSNQ         *P/C ENTRY                    AJSW006\n         B     WDNOGDG            *NOW ALL DONE                 AJSW006\nWDMVC    MVC   PASSELNM+1(0),0(R3) *GDG NUMBER TO PASSELNM+1    AJSW006\n*-------------------------------------------------------------* AJSW006\n*      BUILD A NEW DUMMY ENTRY, IF NECESSARY                  * AJSW006\n*-------------------------------------------------------------* AJSW006\nWDNFND   DS    0H                                               AJSW006\n         TM    SCTSDISP,X'02'     *TO BE CATALOGED              AJSW006\n         BC    ZERO,WDNOGDG       *NO - FORGET IT               AJSW006\n         CLI   JFCBELNM,C'0'      *CATALOG ZERO?                AJSW006\n         BC    EQ,WDNOGDG         *YES - FORGET IT              AJSW006\n         CLC   JFCBELNM(2),=C'+0' *CATALOG ZERO?                AJSW006\n         BC    EQ,WDNOGDG         *YES - FORGET IT              AJSW006\n         LA    R3,L'PASSSIZ       *GET PASS/CATLG ENTRY SIZE    AJSW006\n         LA    R2,IDDPCAT                                       AJSW006\n         BAL   R14,PRTBUILD       *GET A NEW ENTRY              AJSW006\n         MVC   PASSDSN(43),JFCBDSNM *COPY THE DSN               AJSW006\n         MVI   PASSDSN+43,C'+'    *SET OUT INDICATOR            AJSW006\n         MVC   PASSSTPN,IDDCSTPN  *COPY STEP NUMBER             AJSW006\n         MVC   PASSID,=PL2'1'     *SET INITIAL BIAS COUNT       AJSW006\n         XC    PASSFLG1,PASSFLG1  *CLEAR PASSFLAG               AJSW006\n         XC    PASSFLG2,PASSFLG2  *CLEAR PASSFLAG               AJSW006\n         XC    PASSFLG3,PASSFLG3  *CLEAR PASSFLAG               AJSW006\n         XC    PASSLID,PASSLID    *CLEAR NEXT ALLOC (?)         AJSW006\n         B     WDNOGDG            *RETURN TO IIPR               AJSW006\n*-------------------------------------------------------------* AJSW006\n*              SCAN THE PASS CATALOG TABLE                    * AJSW006\n*-------------------------------------------------------------* AJSW006\nPRTPSCN  DS     0H                                              AJSW006\n         L      R2,0(,R2)         *GET PTR TO NEXT ENTRY        AJSW006\n         LTR    R2,R2             *ANY MORE ENTRIES?            AJSW006\n         BCR    ZERO,R14          *NO, PERFORM AT END RETURN    AJSW006\n         B      4(R14)            *YES, RETURN NEXT ENTRY       AJSW006\n         SPACE  2                                               AJSW006\n*-------------------------------------------------------------* AJSW006\n*               TABLE ENTRY BUILD SUBROUTINE                  * AJSW006\n*-------------------------------------------------------------* AJSW006\nPRTBUILD DS    0H                                               AJSW006\n         LH    R15,IDDCURD        *GET THE CURRENT DISPLACEMENT AJSW006\n         LTR   R15,R15            *ANY DISPLACEMENT AS YET?     AJSW006\n         BC    ZERO,PRTB03        *NO, MUST BE FIRST REQUEST    AJSW006\n         AR    R15,R3             *ADD REQUESTOR'S DISPLACEMENT AJSW006\n         CH    R15,=H'2048'       *PAST THE BUFFER?             AJSW006\n         BC    GT,PRTB03          *YES, GETMAIN A NEW WORK AREA AJSW006\n         LH    R3,IDDCURD         *SAVE CURRENT DISPLACEMENT    AJSW006\n         STH   R15,IDDCURD        *SET NEW DISPLACEMENT         AJSW006\n         A     R3,IDDCURWA        *ADD CURRENT AREA ADDR        AJSW006\nPRTB01   DS    0H                                               AJSW006\n         CLC   0(4,R2),TVTZERO    *POSITIONED AT LAST ENTRY     AJSW006\n         BC    EQ,PRTB02          *YES, UPDATE LAST ENTRY PTR   AJSW006\n         L     R2,0(,R2)          *GET NEXT ENTRY               AJSW006\n         B     PRTB01             *SEARCH TILL AT END           AJSW006\nPRTB02   DS    0H                                               AJSW006\n         ST    R3,0(,R2)          *CHAIN THE ENTRY              AJSW006\n         LR    R2,R3              *SET NEW ENTRY PTR            AJSW006\n         XC    0(L'PASSSIZ,R2),0(R2) *CLEAR NEW CHAIN PTR       AJSW006\n         BR    R14                *RETURN TO CALLER             AJSW006\nPRTB03   DS    0H                                               AJSW006\n         LR    R9,R14             *SAVE RETURN                  AJSW006\nPRTB04   DS    0H                                               AJSW006\n         LA    R0,2048            *SET GETMAIN SIZE             AJSW006\n         AGETMAIN SIZE=(R0),LOC=(ANY,ANY)                       AJSW006\nPRTB05   DS    0H                                               AJSW006\n*        AWAIT TYPE=ON,ECFADD=FCTFLAG1,ECFMASK=FCTAGET          AJSW006\nPRTB06   DS    0H                                               AJSW006\n         OI    IDDCTRCE,IDDCPCAT  *SET PCAT AGETMAINED NOW      AJSW006\n         XC    0(4,R1),0(R1)      *CLEAR NEXT CHAIN             AJSW006\n         MVC   IDDCURD,=H'4'      *SET INITIAL WORKAREA DISP    AJSW006\n         CLC   IDDWORKA,TVTZERO   *DO WE HAVE AN AREA YET?      AJSW006\n         BC    NE,PRTB08          *YES, PERFORM THE CHAINING    AJSW006\n         ST    R0,IDDWORKA        *SET THE FIRST WORK AREA      AJSW006\nPRTB07   DS    0H                                               AJSW006\n         ST    R0,IDDCURWA        *SET CURRENT WORK AREA        AJSW006\n         LR    R14,R9             *RESET THE RETURN             AJSW006\n         B     PRTBUILD           *NOW TRY AGAIN                AJSW006\nPRTB08   DS    0H                                               AJSW006\n         L     R1,IDDCURWA        *GET CURRENT WORK AREA        AJSW006\n         ST    R0,0(,R1)          *SET THE CHAIN                AJSW006\n         B     PRTB07             *FINISH WORK AREA ALLOC       AJSW006\n*-------------------------------------------------------------* AJSW006\n*               GET A SCHEDULER CONTROL BLOCK                 * AJSW006\n*-------------------------------------------------------------* AJSW006\nCMGET0   DS    0H                                               AJSW006\n         SRL   R5,8               *SHIFT TO LOW ORDER           AJSW006\nCMGET    DS    0H                                               AJSW006\n         USING IATYVSR,R5         *PTR TO THE CONTROL BLOCK     AJSW006\n         LA    R6,VSRCB                                         AJSW006\n         BR    R7                 *RETURN TO CALLER             AJSW006\n*-------------------------------------------------------------* AJSW006\n*               RETURN FROM UX06                              * AJSW006\n*-------------------------------------------------------------* AJSW006\nWDNOGDG  DS    0H                                               AJSW006\n         IATXPTCH PSTRT=PRTBUILD                                AJSW006\nUMODNUM  DC    CL7'AJSW006'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW007": {"ttr": 7946, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW007) /*\n\n           PRINT JOB STATS ON JOB HEADER PAGE\n                                                                        $\n CHANGE HISTORY:                                                        $\n                                                                        $\n 05/15/88 J.DAILEY          RE-STRUCTURED CODE FOR MORE SEQUENCE NUMBER $\n                            SPACE. ADDED LABELS TO FIELDS IN THE LINES  $\n                            MAKING THE JOB STATS BOX. ADDED THE ABILITY $\n                            TO INSERT ROUTING INFORMATION FOR STARTED   $\n                            TASK OUTPUT.                                $\n                                                                        $\n                                                                        $\n                                             */.\n++ VER (Z038) FMID(HJS2215).\n++ SRCUPD(IATUX20) DISTLIB(AJES3SRC) .\n./ CHANGE NAME=IATUX20\n*        USER MODS =                                            AJSW007\n*                                                               AJSW007\n*             - JOB HEADER PAGE INFORMATION                     AJSW007\n*                                                               AJSW007\n*-------------------------------------------------------------* AJSW007\n*        IATUX20 - FORMAT JOB STAT'S ON HEADER PAGE           * AJSW007\n*-------------------------------------------------------------* AJSW007\n         IATYJCT ,                                              AJSW007\n         IATYJMR ,                                              AJSW007\n*        MVC   4(8,R7),WTRDOTYP    MOVE IN THE TYPE             AJSW007\n*        BAL   R9,UX20SUB          GO PRINT THE DATA            AJSW007\n         B     WCUX20              DSD USERMOD ENTRY            AJSW007\nWCUX20RT DS    0H                  RETURN POINT FROM DSD MOD    AJSW007\n*UXPRTWK EQU   1360              PR.WORK AREA SIZE 5012@ZA10720 AJSW007\nUXPRTWK  EQU   1688               *PR.WORK AREA SIZE            AJSW007\n         TITLE 'WC-DSD USER MOD ''AJSW007'''                    AJSW007\n**************************************************************  AJSW007\n*                                                               AJSW007\n*  START OF WC-DSD USERMOD                                      AJSW007\n*                                                               AJSW007\n**************************************************************  AJSW007\n*                                                               AJSW007\n*                                                               AJSW007\nWCUX20   DS    0H                                               AJSW007\n         LA    R2,20(R7)          *INITIALIZE ALL LINES         AJSW007\n         LM    R3,R5,=A(GDLSIZE,GDLINES,GDLSIZE)                AJSW007\n         MVCL  R2,R4                 ..                         AJSW007\n         LA    R6,20(,R7)         -> DSD STATISTICS LINES       AJSW007\n         USING GDLINES,R6         MAKE IT ADDRESSABLE           AJSW007\n         IATXTOD ,                                              AJSW007\n         MVC   GDL03HH,0(R1)      *TIME                         AJSW007\n         MVC   GDL03MM,2(R1)         ..                         AJSW007\n         MVC   GDL03SS,4(R1)         ..                         AJSW007\n         IATXTOD BIN                                            AJSW007\n         ST    R1,12(R7)          *DATE                         AJSW007\n         MVI   FEB+3,28           *ASSUME NOT LEAP YEAR         AJSW007\n         TM    13(R7),X'01'       *IS IT AN ODD YEAR?           AJSW007\n         BC    ALLON,AJS001       *YES, SKIP FURTHER CHECKING   AJSW007\n         TM    13(R7),X'12'       *IS IT A LEAP YEAR?           AJSW007\n         BC    MIXED,AJS001       *NO, CONTINUE                 AJSW007\n         MVI   FEB+3,29           *YES, SET FEBRUARY TO 29 DAYS AJSW007\nAJS001   DS    0H                 *DATE                         AJSW007\n         UNPK  GDL03YR1,12(4,R7)     ..                         AJSW007\n         MVC   GDL03YR2,TVTBLANK     ..                         AJSW007\n         MVC   8(6,R7),TVTZERO       ..                         AJSW007\n         CVB   R3,8(R7)              ..                         AJSW007\n         LA    R4,GDTABL             ..                         AJSW007\nGDLOOKUP S     R3,0(R4)              ..                         AJSW007\n         BNP   GDFND                 ..                         AJSW007\n         CLC   GDTABLND,4(R4)        ..                         AJSW007\n         BE    GDNOTFND              ..                         AJSW007\n         LA    R4,8(R4)              ..                         AJSW007\n         B     GDLOOKUP              ..                         AJSW007\nGDFND    A     R3,0(R4)              ..                         AJSW007\n         MVC   GDL03MO,4(R4)         ..                         AJSW007\n         CVD   R3,8(R7)              ..                         AJSW007\n         UNPK  GDL03DA,8(8,R7)       ..                         AJSW007\n         OI    GDL03DA+(L'GDL03DA-1),X'F0'                      AJSW007\n         B     GDGETJCT              ..                         AJSW007\nGDNOTFND MVC   GDL03UNK,=CL7' UNK XX' .                         AJSW007\nGDGETJCT PACK  8(8,R7),WTRDJNO    *GET THE JCT                  AJSW007\n         CVB   R1,8(R7)              ..                         AJSW007\n         IATXJCT TYPE=RW,JOBNUM=(R1),ERROR=GDPRINT  ..          AJSW007\n         LR    R4,R1                                            AJSW007\n         USING JCTSTART,R4                                      AJSW007\n         OI    JCTFL8,JCTNCHNG                                  AJSW007\n         MVI   0(R7),0            *NO GET THE JMR               AJSW007\n         LA    R1,JCTJMRFD        *GET JMR FDB                  AJSW007\n         USING FDBSTART,R1                                      AJSW007\n         TM    FDBSPFL1,FDBONSP   *IS IT ON SPOOL?              AJSW007\n         BC    ALLOFF,GDSETJMR    *YES, DONT READ IT            AJSW007\n         DROP  R1                                               AJSW007\n         MVI   0(R7),128                                        AJSW007\n         JESREAD FDB=(R1),ID=JMR  *READ IN JMR                  AJSW007\nGDSETJMR L     R5,JCTJMRFD        *FINISH UP HEADER LINE        AJSW007\n         USING JMR,R5                                           AJSW007\n         MVC   GDL03OR1,SMF26DEV  *ORIGIN                       AJSW007\n         MVC   GDL03OR2,SMF26DEV  *ORIGIN                       AJSW007\n         MVC   GDL03PG1,SMF26NAM  *PROGRAMMER NAME              AJSW007\n         MVC   GDL03PG2,SMF26NAM  *PROGRAMMER NAME              AJSW007\n         MVC   GDL07DJC,SMF26NET  *NETWORK ID                   AJSW007\n         LR    R1,R5              *SAVE BASE                    AJSW007\n         AH    R5,SMF26LN1        *POINT TO EVENT SECTION       AJSW007\n         AH    R5,SMF26LN2        *POINT TO ACTUAL SECTION      AJSW007\n         MVC   GDL09EPI,SMF26XID  *EXEC PROCESSOR ID            AJSW007\n         LR    R5,R1              *RESTORE BASE                 AJSW007\n         MVC   GDL11SJR,SMF26NJI  *FROM SYSTEM VIA NJP          AJSW007\n         MVC   GDL13MC,SMF26MSG   *MSGCLASS                     AJSW007\n         MVC   GDL07JC,SMF26CLS   *JOB CLASS                    AJSW007\n         CLI   GDL07JC,X'40'         ..                         AJSW007\n         BNE   GDBJCLAS              ..                         AJSW007\n         MVC   GDL07JJC,SMF26CLN     ..                         AJSW007\nGDBJCLAS DS    0H                                               AJSW007\n         LR    R1,R5              *SAVE BASE                    AJSW007\n         AH    R5,SMF26LN1        *POINT TO EVENT SECTION       AJSW007\n         AH    R5,SMF26LN2        *POINT TO ACTUAL SECTION      AJSW007\n         CLC   SMF26XID,TVTBLANK  *SEE IF JOB EXECUTED          AJSW007\n         BNE   GDACTUAL           *BRANCH IF YES                AJSW007\n         MVC   GDL09CR,BLANKS                                   AJSW007\n         MVC   GDL11CP,BLANKS                                   AJSW007\n         MVC   GDL13LP,BLANKS                                   AJSW007\n         MVC   GDL07ETM,BLANKS                                  AJSW007\n         B     GDEST                 ..                         AJSW007\nGDACTUAL ICM   R3,15,SMF26ICD     *CARDS READ                   AJSW007\n         CVD   R3,8(R7)              ..                         AJSW007\n         ED    GDL09CR,12(R7)        ..                         AJSW007\n         ICM   R3,15,SMF26XPU     *CARDS PUNCHED                AJSW007\n         CVD   R3,8(R7)              ..                         AJSW007\n         ED    GDL11CP,12(R7)        ..                         AJSW007\n         ICM   R3,15,SMF26XLN     *LINES PRINTED                AJSW007\n         CVD   R3,8(R7)              ..                         AJSW007\n         ED    GDL13LP,12(R7)        ..                         AJSW007\n         LR    R5,R1              *RESTORE BASE                 AJSW007\n         AH    R5,SMF26LN1        *POINT TO EVENT SECTION       AJSW007\n         ICM   R3,15,SMF26XPT     *EXECUTION TIME               AJSW007\n         ICM   R2,15,SMF26XST        ..                         AJSW007\n         SR    R3,R2                 ..                         AJSW007\n         BNM   *+8                   ..                         AJSW007\n         A     R3,=A(24*60*60*100)   ..                         AJSW007\n         MH    R3,=H'10'             ..                         AJSW007\n         SR    R2,R2                 ..                         AJSW007\n         D     R2,=F'60'             ..                         AJSW007\n         CVD   R3,8(R7)              ..                         AJSW007\n         ED    GDL07ETM,12(R7)       ..                         AJSW007\nGDEST    LR    R5,R1              *RESTORE BASE                 AJSW007\n         ICM   R3,15,SMF26EPU     *ESTIMATED PUNCH              AJSW007\n         CVD   R3,8(R7)              ..                         AJSW007\n         ED    GDL09EP,12(R7)        ..                         AJSW007\n         ICM   R3,15,SMF26ELN     *ESTIMATED LINES              AJSW007\n         CVD   R3,8(R7)              ..                         AJSW007\n         ED    GDL11EP,12(R7)        ..                         AJSW007\n         ICM   R3,15,SMF26XTM     *ESTIMATED EXECUTION TIME     AJSW007\n         BNZ   *+8                   ..                         AJSW007\n         L     R3,=A(3*60)           ..                         AJSW007\n         MH    R3,=H'1000'           ..                         AJSW007\n         SR    R2,R2                 ..                         AJSW007\n         D     R2,=F'60'             ..                         AJSW007\n         CVD   R3,8(R7)              ..                         AJSW007\n         ED    GDL13ECM,12(R7)       ..                         AJSW007\n         CLI   0(R7),128          *RELEASE THE JMR              AJSW007\n         BNE   GDRELJCT              ..                         AJSW007\n         MVI   0(R7),0               ..                         AJSW007\n         LA    R1,JCTJMRFD           ..                         AJSW007\n         ARELEASE FDB=(R1)           ..                         AJSW007\nGDRELJCT PACK  8(8,R7),WTRDJNO    *RELEASE THE JCT              AJSW007\n         CVB   R1,8(R7)              ..                         AJSW007\n         IATXJCT TYPE=REL,JOBNUM=(R1),ERROR=GDPRINT  ..         AJSW007\nGDPRINT  DS    0H                                               AJSW007\n         CLC   =C'STC ',GDL03OR1   OUTPUT FOR AN STC            AJSW007\n         BC    EQ,PROCSTC          YES,CHECK SPECIAL ROUTING    AJSW007\n         CLC   =C'JES5 ',WTRDJNAM   OUTPUT FOR JES5             AJSW007\n         BC    EQ,JESJOB           YES, FIXED ROUTING           AJSW007\n         CLC   =C'JES3 ',WTRDJNAM   OUTPUT FOR JES3             AJSW007\n         BC    NE,NOROUTE          NO,CONTINUE                  AJSW007\n*                                                               AJSW007\nJESJOB   DS    0H                                               AJSW007\n         MVC   GDL07ETM,BLANKS     CLEAR INFO FROM SMF FIELDS   AJSW007\n         MVC   GDL09CR,BLANKS      FOR ALL JES3 JOBS            AJSW007\n         MVC   GDL09EP,BLANKS             \"                     AJSW007\n         MVC   GDL11CP,BLANKS             \"                     AJSW007\n         MVC   GDL11EP,BLANKS             \"                     AJSW007\n         MVC   GDL13LP,BLANKS             \"                     AJSW007\n         MVC   GDL13ECM,BLANKS            \"                     AJSW007\n         MVC   GDL03OR1,WTRDJNAM   JOB NAME IS ORIGIN 1         AJSW007\n         MVC   GDL03OR2,WTRDJNAM   JOB NAME IS ORIGIN 2         AJSW007\n*                                                               AJSW007\nPROCSTC  DS    0H                                               AJSW007\n         ICM   R1,B'1111',STCREPA  -> STC ROUTE TABLE           AJSW007\n         BNZ   HAVETAB             CONTINUE IF TABLE LOADED     AJSW007\n         ALOAD EPLOC=STCRNAME      LOAD ROUTING TABLE.          AJSW007\n         LR    R1,R0               COPY EPA TO WORK REG.        AJSW007\n         ST    R1,STCREPA          SAVE EPA FOR NEXT STC        AJSW007\n*                                                               AJSW007\nHAVETAB  DS    0H                                               AJSW007\n         USING STCTABLE,R1         ADDRESSABILITY               AJSW007\n         L     R0,0(,R1)           NUMBER OF ENTRIES IN TABLE   AJSW007\n         L     R1,4(,R1)           -> FIRST ENTRY IN TABLE      AJSW007\n         SLR   R3,R3               CLEAR LENGTH REG.            AJSW007\n*                                                               AJSW007\nSTCHECK  DS    0H                                               AJSW007\n         IC    R3,STCJNL           GET LENGTH TO COMPARE        AJSW007\n         EX    R3,STCCLC           STC TO BE ROUTED             AJSW007\n         BC    EQ,STCMRI           YES,MOVE ROUTEING INFO       AJSW007\n         LA    R1,STCTABL(,R1)     BUMP TO NEXT ENTRY           AJSW007\n         BCT   R0,STCHECK          LOOP BACK TIL DONE.          AJSW007\n         B     NOROUTE             DO NOT ROUTE                 AJSW007\n*                                                               AJSW007\nSTCCLC   CLC   STCSTCJN(0),WTRDJNAM **** OBJECT OF EXECUTE      AJSW007\n*                                                               AJSW007\nSTCMRI   DS    0H                                               AJSW007\n         MVC   GDL03PG1,STCROUTE   COPY ROUTING INFORMATION     AJSW007\n         MVC   GDL03PG2,STCROUTE   COPY ROUTING INFORMATION     AJSW007\n         DROP  R1                                               AJSW007\n*                                                               AJSW007\nNOROUTE  DS    0H                                               AJSW007\n         LA    R3,GDLENT#          NUMBER OF LINES TO CLEAN UP  AJSW007\n         LR    R2,R6               -> FIRST LINE                AJSW007\n*                                                               AJSW007\nGDTRT    TR    0(GDL#,R2),TRTAB    REMOVE BINARY ZEROES         AJSW007\n         LA    R2,GDL#(,R2)        NEXT LINE                    AJSW007\n         BCT   R3,GDTRT            LOOP BACK FOR NEXT LINE      AJSW007\n         LA    R3,GDLENT#          NUMBER OF LINES TO PRINT     AJSW007\n         LR    R2,R6               -> FIRST LINE                AJSW007\n         BAL   R9,UX20S150         PRINT OUR LITTLE BOX         AJSW007\n         B     WCUX20RT           BACK TO THE MAIN LINE         AJSW007\n         EJECT                                                  AJSW007\n         LTORG ,                                                AJSW007\n*                                                               AJSW007\nBLANKS   DC    CL11' '             FIELD OF 11 BLANKS           AJSW007\n*                                                               AJSW007\nGDTABL   DC    A(31)              *JANUARY                      AJSW007\n         DC    C'JAN'                ..                         AJSW007\nFEB      DC    A(28)              *FEBRUARY                     AJSW007\n         DC    C'FEB'                ..                         AJSW007\n         DC    A(31)              *MARCH                        AJSW007\n         DC    C'MAR'                ..                         AJSW007\n         DC    A(30)              *APRIL                        AJSW007\n         DC    C'APR'                ..                         AJSW007\n         DC    A(31)              *MAY                          AJSW007\n         DC    C'MAY'                ..                         AJSW007\n         DC    A(30)              *JUNE                         AJSW007\n         DC    C'JUN'                ..                         AJSW007\n         DC    A(31)              *JULY                         AJSW007\n         DC    C'JUL'                ..                         AJSW007\n         DC    A(31)              *AUGUST                       AJSW007\n         DC    C'AUG'                ..                         AJSW007\n         DC    A(30)              *SEPTEMBER                    AJSW007\n         DC    C'SEP'                ..                         AJSW007\n         DC    A(31)              *OCTOBER                      AJSW007\n         DC    C'OCT'                ..                         AJSW007\n         DC    A(30)              *NOVEMBER                     AJSW007\n         DC    C'NOV'                ..                         AJSW007\n         DC    A(31)              *DECEMBER                     AJSW007\nGDTABLND DC    C'DEC'                ..                         AJSW007\nTRTAB    DC    256AL1(*-TRTAB)                                  AJSW007\n         ORG   TRTAB                                            AJSW007\n         DC    C' '                                             AJSW007\n         ORG   ,                                                AJSW007\n         EJECT                                                  AJSW007\nSTCRNAME DC    CL8'STCROUTE'       NAME OF STC ROUTING TABLE    AJSW007\nSTCREPA  DC    A(0)                EPA OF STC ROUTING TABLE     AJSW007\n*                                                               AJSW007\nSTCTABLE DSECT ,                                                AJSW007\nSTCJNL   DS    AL1                 LENGTH OF THE STC JOBNAME    AJSW007\nSTCSTCJN DS    CL8                 STC JOBNAME                  AJSW007\nSTCROUTE DS    CL20                ROUTING INFORMATION          AJSW007\nSTCTABL  EQU   *-STCTABLE          LENGTH OF AN ENTRY           AJSW007\nIATUX20  CSECT ,                                                AJSW007\n         EJECT                                                  AJSW007\nGDLINES  CSECT ,                                                AJSW007\nGDL#     EQU   111                 LENGTH OF EACH LINE          AJSW007\nGDL01    DC    C' ',(GDL#-1)C'*'                                AJSW007\n*                                                               AJSW007\nGDL02    DC    CL(GDL#-1)' *'                                   AJSW007\n         DC    C'*'                                             AJSW007\n*                                                               AJSW007\nGDL03    DC    CL4' *'                                          AJSW007\nGDL03OR1 DC    CL8' '                                           AJSW007\n         DC    CL3' '                                           AJSW007\nGDL03PG1 DC    CL20' '                                          AJSW007\n         DC    CL8' '                                           AJSW007\nGDL03MO  DC    CL3' '                                           AJSW007\n         DC    C' '                                             AJSW007\nGDL03DA  DC    CL2' '                                           AJSW007\n         ORG   GDL03MO                                          AJSW007\nGDL03UNK DS    0CL7                                             AJSW007\n         ORG   ,                                                AJSW007\n         DC    C', 19'                                          AJSW007\nGDL03YR1 DS    0CL5                                             AJSW007\n         DC    CL2' '                                           AJSW007\nGDL03YR2 DC    CL3' '                                           AJSW007\nGDL03HH  DC    CL2' '                                           AJSW007\n         DC    C'.'                                             AJSW007\nGDL03MM  DC    CL2' '                                           AJSW007\n         DC    C'.'                                             AJSW007\nGDL03SS  DC    CL2' '                                           AJSW007\n         DC    CL12' '                                          AJSW007\nGDL03PG2 DC    CL20' '                                          AJSW007\n         DC    CL3' '                                           AJSW007\nGDL03OR2 DC    CL8' '                                           AJSW007\n         DC    C' *'                                            AJSW007\n*                                                               AJSW007\nGDL04    DC    CL(GDL#-1)' *'                                   AJSW007\n         DC    C'*'                                             AJSW007\n*                                                               AJSW007\nGDL05    DC    C' ',(GDL#-1)C'*'                                AJSW007\n*                                                               AJSW007\nGDL06    DC    CL40' *'                                         AJSW007\n         DC    CL30' *'                                         AJSW007\n         DC    CL40' *'                                         AJSW007\n         DC    C'*'                                             AJSW007\n*                                                               AJSW007\nGDL07    DC    CL5' *'                                          AJSW007\nGDL07DJC DC    CL8' '                                           AJSW007\n         DC    CL17' - DJC NETWORK ID'                          AJSW007\n         DC    CL11' '                                          AJSW007\n         DC    CL4'* '                                          AJSW007\nGDL07JJC DC    CL8' '                                           AJSW007\n         ORG   *-1                                              AJSW007\nGDL07JC  DC    C' '                                             AJSW007\n         DC    CL17' - JOB CLASS'                               AJSW007\n         DC    CL3' *'                                          AJSW007\nGDL07ETM DC    XL11'40206B2020214B20202040'                     AJSW007\n         DC    CL26'- ELAPSED TIME IN MINUTES'                  AJSW007\n         DC    C'*'                                             AJSW007\n*                                                               AJSW007\nGDL08    DC    CL40' *'                                         AJSW007\n         DC    CL30' *'                                         AJSW007\n         DC    CL40' *'                                         AJSW007\n         DC    C'*'                                             AJSW007\n*                                                               AJSW007\nGDL09    DC    CL9' *'                                          AJSW007\nGDL09EPI DC    CL4' '                                           AJSW007\n         DC    CL27' - EXECUTION PROCESSOR ID'                  AJSW007\n         DC    CL3' *'                                          AJSW007\nGDL09CR  DC    XL11'40206B2020206B20202040'                     AJSW007\n         DC    CL16'- CARDS READ'                               AJSW007\n         DC    CL3' *'                                          AJSW007\nGDL09EP  DC    XL11'40206B2020206B20202040'                     AJSW007\n         DC    CL26'- ESTIMATED PUNCH'                          AJSW007\n         DC    C'*'                                             AJSW007\n*                                                               AJSW007\nGDL10    DC    CL40' *'                                         AJSW007\n         DC    CL30' *'                                         AJSW007\n         DC    CL40' *'                                         AJSW007\n         DC    C'*'                                             AJSW007\n*                                                               AJSW007\nGDL11    DC    CL5' *'                                          AJSW007\nGDL11SJR DC    CL8' '                                           AJSW007\n         DC    CL27' - SYSTEM JOB RECEIVED FROM'                AJSW007\n         DC    CL3' *'                                          AJSW007\nGDL11CP  DC    XL11'40206B2020206B20202040'                     AJSW007\n         DC    CL16'- CARDS PUNCHED'                            AJSW007\n         DC    CL3' *'                                          AJSW007\nGDL11EP  DC    XL11'40206B2020206B20202040'                     AJSW007\n         DC    CL26'- ESTIMATED PRINT'                          AJSW007\n         DC    C'*'                                             AJSW007\n*                                                               AJSW007\nGDL12    DC    CL40' *'                                         AJSW007\n         DC    CL30' *'                                         AJSW007\n         DC    CL40' *'                                         AJSW007\n         DC    C'*'                                             AJSW007\n*                                                               AJSW007\nGDL13    DC    CL12' *'                                         AJSW007\nGDL13MC  DC    C' '                                             AJSW007\n         DC    CL27' - MSGCLASS'                                AJSW007\n         DC    CL3' *'                                          AJSW007\nGDL13LP  DC    XL11'40206B2020206B20202040'                     AJSW007\n         DC    CL16'- LINES PRINTED'                            AJSW007\n         DC    CL3' *'                                          AJSW007\nGDL13ECM DC    XL11'40206B2020214B20202040'                     AJSW007\n         DC    CL26'- ESTIMATED CPU MINUTES'                    AJSW007\n         DC    C'*'                                             AJSW007\n*                                                               AJSW007\nGDL14    DC    CL40' *'                                         AJSW007\n         DC    CL30' *'                                         AJSW007\n         DC    CL40' *'                                         AJSW007\n         DC    C'*'                                             AJSW007\n*                                                               AJSW007\nGDL15    DC    C' ',(GDL#-1)C'*'                                AJSW007\n*                                                               AJSW007\nGDLENT#  EQU   (*-GDLINES)/GDL#   *NUMBER OF LINES IN TABLE     AJSW007\nGDLSIZE  EQU   *-GDLINES          *SIZE OF TABLE IN BYTES       AJSW007\nIATUX20  CSECT ,                  *BACK TO NORMAL CSECT         AJSW007\nUMODNUM  DC    CL7'AJSW007'       *USER NUMBER                  AJSW007\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AJSW008": {"ttr": 8198, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW008) /*\n\n    THIS MODIFICATION CONTAINS THE FOLLOWING:\n     1. IATUX04 - ACCT VALIDATION CODE (TSO LOGONS)\n                - RESTRICTED CLASS VERIFICATION + AJSW208\n     2. ACCT    - ACCT DSP\n     3. ACCTSAVE- ACCT DSP SAVEAREA\n                                                                        $\n CHANGE HISTORY:                                                        $\n                                                                        $\n 05/15/88 J. DAILEY           TURN WARN MODE OFF FOR CVER. RE-WORKED    $\n                              CODE TO ALLOW MORE SEQUENCE NUMBER SPACE. $\n 05/29/88 J. DAILEY           FIX BUG IN CVER CHECKING FOR PROD CLASS.  $\n                                                                        $\n                                      */.\n++ VER(Z038) FMID(HJS2215) PRE(AJSW003).\n++ JCLIN .\n//GEN11 JOB WC07Z0044,'531-1  CR SINGER'\n//SG21 EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,RENT,REUS',\n//    UNIT='3350',SER=IPLYYY,N=GEN1,NAME=JES3LIB,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=MVS3.INCLUDE\n//SYSLIN DD *\n    INCLUDE INCLUDE(ACCT)\n NAME ACCT(R)\n/*\n//SG22 EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET',\n//    UNIT='3350',SER=IPLYYY,N=GEN1,NAME=JES3LIB,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=MVS3.INCLUDE\n//SYSLIN DD *\n    INCLUDE INCLUDE(ACCTSAVE)\n NAME ACCTSAVE(R)\n/*\n++ SRCUPD(IATUX04) .\n./ CHANGE NAME=IATUX04\n* USER MODS:                                                    AJSW008\n*                                                               AJSW008\n*      - ACCT VALIDATION CODE FOR TSO LOGONS                    AJSW008\n*      - JOBCLASS RESTRICTION ENFORCEMENT                       AJSW208\n*                                                               AJSW008\n         IATYTVT ,                                              AJSW008\n         EJECT                                                  AJSW008\n         IATYJDA ,                                              AJSW008\n         EJECT                                                  AJSW008\n         IATYRSQ ,                                              AJSW008\n         EJECT                                                  AJSW008\n         IATYJMR ,                                              AJSW008\n         EJECT                                                  AJSW008\n         IATYMPC ,                                              AJSW008\n         EJECT                                                  AJSW008\n         IATYDST ,                                              AJSW008\n         EJECT                                                  AJSW008\n         CVERTAB ,                 CLASS VERIFICATION TABLE     AJSW208\n         EJECT                                                  AJSW208\n         B     GDUX04             BRANCH TO DSD USER MOD CODE   AJSW008\n         EJECT                                                  AJSW008\n****************************************************************AJSW008\n*                                                              *AJSW008\n*               START OF DSD/WC USERMOD CODE                   *AJSW008\n*                                                              *AJSW008\n****************************************************************AJSW008\n*                                                               AJSW008\n*                                                               AJSW008\nGDUX04   DS    0H                                               AJSW008\n         USING IATYIDD,R13        *INTERPRETER DSP WORK AREA    AJSW008\n         DROP  R15                *RE-ESTABLISH MY BASE         AJSW008\n         LR    R10,R15            *GET BASE REGISTER            AJSW008\n         USING IATUX04,R10        *ADDRESS IT                   AJSW008\n         L     R3,RQTOP           *GET RQ CHAIN                 AJSW008\n         USING RQSTART,R3         *ADDRESS IT                   AJSW008\nFINDRQ   DS    0H                                               AJSW008\n         CLC   RQJNUM,IDDJOBNO    *FIND RQ BY JOB NUMBER?       AJSW008\n         BC    EQ,READJDAB        *..YES, PROCESS IT            AJSW008\n         ICM   R3,15,RQNEXT       *SEARCH CHAIN                 AJSW008\n         BC    NZERO,FINDRQ       *LOOP BACK                    AJSW008\n         TM    IDDGTRC1,IDDGTSOL  *NO RQ ENTRY - IS IT TSO ?    AJSW008\n         BC    ALLOFF,RETURN4A    *..NO - DON'T FAIL JOB        AJSW008\n         B     RETURN8A           *..YES - CANCEL JOB           AJSW008\nREADJDAB DS    0H                                               AJSW008\n         JESREAD FDB=RQJDBFDB,ID=JDAB READ JDAB                 AJSW008\n         L     R4,RQJDBFDB        *SET JDAB BASE                AJSW008\n         USING JDABSTRT,R4        *ADDRESS IT                   AJSW008\n         TM    IDDGTRC1,IDDGTSOL  *IS IT TSO?                   AJSW008\n         BC    ALLOFF,STOREJMR    *..NO, DON'T FAIL THE JOB     AJSW008\n         TM    JDABUFLG,JDABFTSO  *IS JOB TO BE CANCELLED?      AJSW008\n         BC    ALLOFF,STOREJMR    *..NO, DON'T FAIL THE JOB     AJSW008\n         LA    R0,70              *BAD ACCT - TELL THE WORLD    AJSW008\n         B     RETURN8        ************** RETURN *********** AJSW008\n         AGETMAIN SIZE=(R0),      *GET WORKING STORAGE          AJSW008X\n               LOC=(ANY,ANY),BUSY=RETURN8                       AJSW008\n         LR    R5,R1              *SAVE ADDRESS                 AJSW008\n         MVC   0(70,R1),TSOMSG    *SET UP SEND MESSAGE          AJSW008\n         LA    R5,50(R1)          *POINT TO END                 AJSW008\n         MVC   0(7,R5),IDDTSOID   *MOVE IN TSO USERID           AJSW008\n         LA    R2,MAINDATA        *ADDR OF ADDR OF 1ST MAIN     AJSW008\n         USING MPCSTART,R2        *ADDRESS IT                   AJSW008\n         SL    R2,=A(MPNEXT-MPCSTART) *MINUS CHAIN FIELD OFFSET AJSW008\n         SPACE 2                                                AJSW008\nSRCHSYS  DS    0H                                               AJSW008\n         CLC   MPSEQNO,RQMPSEQ    *RIGHT ONE?                   AJSW008\n         BC    EQ,SRCHSYS1        *..YES, GO PROCESS            AJSW008\n         ICM   R2,X'F',MPNEXT     *GET NEXT MAIN                AJSW008\n         BC    ZERO,RETURN8       *NONE FOUND, RETURN           AJSW008\n         B     SRCHSYS            *CHECK NEXT MAIN              AJSW008\nSRCHSYS1 DS    0H                                               AJSW008\n         LR    R5,R1              *POINT AT MESSAGE             AJSW008\n         JSERV TEXT=(R5),MOD=MODSVC34, *WRITE OUT MESSAGE       AJSW008X\n               MPC=(R2),DEST=DSTC34                             AJSW008\n         SPACE 2                                                AJSW008\n         MVC   0(70,R5),BADACCT   *MOVE IN MESSAGE              AJSW008\n         MVC   16(8,R5),IDDJOBNM  *MOVE IN JOB NAME             AJSW008\n         MVC   25(4,R5),IDDJOBNO  *MOVE IN JOB NUMBER           AJSW008\n         LR    R1,R5              *SET UP REG                   AJSW008\n         IATXIWT TYPE=MOPER,      *SEND MESSAGE                 AJSW008X\n               MSG=(R1)                                         AJSW008\n         LR    R1,R5              *POINT TO AREA                AJSW008\n         LA    R0,70              *SETUP SIZE                   AJSW008\n         APUTMAIN SIZE=(R0),      *THEN FREE STORAGE            AJSW008X\n               AREA=(R1)                                        AJSW008\n         B     RETURN8            *GO REJECT THE JOB            AJSW008\n         SPACE 3                                                AJSW008\nSTOREJMR DS    0H                                               AJSW008\n         LA    R6,JDABJBCD        *R6=JOB CARD POINTER          AJSW008\n         LA    R7,3(R6)           *R7=CURRENT SEARCH POSITION   AJSW008\n         LA    R8,61(R6)          *R8=END SEARCH POSITION       AJSW008\nJOBSCAN  DS    0H                                               AJSW008\n         CLC   =C' JOB ',0(R7)    *LOOKING FOR ' JOB ' ?        AJSW008\n         BC    EQ,JOBFOUND        *..YES, GO FIND ACCT NUMBER   AJSW008\n         CR    R7,R8              *POSSIBILITY OF JOB EXCEEDED  AJSW008\n         BH    RETURN4            *..YES, IGNORE IT             AJSW008\n         LA    R7,1(R7)           *TRY NEXT POSITION            AJSW008\n         B     JOBSCAN            *GO TRY AGAIN                 AJSW008\nJOBFOUND DS    0H                                               AJSW008\n         LA    R7,5(R7)           *SKIP PAST ' JOB '            AJSW008\nJCLSCAN  DS    0H                                               AJSW008\n         CLI   0(R7),X'4D'        *OPEN PAREN?                  AJSW008\n         BC    EQ,ACCTNEXT        *..YES, ACCT SHOULD BE NEXT   AJSW008\n         CLI   0(R7),X'7D'        *QUOTE?                       AJSW008\n         BC    EQ,ACCTNEXT        *..YES, ACCT SHOULD BE NEXT   AJSW008\n         CLI   0(R7),X'40'        *BLANK?                       AJSW008\n         BC    NE,ACCTNXT1        *..NO, ACCT HAS TO BE NEXT    AJSW008\n         LA    R7,1(R7)           *GET NEXT POSITION            AJSW008\n         CR    R7,R8              *POSSIBILITY ACCT EXCEEDED?   AJSW008\n         BC    GT,RETURN4         *..YES, SKIP IT               AJSW008\n         B     JCLSCAN            *GO TRY AGAIN                 AJSW008\nACCTNEXT DS    0H                                               AJSW008\n         LA    R7,1(R7)           *BUMP TO ACCT NUMBER          AJSW008\nACCTNXT1 DS    0H                                               AJSW008\n         ICM   R8,15,IDDJMR       *GET JMR ADDRESS              AJSW008\n         BC    ZERO,RETURN4       *SKIP IF NONE                 AJSW008\n         USING JMR,R8             *ADDRESS IT                   AJSW008\n         MVC   JMRUSEID(7),0(R7)  *MOVE 7 BYTES TO JMR USERID   AJSW008\n         B     RETURN4            *ALL DONE                     AJSW008\nRELRET8  DC    0H'0'                                            AJSW208\nRETURN8  ARELEASE FDB=RQJDBFDB    *RELEASE THE JDAB             AJSW008\nRETURN8A LA    R15,8              *RC='REJECT THE JOB'          AJSW008\n         ARETURN                  *RETURN TO CALLER             AJSW008\nRETURN4  DC    0H'0'                                            AJSW208\n         TM    IDDGTRC2,IDDGDSEL   DEMAND SELECT JOB?           AJSW208\n         BC    ALLOFF,CVERBGN      NO, DO RESTRICTED CLASS CHEK AJSW208\nRELRET4  DC    0H'0'                                            AJSW208\n         ARELEASE FDB=RQJDBFDB    *RELEASE THE JDAB             AJSW008\nRETURN4A LA    R15,4              *RC='ACCEPT THE JOB'          AJSW008\n*        GIVE RETURN CODE OF 4    *HONOR STAGING DRIVE GROUPS   AJSW008\n         ARETURN                  *RETURN TO CALLER.            AJSW008\n*************************************************************** AJSW208\n*                                                               AJSW208\n*        A BATCH JOB IS BEING PROCESSED,                        AJSW208\n*              CHECK FOR SUBMISSION TO A RESTRICTED JOB CLASS   AJSW208\n*              IF RESTRICTED JOB CLASS CHECK IF USER IS ALLOWED AJSW208\n*              TO USE THE RESTRICTED CLASS. IF NOT, THE JOB     AJSW208\n*              CLASS IS SET TO THE DEFAULT WHICH AT THIS TIME   AJSW208\n*              IS JS3BATCH.                                     AJSW208\n*                                                               AJSW208\n*              THERE IS EXCEPTION PROCESSING FOR THE FOLLOWING  AJSW208\n*              CLASSES:                                         AJSW208\n*                      PROD                                     AJSW208\n*                      BMP                                      AJSW208\n*                                                               AJSW208\n*              IF A USER SUBMITS A JOB TO EITHER OF THESE       AJSW208\n*              CLASSES AND, THE USER ID IS NOT IN THE TABLE     AJSW208\n*              AND THE USER ID DOES NOT BEGIN WITH '$', THE     AJSW208\n*              JOB IS ALLOWED TO RUN IN THE RESTRICTED JOB      AJSW208\n*              CLASS.                                           AJSW208\n*                                                               AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\n*                                                               AJSW208\nCVERBGN  DC    0H'0'                                            AJSW208\n         ICM   R8,B'1111',IDDJMR   -> JOB MANAGEMENT RECORD     AJSW208\n         BC    ZERO,RELRET4        NO JMR? EXIT                 AJSW208\n         USING JMR,R8              JMR ADDRESSABILITY           AJSW208\n         CLC   SMF26CLN,TVTBLANK   CLASS PRESENT?               AJSW208\n         BC    EQ,RELRET4          NO CLASS NAME, EXIT          AJSW208\n*                                                               AJSW208\nCVER0100 DS    0H                                               AJSW208\n         ICM   R6,B'1111',TVTUVER  -> 1ST RESTRICTED CLASS BLK  AJSW208\n         BC    NZERO,CVER0120       TABLE PRESENT, LOCK IT.     AJSW208\n         TM    TVTUFLG2,TVTUCVLD    INITIAL LOAD BEEN DONE      AJSW208\n         BC    ALLON,RELRET4        YES, OPERATOR DISABLED      AJSW208\n*                                                               AJSW208\n         INTERCOM CONS=DUMMY,     INVOKE CVER DSP TO LOAD THE   AJSW208$\n               TEXT=CALLCVER         RESTRICTED CLASS TABLE     AJSW208\n*                                                               AJSW208\n         AWAIT TYPE=ON,              WAIT FOR CVER TO LOAD THE  AJSW208$\n               ECFMASK=TVTUCVLD,     RESTRICTED CLASS TABLE     AJSW208$\n               ECFADD=TVTUFLG2                                  AJSW208\n*                                                               AJSW208\n         B     CVER0100              GIVE IT ANOTHER TRY        AJSW208\n*                                                               AJSW208\nCVER0120 DS    0H                                               AJSW208\n         N     R6,CLEARBIT         ENSURE BUSY BIT IS OFF       AJSW208\n         LR    R15,R6              COPY -> TO UPDATE REG        AJSW208\n         O     R15,BUSYBIT         SET BUSY BIT FOR UPDATE      AJSW208\n         CS    R6,R15,TVTUVER      ATTEMPT TO LOCK CLASS TABLE  AJSW208\n         BC    EQ,CVER0200         GOT IT, CONTINUE             AJSW208\n*                                                               AJSW208\n         AWAIT TYPE=OFF,           WAIT FOR TABLE TO BE FREE    AJSW208$\n               ECFMASK=X'80',                                   AJSW208$\n               ECFADD=TVTUVER                                   AJSW208\n*                                                               AJSW208\n         B     CVER0100            GO BACK AND TRY AGAIN        AJSW208\n*                                                               AJSW208\n         USING CVERTABH,R6         CLASS VERIFY BLOCK ADDRBLTY  AJSW208\n*                                                               AJSW208\nCVER0200 DS    0H                                               AJSW208\n         LA    R6,CVERTCTB         -> FIRST CLASS TABLE         AJSW208\n         DROP  R6                                               AJSW208\n         USING CVERCTAB,R6         CLASS ENTRY ADDRESSABILITY   AJSW208\n*                                                               AJSW208\nCVER0300 DS    0H                                               AJSW208\n         CLC   SMF26CLN,CVERCNAM   USER'S CLASS RESTRICTED?     AJSW208\n         BC    EQ,CVER0400         YES, CHECK IF USER ALLOWED   AJSW208\n         ICM   R1,B'1111',CVERCNXT NO,OFFSET TO NEXT TABLE      AJSW208\n         BC    ZERO,CVER0600       NO MORE, ALLOW JOB TO RUN    AJSW208\n         LA    R6,0(R1,R6)         -> NEXT CLASS TABLE          AJSW208\n         B     CVER0300            CHECK FOR THIS CLASS         AJSW208\n*                                                               AJSW208\nCVER0400 DS    0H                                               AJSW208\n         SLR   R0,R0               CLEAR LOOP CONTROL REG       AJSW208\n         ICM   R0,B'0011',CVERCEN# GET NUMBER OF ENTRIES IN TAB AJSW208\n         BC    ZERO,CVER0700       NO,ENTRIES - REJECT JOB      AJSW208\n         LA    R2,CVERCUSR         -> FIRST USER ENTRY          AJSW208\n         USING CVERUTAB,R2         USER ENTRY ADDRESSABILITY    AJSW208\n*                                                               AJSW208\nCVER0500 DS    0H                                               AJSW208\n         SLR   R1,R1               CLEAR LENGTH REGISTER        AJSW208\n         IC    R1,CVERULNG         LENGTH OF USERNAME-1         AJSW208\n         EX    R1,CVERCLC          USERID FOUND                 AJSW208\n         BC    EQ,CVER0600         YES, ALLOW THE JOB TO RUN    AJSW208\n         LA    R2,2(R1,R2)         NO, GET NEXT USER ID         AJSW208\n         BCT   R0,CVER0500         LOOP BACK TILL DONE          AJSW208\n         B     CVER0700            CHECK FOR CLASS OF PROD      AJSW208\n*                                                               AJSW208\nCVERCLC  CLC   CVERUNAM(0),JDABRACU   *** E X E C U T E D ***   AJSW208\n*                                                               AJSW208\nCVER0600 DS    0H                                               AJSW208\n         NI    TVTUVER,TURNOFF-HIBIT UNLOCK THE TABLE           AJSW208\n         B     RELRET4             EXIT, ALLOW THE JOB TO RUN   AJSW208\n*                                                               AJSW208\nCVER0700 DS    0H                                               AJSW208\n         CLC   =C'BMP ',SMF26CLN   IS THIS CLASS BMP            AJSW008\n         BC    EQ,CVER0750         YES,CHECK SPECIAL USERID     AJSW008\n         CLC   =C'PROD ',SMF26CLN  IS THIS CLASS PROD           AJSW208\n         BC    NE,CVER0800        NO,FAIL THE JOB               AJSW208\nCVER0750 DS    0H                                               AJSW008\n         CLI   JDABRACU,C'$'      YES, TSO USER ID              AJSW208\n         BC    EQ,CVER0800        YES, FAIL THE JOB             AJSW208\n         CLI   JDABRACU,X'00'     USER ID MISSING               AJSW208\n         BC    EQ,CVER0800        YES, FAIL THE JOB             AJSW208\n         CLC   =C'INTRDR',JDABRACU NO, INTRDR USER ID           AJSW208\n         BC    NE,CVER0600        NO, ALLOW THE JOB TO RUN      AJSW208\n*                                                               AJSW208\nCVER0800 DS    0H                                               AJSW208\n         LA    R0,WC013A#          SIZE OF WORK AREA            AJSW208\n*                                                               AJSW208\n         AGETMAIN SIZE=(R0),       ALLOCATE MESSAGE WORK AREA   AJSW208$\n               LOC=(ANY,ANY),                                   AJSW208$\n               BUSY=CVER9900                                    AJSW208\n*                                                               AJSW208\n         LR    R5,R1               -> POINTER TO MSG AREA       AJSW208\n         MVC   0(WC013A#,R5),WC013A     COPY MSG SKELETON       AJSW208\n         MVC   WC013AI1(L'WC013AI1,R5),CVERCNAM  RESTRICTED CLS AJSW208\n*                                                               AJSW208\n         IATXIWT TYPE=MOPER,       SEND MESSAGE TO CONSOLE AND  AJSW208$\n               MSG=(R1)            TO THE JESMSG DATA SET       AJSW208\n*                                                               AJSW208\n         MVI   0(R5),C' '          INITIALIZE ENTIRE BUFFER     AJSW208\n         MVC   1(WC013A#-1,R5),0(R5)                            AJSW208\n         MVC   0(WC013#,R5),IATWC013    COPY MSG SKELETON       AJSW208\n         MVC   WC013I1(L'WC013I1,R5),JDABRACU    SET USERID     AJSW208\n         MVC   WC013I2(L'WC013I2,R5),JDABJNAM    JOB NAME       AJSW208\n         MVC   WC013I3(L'WC013I3,R5),JDABJNUM    JOB NUMBER     AJSW208\n         LR    R1,R5              -> MESSAGE AREA               AJSW208\n*                                                               AJSW208\n         IATXIWT TYPE=MOPER,       SEND MESSAGE TO CONSOLE AND  AJSW208$\n               MSG=(R1)            TO THE JESMSG DATA SET       AJSW208\n*                                                               AJSW208\n         MVI   0(R5),C' '          INITIALIZE ENTIRE BUFFER     AJSW208\n         MVC   1(WC013B#-1,R5),0(R5)                            AJSW208\n         MVC   0(WC013B#,R5),WC013B     COPY MSG SKELETON       AJSW208\n         MVC   WC013BI1(L'WC013BI1,R5),JOBCLS NEW JOB CLASS     AJSW208\n         LR    R1,R5              -> MESSAGE AREA               AJSW208\n*                                                               AJSW208\n         IATXIWT TYPE=TITLE,       SEND MESSAGE TO CONSOLE AND  AJSW208$\n               MSG=(R1)            TO THE JESMSG DATA SET       AJSW208\n*                                                               AJSW208\n         LR    R1,R5              -> AREA TO RELEASE            AJSW208\n         LA    R0,WC013A#         SIZE OF AREA TO RELEASE       AJSW208\n*                                                               AJSW208\n         APUTMAIN SIZE=(R0),      RELEASE THE MESSAGE AREA      AJSW208$\n               AREA=(R1)                                        AJSW208\n*                                                               AJSW208\nCVER9900 DS    0H                                               AJSW208\n         NI    TVTUVER,TURNOFF-HIBIT UNLOCK THE CLASS TABLE     AJSW208\n         MVC   SMF26CLN,JOBCLS     SET DEFAULT JOBCLASS         AJSW208\n         B     RELRET4             NORMAL RETURN                AJSW208\n*                                                               AJSW208\nCLEARBIT DC    0F'0',X'7FFFFFFF'   MASK TO CLEAR HIGH WORD BIT  AJSW208\nBUSYBIT  DC    0F'0',X'80000000'   MASK TO SET HIGH WORD BIT    AJSW208\n*                                                               AJSW208\nHIBIT    EQU   X'80'               HI BIT FLAG                  AJSW208\nTURNOFF  EQU   255                 MASK TO TURN OFF BITS        AJSW208\n*                                                               AJSW208\nBADACCT  DS    0F                                               AJSW008\n         DC    AL1(69)                                          AJSW008\n         DC    CL35'IAT0404 *****          (    ) REJEC'        AJSW008\n         DC    CL34'TED --- INVALID ACCT NUMBER ***** '         AJSW008\nTSOMSG   DS    0F                                               AJSW008\n         DC    AL2(MSGLEN)                                      AJSW008\n         DC    CL35'SE '' IAT0504 *** INVALID ACCT NUMBE'       AJSW008\n         DC    CL21'R ***'',USER=(       )'                     AJSW008\n         DC    CL11' '            *FILLER                       AJSW008\n         DC    XL2'00'            *PLACE FOR CONS ID            AJSW008\nMSGLEN   EQU   (*-TSOMSG)         *LENGTH OF MESSAGE            AJSW008\n*                                                               AJSW208\nCALLCVER DS    0H                                               AJSW208\n         DC    AL1(CCVER#-1)      COMMAND LENGTH                AJSW208\n         DC    C'*X CVER T CVERGEN '                            AJSW208\nCCVER#   EQU   *-CALLCVER                                       AJSW208\n*                                                               AJSW208\nIATWC013 DS    0C                                               AJSW208\n         DC    AL1(WC013#-1)       MESSAGE LENGTH               AJSW208\n         DC    C'IATWC013E (UX04) USERID='                      AJSW208\nWC013I1  EQU   *-IATWC013,8,C'C'                                AJSW208\n         DC    CL(L'WC013I1)' '    USERID INSERT                AJSW208\n         DC    C' JOB='                                         AJSW208\nWC013I2  EQU   *-IATWC013,8,C'C'                                AJSW208\n         DC    CL(L'WC013I2)' '    JOB NAME INSERT              AJSW208\n         DC    C' ('                                            AJSW208\nWC013I3  EQU   *-IATWC013,4,C'C'                                AJSW208\n         DC    CL(L'WC013I3)' '                                 AJSW208\n         DC    C')'                                             AJSW208\nWC013#   EQU   *-IATWC013                                       AJSW208\n*                                                               AJSW208\nWC013A   DS    0C                                               AJSW208\n         DC    AL1(WC013A#-1)      MESSAGE LENGTH               AJSW208\n         DC    C'IATWC013E (UX04) UNAUTHORIZED USE OF RESTRICT' AJSW208\n         DC    C'ED JOB CLASS '                                 AJSW208\nWC013AI1 EQU   *-WC013A,8,C'C'                                  AJSW208\n         DC    CL(L'WC013AI1)' '   JOB CLASS INSERT             AJSW208\n         DC    C' '                                             AJSW208\nWC013A#  EQU   *-WC013A                                         AJSW208\n*                                                               AJSW208\nWC013B   DS    0C                                               AJSW208\n         DC    AL1(WC013B#-1)      MESSAGE LENGTH               AJSW208\n         DC    C'IATWC013E (UX04) JES3 JOB CLASS CHANGED TO '   AJSW208\nWC013BI1 EQU   *-WC013B,8,C'C'                                  AJSW208\n         DC    CL(L'WC013BI1)' '   JOB CLASS INSERT             AJSW208\n         DC    C' '                                             AJSW208\nWC013B#  EQU   *-WC013B                                         AJSW208\n*                                                               AJSW208\n         LTORG ,                                                AJSW208\n*                                                               AJSW208\n*                                                               AJSW208\n*  E N D   O F   D S D   U S E R M O D                          AJSW208\n*                                                               AJSW208\n****************************************************************AJSW208\nUMODNUM  DC    CL7'AJSW008'       *USER NUMBER                  AJSW008\n++ SRC(ACCT) DISTLIB(ASRCLIB) .\nACCT     TITLE 'ACCT VALIDATION DSP'\n***********************************************************************\n*                                                                     *\n* MODULE NAME:                                                        *\n*              ACCT                                                   *\n*                                                                     *\n* NON-COPYRIGHT:                                                      *\n*              GENERAL DYNAMICS (DSD) - MODIFICATION CODE 'AJSW008'   *\n*                                                                     *\n* LEVEL:                                                              *\n*              JES3 RELEASE 1.3.4                                     *\n*                                                                     *\n* PATCH LABEL:                                                        *\n*              PTCHP                                                  *\n*                                                                     *\n* FUNCTION:                                                           *\n*              THIS ROUTINE SETS USER FLAG TVTUFLG1 IN FLD TVTRSVU6   *\n*              FOR USE BY IATUX04 'JOB CARD VALIDATION EXIT'.         *\n*                                                                     *\n* OPERATION:                                                          *\n*              ACCT DSP IS INVOKED BY AN OPERATOR CALL COMMAND.       *\n*              VALID CALLING SEQUENCES ARE:                           *\n*                                                                     *\n*                    *X,ACCT,STOP   (STOP)                            *\n*                    *X,ACCT,P      (STOP)                            *\n*                    *X,ACCT,START  (START)                           *\n*                    *X,ACCT,S      (START)                           *\n*                    *X,ACCT,STATUS (STATUS)                          *\n*                    *X,ACCT,I      (STATUS)                          *\n*                                                                     *\n* DEPENDENCIES:                                                       *\n*              NONE                                                   *\n*                                                                     *\n* RESTRICTIONS:                                                       *\n*              NONE                                                   *\n*                                                                     *\n* PROCESSOR:                                                          *\n*              VS ASSEMBLER                                           *\n*                                                                     *\n* ATTRIBUTES:                                                         *\n*              REENTERABLE                                            *\n*                                                                     *\n* ENTRY POINTS:                                                       *\n*              ACCT                                                   *\n*                                                                     *\n* ENTRY PURPOSE:                                                      *\n*              SEE FUNCTION.                                          *\n*                                                                     *\n* ENTRY LINKAGE:                                                      *\n*              IATGRJR (JSSDRIVER) LOADS AND CALLS ACCT               *\n*                                                                     *\n* REGISTER CONVENTIONS:                                               *\n*              R11->FCT                                               *\n*              R12->TVT                                               *\n*              R13->ACCTSAVE 'REGISTER SAVE AREA'                     *\n*              R14->JSSRTN                                            *\n*              R15->ACCT                                              *\n*                                                                     *\n* INPUT:                                                              *\n*              ACCT COMMAND WITH PARAMETERS (SEE OPERATION)           *\n*                                                                     *\n* EXIT-NORMAL:                                                        *\n*              ARETURN RC=0                                           *\n*                                                                     *\n* EXIT-ERROR:                                                         *\n*              NONE                                                   *\n*                                                                     *\n* EXIT-USER:                                                          *\n*              NONE                                                   *\n*                                                                     *\n* OUTPUT:                                                             *\n*              FLAGS SET IN TVTUFLG1 (TVTRSVU6)    (SEE FUNCTION)     *\n*                                                                     *\n* EXTERNAL ROUTINES:                                                  *\n*              ACCTSAVE - DATA CSECT                                  *\n*                                                                     *\n* CONTROL BLOCKS:                                                     *\n*              IATYTVT             R/O                                *\n*              IATYFCT             R/O                                *\n*              IATYCNS             R/O                                *\n*                                                                     *\n* EXECUTABLE MACROS:                                                  *\n*              JESREAD                                                *\n*              ARELEASE                                               *\n*              MESSAGE                                                *\n*              IATXCNS                                                *\n*              IATXSCN1                                               *\n*                                                                     *\n* ENQUEUE RESOURCES:                                                  *\n*              NONE                                                   *\n*                                                                     *\n* MP LOCKS USED:                                                      *\n*              NONE                                                   *\n*                                                                     *\n* MESSAGES:                                                           *\n*              IAT0X06                                                *\n*                                                                     *\n* ABEND CODES:                                                        *\n*              NONE                                                   *\n*                                                                     *\n***********************************************************************\nACCT     START 0\n         IATYEQU  ,                                             AJSW008\n         IATYREG  ,                                             AJSW008\n         IATYTVT  TYPE=DSECT                                    AJSW008\n         IATYFCT  ,                                             AJSW008\n         IATYCNS  TYPE=INPUT,CODES=NO                           AJSW008\nACCT     CSECT                                                  AJSW008\n         STM   R0,R15,8(R13)      *SAVE REGISTERS               AJSW008\n         LR    R10,R15            *ESTABLISH BASE REGISTER      AJSW008\n         USING ACCT,R10                                         AJSW008\n         MODID BR=YES                                           AJSW008\n         IATXCNS TYPE=GET         *EXTRACT IATYCNS FROM SPOOL   AJSW008\n         USING CONSMESS,R9                                      AJSW008\n         LR    R9,R1              *SAVE ADDR OF IATYCNS         AJSW008\n         LH    R8,CONSNUM         *SAVE CALLING CONSOLE ID      AJSW008\n         IATXSCN1 PFX=(R9),EOD=ACCTERR,ERROR=ACCTERR            AJSW008\n         LTR   R1,R1              *IS THIS A KEYWORD PARM?      AJSW008\n         BC    NZERO,ACCTERR      *YES, ERROR                   AJSW008\n         LR    R1,R0              *POINT TO PARM                AJSW008\n         LR    R0,R8              *COPY CALLING CONSOLE ID      AJSW008\n         CLC   0(5,R1),=CL5'START' *WAS START SPECIFIED?        AJSW008\n         BC    EQ,STARTIT          *YES GO PROCESS              AJSW008\n         CLC   0(2,R1),=C'S '     *WAS START SPECIFIED?         AJSW008\n         BC    EQ,STARTIT         *YES GO PROCESS               AJSW008\n         CLC   0(4,R1),=CL4'STOP' *WAS STOP SPECIFIED?          AJSW008\n         BC    EQ,STOPIT          *YES GO PROCESS               AJSW008\n         CLC   0(2,R1),=C'P '     *WAS STOP SPECIFIED?          AJSW008\n         BC    EQ,STOPIT          *YES GO PROCESS               AJSW008\n         CLC   0(6,R1),=CL6'STATUS' *WAS STATUS SPECIFIED?      AJSW008\n         BC    EQ,STATUS          *YES GO PROCESS               AJSW008\n         CLC   0(2,R1),=C'I '     *WAS STATUS SPECIFIED?        AJSW008\n         BC    EQ,STATUS          *YES GO PROCESS               AJSW008\nACCTERR  DS    0H                                               AJSW008\n         LR    R0,R8              *COPY CALLING CONSOLE ID      AJSW008\n         MESSAGE TEXT=ERROR,CONS=(R0),MLG=YES,PRTY=7            AJSW008\n         B     RELEASE                                          AJSW008\nSTOPIT   DS    0H                 *PROCESS STOP COMMAND         AJSW008\n         MVI   TVTUFLG1,TVTUCLOS  *SET FLAG FOR CLOSE FILE      AJSW008\n         MESSAGE TEXT=STOPOK,CONS=(R0),MLG=YES,PRTY=7           AJSW008\n         B     RELEASE                                          AJSW008\nSTARTIT  DS    0H                 *PROCESS START COMMAND        AJSW008\n         MVI   TVTUFLG1,TVTUSTRT  *SET FLAG FOR START VALIDATE  AJSW008\n         MESSAGE TEXT=STARTOK,CONS=(R0),MLG=YES,PRTY=7          AJSW008\n         B     RELEASE                                          AJSW008\nSTATUS   DS    0H                 *PROCESS STATUS COMMAND       AJSW008\n         TM    TVTUFLG1,TVTUOPEN  *SET FLAG FOR FILE OPEN       AJSW008\n         BC    ALLON,OPENST                                     AJSW008\n         MESSAGE TEXT=STCLOS,CONS=(R0),MLG=YES,PRTY=7           AJSW008\n         B     RELEASE                                          AJSW008\nOPENST   DS    0H                                               AJSW008\n         MESSAGE TEXT=STOPEN,CONS=(R0),MLG=YES,PRTY=7           AJSW008\nRELEASE  DS    0H                                               AJSW008\n         IATXCNS TYPE=RELEASE,BUFFER=(R9) *RELEASE IATYCNS      AJSW008\n         LM    R0,R15,8(R13)      *RESTORE CALLERS REGISTERS    AJSW008\n         SR    R15,R15            *SET RETURN CODE              AJSW008\n         BR    R14                *RETURN TO CALLER             AJSW008\n         EJECT                                                  AJSW008\n*-------------------------------------------------------------* AJSW008\n*                  M E S S A G E S                            * AJSW008\n*-------------------------------------------------------------* AJSW008\n         SPACE 1                                                AJSW008\nERROR    DS    0F                                               AJSW008\n         DC    AL1(69)                                          AJSW008\n         DC    CL35'IAT0006 ***** INVALID PARM FIELD - '        AJSW008\n         DC    CL34'RETRY COMMAND *****               '         AJSW008\n         SPACE 2                                                AJSW008\nSTOPOK   DS    0F                                               AJSW008\n         DC    AL1(69)                                          AJSW008\n         DC    CL35'IAT0106 ***** ACCOUNT VALIDATION SU'        AJSW008\n         DC    CL34'CCESSFULLY STOPPED *****          '         AJSW008\n         SPACE 2                                                AJSW008\nSTARTOK  DS    0F                                               AJSW008\n         DC    AL1(69)                                          AJSW008\n         DC    CL35'IAT0206 ***** ACCOUNT VALIDATION SU'        AJSW008\n         DC    CL34'CCESSFULLY STARTED *****          '         AJSW008\n         SPACE 2                                                AJSW008\nSTCLOS   DS    0F                                               AJSW008\n         DC    AL1(69)                                          AJSW008\n         DC    CL35'IAT0306 ***** ACCOUNT VALIDATION IS'        AJSW008\n         DC    CL34' INACTIVE *****                   '         AJSW008\n         SPACE 2                                                AJSW008\nSTOPEN   DS    0F                                               AJSW008\n         DC    AL1(69)                                          AJSW008\n         DC    CL35'IAT0406 ***** ACCOUNT VALIDATION IS'        AJSW008\n         DC    CL34' ACTIVE *****                     '         AJSW008\n         SPACE 2                                                AJSW008\n         IATXPTCH LT                                            AJSW008\nUMODNUM  DC    CL7'AJSW008'        USER NUMBER                  AJSW008\nAPARNUM  DC    CL5' '              APAR NUMBER                  AJSW008\nPTFNUM   DC    CL5'SP215'          PTF NUMBER                   AJSW008\n         END   ACCT                                             AJSW008\n++ SRC(ACCTSAVE) DISTLIB(ASRCLIB) .\n TITLE '''ACCTSAVE'' - REGISTER SAVE AREA FOR ''ACCT'' DSP.'    AJSW008\nACCTSAVE CSECT                                                  AJSW008\n* USER MODS:                                                    AJSW008\n*                                                               AJSW008\n*      - REGISTER SAVE AREA FOR ACCT DSP.                       AJSW008\n*        *** THIS MODULE MUST BE LINKEDIT'D NOT RENT/REUS ***   AJSW008\n*                                                               AJSW008\n         USING *,15                                             AJSW008\n         DC    CL8'ACCTSAVE'      *REGS ARE SAVED/RESTORED BY.. AJSW008\n         DC    16F'0'               ..STM R0,R15,8(R13) AND     AJSW008\n*                                     ..LM  R0,R15,8(R13)       AJSW008\nUMODNUM  DC    CL7'AJSW008'        USER NUMBER                  AJSW008\nAPARNUM  DC    CL5' '              APAR NUMBER                  AJSW008\nPTFNUM   DC    CL5'SP215'          PTF  NUMBER                  AJSW008\n         END   ACCTSAVE                                         AJSW008\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW009": {"ttr": 8454, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW009) /* PREVENT OPERATOR FROM EVER RELEASING PRTY=0:\n\n       THIS MODIFICATION PREVENTS THE OPERATOR FROM EVER RELEASING\n       THE ENTIRE PRTY 0 QUEUE. ALL PRTY 0 JOBS ARE SCHEDULED BY\n       DEADLINE SCHEDULING AND SHOULD NOT BE RELEASED EXCEPT BY\n       THE DEADLINE ALGORITHM OR BY THE OPERATOR ON AN INDVIDUAL\n       BASIS.\n                                                                 */ .\n++ VER(Z038) FMID(HJS2215).\n++ SRCUPD(IATMOHR) DISTLIB(AJES3SRC) .\n./ CHANGE NAME=IATMOHR\n* USER MODS =                                                   AJSW009\n*                                                               AJSW009\n*      - DO NOT ALLOW PRIORITY ZERO TO BE RELEASED              AJSW009\n*                                                               AJSW009\n         LA    R4,1(0,R4)         *SET TO PRIORITY 1            AJSW009\n         LA    R3,4(0,R3)         *SET TO PRIORITY 1            AJSW009\n         LA    R1,4(0,R1)         *SET TO PRIORITY 1            AJSW009\n*        BC    NE,PHR002           NO. BRANCH                   AJSW009\n         BC    NE,PHR001          *BRANCH IF NOT FOR HOLD       AJSW009\n         B     PHR002             *BRANCH AROUND RELEASE LOGIC  AJSW009\nPHR001   DS    0H                                               AJSW009\n         CL    R1,=F'0'           *PRIORITY ZERO?               AJSW009\n         BE    SPLIT              *YES, DON'T PROCESS           AJSW009\nUMODNUM  DC    CL7'AJSW009'       *USER NUMBER\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW011": {"ttr": 8456, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW011) /* LOCAL PRINT GROUP ROUTING MOD:\n\n       THIS MODIFICATION WILL CAUSE ANY PRINT OUTPUT WITH DESTINATION\n       OF 'LOCAL' OR 'ANYLOCAL' TO BE ROUTED ONLY TO DEVICES IN\n       THE SPECIFIED DEVICE GROUPS. THIS PREVENTS OTHER DEVICES FROM\n       SELECTING WORK NOT SPECIFICALLY DESTINED TO THEM. THIS MOD ALSO\n       EFFECTIVELY MAKES 'ANYLOCAL' AND 'LOCAL THE SAME FOR ALL OUTPUT.\n       THE CODE MUST BE DUPLICATED IN IATOSSC.\n                                                                 */ .\n++ VER(Z038) FMID(HJS2215).\n++ SRCUPD(IATOSWS) .\n./ CHANGE NAME=IATOSWS\n*    USER MODS =                                                AJSW011\n*                                                               AJSW011\n*         - DIRECT ANYLOCAL OR LOCAL OUTPUT TO                  AJSW011\n*           ALLOWABLE DEVICE GROUPS ONLY.                       AJSW011\n*                                                               AJSW011\n*        BC    EQ,8(,R14)          RETURN SETUP IF YES          AJSW011\n         BE    WC99LOC1           *OSE DEST IS 'ANYLOCAL'       AJSW011\n         CLC   OSEDEST,=CL8'LOCAL' *IS OSE DEST 'LOCAL'?        AJSW011\n         BC    NE,WC99LOC2        *BRANCH IF NOT                AJSW011\nWC99LOC1 DS    0H                                               AJSW011\n         CLC   SUPTGEN,=CL3'PRT'  *IS THIS DEVICE A PRINTER?    AJSW011\n         BNE   8(,R14)            *NO - THEN RETURN THE SETUP   AJSW011\n         CLC   SUPGROUP+3(4),=C'3211' *IS THIS THE 3211 GROUP?  AJSW011\n         BE    8(,R14)            *YES - RETURN THIS SETUP      AJSW011\n         B     WC99LOC3           *NO  - TREET AS PRT3800       AJSW011\nWC99LOC2 DS    0H                                               AJSW011\n         CLC   OSEDEST,=CL8'PRT3800' *OSE DEST PRT3800?         AJSW011\n         BNE   WC99LOC4           *OSE DEST IS NOT PRT3800      AJSW011\nWC99LOC3 DS    0H                                               AJSW011\n         CLC   SUPGROUP+3(4),=C'MOD1' *IS THIS THE MOD1 GROUP?  AJSW011\n         BE    8(,R14)            *YES - RETURN THIS SETUP      AJSW011\n         CLC   SUPGROUP+3(4),=C'MOD3' *IS THIS THE MOD3 GROUP?  AJSW011\n         BE    8(,R14)            *YES - RETURN THIS SETUP      AJSW011\n         CLC   SUPGROUP+3(4),=C'9825' *IS THIS THE 9825 GROUP?  AJSW011\n         BE    8(,R14)            *YES - RETURN THIS SETUP      AJSW011\n         CLC   SUPGROUP+3(4),=C'9845' *IS THIS THE 9825 GROUP?  AJSW011\n         BE    8(,R14)            *YES - RETURN THIS SETUP      AJSW011\n         CLC   SUPGROUP+3(4),=C'LEAP' *IS THIS THE LEAP GROUP?  AJSW011\n         BE    8(,R14)            *YES - RETURN THIS SETUP      AJSW011\n         B     WC99LOC5           *CONTINUE PROCESSING          AJSW011\nWC99LOC4 DS    0H                                               AJSW011\n         CLC   OSEDEST,=CL8'PRTMOD3' *OSE DEST PRTMOD3?         AJSW011\n         BNE   WC99LOC5           *OSE DEST IS NOT PRT3800      AJSW011\n         CLC   SUPGROUP+3(4),=C'9845' *IF PRTMOD3 IS GROUP 9845 AJSW011\n         BE    8(,R14)            *YES - RETURN THIS SETUP      AJSW011\nWC99LOC5 DS    0H                 *END OF MOD                   AJSW011\nUMODNUM  DC    CL7'AJSW011'       *USER NUMBER\n++ SRCUPD(IATOSSC) .\n./ CHANGE NAME=IATOSSC\n*    USER MODS =                                                AJSW011\n*                                                               AJSW011\n*         - DIRECT ANYLOCAL OR LOCAL OUTPUT TO                  AJSW011\n*           ALLOWABLE DEVICE GROUPS ONLY.                       AJSW011\n*                                                               AJSW011\n*        BC    EQ,8(,R14)          RETURN SETUP IF YES          AJSW011\n         BE    WC99LOC1           *OSE DEST IS 'ANYLOCAL'       AJSW011\n         CLC   OSEDEST,=CL8'LOCAL' *IS OSE DEST 'LOCAL'?        AJSW011\n         BC    NE,WC99LOC2        *BRANCH IF NOT                AJSW011\nWC99LOC1 DS    0H                                               AJSW011\n         CLC   SUPTGEN,=CL3'PRT'  *IS THIS DEVICE A PRINTER?    AJSW011\n         BNE   8(,R14)            *NO - THEN RETURN THE SETUP   AJSW011\n         CLC   SUPGROUP+3(4),=C'3211' *IS THIS THE 3211 GROUP?  AJSW011\n         BE    8(,R14)            *YES - RETURN THIS SETUP      AJSW011\n         B     WC99LOC3           *NO  - TREET AS PRT3800       AJSW011\nWC99LOC2 DS    0H                                               AJSW011\n         CLC   OSEDEST,=CL8'PRT3800' *OSE DEST PRT3800?         AJSW011\n         BNE   WC99LOC4           *OSE DEST IS NOT PRT3800      AJSW011\nWC99LOC3 DS    0H                                               AJSW011\n         CLC   SUPGROUP+3(4),=C'MOD1' *IS THIS THE MOD1 GROUP?  AJSW011\n         BE    8(,R14)            *YES - RETURN THIS SETUP      AJSW011\n         CLC   SUPGROUP+3(4),=C'MOD3' *IS THIS THE MOD3 GROUP?  AJSW011\n         BE    8(,R14)            *YES - RETURN THIS SETUP      AJSW011\n         CLC   SUPGROUP+3(4),=C'9825' *IS THIS THE 9825 GROUP?  AJSW011\n         BE    8(,R14)            *YES - RETURN THIS SETUP      AJSW011\n         CLC   SUPGROUP+3(4),=C'9845' *IS THIS THE 9825 GROUP?  AJSW011\n         BE    8(,R14)            *YES - RETURN THIS SETUP      AJSW011\n         CLC   SUPGROUP+3(4),=C'LEAP' *IS THIS THE LEAP GROUP?  AJSW011\n         BE    8(,R14)            *YES - RETURN THIS SETUP      AJSW011\n         B     WC99LOC5           *CONTINUE PROCESSING          AJSW011\nWC99LOC4 DS    0H                                               AJSW011\n         CLC   OSEDEST,=CL8'PRTMOD3' *OSE DEST PRTMOD3?         AJSW011\n         BNE   WC99LOC5           *OSE DEST IS NOT PRT3800      AJSW011\n         CLC   SUPGROUP+3(4),=C'9845' *IF PRTMOD3 IS GROUP 9845 AJSW011\n         BE    8(,R14)            *YES - RETURN THIS SETUP      AJSW011\nWC99LOC5 DS    0H                 *END OF MOD                   AJSW011\nUMODNUM  DC    CL7'AJSW011'       *USER NUMBER\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW012": {"ttr": 8459, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW012) /*\n\n       THIS MODIFICATION WILL:\n         - CANCEL ANY OUTPUT THAT HAS INVALID DEST, FORM OR FCB\n           (SEE CODE FOR DETAILS).\n         - RECOMPUTE THE OSE PRIORITY USING THE DATASET LINE COUNT.\n         - CHANGE CLASS OF CERTAIN STARTED TASKS JESDS TO 'P'\n           AND THEIR DESTINATION TO 'PANSPOOL\n         - ISSUE A VPS PRINTER START COMMAND FOR THE SPECIFIED\n           PRINTER WHEN VPS OUTPUT IS DETECTED.\n         - ACCEPT A TSO USERID AS A VALID \"DEST\" WHEN A FILE IS\n           RECEIVED VIA NJE AND THE TSO SEND COMMAND.\n           SEE ALSO AJSW051.\n\n\n CHANGE HISTORY:\n\n 05/22/88 J. DAILEY             ADD FCS TO STC PANSPOOL TABLE\n 06/05/88 J. DAILEY             ADD IDMS TO PANSPOOL TABLE\n 06/26/88 J. DAILEY             ADD DBTPMSTR DBTPDBM1 TO PANSPOOL\n 06/26/88 J. DAILEY             ADD DBIPMSTR DBIPDBM1 TO PANSPOOL\n 07/03/88 J. DAILEY             ALLOW TSO USERID AS A VALID DEST\n                                FOR FILES SENT VIA NJE\n 07/17/88 J. DAILEY             CORRECTIONS PANSPOOL TABLE\n                                ACCEPT PRXX (XX=NUMERIC) AS A VALID\n                                FORM SPECIFICATION\n 08/07/88 J. DAILEY             ACCEPT CLASS I AS VPS ONLY CLASS\n 11/13/88 J. DAILEY             1) ADD DBS5MSTR,DBS5DBM1,DBCTMSTR,\n                                AND DBCTDBM1 TO PANSPOOL ROUTING\n                                TABLE.\n 11/20/88 J. DAILEY             ADD TASK BEGINNING WITH \"IDMT\" TO THE\n                                PANSPOOL ROUTING TABLE.\n\n                                                                 */ .\n++ VER(Z038) FMID(HJS2215).\n++ SRCUPD(IATUX19) DISTLIB(AJES3SRC) .\n./ CHANGE NAME=IATUX19\n*        USER MODS =                                            AJSW012\n*                                                               AJSW012\n*             - CANCEL ANY OUTPUT HAVING INVALID DEST, FORM,    AJSW012\n*               OR FCB                                          AJSW012\n*                                                               AJSW012\n*             - RECOMPUTE THE OSE PRIORITY USING DS LINECOUNT   AJSW012\n*                                                               AJSW012\n*             - CHANGE CLASS OF CERTAIN STARTED TASKS TO 'P'    AJSW012\n*                                                               AJSW012\n*             - FOR CLASS V SYSOUT ENSURE THE DESTINATION IS    AJSW012\n*               A VALID VPS PRINTER ID.                         AJSW012\n*                                                               AJSW012\n*             - FORCE ANY DEST OF 'LOCAL' TO 'ANYLOCAL'         AJSW012\n*                                                               AJSW012\n*@ CONTROL BLOCKS:                                              AJSW012\n*@             LIST MAPPING MACROS FOLLOWED BY ATTRIBUTE.       AJSW012\n*@             R/O - READ/ONLY  R/W - READ/WRITE                AJSW012\n*@             IATYOSE - R/O                                    AJSW012\n*@             IATYRSQ - R/O                                    AJSW012\n*@             IATYMPC - R/O                                    AJSW012\n*@             IATYJQE - R/O                                    AJSW012\n*@             IATYDST - R/O                                    AJSW012\n*@             IATYJDA - R/O                                    AJSW012\n*@ CHANGE ACTIVITY                                              AJSW012\n*@             INITIAL IMPLEMENTATION 4/1/87                    AJSW012\n*@             IGNORE CHECKING FOR A DEST OF WCMRO?? 1/24/88JBD-AJSW012\n*@             REFIT USERMOD TO OBTAIN SEQ NO SPACE  3/24/88JBD-AJSW012\n         IATYDST                                                AJSW012\n         IATYMPC                                                AJSW012\n         IATYSUP  TYPE=DSECT                                    AJSW012\n         EJECT                                                  AJSW012\n         IATYRLT  TYPE=DSECT                                    AJSW012\n         EJECT                                                  AJSW012\n         IATYRSQ ,                                              AJSW012\n         EJECT                                                  AJSW012\n         IATYJQE ,                                              AJSW012\n         EJECT                                                  AJSW012\n         IATYMCL ,                                              AJSW012\n         EJECT                                                  AJSW012\n         IATYJDS ,                                              AJSW012\n         EJECT                                                  AJSW012\n         IATYOSS ,                                              AJSW012\n         EJECT                                                  AJSW012\nWDPRTMAP DSECT                                                  AJSW012\nWDPRTNAM DC    CL8' '              TRUE PRINTER NAME            AJSW012\nWDPRTDST DC    CL8' '              PRINTER DESTINATION NAME     AJSW012\nWDPRTLNG EQU   *-WDPRTMAP          LENGTH OF AN NETRY           AJSW012\nWDPRTNXT DC    0XL8'00'            NEXT TABLE ENTRY             AJSW012\nWDPLUTBL DSECT                                                  AJSW012\nWDPLUNAM DC    CL8' '              TRUE PRINTER NAME            AJSW012\nWDPLUDST DC    CL8' '              PRINTER DESTINATION NAME     AJSW012\nWDPLUNXT DC    0CL8' '             NEXT ENTRY IN TABLE          AJSW012\nWDPRTYPX DSECT                                                  AJSW012\nWDPRTYPL DC    XL1'00'             LENGTH-1 OF FOLLOWING ENTRY  AJSW012\nWDPRTYPF DC    CL1'RSCS'           FIXED PRTY JOBNAME PREFIX    AJSW012\nWDPRTYNX DC    0CL1'00'            NEXT TABLE ENTRY             AJSW012\nWDPRTYID DSECT                                                  AJSW012\nWDPRTYNM DC    CL7'IDMSPROD'       FIXED PRTY ELIGIBLE UID      AJSW012\nWDPRTYFX DC    AL1(250)            PRTY FOR THIS USER           AJSW012\nWDNXTUID DC    0CL8' '             NEXT ENTRY IN UID TABLE      AJSW012\n         B     WDCUX19             BRANCH TO USERMOD CODE       AJSW012\n*                                                               AJSW012\nWDCUX19  DS    0H                  START OF USER MOD CODE       AJSW012\n         LR    R10,R15             SET UP BASE REG              AJSW012\n         USING IATUX19,R10                                      AJSW012\n         LR    R2,R1               SAVE OSE ADDRESS             AJSW012\n         USING OSEENTRY,R2                                      AJSW012\n         LR    R3,R9               GET RQ ADDR (IATOSDR)        AJSW012\n         USING RQSTART,R3                                       AJSW012\n*                                                               AJSW012\n         ST    R2,OSE@             SAVE -> THE OSE              AJSW012\n         ST    R3,RESQ@            SAVE -> RESQ                 AJSW012\n         ST    R8,JDS@             SAVE -> JDS                  AJSW012\n*                                                               AJSW012\n*-------------------------------------------------------------* AJSW012\n*        DETERMINE IF JOB NAME AND NUMBER HAS CHANGED         * AJSW012\n*-------------------------------------------------------------* AJSW012\n*                                                               AJSW012\n         CLC   SVJOBNAM,RQJOBNAM   CHANGE IN JOB NAME           AJSW012\n         BC    NE,RSCTL            YES,RESET CONTROLS           AJSW012\n         CLC   SVJNUM,RQJNUM       NO,BUT DIFFERENT JOB NUMBER  AJSW012\n         BC    EQ,SAMEJOB          NO,JUST DATA SET CHANGE      AJSW012\n*                                                               AJSW012\nRSCTL    DS    0H                                               AJSW012\n         MVC   SVJOBNAM,RQJOBNAM   SAVE JOB NAME                AJSW012\n         MVC   SVJNUM,RQJNUM       SAVE JOB NUMBER              AJSW012\n         MVI   EFLAGS,0            RE-SET ERROR FLAGS           AJSW012\n         MVI   MFLAGS,0            RE-SET MISC FLAGS            AJSW012\n*                                                               AJSW012\n*-------------------------------------------------------------* AJSW012\n*        CHANGE CLASS TO P AND DEST TO PANSPOOL FOR SOME STCS * AJSW012\n*-------------------------------------------------------------* AJSW012\n*                                                               AJSW012\nSAMEJOB  DS    0H                                               AJSW012\n         TM    RQFLG5,RQDSEL       IS THIS A DEMAND SELECT JOB? AJSW012\n         BC    NALLON,GDW0001      NO, SKIP NAME CHECK          AJSW012\n         LA    R1,WDPFX8           -> LIST OF 8-BYTE ENTRIES    AJSW012\n         LA    R15,7(,0)           LENGTH-1 OF ENTRIES          AJSW012\n         BAL   R14,WDPFXCHK        CHECK JOBNAME V.LIST         AJSW012\n         LA    R1,WDPFX7           -> LIST OF 7-BYTE PREFIXES   AJSW012\n         LA    R15,6(,0)           LENGTH-1 OF ENTRIES          AJSW012\n         BAL   R14,WDPFXCHK        CHECK JOBNAME V. LIST        AJSW012\n         LA    R1,WDPFX6           -> LIST OF 6-BYTE PREFIXES   AJSW012\n         LA    R15,5(,0)           LENGTH-1 OF ENTRIES          AJSW012\n         BAL   R14,WDPFXCHK        CHECK JOBNAME V. LIST        AJSW012\n         LA    R1,WDPFX5           -> LIST OF 5-BYTE PREFIXES   AJSW012\n         LA    R15,4(,0)           LENGTH-1 OF ENTRIES          AJSW012\n         BAL   R14,WDPFXCHK        CHECK JOBNAME V. LIST        AJSW012\n         LA    R1,WDPFX4           -> LIST OF 4-BYTE PREFIXES   AJSW012\n         LA    R15,3(,0)           LENGTH-1 OF ENTRIES          AJSW012\n         BAL   R14,WDPFXCHK        CHECK JOBNAME V. LIST        AJSW012\n         LA    R1,WDPFX3           -> LIST OF 3-BYTE PREFIXES   AJSW012\n         LA    R15,2(,0)           LENGTH-1 OF ENTRIES          AJSW012\n         LA    R14,GDW0001         SKIP CHANGE IF NOT FOUND     AJSW012\n*                                                               AJSW012\nWDPFXCHK DC    0H'0'                                            AJSW012\n         EX    R15,WDCHKPFX        JOBNAME OF INTEREST?         AJSW012\n         BC    EQ,CHKDDNM          YES, GO CHECK DDNAME         AJSW012\n         LA    R1,1(R15,R1)        NO, STEP TO NEXT ENTRY       AJSW012\n         CLI   0(R1),FF            END OF LIST?                 AJSW012\n         BC    NE,WDPFXCHK         NO, TRY NEXT ENTRY           AJSW012\n         BR    R14                 YES, RETURN                  AJSW012\n*                                                               AJSW012\nWDCHKPFX CLC   0(,R1),RQJOBNAM     PREFIX LIST ENTRY V. JOBNAME AJSW012\n*                                                               AJSW012\nCHKDDNM  DS    0H                                               AJSW012\n         L     R1,JDS@             GET -> JDS                   AJSW012\n         USING JDSENTRY,R1         TEMP JDS DS ENTRY ADDRBLTY   AJSW012\n         CLC   JDSDDNAM,=CL8'JESMSG' DATA SET OF INTEREST?      AJSW012\n         BC    EQ,CHGCLASS         YES, CHANGE CLASS OF D.S.    AJSW012\n         CLC   JDSDDNAM,=CL8'JESJCL' DATA SET OF INTEREST?      AJSW012\n         BC    EQ,CHGCLASS         YES, CHANGE CLASS OF D.S.    AJSW012\n         CLC   JDSDDNAM,=CL8'SYSMSG' DATA SET OF INTEREST?      AJSW012\n         BC    NE,GDW0001          NO, SKIP CLASS CHANGE        AJSW012\n         DROP  R1                  TEMP JDS DS ENTRY ADDRBLTY   AJSW012\n*                                                               AJSW012\nCHGCLASS DS    0H                                               AJSW012\n         MVI   OSECLASS,C'P'       SET PANSPOOL OUTPUT CLASS    AJSW012\n         MVI   OSECOPYT,X'01'      SET COPY COUNT TO 1          AJSW012\n         MVC   OSEDEST,=CL8'PANSPOOL' SET PANSPOOL AS DEST      AJSW012\n         NI    OSEDFLG2,FF-OSEDHOLD ENSURE D/S NOT HELD         AJSW012\n         B     GDW9000             DO NO MORE CHECKING          AJSW012\n*                                                               AJSW012\n*-------------------------------------------------------------* AJSW012\n*        ANY CLASS=G WILL BE PURGED REGARDLESS OF COPY NUMBER * AJSW012\n*-------------------------------------------------------------* AJSW012\nGDW0001  DS    0H                                               AJSW012\n         CLC   OSETYPE,=CL8'INTRDR' *IS IT INTRDR?              AJSW012\n         BC    EQ,GDW9000          YES - SKIP ALL CHECKS        AJSW012\n         CLI   OSECLASS,C'G'       IS IT GARBAGE CLASS?         AJSW012\n         BC    EQ,KILLOSE9         YES - GO KILL IT.            AJSW012\n         EJECT                                                  AJSW012\n*-------------------------------------------------------------* AJSW012\n*        VALIDATE OSE DESTINATION                             * AJSW012\n*-------------------------------------------------------------* AJSW012\n*                                                               AJSW012\n*-------------------------------------------------------------* AJSW012\n*        CHECK THE NJE NODE TABLE FOR A MATCH WITH THE        * AJSW012\n*        SPECIFIED DESTINATION.  SKIP ALL CHECKS FOR AN OSE   * AJSW012\n*        W/DEST=NJENODE.  THEN CHECK FOR DEST MATCH WITH      * AJSW012\n*        EITHER A SUPUNIT GROUP, OR SUPUNIT DD (J) NAME       * AJSW012\n*-------------------------------------------------------------* AJSW012\n*                                                               AJSW012\nGDW0100  DC    0H'0'                                            AJSW012\n         CLC   =C'WCMRO',OSEDEST   DEST=VM SPECIAL DEST         AJSW012\n         BC    EQ,GDW9000          YES,SKIP CHECKS              AJSW012\n         CLC   =C'SAR',OSEDEST     SAR OUTPUT                   AJSW012\n         BC    EQ,GDW9000          YES,SKIP CHECKS              AJSW012\n*        CLC   =C'EXP',OSEDEST     EXPRESS DELIVERY             AJSW012\n*        BC    EQ,ESI              YES,SKIP CHECKS              AJSW012\n         CLC   =C'LOCAL ',OSEDEST  ORIGIN OF LOCAL              AJSW012\n         BC    NE,GDW0105          NO,CONTINUE DEST CHECK       AJSW012\n         MVC   OSEDEST,=C'ANYLOCAL' YES,OVERRIDE TO 'ANYLOCAL'  AJSW012\n         B     GDW1000             DO LOCAL CHECKS NOW          AJSW012\n*                                                               AJSW012\nGDW0105  DS    0H                                               AJSW012\n         LA    R1,OSEDEST          -> DESTINATION FOR DATASET   AJSW012\n         L     R15,ANJESRCH        -> NJE NODE NAME SEARCH RTN  AJSW012\n         ACALL ENTER=(15)          SEARCH NJE TABLE FOR DEST    AJSW012\n         B     GDW0110             DEST NOT NJE NODE, CHECK     AJSW012\n         B     GDW9000             DEST=NJE NODE, SKIP CHECKS   AJSW012\n*                                                               AJSW012\nGDW0110  DC    0H'0'                                            AJSW012\n         LA    R9,SUPUNITS-(SUPCHAIN-SUPSTART) DUMMY UP POINTER AJSW012\n         USING SUPSTART,R9         SUPUNIT ENTRY ADDRESSABILITY AJSW012\n*                                                               AJSW012\nGDW0120  DC    0H'0'                                            AJSW012\n         ICM   R9,B'1111',SUPCHAIN -> NEXT SUPUNIT ENTRY        AJSW012\n         BC    ZERO,GDW0200        END OF SUPUNITS, DO RJPTABLE AJSW012\n         CLC   SUPTGEN,=C'PRT'     GENERAL TYPE = PRT?          AJSW012\n         BC    EQ,GDW0130          YES, CHECK DEST W/SUPUNIT    AJSW012\n         CLC   SUPTGEN,=C'PUN'     GENERAL TYPE = PUNCH?        AJSW012\n         BC    NE,GDW0120          NO, DON'T USE THIS ENTRY     AJSW012\n*                                                               AJSW012\nGDW0130  DC    0H'0'                                            AJSW012\n         CLC   OSEDEST,SUPGROUP    DEST:THIS UNIT'S DGROUP      AJSW012\n         BC    EQ,GDW1000          MATCH, DO LOCAL CHECKS       AJSW012\n         CLC   OSEDEST,SUPDD       DEST:THIS UNIT'S JNAME       AJSW012\n         BC    EQ,GDW1000          MATCH, DO LOCAL CHECKS       AJSW012\n         B     GDW0120             LOOP FOR NEXT SUPUNIT ENTRY  AJSW012\n*                                                               AJSW012\n*-------------------------------------------------------------* AJSW012\n*       ARE FIRST FIVE CHARS OF DEST IN RJP TERM TABLE?       * AJSW012\n*-------------------------------------------------------------* AJSW012\n*                                                               AJSW012\nGDW0200  L     R9,RJPRTERM         POINT TO RJP TERM TABLE      AJSW012\n         LA    R9,0(0,R9)          CLR HI BYTE                  AJSW012\n         LTR   R9,R9               ANY TABLE THERE?             AJSW012\n         BC    ZERO,GDW0300        YES, GO CHECK OTHERS         AJSW012\n         USING RTTSTART,R9         ESTABLISH ADDRESSABILITY     AJSW012\n*                                                               AJSW012\nGDW0250  DC    0H'0'                                            AJSW012\n         CLC   OSEDEST(5),RTTGNAME GROUP MATCH?                 AJSW012\n         BC    EQ,GDW1000          VALID RJP DEST CARRY ON      AJSW012\n*                                                               AJSW012\nGDW0255  DC    0H'0'                                            AJSW012\n         CLC   OSEDEST(5),RTTNAME  NAME MATCH?                  AJSW012\n         BC    EQ,GDW1000          VALID RJP DEST, CARRY ON     AJSW012\n         LA    R9,RTTEND           ELSE BUMP TO NEXT            AJSW012\n         CLI   0(R9),X'FF'         END OF TABLE?                AJSW012\n         BC    NE,GDW0250          NO - CONTINUE SEARCH         AJSW012\n*                                                               AJSW012\n*-------------------------------------------------------------* AJSW012\n*       ARE FIRST FIVE CHARS OF DEST IN SNA TERM TABLE?       * AJSW012\n*-------------------------------------------------------------* AJSW012\n*                                                               AJSW012\nGDW0300  DS    0H                                               AJSW012\n         L     R9,SRJPRTRM         POINT TO SNA TERM TABLE      AJSW012\n         LA    R9,0(0,R9)          CLR HI BYTE/BIT              AJSW012\n         LTR   R9,R9               ANY TABLE THERE?             AJSW012\n         BC    ZERO,GDW0400        YES, GO CHECK OTHERS         AJSW012\n*                                                               AJSW012\nGDW0350  DC    0H'0'                                            AJSW012\n         CLC   OSEDEST(5),RTTGNAME GROUP MATCH?                 AJSW012\n         BC    EQ,GDW1000          VALID SNARJP DEST, CARRY ON  AJSW012\n*                                                               AJSW012\nGDW0355  DC    0H'0'                                            AJSW012\n         CLC   OSEDEST(5),RTTNAME  NAME MATCH?                  AJSW012\n         BC    EQ,GDW1000          YES, VALID SNARJP DEST       AJSW012\n         LA    R9,RTTEND           ELSE BUMP TO NEXT            AJSW012\n         CLI   0(R9),X'FF'         END OF TABLE?                AJSW012\n         BC    NE,GDW0350          NO - CONTINUE SEARCH         AJSW012\n         DROP  R9                  DROP ADDRESSABILITY          AJSW012\n*                                                               AJSW012\n*-------------------------------------------------------------* AJSW012\n*        CHECK FOR PANSPOOL                                   * AJSW012\n*-------------------------------------------------------------* AJSW012\n*                                                               AJSW012\nGDW0400  DS    0H                                               AJSW012\n         CLC   OSEDEST,=CL8'PANSPOOL'  IS IT PANSPOOL?          AJSW012\n         BC    EQ,GDW1000              YES - GOOD DEST          AJSW012\n         CLC   OSEDEST,=CL8'PANSPTST'  IS IT PANTEST?           AJSW012\n         BC    EQ,GDW1000              YES - GOOD DEST          AJSW012\n*                                                               AJSW012\n*-------------------------------------------------------------* AJSW012\n*        CHECK FOR VPS (SNA PRINTER) OUTPUT                   * AJSW012\n*-------------------------------------------------------------* AJSW012\n*                                                               AJSW012\nGDW0500  DS    0H                                               AJSW012\n         CLI   OSEDEST+7,C' '      LAST CHAR A BLANK?           AJSW012\n         BC    NE,GDW0900          NO - CANNOT BE VPS           AJSW012\n         CLI   OSEDEST+6,C' '      NEXT TO LAST ALSO BLANK?     AJSW012\n         BC    EQ,GDW0900          YES - CANNOT BE VPS          AJSW012\n         CLI   OSECLASS,C'V'       CLASS MUST BE = V            AJSW012\n         BC    EQ,WC053STP         YES - GO CHECK PRINTER DEST  AJSW012\n         CLI   OSECLASS,C'I'       CLASS MUST BE = I            AJSW012\n         BC    EQ,WC053STP         YES - GO CHECK PRINTER DEST  AJSW012\n*                                                               AJSW012\n*                                                               AJSW012\nGDW0900  DS    0H                                               AJSW012\n         CLI   OSEDEST,C'$'        POSSIBLE TSO USERID          AJSW012\n         BC    NE,GDW0900A         NO,CONTINUE                  AJSW012\n         LH    R1,RQJOBNO          GET THE JOB NUMBER IN BINARY AJSW012\n         IATXJQE JOBNUM=(R1),      GET JQE FOR THE JOB          AJSW012$\n               ERROR=GDW0900A                                   AJSW012\n*                                                               AJSW012\n         LA    R1,JQEORG-JQESTART(,R1) -> JOB ORIGIN            AJSW012\n         L     R15,ANJESRCH        -> NJE NODE NAME SRCH RTN    AJSW012\n         ACALL ENTER=(R15)         SEE IF ORIGIN IS A NJE NODE  AJSW012\n         B     GDW0900A            ORIGIN NOT AN NJE NODE       AJSW012\n*                                                               AJSW012\n         NI    MFLAGS,255-MFACFUID INIT LOGONID FOUND FLAG      AJSW012\n*                                                               AJSW012\n         LA    R0,ACFWRK#                                       AJSW012\n         AGETMAIN SIZE=(R0),       ALLOCATE ACF WORK AREAS      AJSW012$\n               LOC=BELOW                                        AJSW012\n         LR    R9,R1               -> TO GOTTEN STORAGE         AJSW012\n*                                                               AJSW012\n         PUSH  USING               SAVE USING STATUS            AJSW012\n         USING ACFWRK,R9           MAKE IT ADDRESSABLE          AJSW012\n*                                                               AJSW012\n         ACFINCVT 3,NONE=GDW0910   GET THE ACF CVT              AJSW012\n         USING ACCVT,R3            MAKE IT ADDRESSABLE          AJSW012\n*                                                               AJSW012\n         XC    ACALT(ACALEN),ACALT INITIALIZE PARAMETER BLOCK   AJSW012\n         MVI   ACAFCN,X'02'        SET UP ACF SVC CALL          AJSW012\n         MVI   ACASFCN,ACASURT     RETURN UNFORMATTED LOGONID   AJSW012\n         LA    R1,ERRINFO          GET MESSAGE AREA ADDRESS     AJSW012\n         ST    R1,ACAMSG              AND STOW IN PARAM BLOCK   AJSW012\n         MVC   ACALID,OSEDEST      POSSIBLE LOGONID TO RETURN   AJSW012\n         LA    R1,LOGONREC         GET RECORD AREA ADDRESS      AJSW012\n         ST    R1,ACARETB             AND STOW IN PARAM BLOCK   AJSW012\n         MVC   ACARETL,=A(L'LOGONREC) SET RECORD LENGTH         AJSW012\n*                                                               AJSW012\n         ACFSVC ACALT,TYPE=A,      FIND THE LOGONID RECORD      AJSW012$\n               NONE=GDW0910,                                    AJSW012$\n               CVT=HAVE                                         AJSW012\n         LTR   R15,R15             LOGON RECORD FOUND           AJSW012\n         BC    NZERO,GDW0910       NO, JUST FREE ACF WORK AREA  AJSW012\n         OI    MFLAGS,MFACFUID     YES,REMEMBER IT              AJSW012\n*                                                               AJSW012\nGDW0910  DS    0H                                               AJSW012\n         L     R3,RESQ@            RESTORE R3                   AJSW012\n         LA    R0,ACFWRK#          SIZE OF AREA TO BE FREED     AJSW012\n         APUTMAIN AREA=(R9),       FREE THE ACFWORK AREA        AJSW012$\n               SIZE=(R0)                                        AJSW012\n         L     R2,OSE@             RESTORE OSE ->               AJSW012\n*                                                               AJSW012\n         TM    MFLAGS,MFACFUID     LOGONID RECORD FOUND         AJSW012\n         BC    NZERO,GDW1000       YES,CONTINUE                 AJSW012\n*                                                               AJSW012\n         POP   USING                                            AJSW012\n*                                                               AJSW012\n*-------------------------------------------------------------* AJSW012\n*        END OF THE LINE.  NO GOOD DEST SO KILL OSE.          * AJSW012\n*-------------------------------------------------------------* AJSW012\n*                                                               AJSW012\nGDW0900A DS    0H                                               AJSW012\n         B     DO016              *NOTHING MATCHED. KILL OSE.   AJSW012\n         EJECT                                                  AJSW012\n*-------------------------------------------------------------* AJSW012\n*        VALIDATE OSE FORM SPECIFICATION                      * AJSW012\n*-------------------------------------------------------------* AJSW012\n*                                                               AJSW012\n*-------------------------------------------------------------* AJSW012\n*        FORM MUST BE 4 CHARACTERS LONG AND NUMERIC           * AJSW012\n*        OR BE PRECEEDED BY 'P' OR 'PVT', OTHERWISE JUNK.     * AJSW012\n*-------------------------------------------------------------* AJSW012\n*                                                               AJSW012\nGDW1000  DS    0H                                               AJSW012\n         CLC   OSEFORMS+4(4),=CL4' '  IS IT 4 OR LESS LONG?     AJSW012\n         BC    NE,GDW1100          NO. GO CHECK PVT DATA.       AJSW012\n         CLI   OSEFORMS+3,C' '     IS IT AT LEAST 4 LONG?       AJSW012\n         BC    EQ,DO017            NO. KILL OSE.                AJSW012\n         CLC   =C'PR',OSEFORMS     SPECIAL PAYROLL FORMS        AJSW012\n         BC    EQ,GDW1010          YES,JECK REST OF FORM ID     AJSW012\n         LA    R9,OSEFORMS         POINT TO BEGINNING           AJSW012\n         B     GDW1300             GO CHECK NUMERICS            AJSW012\n*                                                               AJSW012\nGDW1010  DS    0H                                               AJSW012\n         ICM   R9,B'1100',OSEFORMS+2 FILL REGISTER WITH         AJSW012\n         ICM   R9,B'0011',OSEFORMS+2   FORM NUMBER              AJSW012\n         B     GDW1310                                          AJSW012\n*                                                               AJSW012\nGDW1100  DS    0H                                               AJSW012\n         CLC   OSEFORMS(3),=C'PVT'  BEGIN WITH 'PVT'?           AJSW012\n         BC    NE,GDW1200          NO. CHECK 'P'.               AJSW012\n         CLI   OSEFORMS+7,C' '     LAST CHAR BLANK?             AJSW012\n         BC    NE,DO017            NO. BAD FORM.                AJSW012\n         LA    R9,OSEFORMS+3       POINT TO BEGINNING           AJSW012\n         B     GDW1300             GO CHECK NUMERICS            AJSW012\n*                                                               AJSW012\nGDW1200  DS    0H                                               AJSW012\n         CLI   OSEFORMS,C'P'       BEGIN WITH 'P'?              AJSW012\n         BC    NE,DO017            NO. CHECK PR.                AJSW012\n         CLC   OSEFORMS+5(3),=CL3' '  LAST THREE BLANKS?        AJSW012\n         BC    NE,DO017            NO. BAD FORM.                AJSW012\n         LA    R9,OSEFORMS+1       POINT TO BEGINNING           AJSW012\n*                                                               AJSW012\nGDW1300  DS    0H                                               AJSW012\n         L     R9,0(R9)            PUT FORM IN REG              AJSW012\n*                                                               AJSW012\nGDW1310  DS    0H                                               AJSW012\n         O     R9,=X'0F0F0F0F'     SET NUMERICS TO X'FF'        AJSW012\n         C     R9,=X'FFFFFFFF'     WERE THEY ALL NUMERIC?       AJSW012\n         BC    NE,DO017            NO. KILL OSE.                AJSW012\n         EJECT                                                  AJSW012\n*-------------------------------------------------------------* AJSW012\n*        VALIDATE OSE FCB SPECIFICATION                       * AJSW012\n*-------------------------------------------------------------* AJSW012\n*                                                               AJSW012\n*-------------------------------------------------------------* AJSW012\n*        FCB MUST BE 4 CHARACTERS LONG OR =6 OR =8 .          * AJSW012\n*-------------------------------------------------------------* AJSW012\n*                                                               AJSW012\nGDW2000  DS    0H                                               AJSW012\n         CLC   OSETYPE,=CL8'PRT'   ONLY CHECK FOR PRT TYPE      AJSW012\n         BC    NE,GDW5000          NO. SKIP CHECK               AJSW012\n         CLC   OSECARR+4(4),=CL4' '  IS IT 4 OR LESS LONG?      AJSW012\n         BC    NE,DO018            NO. KILL OSE.                AJSW012\n         CLI   OSECARR+3,C' '      IS IT NOT 4 LONG?            AJSW012\n         BC    EQ,GDW2100          NO. ONLY TWO POSSIBLE.       AJSW012\n         CLI   OSECARR,C'C'        CDSC FCB?                    AJSW012\n         BC    EQ,GDW5000          YES. LET IT GO.              AJSW012\n         CLI   OSECARR,C'D'        DX FCB?                      AJSW012\n         BC    EQ,GDW5000          YES. LET IT GO.              AJSW012\n         CLI   OSECARR,C'E'        EDSC FCB?                    AJSW012\n         BC    EQ,GDW5000          YES. LET IT GO.              AJSW012\n         CLI   OSECARR,C'W'        WDSC FCB?                    AJSW012\n         BC    EQ,GDW5000          YES. LET IT GO.              AJSW012\n         CLC   OSECARR(3),=CL3'STD'  IS IT A STD?               AJSW012\n         BC    EQ,GDW5000          YES. LET IT GO.              AJSW012\n         CLC   OSECARR,=CL8'TILT'  IS IT TILT?                  AJSW012\n         BC    EQ,GDW5000          YES. LET IT GO.              AJSW012\n*                                                               AJSW012\nGDW2100  DS    0H                                               AJSW012\n         CLC   OSECARR,=CL8'6'     IS IT =6?                    AJSW012\n         BC    EQ,GDW5000         *YES. LET IT GO.              AJSW012\n         CLC   OSECARR,=CL8'8'    *IS IT =8?                    AJSW012\n         BC    NE,DO018           *NO. KILL OSE.                AJSW012\n         EJECT                                                  AJSW012\n*-------------------------------------------------------------* AJSW012\n*        COMPUTE OSE PRIORITY                                 * AJSW012\n*-------------------------------------------------------------* AJSW012\n*                                                               AJSW012\n*-------------------------------------------------------------* AJSW012\n*        CHECK IF ALREADY SPECIFIED & VALIDATE CLASS.         * AJSW012\n*-------------------------------------------------------------* AJSW012\n*                                                               AJSW012\nGDW5000  DS    0H                                               AJSW012\n         CLI   OSEPRTY,30          IS THERE ONE THERE ALREADY?  AJSW012\n         BNH   GDW5100             NO - GO COMPUTE IT           AJSW012\n         TM    RQFLG5,RQDSEL       DEMAND SELECT JOB?           AJSW012\n         BNO   GDW5050             NO, CHECK JOB CLASS          AJSW012\n         TM    RQFLG5,RQMVSTSO     YES, IS TSO JOB?             AJSW012\n         BNO   GDW9000             NO, IS STC, ACCEPT PRTY      AJSW012\n         BO    GDW5100             YES, SKIP JOB CLASS CHECK    AJSW012\n*                                                               AJSW012\nGDW5050  DS    0H                                               AJSW012\n         LH    R1,RQJOBNO          GET JOB NUMBER IN BINARY     AJSW012\n*                                                               AJSW012\n       IATXJQE JOBNUM=(R1),ERROR=GDW5100  GET JQE ADDRESS       AJSW012\n*                                                               AJSW012\n         SLR   R6,R6               CLEAR REG                    AJSW012\n         USING JQESTART,R1         SET ADDRESSABILITY           AJSW012\n         IC    R6,JQECLS           GET JOB CLASS                AJSW012\n         DROP  R1                  DROP REG 1                   AJSW012\n         LTR   R6,R6               DID WE GET SOMETHING?        AJSW012\n         BZ    GDW5100             NO - TOO BAD - COMPUTE PRTY  AJSW012\n         BCTR  R6,0                MAKE OFFSET INSTEAD OF COUNT AJSW012\n         L     R7,MCLASS           GET CLASS TABLE ADDRESS      AJSW012\n         USING MCNAME,R7           SET ADDRESSING               AJSW012\n         MH    R6,MCLNG            DEVELOP POINTER TO CLASS     AJSW012\n         LA    R7,0(R7,R6)         POINT TO OUR ENTRY           AJSW012\n         CLC   MCNAME,=CL8'PROD'   IS THIS OUR CLASS?           AJSW012\n         BE    GDW9000             YES - PROCESS OSE AS IS.     AJSW012\n         CLC   MCNAME,=CL8'URGENT'  IS THIS OUR CLASS?          AJSW012\n         BE    GDW9000             YES - PROCESS OSE AS IS.     AJSW012\n         CLC   MCNAME,=CL8'TP'     IS THIS OUR CLASS?           AJSW003\n         BE    GDW9000             YES - PROCESS OSE AS IS.     AJSW003\n*                                                               AJSW012\nGDW5100  DC    0H'0'                                            AJSW012\n         LA    R15,FXPRTYPX        ->FIXED PRIORITY TABLE PFXS  AJSW012\n         USING WDPRTYPX,R15        FIXED PRTY JOBNAME PFX TBL   AJSW012\n         LA    R14,FXPRTYID        ->FIXED PRIORITY TABLE UIDS  AJSW012\n         USING WDPRTYID,R14        FIXED PRTY UID VALUES        AJSW012\n         XR    R1,R1               CLEAR FOR INSERTIONS         AJSW012\n*                                                               AJSW012\nGDCMPPFX DC    0H'0'                                            AJSW012\n         ICM   R1,B'0001',WDPRTYPL LENGTH OF ENTRY              AJSW012\n         BC    ZERO,GDNOTFXP       NOT A FIXED PRIORITY JOB     AJSW012\n         EX    R1,GDFXPCMP         THIS JOB NAME V. PREFIX NTRY AJSW012\n         BC    EQ,GDCMPUID         FOUND A POSSIBILITY          AJSW012\n         LA    R15,WDPRTYNX(R1)    STEP TO NEXT ENTRY           AJSW012\n         B     GDCMPPFX                                         AJSW012\n*                                                               AJSW012\nGDFXPCMP CLC   WDPRTYPF(0),RQJOBNAM * * * E X E C U T E D * * * AJSW012\n         DROP  R15                                              AJSW012\n*                                                               AJSW012\nGDCMPUID DC    0H'0'                                            AJSW012\n         CLI   WDPRTYNM,XFF        END OF UID TABLE?            AJSW012\n         BC    EQ,GDNOTFXP         END OF TBL, NO MATCH         AJSW012\n         CLC   WDPRTYNM,RQTUSID    USERID MATCH?                AJSW012\n         BC    EQ,GDGOTFXP         YES, SET PRIORITY            AJSW012\n         LA    R14,WDNXTUID        STEP TO NEXT TABLE ENTRY     AJSW012\n         B     GDCMPUID            LOOP FOR NEXT TABLE ENTRY    AJSW012\n*                                                               AJSW012\nGDGOTFXP DC    0H'0'                                            AJSW012\n         MVC   OSEPRTY,WDPRTYFX    SET REQ'D PRIORITY           AJSW012\n         B     GDW9000             EXIT W/FIXED PRIORITY        AJSW012\n         DROP  R14                                              AJSW012\n*                                                               AJSW012\nGDNOTFXP DC    0H'0'                                            AJSW012\n         SPACE 1                                                AJSW012\n*-------------------------------------------------------------* AJSW012\n*        COMPUTE OSE PRIORITY                                 * AJSW012\n*                                                             * AJSW012\n*        OSEPRTY = 200 - ( 25 * LOG (#LINES/100) )            * AJSW012\n*                                                             * AJSW012\n*        WHICH IS TO SAY:                                     * AJSW012\n*                                                             * AJSW012\n*              0 < #LINES < 1000      => OSEPRTY = 200        * AJSW012\n*           1000 < #LINES < 10000     => OSEPRTY = 175        * AJSW012\n*          10000 < #LINES < 100000    => OSEPRTY = 150        * AJSW012\n*         100000 < #LINES < 1000000   => OSEPRTY = 125        * AJSW012\n*        1000000 < #LINES < 10000000  => OSEPRTY = 100        * AJSW012\n*                                                             * AJSW012\n*-------------------------------------------------------------* AJSW012\n*                                                               AJSW012\n         TM    MFLAGS,MFPRTY       PRIORITY CALCULATED          AJSW012\n         BC    ALLON,GDW5400       YES,CONTINUE                 AJSW012\n*                                                               AJSW012\n         XC    JOBRECDS,JOBRECDS   CLEAR ACCUMULATOR            AJSW012\n         L     R1,RESQ@            -> RESQ FOR JOB              AJSW012\n         USING RQSTART,R1                                       AJSW012\n         L     R1,RQJDSFDB         -> JDS FOR JOB               AJSW012\n         DROP  R1                                               AJSW012\n         USING JDSSTART,R1                                      AJSW012\n         LH    R0,JDSTOTL          TOTAL JDS LENGTH             AJSW012\n         LH    R5,JDSFIXL          LENGTH OF JDS FIXED PORTION  AJSW012\n         LA    R1,0(R5,R1)         BUMP TO FOR DATA SET ENTRY   AJSW012\n         SR    R0,R5               ADJUST LENGTH                AJSW012\n         DROP  R1                                               AJSW012\n         USING JDSENTRY,R1                                      AJSW012\n*                                                               AJSW012\nPJDS0000 DS    0H                                               AJSW012\n         ICM   R5,B'1111',JDSRECDS TOTAL RECORDS FOR DATA SET   AJSW012\n         BC    ZERO,PJDS2000       NEXT JDS IF COUNT = 0        AJSW012\n         SLR   R6,R6               CLEAR COPY COUNT             AJSW012\n         ICM   R6,B'0001',JDSCOPY  GET COPY COUNT               AJSW012\n         BC    ZERO,PJDS1000       DEFAULT TO 1 COPY            AJSW012\n         MR    R4,R6               CALC DATA SET TOTAL LINES    AJSW012\n*                                                               AJSW012\nPJDS1000 DS    0H                                               AJSW012\n         A     R5,JOBRECDS         ACCUMULATE JOB TOTAL LINES   AJSW012\n         ST    R5,JOBRECDS         SAVE ACCUMULATED RECORDS     AJSW012\n*                                                               AJSW012\nPJDS2000 DS    0H                                               AJSW012\n         LH    R5,JDSVARL          GET LENGTH OF THIS ENTRY     AJSW012\n         SR    R0,R5               GET RESIDUAL LENGTH          AJSW012\n         BC    ZERO,PJDS9999       CONTINUE IF DONE             AJSW012\n         LA    R1,0(R5,R1)         IF NOT GET NEXT DATA SET ENT AJSW012\n         B     PJDS0000            LOOP BACK TIL DONE           AJSW012\n*                                                               AJSW012\n         DROP  R1                                               AJSW012\n*                                                               AJSW012\nPJDS9999 DS    0H                                               AJSW012\n         SLR   R4,R4               PREP REGISTER FOR DIVIDE     AJSW012\n         L     R5,JOBRECDS         TOTAL SPOOL RCDS FOR JOB     AJSW012\n         LA    R6,10               LOAD DIVISOR INTO REG 6      AJSW012\n         SLR   R9,R9               LOAD COUNT INTO REG 9        AJSW012\n         D     R4,=F'100'          DIVIDE BY 100                AJSW012\n*                                                               AJSW012\nGDW5200  DS    0H                                               AJSW012\n         SLR   R4,R4               CLEAR REMAINDER              AJSW012\n         DR    R4,R6               DIVIDE BY 10                 AJSW012\n         LTR   R5,R5               ZERO?                        AJSW012\n         BZ    GDW5300             YES - OUT OF LOOP.           AJSW012\n         LA    R9,1(R9)            ADD ONE TO COUNT             AJSW012\n         B     GDW5200             AND AROUND AGAIN             AJSW012\n*                                                               AJSW012\nGDW5300  DS    0H                                               AJSW012\n         LR    R5,R9               GET NUMBER OF X1000 LINES    AJSW012\n         M     R4,=F'25'           MULTIPLY BY 25               AJSW012\n         LA    R4,200              PUT BASE IN REG 4            AJSW012\n         SR    R4,R5               SUBTRACT FROM 200            AJSW012\n         STC   R4,SVPRTY           AND SAVE IT DOWN             AJSW012\n         OI    MFLAGS,MFPRTY       INDICATE PRIORITY CALC'ED    AJSW012\n*                                                               AJSW012\nGDW5400  DS    0H                                               AJSW012\n         MVC   OSEPRTY,SVPRTY      SET OSE PRIORITY             AJSW012\n         EJECT                                                  AJSW012\n*-------------------------------------------------------------* AJSW012\n*        RETURN TO IATOSDR                                    * AJSW012\n*-------------------------------------------------------------* AJSW012\n         SPACE 1                                                AJSW012\n*-------------------------------------------------------------* AJSW012\n*        NORMAL RETURN                                        * AJSW012\n*-------------------------------------------------------------* AJSW012\n*                                                               AJSW012\nGDW9000  DS    0H                                               AJSW012\n         SLR   R15,R15             CLEAR REGISTER 15            AJSW012\n         ARETURN RC=4              NORMAL RETURN                AJSW012\n         SPACE 1                                                AJSW012\n*-------------------------------------------------------------* AJSW012\n*        RETURN TO KILL OSE                                   * AJSW012\n*-------------------------------------------------------------* AJSW012\n*                                                               AJSW012\nKILLOSE  DS    0H                                               AJSW012\n         MVC   ERRMSG+WC015I1(L'WC015I1),SVJOBNAM               AJSW012\n         MVC   ERRMSG+WC015I2(L'WC015I2),SVJNUM                 AJSW012\n*                                                               AJSW012\n         MESSAGE TEXT=ERRMSG,     ISSUE THE ERROR MESSAGE       AJSW012$\n               CLASS=S2                                         AJSW012\n*                                                               AJSW012\nKILLOSE9 DS    0H                                               AJSW012\n         SLR   R15,R15             CLEAR REG 15                 AJSW012\n         ARETURN RC=0              DON'T BUILD OSE              AJSW012\n*                                                               AJSW012\n         EJECT                                                  AJSW012\nWC053STP DC    0H'0'                                            AJSW012\n*                                                               AJSW012\n*        THIS  ROUTINE IS DESIGNED TO VERIFY CLASS V SYSOUT     AJSW012\n*        IS DESTINED FOR A VPS PRINTER.                         AJSW012\n*                                                               AJSW012\n*        A VPS DESTINATION IS DETECTED WHEN THE OUTPUT CLASS    AJSW012\n*        IS \"V\" AND THE DESTINATION NAME IS EXACTLY 7           AJSW012\n*        CHARACTERS LONG, AND THE 1ST 5 CHARACTERS DO *NOT*     AJSW012\n*        APPEAR IN EITHER THE RJP OR SNARJP TABLES              AJSW012\n*                                                               AJSW012\n         SPACE 3                                                AJSW012\n**                                                              AJSW012\n*                                                               AJSW012\n*        FIRST, CHECK TO SEE IF THE VPS PRINTER TABLE IS        AJSW012\n*              AVAILABLE.                                       AJSW012\n*              IF THE VPS PRINTER TABLE IS NOT AVAILABLE,       AJSW012\n*              LOAD IT INTO MEMORY, GET STORAGE FOR OUR         AJSW012\n*              OWN (ABOVE THE LINE) COPY OF THE TABLE,          AJSW012\n*              COPY THE LOADED DATA INTO THE ACQUIRED           AJSW012\n*              STORAGE.                                         AJSW012\n*              WHEN THE VPS PRINTER TABLE IS AVAILABLE,         AJSW012\n*              SEARCH IT FOR THE SPECIFIED DESTINATION          AJSW012\n*              NAME, AND EXTRACT THE CORRESPONDING PRINTER      AJSW012\n*              NAME.                                            AJSW012\n*                                                               AJSW012\n**                                                              AJSW012\n         SPACE 1                                                AJSW012\n         ICM   R9,B'1111',WDVPSTBL -> TABLE OF VPS DEST/PRTRS   AJSW012\n         BC    NZERO,WDGOTVPS      TABLE HAS BEEN ACQUIRED.     AJSW012\n         IATXCSF ENTER=WD053L,     LOAD TABLE UNDER SUBTASK     AJSW012*\n               ID=154              GROUP LOAD/DELETE W/SUBTASK  AJSW012\n*                                                               AJSW012\n         USING WDPRTMAP,R3         LOAD MODULE ADDRBLTY         AJSW012\n         LR    R3,R0               COPY EP ADDRESS              AJSW012\n         LA    R3,0(R3)            CLEAR ANY FLAGS              AJSW012\n         LR    R15,R0              COPY EPA FOR LENGTH CALC     AJSW012\n*                                                               AJSW012\nWDPRTCT  DS    0H                                               AJSW012\n         CLI   0(R15),XFF          END OF TABLE?                AJSW012\n         LA    R15,WDPRTLNG(,R15)  GET NEXT ENTRY.              AJSW012\n         BC    NE,WDPRTCT          NOT END OF TABLE             AJSW012\n*                                                               AJSW012\n         SR    R15,R3              GET TOTAL TABLE LENGTH       AJSW012\n         ST    R15,WDNAMSIZ        SAVE FOR LATER               AJSW012\n         LR    R0,R15              COPY STORAGE REQUIREMENT     AJSW012\n*                                                               AJSW012\n*        GET STORAGE FOR NAME-TO-DESTINATION LOOKUP TABLE       AJSW012\n*                                                               AJSW012\n         AGETMAIN SIZE=(R0),LOC=(ANY,ANY) FOR LOOKUP TABLE      AJSW012\n*                                                               AJSW012\n         LR    R9,R1               COPY ACQUIRED STORAGE ADDR   AJSW012\n         ST    R9,WDVPSTBL         SAVE -> VPS DEST TABLE       AJSW012\n         USING WDPLUTBL,R9         PRINTER LOOKUP TBL ADDRBLTY  AJSW012\n*                                                               AJSW012\n*        COPY LOAD MODULE ENTRIES TO LOOKUP TABLE               AJSW012\n*                                                               AJSW012\n         LA    R14,WDPRTNAM        -> LOAD MODULE TABLE         AJSW012\n         L     R1,WDNAMSIZ         SET LENGTH TO MOVE           AJSW012\n         LR    R15,R1              COPY LENGTH TO MOVE          AJSW012\n         MVCL  R0,R14              COPY TO HI-STORAGE TABLE     AJSW012\n*                                                               AJSW012\n*        DELETE VPS PRINT MODULE                                AJSW012\n*                                                               AJSW012\n         IATXCSF ENTER=WD053D,     DELETE TABLE UNDER SUBTASK   AJSW012*\n               ID=154              GROUP LOAD/DELETE W/SUBTASK  AJSW012\n         DROP  R3                  PRINTER NAME ADDRESSABILITY  AJSW012\n*                                                               AJSW012\n*        LOOK UP THE DESTINATION IN THE PRINTER LOOKUP TABLE    AJSW012\n*                                                               AJSW012\nWDGOTVPS DC    0H'0'                                            AJSW012\n         CLC   OSEDEST,WDPLUDST    OSE DEST MATCH LOOKUP ENTRY? AJSW012\n         BC    EQ,GDW9000          YES, EXIT                    AJSW012\n         LA    R9,WDPLUNXT         NO, STEP TO NEXT ENTRY       AJSW012\n         CLI   WDPLUNAM,XFF        END OF PRINTER DEST TABLE?   AJSW012\n         BC    EQ,DO015            YES, NO HOPE DELETE D.S.     AJSW012\n         B     WDGOTVPS            NO, CHECK NEXT ENTRY         AJSW012\n*                                                               AJSW012\n**                                                              AJSW012\n*                                                               AJSW012\n*        LOAD VPS MODULE CONTAINING TERMINAL NAMES AND          AJSW012\n*              DESTINATION EQUIVALENTS                          AJSW012\n*                                                               AJSW012\n**                                                              AJSW012\n*                                                               AJSW012\nWD053L   DC    0D'0'                                            AJSW012\n         LR    R3,R14              SAVE RETURN ADDRESS          AJSW012\n         LR    R4,R13              SAVE CALLER'S SAVEAREA ADDR  AJSW012\n         LOAD  EPLOC=WDVPSNAM      LOAD VPS TABLE               AJSW012\n         LR    R14,R3              RESTORE RETURN ADDRESS       AJSW012\n         LR    R13,R4              RESTORE SAVEAREA ADDRESS     AJSW012\n         BR    R14                 RETURN TO CALLER             AJSW012\n**                                                              AJSW012\n*                                                               AJSW012\n*        DELETE VPS MODULE CONTAINING TERMINAL NAMES AND        AJSW012\n*              DESTINATION EQUIVALENTS                          AJSW012\n*                                                               AJSW012\n**                                                              AJSW012\n*                                                               AJSW012\nWD053D   DC    0D'0'                                            AJSW012\n         LR    R3,R14              SAVE RETURN ADDRESS          AJSW012\n         LR    R4,R13              SAVE CALLER'S SAVE AREA ADDR AJSW012\n         DELETE EPLOC=WDVPSNAM     DELETE VPS TABLE             AJSW012\n         LR    R14,R3              RESTORE RETURN ADDRESS       AJSW012\n         LR    R13,R4              RESTORE SAVE AREA ADDRESS    AJSW012\n         BR    R14                 RETURN TO CALLER             AJSW012\n         AGO  .NOESI         CHANGE TO EJECT                    AJSW012\n*\n***********************************************************************\n*                                                                     *\n* IATUX19 -                                                           *\n*        JES3 USER EXIT TO MODIFY AN OSE.  IT TRANSLATES A            *\n*        DESTINATION INTO A NODE NAME AND DESTINATION BASED           *\n*        UPON A TRANSLATE TABLE.                                      *\n*                                                                     *\n* COPYRIGHT -                                                         *\n*        COPYRIGHT 1988 ESSENTIAL SOFTWARE, INC.                      *\n*                                                                     *\n* ATTRIBUTES -                                                        *\n*        SERIALLY REUSABLE, SUPERVISOR STATE, JES PROTECT KEY.        *\n*                                                                     *\n***********************************************************************\n*\nESI       DS    0H\n*\n*         SEARCH TABLE FOR DESTINATION\n*\n          LA      R4,ESITAB         LOAD ADDRESS FIRST ENTRY\n*\nESI010    DS      0H\n          CLI     0(R4),X'FF'       END OF TABLE ???\n          BE      GDW9000           YES\n          CLC     OSEDEST,0(R4)     ENTRY FOUND ???\n          BE      ESI020            YES\n          LA      R4,24(,R4)        NEXT ENTRY\n          B       ESI010            LOOP BACK\n*\n*         REPLACE NODE AND DESTINATION\n*\nESI020    DS      0H\n          MVC     OSEDEST,8(R4)     REPLACE NODE\n          MVC     OSEDEST2,16(R4)   REPLACE DESTINATION\n          OI      OSENJE1,OSENJEOP  INDEICATE OSE FOR NETWORK\n          CLC     OSEDEST,HOMENODE  HOME NODE?\n          BNE     GDW9000           NO\n          MVC     OSEDEST,OSEDEST2  IGNORE NODE\n          XC      OSEDEST2,OSEDEST2\n          NI      OSENJE1,X'FF'-OSENJEOP\n          B       GDW9000\n*\n***********************************************************************\n*         D E S T I N A T I O N   T R A N S L A T E   T A B L E       *\n*                                                                     *\n*        THE DESTINATION TRANSLATE TABLE CONTAINS ENTRIES OF          *\n*        24 BYTES IN THE FOLLOWING FORMAT:                            *\n*        01-08 - ORIGINAL DESTINATION FROM JCL                        *\n*        09-16 - TRANSLATED NODE NAME                                 *\n*        17-24 - TRANSLATED DESITNATION                               *\n*                                                                     *\n*                               1         2                           *\n*                      123456789012345678901234                       *\n*                      +------+-------+-------+                       *\n*                      | ORG  |  TRANSLATED   |                       *\n*                      | DEST | NODE    DEST  |                       *\n*                      +------+-------+-------+                       *\n*                      DDDDDDDDNNNNNNNNDDDDDDDD                       *\n*                                                                     *\n*         DC      CL24'DESTFROMESI1    DESTO   '                      *\n*                                                                     *\n***********************************************************************\n*\nESITAB   DS    0C\n         DC      CL24'EXPLS01 EDSCE   STRLH   '\nESITABEN DC      XL24'FF'            END OF TABLE\n.NOESI   ANOP    CHANGE TO EJECT\n*************************************************************** AJSW012\n*          MESSAGE FORMATTING ROUTINES                        * AJSW012\n*************************************************************** AJSW012\n*                                                               AJSW012\nDO015    DS    0H                  INVALID VPS DEST             AJSW012\n         TM    EFLAGS,EFVPS        HAS THIS MESSAGE BEEN ISSUED AJSW012\n         BC    ALLON,KILLOSE9      YES, DON'T RE-ISSUE          AJSW012\n         MVC   ERRMSG(WC015#),IATWC015 COPY MESSAGE SKELETON    AJSW012\n         MVC   ERRMSG+WC015I3(L'WC015I3),OSEDEST                AJSW012\n         OI    EFLAGS,EFVPS        INDICATE IATWC015 ISSUED     AJSW012\n         B     KILLOSE             SEND MESSAGE TO MLOG         AJSW012\n*                                                               AJSW012\nDO016    DS    0H                  INVALID DESTINATION          AJSW012\n         TM    EFLAGS,EFDEST       HAS THIS MESSAGE BEEN ISSUED AJSW012\n         BC    ALLON,KILLOSE9      YES, DON'T RE-ISSUE          AJSW012\n         MVC   ERRMSG(WC016#),IATWC016 COPY MESSAGE SKELETON    AJSW012\n         MVC   ERRMSG+WC016I3(L'WC016I3),OSEDEST                AJSW012\n         OI    EFLAGS,EFDEST       INDICATE IATWC016 ISSUED     AJSW012\n         B     KILLOSE             SEND MESSAGE TO MLOG         AJSW012\n*                                                               AJSW012\nDO017    DS    0H                  INVALID FORMS SPECIFICATION  AJSW012\n         TM    EFLAGS,EFFORM       HAS THIS MESSAGE BEEN ISSUED AJSW012\n         BC    ALLON,KILLOSE9      YES, DON'T RE-ISSUE          AJSW012\n         MVC   ERRMSG(WC017#),IATWC017 COPY MESSAGE SKELETON    AJSW012\n         MVC   ERRMSG+WC017I3(L'WC017I3),OSEFORMS               AJSW012\n         OI    EFLAGS,EFFORM       INDICATE IATWC017 ISSUED     AJSW012\n         B     KILLOSE             SEND MESSAGE TO MLOG         AJSW012\n*                                                               AJSW012\nDO018    DS    0H                  INVALID FCB SPECIFICATION    AJSW012\n         TM    EFLAGS,EFFCB        HAS THIS MESSAGE BEEN ISSUED AJSW012\n         BC    ALLON,KILLOSE9      YES, DON'T RE-ISSUE          AJSW012\n         MVC   ERRMSG(WC018#),IATWC018 COPY MESSAGE SKELETON    AJSW012\n         MVC   ERRMSG+WC018I3(L'WC018I3),OSECARR                AJSW012\n         OI    EFLAGS,EFFCB        INDICATE IATWC018 ISSUED     AJSW012\n         B     KILLOSE             SEND MESSAGE TO MLOG         AJSW012\n         EJECT                                                  AJSW012\nWDVPSNAM DC    CL8'PID$DEST'       E.P. FOR VPS NAME TABLE      AJSW012\nWDPFX8   DS    0CL8                8 BYTE PREFIX LIST           AJSW012\n         DC    CL8'DBCTDBM1'                               @JBD AJSW012\n         DC    CL8'DBCTMSTR'                               @JBD AJSW012\n         DC    CL8'DBIPDBM1'                               @JBD AJSW012\n         DC    CL8'DBIPMSTR'                               @JBD AJSW012\n         DC    CL8'DBS5DBM1'                               @JBD AJSW012\n         DC    CL8'DBS5MSTR'                               @JBD AJSW012\n         DC    CL8'DBTPDBM1'                               @JBD AJSW012\n         DC    CL8'DBTPMSTR'                               @JBD AJSW012\n         DC    CL8'IPLMPROC'                                    AJSW012\n         DC    CL8'ITLMPROC'                                    AJSW012\n         DC    CL8'TRLMPROC'                                    AJSW012\n         DC    CL8'XRLMPROC'                                    AJSW012\n         DC    XL8'FFFFFFFFFFFFFFFF'                            AJSW012\nWDPFX7   DC    0CL7' '             DEMAND SELECT PREFIXES       AJSW012\n         DC    CL7'IMSPROD'                                     AJSW012\n         DC    CL7'IMSTEST'                                     AJSW012\n         DC    XL7'FFFFFFFFFFFFFF' END OF 7-BYTE PREFIX LIST    AJSW012\nWDPFX6   DC    0CL6' '             6-BYTE DEMAND SELECT JOB PFX AJSW012\n         DC    CL6'IMSSY5'                                      AJSW012\n         DC    XL6'FFFFFFFFFFFF'   END OF 6-BYTE PREFIX LIST    AJSW012\nWDPFX5   DC    0CL5' '             5-BYTE DEMAND SELECT JOB PFX AJSW012\n         DC    CL5'CICSB'          CICSB, CICSBJNL, CICSBE      AJSW012\n* THIS LINE DELETED 06/05/88                               @JBD AJSW012\n         DC    CL5'OMEGA'                                       AJSW012\n         DC    CL5'WCEMR'                                       AJSW012\n         DC    CL5'WCJNL'                                       AJSW012\n         DC    CL5'WCMRO'                                       AJSW012\n         DC    XL5'FFFFFFFFFF'     END OF 5-BYTE PREFIX LIST    AJSW012\nWDPFX4   DC    0CL4' '             4-BYTE DEMAND SELECT JOB PFX AJSW012\n         DC    CL4'ARCH'                                        AJSW012\n         DC    CL4'DBRC'                                        AJSW012\n         DC    CL4'IDMS'                                   @JBD AJSW012\n         DC    CL4'IDMT'                                   @JBD AJSW012\n         DC    CL4'M204'                                   @JBD AJSW012\n         DC    XL4'FFFFFFFF'       END OF 4-BYTE PREFIX LIST    AJSW012\nWDPFX3   DC    0CL3' '             3-BYTE DEMAND SELECT JOB PFX AJSW012\n         DC    CL3'CLS'                                         AJSW012\n         DC    CL3'DB2'                                         AJSW012\n         DC    CL3'DLI'                                         AJSW012\n         DC    CL3'FCS'                                         AJSW012\n         DC    XL3'FFFFFF'         END OF 3-BYTE PREFIX LIST    AJSW012\nFXPRTYPX DC    0D'0'               FIXED PRIORITY TABLE PFXS    AJSW012\n         DC    XL1'03'             LENGTH-1 OF FOLLOWING ENTRY  AJSW012\n         DC    CL4'RSCS'           FIXED PRTY JOBNAME PREFIX    AJSW012\n         DC    XL1'00'             END OF TABLE SENTINEL        AJSW012\nFXPRTYID DC    0D'0'                                            AJSW012\n* THIS LINE DELETED 06/05/88                               @JBD AJSW012\n* THIS LINE DELETED 06/05/88                               @JBD AJSW012\n         DC    CL7'$WC3TAF'        FIXED PRTY ELIGIBLE UID      AJSW012\n         DC    AL1(201)            PRTY FOR THIS USER           AJSW012\n         DC    8X'FF'              END OF TABLE SENTINEL        AJSW012\nOSE@     DS    A                   -> OSE                       AJSW012\nRESQ@    DS    A                   -> RESQ                      AJSW012\nJDS@     DS    A                   -> JDS                       AJSW012\nWDVPSTBL DC    A(0)                -> TABLE OF VPS DEST/PRTRS   AJSW012\nWDNAMSIZ DC    F'0'                SIZE OF TABLE OF VPS DEST/PR AJSW012\nXFF      EQU   X'FF'               USEFUL CONSTANT              AJSW012\nX00      EQU   X'00'               ANOTHER ONE                  AJSW012\n*                                                               AJSW012\nJOBRECDS DS    F                   PRIORIT CALC WORK AREA       AJSW012\nSVJOBNAM DC    CL8' '              SAVED JOB NAME               AJSW012\nSVJNUM   DC    CL4' '              SAVED JOB NUMBER             AJSW012\nSVPRTY   DC    X'00'               SAVED OUTPUT PRIORITY        AJSW012\n*                                                               AJSW012\nEFLAGS   DC    X'00'               DETECTED ERROR FLAGS         AJSW012\nEFVPS    EQU   B'10000000'         INVALID VPS DESTINATION      AJSW012\nEFDEST   EQU   B'01000000'         INVALID DESTINATION          AJSW012\nEFFORM   EQU   B'00100000'         INVALID FORM                 AJSW012\nEFFCB    EQU   B'00010000'         INVALID FCB                  AJSW012\n*        EQU   B'00001000'         *** UNUSED ****              AJSW012\n*        EQU   B'00000100'         *** UNUSED ****              AJSW012\n*        EQU   B'00000010'         *** UNUSED ****              AJSW012\n*        EQU   B'00000001'         *** UNUSED ****              AJSW012\n*                                                               AJSW012\nMFLAGS   DC    X'00'               MISC FLAGS                   AJSW012\nMFPRTY   EQU   B'10000000'         PRIORITY HAS BEEN CALC'ED    AJSW012\nMFACFUID EQU   B'01000000'         ACF LOGONID RECORD FOUND     AJSW012\n*        EQU   B'00100000'         *** UNUSED ****              AJSW012\n*        EQU   B'00010000'         *** UNUSED ****              AJSW012\n*        EQU   B'00001000'         *** UNUSED ****              AJSW012\n*        EQU   B'00000100'         *** UNUSED ****              AJSW012\n*        EQU   B'00000010'         *** UNUSED ****              AJSW012\n*        EQU   B'00000001'         *** UNUSED ****              AJSW012\n         EJECT                                                  AJSW012\n*************************************************************** AJSW012\n*                                                             * AJSW012\n*            ERROR MESSAGES                                     AJSW012\n*************************************************************** AJSW012\n*                                                               AJSW012\nIATWC015 DS    0C                                               AJSW012\n         DC    AL1(WC015#-1)       MESSAGE LENGTH               AJSW012\n         DC    C'IATWC015E (UX19) '                             AJSW012\nWC015I1  EQU   *-IATWC015,8,C'C'   OFFSET TO JOBNAME INSERT     AJSW012\n         DC    CL(L'WC015I1)' '                                 AJSW012\n         DC    C' ('                                            AJSW012\nWC015I2  EQU   *-IATWC015,4,C'C'   OFFSET TO JOBNUMBER INSERT   AJSW012\n         DC    CL(L'WC015I2)' '                                 AJSW012\n         DC    C') '                                            AJSW012\nWC015I3  EQU   *-IATWC015,8,C'C'   OFFSET TO VPS DEST INSERT    AJSW012\n         DC    CL(L'WC015I3)' '                                 AJSW012\n         DC    C' IS AN INVALID VPS DESTINATION'                AJSW012\nWC015#   EQU   *-IATWC015                                       AJSW012\n*                                                               AJSW012\nIATWC016 DS    0C                                               AJSW012\n         DC    AL1(WC016#-1)       MESSAGE LENGTH               AJSW012\n         DC    C'IATWC016E (UX19) '                             AJSW012\nWC016I1  EQU   *-IATWC016,8,C'C'   OFFSET TO JOBNAME INSERT     AJSW012\n         DC    CL(L'WC016I1)' '                                 AJSW012\n         DC    C' ('                                            AJSW012\nWC016I2  EQU   *-IATWC016,4,C'C'   OFFSET TO JOBNUMBER INSERT   AJSW012\n         DC    CL(L'WC016I2)' '                                 AJSW012\n         DC    C') '                                            AJSW012\nWC016I3  EQU   *-IATWC016,8,C'C'   OFFSET TO DESTINATION INSERT AJSW012\n         DC    CL(L'WC016I3)' '                                 AJSW012\n         DC    C' IS AN UNKNOW DESTINATION'                     AJSW012\nWC016#   EQU   *-IATWC016                                       AJSW012\n*                                                               AJSW012\nIATWC017 DS    0C                                               AJSW012\n         DC    AL1(WC017#-1)       MESSAGE LENGTH               AJSW012\n         DC    C'IATWC017E (UX19) '                             AJSW012\nWC017I1  EQU   *-IATWC017,8,C'C'   OFFSET TO JOBNAME INSERT     AJSW012\n         DC    CL(L'WC017I1)' '                                 AJSW012\n         DC    C' ('                                            AJSW012\nWC017I2  EQU   *-IATWC017,4,C'C'   OFFSET TO JOBNUMBER INSERT   AJSW012\n         DC    CL(L'WC017I2)' '                                 AJSW012\n         DC    C') '                                            AJSW012\nWC017I3  EQU   *-IATWC017,8,C'C'   OFFSET TO FORM INSERT        AJSW012\n         DC    CL(L'WC017I3)' '                                 AJSW012\n         DC    C' IS AN INVALID FORM SPECIFICATION'             AJSW012\nWC017#   EQU   *-IATWC017                                       AJSW012\n*                                                               AJSW012\nIATWC018 DS    0C                                               AJSW012\n         DC    AL1(WC018#-1)       MESSAGE LENGTH               AJSW012\n         DC    C'IATWC018E (UX19) '                             AJSW012\nWC018I1  EQU   *-IATWC018,8,C'C'   OFFSET TO JOBNAME INSERT     AJSW012\n         DC    CL(L'WC018I1)' '                                 AJSW012\n         DC    C' ('                                            AJSW012\nWC018I2  EQU   *-IATWC018,4,C'C'   OFFSET TO JOBNUMBER INSERT   AJSW012\n         DC    CL(L'WC018I2)' '                                 AJSW012\n         DC    C') '                                            AJSW012\nWC018I3  EQU   *-IATWC018,8,C'C'   OFFSET TO FCB INSERT         AJSW012\n         DC    CL(L'WC018I3)' '                                 AJSW012\n         DC    C' IS AN INVALID FCB SPECIFICATION'              AJSW012\nWC018#   EQU   *-IATWC018                                       AJSW012\n*                                                               AJSW012\nERRMSG   DS    0CL121               WORK AREA FOR MESSAGES      AJSW012\n         DC    AL1(120)                                         AJSW012\n         DC    CL120'***** UNINITIALIZED MESSAGE AREA *****'    AJSW012\n*                                                               AJSW012\nACFWRK   DSECT ,                                                AJSW012\n         ACALT DSECT=NO           RESOURCE PARAM BLOCK          AJSW012\nACALEN   EQU   *-ACALT            LENGTH OF RESOURCE PARAM BLK  AJSW012\n*                                                               AJSW012\nERRINFO  DS    CL128              RETURNED MESSAGE AREA         AJSW012\nLOGONREC DS    CL1024             LOGONID RECORD                AJSW012\nACFWRK#  EQU   *-ACFWRK           LENGTH OF ACF WORK AREA       AJSW012\nIATUX19  CSECT ,                                                AJSW012\n*                                                               AJSW012\n         ACCVT ,                                                AJSW012\nIATUX19  CSECT ,                                                AJSW012\n*                                                               AJSW012\nUMODNUM  DC    CL7'AJSW012'                                     AJSW012\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AJSW013": {"ttr": 8965, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW013) /* ADD USER FIELDS TO IATYTVT\n\n       THIS MODIFICATION ADDS USER FIELDS TO IATYTVT FOR USE BY\n       AJSW003 AJSW006 AND AJSW208\n                                                                 */ .\n++ VER(Z038) FMID(HJS2215).\n++ MACUPD(IATYTVT) DISTLIB(AJES3MAC) .\n./ CHANGE NAME=IATYTVT\nTVTUVER  EQU   TVTRSVU1+12,4,C'A'  RESTRICTED CLASS TABLE ->    AJSW208\n*TVTRSVU6 DC   3X'00'               AVAILABLE TO USER      @L8C AJSW013\nTVTRSVU6 DC    1X'00'             *AVAILABLE TO USER            AJSW013\nTVTUFLG1 DC    X'00'              *U S E R   F L A G  1         AJSW013\nTVTUOPEN EQU   X'01'              *FILE OPEN                    AJSW013\nTVTUSTOP EQU   X'02'              *STOP VALIDATION              AJSW013\nTVTUCLOS EQU   X'04'              *CLOSE FILE                   AJSW013\nTVTUSTRT EQU   X'08'              *START VALIDATION             AJSW013\n***** DELETED BY $WC3JBD *****                                  AJSW208\nTVTUFLG2 DC    X'00'              *U S E R   F L A G  2         AJSW013\nTVTUEXPD EQU   X'01'              *EXPDT OF 99365 REQUESTED     AJSW013\nTVTUCVLD EQU   X'02'              *CLASS VER. TAB LOADED        AJSW208\nTVTRSVU8 DC    0F'0'               FORMERLY RESERVED FOR USER   AJSW013\nTVTISWRK DC    0F'0'               ALTERNATE NAME FOR ISDWORK   AJSW013\nISDWORK  DC    F'0'                -> WORKSPACE FOR UX28        AJSW013\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW014": {"ttr": 8967, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW014) /*\n\n       THIS MODIFICATION:\n\n       1. EXAMINES JOB CLASS AND IF IT IS EXPRESS IT CHECKS THE\n          TOTAL REQUESTED CPU TIME FOR THE JOB. IF IT IS IN EXCESS\n          OF 30 SECONDS IT WILL CHANGE THE CLASS TO JS3BATCH.\n       2. EXAMINES JOB CLASS AND IF IT IS JS3BATCH IT WILL CALCULATE\n          THE (NEW) JOB PRIORITY USING A LINEAR COMBINATION OF TOTAL\n          CPU TIME, ESTIMATED NUMBER OF PRINT LINES, NUMBER OF EST-\n          IMATED TAPE MOUNTS, NUMBER OF NEW DISK DATASETS AND THE\n          LARGEST STEPS REGION REQUESTED. THE 'SMALLER' JOBS GET\n          THE HIGHER PRIORITY (HIGEST = 9) AND THE 'LARGER' JOBS GET\n          THE LOWER PRIORITY (LOWEST = 1).\n                                                                 */ .\n++ VER(Z038) FMID(HJS2215).\n++ SRCUPD(IATIICM) .\n./ CHANGE NAME=IATIICM\n* USER MODS:                                                    AJSW014\n*                                                               AJSW014\n*      - COMPUTE JOB PRIORITY AND CHANGE CLASS                  AJSW014\n*                                                               AJSW014\n         EJECT                                                  AJSW014\n         IATYRSQ                                                AJSW014\n         EJECT                                                  AJSW014\n         IATYMCL ,                                              AJSW014\n         EJECT                                                  AJSW014\n         IATYJQE ,                                              AJSW014\nGDEOJ    B     GDEOJ1                                           AJSW014\n         XC    GDXTM(4),GDXTM     *CLEAR TIME FIELD             AJSW014\nGDSTEP   B     GDSTEP1                                          AJSW014\nGDUNIT   B     GDUNIT1                                          AJSW014\n         EJECT                                                  AJSW014\n*************************************************************** AJSW014\n* ENTRY IS FROM GDSTEP AT 04920010                            * AJSW014\n*                                                             * AJSW014\n* 1) ACCUM STEP ESTIMATED EXECUTION TIME                      * AJSW014\n* 2) SAVE LARGEST STEP REGION REQUEST                         * AJSW014\n*************************************************************** AJSW014\n         USING SCT,R6                                           AJSW014\nGDSTEP1  STM   R2,R9,GDSAVE       *SAVE REGISTERS               AJSW014\n         BALR  R9,0               *SET BASE                     AJSW014\n         USING *,R9               *  ..                         AJSW014\n         SR    R5,R5              *ACCUM STEP EST. XTM          AJSW014\n         ICM   R5,7,SCTSTIME      *  ..                         AJSW014\n         BNZ   GDSTEP2            *  ..                         AJSW014\n         L     R5,GDDEFTME        *  ..                         AJSW014\nGDSTEP2  SR    R4,R4              *  ..                         AJSW014\n         D     R4,GD100           *  ..                         AJSW014\n         A     R5,GDXTM           *  ..                         AJSW014\n         ST    R5,GDXTM           *  ..                         AJSW014\n         SR    R5,R5              *SAVE LARGEST STEP RGN REQ    AJSW014\n         ICM   R5,3,SCTMSSZE      *  ..                         AJSW014\n         BNZ   GDSTEP3            *  ..                         AJSW014\n         L     R5,GDDEFRGN        *  ..                         AJSW014\nGDSTEP3  C     R5,GDRGN           *  ..                         AJSW014\n         BNH   GDSTEPND           *  ..                         AJSW014\n         ST    R5,GDRGN           *  ..                         AJSW014\nGDSTEPND LM    R2,R9,GDSAVE       *RETURN                       AJSW014\n         B     GDSTEP+4           *  ..                         AJSW014\n         DROP  R6                                               AJSW014\n         SPACE 3                                                AJSW014\n*************************************************************** AJSW014\n* ENTRY IS FROM GDUNIT AT 08070010                            * AJSW014\n*                                                             * AJSW014\n* 1) ACCUM TOTAL NUMBER OF TAPE REQUESTS                      * AJSW014\n* 2) ACCUM TOTAL NUMBER OF NEW DISK REQUESTS                  * AJSW014\n*************************************************************** AJSW014\nGDUNIT1  STM   R2,R9,GDSAVE       *SAVE REGISTERS               AJSW014\n         BALR  R9,0               *SET BASE                     AJSW014\n         USING *,R9               *  ..                         AJSW014\n         CLC   GDTAPE,SCTUTYPE    *COUNT # TAPE REQUESTS        AJSW014\n         BE    GDUNIT2            *  ..                         AJSW014\n         CLC   GD3400,SCTUTYPE    *  ..                         AJSW014\n         BNE   GDUNIT3            *  ..                         AJSW014\nGDUNIT2  L     R5,GDTPE           *  ..                         AJSW014\n         LA    R5,1(R5)           *  ..                         AJSW014\n         ST    R5,GDTPE           *  ..                         AJSW014\n         B     GDUNITND           *  ..                         AJSW014\nGDUNIT3  TM    DDLFLG2,DDLNEW     *COUNT # NEW DISK REQUESTS    AJSW014\n         BNO   GDUNITND           *  ..                         AJSW014\n         CLC   GDSYS,SCTUTYPE     *  ..                         AJSW014\n         BE    GDUNIT4            *  ..                         AJSW014\n         CLC   GDDISK,SCTUTYPE    *  ..                         AJSW014\n         BE    GDUNIT4            *  ..                         AJSW014\n         CLC   GDPROD(4),SCTUTYPE *  ..                         AJSW014\n         BE    GDUNIT4            *  ..                         AJSW014\n         CLC   GD33,SCTUTYPE      *  ..                         AJSW014\n         BE    GDUNIT4            *  ..                         AJSW014\n         CLC   GD2305,SCTUTYPE    *  ..                         AJSW014\n         BE    GDUNIT4            *  ..                         AJSW014\n         CLC   GDVIO,SCTUTYPE     *  ..                         AJSW014\n         BNE   GDUNITND           *  ..                         AJSW014\nGDUNIT4  L     R5,GDDSK           *  ..                         AJSW014\n         LA    R5,1(R5)           *  ..                         AJSW014\n         ST    R5,GDDSK           *  ..                         AJSW014\nGDUNITND LM    R2,R9,GDSAVE       *RETURN                       AJSW014\n         B     GDUNIT+4           *  ..                         AJSW014\n         SPACE 3                                                AJSW014\n*************************************************************** AJSW014\n* ENTRY IS FROM GDEOJ AT 01850010                             * AJSW014\n*                                                             * AJSW014\n* 1) SAVE ESTIMATED NUMBER OF PRINT LINES                     * AJSW014\n* 2) REPLACE STEP REGION SIZE WITH JOB (IF PRESENT)           * AJSW014\n* 3) REPLACE STEP ESTIMATED TIME WITH JOB (IF PRESENT)        * AJSW014\n* 4) CHANGE CLASS AND PRIORITY AS REQUIRED                    * AJSW014\n*************************************************************** AJSW014\nGDEOJ1   STM   R2,R9,GDSAVE       *SAVE REGISTERS               AJSW014\n         BALR  R9,0               *SET BASE                     AJSW014\n         USING *,R9               *  ..                         AJSW014\n         L     R2,FCTRQAD                                       AJSW014\n         USING RQSTART,R2                                       AJSW014\n         L     R3,IDDJMR          *ESTABLISH IATYJMR BASE       AJSW014\n         MVC   GDLNE,SMF26ELN(R3) *SAVE ESTIMATED LINE COUNT    AJSW014\n         SR    R6,R6              *REPLACE STEP REGION SIZE     AJSW014\n         ICM   R6,3,RQMVTSIZ      *  ..                         AJSW014\n         BZ    GDEOJ2             *  ..                         AJSW014\n         C     R6,GDDEFRGN        *  ..                         AJSW014\n         BE    GDEOJ2             *  ..                         AJSW014\n         ST    R6,GDRGN           *  ..                         AJSW014\nGDEOJ2   ICM   R7,15,IDDCJXTM     *REPLACE STEP EST.EXEC TIME   AJSW014\n         BZ    GDEOJ3             *  ..                         AJSW014\n         SR    R6,R6              *  ..                         AJSW014\n         D     R6,GD100           *  ..                         AJSW014\n         ST    R7,GDXTM           *  ..                         AJSW014\nGDEOJ3   MVC   SMF26XTM(4,R3),GDXTM                             AJSW014\n         LA    R4,30              *LIMIT TO 30 SECONDS          AJSW014\n         C     R4,GDXTM           *  ..                         AJSW014\n         BL    GDEOJ4             *  ..                         AJSW014\n         LA    R8,GD05            *  ..  X, EXPRESS             AJSW014\n         CLC   SMF26CLN(8,R3),GDEXP                             AJSW014\n         BE    GDEOJ7                                           AJSW014\n         LA    R8,GD09              *..  W, DATALOAD            AJSW014\n         CLC   SMF26CLN(8,R3),GDLOAD                            AJSW014\n         BE    GDEOJ7                                           AJSW014\nGDEOJ4   LA    R8,GD07            *LOOK FOR 'PRODUCTION'        AJSW014\n         CLC   SMF26CLN(8,R3),GDPROD *PRODUCTION CLASS?         AJSW014\n         BE    GDEOJ7P               *YES - LEAVE PRTY          AJSW014\n         CLC   SMF26CLN(8,R3),GDBMP  *BMP CLASS                 AJSW014\n         BE    GDEOJ7                                           AJSW014\n         LA    R8,GD09                                          AJSW014\nGDEOJ5   CLC   SMF26CLN(8,R3),GDTP *LOOK FOR 'TP'               AJSW014\n         BE    GDEOJ7                                           AJSW014\n         LA    R8,GD11             *LOOK FOR 'URGENT'           AJSW014\n         CLC   SMF26CLN(8,R3),GDURG                             AJSW014\n         BE    GDEOJ7                                           AJSW014\n         CLC   SMF26CLN(8,R3),GDSDE *LOOK FOR SD ESTIMATING     AJSW014\n         BE    GDEOJ6             *  ..                         AJSW014\n         CLC   SMF26CLN(8,R3),GDPDE *LOOK FOR PD ESTIMATING     AJSW014\n         BE    GDEOJ6             *  ..                         AJSW014\n         CLC   SMF26CLN(8,R3),GDONITE OVERNIGHT CLASS?          AJSW014\n         BE    GDEOJ6              GO COMPUTE PRIORITY          AJSW014\n         MVI   SMF26CLS(R3),C' '  *CLEAR OUT ANY GARBAGE        AJSW014\n         MVI   JMRCLAS(R3),C' '   *  ..  ..                     AJSW014\n         MVI   IDDJCLAS,C' '      *  ..  ..                     AJSW014\n         TM    IDDGTRC2,IDDGDSEL  *DEMAND SELECT?               AJSW014\n         BZ    GDEOJ5B            *NO - CHANGE TO JS3BATCH      AJSW014\n         TM    IDDGTRC1,IDDGTSOL  *TSO LOGON?                   AJSW014\n         BZ    GDEOJ5A            *NO - MUST BE STC             AJSW014\n         LA    R8,GD11            *SET PRIORITY                 AJSW014\n         MVC   SMF26CLN(8,R3),GDTSO *CHANGE TO TSO              AJSW014\n         B     GDEOJ5C              *AND GO ON                  AJSW014\nGDEOJ5A  LA    R8,GD14              *SET PRIORITY               AJSW014\n         MVC   SMF26CLN(8,R3),GDSTC *CHANGE TO STC              AJSW014\n         B     GDEOJ5C              *AND GO ON                  AJSW014\nGDEOJ5B  MVC   SMF26CLN(8,R3),JOBCLS *CHANGE TO JS3BATCH        AJSW014\nGDEOJ5C  LH    R1,RQJOBNO                                       AJSW014\n         IATXJCT TYPE=RW,JOBNUM=(R1),ERROR=GDEOJ5D              AJSW014\n         MVC   JCTSCHCL(8,R1),SMF26CLN(R3) *CHANGE TO CORRECT   AJSW014\n         LH    R1,RQJOBNO                                       AJSW014\n         IATXJCT TYPE=REL,JOBNUM=(R1),ERROR=GDEOJ5C1            AJSW014\nGDEOJ5C1 LH    R1,RQJOBNO                                       AJSW014\n         IATXJQE JOBNUM=(R1),ERROR=GDEOJ5D                      AJSW014\n         L     R5,MCLASS          *GET MCLASS TABLE ADDRESS     AJSW014\n         USING MCNAME,R5          *ESTABLISH ADDRESSABILITY     AJSW014\n         LH    R6,MCLNG           *GET LENGTH OF ENTRY          AJSW014\n         LA    R7,1               *COUNT OF CLASSES             AJSW014\nGDEOJ5C2 CLC   MCNAME(4),=XL4'FFFFFFFF' *LAST ONE?              AJSW014\n         BE    GDEOJ5D            *YES IT IS                    AJSW014\n         CLC   SMF26CLN(8,R3),MCNAME *IS THIS IT?               AJSW014\n         BE    GDEOJ5C3           *YES IT IS                    AJSW014\n         LA    R5,0(R5,R6)        *BUMP TO NEXT ONE             AJSW014\n         LA    R7,1(R7)           *BUMP TO NEXT ONE             AJSW014\n         B     GDEOJ5C2           *AND AROUND AGAIN             AJSW014\nGDEOJ5C3 STC   R7,JQECLS-JQESTART(0,R1) NEW JQE CLASS           AJSW014\n         DROP  R5                                               AJSW014\nGDEOJ5D  CLC   SMF26CLN(8,R3),JOBCLS *DEFAULT?                  AJSW014\n         BNE   GDEOJ7             *NO - DON'T COMPUTE PRTY      AJSW014\nGDEOJ6   SR    R8,R8              *COMPUTE PRIORITY             AJSW014\n         L     R5,GDXTM           *ESTIMATED EXEC TIME          AJSW014\n         LA    R6,GDXTMT          *  ..  ..                     AJSW014\n         BAL   R7,GDEOJLU         *  ..  ..                     AJSW014\n         L     R5,GDRGN           *REGION REQUEST               AJSW014\n         LA    R6,GDRGNT          *  ..  ..                     AJSW014\n         BAL   R7,GDEOJLU         *  ..  ..                     AJSW014\n         L     R5,GDLNE           *ESTIMATED PRINT LINES        AJSW014\n         LA    R6,GDLNET          *  ..  ..                     AJSW014\n         BAL   R7,GDEOJLU         *  ..  ..                     AJSW014\n         L     R5,GDTPE           *NUMBER TAPE REQUESTS         AJSW014\n         LA    R6,GDTPET          *  ..  ..                     AJSW014\n         BAL   R7,GDEOJLU         *  ..  ..                     AJSW014\n         L     R5,GDDSK           *NUMBER NEW DISK REQ'S        AJSW014\n         LA    R6,GDDSKT          *  ..  ..                     AJSW014\n         BAL   R7,GDEOJLU         *  ..  ..                     AJSW014\n         LA    R8,GDPRTYT(R8)     *  ..                         AJSW014\n         SPACE 1                                                AJSW014\n         PACK  GDCOM(8),0(2,R8)   *PACK COMPUTED PRIORITY       AJSW014\n         MVC   TVTWORKD,GDCOM     *MOVE FOR CONVERSION          AJSW014\n         CVB   R5,TVTWORKD        *MAKE BINARY                  AJSW014\n         ST    R5,GDPRTY          *AND SAVE FOR TRACE           AJSW014\n         MVC   GDCOM(GTRACEL),GTRACE *MOVE LIST FORM OF GTRACE  AJSW014\n         LA    R5,GDCOM           *AND POINT TO IT              AJSW014\n         LA    R6,GDXTM           *POINT TO TRACE DATA          AJSW014\n        GTRACE MF=(E,(R5)),ID=3,DATA=(R6),PAGEIN=YES            AJSW014\n         SPACE 1                                                AJSW014\nGDEOJ7   MVC   GDCOM,GDMSG        *CHANGE PRIORITY              AJSW014\n         MVC   GDCOM+6(4),IDDJOBNO * ..                         AJSW014\n         MVC   GDCOM+13(2),0(R8)   * ..                         AJSW014\n         INTERCOM CONS=DUMMY,TEXT=GDCOM,MSG=NO                  AJSW014\nGDEOJ7P  LM    R2,R9,GDSAVE       *RETURN                       AJSW014\n         B     GDEOJ+4            *  ..                         AJSW014\nGDEOJLU  CLC   GDTBLND,0(R6)      *PRIORITY TABLE LOOKUP        AJSW014\n         BER   R7                 *  ..                         AJSW014\n         C     R5,0(R6)           *  ..                         AJSW014\n         BNHR  R7                 *  ..                         AJSW014\n         A     R8,4(R6)           *  ..                         AJSW014\n         LA    R6,8(R6)           *  ..                         AJSW014\n         C     R8,GDPRTYND        *  ..                         AJSW014\n         BL    GDEOJLU            *  ..                         AJSW014\n         L     R8,GDPRTYND        *  ..                         AJSW014\n         BR    R7                 *  ..                         AJSW014\n         DROP  R2                                               AJSW014\n         EJECT                                                  AJSW014\n*************************************************************** AJSW014\n*              WORK AREAS AND CONSTANTS                       * AJSW014\n*************************************************************** AJSW014\nJMRCLAS  EQU   X'3B'              *JOB CLASS                    AJSW014\nJCTSCHCL EQU   X'C2'              *JOB NUMBER IN BINARY         AJSW014\nSMF26CLS EQU   X'D5'              *JOB CLASS                    AJSW014\nSMF26DEV EQU   X'DC'              *JOB ORIGIN                   AJSW014\nSMF26XTM EQU   X'EC'              *ESTIMATED EXECUTION TIME     AJSW014\nSMF26ELN EQU   X'F0'              *ESTIMATED PRINT LINES        AJSW014\nSMF26CLN EQU   X'12C'             *CLASS NAME                   AJSW014\nGDXTM    EQU   IDDUSAVE+0,4       *ESTIMATED EXECUTION TIME     AJSW014\nGDRGN    EQU   IDDUSAVE+4,4       *REGION REQUEST               AJSW014\nGDLNE    EQU   IDDUSAVE+8,4       *ESTIMATED NUMBER OF LINES    AJSW014\nGDTPE    EQU   IDDUSAVE+12,4      *NUMBER OF TAPE REQUEST'S     AJSW014\nGDDSK    EQU   IDDUSAVE+16,4      *NUMBER OF NEW DISK REQ'S     AJSW014\nGDPRTY   EQU   IDDUSAVE+20,4      *COMPUTED PRIORITY            AJSW014\nGDSAVE   EQU   IDDUSAVE+24,32     *REGISTER 2-9 SAVE AREA       AJSW014\nGDCOM    EQU   IDDUSAVE+56,16     *INTERCOM MSG WORK AREA       AJSW014\n         SPACE 1                                                AJSW014\nGTRACE  GTRACE MF=L,LNG=24,FID=3  *LIST FORM OF GTRACE          AJSW014\nGTRACEL  EQU   *-GTRACE           *LENGTH OF GTRACE DATA LIST   AJSW014\n         SPACE 1                                                AJSW014\nGDDEFTME DC    A(5*60*100)        *5 MINUTE TIME DEFAULT        AJSW014\nGDDEFRGN DC    A(192)             *192K REGION DEFAULT          AJSW014\nGD100    DC    A(100)             *100 CONSTANT                 AJSW014\nGDXTMT   DC    A(300,20,600,20,900,20)   *EST.XTM TABLE         AJSW014\n         DC    A(1800,20,2400,20,3600,20) * ..                  AJSW014\n         DC    C'END-'                    * ..                  AJSW014\n         DC    A(0,0,0,0,0,0)             * ..                  AJSW014\nGDRGNT   DC    A(192,20,512,20,1024,20)  *REGION REQ TABLE      AJSW014\n         DC    C'END-'                   *  ..                  AJSW014\n         DC    A(0,0,0,0,0,0)            *  ..                  AJSW014\nGDLNET   DC    A(10000,2,50000,2,100000,2) *PRINT LINES TABLE   AJSW014\n         DC    C'END-'                   *  ..                  AJSW014\n         DC    A(0,0,0,0,0,0)            *  ..                  AJSW014\nGDTPET   DC    A(0,2,2,2,4,2)            *TAPE COUNT TABLE      AJSW014\n         DC    C'END-'                   *  ..                  AJSW014\n         DC    A(0,0,0,0,0,0)            *  ..                  AJSW014\nGDDSKT   DC    A(0,2,2,2,4,2)            *NEW DISK CNT TABLE    AJSW014\n         DC    C'END-'                   *  ..                  AJSW014\n         DC    A(0,0,0,0,0,0)            *  ..                  AJSW014\nGDTBLND  DC    C'END-'                   *END OF TABLE FLAG     AJSW014\nGDPRTYT  DC    CL20'09090908080807070706' *PRIORITY TABLE       AJSW014\n         DC    CL20'08080807070706060605' * ..                  AJSW014\n         DC    CL20'07070706060605050504' * ..                  AJSW014\n         DC    CL20'06060605050504040403' * ..                  AJSW014\n         DC    CL20'05050504040403030302' * ..                  AJSW014\n         DC    CL20'04040403030302020201' * ..                  AJSW014\n         DC    CL20'03030302020201010101' * ..                  AJSW014\n         DC    CL20'02020201010101010101' * ..                  AJSW014\n         DC    CL20'01010101010101010101' * ..                  AJSW014\n         DC    CL20'01010101010101010101' * ..                  AJSW014\nGDPRTYND DC    A(198)             *MAXIMUM TABLE INCREMENT      AJSW014\nGDTAPE   DC    C'TAPE'                                          AJSW014\nGD3400   DC    C'3400'                                          AJSW014\nGDDISK   DC    C'DISK'                                          AJSW014\nGD2305   DC    C'2305'                                          AJSW014\nGDVIO    DC    C'VIODISK'                                       AJSW014\nGDSYS    DC    C'SYS'             *SYSDA,SYSTSO,ETC.....        AJSW014\nGD33     DC    C'33'              *3330,3340,3350               AJSW014\nGD14     DC    C'14'              *PRIORITY 14                  AJSW014\nGD11     DC    C'11'              *PRIORITY 11                  AJSW014\nGD09     DC    C'09'              *PRIORITY 9                   AJSW014\nGD07     DC    C'07'              *PRIORITY 7                   AJSW014\nGD05     DC    C'05'              *PRIORITY 5                   AJSW014\nGDTP     DC    CL8'TP'            *CLASS=TP                     AJSW014\nGDPROD   DC    CL8'PROD'          *CLASS=PROD                   AJSW014\nGDBMP    DC    CL8'BMP'           *CLASS=BMP'                   AJSW014\nGDSDE    DC    CL8'SDEST'         *CLASS=SDEST                  AJSW014\nGDPDE    DC    CL8'PDEST'         *CLASS=PDEST                  AJSW014\nGDLOAD   DC    CL8'DATALOAD'      *CLASS=DATALOAD               AJSW014\nGDURG    DC    CL8'URGENT'        *CLASS=URGENT                 AJSW014\nGDEXP    DC    CL8'EXPRESS'       *CLASS=EXPRESS                AJSW014\nGDONITE  DC    CL8'OVERNITE'       CLASS=OVERNITE               AJSW014\nGDSTC    DC    CL8'STC'           *CLASS=STC                    AJSW014\nGDTSO    DC    CL8'TSO'           *CLASS=TSO                    AJSW014\nGDDR     DC    CL8'DR'            *SMF26DEV=DR (DISK-RDR)       AJSW014\nGDPC     DC    CL8'$PRDCTL'       *SMF26DEV=$PRDCTL (TSO)       AJSW014\nGDINR    DC    CL8'INTRDR'        *SMF26DEV=INTRDR              AJSW014\nGDMSG    DC    AL1(15)            *INTERCOM MESSAGE             AJSW014\n         DC    CL15'*F,J=NNNN,P=NN'  ..                         AJSW014\n         LTORG ,                                                AJSW014\nUMODNUM  DC    CL7'AJSW014'       *USER NUMBER\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW016": {"ttr": 8973, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW016) /*\n\n   PRINT JOB STATS ON JOB TRAILER PAGE\n                                       */.\n++ VER (Z038) FMID(HJS2215).\n++ SRCUPD(IATUX23) DISTLIB(AJES3SRC) .\n./ CHANGE NAME=IATUX23\n*        USER MODS =                                            AJSW016\n*                                                               AJSW016\n*             - JOB TRAILER PAGE INFORMATION                    AJSW016\n*                                                               AJSW016\n**************************************************************  AJSW016\n*                                                            *  AJSW016\n*        IATUX23 - PRINT TRAILER PAGE INFORMATION            *  AJSW016\n*                                                            *  AJSW016\n**************************************************************  AJSW016\n         IATYJCT ,                                              AJSW016\n         IATYJMR ,                                              AJSW016\n         EJECT                                                  AJSW016\n         AIF   ('&TYPE' NE 'DSECT').NUAXX                       AJSW016\nUX23WKST DC    0X'00'              START OF WORK SPACE          AJSW016\nUX23WORK DC    2D'0'               WORK SPACE                   AJSW016\nUX23GDLN DS    CL(GDLINESL)        PRINT BUILD AREA             AJSW016\nUX23WKND DC    0D'0'               END OF WORK SPACE            AJSW016\nUX23WKLN EQU   *-UX23WKST          SIZE OF USER WORK SPACE      AJSW016\n.NUAXX   ANOP                                                   AJSW016\n         A     R0,=A(UX23WKLN)     ADD SIZE OF USER WORK AREA   AJSW016\n         LA    R2,UX23GDLN         INITIALIZE ALL LINES         AJSW016\n         LM    R3,R5,=A(555,GDLINES,555)    ..                  AJSW016\n         MVCL  R2,R4                 ..                         AJSW016\n         LA    R6,UX23GDLN+222       ..                         AJSW016\n         IATXTOD ,                 GET -> TIME OF DAY           AJSW016\n         MVC   58(2,R6),0(R1)      HH TO PRINT LINE             AJSW016\n         MVC   61(2,R6),2(R1)       MM TO PRINT LINE            AJSW016\n         MVC   64(2,R6),4(R1)        SS TO PRINT LINE           AJSW016\n         IATXTOD BIN                                            AJSW016\n         ST    R1,UX23WORK+12      SAVE RETURNED DATE           AJSW016\n         MVI   FEB+3,28            ASSUME NOT A LEAP YEAR       AJSW016\n         TM    UX23WORK+13,X'01'   IS IT AN ODD YEAR?           AJSW016\n         BC    ALLON,AJS001        YES, CONTINUE                AJSW016\n         TM    UX23WORK+13,X'12'   IS IT A LEAP YEAR?           AJSW016\n         BC    MIXED,AJS001        NO, CONTINUE                 AJSW016\n         MVI   FEB+3,29            SET FEBRUARY FOR 29 DAYS     AJSW016\nAJS001   DS    0H                  DATE 00YYDDD                 AJSW016\n         UNPK  53(5,R6),UX23WORK+12(4) YYDDD TO ZONED           AJSW016\n         MVC   55(3,R6),TVTBLANK   BLANK OUT ZONED DDD          AJSW016\n         MVC   UX23WORK+8(6),TVTZERO CLEAR YY & 4 PRECEEDING    AJSW016\n         CVB   R3,UX23WORK+8       DDD TO BINARY                AJSW016\n         LA    R4,GDTABL           -> DAYS-IN-MONTH TABLE       AJSW016\nGDLOOKUP S     R3,0(R4)            DDD LESS DAYS IN MONTH       AJSW016\n         BNP   GDFND               GOT DAY IN THIS MONTH        AJSW016\n         CLC   GDTABLND,4(R4)      END OF DAYS-IN-MONTH TABLE?  AJSW016\n         BE    GDNOTFND            YES, AN ERROR                AJSW016\n         LA    R4,8(R4)            NO, STEP TO NEXT MONTH       AJSW016\n         B     GDLOOKUP            AND LOOP FOR DATE            AJSW016\nGDFND    A     R3,0(R4)            ADD BACK THIS MONTH'S DAYS   AJSW016\n         MVC   43(3,R6),4(R4)      SET NAME OF MONTH IN PRINT   AJSW016\n         CVD   R3,UX23WORK+8       DAY OF MONTH TO PACKED       AJSW016\n         UNPK  47(2,R6),UX23WORK+8(8) DAY OF MONTH TO ZONED PRT AJSW016\n         OI    48(R6),X'F0'        SET ALL SIGN BITS            AJSW016\n         B     GDGETJCT              ..                         AJSW016\nGDNOTFND MVC   44(6,R6),=C'UNK XX' ERROR CONVERTING DATE        AJSW016\nGDGETJCT PACK  UX23WORK+8(8),WTRDJNO PACK JOB NUMBER            AJSW016\n         CVB   R1,UX23WORK+8       JOB NUMBER TO DECIMAL  ..    AJSW016\n         IATXJCT TYPE=RW,JOBNUM=(R1),ERROR=GDPRINT  GET JCT     AJSW016\n         LR    R4,R1               COPY -> TO JCT               AJSW016\n         USING JCTSTART,R4         JCT MAP ADDRESSABILITY       AJSW016\n         OI    JCTFL8,JCTNCHNG     NO CHANGE MADE TO JCT        AJSW016\n         MVI   UX23WORK,0          SET DIDN'T READ JMR FLAG     AJSW016\n         LA    R1,JCTJMRFD         GET -> JMR FDB               AJSW016\n         USING FDBSTART,R1                                      AJSW016\n         TM    FDBSPFL1,FDBONSP    IS IT ON SPOOL?              AJSW016\n         BC    ALLOFF,GDSETJMR     NO, DONT READ IT             AJSW016\n         DROP  R1                                               AJSW016\n         MVI   UX23WORK,128        YES, SET DID READ JMR FLAG   AJSW016\n         JESREAD FDB=(R1),ID=JMR   READ JMR                     AJSW016\nGDSETJMR L     R5,JCTJMRFD         FINISH UP HEADER LINE        AJSW016\n         USING JMR,R5                                           AJSW016\n         MVC   4(8,R6),SMF26DEV    JOB ORIGIN TO PRINT LINE     AJSW016\n         MVC   101(8,R6),SMF26DEV    ..                         AJSW016\n         MVC   15(20,R6),SMF26NAM  PROGRAMMER NAME TO PRINT LN  AJSW016\n         MVC   78(20,R6),SMF26NAM    ..                         AJSW016\n         CLI   UX23WORK,128        DID WE READ THE JMR          AJSW016\n         BNE   GDRELJCT            NO, DON'T RELEASE IT         AJSW016\n         LA    R1,JCTJMRFD         YES, MUST RELEASE JMR        AJSW016\n         ARELEASE FDB=(R1)         RELEASE JMR                  AJSW016\n         MVI   UX23WORK,0          CLEAR THE FLAG               AJSW016\nGDRELJCT PACK  UX23WORK+8(8),WTRDJNO RELEASE THE JCT            AJSW016\n         CVB   R1,UX23WORK+8       JOBNUMBER TO BINARY          AJSW016\n         IATXJCT TYPE=REL,JOBNUM=(R1),ERROR=GDPRINT  ..         AJSW016\nGDPRINT  LA    R3,5                # LINES TO BE PRINTED        AJSW016\n         LA    R2,UX23GDLN         -> LINES TO PRINT            AJSW016\n         L     R15,=A(UX23S150)    -> MIDDLE OF SUBROUTINE      AJSW016\n         L     R10,=A(UX23SUB)     SET SUBROUTINE BASE ADDR     AJSW016\n         BALR  R9,R15              JUMP TO MIDDLE OF SUBROUTINE AJSW016\n         A     R0,=A(UX23WKLN)     ADD SIZE OF USER WORK AREA   AJSW016\nGDTABL   DC    A(31)               JANUARY                      AJSW016\n         DC    C'JAN'                ..                         AJSW016\nFEB      DC    A(28)               FEBRUARY                     AJSW016\n         DC    C'FEB'                ..                         AJSW016\n         DC    A(31)               MARCH                        AJSW016\n         DC    C'MAR'                ..                         AJSW016\n         DC    A(30)               APRIL                        AJSW016\n         DC    C'APR'                ..                         AJSW016\n         DC    A(31)               MAY                          AJSW016\n         DC    C'MAY'                ..                         AJSW016\n         DC    A(30)               JUNE                         AJSW016\n         DC    C'JUN'                ..                         AJSW016\n         DC    A(31)               JULY                         AJSW016\n         DC    C'JUL'                ..                         AJSW016\n         DC    A(31)               AUGUST                       AJSW016\n         DC    C'AUG'                ..                         AJSW016\n         DC    A(30)               SEPTEMBER                    AJSW016\n         DC    C'SEP'                ..                         AJSW016\n         DC    A(31)               OCTOBER                      AJSW016\n         DC    C'OCT'                ..                         AJSW016\n         DC    A(30)               NOVEMBER                     AJSW016\n         DC    C'NOV'                ..                         AJSW016\n         DC    A(31)               DECEMBER                     AJSW016\nGDTABLND DC    C'DEC'                ..                         AJSW016\nGDLINES  DC    C' '                                             AJSW016\n         DC    110C'*'                                          AJSW016\n         DC    CL110' *'                                        AJSW016\n         DC    C'*'                                             AJSW016\n         DC    CL49' *'                                         AJSW016\n         DC    CL11', 19'                                       AJSW016\n         DC    CL50'.  .'                                       AJSW016\n         DC    C'*'                                             AJSW016\n         DC    CL110' *'                                        AJSW016\n         DC    C'*'                                             AJSW016\n         DC    C' '                                             AJSW016\n         DC    110C'*'                                          AJSW016\nGDLINESN DC    0D'0'               END OF TRLR PRINT DATA       AJSW016\nGDLINESL EQU   GDLINESN-GDLINES    SIZE OF TRLR PRINT DATA      AJSW016\nUMODNUM  DC    CL7'AJSW016'        USER NUMBER\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW017": {"ttr": 9219, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW017) /* DON'T SEND VERIFY MSGS TO MLOG DURING CONNECT\n\n       THIS MOD SUPPRESSES VERIFY MESSAGES FROM MLOG DURING CONNECT\n       PROCESSING (IT WILL FLOOD THE MLOG AND QUEUE IT TO DEPTH).\n                                                                 */ .\n++ VER(Z038) FMID(HJS2215).\n++ SRCUPD(IATMDDR) DISTLIB(AJES3SRC) .\n./ CHANGE NAME=IATMDDR\n* USER MODS:                                                    AJSW017\n*                                                               AJSW017\n*      - ELIMINATE VERIFY MSGS IAT5918 FROM MLOG DURING CONNECT AJSW017\n*                                                               AJSW017\n         TM    MPLFLG,MPIPLING    *IPL IN PROGRESS              AJSW017\n         BC    ALLOFF,AJSW017A    *NO, THEN LOG MESSAGE         AJSW017\n         TM    MPDSPLAY,MPDISALL+MPDISIPL+MPDISMLG *DISPLAY ON? AJSW017\n         BC    ALLOFF,AJSW017B    *NO, BRANCH                   AJSW017\nAJSW017A DS    0H                 *CONTINUE                     AJSW017\nAJSW017B DS    0H                 *CONTINUE                     AJSW017\nUMODNUM  DC    CL7'AJSW017'       *USER NUMBER\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW018": {"ttr": 9221, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD(AJSW018)     /*\n\n              ALLOW  T ALL.... COMMAND\n                                   */.\n++VER(Z038) FMID(HJS2215).\n++SRCUPD(IATCNIN).\n./ CHANGE NAME=IATCNIN\n*        USER MODS =                                            AJSW018\n*                                                               AJSW018\n*             - ALLOWS 'T ALL' COMMAND BY JSERVING COMMAND      AJSW018\n*               TO ALL PROCESSORS VIA MPC TABLES                AJSW018\n*                                                               AJSW018\nNOTCNCL1 DS    0H                                               AJSW018\n         TM    ALLFLAG,FLAGON     *'T ALL' COMMAND?             AJSW018\n         BC    NALLON,KEEPMPC     *NO, DON'T GET NEW MPC        AJSW018\n         ICM   R4,B'1111',MPNEXT-MPCSTART(R4) ->NEXT SYSID      AJSW018\n         BC    ZERO,SENDBSY1       ALL OUT, END                 AJSW018\n         B     NOTCNCL1            CHECK THIS ONE               AJSW018\nKEEPMPC  DS    0H                  GOT A GOOD MPC               AJSW018\nJSERVX1  DS    0H                                               AJSW018\n         CLC   CTCUCB(L'CTCUCB+L'CTCUCB2),TVTZERO               AJSW018\n         BC    NE,JSERVX           CTC EXISTS, DO JSERV         AJSW018\n         TM    MPSYSTEM,MPGLBL     IS THIS THE GLOBAL?          AJSW018\n         BC    ALLOFF,JSERVX2      NO, CAN'T JSERV THIS LOCAL   AJSW018\n         DROP  R4                                               AJSW018\nJSERVX   DS    0H                                               AJSW018\n*        JSERV TEXT=CONMESSG-2,MPC=(R4),DEST=DSTC34,MOD=MODS34J AJSW018\n         JSERV TEXT=CONMESSG-2,MPC=(R4),DEST=DSTC34,            AJSW018X\n               MOD=MODS34J,BUSY=JSERVBSY                        AJSW018\nJSERVX2  DS    0H                                               AJSW018\n         TM    ALLFLAG,FLAGON      'T ALL' COMMAND?             AJSW018\n         BC    ALLON,JSRVLOOP      YES, LOOP THRU MPC'S         AJSW018\nJSRVLOOP DS    0H                  SEND COMMAND TO EACH CPU     AJSW018\n         ICM   R4,B'1111',MPNEXT-MPCSTART(R4) NEXT SYSID        AJSW018\n         BC    NZERO,JSERVX1                                    AJSW018\n         B     SENDBSY1            IF NO MORE, BRANCH           AJSW018\n*        SR    R4,R4               CLEAR TEST REGISTER          AJSW018\nJSERVBSY DS    0H                 *NO STORAGE FOR JSERV         AJSW018\n         TM    ALLFLAG,FLAGON     *'T ALL' COMMAND?             AJSW018\n         BC    NALLON,SENDBSY1    *NO, BRANCH                   AJSW018\n         L     R4,SAVE            *ELSE, LOAD TEST REG AND...   AJSW018\n         TM    ALLFLAG,FLAGON     *'T ALL' COMMAND?             AJSW018\n         BC    NALLON,NOTALL      *NO, BRANCH, ELSE...          AJSW018\n         MVC   CONMESSG+3(3),=C'ALL' *MOVE 'ALL' TO MLOG        AJSW018\n         NI    ALLFLAG,X'FF'-FLAGON  *TURN OFF FLAG             AJSW018\n         B     PASTSYX            *AND BYPASS 'SYX' INSERT      AJSW018\nNOTALL   DS    0H                 *NOT A 'T ALL' COMMAND        AJSW018\nPASTSYX  DS    0H                 *PAST 'SYX' INSERTION         AJSW018\n         NI    ALLFLAG,X'FF'-FLAGON *TURN OFF 'T ALL' FLAG      AJSW018\n         CLC   WDSAVE(4),=C'ALL ' *IS THIS A 'T ALL'?           AJSW018\n         BNE   NORMAL             *NO, BRANCH AND CONTINUE      AJSW018\n         OI    ALLFLAG,FLAGON     *ELSE, RAISE FLAG AND         AJSW018\n         BR    R1                 *RETURN                       AJSW018\nNORMAL   DS    0H                 *CONTINUE                     AJSW018\nALLFLAG  DC    X'00'              *'T ALL' FLAG                 AJSW018\nFLAGON   EQU   X'80'              *'T ALL' FLAG ON              AJSW018\n         DS    0H                 *ALIGNMENT                    AJSW018\nUMODNUM  DC    CL7'AJSW018'       *USER NUMBER\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW020": {"ttr": 9223, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW020) /* ALLOW GENERIC STATUS COMMAND AND OTHER THINGS\n\n       THIS MODIFICATION WILL ALLOW \"GENERIC\" STATUS COMMANDS:\n       THE USER CAN ENTER ST .....* (* CAN BE @,#, OR $) AND\n       JES3 WILL RESPOND AS IF AN 8I J/.....* HAD BEEN DONE.\n       MOD WILL ALSO SEARCH FOR ALL JOBS SUBMITTED BY A USER\n       (RATHER THAN JUST BEGINNING WITH USERID) AND WILL ALSO\n       PREVENT CANCELLING ANY JOB NOT SUBMITTED BY THAT USERID.\n                                                                 */ .\n++VER (Z038) FMID(HJS2215) .\n++SRCUPD(IATUX30) DISTLIB(AJES3SRC) .\n./ CHANGE NAME=IATUX30\n* USER MODS:                                                    AJSW020\n*                                                               AJSW020\n*      - ALLOW GENERIC STATUS AND CHECK JOB OWNERSHIP           AJSW020\n*                                                               AJSW020\n         IATYMCL ,                                              AJSW020\n         EJECT                                                  AJSW020\n*        LA    R15,TSJEFFOK       *THIS LINE COMMENTED BY       AJSW020\n*        ARETURN                  *THIS LINE COMMENTED BY       AJSW020\n         LR    R9,R1              *ESTABLISH PARM LIST BASE     AJSW020\n         USING TSUXLST,R9                                       AJSW020\n         LM    R5,R8,TSUXLST      *ESTABLISH PTRS. AND BASES    AJSW020\n         USING SSCSBGN,R6                                       AJSW020\n         LTR   R7,R7              *REQUEST SELECTION ENTRY?     AJSW020\n         BC    NZERO,IATUX30P     *NO-JOB SELECTION             AJSW020\n         SPACE 3                                                AJSW020\n         NOP   IATUX301 ALLOW ALL STATUS, CANCEL, AND OUTPUT    AJSW020\n         SPACE 3                                                AJSW020\n         CLI   0(R5),MODSTS       *STATUS REQUEST?              AJSW020\n         BNE   IATUX301      *NO, EXIT..ALLOW ALL CANCEL/OUTPUT AJSW020\n         TM    SSCSFLGS,SSCSUSID  *USER ID IN JOBNAME FIELD?    AJSW020\n         BO    IATUX301           *YES..EXIT                    AJSW020\n         LA    R15,SSCSJOBN       *JOBNAME                      AJSW020\n         LA    R14,L'SSCSJOBN-1   *LENGTH MINUS 1 FOR EX INST   AJSW020\nSRCHNAME DS    0H                                               AJSW020\n         EX    R14,TESTNAME       *ANY SPECIAL CHARACTERS       AJSW020\n         BZ    IATUX301           *NO, EXIT IT IS GENERIC SRCH  AJSW020\n         LA    R2,SSCSJOBN+7      *POINT TO LAST CHAR IN NAME   AJSW020\n         CR    R1,R2              *CHAR IN LAST COL?            AJSW020\n         BE    SETSTAR            *YES, MAKE IT A STAR          AJSW020\n         CLI   1(R1),C' '         *IS NEXT CHAR A SPACE?        AJSW020\n         BE    SETSTAR            *YES, MAKE IT A STAR          AJSW020\n         LR    R0,R1              *SAVE ADDR OF SPECIAL CHAR    AJSW020\n         SLR   R0,R15             *FIND POSITION IN JOBNAME     AJSW020\n         LA    R15,1(R1)          *SETUP FOR NEXT PASS          AJSW020\n         SR    R14,R0             *CALC CHARS LEFT TO SCAN      AJSW020\n         BCTR  R14,0                                            AJSW020\n         B     SRCHNAME           *TRY AGAIN                    AJSW020\nTESTNAME TRT   0(1,R15),TRTABLE   *RESULT OF AN EXECUTE         AJSW020\nSETSTAR  MVI   0(R1),C'*'         *SET FOR GENERIC SEARCH       AJSW020\n         B     IATUX301           *NOW EXIT                     AJSW020\nIATUX304 LA    R15,TSJESREJ       *NO-SET REJECT REQUEST        AJSW020\n         B     IATUX302           *EXIT                         AJSW020\n         USING SSSOBGN,R6                                       AJSW020\nIATUX303 TM    SSSOFLG1,SSSOSJBI  *JOBID SPECIFIED?             AJSW020\n         BC    ALLOFF,IATUX304    *NO-REJECT REQUEST            AJSW020\n         USING SSCSBGN,R6                                       AJSW020\nIATUX301 LA    R15,TSJESRTN       *SET JES EXIT AND REENTER     AJSW020\nIATUX302 ARETURN                                                AJSW020\n*        RESTRICT CANCEL TO CANCEL REQUESTS FOR               * AJSW020\nIATUX30P CLI   0(R5),MODSTS       *STATUS REQUEST?              AJSW020\n         BC    NE,IATUX30S        *NO-PROCESS CANCEL/OUTPUT     AJSW020\n         TM    SSCSFLGS,SSCSUSID  *YES-ANY OPERANDS ON REQUEST? AJSW020\n         BC    ALLON,IATUX30R     *NO-GO AUTHORIZE USER         AJSW020\nIATUX30Q LA    R15,TSJOBOK        *YES-IND PROCESS THIS JOB     AJSW020\n         B     IATUX302           *EXIT                         AJSW020\n         USING JQESTART,R7                             @ZA27008 AJSW020\nIATUX30R CLC   JQETUSID,0(R8)     *REQUESTOR=OWNER?    @ZA27008 AJSW020\n         BC    NE,IATUX3OR        *NO THEN REJECT THE JOB       AJSW020\n         SR    R2,R2              *CLEAR REG                    AJSW020\n         IC    R2,JQECLS          *GET JOB CLASS                AJSW020\n         LTR   R2,R2              *IS THERE ONE THERE           AJSW020\n         BZ    IATUX30Q           *NO - ASSUME IT IS A JOB      AJSW020\n         BCTR  R2,0               *MAKE AN OFFSET               AJSW020\n         L     R3,MCLASS          *GET CLASS TABLE ADDRESS      AJSW020\n         USING MCNAME,R3          *ESTABLISH ADDRESSABILITY     AJSW020\n         MH    R2,MCLNG           *POINT INTO MCLASS ARRAY      AJSW020\n         LA    R3,0(R3,R2)        *POINT TO CLASS ENTRY         AJSW020\n         CLC   MCNAME,=CL8'TSO'   *IS THIS ENTRY TSO ?          AJSW020\n         BC    NE,IATUX30Q        *NO  - THEN IT IS A JOB       AJSW020\n         DROP  R3                                               AJSW020\nIATUX3OR DS    0H                                               AJSW020\n         LA    R15,TSJOBREJ       *NO-SET REJECT-CONTINUE SCAN  AJSW020\n         B     IATUX302           *EXIT                         AJSW020\n         USING JCTSTART,R7                             @ZA27008 AJSW020\nIATUX30S CLI   0(R5),MODOTS       *OUTPUT REQUEST?              AJSW020\n         BC    EQ,IATUX30U        *YES-GO PROCESS OUTPUT        AJSW020\n         CLC   JCTTUSID,0(R8)     *NO-REQUESTOR=OWNER?          AJSW020\n         BC    NE,IATUX30T        *YES..REJECT                  AJSW020\n         SLR   R2,R2              *CLEAR R2                     AJSW020\n         IC    R2,CANCLMSG        *LENGTH OF MSG                AJSW020\n         LA    R2,7(R2)           *ALLOW FOR LIST FORM OF MSG   AJSW020\nGETMAIN  AGETMAIN SIZE=(R2),LOC=ANY BUSY=BUSY *GET STORAGE      AJSW020\n*USY     AWAIT TYPE=ON,ECFMASK=FCTAGET,ECFADD=FCTFLAG1          AJSW020\n*        B     GETMAIN            *TRY AGAIN                    AJSW020\nGOT      SH    R2,=H'7'           *GET LENGTH OF MSG ONLY       AJSW020\n         EX    R2,UX30MMSG        *MOVE MSG TO TEMP AREA        AJSW020\n         MVC   37(8,R1),JCTJBNAM  *JOB NAME TO BE CANCELED      AJSW020\n         MVC   46(8,R1),SSCSJOBI  *JOB ID OR BLANKS             AJSW020\n         MVC   16(7,R1),0(R8)     *TSO USER ID                  AJSW020\n         LA    R0,6(R1)           *ADDR OF MSG                  AJSW020\n         ST    R0,0(R1)           *SAVE IN LIST FORM OF MSG     AJSW020\n         LR    R3,R1              *SAVE ADDR OF GETMAIN AREA    AJSW020\n         MESSAGE CLASS=MLG,MF=(E,(R1)) *WRITE MSG TO MLG        AJSW020\n         LA    R0,7(R2)           *GET LENGTH OF GETMAIN AREA   AJSW020\n         APUTMAIN SIZE=(R0),AREA=(R3) *RELEASE STORAGE          AJSW020\n         B     IATUX30Q           *NOW CANCEL THE JOB           AJSW020\nUX30MMSG MVC   6(1,R1),CANCLMSG   *MOVE MSG                     AJSW020\nIATUX30T LA    R15,TSREQREJ       *NO-INDICATE REQUEST REJECT   AJSW020\n         B     IATUX302           *EXIT                         AJSW020\n         USING RQSTART,R7                                       AJSW020\nIATUX30U B     IATUX30Q                                         AJSW020\n         SPACE 3                                                AJSW020\nCANCLMSG DC     AL1(CANCLEND-CANCLMSG)                          AJSW020\n         DC     C'TSO USER XXXXXXX CANCELED JOB XXXXXXXX(XXXXXXXX)......\n               .............................'                   AJSW020\nCANCLEND EQU   *-1                                              AJSW020\n         SPACE 3                                                AJSW020\nTRTABLE  DC   256X'00'                                          AJSW020\n         ORG  TRTABLE+C'@'                                      AJSW020\n         DC   C'@'                                              AJSW020\n         ORG  TRTABLE+C'#'                                      AJSW020\n         DC   C'#'                                              AJSW020\n         ORG  TRTABLE+C'$'                                      AJSW020\n         DC   C'$'                                              AJSW020\n         ORG  ,                                                 AJSW020\n         SPACE 3                                                AJSW020\nUMODNUM  DC   CL7'AJSW020'        *USER NUMBER\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AJSW021": {"ttr": 9226, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW021) /* NJE ACCOUNT MODIFICATIONS:\n\n                  IATUX43  - 'OR' BIT TO INDICATE MORE NJE SECTIONS\n                  IATOSNT  - CALLS GDACCTWR TO BUILD NJE SECTION\n                  IATNTJS  - CALLS GDACCTRD WHEN USER SECTION FOUND\n                  GDACCTRD - MOVE ACCT NUMBER TO SMF26JAF IN JMR\n                  GDACCTWR - MOVE ACCT NUMBER TO USER DEFINED SECTION\n\n   THIS MOD REQS ****** ACFW010 ****** THE NJE ACF2 MOD WHICH SETS THE\n   NJE TRANSMISSION SEQUENCE FOR THE NJE SECTIONS.\n   THIS MOD TO NJE PASSES THE ACCOUNTING INFORMATION IN A USER DEFINED\n   SECTION.\n\n                                                                 */ .\n++ VER(Z038) FMID(HJS2215) REQ(ACFW010) /*                 */ .\n++ JCLIN .\n//GEN11 JOB WC07N0044,'531-0 C SINGER'\n//SG21 EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,RENT,REUS',\n//    UNIT='3350',SER=IPLXXX,N=GEN1,NAME=JES3LIB,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=MVS3.INCLUDE\n//SYSLIN DD *\n   INCLUDE INCLUDE(GDACCTRD)\n   NAME GDACCTRD(R)\n/*\n//SG22 EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,RENT,REUS',\n//    UNIT='3350',SER=IPLXXX,N=GEN1,NAME=JES3LIB,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=MVS3.INCLUDE\n//SYSLIN DD *\n  INCLUDE INCLUDE(GDACCTWR)\n  NAME GDACCTWR(R)\n/*\n++ SRCUPD(IATOSNT) .\n./ CHANGE NAME=IATOSNT\n         IATXCUE EP=GDACCTWR,ALOAD=YES  *CALL GD PRG. WRITE OUT AJSW021\n*                                  ACCT NMBR IN SEPARATE RECORD AJSW021\n         ACLOSE FDB=WRXDSFDB       CLOSE OUTPUT FILE            AJSW021\n*                                  DELETED BY 2.1.5 CONVERSION  AJSW021\n*                                  DELETED BY 2.1.5 CONVERSION  AJSW021\nUMODNUM  DC     CL7'AJSW021'\n++ SRCUPD(IATNTJS) .\n./ CHANGE NAME=IATNTJS\n          CLI   9(R7),X'F0'       *GD'S HEADER?                 AJSW021\n          BNE   NOTGD             *NO..CONTINUE ON              AJSW021\n          IATXCUE EP=GDACCTRD,ALOAD=YES *CALL GD PRG. READ...   AJSW021\n*                                 ..INCOMING HEADER & FIND ACCT AJSW021\nNOTGD     DS    0H                                              AJSW021\nUMODNUM   DC    CL7'AJSW021'\n++ SRCUPD(IATUX43) .\n./ CHANGE NAME=IATUX43\n         USING NJHSTART,R1                                      AJSW021\n         USING WRDATA,R13                                       AJSW021\n*        LA    R15,4               SET FOR DUMMY USER EXIT      AJSW021\n*        CLM   R0,8,=X'00'        *FIRST SEGMENT OF HEADER?     AJSW021\n*        BNE   RETURN             *NO, BRANCH                   AJSW021\n*        MVC   NJHGPRGN,WRPROGNM  *MOVE IN PROGRAMMER NAME FLD  AJSW021\nRETURN   DS    0H                                               AJSW021\n         OI    3(R1),X'80'        *SPECIFY MORE SECTIONS FOLLOW AJSW021\n         SLR   R15,R15            *RETURN                       AJSW021\nUMODNUM  DC    CL7'AJSW021'                                     AJSW021\n++ SRC(GDACCTRD) DISTLIB(ASRCLIB) .\nGDACCTRD TITLE '*** NJE ACCOUNT HEADER MODULE *** GDACCTRD'\nGDACCTRD CSECT\nGDACCTRD AMODE 31\nGDACCTRD RMODE ANY\n         IATYREG\n         EJECT\n         IATYEQU\n         EJECT\n         IATYFCT\n         EJECT\n         IATYNWR\n         EJECT\n         IATYJCT\n         EJECT\n         IATYRSQ\n         EJECT\n         IATYJMR\n         EJECT\n         IATYTVT\n         EJECT\n         IATYJDS\n         EJECT\n         IATYNDT\n         EJECT\n         IATYNJH\n         EJECT\n         IATYCNS TYPE=INPUT\n         EJECT\n         IECDIOSB IOSIOSBE=YES\n         EJECT\n         IHAPSA\n         EJECT\nGDACCTRD CSECT\n         USING NJEDATA,R13         IATNTJS WORKSPACE ADDRBLTY\n         USING *,R15               TEMP CSECT ADDRESSABILITY\n         IATYMOD BR=YES\n         LR    R10,R15             EP ADDRESS FOR USE AS BASE\n         DROP  R15                 VOLATILE BASE REGISTER\n         USING GDACCTRD,R10        PERM CSECT ADDRESSABILITY\n         L     R7,DPRSSBFR         -> DECOMPRESSION WORK AREA\n         CLC   GDRECORD,6(R7)      INTERESTED IN THIS RECORD?\n         BNE   RETURN              NO, EXIT NOW\n         USING GDWORK,R7           YES, MAP AREA\n         L     R4,AOPJMR           -> SMF JMR\n         USING JMR,R4              JMR ADDRESSABILITY\n         LA    R3,DPRSSWRK         -> DECOMPRESSED RECORD\n         USING NJHSTART,R3         HEADER ADDRESSABILITY\n         MVC   SMF26DEV,NJHGORGN   MOVE ORIGIN NODE TO DEVICE\n         MVC   SMF26NJI,NJHGORGR   MOVE SECONDARY ORGIN IN\n         AH    R4,SMF26LN1         ALLOW FOR DESC SECTION\n         AH    R4,SMF26LN2         ALLOW FOR EVENT SECTION\n         MVC   SMF26JAF,ACCTDATA   MOVE ACCOUNTING DATA IN\n         DROP  R3                  NJE HEADER ADDRBLTY\n         DROP  R7                  GD ACCT HEADER ADDRBLTY\nRETURN   DS    0H\n         SLR   R15,R15             SET RETURN CODE REGISTER\n         ARETURN                   RETURN TO IATNTJS\n         LTORG\n         EJECT\nDDNAME   DC    16C' ',C'*NJEJBHD'\nGDRECORD DC    X'F001',C'ACCT'     USER TYPE F0 MOD 1 AND 'ACCT'\n         LTORG\nGDWORK   DSECT\nGDACCT   DS    0D\n         GDACCT1 ,                 USER NJE ACCT MACRO\nGDWORKLN EQU   *-GDWORK            LENGTH OF WORK AREA\nGDACCTRD CSECT\nUMODNUM  DC    CL7'AJSW021'\nAPARNUM  DC    CL7' '\nPTFNUM   DC    CL7'SP215'\n         END   GDACCTRD\n++ SRC(GDACCTWR) DISTLIB(ASRCLIB) .\nGDACCTWR TITLE '*** NJE ACCOUNT HEADER MODULE *** GDACCTWR'\nGDACCTWR CSECT\nGDACCTWR AMODE 31\nGDACCTWR RMODE ANY\n         SPACE 2\n         IATYREG\n         EJECT\n         IATYEQU\n         EJECT\n         IATYFCT\n         EJECT\n         IATYNWR\n         EJECT\n         IATYJCT\n         EJECT\n         IATYRSQ\n         EJECT\n         IATYJMR\n         EJECT\n         IATYTVT\n         EJECT\n         IATYDAT                                                AJSF062\n         EJECT\n         IATYFDB                                                AJSF062\nGDACCTWR CSECT\n         USING *,R15\n         IATYMOD BR=YES\n         DROP  R15\n         USING GDACCTWR,R10\n         USING WRDATA,R13\n         LR    R10,R15            *SET UP BASE ADDR\nGETMAIN  DS    0H\n         LA    R0,ACCTBLEN        *OUR SEG. SIZE\n         AGETMAIN SIZE=(R0),                                           X\n               LOC=(ANY,ANY)\nWAIT     DS    0H\n*        AWAIT TYPE=ON,ECFMASK=FCTAGET,\n*              ECFADD=FCTFLAG1\n*        B     GETMAIN\nCONTINUE DS    0H\n         LR    R9,R1              *SAVE ADDR\n         USING GDDATA,R9          *MAKE ADDRESSABLE\n         XC    0(ACCTBLEN,R9),0(R9) *CLEAR TO ZEROES\n         LA    R0,ACCTBLEN        *LENGTH OF BUFFER\n         STH   R0,ACCTBSIZ        *STORE IN BUFFER\n*---------------------------------------------------------------------*\n* CDSC MODIFICATIONS TO WDSC NJE ACCOUNTING ROUTINE START HERE        *\n*---------------------------------------------------------------------*\n******** MVI   ACCTBSIZ+3,X'02'   *TRANMISSION SEQ NUMBER       AJSF062\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*     CODE TO MAKE WDSCE HEADER MODE COMPATABLE WITH CESWAL NJE NODE. *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         LA    R0,2               SET DEFAULT XMISSION SEQ VAL  AJSF062\n         BC    0,SKIP00           SWITCH FOR CHECKOUT           AJSF062\n         L     R15,CMPFDB         GET CURRENT FDB POINTER       AJSF062\n         USING FDBSTART,R15                                     AJSF062\n         USING DATSTART,R5                                      AJSF062\n         ICM   R14,15,FDBBPTR     GET CURRENT BUFF POINTER      AJSF062\n         TM    FDBFLAG2,FDBLOCAT  HAS ALOCATE BEEN ISSUED       AJSF062\n         BC    ALLOFF,SKIP00      BIN. IGNORE CHECK             AJSF062\n         CLC   4(6,R14),CMPBLKHD  HAVE THE HEADER PREFIX        AJSF062\n         BC    NE,SKIP00          BIN. IGNORE CHECK             AJSF062\n         LR    R5,R14             CURRENT BUFFER POINTER TO R5  AJSF062\n         TM    FDBFLAG1,FDBSPLIT  IS THE DATA SPLIT (2 BUFFERS) AJSF062\n         BC    ALLON,SPLT00       BIY. CONTINUE                 AJSF062\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*   PATH IF 'ABLOCKED' DATA AND 'ALOCATE' AREA ARE IN SAME BUFFER.    *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SH    R14,BUFSZ          CURRENT - BUFSIZE             AJSF062\n         AH    R14,FDBRL          + ROOM LEFT = TOP OF BUFFER   AJSF062\n         LA    R15,DATFSIZE       GET LENGTH OF PREFIX          AJSF062\n         SR    R14,R15            POINT TO TOP OF DAT           AJSF062\n         BC    15,SPLT05          CONTINUE                      AJSF062\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*   PATH IF 'ABLOCKED' DATA AND 'ALOCATE' AREA NOT IN SAME BUFFER.    *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\nSPLT00   EQU   *                                                AJSF062\n         LA    R14,DATCC-DATID(R0) LENGTH OF DAT PREFIX (FIXED) AJSF062\n         SR    R5,R14             POINT TO TOP OF DAT           AJSF062\n         L     R14,DATPREV        GET PREV BUFFER POINTER       AJSF062\n         DROP  R5                                               AJSF062\n         LTR   R14,R14            HAVE ONE                      AJSF062\n         BC    ZERO,SKIP00        BIN. IGNORE CHECK             AJSF062\n         USING DATSTART,R14                                     AJSF062\n         SH    R14,BUFSZ          CURRENT - BUFSIZE             AJSF062\n         AH    R14,FDBRL          + ROOM LEFT = TOP OF BUFFER   AJSF062\n         DROP  R15                + ROOM LEFT = TOP OF BUFFER   AJSF062\n         LA    R15,DATFSIZE       GET LENGTH OF PREFIX          AJSF062\n         SR    R14,R15            POINT TO TOP OF DAT           AJSF062\n         LA    R5,DATFSIZE(R5)    BUMP TO PAST PREFIX           AJSF062\n         CLM   R5,15,DATNEXT      'NEXT' IN PREV = COMPUTED     AJSF062\n         BC    NE,SKIP00          BIN. IGNORE CHECK             AJSF062\nSPLT05   EQU   *                                                AJSF062\n         CLC   0(4,R14),=C'DAT '  IS IT A DAT EYECATCHER        AJSF062\n         BC    NE,SKIP00          BIN. IGNORE CHECK             AJSF062\n         SLR   R15,R15            PREP WORK REG                 AJSF062\n         SLR   R5,R5              PREP WORK REG                 AJSF062\nLOOP00   EQU   *                                                AJSF062\n         ICM   R15,7,DATCC+1      GET CC TO R15  (JES 1.3.4)    AJSF062\n         LTR   R15,R15            HAVE ONE                      AJSF062\n         BC    ZERO,SKIP00        BIN. IGNORE CHECK             AJSF062\n         CLC   DATMRFDT(2),=X'1002' IS IT A XMISSION RECORD     AJSF062\n         BC    NE,SKIP00          BIN. IGNORE CHECK             AJSF062\n         CLI   DATMRFDT+6,X'C0'   IS IT A HEADER RECORD         AJSF062\n         BC    NE,SKIP00          BIN. IGNORE CHECK             AJSF062\n         TM    DATMRFDT+11,X'80'  ARE SEGMENTS TO FOLLOW        AJSF062\n         BC    ALLOFF,SKIP00      BIN. IGNORE CHECK             AJSF062\n         LA    R0,1(R5)           SET NEXT SEQ NO.              AJSF062\n         IC    R5,DATMRFDT+11     GET XMISSION SEQ NO.          AJSF062\n         N     R5,=X'0000007F'    RESET FLAG BIT                AJSF062\n         LA    R5,1(R5)           BUMP FOR NEXT SEQ             AJSF062\n         CR    R0,R5              CORRECT SEQ                   AJSF062\n         BC    NE,SKIP00          BIN. IGNORE CHECK             AJSF062\n         AR    R14,R15            BUMP TO NEXT RECORD IN BUFF   AJSF062\n         DROP  R14                                              AJSF062\n         BC    15,LOOP00          LOOP THRU                     AJSF062\nSKIP00   EQU   *                                                AJSF062\n         STC   R0,ACCTBSIZ+3      * XMISSION SEQ NO.            AJSF062\n*---------------------------------------------------------------------*\n* CDSC MODIFICATIONS TO WDSC NJE ACCOUNTING ROUTINE END HERE          *\n*---------------------------------------------------------------------*\n         LA    R0,ACCTBLEN-4      *LENGTH OF RECORD\n         STH   R0,ACCTRSIZ        *SAVE IN RECORD\n         MVI   ACCTUTYP,X'F0'     *OUR SEG. TYPE\n         MVI   ACCTUTYP+1,X'01'   *OUR MOD. TYPE\n         MVC   GDACCTID,=CL4'ACCT' *EYE-CATCHER\n         MVC   GDCENTER(8),HOMENODE *HOME (LOCAL) NODE\n         L     R5,FCTRQAD         *GET RSQ ADDR\n         USING RQSTART,R5\n         JESREAD FDB=RQJMRFDB,    *GET JMR                             X\n               ID=JMR\n         L     R6,RQJMRFDB\n         USING JMR,R6\n         LA    R6,SMF26LN1\n         USING SMF26LN1,R6\n         AH    R6,SMF26LN1        *PAST DESC SECTION\n         USING SMF26LN2,R6\n         AH    R6,SMF26LN2        *PAST EVENTS SECTION\n         USING SMF26LN3,R6        *WE WANT ACTUAL SECTION\n         MVC   ACCTDATA,SMF26JAF  *GET ACCOUNTING DATA\n         ARELEASE FDB=RQJMRFDB    *RELEASE JMR\n         DROP  R6,R5\n         SPACE 1\n*-----            WE MUST NOW COMPRESS THE DATA                  -----*\n*----- ONLY CHANGE PARMS WHICH CHANGED FROM IATOSNT'S COMPRESS   -----*\n         SPACE 1\n         ST    R9,CMPFIRST        *PTR TO FIRST CHAR TO BE COMPRESSED\n         LA    R0,ACCTBLEN        *OUR SEG. LENGTH\n         AR    R0,R9\n         BCTR  R0,0               *PTR TO LAST CHAR TO BE COMPRESSED\n         ST    R0,CMPLAST\n         LA    R1,CMPRSPRM        *COMPRESSION PARMS NEEDED FOR CALL\n         L     R15,WRCMPRSA       *ADDRESS OF COMPRESSION ROUTINE\n         BALR  R14,R15            *GO DO IT\n         LA    R0,ACCTBLEN        *LENGTH OF WORK AREA\n         LR    R1,R9              *ADDRESS OF WORK AREA\n         APUTMAIN SIZE=(0),AREA=(R1) *FREE WORK AREA\n         SLR   R15,R15\n         ARETURN                  *RETURN TO IATOSNT\n         LTORG\n         EJECT\nGDDATA   DSECT\n         GDACCT1 ,                *USER NJE ACCOUNT MACRO\nGDACCTWR CSECT\nUMODNUM  DC    CL7'AJSW021'\nAPARNUM  DC    CL5' '\nPTFNUM   DC    CL5'SP215'\n         END   GDACCTWR\n++ MAC(GDACCT1)  DISTLIB(AJES3MAC) SYSLIB(JES3MAC) .\n         MACRO ,                                                AJSW021\n         GDACCT1 ,                                              AJSW021\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * AJSW021\n*                                                             * AJSW021\n*    GD NJE HEADER RECORD                                     * AJSW021\n*                                                             * AJSW021\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * AJSW021\nACCTBSIZ DS    H                  *BUFFER BLKSIZE               AJSW021\n         DS    H                  *FLAGS AND TRANS SEQ NUMBER   AJSW021\nACCTRSIZ DS    H                  *RECORD LENGTH OF SEGMENT     AJSW021\nACCTUTYP DS    X'F0'              *SEGMENT TYPE                 AJSW021\n         DS    X'01'              *MODIFICATION NUMBER          AJSW021\nGDACCTID DS    CL4'ACCT'          *EYE CATCHER                  AJSW021\nGDCENTER DS    CL8'  '            *HOME NODE NAME               AJSW021\nACCTDATA DS    CL42               *ACCOUNTING DATA              AJSW021\n         DS    CL18               *RESERVED FOR/BY USER         AJSW021\nACCTBLEN EQU   *-ACCTBSIZ         *LENGTH OF ENTIRE BLOCK       AJSW021\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW022": {"ttr": 9474, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW022) /* DECREASE THE MULTILEAVING DELAY CONSTANT :\n\n       THIS MODIFICATION DECREASES THE JES MULTILEAVING DELAY\n       CONSTANT FROM 1 SECOND TO .50 SECOND. IT IS HOPED THAT\n       THIS WILL IMPROVE THE PERFORMANCE OF INTELIGENT WORKSTATIONS.\n                                                                 */ .\n++ VER(Z038) FMID(HJS2215).\n++ MACUPD(IATYRJP) DISTLIB(AJES3MAC) .\n./ CHANGE NAME=IATYRJP\n*DCTDELAY DC    F'100'             LINE DELAY MULTILEAVING      AJSW022\nDCTDELAY DC    F'050'             *LINE DELAY MULTILEAVING      AJSW022\n++ SRCUPD(IATRJM5) DISTLIB(AJES3SRC) .\n./ CHANGE NAME=IATRJM5\n*                                                               AJSW022\n* USER MODS:                                                    AJSW022\n*                                                               AJSW022\n*      - CHANGE MULTILEAVING DELAY TO .50 SECONDS               AJSW022\n*        (THIS REQUIRES REASSEMBLY ONLY SINCE THE               AJSW022\n*        CHANGE IS AN ADDED FIELD IN MACRO IATYRJP)             AJSW022\n*                                                               AJSW022\nUMODNUM  DC    CL7'AJSW022'       *USER NUMBER\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW023": {"ttr": 9476, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW023) /* MAKE TSO STATUS RETURN JOBNAMES WITH IATUX30.\n\n       THIS MODIFICATION WILL MAKE TSO STATUS RETURN THE JOBNAME\n       IN THE FIRST LINE OF MESSAGE EVEN IF IATUX30 IS IN USE,\n       PROVIDED THAT THE JOBNAME BEGINS WITH THE USERID.\n       WILL ALSO PROVIDE OUR OWN SECOND LEVEL MESSAGE FOR ALL\n       JOBS WHICH INCLUDES THE ACTIVE SCHEDULER ELEMENT AND ITS\n       STATUS (SIMILAR TO RESPONSE TO AN *I J=JOBNAME COMMAND) .\n                                                                 */ .\n++ VER(Z038) FMID(HJS2215).\n++ SRCUPD(IATGRWQ) DISTLIB(AJES3SRC) .\n./ CHANGE NAME=IATGRWQ\n* USER MODS =                                                   AJSW023\n*                                                               AJSW023\n*      - RETURN NEW SECOND LEVEL MESSAGE TO STATUS              AJSW023\n*                                                               AJSW023\n         IATYRSQ                                                AJSW023\n         EJECT                                                  AJSW023\n         IATYOSS                                                AJSW023\n         EJECT                                                  AJSW023\n         EJECT                                                  AJSW023\n*-------------------------------------------------------------* AJSW023\n*        NOW .... AFTER ALL THE ABOVE IBM CODE WE WILL        * AJSW023\n*        PUT THE FULL JOBNAME IN THE FIRST LEVEL MESSAGE      * AJSW023\n*        IF IT IS POSSIBLE (JOBNAME BEGINS WITH USERID)       * AJSW023\n*        AND BUILD OUR OWN SECOND LEVEL MESSAGE FOR ALL       * AJSW023\n*        JOBS (NOT JUST \"TSO\" JOBS).                          * AJSW023\n*-------------------------------------------------------------* AJSW023\n         SPACE 1                                                AJSW023\n*-------------------------------------------------------------* AJSW023\n*        FIX UP FIRST LEVEL MESSAGE                           * AJSW023\n*-------------------------------------------------------------* AJSW023\n         SR    R1,R1               CLEAR REG                    AJSW023\n         IC    R1,SSCSULEN         GET USERID LENGTH            AJSW023\n         BCTR  R1,0                MINUS 1 FOR EX               AJSW023\n         EX    R1,CMPRUID          JOBNAME BEGIN WITH UID       AJSW023\n         BNE   GDWLEV2             NO - SKIP MOVE OF JOBNAME    AJSW023\n         LA    R1,1(R1,R5)         POINT TO LAST CHARACTER      AJSW023\n         CLI   0(R1),C' '          ANY LAST CHARACTER?          AJSW023\n         BE    GDWLEV2             NO - GO DO 2ND LEVEL MSG     AJSW023\n         MVC   SSCSUJOB,0(R1)      MOVE IN JOBNAME CHARACTER    AJSW023\n         SPACE 1                                                AJSW023\n*-------------------------------------------------------------* AJSW023\n*        REPLACE/GENERATE SECOND LEVEL MESSAGE FOR ALL        * AJSW023\n*-------------------------------------------------------------* AJSW023\nGDWLEV2  TM    SSCSFLG1,SSCSSECL   SECOND LEVEL ALREADY THERE?  AJSW023\n         BO    GDWBLNKS            YES, JUST BLANK IT OUT       AJSW023\n         TM    TSFLAG1,TSOOVFL     NO, IS THERE ROOM FOR SECOND AJSW023\n         BC    ALLON,WTQ0745       NO, USE FAST PATH THRU       AJSW023\n         SH    R3,OLDSIZE          POINT TO NEW AREA            AJSW023\n         MVC   OLDNOTHR(IAT8969S),OLDMODEL MOVE MSG MODEL       AJSW023\n         OI    SSCSFLG1,SSCSSECL   INDICATE SECOND LEVEL MSG    AJSW023\nGDWBLNKS MVI   IAT8969,C' '        INSURE ALL BLANKS            AJSW023\n         MVC   IAT8969+1(LIAT8969-1),IAT8969 MOVE IN BLANKS     AJSW023\n         SPACE 1                                                AJSW023\n         MVC   IAT8969(4),=CL4'JOB ' BEGINNING OF NEW MESSAGE   AJSW023\n         SPACE 1                                                AJSW023\n         LH    R1,JQEJNO           GET JOB NUMBER               AJSW023\n         CVD   R1,FCTWORK          MAKE DECIMAL                 AJSW023\n         UNPK  FCTWORK(4),FCTWORK+5(3) MAKE PRINTABLE           AJSW023\n         OI    FCTWORK+3,X'F0'     INSURE CORRECT SIGN          AJSW023\n         MVC   IAT8969+4(4),FCTWORK PUT JOB NUMBER IN MESSAGE   AJSW023\n         SPACE 1                                                AJSW023\n         MVC   IAT8969+9(L'JCTJBNAM),0(R5) PUT JOBNAME IN MSG   AJSW023\n         SPACE 1                                                AJSW023\n*-------------------------------------------------------------* AJSW023\n*        FIND JOBS OWNER OR IF NONE THEN ORIGIN               * AJSW023\n*-------------------------------------------------------------* AJSW023\n         LA    R5,IAT8969+18       POINT TO CURRENT OFFSET MSG  AJSW023\n         LA    R6,7                NUMBER OF CHARACTERS         AJSW023\n         CLC   JQETUSID,=CL8' '    ANY OWNING USERID?           AJSW023\n         BE    GDWORGID            NO, USE ORIGIN INSTEAD       AJSW023\n         CLC   JQETUSID(4),=F'0'   ANY OWNING USERID?           AJSW023\n         BE    GDWORGID            NO, USE ORIGIN INSTEAD       AJSW023\n         MVC   0(6,R5),=C'OWNER('  MOVE IN BEGINNING OF MSG     AJSW023\n         LA    R15,JQETUSID        ADDRESS OF USERID            AJSW023\n         B     UIDLOOP             AND GO GET IT                AJSW023\nGDWORGID MVC   0(6,R5),=C'ORGIN('  MOVE IN BEGINNING OF MSG     AJSW023\n         CLC   JQEORG,=CL8' '      IS ORIGIN BLANK ALSO?        AJSW023\n         BE    NOORGN              YES, G                       AJSW023\n         CLC   JQEORG(4),=F'0'     IS ORIGIN ZEROS?             AJSW023\n         BE    NOORGN              YES, GO USE NONE             AJSW023\n         LA    R15,JQEORG          ADDRESS OF ORIGIN            AJSW023\n         B     UIDLOOP             GO FIND LENGTH               AJSW023\nNOORGN   LA    R15,=CL8'UNKNOWN'   NO OWNER/ORIGIN              AJSW023\n         LA    R6,6                LENGTH MINUS ONE             AJSW023\n         B     GOTIT               AND GO PUT IN MESSAGE        AJSW023\nUIDLOOP  LA    R1,0(R15,R6)        ADDRESS OF CHAR IN UID/ORG   AJSW023\n         CLI   0(R1),C' '          BLANK?                       AJSW023\n         BNE   GOTIT               NO, GOT LENGTH               AJSW023\n         BCT   R6,UIDLOOP          ANY MORE?                    AJSW023\nGOTIT    EX    R6,UIDMOVE          MOVE USERID.ORG TO MSG       AJSW023\n         LA    R5,7(R5,R6)         GET ADDRESS OF END OF MSG    AJSW023\n         MVC   0(2,R5),=C'),'      MOVE IN CLOSING PAREN,       AJSW023\n         LA    R5,2(R5)            POINTER TO NEXT FIELD        AJSW023\n         EJECT                                                  AJSW023\n*-------------------------------------------------------------* AJSW023\n*        FIND THE JOB'S ACTIVE SE IN DSP DICTIONARY           * AJSW023\n*-------------------------------------------------------------* AJSW023\n         L     R6,DSPDIC                                        AJSW023\n         USING DSPSTART,R6                                      AJSW023\n         IC    R2,JQESTAT1         CURRENT DSP NUMBER           AJSW023\nGDW0010  CLI   DSPNAME,X'FF'       ANY LEFT?                    AJSW023\n         BC    EQ,GDW0011          NO, ERROR                    AJSW023\n         CLM   R2,B'0001',DSPNO    THIS DSP DICT ENTRY MATCH?   AJSW023\n         BC    EQ,GDW0012          YES, BRANCH                  AJSW023\n         LA    R6,DSPEND           NO, GET NEXT ENTRY           AJSW023\n         B     GDW0010             AND LOOP                     AJSW023\nGDW0011  MVC   0(8,R5),=CL8'UNKNOWN'  NO SE'S --- DON'T KNOW    AJSW023\n         B     GDW0100             ISSUE MSG                    AJSW023\nGDW0012  LA    R1,8                SET MAX LGTH                 AJSW023\n         LA    R15,DSPNAME+7       POINT TO LAST CHAR           AJSW023\nGDW0013  CLI   0(R15),C' '         IS IT BLANK?                 AJSW023\n         BC    NE,GDW0014          NO, GOT LAST CHARACTER       AJSW023\n         BCTR  R15,R0              YES, BACK UP ONE CHARACTER   AJSW023\n         BCT   R1,GDW0013          LOOP FOR LENGTH OF DSPNAME   AJSW023\nGDW0014  BCTR  R1,0                                             AJSW023\n         EX    R1,MVEDSPNM         FROM DSPDC TO MSG (R5)       AJSW023\n         CLM   R2,B'0001',DNMMAIN  IS IT ON MAIN?               AJSW023\n*                                  REPLACED                     AJSW023\n         BC    NE,GDW0015          NO, BRANCH                   AJSW023\n         TM    JQESTAT2,SEACTIVE   IS IT ACTIVE?                AJSW023\n         BC    ALLON,GDWMAIN       YES, BRANCH                  AJSW023\nGDW0015  TM    JQESTAT2,SEACTIVE+SERESCH ACTIVE OR RESCHDUL?    AJSW023\n         BC    NALLOFF,GDW0030     YES, BRANCH                  AJSW023\n         TM    JQEFLG1,JQEDEL      MARKED DELETE ONLY           AJSW023\n         BC    ALLOFF,GDW0100      PRINT DSP NAME ONLY          AJSW023\n         MVC   0(8,R5),=CL8'DELETE'  SHOW DELETE ONLY           AJSW023\n         B     GDW0100             AND CONTINUE                 AJSW023\n         SPACE 1                                                AJSW023\n*-------------------------------------------------------------* AJSW023\n*        EXAMINE DSP AND SHOW STATUS IF OBTAINABLE            * AJSW023\n*-------------------------------------------------------------* AJSW023\nGDW0030  LA    R5,1(R1,R5)         POINT TO NEXT FIELD          AJSW023\n         MVC   0(2,R5),=CL2'(*'    SHOW DSP FAILED              AJSW023\n         LA    R5,1(R5)            POINT AT STATUS CHAR         AJSW023\n         TM    JQESTAT2,SEDSPAB    DID IT FAIL?                 AJSW023\n         BC    ALLON,GDW0090       YES                          AJSW023\n         MVI   0(R5),C'S'          ASSUME SPEC RESCHEDULE       AJSW023\n         ICM   R1,B'1111',JQERESQ  -> RESQ                      AJSW023\n         BC    ZERO,GDW0032        NO RESQ, INDICATE 'A' OR 'R' AJSW023\n         USING RQSTART,R1                                       AJSW023\n         TM    RQFLG7,RQJSSPR      SPEC RESCHED?                AJSW023\n         BC    ALLON,GDW0090       YES, GO PRINT                AJSW023\nGDW0031  CLM   R2,B'0001',DNMOUTPT OUTPUT SERV?                 AJSW023\n         BC    NE,GDW0032          NO, NORM PROCESSING          AJSW023\n         CLI   RQINDEX,RQOUTQUE    WAITING?                     AJSW023\n         BC    NE,GDW0032          NO, NORMAL PROCESSING        AJSW023\n         MVI   0(R5),C'P'          MARK PENDING A WRITER        AJSW023\n         USING OSSSTART,R15                                     AJSW023\n         ICM   R15,B'1111',RQOSSTOP -> FIRST OSS                AJSW023\n         BC    ZERO,GDW0090        PENDING IF NO OSS            AJSW023\nGDW0031A CLC   OSSSCHED,TVTZERO    SCHED COUNT ZERO?            AJSW023\n         BC    EQ,GDW0031B         YES, CHECK NEXT ENTRY        AJSW023\n         TM    OSSFLAG1,OSSHOLD    DATASET HELD?                AJSW023\n         BC    ALLOFF,GDW0031C     NO, GO SHOW ON WRITER        AJSW023\nGDW0031B ICM   R15,15,OSSCHAIN     GET NEXT OSS                 AJSW023\n         BC    NZERO,GDW0031A      GO CHECK SCHED COUNT         AJSW023\n         B     GDW0090             NO, GO PRINT MSG             AJSW023\n         DROP  R15                                              AJSW023\nGDW0031C MVI   0(R5),C'W'          MARK ACTIVE ON WRITER        AJSW023\n         B     GDW0090             GO PRINT MSG                 AJSW023\nGDW0032  MVI   0(R5),C'A'          SET TO ACTIVE                AJSW023\n         TM    JQESTAT2,SEACTIVE   IS IT ACTIVE?                AJSW023\n         BC    ALLON,GDW0090       YES, BRANCH                  AJSW023\n         MVI   0(R5),C'R'          SET TO RESCHEDULE            AJSW023\n         B     GDW0090                                          AJSW023\n         EJECT                                                  AJSW023\n*-------------------------------------------------------------* AJSW023\n*        DSP IS MAIN - USE RESQ TO FIND ACTIVE ENTRY          * AJSW023\n*-------------------------------------------------------------* AJSW023\nGDWMAIN  LA    R5,1(R1,R5)         POINT TO NEXT FIELD          AJSW023\n         MVI   0(R5),C'('          INSERT IT                    AJSW023\n         LA    R5,1(R5)            POINT PAST '('               AJSW023\n         L     R1,JQERESQ          GET RESQ ADDR                AJSW023\n         MVI   0(R5),C'C'          SET COMPLETE                 AJSW023\n         LTR   R1,R1               DOES RES Q STILL EXIST?      AJSW023\n         BC    ZERO,GDW0090        NO, BRANCH                   AJSW023\n         SR    R6,R6                                            AJSW023\n         IC    R6,RQINDEX          GET RES Q INDEX              AJSW023\n         SRL   R6,2                DIVIDE BY FOUR               AJSW023\n         LA    R6,RNDXTYPE(R6)     POINT TO PROPER CHARACTER    AJSW023\n         MVC   0(1,R5),0(R6)       INSERT RES Q TYPE            AJSW023\n         DROP  R1                                               AJSW023\n         SPACE 1                                                AJSW023\nGDW0090  MVI   1(R5),C')'          PUT IN CLOSING PAREN         AJSW023\n         B     GDW0100             RETURN WITH MESSAGE          AJSW023\n         EJECT                                                  AJSW023\n*-------------------------------------------------------------* AJSW023\n*        EXECUTED INSTRUCTIONS AND TABLES                     * AJSW023\n*-------------------------------------------------------------* AJSW023\nLIAT8969 EQU   IAT8969E-IAT8969                                 AJSW023\nCMPRUID  CLC   0(0,R5),TSUSERID                                 AJSW023\nUIDMOVE  MVC   6(0,R5),0(R15)                                   AJSW023\nMVEDSPNM MVC   0(0,R5),DSPNAME                                  AJSW023\n         SPACE 1                                                AJSW023\n         DROP  R6                                               AJSW023\n         SPACE 2                                                AJSW023\nRNDXTYPE DC    ((RQMAXNDX-0)/4)C'?'                             AJSW023\n         ORG   RNDXTYPE                                         AJSW023\n         DC    C'NN'                                            AJSW023\n         ORG   RNDXTYPE+(RQFETCH/4)                             AJSW023\n         DC    C'F'                                             AJSW023\n         ORG   RNDXTYPE+(RQVOLWT/4)                             AJSW023\n         DC    C'W'                                             AJSW023\n         ORG   RNDXTYPE+(RQALLOC/4)                             AJSW023\n         DC    C'A'                                             AJSW023\n         ORG   RNDXTYPE+(RQVOLUAV/4)                            AJSW023\n         DC    C'U'                                             AJSW023\n         ORG   RNDXTYPE+(RQVERIFY/4)                            AJSW023\n         DC    C'V'                                             AJSW023\n         ORG   RNDXTYPE+(RQERROR/4)                             AJSW023\n         DC    C'E'                                             AJSW023\n         ORG   RNDXTYPE+(RQSELECT/4)                            AJSW023\n         DC    C'Q'                                             AJSW023\n         ORG   RNDXTYPE+(RQONMAIN/4)                            AJSW023\n         DC    C'O'                                             AJSW023\n         ORG   RNDXTYPE+(RQWTR/4)                               AJSW023\n         DC    C'O'                                             AJSW023\n         ORG   RNDXTYPE+(RQTERM/4)                              AJSW023\n         DC    C'O'                                             AJSW023\n         ORG   RNDXTYPE+(RQBRKDWN/4)                            AJSW023\n         DC    C'B'                                             AJSW023\n         ORG   RNDXTYPE+(RQRESTRT/4)                            AJSW023\n         DC    C'R'                                             AJSW023\n         ORG   RNDXTYPE+(RQDONE/4)                              AJSW023\n         DC    C'C'                                             AJSW023\n         ORG   RNDXTYPE+(RQOSWAIT/4)                            AJSW023\n         DC    C'S'                                             AJSW023\n         ORG   RNDXTYPE+(RQDEMSEL/4)                            AJSW023\n         DC    C'D'                                             AJSW023\n         ORG   RNDXTYPE+(RQEFWAIT/4)                            AJSW023\n         DC    C'I'                                             AJSW023\n         ORG   RNDXTYPE+(RQEFBAD/4)                             AJSW023\n         DC    C'N'                                             AJSW023\n         ORG   RNDXTYPE+(RQMAXNDX/4)                            AJSW023\n         SPACE 2                                                AJSW023\n*-------------------------------------------------------------* AJSW023\n*        CONTINUE WITH IBM'S CODING                           * AJSW023\n*-------------------------------------------------------------* AJSW023\nGDW0100  DS    0H                                               AJSW023\n         EJECT                                                  AJSW023\nUMODNUM  DC    CL7'AJSW023'       *USER NUMBER\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AJSW024": {"ttr": 9481, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW024) /* PUT JULIAN DATE IN MLOG MSG TIME STAMP\n\n       PUT JULIAN DAY IN TIME STAMP OF ALL MESSAGES SENT TO MLG.\n       NOTE THAT THIS MOD USES THE LAST 3 BYTES OF THE CONMCONS\n       FIELD FOR THE DATE (AND REDUCES THE LENGTH OF THAT FIELD\n       TO 5 BYTES); THIS MOD WILL ONLY WORK IF ALL THE CONSOLE\n       NAMES ARE 5 BYTES LONG OR LESS.\n                                       */.\n++ VER(Z038) FMID(HJS2215).\n++ SRCUPD(IATCNMR) .\n./ CHANGE NAME=IATCNMR\n*        USER MODS =                                            AJSW024\n*                                                               AJSW024\n*             - PUT JULIAN DATE IN MLOG MESSAGE TIME STAMP      AJSW024\n*                                                               AJSW024\n*        MVC   CONMTIME,0(R1)      MOVE TIME TO MESSAGE @G26CI09AJSW024\n         MVC   CONMTIME+1(6),0(R1) *MOVE TIME TO MESSAGE        AJSW024\n         IATXTOD BIN              *GET CURRENT DATE             AJSW024\n         ST    R1,WDSCWORK        *SAVE DATE                    AJSW024\n         MVI   CONMTIME-4,C' '    *MOVE IN BLANK                AJSW024\n         UNPK  CONMTIME-3(3),WDSCWORK+2(2) *PICK UP DAY OF YEAR AJSW024\n         OI    CONMTIME-1,X'F0'   *FORCE CORRECT SIGN CHAR      AJSW024\n         MVI   CONMTIME,C'.'      *MOVE IN DELIMITER            AJSW024\n*        MVC   CONMCONS,TVTBLANK   BLANK CONSOLE NAME  @ZA44459 AJSW024\n         MVC   CONMCONS(5),TVTBLANK *BLANK CONSOLE NAME         AJSW024\n*        MVC   CONMCONS(8),CONSDDNM-CONSDATA(R4) NAME TO BUFFER AJSW024\n         MVC   CONMCONS(5),CONSDDNM-CONSDATA(R4) *NAME TO BUFF  AJSW024\nWDSCWORK DC    F'0'               *WORK AREA FOR AJSW024        AJSW024\n*RMTNS   DC    CL8'RMT-NS'    REMOTE CONS NO CST ENTRY @G26CI09 AJSW024\nRMTNS    DC    CL8'RMTXX'         *REMOTE CONS NO CST ENTRY     AJSW024\nUMODNUM  DC    CL7'AJSW024'       *USER NUMBER\n++ SRCUPD(IATCN84) DISTLIB(AJES3SRC) .\n./ CHANGE NAME=IATCN84\n*        USER MODS =                                            AJSW024\n*                                                               AJSW024\n*             - PUT JULIAN DATE IN MLOG MESSAGE TIME STAMP      AJSW024\n*                                                               AJSW024\n         TM    CONSOFLG,CNMLOG    *MLOG MESSAGE?                AJSW024\n         BO    *+8                *YES, SKIP ADDING DATE        AJSW024\n         LA    R4,3(,R4)          *ADD DATE LENGTH              AJSW024\n*        LA    R0,CONMTIME         POINT AT NON MLOG TEXT       AJSW024\n         LA    R0,CONMTIME-3      *POINT AT NON MLOG TEXT       AJSW024\n         TM    CONSOFLG,CNMLOG    *MLOG MESSAGE?                AJSW024\n         BO    *+8                *YES, SKIP ADDING DATE        AJSW024\n         LA    R3,3(,R3)          *ADD DATE LENGTH              AJSW024\n         TM    CONSOFLG,CNMLOG    *MLOG MESSAGE?                AJSW024\n         BO    *+8                *YES, SKIP ADDING DATE        AJSW024\n         LA    R3,3(,R3)          *ADD DATE LENGTH              AJSW024\nUMODNUM  DC    CL7'AJSW024'       *USER NUMBER\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW025": {"ttr": 9483, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW025)/* ELIMINATE TIME STAMP FROM 3277 MESSAGES\n\n       THIS MODIFICATION DELETES THE TIME STAMP FROM MESSAGES\n       SENT TO A 3277 UNLESS IT IS MLG.  THIS MOD REQUIRES\n       AJSW024 TO BE APPLIED BECAUSE 3284S WILL NOW PICK UP THE\n       JULIAN DATE AT CONMTIME-3 AND OTHER TYPES AT CONMTIME+1.\n       ALSO FIXES POST OZ40945 LEVEL IATCN77 FOR OTHER THAN\n       SINGLE LINE MESSAGES TO 3284S.\n       THE LINES OF CODE THAT PICK UP THE JULIAN DATE FROM\n       AJSW024 CORRECTLY HAVE AJSW024/AJSW025 IN THE COMMENT.\n                                                                 */ .\n++  VER(Z038) FMID(HJS2215) PRE(AJSW024).\n++ SRCUPD(IATCNSL) DISTLIB(AJES3SRC) .\n./  CHANGE NAME=IATCNSL\n*        USER MODS =                                            AJSW025\n*                                                               AJSW025\n*             - DELETE TIME STAMP FROM 3277 MESSAGES            AJSW025\n*                                                               AJSW025\n         SR    R1,R1              *CLEAR REG 1 AS FLAG          AJSW025\n         TM    CONSOFLG,CNMLOG    *IS THIS AN MLOG BUFFER?      AJSW025\n         BO    GDW020             *YES, LEAVE MSG ALONE         AJSW025\n         CLI   CONSTYPE,CON3277   *IS THE DEVICE A 3277?        AJSW025\n         BC    EQ,GDW005          *YES, BRANCH                  AJSW025\n         CLI   CONSTYPE,CON3278   *IS THE DEVICE A 3278?        AJSW025\n         BC    NE,GDW010          *NO, CHECK IF 3284            AJSW025\nGDW005   DS    0H                                               AJSW025\n         S     R0,=F'9'           *SHORTER MESSAGE TO WRITE     AJSW025\n         LA    R1,CONMTEXT        *POINT TO TEXT PORTION        AJSW025\n         B     GDW020             *AND CONTINUE                 AJSW025\nGDW010   DS    0H                                               AJSW025\n         CLI   CONSTYPE,CON3284   *IS THE DEVICE A 3284?        AJSW025\n         BC    NE,GDW015          *NO, LEAVE TIME IN MSG        AJSW025\n         LA    R0,3(R0)           *LONGER MESSAGE TO WRITE      AJSW025\n         LA    R1,CONMTIME-3      *POINT TO DATE PORTION        AJSW025\n         B     GDW020             *AND CONTINUE                 AJSW025\nGDW015   DS    0H                                       AJSW024/AJSW025\n         BCTR  R0,R0              *MUST BE 'OTHER' TYPE AJSW024/AJSW025\n         LA    R1,CONMTIME+1      *CORRECT TIME POINTER AJSW024/AJSW025\nGDW020   DS    0H                 *BACK TO MAINLINE             AJSW025\n         LTR   R1,R1              *IS TEXT ADDRESS THERE?       AJSW025\n         BNZ   LDEVRTN            *YES, MUST BE ALL SET         AJSW025\n*        LA    R8,CONMTIME START OF REGULAR TXT @G26CI09AJSW024/AJSW025\n         LA    R8,CONMTIME+1      *START OF REGULAR TXT AJSW024/AJSW025\n         CLI   CONSTYPE,CON3277   *IS THE DEVICE A 3277?        AJSW025\n         BC    EQ,GDW025          *YES, BRANCH                  AJSW025\n         CLI   CONSTYPE,CON3278   *IS THE DEVICE A 3278?        AJSW025\n         BC    NE,GDW030          *NO, CHECK IF 3284            AJSW025\nGDW025   DS    0H                                               AJSW025\n         LA    R8,CONMTEXT        *POINT TO TEXT PORTION        AJSW025\n         B     TXTADSET           *AND CONTINUE                 AJSW025\nGDW030   DS    0H                                               AJSW025\n         CLI   CONSTYPE,CON3284   *IS THE DEVICE A 3284?        AJSW025\n         BC    NE,TXTADSET        *NO, LEAVE ALONE              AJSW025\n         LA    R8,CONMTIME-3      *POINT TO DATE PORTION        AJSW025\nUMODNUM  DC    CL7'AJSW025'       *USER NUMBER\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW027": {"ttr": 9485, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW027) /* ALLOW USE OF '*' IN NET FIELD OF JESDJC MSG.\n\n       THIS MODIFICATION WILL CAUSE JES3 TO USE THE ISSUERS DJC\n       NET ID (RQMNETID FIELD) IF THE MESSAGE 'JESDJC' IS ISSUED\n       WITH AN '*NET-ID*' IN THE NET-ID FIELD. PROGRAM 'JESDJC1'\n       WILL THEN PERFORM 'FREEJOB' LIKE FUNCTION FOR JES3 DJC JOB\n       NETS. TIME DELAY IN 'JESDJC1' IS TO ALLOW SUCCESSOR JOB(S)\n       TO RESCHEDULE THROUGH CI AND BE WAITING IN MAIN WHEN THE\n       CURRENT JOB ACTUALLY ENDS.\n                                                                 */ .\n++ VER(Z038) FMID(HJS2215).\n++ JCLIN .\n//GEN11 JOB Y51024508,'531-0  SINGER '\n//SG22 EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET',\n//    UNIT='3350',SER=IPLXXX,N=GEN1,NAME=JES3LIB,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=MVS3.INCLUDE\n//SYSLIN DD *\n INCLUDE INCLUDE(JESDJC1)\n NAME JESDJC1(R)\n/*\n++ SRC(JESDJC1) DISTLIB(ASRCLIB) .\n         TITLE 'JES3 DJC EARLY NET RELEASE PROGRAM'\nJESDJC1  CSECT\n         STM   14,12,12(13)       *SAVE REGS\n         BALR  12,0               *SET UP BASE\n         USING *,12               *REGISTER\n         ST    13,SAVE+4          *SAVE REG 13\n         LA    13,SAVE            *GET SAVE AREA ADDRESS\n         SPACE 1\n       EXTRACT TIOT,'S',FIELDS=(TIOT) *GET TIOT ADDRESS\n         L     3,TIOT             *GET TIOT ADDRESS\n         MVC   JOBNAME(8),0(3)    *MOVE JOBNAME TO WTO\n         SPACE 1\n***  NOTE:                                                       ***\n***  FOR NETNAME = '*NET-ID*' TO WORK AJSW027 MUST BE INSTALLED  ***\n         SPACE 1\n         MVC   NETNAME(8),=CL8'*NET-ID*' SET TO DEFAULT NAME\n         SPACE 1\nWTO      WTO   'IAT0008 JOBNAME  NETNAME  ** JES3 DJC HOLD COUNTS DECREX\n               MENTED **',ROUTCDE=(2,11),DESC=(7)\n         SPACE 1\n        STIMER WAIT,BINTVL=AWHILE *WAIT FOR AWHILE\n         SPACE 1\n         SR    15,15              *SET GOOD RETURN CODE\n         L     13,SAVE+4          *GET OLD SAVE AREA POINTER\n         L     14,12(13)          *GET RETURN ADDRESS\n         LM    0,12,20(13)        *RESTORE REGS\n         BR    14                 *AND RETURN\n         SPACE 1\nJOBNAME  EQU   WTO+16             *JOBNAME IN WTO\nNETNAME  EQU   WTO+25             *NETNAME IN WTO\nTIOT     DC    F'0'               *TIOT ADDRESS\nSAVE     DC    9D'0'              *SAVE AREA\nAWHILE   DC    F'3000'            *WAIT TIME (30 SEC)\nUMODNUM  DC    CL7'AJSW027'       *USER NUMBER\n         END   JESDJC1\n++ SRCUPD(IATCNSV) DISTLIB(AJES3SRC) .\n./ CHANGE NAME=IATCNSV\n*        USER MODS =                                            AJSW027\n*                                                               AJSW027\n*             - USE RQNETID IF NET=*NET-ID* FOR DJC WTO         AJSW027\n*                                                               AJSW027\n         CLC   DJCCONNI,=CL8'*NET-ID*' *IS IT TO BE DEFAULT?    AJSW027\n         BNE   GDW010             *NO - USE NAME SUPPLIED       AJSW027\n         MVC   DJCCONNI,RQMNETID  *YES - GET ISSUERS NETID      AJSW027\nGDW010   DS    0H                 *SKIP CHANGING NETID          AJSW027\nUMODNUM  DC    CL7'AJSW027'       *USER NUMBER                  AJSW027\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW028": {"ttr": 9487, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD(AJSW028)     /*\n\n      ALLOW *I,G AND *F,G CMDS TO ACCEPT 'ALL' AS MPNAME\n                                                         */.\n++VER(Z038) FMID(HJS2215) PRE(AJSW018).\n++SRCUPD(IATIQGM).\n./ CHANGE NAME=IATIQGM\n*        USER MODS =                                            AJSW028\n*                                                               AJSW028\n*             - HAVE *I,G COMMAND ACCEPT 'ALL' AS MPNAME        AJSW028\n*                                                               AJSW028\n         CLC   REQUEST2,=CL8'ALL' *ARE ALL SYSTEMS REQUESTED?   AJSW028\n         BE    SETIND             *IF YES, LIST ALL SYSTEMS     AJSW028\n         EJECT                                                  AJSW028\n*-----------------------------------------------------------*   AJSW028\n*           PROCESS INQUIRY AGAINST ALL SYSTEMS             *   AJSW028\n*-----------------------------------------------------------*   AJSW028\nALLSYS   DS    0H                 *ALL SYSTEM INQUIRY           AJSW028\n         L     R9,MPNEXT          *LOAD ADDRESS OF NEXT MPC     AJSW028\n         LTR   R9,R9              *IS THERE AN MPC?             AJSW028\n         BZ    MYEXIT             *NO, EXIT                     AJSW028\n         B     IQGM0010           *YES, GO PROCESS              AJSW028\nMYEXIT   DS    0H                 *PRE-EXIT ROUTINE             AJSW028\n         MVI   ENDTEST,C'E'       *INDICATE END PROCESSING      AJSW028\n         B     IQGMEXIT           *BRANCH TO EXIT               AJSW028\nSETIND   DS    0H                 *SET CONTINUATION INDICATOR   AJSW028\n         MVI   ENDTEST,C'A'       *INDICATE TO PROCESS ALL      AJSW028\n         MVI   ENDTEST,C'E'       *INDICATE END PROCESSING      AJSW028\n         CLI   ENDTEST,C'A'       *WERE ALL SYSTEMS REQUESTED?  AJSW028\n         BE    ALLSYS             *IF YES, RETURN TO PROCESS    AJSW028\nENDTEST  DC    C'E'               *END PROCESS INDICATOR        AJSW028\nUMODNUM  DC    CL7'AJSW028'       *USER NUMBER\n++SRCUPD(IATMOGM).\n./ CHANGE NAME=IATMOGM\n*        USER MODS =                                            AJSW028\n*                                                               AJSW028\n*             - HAVE *F,G COMMAND ACCEPT 'ALL' AS MPNAME        AJSW028\n*                                                               AJSW028\n         CLC   REQUEST2,=CL8'ALL' *ARE ALL SYSTEMS REQUESTED?   AJSW028\n         BE    SETIND             *IF YES, LIST ALL SYSTEMS     AJSW028\nSETIND   DS    0H                 *SET CONTINUATION INDICATOR   AJSW028\n         MVI   ENDTEST,C'A'       *INDICATE TO PROCESS ALL      AJSW028\n         MVC   MOGMMPNM,MPNAME    *MPNAME TO MESSAGE            AJSW028\n         EJECT                                                  AJSW028\n*-------------------------------------------------------------* AJSW028\n*        PROCESS MODIFICATION AGAINST ALL SYSTEMS             * AJSW028\n*-------------------------------------------------------------* AJSW028\nALLSYS   DS    0H                 *ALL SYSTEM MODIFICATION      AJSW028\n         L     R9,MPNEXT          *LOAD ADDRESS OF NEXT MPC     AJSW028\n         LTR   R9,R9              *IS IT THE LAST MPC?          AJSW028\n         BZ    MYEXIT             *IF YES, EXIT                 AJSW028\n         B     MOGM0010           *IF NOT, PROCESS              AJSW028\nMYEXIT   DS    0H                 *PRE-EXIT ROUTINE             AJSW028\n         MVI   ENDTEST,C'E'       *INDICATE END PROCESSING      AJSW028\n         B     MOGMCHK            *BRANCH TO EXIT               AJSW028\n         CLI   ENDTEST,C'A'       *WERE ALL SYSTEMS REQUESTED   AJSW028\n         BE    ALLSYS             *IF YES, RETURN TO PROCESS    AJSW028\n         ST    R1,USRSAVE         *SAVE RETURN ADDRESS          AJSW028\n         L     R15,=A(URETURN)    *GET ADDRESS OF ROUTINE       AJSW028\n         ACALL ENTER=(R15)        *GO TO ROUTINE                AJSW028\nENDTEST  DC    C'E'               *END PROCESS INDICATOR        AJSW028\nUSRSAVE  DC    F'0'               *SAVE AREA FOR RETURN ADDR    AJSW028\n         LTORG                                                  AJSW028\n         EJECT                                                  AJSW028\n*-------------------------------------------------------------* AJSW028\n*                   CHECK FOR GOOD MESSAGES                   * AJSW028\n*-------------------------------------------------------------* AJSW028\n         SPACE 3                                                AJSW028\nURETURN DS     0H                                               AJSW028\n         LR    R8,R15             *GET ENTRY ADDRESS            AJSW028\n         USING URETURN,R8                                       AJSW028\n         L     R10,=A(IATMOGM)    *GET ADDRESS OF MODULE        AJSW028\n         USING IATMOGM,R10                                      AJSW028\n         L     R1,USRSAVE         *RESTORE RETURN ADDRESS       AJSW028\n         LA    R15,MOGMNTXT       *LOAD A GOOD MESSAGE ADDRESS  AJSW028\n         CR    R15,R1             *COMPARE WITH RETURN ADDRESS  AJSW028\n         BC    EQ,USRGOOD         *IF GOOD, CONTINUE            AJSW028\n         LA    R15,MOGMER13       *LOAD A GOOD MESSAGE ADDRESS  AJSW028\n         CR    R15,R1             *COMPARE WITH RETURN ADDRESS  AJSW028\n         BC    EQ,USRGOOD         *IF GOOD, CONTINUE            AJSW028\n         LA    R15,MOGMER20       *LOAD A GOOD MESSAGE ADDRESS  AJSW028\n         CR    R15,R1             *COMPARE WITH RETURN ADDRESS  AJSW028\n         BC    EQ,USRGOOD         *IF GOOD, CONTINUE            AJSW028\n         MVC   MOGMMPNM,REQUEST2  *RESTORE ERROR MESSAGE        AJSW028\n         MVI   ENDTEST,C'E'       *INDICATE ERROR               AJSW028\nUSRGOOD  DS    0H                                               AJSW028\n         SR    R15,R15            *CLEAR RETURN CODE            AJSW028\n         ARETURN RC=(R15)         *RETURN                       AJSW028\nUMODNUM  DC    CL7'AJSW028'       *USER NUMBER\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW030": {"ttr": 9490, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW030) /* ALLOW XWTRS TO USE ANY DESTINATION.\n\n       THIS MODIFICATION WILL CAUSE JES3 TO NOT VALIDATE THE\n       DESTINATION OF REQUESTS FOR OUTPUT THROUGH THE \"PROCESS\n       SYSOUT\" INTERFACE.  THIS ELIMINATES THE REQUIREMENT TO\n       HAVE A \"DUMMY\" DEVICE ENTRY FOR EACH XWTR DESTINATION.\n                                                                 */ .\n++ VER (Z038) FMID(HJS2215).\n++ SRCUPD(IATGRWP) DISTLIB(AJES3SRC) .\n./ CHANGE NAME=IATGRWP\n*    USER MODS =                                                AJSW030\n*                                                               AJSW030\n*         - BYPASS DESTINATION VALIDATION FOR XWTRS             AJSW030\n*                                                               AJSW030\n*        BC    ALLON,WTP120        YES-GO CHECK IT              AJSW030\n         NOP   WTP120             *YES - DON'T CHECK IT....     AJSW030\nUMODNUM  DC    CL7'AJSW030'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AJSW031": {"ttr": 9729, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW031) /* PASS DATASET LINE COUNT BACK IN SSOB:\n\n       THIS MODIFICATION WILL CAUSE JES3 TO PASS THE OSE LINE-\n       COUNT BACK TO THE REQUESTOR IN THE SSOB FOR USERS OF THE\n       \"PROCESS SYSOUT\" INTERFACE (X WTRS).  THIS LINECOUNT WILL\n       BE USED BY RMDS TO ESTIMATE SPACE REQUIRED FOR THE DATASET.\n                                                                 */ .\n++ VER (Z038) FMID(HJS2215) PRE(AJSW011) .\n++ SRCUPD(IATOSSC) DISTLIB(AJES3SRC) .\n./ CHANGE NAME=IATOSSC\n*        USER MODS =                                            AJSW031\n*                                                               AJSW031\n*              - PUT DATASET LINE COUNT IN SSOB FOR XWTR        AJSW031\n         MVC SSSOCLAS+1(3),OSEDLNCT+1 *MOVE IN LOW THREE BYTES  AJSW031\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AJSW032": {"ttr": 9731, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW032) /* ACF2 JCL CARD PROCESSING:\n\n       PUT THE ACF2 HOOKS INTO IATUX33.\n                                                                 */ .\n++ VER(Z038) FMID(HJS2215).\n++ SRCUPD(IATUX33) DISTLIB(AJES3SRC) .\n./ CHANGE NAME=IATUX33\n* USER MODS=                                                    AJSW032\n*                                                               AJSW032\n*      - ACF2 CODE FOR JCL PROCESSING                           AJSW032\n*                                                               AJSW032\n         LR    R5,R1              *POINTER TO JCL CARD FOR ACF2 AJSW032\n         IATXCUE EP=ACFCSCAN,ALOAD=YES *DO ACF2 CHECKING        AJSW032\n         L     R1,LOCADDR         *R1 MUST EQUAL CARD POINTER   AJSW032\n         SR    R15,R15            *SET RETURN CODE TO ZERO      AJSW032\n*        LA    R15,12              SET FOR DUMMY USER EXIT 33   AJSW032\nUMODNUM  DC    CL7'AJSW032'       *USER NUMBER\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW035": {"ttr": 9733, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW035) /* SUPPRESS DATASET HEADERS\n\n           THIS MOD WILL SUPPRESS THE PRINTING OF DATASET HEADERS\n           FOR JESMSG, JESJCL, AND SYSMSG DATASETS IN AN EFFORT\n           TO REDUCE PRINTED SYSOUT.\n                                      */.\n++ VER(Z038) FMID(HJS2215).\n++ SRCUPD(IATUX21).\n./ CHANGE NAME=IATUX21\n*        USER MODS =                                            AJSW035\n*                                                               AJSW035\n*             - SUPPRESS DS HEADERS FOR JESMSG,                 AJSW035\n*               JESJCL, AND SYSMSGS                             AJSW035\n*                                                               AJSW035\n         CLC   WTRDDSN+16(8),=CL8'JESMSG' *DSN=JESMSG?          AJSW035\n         BC    EQ,UX21L200               *YES, NO HEADER NEEDED AJSW035\n         CLC   WTRDDSN+16(8),=CL8'JESJCL' *DSN=JESJCL?          AJSW035\n         BC    EQ,UX21L200               *YES, NO HEADER NEEDED AJSW035\n         CLC   WTRDDSN+16(8),=CL8'SYSMSG' *DSN=SYSMSG?          AJSW035\n         BC    EQ,UX21L200               *YES, NO HEADER NEEDED AJSW035\nUMODNUM  DC    CL7'AJSW035'              *USER NUMBER           AJSW035\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW036": {"ttr": 9735, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD(AJSW036)     /* DSP DICTIONARY UPDATES:\n\n          ACCT DSP DEFINITION\n          FLS (FLASHER) DSP DEFINITION\n          WTP (WRITE-TO-PROGRAMMER) DSP DEFINITION\n          CHANGE PRIORITY OF NJE AND NJESND\n          RESTRICTED CLASS VERIFICATION DSP                     AJSW208 $\n                                               */.\n++VER(Z038) FMID(HJS2215).\n++SRCUPD(IATGRPT).\n./ CHANGE NAME=IATGRPT\n*        USER MODS =                                            AJSW036\n*                                                               AJSW036\n*             - CHANGE NJE PRIORITY TO 3 AND NJESND TO 2        AJSW036\n*                                                               AJSW036\n*             - ADD ACCT DSP DEFINITION                         AJSW036\n*                                                               AJSW036\n*             - ADD FLS DSP DEFINITION (FLASHER)                AJSW036\n*                                                               AJSW036\n*             - ADD WTP DSP DEFINITION                          AJSW036\n*                                                               AJSW036\n               XABLE=YES,PRTY=3,NOREQ=1,REQ=NJELINE             AJSW036\n*              XABLE=YES,PRTY=9,NOREQ=1,REQ=NJELINE    @ZA44245 AJSW036\n*NJESND  IATYDSD  DRVR=IATNTSD,REENT=YES,PRTY=8,NOREQ=1,   @L7A AJSW036\nNJESND   IATYDSD  DRVR=IATNTSD,REENT=YES,PRTY=2,NOREQ=1,   @L7A AJSW036X\n         SPACE 2                                                AJSW036\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * AJSW036\n*                                                             * AJSW036\n* * * *       GENERAL DYNAMICS USER DSP ENTRIES         * * * * AJSW036\n*                                                             * AJSW036\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * AJSW036\n         SPACE 1                                                AJSW036\n*-----          A C C T   D S P   E N T R Y              -----* AJSW036\nACCT     IATYDSD PRTY=7,XABLE=YES,DRVR=ACCT,CSECT=ACCTSAVE      AJSW036\n*-----          F L S   D S P   E N T R Y                -----* AJSW036\nFLS      IATYDSD PRTY=5,REENT=NO,XABLE=YES,NOREQ=0,             AJSW036X\n               DRVR=IATFLS,PABLE=NO,MAXCT=1,MUCC=NO             AJSW036\n*-----          W T P   D S P   E N T R Y                -----* AJSW036\nWTP      IATYDSD PRTY=5,REENT=NO,XABLE=YES,NOREQ=0,             AJSW036X\n               MAXCT=5,MUCC=YES,DRVR=IATUTWTP                   AJSW036\n*-----          C V E R   D S P   E N T R Y              -----* AJSW208\nCVER     IATYDSD PRTY=2,XABLE=YES,DRVR=CVER,CSECT=CVERDATA      AJSW208\n*-----                                                   -----* AJSW208\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW037": {"ttr": 9737, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW037) /* INIT LOAD NOTIFICATION MESSAGE IAT0001:\n\n       THIS MODIFICATION WILL NOTIFY THE OPERATOR OF PROGRESS\n       THROUGH JES3 INITIALIZATION BY WRITING THE NAME OF EACH\n       INITIALIZATION MODULE AS IT IS LOADED, ALONG WITH A\n       TIME STAMP.\n                                                                 */ .\n++ VER (Z038) FMID(HJS2215).\n++ SRCUPD(IATGRLD) DISTLIB(AJES3SRC) .\n./ CHANGE NAME=IATGRLD\n* USER MODS:                                                    AJSW037\n*                                                               AJSW037\n*      - ISSUE A WTO, WITH A TIMESTAMP, ON ANY IATINxx          AJSW037\n*        MODULE LOADED DURING JES3 INITIALIZATION.              AJSW037\n*                                                               AJSW037\n         TM    JSSFLG2,JSSACTIV     *PAST *S JSS?               AJSW037\n         BC    ALLON,AJSSKIP        *YES, BRANCH                AJSW037\n         CLC   0(5,R5),=C'IATIN'    *INITIALIZATION MODULE?     AJSW037\n         BC    NE,AJSSKIP           *NO, BRANCH                 AJSW037\n         MVC   AJSINWTO+21(2),5(R5) *LAST 2 CHARS OF MOD TO MSG AJSW037\n         IATXTOD ,                  *GET TIME                   AJSW037\n         MVC   AJSINWTO+31(2),0(R1) *MOVE HH ...                AJSW037\n         MVC   AJSINWTO+34(2),2(R1)         MM ...              AJSW037\n         MVC   AJSINWTO+37(2),4(R1)            AND SS INTO MSG  AJSW037\nAJSINWTO WTO 'IAT0001 IATIN|| LOADED HH:MM:SS',ROUTCDE=2,DESC=4 AJSW037\nAJSSKIP  DS    0H                                               AJSW037\nUMODNUM  DC    CL7'AJSW037'        USER NUMBER                  AJSW037\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW038": {"ttr": 9739, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD(AJSW038)     /*\n                                WRITE-TO-PROGRAMMER DSP (WTP) */.\n++VER(Z038) FMID(HJS2215).\n++JCLIN.\n//GEN11 JOB WC07Z0044,'531-0 C SINGER'\n//SG21 EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,RENT,REUS',\n//    UNIT='3350',SER=IPLXXX,N=GEN1,NAME=JES3LIB,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=MVS3.INCLUDE\n//SYSLIN DD *\n  INCLUDE INCLUDE(IATUTWTP)\n NAME IATUTWTP(R)\n++SRC(IATUTWTP) DISTLIB(ASRCLIB) .\nWTP      TITLE 'WRITE-TO-PROGRAMMER DSP'\nIATUTWTP CSECT\nIATUTWTP AMODE 31\nIATUTWTP RMODE ANY\n         IATYASM\n***********************************************************************\n*                                                                     *\n*        MODULE NAME = IATUTWTP                                       *\n*                                                                     *\n*        DESCRIPTIVE NAME = NYL OPERATOR WRITE TO PROGRAMMER          *\n*                                                                     *\n*        COPYRIGHT = NONE                                             *\n*                                                                     *\n*        STATUS = USER WRITTEN JES3 DSP FOR HJS2215                   *\n*                                                                     *\n*        FUNCTION = THE JESMSG DATASET WILL BE UPDATED BY THE TEXT OF *\n*                   THE CALL COMMAND FOR WTP, AND THE TEXT WILL ALSO  *\n*                   BE SENT TO THE TSO OWNER OF THE JOB, IF ANY.      *\n*                                                                     *\n*        OPERATION =                                                  *\n*                   -WRITE TO PROGRAMMER DSP (WTP) IS INVOKED BY AN   *\n*                    OPERATOR CALL COMMAND:                           *\n*                           *X WTP,J=XXXX,'MESSAGE TEXT'              *\n*                    WTP WILL PUT 'TEXT' INTO JOB XXXX'S JESMSG       *\n*                    DATASET WHERE XXXX IS A 1 TO 4 DIGIT JOB NUM.    *\n*                                                                     *\n*                   -REGISTER CONVENTIONS:                            *\n*                          R8  - WTP RESQ POINTER                     *\n*                          R10 - BASE REGISTER                        *\n*                          R11 - POINTER TO FCT                       *\n*                          R12 - POINTER TO TVT                       *\n*                                                                     *\n*        NOTES = NONE                                                 *\n*                                                                     *\n*        MODULE TYPE = CALLABLE DSP                                   *\n*                                                                     *\n*        ENTRY POINT = IATUTWTP                                       *\n*                                                                     *\n*        INPUT = OPERATOR COMMAND - SEE OPERATION SECTION             *\n*                                                                     *\n*        OUTPUT = OPERATOR MSG PLACED INTO JOB'S JESMSG DATASET AND   *\n*                 MESSAGE TEXT SENT TO TSO OWNER OF JOB               *\n*                                                                     *\n*        EXIT =  NORMAL RETURN TO JSS                                 *\n*                                                                     *\n*        MESSAGES = IAT0X02 IAT0X03                                   *\n*                                                                     *\n*        ABEND CODES = NONE                                           *\n*                                                                     *\n***********************************************************************\n         TITLE 'IATYFCT - FUNCTION CONTROL TABLE'\n         IATYFCT\n         EJECT\n         TITLE 'IATYEQU - STANDARD EQUATES'\n         IATYEQU\n         EJECT\n         TITLE 'IATYREG - REGISTER EQUATES'\n         IATYREG\n         EJECT\n         TITLE 'IATYTVT - TRANSFER VECTOR TABLE'\n         IATYTVT TYPE=DSECT\n         EJECT\n         TITLE 'IATYRSQ - RESIDENT JOB QUEUE TABLE'\n         IATYRSQ\n         EJECT\n         TITLE 'IATYJDA - JOB DATA ACCOUNTING BLOCK'\n         IATYJDA\n         EJECT\n         TITLE 'IATYCND - CONSOLE STATUS TABLE'\n         IATYCND\n         EJECT\n         TITLE 'IATYCNS - CONSOLE BUFFER MAP'\n         IATYCNS TYPE=(FCTQ,MLOG,INPUT)\n         EJECT\n         TITLE 'IATYDST - JES3 DESTINATION CODES'\n         IATYDST\n         EJECT\n         TITLE 'IATYCNC - CONSOLE SERVICE CONSTANTS'\n         IATYCNC TYPE=DSECT\n         EJECT\n         TITLE 'IATYMPC - MAIN PROCESSOR CONTROL TABLE'\n         IATYMPC\n         EJECT\n         TITLE 'IATYDSP - DSP DICTIONARY ENTRY'\n         IATYDSP\n         EJECT\n         TITLE 'IATYJQE - JOB QUEUE ELEMENT'\n         IATYJQE\n         EJECT\n         TITLE 'IATYJCT - JOB CONTROL TABLE'\n         IATYJCT\n         EJECT\n         TITLE 'WRITE TO PROGRAMMER UTILITY'\n***********************************************************************\n*             I N I T I A L I Z E    W T P    D S P                   *\n***********************************************************************\nIATUTWTP CSECT\n         USING IATUTWTP,R10\n         LR    R10,R15\n         IATYMOD BR=YES\n         SPACE 1\n*---------------------------------------------------------------------*\n* READ JOB DESCRIPTION BLOCK                                          *\n*---------------------------------------------------------------------*\n         SPACE 1\n*DEBUG  -  NEXT TWO LINES INSURE FRESH COPY EACH TIME FOR TESTING     *\n*        L     R1,FCTDSPDC\n*        OI    DSPFLAG1-DSPSTART(R1),DSPNUDRV\n*DEBUG                                                                *\n         MVI   WTPFLG1,X'00'       *CLEAR WTP FLAG BYTE\n         L     R8,FCTRQAD          *R8 = A(RQ ENTRY)\n         USING RQSTART,R8          *ESTABLISH ADDRESSIBILITY\n         LA    R9,RQJDBFDB         *R9 = A(JDAB FDB)\n         JESREAD FDB=(R9),ID=JDAB,ERROR=WTP028  *READ IN JDAB\n         L     R9,RQJDBFDB         *R9 = A(JDAB)\n         USING JDABSTRT,R9\n         MVC   LLCONS(2),JDABCNID  *SAVE CONSOLE ID\n         LR    R6,R9\n         AH    R6,JDABFIXL         *PT TO 1ST SE ENTRY\n         USING JDABNTRY,R6\nWTP001   DS    0H\n         CLC   JDABSENO,FCTSESEQ   *Q. CORRECT SE #\n         BE    WTP003              *A. YES, CONTINUE\n         CLC   JDABVEND,TVTRMFF    *Q. END OF JDAB?\n         BE    WTP002              *A. YES, ERROR\n         AH    R6,JDABVARL         *POINT TO NEXT ENTRY\n         B     WTP001              *CONTINUE\nWTP002   DS    0H\n         LA    R3,MSG3             *WTP ERROR MESSAGE\n         BAL   R2,WTP030           *GO SEND MESSAGE\nWTP002A  DS    0H\n         ARELEASE FDB=RQJDBFDB     *RELEASE JDAB\n         B     JSSRTN              *RETURN TO JSS\nWTP003   DS    0H\n         MVC   WTPPRFDB,JDABPFDB   *SAVE ADDR OF PARAM BUFFER\n         ARELEASE FDB=RQJDBFDB     *RELEASE JDAB\n         OC    WTPPRFDB(L'FDBDATA),WTPPRFDB *Q. ANY PARM BUFFER\n         BC    NZERO,WTP003A       *A. YES, CONTINUE\n         LA    R3,MSG6             *NO PARM MESSAGE\n         BAL   R2,WTP030           *GO SEND MESSAGE\n         B     JSSRTN              *RETURN TO JSS\n         DROP  R8                  *YRSQ\nWTP003A  DS    0H\n         LA    R1,WTPPRFDB\n         DROP  R6,R9              *YJDA\n         IATXCNS TYPE=GET         *GET PARAMETER BUFFER\n         ST    R1,UWTPXCNS        *SAVE FOR XCNS TYPE=RELEASE\n         LR    R6,R1              *ADDR OF PARM BUFFER\n         USING CONSMESS,R6\n         SLR   R7,R7              *CLEAR R7\n         IC    R7,CONSCAN         *GET SCAN COUNT\n         LA    R6,CONMESSG        *POINT TO INPUT MESSAGE\n         LA    R6,0(R7,R6)        *POINT TO 1ST CHAR TO TEST\n         LA    R7,10              *COUNT FOR JOB # SEARCH\n         DROP  R6                 *YCNS\nWTP004   DS    0H\n         CLC   0(2,R6),=C'J='      *Q. J= PARAMETER\n         BC    EQ,WTP005           *A. YES, CONTINUE\n         LA    R6,1(R6)            *POINT TO NEXT BYTE\n         BCT   R7,WTP004           *CONTINUE\n         B     WTP021              *JOB # NOT FOUND\nWTP005   DS    0H\n         LA    R6,2(0,R6)          *BUMP PAST J=\n         L     R5,ZEROJBNO         *INITIALIZE REG TO C'0'\n         LA    R7,4                *JOB NUM MAX 4 DIGITS\nWTP006   DS    0H\n         TM    0(R6),X'F0'         *Q. VALID DIGIT?\n         BC    NALLON,WTP021       *A. NO, ERROR\n         SLL   R5,8                *SHIFT NUMBER LEFT ONE BYTE\n         IC    R5,0(R6)            *INSERT LEFTMOST JOB NUM DIGIT\n         LA    R6,1(R6)            *POINT TO NEXT CHARACTER\n         CLI   0(R6),C','          *Q. END OF JOB NUM?\n         BE    WTP007              *A. YES, GO CONVERT NUM TO BINARY\n         CLI   0(R6),C' '          *Q. ANY MORE DIGITS?\n         BE    WTP007              *A. NO, BRANCH\n         BCT   R7,WTP006           *KEEP SEARCHING FOR 4 DIGITS MAX\n         B     WTP021              *ERROR\nWTP007   DS    0H\n         ST    R5,FULLWORD         *GET JOB NUM IN FIELD\n         MVC   MSG1NUM(4),FULLWORD *MOVE JOB NUM TO MSG\n         PACK  FCTWORK(8),FULLWORD\n         CVB   R4,FCTWORK          *PUT JOB NUM IN BINARY\n         STH   R4,LLJOB#           *STORE BINARY JOB NUMBER\n         LA    R7,50               *COUNT 50 CHARS FOR MSG\nWTP007A  DS    0H\n         CLI   1(R6),C''''         *Q. BEGINING OF TEXT\n         BC    EQ,WTP007B          *A. YES, CONTINUE\n         LA    R6,1(R6)            *INCREMENT INTO COMMAND\n         BCT   R7,WTP007A          *CONTINUE\n         B     WTP025              *ERROR\nWTP007B  DS    0H\n         LA    R5,2(R6)            *POINTER TO POSSIBLE END OF TEXT\nWTP008   DS    0H\n         CLI   0(R5),C''''         *Q. END OF TEXT\n         BC    EQ,WTP009           *A. YES, CONTINUE\n         CLI   0(R5),X'40'         *Q. ANY TEXT YET?\n         BC    EQ,WTP008A          *A. NO, CONTINUE\n         OI    WTPFLG1,TEXTFND     *INDICATE TEXT WAS FOUND\nWTP008A  DS    0H\n         LA    R5,1(0,R5)          *MOVE TO NEXT SLOT\n         BCT   R7,WTP008           *SEARCH REMAINDER OF 50 SLOTS\n         TM    WTPFLG1,TEXTFND     *Q. ANY TEXT FOUND?\n         BC    ALLOFF,WTP025       *A. NO, CONTINUE\n         LA    R3,MSG5             *R3 = A(ONLY 1ST 50 CHARS MSG)\n         BAL   R2,WTP030           *GO ISSUE TOO MANY CHARS MSG\nWTP009   DS    0H\n         TM    WTPFLG1,TEXTFND     *Q. TEXT EVER FOUND?\n         BC    ALLOFF,WTP025       *A. NO, CONTINUE\n         LA    R7,2(R6)            *SET BEGINING OF MSG\n         SR    R5,R7               *GET LENGTH OF MSG\n         BC    MINUS+ZEROS,WTP025  *ERROR\n         CL    R5,=F'51'           *Q. LONGER THAN 50 CHARS?\n         BL    WTP010              *A. NO, CONTINUE\n         LA    R5,50               *SEND ONLY 1ST 50 CHARS\nWTP010   DS    0H\n         XC    MSGTEXT,MSGTEXT     *CLEAR MESSAGE FIELD\n         MVC   MSGSTART(50),CLFLD  *CLEAR MESSAGE FIELD\n         BCTR  R5,0                *DECREMENT LENGTH FOR MOVE\n         LA    R3,MSGSTART         *PT TO  MSG\n         EX    R5,MOVE             *MOVE MSG IN\n         LA    R3,1(R5,R3)         *R3 = A(END OF MSG)\n         LA    R2,MSGTEXT          *GET ADDR OF MESSAGE AREA\n         EX    R5,MOVE1            *MOVE IN MESSAGE TEXT\n         LA    R2,1(R5,R2)         *POINT R2 TO END OF MSG\n         ST    R2,FULLWORD         *SAVE END OF MSG ADDRESS\n         MVI   0(R3),C''''         *MOVE IN END QUOTE\n         LA    R5,30(R5)           *UPDTE LENGTH OF MESSAGE\n         STC   R5,MSG              *PUT LENGTH IN MESSAGE\n         LA    R5,52(R5)           *GET TOTAL MESSAGE LENGTH\n         STC   R5,OPERMSG+1        *PUT LENGTH IN MESSAGE\n         IATXCNS TYPE=RELEASE,BUFFER=UWTPXCNS *REL PARM FDB\n         LH    R1,LLJOB#           *GET JOB NUMBER\n         SPACE 1\n***********************************************************************\n*                PREPARE MESSAGE FOR JESMSG DATASET                   *\n***********************************************************************\n         SPACE 1\n         IATXJQE JOBNUM=(R1),ERROR=WTP026\n         LR    R5,R1               *JQE ADDRESS\n         USING JQESTART,R5\n*        LR    R1,R0               *JOB NAME ADDR AND LENGTH\n         LR    R7,R0               *ADDR OF JOB NAME FOR MOVE\n*        SRL   R1,24               *LENGTH ONLY\n*        BCTR  R1,0                *REDUCE LENGTH FOR MOVE\n*        XC    MSG1NAM,MSG1NAM     *CLEAR NAME FIELD\n         MVC   MSG1NAM,0(R7)       *MOVE JOB NAME INTO MESSAGE\n         L     R7,JQERESQ          *RESQUEUE FOR JOB\nWTP011   DS    0H\n         LTR   R7,R7\n         BC    NZERO,WTP011A       *RESQ FOUND, GO INSERT MESSAGE\n         LA    R3,MSG11            *GET NO JESMSG DATASET MESSAGE\n         MVC   JOB#203,MSG1NUM     *PUT JOB NUMBER INTO MESSAGE\n         BAL   R2,WTP030           *TELL OPER CAN'T ACCESS DATASET\n         B     WTP012              *GO SEND MESSAGE TO TSO USER\nWTP011A  DS    0H\n         JESMSG RQ=(R7),TEXT=MSG,TYPE=STD,ERROR=WTP027\n         LA    R3,MSG1             *ACCEPTED MSG\n         BAL   R2,WTP030           *GO SEND MESSAGE\n         USING RQSTART,R7          *ESTABLISH ADDRESSIBILITY\n         SPACE 1\n***********************************************************************\n*              PREPARE MESSAGE FOR TSO USER IF THERE IS ONE           *\n***********************************************************************\n         SPACE 1\nWTP012   DS    0H\n         CLC   JQETUSID,TVTZERO    *Q. TSO ID?\n         BC    EQ,WTP020           *A. NO, INFORM OPERATOR\n         MVC   TSUID(7),JQETUSID   *MOVE TSO USER INTO MESSAGE\n         MVC   TSOID(7),TSUID      *MOVE TSO USER INTO MESSAGE\n         MVC   JOBNAME(8),MSG1NAM  *PUT JOB NAME IN TSO MSG\n         MVC   JOBNUM(4),MSG1NUM   *PUT JOB NUMBER IN TSO MSG\n         MVC   TSOID+7(7),CLFLD    *CLEAR END OF MESSAGE\n         LA    R1,TSOID+7          *GET END OF USER ID FLD\nWTP013   DS    0H\n         BCTR  R1,0                *BACK UP ONE BYTE\n         CLI   0(R1),C' '          *Q. IS IT BLANK\n         BC    EQ,WTP013           *A. YES, CONTINUE\n         MVC   1(7,R1),MSGEND      *MOVE IN END OF SEND MESSAGE\n         L     R2,FULLWORD         *GET ADD OF END OF MESSAGE\n         MVC   0(25,R2),USEREND    *MOVE IN END OF SEND MESSAGE\n         SLR   R3,R3               *CLEAR R3\n         LTR   R7,R7               *Q. IS THERE A RESQUEUE?\n         BC    ZERO,WTP014         *A. NO, BRANCH\n         TM    RQFLG5,RQDSEL       *Q. POSSIBLE TSO LOGON?\n         BC    ALLOFF,WTP014       *A. NO, CONTINUE\n         TM    RQFLG5,RQMVSTSO     *Q. TSO LOGON?\n         BC    ALLOFF,WTP014       *A. NO, CONTINUE\n*****       LOCATE TSO SYSTEM WHEN MSG IS SENT TO A LOGON         *****\n         LA    R2,MAINDATA         *ADDR OF ADDR OF FIRST MAIN\n         USING MPCSTART,R2\n         SL    R2,=A(MPNEXT-MPCSTART) *MINUS CHAIN FIELD OFFSET\nSRCHSYS  DS    0H\n         ICM   R2,X'F',MPNEXT      *GET NEXT MAIN\n         BC    ZERO,WTP028         *NONE FOUND, EXIT WITH ERR MSG\n         CLC   MPSEQNO,RQMPSEQ     *Q. RIGHT ONE?\n         BC    NE,SRCHSYS          *A. NO, KEEP LOOKING\n         LR    R3,R2               *MOVE MPC TO R3 FOR JSERV\n         B     WTP019A             *GO JSERV MSG TO TSO USER\n         DROP  R5,R2               *YJQE,YMPC\n*****                   READ IN THE JDAB                          *****\nWTP014   DS    0H\n         IATXJCT TYPE=RW,JQE=(R5),ERROR=WTP020\n         OI    WTPFLG1,JCTRD       *INDICATE XJCT WAS DONE\n         LR    R6,R1\n         USING JCTSTART,R6\n         JESREAD FDB=JCTJDFDB,ERROR=WTP020,ID=JDAB\n         OI    WTPFLG1,JDABRD      *INDICATE JESREAD FOR JDAB WAS DONE\n         OI    JCTFL8,JCTNCHNG     *INDICATE JCT NOT CHANGED\n         L     R1,JCTJDFDB\n         USING JDABSTRT,R1\nWTP015   DS    0H\n         L     R3,MAINDATA         *POINT TO FIRST MPCTABLE\n         USING MPCSTART,R3\n***   LOCATE SYSTEM FROM WHICH JOB WAS SUBMITTED FOR JSERV OF MSG  ***\nWTP016   DS    0H\n         LTR   R3,R3               *Q. ANY MORE MAINS?\n         BC    ZERO,WTP017         *A. NO, CONTINUE\n         CLC   JDABACMN,MPNAME     *Q. IS THIS THE MAIN?\n         BC    EQ,WTP018           *A. YES, CONTINUE\n         L     R3,MPNEXT           *POINT TO NEXT MAIN\n         B     WTP016              *CONTINUE SEARCH\nWTP017   DS    0H\n         L     R3,MAINACT          *GET ACTIVE MAIN PROC TABLE\nWTP018   DS    0H\n         TM    WTPFLG1,JDABRD      *Q. JESREAD DONE FOR JDAB?\n         BC    ALLOFF,WTP019       *A. NO, CONTINUE\n         ARELEASE FDB=JCTJDFDB\nWTP019   DS    0H\n         IATXJCT TYPE=REL,JQE=(R5),ERROR=WTP028\n         NI    WTPFLG1,FF-JCTRD    *INDICATE JCT RELEASED\n         DROP  R1                  *JDAB\n*****           JSERV MESSAGE TO TSO USER WHO OWNS THE JOB        *****\nWTP019A  DS    0H\n         JSERV TEXT=OPERMSG,DEST=DSTC34,MPC=(R3),MOD=MODSVC34\n         DROP  R3                  *YMPC\n         LA    R3,MSG9             *GET ADDR OF SENT TO USER MSG\n         BAL   R2,WTP030           *INFORM OPER MSG SENT TO USER\n         B     JSSRTN\nWTP020   DS    0H\n         TM    WTPFLG1,JCTRD       *NEED RELEASE OF JCT?\n         BC    ALLOFF,WTP020A      *NO, BRANCH\n         IATXJCT TYPE=REL,JQE=(R5),ERROR=WTP028\nWTP020A  DS    0H\n         LA    R3,MSG8             *GET ADDR OF NO TSOUSER MSG\n         BAL   R2,WTP030           *INFORM OPER NO TSO USER FOR JOB\n         B     JSSRTN\nWTP021   DS    0H\n         LA    R3,MSG2             *GET ADDR OF J= MESSAGE\n         BAL   R2,WTP030           *SEND JOB NUM MISSING OR INVALID MSG\nWTP022   DS    0H\n         IATXCNS TYPE=RELEASE,BUFFER=UWTPXCNS *REL PARM FDB\n         B     JSSRTN             *RETURN TO JSS\n         SPACE 1\nWTP025   LA    R3,MSG4             *R3 = A(NO MSG TEXT MSG)\n         BAL   R2,WTP030           *GO ISSUE NO TEXT FOUND MSG\n         B     WTP022              *BR TO RETURN\nWTP026   DS    0H\n         LA    R3,MSG7             *ADDR OF JOB NOT IN SYS MSG\n         MVC   NOJOB#(4),MSG1NUM   *TELL OPER JOB NOT FOUND IN SYSTEM\n         BAL   R2,WTP030\n         B     JSSRTN              *RETURN TO JSS\nWTP027   DS    0H\n         LA    R3,MSG10            *ADDR OF CAN'T SEND MSG\n         BAL   R2,WTP030           *TELL OPER CAN'T SEND TO THIS JOB\n         B     JSSRTN\nWTP028   DS    0H\n         LA    R3,MSG3             *WTP ERROR MESSAGE\n         BAL   R2,WTP030           *GO SEND WTP PROCESSING ERROR\nJSSRTN   DS    0H\n         SR    R15,R15\n         L     R14,JSSRETRN\n         BR    R14                 *RETURN TO JSS\nWTP030   DS    0H                  *MESSAGE SEND ROUTINE\n         SR    R0,R0               *CLEAR REG\n         LH    R0,LLCONS           *GET CALLING CONSOLE ID\n         MESSAGE TEXT=(R3),CONS=(R0)\n         BR    R2                  *MSG SENT - RETURN TO PROCESSING\n         EJECT\n***********************************************************************\n*                       M E S S A G E S                               *\n***********************************************************************\n         SPACE 1\nOPERMSG  DC    AL2(MSGLEN)\nSE       DC    CL4'SE '''          *SEND COMMAND TO TSO\n         DC    C'IAT0002 MSG FROM OPERATOR FOR JOB '\nJOBNAME  DC    CL8' '              *INSERT JOB NAME\n         DC    C'('\nJOBNUM   DC    CL4' '              *INSERT JOB NUMBER\n         DC    C') : '\nMSGTEXT  DC    CL50' '             *OPERATOR MESSAGE\n         DC    C''',USER=('        *USER KEYWORD\n         DC    CL7' '              *USER ID\n         DC    C'),LOGON'          *END OF MESSAGE\n         DC    XL2'00'             *PLACE FOR CONS ID\nMSGLEN   EQU   (*-OPERMSG)         *LENGTH OF COMMAND\n*\nUSEREND  DC    C''',USER=('        *USER KEYWORD\nTSOID    DC    CL7' '              *USER ID\n         DC    C'),LOGON'          *END OF MESSAGE\n         DC    XL2'0'              *CONS ID\n*\nMSG      DC    AL1(MSGLN)\nMSG002   DC    C'IAT0002 MSG FROM OPERATOR '''\nMSGSTART DC    50CL1' '\n         DC    CL3' '              *SPACE FOR CLOSING QUOTE\nMSGEND   DC    C'),LOGON'          *END OF MESSAGE\nMSGLN    EQU   *-MSG002\n*\nMSG1     DC    AL1(MSG1E)\nMSG102   DC    C'IAT0102 MESSAGE ACCEPTED FOR '\nMSG1NAM  DC    CL8' '\n         DC    C'('\nMSG1NUM  DC    CL4' '\n         DC    C')'\nMSG1E    EQU   *-MSG102\n*\nMSG2     DC    AL1(MSG2E)\nMSG202   DC    C'IAT0202 J= MISSING OR INVALID'\nMSG2E    EQU   *-MSG202\n*\nMSG3     DC    AL1(MSG3E)\nMSG302   DC    C'IAT0302 ERROR IN PROCESSING WTP - CANNOT SEND MESSAGE'\nMSG3E    EQU   *-MSG302\n*\nMSG4     DC    AL1(MSG402E)\nMSG402   DC    C'IAT0402 MESSAGE TEXT MISSING OR INVALID'\nMSG402E  EQU   *-MSG402\n*\nMSG5     DC    AL1(MSG5E)\nMSG502   DC    C'IAT0502 ONLY FIRST 50 CHARS OF TEXT TO BE INSERTED'\nMSG5E    EQU   *-MSG502\n*\nMSG6     DC    AL1(MSG6E)\nMSG602   DC    C'IAT0602 NO PARAMETER SPECIFIED'\nMSG6E    EQU   *-MSG602\n*\nMSG7     DC    AL1(MSG7E)\nMSG702   DC    C'IAT0702 JOB '\nNOJOB#   DC    CL4' '\n         DC    C' NOT IN SYSTEM'\nMSG7E    EQU   *-MSG702\n*\nMSG8     DC    AL1(MSG8E)\nMSG802   DC    C'IAT0802 MESSAGE NOT SENT TO TSO USER, JOB HAS NO USER X\n               ID'\nMSG8E    EQU   *-MSG802\n*\nMSG9     DC    AL1(MSG003E)\nMSG0003  DC    C'IAT0003 MESSAGE SENT TO USER ('\nTSUID    DC    C'$WC    )'\nMSG003E  EQU   *-MSG0003\n*\nMSG10    DC    AL1(MSG10E)\nMSG103   DC    C'IAT0103 MESSAGE CANNOT BE SENT TO SPECIFIED JOB'\nMSG10E   EQU   *-MSG103\n*\nMSG11    DC    AL1(MSG11E)\nMSG203   DC    C'IAT0203 CANNOT ACCESS JESMSG DATASET FOR JOB '\nJOB#203  DC    CL4' '\nMSG11E   EQU   *-MSG203\n         SPACE 2\n*****    E X E C U T E D    I N S T R U C T I O N S               *****\n         SPACE 1\nMOVE     MVC   0(0,R3),2(R6)       *OBJECT OF EX INSTRUCTION\nMOVE1    MVC   0(0,R2),2(R6)       *PUT MSG TEXT IN TSO MSG\nNAMEMOVE MVC   MSG1NAM(0),0(R7)    *MOVE IN JOB NAME\n         EJECT\n***********************************************************************\n*             D A T A   A N D   W O R K   A R E A S                   *\n***********************************************************************\n         SPACE 1\nFULLWORD DS    F                   *FULLWORD FOR MESSAGE PREPARATION\nZEROJBNO DC    C'0000'             *INITIAL JOB NO\nLLCONS   DC    H'0'                *CALLING CONSOLE ID SAVE AREA\nLLJOB#   DC    H'0'                *BINARY JOB NUMBER\nWTPPRFDB DC    XL(FDBSRFL)'00'\nUWTPXCNS DC    F'0'\nCLFLD    DC    50CL1' '\n         SPACE 1\nWTPFLG1  DC    X'00'\n*****                   DEFINITIONS OF WTPFLG1                    *****\nTEXTFND  EQU   X'01'               *INDICATE MESSAGE TEXT WAS FOUND\nJCTRD    EQU   X'02'               *INDICATE JCT READ WAS DONE\nJDABRD   EQU   X'04'               *INDICATE JDAB READ WAS DONE\n         SPACE 2\n         LTORG\nUMODNUM  DC    CL7'AJSW038'\nAPARNUM  DC    CL5' '\nPTFNUM   DC    CL5'SP215'                                               9999998\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW039": {"ttr": 9988, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD(AJSW039)     /* CHANGE TO VARY 'ALL' COMMAND:\n\n       CHANGE VARY 'ALL' CMD TO VARY SYSTEMS INSTEAD OF DEVICES\n                                                                 */.\n++VER(Z038) FMID(HJS2215).\n++SRCUPD(IATMOVR).\n./ CHANGE NAME=IATMOVR\n*                                                               AJSW039\n*        USER MODS =                                            AJSW039\n*                                                               AJSW039\n*            -  CHANGE 'VARY ALL ' COMMAND TO VARY SYSTEMS      AJSW039\n*               RATHER THAN DEVICES                             AJSW039\n*                                                               AJSW039\n*            -  ALLOW *V,XXX,YY,ALL TO VARY DEVICE FOR ALL      AJSW039\n*               SYSTEMS                                         AJSW039\n*                                                               AJSW039\n         XC    VALLFLG,VALLFLG    *FLG MEANS ALL V FOR ALL SYS  AJSW039\n*        B     MSSDRVR        ALL, CAN ONLY BE MSS REQ @ZA88434 AJSW039\n         CLC   =C'ALL',REQUEST2   *VARY OF ALL SYS ON ALL SYS?  AJSW039\n         BC    EQ,REQ4ERR         *YES, THEN ERROR, WRITE MSG   AJSW039\n         CLI   REQUEST2+3,C'-'    *IS VARY OF RANGE ON ALL SYS? AJSW039\n         BC    EQ,REQ4ERR         *YES, ERROR AND WRITE MSG     AJSW039\n         OI    VALLFLG,X'01'      *VARY DEVICE ON ALL SYSTEMS?  AJSW039\n         B     SETDRVR             PROCESS VARY XXX,ON/OFF,ALL  AJSW039\n*SETDVR02CLC   MPNAME,REQUEST4     IS THIS IT          @G26FI19 AJSW039\nSETDVR02 DS    0H                                               AJSW039\n         CLI   VALLFLG,X'01'      *VARY FOR ALL SYSTEMS?        AJSW039\n         BC    NE,UMODVR10        *B.I.N.                       AJSW039\n         MVC   REQUEST4,MPNAME    *GET FIRST SYSTEM             AJSW039\n         ST    R4,STR4MPC         *SAVE R4 AS MPC POINTER       AJSW039\nUMODVR10 DS    0H                                               AJSW039\n         CLC   MPNAME,REQUEST4     IS THIS IT?                  AJSW039\n         USING MPCSTART,R1                                      AJSW039\n         CLC   REQUEST2(4),ALLREQ *Q. VARY FOR ALL SYSTEMS?     AJSW039\n         BNE   NOTALLVO           *A. NO, THEN VARY NORMALLY    AJSW039\n         MVC   NEXTVARY,MPNEXT    *A. YES, SAVE NEXT MPC PNTR   AJSW039\n         MVC   SUPVADD(8),MPNAME  *PUT SYSTEM NAME IN MESSAGE   AJSW039\n         B     ALLVMSG            *VARY OFF THIS SYSTEM         AJSW039\nNOTALLVO DS    0H                 *NOT AN ALL SYSTEM VARY       AJSW039\n         LR    R5,R1              *SAVE CONTENTS OF R1          AJSW039\n*        DROP  R4                  MPC                     @H7A AJSW039\n         LR    R1,R5              *RESTORE CONTENTS OF R1       AJSW039\n         CLC   REQUEST2(4),ALLREQ *Q. VARY FOR ALL SYSTEMS      AJSW039\n         BC    NE,BZNOPATH        *A. NO, GO ISSUE NOPATH MSG   AJSW039\n         MVC   NEXTVARY,MPNEXT    *GET PTR TO NEXT MPC ENTRY    AJSW039\nBZNOPATH DS    0H                                               AJSW039\n         DROP  R4                 MPC                           AJSW039\n         CLC   REQUEST2(4),ALLREQ *Q. VARY FOR ALL SYSTEMS?     AJSW039\n         BE    NOFRSTMP           *A. YES, DON'T GET FIRST MP   AJSW039\nNOFRSTMP DS    0H                 *DON'T GET FIRST MP ENTRY     AJSW039\n         CLC   REQUEST2(4),ALLREQ *Q. VARY FOR ALL SYSTEMS?     AJSW039\n         BNE   NOTALLV            *A. NO, THEN VARY NORMALLY    AJSW039\n         MVC   NEXTVARY,MPNEXT    *A. YES, SAVE NEXT MPC PNTR   AJSW039\n         MVC   SUPVADD(8),MPNAME  *PUT SYSTEM NAME IN MESSAGE   AJSW039\n         B     SUPON10            *VARY ON THIS SYSTEM          AJSW039\nNEXTVARY DS    F                  *NEXT SYSTEM TO VARY          AJSW039\nNOTALLV  DS    0H                 *NOT AN ALL SYSTEM VARY       AJSW039\n*PRNTVSP1 MVC  SUPVADD(EIGHT),REQUEST2 MOVE DEV TO MSG  @ZA44383AJSW039\nPRNTVSP1 CLC   REQUEST2(4),ALLREQ *Q. VARY FOR ALL SYSTEMS?     AJSW039\n         BE    ALLVMSG            *A. YES, THEN LEAVE MESSAGE   AJSW039\n         MVC   SUPVADD(8),REQUEST2 *MOVE DEVICE NAME INTO MSG   AJSW039\nALLVMSG  DS    0H                 *LEAVE ORIGINAL MESSAGE       AJSW039\n*        OI    PARMFLG2,VALL+NOPRINT  SET ALL SWITCHES          AJSW039\n         SPACE 1                                                AJSW039\n*-------------------------------------------------------------* AJSW039\n*                    VARY ALL SYSTEMS                         * AJSW039\n*-------------------------------------------------------------* AJSW039\n         L     R1,MAINDATA        *POINT TO FIRST MPCTL TABLE   AJSW039\n         USING MPCSTART,R1                                      AJSW039\nFINDSUP  CLC   SUPDD,MPNAME       *Q. IS THIS FIRST MAIN SUP?   AJSW039\n         BE    VARYALL            *A. YES, VARY ALL SYSTEMS     AJSW039\n         L     R3,SUPCHAIN        *A. NO, POINT TO NEXT SUP     AJSW039\n         B     FINDSUP            *CHECK THIS ENTRY             AJSW039\n         SPACE 1                                                AJSW039\nVARYALL  LA    R9,POST            *SET RETURN ADDRESS           AJSW039\n         B     VARYSUP            *VARY ALL SYSTEMS             AJSW039\n         SPACE 1                                                AJSW039\n*ALL0010 DS    0H                                          @H7C AJSW039\n*        LTR   R3,R3               ANY LEFT                @H7A AJSW039\n*        BC    ZERO,ALL0020        NO. BRANCH                   AJSW039\n*        BAL   R9,VARYSUP          YES. GO DO THE VARY          AJSW039\n*        CLC   VARYCT,VARYLIM      SA LIMIT REACHED?       @H7A AJSW039\n*        BC    LT,ALL0015          NO, GET NEXT DEVICE     @H7A AJSW039\n*        BAL   R9,SENDVRY           AND SET UP AND SEND SA @H7A AJSW039\n*ALL0015 DS    0H                                          @H7A AJSW039\n*        L     R3,SUPCHAIN         GET NEXT SUPUNIT             AJSW039\n*        LA    R3,0(R3)                                         AJSW039\n*        B     ALL0010             DO IT                        AJSW039\n*ALL0020 TM    PARMFLG2,VCNS       VARY CONSOLE?                AJSW039\n*        BC    ALLON,ALLDONE       YES                     @H7C AJSW039\n*        CLC   VARYCT,TVTZERO    ANY NEED FOR VERIFY POST? @H7A AJSW039\n*        BC    EQ,ALL0025          NO, GO PROCESS SETUNITS @H7A AJSW039\n*        BAL   R9,SENDVRY         ELSE, SET UP AND SEND SA @H7A AJSW039\n*ALL0025 DS    0H                                          @H7A AJSW039\n*        L     R4,MAINDATA      OINT TO FIRST MPCTL TABLE ENTRY AJSW039\n*        USING MPCSTART,R4                                      AJSW039\n*ALL0030 LTR   R4,R4               ANY LEFT                     AJSW039\n*        BC    ZERO,ALL0060        NO. BRANCH                   AJSW039\n*        L     R3,MPUNITS          YES. GET FIRST SETUNIT ENTRY AJSW039\n*        USING SETSTART,R3                                      AJSW039\n*        LTR   R3,R3               ANY EXIST                    AJSW039\n*        BC    ZERO,ALL0050        NO. BRANCH                   AJSW039\n*ALL0040 CLI   SETTERM,X'FF'       ANY LEFT                     AJSW039\n*        BC    EQ,ALL0050          NO. BRANCH                   AJSW039\n*        BAL   R9,VARYSET          YES. GO DO VARY              AJSW039\n*        LA    R3,SETEND           POINT TO NEXT SETUNIT        AJSW039\n*        CLC   VARYCT,VARYLIM      SA LIMIT REACHED?       @H7A AJSW039\n*        BC    LT,ALL0040          NO, GET NEXT DEVICE     @H7A AJSW039\n*        LA    R9,ALL0040         ELSE, SET RETURN ADDRESS @H7A AJSW039\n*        B     SENDVRY        SET UP AND SEND STAGING AREA @H7C AJSW039\n*ALL0050 DS    0H                                          @H7A AJSW039\n*        CLC   VARYCT,TVTZERO    ANY NEED FOR VERIFY POST? @H7A AJSW039\n*        BC    EQ,ALL0055          NO, GET NEXT PROCESSOR  @H7A AJSW039\n*        BAL   R9,SENDVRY         ELSE, SET UP AND SEND SA @H7A AJSW039\n*ALL0055 DS    0H                                          @H7A AJSW039\n*        L     R4,MPNEXT        GET NEXT MPCTL TABLE ENTRY @H7C AJSW039\n*        B     ALL0030             DO IT                        AJSW039\n*ALL0060 L     R5,RJPTAB    POINT TO RESIDENT RJP TERM @Z40LB00 AJSW039\n*        LTR   R5,R5               ANY EXIST           @Z40LB00 AJSW039\n*        BNZ   ALL0070             BRANCH OF YES       @G26AI20 AJSW039\n*POST06  CLI   POSTJSS,HEXZERO     ANYTHING FOR JSS    @G26FI19 AJSW039\nPOST06   DS    0H                 *CHECK FOR ALL SYSTEM VARY    AJSW039\n         CLC   REQUEST2(4),ALLREQ *IS THIS AN ALL SYSTEM VARY?  AJSW039\n         BNE   CHECKJSS           *A. NO, CHECK JSS             AJSW039\n         L     R1,NEXTVARY        *A. YES, POINT TO NEXT MPC    AJSW039\n         LTR   R1,R1              *Q. IS THIS THE LAST VARY?    AJSW039\n         BZ    CHECKJSS           *A. YES, CHECK JSS            AJSW039\n         USING SUPSTART,R3                                      AJSW039\n         USING MPCSTART,R1                                      AJSW039\nFINDSUP2 CLC   SUPDD,MPNAME       *Q. IS THIS THIS MAIN'S SUP?  AJSW039\n         BE    VARYTHIS           *A. YES, VARY THIS SYSTEM     AJSW039\n         L     R3,SUPCHAIN        *A. NO, POINT TO NEXT SUP     AJSW039\n         B     FINDSUP2           *CHECK THIS ENTRY             AJSW039\nVARYTHIS LA    R9,POST            *SET RETURN                   AJSW039\n         TM    PARMFLG2,VOFF      *Q. IS IT A VARY OFF?         AJSW039\n         BC    ALLOFF,SUPON4      *A. NO, VARY IT ON            AJSW039\n         B     SUPOFF             *A. YES, VARY IT OFF          AJSW039\n         DROP  R3                                               AJSW039\nCHECKJSS DS    0H                 *CHECK JSS                    AJSW039\n         CLI   POSTJSS,HEXZERO    *ANYTHING FOR JSS?            AJSW039\n         CLC   REQUEST2(4),ALLREQ *IS THIS AN ALL SYSTEM VARY?  AJSW039\n         BNE   NOCHANGE           *A. NO, LEAVE MESSAGE         AJSW039\n         MVC   VCREJADD(3),ALLREQ *A. YES, MOVE 'ALL' TO MSG    AJSW039\nNOCHANGE DS    0H                 *LEAVE MESSAGE                AJSW039\n         CLI   VALLFLG,X'01'      *VARY FOR ALL SYSTEMS?        AJSW039\n         BC    NE,VALLRTN         *B.I.N.                       AJSW039\n         L     R4,STR4MPC         *FETCH LAST MP POINTER        AJSW039\n         USING MPCSTART,R4        *ESTABLISH ADDRESSIBILITY     AJSW039\n         L     R4,MPNEXT          *GET NEXT MP ENTRY            AJSW039\n         LTR   R4,R4              *GOT ANY?                     AJSW039\n         BC    NE,SETDVR02        *YES, THEN V FOR THAT SYSTEM  AJSW039\nVALLRTN  DS    0H                                               AJSW039\nVALLFLG  DC    X'00'              *VARY DEVICE FOR ALL SYSTEMS  AJSW039\nSTR4MPC  DC    F'0'               *SAVE R4 AS MPC POINTER       AJSW039\nUMODNUM  DC    CL7'AJSW039'       *USER NUMBER\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW040": {"ttr": 9992, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD(AJSW040)     /*\n     SYSLOG EXTERNAL WTR EXECUTIVE TO STORE 14 DAYS OF SYSLOG\n     DATASETS ON MSSLG1 AND COPY DAILY SYSLOG DATASETS TO MICROFICHE\n                                                    */.\n++VER(Z038) FMID(HJS2215).\n++JCLIN.\n//GEN11 JOB WC07Z0044,'531-0 C SINGER'\n//SG21 EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,AC=1',\n//    UNIT='3350',SER=IPLXXX,N=GEN1,NAME=JES3LIB,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=MVS3.INCLUDE\n//SYSLIN DD *\n  INCLUDE INCLUDE(JESLOGX)\n NAME JESLOGX(R)\n++SRC(JESLOGX) DISTLIB(ASRCLIB) .\n         TITLE 'JESLOGX  -  SYSLOG / EXTERNAL WRITER EXECUTIVE'\n***********************************************************************\n*                                                                     *\n* MODULE NAME = JESLOGX                                               *\n*                                                                     *\n* FUNCTION = THIS MODULE HANDLES SYSLOG (SYSTEM HARDCOPY) CLOSE       *\n*            COMMANDS,  EXTERNAL WRITER START COMMANDS, ALLOCATION    *\n*            OF THE JESLOG DATASET, DEALLOCATION OF JESLOG DATA       *\n*            SET FROM 14 DAYS PRIOR, AND COPIES THE JESLOG DATA       *\n*            SET TO MICROFICHE AT END OF DAY.                         *\n*                                                                     *\n* NOTES = NONE                                                        *\n*                                                                     *\n* ATTRIBUTES = NONE                                                   *\n*                                                                     *\n* ENTRY POINT = JESLOGX                                               *\n*                                                                     *\n* LINKAGE = VIA PGM=JESLOGX,PARM='WAD'                                *\n*             IF A PARM IS BLANK, THAT FUNCTION WILL NOT BE           *\n*             EXECUTED; OTHERWISE:                                    *\n*             W - SPACE PARMETER TO CLOSE DATA SET AND RLSE SPACE.    *\n*                 R = RELEASE SPACE.                                  *\n*             A - DATE USED FOR DSN FOR ALLOC/CATLG OF DATA SET.      *\n*                 T = TODAY.                                          *\n*                 Y = YESTERDAY.                                      *\n*             D - DATE USED FOR EXTERNAL WRITER DATASET.              *\n*                 T = TODAY.                                          *\n*                 Y = YESTERDAY.                                      *\n*                                                                     *\n* REGISTER USAGE = R11 - BASE                                         *\n*                                                                     *\n* LAST                                                                *\n* UPDATE  =                                                           *\n*                                                                     *\n* PROGRAM                                                             *\n* HISTORY =                                                           *\n*                                                                     *\n* DATE    = SEE MODID MACRO IN HOUSEKEEPING SECTION.                  *\n*                                                                     *\n***********************************************************************\n         EJECT\n*---------------------------------------------------------------------*\n*                      MVS HOUSEKEEPING                               *\n*---------------------------------------------------------------------*\nJESLOGX  CSECT\n         STM   R14,R12,12(R13)    *SAVE REGS\n         LR    R11,R15            *SET BASE REG\n         USING JESLOGX,R11\n         L     R4,0(R1)           *GET PLIST ADDR\n         SPACE 2\n         MODID\n         ST    R13,JESLSAV+4      *SAVE HSA\n         LA    R1,JESLSAV         *GET SAVE AREA...\n         ST    R1,8(R13)           ...CHAINED\n         LA    R13,JESLSAV        *R13 --> SAVE AREA\n         SPACE 2\n*---------------------------------------------------------------------*\n*                       GET DAY OF YEAR                               *\n*---------------------------------------------------------------------*\n         TIME  DEC                *R1 - 00YYDDD+  R0 - HHMMSSTH\n         ST    R1,YYDDD           *PREPARE FOR UNPACK\n         UNPK  TODAY(3),YYDDD+2(2) *GET TODAYS DATE\n         OI    TODAY+2,X'F0'      *MAKE IT READABLE\n         SP    YYDDD+2(2),=P'1'   *GET YESTERDAYS DATE...\n         UNPK  YSTRDAY(3),YYDDD+2(2) ...AND MOVE IT\n         OI    YSTRDAY+2,X'F0'    *ENSURE ITS 'FX' NOT 'CX'\n         EJECT\n*---------------------------------------------------------------------*\n*                     CHECK PARMS 'WAD'                               *\n*---------------------------------------------------------------------*\n         CLC   0(2,R4),=H'3'      *Q. ARE THERE 3 PARMS?\n         BE    PARM100            *A. YES\nJLX000   WTO  'IAT0007 JLX PARMS MISSING OR INVALID',ROUTCDE=11,       X\n               MCSFLAG=HRDCPY\n         B     ABEND              *EXIT\nPARM100  DS    0H                 *CHECK 'W  '\n         MVC   PARMS,2(R4)        *MOVE PARMS SO WE CAN USE R4\n         SPACE\n         CLI   W,X'40'            *Q. IS IT BLANK?\n         BE    PARM200            *A. YES\n         CLI   W,C'R'             *Q. IS RLSE REQUESTED\n         BNE   JLX000             *A. NO, ERROR\n         SPACE\nPARM200  DS    0H                 *CHECK ' A '\n         CLI   A,X'40'            *Q. IS IT BLANK?\n         BE    PARM300            *A. YES\n         CLI   A,C'T'             *Q. IS IT TODAY?\n         BE    PARM300            *A. YES\n         CLI   A,C'Y'             *Q. IS IT YESTERDAY?\n         BNE   JLX000             *A. NO, BAD\n         SPACE\nPARM300  DS    0H                 *CHECK '  D'\n         CLI   D,X'40'            *Q. IS IT BLANK?\n         BE    ALOC100            *A. YES\n         CLI   D,C'T'             *Q. IS IT TODAY?\n         BE    ALOC100            *A. YES\n         CLI   D,C'Y'             *Q. IS IT YESTERDAY?\n         BNE   JLX000             *A. NO, BAD\n         EJECT\n*---------------------------------------------------------------------*\n*                    PROCESS ALLOCATION REQUEST                       *\n*---------------------------------------------------------------------*\nALOC100  DS    0H\n         CLI   A,X'40'            *Q. IS ALLOCATION REQUESTED?\n         BE    XWTR100            *A. NO\n         LA    R1,TODAY           *ASSUME TODAY\n         CLI   D,C'T'             *Q. USE TODAY'S DATE?\n         BE    ALOC110            *A. YES\n         LA    R1,YSTRDAY         *POINT TO DAY MINUS ONE\n*---------------------------------------------------------------------*\n*         DYNAMICALLY ALLOCATE DATASET FROM 14 DAYS PREVIOUS          *\n*---------------------------------------------------------------------*\nALOC110  DS    0H\n         CLI   A,X'40'            *WAS A DATASET ALLOCATED?\n         BE    ALOC190            *NO,THEN DO NOT DEALLOCATE ONE\n         CP    YYDDD+2(2),=PL2'14' *FAR ENOUGH INTO THIS YEAR?\n         BH    ALOC120            *YES, THEN THE DATE IS OK\n         AP    YYDDD,=P'365'      *ADD TO GET YEAR\nALOC120  DS    0H\n         SP    YYDDD,=P'14'        *SUBTRACT TO GET DAY\n         UNPK  ALOCDAY(3),YYDDD+2(2)\n         OI    ALOCDAY+2,X'F0'    *MAKE NUMBER READABLE\n         LA    R2,ALOCDSN         *GET DATASET NAME\n         ICM   R2,8,ALOCDE        *GET LENGTH OF NAME\n         MODESET KEY=ZERO,MODE=SUP *GET INTO SUPERVISOR STATE\n         ALLOCATE TYPE=DSNALLOC,MF=S,                                  X\n               DYNERR=(WTP,,ALOC140),FLAGS1=NOCNV,                     X\n               FLAGS2A=(WTVOL,WTDSN,WTUNT,OFFLN,MOUNT),                X\n               DDNAME='UJSLOG',DSNAME=2,SUFFIX=UJL,                    X\n               DISP=('OLD','DELETE')\nALOC130  DS    0H\n         MODESET KEY=NZERO,MODE=PROB *RESET TO PROB PGM KEY\nJLX399   WTO  'IAT0107 JLX ERROR ALLOCATING DATASET TO BE DELETED',    X\n               ROUTCDE=11,MCSFLAG=HRDCPY\n         B     ALOC190            *CONT PROCESSING\n         EJECT\n*---------------------------------------------------------------------*\n*           THIS DELETES DATASET FROM 14 DAYS PREVIOUS                *\n*---------------------------------------------------------------------*\nALOC140  DS    0H\n         MODESET KEY=ZERO,MODE=SUP *GET INTO SUPERVISOR STATE\n         ALLOCATE TYPE=UNALLOC,MF=S,                                   X\n               DYNERR=(WTP,,ALOC160),FLAGS1=NOCNV,                     X\n               FLAGS2A=(WTVOL,WTDSN,WTUNT,OFFLN,MOUNT),                X\n               DDNAME='UJSLOG',DSNAME=2\nALOC150  DS    0H\n         MODESET KEY=NZERO,MODE=PROB *RESET TO PROB PGM KEY\nJLX499   WTO  'IAT0207 JLX ERROR DELETING JESLOG DATASET',ROUTCDE=11,  X\n               MCSFLAG=HRDCPY\n         B     ABEND\nALOC160  DS    0H\n         MODESET KEY=NZERO,MODE=PROB *RESET TO PROB PGM KEY\n         EJECT\n*---------------------------------------------------------------------*\n*                  GET NEW DATA SET FOR TODAY                         *\n*---------------------------------------------------------------------*\nALOC190  DS    0H\n         LA    R1,TODAY           *ASSUME TODAY\n         CLI   D,C'T'             *USE TODAY'S DATE?\n         BE    ALOC195            *YES, BRANCH\n         LA    R1,YSTRDAY         *POINT TO DAY MINUS ONE\nALOC195  DS    0H\n         MVC   ALOCDAY(3),0(R1)   *MOVE IN DATE\n         MVC   JLX201+45(3),0(R1) *MOVE DATE INTO MSG ALSO\n         LA    R2,ALOCDSN         *POINT TO DSN\n         ICM   R2,8,ALOCDE        *GET LENGTH OF DATA SET NAME\n         MODESET KEY=ZERO,MODE=SUP *GET INTO SUPERVISOR STATE\n         SPACE\n         L     R3,PSAAOLD-PSA     *LOAD ASCB OLD POINTER\n         MVC    ASCBSWTL-ASCB(4,R3),=XL4'00007080'  SET TIMER FOR 8 HRS\n         SPACE\n         EJECT\n*---------------------------------------------------------------------*\n*                        ALLOCATE MACRO                               *\n*---------------------------------------------------------------------*\n         ALLOCATE TYPE=DSNALLOC,MF=S,                                  X\n               SUFFIX=JLX,DYNERR=(WTP,,ALOC300),FLAGS1=NOCNV,          X\n               FLAGS2A=(WTVOL,WTDSN,WTUNT,OFFLN,MOUNT),                X\n               DDNAME='JESLOG',                                        X\n               DSNAME=2,          *DSN IN R2                           X\n               DISP=('NEW','CATLG','DELETE'),                          X\n               FREE=CLOSE,                                             X\n               UNIT='3380',                                            X\n               SPACE=(CYL,'50','10'),                                  X\n               VOLSER='MSSLG1'\n         EJECT\n*---------------------------------------------------------------------*\n*                          DYNALLOC ERROR                             *\n*---------------------------------------------------------------------*\nALOC200  DS    0H\n         MODESET KEY=NZERO,MODE=PROB *RESET TO PROB PGM KEY\nJLX299   WTO  'IAT0307 JLX ERROR ALLOCATING JESLOG DATASET',ROUTCDE=11,X\n               MCSFLAG=HRDCPY\n         B     ABEND              *SINCE NO DYNALLOC, GO BYEBYE\n         EJECT\n*---------------------------------------------------------------------*\n*                          DYNALLOC OK                                *\n*---------------------------------------------------------------------*\nALOC300  DS    0H\n         MODESET KEY=NZERO,MODE=PROB *RESET TO PROB PGM KEY\n         OPEN  (JESLOG,(OUTPUT))  *OPEN IT\n         PUT   JESLOG,JLXDUMMY    *PUT OUT ONE RECORD\n         CLOSE (JESLOG)           *CLOSE, FREE, AND CATALOG IT\nJLX201   WTO  'IAT0407 JLX JESLOG ALLOCATED FOR DAY=XXX',ROUTCDE=11,   X\n               MCSFLAG=HRDCPY\n         EJECT\n*---------------------------------------------------------------------*\n*                 PROCESS XWTRPROC START REQUEST                      *\n*---------------------------------------------------------------------*\nXWTR100  DS    0H\n         CLI   D,X'40'            *Q. IS XWTRPROC REQUESTED?\n         BE    EXIT100            *A. NO, JESLOG IS DONE.\n         LA    R1,TODAY           *ASSUME TODAY\n         CLI   D,C'T'             *USE TODAY'S DATE?\n         BE    XWTR110            *YES, BRANCH\n         LA    R1,YSTRDAY         *POINT TO DAY MINUS ONE\nXWTR110  DS    0H\n         MVC   JLX301+41(3),0(R1) *MOVE IN DATE\n         MVI   JLX301+53,C'L'     *MOVE IN CLASS\n         MVC   WTRDATE(3),0(R1)   *MOVE IN DATE\n         MVI   WTRCLASS,C'L'      *MOVE IN CLASS\n         CLI   W,X'40'            *WAS SPACE RELEASE REQUESTED?\n         BNE   XWTR120            *YES\n         MVC   WTRCLASS+1(33),=CL33' ' *BLANK OUT SPACE\n         B     XWTR130            *ISSUE WTO\nXWTR120  DS    0H\n         MVC   WTRSPACE(29),=CL29''',SPACE=(CYL,(50,10),RLSE)'''\nXWTR130  DS    0H\nJLX301   WTO  'IAT0507 JLX START XWTRPROC - DAY=XXX - CLASS=X',        X\n               ROUTCDE=11,MCSFLAG=HRDCPY\n         MODESET KEY=ZERO,MODE=SUP *GET INTO SUPERVISOR STATE\n         SR    R0,R0              *CLEAR\n         LA    R1,STARTWTR        *POINT TO COMMAND\n         SVC   34                 *ISSUE COMMAND\n         MODESET KEY=NZERO,MODE=PROB *RESET TO PROB PGM KEY\n         CLC   PARMS(3),=C'R Y'   *IS THIS CLOSE OF DAY?\n         BC    EQ,XWTR140         *IF YES, GENER DATA TO MICROFICHE\n         CLC   PARMS(3),=C'R T'   *IS THIS CLOSE OF DAY?\n         BC    NE,EXIT100         *IF NOT, END\n*---------------------------------------------------------------------*\n*               GENER THE JESLOG DATASET TO MICROFICHE                *\n*---------------------------------------------------------------------*\nXWTR140  DS    0H\n         OPEN  (IRDCB,(OUTPUT))   *OPEN INTRDR FILE\n         L     R3,=A(INTJCL)      -> FIRST CARD IMAGE           $WC3JBD\n         USING INTJCL,R3          -> FIRST CARD IMAGE           $WC3JBD\n         MVC   GENERDAY(3),WTRDATE *MOVE DATE TO DS NAME IN SYSUT1\n         MVC   RLSDAY1(3),WTRDATE *MOVE DATE TO DS NAME IN SYSUT1\n         MVC   RLSDAY2(3),WTRDATE *MOVE DATE TO DS NAME IN SYSUT2\n         LA    R2,CARD#           NUMBER OF CARD IMAGES         $WC3JBD\n         USING INTJCL,R3          -> FIRST CARD IMAGE           $WC3JBD\nXWTR140A DS    0H                                               $WC3JBD\n         PUT   IRDCB,(R3)         CARD IMAGE TO INTRDR          $WC3JBD\n         LA    R3,80(,R3)         -> NEXT CARDIMAGE             $WC3JBD\n         BCT   R2,XWTR140A        LOOP BACK TILL DONE           $WC3JBD\n         DROP  R3                                               $WC3JBD\n         CLOSE (IRDCB)\n         EJECT\n*---------------------------------------------------------------------*\n*                    EOJ, ISSUE MSG AND LEAVE                         *\n*---------------------------------------------------------------------*\nEXIT100  DS    0H\nJLX900   WTO  'IAT0607 JESLOGX COMPLETE',ROUTCDE=11,MCSFLAG=HRDCPY\n         L     R13,JESLSAV+4      *GET HSA\n         RETURN (14,12),,RC=0\n         SPACE 3\n*---------------------------------------------------------------------*\n*                  ABEND BECAUSE OF SEVERE ERROR(S)                   *\n*---------------------------------------------------------------------*\nABEND    DS    0H\n         ABEND 16,DUMP,STEP\n         EJECT\n*---------------------------------------------------------------------*\n*                    CAMLIST FOR LOCATE                               *\n*---------------------------------------------------------------------*\nCAML     CAMLST NAME,LOCDSN,,LOCAREA\nLOCDSN   DS    0CL40              *CAMLST DSN\n         DC    C'MVS3.JESLOG.DAY' *FIRST PART OF DSN\nLOCDAY   DC    C'XXX'             *DAY PART OF DSN\n         DC    (40-*+LOCDSN)C' '  *BLANK OUT FOR 40 CHARS\nLOCAREA  DS    0D\n         DS    255C               *SPACE FOR LOCATE BLOCK\nLOCDATE  DS    F                  *WORK FLD TO FIGURE LOC DAY TO USE\n         EJECT\n*---------------------------------------------------------------------*\n*                       STORAGE AREAS                                 *\n*---------------------------------------------------------------------*\nJESLSAV  DS    18F                *SAVE AREA\n         SPACE\nYYDDD    DS    F                  *UNPACKED 00YYDDD+ FROM TIME MACRO\nTODAY    DC    CL3' '             *TODAYS DAY OF YEAR\nYSTRDAY  DC    CL3' '             *YESTERDAYS DAY OF YEAR\n         SPACE\nPARMS    DS    0CL3               *PARMS 'WAD'\nW        DC    C' '               *W - SPACE RLSE\nA        DC    C' '               *A - DATE PARAMETER\nD        DC    C' '               *D - XWTRPROC DSN DAY\n         SPACE\nSTARTWTR DC    H'85',H'0',CL19'START XWTRPROC,DAY=' *COMMAND TO...\nWTRDATE  DC    CL3' '                   ... START EXTERNAL WRITER\n         DC    CL9',TYPE=JES'\n         DC    CL7',CLASS='\nWTRCLASS DC    CL1' '\n         DC    CL4',SP='\nWTRSPACE DC    CL29' '            *SPACE PARAMETER\n         DC    CL9'  JESLOGX'     *COMMAND ORIGIN\n         SPACE\nALOCDSN  DC    C'MVS3.JESLOG.DAY' *DSN\nALOCDAY  DC    CL3' '             *DATE\nALOCDE   DC    AL1(*-ALOCDSN)     *LENGTH OF DATA SET NAME\nJLXDUMMY DC    H'18',H'0',C' JESLOGX DUMMY' *DUMMY RECORD\n         SPACE\nWRITELOG DC    H'23',H'0',C'WRITELOG ' *COMMAND TO CLOSE SYSLOG\nCLOSCLAS DC    C' '               *SYSLOG CLASS\n         DC    C'  JESLOGX'       *COMMAND ORIGIN\n         SPACE\n*---------------------------------------------------------------------*\n*        JCL TO GENER JESLOG DATASET TO MICROFICHE                    *\n*---------------------------------------------------------------------*\nINTJCL   CSECT ,                                                $WC3JBD\nJOBREC   DC    CL80'//$JESDALY JOB WC07N0323,''W1-5311 R.C. CREWS'',MSGX\n               CLASS=Q,USER=ACFDMP'\nMAINREC  DC    CL80'//*MAIN    LINES=(500,W),CLASS=TP'\n         DC    CL80'//TITLE   EXEC DXSETUP'                     $WC3JBD\n         DC    CL80'//SYSIN    DD  *'                           $WC3JBD\n         DC    CL80'CONTROL FNSH'                               $WC3JBD\n         DC    CL80'TITLE W1-5432 COMPUTER OPERATIONS'          $WC3JBD\n         DC    CL80'/*'                                         $WC3JBD\nPROCREC  DC    CL80'//IEFPROC  EXEC PGM=IEBGENER'\nPRNTDD   DC    CL80'//SYSPRINT DD  SYSOUT=*'\nSYSUT2DD DC    CL80'//SYSUT2   DD  SYSOUT=M'\nSYSUT1DD DS    0CL80\n         DC    C'//SYSUT1   DD  DSN=MVS3.JESLOG.DAY'\nGENERDAY DC    CL46'XXX,DISP=SHR'\nSYSINDD  DC    CL80'//SYSIN    DD  DUMMY'\nRLSSEPR  DC    CL80'//*'\nRLSEXEC  DC    CL80'//IEFRLSE  EXEC PGM=IEBGENER'\nRLSPRNT  DC    CL80'//SYSPRINT DD  SYSOUT=*'\nRLSSUT1  DS    0CL80\n         DC    C'//SYSUT1   DD  DUMMY,DCB=MVS3.JESLOG.DAY'\nRLSDAY1  DC    CL40'XXX,DISP=SHR'\nRLSSUT2  DS    0CL80\n         DC    C'//SYSUT2   DD  DSN=MVS3.JESLOG.DAY'\nRLSDAY2  DC    CL46'XXX,DISP=MOD,SPACE=(CYL,(50,10),RLSE)'\nRLSSYIN  DC    CL80'//SYSIN    DD  DUMMY'\nENDFILE  DC    CL80'/* '\nCARD#    EQU   (*-JOBREC)/80                                    $WC3JBD\nJESLOGX  CSECT ,                                                $WC3JBD\n*---------------------------------------------------------------------*\n*        LITERALS                                                     *\n*---------------------------------------------------------------------*\n         LTORG\n         SPACE\n*---------------------------------------------------------------------*\n*        DCB TO OPEN INTRDR FILE                                      *\n*---------------------------------------------------------------------*\nIRDCB    DCB   MACRF=(PM),DDNAME=IRDCB,LRECL=80,RECFM=FB,BUFNO=1,      X\n               DSORG=PS,BLKSIZE=3200\n         EJECT\n*---------------------------------------------------------------------*\n*              DCB TO OPEN/CLOSE JESLOG SO IT GETS CATALOGED          *\n*---------------------------------------------------------------------*\n         PRINT NOGEN\nJESLOG   DCB   MACRF=(PM),DDNAME=JESLOG,LRECL=137,RECFM=VB,BUFNO=1,    X\n               DSORG=PS,BLKSIZE=13030\n         PRINT GEN\n         EJECT\n*---------------------------------------------------------------------*\n*                           DSECTS                                    *\n*---------------------------------------------------------------------*\n         IHAASCB                  *DSECT FOR MAPPING OF ASCB\n         EJECT\n         IHAPSA                   *DSECT FOR MAPPING LOW CORE\n         EJECT\n         IATYEQU\n         EJECT\n         IATYREG\nUMODNUM  DC    CL7'AJSW040'\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW042": {"ttr": 10243, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW042) /*\n  TSO COST ESTIMATE INFO.. PICK UP IEFSSCS MACRO CHANGE FROM ABBW064\n                       */ .\n++ VER(Z038) FMID(HJS2215) PRE(ABBW064 AJSW023) .\n++ SRCUPD(IATGRWQ) DISTLIB(AJES3SRC) .\n./ CHANGE NAME=IATGRWQ\n* USER MODS =                                                   AJSW042\n*                                                               AJSW042\n*      - FILL IN SSOB WITH COST ESTIMATE INFO UPON REQUEST      AJSW042\n*                                                               AJSW042\n         IATYSCT                                                AJSW042\n         IATYOSD TYPE=DSECT                                     AJSW042\n         IATYJDS                                                AJSW042\n         IATYJST                                                AJSW042\n         TM    SSCSFLGS,SSCS$CST  *COST ESTIMATE INFO REQUEST?  AJSW042\n         BC    ALLON,UMOD001      *YES, SKIP CLEAR OF ARRAY     AJSW042\nUMOD001  DS    0H                                               AJSW042\n*-------------------------------------------------------------* AJSW042\n*   CALL TO OUR EXTENDED STATUS PROCESSOR FOR JOB OUTPUT      * AJSW042\n*-------------------------------------------------------------* AJSW042\n         TM    SSCSFLGS,SSCS$CST  *COST ESTIMATE INFO REQUEST?  AJSW042\n         BC    ALLOFF,WTQ0180     *NO, SKIP IT                  AJSW042\n         L     R15,=A(UMOD000)    *ADDRESS OF COST EST RTN      AJSW042\n         ACALL ENTER=(R15)        *GO TO ROUTINE AND SAVE REGS  AJSW042\n         L     R3,TSSSOB+SSOBRETN-SSOBEGIN *GET RETURN CODE     AJSW042\n         EJECT                                                  AJSW042\n*************************************************************** AJSW042\n*   THIS ROUTINE SCANS EACH JDS ENTRY FOR THE SELECTED JOB    * AJSW042\n*   AND PUTS THE INFO NEEDED IN AN ARRAY TO SEND BACK TO      * AJSW042\n*   THE REQUESTOR.                                            * AJSW042\n*************************************************************** AJSW042\nUMOD000  DS    0H                                               AJSW042\n         USING UMOD000,R8                                       AJSW042\n         USING SSCSBGN,R3                                       AJSW042\n         USING RQSTART,R7         *ADDRESSIBILITY               AJSW042\n         LR    R8,R15                                           AJSW042\n         L     R7,RQTOP           *FIRST RSQ ENTRY              AJSW042\n         LA    R3,TSSSOB          *SET BASE FOR SSOB EXTENSION  AJSW042\n         AH    R3,SSOBLEN-SSOB(,R3)                             AJSW042\nUMOD010  DS    0H                                               AJSW042\n         LA    R7,0(,R7)          *CLEAR HIGH BIT               AJSW042\n         LTR   R7,R7              *IS THERE ONE?                AJSW042\n         BC    ZERO,UMODEND1      *NO, GET OUT                  AJSW042\n         CLC   RQJNUM,SSCSJOBI+4  *CORRECT JOB NUMBER?          AJSW042\n         BC    EQ,UMOD020         *YES, GO PROCESS              AJSW042\n         L     R7,RQNEXT          *GET NEXT RSQ                 AJSW042\n         B     UMOD010            *GO CHECK FOR CORRECT JOB     AJSW042\nUMOD020  DS    0H                                               AJSW042\n         LR    R6,R7              *SAVE RQ                      AJSW042\n         DROP  R7                 *DROP REG 7 (DONE WITH RQ)    AJSW042\n         SLR   R4,R4              *CLEAR REGISTER               AJSW042\n         LH    R5,SSCSDIMP        *GET ARRAY SIZE               AJSW042\n         D     R4,=AL4(SSCS$ASZ)  *CALC NUM OF ARRAYS TO FIT    AJSW042\n******** LR    R9,R5              *SAVE NUM OF ARRAYS           AJSW042\n         S     R5,=F'6'           *LEAVE ROOM FOR JUNK AT END   AJSW042\n         LA    R7,SSCS$FIL        *POINTER TO PREFIX            AJSW042\n         USING SSCS$FIL,R7        *ADDRESSIBILITY               AJSW042\n         LA    R3,SSCS$PSZ(R7)    *POINT TO FIRST ARRAY ELEMENT AJSW042\n         USING SSCS$CAE,R3        *ADDRESSIBILITY               AJSW042\n         CLC   SSCS$JDS,TVTZERO   *IS A JDS POINTER THERE NOW?  AJSW042\n         BE    UMODJST0           *NO, JUST START FILLING IN    AJSW042\n         L     R1,SSCS$JDS        *GET POINTER TO LAST JDS      AJSW042\n         JDSPOINT RQ=(R6),POINTER=(R1),ERROR=UMODEND1           AJSW042\n         B     UMOD040            *GET ON WITH IT               AJSW042\nUMODJST0 DC    0H'0'                                            AJSW042\n         USING RQSTART,R6          RESQUEUE ADDRESSABILITY      AJSW042\n         L     R1,RQJSTFDB         GET -> JST                   AJSW042\n         LA    R1,0(,R1)           STRIP HIGH ORDER BIT         AJSW042\n         TM    RQJSTFDB+(FDBSPFL1-FDBSTART),FDBONSP JST ON SPOOLAJSW042\n         BC    NALLON,UMODJST1     NO, IN MEMORY                AJSW042\n         JESREAD FDB=RQJSTFDB,ID=JST READ JST INTO MEMORY       AJSW042\n         L     R1,RQJSTFDB         GET -> JST                   AJSW042\n         O     R1,=X'80000000'     SET READ-IN FLAG             AJSW042\n*                                  DELETED 7/8/87               AJSW042\n*                                  DELETED 7/8/87               AJSW042\n*                                  DELETED 7/8/87               AJSW042\n*                                  DELETED 7/8/87               AJSW042\n         USING JSTSTART,R1         TEMP. JST MAP ADDRBLTY       AJSW042\nUMODJST1 ICM   R0,B'1111',JST25NTM COUNT OF TAPE MOUNTS         AJSW042\n         STCM  R0,B'0011',SSCS$NTM SET INTO SSOB FOR CALLER     AJSW042\n         LTR   R1,R1               DID WE READ IN JST?          AJSW042\n         BC    NMINUS,UMOD030      NO, ALREADY IN STORAGE       AJSW042\n         ARELEASE FDB=RQJSTFDB     RELEASE JST                  AJSW042\n         DROP  R6                  RESQUEUE ADDRESSABILITY      AJSW042\nUMOD030  DS    0H                                               AJSW042\n         JDSGET RQ=(R6),EOF=UMOD080                             AJSW042\n         ST    R0,SSCS$JDS        *SAVE JDS POINTER             AJSW042\nUMOD040  LR    R2,R1              *POINT TO JDS ENTRY           AJSW042\n         USING JDSENTRY,R2                                      AJSW042\n         CLC   JDSLINES,TVTZERO   *ANY LINE COUNT?              AJSW042\n         BC    NE,UMOD050         *YES, CONTINUE                AJSW042\n         CLC   JDSDDNAM,=CL8'SYSMSG' *THIS THE SYSMSG DATASET?  AJSW042\n         BC    EQ,UMOD050         *YES, CONTINUE ANYWAY         AJSW042\n         B     UMOD030            *NO, GET NEXT ENTRY           AJSW042\nUMOD050  DS    0H                                               AJSW042\n         TM    JDSFLG2,JDSYSIN    *IS THIS A SYSIN JDS?         AJSW042\n         BC    ALLON,UMOD030      *YES, SKIP THIS ONE           AJSW042\n         BCT   R5,UMOD055         *CAN WE FIT THIS ONE IN?      AJSW042\n         B     UMODEND            *NO, END AND LEAVE JDS POINT  AJSW042\n*-------------------------------------------------------------* AJSW042\n*                SET ALL FIELDS TO DEFAULTS                   * AJSW042\n*-------------------------------------------------------------* AJSW042\nUMOD055  DS    0H                                               AJSW042\n         L     R1,TVTYOSD         *GET OUTSERV RES DATA AREA    AJSW042\n         USING OSDSTART,R1                                      AJSW042\n         MVC   SSCS$STP,JDSSTEPN  *PUT STEP NAME IN ARRAY       AJSW042\n         MVC   SSCS$DDN,JDSDDNAM  *PUT DDNAME IN ARRAY          AJSW042\n         MVC   SSCS$DST,=CL8'ANYLOCAL' *DEFAULT DESTINATION     AJSW042\n         TM    JDSCTYPE,JDSPUNCH  *IS THIS A PUNCH JDS?         AJSW042\n         BC    ALLOFF,SETPRNT     *NO, MUST BE PRINT            AJSW042\n         MVC   SSCS$TYP,=CL8'PUN     ' *DEFAULT TYPE            AJSW042\n         MVC   SSCS$FRM,OSDCARDS  *DEFAULT CARDS                AJSW042\n         B     UMOD060            *CONTINUE WITH DEFAULTS       AJSW042\nSETPRNT  DS    0H                                               AJSW042\n         MVC   SSCS$TYP,=CL8'PRT     ' *SET PRINT TYPE          AJSW042\nUMOD060  DS    0H                                               AJSW042\n         MVC   SSCS$FRM,OSDFORMS  *DEFAULT FORMS                AJSW042\n         MVC   SSCS$CAR,OSDCARR   *DEFAULT FCB                  AJSW042\n         MVC   SSCS$UCS,OSDTRAIN  *DEFAULT UCS                  AJSW042\n         MVC   SSCS$LNC,JDSLINES  *GET LINE COUNT               AJSW042\n         MVC   SSCS$PGS,JDSPAGES  *GET PAGE COUNT               AJSW042\n         MVI   SSCS$CLS,C'A'      *DEFAULT SYSOUT CLASS         AJSW042\n         MVI   SSCS$CPY,X'01'     *DEFAULT COPY COUNT           AJSW042\n         DROP  R1                                               AJSW042\n*-------------------------------------------------------------* AJSW042\n*               SEE WHAT JDS HAS IN IT                        * AJSW042\n*-------------------------------------------------------------* AJSW042\n         CLI   JDSCLASS,X'00'     *SYSOUT CLASS THERE?          AJSW042\n         BC    EQ,CHKCOPY         *NO, LET DEFAULT STAND        AJSW042\n         CLI   JDSCLASS,X'40'     *SYSOUT CLASS THERE?          AJSW042\n         BC    EQ,CHKCOPY         *NO, LET DEFAULT STAND        AJSW042\n         MVC   SSCS$CLS,JDSCLASS  *SYSOUT CLASS                 AJSW042\n         TM    JDSFLG3,JDSDCOPY   *IS COPY FIELD VALID?         AJSW042\n         BC    ALLON,PUTCOPY      *YES, GO USE IT               AJSW042\n*-----          SCAN SYSOUT CLASS TABLE                  -----* AJSW042\n         L     R1,SCTAB           *GET SYSOUT CLASS TABLE       AJSW042\n         USING SCSTART,R1         *SET UP ADDRESSABILITY        AJSW042\nSCTLOOP  DS    0H                                               AJSW042\n         CLI   SCTCLASS,X'FF'     *IS THIS THE END OF TABLE?    AJSW042\n         BC    EQ,CHKDEST         *YES, LET DEFAULT STAND       AJSW042\n         CLC   SCTCLASS,JDSCLASS  *IS THIS OUR SYSOUT CLASS?    AJSW042\n         BC    NE,SCTNEXT         *NO, GET NEXT ONE             AJSW042\n         TM    SCTFLAG1,SCTCPY    *IS SCTCOPY FIELD VALID?      AJSW042\n         BC    ALLOFF,CHKDEST     *NO, GO TEST DEST             AJSW042\n         MVC   SSCS$CPY,SCTCOPY   *OUTPUT COPY COUNT            AJSW042\n         B     CHKDEST            *GO TEST DEST                 AJSW042\nSCTNEXT  DS    0H                                               AJSW042\n         LA    R1,L'SCTSIZE(R1)   *GET NEXT CLASS TABLE ENTRY   AJSW042\n         B     SCTLOOP            *GO TEST                      AJSW042\n         DROP  R1                                               AJSW042\nCHKCOPY  DS    0H                                               AJSW042\n         TM    JDSFLG3,JDSDCOPY   *IS COPY FIELD VALID?         AJSW042\n         BC    ALLOFF,CHKDEST     *NO, LET DEFAULT STAND        AJSW042\nPUTCOPY  DS    0H                                               AJSW042\n         MVC   SSCS$CPY,JDSCOPY   *OUTPUT COPY COUNT            AJSW042\nCHKDEST  DS    0H                                               AJSW042\n         TM    JDSFLG3,JDSDDEST   *IS DESTINATION FIELD VALID?  AJSW042\n         BC    ALLOFF,CHKTYPE     *NO, LET DEFAULT STAND        AJSW042\n         MVC   SSCS$DST,JDSDEST   *SYSOUT DESTINATION           AJSW042\nCHKTYPE  DS    0H                                               AJSW042\n         LA    R1,JDSTYPE         *INITIALIZE VARIABLE POINTER  AJSW042\n         TM    JDSFLG3,JDSDTYPE   *IS TYPE THERE?               AJSW042\n         BC    ALLOFF,CHKFORM     *NO, LET DEFAULT STAND        AJSW042\n         MVC   SSCS$TYP,0(R1)     *OUTPUT TYPE REQUIRED         AJSW042\n         LA    R1,8(R1)           *POINT PAST TYPE FIELD        AJSW042\nCHKFORM  DS    0H                                               AJSW042\n         TM    JDSFLG3,JDSDFORM   *IS FORM THERE?               AJSW042\n         BC    ALLOFF,CHKFCB      *NO, LET DEFAULT STAND        AJSW042\n         MVC   SSCS$FRM,0(R1)     *OUTPUT FORMS                 AJSW042\n         LA    R1,8(R1)           *POINT PAST FORM FIELD        AJSW042\nCHKFCB   DS    0H                                               AJSW042\n         TM    JDSFLG3,JDSDFCB    *IS FCB THERE?                AJSW042\n         BC    ALLOFF,CHKUCS      *NO, LET DEFAULT STAND        AJSW042\n         MVC   SSCS$CAR,0(R1)     *OUTPUT CARRIAGE TAPE (FCB)   AJSW042\n         LA    R1,8(R1)           *POINT PAST FCB FIELD         AJSW042\nCHKUCS   DS    0H                                               AJSW042\n         TM    JDSFLG3,JDSDUCS    *IS UCS THERE?                AJSW042\n         BC    ALLOFF,UMOD070     *NO, LET DEFAULT STAND        AJSW042\n         MVC   SSCS$UCS,0(R1)     *OUTPUT TRAIN                 AJSW042\nUMOD070  DS    0H                                               AJSW042\n         LA    R3,SSCS$ASZ(R3)    *POINT TO NEXT ARRAY ELEMENT  AJSW042\n         B     UMOD030            *AND GET NEXT JDS             AJSW042\nUMOD080  DS    0H                                               AJSW042\n         MVC   SSCS$JDS,TVTZERO   *INDICATE NORMAL END          AJSW042\nUMODEND  DS    0H                                               AJSW042\n         JDSREL RQ=(R6)                                         AJSW042\n         LA    R15,0              *SET GOOD RETURN CODE         AJSW042\n         ST    R15,TSSSOB+SSOBRETN-SSOBEGIN *SAVE IT            AJSW042\n         ARETURN RC=(R15)           *RETURN TO CALLER           AJSW042\nUMODEND1 DS    0H                                               AJSW042\n         LA    R15,SSCSBADI       *GET BAD STATUS RETURN CODE   AJSW042\n         ST    R15,TSSSOB+SSOBRETN-SSOBEGIN *SAVE IT            AJSW042\n         ARETURN RC=0               *RETURN TO CALLER           AJSW042\n         LTORG                                                  AJSW042\nUMODNUM  DC    CL7'AJSW042'       *USER NUMBER                  AJSW042\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW043": {"ttr": 10247, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD(AJSW043)     /*\n                    ENHANCEMENTS TO THE *I,B COMMAND  */ .\n++VER(Z038) FMID(HJS2215).\n++SRCUPD(IATGRWJ).\n./ CHANGE NAME=IATGRWJ\n*        USER MODS =                                            AJSW043\n*                                                               AJSW043\n*             - CHANGE IAT8688 TO INCLUDE :                     AJSW043\n*               1) NUMBER OF JOBS WAITING TO BE QUEUED          AJSW043\n*               2) NUMBER OF JOBS QUEUED                        AJSW043\n*               3) NUMBER OF ACTIVE JOBS                        AJSW043\n*             - ADD THREE KEYWORDS :                            AJSW043\n*               1) D=DSPNAME - TO RECEIVE MESSAGE               AJSW043\n*                  IAT8688 FOR THE DSP SPECIFIED                AJSW043\n*               2) C=CLASSNAME - TO RECEIVE MESSAGE             AJSW043\n*                  IAT8688 FOR THE CLASS SPECIFIED              AJSW043\n*               3) G=GROUPNAME - TO RECEIVE MESSAGE             AJSW043\n*                  IAT8688 FOR THE GROUP SPECIFIED              AJSW043\n*                                                               AJSW043\n         MVI   BZFLAG,X'0'        *CLEAR FLAG                   AJSW043\n*        LA    R4,DSPCNTS  ADDR OF AREA TO CLEAR   5465@ZA26081 AJSW043\n         L     R4,=A(DSPCNTS)      ADDR OF AREA TO CLEAR        AJSW043\n*        LA    R5,MAXDSPSQ*4       LENGTH TO CLEAR  5465@ZA26081AJSW043\n         LA    R5,MAXDSPSQ*BZLGTH *LENGTH TO CLEAR              AJSW043\n         ST    R4,SAVER4          *SAVE JQE ADDRESS             AJSW043\n         CLI   WTDRSVDU,X'FF'     *WAS *I B,D=  COMMAND ISSUED? AJSW043\n         BC    EQ,SKIPMOVE        *YES, BRANCH                  AJSW043\nSKIPMOVE DS    0H                                               AJSW043\n*        BC    ALLOFF,IB055       BIN                   @Z40LB00AJSW043\n         BC    ALLOFF,IB052                                     AJSW043\n*        BC    ALLOFF,IB055                                 @LJAAJSW043\n         BC    ALLOFF,IB052                                     AJSW043\n*        LA    R4,2               SET OFFSET AS 2           @LJCAJSW043\n         L     R9,=A(USER000)     *ADDR OF ROUTINE              AJSW043\n         B     0(R9)              *GO TO ROUTINE                AJSW043\nSAVER4   DS    F                  *REG 4 SAVE AREA              AJSW043\n*        MH    R1,=H'4'           DSP SEQ * COUNTER LNTH@Z40LB00AJSW043\n         MH    R1,BZLGN           *GET OFFSET                   AJSW043\n*        LA    R1,DSPCNTS(R1) ADDR SPECIFIC COUNTER    @Z40LB00 AJSW043\n         A     R1,=A(DSPCNTS)      ADDR SPECIFIC COUNTER        AJSW043\n*        LA    R5,DSPCNTS  ADDR DSP COUNTS             @Z40LB00 AJSW043\n         L     R5,=A(DSPCNTS)      ADDR DSP COUNTS              AJSW043\n*        L     R1,0(,R5)          GET BOTH COUNTS       @Z40LB00AJSW043\n*        LTR   R1,R1              ANY COUNT(S)          @Z40LB00AJSW043\n*        BC    NPLUS,FMTBK500     BIN                   @Z40LB00AJSW043\n         CLC   0(6,R5),=XL6'0'    *ANY COUNTS?                  AJSW043\n         BC    EQ,FMTBK500        *BIN                          AJSW043\n         MVC   BKJOBS1,UNPKAREA+4 *GET NUMBER                   AJSW043\n         LH    R1,4(,R5)          *GET AREA FOR COUNT           AJSW043\n         BAL   R9,CVTDD           *GO GET PRINTABLE NUMBER      AJSW043\n*        AH    R5,=H'4'           ADDR NEXT DSP COUNT  @Z40LB00 AJSW043\n         AH    R5,BZLGN           *GET DISPLACEMENT OF DSP      AJSW043\nBKJOBS1  DC    CL4' ',C'(Q) '                                   AJSW043\n*DSPCNTS DC    (MAXDSPSQ)F'0'  DSP COUNTS FOR *I B  5465@Z40LB00AJSW043\n* ABOVE MOVED PAST LITERAL POOL - ADDRESSABILITY PROBLEMS       AJSW043\nBZOFFST2 DC    H'2'               *LENGTH OF OFFSET             AJSW043\nBZOFFST4 DC    H'4'               *LENGTH OF OFFSET             AJSW043\nBZLGN    DC    H'6'               *LENGTH OF CELL               AJSW043\nBZLGTH   EQU   X'6'               *LENGTH OF CELL               AJSW043\nBZFLAG   DC    X'0'               *FLAG BYTE                    AJSW043\nBZCLS    EQU   X'80'              *CLASS WANTED                 AJSW043\nBZGRP    EQU   X'40'              *GROUP WANTED                 AJSW043\nDSPCNTS  DC    (MAXDSPSQ)XL6'0'   *DSP COUNTS FOR *I B          AJSW043\n         SPACE 3                                                AJSW043\n         USING USER000,R9                                       AJSW043\n         USING JCTSTART,R3                                      AJSW043\n         USING WTDSTART,R2                                      AJSW043\n         USING IATGRWJ,R10                                      AJSW043\nUSER000  DS    0H                                               AJSW043\n         L     R10,=A(IATGRWJ)                                  AJSW043\n         L     R6,SAVER4          *GET JQE ADDRESS              AJSW043\n         CLI   WTDUSER,X'00'      *IS THERE A CLASS WANTED?     AJSW043\n         BC    EQ,USERG0G         *NO, CHECK OTHER PARMS        AJSW043\n         OI    BZFLAG,BZCLS       *SET FLAG FOR CLASS           AJSW043\n         B     USERG0             *CHECK OTHER PARMS            AJSW043\nUSERG0G  DS    0H                                               AJSW043\n         CLI   WTDIJNAM,X'00'     *IS THERE A GROUP WANTED?     AJSW043\n         BC    EQ,USERG0          *NO, CONTINUE                 AJSW043\n         OI    BZFLAG,BZGRP       *SET FLAG FOR GROUP           AJSW043\nUSERG0   DS    0H                                               AJSW043\n         LR    R1,R3              *JCT ADDRESS                  AJSW043\n         AH    R1,JCTFIXL         *ADDRESS OF SE                AJSW043\n         USING SESTART,R1                                       AJSW043\n         XR    R4,R4              *SET OFFSET FOR COUNTER       AJSW043\n         TM    WTDSPNO,X'FF'      *IS THERE A DSP WANTED?       AJSW043\n         BC    ALLON,USERG01      *NO, CHECK OTHER PARMS        AJSW043\n         BC    ALLOFF,USERG01     *NO, CHECK OTHER PARMS        AJSW043\n         SR    R7,R7              *CLEAR FOR SE COUNT           AJSW043\n         IC    R7,JCTNOSES        *GET NUMBER OF SE'S           AJSW043\nUSERG00  DS    0H                                               AJSW043\n         CLC   WTDSPNO,SEDSPNO    *IS THIS THE DSP?             AJSW043\n         BC    EQ,USERG01         *YES, GET INFORMATION         AJSW043\n         AH    R1,SVSESIZE        *POINT TO NEXT SE             AJSW043\n         BCT   R7,USERG00         *GO THRU CHAIN                AJSW043\n         B     FUNCRET            *DSP DOES NOT MATCH           AJSW043\nUSERG01  DS    0H                                               AJSW043\n         TM    BZFLAG,BZCLS+BZGRP *WERE EITHER OF THESE WANTED? AJSW043\n         BC    ALLOFF,USERG03     *GO WITH CHECKS               AJSW043\n         TM    BZFLAG,BZCLS       *WAS CLASS WANTED?            AJSW043\n         BC    ALLOFF,USERG02     *NO, MUST BE GROUP            AJSW043\n         CLC   JCTSCHCL,WTDUSER   *IS THIS THE SAME CLASS?      AJSW043\n         BC    NE,FUNCRET         *NO, GET ANOTHER              AJSW043\n         B     USERG03            *CONTINUE                     AJSW043\nUSERG02  DS    0H                                               AJSW043\n         USING JQESTART,R6        *R6 IS POINTING TO JQE        AJSW043\n         SLR   R5,R5              *CLEAR FOR GROUP              AJSW043\n         IC    R5,JQEGRP          *GET GROUP NUMBER             AJSW043\n         BCTR  R5,0               *MINUS 1 FOR INDEX            AJSW043\n         L     R7,MGROUP          *GET FIRST GROUP TABLE        AJSW043\n         MH    R5,MGLNG-MGSTART(,R7) *OFFSET TO GROUP TABLE     AJSW043\n         AR    R7,R5              *ADDR OF ENTRY                AJSW043\n         CLC   WTDIJNAM,MGNAME-MGSTART(R7) *ARE THESE THE SAME? AJSW043\n         BC    NE,FUNCRET         *NO, GET ANTOHER              AJSW043\n         DROP  R6                                               AJSW043\nUSERG03  DS    0H                                               AJSW043\n         MVC   SAVJNUM,JCTJOB     *GET JOB NUMBER FOR RQ        AJSW043\n         ST    R9,SAVE9           *SAVE BASE                    AJSW043\n         BAL   R9,FINDRQ          *GO GET THE RQ FOR DSP        AJSW043\n         L     R9,SAVE9           *RESTORE BASE                 AJSW043\n         LR    R5,R1              *GET RESQUEUE ADDRESS         AJSW043\n         XR    R4,R4              *CLEAR FOR DISPLACEMENT       AJSW043\n         USING RQSTART,R5                                       AJSW043\n         LTR   R5,R5              *IS THERE A RESQUEUE?         AJSW043\n         BC    ZERO,USERNOR       *GO DECIDE WHICH QUEUE        AJSW043\n         CLI   RQINDEX,RQNOSUB    *IS THIS A DSP?               AJSW043\n         BC    EQ,USER055A        *YES, GO DO IT                AJSW043\n         CLC   SEDSPNO,DSPOUTPT   *OUTPUT SERVICE?              AJSW043\n         BC    EQ,USER055O        *YES, GO DO IT                AJSW043\n         CLI   RQINDEX,RQSELECT   *IS THIS DSP QUEUED?          AJSW043\n         BC    LT,IB055           *NO, NOT YET                  AJSW043\n         BC    GT,USER055         *IT IS ALREADY ACTIVE?        AJSW043\n         TM    RQFLG7,RQJSSPR     *SPEC RESCHED                 AJSW043\n         BC    ALLON,IB055        *YES, W QUEUE                 AJSW043\n         AH    R4,BZOFFST2        *SET THE OFFSET               AJSW043\n         B     IB055              *GO SET COUNT                 AJSW043\nUSER055O DS    0H                                               AJSW043\n         CLC   SEDSPNO,DSPOUTPT   *OUTPUT SERVICE?              AJSW043\n         BC    NE,USER055         *A QUEUE                      AJSW043\n         CLI   RQINDEX,RQOUTQUE   *WAITING FOR WRITER?          AJSW043\n         BC    NE,USER055         *A QUEUE                      AJSW043\n         USING OSSSTART,R7                                      AJSW043\n         L     R7,RQOSSTOP        *GET OSS CHAIN                AJSW043\n         LTR   R7,R7              *IS THERE ONE?                AJSW043\n         BC    ZERO,IB055         *W QUEUE                      AJSW043\nUSER0551 DS    0H                                               AJSW043\n         CLC   OSSSCHED,TVTZERO   *SCHED COUNT ZERO?            AJSW043\n         BC    EQ,USER0552        *GET NEXT OSS                 AJSW043\n         TM    OSSFLAG1,OSSHOLD   *DATA SET HELD?               AJSW043\n         BC    ALLOFF,USER055     *A QUEUE                      AJSW043\nUSER0552 DS    0H                                               AJSW043\n         ICM   R7,15,OSSCHAIN     *GET NEXT OSS                 AJSW043\n         BC    NZERO,USER0551     *GO CHECK SCHED COUNT         AJSW043\n         AH    R4,BZOFFST2        *SAY PENDING                  AJSW043\n         B     IB055                                            AJSW043\nUSER055A DS    0H                                               AJSW043\n         TM    RQFLG7,RQJSSPR     *RESCHDULE?                   AJSW043\n         BC    ALLON,IB055        *YES, W QUEUE                 AJSW043\n         TM    SEFLAGS,SEACTIVE   *ACTIVE?                      AJSW043\n         BC    ALLON,USER055      *YES, SET OFFSET              AJSW043\n         B     IB055              *W QUEUE                      AJSW043\n         DROP  R5                                               AJSW043\nUSER055  DS    0H                                               AJSW043\n         AH    R4,BZOFFST4        *SET THE OFFSET               AJSW043\n         B     IB055              *GO UPDATE THE COUNT          AJSW043\nUSERNOR  DS    0H                                               AJSW043\n         CLC   SEDSPNO,DSPMAIN    *IS THE JOB ON MAIN?          AJSW043\n         BC    EQ,IB055           *YES, W QUEUE                 AJSW043\n         CLC   SEDSPNO,DSPOUTPT   *IS THE JOB ON OUTSERV?       AJSW043\n         BC    EQ,IB055           *YES, W QUEUE                 AJSW043\n         TM    JCTFL1,JCTOPHLD+JCTTHOLD *IS THE JOB IN HOLD?    AJSW043\n         BC    NALLOFF,IB055      *YES, W QUEUE                 AJSW043\n         TM    JCTDJFL1,JCTDJCOH+JCTDJHLD *DJC HOLD?            AJSW043\n         BC    NALLOFF,IB055      *YES, W QUEUE                 AJSW043\n         CLI   0(R1),X'00'        *IS THIS DSP STARTED?         AJSW043\n         BC    NE,IB055           *NO, W QUEUE                  AJSW043\n         AH    R4,BZOFFST2        *Q QUEUE                      AJSW043\n         B     IB055              *RETURN                       AJSW043\n         DROP  R9                                               AJSW043\nUMODNUM  DC    CL7'AJSW043'\n++SRCUPD(IATIQBK).\n./ CHANGE NAME=IATIQBK\n* USER MODS:                                                    AJSW043\n*             - ADD THREE NEW KEYWORDS:                         AJSW043\n*               1) D=DSPNAME TO RECEIVE MSG IAT8688 FOR         AJSW043\n*                  THE DSP SPECIFIED.                           AJSW043\n*               2) C=CLASSNAME TO RECEIVE MSG IAT8688 FOR       AJSW043\n*                  THE CLASS SPECIFIED.                         AJSW043\n*               3) G=GROUPNAME TO RECEIVE MSG IAT8688 FOR       AJSW043\n*                  THE GROUP SPECIFIED.                         AJSW043\n*                                                               AJSW043\n         IATYDSP                                                AJSW043\n         IATYMCL                                                AJSW043\n         IATYMGP                                                AJSW043\n         CLC   =C'D=',REQUEST2    *WAS A DSP SPECIFIED?         AJSW043\n         BC    EQ,BACKDSP         *YES, GO TO THAT ROUTINE      AJSW043\n*              THIS SECTION HANDLES I,B + I,B,T=GROUPNAME      *AJSW043\n*BK010   BAL   R9,ENQWTD                                        AJSW043\nBK010    DS    0H                                               AJSW043\n*--------------------------------------------------------------*AJSW043\n*              THIS SECTION HANDLES I,B,D=DSPNAME              *AJSW043\n*--------------------------------------------------------------*AJSW043\nBACKDSP  DS    0H                                               AJSW043\n         BAL   R9,BLDWTD          *GET WTD                      AJSW043\n         USING WTDSTART,R4                                      AJSW043\n         MVI   WTDRSVDU,X'FF'     *INDICATE *I B,D= COMMAND     AJSW043\n         CLC   =C'ALL',REQUEST3   *WERE ALL DSP'S WANTED?       AJSW043\n         BC    NE,GETDSP          *NO, BRANCH                   AJSW043\n         MVI   WTDSPNO,X'FF'      *SET DSP FOR ALL              AJSW043\n         MVI   WTDFUNCT,WTINQBK   *SET FUNCTION                 AJSW043\n         B     SPLIT              *RETURN                       AJSW043\nGETDSP   DS    0H                                               AJSW043\n         L     R7,DSPDIC          *GET DSP                      AJSW043\n         USING DSPSTART,R7                                      AJSW043\nFINDDSP  DS    0H                                               AJSW043\n         CLC   DSPNAME,REQUEST3   *IS THIS THE DSP WANTED?      AJSW043\n         BC    NE,NEXTDSP         *NO, GO GET THE NEXT DSP      AJSW043\n         MVC   WTDSPNO,DSPNO      *SAVE THE NUMBER              AJSW043\n         MVI   WTDFUNCT,WTINQBK   *SET FUNCTION                 AJSW043\n         B     SPLIT              *RETURN                       AJSW043\nNEXTDSP  DS    0H                                               AJSW043\n         LA    R7,DSPEND          *POINT TO NEXT DSP            AJSW043\n         CLI   DSPSTART,X'FF'     *IS THIS THE END?             AJSW043\n         BC    NE,FINDDSP         *NO, CHECK DSP                AJSW043\n         MVC   USDSPNM,REQUEST3   *MOVE IN DSP REQUESTED        AJSW043\n         LA    R1,USNODSP         *LOAD MSG ID                  AJSW043\n         BAL   R9,PRINT           *ISSUE MSG                    AJSW043\n         B     SPLIT                                            AJSW043\n         SPACE 3                                                AJSW043\nUSNODSP  DC    AL1(USEND-USST)                                  AJSW043\nUSST     DC    C'IAT0009 '                                      AJSW043\nUSDSPNM  DS    CL8                                              AJSW043\n         DC    C' IS NOT A VALID DSP NAME'                      AJSW043\nUSEND    EQU   *                                                AJSW043\n         EJECT                                                  AJSW043\n         OI    BACKFLAG,USPOST    *WTD CANNOT BE POSTED         AJSW043\n*SPLIT   ARETURN                                                AJSW043\nSPLIT    DS    0H                                               AJSW043\n         CLI   REQUEST5,C' '      *IS THERE A CLASS OR GROUP?   AJSW043\n         BC    EQ,SPLIT1          *NO, RETURN                   AJSW043\n         CLC   REQUEST4(2),=CL2'G=' *WAS GROUP SPECIFIED?       AJSW043\n         BC    EQ,USGROUP         *YES, DO IT                   AJSW043\n         EJECT                                                  AJSW043\n*--------------------------------------------------------------*AJSW043\n*           THIS SECTION HANDLES C=CLASS AND G=GROUP           *AJSW043\n*--------------------------------------------------------------*AJSW043\nUSCLASS  DS    0H                                               AJSW043\n         L     R1,MCLASS          *POINT TO CLASS TABLE         AJSW043\n         USING MCSTART,R1                                       AJSW043\nUSC100   DS    0H                                               AJSW043\n         CLC   MCNAME,REQUEST5    *IS THIS IT?                  AJSW043\n         BC    EQ,USC200          *YES, BRANCH                  AJSW043\n         AH    R1,MCLNG           *ADDR OF NEXT CLASS TABLE     AJSW043\n         CLC   TVTRMFF,MCNAME     *END OF CLASS TABLES?         AJSW043\n         BC    NE,USC100          *NO, CHECK IT                 AJSW043\n         MVC   USREQNM,REQUEST5   *MOVE NAME TO MESSAGE         AJSW043\n         MVC   USREQWD,=C'CLASS'  *MOVE NAME TO MESSAGE         AJSW043\n         LA    R1,USNONM          *GET MESSAGE ADDRESS          AJSW043\n         BAL   R9,PRINT           *PUT OUT MESSAGE              AJSW043\n         B     SPLIT1             *RETURN                       AJSW043\nUSC200   DS    0H                                               AJSW043\n         MVC   WTDUSER,REQUEST5   *INSERT CLASS OR GROUP        AJSW043\n         B     SPLIT1             *RETURN                       AJSW043\n         SPACE 5                                                AJSW043\nUSGROUP  DS    0H                                               AJSW043\n         L     R1,MGROUP          *POINT TO GROUP TABLE         AJSW043\n         USING MGSTART,R1                                       AJSW043\nUSG100   DS    0H                                               AJSW043\n         CLC   MGNAME,REQUEST5    *IS THIS IT?                  AJSW043\n         BC    EQ,USG200          *YES, BRANCH                  AJSW043\n         TM    MGFLAG,MGLAST      *IS THIS THE LAST ENTRY?      AJSW043\n         BC    ALLON,USG300       *YES, ERROR                   AJSW043\n         AH    R1,MGLNG           *NO, GET NEXT ENTRY           AJSW043\n         B     USG100                                           AJSW043\nUSG200   DS    0H                                               AJSW043\n         MVC   WTDIJNAM,REQUEST5  *SAVE GROUP                   AJSW043\n         B     SPLIT1             *RETURN                       AJSW043\nUSG300   DS    0H                                               AJSW043\n         MVC   USREQNM,REQUEST5   *MOVE NAME TO MESSAGE         AJSW043\n         MVC   USREQWD,=C'GROUP'  *MOVE NAME TO MESSAGE         AJSW043\n         LA    R1,USNONM          *GET MESSAGE ADDRESS          AJSW043\n         BAL   R9,PRINT           *PUT OUT MESSAGE              AJSW043\n         B     SPLIT1             *RETURN                       AJSW043\n         SPACE 3                                                AJSW043\nUSNONM   DC    AL1(USEND1-USST1)                                AJSW043\nUSST1    DC    C'IAT0109 '                                      AJSW043\nUSREQNM  DS    CL8                                              AJSW043\n         DC    C' IS NOT A VALID '                              AJSW043\nUSREQWD  DS    CL5                                              AJSW043\n         DC    C' NAME'                                         AJSW043\nUSEND1   EQU   *                                                AJSW043\n         EJECT                                                  AJSW043\nSPLIT1   DS    0H                                               AJSW043\n         TM    BACKFLAG,USPOST    *CAN WTD BE POSTED?           AJSW043\n         BC    ALLON,USSPLIT      *NO, RETURN                   AJSW043\n         BAL   R9,ENQWTD                                        AJSW043\nUSSPLIT  DS    0H                                               AJSW043\n         ARETURN                                                AJSW043\nUSPOST   EQU   X'01'              *WTD CAN NOT BE POSTED        AJSW043\nUMODNUM  DC    CL7'AJSW043'\n++SRCUPD(IATIQDV).\n./ CHANGE NAME=IATIQDV\n*        USER MODS =                                            AJSW043\n*                                                               AJSW043\n*             - ADD THREE NEW KEYWORDS TO *I,B COMMAND:         AJSW043\n*               D=DSPNAME    C=CLASSNAME    G=GROUPNAME         AJSW043\n*                                                               AJSW043\n         CLC   REQUEST2(2),=C'D=' *IS A DSP WANTED?             AJSW043\n         BC    EQ,CHKBCKRJ        *YES, CHECK FOR MORE INPUT    AJSW043\n         CLC   REQUEST2(2),=C'C=' *IS JUST A CLASS WANTED?      AJSW043\n         BC    NE,USCHKG          *NO, CHECK FOR MORE INPUT     AJSW043\n         MVC   REQUEST4,REQUEST2  *MOVE CLASS KEYWORD           AJSW043\n         MVC   REQUEST5,REQUEST3  *MOVE CLASS                   AJSW043\n         MVC   REQUEST3,=CL8'ALL' *SET D=ALL                    AJSW043\n         MVC   REQUEST2,=CL8'D='  *SET D=ALL                    AJSW043\n         B     CHKBCKRJ           *CHECK FOR MORE INPUT         AJSW043\nUSCHKG   DS    0H                                               AJSW043\n         CLC   REQUEST2(2),=C'G=' *IS JUST A GROUP WANTED?      AJSW043\n         BC    NE,CHEKBACK        *YES, CHECK FOR MORE INPUT    AJSW043\n         MVC   REQUEST4,REQUEST2  *MOVE GROUP KEYWORD           AJSW043\n         MVC   REQUEST5,REQUEST3  *MOVE GROUP                   AJSW043\n         MVC   REQUEST3,=CL8'ALL' *SET D=ALL                    AJSW043\n         MVC   REQUEST2,=CL8'D='  *SET D=ALL                    AJSW043\n         B     CHKBCKRJ           *CHECK INPUT                  AJSW043\n*        BC    NE,LOADBACK         OK. LOAD MODULE              AJSW043\n         BC    EQ,REQ3ERR         *YES, ERROR                   AJSW043\n         CLI   REQUEST4,C' '      *IS THERE A KEYWORD?          AJSW043\n         BC    EQ,LOADBACK        *NO, GET LOAD MOD             AJSW043\n         CLC   REQUEST4(2),=C'G=' *IS A GROUP WANTED?           AJSW043\n         BC    EQ,CHKBCKR5        *YES, CHECK FOR MORE INPUT    AJSW043\n         CLC   REQUEST4(2),=C'C=' *IS A CLASS WANTED?           AJSW043\n         BC    NE,REQ3ERR         *NO, ERROR                    AJSW043\nCHKBCKR5 DS    0H                                               AJSW043\n         CLI   REQUEST5,C' '      *IS IT A BLANK?               AJSW043\n         BC    NE,LOADBACK        *NO, LOAD MODULE              AJSW043\nUMODNUM  DC    CL7'AJSW043'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW045": {"ttr": 10497, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW045) /* CHANGES TO JSM:\n\n       CHANGE JSM (JES SPOOL MANAGEMENT UTILITY) TO LOOK AT ALL\n       JOBS (NOT JUST HELD JOBS) AND TO ONLY PRINT MESSAGE IDENT-\n       IFYING THE JOBS RATHER THAN CANCELING THEM.\n                                                                 */ .\n++ VER(Z038) FMID(HJS2215) .\n++ SRCUPD(IATUTSM) DISTLIB(AJES3SRC) .\n./  CHANGE  NAME=IATUTSM\n*                                                               AJSW045\n*      CHANGE JSM (JES SPOOL MANAGEMENT UTILITY) TO LOOK AT ALL AJSW045\n*      JOBS (NOT JUST HELD JOBS) AND TO ONLY PRINT MESSAGE      AJSW045\n*      IDENTIFYING THE JOBS RATHER THAN CANCELING THEM.         AJSW045\n*                                                               AJSW045\n         TITLE 'IATYJDS - JOB DATA SET CONTROL BLOCK'           AJSW045\n         IATYJDS ,                                              AJSW045\n*                                                               AJSW045\n         XC    JSMAFDBR,JSMAFDBR   CLEAR IT                     AJSW045\n         XC    JSMATATR,JSMATATR   CLEAR IT                     AJSW045\n         AOPEN FDB=JSMAFDBR,TYPE=OUT,PRTY=3,TATPTR=JSMATATR,    AJSW045*\n               CARR=ASA                                         AJSW045\n*                                                               AJSW045\n*        BC    ALLOFF,MOSE800      *BIN, GET NEXT MOSE          AJSW045\n*                                                               AJSW045\n         LA    R6,JSMAFDBR                                      AJSW045\n         USING FDBSTART,R6                                      AJSW045\n         TM    FDBFLAGS,FDBCLOSE   IS DATASET ALREADY CLOSED    AJSW045\n         BC    ALLON,JSMV1121      BIY                          AJSW045\n        ACLOSE FDB=(R6)                                         AJSW045\nJSMV1121 LA    R6,JSMAJDS          POINT TO MODEL JDS           AJSW045\n         USING JDSENTRY,R6                                      AJSW045\n         XC    0(L'JDSVSIZE+JDSVSZS1+JDSVSZS2,R6),0(R6) CLEAR   AJSW045\n         MVI   JDSFLG1,JDSCHARV    SHOW CHARS PRESENT           AJSW045\n         MVI   JDSFLG2,JDSPINOF    SHOW AS SPINOFF              AJSW045\n         MVC   JDSCLASS,TDBGCLSS   SET DEBUG CLASS              AJSW045\n         MVI   JDSCTYPE,JDSPRINT+JDSTAT PRINT WITH ITS OWN TAT  AJSW045\n         MVI   JDSFLG3,JDSDDEST+JDSDCOPY+JDSDFCB                AJSW045\n         LA    R0,L'JDSVSIZE+JDSVSZS1+JDSVSZS2 LENGTH OF JDS    AJSW045\n         STH   R0,JDSVARL          SET LENGTH INTO NEW JDS      AJSW045\n         MVI   JDSCOPY,1           SET COPY COUNT               AJSW045\n         MVI   JDSRECFM,JDSRFASA   SET RECFM=A                  AJSW045\n         MVI   JDSSPC,JDSSPCV      SET CONTROL=PROGRAM          AJSW045\n         MVC   JDSPROCN,=CL8'JES3' SET JOB SEP PARAMETERS       AJSW045\n         MVC   JDSSTEPN,=CL8'JSM'  SET JOB SEP PARAMETERS       AJSW045\n         MVC   JDSDDNAM,=CL8'REPORT' SET JOB SEP PARAMTERS      AJSW045\n         MVC   JDSDEST,=CL8'PRT3800' SET JDS DESTINATION        AJSW045\n         MVC   JDSFCB,=CL8'W426'   SET FCB                      AJSW045\n         MVC   JDSCHARS+8(4),=CL4'GF15' SET CHARS= VALUE        AJSW045\n         MVC   JDSFDB,JSMAFDBR     INSTALL FDB                  AJSW045\n         MVC   JDSTATFD,JSMATATR   INSTALL TAT                  AJSW045\n         SPINOFF JDS=(R6)          GIVE THE JDS TO OUTPUT SERV  AJSW045\n         DROP  R6                                               AJSW045\n*                                                               AJSW045\n*        IATXOSWS USER=SYS,TYPE=PUT,RQ=(R6),PARM=(R13), @YA05138AJSW045+\n               EOD=OSS900                               @YA05138AJSW045\n*        B     JSMMOSE             START AGAIN WITH FIRST MOSE  AJSW045\n         B     OSS800              *CONTINUE ON WITH OSS        AJSW045\n         LR    R9,R1                                            AJSW045\n         TM    JSMAFDBR+(FDBFLAGS-FDBSTART),FDBCLOSE CLOSED?    AJSW045\n         BCR   ALLON,R8            YES, RETURN TO CALLER        AJSW045\n         SR    R1,R1               NO, CLEAR FOR INSERTION      AJSW045\n         IC    R1,0(R9)            LENGTH OF LINE TO PRINT      AJSW045\n         LA    R0,1(,R1)           LENGTH WITH CARRIAGE CNTL    AJSW045\n         LA    R1,JSMAFDBR         -> FILE TO WRITE INTO        AJSW045\n       ALOCATE FDB=(R1),COUNT=(R0) FIND BUFFER SPACE            AJSW045\n         SR    R15,R15             CLEAR FOR INSERTION          AJSW045\n         IC    R15,0(R9)           LENGTH OF MESSAGE            AJSW045\n         EX    R15,MESSMOVE        MOVE MESSAGE TO BUFFER       AJSW045\n         MVI   0(R1),C' '          STEP ON LENGTH BYTE W/CCNTL  AJSW045\n         LA    R0,1(,R15)          SET LINE LENGTH W/CARRIAGE   AJSW045\n         LA    R1,JSMAFDBR         -> FILE TO WRITE TO          AJSW045\n        ABLOCK FDB=(R1),COUNT=(R0) BLOCK LINE INTO FILE         AJSW045\nMESSMOVE MVC   0(0,R1),0(R9)       * * * E X E C U T E D * * *  AJSW045\n*                                                               AJSW045\nJSMAFDBR DC    XL(FDBMRFL)'00'     MRF FDB FOR REPORT DATASET   AJSW045\nJSMATATR DC    XL(FDBJBTL)'00'     TAT     FOR REPORT DATASET   AJSW045\nJSMAJDS  DC    CL(L'JDSVSIZE+JDSVSZS1+JDSVSZS2)'00'  NEW JDS    AJSW025\n*                                                               AJSW045\n*        DC    C') HELD OUTPUT PURGED, CL='                     AJSW045\n         DC    C') ELGIBLE FOR DELETE, CL='  *ADD TO            AJSW045\n*        DC    C' JOBS DELETED'                                 AJSW045\n         DC    C' JOBS SCANNED'                                 AJSW045\nUMODNUM  DC    CL7'AJSW045'        *USER NUMBER                 AJSW045\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW046": {"ttr": 10500, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW046) /* JESCMD PROGRAM:\n\n       THIS IS A PROGRAM THAT WILL PASS JES3 COMMANDS TO JES3.\n                                                                 */ .\n++ VER(Z038) FMID(HJS2215).\n++ JCLIN .\n//GEN11 JOB Y51024508,'531-0  SINGER '\n//SG22 EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,AC=1',\n//    UNIT='3350',SER=IPLXXX,N=GEN1,NAME=JES3LIB,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=MVS3.INCLUDE\n//SYSLIN DD *\n INCLUDE INCLUDE(JESCMD)\n NAME JESCMD(R)\n/*\n++ SRC(JESCMD) DISTLIB(ASRCLIB) .\nJESCMD   TITLE '-- ISSUE JES3 COMMANDS VIA SSI'\n         MACRO\n         $REGS\n         GBLB  &PRORG\n         AIF   (&PRORG).MEX2\n&PRORG   SETB  1\n SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n SPACE\nREG0     EQU   0\nREG1     EQU   1\nREG2     EQU   2\nREG3     EQU   3\nREG4     EQU   4\nREG5     EQU   5\nREG6     EQU   6\nREG7     EQU   7\nREG8     EQU   8\nREG9     EQU   9\nREG10    EQU   10\nREG11    EQU   11\nREG12    EQU   12\nREG13    EQU   13\nREG14    EQU   14\nREG15    EQU   15\n SPACE\n.MEX2    ANOP\n       MEND\n         MACRO\n&LABEL   $PROLOG &LV=0,&GM=Y\n.**********************************************************************\n.*\n.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY\n.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD\n.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE\n.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS\n.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:\n.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE\n.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE\n.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA\n.*                                             REG 10 IS BASE\n.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES\n.*\n.**********************************************************************\n         LCLA  &AA,&AB,&AC\n         GBLB  &PRORG\n         GBLC  &PROGM\n&AC      SETA  4096\n&LABEL   CSECT\n         B     32(R15)             BRANCH AROUND\n         DC    AL1(26)\n         DC    CL8'&LABEL'         CSECT NAME\n         DC    C'-'\n         DC    CL8'&SYSDATE'       COMPILE DATE\n         DC    C'-'\n         DC    CL8'&SYSTIME'       COMPILE TIME\n         CNOP  0,4                 ALIGNMENT\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             LOAD BASE REG\n         USING &LABEL,R12          INFORM ASSEMBLER\n         AIF   (&LV GT 4023).MERR\n         AIF   ('&GM' EQ 'N').NOGM\n&PROGM   SETC  'GETMAIN'\n         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE\n         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER\n         AIF   (&LV+72 LE 256).XC2\n         AIF   (&LV+72 LE 512).XC1\n         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE\n         LR    R2,R1               SAVE POINTER IN EVEN REG\n         LA    R4,1(R1)            SET RECEIVING POINTER\n         LR    R5,R0               SET RECEIVING LENGTH\n         BCTR  R5,R0               DECREMENT LENGTH\n         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE\n         LA    R3,1                SET SENDING LENGTH\n         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'\n         AGO   .STORE\n.XC1     ANOP\n         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA\n         XC    0(256,R1),0(R1)          CLEAR SAVE AREA\n         AGO   .STORE\n.XC2     ANOP\n         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA\n         AGO   .STORE\n.NOGM    ANOP\n         CNOP  0,4\n         LA    R1,SAVE&SYSNDX\n         B     *+76\nSAVE&SYSNDX DC 18F'0'\n.STORE   ANOP\n         ST    R13,4(R1)           SAVE BACK CHAIN\n         ST    R1,8(R13)           SET FORWARD CHAIN\n         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS\n         L     R15,16(R13)         RESTORE REG 15\n         ST    R0,16(R13)          SAVE SAVEAREA LENGTH\n         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN\n         LR    R13,R11             SET SAVEAREA POINTER\n         AIF   (N'&SYSLIST EQ 0).MEND\n         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT\n         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT\n         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG\n         DROP  R12                 DROP ASSUMED BASE REG\n         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER\n.SKIPIT  ANOP\n&AA      SETA  2\n.LOOP    ANOP\n         AIF   (&AA GT N'&SYSLIST).MEXIT\n&AB      SETA  &AA-1\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG\n         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER\n&AC      SETA  &AC+4096\n&AA      SETA  &AA+1\n         AGO   .LOOP\n.MEXIT   ANOP\n         AIF   (&PRORG).MEX2\n         SPACE\n         $REGS\n         SPACE\n.MEX2    ANOP\n&AA      SETA  &LV+72\n         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'\n         MEXIT\n.MEND    ANOP\n         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'\n         AGO   .MEXIT\n.MERR    ANOP\n         MNOTE 12,'LV > 4023 - REQUEST IGNORED'\n         AGO   .MEXIT\n         MEND\n         MACRO\n&LABEL   $EPILOG &RC\n         GBLC  &PROGM\n&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS\n         L     R13,4(R13)          GET BACK CHAIN POINTER\n         AIF   ('&PROGM' NE 'GETMAIN').NOFREE\n         L     R0,16(R13)          GET SAVEAREA LENGTH\n         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)\n         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA\n         AGO   .LM\n.NOFREE  ANOP\n         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)\n.LM      ANOP\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS\n         AIF   (T'&RC EQ 'O').SPEC\n         LA    R15,&RC             SET RETURN CODE\n.SPEC    ANOP\n         BR    R14                 RETURN TO CALLER\n         MEND\n**********************************************************************\n*                                                                    *\n*         THIS PROGRAM IS DESIGNED TO ACCEPT FROM PARM               *\n*         JES COMMAND  AND TO THEN ISSUE IT                          *\n*         TO RELEIVE THE OPERATOR FROM THE BURDEN OF                 *\n*         ISSUEING THESE COMMAND.                                    *\n*                                                                    *\n*         THE JCL TO EXECUTE THIS PROGRAM ARE :                      *\n*                                                                    *\n*             //CMD     EXEC PGM=JESCMD,PARM='COMMAND TEXT'          *\n*             //STEPLIB  DD  DSN='ACF2 PROTECTED APF LIBRARY'        *\n*             //                                                     *\n*                                                                    *\n**********************************************************************\n         EJECT\n         PRINT NOGEN\n         IHAPSA ,\n         EJECT\n         CVT   DSECT=YES,LIST=YES\n         EJECT\n         IATYDST ,\n         EJECT\n         IATYSEL ,\n         EJECT\n         IATYSVT ,\n         EJECT\n         IEFJESCT ,\n         EJECT\n         IEFJSCVT ,\n         EJECT\n         IEFJSSOB CM\n         EJECT\nX07WORK  DSECT ,\nJESDATA  DS    0D\nJESLNGTH DS    AL2\nJESCOM   DS    CL100\nJESTEXT  DS    0XL(*-JESCOM)\nJESSIZE  DS    0XL(*-JESDATA)\n         DS    0F\nSELAREA  DS    XL(L'SELSIZE)\n         SPACE 1\n         DS    0D\nX07LGTH  EQU   *-X07WORK\n         EJECT\nJESCMD   $PROLOG R12\nJESCMD   AMODE ANY\nJESCMD   RMODE ANY\n         PRINT GEN\n**********************************************************************\n         L     R3,0(,R1)           LOAD ADDRESS OF PARM INFO\n         SLR   R2,R2               CLEAR R2\n         ICM   R2,3,0(R3)          GET LENGTH OF PARM INFO\n         BNP   ABEND               IF NO PARM ABEND\n         MODESET KEY=ZERO,MODE=SUP GET INTO KEY ZERO SUP FOR SSI\n         USING X07WORK,R9          ALLOCATE R9  TO THE LABEL WORK AREA\n         L     R0,WORKAREA         GET LENGTH OF WORKAREA\n         GETMAIN R,LV=(0)          GET STORAGE\n         LR    R9,R1               LOAD BASE REGISTER\n         LA    R1,2(,R2)           ADJUST LENGTH\n         STH   R1,JESLNGTH         STORE LENGTH\n         MVI   JESCOM,C' '         BLANK OUT MESSAGE\n         MVC   JESCOM+1(L'JESTEXT-1),JESCOM\n         XC    SELAREA(L'SELSIZE),SELAREA  CLEAR SEL\n         BCTR  R2,0                DECREMENT LENGTH\n         EX    R2,MVC              EXECUTE MOVE\n         LA    R10,SELAREA         POINT TO SEL FOR SSISERV\n         USING SELSTART,R10\n         LA    R3,JESDATA          POINT TO DATA\n         ST    R3,SELDATA          STORE ADDRESS OF DATA\n         USING PSA,0               SET PSA ADDRESSABILITY\n         L     R11,FLCCVT          POINT TO CVT\n         USING CVTMAP,R11\n         L     R11,CVTJESCT        POINT TO JES CONTROL TABLE\n         USING JESCT,R11\n         L     R11,JESSSCT         POINT TO SUBSYSTEM CVT\n         USING SSCT,R11\n         L     R11,SSCTSSVT        POINT TO SUBSYS VECTOR TABLE\n         USING SSVT,R11\n*-------------------------------------------------------------------*\n*        ISSUE JES COMMAND THROUGH SUBSYSTEM INTERFACE              *\n*-------------------------------------------------------------------*\n         LR    R1,R10              SET PARM REGISTER\n         SSISERV FUNC=SSOBCMND,PARM=(R1),MOD=MODINTCM\n         DROP  R11,R10\n         L     R0,WORKAREA         GET WORK AREA PARAMETER\n         FREEMAIN R,LV=(0),A=(R9)  FREE THE WORK AREA\n         MODESET KEY=NZERO,MODE=PROB   LEAVE KEY ZERO FOR EXIT\n         SPACE\n         $EPILOG 0                 RETURN\n         SPACE\nABEND    ABEND 004                 ABEND IF NO PARM\n         SPACE\nMVC      MVC   JESCOM(0),2(R3)     MOVE INSTRUCTION\nWORKAREA DC    0F'0',X'FD',AL3(X07LGTH)\n*\n*\n*\n         LTORG ,\n*\nUMODNUM  DC    CL7'AJSW046'\nAPARNUM  DC    CL7' '\nPTFNUM   DC    CL7'SP2.1.5'\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW048": {"ttr": 10506, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW048) /* JESOPER PROGRAM:\n\n       THIS IS A PROGRAM THAT WILL SIMULATE A JES3 CONSOLE.\n                                                                 */ .\n++ VER(Z038) FMID(HJS2215).\n++ JCLIN .\n//GEN11 JOB Y51024508,'531-0  SINGER '\n//SG22 EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,AC=1',\n//    UNIT='3350',SER=IPLXXX,N=GEN1,NAME=JES3LIB,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=MVS3.INCLUDE\n//SYSLIN DD *\n INCLUDE INCLUDE(JESOPER)\n NAME JESOPER(R)\n/*\n++ SRC(JESOPER) DISTLIB(ASRCLIB) .\n*  PRINT NOGEN\n***********************************************************************\n*                                                                     *\n*        JESOPER : SIMULATE 3770 RJP TERMINAL TO JES.                 *\n*                                                                     *\n*                                                                     *\n*        REQUIRES :                                                   *\n*                                                                     *\n*        1. APPL DEFINITIONS TO VTAM LIKE:                            *\n*                                                                     *\n*        WCVTAM1  APPL  AUTH=(ACQ,PASS),BUFFACT=2,EAS=3               *\n*              |                                                      *\n*        WCVTAMN  APPL  AUTH=(ACQ,PASS),BUFFACT=2,EAS=3               *\n*                                                                     *\n*        2. WORK STATION DEFINITIONS IN JES(3) LIKE:                  *\n*                                                                     *\n*        RJPWS,N=VTAM1,RD=0,PR=0,PU=0,G=VTAM1,CONPACT=NO,LU=(WCVTAM1) *\n*                    |                      |                      |  *\n*        RJPWS,N=VTAMN,RD=0,PR=0,PU=0,G=VTAMN,CONPACT=NO,LU=(WCVTAMN) *\n*                                                                     *\n*        3. CONSOLE DEFINITIONS IN JES(3) LIKE:                       *\n*                                                                     *\n*        CONSOLE,JNAME=VTAM1,TYPE=RJP,DEST=ALL,LEVEL=15,DEPTH=255     *\n*                          |                                          *\n*        CONSOLE,JNAME=VTAMN,TYPE=RJP,DEST=ALL,LEVEL=15,DEPTH=255     *\n*                                                                     *\n*                                                                     *\n*        NOTE : JES(3) APPLID MUST BE 'WCJES3' OR BE CHANGED          *\n*               WHERE IT OCCURS IN THIS PROGRAM.                      *\n*                                                                     *\n***********************************************************************\nJESOPER  CSECT\n* * * * * * * * * * * *\n*                     *\n*  REGISTER EQUATES   *\n*                     *\n* * * * * * * * * * * *\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n* * * * * * * * * *\n*                 *\n*     LINKAGE     *\n*                 *\n* * * * * * * * * *\n         SAVE  (14,12)\n         LR    R10,R15\n         LA    R11,2048(R10)\n         LA    R11,2048(R11)\n         USING JESOPER,R10,R11\n         ST    R13,SAV+4\n         LA    R14,SAV\n         ST    R14,8(R13)\n         LR    R13,R14\n         STM   R10,R11,SAVEBASE\n         ST    R1,CPPLPTR               SAVE\n         L     R2,16                    CVT\n         TM    X'74'(R2),X'80'          IS THIS MVS/XA ?\n         BZ    AMODE31                  NO: SKIP SETTING TO 31\n         L     R15,=A(X'80000000'+AMODE31) SET AMODE\n         DC    X'0B0F'                  BSM R0,R15\nAMODE31  L     R4,0(R2)                 TCB WORDS\n         L     R4,12(R4)                CURRENT ASCB\n         L     R8,172(R4)               POINTER TO JOBNAME\n         L     R4,X'90'(R4)             OUCB POINTER\n         L     R4,X'10'(R4)             OUCB FLAG BYTE\n         ST    R4,OUCBFLG               SAVE IT\n         TM    X'74'(R2),X'80'          IS THIS MVS/XA ?\n         BZ    MVS                      NO: SKIP SETTING BACK TO 24\n         LA    R15,MVS                  SET AMODE\n         DC    X'0B0F'                  BSM R0,R15\nMVS      TM    OUCBFLG+2,X'20'          LOGON CREATED ?\n         BO    MVSLOOP                  YES - DONT OPEN\n         OPEN  (SYSIN,(INPUT),SYSPRINT,(OUTPUT))\n         B     *+8                      SKIP OVER\nMVSLOOP  L     R8,8(,R1)                A(PSCB)\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        TM    16(R8),X'80'             OPER AUTH?                    *\n*        BZ    RETURN                   NONFUNCTIONAL IF NOT          *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    CHECK ACF2 JESOPER CAPABILITY                                    *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         ACFINCVT R3,NONE=RETURN        FIND ACF2 CVT\n         USING ACCVT,R3                 ADDRESS IT\n         ACFGUCB R4,NONE=RETURN,        GET ACF2 ACUCB                 X\n               INLINE=YES,                                             X\n               SYS=AOS2\n         USING ACUCB,R4                 ADDRESS IT\n         DROP  R3\n         L     R3,ACULRECP              POINT AT LOGONID RECORD\n         USING LIDREC,R3                ADDRESS IT\n         TM    LIDI2FLG,LIDI2F3         IS JESOPER BIT ON?\n         BO    CONTINUE                 ..YES, KEEP GOING\n         TM    OUCBFLG+2,X'20'          LOGON CREATED ?\n         BZ    BATOUT1                  NO - USE DCBS\n         TPUT  ERRMSG,50                GIVE ERROR MESSAGE\n         B     RETURN                   ALL DONE\nBATOUT1  CLC   LIDLID(3),=C'WC0'        IS IT PRODUCTION?\n         BE    CONTINUE                 ..YES, KEEP GOING\n         MVC   LINE+00(4),=X'00360000'  LENGTH\n         MVC   LINE+04(50),ERRMSG       TEXT\n         PUT   SYSPRINT,LINE            PRINT IT\n         B     RETURN                   ALL DONE\n         DROP  R3,R4\n*\nCONTINUE DS    0H\n         MVC   WTOL+60(8),0(R8)         SAVE USERID\n         TM    OUCBFLG+2,X'20'          LOGON CREATED ?\n         BZ    BATREAD                  NO - USE DCBS\n         L     R2,CPPLPTR               CPPL\n         L     R3,4(R2)                 UPT\n         L     R4,12(R2)                ECT\n        PUTGET PARM=PUTGET,UPT=(3),ECT=(4),MF=(E,IOPL)\n         L     R3,PUTGET+12\n         LH    R8,0(R3)\n         S     R8,=F'4'\n         STC   R8,PASSWORD\n         BCTR  R8,R0\n         LTR   R8,R8\n         BM    RETURN\n         EX    R8,MOVPASS\n         B     ACBLOOP\nBATREAD  MVC   LINE+00(36),MSG2         MOVE IN MESSAGE\n         PUT   SYSPRINT,LINE            PRINT IT\n         GET   SYSIN,GBUF\n         MVC   LINE+00(4),=X'004C0000'  72 BYTES\n         MVC   LINE+04(72),GBUF         MOVE IN TEXT\n         MVC   LINE+04(10),=CL10'SUPPRESSED'\n         PUT   SYSPRINT,LINE            PRINT IT\n         LA    R3,0                     INIT COUNT\n         LA    R8,GBUF                  INIT POINTER\nCHRLOOP  CLI   0(R8),C' '               BLANK ?\n         BE    CHRDONE                  YES - GOT COUNT\n         LA    R3,1(R3)                 ADD ONE\n         LA    R8,1(R8)                 ADD ONE\n         B     CHRLOOP                  AND TRY AGAIN\nCHRDONE  STC   R3,PASSWORD              SAVE IT\n         MVC   PASSWORD+1(8),GBUF       MOVE IN TEXT\n* * * * * * * * * * * * * * * * *\n*                               *\n*   FIND AN AVAILABLE ACB       *\n*                               *\n* * * * * * * * * * * * * * * * *\nACBLOOP  EQU   *\n         OPEN  VTAMACB                  TRY VTAMN\n         LTR   R15,R15                  OK\n         BZ    SETLOG                   YES\n         SR    R3,R3\n         IC    R3,APPLID+7              SEVENTH CHAR OF APPLID\n         LA    R3,1(,R3)                INCR EBCDIC CHAR (RANGE 1-5)\n         STC   R3,APPLID+7              SEVENTH CHAR OF APPLID\n         CH    R3,=XL2'00FA'            TOO FAR\n         BL    ACBLOOP                  TRY NEXT ACB\n         TM    OUCBFLG+2,X'20'          LOGON CREATED ?\n         BZ    BATOUT2                  NO - USE DCBS\n         TPUT  MSG1,40                  WRITE MESSAGE\n         B     RETURN                   ALL DONE\nBATOUT2  MVC   LINE+00(4),=X'002C0000'  LENGTH\n         MVC   LINE+04(40),MSG1         TEXT\n         PUT   SYSPRINT,LINE            PRINT IT\n         B     RETURN                   ALL DONE\n         EJECT\n* * * * * * * * * * * * * * * * *\n*                               *\n*          SETLOGON             *\n*                               *\n* * * * * * * * * * * * * * * * *\nSETLOG   EQU   *\n         SETLOGON RPL=INITRPL,ACB=VTAMACB,OPTCD=(START,SYN),           X\n               ECB=INTERNAL\n         LTR   R15,R15\n         BNZ   RETURN                   FORGET IT IF NOT PERFECT\n* * * * * * * * * * * * * * * * *\n*                               *\n*  STAX TO ALLOW PA1 BREAKOUT   *\n*                               *\n* * * * * * * * * * * * * * * * *\n         STAX  ATTNEX\n* * * * * * * * * * * * * * * * *\n*                               *\n*            REQSESS            *\n*                               *\n* * * * * * * * * * * * * * * * *\nREQS1    EQU   *\n    REQSESS RPL=RPLREQS,AAREA=0,OPTCD=(SYN,NQ),RECLEN=5,AREA=APPLID+3\n         LTR   R15,R15\n         BNZ   RETURN                   N.G. IF NOT PERFECT\n* * * * * * * * * * * * * * * * *\n*                               *\n*  ISSUE THE (FIRST) RCV ANY    *\n*                               *\n* * * * * * * * * * * * * * * * *\n         BAL   R12,RCVA                 SET UP THE RCV ANY\n* * * * * * * * * * * * * * * * *\n*                               *\n*  WAIT FOR END OF MESSAGE (EB) *\n*                               *\n* * * * * * * * * * * * * * * * *\n         TM    OUCBFLG+2,X'20'          LOGON CREATED ?\n         BO    NOSTIME                  YES - DONT PUT UP STIMER\n        STIMER REAL,ATTNEX,BINTVL=AWHILE WAIT FOR AWHILE\nNOSTIME  WAIT  ECB=MAINECB\n         CLI   MAINECB+3,X'80'          TERMINATE ?\n         BE    RETURN                   YES\n         CLI   MAINECB+3,X'40'          ATTN/TIMER ?\n         BNE   RETURN                   NO - THEN WHY ARE WE HERE\n         XC    MAINECB,MAINECB          RESET ECB\n         CLOSE VTAMACB\n         B     ACBLOOP\n* * * * * * * * * * * * * * *\n*                           *\n*    RETURN TO CALLER       *\n*                           *\n* * * * * * * * * * * * * * *\nRETURN   EQU   *\n         TM    OUCBFLG+2,X'20'          LOGON CREATED ?\n         BO    RETURNX                  YES - DONT CLOSE\n         CLOSE (SYSIN,,SYSPRINT)\nRETURNX  L     R13,SAV+4\n         RETURN (14,12),RC=0\n* * * * * * * * * * * * * * *\n*                           *\n*  ATTN EXIT ROUTINE        *\n*                           *\n* * * * * * * * * * * * * * *\nMAINECB  DC    F'0'\nATTNEX   EQU   *\n         USING *,R15\n         STM   R0,R15,SAV3\n         LM    R10,R11,SAVEBASE\n         DROP  R15\n         USING JESOPER,R10,R11\n         LA    R13,SAVEXT2\n         POST  MAINECB,X'40'            SET ATTN/TIMER ECB\n         LM    R0,R15,SAV3\n         BR    R14\n* * * * * * * * * * * * * * *\n*                           *\n*  ISSUE ASYNCH RECEIVE ANY *\n*                           *\n* * * * * * * * * * * * * * *\nRCVA     EQU   *\n         RECEIVE RPL=RPLRCV,AREA=RAREA,AREALEN=256,EXIT=RCVEXIT,       X\n               RTYPE=(DFSYN,DFASY,RESP),OPTCD=(CA,ANY,TRUNC,ASY,Q)\n         BR    R12\n         EJECT\n* * * * * * * * * * * * * * * *\n*                             *\n*  SESSION ESTABLISH EXIT     *\n*                             *\n* * * * * * * * * * * * * * * *\nSCIPEXIT EQU   *\n         USING *,R15\n         STM   R0,R15,SAV2\n         LM    R10,R11,SAVEBASE\n         DROP  R15\n         USING JESOPER,R10,R11\n         LA    R13,SAVEXT\n         LM    R3,R7,0(R1)              PICK UP PARMS\n*              R3=ACB\n*              R4=CID                   (UNLESS BIND)\n*              R5=USERFLD               (UNLESS BIND)\n*              R6=BIND PARM             (IF BIND)\n*              R7=RPL\n         SHOWCB RPL=(7),AM=VTAM,FIELDS=ARG,AREA=CID,LENGTH=4\n         L     R2,CID\n         MODCB  AM=VTAM,RPL=SESSRPL,ARG=(R2)\n         MODCB  AM=VTAM,RPL=RPLSEND,ARG=(R2)\n         MODCB  AM=VTAM,RPL=RPLRESP,ARG=(R2)\n         TESTCB RPL=(7),AM=VTAM,CONTROL=(BIND)\n         BE    BIND                     BIND COMMAND\n         SHOWCB RPL=(7),AM=VTAM,FIELDS=SEQNO,AREA=SEQNO,LENGTH=4\n         L     R2,SEQNO\n         MODCB  AM=VTAM,RPL=SESSRPL,SEQNO=(R2)\n         TESTCB RPL=(7),AM=VTAM,CONTROL=(SDT)\n         BE    SDT                      SDT COMMAND\n         TESTCB RPL=(7),AM=VTAM,CONTROL=(STSN)\n         BE    STSN                     STSN COMMAND\nSCIPRET  EQU   *\n         LM    R0,R15,SAV2\n         SR    R15,R15\n         BR    R14\nBIND     EQU   *\n         OPNSEC RPL=SCIPRPL,ACB=(3),NIB=REQNIB\n         LTR   R15,R15\n         BNZ   REJ\n         B     SCIPRET\nREJ      EQU   *\n         SESSIONC RPL=SESSRPL,CONTROL=BIND,RESPOND=(EX,FME),ACB=(3)\n         B      SCIPRET\nSDT      EQU   *\n         SESSIONC RPL=SESSRPL,CONTROL=SDT,RESPOND=(NEX,FME),ACB=(3)\n         B     SCIPRET\nSTSN     EQU   *\n         SESSIONC RPL=SESSRPL,CONTROL=STSN,RESPOND=(NEX,FME),ACB=(R3)\n         B     SCIPRET\n         EJECT\n* * * * * * * * * * * * * * * *\n*                             *\n*  RECEIVE VTAM RESPONSES     *\n*                             *\n* * * * * * * * * * * * * * * *\nRCVEXIT  EQU   *\n         USING *,R15\n         STM   R0,R15,SAV2\n         LM    R10,R11,SAVEBASE\n         DROP  R15\n         USING JESOPER,R10,R11\n         LA    R13,SAVEXT\n         CHECK RPL=RPLRCV\n         MVC   RPLSEND+36(4),RPLRCV+36  MOVE CID TO SEND RPL\n         MVC   RPLRESP+36(4),RPLRCV+36  MOVE CID TO SEND RPL\n         MVC   RPLRESP+66(2),RPLRCV+66  MOVE SEQNO TO RESP RPL\n         TESTCB AM=VTAM,RPL=RPLRCV,RTYPE=(RESP)\n         BE    RERCV                    GO IF THIS IS A RESPONSE\n         TESTCB AM=VTAM,RPL=RPLRCV,RESPOND=(NEX,FME)\n         BNE   EXCONLY                  GO IF +FME NOT REQD\n         MVC   RPLRESP+77(3),RPLRCV+77  SET TYPES IN RESP\n         SEND  RPL=RPLRESP,STYPE=RESP,OPTCD=SYN\nEXCONLY  EQU   *\n         TESTCB RPL=RPLRCV,AM=VTAM,BRACKET=EB\n         BE    TGET                     END OF THIS - GO TRY NEXT\nTRYBB    EQU   *\n         TESTCB RPL=RPLRCV,AM=VTAM,BRACKET=BB\n         BE    RERCV                    SKIP THE DUMB BEGIN BRACKET\n         TESTCB RPL=RPLRCV,AM=VTAM,CONTROL=DATA\n         BNE   RERCV                    DON'T IF NO DATA TO DEBLOCK\n         L     R3,RPLRCV+48  RPLRLEN\n         LTR   R3,R3                    ANY DATA REALLY?\n         BZ    RERCV                    DON'T LOOP IF NOT\n         L     R4,OUTPTR                A(OUTPUT BUFFER)\n         LA    R5,RAREA\nRCV1     EQU   *\n         LR    R6,R5                    SAVE A(INPUT AREA)\nRCV2     EQU   *\n         CLI   0(R5),X'15'              NL\n         BE    RCV3                     GO IF YES\n         LA    R5,1(,R5)                NEXT INPUT CHAR\n         BCT   R3,RCV2                  BRANCH IF NOT THE LAST\n* OUT OF INPUT RECORD WITHOUT A X'15'\n         SR    R5,R6\n         L     R9,LEN\n         AR    R9,R5                    THIS PLUS PRIOR\n         ST    R9,LEN                   CURRENT LENGTH\n         BCTR  R9,0\n         L     R1,OUTPTR\n         EX    R9,MVCI\n         AR    R1,R5                    NEW OUTPUT BUFF ADDR\n         ST    R1,OUTPTR\n         B     RERCV\nRCV3     EQU   *\n         LA    R7,1(,R5)                SAVE ADDR OF NEXT\n         SR    R5,R6\n         L     R9,LEN\n         AR    R9,R5\n         ST    R9,LEN                   LENGTH IN OUTBUF\n         BCTR  R9,0\n         L     R1,OUTPTR\n         EX    R9,MVCI\n         LA    R1,OUTBUF                A(BUFF) FOR TPUT\n         ST    R1,OUTPTR                RESET OUTPUT PTR\n         L     R0,LEN\n         TM    OUCBFLG+2,X'20'          LOGON CREATED ?\n         BZ    BATOUT3                  NO - USE DCBS\n         SVC   93                       TPUT\n         B     BATDUN3                  ALL DONE\nBATMOVR  MVC   LINE+04(0),OUTBUF        TEXT\nBATOUT3  XC    LINE+00(4),LINE+00       ZERO OUT\n         L     R1,LEN                   GET LENGTH\n         LTR   R1,R1                    GET LENGTH\n         BZ    *+6                      ZERO?\n         BCTR  R1,R0                    DECREMENT\n         EX    R1,BATMOVR               MOVE IN TEXT\n         LA    R1,5(R1)                 ADD FOUR FOR HEADER\n         STC   R1,LINE+01               LENGTH\n         PUT   SYSPRINT,LINE            PRINT IT\nBATDUN3  L     R1,OUTPTR                RESET OUTPUT PTR\n         CLC   9(8,R1),=C'IAT2810 '     IS THIS SESSION ESTABLISHED\n         BNE   SKTPUT                   NO\n         MVC   WTOL+4(50),9(R1)         MOVE MESSAGE\n         WTO   MF=(E,WTOL)\nSKTPUT   EQU   *\n         LR    R5,R7                    NEW FIRST CHAR\n         SR    R1,R1\n         ST    R1,LEN                   CLEAR LENGTH\n         BCT   R3,RCV1                  GO IF NOT AT END OF INPUT\nRERCV    EQU   *\n         BAL   R12,RCVA\nRCVEX    EQU   *\n         LM    R0,R15,SAV2\n         BR    R14\nMVCI     MVC   0(0,R1),0(R6)\nPOSTOP   EQU   *\n         POST  MAINECB,X'80'            TERMINATE\n         B     RCVEX\nTGET     EQU   *  GET NEXT JES CMD FROM TERMINAL  *\n         TM    OUCBFLG+2,X'20'          LOGON CREATED ?\n         BZ    BATOUT4                  NO - USE DCBS\n         LA    R0,7                     LENGTH OF COMMAND\n         LA    R1,=CL7'JESOPER'\n         SVC   93                       ISSUE TPUT\n         TGET  GBUF,80                  80 BYTES MAX\n         OC    GBUF,X40\n         C     R1,=F'0'  ANYTHING THERE ?\n         BH    GOTCMD    YES\nSETNULL  LA    R1,3      SET NULL\n         MVC   GBUF(3),=CL3'*E '        PUT IN DUMMY COMMAND\n         B     GOTCMD                   ALL DONE\nBATOUT4  GET   SYSIN,GBUF\n         MVC   LINE+00(4),=X'004C0000'  72 BYTES\n         MVC   LINE+04(72),GBUF         MOVE IN TEXT\n         PUT   SYSPRINT,LINE            PRINT IT\n         CLC   GBUF(16),=CL16' '        BLANKS\n         BE    SETNULL\n         LA    R1,0                     INIT COUNT\n         LA    R8,GBUF                  INIT POINTER\nCHRLUP2  CLC   0(8,R8),=CL8'        '   BLANK ?\n         BE    GOTCMD                   YES - GOT COUNT\n         LA    R1,1(R1)                 ADD ONE\n         LA    R8,1(R8)                 ADD ONE\n         B     CHRLUP2                  AND TRY AGAIN\nGOTCMD   ST    R1,RPLSEND+48            SET SEND LEN\n         CLC   GBUF(3),=C'END'          COMMAND END ?\n         BE    POSTOP                   THEN END\n        SEND  RPL=RPLSEND,AREA=GBUF,STYPE=REQ,CONTROL=DATA,            X\n               RESPOND=(NEX,FME,NRRN),POST=RESP,BRACKET=(BB,EB),       X\n               OPTCD=(SYN,CA),RTYPE=(DFSYN,DFASY,RESP)\n         B     RERCV\n*\nOUTPTR   DC    A(OUTBUF)\nLEN      DC    F'0'\nSAV      DC    18F'0'\nSAV2     DC    16F'0'\nSAV3     DC    16F'0'\nSAVEXT   DC    18F'0'\nSAVEXT2  DC    18F'0'\nSAVEBASE DC    2F'0'\nCID      DC    F'0'\nSEQNO    DC    F'0'\nX40      DC    80X'40'                  MAKE UPPERCASE\nGBUF     DC    XL80'00'                 BEST ON HALFWORD BOUNDARY\nRAREA    DC    512X'00'\n*\nRPLSEND  RPL   AM=VTAM,ACB=VTAMACB\nRPLRESP  RPL   AM=VTAM,ACB=VTAMACB\nRPLREQS  RPL   AM=VTAM,ACB=VTAMACB,NIB=REQNIB\nRPLRCV   RPL   AM=VTAM,ACB=VTAMACB\nSCIPRPL  RPL   AM=VTAM,ACB=VTAMACB,OPTCD=SYN\nSESSRPL  RPL   AM=VTAM,ACB=VTAMACB,OPTCD=SYN,STYPE=RESP\nINITRPL  RPL   AM=VTAM\nREQNIB   NIB   MODE=RECORD,LOGMODE=INTERACT,NAME=WCJES3\nVTAMACB  ACB   AM=VTAM,APPLID=APPLID,PASSWD=PASSWORD,EXLST=XLST\nXLST     EXLST AM=VTAM,SCIP=SCIPEXIT\nAPPLID   DC    X'07',C'WCVTAM1'\nPASSWORD DC    X'00',CL80' '\nMOVPASS  MVC   PASSWORD+1(0),4(R3)\nMSG1     DC    CL40'UNABLE TO ESTABLISH SESSION WITH JES3   '\nERRMSG   DC    CL50'*** NOT AUTHORIZED TO USE THE JESOPER COMMAND ***'\nPUTGET  PUTGET OUTPUT=(OLD,,PTBYPS),MF=L\nIOPL     DC    4F'0'\nOLD      DC    F'1'\n         DC    AL4(MSG2)\nMSG2     DC    H'36',H'0',CL32'JESOPER: PLEASE ENTER PASSWORD -'\nWTOL     WTO   'IAT2810 SESSION ESTABLISHED, WS= VTAM1 LU= WCVTAM1 UID=+\n                USERID  ',ROUTCDE=(2),DESC=7,MF=L\nCPPLPTR  DS    F\nOUCBFLG  DS    F\nAWHILE   DC    F'06000'            WAIT TIME (60 SEC)\nSYSIN    DCB   DDNAME=SYSIN,MACRF=GM,DSORG=PS,EODAD=POSTOP             X\n               RECFM=FB,LRECL=80\nSYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,                      X\n               RECFM=VB,LRECL=255,BLKSIZE=6160\n         LTORG\nLINE     DC    CL256' '\nOUTBUF   DC    512X'00'\n*\n         EJECT\n         LIDREC\n         ACUCB\n         ACFASVT\n         ACCVT\n         IHAPSA\n         IHAASCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW049": {"ttr": 10759, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW049) /*\n\n   ISSUE DIAGNOSE DEVICE CLOSE IF UNDER VM\n                                                                */ .\n++ VER (Z038) FMID(HJS2215) PRE(AJSW016) .\n++ SRCUPD(IATUX23) DISTLIB(AJES3SRC) .\n./   CHANGE NAME=IATUX23\n*                                                               AJSW049\n*        CHECK FOR VM ENVIRONMENT                               AJSW049\n*                                                               AJSW049\nUX23L065 DC    0H'0'                                            AJSW049\n         STIDP CPUID               LET'S SEE WHAT'S GOING ON    AJSW049\n         CLI   CPUID,X'FF'         RUNNING UNDER VM/370?        AJSW049\n         BNE   WDNOTVM             NO, SKIP CP CLOSE COMMAND    AJSW049\n*                                                               AJSW049\n*        SETUP THE CP CLOSE PRINTER COMMAND                     AJSW049\n*              AND SET DEVICE ADDRESS IN COMMAND TEXT           AJSW049\n*                                                               AJSW049\n         MVC   CPCLOSE,#CPCLOSE    PRIME COMMAND TEXT           AJSW049\n         MVC   CPDEV,WTRDODEV      SET DEVICE ADDRESS IN CMD    AJSW049\n*                                                               AJSW049\n*        ISSUE THE COMMAND VIA A DIAGNOSE                       AJSW049\n*                                                               AJSW049\n         LRA   R6,CPCLOSE          -> REAL ADDRESS OF CMD TXT   AJSW049\n         LA    R8,L'CPCLOSE        COMMAND TEXT LENGTH TO RY    AJSW049\n         DC    X'83',X'68',X'0008' DIAGNOSE 8 W/RX=6, RY=8      AJSW049\nWDNOTVM  DC    0H'0'                                            AJSW049\n         ARETURN RC=(R9)           RETURN TO CALLER             AJSW049\n*                                                               AJSW049\n*     CONSTANTS                                                 AJSW049\n*                                                               AJSW049\n#CPCLOSE DC    C'CLOSE DEV'        CP CLOSE COMMAND CONSTANT    AJSW049\nCPUID    EQU   WTRFRSVU,8,C'D'     TARGET FOR STIDP             AJSW049\nCPCLOSE  EQU   WTRFRSVU,L'#CPCLOSE,C'C' OLAY WTR DSECT WORKAR   AJSW049\nCPDEV    EQU   CPCLOSE+L'CPCLOSE-3,3,C'X' DEFINE COMMAND, PARM  AJSW049\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW051": {"ttr": 10761, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW051) /*\n\n       THIS MODIFICATION WILL:\n         - ALLOW A MESSAGE TO BE SENT TO A TSO USER NOTIFYING\n           THEM THAT A FILE HAS BEEN SENT VIA NJE\n           SEE ALSO AJSW012\n\n CHANGE HISTORY:\n\n 07/03/88 J. DAILEY             INITIAL IMPLEMENTATION\n\n                                                                 */ .\n++ VER(Z038) FMID(HJS2215).\n++ SRCUPD(IATUX42) DISTLIB(AJES3SRC) .\n./ CHANGE NAME=IATUX42                                                  $\n* THIS CODE DELETED BY USERMOD AJSW051 (LA   R15,4)             AJSW051\n         SLR   R15,R15            INDICATE SEND TSO MESSAGE     AJSW051\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW057": {"ttr": 10763, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++USERMOD (AJSW057) REWORK(1988190)  /* INSTALL SILO JES3 CODE: */ .\n++VER (Z038) FMID(HJS2215)\n             PRE(SLS1033)             /*\n\n       THIS MODIFICATION INSTALLS ALL SILO CODE FOR JES3\n       INCLUDING IATUX09, IATUX31, AND IATUX32.\n\n   THE SLSEHOOK MACRO MUST BE INSERTED INTO MODULE IATMDAL AFTER THE\nCOMPARE INSTRUCTION LABELED MDA744; FOR IATMDAL AT APAR LEVEL OY08531\nIT SHOULD BE INSERTED AFTER LINE 08920000;\n       VS2.SILO.SAMPLIB(IATUX09) (IATUX31) (IATUX32)\n\nCHANGE HISTORY:\n12/12/88 J. DAILEY       CHANGE IATUX31 TO CALL VENDOR EXITS THAT ARE\n                         IN A MODULE TABLE.\n\n        */ .\n++SRCUPD (IATMDAL) DISTLIB (AJES3SRC) .\n./ CHANGE NAME=IATMDAL\n         SLSEHOOK ,\n./ ENDUP\n++SRCUPD (IATUX09) DISTLIB (AJES3SRC) .\n./ CHANGE NAME=IATUX09\n         IATYTVT TYPE=DSECT                                     AJSW057\n         B     USRUX09                                          AJSW057\nUSRUX09  DS    0H\n***********************************************************************\n*  THIS IS AN EXAMPLE OF A JES3 USER EXIT 09 WHICH INVOKES THE        *\n*  AUTOMATED CARTRIDGE SYSTEM SUPPORT ROUTINE PROVIDED BY STORAGETEK. *\n*  THE STORAGETEK ACS SUPPORT ROUTINE NEVER FAILS A JOB;              *\n*  IT ALWAYS SETS A RETURN CODE OF 0.                                 *\n*  SEE MANUAL MVS/XA SPL: JES3 USER MODIFICATIONS AND MACROS          *\n*  (LC28-1372) FOR A DESCRIPTION OF USER EXIT 09'S ENTRY AND EXIT     *\n*  ENVIRONMENT.                                                       *\n*  IF THE INSTALLATION ALREADY UTILIZES JES3 USER EXIT 09, THEN THE   *\n*  EXISTING (OLD) EXIT SHOULD BE RENAMED AND THE LOAD MODULE'S NEW    *\n*  NAME SHOULD BE PLACED INSIDES THE QUOTES OF THE SETC STATEMENT     *\n*  BELOW.                                                             *\n***********************************************************************\n         LCLC  &OLDUX09\n&OLDUX09 SETC  ' ' <=== YOUR OLD IATUX09'S NEW NAME GOES INSIDE QUOTES\n*\n         AGO   .BYP01                                           AJSW057\n         TITLE 'IATYEQU - JES3 GENERAL EQUATES'\n         IATYEQU ,\n         TITLE 'IATYFCT - JES3 FUNCTION CONTROL TABLE'\n         IATYFCT ,\n         TITLE 'IATYREG - JES3 REGISTER EQUATES'\n         IATYREG ,\n         TITLE 'IATYTVT - JES3 TRANSFER VECTOR TABLE'\n         IATYTVT TYPE=DSECT\n*\n         TITLE 'JES3 EXAMINE FINAL JOB STATUS USER EXIT'\nIATUX09  CSECT ,\n         USING *,R15\n         IATYMOD BR=YES\n.BYP01   ANOP                                                   AJSW057\n         DROP  R15\n         USING IATUX09,R10         SPECIFY CSECT'S BASE REGISTER\n         LR    R10,R15             SET CSECT'S BASE ADDRESS\n*\n         XR    R5,R5               INITIALIZE IATUX09 RETURN CODE TO 0\n*\n         AIF   ('&OLDUX09' EQ ' ').DONEXIT\n         ALOAD EP=&OLDUX09,        BRING OLD USER EXIT RTN INTO STORAGE+\n               ERROR=USRNOXIT\n         LR    R15,R0              SAVE EXIT ROUTINE'S EPA\n         ACALL ENTER=(R15)         INVOKE THE EXIT ROUTINE\n         LR    R5,R15              SAVE EXIT ROUTINE'S RETURN CODE\nUSRMSGOK DS    0H\n         ADELETE EP=&OLDUX09       DELETE OLD USER EXIT FROM STORAGE\n         LTR   R5,R5               CHECK EXIT ROUTINE'S RETURN CODE\n         BC    NZERO,UX09DONE      IF RC NOT 0, SKIP STK EXIT.\nUSRNOXIT DS    0H\n.DONEXIT ANOP\n*\n         ALOAD EP=SLEEUX09,        BRING STK EXIT ROUTINE INTO STORAGE +\n               ERROR=STKNOXIT\n         LR    R15,R0              SAVE EXIT ROUTINE'S EPA\n         ACALL ENTER=(R15)         INVOKE THE EXIT ROUTINE\n         LR    R5,R15              SAVE EXIT ROUTINE'S RETURN CODE\n         ADELETE EP=SLEEUX09       DELETE EXIT ROUTINE FROM STORAGE\nSTKNOXIT DS    0H\n*\nUX09DONE DS    0H\n         LR    R15,R5              SET IATUX09 RETURN CODE\n         ARETURN RC=(R15)          RETURN TO IATIIDR\n         LTORG ,                   COLLECT LITERALS HERE\n         AGO   .BYP02                                           AJSW057\nAPARNUM  DC    CL5'     '          APAR NUMBER\nPTFNUM   DC    CL5'SP215'          PTF NUMBER\n*        END   ,                    **************  DELETED BY  AJSW057\n.BYP02   ANOP                                                   AJSW057\n++SRCUPD (IATUX31) .\n./ CHANGE NAME=IATUX31                                          AJSW057\n         B     GDUX31             GOTO OUR UX31 CODE            AJSW057\n         EJECT                                                  AJSW057\n****************************************************************AJSW057\n*                                                               AJSW057\n* THIS USER MOD PERFORMS NO EXAMINATION OF MESSAGES. INSTEAD    AJSW057\n* IT ACTS AS A DRIVE ROUTINE INVOKING OTHER MODULES MOSTLY      AJSW057\n* SUPPLIED BY VENDORS.                                          AJSW057\n*                                                               AJSW057\n* IF A ROUTINE RETURNS A RETURN CODE OF 8 OR 12 NO OTHER        AJSW057\n* ROUTINES WILL BE CALLED. A RETURN CODE OF 12 WILL BE CHANGED  AJSW057\n* TO A RETURN CODE OF 8. THIS ALLOWS THE MESSAGES TO AT LEAST   AJSW057\n* BE RECORDED IN THE JES3 MLOG.                                 AJSW057\n*                                                               AJSW057\n* THE FOLLOWING REGISTERS ARE RESERVED AND MUST NOT BE          AJSW057\n* DISTURBED:                                                    AJSW057\n*                                                               AJSW057\n*          R6 = POINTER TO TABLE OF ROUTINE NAMES.              AJSW057\n*          R7 = CONSOLE NUMBER/MESSAGE DEST CLASS               AJSW057\n*          R8 = ADDRESS OF COUNT AND TEXT.                      AJSW057\n*          R9 = HIGHEST RETURN CODE.                            AJSW057\n*                                                               AJSW057\n*                                                               AJSW057\n****************************************************************AJSW057\n*                                                               AJSW057\nGDUX31   DS    0H                 START OF GD/WC USERMOD CODE   AJSW057\n         LR    R7,R0              SAVE CONSOLE/MSG DEST         AJSW057\n         LR    R8,R1              SAVE ADDRESS OF COUNT/TEXT    AJSW057\n         SLR   R9,R9              INITIALIZE RETURN CODE        AJSW057\n         LA    R6,UX31RTNS        POINTER TO FIRST ROUTINE      AJSW057\n*                                                               AJSW057\nUX31LOOP DS    0H                                               AJSW057\n         CLI   0(R6),X'FF'        END OF TABLE                  AJSW057\n         BE    UX31END            YES, RETURN TO JES3           AJSW057\n         LR    R0,R6              SET PARM REG                  AJSW057\n         ALOAD EPLOC=(R0),ERROR=UX31INCR LOAD THE ROUTINE       AJSW057\n         LR    R15,R0             GET EPA OF ROUTINE            AJSW057\n         LR    R0,R7              SET CONSOLE PARM REG          AJSW057\n         LR    R1,R8              SET MESSAGE PARM REG          AJSW057\n         ACALL ENTER=(R15)        HAVE SCOTTY BEAM US THERE     AJSW057\n*                                                               AJSW057\n         B     UX31DEL            GET NEXT ROUTINE              AJSW057\n         B     UX31RC4            MESSAGE CHANGED               AJSW057\n         B     UX31RC8            MESSAGE TO DLOG/MLOG ONLY     AJSW057\n         B     UX31RC8            RC 12 CHANGE TO RC 8          AJSW057\n*                                                               AJSW057\nUX31RC4  DS    0H                                               AJSW057\n         LR    R8,R1              COUNT/TEXT                    AJSW057\n         CR    R9,R15             NEW RC > MAX RC               AJSW057\n         BNL   UX31DEL            NO, CONTINUE                  AJSW057\n         LR    R9,R15             SET HIGHEST RETURN CODE       AJSW057\n         B     UX31DEL            CONTINUE                      AJSW057\n*                                                               AJSW057\nUX31RC8  DS    0H                                               AJSW057\n         LA    R9,8               SET RETURN CODE               AJSW057\n*                                                               AJSW057\nUX31DEL  DS    0H                                               AJSW057\n         LR    R0,R6              SET PARM REG                  AJSW057\n         ADELETE EPLOC=(R0)       DELETE THE ROUTINE            AJSW057\n*                                                               AJSW057\nUX31INCR DS    0H                                               AJSW057\n         LA    R6,8(,R6)                                        AJSW057\n         B     UX31LOOP           LOOP BACK FOR NEXT ROUTINE    AJSW057\n*                                                               AJSW057\nUX31END  DS    0H                                               AJSW057\n         LR    R0,R7              SET CONSOLE PARM REG          AJSW057\n         LR    R1,R8              SET MESSAGE PARM REG          AJSW057\n         LR    R15,R9             SET RETURN CODE               AJSW057\n         ARETURN RC=(R15)                                       AJSW057\n*                                                               AJSW057\nUX31RTNS DS    0C          **** UX31 ROUTINE TABLE ****         AJSW057\n         DC    CL8'SLEEUX31'      SILO'S UX31                   AJSW057\n         DC    CL8'AOEXIT31'      AFOPERATOR UX31               AJSW057\n         DC    8X'FF'             DUMMY ENTRY                   AJSW057\n         DC    8X'FF'             DUMMY ENTRY                   AJSW057\n         DC    8X'FF'             DUMMY ENTRY                   AJSW057\nUXRTNSE  DC    8X'FF'             **** END OF ROUTINE TABLE ****AJSW057\n*                                                               AJSW057\nUMODNUM  DC    C'AJSW057'                                       AJSW057\n++SRCUPD (IATUX32) .\n./ CHANGE NAME=IATUX32                                          AJSW057\n         B     USRUX32-IATUX32(R15)                             AJSW057\nUSRUX32  DS    0H                                               AJSW057\n         AGO   .BYP01                                           AJSW057\nUX32     TITLE 'JES3 DYNALDSN OVERRIDE USER EXIT'\nIATUX32  AMODE 31\nIATUX32  RMODE ANY\n         IATYASM ,                 INSURE CORRECT SPLEVEL FOR MACROS\n.BYP01   ANOP                                                   AJSW057\n***********************************************************************\n*  THIS IS AN EXAMPLE OF A JES3 USER EXIT 32 WHICH INVOKES THE        *\n*  AUTOMATED CARTRIDGE SYSTEM SUPPORT ROUTINE PROVIDED BY STORAGETEK. *\n*  THE STORAGETEK ACS SUPPORT ROUTINE ALWAYS SETS A RETURN CODE OF 0. *\n*  SEE MANUAL MVS/XA SPL: JES3 USER MODIFICATIONS AND MACROS          *\n*  (LC28-1372) FOR A DESCRIPTION OF USER EXIT 32'S ENTRY AND EXIT     *\n*  ENVIRONMENT.                                                       *\n*  IF THE INSTALLATION ALREADY UTILIZES JES3 USER EXIT 32, THEN THE   *\n*  EXISTING (OLD) EXIT SHOULD BE RENAMED AND THE LOAD MODULE'S NEW    *\n*  NAME SHOULD BE PLACED INSIDES THE QUOTES OF THE SETC STATEMENT     *\n*  BELOW.                                                             *\n*  NOTE:  THE SUPPORT ROUTINE PROVIDED BY STORAGETEK (SLEEUX32) IS    *\n*  NORMALLY INSTALLED INTO LINKLIB.  IN ORDER TO AVOID FETCHING       *\n*  SLEEUX32 INTO STORAGE FROM LINKLIB EACH TIME DYNALLOC IS ISSUED,   *\n*  THE INSTALLATION MAY CONSIDER ADDING SLEEUX32 TO THE MODIFIED LPA  *\n*  LIST.  SEE MANUAL MVS/XA SPL: INITIALIZATION AND TUNING (GC28-1149)*\n*  FOR DETAILS ABOUT PARMLIB MEMBER IEALPAXX.                         *\n***********************************************************************\n         LCLC  &OLDUX32\n&OLDUX32 SETC  ' ' <=== YOUR OLD IATUX32'S NEW NAME GOES INSIDE QUOTES\n*\n         TITLE 'CVT - MVS COMMUNICATIONS VECTOR TABLE'\n         CVT   DSECT=YES\n         TITLE 'IATYAWA - JES3 ALLOCATION WORK AREA'\n         IATYAWA ,\n         AGO   .BYP02                                           AJSW057\n         TITLE 'IATYEQU - JES3 GENERAL EQUATES'\n         IATYEQU ,\n         TITLE 'IATYREG - JES3 REGISTER EQUATES'\n         IATYREG ,\n*\n         TITLE 'JES3 DYNALDSN OVERRIDE USER EXIT'\n.BYP02   ANOP                                                   AJSW057\nIATUX32  CSECT ,\n*        USING *,R15               **************   REPLACED BY AJSW057\n         USING IATUX32,R15                                      AJSW057\n         IATYMOD BR=YES\n         DROP  R15\n         USING AWA,R13             SPECIFY ALLOCATION WORK AREA BASE\n*\n         LR    R2,R10              SAVE ENTRY VALUE OF R10\n         LR    R3,R14              SAVE ENTRY VALUE OF R14\n*\n         USING IATUX32,R10         SPECIFY CSECT'S BASE REGISTER\n         LR    R10,R15             SET CSECT'S BASE ADDRESS\n*\n         L     R1,CVTPTR           GET ADDRESS OF CVT\n         L     R1,CVTLINK-CVT(,R1) GET ADDRESS OF LINKLIB'S DCB\n         LOAD  EP=SLEEUX32,        GET EPA OF STK EXIT ROUTINE         +\n               DCB=(R1),                                               +\n               ERRET=STKNOXIT\n         LR    R15,R0              SAVE EXIT ROUTINE'S EPA\n***\n*  USE SELSSIW, IN THE SERVICE ENTRANCE LIST IN THE AWA, AS THE\n*  AREA IN WHICH TO BUILD THE SYNCH PARAMETER LIST.\n***\n         LA    R1,AWASEL           GET ADR OF SERVICE ENTRANCE LIST\n         LA    R1,SELSSIW-SELSTART(,R1) GET ADR OF MODIFIABLE STORAGE\n         MVC   0(LENSYNCH,R1),LSYNCH INITIALIZE SYNCH PLIST\n         SYNCH (R15),              INVOKE THE EXIT ROUTINE             +\n               RESTORE=YES,        ..RESTORE R2-R13 WHEN EXIT RETURNS  +\n               STATE=SUPV,         ..INVOKE EXIT IN SUPERVISOR STATE   +\n               KEYADDR=EXITKEY,    ..INVOKE EXIT IN KEY 1              +\n               AMODE=CALLER,       ..INVOKE EXIT IN OUR AMODE          +\n               MF=(E,(R1))\n*\n         DELETE EP=SLEEUX32        DECREMENT EXIT'S USE COUNT\nSTKNOXIT DS    0H\n         XR    R15,R15             SET RETURN CODE TO 0\n*\n         AIF   ('&OLDUX32' EQ ' ').DONEXIT\n         L     R1,CVTPTR           GET ADDRESS OF CVT\n         L     R1,CVTLINK-CVT(,R1) GET ADDRESS OF LINKLIB'S DCB\n         LOAD  EP=&OLDUX32,        GET EPA OF OLD USER EXIT ROUTINE    +\n               DCB=(R1),                                               +\n               ERRET=USRNOXIT\n         LR    R15,R0              SAVE EXIT ROUTINE'S EPA\n***\n*  USE SELSSIW, IN THE SERVICE ENTRANCE LIST IN THE AWA, AS THE\n*  AREA IN WHICH TO BUILD THE SYNCH PARAMETER LIST.\n***\n         LA    R1,AWASEL           GET ADR OF SERVICE ENTRANCE LIST\n         LA    R1,SELSSIW-SELSTART(,R1) GET ADR OF MODIFIABLE STORAGE\n         MVC   0(LENSYNCH,R1),LSYNCH INITIALIZE SYNCH PLIST\n         SYNCH (R15),              INVOKE THE EXIT ROUTINE             +\n               RESTORE=YES,        ..RESTORE R2-R13 WHEN EXIT RETURNS  +\n               STATE=SUPV,         ..INVOKE EXIT IN SUPERVISOR STATE   +\n               KEYADDR=EXITKEY,    ..INVOKE EXIT IN KEY 1              +\n               AMODE=CALLER,       ..INVOKE EXIT IN OUR AMODE          +\n               MF=(E,(R1))\n*\n         LR    R14,R15             SAVE EXIT'S RETURN CODE ACROSS SVC 9\n         DELETE EP=&OLDUX32        DECREMENT EXIT'S USE COUNT\n         LR    R15,R14             RESTORE EXIT'S RETURN CODE TO R15\n         B     USRDONE\nUSRNOXIT DS    0H                  EXIT ROUTINE NOT FOUND\n         XR    R15,R15             SET RETURN CODE TO 0\nUSRDONE  DS    0H\n.DONEXIT ANOP\n*\n         LR    R10,R2              RESTORE R10 TO ENTRY VALUE\n         LR    R14,R3              RESTORE R14 TO ENTRY VALUE\n         BR    R14                 RETURN TO IATSICA\n***\n*  CSECT CONSTANTS\n***\nLSYNCH   SYNCH MF=L                PARAMETER LIST FOR SVC 12 (SYNCH)\nLENSYNCH EQU   *-LSYNCH            LENGTH OF SYNCH PARAMETER LIST\nEXITKEY  DC    XL1'10'             KEY IN WHICH TO INVOKE EXIT (KEY 1)\n*\n         LTORG ,                   COLLECT LITERALS HERE\n         AGO   .BYP03                                           AJSW057\nAPARNUM  DC    CL5'     '          APAR NUMBER\nPTFNUM   DC    CL5'SP215'          PTF NUMBER\n*        END   ,              ********************** DELETED BY AJSW057\n.BYP03   ANOP                                                   AJSW057\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJSW208": {"ttr": 11012, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AJSW208) /*\n\n    RESTRICTED CLASS VERIFICATION USERMOD\n\n    THIS MODIFICATION CONTAINS THE FOLLOWING:\n     1. CVER    - RESTRICTED CLASS VERIFICATION TABLE PROCESSOR DSP\n     2. CVERDATA- CVER DSP DATA CSECT\n     3. CVERDATA- MACRO MAPPING CVER DATA CSECT\n     4. CVERTAB - MACRO MAPPING RESTRICTED CLASS VERIFICATION TABLE\n                                      */.\n++ VER(Z038) FMID(HJS2215) PRE(AJSW003,AJSW013,AJSW008).\n++ JCLIN .\n//GEN11 JOB WC07Z0044,'531-1  CR SINGER'\n/*\n//SG21 EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET,RENT,REUS',\n//    UNIT='3350',SER=IPLYYY,N=GEN1,NAME=JES3LIB,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=MVS3.INCLUDE\n//SYSLIN DD *\n    INCLUDE INCLUDE(CVER)\n NAME CVER(R)\n/*\n//SG23 EXEC LINKS,\n// PARM='NCAL,LIST,XREF,LET',\n//    UNIT='3350',SER=IPLYYY,N=GEN1,NAME=JES3LIB,P1=' ',\n//    MOD=,P2=' ',OBJ=OBJPDS01,CLASS=T\n//INCLUDE DD DISP=SHR,VOLUME=(,RETAIN),DSNAME=MVS3.INCLUDE\n//SYSLIN DD *\n    INCLUDE INCLUDE(CVERDATA)\n NAME CVERDATA(R)\n/*\n++ SRC(CVER) DISTLIB(ASRCLIB) .\nCVER     TITLE 'JOB CLASS RESTRICTION DSP'                      AJSW208\nCVER     CSECT                                                  AJSW208\nCVER     AMODE 31                                               AJSW208\nCVER     RMODE ANY                                              AJSW208\n         IATYASM                                                AJSW208\n***********************************************************************\n*                                                                     *\n* MODULE NAME:                                                        *\n*              CVER                                                   *\n*                                                                     *\n* NON-COPYRIGHT:                                                      *\n*              GENERAL DYNAMICS (DSD) - MODIFICATION CODE 'AJSW208'   *\n*                                                                     *\n* LEVEL:                                                              *\n*              JES3 RELEASE 2.1.5                                     *\n*                                                                     *\n* PATCH LABEL:                                                        *\n*              PTCHP                                                  *\n*                                                                     *\n* FUNCTION:                                                           *\n*              THIS ROUTINE LOADS THE TABLE OF RESTRICTED JOB         *\n*              CLASSES AND USERID PERMITTED TO USE THEM.              *\n*                                                                     *\n* OPERATION:                                                          *\n*              CVER DSP IS INVOKED BY AN OPERATOR CALL COMMAND.       *\n*              VALID CALLING SEQUENCES ARE:                           *\n*                                                                     *\n*                    *X,CVER,T,TABLENAME   -> LOAD CLASS TABLE        *\n*                    *X,CVER,R,TABLENAME   -> REPLACE CLASS TABLE     *\n*                    *X,CVER,Q             -> QUERY IF ACTIVE         *\n*                    *X,CVER,C             -> CANCEL CLASS CHECKING   *\n*                    *X,CVER,L,U=UID       -> LIST CLASSES VALID FOR  *\n*                                             A UID                   *\n*                             ,C=CLASS     -> LIST UIDS FOR CLASS     *\n*                             ,L           -> LIST RESTRICTED CLASSES *\n*                                                                     *\n*              THE DEFAULT TABLE, 'CVERGEN', IS LOADED WHEN THE       *\n*              FIRST JOB COMES THROUGH THE SYSTEM. IATUX04 WILL       *\n*              ISSUE A CALL TO CVER TO LOAD THE TABLE. THE SOURCE     *\n*              FOR THE DEFAULT TABLE WILL BE KEPT IN SYS1.SYSINLIB.   *\n*              THE JCL TO ASSEMBLE AND LINK THE TABLE WILL BE IN      *\n*              SYS1.JOBLIB. THE LINKEDITED MODULE WILL BE RESIDE IN   *\n*              SYS1.SYS2LINK.                                         *\n*                                                                     *\n*                                                                     *\n* DEPENDENCIES:                                                       *\n*              NONE                                                   *\n*                                                                     *\n* RESTRICTIONS:                                                       *\n*              NONE                                                   *\n*                                                                     *\n* PROCESSOR:                                                          *\n*              VS ASSEMBLER                                           *\n*                                                                     *\n* ATTRIBUTES:                                                         *\n*              REENTERABLE                                            *\n*                                                                     *\n* ENTRY POINTS:                                                       *\n*              CVER                                                   *\n*                                                                     *\n* ENTRY PURPOSE:                                                      *\n*              SEE FUNCTION.                                          *\n*                                                                     *\n* ENTRY LINKAGE:                                                      *\n*              IATGRJR (JSSDRIVER) LOADS AND CALLS CVER               *\n*                                                                     *\n* REGISTER CONVENTIONS:                                               *\n*              R05->RESTRICTED CLASS TABLE HEADER                     *\n*              R06->RESTRICTED CLASS TABLE CLASS ENTRY                *\n*              R07->RESTRICTED CLASS TABLE USER ENTRY                 *\n*              R10->BASE REGISTER                                     *\n*              R11->FCT                                               *\n*              R12->TVT                                               *\n*              R13->CVERDATA 'CVER DATA CSECT'                        *\n*              R14->JSSRTN                                            *\n*              R15->CVER                                              *\n*                                                                     *\n* INPUT:                                                              *\n*              CVER COMMAND WITH PARAMETERS (SEE OPERATION)           *\n*                                                                     *\n* EXIT-NORMAL:                                                        *\n*              ARETURN RC=0                                           *\n*                                                                     *\n* EXIT-ERROR:                                                         *\n*              NONE                                                   *\n*                                                                     *\n* EXIT-USER:                                                          *\n*              NONE                                                   *\n*                                                                     *\n* OUTPUT:                                                             *\n*                                                                     *\n*              FOR A LOAD OR REPLACE, THE ADDRESS OF THE TABLE IS     *\n*              STOWED IN TVTUVER                                      *\n*                                                                     *\n*              FOR A DELETE, THE POINTER IN TVTUVER IS CLEARED AFTER  *\n*              THE TABLE STORAGE IS RELEASED.                         *\n*                                                                     *\n*              FOR A DISPLAY, DATA DEPENDING ON THE DISPLAY IS OUTPUT *\n*              TO THE REQUESTING TABLE.                               *\n*                                                                     *\n* EXTERNAL ROUTINES:                                                  *\n*              CVERDATA - DATA CSECT                                  *\n*                                                                     *\n* CONTROL BLOCKS:                                                     *\n*              CVERDATA  (DSD)                                        *\n*              CVERTAB   (DSD)     R/O                                *\n*              IATYTVT   (JES3)    R/O                                *\n*              IATYFCT   (JES3)    R/O                                *\n*              IATYCNS   (JES3)    R/O                                *\n*                                                                     *\n* EXECUTABLE MACROS:                                                  *\n*              AGETMAIN                                               *\n*              ADELETE                                                *\n*              ALOAD                                                  *\n*              APUTMAIN                                               *\n*              ARELEASE                                               *\n*              AWAIT                                                  *\n*              IATXCNS                                                *\n*              IATXCSF                                                *\n*              IATXSCN1                                               *\n*              IATYMOD                                                *\n*              MESSAGE                                                *\n*                                                                     *\n* ENQUEUE RESOURCES:                                                  *\n*              NONE                                                   *\n*                                                                     *\n* MP LOCKS USED:                                                      *\n*              NONE                                                   *\n*                                                                     *\n* MESSAGES:                                                           *\n*              IATWC001                                               *\n*              IATWC002                                               *\n*              IATWC003                                               *\n*              IATWC004                                               *\n*              IATWC005                                               *\n*              IATWC006                                               *\n*              IATWC007                                               *\n*              IATWC008                                               *\n*              IATWC009                                               *\n*              IATWC010                                               *\n*              IATWC011                                               *\n*              IATWC012                                               *\n*              IATWC014                                               *\n*                                                                     *\n* ABEND CODES:                                                        *\n*              NONE                                                   *\n*                                                                     *\n***********************************************************************\nCVER     CSECT                                                  AJSW208\n         IATYEQU  ,                                             AJSW208\n         IATYREG  ,                                             AJSW208\n         IATYTVT  TYPE=DSECT                                    AJSW208\n         IATYFCT  ,                                             AJSW208\n         IATYCNS  TYPE=INPUT,CODES=YES                          AJSW208\n         EJECT                                                  AJSW208\n         CVERTAB  ,                                             AJSW208\n         EJECT                                                  AJSW208\n         CVERDATA TYPE=DSECT                                    AJSW208\n         TITLE 'JOB CLASS RESTRICTION DSP'                      AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\n*                    INITIALIZATION                             AJSW208\n*                                                               AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\nCVER     CSECT                                                  AJSW208\n         USING CVER,R15                                         AJSW208\n*                                                               AJSW208\n         IATYMOD BR=YES           IDENTIFY MODULE               AJSW208\n*                                                               AJSW208\n         STM   R14,R1,JSSRET      SAVE RETURN ADDRESS           AJSW208\n         LR    R10,R15             SET CSECT BASE REGISTER      AJSW208\n         DROP  R15                                              AJSW208\n         USING CVER,R10            SET CSECT ADDRESSABILITY     AJSW208\n*                                                               AJSW208\n         USING CVERDATA,R13        DATA CSECT ADDRBLTY          AJSW208\n         USING CVERTABH,R5         CLASS TABLE HDR ADDRBLTY     AJSW208\n         USING CVERCTAB,R6        CLASS TABLE ENTRY ADDRBLTY    AJSW208\n         USING CVERUTAB,R7        USER ENTRY ADDRESSABILITY     AJSW208\n*                                                               AJSW208\n         MVC   TABLSAVE,TVTUVER   COPY TABLE ADDRESS            AJSW208\n         NI    TABLSAVE,TURNOFF-BUSYBIT ENSURE BUSY BIT IS OFF  AJSW208\n*                                                               AJSW208\n         IATXCNS TYPE=GET         EXTRACT INPUT BUFFER          AJSW208\n*                                                               AJSW208\n         LR    R9,R1              SAVE ADDR OF IATYCNS          AJSW208\n         ST    R9,CONSADDR        SAVE -> IATYCONS              AJSW208\n         USING CONSMESS,R9        CONSOLE MESSAGE PROCESSING    AJSW208\n         LH    R8,CONSNUM         CALLING CONSOLE ID            AJSW208\n         STH   R8,XCONS           SAVE CALLING CONSOLE ID       AJSW208\n         DROP  R9                                               AJSW208\n*                                                               AJSW208\n         IATXSCN1 PFX=(R9),EOD=PARMERR,ERROR=PARMERR            AJSW208\n*                                                               AJSW208\n         LTR   R1,R1              IS THIS A KEYWORD PARM?       AJSW208\n         BC    NZERO,PARMERR      YES, PARAMETERS IN ERROR      AJSW208\n         LTR   R0,R0              WAS THERE ANY PARAMETERS      AJSW208\n         BC    ZERO,PARMERR       NO,ISSUE ERROR MESSAGE        AJSW208\n         BCTR  R2,0               DECREMENT LENGTH BY 1         AJSW208\n         LTR   R2,R2              NOW SHOULD BE 0 - OTHERWISE   AJSW208\n         BC    NZERO,PARMERR      IT'S AN ERROR IF NOT          AJSW208\n         LR    R1,R0              -> TO DATA IN USABLE REG.     AJSW208\n         LA    R2,CMDPRIM         -> TO PRIMARY PARAMETER TABLE AJSW208\n*                                                               AJSW208\nCVER0100 DS    0H                                               AJSW208\n         CLC   0(1,R1),0(R2)      PRIMARY PARAMETER MATCH       AJSW208\n         BC    NE,CVER0110        NO, GET NEXT TABLE ENTRY      AJSW208\n         ICM   R15,B'1111',1(R2)  YES, GET ADDR OF PROC RTN     AJSW208\n         BR    R15                  AND PROCESS THE COMMAND     AJSW208\n*                                                               AJSW208\nCVER0110 DS    0H                                               AJSW208\n         LA    R2,CMDPRIM#(,R2)   GET NEXT ENTRY IN THE TABLE   AJSW208\n         CLI   0(R2),X'FF'        END OF TABLE                  AJSW208\n         BC    NE,CVER0100        NO, LOOP BACK FOR CHECK       AJSW208\n         B     PARMERR            YES, INVALID PARAMETER        AJSW208\n         EJECT                                                  AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\n*               LOAD A RESTRICTED CLASS TABLE                   AJSW208\n*                                                               AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\nCMDT     DS    0H                                               AJSW208\n         OC    TABLSAVE,TABLSAVE  DOES A TABLE CURRENTLY EXIST  AJSW208\n         BC    ZERO,CMDT0100      NO,CONTINUE PROCESSING        AJSW208\n         LA    R1,IATWC005        -> TO ERROR MESSAGE           AJSW208\n         ST    R1,EXITMSG                                       AJSW208\n         B     CVEREXIT           RETURN TO JSS                 AJSW208\n*                                                               AJSW208\nCMDT0100 DS    0H                                               AJSW208\n         IATXSCN1 PFX=(R9),EOD=PARMERR,ERROR=PARMERR            AJSW208\n*                                                               AJSW208\n         LTR   R1,R1              IS THIS A KEYWORD PARM?       AJSW208\n         BC    NZERO,PARMERRT     YES, PARAMETERS IN ERROR      AJSW208\n         LTR   R0,R0              WAS THERE ANY PARAMETERS      AJSW208\n         BC    ZERO,PARMERRT      NO,ISSUE ERROR MESSAGE        AJSW208\n         CH    R2,=H'8'           SIZE LARGER THAN MAX          AJSW208\n         BC    GT,PARMERRT        YEP, ERROR.                   AJSW208\n*                                                               AJSW208\n         BCTR  R2,R0              DECREMENT LENGTH FOR MVC      AJSW208\n         LR    R1,R0              COPY -> TO TABLE NAME         AJSW208\n         EX    R2,MVCNAME         SAVE TABLE NAME               AJSW208\n         BAL   R14,GETTAB         GO GET THE CLASS TABLE        AJSW208\n*                                                               AJSW208\n         LTR   R1,R1              DID WE GET THE TABLE          AJSW208\n         BC    ZERO,CMDT9999      NO, EXIT WITH ERROR           AJSW208\n*                                                               AJSW208\nCMDT0200 DS    0H                                               AJSW208\n         ST    R1,TVTUVER         SAVE -> TO CLASS TABLE        AJSW208\n         MVC   WORKREC(WC007#),IATWC007                         AJSW208\n         MVC   WORKREC+WC007I1(L'WC007I1),TABLNAM               AJSW208\n         LA    R1,WORKREC         -> TO EXIT MESSAGE            AJSW208\n         ST    R1,EXITMSG         SAVE FOR EXIT ROUTINE         AJSW208\n*                                                               AJSW208\nCMDT9999 DS    0H                                               AJSW208\n         OI    TVTUFLG2,TVTUCVLD  INDICATE TABLE LOADED         AJSW208\n         B     CVEREXIT           WE'RE DONE, EXIT              AJSW208\n*                                                               AJSW208\n         EJECT                                                  AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\n*              REPLACE RESTRICTED CLASS TABLE                   AJSW208\n*                                                               AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\nCMDR     DS    0H                                               AJSW208\n         OC    TABLSAVE,TABLSAVE  DOES A TABLE CURRENTLY EXIST  AJSW208\n         BC    NZERO,CMDR0100     YES, REPLACE WITH NEW TABLE   AJSW208\n         LA    R1,IATWC009        -> TO ERROR MESSAGE           AJSW208\n         ST    R1,EXITMSG         SAVE FOR EXIT ROUTINE         AJSW208\n         B     CVEREXIT           WE BE DONE                    AJSW208\n*                                                               AJSW208\nCMDR0100 DS    0H                                               AJSW208\n         IATXSCN1 PFX=(R9),EOD=PARMERR,ERROR=PARMERR            AJSW208\n*                                                               AJSW208\n         LTR   R1,R1              IS THIS A KEYWORD PARM?       AJSW208\n         BC    NZERO,PARMERR      YES, PARAMETERS IN ERROR      AJSW208\n         LTR   R0,R0              WAS THERE ANY PARAMETERS      AJSW208\n         BC    ZERO,PARMERR       NO,ISSUE ERROR MESSAGE        AJSW208\n         CH    R2,=H'8'           SIZE LARGER THAN MAX          AJSW208\n         BC    GT,PARMERR         YEP, ERROR.                   AJSW208\n*                                                               AJSW208\n         BCTR  R2,R0              DECREMENT LENGTH FOR MVC      AJSW208\n         LR    R1,R0              COPY -> TO TABLE NAME         AJSW208\n         EX    R2,MVCNAME         SAVE TABLE NAME               AJSW208\n         BAL   R14,GETTAB         GO GET THE CLASS TABLE        AJSW208\n*                                                               AJSW208\n         LTR   R6,R1              DID WE GET THE TABLE          AJSW208\n         BC    ZERO,CVEREXIT      NO,EXIT WITH ERROR            AJSW208\n*                                                               AJSW208\nCMDR0200 DS    0H                                               AJSW208\n         BAL   R14,SERTAB         SERIALIZE THE TABLE           AJSW208\n*                                                               AJSW208\n         MVC   WORKREC(WC008#),IATWC008                         AJSW208\n         L     R5,TVTUVER         -> RESTRICTED CLASS TABLE     AJSW208\n         MVC   WORKREC+WC008I1(L'WC008I1),CVERTNAM              AJSW208\n         MVC   WORKREC+WC008I2(L'WC008I2),CVERTNAM-CVERTABH(R6) AJSW208\n         ST    R6,TVTUVER         SAVE -> TO CLASS TABLE        AJSW208\n*                                                               AJSW208\n         L     R0,CVERTSIZ        LENGTH OF OLD TABLE           AJSW208\n         LR    R1,R5              SET APUTMAIN ADDRESS REG      AJSW208\n         APUTMAIN SIZE=(R0),      RELEASE THE OLD CLASS TABLE   AJSW208$\n               AREA=(R1)                                        AJSW208\n*                                                               AJSW208\n         LA    R1,WORKREC         -> TO EXIT MESSAGE            AJSW208\n         ST    R1,EXITMSG         SAVE FOR EXIT ROUTINE         AJSW208\n         B     CVEREXIT           DONE....RETURN TO JSS         AJSW208\n*                                                               AJSW208\n         EJECT                                                  AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\n*         QUERY IF RESTRICED CLASS PROCESSING IS ACTIVE         AJSW208\n*                                                               AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\nCMDQ     DS    0H                                               AJSW208\n         OC    TABLSAVE,TABLSAVE  DOES A TABLE CURRENTLY EXIST  AJSW208\n         BC    NZERO,CMDQ0100     YES,DISPLAY THE NAME          AJSW208\n         LA    R1,IATWC002        -> TO NOT ACTIVE MESSAGE      AJSW208\n         ST    R1,EXITMSG         SAVE FOR THE EXIT ROUTINE     AJSW208\n         B     CVEREXIT           WE'RE FINISHED                AJSW208\n*                                                               AJSW208\nCMDQ0100 DS    0H                                               AJSW208\n         MVC   WORKREC(WC002A#),WC002A COPY MSG SKEL TO WORK    AJSW208\n         L     R5,TVTUVER         -> TO CLASS TABLE             AJSW208\n         MVC   WORKREC+WC002AI1(L'WC002AI1),CVERTNAM TABLE NAME AJSW208\n         MVC   WORKREC+WC002AI2(L'WC002AI2),CVERTDAT CREAT DATE AJSW208\n         MVC   WORKREC+WC002AI3(L'WC002AI3),CVERTTIM CREAT TIME AJSW208\n         LA    R1,WORKREC         -> TO MESSAGE                 AJSW208\n         ST    R1,EXITMSG         SAVE FOR THE EXIT ROUTINE     AJSW208\n         B     CVEREXIT           WE'RE FINISHED                AJSW208\n         EJECT                                                  AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\n*              CANCEL RESTRICTED CLASS PROCESSING               AJSW208\n*                                                               AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\nCMDC     DS    0H                                               AJSW208\n         OC    TABLSAVE,TABLSAVE  DOES A TABLE CURRENTLY EXIST  AJSW208\n         BC    NZERO,CMDC0100     YES,SET UP FOR DELETE         AJSW208\n         LA    R1,IATWC003        NO, -> POINTER TO ERROR MSG   AJSW208\n         ST    R1,EXITMSG         SAVE FOR EXIT ROUTINE         AJSW208\n         B     CVEREXIT           FINISHED, EXIT                AJSW208\n*                                                               AJSW208\nCMDC0100 DS    0H                                               AJSW208\n         BAL   R14,SERTAB         SERIALIZE THE TABLE           AJSW208\n         L     R5,TVTUVER         -> RESTRICTED CLASS TABLE     AJSW208\n         L     R0,CVERTSIZ        GET THE TABLE SIZE            AJSW208\n         LR    R1,R5              COPY -> TO TABLE              AJSW208\n*                                                               AJSW208\n         APUTMAIN SIZE=(R0),      RELEASE THE TABLE             AJSW208$\n               AREA=(R1)                                        AJSW208\n*                                                               AJSW208\n         XC    TVTUVER,TVTUVER    INDICATE NO CLASS TABLE       AJSW208\n         LA    R1,IATWC004        -> POINTER TO DISABLED MSG.   AJSW208\n         ST    R1,EXITMSG         STOW FOR EXIT ROUTINE         AJSW208\n         B     CVEREXIT           ALL DONE EXIT                 AJSW208\n         EJECT                                                  AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\n*              DISPLAY REQUESTED CLASS TABLE ENTRIES            AJSW208\n*                                                               AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\nCMDL     DS    0H                                               AJSW208\n         OC    TABLSAVE,TABLSAVE  DOES A TABLE CURRENTLY EXIST  AJSW208\n         BC    NZERO,CMDL0100     YES,CONTINUE PROCESSING       AJSW208\n         LA    R1,IATWC003        -> TO ERROR MESSAGE           AJSW208\n         ST    R1,EXITMSG                                       AJSW208\n         B     CVEREXIT           RETURN TO JSS                 AJSW208\n*                                                               AJSW208\nCMDL0100 DS    0H                                               AJSW208\n         L     R5,TVTUVER         -> RESTRICTED CLASS TABLE     AJSW208\n         LA    R6,CVERTCTB        -> TO FIRST CLASS TABLE       AJSW208\n*                                                               AJSW208\n         IATXSCN1 PFX=(R9),EOD=PARMERR,ERROR=PARMERR            AJSW208\n*                                                               AJSW208\n         LTR   R1,R1              IS THIS A KEYWORD PARM?       AJSW208\n         BC    NZERO,CMDL0400     YES,CHECK KEYWORD TYPE        AJSW208\n         LTR   R1,R0              WAS THERE ANY PARAMETERS      AJSW208\n         BC    ZERO,PARMERR       NO, MUST HAVE A SECOND PARM   AJSW208\n         CH    R2,=H'1'           LENGTH MUST BE 1              AJSW208\n         BC    GT,PARMERR         IF NOT THEN PARM ERROR        AJSW208\n         CLI   0(R1),C'L'         LIST CLASSES REQUEST          AJSW208\n         BC    NE,PARMERR         NO,THEN INVALID PARAMETERS    AJSW208\n*                                                               AJSW208\n         MVI   WORKREC,C' '       INITIALIZE MESSAGE AREA       AJSW208\n         MVC   WORKREC+1(L'WORKREC-1),WORKREC                   AJSW208\n         MVI   WORKRECL,L'WORKREC-1 LENGTH OF MESSAGE LINE      AJSW208\n         MVC   WORKRECM,=C'IATWC000I' SET MESSAGE PREFIX        AJSW208\n         LA    R1,WORKRECD        -> DATA AREA                  AJSW208\n         LA    R0,WORKREC#        NUMBER OF ENTRIES IN DISPLAY  AJSW208\n*                                                               AJSW208\nCMDL0200 DS    0H                                               AJSW208\n         MVC   0(8,R1),CVERCNAM   COPY CLASS NAME               AJSW208\n         LA    R1,9(,R1)          BUMP OUTPUT POINTER           AJSW208\n         BCT   R0,CMDL0300        GET NEXT TABLE IF LINE \u00ac FULL AJSW208\n*                                                               AJSW208\n         LA    R2,WORKREC         -> TO DATA LINE               AJSW208\n         LH    R0,XCONS           CONSOLE NUMBER                AJSW208\n*                                                               AJSW208\n         MESSAGE TEXT=0(,R2),     DISPLAY THE MESSAGE           AJSW208$\n               CONS=(R0),                                       AJSW208$\n               MF=(E,MSGXCONS)                                  AJSW208\n*                                                               AJSW208\n         MVI   WORKRECD,C' '      RE-INIT DATA AREA             AJSW208\n         MVC   WORKRECD+1(L'WORKRECD-1),WORKRECD                AJSW208\n         LA    R1,WORKRECD        -> DATA AREA                  AJSW208\n         LA    R0,WORKREC#        NUMBER OF ENTRIES IN DISPLAY  AJSW208\n*                                                               AJSW208\nCMDL0300 DS    0H                                               AJSW208\n         ICM   R2,B'1111',CVERCNXT OFFSET TO NEXT TABLE         AJSW208\n         BC    ZERO,CMDL9900      EXIT IF NO MORE               AJSW208\n         LA    R6,0(R2,R6)        -> TO NEXT TABLE              AJSW208\n         B     CMDL0200           LOOP BACK FOR NEXT CLASS      AJSW208\n         EJECT                                                  AJSW208\n*******************                                             AJSW208\n**                                                              AJSW208\n**   LIST USER ID'S IN A SPECIFIC CLASS                         AJSW208\n**                                                              AJSW208\n*******************                                             AJSW208\n*                                                               AJSW208\nCMDL0400 DS    0H                                               AJSW208\n         CLC   =C'C=',0(R1)       LIST USERS IN CLASS TABLE     AJSW208\n         BC    NE,CMDL1100                                      AJSW208\n         LR    R1,R0              -> CLASS NAME TO DISPLAY      AJSW208\n         ICM   R2,B'1000',=X'00'  CLEAR HIGH ORDER BYTE         AJSW208\n         CH    R2,=H'8'           LENGTH > MAX                  AJSW208\n         BC    GT,PARMERR         IF SO, THEN PARM ERROR        AJSW208\n         BCTR  R2,R0              DECREMNET LENGTH FOR MVC      AJSW208\n         EX    R2,MVCNAME         SAVE CLASS NAME               AJSW208\n*                                                               AJSW208\nCMDL0500 CLC   TABLNAM,CVERCNAM   IT THIS THE TABLE WE WANT     AJSW208\n         BC    EQ,CMDL0700        YES, DISPLAY USER ID'S        AJSW208\n         ICM   R1,B'1111',CVERCNXT OFFSET TO NEXT TABLE         AJSW208\n         BC    ZERO,CMDL0600      EXIT LOOP IF END.             AJSW208\n         LA    R6,0(R1,R6)        -> TO NEXT CLASS TABLE        AJSW208\n         B     CMDL0500           LOOP BACK FOR NEXT CHECK      AJSW208\n*                                                               AJSW208\nCMDL0600 DS    0H                                               AJSW208\n         MVC   WORKREC(WC010#),IATWC010  MESSAGE TO WORK AREA   AJSW208\n         MVC   WORKREC+WC010I1(L'WC010I1),TABLNAM CLASS NAME    AJSW208\n         B     CMDL9910          WE'RE DONE                     AJSW208\n*                                                               AJSW208\nCMDL0700 DS    0H                                               AJSW208\n         LA    R7,CVERCUSR        -> 1ST USER ENTRY             AJSW208\n         SLR   R5,R5              CLEAR A WORK REGISTER         AJSW208\n         ICM   R5,B'0011',CVERCEN# NUMBER OF USER ENTRIES       AJSW208\n         BC    NZERO,CMDL0800     CONTINUE IF TABLE NOT EMPTY   AJSW208\n         MVC   WORKREC(WC011#),IATWC011                         AJSW208\n         MVC   WORKREC+WC011I1(L'WC011I1),TABLNAM CLASS NAME    AJSW208\n         B     CMDL9910          WE'RE DONE                     AJSW208\n*                                                               AJSW208\nCMDL0800 DS    0H                                               AJSW208\n         MVI   WORKREC,C' '       INITIALIZE MESSAGE AREA       AJSW208\n         MVC   WORKREC+1(L'WORKREC-1),WORKREC                   AJSW208\n         MVI   WORKRECL,L'WORKREC-1 LENGTH OF MESSAGE LINE      AJSW208\n         MVC   WORKRECM,=C'IATWC000I' SET MESSAGE PREFIX        AJSW208\n         LA    R1,WORKRECD        -> DATA AREA                  AJSW208\n         LA    R0,WORKREC#        NUMBER OF ENTRIES IN DISPLAY  AJSW208\n         SLR   R2,R2              CLEAR A WORK REGISTER         AJSW208\n*                                                               AJSW208\nCMDL0900 DS    0H                                               AJSW208\n         IC    R2,CVERULNG        LENGTH -1 OF USER ENTRY       AJSW208\n         EX    R2,MVCUSER         MOVE USER ID TO DISP. LINE    AJSW208\n         LA    R1,9(,R1)          BUMP DISPLAY POINTER          AJSW208\n         BCT   R0,CMDL1000        CONTINUE IF LINE NOT FULL     AJSW208\n*                                                               AJSW208\n         LA    R2,WORKREC         -> TO DATA LINE               AJSW208\n         LH    R0,XCONS           CONSOLE NUMBER                AJSW208\n*                                                               AJSW208\n         MESSAGE TEXT=0(,R2),     DISPLAY THE MESSAGE           AJSW208$\n               CONS=(R0),                                       AJSW208$\n               MF=(E,MSGXCONS)                                  AJSW208\n*                                                               AJSW208\n         MVI   WORKRECD,C' '      RE-INIT DATA AREA             AJSW208\n         MVC   WORKRECD+1(L'WORKRECD-1),WORKRECD                AJSW208\n         LA    R1,WORKRECD        -> DATA AREA                  AJSW208\n         LA    R0,WORKREC#        NUMBER OF ENTRIES IN DISPLAY  AJSW208\n         SLR   R2,R2              CLEAR A WORK REGISTER         AJSW208\n         IC    R2,CVERULNG        RESTORE LENGTH REGISTER       AJSW208\n*                                                               AJSW208\nCMDL1000 DS    0H                                               AJSW208\n         LA    R7,2(R2,R7)        -> NEXT USER ENTRY            AJSW208\n         BCT   R5,CMDL0900        LOOP BACK IF MORE ENTRIES     AJSW208\n         B     CMDL9900           DONE WITH THIS REQUEST - EXIT AJSW208\n         EJECT                                                  AJSW208\n*******************                                             AJSW208\n**                                                              AJSW208\n**   LIST CLASS VALID FOR A USER ID                             AJSW208\n**                                                              AJSW208\n*******************                                             AJSW208\n*                                                               AJSW208\nCMDL1100 DS    0H                                               AJSW208\n         CLC   =C'U=',0(R1)       LIST USERS                    AJSW208\n         BNE   PARMERR            NO, THEN PARM ERROR           AJSW208\n         LR    R1,R0              -> USER ID TO SEARCH FOR      AJSW208\n         ICM   R2,B'1000',=X'00'  CLEAR HIGH ORDER BYTE         AJSW208\n         CH    R2,=H'8'           LENGTH > MAX                  AJSW208\n         BC    GT,PARMERR         IF SO, THEN PARM ERROR        AJSW208\n         BCTR  R2,R0              DECREMNET LENGTH FOR MVC      AJSW208\n         EX    R2,MVCNAME         SAVE USERID                   AJSW208\n         STC   R2,BYTE            SAVE UID LENGTH               AJSW208\n         MVI   FLAG1,0            INITIALIZE FLAG BYTE          AJSW208\n         MVI   WORKREC,C' '       INITIALIZE MESSAGE AREA       AJSW208\n         MVC   WORKREC+1(L'WORKREC-1),WORKREC                   AJSW208\n         MVI   WORKRECL,L'WORKREC-1 LENGTH OF MESSAGE LINE      AJSW208\n         MVC   WORKRECM,=C'IATWC000I' SET MESSAGE PREFIX        AJSW208\n         LA    R1,WORKRECD        -> DATA AREA                  AJSW208\n         LA    R0,WORKREC#        NUMBER OF ENTRIES IN DISPLAY  AJSW208\n*                                                               AJSW208\nCMDL1200 DS    0H                                               AJSW208\n         SLR   R2,R2              CLEAR A WORK REGISTER         AJSW208\n         SLR   R5,R5              CLEAR A WORK REGISTER         AJSW208\n         ICM   R5,B'0011',CVERCEN# GET NUMBER OF UIDS           AJSW208\n         BC    ZERO,CMDL1500       NEXT CLASS TABLE IF NONE     AJSW208\n         LA    R7,CVERCUSR         -> TO FIRST UID              AJSW208\n*                                                               AJSW208\nCMDL1300 DS    0H                                               AJSW208\n         CLC   CVERULNG,BYTE      TABLE LENGTH EXCEED INPUT     AJSW208\n         BC    GT,CMDL1400        YES, THEN NO MATCH            AJSW208\n         IC    R2,CVERULNG        GET LENGTH                    AJSW208\n         EX    R2,CLCUSER         TABLE UID MATCH INPUT         AJSW208\n         BC    NE,CMDL1400        NO, GET NEXT UID.             AJSW208\n         MVC   0(8,R1),CVERCNAM   MOVE CLASS TO DISPLAY LINE    AJSW208\n         OI    FLAG1,F1UID        REMEMBER WE FOUND THE UID     AJSW208\n         LA    R1,9(,R1)          BUMP DISPLAY POINTER          AJSW208\n         BCT   R0,CMDL1500        CONTINUE IF LINE NOT FULL     AJSW208\n*                                                               AJSW208\n         LA    R2,WORKREC         -> TO DATA LINE               AJSW208\n         LH    R0,XCONS           CONSOLE NUMBER                AJSW208\n*                                                               AJSW208\n         MESSAGE TEXT=0(,R2),     DISPLAY THE MESSAGE           AJSW208$\n               CONS=(R0),                                       AJSW208$\n               MF=(E,MSGXCONS)                                  AJSW208\n*                                                               AJSW208\n         MVI   WORKRECD,C' '      RE-INIT DATA AREA             AJSW208\n         MVC   WORKRECD+1(L'WORKRECD-1),WORKRECD                AJSW208\n         LA    R1,WORKRECD        -> DATA AREA                  AJSW208\n         LA    R0,WORKREC#        NUMBER OF ENTRIES IN DISPLAY  AJSW208\n         B     CMDL1500           GET NEXT CLASS TABLE          AJSW208\n*                                                               AJSW208\nCMDL1400 DS    0H                                               AJSW208\n         LA    R7,2(R2,R7)        -> NEXT UID                   AJSW208\n         BCT   R5,CMDL1300        LOOP BACK FOR NEXT CHECK      AJSW208\n*                                                               AJSW208\nCMDL1500 DS    0H                                               AJSW208\n         ICM   R2,B'1111',CVERCNXT OFFSET TO NEXT TABLE         AJSW208\n         BC    ZERO,CMDL1600      SET UP FOR EXIT IF LAST TABLE AJSW208\n         LA    R6,0(R2,R6)        -> NEXT TABLE                 AJSW208\n         B     CMDL1200           GO CHECK THIS ONE             AJSW208\n*                                                               AJSW208\nCMDL1600 DS    0H                                               AJSW208\n         TM    FLAG1,F1UID        UID FOUND                     AJSW208\n         BC    ALLON,CMDL9900     YES,WE'RE DONE                AJSW208\n         MVC   WORKREC(WC012#),IATWC012                         AJSW208\n         MVC   WORKREC+WC012I1(L'WC012I1),TABLNAM               AJSW208\n         B     CMDL9910           WHEW, FINALLY DONE            AJSW208\n*                                                               AJSW208\nCMDL9900 DS    0H                                               AJSW208\n         C     R0,=A(WORKREC#)    PARTIAL DATA LINE             AJSW208\n         BC    NE,CMDL9910        YES, SET EXIT MESSAGE ->      AJSW208\n         SLR   R1,R1              NO,INDICATE NO MESSAGE        AJSW208\n         B     CMDL9999           DONE                          AJSW208\n*                                                               AJSW208\nCMDL9910 DS    0H                                               AJSW208\n         LA    R1,WORKREC         -> MESSAGE ON EXIT            AJSW208\n*                                                               AJSW208\nCMDL9999 DS    0H                                               AJSW208\n         ST    R1,EXITMSG         DISP LAST LINE ON EXIT        AJSW208\n         B     CVEREXIT           ALL DONE EXIT                 AJSW208\n         EJECT                                                  AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\n*                SERIALIZE THE RESTRICTED CLASS TABLE           AJSW208\n*                                                               AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\nSERTAB   DS    0H                                               AJSW208\n         SLR   R1,R1              CLEAR REG 1                   AJSW208\n         L     R1,TVTUVER         -> TO CLASS TABLE             AJSW208\n         LR    R15,R1             COPY ADDRESS TO UPDATE REG    AJSW208\n         N     R1,CLEARBIT        SET VALUE TO TEST FOR         AJSW208\n         O     R15,HIBIT          SET THE BUSY BIT FOR UPDATE   AJSW208\n         CS    R1,R15,TVTUVER     ATTEMPT TO LOCK CLASS TABLE   AJSW208\n         BNE   SERTAB1            DIDN'T DO IT, WAIT FOR UNLOCK AJSW208\n         OI    FLAG1,F1LOCK       GOT IT....REMEMBER WE LOCKED  AJSW208\n         BR    R14                RETURN TO CALLER              AJSW208\n         ST    R14,SAV14          SAVE RETURN ADDRESS           AJSW208\n*                                                               AJSW208\nSERTAB1  DS    0H                                               AJSW208\n         AWAIT TYPE=OFF,          WAIT FOR THE TABLE TO         AJSW208$\n               ECFMASK=X'80',       TO BECOME AVAILABLE         AJSW208$\n               ECFADD=TVTUVER                                   AJSW208\n*                                                               AJSW208\n         L     R14,SAV14          RESTORE RETURN ADDRESS        AJSW208\n         B     SERTAB             TRY AGAIN TO GET THE TABLE    AJSW208\n         EJECT                                                  AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\n*            LOAD AND ALLOCATE THE CLASS RESTRICTION TABLE      AJSW208\n*                                                               AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\nGETTAB   DS    0H                                               AJSW208\n         ST    R14,SAV14          SAVE OUR RETURN ADDRESS       AJSW208\n         XC    TABLSAVE,TABLSAVE  CLEAR TABLE ->                AJSW208\n         ALOAD EPLOC=TABLNAM,     LOAD THE REQUESTED TABLE      AJSW208$\n               CSECT=YES,                                       AJSW208$\n               ERROR=GETT0400                                   AJSW208\n*                                                               AJSW208\n         LR    R1,R0              SAVE -> TO LOADED TABLE       AJSW208\n         CLC   TABLNAM,CVERTNAM-CVERTABH(R1)                    AJSW208\n         BC    NE,GETT0100        MOD NOT SAME AS IN PROLOG     AJSW208\n         CLC   =C'CVER',CVERTVER-CVERTABH(R1)                   AJSW208\n         BC    EQ,GETT0200        VALIDITY WORD IS OK           AJSW208\n*                                                               AJSW208\nGETT0100 DS    0H                                               AJSW208\n         MVC   WORKREC(WC014#),IATWC014 MOVE MSG SKELETON       AJSW208\n         MVC   WORKREC+WC014I1(L'WC014I1),TABLNAM               AJSW208\n         LA    R1,WORKREC         GET MESSAGE -> AND            AJSW208\n         ST    R1,EXITMSG            SAVE FOR EXIT              AJSW208\n         B     GETT0300           DELETE MODULE BEFORE EXIT     AJSW208\n*                                                               AJSW208\nGETT0200 DS    0H                                               AJSW208\n         ST    R1,FWORD           SAVE LOADMOD EPA              AJSW208\n         L     R0,CVERTSIZ-CVERTABH(,R1) GET TABLE SIZE         AJSW208\n*                                                               AJSW208\n         AGETMAIN SIZE=(R0),      ALLOCATE THE TABLE            AJSW208$\n               LOC=(ANY,ANY)                                    AJSW208\n*                                                               AJSW208\n         L     R14,FWORD          RESTORE -> LOADMOD            AJSW208\n         LR    R0,R1              -> TABLE STORAGE              AJSW208\n         ST    R0,TABLSAVE        SAVE TABLE ADDRESS            AJSW208\n         L     R1,CVERTSIZ-CVERTABH(,R14) SET TGT LENGTH        AJSW208\n         LR    R15,R1             SET SOURCE LENGTH             AJSW208\n         MVCL  R0,R14             COPY LOADMOD TO THE TABLE     AJSW208\n*                                                               AJSW208\nGETT0300 DS    0H                                               AJSW208\n         ADELETE EPLOC=TABLNAM                                  AJSW208\n*                                                               AJSW208\n         B     GETTEXIT           RETURN TO CALLER              AJSW208\n*                                                               AJSW208\nGETT0400 DS    0H                                               AJSW208\n         MVC   WORKREC(WC006#),IATWC006                         AJSW208\n         MVC   WORKREC+WC006I1(L'WC006I1),TABLNAM  TABLE NAME   AJSW208\n*                                                               AJSW208\n         ST    R0,FWORD           LOAD ABEND CODE               AJSW208\n         UNPK  WORKREC+WC006I2(L'WC006I2),FWORD+2(3)            AJSW208\n         TR    WORKREC+WC006I2(L'WC006I2-1),TRTAB-240           AJSW208\n         MVI   WORKREC+WC006I2+L'WC006I2-1,C','                 AJSW208\n*                                                               AJSW208\n         ST    R1,FWORD           JES3 ABEND CODE               AJSW208\n         UNPK  WORKREC+WC006I3(L'WC006I3),FWORD+2(3)            AJSW208\n         TR    WORKREC+WC006I3(L'WC006I3-1),TRTAB-240           AJSW208\n         MVI   WORKREC+WC006I3+L'WC006I3-1,C','                 AJSW208\n*                                                               AJSW208\n         ST    R15,FWORD          REASON CODE                   AJSW208\n         UNPK  WORKREC+WC006I4(L'WC006I4),FWORD+2(3)            AJSW208\n         TR    WORKREC+WC006I4(L'WC006I4-1),TRTAB-240           AJSW208\n         MVI   WORKREC+WC006I4+L'WC006I4-1,C' '                 AJSW208\n*                                                               AJSW208\n         LA    R1,WORKREC                                       AJSW208\n         ST    R1,EXITMSG         SAVE -> EXIT MESSAGE          AJSW208\n*                                                               AJSW208\nGETTEXIT DS    0H                                               AJSW208\n         L     R1,TABLSAVE        SET RETURN -> TO TABLE        AJSW208\n         L     R14,SAV14          GET RETURN ADDRESS            AJSW208\n         BR    R14                   AND RETURN TO CALLER       AJSW208\n*                                                               AJSW208\n         EJECT                                                  AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\n*                    ERROR ROUTINES                             AJSW208\n*                                                               AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\nPARMERRT DS    0H                                               AJSW208\n         OI    TVTUFLG2,TVTUCVLD  INDICATE TABLE LOADED         AJSW208\n         B     CVEREXIT           WE'RE DONE, EXIT              AJSW208\n*                                                               AJSW208\nPARMERR  DS    0H                 INPUT PARAMETER ERROR         AJSW208\n         LA    R1,IATWC001        GET -> TO ERROR MESSAGE       AJSW208\n         ST    R1,EXITMSG            AND SAVE FOR EXIT ROUTINE  AJSW208\n         B     CVEREXIT           ISSUE MESSAGE AND EXIT        AJSW208\n*                                                               AJSW208\n         EJECT                                                  AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\n*            ISSUE EXIT MESSAGE AND RETURN TO JSS               AJSW208\n*                                                               AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\nCVEREXIT DS    0H                                               AJSW208\n         L     R9,CONSADDR        -> TO MESSAGE BUFFER          AJSW208\n         IATXCNS TYPE=RELEASE,    RELEASE THE PARAMETER BUFFER  AJSW208$\n               BUFFER=(R9)                                      AJSW208\n*                                                               AJSW208\n         ICM   R2,B'1111',EXITMSG -> TO EXIT MESSAGE            AJSW208\n         BC    ZERO,CVERRET       JUST RETURN IF NO MESSAGE     AJSW208\n         LH    R0,XCONS           ID OF CALLING CONSOLE         AJSW208\n*                                                               AJSW208\n         MESSAGE TEXT=0(,R2),     DISPLAY THE EXIT MESSAGE      AJSW208$\n               CONS=(R0),           ON THE CALLING CONSOLE      AJSW208$\n               MF=(E,MSGXCONS)                                  AJSW208\n*                                                               AJSW208\nCVERRET  DS    0H                                               AJSW208\n         TM    FLAG1,F1LOCK       DID CVER LOCK THE CLASS TABLE AJSW208\n         BZ    CVERRET1           NO, DON'T MESS WITH LOCK FLAG AJSW208\n         NI    TVTUVER,TURNOFF-BUSYBIT YES, TURN OFF LOCK BIT   AJSW208\n*                                                               AJSW208\nCVERRET1 DS    0H                                               AJSW208\n         LM    R14,R1,JSSRET      RELOAD JSS REGS               AJSW208\n         SLR   R15,R15            INDICATE RETURN CODE ZERO     AJSW208\n         BR    R14                RETURN TO JSS                 AJSW208\n         EJECT                                                  AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\n*                    CONSTANT DATA AREAS                        AJSW208\n*                                                               AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\nCMDPRIM  DS    0H                 PRIMARY PARAMETER TABLE       AJSW208\n         DC    C'T',AL4(CMDT)     LOAD CLASS TABLE              AJSW208\nCMDPRIM# EQU   *-CMDPRIM          LENGTH OF 1 ENTRY             AJSW208\n         DC    C'R',AL4(CMDR)     REPLACE CLASS TABLE           AJSW208\n         DC    C'Q',AL4(CMDQ)     QUERY IF CLASS TABLE ACTIVE   AJSW208\n         DC    C'L',AL4(CMDL)     LIST CLASS TABLE              AJSW208\n         DC    C'C',AL4(CMDC)     CANCEL RESTRICED CLASS PROC.  AJSW208\n         DC    X'FF'              END OF TABLE INDICATOR        AJSW208\n*                                                               AJSW208\nTRTAB    DC    C'0123456789ABCDEF' HEX->CHAR CONVERSIONTABLE    AJSW208\n*                                                               AJSW208\nMVCNAME  MVC   TABLNAM(0),0(R1)    **** OBJECT OF EXECUTE ****  AJSW208\nMVCUSER  MVC   0(0,R1),CVERUNAM    **** OBJECT OF EXECUTE ****  AJSW208\nCLCUSER  CLC   TABLNAM(0),CVERUNAM **** OBJECT OF EXECUTE ****  AJSW208\n         EJECT                                                  AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\n*                  LITERAL POOL                                 AJSW208\n*                                                               AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\n         LTORG ,                                                AJSW208\n         EJECT                                                  AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\n*                       MESSAGES                                AJSW208\n*                                                               AJSW208\n****************************************************************AJSW208\n*                                                               AJSW208\nIATWC001 DS    0C                                               AJSW208\n         DC    AL1(WC001#)        MESSAGE LENGTH                AJSW208\n         DC    C'IATWC001E (CVER) INVALID PARAMETERS'           AJSW208\nWC001#   EQU   *-IATWC001                                       AJSW208\n*                                                               AJSW208\nIATWC002 DS    0C                                               AJSW208\n         DC    AL1(WC002#)                                      AJSW208\n         DC    C'IATWC002I (CVER) '                             AJSW208\n         DC    C'RESTRICTED CLASS CHECKING IS INACTIVE'         AJSW208\nWC002#   EQU   *-IATWC002                                       AJSW208\n*                                                               AJSW208\nWC002A   DC    AL1(WC002A#)                                     AJSW208\n         DC    C'IATWC002I (CVER) TABLE='                       AJSW208\nWC002AI1 EQU   *-WC002A,8,C'C'    OFFSET TO INSERT              AJSW208\n         DC    CL(L'WC002AI1)' '  NAME OF CLASS TABLE           AJSW208\n         DC    C',CREATED='                                     AJSW208\nWC002AI2 EQU   *-WC002A,8,C'C'    OFFSET TO INSERT              AJSW208\n         DC    CL(L'WC002AI2)' '                                AJSW208\n         DC    C' '                                             AJSW208\nWC002AI3 EQU   *-WC002A,5,C'C'    OFFSET TO INSERT              AJSW208\n         DC    CL(L'WC002AI3)' '                                AJSW208\nWC002A#  EQU   *-WC002A                                         AJSW208\n*                                                               AJSW208\nIATWC003 DS    0C                                               AJSW208\n         DC    AL1(WC003#)                                      AJSW208\n         DC    C'IATWC003E (CVER) '                             AJSW208\n         DC    C'RESTRICTED CLASS CHECKING IS NOT ACTIVE'       AJSW208\nWC003#   EQU   *-IATWC003                                       AJSW208\n*                                                               AJSW208\nIATWC004 DS    0C                                               AJSW208\n         DC    AL1(WC004#)                                      AJSW208\n         DC    C'IATWC004I (CVER) '                             AJSW208\n         DC    C'RESTRICTED CLASS CHECKING HAS BEEN DISABLED'   AJSW208\nWC004#   EQU   *-IATWC004                                       AJSW208\n*                                                               AJSW208\nIATWC005 DS    0C                                               AJSW208\n         DC    AL1(WC005#)                                      AJSW208\n         DC    C'IATWC005E (CVER) '                             AJSW208\n         DC    C'RESTRICTED CLASS TABLE CURRENTLY ACTIVE'       AJSW208\nWC005#   EQU   *-IATWC005                                       AJSW208\n*                                                               AJSW208\nIATWC006 DS    0C                                               AJSW208\n         DC    AL1(WC006#)                                      AJSW208\n         DC    C'IATWC006E (CVER) '                             AJSW208\n         DC    C'ERROR LOADING RESTRICTED CLASS TABLE '         AJSW208\nWC006I1  EQU   *-IATWC006,8,C'C'                                AJSW208\n         DC    CL8' '                                           AJSW208\n         DC    C',R0='                                          AJSW208\nWC006I2  EQU   *-IATWC006,3,C'C'                                AJSW208\n         DC    CL5' '                                           AJSW208\n         DC    C'R1='                                           AJSW208\nWC006I3  EQU   *-IATWC006,5,C'C'                                AJSW208\n         DC    CL5' '                                           AJSW208\n         DC    C'R15='                                          AJSW208\nWC006I4  EQU   *-IATWC006,3,C'C'                                AJSW208\n         DC    CL5' '                                           AJSW208\nWC006#   EQU   *-IATWC006                                       AJSW208\n*                                                               AJSW208\nIATWC007 DS    0C                                               AJSW208\n         DC    AL1(WC007#)                                      AJSW208\n         DC    C'IATWC007I (CVER) RESTRICTED CLASS TABLE '      AJSW208\nWC007I1  EQU   *-IATWC007,8,C'C'                                AJSW208\n         DC    CL(L'WC007I1)' '                                 AJSW208\n         DC    C'SUCCESSFULLY LOADED'                           AJSW208\nWC007#   EQU   *-IATWC007                                       AJSW208\n*                                                               AJSW208\nIATWC008 DS    0C                                               AJSW208\n         DC    AL1(WC008#)                                      AJSW208\n         DC    C'IATWC008I (CVER) RESTRICTED CLASS TABLE '      AJSW208\nWC008I1  EQU   *-IATWC008,8,C'C'                                AJSW208\n         DC    CL(L'WC008I1)' '                                 AJSW208\n         DC    C' HAS BEEN REPLACED BY '                        AJSW208\nWC008I2  EQU   *-IATWC008,8,C'C'                                AJSW208\n         DC    CL(L'WC008I2)' '                                 AJSW208\nWC008#   EQU   *-IATWC008                                       AJSW208\n*                                                               AJSW208\nIATWC009 DS    0C                                               AJSW208\n         DC    AL1(WC009#)                                      AJSW208\n         DC    C'IATWC009E (CVER) '                             AJSW208\n         DC    C'THERE IS NO ACTIVE CLASS TABLE TO REPLACE'     AJSW208\nWC009#   EQU   *-IATWC009                                       AJSW208\n*                                                               AJSW208\nIATWC010 DS    0C                                               AJSW208\n         DC    AL1(WC010#)                                      AJSW208\n         DC    C'IATWC010E (CVER) RESTRICTED CLASS TABLE FOR '  AJSW208\nWC010I1  EQU   *-IATWC010,8,C'C'                                AJSW208\n         DC    CL(L'WC010I1)' '                                 AJSW208\n         DC    C' WAS NOT FOUND'                                AJSW208\nWC010#   EQU   *-IATWC010                                       AJSW208\n*                                                               AJSW208\nIATWC011 DS    0C                                               AJSW208\n         DC    AL1(WC011#)                                      AJSW208\n         DC    C'IATWC011I (CVER)'                              AJSW208\n         DC    C' THERE ARE NO ENTRIES IN RESTRICTED TABLE '    AJSW208\nWC011I1  EQU   *-IATWC011,8,C'C'                                AJSW208\n         DC    CL(L'WC011I1)' '                                 AJSW208\nWC011#   EQU   *-IATWC011                                       AJSW208\n*                                                               AJSW208\nIATWC012 DS    0C                                               AJSW208\n         DC    AL1(WC012#)                                      AJSW208\n         DC    C'IATWC012I (CVER) NO MATCH FOUND FOR USER ID '  AJSW208\nWC012I1  EQU   *-IATWC012,8,C'C'                                AJSW208\n         DC    CL(L'WC012I1)' '                                 AJSW208\nWC012#   EQU   *-IATWC012                                       AJSW208\n*                                                               AJSW208\nIATWC014 DS    0C                                               AJSW208\n         DC    AL1(WC014#)                                      AJSW208\n         DC    C'IATWC014E (CVER) '                             AJSW208\nWC014I1  EQU   *-IATWC014,8,C'C'                                AJSW208\n         DC    CL(L'WC014I1)' '                                 AJSW208\n         DC    C' IS NOT A VALID RESTRICTED CLASS TABLE'        AJSW208\nWC014#   EQU   *-IATWC014                                       AJSW208\n*                                                               AJSW208\nUMODNUM  DC    CL7'AJSW208'        USER NUMBER                  AJSW208\nAPARNUM  DC    CL5' '              APAR NUMBER                  AJSW208\nPTFNUM   DC    CL5'SP215'          PTF NUMBER                   AJSW208\n         END   CVER                                             AJSW208\n++ SRC(CVERDATA) DISTLIB(ASRCLIB) .\nCVERDATA TITLE '-- JOB CLASS RESTRICTION DATA CSECT'            AJSW208\nCVERDATA AMODE 31                                               AJSW208\nCVERDATA RMODE ANY                                              AJSW208\n         CVERDATA TYPE=CSECT                                    AJSW208\n         IATYEQU  ,                                             AJSW208\n         IATYREG  ,                                             AJSW208\nUMODNUM  DC    CL7'AJSW208'        USER NUMBER                  AJSW208\nAPARNUM  DC    CL5' '              APAR NUMBER                  AJSW208\nPTFNUM   DC    CL5'SP215'          PTF  NUMBER                  AJSW208\n         END   CVERDATA                                         AJSW208\n++ MAC(CVERDATA) DISTLIB(AMACLIB) .\n         MACRO                                                  AJSW208\n         CVERDATA &TYPE=CSECT                                   AJSW208\n         TITLE '''CVERDATA'' - DATA CSECT FOR ''CVER'' DSP.'    AJSW208\nCVERDATA &TYPE                                                  AJSW208\n         IATYASM                                                AJSW208\n* USER MODS:                                                    AJSW208\n*                                                               AJSW208\n*      - REGISTER SAVE AREA FOR CVER DSP.                       AJSW208\n*        *** THIS MODULE MUST BE LINKEDIT'D NOT RENT/REUS ***   AJSW208\n*                                                               AJSW208\n         USING CVERDATA,R13                                     AJSW208\n         DC    9D'0'               STANDARD OS REG. SAVE AREA   AJSW208\n         EJECT                                                  AJSW208\n**                                                              AJSW208\n*                                                               AJSW208\n*        VARIABLE DATA AREAS                                    AJSW208\n*                                                               AJSW208\n**                                                              AJSW208\n*                                                               AJSW208\nJSSRET   DS    4A                  RETURN ADDRESS TO JSS        AJSW208\nSAV14    DS    A                   MISC R14 SAVE                AJSW208\nCONSADDR DS    A                   -> DSP CALLING CONSOLE BUF   AJSW208\nEXITMSG  DC    A(0)                -> MESSAGE FOR EXIT          AJSW208\nTABLSAVE DC   A(0)                 TABLE SAVE AREA              AJSW208\n*                                                               AJSW208\nFWORD    DC    F'0'                FULLWORD WORK AREA           AJSW208\n         ORG   *-1                                              AJSW208\nBYTE     DS    C                   1 BYTE WORK AREA             AJSW208\n*                                                               AJSW208\nXCONS    DC    H'0'                CALLING CONSOLE ID           AJSW208\nWORKREC  DC    CL121' '            121 BYTE WORK AREA           AJSW208\n         ORG   WORKREC                                          AJSW208\nWORKRECL DS    AL1                 LENGTH OF MESSAGE            AJSW208\nWORKRECM DS    CL9                 MESSAGE ID                   AJSW208\n         DS    C                   ONE BYTE SEPERATOR           AJSW208\nWORKRECD DS    CL(L'WORKREC-11)    DISPLAY LINE                 AJSW208\nWORKREC# EQU   L'WORKRECD/9        NUMBER OF ENTRIES DSP LINE   AJSW208\nTABLNAM  DC    CL8' '              NAME OF TABLE TO LOAD OR     AJSW208\n*                                  NAME OF CLASS TO DISPLAY OR  AJSW208\n*                                  NAME OF UID TO DISPLAY       AJSW208\n*                                                               AJSW208\n*******                                                         AJSW208\n*                                                               AJSW208\n*  MISC EQUATES                                                 AJSW208\n*                                                               AJSW208\n*******                                                         AJSW208\n*                                                               AJSW208\nBUSYBIT  EQU   X'80'               MASK TO INDICATE THE CLASS   AJSW208\n*                                  TABLE IS IN USE              AJSW208\nTURNOFF  EQU   X'FF'               MASK USED TO TURN OFF BITS   AJSW208\n*                                                               AJSW208\nHIBIT    DC    0F'0',X'80000000'   HIGH ORDER BIT MASK          AJSW208\nCLEARBIT DC    0F'0',X'7FFFFFFF'   CLEAR HIGH ORDER MASK BIT    AJSW208\n*                                                               AJSW208\nFLAG1    DC    X'00'               MISC FLAGS BYTE              AJSW208\nF1UID    EQU   X'80'               UID FOUND IN CLASS           AJSW208\nF1LOCK   EQU   X'40'               CVER LOCKED CLASS TABLE      AJSW208\n*                                                               AJSW208\n         DC    0D'0'               ALIGN FOLLOWING              AJSW208\n         SPACE 1                                                AJSW208\nMSGXCONS MESSAGE MLG=YES,PRTY=7,   MESSAGE TO CALLING CONSOLE   AJSW208*\n               CONS=XCONS,MF=L     BUILD CONTROL BLOCK ONLY     AJSW208\n         MEND                                                   AJSW208\n++ MAC(CVERTAB) DISTLIB(AMACLIB) .\n         MACRO                                                  AJSW208\n         CVERTAB ,                                              AJSW208\n***********************************************************************\n.*                                                                    *\n.*       $MAC(CVERTAB)    PROD(JES3):                                 *\n.*                                                                    *\n.*       DESCRIPTIVE-NAME =                                           *\n*                                                                     *\n*              RESTRICTED CLASS CONTROL TABLE                         *\n*                                                                     *\n.*       USERMOD =  AJSW208                                           *\n.*                  SUBSET OF AJSW208                                 *\n.*                                                                    *\n.*       STATUS = OS/VS2 HJS2215                                      *\n.*                                                                    *\n.*       FUNCTION = MAPS THE RESTRICTED CLASS TABLE AND USERID        *\n.*                  MASKS ALLOWED TO USE THE RESTRICED CLASS.         *\n.*                                                                    *\n.*       CREATED BY = CVERTABLE (SEPERATELY ASSEMBLED MODULE)         *\n.*                                                                    *\n.*       POINTED TO BY = TVTUVER IN THE JES3 TVT                      *\n.*                                                                    *\n.*       SERIALIZATION =                                              *\n.*                                                                    *\n.*       LOCATION =                                                   *\n.*                 MAIN STORAGE = SP 241                              *\n.*                 AUXILIARY STORAGE = NONE                           *\n.*                                                                    *\n.*       RESTRICTIONS = NONE                                          *\n.*                                                                    *\n.*                                                                    *\n.*       CHANGE ACTIVITY =                                            *\n.*                                                                    *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*                                                               AJSW208\nCVERTABH DSECT ,                  MAP OF TABLE HEADER           AJSW208\nCVERTSIZ DS    A                  SIZE OF ENTIRE TABLE          AJSW208\nCVERTNAM DS    CL8                NAME OF THIS TABLE            AJSW208\nCVERTDAT DS    CL8                DATE TABLE CREATED            AJSW208\nCVERTTIM DS    CL5                TIME TABLE CREATED            AJSW208\nCVERTVER DC    CL4'CVER'          VERIFICATION WORD             AJSW208\n         DS    XL3                                              AJSW208\nCVERTCTB DS    0X                 START OF FIRST CLASS TABLE    AJSW208\n*                                                               AJSW208\nCVERCTAB DSECT ,                  MAP OF CLASS TABLE HEADER     AJSW208\nCVERCNAM DS    CL8                NAME OF RESTRICTED CLASS      AJSW208\nCVERCNXT DS    XL4                OFFSET TO NEXT CLASS TABLE    AJSW208\n*                                 ZERO IF LAST CLASS TABLE      AJSW208\nCVERCEN# DS    XL2                NUMBER OF USER ENTRIES IN     AJSW208\n*                                 THIS CLASS TABLE              AJSW208\nCVERCUSR DS    0X                 FIRST USER ENTRY FOR CLASS    AJSW208\n*                                                               AJSW208\nCVERUTAB DSECT ,                  MAP OF USER ENTRY             AJSW208\nCVERULNG DS    X                  LENGTH OF USER NAME -1        AJSW208\nCVERUNAM DS    X                  USER NAME                     AJSW208\n*                                                               AJSW208\n         MEND                                                   AJSW208\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AVTW001": {"ttr": 11274, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AVTW001) /* ADD SOURCE ISTAUCAG EXIT ROUTINE\n\n           VTAM USER EXIT ROUTINE FOR FRANK NASH.\n                                                                 */ .\n++ VER(Z038) FMID(HVT3205) .\n++ JCLIN .\n//GEN49 JOB Y51024509,'531-0 CR SINGER'\n//SG21  EXEC LINKS,\n// PARM='NCAL,XREF,LET,LIST,RENT,REFR',\n//    UNIT='3350',SER=IPLXXX,N=SYS2,NAME=HSSLPA,P1=' ',\n//    MOD=,P2=' ',CLASS=T,OBJ=OBJPDS01\n//AOST3   DD DISP=SHR,VOLUME=(,RETAIN),DSN=SYS1.AOST3\n//SYSLIN DD *\n INCLUDE AOST3(ISTAUCAG)\n NAME  ISTAUCAG(R)\n/*\n++ SRC(ISTAUCAG) DISTLIB(ASRCLIB) .\nISTAUCAG CSECT\n***********************************************************************\n**  VTAM EXIT (ACCOUNTING) ROUTINE                                   **\n**     THIS ROUTINE IS CALLED EACH TIME A SESSION IS ESTABLISHED     **\n**   OR TERMINATED.  A SEPERATE INVOCATION IS MADE FOR EACH SESSION. **\n**   THE PURPOSE OF THIS ROUTINE IS TO KEEP STATISTICS IN ORDER      **\n**   TO APPROPRIATLY CHARGE USERS OF APPLICATION PROGRAMS AND LU'S.  **\n**  INITIAL REGISTER CONTENTS                                        **\n**   REGISTER 0  -  POSITIVE IF SESSION HAS BEEN ESTABLISHED;        **\n**                  NEGATIVE IF SESSION HAS BEEN TERMINATED          **\n**   REGISTER 7  -  POINTER TO A DOUBLEWORD CONTAINING THE NAME      **\n**                  OF THE PRIMARY LOGICAL UNIT (LU)                 **\n**   REGISTER 11 -  POINTER TO A DOUBLEWORD CONTAINING THE NAME      **\n**                  OF THE SECONDARY LOGICAL UNIT                    **\n**   REGISTER 13 -  ADDRESS OF THE SAVE AREA FOR USE BY THIS ROUTINE **\n**   REGISTER 14 -  RETURN ADDRESS                                   **\n**   REGISTER 15 -  ADDRESS OF THE ENTRY POINT TO THIS ROUTINE       **\n**                                                                   **\n**    REFERENCE: ADV COMM FUNCTION FOR VTAM - INSTALLATION           **\n***********************************************************************\n         SAVE  (14,12),,*\n         LA    12,0(15)\n         USING ISTAUCAG,12       SETUP ADDRESSING FOR CSECT\n         MODESET  KEY=ZERO\n*  DO GETMAIN FOR WORK AREA SPACE FOR SMF RECORD AND SAVE AREA\nGETMAIN  GETMAIN  R,LV=300       GET STORAGE FOR WORK AREA\n         ST    13,4(1)           SET BACKWARD PTR\n         ST    1,8(13)           SET FORWARD PTR\n         LR    13,1              PUT ADDR OF SAVE AREA IN R13\n         L     1,4(13)\n         L     0,20(1)           RESTORE R0\n         L     1,24(1)           RESTORE R1\n         USING SAVEAREA,13       SETUP ADDRESSING FOR DSECT\n*  FIRST SIX BYTES OF RECORD ARE FIXED\nSETCONST MVC   LEN(6),CONST      LOAD CONSTANT DATA INTO SMF RECORD\n*  SET THE CONNECT/DISCONNECT FLAG\nSETDFLG  C     0,=F'-1'          TEST FOR CONNECT/DISCONNECT\n         BH    HIGH              IF HIGH, THEN CONNECT\n         MVI   DISCON,C'1'       IS DISCONNECT\n         B     SETLUS\nHIGH     MVI   DISCON,C'0'       IS CONNECT\nSETLUS   MVC   LU1(8),0(7)       GET APPLICATION NAME\n         MVC   LU2(8),0(11)      GET LOGICAL UNIT/TERMINAL NAME\n*  CALL TIME SVC TO GET TIME AND DATE\nSETTMDT  TIME  BIN               GET TIME AND DATE FOR WRITE\n         STCM  0,15,TME\n         STCM  1,15,DTE\n         L     4,16              GET ADDRESS OF CVT\n         L     4,196(4)          GET ADDRESS OF SMCA\nSETSID   MVC   SID(4),16(4)      GET SYSTEM ID\n*  CALL SMF SVC TO WRITE A SMF RECORD\nWRREC    SMFWTM OUTREC           WRITE SMF RECORD\n         LTR   15,15             TEST FOR ZERO RETURN CODE\n         BZ    EXIT1\n         WTO   MF=(E,WTO1)       ERROR - WRITE WTO\n*  DO CLEANUP BEFORE EXITING\nEXIT1    LR    1,13              RESTORE R1 FOR FREEMAIN\n         L     13,4(13)          RESTORE R13\n         FREEMAIN R,LV=300,A=(1) FREE WORK AREA\nEXIT2    EQU      *\n         MODESET  KEY=NZERO\nRETURN   RETURN   (14,12),RC=0   RETURN TO VTAM\n*  CONSTANT DATA\n         DS    0F\nCONST    DC    X'0023000000E6'\nVTAMKEY  DC    X'60'\nFC22     DC    C'FC22'\nFC23     DC    C'FC23'\nWTO1     WTO   ' ERROR IN ISTAUCAG - F NASH',ROUTCDE=(1,2,8,10),MF=L\n*  DSECT TO DEFINE WORK AREAS FOR GETMAIN SPACE\n         DSECT\nSAVEAREA DS    18F\nOUTREC   DS    0CL35\n*           REQUIRED HEADER FOR ALL SMF RECORDS\nLEN      DS    BL2             RECORD LENGTH\nSEG      DS    BL2             SPAN FIELD\nFLG      DS    BL1\nTYPE     DS    BL1             RECORD TYPE (BINARY)\nTME      DS    BL4             TIME (BINARY)\nDTE      DS    BL4             DATE (PACKED DECIMAL)\nSID      DS    CL4             SYSTEM ID\n*           REF: MVS SYS MNGT FACILITIES\nDISCON   DS    CL1             LOGON/LOGOFF FLAG\nLU1      DS    CL8             APPLICATION ID\nLU2      DS    CL8             TERMINAL ID\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AVTW003": {"ttr": 11523, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD(AVTW003) /* ADD SOURCE IKTRTX1 EXIT ROUTINE\n\n           TSO 3767 USER EDIT EXIT TO BYPASS DATA EDITTING FOR OUTPUT\n           DESTINED FOR TEKTRONIX 4014.\n                                                                 */ .\n++ VER(Z038) FMID(HVT3205) .\n++ JCLIN .\n//GEN49 JOB Y51024509,'531-0 CR SINGER'\n//SG21  EXEC LINKS,\n// PARM='NCAL,XREF,LET,LIST,RENT,REFR',\n//    UNIT='3350',SER=IPLXXX,N=SYS1,NAME=LPALIB,P1=' ',\n//    MOD=,P2=' ',CLASS=T,OBJ=OBJPDS01\n//AOST3   DD DISP=SHR,VOLUME=(,RETAIN),DSN=SYS1.AOST3\n//SYSLIN DD *\n INCLUDE AOST3(IKTIMLU1,IKTOMLU1)\n INCLUDE AOST3(IKT3767I,IKT3767O)\n INCLUDE AOST3(IKTWTTYO)\n INCLUDE AOST3(IKTRTX1)\n ENTRY IKTIMLU1,IKTOMLU1\n ALIAS IKTIMLU1,IKTOMLU1\n ALIAS IKT3767I,IKT3767O,IKTWTTYO\n NAME  IKTIOM01(R)\n/*\n++ SRC(IKTRTX1) DISTLIB(ASRCLIB) .\n         TITLE 'VTAM 3767 (PCI 3767) GRAPHICS EXIT'\nIKTRTX1  CSECT\n         SPACE 1\n*********************************************************************\n*   PURPOSE : SET NON-ZERO RETURN CODE TO BYPASS EDITTING           *\n*             OF OUTPUT DATA FOR 3767S. THIS WILL ALLOW             *\n*             TRANSMISSION OF GRAPHICS CHARACTERS FOR THE           *\n*             TEKTRONIX 4014.                                       *\n*                                                                   *\n*   INPUT   : R1  - A(PARAMETER LIST)                               *\n*                   BYTE 0-3 - CURRENT BUFFER ADDRESS               *\n*                   BYTE 4-7 - CURRENT BUFFER LENGTH                *\n*                   BYTE 8-9 - MISC. FLAGS                          *\n*             R13 - A(SAVEAREA)                                     *\n*             R14 - RETURN ADDRESS                                  *\n*                                                                   *\n*   OUTPUT  : R1  - SHOULD BE UNCHANGED                             *\n*             R13 - SHOULD UNCHANGED                                *\n*             R15 - 0 ==> CONTINUE WITH NORMAL TPUT EDITTING        *\n*                  \u00ac0 ==> DO NO FURTHER EDITTING OF THIS DATA       *\n*********************************************************************\n         SPACE 1\n         SAVE (14,12),T,IKTRTX1_&SYSDATE\n         LR    12,15\n         SR    15,15                    R15=0 TELLS VTAM TO EDIT\n         USING IKTRTX1,12\n         USING PARMS,1\n         TM    OPACFLG,X'20'            CONTROL TPUT?\n         BZ    RETURN                   NO, RETURN AND LET VTAM EDIT\n         TM    OPACFLG,X'10'            CONTROL TPUT\n         BO    RETURN                   NO, RETURN AND LET VTAM EDIT\n         LA    15,4                     YES 4 SIGNALS NOEDIT RECORD\nRETURN   RETURN (14,12),T,RC=(15)\nPARMS    DSECT\nOPACBUFA DS    A                        TPUT BFR ADDR\nOPACBUFL DS    H                        TPUT BFR LENGTH\n         DS    H                        RESERVED\n         DS    B                        RESERVED\nOPACFLG  DS    B                        TPUT TYPE FLAG\n*                                       B'XX10XXXX' WHEN CNTL TPUT\n         END   IKTRTX1\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT070/FILE070.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT070", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}