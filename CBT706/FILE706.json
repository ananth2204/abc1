{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012630000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 13109278, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 260, "INMBLKSZ": 27998, "INMRECFM": "VB", "INMDIR": 10, "INMDSNAM": "CBT.V500.FILE706.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 13109278, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 13109278, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE706.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 27998, "DS1LRECL": 260, "DS1RECFM": "VB", "DS1KEYL": 0, "DS1OPTCD": 32, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\xbd\\n'", "DS1TRBAL": "b'\\x16\\xfa'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xdc\\x00\\x0c\\x04\\xe9\\x00\\x06\\x00\\xbe'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 48393, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04D\\x00\\x00\\x01\\x05\\x02/\\x01\\x05\\x02/!X\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf8@@@'", "ispf": {"version": "04.68", "flags": 0, "createdate": "2005-01-22T00:00:00", "modifydate": "2005-01-22T21:58:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-468"}, "text": "REGULAR CBT TAPE - VERSION 468    FILE:  706\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT468.FILE706\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      VB    260   27998   PO\n\n   PDS117I 27 MEMBERS COUNTED; CUMULATIVE SIZE IS 43,292 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/22/05    21:58:56    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$INDEX": {"ttr": 47108, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x01\\x05\\x02\\x1f\\x01\\x05\\x02\\x1f\\t0\\x00\\x16\\x00\\x16\\x00\\x00\\xc6\\xc1\\xd1\\xc1@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-01-21T00:00:00", "modifydate": "2005-01-21T09:30:05", "lines": 22, "newlines": 22, "modlines": 0, "user": "FAJA"}, "text": "$$$INDEX - This member\n$$README - Installation instructions\n$01INST  - JCL to install into the HFS on OS/390 or z/OS\n$02TOSVG - JCL to generate line charts in SVG format on OS/390 or z/OS\n$03TOPNG - JCL to convert SVG to a PNG image file on z/OS only\n$04TOJPG - JCL to convert SVG to a JPEG image file on z/OS only\n$05TOTIF - JCL to convert SVG to a TIFF image file on z/OS only\nJARBATIK - Binary file: batik-libs.jar       (Batik 1.5.1)\nJARRAST  - Binary file: batik-rasterizer.jar (Batik 1.5.1 app)\nJARXALAN - Binary file: xalan.jar            (Xalan 2.6.0)\nJARXERCE - Binary file: xerces.jar           (Xerces 2.6.2)\nJARXMLAP - Binary file: xml-apis.jar         (Apache common 1.2.01)\nLICENSE  - Apache license\nNOTICE   - Apache license for XALAN\nTOJPEG   - A shell script to transform SVG into a JPEG image file\nTOPNG    - A shell script to transform SVG into a PNG image file\nTOSVG    - A shell script to transform XML into SVG using XALAN\nTOTIFF   - A shell script to transform SVG into a TIFF image file\nXML      - Sample chart data in XML format\nXSD      - XML Schema describing the chart data format\nXSL      - XML Stylesheet to direct the transformation process\nZIPDOCS  - Binary file: docs.zip (tutorial and ASCII distribution)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE1": {"ttr": 27651, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01\\x043\\x7f\\x01\\x043\\x7f\\t \\x00.\\x00.\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-12-02T00:00:00", "modifydate": "2004-12-02T09:20:37", "lines": 46, "newlines": 46, "modlines": 0, "user": "SBGOLOB"}, "text": "Hi Sam,\n\nI have a new CBT tape contribution to make...\n\nSome time ago (maybe a year or so) someone on IBM-MAIN asked\nabout how to publish mainframe performance graphs on their\nintranet.  I suggested somehow creating a Scalable Vector\nGraphics (SVG) file and serving it out directly from your\nmainframe web server - that way an intranet web server could have\na page that just linked to the mainframe web server's SVG file.\nThe 'somehow' was the bit I didn't have available at the time...\n\nWell, I've finally put something together that may be of use to\nother people (and not just mainframers either because you can run\nit on a PC or even Linux).\n\nBasically the idea is to pull your performance data from wherever\n(SMF say), using whatever (Rexx, Assembler, it doesn't matter)\nand create an XML file (which is just text) containing the line\nchart data.  Then you run my contribution (an XSL stylesheet) to\ntransform the XML file into an SVG file which describes the line\nchart in terms of lines, colors and text.  The SVG file can be\nserved out directly by your mainframe web server so that all the\nuser needs is a browser to view the graphics.  SVG is good for\nthis because complicated graphs don't take up much space - so\ntransmission to the end-user is quick - and the actual rendering\nof the graphic is done on the user's PC.  Also, the images are\nscalable (at the PC), so no image quality is lost.  Modern\nsoftware like Microsoft Visio understands the SVG format.\n\nAlternatively, the SVG file can be converted to an image file\n(PNG, JPEG or TIFF) and published in the usual way.  The user may\nhave to put up with longer download times and poor print quality\nthough.\n\nI have included in the xmit file all the Java JAR files necessary\nto do the processing, but as a result the xmit file is quite\nlarge (8.5 MB) and does not compress well (7.5 MB zipped).\n\nOh...and the xmit file is of a RECFM=VB PDS, so the xmitmanager\nwon't be able to be used to extract the files (I've tried but I\nget garbage).  The only way is to upload the xmit file and let\nTSO RECEIVE extract the files.\n\nCheers,\nAndrew Armstrong.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE2": {"ttr": 48389, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x13\\x01\\x05\\x02/\\x01\\x05\\x02/!\\x01\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-01-22T00:00:00", "modifydate": "2005-01-22T21:01:13", "lines": 14, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "Hi Sam,\n\nI've uploaded version 1.1 of file706.\n\nThis version:\n1. Adds support for rotated labels on line charts\n2. Upgrades the included Batik jar file to version 1.5.1\n   (was using 1.5.1rc2)\n3. Renames the ZIPFILE member to ZIPDOCS\n4. Has Improved html documentation and tutorial stored in ZIPDOCS.\n\nCheers,\nAndrew.\nandrew_armstrong@unwired.com.au\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$README": {"ttr": 47110, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x01\\x05\\x02\\x1f\\x01\\x05\\x02\\x1f\\t0\\x00\\x18\\x00\\x18\\x00\\x00\\xc6\\xc1\\xd1\\xc1@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-01-21T00:00:00", "modifydate": "2005-01-21T09:30:05", "lines": 24, "newlines": 24, "modlines": 0, "user": "FAJA"}, "text": "To install on OS/390 or z/OS:\n   Edit and submit JCL in $01INST\n   If successful, a file called sample.svg will be generated.\n   You can either publish it using your mainframe web server or\n   download it to your PC (in binary mode - it is already ASCII)\n   and open it with Internet Explorer. Make sure you have installed\n   the Adobe SVG Viewer plug-in for Internet Explorer first.\n\nTo transform XML to SVG on OS/390 or z/OS:\n   Edit and submit JCL in $02TOSVG\n\nTo transform SVG to PNG, or JPEG, or TIFF on z/OS (ONLY):\n   Edit and submit JCL in $03TOPNG\n                       or $04TOJPG\n                       or $05TOTIF\n\nTo install on a PC (and view the documentation and tutorial):\n   (only tested on Windows, but should be ok on Linux)\n1. Download ZIPDOCS (in binary mode) as file706.zip\n2. Unzip file706.zip (retaining the directory structure)\n3. Open the index.html file in Internet Explorer to view the\n   documentation and tutorial\n4. Use the linechart.xsl stylesheet in the src directory\n   as per instructions in the html documentation\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$01INST": {"ttr": 47112, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x01\\x05\\x02\\x1f\\x01\\x05\\x02\\x1f\\t0\\x00\\xd2\\x00\\xd2\\x00\\x00\\xc6\\xc1\\xd1\\xc1@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-01-21T00:00:00", "modifydate": "2005-01-21T09:30:05", "lines": 210, "newlines": 210, "modlines": 0, "user": "FAJA"}, "text": "//FAJAI   JOB  90-0573,ARMSTR,CLASS=A,MSGCLASS=X,NOTIFY=&SYSUID,\n//             REGION=40M\n//*********************************************************************\n//**                                                                 **\n//** FUNCTION - This job installs all the files necessary to create  **\n//**            SVG line charts from xml data and then generates a   **\n//**            sample line chart.                                   **\n//**                                                                 **\n//** ON ENTRY - &INST = Your source installation PDS.                **\n//**            &DIR  = Your target installation HFS directory.      **\n//**                                                                 **\n//** ON EXIT  - The following files will be installed in &DIR:       **\n//**                                                                 **\n//**            xalan.jar      - Apache XALAN XSLT processor         **\n//**            xercesImpl.jar - Apache XERCES XML parser            **\n//**            xml-apis.jar   - Apache miscellaneous API functions  **\n//**            batik-libs.jar - Apache BATIK (all in one jar file)  **\n//**            batik-rasterizer.jar -  BATIK rasterizer             **\n//**            tosvg          - Transform XML to SVG                **\n//**            topng          - Transform SVG to PNG image file     **\n//**            tojpeg         - Transform SVG to JPEG image file    **\n//**            totiff         - Transform SVG to TIFF image file    **\n//**            lineChart.xsd  - XML Schema of transform input file  **\n//**            lineChart.xsl  - XML Stylesheet directing transform  **\n//**                                                                 **\n//** INPUT    - sample.xml     - Sample chart data                   **\n//**                                                                 **\n//** OUTPUT   - The following files will be created in &DIR:         **\n//**            stdout         - Standard output (from all steps)    **\n//**            stderr         - Standard error output               **\n//**            sample.svg     - Generated SVG file. Note this is in **\n//**                             ASCII ready to be either served out **\n//**                             by your web server, or downloaded   **\n//**                             to a PC for viewing with Internet   **\n//**                             Explorer (you must have the Adobe   **\n//**                             SVG viewer plug-in for Internet     **\n//**                             Explorer installed).                **\n//**                                                                 **\n//*********************************************************************\n//*\n//*-------------------------------------------------------------------*\n//*  Specify your source installation PDS here...\n//*-------------------------------------------------------------------*\n//*\n//         SET INST=&SYSUID..CBT468.FILE706\n//*\n//*-------------------------------------------------------------------*\n//*  Specify your target installation directory here...\n//*-------------------------------------------------------------------*\n//*\n//         SET DIR='/u/faja/file706'\n//*\n//*-------------------------------------------------------------------*\n//*  Create the target installation directory\n//*-------------------------------------------------------------------*\n//*\n//STEP1   EXEC PGM=BPXBATCH,\n//             PARM='SH mkdir -p &DIR'\n//STDIN     DD PATH='/dev/null'\n//STDOUT    DD PATH='/dev/null'\n//STDERR    DD PATH='/dev/null'\n//*\n//*-------------------------------------------------------------------*\n//*  Install xalan.jar\n//*-------------------------------------------------------------------*\n//*\n//STEP2A  EXEC PGM=IKJEFT01,DYNAMNBR=100,REGION=5M,\n//             PARM='OCOPY INDD(IN) OUTDD(OUT) BINARY'\n//SYSTSPRT  DD SYSOUT=*\n//SYSTSIN   DD DUMMY\n//OUT       DD PATH='&DIR/xalan.jar',\n//             PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU\n//IN        DD DISP=SHR,DSN=&INST(JARXALAN)\n//*\n//*-------------------------------------------------------------------*\n//*  Install xercesImpl.jar\n//*-------------------------------------------------------------------*\n//*\n//STEP2B  EXEC PGM=IKJEFT01,DYNAMNBR=100,REGION=5M,\n//             PARM='OCOPY INDD(IN) OUTDD(OUT) BINARY'\n//SYSTSPRT  DD SYSOUT=*\n//SYSTSIN   DD DUMMY\n//OUT       DD PATH='&DIR/xercesImpl.jar',\n//             PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU\n//IN        DD DISP=SHR,DSN=&INST(JARXERCE)\n//*\n//*-------------------------------------------------------------------*\n//*  Install xml-apis.jar\n//*-------------------------------------------------------------------*\n//*\n//STEP2C  EXEC PGM=IKJEFT01,DYNAMNBR=100,REGION=5M,\n//             PARM='OCOPY INDD(IN) OUTDD(OUT) BINARY'\n//SYSTSPRT  DD SYSOUT=*\n//SYSTSIN   DD DUMMY\n//OUT       DD PATH='&DIR/xml-apis.jar',\n//             PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU\n//IN        DD DISP=SHR,DSN=&INST(JARXMLAP)\n//*\n//*-------------------------------------------------------------------*\n//*  Install batik-libs.jar\n//*-------------------------------------------------------------------*\n//*\n//STEP2D  EXEC PGM=IKJEFT01,DYNAMNBR=100,REGION=5M,\n//             PARM='OCOPY INDD(IN) OUTDD(OUT) BINARY'\n//SYSTSPRT  DD SYSOUT=*\n//SYSTSIN   DD DUMMY\n//OUT       DD PATH='&DIR/batik-libs.jar',\n//             PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU\n//IN        DD DISP=SHR,DSN=&INST(JARBATIK)\n//*\n//*-------------------------------------------------------------------*\n//*  Install batik-rasterizer.jar\n//*-------------------------------------------------------------------*\n//*\n//STEP2D  EXEC PGM=IKJEFT01,DYNAMNBR=100,REGION=5M,\n//             PARM='OCOPY INDD(IN) OUTDD(OUT) BINARY'\n//SYSTSPRT  DD SYSOUT=*\n//SYSTSIN   DD DUMMY\n//OUT       DD PATH='&DIR/batik-rasterizer.jar',\n//             PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU\n//IN        DD DISP=SHR,DSN=&INST(JARRAST)\n//*\n//*-------------------------------------------------------------------*\n//*  Install the XSLT transformation script\n//*-------------------------------------------------------------------*\n//*\n//STEP2A  EXEC PGM=IKJEFT01,DYNAMNBR=100,REGION=5M,\n//             PARM='OCOPY INDD(IN) OUTDD(OUT) TEXT'\n//SYSTSPRT  DD SYSOUT=*\n//SYSTSIN   DD DUMMY\n//OUT       DD PATH='&DIR/tosvg',\n//             PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU\n//IN        DD DISP=SHR,DSN=&INST(TOSVG)\n//*\n//*-------------------------------------------------------------------*\n//*  Install the SVG to PNG image script\n//*-------------------------------------------------------------------*\n//*\n//STEP2B  EXEC PGM=IKJEFT01,DYNAMNBR=100,REGION=5M,\n//             PARM='OCOPY INDD(IN) OUTDD(OUT) TEXT'\n//SYSTSPRT  DD SYSOUT=*\n//SYSTSIN   DD DUMMY\n//OUT       DD PATH='&DIR/topng',\n//             PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU\n//IN        DD DISP=SHR,DSN=&INST(TOPNG)\n//*\n//*-------------------------------------------------------------------*\n//*  Install the schema definition\n//*-------------------------------------------------------------------*\n//*\n//STEP3A  EXEC PGM=IKJEFT01,DYNAMNBR=100,REGION=5M,\n//             PARM='OCOPY INDD(IN) OUTDD(OUT) TEXT'\n//SYSTSPRT  DD SYSOUT=*\n//SYSTSIN   DD DUMMY\n//OUT       DD PATH='&DIR/lineChart.xsd',\n//             PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU\n//IN        DD DISP=SHR,DSN=&INST(XSD)\n//*\n//*-------------------------------------------------------------------*\n//*  Install the stylesheet\n//*-------------------------------------------------------------------*\n//*\n//STEP3B  EXEC PGM=IKJEFT01,DYNAMNBR=100,REGION=5M,\n//             PARM='OCOPY INDD(IN) OUTDD(OUT) TEXT'\n//SYSTSPRT  DD SYSOUT=*\n//SYSTSIN   DD DUMMY\n//OUT       DD PATH='&DIR/lineChart.xsl',\n//             PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU\n//IN        DD DISP=SHR,DSN=&INST(XSL)\n//*\n//*-------------------------------------------------------------------*\n//*  Install the sample chart data\n//*-------------------------------------------------------------------*\n//*\n//STEP4   EXEC PGM=IKJEFT01,DYNAMNBR=100,REGION=5M,\n//             PARM='OCOPY INDD(IN) OUTDD(OUT)'\n//SYSTSPRT  DD SYSOUT=*\n//SYSTSIN   DD DUMMY\n//OUT       DD PATH='&DIR/sample.xml',\n//             PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU\n//IN        DD DISP=SHR,DSN=&INST(XML)\n//*\n//*-------------------------------------------------------------------*\n//*  Transform the sample chart data into an svg file\n//*-------------------------------------------------------------------*\n//*\n//STEP5   EXEC PGM=BPXBATCH,\n// PARM='SH &DIR/tosvg &DIR sample.xml lineChart.xsl sample.svg'\n//STDIN     DD PATH='/dev/null'\n//STDOUT    DD PATH='&DIR/stdout',\n//             PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU\n//STDERR    DD PATH='&DIR/stderr',\n//             PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU\n//*\n//*-------------------------------------------------------------------*\n//*  Print stdout and stderr files\n//*-------------------------------------------------------------------*\n//*\n//STEP6   EXEC PGM=IKJEFT01,DYNAMNBR=100,REGION=5M\n//SYSTSPRT  DD SYSOUT=*\n//ISTDOUT   DD PATH='&DIR/stdout',\n//             PATHOPTS=(ORDONLY),PATHMODE=SIRWXU\n//ISTDERR   DD PATH='&DIR/stderr',\n//             PATHOPTS=(ORDONLY),PATHMODE=SIRWXU\n//STDOUT    DD SYSOUT=*,DCB=(RECFM=V,LRECL=256)\n//STDERR    DD SYSOUT=*,DCB=(RECFM=V,LRECL=256)\n//SYSTSIN   DD *\n  OCOPY INDD(ISTDOUT) OUTDD(STDOUT) TEXT\n  OCOPY INDD(ISTDERR) OUTDD(STDERR) TEXT\n/*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$02TOSVG": {"ttr": 47361, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x01\\x05\\x02\\x1f\\x01\\x05\\x02\\x1f\\t0\\x00G\\x00G\\x00\\x00\\xc6\\xc1\\xd1\\xc1@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-01-21T00:00:00", "modifydate": "2005-01-21T09:30:05", "lines": 71, "newlines": 71, "modlines": 0, "user": "FAJA"}, "text": "//FAJAX   JOB  90-0573,ARMSTR,CLASS=A,MSGCLASS=X,NOTIFY=&SYSUID,\n//             REGION=40M\n//*********************************************************************\n//**                                                                 **\n//** FUNCTION - This job converts chart data into a Scalable Vector  **\n//**            Graphics (SVG) file representing a line chart.       **\n//**                                                                 **\n//** ON ENTRY - &DIR  = Your target installation HFS directory.      **\n//**                                                                 **\n//** INPUT    - sample.xml     - Sample chart data                   **\n//**                                                                 **\n//** OUTPUT   - sample.svg     - Generated SVG file. Note this is in **\n//**                             ASCII ready to be either served out **\n//**                             by your web server, or downloaded   **\n//**                             to a PC for viewing in a Internet   **\n//**                             Explorer.                           **\n//**                                                                 **\n//*********************************************************************\n//*\n//*-------------------------------------------------------------------*\n//*  Specify your source installation PDS here...\n//*-------------------------------------------------------------------*\n//*\n//         SET INST=&SYSUID..CBT468.FILE706\n//*\n//*-------------------------------------------------------------------*\n//*  Specify your target installation directory here...\n//*-------------------------------------------------------------------*\n//*\n//         SET DIR='/u/faja/file706'\n//*\n//*-------------------------------------------------------------------*\n//*  Copy the chart data into the HFS\n//*-------------------------------------------------------------------*\n//*\n//STEP1   EXEC PGM=IKJEFT01,DYNAMNBR=100,REGION=5M,\n//             PARM='OCOPY INDD(IN) OUTDD(OUT) TEXT'\n//SYSTSPRT  DD SYSOUT=*\n//SYSTSIN   DD DUMMY\n//OUT       DD PATH='&DIR/sample.xml',\n//             PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU\n//IN        DD DISP=SHR,DSN=&INST(XML)\n//*\n//*-------------------------------------------------------------------*\n//*  Transform to an svg file\n//*-------------------------------------------------------------------*\n//*\n//STEP2   EXEC PGM=BPXBATCH,\n// PARM='SH &DIR/tosvg &DIR sample.xml lineChart.xsl sample.svg'\n//STDIN     DD PATH='/dev/null'\n//STDOUT    DD PATH='&DIR/stdout',\n//             PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU\n//STDERR    DD PATH='&DIR/stderr',\n//             PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU\n//*\n//*-------------------------------------------------------------------*\n//*  Print stdout and stderr\n//*-------------------------------------------------------------------*\n//*\n//STEP3   EXEC PGM=IKJEFT01,DYNAMNBR=100,REGION=5M\n//SYSTSPRT  DD SYSOUT=*\n//ISTDOUT   DD PATH='&DIR/stdout',\n//             PATHOPTS=(ORDONLY),PATHMODE=SIRWXU\n//ISTDERR   DD PATH='&DIR/stderr',\n//             PATHOPTS=(ORDONLY),PATHMODE=SIRWXU\n//STDOUT    DD SYSOUT=*,DCB=(RECFM=V,LRECL=256)\n//STDERR    DD SYSOUT=*,DCB=(RECFM=V,LRECL=256)\n//SYSTSIN   DD *\n  OCOPY INDD(ISTDOUT) OUTDD(STDOUT) TEXT\n  OCOPY INDD(ISTDERR) OUTDD(STDERR) TEXT\n/*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$03TOPNG": {"ttr": 47363, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x01\\x05\\x02\\x1f\\x01\\x05\\x02\\x1f\\t0\\x007\\x007\\x00\\x00\\xc6\\xc1\\xd1\\xc1@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-01-21T00:00:00", "modifydate": "2005-01-21T09:30:05", "lines": 55, "newlines": 55, "modlines": 0, "user": "FAJA"}, "text": "//FAJAPNG JOB  90-0573,ARMSTR,CLASS=A,MSGCLASS=X,NOTIFY=&SYSUID,\n//             REGION=40M\n//*********************************************************************\n//**                                                                 **\n//** FUNCTION - This job converts a Scalable Vector Graphics (SVG)   **\n//**            file to a Portable Network Graphics (PNG) image file.**\n//**                                                                 **\n//** ON ENTRY - &DIR  = Your target installation HFS directory.      **\n//**                                                                 **\n//** INPUT    - sample.svg     - Sample chart data                   **\n//**                                                                 **\n//** OUTPUT   - sample.png     - Generated PNG image file.           **\n//**                                                                 **\n//*********************************************************************\n//*\n//*-------------------------------------------------------------------*\n//*  Specify your source installation PDS here...\n//*-------------------------------------------------------------------*\n//*\n//         SET INST=&SYSUID..CBT468.FILE706\n//*\n//*-------------------------------------------------------------------*\n//*  Specify your target installation directory here...\n//*-------------------------------------------------------------------*\n//*\n//         SET DIR='/u/faja/file706'\n//*\n//*-------------------------------------------------------------------*\n//*  Transform SVG to a PNG image file\n//*-------------------------------------------------------------------*\n//*\n//STEP1   EXEC PGM=BPXBATCH,\n// PARM='SH &DIR/topng &DIR sample.svg'\n//STDIN     DD PATH='/dev/null'\n//STDOUT    DD PATH='&DIR/stdout',\n//             PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU\n//STDERR    DD PATH='&DIR/stderr',\n//             PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU\n//*\n//*-------------------------------------------------------------------*\n//*  Print stdout and stderr\n//*-------------------------------------------------------------------*\n//*\n//STEP2   EXEC PGM=IKJEFT01,DYNAMNBR=100,REGION=5M\n//SYSTSPRT  DD SYSOUT=*\n//ISTDOUT   DD PATH='&DIR/stdout',\n//             PATHOPTS=(ORDONLY),PATHMODE=SIRWXU\n//ISTDERR   DD PATH='&DIR/stderr',\n//             PATHOPTS=(ORDONLY),PATHMODE=SIRWXU\n//STDOUT    DD SYSOUT=*,DCB=(RECFM=V,LRECL=256)\n//STDERR    DD SYSOUT=*,DCB=(RECFM=V,LRECL=256)\n//SYSTSIN   DD *\n  OCOPY INDD(ISTDOUT) OUTDD(STDOUT) TEXT\n  OCOPY INDD(ISTDERR) OUTDD(STDERR) TEXT\n/*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$04TOJPG": {"ttr": 47365, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x01\\x05\\x02\\x1f\\x01\\x05\\x02\\x1f\\t0\\x007\\x007\\x00\\x00\\xc6\\xc1\\xd1\\xc1@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-01-21T00:00:00", "modifydate": "2005-01-21T09:30:05", "lines": 55, "newlines": 55, "modlines": 0, "user": "FAJA"}, "text": "//FAJAJPG JOB  90-0573,ARMSTR,CLASS=A,MSGCLASS=X,NOTIFY=&SYSUID,\n//             REGION=40M\n//*********************************************************************\n//**                                                                 **\n//** FUNCTION - This job converts a Scalable Vector Graphics (SVG)   **\n//**            file to a JPEG image file.                           **\n//**                                                                 **\n//** ON ENTRY - &DIR  = Your target installation HFS directory.      **\n//**                                                                 **\n//** INPUT    - sample.svg     - Sample chart data                   **\n//**                                                                 **\n//** OUTPUT   - sample.jpeg    - Generated JPEG image file.          **\n//**                                                                 **\n//*********************************************************************\n//*\n//*-------------------------------------------------------------------*\n//*  Specify your source installation PDS here...\n//*-------------------------------------------------------------------*\n//*\n//         SET INST=&SYSUID..CBT468.FILE706\n//*\n//*-------------------------------------------------------------------*\n//*  Specify your target installation directory here...\n//*-------------------------------------------------------------------*\n//*\n//         SET DIR='/u/faja/file706'\n//*\n//*-------------------------------------------------------------------*\n//*  Transform SVG to a JPEG image file\n//*-------------------------------------------------------------------*\n//*\n//STEP1   EXEC PGM=BPXBATCH,\n// PARM='SH &DIR/tojpeg &DIR sample.svg'\n//STDIN     DD PATH='/dev/null'\n//STDOUT    DD PATH='&DIR/stdout',\n//             PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU\n//STDERR    DD PATH='&DIR/stderr',\n//             PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU\n//*\n//*-------------------------------------------------------------------*\n//*  Print stdout and stderr\n//*-------------------------------------------------------------------*\n//*\n//STEP2   EXEC PGM=IKJEFT01,DYNAMNBR=100,REGION=5M\n//SYSTSPRT  DD SYSOUT=*\n//ISTDOUT   DD PATH='&DIR/stdout',\n//             PATHOPTS=(ORDONLY),PATHMODE=SIRWXU\n//ISTDERR   DD PATH='&DIR/stderr',\n//             PATHOPTS=(ORDONLY),PATHMODE=SIRWXU\n//STDOUT    DD SYSOUT=*,DCB=(RECFM=V,LRECL=256)\n//STDERR    DD SYSOUT=*,DCB=(RECFM=V,LRECL=256)\n//SYSTSIN   DD *\n  OCOPY INDD(ISTDOUT) OUTDD(STDOUT) TEXT\n  OCOPY INDD(ISTDERR) OUTDD(STDERR) TEXT\n/*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$05TOTIF": {"ttr": 47367, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x01\\x05\\x02\\x1f\\x01\\x05\\x02\\x1f\\t0\\x007\\x007\\x00\\x00\\xc6\\xc1\\xd1\\xc1@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-01-21T00:00:00", "modifydate": "2005-01-21T09:30:05", "lines": 55, "newlines": 55, "modlines": 0, "user": "FAJA"}, "text": "//FAJATIF JOB  90-0573,ARMSTR,CLASS=A,MSGCLASS=X,NOTIFY=&SYSUID,\n//             REGION=40M\n//*********************************************************************\n//**                                                                 **\n//** FUNCTION - This job converts a Scalable Vector Graphics (SVG)   **\n//**            file to a TIFF image file.                           **\n//**                                                                 **\n//** ON ENTRY - &DIR  = Your target installation HFS directory.      **\n//**                                                                 **\n//** INPUT    - sample.svg     - Sample chart data                   **\n//**                                                                 **\n//** OUTPUT   - sample.tiff    - Generated TIFF image file.          **\n//**                                                                 **\n//*********************************************************************\n//*\n//*-------------------------------------------------------------------*\n//*  Specify your source installation PDS here...\n//*-------------------------------------------------------------------*\n//*\n//         SET INST=&SYSUID..CBT468.FILE706\n//*\n//*-------------------------------------------------------------------*\n//*  Specify your target installation directory here...\n//*-------------------------------------------------------------------*\n//*\n//         SET DIR='/u/faja/file706'\n//*\n//*-------------------------------------------------------------------*\n//*  Transform SVG to a TIFF image file\n//*-------------------------------------------------------------------*\n//*\n//STEP1   EXEC PGM=BPXBATCH,\n// PARM='SH &DIR/totiff &DIR sample.svg'\n//STDIN     DD PATH='/dev/null'\n//STDOUT    DD PATH='&DIR/stdout',\n//             PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU\n//STDERR    DD PATH='&DIR/stderr',\n//             PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU\n//*\n//*-------------------------------------------------------------------*\n//*  Print stdout and stderr\n//*-------------------------------------------------------------------*\n//*\n//STEP2   EXEC PGM=IKJEFT01,DYNAMNBR=100,REGION=5M\n//SYSTSPRT  DD SYSOUT=*\n//ISTDOUT   DD PATH='&DIR/stdout',\n//             PATHOPTS=(ORDONLY),PATHMODE=SIRWXU\n//ISTDERR   DD PATH='&DIR/stderr',\n//             PATHOPTS=(ORDONLY),PATHMODE=SIRWXU\n//STDOUT    DD SYSOUT=*,DCB=(RECFM=V,LRECL=256)\n//STDERR    DD SYSOUT=*,DCB=(RECFM=V,LRECL=256)\n//SYSTSIN   DD *\n  OCOPY INDD(ISTDOUT) OUTDD(STDOUT) TEXT\n  OCOPY INDD(ISTDERR) OUTDD(STDERR) TEXT\n/*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE706": {"ttr": 48391, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x005\\x01\\x02\\x16\\x0f\\x01\\x05\\x02/!S\\x00H\\x00\\x02\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf8@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2002-06-09T00:00:00", "modifydate": "2005-01-22T21:53:35", "lines": 72, "newlines": 2, "modlines": 0, "user": "CBT-468"}, "text": "//***FILE 706 is from Andrew Armstrong and contains a marvelous     *   FILE 706\n//*           system to convert your mainframe performance data     *   FILE 706\n//*           to SVG (Scalable Vector Graphics) format and display  *   FILE 706\n//*           it anywhere in your network, on other platforms.      *   FILE 706\n//*                                                                 *   FILE 706\n//*           email:  andrew_armstrong@unwired.com.au               *   FILE 706\n//*                                                                 *   FILE 706\n//*   A description of this contribution follows:                   *   FILE 706\n//*                                                                 *   FILE 706\n//*     I have a new CBT tape contribution to make...               *   FILE 706\n//*                                                                 *   FILE 706\n//*     Some time ago (maybe a year or so) someone on IBM-MAIN      *   FILE 706\n//*     asked about how to publish mainframe performance graphs     *   FILE 706\n//*     on their intranet.  I suggested somehow creating a          *   FILE 706\n//*     Scalable Vector Graphics (SVG) file and serving it out      *   FILE 706\n//*     directly from your mainframe web server - that way an       *   FILE 706\n//*     intranet web server could have a page that just linked      *   FILE 706\n//*     to the mainframe web server's SVG file.  The 'somehow'      *   FILE 706\n//*     was the bit I didn't have available at the time...          *   FILE 706\n//*                                                                 *   FILE 706\n//*     Well, I've finally put something together that may be       *   FILE 706\n//*     of use to other people (and not just mainframers either     *   FILE 706\n//*     because you can run it on a PC or even Linux).              *   FILE 706\n//*                                                                 *   FILE 706\n//*     Basically the idea is to pull your performance data         *   FILE 706\n//*     from wherever (SMF say), using whatever (Rexx,              *   FILE 706\n//*     Assembler, it doesn't matter) and create an XML file        *   FILE 706\n//*     (which is just text) containing the line chart data.        *   FILE 706\n//*     Then you run my contribution (an XSL stylesheet) to         *   FILE 706\n//*     transform the XML file into an SVG file which describes     *   FILE 706\n//*     the line chart in terms of lines, colors and text.  The     *   FILE 706\n//*     SVG file can be served out directly by your mainframe       *   FILE 706\n//*     web server so that all the user needs is a browser to       *   FILE 706\n//*     view the graphics.  SVG is good for this because            *   FILE 706\n//*     complicated graphs don't take up much space - so            *   FILE 706\n//*     transmission to the end-user is quick - and the actual      *   FILE 706\n//*     rendering of the graphic is done on the user's PC.          *   FILE 706\n//*     Also, the images are scalable (at the PC), so no image      *   FILE 706\n//*     quality is lost.  Modern software like Microsoft Visio      *   FILE 706\n//*     understands the SVG format.                                 *   FILE 706\n//*                                                                 *   FILE 706\n//*     Alternatively, the SVG file can be converted to an          *   FILE 706\n//*     image file (PNG, JPEG or TIFF) and published in the         *   FILE 706\n//*     usual way.  The user may have to put up with longer         *   FILE 706\n//*     download times and poor print quality though.               *   FILE 706\n//*                                                                 *   FILE 706\n//*     I have included in the xmit file all the Java JAR files     *   FILE 706\n//*     necessary to do the processing, but as a result the         *   FILE 706\n//*     xmit file is quite large (8.5 MB) and does not compress     *   FILE 706\n//*     well (7.5 MB zipped).                                       *   FILE 706\n//*                                                                 *   FILE 706\n//*     Oh...and the xmit file is of a RECFM=VB PDS, so the         *   FILE 706\n//*     xmitmanager won't be able to be used to extract the         *   FILE 706\n//*     files (I've tried but I get garbage).  The only way is      *   FILE 706\n//*     to upload the xmit file and let TSO RECEIVE extract the     *   FILE 706\n//*     files.                                                      *   FILE 706\n//*                                                                 *   FILE 706\n//*     - - - - - - - - - - - - - - - - - - - - - - - - - - - -     *   FILE 706\n//*                                                                 *   FILE 706\n//*     I've uploaded version 1.1 of file706.                       *   FILE 706\n//*                                                                 *   FILE 706\n//*     This version:                                               *   FILE 706\n//*     1. Adds support for rotated labels on line charts           *   FILE 706\n//*     2. Upgrades the included Batik jar file to version 1.5.1    *   FILE 706\n//*        (was using 1.5.1rc2)                                     *   FILE 706\n//*     3. Renames the ZIPFILE member to ZIPDOCS                    *   FILE 706\n//*     4. Has Improved html documentation and tutorial stored      *   FILE 706\n//*        in ZIPDOCS.                                              *   FILE 706\n//*                                                                 *   FILE 706\n//*     Cheers,                                                     *   FILE 706\n//*     Andrew Armstrong.                                           *   FILE 706\n//*                                                                 *   FILE 706\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JARBATIK": {"ttr": 27653, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x06\\x01\\x05\\x02\\x1f\\x01\\x05\\x02\\x1f\\t0&'&'\\x00\\x00\\xc6\\xc1\\xd1\\xc1@@@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-01-21T00:00:00", "modifydate": "2005-01-21T09:30:06", "lines": 9767, "newlines": 9767, "modlines": 0, "user": "FAJA"}, "mimetype": "application/zip", "datatype": "binary", "extension": ".zip"}, "JARRAST": {"ttr": 39427, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x06\\x01\\x05\\x02\\x1f\\x01\\x05\\x02\\x1f\\t0\\x00\\x9f\\x00\\x9f\\x00\\x00\\xc6\\xc1\\xd1\\xc1@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-01-21T00:00:00", "modifydate": "2005-01-21T09:30:06", "lines": 159, "newlines": 159, "modlines": 0, "user": "FAJA"}, "mimetype": "application/zip", "datatype": "binary", "extension": ".zip"}, "JARXALAN": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x043\\x7f\\x01\\x043\\x7f\\t\\x130\\x100\\x10\\x00\\x00\\xd1\\xc1\\xe5\\xc1@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-12-02T00:00:00", "modifydate": "2004-12-02T09:13:00", "lines": 12304, "newlines": 12304, "modlines": 0, "user": "JAVA"}, "mimetype": "application/zip", "datatype": "binary", "extension": ".zip"}, "JARXERCE": {"ttr": 15361, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x043\\x7f\\x01\\x043\\x7f\\t\\x13\\x0fm\\x0fm\\x00\\x00\\xd1\\xc1\\xe5\\xc1@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-12-02T00:00:00", "modifydate": "2004-12-02T09:13:00", "lines": 3949, "newlines": 3949, "modlines": 0, "user": "JAVA"}, "mimetype": "application/zip", "datatype": "binary", "extension": ".zip"}, "JARXMLAP": {"ttr": 19971, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x043\\x7f\\x01\\x043\\x7f\\t\\x13\\x01\\xe8\\x01\\xe8\\x00\\x00\\xd1\\xc1\\xe5\\xc1@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-12-02T00:00:00", "modifydate": "2004-12-02T09:13:00", "lines": 488, "newlines": 488, "modlines": 0, "user": "JAVA"}, "mimetype": "application/zip", "datatype": "binary", "extension": ".zip"}, "LICENSE": {"ttr": 47369, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x07\\x01\\x05\\x02\\x1f\\x01\\x05\\x02\\x1f\\t0\\x00\\xcb\\x00\\xcb\\x00\\x00\\xc6\\xc1\\xd1\\xc1@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-01-21T00:00:00", "modifydate": "2005-01-21T09:30:07", "lines": 203, "newlines": 203, "modlines": 0, "user": "FAJA"}, "text": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"\u00a8(\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright \u00a8yyyy( \u00a8name of copyright owner(\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NOTICE": {"ttr": 47371, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x07\\x01\\x05\\x02\\x1f\\x01\\x05\\x02\\x1f\\t0\\x00!\\x00!\\x00\\x00\\xc6\\xc1\\xd1\\xc1@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-01-21T00:00:00", "modifydate": "2005-01-21T09:30:07", "lines": 33, "newlines": 33, "modlines": 0, "user": "FAJA"}, "text": "   =========================================================================\n   ==  NOTICE file corresponding to section 4(d) of the Apache License,   ==\n   ==  Version 2.0, in this case for the Apache Xalan distribution.       ==\n   =========================================================================\n\n   This product includes software developed by\n   The Apache Software Foundation (http://www.apache.org/).\n\n   Portions of this software was originally based on the following:\n     - software copyright (c) 1999-2002, Lotus Development Corporation.,\n       http://www.lotus.com.\n     - software copyright (c) 2001-2002, Sun Microsystems.,\n       http://www.sun.com.\n     - software copyright (c) 2003, IBM Corporation., http://www.ibm.com.\n     - voluntary contributions made by Ovidiu Predescu <ovidiu@cup.hp.com> on\n       behalf of the Apache Software Foundation that was originally developed\n       at Hewlett Packard Company.\n\n   This product includes software developed by the following:\n\n     - The Apache Software Foundation (see BCEL.README.txt, ant.README.txt,\n       regexp.README.txt, stylebook-1.0-b3_xalan-2.README.txt,\n       xercesImpl.README.txt, xml-apis.README.txt)\n\n     - International Business Machines Corporation (see bsf.README.txt)\n\n     - World Wide Web Consortium (see jtidy.README.txt)\n\n     - Elliot Joel Berk and C. Scott Ananian (see JLex.README.txt)\n\n     - Scott Hudson, Frank Flannery, C. Scott Ananian\n       (see java_cup.READNE.txt, runtime.README.txt)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TOJPEG": {"ttr": 47373, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x07\\x01\\x05\\x02\\x1f\\x01\\x05\\x02\\x1f\\t0\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc6\\xc1\\xd1\\xc1@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-01-21T00:00:00", "modifydate": "2005-01-21T09:30:07", "lines": 31, "newlines": 31, "modlines": 0, "user": "FAJA"}, "text": "#!/bin/sh\n#*********************************************************************\n#**                                                                 **\n#** FUNCTION - This script runs the BATIK rasterizer to convert an  **\n#**            SVG file into a JPEG image file.                     **\n#**                                                                 **\n#** SYNTAX   - tojpeg installdir inputfile                          **\n#**                                                                 **\n#** NOTES    - 1. The -scriptSecurityOff option is a workaround for **\n#**               z/OS Java 1.4 whose security manager does not     **\n#**               allow java programs to set system properties      **\n#**               without prior authorisation. You should really    **\n#**               grant appropriate authority instead of disabling  **\n#**               script security.                                  **\n#*********************************************************************\n\nJAVA=\"$JAVA_HOME/bin/java -showversion\"\n\nCP='.'\nCP=\"$CP:$JAVA_HOME/lib/classes.zip\"\nCP=\"$CP:batik-libs.jar\"\n\nH=\"-Djava.awt.headless=true\"\nR='batik-rasterizer.jar'\nO='-m image/jpeg -q 0.75 -scriptSecurityOff'\n\ncd $1\n\nCMD=\"$JAVA -cp $CP $H -jar $R $O $2\"\necho $CMD\n$CMD\n", "mimetype": "text/x-shellscript", "datatype": "ebcdic", "extension": ".x-shellscript"}, "TOPNG": {"ttr": 47375, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x07\\x01\\x05\\x02\\x1f\\x01\\x05\\x02\\x1f\\t0\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc6\\xc1\\xd1\\xc1@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-01-21T00:00:00", "modifydate": "2005-01-21T09:30:07", "lines": 31, "newlines": 31, "modlines": 0, "user": "FAJA"}, "text": "#!/bin/sh\n#*********************************************************************\n#**                                                                 **\n#** FUNCTION - This script runs the BATIK rasterizer to convert an  **\n#**            SVG file into a PNG image file.                      **\n#**                                                                 **\n#** SYNTAX   - topng installdir inputfile                           **\n#**                                                                 **\n#** NOTES    - 1. The -scriptSecurityOff option is a workaround for **\n#**               z/OS Java 1.4 whose security manager does not     **\n#**               allow java programs to set system properties      **\n#**               without prior authorisation. You should really    **\n#**               grant appropriate authority instead of disabling  **\n#**               script security.                                  **\n#*********************************************************************\n\nJAVA=\"$JAVA_HOME/bin/java -showversion\"\n\nCP='.'\nCP=\"$CP:$JAVA_HOME/lib/classes.zip\"\nCP=\"$CP:batik-libs.jar\"\n\nH=\"-Djava.awt.headless=true\"\nR='batik-rasterizer.jar'\nO='-m image/png -scriptSecurityOff'\n\ncd $1\n\nCMD=\"$JAVA -cp $CP $H -jar $R $O $2\"\necho $CMD\n$CMD\n", "mimetype": "text/x-shellscript", "datatype": "ebcdic", "extension": ".x-shellscript"}, "TOSVG": {"ttr": 27649, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00\\x14\\x01\\x04\\x12\\x1f\\x01\\x043\\x1f\\x16\\x08\\x00\\x19\\x00\\x1e\\x00\\x00\\xc6\\xc1\\xd1\\xc1@@@@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "2004-04-30T00:00:00", "modifydate": "2004-11-26T16:08:14", "lines": 25, "newlines": 30, "modlines": 0, "user": "FAJA"}, "text": "#!/bin/sh\n#*********************************************************************\n#**                                                                 **\n#** FUNCTION - This script runs the XALAN XSLT transformer to       **\n#**            transform an XML file into an SVG file.              **\n#**                                                                 **\n#** SYNTAX   - tosvg installdir inputfile inputstylesheet outputfile**\n#**                                                                 **\n#*********************************************************************\n\nJAVA=\"$JAVA_HOME/bin/java -showversion\"\n\nCP='.'\nCP=\"$CP:$JAVA_HOME/lib/classes.zip\"\nCP=\"$CP:xalan.jar\"\nCP=\"$CP:xercesImpl.jar\"\nCP=\"$CP:xml-apis.jar\"\n\nP='org.apache.xalan.xslt.Process'\nO='-EDUMP'\n\ncd $1\nCMD=\"$JAVA -cp $CP $P -in $2 -xsl $3 -out $4 $O\"\necho $CMD\n$CMD\n", "mimetype": "text/x-shellscript", "datatype": "ebcdic", "extension": ".x-shellscript"}, "TOTIFF": {"ttr": 47377, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x07\\x01\\x05\\x02\\x1f\\x01\\x05\\x02\\x1f\\t0\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc6\\xc1\\xd1\\xc1@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-01-21T00:00:00", "modifydate": "2005-01-21T09:30:07", "lines": 31, "newlines": 31, "modlines": 0, "user": "FAJA"}, "text": "#!/bin/sh\n#*********************************************************************\n#**                                                                 **\n#** FUNCTION - This script runs the BATIK rasterizer to convert an  **\n#**            SVG file into a TIFF image file.                     **\n#**                                                                 **\n#** SYNTAX   - totiff installdir inputfile                          **\n#**                                                                 **\n#** NOTES    - 1. The -scriptSecurityOff option is a workaround for **\n#**               z/OS Java 1.4 whose security manager does not     **\n#**               allow java programs to set system properties      **\n#**               without prior authorisation. You should really    **\n#**               grant appropriate authority instead of disabling  **\n#**               script security.                                  **\n#*********************************************************************\n\nJAVA=\"$JAVA_HOME/bin/java -showversion\"\n\nCP='.'\nCP=\"$CP:$JAVA_HOME/lib/classes.zip\"\nCP=\"$CP:batik-libs.jar\"\n\nH=\"-Djava.awt.headless=true\"\nR='batik-rasterizer.jar'\nO='-m image/tiff -scriptSecurityOff'\n\ncd $1\n\nCMD=\"$JAVA -cp $CP $H -jar $R $O $2\"\necho $CMD\n$CMD\n", "mimetype": "text/x-shellscript", "datatype": "ebcdic", "extension": ".x-shellscript"}, "XML": {"ttr": 48387, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00Q\\x01\\x05\\x02\\x1f\\x01\\x05\\x02\\x1f\\t1\\x02+\\x02+\\x00\\x00\\xc6\\xc1\\xd1\\xc1@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-01-21T00:00:00", "modifydate": "2005-01-21T09:31:51", "lines": 555, "newlines": 555, "modlines": 0, "user": "FAJA"}, "text": "<?xml version=\"1.0\" encoding=\"EBCDIC-CP-US\"?>\n<!--<chart      xmlns=\"http://fleabag.org/lineChart\"-->\n<chart debug=\"false\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://fleabag.org/lineChart\n                           file:lineChart.xsd\">\n\n\n    <title>Commercial System Performance</title>\n    <series>\n        <title>Batch</title>\n        <datum y=\"30.14\"/>\n        <datum y=\"32.97\"/>\n        <datum y=\"59.78\"/>\n        <datum y=\"33.41\"/>\n        <datum y=\"14.81\"/>\n        <datum y=\"13.17\"/>\n        <datum y=\" 2.67\"/>\n        <datum y=\" 5.78\"/>\n        <datum y=\" 3.56\"/>\n        <datum y=\" 5.63\"/>\n        <datum y=\"10.16\"/>\n        <datum y=\"11.81\"/>\n        <datum y=\" 4.71\"/>\n        <datum y=\" 1.41\"/>\n        <datum y=\" 1.21\"/>\n        <datum y=\" 0.55\"/>\n        <datum y=\" 2.14\"/>\n        <datum y=\" 1.72\"/>\n        <datum y=\" 6.52\"/>\n        <datum y=\" 7.19\"/>\n        <datum y=\"13.53\"/>\n        <datum y=\" 9.71\"/>\n        <datum y=\" 4.37\"/>\n        <datum y=\"21.46\"/>\n        <datum y=\"24.30\"/>\n        <datum y=\" 7.44\"/>\n        <datum y=\" 2.17\"/>\n        <datum y=\"33.34\"/>\n        <datum y=\" 6.81\"/>\n        <datum y=\" 3.69\"/>\n        <datum y=\"10.75\"/>\n        <datum y=\"25.41\"/>\n        <datum y=\"19.92\"/>\n        <datum y=\"10.04\"/>\n        <datum y=\" 2.83\"/>\n        <datum y=\"14.36\"/>\n        <datum y=\"12.00\"/>\n        <datum y=\" 0.79\"/>\n        <datum y=\"68.22\"/>\n        <datum y=\"50.99\"/>\n        <datum y=\"37.37\"/>\n        <datum y=\"34.68\"/>\n        <datum y=\"31.13\"/>\n        <datum y=\"24.93\"/>\n        <datum y=\"11.02\"/>\n        <datum y=\"15.36\"/>\n        <datum y=\"18.47\"/>\n        <datum y=\"10.99\"/>\n    </series>\n\n    <series>\n        <title>CICS</title>\n        <datum y=\" 0.24\"/>\n        <datum y=\" 0.22\"/>\n        <datum y=\" 0.22\"/>\n        <datum y=\" 0.22\"/>\n        <datum y=\" 0.33\"/>\n        <datum y=\" 0.24\"/>\n        <datum y=\" 0.26\"/>\n        <datum y=\" 0.24\"/>\n        <datum y=\" 0.29\"/>\n        <datum y=\" 0.38\"/>\n        <datum y=\" 0.40\"/>\n        <datum y=\" 0.41\"/>\n        <datum y=\" 0.91\"/>\n        <datum y=\" 0.83\"/>\n        <datum y=\" 0.67\"/>\n        <datum y=\" 1.38\"/>\n        <datum y=\" 5.88\"/>\n        <datum y=\"13.02\"/>\n        <datum y=\"10.87\"/>\n        <datum y=\" 5.56\"/>\n        <datum y=\" 6.62\"/>\n        <datum y=\" 4.63\"/>\n        <datum y=\" 7.52\"/>\n        <datum y=\" 6.04\"/>\n        <datum y=\" 8.30\"/>\n        <datum y=\" 4.96\"/>\n        <datum y=\" 4.73\"/>\n        <datum y=\" 5.00\"/>\n        <datum y=\" 9.28\"/>\n        <datum y=\"10.63\"/>\n        <datum y=\"13.67\"/>\n        <datum y=\" 8.93\"/>\n        <datum y=\"10.11\"/>\n        <datum y=\" 8.72\"/>\n        <datum y=\" 9.78\"/>\n        <datum y=\" 7.81\"/>\n        <datum y=\" 5.68\"/>\n        <datum y=\" 1.80\"/>\n        <datum y=\" 0.74\"/>\n        <datum y=\" 0.35\"/>\n        <datum y=\" 0.31\"/>\n        <datum y=\" 0.36\"/>\n        <datum y=\" 0.38\"/>\n        <datum y=\" 0.36\"/>\n        <datum y=\" 0.32\"/>\n        <datum y=\" 0.27\"/>\n        <datum y=\" 0.25\"/>\n        <datum y=\" 0.26\"/>\n    </series>\n\n    <series>\n        <title>DB2</title>\n        <datum y=\" 0.95\"/>\n        <datum y=\" 1.10\"/>\n        <datum y=\" 1.93\"/>\n        <datum y=\" 1.67\"/>\n        <datum y=\" 0.10\"/>\n        <datum y=\" 0.37\"/>\n        <datum y=\" 0.24\"/>\n        <datum y=\" 0.18\"/>\n        <datum y=\" 0.14\"/>\n        <datum y=\" 0.15\"/>\n        <datum y=\" 1.45\"/>\n        <datum y=\" 4.32\"/>\n        <datum y=\" 1.56\"/>\n        <datum y=\" 0.64\"/>\n        <datum y=\" 0.50\"/>\n        <datum y=\" 0.59\"/>\n        <datum y=\" 1.43\"/>\n        <datum y=\" 1.62\"/>\n        <datum y=\" 3.01\"/>\n        <datum y=\" 3.65\"/>\n        <datum y=\" 3.36\"/>\n        <datum y=\" 2.76\"/>\n        <datum y=\" 3.43\"/>\n        <datum y=\" 5.31\"/>\n        <datum y=\" 6.07\"/>\n        <datum y=\" 2.65\"/>\n        <datum y=\" 3.04\"/>\n        <datum y=\" 5.54\"/>\n        <datum y=\" 3.69\"/>\n        <datum y=\" 4.43\"/>\n        <datum y=\" 4.10\"/>\n        <datum y=\" 3.99\"/>\n        <datum y=\" 3.26\"/>\n        <datum y=\" 2.53\"/>\n        <datum y=\" 1.56\"/>\n        <datum y=\" 1.05\"/>\n        <datum y=\" 1.00\"/>\n        <datum y=\" 1.02\"/>\n        <datum y=\" 1.21\"/>\n        <datum y=\" 1.38\"/>\n        <datum y=\" 1.88\"/>\n        <datum y=\" 1.99\"/>\n        <datum y=\" 2.11\"/>\n        <datum y=\" 1.11\"/>\n        <datum y=\" 0.22\"/>\n        <datum y=\" 0.38\"/>\n        <datum y=\" 0.28\"/>\n        <datum y=\" 0.09\"/>\n    </series>\n    <series>\n        <title>Other</title>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n    </series>\n    <series>\n        <title>PsFI</title>\n        <datum y=\" 0.23\"/>\n        <datum y=\" 0.21\"/>\n        <datum y=\" 0.21\"/>\n        <datum y=\" 0.21\"/>\n        <datum y=\" 0.78\"/>\n        <datum y=\" 0.41\"/>\n        <datum y=\" 0.25\"/>\n        <datum y=\" 0.25\"/>\n        <datum y=\" 0.76\"/>\n        <datum y=\" 0.26\"/>\n        <datum y=\" 0.26\"/>\n        <datum y=\" 0.19\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.82\"/>\n        <datum y=\" 1.60\"/>\n        <datum y=\" 2.72\"/>\n        <datum y=\" 2.85\"/>\n        <datum y=\" 6.50\"/>\n        <datum y=\"15.33\"/>\n        <datum y=\"17.61\"/>\n        <datum y=\"18.12\"/>\n        <datum y=\"22.42\"/>\n        <datum y=\"20.52\"/>\n        <datum y=\"22.90\"/>\n        <datum y=\"24.29\"/>\n        <datum y=\"16.86\"/>\n        <datum y=\"10.10\"/>\n        <datum y=\" 9.04\"/>\n        <datum y=\" 9.23\"/>\n        <datum y=\"17.39\"/>\n        <datum y=\"14.68\"/>\n        <datum y=\"21.18\"/>\n        <datum y=\"19.05\"/>\n        <datum y=\"26.09\"/>\n        <datum y=\"11.42\"/>\n        <datum y=\" 9.23\"/>\n        <datum y=\"10.73\"/>\n        <datum y=\"14.56\"/>\n        <datum y=\" 4.27\"/>\n        <datum y=\" 0.94\"/>\n        <datum y=\" 2.18\"/>\n        <datum y=\" 2.15\"/>\n        <datum y=\" 2.93\"/>\n        <datum y=\" 1.91\"/>\n        <datum y=\" 2.69\"/>\n        <datum y=\" 1.23\"/>\n        <datum y=\" 1.45\"/>\n        <datum y=\" 0.72\"/>\n    </series>\n    <series>\n        <title>PsFN</title>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.01\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.22\"/>\n        <datum y=\" 0.24\"/>\n        <datum y=\" 0.61\"/>\n        <datum y=\" 0.66\"/>\n        <datum y=\" 0.93\"/>\n        <datum y=\" 0.94\"/>\n        <datum y=\" 1.53\"/>\n        <datum y=\" 1.14\"/>\n        <datum y=\" 0.75\"/>\n        <datum y=\"16.97\"/>\n        <datum y=\" 1.39\"/>\n        <datum y=\" 3.01\"/>\n        <datum y=\" 1.13\"/>\n        <datum y=\" 2.41\"/>\n        <datum y=\" 1.44\"/>\n        <datum y=\" 4.01\"/>\n        <datum y=\" 1.44\"/>\n        <datum y=\" 4.56\"/>\n        <datum y=\" 0.88\"/>\n        <datum y=\" 2.47\"/>\n        <datum y=\" 0.30\"/>\n        <datum y=\" 0.42\"/>\n        <datum y=\" 0.23\"/>\n        <datum y=\" 0.22\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n        <datum y=\" 0.00\"/>\n    </series>\n    <series>\n        <title>PsHR</title>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.19\"/>\n        <datum y=\" 0.91\"/>\n        <datum y=\" 1.84\"/>\n        <datum y=\" 1.12\"/>\n        <datum y=\" 1.88\"/>\n        <datum y=\" 2.19\"/>\n        <datum y=\" 1.67\"/>\n        <datum y=\" 3.07\"/>\n        <datum y=\" 1.95\"/>\n        <datum y=\" 4.21\"/>\n        <datum y=\" 6.38\"/>\n        <datum y=\" 0.93\"/>\n        <datum y=\" 2.50\"/>\n        <datum y=\" 2.21\"/>\n        <datum y=\" 2.64\"/>\n        <datum y=\" 2.97\"/>\n        <datum y=\" 5.22\"/>\n        <datum y=\" 2.74\"/>\n        <datum y=\" 0.98\"/>\n        <datum y=\" 0.31\"/>\n        <datum y=\" 0.44\"/>\n        <datum y=\" 0.14\"/>\n        <datum y=\" 0.14\"/>\n        <datum y=\" 0.05\"/>\n        <datum y=\" 0.05\"/>\n        <datum y=\" 0.03\"/>\n        <datum y=\" 0.03\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.02\"/>\n    </series>\n    <series>\n        <title>PsTST</title>\n        <datum y=\" 0.05\"/>\n        <datum y=\" 0.05\"/>\n        <datum y=\" 0.05\"/>\n        <datum y=\" 0.05\"/>\n        <datum y=\" 0.05\"/>\n        <datum y=\" 0.06\"/>\n        <datum y=\" 0.06\"/>\n        <datum y=\" 0.06\"/>\n        <datum y=\" 0.06\"/>\n        <datum y=\" 0.06\"/>\n        <datum y=\" 0.03\"/>\n        <datum y=\" 0.03\"/>\n        <datum y=\" 0.03\"/>\n        <datum y=\" 0.03\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.03\"/>\n        <datum y=\" 0.09\"/>\n        <datum y=\" 0.08\"/>\n        <datum y=\" 1.41\"/>\n        <datum y=\" 0.42\"/>\n        <datum y=\" 0.05\"/>\n        <datum y=\" 0.40\"/>\n        <datum y=\" 0.52\"/>\n        <datum y=\" 1.65\"/>\n        <datum y=\" 1.09\"/>\n        <datum y=\" 0.87\"/>\n        <datum y=\" 2.85\"/>\n        <datum y=\" 0.34\"/>\n        <datum y=\" 0.22\"/>\n        <datum y=\" 2.27\"/>\n        <datum y=\" 5.57\"/>\n        <datum y=\" 0.66\"/>\n        <datum y=\" 0.92\"/>\n        <datum y=\" 0.28\"/>\n        <datum y=\" 0.38\"/>\n        <datum y=\" 0.10\"/>\n        <datum y=\" 0.19\"/>\n        <datum y=\" 0.08\"/>\n        <datum y=\" 0.07\"/>\n        <datum y=\" 0.07\"/>\n        <datum y=\" 0.07\"/>\n        <datum y=\" 0.07\"/>\n        <datum y=\" 0.07\"/>\n        <datum y=\" 0.07\"/>\n        <datum y=\" 0.08\"/>\n        <datum y=\" 0.08\"/>\n        <datum y=\" 0.08\"/>\n        <datum y=\" 0.08\"/>\n    </series>\n    <series>\n        <title>STC</title>\n        <datum y=\" 2.92\"/>\n        <datum y=\" 2.67\"/>\n        <datum y=\" 2.74\"/>\n        <datum y=\" 2.72\"/>\n        <datum y=\" 3.62\"/>\n        <datum y=\"10.92\"/>\n        <datum y=\" 3.27\"/>\n        <datum y=\" 2.84\"/>\n        <datum y=\" 2.91\"/>\n        <datum y=\" 3.00\"/>\n        <datum y=\" 4.46\"/>\n        <datum y=\" 5.76\"/>\n        <datum y=\" 3.24\"/>\n        <datum y=\" 2.77\"/>\n        <datum y=\" 7.94\"/>\n        <datum y=\" 2.83\"/>\n        <datum y=\" 4.89\"/>\n        <datum y=\" 4.41\"/>\n        <datum y=\" 6.14\"/>\n        <datum y=\" 8.14\"/>\n        <datum y=\" 8.19\"/>\n        <datum y=\" 6.52\"/>\n        <datum y=\" 5.47\"/>\n        <datum y=\" 6.56\"/>\n        <datum y=\" 6.47\"/>\n        <datum y=\" 5.51\"/>\n        <datum y=\" 4.91\"/>\n        <datum y=\" 4.50\"/>\n        <datum y=\" 5.21\"/>\n        <datum y=\" 5.58\"/>\n        <datum y=\" 6.31\"/>\n        <datum y=\" 5.84\"/>\n        <datum y=\" 5.63\"/>\n        <datum y=\" 5.66\"/>\n        <datum y=\" 4.71\"/>\n        <datum y=\" 4.07\"/>\n        <datum y=\" 4.37\"/>\n        <datum y=\" 3.23\"/>\n        <datum y=\" 3.63\"/>\n        <datum y=\" 2.67\"/>\n        <datum y=\" 2.74\"/>\n        <datum y=\" 2.57\"/>\n        <datum y=\" 2.81\"/>\n        <datum y=\" 3.21\"/>\n        <datum y=\" 3.07\"/>\n        <datum y=\" 3.63\"/>\n        <datum y=\" 3.85\"/>\n        <datum y=\" 4.64\"/>\n    </series>\n    <series>\n        <title>TSO</title>\n        <datum y=\" 0.03\"/>\n        <datum y=\" 0.04\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.03\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.06\"/>\n        <datum y=\" 0.03\"/>\n        <datum y=\" 0.07\"/>\n        <datum y=\" 0.05\"/>\n        <datum y=\" 0.03\"/>\n        <datum y=\" 0.03\"/>\n        <datum y=\" 0.03\"/>\n        <datum y=\" 0.48\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.08\"/>\n        <datum y=\" 0.20\"/>\n        <datum y=\" 1.34\"/>\n        <datum y=\" 0.96\"/>\n        <datum y=\" 1.04\"/>\n        <datum y=\" 1.16\"/>\n        <datum y=\" 1.38\"/>\n        <datum y=\" 0.89\"/>\n        <datum y=\" 1.47\"/>\n        <datum y=\" 0.91\"/>\n        <datum y=\" 0.67\"/>\n        <datum y=\" 0.78\"/>\n        <datum y=\" 1.20\"/>\n        <datum y=\" 0.51\"/>\n        <datum y=\" 1.11\"/>\n        <datum y=\" 1.75\"/>\n        <datum y=\" 1.55\"/>\n        <datum y=\" 0.70\"/>\n        <datum y=\" 0.89\"/>\n        <datum y=\" 0.90\"/>\n        <datum y=\" 0.15\"/>\n        <datum y=\" 0.20\"/>\n        <datum y=\" 0.14\"/>\n        <datum y=\" 0.03\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.03\"/>\n        <datum y=\" 0.02\"/>\n        <datum y=\" 0.03\"/>\n        <datum y=\" 0.04\"/>\n        <datum y=\" 0.08\"/>\n        <datum y=\" 0.03\"/>\n    </series>\n\n    <axis>\n        <x>\n            <title>Time of Day</title>\n            <interval>\n                <major>12</major>\n                <minor>2</minor>\n            </interval>\n            <label>00:00</label>\n            <label>06:00</label>\n            <label>12:00</label>\n            <label>18:00</label>\n            <label>24:00</label>\n        </x>\n        <y>\n            <title>CPU Busy (%)</title>\n        </y>\n    </axis>\n\n    <layout>\n        <width>800</width>\n        <height>450</height>\n        <south>\n            <legend/>\n        </south>\n    </layout>\n\n    <style>\n        <plotarea>\n            <gradient>\n            </gradient>\n        </plotarea>\n    </style>\n</chart>\n", "mimetype": "text/xml", "datatype": "ebcdic", "extension": ".xml"}, "XSD": {"ttr": 47617, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x07\\x01\\x05\\x02\\x1f\\x01\\x05\\x02\\x1f\\t0\\x02\\xb6\\x02\\xb6\\x00\\x00\\xc6\\xc1\\xd1\\xc1@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-01-21T00:00:00", "modifydate": "2005-01-21T09:30:07", "lines": 694, "newlines": 694, "modlines": 0, "user": "FAJA"}, "text": "<!-- edited with XMLSpy v2005 U (http://www.xmlspy.com) by andrew armstrong (n/a) -->\n<!--\n    Copyright (C) 2004-2005 Andrew J. Armstrong\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n\tAuthor:\n\tAndrew J. Armstrong <andrew_armstrong(at)unwired.com.au>\n -->\n<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:chart=\"http://fleabag.org/lineChart\" targetNamespace=\"http://fleabag.org/lineChart\" elementFormDefault=\"unqualified\" attributeFormDefault=\"unqualified\">\n  <xsd:element name=\"chart\">\n    <xsd:annotation>\n      <xsd:documentation>A line chart</xsd:documentation>\n    </xsd:annotation>\n    <xsd:complexType>\n      <xsd:sequence>\n        <xsd:element name=\"title\" minOccurs=\"0\">\n          <xsd:annotation>\n            <xsd:documentation>The chart title</xsd:documentation>\n          </xsd:annotation>\n        </xsd:element>\n        <xsd:element name=\"series\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n          <xsd:annotation>\n            <xsd:documentation>Each series is a named list of datum points</xsd:documentation>\n          </xsd:annotation>\n          <xsd:complexType>\n            <xsd:complexContent>\n              <xsd:extension base=\"chart:seriesType\"/>\n            </xsd:complexContent>\n          </xsd:complexType>\n        </xsd:element>\n        <xsd:element name=\"axis\" minOccurs=\"0\">\n          <xsd:annotation>\n            <xsd:documentation>Titles and options pertinent to each axis</xsd:documentation>\n          </xsd:annotation>\n          <xsd:complexType>\n            <xsd:sequence>\n              <xsd:element name=\"x\" type=\"chart:axisType\" minOccurs=\"0\"/>\n              <xsd:element name=\"y\" type=\"chart:axisType\" minOccurs=\"0\"/>\n              <xsd:element name=\"x2\" type=\"chart:axisType\" minOccurs=\"0\"/>\n              <xsd:element name=\"y2\" type=\"chart:axisType\" minOccurs=\"0\"/>\n            </xsd:sequence>\n          </xsd:complexType>\n        </xsd:element>\n        <xsd:element name=\"layout\" type=\"chart:layoutType\" minOccurs=\"0\">\n          <xsd:annotation>\n            <xsd:documentation>Dimensions and options that affect the layout of the chart</xsd:documentation>\n          </xsd:annotation>\n        </xsd:element>\n        <xsd:element name=\"style\" type=\"chart:styleType\" minOccurs=\"0\">\n          <xsd:annotation>\n            <xsd:documentation>CSS styles that affect the rendering of the chart</xsd:documentation>\n          </xsd:annotation>\n        </xsd:element>\n      </xsd:sequence>\n      <xsd:attribute name=\"debug\" type=\"xsd:boolean\" use=\"optional\" default=\"false\"/>\n    </xsd:complexType>\n  </xsd:element>\n  <xsd:complexType name=\"seriesType\">\n    <xsd:annotation>\n      <xsd:documentation>A series of data points</xsd:documentation>\n    </xsd:annotation>\n    <xsd:sequence>\n      <xsd:element name=\"title\" type=\"xsd:string\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The series title. This would most likely appear in the legend, or as a tooltip in the user's svg viewer.</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n      <xsd:element name=\"datum\" type=\"chart:datumType\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n        <xsd:annotation>\n          <xsd:documentation>The x, y, x2, or y2 determines which axis pair to plot against. The text value (if present) of a datum is used as the annotation text.</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n    </xsd:sequence>\n    <xsd:attribute name=\"style\" type=\"xsd:string\" use=\"optional\"/>\n    <xsd:attribute name=\"visible\" type=\"xsd:boolean\" use=\"optional\" default=\"true\"/>\n  </xsd:complexType>\n  <xsd:complexType name=\"datumType\" mixed=\"true\">\n    <xsd:annotation>\n      <xsd:documentation>An individual data point</xsd:documentation>\n    </xsd:annotation>\n    <xsd:attribute name=\"x\" type=\"xsd:decimal\" use=\"optional\"/>\n    <xsd:attribute name=\"y\" type=\"xsd:decimal\" use=\"optional\"/>\n    <xsd:attribute name=\"x2\" type=\"xsd:decimal\" use=\"optional\"/>\n    <xsd:attribute name=\"y2\" type=\"xsd:decimal\" use=\"optional\"/>\n  </xsd:complexType>\n  <xsd:complexType name=\"axisType\">\n    <xsd:annotation>\n      <xsd:documentation>An axis of the chart</xsd:documentation>\n    </xsd:annotation>\n    <xsd:sequence>\n      <xsd:element name=\"title\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The axis title</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n      <xsd:element name=\"interval\" type=\"chart:intervalType\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>Labels are placed at each major interval. Gridlines are placed at each major and/or minor interval.</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n      <xsd:element name=\"range\" type=\"chart:rangeType\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The range of plotable values  for this axis</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n      <xsd:element name=\"gridline\" type=\"chart:gridlineType\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>This specifies whether major and/or minor gridlines are to be drawn. The 'interval' tag specifies where they are drawn.</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n      <xsd:element name=\"reference\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n        <xsd:annotation>\n          <xsd:documentation>A reference line is a vertical or horizontal line drawn at the specified x- or y-value (respectively) with the specified style</xsd:documentation>\n        </xsd:annotation>\n        <xsd:complexType>\n          <xsd:simpleContent>\n            <xsd:extension base=\"xsd:string\">\n              <xsd:attribute name=\"at\" type=\"xsd:decimal\" use=\"required\">\n                <xsd:annotation>\n                  <xsd:documentation>The position on the axis at which this reference line is to be drawn</xsd:documentation>\n                </xsd:annotation>\n              </xsd:attribute>\n              <xsd:attribute name=\"style\" type=\"xsd:string\" use=\"optional\">\n                <xsd:annotation>\n                  <xsd:documentation>The style of this reference line (overrides the default specified in the style element)</xsd:documentation>\n                </xsd:annotation>\n              </xsd:attribute>\n            </xsd:extension>\n          </xsd:simpleContent>\n        </xsd:complexType>\n      </xsd:element>\n      <xsd:element name=\"label\" type=\"xsd:string\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n        <xsd:annotation>\n          <xsd:documentation>Each label is drawn on the axis at the specified major interval</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n    </xsd:sequence>\n  </xsd:complexType>\n  <xsd:complexType name=\"intervalType\">\n    <xsd:annotation>\n      <xsd:documentation>An interval between gridlines</xsd:documentation>\n    </xsd:annotation>\n    <xsd:sequence>\n      <xsd:element name=\"major\" type=\"xsd:decimal\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The interval between major gridlines.</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n      <xsd:element name=\"minor\" type=\"xsd:decimal\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The interval between minor gridlines</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n    </xsd:sequence>\n  </xsd:complexType>\n  <xsd:complexType name=\"rangeType\">\n    <xsd:annotation>\n      <xsd:documentation>The range of values covered by an axis</xsd:documentation>\n    </xsd:annotation>\n    <xsd:sequence>\n      <xsd:element name=\"min\" type=\"xsd:decimal\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The minimum value for this axis which is also a multiple of the major interval</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n      <xsd:element name=\"max\" type=\"xsd:decimal\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The maximum value for this axis which is also a multiple of the major interval</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n    </xsd:sequence>\n  </xsd:complexType>\n  <xsd:complexType name=\"gridlineType\">\n    <xsd:annotation>\n      <xsd:documentation>Whether gridlines are displayed (boolean)</xsd:documentation>\n    </xsd:annotation>\n    <xsd:sequence>\n      <xsd:element name=\"major\" type=\"xsd:boolean\" default=\"true\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>True if major gridlines are wanted (default is true)</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n      <xsd:element name=\"minor\" type=\"xsd:boolean\" default=\"false\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>True if minor gridlines are wanted (default is false)</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n    </xsd:sequence>\n  </xsd:complexType>\n  <xsd:complexType name=\"styleType\" mixed=\"true\">\n    <xsd:annotation>\n      <xsd:documentation>The visual appearance of various parts of the chart (as defined by using CSS styles). The default style for the entire chart can be specified as text of the style element. It is overridden by the styles specified on children of the\n    </xsd:annotation>\n    <xsd:sequence>\n      <xsd:element name=\"title\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The style of the chart title</xsd:documentation>\n        </xsd:annotation>\n        <xsd:complexType>\n          <xsd:sequence>\n            <xsd:element name=\"x\">\n              <xsd:annotation>\n                <xsd:documentation>The x-axis title style</xsd:documentation>\n              </xsd:annotation>\n            </xsd:element>\n            <xsd:element name=\"y\">\n              <xsd:annotation>\n                <xsd:documentation>The y-axis title style</xsd:documentation>\n              </xsd:annotation>\n            </xsd:element>\n            <xsd:element name=\"x2\">\n              <xsd:annotation>\n                <xsd:documentation>The x2-axis title style</xsd:documentation>\n              </xsd:annotation>\n            </xsd:element>\n            <xsd:element name=\"y2\">\n              <xsd:annotation>\n                <xsd:documentation>The y2-axis title style</xsd:documentation>\n              </xsd:annotation>\n            </xsd:element>\n          </xsd:sequence>\n        </xsd:complexType>\n      </xsd:element>\n      <xsd:element name=\"grid\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The default gridline style</xsd:documentation>\n        </xsd:annotation>\n        <xsd:complexType mixed=\"true\">\n          <xsd:complexContent mixed=\"true\">\n            <xsd:extension base=\"chart:linestyleType\"/>\n          </xsd:complexContent>\n        </xsd:complexType>\n      </xsd:element>\n      <xsd:element name=\"reference\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The default reference line style</xsd:documentation>\n        </xsd:annotation>\n        <xsd:complexType mixed=\"true\">\n          <xsd:complexContent mixed=\"true\">\n            <xsd:extension base=\"chart:linestyleType\"/>\n          </xsd:complexContent>\n        </xsd:complexType>\n      </xsd:element>\n      <xsd:element name=\"label\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The default axis label style</xsd:documentation>\n        </xsd:annotation>\n        <xsd:complexType mixed=\"true\">\n          <xsd:sequence>\n            <xsd:element name=\"x\" type=\"chart:labelStyleType\" minOccurs=\"0\">\n              <xsd:annotation>\n                <xsd:documentation>The x-axis label style</xsd:documentation>\n              </xsd:annotation>\n            </xsd:element>\n            <xsd:element name=\"y\" type=\"chart:labelStyleType\" minOccurs=\"0\">\n              <xsd:annotation>\n                <xsd:documentation>The y-axis label style</xsd:documentation>\n              </xsd:annotation>\n            </xsd:element>\n            <xsd:element name=\"x2\" type=\"chart:labelStyleType\" minOccurs=\"0\">\n              <xsd:annotation>\n                <xsd:documentation>The x2-axis label style</xsd:documentation>\n              </xsd:annotation>\n            </xsd:element>\n            <xsd:element name=\"y2\" type=\"chart:labelStyleType\" minOccurs=\"0\">\n              <xsd:annotation>\n                <xsd:documentation>The y2-axis label style</xsd:documentation>\n              </xsd:annotation>\n            </xsd:element>\n          </xsd:sequence>\n        </xsd:complexType>\n      </xsd:element>\n      <xsd:element name=\"plotarea\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The plotarea background style</xsd:documentation>\n        </xsd:annotation>\n        <xsd:complexType mixed=\"true\">\n          <xsd:sequence>\n            <xsd:element name=\"border\" type=\"xsd:string\" minOccurs=\"0\">\n              <xsd:annotation>\n                <xsd:documentation>The plotarea border style</xsd:documentation>\n              </xsd:annotation>\n            </xsd:element>\n            <xsd:element name=\"color\" minOccurs=\"0\">\n              <xsd:annotation>\n                <xsd:documentation>The background color. Takes precedence over the default (white).</xsd:documentation>\n              </xsd:annotation>\n              <xsd:complexType>\n                <xsd:simpleContent>\n                  <xsd:extension base=\"xsd:string\">\n                    <xsd:attribute name=\"opacity\" use=\"optional\" default=\"1\">\n                      <xsd:simpleType>\n                        <xsd:restriction base=\"xsd:decimal\">\n                          <xsd:minInclusive value=\"0\"/>\n                          <xsd:maxInclusive value=\"1\"/>\n                        </xsd:restriction>\n                      </xsd:simpleType>\n                    </xsd:attribute>\n                  </xsd:extension>\n                </xsd:simpleContent>\n              </xsd:complexType>\n            </xsd:element>\n            <xsd:element name=\"gradient\" minOccurs=\"0\">\n              <xsd:annotation>\n                <xsd:documentation>The background gradient. Takes precedence over 'color'</xsd:documentation>\n              </xsd:annotation>\n              <xsd:complexType>\n                <xsd:sequence>\n                  <xsd:element name=\"color\" maxOccurs=\"unbounded\">\n                    <xsd:annotation>\n                      <xsd:documentation>A gradient consists of one or more colors at percentage offsets into the gradient</xsd:documentation>\n                    </xsd:annotation>\n                    <xsd:complexType mixed=\"true\">\n                      <xsd:attribute name=\"offset\" type=\"xsd:string\" use=\"required\">\n                        <xsd:annotation>\n                          <xsd:documentation source=\"This is the percentage offset into the gradient that the color should take effect. The number can be between 0 and 1 (or a percentage from 0% to 100%)\"/>\n                        </xsd:annotation>\n                      </xsd:attribute>\n                      <xsd:attribute name=\"opacity\" use=\"optional\" default=\"1\">\n                        <xsd:annotation>\n                          <xsd:documentation source=\"This is the opacity of the color between 0 (transparent) and 1 (opaque). The default is 1 (opaque).\"/>\n                        </xsd:annotation>\n                        <xsd:simpleType>\n                          <xsd:restriction base=\"xsd:decimal\">\n                            <xsd:minInclusive value=\"0\"/>\n                            <xsd:maxInclusive value=\"1\"/>\n                          </xsd:restriction>\n                        </xsd:simpleType>\n                      </xsd:attribute>\n                    </xsd:complexType>\n                  </xsd:element>\n                </xsd:sequence>\n                <xsd:attribute name=\"x1\" type=\"xsd:string\" use=\"optional\" default=\"0%\"/>\n                <xsd:attribute name=\"y1\" type=\"xsd:string\" use=\"optional\" default=\"0%\"/>\n                <xsd:attribute name=\"x2\" type=\"xsd:string\" use=\"optional\" default=\"0%\"/>\n                <xsd:attribute name=\"y2\" type=\"xsd:string\" use=\"optional\" default=\"100%\"/>\n                <xsd:attribute name=\"spreadMethod\" use=\"optional\" default=\"pad\">\n                  <xsd:simpleType>\n                    <xsd:restriction base=\"xsd:string\">\n                      <xsd:enumeration value=\"pad\"/>\n                      <xsd:enumeration value=\"repeat\"/>\n                      <xsd:enumeration value=\"reflect\"/>\n                    </xsd:restriction>\n                  </xsd:simpleType>\n                </xsd:attribute>\n              </xsd:complexType>\n            </xsd:element>\n            <xsd:element name=\"picture\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n              <xsd:annotation>\n                <xsd:documentation>The background picture. Takes precedence over 'gradient'</xsd:documentation>\n              </xsd:annotation>\n              <xsd:complexType>\n                <xsd:simpleContent>\n                  <xsd:extension base=\"xsd:string\">\n                    <xsd:attribute name=\"opacity\" use=\"optional\" default=\"1\">\n                      <xsd:simpleType>\n                        <xsd:restriction base=\"xsd:decimal\">\n                          <xsd:minInclusive value=\"0\"/>\n                          <xsd:maxInclusive value=\"1\"/>\n                          <xsd:pattern value=\"\"/>\n                        </xsd:restriction>\n                      </xsd:simpleType>\n                    </xsd:attribute>\n                    <xsd:attribute name=\"location\" use=\"optional\" default=\"stretch\">\n                      <xsd:simpleType>\n                        <xsd:restriction base=\"xsd:string\">\n                          <xsd:enumeration value=\"stretch\"/>\n                          <xsd:enumeration value=\"tile\"/>\n                          <xsd:enumeration value=\"left\"/>\n                          <xsd:enumeration value=\"right\"/>\n                          <xsd:enumeration value=\"top\"/>\n                          <xsd:enumeration value=\"bottom\"/>\n                          <xsd:enumeration value=\"topleft\"/>\n                          <xsd:enumeration value=\"topright\"/>\n                          <xsd:enumeration value=\"bottomleft\"/>\n                          <xsd:enumeration value=\"bottomright\"/>\n                          <xsd:enumeration value=\"center\"/>\n                          <xsd:enumeration value=\"centre\"/>\n                        </xsd:restriction>\n                      </xsd:simpleType>\n                    </xsd:attribute>\n                    <xsd:attribute name=\"width\" type=\"xsd:decimal\" use=\"optional\"/>\n                    <xsd:attribute name=\"height\" type=\"xsd:decimal\" use=\"optional\"/>\n                  </xsd:extension>\n                </xsd:simpleContent>\n              </xsd:complexType>\n            </xsd:element>\n          </xsd:sequence>\n        </xsd:complexType>\n      </xsd:element>\n      <xsd:element name=\"annotation\" minOccurs=\"0\">\n        <xsd:complexType>\n          <xsd:sequence>\n            <xsd:element name=\"marker\" type=\"xsd:string\" minOccurs=\"0\">\n              <xsd:annotation>\n                <xsd:documentation>The annotation marker style</xsd:documentation>\n              </xsd:annotation>\n            </xsd:element>\n            <xsd:element name=\"text\" type=\"xsd:string\" minOccurs=\"0\">\n              <xsd:annotation>\n                <xsd:documentation>The annotation text style</xsd:documentation>\n              </xsd:annotation>\n            </xsd:element>\n          </xsd:sequence>\n        </xsd:complexType>\n      </xsd:element>\n      <xsd:element name=\"series\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The data from which the color for each series is to be computed</xsd:documentation>\n        </xsd:annotation>\n        <xsd:complexType>\n          <xsd:sequence>\n            <xsd:element name=\"hue\" minOccurs=\"0\">\n              <xsd:complexType>\n                <xsd:sequence>\n                  <xsd:element name=\"initial\" default=\"90\" minOccurs=\"0\">\n                    <xsd:annotation>\n                      <xsd:documentation>The hue to begin generating series colors from</xsd:documentation>\n                    </xsd:annotation>\n                    <xsd:simpleType>\n                      <xsd:restriction base=\"xsd:decimal\">\n                        <xsd:minInclusive value=\"0\"/>\n                        <xsd:maxInclusive value=\"360\"/>\n                      </xsd:restriction>\n                    </xsd:simpleType>\n                  </xsd:element>\n                  <xsd:element name=\"step\" type=\"xsd:decimal\" minOccurs=\"0\">\n                    <xsd:annotation>\n                      <xsd:documentation>The number added to the previous hue to generate the hue for the next series</xsd:documentation>\n                    </xsd:annotation>\n                  </xsd:element>\n                </xsd:sequence>\n              </xsd:complexType>\n            </xsd:element>\n            <xsd:element name=\"saturation\" type=\"chart:sampleType\" minOccurs=\"0\"/>\n            <xsd:element name=\"brightness\" type=\"chart:sampleType\" minOccurs=\"0\"/>\n          </xsd:sequence>\n        </xsd:complexType>\n      </xsd:element>\n    </xsd:sequence>\n  </xsd:complexType>\n  <xsd:complexType name=\"layoutType\">\n    <xsd:annotation>\n      <xsd:documentation>The positiions of various parts of the chart</xsd:documentation>\n    </xsd:annotation>\n    <xsd:sequence>\n      <xsd:element name=\"width\" type=\"xsd:nonNegativeInteger\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The desired width of the chart</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n      <xsd:element name=\"height\" type=\"xsd:nonNegativeInteger\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The desired height of the chart</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n      <xsd:element name=\"margin\" type=\"xsd:nonNegativeInteger\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The desired margin around the chart</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n      <xsd:element name=\"title\" type=\"chart:sizeType\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The chart title height (any width is ignored)</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n      <xsd:element name=\"north\" type=\"chart:areaType\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The area at the top of the chart</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n      <xsd:element name=\"south\" type=\"chart:areaType\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The area at the bottom of the chart</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n      <xsd:element name=\"east\" type=\"chart:areaType\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The area at the right of the chart</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n      <xsd:element name=\"west\" type=\"chart:areaType\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The area at the left of the chart</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n    </xsd:sequence>\n  </xsd:complexType>\n  <xsd:complexType name=\"areaType\">\n    <xsd:annotation>\n      <xsd:documentation>An area of the chart (north, south, east, west)</xsd:documentation>\n    </xsd:annotation>\n    <xsd:sequence>\n      <xsd:element name=\"title\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The size of the title area</xsd:documentation>\n        </xsd:annotation>\n        <xsd:complexType>\n          <xsd:complexContent>\n            <xsd:extension base=\"chart:sizeType\"/>\n          </xsd:complexContent>\n        </xsd:complexType>\n      </xsd:element>\n      <xsd:element name=\"label\" type=\"chart:labelType\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The size of the axis labels area</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n      <xsd:element name=\"legend\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The presence of this tag indicates that a legend is wanted in this area</xsd:documentation>\n        </xsd:annotation>\n        <xsd:complexType>\n          <xsd:complexContent>\n            <xsd:extension base=\"chart:legendType\"/>\n          </xsd:complexContent>\n        </xsd:complexType>\n      </xsd:element>\n    </xsd:sequence>\n  </xsd:complexType>\n  <xsd:complexType name=\"sampleType\">\n    <xsd:annotation>\n      <xsd:documentation>A color sample</xsd:documentation>\n    </xsd:annotation>\n    <xsd:sequence>\n      <xsd:element name=\"min\" default=\"0.5\" minOccurs=\"0\">\n        <xsd:simpleType>\n          <xsd:restriction base=\"xsd:decimal\">\n            <xsd:minInclusive value=\"0\"/>\n            <xsd:maxInclusive value=\"1\"/>\n          </xsd:restriction>\n        </xsd:simpleType>\n      </xsd:element>\n      <xsd:element name=\"max\" default=\"1.0\" minOccurs=\"0\">\n        <xsd:simpleType>\n          <xsd:restriction base=\"xsd:decimal\">\n            <xsd:minInclusive value=\"0\"/>\n            <xsd:maxInclusive value=\"1\"/>\n          </xsd:restriction>\n        </xsd:simpleType>\n      </xsd:element>\n      <xsd:element name=\"levels\" default=\"3\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The number of samples (between min and max) to cycle through when generating the colors for each series</xsd:documentation>\n        </xsd:annotation>\n        <xsd:simpleType>\n          <xsd:restriction base=\"xsd:integer\">\n            <xsd:minInclusive value=\"1\"/>\n          </xsd:restriction>\n        </xsd:simpleType>\n      </xsd:element>\n    </xsd:sequence>\n  </xsd:complexType>\n  <xsd:complexType name=\"legendType\">\n    <xsd:annotation>\n      <xsd:documentation>The chart legend</xsd:documentation>\n    </xsd:annotation>\n    <xsd:complexContent>\n      <xsd:extension base=\"chart:sizeType\">\n        <xsd:sequence minOccurs=\"0\">\n          <xsd:element name=\"columns\" default=\"1\" minOccurs=\"0\">\n            <xsd:annotation>\n              <xsd:documentation>The number of columns to appear in the legend</xsd:documentation>\n            </xsd:annotation>\n            <xsd:simpleType>\n              <xsd:restriction base=\"xsd:integer\">\n                <xsd:minInclusive value=\"1\"/>\n              </xsd:restriction>\n            </xsd:simpleType>\n          </xsd:element>\n        </xsd:sequence>\n      </xsd:extension>\n    </xsd:complexContent>\n  </xsd:complexType>\n  <xsd:complexType name=\"sizeType\">\n    <xsd:annotation>\n      <xsd:documentation>A dimension (width and/or height)</xsd:documentation>\n    </xsd:annotation>\n    <xsd:sequence minOccurs=\"0\">\n      <xsd:element name=\"width\" type=\"xsd:nonNegativeInteger\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The width of this area (in pixels)</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n      <xsd:element name=\"height\" type=\"xsd:nonNegativeInteger\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The height of this area (in pixels)</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n      <xsd:element name=\"fontsize\" type=\"xsd:nonNegativeInteger\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The height of the font to be used in this area (in pixels)</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n    </xsd:sequence>\n  </xsd:complexType>\n  <xsd:complexType name=\"linestyleType\" mixed=\"true\">\n    <xsd:annotation>\n      <xsd:documentation>A reference line style</xsd:documentation>\n    </xsd:annotation>\n    <xsd:sequence>\n      <xsd:element name=\"vertical\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The default vertical line style</xsd:documentation>\n        </xsd:annotation>\n        <xsd:complexType mixed=\"true\">\n          <xsd:sequence>\n            <xsd:element name=\"major\" type=\"xsd:string\" minOccurs=\"0\">\n              <xsd:annotation>\n                <xsd:documentation>The major vertical line style</xsd:documentation>\n              </xsd:annotation>\n            </xsd:element>\n            <xsd:element name=\"minor\" type=\"xsd:string\" minOccurs=\"0\">\n              <xsd:annotation>\n                <xsd:documentation>The minor vertical line style</xsd:documentation>\n              </xsd:annotation>\n            </xsd:element>\n          </xsd:sequence>\n        </xsd:complexType>\n      </xsd:element>\n      <xsd:element name=\"horizontal\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The default horizontal line style</xsd:documentation>\n        </xsd:annotation>\n        <xsd:complexType mixed=\"true\">\n          <xsd:sequence>\n            <xsd:element name=\"major\" type=\"xsd:string\" minOccurs=\"0\">\n              <xsd:annotation>\n                <xsd:documentation>The major horizontal line style</xsd:documentation>\n              </xsd:annotation>\n            </xsd:element>\n            <xsd:element name=\"minor\" type=\"xsd:string\" minOccurs=\"0\">\n              <xsd:annotation>\n                <xsd:documentation>The minor horizontal line style</xsd:documentation>\n              </xsd:annotation>\n            </xsd:element>\n          </xsd:sequence>\n        </xsd:complexType>\n      </xsd:element>\n    </xsd:sequence>\n  </xsd:complexType>\n  <xsd:complexType name=\"labelType\">\n    <xsd:annotation>\n      <xsd:documentation>A rotatable label</xsd:documentation>\n    </xsd:annotation>\n    <xsd:sequence minOccurs=\"0\">\n      <xsd:element name=\"width\" type=\"xsd:nonNegativeInteger\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The width of the label area (used only for East and West areas)</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n      <xsd:element name=\"height\" type=\"xsd:nonNegativeInteger\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The height of the label area (used only for North and South areas)</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n      <xsd:element name=\"fontsize\" type=\"xsd:nonNegativeInteger\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The height of the font to be used for these labels (in pixels)</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n      <xsd:element name=\"rotation\" type=\"xsd:decimal\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The rotation to be applied to each label in degrees (positive is clockwise)</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n    </xsd:sequence>\n  </xsd:complexType>\n  <xsd:complexType name=\"labelStyleType\" mixed=\"true\">\n    <xsd:annotation>\n      <xsd:documentation>A css style, and optional SVG number format, for a label</xsd:documentation>\n    </xsd:annotation>\n    <xsd:sequence minOccurs=\"0\">\n      <xsd:element name=\"format\" type=\"xsd:string\" minOccurs=\"0\">\n        <xsd:annotation>\n          <xsd:documentation>The SVG number format to be used for this label. For example: #0.##</xsd:documentation>\n        </xsd:annotation>\n      </xsd:element>\n    </xsd:sequence>\n  </xsd:complexType>\n</xsd:schema>\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XSL": {"ttr": 47873, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x07\\x01\\x05\\x02\\x1f\\x01\\x05\\x02\\x1f\\t0\\x08\\xdf\\x08\\xdf\\x00\\x00\\xc6\\xc1\\xd1\\xc1@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2005-01-21T00:00:00", "modifydate": "2005-01-21T09:30:07", "lines": 2271, "newlines": 2271, "modlines": 0, "user": "FAJA"}, "text": "<?xml version=\"1.0\" encoding=\"ebcdic-cp-us\"?>\n<!--\n    Line Chart Transformer 1.1.36\n    Copyright (C) 2004-2005 Andrew J. Armstrong\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n\tAuthor:\n\tAndrew J. Armstrong <andrew_armstrong(at)unwired.com.au>\n-->\n<xsl:stylesheet version=\"1.1\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n    <!-- Hideous Hack:\n         When using: Adobe SVG Viewer plugin 3 (or the pre-release 6) to view SVG in Internet Explorer\n         And:        You want to serve out the SVG created by lineChart.xsl from a web server\n         Then:       You should invoke the xslt transformation processor with a user-defined\n                     parameter called \"protocol\" set to \"http:\" ...the colon is required.\n         This will:  Prefix any referenced resource URLs (for example, image file names) with \"http:\"\n         Example:    java org.apache.xalan.xslt.Process -in file.xml -xsl lineChart.xsl -out file.svg -param protocol http:\n         Fixes:      Adobe SVG Viewer not handling relative URLs properly.\n    -->\n    <xsl:param name=\"protocol\"/>\n\n    <xsl:output method=\"xml\"\n        version=\"1.0\"\n        encoding=\"utf-8\"\n        doctype-public=\"-//W3C//DTD SVG 1.1//EN\"\n        doctype-system=\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"\n        indent=\"yes\"\n        />\n\n    <xsl:template name=\"getValueOrDefault\">\n        <xsl:param name=\"path\"/>\n        <xsl:param name=\"default\" select=\"0\"/>\n        <xsl:choose>\n            <xsl:when test=\"normalize-space($path) != ''\">\n                <xsl:value-of select=\"normalize-space($path)\"/>\n            </xsl:when>\n            <xsl:otherwise><xsl:value-of select=\"$default\"/></xsl:otherwise>\n        </xsl:choose>\n    </xsl:template>\n\n    <xsl:template name=\"getNonZeroNumber\">\n        <xsl:param name=\"n\"/>\n        <xsl:param name=\"default\"/>\n        <xsl:choose>\n            <xsl:when test=\"string(number($n)) = 'NaN' or $n = 0\"><xsl:value-of select=\"$default\"/></xsl:when>\n            <xsl:otherwise><xsl:value-of select=\"$n\"/></xsl:otherwise>\n        </xsl:choose>\n    </xsl:template>\n\n\n    <xsl:variable name=\"inset\" select=\"5\"/>                                     <!-- Gap size when a gap is needed -->\n    <xsl:variable name=\"defaultMarginSize\" select=\"10\"/>                        <!-- Size of the margin around the entire chart -->\n    <xsl:variable name=\"defaultChartTitleHeight\" select=\"40\"/>                  <!-- Height of the chart title area -->\n    <xsl:variable name=\"defaultChartTitleFontSize\" select=\"40\"/>                <!-- Height of the font within the chart title area -->\n    <xsl:variable name=\"defaultTitleHeight\" select=\"20\"/>                       <!-- Height of the axis title area -->\n    <xsl:variable name=\"defaultTitleFontSize\" select=\"20\"/>                     <!-- Height of the font within the axis title area -->\n    <xsl:variable name=\"defaultLabelHeight\" select=\"20\"/>                       <!-- Height of the label area -->\n    <xsl:variable name=\"defaultLabelFontSize\" select=\"16\"/>                     <!-- Height of the font within the label area -->\n    <xsl:variable name=\"defaultLabelRotation\" select=\"0\"/>                      <!-- Label rotation in degrees (positive is clockwise) -->\n    <xsl:variable name=\"defaultLegendEntryHeight\" select=\"12\"/>                 <!-- Height of a legend entry -->\n    <xsl:variable name=\"defaultLegendEntryWidth\" select=\"$chartWidth div 5\"/>   <!-- Width of a legend entry -->\n\n    <xsl:variable name=\"debugOpacity\">0.15</xsl:variable>\n    <xsl:variable name=\"debugStyle\">stroke-opacity:<xsl:value-of select=\"$debugOpacity\"/>;fill-opacity:<xsl:value-of select=\"$debugOpacity\"/></xsl:variable>\n\n    <xsl:variable name=\"chartHeight\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/height/text()\"/>\n            <xsl:with-param name=\"default\" select=\"600\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"chartWidth\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/width/text()\"/>\n            <xsl:with-param name=\"default\" select=\"800\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"chartMargin\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/margin/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultMarginSize\"/>\n        </xsl:call-template>\n    </xsl:variable>\n\n    <xsl:variable name=\"chartTitleHeight\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/title/height/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultChartTitleHeight\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"chartTitleFontSize\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/title/fontsize/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultChartTitleFontSize\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"northTitleHeight\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/north/title/height/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultTitleHeight\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"northTitleFontSize\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/north/title/fontsize/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultTitleFontSize\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"northLabelHeight\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/north/label/height/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultLabelHeight\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"northLabelFontSize\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/north/label/fontsize/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultLabelFontSize\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"northLabelRotation\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/north/label/rotation/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultLabelRotation\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"northHeight\" select=\"$chartMargin + $chartTitleHeight + $northTitleHeight + $northLabelHeight + $inset\"/>\n\n\n    <xsl:variable name=\"southLabelHeight\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/south/label/height/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultLabelHeight\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"southLabelFontSize\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/south/label/fontsize/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultLabelFontSize\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"southLabelRotation\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/south/label/rotation/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultLabelRotation\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"southTitleHeight\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/south/title/height/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultTitleHeight\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"southTitleFontSize\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/south/title/fontsize/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultTitleFontSize\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"southLegendHeight\">\n        <xsl:variable name=\"legendRows\" select=\"1 + floor((count(/chart/series) - 1) div $southLegendColumns)\"/>\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/south/legend/height/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$legendRows * $defaultLegendEntryHeight\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"southLegendColumns\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/south/legend/columns/text()\"/>\n            <xsl:with-param name=\"default\" select=\"4\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"southLegendDisplayHeight\">\n        <xsl:choose>\n            <xsl:when test=\"//layout/south/legend\">\n                <xsl:value-of select=\"$southLegendHeight\"/>\n            </xsl:when>\n            <xsl:otherwise>0</xsl:otherwise>\n        </xsl:choose>\n    </xsl:variable>\n    <xsl:variable name=\"southHeight\" select=\"$chartMargin + $southLegendDisplayHeight + $inset + $southTitleHeight + $southLabelHeight + $inset\"/>\n\n    <xsl:variable name=\"eastLabelWidth\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/east/label/width/text()\"/>\n            <xsl:with-param name=\"default\" select=\"50\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"eastLabelHeight\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/east/label/height/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultLabelHeight\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"eastLabelFontSize\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/east/label/fontsize/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultLabelFontSize\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"eastLabelRotation\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/east/label/rotation/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultLabelRotation\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"eastTitleHeight\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/east/title/height/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultTitleHeight\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"eastTitleFontSize\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/east/title/fontsize/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultTitleFontSize\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"eastLegendEntryWidth\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/east/legend/width/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$eastLegendColumns * $defaultLegendEntryWidth\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"eastLegendColumns\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/east/legend/columns/text()\"/>\n            <xsl:with-param name=\"default\" select=\"1\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"eastLegendDisplayWidth\">\n        <xsl:choose>\n            <xsl:when test=\"//layout/east/legend\">\n                <xsl:value-of select=\"$eastLegendEntryWidth\"/>\n            </xsl:when>\n            <xsl:otherwise>0</xsl:otherwise>\n        </xsl:choose>\n    </xsl:variable>\n    <xsl:variable name=\"eastWidth\" select=\"$inset + $eastLabelWidth + $eastTitleHeight + $inset + $eastLegendDisplayWidth + $chartMargin\"/>\n\n    <xsl:variable name=\"westTitleHeight\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/west/title/height/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultTitleHeight\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"westTitleFontSize\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/west/title/fontsize/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultTitleFontSize\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"westLabelWidth\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/west/label/width/text()\"/>\n            <xsl:with-param name=\"default\" select=\"50\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"westLabelHeight\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/west/label/height/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultLabelHeight\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"westLabelFontSize\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/west/label/fontsize/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultLabelFontSize\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"westLabelRotation\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/layout/west/label/rotation/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultLabelRotation\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"westWidth\" select=\"$chartMargin + $westTitleHeight + $westLabelWidth + $inset\"/>\n\n    <xsl:variable name=\"gridlineMajorX\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/axis/x/gridline/major/text()\"/>\n            <xsl:with-param name=\"default\" select=\"'true'\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"gridlineMajorY\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/axis/y/gridline/major/text()\"/>\n            <xsl:with-param name=\"default\" select=\"'true'\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"gridlineMinorX\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/axis/x/gridline/minor/text()\"/>\n            <xsl:with-param name=\"default\" select=\"'false'\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"gridlineMinorY\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/axis/y/gridline/minor/text()\"/>\n            <xsl:with-param name=\"default\" select=\"'false'\"/>\n        </xsl:call-template>\n    </xsl:variable>\n\n    <xsl:variable name=\"intervalMajorX\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/axis/x/interval/major/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultIntervalMajorX\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"defaultIntervalMajorX\">\n        <xsl:call-template name=\"getInterval\">\n            <xsl:with-param name=\"min\" select=\"$minX\"/>\n            <xsl:with-param name=\"max\" select=\"$maxX\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"intervalMajorX2\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/axis/x2/interval/major/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultIntervalMajorX2\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"defaultIntervalMajorX2\">\n        <xsl:call-template name=\"getInterval\">\n            <xsl:with-param name=\"min\" select=\"$minX2\"/>\n            <xsl:with-param name=\"max\" select=\"$maxX2\"/>\n        </xsl:call-template>\n    </xsl:variable>\n\n    <xsl:variable name=\"intervalMajorY\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/axis/y/interval/major/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultIntervalMajorY\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"defaultIntervalMajorY\">\n        <xsl:call-template name=\"getInterval\">\n            <xsl:with-param name=\"min\" select=\"$minY\"/>\n            <xsl:with-param name=\"max\" select=\"$maxY\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"intervalMajorY2\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/axis/y2/interval/major/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$defaultIntervalMajorY2\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"defaultIntervalMajorY2\">\n        <xsl:call-template name=\"getInterval\">\n            <xsl:with-param name=\"min\" select=\"$minY2\"/>\n            <xsl:with-param name=\"max\" select=\"$maxY2\"/>\n        </xsl:call-template>\n    </xsl:variable>\n\n    <xsl:variable name=\"intervalMinorX\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/axis/x/interval/minor/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$intervalMajorX div 2\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"intervalMinorX2\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/axis/x2/interval/minor/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$intervalMajorX2 div 2\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"intervalMinorY\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/axis/y/interval/minor/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$intervalMajorY div 2\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"intervalMinorY2\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/axis/y2/interval/minor/text()\"/>\n            <xsl:with-param name=\"default\" select=\"$intervalMajorY2 div 2\"/>\n        </xsl:call-template>\n    </xsl:variable>\n\n    <xsl:variable name=\"seriesHueInitial\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/style/series/hue/initial/text()\"/>\n            <xsl:with-param name=\"default\" select=\"250\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"seriesHueStep\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/style/series/hue/step/text()\"/>\n            <xsl:with-param name=\"default\" select=\"47\"/>\n        </xsl:call-template>\n    </xsl:variable>\n\n    <xsl:variable name=\"seriesSaturationMin\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/style/series/saturation/min/text()\"/>\n            <xsl:with-param name=\"default\" select=\"0.6\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"seriesSaturationMax\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/style/series/saturation/max/text()\"/>\n            <xsl:with-param name=\"default\" select=\"1.0\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"seriesSaturationLevels\">\n        <xsl:call-template name=\"getNonZeroNumber\">\n            <xsl:with-param name=\"n\" select=\"/chart/style/series/saturation/levels/text()\"/>\n            <xsl:with-param name=\"default\" select=\"5\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"seriesSaturationStep\">\n        <xsl:choose>\n            <xsl:when test=\"$seriesSaturationLevels > 1\">\n                <xsl:value-of select=\"($seriesSaturationMax - $seriesSaturationMin) div ($seriesSaturationLevels - 1)\"/>\n            </xsl:when>\n            <xsl:otherwise>0</xsl:otherwise>\n        </xsl:choose>\n    </xsl:variable>\n\n    <xsl:variable name=\"seriesBrightnessMin\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/style/series/brightness/min/text()\"/>\n            <xsl:with-param name=\"default\" select=\"0.4\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"seriesBrightnessMax\">\n        <xsl:call-template name=\"getValueOrDefault\">\n            <xsl:with-param name=\"path\" select=\"/chart/style/series/brightness/max/text()\"/>\n            <xsl:with-param name=\"default\" select=\"1.0\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"seriesBrightnessLevels\">\n        <xsl:call-template name=\"getNonZeroNumber\">\n            <xsl:with-param name=\"n\" select=\"/chart/style/series/brightness/levels/text()\"/>\n            <xsl:with-param name=\"default\" select=\"5\"/>\n        </xsl:call-template>\n    </xsl:variable>\n    <xsl:variable name=\"seriesBrightnessStep\">\n        <xsl:choose>\n            <xsl:when test=\"$seriesBrightnessLevels > 1\">\n                <xsl:value-of select=\"($seriesBrightnessMax - $seriesBrightnessMin) div ($seriesBrightnessLevels - 1)\"/>\n            </xsl:when>\n            <xsl:otherwise>0</xsl:otherwise>\n        </xsl:choose>\n    </xsl:variable>\n\n\n\n\n    <xsl:variable name=\"formatLabelX\">\n        <xsl:choose>\n            <xsl:when test=\"/chart/style/label/x/format/text()\">\n                <xsl:value-of select=\"/chart/style/label/x/format/text()\"/>\n            </xsl:when>\n            <xsl:otherwise>\n                <xsl:call-template name=\"getFormat\">\n                    <xsl:with-param name=\"interval\" select=\"$intervalMajorX\"/>\n                </xsl:call-template>\n            </xsl:otherwise>\n        </xsl:choose>\n    </xsl:variable>\n    <xsl:variable name=\"formatLabelX2\">\n        <xsl:choose>\n            <xsl:when test=\"/chart/style/label/x2/format/text()\">\n                <xsl:value-of select=\"/chart/style/label/x2/format/text()\"/>\n            </xsl:when>\n            <xsl:otherwise>\n                <xsl:call-template name=\"getFormat\">\n                    <xsl:with-param name=\"interval\" select=\"$intervalMajorX2\"/>\n                </xsl:call-template>\n            </xsl:otherwise>\n        </xsl:choose>\n    </xsl:variable>\n    <xsl:variable name=\"formatLabelY\">\n        <xsl:choose>\n            <xsl:when test=\"/chart/style/label/y/format/text()\">\n                <xsl:value-of select=\"/chart/style/label/y/format/text()\"/>\n            </xsl:when>\n            <xsl:otherwise>\n                <xsl:call-template name=\"getFormat\">\n                    <xsl:with-param name=\"interval\" select=\"$intervalMajorY\"/>\n                </xsl:call-template>\n            </xsl:otherwise>\n        </xsl:choose>\n    </xsl:variable>\n    <xsl:variable name=\"formatLabelY2\">\n        <xsl:choose>\n            <xsl:when test=\"/chart/style/label/y2/format/text()\">\n                <xsl:value-of select=\"/chart/style/label/y2/format/text()\"/>\n            </xsl:when>\n            <xsl:otherwise>\n                <xsl:call-template name=\"getFormat\">\n                    <xsl:with-param name=\"interval\" select=\"$intervalMajorY2\"/>\n                </xsl:call-template>\n            </xsl:otherwise>\n        </xsl:choose>\n    </xsl:variable>\n\n\n    <xsl:variable name=\"plotareaHeight\" select=\"$chartHeight - $northHeight - $southHeight\"/>\n    <xsl:variable name=\"plotareaWidth\" select=\"$chartWidth  - $westWidth - $eastWidth\"/>\n\n\n\n\n    <xsl:variable name=\"minY\">\n        <xsl:choose>\n            <xsl:when test=\"/chart/axis/y/range/min\">\n                <xsl:value-of select=\"/chart/axis/y/range/min/text()\"/>\n            </xsl:when>\n            <xsl:otherwise>\n                <xsl:for-each select=\"/chart/series/datum[string(number(@y)) != 'NaN']\">\n                    <xsl:sort order=\"ascending\" data-type=\"number\" select=\"@y\"/>\n                    <xsl:if test=\"position() = 1\">\n                        <xsl:value-of select=\"@y\"/>\n                    </xsl:if>\n                </xsl:for-each>\n            </xsl:otherwise>\n        </xsl:choose>\n    </xsl:variable>\n\n    <xsl:variable name=\"maxY\">\n        <xsl:choose>\n            <xsl:when test=\"/chart/axis/y/range/max\">\n                <xsl:value-of select=\"/chart/axis/y/range/max/text()\"/>\n            </xsl:when>\n            <xsl:otherwise>\n                <xsl:for-each select=\"/chart/series/datum[string(number(@y)) != 'NaN']\">\n                    <xsl:sort order=\"descending\" data-type=\"number\" select=\"@y\"/>\n                    <xsl:if test=\"position() = 1\">\n                        <xsl:value-of select=\"@y\"/>\n                    </xsl:if>\n                </xsl:for-each>\n            </xsl:otherwise>\n        </xsl:choose>\n    </xsl:variable>\n\n    <xsl:variable name=\"rangeMinY\">\n        <xsl:value-of select=\"floor($minY div $intervalMajorY) * $intervalMajorY\"/>\n    </xsl:variable>\n\n    <xsl:variable name=\"rangeMaxY\">\n        <xsl:value-of select=\"ceiling($maxY div $intervalMajorY) * $intervalMajorY\"/>\n    </xsl:variable>\n\n    <xsl:variable name=\"rangeY\">\n        <xsl:value-of select=\"$rangeMaxY - $rangeMinY\"/>\n    </xsl:variable>\n\n\n\n\n    <xsl:variable name=\"minY2\">\n        <xsl:choose>\n            <xsl:when test=\"/chart/axis/y2/range/min\">\n                <xsl:value-of select=\"/chart/axis/y2/range/min/text()\"/>\n            </xsl:when>\n            <xsl:otherwise>\n                <xsl:for-each select=\"/chart/series/datum[string(number(@y2)) != 'NaN']\">\n                    <xsl:sort order=\"ascending\" data-type=\"number\" select=\"@y2\"/>\n                    <xsl:if test=\"position() = 1\">\n                        <xsl:value-of select=\"@y2\"/>\n                    </xsl:if>\n                </xsl:for-each>\n            </xsl:otherwise>\n        </xsl:choose>\n    </xsl:variable>\n\n    <xsl:variable name=\"maxY2\">\n        <xsl:choose>\n            <xsl:when test=\"/chart/axis/y2/range/max\">\n                <xsl:value-of select=\"/chart/axis/y2/range/max/text()\"/>\n            </xsl:when>\n            <xsl:otherwise>\n                <xsl:for-each select=\"/chart/series/datum[string(number(@y2)) != 'NaN']\">\n                    <xsl:sort order=\"descending\" data-type=\"number\" select=\"@y2\"/>\n                    <xsl:if test=\"position() = 1\">\n                        <xsl:value-of select=\"@y2\"/>\n                    </xsl:if>\n                </xsl:for-each>\n            </xsl:otherwise>\n        </xsl:choose>\n    </xsl:variable>\n\n    <xsl:variable name=\"rangeMinY2\">\n        <xsl:value-of select=\"floor($minY2 div $intervalMajorY2) * $intervalMajorY2\"/>\n    </xsl:variable>\n\n    <xsl:variable name=\"rangeMaxY2\">\n        <xsl:value-of select=\"ceiling($maxY2 div $intervalMajorY2) * $intervalMajorY2\"/>\n    </xsl:variable>\n\n    <xsl:variable name=\"rangeY2\">\n        <xsl:value-of select=\"$rangeMaxY2 - $rangeMinY2\"/>\n    </xsl:variable>\n\n\n\n\n    <xsl:variable name=\"minX\">\n        <xsl:choose>\n            <!-- If the user has supplied a minimum X value, then use it -->\n            <xsl:when test=\"string(number(/chart/axis/x/range/min/text())) != 'NaN'\">\n                <xsl:value-of select=\"/chart/axis/x/range/min/text()\"/>\n            </xsl:when>\n            <!-- Otherwise, it gets complicated... -->\n            <xsl:otherwise>\n                <!-- Get the minimum x (=NaN if there is a missing x)-->\n                <xsl:variable name=\"min\">\n                    <xsl:for-each select=\"/chart/series/datum\">\n                        <xsl:sort order=\"ascending\" data-type=\"number\" select=\"@x\"/>\n                        <xsl:if test=\"position() = 1\">\n                            <xsl:value-of select=\"@x\"/>\n                        </xsl:if>\n                    </xsl:for-each>\n                </xsl:variable>\n                <!-- Get the minimum (specified) x (=NaN if all x values are omitted) -->\n                <xsl:variable name=\"minSpecified\">\n                    <xsl:for-each select=\"/chart/series/datum[string(number(@x)) != 'NaN']\">\n                        <xsl:sort order=\"ascending\" data-type=\"number\" select=\"@x\"/>\n                        <xsl:if test=\"position() = 1\">\n                            <xsl:value-of select=\"@x\"/>\n                        </xsl:if>\n                    </xsl:for-each>\n                </xsl:variable>\n                <xsl:choose>\n                    <!-- If all X values are omitted, then return 0 as the minimum X value -->\n                    <xsl:when test=\"string(number($minSpecified)) = 'NaN'\">0</xsl:when>\n                    <!-- If any X value is omitted, then return min(0,$min) as the minimum X value -->\n                    <xsl:when test=\"string(number($min)) = 'NaN'\">\n                        <xsl:choose>\n                            <xsl:when test=\"$minSpecified &lt; 0\">\n                                <xsl:value-of select=\"$minSpecified\"/>\n                            </xsl:when>\n                            <xsl:otherwise>0</xsl:otherwise>\n                        </xsl:choose>\n                    </xsl:when>\n                    <!-- If no X values are omitted, then return the minimum specified X value -->\n                    <xsl:otherwise>\n                        <xsl:value-of select=\"$min\"/>\n                    </xsl:otherwise>\n                </xsl:choose>\n            </xsl:otherwise>\n        </xsl:choose>\n    </xsl:variable>\n\n    <xsl:variable name=\"maxX\">\n        <xsl:choose>\n            <!-- If the user has supplied a maximum X value, then use it -->\n            <xsl:when test=\"string(number(/chart/axis/x/range/max/text())) != 'NaN'\">\n                <xsl:value-of select=\"/chart/axis/x/range/max/text()\"/>\n            </xsl:when>\n            <!-- Otherwise, use the maximum (specified) X value in the series data -->\n            <xsl:otherwise>\n                <xsl:variable name=\"max\">\n                    <xsl:for-each select=\"/chart/series/datum[string(number(@x)) != 'NaN']\">\n                        <xsl:sort order=\"descending\" data-type=\"number\" select=\"@x\"/>\n                        <xsl:if test=\"position() = 1\">\n                            <xsl:value-of select=\"@x\"/>\n                        </xsl:if>\n                    </xsl:for-each>\n                </xsl:variable>\n                <xsl:choose>\n                    <!-- If all X values are omitted, then use the maximum number of datum points in any one data series (less 1) -->\n                    <xsl:when test=\"string(number($max)) = 'NaN'\">\n                        <xsl:value-of select=\"$maxDatumCount - 1\"/>\n                    </xsl:when>\n                    <xsl:otherwise>\n                        <xsl:value-of select=\"$max\"/>\n                    </xsl:otherwise>\n                </xsl:choose>\n            </xsl:otherwise>\n        </xsl:choose>\n    </xsl:variable>\n\n    <xsl:variable name=\"rangeMinX\">\n        <xsl:value-of select=\"floor($minX div $intervalMajorX) * $intervalMajorX\"/>\n    </xsl:variable>\n\n    <xsl:variable name=\"rangeMaxX\">\n        <xsl:value-of select=\"ceiling($maxX div $intervalMajorX) * $intervalMajorX\"/>\n    </xsl:variable>\n\n    <xsl:variable name=\"rangeX\">\n        <xsl:value-of select=\"$rangeMaxX - $rangeMinX\"/>\n    </xsl:variable>\n\n\n\n\n    <xsl:variable name=\"minX2\">\n        <xsl:choose>\n            <!-- If the user has supplied a minimum X2 value, then use it -->\n            <xsl:when test=\"string(number(/chart/axis/x2/range/min/text())) != 'NaN'\">\n                <xsl:value-of select=\"/chart/axis/x2/range/min/text()\"/>\n            </xsl:when>\n            <!-- Otherwise, it gets complicated... -->\n            <xsl:otherwise>\n                <!-- Get the minimum x2 (=NaN if there is a missing x2)-->\n                <xsl:variable name=\"min\">\n                    <xsl:for-each select=\"/chart/series/datum\">\n                        <xsl:sort order=\"ascending\" data-type=\"number\" select=\"@x2\"/>\n                        <xsl:if test=\"position() = 1\">\n                            <xsl:value-of select=\"@x2\"/>\n                        </xsl:if>\n                    </xsl:for-each>\n                </xsl:variable>\n                <!-- Get the minimum (specified) x2 (=NaN if all x2 values are omitted) -->\n                <xsl:variable name=\"minSpecified\">\n                    <xsl:for-each select=\"/chart/series/datum[string(number(@x2)) != 'NaN']\">\n                        <xsl:sort order=\"ascending\" data-type=\"number\" select=\"@x2\"/>\n                        <xsl:if test=\"position() = 1\">\n                            <xsl:value-of select=\"@x2\"/>\n                        </xsl:if>\n                    </xsl:for-each>\n                </xsl:variable>\n                <xsl:choose>\n                    <!-- If all X2 values are omitted, then return 0 as the minimum X2 value -->\n                    <xsl:when test=\"string(number($minSpecified)) = 'NaN'\">0</xsl:when>\n                    <!-- If any X2 value is omitted, then return min(0,$min) as the minimum X2 value -->\n                    <xsl:when test=\"string(number($min)) = 'NaN'\">\n                        <xsl:choose>\n                            <xsl:when test=\"$minSpecified &lt; 0\">\n                                <xsl:value-of select=\"$minSpecified\"/>\n                            </xsl:when>\n                            <xsl:otherwise>0</xsl:otherwise>\n                        </xsl:choose>\n                    </xsl:when>\n                    <!-- If no X2 values are omitted, then return the minimum specified X2 value -->\n                    <xsl:otherwise>\n                        <xsl:value-of select=\"$min\"/>\n                    </xsl:otherwise>\n                </xsl:choose>\n            </xsl:otherwise>\n        </xsl:choose>\n    </xsl:variable>\n\n    <xsl:variable name=\"maxX2\">\n        <xsl:choose>\n            <!-- If the user has supplied a maximum X2 value, then use it -->\n            <xsl:when test=\"string(number(/chart/axis/x2/range/max/text())) != 'NaN'\">\n                <xsl:value-of select=\"/chart/axis/x2/range/max/text()\"/>\n            </xsl:when>\n            <!-- Otherwise, use the maximum (specified) X2 value in the series data -->\n            <xsl:otherwise>\n                <xsl:variable name=\"max\">\n                    <xsl:for-each select=\"/chart/series/datum[string(number(@x2)) != 'NaN']\">\n                        <xsl:sort order=\"descending\" data-type=\"number\" select=\"@x2\"/>\n                        <xsl:if test=\"position() = 1\">\n                            <xsl:value-of select=\"@x2\"/>\n                        </xsl:if>\n                    </xsl:for-each>\n                </xsl:variable>\n                <xsl:choose>\n                    <!-- If all X2 values are omitted, then use the maximum number of datum points in any one data series -->\n                    <xsl:when test=\"string(number($max)) = 'NaN'\">\n                        <xsl:value-of select=\"$maxDatumCount - 1\"/>\n                    </xsl:when>\n                    <xsl:otherwise>\n                        <xsl:value-of select=\"$max\"/>\n                    </xsl:otherwise>\n                </xsl:choose>\n            </xsl:otherwise>\n        </xsl:choose>\n    </xsl:variable>\n\n    <xsl:variable name=\"rangeMinX2\">\n        <xsl:value-of select=\"floor($minX2 div $intervalMajorX2) * $intervalMajorX2\"/>\n    </xsl:variable>\n\n    <xsl:variable name=\"rangeMaxX2\">\n        <xsl:value-of select=\"ceiling($maxX2 div $intervalMajorX2) * $intervalMajorX2\"/>\n    </xsl:variable>\n\n    <xsl:variable name=\"rangeX2\">\n        <xsl:value-of select=\"$rangeMaxX2 - $rangeMinX2\"/>\n    </xsl:variable>\n\n\n\n    <xsl:variable name=\"maxDatumCount\">\n        <xsl:choose>\n            <xsl:when test=\"/chart/series\">\n                <xsl:for-each select=\"/chart/series\">\n                    <xsl:sort order=\"descending\" data-type=\"number\" select=\"count(datum)\"/>\n                    <xsl:if test=\"position() = 1\">\n                        <xsl:value-of select=\"count(datum)\"/>\n                    </xsl:if>\n                </xsl:for-each>\n            </xsl:when>\n            <xsl:otherwise>0</xsl:otherwise>\n        </xsl:choose>\n    </xsl:variable>\n\n    <xsl:variable name=\"scaleY\">\n        <xsl:value-of select=\"$plotareaHeight div $rangeY\"/>\n    </xsl:variable>\n\n    <xsl:variable name=\"scaleY2\">\n        <xsl:value-of select=\"$plotareaHeight div $rangeY2\"/>\n    </xsl:variable>\n\n    <xsl:variable name=\"scaleX\">\n        <xsl:value-of select=\"$plotareaWidth div $rangeX\"/>\n    </xsl:variable>\n\n    <xsl:variable name=\"scaleX2\">\n        <xsl:value-of select=\"$plotareaWidth div $rangeX2\"/>\n    </xsl:variable>\n\n    <xsl:template name=\"getInterval\">\n        <xsl:param name=\"min\"/>\n        <xsl:param name=\"max\"/>\n        <xsl:variable name=\"range\" select=\"$max - $min\"/>\n        <xsl:choose>\n            <xsl:when test=\"$range &gt;= 1\">\n                <xsl:variable name=\"len\" select=\"string-length(floor($range))\"/>\n                <xsl:variable name=\"int\" select=\"substring('10000000000000000000000',1,$len)\"/>\n                <xsl:variable name=\"intervals\" select=\"floor($range div $int)\"/>\n                <!-- Try to keep the number of intervals between 2 and 20 -->\n                <xsl:choose>\n                    <xsl:when test=\"$intervals = 1\">    <!--only one interval: not good-->\n                        <xsl:value-of select=\"$int div 10\"/>\n                    </xsl:when>\n                    <xsl:when test=\"$intervals &lt;= 20\">\n                        <xsl:value-of select=\"$int\"/>\n                    </xsl:when>\n                    <xsl:otherwise>\n                        <xsl:value-of select=\"$int * 10\"/>\n                    </xsl:otherwise>\n                </xsl:choose>\n            </xsl:when>\n            <xsl:otherwise> <!-- range is fractional -->\n                <xsl:variable name=\"nx\" select=\"translate($range,'123456789','XXXXXXXXX')\"/>\n                <xsl:variable name=\"int\" select=\"concat(substring-before($nx,'X'),'1')\"/>\n                <xsl:variable name=\"intervals\" select=\"floor($range div $int)\"/>\n                <!-- Try to keep the number of intervals between 2 and 20 -->\n                <xsl:choose>\n                    <xsl:when test=\"$intervals = 1\">    <!--only one interval: not good-->\n                        <xsl:value-of select=\"$int div 10\"/>\n                    </xsl:when>\n                    <xsl:when test=\"$intervals &lt;= 20\">\n                        <xsl:value-of select=\"$int\"/>\n                    </xsl:when>\n                    <xsl:otherwise>\n                        <xsl:value-of select=\"$int * 10\"/>\n                    </xsl:otherwise>\n                </xsl:choose>\n            </xsl:otherwise>\n        </xsl:choose>\n    </xsl:template>\n\n    <xsl:template name=\"getFormat\">\n        <xsl:param name=\"interval\"/>\n        <xsl:choose>\n            <xsl:when test=\"$interval &gt;= 1\">#0</xsl:when>\n            <xsl:otherwise> <!-- 0.nnnnn -->\n                <xsl:variable name=\"f\" select=\"substring('0.00000000000000000000',1,string-length($interval))\"/>\n                <xsl:value-of select=\"$f\"/>\n            </xsl:otherwise>\n        </xsl:choose>\n    </xsl:template>\n\n\n    <xsl:template match=\"/\">\n        <svg xmlns:svg=\"http://www.w3.org/2000/svg\"\n            xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            viewBox=\"0 0 {$chartWidth} {$chartHeight}\"\n            width=\"{$chartWidth}\"\n            height=\"{$chartHeight}\">\n\n            <xsl:if test=\"/chart/@debug = 'true'\">\n                <xsl:comment>\n\n                      chartHeight=<xsl:value-of select=\"$chartHeight\"/>\n                       chartWidth=<xsl:value-of select=\"$chartWidth\"/>\n                      chartMargin=<xsl:value-of select=\"$chartMargin\"/>\n\n                   plotareaHeight=<xsl:value-of select=\"$plotareaHeight\"/>\n                    plotareaWidth=<xsl:value-of select=\"$plotareaWidth\"/>\n\n                 chartTitleHeight=<xsl:value-of select=\"$chartTitleHeight\"/>\n                 northTitleHeight=<xsl:value-of select=\"$northTitleHeight\"/>\n                 northLabelHeight=<xsl:value-of select=\"$northLabelHeight\"/>\n                      northHeight=<xsl:value-of select=\"$northHeight\"/>\n\n                 southLabelHeight=<xsl:value-of select=\"$southLabelHeight\"/>\n                 southTitleHeight=<xsl:value-of select=\"$southTitleHeight\"/>\n                      southHeight=<xsl:value-of select=\"$southHeight\"/>\n\n                   eastLabelWidth=<xsl:value-of select=\"$eastLabelWidth\"/>\n                  eastLabelHeight=<xsl:value-of select=\"$eastLabelHeight\"/>\n                  eastTitleHeight=<xsl:value-of select=\"$eastTitleHeight\"/>\n                        eastWidth=<xsl:value-of select=\"$eastWidth\"/>\n\n                  westTitleHeight=<xsl:value-of select=\"$westTitleHeight\"/>\n                   westLabelWidth=<xsl:value-of select=\"$westLabelWidth\"/>\n                  westLabelHeight=<xsl:value-of select=\"$westLabelHeight\"/>\n                        westWidth=<xsl:value-of select=\"$westWidth\"/>\n\n                   gridlineMajorX=<xsl:value-of select=\"$gridlineMajorX\"/>\n                   gridlineMajorY=<xsl:value-of select=\"$gridlineMajorY\"/>\n                   gridlineMinorX=<xsl:value-of select=\"$gridlineMinorX\"/>\n                   gridlineMinorY=<xsl:value-of select=\"$gridlineMinorY\"/>\n\n                   intervalMajorX=<xsl:value-of select=\"$intervalMajorX\"/>\n                   intervalMajorY=<xsl:value-of select=\"$intervalMajorY\"/>\n                  intervalMajorX2=<xsl:value-of select=\"$intervalMajorX2\"/>\n                  intervalMajorY2=<xsl:value-of select=\"$intervalMajorY2\"/>\n                   intervalMinorX=<xsl:value-of select=\"$intervalMinorX\"/>\n                   intervalMinorY=<xsl:value-of select=\"$intervalMinorY\"/>\n                  intervalMinorX2=<xsl:value-of select=\"$intervalMinorX2\"/>\n                  intervalMinorY2=<xsl:value-of select=\"$intervalMinorY2\"/>\n\n                             minX=<xsl:value-of select=\"$minX\"/>\n                             maxX=<xsl:value-of select=\"$maxX\"/>\n                        rangeMinX=<xsl:value-of select=\"$rangeMinX\"/>\n                        rangeMaxX=<xsl:value-of select=\"$rangeMaxX\"/>\n                           rangeX=<xsl:value-of select=\"$rangeX\"/>\n                           scaleX=<xsl:value-of select=\"$scaleX\"/>\n\n                            minX2=<xsl:value-of select=\"$minX2\"/>\n                            maxX2=<xsl:value-of select=\"$maxX2\"/>\n                       rangeMinX2=<xsl:value-of select=\"$rangeMinX2\"/>\n                       rangeMaxX2=<xsl:value-of select=\"$rangeMaxX2\"/>\n                          rangeX2=<xsl:value-of select=\"$rangeX2\"/>\n                          scaleX2=<xsl:value-of select=\"$scaleX2\"/>\n\n                             minY=<xsl:value-of select=\"$minY\"/>\n                             maxY=<xsl:value-of select=\"$maxY\"/>\n                        rangeMinY=<xsl:value-of select=\"$rangeMinY\"/>\n                        rangeMaxY=<xsl:value-of select=\"$rangeMaxY\"/>\n                           rangeY=<xsl:value-of select=\"$rangeY\"/>\n                           scaleY=<xsl:value-of select=\"$scaleY\"/>\n\n                            minY2=<xsl:value-of select=\"$minY2\"/>\n                            maxY2=<xsl:value-of select=\"$maxY2\"/>\n                       rangeMinY2=<xsl:value-of select=\"$rangeMinY2\"/>\n                       rangeMaxY2=<xsl:value-of select=\"$rangeMaxY2\"/>\n                          rangeY2=<xsl:value-of select=\"$rangeY2\"/>\n                          scaleY2=<xsl:value-of select=\"$scaleY2\"/>\n\n                       hueInitial=<xsl:value-of select=\"$seriesHueInitial\"/>\n                          hueStep=<xsl:value-of select=\"$seriesHueStep\"/>\n                    saturationMin=<xsl:value-of select=\"$seriesSaturationMin\"/>\n                    saturationMax=<xsl:value-of select=\"$seriesSaturationMax\"/>\n                 saturationLevels=<xsl:value-of select=\"$seriesSaturationLevels\"/>\n                   saturationStep=<xsl:value-of select=\"$seriesSaturationStep\"/>\n                    brightnessMin=<xsl:value-of select=\"$seriesBrightnessMin\"/>\n                    brightnessMax=<xsl:value-of select=\"$seriesBrightnessMax\"/>\n                 brightnessLevels=<xsl:value-of select=\"$seriesBrightnessLevels\"/>\n                   brightnessStep=<xsl:value-of select=\"$seriesBrightnessStep\"/>\n                    <xsl:text> </xsl:text>\n                </xsl:comment>\n            </xsl:if>\n\n\n            <style type=\"text/css\">\n                <xsl:text disable-output-escaping=\"yes\">\n&lt;![CDATA[</xsl:text>\n        .debug          {fill:none;stroke-width:0.5;stroke-opacity:1;stroke:green;}\n        .debugText      {font-family:Arial;font-weight:bold;text-anchor:middle;fill:black;stroke:none;}\n        .grid           {fill:none;stroke-width:2;stroke:#fafafa;<xsl:value-of select=\"normalize-space(/chart/style/grid/text())\"/>;}\n        .gridVert       {<xsl:value-of select=\"normalize-space(/chart/style/grid/vertical/text())\"/>;}\n        .gridVertMajor  {<xsl:value-of select=\"normalize-space(/chart/style/grid/vertical/major/text())\"/>;}\n        .gridVertMinor  {stroke-width:1;stroke-dasharray:1;<xsl:value-of select=\"normalize-space(/chart/style/grid/vertical/minor/text())\"/>;}\n        .gridHorz       {<xsl:value-of select=\"normalize-space(/chart/style/grid/horizontal/text())\"/>;}\n        .gridHorzMajor  {<xsl:value-of select=\"normalize-space(/chart/style/grid/horizontal/major/text())\"/>;}\n        .gridHorzMinor  {stroke-width:1;stroke-dasharray:1;<xsl:value-of select=\"normalize-space(/chart/style/grid/horizontal/minor/text())\"/>;}\n        .ref            {stroke:blue;stroke-width:1;stroke-dasharray:1,2;<xsl:value-of select=\"normalize-space(/chart/style/reference/text())\"/>;}\n        .refVert        {<xsl:value-of select=\"normalize-space(/chart/style/reference/vertical/text())\"/>;}\n        .refHorz        {<xsl:value-of select=\"normalize-space(/chart/style/reference/horizontal/text())\"/>;}\n        .label          {stroke:none;fill:black;font-size:<xsl:value-of select=\"$defaultLabelFontSize\"/>;<xsl:value-of select=\"normalize-space(/chart/style/text())\"/>;<xsl:value-of select=\"normalize-space(/chart/style/label/text())\"/>;}\n        .labelX         {text-anchor:middle;font-size:<xsl:value-of select=\"$southLabelFontSize\"/>;<xsl:value-of select=\"normalize-space(/chart/style/text())\"/>;<xsl:value-of select=\"normalize-space(/chart/style/label/x/text())\"/>;}\n        .labelY         {text-anchor:end;font-size:<xsl:value-of select=\"$westLabelFontSize\"/>;<xsl:value-of select=\"normalize-space(/chart/style/text())\"/>;<xsl:value-of select=\"normalize-space(/chart/style/label/y/text())\"/>;}\n        .labelX2        {text-anchor:middle;font-size:<xsl:value-of select=\"$northLabelFontSize\"/>;<xsl:value-of select=\"normalize-space(/chart/style/text())\"/>;<xsl:value-of select=\"normalize-space(/chart/style/label/x2/text())\"/>;}\n        .labelY2        {text-anchor:start;font-size:<xsl:value-of select=\"$eastLabelFontSize\"/>;<xsl:value-of select=\"normalize-space(/chart/style/text())\"/>;<xsl:value-of select=\"normalize-space(/chart/style/label/y2/text())\"/>;}\n        .title          {text-anchor:middle;fill:gold;stroke:goldenrod;font-size:<xsl:value-of select=\"$chartTitleFontSize\"/>;<xsl:value-of select=\"normalize-space(/chart/style/text())\"/>;<xsl:value-of select=\"normalize-space(/chart/style/title/text())\"/>;\n        .titleX         {text-anchor:middle;fill:black;font-size:<xsl:value-of select=\"$southTitleFontSize\"/>;<xsl:value-of select=\"normalize-space(/chart/style/text())\"/>;<xsl:value-of select=\"normalize-space(/chart/style/title/x/text())\"/>;}\n        .titleX2        {text-anchor:middle;fill:black;font-size:<xsl:value-of select=\"$northTitleFontSize\"/>;<xsl:value-of select=\"normalize-space(/chart/style/text())\"/>;<xsl:value-of select=\"normalize-space(/chart/style/title/x2/text())\"/>;}\n        .titleY         {text-anchor:middle;fill:black;font-size:<xsl:value-of select=\"$westTitleFontSize\"/>;<xsl:value-of select=\"normalize-space(/chart/style/text())\"/>;<xsl:value-of select=\"normalize-space(/chart/style/title/y/text())\"/>;}\n        .titleY2        {text-anchor:middle;fill:black;font-size:<xsl:value-of select=\"$eastTitleFontSize\"/>;<xsl:value-of select=\"normalize-space(/chart/style/text())\"/>;<xsl:value-of select=\"normalize-space(/chart/style/title/y2/text())\"/>;}\n        .plotarea       {<xsl:choose>\n                            <xsl:when test=\"/chart/style/plotarea/gradient\">\n                                <xsl:text>fill:url(#backgroundGradient);</xsl:text>\n                            </xsl:when>\n                            <xsl:when test=\"/chart/style/plotarea/color\">\n                                <xsl:text>fill:</xsl:text><xsl:value-of select=\"normalize-space(/chart/style/plotarea/color/text())\"/>\n                                <xsl:text>;fill-opacity:</xsl:text><xsl:value-of select=\"/chart/style/plotarea/color/@opacity\"/>\n                            </xsl:when>\n                            <xsl:otherwise>\n                                <xsl:text>fill:white</xsl:text>\n                            </xsl:otherwise>\n                        </xsl:choose>\n                        <xsl:text>;}</xsl:text>\n        .plotareaBorder {fill:none;stroke:gray;stroke-width:3;<xsl:value-of select=\"normalize-space(/chart/style/plotarea/border/text())\"/>\n                        <xsl:text>;</xsl:text><xsl:if test=\"/chart/@debug = 'true'\"><xsl:value-of select=\"$debugStyle\"/></xsl:if>;}\n        .legend         {stroke:none;fill:black;font-size:<xsl:value-of select=\"$defaultLegendEntryHeight\"/>;<xsl:value-of select=\"normalize-space(/chart/style/text())\"/>;<xsl:value-of select=\"normalize-space(/chart/style/legend/text())\"/>\n                        <xsl:text>;</xsl:text><xsl:if test=\"/chart/@debug = 'true'\"><xsl:value-of select=\"$debugStyle\"/></xsl:if>;}\n        .annotation     {fill:gold;stroke:black;fill-opacity:0.2;stroke-opacity:0.2;font-size:10px;<xsl:value-of select=\"normalize-space(/chart/style/annotation/marker/text())\"/>\n                        <xsl:text>;</xsl:text><xsl:if test=\"/chart/@debug = 'true'\"><xsl:value-of select=\"$debugStyle\"/></xsl:if>;}\n        .annotationText {fill:black;fill-opacity:0.7;stroke:none;<xsl:value-of select=\"normalize-space(/chart/style/text())\"/>;<xsl:value-of select=\"normalize-space(/chart/style/annotation/text/text())\"/>;text-anchor:middle\n                        <xsl:text>;</xsl:text><xsl:if test=\"/chart/@debug = 'true'\"><xsl:value-of select=\"$debugStyle\"/></xsl:if>;}\n        .series         {fill:none;stroke-width:5;stroke-opacity:0.5;stroke-linejoin:round;stroke-linecap:round;<xsl:value-of select=\"normalize-space(/chart/style/series/text())\"/>\n                        <xsl:text>;</xsl:text><xsl:if test=\"/chart/@debug = 'true'\"><xsl:value-of select=\"$debugStyle\"/></xsl:if>;}\n    <xsl:apply-templates select=\"chart/series\" mode=\"css-style-sheet\"/>\n<xsl:text disable-output-escaping=\"yes\">]]&gt;\n</xsl:text>\n            </style>\n            <defs>\n                <xsl:if test=\"/chart/style/plotarea/gradient\">\n                    <xsl:element name=\"linearGradient\">\n                        <xsl:attribute name=\"id\">backgroundGradient</xsl:attribute>\n                        <xsl:attribute name=\"x1\">0%</xsl:attribute>\n                        <xsl:attribute name=\"y1\">0%</xsl:attribute>\n                        <xsl:attribute name=\"x2\">0%</xsl:attribute>\n                        <xsl:attribute name=\"y2\">100%</xsl:attribute>\n                        <xsl:copy-of select=\"/chart/style/plotarea/gradient/@*\"/> <!-- user can specify spreadMethod here, for example -->\n                        <xsl:choose>\n                            <xsl:when test=\"/chart/style/plotarea/gradient/*\">\n                                <xsl:apply-templates select=\"/chart/style/plotarea/gradient/color\" mode=\"getStops\"/>\n                            </xsl:when>\n                            <xsl:otherwise> <!--default gradient-->\n                                <stop offset=\"25%\" style=\"stop-color:skyblue;stop-opacity:0.2;\"/>\n                                <stop offset=\"75%\" style=\"stop-color:mediumturquoise;stop-opacity:0.5;\"/>\n                            </xsl:otherwise>\n                        </xsl:choose>\n                    </xsl:element>\n                </xsl:if>\n                <filter id=\"shadowFilter\" height=\"100\" width=\"100\">\n                    <feGaussianBlur result=\"blur\" stdDeviation=\"4\" in=\"SourceAlpha\"/>\n                    <feOffset result=\"offsetBlur\" dy=\"4\" dx=\"4\" in=\"blur\"/>\n                    <feSpecularLighting result=\"specular\" lighting-color=\"#bbbbbb\" specularExponent=\"20\" specularConstant=\".75\" surfaceScale=\"5\" in=\"blur\">\n                        <fePointLight z=\"20000\" y=\"-10000\" x=\"-5000\"/>\n                    </feSpecularLighting>\n                    <feComposite result=\"specular\" operator=\"in\" in2=\"SourceAlpha\" in=\"specular\"/>\n                    <feComposite result=\"shiney\" k4=\"0\" k3=\"1\" k2=\"1\" k1=\"0\" operator=\"arithmetic\" in2=\"specular\" in=\"SourceGraphic\"/>\n                    <feMerge>\n                        <feMergeNode in=\"offsetBlur\"/>\n                        <feMergeNode in=\"shiney\"/>\n                    </feMerge>\n                </filter>\n                <filter id=\"invertedShadowFilter\" height=\"100\" width=\"100\">\n                    <feGaussianBlur result=\"blur\" stdDeviation=\"4\" in=\"SourceAlpha\"/>\n                    <feOffset result=\"offsetBlur\" dy=\"-4\" dx=\"4\" in=\"blur\"/>\n                    <feSpecularLighting result=\"specular\" lighting-color=\"#bbbbbb\" specularExponent=\"20\" specularConstant=\".75\" surfaceScale=\"5\" in=\"blur\">\n                        <fePointLight z=\"20000\" y=\"-10000\" x=\"-5000\"/>\n                    </feSpecularLighting>\n                    <feComposite result=\"specular\" operator=\"in\" in2=\"SourceAlpha\" in=\"specular\"/>\n                    <feComposite result=\"shiney\" k4=\"0\" k3=\"1\" k2=\"1\" k1=\"0\" operator=\"arithmetic\" in2=\"specular\" in=\"SourceGraphic\"/>\n                    <feMerge>\n                        <feMergeNode in=\"offsetBlur\"/>\n                        <feMergeNode in=\"shiney\"/>\n                    </feMerge>\n                </filter>\n            </defs>\n\n            <xsl:element name=\"g\">\n                <xsl:attribute name=\"transform\">\n                    <xsl:text>matrix(1 0 0 -1 </xsl:text>\n                    <xsl:value-of select=\"$westWidth\"/>\n                    <xsl:text> </xsl:text>\n                    <xsl:value-of select=\"$northHeight + $plotareaHeight\"/>\n                    <xsl:text>)</xsl:text>\n                </xsl:attribute>\n                <xsl:if test=\"/chart/@debug = 'true'\">\n                    <xsl:attribute name=\"style\">\n                        <xsl:value-of select=\"$debugStyle\"/>\n                    </xsl:attribute>\n                </xsl:if>\n\n            <!-- Translate to plot area and invert the y-axis for ease of drawing (i.e. so that 'up' is now positive)... -->\n<!--            <g transform=\"matrix(1 0 0 -1 {$westWidth} {$northHeight + $plotareaHeight})\" style=\"stroke-opacity:{$chartOpacity};fill-opacity:{$chartOpacity}\">-->\n                <xsl:if test=\"//layout/south/legend\">\n                    <xsl:comment>South Legend</xsl:comment>\n                    <xsl:call-template name=\"drawLegend\">\n                        <xsl:with-param name=\"legendOriginX\" select=\"0\"/>\n                        <xsl:with-param name=\"legendOriginY\" select=\"-$southLabelHeight - $southTitleHeight - $inset\"/>\n                        <xsl:with-param name=\"legendWidth\" select=\"$plotareaWidth\"/>\n                        <xsl:with-param name=\"legendHeight\" select=\"$southLegendHeight\"/>\n                        <xsl:with-param name=\"legendColumns\" select=\"$southLegendColumns\"/>\n                    </xsl:call-template>\n                </xsl:if>\n                <xsl:if test=\"//layout/east/legend\">\n                    <xsl:comment>East Legend</xsl:comment>\n                    <xsl:call-template name=\"drawLegend\">\n                        <xsl:with-param name=\"legendOriginX\" select=\"$plotareaWidth  + $inset + $eastLabelWidth + $eastTitleHeight + $inset\"/>\n                        <xsl:with-param name=\"legendOriginY\" select=\"$plotareaHeight\"/>\n                        <xsl:with-param name=\"legendWidth\" select=\"$eastLegendEntryWidth\"/>\n                        <xsl:with-param name=\"legendHeight\" select=\"$plotareaHeight\"/>\n                        <xsl:with-param name=\"legendColumns\" select=\"$eastLegendColumns\"/>\n                    </xsl:call-template>\n                </xsl:if>\n                <g class=\"label\">\n                    <xsl:if test=\"string(number($rangeMinX)) != 'NaN'\">\n                        <g class=\"labelX\" transform=\"matrix(1 0 0 -1 0 {-$southLabelHeight div 2 - $southLabelFontSize div 2})\">\n                            <xsl:comment>X-axis Labels</xsl:comment>\n                            <xsl:call-template name=\"drawLabelOnXAxis\">\n                                <xsl:with-param name=\"at\">\n                                    <xsl:value-of select=\"$rangeMinX\"/>\n                                </xsl:with-param>\n                                <xsl:with-param name=\"by\">\n                                    <xsl:value-of select=\"$intervalMajorX\"/>\n                                </xsl:with-param>\n                            </xsl:call-template>\n                        </g>\n                    </xsl:if>\n                    <!-- Text on the chart needs to be inverted (again) so that it appears right-side-up... -->\n                    <xsl:if test=\"string(number($rangeMinY)) != 'NaN'\">\n                        <g class=\"labelY\" transform=\"matrix(1 0 0 -1 {-$inset} {-($rangeMinY * $scaleY)})\">\n                            <xsl:comment>Y-axis Labels</xsl:comment>\n                            <xsl:call-template name=\"drawLabelOnYAxis\">\n                                <xsl:with-param name=\"at\">\n                                    <xsl:value-of select=\"$rangeMinY\"/>\n                                </xsl:with-param>\n                                <xsl:with-param name=\"by\">\n                                    <xsl:value-of select=\"$intervalMajorY\"/>\n                                </xsl:with-param>\n                            </xsl:call-template>\n                        </g>\n                    </xsl:if>\n                    <xsl:if test=\"/chart/layout/north/label and string(number($rangeMinX2)) != 'NaN'\">\n                        <g class=\"labelX2\" transform=\"matrix(1 0 0 -1 0 {$plotareaHeight + $inset + $northLabelHeight div 2 - $northLabelFontSize div 4})\">\n                            <xsl:comment>X2-axis Labels</xsl:comment>\n                            <xsl:call-template name=\"drawLabelOnX2Axis\">\n                                <xsl:with-param name=\"at\">\n                                    <xsl:value-of select=\"$rangeMinX2\"/>\n                                </xsl:with-param>\n                                <xsl:with-param name=\"by\">\n                                    <xsl:value-of select=\"$intervalMajorX2\"/>\n                                </xsl:with-param>\n                            </xsl:call-template>\n                        </g>\n                    </xsl:if>\n                    <xsl:if test=\"string(number($rangeMinY2)) != 'NaN'\">\n                        <g class=\"labelY2\" transform=\"matrix(1 0 0 -1 {$plotareaWidth + $inset} {-($rangeMinY2 * $scaleY2)})\">\n                            <xsl:comment>Y2-axis Labels</xsl:comment>\n                            <xsl:call-template name=\"drawLabelOnY2Axis\">\n                                <xsl:with-param name=\"at\">\n                                    <xsl:value-of select=\"$rangeMinY2\"/>\n                                </xsl:with-param>\n                                <xsl:with-param name=\"by\">\n                                    <xsl:value-of select=\"$intervalMajorY2\"/>\n                                </xsl:with-param>\n                            </xsl:call-template>\n                        </g>\n                    </xsl:if>\n                </g>\n                <g class=\"title\" transform=\"matrix(1 0 0 -1 {-$westWidth} {$plotareaHeight + $inset + $northLabelHeight + $northTitleHeight + $chartTitleHeight div 2 - $chartTitleFontSize div 4})\" filter=\"url(#shadowFilter)\">\n                    <xsl:comment>Chart Title</xsl:comment>\n                    <xsl:element name=\"text\">\n                        <xsl:attribute name=\"x\">\n                            <xsl:value-of select=\"$chartWidth * 0.5\"/>\n                        </xsl:attribute>\n                        <xsl:attribute name=\"y\">0</xsl:attribute>\n                        <xsl:value-of select=\"/chart/title/text()\"/>\n                    </xsl:element>\n                </g>\n                <xsl:if test=\"/chart/axis/x/title\">\n                    <g class=\"titleX\" transform=\"matrix(1 0 0 -1 0 {-$inset - $southLabelHeight - $southTitleHeight div 2 - $southTitleFontSize div 4})\">\n                        <xsl:comment>X-axis Title</xsl:comment>\n                        <xsl:element name=\"text\">\n                            <xsl:attribute name=\"x\">\n                                <xsl:value-of select=\"$plotareaWidth * 0.5\"/>\n                            </xsl:attribute>\n                            <xsl:attribute name=\"y\">0</xsl:attribute>\n                            <xsl:value-of select=\"/chart/axis/x/title/text()\"/>\n                        </xsl:element>\n                    </g>\n                </xsl:if>\n                <xsl:if test=\"/chart/axis/y/title\">\n                    <g class=\"titleY\" transform=\"matrix(1 0 0 -1 {-$inset - $westLabelWidth - $westTitleHeight div 2 + $westTitleFontSize div 4} 0), rotate(-90 0 {-$plotareaHeight * 0.5})\">\n                        <xsl:comment>Y-axis Title</xsl:comment>\n                        <xsl:element name=\"text\">\n                            <xsl:attribute name=\"x\">0</xsl:attribute>\n                            <xsl:attribute name=\"y\">\n                                <xsl:value-of select=\"-$plotareaHeight * 0.5\"/>\n                            </xsl:attribute>\n                            <xsl:value-of select=\"/chart/axis/y/title/text()\"/>\n                        </xsl:element>\n                    </g>\n                </xsl:if>\n                <xsl:if test=\"/chart/axis/x2/title\">\n                    <g class=\"titleX2\" transform=\"matrix(1 0 0 -1 0 {$plotareaHeight + $inset + $northLabelHeight + $northTitleHeight div 2 - $northTitleFontSize div 4})\">\n                        <xsl:comment>X2-axis Title</xsl:comment>\n                        <xsl:element name=\"text\">\n                            <xsl:attribute name=\"x\">\n                                <xsl:value-of select=\"$plotareaWidth * 0.5\"/>\n                            </xsl:attribute>\n                            <xsl:attribute name=\"y\">0</xsl:attribute>\n                            <xsl:value-of select=\"/chart/axis/x2/title/text()\"/>\n                        </xsl:element>\n                    </g>\n                </xsl:if>\n                <xsl:if test=\"/chart/axis/y2/title\">\n                    <g class=\"titleY2\" transform=\"matrix(1 0 0 -1 {$plotareaWidth + $inset + $eastLabelWidth + $eastTitleHeight div 2 + $eastTitleFontSize div 4} 0), rotate(-90 0 {-$plotareaHeight * 0.5})\">\n                        <xsl:comment>Y2-axis Title</xsl:comment>\n                        <xsl:element name=\"text\">\n                            <xsl:attribute name=\"x\">0</xsl:attribute>\n                            <xsl:attribute name=\"y\">\n                                <xsl:value-of select=\"-$plotareaHeight * 0.5\"/>\n                            </xsl:attribute>\n                            <xsl:value-of select=\"/chart/axis/y2/title/text()\"/>\n                        </xsl:element>\n                    </g>\n                </xsl:if>\n                <!-- Graphical markup remains inverted and is clipped to the plot area... -->\n                <clipPath id=\"clipPlotarea\">\n                    <rect height=\"{$plotareaHeight}\" width=\"{$plotareaWidth}\" y=\"0\" x=\"0\" />\n                </clipPath>\n                <g  clip-path=\"url(#clipPlotarea)\">\n                    <g class=\"plotarea\" transform=\"matrix(1 0 0 -1 0 {$plotareaHeight})\">\n                        <xsl:comment>Plot area background</xsl:comment>\n                        <!-- First draw the background color or gradient... -->\n                        <rect height=\"{$plotareaHeight}\" width=\"{$plotareaWidth}\" y=\"0\" x=\"0\" />\n                        <!-- Then optionally place one or more pictures over it... -->\n                        <xsl:if test=\"/chart/style/plotarea/picture\">\n                            <xsl:apply-templates select=\"/chart/style/plotarea/picture\"/>\n                        </xsl:if>\n                    </g>\n                    <g class=\"grid\">\n                        <xsl:comment>Grid Lines</xsl:comment>\n                        <!-- Grid lines -->\n                        <g class=\"gridVert\">\n                            <xsl:if test=\"$gridlineMajorX = 'true'\">\n                                <g class=\"gridVertMajor\">\n                                    <xsl:comment>Major Vertical Grid Lines</xsl:comment>\n                                    <xsl:call-template name=\"drawVerticalGridLine\">\n                                        <xsl:with-param name=\"at\">\n                                            <xsl:value-of select=\"$rangeMinX\"/>\n                                        </xsl:with-param>\n                                        <xsl:with-param name=\"by\">\n                                            <xsl:value-of select=\"$intervalMajorX\"/>\n                                        </xsl:with-param>\n                                    </xsl:call-template>\n                                </g>\n                            </xsl:if>\n                            <xsl:if test=\"$gridlineMinorX = 'true'\">\n                                <g class=\"gridVertMinor\">\n                                    <xsl:comment>Minor Vertical Grid Lines</xsl:comment>\n                                    <xsl:call-template name=\"drawVerticalGridLine\">\n                                        <xsl:with-param name=\"at\">\n                                            <xsl:value-of select=\"$rangeMinX\"/>\n                                        </xsl:with-param>\n                                        <xsl:with-param name=\"by\">\n                                            <xsl:value-of select=\"$intervalMinorX\"/>\n                                        </xsl:with-param>\n                                    </xsl:call-template>\n                                </g>\n                            </xsl:if>\n                        </g>\n                        <xsl:choose>\n                            <xsl:when test=\"string(number($rangeMinY)) != 'NaN'\">\n                                <g class=\"gridHorz\">\n                                    <xsl:if test=\"$gridlineMajorY = 'true'\">\n                                        <g class=\"gridHorzMajor\">\n                                            <xsl:comment>Major Horizontal Grid Lines</xsl:comment>\n                                            <xsl:call-template name=\"drawHorizontalGridLine\">\n                                                <xsl:with-param name=\"at\">\n                                                    <xsl:value-of select=\"$rangeMinY\"/>\n                                                </xsl:with-param>\n                                                <xsl:with-param name=\"by\">\n                                                    <xsl:value-of select=\"$intervalMajorY\"/>\n                                                </xsl:with-param>\n                                                <xsl:with-param name=\"min\">\n                                                    <xsl:value-of select=\"$rangeMinY\"/>\n                                                </xsl:with-param>\n                                                <xsl:with-param name=\"max\">\n                                                    <xsl:value-of select=\"$rangeMaxY\"/>\n                                                </xsl:with-param>\n                                                <xsl:with-param name=\"scale\">\n                                                    <xsl:value-of select=\"$scaleY\"/>\n                                                </xsl:with-param>\n                                            </xsl:call-template>\n                                        </g>\n                                    </xsl:if>\n                                    <xsl:if test=\"$gridlineMinorY = 'true'\">\n                                        <g class=\"gridHorzMinor\">\n                                            <xsl:comment>Minor Horizontal Grid Lines</xsl:comment>\n                                            <xsl:call-template name=\"drawHorizontalGridLine\">\n                                                <xsl:with-param name=\"at\">\n                                                    <xsl:value-of select=\"$rangeMinY\"/>\n                                                </xsl:with-param>\n                                                <xsl:with-param name=\"by\">\n                                                    <xsl:value-of select=\"$intervalMinorY\"/>\n                                                </xsl:with-param>\n                                                <xsl:with-param name=\"min\">\n                                                    <xsl:value-of select=\"$rangeMinY\"/>\n                                                </xsl:with-param>\n                                                <xsl:with-param name=\"max\">\n                                                    <xsl:value-of select=\"$rangeMaxY\"/>\n                                                </xsl:with-param>\n                                                <xsl:with-param name=\"scale\">\n                                                    <xsl:value-of select=\"$scaleY\"/>\n                                                </xsl:with-param>\n                                            </xsl:call-template>\n                                        </g>\n                                    </xsl:if>\n                                </g>\n                            </xsl:when>\n                            <xsl:when test=\"string(number($rangeMinY2)) != 'NaN'\">\n                                <g class=\"gridHorz\">\n                                    <xsl:if test=\"$gridlineMajorY = 'true'\">\n                                        <g class=\"gridHorzMajor\">\n                                            <xsl:comment>Major Horizontal Grid Lines (Y2)</xsl:comment>\n                                            <xsl:call-template name=\"drawHorizontalGridLine\">\n                                                <xsl:with-param name=\"at\">\n                                                    <xsl:value-of select=\"$rangeMinY2\"/>\n                                                </xsl:with-param>\n                                                <xsl:with-param name=\"by\">\n                                                    <xsl:value-of select=\"$intervalMajorY2\"/>\n                                                </xsl:with-param>\n                                                <xsl:with-param name=\"min\">\n                                                    <xsl:value-of select=\"$rangeMinY2\"/>\n                                                </xsl:with-param>\n                                                <xsl:with-param name=\"max\">\n                                                    <xsl:value-of select=\"$rangeMaxY2\"/>\n                                                </xsl:with-param>\n                                                <xsl:with-param name=\"scale\">\n                                                    <xsl:value-of select=\"$scaleY2\"/>\n                                                </xsl:with-param>\n                                            </xsl:call-template>\n                                        </g>\n                                    </xsl:if>\n                                    <xsl:if test=\"$gridlineMinorY = 'true'\">\n                                        <g class=\"gridHorzMinor\">\n                                            <xsl:comment>Minor Horizontal Grid Lines (Y2)</xsl:comment>\n                                            <xsl:call-template name=\"drawHorizontalGridLine\">\n                                                <xsl:with-param name=\"at\">\n                                                    <xsl:value-of select=\"$rangeMinY2\"/>\n                                                </xsl:with-param>\n                                                <xsl:with-param name=\"by\">\n                                                    <xsl:value-of select=\"$intervalMinorY2\"/>\n                                                </xsl:with-param>\n                                                <xsl:with-param name=\"min\">\n                                                    <xsl:value-of select=\"$rangeMinY2\"/>\n                                                </xsl:with-param>\n                                                <xsl:with-param name=\"max\">\n                                                    <xsl:value-of select=\"$rangeMaxY2\"/>\n                                                </xsl:with-param>\n                                                <xsl:with-param name=\"scale\">\n                                                    <xsl:value-of select=\"$scaleY2\"/>\n                                                </xsl:with-param>\n                                            </xsl:call-template>\n                                        </g>\n                                    </xsl:if>\n                                </g>\n                            </xsl:when>\n                            <xsl:otherwise/>\n                        </xsl:choose>\n                    </g>\n                    <!-- There can be any number of horizontal or vertical 'reference' lines. These are just\n                        lines drawn at the specified places on the x- or y- axis to guide the eye.\n                     -->\n                    <xsl:if test=\"//reference\">\n                        <g class=\"ref\">\n                            <xsl:if test=\"/chart/axis/x/reference or /chart/axis/x2/reference\">\n                                <g class=\"refVert\">\n                                    <xsl:comment>Vertical Reference Lines</xsl:comment>\n                                    <xsl:if test=\"/chart/axis/x/reference\">\n                                        <xsl:comment>x-axis</xsl:comment>\n                                        <xsl:apply-templates select=\"/chart/axis/x/reference\" mode=\"reference\"/>\n                                    </xsl:if>\n                                    <xsl:if test=\"/chart/axis/x2/reference\">\n                                        <xsl:comment>x2-axis</xsl:comment>\n                                        <xsl:apply-templates select=\"/chart/axis/x2/reference\" mode=\"reference\"/>\n                                    </xsl:if>\n                                </g>\n                            </xsl:if>\n                            <xsl:if test=\"/chart/axis/y/reference or /chart/axis/y2/reference\">\n                                <g class=\"refHorz\">\n                                    <xsl:comment>Horizontal Reference Lines</xsl:comment>\n                                    <xsl:if test=\"/chart/axis/y/reference\">\n                                        <xsl:comment>y-axis</xsl:comment>\n                                        <xsl:apply-templates select=\"/chart/axis/y/reference\" mode=\"reference\"/>\n                                    </xsl:if>\n                                    <xsl:if test=\"/chart/axis/y2/reference\">\n                                        <xsl:comment>y2-axis</xsl:comment>\n                                        <xsl:apply-templates select=\"/chart/axis/y2/reference\" mode=\"reference\"/>\n                                    </xsl:if>\n                                </g>\n                            </xsl:if>\n                        </g>\n                    </xsl:if>\n                    <!-- Plot the data (so this is where it all happens!) -->\n                    <g class=\"series\" filter=\"url(#invertedShadowFilter)\">\n                        <xsl:comment>Data series</xsl:comment>\n                        <xsl:apply-templates select=\"chart/series\"/>\n                    </g>\n                    <!-- Plot area border -->\n                    <g class=\"plotareaBorder\" transform=\"matrix(1 0 0 -1 0 {$plotareaHeight})\">\n                        <xsl:comment>Plot area border</xsl:comment>\n                        <xsl:element name=\"rect\">\n                            <xsl:attribute name=\"x\">0</xsl:attribute>\n                            <xsl:attribute name=\"y\">0</xsl:attribute>\n                            <xsl:attribute name=\"width\"><xsl:value-of select=\"$plotareaWidth\"/></xsl:attribute>\n                            <xsl:attribute name=\"height\"><xsl:value-of select=\"$plotareaHeight\"/></xsl:attribute>\n                        </xsl:element>\n                    </g>\n                </g>\n                <!-- Annotations are small pieces of text attached to a particular datum -->\n                <g class=\"annotation\" transform=\"matrix(1 0 0 -1 0 0)\">\n                    <xsl:comment>Annotations</xsl:comment>\n                    <xsl:apply-templates select=\"chart/series\" mode=\"annotations\"/>\n                </g>\n\n            </xsl:element>\n\n            <!-- Debug outlines -->\n            <xsl:if test=\"/chart/@debug = 'true'\">\n                <xsl:comment>Debug outlines</xsl:comment>\n                <g class=\"debug\">\n                    <xsl:comment>Chart area</xsl:comment>\n                    <rect style=\"stroke:red\" x=\"0\" y=\"1\" width=\"{$chartWidth - 1}\" height=\"{$chartHeight - 2}\" />\n                    <g class=\"debugText\">\n                        <text x=\"{$chartWidth - $chartMargin}\" y=\"{$chartHeight - $chartMargin}\" style=\"text-anchor:end\">\n                            <xsl:text>Chart (</xsl:text>\n                            <xsl:value-of select=\"$chartWidth\"/>\n                            <xsl:text> x </xsl:text>\n                            <xsl:value-of select=\"$chartHeight\"/>\n                            <xsl:text>)</xsl:text>\n                        </text>\n                    </g>\n                    <xsl:comment>Plot area</xsl:comment>\n                    <g transform=\"translate({$westWidth},{$northHeight})\">\n                        <xsl:call-template name=\"drawAreaOutline\">\n                            <xsl:with-param name=\"area\" select=\"'Plot Area'\"/>\n                            <xsl:with-param name=\"style\" select=\"'stroke:red'\"/>\n                            <xsl:with-param name=\"w\" select=\"$plotareaWidth\"/>\n                            <xsl:with-param name=\"h\" select=\"$plotareaHeight\"/>\n                        </xsl:call-template>\n                    </g>\n                    <xsl:comment>North area</xsl:comment>\n                    <g transform=\"translate({$chartMargin},{$chartMargin})\">\n                        <xsl:call-template name=\"drawAreaOutline\">\n                            <xsl:with-param name=\"area\" select=\"'Chart Title'\"/>\n                            <xsl:with-param name=\"style\" select=\"'stroke:green'\"/>\n                            <xsl:with-param name=\"w\" select=\"$chartWidth - 2 * $chartMargin\"/>\n                            <xsl:with-param name=\"h\" select=\"$chartTitleHeight\"/>\n                            <xsl:with-param name=\"fontsize\" select=\"$chartTitleFontSize\"/>\n                        </xsl:call-template>\n                    </g>\n                    <g transform=\"translate({$westWidth},{$chartMargin + $chartTitleHeight})\">\n                        <xsl:call-template name=\"drawAreaOutline\">\n                            <xsl:with-param name=\"area\" select=\"'North Title'\"/>\n                            <xsl:with-param name=\"style\" select=\"'stroke:red'\"/>\n                            <xsl:with-param name=\"w\" select=\"$plotareaWidth\"/>\n                            <xsl:with-param name=\"h\" select=\"$northTitleHeight\"/>\n                            <xsl:with-param name=\"fontsize\" select=\"$northTitleFontSize\"/>\n                        </xsl:call-template>\n                        <g transform=\"translate(0,{$northTitleHeight})\">\n                            <xsl:call-template name=\"drawAreaOutline\">\n                                <xsl:with-param name=\"area\" select=\"'North Label'\"/>\n                                <xsl:with-param name=\"style\" select=\"'stroke:green'\"/>\n                                <xsl:with-param name=\"w\" select=\"$plotareaWidth\"/>\n                                <xsl:with-param name=\"h\" select=\"$northLabelHeight\"/>\n                                <xsl:with-param name=\"fontsize\" select=\"$northLabelFontSize\"/>\n                            </xsl:call-template>\n                        </g>\n                    </g>\n                    <xsl:comment>West area</xsl:comment>\n                    <g transform=\"translate({$chartMargin},{$northHeight})\">\n                        <xsl:call-template name=\"drawAreaOutline\">\n                            <xsl:with-param name=\"area\" select=\"'West Title'\"/>\n                            <xsl:with-param name=\"style\" select=\"'stroke:red'\"/>\n                            <xsl:with-param name=\"w\" select=\"$westTitleHeight\"/>\n                            <xsl:with-param name=\"h\" select=\"$plotareaHeight\"/>\n                            <xsl:with-param name=\"fontsize\" select=\"$westTitleFontSize\"/>\n                            <xsl:with-param name=\"rotate\" select=\"-90\"/>\n                        </xsl:call-template>\n                        <g transform=\"translate({$westTitleHeight})\">\n                            <xsl:call-template name=\"drawAreaOutline\">\n                                <xsl:with-param name=\"area\" select=\"'West Label'\"/>\n                                <xsl:with-param name=\"style\" select=\"'stroke:green'\"/>\n                                <xsl:with-param name=\"w\" select=\"$westLabelWidth\"/>\n                                <xsl:with-param name=\"h\" select=\"$plotareaHeight\"/>\n                                <xsl:with-param name=\"fontsize\" select=\"$westLabelFontSize\"/>\n                                <xsl:with-param name=\"rotate\" select=\"-90\"/>\n                            </xsl:call-template>\n                        </g>\n                    </g>\n                    <xsl:comment>South area</xsl:comment>\n                    <g transform=\"translate({$westWidth},{$northHeight + $plotareaHeight + $inset})\">\n                        <xsl:call-template name=\"drawAreaOutline\">\n                            <xsl:with-param name=\"area\" select=\"'South Label'\"/>\n                            <xsl:with-param name=\"style\" select=\"'stroke:green'\"/>\n                            <xsl:with-param name=\"w\" select=\"$plotareaWidth\"/>\n                            <xsl:with-param name=\"h\" select=\"$southLabelHeight\"/>\n                            <xsl:with-param name=\"fontsize\" select=\"$southLabelFontSize\"/>\n                        </xsl:call-template>\n                        <g transform=\"translate(0,{$southLabelHeight})\">\n                            <xsl:call-template name=\"drawAreaOutline\">\n                                <xsl:with-param name=\"area\" select=\"'South Title'\"/>\n                                <xsl:with-param name=\"style\" select=\"'stroke:red'\"/>\n                                <xsl:with-param name=\"w\" select=\"$plotareaWidth\"/>\n                                <xsl:with-param name=\"h\" select=\"$southTitleHeight\"/>\n                                <xsl:with-param name=\"fontsize\" select=\"$southTitleFontSize\"/>\n                            </xsl:call-template>\n                            <xsl:if test=\"//layout/south/legend\">\n                                <g transform=\"translate(0,{$southTitleHeight + $inset})\">\n                                    <xsl:call-template name=\"drawAreaOutline\">\n                                        <xsl:with-param name=\"area\" select=\"'South Legend'\"/>\n                                        <xsl:with-param name=\"style\" select=\"'stroke:green'\"/>\n                                        <xsl:with-param name=\"w\" select=\"$plotareaWidth\"/>\n                                        <xsl:with-param name=\"h\" select=\"$southLegendDisplayHeight\"/>\n                                        <xsl:with-param name=\"fontsize\" select=\"$defaultLegendEntryHeight\"/>\n                                    </xsl:call-template>\n                                </g>\n                            </xsl:if>\n                        </g>\n                    </g>\n                    <xsl:comment>East area</xsl:comment>\n                    <g transform=\"translate({$westWidth + $plotareaWidth + $inset},{$northHeight})\">\n                        <xsl:call-template name=\"drawAreaOutline\">\n                            <xsl:with-param name=\"area\" select=\"'East Label'\"/>\n                            <xsl:with-param name=\"style\" select=\"'stroke:green'\"/>\n                            <xsl:with-param name=\"w\" select=\"$eastLabelWidth\"/>\n                            <xsl:with-param name=\"h\" select=\"$plotareaHeight\"/>\n                            <xsl:with-param name=\"fontsize\" select=\"$eastLabelFontSize\"/>\n                            <xsl:with-param name=\"rotate\" select=\"-90\"/>\n                        </xsl:call-template>\n                        <g transform=\"translate({$eastLabelWidth})\">\n                            <xsl:call-template name=\"drawAreaOutline\">\n                                <xsl:with-param name=\"area\" select=\"'East Title'\"/>\n                                <xsl:with-param name=\"style\" select=\"'stroke:red'\"/>\n                                <xsl:with-param name=\"w\" select=\"$eastTitleHeight\"/>\n                                <xsl:with-param name=\"h\" select=\"$plotareaHeight\"/>\n                                <xsl:with-param name=\"fontsize\" select=\"$eastTitleFontSize\"/>\n                                <xsl:with-param name=\"rotate\" select=\"-90\"/>\n                            </xsl:call-template>\n                            <xsl:if test=\"//layout/east/legend\">\n                                <g transform=\"translate({$eastTitleHeight + $inset})\">\n                                    <xsl:call-template name=\"drawAreaOutline\">\n                                        <xsl:with-param name=\"area\" select=\"'East Legend'\"/>\n                                        <xsl:with-param name=\"style\" select=\"'stroke:green'\"/>\n                                        <xsl:with-param name=\"w\" select=\"$eastLegendDisplayWidth\"/>\n                                        <xsl:with-param name=\"h\" select=\"$plotareaHeight\"/>\n                                        <xsl:with-param name=\"fontsize\" select=\"$defaultLegendEntryHeight\"/>\n                                        <xsl:with-param name=\"rotate\" select=\"-90\"/>\n                                    </xsl:call-template>\n                                </g>\n                            </xsl:if>\n                        </g>\n                    </g>\n                </g>\n            </xsl:if>\n        </svg>\n    </xsl:template>\n\n    <xsl:template name=\"drawAreaOutline\">\n        <xsl:param name=\"area\"/>\n        <xsl:param name=\"style\"/>\n        <xsl:param name=\"w\"/>\n        <xsl:param name=\"h\"/>\n        <xsl:param name=\"fontsize\"/>\n        <xsl:param name=\"rotate\" select=\"0\"/>\n        <rect style=\"{$style}\" x=\"0\" y=\"0\" width=\"{$w}\" height=\"{$h}\" />\n        <xsl:variable name=\"cx\" select=\"$w div 2\"/>\n        <xsl:variable name=\"cy\" select=\"$h div 2\"/>\n        <text class=\"debugText\" x=\"{$cx}\" y=\"{$cy + 5}\" transform=\"rotate({$rotate},{$cx},{$cy})\">\n            <xsl:value-of select=\"$area\"/>\n            <xsl:text> (</xsl:text>\n            <xsl:value-of select=\"$w\"/>\n            <xsl:text> x </xsl:text>\n            <xsl:value-of select=\"$h\"/>\n            <xsl:text>)</xsl:text>\n            <xsl:if test=\"$fontsize\">\n                <xsl:text> Fontsize=</xsl:text>\n                <xsl:value-of select=\"$fontsize\"/>\n            </xsl:if>\n        </text>\n    </xsl:template>\n\n    <!-- Handle the placement and scaling of any background image(s) -->\n    <xsl:template match=\"/chart/style/plotarea/picture\">\n        <xsl:variable name=\"location\">\n            <xsl:call-template name=\"getValueOrDefault\">\n                <xsl:with-param name=\"path\" select=\"@location\"/>\n                <xsl:with-param name=\"default\" select=\"'stretch'\"/>\n            </xsl:call-template>\n        </xsl:variable>\n        <xsl:variable name=\"filterName\" select=\"concat('pictureFilter',position())\"/>\n        <xsl:element name=\"image\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n            <xsl:attribute name=\"xlink:href\">\n                <xsl:value-of select=\"$protocol\"/>\n                <xsl:value-of select=\"normalize-space(text())\"/>\n            </xsl:attribute>\n            <xsl:if test=\"@opacity or $location = 'tile' or /chart/@debug = 'true'\">\n                <xsl:attribute name=\"filter\">url(#<xsl:value-of select=\"$filterName\"/>)</xsl:attribute>\n            </xsl:if>\n            <xsl:attribute name=\"preserveAspectRatio\">none</xsl:attribute>\n            <xsl:attribute name=\"x\">\n                <xsl:choose>\n                    <xsl:when test=\"$location = 'stretch' or $location = 'tile'\">0</xsl:when> <!-- ignore @width -->\n                    <xsl:when test=\"@width\">\n                        <xsl:choose>\n                            <xsl:when test=\"$location = 'left' or $location = 'topleft' or $location = 'bottomleft'\">0</xsl:when>\n                            <xsl:when test=\"$location = 'center' or $location = 'centre' or $location = 'top' or $location = 'bottom'\">\n                                <xsl:value-of select=\"($plotareaWidth - @width) div 2\"/>\n                            </xsl:when>\n                            <xsl:when test=\"$location = 'right' or $location = 'topright' or $location = 'bottomright'\">\n                                <xsl:value-of select=\"$plotareaWidth - @width\"/>\n                            </xsl:when>\n                            <xsl:otherwise>0</xsl:otherwise>\n                        </xsl:choose>\n                    </xsl:when>\n                    <xsl:otherwise>\n                        <xsl:choose>\n                            <xsl:when test=\"$location = 'left' or $location = 'topleft' or $location = 'bottomleft'\">0</xsl:when>\n                            <xsl:when test=\"$location = 'center' or $location = 'centre' or $location = 'top' or $location = 'bottom'\">\n                                <xsl:value-of select=\"($plotareaWidth - $intervalMajorX * $scaleX) div 2\"/>\n                            </xsl:when>\n                            <xsl:when test=\"$location = 'right' or $location = 'topright' or $location = 'bottomright'\">\n                                <xsl:value-of select=\"$plotareaWidth - $intervalMajorX * $scaleX\"/>\n                            </xsl:when>\n                            <xsl:otherwise>0</xsl:otherwise>\n                        </xsl:choose>\n                    </xsl:otherwise>\n                </xsl:choose>\n            </xsl:attribute>\n            <xsl:attribute name=\"y\">\n                <xsl:choose>\n                    <xsl:when test=\"$location = 'stretch' or $location = 'tile'\">0</xsl:when> <!-- ignore @height -->\n                    <xsl:when test=\"@height\">\n                        <xsl:choose>\n                            <xsl:when test=\"$location = 'top' or $location = 'topleft' or $location = 'topright'\">0</xsl:when>\n                            <xsl:when test=\"$location = 'center' or $location = 'centre' or $location = 'left' or $location = 'right'\">\n                                <xsl:value-of select=\"($plotareaHeight - @height) div 2\"/>\n                            </xsl:when>\n                            <xsl:when test=\"$location = 'bottom' or $location = 'bottomleft' or $location = 'bottomright'\">\n                                <xsl:value-of select=\"$plotareaHeight - @height\"/>\n                            </xsl:when>\n                            <xsl:otherwise>0</xsl:otherwise>\n                        </xsl:choose>\n                    </xsl:when>\n                    <xsl:otherwise>\n                        <xsl:choose>\n                            <xsl:when test=\"$location = 'top' or $location = 'topleft' or $location = 'topright'\">0</xsl:when>\n                            <xsl:when test=\"$location = 'center' or $location = 'centre' or $location = 'left' or $location = 'right'\">\n                                <xsl:value-of select=\"($plotareaHeight - $intervalMajorY * $scaleY) div 2\"/>\n                            </xsl:when>\n                            <xsl:when test=\"$location = 'bottom' or $location = 'bottomleft' or $location = 'bottomright'\">\n                                <xsl:value-of select=\"$plotareaHeight - $intervalMajorY * $scaleY\"/>\n                            </xsl:when>\n                            <xsl:otherwise>0</xsl:otherwise>\n                        </xsl:choose>\n                    </xsl:otherwise>\n                </xsl:choose>\n            </xsl:attribute>\n            <xsl:attribute name=\"width\">\n                <xsl:choose>\n                    <xsl:when test=\"$location = 'stretch'\">\n                        <xsl:value-of select=\"$plotareaWidth\"/>\n                    </xsl:when>\n                    <xsl:when test=\"@width\">\n                        <xsl:value-of select=\"@width\"/>\n                    </xsl:when>\n                    <xsl:when test=\"$location = 'tile'\">\n                        <xsl:value-of select=\"$intervalMajorX * $scaleX\"/>\n                    </xsl:when>\n                    <xsl:otherwise>\n                        <xsl:value-of select=\"$intervalMajorX * $scaleX\"/>\n                    </xsl:otherwise>\n                </xsl:choose>\n            </xsl:attribute>\n            <xsl:attribute name=\"height\">\n                <xsl:choose>\n                    <xsl:when test=\"$location = 'stretch'\">\n                        <xsl:value-of select=\"$plotareaHeight\"/>\n                    </xsl:when>\n                    <xsl:when test=\"@height\">\n                        <xsl:value-of select=\"@height\"/>\n                    </xsl:when>\n                    <xsl:when test=\"$location = 'tile'\">\n                        <xsl:value-of select=\"$intervalMajorY * $scaleY\"/>\n                    </xsl:when>\n                    <xsl:otherwise>\n                        <xsl:value-of select=\"$intervalMajorY * $scaleY\"/>\n                    </xsl:otherwise>\n                </xsl:choose>\n            </xsl:attribute>\n            <xsl:if test=\"@opacity or $location = 'tile' or /chart/@debug = 'true'\">\n                <!-- Define a filter to tile or fade the background image... -->\n                <xsl:variable name=\"tileareaWidth\" >\n                    <xsl:choose>\n                        <xsl:when test=\"@width\">\n                            <xsl:value-of select=\"format-number($plotareaWidth div @width * 100,'#0.##')\"/>\n                        </xsl:when>\n                        <xsl:when test=\"$location = 'tile'\">\n                            <xsl:value-of select=\"format-number($plotareaWidth div ($intervalMajorX * $scaleX) * 100,'#0.##')\"/>\n                        </xsl:when>\n                        <xsl:otherwise>100</xsl:otherwise>\n                    </xsl:choose>\n                </xsl:variable>\n                <xsl:variable name=\"tileareaHeight\" >\n                    <xsl:choose>\n                        <xsl:when test=\"@height\">\n                            <xsl:value-of select=\"format-number($plotareaHeight div @height * 100,'#0.##')\"/>\n                        </xsl:when>\n                        <xsl:when test=\"$location = 'tile'\">\n                            <xsl:value-of select=\"format-number($plotareaHeight div ($intervalMajorY * $scaleY) * 100,'#0.##')\"/>\n                        </xsl:when>\n                        <xsl:otherwise>100</xsl:otherwise>\n                    </xsl:choose>\n                </xsl:variable>\n                <filter primitiveUnits=\"objectBoundingBox\" filterUnits=\"objectBoundingBox\"\n                    x=\"0\" y=\"0\" width=\"{$tileareaWidth}%\" height=\"{$tileareaHeight}%\" id=\"{$filterName}\">\n                    <xsl:if test=\"$location = 'tile'\">\n                        <feOffset x=\"0\" y=\"0\" width=\"100%\" height=\"100%\"/>\n                        <feTile />\n                    </xsl:if>\n                    <xsl:choose>\n                        <xsl:when test=\"/chart/@debug = 'true'\">\n                            <feComponentTransfer>\n                                <feFuncA type=\"linear\" slope=\"{$debugOpacity}\" intercept=\"0\"/>\n                            </feComponentTransfer>\n                        </xsl:when>\n                        <xsl:otherwise>\n                            <xsl:if test=\"@opacity\">\n                                <feComponentTransfer>\n                                    <feFuncA type=\"linear\" slope=\"{@opacity}\" intercept=\"0\"/>\n                                </feComponentTransfer>\n                            </xsl:if>\n                        </xsl:otherwise>\n                    </xsl:choose>\n                </filter>\n            </xsl:if>\n        </xsl:element>\n    </xsl:template>\n\n    <xsl:template match=\"chart/style/plotarea/gradient/color\" mode=\"getStops\">\n        <!-- IN:    <color offset=\"25%\" opacity=\"0.4\">skyblue</color>                   -->\n        <!-- OUT:   <stop offset=\"25%\" style=\"stop-color:skyblue;stop-opacity:0.4;\"/>   -->\n        <xsl:element name=\"stop\">\n            <xsl:copy-of select=\"@offset\"/>\n            <xsl:attribute name=\"style\">\n                <xsl:text>stop-color:</xsl:text>\n                <xsl:value-of select=\"normalize-space(text())\"/>\n                <xsl:if test=\"@opacity\">\n                    <xsl:text>;stop-opacity:</xsl:text>\n                    <xsl:value-of select=\"@opacity\"/>\n                </xsl:if>\n                <xsl:text>;</xsl:text>\n            </xsl:attribute>\n        </xsl:element>\n    </xsl:template>\n\n    <xsl:template match=\"chart/series\">\n        <!-- If the series has not been explicitly hidden by the \"visible='false'\" attribute then draw it... -->\n        <xsl:if test=\"not(@visible) or @visible != 'false'\">\n            <xsl:variable name=\"pos\" select=\"position()\"/>\n            <xsl:element name=\"g\">\n                <xsl:attribute name=\"class\">series<xsl:value-of select=\"$pos\"/></xsl:attribute>\n                <xsl:element name=\"title\">\n                    <xsl:choose>\n                        <xsl:when test=\"title\">\n                            <xsl:value-of select=\"title/text()\"/>\n                        </xsl:when>\n                        <xsl:otherwise>\n                            <xsl:text>Series </xsl:text><xsl:value-of select=\"$pos\"/>\n                        </xsl:otherwise>\n                    </xsl:choose>\n                </xsl:element>\n                <xsl:element name=\"path\">\n                    <xsl:attribute name=\"d\">\n                        <xsl:for-each select=\"datum\">\n                            <xsl:choose>\n                                <xsl:when test=\"string(number(@y)) = 'NaN' and string(number(@y2)) = 'NaN'\">\n                                    <!-- Missing y (or y2) value, so leave a break in this line -->\n                                </xsl:when>\n                                <xsl:otherwise>\n                                    <xsl:variable name=\"cmd\">\n                                        <xsl:choose>\n                                            <xsl:when test=\"(@y  and string(number(preceding-sibling::datum[1]/@y))  = 'NaN')\n                                                         or (@y2 and string(number(preceding-sibling::datum[1]/@y2)) = 'NaN')\">\n                                                <xsl:text>M</xsl:text> <!-- Move to absolute co-ordinate -->\n                                            </xsl:when>\n                                            <xsl:otherwise>\n                                                <xsl:text>L</xsl:text> <!-- Line to absolute co-ordinate -->\n                                            </xsl:otherwise>\n                                        </xsl:choose>\n                                    </xsl:variable>\n                                    <xsl:variable name=\"x\">\n                                        <xsl:choose>\n                                            <!-- When both x and x2 attributes are omitted, use datum position - 1 on the x-axis -->\n                                            <xsl:when test=\"string(number(@x)) = 'NaN' and string(number(@x2)) = 'NaN'\">\n                                                <xsl:value-of select=\"format-number((position() - 1 - $rangeMinX) * $scaleX,'#0.##')\"/>\n                                            </xsl:when>\n                                            <!-- When x is specified, use it on the x-axis -->\n                                            <xsl:when test=\"@x\">\n                                                <xsl:value-of select=\"format-number((@x - $rangeMinX) * $scaleX,'#0.##')\"/>\n                                            </xsl:when>\n                                            <!-- Otherwise, x2 is specified, so use it on the x2-axis -->\n                                            <xsl:otherwise>\n                                                <xsl:value-of select=\"format-number((@x2 - $rangeMinX2) * $scaleX2,'#0.##')\"/>\n                                            </xsl:otherwise>\n                                        </xsl:choose>\n                                    </xsl:variable>\n                                    <xsl:variable name=\"y\">\n                                        <xsl:choose>\n                                            <xsl:when test=\"@y\">\n                                                <xsl:value-of select=\"format-number((@y - $rangeMinY) * $scaleY,'#0.##')\"/>\n                                            </xsl:when>\n                                            <xsl:otherwise>\n                                                <xsl:value-of select=\"format-number((@y2 - $rangeMinY2) * $scaleY2,'#0.##')\"/>\n                                            </xsl:otherwise>\n                                        </xsl:choose>\n                                    </xsl:variable>\n                                    <!-- Emit a MoveTo(x,y) or a LineTo(x,y) command -->\n                                    <xsl:value-of select=\"$cmd\"/>\n                                    <xsl:text> </xsl:text>\n                                    <xsl:value-of select=\"$x\"/>\n                                    <xsl:text> </xsl:text>\n                                    <xsl:value-of select=\"$y\"/>\n                                    <xsl:text> </xsl:text>\n                                    <!-- If the last command was MoveTo and the next datum is missing then draw a dot -->\n                                    <xsl:if test=\"($cmd = 'M')\n                                                 and ((@y  and string(number(following-sibling::datum[1]/@y))  = 'NaN')\n                                                 or   (@y2 and string(number(following-sibling::datum[1]/@y2)) = 'NaN'))\">\n                                        <xsl:text>L </xsl:text> <!-- Draw a Line to the place we just moved to! -->\n                                        <xsl:value-of select=\"$x\"/>\n                                        <xsl:text> </xsl:text>\n                                        <xsl:value-of select=\"$y\"/>\n                                        <xsl:text> </xsl:text>\n                                    </xsl:if>\n                                </xsl:otherwise>\n                            </xsl:choose>\n                        </xsl:for-each>\n                    </xsl:attribute>\n                </xsl:element>\n            </xsl:element>\n        </xsl:if>\n    </xsl:template>\n\n    <xsl:template match=\"chart/series\" mode=\"annotations\">\n        <xsl:for-each select=\"datum\">\n            <xsl:if test=\"text() and (@y or @y2)\">\n                <xsl:variable name=\"x\">\n                    <xsl:choose>\n                        <xsl:when test=\"string(number(@x)) = 'NaN' and string(number(@x2)) = 'NaN'\">\n                            <xsl:value-of select=\"format-number((position() - 1 - $rangeMinX) * $scaleX,'#0.##')\"/>\n                        </xsl:when>\n                        <xsl:when test=\"@x\">\n                            <xsl:value-of select=\"format-number((@x - $rangeMinX) * $scaleX,'#0.##')\"/>\n                        </xsl:when>\n                        <xsl:otherwise>\n                            <xsl:value-of select=\"format-number((@x2 - $rangeMinX2) * $scaleX2,'#0.##')\"/>\n                        </xsl:otherwise>\n                    </xsl:choose>\n                </xsl:variable>\n                <xsl:variable name=\"y\">\n                    <xsl:choose>\n                        <xsl:when test=\"@y\">\n                            <xsl:value-of select=\"format-number((@y - $rangeMinY) * $scaleY,'#0.##')\"/>\n                        </xsl:when>\n                        <xsl:otherwise>\n                            <xsl:value-of select=\"format-number((@y2 - $rangeMinY2) * $scaleY2,'#0.##')\"/>\n                        </xsl:otherwise>\n                    </xsl:choose>\n                </xsl:variable>\n                <xsl:variable name=\"radius\" select=\"$chartWidth div 100\"/>\n                <circle cx=\"{$x}\" cy=\"{-$y}\" r=\"{$radius}\" />\n                <text x=\"{$x}\" y=\"{-$y - $radius - $inset}\" class=\"annotationText\"><xsl:value-of select=\"normalize-space(text())\"/></text>\n            </xsl:if>\n        </xsl:for-each>\n    </xsl:template>\n\n    <xsl:template match=\"chart/series\" mode=\"css-style-sheet\">\n        <xsl:variable name=\"pos\" select=\"position() - 1\"/>\n        <xsl:variable name=\"h\" select=\"($seriesHueInitial + $pos * $seriesHueStep) mod 360\"/>\n        <xsl:variable name=\"s\" select=\"$seriesSaturationMin + $seriesSaturationStep * (($seriesSaturationLevels - 1) - ($pos mod $seriesSaturationLevels))\"/>\n        <xsl:variable name=\"v\" select=\"$seriesBrightnessMin + $seriesBrightnessStep * (($seriesBrightnessLevels - 1) - ($pos mod $seriesBrightnessLevels))\"/>\n        <xsl:variable name=\"rgb\">\n            <xsl:call-template name=\"hsv2rgb\">\n                    <xsl:with-param name=\"h\" select=\"$h\"/>\n                    <xsl:with-param name=\"s\" select=\"$s\"/>\n                    <xsl:with-param name=\"v\" select=\"$v\"/>\n            </xsl:call-template>\n        </xsl:variable>\n        <xsl:text>    .series</xsl:text><xsl:value-of select=\"position()\"/>\n        <xsl:text>        {stroke:</xsl:text><xsl:value-of select=\"normalize-space($rgb)\"/>;<xsl:value-of select=\"@style\"/>}\n    </xsl:template>\n\n    <!-- HSV to RGB converter (to compute default series colors) -->\n    <xsl:template name=\"hsv2rgb\">\n        <xsl:param name=\"h\" select=\"0\"/>\n        <xsl:param name=\"s\" select=\"0\"/>\n        <xsl:param name=\"v\" select=\"0\"/>\n        <xsl:choose>\n            <xsl:when test=\"$s = 0\">\n                <xsl:text>rgb(</xsl:text><xsl:value-of select=\"100 * $v\"/>%,<xsl:value-of select=\"100 * $v\"/>%,<xsl:value-of select=\"100 * $v\"/><xsl:text>%)</xsl:text>\n            </xsl:when>\n            <xsl:otherwise>\n                <xsl:variable name=\"sextant\" select=\"floor($h div 60)\"/>\n                <xsl:variable name=\"f\" select=\"$h div 60 - $sextant\"/>\n                <xsl:variable name=\"p\" select=\"100 * $v * (1 - $s)\"/>\n                <xsl:variable name=\"q\" select=\"100 * $v * (1 - $s * $f)\"/>\n                <xsl:variable name=\"t\" select=\"100 * $v * (1 - $s * (1 - $f))\"/>\n                <xsl:variable name=\"u\" select=\"100 * $v\"/>\n                <xsl:choose>\n                    <xsl:when test=\"$sextant = 0\">\n                        <xsl:text>rgb(</xsl:text><xsl:value-of select=\"format-number($u,'#0.##')\"/>%,<xsl:value-of select=\"format-number($t,'#0.##')\"/>%,<xsl:value-of select=\"format-number($p,'#0.##')\"/><xsl:text>%)</xsl:text>\n                    </xsl:when>\n                    <xsl:when test=\"$sextant = 1\">\n                        <xsl:text>rgb(</xsl:text><xsl:value-of select=\"format-number($q,'#0.##')\"/>%,<xsl:value-of select=\"format-number($u,'#0.##')\"/>%,<xsl:value-of select=\"format-number($p,'#0.##')\"/><xsl:text>%)</xsl:text>\n                    </xsl:when>\n                    <xsl:when test=\"$sextant = 2\">\n                        <xsl:text>rgb(</xsl:text><xsl:value-of select=\"format-number($p,'#0.##')\"/>%,<xsl:value-of select=\"format-number($u,'#0.##')\"/>%,<xsl:value-of select=\"format-number($t,'#0.##')\"/><xsl:text>%)</xsl:text>\n                    </xsl:when>\n                    <xsl:when test=\"$sextant = 3\">\n                        <xsl:text>rgb(</xsl:text><xsl:value-of select=\"format-number($p,'#0.##')\"/>%,<xsl:value-of select=\"format-number($q,'#0.##')\"/>%,<xsl:value-of select=\"format-number($u,'#0.##')\"/><xsl:text>%)</xsl:text>\n                    </xsl:when>\n                    <xsl:when test=\"$sextant = 4\">\n                        <xsl:text>rgb(</xsl:text><xsl:value-of select=\"format-number($t,'#0.##')\"/>%,<xsl:value-of select=\"format-number($p,'#0.##')\"/>%,<xsl:value-of select=\"format-number($u,'#0.##')\"/><xsl:text>%)</xsl:text>\n                    </xsl:when>\n                    <xsl:otherwise> <!-- $sextant = 5 -->\n                        <xsl:text>rgb(</xsl:text><xsl:value-of select=\"format-number($u,'#0.##')\"/>%,<xsl:value-of select=\"format-number($p,'#0.##')\"/>%,<xsl:value-of select=\"format-number($q,'#0.##')\"/><xsl:text>%)</xsl:text>\n                    </xsl:otherwise>\n                </xsl:choose>\n            </xsl:otherwise>\n        </xsl:choose>\n    </xsl:template>\n\n    <xsl:template name=\"drawLegend\">\n        <xsl:param name=\"legendOriginX\"/>\n        <xsl:param name=\"legendOriginY\"/>\n        <xsl:param name=\"legendWidth\"/>\n        <xsl:param name=\"legendHeight\"/>\n        <xsl:param name=\"legendColumns\" select=\"1\"/>\n        <xsl:variable name=\"columns\">\n            <xsl:call-template name=\"getValueOrDefault\">\n                <xsl:with-param name=\"path\" select=\"$legendColumns\"/>\n                <xsl:with-param name=\"default\" select=\"1\"/>\n            </xsl:call-template>\n        </xsl:variable>\n\n        <xsl:variable name=\"legendEntryHeight\" select=\"$defaultLabelHeight\"/>\n        <xsl:variable name=\"legendEntryWidth\" select=\"$legendWidth div $columns\"/>\n        <xsl:variable name=\"legendLineWidth\" select=\"$legendEntryWidth div 5\"/>\n\n        <g class=\"series\" transform=\"matrix(1 0 0 -1 {$legendOriginX} {$legendOriginY})\">\n            <xsl:for-each select=\"chart/series\">\n                <xsl:if test=\"not(@visible) or @visible != 'false'\">\n                    <xsl:variable name=\"row\" select=\"floor((position() - 1) div $columns)\"/>\n                    <xsl:variable name=\"col\" select=\"(position() - 1) - ($row * $columns)\"/>\n                    <xsl:variable name=\"x\" select=\"$col * $legendEntryWidth\"/>\n                    <xsl:variable name=\"y\" select=\"$row * $legendEntryHeight + $inset\"/>\n                    <xsl:variable name=\"pos\" select=\"position()\"/>\n                    <xsl:variable name=\"clip\" select=\"concat('clip',$pos,'.',$legendOriginX,',',$legendOriginY)\"/>\n                    <xsl:element name=\"line\">\n                        <xsl:attribute name=\"class\">series<xsl:value-of select=\"$pos\"/>\n                        </xsl:attribute>\n                        <xsl:attribute name=\"x1\">\n                            <xsl:value-of select=\"$x\"/>\n                        </xsl:attribute>\n                        <xsl:attribute name=\"y1\">\n                            <xsl:value-of select=\"$y + $legendEntryHeight div 2\"/>\n                        </xsl:attribute>\n                        <xsl:attribute name=\"x2\">\n                            <xsl:value-of select=\"$x + $legendLineWidth\"/>\n                        </xsl:attribute>\n                        <xsl:attribute name=\"y2\">\n                            <xsl:value-of select=\"$y + $legendEntryHeight div 2\"/>\n                        </xsl:attribute>\n                    </xsl:element>\n                    <clipPath id=\"{$clip}\">\n                        <rect height=\"{$legendEntryHeight + $inset * 2}\" width=\"{$legendEntryWidth - $inset}\" y=\"{$y - $inset}\" x=\"{$x}\"/>\n                    </clipPath>\n                    <text clip-path=\"url(#{$clip})\" class=\"legend\" x=\"{$x + $legendLineWidth + $inset}\" y=\"{$y + 2 * $legendEntryHeight div 3}\">\n                        <xsl:choose>\n                            <xsl:when test=\"title\">\n                                <xsl:value-of select=\"title/text()\"/>\n                            </xsl:when>\n                            <xsl:otherwise>\n                                <xsl:text>Series </xsl:text><xsl:value-of select=\"$pos\"/>\n                            </xsl:otherwise>\n                        </xsl:choose>\n                    </text>\n                </xsl:if>\n            </xsl:for-each>\n        </g>\n    </xsl:template>\n\n    <xsl:template match=\"//x/reference\" mode=\"reference\">\n        <xsl:variable name=\"here\" select=\"format-number((@at  - $rangeMinX) * $scaleX,'#0.##')\"/>\n        <xsl:element name=\"line\">\n            <xsl:attribute name=\"x1\"><xsl:value-of select=\"$here\"/></xsl:attribute>\n            <xsl:attribute name=\"y1\">0</xsl:attribute>\n            <xsl:attribute name=\"x2\"><xsl:value-of select=\"$here\"/></xsl:attribute>\n            <xsl:attribute name=\"y2\"><xsl:value-of select=\"$plotareaHeight\"/></xsl:attribute>\n            <xsl:copy-of select=\"@style\"/>\n            <xsl:element name=\"title\">\n                <xsl:value-of select=\"@at\"/>\n                <xsl:if test=\"text()\">\n                    <xsl:text> = </xsl:text>\n                    <xsl:value-of select=\"normalize-space(text())\"/>\n                </xsl:if>\n            </xsl:element>\n        </xsl:element>\n    </xsl:template>\n\n    <xsl:template match=\"//y/reference\" mode=\"reference\">\n        <xsl:variable name=\"here\" select=\"format-number((@at  - $rangeMinY) * $scaleY,'#0.##')\"/>\n        <xsl:element name=\"line\">\n            <xsl:attribute name=\"x1\">0</xsl:attribute>\n            <xsl:attribute name=\"y1\"><xsl:value-of select=\"$here\"/></xsl:attribute>\n            <xsl:attribute name=\"x2\"><xsl:value-of select=\"$plotareaWidth\"/></xsl:attribute>\n            <xsl:attribute name=\"y2\"><xsl:value-of select=\"$here\"/></xsl:attribute>\n            <xsl:copy-of select=\"@style\"/>\n            <xsl:element name=\"title\">\n                <xsl:value-of select=\"@at\"/>\n                <xsl:if test=\"text()\">\n                    <xsl:text> = </xsl:text>\n                    <xsl:value-of select=\"normalize-space(text())\"/>\n                </xsl:if>\n            </xsl:element>\n        </xsl:element>\n    </xsl:template>\n\n    <xsl:template match=\"//x2/reference\" mode=\"reference\">\n        <xsl:variable name=\"here\" select=\"format-number((@at  - $rangeMinX2) * $scaleX2,'#0.##')\"/>\n        <xsl:element name=\"line\">\n            <xsl:attribute name=\"x1\"><xsl:value-of select=\"$here\"/></xsl:attribute>\n            <xsl:attribute name=\"y1\">0</xsl:attribute>\n            <xsl:attribute name=\"x2\"><xsl:value-of select=\"$here\"/></xsl:attribute>\n            <xsl:attribute name=\"y2\"><xsl:value-of select=\"$plotareaHeight\"/></xsl:attribute>\n            <xsl:copy-of select=\"@style\"/>\n            <xsl:element name=\"title\">\n                <xsl:value-of select=\"@at\"/>\n                <xsl:if test=\"text()\">\n                    <xsl:text> = </xsl:text>\n                    <xsl:value-of select=\"normalize-space(text())\"/>\n                </xsl:if>\n            </xsl:element>\n        </xsl:element>\n    </xsl:template>\n\n    <xsl:template match=\"//y2/reference\" mode=\"reference\">\n        <xsl:variable name=\"here\" select=\"format-number((@at  - $rangeMinY2) * $scaleY2,'#0.##')\"/>\n        <xsl:element name=\"line\">\n            <xsl:attribute name=\"x1\">0</xsl:attribute>\n            <xsl:attribute name=\"y1\"><xsl:value-of select=\"$here\"/></xsl:attribute>\n            <xsl:attribute name=\"x2\"><xsl:value-of select=\"$plotareaWidth\"/></xsl:attribute>\n            <xsl:attribute name=\"y2\"><xsl:value-of select=\"$here\"/></xsl:attribute>\n            <xsl:copy-of select=\"@style\"/>\n            <xsl:element name=\"title\">\n                <xsl:value-of select=\"@at\"/>\n                <xsl:if test=\"text()\">\n                    <xsl:text> = </xsl:text>\n                    <xsl:value-of select=\"normalize-space(text())\"/>\n                </xsl:if>\n            </xsl:element>\n        </xsl:element>\n    </xsl:template>\n\n    <xsl:template name=\"drawVerticalGridLine\">\n        <xsl:param name=\"at\"/>\n        <xsl:param name=\"by\"/>\n        <xsl:variable name=\"here\" select=\"format-number(($at - $rangeMinX) * $scaleX,'#0.##')\"/>\n        <xsl:element name=\"line\">\n            <xsl:attribute name=\"x1\"><xsl:value-of select=\"$here\"/></xsl:attribute>\n            <xsl:attribute name=\"y1\">0</xsl:attribute>\n            <xsl:attribute name=\"x2\"><xsl:value-of select=\"$here\"/></xsl:attribute>\n            <xsl:attribute name=\"y2\"><xsl:value-of select=\"$plotareaHeight\"/></xsl:attribute>\n        </xsl:element>\n        <xsl:if test=\"$at &lt; $rangeMaxX\">\n            <xsl:call-template name=\"drawVerticalGridLine\">\n                <xsl:with-param name=\"at\">\n                    <xsl:value-of select=\"$at + $by\"/>\n                </xsl:with-param>\n                <xsl:with-param name=\"by\">\n                    <xsl:value-of select=\"$by\"/>\n                </xsl:with-param>\n            </xsl:call-template>\n        </xsl:if>\n    </xsl:template>\n\n    <xsl:template name=\"drawLabelOnXAxis\">\n        <xsl:param name=\"at\"/>\n        <xsl:param name=\"by\"/>\n        <xsl:element name=\"g\">\n            <xsl:attribute name=\"transform\">\n                <xsl:text>translate(</xsl:text>\n                <xsl:value-of select=\"format-number(($at - $rangeMinX) * $scaleX,'#0.###')\"/>\n                <xsl:text>)</xsl:text>\n                <xsl:if test=\"$southLabelRotation != 0\">\n                    <xsl:text> rotate(</xsl:text>\n                    <xsl:value-of select=\"$southLabelRotation\"/>\n                    <xsl:text>,0,</xsl:text>\n                    <xsl:value-of select=\"-$southLabelFontSize div 4\"/>\n                    <xsl:text>)</xsl:text>\n                </xsl:if>\n            </xsl:attribute>\n            <xsl:element name=\"text\">\n                <xsl:choose>\n                    <xsl:when test=\"/chart/axis/x/label\">   <!-- use the next specified label -->\n                        <xsl:value-of select=\"/chart/axis/x/label[position() = floor(($at - $rangeMinX) div $intervalMajorX) + 1]/text()\"/>\n                    </xsl:when>\n                    <xsl:otherwise>                         <!-- generate a numeric label -->\n                        <xsl:value-of select=\"format-number($at,$formatLabelX)\"/>\n                    </xsl:otherwise>\n                </xsl:choose>\n            </xsl:element>\n        </xsl:element>\n        <xsl:if test=\"format-number($at,$formatLabelX) &lt; $rangeMaxX\">\n            <xsl:call-template name=\"drawLabelOnXAxis\">\n                <xsl:with-param name=\"at\">\n                    <xsl:value-of select=\"$at + $by\"/>\n                </xsl:with-param>\n                <xsl:with-param name=\"by\">\n                    <xsl:value-of select=\"$by\"/>\n                </xsl:with-param>\n            </xsl:call-template>\n        </xsl:if>\n    </xsl:template>\n\n    <xsl:template name=\"drawLabelOnX2Axis\">\n        <xsl:param name=\"at\"/>\n        <xsl:param name=\"by\"/>\n        <xsl:element name=\"g\">\n            <xsl:attribute name=\"transform\">\n                <xsl:text>translate(</xsl:text>\n                <xsl:value-of select=\"format-number(($at - $rangeMinX2) * $scaleX2,'#0.###')\"/>\n                <xsl:text>)</xsl:text>\n                <xsl:if test=\"$northLabelRotation != 0\">\n                    <xsl:text> rotate(</xsl:text>\n                    <xsl:value-of select=\"$northLabelRotation\"/>\n                    <xsl:text>,0,</xsl:text>\n                    <xsl:value-of select=\"-$northLabelFontSize div 4\"/>\n                    <xsl:text>)</xsl:text>\n                </xsl:if>\n            </xsl:attribute>\n            <xsl:element name=\"text\">\n                <xsl:choose>\n                    <xsl:when test=\"/chart/axis/x2/label\">   <!-- use the next specified label -->\n                        <xsl:value-of select=\"/chart/axis/x2/label[position() = floor(($at - $rangeMinX2) div $intervalMajorX2) + 1]/text()\"/>\n                    </xsl:when>\n                    <xsl:otherwise>                          <!-- generate a numeric label -->\n                        <xsl:value-of select=\"format-number($at,$formatLabelX2)\"/>\n                    </xsl:otherwise>\n                </xsl:choose>\n            </xsl:element>\n        </xsl:element>\n        <xsl:if test=\"format-number($at,$formatLabelX2) &lt; $rangeMaxX2\">\n            <xsl:call-template name=\"drawLabelOnX2Axis\">\n                <xsl:with-param name=\"at\">\n                    <xsl:value-of select=\"$at + $by\"/>\n                </xsl:with-param>\n                <xsl:with-param name=\"by\">\n                    <xsl:value-of select=\"$by\"/>\n                </xsl:with-param>\n            </xsl:call-template>\n        </xsl:if>\n    </xsl:template>\n\n    <xsl:template name=\"drawHorizontalGridLine\">\n        <xsl:param name=\"at\"/>\n        <xsl:param name=\"by\"/>\n        <xsl:param name=\"min\"/>\n        <xsl:param name=\"max\"/>\n        <xsl:param name=\"scale\"/>\n        <xsl:element name=\"line\">\n            <xsl:attribute name=\"x1\">0</xsl:attribute>\n            <xsl:attribute name=\"y1\">\n                <xsl:value-of select=\"format-number(($at - $min) * $scale,'#0.##')\"/>\n            </xsl:attribute>\n            <xsl:attribute name=\"x2\">\n                <xsl:value-of select=\"$plotareaWidth\"/>\n            </xsl:attribute>\n            <xsl:attribute name=\"y2\">\n                <xsl:value-of select=\"format-number(($at - $min) * $scale,'#0.##')\"/>\n            </xsl:attribute>\n        </xsl:element>\n        <xsl:if test=\"$at &lt; $max\">\n            <xsl:call-template name=\"drawHorizontalGridLine\">\n                <xsl:with-param name=\"at\">\n                    <xsl:value-of select=\"$at + $by\"/>\n                </xsl:with-param>\n                <xsl:with-param name=\"by\">\n                    <xsl:value-of select=\"$by\"/>\n                </xsl:with-param>\n                <xsl:with-param name=\"min\">\n                    <xsl:value-of select=\"$min\"/>\n                </xsl:with-param>\n                <xsl:with-param name=\"max\">\n                    <xsl:value-of select=\"$max\"/>\n                </xsl:with-param>\n                <xsl:with-param name=\"scale\">\n                    <xsl:value-of select=\"$scale\"/>\n                </xsl:with-param>\n            </xsl:call-template>\n        </xsl:if>\n    </xsl:template>\n\n    <xsl:template name=\"drawLabelOnYAxis\">\n        <xsl:param name=\"at\"/>\n        <xsl:param name=\"by\"/>\n        <xsl:element name=\"g\">\n            <xsl:attribute name=\"transform\">\n                <xsl:text>translate(</xsl:text>\n                <xsl:value-of select=\"-$inset\"/>\n                <xsl:text>,</xsl:text>\n                <xsl:value-of select=\"format-number(-$at * $scaleY,'#0.###')\"/>\n                <xsl:text>)</xsl:text>\n                <xsl:if test=\"$westLabelRotation != 0\">\n                    <xsl:text> rotate(</xsl:text>\n                    <xsl:value-of select=\"$westLabelRotation\"/>\n                    <xsl:text>)</xsl:text>\n                </xsl:if>\n            </xsl:attribute>\n            <xsl:element name=\"text\">\n                <xsl:value-of select=\"format-number($at,$formatLabelY)\"/>\n            </xsl:element>\n        </xsl:element>\n        <xsl:if test=\"format-number($at,$formatLabelY) &lt; $rangeMaxY\">\n            <xsl:call-template name=\"drawLabelOnYAxis\">\n                <xsl:with-param name=\"at\">\n                    <xsl:value-of select=\"$at + $by\"/>\n                </xsl:with-param>\n                <xsl:with-param name=\"by\">\n                    <xsl:value-of select=\"$by\"/>\n                </xsl:with-param>\n            </xsl:call-template>\n        </xsl:if>\n    </xsl:template>\n\n    <xsl:template name=\"drawLabelOnY2Axis\">\n        <xsl:param name=\"at\"/>\n        <xsl:param name=\"by\"/>\n        <xsl:element name=\"g\">\n            <xsl:attribute name=\"transform\">\n                <xsl:text>translate(</xsl:text>\n                <xsl:value-of select=\"$inset\"/>\n                <xsl:text>,</xsl:text>\n                <xsl:value-of select=\"format-number(-$at * $scaleY2,'#0.###')\"/>\n                <xsl:text>)</xsl:text>\n                <xsl:if test=\"$eastLabelRotation != 0\">\n                    <xsl:text> rotate(</xsl:text>\n                    <xsl:value-of select=\"$eastLabelRotation\"/>\n                    <xsl:text>)</xsl:text>\n                </xsl:if>\n            </xsl:attribute>\n            <xsl:element name=\"text\">\n                <xsl:value-of select=\"format-number($at,$formatLabelY2)\"/>\n            </xsl:element>\n        </xsl:element>\n        <xsl:if test=\"format-number($at,$formatLabelY2) &lt; $rangeMaxY2\">\n            <xsl:call-template name=\"drawLabelOnY2Axis\">\n                <xsl:with-param name=\"at\">\n                    <xsl:value-of select=\"$at + $by\"/>\n                </xsl:with-param>\n                <xsl:with-param name=\"by\">\n                    <xsl:value-of select=\"$by\"/>\n                </xsl:with-param>\n            </xsl:call-template>\n        </xsl:if>\n    </xsl:template>\n\n</xsl:stylesheet>\n", "mimetype": "text/xml", "datatype": "ebcdic", "extension": ".xml"}, "ZIPDOCS": {"ttr": 39681, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x07\\x01\\x05\\x02\\x1f\\x01\\x05\\x02\\x1f\\t0\\x18\\xc6\\x18\\xc6\\x00\\x00\\xc6\\xc1\\xd1\\xc1@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-01-21T00:00:00", "modifydate": "2005-01-21T09:30:07", "lines": 6342, "newlines": 6342, "modlines": 0, "user": "FAJA"}, "mimetype": "application/zip", "datatype": "binary", "extension": ".zip"}, "ZIPFILE": {"ttr": 20737, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x043\\x7f\\x01\\x043\\x7f\\t!\\x16\\x8d\\x16\\x8d\\x00\\x00\\xc6\\xc1\\xd1\\xc1@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-12-02T00:00:00", "modifydate": "2004-12-02T09:21:00", "lines": 5773, "newlines": 5773, "modlines": 0, "user": "FAJA"}, "mimetype": "application/zip", "datatype": "binary", "extension": ".zip"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT706/FILE706.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT706", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}