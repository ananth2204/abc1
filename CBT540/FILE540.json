{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012313000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 293930, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE540.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE540.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\x0e'", "DS1TRBAL": "b'\\t\\x90'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03\\xfb\\x00\\n\\x03\\xfc\\x00\\x00\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x16\\x9f\\x01\\x02\\x16\\x9f\\x11\\x00\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-06-18T00:00:00", "modifydate": "2002-06-18T11:00:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 448    FILE:  540\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT448.FILE540\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 16 MEMBERS COUNTED; CUMULATIVE SIZE IS 2,255 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   06/18/02    11:00:20    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00S\\x01\\x02\\x16\\x9f\\x01\\x02\\x16\\x9f\\x10F\\x00F\\x00F\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-06-18T00:00:00", "modifydate": "2002-06-18T10:46:53", "lines": 70, "newlines": 70, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject: PARMCHEK preliminary FILE540 Lvl 447: Please check\nDate: Thu, 6 Jun 2002 11:30:05 +0200\nFrom: \"Kaiser, Gerald\" <Gerald.Kaiser@leonberger.de>\nTo: \"Sam Golob (ATT) (E-Mail)\" <sbgolob@attglobal.net>\n\nHi Sam,\nI had a look at your changes to PARMCHEK and did  a few quick\ntests. Thereby I found what I believe to be an error.\n\nCurrently you have coded:\n\nPRMNFND  LA    R4,1(,R4)      FORWARD IN JCL PARMS\n         LA    R1,1(,R1)      MEASURE DISTANCE TRAVELED\n*\n*--->                 below - Parm Found flagging to require delimiter\n         CLI   0(R4),C' '     Turn off \"PARM FOUND\" flag if delimiters\n         BE    PRMFDOFF\n         CLI   0(R4),C','\n         BE    PRMFDOFF\n         B     PRMFDEND\nPRMFDOFF DS    0H\n         NI    PRMFDFLG,X'FF'-X'01'     Turn off PARM FOUND flag\nPRMFDEND DS    0H\n*--->                 above - Parm Found flagging to require delimiter\n         B     PARMLOOP       TRY AGAIN\n\nThis causes the separator check to be done not against the byte\nwhich was not found in the parm-table, but against the byte\nfollowing the not-found byte. IMHO it should look like:\n\nPRMNFND  DS    0H\n*--->                 below - Parm Found flagging to require delimiter\n         CLI   0(R4),C' '     Turn off \"PARM FOUND\" flag if delimiters\n         BE    PRMFDOFF\n         CLI   0(R4),C','\n         BE    PRMFDOFF\n         B     PRMFDEND\nPRMFDOFF DS    0H\n         NI    PRMFDFLG,X'FF'-X'01'     Turn off PARM FOUND flag\nPRMFDEND DS    0H\n*--->                 above - Parm Found flagging to require delimiter\n*\n         LA    R4,1(,R4)      FORWARD IN JCL PARMS\n         LA    R1,1(,R1)      MEASURE DISTANCE TRAVELED\n*\n         B     PARMLOOP       TRY AGAIN\n\nA tiny little correction might be:\n      OI    FLAGSYST,X'01'       SHOW PRESENCE OF SYSTRACE DD\nto:\n      OI    FLAGSYST,X'01'       SHOW PRESENCE OF PARMREPT DD\n\nI thought this first comment to be urgent enough to inform you\nright away.\n\nAll the best and have a nice day,\n\nGerald\n\nIRB-BS / IOB-SY\nWuestenrot Bausparkasse AG\nEin Unternehmen der\nWuestenrot & Wuerttembergische AG\nTel.  (07141) 16-3448\nFax. alt,noch aktiv: (07152) 17-42128,\nneue wird sein (07141) 16-83448\nmailto:Gerald.Kaiser@leonberger.de\nBueroanschrift: Hohenzollernstrasse 46, 71638 Ludwigsburg\nPostanschrift: 71630 Ludwigsburg\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE540": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00H\\x01\\x01\\x02_\\x01\\x02\\x16?\\x106\\x00\\xd8\\x00\\x02\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2001-01-25T00:00:00", "modifydate": "2002-06-12T10:36:48", "lines": 216, "newlines": 2, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 540 is from Sam Golob and contains his PARM and SYSIN     *   FILE 540\n//*           scanner, adapted from the COPYMODS program in File    *   FILE 540\n//*           229 of this tape.  The COPYMODS parm scanner is now   *   FILE 540\n//*           a callable service.  So is the program which          *   FILE 540\n//*           displays all the option bits, which the parm          *   FILE 540\n//*           scanner has set, just so you can check that they've   *   FILE 540\n//*           been set correctly.                                   *   FILE 540\n//*                                                                 *   FILE 540\n//*           Note:  This is a non-reentrant version of PARMCHEK    *   FILE 540\n//*                  and a re-entrant program must LINK to it,      *   FILE 540\n//*                  to preserve re-entrancy.  (Soon to be fixed,   *   FILE 540\n//*                  I hope.)                                       *   FILE 540\n//*                                                                 *   FILE 540\n//*           This program, called PARMCHEK, will convert keywords  *   FILE 540\n//*           in the PARM field of the EXEC card, and in the SYSIN  *   FILE 540\n//*           ddname if present, into 5 bytes of bit settings,      *   FILE 540\n//*           based on entries in a table.  It is possible to add   *   FILE 540\n//*           user code, to handle keywords with values, and an     *   FILE 540\n//*           example of such user code is included in the PARMCHEK *   FILE 540\n//*           program.                                              *   FILE 540\n//*                                                                 *   FILE 540\n//*           PARMCHEK can be invoked as a separate CSECT that is   *   FILE 540\n//*           linkedited into the calling program, or it may be     *   FILE 540\n//*           invoked using a LOAD and BALR 14,15 as a separate     *   FILE 540\n//*           program.  A sample program which invokes PARMCHEK     *   FILE 540\n//*           with this logic, has been included, and it is called  *   FILE 540\n//*           PARMDRVR.                                             *   FILE 540\n//*                                                                 *   FILE 540\n//*           A sample program to be linkedited with PARMCHEK       *   FILE 540\n//*           as a sample driver is included as member PARMLINK.    *   FILE 540\n//*                                                                 *   FILE 540\n//*           There is also included, a program called SAMPOPTS     *   FILE 540\n//*           which can display in the SYSPRINT file, all the       *   FILE 540\n//*           options which have been set in the PARM flags,        *   FILE 540\n//*           once PARMCHEK has \"done its thing\", and set its bits. *   FILE 540\n//*                                                                 *   FILE 540\n//*       Note:  Currently, PARMCHEK is not re-entrant, but         *   FILE 540\n//*              it is hoped that this will be fixed shortly.       *   FILE 540\n//*                                                                 *   FILE 540\n//*     PARMCHEK program description:                               *   FILE 540\n//*                                                                 *   FILE 540\n//*     PURPOSE: This program converts keywords in a PARM           *   FILE 540\n//*              field or in SYSIN, into bit settings that          *   FILE 540\n//*              a program can use, to control options in           *   FILE 540\n//*              its execution.                                     *   FILE 540\n//*                                                                 *   FILE 540\n//*              This program can be run as a subroutine            *   FILE 540\n//*              which is called, to set up to 5 bytes of           *   FILE 540\n//*              bits, up to 40 bits in all, based on the           *   FILE 540\n//*              settings of keywords in a table.                   *   FILE 540\n//*                                                                 *   FILE 540\n//*              This routine makes it easy to put a lot of         *   FILE 540\n//*              options into a program.  If you want to            *   FILE 540\n//*              add options, or use other words in PARM or         *   FILE 540\n//*              SYSIN to call the same options, all you            *   FILE 540\n//*              have to do, is to change or add entries in         *   FILE 540\n//*              a table.  There is no extra coding to be           *   FILE 540\n//*              done.                                              *   FILE 540\n//*                                                                 *   FILE 540\n//*              Keywords in the PARM or SYSIN areas do not         *   FILE 540\n//*              have to be delimited by commas or spaces or        *   FILE 540\n//*              anything else.  Although for clarity, I'd          *   FILE 540\n//*              certainly recommend that you put commas or         *   FILE 540\n//*              spaces between the PARM field keywords.            *   FILE 540\n//*              Therefore, I'd also advise that when you           *   FILE 540\n//*              design keywords to put into the table to           *   FILE 540\n//*              designate options, that you make them              *   FILE 540\n//*              significantly different from each other.           *   FILE 540\n//*              There is a length field in the table,              *   FILE 540\n//*              however, which gives you some more control         *   FILE 540\n//*              in this area.                                      *   FILE 540\n//*                                                                 *   FILE 540\n//*   Note:  In Version 1.3, I added code (if you comment out one   *   FILE 540\n//*          line) to optionally require spaces or commas as        *   FILE 540\n//*          delimiters between parms.  My intent was not to have   *   FILE 540\n//*          the code require delimiters, but if you want them,     *   FILE 540\n//*          you can now require them. (SG 05/29/02)                *   FILE 540\n//*                                                                 *   FILE 540\n//*          In this release, you can now easily code other         *   FILE 540\n//*          characters, such as periods or dashes, to be used      *   FILE 540\n//*          as delimiting characters for parms.  Just look at      *   FILE 540\n//*          the new code, and you'll see that it's easy to do.     *   FILE 540\n//*          That code is soon after label PRMNFND in PARMCHEK.     *   FILE 540\n//*                                                                 *   FILE 540\n//*              From a calling program, it would be possible       *   FILE 540\n//*              to call PARMCHEK twice, against two different      *   FILE 540\n//*              tables, to set 10 bytes of options, instead        *   FILE 540\n//*              of 5 bytes of options, and so forth...             *   FILE 540\n//*                                                                 *   FILE 540\n//*              This gives you the opportunity of having           *   FILE 540\n//*              a tremendous number of options, set by             *   FILE 540\n//*              keywords, in your program, without using           *   FILE 540\n//*              up valuable \"base register space\" for such         *   FILE 540\n//*              coding.                                            *   FILE 540\n//*                                                                 *   FILE 540\n//*                                                                 *   FILE 540\n//*     METHOD:  Bits, in the 5 bytes of PARMFLGS, are set,         *   FILE 540\n//*              from a table, based on assembled defaults.         *   FILE 540\n//*              These default settings are then overridden         *   FILE 540\n//*              from a scan of words in the PARM field of          *   FILE 540\n//*              the EXEC card.                                     *   FILE 540\n//*                                                                 *   FILE 540\n//*              If a SYSIN DD card is present, its cards           *   FILE 540\n//*              are scanned against the table entries, to          *   FILE 540\n//*              further override the bit settings which            *   FILE 540\n//*              have already been done by the defaults and         *   FILE 540\n//*              the PARM field.                                    *   FILE 540\n//*                                                                 *   FILE 540\n//*              The main purpose of this routine is to set         *   FILE 540\n//*              bits from words.  However, if you need some        *   FILE 540\n//*              keywords with values, such as (for example)        *   FILE 540\n//*              FILELIMIT=69  in your program, you may use         *   FILE 540\n//*              the \"user code\" section of this program            *   FILE 540\n//*              to code that stuff in, so that these special       *   FILE 540\n//*              keywords can be coded in SYSIN.                    *   FILE 540\n//*                                                                 *   FILE 540\n//*              Two sample keywords expecting number values:       *   FILE 540\n//*              FILELIMIT=nnn  or                                  *   FILE 540\n//*              LABELIMIT=mmm                                      *   FILE 540\n//*              have been coded here, just to illustrate           *   FILE 540\n//*              how the user coding might work.                    *   FILE 540\n//*                                                                 *   FILE 540\n//*              Search order is:  Defaults, then PARM in           *   FILE 540\n//*              the EXEC card, then SYSIN.                         *   FILE 540\n//*                                                                 *   FILE 540\n//*              As coded here, the FILELIMIT= and                  *   FILE 540\n//*              LABELIMIT= keywords in SYSIN have to be in         *   FILE 540\n//*              column 1 of the SYSIN cards, and if these          *   FILE 540\n//*              \"special keywords\" are present in a card,          *   FILE 540\n//*              the rest of that card is not scanned for           *   FILE 540\n//*              the table keywords.                                *   FILE 540\n//*                                                                 *   FILE 540\n//*              As coded here, the PARMTABL is a separate          *   FILE 540\n//*              CSECT, addressable by V-CONs from the              *   FILE 540\n//*              PARMCHEK CSECT.                                    *   FILE 540\n//*                                                                 *   FILE 540\n//*              It would probably be best to invoke the            *   FILE 540\n//*              PARMCHEK program as a separate CSECT which         *   FILE 540\n//*              is linkedited with the calling program,            *   FILE 540\n//*              but it may be LOADed and BALR 14,15 'ed to,        *   FILE 540\n//*              and run as a separate program.  (See the           *   FILE 540\n//*              PARMDRVR program that is included in this          *   FILE 540\n//*              package, as a sample.)                             *   FILE 540\n//*                                                                 *   FILE 540\n//*      Input:  A fullword containing the address of the           *   FILE 540\n//*              saved Register 1 from the calling program,         *   FILE 540\n//*              which points to its parms.                         *   FILE 540\n//*                                                                 *   FILE 540\n//*              A table containing parms, which is coded           *   FILE 540\n//*              according to the following rules, and which        *   FILE 540\n//*              has entries of 15 bytes apiece.                    *   FILE 540\n//*                                                                 *   FILE 540\n//*        FORMAT OF THE PARM TABLE                                 *   FILE 540\n//*                                                                 *   FILE 540\n//*          ONE ENTRY IS 15 BYTES                                  *   FILE 540\n//*                                                                 *   FILE 540\n//*            1ST BYTE:      LENGTH OF THIS PARM KEYWORD IN HEX    *   FILE 540\n//*                           (This is the word which               *   FILE 540\n//*                            controls the bit settings.)          *   FILE 540\n//*                           (up to and including 8 bytes)         *   FILE 540\n//*                                                                 *   FILE 540\n//*            2ND BYTE:      X'01' says turn bit flag(s) OFF       *   FILE 540\n//*                           X'00' says turn bit flag(s) ON        *   FILE 540\n//*                           X'10' set entry as a DEFAULT          *   FILE 540\n//*                                                                 *   FILE 540\n//*            NEXT 8 BYTES:  PARM NAME - LEFT JUSTIFIED            *   FILE 540\n//*                           (This is the word searched on,        *   FILE 540\n//*                            in the EXEC PARM and SYSIN           *   FILE 540\n//*                            areas.)                              *   FILE 540\n//*                                                                 *   FILE 540\n//*            NEXT 5 BYTES:  FLAG BIT settings controlled by       *   FILE 540\n//*                            this keyword.                        *   FILE 540\n//*                                                                 *   FILE 540\n//*                           These are the bits which the          *   FILE 540\n//*                            keyword will flip on (or off).       *   FILE 540\n//*                                                                 *   FILE 540\n//*                           You may control multiple bits         *   FILE 540\n//*                            using one keyword.  All bits         *   FILE 540\n//*                            controlled by this keyword           *   FILE 540\n//*                            are coded in this entry field.       *   FILE 540\n//*                                                                 *   FILE 540\n//*            The table is ended by an entry of X'FF's.            *   FILE 540\n//*                                                                 *   FILE 540\n//*                                                                 *   FILE 540\n//*      Output:  R1 points to a 5-byte area containing the         *   FILE 540\n//*               40 switch settings.                               *   FILE 540\n//*                                                                 *   FILE 540\n//*               Sample code to use PARMCHEK output:               *   FILE 540\n//*                                                                 *   FILE 540\n//*                        ST    R1,PARMADDR                        *   FILE 540\n//*                        USING PARMFLGS,R1                        *   FILE 540\n//*               *                                                 *   FILE 540\n//*               PARMFLGS DSECT                                    *   FILE 540\n//*               PARMFLG1 DS    X                                  *   FILE 540\n//*               PARMFLG2 DS    X                                  *   FILE 540\n//*               PARMFLG3 DS    X                                  *   FILE 540\n//*               PARMFLG4 DS    X                                  *   FILE 540\n//*               PARMFLG5 DS    X                                  *   FILE 540\n//*                                                                 *   FILE 540\n//*                 then ....                                       *   FILE 540\n//*                                                                 *   FILE 540\n//*                        TM    PARMFLG2,X'04'                     *   FILE 540\n//*                        BZ    some location                      *   FILE 540\n//*                          ....                                   *   FILE 540\n//*                                                                 *   FILE 540\n//*               R2 points to the address of a data area           *   FILE 540\n//*               containing values generated by this               *   FILE 540\n//*               program.  It's address is at label STRTVALU       *   FILE 540\n//*               and its length is in the first fullword           *   FILE 540\n//*               at STRTVALU.                                      *   FILE 540\n//*                                                                 *   FILE 540\n//*               R2 is accessed in a similar manner to R1.         *   FILE 540\n//*               See the PARMDRVR program for an example           *   FILE 540\n//*               illustrating one way in which PARMCHEK            *   FILE 540\n//*               may be called.                                    *   FILE 540\n//*                                                                 *   FILE 540\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PARMCHE@": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00$\\x01\\x010\\x1f\\x01\\x016\\x0f!6\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2001-10-28T00:00:00", "modifydate": "2001-12-26T21:36:24", "lines": 29, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,\n// PARM=(OBJECT,NODECK,BATCH,NOESD,NORLD,XREF(FULL),SIZE(MAX-1M,ABOVE))\n//SYSLIB   DD DISP=SHR,DSN=SBGOLOB.R10.MACLIB\n//         DD DISP=SHR,DSN=SBGOLOB.R10.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(PARMCHEK)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(CYL,5),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWLKED,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB441540\n SETCODE AC(0)\n NAME PARMCHEK(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARMCHEK": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x017\\x00Y\\x01\\x015\\x8f\\x01\\x02\\x16\\x9f\\x10X\\x03\\x8d\\x05h\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.55", "flags": 0, "createdate": "2001-12-24T00:00:00", "modifydate": "2002-06-18T10:58:59", "lines": 909, "newlines": 1384, "modlines": 0, "user": "SBGOLOB"}, "text": "*          PARM CHECKER        AT LEVEL 1.3 AS OF 05/29/02\n   TITLE 'PARMCHEK -- SET PARM BITS USING A TABLE'\n**************************************************************\n**************************************************************\n**                                                          **\n**                                                          **\n**  MODULE:   PARMCHEK - Set option bits, based on          **\n**                       keywords coded in PARM and/or      **\n**                       SYSIN.                             **\n**                                                          **\n**  AUTHOR:   Sam Golob                                     **\n**                                                          **\n**  PURPOSE:  This program converts keywords in a PARM      **\n**            field or in SYSIN, into bit settings that     **\n**            a program can use, to control options in      **\n**            its execution.                                **\n**                                                          **\n**            This program can be run as a subroutine       **\n**            which is called, to set up to 5 bytes of      **\n**            bits, up to 40 bits in all, based on the      **\n**            settings of keywords in a table.              **\n**                                                          **\n**            This routine makes it easy to put a lot of    **\n**            options into a program.  If you want to       **\n**            add options, or use other words in PARM or    **\n**            SYSIN to call the same options, all you       **\n**            have to do, is to change or add entries in    **\n**            a table.  There is no extra coding to be      **\n**            done.                                         **\n**                                                          **\n**            Keywords in the PARM or SYSIN areas do not    **\n**            have to be delimited by commas or spaces or   **\n**            anything else.  Although for clarity, I'd     **\n**            certainly recommend that you put commas or    **\n**            spaces between the PARM field keywords.       **\n**            Therefore, I'd also advise that when you      **\n**            design keywords to put into the table to      **\n**            designate options, that you make them         **\n**            significantly different from each other.      **\n**            There is a length field in the table,         **\n**            however, which gives you some more control    **\n**            in this area.                                 **\n**                                                          **\n**            From a calling program, it would be possible  **\n**            to call PARMCHEK twice, against two different **\n**            tables, to set 10 bytes of options, instead   **\n**            of 5 bytes of options, and so forth...        **\n**                                                          **\n**            This gives you the opportunity of having      **\n**            a tremendous number of options, set by        **\n**            keywords, in your program, without using      **\n**            up valuable \"base register space\" for such    **\n**            coding.                                       **\n**                                                          **\n**                                                          **\n**  METHOD:   Bits, in the 5 bytes of PARMFLGS, are set,    **\n**            from a table, based on assembled defaults.    **\n**            These default settings are then overridden    **\n**            from a scan of words in the PARM field of     **\n**            the EXEC card.                                **\n**                                                          **\n**            If a SYSIN DD card is present, its cards      **\n**            are scanned against the table entries, to     **\n**            further override the bit settings which       **\n**            have already been done by the defaults and    **\n**            the PARM field.                               **\n**                                                          **\n**            The main purpose of this routine is to set    **\n**            bits from words.  However, if you need some   **\n**            keywords with values, such as (for example)   **\n**            FILELIMIT=69  in your program, you may use    **\n**            the \"user code\" section of this program       **\n**            to code that stuff in, so that these special  **\n**            keywords can be coded in SYSIN.               **\n**                                                          **\n**            Two sample keywords expecting number values:  **\n**            FILELIMIT=nnn  or                             **\n**            LABELIMIT=mmm                                 **\n**            have been coded here, just to illustrate      **\n**            how the user coding might work.               **\n**                                                          **\n**            Search order is:  Defaults, then PARM in      **\n**            the EXEC card, then SYSIN.                    **\n**                                                          **\n**            As coded here, the FILELIMIT= and             **\n**            LABELIMIT= keywords in SYSIN have to be in    **\n**            column 1 of the SYSIN cards, and if these     **\n**            \"special keywords\" are present in a card,     **\n**            the rest of that card is not scanned for      **\n**            the table keywords.                           **\n**                                                          **\n**            As coded here, the PARMTABL is a separate     **\n**            CSECT, addressable by V-CONs from the         **\n**            PARMCHEK CSECT.                               **\n**                                                          **\n**            It would probably be best to invoke the       **\n**            PARMCHEK program as a separate CSECT which    **\n**            is linkedited with the calling program,       **\n**            but it may be LOADed and BALR 14,15 'ed to,   **\n**            and run as a separate program.  (See the      **\n**            PARMDRVR program that is included in this     **\n**            package, as a sample.)                        **\n**                                                          **\n**    Input:  A fullword containing the address of the      **\n**            saved Register 1 from the calling program,    **\n**            which points to its parms.                    **\n**                                                          **\n**            A table containing parms, which is coded      **\n**            according to the following rules, and which   **\n**            has entries of 15 bytes apiece.               **\n**                                                          **\n**      FORMAT OF THE PARM TABLE                            **\n**                                                          **\n**        ONE ENTRY IS 15 BYTES                             **\n**                                                          **\n**          1ST BYTE:      LENGTH OF THIS PARM WORD IN HEX  **\n**                         (This is the word which          **\n**                          controls the bit settings.)     **\n**                         (up to and including 8 bytes)    **\n**                                                          **\n**          2ND BYTE:      X'01' says turn bit flag(s) OFF  **\n**                         X'00' says turn bit flag(s) ON   **\n**                         X'10' set entry as a DEFAULT     **\n**                                                          **\n**          NEXT 8 BYTES:  PARM NAME - LEFT JUSTIFIED       **\n**                         (This is the word searched on,   **\n**                          in the EXEC PARM and SYSIN      **\n**                          areas.)                         **\n**                                                          **\n**          NEXT 5 BYTES:  FLAG BIT settings controlled by  **\n**                          this keyword.                   **\n**                                                          **\n**                         These are the bits which the     **\n**                          keyword will flip on (or off).  **\n**                                                          **\n**                         You may control multiple bits    **\n**                          using one keyword.  All bits    **\n**                          controlled by this keyword      **\n**                          are coded in this entry field.  **\n**                                                          **\n**          The table is ended by an entry of X'FF's.       **\n**                                                          **\n**                                                          **\n**    Output:  R1 points to a 5-byte area containing the    **\n**             40 switch settings.                          **\n**                                                          **\n**             Sample code to use PARMCHEK output:          **\n**                                                          **\n**                      ST    R1,PARMADDR                   **\n**                      USING PARMFLGS,R1                   **\n**             *                                            **\n**             PARMFLGS DSECT                               **\n**             PARMFLG1 DS    X                             **\n**             PARMFLG2 DS    X                             **\n**             PARMFLG3 DS    X                             **\n**             PARMFLG4 DS    X                             **\n**             PARMFLG5 DS    X                             **\n**                                                          **\n**               then ....                                  **\n**                                                          **\n**                      TM    PARMFLG2,X'04'                **\n**                      BZ    some location                 **\n**                        ....                              **\n**                                                          **\n**             R2 points to the address of a data area      **\n**             containing values generated by this          **\n**             program.  It's address is at label STRTVALU  **\n**             and its length is in the first fullword      **\n**             at STRTVALU.                                 **\n**                                                          **\n**             R2 is accessed in a similar manner to R1.    **\n**             See the PARMDRVR program for an example      **\n**             illustrating one way in which PARMCHEK       **\n**             may be called.                               **\n**                                                          **\n**                                                          **\n**************************************************************\n         EJECT\n**************************************************************\n**                                                          **\n**  CHANGE LOG:                                             **\n**                                                          **\n**    Version 1.1 - Separate Parm Table into different      **\n**       CSECT.  Detailed reporting in PARMREPT ddname.     **\n**                                                          **\n**    Version 1.2 - Uppercase keyword before comparing      **\n**       against the table entries.  This assumes you       **\n**       will code your table with all uppercase keyword    **\n**       entries.                                           **\n**                                                          **\n**    Version 1.3 - Option for requiring commas or spaces   **\n**       as delimiters between parms.  Comment out one      **\n**       instruction to require delimiters.                 **\n**                                                          **\n**************************************************************\n**************************************************************\n         EJECT\n**************************************************************\n*  ---------------------------------------------------------------  *\n*    This macro is used to display hex values in a printed report.\n*  ---------------------------------------------------------------  *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R4,SAV4HEX\n         STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         L     R4,SAV4HEX\n         LM    15,1,HEXSAVE\n         MEND\n         SPACE\n**************************************************************\n         GBLC  &LLEV\n&LLEV    SETC  '1.3 '\n         YREGS\nPARMCHEK CSECT\n         USING *,R15\n         B     EYECATCH\n         DC    C'--- '            MAKE EYECATCHER VISIBLE\n         DC    C'PARMCHEK - SET BITS FROM PARM KEYWORDS '\n         DC    C' - '\n         DC    C'PARM INPUT IN SYSIN '\n         DC    C' - '\n         DC    C'LEVEL '\nSYSLEV   DC    C'&LLEV'\n         DC    C' - '\nSYSDAT   DC    C'&SYSDATE'\n         DC    C'  ',C'&SYSTIME ',C'--- '\n         DC    C'Copyright (c) 2001 by Sam Golob '\n         DC    C'--- '            MAKE EYECATCHER VISIBLE\nSAVEAREA DC    18F'0'\nEYECATCH DS    0D             ENSURE ALIGNMENT\n         SAVE  (14,12)\n         LR    R5,R1          SAVE PARM POINTER\n         LA    R1,SAVEAREA          NEW SAVE-AREA ADDR\n         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR\n         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR\n         LR    R13,R1               NEW SAVE AREA ADDRESS\n         DROP  R15\n* -----                       SET UP BASE REGISTERS\n         USING PARMCHEK,R12,R11,R10\n         LR    R12,R15\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)\n         LR    R1,R5          RESTORE PARM POINTER\n         ST    R1,PARMSAVE\n* ----------------------------------------------------------------- *\nTIOTSCAN DS    0H             Determine the presence of Optional\n*                             DDNAMES:  SYSIN AND PARMREPT.\n* ----->                      OPEN them if there is JCL for them.\n* ----------------------------------------------------------------- *\n         L     R5,16          R5=CVT\n         L     R5,0(,R5)      R5=TCB WORDS\n         L     R5,4(,R5)      R5=MY TCB\n         L     R5,12(,R5)     R5=TIOT\n         LA    R5,24(,R5)     R5=FIRST DD ENTRY\nTIOTLOOP CLC   0(4,R5),=XL4'00' END OF TIOT?\n         BE    TIOTSEND       YES, CHECK FOR OUTPUT VOL OVERRIDES\n         CLC   4(8,R5),PARMREPT+40  PARMREPT DDNAME THERE?\n         BNE   TIOTSYSN       NO\n         OI    FLAGSYST,X'01'       SHOW PRESENCE OF PARMREPT DD\n         B     TIOTNEXT       CONTINUE\nTIOTSYSN CLC   4(8,R5),SYSIN+40\n         BNE   TIOTNEXT\n         OI    FLAGSYST,X'02'       SHOW PRESENCE OF SYSIN    DD\n         B     TIOTNEXT\nTIOTNEXT SR    R3,R3\n         IC    R3,0(,R5)      R3=LENGTH OF DD ENTRY\n         AR    R5,R3          R5=NEXT DD ENTRY\n         B     TIOTLOOP       GO CHECK IT\nTIOTSEND DS    0H\n***********************************************************************\n* GET SYSTEM DATE AND TIME - A standard way to get date and time      *\n***********************************************************************\n         STM   R14,R2,SAVE1402\n         TIME  DEC,DATETIME,LINKAGE=SYSTEM,DATETYPE=MMDDYYYY\n         OI    DATE+4,X'0F'\n         UNPK  DATED,DATE\n         OI    TIME+3,X'0F'\n         UNPK  TIMED,TIME\n*                          FILL HEADDATE AREA WITH INFO TO REUSE\n         MVC   HEADDATE(2),DATED\n         MVI   HEADDATE+2,C'/'\n         MVC   HEADDATE+3(2),DATED+2\n         MVI   HEADDATE+5,C'/'\n         MVC   HEADDATE+6(4),DATED+4\n         MVC   HEADDATE+12(2),TIMED\n         MVI   HEADDATE+14,C':'\n         MVC   HEADDATE+15(2),TIMED+2\n         MVI   HEADDATE+17,C':'\n         MVC   HEADDATE+18(2),TIMED+4\n         MVC   MESSAGE1+98(31),HEADDLIT    TODAY'S DATE AND TIME\n         LM    R14,R2,SAVE1402\n***********************************************************************\n         MVC   LEVDATE(8),SYSDAT\n***********************************************************************\n         MVC   MESSAGE1+71(21),LEVELLIT    PROGRAM LEVEL AND\n* ----------------------------------------------------------------- *\nINITCONS DS    0H\n         ZAP   TOTMLCNT,=P'0'\n* ----------------------------------------------------------------- *\nCHEKPRNT DS    0H\n         TM    FLAGSYST,X'01'\n         BZ    CHEKPREN\n         OPEN  (PARMREPT,OUTPUT)\n         OI    OPENDFLG,X'01'\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE,MESSAGE1\n         PUT   PARMREPT,MESSAGE1\n         MVC   PRTLINE,PRTLINE-1\n         PUT   PARMREPT,PRTLINE\nCHEKPREN DS    0H\n* ----------------------------------------------------------------- *\n* --------------------------------------------------------- *\nPARMCHK  DS    0H         CHECK PARMS AND FLAG THEIR\n*                         PRESENCE OR ABSENCE.\n*            (PERMISSIBLE PARMS ARE CODED IN PARMTABL.)\nPARMINIT L     R1,PARMSAVE    SAVED PARM POINTER\n         L     R1,0(,R1)      Get PARM field\n         LH    R5,0(,R1)      SAVE PARM LENGTH\n         ST    R5,PARMSLEN    STORE FULLWORD VALUE\n         MVC   SAVMSLEN,PARMSLEN\n         L     R2,=V(PARMTABL)  LOAD START OF PARM TABLE\n         LA    R4,2(,R1)      POINT TO START OF JCL PARMS\n         ST    R4,PARMSTRT    PUT ADDRESS INTO PGM STORAGE\n         LA    R1,0           USE R1 TO MEASURE LENGTH READ\n* -----------------------------------------------------------\n*   ONE PASS THRU PARM TABLE TO SET DEFAULT ENTRIES BEFORE\n*   LOOKING AT JCL OVERRIDES TO THE PARMS.\n* -----------------------------------------------------------\nPARMDFLT DS    0H             SET DEFAULTS FROM PARM TABLE\n         CLI   0(R2),X'FF'    END OF PARM TABLE?\n         BE    PARMDEND       YES. DEFAULTS SET. CHECK PARMS.\n         TM    1(R2),X'10'    IS THIS ENTRY A DEFAULT?\n         BO    PARMDSET       YES, GO SET IT.\n         LA    R2,PTELEN(,R2)  NO. BOP TO TEST NEXT ENTRY,\n         B     PARMDFLT       AND LOOP UNTIL TABLE ENDS.\nPARMDSET TM    1(R2),X'01'    DO WE TURN THIS FLAG OFF?\n         BO    PARMDOFF       YES. FLAGS ARE TURNED OFF..\n         OC    PARMFLGS(PBYTES),PTEFLG(R2) NO. FLAG IS TURNED ON.\n         LA    R2,PTELEN(,R2)  NO. BOP TO TEST NEXT ENTRY,\n         B     PARMDFLT       CHECK MORE TABLE ENTRIES.\nPARMDOFF MVC   PARMFWRK(PBYTES),PTEFLG(R2)  PARM BYTES TO WRK\n         XC    PARMFWRK(PBYTES),EFFS        FLIP PARM BYTES\n         NC    PARMFLGS(PBYTES),PARMFWRK    TURN PARM BYTE(S) OFF\n         LA    R2,PTELEN(,R2)  NO. BOP TO TEST NEXT ENTRY,\n         B     PARMDFLT   LOOP BACK TILL ONE PASS THRU TABLE\nPARMDEND LA    R1,0           INITIALIZE COUNTING REGISTER\n         L     R2,=V(PARMTABL)  LOAD START OF PARM TABLE\n         L     R4,PARMSTRT    GET ADDRESS FROM PGM STORAGE\n* ----------------------------------------------------------------- *\nSCANPARM DS    0H\n         ST    R7,SAVE7BA0\n         ZAP   PARMLCNT,=P'0'\n         ZAP   PARMHITS,=P'0'\n         BAL   R7,PARMLOOP      Now check the PARM field\n         MVC   SAVPHITS,PARMHITS\n         MVC   SAVCHRCT,PRMCHRCT\n         MVC   SAVELCNT,PARMLCNT\n         AP    TOTMHITS,PARMHITS\n         AP    TOTMLCNT,PARMLCNT\n         L     R7,SAVE7BA0\n* ----------------------------------------------------------------- *\nOPNSYSIN TM    FLAGSYST,X'02'   Are we checking SYSIN?\n         BZ    OPNSYSNE         NO. GO FURTHER IN PROCESSING\n         OPEN  (SYSIN,INPUT)\n         TM    SYSIN+48,X'10'        IS THE DD OPEN  ?\n         BZ    NOSYSIN        NO. FLAG THE ERROR & MESSAGE\n         OI    OPENDFLG,X'02'     FLAG THAT SYSIN IS OPEN\n         B     OPNSYSNE           AND CONTINUE PROCESSING.\nNOSYSIN  DS    0H\n         B     CARDREND\nOPNSYSNE DS    0H\n* ----------------------------------------------------------------- *\nCHEKCARD TM    FLAGSYST,X'02'     TEST IF SYSIN IS PRESENT\n         BZ    CHECKEND           ISN'T. NO POINT TO READ CARDS.\n         TM    OPENDFLG,X'02'     IS SYSIN OPEN ?\n         BZ    CHECKEND           ISN'T THERE SO CAN'T LOOK AT IT.\nCARDREAD DS    0H              CHECK SYSIN FOR KEYWORDS AND PARMS\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              Insert User Code Here for Keywords\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         GET   SYSIN,CARDIN\n*\n* -- >>              <-- Intercept any keywords you want in SYSIN -->\n* -- >>              <--    before you start the table scan       -->\n*\n         CLC   =C'FILELIMIT=',CARDIN    KEYWORD PRESENT IN THIS CARD?\n         BE    FILELGET          PROCESS THIS CARD FOR KEYWORD\n         CLC   =C'LABELIMIT=',CARDIN    KEYWORD PRESENT IN THIS CARD?\n         BE    LABELGET          PROCESS THIS CARD FOR KEYWORD\n*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ----         Resume Checking SYSIN in PARM Table\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nCHKPARMS DS    0H                CHECK THIS CARD AGAINST PARMTABL\n         ST    R7,SAVE7BA1     SAVE BAL REGISTER\n         LA    R4,CARDIN       POINT PARM SEARCH TO BEGINNING OF CARD\n         LA    R5,72           LOAD COLUMN LENGTH FOR SEARCH\n         ST    R5,PARMSLEN     LOAD LENGTH INTO FIELD FOR ROUTINE\n         L     R2,=V(PARMTABL)   POINT R2 TO PARM TABLE\n         L     R1,TOTCHRCT\n         A     R1,PRMCHRCT\n         ST    R1,TOTCHRCT\n         LA    R1,0            START SEARCH COUNT AT ZERO AGAIN\n         ZAP   PARMHITS,=P'0'\n         ZAP   PARMLCNT,=P'0'\n         BAL   R7,PARMLOOP     CHECK THIS CARD FOR PARMS\n         AP    TOTMHITS,PARMHITS\n         AP    TOTMLCNT,PARMLCNT\n         L     R7,SAVE7BA1     RESTORE BAL REGISTER\n         B     CARDREAD        GET ANOTHER CARD\n* ----\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              Handle User Code Here for Keywords\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFILELGET DS    0H\n         CLI   CARDIN+10,C' '    IS FIRST NUMBER VALUE BLANK?\n         BE    CARDREAD          YES. IGNORE ENTIRE CARD\n         CLI   CARDIN+10,X'F0'   SMALLER THAN ZERO?\n         BL    CARDREAD          YES. IGNORE.\n         CLI   CARDIN+10,X'F9'   BIGGER THAN 9?\n         BH    CARDREAD          YES. IGNORE.\n         OI    PARMFLG3,X'02'    SET FILE LIMIT OPTION ON\n         LA    R15,CARDIN+10     STARTING ADDRESS\n         LR    R1,R15            LOAD R1 WITH THIS ADDRESS\nFILELNUM DS    0H\n         LA    R15,1(,R15)       BUMP TO NEXT CHARACTER\n         C     R15,=A(CARDIN+71) END OF CARD?\n         BH    FILELGNM          YES, GET NUMBER\n         CLI   0(R15),C' '       BLANK HERE?\n         BE    FILELGNM          YES, GET NUMBER\n         B     FILELNUM          NO. STEP UP ONE PLACE\nFILELGNM DS    0H\n         SR    R15,R1            HOW BIG IS THE NUMBER\n         BCTR  R15,0             LOWER IT FOR EXECUTE\n         EX    R15,PACK          COPY THE NUMBER TO WORK AREA\n         EX    R15,MVLIMNUM      COPY THE NUMBER TO MESSAGE AREA\n         CVB   R0,WORKA          CONVERT IT TO BINARY\n         ST    R0,LINFILE        STORE THE VALUE FOR LATER USE\n         MP    WORKA,PL4NO3      MULTIPLY BY 3 IF SL FILES\n         CVB   R0,WORKA          CONVERT IT TO BINARY\n         ST    R0,LSLFILE        STORE THE VALUE FOR LATER USE\n         MVC   LTGFILE(4),LINFILE   STUFF NL VALUE IN FOR STARTERS\nFILELCLG DS    0H\n         B     CARDREAD\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nLABELGET DS    0H\n         CLI   CARDIN+10,C' '    IS FIRST NUMBER VALUE BLANK?\n         BE    CARDREAD          YES. IGNORE ENTIRE CARD\n         CLI   CARDIN+10,X'F0'   SMALLER THAN ZERO?\n         BL    CARDREAD          YES. IGNORE.\n         CLI   CARDIN+10,X'F9'   BIGGER THAN 9?\n         BH    CARDREAD          YES. IGNORE.\n         OI    PARMFLG4,X'10'    SET LABEL LIMIT OPTION ON\n         LA    R15,CARDIN+10     STARTING ADDRESS\n         LR    R1,R15            LOAD R1 WITH THIS ADDRESS\nLABELNUM DS    0H\n         LA    R15,1(,R15)       BUMP TO NEXT CHARACTER\n         C     R15,=A(CARDIN+71) END OF CARD?\n         BH    LABELGNM          YES, GET NUMBER\n         CLI   0(R15),C' '       BLANK HERE?\n         BE    LABELGNM          YES, GET NUMBER\n         B     LABELNUM          NO. STEP UP ONE PLACE\nLABELGNM DS    0H\n         SR    R15,R1            HOW BIG IS THE NUMBER\n         BCTR  R15,0             LOWER IT FOR EXECUTE\n         EX    R15,PACKL         COPY THE NUMBER TO WORK AREA\n         EX    R15,MVLBLNUM      COPY THE NUMBER TO MESSAGE AREA\n         CVB   R0,WORKL          CONVERT IT TO BINARY\n         ST    R0,LINLABEL       STORE THE VALUE FOR LATER USE\nLABELCLG DS    0H\n         B     CARDREAD\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              End of User Code Here for Keywords\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nCHECKEND DS    0H\n* -----------------------------------------------------------\nSYSINEND DS    0H\n         TM    OPENDFLG,X'02'   IS SYSIN    DD OPEN?\n         BZ    CARDREND         NO.  GET OUT.\n         L     R1,TOTCHRCT\n         A     R1,PRMCHRCT         Final totals for last card\n         ST    R1,TOTCHRCT\n         NI    OPENDFLG,FF-X'02'   MARK SYSIN FILE AS CLOSED\n         CLOSE (SYSIN)\nCARDREND DS    0H\n         BAL   R7,SUMMREPT\n         TM    OPENDFLG,X'01'   IS PARMREPT DD OPEN?\n         BZ    PARMRPEN         NO.  GET OUT.\n         NI    OPENDFLG,FF-X'01'   MARK SYSIN FILE AS CLOSED\n         CLOSE (PARMREPT)\nPARMRPEN DS    0H\nTHEEND   DS    0H\n         L     R13,4(,R13)\n         MVC   16(4,R13),=F'0'          Return code 0     in R15\n         MVC   24(4,R13),=A(PARMFLGS)   Address of flags  in R1\n         MVC   28(4,R13),=A(STRTVALU)   Address of values in R2\n         LM    R14,R12,12(R13)\n         BR    R14\n* -----------------------------------------------------------\n*        S U B R O U T I N E S\n* -----------------------------------------------------------\n*   NOW CHECK EACH CHARACTER IN JCL, TO SEE IF IT'S A PARM.\n* -----------------------------------------------------------\nPARMLOOP C     R1,PARMSLEN    PAST THE END OF PARMS?\n         BNL   PARMFIN        YES - GET OUT\n         L     R2,=V(PARMTABL)  POINT BACK TO BEGINNING OF TABLE\n         AP    PARMLCNT,=P'1'  COUNT PARM LOOPS FOR DEBUGGING\nBOPPTBL  CLI   0(R2),X'FF'    END OF PARM TABLE?\n         BE    PRMNFND        YES. BUMP AND TRY AGAIN.\n*        ------------------------------------------------------------\n*--->                    code to require a delimiter (space, etc)\n*                        to enable, comment out the next instruction\n*        ------------------------------------------------------------\n         B     PRMNODLM         comment this line to require delimiter\n         TM    PRMFDFLG,X'01'\n         BO    PRMNFND\nPRMNODLM DS    0H\n*--->\n         XR    R5,R5          CLEAR WORK REGISTER FOR REUSE\n         IC    R5,0(,R2)      LOAD LENGTH TO BE COMPARED\n         BCTR  R5,0           ONE LESS FOR EXECUTE\n         EX    R5,MOVPARM     MOVE CHARS TO WORK AREA TO UPPERCASE\n*\n*   If you want to require parm comparisons as case sensitive,\n*    then comment out the following instruction....\n*\n         EX    R5,OCPARM      UPPERCASE WHAT YOU THINK IS THE PARM\n*\n         EX    R5,CMPPARM     COMPARE TABLE ENTRY TO UPPERCASED PARM\n         BE    PRMFOUND       PARM FOUND AT THIS LOCATION\n         LA    R2,PTELEN(,R2)  NEXT TABLE ENTRY\n         B     BOPPTBL        INNER LOOP\n*\nPRMNFND  DS    0H\n*--->                 below - Parm Found flagging to require delimiter\n         CLI   0(R4),C' '     Turn off \"PARM FOUND\" flag if delimiters\n         BE    PRMFDOFF\n         CLI   0(R4),C','\n         BE    PRMFDOFF\n         B     PRMFDEND\nPRMFDOFF DS    0H\n         NI    PRMFDFLG,X'FF'-X'01'     Turn off PARM FOUND flag\nPRMFDEND DS    0H\n*--->                 above - Parm Found flagging to require delimiter\n*\n         LA    R4,1(,R4)      FORWARD IN JCL PARMS\n         LA    R1,1(,R1)      MEASURE DISTANCE TRAVELED\n*\n         B     PARMLOOP       TRY AGAIN\n*\nPRMFOUND DS    0H\n*\n*--->                 below - Parm Found flagging to require delimiter\n         OI    PRMFDFLG,X'01'    Turn on PARM FOUND flag\n*--->                 above - Parm Found flagging to require delimiter\nPRMNOSEP DS    0H\n         AP    PARMHITS,=P'1'    COUNT PARM HITS\n         MVC   PARMTENT(PTELEN),0(R2)  DUMP TABLE ENTRY FOUND\n         TM    1(R2),X'01'         PARM ON OR OFF?\n         BO    PARMOFF             OFF\n         OC    PARMFLGS(PBYTES),PTEFLG(R2)   ON. FLAG THE PARM FOUND\n         B     PARMGO                        AND GO ON\nPARMOFF  MVC   PARMFWRK(PBYTES),PTEFLG(R2)   PARM BYTES TO WRK\n         XC    PARMFWRK(PBYTES),EFFS         FLIP PARM BITS\n         NC    PARMFLGS(PBYTES),PARMFWRK     TURN PARM BIT(S) OFF\nPARMGO   DS    0H\n         XR    R5,R5          Clear Work Reg befor IC\n         IC    R5,0(,R2)      LENGTH OF PARM, FROM THE TABLE\n         LA    R1,0(R5,R1)    INCREMENT COUNT BY LENGTH\n         LA    R4,0(R5,R4)    SAME FOR SEARCH POSITION\n         B     PARMLOOP       LOOK FOR MORE PARMS\nPARMFIN  ST    R1,PRMCHRCT    HOW MANY CHARS WE SEARCHED --\n*                             COUNT FOR DEBUGGING\nPRMCHEND DS    0H\n         BR    R7\nMOVPARM  MVC   PARMWORK(1),0(R4)       ** EXECUTED **\nOCPARM   OC    PARMWORK(1),UPCASEOR    ** EXECUTED **\nCMPPARM  CLC   PARMWORK(1),2(R2)       ** EXECUTED **\n* --------------------------------------------------------- *\nSUMMREPT DS    0H                  Print details of PARMREPT\n         TM    OPENDFLG,X'01'      Is PARMREPT DD open?\n         BZ    SUMMREND            No. Bypass this routine.\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(16),=C'Parm Settings:  '\n         HEX   PRTLINE+27,1,PARMFLG1\n         HEX   PRTLINE+30,1,PARMFLG2\n         HEX   PRTLINE+33,1,PARMFLG3\n         HEX   PRTLINE+36,1,PARMFLG4\n         HEX   PRTLINE+39,1,PARMFLG5\n         PUT   PARMREPT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         PUT   PARMREPT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1        And print it unformatted first.\n         MVC   PRTLINE+4(12),=C'User Area : '\n         HEX   PRTLINE+16,58,STRTVALU\n         PUT   PARMREPT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Length of User Area  :'\n         HEX   PRTLINE+30,4,STRTVALU\n         MVC   PRTLINE+42(6),=C'Hex   '\n         PUT   PARMREPT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Length of last scan  :'\n         HEX   PRTLINE+30,4,PARMSLEN\n         MVC   PRTLINE+42(6),=C'Hex   '\n         PUT   PARMREPT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Length of PARM field :'\n         HEX   PRTLINE+30,4,SAVMSLEN\n         MVC   PRTLINE+42(6),=C'Hex   '\n         PUT   PARMREPT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Address of JCL PARMs :'\n         HEX   PRTLINE+30,4,PARMSTRT\n         MVC   PRTLINE+42(6),=C'Hex   '\n         PUT   PARMREPT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Last Character Count :'\n         HEX   PRTLINE+30,4,PRMCHRCT\n         MVC   PRTLINE+42(6),=C'Hex   '\n         PUT   PARMREPT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Number of PARM Chars :'\n         HEX   PRTLINE+30,4,SAVCHRCT\n         MVC   PRTLINE+42(6),=C'Hex   '\n         PUT   PARMREPT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Total Chars Searched :'\n         HEX   PRTLINE+30,4,TOTCHRCT\n         MVC   PRTLINE+42(6),=C'Hex   '\n         PUT   PARMREPT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Parm hits in PARM    :'\n         HEX   PRTLINE+30,4,SAVPHITS\n         MVC   PRTLINE+42(6),=C'Packed'\n         PUT   PARMREPT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Parm hits last SYSIN :'\n         HEX   PRTLINE+30,4,PARMHITS\n         MVC   PRTLINE+42(6),=C'Packed'\n         PUT   PARMREPT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Total Parm Hits      :'\n         HEX   PRTLINE+30,4,TOTMHITS\n         MVC   PRTLINE+42(6),=C'Packed'\n         PUT   PARMREPT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Parm loops in PARM   :'\n         HEX   PRTLINE+30,4,SAVELCNT\n         MVC   PRTLINE+42(6),=C'Packed'\n         PUT   PARMREPT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Parm loops last SYSIN:'\n         HEX   PRTLINE+30,4,PARMLCNT\n         MVC   PRTLINE+42(6),=C'Packed'\n         PUT   PARMREPT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Total Parm Loops     :'\n         HEX   PRTLINE+30,4,TOTMLCNT\n         MVC   PRTLINE+42(6),=C'Packed'\n         PUT   PARMREPT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Last Table Entry     :'\n         HEX   PRTLINE+30,15,PARMTENT\n         PUT   PARMREPT,PRTLINE\nSUMMREND DS    0H\n         BR    R7\n* --------------------------------------------------------- *\n* --------------------------------------------------------- *\nPACK     PACK  WORKA,0(0,1)          <<< EXECUTED >>>\nPACKL    PACK  WORKL,0(0,1)          <<< EXECUTED >>>\nMVLIMNUM MVC   LIMFMSG+11(0),0(R1)   <<< EXECUTED >>>\nMVLBLNUM MVC   LIMLMSG+11(0),0(R1)   <<< EXECUTED >>>\n         EJECT\n* --------------------------------------------------------- *\nWORKA    DC    D'0'\nWORKL    DC    D'0'\nPL4NO3   DC    PL4'3'\nFF       EQU   X'FF'\nLIMFMSG  DC    C' FILELIMIT=           HAS BEEN CODED IN SYSIN. NUMBER'\n         DC    C' IS TREATED AS NL.                                   '\n         DC    CL27' '\nLIMLMSG  DC    C' LABELIMIT=           HAS BEEN CODED IN SYSIN. NUMBER'\n         DC    C' REFLECTS THE COUNT OF ----ENDOFLABELTRAILER CARDS.  '\n         DC    CL27' '\n* --------------------------------------------------------- *\nPARMFLGS DS    0CL5     5 CONTIGUOUS BYTES OF PARM FLAGS\nPARMFLG1 DC    X'00'\nPARMFLG2 DC    X'00'\nPARMFLG3 DC    X'00'\nPARMFLG4 DC    X'00'\nPARMFLG5 DC    X'00'\n* --------------------------------------------------------- *\n         DS    0F\nSTRTVALU DS    0CL(ENDVALUE)\n         DC    A(ENDVALUE)\nPARMSLEN DC    F'0'                LENGTH OF PARMS\nSAVMSLEN DC    F'0'                LENGTH OF PARMS\nPARMSTRT DC    F'0'                START ADDR OF JCL PARMS\nPRMCHRCT DC    F'0'                CHAR COUNT FOR PRM SEARCH\nSAVCHRCT DC    F'0'                CHAR COUNT FOR PRM SEARCH\nTOTCHRCT DC    F'0'                CHAR COUNT FOR PRM SEARCH\nSAVPHITS DC    PL4'0'              NUMBER OF PARM HITS\nPARMHITS DC    PL4'0'              NUMBER OF PARM HITS\nTOTMHITS DC    PL4'0'              NUMBER OF PARM HITS\nSAVELCNT DC    PL4'0'              NUMBER OF PARM LOOPS\nPARMLCNT DC    PL4'0'              NUMBER OF PARM LOOPS\nTOTMLCNT DC    PL4'0'              NUMBER OF PARM LOOPS\nPARMTENT DC    CL15' '             PARM TABLE ENTRY DUMP\n         DC    CL7' '              FILLER\nPARMFWRK DC    XL5'00'             FOR TURNING OFF PARM BYTES\n*  -----    User Stuff\nLINFILE  DC    F'0'           RAW FILE LIMIT VALUE - SAME FOR NL\nLSLFILE  DC    F'0'           SL  FILE LIMIT VALUE - 3X NL VALUE\nLTGFILE  DC    F'0'           TARGET NUMBER FOR FILE LIMIT VALUE\nLINLABEL DC    F'0'           LABEL LIMIT VALUE\nENDVALUE EQU   *-PARMSLEN\n* --------------------------------------------------------- *\n*              FORMAT OF PARM TABLE\n*              ONE ENTRY IS 15 BYTES\n*                1ST BYTE:      LENGTH OF THIS PARM IN HEX\n*                2ND BYTE:      X'01' SAYS TURN FLAG OFF\n*                               X'00' SAYS TURN FLAG ON\n*                               X'10' SET ENTRY AS A DEFAULT\n*                NEXT 8 BYTES:  PARM NAME - LEFT JUSTIFIED\n*                NEXT 5 BYTES:  FLAG SETTINGS - 5 FLAGS,\n*                                WHICH ALLOWS FOR 40 PARMS\n*                                THAT DON'T HAVE TO BE\n*                                SEPARATED BY A COMMA.\nPBYTES   EQU   5                Number of bytes of parm switches\nPTELEN   EQU   15               Length of each table entry\nPTEFLG   EQU   PTELEN-PBYTES    Displacement from entry to switch bytes\nEFFS     DC    15X'FF'          X'FF' bytes for XORing\n* --------------------------------------------------------- *\nPARMTABL CSECT\n         DC    X'07',X'00',C'LTMSKIP ',X'2000000000' FIRST ENTRY\n         DC    X'07',X'00',C'SKIPLTM ',X'2000000000'\n         DC    X'07',X'11',C'COPYLTM ',X'2000000000' DEFAULT\n         DC    X'07',X'01',C'LTMCOPY ',X'2000000000'\n         DC    X'07',X'00',C'LBLINFO ',X'DE00000000'\n         DC    X'06',X'00',C'PRINTL  ',X'DE00000000'\n         DC    X'06',X'00',C'LABELS  ',X'DE00000000'\n         DC    X'06',X'01',C'NOLABL  ',X'DE00000000'\n         DC    X'07',X'11',C'NOLABEL ',X'DE00000000' DEFAULT\n         DC    X'04',X'00',C'HDR1    ',X'0200000000'\n         DC    X'06',X'01',C'NOHDR1  ',X'0200000000'\n         DC    X'04',X'00',C'HDR2    ',X'0400000000'\n         DC    X'06',X'01',C'NOHDR2  ',X'0400000000'\n         DC    X'04',X'00',C'EOF1    ',X'0800000000'\n         DC    X'06',X'01',C'NOEOF1  ',X'0800000000'\n         DC    X'04',X'00',C'EOF2    ',X'1000000000'\n         DC    X'06',X'01',C'NOEOF2  ',X'1000000000'\n         DC    X'04',X'00',C'EOV1    ',X'4000000000'\n         DC    X'06',X'01',C'NOEOV1  ',X'4000000000'\n         DC    X'04',X'00',C'EOV2    ',X'8000000000'\n         DC    X'06',X'01',C'NOEOV2  ',X'8000000000'\n         DC    X'04',X'00',C'HDRS    ',X'0600000000'\n         DC    X'06',X'01',C'NOHDRS  ',X'0600000000'\n         DC    X'04',X'00',C'EOFS    ',X'1800000000'\n         DC    X'06',X'01',C'NOEOFS  ',X'1800000000'\n         DC    X'04',X'00',C'EOVS    ',X'C000000000'\n         DC    X'06',X'01',C'NOEOVS  ',X'C000000000'\n         DC    X'06',X'00',C'CHGVOL  ',X'0001000000'\n         DC    X'08',X'11',C'NOCHGVOL',X'0001000000' DEFAULT\n         DC    X'06',X'00',C'JCLVOL  ',X'0001000000'\n         DC    X'08',X'01',C'NOJCLVOL',X'0001000000'\n         DC    X'06',X'00',C'NEWVOL  ',X'0001000000'\n         DC    X'08',X'01',C'NONEWVOL',X'0001000000'\n         DC    X'06',X'10',C'VOLLBL  ',X'0002000000' DEFAULT\n         DC    X'08',X'01',C'NOVOLLBL',X'0002000000'\n         DC    X'07',X'00',C'EOV2EOF ',X'0004000000'\n         DC    X'08',X'00',C'EOVTOEOF',X'0004000000'\n         DC    X'06',X'00',C'EOVCHG  ',X'0004000000'\n         DC    X'08',X'11',C'NOEOVCHG',X'0004000000' DEFAULT\n         DC    X'04',X'00',C'READ    ',X'0008000000'\n         DC    X'08',X'00',C'READONLY',X'0008000000'\n         DC    X'07',X'00',C'NOWRITE ',X'0008000000'\n         DC    X'07',X'11',C'WRITE   ',X'0008000000' DEFAULT\n         DC    X'08',X'00',C'LABLDUMP',X'0010000000'\n         DC    X'08',X'11',C'NOLABLDU',X'0010000000' DEFAULT\n         DC    X'05',X'00',C'SYSIN   ',X'0020000000'\n         DC    X'07',X'11',C'NOSYSIN ',X'0020000000' DEFAULT\n         DC    X'06',X'00',C'OUTVOL  ',X'0040000000'\n         DC    X'08',X'00',C'NOOUTVOL',X'0040000000'\n         DC    X'08',X'00',C'LABADDIN',X'0080800000' INCLUDE LBLFIX\n         DC    X'08',X'01',C'NOLABADD',X'0080000000'\n         DC    X'06',X'10',C'BLKCNT  ',X'0100000000' DEFAULT\n         DC    X'08',X'01',C'NOBLKCNT',X'0100000000'\n         DC    X'08',X'00',C'PRADDLBL',X'0000100000'\n         DC    X'08',X'01',C'NOPRADDL',X'0000100000'\n         DC    X'08',X'00',C'CORRBLKS',X'0000200000'\n         DC    X'08',X'01',C'NOCORRBL',X'0000200000'\n         DC    X'08',X'00',C'NOEXNULL',X'0000400000'\n         DC    X'08',X'00',C'NOSLNULL',X'0000400000'\n         DC    X'06',X'11',C'EXNULL  ',X'0000400000'\n         DC    X'06',X'01',C'SLNULL  ',X'0000400000'\n         DC    X'06',X'00',C'LBLFIX  ',X'0000800000'\n         DC    X'08',X'01',C'NOLBLFIX',X'0000800000'\n         DC    X'08',X'00',C'INITVOLS',X'0001010000'\n         DC    X'08',X'00',C'INITTAPE',X'0001010000'\n         DC    X'07',X'00',C'LIMFILE ',X'0000020000'\n         DC    X'07',X'00',C'FILELIM ',X'0000020000'\n         DC    X'08',X'01',C'NOLIMFIL',X'0000020000'\n         DC    X'05',X'00',C'BYTES   ',X'0000040000'\n         DC    X'07',X'01',C'NOBYTES ',X'0000040000'\n         DC    X'06',X'00',C'CUMTOT  ',X'0000080000'\n         DC    X'08',X'01',C'NOCUMTOT',X'0000080000'\n         DC    X'08',X'00',C'LIMLABEL',X'0000001000'\n         DC    X'08',X'01',C'NOLIMLAB',X'0000001000'\n         DC    X'06',X'10',C'OPTION  ',X'0000002000'\n         DC    X'08',X'01',C'NOOPTION',X'0000002000'\n         DC    X'07',X'10',C'SUPPWTO ',X'0000004000'\n         DC    X'08',X'01',C'NOSUPPWT',X'0000004000'\n         DC    X'08',X'00',C'LBDQUICK',X'0000008000'\n         DC    X'08',X'01',C'NOLBDQUI',X'0000008000'\n         DC    X'FFFFFFFFFFFFFFFF'\n* --------------------------------------------------------- *\nPARMCHEK CSECT\n         SPACE 3\n         LTORG\n         SPACE 3\n         DS    0D\n* --------------------------------------------------------- *\nMESSAGE1 DC    CL133'1PARMCHEK - GENERALIZED PARM AND SYSIN SCANNING PR-\n               OGRAM '\n* --------------------------------------------------------- *\n         SPACE 3\nSYSIN    DCB   MACRF=GM,DDNAME=SYSIN,DSORG=PS,RECFM=FB,LRECL=80,       X\n               EODAD=SYSINEND\nPARMREPT DCB   DDNAME=PARMREPT,DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBA\n* --------------------------------------------------------- *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         BR    R4                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEXSAVE  DS    3F                    Register save for HEX macro\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* --------------------------------------------------------- *\nFLAGSYST DC    X'00'          FLAG INDICATING DCB IS PRESENT\n*              X'01'          PARMREPT DD IS PRESENT\n*              X'02'          SYSIN    DD IS PRESENT\nOPENDFLG DC    X'00'          FLAG INDICATING DCB IS OPEN\n*              X'01'          PARMREPT DD IS OPEN\n*              X'02'          SYSIN    DD IS OPEN\n* --------------------------------------------------------- *\n         SPACE 3\nPARMSAVE DC    F'0'\nSAV4HEX  DC    F'0'\nSAVE2TO3 DC    2F'0'\nSAVE3REG DC    F'0'\nSAVE7BA0 DC    F'0'\nSAVE7BA1 DC    F'0'\nPARMWORK DC    CL8' '\nUPCASEOR DC    CL8' '\n         DC    CL4' '\n*    ------------------------ >   Constants for Date and Time - below\nSAVE1402 DS    6F                 Extra fullword for safety\nTIMED    DS    CL7\nDATED    DS    CL9\nDATETIME DS    4F\n         ORG   DATETIME\nTIME     DS    CL4\n         DS    CL4\nDATE     DS    CL5\n         DS    CL3\nHEADDLIT DS    0CL31              Literal for headings - date and time\n         DC    CL6'Today:'\n         DC    CL2' '\nHEADDATE DC    CL23' '\nLEVELLIT DS    0CL21              Level number display for headings\n         DC    CL6'Level '\nLEVELL   DC    CL4'&LLEV'\n         DC    CL2' ('\nLEVDATE  DC    CL8' '             Assembly date for this program\n         DC    CL1')'\n*    ------------------------ >   Constants for Date and Time - above\n*    --------------- >            Output line buffers - below\nPRMFDFLG DC    X'00'              Parm Found Flag\n*              X'01'              Parm has been found in this record\n         DC    CL3' '\n         DC    C' '\nLINE     DC    CL133' '\n         DC    C' '\nCNTLINE  DC    CL133' '\n         DC    C' '\nOUTLINE  DC    CL133' '\n         DC    C' '\nPRTLINE  DC    CL133' '\n         DC    CL80' '            Padding\n*    --------------- >            Output line buffers - above\n*\nCARDIN   DC    CL80' '            SYSIN CARD INPUT AREA\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PARMCH1$": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x18\\x00U\\x01\\x01(\\x9f\\x01\\x015\\x9f\"T\\x00\\x0f\\x00\\x07\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.24", "flags": 0, "createdate": "2001-10-16T00:00:00", "modifydate": "2001-12-25T22:54:55", "lines": 15, "newlines": 7, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//PARMCHK  EXEC PGM=PARMCHEK,PARM='WRITE'\n//STEPLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//PARMREPT  DD  SYSOUT=*\n//SYSIN     DD  *\nLABELS\nSYSIN\nLABLDUMP\nOPTIONS\nCUMTOT\nBYTES\nNOSUPPWT\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARMDRV@": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00Y\\x01\\x010\\x1f\\x01\\x015\\x9f\\x12\\x13\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2001-10-28T00:00:00", "modifydate": "2001-12-25T12:13:59", "lines": 29, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,\n// PARM=(OBJECT,NODECK,BATCH,NOESD,NORLD,NOXREF,SIZE(MAX-1M,ABOVE))\n//SYSLIB   DD DISP=SHR,DSN=SBGOLOB.R10.MACLIB\n//         DD DISP=SHR,DSN=SBGOLOB.R10.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(PARMDRVR)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(CYL,5),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWLKED,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB441540\n SETCODE AC(0)\n NAME PARMDRVR(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARMDRVR": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01 \\x002\\x01\\x015\\x8f\\x01\\x016O\\x00\\x13\\x01T\\x05h\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.32", "flags": 0, "createdate": "2001-12-24T00:00:00", "modifydate": "2001-12-30T00:13:32", "lines": 340, "newlines": 1384, "modlines": 0, "user": "SBGOLOB"}, "text": "*          PARM DRIVER         AT LEVEL 1.2 AS OF 12/30/01\n   TITLE 'PARMDRVR -- DRIVER FOR PARMCHEK PROGRAM'\n**************************************************************\n**************************************************************\n**                                                          **\n**                                                          **\n**  MODULE:   PARMDRVR                                      **\n**                                                          **\n**  AUTHOR:   SAM GOLOB                                     **\n**                                                          **\n**  PURPOSE:  DRIVER FOR PARMCHEK PROGRAM                   **\n**                                                          **\n**                                                          **\n**************************************************************\n**************************************************************\n**                                                          **\n**  CHANGE LOG:                                             **\n**                                                          **\n**************************************************************\n**************************************************************\n         EJECT\n**************************************************************\n*  ---------------------------------------------------------------  *\n*    This macro is used to display hex values in a printed report.\n*  ---------------------------------------------------------------  *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R4,SAV4HEX\n         STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         L     R4,SAV4HEX\n         LM    15,1,HEXSAVE\n         MEND\n         SPACE\n**************************************************************\n         GBLC  &LLEV\n&LLEV    SETC  '1.2 '\n         YREGS\nPARMDRVR CSECT\n         USING *,R15\n         B     EYECATCH\n         DC    C'--- '            MAKE EYECATCHER VISIBLE\n         DC    C'PARMDRVR - DRIVER FOR PARM CHECK PRGM  '\n         DC    C' - '\n         DC    C'LEVEL '\nSYSLEV   DC    C'&LLEV'\n         DC    C' - '\nSYSDAT   DC    C'&SYSDATE'\n         DC    C'  ',C'&SYSTIME ',C'--- '\n         DC    C'Copyright (c) 2001 by Sam Golob '\n         DC    C'--- '            MAKE EYECATCHER VISIBLE\nSAVEAREA DC    18F'0'\nEYECATCH DS    0D             ENSURE ALIGNMENT\n         SAVE  (14,12)\n         LR    R5,R1          Save PARM Pointer\n         ST    R2,VALUSAVE    Save Values Pointer\n         LA    R1,SAVEAREA          NEW SAVE-AREA ADDR\n         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR\n         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR\n         LR    R13,R1               NEW SAVE AREA ADDRESS\n         DROP  R15\n* -----                       SET UP BASE REGISTERS\n         USING PARMDRVR,R12,R11,R10\n         LR    R12,R15\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)\n         LR    R1,R5          RESTORE PARM POINTER\n         ST    R1,PARMSAVE\n* ----------------------------------------------------------------- *\n***********************************************************************\n* GET SYSTEM DATE AND TIME - A standard way to get date and time      *\n***********************************************************************\n         STM   R14,R2,SAVE1402\n         TIME  DEC,DATETIME,LINKAGE=SYSTEM,DATETYPE=MMDDYYYY\n         OI    DATE+4,X'0F'\n         UNPK  DATED,DATE\n         OI    TIME+3,X'0F'\n         UNPK  TIMED,TIME\n*                          FILL HEADDATE AREA WITH INFO TO REUSE\n         MVC   HEADDATE(2),DATED\n         MVI   HEADDATE+2,C'/'\n         MVC   HEADDATE+3(2),DATED+2\n         MVI   HEADDATE+5,C'/'\n         MVC   HEADDATE+6(4),DATED+4\n         MVC   HEADDATE+12(2),TIMED\n         MVI   HEADDATE+14,C':'\n         MVC   HEADDATE+15(2),TIMED+2\n         MVI   HEADDATE+17,C':'\n         MVC   HEADDATE+18(2),TIMED+4\n         MVC   MESSAGE1+98(31),HEADDLIT    TODAY'S DATE AND TIME\n         LM    R14,R2,SAVE1402\n***********************************************************************\n         MVC   LEVDATE(8),SYSDAT\n***********************************************************************\n         MVC   MESSAGE1+71(21),LEVELLIT    PROGRAM LEVEL AND\n* ----------------------------------------------------------------- *\nCHEKPRNT DS    0H\n         OPEN  (SYSPRINT,OUTPUT)\n         OI    OPENDFLG,X'01'\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE,MESSAGE1\n         PUT   SYSPRINT,MESSAGE1\n         MVC   PRTLINE,PRTLINE-1\n         PUT   SYSPRINT,PRTLINE\nCHEKPREN DS    0H\n* ----------------------------------------------------------------- *\nPARMDRV  DS    0H         CHECK PARMS AND FLAG THEIR\n*                         PRESENCE OR ABSENCE.\n*            (PERMISSIBLE PARMS ARE CODED IN PARMTABL.)\n         LA    R0,=CL8'PARMCHEK'\n         LOAD  EPLOC=(0)\n         ST    R0,ENTRYPT\n         L     R15,ENTRYPT        GET ENTRY POINT OF CALLED PROGRAM\n         L     R1,PARMSAVE\n         BALR  R14,R15                 DO CALL\n         ST    R1,PARMADDR\n         USING PARMFLGS,R1              Get bit settings from PARMCHEK\n         MVC   PRTLINE,PRTLINE-1        And print the hex values out.\n         MVC   PRTLINE+4(16),=C'Parm Settings:  '\n         HEX   PRTLINE+27,1,PARMFLG1\n         HEX   PRTLINE+30,1,PARMFLG2\n         HEX   PRTLINE+33,1,PARMFLG3\n         HEX   PRTLINE+36,1,PARMFLG4\n         HEX   PRTLINE+39,1,PARMFLG5\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         PUT   SYSPRINT,PRTLINE\n         ST    R2,VALUSAVE              Info from PARMCHEK user area\n         MVC   PRTLINE,PRTLINE-1        And print it unformatted first.\n         MVC   PRTLINE+4(12),=C'User Area : '\n         HEX   PRTLINE+16,58,0(R2)\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Length of User Area  :'\n         HEX   PRTLINE+30,4,0(R2)\n         MVC   PRTLINE+42(6),=C'Hex   '\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Length of last scan  :'\n         HEX   PRTLINE+30,4,4(R2)\n         MVC   PRTLINE+42(6),=C'Hex   '\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Length of PARM field :'\n         HEX   PRTLINE+30,4,8(R2)\n         MVC   PRTLINE+42(6),=C'Hex   '\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Address of JCL PARMs :'\n         HEX   PRTLINE+30,4,12(R2)\n         MVC   PRTLINE+42(6),=C'Hex   '\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Last Character Count :'\n         HEX   PRTLINE+30,4,16(R2)\n         MVC   PRTLINE+42(6),=C'Hex   '\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Number of PARM Chars :'\n         HEX   PRTLINE+30,4,20(R2)\n         MVC   PRTLINE+42(6),=C'Hex   '\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Total Chars Searched :'\n         HEX   PRTLINE+30,4,24(R2)\n         MVC   PRTLINE+42(6),=C'Hex   '\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Parm hits in PARM    :'\n         HEX   PRTLINE+30,4,28(R2)\n         MVC   PRTLINE+42(6),=C'Packed'\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Parm hits last SYSIN :'\n         HEX   PRTLINE+30,4,32(R2)\n         MVC   PRTLINE+42(6),=C'Packed'\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Total Parm Hits      :'\n         HEX   PRTLINE+30,4,36(R2)\n         MVC   PRTLINE+42(6),=C'Packed'\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Parm loops in PARM   :'\n         HEX   PRTLINE+30,4,40(R2)\n         MVC   PRTLINE+42(6),=C'Packed'\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Parm loops last SYSIN:'\n         HEX   PRTLINE+30,4,44(R2)\n         MVC   PRTLINE+42(6),=C'Packed'\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Total Parm Loops     :'\n         HEX   PRTLINE+30,4,48(R2)\n         MVC   PRTLINE+42(6),=C'Packed'\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Last Table Entry     :'\n         HEX   PRTLINE+30,15,52(R2)\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'User Areas - binary  :'\n         HEX   PRTLINE+30,4,80(R2)\n         HEX   PRTLINE+40,4,84(R2)\n         HEX   PRTLINE+50,4,88(R2)\n         HEX   PRTLINE+60,4,92(R2)\n         PUT   SYSPRINT,PRTLINE\n* ----------------------------------------------------------------- *\n* ----------------------------------------------------------------- *\n         CLOSE (SYSPRINT)\nTHEEND   DS    0H\n         L     R13,4(,R13)\n         MVC   16(4,R13),=F'0'          Return code 0     in R15\n         LM    R14,R12,12(R13)\n         BR    R14\n* -----------------------------------------------------------\n*        S U B R O U T I N E S\n* -----------------------------------------------------------\n* --------------------------------------------------------- *\n* --------------------------------------------------------- *\nPACK     PACK  WORKA,0(0,1)          <<< EXECUTED >>>\nPACKL    PACK  WORKL,0(0,1)          <<< EXECUTED >>>\nMVLIMNUM MVC   LIMFMSG+11(0),0(R1)   <<< EXECUTED >>>\nMVLBLNUM MVC   LIMLMSG+11(0),0(R1)   <<< EXECUTED >>>\n         EJECT\n* --------------------------------------------------------- *\nVALUWORK DC    CL54' '\nVALUSAVE DC    F'0'\nWORKA    DC    D'0'\nWORKL    DC    D'0'\nLINLABEL DC    F'0'           LABEL LIMIT VALUE\nPL4NO3   DC    PL4'3'\nFF       EQU   X'FF'\nLIMFMSG  DC    C' FILELIMIT=           HAS BEEN CODED IN SYSIN. NUMBER'\n         DC    C' IS TREATED AS NL.                                   '\n         DC    CL27' '\nLIMLMSG  DC    C' LABELIMIT=           HAS BEEN CODED IN SYSIN. NUMBER'\n         DC    C' REFLECTS THE COUNT OF ----ENDOFLABELTRAILER CARDS.  '\n         DC    CL27' '\n* --------------------------------------------------------- *\n         DS    0F       ALIGN ON FULLWORD\n* --------------------------------------------------------- *\n         SPACE 3\n         LTORG\n         SPACE 3\n         DS    0D\n* --------------------------------------------------------- *\nMESSAGE1 DC    CL133'1PARMDRVR - DRIVER FOR THE PARMCHEK PROGRAM '\n* --------------------------------------------------------- *\n         SPACE 3\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBA\n* --------------------------------------------------------- *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         BR    R4                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEXSAVE  DS    3F                    Register save for HEX macro\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* --------------------------------------------------------- *\nFLAGSYST DC    X'00'          FLAG INDICATING DCB IS PRESENT\n*              X'01'          SYSPRINT DD IS PRESENT\n*              X'02'          SYSIN    DD IS PRESENT\nOPENDFLG DC    X'00'          FLAG INDICATING DCB IS OPEN\n*              X'01'          SYSPRINT DD IS OPEN\n*              X'02'          SYSIN    DD IS OPEN\n* --------------------------------------------------------- *\n         SPACE 3\nENTRYPT  DC    F'0'\nPARMSAVE DC    F'0'\nPARMADDR DC    F'0'\nSAV4HEX  DC    F'0'\nSAVE2TO3 DC    2F'0'\nSAVE3REG DC    F'0'\nSAVE7BA1 DC    F'0'\nSAVE7REG DC    F'0'\nSAVE7BAL DC    F'0'\nSAVE7RG1 DC    F'0'\nSAVE7RG2 DC    F'0'\nSAVE7RG3 DC    F'0'\nSAVE7RG4 DC    F'0'\n         DC    CL4' '\n*    ------------------------ >   Constants for Date and Time - below\nSAVE1402 DS    6F                 Extra fullword for safety\nTIMED    DS    CL7\nDATED    DS    CL9\nDATETIME DS    4F\n         ORG   DATETIME\nTIME     DS    CL4\n         DS    CL4\nDATE     DS    CL5\n         DS    CL3\nHEADDLIT DS    0CL31              Literal for headings - date and time\n         DC    CL6'Today:'\n         DC    CL2' '\nHEADDATE DC    CL23' '\nLEVELLIT DS    0CL21              Level number display for headings\n         DC    CL6'Level '\nLEVELL   DC    CL4'&LLEV'\n         DC    CL2' ('\nLEVDATE  DC    CL8' '             Assembly date for this program\n         DC    CL1')'\n*    ------------------------ >   Constants for Date and Time - above\n*    --------------- >            Output line buffers - below\n         DC    C' '\nLINE     DC    CL133' '\n         DC    C' '\nCNTLINE  DC    CL133' '\n         DC    C' '\nOUTLINE  DC    CL133' '\n         DC    C' '\nPRTLINE  DC    CL133' '\n         DC    CL80' '            Padding\n*    --------------- >            Output line buffers - above\n*\nCARDIN   DC    CL80' '            SYSIN CARD INPUT AREA\n* --------------------------------------------------------- *\nPARMFLGS DSECT\nPARMFLG1 DS    X\nPARMFLG2 DS    X\nPARMFLG3 DS    X\nPARMFLG4 DS    X\nPARMFLG5 DS    X\n* --------------------------------------------------------- *\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PARMDR1$": {"ttr": 1037, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x01\\x01\\x01(\\x9f\\x01\\x015\\x9f\\x18P\\x00\\n\\x00\\x07\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "2001-10-16T00:00:00", "modifydate": "2001-12-25T18:50:01", "lines": 10, "newlines": 7, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//PARMCHK  EXEC PGM=PARMDRVR\n//STEPLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//PARMREPT  DD  SYSOUT=*\n//SYSPRINT  DD  SYSOUT=*\n//SYSIN     DD  *\nREAD LABELS LABLDUMP OPTIONS CUMTOT BYTES NOSUPPWT\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARMDR2$": {"ttr": 1039, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x04\\x01\\x016\\x0f\\x01\\x02\\x14\\x9f\\x13S\\x00\\r\\x00\\x10\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2001-12-26T00:00:00", "modifydate": "2002-05-29T13:53:04", "lines": 13, "newlines": 16, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//PARMDRV  EXEC PGM=PARMDRVR,PARM='READ,LABADDIN'\n//STEPLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//PARMREPT  DD  SYSOUT=*\n//SYSPRINT  DD  SYSOUT=*\n//SYSIN     DD  *\nLABELS\nSYSIN\nLABLDUMP\nOPTIONS,CUMTOT\nBYTES NOSUPPWT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARMDR3$": {"ttr": 1041, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x12\\x01\\x016\\x0f\\x01\\x016?#X\\x00\\x0b\\x00\\x10\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2001-12-26T00:00:00", "modifydate": "2001-12-29T23:58:12", "lines": 11, "newlines": 16, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//PARMDRV  EXEC PGM=PARMDRVR,PARM='READ,LABADDIN'\n//STEPLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//PARMREPT  DD  SYSOUT=*\n//SYSPRINT  DD  SYSOUT=*\n//SYSIN     DD  *\nLABELS SYSIN LABLDUMP OPTIONS CUMTOT BYTES NOSUPPWT\nFILELIMIT=377\nLABELIMIT=4\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARMLIN@": {"ttr": 1043, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\t\\x01\\x010\\x1f\\x01\\x016O\\x00T\\x00\\x1e\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2001-10-28T00:00:00", "modifydate": "2001-12-30T00:54:09", "lines": 30, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,\n// PARM=(OBJECT,NODECK,BATCH,NOESD,NORLD,NOXREF,SIZE(MAX-1M,ABOVE))\n//SYSLIB   DD DISP=SHR,DSN=SBGOLOB.R10.MACLIB\n//         DD DISP=SHR,DSN=SBGOLOB.R10.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(PARMLINK)\n//         DD DISP=SHR,DSN=SBGOLOB.B.ASM(PARMCHEK)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(CYL,5),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWLKED,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB441540\n SETCODE AC(0)\n NAME PARMLINK(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARMLINK": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01!\\x00!\\x01\\x015\\x8f\\x01\\x016O\\x00Q\\x01S\\x05h\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.33", "flags": 0, "createdate": "2001-12-24T00:00:00", "modifydate": "2001-12-30T00:51:21", "lines": 339, "newlines": 1384, "modlines": 0, "user": "SBGOLOB"}, "text": "*          PARM DRIVER         AT LEVEL 1.2 AS OF 12/30/01\n   TITLE 'PARMLINK -- DRIVER FOR PARMCHEK PROGRAM'\n**************************************************************\n**************************************************************\n**                                                          **\n**                                                          **\n**  MODULE:   PARMLINK                                      **\n**                                                          **\n**  AUTHOR:   SAM GOLOB                                     **\n**                                                          **\n**  PURPOSE:  DRIVER FOR PARMCHEK PROGRAM                   **\n**                                                          **\n**                                                          **\n**************************************************************\n**************************************************************\n**                                                          **\n**  CHANGE LOG:                                             **\n**                                                          **\n**************************************************************\n**************************************************************\n         EJECT\n**************************************************************\n*  ---------------------------------------------------------------  *\n*    This macro is used to display hex values in a printed report.\n*  ---------------------------------------------------------------  *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R4,SAV4HEX\n         STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         L     R4,SAV4HEX\n         LM    15,1,HEXSAVE\n         MEND\n         SPACE\n**************************************************************\n         GBLC  &LLEV\n&LLEV    SETC  '1.2 '\n         YREGS\nPARMLINK CSECT\n         USING *,R15\n         B     EYECATCH\n         DC    C'--- '            MAKE EYECATCHER VISIBLE\n         DC    C'PARMLINK - DRIVER FOR PARM CHECK PRGM  '\n         DC    C' - '\n         DC    C'LEVEL '\nSYSLEV   DC    C'&LLEV'\n         DC    C' - '\nSYSDAT   DC    C'&SYSDATE'\n         DC    C'  ',C'&SYSTIME ',C'--- '\n         DC    C'Copyright (c) 2001 by Sam Golob '\n         DC    C'--- '            MAKE EYECATCHER VISIBLE\nSAVEAREA DC    18F'0'\nEYECATCH DS    0D             ENSURE ALIGNMENT\n         SAVE  (14,12)\n         LR    R5,R1          Save PARM Pointer\n         ST    R2,VALUSAVE    Save Values Pointer\n         LA    R1,SAVEAREA          NEW SAVE-AREA ADDR\n         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR\n         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR\n         LR    R13,R1               NEW SAVE AREA ADDRESS\n         DROP  R15\n* -----                       SET UP BASE REGISTERS\n         USING PARMLINK,R12,R11,R10\n         LR    R12,R15\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)\n         LR    R1,R5          RESTORE PARM POINTER\n         ST    R1,PARMSAVE\n* ----------------------------------------------------------------- *\n***********************************************************************\n* GET SYSTEM DATE AND TIME - A standard way to get date and time      *\n***********************************************************************\n         STM   R14,R2,SAVE1402\n         TIME  DEC,DATETIME,LINKAGE=SYSTEM,DATETYPE=MMDDYYYY\n         OI    DATE+4,X'0F'\n         UNPK  DATED,DATE\n         OI    TIME+3,X'0F'\n         UNPK  TIMED,TIME\n*                          FILL HEADDATE AREA WITH INFO TO REUSE\n         MVC   HEADDATE(2),DATED\n         MVI   HEADDATE+2,C'/'\n         MVC   HEADDATE+3(2),DATED+2\n         MVI   HEADDATE+5,C'/'\n         MVC   HEADDATE+6(4),DATED+4\n         MVC   HEADDATE+12(2),TIMED\n         MVI   HEADDATE+14,C':'\n         MVC   HEADDATE+15(2),TIMED+2\n         MVI   HEADDATE+17,C':'\n         MVC   HEADDATE+18(2),TIMED+4\n         MVC   MESSAGE1+98(31),HEADDLIT    TODAY'S DATE AND TIME\n         LM    R14,R2,SAVE1402\n***********************************************************************\n         MVC   LEVDATE(8),SYSDAT\n***********************************************************************\n         MVC   MESSAGE1+71(21),LEVELLIT    PROGRAM LEVEL AND\n* ----------------------------------------------------------------- *\nCHEKPRNT DS    0H\n         OPEN  (SYSPRINT,OUTPUT)\n         OI    OPENDFLG,X'01'\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE,MESSAGE1\n         PUT   SYSPRINT,MESSAGE1\n         MVC   PRTLINE,PRTLINE-1\n         PUT   SYSPRINT,PRTLINE\nCHEKPREN DS    0H\n* ----------------------------------------------------------------- *\nPARMDRV  DS    0H         CHECK PARMS AND FLAG THEIR\n*                         PRESENCE OR ABSENCE.\n*            (PERMISSIBLE PARMS ARE CODED IN PARMTABL.)\n         L     R0,=V(PARMCHEK)\n         ST    R0,ENTRYPT\n         L     R15,ENTRYPT        GET ENTRY POINT OF CALLED PROGRAM\n         L     R1,PARMSAVE\n         BALR  R14,R15                 DO CALL\n         ST    R1,PARMADDR\n         USING PARMFLGS,R1              Get bit settings from PARMCHEK\n         MVC   PRTLINE,PRTLINE-1        And print the hex values out.\n         MVC   PRTLINE+4(16),=C'Parm Settings:  '\n         HEX   PRTLINE+27,1,PARMFLG1\n         HEX   PRTLINE+30,1,PARMFLG2\n         HEX   PRTLINE+33,1,PARMFLG3\n         HEX   PRTLINE+36,1,PARMFLG4\n         HEX   PRTLINE+39,1,PARMFLG5\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         PUT   SYSPRINT,PRTLINE\n         ST    R2,VALUSAVE              Info from PARMCHEK user area\n         MVC   PRTLINE,PRTLINE-1        And print it unformatted first.\n         MVC   PRTLINE+4(12),=C'User Area : '\n         HEX   PRTLINE+16,58,0(R2)\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Length of User Area  :'\n         HEX   PRTLINE+30,4,0(R2)\n         MVC   PRTLINE+42(6),=C'Hex   '\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Length of last scan  :'\n         HEX   PRTLINE+30,4,4(R2)\n         MVC   PRTLINE+42(6),=C'Hex   '\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Length of PARM field :'\n         HEX   PRTLINE+30,4,8(R2)\n         MVC   PRTLINE+42(6),=C'Hex   '\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Address of JCL PARMs :'\n         HEX   PRTLINE+30,4,12(R2)\n         MVC   PRTLINE+42(6),=C'Hex   '\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Last Character Count :'\n         HEX   PRTLINE+30,4,16(R2)\n         MVC   PRTLINE+42(6),=C'Hex   '\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Number of PARM Chars :'\n         HEX   PRTLINE+30,4,20(R2)\n         MVC   PRTLINE+42(6),=C'Hex   '\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Total Chars Searched :'\n         HEX   PRTLINE+30,4,24(R2)\n         MVC   PRTLINE+42(6),=C'Hex   '\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Parm hits in PARM    :'\n         HEX   PRTLINE+30,4,28(R2)\n         MVC   PRTLINE+42(6),=C'Packed'\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Parm hits last SYSIN :'\n         HEX   PRTLINE+30,4,32(R2)\n         MVC   PRTLINE+42(6),=C'Packed'\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Total Parm Hits      :'\n         HEX   PRTLINE+30,4,36(R2)\n         MVC   PRTLINE+42(6),=C'Packed'\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Parm loops in PARM   :'\n         HEX   PRTLINE+30,4,40(R2)\n         MVC   PRTLINE+42(6),=C'Packed'\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Parm loops last SYSIN:'\n         HEX   PRTLINE+30,4,44(R2)\n         MVC   PRTLINE+42(6),=C'Packed'\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Total Parm Loops     :'\n         HEX   PRTLINE+30,4,48(R2)\n         MVC   PRTLINE+42(6),=C'Packed'\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'Last Table Entry     :'\n         HEX   PRTLINE+30,15,52(R2)\n         PUT   SYSPRINT,PRTLINE\n         MVC   PRTLINE,PRTLINE-1\n         MVC   PRTLINE+4(22),=C'User Areas - binary  :'\n         HEX   PRTLINE+30,4,80(R2)\n         HEX   PRTLINE+40,4,84(R2)\n         HEX   PRTLINE+50,4,88(R2)\n         HEX   PRTLINE+60,4,92(R2)\n         PUT   SYSPRINT,PRTLINE\n* ----------------------------------------------------------------- *\n* ----------------------------------------------------------------- *\n         CLOSE (SYSPRINT)\nTHEEND   DS    0H\n         L     R13,4(,R13)\n         MVC   16(4,R13),=F'0'          Return code 0     in R15\n         LM    R14,R12,12(R13)\n         BR    R14\n* -----------------------------------------------------------\n*        S U B R O U T I N E S\n* -----------------------------------------------------------\n* --------------------------------------------------------- *\n* --------------------------------------------------------- *\nPACK     PACK  WORKA,0(0,1)          <<< EXECUTED >>>\nPACKL    PACK  WORKL,0(0,1)          <<< EXECUTED >>>\nMVLIMNUM MVC   LIMFMSG+11(0),0(R1)   <<< EXECUTED >>>\nMVLBLNUM MVC   LIMLMSG+11(0),0(R1)   <<< EXECUTED >>>\n         EJECT\n* --------------------------------------------------------- *\nVALUWORK DC    CL54' '\nVALUSAVE DC    F'0'\nWORKA    DC    D'0'\nWORKL    DC    D'0'\nLINLABEL DC    F'0'           LABEL LIMIT VALUE\nPL4NO3   DC    PL4'3'\nFF       EQU   X'FF'\nLIMFMSG  DC    C' FILELIMIT=           HAS BEEN CODED IN SYSIN. NUMBER'\n         DC    C' IS TREATED AS NL.                                   '\n         DC    CL27' '\nLIMLMSG  DC    C' LABELIMIT=           HAS BEEN CODED IN SYSIN. NUMBER'\n         DC    C' REFLECTS THE COUNT OF ----ENDOFLABELTRAILER CARDS.  '\n         DC    CL27' '\n* --------------------------------------------------------- *\n         DS    0F       ALIGN ON FULLWORD\n* --------------------------------------------------------- *\n         SPACE 3\n         LTORG\n         SPACE 3\n         DS    0D\n* --------------------------------------------------------- *\nMESSAGE1 DC    CL133'1PARMLINK - DRIVER FOR THE PARMCHEK PROGRAM '\n* --------------------------------------------------------- *\n         SPACE 3\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBA\n* --------------------------------------------------------- *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         BR    R4                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEXSAVE  DS    3F                    Register save for HEX macro\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* --------------------------------------------------------- *\nFLAGSYST DC    X'00'          FLAG INDICATING DCB IS PRESENT\n*              X'01'          SYSPRINT DD IS PRESENT\n*              X'02'          SYSIN    DD IS PRESENT\nOPENDFLG DC    X'00'          FLAG INDICATING DCB IS OPEN\n*              X'01'          SYSPRINT DD IS OPEN\n*              X'02'          SYSIN    DD IS OPEN\n* --------------------------------------------------------- *\n         SPACE 3\nENTRYPT  DC    F'0'\nPARMSAVE DC    F'0'\nPARMADDR DC    F'0'\nSAV4HEX  DC    F'0'\nSAVE2TO3 DC    2F'0'\nSAVE3REG DC    F'0'\nSAVE7BA1 DC    F'0'\nSAVE7REG DC    F'0'\nSAVE7BAL DC    F'0'\nSAVE7RG1 DC    F'0'\nSAVE7RG2 DC    F'0'\nSAVE7RG3 DC    F'0'\nSAVE7RG4 DC    F'0'\n         DC    CL4' '\n*    ------------------------ >   Constants for Date and Time - below\nSAVE1402 DS    6F                 Extra fullword for safety\nTIMED    DS    CL7\nDATED    DS    CL9\nDATETIME DS    4F\n         ORG   DATETIME\nTIME     DS    CL4\n         DS    CL4\nDATE     DS    CL5\n         DS    CL3\nHEADDLIT DS    0CL31              Literal for headings - date and time\n         DC    CL6'Today:'\n         DC    CL2' '\nHEADDATE DC    CL23' '\nLEVELLIT DS    0CL21              Level number display for headings\n         DC    CL6'Level '\nLEVELL   DC    CL4'&LLEV'\n         DC    CL2' ('\nLEVDATE  DC    CL8' '             Assembly date for this program\n         DC    CL1')'\n*    ------------------------ >   Constants for Date and Time - above\n*    --------------- >            Output line buffers - below\n         DC    C' '\nLINE     DC    CL133' '\n         DC    C' '\nCNTLINE  DC    CL133' '\n         DC    C' '\nOUTLINE  DC    CL133' '\n         DC    C' '\nPRTLINE  DC    CL133' '\n         DC    CL80' '            Padding\n*    --------------- >            Output line buffers - above\n*\nCARDIN   DC    CL80' '            SYSIN CARD INPUT AREA\n* --------------------------------------------------------- *\nPARMFLGS DSECT\nPARMFLG1 DS    X\nPARMFLG2 DS    X\nPARMFLG3 DS    X\nPARMFLG4 DS    X\nPARMFLG5 DS    X\n* --------------------------------------------------------- *\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PARMLI1$": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00X\\x01\\x016\\x0f\\x01\\x016O\\x00W\\x00\\x0b\\x00\\x10\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2001-12-26T00:00:00", "modifydate": "2001-12-30T00:57:58", "lines": 11, "newlines": 16, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//PARMDRV  EXEC PGM=PARMLINK,PARM='READ,LABADDIN'\n//STEPLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//PARMREPT  DD  SYSOUT=*\n//SYSPRINT  DD  SYSOUT=*\n//SYSIN     DD  *\nLABELS SYSIN LABLDUMP OPTIONS CUMTOT BYTES NOSUPPWT\nFILELIMIT=377\nLABELIMIT=4\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAMPOPT$": {"ttr": 1289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00 \\x01\\x02\\x14\\x9f\\x01\\x02\\x14\\x9f\\x15\\x12\\x00\\x12\\x00\\r\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2002-05-29T00:00:00", "modifydate": "2002-05-29T15:12:20", "lines": 18, "newlines": 13, "modlines": 0, "user": "SBGOLOB"}, "text": "*  SAMPLE CODE TO CALL THE SAMPOPTS PROGRAM THAT DISPLAYS PARM BIT\n*   SETTINGS.\n* ----------------------------------------------------------------- *    00377\n* --           PARMS HAVE NOW BEEN ADJUSTED                      -- *    00377\n* --    ----   NOW REPORT OPTIONS IF WANTED   ----               -- *    00377\n* ----------------------------------------------------------------- *    00377\n* --                                                             -- *    00377\n         TM    PARMFLG4,X'20'      ARE WE REPORTING OPTIONS?\n         BZ    NOOPTRPT            NO - BYPASS CALLING SUBPROGRAM\n         STM   R14,R12,SAV14T12  SAVE THESE REGISTERS\n         LA    R1,PARMFLGS       POINT TO 5 BYTES OF PARM SETTINGS\n         L     R15,=V(SAMPOPTS)  LOAD V-CON FOR SUBPROGRAM\n         LTR   R15,R15           WAS SUBPROGRAM PRESENT?\n         BZ    NOOPTRP1          NO. DON'T CALL IT\n         BALR  R14,R15           CALL SUBPROGRAM\nSAV14T12 DS    18F\nNOOPTRP1 DS    0H\nNOOPTRPT DS    0H\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAMPOPTS": {"ttr": 1291, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00 \\x01\\x02\\x14\\x9f\\x01\\x02\\x14\\x9f\\x140\\x00\\xcb\\x00\\xcb\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-05-29T00:00:00", "modifydate": "2002-05-29T14:30:20", "lines": 203, "newlines": 203, "modlines": 0, "user": "SBGOLOB"}, "text": "*          DATA SET SAMPOPTS   AT LEVEL 049 AS OF 05/29/02               00001\n   TITLE 'SAMPOPTS -- TAPE COPY PROGRAM OPTIONS DISPLAY'                 00002\n**************************************************************           00003\n**************************************************************           00004\n**                                                          **           00005\n**                                                          **           00006\n**  MODULE: SAMPOPTS                                        **           00007\n**                                                          **           00008\n**                                                          **           00009\n**  PURPOSE:  SUBROUTINE TO DISPLAY EXECUTION OPTIONS THAT  **           00010\n**            HAVE BEEN SET FOR A RUN OF THE PARMCHEK       **           00011\n**            PROGRAM.                                      **           00012\n**                                                          **           00013\n**                                                          **           00014\n**************************************************************           00026\n**************************************************************           00026\n         EJECT                                                           00325\n         YREGS                                                           00326\nSAMPOPTS CSECT                                                           00327\n         USING *,R15                                          SBG 03/00  00328\n*  REG 1 IS POINTING TO THE PARM VALUES SET BY THE PARMCHEK PROGRAM.\n         B     EYECATCH                                       SBG 03/00  00329\n         DC    C'--- '            MAKE EYECATCHER VISIBLE     SBG 03/00  00330\n         DC    C'SAMPOPTS - DISPLAY OPTIONS FOR THE PARMCHEK PROGRAM '   00331\n         DC    C'&SYSDATE',C'  ',C'&SYSTIME ',C'--- '         SBG 03/00  00332\nSAVEAREA DC    18F'0'                                                    00334\nEYECATCH DS    0D             ENSURE ALIGNMENT                SBG 03/00  00335\n         SAVE  (14,12)                                                   00336\n         LR    R5,R1          SAVE PASSED QUANTITY                       00337\n         LA    R1,SAVEAREA          NEW SAVE-AREA ADDR                   00338\n         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR          00339\n         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR         00340\n         LR    R13,R1               NEW SAVE AREA ADDRESS                00341\n         DROP  R15                                                       00342\n* -----                       SET UP TWO BASE REGISTERS                  00343\n         USING SAMPOPTS,R12,R11                                          00344\n         LR    R12,R15                                                   00345\n         LA    R11,4095(,R12)                                            00346\n         LA    R11,1(,R11)                                               00347\n         LR    R1,R5          RESTORE PARM POINTER                       00354\nOPTMOVE  DS    0H\n         MVC   PARMTBIN(5),0(R1)      MOVE PARMS INTO THIS PGM\n         SR    R1,R1                  DON'T POINT R1 INTO LAST PGM\n         SR    R5,R5                  DON'T POINT R5 INTO LAST PGM\n         OPEN  (SYSPRINT,OUTPUT)                                         00586\n         MVC   LINE(133),LINE-1       CLEAR LINE\n         MVC   LINE(133),DISPLINH\n         PUT   SYSPRINT,LINE                                             00367\n         MVC   LINE(133),LINE-1       CLEAR LINE\n         MVC   LINE(133),DISPLINO\n         PUT   SYSPRINT,LINE                                             00367\n         MVC   LINE(133),LINE-1       CLEAR LINE\n         PUT   SYSPRINT,LINE                                             00367\n         BAL   R7,FILLOPTS\n         MVC   LINE(133),LINE-1       CLEAR LINE\n         MVC   LINE(133),DISPOP02\n         PUT   SYSPRINT,LINE                                             00367\n         MVC   LINE(133),LINE-1       CLEAR LINE\n         MVC   LINE(133),DISPOP01\n         PUT   SYSPRINT,LINE                                             00367\n         MVC   LINE(133),LINE-1       CLEAR LINE\n         MVC   LINE(133),DISPOP03\n         PUT   SYSPRINT,LINE                                             00367\n         CLOSE (SYSPRINT)\n* ----------------------------------------------------------------- *\nTHEEND   EQU   *\nTHEEND1  DS    0H\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n         EJECT\n* - - - - - - - -   SUBROUTINES   - - - - - - - - - - - - - - - - - *\n* ----------------------------------------------------------------- *\n*    BAL REGISTER IS R7.                                            *\n* ------------------------------------------------------------------*\nFILLOPTS DS    0H         FILL OPTIONS DISPLAY AREA AND PRINT\n         LA    R3,OPTABLE             POINT TO BEGINNING OF TABLE\n         LA    R6,DISPLIN1            POINT TO FIRST DISPLAY LINE\n         LA    R2,5(,R6)              POINT TO FIRST TARGET LOCATION\nFILLBCT  LA    R4,8                   LOAD BCT QUANTITY\nFILLOOP  CLC   =X'FFFFFFFF',0(R3)\n         BE    FILOPEND\n         MVC   PARMWORK(5),0(R3)      MOVE BYTES TO BE TESTED\n         NC    PARMWORK(5),PARMTBIN   CHECK IF BYTE IS ON\n         BZ    FILLZER\n         MVC   0(10,R2),5(R3)         MOVE OPTION TO DISPLAY - BIT ON\n         LA    R3,OPTENTLN(,R3)       BUMP TO NEXT TABLE ENTRY\n         LA    R2,12(,R2)             BUMP TO NEXT DISPLAY AREA\n         BCT   R4,FILLOOP             LOOP BACK\n         B     FILNEXTB\nFILLZER  DS    0H\n         MVC   0(10,R2),15(R3)        MOVE OPTION TO DISPLAY - BIT OFF\n         LA    R3,OPTENTLN(,R3)       BUMP TO NEXT TABLE ENTRY\n         LA    R2,12(,R2)             BUMP TO NEXT DISPLAY AREA\n         BCT   R4,FILLOOP             LOOP BACK\nFILNEXTB DS    0H\n         MVC   LINE(133),LINE-1       CLEAR OUTPUT AREA\n         MVC   LINE(133),0(R6)        MOVE OPTION DISPLAY INTO LINE\n         PUT   SYSPRINT,LINE\n         LA    R6,133(,R6)            POINT TO BEGINNING OF NEXT LINE\n         LA    R2,37(,R2)             BUMP DISPLAY AREA TO NEXT LINE\n         B     FILLBCT                RELOAD BCT QUANTITY AND RELOOP\nFILOPEND BR    R7\n* ----------------------------------------------------------------- *\n* ----------  CONSTANTS  ------------------------------------------ *\n         LTORG\n         DS    0F\nPARMTBIN DC    X'0000000000'\nPARMWORK DC    X'0000000000'\nPARMZERO DC    X'0000000000'\nOPTABLE  DS    0D\n         DC    X'2000000000',C'LTMSKIP   ',C'LTMCOPY   '\nOPTENTLN EQU   *-OPTABLE\n         DC    X'0100000000',C'BLKCNT    ',C'NOBLKCNT  '\n         DC    X'0200000000',C'HDR1      ',C'NOHDR1    '\n         DC    X'0400000000',C'HDR2      ',C'NOHDR2    '\n         DC    X'0800000000',C'EOF1      ',C'NOEOF1    '\n         DC    X'1000000000',C'EOF2      ',C'NOEOF2    '\n         DC    X'4000000000',C'EOV1      ',C'NOEOV1    '\n         DC    X'8000000000',C'EOV2      ',C'NOEOV2    '\n         DC    X'0010000000',C'LABLDUMP  ',C'NOLABLDU  '\n         DC    X'0020000000',C'SYSIN     ',C'NOSYSIN   '\n         DC    X'0040000000',C'OUTVOL ***',C'NOOUTVOL  '\n         DC    X'0080000000',C'LABADDIN  ',C'NOLABADD  '\n         DC    X'0001000000',C'CHGVOL    ',C'NOCHGVOL  '\n         DC    X'0002000000',C'VOLLBL    ',C'NOVOLLBL  '\n         DC    X'0004000000',C'EOVCHG    ',C'NOEOVCHG  '\n         DC    X'0008000000',C'READONLY  ',C'WRITE     '\n         DC    X'0000100000',C'PRADDLBL  ',C'NOPRADDL  '\n         DC    X'0000200000',C'CORRBLKS  ',C'NOCORRBL  '\n         DC    X'0000400000',C'NOEXNULL  ',C'EXNULL    '\n         DC    X'0000800000',C'LBLFIX    ',C'NOLBLFIX  '\n         DC    X'0000010000',C'INITVOLS  ',C'          '\n         DC    X'0000020000',C'LIMFILE **',C'NOLIMFIL  '\n         DC    X'0000040000',C'BYTES     ',C'NOBYTES   '\n         DC    X'0000080000',C'CUMTOT    ',C'NOCUMTOT  '\n         DC    X'0000001000',C'LIMLABEL *',C'NOLIMLAB  '\n         DC    X'0000002000',C'OPTION    ',C'NOOPTION  '\n         DC    X'0000004000',C'SUPPWTO   ',C'NOSUPPWT  '\n         DC    X'0000008000',C'LBDQUICK  ',C'NOLBDQUI  '\n         DC    X'0000000100',C'CUMSEP    ',C'NOCUMSEP  '\n         DC    X'0000000200',C'          ',C'          '\n         DC    X'0000000400',C'          ',C'          '\n         DC    X'0000000800',C'          ',C'          '\n         DC    X'0000000010',C'          ',C'          '\n         DC    X'0000000020',C'          ',C'          '\n         DC    X'0000000040',C'          ',C'          '\n         DC    X'0000000080',C'          ',C'          '\n         DC    X'0000000001',C'          ',C'          '\n         DC    X'0000000002',C'          ',C'          '\n         DC    X'0000000004',C'          ',C'          '\n         DC    X'0000000008',C'          ',C'          '\n         DC    X'FFFFFFFFFF'\n*  -----\nDISPAREA DS    0D\nDISPLINH DS    0CL133\n         DC    C'1    PARMCHEK PROGRAM - EXTENDED PARM CHEK PROGRAM - '\n         DC    C'LEVEL 049 - OPTIONS DISPLAY                          '\n         DC    27C' '\nDISPLINO DS    0CL133\n         DC    C'-    OPTIONS IN EFFECT:                              '\n         DC    C'                                                     '\n         DC    27C' '\nDISPOP01 DS    0CL133\n         DC    C'      **  THE LIMFILE OPTION IS ONLY SET BY THE  FILE'\n         DC    C'LIMIT=   SYSIN CARD                                  '\n         DC    27C' '\nDISPOP02 DS    0CL133\n         DC    C'      *   THE LIMLABEL OPTION IS ONLY SET BY THE LABE'\n         DC    C'LIMIT=   SYSIN CARD                                  '\n         DC    27C' '\nDISPOP03 DS    0CL133\n         DC    C'      *** THE OUTVOL OPTION IS ONLY SET BY THE   TAPE'\n         DC    C'OWNER=   OR OUTVOLALL=   SYSIN CARDS                 '\n         DC    27C' '\nSYSPRINT DCB   MACRF=PM,DDNAME=SYSPRINT,DSORG=PS,RECFM=FA,LRECL=133,   X 02499\n               BLKSIZE=133                                               02500\n         DC    C' '\nLINE     DS    CL133\nDISPLIN1 DS    0CL133\n         DC    C'0    '\nDISPL1A  DC    8CL12' '\n         DC    32C' '\nDISPLIN2 DS    0CL133\n         DC    C'     '\nDISPL2A  DC    8CL12' '\n         DC    32C' '\nDISPLIN3 DS    0CL133\n         DC    C'     '\nDISPL3A  DC    8CL12' '\n         DC    32C' '\nDISPLIN4 DS    0CL133\n         DC    C'     '\nDISPL4A  DC    8CL12' '\n         DC    32C' '\nDISPLIN5 DS    0CL133\n         DC    C'     '\nDISPL5A  DC    8CL12' '\n         DC    32C' '\n         SPACE 3                                                         01722\n         EJECT                                                           01722\n@PAN$AUD CSECT                                                           02519\n$PAN#AUD DC    CL30'LEVEL 049 SAMPOPTS  05/29/02 '                       02520\n         END                                                             02521\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT540/FILE540.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT540", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}