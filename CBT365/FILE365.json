{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011843000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 293930, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE365.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE365.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x06\\x07'", "DS1TRBAL": "b'\\xa2n'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\xab\\x00\\x06\\x02\\xab\\x00\\x0c\\x00\\x07'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$$DOC": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x07o\\x00\\x99\\x07o F\\x00\\x17\\x00\\x18\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-03-17T00:00:00", "modifydate": "1999-03-17T20:46:00", "lines": 23, "newlines": 24, "modlines": 0, "user": "SBGOLOB"}, "text": "This package was submitted to the CBT Tape by Ron MacRae of AMDAHL UK.\n\nThis package contains utilities to transmit datasets from one MVS\nsystem to another, with error detection.\n\nIncluded is JCL to use the compression utility from IBM called\nTRSMAIN.  If you want, TRSMAIN can be integrated into the transmission\nof datasets, so the datasets will be in compressed format.\n\nDocumentation is included in all members that start with $$* .\n\n\n\n\n email:     Ron_MacRae@amdahl.com\n\n\n\n\n\n\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$$INTRO": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x99\\x07o\\x01\\x00$?\\x18T\\x00D\\x00E\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-03-17T00:00:00", "modifydate": "2000-08-30T18:54:00", "lines": 68, "newlines": 69, "modlines": 0, "user": "WSBG"}, "text": "From: \"Ron MacRae\" <Ron_MacRae@amdahl.com>\nTo: <sbgolob@attglobal.net>\nSubject:  FTP error checking code.\nDate: Mon, 15 Mar 1999 11:18:01 -0000\n\nSam,\n\n   I've attached to this mail the package we give out customers,\nOSTARXMT.EXE.  This is a self extracting zip file containing the\npackaging and unpackaging software and documentation.  I've also\ngiven you the source for the error checking software.  Once you look\nat it you'll see it's fairly trivial but has been quite useful.  If\nyou want to use this you would need to give the software to your\nusers.\n\n We used to use TSO Transmit, ftp to a PC, use PKzip to compress the\nfiles, and then FTP to customers.  We still had problems a) because\nwe were shipping multiple datasets so we had a repetitive, manual,\nerror prone, process and b) some customers were still ending up with\ncorrupted files because they didn't do the upload to MVS correctly\nor had transmission errors on their local intranet after PKUNZIP had\nuncompressed the data.\n\n  I wrote two REXX programs, OSTARXMT and OSTARREC.  OSTARXMT takes\nmultiple input files and uses TSO transmit to convert each one to an\nFB 80 sequential file and then adds error detecting codes to the end\nof each record and file and sticks them all together into a single\n'XMT' file suitable for FTP, email, etc.  OSTARREC takes this file\nand rebuilds the original TSO TRANSMIT datasets and runs TSO receive\nto rebuild the original datasets.\n\n  We used these programs to ship small PTF packages.  It was a better\nprocess as it was more automated and all the error detection is done\nafter the data is back on MVS.  We also automated our FTP to/from our\nweb site so we tend to get our packaging right most of the time now.\n\n  Over time but we found our customers wanted to send us diagnostics\nlike 1GByte system dumps via the internet and we also wanted to send\nlarger files, including complete put tapes over the web.  We found\nthe REXX only solution was too expensive in CPU resources and the\nfiles were so big that the FTPs took too long for customers with poor\ninternet connections.\n\n  I therefore converted the error detection logic from REXX to\nassembler.  This improved the elapsed time of the REXX programs by\nover 99% on our CPU constrained system.  N.B. the assembler program\nisn't compulsory, it just improves performance.  The old REXX EDC\nlogic is still there and is used to load the OSTARXMT package.\n\n  I also tailored the Rexx programs to be able to use IBM's TRSMAIN\ncompression utility if the customer has it.  We don't supply TRSMAIN\nbut tell our customers where to get it.  It's available from the web\nwithout any restrictions on use.  If you don't have TRSMAIN the\nprocess still works but you have to ship uncompressed files.  I\ninitially wrote my own compression software but TRSMAIN is better.\nI could only get 50-60% compression but TRSMAIN can get up to 80+%\nin some cases.\n\n  If you want to use the OSTAREDC program go ahead.  It's so simple\nyou could knock up your own version in a day.  It's not user friendly\nas it's designed to be used in the REXX programs.  It's the Rexx\nprograms that provide the flexibility and power.\n\n  Let me know what you think.\n\n\n   Regards, Ron MacRae, Amdahl UK\n\n", "mimetype": "message/rfc822", "datatype": "ebcdic", "extension": ".eml"}, "$$$NOTE": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x07o\\x00\\x99\\x07o\\x16U\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-17T00:00:00", "modifydate": "1999-03-17T16:55:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SBGOLOB"}, "text": "This is a note from Sam Golob.\n\n    If you use WS-FTP LE or some FTP package, to send files to an MVS\nsystem, and the MVS system has its port set to LRECL=80, I think you\ncan still send the LRECL=88 file via WS-FTP LE, if you pre-allocate\nan empty LRECL=88 file on the MVS system, with the proper name.  Just\na hint.  You can check for yourself if it works properly.  In my\nlimited test, it seems to allow transmission of the complete LRECL=88\nfile without truncation. But I haven't used the error checking\nprogram against the resulting .XMT file, as of this writing.\n\n                                            S.Golob    03/99\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$OSTAR": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x99\\x07o\\x00\\x99\\x07o\\x19\\x12\\x02\\xd0\\x02\\xd0\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-03-17T00:00:00", "modifydate": "1999-03-17T19:12:00", "lines": 720, "newlines": 720, "modlines": 0, "user": "SBGOLOB"}, "text": "\n\n\n\n\n\n\n                    Application Solutions Group\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                    Data Transmission Enabling Software for\n                    ObjectStar MVS Customers\n                    ObjectStar Support Centre\n                    V 1.0F\n\n                    March 1999\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                   OSTARXMT - 1 -\n\n\n\n\n\n\n\n\n                    Application Solutions Group\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Contents\n\n\n\n  The problem.......................................3\n  The solution......................................4\n  Transmission of diagnostics and PTFs..............5\n  Installation of OSTARXMT    OSTARREC..............6\n  Implementing the compression option...............7\n  OSTARXMT details..................................8\n  OSTARREC details..................................9\n  Error messages....................................10\n  OSTARXMT messages.................................11\n  OSTARREC messages.................................12\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                   OSTARXMT - 2 -\n\n\n\n\n\n\n\n\n                    Application Solutions Group\n\n\n\n\n\n\n  The problem\n\n\n  At present the ObjectStar Support Centre (OSC) have the need to\n  ship PTFs, DBPTFS, documentation, etc. to MVS customers as a\n  matter of urgency. MVS customers also need to ship objects to the\n  OSC to aid with problem determination. This transmission can be\n  via one of the following methods -\n\n  1. ARCSS/NJE link.\n  2. ARCSS TSO link using IND$FILE.\n  3. FTP via the Amdahl FTP server.\n  4. Email attachment via the Internet.\n  5. Diskette by post.\n  6. On tape.\n\n  The problems with options 2-5 are -\n\n  1. Some packages contain large numbers of files. The packaging\n     and transmission of these is complex, time consuming, and\n     prone to user error.\n\n  2. PDSs and variable length files are impossible to transmit in\n     their original form.\n\n  3. Data transmission is often error prone and sometimes the\n     errors are not detectable until they cause problems.\n\n  4. The amount of data being sent is sometimes very large.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                   OSTARXMT - 3 -\n\n\n\n\n\n\n                    Application Solutions Group\n\n\n  The solution\n\n     The solution is to use two Amdahl supplied REXX programs that\n     simplify transmission.\n\n  1. Use OSTARXMT to package datasets, along with error detection\n     information, before transmission.\n\n  2. Use OSTARREC to check for errors and reconstruct datasets\n     after transmission.\n\n     Both programs will display help Information if the parameter\n     '?' is used.\n\n    As well as making transmission simpler, because there is only 1\n    file to transmit, we can be surer the data is correct, because\n    error detection is done on MVS after transmission is complete.\n\n   Note: From V1.0A OSTARXMT & OSTARREC support compressed data for\n          improved transmission.\n\n   Note: From V1.0F OSTARXMT & OSTARREC have much improved performance.\n\n   The procedure for sending fixes, objects, etc. when no ARCSS/NJE\n   link is present can now be simplified to -\n\n  1. Use OSTARXMT, on the source MVS system, to package multiple\n     files into one sequential XMT file, and optionally 1 compressed\n     XM1/XM2 file.\n\n  2. Make the .XMT/.XM1/.XM2 file available to the recipient by one\n     of the following methods -\n\n    - FTP the file to ftp.amdahl.com for download via the WWW.\n    - Download to a PC and send as an Email attachment.\n    - Download to a PC and post (i.e. mail) it on a diskette.\n    - Download to a PC and use IND$FILE to copy it via a TSO session.\n    - Ask a local Amdahl SE to download and upload between customer\n      and Amdahl MVS systems using a PC.\n\n  3. The recipient loads the XMT file, in binary format, to a\n     sequential MVS file with LRECL=88 and RECFM=FB or if the\n     compression option is implemented he/she can load the\n     compressed file, in binary format, to a sequential MVS file\n     with LRECL=1024 and RECFM=FB\n\n  4. Use OSTARREC, on the target MVS system, to rebuild the\n     original file(s).\n\n    Note: All file transfers MUST be in binary format.\n\n\n                                   OSTARXMT - 4 -\n\n\n\n\n\n\n                    Application Solutions Group\n\n\n\n\n\n\n\n\n  Transmission of diagnostics and PTFs\n\n  In order to -\n\n  1. Simplify the passing of data between the support centre and\n     customer.\n  2. Reduce the number of failures in transmission, for various\n     reasons.\n  3. Speed up the process.\n\n     We have decided to simplify and standardise data transmission.\n\n  Note: We believe that this standardisation will not cause any\n     customers any problems and should be a benefit to most. If\n     this is not the case we may change the procedures.\n\n  The standards will be -\n\n  1. The use of OSTARXMT & OSTARREC will be mandatory.\n\n  2. We will only send files to customers in standard XMT formats.\n\n  3. We will only accept files from customers in the same standard\n     formats.\n\n  4. All files from customers will be placed in their incoming\n     directory with names in the format\n        innnnn_sss.ttt where -\n\n        - nnnnn is the incident number.\n        - sss is a sequence number.\n        - ttt indicates the type of file, XMT, XM1 or XM2.\n\n  5. All PTF packages to customers will be placed in their download\n     directory with names to be in the format CPnnnn.XMT &\n     CPnnnn.XM1, where nnnn is the main PTF number.\n\n\n\n\n\n\n                                   OSTARXMT - 5 -\n\n\n\n\n\n\n                    Application Solutions Group\n\n\n  Installation of OSTARXMT & OSTARREC\n\n    If you do not have the two REXX programs, or require newer\n    versions, they can be downloaded via the WWW from\n\n    http://ftp.amdahl.com/support/ObjectStar/common.\n\n    This is a secure area. If you don't already know a userid and\n    password then contact the ASC.\n\n  1. The OSTARXMT.EXE file on the WWW should be downloaded to a PC\n     and executed to generate the OSTARREC.TXT REXX program, the\n     OSTARXMT.XMT file, and this document.\n\n  2. If you do not have an existing version of OSTARREC on your\n     system then upload the OSTARREC.TXT REXX program in ASCII\n     format to a PDS in your SYSPROC or SYSEXEC concatenation.\n\n  3. Allocate a file on MVS with last qualifier of XMT, LRECL=88,\n     and RECFM=FB.\n\n  4. Upload the OSTARXMT.XMT file in binary to the dataset from\n     step 3.\n\n  5. Type OSTARREC against the uploaded file in ISPF 3.4.\n\n  6. You will then be prompted for dataset names, as documented for\n     the TSO receive command, into which the following files should\n     be stored.\n\n        - OSTARXMT - the REXX packaging program,\n        - OSTARREC - the REXX unpackageing program.\n        - OSTAREDC - a optional load module to improve the\n                     performance of OSTARXMT/REC.\n\n     You can simply press enter to get temporary work files with\n     correct DCB info.\n\n  7. Move OSTAREDC to a load library. This does not need any\n     special characteristics.\n\n  8. Move OSTARXMT and OSTARREC to a PDS in the SYSPROC/SYSEXEC\n     concatenation.\n\n  9. Edit OSTARXMT and OSTARREC and change the line -\n\n     OSTAREDC = \"'CSUPP.SHARED.LOADLIB(OSTAREDC)'\"\n\n     To be\n\n     OSTAREDC = \"'loadlib.containing.ostaredc(OSTAREDC)'\"\n\n\n                                   OSTARXMT - 6 -\n\n\n\n\n\n                    Application Solutions Group\n\n\n\n\n\n\n  Implementing the compression option\n\n     If you wish to make use of compressed XMT files then you need\n     to do as follows -\n\n    - Download the IBM TRSMAIN utility as follows -\n\n  1. Go to\n     ftp://service.boulder.ibm.com/s390/mvs/tools/packlib\n     with the web browser of your choice.\n\n  2. Select \"TRSMAIN\" which will download the program to\n     your PC.  There's a README.TXT file there also.\n\n  3. Upload this file to MVS in BINARY format to a file with\n     LRECL=80 and RECFM=FB.\n\n  4. From ISPF 3.4 against this file type \"RECEIVE INDA(/)\" which\n     will prompt you for a load library into which it will restore\n     the TRSMAIN program.\n\n   - Edit the OSTARXMT and OSTARREC REXX programs in turn as\n     follows -\n\n  1. Issue the command \"FIND TRSMAIN 1\"\n\n  2. Change the constant after the \"=\" sign to contain the full\n     dataset name of the program. The string must start double\n     quote, single quote and end single quote, double quote as the\n     double quotes delimit the string and the single quotes tell\n     TSO that the dataset name is fully qualified.\n\n  TRSMAIN = \"'CSUPP.SHARED.LOADLIB(TRSMAIN)'\"\n  becomes\n  TRSMAIN = \"'your.load.library(TRSMAIN)'\"\n\n\n\n\n\n\n\n\n\n                                   OSTARXMT - 7 -\n\n\n\n\n\n\n\n                    Application Solutions Group\n\n\n\n\n  OSTARXMT details\n\n  The OSTARXMT program does the following -\n\n    1. Prompts for an output dataset name.\n\n    2. Prompts for input dataset names.\n\n    3. For each input dataset it then\n\n    - Copies the dataset to a sequential work file, with LRECL=80\n      and RECFM=FB, using the TSO TRANSMIT command.\n\n    - Appends the work file to the output XMT file, with LRECL=88\n      and RECFM=FB, adding an error detection checksum generated by\n      XORing the data both vertically and horizontally.\n\n    4. If the compression option has been implimented it compresses\n       the XMT file into a XM1 file. The file name will be the same\n       as the XMT output file except the last qualifier will be XM1.\n\n    Note: - If a single large sequential dataset is used as input,\n        e.g.  an SVC dump, then the normal XMT and XM1 file formats\n        will not be used. Instead an XM2 format file will be\n        created. The difference between the 2 formats is that for\n        XM2 format TSO TRANSMIT and Error Detection Code is\n        bypassed and only data compression is performed. XM2 format\n        is created in a fraction of the time taken to create an XM1\n        format file and is slightly smaller because error detection\n        information is not added.  The output dataset can then be\n        transmitted, as a single file, to/from the customer by any\n        of the available methods.\n\n    Note: - The prompting for dataset names can be bypassed by\n        either providing the name of a control file as a parameter\n        to the program. The format of this file is -\n\n        - Record 1 contains the words 'OSTARXMT CONTROL'.\n        - Record 2 contains the output DSN in any valid TSO format.\n        - Subsequent records contain input DSNs, one per record.\n\n        Or providing a single input dataset name. E.g. you can type\n        OSTARXMT beside a dataset in ISPF 3.4. The output file will\n        have the same dataset name except the last qualifier will\n        be changed to XMT.\n\n\n\n\n                                   OSTARXMT - 8 -\n\n\n\n\n\n\n                    Application Solutions Group\n\n\n\n\n\n\n  OSTARREC details\n\n     The OSTARREC program accepts the input dataset name. E.g. you\n     can type OSTARREC against a file in any of the 3 XMT formats\n     in ISPF 3.4.\n\n  - If compression is implemented and this is an XM2 file then\n    a single output file is created.\n\n  - If compression is implemented and this is a XM1 file then a\n    temporary XMT file is created which is then processed as an\n    XMT file.\n\n  - If the file is an XMT file then for each dataset in the XMT\n    file it -\n\n    1. Checks the error detection token on each record.\n\n    2. Uses the TSO RECEIVE command which -\n\n    1. Prompts the user to override the output dataset name,\n       if required.\n\n    2. Reconstructs the output dataset using original DCB\n       information.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                   OSTARXMT - 9 -\n\n\n\n\n\n\n\n\n                    Application Solutions Group\n\n\n\n\n  Error messages\n\n    The OSTARXMT and OSTARREC programs may produce several error\n    messages.\n\n    Other than typing or usage errors the most likely is that the\n    ALLOCATE commands used to create work and output files will not\n    conform to specific site standards or will not allocate big\n    enough files for some large sets of objects. In this case find\n    the message listed in this section and modify the appropriate\n    ALLOCATE command in the REXX program.\n\n    Please inform the support centre via an MVS incident of any\n    such problems.  This will allow us to modify these procedures\n    and make them more robust.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                   OSTARXMT - 10 -\n\n\n\n\n\n\n\n\n\n                    Application Solutions Group\n\n\n\n\n  OSTARXMT messages\n\n  - \"Workfile 'SYSUT2' allocation failure.\" The procedure was\n     unable to allocate a temporary work file. See other TSO\n     messages and modify the allocation for SYSUT2 to conform to\n     local standards.\n\n  - \"Invalid control file \"DSN\". Try OSTARXMT with no parms.\"\n     OSTARXMT expects to get either no parms, in which case the\n     user is prompted for output and input datasets or the name\n     of a control file formatted as described in section 0.\n\n  - \"Unable to allocate file\" ODSN \"with DISP=NEW.\" Perhaps the\n     dataset already exists.  Otherwise see other TSO messages\n     and modify the allocation for SYSUT1 to conform to local\n     standards.\n\n  - DSN \"not found. Rejected.\"  OSTARXMT couldn't find the\n     dataset.  Check the name was typed correctly using normal\n     TSO naming standards, i.e. if the name isn't in single\n     quotes it will be prefixed with your userid. If the name is\n     correct check the dataset isn't migrated. If you had a\n     typing error then correct it and retry.\n\n  - \"Error writing to ODSN.\"  Either the output dataset filled\n     up, the volume is full or you don't have write access to the\n     dataset. If the output dataset has gone to 16 extents then\n     increase the size on the allocate for SYSUT1.\n\n  - \"All datasets were not processed but\" ODSN \"is valid.\" This\n     is a warning. The datasets that were specified correctly are\n     in the backup.\n\n  - \"Unable to copy\" INDSN \"to workfile.\" The TSO TRANSMIT\n     command failed to write the input file to the work file. If\n     this is a large file try increasing the size of the work\n     file allocated via SYSUT2. Otherwise check preceding TSO\n     errors.\n\n  - \"Read error on temp file.\" This should not occur. If it does\n     then record the preceding TSO error messages.\n\n  - \"error writing to output file.\" Either the output file is\n     full or you don't have write access to it. If it's full\n     increase the size of the dataset allocated as SYSUT1.\n\n\n\n                                   OSTARXMT - 11 -\n\n\n\n\n\n\n                    Application Solutions Group\n\n\n\n  OSTARREC messages\n\n  - \"Error allocating work file\" . The procedure was unable to\n     allocate a temporary work file.  Modify the allocation for\n     SYSUT2 to conform to local standard\n\n  - \"Unable to allocate file\" INDSN. Allocation of input file\n     failed. Check other error messages.  Possible errors are\n     security violations or exclusive shares.\n\n  - \"Invalid input DSN\" INDSN\". Invalid header.\". The input file\n     does not start with the expected header information.\n     Possible causes are transmission error or wrong input\n     dataset used.\n\n  - \"Input file is\" VERSION\". You need a new version of\n     'OSTARREC'.\".  The file you have uploaded requires a newer\n     version of OSTARREC. Contact support centre for a new\n     version.\n\n  - \"Read error on input file.\". Unable to read the input file.\n     See other TSO error messages for details.\n\n  - INDSN \"File level error checking failed.\". File validation\n     failed. Possible reasons include transmission error and\n     LRECL not 88.\n\n  - \"Record level error checking failed.\". File validation\n     failed.  Transmission error.\n\n  - \"Write error to temp file\". The temporary work file allocated\n     via SYSUT2 is not big enough.  Find the allocate statement\n     for SYSUT2 and increase the size.\n\n  - \"INMR152I RECEIVE FAILED. SENDER'S NODE ID NOT RECOGNIZED\".\n     This message is produced by the TSO RECEIVE command which is\n     used, under the covers, by OSTARREC.  It is produced when\n     the TSO TRANSMIT/RECEIVE customisation has not been\n     performed at the site when TSO/E was installed.\n\n\n\n\n\n\n\n                                   OSTARXMT - 12 -\n\n\n\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$OSTRIP": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x99\\x12?\\x01\\x00)\\x9f\\x11D\\x00&\\x002\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1999-05-03T00:00:00", "modifydate": "2000-10-25T11:44:00", "lines": 38, "newlines": 50, "modlines": 0, "user": "WSBG"}, "text": "           OSTRIP PROGRAM - TAKES AN .XMT FILE AND MAKES\n               NORMAL XMIT-FORMAT FILES, SEPARATED BY\n                   ./ ADD NAME=OSTnnnnn CARDS\n\n\n\n      If for some reason, OSTARREC doesn't receive a file because\nit was corrupted a little bit, but you still want to save part of\nit.  Another case:  Somebody sends you an .XMT file, and you don't\nhave OSTARREC to receive it with.  You still can get the materials.\nJust use OSTRIP, which strips all the error-checking information\noff from an .XMT file, and separates the embedded XMIT-format files\nwith ./ ADD NAME=OST00001 , ./ ADD NAME=OST00002 cards, and so forth.\nThen you create a pds out of the pieces, and TSO RECEIVE each piece\nseparately.  Not Ron MacRae's design, but it works, and it pays to\nhave another tool sometimes.\n\n      Look at members OSTRIP, OSTRIP$, and OSTRIP#.\n\n      Questions?  Please contact\n\n             Sam Golob, P.O. Box 906, Tallman, NY 10982-0906\n\n\n       email:   sbgolob@attglobal.net  or  sbgolob@aol.com\n\n\n      This program was developed on an IBM PC (clone) using the\nTachyon Cross Assembler and tested on the PC using the Tachyon\nOperating System.  This is a vendor product from Tachyon Software\nin Denver Colorado.   See http://www.tachyonsoft.com/tachyon\n\n          David Bond                        303-722-1341  phone\n          Tachyon Software                  303-722-0979  fax\n          665 South Harrison Street\n          Denver, Colorado 80209-3514\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$README": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x99\\x07_\\x00\\x99\\x07\\x7f#\\x04\\x00f\\x00W\\x00\\x00\\xd9\\xd4\\xc3\\xf2\\xf0@@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1999-03-16T00:00:00", "modifydate": "1999-03-18T23:04:00", "lines": 102, "newlines": 87, "modlines": 0, "user": "RMC20"}, "text": "                               OSTARXMT\n                               ========\n\n  Author  : Ron MacRae.\n\n  Address : ObjectStar Support, Amdahl UK Ltd, Cromwell House,\n               Bartley Way, Hook, Hampshire, RG27 9XA, UK.\n\n    Email :  Ron_MacRae@amdahl.com.\n\n    Phone : +44-1252-346379.\n\n  The purpose of this package of 2 REXX and 1 assembler programs is to\nprovide a simple method for packaging and unpackaging multiple MVS\ndatasets for transmission over the internet in a reliable way.\n\n  These programs have grown over the years as our, and our customers',\nrequirements have changed.  There are better ways to do this and if I\nwas starting from scratch I would do this a different way, but it works\nand I don't have time to fix it.\n\n  If you want to try it out copy the OSTARXMT & OSTARREC REXX progs to a\ndataset in your SYSPROC/SYSEXEC concatenation and type \"OSTARXMT ?\" and\n\"OSTARREC ?\" at the TSO command prompt.  This is all you need for the\nbasic functions.\n\n The assembler program OSTAREDC is not required as all its functions\nare duplicated in the REXX progs but it improves performance by over\n90%.  Also if you have IBM's TRSMAIN compression utility available,\nwhich is available from IBM via the www, you can plug this in to add\ndata compression.  If you want to use either of these then edit both the\nREXX programs, find OSTAREDC or TRSMAIN in column 1 and update the\ndataset name(s) to point to where the programs reside.\n\n-----------------------------------------------------------------------\n\nHow it works\n============\n\n  OSTARXMT takes as input the name of 1 output file, which must not\nexist, and the names of 1 or more input files, which must exist.\n\n  Each input file is run through TSO TRANSMIT to convert it to a FB80\nfile.\n\n  Each FB80 file is then processed to add error detection codes to the\nend of each line and each file to give 2 dimensional checks in the data\nand all the files are concatenated into the output 'XMT' file.  If\nOSTAREDC is available this is done in assembler instead of REXX.  On a\nCPU constrained system this can reduce the elapsed time by over 95%.\n\n  If TRSMAIN is available this XMT file is compressed into an XM1 file.\n\n  The XMT/XM1 file is then transmitted in binary to it's destination\n\n  OSTARREC is run on the target system against the uploaded file,\nprobably using ISPF 3.4, and it reverses the steps taken by OSTARXMT.\nIf the AUTONAME option is not used the user is prompted by TSO\nRECEIVE for dataset name(s).\n\nSome History\n============\n\n  Over the last 3-4 years Amdahl have been using the internet to\ndistribute MVS PTFs, documentation, e.t.c. to customers. We initially\nsent text files as ASCII and PTFs as binary but we had all sorts of\nproblems because the files were uploaded incorrectly into files with\nwith the wrong DCB info or with ascii/binary wrong.\n\n  We then standardised that all files would be in TSO transmit format\nwhich the customers could upload to MVS and then use TSO receive to\nreconstruct. We still had occasional problems with corrupt data which\nwere normally resolved by redoing the FTP or IND$FILE command.  We also\nhad problems because we often had to ship multiple MVS datasets and\nthese got mixed up, duplicated, lost by the time the datasets made their\nway to the customers' MVS systems.\n\n  OSTARXMT & OSTARREC were written to enable us to package multiple MVS\nfiles into a single dataset that was easy to FTP and would have checking\nON THE TARGET SYSTEM to ensure no data had been corrupted during the\nmultiple FTP processes used to get the data from our MVS system to the\ncustomers'.\n\n  Over time customers started to send us diagnostics over the internet.\nThese diagnostics could be SVC dumps of up to 1GB in size. We also\nwanted to send out complete put levels of software via the internet.\nThe REXX programs were taking too long to run and the output was beyond\nthe scope of many internet connections. I therefore modified the REXX\nprograms to do most of the work in an assembler subroutine, OSTAREDC,\nand allow the use of the TRSMAIN compression utility if the customer had\nit.\n\n  We've made the use of OSTARXMT & OSTARREC for internet transmission\nmandatory and also set up REXX programs to drive the FTP process at our\nend between our MVS systems and our FTP server. These two actions, for\ncustomers who use OSTARXMT and OSTARREC, have reduced our failure rates\nto almost 0.  When we do get problems it is usually easy to spot the\nerror. Normally either ASCII transmission or a real bit error in\ntransmission.\n\n  This is where we're at today but I have plans to use hardware\ncompression to replace TRSMAIN, when time permits.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$TRSMAIN": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x07o\\x00\\x99\\x07o\\x19\\x04\\x00^\\x00^\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-17T00:00:00", "modifydate": "1999-03-17T19:04:00", "lines": 94, "newlines": 94, "modlines": 0, "user": "SBGOLOB"}, "text": "*************************************************************************\n*                                                                       *\n*  Install the TRSMAIN program for later FTP usage                      *\n*                                                                       *\n*************************************************************************\nThis procedure provides the instructions that IBM customers can obtain\nthe TRSMAIN utility program from IBM FTP site. TRSMAIN program should be\nused to compact the documentation dataset prior to FTP it to IBM support\ncenter. Using the COMPRESSED dataset in FTP will save time in both\nsending and receiving transmission.\n\n1) If you have not installed the TRSMAIN program on your local\n   system, obtain the load module from IBM FTP site.\n\n    ftp.software.ibm.com, and login with :\n\n   USER: anonymous\n   PASSWORD: your complete e-mail address\n\n   Once you login to the ftp site,\n   Issue: CD s390/mvs/tools/packlib\n   Issue: BIN to set up binary mode transmission\n   Issue: LOCSITE RECFM=FB LRECL=80 BLKSIZE=3120\n   Issue: GET TRSMAIN your_local_dsn to obtain the load module\n   Issue: quit to get back into your TSO session\n\n   Once the TRSMAIN program is FTP'ed, allocate a PDS (i.e. PACKLIB )\n   with following characteristics:\n\n    Volume serial . . . .\n    Generic unit. . . . .\n    Space units . . . . . BLOCK\n    Primary quantity. . . 24\n    Secondary quantity. . 3\n    Directory blocks. . . 1\n    Record format . . . . U\n    Record length . . . . 0\n    Block size  . . . . . 13030\n    Expiration date . . .\n\n   Issue TSO RECEIVE INDSN(your_local_dsn) from your TSO session to\n   convert the TRSMAIN program back into its load module format.\n\n   The following messages will be displayed after the above command.\n\n   INMR901I Dataset PTFLCG.TERSE409.LOADLIB from NHAN on PLPSC\n   INMR902I Members: TRSMAIN\n   INMR906A Enter restore parameters or 'DELETE' or 'END' +\n\n   you should reply to INMR906A with the PDS name, which you allocated\n   earlier, and member name - TRSMAIN.\n   (i.e. DA(PACKLIB(TRSMAIN))\n\n2) Once the PACKLIB is installed, use the following sample JCL\n   to create your own job with proper modification to\n   &PACKLIB_PDS, &input_dataset and &tersed_output.\n\n   Here is the sample JCL to compress &input_dataset into its\n   COMPRESSED format.\n\n//PACKIT  JOB 'ACCOUNTING INFORMATION',NOTIFY=&SYSUID.\n//****************************************************\n//*                                                  *\n//*       TRSMAIN with PACK option                   *\n//*                                                  *\n//****************************************************\n//JOBLIB  DD   DISP=SHR,DSN=&PACKLIB_PDS\n//STEP     EXEC PGM=TRSMAIN,PARM=PACK\n//SYSPRINT DD   SYSOUT=H\n//INFILE   DD   DISP=SHR,DSN=&input_dataset\n//OUTFILE  DD   DISP=(NEW,CATLG),UNIT=SYSDAL,\n//       DSN=&packed_output,\n//       SPACE=(CYL,(ppp,sss),RLSE)\n\nThe JOBLIB DD can be eliminated if the &PACKLIB is included in the\nLNKLST concatenation.\n\nThe &input_dataset in the INFILE DD must be modified with the proper\ndataset name that needs to be compacted.\n\nThe &packed_output in the OUTFILE DD must be modified with the proper\ndataset name. The ppp and sss is the primary and secondary space for\nthe output dataset\n\n3) Once the JOB in step 2 gets executed successfully, you should use\n   the &packed_output in your FTP output process.\n   When you FTP this COMPRESSED dataset to IBM Support center, please\n   name that dataset with the PACKED as last qualifier, so IBM support\n   personal knows to UNPACK this dataset after it is obtained.\n\n4) After the TRSMAIN program is installed and tested, you should share\n   this information with your colleagues who work with IBM support\n   center, so they can also utilize the TRSMAIN to compress their\n   documentation dataset before FTPping it.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$TRSPACK": {"ttr": 783, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x07o\\x00\\x99\\x07o \\x14\\x00\\x0f\\x00\\r\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-03-17T00:00:00", "modifydate": "1999-03-17T20:14:00", "lines": 15, "newlines": 13, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBA  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//****************************************************\n//*                                                  *\n//*       TRSMAIN with PACK option                   *\n//*                                                  *\n//****************************************************\n//STEP     EXEC PGM=TRSMAIN,PARM=PACK\n//STEPLIB DD   DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSPRINT DD   SYSOUT=H\n//INFILE   DD   DISP=SHR,DSN=SBGOLOB.CBT.EDIT.SEQ\n//OUTFILE  DD   DISP=(NEW,CATLG),UNIT=SYSDA,\n//       DSN=SBGOLOB.CBT.EDIT.PACKED,\n//       SPACE=(CYL,(5,5),RLSE)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$TRSUNPK": {"ttr": 785, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x99\\x07o\\x00\\x99\\x07o %\\x00\\x0f\\x00\\r\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-03-17T00:00:00", "modifydate": "1999-03-17T20:25:00", "lines": 15, "newlines": 13, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBA  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//****************************************************\n//*                                                  *\n//*       TRSMAIN with UNPACK option                 *\n//*                                                  *\n//****************************************************\n//STEP     EXEC PGM=TRSMAIN,PARM=UNPACK\n//STEPLIB DD   DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSPRINT DD   SYSOUT=H\n//INFILE   DD   DISP=SHR,DSN=SBGOLOB.CBT.EDIT.PACKED\n//OUTFILE  DD   DISP=(NEW,CATLG),UNIT=SYSDA,\n//       DSN=SBGOLOB.CBT.EDIT.SEQDUPL,\n//       SPACE=(CYL,(9,9),RLSE)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "OSTAREDC": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x07_\\x00\\x99\\x07\\x7f\\x17\\x10\\x01\\\\\\x01]\\x00\\x00\\xd9\\xd4\\xc3\\xf2\\xf0@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-03-16T00:00:00", "modifydate": "1999-03-18T17:10:00", "lines": 348, "newlines": 349, "modlines": 0, "user": "RMC20"}, "text": "OSTAREDC TITLE 'A PROGRAM TO ADD/ CHECK ERROR DETECTION BYTES'\n*\n*    This software is supplied by Amdahl Corp. for the transmission\n* of materials between ObjectStar support and it's customers. Any\n* other use of this software is at the user's discretion and is not\n* supported in any way by Amdahl Corp.\n*\n*   The software is supplied as 'freeware' and may be used/modified\n* by anyone provided they do not then sell it on for profit or\n* expect support from Amdahl Corp.\n*\n*   Limited support MAY in some cases be available from the author.\n*\nR15      EQU   15\nR14      EQU   14\nRSAV     EQU   13\nRBASE    EQU   12\nRLINK    EQU   11\nRWORK    EQU   10\nRCOUNT   EQU   9\nR8       EQU   8\nR7       EQU   7\nR6       EQU   6\nR5       EQU   5\nR4       EQU   4\nR3       EQU   3\nR2       EQU   2\nR1       EQU   1\nR0       EQU   0\n         TITLE 'INITIALISE PROGRAM'\nOSTAREDC CSECT\nOSTAREDC AMODE 24\nOSTAREDC RMODE 24\n         PRINT DATA\n         USING OSTAREDC,R15\n         B     OSTARED1\n         DC    C'OSTAREDC V1.01 &SYSDATE'\n*        V2.01 - ADD DISCLAIMER.\nOSTARED1 DS    0H\n         PRINT NODATA\n         PRINT NOGEN\n         DROP  R15\n         STM   14,12,12(RSAV)\n         LR    RBASE,R15\n         USING OSTAREDC,RBASE\n         L     R15,SAVEADDR\n         ST    R15,8(RSAV)\n         ST    RSAV,4(R15)\n         LR    RSAV,R15\n         USING SAVEAREA,RSAV\n         L     RWORK,0(R1)               SAVE PARM POINTER\n         OPEN  (SYSOUT,OUTPUT)\n         LA    R1,SYSOUT\n         USING IHADCB,R1\n         TM    DCBOFLGS,DCBOFOPN\n         DROP  R1\n         BNO   ERROR1\n         CLC   PARMLEN,0(RWORK)          CORECT PARM LENGTH?\n         BNE   ERROR2\n         MVC   PARMS,2(RWORK)            SAVE PARMS\n         PACK  DWORD,PARMDSNS\n         CVB   R1,DWORD\n         STH   R1,PARMDSNS\n*        MVC   PARMDSNS,=H'1'            DEBUG\n         CLI   PARMMODE,C'A'\n         BE    ADD\n         CLI   PARMMODE,C'U'\n         BE    CHECK\n         B     ERROR3\n         TITLE 'ADD EDC MAINLINE'\nADD      DS    0H\n         OPEN  (FB88FILE,OUTPUT)\n         LA    R1,FB88FILE\n         BAL   RLINK,OPENCHK\n         LA    RCOUNT,1                 ALLOW FOR HEADER RECORD\n         RDJFCB FB88FILE\n         BAL   RLINK,JFCBCHK\n         MVC   SAVELEN,=H'80'            SET LRECL FOR OTHER DS\nADDDSLP  DS    0H                        DATASET LOOP\n         LH    R1,DSNS\n         LA    R1,1(R1)                  ADD 1 TO DATASETS PROCESSED\n         STH   R1,DSNS\n         CH    R1,PARMDSNS               ARE WE FINISHED?\n         BH    ADDEND                    YES - BRANCH\n         CVD   R1,DWORD\n         UNPK  DWORD(5),DWORD+6(2)\n         OI    DWORD+4,C'0'              GET DATASET NUMBER\n         LA    R1,FB80FILE\n         USING IHADCB,R1\n         MVC   DCBDDNAM+5(3),DWORD+2     MOVE TO DDNAME OSTARNNN\n         MVC   SAVEDDN,DCBDDNAM          MOVE TO DDNAME OSTARNNN\n         OPEN  (FB80FILE,INPUT)          OPEN INPUT FILE\n         LA    R1,FB80FILE\n         BAL   RLINK,OPENCHK\n         RDJFCB FB80FILE\n         BAL   RLINK,JFCBCHK\n         MVC   FILTOKEN,PARMTOK          INITIALISE FILE EDC\nADDRDLP  DS    0H\n         GET   FB80FILE,RECFB80          READ NEXT RECORD\n         XC    FILTOKEN,RECFB80          MODIFY FILE EDC\n         XC    FILTOKEN,RECFB80+40       MODIFY FILE EDC\n         MVC   RECTOKEN,RECFB80          INITIALISE RECORD EDC\n         LA    R1,RECFB80+8\n         LA    R0,9\nADDEDCLP DS    0H\n         XC    RECTOKEN,0(R1)\n         LA    R1,8(R1)\n         BCT   R0,ADDEDCLP\n         PUT   FB88FILE,RECFB88\n         LA    RCOUNT,1(RCOUNT)\n         B     ADDRDLP\n         SPACE\nADDRDLPE DS    0H                        END OF FILE ON READ\n         MVC   RECFB88(40),PARMTOK\n         MVC   RECFB88+40(40),FILTOKEN\n         XC    RECTOKEN,RECTOKEN\n         PUT   FB88FILE,RECFB88\n         LA    RCOUNT,1(RCOUNT)\n         CLOSE (FB80FILE)\n         B     ADDDSLP\n         SPACE\n         TITLE 'CHECK EDC MAINLINE'\nCHECK    DS    0H\n         OPEN  (FB88FILE,INPUT)\n         LA    R1,FB88FILE\n         BAL   RLINK,OPENCHK\n         RDJFCB FB88FILE\n         BAL   RLINK,JFCBCHK\n         MVC   SAVELEN,=H'80'            SET LRECL FOR OTHER DS\n         GET   FB88FILE,RECFB88          IGNORE HEADER\n         LA    RCOUNT,1                  # OF RECORS READ\nCHKDSLP  DS    0H                        DATASET LOOP\n         LH    R1,DSNS\n         LA    R1,1(R1)                  ADD 1 TO DATASETS PROCESSED\n         STH   R1,DSNS\n         CH    R1,PARMDSNS               ARE WE FINISHED?\n         BH    CHKEND                    YES - BRANCH\n         CVD   R1,DWORD\n         UNPK  DWORD(5),DWORD+6(2)\n         OI    DWORD+4,C'0'              GET DATASET NUMBER\n         LA    R1,FB80FILE\n         USING IHADCB,R1\n         MVC   DCBDDNAM+5(3),DWORD+2     MOVE TO DDNAME OSTARNNN\n         MVC   SAVEDDN,DCBDDNAM          MOVE TO DDNAME OSTARNNN\n         DROP  R1\n         OPEN  (FB80FILE,OUTPUT)         OPEN INPUT FILE\n         LA    R1,FB80FILE\n         BAL   RLINK,OPENCHK\n         RDJFCB FB80FILE\n         BAL   RLINK,JFCBCHK\n         MVC   FILTOKEN,PARMTOK          INITIALISE FILE EDC\nCHKRDLP  DS    0H\n         GET   FB88FILE,RECFB88          READ NEXT RECORD\n         LA    RCOUNT,1(RCOUNT)\n         CLC   PARMTOK,RECFB88           END OF INPUT FILE\n         BE    CHKRDLPE                  YES BRANCH\n         XC    FILTOKEN,RECFB80          MODIFY FILE EDC\n         XC    FILTOKEN,RECFB80+40       MODIFY FILE EDC\n         MVC   DWORD,RECFB80             INITIALISE RECORD EDC\n         LA    R2,RECFB80+8\n         LA    R3,9\nCHKEDCLP DS    0H\n         XC    DWORD,0(R2)\n         LA    R2,8(R2)\n         BCT   R3,CHKEDCLP\n         CLC   DWORD,RECTOKEN\n         BNE   CHKEDCER\nCHKPUT   DS    0H\n         PUT   FB80FILE,RECFB80\n         B     CHKRDLP\nCHKEDCER DS    0H                        CHECKSUM ERROR\n         L     R1,ERRORS\n         LA    R1,1(R1)\n         ST    R1,ERRORS\n         MVC   PLINE(32),=C'CORRUPT DATA DETECTED IN RECORD '\n         CVD   RCOUNT,DWORD\n         UNPK  PLINE+32(15),DWORD\n         OI    PLINE+46,C'0'\n         BAL   RLINK,PRINT\n         B     CHKPUT\n         SPACE\nCHKRDLPE DS    0H                        END OF FILE ON READ\n         CLC   FILTOKEN,RECFB80+40\n         BE    CHRDCLOS\n         L     R1,ERRORS\n         LA    R1,1(R1)\n         ST    R1,ERRORS\n         MVC   PLINE(32),=C'CORRUPT FILE DETECTED AT RECORD '\n         CVD   RCOUNT,DWORD\n         UNPK  PLINE+32(15),DWORD\n         OI    PLINE+46,C'0'\n         BAL   RLINK,PRINT\nCHRDCLOS DS    0H\n         CLOSE (FB80FILE)\n         B     CHKDSLP\n         TITLE 'END OF INPUT IN BOTH MODES'\nADDEND   DS    0H                        END OF JOB\nCHKEND   DS    0H                        END OF JOB\n         CLOSE (FB88FILE)\n         MVC   PLINE(21),=C'Records in XMT file :'\n         MVC   PLINE+21(L'EDMASK),EDMASK\n         CVD   RCOUNT,DWORD\n         ED    PLINE+21(L'EDMASK),DWORD\n         BAL   RLINK,PRINT\n         MH    RCOUNT,=H'88'\n         MVC   PLINE(21),=C'Bytes in XMT file   :'\n         MVC   PLINE+21(L'EDMASK),EDMASK\n         CVD   RCOUNT,DWORD\n         ED    PLINE+21(L'EDMASK),DWORD\n         BAL   RLINK,PRINT\n         SR    R0,R0\n         LR    R1,RCOUNT\n         D     R0,=F'1024'\n         MVC   PLINE(21),=C'Kbytes in XMT file  :'\n         MVC   PLINE+21(L'EDMASK),EDMASK\n         CVD   R1,DWORD\n         ED    PLINE+21(L'EDMASK),DWORD\n         BAL   RLINK,PRINT\n         CLOSE (SYSOUT)\n         L     R15,ERRORS\n         LTR   R15,R15\n         BZ    RETURN\n         LA    R15,16\nRETURN   DS    0H\n         L     RSAV,4(RSAV)\n         L     14,12(RSAV)\n         LM    0,12,20(RSAV)\n         BR    R14\n         TITLE 'PRINT ERROR MESSAGE, CLOSE ANY OPEN FILES, EXIT RC=16'\nERROR    DS    0H\n         BAL   RLINK,PRINT\n         LA    R1,FB80FILE\n         USING IHADCB,R1\n         TM    DCBOFLGS,DCBOFOPN\n         DROP  R1\n         BNO   ERRCONT1\n         CLOSE (FB80FILE)\nERRCONT1 DS    0H\n         LA    R1,FB88FILE\n         USING IHADCB,R1\n         TM    DCBOFLGS,DCBOFOPN\n         DROP  R1\n         BNO   ERRCONT2\n         CLOSE (FB80FILE)\nERRCONT2 DS    0H\n         CLOSE (SYSOUT)\n         LA    R15,16\n         B     RETURN\n         TITLE 'SUBROUTINES'\nOPENCHK  DS    0H\n         USING IHADCB,R1                R1 POINTS TO DCB\n         TM    DCBOFLGS,DCBOFOPN\n         BNO   ERROROPN\n         BR    RLINK\n         DROP  R1\nJFCBCHK  DS    0H\n         LTR   R15,R15\n         BNZ   ERRORJFC\n         LA    R1,JFCBDATA\n         USING JFCBLK,R1\n         TM    JFCRECFM,X'80'\n         BNO   ERRORRFM\n         CLC   SAVELEN,JFCLRECL\n         BNE   ERRORRLN\n         BR    RLINK\n         DROP  R1\nPRINT    DS    0H\n         PUT   SYSOUT,PLINE-1\n         MVC   PLINE,PLINE-1\n         BR    RLINK\n         TITLE 'ERROR ROUTINES'\nERROR1   DS    0H\n         WTO   'ERROR: UNABLE TO OPEN SYSOUT DD.',ROUTCDE=11\n         ABEND 0001\n         B     ERROR\nERROR2   DS    0H\n         MVC   PLINE(L'MSG2),MSG2\n         B     ERROR\nERROR3   DS    0H\n         MVC   PLINE(L'MSG3),MSG3\n         B     ERROR\nERROROPN DS    0H\n         MVC   PLINE(L'MSG5),MSG5\n         MVC   PLINE+3(8),SAVEDDN\n         B     ERROR\nERRORRFM DS    0H\n         MVC   PLINE(L'MSG6),MSG6\n         MVC   PLINE+3(8),SAVEDDN\n         B     ERROR\nERRORRLN DS    0H\n         MVC   PLINE(L'MSG7),MSG7\n         MVC   PLINE+3(8),SAVEDDN\n         B     ERROR\nFB88EOF  DS    0H  END OF FILE ENCOUNTERED ON FB88 FILE\n         MVC   PLINE(L'MSG8),MSG8\n         B     ERROR\nERRORJFC DS    0H\n         MVC   PLINE(L'MSG9),MSG9\n         MVC   PLINE+3(8),SAVEDDN\n         B     ERROR\nMSG2     DC    C'ERROR2: INVALID INPUT PARM LENGTH'\nMSG3     DC    C'ERROR3: MODE IS NOT ADD OR CHECK.'\nMSG5     DC    C'DD XXXXXXXX - OPEN ERROR.'\nMSG6     DC    C'DD XXXXXXXX - INVALID RECFM.'\nMSG7     DC    C'DD XXXXXXXX - INVALID LRECL.'\nMSG8     DC    C'ERROR8: PREMATURE EOF ON INPUT FILE.'\nMSG9     DC    C'DD XXXXXXXX - UNABLE TO READ JFCB.'\nEDMASK   DC    X'402020206B2020206B2020206B2020206B20202040'\n         TITLE ' WORKING STORAGE'\n         LTORG\nSAVEADDR DC    A(WORKSTOR)\n         DROP  RBASE\nWORKSTOR CSECT\nSAVEAREA DS    18F\nERRORS   DS    F'0'\nDWORD    DS    D\nSAVEDDN  DC    CL8'OSTARXMT'\nSAVELEN  DC    H'88'\nDSNS     DC    H'0'\n         DS    0H\nPARMS    DS    0XL45\nPARMDSNS DS    CL3\nPARMMODE DS    CL2\nPARMTOK  DS    CL40\nPARMLEN  DC    H'45'\nFILTOKEN DS    XL40\nRECFB88  DS    0XL88\nRECFB80  DS    XL80\nRECTOKEN DS    XL8\n         PRINT NOGEN\nSYSOUT   DCB   DDNAME=SYSOUT,MACRF=(PM),DSORG=PS\nFB80FILE DCB   DDNAME=OSTARXXX,MACRF=(GM,PM),DSORG=PS,EODAD=ADDRDLPE,  X\n               LRECL=80,RECFM=FB,EXLST=JFCB1\nFB88FILE DCB   DDNAME=OSTARXMT,MACRF=(GM,PM),DSORG=PS,                 X\n               LRECL=88,RECFM=FB,EXLST=JFCB1,EODAD=FB88EOF\n         DC    CL1' '  BYTE USED TO CLEAR MSG\nPLINE    DC    CL80' '\n         DC    CL52' '\n         DS    0F\nJFCB1    DC    X'07',AL3(JFCBDATA)\n         DC    X'80',AL3(0)\nJFCBDATA DS    XL512\n         TITLE 'DSECTS'\n         DCBD  DSORG=PS\nJFCBLK   DSECT\n         IEFJFCBN\n         TITLE 'END OF PROGRAM'\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "OSTARREC": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x13\\x00\\x00\\x00\\x99\\x06/\\x00\\x99\\x07\\x7f\\x17\\x11\\x01.\\x01\\r\\x00\\x00\\xd9\\xd4\\xc3\\xf2\\xf2@@@@@'", "ispf": {"version": "01.19", "flags": 0, "createdate": "1999-03-03T00:00:00", "modifydate": "1999-03-18T17:11:00", "lines": 302, "newlines": 269, "modlines": 0, "user": "RMC22"}, "text": "/* * Rexx proc: OSTARREC ** Author: RMC20 ***** Date: 7 Mar 1997 *** */\n/* ----------------------------------------------------------------- */\n/* Purpose: Uncompress multiple datasets from a dataset created by   */\n/* OSTARXMT for internet transmission.                               */\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/*    This software is supplied by Amdahl Corp. for the transmission */\n/* of materials between ObjectStar support and it's customers. Any   */\n/* other use of this software is at the user's discretion and is not */\n/* supported in any way by Amdahl Corp.                              */\n/*                                                                   */\n/*   The software is supplied as 'freeware' and may be used/modified */\n/* by anyone provided they do not then sell it on for profit or      */\n/* expect support from Amdahl Corp.                                  */\n/*                                                                   */\n/*   Limited support MAY in some cases be available from the author. */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n/*  V 1.02 remove chars which won't ascii transmit.                  */\n/*  V 1.03 Make work file same size as input file.                   */\n/*  V 1.04 Improve performance by better blocking workfile.          */\n/*  V 1.05 Add diagnostic info on error checking failure.            */\n/*  V 1.06 Correct SYSUT2 allocation if inputfile in blocks.         */\n/*  V 1.07 Correct record counts.                                    */\n/*  V 1.08 Provide error message if input truncated.                 */\n/*  V 1.09 Allow proc to continue after checksum error.              */\n/*  V 1.0A Allow allow use of TRSMAIN PAK files.                     */\n/*  V 1.0B Add support for XM1 & XM2 files.                          */\n/*  V 1.0C Simplify detection of different input formats.            */\n/*  V 1.0D Add autoname option and improve help.                     */\n/*  V 1.0E remove | characters, x'4f', which don't translate well.   */\n/*  V 1.0F Add fast edc assembler program OSTAREDC.                  */\n/*  V 1.0G Add disclaimer.                                           */\n/* ----------------------------------------------------------------- */\n/* Usage: Add OSTARREC member to a dataset in sysexec/sysproc concat */\n/*  then type OSTARREC against a .XM? format dataset in ISPF 3.4.    */\n/*  User is prompted, via TSO RECEIVE, for output DSN(s).            */\n/* ----------------------------------------------------------------- */\n/* Parameter(s): InputDataset autoname                               */\n/* ***************************************************************** */\nTRSMAIN = \"'CSUPP.SHARED.LOADLIB(TRSMAIN)'\" /* MODIFY IF AVAILABLE */\nOSTAREDC = \"'CSUPP.SHARED.LOADLIB(OSTAREDC)'\" /* MODIFY IF AVAILABLE */\nADDRESS \"TSO\"\nARG INDSN P1 .\nIF INDSN = \"\"  THEN CALL HELP\nIF INDSN = \"?\" THEN CALL HELP\nIF ABBREV(\"AUTONAME\",P1,4)\nTHEN AUTONAME = 1\nELSE AUTONAME = 0\nRECS = 0\n/* PHASE 1 - EVALUATE INPUT */\nIF SYSDSN(INDSN) <> \"OK\"\nTHEN CALL ERROR \"unable to find dataset\" INDSN \"Please respecify.\"\nX = LASTPOS('.',INDSN)\nSFX = SUBSTR(INDSN,X+1)\nPFX = SUBSTR(INDSN,1,X-1)\nIF SUBSTR(PFX,1,1) = \"'\"\nTHEN DO\n     QUOTES = 1\n     X = LENGTH(SFX)\n     SFX = SUBSTR(SFX,1,X-1)\n     PFX = SUBSTR(PFX,2)\n     END\nELSE QUOTES = 0\nX = PROMPT(\"ON\")\nX = LISTDSI(INDSN)\nSELECT\n  WHEN SFX = \"XMT\"\n  THEN IF SYSLRECL <> 88\n       THEN CALL ERROR \"Invalid LRECL=\"SYSLRECL\" for file with sfx=\"SFX\".\"\n  WHEN SFX = \"XM1\"\n  THEN IF SYSLRECL <> 1024\n       THEN CALL ERROR \"Invalid LRECL=\"SYSLRECL\" for file with sfx=\"SFX\".\"\n  WHEN SFX = \"XM2\"\n  THEN IF SYSLRECL <> 1024\n       THEN CALL ERROR \"Invalid LRECL=\"SYSLRECL\" for file with sfx=\"SFX\".\"\n  OTHERWISE\n  CALL ERROR \"Dsname\" INDSN \"suffix\" SFX \"is not XMT, XM1, or XM2.\"\n  END\nIF SYSUNITS = \"BLOCK\" THEN SYSUNITS = \"\"\n/* PHASE 2 - DECOMPRESS IF POSSIBLE */\nIF SFX <> \"XMT\"\nTHEN DO\n     IF SYSDSN(TRSMAIN) <> \"OK\"\n     THEN CALL ERROR \"TRSMAIN not available. Cannot decompress data.\"\n     X = LASTPOS('.',INDSN)\n     IF SFX = \"XM2\"\n     THEN DO\n          XM2 = 1\n          ODSN = SUBSTR(INDSN,1,X-1)\".XMX1\"\n          IF SUBSTR(ODSN,1,1) = \"'\" THEN ODSN = ODSN\"'\"\n          END\n     ELSE DO\n          XM2 = 0\n          ODSN = \"OSTARREC.WORKFILE\"\n          END\n     IF SYSDSN(ODSN) = \"OK\"\n     THEN CALL ERROR \"Dataset\" ODSN \"already exists. Please delete it.\"\n     SAY \"Uncompressing\" INDSN \"into\" ODSN\".\"\n     SELECT\n       WHEN SYSUNIT = \"3390\" THEN WORK = \"27984\"\n       OTHERWISE\n       WORK = 0\n       END\n     \"ALLOCATE FI(SYSPRINT) DA(*) SHR REUSE\"\n     \"ALLOCATE FI(INFILE) DA(\"INDSN\") SHR REUSE\"\n     IF RC <> 0 THEN CALL ERROR \"Unable to allocate\" INDSN\".\"\n     \"ALLOCATE FI(OUTFILE) DA(\"ODSN\") NEW REUSE TRACKS\",\n           \"SPACE(\"SYSALLOC*5\",\"SYSALLOC*5\")\" SYSUNITS \"CATALOG\"\n     IF RC <> 0 THEN CALL ERROR \"Unable to allocate\" ODSN\".\"\n     \"CALL\" TRSMAIN \"'UNPACK'\"\n     IF RC <> 0\n     THEN CALL ERROR \"Unable to uncompress\" INDSN\". RC=\"RC\".\"\n     \"FREE FI(INFILE,OUTFILE)\"\n     IF XM2\n     THEN EXIT 0\n     INDSN = ODSN\n     END\n/* PHASE 3 - UNPACKAGE XMT FILE */\n\"ALLOCATE FI(OSTARXMT) DA(\"INDSN\") SHR REUSE\"\nIF RC = 0\nTHEN X = LISTDSI(INDSN)\nELSE CALL ERROR \"Unable to allocate file\" INDSN\nSELECT\n  WHEN SYSUNIT = \"3390\" THEN WORK = \"27920\"\n  WHEN SYSUNIT = \"3380\" THEN WORK = \"23440\"\n  OTHERWISE\n  WORK = 0\n  END\nEXECIO \"1 DISKR OSTARXMT ( STEM IN\"\nPARSE VAR IN1 HEADER VERS DSNS DATE TIME .\nIF HEADER = COPIES(\"OSTARXMT10\",4)\nTHEN NOP\nELSE CALL ERROR \"Invalid input dsn\" INDSN\". Invalid header.\"\nIF SUBSTR(VERS,1,4) = \"V1.0\"\nTHEN NOP\nELSE CALL ERROR \"Input file is\" VERS\". You need a new version of 'OSTARREC'.\"\nTOKEN = HEADER\nRECS = 1\nRCVC = 0\nSAY \"Now processing input file\" INDSN\".\"\nSAY \"Created on\" DATE \"at\" TIME\", containing\" DSNS \"dataset(s).\"\nIF SYSDSN(OSTAREDC) = \"OK\"\nTHEN DO\n     EXECIO \"0 DISKR OSTARXMT ( FINIS\"\n     DO I = 1 TO DSNS\n        DDN.I = \"OSTAR\"RIGHT(I,3,\"0\")\n        \"ALLOCATE FI(\"DDN.I\") NEW DELETE REUSE\",\n               \"SPACE(\"SYSALLOC\",\"SYSALLOC%10\")\" SYSUNITS ,\n               \"LRECL(80) RECFM(F B) BLKSIZE(\"WORK\")\"\n        END\n     PARMS = \"'\"RIGHT(DSNS,3,\"0\")\"UN\"HEADER\"'\"\n     \"ALLOCATE FI(SYSOUT) DA(*) SHR\"\n     \"CALL\" OSTAREDC PARMS\n     EDCRC = RC\n     IF EDCRC = 0\n     THEN NOP\n     ELSE CALL ERROR \"Record/file level error checking failed.\"\n     DO I = 1 TO DSNS\n        IF AUTONAME\n        THEN DO\n             IF QUOTES\n             THEN PUSH \"DA('\"PFX\".XMX\"I\"')\"\n             ELSE PUSH \"DA(\"PFX\".XMX\"I\")\"\n             END\n       \"RECEIVE INDD(\"DDN.I\") NODISPLAY\"\n       \"FREE FI(\"DDN.I\")\"\n        END\n     \"FREE FI(OSTARXMT)\"\n     END\nELSE DO\n     SAY \"Fast error detection program, OSTAREDC, not available.\"\n     \"ALLOCATE FI(SYSUT2) NEW DELETE REUSE\",\n          \"SPACE(\"SYSALLOC\",\"SYSALLOC%10\")\" SYSUNITS ,\n               \"LRECL(80) RECFM(F B) BLKSIZE(\"WORK\")\"\n     IF RC = 0\n     THEN NOP\n     ELSE CALL ERROR \"Error allocating work file\"\n     DO FOREVER\n        EXECIO \"1 DISKR OSTARXMT (STEM IN\"\n        IF RC = 2 THEN LEAVE\n        IF RC = 0\n        THEN RECS = RECS + 1\n        ELSE CALL ERROR \"Read error on input file.\"\n        IF SUBSTR(IN1,1,40) = HEADER\n        THEN DO\n             EXECIO \"0 DISKW SYSUT2 (FINIS\"\n             IF TOKEN = SUBSTR(IN1,41,40)\n             THEN TOKEN = HEADER\n             ELSE DO\n                  TOKEN = HEADER\n                  CALL ERROR \"File level error checking failed.\"\n                  END\n             RCVC = RCVC + 1\n             IF AUTONAME\n             THEN DO\n                  IF QUOTES\n                  THEN PUSH \"DA('\"PFX\".XMX\"RCVC\"')\"\n                  ELSE PUSH \"DA(\"PFX\".XMX\"RCVC\")\"\n                  END\n             \"RECEIVE INDD(SYSUT2) NODISPLAY\"\n             ITERATE\n             END\n        ELSE DO\n             TOKEN2 = SUBSTR(IN1,1,8)\n             DO I = 9 TO 73 BY 8\n                TOKEN2 = BITXOR(TOKEN2,SUBSTR(IN1,I,8))\n                END\n             IF TOKEN2 = SUBSTR(IN1,81,8)\n             THEN OUT1 = SUBSTR(IN1,1,80)\n             ELSE DO\n                  OUT1 = SUBSTR(IN1,1,80)\n                  CALL ERROR \"Record level error checking failed.\"\n                  END\n             END\n        TOKEN = BITXOR(TOKEN,SUBSTR(IN1,1,40))\n        TOKEN = BITXOR(TOKEN,SUBSTR(IN1,41,40))\n        EXECIO \"1 DISKW SYSUT2 (STEM OUT\"\n        IF RC = 0\n        THEN NOP\n        ELSE CALL ERROR \"Write error to temp file\"\n        END\n     EXECIO \"0 DISKR OSTARXMT (FINIS\"\n     EXECIO \"0 DISKW SYSUT2 (FINIS\"\n     \"FREE FI(OSTARXMT,SYSUT2)\"\n     IF SUBSTR(IN1,1,40) = HEADER\n     THEN NOP\n     ELSE CALL ERROR \"Incomplete XMT file. End of file record not found.\"\n     END\nIF INDSN = \"OSTARREC.WORKFILE\" THEN \"DELETE OSTARREC.WORKFILE\"\nEXIT 0\nERROR: PROCEDURE EXPOSE RC RECS\nPARSE ARG MSG\nSAY \" \"\nSAY \"====>\" MSG \"<====\"\nSAY \" \"\nSAY \"====> Error occurred processing record\" RECS \"<====\"\nSAY \" \"\nIF WORD(MSG,2) = 'level'\nTHEN DO\n     SAY \"Do you wish to continue after this checksum error? (Y,N)\"\n     PULL CONT\n     IF ABBREV(\"YES\",CONT,1)\n     THEN DO\n          SAY\n          SAY \"********************************************************\"\n          SAY \"*    WARNING: The file being rebuilt is corrupted.     *\"\n          SAY \"*                                                      *\"\n          SAY \"*    Do NOT use it for purposes other than diagnosis.  *\"\n          SAY \"*    ================================================  *\"\n          SAY \"********************************************************\"\n          RETURN\n          END\n     END\nEXIT 16\nHelp: procedure\nSAY \"The OSTARREC REXX procedure is used to reconstruct datasets\"\nSAY \"created by the OSTARXMT procedure.\"\nSAY \"\"\nSAY \"OSTARXMT creates 3 possible formats of file.\"\nSAY \"\"\nSAY \" An XMT file is a single MVS FB LRECL=88 file containing 1 or more\"\nSAY \"MVS sequential or partitioned datasets with error detection data\"\nSAY \"added.\"\nSAY \"\"\nSAY \" An XM1 file is a compressed version of an XMT file to allow\"\nSAY \"faster data transmission over the internet.  It has RECFM=FB and\"\nSAY \"LRECL=1024.\"\nSAY \"\"\nSAY \" An XM2 file is a HIGHLY compressed version of a single large\"\nSAY \"seqential dataset, e.g. a dump. It is quick to create and send\"\nSAY \"via the internet but has no error detection information.  It has\"\nSAY \"RECFM=FB and LRECL=1024.\"\nSAY \"\"\nSAY \"To restore files with OSTARREC do as follows :-\"\nSAY \"\"\nSAY \"1) Upload the file, using BINARY transmission, to a seqential\"\nSAY \"  dataset with RECFM=FB.\"\nSAY \"  For XMT format the file should end in .XMT and have LRECL=88.\"\nSAY \"  For XM1 format the file should end in .XM1 and have LRECL=1024.\"\nSAY \"  For XM2 format the file should end in .XM2 and have LRECL=1024.\"\nSAY \"\"\nSAY \"3) Find the uploaded dataset with ISPF 3.4 and type OSTARREC\"\nSAY \"  against it to recreate the original datasets. For XMT and XM1\"\nSAY \"  files you will be prompted to provide dataset names for each\"\nSAY \"  input file in the dataset. Press enter to select the original\"\nSAY \"  name with the high level qualifier changed to your userid as per\"\nSAY \"  the TSO RECEIVE command.\"\nSAY \"\"\nSAY \"  For any of the three formats the dataset may be large and you\"\nSAY \" may want to run the job under batch TSO. You can then add the\"\nSAY \" AUTONAME parameter, eg %OSTARREC 'my.dataset.XM1' AUTONAME, which\"\nSAY \" will cause the datasets to be named 'my.dataset.XMXnnn' where nnn\"\nSAY \" is the file number within the XMT or XM1 file.\"\nSAY \"\"\nSAY \" For info on how to create OSTARXMT files from MVS files see the\"\nSAY \"OSTARXMT help via the '%OSTARXMT ?' command.\"\nSAY \"\"\nSAY \" If you have any problems, or encounter error messages you don't\"\nSAY \"understand then contact the Support Centre.\"\nSAY \"\"\nexit 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "OSTARXMT": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x011\\x00\\x00\\x00\\x99\\x05\\x7f\\x00\\x99\\x07\\x7f\\x17\\x11\\x01\\x86\\x01o\\x00\\x00\\xd9\\xd4\\xc3\\xf2\\xf2@@@@@'", "ispf": {"version": "01.49", "flags": 0, "createdate": "1999-02-26T00:00:00", "modifydate": "1999-03-18T17:11:00", "lines": 390, "newlines": 367, "modlines": 0, "user": "RMC22"}, "text": "/* * Rexx proc: OSTARXMT ** Author: RMC20 ***** Date: 7 Mar 1997 *** */\n/* ----------------------------------------------------------------- */\n/* Purpose: Compress multiple datasets into a format suitable for    */\n/* transmission via pc, internet, etc, and reconstitution via        */\n/* OSTARREC procedure.                                               */\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/*    This software is supplied by Amdahl Corp. for the transmission */\n/* of materials between ObjectStar support and it's customers. Any   */\n/* other use of this software is at the user's discretion and is not */\n/* supported in any way by Amdahl Corp.                              */\n/*                                                                   */\n/*   The software is supplied as 'freeware' and may be used/modified */\n/* by anyone provided they do not then sell it on for profit or      */\n/* expect support from Amdahl Corp.                                  */\n/*                                                                   */\n/*   Limited support MAY in some cases be available from the author. */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n/* V 1.02 remove chars which won't ascii transmit.                   */\n/* V 1.03 remove chars which won't ascii transmit.                   */\n/* V 1.04 Allow single dataset quick option.                         */\n/* V 1.05 Fix bug introduced by 1.04.                                */\n/* V 1.06 Add data counts.                                           */\n/* V 1.07 Remove excessive trailing blanks in dsnames.               */\n/* V 1.08 Improve dataset size & blocking calculations.              */\n/* V 1.09 remove #s from dataset names.                              */\n/* V 1.0A Add support for TRSMAIN program and PAK files.             */\n/* V 1.0B Add support for XM1 & XM2 files.                           */\n/* V 1.0C Correct error in PHASE11 (compression) process.            */\n/* V 1.0D Allow XM2 format only for PS files not PO and add help.    */\n/* V 1.0E IMPROVE PERFORMANCE VIA OSTAREDC MODULE.                   */\n/* V 1.0F Synchonize versions with ostarrec. (no change)             */\n/* V 1.0G Add disclaimer.                                            */\n/*                                                                   */\n/* ***************************************************************** */\n/* Phase 1 - Identify environment and input                          */\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nTRSMAIN = \"'CSUPP.SHARED.LOADLIB(TRSMAIN)'\" /* MODIFY IF AVAILABLE */\nOSTAREDC  = \"'CSUPP.SHARED.LOADLIB(OSTAREDC)'\" /* MODIFY IF AVAILABLE */\nIF SYSDSN(TRSMAIN) = \"OK\"\nTHEN DO\n     COMPRESS = 1\n     \"ALLOCATE FI(SYSPRINT) DA(*) SHR\"\n     END\nELSE DO\n     COMPRESS = 0\n     SAY \"Compression not available.\"\n     END\nIF SYSDSN(OSTAREDC) = \"OK\"\nTHEN DO\n     EDC = 1\n     \"ALLOCATE FI(SYSOUT) DA(*) SHR\"\n     END\nELSE DO\n     EDC = 0\n     SAY \"OSTAREDC program not available.\"\n     END\nARG DSN .\nADDRESS \"TSO\"\nHEADER = COPIES(\"OSTARXMT10\",4)\nVERSION = \"V1.0C\"\nIF DSN = \"?\" THEN CALL HELP\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n/* Phase 2 - Identify datasets                                       */\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nMAXRC = 0\nIF SYSDSN(DSN) = \"OK\"\nTHEN DO\n     WORK = LISTDSI(DSN \"DIRECTORY\")\n     \"ALLOCATE FI(SYSUT1) DA(\"DSN\") SHR REUSE\"\n     IF SYSDSORG = \"PO\" & POS(\"(\",DSN) = 0\n     THEN NOP\n     ELSE EXECIO \"1 DISKR SYSUT1 ( STEM IN. FINIS\"\n     IF IN.1 = \"OSTARXMT CONTROL\"\n     THEN DO\n          SAY \"Processing\" DSN \"as a control file.\"\n          EXECIO \"* DISKR SYSUT1 ( STEM IN. FINIS\"\n          ODSN = WORD(IN.2,1)\n          DSNS = 0\n          DO I = 3 TO IN.0\n             X = I-2\n             WORK = WORD(IN.I,1)\n             IF SYSDSN(WORK) = \"OK\"\n             THEN DO\n                  DSNS = DSNS+1\n                  DSN.DSNS = WORK\n                  SAY WORK \"accepted.\"\n                  END\n             ELSE DO\n                  CALL WARN WORK \"not found. Rejected.\"\n                  IF MAXRC < 8 THEN MAXRC = 8\n                  END\n             END\n          END\n     ELSE DO\n          SAY \"Processing\" DSN \"as a single input file.\"\n          DSNS = 1\n          DSN.1 = DSN\n          X = LASTPOS('.',DSN)\n          ODSN = SUBSTR(DSN,1,X-1)\".XMT\"\n          IF SUBSTR(ODSN,1,1) = \"'\" THEN ODSN = ODSN\"'\"\n          IF POS(\"#\",ODSN) > 0\n          THEN DO\n               ODSN = TRANSLATE(ODSN,\"P\",\"#\")\n               SAY \"Output dataset renamed to \"ODSN\".\"\n               END\n          END\n     CALL CHK_ODSNS\n     DROP IN.\n     END\nELSE DO\n     SAY \"\";SAY \"\";SAY \"\"\n     SAY \"Enter output dataset name.\"\n     PULL ODSN\n     CALL CHK_ODSNS\n     SAY ODSN \"accepted.\"\n     DSNS = 0\n     DO FOREVER\n        SAY \"Enter input DSN, 'QUIT' to abort, or null to end list.\"\n        PULL DSN .\n        IF DSN = \"\" THEN LEAVE\n        IF DSN = \"QUIT\" THEN EXIT 4\n        IF SYSDSN(DSN) = \"OK\"\n        THEN DO\n             DSNS = DSNS+1\n             DSN.DSNS = DSN\n             SAY DSN \"accepted.\"\n             END\n        ELSE CALL WARN DSN \"not found. Rejected.\"\n        END\n     END\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n/* Phase 3 - allocate work file and output file(s)                   */\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nIF DSNS = 1\nTHEN SAY \"1 dataset accepted.\"\nELSE SAY DSNS \"datasets accepted.\"\nTOTSIZE = 0\nMAXSIZE = 0\nDO I = 1 TO DSNS\n   X = LISTDSI(DSN.I)\n   SELECT\n     WHEN SYSUNITS = \"CYLINDER\" THEN X = SYSUSED*SYSTRKSCYL\n     WHEN SYSUNITS = \"TRACK\" THEN X = SYSUSED\n     WHEN SYSUNITS = \"BLOCK\" THEN X = SYSUSED%SYSBLKSTRK+1\n     OTHERWISE\n     CALL ERROR \"Invalid space units for file\" DSN.I\".\"\n     END\n   SIZE.I = X\n   TOTSIZE = TOTSIZE + X\n   IF X > MAXSIZE THEN MAXSIZE = X\n   END\nIF DSNS = 1 & TOTSIZE > 300  & COMPRESS & SYSDSORG = \"PS\"\nTHEN SIGNAL PHASE11\n\"ALLOCATE FI(OSTARXMT) DA(\"ODSN\") NEW REUSE TRACKS\",\n       \"SPACE(\"TOTSIZE\",\"TOTSIZE%10+1\")\",\n       \"CATALOG\"\nIF RC = 0\nTHEN DO\n     WORK = LISTDSI(ODSN)\n     SELECT\n       WHEN SYSUNIT = \"3390\" THEN WORK = \"27984\"\n       WHEN SYSUNIT = \"3380\" THEN WORK = \"23408\"\n       OTHERWISE\n       WORK = 0\n       END\n     \"ALLOCATE FI(OSTARXMT) DA(\"ODSN\") MOD REUSE\",\n       \"LRECL(88) RECFM(F B) BLKSIZE(\"WORK\") RELEASE\"\n     END\nIF RC = 0\nTHEN SAY ODSN \"Allocated, tracks=\"TOTSIZE\", blksize=\"WORK\", DISP=NEW.\"\nELSE CALL ERROR \"Unable to allocate file\" ODSN \"with DISP=NEW.\"\nSELECT\n  WHEN SYSUNIT = \"3390\" THEN WORK = \"27920\"\n  WHEN SYSUNIT = \"3380\" THEN WORK = \"23440\"\n  OTHERWISE\n  WORK = 0\n  END\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n/* Phase 4 - create XMT file.                                        */\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nOUT1 = HEADER VERSION DSNS DATE(\"S\") TIME()\nEXECIO \"1 DISKW OSTARXMT ( STEM OUT\"\nIF RC = 0\nTHEN RECS = 1\nELSE CALL ERROR \"error writing to\" ODSN\".\"\nIF EDC\nTHEN DO\n     EXECIO \"0 DISKW OSTARXMT ( FINIS\"\n     DO I = 1 TO DSNS\n        CALL XMITDSNE I DSN.I SIZE.I WORK\n        END\n     \"ALLOCATE FI(SYSUT2) DUMMY\"\n     PARMS = \"'\"RIGHT(DSNS,3,\"0\")\"AD\"HEADER\"'\"\n     \"CALL\" OSTAREDC PARMS\n     IF RC = 0\n     THEN NOP\n     ELSE CALL ERROR \"Failure adding EDC INFO. rc=\"RC\n     DO I = 1 TO DSNS\n        \"FREE FI(OSTAR\"RIGHT(I,3,\"0\")\")\"\n        END\n     END\nELSE DO\n     \"ALLOCATE FI(SYSUT2) NEW DELETE REUSE TRACKS\",\n           \"SPACE(\"MAXSIZE\",\"MAXSIZE%10+1\")\",\n           \"LRECL(80) RECFM(F B) BLKSIZE(\"WORK\")\"\n     IF RC = 0\n     THEN SAY \"Workfile allocated, tracks=\"MAXSIZE\", blksize=\"WORK\".\"\n     ELSE CALL ERROR \"Workfile 'SYSUT2' allocation failure.\"\n     DO I = 1 TO DSNS\n        TOKEN = XMITDSN(DSN.I HEADER)\n        OUT1 = OVERLAY(TOKEN,HEADER,41)\n        EXECIO \"1 DISKW OSTARXMT ( STEM OUT\"\n        IF RC = 0\n        THEN RECS = RECS + 1\n        ELSE CALL ERROR \"error writing to\" ODSN\".\"\n        END\n     SAY \"XMT file\" ODSN \"contains\" RECS \"records,\",\n          RECS*88%1024 \"KiloBytes.\"\n     END\nEXECIO \"0 DISKW OSTARXMT (FINIS\"\nADDRESS \"TSO\" \"FREE FI(OSTARXMT,SYSUT2,SYSUT1)\"\nIF MAXRC = 8\nTHEN CALL WARN \"All datasets were not processed but\" ODSN \"is valid.\"\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n/* Phase 5 - create PAK file.                                        */\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nIF COMPRESS\nTHEN DO\n     SAY \"Compressing\" ODSN \"into\" PDSN\".\"\n     \"ALLOCATE FI(INFILE) DA(\"ODSN\") SHR REUSE\"\n     IF RC <> 0 THEN CALL ERROR \"ERROR RE-ALLOCATING XMT FILE\" ODSN\".\"\n     \"ALLOCATE FI(OUTFILE) DA(\"PDSN\") NEW REUSE TRACKS\",\n           \"SPACE(\"TOTSIZE%3+1\",\"TOTSIZE%10+1\")\",\n            \"CATALOG\"\n     \"CALL\" TRSMAIN \"'PACK'\"\n     IF RC > MAXRC THEN MAXRC = RC\n     IF RC = 0\n     THEN SAY \"Dataset\" PDSN \"contains a compressed version of\" ODSN\".\"\n     \"FREE FI(INFILE,OUTFILE)\"\n     END\nEXIT MAXRC\nXMITDSNE: PROCEDURE\nARG COUNT INDSN TRACKS BLKSIZE .\nSAY \"Processing\" INDSN\".\"\nDDNAME = \"OSTAR\"RIGHT(COUNT,3,\"0\")\n\"ALLOCATE FI(\"DDNAME\") NEW DELETE REUSE TRACKS\",\n           \"SPACE(\"TRACKS\",\"TRACKS%10+1\")\",\n           \"LRECL(80) RECFM(F B) BLKSIZE(\"BLKSIZE\")\"\nIF RC = 0\nTHEN SAY \"Workfile allocated, tracks=\"TRACKS\", blksize=\"BLKSIZE\".\"\nELSE CALL ERROR \"Workfile 'SYSUT2' allocation failure.\"\nADDRESS \"TSO\"\n\"TRANSMIT COMPLEX2.\"USERID() \"DATASET(\"INDSN\") NOLOG\",\n                               \"NONOTIFY OUTDD(\"DDNAME\")\"\nIF RC = 0\nTHEN NOP\nELSE CALL ERROR \"Unable to copy\" INDSN \"to workfile.\"\nRETURN 0\nXMITDSN: PROCEDURE EXPOSE RECS\nARG INDSN TOKEN .\nSAY \"Processing\" INDSN\".\"\nADDRESS \"TSO\"\n\"TRANSMIT COMPLEX2.\"USERID() \"DATASET(\"INDSN\") NOLOG\",\n                               \"NONOTIFY OUTDD(SYSUT2)\"\nIF RC = 0\nTHEN NOP\nELSE CALL ERROR \"Unable to copy\" INDSN \"to workfile.\"\nSAY \"Now adding error detection info for\" INDSN\". Please be patient.\"\nDO FOREVER\n   EXECIO \"1 DISKR SYSUT2 (STEM IN\"\n   IF RC = 2 THEN LEAVE\n   IF RC = 0\n   THEN NOP\n   ELSE CALL ERROR \"Read error on temp file.\"\n   TOKEN = BITXOR(TOKEN,SUBSTR(IN1,1,40))\n   TOKEN = BITXOR(TOKEN,SUBSTR(IN1,41,40))\n   TOKEN2 = SUBSTR(IN1,1,8)\n   DO I = 9 TO 73 BY 8\n      TOKEN2 = BITXOR(TOKEN2,SUBSTR(IN1,I,8))\n      END\n   OUT1 = OVERLAY(TOKEN2,IN1,81)\n   EXECIO \"1 DISKW OSTARXMT (STEM OUT\"\n   IF RC = 0\n   THEN RECS = RECS + 1\n   ELSE CALL ERROR \"error writing to output file.\"\n   END\nEXECIO \"0 DISKR SYSUT2 (FINIS\"\nRETURN TOKEN\nWARN: PROCEDURE\nPARSE ARG MSG\nSAY \"!! WARNING !! -\" MSG\nSAY \"Press 'ENTER' to continue.\"\nPULL .\nRETURN 0\nERROR: PROCEDURE EXPOSE RC\nPARSE ARG MSG\nSAY \" \"\nSAY \"                           !! ERROR !! \"\nSAY \"====>\" MSG \"<====\"\nSAY \" \"\nIF RC = \"RC\" THEN EXIT 16\nEXIT RC\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n/* Phase 11 - Create a xm2 file.                                     */\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nPHASE11:\nSAY \"Compressing\" DSN.1 \"into\" QDSN\".\"\n\"ALLOCATE FI(INFILE) DA(\"DSN.1\") SHR REUSE\"\nIF RC <> 0 THEN CALL ERROR \"ERROR ALLOCATING DATASET\" DSN.1\".\"\n\"ALLOCATE FI(OUTFILE) DA(\"QDSN\") NEW REUSE TRACKS\",\n      \"SPACE(\"TOTSIZE%3+1\",\"TOTSIZE%10+1\")\",\n       \"CATALOG\"\n\"CALL\" TRSMAIN \"'SPACK'\"\nIF RC > MAXRC THEN MAXRC = RC\nIF RC = 0\nTHEN SAY \"Dataset\" QDSN \"contains a compressed version of\" DSN.1\".\"\n\"FREE FI(INFILE,OUTFILE)\"\nEXIT MAXRC\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n/* Subroutin to ensure output datasets do not exit.                  */\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nCHK_ODSNS: PROCEDURE EXPOSE ODSN PDSN QDSN COMPRESS\nIF SYSDSN(ODSN) = \"OK\"\nTHEN CALL ERROR \"Dataset\" ODSN \"already exists.\"\nIF COMPRESS = 0 THEN RETURN 0\nX = LASTPOS('.',ODSN)\nPDSN = SUBSTR(ODSN,1,X-1)\".XM1\"\nIF SUBSTR(PDSN,1,1) = \"'\" THEN PDSN = PDSN\"'\"\nIF SYSDSN(PDSN) = \"OK\"\nTHEN CALL ERROR \"Dataset\" PDSN \"already exists.\"\nQDSN = SUBSTR(ODSN,1,X-1)\".XM2\"\nIF SUBSTR(QDSN,1,1) = \"'\" THEN QDSN = QDSN\"'\"\nIF SYSDSN(QDSN) = \"OK\"\nTHEN CALL ERROR \"Dataset\" QDSN \"already exists.\"\nRETURN 0\nHELP: PROCEDURE\nSAY \"The OSTARXMT REXX procedure combines 1 or more MVS sequential or\"\nSAY \"partitioned datasets into a single file for simple tranmission \"\nSAY \"over the internet.\"\nSAY \"\"\nSAY \"OSTARXMT creates 3 possible formats of file.\"\nSAY \"\"\nSAY \" An XMT file is a single MVS FB LRECL=88 file containing 1 or more\"\nSAY \"MVS sequential or partitioned datasets with error detection data\"\nSAY \"added.\"\nSAY \"\"\nSAY \" An XM1 file is a compressed version of an XMT file to allow\"\nSAY \"faster data transmission over the internet.  It has RECFM=FB and\"\nSAY \"LRECL=1024.\"\nSAY \"\"\nSAY \" An XM2 file is a HIGHLY compressed version of a single large\"\nSAY \"seqential dataset, e.g. a dump. It is quick to create and send\"\nSAY \"via the internet but has no error detection information.  It has\"\nSAY \"RECFM=FB and LRECL=1024.\"\nSAY \"\"\nSAY \"OSTARXMT can be envoked in 3 ways :-\"\nSAY \"\"\nSAY \"1) With no parameters at any TSO command or READY prompt. You will\"\nSAY \"  be prompted firstly for an output dataset which must not exist,\"\nSAY \"  and then for an input datset. The input dataset prompt will be\"\nSAY \"  repeated until you reply a blank line.\"\nSAY \"\"\nSAY \"2) With as single parameter which is the name of a sequential file\"\nSAY \"  or PDS member containing a control file of the format -\"\nSAY \"  OSTARXMT CONTROL   - line 1 indicates a control file.\"\nSAY \"  data.set.name      - line 2 names the output file.\"\nSAY \"  data.set.name      - line 3 names an  input  file.\"\nSAY \"            repeat line 3 as required for multiple input files.\"\nSAY \"\"\nSAY \"3) With as single parameter which is the name of a sequential file\"\nSAY \"  or PDS  to be formated. The output file name will be the same as\"\nSAY \"  the input file but with the last qualifier changed to reflect \"\nSAY \"  the OSTARXMT format.\"\nSAY \"\"\nSAY \" Options 2 or 3 can be run in batch under TSO if large files are\"\nSAY \"involved which would tie up your session for a long time.\"\nSAY \"\"\nSAY \" If you specify a single large sequential file AND compression is\"\nSAY \"enabled then an XM2 file is created. Otherwise an XMT file will\"\nSAY \"be produced and also an XM1 file if compression is enabled.\"\nSAY \"\"\nSAY \" For info on how to rebuild the original files from the OSTARXMT\"\nSAY \"file see the OSTARREC help via the '%OSTARREC ?' command.\"\nSAY \"\"\nSAY \" If you have any problems, or encounter error messages you don't\"\nSAY \"understand then contact the Support Centre.\"\nSAY \"\"\nexit 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "OSTRIP": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x12?\\x00\\x99\\x12?\"\\x06\\x01\\x01\\x01\\x01\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-05-03T00:00:00", "modifydate": "1999-05-03T22:06:00", "lines": 257, "newlines": 257, "modlines": 0, "user": "SBGOLOB"}, "text": "**********************************************************************\n*  This program was developed completely on the Tachyon Assembler    *\n*  and the Tachyon Operating System, on a PC, and ported to the      *\n*  MVS mainframe environment.                  S.Golob  05/99        *\n**********************************************************************\n*                                                                    *\n*  OSTRIP - PROGRAM TO INSERT ./ ADD NAME= CARDS INTO STRIPPED       *\n*           DOWN OSTARXMT FORMAT FILES.  THIS WILL MAKE THEM INTO    *\n*           NORMAL FILES IN TSO XMIT FORMAT, SEPARATED BY ./ ADD     *\n*           CARDS, SO THEY CAN BE PUT INTO SEPARATE PDS MEMBERS.     *\n*                                                                    *\n*   AUTHOR :   SAM GOLOB                                             *\n*   VERSION:   1.0                                                   *\n*   DATE   :   MAY 03, 99                                            *\n*                                                                    *\n*  SAMPLE JCL TO RUN THIS PROGRAM:                                   *\n*                                                                    *\n*   //OSTRIPX   JOB (ACCT#),S-GOLOB,                                 *\n*   // NOTIFY=&SYSUID,                                               *\n*   // CLASS=B,MSGCLASS=X                                            *\n*   //*                                                              *\n*   //INSERT EXEC PGM=OSTRIP                                         *\n*   //STEPLIB DD DISP=SHR,DSN=SBGOLOB.LOAD                           *\n*   //INPUT  DD  DISP=SHR,DSN=SBGOLOB.SAMPLE.XMT  <== .XMT format    *\n*   //OUTPUT DD  DISP=SHR,DSN=SBGOLOB.XMIT.PDS(SAMPLE) <== XMIT      *\n*                                                                    *\n*  CHANGE LOG:                                                       *\n*                                                                    *\n**********************************************************************\n********************************************************************\n***      START OF MACRO DEFINITIONS                              ***\n********************************************************************\n         MACRO\n&NAME    SAVEALL    &RENT,&REG=3,&EQU=YES\n         GBLB  &SAVRENT\n         GBLB  &REGSW\n         GBLB  &TIME\n         GBLC  &SAVNDX\n&SAVNDX  SETC  '&SYSNDX'\n&NAME    CSECT\n         AIF   ('&SAVRENT' EQ '1').NOTFREE\n         AIF   ('&REGSW' EQ '1').NOEQU\n         AIF   ('&EQU' NE 'YES').NOEQU\n&REGSW   SETB  1\n         SPACE 2\n***********************************************************************\n********           DEFINITION OF GENERAL REGISTERS             ********\n***********************************************************************\nR0       EQU   0    GENERAL REGISTER ZERO\nR1       EQU   1    GENERAL REGISTER ONE\nR2       EQU   2    GENERAL REGISTER TWO\nR3       EQU   3    GENERAL REGISTER THREE\nR4       EQU   4    GENERAL REGISTER FOUR\nR5       EQU   5    GENERAL REGISTER FIVE\nR6       EQU   6    GENERAL REGISTER SIX\nR7       EQU   7    GENERAL REGISTER SEVEN\nR8       EQU   8    GENERAL REGISTER EIGHT\nR9       EQU   9    GENERAL REGISTER NINE\nR10      EQU   10   GENERAL REGISTER TEN\nR11      EQU   11   GENERAL REGISTER ELEVEN\nR12      EQU   12   GENERAL REGISTER TWELVE\nR13      EQU   13   GENERAL REGISTER THIRTEEN\nR14      EQU   14   GENERAL REGISTER FOURTEEN\nR15      EQU   15   GENERAL REGISTER FIFTEEN\n         SPACE 1\nRA       EQU   10   GENERAL REGISTER TEN\nRB       EQU   11   GENERAL REGISTER ELEVEN\nRC       EQU   12   GENERAL REGISTER TWELVE\nRD       EQU   13   GENERAL REGISTER THIRTEEN\nRE       EQU   14   GENERAL REGISTER FOURTEEN\nRF       EQU   15   GENERAL REGISTER FIFTEEN\n***********************************************************************\n********             END OF REGISTER DEFINITIONS               ********\n***********************************************************************\n         SPACE 2\n.NOEQU   ANOP\n         SAVE  (14,12),,*\n         AIF   ('&REG' EQ '').MESS\n         BALR  &REG(1),0\n         AIF   (N'&REG EQ 1).A\n         AIF   (N'&REG EQ 2).B\n         AIF   (N'&REG EQ 3).C\n         AIF   (N'&REG EQ 4).D\n         AIF   (N'&REG EQ 5).E\n         MNOTE *****,'EXCESSIVE BASE REGISTERS -- 5 ASSUMED *****'\n         AGO   .E\n.MESS    MNOTE 12,'***** NO BASE REGISTER SPECIFIED *****'\n         MEXIT\n.NOTFREE MNOTE 12,'***** ENDALL NOT ISSUED PRIOR TO NEW SAVEALL *****'\n         MEXIT\n.E       USING *,&REG(1),&REG(2),&REG(3),&REG(4),&REG(5)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         L     &REG(4),=A(Q&SYSNDX+12288)\n         L     &REG(5),=A(Q&SYSNDX+16384)\n         AGO   .END\n.D       USING *,&REG(1),&REG(2),&REG(3),&REG(4)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         L     &REG(4),=A(Q&SYSNDX+12288)\n         AGO   .END\n.C       USING *,&REG(1),&REG(2),&REG(3)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         AGO   .END\n.B       USING *,&REG(1),&REG(2)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTER\n         AGO   .END\n.A       USING *,&REG(1)\n.END     ANOP\n         AIF   ('&RENT' NE 'RENT').NORENT\n&SAVRENT SETB  1\n         GETMAIN    R,LV=72        GET STORAGE FOR SAVE AREA\n         ST    13,4(1)             SET UP FORWARD CHAIN\n         ST    1,8(13)             SET UP BACKWARD CHAIN\n         L     0,20(0,13)          RESET REGISTER 0\n         L     1,24(0,13)          RESET REGISTER 1\n         L     13,8(0,13)          LOAD SAVE AREA ADDRESS\n         AGO   .RENT\n.NORENT  ANOP\n&TIME    SETB  1\n         ST    13,SAVE&SYSNDX+4    SET UP FORWARD CHAIN\n         LA    1,SAVE&SYSNDX\n         ST    1,8(0,13)           SET UP BACKWARD CHAIN\n         L     1,24(0,13)          RESET REGISTER 1\n         LA    13,SAVE&SYSNDX\n         B     J&SYSNDX           BRANCH AROUND BASE REGISTER CONST\nSAVE&SYSNDX DC 18F'0'\n.RENT    ANOP\n         LTORG\nJ&SYSNDX DS    0H\n         EJECT\n         MEND\n         MACRO\n&NAME    ENDALL &CODE=\n         GBLB  &TIME\n         GBLB  &SAVRENT\n         GBLC  &SAVNDX\n         AIF   ('&CODE' GT '4095').MESS1\n&NAME    DS    0H\n         AIF   (NOT &SAVRENT).NOTRENT\n&SAVRENT SETB  0\n         LR    1,13                LOAD SAVE AREA ADDRESS\n         L     13,4(0,13)          RE-LOAD REGISTER 13\n         LA    0,72                LOAD NUMBER OF BYTES TO BE FREED\n         FREEMAIN   R,LV=(0),A=(1) FREE SAVE AREA STORAGE\n         AGO   .RENT\n.NOTRENT ANOP\n         AIF   (NOT &TIME).NOSAVE\n&TIME    SETB  0\n         L     13,SAVE&SAVNDX+4    RE-LOAD REGISTER 13\n.RENT    ANOP\n         AIF   ('&CODE' EQ '(15)').ENDIT\n         AIF   ('&CODE' EQ '').COND1\n         LA    15,&CODE           LOAD CODE TO REG 15\n         AGO   .ENDIT\n.MESS1   MNOTE 12,'***** RETURN CODE PASSED GREATER THAN 4095 *****'\n         MEXIT\n.NOSAVE  MNOTE 12,'***** SAVEALL NOT ISSUED PRIOR TO ENDALL *****'\n         MEXIT\n.COND1   LA    15,0               LOAD ZERO (NO CODE) TO REG 15\n.ENDIT   ANOP\n         RETURN     (14,12),T,RC=(15)\n         MEND\n********************************************************************\n***      END OF MACRO DEFINITIONS                                ***\n********************************************************************\nOSTRIP   SAVEALL REG=12            SAVE THE REGISTERS\n         OPEN  (INPUT,(INPUT))     OPEN THE INPUT\n         OPEN  (OUTPUT,(OUTPUT))   OPEN THE OUTPUT\n********************************************************************\n***   THIS PROGRAM CHECKS OSTARXMT-FORMAT FILES FOR SEPARATE     ***\n***   XMIT MEMBERS AFTER STRIPPING OFF THE EIGHT ERROR-CHECKING  ***\n***   BYTES.  ./ ADD NAME= CARDS ARE ADDED AS SEPARATORS, SO     ***\n***   THE SEPARATE XMIT-FORMAT FILES CAN BE POST-PROCESSED BY    ***\n***   IEBUPDTE TO SEPARATE THEM COMPLETELY.  AN ./ ENDUP CARD    ***\n***   IS WRITTEN AT THE END OF THE OUTPUT FILE.                  ***\n***                                                              ***\n***     INPUT IS OSTARXMT FORMAT :   LRECL = 88                  ***\n***     OUTPUT IS TRANSMIT FORMAT:   LRECL = 80                  ***\n***                                                              ***\n********************************************************************\n***   OUR FIRST STEP IS TO INITIALIZE THE WORK AREAS, AND TO PUT ***\n***   OUT THE FIRST ./ ADD CARD THAT GOES TO THE TOP OF THE      ***\n***   OUTPUT FILE.                                               ***\n********************************************************************\nINIT     MVC   AREA(88),BLANKS     INITIALIZE INPUT AREA\n         MVC   OUT(80),BLANKS      INITIALIZE OUTPUT AREA\n         ZAP   PACKNUM,=P'1'       SET FILE NUMBER TO 1\n********************************************************************\n***    \"READ\" IS THE MAIN PROCESSING LOOP, ENDING AT EOJ.        ***\n********************************************************************\nREAD     GET   INPUT,AREA          READ A RECORD\n         CLI   REPFLAG,C'1'        WAS THE LAST READ A REPLACEMENT?\n         BNE   REANOREP            NO, JUST TEST THIS RECORD\n         PUT   OUTPUT,OUT          YES. NOT EOJ, WRITE THE ./ ADD\n         MVI   REPFLAG,C'0'        RESET THE FLAG\nREANOREP DS    0H\n         CLC   TEST00(40),AREA     TEST IT FOR OSTARXMT10\n         BNE   READPUT             NOT EQUAL, STRIP AND PUT IT OUT\n         BAL   R9,REPLADD          EQUAL, SUBSTITUTE AND CHECK\n         B     READ                THEN READ RECORD TO CHECK FOR EOF\nREADPUT  MVC   OUT(80),AREA        STRIP LAST 8 AND COPY RECORD\n         PUT   OUTPUT,OUT          WRITE OUTPUT RECORD\n         B     READ                DO ANOTHER READ TILL EOF\n********************************************************************\nREPLADD  DS    0H\n         MVC   OUT(80),BLANKS      CLEAR OUTPUT AREA\n         MVC   EDTGT(5),BLANKS     INITIALIZE TO BLANKS\n         MVC   OUT(12),ADDNME      MOVE IN ./ ADD LITERAL\n         UNPK  EDTGT,PACKNUM       PUT INTO DISPLAY FORMAT\n         OI    EDTGT+4,X'F0'       MAKE LAST DIGIT NUMERIC\n         MVC   OUT+12(8),ADDNAME   MOVE ENTIRE NAME INTO ./ ADD\n         MVI   REPFLAG,C'1'        INDICATE REPLACEMENT OF OST HDR\n*  Delay printing on an OSTARXMT10 Header card.  Replace with ./ ADD\n*  card if it's in the middle of the file.  Throw the trailer away\n*  at EOJ time.\n         AP    PACKNUM,=P'1'       BUMP FILE COUNT\n         B     READ                DO ANOTHER READ TILL EOF\n         BR    R9\n********************************************************************\nEOJ      CLI   REPFLAG,C'1'        TEST LAST RECD FOR OSTARXMT10\n         BNE   EOJ1                NOT, JUST CLOSE UP\n*        MVC   OUT(80),ENDUPP      WRITE ENDUP CARD INST OF OSTNNNNN\n*        PUT   OUTPUT,OUT\n*   Throw the last card out in any case.  Don't write ./ ENDUP .\nEOJ1     DS    0H\n         CLOSE OUTPUT              CLOSE THE INPUT\n         CLOSE INPUT               CLOSE THE OUTPUT\n         ENDALL\n********************************************************************\n***      DATA AREAS                                              ***\n********************************************************************\nINPUT    DCB   DSORG=PS,DDNAME=INPUT,MACRF=GM,EODAD=EOJ,               X\n               LRECL=88,RECFM=FB\nOUTPUT   DCB   DSORG=PS,DDNAME=OUTPUT,MACRF=PM,                        X\n               LRECL=80,RECFM=FB\nBLANKS   DC    CL88' '\nADDNME   DC    CL12'./ ADD NAME='\nENDUPP   DC    CL80'./ ENDUP    '\nTEST00   DC    CL40'OSTARXMT10OSTARXMT10OSTARXMT10OSTARXMT10'\nDYNAREA  DS    0D\nAREA     DS    CL88\nINAREA1  DS    CL88\nOUT      DS    CL80\nADDNAME  DS    0CL8\nADLIT    DC    CL3'OST'\nEDTGT    DC    CL5'    '\nFILL1    DC    CL8' '\nFILL2    DC    CL8' '\nEDTGT1   DC    CL6'    '\nEDPAT    DC    XL6'212020202020'\nPACKNUM  DS    PL5\nREPFLAG  DC    C'0'\n         DS    0D                  ALIGN\nDYNLNTH  EQU   *-DYNAREA\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "OSTRIP$": {"ttr": 1540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x12?\\x00\\x99\\x12?!\\x14\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-05-03T00:00:00", "modifydate": "1999-05-03T21:14:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.B.ASM\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(OSTRIP)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWLKED,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n NAME    OSTRIP(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OSTRIP#": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x99\\x12?\\x00\\x99\\x12?! \\x00\\x08\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-05-03T00:00:00", "modifydate": "1999-05-03T21:20:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "//OSTRIPX   JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//INSERT EXEC PGM=OSTRIP\n//STEPLIB DD DISP=SHR,DSN=SBGOLOB.LOAD\n//INPUT  DD  DISP=SHR,DSN=SBGOLOB.OSTARXMT.XMT  <== .XMT FORMAT\n//OUTPUT DD  DISP=SHR,DSN=SBGOLOB.OSTRIP.PDS(OSTARXMT)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT365/FILE365.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT365", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}