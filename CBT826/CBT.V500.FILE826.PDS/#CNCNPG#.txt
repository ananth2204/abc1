              A HISTORY OF THE CNCLPG TSO COMMAND
              - ------- -- --- ------ --- -------

This piece is worth reading, because it explains what you can do with
the CNCLPG TSO command, which is quite complicated.  An effort was
made to show how the development of each feature of CNCLPG was logical
and how one function's development followed from the previous things
that were there.  Then, everything makes sense.

                      ** - - - - - - **

PART ONE.  INTRODUCTION:

    The CNCLPG command was originally written to make a non-cancelable
address space cancelable.  Of course, you had to go the other way too,
and make a cancelable address space non-cancelable.

    To do this, I found that this property is keyed off the CHACT bits
in the CSCB chain of control blocks, mapped by macro IEECHAIN.  I wrote
my own parser, and used the parameters of CNCL and NCNC to make an
address space "cancelable" or "non-cancelable".

    The CSCB chain roughly represents all active address spaces.

    The program expanded from there.

    There are other CHACT bits as well.  One of them controlled if you
need to do a CANCEL command before you did a FORCE command.  So I made
a FORC and NFRC action, to flip that bit as well.  I later found out
that to really make an address space "non-forcible", you have to set a
bit in the ASCB called ASCBNOMT.  This is a separate matter indeed, and
the command to do so was named NMEM or "non-memtermable".  Its opposite
was named MEMT, or "memtermable".  But I am going ahead of myself.  I
am not there yet.  (See Part Three for that history.)

    There is a bit in the CHACT byte in the CSCB that seems to say an
address space is swappable or non-swappable.  That bit may be a sign
that the address space actually IS swappable or non-swappable, but it
does not MAKE an address swappable or non-swappable.  To do that, you
have to issue a SYSEVENT macro in Key 0 state.  (I use the CHACT
"swappable" bit for reference only.  I don't know if it actually does
anything on the system.)

    A SYSEVENT macro can only be issued in the address space which it
affects.  Therefore, if that address space is not yours, you have to
issue an SRB to run it in the appropriate address space, and then get
the results back.  I wasn't up to writing such code at that point, so
I gave the job to my friend Joe Reichman, who did it very well.

    So now, the CNCLPG command could make an address space cancelable,
non-cancelable, and it can require a CANCEL before a FORCE or not,
and it could make an address swappable or nonswappable.

    It was a reasonably good accomplishment so far.

    End Part One.  There is more.

                      ** - - - - - - **

PART TWO.  IMPORTANT USE CONSIDERATIONS.

    The CSCB chain of control blocks roughly represents all active
address spaces.  But there is a complication.  You can have several
CSCB control blocks with the same jobname.  And you can have several
different CSCB entries that have the same ASID.

    For the CNCLPG program, ALL ASID NUMBERS are in hexadecimal, NOT
in decimal form.

    To display the entire CSCB chain, I required a dash ( - ) instead
of the jobname, in the CNCLPG call.  To just display a limited number
of CSCB entries, I introduced the CSCB or DISPlay keyword.  So if you
want to show the CSCB entry (entries) for a jobname, you code:

CNCLPG jobname DISP

Or if you want to display all CSCB entries corresponding to a given
ASID number, you code:

CNCLPG ASID(hhhh) DISP

    Simple enough?  OK.  But there is more to know.

    There may be more than one CSCB entry for a given jobname, and
there may be more than one CSCB entry for a given ASID.  If a job
is running under an initiator, they both have the same ASID, but
they have different CSCB entries with different properties.

    So that brings us to the next topic.

    In CNCLPG there is a distinction between DISPLAY type keywords
and ACTION type keywords.  Since the DISPLAY type keywords do not
actually affect the address space, CNCLPG shows ALL MATCHES that fit
the operands entered.  With the DISPLAY command, you want to find out
ALL CSCB ENTRIES THAT FIT.

    Not so with ACTION-type commands such as SWAP or NSWP.  With
those commands, you just want to affect ONE address space.  It is the
FIRST address space hit with a match, when you are running the CSCB
chain.  YOU MUST MAKE SURE THAT YOUR CNCLPG command DOES NOT AFFECT
THE WRONG ADDRESS SPACE.....!!!!

    Therefore, in CNCLPG you can use BOTH the jobname and the
ASID(hhhh) parameters together, to narrow down the address space that
you want to affect.  An example would be:

CNCLPG JES2 ASID(20) DISP

    If you displayed just jobname JES2, the CSCB search would come up
with JES2, JES2AUX, and JES2MON.  Only the first of these would be
affected by an ACTION-type command.  To narrow down the address space
to the correct one you want to change, you should use BOTH parameters
of jobname AND ASID(hhhh) combined.  Only when you are absolutely
sure that you are affecting the correct address space, ONLY THEN
SHOULD YOU ATTEMPT TO CHANGE IT.

    End Part Two.

                      ** - - - - - - **

PART THREE - MORE FUNCTIONS

    I asked my friend Joe Reichman to write a new BURN TSO command, to
"memterm" an address space.  This is done by issuing a CALLRTM macro
with TYPE=MEMTERM.  This is basically what happens when you FORCE an
address space.

    After Joe wrote his independent BURN command (which we will not
discuss here), I incorporated his working code into CNCLPG, and thus
was born the CNCLPG BURN command.

    It sounds simple enough.

    But then I was talking to another friend (name withheld) who told
me that he once wrote a similar program to CNCLPG.  He sent me his
code, and it was different.  His code flipped a different bit, not in
the CSCB, but in the ASCB of the address space.  This bit was called
ASCBNOMT, and it makes an address space truly NON-FORCIBLE.  In other
words, if you try and FORCE that address space with an operator command,
a message comes back:  NON-FORCIBLE.  This has to be combined with the
CANCELABLE bit from the CSCB being OFF (non-cancelable) as well.  And
then the job becomes truly non-cancelable and non-forcible.

    When you try and issue a BURN command with CNCLPG, and the ASCBNOMT
bit is on in the ASCB, then the BURN does not work.  That is how the
KILL command was born.

    I figured, if you REALLY want to get rid of an address space, but
the ASCBNOMT (and maybe the ASCBNOMD) bit (also) is on, then a FORCE
won't work.  So if you really want to blast that address space, then
turn those bits off in the ASCB first.  Then you can whack the address
space, and nothing should be in the way.  This gave birth to the KILL
command, which first turns off the ASCBNOMT and ASCBNOMD bits, and
then issues the CALLRTM TYPE=MEMTERM.

    But what if you don't really want to get rid of the address space,
but you just want to flip the bits.  So we have new commands:  NMEM
(make non-memtermable) and MEMT (make memtermable).

    There is one extra thing that is needed to know here.  NMEM does
two things:  It flips on the ASCBNOMT bit to make the address
NON-FORCIBLE.  But it also goes to the CSCB and makes the address
space NON-CANCELABLE as well.  NON-FORCIBLE without NON-CANCELABLE
is not really effective.  To undo NMEM, issuing MEMT will leave the
address space non-cancelable.  So you have to issue a CNCL afterwards
to undo that, and make the address space cancelable.

    End Part Three.

                      ** - - - - - - **

PART FOUR - TRANSWAP, DONTSWAP, AND "DONTSWAP COUNTS"

    There are two ways to make an address space nonswappable.  They
are SYSEVENT DONTSWAP and SYSEVENT TRANSWAP.  The final result of both
operations is that the address space is nonswappable.  But there is a
difference, which is why there are two separate operations.

    SYSEVENT DONTSWAP freezes the pages of the address space where they
are.  SYSEVENT TRANSWAP wants to do a neater job.  It first swaps the
address space out.  Then afterwards, it swaps the address space in,
NEATLY, and tries to make use of "preferred storage" frames rather than
"reconfigurable storage" frames.  This leads to a more stable solution,
just in case some of the reconfigurable storage needs to be taken away
from that processor later.  If there are fixed pages there, the pages
can't be removed from that processor.

    In either case, the address space originally has to be swappable.
What if it isn't?  If you try and DONTSWAP or TRANSWAP an address space
that is already non-swappable, then essentially nothing is done, except
that a "DONTSWAP count" is incremented in the OUCB field OUCBNDS, which
is a halfword.  The reason for this is that any address space can make
another address space non-swappable, because it needs that address space
to be nonswappable.  Every subsequent SYSEVENT OKSWAP which occurs
against that address space, decrements the "DONTSWAP count" by one,
until it is X'0001', after which the next OKSWAP against the address
space will make it swappable.  This is a safeguard against making an
address swappable when it shouldn't be.

    So I needed a way to display the "DONTSWAP count" in CNCLPG
messages.

    First, I put them into the NSWP and TSWP commands.  These are
commands in CNCLPG to make an address space non-swappable or to TRANSWAP
it.  NSWP and TSWP display the "DONTSWAP count" in their display
results.  Then I needed to implement a COUNT command, which looks at an
address space and displays its "DONTSWAP count", even if it is
swappable.  Even though the COUNT command is for display only, in CNCLPG
it is considered an "action" command, because it has to issue an SRB to
obtain the results for any address space (when it is not yours).

    So if you issue:  CNCLPG jobname ASID(hhhh) COUNT, you get the
"DONTSWAP count" as well as some CSCB information for that address
space:

    An extreme example:  CNCLPG *MASTER* COUNT will yield:

CNCLPG 1.2.10C - Alter Characteristics of a Running Address Space
------ ------- - ----- --------------- -- - ------- ------- -----
Search Jobname:  *MASTER*
----------------------------
Function COUNT was called for.
Job  ID :  *MASTER*
Proc ID :  *MASTER*
ASID    :  0001
  Outstanding DONTSWAP requests:   0001
----------------------------
Final Job Status Report.
Current  CHACT Flags:  00
Job Status:  Non-Cancelable
Job Status:  Cancel + Force
Job Status:  Non-Swappable
Job Status:  Non-Memtermable
Return code is 0

    And you can do this for any address space.

    End Part Four.

                      ** - - - - - - **

PART FIVE:  FSWP (Force an Address Space to be Swappable)

    To complete the picture, you may have an address space which has
problems.  It has a high "DONTSWAP count", and for some good reason,
you need to make it swappable right away, without having to issue
multiple SWAP commands against it.  For this emergency purpose I created
the FSWP command, to force and address space to be swappable.

    FSWP works by setting the "DONTSWAP count" to X'0001' no matter
what it was before.  Then it issues a SYSEVENT OKSWAP and makes the
address space swappable.  I understand that you'd really need an
emergency to use this effectively.  However it is there if needed.

    End Part Five.

                      ** - - - - - - **

PART SIX:  SYSEVENT RETURN CODES

    When you issue a SYSEVENT OKSWAP, DONTSWAP, or TRANSWAP, a return
code is issued in Register 1, in byte 3 (the low order byte).  The only
return code of interest to us, is a possible return code of 4, from
TRANSWAP.  That occurs when you try and TRANSWAP an already nonswappable
address space.  The "DONTSWAP count" is incremented, nothing further is
done, and the SYSEVENT Return Code in that case is 4.

    If the TSWP was REALLY done (to a swappable address space) then
the SYSEVENT Return Code is 0.

    To indicate what has happened (after a TSWP command to an already
nonswappable address space), a message is issued, showing a SYSEVENT
Return Code of 4.  When the TSWP was actually done, then SYSEVENT
TRANSWAP returns a code of 0, and this is also reported by CNCLPG.

    CNCLPG reports the SYSEVENT Return Code after the NSWP and TSWP
commands have been issued.

    End Part Six.

                      ** - - - - - - **

PART SEVEN:  IS IT REALLY NON-SWAPPABLE?

    "Before" and "after" images showing what was done:

    I try and show "before" and "after" images of the address space
which is being changed, together with enough identifying information
so you can figure out exactly which address space was dealt with, and
exactly what was done to the address space by the CNCLPG program.

    However, there was still a problem, especially with the swappable
and non-swappable messages.  You could figure the situation out from
the rest of the messages, but it really wasn't clearly stated in the
messages themselves.  Consider the following:

Job IBMUSER  for ASID 0051 made non-swappable.

    This message would have been sent (version 1.2.10D and below) even
if the address space was already non-swappable, and we tried to make
it non-swappable again (raising the DONTSWAP count).  However, I
implemented the following messages to make things clearer to the user:

Job IBMUSER  for ASID 0051 already non-swappable.

and

Job IBMUSER  for ASID 0051 was already swappable.

if you tried to make a non-swappable address space non-swappable again,
or if you tried to make a swappable address space swappable again.

    In order to implement this, I had to create "before" and "after"
images of swappability or non-swappability.  And in order to do that,
I had to find out where the definitive indicator (in the system) of
what swappability and non-swappability was.

    It is in the OUCB (macro IRAOUCB) + X'11' which is OUCBSFL (flags)
and the requisite flag showing "address space non-swappable" is X'80'
or OUCBNSW.  I had to put in code to test this bit in all requisite
places, both in our own address space, and in other address spaces
where you needed to run an SRB.  The SRB code was modified to extract
the requisite information.  And the proper comparisons between "before"
and "after" were made, to distinguish all the cases.

    End Part Seven.


CONCLUSION:

    So I hope that this will better explain what CNCLPG can do.  Use it
wisely.  Don't use it any other way....!!!!


