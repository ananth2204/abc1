/*********************************************************************/
/* C Socket Server Subtask Program                                   */
/*                                                                   */
/* This code is started by the tsched() routine of C/370 MTF.        */
/* Its purpose is to do a takesocket() and then send/recv with the   */
/* client process.                                                   */
/*********************************************************************/
#pragma runopts(noargparse,plist(mvs),noexecops)

static char ibmcopyrÝ¨ =
   "MTCCSUB - Licensed Materials - Property of IBM. "
   "This module is \"Restricted Materials of IBM\" "
   "5647-A01 (C) Copyright IBM Corp. 1994, 1996. "
   "See IBM Copyright Instructions.";

#include <manifest.h>
#include <bsdtypes.h>
#include <in.h>
#include <netdb.h>
#include <socket.h>
#include <inet.h>
#include <fcntl.h>
#include <errno.h>
#include <tcperrno.h>
#include <bsdtime.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include "hexdump.h"
#include "StoHxS.h"
#include "hccopyr.h"
/* --- include z/OS control blocks ---------------------------------- */
#include "ihapsa"                      /* PSA                         */
#include "cvt"                         /* CVT                         */
#include "igdsms"                      /* SMS desct - IGDVLD & IGDSGD */
#include "hcsgd"                       /* HCSGD desct                 */
#include "volinfod"                    /* pick SMS volume information */

struct psa *psa_ptr = 0;               /* PSA is at address 0         */
struct cvt *cvt_ptr;
struct igdsgd *igdsgd_ptr;
struct igdvld *igdvld_ptr;
struct vldsysdt *vldsysdt_ptr;
struct hcsgd *hcsgd_ptr;
struct volinfod *volinfod_ptr;

/* for dynamic link assembler program                                 */
#pragma linkage (EXPGM1,OS)
typedef int EXPGM1();

#define MAXVOLS 2000;

/*
 * Server subtask
 */
csub(int *clsock,         /* address of socket passed  */
     char *tskname,       /* address of caller's name  */
     char *tsksname)      /* address of caller's sname */
{
    /* EXPGM1 *fptr; */
    int *voltab;               /* SMS volume work buffer              */
    int H_address= 0x00000000; /* save SMS volume work buffer address */
    int pd = 0x00000000;       /* Problem Determination switch        */
    int WA_length;             /* SMS volume work buffer length       */
    int hc_rc;                 /*                                     */
    int records;               /* # records                           */
    int loop_sw = 0x00000000;  /* loop switch                         */
    int temps;                 /*                                     */
    int sendbytes;             /* # bytes sent                        */
    int recvbytes;             /* # bytes received                    */
    int clsocket;              /* client socket                       */
    int rc;                    /*                                     */
    int i;                     /*                                     */
    int call_rc;               /*                                     */
    char xtsknameÝ8¨;          /* caller's name                       */
    char xtsksnameÝ8¨;         /* caller's subtask name               */

    /* for iPhone project - start here    */
    pd = 0;    /* set PD on(1)-off(0) */
    WA_length = volwktbl;
    voltab = (int *)malloc(WA_length);
    memset(voltab,0,WA_length);
    H_address = voltab;                   /* save voltab address */

    hc_rc = hcsmstp(voltab, pd);
    records = hc_rc;
    printf("Csub: returned from hcsmstp program - (%d)\n", hc_rc);

    volinfod_ptr = H_address;
    for(loop_sw=1; loop_sw<=hc_rc; loop_sw++) {
       printf("Csub: SMS volume information: "
              "%s-%s(%d/%d/%d)(%d/%d/%d/%d)\n",
              volinfod_ptr->volstgrp,
              volinfod_ptr->volvser,
              volinfod_ptr->volntcpy,
              volinfod_ptr->volnfree,
              volinfod_ptr->volnlext,
              volinfod_ptr->volsysof,
              volinfod_ptr->volsysln,
              volinfod_ptr->volstsms,
              volinfod_ptr->volstmvs);
       volinfod_ptr = volinfod_ptr + 1;   /* point to next        */
    } /* end the for for(loop_sw=1) loop */
    /* for iPhone project - end           */

    clsocket = *clsock;
    memcpy(&xtskname,  tskname,  8);      /* local copy */
    memcpy(&xtsksname, tsksname, 8);      /* local copy */
    rc = doget(&clsocket, xtskname, xtsksname);
    printf("Csub: returned from doget()\n");
    if (rc < 0)
        tcperror("Csub: Error from doget");
    printf("Csub: rc from doget is %d\n", rc);

    temps = rc;         /* new socket number */
    if (temps > -1) do {
        sendbytes = dosend(&temps, voltab, records, pd);
        recvbytes = dorecv(&temps);
    } while (0);
 /* } while (recvbytes > 0); do simplified situation first ***/
 fflush(stdout);
 /* sleep(30); */
 /*
 i = 30;
 fptr = (EXPGM1 *)fetch("WAITIME");
 call_rc = (*fptr)(&i);
 printf("Csub: call_rc is %d\n", call_rc);
 release(fptr);
 */
}




/*-----------------*/
/*    doget()      */
/*-----------------*/
int doget(int *clsocket, char *xtskname, char *xtsksname)
{
    int rc;
    int temps;
    struct clientid cid;

    memset(&cid, 0, sizeof(cid));
    temps = *clsocket;
    memcpy(cid.name,        xtskname,  8);
    memcpy(cid.subtaskname, xtsksname, 8);
    cid.domain = AF_INET;
    rc = takesocket(&cid, temps);
    *clsocket = temps;
    return rc;
}

/*-----------------*/
/*    dosend()     */
/*-----------------*/
int dosend(int *clsocket,
           int *voltab,
           int records,
           int pd)
{
    int dataflag = 5542;
    int optval = 1;
    int nZero = 0;   /* 0 -> 60 */
    int crc;
    int rc;
    int temps;
    int recvbytes = 0x00000000;
    int sendbytes = 0x00000000;
    int t_sendbytes = 0x00000000;
    int loop_sw = 0x00000000;
    char dataÝ60¨;

    memset(data, 0, 60);   /* set data array to null */
    volinfod_ptr = voltab;
    temps = *clsocket;

    /***************************************************************/
    rc = setsockopt(temps, IPPROTO_TCP, TCP_NODELAY,
                    (char *) &optval, sizeof(int));
    printf("Csub: set TCP_NODELAY option return value is %d\n", rc);

    rc = setsockopt(temps, SOL_SOCKET, SO_SNDBUF,
                    (char *) &nZero, sizeof(int));
    printf("Csub: set SO_SNDBUF option return value is %d\n", rc);
    /***************************************************************/

    for(loop_sw=1; loop_sw<=records; loop_sw++) {
       sprintf(data,
              "%d.%s.%s.%d.%d.%d.%d.%d.%d.%d\n",
              dataflag,
              volinfod_ptr->volstgrp,
              volinfod_ptr->volvser,
              volinfod_ptr->volntcpy,
              volinfod_ptr->volnfree,
              volinfod_ptr->volnlext,
              volinfod_ptr->volsysof,
              volinfod_ptr->volsysln,
              volinfod_ptr->volstsms,
              volinfod_ptr->volstmvs);
       /* convert EBCDIC to ASCII */
       crc = __etoa(data);
       if (crc < 0)
          printf("Csub: convert E2A failed (%s)\n", data);
       /* sendbytes = send(temps, data, sizeof(data), 0); */
       sendbytes = send(temps, data, strlen(data), 0);
       t_sendbytes = t_sendbytes + sendbytes;
       memset(data, 0, 60);
       volinfod_ptr = volinfod_ptr + 1;   /* point to next        */
       recvbytes = recv(temps, data, sizeof(data), 0);
       /* convert ASCII to EBCDIC */
       crc = __atoe(data);
       if (crc < 0)
          printf("Csub: convert A2E failed (%s)\n", data);
       printf("Csub: remote response (%s)\n", data);
       memset(data, 0, 60);
    } /* end the for for(loop_sw=1) loop */

    memset(data, 0, 60);
    strcpy(data, "0473.end.the.of.data");
    /* convert EBCDIC to ASCII */
    crc = __etoa(data);
    if (crc < 0)
       printf("Csub: convert E2A failed (%s)\n", data);
    /* sendbytes = send(temps, data, sizeof(data), 0); */
    sendbytes = send(temps, data, strlen(data), 0);
    printf("Csub: total sendbytes = %d\n", t_sendbytes);

    /* 2014-05-07 by HC Tsai                                        */
    /* below two statement to fixed TCP state of Close_Wait problem */
    /*
    memset(data, 0, 60);
    recvbytes = recv(temps, data, sizeof(data), 0);
    */

    return t_sendbytes;
}

/*-----------------*/
/*    dorecv()     */
/*-----------------*/
int dorecv(int *clsocket)
{
    int temps;
    int crc;
    int recvbytes;
    char dataÝ80¨;
    char *datap;

    /*****************************************************
          note: stream mode means that data is not sent
                as a record and can therefore flow in
                variable sized chunks across the network.
                This example is a simplified situation.
    ******************************************************/
    temps = *clsocket;
    recvbytes = recv(temps, data, sizeof(data), 0);
    /* convert ASCII to EBCDIC */
    crc = __atoe(data);
    if (crc < 0)
       printf("Csub: convert A2E failed (%s)\n", data);
    if (recvbytes > 0)
        printf("Csub: data recv: %s\n", data);
    else
        printf("Csub: client stopped sending data\n");
    printf("Csub: recvbytes = %d\n", recvbytes);
    return recvbytes;
}

int hcsmstp(int *voltab, int pd)
{
   time_t now;

   EXPGM1 *fptr;                     /* link assembler program        */

   char *str1;                       /* Output buffer                 */
   char outlineÝ80¨;                 /* sprintf output work           */
   int  total_vol = 0x00000000;      /* total volume count            */
   int  loop_sw = 0x00000000;        /* loop switch                   */
   int  loop_s1 = 0x00000000;        /* loop switch                   */
   int  B_address= 0x00000000;       /* store SSI buffer address - SGD*/
   int  V_address= 0x00000000;       /* store SSI buffer address - VLD*/
   int  S_address= 0x00000000;       /* system relate data of status  */
   int  *SSI_Buffer;                 /* Call SSI of work area buffer  */
   int  H_address= 0x00000000;       /* store HC buffer address       */
   int  *HC_Buffer;                  /* Call SSI of work area buffer  */
   int  WA_length;                   /* VLD work area length          */
   int  tc;                          /* total capacity in megabytes   */
   int  tf;                          /* total amount free in megabytes*/
   float rt;                         /* %Used                         */
   float ftc;
   float ftf;
   int  tv;                          /* total volumes                 */
   int  rc;                          /* link assembler return code    */
   int  SG_count;                    /* Number of SG defs count       */
   int  SG_length;                   /* Length of one SGDEF+extents   */
   int  VL_count;                    /* Number of Volumes count       */
   int  VL_length;                   /* Length of one def VLDEF       */
   char SGtypeÝ3¨ = {0};             /* SG request type               */
   char SGnameÝ30¨ = {0};            /* SG name                       */
   short int SGnameLen = 0x0000;     /* SG name length                */

   WA_length = wktbl;
   tc = 0;
   tf = 0;
   rt = 0;
   tv = 0;

   /* --begin-------------------------------------------------------- */
   /* --------------------------------------------------------------- */
   /* point to volume information storage it from calling program     */
   /* --------------------------------------------------------------- */
   volinfod_ptr = voltab;
   /* --------------------------------------------------------------- */
   /* Set Things Up                                                   */
   /* --------------------------------------------------------------- */
   str1= (char *)malloc(256);          /* Area for printing strings   */
   memset(str1,0,255);                 /* Zero output buffer          */

   SSI_Buffer = (int *)malloc(WA_length);
   memset(SSI_Buffer,0,WA_length);
   B_address = SSI_Buffer;             /* store SSI buffer address    */

   /* --------------------------------------------------------------- */
   /* Output z/OS System Name                                         */
   /* --------------------------------------------------------------- */
   cvt_ptr = psa_ptr->flccvt;        /* CVT at address flccvt         */
   memcpy(str1,cvt_ptr->cvtsname,8);
   if (pd > 0) {
      printf("z/OS system identify name: %s\n \n",str1);
   } /* end if */
   memset(str1,0,8);                 /* Zero output buffer            */

   fptr = (EXPGM1 *)fetch("SMSINFO");   /* load SMSINFO assembler     */

   strcpy(SGtype, "SGL");
   strcpy(SGname, "                              ");  /* move spaces */
   SGnameLen = 0;
   rc = (*fptr)(SSI_Buffer, &WA_length, &SGtype, &SGname, &SGnameLen);
   if (pd > 0) {
      printf("<PD MSG>Calling SMSINFO return code is %d\n", rc);
   } /* end if */

   igdsgd_ptr = SSI_Buffer;
   SG_count = igdsgd_ptr->sgdpcnt;
   SG_length = igdsgd_ptr->sgdplen;
   if (pd > 0) {
      printf("<PD MSG>sgdpcnt = %d\n", igdsgd_ptr->sgdpcnt);
      printf("<PD MSG>sgdplen = %d\n", igdsgd_ptr->sgdplen);
   } /* end if */

   HC_Buffer = (int *)malloc(hcsgdlen*igdsgd_ptr->sgdpcnt);
   memset(HC_Buffer,0,(hcsgdlen*igdsgd_ptr->sgdpcnt));
   H_address = HC_Buffer;             /* store HC buffer address    */
   hcsgd_ptr = HC_Buffer;

   for(loop_sw=1; loop_sw<=SG_count; loop_sw++) {
      if (pd > 0) {
         printf("<PD MSG>(%d)sgdfname = %s\n",
                strlen(igdsgd_ptr->sgdfname),
                igdsgd_ptr->sgdfname);
         printf("<PD MSG>sgdfdesc = %s\n", igdsgd_ptr->sgdfdesc);
         printf("<PD MSG>sgdftype = %d\n", igdsgd_ptr->sgdftype);
      }  /* end the if */

      /* copy igdsgd data to hcsgd */
      strcpy(hcsgd_ptr->hcfname,igdsgd_ptr->sgdfname);
      strcpy(hcsgd_ptr->hcfdesc,igdsgd_ptr->sgdfdesc);
      hcsgd_ptr->hcftype = igdsgd_ptr->sgdftype;
      hcsgd_ptr = hcsgd_ptr + 1;

      B_address = B_address + SG_length;
      igdsgd_ptr = B_address;
   } /* end for loop */

   hcsgd_ptr = H_address;
   if (pd > 0) {
      for(loop_sw=1; loop_sw<=SG_count; loop_sw++) {
         printf("<PD MSG>(hc buffer - %d)hcfname = %s\n",
                strlen(hcsgd_ptr->hcfname),
                hcsgd_ptr->hcfname);
         printf("<PD MSG>(hc buffer)hcfdesc = %s\n",
                hcsgd_ptr->hcfdesc);
         printf("<PD MSG>(hc buffer)hcftype = %d\n",
                hcsgd_ptr->hcftype);
         hcsgd_ptr = hcsgd_ptr + 1;
      } /* end for loop */
   }  /* end the if */

   /*----------------------------------------------------------------*/
   memset(SSI_Buffer,0,WA_length);    /* clear SSI buffer to NULL    */
   V_address = SSI_Buffer;             /* store SSI buffer address    */
   hcsgd_ptr = H_address;

   if (pd > 0) {
   printf("SMS DASD Space Information\n");
   printf("\n");
   printf("Storage Group Name   Volumes     Capacity         Free  %%Used\n");
   printf("-------------------------------------------------------------\n");
   }  /* end the if */

   total_vol = 0;  /* initial total volume count */
   for(loop_sw=1; loop_sw<=SG_count; loop_sw++) {
      strcpy(SGname,hcsgd_ptr->hcfname);
      strcpy(SGtype, "SGV");
      SGnameLen = strlen(hcsgd_ptr->hcfname);
      rc = (*fptr)(SSI_Buffer, &WA_length,
                   &SGtype, &SGname, &SGnameLen);
      if (pd > 0) {
         printf("<PD MSG>Calling SMSINFO with SGV "
                "type return code is %d\n", rc);
      } /* end if */

      V_address = SSI_Buffer;          /* store SSI buffer address    */
      igdvld_ptr = SSI_Buffer;
      VL_count = igdvld_ptr->vldpcnt;
      VL_length = igdvld_ptr->vldplen;
      if (pd > 0) {
         printf("<PD MSG>vldpid  = %s\n", igdvld_ptr->vldpid);
         printf("<PD MSG>vldpcnt = %d\n", igdvld_ptr->vldpcnt);
         printf("<PD MSG>vldplen = %d\n", igdvld_ptr->vldplen);
      } /* end if */
      tc = 0;
      tf = 0;
      tv = 0;
      for(loop_s1=1; loop_s1<=VL_count; loop_s1++) {
         if (pd > 0) {
            printf("<PD MSG>SMS Volume information list: "
                   "%s - %s (%d / %d / %d)\n",
                   igdvld_ptr->vldstgrp,
                   igdvld_ptr->vldvser,
                   igdvld_ptr->vldntcpy,
                   igdvld_ptr->vldnfree,
                   igdvld_ptr->vldnlext);
         } /* end if */
         /* copy SMS volume information for iPhone project */
         strcpy(volinfod_ptr->volstgrp,igdvld_ptr->vldstgrp);   /*hc00*/
         strcpy(volinfod_ptr->volvser,igdvld_ptr->vldvser);     /*hc00*/
         volinfod_ptr->volntcpy = igdvld_ptr->vldntcpy;         /*hc00*/
         volinfod_ptr->volnfree = igdvld_ptr->vldnfree;         /*hc00*/
         volinfod_ptr->volnlext = igdvld_ptr->vldnlext;         /*hc00*/

         /* point to System related data  (24 is VLDP length) */
         S_address = V_address + igdvld_ptr->vldsysof + 24;
         vldsysdt_ptr = S_address;
         if (pd > 0) {
            printf("<PD MSG>System status VLDSYSOF - VLDSYSLN "
                   "(SMS/MVS): %d - %d (%d / %d)\n",
                   igdvld_ptr->vldsysof,
                   igdvld_ptr->vldsysln,
                   vldsysdt_ptr->vldstsms,
                   vldsysdt_ptr->vldstmvs);
         } /* end if */
         /* copy SMS volume information for iPhone project */
         volinfod_ptr->volsysof = igdvld_ptr->vldsysof;         /*hc00*/
         volinfod_ptr->volsysln = igdvld_ptr->vldsysln;         /*hc00*/
         volinfod_ptr->volstsms = vldsysdt_ptr->vldstsms;       /*hc00*/
         volinfod_ptr->volstmvs = vldsysdt_ptr->vldstmvs;       /*hc00*/
         volinfod_ptr = volinfod_ptr + 1;    /* point to next         */
         total_vol = total_vol + 1;          /* add volume count      */

         /* SMS Status           | MVS Status           */
         /* 0 - No status given  | 1 - Online           */
         /* 1 - Enabled          | 2 - Offline          */
         /* 2 - Quiesce/All      | 3 - Pending offline  */
         /* 3 - Quiesce/New      | 4 - Boxed            */
         /* 4 - Disabled/All     | 5 - Not Ready        */
         /* 5 - Disabled/New                            */
         if (vldsysdt_ptr->vldstmvs == vldonln) {
            tc = tc + igdvld_ptr->vldntcpy;
            tf = tf + igdvld_ptr->vldnfree;
            tv = tv + 1;
         } /* end if */

         V_address = V_address + VL_length;
         igdvld_ptr = V_address;
      } /* end the for loop */

      /* rt = ((tc-tf)/tc)*100; */
      ftc = (float)tc;
      ftf = (float)tf;

      if (tc == 0)
         rt = 0;
      else
         rt = ((ftc-ftf)*100)/ftc;

      if (pd > 0) {
         printf("% -20s %5i   %10iMB %10iMB  %5.2f\n",
                hcsgd_ptr->hcfname,
                tv,
                tc,
                tf,
                rt);
      } /* end if */

      hcsgd_ptr = hcsgd_ptr + 1;
      memset(SSI_Buffer,0,WA_length);    /* clear SSI buffer to NULL */
   } /* end for loop */
   /*----------------------------------------------------------------*/

   return (total_vol);   /* return to calling */
}  /* end the hcsmstp */               /* main                        */
