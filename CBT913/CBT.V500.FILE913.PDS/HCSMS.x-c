/*
 * hcsms - query SMS information thorough SSI
 *
 * Copyright 2014 WLPF390
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose and without fee is hereby granted.
 *
 * Author: HC Tsai
 */

/* ================================================================== */
/* Includes and Variables                                             */
/* ================================================================== */
/* --- Includes  ---------------------------------------------------- */
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "hexdump.h"
#include "StoHxS.h"
#include "hccopyr.h"

/* ================================================================== */
/* Map z/OS Control Blocks                                            */
/* ================================================================== */
/* --- include z/OS control blocks ---------------------------------- */
#include "ihapsa"                      /* PSA                         */
#include "cvt"                         /* CVT                         */
#include "igdsms"                      /* SMS desct - IGDVLD & IGDSGD */
#include "hcsgd"                       /* HCSGD desct                 */
/* --- Set PSA address to x0 ---------------------------------------- */
struct psa *psa_ptr = 0;               /* PSA is at address 0         */
struct cvt *cvt_ptr;
struct igdsgd *igdsgd_ptr;
struct igdvld *igdvld_ptr;
struct vldsysdt *vldsysdt_ptr;
struct hcsgd *hcsgd_ptr;

/* for dynamic link assembler program                                 */
#pragma linkage (EXPGM1,OS)
typedef int EXPGM1();

#define MAXVOLS 2000;

/* ================================================================== */
/* Main Program                                                       */
/* ================================================================== */
void main(int argc, char *argvÝ¨) {
   time_t now;

   EXPGM1 *fptr;                     /* link assembler program        */

   char *str1;                       /* Output buffer                 */
   char outlineÝ80¨;                 /* sprintf output work           */
   int  pd = 0x00000000;             /* debugging switch              */
   int  loop_sw = 0x00000000;        /* loop switch                   */
   int  loop_s1 = 0x00000000;        /* loop switch                   */
   int  B_address= 0x00000000;       /* store SSI buffer address - SGD*/
   int  V_address= 0x00000000;       /* store SSI buffer address - VLD*/
   int  S_address= 0x00000000;       /* system relate data of status  */
   int  *SSI_Buffer;                 /* Call SSI of work area buffer  */
   int  H_address= 0x00000000;       /* store HC buffer address       */
   int  *HC_Buffer;                  /* Call SSI of work area buffer  */
   int  WA_length;                   /* VLD work area length          */
   int  tc;                          /* total capacity in megabytes   */
   int  tf;                          /* total amount free in megabytes*/
   float rt;                         /* %Used                         */
   float ftc;
   float ftf;
   int  tv;                          /* total volumes                 */
   int  rc;                          /* link assembler return code    */
   int  SG_count;                    /* Number of SG defs count       */
   int  SG_length;                   /* Length of one SGDEF+extents   */
   int  VL_count;                    /* Number of Volumes count       */
   int  VL_length;                   /* Length of one def VLDEF       */
   char SGtypeÝ3¨ = {0};             /* SG request type               */
   char SGnameÝ30¨ = {0};            /* SG name                       */
   short int SGnameLen = 0x0000;     /* SG name length                */

   WA_length = wktbl;
   tc = 0;
   tf = 0;
   rt = 0;
   tv = 0;

   /* --begin-------------------------------------------------------- */
   if (strcmp(argvÝ1¨, "YES") == 0) {
      pd = 999;
      printf("<PD MSG>Debug on\n");
     }  /* end if */

   time(&now);
   if (pd > 0) {
      printf("<PD MSG>date/time: %s\n", ctime(&now));
     } /* end if - pd */


   /* --------------------------------------------------------------- */
   /* Set Things Up                                                   */
   /* --------------------------------------------------------------- */
   str1= (char *)malloc(256);          /* Area for printing strings   */
   memset(str1,0,255);                 /* Zero output buffer          */

   SSI_Buffer = (int *)malloc(WA_length);
   memset(SSI_Buffer,0,WA_length);
   B_address = SSI_Buffer;             /* store SSI buffer address    */

   /* --------------------------------------------------------------- */
   /* Output z/OS System Name                                         */
   /* --------------------------------------------------------------- */
   cvt_ptr = psa_ptr->flccvt;        /* CVT at address flccvt         */
   printf("%s\n \n", hccopyr);
   memcpy(str1,cvt_ptr->cvtsname,8);
   printf("z/OS system identify name: %s\n \n",str1);
   memset(str1,0,8);                 /* Zero output buffer            */

   fptr = (EXPGM1 *)fetch("SMSINFO");   /* load SMSINFO assembler     */

   strcpy(SGtype, "SGL");
   strcpy(SGname, "                              ");  /* move spaces */
   SGnameLen = 0;
   rc = (*fptr)(SSI_Buffer, &WA_length, &SGtype, &SGname, &SGnameLen);
   if (pd > 0) {
      printf("<PD MSG>Calling SMSINFO return code is %d\n", rc);
   } /* end if */

   igdsgd_ptr = SSI_Buffer;
   SG_count = igdsgd_ptr->sgdpcnt;
   SG_length = igdsgd_ptr->sgdplen;
   if (pd > 0) {
      printf("<PD MSG>sgdpcnt = %d\n", igdsgd_ptr->sgdpcnt);
      printf("<PD MSG>sgdplen = %d\n", igdsgd_ptr->sgdplen);
   } /* end if */

   HC_Buffer = (int *)malloc(hcsgdlen*igdsgd_ptr->sgdpcnt);
   memset(HC_Buffer,0,(hcsgdlen*igdsgd_ptr->sgdpcnt));
   H_address = HC_Buffer;             /* store HC buffer address    */
   hcsgd_ptr = HC_Buffer;

   for(loop_sw=1; loop_sw<=SG_count; loop_sw++) {
      if (pd > 0) {
         printf("<PD MSG>(%d)sgdfname = %s\n",
                strlen(igdsgd_ptr->sgdfname),
                igdsgd_ptr->sgdfname);
         printf("<PD MSG>sgdfdesc = %s\n", igdsgd_ptr->sgdfdesc);
         printf("<PD MSG>sgdftype = %d\n", igdsgd_ptr->sgdftype);
      }  /* end the if */

      /* copy igdsgd data to hcsgd */
      strcpy(hcsgd_ptr->hcfname,igdsgd_ptr->sgdfname);
      strcpy(hcsgd_ptr->hcfdesc,igdsgd_ptr->sgdfdesc);
      hcsgd_ptr->hcftype = igdsgd_ptr->sgdftype;
      hcsgd_ptr = hcsgd_ptr + 1;

      B_address = B_address + SG_length;
      igdsgd_ptr = B_address;
   } /* end for loop */

   hcsgd_ptr = H_address;
   if (pd > 0) {
      for(loop_sw=1; loop_sw<=SG_count; loop_sw++) {
         printf("<PD MSG>(hc buffer - %d)hcfname = %s\n",
                strlen(hcsgd_ptr->hcfname),
                hcsgd_ptr->hcfname);
         printf("<PD MSG>(hc buffer)hcfdesc = %s\n",
                hcsgd_ptr->hcfdesc);
         printf("<PD MSG>(hc buffer)hcftype = %d\n",
                hcsgd_ptr->hcftype);
         hcsgd_ptr = hcsgd_ptr + 1;
      } /* end for loop */
   }  /* end the if */

   /*----------------------------------------------------------------*/
   memset(SSI_Buffer,0,WA_length);    /* clear SSI buffer to NULL    */
   V_address = SSI_Buffer;             /* store SSI buffer address    */
   hcsgd_ptr = H_address;

   printf("SMS DASD Space Information\n");
   printf("\n");
   printf("Storage Group Name   Volumes     Capacity         Free  %%Used\n");
   printf("-------------------------------------------------------------\n");
   for(loop_sw=1; loop_sw<=SG_count; loop_sw++) {
      strcpy(SGname,hcsgd_ptr->hcfname);
      strcpy(SGtype, "SGV");
      SGnameLen = strlen(hcsgd_ptr->hcfname);
      rc = (*fptr)(SSI_Buffer, &WA_length,
                   &SGtype, &SGname, &SGnameLen);
      if (pd > 0) {
         printf("<PD MSG>Calling SMSINFO with SGV "
                "type return code is %d\n", rc);
      } /* end if */

      V_address = SSI_Buffer;          /* store SSI buffer address    */
      igdvld_ptr = SSI_Buffer;
      VL_count = igdvld_ptr->vldpcnt;
      VL_length = igdvld_ptr->vldplen;
      if (pd > 0) {
         printf("<PD MSG>vldpid  = %s\n", igdvld_ptr->vldpid);
         printf("<PD MSG>vldpcnt = %d\n", igdvld_ptr->vldpcnt);
         printf("<PD MSG>vldplen = %d\n", igdvld_ptr->vldplen);
      } /* end if */
      tc = 0;
      tf = 0;
      tv = 0;
      for(loop_s1=1; loop_s1<=VL_count; loop_s1++) {
         if (pd > 0) {
            printf("<PD MSG>SMS Volume information list: "
                   "%s - %s (%d / %d / %d)\n",
                   igdvld_ptr->vldstgrp,
                   igdvld_ptr->vldvser,
                   igdvld_ptr->vldntcpy,
                   igdvld_ptr->vldnfree,
                   igdvld_ptr->vldnlext);
         } /* end if */
         /* point to System related data  (24 is VLDP length) */
         S_address = V_address + igdvld_ptr->vldsysof + 24;
         vldsysdt_ptr = S_address;
         if (pd > 0) {
            printf("<PD MSG>System status VLDSYSOF - VLDSYSLN "
                   "(SMS/MVS): %d - %d (%d / %d)\n",
                   igdvld_ptr->vldsysof,
                   igdvld_ptr->vldsysln,
                   vldsysdt_ptr->vldstsms,
                   vldsysdt_ptr->vldstmvs);
         } /* end if */
                                /* SMS Status           */
                                /* 0 - No status given  */
                                /* 1 - Enabled          */
                                /* 2 - Quiesce/All      */
                                /* 3 - Quiesce/New      */
                                /* 4 - Disabled/All     */
                                /* 5 - Disabled/New     */
                                /* MVS Status           */
                                /* 1 - Online           */
                                /* 2 - Offline          */
                                /* 3 - Pending offline  */
                                /* 4 - Boxed            */
                                /* 5 - Not Ready        */
         if (vldsysdt_ptr->vldstmvs == vldonln) {
            tc = tc + igdvld_ptr->vldntcpy;
            tf = tf + igdvld_ptr->vldnfree;
            tv = tv + 1;
         } /* end if */

         V_address = V_address + VL_length;
         igdvld_ptr = V_address;
      } /* end the for loop */

      /* rt = ((tc-tf)/tc)*100; */
      ftc = (float)tc;
      ftf = (float)tf;

      if (tc == 0)
         rt = 0;
      else
         rt = ((ftc-ftf)*100)/ftc;

      printf("% -20s %5i   %10iMB %10iMB  %5.2f\n",
             hcsgd_ptr->hcfname,
             tv,
             tc,
             tf,
             rt);

      hcsgd_ptr = hcsgd_ptr + 1;
      memset(SSI_Buffer,0,WA_length);    /* clear SSI buffer to NULL */
   } /* end for loop */
   /*----------------------------------------------------------------*/

}                                      /* main                        */
