         TITLE 'SMSINFO - Subroutine for get SMS information'
***********************************************************************
*
* Function   : query SMS through SSI
*
* Written by : HC Tsai  mz055t@ms13.hint.net
*
*   Arguments:    Address of VLD work area
*                 Address of VLD work area length
*                 Address of request type
*                 Address of Storage Group name
*                 Address of Storage Group name length
*   Return:       int - 0 No error from called
*                      -1 VLD work area address invalid
*                      -2 VLD work area length invalid
*                      -3 request type invalid
*                      -4 SG name invalid
*                      -5 SG name length invalid
*                      -8 Call SSI bad return code
*                      -9 Call SSI bad reason code
*
*   C usage:      #pragma linkage (EXPGM1,OS)
*                 typedef int EXPGM1();
*
*                 fptr = (EXPGM1 *)fetch("SMSINFO");
*                 rc = (*fptr)(&vld,&vldlength,&SGtype,&SGname,
*                              &SGnameLeghth);
*
***********************************************************************
SMSINFO CSECT
SMSINFO AMODE 31
SMSINFO RMODE ANY
         USING SMSINFO,R15             Register 15 contains address
         B     START                   Skip data
         DC    C'SMSINFO'              Program-name
         DC    C'&SYSDATE'             Date
         DC    C'&SYSTIME'             Time
         DC    C'V1R0.00'              Version number
         DS    0H                      Re-align on halfword-boundary
*
START    STM   R14,R12,12(R13)         Save registers
         DROP  R15                     No longer needed as base-reg
         LR    R12,R15                 Fill reg.12 with base address
         USING SMSINFO,R12             Now use reg.12 as base
         LA    R14,SAVEAREA            Address new savearea
         ST    R13,4(R14)              Point to previous savearea
         ST    R14,8(R13)              Point to next save-area
         LR    R13,R14                 Reg.13 points to a free savearea
*
*
* main program here
*
         LR    R2,R1                   copy incoming parm address to R2
         ST    R2,PARM0                Save incoming parm address
         L     R5,0(,R2)               Get VLD work area address
         ST    R5,PARM1                Save VLD work area address
         LTR   R5,R5                   Valid parm address?
         BZ    SPIFRT1                 No - get out
         L     R5,4(,R2)               Get VLD work area length
         ST    R5,PARM2                Save VLD work area length
         LTR   R5,R5                   Valid parm address?
         BZ    SPIFRT2                 No - get out
         L     R5,8(,R2)               Get request type
         ST    R5,PARM3                Save request type address
         LTR   R5,R5                   Valid parm address?
         BZ    SPIFRT3                 No - get out
         L     R5,12(,R2)              Get SG name
         ST    R5,PARM4                Save SG name address
         LTR   R5,R5                   Valid parm address?
         BZ    SPIFRT4                 No - get out
         L     R5,16(,R2)              Get SG name length
         ST    R5,PARM5                Save SG name length address
         LTR   R5,R5                   Valid parm address?
         BZ    SPIFRT5                 No - get out
*
* CONSTRUCT SSOB
         XC    WORKSSOB,WORKSSOB       Clear SSOB
         LA    R8,WORKSSOB             Load SSOB address
         USING SSOB,R8                 Mapping it
         MVC   SSOBID,=C'SSOB'         SSOB acron.
         MVC   SSOBLEN,=AL2(SSOBHSIZ)  SSOB length
         MVC   SSOBFUNC,=AL2(SSOBSSMS) Function code for SMS services
         L     R1,CVTPTR(0,0)          -> CVT
         L     R1,CVTJESCT-CVTMAP(,R1) -> JES2 communication table
         L     R1,JESCTEXT-JESCT(,R1)  -> Pageable JESCT
         MVC   SSOBSSIB,JESSMSIB-JESPEXT(R1) -> SMS SSIB
         O     R8,=X'80000000'         Set last parm
         ST    R8,PTRSSOB              Save it
* CONSTRUCT SSSA
         XC    WORKSSSA,WORKSSSA       Clear SSSA
         LA    R9,WORKSSSA             Load SSSA address
         ST    R9,SSOBINDV             Function dependent area poiyter
         USING IEFSSSA,R9              Map it
         MVC   SSSAID,=C'SSSA'         SSSA acron.
         LA    R0,SSSALN+SSSA1LN+32    Length
         STH   R0,SSSALEN
         MVC   SSSAVER,=AL2(SSOBSSVR)  Version number
         MVC   SSSASFN,=AL2(SSSAACTV)  Returns data from the active CFG
         MVI   SSSAIFLG,SSSANAUT       Caller not authorized
$C0      EQU   *
         L     R7,PARM3                Request type
         CLC   0(3,R7),=C'SGV'         Request SGV?
         BNE   $C4
         MVI   SSSA1TYP,SSSA1SGV
         L     R7,PARM5                SG name length
         MVC   SSSA1NML,0(R7)
         L     R7,PARM4                SG name
         MVC   SSSA1NAM(30),0(R7)
         B     $C9
$C4      EQU   *                       Request SGL (default type)
         MVI   SSSA1TYP,SSSA1SGL       Retrun StorageGroup list
         B     $C9
$C9      EQU   *
         MVC   SSSA1CNT,=F'1'          One request
         L     R7,PARM2
         MVC   SSSA1LEN,0(R7)          Length of work area
         L     R1,PARM1                Get VLD work area
         ST    R1,SSSA1PTR             Save VLD work area
* CALL SSI
         LA    R1,PTRSSOB              Get address of SSOB address
         IEFSSREQ                      Call SSI
         LTR   R15,R15                 Test RC
         BNZ   SPIFRT8                 ¬=0 -> exit bad return code
         L     R1,SSSARSN              Load SSSA reason code
         LTR   R1,R1                   Test RC
         BNZ   SPIFRT9                 ¬=0 -> exit bad return code
         DROP  R8,R9                   end of process
*
         MVC   RETCODE(4),=F'0'    Set return code
         B     EXIT00
*
*
EXIT00   DS    0H
         LA    R15,SAVEAREA            Point to our 'RSA'
         L     R13,4(,R15)             Restore caller's R13
         L     R15,RETCODE             Set return code
         RETURN (14,12),RC=(15)        Restore registers and return
*
SPIFRT1 DS     0H
         MVC   RETCODE(4),=F'-1'       Set return code
         B     EXIT00                  We're done
SPIFRT2 DS     0H
         MVC   RETCODE(4),=F'-2'       Set return code
         B     EXIT00                  We're done
SPIFRT3 DS     0H
         MVC   RETCODE(4),=F'-3'       Set return code
         B     EXIT00                  We're done
SPIFRT4 DS     0H
         MVC   RETCODE(4),=F'-4'       Set return code
         B     EXIT00                  We're done
SPIFRT5 DS     0H
         MVC   RETCODE(4),=F'-5'       Set return code
         B     EXIT00                  We're done
SPIFRT8 DS     0H
         MVC   RETCODE(4),=F'-8'       Set return code
         B     EXIT00                  We're done
SPIFRT9 DS     0H
         MVC   RETCODE(4),=F'-9'       Set return code
         B     EXIT00                  We're done
*
*
         DS  0F                        Force to fullword
SAVEAREA DS  18F                       Save-area
PARM0    DS    F
PARM1    DS    F
PARM2    DS    F
PARM3    DS    F
PARM4    DS    F
PARM5    DS    F
PARM6    DS    F
PARM7    DS    F
PARM8    DS    F
PARM9    DS    F
PARM10   DS    F
RETCODE  DS    F
PTRSSOB  DS    F
         DS    0D                      Align
WORKSSOB DS    XL(SSOBHSIZ)            Working SSOB
         DS    0D                      Align
WORKSSSA DS    XL(SSSALN+SSSA1LN+32)   Working SSSA
*
*
         LTORG                         All literals
         CVT DSECT=YES                 CVT
         IEFJSSOB
         IEFSSSA
         IEFJESCT                      JESCT
*
         LTORG                         All literals
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
