{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012742000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 2292654, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE766.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 2292654, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 2292654, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE766.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00$\\t'", "DS1TRBAL": "b'H\\x1e'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x052\\x00\\r\\x055\\x00\\x04\\x00%'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04S\\x00B\\x01\\x11\\x18/\\x01\\x11\\x18/\\x147\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf3@@@'", "ispf": {"version": "04.83", "flags": 0, "createdate": "2011-07-01T00:00:00", "modifydate": "2011-07-01T14:37:42", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-483"}, "text": "REGULAR CBT TAPE - VERSION 483    FILE:  766\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT483.FILE766\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 22 MEMBERS COUNTED; CUMULATIVE SIZE IS 21,394 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   07/01/11    14:37:42    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00X\\x01\\x07%?\\x01\\x07%?\"W\\x00U\\x00U\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-09-10T00:00:00", "modifydate": "2007-09-10T22:57:58", "lines": 85, "newlines": 85, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:     Mellon Shared Spool Mods - for JES2 1.7 and 1.8\nFrom:        \"McColley.Stephen\" <Stephen.McColley@SunTrust.com>\nDate:        Mon, 10 Sep 2007 13:31:46 -0400\nTo:          <SBGolob@cbttape.org>\n\nMr. Golob,\n\n  I have included an XMIT format file for the new version of the\n  Mellon Shared Spool Mods.  We are currently running with them\n  on 1.7, and have tested successfully under 1.8, no changes\n  other than a reassembly to go from 1.7 to 1.8.\n\n  We have decided, since we have been maintaining the mods for a\n  dozen of so years now, to drop the MELLON part of the MELLON\n  SHARED SPOOL MODS, and simply refer to them as the SHARED SPOOL\n  MODS.  We do of course still acknowledge Mellon for their\n  earlier contribution.\n\n  This version of the Shared Spool Mods provides quite a few new\n  features including TIME cards that can be used to keep a job\n  from executing until a certain time of day, or certain length\n  of time has passed.  Included in the package we now have three\n  documents, an installation doc, a users guide, and an\n  operations guide.  We also added features that can be used to\n  limit the number of jobs that can execute in each class on the\n  LPAR level.  We had to have this feature to handle WLM managed\n  inits the way we wanted to locally, although the feature works\n  for normal JES2 inits as well as WLM managed inits, and lots\n  more - all in the documentation members.\n\n  Included in the XMIT file are the following members -\n\n  @@README - basic info about the package, documentation\n             location, and organization.\n\n  DISCL & DISCLAIM - our basic disclaimer text in different\n             formats.\n\n  JES2PARM - sample JES2 parms to use with the shared spool mods.\n\n  LSES500  - The usermod that contains all of the Shared Spool\n             Mods.  I repackaged them into a single usermod.\n\n  LSES500J - A sample SMPE job to receive and apply the usermod\n             for LSES500 - the Shared Spool Mods.\n\n  SSMINSTP - The installation documentation in PDF format.\n\n  SSMINSTW -  The installation documentation in WORD format.\n\n  SSMOPSGP - The operations guide in PDF format.\n\n  SSMOPSGW - The operations guide in WORD format.\n\n  SSMUSERP - The users guide in PDF format.\n\n  SSMUSERW - The users guide in WORD format.\n\n--- The following members are not really part of our Shared Spool\n      Mods, but are used by some folks ---\n\n STSCX01A - Our old exit01a - page separator exit.\n\n STSCX05B - This exit prevents purging jobs by range.\n\n STSCX15A - Which forces FCB reloads unless the FCB is for\n            standard forms.\n\n STSCX36A - Which is a SAF exit to propagate userids for RJE/NJE\n            jobs.\n\n  If there are any problems or questions, please let me know.\n\n  Thank you again for maintaining the CBT tape web site!\n\nThanks,\nStephen McColley\nEnterprise Information Services\nSunTrust Banks, Inc.\nMail Code GA-ATL-4030\n250 Piedmont Ave., Suite 1600\nAtlanta, Ga 30308\nTel: 404.230-5182 Cell: 404.641.9175\nFax: 404.581-1688\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE2": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x08\\x01\\x08\\x05\\x1f\\x01\\x08\\x05\\x1f\\x10I\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2008-02-20T00:00:00", "modifydate": "2008-02-20T10:49:08", "lines": 29, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:    Updates for the JES2 Shared Spool Mods for 1.7 and 1.8\nFrom:       \"McColley.Stephen\" <Stephen.McColley@SunTrust.com>\nDate:       Mon, 11 Feb 2008 13:10:29 -0500\nTo:         <SBGolob@cbttape.org>\n\nSam,\n\n\n\nWe have found a couple of bugs and fixed them in the latest\nversion of the Shared Spool Mods for jes2.  I have included a\nnew xmi file to replace the previous one.\n\nYou had posted the previous distribution as file#766 in the CBT\nTape pre-release Updates section.\n\nThanks for continuing to maintain the CBTTAPE web site!\n\n\nRegards,\nStephen McColley\nEnterprise Information Services\nSunTrust Banks, Inc.\nMail Code GA-ATL-4030\n250 Piedmont Ave., Suite 1600\nAtlanta, Ga 30308\nTel: 404.230-5182 Cell: 404.641.9175\nFax: 404.581-1688\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@@README": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00F\\x01\\x07#\\x9f\\x01\\x08\\x04/\\x122\\x00\\x8b\\x00h\\x00\\x00\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2007-08-27T00:00:00", "modifydate": "2008-02-11T12:32:46", "lines": 139, "newlines": 104, "modlines": 0, "user": "T0SM0"}, "text": "\n\n                   SSSS H   H  AAA  RRRR  EEEEE DDDD\n                  S     H   H A   A R   R E     D   D\n                   SSS  HHHHH AAAAA RRRR  EEEE  D   D\n                      S H   H A   A R  R  E     D   D\n                  SSSS  H   H A   A R   R EEEEE DDDD\n\n                      SSSS PPPP   OOO   OOO  L\n                     S     P   P O   O O   O L\n                      SSS  PPPP  O   O O   O L\n                         S P     O   O O   O L\n                     SSSS  P      OOO   OOO  LLLLL\n\n                        M   M  OOO  DDDD   SSSS\n                        MM MM O   O D   D S\n                        M M M O   O D   D  SSS\n                        M   M O   O D   D     S\n                        M   M  OOO  DDDD  SSSS\n\n                       for jes2 1.7 and jes2 1.8\n\n\n  DISCLAIMER -\n\n***********************************************************************\n*                                                                     *\n*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *\n*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS *\n*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED  *\n*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF   *\n*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE *\n*  USEFULLNESS OF THE MATERIAL.                                       *\n*                                                                     *\n*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *\n*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE  *\n*  IN THE FUTURE.                                                     *\n*                                                                     *\n***********************************************************************\n\n\n  This is the installation PDS for the Shared Spool Mods for jes2 1.7\n and jes2 1.8.  The shared spool mods were formely known as the\n Mellon shared spool mods.\n\n   All who use the shared spool mods owe a debt of gratitude to Mellon\n Bank for the original implementaion of the shared spool mods, but\n because it has been maintained outside of Mellon for a dozen years,\n and has been rewritten twice since then, we will refer to the mods\n as the SHARED SPOOL MODS from now on.  Once again -\n                      THANK YOU MELLON BANK !\n\n\n\n  In this PDS you should find the following members.\n\n@@README -   That is this member, you are reading it.\n\nDISCLAIM -   Our standard disclaimer - we guarentee / warrent nothing!\n\nSSMINSTP -   Shared Spool Mods installation manual - PDF format\n\nSSMINSTW -   Shared Spool Mods installation manual - Word Document\n\nSSMUSERP -   Shared Spool Mods Users Guide - PDF format\n\nSSMUSERW -   Shared Spool Mods Users Buide - Word Document\n\nSSMOPSGP -   Shared Spool Mods Operations Guide - PDF format\n\nSSMOPSGW -   Shared Spool Mods Operations Guide - Word Document\n\nLSES500  -   THE Single usermod needed to install the entire package.\n\nLSES501  -   A set of fixes to the original distribution - they are required.\n\nLSES502  -   A set of fixes to the original distribution - they are required.\n\nLSES500J -   Sample JCL to run the RECEIVE / APPLY Check / APPLY\n    (You must apply lses500, lses501 and lses502 for the SHARED SPOOL MODS).\n\nJES2PARM -   Sample JES2 parms needed to implement the package.\n\n\n*** then we have the following three members - they are not really part of\n*** the shared spool mods - but we have been distributing them, and some\n*** folks still need them.  If you want to use these, you will have to\n*** apply them seperately from the shared spool mods - we just have the\n*** source - they are not setup as usermods.\n\n\nSTSCX01A -   our version of the page seperator exit. (not part of ssm's)\n\nSTSCX05B -   Prevent purging by job range. (not part of ssm's)\n\nSTSCX15A -   Causes FCBs to be reload with each job unless std forms.\n\nSTSCx36A -   SAF processing for jobs coming in from RJE/NJE sources.\n\n\n\n\n  The documentation members suffixed with a 'P' i.e. SSMINSTP are PDF\nformat documents.  To use them you will need to transfer them to a PC\nusing your favorite file transfer program using a BINARY option - ie.\nno translation.  You will probably need to make sure they are\ntransferred to a new file name that ends in \".PDF\", or you may not be\nable to read them.\n\n  If you can not read PDF docs the original \"WORD\" formatted docs\nare included in the members suffixed with a \"W\" i.e. SSMINSTW.  You\nwill probably need to offload them to a PC file with a suffix of DOC\nto read them properly.\n\n\n  The three basic pieces of documentation are -\n\n1 The installation guide - gives background, installation instructions,\n  and other information needed to setup the SHARED SPOOL MODS Package.\n\n2 The Users Guide - gives detailed info on JECL statements and is aimed\n  at the end users - whoever codes and uses JCL.\n\n3 The Operations Guide - gives detailed informatin about all of the\n  new JES2 display and modify commands avaialable with the package.\n\n\n\n\n\n  Once you have the package setup - please drop me a line at\n   SGMCCOLLEY@ALLTEL.NET  or STEPHEN.MCCOLLEY@SUNTRUST.BANK so that\n  I can add you to the mailing list.  That way I can let you know about\n  bugs, fixes, and new releases as I make the avaialable.\n\n  If you drop me your REAL mailing address, I will send you a REAL\n  \"Shared Spool Mods\" coffee cup - I still have plenty of these.\n\n** end of doc **\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE766": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04S\\x007\\x01\\x11\\x18/\\x01\\x11\\x18/\\x147\\x00\\xa4\\x00\\xa4\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf3@@@'", "ispf": {"version": "04.83", "flags": 0, "createdate": "2011-07-01T00:00:00", "modifydate": "2011-07-01T14:37:37", "lines": 164, "newlines": 164, "modlines": 0, "user": "CBT-483"}, "text": "//***FILE 766 is from Stephen McColley and contains the Mellon      *   FILE 766\n//*           Mods for z/OS 1.7 and 1.8.  These are not called      *   FILE 766\n//*           the Mellon Mods anymore, because Mellon Bank has      *   FILE 766\n//*           long since stopped supporting them.  But Stephen      *   FILE 766\n//*           McColley and his colleagues at SunTrust Bank do the   *   FILE 766\n//*           support now.  See their explanations below.           *   FILE 766\n//*                                                                 *   FILE 766\n//*           McColley Systems Group Inc.                           *   FILE 766\n//*           sgmccolley@windstream.net                             *   FILE 766\n//*           SGMcColley@MVSProgrammer.com                          *   FILE 766\n//*           http://WWW.MVSProgrammer.com                          *   FILE 766\n//*           770-335-0478                                          *   FILE 766\n//*                                                                 *   FILE 766\n//*     --------------------------------------------------------    *   FILE 766\n//*                                                                 *   FILE 766\n//*                SSSS H   H  AAA  RRRR  EEEEE DDDD                *   FILE 766\n//*               S     H   H A   A R   R E     D   D               *   FILE 766\n//*                SSS  HHHHH AAAAA RRRR  EEEE  D   D               *   FILE 766\n//*                   S H   H A   A R  R  E     D   D               *   FILE 766\n//*               SSSS  H   H A   A R   R EEEEE DDDD                *   FILE 766\n//*                                                                 *   FILE 766\n//*                   SSSS PPPP   OOO   OOO  L                      *   FILE 766\n//*                  S     P   P O   O O   O L                      *   FILE 766\n//*                   SSS  PPPP  O   O O   O L                      *   FILE 766\n//*                      S P     O   O O   O L                      *   FILE 766\n//*                  SSSS  P      OOO   OOO  LLLLL                  *   FILE 766\n//*                                                                 *   FILE 766\n//*                     M   M  OOO  DDDD   SSSS                     *   FILE 766\n//*                     MM MM O   O D   D S                         *   FILE 766\n//*                     M M M O   O D   D  SSS                      *   FILE 766\n//*                     M   M O   O D   D     S                     *   FILE 766\n//*                     M   M  OOO  DDDD  SSSS                      *   FILE 766\n//*                                                                 *   FILE 766\n//*                    for jes2 1.7 and jes2 1.8                    *   FILE 766\n//*                                                                 *   FILE 766\n//*     --------------------------------------------------------    *   FILE 766\n//*                                                                 *   FILE 766\n//*     DISCLAIMER -                                                *   FILE 766\n//*                                                                 *   FILE 766\n//*         THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY       *   FILE 766\n//*      AND TO THE BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL,     *   FILE 766\n//*      HOWEVER NO WARRANTY IS MADE TO THE ACCURACY OF THE MODS    *   FILE 766\n//*      AND NO RESPONSIBILITY IS ASSUMED FOR ANY MODIFICATION      *   FILE 766\n//*      DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF THE            *   FILE 766\n//*      MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO          *   FILE 766\n//*      EVALUATE THE USEFULLNESS OF THE MATERIAL.                  *   FILE 766\n//*                                                                 *   FILE 766\n//*         WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP    *   FILE 766\n//*      TO DATE, NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS    *   FILE 766\n//*      OR EXTENSIONS MADE IN THE FUTURE.                          *   FILE 766\n//*                                                                 *   FILE 766\n//*     --------------------------------------------------------    *   FILE 766\n//*                                                                 *   FILE 766\n//*      This is the installation PDS for the Shared Spool Mods     *   FILE 766\n//*      for jes2 1.7 and jes2 1.8.  The shared spool mods were     *   FILE 766\n//*      formerly known as the Mellon shared spool mods.            *   FILE 766\n//*                                                                 *   FILE 766\n//*      All who use the shared spool mods owe a debt of gratitude  *   FILE 766\n//*      to Mellon Bank for the original implementaion of the       *   FILE 766\n//*      shared spool mods, but because it has been maintained      *   FILE 766\n//*      outside of Mellon for a dozen years, and has been          *   FILE 766\n//*      rewritten twice since then, we will refer to the mods as   *   FILE 766\n//*      the SHARED SPOOL MODS from now on.  Once again -           *   FILE 766\n//*                           THANK YOU MELLON BANK !               *   FILE 766\n//*                                                                 *   FILE 766\n//*     --------------------------------------------------------    *   FILE 766\n//*                                                                 *   FILE 766\n//*       In this PDS you should find the following members.        *   FILE 766\n//*                                                                 *   FILE 766\n//*     @@README -   That is this member, you are reading it.       *   FILE 766\n//*                                                                 *   FILE 766\n//*     DISCLAIM -   Our standard disclaimer - we guarantee /       *   FILE 766\n//*                  warrant nothing!                               *   FILE 766\n//*                                                                 *   FILE 766\n//*     SSMINSTP -   Shared Spool Mods installation manual -        *   FILE 766\n//*                  PDF format                                     *   FILE 766\n//*                                                                 *   FILE 766\n//*     SSMINSTW -   Shared Spool Mods installation manual -        *   FILE 766\n//*                  Word Document                                  *   FILE 766\n//*                                                                 *   FILE 766\n//*     SSMUSERP -   Shared Spool Mods Users Guide - PDF format     *   FILE 766\n//*                                                                 *   FILE 766\n//*     SSMUSERW -   Shared Spool Mods Users Buide - Word           *   FILE 766\n//*                  Document                                       *   FILE 766\n//*                                                                 *   FILE 766\n//*     SSMOPSGP -   Shared Spool Mods Operations Guide - PDF       *   FILE 766\n//*                  format                                         *   FILE 766\n//*                                                                 *   FILE 766\n//*     SSMOPSGW -   Shared Spool Mods Operations Guide - Word      *   FILE 766\n//*                  Document                                       *   FILE 766\n//*                                                                 *   FILE 766\n//*     LSES500  -   THE Single usermod needed to install the       *   FILE 766\n//*                  entire package.                                *   FILE 766\n//*                                                                 *   FILE 766\n//*     LSES501 and LSES502  -  Required fixes for LSES500.         *   FILE 766\n//*                  Added later by Steve McColley.                 *   FILE 766\n//*                                                                 *   FILE 766\n//*     LSES500J -   Sample JCL to run the RECEIVE / APPLY          *   FILE 766\n//*                  Check / APPLY                                  *   FILE 766\n//*                                                                 *   FILE 766\n//*     JES2PARM -   Sample JES2 parms needed to implement the      *   FILE 766\n//*                  package.                                       *   FILE 766\n//*                                                                 *   FILE 766\n//*     *** Then we have the following three members - They are     *   FILE 766\n//*     *** not really part of the shared spool mods - but we       *   FILE 766\n//*     *** have been distributing them, and some folks still       *   FILE 766\n//*     *** need them.  If you want to use these, you will have     *   FILE 766\n//*     *** to apply them separately from the shared spool mods     *   FILE 766\n//*     *** - we just have the source - they are not setup as       *   FILE 766\n//*     *** usermods.                                               *   FILE 766\n//*                                                                 *   FILE 766\n//*     STSCX01A -   our version of the page seperator exit.        *   FILE 766\n//*                  (not part of ssm's)                            *   FILE 766\n//*                                                                 *   FILE 766\n//*     STSCX05B -   Prevent purging by job range. (not part of     *   FILE 766\n//*                  ssm's)                                         *   FILE 766\n//*                                                                 *   FILE 766\n//*     STSCX15A -   Causes FCBs to be reload with each job         *   FILE 766\n//*                  unless std forms.                              *   FILE 766\n//*                                                                 *   FILE 766\n//*     STSCx36A -   SAF processing for jobs coming in from         *   FILE 766\n//*                  RJE/NJE sources.                               *   FILE 766\n//*                                                                 *   FILE 766\n//*       The documentation members suffixed with a 'P' i.e.        *   FILE 766\n//*     SSMINSTP are PDF format documents.  To use them you         *   FILE 766\n//*     will need to transfer them to a PC using your favorite      *   FILE 766\n//*     file transfer program using a BINARY option - ie.  no       *   FILE 766\n//*     translation.  You will probably need to make sure they      *   FILE 766\n//*     are transferred to a new file name that ends in \".PDF\",     *   FILE 766\n//*     or you may not be able to read them.                        *   FILE 766\n//*                                                                 *   FILE 766\n//*       If you can not read PDF docs the original \"WORD\"          *   FILE 766\n//*     formatted docs are included in the members suffixed         *   FILE 766\n//*     with a W i.e. SSMINSTW.  You will probably need to          *   FILE 766\n//*     offload them to a PC file with a suffix of DOC to read      *   FILE 766\n//*     them properly.                                              *   FILE 766\n//*                                                                 *   FILE 766\n//*       The three basic pieces of documentation are -             *   FILE 766\n//*                                                                 *   FILE 766\n//*     1 The installation guide - gives background,                *   FILE 766\n//*       installation instructions, and other information          *   FILE 766\n//*       needed to setup the package.                              *   FILE 766\n//*                                                                 *   FILE 766\n//*     2 The Users Guide - gives detailed info on JECL             *   FILE 766\n//*       statements and is aimed at the end users - whoever        *   FILE 766\n//*       codes and uses JCL.                                       *   FILE 766\n//*                                                                 *   FILE 766\n//*     3 The Operations Guide - gives detailed informatin          *   FILE 766\n//*       about all of the   , new JES2 display and modify          *   FILE 766\n//*       commands avaialable with the package.                     *   FILE 766\n//*                                                                 *   FILE 766\n//*       Once you have the package set up - please drop me a       *   FILE 766\n//*        line at:                                                 *   FILE 766\n//*                                                                 *   FILE 766\n//*                SGMCCOLLEY@ALLTEL.NET  or                        *   FILE 766\n//*        STEPHEN.MCCOLLEY@SUNTRUST.BANK so that                   *   FILE 766\n//*                                                                 *   FILE 766\n//*       I can add you to the mailing list.  That way I can        *   FILE 766\n//*       let you know about bugs, fixes, and new releases as I     *   FILE 766\n//*       make the avaialable.                                      *   FILE 766\n//*                                                                 *   FILE 766\n//*       If you drop me your real mailing address, I will send     *   FILE 766\n//*       you a \"Shared Spool Mods\" coffee cup.                     *   FILE 766\n//*                                                                 *   FILE 766\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DISCL": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x07\\x01\\x07$O\\x01\\x07$O\\x15R\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-09-01T00:00:00", "modifydate": "2007-09-01T15:52:07", "lines": 14, "newlines": 14, "modlines": 0, "user": "T0SM0"}, "text": ".* *******************************************************************\n.*                                                                   *\n.*   THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *\n.* BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS*\n.* MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED *\n.* FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF  *\n.* THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE*\n.* USEFULLNESS OF THE MATERIAL.                                      *\n.*                                                                   *\n.*   WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *\n.* NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE *\n.* IN THE FUTURE.                                                    *\n.*                                                                   *\n.* *******************************************************************\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DISCLAIM": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00V\\x01\\x07#\\x9f\\x01\\x07#\\x9f\\x14G\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-08-27T00:00:00", "modifydate": "2007-08-27T14:47:56", "lines": 14, "newlines": 14, "modlines": 0, "user": "T0SM0"}, "text": "***********************************************************************\n*                                                                     *\n*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *\n*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS *\n*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED  *\n*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF   *\n*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE *\n*  USEFULLNESS OF THE MATERIAL.                                       *\n*                                                                     *\n*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *\n*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE  *\n*  IN THE FUTURE.                                                     *\n*                                                                     *\n***********************************************************************\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JES2PARM": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00Q\\x01\\x07$\\x0f\\x01\\x07%?\\t\\x10\\x00V\\x00C\\x00\\x00\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2007-08-28T00:00:00", "modifydate": "2007-09-10T09:10:51", "lines": 86, "newlines": 67, "modlines": 0, "user": "T0SM0"}, "text": "/* ***************************************************************** */\n/*                                                                   */\n/*    THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE   */\n/* BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL HOWEVER NO WARRANTY IS */\n/* MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED */\n/* FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF  */\n/* THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE*/\n/* USEFULLNESS OF THE MATERIAL.                                      */\n/*                                                                   */\n/*    WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,  */\n/* NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE */\n/* IN THE FUTURE.                                                    */\n/*                                                                   */\n/* ***************************************************************** */\n/* Note - this sample is for the Shared Spool Mods only - if you use */\n/*   any of our other exits, you need to create appropriate exit     */\n/*   and loadmod statements for them as well.  The other exits (not  */\n/*   ssm exits) are all simple and straightforward.                  */\n/* ***************************************************************** */\n /*                                                                */\n /*    First are the loadmod statements -                          */\n /*     watch for the loadmods that must be loaded to csa..        */\n /*                                                                */\nLOADMOD(STJTABS)  /*     DYNAMIC TABLE DEFINITIONS FOR JQE EXT. #JES7*/\n                 /*                                                  */\nLOADMOD(STSSMTBS) /*     DYNAMIC TABLE DEFINITIONS FOR SSMT     #JES7*/\nLOADMOD(STSCX04A)  /*   CALLS EXIT 54 ROUTINES                       */\nLOADMOD(STSCX54A) STORAGE=CSA  /*ROUTE XEQ RESNAME AND VALIDATES     */\nLOADMOD(STSCX54B) STORAGE=CSA /*  OTHER SPECIAL JECL STATEMENTS     */\nLOADMOD(STSCX05A)          /* REPEXIT AND $ADDEXIT COMMANDS ARE HERE */\nLOADMOD(STSCX06A)   /*  TURNS /*ROUTE CNTL,XX INTO SCHENV= VALUES    */\nLOADMOD(STSCX19A)  /* INITIALIZATION STMTS (FOR SSM)                 */\nLOADMOD(STSCX20A)  /*            JCT TO JQE COPY ROUTINE             */\nLOADMOD(STSCX24A)  /* POST-INITIALIZATION (FOR SSM)                  */\nLOADMOD(STSCX49A)   /* ACCEPTS OR REJECTS JES2 NEXT CHOICE OF JOBS   */\n                         /* THIS IS THE QGOT ROUTINE                 */\nLOADMOD(STSCX50A) STORAGE=CSA /* MOVE JCTX TO THE JQE EXTENSION      */\n /*                                                                */\n /*    next the exit statements - if you have exits of your own    */\n /*      you may need to alter the routine parm of the exit        */\n /*      statement, for instance if you have an exit 6 with a      */\n /*      routine name of MYEXIT6, you would change the exit        */\n /*      statement from;                                           */\n /*         exit(006) routine=(exit06a),status=enabled             */\n /*                 to                                             */\n /*         exit(006) routine=(exit06a,myexit6),status=enabled     */\n /*                                                                */\nEXIT(004) ROUTINE=(EXIT04A),STATUS=ENABLED\n              /* A = CALLS EXIT54 ROUTINES                           */\nEXIT(006) ROUTINE=(EXIT06A),STATUS=ENABLED\n                      /*6A = SETS SCHENV BASED ON ROUTE XEQ CARDS    */\nEXIT(019) ROUTINE=(EXIT19A),STATUS=ENABLED\nEXIT(024) ROUTINE=(EXIT24A),STATUS=ENABLED\n                      /* 19A = BUILDS TEMP SSMT NAME/TOKEN PAIR + CB */\n                      /* 24A = BUILDS PERM SSMT N/T PAIR             */\nEXIT(020) ROUTINE=(EXIT20A),STATUS=ENABLED\nEXIT(050) ROUTINE=(EXIT50A),STATUS=ENABLED\n                      /* 20A & 50 A COPYS JCT INFO TO JQE EXTENSION  */\nEXIT(049) ROUTINE=EXIT49A,STATUS=ENABLED\n                      /* IMPLEMENT BEFORE AFTER WITH CNTL STATEMENTS */\nEXIT(054) ROUTINE=(EXIT54A,EXIT54B),STATUS=ENABLED\n              /* A = GETS ROUTE XEQ INFO                             */\n              /* B = GETS \"BEFORE/AFTER/INFORM/HOLDFOR/TIL ETC. \"    */\n /*                                                                */\n /* finally the SSM parms -                                        */\n /*                                                                */\n /* THESE *MUST* be after the loadmod and exit statements!         */\n /*                                                                */\n /*  These are very benign parms - no smf recording,               */\n /*  before/after logic is the old traditional method,              */\n /*  no checks based on jobname, up to 256 concurrent jobs per uid* */\n /*  up to 2000 concurrent batch jobs per userid (what a laugh)     */\n /*  no limitiations by jobclass (but if it's turned on - 255/cls)  */\n /*  BATIME = 0 seconds - this will only be used if beafter is      */\n /*  changed to 'DELAY'.                                            */\n /*                                                                 */\nSSM SMFOPT=NONE,\n    SMFNUM=216,\n    BEAFTER=PREMOD,\n    BATIME=0,\n    UIDMAX=2000,\n    JBNMAX=0,\n    UIDMASK=UUUUUUUU,\n    JBNMASK=********,\n    CLASSOPT=OFF,\n    CLASSLIM(A-Z,0-9)=255\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LSES500": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x005\\x01\\x07$\\x0f\\x01\\x07%\\x0f\\x156\\x1c\\x00+!\\x00\\x00\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2007-08-28T00:00:00", "modifydate": "2007-09-07T15:36:35", "lines": 7168, "newlines": 11041, "modlines": 0, "user": "T0SM0"}, "text": "++USERMOD(LSES500)\n /* ***************************************************************\n    ** * ALL OF THE  SHARED SPOOL MODS ARE PACKAGED IN THIS    * **\n    ** *           SINGLE USERMOD  -                           * **\n    ** *                                                       * **\n    ** * IF YOU NEED EXITS 1A, 15A, OR 36A - THEIR SOURCE IS   * **\n    ** * PROVIDED SEPERATELY IN THE DISTRIBUTION PDS.          * **\n    ** *                                                       * **\n    ** * ** NOTE ** ! ! !                                      * **\n    ** *                                                       * **\n    ** *  SET the   FMID = HJE7720 for jes2 1.7                * **\n    ** *  set the   FMID = HJE7730 for jes2 1.8                * **\n    ** *    (you knew that though...)                          * **\n    ** *                                                       * **\n    ** * ** NOTE ** ! ! ! ! !                                  * **\n    ** * DO NOT RENUMBER THIS MEMBER - IF MAINTENANCE IS       * **\n    ** * NEEDED FOR THIS CODE IT MAY BE PROVIDED AS A USERMOD  * **\n    ** * THAT WILL REQUIRE LINE NUMBERS TO BE CONSISTENT WITH  * **\n    ** * THE NUMBERS THAT ARE CURRENTLY IN THIS MEMBER ! !     * **\n    ** *                                                       * **\n    ***************************************************************\n    */ .\n++VER(Z038) FMID(HJE7720)     .\n++MAC(BOOLEAN)  SYSLIB(SHASMAC) DISTLIB(AHASMAC) DISTMOD(AHASMOD)\n               ASSEM(STJTABS,STSCX54B,STSC2050,STSCX49A) .\n         MACRO\n         BOOLEAN &B\n.*\n.* sample invocation:     label1  boolean  flag1,(d1fil1,d1fil2,f3,f4)\n.*                        equated fields are filled from x'80' to x'01'\n.*                        with names from first to last in parens\n.*\n.* *******************************************************************\n.*                                                                   *\n.*   THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *\n.* BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS*\n.* MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED *\n.* FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF  *\n.* THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE*\n.* USEFULLNESS OF THE MATERIAL.                                      *\n.*                                                                   *\n.*   WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *\n.* NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE *\n.* IN THE FUTURE.                                                    *\n.*                                                                   *\n.* *******************************************************************\n         GBLC  &SWN(100)\n         GBLC  &SWB(800)\n         GBLA  &SWA(800)\n         GBLA  &SW1\n         GBLA  &SW2\n         LCLC  &OP1\n         LCLC  &OP2\n         LCLC  &SWL\n         LCLA  &NM\n         LCLA  &NN\n         LCLC  &TEMP\n         AIF   (N'&SYSLIST NE 2).SW0010\n&OP1     SETC  '&SYSLIST(1)'\n&OP2     SETC  '&SYSLIST(2)'\n         AGO   .SW0040\n.SW0010  ANOP\n         MNOTE 8,'BOOLEAN01 - TWO PARAMETERS MUST BE USED ON \"BOOLEAN\" *\n               MACRO (THE FIRST MAY BE NULL)'\n         MEXIT\n.SW0040  ANOP\n         AIF   (N'&SYSLIST(2) GT 8).SW0070\n         AIF   (N'&SYSLIST(2) LT 1).SW0080\n&NM      SETA  1\n&SWL     SETC  '&OP1'\n&SW1     SETA  &SW1+1\n&SWN(&SW1) SETC '&SWL'\n***** START OF SWITCH BYTE *****\n         AIF   ('&SWL' EQ '').SW0050\n&SWL     DS    X'00'\n.SW0050  ANOP\n         AIF   (K'&SYSLIST(2,&NM) LT 1).SW0090\n&SWL     SETC  '&SYSLIST(2,&NM)'\n         AIF   (&NM EQ 1).SW00580\n         AIF   (&NM EQ 2).SW00540\n         AIF   (&NM EQ 3).SW00520\n         AIF   (&NM EQ 4).SW00510\n         AIF   (&NM EQ 5).SW00508\n         AIF   (&NM EQ 6).SW00504\n         AIF   (&NM EQ 7).SW00502\n&TEMP    SETC  'X''01'''\n         AGO   .SW0050A\n.SW00502 ANOP\n&TEMP    SETC  'X''02'''\n         AGO   .SW0050A\n.SW00504 ANOP\n&TEMP    SETC  'X''04'''\n         AGO   .SW0050A\n.SW00508 ANOP\n&TEMP    SETC  'X''08'''\n         AGO   .SW0050A\n.SW00510 ANOP\n&TEMP    SETC  'X''10'''\n         AGO   .SW0050A\n.SW00520 ANOP\n&TEMP    SETC  'X''20'''\n         AGO   .SW0050A\n.SW00540 ANOP\n&TEMP    SETC  'X''40'''\n         AGO   .SW0050A\n.SW00580 ANOP\n&TEMP    SETC  'X''80'''\n.SW0050A ANOP\n&SWL     EQU   &TEMP\n&NM      SETA  &NM+1\n&SW2     SETA  &SW2+1\n&SWB(&SW2) SETC '&SWL'\n&SWA(&SW2) SETA &SW1\n         AIF   (&NM LE N'&SYSLIST(2)).SW0050\n*****  END OF SWITCH BYTE  *****\n         MEXIT\n.SW0070  ANOP\n         MNOTE 8,'BOOLEAN02 - 8 IS THE MAXIMUM NUMBER OF BIT NAMES ALLO*\n               WED'\n         MEXIT\n.SW0080  ANOP\n         MNOTE 8,'BOOLEAN03 - AT LEAST 1 BIT NAME MUST BE SPECIFIED'\n         MEXIT\n.SW0090  ANOP\n&TEMP    SETC  '&NM.TH'\n         AIF   (&NM GT 3).SW0090C\n         AIF   (&NM EQ 1).SW0090A\n         AIF   (&NM EQ 2).SW0090B\n&TEMP    SETC  '3RD'\n         AGO   .SW0090C\n.SW0090A ANOP\n&TEMP    SETC  '1ST'\n         AGO   .SW0090C\n.SW0090B ANOP\n&TEMP    SETC  '2ND'\n.SW0090C ANOP\n         MNOTE 8,'BOOLEAN04 - THE &TEMP PARAMETER OF THE BIT NAME LIST *\n               IS INVALID'\n         MEND\n++MAC($STJCTX)  SYSLIB(SHASMAC) DISTLIB(AHASMAC) DISTMOD(AHASMOD)\n               ASSEM(STJTABS,STSCX54B,STSC2050,STSCX49A) .\n         MACRO  - $STJCTX -- JCT EXTENTION\n&LABEL   $STJCTX\n.* *******************************************************************\n.*                                                                   *\n.*   THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *\n.* BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS*\n.* MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED *\n.* FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF  *\n.* THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE*\n.* USEFULLNESS OF THE MATERIAL.                                      *\n.*                                                                   *\n.*   WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *\n.* NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE *\n.* IN THE FUTURE.                                                    *\n.*                                                                   *\n.* *******************************************************************\n.*********************************************************************\n.*                                                                   *\n.* FUNCTION: MAPPING MACRO FOR JCT EXTENTION.                        *\n.*                                                                   *\n.* REVISION HISTORY:                                                 *\n.*                                                                   *\n.*   DATE   NAME         DESCRIPTION OF CHANGE                       *\n.* -------- ------------ ---------------------------------------------*\n.* 04/20/00 S MCCOLLEY   ADDED THIS COMMENT BLOCK. *                  *\n.* 11/13/03 S MCCOLLEY   ADDED CONDITIONAL EXPANSION OF $JCTX *       *\n.* 08/18/06 S MCCOLLEY   ADDED VRM FIELD - TO AIDE OTHERS IN DEBUGGING*\n.* 10/11/06 S MCCOLLEY   ADDED NEW JCX AND BERT FIELDS FOR UPGRADE    *\n.* 10/11/06 S MCCOLLEY   ADDED COMMON DSECT FOR ECSA AREA - HOLDS THE *\n.*                            VALUES FOR NEW PARMS -SMF#, WAITS ETC.  *\n.* *                                                                  *\n.**********************************************************************\n         LCLC  &JCXOK\n&JCXOK   SETC  T'JCXORG                     GET THE TYPE FOR JCXORG\n         AIF   ('&JCXOK' NE 'U').STNXPND      ** IF NOT DEFINED ADD IT\n         $JCTX\n.STNXPND ANOP\nSTJCTX   DSECT\n*\n* STSC EXTENSION OF THE JCT TO BE USED FOR ALL EXITS\n*\n         DS    XL(JCXORG-JCTX)     DEFINE REQUIRED $JCTX PREFIX AREA\n*\nUJCXMFLG DS    XL1                 RESOURCE ROUTING FLAGS\nUJCXAFT  EQU   B'00000001'           /*AFTER  SPECIFIED\nUJCXBEF  EQU   B'00000010'           /*BEFORE SPECIFIED\nUJCXCNTL EQU   B'00000100'           /*CNTL   SPECIFIED\nUJCXWITF EQU   B'00001000'           /*WITH   SPECIFIED\n*              B'11110000'           # OF /*CNTL NAMES PRESENT\n*\n*                                  i.e. what type cards are present\n        BOOLEAN UJCXUFLG,(UJCXXVRM,UJCXXEYE)\n*--UJCXXVRM  VRM FIELD IS PRESENT\n*--UJCXXEYE  EYECATCHER IS PRESENT- it also indicates a new format rec.\nUJCXDLYS DS    X                   JOB DELAY REASONS FROM OUR EXIT 49\n*\nUJCXWITH DS    CL8                 SAVE A WITH NAME HERE\nUJCXAFTN DS    CL8                 SAVE AN AFTER NAME HERE\nUJCXBFOR DS    CL8                 SAVE A BEFORE NAME HERE\nUJCXDNAM DS    CL45                NAMES FROM CNTL CARDS AND THEIR     X\n                                    SHARE TYPES - CL8=NAME, FOLLOWED BYX\n                                    1 BYTE OF TYPE CL8RESNAME, CL1TYPE\n*\n         DS    0H                  DOUBLE WORD ALLIGN\n*\n*\n*** NOTE ! ! ***  the old version had the 4 byte work field where we\n*            ***  now keep the VRM field - that way we can safely test\n*            ***  for a VRM value - old versions won't have a vrm, but\n*            ***  there will be a data area so we won't get an abend\n*            ***  when checking for one.\n*            ***  This is just a safeguard, since we will also check\n*            ***  to see if the VRM and EYECATCHER flags are on before\n*            ***  trying to use any of the new fields.\n*\nUJCXVRM  DS    XL4                 VRM AREA X'00VVRRMM' USEFUL ID INFO\n*\n*\n*  NEW fields from here on down... (ujcxwork and ujcxvrm were swapped)\n*\n*\nUJCXWORK DS    CL4                 UNUSED, BUT KEPT FOR COMPATABILITY\n*\nUJCXID   DS    CL4                 EYECATCHER CL4'JCX' JCT EXTENSION\n** *************************************************************** **\n** *************************************************************** **\n**                           **                                    **\n**                           **                                    **\n** SSM  SHARED SPOOL MODS - NEW FUNCTION ZOS 1.8 11/06 START THERE **\n**                                                                 **\n** *************************************************************** **\n*\n*\n*/* FLAGS BYTE     - SUPPORT FOR WAITFOR AND WAITTILL\n*\n      BOOLEAN UJCWATF,(UJCWATT,UJCWATFR,UJCWATTS,UJCWATFS,UJCWALLS)\n*\n*-- UJCWATT      WAIT UNTIL TIME SPECIFIED\n*-- UJCWATFR     WAIT FOR TIME SPECIFIED\n*-- UJCWATTS     WAIT UNTIL IS SATISFIED\n*-- UJCWATFS     WAIT FOR TIME IS SATISFIED\n*-- UJCWALLS     ALL WAIT TIMES ARE NOW SATISFIED\n*\n       BOOLEAN UJCTAPF1,(UJCTPANY,UJCTAPNON)\n*\n*-- UJCTPANY     SET IF ANY TAPES ARE REQUIRED\n*-- UJCTPNON     SET WHEN NO MORE TAPES ARE NEEDED\n*\n*/* FLAGS BYTE     - misc. support member routing - noauto and without\n*\n       BOOLEAN UJCMSCF1,(UJCMSWOJ,UJCMSNOT,UJCMSMEM,UJCMSNMM)\n*\n*-- UJCMSWOJ     WITHOUT JOBNAME SPECIFIED\n*-- UJCMSNOT     NO AUTO RESOURCE ROUTING THIS JOB\n*-- UJCMSMEM     OK MEMBER ROUTING PRESENT\n*-- UJCMSNMM     NOT OK MEMBER ROUTING PRESENT\n*\nUJCOPNF  DS    XL1                 AN OPEN UNUSED FLAG BYTE\n*\n* FIELDS FOR /*HOLDTIL HH:MM:SS  CARDS\n*\n*  ALL TIME VALUES ARE BIN EQUIVELENT TIME VALUES\n*\nUJCHLDU  DS    XL4                 USER REQUESTED HOLD UNTIL TIME\n*                                   x'hhmmss0f' is the format\nUJCHLDUX DS    XL4                 TIME / DATE HOLD TILL IS SATISFIED\n*                                   STCK TIME FORMAT OR STKE+1(4)\n*\n* SUPPORT /*HOLDFOR HH:MM:SS  CARDS\n*\nUJCHLDF  DS    XL4                 USER REQUESTED HOLD FOR TIME\n*                                   x'hhmmss0f' is the format\nUJCHLDFX DS    XL4                 TIME / DATE hoLDFOR IS SATISFIED\n*                                   STCK TIME FORMAT OR STKE+1(4)\n*\nUJWIOUT  DS    CL8                 SUPPORT FOR /*WITHOUT JOBNAME\n*\n*    LIMIT JOB SELECTION BASED ON A MAS MEMBER NAME(S)\n*\n*\nUJMMTQE  DS    XL1                 BIT MAPPED BYTE SHOWS WHICH MEMBERS\n*                                  OF THE MAS HAD $STIMERS ISSUED FOR\n*                                  THE CURRENT WAIT REASON -\n*                                  MEMBER 1 =B'XXXX XXX1'\n*                                  MEMBER 4 =B'XXXX 1XXX' ETC. ETC.\n*\nUJMMSTK  DS    8XL4                ROOM FOR 8 STCK VALUES FROM 8 MEMBER\n*                                  MEMBER STARTUP TIMES, USED WITH\n*                                  STTQEX AND $STIMER, AND UBRMMTQE.\nUJRSVD   DS    XL31                RESERVED, CURRENTLY UNUSED SPACE.\n*\nUJCXSLN1 EQU   *-STJCTX            LENGTH OF SECTION\n*\n         MEND\n++MAC($STQNAME) SYSLIB(SHASMAC) DISTLIB(AHASMAC) DISTMOD(AHASMOD)\n               ASSEM(STJTABS,STSC2050,STSCX54B,STSCX49A) .\n         MACRO -- $STQNAME -- SUNTRUSTS JQE EXTENSION\n&LABEL   $STQNAME &DSECT=YES\n.*\n.* *******************************************************************\n.*                                                                   *\n.*   THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *\n.* BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS*\n.* MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED *\n.* FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF  *\n.* THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE*\n.* USEFULLNESS OF THE MATERIAL.                                      *\n.*                                                                   *\n.*   WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *\n.* NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE *\n.* IN THE FUTURE.                                                    *\n.*                                                                   *\n.* *******************************************************************\n.**********************************************************************\n.*\n.* FUNCTION: DEFINE A BERT, AN EXTENSION TO THE JQE.\n.*\n.* NOTES:    THIS BERT ENTRY CONTAINS ALL THE FIELDS WE USED TO\n.*           INCLUDE INTO THE $JQE MACRO PRIOR TO OS/390.\n.*\n.*           SOME OF THESE FIELD MUST BE IDENTICALLY DEFINED AND USED\n.*           IN THE JCTX: UBRDNAME, UBRUFLAG, UBRMFLAG, UBRDLAYS.\n.*\n.*\n.* REVISION HISTORY:\n.*\n.*   DATE   NAME         DESCRIPTION OF CHANGE\n.* -------- ------------ ----------------------------------------------\n.* 04/20/00 S MCCOLLEY   INITIAL VERSION -- FOR OS/390 2.6.\n.*\n.**********************************************************************\n.*\nSTQNAME  DSECT ,\n*\n* UBRDNAME IS THE LIST OF AFTER/BEFORE JOBNAMES AND/OR CNTL RESOURCES\n*          AND THE /*CNTL SHARE TYPE (\"S\" OR \"E\").  THESE SHARE TYPE\n*          BYTES IMMEDIATELY FOLLOW THE RESOURCE NAME.\n*\n*   AFTER   (IF ANY) MUST BE FIRST  (SEE UBRAFT).\n*   BEFORE  (IF ANY) MUST BE SECOND (SEE UBRBEF).\n*   CNTL(S) (IF ANY) MUST BE LAST   (SEE UBRCNTL AND 4 HIGH ORDER BITS\n*           OF UBRMFLAG.  THERE CAN BE UP TO 4 CNTL NAMES.)\n*\nUBRWITH  DS    CL8                 PLACE TO HOLD A /*WITH NAME\nUBRAFTR  DS    CL8                 PLACE TO HOLD A /*AFTER NAME\nUBRBFOR  DS    CL8                 PLACE TO HOLD A /*BEFORE NAME\nUBRDNAME DS    CL45                NAMES FROM CNTL CARDS AND SHARE TYPES\n                                   CL8(RESNAME)+CL1(TYPE) TYPE=S\u00a6E\u00a6P\nUBRDNAML EQU   9                   LENGTH OF EACH NAME/SHARE TYPE FIELD\n*\n*                               UBRUFLAG WAS ** UNUSED ** BEFORE 1.7\n        BOOLEAN UBRUFLAG,(UBRXXVRM,UBRXXEYE)\n*-- UBRXXVRM  VRM FIELD IS PRESENT\n*-- UBRXXEYE  EYECATCHER IS PRESENT\n*\n*\nUBRMFLAG DS    BL1                 RESOURCE FLAGS\nUBRAFT   EQU   B'00000001'           /*AFTER  SPECIFIED\nUBRBEF   EQU   B'00000010'           /*BEFORE SPECIFIED\nUBRCNTL  EQU   B'00000100'           /*CNTL   SPECIFIED\nUBRWITHF EQU   B'00001000'           /*WITH   SPECIFIED\n*              B'11110000'           # OF /*CNTL NAMES PRESENT\n*\nUBRNCTL  EQU   X'08'               MAX # OF NAMES INCLUDING\n*                                    /*AFTER, /*BEFORE, AND  /*CNTL\n*\n*\nUBRDLAYS DS    BL1                 DELAY REASONS FROM OUR EXIT 49.  .\n*\n*  THE - UBRXXVRM BIT IS NEW - IT WAS UNUSED BEFORE AND WILL BE TESTED\n* BEFORE TRYING TO ACCESS ANY OF THE NEW EXPANDED FIELDS.  IT IS\n* SIMPLY A BIT USED FOR COMPATIBILITY AS WE EXPAND THE EXTENSIONS FOR\n* NEW FUTURE FUNCTION AND ADD VRM FIELDS AT THE JES2 1.7 LEVEL.\n*\n*\n*\nUBRDLWIT EQU   X'01'                /*WITH CONTENTION DELAY\nUBRDLWIO EQU   X'02'                /*WITHOUT  CONTENTION (RESUSED)\nUBRDLWFR EQU   X'03'                TIMING DELAY HOLDTIL/FOR (REUSD\nUBRDLWTL EQU   X'04'                TIMING DELAY HOLDTIL/FOR (REUSD\nUBRDLWTG EQU   X'05'                 GENERAL PURPOSE WAIT\nUBRDLDUP EQU   X'06'                HOLD/DUP   CONTENTION\nUBRDLAFT EQU   X'07'                /*AFTER    CONTENTION\nUBRDLBEF EQU   X'08'                /*BEFORE   CONTENTION\nUBRDLCTL EQU   X'09'                /*CNTL     CONTENTION\nUBRDLCLS EQU   X'0A'                CLASS LIMIT REACHED\nUBRDLJNM EQU   X'0B'                JOBNAME MASK LIMIT HAS BEEN REACHED\nUBRDLSEL EQU   X'0C'                JOB HAS BEEN SELECTED - NO DELAY\nUBRDLUID EQU   X'0D'                UID MASK LIMIT REACHED\n*                                  SET TO MATCH THE UJCXWORK WORK AREA\nUBRVRM   DS    XL4                X'00VVRRMM' (VRM) 1.7.0\n*\nUBRVRML  EQU   00010700            THE VRM VALUE\nUBRXID   DS    CL4                EYECATCHER CL4'JQEX'  JQE BERT EXT.\n\n       BOOLEAN UBRWATF,(UBRWATT,UBRWATFR,UBRWATTS,UBRWATFS,UBRWALLS)\n*\n*-- UBRWATT    WAIT UNTIL TIME SPECIFIED\n*-- UBRWATFR   WAIT FOR TIME SPECIFIED\n*-- UBRWATTS   WAIT UNTIL IS SATISFIED\n*-- UBRWATFS   WAIT FOR TIME IS SATISFIED\n*-- UBRWALLS   ALL WAIT TIMES ARE NOW SATISFIED\n*\n       BOOLEAN UBRTAPF1,(UBRTPANY,UBRTAPNON)\n*\n*-- UBRTPANY   SET IF ANY TAPES ARE REQUIRED\n*-- UBRTPNON   SET WHEN NO MORE TAPES ARE NEEDED\n*\n*/* FLAGS BYTE     - SUPPORT FOR THIS AND THAT - LEFT OVERS\n*\n       BOOLEAN UBRMSCF1,(UBRMSWOJ,UBRMSNOT,UBRMSMEM,UBRMSNMM,          X\n               UBRSABEF,UBRSAAFT)\n*\n*-- UBRMSWOJ   WITHOUT JOBNAME SPECIFIED\n*-- UBRMSNOT   NO AUTO RESOURCE ROUTING THIS JOB\n*-- UBRMSMEM   OK MEMBER ROUTING PRESENT\n*-- UBRMSNMM   NOT OK MEMBER ROUTING PRESENT\n*-- UBRSABEF   POSITIVE ACKNOLEDGEMENT OF BEFORE IS SATISFIED.\n*-- UBRSAAFT   POSITIVE ACKNOLEDGEMENT OF AFTER IS SATISFIED.\n*\n*\nUBROPNF1 DS    XL1                 AN OPEN FLAG - FOR ALIGNMENT\n*\n*\n*\n* FIELDS FOR /*HOLDTIL HH:MM:SS VALUES\n*\n*  ALL TIME VALUES ARE BIN EQUIVELENT TIME VALUES\n*\nUBRHLDU  DS    CL4                 USER REQUESTED HOLD UNTIL TIME\n*                                   x'hhmmss0f' is the format\nUBRHLDUX DS    XL4                 DATE/TIME HOLDTIL WILL BE SATISFIED\n*                                   STCK TIME FORMAT OR STKE+1(4)\n*\n* SUPPORT /*HOLDFOR HH:MM:SS  CARDS\n*\nUBRHLDF  DS    CL4                 USER REQUESTED HOLD FOR TIME\n*                                   x'hhmmss0f' is the format\nUBRHLDFX DS    XL4                 DATE/TIME HOLDFOR WILL BE SATISFIED\n*                                   STCK TIME FORMAT OR STKE+1(4)\n*\nUBRWIOUT DS    CL8                 SUPPORT FOR /*WITHOUT JOBNAME\n*\n*    LIMIT JOB SELECTION BASED ON A MAS MEMBER NAME(S)\n*\n*\n\nUBRMMTQE DS    XL1                 BIT MAPPED BYTE SHOWS WHICH MEMBERS\n*                                  OF THE MAS HAD $STIMERS ISSUED FOR\n*                                  THE CURRENT WAIT REASON -\n*                                  MEMBER 1 =B'XXXX XXX1'\n*                                  MEMBER 4 =B'XXXX 1XXX' ETC. ETC.\n*\nUBRMMSTK DS    8XL4                ROOM FOR 8 STCK VALUES FROM 8 MEMBER\n*                                  MEMBER STARTUP TIMES, USED WITH\n*                                  STTQEX AND $STIMER, AND UBRMMTQE.\nUBRRSVD  DS    XL31                RESERVED, CURRENTLY UNUSED SPACE.\n*\n*\nSTQNAMELN EQU  *-STQNAME           LENGTH OF THE BERTIE\n*\n         MEND\n++MAC($SSMTB)   SYSLIB(SHASMAC) DISTLIB(AHASMAC) DISTMOD(AHASMOD)\n      ASSEM(STJTABS,STSCX49A,STSCX54B,STSCX19A,STSCX24A,STSSMTBS) .\n         MACRO - $SSMTB - SunTrust Common ECSA area for SSM controls\n.* *******************************************************************\n.*                                                                   *\n.*   THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *\n.* BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS*\n.* MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED *\n.* FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF  *\n.* THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE*\n.* USEFULLNESS OF THE MATERIAL.                                      *\n.*                                                                   *\n.*   WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *\n.* NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE *\n.* IN THE FUTURE.                                                    *\n.*                                                                   *\n.* *******************************************************************\n.**********************************************************************\n.*\n.* $SSMTB - our SSM table area, referenced through a Name/Token pair.\n.* The name used to get our token changes depending on whether JES2\n.* has fully initialized:  at first, it is the literal SSMTEMP- plus\n.* the JES2 ASID, but after initialization, it is SSM plus the local\n.* XCFGRPNM.  The token is laid out as follows (16 bytes long):\n.*\n.*       AL4   A($SSMTB)\n.*       CL4   =C'SSMT'\n.*       AL4   A($SSMTB- BACKUP)\n.*       AL4   OPEN FOR NOW - OR - C'SSMT'\n.*\n.**********************************************************************\n&LABEL   $SSMTB\nSSMTB    DSECT  ,\n* SSMT Identification information\nSSMLEN   DS     F                  length of table\nSSMEYE   DS     CL4                eyecatcher  \"SSMT\"\nSSMVRM   DS     XL4                version numeric X'00VVRRMM'\nSSMUPCEC DS     F                  POINTER TO FIRST OF OUR TQEX PCE'S\nSSMPCEDH EQU    (SSMUPCEC-SSMTB)   DISPLACEMENT TO USER PCE HEAD PTR\nSSMUPCEK DS     F                  COUNTS FOR OUR TQEX PCES\n*                                  1ST XL2 = #DEFINED, 2ND XL2 = #ACTIV\nSSMPCEDK EQU    (SSMUPCEK-SSMTB)   DISPLACEMENT TO USER PCE COUNTS\n*\nSSMTQCB1 DS     F                  POINTER TO FIRST TQE CONTROL BLOCK\n*\n* Global SSM controls\n*\nSSMSMFNM DS     B                  SMF record number (0-255)\n*\nSSMSMFOP DS     CL1                SMF option:\nSSMSMF_ALL      EQU  C'A'             All\nSSMSMF_INPUT    EQU  C'I'             Input\nSSMSMF_ACTION   EQU  C'X'             Action\nSSMSMF_NONE     EQU  C' '             None\n*\n         DS     B                  open/reserved byte\n*\nSSMALLWS DS     B                  Allow $S commands (on/off)\nSSMALLWS_ON     EQU  X'FF'            allow\nSSMALLWS_OFF    EQU  X'00'            do not allow (default)\n*\nSSMCLSOP DS     B                  Limit by class (use/do not use)\nSSMCLSOP_ON     EQU  X'FF'            use limit\nSSMCLSOP_OFF    EQU  X'00'            use limit\n*\nSSMBEAFT DS     CL1                Before/After processing:\nSSMBEAFT_POS    EQU  C'P'             Positive - future option only!\nSSMBEAFT_DELAY  EQU  C'D'             Delay\nSSMBEAFT_PREMOD EQU  C' '             Pre-modification behaviour\nSSMBATIM DS     H                  Before/After time (for delay)\n*\nSSMUIDMX DS     H                  Userid Max (1-4096)\nSSMUMASK DS     BL2                Userid Mask (bit representation)\n         ORG    SSMUMASK\nSSMUMHI  DS     B                     first four characters\nSSMUMLO  DS     B                     last four characters\n*\nSSMJBNMX DS     H                  Jobname Max (1-4096)\nSSMJMASK DS     BL2                Jobname Mask (bit representation)\n         ORG    SSMJMASK\nSSMJMHI  DS     B                     first four characters\nSSMJMLO  DS     B                     last four characters\n*\nSSMUMSKC DS     CL8                Userid Mask (characters)\nSSMJMSKC DS     CL8                Jobname Mask (characters)\n*\nSSMMSK1         EQU  C'U'             represent U as 1 bit\nSSMMSK0         EQU  C'*'             represent * as 0 bit\n*\n*\nSSMCLSLM DS     100Y               Class limit table\nSSMCLSEN        EQU  SSMCLSLM,2,C'Y'  Class limit entry\nSSMCLSLN        EQU  *-SSMCLSLM       length of limit table\nSSMCLSNO        EQU  (SSMCLSLN/L'SSMCLSEN)  # of entries\n*\nSSMTBLEN EQU    ((((*-SSMTB)+7)/8)*8)    actual length (in doublewds)\n         MEND\n++MAC($STTQE)  SYSLIB(SHASMAC) DISTLIB(AHASMAC) DISTMOD(AHASMOD)\n         ASSEM(STJTABS,STSCX49A).\n         MACRO\n&LABEL   $STTQE  &DSECT=YES\n         AIF   ('&DSECT' NE 'YES').NDS1\nSTTQE    DSECT\n.NDS1    ANOP\n.* *******************************************************************\n.*                                                                   *\n.*   THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *\n.* BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS*\n.* MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED *\n.* FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF  *\n.* THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE*\n.* USEFULLNESS OF THE MATERIAL.                                      *\n.*                                                                   *\n.*   WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *\n.* NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE *\n.* IN THE FUTURE.                                                    *\n.*                                                                   *\n.* *******************************************************************\n.**********************************************************************\n.* THIS MACRO EXPANSION MAPS A STTQEX - TQE EXTENSION - ONE IS\n.*  OBTAINED ( SOMEHOW ) WHEN NEEDED BY EXIT49A - WHEN A JOB IS\n.*  REJECTED FOR A TIME RELATED REASON (HOLDFOR, GENERAL BEAFT/ ETC)\n.*   LOOKS LIKE ABOUT 24 BYTES WITH AT JES2 1.7\n.**********************************************************************\nSTTQFP   DS    F                   FORWARD POINTER\nSTTQBK   DS    F                   BACKWARD POINTER\nSTTQTQE  DS    XL16                LENGTH OF THE JES2 TQE +4 J.I.Case\nSTTQLEN  EQU   *-STTQFP            LENGTH OF THE ENTIRE CONTROL BLOCK\n         MEND\n++MAC($STTQEXW) SYSLIB(SHASMAC) DISTLIB(AHASMAC) DISTMOD(AHASMOD)\n         ASSEM(STJTABS).\n         MACRO\n&LABEL   $STTQEXW &DSECT=YES\n         AIF   ('&DSECT' EQ 'NO').NDS1\nSTTQEXW  DSECT\n.NDS1    ANOP\n.* *******************************************************************\n.*                                                                   *\n.*   THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *\n.* BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS*\n.* MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED *\n.* FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF  *\n.* THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE*\n.* USEFULLNESS OF THE MATERIAL.                                      *\n.*                                                                   *\n.*   WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *\n.* NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE *\n.* IN THE FUTURE.                                                    *\n.*                                                                   *\n.* *******************************************************************\n.**********************************************************************\n.* THIS MACRO EXPANSION MAPS A WORK AREA EXTENSION FOR THE STTQEPCE\n.*  THE TQE (TIMER QUEUE) PCE.  THERE IS ONE FOR EACH PCE OF THIS TYPE.\n.**********************************************************************\nSTTXNTN  DS    CL16                NAME/TOKEN PAIR - NAME VALUE\nSTTXNTT  DS    CL16                NAME/TOKEN PAIR - TOKEN VALUE\nSTTXDBL1 DS    D                   DOUBLE WORD TO SAVE $STCK VALUE IN\nSTTXLSAT DS    F                   WORK AREA - LOWEST SATISFIED TIME\nSTTXLSPT DS    F                   POINTER TO STTQE WITH LOWEST TIME\nSTTXLEN  EQU   *-STTXNTN           LENGTH OF THE ENTIRE PCE WORK AREA\n$DRTQEX  EQU   63                  DISPATCHER STTQE RESOURCE\nTQEX     EQU   255                 ID OF PCE\n         MEND\n++MAC(STPCSMFD) SYSLIB(SHASMAC) DISTLIB(AHASMAC) DISTMOD(AHASMOD)\n         ASSEM(STJTABS,STSCX54B,STSCX49A).\n         MACRO\n&LAB1    STPCSMFD &DSECT=N,&JES2=N\n         AIF   ('&DSECT' NE 'Y').NDS1\nSTPCSMFD DSECT\n.NDS1    ANOP\n         AIF   ('&LAB1' EQ '').LBL2\n&LAB1    EQU   *\n.LBL2    ANOP\n.*\n.*\n         AIF   ('&JES2' EQ 'N').NJS1\n         SPACE 2\nSMFXXJES DS    CL8                 PREFIX FOR JES2 CHAINING AREA\n.NJS1    ANOP\n.*\n.* *******************************************************************\n.*                                                                   *\n.*   THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *\n.* BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS*\n.* MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED *\n.* FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF  *\n.* THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE*\n.* USEFULLNESS OF THE MATERIAL.                                      *\n.*                                                                   *\n.*   WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *\n.* NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE *\n.* IN THE FUTURE.                                                    *\n.*                                                                   *\n.* *******************************************************************\n.*\n** * ------------------------------------------------------------- * **\n** * -- THIS GROUP OF DS'S IS INTEDED TO BE USED AS PART OF AN  -- * **\n** * -- EXISTING DSECT, TO DESCRIBE AN SMF BUFFER FOR RECORD    -- * **\n** * -- TYPE 216 (D8) TECH SUBTYPED SMF RECORDS.                -- * **\n** * ------------------------------------------------------------- * **\nSMFBASE  EQU   *                   USE THIS LABEL FOR USING - NON JES2\nSMFXLEN  DS    XL2                LRECL INCLUDING RDW\nSMFXSEG  DS    XL2                SEGMENT - ALWAYS ZEROS\nSMFXFLG  DS    XL1                B'0101 1110' INDICATES SUBTYPES\nSMFXRTY  DS    XL1                SMF RECORD TYPE = 216 = X'D8'\nSMFXTME  DS    XL4                TIME SINCE MIDNIGHT IN 1/100TH SEC.\n*  TOD, USING FORMAT FROM TIME MACRO WITH BIN. INTVL\nSMFXDTE  DS    PL4                X'01YYDDDF'\n*  DATE IN PACKED DECIMAL FORM: 01YYDDDF\nSMFXSID  DS    XL4                SYSID FROM ( SID )\nSMFXSSI  DS    XL4                SUBSYS ID  (SSID = TECH) OR BLANKS\nSMFXSTY  DS    XL2                RECORD SUBTYPE X'01'-X'FF'\n*                 ****  PROGRAM EXECUTION TRACKING SUBTYPES  ****\n*                         X'01' = TECH PGM EXECUTION\n*                         X'02' = TECH PGM EXECUTION DUP LIB.\n*                         X'03' = TECH PGM EXECUTION DUP LIB.\n*                         X'04' = TECH PGM EXECUTION DUP LIB.\n*                         X'05' = TECH PGM EXECUTION DUP LIB.\n*                 ****  S.S.M. = SHARED SPOOL MODS SUBTYPES  ****\n*                         X'40' = SSM REJECTION INFORMATION\n*                         X'41' = SSM JOB PASSED SELECTION\n*              FUTURE     X'42' = SSM OPERATOR ACTIONS ($T CMDS)\n*                         X'43' = $SJ - ALLOWED OR REJECTED\n*                         X'44' = SSM JECL CARD ACCEPTED\n*              FUTURE     X'45' = SSM JECL CARD REJCTED JCL ERROR\n*                         X'46' = SSM JOB SELECTION REDRIVEN\n*              FUTURE     X'47' = JES2 SSM PARM ACCEPTED\n*              FUTURE     X'48' = RESERVED FOR SSM\n*              FUTURE     X'49' = RESERVED FOR SSM\nSMFXNUMT DS    XL2                NUMBER OF TRIPLETS (SUBTYPES 1-5= 2)\n*\nSMFXRESV DS    XL2                LENGTH OF SELF-DEFINING SECTION\n*** SELF-DEFINING SECTION ***\n* - FIRST TRIPLET - PRODUCT SECTION\nOFFPRD01 DS    XL4                OFFSET FROM RDW TO PROD. SECTION\nLENPRD01 DS    XL2                LENGTH OF PRODUCT SECTION\nNUMPRD01 DS    XL2                NUMBER OF PRODUCT SECTIONS\n* - SECOND TRIPLET - SUBTYPED DATA SECTION\nOFFTEC01 DS    XL4                OFFSET FROM RDW TO SUBTYPED DATA\nLENTEC01 DS    XL2                LENGTH OF SUBTYPED SECTION\nNUMTEC01 DS    XL2                NUMBER OF SUBTYPED SECTIONS\n*\nSDSEND   EQU   *                  END OF SELF DEFINING SECTION\nSMFD8SSD EQU   SDSEND-OFFPRD01    EQU'D LEN OF SELF DEFINING ssm SECT.\nSMFD8TSD EQU   SDSEND-OFFPRD01    EQU'D LEN OF SELF DEFINING tech SECT.\n*\n* THE PRODUCT SECTION FOR USE WITH TECH SUBSYSTEM GOES HERE\n*\nPRDOFT   EQU   *-SMFXLEN          OFFSET TO TECH PRODUCT SECTION\nSMFD8TTY DS    XL2                SUBTYPE - 01 FOR PGM EXECUTION\nSMFD8TVN DS    CL2                VERSION # C'01'\nSMFD8TNM DS    XL16               C'TECH SUBSYSTEM  '\nPRDLENT  EQU   *-SMFD8TTY         LENGTH OF THE PRODUCT SECTION\n*\n* THE SUBTYPED TECH SUBSYSTEM DATA GOES IN HERE\n*\nSTDOFT   EQU   *-SMFXLEN          OFFSET TO SUBTYPED DATA\nSMFD8TTP DS    XL2                SUBTYPE - X'01-05' = PGM EXECUTION\nSMFD8TCF DS    CL8                RACFID OF EXECUTOR -\nSMFD8TPN DS    CL8                RACFID GROUP NAME  -\nSMFD8TGM DS    CL8                PROGRAM NAME\nSMFD8TID DS    CL8                RACF TERMINAL ID\nSMFD8TOB DS    CL8                THE JOB NAME\nSMFD8TSI DS    CL4                SYSTEM ID\nSMFD8TTE DS    PL4                SMF STYLE DATE\nSMFD8TME DS    XL4                SMF STYLE TIME\nSTDLENT  EQU   *-SMFD8TTP         LENGTH OF SUBTYPED TECH TYPE DATA\nSMFXLJ01 EQU   *-SMFXLEN          LENGTH OF THE ENTIRE RECORD\n*\n* THE PRODUCT SECTION(S) FOR JES2 SSM GOES HERE\n*\n         ORG   SDSEND             ORG TO END OF SELF DEFINING SECITON\n*\nPRDOFS   EQU   *-SMFXLEN          OFFSET TO PRODUCT SECTION\nSMFD8STY DS    XL2                SUBTYPE - REPEATED - JUST IN CASE\nSMFD8SVR DS    XL4                SAME AS UBRVRM AND UJCXVRM\nSMFD8SID DS    XL16               C'SHARED SPOOL MOD'\nPRDLENS  EQU   *-SMFD8STY         LENGTH OF THE SSM PRODUCT SECTION\n*\nPRD8JZZ  EQU   *                  END OF SSM PRODUCT SECTION\n*\n* THE SUBTYPED SHARED SPOOL MODS DATA GOES IN HERE\n*\nSTDOFFS  EQU   *-SMFXLEN          OFFSET TO SUBTYPED SSM DATA\n*\nSMFD8S40 DS    XL2                SUBTYPE - X'0040' SSM REJECTION INFO\nSMFD80JI DS    XL4                JOBID\nSMFD80JN DS    CL8                JOBNAME\nSMFD80SI DS    XL4                NODE ID REJECT TOOK PLACE ON\nSMFD80TE DS    XL8                NODE NAME REJECT TOOK PLACE ON\nSMFD80GN DS    XL8                NODE NAME REJECT TOOK PLACE ON\nSMFD80ME DS    CL12               REJECTION REASON\nSMFD80XT DS    CL8                STCK FORMAT DATE AND TIME\nSMFLNS40 EQU   *-SMFD8S40         LENGTH OF SUBTYPED DATA\nSMFXLS40 EQU   *-SMFXLEN          LENGTH OF THE ENTIRE RECORD\n*\n         ORG   PRD8JZZ            ORG TO END OF SSM PRODUCT SECTION\n*\nSMFD8S41 DS    XL2                SUBTYPE - X'0041' SSM JOB SELECTED\nSMFD81IN DS    XL2                INPUT NODE ID       JQEINPND\nSMFD81XN DS    XL2                EXECUTION NODE ID   JQEXEQND\nSMFD81CD DS    CL1                JQE CREATION TIME    - JQXCRTME\nSMFD81JC DS    CL1                JOB CLASS   JQEJCLAS\nSMFD81JI DS    XL4                JOBID\nSMFD81JN DS    CL8                JOBNAME JQEJNAME\nSMFD81RI DS    CL8                USERID OF JOB OWNER    - JQEUSRID\nSMFD81SL DS    CL8                SECURITY LABEL OF JOB   - JQESECLB\nSMFD81XT DS    CL8                STCK FORMAT DATE AND TIME - THIS REC\nSMFD81SE DS    CL16               SCHEDULING ENVIRONMENT NAME -JQASCHE\nSMFD81TE DS    XL8                NODE NAME ACCEPTED ON\nSMFD81GN DS    CL8                XCF GROUP NAME ACCEPTED ON\nSMFLNS41 EQU   *-SMFD8S41         LENGTH OF SUBTYPED DATA\nSMFXLS41 EQU   *-SMFXLEN          LENGTH OF THE ENTIRE RECORD\n*\n         ORG   PRD8JZZ            ORG TO END OF SSM PRODUCT SECTION\n*\nSMFD8S42 DS    XL2                SUBTYPE - X'0042' SSM OPER CMDS\nSMFD82XT DS    CL8                STCK FORMAT DATE AND TIME - THIS REC\n* THE ONLY THINGS AN OPERATOR CAN CHANGE ARE IN THE ECSA AREA -\n* HERE IS A BEFORE AND AFTER COPY OF THE ECSA AREA\nSMFD82NN DS    XL8                NODE NAME ACCEPTED ON\nSMFD82NX DS    XL8                NODE ID COMMAND ENTERED ON\nSMFD82CM DS    CL140              THE COMMAND ITSELF (IF WE CAN GET IT)\nSMFD82CB DS    XL(SSMTBLEN)       THE ECSA AREA ITSELF (BEFORE)\nSMFD82CA DS    XL(SSMTBLEN)       THE ECSA AREA ITSELF (AFTER)\nSMFLNS42 EQU   *-SMFD8S42         LENGTH OF SUBTYPED DATA\nSMFXLS42 EQU   *-SMFXLEN          LENGTH OF THE ENTIRE RECORD\n*\n         ORG   PRD8JZZ            ORG TO END OF SSM PRODUCT SECTION\n*\nSMFD8S43 DS    XL2                SUBTYPE - X'0043' $SJ ALLOWED OR NOT\nSMFD83DT DS    CL8                STCK FORMAT DATE AND TIME - THIS REC\nSMFD83NN DS    CL1                A=$SJ IS ALLOWED ;;;; X=$SJ REJECTED\nSMFLNS43 EQU   *-SMFD8S43         LENGTH OF SUBTYPED DATA\nSMFXLS43 EQU   *-SMFXLEN          LENGTH OF THE ENTIRE RECORD\n*\n         ORG   PRD8JZZ            ORG TO END OF SSM PRODUCT SECTION\n*\nSMFD8S44 DS    XL2                SUBTYPE - X'0044' JECL CARD ACCPETED\nSMFD84IN DS    XL2                INPUT NODE ID       JQEINPND\nSMFD84CD DS    CL4                JQE CREATION TIME    - JCTRDRON\nSMFD84JC DS    CL1                JOB CLASS   JQEJCLAS\nSMFD84JI DS    XL8                JOBID\nSMFD84JN DS    CL8                JOBNAME JQEJNAME\nSMFD84XT DS    CL8                STCK FORMAT DATE AND TIME - THIS REC\nSMFD84MG DS    CL60               DETAILED INFO FOR SMF\nSMFD84JA DS    CL(UJCXSLN1)       THE STQNAME (JCT EXTENSION) AFTER\n*                                     PROCESSING CURRENT STATEMENT\nSMFLNS44 EQU   *-SMFD8S44         LENGTH OF SUBTYPED DATA\nSMFXLS44 EQU   *-SMFXLEN          LENGTH OF THE ENTIRE RECORD\n*\n         ORG   PRD8JZZ            ORG TO END OF SSM PRODUCT SECTION\n*\nSMFD8S45 DS    XL2                SUBTYPE - X'0045' JECL CARD REJECTED\nSMFD85IN DS    XL2                INPUT NODE ID       JQEINPND\nSMFD85CD DS    CL4                JQE CREATION TIME    - JQXCRTME\nSMFD85JC DS    CL1                JOB CLASS   JQEJCLAS\nSMFD85JI DS    XL8                JOBID\nSMFD85JN DS    CL8                JOBNAME JQEJNAME\nSMFD85XT DS    CL8                STCK FORMAT DATE AND TIME - THIS REC\nSMFD85MG DS    CL140              JECL CARD IMAGE PROCESSED\nSMFLNS45 EQU   *-SMFD8S45         LENGTH OF SUBTYPED DATA\nSMFXLS45 EQU   *-SMFXLEN          LENGTH OF THE ENTIRE RECORD\n*\n         ORG   PRD8JZZ            ORG TO END OF SSM PRODUCT SECTION\n*\nSMFD8S46 DS    XL2                SUBTYPE - X'0046' QSEL IS REDRIVEN\nSMFD86IN DS    XL2                NODEID SOMEWHERE IN $HCT OR $HCCT\nSMFD86XT DS    CL8                STCK FORMAT DATE AND TIME - THIS REC\nSMFLNS46 EQU   *-SMFD8S46         LENGTH OF SUBTYPED DATA\nSMFXLS46 EQU   *-SMFXLEN          LENGTH OF THE ENTIRE RECORD\n*\n         ORG   PRD8JZZ            ORG TO END OF SSM PRODUCT SECTION\n*\nSMFD8S47 DS    XL2                SUBTYPE - X'0047' SSM PARM ACCEPTED\nSMFD87IN DS    XL2                NODEID SOMEWHERE IN $HCT OR $HCCT\nSMFD87XT DS    CL8                STCK FORMAT DATE AND TIME - THIS REC\nSMFD87PM DS    CL256              PARM VALUE ACCEPTED\nSMFD87EC DS    XL(SSMTBLEN)       THE ECSA AREA ITSELF\nSMFLNS47 EQU   *-SMFD8S47         LENGTH OF SUBTYPED DATA\nSMFXLS47 EQU   *-SMFXLEN          LENGTH OF THE ENTIRE RECORD\n*\n         ORG   PRD8JZZ            ORG TO END OF SSM PRODUCT SECTION\n*\nSMFD8S48 DS    XL2                SUBTYPE - X'0047' SSM PARM ACCEPTED\nSMFD8801 DS    XL1                SOME DATA TO RECORD(UNUSED FOR NOW)\nSMFD8802 DS    XL1                  MORE DATA TO RECORD\nSMFLNS48 EQU   *-SMFD8S48         LENGTH OF SUBTYPED DATA\nSMFXLS48 EQU   *-SMFXLEN          LENGTH OF THE ENTIRE RECORD\n*\n         ORG   PRD8JZZ            ORG TO END OF SSM PRODUCT SECTION\n*\nSMFD8S49 DS    XL2                SUBTYPE - X'0047' SSM PARM ACCEPTED\nSMFD8901 DS    XL1                SOME DATA TO RECORD(UNUSED FOR NOW)\nSMFD8902 DS    XL1                  MORE DATA TO RECORD\nSMFLNS49 EQU   *-SMFD8S49         LENGTH OF SUBTYPED DATA\nSMFXLS49 EQU   *-SMFXLEN          LENGTH OF THE ENTIRE RECORD\n*\n         ORG   ,\n         DS    0F\n* USE SMFD8LEN TO FIND BUFFER SIZE FOR *ANY* VERSION OF SMFD8...\nSMFD8LEN EQU   *-STPCSMFD\n         MEND\n++MAC($USERCBS) SYSLIB(SHASMAC) DISTLIB(AHASMAC)\n  /* NOTE - THERE ARE NO - NN OO - EXPLICIT ASSEM ENTRIES FOR THE\n    $USERCBS MACRO - FOR ONE THING IT WOULD REQUIRE A COMMON LIBRARY\n    FOR  JES2  AND sdsf BE IN USE, FOR ANOTHER WE ALREADY HAVE AN\n    EXPLICIT ASSEM ENTRY FOR EACH MACRO THAT IS IN THE $USERCBS THAT\n    WOULD CAUSE US TO NEED TO REASSEMBLE IN THE FIRST PLACE.  */  .\n         MACRO - $USERCBS - EXPAND ALL USER CONTROL BLOCKS\n&LABEL   $USERCBS\n.*\n.* *******************************************************************\n.*                                                                   *\n.*   THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *\n.* BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS*\n.* MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED *\n.* FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF  *\n.* THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE*\n.* USEFULLNESS OF THE MATERIAL.                                      *\n.*                                                                   *\n.*   WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *\n.* NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE *\n.* IN THE FUTURE.                                                    *\n.*                                                                   *\n.* *******************************************************************\n.**********************************************************************\n.*\n.* FUNCTION: GENERATE ALL SUNTRUST MAPPING MACROS FOR JES2.\n.*\n.* NOTES:    THIS MACRO IS REQUIRED FOR ALL SUNTRUST JES2 EXIT MODULES\n.*           ALL USER MAPPING MACROS SHOULD BE EXPANDED HERE.\n.*\n.* REVISION HISTORY:\n.*\n.*   DATE   NAME         DESCRIPTION OF CHANGE\n.* -------- ------------ ----------------------------------------------\n.*\n.**********************************************************************\n.*\n.*       TITLE '$STJCTX -- USER EXTENSION TO THE JCT\n         $STJCTX  ,\n.*\n.*       TITLE '$STQNAME -- USER EXTENSION TO THE JQE\n         $STQNAME ,\n.*\n.*       TITLE 'STPCSMFD -- USER SMF DSECTS FOR SHARED SPOOL MODS'\n         STPCSMFD JES2=Y,DSECT=Y\n.*\n.*       TITLE '$SSMTB -- - COMMON ECSA AREA FOR JES2 SSM CONTROLS'\n         $SSMTB ,\n.*\n.*       TITLE '$STTQEXW -- THE TIMER QUEUE PCE WORK AREA '\n         $STTQEXW\n.*\n.*       TITLE '$STTQE   -- THE SSM TIMER QUEUE CONTROL BLOCK'\n         $STTQE\n.*\n         MEND\n++JCLIN.\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO\n//*        DCB=BUFNO=1\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=SYS1.AHASMOD(STJTABS),UNIT=SYSDA\n//*        SPACE=(80,(200,50,2)),DISP=(NEW,PASS)\n//SYSLIN   DD   DSN=&&OBJ\n//*        DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//*        DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//SYSIN    DD   *\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//AHASMOD  DD   DSN=SYS1.AHASMOD,DISP=SHR\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE\n//SYSLIN   DD   *\n INCLUDE  AHASMOD(STJTABS)\n NAME STJTABS(R)\n/*\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSCX50A),UNIT=SYSDA\n//SYSLIN   DD   DSN=&&OBJ,\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//AHASMOD   DD  DSN=SYS1.AHASMOD,DISP=SHR\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE\n//SYSLIN   DD   *\n ENTRY   EXIT50A\n INCLUDE AHASMOD(STSCX50A)\n INCLUDE AHASMOD(STSC2050)\n ORDER   STSCX50A,STSC2050\n NAME STSCX50A(R)\n/*\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSCX04A),UNIT=SYSDA\n//SYSLIN   DD   DSN=&&OBJ\n//SYSIN    DD   *\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//AHASMOD   DD  DSN=SYS1.AHASMOD,DISP=SHR\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE\n//SYSLIN   DD   *\n INCLUDE AHASMOD(STSCX04A)\n NAME STSCX04A(R)\n/*\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD   DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSCX54A),UNIT=SYSDA\n//SYSLIN   DD   DSN=&&OBJ\n//SYSIN    DD   *\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//AHASMOD  DD   DSN=SYS1.AHASMOD,DISP=SHR\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE\n//SYSLIN   DD   *\n INCLUDE AHASMOD(STSCX54A)\n NAME STSCX54A(R)\n/*\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//         DD   DISP=SHR,DSN=SYS1.SMPMTS\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSCX54B),UNIT=SYSDA\n//SYSLIN   DD   DSN=&&OBJ\n//SYSIN    DD   *\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//AHASMOD   DD  DSN=SYS1.AHASMOD,DISP=SHR\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLNKE\n//SYSLIN   DD   *\n INCLUDE AHASMOD(STSCX54B)\n NAME STSCX54B(R)\n/*\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND)\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSCX06A),UNIT=SYSDA\n//SYSLIN   DD   DSN=&&OBJ\n//SYSIN    DD   *\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//AHASMOD   DD  DSN=SYS1.AHASMOD,DISP=SHR\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE\n//SYSLIN   DD   *\n INCLUDE AHASMOD(STSCX06A)\n NAME STSCX06A(R)\n/*\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND)\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSC2050),UNIT=SYSDA\n//SYSLIN   DD   DSN=&&OBJ\n//SYSIN    DD   *\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//AHASMOD   DD  DSN=SYS1.AHASMOD,DISP=SHR\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE\n//SYSLIN   DD   *\n INCLUDE AHASMOD(STSC2050)\n NAME STSC2050(R)\n/*\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSIN    DD   *\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSCX20A),UNIT=SYSDA\n//SYSLIN   DD   DSN=&&OBJ\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//AHASMOD  DD   DSN=SYS1.AHASMOD,DISP=SHR\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE\n//SYSLIN   DD   *\n ENTRY  EXIT20A\n INCLUDE AHASMOD(STSCX20A)\n INCLUDE AHASMOD(STSC2050)\n ORDER   STSCX20A,STSC2050\n NAME STSCX20A(R)\n/*\n//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSCX49A),UNIT=SYSDA\n//SYSLIN   DD   DSN=&&OBJ\n//SYSIN    DD   *\n//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1'\n//AHASMOD   DD  DSN=SYS1.AHASMOD,DISP=SHR\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE\n//SYSLIN   DD   *\n INCLUDE AHASMOD(STSCX49A)\n NAME STSCX49A(R)\n/*\n//ASMX19A  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSCX19A),UNIT=SYSDA\n//SYSLIN   DD   DSN=&&OBJ\n//SYSIN    DD   *\n//LNKX19A  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//         COND=(8,LT,STEPASM)\n//AHASMOD   DD  DSN=SYS1.AHASMOD,DISP=SHR\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE\n//SYSLIN   DD   *\n INCLUDE AHASMOD(STSCX19A)\n NAME STSCX19A(R)\n/*\n//ASMX24A  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSCX24A),UNIT=SYSDA\n//SYSLIN   DD   DSN=&&OBJ\n//SYSIN    DD   *\n//LNKX24A  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//AHASMOD   DD  DSN=SYS1.AHASMOD,DISP=SHR\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE\n//SYSLIN   DD   *\n INCLUDE AHASMOD (STSCX24A)\n NAME STSCX24A(R)\n/*\n//ASMSSMT  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS\n//         DD   DISP=SHR,DSN=SYS1.SHASMAC\n//         DD   DISP=SHR,DSN=SYS1.SHASSRC\n//         DD   DISP=SHR,DSN=SYS1.AHASMAC\n//         DD   DISP=SHR,DSN=SYS1.AHASSRC\n//         DD   DISP=SHR,DSN=SYS1.MACLIB\n//         DD   DISP=SHR,DSN=SYS1.MODGEN\n//         DD   DISP=SHR,DSN=SYS1.AMACLIB\n//         DD   DISP=SHR,DSN=SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSSMTBS),UNIT=SYSDA\n//SYSLIN   DD   DSN=&&OBJ\n//SYSIN    DD   *\n//LNKSSMT  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'\n//AHASMOD   DD  DSN=SYS1.AHASMOD,DISP=SHR\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE\n//SYSLIN   DD   *\n INCLUDE AHASMOD(STSSMTBS)\n NAME STSSMTBS(R)\n/*\n++SRC(STJTABS)  SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).\nSTJTABS  TITLE 'INSTALLATION DEFINED TABLES FOR JES2'\n PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1) '\n*\n* MODULE NAME:  STJTABS\n*\n*\n* FUNCTION:     THIS MODULE CONTAINS THE USER TABLES REFERENCED IN\n*               THE JES2 HASPTABS MODULE.  IT ALSO CONTAINS ANY\n*               PRE- OR POST SCAN EXITS CALLED FOR BY THESE\n*               TABLE ENTRIES.\n*\n*               TABLES AND FUNCTIONS ADDED:\n*\n*                 MAIN PARAMETER TABLE:\n*\n*                 BERT TABLE FOR OUR EXTENSION TO THE JQE:\n*\n*                 - STQNAME  - ALL OUR JQE EXTENSION.\n*\n*                 JQE TABLE:\n*\n*                 - BERAFTCT - PSEUDO FIELD TO DISPLAY THE VALUES\n*                              FOR A JOB'S /*BEFORE, /*AFTER, AND/OR\n*                              /*CNTL CARDS WITH A PRE-SCAN EXIT.\n*\n*\n* ENTRY POINTS: PARMSCAN -- INSTALLATION'S MAIN PARAMETER\n*                           $SCAN TABLE\n*\n*               USERJQE  -- INSTALLATION'S JQE SUB-SCAN\n*                           $SCAN TABLE\n*\n*               USERBERT -- INSTALLATION'S BERT TABLE.\n*\n*               UPCETBL1 -- INSTALLATION'S PCE TABLE.\n*\n*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE\n*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS\n*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED\n*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF\n*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE\n*  USEFULLNESS OF THE MATERIAL.\n*\n*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,\n*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE\n*  IN THE FUTURE.\n*\n*\n* REVISION HISTORY:\n*\n*   DATE   NAME        DESCRIPTION OF CHANGES\n* -------- ----------- ------------------------------------------------\n         SPACE 3\n         COPY  $HASPGBL            INCLUDE JES GLOBAL VALUES\n         PRINT ON                  RESTORE FULL PRINTING\n         EJECT\nSTJTABS $MODULE TITLE='SUNTRUST USER TABLES MODULE',                   X\n               SYSP=(GEN,GEN,DATA,NOGEN,NOGEN),                        X\n               RMODE=ANY,                                              X\n               ENVIRON=JES2,                                           X\n               MLTE,                                                   X\n               RESPA,              JES FSI RESPA DSECT                 X\n               RPL,                MVS ACB REQUEST BLOCK DSECT         X\n               ASCB,                                                   X\n               CVT,                                                    X\n               NTASM,         Name/Token constants                     X\n               $BERT,              ($BERT)                             X\n               $BERTTAB,           ($BERT)                             X\n               $BUFFER,            HASP SPOOL BUFFER DSECT             X\n               $CAT,               HASP CLASS ATTRIBUTE TABLE DSECT    X\n               $CATBERT,           ($DOGBERT)                          X\n               $CADDR,             JES2 COMMON STORAGE ADDRESS TABLE   X\n               $CMB,                                                   X\n               $COMWORK,           HASP COMM PCE WORK AREA DSECT       X\n               $DCT,                                                   X\n               $HASPEQU,           HASP EQUATES                        X\n               $HCCT,              HASP HCCT DSECT                     X\n               $HCT,               HASP CONTROL TABLE DSECT            X\n               $HFAME,             HASP HFAME DSECT                    X\n               $JCT,               HASP JOB CONTROL TABLE DSECT        X\n               $JOE,               HASP JOB OUTPUT ELEMENT DSECT       X\n               $JQE,               HASP JOB QUEUE ELEMENT DSECT        X\n               $MCT,                                                   X\n               $MIT,               HASP MIT DSECT                      X\n               $MITETBL,                                               X\n               $MODMAP,            HASP MODULE MAP DSECT               X\n               $PADDR,             HASP PADDR DSECT                    X\n               $PARMLST,                                               X\n               $PCE,               HASP PROCESSOR CONTROL ENTRY DSECT  X\n               $PCETAB,            HASP PCE TABLE DSECT                X\n               $PSV,                                                   X\n               $QSE,                                                   X\n               $RDRWORK,                                               X\n               $SAFINFO,                                               X\n               $SCAT,              HASP SCAT DSECT                     X\n               $SCANTAB,           HASP SCAN TABLE DSECT               X\n               $SCANWA,            HASP $SCAN WORK AREA DSECT          X\n               $TQE,               HASP TIMER QUEUE ENTRY              X\n               $USERCBS,           USER MAPPING MACROS                 X\n               $XECB               HASP XECB DSECT\n         TITLE 'USER TABLE MODULE -- USER MAIN PARAMETER STATEMENT $SCAX\n               N TABLE'\n         TITLE 'USER TABLE MODULE -- USERJQE SUB-SCAN TABLE'\n**********************************************************************\n*\n*   THIS IS THE $SCAN TABLE FOR CONTROLLING SCANNING OF THE PARMS FOR\n*    JQES.\n*   WE USE IT TO ADD OUR STATEMENTS FOR:\n*\n*     BEFAFTCT - DISPLAY ONLY OF BEFORE/AFTER/CNTL CARD INFORMATION.\n*\n**********************************************************************\nUSERJQE  $SCANTAB  TABLE=(DYNAMIC,MCTJQETP)\n         SPACE 3\n        $SCANTAB NAME=BEFAFTCT,    BEFORE/AFTER/CNTL INFORMATION       X\n               CB=PARENT,                                              X\n               DSECT=JQE,                                              X\n               FILTER=NO,          CAN NOT BE A FILTER                 X\n               CALLERS=($SCDCMDS), DISPLAY COMMANDS                    X\n               PRESCAN=(QBACDISP,DISPLAY)  DISPLAY PRESCAN EXIT\n         SPACE 3\n         $SCANTAB  TABLE=END       DEFINE END OF USER TABLE\n         TITLE 'USER TABLE MODULE -- DYNAMIC BERT TABLE'\n**********************************************************************\n*\n*   THIS IS THE $BERTTAB TABLE TO DEFINE OUR STQNAME ENTRY IN THE JQA.\n*   REFER TO THE $STQNAME MACRO FOR DETAILS.\n*\n**********************************************************************\nUSERBERT $BERTTAB  TABLE=(DYNAMIC) START OF DYNAMIC TABLE\n         SPACE 3\n        $BERTTAB CBTYPE=JQE,       CONTROL BLOCK TYPE                  X\n               NAME=STQNAME,       ID OF OUR BERTIE                    X\n               CBOFF=*,            GENERATE OFFSET DYNAMICALLY         X\n               LEN=STQNAMELN,      LENGTH OF OUR BERTIE                X\n               FILL=C' '           FILL CHARACTER\n         SPACE 3\n         $BERTTAB  TABLE=END       DEFINE END OF USER TABLE\nUPCETBL1 $PCETAB TABLE=(DYNAMIC)\n*              local token  =C'SSM_LOCAL_TOKEN1'\n*\n         $PCETAB NAME=TQEX,        NAME OF PCE = TQEX                  X\n               DESC='SSM TIMER QUEUE CNTL',                            X\n               DCTTAB=*-*,         NO DCT ASSOCIATED WITH THIS PCE     x\n               ENTRYPT=(STPCENT,ENTRY), USE STPCENT ON A $ENTRY        X\n               CHAIN=(SSMPCEDH,TOKEN), DISP INTO SSM TO OUR PCE HEAD   X\n               CHAINTK=(SSM_LOCAL_TOKEN1,TASK), use local nt pair      X\n               COUNTS=(SSMPCEDK,TOKEN), DISP TO COUNT FIELD IN SSMT    X\n               COUNTTK=(SSM_LOCAL_TOKEN1,TASK),   use local nt pair    X\n               DISPTCH=INIT,        START AT WARMSTART                 X\n               MACRO=STTQEPCE,      MACRO THAT MAPS THE PCE (DOC ONLY) X\n               FSS=NO,              NOT AVAILABLE FOR FSS TASKS.       X\n               WORKLEN=STTXLEN,     WORKLEN FOR THIS PCE. SEE $STTQEXW X\n               PCEID=(0,TQEX)      UPCETB IS EQUATED AS 250\n         $PCETAB TABLE=END         THE END OF OUR DYNAMIC PCE TABLE DEF\n*\n*\n         TITLE 'USER TABLE MODULE -- $SCAN PRE-SCAN DISPLAY EXIT ROUTINX\n               E FOR JQA BEFORE/AFTER/CNTL INFORMATION'\n**********************************************************************\n*\n*   $SCAN FACILITY PRE-SCAN EXIT TO DISPLAY THE SCHEDULING INFORMATION\n*   FROM THE /*BEFORE, /*AFTER AND /*CNTL JECL CARDS FOR BATCH JOBS.\n*\n*   NOTE: THESE FIELDS ARE ONLY DISPLAYED FOR BATCH JOBS THAT ARE\n*         EITHER AWAITING OR IN EXECUTION, SINCE THEY HAVE NO VALUE\n*         FOR TSU OR STC JOBS AND HAVE NO PURPOSE POST EXECUTION.\n*\n**********************************************************************\n         SPACE 2\n         USING STAB,R8             DEFINE BASE REGISTER\n         USING SCWA,R10            DEFINE BASE REGISTER\n         USING HCT,R11             DEFINE BASE REGISTER\n         USING QBACDISP,R12        DEFINE BASE REGISTER\n         USING PCE,R13             DEFINE BASE REGISTER\n*\nQBACDISP $SAVE ,                   GET SAVE AREA AND SAVE REGS\n*\n         LR    R12,R15             GET ROUTINE'S BASE ADDRESS\n         LR    R10,R1              GET ADDRESS OF SCWA\n         L     R8,SCWASTAB         GET ADDRESS OF STAB\n         L     R7,SCWACBAD         GET ADDRESS OF OUR CB (JQE)\n         USING JQE,R7\n*\n         LA    R4,8                PRESET RETURN CODE -- ALL DONE\n         TM    JQEFLAG3,JQE3JOB    CHECK IF THIS IS A BATCH JOB\n         BNZ   QBACRET             TSU OR STC -- EXIT, NO JQA TO FREE\n         TM    JQETYPE,$XEQ        CHECK IF JOB IS WAITING/IN EXEC\n         BZ    QBACRET             NO -- EXIT, NO JQA TO FREE\n*\n         $DOGJQE ACTION=(FETCH,READ),    GET A READ-ONLY MODE JQA      X\n               JQE=(R7),                                               X\n               ERRET=QBACBDJQ\n*\n         LR    R7,R0               GET THE ADDR OF OUR JQA\n         USING JQA,R7              DEFINE BASE REGISTER\n*\n         $DOGBERT ACTION=GETOFFSET,    GET THE OFFSET                  X\n               CBTYPE=JQE,                IN THE JQA                   X\n               NAME=STQNAME,                 OF OUR BERT               X\n               ERRET=QBACBDBR\n*\n         LA    R6,0(R1,R7)         GET ADDRESS OF OUR BERT\n         USING STQNAME,R6\n*\n* first things first - is it a new format extension?\n* if it is, then why was it not selected - yet ?\n*\n         TM    UBRUFLAG,UBRXXVRM   IS VRM BIT SET ON? IS THIS 1.7?\n         BZ    QBAFT                 IF NOT SKIP DELAY REASON CHECKS\n         CLC   UBRVRM(4),=X'00010700'  BOTH MUST MATCH FIRST\n         BNE   QBAFT\n*\n         MVC   SCWAWK16,UBRDLAYS   MOVE THE DELAYS BYTE TO A WORK AREA\n         NI    SCWAWK16,X'7F'      TURN OFF THE HIGH ORDER BIT\n*\n         XR    R2,R2               CLEAR THE WORK REG NOW.\n         IC    R2,SCWAWK16         GET THE DELAY CODE\n         CHI   R2,DLYTABMX         IS IT BEYOND THE LIMIT OF THE TABLE?\n         JH    BADDLYCD            HANDLE A BAD DELAY CODE\n         MH    R2,=AL2(DLYSEGL)    R3 = CODE * 12 = DISP TO ENTRY\n         LA    R5,DLYTAB           POINT TO MESSAGE TABLE\n         LA    R5,0(R2,R5)         PLUS THE INDEX WE JUST BUILT = MSG\n         LA    R2,DLYSEGL          R2 = LENGTH OF TEXT\n         J     DLYCDS\nBADDLYCD EQU   *\n*  here is the display if we have an invalid delay reason code.\nBDLYCDS $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT='INVALID DELAY=',BRKOPT=YES,CONV=CHAR,   X\n               DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT=SCWAWK16,LENGTH=1,BRKOPT=NO,CONV=HEX\n         J     QBAFT\n\n*  here is display for valid reason code values\nDLYCDS  $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT='DELAY RSN=',BRKOPT=YES,CONV=CHAR,       X\n               DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR\n*\n* SET UP AND DISPLAY THE VALUE OF THE UDCTUCS FIELD\n*\nQBAFT    TM    UBRMFLAG,UBRAFT     DID JOB SPECIFY A /*AFTER NAME?\n         BZ    QBACBEF             NO -- CHECK FOR BEFORE NAME\n         LA    R5,UBRAFTR          GET ADDR OF OUR NAMES FIELD\n         LA    R2,8                GET LENGTH OF OUR FIELD\n        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT='AFTER=',BRKOPT=YES,CONV=CHAR,           X\n               DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR\n*\nQBACBEF  DS    0H\n         TM    UBRMFLAG,UBRBEF     DID JOB SPECIFY A /*BEFORE NAME?\n         BZ    QBACWITH            NO -- CHECK FOR WITH NAME(S)\n         LA    R2,8                GET LENGTH OF OUR FIELD\n         LA    R5,UBRBFOR          POINT TO OUR NAME FIELD\n        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT='BEFORE=',BRKOPT=YES,CONV=CHAR,          X\n               DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR\n*\nQBACWITH DS    0H\n         TM    UBRMFLAG,UBRWITHF   DID JOB SPECIFY A /*WITH NAME ?\n         BZ    QBACWOUT            NO -- CHECK FOR /*WITHOUT NAME\n         LA    R2,8                GET LENGTH OF OUR FIELD\n         LA    R5,UBRWITH          GET ADDRESS OF FIELD\n        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT='WITH=',BRKOPT=YES,CONV=CHAR,            X\n               DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR\n*\nQBACWOUT DS    0H\n         TM    UBRUFLAG,UBRXXVRM   IS VRM BIT SET ON? IS THIS 1.7?\n         BZ    QBACCNTL            IF NOT SKIP WITHOUT CHECK\n         CLC   UBRVRM(4),=X'00010700'  BOTH MUST MATCH FIRST\n         BNE   QBACCNTL\n*  NOW WE CAN SAFELY CHECK AND FORMAT THE RESULT\n         TM    UBRMSCF1,UBRMSWOJ   DID JOB SPECIFY A /*WITHOUT NAME?\n         BZ    QBAHOLDF            NO -- CHECK FOR HOLDFOR TIME\n         LA    R2,8                GET LENGTH OF OUR FIELD\n         LA    R5,UBRWIOUT         GET ADDRESS OF FIELD\n        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT='WITHOUT=',BRKOPT=YES,CONV=CHAR,         X\n               DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR\n*\nQBAHOLDF DS    0H\n* TEST IF EITHER EXPLICT TIMER SETTING IS IN USE *\n         TM    UBRWATF,UBRWATFR+UBRWATT  IF BOTH ARE \"OFF\" THEN\n         JZ    QBANOAUT                    SKIP THE TESTS\n*                                  IF EITHER IS IN USE,\n         $STCK ADDR=$DOUBLE          GET THE CURRENT TIME NOW.\n         TM    UBRWATF,UBRWATFR    DID JOB SPECIFY A /*HOLDFOR CARD?\n         JZ    QBAHOLDT            NO -- CHECK FOR HOLD TIL TIME\n         LA    R2,8                GET LENGTH OF OUR FIELD\n         LA    R5,SCWAWK16         GET ADDRESS OF FIELD\n         UNPK  SCWAWK16(3),UBRHLDF(2)   X'HHMMSS0F'\n         MVI   SCWAWK16+2,C':'     INSERT COLON\n\n         UNPK  SCWAWK16+3(3),UBRHLDF+1(2)   X'HHMMSS0F'\n         MVI   SCWAWK16+5,C':'     INSERT COLON\n         UNPK  SCWAWK16+6(3),UBRHLDF+2(2)   X'HHMMSS0F'\n         MVI   SCWAWK16+8,C' '     JUST KEEP THINGS CLEAN\n        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT='HOLDFOR=',BRKOPT=YES,CONV=CHAR,         X\n               DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR\n         CLC   UBRHLDFX,$DOUBLE    IF TIMR > NOW - THEN NOT ELAPSED.\n         JH    QBAHOLDT              IF NOT ELAPSED, SKIP LITERAL!\n         $SCAND SCWA=SCWA,TEXT='\u00a6ELAPSED',BRKOPT=NO,CONV=CHAR,         X\n               DEBLANK=NO\n*\nQBAHOLDT DS    0H\n         TM    UBRWATF,UBRWATT     DID JOB SPECIFY A /*HOLDTIL CARD?\n         JZ    QBANOAUT            NO -- CHECK FOR NO AUTOROUTING\n         LA    R2,8                GET LENGTH OF OUR FIELD\n         LA    R5,SCWAWK16         GET ADDRESS OF FIELD\n         UNPK  SCWAWK16(3),UBRHLDU(2)   X'HHMMSS0F'\n         MVI   SCWAWK16+2,C':'     INSERT COLON\n\n         UNPK  SCWAWK16+3(3),UBRHLDU+1(2)   X'HHMMSS0F'\n         MVI   SCWAWK16+5,C':'     INSERT COLON\n         UNPK  SCWAWK16+6(3),UBRHLDU+2(2)   X'HHMMSS0F'\n         MVI   SCWAWK16+8,C' '     JUST KEEP THINGS CLEAN\n        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT='HOLDTIL=',BRKOPT=YES,CONV=CHAR,         X\n               DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR\n         CLC   UBRHLDUX,$DOUBLE    IF TIMER > NOW THEN NOT EXPIRED\n         JH    QBANOAUT             IF NOT EXPIRED, SKIP LITERAL!\n         $SCAND SCWA=SCWA,TEXT='-EXPIRED',BRKOPT=NO,CONV=CHAR,         X\n               DEBLANK=NO\n*\nQBANOAUT DS    0H\n         TM    UBRMSCF1,UBRMSNOT   IS NO AUTOROUTING SET?\n         BZ    QBACCNTL            IF NOT CHECK FOR CNTL VALUES\n        $SCAND SCWA,TEXT=',NO AUTOROUTING',BRKOPT=YES,CONV=CHAR,       X\n               DEBLANK=NO\n*\nQBACCNTL DS    0H\n         TM    UBRMFLAG,UBRCNTL    DID JOB SPECIFY A /*CNTL NAME?\n         BZ    QBACRC08            NO -- RETURN TO CALLER\n         LA    R5,UBRDNAME         POINT TO NAME FIELD\n         SLR   R3,R3               ZERO R3 FOR IC\n         IC    R3,UBRMFLAG         GET CNTL COUNTS AND FLAGS\n         SRL   R3,4                SHIFT OUT THE FLAG BITS\n         LTR   R3,R3               VERIFY WE HAVE AT LEAST ONE CNTL\n         BZ    QBACRC08            ZERO -- RETURN TO CALLER\n*\n* - DO GROUP LITERALS (HEADING TYPE INFO) FIRST.\n*\n        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n        $SCAND SCWA=SCWA,TEXT='CNTL=(',BRKOPT=YES,CONV=CHAR,           X\n               DEBLANK=NO\n         B     QBACCTSK            SKIP COMMA BEFORE FIRST NAME\n*  - AN ITEM SEPERATOR (A COMMA)\nQBACCTLP DS    0H\n        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\nQBACCTSK DS    0H\n         LA    R2,8                GET LENGTH OF OUR FIELD\n        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR\n        $SCAND SCWA=SCWA,TEXT='-',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n         LA    R2,1                GET LENGTH OF OUR FIELD\n         LA    R4,8(,R5)           GET ADDR OF SHARE TYPE\n        $SCAND SCWA=SCWA,TEXT=(R4),LENGTH=(R2),BRKOPT=NO,CONV=CHAR,    X\n               DEBLANK=NO\n*\n         LA    R5,UBRDNAML(,R5)    POINT TO NEXT NAME\n         BCT   R3,QBACCTLP         LOOP THROUGH ALL NAMES\n*\n        $SCAND SCWA=SCWA,TEXT=')',BRKOPT=NO,CONV=CHAR,DEBLANK=NO\n*\n*\nQBACRC08 DS    0H                  \"NORMAL\" RETURN FROM PRE-SCAN EXIT\n*\n         LA    R4,8                SET ALL DONE RETURN CODE\n*\nQBACRJQA DS    0H\n         $DOGJQE ACTION=(RETURN),  RETURN THE READ MODE JQA            X\n               CBADDR=(R7)\n*\nQBACRET  DS    0H\n         $RETURN RC=(R4)           RETURN TO CALLER\n*\n*\nQBACBDJQ DS    0H                  NO JQE AVAILABLE\n         LA    R1,QBACBDJM         GET ERROR MSG HEADER ADDRESS\n         $STORE R1                 SAVE ERROR MSG IN CURRENT SAVE AREA\n         LA    R4,4                SET ERROR MSG RETURN CODE\n         B     QBACRET             EXIT BUT DON'T RETURN THE JQA\n*\nQBACBDJM DC    CL2'99'             REASON CODE\n         DC    AL1(L'QBACBDJT)     MESSAGE LENGTH\nQBACBDJT DC    C'QBACDISP: JQE/JQA NOT AVAILABLE OR INVALID.'\n*\n*\nQBACBDBR DS    0H                  ERROR GETTING THE BERT\n         LA    R1,QBACBDBM         GET ERROR MSG HEADER ADDRESS\n         $STORE R1                 SAVE ERROR MSG IN CURRENT SAVE AREA\n         LA    R4,4                SET ERROR MSG RETURN CODE\n         B     QBACRJQA            GO RETURN THE JQA\n*\nQBACBDBM DC    CL2'99'             REASON CODE\n         DC    AL1(L'QBACBDBT)     MESSAGE LENGTH\nQBACBDBT DC    C'QBACDISP: ERROR RETURNED LOCATING STQNAME.'\n*\n*  HERE IS THE DELAY REASON TABLE, THEY MUST ALL BE THE SAME LENGTH!\nDLYTAB   DC    C'JES2- NOTSEL'     HAS NOT BEEN SELECTED BY JES2 YET\n         DC    C'/*WITH CARD '\n         DC    C'/*WITHOUT   '\n         DC    C'HOLDFOR TIMR'\n         DC    C'HOLDTIL TIMR'\n         DC    C'GENERAL TIMR'\n         DC    C'OPEN -UNUSED'      UNSUED AT THIS TIME.\n         DC    C'/*AFTER CARD'\n         DC    C'/*BEFORE CRD'\n         DC    C'/*CNTL CONFL'\n         DC    C'CLASS LIMIT '\n         DC    C'JOBNAME LIM '\n         DC    C' - NONE -   '     JOB HAS BEEN SELECTED - NO DELAYS\n         DC    C'USERID LIMIT'     MASKED/USERID LIMIT REACHED\nDLYSEGL  EQU   L'DLYTAB\nDLYTABMX EQU   (*-DLYTAB)/DLYSEGL  NUMBER OF ENTRIES IN TABLE.\n*\n         LTORG ,\n*\n         DROP  R6,R7,R8,R10,R11,R12,R13\n\n         TITLE  'USER EXTENSION MODULE --- SUNTRUST PCE ENTRY POINT'\n\n** * ------------------------------------------------------------- * **\n** * --                                                         -- * **\n** * -- Processor name -- TQEX -                                -- * **\n** * --                                                         -- * **\n** * -- DESC. NAME- 'TIMER QUEUE CNTL FOR SHARED SPOOL MODS'    -- * **\n** * --                                                         -- * **\n** * -- Function --                                             -- * **\n** * --   When posted, locate the SSMT (ecsa ssmt) and from     -- * **\n** * --   there, run our special chain of cntl areas, looking   -- * **\n** * --   for expired tqe's - we check based on \"satisfied time\"-- * **\n** * --   < \"current time\", both values are the 4 high order    -- * **\n** * --   bytes of a $STCK format.  Remove from the chain any   -- * **\n** * --   expired blocks, and adjust pointers (they are forward -- * **\n** * --   and backward chained, with pointers to first and last -- * **\n** * --   in SSMT).                                             -- * **\n** * --     After freeing any unneeded control blocks, issue a  -- * **\n** * --        $POSTXEQ MASPOST=NO macro, and go back to the    -- * **\n** * --     top of the loop and $wait to be posted again.  we   -- * **\n** * --     are only posted by $STIMER - our PCE address is     -- * **\n** * --     saved in the TQEPCE field before callin $STIMER.    -- * **\n** * --                                                         -- * **\n** * --  - notes -                                              -- * **\n** * --                                                         -- * **\n** * --   We are only posted by $STIMER, the $STIMER calls are  -- * **\n** * --   all made from STSCX49A when a job is rejected for a   -- * **\n** * --   time related reason.  Since we are MainTask we can    -- * **\n** * --   use the \"fixed\" name for the n/t pair to locate the   -- * **\n** * --   ssmt area in ecsa.  The module is clear from storage  -- * **\n** * --   at task termination.                                  -- * **\n** * --                                                         -- * **\n** * -- Register conventions - r0 - r2  -- work registers       -- * **\n** * --                        r3 - r10 -- work registers       -- * **\n** * --                        r11      -- address of $HCT      -- * **\n** * --                        r12      -- base                 -- * **\n** * --                        r13      -- address of PCE       -- * **\n** * --                        r14      -- linkage register     -- * **\n** * --                        r15      -- linkage register     -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\nSTPCENT  $ENTRY BASE=R12       PROVIDE PROCESSOR ENTRY POINT\n         USING PCE,R13             EST. ADDRESSABILITY FOR TQEPCE\n         L     R10,PCEWORKA        GET THE ADDR OF THE PCE WORK AREA\n         USING STTQEXW,R10         SET ADDRESSABITLY FOR OUR WORK AREA\n         USING HCT,R11\n** * ------------------------------------------------------------- * **\n** * --                                                         -- * **\n** * --     MAIN LOOP OF THE TQEX PROCESSOR                     -- * **\n** * --                                                         -- * **\n** * -- We have been dispatched becuase one of our two pce's    -- * **\n** * -- was posted when a tqe (pointing to the PCE) expired.    -- * **\n** * -- We now need to do cleanup, running the STTQE chain and  -- * **\n** * -- removing any sttqe timer elements that have expired.    -- * **\n** * -- Finally we issue a $POSTXEQ MASPOST=NO  to get any      -- * **\n** * -- jobs that are ready to run, selected for for work.      -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\n** * ------------------------------------------------------------- * **\n** * --                                                         -- * **\n** * --     LOCATE THE ECSA CONTROL BLOCK (SSMT)                -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\n         MVC   STTXNTN(16),=C'SSM_LOCAL_TOKEN1'\n         XC    STTXNTT,STTXNTT         CLEAR THE TOKEN FIELD NOW\n*\n*  Now we will create a name/token pair at the task level only - it is\n*  available only to JES2 MAINTASK routines, but it can be specified\n*  via a fixed name, not one that needs to be built.\n*\n*\n        $TOKENSR REQUEST=RETRIEVE, LOCATE THE TOKEN VALUE              X\n               NAME=STTXNTN,          NAME COMES FROM HERE             X\n               LEVEL=TASK,             TYPE IS TASK ONLY               X\n               VALUE=STTXNTT             RESULT GOES HERE AND R0\n         LR    R9,R0\n         USING SSMTB,R9\n*\nTQEXLOP  $ACTIVE                    INDICATE PROCESSOR ACTIVE\n         $STCK ADDR=STTXDBL1       SAVE THE CURRENT STCK FORMAT TIME\n** * ------------------------------------------------------------- * **\n** * --                                                         -- * **\n** * -- up front work is now done.  The next thing for us to    -- * **\n** * -- do is to run the STTQE chain and remove any expired     -- * **\n** * -- entries, there may be several simultaneous entries, for -- * **\n** * -- expample if several jobs have /*holdtil 00:00:01,       -- * **\n** * -- so then if any are left, which have not already expired -- * **\n** * -- we update the tqepce address in the tqe area of the     -- * **\n** * -- sttqe area and issue a new $STIMER for the entry with   -- * **\n** * -- the next (lowest) satisified time.                      -- * **\n** * --                                                         -- * **\n** * -- after all that, we issue a $POSTXEQ so jes2 can go find -- * **\n** * -- the jobs that are now available to execute.             -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\n*\n* NOW  LOOK FOR TABLE ENTRIES WITH POPED TIMERS -- AND REMOVE THEM\n*\n* R3=PREV  R4=CUR  R6=POSTING STTQE  R7=TQE WITH LOWEST SATISFIED TIME\n*\n         L     R4,SSMTQCB1         GET POINTER TO FIRST C.B. (OR ZERO)\n         LTR   R4,R4               ZERO - SHOULDN'T BE, BUT OK DEAL...\n         JZ    TABDONE             GO HANDLE AN EMPTY TABLE.\n         XR    R3,R3               THERE IS NO PREVIOUS ENTRY YET\n         XR    R5,R5               THERE IS NO NEXT STTQE FOUND YET\n\n* HERE IS THE SCAN OF THE CHAIN - LOOKING FOR EXPIRED ENTRIES *\n*\nLOPCHN   TM    TQEFLAG1+STTQTQE-STTQE(R4),TQE1TPOP  POPPED YET?\n         JNZ   REMTAB               IF < OR = NOW REMOVE ENT.\n*\n* THAT'S REALLY ALL WE DO IN THE LOOP.\n*\n*  TIME TO BUMP THE POINTERS AND GET THE NEXT ENTRY\nBMPTBL   LR    R3,R4               CURRENT IS NOW TO BE PREVIOUS\n         L     R4,STTQFP-STTQE(R4) GET THE NEXT AS THE CURRENT.\n         LTR   R4,R4\n         JNZ   LOPCHN\n         JZ    TABDONE             IF NO MORE, WE ARE DONE!\n* - REMTAB - REMOVE THE TABLE ENTRY POINTED TO BY R4 (CUR)\nREMTAB   L     R5,STTQFP-STTQE(R4) GET POINTER TO NEXT ITEM\n         LTR   R5,R5               IN NO NEXT ENTRY - THEN SPECIAL\n         JZ    TRUNCTAB              HANDLING IS IN ORDER - TRUNCATE\n         L     R3,STTQBK-STTQE(R4) GET POINTER TO PREV ITEM\n         LTR   R3,R3               IF NO PREV. ITEM - THEN SPECIAL\n         JZ    REMTOPCB              HANDLING - REMOVE TOP ENTRY\n* OK, NOT FIRST ENTRY, NOT LAST ENTRY, - DO SIMPLE SWAP OF PTRS\n         ST    R3,STTQBK-STTQE(R5) SAVE OLD PREV IN NEXT CB'S PREV.\n         ST    R5,STTQFP-STTQE(R3) SAVE OLD NEXT IN PREV CB'S NEXT\n*     THEY ARE SWAPPED - IT IS OUT OF THE CHAIN.\nRELCEL   $GETHP TYPE=FREE,CELL=(R4)   REMOVE THE CB FROM STORAGE\n         LR    R4,R3               MAKE THE PREV. CB = THE CURRENT CB\n         J     BMPTBL              AND THEN BUMP TABLE POINTERS\n*\nTRUNCTAB LTR   R3,R3               FIRST SEE IF THERE IS A PREV ENTRY\n         JZ    ZEROTAB             IF NOT WE ARE REMOVING THE ONLY CB\n         MVC   STTQFP-STTQE(4,R3),$ZEROS ZERO THE FORWARD PTR IN PREV\n         J     RELCEL              GO RELEASE CELL AND RETURN TO LOOP\n*\nREMTOPCB ST    R5,SSMTQCB1         SAVE PTR TO NEXT CB IN ECSA AREA\n         MVC   STTQBK-STTQE(4,R5),$ZEROS  ZERO BKWD PTR IN NEW TOP CB\n         $GETHP TYPE=FREE,CELL=(R4)  FREE THE CB NOW\n         LR    R4,R5               MAKE THE NEXT CB THE CURRENT AND\n         J     LOPCHN              AND PROCESS IT AS THE FIRST\n*\nZEROTAB  EQU   *                   REMOVE THE LAST TABLE ENTRY\n         $GETHP TYPE=FREE,CELL=(R4)  REMOVE THE LAST CB\n         XC    SSMTQCB1,SSMTQCB1   ZERO PTR IN ECSA TO FIRST CB\nTABDONE  EQU   *          ALL OLD ENTRIES ARE PROCESSED -\n*\n         $POSTXEQ MASPOST=NO       TELL JES TO LOOK FOR JOBS NOW!\n*\n         $DORMANT                  OK TO END JES2 NOW... IF YA WANT TO\n         $WAIT TQEX,INHIBIT=NO     JUST WAIT TILL WE GET POSTED AGAIN.\n         J     TQEXLOP             GO PROCESS SOME MORE\n         TITLE 'USER TABLE MODULE -- EPILOG'\n         $MODEND ,\n         SPACE 2\n         END   ,                   END OF MODULE\n++SRC(STSCX50A) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).\nSTSCX50A TITLE 'JES2 USER ENVIRONEMNT END OF INPUT EXIT'\n***********************************************************************\n*                                                                     *\n*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *\n*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS *\n*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED  *\n*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF   *\n*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE *\n*  USEFULLNESS OF THE MATERIAL.                                       *\n*                                                                     *\n*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *\n*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE  *\n*  IN THE FUTURE.                                                     *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n* EXIT 50 - JES2 USERTASK - END OF INPUT EXIT - CALLED FOR INTERNAL\n* READER END OF INPUT - YES! THAT INCLUDES TSO SUBMITTED JOBS!\n*\n* THE FUNCTION IS TO CHECK FOR A /*ROUTE XEQ HERE, AND SET A SYSAFF IF\n* NEEDED AND THEN TO $CALL THE COMMON STSC2050 MODULE TO COPY THE JCTX\n* TO THE JQEX (BERT EXTENSION).\n***********************************************************************\n         COPY  $HASPGBL            INCLUDE THE JES GLOBAL VALUES\n         PRINT ON                  RETORE FULL PRINTING\nSTSCX50A $MODULE TITLE='JES2 END OF INPUT USER EXIT',                  X\n               RMODE=ANY,                                              X\n               ENVIRON=(USER,ANY),                                     X\n               RPL,                GENERATE RPL DSECT                  X\n               $BERT,              (BERT)                              X\n               $BERTTAB,           (BERT)                              X\n               $BUFFER,            HASP SPOOL BUFFER DSECT             X\n               $CADDR,                                                 X\n               $CATBERT,           (BERT)                              X\n               $CMB,               ($RDRWORK)                          X\n               $DCT,               (INFORM)                            X\n               $HASPEQU,           HASP EQUATES                        X\n               $HCCT,              (BERT)                              X\n               $HCT,                                                   X\n               $HFAME,             ($HCCT)                             X\n               $JCT,               HASP JOB CONTROL TABLE DSECT        X\n               $JCTX,              HASP JOB CONTROL TABLE DSECT        X\n               $JQE,               HASP JOB QUEUE ELEMENT DSECT        X\n               $MIT,               HASP MIT DSECT                      X\n               $MITETBL,                                               X\n               $PADDR,             HASP PADDR DSECT                    X\n               $PARMLST,                                               X\n               $PCE,               HASP PROCESSOR CONTROL ENTRY DSECT  X\n               $PSV,                                                   X\n               $QSE,               ($HCT)                              X\n               $RDRWORK,           HASP RDR PCE WORKAREA DSECT         X\n               $SAFINFO,           ($RDRWORK)                          X\n               $SCAT,              HASP SCAT DSECT                     X\n               $SCANTAB,           HASP SCAN TABLE DSECT               X\n               $SJB,               (INFORM)                            X\n               $TQE,               ($SJB)                              X\n               $TRE,               HASP TRE DSECT                      X\n               $USERCBS,           USER DSECTS                         X\n               $XECB,              ($HCT)                              X\n               $XPL\n         USING JCT,R10             AS PASSED\n         USING XPL,R5                  BY THE\n         USING PCE,R13                    CALLING\n         USING HCCT,R11                      MODULES\nEXIT50A  $ENTRY BASE=(R12),CSECT=NO,ENTRY=YES,REGUSE=(R15)\n         $SAVE  ,                  SAVE CALLER'S REGISTERS\n         LR    R12,R15             SET BASE REGISTER\n         SPACE 2\n*\n*  UP FRONT HOUSEKEEPING HERE...\n*\n         LR    R5,R1               SET BASE FOR THE XPL\n         USING XPL,R5\n         LTR   R10,R10             CHECK IF A JCT WAS PROVIDED\n         BZ    RETURN              NO - JUST RETURN\n*\n* NOTE! WE GET JQE FROM XPL - IT ISN'T PASSED TO US IN 13 LIKE EXIT20\n*\n         ICM   R9,B'1111',X050JQE  GET AN UPDATE MODE JQE (JQA)\n         BZ    RET00               IF NOT VALID -- THEN JUST RETURN\n*\n*  CHECK FOR \"HERE\" TYPE OF ROUTING\n*  IF HERE WAS SPECIFIED - CLEAR THE FIELD AND IF NO AFFINITY IS\n*  ALREADY SET - THEN SET IT FOR \"HERE\"\n*\n         USING JQE,R9\n         CLC   JCTSCHEN(5),=C'HERE '   CHECK FOR \"HERE\" ROUTING\n         BNE   NOTHERE                 DON'T SET IN SCHENV IF HERE\n*\n* ALWAYS CLEAR THE \"HERE \" LITERAL OUT OF JCTSCHEN, NEVER LEAVE IT\n*\n         MVI   JCTSCHEN,C' '\n         MVC   JCTSCHEN+1(L'JCTSCHEN-1),JCTSCHEN  CLEAR THE FIELD\n*\n* TEST TO SEE IF AUTOMATIC RESTART MANAGER HAS OVERRIDDEN SYSAFF\n* AND IF  SO,  LEAVE IT ALONE.\n*\n         TM    X050FLG1,X0501ARM   DID ARM OVERRIDE SYSAFF?\n         BNZ   NOTHERE             IF SO, DON'T CHANGE IT NOW\n*\n* ELSE  -\n*  RESET THE AFFINIT TO \"HERE\" REGUARDLESS OF ANY OTHER SYSAFF=\n*\n         $SETAFF REQUEST=CLEAR,AFFIELD=X050SAF\n         $SETAFF REQUEST=MOVE,AFFIELD=X050SAF,                         X\n               ID=CCTTOQUL\n         DROP  R9\nNOTHERE  EQU   *\n*\n* CALL OUR COMMON ROUTINE TO COPY  JCT EXTENSIONS TO JQE BERTS\n*     ( WE ARE ALREADY IN USER ENVIRONMENT SO JUST DO A $CALL)\n*\n         $CALL STSX2050,            CALL THE COMMON COPY ROUTINE       X\n               PARM0=(R5)             SET R0 = THE XPL WE HAD\n         LTR   R15,R15             CHECK THE RETURN CODE FIRST\n         JZ    RET00               IF OK, THEN JUST END\n*                                  OTHERWISE ISSUE A WTO MESSAGE\n         WTO   '$HASP999 - ERROR RETURNED GETTING BERT IN STSCX50A.'\n*\n********************************************************************\n*  EXIT RETURN POINT\n********************************************************************\nRET00    DS    0H\n         XR    R15,R15             SET NORMAL RETURN CODE\n*\nRETURN   DS    0H\n         $RETURN RC=(R15)          RETURN TO CALLER\n*\n         $MODEND ,\n         END   ,\n++SRC(STSCX04A) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).\n* *%PDSDOC 00 SSMods exits 4a & 54a for /*ROUTE XEQ STATEMENTS\n*********************************************************************\n*                                                                   *\n*                        HASP EXIT 4A AND 54A                       *\n*                  JECL CONTROL STATEMENT SCAN #1                   *\n*                                                                   *\n*  These exits handle JES2 maintask and user address space jcl      *\n*  scans for \"/*ROUTE XEQ resname\" statements.                      *\n*  Exits 04B and 54B for the scan of other statments.  The          *\n*  requirements for /*ROUTE XEQ resname are sufficiently different  *\n*  to justify this seperate set of exits.                           *\n*                                                                   *\n*  FUNCTION -                                                       *\n*                                                                   *\n*   These exits look for /*ROUTE XEQ resname or                     *\n*   /*ROUTE XEQ nodename statements.   When one is found -          *\n*    1 - Isolate the resname or nodename value.                     *\n*    2 - Test the value to see if it is a valid SCHENV name.        *\n*    3 - If an INVALID SCHENVNAME, assume it is a real              *\n*        JES2 route statement, and leave it for JES2 to handle.     *\n*    4 - If a VALID SCHENVNAME, then update the JCT with the        *\n*        new envirnoment name - JCTSCHENV is the field updated.     *\n*    5 - Comment out the statement so JES2 doesn't know about it.   *\n*                                                                   *\n*                                                                   *\n*  ENTRY POINT -                                                    *\n*    EXIT04A                                                        *\n*                                                                   *\n*                                                                   *\n*  ATTRIBUTES -                                                     *\n*                                                                   *\n*    AC=1  AMODE=31  RMODE=ANY                                      *\n*                                                                   *\n*                                                                   *\n*  INPUT REGISTERS:     (NOTE: not all passed values doc'd here.)   *\n*                                                                   *\n*        R0     Pointer to the XPL                                  *\n*                 XPLID     eyecatcher                              *\n*                 XPLXITID  exit id #                               *\n*                 X004IND  = 00  = JCL                              *\n*                          = 01  = JECL                             *\n*                 X004COND  condition byte                          *\n*                     x004CONT  - continuation indicator            *\n*                     x004CMDD  - /*$ command statement             *\n*                     x004JOBP  - /*JOBPARM                         *\n*                 X004RESP  Response Byte                           *\n*                     X004XSNC  - exit supplied next card           *\n*                     X004XSEM  - exit supplied msg in x004jcmt     *\n*                     X004JCMT  - skip processing card              *\n*                 X004CARD  80 byte card image                      *\n*                 X004JXWR  80 byte exit work area (JCTXWRK)        *\n*                 X004JCT   JCT pointer                             *\n*                 X004JQE   JQE pointer                             *\n*                 X004AREA  JRWAREA                                 *\n*                 X004STMT  concatenated statemnt buffer            *\n*                 X004STML  statement label                         *\n*                 X004STMV  statement verb                          *\n*                                                                   *\n*        R1     Pointer to 3-word list                              *\n*                 word1 -  pointer to image buffer                  *\n*                 word2 -  pointer to exit flg byte JRWFLAGX in JRW *\n*                 word3 -  pointer to JCTXWRK in the JCT            *\n*                                                                   *\n*        R2-10  N/A                                                 *\n*        R11    HCT ADDRESS                                         *\n*        R12    N/A                                                 *\n*        R13    PCE ADDRESS                                         *\n*        R14    RETURN ADDRESS                                      *\n*        R15    ENTRY ADDRESS                                       *\n*                                                                   *\n*     OUTPUT REGISTERS:                                             *\n*        R0-14  UNCHANGED                                           *\n*        R15:   RETURN CODE                                         *\n*               rc=00  = Continue Normally                          *\n*               rc=04  = Ignore other exits                         *\n*               rc=08  = No processing - write to JCL dataset       *\n*               rc=12  = Cancel Job                                 *\n*               rc=16  = Purge job                                  *\n*                                                                   *\n*     Register DIFFERENCES BETWEEN exit04 and exit 54               *\n*                                                                   *\n*        r11  -  HCCT in exit 54 not the HCT as in exit 4           *\n*        r13  -  SAVE AREA in exit 54, not the PCE address          *\n*                                                                   *\n*                                                                   *\n*     REGISTER USAGE(INTERNAL):                                     *\n*        R0-9   WORK REGISTERS                                      *\n*        R10    JCT ADDRESS                                         *\n*        R11    HCT ADDRESS                                         *\n*        R12    BASE REGISTER                                       *\n*        R13    PCE ADDRESS                                         *\n*        R14-15 WORK AND LINKAGE REGISTERS                          *\n*                                                                   *\n*     NOTE -                                                        *\n*      We will use the provided work area instead of acquiring one  *\n*      for ourselves.  The provided 80 bytes are currently enough   *\n*      to handle the IWMSEVWK area, but this may change in the      *\n*      future, so watch the size of work area needed by IWMSEVAL.   *\n*                                                                   *\n*      This exit is intended for use with JES2 1.7                  *\n*                                                                   *\n*                                                                   *\n*     AUTHOR: Stpehen McColley                                      *\n*             Atlanta, GA.                                          *\n*********************************************************************\n* *-*-*-----------------------------------------------------------*-*-*\n* *-                                                                 -*\n* *-     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE-*\n* *-  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY-*\n* *-  IS MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS   -*\n* *-  ASSUMED FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY  -*\n* *-  THE USE OF THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY  -*\n* *-  TO EVALUATE THE USEFULLNESS OF THE MATERIAL.                   -*\n* *-                                                                 -*\n* *-     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO     -*\n* *-  DATE, NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR        -*\n* *-  EXTENSIONS MADE IN THE FUTURE.                                 -*\n* *-                                                                 -*\n* *-*-*-----------------------------------------------------------*-*-*\n         TITLE 'USER EXIT04-A HANDLES /*ROUTE XEQ STATEMENTS'\n         COPY  $HASPGBL\nSTSCX04A $MODULE ENVIRON=JES2,                                         X\n               RMODE=ANY,                                              X\n               IBMJES2=SAMPLE,                                         X\n               TITLE='JES2 EXIT4A ',                                   X\n               CVT,                                                    X\n               PSA,                                                    X\n               RPL,                                                    X\n               $BUFFER,                                                X\n               $CADDR,                                                 X\n               $CMB,                                                   X\n               $DCT,                                                   X\n               $HASPEQU,                                               X\n               $HCT,                                                   X\n               $HCCT,                                                  X\n               $HFAME,                                                 X\n               $JCT,                                                   X\n               $JQE,                                                   X\n               $JRW,                                                   X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PADDR,                                                 X\n               $PARMLST,                                               X\n               $PCE,                                                   X\n               $PSV,                                                   X\n               $QSE,                                                   X\n               $RDRWORK,                                               X\n               $SAFINFO,                                               X\n               $SCAT,                                                  X\n               $SQD,                                                   X\n               $TRE,                                                   X\n               $TRX,                                                   X\n               $TQE,                                                   X\n               $USERCBS,                                               X\n               $XECB,                                                  X\n               $XIT,                                                   X\n               $XPL\n\nEXIT04A  $ENTRY BASE=R12,SAVE=YES   EXIT ROUTINE ENTRY POINT\n\n*********************************************************************\n*                                                                   *\n*        SAVE CALLER'S REGISTERS AND ESTABLISH ADDRESSABILITIES.    *\n*                                                                   *\n*********************************************************************\n        $ENVIRON PUSH,                                                 X\n               ENVIRON=(USER,ANY),  SET PROPER ENVIRONMENT             X\n               SETR11=YES\n\n\nCALLX54  $EXIT 54,                  CALL THE COMMON (EXIT54) ROUTINE   X\n               XPL=(R0),            USING THE PASSED XPL               X\n               MAXRC=12\n         $ENVIRON POP,              RESTORE THE ENVIRONMENT            X\n               SETR11=YES\n         $RETURN RC=(R15)           RETURN TO JES2 MAIN TASK CALLER\n\n         DROP  R12\n         LTORG\n         $MODEND\nAPARNUM  DC    CL8'NONE'            APAR NUMBER - WHAT A LAUGH\nPTFNUM   DC    CL8'NONE'            PTF NUMBER... WHAT A LAUGH\n         END   ,                    END OF STSCX04A\n++SRC(STSCX54A) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).\n* *%PDSDOC 00 SSMods exits 4a & 54a for /*ROUTE XEQ STATEMENTS\n*********************************************************************\n*                                                                   *\n*                        HASP EXIT 4A AND 54A                       *\n*                   JCL CONTROL STATEMENT SCAN #1                   *\n*                                                                   *\n*  These exits handle JES2 maintask and user address space jcl      *\n*  scans for \"/*ROUTE XEQ resname\" statements.                      *\n*  Exits 04B and 54B for the scan of other statments.  The          *\n*  requirements for /*ROUTE XEQ resname are sufficiently different  *\n*  to justify this seperate set of exits.                           *\n*                                                                   *\n*  FUNCTION -                                                       *\n*                                                                   *\n*   These exits look for /*ROUTE XEQ resname or                     *\n*   /*ROUTE XEQ nodename statements.   When one is found -          *\n*    1 - Isolate the resname or nodename value.                     *\n*    2 - Test the value to see if it is a valid SCHENV name.        *\n*    3 - If an INVALID SCHENVNAME, assume it is a real              *\n*        JES2 route statement, and leave it for JES2 to handle.     *\n*    4 - If a VALID SCHENVNAME, then update the JCT with the        *\n*        new envirnoment name - JCTSCHENV is the field updated.     *\n*    5 - Comment out the statement so JES2 doesn't know about it.   *\n*                                                                   *\n*                                                                   *\n*  ENTRY POINT -                                                    *\n*    EXIT54A                                                        *\n*                                                                   *\n*                                                                   *\n*  ATTRIBUTES -                                                     *\n*                                                                   *\n*    AC=1  AMODE=31  RMODE=ANY                                      *\n*                                                                   *\n*                                                                   *\n*  INPUT REGISTERS:     (NOTE: not all passed values doc'd here.)   *\n*    NOTE: THE XPL FOR EXIT 04 AND EXIT 54 ARE IDENTICAL.           *\n*                                                                   *\n*        R0     Pointer to the XPL                                  *\n*                 XPLID     eyecatcher                              *\n*                 XPLXITID  exit id #                               *\n*                 X054IND  = 00  = JCL                              *\n*                          = 01  = JECL                             *\n*                 X004COND  condition byte                          *\n*                     X054CONT  - CONTINUATION INDICATOR            *\n*                     X054CMDD  - /*$ COMMAND STATEMENT             *\n*                     X054JOBP  - /*JOBPARM                         *\n*                 X054RESP  RESPONSE BYTE                           *\n*                     X054XSNC  - EXIT SUPPLIED NEXT CARD           *\n*                     X054XSEM  - EXIT SUPPLIED MSG IN X004JCMT     *\n*                     X054JCMT  - SKIP PROCESSING CARD              *\n*                 X054CARD  80 BYTE card image                      *\n*                 X054JXWR  80 BYTE exit work area (JCTXWRK)        *\n*                 X054JCT   JCT POINTER                             *\n*                 X054JQE   JQE POINTER                             *\n*                 X054AREA  JRWAREA                                 *\n*                 X054STMT  CONCATENATED STATEMNT BUFFER            *\n*                 X054STML  STATEMENT LABEL                         *\n*                 X054STMV  STATEMENT VERB                          *\n*                                                                   *\n*        R1     Pointer to 3-word list                              *\n*                 word1 -  pointer to image buffer                  *\n*                 word2 -  pointer to exit flg byte JRWFLAGX in JRW *\n*                 word3 -  pointer to JCTXWRK in the JCT            *\n*                                                                   *\n*        R2-10  N/A                                                 *\n*        R11    HCT ADDRESS                                         *\n*        R12    N/A                                                 *\n*        R13    PCE ADDRESS                                         *\n*        R14    RETURN ADDRESS                                      *\n*        R15    ENTRY ADDRESS                                       *\n*                                                                   *\n*     OUTPUT REGISTERS:                                             *\n*        R0-14  UNCHANGED                                           *\n*        R15:   RETURN CODE                                         *\n*               rc=00  = Continue Normally                          *\n*               rc=04  = Ignore other exits                         *\n*               rc=08  = No processing - write to JCL dataset       *\n*               rc=12  = Cancel Job                                 *\n*               rc=16  = Purge job                                  *\n*                                                                   *\n*     Register DIFFERENCES BETWEEN exit04 and exit 54               *\n*                                                                   *\n*        r11  -  HCCT in exit 54 not the HCT as in exit 4           *\n*        r13  -  SAVE AREA in exit 54, not the PCE address          *\n*                                                                   *\n*                                                                   *\n*     REGISTER USAGE(INTERNAL):                                     *\n*        R0-9   WORK REGISTERS                                      *\n*        R10    JCT ADDRESS                                         *\n*        R11    HCT ADDRESS                                         *\n*        R12    BASE REGISTER                                       *\n*        R13    PCE ADDRESS                                         *\n*        R14-15 WORK AND LINKAGE REGISTERS                          *\n*                                                                   *\n*     NOTE -                                                        *\n*      We will use the provided work area instead of acquiring one  *\n*      for ourselves.  The provided 80 bytes are currently enough   *\n*      to handle the IWMSEVWK area, but this may change in the      *\n*      future, so watch the size of work area needed by IWMSEVAL.   *\n*                                                                   *\n*      This exit is intended for use with JES2 1.7                  *\n*                                                                   *\n*                                                                   *\n*     AUTHOR: Stpehen McColley                                      *\n*             Atlanta, GA.                                          *\n*********************************************************************\n* *-*-*-----------------------------------------------------------*-*-*\n* *-                                                                 -*\n* *-     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE-*\n* *-  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY-*\n* *-  IS MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS   -*\n* *-  ASSUMED FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY  -*\n* *-  THE USE OF THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY  -*\n* *-  TO EVALUATE THE USEFULLNESS OF THE MATERIAL.                   -*\n* *-                                                                 -*\n* *-     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO     -*\n* *-  DATE, NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR        -*\n* *-  EXTENSIONS MADE IN THE FUTURE.                                 -*\n* *-                                                                 -*\n* *-*-*-----------------------------------------------------------*-*-*\n         TITLE 'USER EXIT54-A HANDLES /*ROUTE XEQ STATEMENTS'\n         COPY  $HASPGBL\n*              SYSP=(GEN,GEN,DATA,NOGEN,NOGEN)\nSTSCX54A $MODULE ENVIRON=(USER,ANY),                                   X\n               RMODE=ANY,                                              X\n               IBMJES2=SAMPLE,                                         X\n               TITLE='JES2 EXIT54A',                                   X\n               CVT,                                                    X\n               PSA,                                                    X\n               RPL,                                                    X\n               $BUFFER,                                                X\n               $CADDR,                                                 X\n               $CMB,                                                   X\n               $DCT,                                                   X\n               $HASPEQU,                                               X\n               $HCT,                                                   X\n               $HCCT,                                                  X\n               $HFAME,                                                 X\n               $JCT,                                                   X\n               $JQE,                                                   X\n               $JRW,                                                   X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PADDR,                                                 X\n               $PARMLST,                                               X\n               $PCE,                                                   X\n               $PSV,                                                   X\n               $QSE,                                                   X\n               $RDRWORK,                                               X\n               $SAFINFO,                                               X\n               $SCAT,                                                  X\n               $SQD,                                                   X\n               $TRE,                                                   X\n               $TRX,                                                   X\n               $TQE,                                                   X\n               $USERCBS,                                               X\n               $XECB,                                                  X\n               $XIT,                                                   X\n               $XPL\n\n\n*********************************************************************\n*                                                                   *\n*        SAVE CALLER'S REGISTERS AND ESTABLISH ADDRESSABILITIES.    *\n*                                                                   *\n*********************************************************************\n\nEXIT54A  $ENTRY BASE=R12,SAVE=YES   EXIT ROUTINE ENTRY POINT\n         USING XPL,R8\n         USING JCT,R10\n         LR    R8,R0                COPY THE XPL POINTER\n         L     R10,X054JCT          GET THE POINTER TO THE JCT\n         XR    R6,R6                CLEAR THE POINTER TO OUR WORK AREA\n\n*********************************************************************\n*                                                                   *\n*        DETERMINE IF THIS EXIT WAS ENTERED FOR A JES2 CONTROL      *\n*        STATEMENT.                                                 *\n*                                                                   *\n*********************************************************************\n         TM    X054IND,X054JECL    IS THS A JECL STATEMENT?\n         JNO   RETURN0             IF NOT - i DON'T CARE ABOUT IT !\n\n         TM    X054COND,X054CONT    IS THIS A CONTINUATION CARD?\n         JO    RETURN0              IF SO, WE DON'T DO CONTINUATIONS!\n\n*********************************************************************\n*                                                                   *\n*        DETERMINE IF A JCT IS PRESENT.                             *\n*                                                                   *\n*********************************************************************\n\n         LTR   R10,R10             JCT PRESENT?\n         BZ    RETURN0             NO - BRANCH, RETURN\n\n\n*********************************************************************\n*                                                                   *\n*        DETERMINE IF A \"/*ROUTE XEQ\" CONTROL STATEMENT IS BEING    *\n*        PROCESSED.                                                 *\n*                                                                   *\n*********************************************************************\n\n         L     R3,X054CARD         GET CONTOL STATEMENT IMAGE ADDRESS\n         CLC   =C'/*ROUTE ',0(R3)   /*ROUTE STATEMTNE ?\n         BNE   RETURN0             NO - BRANCH, RETURN\n         CLI   XPLXITID,X'04'      WERE WE CALLED FROM EXIT04?\n         JNE   DOOBTAIN            IF NOT JUST DO USERMODE OBTAIN.\n        $ENVIRON PUSH,ENVIRON=JES2,SETR11=YES\n         $GETWORK WORDS=(@454LEN)/4,USE=SSMY,LOC=ANY\n        $ENVIRON POP,SETR11=YES\n         J     STOROK              WE HAVE STORAGE - JUMP OVER OBTAIN\nDOOBTAIN EQU   *\n*\n         L     R2,X0454LEN\n         STORAGE OBTAIN,LENGTH=(2),LOC=RES\n* A WAIT IS ACCEPTABLE IN THE USER ENVIRONMENT READER ROUTINE. *\nSTOROK   EQU   *\n         LR    R6,R1               NOW WE HAVE A WORK AREA.\n         LR    R14,R1              GET THE WORK AREA - TO ADDR\n         L     R15,X0454LEN        TO LENGTH = LENGTH OF AREA\n         XR    R1,R1               FROM LENG = ZERO = PAD CHAR\n*                                  FROM ADDR = WHO CARES, MOVING 0 LEN\n         MVCL  R14,R0              CLEAR IT ALL WITH THE MVCL\n         USING EXIT454,R6\n         L     R1,X0454LEN\n         ST    R1,X454LEN          SAVE LENGTH FOR LATER RELEASE\n         MVC   X454EYE,=C'SSMY'    MOVE AN EYECATCHER\n         MVC   CJCTWRK,JCTXWRK     SAVE THE OLD JCTXWRK\n* NEXT SEE IF THIS IS AN XEQ STATEMENT OR NOT\n         LA    R3,8(R0,R3)          POINT PAST CONSTANT VALUE\n         LA    R2,52               MAX VALUE TO LOOK FOR XEQ VALUE\n*                                   72 - LEADING LIT. - TRAILING CL8\nFINDXEQ  EQU   *\n         CLI   0(R3),C' '\n         BE    LOOPXEQ            IF BLANK JUST KEEP LOOKING\n         CLC   XEQ,0(R3)          WE ARE ONLY LOOKING FOR XEQ CARDS\n         BE    XEQCARD              - IF WE FIND ONE, BRANCH AN CONT.\n         B     RETURN0                - ELSE JUST QUIT ( GIVE TO JES)\nLOOPXEQ  LA    R3,1(R0,R3)        BUMP POINTER IN ONE\n         BCT   R2,FINDXEQ           - IF WE RUN OUT OF CARD -\n         B     RETURN0            CAN NOT IDENTIFY, just quit -\n*                                  and give it to jes to handle\nXEQCARD  EQU   *\n*********************************************************************\n*                                                                   *\n*        ISOLATE THE RESOURCE NAME OR JES2 DESTINATION.             *\n*                                                                   *\n*********************************************************************\n\n         LA    R3,L'XEQ(R0,R3)     POINT PAST CONSTANT VALUE\nFINDNAME CLI   0(R3),C' '\n         BNE   PASTXEQ            WE HAVE FOUND THE NAME VALUE\n         LA    R3,1(R0,R3)        BUMP INTO CARD\n         BCT   R2,FINDNAME         LIMIT SEARCH INTO CARD\n         B     RETURN0            JUST LET JES2 FIGURE IT OUT\n** * ------------------------------------------------------------- * **\n** * -- NOTE - WE LOSE ADDRESSABILITY TO OUR THREE PASSED WORDS -- * **\n** * -- HERE.  IF WE NEED THEM IN THE FUTURE USE A DIFFERENT REG.- * **\n** * ------------------------------------------------------------- * **\nPASTXEQ  EQU   *                  R3 POINTS TO START OF INPUT VALUE\n         LA    R1,16(R0,R3)         SET END - IN CASE NO END IS FOUND\n         TRT   0(16,R3),DELIMTAB    FIND END OF RESOURCE NAME\n         SLR   R1,R3                CALCULATE RESOURCE NAME LENGTH\n         LR    R2,R1                SAVE RESOURCE NAME LENGTH\n         CH    R2,=H'16'\n         BNH   LT16OK                IF 16 OR LESS THEN CONTINUE AS IS\n         LH    R2,=H'16'             FORCE A MAX. VALUE IF GT 16\nLT16OK   EQU   *\n         LTR   R2,R2              TEST FOR ZERO VALUE\n         BZ    NOBCTR              IF ZERO DO NOT REDUCE\n         BCTR  R2,R0                 REDUCE BY ONE FOR EXECUTE LATER\nNOBCTR   EQU   *\n** * ------------------------------------------------------------- * **\n** * --    R2 = LENGTH OF RESOURCE NAME -- R3 = POINTER TO NAME -- * **\n** * ------------------------------------------------------------- * **\n\n         MVI   RESNAME,C' '               CLEAR THE RESOURCE NAME\n         MVC   RESNAME+1(L'RESNAME-1),RESNAME  BEFORE ANYTHING ELSE\n\n*********************************************************************\n*                                                                   *\n*    DETERMINE IF THIS IS A SHARED SPOOL MODS ROUTING REQUEST OR -  *\n*    IF IT IS A VALID /*ROUTE CONTROL STATMENT (TO A DESTID)        *\n*                                                                   *\n*    IF THE LOCATION FROM THE ROUTE STATEMENT IS A VALID SCHENV     *\n*    VALUE THEN USE IT FOR ROUTING - ELSE LET JES2 HAVE THE         *\n*    STATEMENT TO PROCESS AS IS.                                    *\n*                                                                   *\n*********************************************************************\n* THE NEXT INSTRUCTION THE MVC RESNAME(0) IS EXECUTED BY THE NEXT   *\n* INSTRUCTION AFTER THAT - DON'T GET RATTLED ABOUT IT.              *\n*********************************************************************\nMVRESNAM MVC   RESNAME(0),0(R3)            MOVE THE RESOURCE NAME\n         EX    R2,MVRESNAM             SET SCHEDULING ENVIRONMENT\n*********************************************************************\n*          DON'T LET JES HAVE THE SPECIAL CASE OF /*ROUTE XEQ HERE  *\n*********************************************************************\n         CLC   =C'HERE ',RESNAME       IS THIS A SPECIAL CASE?\n         BE    SETINJCT                  IS SO SKIP SETTING WITH WLM...\n         MVC   IWMSEVWK(IWMSEVLN),IWMSEVL  SET IWMSEVAL PARM LIST\n\n         IWMSEVAL SCHENV=RESNAME,MF=(E,IWMSEVWK)\n\n         LTR   R15,R15\n         BNZ   RETURN0             YES - BRANCH, CONTINUE\n*\n* OLD LOGIC BELOW: IF VALID DESTID THEN LET JES2 HANDLE IT...\n*\n\n*********************************************************************\n*                                                                   *\n*        SET THE SCHEDULING ENVIRONMENT IN THE JCT.                 *\n*  NOTE- WE CHECK THE CI TEXT TO SEE IF THERE IS A SCHENV= ON THE   *\n*        JOBCARD, AND IF THERE IS WE CLEAR THIS VALUE IN THE JCT.   *\n*********************************************************************\n\nSETINJCT EQU   *\n         MVI   JCTSCHEN,C' '        BLANK INIT SCHEDULING ENVIRONMENT\n         MVC   JCTSCHEN+1(L'JCTSCHEN-1),JCTSCHEN  *\n         MVC   JCTSCHEN(L'JCTSCHEN),RESNAME\n\n*********************************************************************\n*                                                                   *\n*        CONVERT THE \"/*ROUTE XEQ\" STATEMENT TO A JCL COMMENT       *\n*        STATEMENT.  THIS WILL PREVENT AN INVALID DESTINATION FROM  *\n*        CAUSING A JCL ERROR.                                       *\n*                                                                   *\n*********************************************************************\n\n         B     RETURN8              BRANCH - SET RETURN CODE = 8\n\n*********************************************************************\n*                                                                   *\n*        RETURN TO CALLER.                                          *\n*                                                                   *\n*********************************************************************\n\nRETURN0  EQU   *\n         XR    R15,R15              PRESET RETURN CODE\n         LTR   R6,R6                DO WE HAVE A WORK AREA?\n         BZ    RETURN               IF NOT JUST END NOW\n         B     RETSTG                 ELSE RELEASE OUR WORK AREA FIRST\nRETURN8  EQU   *\n         LA    R15,8(0,0)           SET RC=8\n         LTR   R6,R6                DO WE HAVE A WORK AREA?\n         BNZ   RETSTG               IF SO RETURN THE WORK AREA FIRST\nRETURN  $RETURN RC=(R15)            RETURN TO CALLER\nRETSTG   EQU   *\n         LR    R5,R15               SAVE THE RETURN CODE FOR NOW.\n         MVC   JCTXWRK,CJCTWRK      RESTORE THE ORIGINAL JCTXWRK FIRST\n         CLI   XPLXITID,X'04'      IS IT EXIT04 THAT CALLED US?\n         JNE   DOURLS              IF NOT THEN DO RELEASE STORAGE CODE\n* ELSE USE $RETWORK TO RETURN OUR STORAGE AREA\n        $ENVIRON PUSH,ENVIRON=JES2,SETR11=YES\n         $RETWORK  (R6)            * RETURN OUR WORK AREA NOW\n        $ENVIRON POP,SETR11=YES\n         LR    R15,R5              RESTORE RTN CODE FROM TMP REG NOW\n         B     RETURN\nDOURLS   EQU   *\n         LR    R5,R15              SAVE RETURN CODE FOR A SECOND\n         L     R8,X454LEN          GET THE LENGTH OF STORAGE TO RELSE\n         STORAGE RELEASE,ADDR=(R6),LENGTH=(R8)\n         LR    R15,R5               RESTORE RTN CODE IN TMP REG\n         B     RETURN               JUST RETURN - WE ARE DONE HERE\n*\n\n         IWMSEVAL MF=(L,IWMSEVL)   IWMSEVAL PARM LIST\nIWMSEVLN EQU   *-IWMSEVL\nX0454LEN DC    AL4(@454LEN)        ADCON WITH LENGTH OF DSECT=EXIT454\nXEQ      DC    C'XEQ '              CHECK OF XEQ TYPE /*ROUTE ONLY!\nDELIMTAB DC    256X'00'             EXIT04 TRANSLATE TABLE\n         ORG   DELIMTAB\n         DC    X'FF'                HEX ZEROS ARE INVALID\n         ORG   DELIMTAB+C' '\n         DC    X'FF'                HIGH VALUES ARE INVALID\n         ORG   DELIMTAB+256         BACK TO NORMAL\n         LTORG\n\n         DROP  R6,R10,R8\n\n        $MODEND ,\nAPARNUM  DC    CL8'NONE'            APAR NUMBER - WHAT A LAUGH\nPTFNUM   DC    CL8'NONE'            PTF NUMBER... WHAT A LAUGH\nEXIT454  DSECT                     EXIT04 WORKAREA\nX454LEN  DS    F                   LENGTH OF THIS WORK AREA\nX454EYE  DS    CL4                 EYECATCHER FOR THIS WORK AREA\nRESNAME  DS    CL16                RESOURCE NAME\nCJCTWRK  DS    CL80                80 BYTE WORK AREA TO SAVE JCTWK AREA\nIWMSEVWK DS    (IWMSEVLN)X         IWMSEVAL PARM LIST WORKAREA\n@454LEN  EQU   (((*-EXIT454)+7)/8)*8) WRKAREA LEN ROUNDED TO DBLWORD\n\n         IWMSET\n         IWMYCON\n\n         END\n++SRC(STSCX54B) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).\n* *%PDSDOC 00 SSMODS EXIT 54B FOR ALL OTHER SSM STATEMENTS\n*********************************************************************\n*                                                                   *\n*                           HASP EXIT 54B                           *\n*                   JCL CONTROL STATEMENT SCAN #2                   *\n*                                                                   *\n*  THIS EXIT HANDLES JES2 MAINTASK AND USER ADDRESS SPACE JCL       *\n*  SCANS FOR ALL SSM (SHARED SPOOL MODS) STATEMENTS EXCEPT FOR THE  *\n*  /*ROUTE, WHICH IS HANDLED BY EXIT54A.                            *\n*                                                                   *\n*  FUNCTION -                                                       *\n*                                                                   *\n*   THIS EXIT WILL CHECK THE PASSED JECL VERB AGAINST AN INTERNAL   *\n*   TABLE, AND IF A MATCH IS FOUND, THE CARD IS ASSUMED TO BE OURS. *\n*   IF THE JECL CARD IS ONE OF OURS, USE THE $SCAN ROUTINE TO       *\n*   VALIDATE IT, PARSE THE VALUES, AND UPDATE THE CORRECT JCTX      *\n*   FIELDS.  IT IS EXPECTED THAT BY USING $SCAN AND $PAIR WE WILL   *\n*   BE ABLE TO MAINTAIN THE EXIT WITH FEWER AND SIMPLER CHANGES.    *\n*                                                                   *\n*  THE EXIT MAY BE CALLED IN USERMODE, OR IN JES2 MAINTASK MODE IF\n*  INVOKED FROM  STSCX04A (XPLID=X'04').  IF CALLED VIA $EXIT FROM\n*  STSCX04A WE WILL USE $GETWORK, $RETWORK INSTEAD OF STORAGE OBTAIN/\n*  RELEASE, AND USE $GETSMFB & WRITE IT USING $QUESMFB INSTEAD OF\n*  SMFEWTM.   THE PROBLEM WE FOUND IS EVEN THOUGH WE SET THE ASSEMBLY\n*  ENVIRONMENT TO USER MODE, WE ARE STILL IN MAINTASK, RUNNING UNDER\n*  A PCE - AND SO CAN NOT USE STANDARD LINKAGE OR ALLOW WAITS.\n*  ENTRY POINT -                                                    *\n*    EXIT54A                                                        *\n*                                                                   *\n*                                                                   *\n*  ATTRIBUTES -                                                     *\n*                                                                   *\n*    AC=1  AMODE=31  RMODE=ANY                                      *\n*                                                                   *\n*                                                                   *\n*  INPUT REGISTERS:     (NOTE: NOT ALL PASSED VALUES DOC'D HERE.)   *\n*    NOTE: THE XPL FOR EXIT 04 AND EXIT 54 ARE ALMOST IDENTICAL.    *\n*                                                                   *\n*        R0     POINTER TO THE XPL                                  *\n*                 XPLID     EYECATCHER                              *\n*                 XPLXITID  EXIT ID #                               *\n*                 X054IND  = 00  = JCL                              *\n*                          = 01  = JECL                             *\n*                 X004COND  CONDITION BYTE                          *\n*                     X054CONT  - CONTINUATION INDICATOR            *\n*                     X054CMDD  - /*$ COMMAND STATEMENT             *\n*                     X054JOBP  - /*JOBPARM                         *\n*                 X054RESP  RESPONSE BYTE                           *\n*                     X054XSNC  - EXIT SUPPLIED NEXT CARD           *\n*                     X054XSEM  - EXIT SUPPLIED MSG IN X004JCMT     *\n*                     X054JCMT  - SKIP PROCESSING CARD              *\n*                 X054CARD  80 BYTE CARD IMAGE                      *\n*                 X054JXWR  80 BYTE EXIT WORK AREA (JCTXWRK)        *\n*                 X054JCT   JCT POINTER                             *\n*                 X054JQE   JQE POINTER                             *\n*                 X054AREA  JRWAREA                                 *\n*                 X054STMT  CONCATENATED STATEMNT BUFFER            *\n*                 X054STML  STATEMENT LABEL                         *\n*                 X054STMV  STATEMENT VERB                          *\n*                                                                   *\n*        R1     POINTER TO 3-WORD LIST                              *\n*                 WORD1 -  POINTER TO IMAGE BUFFER                  *\n*                 WORD2 -  POINTER TO EXIT FLG BYTE JRWFLAGX IN JRW *\n*                 WORD3 -  POINTER TO JCTXWRK IN THE JCT            *\n*                                                                   *\n*        R2-10  N/A                                                 *\n*        R11    HCT ADDRESS                                         *\n*        R12    N/A                                                 *\n*        R13    PCE ADDRESS                                         *\n*        R14    RETURN ADDRESS                                      *\n*        R15    ENTRY ADDRESS                                       *\n*                                                                   *\n*     OUTPUT REGISTERS:                                             *\n*        R0-14  UNCHANGED                                           *\n*        R15:   RETURN CODE                                         *\n*               RC=00  = CONTINUE NORMALLY                          *\n*               RC=04  = IGNORE OTHER EXITS                         *\n*               RC=08  = NO PROCESSING - WRITE TO JCL DATASET       *\n*               RC=12  = CANCEL JOB                                 *\n*               RC=16  = PURGE JOB                                  *\n*                                                                   *\n*     REGISTER DIFFERENCES BETWEEN EXIT04 AND EXIT 54               *\n*                                                                   *\n*        R11  -  HCCT IN EXIT 54 NOT THE HCT AS IN EXIT 4           *\n*        R13  -  SAVE AREA IN EXIT 54, NOT THE PCE ADDRESS          *\n*                                                                   *\n*                                                                   *\n*     REGISTER USAGE(INTERNAL):                                     *\n*        R0-9   WORK REGISTERS                                      *\n*        R10    JCT ADDRESS                                         *\n*        R11    HCCT ADDRESS                                        *\n*        R12    BASE REGISTER                                       *\n*        R13    PCE ADDRESS                                         *\n*        R14-15 WORK AND LINKAGE REGISTERS                          *\n*                                                                   *\n*     NOTE -                                                        *\n*      THIS EXIT IS INTENDED FOR USE WITH JES2 1.7                  *\n*                                                                   *\n*                                                                   *\n*     AUTHOR: STPEHEN MCCOLLEY                                      *\n*             ATLANTA, GA.                                          *\n*********************************************************************\n* *-*-*-----------------------------------------------------------*-*-*\n* *-                                                                 -*\n* *-     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE-*\n* *-  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY-*\n* *-  IS MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS   -*\n* *-  ASSUMED FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY  -*\n* *-  THE USE OF THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY  -*\n* *-  TO EVALUATE THE USEFULLNESS OF THE MATERIAL.                   -*\n* *-                                                                 -*\n* *-     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO     -*\n* *-  DATE, NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR        -*\n* *-  EXTENSIONS MADE IN THE FUTURE.                                 -*\n* *-                                                                 -*\n* *-*-*-----------------------------------------------------------*-*-*\n         TITLE 'USER EXIT54-B HANDLES /*ROUTE XEQ STATEMENTS'\n         COPY  $HASPGBL\nSTSCX54B $MODULE ENVIRON=(USER,ANY),                                   X\n               SYSP=(GEN,GEN,DATA,NOGEN,NOGEN),                        X\n               RMODE=ANY,                                              X\n               TITLE='JES2 EXIT54A',                                   X\n               ASCB,                                                   X\n               CVT,                                                    X\n               NTASM,         Name/Token constants                     X\n               PSA,                                                    X\n               RPL,                                                    X\n               SMCA,                                                   X\n               $BUFFER,                                                X\n               $CADDR,                                                 X\n               $CMB,                                                   X\n               $CPINDEX,                                               X\n               $DCT,                                                   X\n               $HASB,                                                  X\n               $HASPEQU,                                               X\n               $HASXB,                                                 X\n               $HCT,                                                   X\n               $HCCT,                                                  X\n               $HFAME,                                                 X\n               $JCT,                                                   X\n               $JQE,                                                   X\n               $JRW,                                                   X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PADDR,                                                 X\n               $PARMLST,                                               X\n               $PCE,                                                   X\n               $PSV,                                                   X\n               $RID,                                                   X\n               $QSE,                                                   X\n               $RDRWORK,                                               X\n               $RJCB,                                                  X\n               $SAFINFO,                                               X\n               $SCAT,                                                  X\n               $SJB,                                                   X\n               $SQD,                                                   X\n               $TRE,                                                   X\n               $TRX,                                                   X\n               $TQE,                                                   X\n               $USERCBS,                                               X\n               $XECB,                                                  X\n               $XIT,                                                   X\n               $XPL\n\n\n*********************************************************************\n*                                                                   *\n*        SAVE CALLER'S REGISTERS AND ESTABLISH ADDRESSABILITIES.    *\n*                                                                   *\n*********************************************************************\n\n** * ------------------------------------------------------------- * **\n** * -- SOME USEFUL EQUATES FOR ADDRESSING THE JCTXWRK AREA     -- * **\n** * ------------------------------------------------------------- * **\n         USING JCT,R8               ADDRESS THE JCT\n         USING XPL,R9               ADDRESS THE PARAMETER LIST\n         USING JRW,R10              ADDRESS THE JRW\n         USING HCCT,R11             ADDRESS THE HCT\n*        USING BASE,R12             OUR BASE REG - SEE $ENTRY ABOVE\n         USING PCE,R13              ADDRESS THE PCE\nEXIT54B  $ENTRY BASE=R12,SAVE=YES   EXIT ROUTINE ENTRY POINT\n         LR    R9,R0                SET THE XPL BASE\n         L     R10,X054AREA         SET THE JRW BASE\n         L     R8,X054JCT           SET THE JCT BASE\n*        LA    R11,0(0,R11)         HCCT ADDR ALREADY SET\n*        LA    R13,0(0,R13)         PCE ADDR ALREADY SET\n         XR    R6,R6               POINTER TO WORKAREA 0 UNTIL OBTAIND\n** * ------------------------------------------------------------- * **\n** * --  IS THIS A CONTINUATION STATEMENT ?                     -- * **\n** * ------------------------------------------------------------- * **\n         TM    X054COND,X054CONT    IS THIS A CONTINUATION CARD?\n         JO    X054RC00             JUST RETURN NOW\n** * ------------------------------------------------------------- * **\n** * --  IS THIS EVEN A JECL CARD,  OR WAS IT ALREADY HANDLED?  -- * **\n** * ------------------------------------------------------------- * **\n         TM    X054IND,X054JECL\n         JNO   X054RC00             IF NOT JUST RETURN\n         TM    X054IND,X054JCMT     ALREADY HANDLED BY ANOTHER EXIT?\n         JO    X054RC00\n         CLC   X054JCT,CCTZEROS     IS THERE A JCT AT ALL?\n         JE    X054RC00\n\n** * ------------------------------------------------------------- * **\n** * -- IT MIGHT BE A VALID SSM CARD - TEST IT AGAINST OUR      -- * **\n** * -- TABLE OF VALID VERBS.                                   -- * **\n** * ------------------------------------------------------------- * **\n         LA    R4,12                LENGTH OF EACH ENTRY IN TABLE\n         LA    R3,VERBTAB           TOP OF TABLE\n         LA    R5,VERBLAST          PAST END OF TABLE\nTSTVRB   CLC   X054STMV,0(R3)       IS IT A MATCH?\n         JE    DOSCAN               IF YES, THEN SCAN IT!\n         BXLE  R3,R4,TSTVRB         ELSE BUMP AND LOOP\n         J     X054RC00             IF NOT FOUND JUST RETURN NOW\n** * ------------------------------------------------------------- * **\n** * --  DO THE FIRST LEVEL $SCAN NOW - VERBCODE ONLY.          -- * **\n** * --                                                         -- * **\n** * -- A FEW NOTES ABOUT RCARDSCN - (ADDRESS IN $CADDR)        -- * **\n** * --  USER ENVIRONMENT -  NO ESTAE OF IT'S OWN.              -- * **\n** * --  INPUT VIA REGS -                                       -- * **\n** * --      (INPUT )               (ON RETURN)                 -- * **\n** * --    R0-KEYWORD TABLE         UNCHANGED                   -- * **\n** * --    R1= JRW ADDRESS          R1=LAST CHAR OF STMT NOT -  -- * **\n** * --    R2-R10- N/A                   PROCESSED +1           -- * **\n** * --    R11 = HCCT               R2-R14=UNCHANGED            -- * **\n** * --    R13=SAVEAREA                                         -- * **\n** * --    R14=RETURN ADDR                                      -- * **\n** * --    R15=ENTRY ADDRESS       R15 = RTN CODE               -- * **\n** * --                                                         -- * **\n** * --  REGS ON ENTRY TO / EXIT FROM PROCESSING ROUTINE ARE:   -- * **\n** * --                                                         -- * **\n** * --   R0      N/A                   N/A                     -- * **\n** * --   R1      JCT BASE ADDRESS      80 BYTE MESSAGE TO      -- * **\n** * --                                 ADD TO JCL STREAM       -- * **\n** * --                                 OR ZERO                 -- * **\n** * --   R2-R9   N/A                   UNCHANGED               -- * **\n** * --   R10     JRW ADDRESS           UNCHANGED               -- * **\n** * --   R11     HCCT ADDRESS          UNCHANGED               -- * **\n** * --   R12     N/A                   UNCHANGED               -- * **\n** * --   R13     SAVE AREA ADDRESS     UNCHANGED               -- * **\n** * --   R14     RETURN ADDRESS        N/A                     -- * **\n** * --   R15     ENTRY ADDRESS         RETURN CODE             -- * **\n** * --                                                         -- * **\n** * --   RETURN CODES (R15 ON EXIT):                           -- * **\n** * --                                                         -- * **\n** * --     0  -  PROCESSING SUCCESSFUL                         -- * **\n** * --     4  -  ERROR ENCOUNTERED, FAIL JOB AT END OF         -- * **\n** * --           INPUT (KEEP SCANING STATEMENT)                -- * **\n** * --     8  -  ERROR ENCOUNTERED, STOP SCANNING              -- * **\n** * --           STATEMENT AND KILL JOB                        -- * **\n** * --                                                         -- * **\n** * --  PROCESSING OF KEYWORDS WILL STOP AND AN ERROR          -- * **\n** * --  MESSAGE QUEUED IF A CONDITION OCCURS (OTHER THAN       -- * **\n** * --  *DUP AND *NULL) FOR WHICH THERE IS NO TABLE ENTRY      -- * **\n** * --  TO PROCESSES.  PROCESSING IN THIS CASE IS THE SAME     -- * **\n** * --  AS A PROCESSING ROUTINE RETURNING A RC=8.              -- * **\n** * --                                                         -- * **\n** * --  IF R1 IS NON-ZERO ON RETURN, IT IS ASSUMED TO          -- * **\n** * --  POINT TO AN 80 CHARACTER MESSAGE TO BE ADDED TO        -- * **\n** * --  THE JCL INPUT STREAM.  IF A RETURN CODE OF ZERO        -- * **\n** * --  IS GIVEN, THE MESSAGE SHOULD START WITH A '//*' TO     -- * **\n** * --  PREVENT LATER JCL ERRORS.  JES2 DOES NOT EXAMINE       -- * **\n** * --  THIS MESSAGE OR PASS IT TO ANY EXITS.                  -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\nDOSCAN   EQU   *                    PARSE THE CARD NOW\n         OI    X054RESP,X054JCMT    INDICATE STATEMENT PROCESSED\n* LOAD AS A TEST - A FINAL LOAD OF R0 IS DONE JUST BEFORE RCARDSCN\n         L     R0,8(R0,R3)          POINT TO THE CARD KEY LIST\n         LTR   R0,R0                CHECK TO SEE IF SUPPRESSION IS ON.\n         JZ    X054RC00              IF SO.. DO NOTHING AT ALL.\n** * ------------------------------------------------------------- * **\n** * -- JUST BEFORE CALL TO RCARDSCN WE WILL OBTAIN A GOOD WORK -- * **\n** * -- AREA TO USE - IT IS DESTROYED UPON RETURN FROM THE EXIT.-- * **\n** * ------------------------------------------------------------- * **\n         CLI   XPLXITID,X'04'      WERE WE CALLED FROM EXIT04?\n         JNE   DOOBTAIN            IF NOT JUST DO USERMODE OBTAIN.\n        $ENVIRON PUSH,ENVIRON=JES2,SETR11=YES\n         $GETWORK WORDS=(@0454LEN)/4,USE=SSMZ,LOC=ANY\n        $ENVIRON POP,SETR11=YES\n         J     STOROK              WE HAVE STORAGE - JUMP OVER OBTAIN\nDOOBTAIN EQU   *\n*\n         L     R2,X0454LEN\n         STORAGE OBTAIN,LENGTH=(2),LOC=RES\n* A WAIT IS ACCEPTABLE IN THE USER ENVIRONMENT READER ROUTINE. *\nSTOROK   EQU   *\n         LR    R6,R1               NOW WE HAVE A WORK AREA.\n         LR    R14,R1              GET THE WORK AREA - TO ADDR\n         L     R15,X0454LEN        TO LENGTH = LENGTH OF AREA\n         XR    R1,R1               FROM LENG = ZERO = PAD CHAR\n*                                  FROM ADDR = WHO CARES, MOVING 0 LEN\n         MVCL  R14,R0              CLEAR IT ALL WITH THE MVCL\n         USING X0454DS,R6\n         L     R1,X0454LEN\n         ST    R1,X454LEN          SAVE LENGTH FOR LATER RELEASE\n         MVC   X454EYE,=C'SSMZ'    MOVE AN EYECATCHER\n         MVC   C454CDSV(80),JCTXWRK     SAVE THE JCTXWRK AREA NOW\n*                                  IT WILL BE RESTORED LATER\n* NEXT GET THE ECSA POINTER FOR LATER USE *\n         XC    X454TIMD,X454TIMD   CLEAR THE FIELD TO USE FOR N/T NAME\n         XC    X454NAME,X454NAME   CLEAR THE FIELD TO USE FOR N/T TOKEN\n         MVC   X454TIMD(3),=C'SSM' MOVE THE LITERAL PART OF THE NAME\n         MVC   X454TIMD+3(8),CCTGPNM  AND THE XCFGRP NAME\n        $TOKENSR  REQUEST=RETRIEVE,NAME=X454TIMD,                      X\n               LEVEL=SYSTEM,ERRET=ERNOECSA,OKRET=GOODECSA\nGOODECSA EQU   *\n         LR    R1,R0               get ssmt ptr from r0; r0 = 1st word\n*                                   in returned token - r1 = 2nd word\n         USING SSMTB,R1\n         CLC   SSMEYE,=C'SSMT'     CHECK THE LOCATED EYECATCHER\n         JNE   ERNOECSA            IF NOT VALID - WE DIDN'T FIND IT.\n         CLI   SSMSMFNM,X'81'      IS SMF NUMBER LESS THAN 128 ?\n         JL    ERNOECSA             IF LESS THAN 129 - DONT TRY IT!\n         ST    R1,X454ECSA         SAVE THE RETURNED TOKEN FOR LATER\n         J     CALLRSCN            GO DO THE WORK NOW\nERNOECSA EQU   *\n         XC    X454ECSA,X454ECSA   INDICATE NO ECSA WAS FOUND.\n* THE SMF DATA WILL BE FILLED AT THE END OF THE RCARDSCAN. *\nCALLRSCN EQU   *\n         DROP  R1                  LOSE ADDRESSABILITY TO ECSA AREA\n         XC    X454TIMD,X454TIMD   RECLEAR THE FIELD USED FOR N/T NAME\n         XC    X454NAME,X454NAME   RECLEAR THE FIELD USED FOR N/T TOKN\n         XC    X454TIME,X454TIME   RECLEAR THE FIELD USED FOR N/T TOKN\n         XC    X454MSGM,X454MSGM   RECLEAR THE FIELD USED FOR N/T TOKN\n*\n         STCM  R6,B'1111',JCTXWRK+72 SAVE THE WORK AREA POINTER NOW\n         L     R0,8(R0,R3)          POINT TO THE CARD KEY LIST\n*\n         $CALL RCARDSCN,            CALL CARD SCAN                     X\n               PARM0=(R0),            R0=KEYLIST $STMTTAB TABLE        X\n               PARM1=JRW,             R1= CARD IMAGE                   X\n               OKRET=X054RTST       IF OK TST FOR CNTL OR JUST RETURN\n*                                    FALL THRU TO NEXT LINE.\n** * ------------------------------------------------------------- * **\n** * -- BASED ON THE CALLING CODE                               -- * **\n** * --                                                         -- * **\n** * --  Return codes from exit 54:                             -- * **\n** * --                                                         -- * **\n** * --  0    -   Continue Normal Processing                    -- * **\n** * --  4    -   Continue Normal Processing                    -- * **\n** * --            (No other calls)                             -- * **\n** * --  8    -   Process JECL statement as if it were a        -- * **\n** * --           JCL comment stmt; Continue if JCL stmt        -- * **\n** * --  12   -   Illegal Control Card detected, Kill Job       -- * **\n** * --  16   -   Purge Job                                     -- * **\n** * --                                                         -- * **\n** * --  THE RETURN CODE SETS THE FOLLOWING BITS IN X054RESP,   -- * **\n** * --  OR WE CAN SET THEM OURSELVES AND FORGET THE RC.        -- * **\n** * --                                                         -- * **\n** * --          OI X054RESP,X054JCMT OR RC=8 = DO NOT DO JECL  -- * **\n** * --          OI X054RESP,X054KILL OR RC=12= KILL THE JOB    -- * **\n** * --          OI X054RESP,X054PURG OR RC=16= PURGE JOB       -- * **\n** * --          RC >16  = GO BOOM BIG TIME ! (LIMIT NOT TESTED)-- * **\n** * --  THE BOOK SAYS A MESSAGE IS SUPPORTED FOR RC=12 OR 16,  -- * **\n** * --       MOVE MSG TO X054JXWR AND OI X002RESP,X002XSEM     -- * **\n** * --   (I JUST DON'T SEE IT IN THE CODE IN HASCINJR )        -- * **\n** * --                                                         -- * **\n** * -- CURRENTLY WE SET ALL ERROR MESSAGES IN RCARDSCN ROUTINES-- * **\n** * -- AND ONLY NEED TO ISSUE A MESSAGE FROM MAINLINE (RTN TO  -- * **\n** * -- THE EXIT54 CALL) IF EVERYTHING WENT OK (RC=8).          -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\n*\nX054RC12 LA    R15,12(R0,R0)        SET RETURN CODE 12 - JCL ERROR\n         J     RJCLRET                 JCL ERROR THE JOB.\n*\nX054RC08 LA    R15,8(R0,R0)         RC=8 - TREAT AS A COMMENT\n         J     RJCLRET\n*\nX054RC00 XR    R15,R15             RC=0 - DO NOTHING - NORMAL JES2\nRJCLRET  EQU   *                   ABOUT TO RETURN HOME\n         LTR   R6,R6               IS THERE A WORK AREA?\n         JZ    RETN06              JUST RETURN WITHOUT RELEASING WRK\n* NEXT CHECK THE ECSA AREA TO SEE IF WE EVEN NEED TO WRITE SMF OR NOT\n         L     R2,X454ECSA         GET THE ECSA POINTER IN R2 NOW\n         USING  SSMTB,R2           SET A TEMP USING FOR IT\n         CLC   SSMEYE,=CL4'SSMT'   IS IT REALLY WHAT WE THINK IT IS?\n         JNE   SKPSMF44             IF NOT SKIP THE SMF PROCESS\n* NEXT DO WE NEED TO WRITE AN SMF REC - OR - NOT ?\n         CLI   SSMSMFOP,SSMSMF_ALL DO THEY WANT THEM ALL?\n         JE    DOSMF\n         CLI   SSMSMFOP,SSMSMF_INPUT  MAYBE JUST THE INPUT RECS\n         JNE   SKPSMF44            IF SET TO 'ACTION' OR 'NONE' SKIP IT\nDOSMF    EQU   *\n** * ------------------------------------------------------------- * **\n** * --  We also need to get the ECSA area here to check if we  -- * **\n** * -- even need to write a record or not..                    -- * **\n** * ------------------------------------------------------------- * **\n         LA    R5,X454SMFX         I WILL SET UP THE USING FOR SMF NOW\n         USING SMFBASE,R5\n         LR    R4,R15              SAVE RETURN CODE NOW - RESTORE IT\n*                                    LATER...\n         XC    X454SMFW,X454SMFW   CLEAR A WORK AREA NOW\n         CLI   SSMSMFNM,X'81'      BAD SMF NUMBER? < 81 IS NO GOOD !\n         JL    SKPSMF44            SKIP IT IS BAD.\n         CLI   XPLXITID,X'04'      FROM EXIT04 - OR EXIT54 ?\n         JNE   DOUSRTN1            IF NOT 04 THEN DO USER MODE CODE.\n*                                     ELSE TREAT AS THOUGH IN MAINTASK\n        $ENVIRON PUSH,ENVIRON=JES2,SETR11=YES\n         XR    R1,R1               CLEAR RESULT REG BEFORE THE CALL\n         $GETSMFB WAIT=NO          TRY TO GET AN SMF BUFFER TO FILL.\n        $ENVIRON POP,SETR11=YES\n         JZ    SKPSMF44            REVERSE RC LOGIC - RC=0=ERROR!\n         LTR   R1,R1               DID THEY GIVE US BACK A ZERO ADDR?\n         JZ    SKPSMF44              - IF SO - CONTINUE BY SKIPPING IT!\n         ST    R1,X454SMFW         ELSE WE HAVE ONE, SAVE PTR IN SMFW\n         LR    R5,R1               BUFFER PTR IN R5 ( REPLACE ORIG. R5)\n         LA    R5,8(0,R1)          ADJUST FOR THE OFFSET USING STATEMNT\n         MVC   SMFXLEN,=AL2(SMFXLS44)  LEN OF TYPE 44 RECS.\n         XC    SMFXSEG,SMFXSEG      ZERO THE SEGMENT NOW\n         MVI   SMFXFLG,B'01011110'  INDICATE A SUBTYPED RECORD.\n         MVC   SMFXRTY,SSMSMFNM     MOVE THE SMF NUMBER FROM ECSA\n*   NOW GET DATE AND TIME FOR AN SMF RECORD.\n        $ENVIRON PUSH,ENVIRON=JES2,SETR11=YES\n         $STCK ADDR=X454TIMD\n\n         LM    R0,R1,X454TIMD      LOAD REGS BEFORE CALLING CONVERSION\n*  DATE / TIME IS NOW IN R0 AND R1\n         $CALL HCNVTIME            CONVERT TO A FORMAT VALID FOR SMF\n        $ENVIRON POP,SETR11=YES\n         STCM  R1,B'1111',SMFXDTE  STORE DATE IN RECORD.\n         STCM  R0,B'1111',SMFXTME  STORE TIME IN RECORD.\n         J     DOCOMN              DO THE COMMON SMF STUFF.\nDOUSRTN1 EQU   *                   RETURN TO NORMAL 'USER MODE'\n\n* BEFORE RELEASING STORAGE , FILL IN THE SMF RECORD AND WIRTE IT!\n         MVC   SMFXLEN,=AL2(SMFXLS44)  LENGTH OF SMF TYPE 44 RECORD\n         XC    SMFXSEG,SMFXSEG     ZERO THE SEGMENT NOW.\n         MVI   SMFXFLG,B'01011110' INDICATE SUB-TYPED RECORD\n         MVC   SMFXRTY,SSMSMFNM    MOVE SMF# FROM ECSA\n         CLI   SSMSMFNM,X'81'      IF LESS THAN X'81'\n         BL    SKPSMF44            SKIP IT - INVALID SMF#\n         DROP  R2                  DROP LINKAGE TO THE ECSA AREA NOW\n* WE NEED THE TIME TO FINISH\n*        LA    R2,X454TIMD\n*        TIME  BIN,(2),ZONE=UTC,DATETYPE=YYYYDDD,\n*              LINKAGE=SYSTEM,MF=(E,TIMEDS)\n*        MVC   SMFXTME,X454TIMD    TIME IN 1/100THS OF A SEC.\n*        MVI   SMFXDTE+3,X'0F'     PREP DATE FIELD\n*        MVO   SMFXDTE(4),X454TIMD+9(3)\n* WE REPLACED THE ABOVE TIME / DATE MANIPULATION WITH THIS NEW ONE\n         STCK  X454WKDD            STORE CLOCK INTO WORK AREA\n         LM    R0,R1,X454WKDD      SET UP PARMS TO PASS TO HCNVTIME\n        $CALL  HCNVTIME            HCNVTIME MAKES STCK INTO SMF TIME/DT\n*                                   TIME IN .01 SEC UNITS & PACKED DATE\n         STCM  R0,B'1111',SMFXTME  SAVE THE TIME AND DATE, SUITABLE\n         STCM  R1,B'1111',SMFXDTE    FOR USE IN AN SMF RECORD.\n*\n*\n*   FINALLY DONE WITH TIME AND DATE.\nDOCOMN   EQU   *\n*\n         MVC   SMFXSID,CCTSID      (SYSTEM ID)\n         MVI   SMFXSSI,X'40'\n         MVC   SMFXSSI+1(L'SMFXSSI-1),SMFXSSI  CLEAR SMFXSSI FIELD\n         MVC   SMFXNUMT,=X'0002'   2 TRIPLETS IN THIS RECORD\n         MVC   SMFXRESV,=AL2(SMFD8TSD)  SELF DEFINING SECTION LENGTH\n         MVC   OFFPRD01,=A(PRDOFT)   OFFSET RDW TO PROD SECTION\n         MVC   LENPRD01,=AL2(PRDLENS)\n         MVC   NUMPRD01,=X'0001'   ONLY 1 PRODUCT SECTION\n         MVC   OFFTEC01,=AL4(STDOFFS) OFFSET TO SUBTYPES\n* NEXT GET THE PRODUCT SECTION FOR SSM RECORDS\n         MVC   SMFD8SVR,=X'00010700'  MOVE THE VRM\n         MVC   SMFD8SID,=CL16'SHARED SPOOL MOD'\n* NOW THE SUB-TYPE SPECIFIC INFORMATION\n         MVC   SMFXSTY,=X'0044'    MOVE THE SUB TYPE\n         MVC   SMFD8STY,=X'0044'     TO ALL THREE\n         MVC   SMFD8S44,=X'0044'        FIELDS\n         MVC   NUMTEC01,=X'0001'   # OF SUBTYPED SECTIONS = 1\n         MVC   LENTEC01,=AL2(SMFLNS44) SET LEN OF SUBTYPED DATA ONLY\n         MVC   SMFD84IN,JCTRNODE\n         MVC   SMFD84CD,JCTRDRON\n         MVC   SMFD84JC,JCTJCLAS\n         MVC   SMFD84JI,JCTJOBID\n         MVC   SMFD84JN,JCTJMRJN\n         MVC   SMFD84XT,JCTETS\n         MVC   SMFD84MG(1),X454CTYP     MOVE THE CNTL TYPE\n         MVC   SMFD84MG+2(8),X454RELT\n         MVC   SMFD84MG+12(8),X454NAME\n         MVC   SMFD84MG+21(1),X454CTYP\n         MVC   SMFD84MG+24(8),X454TIME\n         MVC   SMFD84MG+34(1),X454TYPE\n* GET THE JQA EXTENTSION AS IT CURRENTLY EXISTS - IF IT EXISTS.\n         MVI   SMFD84JA,X'40'            CLEAR THE JCTEXTENSION AREA\n         MVC   SMFD84JA+1(L'SMFD84JA-1),SMFD84JA\n         $JCTXGET JCT=(R8),TYPE='USER',MOD=1,                          X\n               NOTFOUND=SKPJCTX,FOUND=JCTXX54,ERRET=SKPJCTX\nJCTXX54  EQU   *\n         MVC   SMFD84JA,0(R1)      MOVE THE JCT EXTENSION WHEN FOUND\nSKPJCTX  B     DOSMFX54\n* DONE - RECORD IS FORMATTED -\nDOSMFX54 EQU   *                   RECORD IS NOW FORMATTED.\n         CLI   XPLXITID,X'04'      ARE WE MAINTASK, FROM EXIT04?\n         JNE   DOWTM               IF NOT JUST DO OLD USERMODE ROUTINE\n*\n         L     R1,X454SMFW         GET ORIGINAL BUFFER POINTER\n        $ENVIRON PUSH,ENVIRON=JES2,SETR11=YES\n        $QUESMFB  (R1)             QUEUE THE BUFFER TO A SUBTASK\n        $ENVIRON POP,SETR11=YES\n         J     SKPSMF44            JUMP PAST THE 'USER' SMF WRITE SEG.\nDOWTM    EQU   *                   DO THE ORIGINAL USERMODE SMF ROUTINE\n         LA    R5,SMFXLEN          PREPARE TO ISSUE SMFEWTM\n*                                    JES2 BUFFER HEADER FOR SMF RECS.\n         LA    R7,X454SMFW\n         SMFEWTM  (5),BRANCH=YES,WRKAREA=(7)\nSKPSMF44 EQU   *\n         LTR   R6,R6               IS THERE A WORK AREA?\n         JZ    RETN06\n         MVC   JCTXWRK(80),C454CDSV       RESTORE THE JCTXWRK AREA NOW\n         LR    R15,R4              RESTORE THE SAVED RTN CODE (USR TSK)\n         CLI   XPLXITID,X'04'      IS IT EXIT04 THAT CALLED US?\n         JNE   DOURLS              IF NOT THEN DO RELEASE STORAGE CODE\n* ELSE USE $RETWORK TO RETURN OUR STORAGE AREA\n        $ENVIRON PUSH,ENVIRON=JES2,SETR11=YES\n         $RETWORK  (R6)            * RETURN OUR WORK AREA NOW\n        $ENVIRON POP,SETR11=YES\n         LR    R15,R4              RESTORE RTN CODE (MAIN TASK)\n         J     RETN06\nDOURLS   EQU   *\n         LR    R5,R15              SAVE RETURN CODE FOR A SECOND\n         L     R7,X454LEN          GET THE LENGTH OF STORAGE TO RELSE\n         STORAGE RELEASE,ADDR=(R6),LENGTH=(R7)\n         LR    R15,R5              RESTORE RETURN CODE\nRETN06   EQU   *\n         $RETURN (R15)\n         DROP  R5\n*\nX054RTST EQU   *\n         ICM   R6,B'1111',JCTXWRK+72 RESTORE R6 (PROBABLY NOT NEEDED)\n         ICM   R4,B'1111',X454MSGM GET ADDR OF MSG MODEL\n         LTR   R4,R4               IS THERE A MESSAGE MODEL SET?\n         JZ    X054RC08\n         XR    R1,R1               CLEAR R1 TO RECIEVE TYPE INDICATOR\n         IC    R1,X454TYPE         GET THE TYPE INDICATOR\n         CHI   R1,BTABMAX\n         JH    X054RC12            IF TOO BIG, JUST ERROR OUT NOW.\n*                                    THIS PREVENTS WILD BRANCHES.\n         XR    R15,R15             CLEAR R15 BEFORE LOADING MSG LEN.\n         ICM   R15,B'0011',0(R4)   USE 1ST 2 BYTES OF MSG MODEL AS LEN\n         LTR   R15,R15             IF A ZERO LEN MSG IS PROVIDED.\n         JZ    X054RC08            RETURN AND DON'T DO A MESSAGE!\n\n         BCTR  R15,R0              REDUCE BY ONE FOR EX'ED INST.\n         EX    R15,MVMSGMDL        MOVE THE MESSAGE MODEL NOW.\nMVMSGMDL MVC   JCTXWRK(0),2(R4)    \"EX\"ED MOVE THE MESSGE MODEL\n\n         B     BTAB1(R1)           BRANCH INTO BRANCH TABLE\nBTAB1    J     X054RC00            NO ACTION IF RC=0\n         J     X54CNTL             RC=4 = CNTL STATEMENTS\n         J     X54BEFR             BEFORE,AFTER,WITH,WITHOUT ROUTINE\n         J     X54TIME             HOLD FOR AND HOLD TILL STATEMENTS\n         J     FINALFMT            NO AUTO ROUTING\n         J     X054RC08\n         J     X054RC08            OK MEMBERS\n         J     X054RC08            NOT OK MEMBERS\n         J     X054RC12            GENERAL ERRROR ROUTINE INVALID BR.\nBTABMAX  EQU   *-BTAB1             MAX RETURN CODE VALUE ALLOWED\n*\n** * ------------------------------------------------------------- * **\n** * -- ON RETURN, IF THIS WAS A CNTL STATEMENT, BUILD AND      -- * **\n** * -- ISSUE A MESSAGE ABOUT THE STATMENT - IT IS IMPOSSIBLE TO - * **\n** * -- BUILD THE MESSAGE WITHIN THE PROCESSING ROUTINES SO WE  -- * **\n** * -- DO IT HERE INSTEAD.                                     -- * **\n** * ------------------------------------------------------------- * **\nX54CNTL  EQU   *\n** * ------------------------------------------------------------- * **\n** * -- CNTL USES TYPE=4, RELATIVE1=CNTLNAME, RELATIVE2=E,S,P   -- * **\n** * ------------------------------------------------------------- * **\n         MVC   JCTXWRK+38(8),X454NAME  MOVE THE CNTL NAME\n         MVC   JCTXWRK+47(1),X454CTYP  MOVE THE CNTL TYPE (S/E/P)\n         CLI   JCTXWRK+47,C'S'     IS IT SHR?\n         JE    CNTLS\n         CLI   JCTXWRK+47,C'P'\n         JE    CNTLP\n         CLI   JCTXWRK+47,C'E'\n         JE    CNTLE\n         J     X054RC12            ERROR IF NOT E,S, OR P.\nCNTLP    EQU   *\n         MVC   JCTXWRK+48(2),=C'RG'\n         J     FINALFMT               HERE IS WHERE\nCNTLS    EQU   *\n         MVC   JCTXWRK+48(2),=C'HR'    WE SET THE MODIFIER\n         J     FINALFMT\nCNTLE    EQU   *                           SHR, OR EXC, OR PRG\n         MVC   JCTXWRK+48(2),=C'XC'\n\nFINALFMT EQU   *                   FIRST TEST FOR A SPECIAL CONDITION\n         LA    R15,1(R0,R15)       add 1 to r15 (RESTORE original len)\n\n** * ------------------------------------------------------------- * **\n** * -- finally adjust for jobid of not the submitters jobid,   -- * **\n** * -- but for the jobid (jobname) of the job being processed. -- * **\n** * ------------------------------------------------------------- * **\n\n         MVC   JCTXWRK+9(8),JCTJNAME\n\n         $WTO  JCTXWRK,(R15),WAIT=YES,JOB=NO,                          X\n               ROUTE=$LOG+$MAIN,CLASS=$ACTION,PRI=$ST\n         J     X054RC08            JUST RETURN WE ARE DONE.\nX54BEFR  EQU   *                   BEFORE MESSAGES\n         MVC   JCTXWRK+23(8),X454RELT  MOVE THE RELATIONAL TYPE\n         MVC   JCTXWRK+42(8),X454NAME  MOVE THE NAME\n         B     FINALFMT\nX54TIME  EQU   *                   WAITFOR AND WAITTIL MESSAGES\n         MVC   JCTXWRK+36(8),X454TIMD MOVE THE TIME VALUE TO JCTXWRK\n         B     FINALFMT\n** * ------------------------------------------------------------- * **\n** * --  HERE ARE THE STATEMENT TABLES FOR PARSING THE JECL!    -- * **\n** * --   THE STATEMENT TABLES LINK US TO THE PROCESSING        -- * **\n** * --   ROUTINES THAT DO FINAL VALIDATION AND UPDATE FIELDS.  -- * **\n** * --                                                         -- * **\n** * --  INSIDE THE RTRELJOB WE WILL HANDLE ALL RELATIVE JOB    -- * **\n** * --   VALUES FOR THE /*AFTER, /*WITH, /*WITHOUT, /*BEFORE   -- * **\n** * --  STATEMENTS, OR RECOGNIZE THEY ARE NOT FOR THAT ROUTINE -- * **\n** * --  IN WHICH CASE WE SIMPLY GO ON TO THE NEXT ROUTINE.     -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\nRSRELJOB $STMTTAB TABLE=USER\n         $STMTTAB KEYWORD=POS,      INDICATE A POSITIONAL KEYWORD      X\n               ROUTINE=RTRELJOB,    THE ROUTINE TO GET CONTROL FOR IT  X\n               REQUIRED=YES,        THIS IS A REQUIRED KEYWORD         X\n               POSITION=1           AND IT'S POSITION ON THE CARD\n         $STMTTAB TABLE=END\n*\nRSCNTL   $STMTTAB TABLE=USER\n* RESOURCE IN  /*CNTL RESOURCE\n         $STMTTAB KEYWORD=POS,      INDICATE A POSITIONAL KEYWORD      X\n               ROUTINE=RTCNTL1,     THE ROUTINE TO GET CONTROL FOR IT  X\n               REQUIRED=YES,        THIS IS A REQUIRED KEYWORD         X\n               POSITION=1           AND IT'S POSITION ON THE CARD\n* SHR, OR EXC IN   /*CNTL RESOURCE,SHR\u00a6EXC\u00a6SHARED\u00a6EXCLUSIVE\u00a6PURGE\n         $STMTTAB KEYWORD=POS,      INDICATE A POSITIONAL KEYWORD      X\n               ROUTINE=RTCNTL2,     THE ROUTINE TO GET CONTROL FOR IT  X\n               REQUIRED=NO,         THIS IS A REQUIRED KEYWORD         X\n               POSITION=2           AND IT'S POSITION ON THE CARD\n         $STMTTAB TABLE=END\n* /*NOAUTORT\nRSNOAUT  $STMTTAB TABLE=USER\n         $STMTTAB KEYWORD=POS,      INDICATE A POSITIONAL KEYWORD      X\n               ROUTINE=RTNOAUT,     THE ROUTINE TO GET CONTROL FOR IT  X\n               REQUIRED=YES,        THIS IS A REQUIRED KEYWORD         X\n               POSITION=1           AND IT'S POSITION ON THE CARD\n         $STMTTAB TABLE=END\n** * ------------------------------------------------------------- * **\n** * -- RSHOLDT HOLDTILL STATEMENTS -                           -- * **\n** * --  /*HOLDTILL HH:MM:SS                                    -- * **\n** *\n** * ------------------------------------------------------------- * **\nRSHOLDT  $STMTTAB TABLE=USER\n         $STMTTAB KEYWORD=POS,      INDICATE A POSITIONAL KEYWORD      X\n               REQUIRED=YES,        THIS IS A REQUIRED KEYWORD         X\n               ROUTINE=RTTIME,      THE ROUTINE TO GET CONTROL FOR IT  X\n               POSITION=1           AND IT'S POSITION ON THE CARD\n         $STMTTAB TABLE=END\n** * ------------------------------------------------------------- * **\n** * -- RSHOLDF HOLDFOR  STATEMENTS -                           -- * **\n** * --  /*HOLDFOR  HHH:MM:SS -OR - HHH:MM:SS.TT.HH             -- * **\n** * ------------------------------------------------------------- * **\nRSHOLDF  $STMTTAB TABLE=USER\n         $STMTTAB KEYWORD=POS,      INDICATE A POSITIONAL KEYWORD      X\n               REQUIRED=YES,        THIS IS A REQUIRED KEYWORD         X\n               ROUTINE=RTTIMEX,     THE ROUTINE TO GET CONTROL FOR IT  X\n               POSITION=1           AND IT'S POSITION ON THE CARD\n         $STMTTAB TABLE=END\n         DS    0F\nVERBTAB  EQU   *                    INSERT VERBS OF LENGTH 8 WITH\n*                                   ADCONS FOR THE ASSOCIATED KEYLISTS\n*                                   FOLLOWING EACH VERB, FOR 12 BYTE\n*                                   TABLE ENTRIES.\n         DC    CL8'AFTER',A(RSRELJOB)\n         DC    CL8'BEFORE',A(RSRELJOB)\n         DC    CL8'WITH',A(RSRELJOB)\n         DC    CL8'WITHOUT',A(RSRELJOB)\n         DC    CL8'CNTL',A(RSCNTL)\n         DC    CL8'NOAUTORT',A(RSNOAUT)\n         DC    CL8'HOLDTIL',A(RSHOLDT)\n         DC    CL8'HOLDFOR',A(RSHOLDF)\n         DC    CL8'OKMEMS ',A(*-*)\n         DC    CL8'NOTMEMS',A(*-*)\nVERBLAST EQU   *\nX0454LEN DC    AL4(@0454LEN)\n         LTORG\n         DROP  R6,R8,R9,R10,R11,R12,R13\n*\n*\n** * ------------------------------------------------------------- * **\n** * -- ROUTINES CALLED FROM THE ROUTINE= STATEMENT ON THE      -- * **\n** * -- $STMTTAB MACROS ABOVE.                                  -- * **\n** * -- HERE'S WHERE ALL THE REAL WORK HAPPENS.                 -- * **\n** * ------------------------------------------------------------- * **\n         EJECT\n\n** * ------------------------------------------------------------- * **\n** * --  ROUTINE:  RTRELJOB                                     -- * **\n** * --                                                         -- * **\n** * --  FUNCTION:                                              -- * **\n** * --    PICKS THE RELATIONAL JOBNAME UP FROM THE FOLLOWING - -- * **\n** * -- /*AFTER, /*WITH, /*BEFORE, /*WITHOUT  STATEMENTS.       -- * **\n** * --                                                         -- * **\n** * -- LINKAGE:  VIA $CALL FORM RCARDSCN                       -- * **\n** * --                                                         -- * **\n** * -- REGISTER USAGE (ENTRY / EXIT) :                         -- * **\n** * --                                                         -- * **\n** * --  REG         VALUE ON ENTRY   ........ VALUE ON EXIT    -- * **\n** * --                                                         -- * **\n** * --   R0        N/A                        UNCHANGED        -- * **\n** * --   R1        JCT BASE ADDRESS           ERROR MESSAGE OR -- * **\n** * --                                        ZERO             -- * **\n** * --   R2-R9     N/A                        UNCHANGED        -- * **\n** * --   R10       JRW ADDRESS                UNCHANGED        -- * **\n** * --   R11       HCCT ADDRESS               UNCHANGED        -- * **\n** * --   R12       N/A                        UNCHANGED        -- * **\n** * --   R13       SAVE AREA ADDRESS          UNCHANGED        -- * **\n** * --   R14       RETURN ADDRESS             UNCHANGED        -- * **\n** * --   R15       ENTRY ADDRESS              RETURN CODE      -- * **\n** * --                                                         -- * **\n** * --  RETURN CODES (R15 ON EXIT):                            -- * **\n** * --                                                         -- * **\n** * --       0  -  PROCESSING SUCCESSFUL                       -- * **\n** * --       4  -  GROUP NOT VALID                             -- * **\n** * --   R0        N/A                        UNCHANGED        -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\n         USING X0454DS,R6\n         USING JCT,R8\n         USING JRW,R10\n         USING RTRELJOB,R12         SET LOCAL BASE\n         USING STJCTX,R7            ADDRESS OUR JCTX\n*\nRTRELJOB $SAVE  ,                   SAVE CALLERS REGS\n         LR    R12,R15              SET OUR LOCAL BASE\n         LR    R8,R1                GET JCT ADDRESSABILITY\n         LH    R0,JRWRSCNL          GET LENGTH OF OPERAND\n         CHI   R0,L'JCTJNAME        COMPARE LENGTH TO VALID JOBNAME\n         JH    RNLERR1              JOBNAME LENGTH ERROR\n         CLC   JCTJNAME,JRWRSCNV    IS IT THE SAME AS OUR JOBNAME\n         JE    JNLDUP1              DO DUPLICATE TO OUR JOBNAME ERROR\n**** NOW WE HAVE A VALID JOBNAME PASSED TO US **\n**** WE  NEED TO ADD IT TO THE JCTX           **\n         $CALL LOCJCTX\n*  LOCJCTX PUTS THE JCTX ADDR IN R7 FOR US - SO USING IS ALREADY SETUP\n         LTR   R15,R15\n         JZ    GOTJX01              IF NOT ZERO - MSG ALREADY SETUP.\n         LR    R1,R7               ELSE R7 HAS AN ERROR MSG SET UP\n         J     RTN0104\n* NOW UP DATE  THE CORRECT JCTX FIELD\n* FIRST PREP A MESSAGE AREA WITH MESSAGE MODEL - TO BE ALTERED LATER\nGOTJX01  EQU   *\n         ICM   R6,B'1111',JCTXWRK+72  RESTORE THE POINTER TO WORK AREA\n* SINCE THIS ROUTINE IS CALLED FOR SEVERAL DIFFERENT VERBS WE NEED\n* TO SEE WHICH ONE WE ARE WORKING WITH.\n         CLC   JRWSTMTV,=CL8'AFTER  '  IS IT AN AFTER CARD?\n         JE    UPDTAFT\n         CLC   JRWSTMTV,=CL8'BEFORE '  IS IT A BEFORE STATEMENT\n         JE    UPDTBEF\n         CLC   JRWSTMTV,=CL8'WITHOUT ' IS IT A WITHOUT (WATCH POSITION)\n         JE    UPDTWTHO\n         CLC   JRWSTMTV,=CL8'WITH '   IS IT WITH?  (WATCH POSITION!)\n         JE    UPDTWITH\n         LA    R1,VERBER            ELSE WE HAVE A BIG ERROR!\n         J     RTN0104              RETURN AND GIVE THEM THE MESSAGE\n** IT WAS A /*AFTER\nUPDTAFT  EQU   *\n         OI    UJCXMFLG,UJCXAFT     WE HAVE AN AFTER STATEMENT\n         MVC   UJCXAFTN,JRWRSCNV    MOVE THE JOBNAME TO AFTER FIELD\n         J     RTN0100              RETURN RC=0 FROM SUB RTN.\n** IT WAS A /*BEFORE\nUPDTBEF  EQU   *\n         OI    UJCXMFLG,UJCXBEF     SET /*BEFORE CARD PRESENT\n         MVC   UJCXBFOR,JRWRSCNV    MOVE JOBNAME FROM RCARDSCN AREA\n         J     RTN0100              RETURN RC=0 FROM SUB RTN.\n** IT WAS A /*WITHOUT\nUPDTWTHO EQU   *\n         OI    UJCMSCF1,UJCMSWOJ    SET WITHOUT STATMENT FLAG IN MCSF1\n         MVC   UJWIOUT,JRWRSCNV      MOVE JOBNAME FROM RCARDSCN AREA\n         J     RTN0100              RETURN RC=0 FROM SUB RTN.\n** IT WAS A /*WITH\nUPDTWITH EQU   *\n         OI    UJCXMFLG,UJCXWITF    SET /*WITH CARD PRESENT\n         MVC   UJCXWITH,JRWRSCNV    MOVE JOBNAME FROM RCARDSCN AREA\n         J     RTN0100              RETURN RC=0 FROM SUB RTN.\nRNLERR1  EQU   *                    RELATIONAL JOBNAME IS TOO LONG.\n         LA    R1,RELJNML           POINT TO MSG\n         J     RTN0104\nJNLDUP1  EQU   *                    DUPLICATE JOB / RELATIONAL JOBNAME\n         LA    R1,RELDUP            POINT TO ERROR MNESSAGE\n         J     RTN0104              RETURN - SUB RTN RC=04\nRTN0100  EQU   *                   SUCESS - RETURN NOW.\n         MVC   X454NAME,JRWRSCNV   MOVE JOBNAME TO RELATIVE VAL 1\n         MVC   X454RELT,JRWSTMTV   MOVE THE STATEMENT VERB (BEF/AFT)\n         MVI   X454TYPE,X'08'      MOVE BRANCH LABEL X'08'\n         LA    R15,RELXMSG\n         ST    R15,X454MSGM        SAVE MODEL ADDRESS NOW\n         XR    R15,R15\n         J     RTN01\nRTN0104  $STORE (R1)               save return message\n         LHI   R15,4\n*        J     RTN01\nRTN01    $RETURN RC=(R15)          RETURN - JUST DO IT!\nRELJNML  DC    Y(L'RELJNMLM)\nRELJNMLM $MSG  999,'STSCX54B-E RELATIONAL JOBNAME LENGTH IS GREATER THAX\n               N ALLOWED.'\nRELDUP   DC    Y(L'RELDUPM)\nRELDUPM  $MSG  999,'STSCX54B-E RELATIONAL JOBNAME CANNOT BE THE SAME ASX\n                CURRENT JOBNAME.'\nVERBER   DC    Y(L'VERBERM)\nVERBERM  $MSG  999,'STSCX54B-E ERROR FOUND IN RTRELJOB ROUTINE WHILE CHX\n               ECKING JRW VERB.'\n         $MID   943\nRELXMSG  DC    AL2(L'RELXMSGD)     LENGTH OF THE MESSAGE\nRELXMSGD DC    C'&MID.JOBNAMEX * -- TYPEDATA JOBNAME = 12345678  --'\n         LTORG\n         DROP  R6,R7,R8,R10,R12\n** * ------------------------------------------------------------- * **\n** * --  ROUTINE:  RTCNTL1                                      -- * **\n** * --                                                         -- * **\n** * --  FUNCTION:                                              -- * **\n** * --    PICKS THE ARBITRARY RESOURCE NAME FROM A /*CNTL    - -- * **\n** * -- STATEMENT, AND SAVES IT IN A JRW AREA FOR LATER USE.    -- * **\n** * --                                                         -- * **\n** * -- THE FUNCTION ROUTINE FOR /*CNTL IS DIFFERENT, IN THAT   -- * **\n** * -- WE ONLY SET ERROR MESSAGES FROM HERE - THE INFO STATEMENT  * **\n** * -- THAT ENDS UP IN THE JCL LISTING IS GENERATED AFTER WE   -- * **\n** * -- RETURN FROM THE CALL TO RCARDSCN, BECAUSE WE DO NOT     -- * **\n** * -- KNOW WHAT THE WHOLE STATEMENT MEANS UNTIL ALL PARTS,    -- * **\n** * -- INCLUDING OPTIONAL (MISSING) POSITIONALS ARE SCANED.    -- * **\n** * --                                                         -- * **\n** * -- LINKAGE:  VIA $CALL FORM RCARDSCN                       -- * **\n** * --                                                         -- * **\n** * -- REGISTER USAGE (ENTRY / EXIT) :                         -- * **\n** * --                                                         -- * **\n** * --  REG         VALUE ON ENTRY   ........ VALUE ON EXIT    -- * **\n** * --                                                         -- * **\n** * --   R0        N/A                        UNCHANGED        -- * **\n** * --   R1        JCT BASE ADDRESS           ERROR MESSAGE OR -- * **\n** * --                                        ZERO             -- * **\n** * --   R2-R9     N/A                        UNCHANGED        -- * **\n** * --   R10       JRW ADDRESS                UNCHANGED        -- * **\n** * --   R11       HCCT ADDRESS               UNCHANGED        -- * **\n** * --   R12       N/A                        UNCHANGED        -- * **\n** * --   R13       SAVE AREA ADDRESS          UNCHANGED        -- * **\n** * --   R14       RETURN ADDRESS             UNCHANGED        -- * **\n** * --   R15       ENTRY ADDRESS              RETURN CODE      -- * **\n** * --                                                         -- * **\n** * --  RETURN CODES (R15 ON EXIT):                            -- * **\n** * --                                                         -- * **\n** * --       0  -  PROCESSING SUCCESSFUL                       -- * **\n** * --       4  -  GROUP NOT VALID                             -- * **\n** * --   R0        N/A                        UNCHANGED        -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\n         USING X0454DS,R6\n         USING STJCTX,R7            ADDRESS OUR JCTX\n         USING JCT,R8\n         USING JRW,R10\n         USING RTCNTL1,R12          SET LOCAL BASE\n*\nRTCNTL1  $SAVE  ,                   SAVE CALLERS REGS\n         LR    R12,R15              SET OUR LOCAL BASE\n         LR    R8,R1                GET JCT ADDRESSABILITY\n         LH    R2,JRWRSCNL          GET LENGTH OF OPERAND\n         LTR   R2,R2\n         JM    NORESNAM            OPERAND WAS MISSING - BIG TIME ERROR\n         CHI   R2,L'JCTJNAME        COMPARE LENGTH TO VALID JOBNAME\n         JH    RNLERR2              JOBNAME LENGTH ERROR\n** NOW WE HAVE A VALID RESOURCE - ASSUME SHARED, AND ADD TO JCTX\n         $CALL LOCJCTX\n*  LOCJCTX PUTS THE JCTX ADDR IN R7 FOR US - SO USING IS ALREADY SETUP\n         LTR   R15,R15\n         JZ    GOTJX02             WE GOT IT - ELSE WE HAD AN ERROR -\n         LR    R1,R7               IF IN ERROR,  R7 = AN ERR MSG\n         J     RTN0204\n* NOW UP DATE  THE CORRECT JCTX AND JXW FIELDS\nGOTJX02  EQU   *\n         ICM   R6,B'1111',JCTXWRK+72 RESTORE R6 (PROBABLY NOT NEEDED)\n         LA    R15,CNTLMSG         GET OUR MESSAGE SKELETON ADDR\n         ST    R15,X454MSGM        AND SAVE IN THE JCTXWRK AREA\n         MVI   X454TYPE,X'04'      TELL THEM WE ARE A CNTL STATEMENT\n         MVC   X454NAME,JRWRSCNV    MOVE THE NAME TO JCTX\n*  WE SAVED THE NAME IN THE JCTXWRK TO USE IN THE INFO MSG LATER.\n         OI    UJCXMFLG,UJCXCNTL    INDICATE WE HAVE AT LEASE 1 CNTL\n         XR    R2,R2                CLEAR WORK REG\n         IC    R2,UJCXMFLG          GET COUNT OF USED CNTL NAMES\n         SRL   R2,4                 SHIFT & LEAVE ONLY THE CNTL COUNT\n         XR    R1,R1                CLEAR THE WORK REG FIRST\n         LA    R1,UBRNCTL-3(R0,R0)  GET THE MAX NUMBER OF CNTL CARDS\n*    MAX CARDS = UBRNCTL - 1 AFTER, 1 BEFORE AND 1 WITH - THERE IS A\n*                                   POOL OF CNTL CARDS POSSIBLE.\n         CR    R2,R1                ARE WE GOING TO SPILL OVER TABLE?\n         JNL   CNTMAX1              IF YES - DONT DO IT - JCLERROR!\n* IT WILL FIT - NOW UPDATE THE COUNT *\n         IC    R15,UJCXMFLG         PICK UP ORIGNINAL FLAG IN R15\n         AHI   R15,X'0010'          BUMP COUNT IN HIGH ORDER NIBBLE\n         STC   R15,UJCXMFLG         SAVE NEW COUNT IN UJCXMFLG\n* (OUR \"MULTIPLICATION\" WONT WORK FOR ZERO - SHORT CUT IT)\n         LTR   R2,R2                FIRST CHECK TO SEE IF ZERO\n         JZ    SAVE1ST              IF ZERO, SAVE IN FIRST SLOT\n* IF NOT ZERO, THEN \"MULTIPLY\" BY 9.\n         LR    R1,R2                SAVE ORIGINAL COUNT IN R1\n         SLL   R2,3                 MULITPLY BY 8\n         AR    R2,R1                PLUS ONE MORE TIME = *9 = DISPL.\nSAVE1ST  LA    R1,UJCXDNAM(R2)      GET THE ADDR TO MOVE NAME TO\n         MVC   0(8,R1),JRWRSCNV     MOVE THE PARSED RESOURCE NAME\n         MVC   X454NAME,JRWRSCNV   MOVE THE RESOURCE NAME TO REL1\n\n         MVI   8(R1),C'S'           ASSUME SHARED FOR NOW.\n         MVI   X454CTYP,C'S'       MOVE \"S\" TO RELATIVE VALUE #2\n* OUR WORK IS DONE HERE - RETURN FOR MORE PARMS.\n         J     RTN0200             THEN RETURN WE ARE DONE!\nRNLERR2  EQU   *                    RELATIONAL JOBNAME IS TOO LONG.\n         LA    R1,RNLNML1           POINT TO MSG\n         J     RTN0204\nCNTMAX1  EQU   *                    TOO MANY /*CNTL STATEMENTS\n         LA    R1,CNTMAXM           POINT TO ERROR MNESSAGE\n         J     RTN0204              RETURN - SUB RTN RC=04\nNORESNAM LA    R1,RNLNML0           RESOURCE NAME MISSING MSG\n         J     RTN0204\nRTN0200  XR    R15,R15\n         J     RTN02\nRTN0204  $STORE (R1)               save return message\n         LHI   R15,4\nRTN02    $RETURN RC=(R15)          RETURN - JUST DO IT!\nRNLNML0  DC    Y(L'RNLNMMD)\nRNLNMMD  $MSG  999,'STSCX54B-E CNTL RESOURCE NAME IS MISSING.'\nRNLNML1  DC    Y(L'RNLNMLD)\nRNLNMLD  $MSG  999,'STSCX54B-E CNTL RESOURCE NAME IS TOO LONG.'\nCNTMAXM  DC    Y(L'CNTMAXD)\nCNTMAXD  $MSG  999,'STSCX54B-E TOO MANY CNTL STATEMENTS FOR ONE JOB.'\n         $MID   943\nCNTLMSG  DC    AL2(L'CNTLMSGD)     LENGTH OF THE MESSAGE\nCNTLMSGD DC    C'&MID.JOBNAMEX * -- CONTROL INFO = ********,***  --'\n         LTORG\n         DROP  R6,R7,R8,R10,R12\n** * ------------------------------------------------------------- * **\n** * --  ROUTINE:  RTCNTL2                                      -- * **\n** * --                                                         -- * **\n** * --  FUNCTION:                                              -- * **\n** * --    PICKS THE SHARED / EXCLUSIVE PARM FROM A /*CNTL    - -- * **\n** * -- STATEMENT, AND SAVES IT IN A JRW AREA FOR LATER USE.    -- * **\n** * --                                                         -- * **\n** * -- THE FUNCTION ROUTINE FOR /*CNTL IS DIFFERENT, IN THAT   -- * **\n** * -- WE ONLY SET ERROR MESSAGES FROM HERE - THE INFO STATEMENT  * **\n** * -- THAT ENDS UP IN THE JCL LISTING IS GENERATED AFTER WE   -- * **\n** * -- RETURN FROM THE CALL TO RCARDSCN, BECAUSE WE DO NOT     -- * **\n** * -- KNOW WHAT THE WHOLE STATEMENT MEANS UNTIL ALL PARTS,    -- * **\n** * -- INCLUDING OPTIONAL (MISSING) POSITIONALS ARE SCANED.    -- * **\n** * --                                                         -- * **\n** * -- LINKAGE:  VIA $CALL FORM RCARDSCN                       -- * **\n** * --                                                         -- * **\n** * -- REGISTER USAGE (ENTRY / EXIT) :                         -- * **\n** * --                                                         -- * **\n** * --  REG         VALUE ON ENTRY   ........ VALUE ON EXIT    -- * **\n** * --                                                         -- * **\n** * --   R0        N/A                        UNCHANGED        -- * **\n** * --   R1        JCT BASE ADDRESS           ERROR MESSAGE OR -- * **\n** * --                                        ZERO             -- * **\n** * --   R2-R9     N/A                        UNCHANGED        -- * **\n** * --   R10       JRW ADDRESS                UNCHANGED        -- * **\n** * --   R11       HCCT ADDRESS               UNCHANGED        -- * **\n** * --   R12       N/A                        UNCHANGED        -- * **\n** * --   R13       SAVE AREA ADDRESS          UNCHANGED        -- * **\n** * --   R14       RETURN ADDRESS             UNCHANGED        -- * **\n** * --   R15       ENTRY ADDRESS              RETURN CODE      -- * **\n** * --                                                         -- * **\n** * --  RETURN CODES (R15 ON EXIT):                            -- * **\n** * --                                                         -- * **\n** * --       0  -  PROCESSING SUCCESSFUL                       -- * **\n** * --       4  -  GROUP NOT VALID                             -- * **\n** * --   R0        N/A                        UNCHANGED        -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\n         USING X0454DS,R6\n         USING STJCTX,R7            ADDRESS OUR JCTX\n         USING JCT,R8\n         USING JRW,R10\n         USING RTCNTL2,R12          SET LOCAL BASE\n*\nRTCNTL2  $SAVE  ,                   SAVE CALLERS REGS\n         LR    R12,R15              SET OUR LOCAL BASE\n         LR    R8,R1                GET JCT ADDRESSABILITY\n         XR    R4,R4                CLEAR R4 - IT IS A PLACEHOLDER\n*\n         CLC   =C'SHR ',JRWRSCNV    IF IT IS \"SHR\" OR \"SHARED\",\n         JE    RTN0300                WE ARE DONE - JUST GO HOME.\n         CLC   =C'SHARE ',JRWRSCNV  IF IT IS \"SHR\" OR \"SHARED\",\n         JE    RTN0300                WE ARE DONE - JUST GO HOME.\n         CLC   =C'SHARED ',JRWRSCNV IF IT IS \"SHR\" OR \"SHARED\",\n         JE    RTN0300                WE ARE DONE - JUST GO HOME.\n*\n         CLC   =C'EXC ',JRWRSCNV    IF IT'S 'EXC' OR 'EXCLUSIVE'\n         JE    DOEXCUPD              THEN UPDATE TO AN EXCLUSIVE ENQ\n         CLC   =C'EXCLUSIVE ',JRWRSCNV  IF IT'S SO, THEN MAKE IT SO.\n         JE    DOEXCUPD\n         CLC   =C'PURGE ',JRWRSCNV  ALSO HANDLE THE PURGE OPTION IF\n*                                     PRESENTED AS 2ND PARM.\n         JE    DOPURGE\n         CLC   =C'PRG ',JRWRSCNV  ALSO HANDLE THE PURGE OPTION\n         JE    DOPURGE\n         J     UNKNWCNT             UNIDENTIFIED PARM HAS BEEN PASSED\nDOPURGE  EQU   *\n         IC    R4,=C'PURGE'         JUST SAVE THE FIRST BYTE - P-PURGE\n         J     UPEXCPRG             UPDATE THE EXCLUSIVE OR PURGE\nDOEXCUPD EQU   *\n         IC    R4,=C'EXC '          JSUT SAVE THE FIRST BYTE E - EXCE\nUPEXCPRG EQU   *\n** NOW WE HAVE TO UPDATE TO AN EXCLUSIVE RESOURCE NAME\n         $CALL LOCJCTX\n*  LOCJCTX PUTS THE JCTX ADDR IN R7 FOR US - SO USING IS ALREADY SETUP\n         LTR   R15,R15\n         JZ    GOTJX03              IF NOT ZERO - MSG ALREADY SETUP.\n         LR    R1,R7               IF IN ERROR,  R7 = AN ERR MSG\n         J     RTN0304\n* NOW UP DATE  THE CORRECT JCTX FIELD     DGRP\nGOTJX03  EQU   *\n         ICM   R6,B'1111',JCTXWRK+72  SET POINTER TO WORK AREA\n         XR    R2,R2                CLEAR A WORK REG.\n         IC    R2,UJCXMFLG          GET THE FLAG BYTE\n         SRL   R2,4                 CLEAR ALL BUT THE COUNT BITS\n         BCTR  R2,R0                RUDUCE BY ONE (FIND CURRENT - NOT\n*                                      THE NEXT AVAILABLE).\n         LTR   R2,R2                TEST FOR ZERO FIRST\n         JZ    ONLYON0               OUR \"MULTIPLY\" WONT WORK FOR ZERO\n         LR    R1,R2                SAVE ORIGINAL VALUE IN R1\n         SLL   R2,3                 MULTIPLY R2 *8\n         AR    R2,R1                PLUS THE ORIGINAL = * 9 = DISP\nONLYON0  LA    R1,UJCXDNAM(R2)\n         STC   R4,8(R1)            SAVE FLAG IN JCTX\n         STC   R4,X454CTYP          MOVE THE E OR P TO THE WORKAREA\nRCNTL2R0 XR    R15,R15             CLEAR THE RETURN CODE NOW\n         J     RTN0300              RETURN WE ARE DONE\nUNKNWCNT LA    R1,BADPRMM\n         J     RTN0304\nRTN0300  XR    R15,R15\n         J     RTN03\nRTN0304  $STORE (R1)               save return message\n         LHI   R15,4\nRTN03    $RETURN RC=(R15)          RETURN - JUST DO IT!\nBADPRMM  DC    Y(L'BADPRMD)\nBADPRMD  $MSG  999,'STSCX54B-E UNEXPECTED PARM FOUND PROCESSING /*CNTL X\n               STATEMENT.'\n         LTORG\n         DROP  R6,R7,R8,R10,R12\n\n** * ------------------------------------------------------------- * **\n** * --  ROUTINE:  RTTIME                                       -- * **\n** * --                                                         -- * **\n** * --  FUNCTION:                                              -- * **\n** * --    PICKS THE TIME VALUE UP FROM THE FOLLOWING -         -- * **\n** * --        /*HOLDTIL  HH:MM:SS                              -- * **\n** * --                                                         -- * **\n** * --    WE VALIDATE THE TIME AS                              -- * **\n** * --        required -  HH = 00 - 23 (single digit is ok)    -- * **\n** * --        required -  MM = 00 - 59 (single digit is ok)    -- * **\n** * --        optional -  ss = 00 - 59 (single digit is ok)    -- * **\n** * --                                                         -- * **\n** * -- LINKAGE:  VIA $CALL FORM RCARDSCN                       -- * **\n** * --                                                         -- * **\n** * -- REGISTER USAGE (ENTRY / EXIT) :                         -- * **\n** * --                                                         -- * **\n** * --  REG         VALUE ON ENTRY   ........ VALUE ON EXIT    -- * **\n** * --                                                         -- * **\n** * --   R0        N/A                        UNCHANGED        -- * **\n** * --   R1        JCT BASE ADDRESS           ERROR MESSAGE OR -- * **\n** * --                                        ZERO             -- * **\n** * --   R2-R9     N/A                        UNCHANGED        -- * **\n** * --   R10       JRW ADDRESS                UNCHANGED        -- * **\n** * --   R11       HCCT ADDRESS               UNCHANGED        -- * **\n** * --   R12       N/A                        UNCHANGED        -- * **\n** * --   R13       SAVE AREA ADDRESS          UNCHANGED        -- * **\n** * --   R14       RETURN ADDRESS             UNCHANGED        -- * **\n** * --   R15       ENTRY ADDRESS              RETURN CODE      -- * **\n** * --                                                         -- * **\n** * --  RETURN CODES (R15 ON EXIT):                            -- * **\n** * --                                                         -- * **\n** * --       0  -  PROCESSING SUCCESSFUL                       -- * **\n** * --       4  -  PARSED DATA IS INVALID                      -- * **\n** * --   R0        N/A                        UNCHANGED        -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\n         USING X0454DS,R6\n         USING JCT,R8\n         USING JRW,R10\n         USING RTTIME,R12           SET LOCAL BASE\n         USING STJCTX,R7            ADDRESS OUR JCTX\n*\nRTTIME   $SAVE  ,                   SAVE CALLERS REGS\n         LR    R12,R15              SET OUR LOCAL BASE\n         LR    R8,R1                GET JCT ADDRESSABILITY\n         $CALL LOCJCTX             GO GET THE JCT EXTENSION\n         LTR   R15,R15             DID WE GET IT OR NOT\n         JZ    GOTJX04\n         LR    R1,R7               ELSE GET THE ERROR MESSAGE\n         J     RTN0404             AND RETURN WITH ERRORS.\nGOTJX04  EQU   *\n         ICM   R6,B'1111',JCTXWRK+72  RESTORE POINTER TO WORK AREA\n         $CALL VALTIME             VALIDATE A TIME PARAMETER\n         LTR   R15,R15\n         JZ    TIMEISOK            IF ZERO, TIME IS OK - ELSE\n         LR    R1,R15              SAVE ERRROR MESSAGE ADDRESS\n         J     RTN0404\nTIMEISOK EQU   *                   VALIDATE RANGES NOW.\n         CLC   X454TIME(2),=C'23'  HOURS CAN NOT BE GREATER THAN 23\n         JH    ERHRS9              TELL THEM HOURS ARE TOO BIG.\n         CLC   X454TIME+2(2),=C'59'\n         JH    ERMNS9              TELL THEM MINUTES ARE TOO BIG.\n         CLC   X454TIME+4(2),=C'59'\n         JH    ERSEC9              TELL THEM SECONDS ARE TOO BIG.\n* WE SHOULD NOW HAVE 8 DIGITS AT JXWREL5 - THEY SHOULD BE IN THE\n* FORM OF HHMMSS00 - EVEN IF SECONDS OR MINUTES AND SECONDS WERE NOT\n* PRESENTED TO US - ALSO WE SHOULD HAVE PROPERLY PADDED SINGLE DIGITS\n* WITH A LEADING ZERO , SO 1:5 IS VALID AND BECOMES 01050000\n         MVI   X454TIME+6,X'F0'    ADD A TRAILING ZERO\n         PACK  X454TIMP(4),X454TIME(7) PACK INTO FIRST FOUR BYTES\n         MVI   X454TIMP+3,X'0F'\n*\n*                        X454TIMP = RESULT = X'HHMMSS0F'\n*\n         MVC   UJCHLDU,X454TIMP    MOVE THE PACKED VALUE TO JCTX\n         OI    UJCWATF,UJCWATT     SET THE FLAG NOW\n         MVI   X454TYPE,12         FINAL MESSAGE FORMATTING ROUTINE#\n         LA    R1,HOLDTM           GET MSG ADDR\n         ST    R1,X454MSGM         AND SAVE IN THE JCTXWRK AREA\n         LA    R2,X454TIMD\n* NOW FLAG IS SET, PACKED VALUE IS MOVED, GET CURRENT TIME NEXT -\n         TIME  DEC,(R2),ZONE=LT,DATETYPE=YYYYDDD,LINKAGE=SYSTEM,       X\n               MF=(E,TIMEDS)\n*\n* time puts time into x454timd(8) = x'hhmmssthmiju0000'\n* time puts date into x454timd+8(4) = x'0yyyyddd'\n*\n*\n         MVI   X454TIMD+3,X'0F'\n*               current     requested\n         CP    X454TIMD(4),X454TIMP(4) IS IT PAST CURRENT TIME?\n         JH    CHKLEAP             GO ADJUST DATE BEFORE CONVERSION\n* IF HOLDTILL IS IN FUTURE - THEN\n*   USE CONVTOD TO GET TIME WHEN REQUEST WILL BE SATISFIED IN STCK FMT.\nDOTME1   MVC   X454TIMD(3),X454TIMP MOVE THE REQUESTED TIME TO REL1\n         MVC   X454TIMD+3(5),=XL5'00' ALL TRAILING ZEROS\n* DATE IS STILL IN X454TIMD+8(4) FROM THE TIME CALL WE DID JUST ABOVE\n         XC    X454TIMD+12(4),X454TIMD+12 CLEAR DATE FIELD +4\n         CONVTOD CONVVAL=X454TIMD,    TIME/DATE TO CONVERT, IN REL1/2  X\n               TODVAL=X454TIMS,    RESULT FIELD GOES INTO WORK AREA    X\n               TIMETYPE=DEC,       INPUT TIME IN PACKED DECIMAL FMT    X\n               DATETYPE=YYYYDDD    YEAR/DDD IS IN THIS FORMAT\n* ALMOST DONE - JUST ADJUST FOR GMT/UTC TIME INSTEAD OF LOCAL *\n*  UNFORTUNATELY USERS WANT TO USE LOCAL INSTEAD OF GMT.. DUNNO WHY?\n*~~~~~~~ ~~~~~ ~~~~~~~~~~~~~~~~~\n*------------------------------------------------------------*\n*                                                            *\n*        Convert local time to GMT time                      *\n*                                                            *\n*          GMT time = Local time - local offset + leap secs  *\n*                                                            *\n*------------------------------------------------------------*\n         SPACE 1\n         L     R1,CVTPTR(,0)       Get CVT addressability\n         L     R1,CVTEXT2-CVT(,R1) Get address of extension\n         LG    R0,X454TIMS         Get local time from convtod\n         SLG   R0,CVTLDTO-CVTXTNT2(,R1) SUBTRACT TIME ZONE DIFFERENCE\n         ALG   R0,CVTLSO-CVTXTNT2(,R1)  ADD THE LEAP SECONDS BACK IN\n         AG    R0,=FD'4096000000'  ADD ONE SECOND - FOR ROUNDING ISSUES\n         STG   R0,X454TIMS         SAVE IN A WORK AREA FOR A SEC.\n         MVC   UJCHLDUX,X454TIMS   MOVE HIGH ORDER WORD TO HOLD UNITLX\n*                                    to time returned from stck\n         B     RTN0400\n*   USE CONVTOD TO GET TIME WHEN REQUEST WILL BE SATISFIED IN STCK FMT.\nCHKLEAP  EQU   * CHKLEAP ADDS 1 DAY TO DATE AND ADJUSTS YEAR IF NEEDED\n         MVC   X454TIMS(2),X454TIMD+10  X454TIMD+8 = X'0YYYYDDD'\n         NI    X454TIMS,X'0F'      CLEAR HIGH NIBBLE, IT S/B = 0\n         MVI   X454TIMS+2,X'0F'    TURN ON A SIGN BIT\n*                X454TIMS(3) = DAYS * 10 (PACKED FORMAT) =X'0DDD0F'\n         AP    X454TIMS(3),=PL2'10' PLUS THE 1 DAY TO PUSH FORWARD\n*\n         XC    X454TIMS+4(4),X454TIMS+4  ZERO THE SECOND FIELD IN TIMS\n         MVC   X454TIMS+5(3),X454TIMD+8 MOVE THE 0YYYYD FIELD\n         OI    X454TIMS+7,X'0F'         REPLACE TRAILING DAY WITH SIGN\n         DP    X454TIMS+4(4),=PL1'4' DIVIDE BY 4 REMAINDER IN LAST BYTE\n         CP    X454TIMS+7(1),=PL1'0 '\n         JNE   TOMROW              NOT A LEAP - JUST TEST FOR 365 MAX\nDOLEAPT  EQU   *                   IT IS LEAP YEAR TEST FOR 366 MAX\n         CP    X454TIMS(3),=PL3'3670'\n         JL    ADD1DAY             NOT PAST END OF THE LEAP YEAR =OK\n         J     ADDYEAR              ELSE ADD ONE TO YEAR & ZERO DAYS\nTOMROW   EQU   *\n         CP    X454TIMS(3),=PL3'3660' PAST END OF YEAR\n         JL    ADD1DAY             NOT PAST END OF YEAR - CONVERT IT!\nADDYEAR  EQU   *                   ADD ONE TO YEAR AND ZERO DAYS\n         XC    X454TIMS+4(4),X454TIMS+4 ZERO THE YEAR WORK FIELD FIRST\n         MVC   X454TIMS+5(3),X454TIMD+8  MOVE THE 0YYYYD FIELD\n         OI    X454TIMS+7,X'0F'    NOW SET A GOOD SIGN FIELD\n         AP    X454TIMS+4(4),=PL1'1' ADD ONE TO THE YEAR\n         MVC   X454TIMD+8(3),X454TIMS+4 MOVE THE X'0YYYYS' FIELD\n         NI    X454TIMD+10,X'F0'   CLEAR THE SIGN=X'0YYYY0'\n         MVI   X454TIMD+11,X'01'   X454TIMD =X'0YYYY001' (YR ADJUSTED)\n         B     DOTME1              DATE IS FIXED - MOVE RQSTED TIME\nADD1DAY  EQU   *  NEW PACKED DAY VALUE IS IN X454TIMS(3) = X'0DDD0F'\n         NC    X454TIMD+10(2),=X'F000' ZERO DAYS FIELD IN X54TIMD\n         OC    X454TIMD+10(2),X454TIMS  OR IN THE NEW DAYS VALUE - DONE\n         B     DOTME1\n* VARIOUS RETURN ROUTINES\nRTN0400  XR    R15,R15\n         MVI   X454TIMD,X'40'\n         MVC   X454TIMD+1(L'X454TIMD-1),X454TIMD  CLEAR THE FIELD OUT\n         MVC   X454TIMD(2),X454TIME   MOVE THE HOURS\n         MVI   X454TIMD+2,C':'          MAKE IT PRETTY\n         MVC   X454TIMD+3(2),X454TIME+2  MOVE THE MINUTES\n         MVI   X454TIMD+5,C':'             MAKE IT VERY PRETTY\n         MVC   X454TIMD+6(2),X454TIME+4\n         J     RTN04\nRTN0404  $STORE (R1)               save return message\n         LHI   R15,4\nRTN04    $RETURN RC=(R15)          RETURN - JUST DO IT!\nERHRS9   LA    R1,ERHRS9M\n         J     RTN0404\nERMNS9   LA    R1,ERMNS9M\n         J     RTN0404\nERSEC9   LA    R1,ERSEC9M\n         J     RTN0404\nERHRS9M  DC    Y(L'ETH9D)\nETH9D    $MSG  999,'STSCX54B-E HOURS IN TIME SEGMENT MUST BE BETWEEN 00X\n                AND 23. '\nERMNS9M  DC    Y(L'ETM9D)\nETM9D    $MSG  999,'STSCX54B-E MINUTES IN TIME PARM MUST BE BETWEEN 00 X\n               AND 59. '\nERSEC9M  DC    Y(L'ETS9D)\nETS9D    $MSG  999,'STSCX54B-E SECONDS IN TIME PARM MUST BE BETWEEN 00 X\n               AND 59. '\n         $MID   943\nHOLDTM   DC    AL2(L'HOLDTMDD)     LENGTH OF THE MESSAGE\nHOLDTMDD DC    C'&MID.JOBNAMEX * -- HOLD UNTIL = HH:MM:SS        --'\n         LTORG\n         DROP  R6,R7,R8,R10,R12\n\n** * ------------------------------------------------------------- * **\n** * --  ROUTINE:  RTTIMEX                                      -- * **\n** * --                                                         -- * **\n** * --  FUNCTION:                                              -- * **\n** * --    PICKS THE TIME VALUE UP FROM THE FOLLOWING -         -- * **\n** * --        /*HOLDFOR  HH:MM:SS                              -- * **\n** * --                                                         -- * **\n** * --    WE VALIDATE THE TIME AS                              -- * **\n** * --        required -  HH = 00 - 99 (SINGLE DIGIT IS OK)    -- * **\n** * --        required -  MM = 00 - 59 (single digit is ok)    -- * **\n** * --        optional -  ss = 00 - 59 (single digit is ok)    -- * **\n** * --                                                         -- * **\n** * -- LINKAGE:  VIA $CALL FORM RCARDSCN                       -- * **\n** * --                                                         -- * **\n** * -- REGISTER USAGE (ENTRY / EXIT) :                         -- * **\n** * --                                                         -- * **\n** * --  REG         VALUE ON ENTRY   ........ VALUE ON EXIT    -- * **\n** * --                                                         -- * **\n** * --   R0        N/A                        UNCHANGED        -- * **\n** * --   R1        JCT BASE ADDRESS           ERROR MESSAGE OR -- * **\n** * --                                        ZERO             -- * **\n** * --   R2-R9     N/A                        UNCHANGED        -- * **\n** * --   R10       JRW ADDRESS                UNCHANGED        -- * **\n** * --   R11       HCCT ADDRESS               UNCHANGED        -- * **\n** * --   R12       N/A                        UNCHANGED        -- * **\n** * --   R13       SAVE AREA ADDRESS          UNCHANGED        -- * **\n** * --   R14       RETURN ADDRESS             UNCHANGED        -- * **\n** * --   R15       ENTRY ADDRESS              RETURN CODE      -- * **\n** * --                                                         -- * **\n** * --  RETURN CODES (R15 ON EXIT):                            -- * **\n** * --                                                         -- * **\n** * --       0  -  PROCESSING SUCCESSFUL                       -- * **\n** * --       4  -  PARSED DATA IS INVALID                      -- * **\n** * --   R0        N/A                        UNCHANGED        -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\n         USING X0454DS,R6\n         USING JCT,R8\n         USING JRW,R10\n         USING RTTIMEX,R12          SET LOCAL BASE\n         USING STJCTX,R7            ADDRESS OUR JCTX\n*\nRTTIMEX  $SAVE  ,                   SAVE CALLERS REGS\n         LR    R12,R15              SET OUR LOCAL BASE\n         LR    R8,R1                GET JCT ADDRESSABILITY\n         $CALL LOCJCTX\n*  LOCJCTX PUTS THE JCTX ADDR IN R7 FOR US - SO USING IS ALREADY SETUP\n         LTR   R15,R15\n         JZ    GOTJX05              IF NOT ZERO - MSG ALREADY SETUP.\n         LR    R1,R7               ELSE R7 HAS AN ERROR MSG SET UP\n         J     RTN0104\n* NOW UPDATE THE CORRECT JCTX FIELD\n* FIRST PREP A MESSAGE AREA WITH MESSAGE MODEL - TO BE ALTERED LATER\n\nGOTJX05  EQU   *\n         ICM   R6,B'1111',JCTXWRK+72  RESTORE POINTER TO WORK AREA\n         $CALL VALTIME             VALIDATE A TIME PARAMETER\n         LTR   R15,R15\n         JZ    TIMEOKX             IF ZERO, TIME IS OK - ELSE\n         LR    R1,R15              SAVE ERRROR MESSAGE ADDRESS\n         J     RTN0504\nTIMEOKX  EQU   *                   VALIDATE RANGES NOW.\n* THERE IS NO LIMIT ON THE SIZE OF HOURS - UP 99 IS OK.\n         MVC   X454TIMD(8),X454TIME   MOVE CHARS TO REL1 4 LATER\n         CLC   X454TIMD+2(2),=C'59'\n         JH    ERMNX9              TELL THEM MINUTES ARE TOO BIG.\n         CLC   X454TIMD+4(2),=C'59'\n         JH    ERSEX9              TELL THEM SECONDS ARE TOO BIG.\n* WE SHOULD NOW HAVE 8 DIGITS AT JXWREL1 - THEY SHOULD BE IN THE\n* FORM OF HHMMSS00 - EVEN IF SECONDS OR MINUTES AND SECONDS WERE NOT\n* PRESENTED TO US - ALSO WE SHOULD HAVE PROPERLY PADDED SINGLE DIGITS\n* WITH A LEADING ZERO , SO 1:5 IS VALID AND BECOMES 01050000\n**** WE  NEED TO ADD IT TO THE JCTX           **\n         OI    UJCWATF,UJCWATFR     FLAG AS A WAITFOR TIME GIVEN\n         MVI   X454TYPE,12         FINAL MESSAGE FORMATTING ROUTINE#\n         PACK  X454TIMP(4),X454TIMD(7) PACK INTO FIRST FOUR BYTES\n         MVI   X454TIMP+3,X'0F'      FORCE SIGN AND LOW ORDER 0.\n*                                    JXWREL3 NOW = X'HHMMSS0F'\n         MVC   UJCHLDF(4),X454TIMP SAVE FOR EASY TO READ CONVERSION\n* REL2 CAN NOW BE REUSED\n*  FINALLY BUILD THE TIME STAMP WHEN THE HOLD FOR WILL BE SATISFIED.\n         XGR   R5,R5               CLEAR WORK REG NOW\n         LG    R3,=FD'14745600000000' =1 HR IN STCK FORMAT\n         PACK  X454WKDD(16),X454TIMD(2) PACK UP THE HOURS\n         CVBG  R1,X454WKDD         CONVERT HOURS TO BIN\n         MSGR  R1,R3               ANSWER IS IN R3\n         LGR   R5,R1               MOVE TO CUMULATIVE RESULT\n         LG    R3,=FD'245760000000' =1 MINUTE IN STCK FORMAT\n         PACK  X454WKDD(16),X454TIMD+2(2) PACK UP THE MINUTES FIELD\n         CVBG  R1,X454WKDD\n         MSGR  R1,R3               MINUTES*6000 = 1/100TH SECONDS.\n         AGR   R5,R1               ACCUMULATE ANSWER IN R5\n         LG    R3,=FD'4096000000'   =1 SECOND IN STCK FORMAT\n         PACK  X454WKDD(16),X454TIMD+4(2) PACK UP THE SECONDS\n         CVBG  R1,X454WKDD\n         MSGR  R1,R3               R3=100 * SECONDS=R1 = ANSW (R3)\n         AGR   R5,R1               R5 HAS THE TOTAL NUM OF 100/TH SECS\n*                                  THIS SHIFT IS NEEDED FOR STCK FORMAT\n* NOW GET THE CURRENT STCK VALUE AND ADD R5 TO IT FOR THE TIME STAMP\n* VALUE WHEN THE HOLDFOR REQUEST WILL BE SATISFIED.\n         TIME  STCK,X454TIMD,LINKAGE=SYSTEM,MF=(E,TIMEDS)\n* TIME WITH NO PARMS GIVES US THE  TOD CLOCK IN REGS 0 AND 1.\n         LG    R1,X454TIMD         PICK UP CURRENT TIME IN STCK FORMAT\n         AGR   R5,R1               ADD CALCULATED SECONDS VALUE\n         STMH  R5,R5,UJCHLDFX      SAVE FINAL RESULT IN JCTX\n         MVI   X454CTYP,12\n         LA    R15,HOLDFM          GET MESSAGE MODEL PLUS LENGTH\n         ST    R15,X454MSGM        save for the return trip\nRTN0500  XR    R15,R15\n         MVI   X454TIMD,X'40'\n         MVC   X454TIMD+1(L'X454TIMD-1),X454TIMD  CLEAR THE FIELD OUT\n         MVC   X454TIMD(2),X454TIME   MOVE THE HOURS\n         MVI   X454TIMD+2,C':'          MAKE IT PRETTY\n         MVC   X454TIMD+3(2),X454TIME+2  MOVE THE MINUTES\n         MVI   X454TIMD+5,C':'             MAKE IT VERY PRETTY\n         MVC   X454TIMD+6(2),X454TIME+4\n         J     RTN05\nRTN0504  $STORE (R1)               save return message\n         LHI   R15,4\nRTN05    $RETURN RC=(R15)          RETURN - JUST DO IT!\n\nERMNX9   LA    R1,ERMNS8M\n         J     RTN0504\nERSEX9   LA    R1,ERSEC8M\n         J     RTN0504\n\nERMNS8M  DC    Y(L'ETM8D)\nETM8D    $MSG  999,'STSCX54B-E MINUTES IN TIME PARM MUST BE BETWEEN 00 X\n               AND 59. '\nERSEC8M  DC    Y(L'ETS8D)\nETS8D    $MSG  999,'STSCX54B-E SECONDS IN TIME PARM MUST BE BETWEEN 00 X\n               AND 59. '\n         $MID   943\nHOLDFM   DC    AL2(L'HOLDFMDD)     LENGTH OF THE MESSAGE\nHOLDFMDD DC    C'&MID.JOBNAMEX * --   HOLD FOR = HH:MM:SS        --'\n         LTORG\n         DROP  R6,R7,R8,R10,R12\n*\n** * ------------------------------------------------------------- * **\n** * --  ROUTINE:  RTNOAUT                                      -- * **\n** * --                                                         -- * **\n** * --  FUNCTION:                                              -- * **\n** * --    RECOGNIZES THE NOAUTO KEYWORD CARD AND IF THE        -- * **\n** * --    ROUTINE IS CALLED, WE SET THE FLAG IN THE JCTX.      -- * **\n** * --                                                         -- * **\n** * -- LINKAGE:  VIA $CALL FORM RCARDSCN                       -- * **\n** * --                                                         -- * **\n** * -- REGISTER USAGE (ENTRY / EXIT) :                         -- * **\n** * --                                                         -- * **\n** * --  REG         VALUE ON ENTRY   ........ VALUE ON EXIT    -- * **\n** * --                                                         -- * **\n** * --   R0        N/A                        UNCHANGED        -- * **\n** * --   R1        JCT BASE ADDRESS           ERROR MESSAGE OR -- * **\n** * --                                        ZERO             -- * **\n** * --   R2-R9     N/A                        UNCHANGED        -- * **\n** * --   R10       JRW ADDRESS                UNCHANGED        -- * **\n** * --   R11       HCCT ADDRESS               UNCHANGED        -- * **\n** * --   R12       N/A                        UNCHANGED        -- * **\n** * --   R13       SAVE AREA ADDRESS          UNCHANGED        -- * **\n** * --   R14       RETURN ADDRESS             UNCHANGED        -- * **\n** * --   R15       ENTRY ADDRESS              RETURN CODE      -- * **\n** * --                                                         -- * **\n** * --  RETURN CODES (R15 ON EXIT):                            -- * **\n** * --                                                         -- * **\n** * --       0  -  PROCESSING SUCCESSFUL                       -- * **\n** * --       4  -  GROUP NOT VALID                             -- * **\n** * --   R0        N/A                        UNCHANGED        -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\n         USING X0454DS,R6\n         USING STJCTX,R7            ADDRESS OUR JCTX\n         USING JCT,R8\n         USING JRW,R10\n         USING RTNOAUT,R12          SET LOCAL BASE\n*\n* - IF WE GET HERE THEN WE NEED TO INDICATE - NO AUTOROUTING.\n*\nRTNOAUT $SAVE   ,                   SAVE CALLERS REGS\n         LR    R12,R15              SET OUR LOCAL BASE\n         LR    R8,R1                GET JCT ADDRESSABILITY\n** FIRST LOCATE OR CREATE THE JCTX\n         $CALL LOCJCTX\n*  LOCJCTX PUTS THE JCTX ADDR IN R7 FOR US - SO USING IS ALREADY SETUP\n         LTR   R15,R15\n         JZ    GOTJX06              IF ZERO - WE HAVE THE JCTX IN R7\n         LR    R1,R7               IF IN ERROR,  R7 = AN ERR MSG\n         J     RTN0704\nGOTJX06  EQU   *\n         ICM   R6,B'1111',JCTXWRK+72 FLAG THIS JOB - NO AUTO ROUTING\n         OI    UJCMSCF1,UJCMSNOT    FLAG THIS JOB - NO AUTO ROUTING\n         LA    R15,NOAUTRTM\n         ST    R15,X454MSGM        save for the return trip\n         MVI   X454CTYP,16\n         J     RTN0700              RETURN AND TELL THEM ABOUT IT.\n*** RETURN ROUTINES ***\nRTN0704  LHI   R15,4               MAX RC FROM PROCESSIN RTNS..\n         $STORE (R1)               save return message\n         J     RTN07\nRTN0700  XR    R15,R15             ZERO = USUAL RTN PROCEEING RTNS.\nRTN07    $RETURN RC=(R15)          RETURN - JUST DO IT!\n         LTORG\n         $MID   943\nNOAUTRTM DC    AL2(L'NOAUTRTD)     LENGTH OF THE MESSAGE\nNOAUTRTD DC    C'&MID.JOBNAMEX * -- AUTOROUTE FEAUTURE DIABLED   --'\n         DROP  R6,R7,R8,R10,R12\n** * ------------------------------------------------------------- * **\n** * -- LOCJCTX - ROUTINE ENTERED VIA BAL R6,LOCJCTX  ON RETURN -- * **\n** * -- IF R15=ZERO, THEN R7=JCTX ADDR, IF R15 NOT= 0 R1 POINTS -- * **\n** * -- TO MESSAGE TO BE ISSUED AND R15 = RETURN CODE FOR EXIT. -- * **\n** * --                                                         -- * **\n** * --   IF THE JCTX CANNOT BE LOCATED, BECAUSE IT DOES NOT    -- * **\n** * -- YET EXIST, IT WILL BE CREATED HERE.                     -- * **\n** * ------------------------------------------------------------- * **\n         USING LOCJCTX,R12\n         USING JCT,R8\n         USING STJCTX,R7            ADDRESS OUR JCTX\nLOCJCTX  $SAVE\n         LR    R12,R15             SET OUR LOCAL BASE\n         LR    R8,R1               LOAD THE PASSED JCT ADDRESS\n         $JCTXGET JCT=(R8),         GET (LOCATE) OUR JCT EXTENSION     X\n               TYPE='USER',MOD=1,                                      X\n               NOTFOUND=MAKEJCTX,   IF NOT CREATED YET - GO MAKE ONE   X\n               FOUND=GOTJCTX1,      GOOD RETURN LABEL                  X\n               ERRET=BADJCTX        SPECIFY ERROR RETURN LABEL\n* we never fall thru - we must branch to support rtns from $jct calls\nGOTJCTX1 XR    R15,R15              CLEAR RETURN CODE\n         LR    R7,R1                SET JCTX ADDRESS\n         $STORE (R7)               SET JCTX ADDR FOR THE CALLER\n         $RETURN RC=(R15)            AND RETURN WITH A GOOD RC.\n\n* INIT THE RECORD WHEN WE GET IT THE FIRST TIME ONLY.\nGOTJCTX2 XR    R15,R15\n         LR    R7,R1\n** * ------------------------------------------------------------- * **\n** * -- INITIALIZE THE JCT EXTENSION NOW.                       -- * **\n** * ------------------------------------------------------------- * **\nINITUJC  EQU   *\n* first zero the entire user portion of the returned record\n         XC    JCXBASLN(UJCXSLN1-JCXBASLN,R7),JCXBASLN(R7)\n         MVC   UJCXVRM,=X'00010700'  SET THE VRM VALUE NOW 1.7.0\n         MVC   UJCXID,=CL4'JCX'     MOVE THE EYECATCHER\n         OI    UJCXUFLG,UJCXXEYE+UJCXXVRM  SET VRM AND EYE ARE INIT'ED\n         MVI   UJCXWITH,C' '       BLANK THE BEFORE, AFTER, WITH\n         MVC   UJCXWITH+1(L'UJCXWITH),UJCXWITH   FIELDS NOW\n         MVC   UJCXAFTN,UJCXWITH\n         MVC   UJCXBFOR,UJCXWITH\n         MVC   UJCXDNAM,UJCXWITH\n         MVC   UJWIOUT,UJCXWITH    BLANK THE WITHOUT FIELD\nRETSAV7  $STORE (R7)                SET THE JCTX ADDR FOR THE CALLER\n         $RETURN RC=(R15)            ALSO USED FOR WTO MSGS, JCLERR\n*\nMAKEJCTX EQU   *\n         $JCTXADD  JCT=(R8),                                           X\n               TYPE='USER',MOD=1,LENGTH=UJCXSLN1,                      X\n               FOUND=LOGERRMR,       THIS SHOULD NEVER HAPPEN!         X\n               OKRET=GOTJCTX2,NOSPACE=JCTXSERR,ERRET=BADJCTX\n*\nBADJCTX  EQU   *                    GENERAL ERROR TRYING TO FIND JCTX\n         LA    R7,BADJCTXM          POINT TO ERROR MESSAGE\n         LA    R15,4(R0,R0)         SET AN RC=04\nBADRTXX  $STORE (R7)                SET THE JCTX ADDR FOR THE CALLER\n         $RETURN RC=(R15)            ALSO USED FOR WTO MSGS, JCLERR\n*\nJCTXSERR EQU   *                    SPACE ERROR WHEN GETTING JCTX\n         LA    R7,SPCERRM           ADDRESS OF ERROR MESSAGE\n         LHI   R15,4                SET RETURN CODE NON ZERO\n         B     BADRTXX              RETURN TO CALLER\n*\nLOGERRMR EQU   *                    LOGICAL ERROR ENCOUNTERD -JCTX\n         LA    R7,LOGERRM           ADDRESS OF ERROR MESSAGE\n         LHI   R15,4                SET RETURN CODE NON ZERO\n         B     BADRTXX              RETURN TO CALLER\n** * ------------------------------------------------------------- * **\n** * --                                                         -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\nBADJCTXM DC    Y(L'BDJCTXMM)\nBDJCTXMM $MSG  999,'STSCX54B-E UNABLE TO LOCATE JCTX.'\n\nLOGERRM  DC    Y(L'MLOGERRM)\nMLOGERRM $MSG  999,'STSCX54B-E LOGIC ERROR CREATING JCTX.'\n\nSPCERRM  DC    Y(L'MSPCERR)\nMSPCERR  $MSG  999,'STSCX54B-E NO SPACE LEFT FOR NEW JCTX.'\n         DS    0F\n** * ------------------------------------------------------------- * **\n** * -- VALTIME - ROUTINE TO VALIDATE A TIME PARAMETER - ALLOW  -- * **\n** * --  HH:MM:SS - EACH SEGEMENT CAN BE 1 OR 2 DIGITS, TRAILING-- * **\n** * -- SEGMENTS CAN BE OMITTED - NO INTERNAL CHECK FOR VALID RNG. * **\n** * ------------------------------------------------------------- * **\n         USING X0454DS,R6\n         USING JRW,R10\n         USING VALTIME,R12          SET LOCAL BASE\nVALTIME  $SAVE\n         LR    R12,R15             SET OUR BASE\n         LR    R8,R1               GET PASSED JCT ADDRESS\n         LH    R5,JRWRSCNL          GET LENGTH OF OPERAND\n** * ------------------------------------------------------------- * **\n** * -- FIRST WE MUST VALIDATE THE INPUT DATA - DO WE HAVE A    -- * **\n** * -- VALID TIME OR NOT .                                     -- * **\n** * ------------------------------------------------------------- * **\n         CHI   R5,8                MAX SIZE OF A TIME OPERAND\n         JH    TIMEBIGE            TIME TOO BIG ERROR HAS OCCURED\n         CHI   R5,4                MIN SIZE OF A TIME OPERAND\n         JL    TIMELOWE            TIME TOO SMALL ERROR HAS OCCURED\n         BCTR  R5,R0               REDUCE LENGTH FOR AN EXECUTE\n         XR    R1,R1               CLEAR RESULT REG FOR TABLE BYTE\n         XR    R2,R2               CLEAR POINT TO ADDR OF HIT\n         XR    R3,R3               CLEAR LENGTH SCANNED REG...\n         LA    R4,JRWRSCNV         INITIALIZE POINTER TO TIME FIELD\n         LA    R7,3                MAX VALUES TO PARSE FROM RESULT\n         LA    R9,X454TIME         GET ADDR OF TEMP HOLD AREA (RSLT)\n         MVC   X454TIME(8),=8C'0'  PREFILL RESULT WITH ALL ZEROS\n         J     SCNTIM01            JUMP OVER ADJUSTMETS FOR SCANS 2-3\n\nRESCNTIM EQU   *\n         SR    R5,R3               ORIGINAL LENGTH - LAST SEGMENT LEN\n         LA    R4,0(R4,R3)         OLD ADDR + SEG LEN + 1 = NEW ADDR\n\nSCNTIM01 EX    R5,TRTTIME          TRT 0(XX,R4),TRTTIME\n         BC    8,NOCOLONS          NOHITS FOUND - ERROR? MAYBE?\n         BC    4,COLONFND          WE FOUND A NON-ZERO BYTE\n         BC    2,ERTIMX1           ALWAYS AN ERROR BAD LAST BYTE\n\nCOLONFND EQU   *                   WE GOT A HIT IN THE MIDDLE OF DATA\n         CLM   R2,B'0001',=X'01'   COMPARE TO SEE IF WE HIT A COLON !\n         BH    ERRORTIM            ALWAYS AN INVALID TIME IF > 1\n*\n         LR    R3,R1               R3 & R1 = ADDR WHERE SCAN STOPPED\n         SR    R3,R4               R3 = LENGTH OF SEGMENT JUST SCANNED\n*STATUS; R1= WHERE SCAN STOPPED, R3=LENGTH OF SEGMENT, R4=TOP OF SEG.\n* NOW EVALUATE THE DATA WE CAPTURED.\n         BCTR  R3,R0               REDUCE LENGTH FOR AN EXECUTE\n         LTR   R3,R3\n         BZ    MOVESNGL\n         CHI   R3,1                CHECK IF MORE THAN 2 DIGITS\n         BH    ERTIMX4\nMOVESEG  MVC   0(2,R9),0(R4)       MOVE RESULT TO FINAL ANSWER AREA\n         LA    R9,2(R9)            BUMP R9 FOR NEXT SEGMENT\n         J     OVRSNGL\nMOVESNGL EQU   *                   MOVE A SINGLE CHARACTER\n         MVC   1(1,R9),0(R4)       MOVE JUST ONE CHARACTER INTO CC#2\n         LA    R9,2(R0,R9)         BUMP R9 - TMP RESULTS AREA\nOVRSNGL  EQU   *\n         LA    R3,2(R0,R3)         RESTORE R3 (LENGTH) VALUE +1(colon)\n         BCT   R7,RESCNTIM         TRT SCAN UP TO THREE TIMES.\n         B     ERTIMX3             WE SHOULD NEVER FALL THRU\nNOCOLONS EQU   *                   ONLY VALID IF ON THE THIRD PASS\n* THIS *MUST* BE THE LAST SEGMENT - ELSE WE HAVE AN ERROR\n* R5 = LENGTH OF EXECUTED TRT = LENGTH OF PARM LESS 1....S/B 0 OR 1\n         CHI   R5,1\n         BH    ERTIMX4             TOO MANY DIGITS IF > 1\n* NO CHECKS LEFT, JUST MOVE THE ONE OR TWO DIGIT TIME SEGMENT\n         BE    MVESEG              GO MOVE TWO DIGITS\n*\nMVESNGL  MVC   1(1,R9),0(R4)       MOVE THE SINGLE DIGIT\n         J     FINALTIM\nMVESEG   MVC   0(2,R9),0(R4)       MOVE RESULT TO FINAL ANSWER AREA\nFINALTIM EQU   *\n         XR    R15,R15\n         $RETURN RC=(R15)\nERRORTIM LA    R15,ERTIX0M\n         J     FTIMER\nERTIMX1  LA    R15,ERTIX1M\n         J     FTIMER\nERTIMX2  LA    R15,ERTIX2M\n         J     FTIMER\nERTIMX3  LA    R15,ERTIX3M\n         J     FTIMER\nERTIMX4  LA    R15,ERTIX4M\n         J     FTIMER\nTIMEBIGE LA    R15,ERTIMBIG\n         J     FTIMER\nTIMELOWE LA    R15,ERTIMSHR\nFTIMER   EQU   *\n         $RETURN RC=(R15)          IF R15 ^=0 THEN R15=A(ERROR MSG)\nTRTTIME  TRT   0(0,R4),TIMETAB\nTIMETAB  DC    256X'FF'            NOTHING IS VALID -\n         ORG   TIMETAB+C':'          EXCPET A COLON\n         DC    X'01'                   WHICH IS A SPECIAL CASE\n         ORG   TIMETAB+C'0'          AND EXCEPT FOR DIGITS\n         DC    10X'00'                   ANY OF WHICH ARE ALLOWED\n         ORG   TIMETAB+256         RESET COUNTER BACK WHERE IT WAS\nERTIX0M  DC    Y(L'ETMX0)\nETMX0    $MSG  999,'STSCX54B-E INVALID CHARACTER FOUND WHILE PARSING TIX\n               ME PARM. '\nERTIX1M  DC    Y(L'ETMX1)\nETMX1    $MSG  999,'STSCX54B-E LAST POSITION OF TIME PARM IS NOT A DIGIX\n               T .'\nERTIX2M  DC    Y(L'ETMX2)\nETMX2    $MSG  999,'STSCX54B-E TOO MANY DIGITS IN THE HH OR MM OR SS PAX\n               RT OF TIME. '\nERTIX3M  DC    Y(L'ETMX3)\nETMX3    $MSG  999,'STSCX54B-E TIME PARM HAS TO MANY COMPONENTS - TRY HX\n               H:MM:SS .'\nERTIX4M  DC    Y(L'ETMX4)\nETMX4    $MSG  999,'STSCX54B-E TIME PARM HAS TOO MANY DIGITS - TRY HH:MX\n               M:SS .'\nERTIMBIG DC    Y(L'ETBIG)\nETBIG    $MSG  999,'STSCX54B-E TIME PARM IS TOO LONG IT SHOULD BE HH:MMX\n               :SS .'\nERTIMSHR DC    Y(L'ETSHR)\nETSHR    $MSG  999,'STSCX54B-E TIME PARM IS TOO SHORT IT SHOULD BE HH:MX\n               M:SS .'\n        $MODEND ,\n         LTORG\nAPARNUM  DC    CL8'NONE'            APAR NUMBER\nPTFNUM   DC    CL8'NONE'            PTF NUMBER\nX0454DS  DSECT\nX454LEN  DS    F                   LENGTH OF AREA\nX454EYE  DS    XL4                 C'SSMZ'\nC454CDSV DS    CL80                          TMP SAVE AREA FOR JCTXWRK\nX454RELT DS    CL8                 (BEFORE/AFTER/WITH/WITHOUT) TYPE\nX454NAME DS    CL8                 NAME ASSOCIATED WITH RELATIVE OPER.\nX454TIME DS    CL8                 TIME - CHARACTER FORMAT HH:MM:SS\nX454MSGM DS    AL4                 ADCON TO MESSAGE MODEL\n* the next two fields must stay together for SMF formatting reansons.\nX454TIMP DS    XL4                 PACKED TIME VALUE\nX454TIMS DS    XL4                 STCK FORMAT TIME / DATE\nX454TIMD DS    2D\nTIMEDS   TIME  LINKAGE=SYSTEM,MF=L\nCONVDS   CONVTOD MF=L\nX454CTYP DS    CL1                 CNTL TYPE - E / S / P\nX454SMFX DS    XL(SMFD8LEN)        AREA TO BUILD AN SMF RECORD IN\nX454SMFW DS    4F                  WORK AREA FOR THE SMFEWTM MACRO\nX454WKDD DS    2D                  WORK AREA FOR STCK FORMAT DATE\nX454ECSA DS    F                   POINTER TO ECSA AREA\nX454TYPE DS    XL1                 MESSAGE FORMATTING ROUTINE #\n@0454LEN EQU   (((*-X0454DS)+7)/8)*8  LENGTH OF OUR DSECT DWORD ROUNDED\n         END\n++SRC(STSCX06A) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).\n*********************************************************************\n*                                                                   *\n*                        HASP EXIT 6                                *\n*                                                                     *\n*     THIS EXIT GETS CONTROL AFTER EACH JCL STATEMENT HAS BEEN        *\n*     CONVERTED INTO INTERNAL TEXT AND ONCE AFTER ALL OF A JOB'S      *\n*     JCL HAS BEEN CONVERTED.  IT PERFORMS THE FOLLOWING FUNCTIONS:   *\n*     > CHECKS IF A SCHEDULING ENVIRONMENT (SCHENV=) HAS BEEN         *\n*       CODED ON THE JOBCARD.  IF SPECIFIED, THE SCHEDULING           *\n*       ENVIRONMENT IS USED.  OTHERWISE IF A MELLON RESOURCE NAME     *\n*       HAS BEEN SPECIFIED ON A \"/*ROUTE XEQ RESNAME\" CONTROL         *\n*       STATEMENT, THEN THE RESOURCE NAME IS USED AS A SCHEDULING     *\n*       ENVIRONMENT.                                                  *\n*                                                                     *\n*     ENTRY POINT: EXIT06                                             *\n*                                                                     *\n* INPUT   R0  = A CODE INDICATING THE STATUS OF CONVERSION PROCESSING *\n*               0  INDICATES THAT A JCL STATEMENT HAS BEEN CONVERTED  *\n*                  TO AN C/I TEXT IMAGE                               *\n*               4  INDICATES THAT ALL OF THE JCL FOR A PARTICULAR     *\n*                  JOB HAS BEEN CONVERTED TO C/I TEXT.                *\n*                                                                     *\n*         R1  = ADDRESS OF A 4-WORD PARAMETER LIST WITH THE           *\n*               FOLLOWING STRUCTURE:                                  *\n*               WORD 1 (+0) = ADDR OF 16-BYTE WORK AREA               *\n*               WORD 2 (+4) = IF THE CODE PASSED IN R0 IS 0, THIS     *\n*                             POINTS TO THE ADDRESS OF THE LAST       *\n*                             SINGLE INTERNAL TEXT IMAGE CONVERTED    *\n*                             FROM A JCL STATEMENT.  IF THE CODE      *\n*                             PASSED IN R0 IS 4, THIS WORD CONTAINS   *\n*                             THE ADDRESS OF THE CONVERTER'S RETURN   *\n*                             CODE.                                   *\n*               WORD 3 (+8) = ADDRESS OF THE DTE                      *\n*               WORD 4 (+12) = ADDRESS OF THE JCT                     *\n*               WORD 4 (+16) = N/A on entry; used to store the        *\n*                              IEFCNMB if gotten in exit              *\n*        R2-10  N/A                                                   *\n*        R11    HCT ADDRESS                                           *\n*        R12    N/A                                                   *\n*        R13    ADDRESS OF AN 18 WORD OS-STYLE SAVE AREA              *\n*        R14    RETURN ADDRESS                                        *\n*        R15    ENTRY ADDRESS                                         *\n*                                                                     *\n*     OUTPUT REGISTERS:                                               *\n*        R0-14  UNCHANGED                                             *\n*        R15:   RETURN CODE                                           *\n*               0 - QUEUE JOB FOR EXECUTION                           *\n*               8 - CANCEL JOB AND QUEUE FOR OUTPUT                   *\n*                                                                     *\n*     REGISTER USAGE(INTERNAL):                                       *\n*        R0-8   WORK REGISTERS                                        *\n*        R9     WORKAREA ADDRESS                                      *\n*        R10    JCT ADDRESS                                           *\n*        R11    HCT ADDRESS                                           *\n*        R12    BASE REGISTER                                         *\n*        R13    ADDRESS OF AN 18 WORD OS-STYLE SAVE AREA              *\n*        R14-15 WORK AND LINKAGE REGISTERS                            *\n*                                                                     *\n*                                                                     *\n*     AUTHOR: STEPHEN MCCOLLEY                                        *\n*             ATLANTA, GA                                             *\n*                                                                     *\n*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *\n*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS *\n*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED  *\n*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF   *\n*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE *\n*  USEFULLNESS OF THE MATERIAL.                                       *\n*                                                                     *\n*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *\n*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE  *\n*  IN THE FUTURE.                                                     *\n*                                                                     *\n***********************************************************************\n\n         COPY  $HASPGBL\nSTSCX06A $MODULE ENVIRON=SUBTASK,                                      X\n               IBMJES2=SAMPLE,                                         X\n               TITLE='USER EXIT6A MOD. ',                              X\n               RMODE=ANY,                                              X\n               CNMB,                                                   X\n               CVT,                                                    X\n               KEYS,                                                   X\n               PSA,                                                    X\n               SJKEY,                                                  X\n               TEXT,                                                   X\n               $CADDR,                                                 X\n               $DTE,                                                   X\n               $DTECNV,                                                X\n               $HASPEQU,                                               X\n               $HCT,                                                   X\n               $HCCT,                                                  X\n               $JCT,                                                   X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PADDR,                                                 X\n               $PARMLST,                                               X\n               $PCE,                                                   X\n               $TRE,                                                   X\n               $TQE,                                                   X\n               $XIT\n\nEXIT06A  $ENTRY BASE=R12           EXIT ROUTINE ENTRY POINT\n\n*********************************************************************\n*                                                                   *\n*        SAVE CALLER'S REGISTERS AND ESTABLISH ADDRESSABILITIES.    *\n*                                                                   *\n*********************************************************************\n\n         USING HCT,R11\n        $SAVE  NAME=EXIT06A        SAVE CALLER'S REGISTERS\n* GET THE JOBCARD WHEN IT FIRST HITS THIS EXIT *\n* WE MAY HAVE ALREADY CHANGED THE SCHENV IN THE JCT - IN EXIT 4A/54A\n         LTR   R0,R0                DID THEY GIVE US A ZERO OR FOUR?\n         JNZ   RC00                 ONLY A ZERO IS GOOD FOR OUR USE.\n\n         LR    R12,R15             SET BASE REGISTER\n         L     R10,12(,R1)         GET JCT ADDRESS\n\n         USING JCT,R10\n         CLC   JCTCNVRC,=A(JCTCOK)  JOB SUCCESSFULLY CONVERTED?\n         JNE   RC00                NO - BRANCH, RETURN\n\n         TM    JCTJOBFL,JCTBATCH   BATCH JOB?\n         JZ    RC00                NO - BRANCH, RETURN\n\n         L     R9,4(,R1)           GET TEXT IMAGE ADDRESS\n         USING TEXT,R9\n\n         TM    STRINDCS,JOBSTR     'JOB' STATEMENT?\n         JNO   RC00                IF NOT, THEN RETURN NOW\n*\n*********************************************************************\n*                                                                   *\n*        CHECK IF A SCHEDULING ENVIRONMENT HAS BEEN CODED ON        *\n*        THE JOBCARD.  IF SPECIFIED, ALLOW IT TO BE USED.           *\n*                                                                   *\n*********************************************************************\n         $CALL XJDTKEY,             FIND SCHENV TEXT x                 x\n               PARM0=SJKYJENV,      INTERNAL TEXT KEY                  x\n               PARM1=STRJKEY,       BEGIN OF TEXT FOR JOB              x\n               ERRET=RC00           IF NOT FOUND - JUST END\n         C     R15,=F'4'            TEST FOR NOT FOUND RETURN CODE\n         JE    RC00\nCLRJCT   SLR   R2,R2                CLEAR TO GET SCHENV LENGTH\n         ICM   R2,B'0001',5(R1)     PICK UP THE LENGTH\n         BNP   RC00                 IF ZERO OR NOT VALID - SKIP IT\n* AT THIS POINT WE FOUND A NON-ZERO LENGTH, SCHENV PARM ON THE JOBCARD\n         MVI   JCTSCHEN,C' '\n         MVC   JCTSCHEN+1(L'JCTSCHEN-1),JCTSCHEN  CLEAR OUR OVERRIDE\n\n\n\n\n*********************************************************************\n*                                                                   *\n*        RETURN TO CALLER.                                          *\n*                                                                   *\n*********************************************************************\n\nRC00     XR     R15,R15            SET RETURN CODE = 0\n         J      RETURN             BRANCH - CONTINUE\n\nRETURN8  EQU    *\n         L      R15,$F8            SET RETURN CODE = 8\n\nRETURN  $RETURN RC=(R15)           RETURN TO CALLER\n\n         DROP  R9,R10,R11          TEXT, JCT, HCT\n\n         LTORG\n\n        $MODEND\n\n\n         END\n++SRC(STSC2050) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).\nSTSC2050 TITLE 'JES2 USER ENVIRONEMNT END OF INPUT EXIT'\n***********************************************************************\n* STSC2050 - COMMON ROUTINE CALLED BY EXIT20A AND EXIT50A\n* THE ROUTINE JUST COPIES JCT EXTENSION DATA TO JQE EXTENSIONS (BERTS)\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *\n*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS *\n*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED  *\n*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF   *\n*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE *\n*  USEFULLNESS OF THE MATERIAL.                                       *\n*                                                                     *\n*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *\n*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE  *\n*  IN THE FUTURE.                                                     *\n*                                                                     *\n***********************************************************************\nSTSC2050 $MODULE TITLE='JES2 COMMON RTNS FOR EXIT 20 AND 50',          X\n               RMODE=ANY,                                              X\n               ENVIRON=(USER,ANY),                                     X\n               $BERT,                                                  X\n               $BERTTAB,                                               X\n               $CATBERT,           (BERT)                              X\n               $HASPEQU,                                               X\n               $HCCT,              (BERT)                              X\n               $JCT,                                                   X\n               $JCTX,                                                  X\n               $JQE,                                                   X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PCE,                                                   X\n               $TRE,               HASP TRE DSECT                      X\n               $TQE,               HASP TQE DSECT                      X\n               $USERCBS,                                               X\n               $XPL\n         USING XPL,R5              ADDRESSABILITY TO THE XPL\n         USING JQA,R9              ADDRESSABILITY TO THE JQE\n         USING JCT,R10             ADDRESSABILITY TO THE JCT\nSTSX2050 $ENTRY BASE=(R12),CSECT=NO,ENTRY=YES,REGUSE=(R15)\n         LR    R12,R15             SET UP OUR BASE REG.\n         LR    R5,R0               SET $XPL BASE REG.\n         L     R9,X050JQE          SET ADDR UPDATE MODE JQA IN R9\n         L     R10,X050JCT         SET ADDRESS OF JCT IN R10\nCOPYEXT  $JCTXGET  JCT=(R10),      LOCATE OUR JCT EXTENSION            X\n               TYPE='USER',MOD=1,                                      X\n               ERRET=RET00         DONT CREATE A JQEX IF NO JCTX\n*\n         LR    R7,R1               GET ADDRESS OF OUR EXTENSION\n         USING STJCTX,R7\n*\n**********************************************************************\n*  GET OUR JQE FOR UPDATE AND LOCATE OUR BERT FOR THIS\n*  JOB (ALL TYPES: BATCH, STC, TSU) AND INITIALIZE FOR LATER USE.\n**********************************************************************\n*  WE DID THIS IN THE PAST - WE HAVE AN UPDATE MODE JQA ALREADY\n*        $QSUSE  ,                 MAKE SURE WE OWN THE QUEUES\n*\n*  LIKEWISE - WE ARE GIVEN AN UPDATE MODE JQA - SO JUST USE THAT!\n*\n*        $DOGJQE ACTION=(FETCH,UPDATE),      GET AN UPDATE MODE JQA\n*              JQE=(R9)\n*  OBVIOUSLY NO NEED TO LOAD INTO R9 FROM $DOGJQE - WE ALREADY HAD IT!\n*        LR    R9,R0               GET THE ADDR OF OUR JQA\n*\n         $DOGBERT ACTION=GETOFFSET,    GET THE OFFSET                  X\n               CBTYPE=JQE,                IN THE JQA                   X\n               NAME=STQNAME,                 OF OUR BERT               X\n               ERRET=BADBERT\n*\n*  DOGBERT RETURNED THE OFFSET IN R1 --- R1+R9(THE UPDATE JQA) = BERT\n*\n         LA    R8,0(R1,R9)         GET ADDRESS OF OUR BERT\n         USING STQNAME,R8\n*\n* WE NOW HAVE A JCT EXTENSION AND A BERT - DO THE COPIES!\n*\n* COPY OUR FIELDS FROM THE JCT EXTENSION TO OUR BERT.\n*  FIRST  MOVE  FIELDS COMMON TO ALL VERSION OF THE MODS.\n*\n*  COPY FIXED RELATIONAL VALUES\n         MVC   UBRWITH,UJCXWITH    MOVE THE WITH FIELD\n         MVC   UBRAFTR,UJCXAFTN    MOVE THE AFTER FIELD\n         MVC   UBRBFOR,UJCXBFOR    MOVE THE BEFORE FIELD\n* COPY CNTL VALUES\n         MVC   UBRDNAME,UJCXDNAM   MOVE THE 5 /*CNTL NAMES\n*    COPY FLAGS\n         MVC   UBRUFLAG,UJCXUFLG   MOVE FLAG 2 FIELD (VRM/EYE)\n         MVC   UBRMFLAG,UJCXMFLG   MOVE FLAG 1 FIELD (BEF/AFT/ETC)\n         MVC   UBRDLAYS,UJCXDLYS   MOVE THE DELAY REASONS FLAG\n*\n* WE ALWAYS CREATE A NEW FORMAT JQE, BUT MIGHT HAVE AN OLD JCT\n*\n         TM    UJCXUFLG,UJCXXVRM   IS THE VRM FLAG SET? DO WE HAVE ONE?\n         BNO   DOOLDJCT            IF NOT WE HAVE AN OLD VERSION JCT.\n**   ELSE MOVE THE NEWER - VERSIONED VALUES TO THE JQE\n** NEW FIELDS BELOW **\n* EXTENDED FLAG BYTES\n         MVC   UBRWATF,UJCWATF     WAIT FOR FLAGS BYTE\n         MVC   UBRTAPF1,UJCTAPF1   MOVE THE TAPE 1 FLAG BYTE\n         MVC   UBRMSCF1,UJCMSCF1   MOVE FLAG BYTE FOR MISC INDICATORS\n         MVC   UBROPNF1,UJCOPNF    MOVE THE OPEN (UNUSED) FLAG NEXT\n* HOLD VALUES\n         MVC   UBRHLDU,UJCHLDU     MOVE HOLD UNTIL TIME\n         MVC   UBRHLDUX,UJCHLDUX   TIME HOLD TILL WILL BE SATISFIED\n         MVC   UBRHLDF,UJCHLDF     MOVE HOLD FOR   TIME\n         MVC   UBRHLDFX,UJCHLDFX   TIME HOLD FOR  WILL BE SATISFIED\n* WITHOUT NAME\n         MVC   UBRWIOUT,UJWIOUT    MOVE THE WITHOUT NAME\n         MVC   UBRMMTQE(L'UBRMMTQE),UJMMTQE     MOVE MEMBER TQE VALUES\n         MVC   UBRMMSTK(8*L'UBRMMSTK),UJMMSTK   MOVE MEMBER MASK VALS\n         MVC   UBRRSVD(L'UBRRSVD),UJRSVD      MOVE RESERVED VALUES\nDOOLDJCT MVI   UBRDLAYS,0          ZERO OUR DELAY FLAGS\n* FIXED FIELDS - EYECATCHER AND VRM VALUES.\n* WE CAN HANDLE AN OLD JCT AND A NEW JQE ... SHOULD NOT BE, BUT ITS OK\n         MVC   UBRXID,=C'JQEX'     MOVE THE EYECATCHER\n         MVC   UBRVRM,=X'00010700' MOVE THE VRM FIELD 1.7.0\n         DROP  R7                  LOSE ADDRESS OF OUR JCTX\n*\n* CHECK JOB TYPE\n*\n********************************************************************\n*  EXIT RETURN POINTS\n********************************************************************\nRET00    DS    0H\n         LA    R6,0                SET NORMAL RETURN CODE\n*\n*   NO NEED TO RETURN THE UPDATE MODE JQA - THE CALLER HANDLES IT!\n*\nRETURN   DS    0H\n         $RETURN RC=(R6)           RETURN TO CALLER\n*\nBADBERT  DS    0H                  ERROR RETURN FROM $DOGBERT\n         LA    R6,16(0,0)          SET A BAD RETURN CODE - RC=16\n         B     RETURN              GO RETURN TO CALLER\n         $MODEND ,\n         END   ,\n++SRC(STSCX20A) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).\nSTSCX20A TITLE 'JES2 MAINTASK END OF INPUT USER EXIT'\n***********************************************************************\n* EXIT 20 - JES2 MAINTASK - END OF INPUT EXIT - CALLED FOR RJE / NJE\n* AND OTHER SOURCES OF INPUT OTHER THAN INTERNAL READERS.\n*\n* THE FUNCTION IS TO CHECK FOR A /*ROUTE XEQ HERE, AND SET A SYSAFF IF\n* NEEDED AND THEN TO $CALL THE COMMON STSC2050 MODULE TO COPY THE JCTX\n* TO THE JQEX (BERT EXTENSION).\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *\n*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS *\n*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED  *\n*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF   *\n*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE *\n*  USEFULLNESS OF THE MATERIAL.                                       *\n*                                                                     *\n*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *\n*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE  *\n*  IN THE FUTURE.                                                     *\n*                                                                     *\n***********************************************************************\n         COPY  $HASPGBL            INCLUDE THE JES GLOBAL VALUES\n         PRINT ON                  RETORE FULL PRINTING\nSTSCX20A $MODULE TITLE='JES2 END OF INPUT USER EXIT',                  X\n               RMODE=ANY,                                              X\n               SYSP=(GEN,GEN,DATA,GEN,GEN),                            X\n               ENVIRON=JES2,                                           X\n               RPL,                GENERATE RPL DSECT                  X\n               $BERT,              (BERT)                              X\n               $BERTTAB,           (BERT)                              X\n               $BUFFER,            HASP SPOOL BUFFER DSECT             X\n               $CADDR,                                                 X\n               $CATBERT,           (BERT)                              X\n               $CMB,               ($RDRWORK)                          X\n               $DCT,               (INFORM)                            X\n               $HASPEQU,           HASP EQUATES                        X\n               $HCCT,              (BERT)                              X\n               $HCT,                                                   X\n               $HFAME,             ($HCCT)                             X\n               $JCT,               HASP JOB CONTROL TABLE DSECT        X\n               $JCTX,              HASP JOB CONTROL TABLE DSECT        X\n               $JQE,               HASP JOB QUEUE ELEMENT DSECT        X\n               $MIT,               HASP MIT DSECT                      X\n               $MITETBL,                                               X\n               $PADDR,             HASP PADDR DSECT                    X\n               $PARMLST,                                               X\n               $PCE,               HASP PROCESSOR CONTROL ENTRY DSECT  X\n               $PSV,                                                   X\n               $QSE,               ($HCT)                              X\n               $RDRWORK,           HASP RDR PCE WORKAREA DSECT         X\n               $SAFINFO,           ($RDRWORK)                          X\n               $SCAT,              HASP SCAT DSECT                     X\n               $SCANTAB,           HASP SCAN TABLE DSECT               X\n               $SJB,               (INFORM)                            X\n               $TQE,               ($SJB)                              X\n               $TRE,               HASP TRE DSECT                      X\n               $USERCBS,           USER DSECTS                         X\n               $XECB,              ($HCT)                              X\n               $XPL\n         USING JCT,R10             AS PASSED\n         USING XPL,R5                  BY THE\n         USING PCE,R13                    CALLING\n         USING HCT,R11                       MODULES\nEXIT20A  $ENTRY BASE=(R12),CSECT=NO,ENTRY=YES,REGUSE=(R15)\n         $SAVE  ,                  SAVE CALLER'S REGISTERS\n         LR    R12,R15             SET BASE REGISTER\n         SPACE 2\n*\n*  UP FRONT HOUSEKEEPING HERE...\n*\n         LR    R5,R1               SET BASE FOR THE XPL\n         USING XPL,R5\n         LA    R6,0                PRESET RETURN CODE (NO JQA YET)\n         LTR   R10,R10             CHECK IF A JCT WAS PROVIDED\n         BZ    RET00               NO - JUST RETURN\n         ICM   R9,B'1111',PCEJQE   GET OUR JQE ADDRESS AND VALIDATE\n         BZ    RETURN              IF NOT VALID -- THEN JUST RETURN\n*\n*  CHECK FOR \"HERE\" TYPE OF ROUTING\n*  IF HERE WAS SPECIFIED - CLEAR THE FIELD AND IF NO AFFINITY IS\n*  ALREADY SET - THEN SET IT FOR \"HERE\"\n*\n         USING JQE,R9\n         CLC   JCTSCHEN(5),=C'HERE '   CHECK FOR \"HERE\" ROUTING\n         BNE   NOTHERE                 DON'T SET IN SCHENV IF HERE\n*\n* ALWAYS CLEAR THE \"HERE \" LITERAL OUT OF JCTSCHEN, NEVER LEAVE IT\n*\n         MVI   JCTSCHEN,C' '\n         MVC   JCTSCHEN+1(L'JCTSCHEN-1),JCTSCHEN  CLEAR THE FIELD\n*\n* TEST TO SEE IF AUTOMATIC RESTART MANAGER HAS OVERRIDDEN SYSAFF\n* AND IF  SO,  LEAVE IT ALONE.\n*\n         TM    X020FLG1,X0201ARM   DID ARM OVERRIDE SYSAFF?\n         BNZ   NOTHERE             IF SO, DON'T CHANGE IT NOW\n* ELSE  -\n*  RESET THE AFFINIT TO \"HERE\" REGUARDLESS OF ANY OTHER SYSAFF=\n*\n         $SETAFF REQUEST=CLEAR,AFFIELD=X020SAF\n         $SETAFF REQUEST=ADD,AFFIELD=X020SAF,AFTOKEN=$AFFINTY\n         DROP  R9\nNOTHERE  EQU   *\n*\n* HERE'S THE TRICKY BIT, CHANGE TO A USER ENVIRONMENT AND CALL 2050\n*\n         $ENVIRON PUSH,ENVIRON=(USER,ANY),SETR11=YES\n*\n* CALL OUR COMMON ROUTINE TO COPY  JCT EXTENSIONS TO JQE BERTS\n*\n         LA    R3,X020JCT          POINT TO PASSED JCT/JQE ADDRESSES\n         $CALL STSX2050,            CALL THE COMMON COPY ROUTINE       X\n               PARM0=(R5)             SET R0 - XPL ADDRESS\n         LR    R4,R15              SAVE RETURN CODE IN R3 FOR A SEC.\n*\n* NOW RESET THE ENVIRONMENT\n*\n         $ENVIRON POP,SETR11=YES\n\n         LTR   R4,R4               WAS THERE A PROBLEM WITH THE COPY?\n         JZ    RET00               IF NOT THEN JUST END\n         $WTO  BADBERTM,L'BADBERTM,ROUTE=$MAIN,CLASS=$ALWAYS\n*\n********************************************************************\n*  EXIT RETURN POINT\n********************************************************************\nRET00    DS    0H\n         XR    R15,R15             SET NORMAL RETURN CODE\n*\nRETURN   DS    0H\n         $RETURN RC=(R15)          RETURN TO CALLER\n*\n*\nBADBERTM $MSG  999,'ERROR RETURNED GETTING BERT IN STSCX20A'\n*\n         $MODEND ,\n         END   ,\n++SRC(STSCX49A) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).\nSTSCX49A TITLE 'JES2 JOB QUEUE WORK SELECT USER EXIT -- PROLOG'\n*\n* FUNCTIONS: THIS MODULE EITHER ACCEPTS OR REJECTS JES2'S CHOICE\n*          FOR JQE SELECTION.  WE USE IT TO SEQUENCE JOB'S BASED ON\n*          THEIR /*AFTER, /*BEFORE, /*WITH /*WITHOUT, /*CNTL\n*          /*NOAUTORT, /*HOLDTIL, AND /*HOLDFOR CARDS, AND UPON THE\n*          CLASS LIMITS SET BY \"SSMCLSSLM\" INITIALIZATION STATMENTS\n*          AND POSSIBLELY BY JOBNAME MASK SET BY SSMUIDMX.\n*\n*\n* ENTRY PT:  EXIT49A -- STSC'S JOB QUEUE WORK SELECT EXIT.\n*\n* REGISTER USAGE:\n*\n* REG  ON ENTRY     USAGE WITHIN EXIT 49                  ON RETURN\n* ---  ------------ ------------------------------------- ------------\n* R0   N/A          WORK                                  RESTORED\n* R1   XPL          WORK                                  RESTORED\n* R2   N/A          ADDR OF THIS JOB'S STQNAME.           RESTORED\n* R3   N/A          WORK AREA FOR THIS EXIT TO USE.       RESTORED\n* R4   N/A          XPL ^ THEN LATER AS OFFSET TO BERT.   RESTORED\n*                   ADDR OF TEST JOB'S UBRDNAME (INNER).\n* R5   N/A          ^ JQE SELECTED BY JES2 TO EXEC NEXT.  RESTORED\n*                   COUNTER OF TEST JOB'S UBRDNAME (INNER).\n* R6   N/A          ^STQNAME OF JOB SELECTED BY JES2.     RESTORED\n* R7   N/A          ^JQA OF JOB TO COMPARE (FROM SCAN).   RESTORED\n* R8   N/A          ^STQNAME OF JOB TO COMPARE.           RESTORED\n* R9   N/A          ^ $CAT / $qgt                         RESTORED\n* R10  N/A          ^ SSM'S ECSA COMMON AREA. SSMTB.      RESTORED\n* R11  HCT          HCT                                   RESTORED\n* R12  N/A          BASE REGISTER FOR THE EXIT.           RESTORED\n* R13                (SAVE AREA)\n* R14  RETURN ADDR  LINKAGE AND WORK                      RESTORED\n* R15  ENTRY ADDR   RETURN ADDR AND WORK                  RETURN CODE\n*\n*\n*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE\n*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS\n*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED\n*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF\n*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE\n*  USEFULLNESS OF THE MATERIAL.\n*\n*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,\n*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE\n*  IN THE FUTURE.\n*\n*  F U N C T I O N :\n*     FUNCTION:  THIS MODULE IS EXIT49 (QGOT) & IS PASSED CONTROL\n*  AFTER JES2 HAS SELECTED A NEW JOB FOR EXECUTION, AND IS GIVEN\n*  A FINAL OPPORTUNITY TO ACCEPT, OR REJECT THE JOB.  THIS EXIT\n* NEVER SELECTS A JOB FOR EXECUTION, IT CAN ONLY REJECT POSSIBLE\n*  CHOICES MADE BY JES2.  THE EXIT IS ALSO CALLED FOR \" $ST \" CMDS;\n*  WE CHECK OUR GLOBAL OPTIONS TO SEE IF WE SHOULD ALLOW OR REJECT\n*  ANY \" $SJ \" COMMANDS, AND SET RETURN CODES APPROPRIATELY.\n*   THIS EXIT IS WHERE THE /*AFTER /*BEFORE /*WITH /*WITHOUT /*CNTL\n*  /*HOLDFOR /*HOLDTIL /*NOAUTORT, THE JOB CLASS LIMITS, AND UID\n*  AND JOBID MASK LIMITS, ARE IMPLEMENTED.  OTHER EXITS INPUT VALIDATE\n*  RECORD, OR MOVE THE SPECIFIED OPTIONS, BUT THIS EXIT IS WHERE THEY\n*  ARE EVENTUALLY USED, AND CAUSE SOME ACTION TO TAKE PLACE, OR NOT\n*  NOT TAKE PLACE.\n*\n* ENTRY POINT :\n*  EXIT49A - JOB QUEUE WORK SELECTION EXIT.\n*\n*\n*\n* REVISION HISTORY:\n*\n*   DATE   NAME         DESCRIPTION OF CHANGE\n* -------- ------------ -----------------------------------------------\n*\n         TITLE 'JES2 JOB QUEUE WORK SELECTION EXIT'\n         COPY  $HASPGBL\n         PRINT OFF\nSTSCX49A $MODULE TITLE='JES2 JOB QUEUE WORK SELECTION EXIT',           X\n               RMODE=ANY,                                              X\n               ENVIRON=JES2,                                           X\n               ASCB,                                                   X\n               CVT,                                                    X\n               NTASM,         Name/Token constants                     X\n               PSA,           Program Save Area DSECT                  X\n               RPL,                                                    X\n               $BERT,              ($DOGBERT)                          X\n               $BERTTAB,           ($DOGBERT)                          X\n               $CADDR,                                                 X\n               $CAT,               ($DOGCAT)                           X\n               $CATBERT,           ($DOGBERT)                          X\n               $HASPEQU,                                               X\n               $HCCT,              ($DOGBERT)                          X\n               $HCT,                                                   X\n               $JCT,               ($USERCBS: STJCTX)                  X\n               $JCTX,              ($USERCBS: STJCTX)                  X\n               $JQE,                                                   X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PADDR,                                                 X\n               $PARMLST,                                               X\n               $PSV,                                                   X\n               $QGET,                                                  X\n               $QSE,                                                   X\n               $TQE,                                                   X\n               $TRE,                                                   X\n               $XECB,                                                  X\n               $XPL\n         USING HCT,R11\nEXIT49A  $ENTRY BASE=(R12),CSECT=NO,ENTRY=YES,REGUSE=(R15)\n         $SAVE ,\n         LR    R12,R15             SET UP OUR BASE\n         XR    R3,R3               CLEAR POINTER TO WORK AREA\n         LR    R4,R1               PARM LIST POINTER TEMP USE(R4)\n         USING XPL,R4\n         L     R9,X049QGT          QGET PARM LIST\n         USING QGT,R9              TEMP USE OF R9 FOR QGET\n         L     R5,X049JQE          JQE OF SELECTED JOB\n         USING JQE,R5\n         XR    R10,R10             CLEAR POINTER TO ECSA AREA\n         XR    R6,R6               INDICATE NO JQEX YET\n* CHECK IF CALLED FOR SOMETHING WE DON'T HANDLE - EXIT NOW\n         LTR   R9,R9               DID THEY PASS A QGT? IF NOT THEN,\n         JZ    CHK$SJ              CHECK FOR A $SJ COMMAND\n         CLI   QGTTYP,0            CHECK OF INWS,OJTWSC,OJTWS AND\n         JNE   RELWDONE            WLMINWS - IF NOT THOSE - DONT CARE\n         CLI   QGTWSTP,$QGTWLMQ    WLM MANAGED INITS?\n         JE    TSTHOLDS            IF YES, KEEP CHECKING\n         CLI   QGTWSTP,$QGTINWS    JES2 MANAGED INITS?\n         JE    TSTHOLDS            IF YES, KEEP CHECKING\n         J     RELWDONE             ANYTHING ELSE - LET IT GO !\nTSTHOLDS EQU   *\nCHK$SJ   EQU   *\n** * ------------------------------------------------------------- * **\n** * -- here is where we test for potential reasons to reject   -- * **\n** * -- this job that JES2 has selected to be executed next.    -- * **\n** * ------------------------------------------------------------- * **\n* 1 - FIRST ACQUIRE A SMALL WORK AREA FOR LATER USE *\n         $GETWORK WORDS=(SSM49LEN)/4,USE=SSMW,LOC=ANY,                 X\n               ERRET=ERNOWA\n* FIRST CLEAR OUR ENTIRE WORK AREA ***\n         LR    R3,R1               GET THE RETURNED ADDR IN R3\n         XC    4(SSM49LEN-4,R1),4(R1) CLEAR ALL BUT EYE CATCHER\n         J     LEN49OK             JUMP OVER OUR SANITY CHECK YCON\nCK0001   DC   Y(X'7FFF'-255+(SSM49LEN-4)) ENSURE SSM49WRK NOT TOO BIG!\nLEN49OK  EQU   *\n* NEXT WE DOUBLE WORD ALIGN OUR WORK AREA - NO MATTER WHAT THEY GAVE US\n* NOTE - DROPPING THE THREE LOW ORDER BITS IN ADDR WILL ALIGN US ON A\n* DBLWORD - IF ALREADY ON A DBLWORD IT HAS NO EFFECT, IN CASE ADDR. IS\n* REDUCED WE HAVE RESERVED 7 BYTES at end of dsect SO NO OVERLAY OF\n* GOOD DATA SHOULD EVER TAKE PLACE.\n         LA    R3,7(R0,R3)         BUMP ADDR BY 7 (MAX FOR DBLWRD CHG)\n         SRL   R3,3                SLIDE RIGHT THREE BITS OUT\n         SLL   R3,3                REALIGN ( ON A DBLWORD )\n         USING SSM49WRK,R3\n         ST    R1,SSMWADDR         SAVE ORIGINAL ADDR FOR RETWORK\n         XC    SSMQBSY,SSMQBSY     NO REASONS TO CHECK YET -\n* NOW WE ARE DBLWORD ALIGNED, NO MATTER WHAT THEY GAVE US BACK !\n*\n* 1A - SAVE THE ADDRESS OF OUR XPL - FOR FINAL UPDATE BEFORE RETURN\n         ST    R4,SSMXPLPT            SAVE OUR XPL POINTER FOR LATER\n         XR    R4,R4               CLEAR THE XPL POINTER NOW\n         DROP  R4\n         MVC   SSMSID,$XCFGPNM     SAVE FOR USE IN SMF FORMATTING\n* 2 - LOCATE OUR ECSA AREA NOW - BASE IT IN R10\n         MVC   NTNAMEWK(3),=C'SSM'   START BUILDING NAME FOR N/T PAIR\n         MVC   NTNAMEWK+3(8),$XCFGPNM XCFGRP NAME FINISHES THE NAME\n*\n         $TOKENSR REQUEST=RETRIEVE,NAME=NTNAMEWK,                      X\n               VALUE=NTTOKNWK,LEVEL=SYSTEM,                            X\n               ERRET=ERNOECSA,OKRET=ECSAFND\nECSAFND  EQU   *                   ECSA TOKEN WAS FOUND\n* FIRST WORD OF TOKEN - OUR ECSA POINTER IS IN R1\n         XC    NTNAMEWK,NTNAMEWK   CLEAR THEM NOW THAT\n         XC    NTTOKNWK,NTTOKNWK     WE HAVE FINISHED WITHT HEM\n         XC    SSMWKF01,SSMWKF01   CLEAR WORK FLAG 1 NOW\n         LR    R10,R0              ENABLE THE ECSA USING\n         USING SSMTB,R10\n         CLC   SSMEYE,=CL4'SSMT'   JUST A DOUBLE CHECK IS IT REALLY US?\n         JNE   ERNOECSA            IF NOT USE THE LOCATE ERROR RTN.\n* WE HAVE A VRM FIELD, BUT IT SHOULD ALWAYS MATCH - SO... NO CHECK.\n         ST    R10,ECSAPTR         JUST IN CASE WE LOSE TRACK OF IT\n         J     TST$SJ\nERNOECSA EQU   *\n         XC    NTNAMEWK,NTNAMEWK   CLEAR THEM NOW THAT\n         XC    NTTOKNWK,NTTOKNWK     WE HAVE FINISHED WITH THEM\n         XC    ECSAPTR,ECSAPTR     CLEAR POINTER TO THE ECSA\n         XR    R10,R10             CLEAR BASE REG FOR ECSA AREA\n         OI    SSMWKF01,SSMDUMY    INDICATE A DUMMY ECSA IN EFFECT\n* FINALLY FILL A SET OF DUMMY OR DEFAULT VALUES TO USE -\n*                                  WE MAY NEED TO CHECK CNTL/WITH/WITHO\n         J     TST$SJ              NOW GO TEST FOR REASONS TO REJECT\n* 3 - CHECK IF DOING A $SJ AND ALLOW / REJECT BASED ON OPTIONS\nTST$SJ   EQU   *                   TEST OF $ST  (AGAIN)\n         LTR   R9,R9               DID WE GET A $QGET PARM?\n         JNZ   TSTJQE              IF SO TEST THE JQE\n* ELSE IT MUST BE A \"$SJ\" COMMAND\n         TM    SSMWKF01,SSMDUMY    IS THERE A DUMMY ECSA AREA?\n         JO    $SJALOWD              IF NO ECSA AREA - ALWAYS ALLOW IT!\n*                                   We don't know what they want....\n         CLI   SSMALLWS,SSMALLWS_ON DO WE ALLOW $SJ COMMANDS?\n         JE    $SJALOWD            IF ALLOWED BY OPTION; THEN ALLOW IT!\n* ELSE (WE HAVE AN ECSA) AND (WE DON'T ALLOW $SJ CMDS) - DISALLOW CMD\n         $WTO  MSGNO$SJ,L'MSGNO$SJ,JOB=NO,ROUTE=$MAIN\n         OI    SSMWKF01,SSMDISA    SET FLAG - DISALLOW THE $SJ CMD\n** * ------------------------------------------------------------- * **\n** * -- The message is sent, now write an SMF record - $SJ has  -- * **\n** * -- BEEN REJECTED, OR WILL BE ALLOWED, AFTER QUEUING THE    -- * **\n** * -- NEW SMF RECORD - RETURN AFTER RELEASING WORK AREA       -- * **\n** * -- AND SETTING THE X049SKIP BIT AS NEEDED.                 -- * **\n** * ------------------------------------------------------------- * **\n$SJALOWD EQU   *                   ALLOW THE $SJ TO BE PROCESSED.\n         LR    R1,R3               PASS OUR WORK AREA TO COMMON RTN.\n         $CALL BASICSMF            GO FORMAT BASIC SMF DATA NOW\n         L     R1,SSMSMFBA         GET THE BUFFER ADDRESS\n         USING STPCSMFD,R1\n         LTR   R1,R1               JUST DBL CHECK FOR A GOOD BUFFER\n         JZ    SKPSMF43\n\n         MVC   SMFXLEN,=AL2(SMFXLS43) SET LEN OF ENTIRE SUBTYPED 43 REC\n         MVC   LENTEC01,=AL2(SMFLNS43) SET LEN OF SUBTYPED DATA ONLY\n         MVC   SMFXSTY,=XL2'0043'  MOVE THE SUBTYPE AGAIN.\n         MVC   SMFD8STY,=XL2'0043' MOVE THE SUBTYPE AGAIN.\n         MVC   SMFD8S43,=XL2'0043' MOVE THE SUBTYPE AGAIN.\n*  JUST SUBTYPED DATA LEFT TO BE FILLED\n         TM    SSMWKF01,SSMDISA    WAS THE CMD DISALLOWED?\n         JZ    SMFSJOK               IF NOT IT IS OK TO GO..\n         MVI   SMFD83NN,C'X'       ELSE CMD WAS (WILL BE) DISALLOWED.\n         J     SMFSJXX             BUMP OVER THE ALTERNATIVE\nSMFSJOK  MVI   SMFD83NN,C'A'        WHICH IS TO ALLOW THE COMMAND\nSMFSJXX  EQU   *\n         MVC   SMFD83DT,$CLOCK     MOVE THE STCK FORMAT DATE/TIME\n         $QUESMFB (R1)             WRITE THE RECORD NOW.\nSKPSMF43 TM    SSMWKF01,SSMDISA    ONCE MORE - WAS IT ALLOWED?\n         JZ    TSTRTNWK             RETRN WRKAREA AND RC=00 ALLOW JOB\n         JNZ   SKPSMF40             IF NOT OK - RETURN VIA SKP40\n** * ------------------------------------------------------------- * **\n** * -- a JQE has been selected by JES2 if we get here  - we    -- * **\n** * -- will refer to it as the selected jqe or the chosen one. -- * **\n** * --                                                         -- * **\n** * -- now test to see if we can allow it to begin exectution. -- * **\n** * ------------------------------------------------------------- * **\nTSTJQE   EQU   *\n** begin by setting flags for tests based on ecsa data and jqe only **\n         LTR   R10,R10             IS THERE A REAL ECSA AREA??\n         JZ    TSTWAITS              IF NOT SKIP ECSA BASED TESTS\n* now - are we using positive recognition - or general waits to fix\n* the /*before /*after apparent errors when submitted en-masse?\n         CLI   SSMBEAFT,SSMBEAFT_DELAY WAS A DELAY TYPE RUN REQUESTED?\n         JE    DOJQEDLY            DO NOTHING HERE FOR POSITIVE RECOG.\n         CLI   SSMBEAFT,SSMBEAFT_PREMOD  IS OPTION - THE OLD DEFAULT?\n         JE    TSTWAITS            DO NOTHING IF THE OLD OPT IS USED.\n* ELSE A DELAY OF ALL JOBS IS NEEDED - IGNORE ZERO TIME WAITS\nDOJQEDLY CLC   SSMBATIM,=H'0'      IS GENERAL WAIT TIME ZERO\n         JE    TSTWAITS            IF NOT TEST FOR HOLD TIMES\n*\n** * ------------------------------------------------------------- * **\n** * -- next we check for holds based on times, /*holdfor,      -- * **\n** * -- /*holdtil, or general hold from ssmbatime.  resolve them-- * **\n** * -- now and allow job to continue or reject for time-delays.-- * **\n** * ------------------------------------------------------------- * **\n         XGR   R15,R15             CLEAR R15 BEFORE WORKING WITH IT\n         ICM   R15,B'0011',SSMBATIM GET THE DELAY TIME (IN SECS.) IN 15\n         ST    R15,SSMTQWAT        save time for use in stimer rtn.\n         LG    R1,=FD'4096000000'  PUT ONE SECOND (IN CLOCK TICKS) IN\n         MSGR  R15,R1              R1 THEN MULTIPLY BY WAIT TIME...\n         XGR   R0,R0               CLEAR R1 AGAIN\n         L     R0,JQXCRTME         GET ORIGINAL READER TIME\n         SLLG  R1,R0,32            ADJUST DELAY TIME FOR COMPARISON\n         AGR   R15,R1              ADD READER TIME PLUS DELAY\n         CLG   R15,$CLOCK          FINALLY DO THE COMPARISON\n         JNH   TSTWAITS            JUMP NOT HIGH\n*                                    BUILD AND POST A STIMER CB\n*                                    THEN REJECT IT .\n         LR    R1,R3               PUT WORK AREA IN R1 FOR CALL\n         $CALL STIMER              ISSUE $STIMER AGAINST A NEW STTQE CB\n         OI    SSMWKF01,SSMGENWT   INDICATE A GENERAL WAIT - NO JQE\n         J     REJECTIT\n*\nTSTWAITS EQU   *\n         XC    SSMTQWAT,SSMTQWAT   CLEAR THE WAIT TIME FIELD\n* 4 - LOCATE OUR JQA'S BERT OFFSET FOR LATER USE - IF THERE IS ONE...\n         DROP  R9                  DROP USING FOR QGT PARMS\n         $DOGBERT ACTION=GETOFFSET,CBTYPE=JQE,NAME=STQNAME,            X\n               ERRET=NOSTQNME\n         JNZ   NOSTQNME            IF OFFSET IS NOT FOUND - THEN WE\n*                                    have a very big problem...\nGOTBRTOK LR    R4,R1               JQA OFFSET IN R4\n         LA    R6,0(R4,R5)         GET OUR BERTS ADDR.\n         ST    R4,SSMJQAD          SAVE THE OFFSET TO BERT FOR LATER\n         USING STQNAME,R6\n         CLC   UBRXID,=C'JQEX'     CHECK THE EYECATCHER - IS IT RIGHT?\n         JNE   NOBERT               IF NOT SET FLAGS AND CONTINUE\n         J     GOTBERT\n*\nNOSTQNME EQU   *\n* THIS IS THE  ** E R R O R ** ROUTINE FOR THE BERT LOCATE...\n* IF WE ERRORED OUT WHILE LOOKING FOR IT- LET IT GO DO NOT HOLD IT!\n         XR    R4,R4               INIDCATE WE HAVE NO DISP TO STQNAME\n         ST    R4,SSMJQAD          SAVE OFFSET (0) TO BERT FOR LATER\n         XR    R6,R6               NO DEVELOPED ADDR FOR THE JQA\n         $WTO  MSGNOBRT,L'MSGNOBRT,JOB=NO,ROUTE=$MAIN,WAIT=NO\n         J     TSTRTNWK            RTN WORK AREA, ALLOW JOB, END !\nNOBERT   EQU   *                   WE DON'T HAVE A BERT - NOT FOUND\n* THIS IS THE   ** N O   B E R T **  ROUTINE - WHEN THERE IS NO BERT\n*  IT HAPPENS IF THERE ARE NO /* STATEMENTS\n*  BUT WE STILL MUST CHECK FOR BEFORE/AFTER COONNECTIONS AND FOR THE\n*  MAXIMUM LIMITS FOR JOBNAME MASK, UID MASK, AND CLASS LIMS.\n         OI    SSMWKF01,SSMNOBRT   FLAG US AS \"BERTLESS\"\n         B     CHK5                EVEN WITH NO BERT WE STILL TEST\n*                                   JUST NOT MOST THINGS... WE DO\n*                                    TEST CLASS, UID, JOBNAME LIMS\nGOTBERT  EQU   *\n** * ------------------------------------------------------------- * **\n** * -- now do tests and set flags based on bert for the chosen -- * **\n** * -- one, the selected jqe.                                  -- * **\n** * ------------------------------------------------------------- * **\n* -- NEXT TEST FOR THE USE OF A /*WITH JOBNAME CARD...\nTS4WITH  TM    UBRMFLAG,UBRWITHF   IS A /*WITH IN PLAY\n         JZ    TS5WITHO             IF NOT TEST FOR A /*WITHOUT\n         OI    SSMQBSY,SSMQWIT     SET \"WITH\" FLAG\nTS5WITHO TM    UBRUFLAG,UBRXXVRM   IS THIS NEW FMT STQNAME?\n         JZ    CHK5                PAST 1.7 TYPE TESTS\n         CLC   UBRVRM,=X'00010700' BEFORE 1.7 OR ALL ZEROS?\n         JL    CHK5                PAST 1.7 TYPE TESTS\n         TM    UBRMSCF1,UBRMSWOJ   WITHOUT IN PLAY?\n         JZ    TESTTIME            PAST 1.7 TYPE TEST\n         OI    SSMQBSY,SSMQWITO    WITHOUT IS NOW FLAGGED.\n*\nTESTTIME TM    UBRWATF,UBRWATFR+UBRWATT   ANY WAITS IN USE?\n         JZ    CHK5\n*\n         TM    UBRWATF,UBRWALLS    ARE THEY ALL SATISFIED?\n         JO    CHK5                          IF SO NEXT CHECK...\n*\n         TM    UBRWATF,UBRWATFR    IS WAITFOR IN THE MIX?\n         JZ    TWATT                TEST WAITTIL\n         TM    UBRWATF,UBRWATFS    IS WAITFOR SATISFIED ALREADY?\n         JO    TWATT                 IF YES CHECK NEXT POSSIBILITY\n* NOW WE CHECK IF WAITTIL IS SATISFIED....\nTWATF    CLC   UBRHLDFX,$CLOCK      CURRENT => HOLD FOR SATISFIED TIME\n         JH    REJWFR              REJECT FOR WAITFOR TIME\n         OI    UBRWATF,UBRWATFS    WAIT FOR IS NOW SATISFIED\n         CLI   UBRDLAYS,UBRDLWFR  WAS WAITFOR THE HOLD REASON?\n         JNE   TWATFX1             IF NOT KEEP WORKING\n         MVI   UBRDLAYS,X'00'      IF SO, THEN CLEAR THE DELAY REASON\n         XC    UBRMMSTK(32),UBRMMSTK   ZERO THE STCK TIMES where we\n*                                   ISSUED $STIMER (WITH TQE'S) ON.\n         MVI   UBRMMTQE,X'00'     CLEAR THE MEMBER MASK -\nTWATFX1  EQU   *\n* NOW WE ARE NOT WAITING ON WAITTIL, AND WAITTIL STUFF IS CLEANED UP\n         TM    UBRWATF,UBRWATT     IS WAIT TILL being required also?\n         JO    TWATT\nFLALLSAT OI    UBRWATF,UBRWALLS    INDICATE NO MORE TIME TESTS.\n         J     CHK5                DONE WITH WAIT FOR / TILL\n* AT THIS POINT THERE IS NO WAITFOR CARD, OR THERE IS AND IT IS PAST\n\nTWATT    TM    UBRWATF,UBRWATT     IS WAITTIL IN THE MIX.\n         JO    TSTWATT              IF SET TEST WAIT TIL VALUE\n* WAITFOR IS NOT NEEDED, AND WAITTIL IS NOT USED, OR SATISFIED,\n*   SO WE SHOULD FLAG AS BOTH SATISFIED.\n         OI    UBRWATF,UBRWALLS    INDICATE NO MORE TIME TESTS NEEDED.\n         J     CHK5\nTSTWATT  CLC   $CLOCK(4),UBRHLDUX   CURRENT => WAIT TIL SATISFIED TIME?\n         JL    REJWTT              REJECT FOR WAITTIL TIME\n* ELSE IT IS SATISFIED AND THEY MUST ALL BE SATISFIED.\n         OI    UBRWATF,UBRWALLS+UBRWATFS  THIS ONE (AND BOTH) SATISFIED\n         CLI   UBRDLAYS,UBRDLWTL  WAS WAITTIL THE HOLD REASON BEFORE?\n         JNE   TWATTX1              IF NOT KEEP WORKING\n         MVI   UBRDLAYS,X'00'     IF IS, THEN CLEAR THE DELAY REASON\n         XC    UBRMMSTK(32),UBRMMSTK  ZERO THE STCK TIMES where WE\n*                                   ISSUED $STIMER (WITH TQE'S) ON.\n         MVI   UBRMMTQE,X'00'     CLEAR THE MEMBER MASK AS WELL\nTWATTX1  EQU   *\n*\n* now multiple tests - if any of these tests must be done, we must do\n* a $qbusy for all comparisons jqe's\n*\nCHK5     EQU   *                   JMP HERE IF NO BERT ($DOGBERT=>RC=4)\n*                                     FOR THE CHOSEN ONE. (NO STQNAME)\n* CHK5 IS A TEST FOR CLASS LIMITS ***\n         LTR   R10,R10             DID WE FIND AN ECSA AREA OR NOT\n         JZ    MAINLINE              IF NOT SKIP FORWARD ....\n*\n         CLI   SSMCLSOP,SSMCLSOP_ON TEST LIMIT BY CLASS OPTION - IF ON.\n         JNE   TS2JNM                 IF NOT ON TEST JOBNAME MASK OPTS\n         OI    SSMQBSY,SSMQJC      SET FLAG FOR LIMIT BY CLASS\n         XC    SSMCLSK,SSMCLSK      ZERO THE CLASS COUNT\n* NOW SET UP CLASS LIMIT TO CHECK WHEN LOOPING THRU ACTIVE JOBS.\n         IC    R1,JQEJCLAS         PICKUP JOB CLASS\n         STC   R1,SSMTSTCL         SAVE THE CLASS TO CHECK FOR\n         N     R1,=X'0000003F'     TURN OFF B'11000000' BITS IN CLASS\n         SLL   R1,1                TIMES 2\n         A     R1,=F'54'           = +54  BYTES INTO A 2 BYTE FIELD !\n         LA    R1,SSMCLSLM(R1)     GET ADDRESS OF RESULTANT BYTE.\n         MVC   SSMCLSL,0(R1)       COPY THE CLASS LIMIT VALUE\n         CLC   SSMCLSL,=X'0000'    DON'T ALLOW ANYONE IN THIS CLASS?\n         JE    REJCLS              IF SO THEN WE GET OUT RIGHT NOW!\n*\n* NOTE - CLASS LIM OF ZERO IS VALID - NO JOBS ALLOWED IN THAT CLASS !\n*\n\nTS2JNM   EQU   *\n* TS2JNM IS A TEST TO SEE IF WE NEED TO CHECK JOBS LIMITED BY CLAS\n         CLC   SSMJBNMX,$ZEROS     IS THE LIMIT 0? (0=NOLIMIT/NOCHECK)\n         JE    TS3UID               IF NOT CHECK FOR UID LIMITS\n* NOTE A JOBNAME MAX OF ZERO MEANS NO LIMIT IS IMPOSED *\n         OI    SSMQBSY,SSMQJN      WE ARE CHEKING JOBNAMES - SET FLAG\n         MVC   SSMJMSK1,=CL4' '    BLANK THE JOBNAME MASK 1\n         MVC   SSMJMSK2,SSMJMSK1          AND MASK 2\nDOJMSK1  XR    R1,R1               CLEAR OUR WORK REG FIRST\n         ICM   R1,B'1000',SSMJMHI  PICK UP THE LEFT HALF OF BIT MASK\n         SLL   R1,4                SLIDE IT TO THE EDGE OF THE REG.\n         LA    R15,JQEJNAME        JOBNAME FIELD POINTER\n         LA    R2,SSMJMSK1         RESULTS FIELD\nMSKJLT1  LTR   R1,R1               IS HIGH ORDER BIT ON..\n         JP    MSKJLOP1            IF POSITIVE (NO HIGH ORDER BIT) -\n         MVC   0(1,R2),0(R15)       - ELSE MOVE THAT JOBNAME BYTE\n         LA    R2,1(R0,R2)            FOR LATER USE & BUMP R2 BY 1\nMSKJLOP1 LA    R15,1(R0,R15)       ALWAYS - BUMP R15 (FROM FIELD) BY 1\n         SLL   R1,R1               SET UP THE NEXT BIT FOR TESTING\n         LTR   R1,R1                - BUT FIRST - ARE WE ALL THROUGH?\n         JNZ   MSKJLT1              IF NOT JUST KEEP LOOKING TILL DONE.\nDOJMSK2  EQU   *  SECOND HALF OF MASK IS PROCESSED NEXT - SSMJMLO\n         ICM   R1,B'1000',SSMJMLO  GET LAST 4 BITS OF JOBNAME MASK\n         SLL   R1,4                SLIDE IT TO EDGE OF REGISTER\n         LA    R15,JQEJNAME+4      POINT TO FROM FIELD\n         LA    R2,SSMJMSK2         PTR TO RESULTS FIELD\nMSKJLT2  LTR   R1,R1               IS HIGH ORDER BIT ON?\n         JP    MSKJLOP2            IF NOT SKIP MOVING BYTES TO TST FLD\n         MVC   0(1,R2),0(R15)      ELSE SAVE A BYTE TO THE TST FLD\n         LA    R2,1(R0,R2)         BUMP TO NEXT LOCATION IN TO FIELD\nMSKJLOP2 LA    R15,1(R0,R15)       BUMP THE ADDRESS IN R15 - ALWAYS!\n         SLL   R1,1                SLIDE NEXT BIT INTO TEST POSITION\n         LTR   R1,R1               CHECK IF WE ARE DONE - OR IF WE\n         JNZ   MSKJLT2              HAVE MORE TO DO - WITH JOBNAME MSKS\nCLRJNMK  XC    SSMJBNK,SSMJBNK      CLEAR MASKED JOBNAME COUNT.\n** * ------------------------------------------------------------- * **\n** * --  at this point, if there was a non-zero value in ssmjbnmx  * **\n** * -- (jobname max), we have cleard the matching jobname count-- * **\n** * -- (ssmjbwk) to 0, we used the \"1\" bits in the jobname mask-- * **\n** * -- fields 1 and 2 to to select matching position characters-- * **\n** * -- from the current jobname to build ssmjmsk1 and ssmjmsk2 -- * **\n** * -- for example, if jobname mask is c\"u*u***uu\" then ssmjmhi-- * **\n** * -- and ssmjmlo are b'1010' and b'0011' respectivly, they are  * **\n** * -- set elsewhere - what we did was to create the test fields  * **\n** * -- ssmjmsk1 and ssmjmsk2 - to continue the example if the  -- * **\n** * -- masks were as describe above and the jobname was        -- * **\n** * -- =c'abcdefgh' then the ssmjmsk1 would be =c'ac  ' and    -- * **\n** * -- ssmjmsk2 would be =c'gh  '.  This is later used with a  -- * **\n** * -- clm instruction to quickly test the other active jobs   -- * **\n** * -- to see if they match the mask created with the selected -- * **\n** * -- jobname ----- simple! (reread it if you need to).       -- * **\n** * --                                                         -- * **\n** * --  next we do the same with uid masks...                  -- * **\n** * ------------------------------------------------------------- * **\nTS3UID   CLC   SSMUIDMX,$ZEROS     IS LIMIT 0? (0=NOLIM = NO CHECKS)\n         JE    MAINLINE            IF NOT NEEDED GO TO NEXT TEST\n         OI    SSMQBSY,SSMQUID     SET FLAG TO INDICATE WE NEED TO TEST\n         MVC   SSMUMSK1,=CL4' '    CLEAR THE USERID MASK\n         MVC   SSMUMSK2,SSMUMSK1     BOTH OF THEM 1 AND 2\nDOUMSK1  XR    R1,R1               ALWAYS CLEAR WORK BEFORE STARTING\n         ICM   R1,B'1000',SSMUMHI  LOAD THE FIRST 4 BITS OF THE MASK\n         SLL   R1,4                SLIDE TO EDGE OF REGISTER\n         LA    R15,JQEUSRID        POINT TO TOP OF USERID (FROM VALUE)\n         LA    R2,SSMUMSK1         POINT TO TOP OF MASK 1 (TO FIELD)\nMSKULT1  LTR   R1,R1               IS HIGH ORDER BIT IN MASK ON?\n         JP    MSKULOP1            IF NOT - JUST INDEX AND LOOP\n         MVC   0(1,R2),0(R15)      MOVE MATCHING BYTE TO MASK 1\n         LA    R2,1(R0,R2)          BUMP 'TO' FIELD POINTER\nMSKULOP1 LA    R15,1(R0,R15)       ALWAYS BUMP 'FROM' POINTER\n         SLL   R1,1                MOVE NEXT BIT TO TEST POSITION\n         LTR   R1,R1               ARE WE THERE YET? ALL DONE I MEAN?\n         JNZ   MSKULT1             END OF LOOP FOR MASK #1 -\nDOUMSK2  ICM   R1,B'1000',SSMUMLO  LOAD NEXT FOR BITS OF MASK\n         SLL   R1,4                SLIDE TO THE EDGE\n         LA    R15,JQEUSRID+4      WHERE TO GET MATCHING BYTES FOR MSK2\n         LA    R2,SSMUMSK2         WHERE TO MOVE BYTES TO IF MASKED OK\nMSKULT2  LTR   R1,R1               TEST HIGH ORDER BIT (NEGATIVE IF 1)\n         JP    MSKULOP2             JUMP \"POSITIVE\" IF ZERO HIGH ORDER\n         MVC   0(1,R2),0(R15)      MOVE THE CHARACTER IF MASK MATCHES\n         LA    R2,1(R0,R2)         BUMP THE \"TO\" FIELD POINTER\nMSKULOP2 LA    R15,1(R0,R15)\n         SLL   R1,1                MOVE NEXT BIT INTO TEST POSITION\n         LTR   R1,R1               DONE YET\n         JNZ   MSKULT2                IF NOT, RELOOP - TILL DONE.\nCLRUIDK  XC    SSMUIDK,SSMUIDK\n*\n** * ------------------------------------------------------------- * **\n** * -- Mainline Processing Logic -                             -- * **\n** * --                                                         -- * **\n** * --  SCAN OPTIONS HAVE ALREADY BEEN SET WHEN WE GET HERE.   -- * **\n** * --                                                         -- * **\n** * -- SOME COMBINATIONS OF OPTIONS DO NOT REQUIRE A SCAN AND  -- * **\n** * -- FETCH OF A READ MODE JQA, WE WILL DO AS LITTLE AS IS    -- * **\n** * -- REQUIRED TO VALIDATE THE SELECTED JOB.                  -- * **\n** * --  As soon as it can be determined that a job needs to be -- * **\n** * -- rejected, it will be, without any further checking.     -- * **\n** * --                                                         -- * **\n** * --  If needed, we will count jobs in the same execution    -- * **\n** * -- class, or with the same jobname mask, and limits checked-- * **\n** * -- as we progress through all active jobs.                 -- * **\n** * --                                                         -- * **\n** * --  Each time a job is rejected, it will have it's bert    -- * **\n** * -- updated with the rejection reason, and the next potential  * **\n** * -- job will be requested from jes2 for the same set of     -- * **\n** * -- checks.                                                 -- * **\n** * --                                                         -- * **\n** * --  Graphically - we compare to 'Other\" jobs like this...  -- * **\n** * --                                                         -- * **\n** * --                                                         -- * **\n** * --         $dogcat   (when no more do qjqe type=rebuild)   -- * **\n** * --           \u00a6                             ^  (end after   -- * **\n** * --           \u00a6                             \u00a6   rebuild q)  -- * **\n** * --          ->--> $qjqe  cat=x,mode=real ==                -- * **\n** * --         \u00a6        \u00a6                                      -- * **\n** * --         ^        +========> $QBUSY (COMPARISON JQE)     -- * **\n** * --         \u00a6        \u00a6          (IS IT ACTIVE? - SAVE STATUS)  * **\n** * --         \u00a6        \u00a6           (TEST AS NEEDED)           -- * **\n** * --         \u00a6        \u00a6                                      -- * **\n** * --         ^        '=> $dogjqe fetch read  (to get bert)  -- * **\n** * --         \u00a6               \u00a6                 (if needed)   -- * **\n** * --         \u00a6               \u00a6                               -- * **\n** * --         ^               \u00a6                               -- * **\n** * --         \u00a6               \u00a6'==> $DOGJQE (RETURN)          -- * **\n** * --         \u00a6                               \u00a6  (for each    -- * **\n** * --         =<==<==========<=======<======<='     $dogjqe)  -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\nMAINLINE EQU   *\n         USING CAT,R9              CLASS ATTRIBUTE TABLE\n         XR    R9,R9               PRE CLEAR THE REGISTER\n         XR    R8,R8               NO JQA TO RETURN - YET...\n*\nCATLOOP  EQU   *                   TOP OF THE LOOP\n*\n         $DOGCAT ACTION=(FETCHNEXT,READ),   LOOP THROUGH ALL CATS      X\n               ALLQUES=(YES,REBLD),                                    X\n               CAT=CAT,ERRET=X049RC0       WHEN DONE - IT MUST BE OK\n         LR    R9,R1               GET RETURNED CAT ADDR.\n*                                  GO GET ALL JQES FOR THIS CAT...\n*\nGETJQE   EQU   *                   LOOP THRU ALL JQE'S FOR THIS CAT.\n         $QJQE  CAT=CAT,REG=(R7),                                      X\n               MODE=REAL,LOOP=NEXTJQE,  NEXTJQE = LABEL FOR LOOPING    X\n               NOMORE=CATLOOP\nGOTJQE   EQU   *\n         XR    R8,R8               ONCE MORE CLEAR THE RTN JQA PTR.\n* NOW CHECK THIS JQE LEVEL (NO UBR AVAILABLE YET)  FIELDS.\n         TM    JQETYPE-JQE(R7),$SPIN  THE SPIN JQES\n         JO    NEXTJQE             SKIP IF SPUN\n         TM    JQETYPE-JQE(R7),$XEQ\n         JO    TESTJQE             IF EXECUTION CLASS - DO IT!\n         TM    JQETYPE-JQE(R7),$INPUT\n         JZ    NEXTJQE             IF IN THE INPUT QUEUE - DO IT!\n* 1 - CHECK IF TEST JOB IS ALSO THE CHOSEN ONE... NO CHECK NEEDED IF SO\nTESTJQE  EQU   *\n         CLC   JQEJBKEY,JQEJBKEY-JQE(R7) IS THE TEST JQE ALSO OUR JQE?\n         JE    NEXTJQE\n         TM    SSMWKF01,SSMNOBRT   IS THERE A SELECTED BERT?\n         JO    CHK4                SKIP THE /*AFTER TEST IF NO BERT\n* 2 - CHECK FOR /*AFTER IN 'SELECTED' JQE\nCHK2     EQU   *                   TEST TO SEE IF - ANY - UBR FLAGS\n         TM    UBRMFLAG,UBRAFT     /*AFTER IN 'SELECTED' JQE?\n         JZ    CHK4                SKIP IF NOT SET.\n         CLC   UBRAFTR(8),JQEJNAME-JQE(R7)  AFTER 'THIS' JOBNAME?\n         JE    REJAFT2             REJECT BECAUSE OF /*AFTER\n*                                   and flag 'after' as satisfied\n* 4 - TEST FOR  /*BEFORE AND /*CNTL STATEMENTS\nCHK4     TM    JQEFLAG3-JQE(R7),JQE3JOB  IS IT A BATCH JOB?\n         JNZ   FINALCKS            IF NOT NO /*CNTL /*BEFOR'S TO FIND.\n*\n* HERE IS WHERE WE GET THE JQA FOR THE TEST (COMPARISON) JOB (R2)\n*                       (READ MODE)\n*\n         $DOGJQE ACTION=(FETCH,READ),JQE=(R7) GET TEST JQE'S JQA\n         LR    R2,R0               SAVE JQA IN R2\n         ST    R2,SSMJQA           SAVE ADDR OF JQA TO BE RETURNED!\n*                                    R7 MUST KEEP OLD JQE PTR FOR THE\n*                                      THE FIND NEXT LOOP TO WORK RIGHT\n*  turn off the busy bits before test -if jqe is active(acitve locally)\n         NI    SSMWKF01,255-SSMBUSY TURN OFF THE BUSY ANYWHERE BIT\n         NI    SSMWKF01,255-SSMBUSYL TURN OFF THE LOCAL BUSY BIT\n         $QBUSY JQE=(R2),ACTION=(TEST,ANY),NOTBUSY=OVRNOBSY\n         OI    SSMWKF01,SSMBUSY    MARK THE TEST JQE AS BUSY\n* IF JQE IS ACTIVE - WE NEED TO SEE IF IT IS ACTIVE ON LOCAL SYSTEM!\n         $QBUSY JQE=(R2),ACTION=(TEST,LOCAL),NOTBUSY=OVRNOBSY\n         OI    SSMWKF01,SSMBUSYL   MARK THE TEST JQE AS BUSY HERE\n         J     OVRNOBSY            JUMP OVER THE NOT BUSY ROUTINE\nOVRNOBSY EQU   *\n* *********************************************************************\n         L     R4,SSMJQAD          GET THE DISPLACEMENT TO THE STQNAME\nDODISP   LA    R8,0(R4,R2)         BERT (OUR JQEX), AND DEVELOP ADDR.\n         NI    SSMWKF01,255-SSMNOTBR SET DEFAULT FLAG TO JQEX FOUND\n         CLC   UBRXID-STQNAME(4,R8),=C'JQEX'  DOES EYECATCHER MATCH?\n         BE    TSTBEF01             IF SO, IT WAS FOUND, ELSE WE JUST\n         OI    SSMWKF01,SSMNOTBR     FLAG IT AS NO TEST BERT FOUND, &\n         J     CMPQBSY                  CONTINUE WHERE IT MAKES SENSE\n*\nTSTBEF01 TM    UBRMFLAG-STQNAME(R8),UBRBEF DOES TST JQE HAVE A /*BEFORE\n         JZ    TS3CNTL\n         CLC   JQEJNAME,UBRBFOR-STQNAME(R8) /*BEFORE THIS JQE?\n         JE    REJBEF2             REJECT WITH A /*BEFORE REASON.\nTS3CNTL  TM    UBRMFLAG,UBRCNTL    IS CNTL IN PLAY FOR SELECTED JOB\n         JZ    CMPQBSY               IF NOT TEST FOR WITH\n         TM    UBRMFLAG-STQNAME(R8),UBRCNTL  ALSO ON FOR 'THIS' JOB?\n         JZ    CMPQBSY               IF NOT THEN CONTINUE - ELSE\n*\n* WE MUST TEST ALL JOBS FOR A 'PRG' OF A CNTL NAME, NOT JUST FOR\n* ACTIVE JOBS LIKE WE DO FOR SHARED AND EXCLUSIVE JOBS.\n*\nDOCNTLT  EQU   *\nNOTSTN1  TM    SSMWKF01,SSMNOTBR   IF NO TEST BERT - NO CNTL CONFLICTS\n         JO    CMPQBSY               SO DON'T BOTHER CHECKING\n         TM    SSMWKF01,SSMNOBRT   IF NOT SELCTED BERT - NO CNTL CHECKS\n         JO    CMPQBSY               SO DON'T BOTHER CHECKING\n         LA    R1,UBRDNAME         POINT TO CNTL NAMES FOR SELECTED JOB\n         XR    R15,R15             CLEAR R15\n         IC    R15,UBRMFLAG        R15 = FLAG BYTE FOR SELECTED JQE\n         SRL   R15,4               ISOLATE CNTL COUNT\n         LTR   R15,R15             DO WE HAVE A ZERO COUNT ? - IF SO,\n         JZ    CMPQBSY               JUST SKIP THE LOOP-D-LOOP.\n*\n         STM   R4,R5,SAVE2REG      RESTORE OUR WORK REGS (4 AND 5)\n*\nCHKLP1   EQU   *                   TOP OF INNER LOOP - RESET VALUES\n         LA    R4,UBRDNAME-STQNAME(R8) POINT TO CNTL NAMES FOR TST JOB\n         XR    R5,R5               CLEAR R5\n         IC    R5,UBRMFLAG-STQNAME(R8) POINT TO FLAG/COUNT BYTE\n         SRL   R5,4                ISOLATE THE COUNT ONLY\n         LTR   R5,R5                IS THE COUNT ZERO ?\n         JZ    BOTLOP2                 DON'T TRY TO TEST INNER LOOP\n* NOW - DO ALL NEEDED CNTL TESTING AT ONE TIME\nCHKLPCHK CLC   0(8,R4),0(R1)       DO THE RESOURCE NAMES MATCH?\n         JNE   CHKINRLP              IF NOT CHECK NEXT SET.\n         CLI   8(R4),C'P'          IS TEST JOB A PURGE?\n         JNE   TSTPG2                IF NOT SKIP PURGE TESTS\n         CLI   8(R1),C'P'          IS SELECTED JOB ALSO A PRG?\n         JNE   REJCTL                IF NOT A PRG ANYWHERE - ACTIVE\n*                                    OR NOT TRUMPS AN EXC OR A SHR\n*- BOTH JOBS ARE SET FOR PRG - TEST FURTHER\n         TM    SSMWKF01,SSMBUSY    IS TEST JOB ALREDY ACTIVE?\n         JO    REJCTL                IF TEST IS ACTIVE IT WINS - ONLY\n*                                    ONE ACTIVE PURGE AT A TIME\n         J     NJBSY               IF IT WASN'T ACTIVE KEEP LOOPING\nTSTPG2   EQU   *      IT'S NOT A PURGE\n         TM    SSMWKF01,SSMBUSY    IF TEST JOB NOT BUSY - SKIP IT.\n         JZ    NJBSY\n         CLI   8(R1),C'P'        IS SELECTED JOB A PRG? IF SO ...\n         JE    REJCTL             PRG CANNOT RUN TILL ALL OTHERS DONE\n*                                BUT -BOTH JOBS=PRG WAS TESTED ABOVE.\n         CLI   8(R4),C'E'          DOES ACTIVE TST JOB HAVE RES='E'?\n         JE    REJCTL                IF SO - REJECT (THEY HAVE EXC)\n         CLI   8(R1),C'E'          DOES SELECTED JOB NEED TO EXCLUSIVE?\n         JE    REJCTL               IF SO, REJECT- SOMEONE ELSE HAS IT\n*\nNJBSY    EQU   *\nCHKINRLP LA    R4,UBRDNAML(,R4)    BUMP INNER LOOP PTR\n         BCT   R5,CHKLPCHK         DECREMENT COUNT AND LOOP\n* INNER LOOP DONE WHEN WE FALL THROUGH TO HERE....\nBOTLOP2  LA    R1,UBRDNAML(,R1)    BUMP TO NEXT CNTL FOR OUTTER LOOP\n         BCT   R15,CHKLP1          AND GO RESET INNER LOOP\n*\n*\n         LM    R4,R5,SAVE2REG      RESTORE OUR WORK REGS (4 AND 5)\n* TEST FOR CNTL IS NOW DONE !\n*\nCMPQBSY  CLI   SSMQBSY,X'00'       ANY 'BUSY' STYLE TESTS TO DO?\n         JE    FINALCKS              IF NOT - SKIP AHEAD PAST BUSY TSTS\n         TM    SSMWKF01,SSMBUSY    IS TEST JOB ACTIVE?\n         JZ    FINALCKS              SKIP OVER THE 'BUSY' TESTS.\n**\n** all remaining tests in this loop require the current test job to be\n** active on *this* system, not just anywhere in the mas, so if the\n** locally busy bit is not set - skip to the end - the remaing tests\n** are:  with, without, limits for jobclass, uid mask and jobname mask\n**\n         TM    SSMWKF01,SSMBUSYL   IS THE TEST JOB ACTIVE ON \"THIS\" SYS\n         JZ    FINALCKS\n*\n* NEXT TEST TO ENSURE /*WITHOUT IS SATISFIED.\nGLBLTSTS TM    SSMQBSY,SSMQWITO    CHECKING FOR /*WITHOUT\n         JZ    RTWIT                IF NO /*WITHOUT - GO CHECK /*WITH\n*  NOTE - WE ARE ONLY CHECKING JOBNAME - SO USE THE ORIGINAL JQE PTR.\n*  THAT WAY WE CAN TEST, WHETHER WE GOT A JQA OR NOT...\n         TM    SSMWKF01,SSMNOBRT   IF NO SELECTED JOB BERT\n         JO    TSTJCLIM             SKIP THE NEXT 2 TESTS\n         CLC   UBRWIOUT,JQEJNAME-JQE(R7)\n         JE    REJWIO              IF A MATCH - REJECT - REASON=WITHOUT\nRTWIT    EQU   *                   TEST FOR /*WITH MATCH\n* ------------------------------------------------------------- * **\n* -- NOTE - /*WITH DOES NOT CAUSE A REJECTION WHEN MATCHED - -- * **\n* -- we will however turn off the with check bit in ssmqbsy  -- * **\n* -- to indicate the following;                              -- * **\n* --   1 - we dont need to check the condition any more.     -- * **\n* --   2 - it no longer holds the job.                       -- * **\n* -- (if the bit is still set when done with all other checks-- * **\n* --  it was never satisfied - and that will cause a rejection! * **\n* ------------------------------------------------------------- * **\n         TM    SSMQBSY,SSMQWIT     IS THE WITH FLAG SET?\n         JZ    TSTJCLIM            NO - GO CHECK JOB CLASS LIMITS\n*  NOTE - WE ARE ONLY CHECKING JOBNAME - SO USE THE ORIGINAL JQE PTR.\n*  THAT WAY WE CAN TEST, WHETHER WE GOT A JQA OR NOT...\n         CLC   UBRWITH,JQEJNAME-JQE(R7) DO WE HAVE A MATCH?\n         JNE   TSTJCLIM            IF NOT CHECK LIMIT BY JOBCLASS\n         NI    SSMQBSY,X'FF'-SSMQWIT TURN OFF 'WITH' CHECK =SATISFIED!\nTSTJCLIM EQU   *   TEST FOR LIMITS BY JOBCLASS\n* WE ONLY DO THE NEXT 2 TESTS IF THE TEST JOB IS ALREADY BUSY (ACTIVE)\nRTJC     TM    SSMWKF01,SSMDUMY    DID WE HAVE A DUMMY ECSA -\n         JO    FINALCKS            SKIP PAST ALL ECSA VARIABLE TESTS.\n         TM    SSMQBSY,SSMQJC      LIMITED BY JOB CLASS?\n         JZ    RTJN                CHECK FOR LIMIT BY JOBNAME MASK.\n         CLC   SSMTSTCL,JQEJCLAS-JQE(R2)  SAME CLASS?\n         JNE   RTJN                 IF NOT WE DON'T CARE ABOUT IT.\n         XR    R1,R1               CLEAR R1 BEFORE USING IT FOR WORK\n         ICM   R1,B'0011',SSMCLSK  GET THE CLASS COUNT SO FAR\n         LA    R1,1(0,R1)            UPDATE IT BY ONE\n         STCM  R1,B'0011',SSMCLSK        ADN SAVE IT BACK.\n         CLC   SSMCLSK,SSMCLSL     HAVE WE REACHED THE LIMIT?\n         JNL   REJCLS              REJECT FOR CLASS COUNT\n*\n* THIS ROUTINE TESTS FOR LIMITS SET BY MASKED JOBNAMES THAT ARE ACTIVE\n*  test for active job was done in previous routine\nRTJN     EQU   *                   RETEST ACTIVE JOBNAME BY MASK LIM\n         TM    SSMQBSY,SSMQJN      NEEED TO TEST AT ALL?\n         JZ    RTUID                 IF NOT DO FINAL CHECKS CLEAN ETC.\n         CLC   SSMJMHI(2),$ZEROS   IF BOTH HI AND LOW ARE ZERO\n         JE    RTUID                 DON'T CHECK - THERE IS NO MASK!\n* NOW DO THE LIMIT BY JOBNAME CHECK.\n         XR    R4,R4               CLEAR WORK REG 4\nTSTJBN1  IC    R4,SSMJMHI          GET HIGH ORDER MASK\n         LTR   R4,R4               TEST IF WE HAVE A MASK TO CHECK?\n         JZ    TSTJBN2             IF MASK ZERO - SKIP TESTING\n         L     R1,JQEJNAME-JQE(R2)\n         EX    R4,CLMJBN1          TEST 1ST 4 BYTES OF JOBNAME\n*                                    AGAINST OUR MASK\n         JNE   RTUID               IF NOT MATCH - EXIT NOW\nTSTJBN2  IC    R4,SSMJMLO          GET LOW ORDER MASK\n         LTR   R4,R4               TEST IF WE HAVE A MASK TO CHECK?\n         JZ    JBNMTCH              IF NOT WE HAVE A MATCH !\n         L     R1,JQEJNAME+4-JQE(R2)\n         EX    R4,CLMJBN2          TEST LAST 4 BYTES OF JOBNAME\n         JNE   RTUID               IF NO MATCH - EXIT NOW\nJBNMTCH  XR    R1,R1\n         ICM   R1,B'0011',SSMJBNK  BUMP\n         LA    R1,1(0,R1)            OUR\n         STCM  R1,B'0011',SSMJBNK     JOBNAME COUNT\n         CLC   SSMJBNK,SSMJBNMX    OURS VS. THE MAX ?\n         JNL   REJJNM               IF OURS IS NOT LOW REJECT IT.\n         J     RTUID               ELSE GO DO THE FINAL SET OF TESTS\n* THE NEXT TWO INSTRUCTIONS WERE 'EX' EXECUTED IN THE BLOCK ABOVE. *\nCLMJBN1  CLM   R1,B'0000',SSMJMSK1\nCLMJBN2  CLM   R1,B'0000',SSMJMSK2\n*\n*\n* THIS ROUTINE TESTS FOR LIMITS SET BY MASKED USERIDS FOR ACTIVE JOBS\n*\nRTUID    EQU   *                   RETEST ACTIVE JOBNAME BY MASK LIM\n         TM    SSMQBSY,SSMQUID     NEEED TO TEST AT ALL?\n         JZ    FINALCKS              IF NOT DO FINAL CHECKS CLEAN ETC.\n         CLC   SSMUMHI(2),$ZEROS   IF BOTH PARTS OF MASK ARE ZERO -\n         JE    FINALCKS            THEN THERE IS NO MASK AND NO CHECK!\n* NOW DO THE LIMIT BY JOBNAME CHECK.\n         XR    R4,R4               CLEAR WORK REG 14\nTSTUID1  IC    R4,SSMUMHI          GET HIGH ORDER MASK\n         LTR   R4,R4               FIRST CHECK FOR A ZERO MASK\n         JZ    TSTUID2               IF ZERO MASK TEST 2ND HALF\n         L     R1,JQEUSRID-JQE(R2)\n         EX    R4,CLMUID1          TEST 1ST 4 BYTES OF USER ID\n*                                    AGAINST OUR MASK\n         JNE   FINALCKS            IF NOT MATCH - EXIT NOW\nTSTUID2  IC    R4,SSMUMLO          GET LOW ORDER MASK\n         LTR   R4,R4               IS THIS MASK ZERO'ED OUT?\n         JZ    UIDMTCH               IF SO WE HAVE A MATCH !\n         L     R1,JQEUSRID+4-JQE(R2)\n         EX    R4,CLMUID2          TEST LAST 4 BYTES OF JOBNAME\n         JNE   FINALCKS            IF NO MATCH - EXIT NOW\nUIDMTCH  XR    R1,R1\n         ICM   R1,B'0011',SSMUIDK  BUMP\n         LA    R1,1(0,R1)            OUR\n         STCM  R1,B'0011',SSMUIDK     JOBNAME COUNT\n         CLC   SSMUIDK,SSMUIDMX    OURS VS. THE MAX ?\n         JNL   REJUID               IF OURS IS NOT LOW REJECT IT.\n         J     FINALCKS            ELSE GO DO THE FINAL SET OF TESTS\n* THE NEXT TWO INSTRUCTIONS WERE 'EX' EXECUTED IN THE BLOCK ABOVE. *\nCLMUID1  CLM   R1,B'0000',SSMUMSK1\nCLMUID2  CLM   R1,B'0000',SSMUMSK2\n*\n*\n* ANY FINAL TESTS AND CLEANUP THAT ARE NEEDED (PER TEST JQE) GO HERE\n*\nFINALCKS EQU   *\n         CLC   SSMJQA,$ZEROS\n         JE    NORETJQA\n         L     R2,SSMJQA           JUST IN CASE - RELOAD IT NOW.\n         $DOGJQE ACTION=(RETURN),CBADDR=(R2)  RETURN THE JQA WE GOT\nNORETJQA EQU   *                   INDICATE WE NO LONGER HAVE ONE.\n         XR    R2,R2               INDICATE WE NO LONGER HAVE ONE.\n         XR    R8,R8               ALSO WE HAVE NO STQNAME PTR FOR IT.\n         STCM  R2,B'1111',SSMJQA   ZERO THE POINTER TO JQA 2B RETURNED\n         J     NEXTJQE             END OF THE  B I G   LOOP\n*\n* BASIC RETURN ROUTINES -\n*\nX049RC4  EQU   *                   RETURN AND REJECT THE SELELCTION.\n** * ------------------------------------------------------------- * **\n** * -- this is the smf routine for rejected jobs               -- * **\n** * ------------------------------------------------------------- * **\nX49SMFRJ EQU   *                   SMF REPORTING FOR REJECTED JOB.\n         LTR   R10,R10             DO WE HAVE AN SSMT AREA?\n         JZ    SKPSMF40              IF NOT - DEFAULT - NO SMF RECORDS\nDOTST40  CLI   SSMSMFOP,SSMSMF_ALL  DO THEY WANT ALL SMF RECS\n         JE    DOSMF40\n         CLI   SSMSMFOP,SSMSMF_ACTION IF ACTION OR ALL, DO SMFRECS\n         JE    DOSMF40\n         CLI   SSMSMFOP,SSMSMF_NONE  IF DEFAULTED - NEVER DO SMF\n         JE    SKPSMF40\nDOSMF40  EQU   *\n         DROP  R9\n         LR    R1,R3               PUT WORKAREA ADDR IN R1 FOR $CALL\n         $CALL BASICSMF            GO DO BASIC SMF WORK\n*\n         L     R1,SSMSMFBA         GET  THE BUFFER ADDRESS\n         USING STPCSMFD,R1\n         LTR   R1,R1               DID WE ACTUALLY GET AN SMF BUFFER\n         JZ    SKPSMF40            IF BAD START - DON'T TRY TO FINISH\n*\n         MVC   SMFXLEN,=AL2(SMFXLS40)  LENGTH OF ENTIRE SUB TYPED REC.\n         MVC   SMFXSTY,=XL2'0040'  MOVE THE SUBTYPE NUMBER\n         MVC   SMFD8STY,=XL2'0040' MOVE THE SUBTYPE NUMBER\n         MVC   SMFD8S40,=XL2'0040'       TWICE...\n         MVC   LENTEC01,=AL2(SMFLNS40) LENGTH OF SUB TYPED DATA ONLY\n* SMF SUBTYPE = 40 = REJECTION RECORD ... NOW DO SPECIFIC FIELDS\n         MVC   SMFD80JI,JQEJBNUM   MOVE THE JOB NUMBER\n         MVC   SMFD80JN,JQEJNAME   MOVE THE JOB NAME\n         MVC   SMFD80SI,SSMSID     MOVE THE SYSID\n         MVC   SMFD80TE,$NDENAME   MOVE THE NODE NAME\n         MVC   SMFD80GN,$XCFGPNM   MOVE THE GROUP NAME\n         MVC   SMFD80XT,$CLOCK     MOVE THE STCK TIME\n* FINALLY FILL THE DELAY REASON FROM OUR TABLE... WATCH TABLE MAINT...\n         TM    SSMWKF01,SSMGENWT   IS IT A GENERAL WAIT - NO JQEX?\n         JO    DOGWNJX             DO GENERAL WAITN - NO JQEX REASON\n         TM    SSMWKF01,SSMNOBRT   IF NO SELECTED JOB BERT\n         JO    NOBRTRC4             -  THEN UNKNOWN OR AFTER\n         XR    R8,R8\n         IC    R8,UBRDLAYS         UBRDLAYS = HEX DELAY CODE\n         MHI   R8,12               MULTIPLY BY 12 TO GET THE DISPLACMNT\n         LA    R7,DLAYTAB(R8)      POINT TO \"OUR\" DELAY REASON.\n         LA    R8,DLAYTABE         POINT TO END OF TABLE\n         CR    R7,R8               ARE WE PAST END OF TABLE (BAD INDEX)\n         JNH   DOFNDRSN\nNOBRTRC4 MVC   SMFD80ME,=CL12'BEFORE/UNKWN'\n         J     SMF40OK\nDOGWNJX  MVC   SMFD80ME,=CL12'GENERAL WAIT'\n         J     SMF40OK\nDOFNDRSN MVC   SMFD80ME,0(R7)      ELSE MOVE THE TABLED REASON NOW\nSMF40OK  EQU   *\n         $QUESMFB (R1)             WRITE THE RECORD NOW.\nSKPSMF40 LTR   R3,R3               DO WE HAVE A WORK AREA\n         JZ    NOWYET              NO WORK YET - JUMP THERE...\n         L     R4,SSMXPLPT         RESTORE XPL POINTER  NOW.\nNOWYET   EQU   *                   IF NO WORKAREA YET, XPL SHOULD BE OK\n         USING XPL,R4\n         OI    X049RESP,X049SKIP   GIVE THIS ONE A SKIP - DON'T DO IT!\n         J     TSTRTJQA            JUMP INTO RC0 ROUTINES TO DO RTNS.\nX049RC0  EQU   *\n         LTR   R3,R3               DO WE HAVE A WORK AREA?\n         JZ    RELWDONE\n         TM    SSMQBSY,SSMQWIT     IS A WITH FLAG STILL SET IN SSMQBSY\n         JNZ   REJWITH              IF IT IS, IT WAS NEVER SATISFIED..\n* /*AFTER CAUSES REJECTION AND AFTER SATISFIED FLAGS TO BE SET -\n* IF THE OBJECT OF AFTER IS NOT STILL RUNNING, WE SIMPLY FALL THRU\n* SO RETEST TO SEE IF WE ARE WAITING ON A /*AFTER, AND IF SO,\n* IS THE OPTION SET FOR SSMBEAFT_POS, AND IF SO, IS IT SATISFIED.\n*   OTHERWISE WE CAN STILL FAIL FOR A NO VERIFIED /*AFTER\nTSTFNAFT EQU   *                   TEST FOR FINAL /*AFTER REJECTIONS\n         TM    UBRMFLAG,UBRAFT     IS A /*AFTER IN 'THE CHOSEN' JOB?\n         JZ    TSTFNBEF                -NO GO TEST /*BEFOERE STUFF\n         CLI   SSMBEAFT,SSMBEAFT_PREMOD IS IT STILL THE BAD OLD DAYS?\n         JE    TSTFNBEF                  - IF PREMOD - LET IT GO...\n         CLI   SSMBEAFT,SSMBEAFT_POS  IS THIS POSITIVE VERIFICATION?\n         J     TSTFNBEF                  - IF PREMOD - LET IT GO...\nTSTFNBEF EQU   *                   FINAL TEST FOR /*BEFORE JOBNAME\n         TM    UBRMFLAG,UBRBEF     IS A /*AFTER IN 'THE CHOSEN' JOB?\n         JZ    ACCEPTIT                -NO proceed to next step...\n* THAT WAS THE LAST CHECK - IF WE FELL THROUGH - THE JQE IS ACCEPTED!\nACCEPTIT MVI   UBRDLAYS,UBRDLSEL       FLAG THIS JQE AS SELECTED.\n         LA    R6,0(0,0)           SET A ZERO IN R6 FOR RETURN CODE\n*                                    WE NEED TO REJECT THE SELECTION.\nX49SMFR1 EQU   *                   SMF REPORTING FOR REJECTED JOB.\n         CLI   SSMSMFOP,SSMSMF_ALL DID THEY WANT ALL SMF RECORDS?\n         JE    DOSMF41\n         CLI   SSMSMFOP,SSMSMF_ACTION DID THEY WANT ACTION RECORDS?\n         JE    DOSMF41\n         CLI   SSMSMFOP,SSMSMF_NONE IF THEY DIDN'T SPECIFY - SKIP IT\n         JE    SKPSMF41\nDOSMF41  LR    R1,R3               POINT TO OUR WORK AREA FIRS\n         $CALL BASICSMF            GO DO BASIC STUFF FIRST\n*\n*\n         L     R1,SSMSMFBA         SAVE THE BUFFER ADDRESS\n         USING STPCSMFD,R1\n         LTR   R1,R1\n         JZ    SKPSMF41            IF BAD START - DON'T TRY TO FINISH\n*\n         MVC   SMFXLEN,=AL2(SMFXLS41)  ENTIRE LENGTH OF A TYPE41 REC.\n         MVC   SMFXSTY,=X'0041'    JOB PASSED SUB-TYPE SMF RECORD\n         MVC   SMFD8STY,=X'0041'   JOB PASSED SUB-TYPE SMF RECORD\n         MVC   SMFD8S41,=X'0041'   SUBTYPE DATA IS REPEATED\n         MVC   LENTEC01,=AL2(SMFLNS41)  LENGTH OF SUB - TYPED DATA\n* NOW HADLE THE DETAILED DATA\n         MVC   SMFD81IN,JQEINPND\n         MVC   SMFD81XN,$OWNNODE\n         MVC   SMFD81CD,JQXCRTME\n         MVC   SMFD81JC,JQEJCLAS\n         MVC   SMFD81JI,JQEJBNUM\n         MVC   SMFD81JN,JQEJNAME\n         MVC   SMFD81RI,JQEUSRID\n         MVC   SMFD81SL,JQESECLB\n         MVC   SMFD81XT,$CLOCK\n         MVC   SMFD81SE,JQASCHE\n         MVC   SMFD81TE,$OWNNODE\n         MVC   SMFD81GN,$XCFGPNM\n         $QUESMFB (R1)\nSKPSMF41 EQU   *\nTSTRTJQA EQU   *\n         CLC   SSMJQA,$ZEROS       IS THERE AN ERRANT JQA TO BE RETURND\n         JE    TSTRTNWK\n         L     R2,SSMJQA\n         $DOGJQE ACTION=(RETURN),CBADDR=(R2)  RETURN IT IF WE HAVE IT!\nTSTRTNWK XR    R2,R2\n         LTR   R3,R3               TEST PTR TO WORK AREA - GOT ONE?\n         JZ    RELWDONE            IF ZERO, DON'T RELEAST IT.\n         L     R3,SSMWADDR         GET THE ORIGINAL ADDRESS GIVEN TO US\n         CLC   0(4,R3),=C'SSMW'    IF NOT OUR EYECATCHER......\n         JNE   RELWDONE                 JUST LEAVE IT ALONE.\n*\n         $RETWORK (R3)\n         LTR   R15,R15\n         JZ    RELWDONE            RELEASE WAS DONE - BE HAPPY !\n* NOTE - IT IS OK TO USE THE WORK AREA TO FORMAT A MESSAGE - IF THE\n* WORK AREA WAS NOT RELEASED ! THAT'S MY STORY, I'M STICKING TO IT.\n*\n         LR    R0,R15              ELSE GET THE RETURN CODE\n         LA    R15,8(R0,R0)        SHOW A LEN OF DIGITS TO DISPLAY\n         BAS   R9,TOHEX\n         MVC   MSGRW1F1,TOHEXFLD\n         $WTO  MSGRW1,L'MSGRW1,JOB=YES,ROUTE=$ALL\nRELWDONE EQU   *\n         XR    R6,R6\nJUSTGO   $RETURN RC=(R6)\n\nERNOWA   EQU   *                   NO WORK AREA COULD BE ACQUIRED\n         LR    R0,R15              WHERE ID DATA (ERROR CODE?)\n         LA    R15,8(0,0)          HOW LONG IS DATA TO DISPLAY?\n         BAS   R9,TOHEX\n         MVC   MSGGW1F,TOHEXFLD    MOVE DECODED VALUE FROM R15\n         $WTO  MSGGW1,L'MSGGW1,JOB=YES,ROUTE=$ALL,WAIT=NO\n         XR    R6,R6\n         J     RELWDONE\n** * ------------------------------------------------------------- * **\n** * -- rejection routines go here - we update the rejection    -- * **\n** * -- field in the stqname section of the selected job and    -- * **\n** * -- then reject (rc4) the job. it is possilbe to issue msgs -- * **\n** * -- in a rejection routine if needed.                       -- * **\n** * ------------------------------------------------------------- * **\n* UBRUFLAG DS    BL1              DELAY REASONS FROM OUR EXIT 49.\n*\n*  THE - UBRXXVRM BIT IS NEW - IT WAS UNUSED BEFORE AND WILL BE TESTED\n* BEFORE TRYING TO ACCESS ANY OF THE NEW EXPANDED FIELDS.  IT IS\n* SIMPLY A BIT USED FOR COMPATIBILITY AS WE EXPAND THE EXTENSIONS FOR\n* NEW FUTURE FUNCTION AND ADD VRM FIELDS AT THE JES2 1.7 LEVEL.\n*\n*\n* UBRDLWIT EQU   X'01'                /*WITH CONTENTION DELAY\n* UBRDLWIO EQU   X'02'                /*WITHOUT  CONTENTION (RESUSED)\n* UBRDLWFR EQU   X'03'                TIMING DELAY HOLDTIL/FOR (REUSD\n* UBRDLWTL EQU   X'04'                TIMING DELAY HOLDTIL/FOR (REUSD\n* UBRDLWTG EQU   X'05'                 GENERAL PURPOSE WAIT\n* UBRDLDUP EQU   X'06'                HOLD/DUP   CONTENTION\n* UBRDLAFT EQU   X'07                 /*AFTER    CONTENTION\n* UBRDLBEF EQU   X'08'                /*BEFORE   CONTENTION\n* UBRDLCTL EQU   X'09'                /*CNTL     CONTENTION\n* UBRDLCLS EQU   X'0A'                CLASS LIMIT REACHED\n* UBRDLJNM EQU   X'0B'                JOBNAME MASK\n* UBRDLSEL EQU   X'0C'                JOB HAS BEEN SELECTED - NO DELAY\n* UBRDLUID EQU   X'0D'                UID MASK LIMIT HAS BEEN REACHED\n         DS    0H\n* NOTE -\n* NOTE - THIS IS A COPY OF THE TABLE MAINTAINED IN QBACDISP- KEEP THEM\n* NOTE -  IN-SYNCH PLEASE!\n* NOTE -\nDLAYTAB  DC    C'JES2- NOTSEL'     HAS NOT BEEN SELECTED BY JES2 YET\n         DC    C'/*WITH CARD '\n         DC    C'/*WITHOUT   '\n         DC    C'HOLDFOR TIMR'\n         DC    C'HOLDTIL TIMR'\n         DC    C'GENERAL TIMR'\n         DC    C'OPEN -UNUSED'      UNSUED AT THIS TIME.\n         DC    C'/*AFTER CARD'\n         DC    C'/*BEFORE CRD'\n         DC    C'/*CNTL CONFL'\n         DC    C'CLASS LIMIT '\n         DC    C'JOBNAME LIM '\n         DC    C' - NONE -   '     JOB HAS BEEN SELECTED - NO DELAYS\nDLAYTABE DC    C'USERID LIMIT'     MASKED/USERID LIMIT REACHED\n         DS    0H\nREJECTIT EQU   *                   REJECT FOR GENERAL WAIT TIME\n         LTR   R6,R6               DO WE EVEN HAVE A JQEX?\n         JZ    X049RC4              IF NOT JUST END\n         TM    UBRUFLAG,UBRXXVRM   NEW FORMAT OR OLD?\n         JZ    X049RC4             IF OLD - JUST GO BACK NOW.\n         MVI   UBRDLAYS,UBRDLWTG   INDICATE GENERAL WAIT\n         J     X049RC4             JUST RETURN MAD...\nREJWTT   EQU   *                   REJECT FOR WAIT UNTIL\n** * ------------------------------------------------------------- * **\n** * -- We are rejecting the job selection because it failed    -- * **\n** * -- the holdtil time requirements.                          -- * **\n** * -- 1 - check if our member bit is on in ubrmmtqe.          -- * **\n** * --      (have we already set a stimer on this member?)     -- * **\n** * --    Yes - does the STCK on ubrmmstk match our start time?-- * **\n** * --         Yes - that means no restart - just end -skip job-- * **\n** * --         No  - a restart happened - then pretend this is -- * **\n** * --               the first time entered and set a new timer-- * **\n** * --               (below - answer no to question 1).        -- * **\n** * --    No  - 'or' on our member bit in ubrmmtqe.            -- * **\n** * --          get this member start time(stck) and save in   -- * **\n** * --          ubrmmstk(index base on member number).         -- * **\n** * --          Make a new sttqe and call $stimer              -- * **\n** * --          set the delay reason in ubrdlays               -- * **\n** * --          finally - reject the job - do not select.      -- * **\n** * ------------------------------------------------------------- * **\n         LTR   R6,R6               DO WE EVEN HAVE A JQEX?\n         JZ    X049RC4              IF NOT JUST END\n         TM    UBRUFLAG,UBRXXVRM   NEW FORMAT - OR OLD?\n         JZ    X049RC4             IF OLD - JUST GO BACK NOW.\n*\n*\n** * -- 1 - check if our member bit is on in ubrmmtqe.          -- * **\n**** USING HCT,R11 *** MAINTASK ***\n         XR    R1,R1              clear r1 before loading jes2 member #\n         IC    R1,$SIDBUSY        GET OUR MEMBER NUMBER\n         CHI   R1,8                ONLY SET STIMERS ON FIRST 8 MEMBERS\n         JH    X049RC4\n         XR    R2,R2              CLEAR R2 - TO BUILD OUR MEMBER MASK\n         LA    R2,1(R0,R0)        PUT A 1 IN R2\n         LA    R15,UBRMMSTK        FIRST ENTRY - TABLE OF STCK'S\nLOPMSKT  BCT   R1,BLDMSKT\n         J     MSKBILTT           THE MASK IS NOW BUILT\nBLDMSKT  SLL   R2,1               SLIDE TO THE LEFT ONE.\n         LA    R15,4(R0,R15)        BUMP POINTER TO NEXT STCK ENTRY\n         J     LOPMSKT\nMSKBILTT EQU   *                  THE MASK BIT IS NOW SET IN R2.\n         $GETADDR CB=ASCB\n         USING  ASCB,R1\nTMMSK    TM    UBRMMTQE,X'00'\n         EX    R2,TMMSK           TEST TO SEE IF OUR BIT IS SET?!?\n** * --    No  - 'or' on our member bit in ubrmmtqe.            -- * **\n         JZ    SETTIMRT           IF NOT, THEN ALWAYS SET NEW STIMER\n** * --    Yes - does the STCK on ubrmmstk match our start time?-- * **\n         CLC   0(4,R15),ASCBINTS-ASCB(R1) START STCK MATCH OLD STCK?\n** * --         Yes - that means no restart - just end -skip job-- * **\n         JE    X049RC4            THEY MATCH WE ARE DONE - REJECT IT\n** * --         No  - a restart happened - then pretend this is -- * **\n** * --               the first time entered and set a new timer-- * **\nSETTIMRT EQU   *                  HERE WE SET A NEW STCK AND STIMER\n         EX    R2,OIMSK\nOIMSK    OI    UBRMMTQE,X'00'     **EXECUTED** 'OR' OUR BIT INTO MASK\n         MVC   0(4,R15),ASCBINTS-ASCB(R1)  MOVE THE STCK TIME TO TABLE\n         XR    R15,R15            CLEAR WORK REG R15 NOW\n* IF FIRST TIME HERE - WE MUST ISSUE A STIMER SO WE WAKE UP AGAIN.\n         XGR   R0,R0               CLEAR WORK REG NOW\n         L     R0,UBRHLDUX         GET SATISFIED TIME IN STCK FMT\n         SLLG  R1,R0,32            SHIFT R0 LEFT 32 AND SAVE IN R1\n         LG    R0,$CLOCK           GET THE CURRENT TIME\n         SGR   R1,R0               FUTURE TIME - CURR TIME = WAIT TIME\n         XGR   R0,R0               CLEAR R0 THEN DIV. TO GET SECONDS\n         DSG   R0,=FD'4096000000'  R1 = SECONDS, R0=REMAINDER\n         LA    R1,1(R0,R1)         ADD A SECOND FOR ROUNDING ISSUES.\n         ST    R1,SSMTQWAT         SAVE TIME FOR USE IN STIMER RTN.\n         LR    R1,R3               PUT WORK AREA IN R1 FOR STIMER RTN\n         $CALL STIMER              ISSUE STIM AGAINST A NEW STTQE CB\n         MVI   UBRDLAYS,UBRDLWTL\n         J     X049RC4             JUST RETURN MAD...\nREJWFR   EQU   *                   REJECT FOR WAIT FOR\n** * ------------------------------------------------------------- * **\n** * -- ( SAME AS FOR ROUTINE REJWTT ABOVE)                     -- * **\n** * -- We are rejecting the job selection because it failed    -- * **\n** * -- THE HOLDFOR TIME REQUIREMENTS.                          -- * **\n** * -- 1 - check if our member bit is on in ubrmmtqe.          -- * **\n** * --      (have we already set a stimer on this member?)     -- * **\n** * --    Yes - does the STCK on ubrmmstk match our start time?-- * **\n** * --         Yes - that means no restart - just end -skip job-- * **\n** * --         No  - a restart happened - then pretend this is -- * **\n** * --               the first time entered and set a new timer-- * **\n** * --               (below - answer no to question 1).        -- * **\n** * --    No  - 'or' on our member bit in ubrmmtqe.            -- * **\n** * --          get this member start time(stck) and save in   -- * **\n** * --          ubrmmstk(index base on member number).         -- * **\n** * --          Make a new sttqe and call $stimer              -- * **\n** * --          set the delay reason in ubrdlays               -- * **\n** * --          finally - reject the job - do not select.      -- * **\n** * ------------------------------------------------------------- * **\n         LTR   R6,R6               DO WE EVEN HAVE A JQEX?\n         JZ    X049RC4              IF NOT JUST END\n         TM    UBRUFLAG,UBRXXVRM   NEW FORMAT - OR OLD?\n         JZ    X049RC4             IF OLD - JUST GO BACK NOW.\n*\n** * -- 1 - check if our member bit is on in ubrmmtqe.          -- * **\n**** USING HCT,R11 *** MAINTASK ***\n         XR    R1,R1\n         IC    R1,$SIDBUSY        GET OUR MEMBER NUMBER\n         CHI   R1,8               IF MEMBER # IS > 8 THEN SKIP IT\n         JH    X049RC4             LET THE FIRST 8 MEMBERS HANDLE IT.\n         XR    R2,R2              CLEAR R2 - TO BUILD OUR MEMBER MASK\n         LA    R2,1(R0,R0)        PUT A 1 IN R2\n         LA    R15,UBRMMSTK        FIRST ENTRY - TABLE OF STCK'S\nLOPMSKF  BCT   R1,BLDMSKT\n         J     MSKBILTF           THE MASK IS NOW BUILT\nBLDMSKF  SLL   R2,1               SLIDE TO THE LEFT ONE.\n         LA    R15,4(R0,R15)        BUMP POINTER TO NEXT STCK ENTRY\n         J     LOPMSKF\nMSKBILTF EQU   *                  THE MASK BIT IS NOW SET IN R2.\n         $GETADDR CB=ASCB\n         USING  ASCB,R1\n* NOW R2=MASK BIT, 515 => STCK ENTRY,  R1 = ASCB\nTMMSKF   TM    UBRMMTQE,X'00'\n         EX    R2,TMMSKF          TEST TO SEE IF OUR BIT IS SET?!?\n** * --    No  - 'or' on our member bit in ubrmmtqe.            -- * **\n         JZ    SETTIMRF           IF NOT, THEN ALWAYS SET NEW STIMER\n** * --    Yes - does the STCK on ubrmmstk match our start time?-- * **\n         CLC   0(4,R15),ASCBINTS-ASCB(R1) START STCK MATCH OLD STCK?\n** * --         Yes - that means no restart - just end -skip job-- * **\n         JE    X049RC4            THEY MATCH WE ARE DONE - REJECT IT\n** * --         No  - a restart happened - then pretend this is -- * **\n** * --               the first time entered and set a new timer-- * **\nSETTIMRF EQU   *                  HERE WE SET A NEW STCK AND STIMER\n         EX    R2,OIMSKF\nOIMSKF   OI    UBRMMTQE,X'00'     **EXECUTED** 'OR' OUR BIT INTO MASK\n         MVC   0(4,R15),ASCBINTS-ASCB(R1)  MOVE THE STCK TIME TO TABLE\n         XR    R15,R15              CLEAR WORK REG R15 NOW\n* IF FIRST TIME HERE - WE MUST ISSUE A STIMER SO WE WAKE UP AGAIN.\n         XGR   R0,R0               CLEAR WORK REG 0 NOW\n         L     R0,UBRHLDFX         GET SATISFIED TIME IN STCK FMT\n         SLLG  R1,R0,32            SHIFT R0 LEFT 32 AND SAVE IN R1\n         LG    R0,$CLOCK           GET THE CURRENT TIME\n         SGR   R1,R0               FUTURE TIME - CURR TIME = WAIT TIME\n         XGR   R0,R0               CLEAR R0 THEN DIV. TO GET SECONDS\n         DSG   R0,=FD'4096000000'  R1 = SECONDS, R0=REMAINDER\n         LA    R1,1(R0,R1)         ADD A SECOND FOR ROUNDING ISSUES.\n         ST    R1,SSMTQWAT         SAVE TIME FOR USE IN STIMER RTN.\n         LR    R1,R3               PUT WORK AREA IN R1 FOR STIMER RTN\n         $CALL STIMER              ISSUE STIM AGAINST A NEW STTQE CB\n*                                  FINALLY FALL THRU AND SET DELAY RSN\n         MVI   UBRDLAYS,UBRDLWFR\n         J     X049RC4             JUST RETURN MAD...\n* REJAFT2 IS THE SAME AS REJAFT, BUT DOES NOT SET THE POSITIVE MATCH\n* WE REJ ECT T HE JOB, AND HAVE NOT YET SEEN THE AFTER JOBNAME...\nREJAFT2  EQU   *                   REJECT FOR /*AFTER CONFLICT\n         LTR   R6,R6               DO WE EVEN HAVE A JQEX?\n         JZ    X049RC4              IF NOT JUST END\n         TM    UBRUFLAG,UBRXXVRM   NEW FORMAT - OR OLD?\n         JZ    X049RC4             IF OLD - JUST GO BACK NOW.\n         MVI   UBRDLAYS,UBRDLAFT\n         J     X049RC4             JUST RETURN MAD...\n* REJAFT2 IS THE SAME AS REJAFT, BUT DOES NOT SET THE POSITIVE MATCH\nREJBEF2  EQU   *                   REJECT FOR BEFORE CONFLICT\n         TM    SSMWKF01,SSMNOBRT   DO WE HAVE A JQEX(BERT) FOR REJ JOB?\n         JO    X049RC4               IF NOT, THEN JUST REJECT IT\n         TM    UBRUFLAG,UBRXXVRM      BUT IF IT IS ALSO THE NEW\n         JZ    X049RC4                  FORMAT, THEN UPDATE THE\n         MVI   UBRDLAYS,UBRDLBEF          REJECTION CODE BEFORE REJ.\n         J     X049RC4             JUST RETURN MAD...\nREJCTL   EQU   *                   REJECT FOR CNTL CONFLICT\n         LTR   R6,R6               DO WE EVEN HAVE A JQEX?\n         JZ    X049RC4              IF NOT JUST END\n         LM    R4,R5,SAVE2REG      RESTORE WORK REGS 4 AND 5 FIRST\n         TM    UBRUFLAG,UBRXXVRM   NEW FORMAT - OR OLD?\n         JZ    X049RC4             IF OLD - JUST GO BACK NOW.\n         MVI   UBRDLAYS,UBRDLCTL\n         J     X049RC4             JUST RETURN MAD...\nREJWIO   EQU   *                   REJECT FOR WITHOUT CONFLICT\n         LTR   R6,R6               DO WE EVEN HAVE A JQEX?\n         JZ    X049RC4              IF NOT JUST END\n         TM    UBRUFLAG,UBRXXVRM   NEW FORMAT - OR OLD?\n         JZ    X049RC4             IF OLD - JUST GO BACK NOW.\n         MVI   UBRDLAYS,UBRDLWIO   INDICATE WITHOUT CONFLICT\n         J     X049RC4             JUST RETURN MAD...\nREJCLS   EQU   *                   REJECT FOR WAIT UNTIL\n         LTR   R6,R6               DO WE EVEN HAVE A JQEX?\n         JZ    X049RC4              IF NOT JUST END\n         TM    UBRUFLAG,UBRXXVRM   NEW FORMAT - OR OLD?\n         JZ    X049RC4             IF OLD - JUST GO BACK NOW.\n         MVI   UBRDLAYS,UBRDLCLS    CLASS LIMIT REACHED\n         J     X049RC4             JUST RETURN MAD...\nREJJNM   EQU   *                   REJECT FOR WAIT UNTIL\n         LTR   R6,R6               DO WE EVEN HAVE A JQEX?\n         JZ    X049RC4              IF NOT JUST END\n         TM    UBRUFLAG,UBRXXVRM   NEW FORMAT - OR OLD?\n         JZ    X049RC4              JOBNAME MASK LIMIT REACHED.\n         MVI   UBRDLAYS,UBRDLJNM\n         J     X049RC4             JUST RETURN MAD...\nREJUID   EQU   *                   REJECT FOR WAIT UNTIL\n         LTR   R6,R6               DO WE EVEN HAVE A JQEX?\n         JZ    X049RC4              IF NOT JUST END\n         TM    UBRUFLAG,UBRXXVRM   NEW FORMAT - OR OLD?\n         JZ    X049RC4              JOBNAME MASK LIMIT REACHED.\n         MVI   UBRDLAYS,UBRDLUID\n         J     X049RC4             JUST RETURN MAD...\nREJWITH  EQU   *                   REJECT FOR WAIT UNTIL\n         LTR   R6,R6               DO WE EVEN HAVE A JQEX?\n         JZ    X049RC4              IF NOT JUST END\n         TM    UBRUFLAG,UBRXXVRM   NEW FORMAT - OR OLD?\n         JZ    X049RC4             IF OLD - JUST GO BACK NOW.\n         MVI   UBRDLAYS,UBRDLWIT   /*WITH WAS NOT SATISFIED.\n         J     X049RC4             JUST RETURN MAD...\n*\n** * ------------------------------------------------------------- * **\n** * --  tohex -  general use routine covert hex values to      -- * **\n** * --  readable hex values - ie x'23C8' ==> c'23c8'           -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\nTOHEX    EQU   *                   SHORT ROUTINE, FORMAT HEX FOR DISP.\n         SRDL  R0,4                ISOLATE 4 BITS / TIME\n         SRL   R1,28               RIGHT JUSTIFY 4 BITS\n         CHI   R1,9                CHECK 0-9 VS A-F\n         BH    TOHEXSKP            HIGHTER? - DON'T ADJUST\n         LA    R1,C'0'-C'A'+10(,R1)  ADJUST FOR EBCIDIC CHARS\nTOHEXSKP LA    R1,C'A'-10(,R1)     FINALLY MAKE IT PRINTABLE\n         STC   R1,TOHEXFLD-1(R15)  SAVE RESULT INOT TMP FIELD\n         BCT   R15,TOHEX           LOOP TIL DONE\n         BR    R9                  RETURN WHEN DONE.\n\n** * ------------------------------------------------------------- * **\n** * -- basicsmf routine here - get buffer for an smf record    -- * **\n** * -- and load it up with all the info we can in this routine -- * **\n** * ------------------------------------------------------------- * **\nBASICSMF $SAVE\n         LR    R3,R1               SET BASE FOR OUR WORKAREA\n         LR    R12,R15             SET LOCAL BASE\n         USING BASICSMF,R12        SET OUR BASE\n         USING HCT,R11             SET BASE FOR HCT\n         USING SSM49WRK,R3         BASE FOR THE WORK AREA\n         L     R10,ECSAPTR         GET THE ECSA PTR OUT OF WORK AREA\n         USING SSMTB,R10           BASE FOR THE ECSA AREA\n* WE ALSO NEED PACKED UNSIGNED 1/100TH SECONDS STYLE TIME X'HHMMSSTH'\n*\n         $STCK ADDR=SSMDBL2        GET THE STCK VALUE\n         LM    R0,R1,SSMDBL2       TIME IN REGS TO PASS TO CONVERSION\n        $CALL  HCNVTIME             GO DO THE CONVERSION TO .01 SECS.\n         STM   R0,R1,SSMDBL2       SSMDBL2 NOW HAS DATE AND TIME IN A\n*                                     FORMAT THE IS GOOD FOR SMF HDRS.\n*\n*\n*\n*\n* NEXT GET AN SMF BUFFER AND FILL IT UP.\n         XC    SSMSMFBA,SSMSMFBA   CLEAR THE BUFFER ADDR.\n         $GETSMFB  WAIT=NO\n         JZ    BSRC04              BAD RETURN - JUST EXIT IF NO BUFFER\n         LTR   R1,R1                 but experience shows differently!\n         BZ    BSRC04\n         ST    R1,SSMSMFBA         SAVE THE BUFFER ADDRESS\n         USING STPCSMFD,R1\n         XC    SMFXSEG,SMFXSEG     SEGMENT IS ALWAYS ZEROS\n         MVI   SMFXFLG,B'01011110'  INDICATE WE ARE USING SUBTYPES.\n         MVC   SMFXRTY,SSMSMFNM    MOVE THE SPECIFIED SMF NUMBER\n         MVC   SMFXTME,SSMDBL2         TIME OF DAY IN 1/100TH OF A SEC\n         MVC   SMFXDTE,SSMDBL2+4        & DATE IN PACKED (CENTURY) FMT.\n*\n         MVC   SMFXSID,SSMSID      MOVE SYSTEM ID (FROM WORK AREA)\n         MVI   SMFXSSI,X'40'       CLEAR THE XXI AREA\n         MVC   SMFXSSI+1(L'SMFXSSI-1),SMFXSSI      fix a bad ripple!\n         MVI   SMFXNUMT+1,X'02'    WE ALWAYS HAVE JUST 2 TRIPLETS\n         MVC   SMFXRESV,=AL2(SMFD8SSD) SELF-DEFINING SECTION LENGTH\n**\n         MVC   OFFPRD01,=AL4(PRDOFS) OFFSET FROM RDW TO PROD. SECT.\n         MVC   LENPRD01,=AL2(PRDLENS) PRD. SECTION LENGTH\n         MVC   NUMPRD01,=X'0001'   # OF PRODUCT SECTIONS - ALWAYS 1\n**\n         MVC   OFFTEC01,=AL4(STDOFFS) OFFSET FROM RDW TO SUBTYPED DATA\n*        MVC   LENTEC01,=AL2(xxxxxxx)   varies -set when filled in\n         MVC   NUMTEC01,=X'0001'   # OF SUBTYPED SECTIONS = 1\n* PRODUCT SECTION GETS FILLED IN NEXT\n         MVC   SMFD8SVR,=X'00010700'  THE VRM NUMBER WE USE WITH 1.7\n         MVC   SMFD8SID,=C'SHARED SPOOL MOD'\n* ALL OTHER FIELDS ARE SUBTYPE SPECIFIC\n         XR    R15,R15\nBSRC00   $RETURN RC=(15)            DONE - GO HOME\nBSRC04   LA    R15,4(R0,R0)         LOAD A BAD RETURN VALUE\n         J     BSRC00\n** * ------------------------------------------------------------- * **\n** * --                                                         -- * **\n** * -- fixed data area go here                                 -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\nMSGRW1   $MSG  949,'STSCX49A ERROR: UNABLE TO RELEASE WORK AREA RC: FFFX\n               FFFFF.'\nMSGRW1F1 EQU   *-9,8               WHERE TO SAVE R15 VALUE\nMSGGW1   $MSG  949,'STSCX49A ERROR: UNABLE TO OBTAIN A WORK AREA RC:XXXX\n               XXXXX.'\nMSGGW1F  EQU   *-9,8               WHERE TO SAVE R15 VALUE BEFORE WTO\nMSGNO$SJ $MSG  949,'STSCX49A - $SJ COMMANDS ARE CURRENTLY DISALLOWED.'\nMSGNOBRT $MSG  949,'STSCX49A - ERROR LOCATING STQNAME DISPLACEMENT.'\n                LTORG\n*\n** * ------------------------------------------------------------- * **\n** * --                 $ S T I M E R   R T N                    - * **\n** * --  This routine is passed the address of our work area.    - * **\n** * -- From the work area we locate the PCE address (which was  - * **\n** * -- filled in from the ECSA SSMT area), and a time filed     - * **\n** * -- with time in seconds.  If either field is zero, just     - * **\n** * -- return with no action.  Otherwise obtain ($gethp) a      - * **\n** * -- storage area for a new STTQE control block; fill in the  - * **\n** * -- time and PCE pointer info - and finally insert it into   - * **\n** * -- the doubly linked STTQE chain that is pointed to by      - * **\n** * -- the ecsa area - also pointed to by the work area.        - * **\n** * --  Finally a $STIMER macro is issued against the TQE field - * **\n** * -- embedded in the STTQE control block, and we return to    - * **\n** * -- our caller.  The PCE code will eventually release the    - * **\n** * -- STTQE when timer has poped.                              - * **\n** * --                                                          - * **\n** * ------------------------------------------------------------- * **\nSTIMER   $SAVE\n         LR    R3,R1               SET BASE FOR OUR WORKAREA\n         LR    R12,R15             SET LOCAL BASE\n         USING STIMER,R12          SET OUR BASE\n         USING SSM49WRK,R3         BASE FOR THE WORK AREA\n         L     R10,ECSAPTR         GET THE ECSA PTR OUT OF WORK AREA\n         USING SSMTB,R10           BASE FOR THE ECSA AREA\n* NOW CHECK TO SEE IF WE HAVE A TIME VALUE IN THE WORK AREA.\n         CLC   SSMTQWAT,$ZEROS     IS THE TIMER ZEROS?\n         JE    STRC00              IF SO JUST RETURN NOW\n         LTR   R10,R10             DID WE HAVE AN ECSA AREA PTR?\n         JZ    STRC00               IF NOT, THEN END QUICKLY\n         CLC   SSMUPCEC,$ZEROS     IS THE PCE ADDRESSS ZEROS?\n         JE    STRC00               ALSO, IF TRUE WE END NOW.\n\n* NOW WE GET STORAGE FOR OUR NEW STTQE CONTROL BLOCK\n\n         $GETHP TYPE=GET,CELL=(R6),VERSIZE=STTQLEN\n\n* WE SHOULD NOW HAVE AN STTQE CONTROL BLOCK POINTED TO BY R6\n\n         USING STTQE,R6            BASE OUR NEWEST CONTROL BLOCK\n         XC    STTQE(STTQLEN),STTQE  ZERO THE ENTIRE PUPPY OUT NOW\n         MVC   STTQTQE+TQETIME(4),SSMTQWAT  MOVE THE TIME TO WAIT\n         MVC   STTQTQE+TQEPCE(4),SSMUPCEC  MOVE PTR TO PCE TO BE POSTED\n         XC    SSMTQWAT,SSMTQWAT   CLEAR THE WAIT TIME IN WORKAREA\n\n* TQE PORTION IS NOW FILLED IN - TIME TO INSERT INTO THE CHAIN *\n\n* A NOTE ABOUT SERIALIZATION - WE ONLY ACCESS (UPDATE AND READ) THESE\n* STTQE CB'S FROM JES2 MAINTASK EXITS.  MAINTASK EXITS ARE BY\n* DEFINITION ALREADY SERIALIZED, SO NO OTHER ENQUE TECHNIQUE IS NEEDED.\n         L     R7,SSMTQCB1         R7 = OUR FIRST STTQE\n         LTR   R7,R7                DO WE HAVE ONE YET?\n         JZ    FIRSTCB                IF NOT HANDLE THE SPECIAL COND.\n\n         CLC   STTQBK-STTQE(4,R7),$ZEROS    BKWD POINTER ZERO FOR #1 ?\n         JNE   ABORTTQE             IF NOT WE HAVE A PROBLEM QUIT NOW\n\n         ST    R7,STTQFP           SAVE ADDR OF OLD FIRST AS FWD PTR\n         ST    R6,STTQBK-STTQE(0,7) SAVE ADDR OF NEW FIRST AS BKW PTR\n*\nFIRSTCB  ST    R6,SSMTQCB1         UPDATE THE ECSA POINTER TO QUEUE\n         LA    R8,STTQTQE          GET ADDR OF THE EMBEDDED TQE\n         $STIMER (R8)\nSTRC00   XR    R15,R15\n         $RETURN RC=(15)            DONE - GO HOME\n*\nABORTTQE EQU   *                   ONLY IF IT IS NOT POSSIBLE...\n         $GETHP TYPE=FREE,CELL=(R6)\n         J     STRC00\n\n** * ------------------------------------------------------------- * **\n** * --                                                         -- * **\n** * -- our work area dsect goes here                           -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\nSSM49WRK DSECT\nSSMXP    DS    XL4                 ID FROM $GETWORK = SSMW\nSSMXPLPT DS    XL4                 POINTER SAVE AREA FOR THE XPL LIST\nSSMJQA   DS    XL4                 ADDRESS OF JQA TO BE RETURNED OR 0\nSSMWADDR DS    XL4                 ADDRESS OF RETURNED WORK AREA\n*\n* WE MUST HAVE **EXACTLY** 16 BYTES PRECEEDING THE NTNAMEWK AREA\n* THIS WAY WE CAN ENSURE DOUBLE WORD ALIGNMENT WHETHER IT EXISTS OR NOT\n*\n*                                      DOUBLE WORD ALIGNMENT\nSSMDBLWD EQU   *,8                 TARGET FOR $STCK (NEEDS A DBLWORD)\nECSAPTR  EQU   *+8,4               PTR TO ECSA (REUSING NTNAMEWK AREA)\nSSMUIDK  EQU   *+12,2              COUNT OF ALLOWED NAMES\nSSMCLSL  EQU   *+14,2               CLASS LIMIT MAX\n*\nNTNAMEWK DS    CL16                NAME VALUE FOR N/T PAIR LOOKUP\n*\nTOHEXFLD EQU   *,8                 USED TO CNVT HEX TO CHAR.\nSSMJMSK1 EQU   *,4\nSSMJMSK2 EQU   *+4,4\nSAVE2REG EQU   *+8,8               2 REG SAVE AREA\n*\nNTTOKNWK DS    CL16                TOKEN VALUE RETURNED FROM LOOKUP\n*\nSSMDBL2  DS    D                   WORK AREA FOR TIME ROUTINES\nSSMDBL3  DS    D                   WORK AREA FOR TIME ROUTINES\nSSMUMSK1 DS    CL4                 MASK FOR USERID LIMITS\nSSMUMSK2 DS    CL4                 MASK FOR USERID LIMITS\nSSMSID   DS    CL4                 SYSTEM ID - USED BY SMF FORMATING\nSSMSMFBA DS    F                   BUFFER ADDRESS - OR - STIMER TIME\nSSMJQAD  DS    F                   JQA DISP TO BERT (SAVED HERE)\nSSMTQWAT DS    F                   WAIT TIME IN SECONDS FOR STIMER RTN\n*\nSSMTIMEP DS    PL6                 TIME IN PACKED FORMAT FOR SMF\nSSMWKF01 DS    XL1                 FLAG BYTE\nSSMDUMY  EQU   B'10000000'         DUMMY ECSA IS BEING USED\nSSMDISA  EQU   B'01000000'         DISALLOW $SJ COMMAND\nSSMNOBRT EQU   B'00100000'         NO BERT FOUND FOR SELECTED JOB\nSSMBUSY  EQU   B'00010000'         TEST JQE IS ACTIVE (BUSY RUNNING)\nSSMNOTBR EQU   B'00001000'         NO BERT FOUND FOR TEST JOB\nSSMGENWT EQU   B'00000100'         GENERAL WAIT - NO BERT TO USE\nSSMBUSYL EQU   B'00000010'         TEST JQE IS ACTIVE ON *THIS* SYSTEM\n*\nSSMQBSY  DS    XL1\nSSMQJC   EQU   B'10000000'         CHECK ALL ACTIVE TO COUNT BY JOBCLS\nSSMQJN   EQU   B'01000000'         CHECK ALL ACTIVE AGAINST JOBNAME MSK\nSSMQCNT  EQU   B'00100000'         SCAN ALL ACTIVE FOR CNTLS\nSSMQWIT  EQU   B'00010000'         SCAN FOR /*WITH UNTIL MATCHED\nSSMQWITO EQU   B'00001000'         SCAN FOR /*WITHOUT UNTIL REJECTED\nSSMQUID  EQU   B'00000100'         SCAN AGAINST MASK FOR MATCHING UIDS\n*\nSSMJBNK  DS    XL2                 JOBNAME LIMIT COUNT\nSSMCLSK  DS    XL2                 CLASS LIMIT COUNT\nSSMTSTCL DS    XL1                 TEST CLASS TO COUNT FOR CURRENT LIMT\n         DS    XL7     POTENTIAL ADJUSTMENT AREA FOR DBLWORD ALIGNMENT\nSSM49LEN EQU   (((*-SSM49WRK+3)/4)*4)  LENGTH ROUNDED TO FULLWORDS\n*\n        $MODEND ,\n         END   ,                   END OF MODULE\n++SRC(STSCX19A) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).\nSTSCX19A TITLE 'User Exit 19-A: PROLOG (module comment block)'\n*********************************************************************\n*                                                                   *\n*                           HASP EXIT 19A                           *\n*                Initialization Statement Preprocessor              *\n*                                                                   *\n*  This exit processes each initialization statement before JES2    *\n*  does, and before any SCAN routines are run.                      *\n*                                                                   *\n*  Function -                                                       *\n*                                                                   *\n*    This exit will determine whether the temporary SSMT control    *\n*    block (accessed by name/token processing) has been previously  *\n*    allocated, and if not, allocate it.                            *\n*    SSM statements will later be validated, parsed and placed in   *\n*    the SSMT control block by $SCANTABs (see module STSSMTBS).     *\n*    Note that the temporary SSMT name/token entry is replaced by   *\n*    a permanent one (including the XCF group name in the name)     *\n*    in Exit 24.  This permanent name is used by the Shared Spool   *\n*    Mods exits to process the initialization parms.                *\n*                                                                   *\n*  Entry Point -                                                    *\n*                                                                   *\n*    EXIT19A                                                        *\n*                                                                   *\n*                                                                   *\n*  Attributes -                                                     *\n*                                                                   *\n*    AC=1  AMODE=31  RMODE=ANY                                      *\n*                                                                   *\n*                                                                   *\n*  Input Registers:                                                 *\n*                                                                   *\n*    R0     indication of how the input was supplied:               *\n*             0         input came from HASPARM parm file           *\n*             4         input came from the console                 *\n*             8         input came from a previous Exit 19          *\n*    R1     pointer to a 4-word list                                *\n*            +0         address of initialization statement         *\n*            +4         length of init statement                    *\n*            +8         address of init statement to insert         *\n*           +12         length of insertable init statement         *\n*    R2-10  N/A                                                     *\n*    R11    HCT address                                             *\n*    R12    N/A                                                     *\n*    R13    PCE address                                             *\n*    R14    RETURN address                                          *\n*    R15    ENTRY address                                           *\n*                                                                   *\n*  Output Registers:                                                *\n*                                                                   *\n*    R0-14  unchanged                                               *\n*    R15:   return code                                             *\n*           RC=00  = continue normally                              *\n*           RC=04  = ignore other exits                             *\n*           RC=08  = bypass this statement and go on                *\n*           RC=12  = terminate initialization processing            *\n*           RC=16  = same as RC=0, except do not substitute text    *\n*                    for system symbols in init statement           *\n*                                                                   *\n*  Register Usage (Internal):                                       *\n*                                                                   *\n*    R0-8   Work registers                                          *\n*    R9     Exit working storage                                    *\n*    R10    SSMT storage address                                    *\n*    R11    HCT address                                             *\n*    R12    Base register                                           *\n*    R13    PCE address                                             *\n*    R14-15 Work and Linkage registers                              *\n*                                                                   *\n*  Note:                                                            *\n*    This exit is intended for use with JES2 v1r7.                  *\n*                                                                   *\n*  Author:                                                          *\n*    Shannon Collinson, Atlanta, GA                                 *\n*                                                                   *\n* REVISION HISTORY:                                                 *\n*                                                                   *\n*   DATE   NAME         DESCRIPTION OF CHANGE                       *\n* -------- ------------ ----------------------------------------    *\n* 05/10/07 s. mccolley  disable the 'beaft_pos' option and change   *\n*                       comments to reflect change.                 *\n*                                                                   *\n*********************************************************************\n* *-*-*-----------------------------------------------------------*-*-*\n* *-                                                                 -*\n* *-     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE-*\n* *-  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY-*\n* *-  IS MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS   -*\n* *-  ASSUMED FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY  -*\n* *-  THE USE OF THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY  -*\n* *-  TO EVALUATE THE USEFULLNESS OF THE MATERIAL.                   -*\n* *-                                                                 -*\n* *-     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO     -*\n* *-  DATE, NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR        -*\n* *-  EXTENSIONS MADE IN THE FUTURE.                                 -*\n* *-                                                                 -*\n* *-*-*-----------------------------------------------------------*-*-*\n         TITLE 'USER EXIT19A Initialization statements  -- PROLOG'\n         COPY  $HASPGBL            COPY HASP GLOBALS\nSTSCX19A $MODULE ENVIRON=JES2,                                         X\n               SYSP=(GEN,GEN,DATA,NOGEN,NOGEN),                        X\n               RMODE=ANY,                                              X\n               IBMJES2=SAMPLE,                                         X\n               TITLE='HASP EXIT19A ',                                  X\n               SPLEVEL=NOCHECK,                                        X\n               ASCB,                                                   X\n               CVT,                                                    X\n               NTASM,         Name/Token constants                     X\n               PSA,           Program Save Area DSECT                  X\n               RPL,                                                    X\n               $CIRWORK,      Common init routine PCE work area DSECT  X\n               $CMB,          Console message buffer DSECT             X\n               $HASPEQU,      HASP equates                             X\n               $HCCT,         Common storage communication table       X\n               $HCT,          HASP control table                       X\n               $PCE,          Processor control element DSECT          X\n               $PSV,          Process save area DSECT                  X\n               $QSE,          Shared queue control element DSECT       X\n               $RDRWORK,      Reader services PCE work area DSECT      X\n               $TRE,          TCB recovery element DSECT               X\n               $TRX,          TCB recovery element extension DSECT     X\n               $TQE,          TIMER QUEUE ELEMENT                      X\n               $USERCBS,      User defined control blocks              X\n               $XIT           Exit information table DSECT\n         TITLE 'USER EXIT19A Initialization Statements - EXIT19A - SetuX\n               p SSM control blocks'\n***********************************************************************\n*                                                                     *\n*         EXIT19A - Installation Exit 19 routine                      *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nEXIT19A  $ENTRY BASE=(R12)          Exit routine entry point\n\n*********************************************************************\n*                                                                   *\n*        Save caller's registers and establish addressabilities.    *\n*                                                                   *\n*********************************************************************\n\n         USING HCT,R11              Address the HCT\n*        USING BASE,R12             Our base reg - see $ENTRY above\n         USING PCE,R13              Address the PCE\n         $SAVE NAME=EXIT19A\n         LR    R12,R15              Set base register\n*        LA    R11,0(0,R11)         HCT addr already set\n*        LA    R13,0(0,R13)         PCE addr already set\n\n*********************************************************************\n*                                                                   *\n*        Get working storage and create SSMT Name                   *\n*                                                                   *\n*********************************************************************\n\n         LA    R1,EXIT19WL         get workarea length\n         LA    R1,3(,R1)           round up to word boundary\n         SRL   R1,2                convert to number of words\n        $GETWORK WORDS=(R1),USE=EX19,WAIT=NO,LOC=ANY,                  X\n               ERRET=NOWS\n         LR    R9,R1               set workarea address\n         USING EXIT19W,R9          address & init our working storage\n         XC    EXIT19W(EXIT19WL),EXIT19W\n\n*********************************************************************\n*                                                                   *\n*        Check for an existing Token/Name pair                      *\n*                                                                   *\n*********************************************************************\n\n         XC    X19TKNAM(L'X19TKNAM),X19TKNAM\n         MVC   X19TKPRE,X19TKTMP   move header for token to token name\n*        get current ASID from PSA\n         USING PSA,0               PSA starts at location 0\n         MVC   X19TKASD,PSAAOLD    store ASCB address\n         DROP  R0\n*\n        $TOKENSR REQUEST=RETRIEVE, See if SSMT exists yet              X\n               NAME=X19TKNAM,                                          X\n               LEVEL=SYSTEM,                                           X\n               OKRET=RETURN0       Skip if so\n         EJECT\n**********************************************************************\n*                                                                    *\n*        Obtain and initialize the SSMT                              *\n*                                                                    *\n**********************************************************************\n         SPACE 1\n*\n         LA    R8,SSMTBLEN\n        $GETMAIN RU,               get SSMT control block storage      X\n               LV=(R8),                                                X\n               SP=$SPCSAF,                                             X\n               LOC=31,                                                 X\n               KEY=1,                                                  X\n               ZEROSTOR=YES\n         LTR   R15,R15             Getmain successful?\n         JNZ   NOSSMT               No, indicate error allocating stor\n         SPACE 1\n         LR    R10,R1              set $SSMTB addressability\n         USING SSMTB,R10           ...and address our SSMT\n         SPACE 1\n*\n*        initialize values\n*\n         LA    R8,SSMTBLEN         set SSMT length\n         ST    R8,SSMLEN             \"\n         MVC   SSMEYE,=CL4'SSMT'   set SSMT id\n         MVC   SSMVRM,=XL4'00010200'   set version id\n         MVC   SSMUPCEK,=XL4'00010000'  1 PCE  , NOT YET ALLOCATED\n*              SSMSMFNM            SMF number defaults to 0\n         MVI   SSMSMFOP,SSMSMF_NONE    set SMF operation (none)\n*              SSMALLWS            allow start commands defs to off (0)\n         MVI   SSMBEAFT,SSMBEAFT_PREMOD  bef/aft action defs to premod\n*              SSMBATIM            bef/aft time defaults to 0\n*              SSMUIDMX            default UID max to 0 (no limit)\n*              SSMUMASK            UID mask defaults to 0\n         MVC   SSMUMSKC,=CL8'********'   default UID mask chars\n*              SSMJBNMX            default Jobname max to 0 (no limit)\n*              SSMJMASK            Jobname mask default to 0\n         MVC   SSMJMSKC,=CL8'********'   default Jobname mask chars\n*              SSMCLSOP            class feature defaults to off (0)\n*\n*        load class limit table with defaults\n*\n         LA    R8,SSMCLSLM         R8 = start of class-lim table\n         LA    R7,SSMCLSNO         R7 = number of class-lim entries\n         L     R6,$F4096           R6 = default class limit (4096)\nLOADCLS  EQU   *\n         STH   R6,0(0,R8)          store default limit in entry\n         LA    R8,L'SSMCLSEN(R8)   bump to next entry\n         BCT   R7,LOADCLS          decrement counter and loop\n*\n*        initialize and create token itself\n*\n         XC    X19TOKEN(X19TKLEN),X19TOKEN    clear token\n         MVC   X19TKID,SSMEYE      stick SSMT in token as well\n         ST    R10,X19TKADR        save $SSMTB address\n         SPACE 1\n        $TOKENSR REQUEST=CREATE,   Set $SSMTB address and eyecatcher inX\n               NAME=X19TKNAM,       NAME/TOKEN pair                    X\n               LEVEL=SYSTEM,                                           X\n               PERSIST=YES,         keep around even after JES2 terms  X\n               VALUE=X19TOKEN\n         SPACE 1\n*\n* now alter the name for local jes2 main processing only - level=task!\n         MVC   X19TKNAM(16),=C'SSM_LOCAL_TOKEN1'\n*\n*  Now we will create a name/token pair at the task level only - it is\n*  available only to JES2 MAINTASK routines, but it can be specified\n*  via a fixed name, not one that needs to be built.\n*\n*\n        $TOKENSR REQUEST=CREATE,   REASSOCIATE TOKEN WITH PERMANENT    X\n               NAME=X19TKNAM,         NAME                             X\n               LEVEL=TASK,           TASK LEVEL ONLY !                 X\n               PERSIST=NO,             it goes away with this jes2     X\n               VALUE=X19TOKEN\n*\n         J     RETURN0             Made it through successfully!!\n         EJECT\n**********************************************************************\n*                                                                    *\n*        Set messages and return appropriately.                      *\n*                                                                    *\n**********************************************************************\n         SPACE 1\nNOWS     EQU   *\n         WTO   '$HASPX19A-E: UNABLE TO GET EXIT 19 WORKING STORAGE'\n         J     RETURN0\n         SPACE 1\nNOSSMT   EQU   *\n         WTO   '$HASPX19A-E: COULD NOT ALLOCATE SSMT STORAGE'\n         J     RETURN0\n         SPACE 1\n**********************************************************************\n*                                                                    *\n*        Set return codes (0 = continue, 12 = stop initialization)   *\n*                                                                    *\n**********************************************************************\n         SPACE 1\nRETURNC  EQU   *\n         LA    R15,12              Indicate error return\n         J     RETURN              Go return to JES2\n         SPACE 1\nRETURN0  EQU   *\n         SLR   R15,R15             Indicate good return\n         SPACE 1\nRETURN   EQU   *\n         LR    R2,R15              Save return code\n        $RETWORK (R9)              Return workarea\n         LR    R15,R2              Set return code\n        $RETURN TRACE=NO,RC=(R15)  End of EXIT19A initialization\n         EJECT\n         TITLE 'HASP EXIT19A initialization -- Epilog ($MODEND)'\n\n         LTORG ,\n\nX19TKTMP DC    C'SSMTEMP-'         Start of temporary token name\n\n        $MODEND ,\n*\nEXIT19W  DSECT ,                   EXIT19 workarea\nX19WKID  DS    CL4                 work area id\n         DS    CL4                 for alignment\n*\nX19TKNAM DS    CL16                SSMT Token name\n         ORG   X19TKNAM\nX19TKPRE DS    CL8                 Prefix for token name\nX19TKASD DS    F                   Current ASCB address\nX19TKPAD DS    CL4                 padding for 16-byte SYSTEM token\n*\nX19TOKEN DS    2D                  proper alignment\n         ORG   X19TOKEN\nX19TKADR DS    AL4                 address of $SSMTB--start with addr.\nX19TKID  DS    CL4                 SSMT Token itself--then the id\n         DS    AL4                 open\n         DS    AL4                 open\nX19TKLEN EQU   *-X19TOKEN          token length\n*\nEXIT19WL EQU   *-EXIT19W           EXIT19 workarea length\n*\n         END   ,                   End of STSCX19A\n++SRC(STSCX24A) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).\nSTSCX24A TITLE 'User Exit 24-A: PROLOG (module comment block)'\n*********************************************************************\n*                                                                   *\n*                           HASP EXIT 24A                           *\n*                        Post-Initialization                        *\n*                                                                   *\n*  This exit is called after all control blocks have been built but *\n*  just before initialization ends.                                 *\n*                                                                   *\n*  Function -                                                       *\n*                                                                   *\n*    This exit will replace the temporary SSMT name/token pair      *\n*    \"name\" (\"SSMTEMP-\"+JES2 ascb) created by exit STSC019A with    *\n*    the permanent name used by other Shared Spool Mods exits       *\n*    (\"SSM\"+JES2 XCF group name).                                   *\n*    This exit will also validate the use of two SSM-table fields:  *\n*    if field SSMBEAFT is not = \"D\" (delay) and SSMBATIM is         *\n*    non-0, a message will be issued indicating that the SSMBATIM   *\n*    will be ignored.                                               *\n*                                                                   *\n*  Entry Point -                                                    *\n*                                                                   *\n*    EXIT24A                                                        *\n*                                                                   *\n*                                                                   *\n*  Attributes -                                                     *\n*                                                                   *\n*    AC=1  AMODE=31  RMODE=ANY                                      *\n*                                                                   *\n*                                                                   *\n*  Input Registers:                                                 *\n*                                                                   *\n*    R0     N/A                                                     *\n*    R1     pointer to a parm list mapped by $XPL but unused here   *\n*    R2-10  N/A                                                     *\n*    R11    HCT address                                             *\n*    R12    N/A                                                     *\n*    R13    PCE address                                             *\n*    R14    RETURN address                                          *\n*    R15    ENTRY address                                           *\n*                                                                   *\n*  Output Registers:                                                *\n*                                                                   *\n*    R0-14  unchanged                                               *\n*    R15:   return code                                             *\n*           RC=00  = continue normally                              *\n*           RC=04  = ignore other exits                             *\n*           RC=08  = terminate initialization processing            *\n*                                                                   *\n*  Register Usage (Internal):                                       *\n*                                                                   *\n*    R0-8   Work registers                                          *\n*    R9     Exit working storage                                    *\n*    R10    SSMT storage address                                    *\n*    R11    HCT address                                             *\n*    R12    Base register                                           *\n*    R13    PCE address                                             *\n*    R14-15 Work and Linkage registers                              *\n*                                                                   *\n*  Note:                                                            *\n*    This exit is intended for use with JES2 v1r7.                  *\n*                                                                   *\n*  Author:                                                          *\n*    Shannon Collinson, Atlanta, GA                                 *\n*********************************************************************\n* *-*-*-----------------------------------------------------------*-*-*\n* *-                                                                 -*\n* *-     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE-*\n* *-  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY-*\n* *-  IS MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS   -*\n* *-  ASSUMED FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY  -*\n* *-  THE USE OF THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY  -*\n* *-  TO EVALUATE THE USEFULLNESS OF THE MATERIAL.                   -*\n* *-                                                                 -*\n* *-     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO     -*\n* *-  DATE, NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR        -*\n* *-  EXTENSIONS MADE IN THE FUTURE.                                 -*\n* *-                                                                 -*\n* *-*-*-----------------------------------------------------------*-*-*\n         TITLE 'USER EXIT24A Initialization statements  -- PROLOG'\n         COPY  $HASPGBL            COPY HASP GLOBALS\nSTSCX24A $MODULE ENVIRON=JES2,                                         X\n               SYSP=(GEN,GEN,DATA,NOGEN,NOGEN),                        X\n               RMODE=ANY,                                              X\n               IBMJES2=SAMPLE,                                         X\n               TITLE='HASP EXIT24A ',                                  X\n               SPLEVEL=NOCHECK,                                        X\n               NTASM,         Name/Token constants                     X\n               PSA,           Program Save Area DSECT                  X\n               $CIRWORK,      Common init routine PCE work area DSECT  X\n               $HASPEQU,      HASP equates                             X\n               $HCCT,         Common storage communication table       X\n               $HCT,          HASP control table                       X\n               $PCE,          Processor control element DSECT          X\n               $PSV,          Process save area DSECT                  X\n               $RDRWORK,      Reader services PCE work area DSECT      X\n               $TQE,          TIMER QUEUE ELEMENT                      X\n               $USERCBS,      User defined control blocks              X\n               $XIT           Exit information table DSECT\n         TITLE 'USER EXIT24A Post-Initialization - EXIT24A - Finalize SX\n               SM control block'\n***********************************************************************\n*                                                                     *\n*         EXIT24A - Installation Exit 24 routine                      *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nEXIT24A  $ENTRY BASE=(R12)          Exit routine entry point\n\n*********************************************************************\n*                                                                   *\n*        Save caller's registers and establish addressabilities.    *\n*                                                                   *\n*********************************************************************\n\n         USING HCT,R11              Address the HCT\n*        USING BASE,R12             Our base reg - see $ENTRY above\n         USING PCE,R13              Address the PCE\n         $SAVE NAME=EXIT24A\n         LR    R12,R15              Set base register\n*        LA    R11,0(0,R11)         HCT addr already set\n*        LA    R13,0(0,R13)         PCE addr already set\n\n*********************************************************************\n*                                                                   *\n*        Get working storage and create SSMT Name                   *\n*                                                                   *\n*********************************************************************\n\n         LA    R1,EXIT24WL         get workarea length\n         LA    R1,3(,R1)           round up to word boundary\n         SRL   R1,2                convert to number of words\n        $GETWORK WORDS=(R1),USE=EX24,WAIT=NO,LOC=ANY,                  X\n               ERRET=NOWS\n         LR    R9,R1               set workarea address\n         USING EXIT24W,R9\n         XC    EXIT24W(EXIT24WL),EXIT24W\n\n*********************************************************************\n*                                                                   *\n*        Check for an existing permanent Token/Name pair            *\n*          (possible if JES2 restart)                               *\n*                                                                   *\n*********************************************************************\n\n         MVC   X24PRMNM(3),=CL3'SSM'    stick perm prefix in name\n*        get XCF group name from HCCT\n         L     R3,$HCCT              load HCCT location\n         USING HCCT,R3                 ...and address it\n         MVC   X24PRMNM+3(8),CCTGPNM    move in XCF group name\n         DROP  R3\n*\n        $TOKENSR REQUEST=RETRIEVE, See if SSMT exists yet              X\n               NAME=X24PRMNM,                                          X\n               VALUE=X24TOKEN,                                         X\n               LEVEL=SYSTEM,                                           X\n               ERRET=TKNSWTCH      If not, switch token names immed.\n         SPACE\n**********************************************************************\n*                                                                    *\n*        Free up old SSMT and delete the token/name pair             *\n*                                                                    *\n**********************************************************************\n         L    R1,X24TKADR          load address of old SSMT for length\n         USING SSMTB,R1            address the old SSMT\n         L    R2,SSMLEN            save length\n        $FREMAIN RU,               free SSMT control block storage     X\n               A=(R1),                                                 X\n               LV=(R2),                                                X\n               SP=$SPCSAF,                                             X\n               KEY=1\n         LTR   R15,R15             freemain successful?\n         JZ    SKIPMSG                yep, skip saying unable to free\n         WTO   '$HASPX24A-W: UNABLE TO FREE OLD SSMT STORAGE'\nSKIPMSG  EQU   *\n         DROP R1                   drop addressability\n*\n        $TOKENSR REQUEST=DELETE,   Kill old permanent N/T pair         X\n               NAME=X24PRMNM,                                          X\n               LEVEL=SYSTEM\n         EJECT\n**********************************************************************\n*                                                                    *\n*        Retrieve temporary token and switch to permanent name       *\n*                                                                    *\n**********************************************************************\nTKNSWTCH EQU   *\n*\n         MVC   X24TMPNM(8),=CL8'SSMTEMP-'    stick temp id in name\n*        get current ASID from PSA\n         USING PSA,0               PSA starts at location 0\n         MVC   X24TMPNM+8(4),PSAAOLD  store ASCB address in token name\n         DROP  R0\n*\n        $TOKENSR REQUEST=RETRIEVE, Get SSMT token                      X\n               NAME=X24TMPNM,         associated with temporary name   X\n               VALUE=X24TOKEN,        and save info                    X\n               LEVEL=SYSTEM,                                           X\n               ERRET=BADSSMT       if not found, bad SSM Token\n*\n         L    R10,X24TKADR         load address of SSMT\n         USING SSMTB,R10           ...and get addressability\n*\n         CLC   SSMEYE,=CL4'SSMT'   eyecatcher correct?\n         JNE   NOTSSMT                no, not SSMT control block\n         CLC   SSMVRM,=XL4'00010200'  version correct?\n         JNE   WRNGVRSN               no, bad version\n*\n        $TOKENSR REQUEST=CREATE,   Reassociate token with permanent    X\n               NAME=X24PRMNM,         name                             X\n               LEVEL=SYSTEM,                                           X\n               PERSIST=YES,         keep around even after JES2 terms  X\n               VALUE=X24TOKEN\n*\n*\n*\n        $TOKENSR REQUEST=DELETE,   Kill temporary N/T pair             X\n               NAME=X24TMPNM,                                          X\n               LEVEL=SYSTEM\n         EJECT\n**********************************************************************\n*                                                                    *\n*        Validate SSMBEAFT/SSMBATIM settings                         *\n*        If BEAFT^=DELAY, then any BATIM will be ignored             *\n*                                                                    *\n**********************************************************************\n         CLC  SSMBEAFT,SSMBEAFT_DELAY   set to delay?\n         JE   RETURN0              yes, no more validation needed\n*\n         LHI  R2,0\n         CH   R2,SSMBATIM          if time = 0\n         JZ   RETURN0                 hop out\n*                                  else, pop out a warning msg first\n         WTO   '$HASPX24A-W: SINCE BEAFTER NOT DELAY, BATIME IGNORED'\n         J    RETURN0\n*\n         EJECT\n**********************************************************************\n*                                                                    *\n*        Set messages and return appropriately.                      *\n*                                                                    *\n**********************************************************************\n         SPACE 1\nNOWS     EQU   *\n         WTO   '$HASPX24A-E: UNABLE TO GET EXIT 24 WORKING STORAGE'\n         J     RETURN0\n         SPACE 1\nBADSSMT  EQU   *\n         WTO   '$HASPX24A-E: UNABLE TO FIND SSMT FROM NAME/TOKEN PAIR!'\n         J     RETURN0\n         SPACE 1\nNOTSSMT  EQU   *\n         WTO   '$HASPX24A-E: NAME/TOKEN RETURNED NON-SSMT CONTROL BLOCKX\n               !'\n         J     RETURN0\n         SPACE 1\nWRNGVRSN EQU   *\n         WTO   '$HASPX24A-E: NAME/TOKEN RETURNED WRONG SSMT VERSION!'\n         J     RETURN0\n         SPACE 1\n**********************************************************************\n*                                                                    *\n*        Set return codes (0 = continue, 8 = end initialization)     *\n*                                                                    *\n**********************************************************************\n         SPACE 1\nRETURN8  EQU   *\n         LA    R15,8               Indicate error return\n         J     RETURN              Go return to JES2\n         SPACE 1\nRETURN0  EQU   *\n         SLR   R15,R15             Indicate good return\n         SPACE 1\n**********************************************************************\n*                                                                    *\n*        Return to JES2                                              *\n*                                                                    *\n**********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    R2,R15              Save return code\n        $RETWORK (R9)              Return workarea\n         LR    R15,R2              Set return code\n        $RETURN TRACE=NO,RC=(R15)  End of EXIT24A initialization\n         EJECT\n         TITLE 'HASP EXIT24A initialization -- Epilog ($MODEND)'\n\n         LTORG ,\n\nX24TKTMP DC    C'SSMTEMP-'         Start of temporary token name\n\n        $MODEND ,\n*\nEXIT24W  DSECT ,                   EXIT24 workarea\nX24WKID  DS    CL4                 work area id\n         DS    CL4                 for alignment\n*\nX24PRMNM DS    CL16                SSMT permanent token name\nX24TMPNM DS    CL16                SSMT temporary token name\n*\nX24TOKEN DS    2D                  proper alignment\n         ORG   X24TOKEN\nX24TKADR DS    AL4                 address of $SSMTB-- is first\nX24TKID  DS    CL4                 SSMT Token itself--then verifiy id\n         DS    AL4                 open\n         DS    AL4                 open\nX24TKLEN EQU   *-X24TOKEN          token length\n*\nEXIT24WL EQU   *-EXIT24W           EXIT24 workarea length\n*\n         END   ,                   End of STSCX24A\n++SRC(STSSMTBS) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).\nSTSSMTBS TITLE 'SSM Tables: PROLOG (module comment block)'\n*********************************************************************\n*                                                                   *\n*                              STSSMTBS                             *\n*                SSM Control Statement validation tables            *\n*                                                                   *\n*  This module contains the user scan tables that process the SSM   *\n*  control statements.  It also contains any pre- and post-scan     *\n*  exits called by those tables.                                    *\n*                                                                   *\n*  Function -                                                       *\n*                                                                   *\n*    Process all Shared Spool Mods initialization, set and display  *\n*    commands.                                                      *\n*                                                                   *\n*  Entry Point -                                                    *\n*                                                                   *\n*    STSSMTBS                                                       *\n*                                                                   *\n*                                                                   *\n*  Attributes -                                                     *\n*                                                                   *\n*    AC=1  AMODE=31  RMODE=ANY                                      *\n*                                                                   *\n*                                                                   *\n*  Input Registers:                                                 *\n*                                                                   *\n*    N/A for the most part--check pre/post scan routines            *\n*                                                                   *\n*  Output Registers:                                                *\n*                                                                   *\n*    N/A for the most part--check pre/post scan routines            *\n*                                                                   *\n*  Register Usage conventions--may differ for specific routines:    *\n*                                                                   *\n*    R0-8   Work registers                                          *\n*    R9     SSMT address                                            *\n*    R10    SCWA storage address                                    *\n*    R11    HCT address                                             *\n*    R12    Base register if used                                   *\n*    R13    PCE address                                             *\n*    R14-15 Work and Linkage registers                              *\n*                                                                   *\n*  Note:                                                            *\n*    This exit is intended for use with JES2 v1r7.                  *\n*                                                                   *\n*  Author:                                                          *\n*    Shannon Collinson, Atlanta, GA                                 *\n*********************************************************************\n* *-*-*-----------------------------------------------------------*-*-*\n* *-                                                                 -*\n* *-     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE-*\n* *-  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY-*\n* *-  IS MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS   -*\n* *-  ASSUMED FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY  -*\n* *-  THE USE OF THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY  -*\n* *-  TO EVALUATE THE USEFULLNESS OF THE MATERIAL.                   -*\n* *-                                                                 -*\n* *-     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO     -*\n* *-  DATE, NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR        -*\n* *-  EXTENSIONS MADE IN THE FUTURE.                                 -*\n* *-                                                                 -*\n* *-*-*-----------------------------------------------------------*-*-*\n         TITLE 'SSM Tables -- PROLOG'\n         COPY  $HASPGBL            COPY HASP GLOBALS\nSTSSMTBS $MODULE ENVIRON=JES2,                                         X\n               SYSP=(GEN,GEN,DATA,NOGEN,NOGEN),                        X\n               RMODE=ANY,                                              X\n               TITLE='SUNTRUST SSM TABLES MODULE',                     X\n               SPLEVEL=NOCHECK,                                        X\n               ASCB,          Address Space Control Block DSECT        X\n               NTASM,         Name/Token constants                     X\n               PSA,           Program Save Area DSECT                  X\n               RPL,                                                    X\n               $CIRWORK,      Common init routine PCE work area DSECT  X\n               $CMB,          Console message buffer DSECT             X\n               $HASPEQU,      HASP equates                             X\n               $HCCT,         Common storage communication table       X\n               $HCT,          HASP control table                       X\n               $MCT,          HASP MCT table                           X\n               $PCE,          Processor control element DSECT          X\n               $PSV,          Process save area DSECT                  X\n               $QSE,          Shared queue control element DSECT       X\n               $RDRWORK,      Reader services PCE work area DSECT      X\n               $SCANTAB,      Scan table DSECT                         X\n               $SCANWA,       Scan table working storage DSECT         X\n               $TQE,          Timer queuue element                     X\n               $USERCBS       User defined control blocks\n         TITLE 'SSM Tables - Init statement verification - STSSMTBS'\n***********************************************************************\n*                                                                     *\n*   MCTMPSTP is the $SCAN table that controls scanning the main       *\n*   parameter statements (initialization and command).  We use this   *\n*   to add in our SSM control statements.                             *\n*                                                                     *\n***********************************************************************\nSSMSTAB  $SCANTAB  TABLE=(DYNAMIC,MCTMPSTP)\n         $SCANTAB NAME=SSM,        Keyword SSM                         X\n               CB=PRESCAN,                                             X\n               PRESCAN=(SSMPRE,HCT),   uses SSM pre-scan routine       X\n               CONV=SUBSCAN,                                           X\n               SCANTAB=(SSMPRMS,ADDR)\n         $SCANTAB  TABLE=END       END of SSM SCAN table\n         SPACE 3\nSSMPRMS  $PAIR  ,\n         $SCANTAB NAME=SMFNUM,     SSM SMF number                      X\n               CB=PARENT,                                              X\n               FILTER=NO,          no filtering                        X\n               DSECT=SSMTB,                                            X\n               FIELD=SSMSMFNM,                                         X\n               CONV=NUM,           Number between 0 and 255            X\n               RANGE=(0,255)\n         $SCANTAB NAME=SMFOPT,     SSM SMF Operation                   X\n               CB=PARENT,                                              X\n               FILTER=NO,          no filtering                        X\n               DSECT=SSMTB,                                            X\n               FIELD=SSMSMFOP,                                         X\n               CONV=FLAG,          (A)ll, (I)nput, (X)action, ( )none  X\n               VALUE=SYSLIST,                                          X\n               ACTION,SSMSMF_ACTION,SSMSMF_ACTION,                     X\n               INPUT,SSMSMF_INPUT,SSMSMF_INPUT,                        X\n               ALL,SSMSMF_ALL,SSMSMF_ALL,                              X\n               NONE,SSMSMF_NONE,SSMSMF_NONE\n         $SCANTAB NAME=BEAFTER,    SSM Before/After processing         X\n               CB=PARENT,                                              X\n               FILTER=NO,          no filtering                        X\n               DSECT=SSMTB,                                            X\n               FIELD=SSMBEAFT,                                         X\n               CONV=FLAG,          (P)ositive, (D)elay, (N)omod        X\n               VALUE=SYSLIST,                                          X\n               DELAY,SSMBEAFT_DELAY,SSMBEAFT_DELAY,                    X\n               PREMOD,SSMBEAFT_PREMOD,SSMBEAFT_PREMOD\n         $SCANTAB NAME=BATIME,     SSM Before/After Delay time         X\n               CB=PARENT,                                              X\n               PSTSCAN=(SSMPST,SET,HCT),  post-scan re-drives getq     X\n               FILTER=NO,          no filtering                        X\n               DSECT=SSMTB,                                            X\n               FIELD=SSMBATIM,                                         X\n               CONV=NUM,           Number between 0 and 4096           X\n               RANGE=(0,4096)\n         $SCANTAB NAME=UIDMAX,     SSM Userid Max                      X\n               CB=PARENT,                                              X\n               PSTSCAN=(SSMPST,SET,HCT),  post-scan re-drives getq     X\n               FILTER=NO,          no filtering                        X\n               DSECT=SSMTB,                                            X\n               FIELD=SSMUIDMX,                                         X\n               CONV=NUM,           Number between 0 and 4096           X\n               RANGE=(0,4096)\n         $SCANTAB NAME=UIDMASK,    SSM Userid Mask                     X\n               CB=PARENT,                                              X\n               PSTSCAN=(SSMPST,SET,HCT),   and post-scan routine!      X\n               FILTER=NO,          no filtering                        X\n               DSECT=SSMTB,                                            X\n               FIELD=SSMUMSKC,                                         X\n               CONV=(CHAR,U,*),    mask of characters U and * only     X\n               RANGE=(1,L'SSMUMSKC)    length 1-8\n         $SCANTAB NAME=JBNMAX,     SSM Jobname Max                     X\n               CB=PARENT,                                              X\n               PSTSCAN=(SSMPST,SET,HCT),  post-scan re-drives getq     X\n               FILTER=NO,          no filtering                        X\n               DSECT=SSMTB,                                            X\n               FIELD=SSMJBNMX,                                         X\n               CONV=NUM,           Number between 0 and 4096           X\n               RANGE=(0,4096)\n         $SCANTAB NAME=JBNMASK,    SSM Jobname Mask                    X\n               CB=PARENT,                                              X\n               PSTSCAN=(SSMPST,SET,HCT),   and post-scan routine!      X\n               FILTER=NO,          no filtering                        X\n               DSECT=SSMTB,                                            X\n               FIELD=SSMJMSKC,                                         X\n               CONV=(CHAR,U,*),    mask of characters U and * only     X\n               RANGE=(1,L'SSMJMSKC)    length 1-8\n         $SCANTAB NAME=ALLOWS,     SSM Allow Start ($S) commands       X\n               CB=PARENT,                                              X\n               FILTER=NO,          no filtering                        X\n               DSECT=SSMTB,                                            X\n               FIELD=SSMALLWS,                                         X\n               CONV=FLAG,          on = FF, off = 00                   X\n               VALUE=SYSLIST,                                          X\n               ON,SSMALLWS_ON,SSMALLWS_ON,                             X\n               OFF,SSMALLWS_OFF,SSMALLWS_OFF\n         $SCANTAB NAME=CLASSOPT,   SSM Class Operations                X\n               CB=PARENT,                                              X\n               PSTSCAN=(SSMPST,SET,HCT),  post-scan re-drives getq     X\n               FILTER=NO,          no filtering                        X\n               DSECT=SSMTB,                                            X\n               FIELD=SSMCLSOP,                                         X\n               CONV=FLAG,          on = FF, off = 00                   X\n               VALUE=SYSLIST,                                          X\n               ON,SSMCLSOP_ON,SSMCLSOP_ON,                             X\n               OFF,SSMCLSOP_OFF,SSMCLSOP_OFF\n         $SCANTAB NAME=CLASSLIM,   SSM Class Limits table              X\n               CB=PARENT,                                              X\n               PSTSCAN=(SSMPST,SET,HCT),  post-scan re-drives getq     X\n               FILTER=NO,          no filtering                        X\n               CBIND=(SSMCLSLM,SSMTB,LA),    load start of class tbl   X\n               SUBSCRP=(A,9,L'SSMCLSLM),     A-Z+0-9, len. SSMCLSLM    X\n               DSECT=SSMTB,                                            X\n               FIELD=SSMCLSEN,                                         X\n               CONV=NUM,           table of numbers b/w 0 and 4096     X\n               RANGE=(0,4096)\n         SPACE 3\n         $SCANTAB  TABLE=END       END of SSM pair table\n         EJECT ,\n*\n         TITLE 'STSSMTBS Module -- SSMPRE -- PreScan for SSM commands'\n***********************************************************************\n*                                                                     *\n*        SSMPRE   - Prescan to locate the SSM Control Block           *\n*                   via the correct Token/Name pair                   *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        Issues the appropriate $TOKENSR call to locate               *\n*        the SSMT control block and set its address as                *\n*        the control block address.                                   *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Via PRESCAN=(SSMPRE) on $SCANTAB;                            *\n*        $CALL'ed from $SCAN facility for each SSM entry.             *\n*                                                                     *\n*   REGISTER USAGE (ENTRY/EXIT):                                      *\n*                                                                     *\n*    REG       VALUE ON ENTRY             VALUE ON EXIT               *\n*                                                                     *\n*    R0        N/A                        Unchanged                   *\n*    R1        SCWA address               Error text if RC=4          *\n*    R2-R10    N/A                        Unchanged                   *\n*    R11       HCT address                Unchanged                   *\n*    R12       n/a                        Unchanged                   *\n*    R13       PCE address                Unchanged                   *\n*    R14       Return address             Unchanged                   *\n*    R15       Entry address              Return code                 *\n*                                                                     *\n*   RETURN CODES (R15 ON EXIT):                                       *\n*                                                                     *\n*        0  -  Processing successful (no errors)                      *\n*        4  -  Processing failed, terminate scan & restore            *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING SSMPRE,R12          Local addressability\n         USING SCWA,R10            SCWA addressability\n         SPACE 1\nSSMPRE   $SAVE ,                   Save registers\n         LR    R12,R15             Set local base\n         LR    R10,R1              Get SCWA address\n         XC    SCWAWK16(L'SCWAWK16),SCWAWK16   init to 00s\n*\n         CLI   SCWACALR,$SCIRPL    Is this from init deck?\n         JE    SSMPRTMT             Yes, load the temporary SSM CB\n         CLI   SCWACALR,$SCIRPLC   Is this from console mode?\n         JE    SSMPRTMT             Yes, load the temporary SSM CB\n*\n*        Determine the permanent SSM control block name:\n*          'SSM' + XCF group name\n*\n         MVC   SCWAWK16(3),=CL3'SSM'    stick perm prefix in name\n*        get XCF group name from HCCT\n         L     R3,$HCCT               load HCCT location\n         USING HCCT,R3                  ...and address it\n         MVC   SCWAWK16+3(8),CCTGPNM  move in XCF group name\n         DROP  R3\n         J     SSMPRCN1\n*\nSSMPRTMT EQU   *\n*\n*        Determine the temporary SSM control block name\n*          'SSMTEMP-' + JES2 ASCB address\n*\n         MVC   SCWAWK16(8),=CL8'SSMTEMP-'  stick temp id in name\n*        get current ASID from PSA\n         USING PSA,0               PSA starts at location 0\n         MVC   SCWAWK16+8(4),PSAAOLD  store ASCB address in token name\n         DROP  R0\n*\nSSMPRCN1 EQU   *\n        $TOKENSR REQUEST=RETRIEVE, Get SSMT                            X\n               NAME=SCWAWK16,      use name built in SCWAWK16          X\n               LEVEL=SYSTEM,                                           X\n               ERRET=SSMPRMS1     if not found, bad SSM Token\n*        if found, token should be returned in R0/R1/AR0/AR1\n*        R0 should be SSMT, R1 should be address of SSMT\n         LR    R9,R0               grab SSMT pointer\n         USING SSMTB,R9               ...and address it\n         CLC   SSMEYE,=CL4'SSMT'   eyecatcher correct?\n         JNE   SSMPRMS2               no, bad SSMT\n         CLC   SSMVRM,=XL4'00010200'  version correct?\n         JNE   SSMPRMS2               no, bad SSMT\n*        otherwise, we found our control block!\n         ST    R9,SCWACBAD         save the control block address\n         J     SSMPRRC0            and exit successfully\n         SPACE 1\nSSMPRMS1 EQU   *\n         LA    R1,SSMPRM1          Point to bad token message\n         J     SSMPRRC4            Return error message\n         SPACE 1\nSSMPRMS2 EQU   *\n         LA    R1,SSMPRM2          Point to error message\n         SPACE 1\nSSMPRRC4 EQU   *\n         $STORE (R1)               Store R1 for $SCAN\n         LHI   R15,4               Set RC=4 (error)\n         J     SSMPRRTN            Return\n         SPACE 1\nSSMPRRC0 EQU   *\n         SLR   R15,R15             Set RC=0 (continue)\n         SPACE 1\nSSMPRRTN EQU   *\n         $RETURN RC=(R15)          Return to caller\n         SPACE 1\n         DROP  R9,R10,R12          Drop SSMT, SCWA, local\n         SPACE 1\n         LTORG ,\n         EJECT ,\n*------------------------------------------------------------*\n*        $SCAN error text - standard format is               *\n*          2-byte reason code                                *\n*          1 byte text length                                *\n*          text                                              *\n*------------------------------------------------------------*\n         SPACE 1\nSSMPRM1  DC    Y(1900)\n         DC    AL1(L'SSMPRM1T)\nSSMPRM1T DC    C'SSMPRE: SSM TOKEN NOT FOUND'\n         SPACE 1\nSSMPRM2  DC    Y(1901)\n         DC    AL1(L'SSMPRM2T)\nSSMPRM2T DC    C'SSMPRE: INVALID SSM CONTROL BLOCK'\n         EJECT ,\n         TITLE 'STSSMTBS Module -- SSMPST -- PostScan for SSM commands'\n***********************************************************************\n*                                                                     *\n*        SSMPST   - Postscan for any SSM post-scan processing.        *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        SSMxMASK keyword:  pad usermask with *s and convert          *\n*           mask to a bit representation.                             *\n*           Works for both SSMUMASK and SSMJMASK.                     *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Via PSTSCAN=(SSMPST) on $SCANTAB;                            *\n*        $CALL'ed from $SCAN facility for specific SSM entries.       *\n*                                                                     *\n*   REGISTER USAGE (ENTRY/EXIT):                                      *\n*                                                                     *\n*    REG       VALUE ON ENTRY             VALUE ON EXIT               *\n*                                                                     *\n*    R0        N/A                        Unchanged                   *\n*    R1        SCWA address               Error text if RC=4          *\n*    R2-R10    N/A                        Unchanged                   *\n*    R11       HCT address                Unchanged                   *\n*    R12       n/a                        Unchanged                   *\n*    R13       PCE address                Unchanged                   *\n*    R14       Return address             Unchanged                   *\n*    R15       Entry address              Return code                 *\n*                                                                     *\n*   RETURN CODES (R15 ON EXIT):                                       *\n*                                                                     *\n*        0  -  Processing successful (no errors)                      *\n*        4  -  Processing failed, terminate scan with message         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING SSMPST,R12          Local addressability\n         USING SCWA,R10            SCWA addressability\n         USING SSMTB,R9            SSMT addressability\n         SPACE 1\nSSMPST   $SAVE ,                   Save registers\n         LR    R12,R15             Set local base\n         LR    R10,R1              Get SCWA address\n         L     R9,SCWACBAD         Get SSMT address\n         L     R8,SCWAKPTR         Grab current keyword\n*\n         CLC   0(7,R8),=C'UIDMASK'   Is this a UMASK call?\n         JE    SSMPSUMS             Yes, process the UMASK\n         CLC   0(7,R8),=C'JBNMASK'   Is this a JMASK call?\n         JE    SSMPSJMS             Yes, process the JMASK\n         J     SSMPSRC0            Otherwise, get out\n*\nSSMPSUMS EQU   *                   process as UMASK\n         LA    R5,SSMUMSKC         R5 = usermask, saved by $SCANTAB\n         J     SSMPSMSK\n*\nSSMPSJMS EQU   *                   process as JMASK\n         LA    R5,SSMJMSKC         R5 = jobmask, saved by $SCANTAB\n*\nSSMPSMSK EQU   *                   SSMxMASK statement\n*\n*        Convert the SSM MASK characters to a bit string, where\n*          U = 1 and * = 0.  Also, pad out the MASK with *\n*\n*            R5 = address of the character mask (max 8 chars)\n*            R6 = bit representation of each character\n*            R7 = counter for loop through characters\n*\n         XR    R6,R6               clear out bit result\n         LA    R7,8                set loop limit (max 8 chars)\n*\nSSMPSLP1 EQU   *\n         SLL   R6,1                shift bits one to the left\n         CLI   0(R5),SSMMSK1       is this character a U?\n         JNE   SSMPSNTU              no, skip setting the mask\n         LA    R6,1(0,R6)          flag the character as a U\n         J     SSMPSDLP            go through the loop\n*\nSSMPSNTU EQU   *\n         MVI   0(R5),SSMMSK0       make sure a non-U is a *\n*\nSSMPSDLP EQU   *\n         LA    R5,1(R5)            move one character into mask\n         BCT   R7,SSMPSLP1         decrement counter & loop\n*\n*        Store bit-mask ('000000HL') in 2-byte SSMxMASK field:\n*          SSMxMHI ('0H') + SSMxMLO ('0L')\n*\n         LR    R7,R6               copy the mask for manipulation\n         SRL   R7,4                get rid of low bits in R7\n         CLC   0(7,R8),=C'UIDMASK' Is this a UMASK call?\n         JNE   SSMSVJMS              No, then save as JMASK\n*                                Save as UMASK\n         STC   R7,SSMUMHI          save off mask of first 4 characters\n         LA    R7,15(0,0)          load R7 with 0000000F\n         NR    R6,R7               wipe out all but low bits of mask\n         STC   R6,SSMUMLO          save off mask of last 4 characters\n         J     SSMPSRC0\n*\nSSMSVJMS EQU   *                 Save as JMASK\n         STC   R7,SSMJMHI          save off mask of first 4 characters\n         LA    R7,15(0,0)          load R7 with 0000000F\n         NR    R6,R7               wipe out all but low bits of mask\n         STC   R6,SSMJMLO          save off mask of last 4 characters\n         J     SSMPSRC0\n*\n         SPACE 1\nSSMPSMS1 EQU   *\n         LA    R1,SSMPSM1          Point to error message\n         SPACE 1\nSSMPSRC4 EQU   *\n         $STORE (R1)               Store R1 for $SCAN\n         LHI   R4,4                Set RC=4 (error)\n         J     SSMPSRTN            Return\n         SPACE 1\nSSMPSRC0 EQU   *\n         SLR   R4,R4               Set RC=0 (continue)\n         SPACE 1\nSSMPSRTN EQU   *\n         $POSTXEQ MASPOST=NO       always redrive job selection\n         $RETURN RC=(R4)           Return to caller\n         SPACE 1\n         DROP  R9,R10,R12          Drop SSMT, SCWA, local\n         SPACE 1\n         LTORG ,\n         EJECT ,\n*------------------------------------------------------------*\n*        $SCAN error text - standard format is               *\n*          2-byte reason code                                *\n*          1 byte text length                                *\n*          text                                              *\n*------------------------------------------------------------*\n         SPACE 1\nSSMPSM1  DC    Y(1902)\n         DC    AL1(L'SSMPSM1T)\nSSMPSM1T DC    C'SSMPST: SO FAR, NO POSTSCAN ERROR MESSAGES'\n         SPACE 1\n*\n         TITLE 'SSM Tables - EPILOG'\n         $MODEND ,\n         SPACE 2\n         END   ,                   End of STSSMTBS\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LSES500J": {"ttr": 3592, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00@\\x01\\x07$\\x0f\\x01\\x08\\x04/\\x12T\\x00 \\x00 \\x00\\x04\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2007-08-28T00:00:00", "modifydate": "2008-02-11T12:54:40", "lines": 32, "newlines": 32, "modlines": 4, "user": "T0SM0"}, "text": "//T0SM5YZJ JOB  (4030,37),'SHARED SPOOL MODS',CLASS=X,MSGCLASS=A,\n//  REGION=18M,\n//    NOTIFY=&SYSUID\n//*\n//S1       EXEC PGM=GIMSMP,REGION=18M,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=240\n//*\n//SMPCSI   DD DISP=SHR,DSN=SYSV.YOUR.CSI\n//SMPHOLD  DD DUMMY\n//SMPRPT   DD  SYSOUT=*\n//SMPOUT   DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//*\n//SMPPTFIN DD DISP=SHR,DSN=THE.SHARED.SPOOL.MODS.INSTALLPDS(LSES500)\n//SMPCNTL  DD *\n  SET BDY(GLOBAL) .\n  RECEIVE S(LSES500,LSES501,LSES502) .\n  SET BDY(TARGETA).\n  APPLY CHECK  S(LSES500,LSES501,LSES502) .\n/*EOF\n//*\n//*  AFTER A GOOD CHECK - RUN THE APPLY - REMEMBER YOU NEED A LARGE\n//*  REGION SIZE AND AN ASSEMBLER OPTION OF SIZE=MAX TO ASSEMBLE\n//*  SMPE - 1.1.(GLOBAL).(ENTER).3(UTILITY).SELECT ASMA90 THEN\n//*      MAKE SURE PARM HAS SIZE(MAX) INCLUDED.... YOU PROBABLY DON'T\n//*      NEED TO DO THIS, BUT I HAD TO AND IT WAS HARD TO FIND FROM\n//*      THE ODD ASSMEBLY ERRORS THAT GET REPORTED.\n//*\n//*    SET BDY(TARGETA).\n//*    APPLY S(LSES500,LSES501,LSES502) .\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LSES501": {"ttr": 3594, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x03\\x01\\x08\\x04/\\x01\\x08\\x04/\\x12V\\x007\\x004\\x00\\x00\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2008-02-11T00:00:00", "modifydate": "2008-02-11T12:56:03", "lines": 55, "newlines": 52, "modlines": 0, "user": "T0SM0"}, "text": "++USERMOD(LSES501)\n /* ***************************************************************\n    ** * THIS USERMOD PREREQS LSES500 AND FIXES ISSUES WITH    * **\n    ** * $DOGCAT WHERE THE FIRST RETURNED CAT ADDRESS MUST BE  * **\n    ** * SAVED AND EVENTUALLY PASSED BACK TO                   * **\n    ** *     $DOGCAT TYPE=RELEASE                              * **\n    ** * A REFRESH OF LLA, AND A REPEXIT FOR STSCX49A ARE      * **\n    ** * ALL THAT ARE REQUIRED FOR ACTIVATION.                 * **\n    ** *                                                       * **\n    ** *       *** DO NOT RENUMBER THIS MEMBER ***             * **\n    ** *                                                       * **\n    ** * ADJUST THE \"PRE\" ENTRIES BASED ON YOUR SHOPS          * **\n    ** * MAINTENANCE LEVEL.                                    * **\n    ** *                                                       * **\n    ***************************************************************\n* *%PDSDOC 00 FIX $DOGCAT BUFFER ACCUMULATION\n    */ .\n++VER(Z038) FMID(HJE7730)\n   PRE(UA25646,                                 /* FOR SRC HASPPRPU */\n       UA26384,UA27931,UA28280,UA28373,UA35806, /* FOR SRC HASPJQS  */\n       UA28501,UA29423,UA30129,UA31564,         /* FOR SRC HASPJQS  */\n       UA33070,UA33267,UA33691,UA33692,         /* FOR SRC HASPJQS  */\n       LSES500\n          ).\n++SRCUPD(STSCX49A) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD) .\n./ CHANGE NAME=STSCX49A\n* NEXT WE USED TO DOUBLE WORK ALIGN THE WORK AREA - NO MATTER WHAT THEY\n* GAVE US BACK - IT WAS NOT NECESSARY, AND SO THE BIT SHIFTING BY THREE\n* WAS COMMENTED OUT BELOW - ALSO IT IS NO LONGER NECESSARY TO SAVE THE\n* 'ORIGINAL' ADDRESS THEY GAVE US FOR THE $GETWORK.\n*\n*        LA    R3,7(R0,R3)         BUMP ADDR BY 7 (MAX FOR DBLWRD CHG)\n*        SRL   R3,3                SLIDE RIGHT THREE BITS OUT\n*        SLL   R3,3                REALIGN ( ON A DBLWORD )\n*        ST    R1,SSMWADDR         SAVE ORIGINAL ADDR FOR RETWORK\n* ON FIRST CALL TO DOGCAT SSMCATPT IS ZERO - FILL IT WITH FIRST CAT PTR\n* THE FIRST POINTER IS NEEDED TO RELEASE THE $CAT WHEN WE ARE DONE,\n*  - BUT ONLY IF WE DIDN'T RUN THROUGH ALL OF THE $CAT POINTERS!\n         CLC   SSMCATPT,$ZEROS\n         JNE   GETJQE             IF NOT ZEROS THEN JUST CONTINUE\n         ST    R9,SSMCATPT         - ELSE SAVE IT FOR LATER\n** * ------------------------------------------------------------- * **\n** * -- IN THIS SECTION A JOB IS REJECTED - WE HAVE TO FREE THE -- * **\n** * -- WORK AREA THE $DOGCAT GOT FOR US.                       -- * **\n** * ------------------------------------------------------------- * **\n         CLC   SSMCATPT,$ZEROS    IS THE POINTER ZERO ?\n         JE    DOSMFRJ            IF SO, THEN NOT RETURN OF THE CAT\n         L     R1,SSMCATPT        PUT POINTER IN R6 FOR DOGCAT CALL\n         $DOGCAT ACTION=RETURN,CAT=(R1)\nDOSMFRJ  EQU   *\n         XC    SSMCATPT,SSMCATPT   ALWAYS CLEAR CAT PTR (THIS IS THE\n*                                  'NO MORE CATS' ROUTINE) X049RC0\n*        L     R3,SSMWADDR         GET THE ORIGINAL ADDRESS GIVEN TO US\n*SSMWADDR DS   XL4                 ADDRESS OF RETURNED WORK AREA\nSSMCATPT DS    F                   FIRST $CAT ADDR FROM $DOGCAT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LSES502": {"ttr": 3596, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x004\\x01\\x08\\x04/\\x01\\x08\\x04/\\x12V\\x009\\x006\\x00\\x00\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2008-02-11T00:00:00", "modifydate": "2008-02-11T12:56:34", "lines": 57, "newlines": 54, "modlines": 0, "user": "T0SM0"}, "text": "++USERMOD(LSES502)\n /* ***************************************************************\n    ** * THIS USERMOD PREREQS LSES500 AND LSES501 AND FIXES    * **\n    ** * AN ISSUE WITH YEAR END DATES THAT REQUIRE THE YEAR TO * **\n    ** * BE BUMPED WHEN USING A /*HOLDTIL STATEMENT I.E.       * **\n    ** *  ON 12/31 IF A JOB IS SUBMITTED WITH A /*HOLDTIL TIME * **\n    ** *  THAT HAS LAREADY PASSED, THE JOB IS NOT HELD LIKE IT * **\n    ** *  IS SUPPOSED TO BE, INSTEAD IT IS ALLOWED TO RUN, BUT * **\n    ** *  ONLY ON THE LAST DAY OF THE YEAR.                    * **\n    ** *       *** DO NOT RENUMBER THIS MEMBER ***             * **\n    ** *                                                       * **\n    ** * ADJUST THE \"PRE\" ENTRIES BASED ON YOUR SHOPS          * **\n    ** * MAINTENANCE LEVEL.                                    * **\n    ** *                                                       * **\n    ***************************************************************\n* *%PDSDOC 00 FIX $DOGCAT BUFFER ACCUMULATION\n    */ .\n++VER(Z038) FMID(HJE7730)\n   PRE(UA25646,                                 /* FOR SRC HASPPRPU */\n       UA26384,UA27931,UA28280,UA28373,UA35806, /* FOR SRC HASPJQS  */\n       UA28501,UA29423,UA30129,UA31564,         /* FOR SRC HASPJQS  */\n       UA33070,UA33267,UA33691,UA33692,         /* FOR SRC HASPJQS  */\n       LSES500,LSES501\n          ).\n++SRCUPD(STSCX54B) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD) .\n./ CHANGE NAME=STSCX54B\nCHKLEAP  EQU   *\n         MVC   X454TIMD+12(2),X454TIMD+10 MOVE  YDDD ONLY\n         MVI   X454TIMD+14,X'0F'       MAKE A VALID SIGN FOR AP / CP\n         NI    X454TIMD+12,X'0F'       CLEAR THE DANLING YEAR DIGIT\n         AP    X454TIMD+12(3),=PL2'10' ADD 1 DAY\n* X454TIMD+12(3) = NEW DAY DDD0F\n         XC    X454TIMS,X454TIMS       CLEAR WORK AREA - FOR YEAR WORK\n         MVC   X454TIMS+1(3),X454TIMD+8   MOVE 0Y YY YD  -\n         OI    X454TIMS+3,X'0F'        MAKE A SIGN FOR IT\n         DP    X454TIMS(4),=PL1'4'     IS IT A LEAP YEAR ?\n         CP    X454TIMS+3(1),=PL1'0'   IF ZERO THEN LEAP IT IS.\n         JNE   TOMROW                  NOT A LEAP IF NOT ZERO\nDOLEAPT  EQU   *\n         CP    X454TIMD+12(3),=PL3'3670' WILL IT BE PAST LEAP END?\n         JL    ADD1DAY                 IF NOT - JUST ADD A DAY\n         J     ADDYEAR                 ELSE SET DAY=1 AND ADD 1 YEAR\nTOMROW   CP    X454TIMD+12(3),=PL3'3660' PAST END OF NORMAL YEAR?\n         JL    ADD1DAY                  IF NOT JUST ADD ONE DAY\nADDYEAR  EQU   *                          - ELSE ADD A YEAR\n         XC    X454TIMS,X454TIMS       CLEAR WORK AREA FOR YEAR\n         MVC   X454TIMS+1(3),X454TIMD+8  MOVE 0Y YY YD  FROM NOW FIELD\n         OI    X454TIMS+3,X'0F'          FORCE SIGN  0Y YY YF\n         AP    X454TIMS(4),=PL1'1'     ADD 1 TO YEAR - IT WAS OUR GOAL\n* X454TIMD+8 = X'0YYYY001'   THIS IS WHAT WE NEED IN X454TIMD+8\n         MVC   X454TIMD+8(3),X454TIMS+1  MOVE 0Y YY YD\n         NI    X454TIMD+10,X'F0'         KEEP LOW ORDER YEAR, 0 DAY.\n         MVI   X454TIMD+11,X'01'       FINISH WITH DAY 1 = 0Y YY Y0 01\n         XC    X454TIMD+12(4),X454TIMD+12  CLEAR WORK AREA NOW\n         B     DOTME1                      TRY WITH ADJUSTED DATE/TIME\n*\n*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SSMINSTP": {"ttr": 3598, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/pdf", "datatype": "binary", "extension": ".pdf"}, "SSMINSTW": {"ttr": 4618, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "SSMOPSGP": {"ttr": 5638, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/pdf", "datatype": "binary", "extension": ".pdf"}, "SSMOPSGW": {"ttr": 6153, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "SSMUSERP": {"ttr": 6666, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/pdf", "datatype": "binary", "extension": ".pdf"}, "SSMUSERW": {"ttr": 7428, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "STSCX01A": {"ttr": 7943, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00D\\x01\\x07%?\\x01\\x07%?\\t\\x05\\t\\xf5\\t\\xf5\\x00\\x00\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-09-10T00:00:00", "modifydate": "2007-09-10T09:05:44", "lines": 2549, "newlines": 2549, "modlines": 0, "user": "T0SM0"}, "text": "STSCX01A TITLE 'PRINT/PUNCH Separator Exit -- PROLOG'          @430P270\n**********************************************************************\n** *  I DON'T THINK ANY PRINTER ACTUALLY USE THIS EXIT ANYMORE,   * **\n** * BUT SINCE WE USED TO ALTER THE HASPPRPR SEPERATOR PAGE       * **\n** * ROUTINES DIRECTLY, I AM ADDING THIS EXIT TO SIMULATE THE     * **\n** * SINGLE CHANGE WHICH IS TO CHANGE THE LITERAL OF THE ROOM     * **\n** * NUMBER TO BIN NUMBER.         SGM 08-08-00                   * **\n**********************************************************************\n* **PROPRIETARY-STATEMENT**********************************************\n*                                                                     *\n*   LICENSED MATERIALS-PROPERTY OF IBM                                *\n*   THIS MODULE IS \"RESTRICTED MATERIALS OF IBM\"                      *\n*   5694-A01 (C) COPYRIGHT IBM CORP 1990, 2005                        *\n*                                                                     *\n*   STATUS = HJE7720                                                  *\n*                                                                     *\n*01* EXTERNAL CLASSIFICATION:  NONE                            @R01P003\n*01* END OF EXTERNAL CLASSIFICATION:                           @R01P003\n*                                                                     *\n* **END-OF-PROPRIETARY-STATEMENT***************************************\n***********************************************************************\n*                                                                     *\n* MODULE NAME = STSCX01A (STSCX01A load module)                       *\n*                                                                     *\n* DESCRIPTIVE NAME = EXIT 1                                           *\n*                                                                     *\n*                    PRINT/PUNCH Separator                            *\n*                                                                     *\n* FUNCTION =                                                          *\n*                                                                     *\n*        STSCX01A is a sample exit routine that produces a            *\n*        job separator page ( see sample separator page               *\n*        below ).                                                     *\n*                                                                     *\n*        The separator page produced by this exit is                  *\n*        identical to the default separator page ( produced           *\n*        in HASPPRPU ) with the exception of the detail box           *\n*        information field labels.  This sample exit produces         *\n*        detail box information field labels that are delimited       *\n*        by an '=' sign as opposed to a ':' ( on the default          *\n*        separator page ).                                            *\n*                                                                     *\n*        An installation could use this sample exit to                *\n*        customize the appearance of a job separator page.            *\n*                                                                     *\n*        Exit 1 is called by HASPPRPU during print/punch              *\n*        processing.  It is called for job header and job             *\n*        trailer separators.                                          *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*             JJJJJJJJJJ  OOOOOOOOOOOO  BBBBBBBBBBB     00000000      *\n*            JJJJJJJJJJ  OOOOOOOOOOOO  BBBBBBBBBBBB   0000000000      *\n*               JJ      OO        OO  BB        BB  00      0000      *\n*              JJ      OO        OO  BB        BB  00     00 00       *\n*             JJ      OO        OO  BB       BB   00    00  00        *\n*            JJ      OO        OO  BBBBBBBBBB    00   00   00       1 *\n*           JJ      OO        OO  BBBBBBBBBB    00  00    00       11 *\n*          JJ      OO        OO  BB       BB   00 00     00       11  *\n*   JJ    JJ      OO        OO  BB        BB  0000      00       11   *\n*  JJ    JJ      OO        OO  BB        BB  000       00       11    *\n* JJJJJJJJ      OOOOOOOOOOOO  BBBBBBBBBBBB   0000000000    1111111111 *\n* JJJJJJ       OOOOOOOOOOOO  BBBBBBBBBBB     00000000     1111111111  *\n*                                                                     *\n*     JJJJJJJJJJ   000000000        1       1       1       1         *\n*     JJJJJJJJJJ  00000000000      11      11      11      11         *\n*         JJ      00      000     111     111     111     111         *\n*         JJ      00     0000    1111    1111    1111    1111         *\n*         JJ      00    00 00   11111   11111   11111   11111         *\n*         JJ      00   00  00      11      11      11      11         *\n*         JJ      00  00   00      11      11      11      11         *\n*         JJ      00 00    00      11      11      11      11         *\n*     JJ  JJ      0000     00      11      11      11      11         *\n*     JJ  JJ      000      00      11      11      11      11         *\n*     JJJJJJ      00000000000      11      11      11      11         *\n*     JJJJJJ       000000000       11      11      11      11         *\n*                                                                     *\n* ***START*****START*****START*****START*****START*****START****STA** *\n* *                                                                 * *\n* * JOBID=          J0111                        SEGMENT ID: 0021   * *\n* * JOB NAME=       JOB01                                           * *\n* * USER ID=        JSMITH                                          * *\n* * SYSOUT CLASS=   A                                               * *\n* * OUTPUT GROUP=   GRP01.CLASSA.D3289                              * *\n* * TITLE=          Smitty Corporation Checking Account History     * *\n* *                                                                 * *\n* * DESTINATION=    NEW YORK                                        * *\n* * NAME=           Joseph P. Smith                                 * *\n* * ROOM=           2G-54                                           * *\n* * BUILDING=       Smitty Textile Building                         * *\n* * DEPARTMENT=     Accounting                                      * *\n* * ADDRESS=        999 W. 99th Street                              * *\n* *                 New York, New York                              * *\n* *                 10000                                           * *\n* *                 212-555-3487                                    * *\n* *                                                                 * *\n* * PRINT TIME=     12:03:41                                        * *\n* * PRINT DATE=     12 OCT 89                                       * *\n* * PRINTER NAME=   PRINTER1                                        * *\n* * SYSTEM=         SYSA                                            * *\n* *                                                                 * *\n* ***START*****START*****START*****START*****START*****START****STA** *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* NOTES =                                                             *\n*                                                                     *\n*    DEPENDENCIES = JES2 $EXIT Facility, Standard JES2 services,      *\n*                   SWBTUREQ services                                 *\n*                                                                     *\n*    RESTRICTIONS = This code is provided as an example of            *\n*                   installation extensions to JES2.  This code       *\n*                   is not considered TYPE 1 supported code of IBM.   *\n*                   Any problems encountered in the use of this       *\n*                   sample code is a user responsibility.  The        *\n*                   IBM support center does not support user          *\n*                   extensions of sample user exits.                  *\n*                                                                     *\n* MODULE TYPE = Procedure ( CSECT type )                              *\n*                                                                     *\n*    PROCESSOR = IBM High Level Assembler/MVS 1.5.0            @Z07LASM\n*                                                                     *\n*    MODULE SIZE = See $MODEND macro expansion at end of assembly     *\n*                                                                     *\n*    ATTRIBUTES = JES2 REENTRANT, RMODE ANY, AMODE 31                 *\n*                                                                     *\n*                                                                     *\n* ENTRY POINTS =                                                      *\n*                                                                     *\n*        SEPARATE  -  Produce our own separator page.  Suppress       *\n*                     the production of the default separator         *\n*                     page.                                           *\n*                                                                     *\n*                     Suppress the production of JESNEWS if this      *\n*                     exit has been called for a job-continuation     *\n*                     separator page.                                 *\n*                                                                     *\n* MACROS = JES2 - $CALL, $DEST, $ENTRY, $ESTAE, $GETWORK, $MODEND,    *\n*                 $MODULE, $PBLOCK, $PRPUT, $RETURN, $RETWORK, $SAVE, *\n*                 $SEPPDIR, $SETRP, $STORE                            *\n*                                                                     *\n* MACROS = MVS  - SWBTUREQ, TIME                                      *\n*                                                                     *\n* CHANGE ACTIVITY                                                     *\n*                                                                     *\n*        @410  MVS/SP-JES2 VERSION 4 RELEASE 1 LEVEL 0                *\n*              (SP4.1.0, HJE4410)                                     *\n*                                                                     *\n* $420P306=PTM      HJE4420 910118 R_W1: Sample Exit Prolog Problems  *\n*                                                                     *\n* $430P050=10X      HJE4430 920310 RJH:  Enhance STSCX01A(USER EXIT1) *\n* $430P329=10X      HJE4430 920429 B_R2: PMX0329: Sample Exit 1       *\n* $430P270=10X      HJE4430 920721 HGF:  $MODULE, ENVIRON, RMODE      *\n* $510P214=PTM      HJE5510 930810 KCK:  EXIT1 SEPPDIR/$DEST UPDATES  *\n*                                                                     *\n* $520LHLA=BASEQ    HJE5520 941008 GMD:  Change HASM to HLASM         *\n*                                                                     *\n* $R01P010=PTM      HJE6601 950217 JMO:  PTM PQJ0012                  *\n*                                                                     *\n* $R03P010=ENHPSO   HJE6603 960521 J_K2: Segment ID for trailer page  *\n*                                                                     *\n* $Z07LASM=NJETCP   HJE7720 050203 CLW:  HLASM 5.0 support            *\n*                                                                     *\n* A000000-999999    CREATED FOR JES2 4.1.0                         @410\n***********************************************************************\n         TITLE 'PRINT/PUNCH Separator Exit -- PROLOG ($HASPGBL)'\n         COPY  $HASPGBL\n         TITLE 'PRINT/PUNCH Separator Exit -- PROLOG ($MODULE)'\nSTSCX01A $MODULE ENVIRON=JES2,                                 @430P270C\n               RMODE=ANY,                                      @430P270C\n               IBMJES2=SAMPLE,                                 @430P270C\n               TITLE='PRINT/PUNCH Separator Exit',                     C\n               CVT,                Generate MVS CVT dsect              C\n               DOTUM,              IEFDOTUM-Dyn. OUTPUT text unit map'gC\n               JESCT,              Generate MVS IEFJESCT dsect         C\n               SJOKY,              IEFSJOKY-Dynamic OUTPUT key mapping C\n               SJTRC,              IEFSJTRC-SWBTUREQ return/reason codeC\n               (SJTRP,GEN),        IEFSJTRP-SWBTUREQ RETRIEVE parm listC\n               $BUFFER,            Buffer mapping (for $JCT)           C\n               $CADDR,             Common storage address list         C\n               $DCT,               Device Control Table                C\n               $DSCT,              DSCT (for APPC Output)      @430P329C\n               $ERA,               Error Recovery Area                 C\n               $HASPEQU,           General EQUATES                     C\n               $HCCT,              Common storage control table        C\n               $HCT,               Private storage control table       C\n               $HFAME,             File alloacation map (for $HCCT)    C\n               $JCT,               Job Control Table                   C\n               $JOE,               Job Output Element                  C\n               $MIT,               Module information table            C\n               $MITETBL,           MIT entry table                     C\n               $PADDR,             Private storage address list        C\n               $PARMLST,           Parameter list values/equates       C\n               $PCE,               Processor control element           C\n               $PDDB,              Peripheral data definition block    C\n               $PRE,               Processor Recovery Element          C\n               $PSV,               Processor save area                 C\n               $SCAT,              Sysout class attribute (for $HCCT)  C\n               $TQE,               jes2 timer queue element            C\n               $USERCBS,           User defined Control Blocks         C\n               $XECB,              Extended ECB (for $HCCT)            C\n               ($XPL,GEN)          Exit parameter list         @430P270\n         TITLE 'PRINT/PUNCH Separator Exit -- Entry Prolog'\n***********************************************************************\n*                                                                     *\n*        SEPARATE - Produce a separator page.  Suppress production    *\n*                   of the default separator page.                    *\n*                   Suppress JESNEWS for job-continuation calls.      *\n*                                                                     *\n* FUNCTION :                                                          *\n*                                                                     *\n*        Produces a separator page that is almost identical           *\n*        to the default separator page produced in HASPPRPU           *\n*        ( see beginning prolog for explanation of the                *\n*        difference between the default separator and that            *\n*        produced in this exit ).                                     *\n*                                                                     *\n*        During a job continuation separator page call, the exit      *\n*        response byte is set to indicate to HASPPRPU that JESNEWS    *\n*        should not be produced.                                      *\n*                                                                     *\n* LINKAGE :                                                           *\n*                                                                     *\n*        This routine is entered via a $EXIT call in HASPPRPU.        *\n*        Control is returned via a $RETURN.                           *\n*                                                                     *\n* OPERATION :                                                         *\n*                                                                     *\n*        LOADMOD(STSCX01A)                                     @420P306\n*        EXIT(1)  ROUTINES=(SEPARATE),STATUS=ENABLED           @420P306\n*                                                                     *\n*                                                                     *\n* ENVIRONMENT :                                                       *\n*                                                                     *\n*        JES2 main task                                               *\n*                                                                     *\n* RECOVERY :                                                          *\n*                                                                     *\n*        A $ESTAE recovery environment is establish on entry to       *\n*        the exit routine.  The recovery routine releases all         *\n*        storage obtained in the exit and then percolates to          *\n*        the next higher level of recovery in HASPPRPU.               *\n*                                                                     *\n*        Debugging text is put in field PRETRACK in the Processor     *\n*        Recovery Element (PRE).  The contents of this field          *\n*        are put in the SDWA VRA ( variable recording area ).         *\n*                                                                     *\n*        HASPPRPU establishes an ESTAE around the call to this        *\n*        exit.  In the event of a program check, control will         *\n*        be passed to the label PGMCKMSG in HASPPRPU when that        *\n*        level of recovery is invoked.                                *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* REGISTER USAGE (ENTRY/EXIT) :                                       *\n*                                                                     *\n*    REG         VALUE ON ENTRY              VALUE ON EXIT            *\n*                                                                     *\n*    R0          N/A                         unchanged                *\n*    R1          Parameter list address      unchanged                *\n*    R2-R10      N/A                         unchanged                *\n*    R11         HCT Address                 unchanged                *\n*    R12         N/A                         unchanged                *\n*    R13         PCE Address                 unchanged                *\n*    R14         Return address              unchanged                *\n*    R15         Entry address               Return code              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*            PARAMETER LIST FOR EXIT 1  ( Mapped by $XPL )            *\n*                                                                     *\n*                                                                     *\n*    LABEL         DESCRIPTION                                        *\n*    -----         -----------                                        *\n*                                                                     *\n*    XPLID         Eyecatcher ('$XPL')                                *\n*    XPLLEVEL      Maintenance Level                                  *\n*    XPLXITID      Exit ID number (1)                                 *\n*    XPLEXLEV      Version number                                     *\n*    X001IND       Indicator byte                              @R01P010\n*    X001COND      Condition byte                              @R01P010\n*    X001RESP      Response byte                               @R01P010\n*    XPLSIZE       Length of parameter list including base section    *\n*                                                                     *\n*    X001DCT       DCT address                                        *\n*    X001JCT       JCT address                                        *\n*    X001JQE       JQE address                                        *\n*    X001WJOE      Work-JOE address                                   *\n*    X001CJOE      Characteristics-JOE address                        *\n*    X001PDDB      Address of first PDDB of JOE, or zero              *\n*    X001SWBT      SWBTU pointer list address for the first           *\n*                  PDDB in the JOE, or zero                           *\n*    X001NSWB      Number of SWBITs despooled                         *\n*    X001RSVD      Reserved for future use                            *\n*    X001HBUF      Address of HASP buffer for exit use                *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* REGISTER USAGE (INTERNAL) :                                         *\n*                                                                     *\n*    REG        VALUE                                                 *\n*                                                                     *\n*    R0         N/A                                                   *\n*    R1         Work register                                         *\n*    R2-R4      N/A                                                   *\n*    R5         Exit 1 work area address                              *\n*    R6         N/A                                                   *\n*    R7         Exit 1 parameter list address                         *\n*    R8         N/A                                                   *\n*    R9-R10     N/A                                                   *\n*    R11        HCT address                                           *\n*    R12        Local base address                                    *\n*    R13        PCE address                                           *\n*    R14-R15    Link/Work registers                                   *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* DATA AREA USAGE (INTERNAL) :                                        *\n*                                                                     *\n*    NAME          VALUE/DESCRIPTION                                  *\n*    ----          -----------------                                  *\n*                                                                     *\n*    EX1WORK       Exit 1 work area                                   *\n*    SEPDSECT      Separator page detail box DSECT                    *\n*    PAGELINE      Separator page output line                         *\n*                                                                     *\n*    X001IND       Indicator byte in XPL (exit parameter list) @R01P010\n*      X001JHDR       Indicator in X001IND for a job header    @R01P010\n*                     separator call                                  *\n*      X001JTLR       Indicator in X001IND for a job trailer   @R01P010\n*                     separator call                                  *\n*      X001JCNT       Indicator in X001IND for a               @R01P010\n*                     job-continuation separator call          @R01P010\n*    X001RESP       Response byte in XPL                       @R01P010\n*      X001DFSP       Indicator in X001RESP to suppress        @R01P010\n*                     production of the default separator page @R01P010\n*      X001JNWS       Indicator in X001RESP to suppress        @R01P010\n*                     production of JESNEWS                    @R01P010\n*                                                                     *\n*    $BUFFER       HASP buffer DSECT                                  *\n*      BUFDSECT       Start of buffer prefix area                     *\n*      BUFSTART       Start of buffer work area                       *\n*    $SID          System id                                          *\n*    DCTDEVN       Device name                                        *\n*    JCTJNAME      Job name from job card                             *\n*    JCTJOBID      System assigned job id                             *\n*    JCTPNAME      Programmer name from JOB card                      *\n*    JCTROOMN      Room, from JOB card                                *\n*    JOECRUID      Creator userid for data set                        *\n*    JOECURCL      JOE current SYSOUT class                           *\n*    JOENAME       JOE's output group name                            *\n*    JOEROUT       Route code                                         *\n*    JOEUSER       User id                                            *\n*                                                                     *\n*    DOADDRES      Dynamic output ADDRESS    key                      *\n*    DOBUILD       Dynamic output BUILDING   key                      *\n*    DODEPT        Dynamic output DEPARTMENT key                      *\n*    DONAME        Dynamic output NAME       key                      *\n*    DOROOM        Dynamic output ROOM       key                      *\n*    DOTITLE       Dynamic output TITLE      key                      *\n*                                                                     *\n*    DOCNUNIT      Text unit  ( TU ) mapping                          *\n*    DOCNTFLD      TU length/parameter pairs mapping                  *\n*    SJTRP         SWBTUREQ RETRIEVE parameter list                   *\n*                                                                     *\n*    PCEUSER0      Address of storage obtained for exit work area     *\n*    PCEUSER1      Count of number of times that 2nd level recovery   *\n*                  has been entered                                   *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* RETURN CODES ( R15 ON EXIT ):                                       *\n*                                                                     *\n*        0 - Continue normal processing                               *\n*                                                                     *\n*                                                                     *\n* OTHER CONSIDERATIONS :                                              *\n*                                                                     *\n*        $WAIT can occur.                                             *\n*                                                                     *\n***********************************************************************\n         TITLE 'PRINT/PUNCH Separator Exit -- Entry'\n***********************************************************************\n*                                                                     *\n*        Entry point to routine SEPARATE.                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEXIT01A  $ENTRY BASE=R12           Establish entry point\n         SPACE 2\n        $SAVE  TRACE=YES,NAME=EXIT01A      Save callers registers\n         SPACE 2\n         LR    R12,R15             Set local base\n         SPACE 1\n         LR    R7,R1               Establish addressability\n         USING XPL,R7                  to exit parameter list\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Establish an ESTAE recovery environment                      *\n*                                                                     *\n*        Put debugging data in Processor Recovery Element ( PRE )     *\n*        - maximum 32 characters                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n        $ESTAE RECADDR==A(EX1RECV),NAME=STSCX01A,RETRY=RELWORKA,       C\n               BASE=(R12)          Establish ESTAE environment\n         SPACE 2\n         L     R14,PCEPRE          Get PRE address from PCE\n         USING PRE,R14             Establish addressability\n         SPACE 1\n         MVC   PRETRACK(L'DEBUGMSG),DEBUGMSG     Put debug data in PRE\n         SPACE 1\n         MVI   PRELOGLN,L'DEBUGMSG     Put length of debug data in PRE\n         SPACE 2\n         DROP  R14                 Drop PRE addressability\n         TITLE 'PRINT/PUNCH Separator Exit -- Main Routine'\n*------------------------------------------------------------* @430P050\n*                                                            * @430P050\n*        If the SEP= parameter on the printer initial-       * @430P050\n*        ization statement is currently set to NO, or the    * @430P050\n*        suppress flag has been set by previous code,        * @430P050\n*        do not build a separator page.                      * @430P050\n*                                                            * @430P050\n*------------------------------------------------------------* @430P050\n         SPACE 2                                               @430P050\n         TM    X001RESP,X001DFSP   Suppress Separators?        @R01P010\n         BO    ENDMAIN             Yes, exit                   @430P050\n         SPACE 2                                               @430P050\n*---------------------------------------------------------------------*\n*                                                                     *\n*        If this is a job continuation call, set the exit             *\n*        response byte to indicate that the production of             *\n*        JESNEWS should be suppressed.                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         TM    X001IND,X001JCNT    Job continuation call?      @R01P010\n         BZ    NOTJCNT               No, go build the separator page\n         SPACE 1\n         OI    X001RESP,X001JNWS   Suppress JESNEWS            @R01P010\n         SPACE 2\nNOTJCNT  DS    0H                  Fall thru to build separator page\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Storage must be obtained for a work area to be used          *\n*        by the routine PRODSEP that produces the separator           *\n*        page.                                                        *\n*        The exit work area dsect ( EX1WORK ) is mapped over          *\n*        this storage to store and extract the data used in the       *\n*        PRODSEP routine.                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Check if we have already obtained storage for the            *\n*        exit work area ( as may be the case during a RETRY           *\n*        after a program check in the exit ).  If so, reuse           *\n*        it.  Otherwise issue a $GETWORK to get storage.  Save        *\n*        the address in PCEUSER0.                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         ICM   R1,B'1111',PCEUSER0     Check if already got storage\n         BZ    GETEX1W                   No storage, so go get some\n         XC    PCEUSER0,PCEUSER0       Clear PCEUSER0 field\n         SPACE 1\n         CLC   0(4,R1),=C'EX1W'    Is this our work area storage ?\n         BNE   GETEX1W               No, go get storage\n         B     GOTEX1W               Yes, branch around GETWORK\n         SPACE 2\nGETEX1W  DS    0H                  Get storage for work area\n         SPACE 1\n         LA    R1,(((EX1WKLEN+3)/4)+1)   Get the length of the EX1WORK C\n                                           DSECT + eyecatcher in words\n         SPACE 1\n        $GETWORK WORDS=(R1),USE=EX1W,ERRET=RELWORKA  Get storage for   C\n                                               exit work area (EX1WORK)\n         SPACE 1\nGOTEX1W  DS    0H                  Got storage\n         EJECT\n         ST    R1,PCEUSER0         Save address in PCE user field\n         LA    R5,4(,R1)           Add 4 for eyecatcher and save addr\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Call the PRODSEP routine to build and print a separator      *\n*        page.  Suppress production of the default separator page     *\n*        only if PRODSEP returns a return code of zero.               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n        $CALL  PRODSEP             Call routine to produce separator\n         SPACE 2\n         LTR   R15,R15             Check return code from PRODSEP\n         BNZ   RELWORKA            Bypass suppressing def. separator\n         SPACE 1\n         OI    X001RESP,X001DFSP   Suppress def separator      @R01P010\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Release exit work area storage                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\nRELWORKA DS    0H                      Release work area storage\n         SPACE 1\n         ICM   R1,B'1111',PCEUSER0     Load work area address\n         BZ    ENDMAIN                 Return to caller if no storage\n         XC    PCEUSER0,PCEUSER0       Clear PCEUSER0 field\n         SPACE 1\n         CLC   0(4,R1),=C'EX1W'    Is this storage ours?\n         BNE   ENDMAIN               No, branch around RETWORK\n         SPACE 1\n        $RETWORK (R1)              Release work area storage\n         SPACE 2\nENDMAIN  DS    0H                  End of routine SEPARATE\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Cancel $ESTAE recovery environment                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n        $ESTAE CANCEL              Cancel ESTAE environment\n         TITLE 'PRINT/PUNCH Separator Exit -- Return'\n***********************************************************************\n*                                                                     *\n*        Return to the caller.                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n        $RETURN RC=0               Return to caller with RC=0\n         SPACE 2\nDEBUGMSG DC    C'ESTAE SET UP IN SAMPLE EXIT 1'    Debugging text\n         SPACE 2\n         LTORG ,                   Define literal origin\n         SPACE 1\n         DROP  R7,R12              Drop addressabilities\n         TITLE 'PRODSEP  -- Produce a separator page detail box'\n***********************************************************************\n*                                                                     *\n*        PRODSEP  - Produce a separator page detail box.              *\n*                                                                     *\n* FUNCTION :                                                          *\n*                                                                     *\n*        This subroutine produces a separator page detail box         *\n*        that is identical to that on the default separator           *\n*        page produced by HASPPRPU during print/punch processing.     *\n*                                                                     *\n*        The SWBTUREQ retrieve service is used to extract             *\n*        requested values from an OUTPUT statement and return         *\n*        them in a contiguous string.  The service is passed a        *\n*        list of keys that identify the keywords ( TITLE, NAME,       *\n*        ROOM, BUILDING, DEPARTMENT and ADDRESS ) whose values        *\n*        are to be extracted.                                         *\n*                                                                     *\n*        Each value in the string is represented in text unit (TU)    *\n*        format, which means that it is preceded by its key and       *\n*        length.                                                      *\n*                                                                     *\n* LINKAGE :                                                           *\n*                                                                     *\n*      Accessed via $CALL                                             *\n*      Returned via $RETURN                                           *\n*                                                                     *\n*                                                                     *\n* REGISTER USAGE (ENTRY/EXIT) :                                       *\n*                                                                     *\n*    REG         VALUE ON ENTRY              VALUE ON EXIT            *\n*                                                                     *\n*    R0-R4       N/A                         unchanged                *\n*    R5          Exit 1 work area address    unchanged                *\n*    R6          N/A                         unchanged                *\n*    R7          Parameter list address      unchanged                *\n*    R8-R10      N/A                         unchanged                *\n*    R11         HCT Address                 unchanged                *\n*    R12         Local base address          unchanged                *\n*    R13         PCE Address                 unchanged                *\n*    R14         Return address              unchanged                *\n*    R15         Entry address               Return code (see below)  *\n*                                                                     *\n*                                                                     *\n* RETURN CODE ( R15 ON EXIT ):                                        *\n*                                                                     *\n*        0 - Processing successful;  Separator page produced          *\n*                                                                     *\n*        4 - Processing unsucccessful;  Separator page not produced   *\n*                                                                     *\n*                                                                     *\n* OTHER CONSIDERATIONS :                                              *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING PRODSEP,R12         Establish routine addressability\n         USING XPL,R7              Establish XPL addressability\n         USING EX1WORK,R5          Establish work area addressability\n         EJECT\n         SPACE 2\nPRODSEP $SAVE  ,                   Save the caller's registers\n         SPACE 3\n         LR    R12,R15             Set local base\n         SPACE 1\n         CLC   X001SWBT,$ZEROS     Are there any SWBIT's ?\n         BE    REQOK               No, branch around SWBTUREQ RETRIEVE C\n                                            service call\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Storage must be obtained for the SWBTUREQ RETRIEVE           *\n*        service to provide an area to return the retrieved           *\n*        TUs and an area to set up a Key List in.  Pointers           *\n*        to the TUs requested by the specific keys will be            *\n*        returned by the service to the Key List area if they         *\n*        exist.  Working storage for SWBTUREQ service is also         *\n*        obtained.                                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n*---------------------------------------------------------------------*\n*        Get storage for output TU area                               *\n*---------------------------------------------------------------------*\n         SPACE 1\n         ICM   R1,B'1111',EX1TUADR     Check if already got storage\n         BZ    GETOTUA                   No storage, so go get some\n         XC    EX1TUADR,EX1TUADR       Clear out save area\n         SPACE 1\n         CLC   0(4,R1),=C'OTUA'    Is this storage ours?\n         BNE   GETOTUA               No, go get storage\n         B     GOTOTUA               Yes, branch around GETWORK\n         SPACE 2\nGETOTUA  DS    0H                  Get storage for work area\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Of the 6 TU's that we are interested in, 5 have a single     *\n*        parameter ( TITLE, ROOM, NAME, DEPT, BUILDING ), whereas     *\n*        ADDRESS has up to 4 parameters.                              *\n*                                                                     *\n*        The total output TU area required is ...                     *\n*                                                                     *\n*        5*(size of one-parameter TU) + (size of four-parameter TU)   *\n*        |                               |                            *\n*        |                               |                            *\n*        |                               +--> for ADDRESS             *\n*        |                                                            *\n*        +--> for  TITLE, ROOM, NAME, DEPT and BUILDING               *\n*                                                                     *\n*                                                                     *\n*        where a TU mapping is defined as follows:                    *\n*                                                                     *\n*        TU key                              .....   2 bytes          *\n*        Number of length/parameter pairs    .....   2 bytes          *\n*  +-- { Length of first (or only) parameter .....   2 bytes          *\n*  |   { First (or only) parameter           .....  60 bytes ( max )  *\n*  |              .                                                   *\n*  |              .                                                   *\n*  |              .                                                   *\n*  +----> (repeated for multiple parameter TU)                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         LA    R1,((5*(2+2+2+60))+(2+2+4*(2+60)))                      C\n                                   Size of current TU area\n         STH   R1,EX1TUSZ          Save the size\n         LA    R1,3(,R1)           Convert size from\n         SRL   R1,2                  bytes to words\n         LA    R1,1(,R1)           Add 1 for the eyecatcher\n         SPACE 1\n        $GETWORK WORDS=(R1),USE=OTUA,ERRET=NOSEPRT    Get storage for  C\n                                                   the TU output area\n         SPACE 1\nGOTOTUA  DS    0H                  Got storage\n         SPACE 1\n         LA    R1,4(,R1)           Add 4 for eyecatcher\n         ST    R1,EX1TUADR         Save the address of the TU output   C\n                                     area\n         EJECT\n*---------------------------------------------------------------------*\n*    Get storage for Key / TU pointer list                            *\n*---------------------------------------------------------------------*\n         SPACE 1\n         ICM   R1,B'1111',EX1KYLST     Check if already got storage\n         BZ    GETKEYL                   No storage, so go get some\n         XC    EX1KYLST,EX1KYLST       Clear out save area\n         SPACE 1\n         CLC   0(4,R1),=C'KEYL'    Is this storage ours?\n         BNE   GETKEYL               No, go get storage\n         B     GOTKEYL               Yes, branch around GETWORK\n         SPACE 2\nGETKEYL  DS    0H                  Get storage for work area\n         SPACE 1\n         LA    R1,(((6*SJTRKLEN)+3)/4+1)   Size of Key/TU ptr list in  C\n                                                 words\n         SPACE 1\n        $GETWORK WORDS=(R1),USE=KEYL,ERRET=NOSEPRT    Get storage for  C\n                                                    the Key / TU list\n         SPACE 1\nGOTKEYL  DS    0H                  Got storage\n         SPACE 1\n         LA    R1,4(,R1)           Add 4 for eyecatcher\n         ST    R1,EX1KYLST         Save the address of the Key / TU    C\n                                     List\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Insert each delivery/identification OUTPUT JCL               *\n*        parameter key, in the keys list.                             *\n*        If any of these parameters were specified by the             *\n*        user, a pointer to the appropriate TU ( text unit )          *\n*        will be returned by the SWBTUREQ RETIREVE service.           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         USING SJTRKEYL,R4         Establish\n         L     R4,EX1KYLST             addressability\n         SPACE 1\n         MVC   SJTRKYID+KYLSTTL,=Y(DOTITLE)       Title Key\n         MVC   SJTRKYID+KYLSTNM,=Y(DONAME)        Name Key\n         MVC   SJTRKYID+KYLSTRM,=Y(DOROOM)        Room Key\n         MVC   SJTRKYID+KYLSTBL,=Y(DOBUILD)       Building Key\n         MVC   SJTRKYID+KYLSTDP,=Y(DODEPT)        Dept key\n         MVC   SJTRKYID+KYLSTAD,=Y(DOADDRES)      Address Key\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Initialize the SWBTUREQ REQUEST=RETRIEVE parameter           *\n*        list. Set storage length to 0 - we dont know exactly how     *\n*        much storage we need for the SWBTUREQ Service Work Area.     *\n*        The service will return the Required Size which we will      *\n*        then obtain via $GETWORK (in MORESTOR routine).              *\n*---------------------------------------------------------------------*\n         SPACE 1\n         USING SJTRP,R3            Establish addressability\n         SPACE 1\n         LA    R3,EX1RETPL         Get the address of the              C\n                                     RETRIEVE parameter list\n         SPACE 1\n         XC    SJTRP(SJTRLGTH),SJTRP        Clear the parameter list\n         MVC   SJTRID,=A(SJTRCID)  Parameter list ID\n         MVI   SJTRVERS,SJTRCVER   Parameter list version\n         LA    R1,SJTRLGTH         Parameter\n         STH   R1,SJTRLEN            list length\n         MVC   SJTRSTOR,$ZEROS     Zero storage address        @430P329\n         MVC   SJTRSTSZ,$ZEROS     Zero storage length         @430P329\n         MVC   SJTRSWBN,X001NSWB   Number of pointers in SWBTU list\n         MVC   SJTRSWBA,X001SWBT   Address of SWBTU pointer list\n         MVC   SJTRAREA,EX1TUADR   Address of the output area          C\n                                     for contiguous text units\n         MVC   SJTRSIZE,EX1TUSZ    Size of output area for TUs\n         MVC   SJTRKIDN,$H6        Number of keys in the Key/TU        C\n                                     Pointer list\n         MVC   SJTRKIDL,EX1KYLST   Address of Key List\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Issue the SWBTUREQ REQUEST=RETRIEVE macro                    *\n*        ------------------------------------------                   *\n*                                                                     *\n*        The service returns with a zero return code if               *\n*        processing was successful.                                   *\n*                                                                     *\n*        If the current working storage size ( SJTRSTSZ ) is          *\n*        less than the required size for the service, then            *\n*        the service returns the following values:                    *\n*               R15        =  4 (SJTRCSIZ)                            *\n*               SJTRREAS   =  4 (SJTRWSZR)                            *\n*               SJTRWKSZ   =  amount of working storage required      *\n*                             for the SWBTUREQ REQUEST=RETRIEVE       *\n*                             service.                                *\n*                                                                     *\n*        If none of the requested items were found, then the          *\n*        service returns the following values:                        *\n*               R15        =  4 (SJTRCSIZ)                            *\n*               SJTRREAS   =  100 (SJTRNOKY)                          *\n*                                                                     *\n*        If R15 > 4, then an error occurred in the service.           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nRETRYREQ DS    0H\n         ST    R3,EX1PLPTR         Pass SWBTUREQ RETRIEVE parm list\n         LA    R1,EX1PLPTR           address by indirect addressing\n         SPACE 2\n         SWBTUREQ REQUEST=RETRIEVE  Issue the SJF macro\n         SPACE 2\n         STH   R15,EX1SWBRC        Save the return code\n         SPACE 1\n         CLC   EX1SWBRC,$H4             Check return code\n         BL    REQOK               Service successful, produce sep.\n         BH    NOSEPRT             Error, don't produce separator\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        If working storage is too small, call MORESTOR to            *\n*        release the current storage ( if any ), get storage          *\n*        for the amount that is required, and issue the               *\n*        service call again.                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         CLC   SJTRREAS,=A(SJTRWSZR)    Working storage too small?\n         BNE   CHECKEYS                 No, check if no keys matched\n         LH    R4,SJTRSTSZ         Current storage size\n         L     R1,SJTRSTOR         Current storage address\n         LH    R2,SJTRWKSZ         Required storage size\n         SPACE 1\n        $CALL  MORESTOR            Obtain required storage\n         SPACE 1\n         LTR   R15,R15             Check return code from MORESTOR\n         BNZ   NOSEPRT             If non-zero don't produce separator\n         SPACE 1\n         LA    R1,4(,R1)           Add 4 for eyecatcher\n         ST    R1,EX1SRWA          Save working storage address in     C\n                                       exit work area (EX1WORK)\n         MVC   EX1SRWL,SJTRWKSZ    Set the length in EX1WORK\n         MVC   SJTRSTOR,EX1SRWA    Reset WS addr in parm list\n         MVC   SJTRSTSZ,EX1SRWL    Reset WS size in parm list\n         B     RETRYREQ            Branch to issue macro again\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Check if reason for RC=4 from SWBTUREQ service is that       *\n*        none of the requested values were found.                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\nCHECKEYS CLC   SJTRREAS,=A(SJTRNOKY)   Did any keys match?\n         BE    REQOK                     No, produce separator anyway\n         B     NOSEPRT                 Go set error return code\n         SPACE 2\nREQOK    DS    0H\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Call PRINTBLK routine to print the block letters on the      *\n*        separator page.                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n        $CALL  PRINTBLK            Call routine to print block letters\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Call BUILDBOX routine to build and print the detail          *\n*        box on the separator page.                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n        $CALL  BUILDBOX            Call routine to build detail box\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to the caller.                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         SLR   R6,R6               Set return code = 0         @430P329\n         B     GOBACK              Branch to return to caller\n         SPACE 2\nNOSEPRT  LA    R6,4                Set return code = 4         @430P329\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        The TU output area, the Keylist/Pointer area and the         *\n*        working storage area for the SWBTUREQ service are no         *\n*        longer needed so their respective work areas are             *\n*        returned.                                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2                                               @430P329\n*---------------------------------------------------------------------*\n*        Release TU output area storage                               *\n*---------------------------------------------------------------------*\n         SPACE 1                                               @430P329\nGOBACK   ICM   R1,B'1111',EX1TUADR  Load TU output area addr   @430P329\n         BZ    CHKYLST             Branch if no TU storage     @430P329\n         S     R1,$F4              Subtract 4 for eyecatcher   @430P329\n         SPACE 1                                               @430P329\n         XC    EX1TUADR,EX1TUADR   Set address to zero         @430P329\n         SPACE 1                                               @430P329\n        $RETWORK (R1)              Release the TU storage      @430P329\n         SPACE 2                                               @430P329\n*---------------------------------------------------------------------*\n*        Release Key/TU pointer list storage area                     *\n*---------------------------------------------------------------------*\n         SPACE 1                                               @430P329\nCHKYLST  ICM   R1,B'1111',EX1KYLST  Load Key/TU ptr list addr  @430P329\n         BZ    CHKSRWA             Branch if no Key/TU storage @430P329\n         S     R1,$F4              Subtract 4 for eyecatcher   @430P329\n         SPACE 1                                               @430P329\n         XC    EX1KYLST,EX1KYLST   Set address to zero         @430P329\n         SPACE 1                                               @430P329\n        $RETWORK (R1)              Release the keylist storage @430P329\n         SPACE 2                                               @430P329\n*---------------------------------------------------------------------*\n*        Release SWBTUREQ RETRIEVE service work area storage          *\n*---------------------------------------------------------------------*\n         SPACE 1                                               @430P329\nCHKSRWA  ICM   R1,B'1111',EX1SRWA  Load service work area addr @430P329\n         BZ    ENDSEP              Branch if no work storage   @430P329\n         S     R1,$F4              Subtract 4 for eyecatcher   @430P329\n         SPACE 1                                               @430P329\n         XC    EX1SRWA,EX1SRWA     Set address to zero         @430P329\n         SPACE 1                                               @430P329\n        $RETWORK (R1)              Release the working storage @430P329\n         SPACE 1                                               @430P329\nENDSEP  $RETURN RC=(R6)            Return to the caller        @430P329\n         SPACE 2\n         LTORG ,                   DEFINE LITERAL ORIGIN\n         SPACE 1\n         DROP  R3,R4,R5,R7,R12     Drop register addressabilities\n         TITLE 'MORESTOR -- Get more working storage for SWBTUREQ RETRIC\n               EVE service'\n***********************************************************************\n*                                                                     *\n*        MORESTOR - Get more working storage for the SWBTUREQ         *\n*                   RETRIEVE service.                                 *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This subroutine is called to release the current SWBTUREQ    *\n*        working storage and obtain the amount required by the        *\n*        SWBTUREQ RETRIEVE service.                                   *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*      Accessed via $CALL                                             *\n*      Returned via $RETURN                                           *\n*                                                                     *\n*                                                                     *\n*   REGISTER USAGE (ENTRY/EXIT):                                      *\n*                                                                     *\n*        REG          VALUE ON ENTRY            VALUE ON EXIT         *\n*                                                                     *\n*        R0           N/A                       unchanged             *\n*        R1           Current working           new working           *\n*                       storage address           storage address     *\n*        R2           Required working          unchanged             *\n*                       storage size                                  *\n*        R3           N/A                       unchanged             *\n*        R4           Current working           unchanged             *\n*                       storage size                                  *\n*        R5-R13       N/A                       unchanged             *\n*        R14          Return address            unchanged             *\n*        R15          Entry address             Return code           *\n*                                                                     *\n*                                                                     *\n*   RETURN CODE ( R15 ON EXIT ):                                      *\n*                                                                     *\n*        0 - Processing successful; More storage obtained             *\n*                                                                     *\n*        4 - Processing unsucccessful                                 *\n*                                                                     *\n*   OTHER CONSIDERATIONS :                                            *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING MORESTOR,R12        Establish addressability\n         EJECT\nMORESTOR $SAVE ,                   Save the caller's registers\n         SPACE 1\n         LR    R12,R15             Set local base\n         SPACE 1\n         LTR   R4,R4               Is the current working storage      C\n                                     size equal to zero ?\n         BZ    GETSTOR                 No, skip the retwork\n         LTR   R1,R1               Is the current working storage      C\n                                     addr equal to zero?\n         BZ    GETSTOR                 No, skip the retwork\n         S     R1,$F4              Subtract 4 for the eyecatcher\n         SPACE 1\n        $RETWORK (R1)              Release the current working storage\n         SPACE 1\nGETSTOR  DS    0H\n         LA    R2,3(,R2)           Convert the size in bytes\n         SRL   R2,2                   into the size in words\n         LA    R2,1(,R2)           Add 1 for the eyecatcher\n         SPACE 1\n        $GETWORK WORDS=(R2),USE=SRWA,ERRET=NOMOREST    Get required    C\n                                                     working storage\n         SPACE 2\n        $STORE R1                  Pass the new working storage        C\n                                     address back to the caller\n         LA    R15,0               Set return code = 0\n         SPACE 2\n         B     ENDMORE             Go return to caller\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to the caller.                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nNOMOREST LA    R15,4               Set return code = 4\n         B     ENDMORE             Go return to caller\n         SPACE 2\nENDMORE $RETURN RC=(R15)           Return to the caller\n         SPACE 1\n         LTORG ,                   Define literal origin\n         SPACE 1\n         DROP  R12                 Drop local base register\n         TITLE 'PRINTBLK -- Print the separator page block letters'\n***********************************************************************\n*                                                                     *\n*        PRINTBLK - Print the job name and job id in block            *\n*                   letters on the separator page.                    *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This routine is called to print the job name and job         *\n*        id in block letters on the separator page.                   *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via $CALL                                           *\n*        Returned via $RETURN                                         *\n*                                                                     *\n*                                                                     *\n*   REGISTER USAGE (ENTRY/EXIT):                                      *\n*                                                                     *\n*        REG          VALUE ON ENTRY            VALUE ON EXIT         *\n*                                                                     *\n*        R0-R4        N/A                         Unchanged           *\n*        R5           EX1WORK address             Unchanged           *\n*        R6           N/A                         Unchanged           *\n*        R7           Exit 1 parm list addr       Unchanged           *\n*        R8-R10       N/A                         Unchanged           *\n*        R11          HCT address                 Unchanged           *\n*        R12          Local base address          Unchanged           *\n*        R13          PCE address                 Unchanged           *\n*        R14          Return address              Unchanged           *\n*        R15          Entry address               Unchanged           *\n*                                                                     *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING PRINTBLK,R12        Establish local addressability\n         USING XPL,R7              Establish parm list addressability\n         USING JCT,R10             Establish JCT addressability\n         EJECT\nPRINTBLK $SAVE ,                   Save the caller's registers\n         SPACE 2\n         LR    R12,R15             Set local base\n         L     R10,X001JCT         Load JCT address\n         SPACE 1                                               @430P329\n         L     R3,X001DSCT         Load DSCT Address           @430P329\n         SPACE 1                                               @430P329\n         USING DSCT,R3             Establish Addressability    @430P329\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Print the job name in block letters ( slanted ).             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         LTR   R3,R3               Is the DSCT Valid?          @430P329\n         BZ    NOTDSCT1            No, use JCT Jobname         @430P329\n         LA    R0,DSJBN            Address of TP Job Name      @430P329\n         B     YESDSCT1                                        @430P329\n         SPACE 1                                               @430P329\nNOTDSCT1 LA    R0,JCTJNAME         Get address of jobname      @430P329\n         SPACE 1                                               @430P329\nYESDSCT1 L     R1,X001HBUF         Get buffer address          @430P329\n         SPACE 1                                               @510P214\n        $SEPPDIR (R1)         Send a PDIR in case a SNA REMOTE @510P214\n         SPACE 2\n        $PBLOCK DATA=(R0),BUFFER=(R1),SLANT=YES     Call routine to    C\n                                                  print block letters\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Print a blank line                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         L     R4,X001HBUF         Load buffer address\n         USING SEPDSECT,R4         Establish buffer addressability\n         SPACE 1\n         LA    R4,BUFSTART-BFPDSECT(,R4)     Get address of work space C\n                                                in buffer\n         SPACE 1\n         MVI   PAGELINE,C' '                 Put a blank in buffer\n         LA    R0,1                          Set length to 1\n         SPACE 2\n        $PRPUT DATA=(R4),LEN=(R0),WAIT=YES   Print a blank line\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Print the job id in block letters ( without slant ).         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         LTR   R3,R3               Is the DSCT Valid?          @430P329\n         BZ    NOTDSCT2            No, use JCT JOBID           @430P329\n         LA    R0,DSWKID            Address of TP Work ID      @430P329\n         B     YESDSCT2                                        @430P329\n         SPACE 1                                               @430P329\nNOTDSCT2 LA    R0,JCTJOBID         Get address of Job ID       @430P329\n         SPACE 1                                               @430P329\nYESDSCT2 L     R1,X001HBUF         Get buffer address          @430P329\n         SPACE 2\n        $PBLOCK DATA=(R0),BUFFER=(R1)      Call routine to print       C\n                                                 block letters\n         SPACE 2\n         DROP  R3                  Drop DSCT                   @430P329\n         SPACE 1                                               @430P329\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Print a blank line                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         L     R4,X001HBUF         Load buffer address\n         LA    R4,BUFSTART-BFPDSECT(,R4)     Get address of work space C\n                                                in buffer\n         SPACE 1\n         MVI   PAGELINE,C' '                 Put a blank in buffer\n         LA    R0,1                          Set length to 1\n         SPACE 2\n        $PRPUT DATA=(R4),LEN=(R0),WAIT=YES   Print a blank line\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to the caller.                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n        $RETURN ,                  Return to the caller\n         SPACE 1\n         LTORG ,                   Define literal origin\n         SPACE 1\n         DROP  R4,R7,R10,R12       Drop addressabilities\n         TITLE 'BUILDBOX -- Build and print each line of the separator C\n               page detail box'\n***********************************************************************\n*                                                                     *\n*        BUILDBOX - Build and print each line of the separator        *\n*                   page detail box.                                  *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This sub-routine is called to build and print each           *\n*        line of the separator page detail box.                       *\n*                                                                     *\n*        Addressability to the HASP buffer work space offset          *\n*        is established and the routine CLRLINE is called to          *\n*        clear the separator page line buffer.                        *\n*                                                                     *\n*        The routine PUTFRAME is then called to set up the            *\n*        detail box frame in the top line and the macro $PRPUT        *\n*        is invoked to print it.                                      *\n*                                                                     *\n*        CLRLINE is called to clear the next line and reset           *\n*        the buffer work space pointer.  The detail box               *\n*        information is then inserted in the line buffer and          *\n*        $PRPUT is invoked to print this line.  This process          *\n*        is repeated for all subsequent lines of the detail           *\n*        box.                                                         *\n*                                                                     *\n*        PUTFRAME is called to set up the detail box frame in         *\n*        the bottom line and $PRPUT is called to print it.            *\n*                                                                     *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via $CALL                                           *\n*        Returned via $RETURN                                         *\n*                                                                     *\n*        INPUT:                                                       *\n*                R7           -  Address of Exit 1 parameter list     *\n*                SEPDSECT     -  Separator page line/box DSECT        *\n*        OUTPUT:                                                      *\n*                The separator page detail box is produced.           *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*   REGISTER USAGE (ENTRY/EXIT):                                      *\n*                                                                     *\n*        REG          VALUE ON ENTRY            VALUE ON EXIT         *\n*                                                                     *\n*        R0-R4        N/A                         Unchanged           *\n*        R5           EX1WORK address             Unchanged           *\n*        R6           N/A                         Unchanged           *\n*        R7           Exit 1 parm list addr       Unchanged           *\n*        R8-R10       N/A                         Unchanged           *\n*        R11          HCT address                 Unchanged           *\n*        R12          Local base address          Unchanged           *\n*        R13          PCE address                 Unchanged           *\n*        R14          Return address              Unchanged           *\n*        R15          Entry address               Unchanged           *\n*                                                                     *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING BUILDBOX,R12        Establish local addressability\n         USING XPL,R7              Establish parm list addressability\n         USING EX1WORK,R5          Establish work area addressability\n         USING SEPDSECT,R4         Establish addr'ty to HASP buffer\n         EJECT\nBUILDBOX $SAVE ,                   Save the caller's registers\n         SPACE 1\n         LR    R12,R15             Set local base\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT TOP LINE                              *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n        $CALL  PUTFRAME            Build top line of detail box\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Call PRPUT macro C\n                                                 to print the top line\n         SPACE 1\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT A BLANK LINE                          *\n*         ( FRAME CHARACTERS IN COL 1 AND COL 80 )                    *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES    Print a blank line\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT JOB ID LINE                           *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         L     R10,X001JCT         Establish addressability\n         USING JCT,R10                to JCT\n         SPACE 1\n         L     R3,X001DSCT         Load DSCT Address           @430P329\n         USING DSCT,R3             Establish Addressability    @430P329\n         SPACE 1                                               @430P329\n         MVC   BOXDESC,LBJOBID     Put Job ID label in line    @430P329\n         SPACE 1                                               @430P329\n         LTR   R3,R3               Is the DSCT Valid?          @430P329\n         BZ    NODSCT1             No, use JCT JobID           @430P329\n         MVC   BOXJOBID,DSWKID     Use TP Work ID              @430P329\n         B     YEADSCT1                                        @430P329\n         SPACE 1                                               @430P329\nNODSCT1  MVC   BOXJOBID,JCTJOBID   Use JCT JOBID in line       @430P329\n         SPACE 1\n*---------------------------------------------------------------------*\n*               Segment ID                                            *\n*---------------------------------------------------------------------*\n         SPACE 1\nYEADSCT1 ICM   R6,B'1111',X001PDDB Addr of first PDDB          @R03P010\n         BZ    JOBIDLN               Skip if job trailer exit  @R03P010\n         SPACE 1                                               @R03P010\n         USING PDB,R6              Declare PDDB addressability @R03P010\n         SPACE 1\n         ICM   R2,B'1111',PDBSEGID      Check for segment ID\n         BZ    JOBIDLN             Branch to print line if no seg id\n         MVC   BOXSGLBL,LBSEGID          Fill in Segment ID label\n         SPACE 1\n         CL    R2,=F'99999'        Is segment greater than 99999?\n         BH    BADSEGID                Yes, segment is invalid\n         SPACE 1\n         CVD   R2,EX1CVDWA            Convert the\n         L     R15,=A(SEGMASK)          Segment number\n         MVC   EX1SEGWA,0(R15)            from binary\n         EDMK  EX1SEGWA,EX1CVDWA+5           to EBCDIC\n         SPACE 1\n         LA    R2,EX1SEGWA+L'EX1SEGWA-1    Truncate all leading\n         SLR   R2,R1                          zeros from Segment\n         EX    R2,EXECSEG          Execute the move\n         B     JOBIDLN             Skip over the move\n         SPACE 1\nEXECSEG  MVC   BOXSGINF(*-*),0(R1)     *** EXECUTE *** Seg Number\n         SPACE 1\nBADSEGID MVC   BOXSGINF,=C'*****'       Show segment is invalid\n         SPACE 1\nJOBIDLN $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 2\n         DROP  R6                  Drop PDDB addressability\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT JOB NAME LINE                         *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBJOBNAM    Job Name label              @430P329\n         SPACE 1                                               @430P329\n         LTR   R3,R3               Is the DSCT Valid?          @430P329\n         BZ    NODSCT2             No, use JCT Jobname         @430P329\n         MVC   BOXJNAME,DSJBN      Use TP Job Name             @430P329\n         B     YEADSCT2                                        @430P329\nNODSCT2  MVC   BOXJNAME,JCTJNAME   Fill in Job Name field      @430P329\n         SPACE 1\nYEADSCT2 $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES Produce line @430P329\n         SPACE 1                                               @430P329\n         DROP  R3                  Drop DSCT                   @430P329\n         SPACE 2                                               @430P329\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT USER ID LINE                          *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         L     R9,X001WJOE         Establish work-JOE\n         USING JOE,R9                 addressability\n         SPACE 1\n         MVC   BOXDESC,LBUSERID          User ID label\n         MVC   BOXCRUID,JOECRUID         Fill in USER ID field\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT SYSOUT CLASS LINE                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBSYSCL           SYSOUT Class label\n         MVC   BOXSYSCL,JOECURCL         Fill in SYSYOUT class\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 2\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT OUTPUT GROUP LINE                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBOUTGRP          Output Group label\n         MVC   BOXINFO(L'JOENAME),JOENAME    Fill in JOE Output Name\n         LA    R2,BOXINFO          Point to start of OUTGRP name\n         LA    R6,L'JOENAME        Set length of OUTGRP name\n         SPACE 1\nNAMELOOP CLI   0(R2),C' '          Is this character a blank?\n         BE    SETSYNTX              Yes, go set syntax\n         LA    R2,1(,R2)             No, point to next character\n         BCT   R6,NAMELOOP         Go find end of outgrp name\n         SPACE 1\nSETSYNTX MVI   0(R2),C'.'          Set syntax for separator\n         LA    R2,1(,R2)           Set pointer for separator\n         LH    R0,JOEID1           1st qualifier to convert\n         CVD   R0,EX1CVDWA         Convert to decimal\n         SPACE 1\n         MVC   EX1CVDWA-1(6),=X'402020202120'    Move mask for result\n         ED    EX1CVDWA-1(6),EX1CVDWA+5          Convert to EBCDIC\n         SPACE 1\n         LA    R6,4                Set for                     @510APAR\n         LA    R1,EX1CVDWA           execute\n         EJECT\nJID1LOOP CLI   0(R1),C' '          Is this beginning of JOEid?\n         BNE   JID1FINI              Yes, beginning found\n         BCTR  R6,0                  No, reset count\n         LA    R1,1(,R1)               and pointer\n         B     JID1LOOP                  continue checking\n         SPACE 1\nJID1FINI EX    R6,EXECJOID         Move id to JOEid1\n         LA    R2,1(R6,R2)           Reset pointer             @510APAR\n         MVI   0(R2),C'.'          Set period in\n         LA    R2,1(,R2)           Reset pointer\n         LH    R0,JOEID2           2nd qualifier to convert\n         CVD   R0,EX1CVDWA         Convert to decimal\n         SPACE 1\n         MVC   EX1CVDWA-1(6),=X'402020202120'    Move mask for result\n         ED    EX1CVDWA-1(6),EX1CVDWA+5          Convert to EBCDIC\n         SPACE 1\n         LA    R6,4                Set for                     @510APAR\n         LA    R1,EX1CVDWA           execute\nJID2LOOP CLI   0(R1),C' '          Is this beginning of JOEid?\n         BNE   JID2FINI              Yes, beginning found\n         BCTR  R6,0                  No, reset count\n         LA    R1,1(,R1)               and pointer\n         B     JID2LOOP                  continue checking\n         SPACE 1\nJID2FINI EX    R6,EXECJOID         Move id to JOEid2\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 1\nEXECJOID MVC 0(*-*,R2),0(R1)       **** EXECUTE ****\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT TITLE LINE                            *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         USING SJTRKEYL,R2                   Establish addressability\n         SPACE 1\n         MVC   BOXDESC,LBTITLE               Title label\n         ICM   R2,B'1111',EX1KYLST           Load Key list address\n         BZ    PRTITLE                       Branch if no Key list\n         LA    R2,KYLSTTL(,R2)               Load address of the Title C\n                                                key in the Key List\n         ICM   R1,B'1111',SJTRTPAD           Load Title TU address\n         BZ    PRTITLE                       Branch if no Title\n         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C\n                                               parameter pair\n         SPACE 1\n         BAL   R8,MOVETU                     Get Title data from TU\n         SPACE 1\nPRTITLE $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 1\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT A BLANK LINE                          *\n*         ( FRAME CHARACTERS IN COL 1 AND COL 80 )                    *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES     Produce the line\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*               BUILD AND PRINT DESTINATION LINE                      *\n*               --------------------------------                      *\n*                                                                     *\n*        Convert the binary route code ( in JOEROUT ) to its          *\n*        corresponding symbolic destination value using the           *\n*        $DEST macro.                                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBDEST                Fill in destination label\n         MVC   EX1DEST(L'JOEROUT),JOEROUT    Copy binary route code\n         SPACE 1\n         L     R9,X001CJOE          Get addressability to char-JOE\n         SPACE 1\n        $DEST  DEST=EX1DEST,LEN=L'EX1DEST,CONV=SBINARY,                C\n               USER=JOEUSER                  Convert route code\n         SPACE 1\n         L     R9,X001WJOE          Reset addressability to work-JOE\n         SPACE 1\n         MVC   BOXDEST,EX1DEST               Fill in destination value\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT NAME LINE                             *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBNAME                Fill in Name label\n         ICM   R2,B'1111',EX1KYLST           Load Key/TU prt list addr\n         BZ    NONAME                        Branch if no Key list\n         LA    R2,KYLSTNM(,R2)               Load address of the Name  C\n                                                key in the Key List\n         ICM   R1,B'1111',SJTRTPAD           Load Name TU address\n         BZ    NONAME                        Branch if no Name\n         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C\n                                                 parameter pair\n         SPACE 1\n         BAL   R8,MOVETU                     Get Name data from TU\n         SPACE 1\n         B     PRTNAME                       Branch to print the Name\n         SPACE 1\nNONAME   MVC   BOXPNAME,JCTPNAME             Name from the JOB stmt\n         SPACE 1\nPRTNAME $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 1\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT ROOM LINE                             *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBROOM                Fill in Room label\n         ICM   R2,B'1111',EX1KYLST           Load Key/TU prt list addr\n         BZ    NOROOM                        Branch if no Key list\n         LA    R2,KYLSTRM(,R2)               Load address of the Room  C\n                                                key in the Key List\n         ICM   R1,B'1111',SJTRTPAD           Load Room TU address\n         BZ    NOROOM                        Branch if no Room\n         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C\n                                                 parameter pair\n         SPACE 1\n         BAL   R8,MOVETU                     Get Room data from TU\n         SPACE 1\n         B     PRTROOM                       Branch to print the Room\n         SPACE 1\nNOROOM   MVC   BOXROOMN,JCTROOMN             Room from the JOB stmt\n         EJECT\nPRTROOM $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT BUILDING LINE                         *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBBLDG                Fill in Building label\n         ICM   R2,B'1111',EX1KYLST           Load Key/TU prt list addr\n         BZ    PRTBLDG                       Branch if no Key list\n         LA    R2,KYLSTBL(,R2)               Load address of the Bldg  C\n                                                key in the Key List\n         ICM   R1,B'1111',SJTRTPAD           Load Building TU address\n         BZ    PRTBLDG                       Branch if no Building\n         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C\n                                                 parameter pair\n         SPACE 1\n         BAL   R8,MOVETU                     Get Building data from TU\n         SPACE 1\nPRTBLDG $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 1\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT DEPARTMENT LINE                       *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBDEPT                Fill in Department label\n         ICM   R2,B'1111',EX1KYLST           Load Key/TU prt list addr\n         BZ    PRTDEPT                       Branch if no Key list\n         LA    R2,KYLSTDP(,R2)               Load address of the Dept  C\n                                                key in the Key List\n         ICM   R1,B'1111',SJTRTPAD           Load Department TU address\n         BZ    PRTDEPT                       Branch if no Department\n         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C\n                                                 parameter pair\n         SPACE 1\n         BAL   R8,MOVETU                    Get Department data from TU\n         SPACE 1\nPRTDEPT $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*               BUILD AND PRINT ADDRESS LINES                         *\n*               -----------------------------                         *\n*        The address can be from 1 to 4 lines long.  Any lines        *\n*        that are unused must be printed as blank lines, but the      *\n*        label \"ADDRESS:\" must appear on the first line even if       *\n*        no address was specified on the OUTPUT JCL.                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBADDR                Fill in Address label\n         ICM   R2,B'1111',EX1KYLST           Load Key/TU prt list addr\n         BZ    NOADDR                        Branch if no Key list\n         LA    R2,KYLSTAD(,R2)               Load address of the Addr  C\n                                                key in the Key/TU List\n         ICM   R1,B'1111',SJTRTPAD           Load Address TU address\n         BZ    NOADDR                        Branch if no Address\n         SPACE 1\n         LH    R3,DOCNTNUM-DOCNUNIT(,R1)     Number of lines used for  C\n                                                 Address\n         CL    R3,$F4                        Number greater than four?\n         BNH   SAVENUML                        No, save number of lines\n         LA    R3,4                            Yes, set to max of four\n         SPACE 1\nSAVENUML STH   R3,EX1ADNUM                   Save number of lines\n         LTR   R3,R3                         Number greater than zero?\n         BZ    NOADDR                          No, produce blank lines\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Loop to build/print multiple line address                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         LA    R1,DOCNTENT-DOCNUNIT(,R1)     Address of TU length/     C\n                                                 parameter pair\n         SPACE 1\n         USING DOCNTFLD,R1                   Establish addressability\n         SPACE 1\nADDRLOOP LR    R6,R1                         Save the TU address\n         SPACE 1\n         BAL   R8,MOVETU                     Get Address data from TU\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 1\n         LR    R1,R6                         Restore TU address\n         SPACE 1\n         LH    R15,DOCNTLEN                  Move to next\n         LA    R1,L'DOCNTLEN(R15,R1)           Address Length/Data pair\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         BCT   R3,ADDRLOOP                   Loop again if more data\n         SPACE 1\n         DROP  R1                            Drop addressability\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Loop to build/print multiple blank lines                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nNOADDR   LH    R6,$H4                       Maximum number of          C\n                                             available lines of address\n         LH    R3,EX1ADNUM                  Number Address lines used\n         SR    R6,R3                        Determine the number       C\n                                                    of unused lines\n         LA    R6,1(,R6)                    Add 1 for extra blank line\n         SPACE 1\nBLKLINE $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES    Print blank lines\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         BCT   R6,BLKLINE                       Loop if more to print\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*               BUILD AND PRINT THE PRINT TIME LINE                   *\n*                                                                     *\n*    Note: The TIME macro with the DEC parameter returns the time     *\n*          of day in R0 and the date in R1.                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBPRTIME             Fill in Printer Time label\n         SPACE 1\n         TIME  DEC                          Get time\n         SPACE 1\n         ST    R0,EX1CVDWA                  Save the time\n         LR    R6,R1                        Save the date\n         L     R15,=A(TIMEMASK)             Get Edit mask address\n         MVC   BOXPRTIM,0(R15)              Copy edit pattern\n         ED    BOXPRTIM,EX1CVDWA            Edit time into proper field\n         CLI   BOXPRTIM,X'21'      LEADING 0?                    @430GO\n         BNE   PRLINE                NO, NO NEED TO EDIT         @430GO\n         MVI   BOXPRTIM,X'F0'      PUT PRINTABLE 0 IN FIELD      @430GO\n         SPACE 1\nPRLINE  $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES  PRODUCE LINE   @430GO\n         SPACE 1\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT THE PRINT DATE LINE                   *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBPRDATE             Fill in Printer Date label\n         SPACE 1\n        $CALL  FMTDATE                      Format date\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT PRINTER NAME LINE                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBPRNAME             Printer Name label\n         SPACE 1\n         USING DCT,R3                       Establish addressability\n         L     R3,X001DCT                      to printer DCT\n         SPACE 1\n         MVC   BOXPDEVN,DCTDEVN             Device Name\n         SPACE 1\n         DROP  R3                           Drop DCT addressability\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         SPACE 1\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT SYSTEM NAME LINE                      *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n         MVC   BOXDESC,LBSYSTEM             System label\n         MVC   BOXSYSTM,$SID                System ID\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Produce the line\n         EJECT\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT A BLANK LINE                          *\n*         ( FRAME CHARACTERS IN COL 1 AND COL 80 )                    *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES     Produce the line\n         SPACE 1\n*---------------------------------------------------------------------*\n*               BUILD AND PRINT BOTTOM LINE                           *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CLRLINE          Clear line and get buffer offset\n         SPACE 1\n        $CALL  PUTFRAME            Build last line of detail box\n         SPACE 1\n        $PRPUT DATA=(R4),LEN=L'PAGELINE,WAIT=YES      Call PRPUT macro C\n                                                to print the last line\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to the caller.                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDBOX   DS    0H\n         SPACE 1\n        $RETURN ,                  Return to the caller\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Static data and the literal pool                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LTORG ,                            Define literal origin\n         SPACE 1\n         DROP  R2,R4,R5,R7,R9,R10,R12       Drop addressabilities\n         TITLE 'CLRLINE  -- Clear the output line; Reset buffer work spC\n               ace addressability'\n***********************************************************************\n*                                                                     *\n*        CLRLINE -  Resets addressability to the beginning of         *\n*                   the buffer work space within the HASP             *\n*                   buffer that is passed to the exit.                *\n*                   Clears the detail box output buffer line          *\n*                   and inserts the box frame character in            *\n*                   columns 1 and 80.                                 *\n*                                                                     *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This subroutine loads R4 with the address of the work        *\n*        space in the HASP buffer passed via the exit parameter       *\n*        list.  This ensures that the data to be printed by           *\n*        $PRPUT is at the correct offset in the buffer.               *\n*                                                                     *\n*        The detail box output buffer line is cleared so that         *\n*        residual data is not printed on the current output           *\n*        line.  The box frame character is inserted in columns        *\n*        1 and 80.                                                    *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via a  BAL R8,CLRLINE                               *\n*        Returned via address in R8                                   *\n*                                                                     *\n*                                                                     *\n*   REGISTER USAGE:                                                   *\n*                                                                     *\n*        REG          VALUE ON ENTRY         VALUE ON EXIT            *\n*                                                                     *\n*        R0-R3        N/A                      Unchanged              *\n*        R4           N/A                      Buffer work space      *\n*                                                address              *\n*        R5-R6        N/A                      Unchanged              *\n*        R7           Parameter list address   Unchanged              *\n*        R8           Return address           Unchanged              *\n*        R9-R15       N/A                      Unchanged              *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING SEPDSECT,R4                 Establish\n         USING XPL,R7                           addressability\n         EJECT\nCLRLINE  L     R4,X001HBUF                 Load buffer address and\n         LA    R4,BUFSTART-BFPDSECT(,R4)     point to the work space   C\n                                                offset\n         SPACE 1\n         MVI   PAGELINE,C' '                        Clear the\n         MVC   PAGELINE+1(L'PAGELINE-1),PAGELINE       separator line\n         MVI   BOXCOL1,C'*'                         Insert\n         MVI   BOXCOL80,C'*'                           frame characters\n         SPACE 1\n         BR    R8                          Return to caller\n         SPACE 1\n         LTORG ,                           Define literal origin\n         SPACE 1\n         DROP  R4,R7                       Drop addressability\n         TITLE 'MOVETU   -- Move TEXT UNIT text into separator page detC\n               ail box'\n***********************************************************************\n*                                                                     *\n*        MOVETU -  Move the Text Unit ( TU ) text from the TU         *\n*                  output area to the separator page detail           *\n*                  box line.                                          *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This subroutine is called to move the TU text from the       *\n*        TU output area to the detail box output line.  Since         *\n*        TUs are variable length (up to sixty characters long),       *\n*        the detail line is padded with blanks on the right after     *\n*        the move is performed.                                       *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via a  BAL R8,MOVETU                                *\n*        Returned via address in R8                                   *\n*                                                                     *\n*                                                                     *\n*   REGISTER USAGE:                                                   *\n*                                                                     *\n*        REG          VALUE ON ENTRY         VALUE ON EXIT            *\n*                                                                     *\n*        R0           N/A                      Destroyed              *\n*        R1           Address of TU            Destroyed              *\n*                      length/parameter pair                          *\n*        R2-R3        N/A                      Unchanged              *\n*        R4           Address of output        Unchanged              *\n*                      buffer work space                              *\n*        R5-R13       N/A                      Unchanged              *\n*        R14-R15      N/A                      Destroyed              *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING DOCNTFLD,R1                  Establish\n         USING SEPDSECT,R4                      addressability\n         EJECT\nMOVETU   LA    R14,DOCNTPRM                 Load TU text address\n         LH    R15,DOCNTLEN                 Length of TU text\n         ICM   R15,B'1000',$BLANKS          Set pad character to blank\n         LA    R0,BOXINFO                   Set up the\n         LA    R1,L'BOXINFO                    receiving field\n         SPACE 1\n         MVCL  R0,R14                       Move the text\n         SPACE 1\n         BR    R8                           Return to the caller\n         SPACE 1\n         LTORG ,                            Define literal origin\n         SPACE 1\n         DROP  R1,R4                        Drop TU, SEPDSECT addr'ty\n         TITLE 'PUTFRAME -- Create the detail box frame in the top and C\n               bottom lines'\n***********************************************************************\n*                                                                     *\n*        PUTFRAME - Create the detail box frame in the top and        *\n*                   bottom lines.                                     *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This subroutine is called to create the frame in the         *\n*        top and bottom lines of the separator page detail box.       *\n*                                                                     *\n*        The detail box frame will contain ...                        *\n*                                                                     *\n*          '**START***'  for job header separator calls               *\n*          '**END*****'  for job trailer separator calls              *\n*          '**CONT****'  for job continuation separator calls         *\n*                                                                     *\n*        propagated across the length of the top and bottom           *\n*        lines of the detail box.                                     *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via $CALL                                           *\n*        Returned via $RETURN                                         *\n*                                                                     *\n*   REGISTER USAGE ( ENTRY/EXIT ):                                    *\n*                                                                     *\n*        REG          VALUE ON ENTRY         VALUE ON EXIT            *\n*                                                                     *\n*        R0-R3        N/A                      Unchanged              *\n*        R4           Address of output        Unchanged              *\n*                      buffer work space                              *\n*        R5-R6        N/A                      Unchanged              *\n*        R7           Parameter list address   Unchanged              *\n*        R8-R10       N/A                      Unchanged              *\n*        R11          HCT address              Unchanged              *\n*        R12          N/A                      Unchanged              *\n*        R13          PCE address              Unchanged              *\n*        R14          Return address           Unchanged              *\n*        R15          Entry address            Unchanged              *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING PUTFRAME,R12                 Establish\n         USING SEPDSECT,R4                       addressabilities\n         USING XPL,R7\n         SPACE 1\nPUTFRAME $SAVE ,                   Save the caller's registers\n         SPACE 2\n         LR    R12,R15             Set local base register\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Determine the type of call and branch to insert              *\n*        frame characters in the detail box output line.              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         TM    X001IND,X001JTLR    Is this a trailer call?     @R01P010\n         BO    TRAILER                If yes, go to TRAILER\n         SPACE 1\n         TM    X001IND,X001JCNT    Else, continuation call?    @R01P010\n         BO    CONTINUE               If yes, go to CONTINUE\n         SPACE 1\n*---------------------------------------------------------------------*\n*        Insert frame for job header calls.                           *\n*---------------------------------------------------------------------*\n         SPACE 1\n         MVC   BOXLINE(10),=CL10'**START***'   Insert 'START'\n         SPACE 1\n         B     FILLFRAM            Go propagate frame characters\n         SPACE 1\n*---------------------------------------------------------------------*\n*        Insert frame for job continuation calls.                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nCONTINUE MVC   BOXLINE(10),=CL10'**CONT****'   Insert 'CONT'\n         SPACE 1\n         B     FILLFRAM            Go propagate frame characters\n         SPACE 1\n*---------------------------------------------------------------------*\n*        Insert frame for job trailer calls.                          *\n*---------------------------------------------------------------------*\n         SPACE 1\nTRAILER  MVC   BOXLINE(10),=CL10'**END*****'       Insert 'END'\n         SPACE 1\n*---------------------------------------------------------------------*\n*        Propagate frame characters across the length of              *\n*        the detail box output line.                                  *\n*---------------------------------------------------------------------*\n         SPACE 1\nFILLFRAM MVC   BOXLINE+10(L'BOXLINE-10),BOXLINE    Fill in frame\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to caller.                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n        $RETURN ,                  Return to caller\n         SPACE 2\n         LTORG ,                   Define literal origin\n         SPACE 2\n         DROP  R4,R7,R12           Drop addressabilities\n         TITLE 'FMTDATE  -- Format date'\n***********************************************************************\n*                                                                     *\n*        FMTDATE  - Convert the date to a readable format.            *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        The date is converted from a packed decimal format           *\n*        0CYYDDDF to a readable format 'DD MMM YYYY' where ..    @R07AE\n*                                                                     *\n*          Packed Decimal Format:                                     *\n*                                                                     *\n*          C   represents number of centuries after 1900 A.D.         *\n*         YY   represents the last two digits of the year             *\n*        DDD   represents the JULIAN value for the date               *\n*                                                                     *\n*          Readable Format:                                           *\n*                                                                     *\n*         DD   represents the date                                    *\n*        MMM   represents the three character abbreviation            *\n*                 for the month                                       *\n*       YYYY   represents the YEAR                               @R07AE\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via $CALL                                           *\n*        Returned via $RETURN                                         *\n*                                                                     *\n*   REGISTER USAGE ( ENTRY/EXIT ):                                    *\n*                                                                     *\n*        REG          VALUE ON ENTRY         VALUE ON EXIT            *\n*                                                                     *\n*        R0-R3        N/A                      Unchanged              *\n*        R4           Current buffer address   Unchanged              *\n*        R5           Exit work area address   Unchanged              *\n*        R6           Date in packed decimal   Unchanged              *\n*                     format 0CYYDDDF                                 *\n*        R7           Parameter list address   Unchanged              *\n*        R8-R10       N/A                      Unchanged              *\n*        R11          HCT address              Unchanged              *\n*        R12          N/A                      Unchanged              *\n*        R13          PCE address              Unchanged              *\n*        R14          Return address           Unchanged              *\n*        R15          Entry address            Unchanged              *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING FMTDATE,R12         Establish local addressability\n         USING XPL,R7              Establish XPL addressability\n         USING SEPDSECT,R4         Establish buffer addr'ty\n         USING EX1WORK,R5          Establish exit work area addr'ty\n         SPACE 1\nFMTDATE $SAVE  ,                   Save the caller's registers\n         SPACE 2\n         LR    R12,R15             Set local base register\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Setup date conversion table.                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         LTR   R6,R6               Is there a date to format?\n         BZ    NODATE                No, go return to caller\n         SPACE 1\n         LA    R3,BOXINFO          Get addr of output area\n         XC    EX1CVDWA,EX1CVDWA   Clear out conversion work area\n         ST    R6,EX1CVDWA+4       Store date in conversion work area\n         SPACE 1\n         L     R2,=A(YEARTABL)     Copy date conversion table\n         MVC   MONTHS,0(R2)          incase it needs to be updated\n         SPACE 1\n         TM    EX1CVDWA+5,X'01'    Adjust\n         BO    EDITYEAR              table\n         TM    EX1CVDWA+5,X'12'        on\n         BM    EDITYEAR                  leap\n         MVI   FEB,29                      years\n         SPACE 1\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Convert year to readable format.                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nEDITYEAR MVC   8(3,R3),=X'F02120'    Get pattern                 @R07AE\n         ED    8(3,R3),EX1CVDWA+5    Edit last two digit of yr   @R07AE\n         MVI   6(R3),X'40'           Blank fill character        @R07AE\n         CLI   EX1CVDWA+4,X'00'      Is this 20th Century yr?    @R07AE\n         BNE   X121CENT              No, must be 21st Century    @R07AE\n         MVC   7(2,R3),=CL2'19'      Year will be '19xx'         @R07AE\n         B     XYRCNT                edit last 2 digits of yr    @R07AE\n         SPACE 1                                                 @R07AE\nX121CENT MVC   7(2,R3),=CL2'20'      Year will be '20xx'         @R07AE\n         SPACE 1\nXYRCNT   MVC   EX1CVDWA(6),$ZEROS  Clear all but JULIAN day      @R07AE\n         SLR   R0,R0               Clear register\n         CVB   R6,EX1CVDWA         Convert day to binary\n         LA    R2,MONTHS-4         Get addr of date conversion table\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Convert day and month to readable format.                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nDATELOOP SLR   R6,R0               Convert\n         LA    R2,4(,R2)             JULIAN day\n         IC    R0,0(,R2)               value to\n         CLR   R0,R6                     standard day\n         BL    DATELOOP                     value\n         SPACE 1\n         CVD   R6,EX1CVDWA         Convert day to decimal value\n         UNPK  0(2,R3),EX1CVDWA+6(2)   Place DAY (DD)\n         OI    1(R3),X'F0'               into work area\n         SPACE 1\n         MVI   2(R3),C' '          Insert delimiter\n         MVC   3(3,R3),1(R2)       Move EBCDIC month (MMM)\n         SPACE 1\nNODATE   DS    0H                  End of conversion\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to caller.                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n        $RETURN ,                  Return to caller\n         SPACE 2\n         LTORG ,                   Define literal origin\n         SPACE 2\n         DROP  R4,R5,R7,R12        Drop addressabilities\n         TITLE 'EX1RECV  -- First level recovery routine'\n***********************************************************************\n*                                                                     *\n*        EX1RECV  - First level recovery for exit 1                   *\n*                                                                     *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This routine gets control if an abend occurs within          *\n*        the sample exit.  The registers that are required for        *\n*        retry processing are restored from the ERA ( Error           *\n*        Recovery Area ).                                             *\n*                                                                     *\n*        Since the abend may have occurred while attempting           *\n*        to return the exit 1 work area storage, an additional        *\n*        $ESTAE recovery environment will be created to handle        *\n*        an abend within this first level recovery routine.           *\n*        Note that HASPTERM will pop the save areas until it          *\n*        has found the save area level that issued the $ESTAE         *\n*        give control to the recovery routine specified.              *\n*                                                                     *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via $CALL                                           *\n*        Returned via $RETURN                                         *\n*                                                                     *\n*   REGISTER USAGE ( ENTRY/EXIT ):                                    *\n*                                                                     *\n*        REG          VALUE ON ENTRY         VALUE ON EXIT            *\n*                                                                     *\n*        R0           R0 at time of error      Unchanged              *\n*        R1           ERA address              Unchanged              *\n*        R2-R10       R2-R10 at time of error  Unchanged              *\n*        R11          HCT address              Unchanged              *\n*        R12          R12 at time of error     Unchanged              *\n*        R13          PCE address              Unchanged              *\n*        R14          Return address           Unchanged              *\n*        R15          Entry address            Unchanged              *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING ERA,R8              Establish ERA addressability\n         USING EX1RECV,R12         Establish local addressability\n         SPACE 1\nEX1RECV $SAVE  ,                   Save the caller's registers\n         SPACE 2\n         LR    R12,R15             Set local base register\n         SPACE 1\n         LR    R8,R1               Set ERA address\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Establish second level ESTAE recovery environment.           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n        $ESTAE RECADDR==A(EX1REC2),NAME=EX1RECV,RETRY=ENDRECOV,        C\n               BASE=(R12)          Establish ESTAE environment\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Check if PCEUSER0 has address of exit work area by           *\n*        verifying that the eyecatcher is valid.  If the              *\n*        eyecatcher is valid release the storage obtained             *\n*        for work areas needed to produce a separator page            *\n*        ( see PRODSEP routine ).  The addresses pointing to          *\n*        these work areas were previously saved in the exit           *\n*        work area.                                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         ICM   R4,B'1111',PCEUSER0     Get work area address\n         BZ    ENDRECOV                Bypass RETWORK if no storage\n         XC    PCEUSER0,PCEUSER0       Clear PCEUSER0 field\n         SPACE 1\n         CLC   0(4,R4),=CL4'EX1W'      Check if work area      @430P329C\n                                          eyecatcher is valid  @430P329\n         BNE   ENDRECOV            Bypass RETWORK if not valid @430P329\n         SPACE 1\n         LA    R4,4(,R4)           Add 4 for eyecatcher\n         USING EX1WORK,R4          Establish EX1WORK addressability\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Release TU output area storage                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         ICM   R1,B'1111',EX1TUADR     Load TU output area addr\n         BZ    RELKEYL             Branch if no TU storage\n         S     R1,$F4              Subtract 4 for eyecatcher\n         SPACE 1\n         XC    EX1TUADR,EX1TUADR       Set address to zero\n         SPACE 1\n        $RETWORK (R1)              Release the TU storage\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Release Key/TU pointer list storage area                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nRELKEYL  ICM   R1,B'1111',EX1KYLST     Load Key/TU ptr list addr\n         BZ    RELSRWA             Branch if no Key/TU storage\n         S     R1,$F4              Subtract 4 for eyecatcher\n         SPACE 1\n         XC    EX1KYLST,EX1KYLST       Set address to zero\n         SPACE 1\n        $RETWORK (R1)              Release the keylist storage\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Release SWBTUREQ RETRIEVE service work area storage          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nRELSRWA  ICM   R1,B'1111',EX1SRWA      Load service work area addr\n         BZ    ENDRECOV            Branch if no work storage\n         S     R1,$F4              Subtract 4 for eyecatcher\n         SPACE 1\n         XC    EX1SRWA,EX1SRWA     Set address to zero\n         SPACE 1\n        $RETWORK (R1)              Release the working storage\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to caller.                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDRECOV $ESTAE CANCEL             Cancel 2nd level recovery environ\n         SPACE 2\n        $SETRP PERCOLATE           Percolate to callers recovery\n         SPACE 2\n        $RETURN ,                  Return to caller\n         SPACE 2\n         LTORG ,                   Define literal origin\n         SPACE 2\n         DROP  R4,R8,R12           Drop addressabilities\n         TITLE 'EX1REC2  -- Second level recovery routine'\n***********************************************************************\n*                                                                     *\n*        EX1REC2  - Second level recovery for sample exit 1           *\n*                                                                     *\n*                                                                     *\n*   FUNCTION:                                                         *\n*                                                                     *\n*        This routine gets control if an abend occurs within          *\n*        the first level recovery routine.                            *\n*                                                                     *\n*        If this is not the first time that this recovery             *\n*        routine has been called, PERCOLATE to the first              *\n*        level recovery routine ( EX1RECV ).  Otherwise,              *\n*        resume processing at the retry label ENDRECOV in             *\n*        EX1RECV.                                                     *\n*                                                                     *\n*                                                                     *\n*   LINKAGE:                                                          *\n*                                                                     *\n*        Accessed via $CALL                                           *\n*        Returned via $RETURN                                         *\n*                                                                     *\n*   REGISTER USAGE ( ENTRY/EXIT ):                                    *\n*                                                                     *\n*        REG          VALUE ON ENTRY         VALUE ON EXIT            *\n*                                                                     *\n*        R0           R0 at time of error      Unchanged              *\n*        R1           ERA address              Unchanged              *\n*        R2-R10       R2-R10 at time of error  Unchanged              *\n*        R11          HCT address              Unchanged              *\n*        R12          R12 at time of error     Unchanged              *\n*        R13          PCE address              Unchanged              *\n*        R14          Return address           Unchanged              *\n*        R15          Entry address            Unchanged              *\n*                                                                     *\n*   RETURN CODES:                                                     *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n*   OTHER CONSIDERATIONS:                                             *\n*                                                                     *\n*        None                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING ERA,R8              Establish ERA addressability\n         USING EX1REC2,R12         Establish local addressability\n         SPACE 1\nEX1REC2 $SAVE  ,                   Save the caller's registers\n         SPACE 2\n         LR    R12,R15             Set local base register\n         SPACE 1\n         LR    R8,R1               Set ERA address\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        If this is not the first time through this ESTAE             *\n*        environment, PERCOLATE to next ESTAE recovery level.         *\n*        Otherwise, retry at resume point stored in PRE.              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         CLC   PCEUSER1,$ZEROS     Has ESTAE been recently entered?\n         BNE   EX1PERK               Yes, percolate\n         MVC   PCEUSER1,$F1        Indicate ESTAE entered\n         SPACE 1\n         L     R1,ERAPRE                    Get PRE address\n         MVC   ERAREG12,PREBASE-PRE(R1)     Set local base\n         L     R2,PRERESUM-PRE(,R1)         Get resume address\n         SPACE 2\n        $SETRP RECOVER,RESUME=(R2)          Set recovery address\n         SPACE 2\n         B     ENDREC2             Return to caller\n         SPACE 2\nEX1PERK $SETRP PERCOLATE          Percolate to callers recovery\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Return to caller.                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDREC2 $RETURN ,                 Return to caller\n         SPACE 2\n         DROP  R8,R12             Drop addressabilities\n         SPACE 2\n         LTORG ,\n         TITLE 'PRINT/PUNCH Separator Exit -- Data Definitions'\n***********************************************************************\n*                                                                     *\n*               DATA DEFINITIONS                                      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        All labels that will appear in the separator page            *\n*        detail box are listed below.                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nLBJOBID  DC    CL(L'BOXDESC)'JOBID='\nLBSEGID  DC    CL(L'BOXDESC)'SEGMENT ID='\nLBJOBNAM DC    CL(L'BOXDESC)'JOB NAME='\nLBUSERID DC    CL(L'BOXDESC)'USER ID='\nLBSYSCL  DC    CL(L'BOXDESC)'SYSOUT CLASS='\nLBOUTGRP DC    CL(L'BOXDESC)'OUTPUT GROUP='\nLBTITLE  DC    CL(L'BOXDESC)'TITLE='\nLBDEST   DC    CL(L'BOXDESC)'DESTINATION='\nLBNAME   DC    CL(L'BOXDESC)'NAME='\nLBROOM   DC    CL(L'BOXDESC)'BIN= '\nLBBLDG   DC    CL(L'BOXDESC)'BUILDING='\nLBDEPT   DC    CL(L'BOXDESC)'DEPARTMENT='\nLBADDR   DC    CL(L'BOXDESC)'ADDRESS='\nLBPRTIME DC    CL(L'BOXDESC)'PRINT TIME='\nLBPRDATE DC    CL(L'BOXDESC)'PRINT DATE='\nLBPRNAME DC    CL(L'BOXDESC)'PRINTER NAME='\nLBSYSTEM DC    CL(L'BOXDESC)'SYSTEM='\n         SPACE 1\nTIMEMASK DC    X'21207A20207A2020'        TIME MASK\nSEGMASK  DC    X'402020202020'            SEGMENT ID MASK\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        JULIAN date to standard DAY and MONTH conversion table.      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nYEARTABL DC    AL1(31),C'JAN',AL1(28),C'FEB'\n         DC    AL1(31),C'MAR',AL1(30),C'APR'\n         DC    AL1(31),C'MAY',AL1(30),C'JUN'\n         DC    AL1(31),C'JUL',AL1(31),C'AUG'\n         DC    AL1(30),C'SEP',AL1(31),C'OCT'\n         DC    AL1(30),C'NOV',AL1(255),C'DEC'\n         SPACE 1\nMONTHS   EQU   $REGSAVE,12*4       Save area for copy of above table\nFEB      EQU   MONTHS+4            Entry for FEBRUARY\n         TITLE 'PRINT/PUNCH Separator Exit -- OUTPUT Key List Equates'\n***********************************************************************\n*                                                                     *\n*        OUTPUT JCL Keys List equates                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nKYLSTTL  EQU   0*SJTRKLEN               Title Key\nKYLSTNM  EQU   1*SJTRKLEN               Name Key\nKYLSTRM  EQU   2*SJTRKLEN               Room Key\nKYLSTBL  EQU   3*SJTRKLEN               Building Key\nKYLSTDP  EQU   4*SJTRKLEN               Dept key\nKYLSTAD  EQU   5*SJTRKLEN               Address Key\n         TITLE 'PRINT/PUNCH Separator Exit -- Exit 1 Work Area DSECT'\n***********************************************************************\n*                                                                     *\n*        EXIT 1 WORK AREA DSECT                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEX1WORK  DSECT\n         DS    0F\nEX1SWBRC DS    XL2                 SWBTUREQ logical error return code\nEX1PLPTR DS    A                   Address of SWBTUREQ parameter list  C\n                                     (the SWBTUREQ service requires    C\n                                      R1 to point to a word that       C\n                                      points to the parameter list)\nEX1SRWA  DS    F                   Address of SWBTUREQ service         C\n                                     working storage\nEX1SRWL  DS    H                   Length of SWBTUREQ service          C\n                                     working storage\nEX1KYLST DS    F                   Address of the Key List             C\n                                     used for SWBTUREQ SERVICE\nEX1TUADR DS    F                   Address of TU output area           C\n                                     used for SWBTUREQ SERVICE\nEX1TUSZ  DS    H                   Size of the TU output area          C\n                                     used for SWBTUREQ SERVICE\nEX1ADNUM DS    H                   Number of lines of ADDRESS ( OUTPUT C\n                                                 JCL keyword )\nEX1SEGWA DS    XL6                 Segment number work area\n         DS    0D\nEX1CVDWA DS    D                   'Convert to decimal' work area\nEX1DEST  DS    0CL16               Destination conversion\n         DS    D                        work area\n         DS    D\n         DS    0F\nEX1RETPL DS    XL(SJTRLGTH)        SWBTUREQ RETRIEVE parameter list\nEX1WKLEN EQU   *-EX1WORK           Length of EX1WORK DSECT\n         TITLE 'PRINT/PUNCH Separator Exit -- Separator Page Detail BoxC\n                DSECT'\n***********************************************************************\n*                                                                     *\n*        SEPARATOR PAGE DETAIL BOX LINE DSECT                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSEPDSECT DSECT                     Separator page detail box DSECT\nPAGELINE DS    0CL132\n         SPACE 1\nBOXLINE  DS    0CL80\n         SPACE 1\n*---------------------------------------------------------------------*\n*                                  COL           DESCRIPTION          *\n*---------------------------------------------------------------------*\n         SPACE 1\nBOXCOL1  DS    CL1                 1             Frame Character\n         DS    CL1                 2             Blank\nBOXDESC  DS    CL13                3-15          Line Description\n         DS    CL2                 16-17         Blanks\nBOXINFO  DS    CL60                18-77         Line Information\n         DS    CL2                 78-79         Blanks\nBOXCOL80 DS    CL1                 80            Frame Character\n         SPACE 1\n         DS    CL52                Unused section\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                  COL           DESCRIPTION          *\n*---------------------------------------------------------------------*\n         SPACE 2\n         ORG   BOXINFO                    Job ID Area\nBOXJOBID DS    CL(L'JCTJOBID)       18-25         Job id\n         SPACE 1\n         ORG   BOXINFO+22                 Segment Area\nBOXSGLBL DS    C'SEGMENT ID:  '    40-52         Segment ID label\nBOXSGINF DS    CL5                 53-57         Segment ID Number\n         SPACE 1\n         ORG   BOXINFO                    Job Name Area\nBOXJNAME DS    CL(L'JCTJNAME)      18-25         Job name\n         SPACE 1\n         ORG   BOXINFO                    User ID Area\nBOXCRUID DS    CL(L'JOECRUID)      18-25         User ID\n         SPACE 1\n         ORG   BOXINFO                    Sysout class Area\nBOXSYSCL DS    CL(L'JOECURCL)      18            Sysout class\n         EJECT\n*---------------------------------------------------------------------*\n*                                  COL           DESCRIPTION          *\n*---------------------------------------------------------------------*\n         SPACE 2\n         ORG   BOXINFO                    Destination Area\nBOXDEST  DS    CL(L'EX1DEST)       18-25         Destination\n         SPACE 1\n         ORG   BOXINFO                    Programmer name Area\nBOXPNAME DS    CL(L'JCTPNAME)      18-25         Programmer name\n         SPACE 1\n         ORG   BOXINFO                    Programmer room Area\nBOXROOMN DS    CL(L'JCTROOMN)      18-25         Programmer room\n         SPACE 1\n         ORG   BOXINFO                    Print Time Area\nBOXPRTIM DS    C'HH:MM:SS'         18-25         Print Time\n         SPACE 1\n         ORG   BOXINFO                    Print Date Area\nBOXPRDAT DS    C'DD MMM YY'        18-26         Print Date\n         SPACE 1\n         ORG   BOXINFO                    Printer Name Area\nBOXPDEVN DS    CL(L'DCTDEVN)       18-25         Printer Name\n         SPACE 1\n         ORG   BOXINFO                    System Name Area\nBOXSYSTM DS    CL(L'$SID)          18-21         System Name\n         EJECT\n***********************************************************************\n*        END OF DECLARES                                              *\n***********************************************************************\n         SPACE 1\n&J2SECTN &J2SECTT ,                Restore code section        @430P270\n         SPACE 1\n         LTORG ,                   DEFINE LITERAL ORIGIN\n         SPACE 1\n         DROP  ,                   Kill addressabilities\n         TITLE 'PRINT/PUNCH Separator Exit -- Module End ($MODEND)'\n        $MODEND\nAPARNUM  DC    CL8'NONE'           APAR NUMBER\nPTFNUM   DC    CL8'NONE'           PTF NUMBER\n         END   ,                   END OF STSCX01A\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STSCX05B": {"ttr": 8968, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00&\\x01\\x07%?\\x01\\x07%?\\t\\x03\\x00\\xa3\\x00\\xa3\\x00\\x00\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-09-10T00:00:00", "modifydate": "2007-09-10T09:03:26", "lines": 163, "newlines": 163, "modlines": 0, "user": "T0SM0"}, "text": "* *%PDSDOC 00 JES2 EXIT05 PREVENT PURGING OF JOBS BY RANGE\n*********************************************************************\n*                                                                   *\n*                        HASP EXIT 05                               *\n*                                                                   *\n*     THIS EXIT PREVENTS PURGING JOBS BY RANGE.                     *\n*                                                                   *\n*     ENTRY POINT: EXIT05                                           *\n*                                                                   *\n*     INPUT REGISTERS:                                              *\n*        R0-4   N/A                                                 *\n*        R5     POINTER TO CURRENT OPERAND ADDRESS                  *\n*        R6     INCREMENT VALUE OF 4                                *\n*        R7     POINTER TO ADDRESS OF LAST OPERAND                  *\n*        R8-10  N/A                                                 *\n*        R11    HCT ADDRESS                                         *\n*        R12    N/A                                                 *\n*        R13    PCE ADDRESS                                         *\n*        R14    RETURN ADDRESS                                      *\n*        R15    ENTRY ADDRESS                                       *\n*                                                                   *\n*     OUTPUT REGISTERS:                                             *\n*        R0     UNCHANGED OR $CRET MESSAGE LENGTH                   *\n*        R1-14  UNCHANGED                                           *\n*        R15    RETURN CODE                                         *\n*                                                                   *\n*     REGISTER USAGE(INTERNAL):                                     *\n*        R0-8   WORK REGISTERS                                      *\n*        R9     WORKAREA ADDRESS                                    *\n*        R10    JCT ADDRESS                                         *\n*        R11    HCT ADDRESS                                         *\n*        R12    BASE REGISTER                                       *\n*        R13    PCE ADDRESS                                         *\n*        R14-15 WORK AND LINKAGE REGISTERS                          *\n*                                                                   *\n*  FUNCTION -                                                       *\n*                                                                   *\n*     THIS IS A VERY SPECIALIZED ROUTINE.  IT ONLY REJECTS PURGE    *\n*     COMMANDS THAT ARE PURGING BY RANGE - I.E. $PJ1000-9999        *\n*     IT DOES ALL CHECKS USING IMMEDIATE VALUES, AND IS NOT SUITED  *\n*     TO SCANNING MORE THAN THE SINGLE CONDITION IT WAS WRITTEN FOR.*\n*                                                                   *\n*                                                                   *\n*     AUTHOR: STEPHEN MCCOLLEY                                      *\n*             ATLANTA, GA                                           *\n*                                                                   *\n*********************************************************************\n* CHANGES:                                                          *\n* 11/03/2006 - REWROTE IT ALL.                         SGM          *\n*                                                                   *\n*********************************************************************\n\n         COPY  $HASPGBL\nSTSCX05B $MODULE ENVIRON=JES2,                                         X\n               RMODE=ANY,                                              X\n               IBMJES2=SAMPLE,                                         X\n               TITLE='JES2 USER EXIT5B',                               X\n               CVT,                                                    X\n               PDS,                                                    X\n               PSA,                                                    X\n               RPL,                                                    X\n               $BUFFER,                                                X\n               $CADDR,                                                 X\n               $CAT,                                                   X\n               $COMWORK,                                               X\n               $DCT,                                                   X\n               $HASPEQU,                                               X\n               $HCT,                                                   X\n               $HCCT,                                                  X\n               $JCT,                                                   X\n               $JCTX,                                                  X\n               $JOE,                                                   X\n               $JQE,                                                   X\n               $LMT,                                                   X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PCE,                                                   X\n               $PIT,                                                   X\n               $PSV,                                                   X\n               $TQE,                                                   X\n               $USERCBS,                                               X\n               $XECB,                                                  X\n               $XIT,                                                   X\n               $XRT\n\n         USING HCT,R11             HCT ADDRESSABILITY\n         USING PCE,R13             PCE ADDRESSABILITY\n\n\nEXIT05B  $ENTRY BASE=R12           EXIT ROUTINE ENTRY POINT\n\n*********************************************************************\n*                                                                   *\n*        SAVE CALLER'S REGISTERS AND ESTABLISH ADDRESSABILITIES.    *\n*                                                                   *\n*********************************************************************\n\n        $SAVE  NAME=EXIT05B        SAVE CALLER'S REGISTERS\n         LR    R12,R15             SET BASE REGISTER\n\n*********************************************************************\n*                                                                   *\n*        DETERMINE IF THIS IS A PURGE COMMAND.                      *\n*                                                                   *\n*********************************************************************\n\nEXIT100  CLI   COMVERB,C'P'         IS IT A PURGE COMMAND ?\n         JNE   EXIT499               IF NOT JUST RETURN TO JES NOW\n         J     EXIT400               -ELSE CHECK FOR PURGE FY RANGE\n\n**********************************************************************\n**                                                                  **\n**  PREVENT THE USE OF $PJ(X-X) HERE.                               **\n**                                                                  **\n**********************************************************************\nEXIT400  LH    R2,COMLNGTH             GET THE LENGTH OF THE COMMAND\n         BCTR  R2,R0                   MINUS ONE FOR THE $\n         BCTR  R2,R0                   MINUS ONE FOR THE FIRST VERB\n         LA    R1,COMVERB+1             POINT PAST COMMAND NAME\n         AR    R2,R1                    R2 = END OF COMMAND TO TEST\nCHKVERB1 CLI   0(R1),C'J'               IS NEXT CHAR. = C'J'\n         JE    CHKRANG1\n         CLI   0(R1),C'S'               IS NEXT CHAR. = C'S'\n         JE    CHKRANG1\n         CLI   0(R1),C'T'               IS NEXT CHAR. = C'T'\n         JE    CHKRANG1\n         CLI   0(R1),C' '               IS IT A BLANK ?\n         JE    SCANBLNK\n         J     EXIT499\n\nCHECKJ1  CLI   0(R1),C' '               SCAN TO NEXT NON BLANK CHAR.\n         JNE   CHKVERB1\nSCANBLNK EQU   *\n         LA    R1,1(R0,R1)\n         CR    R1,R2\n         JNL   EXIT499                  JUST GO HOME CLEANLY\n         J     CHECKJ1\n\nCHKRANG1 CLI   0(R1),C'-'               SEE IF A RANGE IS BEING USED\n         JE    EXIT490                  IF YES THEN GO HOME MAD.\n         LA    R1,1(R0,R1)              LOOP TO END OF FIELD\n         CR    R1,R2\n         JL    CHKRANG1\n\nEXIT499  XR    R15,R15                  JUST GO HOME\nRETMAC   $RETURN RC=(R15)\n\nEXIT490  $CWTO MSG=MSG1,L=L'MSG1,MSGID=999,LAST=YES\n         LA    R15,8(R0,R0)\n         J     RETMAC               JUMP TO THE RETURN MACRO ABOVE\n\nMSG1     DC    C'PURGING BY RANGE IS NOT ALLOWED - NO DASHES PLEASE!'\n*********************************************************************\n*                                                                   *\n*        RETURN TO CALLER.                                          *\n*                                                                   *\n*********************************************************************\n\n         LTORG\n\n        $MODEND\n\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STSCX15A": {"ttr": 8972, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00X\\x01\\x07%?\\x01\\x07%?\\t\\x05\\x00Z\\x00Z\\x00\\x00\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-09-10T00:00:00", "modifydate": "2007-09-10T09:05:58", "lines": 90, "newlines": 90, "modlines": 0, "user": "T0SM0"}, "text": " PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1,REUS=REFR) '\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    JES2 USER EXIT 15.  DATA SET SELECTION / COPY USER EXIT.         *\n*                                                                     *\n* TDS MOD TO FORCE FCB LOAD UNLESS CHANGE TO AND FROM STD FORMS.      *\n*                                                                     *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         COPY  $HASPGBL\nSTSCX15A $MODULE ENVIRON=JES2,                                         *\n               TITLE='JES2 USER EXIT 15 - ENTRY AND SET UP',           *\n               RMODE=ANY,                                              *\n               RPL,                REQ'D BY $BUFFER                    *\n               $BUFFER,            REQ'D BY EXIT CODE                  *\n               $CAT,               REQ'D BY $HCT                       *\n               $DCT,               REQ'D BY $HCT                       *\n               $XECB,              REQ'D BY MY WTOR ERROR RECOVERY     *\n               $HASPEQU,           REQ'D BY REG CONVENTIONS            *\n               $HCT,               REQ'D BY $SAVE/$RETURN              *\n               $JCT,                                                   *\n               $JCTX,                                                  *\n               $JOE,                                                   *\n               $JQE,               REQ'D BY $HCT                       *\n               $MIT,               REQ'D BY $HCT                       *\n               $PCE,               REQ'D BY $HCT AND AMIKOM            *\n               $PDDB,                                                  *\n               $PADDR,                                                 *\n               $PPPWORK,           REQ'D BY AMIKOM                     *\n               $TQE,               hasp timer queue element            *\n               $XPL                EXIT PARAMETER LIST         @RMF420\n         SPACE 2\nEXIT15A  $ENTRY BASE=R12\n         $SAVE\n         LR    R12,R15\n*   REGISTER USAGE\n*   R13  ADDRESS OF PCE\n*   R12  PROGRAM BASE REG\n*   R11  ADDRESS OF HCT\n*   R9   ADDRESS OF INPUT PARAMETER AREA\n*   R8   ADDRESS OF DCT\n*   R7   ADDRESS OF JCT\n*   R6   ADDRESS OF PDDB\n*   R5   ADDRESS OF XECB\n         USING PCE,R13\n         USING XPL,R9                                           @RMF420\n         USING DCT,R8\n         USING JCT,R7\n         USING PDB,R6\n         SPACE 1\n         LR    R9,R1               INPUT PARAMETER\n         L     R8,X015DCT          DCT ADDRESS                  @RMF420\n         L     R7,X015JCT          JCT ADDRESS                  @RMF420\n         L     R6,X015PDDB         PDDB ADDRESS                 @RMF420\n         TITLE 'JES2 USER EXIT 15 - DETERMINE INPUT PARAMETERS'\n*   DETERMINE WHY WE ARE HERE\nBRTABLE  EQU   *                   BRANCH TABLE\n         TM    XPLIND,X015DSEL      CHECK FOR DATA SELECTION    @RMF420\n         BO    EX15SEL             DATA SET SELECTION / PDDB    @RMF420\n         B     EX15EXIT            DATA SET SEPARATOR / COPY\n         TITLE 'JES2 USER EXIT 15 - SELECTION / PDDB'\nEX15SEL  EQU   *                   DATA SET SELECTION / PDDB\n         CLI   DCTDEVID,DCTPRTID   IS THIS A PRINTER  Q.\n         BNE   EX15EXIT            NO, RETURN, NOT A PRINTER\n         SPACE 2\n* TDS MOD TO FORCE FCB LOAD UNLESS CHANGE TO AND FROM STD FORMS.  * JWS\n         CLC   DCTFORMS,PDBFORMS  FORMS CHANGE   Q.\n         BE    TDSNOFOR           NO\n         CLC   DCTFORMS(3),$STDFORM  STOCK PAPER MOUNTED  Q.\n         BNE   TDSFORCE           NO, RELOAD FCB\n         CLC   PDBFORMS(3),$STDFORM  STOCK PAPER REQUESTED  Q.\n         BE    TDSNOFOR           YES, NO FCB LOAD\nTDSFORCE OI    DCTPPSW,DCTPPSWC   (SET SWITCH TO FORCE FCB LOAD)\nTDSNOFOR DS    0H                 (END OF MOD)\n         SPACE 1\n         B     EX15EXIT            RETURN\n         EJECT\nEX15EXIT EQU   *                   RETURN FROM THIS USER EXIT\n         SLR   R15,R15             NORMAL EXIT\n         SPACE 1\n$RETURN  $RETURN RC=(R15)          FINAL RETURN\n         LTORG\n         SPACE 1\n         $MODEND\n         SPACE 1\n         EJECT\n         PRINT ON,NOGEN,NODATA\n         DCBD  DSORG=PS\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STSCX36A": {"ttr": 9219, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x16\\x01\\x07%?\\x01\\x07%?\\t\\x06\\x01\\x8d\\x01\\x8d\\x00\\x00\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-09-10T00:00:00", "modifydate": "2007-09-10T09:06:16", "lines": 397, "newlines": 397, "modlines": 0, "user": "T0SM0"}, "text": " PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1,REUS=REFR) '\nSTSCX36A TITLE 'EXIT 36 (PRE SAF CALL) - (MODULE COMMENT BLOCK)'\n* **PROPRIETARY STATEMENT**********************************************\n*                                                                     *\n*   LICENSED MATERIALS-PROPERTY OF IBM                                *\n*   THIS MODULE IS \"RESTRICTED MATERIALS OF IBM\"                      *\n*   5695-047 (C) COPYRIGHT IBM CORP 1990                              *\n*   SEE COPYRIGHT INSTRUCTIONS                                        *\n*                                                                     *\n*   STATUS = HJE4420                                                  *\n*                                                                     *\n* **END-OF-PROPRIETARY-STATEMENT***************************************\n***********************************************************************\n*                                                                     *\n* MODULE NAME = HASX36A (HASX36A CSECT)                               *\n*                                                                     *\n* DESCRIPTIVE NAME = Sample Pre-SAF call user exits                   *\n*                                                                     *\n* FUNCTION =                                                          *\n*                                                                     *\n*         PROPRMT  - Cause userid propagation for RJE jobs            *\n*                                                                     *\n* NOTES =                                                             *\n*                                                                     *\n*    DEPENDENCIES = NONE                                              *\n*                                                                     *\n*    RESTRICTIONS = NONE                                              *\n*                                                                     *\n*    ATTRIBUTES = JES2 REENTRANT, RMODE 24, AMODE 31                  *\n*                                                                     *\n* ENTRY POINTS =                                                      *\n*                                                                     *\n*         SYSLOG   - Allow all TSO users to view SYSLOG               *\n*                                                                     *\n*         NOCREDEL - Bypass SAF calls for data set create and deletes *\n*                                                                     *\n*         PROPRMT  - Cause userid propagation for RJE jobs            *\n*                                                                     *\n* MACROS =                                                            *\n*                                                                     *\n*         JES2 - $ENTRY, $MODEND, $MODULE, $RETURN, $SAVE             *\n*                                                                     *\n* CHANGE ACTIVITY:                                                    *\n* SGM -   ALTERED THE RACROUTE VERIFY CALLS TO USE $$DOUBLE   DECEMBER*\n*         AS THE  LOCATION TO SAVE THE ACEE POINTER, INSTEAD    12TH  *\n*         OF THE TOP OF THE XPL (R8)                           2006   *\n*                                                                     *\n* $420P306=PTM      HJE4420 910118 R_W1: Sample Exit Prolog Problems  *\n*                                                                     *\n* A000000-999999    CREATED FOR JES2 4.1.0                         @410\n***********************************************************************\n         TITLE 'SAMPLE EXIT 36 (PRE SAF CALL) -- PROLOG ($HASPGBL)'\n         COPY  $HASPGBL\n         TITLE 'SAMPLE EXIT 36 (PRE SAF CALL) -- PROLOG ($MODULE)'\nSTSCX36A $MODULE ENVIRON=USER,                                         C\n               TITLE='PROLOG ($MODULE)',                               C\n               RMODE=ANY,                                              C\n               SAFP,               SAF ICHSAFP - parm list mapping     C\n               TOKEN,              SAF ICHRUTKN - TOKEN mapping        C\n               $CADDR,             Common storage address list         C\n               $DTE,               Daughter task element               C\n               $ERA,               Erorr recovery area                 C\n               $HASPEQU,           General EQUATES                     C\n               $HCCT,              Common storage control table        C\n               $HCT,               Private storage control table       C\n               $HFAME,             HASP file allocation map element    C\n               $JCT,               jes2 job control block              C\n               $JCTX,              JES2 JOB CONTROL BLOCK              C\n               $MIT,               Module information table            C\n               $PADDR,             Private storage address list        C\n               $PARMLST,           Parameter list values/equates       C\n               $PCE,               Processor control element           C\n               $PSV,               Processor save area                 C\n               $SAFINFO,           saf control block                   C\n               $SCAT,              SYSOUT class attribute table        C\n               $TQE,               timer queue element                 C\n               $XECB,              Extended ECB                        C\n               $WAVE,              Work access verification element    C\n               $XIT,               Exit information table              C\n               ($XPL,GEN)          Exit parameter list\n         TITLE 'CAUSE USERID PROPAGATION FOR RJE JOBS -- (ROUTINE PROPRC\n               MT)'\n***********************************************************************\n*                                                                     *\n*        PROPRMT - Cause the userid of RJE to propagate to its jobs.  *\n*                                                                     *\n* FUNCTION :                                                          *\n*                                                                     *\n*        This routine will allow installations to have jobs submitted *\n*        from remote work stations act as if the jobs had been        *\n*        submitted from logged on TSO user sessions.  This will only  *\n*        work if the RJE signon was processed via RACF.  The session  *\n*        type on the RACROUTE REQUEST=VERIFYX call will be changed    *\n*        from RJEBATCH to INTBATCH.  This will indicate to RACF that  *\n*        the USERID of the submittor should be propagated to the job  *\n*        if there is no USER= parameter coded on the job card.  (The  *\n*        USERID is not propagated for RJEBATCH session types.)        *\n*        For RJEs, the USERID is the work station name.               *\n*                                                                     *\n*        This will cause the audit records to look funny since jobs   *\n*        will be accepted into the system that otherwise would have   *\n*        failed.                                                      *\n*                                                                     *\n*        JESINPUT class profiles will have to be changed to           *\n*        accomodate port of entrys (POEs) of the form Rn.RDm.         *\n*        Note: For remotes numbered from 1000-9999, the form          *\n*              is RnnnnRDm (no inner period).                         *\n*                                                                     *\n* LINKAGE :                                                           *\n*                                                                     *\n*        This routine is entered via a BASR R14,R15 from the USERSUB  *\n*        routine in the HASCSIRQ CSECT of the HASPSSSM load module.   *\n*        Control is returned via $RETURN.                             *\n*                                                                     *\n* OPERATION :                                                         *\n*                                                                     *\n*        LOADMOD(HASX36A) STORAGE=CSA                          @420P306\n*        EXIT(36)  ROUTINES=PROPRMT,STATUS=ENABLED             @420P306\n*                                                                     *\n* ENVIRONMENT :                                                       *\n*                                                                     *\n*        Subtask                                                      *\n*                                                                     *\n* RECOVERY :                                                          *\n*                                                                     *\n*        Default recovery provided by general purpose subtask.        *\n*                                                                     *\n* REGISTER USAGE (ENTRY/EXIT) :                                       *\n*                                                                     *\n*    REG       VALUE ON ENTRY             VALUE ON EXIT               *\n*                                                                     *\n*    R0        N/A                        Unchanged                   *\n*    R1        Address of parm list       Unchanged                   *\n*    R2-R10    N/A                        Unchanged                   *\n*    R11       HCCT address               Unchanged                   *\n*    R12       N/A                        Unchanged                   *\n*    R13       Save area                  Unchanged                   *\n*    R14       Return address             Unchanged                   *\n*    R15       Routine address            Return code                 *\n*                                                                     *\n* PARAMETER LIST :                                                    *\n*                                                                     *\n*        See $XPL expansion                                           *\n*                                                                     *\n* REGISTER USAGE (INTERNAL) :                                         *\n*                                                                     *\n*    REG       VALUE                                                  *\n*                                                                     *\n*    R0        N/A                                                    *\n*    R1        XPL (parameter list addr)                              *\n*    R2-R3     N/A                                                    *\n*    R4        SAF and RACINIT parm list address                      *\n*    R5-R10    N/A                                                    *\n*    R11       HCCT address                                           *\n*    R12       Routine base address                                   *\n*    R13       Available save area                                    *\n*    R14       Linkage                                                *\n*    R15       Return code                                            *\n*                                                                     *\n* DATA AREA USAGE (INTERNAL) :                                        *\n*                                                                     *\n*    NAME          VALUE                                              *\n*                                                                     *\n*    $SEAINIT      The FUNCODE for a VERIFYX                          *\n*                                                                     *\n*    INITSESN      The SESSION value in RACINIT(VERIFYX) parm list    *\n*    SAFPRACP      Offset of the specific RACROUTE request type parms *\n*    TOKRBCH       The equate for SESSION=RJEBATCH                    *\n*                                                                     *\n*    XPLIND        Exit parameter list indicator byte - FUNCODE value *\n*    X036PARM      Address of the RACROUTE parameter list             *\n*                                                                     *\n* RETURN CODES (R15 ON EXIT) :                                        *\n*                                                                     *\n*         0 - ALWAYS RETURNED                                         *\n*                                                                     *\n* OTHER CONSIDERATIONS :                                              *\n*                                                                     *\n*         N/A                                                         *\n*                                                                     *\n***********************************************************************\n         TITLE 'CAUSE USERID PROPAGATION FOR RJE JOBS -- PROPRMT'\n         USING XPL,R8              XPL  ADDRESSABILITY\n         USING HCCT,R11            HCCT addressability\n         SPACE 1\nEXIT36A  $ENTRY BASE=R12\n         SPACE 1\n        $SAVE TRACE=YES,NAME=PROPRMT  Save callers registers\n         SPACE 1\n         LR    R12,R15             Set local base\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Check for VERIFYX SAF call with session type RJEBATCH.       *\n*        Change all RJEBATCH session types to INTBATCH.               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         LR    R8,R1               SAVE REGISTER 1\n         CLI   XPLIND,$SEAINIT     WAS THE CALL FOR VERIFYX?\n         BNE   TRYREST             NO, THEN NOT INTERESTED\n         $GETMAIN RC,LV=$$LGTH,BNDRY=DBLWD,LOC=BELOW\n         LTR   R15,R15\n         BZ    $$CONT0\n         DC    X'0000'\n$$CONT0  EQU   *\n         SPACE 1\n         LR    R9,R1               PUT GETMAIN ADDR INTO R9\n         USING $$DMYARA,R9         TELL SYTEM TO USE R9 FOR ADDR\n         MVC   RACF_INIT(RACFLTHI),RACFINIT  MOVE IN LIST FORMAT\n         MVI   BLANK_AREA,X'40'      MOVE IN BLANK\n         MVC   BLANK_AREA+1($$SPACES-1),BLANK_AREA\n         MVC   R15AREA,=F'0'       SET R15AREA TO BINARY ZEROES\n         MVI   THREE_DIGITSW,0     SET TO BINARY ZERO AT START\n         ICM   R4,B'1111',X036RCBA GET RELATED CONTROL BLOCK (SAFINFO)\n         CLC   =C'SFI',0(R4)       is it sfi\n         BE    $$CONT              YES GO ON\n         DC    X'0000'             OTHERWISE DUMP\n$$CONT   EQU   *\n         USING SAFINFO,R4          USE R4 AS BASE\n         ICM   R5,B'1111',SFIJCT   GET ADDR OF JCT\n         USING JCT,R5              USE R 5 AS JCT\n         CLC   =C'JCT',JCTID       IS IT JCT\n         BE    $$CONT1             YES GO ON\n         DC    X'0000'             OTHERWISE DUMP\n$$CONT1  EQU   *\n         SR    R7,R7               SET R7 TO ZEROES\n         CLC   =C'TZZZ',JCTJNAME   CHECK FOR SPECIAL JOBNAME\n         BNE   NOT_A_TEST         IF NOT JUST CONTINUE AS NORMAL\n         CLC   =C'N016',JCTJNAME+4  TEST FOR BOGUS NODE\n         BNE   CHECK_BOGUS_REMOTE  IF NOT CHECK FOR REMOTE TESTER\n         ICM   R7,3,=H'16'          STUFF IN INVALID NODE\n         B     NODE_TESTER         GO VALIDATE NODE\nCHECK_BOGUS_REMOTE EQU *           COME HERE TO TEST REMOTE\n         CLC   =C'R301',JCTJNAME+4  TEST FOR 3 DIGIT ONE\n         BNE   TEST_FOR_2DIGIT\n         ICM   R7,3,=H'301'        PUT IN 301\n         B     REMOTE_TESTER\nTEST_FOR_2DIGIT EQU *              TEST FOR 2 DIGIT\n         CLC   =C'R020',JCTJNAME+4  IS IT 2 DIGIT GUY\n         BNE   NOT_A_TEST          PROCESS AS NORMAL JOB\n         ICM   R7,3,=H'20'         STUFF 20 INTO R7\n         B     REMOTE_TESTER\nNOT_A_TEST EQU *                   COME HERE -- NORMAL PROCESS\n         ICM   R7,3,JCTRRMT        TEST FOR REMOTE ID\n         BZ    CHECK_NODES         IF 0 CHECK THE NODES FIELD\nREMOTE_TESTER EQU *                FORCE HERE FOR REMOTE TESTING\n         MVC   $$RMTROT,=C'RMT$'   MOVE IN STATIC PORTION USERID\n         MVC   $$RMTGNM,=C'RMT'    MOVE IN STATIC PORTION OF GRP ID\n         B     CONVERT             OTHERWISE GO CONVERT\nCHECK_NODES    EQU *               COME HER TO TEST NODE-IDS\n         ICM   R7,3,JCTRNODE       INSERT 2 BYTES OF NODE ID\n         BZ    EXIT36AD            IF VL = 0 EXIT PROGRAM\n         CLM   R7,B'0011',=H'13'   IS IT ORLANDO AND VMFLO7\n         BE    SET_NODE            YES GO CONVERT\n         CLM   R7,B'0011',=H'14'   IS IT 9221 EITHER PLACE\n         BE    SET_NODE            YES GO CONVERT\n         CLM   R7,B'0011',=H'15'   IS IT ATLANTA AND 9370\n         BE    SET_NODE            YES GO CONVERT\n*  CODE ADDED TO SUPPORT RSCSGAA8 AND RSCSFLO7 IN ATLANTA.\n         CLM   R7,B'0011',=H'9'    IS IT ATLANTA AND RSCSGAA8\n         BE    SET_NODE            YES GO CONVERT\n         CLM   R7,B'0011',=H'20'   IS IT ATLANTA AND RSCSFLO7\n         BE    SET_NODE            YES GO CONVERT\n         B     EXIT36AD            ANYBODY ELSE NO PROPAGATION\nNODE_TESTER  EQU  *                COME HERE TO TEST NODES\nSET_NODE EQU   *                   COME TO SET UP NODE NAMES\n         MVC   $$RMTROT,=C'NJE$'   MOVE IN STATIC PORTION USERID\n         MVC   $$RMTGNM,=C'NJE'    MOVE IN STATIC PORTION OF GRP ID\nCONVERT  EQU   *                   COME HERE IF 9370 OR 9221\n         CVD   R7,$$DOUBLE         CONVERT REMOTE # TO PACKED\n         UNPK  $$EXTNAL,$$DOUBLE   CONVERT TO EXTERNAL DECIMAL\n         OI    $$EXTNAL+2,X'F0'    GET RID OF SIGN\n         CLI   $$EXTNAL,X'F0'      Q--IS THE HIGH NUMBER ZERO\n         BE    TWO_DIGIT           A--YES RMT/NODE 00-99\n         OI    THREE_DIGITSW,1     TURN ON THREE DIGIT SWITCH\n         MVC   $$RMTNNN,$$EXTNAL      MOVE 3 DIGITS INTO NAME\n         MVC   $$RMTGN3,$$RMTNNN      MOVE THREE TO GROUP ID\n         MVI   $$RMTUSR_LENGTH,7   MAKE LENGTH A LITTLE BIGGER\n         MVI   $$RMTGRP_LENGTH,6   SAME HERE\n         B     $$SETUP_RACROUTE    AND GO TO RACF CALL\nTWO_DIGIT EQU  *                   COME HERE ON 00-99\n         MVC   $$RMTNN,$$EXTNAL+1  MOVE TO USERID FIELD\n         MVC   $$RMTGNO,$$RMTNN    MOVE TO GROUP NUMBER FIELD\n         MVI   $$RMTUSR_LENGTH,6   PUT LENGTH INTO FLD\n         MVI   $$RMTGRP_LENGTH,5   PUT GROUP LENGTH INTO FLD\n$$SETUP_RACROUTE EQU *             COME HERE FROM 100-999\n         MVI   LOG_AREA_LGTH,LOG_DATA   STORE LENGTH IN 1 BY\n         MVC   LOGUSER,$$RMTROT    MOVE RMT GROUP AND USER ID\n         MVC   LOGGROUP,$$RMTGNM   MOVE RMT GROUP AND USER ID\n         LA    R6,LOG_AREA_LGTH    STORE INTO R6\n         LA    R2,$$RMTUSR_LENGTH  LOAD LENGTH + USER ID ADDR\n         LA    R3,$$RMTGRP_LENGTH  LOAD LENGTH + GROUP ID ADDR\n         LA    R10,RACF_INIT       LOAD ADDR OF LIST RACROUTE\n*        RACROUTE REQUEST=VERIFY,ACEE=(R8),GROUP=(R3),PASSCHK=NO,\n         RACROUTE REQUEST=VERIFY,ACEE=$$DOUBLE,GROUP=(R3),             X\n               RELEASE=1.9,ENVIR=CREATE,USERID=(R2),LOG=ALL,           X\n               WORKA=$$WRKARA,MF=(E,(R10)),LOGSTR=(R6),PASSCHK=NO\n         LTR   R15,R15             TEST FOR ZEROES\n         BZ    VALID_NODE          IF ZERO RACF KNOWS HIM\n         MVC   X036RETC,=F'8'      SET RETRUN CODE 8\n         MVC   X036RSNC,=F'14'     SET REASON CODE 14\n         OI    XPLRESP,X036NORC   TURN ON OVERRIDE BIT\n         B     EXIT36AD            ANYBODY ELSE NO PROPAGATION\n         DC    X'0000'             OTHERWISE DUMP\nVALID_NODE EQU *                   USERID EXISTS\n         MVC   RACF_INIT(RACFLTHI),RACFINIT  MOVE IN LIST FORMAT\n*        RACROUTE REQUEST=VERIFY,ACEE=(R8),RELEASE=1.9,ENVIR=DELETE,\n         RACROUTE REQUEST=VERIFY,ACEE=$$DOUBLE,                        X\n               WORKA=$$WRKARA,MF=(E,(R10)),ENVIR=DELETE,RELEASE=1.9\n         LTR   R15,R15             TEST FOR GOOD DELETE\n         BZ    RACF_OK             ABLE TO DELETE ACEE OK\n         DC    X'0001'             SHOULD NOT GET HERE\nRACF_OK  EQU   *                   COME HERE ON GOOD DELETE\n         OI    JCTFLAG1,JCT5CKPT   REWRITE THIS JCT           RF-950313\n         OI    JCTFLAG2,JCT2AVDP+JCT2AVD  VALIDATION FLAG\n         TM    THREE_DIGITSW,1     IS IT 2 OR 3 POS NUMBER\n         BZ    JUST_TWO            IF ZERO RMT/NODE =00/99\n         MVI   SFIUIDL,7           MOVE LENGTH OF USERID\n         MVI   SFISUIDL,7          MOVE LENGTH OF USERID\n         MVI   SFIGRPL,6           MOVE LENGTH OF GROUP ID\n         MVI   SFISGRPL,6          MOVE LENGTH OF GROUP ID\n         MVC   SFIUID(L'NAME_ULENGTH7),$$RMTROT    MOVE IN USERID\n         MVC   SFISUID(L'NAME_ULENGTH7),$$RMTROT   MOVE IN USERID\n         MVC   SFIGRP(L'NAME_GLENGTH6),$$RMTGNM    MOVE IN GROUP NAME\n         MVC   SFISGRP(L'NAME_GLENGTH6),$$RMTGNM   MOVE IN GROUP NAME\n         B     RACF_OVERRIDE\nJUST_TWO EQU   *                   COME HERE 00/99\n         MVI   SFIUIDL,6           MOVE LENGTH OF USERID\n         MVI   SFISUIDL,6          MOVE LENGTH OF USERID\n         MVI   SFIGRPL,5           MOVE LENGTH OF GROUP ID\n         MVI   SFISGRPL,5          MOVE LENGTH OF GROUP ID\n         MVC   SFIUID(L'NAME_ULENGTH),$$RMTROT     MOVE IN USERID\n         MVC   SFISUID(L'NAME_ULENGTH),$$RMTROT    MOVE IN USERID\n         MVC   SFIGRP(L'NAME_GLENGTH),$$RMTGNM     MOVE IN GROUP NAME\n         MVC   SFISGRP(L'NAME_GLENGTH),$$RMTGNM    MOVE IN GROUP NAME\nRACF_OVERRIDE  EQU *\n         OI    SFIFLAG1,SFI1SREQ+SFI1NORM                rf-950314\n         L     R6,X036PARM\n         USING SAFP,R6\n         LR    R8,R6\n         A     R8,SAFPRACP\n         RACROUTE REQUEST=VERIFYX,PASSCHK=NO,MF=(M,(R6)),RELEASE=1.9,  x\n               SESSION=INTBATCH\n         B     EXIT36AD\n         TITLE 'END OF PROPRMT ROUTINE -- RETURN TO CALLER'\n***********************************************************************\n*                                                                     *\n*        Always return to the caller with a zero return code so that  *\n*        any other exits will get control.  There will be no changes  *\n*        in the condition byte so that the SAF call can be made or    *\n*        not be made as decided by other exits.                       *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nEXIT36AD EQU  *\n         $FREMAIN RU,LV=$$LGTH,A=(R9)\nTRYREST  SLR    R15,R15            Indicate to take other exits\n        $RETURN RC=(R15)           Restore callers registers and return\n         SPACE 1\n         LTORG\nRACFINIT RACROUTE REQUEST=VERIFY,RELEASE=1.9,MF=L,PASSCHK=NO\nRACFLTHI EQU *-RACFINIT    sets racflthi to length of racroute\n$$DMYARA DSECT\n$$WRKARA DS    CL512              WORKAREA FOR RACROUTE\nRACF_INIT ORG *+RACFLTHI LEAVE ENOUGH ROOM FOR LIST VERSION\nBLANK_AREA DS 0C\n$$DOUBLE DC    D'0'               CONVERSION FIELD FOR BINARY\n$$RMTUSR_LENGTH DC X'0'           LENGTH OF USERID\nNAME_ULENGTH  DS 0CL6           GET LENGTH OF USER NAME\nNAME_ULENGTH7 DS 0CL7           GET LENGTH OF USER NAME\n$$RMTROT DC    CL4'RMT$'          STATIC PORTION OF USERID\n$$RMTNN  DC    CL2'0'             DYNAMIC PORTION OF USERID\n         ORG   $$RMTNN            SET LOCATION COUNTER BACK\n$$RMTNNN DC    CL3'0'             3 DIGIT REMOTE NUMBER\n$$RMTGRP_LENGTH DC X'0'           LENGTH OF GROUPID\nNAME_GLENGTH  DS 0CL5           GET LENGTH OF GROUP NAME\nNAME_GLENGTH6 DS 0CL6           GET LENGTH OF GROUP NAME\n$$RMTGNM DC    CL3'RMT'           STATIC PORTION OF GROUP NAME\n$$RMTGNO DC    CL2'0'             DYNAMIC PORTION OF GROUP NAME\n         ORG   $$RMTGNO           SET LOCATION COUNTER BACK\n$$RMTGN3 DC    CL3'0'             DYNAMIC PORTION OF GROUP NAME\n$$EXTNAL DC    CL3'0'             UNPACKED FORMAT OF REMOTE #\nR15AREA  DC    F'0'               HOLD AREA FOR R15 IF NEEDED\nTHREE_DIGITSW  DC X'0'            SET TO BINARY ZERO\n$$SPACES EQU   *-BLANK_AREA       LENGTH OF AREA TO SET TO BLANKS\nLOG_AREA_LGTH DC X'0'             1 BYTE LENGTH FIELD\nLOGUSER  DC   CL7' '              MAX LGTH OF FIELD\nLOGGROUP DC   CL6' '              MAX LGTH OF IELD\nLOG_DATA EQU  *-LOG_AREA_LGTH     LENGTH OF LOGGED DATA\n$$LGTH   EQU   *-$$DMYARA         LENGTH OF GETMAIN AREA\n         CSECT\n         DROP  ,\n         TITLE 'SAMPLE USER EXIT 36 ROUTINES -- END ($MODEND)'\n        $MODEND ,\nAPARNUM  DC    CL8'00000000'       APAR NUMBER\n         END   ,                   END OF STSCX36A\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT766/FILE766.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT766", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}