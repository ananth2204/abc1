{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012645000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 646646, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE717.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE717.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x0b\\x06'", "DS1TRBAL": "b'ql'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xf4\\x00\\n\\x04\\xf5\\x00\\x06\\x00\\x0c'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04H\\x00\\x00\\x01\\x06\\x07O\\x01\\x06\\x07O\\t(\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf2@@@'", "ispf": {"version": "04.72", "flags": 0, "createdate": "2006-03-15T00:00:00", "modifydate": "2006-03-15T09:28:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-472"}, "text": "REGULAR CBT TAPE - VERSION 472    FILE:  717\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT472.FILE717\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    3200    PO\n\n   PDS117I 5 MEMBERS COUNTED; CUMULATIVE SIZE IS 5,847 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   03/15/06    09:28:55    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DOCFILE": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x05\\x18_\\x01\\x05\\x18_\\x10\\t\\x0f\\xe0\\x0f\\xe0\\x00\\x00\\xd4\\xe2\\xe6\\xd6\\xd9\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-07-04T00:00:00", "modifydate": "2005-07-04T10:09:00", "lines": 4064, "newlines": 4064, "modlines": 0, "user": "MSWORD"}, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "$ERRATA": {"ttr": 2056, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x05\\x18_\\x01\\x05\\x18_\\x10\\t\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-07-04T00:00:00", "modifydate": "2005-07-04T10:09:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "IBMUSER"}, "text": "JumpList errata sheet\n\nJuly 4, 2005\n\n1. fixed problem with gdg resolution.  the relative number now\n   matches the absolute number.\n2. fixed problem with outtrap.  needed to turn command off to\n   prevent it from capturing other command output.\n3. extend variables were not being nulled correctly between\n   commands, causing potential command corruption.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE717": {"ttr": 2058, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04H\\x00\\x00\\x01\\x06\\x07O\\x01\\x06\\x07O\\t(\\x00/\\x00/\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf2@@@'", "ispf": {"version": "04.72", "flags": 0, "createdate": "2006-03-15T00:00:00", "modifydate": "2006-03-15T09:28:00", "lines": 47, "newlines": 47, "modlines": 0, "user": "CBT-472"}, "text": "//***FILE 717 is from Joseph Caughman and contains his JumpList     *   FILE 717\n//*           package which is a way of organizing datasets that    *   FILE 717\n//*           a programmer needs, into user-defined groups of       *   FILE 717\n//*           datasets, called profiles.                            *   FILE 717\n//*                                                                 *   FILE 717\n//*           JumpList also allows file tailoring, when submitting  *   FILE 717\n//*           JCL for execution.  This means the dynamic substitu-  *   FILE 717\n//*           tion of variable values into the JCL, so that one     *   FILE 717\n//*           sample of JCL may be used to submit a variety of      *   FILE 717\n//*           different actual jobs.                                *   FILE 717\n//*                                                                 *   FILE 717\n//*           A user guide in Word format is included in this pds,  *   FILE 717\n//*           as member $DOCFILE.  Download this member in BINARY   *   FILE 717\n//*           to a PC and use it from there.                        *   FILE 717\n//*                                                                 *   FILE 717\n//*           email:  JFCAUGHMAN@sc.rr.com                          *   FILE 717\n//*                   JOE.CAUGHMAN@GMAIL.COM                        *   FILE 717\n//*                                                                 *   FILE 717\n//*        Introduction                                             *   FILE 717\n//*                                                                 *   FILE 717\n//*        JumpList provides an all-in-one convenient environment   *   FILE 717\n//*        for programmers, to make it much easier for one person   *   FILE 717\n//*        or a member of a group, to easily organize his or her    *   FILE 717\n//*        work.                                                    *   FILE 717\n//*                                                                 *   FILE 717\n//*        JumpList allows the organization of data set groups      *   FILE 717\n//*        by user-defined profile names.  A profile name could     *   FILE 717\n//*        relate to the latest ongoing project or could relate     *   FILE 717\n//*        to a set of JCL utilities or compile and link JCL.       *   FILE 717\n//*        JumpList allows you to Edit, View, or Browse PDS,        *   FILE 717\n//*        Sequential data sets, and Generational data sets.        *   FILE 717\n//*                                                                 *   FILE 717\n//*        It also supports File Tailoring through its Initial      *   FILE 717\n//*        Script function.  This provides one way to compile       *   FILE 717\n//*        programs or provide other advanced functionality.        *   FILE 717\n//*                                                                 *   FILE 717\n//*        Delete, copy, and rename functions are left to the       *   FILE 717\n//*        DSLIST function of Edit.  DSLIST is equivalent to        *   FILE 717\n//*        option 3.4 of ISPF and provides the means to perform     *   FILE 717\n//*        data set maintenance.  This function is invoked by       *   FILE 717\n//*        using the ESCR, for Edit Screen, command in CMD for      *   FILE 717\n//*        a partitioned data set.                                  *   FILE 717\n//*                                                                 *   FILE 717\n//*        JumpList also simplifies the execution of complicated    *   FILE 717\n//*        commands by allowing them to be invoked simply by        *   FILE 717\n//*        typing one word.                                         *   FILE 717\n//*                                                                 *   FILE 717\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "INSTALL": {"ttr": 2060, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00\\x00\\x01\\x05\\x11_\\x01\\x06\\x07? @\\x06\\xb1\\x02\\x9e\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "2005-04-25T00:00:00", "modifydate": "2006-03-14T20:40:00", "lines": 1713, "newlines": 670, "modlines": 0, "user": "IBMUSER"}, "text": "//IBMUSERA JOB 'INIT',MSGLEVEL=(0,0),MSGCLASS=X,REGION=2048K,CLASS=A\n//*\n//*THIS JCL STREAM WILL INSTALL 5 OBJECTS.  THIS INCLUDES THE REXX\n//*MODULE AND THE 4 ISPF PANEL OBJECTS.  THE REXX OBJECT IS INCLUDED\n//*IN THE FIRST JCL STREAM.  THE PANEL OBJECTS ARE INCLUDED IN THE\n//*SECOND STREAM.  THE SECOND STREAM WILL BE FOUND IMMEDIATELY\n//*FOLLOWING THIS STREAM.  YOU CAN USE THE FIND COMMAND TO SEARCH\n//*FOR SYSUT2 OR USERID.\n//*\n//*CHANGE USERID TO YOUR TSO LOGIN ID.  LEAVE THE APPENDED A.\n//*SEE THE BELOW NOTE ABOUT SYSUT2.\n//*\n//* START JCL\n//INIT    EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD SYSOUT=X\n//*\n//SYSUT2   DD DSN=REXX.SOURCE,DISP=SHR\n//*\n//*CHANGE sysut2 to point to the sysexec library where the rexx user\n//*programs reside.  you may need to have racf authorization to write\n//*to this data set.\n//*\n//SYSIN    DD DATA,DLM=XQ\n./ ADD NAME=JUMPLIST,LIST=ALL\n/* REXX */\nARG ARG1\nCALL JUMPLIST_START\nRETURN\n\nJUMPLIST_START: PROCEDURE EXPOSE ARG1\nPREFIX=SYSVAR(SYSPREF)\n\"PROFILE NOPREFIX\"\nIF ARG1 = 'SETUP' THEN DO\n   CALL SETUP\n   RETURN\n   END\nELSE\n   IF SYSDSN('ADMIN.JUMPLIST(JLADMIN)') = 'OK' THEN DO\n      \"ISPEXEC LIBDEF ISPTlIB DATASET ID('ADMIN.JUMPLIST') STACK\"\n      \"ISPEXEC LIBDEF ISPTABL DATASET ID('ADMIN.JUMPLIST') STACK\"\n      \"ISPEXEC TBOPEN JLADMIN NOWRITE\"\n      SUKEY = 'SETUP'\n      \"ISPEXEC TBGET JLADMIN\"\n      \"ISPEXEC TBCLOSE JLADMIN\"\n      END\n   ELSE\n      IF SYSDSN('ADMIN.JUMPLIST(JLADMIN)') <> 'OK' THEN DO\n         CALL SETUP\n         RETURN\n         END\nIF ISPPLIB \\= '' THEN\n   IF SYSDSN(\"'\"ISPPLIB\"'\") ='OK' THEN\n      \"ISPEXEC LIBDEF ISPPLIB DATASET ID('\"ISPPLIB\"') STACK\"\n   ELSE DO\n      SAY \"LIBRARY \"ISPPLIB\" DOES NOT EXIST\"\n      RETURN\n      END\nIF ARG1 \\= '/CLOSE' THEN\n   JUMPPROF = ARG1\nSTATUS = MSG('OFF')\n/*                  SYSTEMS PROGRAMMER ATTENTION                    */\n/*                                                                  */\n/* SEND QUERIES TO JOE.CAUGHMAN@GMAIL.COM                           */\n/*                                                                  */\n/* SYSTEMS_CONSOLE IS SET TO OFF, OR 0.  IF SET ON, OR 1, THE USER  */\n/* COMMANDS WILL LOAD FROM A PRIMARY CONSOLE, ASSUMED TO BE A       */\n/* LIBRARY THAT THE SYSTEMS ANALYST USED TO CREATE ENVIRONMENT      */\n/* COMMANDS.                                                        */\n/*                                                                  */\n/* FOR THE OWNER OF THE PRIMARY CONSOLE COMMANDS, THE               */\n/* SYSTEM_CONSOLE MUST BE SET TO OFF, OR 0.                         */\n/*                                                                  */\n/* USER_CONSOLE IS SET TO ON, OR 1.  IF SET ON, OR 1, THE USER      */\n/* COMMANDS WILL LOAD FROM THE LOCAL CONSOLE, A LIBRARY THAT        */\n/* JUMPLIST ALLOCATED FOR LOCAL USER COMMANDS.                      */\n/*                                                                  */\n/* IF SYSTEMS_CONSOLE IS SET TO ON AND USER_CONSOLE IS SET TO ON,   */\n/* BOTH COMMANDS FROM THE SYSTEMS CONSOLE AND USER CONSOLE WILL     */\n/* LOAD.                                                            */\n/*                                                                  */\n\nIF USERID() \\ = \"'\"SYSID\"'\" THEN DO\n   SYSTEMS_CONSOLE = 1\n   USER_CONSOLE = 0\n   END\nELSE DO\n   SYSTEMS_CONSOLE = 0\n   USER_CONSOLE = 1\n   END\nMAXCOMMANDS = MAXC\nSYSTEMS_ISPTLIB = \"\"SYSID\".JUMPLIST\"\nSYSTEMS_ISPTABL = \"\"SYSID\".JUMPLIST\"\nCALL START\nIF PREFIX \\= '' THEN\n   \"PROFILE PREFIX(\"PREFIX\")\"\nRETURN\n\nSTART:\nIF JUMPPROF ='/RESET' THEN DO\n   @USER = ''\n   \"ISPEXEC VPUT (@USER) PROFILE\"\n   JUMPPROF = ''\n   \"ISPEXEC VPUT (JUMPPROF) PROFILE\"\n   RETURN\n   END\nTCNT = 0\nERRORCOND = 0\nUSENAME1 = 'Member';USENAME2 = 'Script'\nSYSTEMCMDS. = ''\nUSERCMDS. = ''\nSYSLIST = ''\nSYSCOMMANDLIST = ''\nUSERCMD = 0\nUSERLIST = ''\nUSERCOMMANDLIST = ''\nINFO1 = ''\nINFO2 = ''\nCURPOS = '@USER'\nFILLER = '__'\nFILLER1 = '__'\nFILLER2 = '__'\nTRAP =0\nJLCOMMANDS = '/I, /IXX, /D, /DXX, /R, /RXX, /XPN, E, ESCR, V, B, Z,'\nJLCOMMANDS = JLCOMMANDS 'J, ES, XI, XS, FE, FJ, /CLOSE, and /RESET.'\nJLCMDLIST = '/I /IXX /D /DXX /R /RXX /XPN E ESCR V B Z J ES XI XS FE FJ'\nJLCMDLIST = JLCMDLIST '/CLOSE /RESET'\nIF JUMPPROF = '' THEN DO\n   \"ISPEXEC VGET (JUMPPROF) PROFILE\"\n   IF JUMPPROF  = '' THEN JUMPPROF = 'GENERIC'\n   END\n\"ISPEXEC VGET (@USER) PROFILE\"\nIF @USER = '' THEN\n   @USER = USERID()\nIF SYSDSN(\"'\"@USER\".JUMPLIST'\") <> 'OK' THEN DO\n   \"ALLOCATE DD(ALLOCDD) DSN('\"@USER\".JUMPLIST') SPACE (100 10)\",\n   \"DSORG(PO) DIR(500) LRECL(80) BLKSIZE(3200) RECFM(F,B) MOD REUSE\"\n   \"FREE DD(ALLOCDD)\"\n   END\nIF SYSDSN(\"'\"@USER\".JUMPLIST.ROLLOVER'\") <> 'OK' THEN\n  \"ALLOCATE DD(rollibdd) DSN('\"@USER\".JUMPLIST.ROLLOVER')\",\n  \"SPACE (100 10) DSORG(PO) DIR(50) LRECL(80) BLKSIZE(3120) RECFM(F,B)\",\n  \"MOD REUSE\"\nELSE DO\n   \"ALLOCATE DD(rollibdd) DSN('\"@USER\".JUMPLIST.ROLLOVER') SHR REUSE\"\n   END\nIF SYSDSN(\"'\"@USER\".JUMPLIST.SCRIPT'\") <> 'OK' THEN DO\n   \"ALLOCATE DD(ALLOCDD) DSN('\"@USER\".JUMPLIST.SCRIPT') SPACE (100 10)\",\n   \"DSORG(PO) DIR(100) LRECL(80) BLKSIZE(3120) RECFM(F,B)\"\n   \"FREE DD(ALLOCDD)\"\n   END\nENDSESSION = 0\nrestoreprof = ''\n\"ispexec control errors return\"\n\"ISPEXEC LIBDEF ISPTlib DATASET ID('\"@USER\".JUMPLIST') STACK\"\n\"ISPEXEC LIBDEF ISPTABL DATASET ID('\"@USER\".JUMPLIST') STACK\"\nIF ARG1 = '/CLOSE' THEN DO\n   \"ISPEXEC TBCLOSE \"JUMPPROF\"\"\n   \"ISPEXEC LIBDEF ISPTLIB\"\n   \"ISPEXEC LIBDEF ISPTABL\"\n   RETURN\n   END\nIF SYSDSN(\"'\"@USER\".JUMPLIST(\"JUMPPROF\")'\") <> 'OK' THEN\n   CALL CREATE_TABLE\nELSE DO\n   \"ISPEXEC CONTROL ERRORS RETURN\"\n   \"ISPEXEC TBOPEN \"JUMPPROF\" SHARE\"\n   IF RC = 12 THEN DO\n      INFO1 = \"\"jumpprof\" is being updated.  A temporary profile has\",\n         \"been created.\"\n      ERRORCOND = 1\n      \"ISPEXEC LIBDEF ISPTLIB\"\n      \"ISPEXEC LIBDEF ISPTABL\"\n      \"ISPEXEC LIBDEF ISPTlib DATASET ID('\"@USER\".JUMPLIST.rollover')\"\n      \"ISPEXEC LIBDEF ISPTABL DATASET ID('\"@USER\".JUMPLIST.rollover')\"\n      \"ISPEXEC TBOPEN \"JUMPPROF\" SHARE\"\n      END\n   ELSE DO\n      \"ISPEXEC TBSAVE \"JUMPPROF\" NAME(TEMPPROF) LIBRARY(rollibdd)\",\n         \"REPLCOPY\"\n      CALL COPYPROF\n      END\n   END\n\"ISPEXEC TBTOP \"JUMPPROF\"\"\nCRP1 = 1\nGERROR = 0\nstartup='';shutdown=''\nIF SYSTEMS_CONSOLE THEN\n   CALL SYSTEMS_CONSOLE\nIF USER_CONSOLE THEN do\n   ucuser = userid()\n   IF SYSDSN(\"'\"ucuser\".JUMPLIST(@USERCMD)'\") = 'OK' THEN\n      CALL USER_CONSOLE\n   end\nif startup \\= '' then\n   CALL STARTUP\nDO WHILE \\ ENDSESSION\n   IF JUMPPROF = '@USERCMD' THEN DO\n      USENAME1 = 'Command'\n      USENAME2 = ''\n      INFO1 = 'RESTART JUMPLIST TO LOAD UPDATED USER COMMANDS.'\n      INFO2 = ''\n      END\n   else DO\n      USENAME1 = 'Member'\n      USENAME2 = 'Script'\n      END\n   ERRORCOND = 0\n   PARSE UPPER VAR JUMPPROF JUMPPROF\n   OLDUSER = @USER\n   OLDPROF = JUMPPROF\n   \"ISPEXEC TBSKIP \"JUMPPROF\" NUMBER(\"CRP1\")\"\n   if rc = 20 then endsession = 1\n   \"ISPEXEC TBDISPL \"JUMPPROF\" PANEL(JUMPLIST) POSITION(CRP)\"\n         INFO1 = ''\n         INFO2 = ''\n   CRP1 = ZTDTOP\n   IF RC = 8 THEN ENDSESSION = 1\n   PARSE UPPER VAR HELP HELP\n   PARSE UPPER VAR DIR DIR\n   IF HELP = 'S' THEN\n      CALL JUMPLIST_HELP\n   IF DIR = 'S' THEN\n      CALL DIRECTORY\n   CALL HANDLE_PROFILE_USER\n   CALL PROCESS_DISPLAY\n   END\nif shutdown \\= '' then\n   call shutdown\n\"ISPEXEC TBCLOSE \"OLDPROF\"\"\nIF JUMPPROF \\= '@USERCMD' THEN\n   \"ISPEXEC VPUT (JUMPPROF) PROFILE\"\n\"ISPEXEC VPUT (@USER) PROFILE\"\n DATALINE = \"\"@USER\".JUMPLIST.ROLLOVER\"\n CALL COMPRESS\n\"ISPEXEC LIBDEF ISPTLIB\"\n\"ISPEXEC LIBDEF ISPTABL\"\nRETURN\n\nDIRECTORY:\nINFO1 = 'USE S TO SELECT A PROFILE.  USE D TO DELETE A PROFILE OR',\n   'script.'\n@INITIAL = ''\nCURPOS  = 'ZCMD'\n\"ISPEXEC TBCLOSE \"OLDPROF\"\"\n\"ISPEXEC TBCREATE DIRECT NAMES(@MEMBER, @INITIAL, @DATASET) NOWRITE\"\nMEMLIST. = ''\nY = OUTTRAP('MEMLIST.')\nISOURCE = \"\"@USER\".JUMPLIST\"\n\"LISTDS ('\"ISOURCE\"') MEMBERS\"\nDO II = 7 TO MEMLIST.0\n   @MEMBER = STRIP(MEMLIST.II,'B')\n   @DATASET = ISOURCE\n   \"ISPEXEC TBADD DIRECT\"\n   END\nMEMLIST. = ''\n@MEMBER = ''\nY = OUTTRAP('OFF')\nY = OUTTRAP('MEMLIST.')\nISOURCE = \"\"@USER\".JUMPLIST.SCRIPT\"\n\"LISTDS ('\"ISOURCE\"') MEMBERS\"\nDO II = 7 TO MEMLIST.0\n   @INITIAL = STRIP(MEMLIST.II,'B')\n   @DATASET = ISOURCE\n   \"ISPEXEC TBADD DIRECT\"\n   END\nY = OUTTRAP('OFF')\n\"ISPEXEC TBTOP DIRECT\"\n\"ISPEXEC TBDISPL DIRECT PANEL(JUMPLIST)\"\nNEWPROF = OLDPROF\nIF ZTDSELS > 0 THEN\n   DO WHILE ZTDSELS > 0\n      PARSE UPPER VAR CMD CMD\n      IF CMD = 'S' THEN\n         IF @MEMBER \\= '' THEN\n            NEWPROF = @MEMBER\n         ELSE NOP\n      ELSE\n         IF CMD = 'D' THEN do\n            IF SYSDSN(\"'\"@DATASET\"(\"@MEMBER\")'\") = 'OK' THEN DO\n               DELETE \"'\"@DATASET\"(\"@MEMBER\")'\"\n               @DATASET = 'DELETED'\n               \"ISPEXEC TBDELETE DIRECT\"\n               \"ISPEXEC TBMOD DIRECT\"\n               END\n            ELSE\n               IF SYSDSN(\"'\"@DATASET\"(\"@INITIAL\")'\") = 'OK' THEN DO\n                  DELETE \"'\"@DATASET\"(\"@INITIAL\")'\"\n                  @DATASET = 'DELETED'\n                  \"ISPEXEC TBDELETE DIRECT\"\n                  \"ISPEXEC TBMOD DIRECT\"\n                  END\n            @DATASET = 'DELETED'\n            \"ISPEXEC TBDELETE DIRECT\"\n            \"ISPEXEC TBMOD DIRECT\"\n            end\n      IF CMD = 'S' THEN\n         IF ZTDSELS = 1 THEN\n            \"ISPEXEC CONTROL DISPLAY LOCK\"\n      CMD = ''\n      \"ISPEXEC TBDISPL DIRECT\"\n      END\n\"ISPEXEC TBCLOSE DIRECT\"\nINFO1 = ''\nJUMPPROF = NEWPROF\n/*OLDPROF = NEWPROF*/\n\"ISPEXEC TBOPEN \"OLDPROF\" SHARE\"\nDIR = ''\nRETURN\n\nJUMPLIST_HELP:\nHELP = ''\n\"ISPEXEC CONTROL DISPLAY SAVE\"\n\"ISPEXEC DISPLAY PANEL(JLHELP)\"\n\"ISPEXEC CONTROL DISPLAY RESTORE\"\nRETURN\n\nHANDLE_PROFILE_USER:\nIF (@USER \\ = OLDUSER),\n| (OLDPROF \\ = JUMPPROF) THEN DO\n   \"ISPEXEC TBCLOSE \"OLDPROF\"\"\n   IF SYSDSN(\"'\"@USER\".JUMPLIST'\") = 'OK' THEN DO\n      \"ISPEXEC LIBDEF ISPTLIB\"\n      \"ISPEXEC LIBDEF ISPTABL\"\n      \"ISPEXEC LIBDEF ISPTLIB DATASET ID('\"@USER\".JUMPLIST')\"\n      \"ISPEXEC LIBDEF ISPTABL DATASET ID('\"@USER\".JUMPLIST')\"\n      \"FREE DD(rollibdd)\"\n      \"ALLOCATE DD(rollibdd) DSN('\"@USER\".JUMPLIST.ROLLOVER') SHR REUSE\"\n      END\n   ELSE DO\n      @USER = OLDUSER\n      \"ISPEXEC LIBDEF ISPTLIB\"\n      \"ISPEXEC LIBDEF ISPTABL\"\n      \"ISPEXEC LIBDEF ISPTLIB DATASET ID('\"@USER\".JUMPLIST')\"\n      \"ISPEXEC LIBDEF ISPTABL DATASET ID('\"@USER\".JUMPLIST')\"\n      END\n   IF SYSDSN(\"'\"@USER\".JUMPLIST(\"JUMPPROF\")'\") = 'OK' THEN DO\n      \"ISPEXEC CONTROL ERRORS RETURN\"\n      \"ISPEXEC TBOPEN \"JUMPPROF\" SHARE\"\n      IF RC = 12 THEN DO\n         INFO1 = \"\"jumpprof\" is being updated.  A temporary profile\",\n            \"has been created.\"\n         ERRORCOND = 1\n         \"ISPEXEC LIBDEF ISPTLIB\"\n         \"ISPEXEC LIBDEF ISPTABL\"\n         \"ISPEXEC LIBDEF ISPTlib DATASET\",\n            \"ID('\"@USER\".JUMPLIST.rollover')\"\n         \"ISPEXEC LIBDEF ISPTABL DATASET\",\n            \"ID('\"@USER\".JUMPLIST.rollover')\"\n         \"ISPEXEC TBOPEN \"JUMPPROF\" SHARE\"\n         IF RC = 8 THEN DO\n            \"ISPEXEC LIBDEF ISPTABL\"\n            \"ISPEXEC LIBDEF ISPTLIB\"\n            \"ISPEXEC LIBDEF ISPTlib DATASET\",\n               \"ID('\"@USER\".JUMPLIST')\"\n            \"ISPEXEC LIBDEF ISPTABL DATASET\",\n               \"ID('\"@USER\".JUMPLIST')\"\n            INFO1 = 'REQUEST REFUSED.  THE PROFILE IS OPEN'\n            ERRORCOND = 1\n            @USER = OLDUSER\n            JUMPPROF = OLDPROF\n           \"ISPEXEC TBOPEN \"JUMPPROF\" SHARE\"\n            END\n         END\n      ELSE DO\n         \"ISPEXEC TBSAVE \"JUMPPROF\" NAME(TEMPPROF) LIBRARY(rollibdd)\",\n            \"REPLCOPY\"\n         CALL COPYPROF\n         IF RC = 20 THEN DO\n            \"ISPEXEC LIBDEF ISPTABL\"\n            \"ISPEXEC LIBDEF ISPTLIB\"\n            \"ISPEXEC LIBDEF ISPTlib DATASET\",\n               \"ID('\"@USER\".JUMPLIST')\"\n            \"ISPEXEC LIBDEF ISPTABL DATASET\",\n               \"ID('\"@USER\".JUMPLIST')\"\n            INFO1 = 'REQUEST REFUSED.  THE PROFILE IS OPEN.'\n            ERRORCOND = 1\n            @USER = OLDUSER\n            JUMPPROF = OLDPROF\n            \"ISPEXEC TBOPEN \"JUMPPROF\" SHARE\"\n            END\n         END\n      END\n   ELSE\n      CALL CREATE_TABLE\n   END\nOLDPROF = NEWPROF\nRETURN\n\nCREATE_TABLE:\nCALL CLEAR_EXTENDS\n\"ISPEXEC TBCREATE \"JUMPPROF\" NAMES(@MEMBER,@INITIAL,@DATASET,EXTENDA,\",\n   \"EXTENDB, EXTENDC, EXTENDD, EXTENDE, EXTENDF, EXTENDG, EXTENDH,\",\n   \"EXTENDI, EXTENDJ, EXTENDK, EXTENDL, EXTENDM, EXTENDN, EXTENDO,\",\n   \"EXTENDP, EXTENDQ, EXTENDR, EXTENDS, EXTENDT, EXTENDU, EXTENDV,\",\n   \"EXTENDW, EXTENDX, EXTENDY, EXTENDZ) share REPLACE\"\n@MEMBER = '';@DATASET = '';@INITIAL = ''\nDO II = 1 TO 10\n   \"ISPEXEC TBADD \"JUMPPROF\"\"\n   END\n\"ispexec tbclose \"jumpprof\"\"\n\"ispexec tbopen \"jumpprof\" share\"\n\"ISPEXEC TBTOP \"JUMPPROF\"\"\nRETURN\n\nPROCESS_DISPLAY:\nHZTDSELS = ZTDSELS\nZEDLMSG = ''\nIF ZTDSELS > 0 THEN DO\n   DO WHILE ZTDSELS > 0\n      PARSE UPPER VAR @MEMBER @MEMBER\n      PARSE UPPER VAR @INITIAL @INITIAL\n      PARSE UPPER VAR @DATASET @DATASET\n      PUC = 1\n      PTC = 1\n      EXTENDA = @DATASET\n      CALL NULL_EXTENDS\n      CALL APPEND_EXTENDS\n      PARSE UPPER VAR CMD CMD\n      IF @EXTEND \\ = '' THEN DO\n         IF POS('{',@EXTEND) = 1 THEN\n            DATALINE = SUBSTR(@EXTEND,POS('}',@EXTEND)+1)\n         ELSE\n            IF POS('{',@EXTEND) > 0 THEN\n               DATALINE = SUBSTR(@EXTEND,1,POS('{',@EXTEND)-1)\n            ELSE\n               DATALINE = @EXTEND\n         END\n      ELSE\n         IF POS('{',@DATASET) = 1 THEN\n            DATALINE = SUBSTR(@DATASET,POS('}',@DATASET)+1)\n         ELSE\n            IF POS('{',@DATASET) > 0 THEN\n               DATALINE = SUBSTR(@DATASET,1,POS('{',@DATASET)-1)\n            ELSE\n               DATALINE = @DATASET\n      DATALINE = STRIP(DATALINE,'B')\n      IF JUMPPROF = '@USERCMD' THEN USERCMD = 1\n      ELSE USERCMD = 0\n      callparms. = ''\n      SELECT\n         WHEN SUBSTR(CMD,1,2) = '/I' THEN\n            CALL EXECUTE_PROFILE_INSERT\n         WHEN SUBSTR(CMD,1,2) = '/D' THEN\n            CALL EXECUTE_PROFILE_DELETE\n         WHEN SUBSTR(CMD,1,2) = '/R' THEN\n            CALL EXECUTE_PROFILE_REPEAT\n         WHEN CMD = 'ES' & \\ USERCMD THEN\n            IF @INITIAL \\ = '' THEN\n               IF @INITIAL = JUMPPROF THEN\n                  ZEDLMSG = 'SCRIPT NAME CANNOT BE THE SAME AS THE',\n                    'JUMPLIST PROFILE NAME.'\n               ELSE\n                  CALL EDIT_SCRIPT\n            ELSE\n               ZEDLMSG = 'A SCRIPT NAME MUST BE ENTERED.'\n         WHEN CMD = 'XS' & \\ USERCMD THEN\n            IF @INITIAL \\ = '' THEN DO\n               CALL EXECUTE_SCRIPT\n               \"ISPEXEC LIBDEF ISPTLIB\"\n               \"ISPEXEC LIBDEF ISPTABL\"\n               END\n         WHEN CMD = 'E' & \\ USERCMD THEN DO\n            CALL CHECKTYPE\n            IF GDGFOUND THEN\n               CALL CHECKGDG\n            CALL EXECUTE_EDIT\n            END\n         WHEN CMD = 'ESCR' & \\ USERCMD THEN DO\n            CALL CHECKTYPE\n            IF GDGFOUND THEN\n               CALL CHECKGDG\n            CALL EXECUTE_EDIT\n            END\n         WHEN CMD = 'XI' & \\ USERCMD,\n         | CMD = 'B' & POS(SUBSTR(DATALINE,1,1),'- =') > 0 THEN DO\n            ERRORCOND = 0\n            DATALINEZ = DATALINE\n            DATALINEH = DATALINE\n            DO UNTIL DATALINEH = ''\n               IF POS(';;',DATALINEH) > 0 THEN DO\n                  DATALINE = SUBSTR(DATALINEH,1,POS(';;',DATALINEH)-1)\n                  DATALINE = STRIP(DATALINE,'B')\n                  DATALINEH = SUBSTR(DATALINEH,POS(';;',DATALINEH)+2)\n                  END\n               ELSE DO\n                  DATALINE = DATALINEH\n                  DATALINE = STRIP(DATALINE,'B')\n                  DATALINEH = ''\n                  END\n               CALL EXECUTE_IMMEDIATE DATALINE\n               IF ERRORCOND THEN LEAVE\n               END\n            END\n         WHEN CMD = 'B' & \\ USERCMD THEN DO\n            CALL CHECKTYPE\n            IF GDGFOUND THEN\n               CALL CHECKGDG\n            CALL EXECUTE_BROWSE\n            END\n         WHEN CMD = 'V' & \\ USERCMD THEN DO\n            CALL CHECKTYPE\n            IF GDGFOUND THEN\n               CALL CHECKGDG\n            CALL EXECUTE_VIEW\n            END\n         WHEN CMD = 'J' & \\ USERCMD THEN\n            CALL SUBMIT\n         WHEN CMD = 'Z' & \\ USERCMD THEN\n            CALL COMPRESS\n         WHEN CMD = 'FE' & \\ USERCMD THEN DO\n            IF SYSDSN(\"'\"@USER\".JUMPLIST.SCRIPT(\"@INITIAL\")'\") \\ = 'OK',\n            THEN\n               ZEDLMSG = 'THE INITIAL SCRIPT HAS NOT BEEN DEFINED.'\n            ELSE\n            IF SYSDSN(\"'\"SYSID\".JUMPLIST.SCRIPT(\"@INITIAL\")'\") \\ = 'OK'\n            THEN\n               ZEDLMSG = 'THE INITIAL SCRIPT HAS NOT BEEN DEFINED.'\n            ELSE DO\n               CALL EXECUTE_SCRIPT\n               CALL FILETAILOR_EDIT\n               \"ISPEXEC LIBDEF ISPTLIB\"\n               \"ISPEXEC LIBDEF ISPTABL\"\n               END\n            END\n         WHEN CMD = 'FJ' & \\ USERCMD THEN\n            IF SYSDSN(\"'\"@USER\".JUMPLIST.SCRIPT(\"@INITIAL\")'\") = 'OK',\n            | SYSDSN(\"'\"SYSID\".JUMPLIST.SCRIPT(\"@INITIAL\")'\") = 'OK'\n            THEN DO\n               CALL EXECUTE_SCRIPT\n               CALL FILETAILOR_SUBMIT\n               \"ISPEXEC LIBDEF ISPTLIB\"\n               \"ISPEXEC LIBDEF ISPTABL\"\n               END\n            ELSE\n               ZEDLMSG = 'THE INITIAL SCRIPT HAS NOT BEEN DEFINED.'\n         WHEN CMD = '/XPN' THEN DO\n            EXTENDA = @DATASET\n            \"ISPEXEC CONTROL DISPLAY SAVE\"\n            \"ISPEXEC DISPLAY PANEL(JLXPND)\"\n            \"ISPEXEC CONTROL DISPLAY RESTORE\"\n            @DATASET = EXTENDA\n            END\n         WHEN POS(CMD, SYSLIST) > 0 THEN\n            CALL SYS_FUNCTION CMD\n         WHEN POS(CMD, USERLIST) > 0 & \\ USERCMD THEN\n            CALL USER_FUNCTION CMD\n         WHEN CMD = '  ' THEN NOP\n         OTHERWISE CALL ERROR_LIST\n         END\n      IF USERCMD & POS(@MEMBER, JLCMDLIST) > 0 THEN DO\n         ZEDLMSG = 'THIS IS ALREADY DEFINED AS A SYSTEM COMMAND.'\n         @MEMBER = ''\n         END\n      IF USER_CONSOLE & USERCMD & POS(@MEMBER, SYSLIST) > 0 THEN DO\n         ZEDLMSG = 'THIS IS ALREADY DEFINED AS A SYSTEMS LEVEL COMMAND.'\n         @MEMBER = ''\n         END\n      \"ISPEXEC TBDELETE \"JUMPPROF\"\"\n      \"ISPEXEC TBMOD \"JUMPPROF\"\"\n      CMD =''\n      IF JUMPPROF = '@USERCMD' THEN USERCMD = 1\n      ELSE USERCMD = 0\n      IF ZEDLMSG  = '' THEN DO\n         IF ZTDSELS = 1 THEN\n            \"ISPEXEC CONTROL DISPLAY LOCK\"\n         \"ISPEXEC TBDISPL \"JUMPPROF\"\"\n         END\n      ELSE DO\n         IF GERROR THEN TIMER = 4\n         ELSE TIMER = 2\n         DO II = 1 TO TIMER\n            \"ISPEXEC CONTROL DISPLAY LOCK\"\n            \"ISPEXEC SETMSG MSG(ISRZ000)\"\n            \"ISPEXEC TBDISPL \"JUMPPROF\"\"\n            CALL SLEEP\n            END\n         END\n      IF RC = 8 THEN ENDSESSION = 1\n      END\n   END\nRETURN\n\nSYS_FUNCTION: PROCEDURE EXPOSE SYSTEMCMDS. @MEMBER DATALINE,\n   ERRORCOND INFO1 INFO2 USERCMDS. USERLIST SYSLIST PUC PTC,\n   CALLPARMS. ZEDLMSG\nARG CMD\nTRACE = 0\nDATALINEH = SYSTEMCMDS.CMD\nDATALINEZ = DATALINEH\nDO UNTIL DATALINEH = ''\n   IF POS(';;',DATALINEH) > 0 THEN DO\n      DATALINEC = SUBSTR(DATALINEH,1,POS(';;',DATALINEH)-1)\n      DATALINEC = STRIP(DATALINEC,'B')\n      DATALINEH = SUBSTR(DATALINEH,POS(';;',DATALINEH)+2)\n      DATALINEH = STRIP(DATALINEH,'B')\n      END\n   ELSE DO\n      DATALINEC = DATALINEH\n      DATALINEC = STRIP(DATALINEC,'B')\n      DATALINEH = ''\n      END\n   IF TRACE THEN\n      SAY DATALINEC\n   CALL EXECUTE_IMMEDIATE DATALINEC\n   IF ERRORCOND THEN LEAVE\n   END\nRETURN\n\nUSER_FUNCTION: PROCEDURE EXPOSE USERCMDS. @MEMBER DATALINE ERRORCOND,\n INFO1 INFO2 SYSTEMCMDS. SYSLIST USERLIST PTC PUC CALLPARMS. ZEDLMSG\nARG CMD\nDATALINEH = USERCMDS.CMD\nDATALINEZ = DATALINEH\nTRACE = 0\nDO UNTIL DATALINEH = ''\n   IF POS(';;',DATALINEH) > 0 THEN DO\n      DATALINEC = SUBSTR(DATALINEH,1,POS(';;',DATALINEH)-1)\n      DATALINEC = STRIP(DATALINEC,'B')\n      DATALINEH = SUBSTR(DATALINEH,POS(';;',DATALINEH)+2)\n      DATALINEH = STRIP(DATALINEH,'B')\n      END\n   ELSE DO\n      DATALINEC = DATALINEH\n      DATALINEC = STRIP(DATALINEC,'B')\n      DATALINEH = ''\n      END\n   IF TRACE THEN\n      SAY DATALINEC\n   CALL EXECUTE_IMMEDIATE DATALINEC\n   IF ERRORCOND THEN LEAVE\n   END\nRETURN\n\nERROR_LIST:\nIF USERCMD THEN\n   ZEDLMSG = 'THE FUNCTION IS NOT AVAILABLE DURING THE USER COMMAND',\n     'SESSION.'\nELSE DO\n   ZEDLMSG = 'THE AVAILABLE FUNCTIONS ARE: ' JLCOMMANDS\n   GERROR = 1\n   INFO1 = JLCOMMANDS\n   IF SYSCOMMANDLIST \\ = '' THEN DO\n      ZEDLMSG = ZEDLMSG SYSCOMMANDLIST || '.'\n      INFO2 = SYSCOMMANDLIST\n      END\n   IF USERLIST \\= '' THEN DO\n      ZEDLMSG = ZEDLMSG '    THE AVAILABLE USER FUNCTIONS ARE: ',\n          USERCOMMANDLIST\n      INFO2 = INFO2 USERCOMMANDLIST\n      END\n   END\nRETURN\n\nSLEEP:\nCALL SYSCALLS('ON')\nADDRESS SYSCALL\nSLEEP 1\nADDRESS TSO\nRETURN\n\nEXECUTE_PROFILE_DELETE:\nIF DATATYPE(SUBSTR(CMD,3)) = 'NUM' THEN\n   REPCNT = SUBSTR(CMD,3)\nELSE REPCNT = 1\nIF REPCNT > ((ZTDROWS - CRP) + 1) THEN\n   REPCNT = (ZTDROWS - CRP) + 1\nDO II = 1 TO REPCNT\n   \"ISPEXEC TBDELETE \"JUMPPROF\"\"\n   IF (II + crp) < ztdrows + 1 THEN\n      \"ISPEXEC TBSKIP \"JUMPPROF\" NUMBER(+1)\"\n   ELSE\n      \"ISPEXEC TBSKIP \"JUMPPROF\" NUMBER(+0)\"\n   END\nRETURN\n\nEXECUTE_PROFILE_INSERT:\nCALL CLEAR_EXTENDS\nIF DATATYPE(SUBSTR(CMD,3)) = 'NUM' THEN\n   REPCNT = SUBSTR(CMD,3)\nELSE REPCNT = 1\n   @MEMBER = '';@DATASET = ' ';@INITIAL = ' '\n   @EXTEND = ' '\n   DO II = 1 TO REPCNT\n      \"ISPEXEC TBADD \"JUMPPROF\"\"\n      END\nRETURN\n\nEXECUTE_PROFILE_REPEAT:\nIF DATATYPE(SUBSTR(CMD,3)) = 'NUM' THEN\n   REPCNT = SUBSTR(CMD,3)\nELSE REPCNT = 1\n   DO II = 1 TO REPCNT\n      \"ISPEXEC TBADD \"JUMPPROF\"\"\n      END\nRETURN\n\nEXECUTE_EDIT:\nSYSDSORG = ''\nDSORG2 = SYSDSORG\nX = LISTDSI(\"'\"DATALINE\"'\")\nIF DSORG2 = 'VS' THEN\n   ZEDLMSG = 'EDIT DOES NOT SUPPORT VSAM FORMAT.',\n      ' USE BROWSE TO BROWSE VSAM CONTENT. '\nELSE\n   IF POS('*',DATALINE) > 0,\n   |  POS('%',DATALINE) > 0 THEN\n      CALL EDIT 'SCR'\n   ELSE\n      IF GDGBASEFOUND & \\ GDGRELFOUND THEN\n         CALL EDIT 'SCR'\n      ELSE\n         IF SYSDSN(\"'\"DATALINE\"'\") = 'OK' THEN\n            IF CMD = 'ESCR' THEN\n               CALL EDIT 'SCR'\n            ELSE\n               CALL EDIT\n         ELSE\n            ZEDLMSG = 'DATA SET DOES NOT EXIST.  '\nRETURN\n\nEXECUTE_VIEW:\nSYSDSORG = ''\nDSORG2 = SYSDSORG\nX = LISTDSI(\"'\"DATALINE\"'\")\nIF DSORG2 = 'VS' THEN\n   ZEDLMSG = 'VIEW DOES NOT SUPPORT VSAM FORMAT.',\n      ' USE BROWSE TO BROWSE VSAM CONTENT. '\nELSE\n   IF @MEMBER \\= '' THEN\n      IF SYSDSN(\"'\"DATALINE\"'\") = 'OK' THEN\n         IF SYSDSN(\"'\"DATALINE\"(\"@MEMBER\")'\") = 'OK' THEN\n            CALL VIEW\n         ELSE\n            ZEDLMSG = 'MEMBER DOES NOT EXIST.  '\n      ELSE\n         IF DATALINE = '' THEN\n            ZEDLMSG = 'NO DATA SET NAME WAS ENTERED.'\n         ELSE\n            ZEDLMSG = 'DATA SET DOES NOT EXIST.  '\n   ELSE\n      IF POS('*',DATALINE) > 0,\n      |  POS('%',DATALINE) > 0 THEN\n         CALL EDIT 'SCR'\n      ELSE\n         IF GDGBASEFOUND & \\ GDGRELFOUND THEN\n            CALL EDIT 'SCR'\n         ELSE\n            IF SYSDSN(\"'\"DATALINE\"'\") = 'OK' THEN\n               CALL VIEW\n            ELSE\n               IF DATALINE = '' THEN\n                  ZEDLMSG = 'NO DATA SET NAME WAS ENTERED.'\n               ELSE\n                  ZEDLMSG = 'DATA SET DOES NOT EXIST.  '\nRETURN\n\nEXECUTE_BROWSE:\nSYSDSORG = ''\nX = LISTDSI(\"'\"DATALINE\"'\")\nDSORG2 = SYSDSORG\nIF DSORG2 = 'VS' THEN\n   CALL LMINIT_BROWSE\nELSE\n   IF @MEMBER \\= '' THEN\n      IF SYSDSN(\"'\"DATALINE\"'\") = 'OK' THEN\n         IF SYSDSN(\"'\"DATALINE\"(\"@MEMBER\")'\") = 'OK' THEN\n            CALL BROWSE\n         ELSE\n            ZEDLMSG = 'MEMBER DOES NOT EXIST.  '\n      ELSE\n         IF DATALINE = '' THEN\n            ZEDLMSG = 'NO DATA SET NAME WAS ENTERED.'\n         ELSE\n            ZEDLMSG = 'DATA SET DOES NOT EXIST.  '\n   ELSE\n      IF POS('*',DATALINE) > 0,\n      |  POS('%',DATALINE) > 0 THEN\n         CALL EDIT 'SCR'\n      ELSE\n         IF GDGBASEFOUND & \\ GDGRELFOUND THEN\n            CALL EDIT 'SCR'\n         ELSE\n            IF SYSDSN(\"'\"DATALINE\"'\") = 'OK' THEN\n               CALL BROWSE\n            ELSE\n               IF DATALINE = '' THEN\n                  ZEDLMSG = 'NO DATA SET NAME WAS ENTERED.'\n               ELSE\n                  ZEDLMSG = 'DATA SET DOES NOT EXIST.  '\nRETURN\n\nEDIT: PROCEDURE EXPOSE DATALINE @MEMBER ETYPE\nARG EDITTYPE\n\"ISPEXEC CONTROL DISPLAY SAVE\"\n\"ISPEXEC CONTROL ERRORS RETURN\"\nIF DATALINE \\ = '' THEN\n   IF @MEMBER \\ = '' THEN\n      \"ISPEXEC EDIT DATASET ('\"DATALINE\"(\"@MEMBER\")')\"\n   ELSE\n      IF EDITTYPE \\= 'SCR' THEN DO\n         SELECT\n            WHEN ETYPE = '1' THEN DO\n               \"ISPEXEC LMINIT DATAID(\"ZTEMPDD\") DATASET('\"DATALINE\"')\"\n               \"ISPEXEC MEMLIST DATAID(\"ZTEMPDD\") CONFIRM(YES) FIELD(1)\"\n               \"ISPEXEC LMFREE DATAID(\"ZTEMPDD\")\"\n               END\n            WHEN ETYPE = '9' THEN DO\n               \"ISPEXEC LMINIT DATAID(\"ZTEMPDD\") DATASET('\"DATALINE\"')\"\n               \"ISPEXEC MEMLIST DATAID(\"ZTEMPDD\") CONFIRM(YES) FIELD(9)\"\n               \"ISPEXEC LMFREE DATAID(\"ZTEMPDD\")\"\n               END\n            OTHERWISE\n               \"ISPEXEC EDIT DATASET ('\"DATALINE\"')\"\n            END\n         END\n      ELSE\n         \"ISPEXEC SELECT PGM(ISRDSLST) PARM(DSL '\"DATALINE\"')\",\n         \"SUSPEND SCRNAME(DSLIST)\"\nIF RC = 14 THEN\n   ZEDLMSG = 'DATA SET OR MEMBER IN USE.'\nELSE\n   IF RC = 20 THEN\n      ZEDLMSG = 'MEMBER NOT ACCESSIBLE.  CHECK THE MEMBER SYNTAX.'\n\"ISPEXEC CONTROL DISPLAY RESTORE\"\nRETURN\n\nBROWSE:\n\"ISPEXEC CONTROL DISPLAY SAVE\"\nIF DATALINE \\ = '' THEN\n   IF @MEMBER \\= '' THEN\n      \"ISPEXEC BROWSE DATASET ('\"DATALINE\"(\"@MEMBER\")')\"\n   ELSE\n      \"ISPEXEC BROWSE DATASET ('\"DATALINE\"')\"\n\"ISPEXEC CONTROL DISPLAY RESTORE\"\nRETURN\n\nVIEW:\n\"ISPEXEC CONTROL DISPLAY SAVE\"\n\"ISPEXEC CONTROL ERRORS RETURN\"\nIF DATALINE \\ = '' THEN\n   IF @MEMBER \\= '' THEN\n      \"ISPEXEC VIEW DATASET ('\"DATALINE\"(\"@MEMBER\")')\"\n   ELSE\n      \"ISPEXEC VIEW DATASET ('\"DATALINE\"')\"\n\"ISPEXEC CONTROL DISPLAY RESTORE\"\nRETURN\n\nCHECKTYPE:\nPDSFOUND = 0\nPSFOUND = 0\nVSAMFOUND = 0\nGDGFOUND = 0\nGDGBASEFOUND = 0\nGDGRELFOUND = 0\nPOS1 = POS('(',DATALINE)\nIF POS1 > 0 THEN\n   ISOURCE = SUBSTR(DATALINE,1,POS1-1)\nELSE\n   ISOURCE = DATALINE\nY = OUTTRAP('DSLIST.')\n\"LISTDS '\"ISOURCE\"'\"\nDO II = 1 TO DSLIST.0\n   IF POS('PS',DSLIST.II) > 0 THEN\n      PSFOUND = 1\n   ELSE\n      IF POS('PO',DSLIST.II) > 0 THEN\n         PDSFOUND = 1\n      ELSE\n         IF POS('VSAM',DSLIST.II) > 0 THEN\n            VSAMFOUND = 1\n         ELSE\n            IF POS('GDG',DSLIST.II) > 0 THEN\n               GDGFOUND = 1\n   END\nY = OUTTRAP('OFF')\nRETURN\n\nCHECKGDG:\nGDGCNT = 0\nGDGBASEFOUND = 0\nGDGRELFOUND = 0\nPOS1 = POS('(',DATALINE)\nIF POS1 > 0 THEN\n   ISOURCE = SUBSTR(DATALINE,1,POS1-1)\nELSE\n   ISOURCE = DATALINE\nY = OUTTRAP('GDGLIST.')\n\"LISTCAT ENTRIES('\"ISOURCE\"')\"\nGDGBASEFOUND = 1\nIF POS1 > 0 THEN DO\n   POS2 = POS(')',DATALINE)\n   GDGNUM = SUBSTR(DATALINE,POS1+1,POS2-POS1-1)\n   IF DATATYPE(GDGNUM) = 'NUM' THEN DO\n      ABSGEN = ABS(GDGNUM)\n      ABSGEN = ABSGEN + 1\n      END\n   GDGLEVEL. =''\n   GDGCNT = 1\n   GDGBASEFOUND = 1\n   DO II = GDGLIST.0 TO 2 BY -1\n      IF POS(ISOURCE,GDGLIST.II) > 0 THEN DO\n         GDGLEVEL.GDGCNT = WORD(GDGLIST.II,3)\n         GDGCNT = GDGCNT + 1\n         GDGRELFOUND = 1\n         END\n      END\n   DATALINE = GDGLEVEL.ABSGEN\n   END\nY = OUTTRAP('OFF')\nRETURN\n\nCOMPRESS: PROCEDURE EXPOSE DATALINE SYSDSORG ZEDLMSG INFO1\nX = LISTDSI(\"'\"DATALINE\"'\")\nDSORG2 = SYSDSORG\nIF DSORG2 \\ = 'VS' THEN\n   IF SYSDSN(\"'\"DATALINE\"'\") = 'OK' THEN DO\n      \"ISPEXEC LMINIT DATASET('\"DATALINE\"') DATAID(\"INP\") ENQ(EXCLU)\"\n      \"ISPEXEC LMCOMP DATAID(\"INP\")\"\n      IF RC \\= 0 THEN DO\n         ZEDLMSG = 'COULD NOT COMPRESS THE DATA SET.  THE DATA SET',\n            'MAY BE IN USE.  USER ISRDDN INSTEAD IF THE DATA SET IS',\n            'PART OF A LIBDEF.'\n         INFO1 = 'DATA SET COMPRESSION FAILURE'\n         RC = 0\n         END\n      ELSE\n         ZEDLMSG = 'DATA SET COMPRESSED.'\n      \"ISPEXEC LMCLOSE DATAID(\"INP\")\"\n      \"ISPEXEC LMFREE DATAID(\"INP\")\"\n      END\n   ELSE\n      ZEDLMSG = 'DATA SET DOES NOT EXIST.'\nELSE\n   ZEDLMSG = 'CANNOT COMPRESS VSAM FILE.'\nRETURN\n\nEXECUTE_IMMEDIATE:\nARG DATALINEC\n\"ISPEXEC CONTROL DISPLAY SAVE\"\nTRACE = 0\nrc = 0\nGOTO = ''\nIF DATALINEC \\ = '' THEN\n   IF DATALINEC = '-' THEN\n      ZEDLMSG = 'THE COMMAND NEEDS TO IMMEDIATELY FOLLOW THE -.'\n   ELSE\n      IF DATALINEC = '=' THEN\n         ZEDLMSG = 'THE COMMAND NEEDS TO IMMEDIATELY FOLLOW THE =.'\n      ELSE\n         IF DATALINEC = ':' THEN\n            ZEDLMSG = 'THE LABEL NEEDS TO IMMEDIATELY FOLLOW THE :.'\n         ELSE\n            IF SUBSTR(DATALINEC,1,1) = '-',\n            | SUBSTR(DATALINEC,1,1) = '=',\n            | SUBSTR(DATALINEC,1,1) = ':' then\n               IF SUBSTR(DATALINEC,1,1) = '-' THEN DO\n                  SCRIPTl = SUBSTR(DATALINEC,2)\n                  STATUS = MSG('ON')\n                  CALL INTERPRET_XI_SCRIPT\n                  IF GOTO \\= '' THEN DO\n                     GLABEL = ':' || GOTO\n                     DATALINEH = SUBSTR(DATALINEZ,POS(GLABEL,DATALINEZ))\n                     END\n                  STATUS = MSG('OFF')\n                  END\n               ELSE\n                  IF SUBSTR(DATALINEC,1,1) = '=',\n                  & PUC THEN DO\n                    XCMD = SUBSTR(DATALINEC,2)\n                    STATUS = MSG('ON')\n                    USERCMD = 1\n                    IF POS(CMD, SYSLIST) > 0 THEN\n                       CALL SYS_FUNCTION XCMD\n                    ELSE\n                       IF POS(CMD, USERLIST) > 0 THEN\n                          CALL USER_FUNCTION XCMD\n                    IF RC \\= 0 THEN INFO1 = 'TSO SCRIPT ERROR' XCMD\n                    RC = 0\n                    STATUS = MSG('OFF')\n                    END\n                  ELSE\n                     IF SUBSTR(DATALINEC,1,1) = ':' THEN NOP\n                     ELSE DO\n                        ZEDLMSG = 'NOT IN COMMAND FORMAT.'\n                        INFO1 = ZEDLMSG\n                        ERRORCOND = 1\n                        END\n\"ISPEXEC CONTROL DISPLAY RESTORE\"\nRETURN\n\nEDIT_SCRIPT:\n\"ISPEXEC CONTROL DISPLAY SAVE\"\n\"ISPEXEC LIBDEF ISPTLIB DATASET ID('\"@USER\".JUMPLIST.SCRIPT') STACK\"\n\"ISPEXEC LIBDEF ISPTABL DATASET ID('\"@USER\".JUMPLIST.SCRIPT') STACK\"\nIF SYSDSN(\"'\"@USER\".JUMPLIST.SCRIPT(\"@INITIAL\")'\") <> 'OK' THEN DO\n   \"ISPEXEC TBCREATE \"@INITIAL\" NAMES(SCRIPTL) WRITE REPLACE\"\n   SCRIPTL = '              '\n   DO II = 1 TO 20\n      \"ISPEXEC TBADD \"@INITIAL\"\"\n      END\n   \"ISPEXEC TBCLOSE \"@INITIAL\"\"\n   END\nIF CMD = 'ESC' THEN DO\n   \"ISPEXEC TBCLOSE \"@INITIAL\"\"\n   RETURN\n   END\n\"ISPEXEC TBOPEN \"@INITIAL\" SHARE\"\n\"ISPEXEC TBTOP \"@INITIAL\"\"\n\"ISPEXEC TBDISPL \"@INITIAL\" PANEL(JLSCRIPT)\"\nIF ZTDSELS > 0 THEN\n   DO WHILE ZTDSELS > 0\n      \"ISPEXEC TBDELETE \"@INITIAL\"\"\n      \"ISPEXEC TBMOD \"@INITIAL\"\"\n      \"ISPEXEC TBDISPL \"@INITIAL\"\"\n      END\n\"ISPEXEC TBTOP \"@INITIAL\"\"\n\"ISPEXEC TBCLOSE \"@INITIAL\"\"\n\"ISPEXEC LIBDEF ISPTLIB\"\n\"ISPEXEC LIBDEF ISPTABL\"\n\"ISPEXEC CONTROL DISPLAY RESTORE\"\nRETURN\n\nEXECUTE_SCRIPT:\n\"ISPEXEC CONTROL DISPLAY SAVE\"\nIF SYSDSN(\"'\"sysid\".JUMPLIST.SCRIPT(\"@INITIAL\")'\") = 'OK' THEN\n   if sysid \\= userid() then\n      \"ISPEXEC LIBDEF ISPTLIB DATASET\",\n          \"ID('\"sysid\".JUMPLIST.SCRIPT') STACK\"\n   else DO\n      \"ISPEXEC LIBDEF ISPTLIB DATASET\",\n          \"ID('\"sysid\".JUMPLIST.SCRIPT') STACK\"\n      \"ISPEXEC LIBDEF ISPTABL DATASET\",\n          \"ID('\"sysid\".JUMPLIST.SCRIPT') STACK\"\n      END\nelse\n   \"ISPEXEC LIBDEF ISPTlib DATASET ID('\"@USER\".JUMPLIST.SCRIPT') STACK\"\n\"ISPEXEC TBOPEN \"@INITIAL\" SHARE\"\n\"ISPEXEC TBTOP \"@INITIAL\"\"\nFTJCL = ''\nDO II = 1 TO 20\n   \"ISPEXEC TBSKIP \"@INITIAL\" NUMBER(+1)\"\n   IF SCRIPTL \\ = '' THEN\n      CALL INTERPRET_SCRIPT\n   IF ERRORCOND THEN LEAVE\n   END\nIF FTJCL = '' THEN FTJCL = @INITIAL\n\"ISPEXEC TBCLOSE \"@INITIAL\"\"\n\"ISPEXEC CONTROL DISPLAY RESTORE\"\nRETURN\n\nSUBMIT:\n\"ISPEXEC CONTROL DISPLAY SAVE\"\nIF DATALINE \\ = '' THEN\n   IF @MEMBER \\= '' THEN\n      \"SUBMIT '\"DATALINE\"(\"@MEMBER\")'\"\nZEDLMSG = 'JOB SUBMITTED.'\n\"ISPEXEC CONTROL DISPLAY RESTORE\"\nRETURN\n\nFILETAILOR_EDIT: PROCEDURE EXPOSE DATALINE FTJCL @MEMBER\n\"ISPEXEC CONTROL DISPLAY SAVE\"\n\"ISPEXEC VGET ZTEMPF\"\n\"ISPEXEC FTOPEN TEMP\"\n\"ISPEXEC FTINCL \"FTJCL\"\"\n\"ISPEXEC FTCLOSE\"\n\"ISPEXEC VGET ZTEMPN SHARED\"\n\"ISPEXEC LMINIT DATAID(ZTEMPDD) DDNAME(\"ZTEMPN\")\"\n\"ISPEXEC EDIT DATAID(\"ZTEMPDD\")\"\n\"ISPEXEC LMFREE DATAID(\"ZTEMPDD\")\"\n\"ISPEXEC CONTROL DISPLAY restore\"\nRETURN\n\nFILETAILOR_SUBMIT:\n\"ISPEXEC VGET ZTEMPF\"\n \"ISPEXEC FTOPEN TEMP\"\n\"ISPEXEC FTINCL \"FTJCL\"\"\n \"ISPEXEC FTCLOSE\"\n\"SUBMIT '\"ZTEMPF\"'\"\nRETURN\n\nINTERPRET_XI_SCRIPT:\n\"ISPEXEC CONTROL ERRORS RETURN\"\nSCRIPTA = 'SIGNAL ON SYNTAX NAME SCRIPT_XI_ERROR; ' || SCRIPTL\nINTERPRET \"\"SCRIPTA\"\"\nIF TRACE THEN\n   if rc = 0 then\n      SAY 'COMMAND RC ' RC\n   else\n      SAY 'COMMAND RC ' RC zerrlm zedlmsg\nERRRETURN1: NOP\nRETURN\n\nSCRIPT_XI_ERROR:\nZEDLMSG = 'AN ERROR OCCURRED IN SCRIPT LINE ' SCRIPTL\nERRORCOND = '1'\nINFO1 = 'SCRIPT ERROR ' SCRIPTL\nRC = 0\nSIGNAL ERRRETURN1\nRETURN\n\nINTERPRET_SCRIPT:\nSCRIPTA = 'SIGNAL ON SYNTAX NAME ERRORCOND; ' || SCRIPTL\nINTERPRET SCRIPTA\nRETURN\n\nERRORCOND:\nZEDLMSG = 'AN ERROR OCCURRED IN SCRIPT LINE ' SCRIPTL\nERRORCOND = '1'\nRETURN\n\nCLEAR_EXTENDS:\nEXTENDA = ''\nEXTENDB = ''\nEXTENDC = ''\nEXTENDD = ''\nEXTENDE = ''\nEXTENDF = ''\nEXTENDG = ''\nEXTENDH = ''\nEXTENDI = ''\nEXTENDJ = ''\nEXTENDK = ''\nEXTENDL = ''\nEXTENDM = ''\nEXTENDN = ''\nEXTENDO = ''\nEXTENDP = ''\nEXTENDQ = ''\nEXTENDR = ''\nEXTENDS = ''\nEXTENDT = ''\nEXTENDU = ''\nEXTENDV = ''\nEXTENDW = ''\nEXTENDX = ''\nEXTENDY = ''\nEXTENDZ = ''\nRETURN\n\nNULL_EXTENDS:\nIF EXTENDA = 'EXTENDA' THEN EXTENDA = ''\nIF EXTENDB = 'EXTENDB' THEN EXTENDB = ''\nIF EXTENDC = 'EXTENDC' THEN EXTENDC = ''\nIF EXTENDD = 'EXTENDD' THEN EXTENDD = ''\nIF EXTENDE = 'EXTENDE' THEN EXTENDE = ''\nIF EXTENDF = 'EXTENDF' THEN EXTENDF = ''\nIF EXTENDG = 'EXTENDG' THEN EXTENDG = ''\nIF EXTENDH = 'EXTENDH' THEN EXTENDH = ''\nIF EXTENDI = 'EXTENDI' THEN EXTENDI = ''\nIF EXTENDJ = 'EXTENDJ' THEN EXTENDJ = ''\nIF EXTENDK = 'EXTENDK' THEN EXTENDK = ''\nIF EXTENDL = 'EXTENDL' THEN EXTENDL = ''\nIF EXTENDM = 'EXTENDM' THEN EXTENDM = ''\nIF EXTENDN = 'EXTENDN' THEN EXTENDN = ''\nIF EXTENDO = 'EXTENDO' THEN EXTENDO = ''\nIF EXTENDP = 'EXTENDP' THEN EXTENDP = ''\nIF EXTENDQ = 'EXTENDQ' THEN EXTENDQ = ''\nIF EXTENDR = 'EXTENDR' THEN EXTENDR = ''\nIF EXTENDS = 'EXTENDS' THEN EXTENDS = ''\nIF EXTENDT = 'EXTENDT' THEN EXTENDT = ''\nIF EXTENDU = 'EXTENDU' THEN EXTENDU = ''\nIF EXTENDV = 'EXTENDV' THEN EXTENDV = ''\nIF EXTENDW = 'EXTENDW' THEN EXTENDW = ''\nIF EXTENDX = 'EXTENDX' THEN EXTENDX = ''\nIF EXTENDY = 'EXTENDY' THEN EXTENDY = ''\nIF EXTENDZ = 'EXTENDZ' THEN EXTENDZ = ''\nRETURN\n\nAPPEND_EXTENDS:\n@EXTEND = EXTENDA  EXTENDB  EXTENDC  EXTENDD  EXTENDE  EXTENDF\n@EXTEND = @EXTEND  EXTENDG  EXTENDH  EXTENDI  EXTENDJ  EXTENDK\n@EXTEND = @EXTEND  EXTENDL  EXTENDM  EXTENDN  EXTENDO  EXTENDP\n@EXTEND = @EXTEND  EXTENDQ  EXTENDR  EXTENDS  EXTENDT  EXTENDU\n@EXTEND = @EXTEND  EXTENDV  EXTENDW  EXTENDX  EXTENDY  EXTENDZ\nRETURN\n\nSYSTEMS_CONSOLE:\n\"ISPEXEC LIBDEF ISPTLIB DATASET ID('\"SYSTEMS_ISPTLIB\"') STACK\"\n\"ISPEXEC LIBDEF ISPTABL DATASET ID('\"SYSTEMS_ISPTABL\"') STACK\"\n\"ISPEXEC TBOPEN @USERCMD SHARE\"\nZRC = RC\n\"ISPEXEC TBTOP \"@USERCMD\"\"\nSYSTEMCMDS. = ''\nSYSLIST = ''\nSYSCOMMANDLIST = ''\nIF ZRC = 0 THEN\nDO II = 1 TO MAXCOMMANDS\n   CALL CLEAR_EXTENDS\n   \"ISPEXEC TBSKIP \"@USERCMD\" NUMBER(+1)\"\n   IF RC= 8 THEN LEAVE\n   IF @MEMBER = '' THEN LEAVE\n   PARSE UPPER VAR @MEMBER @MEMBER\n   CALL NULL_EXTENDS\n   CALL APPEND_EXTENDS\n   if substr(@member,1,1) = '<' then\n      startup = startup @member\n      if substr(@member,1,1) = '>' then\n         shutdown = shutdown @member\n   SYSLIST = SYSLIST @MEMBER\n   SYSTEMCMDS.@MEMBER = @EXTEND\n   END\nIF WORDS(SYSLIST) > 1 THEN DO\n   DO ULIST = 1 TO WORDS(SYSLIST) - 1\n      SYSCOMMANDLIST = SYSCOMMANDLIST WORD(SYSLIST,ULIST) || ','\n      END\n   SYSCOMMANDLIST = SYSCOMMANDLIST 'AND' WORD(SYSLIST,ULIST) || '.'\n   END\nELSE\n   SYSCOMMANDLIST = SYSLIST || '.'\n\"ISPEXEC TBCLOSE \"@USERCMD\"\"\n\"ISPEXEC LIBDEF ISPTLIB\"\n\"ISPEXEC LIBDEF ISPTABL\"\nRETURN\n\nUSER_CONSOLE:\n\"ISPEXEC LIBDEF ISPTlib DATASET ID('\"ucUSER\".JUMPLIST') STACK\"\n\"ISPEXEC LIBDEF ISPTABL DATASET ID('\"ucUSER\".JUMPLIST') STACK\"\nIF JUMPPROF = '@USERCMD' THEN\n   \"ISPEXEC TBCLOSE \"@USERCMD\"\"\n\"ISPEXEC TBOPEN @USERCMD SHARE\"\n\"ISPEXEC TBTOP \"@USERCMD\"\"\nUSERCMDS. = ''\nUSERLIST = ''\nUSERCOMMANDLIST = ''\nDO II = 1 TO MAXCOMMANDS\n   CALL CLEAR_EXTENDS\n   \"ISPEXEC TBSKIP \"@USERCMD\" NUMBER(+1)\"\n   IF RC= 8 THEN LEAVE\n   IF @MEMBER = '' THEN LEAVE\n   PARSE UPPER VAR @MEMBER @MEMBER\n   CALL NULL_EXTENDS\n   CALL APPEND_EXTENDS\n   if substr(@member,1,1) = '<' then\n      startup = startup @member\n   if substr(@member,1,1) = '>' then\n      shutdown = shutdown @member\n   USERLIST = USERLIST @MEMBER\n   USERCMDS.@MEMBER = @EXTEND\n   END\nIF WORDS(USERLIST) > 1 THEN DO\n   DO ULIST = 1 TO WORDS(USERLIST) - 1\n      USERCOMMANDLIST = USERCOMMANDLIST WORD(USERLIST,ULIST) || ','\n      END\n   USERCOMMANDLIST = USERCOMMANDLIST 'AND' WORD(USERLIST,ULIST) || '.'\n   END\nELSE\n   USERCOMMANDLIST = USERLIST || '.'\n\"ISPEXEC TBCLOSE \"@USERCMD\"\"\nPARSE UPPER VAR USERLIST USERLIST\n\"ISPEXEC LIBDEF ISPTLIB\"\n\"ISPEXEC LIBDEF ISPTABL\"\nRETURN\n\nstartup:\ndo ii = 1 to words(startup)\n   cmd = word(startup,ii)\n   CALL SYS_FUNCTION CMD\n   CALL USER_FUNCTION CMD\n   end\nreturn\n\nshutdown:\ndo ii = 1 to words(shutdown)\n   cmd = word(shutdown,ii)\n   CALL SYS_FUNCTION CMD\n   CALL USER_FUNCTION CMD\n   end\nreturn\n\nLMINIT_BROWSE: PROCEDURE EXPOSE DATALINE\n\"ISPEXEC CONTROL DISPLAY SAVE\"\n\"ISPEXEC VGET ZTEMPN SHARED\"\n\"ISPEXEC LMINIT DATAID(ZTEMPDD) DDNAME(\"ZTEMPN\")\"\n\"REPRO INDATASET('\"DATALINE\"')\",\n    \"OUTFILE(\"ZTEMPN\")\"\n\"ISPEXEC BROWSE DATAID(\"ZTEMPDD\")\"\n\"ISPEXEC LMFREE DATAID(\"ZTEMPDD\")\"\n\"ISPEXEC CONTROL DISPLAY RESTORE\"\nRETURN\n\nCOPYprof: procedure expose @user JUMPPROF\nCDSN =  \"\"@USER\".JUMPLIST.ROLLOVER\"\nCDSN1 = \"\"@USER\".JUMPLIST.ROLLOVER\"\n\"ISPEXEC CONTROL ERRORS RETURN\"\n\"ISPEXEC LMINIT DATAID(\"ZTEMPDA\") DATASET('\"CDSN\"')\"\n\"ISPEXEC LMINIT DATAID(\"ZTEMPDB\") DATASET('\"CDSN1\"')\"\n\"ISPEXEC LMCOPY FROMID(\"ZTEMPDA\") FROMMEM(TEMPPROF)\",\n   \"TODATAID(\"ZTEMPDB\") TOMEM(\"JUMPPROF\") REPLACE\"\n\"ISPEXEC LMFREE DATAID(\"ZTEMPDA\")\"\n\"ISPEXEC LMFREE DATAID(\"ZTEMPDB\")\"\nRETURN\n\nSETUP:\nUSERID = USERID()\nIF SYSDSN('ADMIN.JUMPLIST') <> 'OK' THEN DO\n   \"ALlocate DD(ALLOCDD) DSN('ADMIN.JUMPLIST') SPACE (1 10)\",\n   \"DSORG(PO) DIR(5) LRECL(80) BLKSIZE(3200) RECFM(F,B) MOD REUSE\"\n   \"FREE DD(ALLOCDD)\"\n   end\n\"ISPEXEC LIBDEF ISPTlIB DATASET ID('ADMIN.JUMPLIST') STACK\"\n\"ISPEXEC LIBDEF ISPTABL DATASET ID('ADMIN.JUMPLIST') STACK\"\nIF SYSDSN('ADMIN.JUMPLIST(JLADMIN)') <> 'OK' THEN\n   \"ISPEXEC TBCREATE JLADMIN KEYS(SUKEY)\",\n      \"NAMES(SYSID, MAXC, ETYPE, ISPPLIB) WRITE REPLACE\"\nELSE\n   \"ISPEXEC TBOPEN JLADMIN WRITE\"\n\"ISPEXEC CONTROL DISPLAY SAVE\"\nSUKEY = 'SETUP'\n\"ISPEXEC TBGET JLADMIN\"\n\"ISPEXEC DISPLAY PANEL(JLSETUP)\"\n\"ISPEXEC TBMOD JLADMIN\"\n\"ISPEXEC CONTROL DISPLAY RESTORE\"\n\"ISPEXEC TBCLOSE JLADMIN\"\n\"ISPEXEC LIBDEF ISPTLIB\"\n\"ISPEXEC LIBDEF ISPTABL\"\nRETURN\nXQ ENDUP\n/*\n//IBMUSERA JOB 'INIT',MSGLEVEL=(0,0),MSGCLASS=X,REGION=2048K,CLASS=A          00\n//*                                                                           00\n//*CHANGE USERID TO YOUR TSO LOGIN ID.  LEAVE THE APPENDED A.                 00\n//*\n//* START JCL\n//INIT    EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD SYSOUT=X\n//*\n//SYSUT2   DD DSN=USER.ISPPLIB,DISP=SHR\n//*\n//*CHANGE sysut2 to point to the ispf panel library where the user\n//*panels reside.  you may need to have racf authorization to write\n//*to this data set.\n//*\n//SYSIN    DD DATA\n./ ADD NAME=JUMPLIST,LIST=ALL\n)ATTR\n( TYPE(input) INTENS(high) color(green)\n- TYPE(input) INTENS(high) color(white) hilite(uscore)\n+ TYPE(TEXT) INTENS(HIGH) COLOR(turquoise)\n# TYPE(TEXT) INTENS(HIGH) COLOR(red) SKIP(ON)\n* TYPE(INPUT) INTENS(HIGH) COLOR(GREEN) hilite(uscore)\n% TYPE(text) INTENS(HIGH) COLOR(white)\n\\ TYPE(text) INTENS(HIGH) COLOR(blue)\n^ TYPE(output) INTENS(HIGH) COLOR(BLUE) skip(on)\n$ TYPE(output) INTENS(HIGH) COLOR(turquoise) skip(on)\n! TYPE(INPUT) INTENS(HIGH) COLOR(red) HILITE(USCORE)\n)BODY EXPAND(//)\n+COMMAND%===>(ZCMD\n+ / /#J+u m p #L+i s t/ /\n+\n+User ID*@user    +Profile*jumpprof+View Help*z+Directory*z#\n^info1\n^info2\n+CMD   $Usename1  $Usename2\n)MODEL\n-CMD ^Z!@MEMBER ^Z!@INITIAl^z*@DATASET\n)INIT\n.ZVARS = '(help dir FILLER filler1 filler2)'\n.CURSOR = &CURPOS\nIF (&DIR = 'S')\n   .ATTR (@USER) = 'TYPE(OUTPUT) COLOR(GREEN) HILITE(USCORE) SKIP(ON)'\n   .ATTR (JUMPPROF) ='TYPE(OUTPUT) COLOR(GREEN) HILITE(USCORE) SKIP(ON)'\n   .ATTR (@MEMBER) ='TYPE(OUTPUT) COLOR(RED) HILITE(USCORE) SKIP(ON)'\n   .ATTR (@INITIAL) ='TYPE(OUTPUT) COLOR(RED) HILITE(USCORE) SKIP(ON)'\n   .ATTR (@DATASET) ='TYPE(OUTPUT) COLOR(GREEN) HILITE(USCORE) SKIP(ON)'\n   .CURSOR = &CURPOS\n&ZTDMARK = ' '\n&CMD = ''\n&HPROF = &JUMPPROF\n&HUSER = &@USER\n)REINIT\n.CURSOR = &CURPOS\n)PROC\n.CURSOR = &CURPOS\nIF (&DIR = 'S')\n   .ATTR (@USER) = 'TYPE(OUTPUT) COLOR(RED)'\n&ZTOP = ZTDSIZE\nIF (&JUMPPROF = '')\n   &JUMPPROF = &HPROF\nIF (&HUSER = '')\n   &@USER = &HUSER\n)END\n./ ADD NAME=JLHELP,LIST=ALL\n)ATTR\n( TYPE(input) INTENS(high) color(green)\n# TYPE(TEXT) INTENS(HIGH) COLOR(red) SKIP(ON)\n* TYPE(INPUT) INTENS(HIGH) COLOR(GREEN) hilite(uscore)\n% TYPE(text) INTENS(HIGH) COLOR(yellow)\n\\ TYPE(text) INTENS(HIGH) COLOR(TURQUOISE)\n^ TYPE(output) INTENS(HIGH) COLOR(BLUE) skip(on)\n! TYPE(text) INTENS(HIGH) COLOR(turquoise)\n$  AREA(SCRL) EXTEND(ON)\n)BODY EXPAND(~~)\n$MYAREA ---------------------------------------------------------------$\n)AREA MYAREA DEPTH(1)\n!\n%~ ~ JUMPLIST QUICK REFERENCE ~ ~\n!\n%CMD OPTIONS\n\\#E\\Edits the specified data set.  If a member is not specified then\n\\ a listing will be shown of the data set contents.  Use an#S!to select\n\\ the desired member.  If a source member is specified in MEMBER then\n\\ the member is edited.  If a data set is sequential then the file is\n\\ directly edited. The edit function does not support VSAM files.\n\\\n+#ESCR\\Forces a data set edit using the DSLIST function of option 3.4.\n+\n\\#V\\Views the specified data set   If the data set is\n\\ partitioned then a list of its members is shown.  The user can then\n\\ select the member to view.  If the data set is sequential then the\n\\ file is directly viewed.  If a member is specified then the member is\n\\ directly viewed.  The view function does not support VSAM files.\n\\\n\\#B\\Browses the data set specified in DATASET.  If the data set is\n\\ partitioned then a list of its members is shown.  The user can then\n\\ select the member to browse.  If the data set is sequential then the\n\\ file is directly browsed.  If a member is specified then the member is\n\\ directly browsed.  The Browse function can be used for VSAM files.\n\\\n\\#Z\\Compresses the specified data set.\n\\\n\\#J\\Submits the JCL member in MEMBER.  The data set must be specified.\n\\ This function only supports PDS files.\n\\\n\\#ES\\Edits the script that is specified in INITIAL.  The script is in\n\\ an ISPF display table format.  REXX type commands can be entered to\n\\ allow for symbolic variable replacement to occur for file tailoring.\n\\ The file tailoring member name is specified in MEMBER and is\n\\ referenced by the ISPSLIB libdef.  The libdef can be overridden\n\\ by specifying the data set name in the rightmost entry field.\n\\ The file tailoring member must exist in the ISPSLIB libdef library.\n\\\n\\#FE\\File tailor edit.  Edits the results of the file tailoring\n\\ process that occurred for the file tailor MEMBER name.  The symbolics\n\\ that were specified in MEMBER will be replaced by the values that\n\\ were specified in INITIAL.\n\\\n\\#FJ\\File tailor submit.  Submits the results of the file tailoring\n\\ process that occurred for the file tailor MEMBER name.  The symbolics\n\\ that were specified in MEMBER will be replaced by the values that\n\\ were specified in INITIAL.\n\\\n\\#XI\\Executes the immediate script specified on the JumpList panel.\n\\\n\\#XS\\Tests the script that is specified in INITIAL.\n\\\n\\#/I\\Inserts one blank line into the profile.\n\\\n\\#/Ixx\\Inserts xx blank lines into the profile, where xx is a two digit\n\\ numeric value.\n\\\n\\#/D\\Deletes one blank line from the profile.\n\\\n\\#/Dxx\\Deletes xx blank lines from the profile, where xx is a two digit\n\\ numeric value.\n\\\n\\#/R\\Replicates a line in the profile.\n\\\n\\#/Rxx\\Replicates xx blank lines in the profile, where xx is a two digit\n\\ numeric value.\n\\\n%JUMPLIST USAGE\n\\ Enter TSO JUMPLIST profname where profname is the profile name to be\n\\ created.  An example is TSO JUMPLIST UTILS.  If the profile is new\n\\ then a profile screen with 10 blank entry lines is displayed.  The\n\\ number of lines can be adjusted with the CMD functions presented\n\\ in this article.  If the profile already exists then that profile will\n\\ be displayed.\n\\#Note\\ A profile name can be up to 8 characters long and must begin\n\\ with an alpha character.  No special characters can be used in the\n\\ name.\n\\\n\\ Profile names can be changed in the middle of a JUMPLIST session.\n\\ Simply key the name of the profile and press enter.  Other user's\n\\ profiles can be used also.  Key in the name of the user id in USER\n\\ and key the profile name in.  If the profile is in use by the owner\n\\ then JUMPLIST will generate a temporary copy of the profile that\n\\ is read only.  If a profile is specified twice, through duplicate\n\\ JumpList sessions, errors may occur if the profile is modified\n\\ and may result in a ISPF error.  If this occurs then restart\n\\ JumpList using TSO JUMPLIST /CLOSE.  This will deallocate the\n\\ profile.\n\\\n%Immediate Scripts\n! Enter commands in the rightmost field.\n!\n! Precede Rexx and TSO commands with a dash.  Enclose TSO commands\n! with with the#\"!character.\n!\n! Use /XPN in CMD to expand the field to 2045 characters.  A new\n! window will appear to allow for the expanded entry.\n!\n! Append double semicolons after all logical commands.  A logical\n! command is similar to:\n!\n!#-DO II = 1 TO 100;SAY II;END;;\n!\n! Use XI in CMD to execute the script.\n\\\n%User and Supervisor Commands\n! Enter @USERCMD as the profile name to start the command editor.\n!\n! Supervisor commands are simply commands created by the supervisor\n! or systems analyst.  See the notes at the top of the JUMPLIST\n! Rexx Exec to properly configure the global access.\n!\n! Enter the name of the new command under the COMMAND field.  For\n! short commands, the commands will be enter in the rightmost field.\n! Use /XPN in CMD to expand the field to 2045 characters.  A new\n! window will appear to allow for the expanded entry.\n!\n! Previously defined commands can be executed in the new command by\n! preceding it with an equal sign.  Prior defined commands cannot be\n! executed within a logical Rexx statement such as\n!\n!#-DO II = 1 TO 100;=CMD1;END;;\n!\n! However, the GOTO='label' clause, where label is some user defined\n! label name, allows execution paths to be altered in a series of\n! Rexx commands, such as\n!\n!#X=10;;:label;;-X=X-1;=CMD1;;-IF X > 0 THEN GOTO='label';;\n!\n! This allows for previously defined user commands to be conditionally\n! executed in a script.\n!\n!#-DO II = 1 TO 100;SAY II;END;;\n!\n! Commands can be stacked if they are separated by the#;;!delimiter.\n!\n! The user or supervisor command name cannot be more than 4 characters\n! in length The exception is if the command will be used as a startup or\n! shutdown command.\n!\n! A startup command will be preceded with a less than sign such as\n! <START1.  A shutdown command will be preceded with a greater than\n! sign such as >SHUTDN1.  If a coding error prevents the utility\n! from starting then issue TSO JUMPLIST /CLOSE.  This will prevent\n! the commands from executing and will allow the repair of the command.\n! Is is best to write the command as an immediate script first to\n! allow it to be tested and then transfer it to a START/STOP script.\n!\n! PF3 back to TSO and restart JumpList to load the updated user\n! command list.\n!\n%Directory Assistance\n! Profiles can be selected and maintained through the Directory\n! function.  A list of available profiles and INITIAL scripts is\n! shown.  You can select a profile with a#S!or delete a profile or\n! INITIAL script with a #D! in the CMD field.\n!\n%Internal Notes\n\\ Profiles are retained in an ISPF data set as separate table entries.\n\\ See MAINTENANCE NOTES below for the naming convention.  There is\n\\ enough directory and table space available for a reasonable number\n\\ of entries.  If more space is needed then rename the profile\n\\ data set, increase the space and directory size in the utility and\n\\ restart JumpList.  Then copy the backed up profiles to the redefined\n\\ data set.\n\\\n\\ The structure of JumpList uses 3 key table elements.  They are\n\\ @MEMBER, for the Member name, @INITIAL for the script name, and\n\\ DATALINE for data set, immediate script, and user command entry.\n\\ DATALINE is a subordinate name to @DATASET which is used in the\n\\ table definition.  The extended entries for DATALINE are kept in\n\\ the EXTEND variables which are a part of the table definition.  These\n\\ variables are not directly accessible by the user.\n\\\n%Maintenance Notes\n\\ The user profiles are kept in\n\\ userid.JUMPLIST\n\\ The user scripts are kept in\n\\ userid.JUMPLIST.SCRIPT\n\\ Rollover scripts are kept in\n\\ userid.JUMPLIST.ROLLOVER\n\\ where userid is the TSO login ID.\n\\ The Rollover data set is internal to the utility and allows for\n\\ duplicate profiles to be utilized when a requested foreign profile\n\\ is in use.  It normally will be of no concern to the user.\n)INIT\n)PROC\n)END\n./ ADD NAME=JLSCRIPT,LIST=ALL\n)ATTR\n- TYPE(output) INTENS(high) color(yellow)\n@ TYPE(INPUT) INTENS(HIGH) COLOR(GREEN)\n# TYPE(TEXT) INTENS(HIGH) COLOR(red) SKIP(ON)\n* TYPE(INPUT) INTENS(HIGH) COLOR(GREEN) hilite(uscore)\n% TYPE(text) INTENS(HIGH) COLOR(white)\n+ TYPE(text) INTENS(HIGH) COLOR(blue)\n^ TYPE(INPUT) INTENS(HIGH) COLOR(BLUE) HILITE(USCORE)\n! TYPE(INPUT) INTENS(HIGH) COLOR(red) HILITE(USCORE)\n_ TYPE(INPUT) INTENS(HIGH) COLOR(GREEN) hilite(uscore)\n)BODY EXPAND(//)\n+COMMAND%===>@ZCMD\n+\n+ / /#J+u m p #L+i s t / /\n+\n+REXX MODE SCRIPT LINES\n)MODEL\n_SCRIPTL\n)INIT\n&ZTDMARK = ' '\n)REINIT\n)PROC\n)END\n./ ADD NAME=JLSETUP,LIST=ALL\n)ATTR\n# TYPE(TEXT) INTENS(LOW) SKIP(ON)\n+ TYPE(TEXT) INTENS(HIGH) COLOR(BLUE)\n* TYPE(TEXT) INTENS(HIGH) COLOR(RED)\n% TYPE(TEXT) INTENS(HIGH) COLOR(BLUE) SKIP(ON)\n@ TYPE(TEXT) INTENS(HIGH) COLOR(WHITE)\n- TYPE(OUTPUT) INTENS(HIGH) COLOR(BLUE)\n$ TYPE(OUTPUT) INTENS(HIGH) COLOR(GREEN)\n) TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW)\n_ TYPE(INPUT) INTENS(HIGH) COLOR(GREEN) HILITE(USCORE)\n( TYPE(INPUT) INTENS(HIGH) COLOR(GREEN)\n)BODY EXPAND(//)\n+COMMAND%===>(ZCMD\n+\n / /*J u m p L i s t   Setup/ /\n+\n)ZINFO                                                        #\n+\n%Panel Library Definition\n@The LIBDEF is the data set where the JumpList panels reside.  If left\n@blank, the system libdef defined in the login proc will be used.\n_ISPPLIB                         #\n+\n%System Command Administrator#\n_SYSID  #\n#\n%Edit Type\n@1 for single character command column\n@8 for 8 character command column\n@9 for 9 character command column\n_Z#\n+\n%Maximum Commands\n_MAXC#\n)INIT\n.ZVARS = '(ETYPE)'\nIF (&SYSID = '')\n   &SYSID = &USERID\nIF (&ETYPE = '')\n   &ETYPE = '8'\nIF (&MAXC = '')\n   &MAXC = 1000\nVER(&ETYPE,LIST,1,8,9)\nIF (&SYSID NE &USERID)\n   &ZINFO = 'AUTHORIZATION ERROR.  BROWSE MODE SUBSTITUTED'\n   .ATTR (SYSID) = 'TYPE(OUTPUT) COLOR(RED) HILITE(USCORE) SKIP(ON)'\n   .ATTR (ETYPE) = 'TYPE(OUTPUT) COLOR(RED) HILITE(USCORE) SKIP(ON)'\n   .ATTR (MAXC) = 'TYPE(OUTPUT) COLOR(RED) HILITE(USCORE) SKIP(ON)'\n)REINIT\n)PROC\nVER(&ETYPE,LIST,1,8,9)\nIF (&MAXC = '')\n   &MAXC = 1000\n)END\n./ ADD NAME=JLXPND,LIST=ALL\n)ATTR\n( TYPE(input) INTENS(high) color(green)\n+ TYPE(TEXT) INTENS(HIGH) COLOR(turquoise)\n# TYPE(TEXT) INTENS(HIGH) COLOR(red) SKIP(ON)\n% TYPE(text) INTENS(HIGH) COLOR(white)\n\\ TYPE(text) INTENS(HIGH) COLOR(blue)\n^ TYPE(INPUT) INTENS(HIGH) COLOR(RED) HILITE(USCORE)\n! TYPE(INPUT) INTENS(HIGH) COLOR(GREEN) HILITE(USCORE)\n$  AREA(SCRL) EXTEND(ON)\n)BODY EXPAND(//)\n$MYAREA -----------------------------------------------------------------------$\n)AREA MYAREA DEPTH(1)\n+\n+COMMAND%===>(ZCMD                                                             #\n+ / /#J+u m p #L+i s t/ /\n+\n+Precede logical Rexx commands with -.\n+Precede references to user commands with =.\n+Separate logical commands with double semicolons ;;\n+\n^EXTENDA                                           #\n^EXTENDB\n^EXTENDC\n^EXTENDD\n^EXTENDE\n^EXTENDF\n^EXTENDG\n^EXTENDH\n^EXTENDI\n^EXTENDJ\n^EXTENDK\n^EXTENDL\n^EXTENDM\n^EXTENDN\n^EXTENDO\n^EXTENDP\n^EXTENDQ\n^EXTENDR\n^EXTENDS\n^EXTENDT\n^EXTENDU\n^EXTENDV\n^EXTENDW\n^EXTENDX\n^EXTENDY\n^EXTENDZ\n)INIT\n)REINIT\n)PROC\n)END\n./ ENDUP\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT717/FILE717.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT717", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}