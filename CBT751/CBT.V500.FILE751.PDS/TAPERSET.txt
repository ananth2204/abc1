//SOMITCWT JOB (????????,????,1439,9999,9999),TAPERSET-SOMITCW,
//             CLASS=?,MSGCLASS=?,
//             NOTIFY=SOMITCW,COND=(0,NE)
//HLASMCL  EXEC HLASMCL,PARM.C=(NORENT,OBJECT,NODECK,TERM),
//             PARM.L=NORENT
//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB
//         DD  DISP=SHR,DSN=SYS1.MODGEN
//         DD  DISP=SHR,DSN=????.SORC????
PASS TITLE 'TAPERSET - - - Updates TAPEBITS in memory to start at zero'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*    If the tape pool expands because no TAPESYN2 or no
*  TAPESYNC runs for a long time or other reason, running
*  program will drop the current tape and high-water-mark
*  back to the beginning or to numbers set.
*  The tape pool high will expand again as tapes are used.
*  Only the memory copy of TAPEBITS is updated,
*  but TAPESAVE will write to disk.
*
*    I set the tape range to start at zero immediately
* before the weekly SMF DUMP JOB writes the weekly SMF data
* to tape.  That way I can expect a low number tape so high
* numbered tapes will not be used when there is a long RETPD
* like the weekly SMF DUMP tape.  I could also run TAPEZERO
* or TAPESYN2 before or after TAPERSET to make more low
* number tapes available, but that would be over-kill for me.
*
*     Change log:
*
* 2006-10-13 Added ability to use a PARM.
*
* 2006-10-03 Changed high-water-mark to be reset to zero instead
*            of 124 ( tape x00999 ).
*
*     Sample JCL:
*
* //xxxxxxxT JOB (xxxxxxxx,xxxx,1439,9999,9999),TAPERSEJ-xxxxxxxx,
* //         CLASS=x,MSGCLASS=x,
* //         NOTIFY=SOMITCW,COND=(0,NE)
* //TAPERSET EXEC PGM=TAPERSET,  If no PARM, tape zero is assumed
* //             PARM=(C00123,   Set current tape number to 123
* //             C00999)         Set high-water tape number to 999
* //*                            Tape numbers are rounded by eight
* //* STEPLIB DD  DISP=SHR,DSN=an.apf.authorized.library
* //SYSUDUMP DD  SYSOUT=*
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
TAPERSET CSECT ,
TAPERSET AMODE 31                 Addressing mode of 31
TAPERSET RMODE ANY                Residency mode of anywhere
         USING *,R15              Set temporary base register
         SAVE  (14,12),,'TAPERSET.&SYSDATE..&SYSTIME' Save Registers
         DROP  R15                Drop the temporary base register
         LR    R12,R15            Load the program's base register
         USING TAPERSET,R12       Give the assembler the new base
         LA    R2,0(,R1)          Save PARM register, clear high byte
         LA    R0,SAVESIZE        Load reg. save area size for GETMAIN
         GETMAIN R,LV=(0)         Get storage for reg. save area space
         XC    0(SAVESIZE,R1),0(R1)  Clear register save area
         ST    R1,8(,R13)         Connect old and new save areas
         ST    R13,4(,R1)         Connect old and new save areas
         LR    R13,R1             Connect old and new save areas
         USING SAVEAREA,R13       Give assembler register for DSECT
*                                 Save area just for convention, no use
* Find TAPEBITS
         L     R11,16             Load the address of the CVT
         USING CVT,R11            Give assembler the CVT mapping
         L     R11,CVTUSER        Load the address of the CVT user area
         USING XCVTUSER,R11       Give assembler the CVTUSER mapping
         CLC   XCVTUEYE,CVTUSER1  See if the CVTUSER area is valid
         BNE   NOCVTUSR           Area not valid, can't access TAPEBITS
         L     R11,XCVTTAPE       Load TAPEBITS address
         USING TAPEBITS,R11       Give assembler the TAPEBITS mapping
         CLC   TAPEEYE,TAPEBIT1   See if the TAPEBITS area is valid
         BNE   NOBITS             Area not valid, can't access TAPEBITS
*
* Initialize assumed current and high-water-mark vol number to set
         MVC   VOLCURR,VOLINIT    Initialize current vol default
         MVC   VOLHIGH,VOLINIT    Initialize high-water vol default
         MVC   VOLWORK,VOLINIT    Initialize numeric check area
*
* Check if PARM and process
         LTR   R2,R2              See of PARM list address is zero
         BZ    UPDATE             Go set current and high tape to zero
         L     R3,0(,R2)          Load address of the PARM
         LTR   R3,R3              See of PARM address is zero
         BZ    UPDATE             Go set current and high tape to zero
         CLC   0(2,R3),H0         See if PARM length is zero
         BZ    UPDATE             Go set current and high tape to zero
         CLC   0(2,R3),H13        See if PARM a valid length
         BNE   BADPARM1           Bad PARM length, go abend
         CLC   TAPECHAR,2(R3)     See if current tape pool
         BNE   BADPARM2           Not current pool, go abend
         CLC   2(1,R3),9(R3)      See if both number in same pool
         BNE   BADPARM2           Not same pool, go abend
         MVZ   VOLWORK,3(R3)      See if current volser is numeric
         CLC   VOLWORK,VOLINIT    See if current volser is numeric
         BNE   BADPARM4           Volume serial not numeric, go abend
         MVZ   VOLWORK,10(R3)     See if current volser is numeric
         CLC   VOLWORK,VOLINIT    See if current volser is numeric
         BNE   BADPARM3           Volume serial not numeric, go abend
         MVC   VOLCURR,3(R3)      Copy new current tape number to work
         MVC   VOLHIGH,10(R3)     Copy new high-water-mark to work
*
* Update TAPEBITS in memory
*
UPDATE   DS    0H
         PACK  DWORK,VOLCURR      Pack new current vol ser number
         CVB   R4,DWORK           Load vol ser in register
         SRL   R4,3               Find new current vol displacement
         PACK  DWORK,VOLHIGH      Pack new high vol ser number
         CVB   R5,DWORK           Load vol ser in register
         SRL   R5,3               Find new high vol displacement
         CLR   R4,R5              See if high is equal or high
         BH    BADPARM4           Current is higher than high, go abend
         MODESET KEY=ZERO         Switch to key zero
*        XC    TAPEBITS+12(6),TAPEBITS+12  Clear old TAPESKIP
         STH   R4,TAPEDISP        Set new current tape number byte
         STH   R5,TAPEHIGH        Set new high-water-mark/soft-limit
         MVI   TAPEUPD,1          TAPESAVE will write TAPEBITS to disk
         MODESET KEY=NZERO        Switch to key eight
         LA    R0,SAVESIZE        Load work area size for FREEMAIN
         LR    R1,R13             Save work area location for FREEMAIN
         L     R13,4(,R13)        Restore caller's save area address
         FREEMAIN R,LV=(0),A=(1)  Free work area's storage
         RETURN (14,12),RC=(15)   Return to caller with FREEMAIN retcde
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* Error routines
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
NOCVTUSR DS    0H
         WTO  'TAPERSET - No CVTUSER area, program abending',ROUTCDE=11
         ABEND 123                Abend without a dump
*
NOBITS   DS    0H
         WTO 'TAPERSET - No TAPEBITS area, program abending',ROUTCDE=11
         ABEND 234                Abend without a dump
*
BADPARM1 DS    0H
         LH    R1,0(,R3)          Load bad PARM length
         CVD   R1,DWORK           Convert binary number to packed dec.
         OI    DWORK+7,X'0F'      Correct the sign
         UNPK  BADWTO1+31(5),DWORK+5(3)  Put PARM length in WTO
BADWTO1  WTO   'TAPERSET - PARM length xxxxx is invalid',ROUTCDE=11
         B     ABEND345           Go abend for bad PARM
*
BADPARM2 DS    0H
         WTO   'TAPERSET - PARM tape number not in pool',ROUTCDE=11
         MVC   BADWTO2+36(1),TAPECHAR  Move first tape vol byte to WTO
BADWTO2  WTO   'TAPERSET - Current pool is "x"',ROUTCDE=11
         B     PARMIS             Go abend for bad PARM
*
BADPARM3 DS    0H
         WTO   'TAPERSET - Vol sers not in correct format',ROUTCDE=11
         WTO   'TAPERSET - Last 5 bytes must be numeric',ROUTCDE=11
         B     PARMIS             Go abend for bad PARM
*
BADPARM4 DS    0H
         WTO   'TAPERSET - Vol sers not correct values',ROUTCDE=11
         WTO   'TAPERSET - Current is higher than high',ROUTCDE=11
         WTO   'TAPERSET - Current should not be higher',ROUTCDE=11
*        B     PARMIS             Go abend for bad PARM
PARMIS   DS    0H
         MVC   PARMWTO+32(13),2(R3)  Copy bad PARM to WTO
PARMWTO  WTO   'TAPERSET - Bad PARM is: xxxxxx,xxxxxx',ROUTCDE=11
ABEND345 DS    0H                 Bad PARM abend
         MVC   ABENDWTO+35(1),TAPECHAR Move first tape vol byte to WTO
         MVC   ABENDWTO+42(1),TAPECHAR Move first tape vol byte to WTO
ABENDWTO WTO   'TAPERSET - Format is PARM=(x00123,x00999)',ROUTCDE=11
         WTO   'TAPERSET - First is new current tape vol',ROUTCDE=11
         WTO   'TAPERSET - Second is new high-water-mark',ROUTCDE=11
         WTO   'TAPERSET - Program abending',ROUTCDE=11
         ABEND 345                Abend without a dump
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* Constants
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         DS    0D                 Align Constants area
*
* The X'1' is the DSECT version number
CVTUSER1 DC    CL7'CVTUSER',XL1'1'  Constant to check CVTUSER
TAPEBIT1 DC    CL7'TAPEBIT',XL1'1'  Constant to check TAPEBIT
*
VOLINIT  DC    CL5'00000'         Assumed current and high vol to set
*
H0       DC    H'0'               Constant for compare
H13      DC    H'13'              Constant for compare
*
         LTORG ,                  In case someone adds literals
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DSECTs Follow
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
SAVEAREA DSECT ,
         DS    9D                 Register save area
DWORK    DS    D                  Double word work area
VOLCURR  DS    CL5                Current vol ser to set
VOLHIGH  DS    CL5                Tape pool high-water-mark to set
VOLWORK  DS    CL5                Area to check for numeric
SAVESIZE EQU   *-SAVEAREA
*
         COPY CVTUSER             Copy the CVTUSER area DSECT
* XCVTUSER DSECT ,
* XCVTUEYE DS    CL8              7 bytes of 'CVTUSER' and 1 byte X'01'
* XCVTUVOL DS    XL6              VOLSER from message used by IEC507D
*          DS    XL2              Space available for expansion
* XCVTUTIM DS    XL6              CYYDDDHHMMSS Century, Year,Day, Hour,
* *                               Minute, and Second, used by IOS000I
*          DS    XL2              Space available for expansion
* XCVTPSWD DS    F                ACF2 LGNIXIT anchor, used by SAVEPSWD
* XCVTJOUR DS    F                DFHJC4508 Journal PRIM or SECO
* XCVTTAPE DS    XL4              TAPE, TAPESAVE, TAPESYNC, & IGXMSGEX
* * TAPESKIP DS    CL6            TAPESKIP was old name for XCVTSKIP
* XCVTSKIP DS    CL6              IEC512I tape vol ser to ignore
*          DS    XL22             Space available for expansion
* XCVTUSIZ EQU   *-XCVTUSER       Length of area pointed to by CVTUSER
*
TAPEBITS   DSECT ,
           COPY  TAPEBITS         Copy the TAPEBITS DSECT
* TAPEEYE  DS    D                DSECT eye-catcher CL7'TAPEBIT',XL1'1'
* TAPEOLD  DS    A                Addr of old TAPEBITS record to delete
*          DS    CL6              TAPESKIP moved to CVTUSER as XCVTSKIP
* TAPEDISP DS    XL2              Last TAPES byte that had a free bit
* TAPEHIGH DS    XL2              High-water-mark aka soft tape limit
* TAPEUPD  DS    XL1              Tape bits updated, need writing
* TAPECHAR DS    CL1              First byte of tapes described next
* TAPES    DS    XL12500          Bits for 100,000 tapes ?00000-?99999
* * TAPEBIT0 EQU   X'80'            First tape within a byte
* * * TAPEBIT1 EQU  X'40'           Second tape within a byte, dup.name
* * TAPEBIT2 EQU   X'20'            Third tape within a byte
* * TAPEBIT3 EQU   X'10'            Fourth tape within a byte
* * TAPEBIT4 EQU   X'08'            Fifth tape within a byte
* * TAPEBIT5 EQU   X'04'            Sixth tape within a byte
* * TAPEBIT6 EQU   X'02'            Seventh tape within a byte
* * TAPEBIT7 EQU   X'01'            Eighth tape within a byte
* TAPELEN  EQU   *-TAPEEYE        Length of TAPEBITS data record
*
         CVT   DSECT=YES,LIST=YES Communication Vector Table
*
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     Register Equates
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
R0       EQU   0                  Register equate for register 0
R1       EQU   1                  Register equate for register 1
R2       EQU   2                  Register equate for register 2
R3       EQU   3                  Register equate for register 3
R4       EQU   4                  Register equate for register 4
R5       EQU   5                  Register equate for register 5
R6       EQU   6                  Register equate for register 6
R7       EQU   7                  Register equate for register 7
R8       EQU   8                  Register equate for register 8
R9       EQU   9                  Register equate for register 9
R10      EQU   10                 Register equate for register 10
R11      EQU   11                 Register equate for register 11
R12      EQU   12                 Register equate for register 12
R13      EQU   13                 Register equate for register 13
R14      EQU   14                 Register equate for register 14
R15      EQU   15                 Register equate for register 15
         END   ,                  The end of the program
//L.SYSLMOD DD DSN=????.LOAD????,DISP=SHR,SPACE=   ,
//*          UNIT=3390,VOL=SER=------
   SETCODE AC(1)
   NAME TAPERSET
