//SOMITCWT JOB (????????,????,1439,9999,9999),TAPENEW-SOMITCW,
//             CLASS=?,MSGCLASS=?,
//             NOTIFY=SOMITCW,COND=(0,NE)
//HLASMCL  EXEC HLASMCL,PARM.C=(RENT,OBJECT,NODECK,TERM),
//             PARM.L=RENT
//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB
//         DD  DISP=SHR,DSN=????.SORC????
PASS TITLE 'TAPENEW - - - Creates a new tape bit pattern scratch file'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     This program reads a PARM and writes one record
*  to disk that is a bit pattern of the tapes in use
*  and scratch tapes.  Program TAPESAVE can be used to
*  switch from a different range of vol sers to this
*  range but will not switch from a range to itself.
*  The record has a 24 byte header and 12500 bytes
*  that represents 100,000 tapes.
*  ( 100,000Tapes / 8BitsPerByte = 12500Bytes )
*
*     After TAPESAVE loads a TAPEBITS record in memory,
*  IGCMSGEX picks scratch tapes by selecting "0" bits
*  and changes the bits to "1" bits to indicate that
*  a tape has been written to.
*     TAPESYNC can update the tapes in use or not in use bits.
*     TAPESYN2 can update the tapes in use or not in use bits.
*     TAPESAVE will update the record by copying the memory
*  TAPEBITS to disk every minute that there is a change.
*     TAPERSET can set the next tape group to be used and a
*  high-water-mark ( soft limit ) for pool size.
*
*     Change log:
*
* 2006-10-03  Changed TAPEHIGH to start at zero instead of 124.
*   W.A.M.    TAPEHIGH is the tape number high-water-mark and
*             soft-limit for the tape pool.
*
*     Sample JCL:
*
* //JOB JOB JOB,JOB JOB
* //TAPENEW EXEC PGM=TAPENEW,PARM=C  for volsers C00000 through C99999
* //TAPEDATA DD  DISP=(,CATLG,DELETE),DSN=SYS1.TAPES.C00000.C99999,
* //             SPACE=(TRK,1),VOL=REF=SYS1.PARMLIB
* //* will be DSORG=PS, RECFM=F, LRECL=12524, and BLKSIZE=12524
*
*     Blame: somitcw@comcast.net
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DSECTs Follow
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
SAVEAREA DSECT ,
         DS    9D                 Register save area
*
CLEARSIZ EQU   *-SAVEAREA
*
OPENLIST DS    F                  OPEN/CLOSE parameter list
*
         DS    0D                 Align the following DCB
TAPEDATA DS    XL(DCBLEN)         TAPEDATA DCB
*
TAPEBITS DS    0D                 Record to write to disk
         COPY  TAPEBITS           Copy TAPEBITS DSECT
* TAPEEYE  DS    D                DSECT eye-catcher CL7'TAPEBIT',XL1'1'
* TAPEOLD  DS    A                Addr of old TAPEBITS record to delete
* TAPESKIP DS    CL6              IEC512I tape vol ser to ignore
* TAPEDISP DS    XL2              Last TAPES byte that had a free bit
* TAPEHIGH DS    XL2              High-water-mark aka soft pool limit
* TAPEUPD  DS    XL1              Tape bits updated, need writing
* TAPECHAR DS    CL1              First byte of tapes described next
* TAPES    DS    XL12500          Bits for 100,000 tapes ?00000-?99999
* TAPEBIT0 EQU   X'80'            First tape within a byte
* TAPEBIT1 EQU   X'40'            Second tape within a byte
* TAPEBIT2 EQU   X'20'            Third tape within a byte
* TAPEBIT3 EQU   X'10'            Fourth tape within a byte
* TAPEBIT4 EQU   X'08'            Fifth tape within a byte
* TAPEBIT5 EQU   X'04'            Sixth tape within a byte
* TAPEBIT6 EQU   X'02'            Seventh tape within a byte
* TAPEBIT7 EQU   X'01'            Eighth tape within a byte
* TAPELEN  EQU   *-TAPEEYE        Length of TAPEBITS data record
*
SAVELEN  EQU   *-SAVEAREA    Length of SAVEAREA
*
*
TAPENEW  CSECT ,
TAPENEW  AMODE 24                 Addressing mode of 24 for GET MACRO
TAPENEW  RMODE 24                 Residency mode of 24 because of AMODE
         USING *,R15              Set temporary base register
         SAVE  (14,12),,'TAPENEW.&SYSDATE..&SYSTIME' Save Registers
         DROP  R15                Drop the temporary base register
         LR    R12,R15            Load the program's base register
         USING TAPENEW,R12        Give the assembler the new base
         ICM   R2,B'1111',0(R1)   Load the PARM address
         BZ    NOPARM             If no PARM address, go abend
         CLI   1(R2),X'1'         See if PARM is exactly one byte
         BNE   BADPARM            PARM more or less than 1 byte, abend
         IC    R2,2(,R2)          Load PARM data byte
         L     R0,FSAVELEN        Load work area size for GETMAIN
         GETMAIN RU,LV=(0)         Get storage for work space
         XC    0(CLEARSIZ,R1),0(R1)  Clear SAVEAREA in DSECT
         ST    R1,8(,R13)         Connect old and new save areas
         ST    R13,4(,R1)         Connect old and new save areas
         LR    R13,R1             Connect old and new save areas
         USING SAVEAREA,R13
*    Build the output record
         XC    TAPEEYE(TAPES-TAPEEYE),TAPEEYE  Clear TAPEBITS header
         MVC   TAPEEYE,CTAPEBIT   Move in TAPEBITS eye catcher
         STC   R2,TAPECHAR        1st byte of tape volume serial number
* Gone   MVI   TAPEHIGH+1,1000/8-1  Set soft top tape number
* When TAPEHIGH is reached, TAPEDISP is set back to zero
         LA    R2,TAPES           Load address of the bit pattern
         L     R3,FTAPELEN        Load the length of tape bit pattern
         SLR   R4,R4              Clear MVCL input location
         LA    R5,X'00'           Load the MVCL pad character
* X'00' indicates eight scratch tapes.
* Tapes start as scratch tapes.
* X'FF' would indicate all eight tapes are in use.
         SLL   R5,24              Place pad char. and clear length
         MVCL  R2,R4              Fill the bit pattern with X'00'
         MVC   TAPEDATA,DUMDCB    Copy DCB template
*    Open TAPEDATA DCB
         MVI   OPENLIST,X'80'     Set OPEN/CLOSE parm to open one DCB
         OPEN  (TAPEDATA,OUTPUT),MF=(E,OPENLIST)  Open TAPEDATA DCB
         PUT   TAPEDATA,TAPEBITS  Write the record
*
EOJ      DS    0H
         MVI   OPENLIST,X'80'     Set only one DCB to CLOSE
         CLOSE TAPEDATA,MF=(E,OPENLIST) Close a TAPEDATA DCB
         L     R0,FSAVELEN        Load work area size for FREEMAIN
         LR    R1,R13             Save work area location for FREEMAIN
         L     R13,4(,R13)        Restore caller's save area address
         FREEMAIN RU,LV=(0),A=(1)  Free work area's storage
         RETURN (14,12),RC=(15)   Return to caller with FREEMAIN retcde
*
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Error routines
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
NOPARM   DS    0H
BADPARM  DS    0H
         WTO   'TAPENEW requires a one byte tape volume prefix PARM',  C
               ROUTCDE=11
         ABEND 1234,DUMP          Abend with a dump
*
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Constants and model control blocks
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
* The X'1' is the DSECT version number
CTAPEBIT DC    CL7'TAPEBIT',XL1'1' Constant to init and check TAPEBIT
*
FTAPELEN DC    A(L'TAPES)         Length of TAPE bit pattern
FSAVELEN DC    A(SAVELEN)         Length of SAVEAREA DSECT in memory
*
*
DUMDCB   DCB   DDNAME=TAPEDATA,   DDNAME of TAPEDATA                   C
               DSORG=PS,          Data Set Organization                C
               MACRF=PM,          MACRO reference                      C
               BUFNO=1,           Only one buffer needed for the recordC
               RECFM=F,           Fixed, unblocked record              C
               LRECL=TAPELEN      Record is 12524 bytes
DCBLEN   EQU   *-DUMDCB           Length of the DCB
*
         LTORG ,                  In case someone adds literals
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     REGISTER EQUATES
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
R0       EQU   0                  Register equate for register 0
R1       EQU   1                  Register equate for register 1
R2       EQU   2                  Register equate for register 2
R3       EQU   3                  Register equate for register 3
R4       EQU   4                  Register equate for register 4
R5       EQU   5                  Register equate for register 5
R6       EQU   6                  Register equate for register 6
R7       EQU   7                  Register equate for register 7
R8       EQU   8                  Register equate for register 8
R9       EQU   9                  Register equate for register 9
R10      EQU   10                 Register equate for register 10
R11      EQU   11                 Register equate for register 11
R12      EQU   12                 Register equate for register 12
R13      EQU   13                 Register equate for register 13
R14      EQU   14                 Register equate for register 14
R15      EQU   15                 Register equate for register 15
         END   ,                  The end of the program
//L.SYSLMOD DD DSN=????.LOAD????,DISP=SHR,SPACE=   ,
//*          UNIT=3390,VOL=SER=------
   NAME TAPENEW
