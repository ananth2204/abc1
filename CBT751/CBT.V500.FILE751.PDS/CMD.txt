//SOMITCWC JOB (????????,????,1439,9999),CMD-SOMITCW,
//             CLASS=?,MSGCLASS=?,
//             NOTIFY=SOMITCW,COND=(0,NE)
//*
//* Run this JOB to install program CMD
//*
//HLASMCL EXEC HLASMCL,PARM.C=(RENT,OBJECT,NODECK,TERM),
//             PARM.L='RENT,AC=1'
//SYSLIB   DD
//         DD  DISP=SHR,DSN=SYS1.AMODGEN or SYS1.MODGEN
PASS     TITLE 'CMD - - - Enter operator commands and run programs'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*    This program accepts control statements.  One control
* statement can come from a PARM and many from DDNAME CMDIN.
* Either or both PARM and DDNAME CMDIN can be used.
* If neither are used, CMD will bomb because of no input.
*
*    There is a quarter of a second delay between processing
* control statements.
*
*    Bug: If there is a CMDIN DD statement, CMD cannot
* call itself to call itself to call itself to execute a
* command or program.  Several levels of CMD cannot
* or should not open the same CMDIN DD statement at the
* same time.  If this is changed, should the highest
* level CMD be the one that opens CMDIN DD statement?
* There could be several lower and lowest levels.
*
*    Control card image information:
*
*    If column 72 is not blank, it indicates a continued
* statement.  Maximum of three card images per statement.
* Column 1 through 71 are used on each card image.
*
*    There are three types of control statements allowed:
*
* 1. An asterick in column one normally indicates a comment.
*    A value in column 72 will NOT continue a comment.
*    An asterick in column 1 card image after a non-comment
*    card image that is continued causes the column 1 asterick
*    card image to be processed as a continuation of the
*    previous card image, not as a comment.
*
* 2. A tick mark in column one and ten indicate a program is
*    to be LINKed.  Any non-blank starting in columns 11
*    are the PARM to be passed to the program.
*    Column ten is not really checked so could be an equal-sign.
*    The idea and method of calling programs came from
*    PTW's program AUTOIPL.   I believe program AUTOIPL was
*    on the CBT tape?
*
* 3. Any statement that does start with an asterick or tick
*    mark is an operator command to be issued with SVC 34
*
*     This program must be authorized to use SVC 34 which
* restricts it to not have non-APF libraries in any STEPLIB
* or JOBLIB.
*
* Changed: 2009-11-02
*          Renamed program from COMMAND to CMD to not conflict
*          with VCCS JCL that uses DDname SYSIN for COMMAND.
*
* Written: 2008-10-05
*          Adapted for use with Turnkey MVS system.
*
* R13 = Save area and work area base register.
* R12 = Program base register.
* R11 = Maximum condition code accumulator.
* R10 = Indicate at least one valid input.  Input statement counter.
* R9  = Length of data in statement.
* R8  = Link register for routines CMD and PGM.
*
* Sample JCL:
*
* //STOP    PROC M=STOP
* //CMD     EXEC PGM=CMD,TIME=1439
* //CMDIN    DD  DISP=SHR,DSN=SYS2.SCRIPTS(&M)
*
* //CMD     EXEC PGM=CMD,PARM='DISPLAY T'          Display time
* //CMD     EXEC PGM=CMD,PARM='''DELAY   ''5'      Wait 5 seconds
* //CMD     EXEC PGM=CMD,PARM='STOP TSO'           Stop TSO
*
*    Note: DDNAME CMDIN was used instead of SYSIN to allow
* programs to be called that used DDNAME SYSIN.
*
*    Note: If an abend is needed when a LINKed program
* returns a non-zero return code, use program CONDCHEK
* instead of this program.  Or use this program to call
* CONDCHEK to call the needed program.
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
CMD      CSECT ,
         USING *,R15              Set temporary base register
         SAVE  (14,12),,'CMD.V1.R1.M0.&SYSDATE..&SYSTIME' Save Reg.s
         DROP  R15                Drop the temporary base register
         LR    R12,R15            Load the program's base register
         USING CMD,R12            Give the assembler the new base
         L     R2,0(,R1)          Save the address of the parms
         LA    R0,WORKLEN         Load work area size for GETMAIN
         GETMAIN RU,LV=(0)        Get storage for work space
         XC    0(CLEARLEN,R1),0(R1)  Clear DSECT start to binary zeroes
         ST    R1,8(,R13)         Connect old and new save areas
         ST    R13,4(,R1)         Connect old and new save areas
         LR    R13,R1             Connect old and new save areas
         SLR   R11,R11            Clear max-cond-code register
         SLR   R10,R10            Clear the commands issued indicator
         USING SAVEAREA,R13       Tell assembler register for savearea
*        XC    CMDPAD,CMDPAD      Clear SVC34 field to zeroes
         LA    R1,EPLOC           Load address of program name to LINK
         ST    R1,LINK            Store addr.of program name for LINK
         LH    R3,0(,R2)          Load the length of the PARM
         LTR   R3,R3              See if PARM length is zero
         BZ    CKCMDIN            No PARM - check CMDIN
         LR    R9,R3              Save length for CMD or PGM routine
         MVI   CMDDATA,X'40'      Space out command/program work area
         MVC   CMDDATA+1(L'CMDDATA-1),CMDDATA Blank cmd/pgm work area
         BCTR  R3,0               Drop length by 1 for EXecute of MVC
         EX    R3,MVC             Move the PARM to the command field
         CLI   CMDDATA,X'7D'      See if a tick mark for program
         BE    PARMPGM            Is program, go to go to link
         BAL   R8,DOCMD           Perform command routine
         B     CKCMDIN            Go check for CMDIN data
MVC      MVC   CMDDATA(0),2(R2)   Dummy move for above EXecute
PARMPGM  DS    0H
         BAL   R8,DOPGM           Perform program routine
*        B     CKCMDIN            Go check for CMDIN data
CKCMDIN  DS    0H
         MVC   EXTRLIST,EXTRACT   Prime the extract list in the DSECT
         LA    R1,EXTRLIST        Load address of the EXTRACT list
         LA    R2,TIOT            Load address of the TIOT hold area
         EXTRACT (R2),MF=(E,(1))  Get the TIOT address
         L     R1,TIOT            Load the address of the TIOT
         SLR   R2,R2              Clear a work register
         LA    R1,24(,R1)         Bump past the header
CKCMDIN2 DS    0H
         ICM   R2,B'0001',0(R1)   Load the length of an entry
         BZ    ENDOFJOB           End of TIOT, no CMDIN, go to EOJ
         CLC   4(8,R1),CL8CMDIN   See if DDNAME 'CMDIN' is in JCL
         BE    OPEN               If found, go OPEN it
         ALR   R1,R2              Bump to next TIOT entry
         B     CKCMDIN2           Go to check next TIOT entry
OPEN     DS    0H
         MVC   CMDIN,DCB          Prime the CMDIN DCB in the DSECT
         LA    R1,CMDIN           Load address of the CMDIN DCB
         ST    R1,OPENLIST        Store address of DCB in OPENLIST
         OI    OPENLIST,X'80'     Indicate end of list
         LA    R1,OPENLIST        Load address of OPEN/CLOSE parmeters
         OPEN  MF=(E,(1))         OPEN the input control card file
         TM    CMDIN+48,X'10'     OPEN okay ?
         BZ    OPENERR            If OPEN failed, go to ABEND
NEXTREC  DS    0H
         STIMER WAIT,BINTVL=QUARSEC  Wait for 1/4 second
         MVI   CMDDATA,X'40'      Space out command/program work area
         MVC   CMDDATA+1(L'CMDDATA-1),CMDDATA Blank cmd/pgm work area
         GET   CMDIN,CMDDATA      Get an input record
         CLI   CMDDATA,C'*'       See if a comment
         BE    NEXTREC            Is a comment, throw away after delay
         MVC   CMDDATA+72(8),SPACES  Clear statement sequence numbers
         CLI   CMDDATA+71,X'40'   See if statement is continued
         BE    GOTDATA            Statement not continued, go process
         GET   CMDIN,CMDDATA+71   Get a second input record
         MVC   CMDDATA+143(8),SPACES  Clear statement sequence numbers
         CLI   CMDDATA+142,X'40'  See if statement is continued again
         BE    GOTDATA            Statement not continued, go process
         GET   CMDIN,CMDDATA+142  Get a third input record
         MVC   CMDDATA+214(8),SPACES  Clear statement sequence numbers
*  Maximum of three card images to build a statement.
*  Since program PARMs should be limited to 100 bytes and
*  console commands should be limited to 126 bytes,
*  so allowing 213 bytes input data may be excessive.
GOTDATA  DS    0H
         MVCIN MVCIN,CMDDATA+L'CMDDATA-1  Reverse data to find length
         TRT   MVCIN(L'MVCIN),TABLE  Find last non-blank
         BZ    NEXTREC            No data, go ignore statement
         LA    R2,MVCIN           Load address of the data
         SLR   R1,R2              Find the length of spaces
         LA    R9,L'MVCIN         Load length of the data field
         SLR   R9,R1              Find the length of data
         CLI   CMDDATA,X'7D'      See if a tickmark to indicate program
         BE    PROGRAM            Is program, go link to it
         BAL   R8,DOCMD           Is command, perform it
         B     NEXTREC            Go get next input statement
PROGRAM  DS    0H
         BAL   R8,DOPGM           Perform routine to link program
         B     NEXTREC            Go get next input statement
DOCMD    DS    0H
         LA    R9,4(,R9)          Adjust length for word before command
         STH   R9,CMDLEN          Store full length for SVC 34
         MODESET MODE=SUP,KEY=ZERO  Switch to supervisor mode
         SLR   R0,R0              Set console number to zero
         LA    R1,CMDLEN          Load address of command buffer
         CLI   CMDDATA,C'Q'       See if QUIESCE command
         BNE   SVC34              Not QUIESCE, use hardcpy for console
         LA    R0,3               Set console 0009 as console
* This code should check what is the current master console
* and not assume that console number three is it
SVC34    DS    0H
         SVC   34                 Issue the operator command SVC
         LA    R10,1(,R10)        Indicate that commands were issued
         CLR   R15,R11            See if new high-cond-code
         BH    NEWHICC            New high-cond-code, go update R11
NZERO    DS    0H
         MODESET MODE=PROB,KEY=NZERO  Switch back to problem state
         BR    R8                 Return to main-line program
NEWHICC  DS    0H
         LR    R11,R15            Save new max-cond-code
         B     NZERO              Go to problem state, get next record
DOPGM    DS    0H
         MVC   EPLOC,CMDDATA+1    Copy program name for LINK
         SH    R9,H10             Adjust length for program PARM length
         STH   R9,CMDDATA+8       Store PARM length for program parm
         LA    R9,CMDDATA+8       Load address of PARM for program
         ST    R9,PARMPTR         Store address in PARM address list
         OI    PARMPTR,X'80'      Mark first address in list as last
         LA    R1,PARMPTR         Load address of PARM pointer for LINK
         LA    R15,LINK           Load address of LINK parameter list
         SVC   6                  LINK requested program
         LA    R10,1(,R10)        Indicate program attempted or did run
         CLR   R15,R11            See if new high-cond-code
         BNHR  R8                 Not high, return to main-line program
         LR    R11,R15            Save new max-cond-code
         BR    R8                 Return to main-line program
ENDFILE  DS    0H
         LA    R1,OPENLIST        Load address of OPEN/CLOSE parameters
         CLOSE MF=(E,(1))         Close the input control card file
ENDOFJOB DS    0H
         LTR   R10,R10            See if there were no commands issued
         BZ    NOCOMMND           If no commands, go abend
         LA    R0,WORKLEN         Load work area size for FREEMAIN
         LR    R1,R13             Save work area location for FREEMAIN
         L     R13,4(,R13)        Restore the caller's save area addr.
         FREEMAIN RU,LV=(0),A=(1) Free work area's storage
         LR    R15,R11            Restore MGCR's highest return code
         RETURN (14,12),RC=(15)   Return to caller with MGCR ret-code
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     Error ABEND routines
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
OPENERR  DS    0H
         WTO   'CMD - OPEN for DD CMDIN failed.  How?',ROUTCDE=(1,11)
         ABEND 1211,DUMP          Abend, with a dump
NOCOMMND DS    0H
         WTO   'CMD - Must have a PARM or DD CMDIN',ROUTCDE=(1,11)
         WTO   'CMD - Program abending',ROUTCDE=(1,11)
         ABEND 1212,DUMP          Abend, with dump
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     Constants and literals
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
*                  H H M M S S T H
H10      DC    H'10'              Length of program name and tick marks
QUARSEC  DC    F'25'              Wait time of 1/4 second for STIMER
CL8CMDIN DC    CL8'CMDIN '        Constant for compare
SPACES   DC    CL8' '             Constant of spaces to clear seq.no.
EXTRACT  EXTRACT *-*,'S',FIELDS=TIOT,MF=L  Dummy EXTRACT macro
EXTRLEN  EQU   *-EXTRACT          Length of EXTRACT list
DCB      DCB   DDNAME=CMDIN,DSORG=PS,MACRF=GM,EODAD=ENDFILE,LRECL=80,  C
               RECFM=FB
DCBLEN   EQU   *-DCB              Length of CMDIN's DCB
TABLE    DC    64AL1(1),AL1(0),191AL1(1)  Table for finding non-space
*
         LTORG ,                  In case someone uses literals
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DSECTs and Register EQUates
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
SAVEAREA DSECT ,
         DS    9D                 Register save area
LINK     DS    D                  Will be the executed LINK MACRO
* LINK first word is pointer to EPLOC, secord word is zero LINK DCB
*
TIOT     DS    A(*-*)             Address of the Task I/O Table
PARMPTR  DS    A(*-*)             PARM address list for LINKed program
EPLOC    DS    CL8                Will be name of program for LINK
OPENLIST DS    A(*-*),A           OPEN/CLOSE parameter list
EXTRLIST DS    XL(EXTRLEN)        Will be the real EXTRACT list
         DS    0D                 Insure DCB alignment
CMDIN    DS    XL(DCBLEN)         Will be the real DCB list
* * * * * * * * * * * The following 5 lines must stay together
         DS    0D                 Align pgm PARM to half before full
         DS    H                  Align pgm.PARM.len. to half ere full
CMDLEN   DS    H                  Length of the command to be executed
CMDPAD   DS    H                  Pad, always binary zeroes
CLEARLEN EQU   *-SAVEAREA         Size of data to clear
CMDDATA  DS    CL256              Command to execute from PARM or GET
* * * * * * * * * * * The preceeding 5 lines must stay together
MVCIN    DS    CL256              Data reversed to find last non-space
*
WORKLEN  EQU   *-SAVEAREA         Work area length to GETMAIN/FREEMAIN
         EJECT
*
R0       EQU   0                  Register equate for register 0
R1       EQU   1                  Register equate for register 1
R2       EQU   2                  Register equate for register 2
R3       EQU   3                  Register equate for register 3
R4       EQU   4                  Register equate for register 4
R5       EQU   5                  Register equate for register 5
R6       EQU   6                  Register equate for register 6
R7       EQU   7                  Register equate for register 7
R8       EQU   8                  Register equate for register 8
R9       EQU   9                  Register equate for register 9
R10      EQU   10                 Register equate for register 10
R11      EQU   11                 Register equate for register 11
R12      EQU   12                 Register equate for register 12
R13      EQU   13                 Register equate for register 13
R14      EQU   14                 Register equate for register 14
R15      EQU   15                 Register equate for register 15
         END   ,                  The end of the program
//L.SYSLMOD DD DISP=SHR,DSN=????.LOAD????,SPACE=
 NAME CMD
//*
//CHECKCC EXEC PGM=IEFBR14
//
