//SOMITCWT JOB (????????,????,1439,9999,9999),TAPEBLP-SOMITCW,
//             CLASS=?,MSGCLASS=?,
//             NOTIFY=SOMITCW,COND=(0,NE)
//HLASMCL  EXEC HLASMCL,PARM.C=(NORENT,OBJECT,NODECK,TERM),
//             PARM.L=NORENT
//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB
//         DD  DISP=SHR,DSN=SYS1.MODGEN
PASS TITLE 'TAPEBLP - - - Extracts tape label info for TAPE System'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*    This tape reads control cards to determine which tapes to load
*  data for.  Tapes requested have the the first three records read
*  from each tape, which should be the VOL1, HDR1, and HDR2 labels.
*  Data from the tape labels is added to the TAPES VOLUMES and
*  DATASETS data sets.
*
*    One record is created for each tape and written to both data sets.
*
*     Sample JCL:
*
* //xxxxxxxT JOB (xxxxxxxx,xxxx,1439,9999,9999),TAPEBLPJ-xxxxxxxx,
* //         CLASS=x,MSGCLASS=x,
* //         NOTIFY=SOMITCW,COND=(0,NE)
* //TAPEBLP EXEC PGM=TAPEBLP
* //STEPLIB  DD  DSN=????.LOAD????,DISP=SHR
* TAPE01
* TAPE03-TAPE08
* TAPE12
* TAPE37-TAPE44
* TAPE86
* //INPUT    DD  UNIT=(TAPE,,DEFER)
* //VOLUMES  DD  DSN=ACCUMULATED.TAPE.VOLUMES,DISP=MOD,
* //             RECFM=FB,LRECL=171,BLKSIZE=0
* //DATASETS DD  DSN=ACCUMULATED.TAPE.DATASETS,DISP=MOD,
* //             RECFM=FB,LRECL=171,BLKSIZE=0
* //SYSUDUMP DD  SYSOUT=*
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
TAPEBLP  CSECT ,
TAPEBLP  AMODE 24                 Addressing mode of 24 for GET MACRO
TAPEBLP  RMODE 24                 Residency mode of 24 because of AMODE
         USING *,R15              Set temporary base register
         SAVE  (14,12),,'TAPEBLP.&SYSDATE..&SYSTIME'  Save Registers
         DROP  R15                Drop the temporary base register
         LR    R12,R15            Load the program's base register
         USING TAPEBLP,R12        Give the assembler the new base
         LA    R0,WORKSIZE        Load work area size for GETMAIN
         GETMAIN R,LV=(0)         Get storage for work space
         XC    0(CLEARSIZ,R1),0(R1)  Clear SAVEAREA in DSECT
         ST    R1,8(,R13)         Connect old and new save areas
         ST    R13,4(,R1)         Connect old and new save areas
         LR    R13,R1             Connect old and new save areas
         USING SAVEAREA,R13
* OPEN
         USING INFMJFCB,JFCB      Tell assembler of JFCB address
         LA    R1,EXLST           Load address of the DCB exit list
         STCM  R1,B'0111',INPUT+DCBEXLSA-IHADCB  Put EXLST addr. in DCB
         LA    R1,JFCB            Load addr.for JOB File Control Block
         ST    R1,EXLST           Store addr.for JOB File Control Block
         MVI   EXLST,X'87'        Indicate last exit and JFCB
         RDJFCB INPUT             Prime the JFCB
         MVI   JFCBLTYP,JFCBLP    Indicate Label=(,BLP) ( APF Auth )
         MVI   JFCBNVOL,X'1'      Indicate one volume serial
         OI    JFCBFLG3,JFCDQDSP  Dequeue volume serial no. on dismount
L        EQU   L'MOUNTDSN         Length of first of data set name
         MVC   JFCBDSNM(L),MOUNTDSN  Put data set name in JFCB
         MVI   JFCBDSNM+L+6,X'40' Clear rest of DSNAME area
         MVC   JFCBDSNM+L+7(44-L+7),JFCBDSNM+L+6  Clear rest of DSNAME
         OPEN  (SYSIN,INPUT)      Open the input control cards
         TM    SYSIN+DCBOFLGS-IHADCB,DCBOFOPN  See if SYSIN opened
         BZ    ABEND1A            If OPEN failed, go abend
         OPEN  (VOLUMES,EXTEND)   Open first output FB data file
         OPEN  (DATASETS,EXTEND)  Open last output FB data file
GETSYSIN DS    0H
         GET   SYSIN,VOLSERS      Get volume record
         MVC   ABEND3M+16(13),VOLSERS  Save input volumes for error msg
         CLI   VOLSERS+6,C'-'     See if a hyphen
         BNE   READVOL            Not minus sign, only 1 volume serial
         CLC   VOLSERS(6),VOLSERS+7  See if low volume serial first
         BH    ABEND1B            First volume higher, go abend
READVOL  DS    0H
         MVC   JFCBVOLS(6),VOLSERS  Store volser to read
         MVC   JFCBDSNM+L(6),VOLSERS  Store volser to read in DSNAME
         OI    JFCBTSDM,JFCVSL    Indicate Volume serial list changed
* Clear input data area to spaces
         MVI   INRECS,X'40'       Clear the input data area
         MVC   INRECS+1(L'INRECS-1),INRECS  Clear the input data area
* Clear output record area to spaces
         MVI   RECORD,X'40'       Clear the output record area
         MVC   RECORD+1(L'RECORD-1),RECORD Clear the output record area
         OPEN  (INPUT,INPUT),TYPE=J  Open the input tape label
         GET   INPUT,IN1          Get first tape label record
         GET   INPUT,IN2          Get second tape label record
* If 76 zeroes on HDR1 label, tape was never used
         CLC   IN2+4(75),IN2+5    See if new tape
         BNE   CHKASCII           Not new tape, go check for ASCII tape
         MVC   CL@DATE+1(10),NEVRUSED  Put 'Never Used' as Create Date
         B     NOHDR2             New tape, skip reading HDR2
CHKASCII DS    0H
         CLI   INRECS,X'56'       See if an ASCII VOL1 header
         BE    ASCII              ASCII tape, skip reading HDR2
         GET   INPUT,IN3          Get third tape label record
* If DOS/VS or DOS/VSE tape, GET INPUT,IN3 will fall to EODAD=NOHDR2
NOHDR2   DS    0H
         CLI   INRECS,C'V'        See if an EBCDIC VOL1 header
         BE    EBCDIC             A good tape label, go process
         B     ABEND2             Not standard label, go abend
ASCII    DS    0H
         MVC   ASCIIWTO+16(6),VOLSERS
ASCIIWTO WTO   'TAPEBLP xxxxxx is an ASCII tape, it will be processed',X
               ROUTCDE=11
         XLATE INRECS+1,159,TO=E  Translate label from ASCII to EBCDIC
         MVC   CL@DATE+1(10),ASCTAPE  Set DATE to 'ASCII Tape'
*        CLI   IN3,X'40'          See if ASCII data HDR2 was read
*        BE    EBCDIC             Still EBCDIC space, skip XLATE
*        XLATE IN3,80,TO=E        Translate label from ASCII to EBCDIC
EBCDIC   DS    0H
         CLOSE (INPUT,DISP)       Close and unload the input tape label
* VOLSER
         CLC   INVOL,VOLSERS      See if volume mounted was one called
         BE    MOVEVOL            Mounted volume matches, go process
         MVC   VOLWTO+21(6),VOLSERS  Display volume serial requested
         MVC   VOLWTO+44(6),INVOL    Display volume serial mounted
         MVC   VOLWTO2+21(6),INVOL   Display volume serial mounted
VOLWTO   WTO   'TAPEBLP Tape xxxxxx called for, but yyyyyy mounted',   +
               ROUTCDE=(1,11)
VOLWTO2  WTO   'TAPEBLP Tape yyyyyy will be processed',ROUTCDE=(1,11)
         MVC   CL@MM(6),VOLSERS   Set close-time as requested vol ser
         MVC   CL@TH(3),EXTERNAL  Set close-time as requested vol ser
MOVEVOL  DS    0H
         MVC   VOLSER,INVOL       Move volume serial no. to output rec.
* Tape create date as close date
         CLI   INRECS,X'56'       See if an ASCII VOL1 header
         BE    NOCREDT            Is ASCII, don't do ASCII date
         CLC   INCRDATE+1(5),ZEROES  See if creation date ( new tape? )
         BE    NOCREDT            No CREDT, leave output field blanks
*                                 blank=19xx, 1=20xx, 2=21xx, etc.
         CLI   INCRDATE,X'40'     See if years 1900 through 1999
         BNE   MOVECR20           Not 19xx, go start year with 20
         MVC   CL@DATE+1(2),C19   Move '19' for 1990 through 1999
         B     MOVECRYR           Go finish the create/close date
MOVECR20 DS    0H
         MVC   CL@DATE+1(2),C20   Move '20' for 2000 through 2099
MOVECRYR DS    0H
         MVC   CL@DATE+3(2),INCRDATE+1 Move create year last two digits
         MVI   CL@DATE+5,C'.'     Move create year last two digits
         MVC   CL@DATE+6(3),INCRDATE+3  Move create day to close day
NOCREDT  DS    0H
* Tape create time
*
*  tape create time is not available and will be left blank
*
* File sequence number ( LABEL=(???,SL)
         MVI   FILESEQN+5,C'1'    Move file sequence number output
* Indicator is always 'O' for Output/created data set, i.e. not read
         MVI   CODE+1,C'O'        Put output/create indicator in record
* Expiration date
         CLI   INRECS,X'56'       See if an ASCII VOL1 header
         BE    PROCDSN            Is ASCII, don't do ASCII date
         CLC   INEXDATE+1(5),ZEROES  See if any expiration date
         BNE   ISEXPDT            Is EXPDT, go convert it
         CLI   CL@DATE,X'F0'      See if a Close/Create date
         BL    PROCDSN            No Create or expire date, don't move
         MVC   EX@YEAR(9),CL@DATE No expire date, use create date
         B     PROCDSN            Skip format of EXPDT
ISEXPDT  DS    0H
*                                 blank=19xx, 1=20xx, 2=21xx, etc.
         CLI   INEXDATE,X'40'     See if years 1900 through 1999 a
         BNE   MOVEEX20           Not 19xx, go start year with 20
         MVC   EX@YEAR+1(2),C19   Move '19' for 1990 through 1999
         B     MOVEEXYR           Return to format remainder of EX@DATE
MOVEEX20 DS    0H
         MVC   EX@YEAR+1(2),C20   Move '20' for 2000 through 2099
MOVEEXYR DS    0H
         MVC   EX@YEAR+3(2),INEXDATE+1 Move expire year last two digits
         MVI   EX@YEAR+5,C'.'     Move expire year last two digits
         MVC   EX@YEAR+6(3),INEXDATE+3  Move expire day
* Data set name
PROCDSN  DS    0H
         MVC   DSNAME(17),INDSN   Move DDNAME to output record
* Volume Sequence Number
         CLI   INVOLSEQ+3,X'40'   See if a Volume Sequence Number
         BNH   NOVOLSEQ           No number, skip move
         PACK  DWORK(3),INVOLSEQ  Pack the Volume Sequence Number
         MVC   VOLSEQN,MASK4      Move EDit mask to output Vol.Seq.No.
         ED    VOLSEQN,DWORK+1    Move Volume Sequence Number
NOVOLSEQ DS    0H
* Block count written on tape
*
*  tape block count is not available and will be left blank
*  ( I'm not going to spin down a tape just to get a block count )
*
* See if a HDR2
         CLI   IN3,C'H'           See if a header 2 record read
         BNE   PUTS               No HDR2, skip DCB/JOB/STEP processing
* Record Format
         MVC   RECFM+1(1),INRECFM1  Move F, V, or U to RECFM
         MVC   RECFM+4(1),INRECFM2  Move Carraige Control A, M, or ' '
         CLI   INRECFM3,C'R'      See of both Blocked and Span./Stan.
         BNE   RECFMMVC           Not 'R', go do normal move
         MVI   RECFM+2,C'B'       Show RECFM as blocked
         MVI   RECFM+3,C'S'       Show RECFM as Spanned or Standard
         B     SQUISH             Go compress spaces out of RECFM
RECFMMVC DS    0H
         MVC   RECFM+2(1),INRECFM3  Move B, S, or a space
SQUISH   DS    0H
         CLI   RECFM+3,X'40'      See if RECFM third byte is a space
         BNE   SQUISH2            Not blank, go check next byte
         MVC   RECFM+3(2),RECFM+4 Remove the space
SQUISH2  DS    0H
         CLI   RECFM+2,X'40'      See if RECFM second byte is a space
         BNE   SQUISH3            Not blank, go check next byte
         MVC   RECFM+2(3),RECFM+3 Remove the space
SQUISH3  DS    0H
         CLI   RECFM+1,X'40'      See if RECFM first byte is a space
         BNE   SQUISHX            Not blank, go to end of squish
         MVC   RECFM+1(4),RECFM+2 Remove the space
SQUISHX  DS    0H
* Logical Record Length
         PACK  DWORK(3),INLRECL   Pack the Logical Record Length
         MVC   LRECL(6),MASK6     Move EDit mask to output LRECL
         ED    LRECL(6),DWORK     EDit the LRECL to output record
* Block Size
         PACK  DWORK(3),INBLKSZ   Pack the Block Size
         MVC   BLKSIZE(6),MASK6   Move EDit mask to output BLKSIZE
         ED    BLKSIZE(6),DWORK    EDit the BLKSIZE to output record
* JOB name
         MVC   JOBNAME,INJOB      Move JOB name to output record
* STEP name
         MVC   STEPNAME,INSTEP    Move STEP name to output record
*
* The end
PUTS     DS    0H
         PUT   VOLUMES,RECORD     PUT an output record
         PUT   DATASETS,RECORD    PUT an output record
* Calculate the next volume serial number
         CLI   VOLSERS+6,C'-'     See if a range of volumes specified
         BNE   GETSYSIN           No range, go read next SYSIN record
         CLC   VOLSERS(6),VOLSERS+7  See if at end of range
         BNL   GETSYSIN           At end of range, go get next SYSIN
         LA    R1,VOLSERS+6       Load addr. past last byte of volser
         LA    R2,VOLSERS         Load address of first byte of volser
CARRY    DS    0H
         BCTR  R1,0               Back up one digit to previous char.
         CR    R1,R2              See if before volume serial number
         BL    ABEND3             Backed up too far, go abend
         TM    0(R1),X'09'        See if hex 89,99,A9,B9,C9,D9,E9,or F9
         BO    ENDSIN9            Is X'?9', go (clear and carry) or add
         IC    R3,0(,R1)          Load the byte to update
         LA    R3,1(,R3)          Increment volser
         STC   R3,0(,R1)          Replace the byte that is updated
         B     READVOL            Go to process calculated vol. serial
ENDSIN9  DS    0H
         TM    0(R1),X'B9'        See if numeric ( X'F9' or X'B9' )
         BO    NUMERIC            Is numeric, go zero and carry
         TM    0(R1),X'99'        See if X'D9' or X'99' ( R or r )
         BO    NOONE              No E1 or A1, go to set to E2 or A2
         TM    0(R1),X'A9'        See if X'E9' or X'A9' ( Z or z )
         BO    Z                  Is a Z, go to set to A or a and carry
         IC    R3,0(,R1)          Load the byte to update
         LA    R3,8(,R3)          Add 16 and subtract 8
         STC   R3,0(,R1)          Replace the byte that is updated
         B     READVOL            Go to process calculated vol. serial
NOONE    DS    0H
         NI    0(R1),X'E2'        Zero bits X'19' to go from R/r to S/s
         OI    0(R1),X'A2'        Set to X'E2' or X'A2' ( S or s )
         B     READVOL            Go to process calculated vol. serial
Z        DS    0H
         NI    0(R1),X'C1'        Set from Z or z to A or a
         B     CARRY              Go add to previous character
NUMERIC  DS    0H
         NI    0(R1),X'F0'        Set digit to zero
         B     CARRY              Go add to previous character
*
* The end
EODAD    DS    0H
         CLOSE VOLUMES            Close first output date file
         CLOSE DATASETS           Close last output date file
         CLOSE SYSIN              Close control card file
         LA    R0,WORKSIZE        Load work area size for FREEMAIN
         LR    R1,R13             Save work area location for FREEMAIN
         L     R13,4(,R13)        Restore caller's save area address
         FREEMAIN R,LV=(0),A=(1)  Free work area's storage
         RETURN (14,12),RC=(15)   Return to caller with FREEMAIN retcde
*
ABEND1A  DS    0H
         WTO   'TAPEBLP SYSIN failed to OPEN.',ROUTCDE=11
         B     ABEND1BX           Go do more messages and abend
*
ABEND1B  DS    0H
         WTO   'TAPEBLP SYSIN control card is invalid.',ROUTCDE=11
         MVC   ABEND1BM+16(13),VOLSERS  Move bad data to display
ABEND1BM WTO   'TAPEBLP xxxxxx-yyyyyy is backwards.',ROUTCDE=11
ABEND1BX DS    0H
         WTO   'TAPEBLP Valid control cards are needed.',ROUTCDE=11
         WTO   'TAPEBLP Volume Serial number in 1-6 or',ROUTCDE=11
         WTO   'TAPEBLP range in 1-6 and 8-13 with',ROUTCDE=11
         WTO   'TAPEBLP a dash between.',ROUTCDE=11
         WTO   'TAPEBLP Program abending without a dump.',ROUTCDE=11
         ABEND 1                  Abend without a dump
*
ABEND2   DS    0H
         WTO   'TAPEBLP Can only process labeled tapes.',ROUTCDE=11
         WTO   'TAPEBLP First record doesn''t start VOL1.',ROUTCDE=11
         WTO   'TAPEBLP Program abending with a dump.',ROUTCDE=11
         ABEND 2,DUMP             Abend with a dump
*
ABEND3   DS    0H
         WTO   'TAPEBLP Volume serial greater than 999999.',ROUTCDE=11
ABEND3M  WTO   'TAPEBLP xxxxxx-yyyyyy is invalid.',ROUTCDE=11
         WTO   'TAPEBLP Program abending with a dump.',ROUTCDE=11
         ABEND 3,DUMP             Abend with a dump
*
*
C19      DC   CL2'19'             Constant for nineteen hundreds
C20      DC   CL2'20'             Constant for years 2000 through 2099
MASK4    DC   XL4'40202120'       EDit mask for Vol.Seq.Number
MASK6    DC   XL6'402020202120'   EDit mask for LRECL and BLKSIZE
ASCTAPE  DC   CL10'ASCII Tape'    Constant for ASCII date
ZEROES   DC   CL5'00000'          Constant to compare
MOUNTDSN DC   CL11'MOUNT TAPE='   Constant to set JFCB data set name
NEVRUSED DC   CL10'Never Used'    Constant create date if tape empty
EXTERNAL DC   CL3'Ext'            Wrong volume indicator
*
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DSECTs Follow
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
SAVEAREA DSECT ,
         DS    9D                 Register save area
CLEARSIZ EQU   *-SAVEAREA
         SPACE 1
DWORK    DS    D                  CVD work area
*
INRECS   DS    0CL240             Input record area
IN1      DS    CL80               VOL1 label
IN2      DS    CL80               HDR1 label
IN3      DS    CL80               HDR2 label if any
INVOL    EQU   INRECS+004,06,C'C' Input volume serial number
* HDR1 follows
INDSN    EQU   INRECS+084,17,C'C' Input data set name
INVOLSEQ EQU   INRECS+107,04,C'C' Vol Seq. Number  ( 4 )
* IN?    EQU   INRECS+111,04,C'C' File Seq. Number ( 4 ) Always 1
INCRDATE EQU   INRECS+121,06,C'C' Input creation date
INEXDATE EQU   INRECS+127,06,C'C' Input expiration date
* Optional HDR2 follows
INRECFM1 EQU   INRECS+164,01,C'C' RECFM F, V, or U ( 1 )
INBLKSZ  EQU   INRECS+165,05,C'C' Input block size
INLRECL  EQU   INRECS+170,05,C'C' LRECL            ( 5 )
INJOB    EQU   INRECS+177,08,C'C' Input JOB name
INSTEP   EQU   INRECS+186,08,C'C' Input JOB-STEP name
INRECFM2 EQU   INRECS+196,01,C'C' A, M, or ' ' CC  ( 1 )
INRECFM3 EQU   INRECS+198,01,C'C' B, S, R, or ' '  ( 1 ) R=B+S
*
         SPACE 1
         COPY  TAPEDSCT           VOLUMES and DATASETS record layout
* RECORD   DS  0CL171
* VOLSER   DS  CL6    '??????'    Volume serial number
* CL@DATE  DS  CL9   ' YYYY.DDD'  Date that tape was closed, YYYY.DDD
* CL@HH    DS  CL3    ' HH'       Hour of day that tape was closed
* CL@MM    DS  CL3    ':MM'       Minute of hour that tape was closed
* CL@SS    DS  CL3    ':SS'       Second of minute that tape was closed
* CL@TH    DS  CL3    '.TH'       Hundredth of second tape was closed
* FILESEQN DS  CL6    ' nnnnn'    File sequence number
* CODE     DS  CL2    ' O'  ' I'  Output or Input entry indicator code
* EX@YEAR  DS  CL5    ' yyyy'     Tape expire year
* EX@PER   DS  CL1    '.'         Period, separates EX@YEAR from EX@DAY
* EX@DAY   DS  CL3    'ddd'       Tape expire day
* SCRDATE  DS  CL9    ' yyyy.ddd' Date the tape is put on Scratch list
*          DS  CL1    ' '         Space
* DSNAME   DS  CL44               Data set name
* VOLSEQN  DS  CL4    ' nnn'      Volume sequence number
* BLKCOUNT DS  CL10   ' zzzzzzzzn'  Block count on the tape
* RECFM    DS  CL5    ' FBSA'     Record format of data set
* LRECL    DS  CL7    ' zzzznK'   Logical record length of data set
* BLKSIZE  DS  CL6    ' zzzzn'    Block size of data set
*          DS  CL1    ' '         Space
* SYSTEM   DS  CL4                SMF ID for the system name
*          DS  CL1    ' '         Space
* JOBNAME  DS  CL8                JOB name
*          DS  CL1    ' '         Space
* STEPNAME DS  CL8                Step name
*          DS  CL1    ' '         Space
* PGMNAME  DS  CL8                Program name
*          DS  CL1    ' '         Space
* DDNAME   DS  CL8                DDNAME
*
VOLSERS  DS    CL80               SYSIN input area
         SPACE 1
EXLST    DS    0F,XL1,XL3         Exit List X'87',AL3(JFCB)
JFCB     DS    XL176              JOB File Control Block
         SPACE 1
WORKSIZE EQU   *-SAVEAREA
         SPACE 1
         DCBD  DSORG=PS,DEVD=DA   Map the Data Control Block
         SPACE 1
         IEFJFCBN LIST=YES        Map the JOB File Control Block
         SPACE 1
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DATA CONTROL BLOCKS FOLLOW
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
TAPEBLP  CSECT ,
SYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=GM,EODAD=EODAD,             +
               RECFM=FB,LRECL=80
INPUT    DCB   DDNAME=INPUT,DSORG=PS,MACRF=GM,EODAD=NOHDR2,            +
               RECFM=F,LRECL=80,BLKSIZE=80,EXLST=EXLST-EXLST
VOLUMES  DCB   DDNAME=VOLUMES,DSORG=PS,MACRF=PM,RECFM=FB,LRECL=171
DATASETS DCB   DDNAME=DATASETS,DSORG=PS,MACRF=PM,RECFM=FB,LRECL=171
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     REGISTER EQUATES
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
R0       EQU   0                  Register equate for register 0
R1       EQU   1                  Register equate for register 1
R2       EQU   2                  Register equate for register 2
R3       EQU   3                  Register equate for register 3
R4       EQU   4                  Register equate for register 4
R5       EQU   5                  Register equate for register 5
R6       EQU   6                  Register equate for register 6
R7       EQU   7                  Register equate for register 7
R8       EQU   8                  Register equate for register 8
R9       EQU   9                  Register equate for register 9
R10      EQU   10                 Register equate for register 10
R11      EQU   11                 Register equate for register 11
R12      EQU   12                 Register equate for register 12
R13      EQU   13                 Register equate for register 13
R14      EQU   14                 Register equate for register 14
R15      EQU   15                 Register equate for register 15
         END   ,                  The end of the program
//L.SYSLMOD DD DSN=????.LOAD????,DISP=SHR,SPACE=   ,
//*          UNIT=3390,VOL=SER=------
   SETCODE AC(1)
   NAME TAPEBLP
