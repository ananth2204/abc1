//SOMITCWT JOB (????????,????,1439,9999,9999),TAPEOLD-SOMITCW,
//             CLASS=?,MSGCLASS=?,
//             NOTIFY=SOMITCW,REGION=4M,COND=(0,NE)
//HLASMCL  EXEC HLASMCL,PARM.C=(NORENT,OBJECT,NODECK,TERM),
//             PARM.L=NORENT
//SYSLIB   DD
//         DD  DISP=SHR,DSN=SYS1.MODGEN
PASS TITLE 'TAPEOLD - - - Drops old record with same vol ser as new'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     This program reads a sorted copy of the active tapes VOLUMES
*  data set.  The VOLUMES data set contains one record for each tape
*  plus new records for tapes just written.  The volume records in
*  the VOLUMES data set are from information for the first data set
*  written on each tape.  Only the most current vol ser is kept.
*  If two volume records have the same close date and close time,
*  then the record with the highest indicator code is kept.
*  The indicator code on each record shows the status of the record,
*  record, either has or has not been scratched.
* I = Record of a tape data set read for input ( not in this data set )
* O = New output tape data set that has been written
* S = is to be scratched ( Selected ) S honored after expiration date
* X = If tape volume has appeared on a scratch list ( Scratched )
*
*     Sample JCL:
*
* //*
* //* * * * * * Start of tape management
* //*
* //* TAPESMF extracts tape information from SMF data.
* //* Tape vol sers starting TS are Tech. Support tapes.
* //* Tape vol sers starting AS are Application Support FRS tapes.
* //* Tape vol sers starting 008 and 009 are considered NVCC tapes.
* //* Tapes written on file number one are added to both data sets.
* //* All tape data sets accessed are added to the DATASETS data set.
* //* A previous entry for each vol ser should normally already be
* //* in the VOLUMES data set.
* //*
* //TAPESMF EXEC PGM=TAPESMF
* //SMFIN    DD  DSN=BACKUP.SMFDUMPD,DISP=SHR
* //* All input/output tapes
* //DATASETS DD  DISP=MOD,DSN=????.TAPES.????????.DATASETS(+0)
* //* New output tapes
* //VOLUMES  DD  DISP=MOD,DSN=????.TAPES.????????.VOLUMES
* //SYSUDUMP DD  SYSOUT=*
* //*
* //* Following sorts the VOLUMES tape file to drop old records
* //* for tapes that have been written over.
* //* After TAPEOLD runs, there will only be one record for
* //* each file on each tape in the VOLUMES data set.
* //*
* //* Data sets are kept on shared disk volume ??????, so
* //* all processing after TAPEOLD can be run on ????/????.
* //*
* //* First step 'SORT' inverts the accessed close date and time so
* //* the most current record for each tape is kept.
* //* If duplicate tape number with duplicate close date and time,
* //* the highest indicator code is kept.
* //*
* //* Second step 'TAPEOLD' drops old tape records for tapes that
* //* re-written.
* //*
* //SORTACT EXEC PGM=SORT,PARM='RC16=ABE',RD=R
* //SYSOUT   DD  SYSOUT=*
* *             VolSer   Created   Ind.-Code      EXPDT---D
*  SORT FIELDS=(1,6,CH,A,8,23,CH,D,35,1,CH,D)    ,37,8,CH,D)
* //SORTIN   DD  DISP=OLD,DSN=????.TAPES.????????.VOLUMES
* //SORTOUT  DD  DISP=(,CATLG,DELETE),DSN=????.TAPES.????????.SORT(+1),
* //             UNIT=SYSDA,SPACE=(TRK,(150,150),RLSE),
* //             DCB=$,RECFM=FB,LRECL=171
* //*
* //TAPEOLD EXEC PGM=TAPEOLD
* //SORTED   DD  DISP=SHR,DSN=????.TAPES.????????.SORT(+1) input
* //VOLUMES  DD  DISP=OLD,DSN=????.TAPES.????????.VOLUMES replaced
* //SYSUDUMP DD  SYSOUT=*
* //*
* //SORTHST EXEC PGM=SORT,PARM='RC16=ABE',RD=R
* //SYSOUT   DD  SYSOUT=*
* *     volser, close-date, close-time, File-seq-Number, indicator-code
*  SORT FIELDS=(1,35,CH,A)
* //SORTIN   DD  DISP=OLD,DSN=????.TAPES.????????.DATASETS(+0)
* //SORTOUT  DD  DISP=(,CATLG,DELETE),
* //             DSN=????.TAPES.????????.DATASETS(+1),
* //             VOL=REF=*.SORTIN,SPACE=(TRK,(150,150),RLSE),
* //             DCB=$,RECFM=FB,LRECL=171
* //*
* //* * * * * * End of NVCC tape management
* //*
*
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
TAPEOLD  CSECT ,
TAPEOLD  AMODE 24                 Addressing mode of 24 for GET MACRO
TAPEOLD  RMODE 24                 Residency mode of 24 because of AMODE
         USING *,R15              Set temporary base register
         SAVE  (14,12),,'TAPEOLD.&SYSDATE..&SYSTIME'  Save Registers
         DROP  R15                Drop the temporary base register
         LR    R12,R15            Load the program's base register
         USING TAPEOLD,R12        Give the assembler the new base
* Initialize
         LA    R0,WORKSIZE        Load work area size for GETMAIN
         GETMAIN R,LV=(0)         Get storage for work space
         XC    0(CLEARSIZ,R1),0(R1)  Clear SAVEAREA in DSECT
         ST    R1,8(,R13)         Connect old and new save areas
         ST    R13,4(,R1)         Connect old and new save areas
         LR    R13,R1             Connect old and new save areas
         USING SAVEAREA,R13
         MVI   CURRVOL,X'FF'      Insure first vol ser compare works
* OPEN
         OPEN  (SORTED,INPUT)     Open the sorted input file
         OPEN  (VOLUMES,OUTPUT)   Open the rewrite output FB data file
GET      DS    0H
         GET   SORTED             Get an sorted record( Address in R1 )
         LR    R11,R1             Put address where it is safe
         CLC   CURRVOL,0(R11)     See if a duplicate, but old vol ser
         BE    GET                Is duplicate, do not copy
         MVC   CURRVOL,0(R11)     Save the vol ser for the next compare
         PUT   VOLUMES,(R11)      PUT most current unique volume record
         B     GET                Go get the next volume input record
EODAD    DS    0H
         CLOSE VOLUMES            Close the output rewritten file
         CLOSE SORTED             Close the sorted input data file
         LA    R0,WORKSIZE        Load work area size for FREEMAIN
         LR    R1,R13             Save work area location for FREEMAIN
         L     R13,4(,R13)        Restore caller's save area address
         FREEMAIN R,LV=(0),A=(1)  Free work area's storage
         RETURN (14,12),RC=(15)   Return to caller with FREEMAIN retcde
*
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Constants
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         LTORG ,                  If any literals, put them here
*
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DATA CONTROL BLOCKS FOLLOW
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
SORTED   DCB   DDNAME=SORTED,DSORG=PS,MACRF=GL,EODAD=EODAD,RECFM=FB
VOLUMES  DCB   DDNAME=VOLUMES,DSORG=PS,MACRF=PM,RECFM=FB
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DSECTs Follow
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
SAVEAREA DSECT ,
         DS    9D                 Register save area
CLEARSIZ EQU   *-SAVEAREA
CURRVOL  DC    XL6'FFFFFFFFFFFF'  To hold current volume serial number
         SPACE 1
WORKSIZE EQU   *-SAVEAREA
         SPACE 1
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     REGISTER EQUATES
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
R0       EQU   0                  Register equate for register 0
R1       EQU   1                  Register equate for register 1
R2       EQU   2                  Register equate for register 2
R3       EQU   3                  Register equate for register 3
R4       EQU   4                  Register equate for register 4
R5       EQU   5                  Register equate for register 5
R6       EQU   6                  Register equate for register 6
R7       EQU   7                  Register equate for register 7
R8       EQU   8                  Register equate for register 8
R9       EQU   9                  Register equate for register 9
R10      EQU   10                 Register equate for register 10
R11      EQU   11                 Register equate for register 11
R12      EQU   12                 Register equate for register 12
R13      EQU   13                 Register equate for register 13
R14      EQU   14                 Register equate for register 14
R15      EQU   15                 Register equate for register 15
         END   ,                  The end of the program
//L.SYSLMOD DD DISP=SHR,DSN=????.LOAD????,SPACE=   ,
//*          UNIT=3390,VOL=SER=------
   NAME TAPEOLD(R)
