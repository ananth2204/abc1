//SOMITCWD JOB (????????,????,1439,9999),DELAY-SOMITCW,
//             CLASS=?,MSGCLASS=?,
//             NOTIFY=SOMITCW,COND=(0,NE)
//*
//HLASMCL EXEC PROC=HLASMCL,PARM.C=(RENT,OBJECT,NODECK,TERM),
//  PARM.L=(TERM,LIST,RENT,REUS,REFR)
//SYSTERM  DD  SYSOUT=*
//SYSPRINT DD  SYSOUT=*
PASS     TITLE 'DELAY - - - Set an STIMER with user specified value'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     This program accepts the PARM in batch, TSO, or Rexx format,
*  and delays the process for the requested number of seconds and
*  hundredths of a second.  If tenths or hundredths of a second
*  are needed, then PARM must contain a decimal point.
*
*     If called as a Rexx function, the actual wait time accepted
*  will be the returned data.
*
*  Tur(n)key #3 location: SYS1.SETUP.ASM(DELAY)
*
*  Original DELAY program was a batch or called program only
*  and only waited for seconds, not hundredths.
*
*  Updated 2010-04-24  To allow running as a TSO CP, REXX external
*  function, or batch program.  Also allowed hundredths of a second
*  to be specified.
*
*  //DELAY#1 EXEC PGM=DELAY,PARM=5      Wait five seconds
*  //DELAY#2 EXEC PGM=DELAY,PARM=1.2    Wait one and one-fifth seconds
*  //DELAY#3 EXEC PGM=DELAY,PARM='.01'  Minimum wait time
*  //DELAY#4 EXEC PGM=DELAY,PARM=0      Will give minimum of .01
*
*  /* Rexx */
* SAY DELAY("1.23")      /* Will wait 1.23 seconds and then SAY 1.23 */
* SAY DELAY("01.23456")  /* Will wait 1.23 seconds and then SAY 1.23 */
* CALL DELAY(".2")       /* Will wait for one-fifth of a second */
* xxxx = DELAY("3")      /* Will wait three seconds and SET xxxx = 3 */
*
*  READY
* delay 1
*  READY
*
*  Blame: somitcw@yahoo.com
*
* R13 = Register save area and work area
* R12 = Base register
* R11 = Input PARM list address
* R10 = Address of input PARM seconds
* R9  = Input PARM seconds length ( Should end up being 0 to 8 )
* R8  = Address of input PARM hundreds of seconds
* R7  = Input PARM hundreds of seconds length ( Should end up 0,1,or 2)
* R6  = Address of Rexx return data if called as a Rexx function
* R5  = Length of Rexx return data if called as a Rexx function
* R4  = Rexx Evaluation Block if called as a Rexx function
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
DELAY    CSECT ,
DELAY    AMODE ANY                Addressing mode of ANY
DELAY    RMODE ANY                Residency mode of ANY
         SAVE  (14,12),,'DELAY.&SYSDATE..&SYSTIME'    Save Reg.s
         LR    R12,R15            Load the program's base register
         USING DELAY,R12          Give the assembler the base reg.
         LR    R11,R1             Save the address of the PARM list
         LA    R0,WORKSIZE        Load work area size for GETMAIN
         GETMAIN R,LV=(0)         Get storage for work space
         XC    0(WORKSIZE,R1),0(R1)  Clear DSECT to binary zeroes
         ST    R1,8(,R13)         Connect old and new save areas
         ST    R13,4(,R1)         Connect old and new save areas
         LR    R13,R1             Connect old and new save areas
         USING WORKAREA,R13       Tell assembler of save area base reg.
         MVC   PARMDISP,ZEROES    Initialize PARM convert area
         LTR   R11,R11            See if the PARM register is zero
         BZ    PACK               No PARM, go default to .01 seconds
         ICM   R1,B'1111',0(R11)  See if first word of PARM list zero
         BZ    REXXIN             Is REXX function PARM, go process
         CLI   2(R1),X'00'        See if TSO CP
         BZ    TSOCPIN            Is TSO CP PARM format, go process
         TM    0(R11),X'80'       See if a batch program PARM
         BO    BATCHIN            Is MVS batch program PARM, go process
         B     ERRPARM            PARM format not recognized, go abend
*
* REXX function arguments format
REXXIN   DS    0H
         L     R10,16(,R11)       Load address of argument addr&length
         ICM   R9,B'1111',4(R10)  Load length of REXX argument
         BNP   PACK               Not positive=no argument, go default
         L     R10,0(,R10)        Load address of REXX argument
         B     EATZEROS           Go to cleanup and format the argument
*
* TSO CP input PARM format
TSOCPIN  DS    0H
         SLR   R2,R2              Clear work register for ICM
         ICM   R2,B'0011',2(R1)   Load the PARM displacement
         LA    R2,4(,R2)          Add length of first word of CPPL
         LR    R10,R1             Load address of TSO CP command block
         AR    R10,R2             Add displacement to calc PARM address
         LA    R10,0(,R10)        Load address of REXX argument
         SLR   R9,R9              Prepare to get PARM length
         ICM   R9,B'0011',0(R1)   Get CPPL length
         SLR   R9,R2              Get PARM data length
         B     EATZEROS           Go to cleanup and format the argument
*
* Batch input PARM format
BATCHIN  DS    0H
         LA    R10,2(,R1)         Load address of the PARM data
         SLR   R9,R9              Prepare to get PARM length
         ICM   R9,B'0011',0(R1)   Get PARM length
*        B     EATZEROS           Go to cleanup and format the argument
*
* Drop leading zeroes
EATZEROS DS    0H
         LTR   R9,R9              See if PARM length is zero
         BZ    PACK               PARM was all zeroes, go assume 0.01
         CLI   0(R10),C'0'        See if first byte is zero
         BNE   FINDDOT            Leading zeroes dropped, go find dec.
         LA    R10,1(,R10)        Move past a leading zero
         BCTR  R9,0               Drop PARM length by one
         B     EATZEROS           Go back to check for more leading 0's
*
* Find decimal point
FINDDOT  DS    0H
         LTR   R9,R9              See if PARM length is zero bytes
         BZ    PACK               PARM 0, go use default of .01 seconds
         LA    R10,0(,R10)        Clean PARM data location address
         LR    R1,R9              Get length of PARM
         BCTR  R1,0               Get length of PARM for EX instruction
         EX    R1,TRT             Find if a decimal point in PARM
         BZ    MOVWHOLE           Is whole number, skip decimal process
         BH    ENDDOT             PARM has ending decimal point
         LA    R8,1(,R1)          Load location of decimal fraction
         LA    R1,0(,R1)          Clean period location address
         SLR   R1,R10             Find length of whole number
         LR    R7,R9              Find length of decimal part of number
         SLR   R7,R1              Find length of decimal part of number
         BCTR  R7,0               Find length of decimal part of number
         LR    R9,R1              Save length of whole number
         MVC   PARMDISP+8(1),0(R8)  Move first byte of decimal to pack
         BCTR  R7,0               Drop length of fraction bytes by one
         LTR   R7,R7              See if a second byte
         BZ    MOVWHOLE           No other byte to move, go move whole
         MVC   PARMDISP+9(1),1(R8)  Move second byte of dec. to pack
         B     MOVWHOLE           No more bytes to move, go do whole no
*
TRT      TRT   0(*-*,R10),DOTTABLE  Find if decimal point in PARM
*
ENDDOT   DS    0H
         BCTR  R9,0               Drop ending period from PARM
*
MOVWHOLE DS    0H
* R10 is location of whole number part of the PARM
* R9  is length of whole number part of the PARM
         LTR   R9,R9              See if any whole number to move
         BZ    PACK               No whole number, go pack fraction
         CH    R9,H8              See if PARM whole no. over 8 bytes
         BH    PARMLONG           If over 8 bytes, go abend
         LA    R1,PARMDISP+8      Find where to move PARM to
         SLR   R1,R9              Find where to move PARM whole number
         LR    R2,R9              Load length of PARM whole number
         BCTR  R2,0               Adjust PARM whole no. length for EX
         EX    R2,MVCPARM         Copy PARM whole number for convert
         B     PACK               Go pack and CVB the PARM and wait
*
MVCPARM  MVC   0(*-*,R1),0(R10)   Dummy copy for above EXecute
*
PACK     DS    0H
         MVC   PARMCOMP,ZEROES    See if PARM is numeric
         MVZ   PARMCOMP,PARMDISP  See if PARM is numeric
         CLC   PARMCOMP,ZEROES    See if PARM is numeric
         BNE   PARMINV            PARM not numeric, go abend
         CLC   PARMDISP,TWOGIG    See if PARM greater than 21474836.47
         BH    PARMLONG           PARM too great, go abend
         PACK  PARMPACK,PARMDISP  Change display data to packed format
         OI    PARMPACK+7,X'0F'   Insure a valid and positive sign
         CVB   R1,PARMPACK        Change packed data to binary data
         LTR   R1,R1              See of time of zero requested
         BNZ   STORTIME           Not zero time, go store time
         LA    R1,1               Set default of .01 seconds
         MVI   PARMDISP+9,C'1'    Set default of .01 seconds
STORTIME DS    0H
         ST    R1,TIME            Set time for STIMER to delay
         ICM   R1,B'1111',0(R11)  See if first word of PARM list zero
         BNZ   STIMER             Not REXX function PARM, go wait
         L     R4,20(,R11)        Load REXX evaluation block address
         L     R4,0(,R4)          Load REXX evaluation block address
         CLI   7(R4),8            Insure REXX Eval.block 9 double words
         BL    STIMER ? Abend ?   Eval. block too short, skip update
         MVC   REXXRETD(8),PARMDISP  Copy whole number of seconds
         MVI   REXXRETD+8,C'.'   Put decimal point for REXX return
         MVC   REXXRETD+9(2),PARMDISP+8  Put decimal number for ret.
         LA    R6,REXXRETD        Load address of max. data to return
         LA    R5,11              Load maximum length to return
EATLEAD0 DS    0H
         CLI   0(R6),C'0'         See if a leading zero
         BNE   NOWDOT             No more leading zeroes, go handle dot
         LA    R6,1(,R6)          Bump to next REXX return data address
         BCTR  R5,0               Drop length of REXX return data by 1
         B     EATLEAD0           Go back to eat more leading zeroes
*
NOWDOT   DS    0H
         CLI   REXXRETD+10,C'0'   See if trailing zero in hundredth pos
         BNE   STORREXX           Not trailing, go store REXX ret. data
         BCTR  R5,0               Drop length of REXX return data by 1
         CLI   REXXRETD+9,C'0'    See if trailing zero in tenths pos.
         BNE   STORREXX           Not trailing, go store REXX ret. data
         BCTR  R5,0       zero    Drop length of REXX return data by 1
         BCTR  R5,0       period  Drop length of REXX return data by 1
*
STORREXX DS    0H
         ST    R5,8(,R4)          Store return data length
         BCTR  R5,0               Adjust length for following EX instr.
         EX    R5,MVCREXX         Move REXX return data to REXX eval.
*
STIMER   DS    0H
         STIMER WAIT,BINTVL=TIME  Wait for requested number of seconds
         LA    R0,WORKSIZE        Load work area size for FREEMAIN
         LR    R1,R13             Save work area location for FREEMAIN
         L     R13,4(,R1)         Restore the caller's save area addr.
         FREEMAIN R,LV=(0),A=(1)  Free work area's storage
         RETURN (14,12),RC=0      Return to caller w/retcode of zero
*
MVCREXX  MVC   16(*-*,R4),0(R6)   Move REXX output data
*
         EJECT ,
ERRPARM  DS    0H
         WTO   'DELAY - PARM not Batch, TSO-CP, or REXX, abending',    C
               ROUTCDE=(1,11)
         ABEND 1111               Abend, no dump
*
PARMLONG DS    0H
         WTO   'DELAY - Abending, PARM too long, max is 21474836.47',  C
               ROUTCDE=(1,11)
         ABEND 1112               Abend, no dump
*
PARMINV  DS    0H
         WTO   'DELAY - Abending because PARM is not numeric',         C
               ROUTCDE=(1,11)
         ABEND 1113               Abend, no dump
*
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     Constants and literals
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
H8       DC    H'8'               Constant for comparing PARM length
*
TWOGIG   DC    CL10'2147483647'   To init PARM display area
*
ZEROES   DC    CL10'0000000000'   Value to init&check PARM display area
*
         LTORG ,                  In case someone uses literals
DOTTABLE DC    0D'0',XL256'00'    TRT table to find decimal points
         ORG   DOTTABLE+C'.'      Overlay the period position
         DC    CL1'.'             Overlay the period position
         ORG   ,                  Overlay the period position
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DSECTs and register equates follow
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
WORKAREA DSECT ,
*
SAVEAREA DS    18F                Register save area
*
PARMPACK DS    D                  PARM converted to packed area
PARMDISP DS    CL10               PARM display-format area
PARMCOMP DS    CL10               Area to check PARM for being numeric
REXXRETD DS    CL11               Rexx return data work area
TIME     DS    F                  Delay in hundredths/seconds in binary
*
WORKSIZE EQU   *-SAVEAREA
*
         IKJCPPL ,                TSO Command Processor Parameter List
*
* Rexx External Functions Parm List labels from TSO/E MACRO IRXEFPL
* Old MACLIBs do not have Program Product TSO/E MACROs
* so for compatibility, labels are not used.
* LICENSED MATERIALS - PROPERTY OF IBM
* THIS MACRO IS "RESTRICTED MATERIALS OF IBM"
* 5685-025 (C) COPYRIGHT IBM CORP. 1988, 1991
* SEE COPYRIGHT INSTRUCTIONS
* Defaults to DSECT=YES for DSECT
* If DSECT=YES
* EFPL     DSECT ,
* EFPLCOM  DS A     * Reserved
* EFPLBARG DS A     * Reserved
* EFPLEARG DS A     * Reserved
* EFPLFB   DS A     * Reserved
* EFPLARG  DS A     * Pointer to Arguments Table
* EFPLEVAL DS A     * Pointer to address of EvalBlock
*
* Rexx Argument Table labels from TSO/E MACRO IRXARGTB
* Old MACLIBs do not have Program Product TSO/E MACROs and
* labels are too long for old assemblers like IFOX00,
* so for compatibility, labels are not used.
* LICENSED MATERIALS - PROPERTY OF IBM
* THIS MACRO IS "RESTRICTED MATERIALS OF IBM"
* 5685-025 (C) COPYRIGHT IBM CORP. 1988, 1991
* SEE COPYRIGHT INSTRUCTIONS
* Defaults to DECLARE=NO for DSECT
* If DECLARE=NO
* ARGTABLE_ENTRY DSECT ,                 REXX Argument Table Entry
*          DS  0D                        Align on doubleword boundary
* ARGTABLE_ARGSTRING_PTR    DS  A        Address of the argument string
* ARGTABLE_ARGSTRING_LENGTH DS  F        Length of the argument string
* ARGTABLE_NEXT             DS  0D       Next ARGTABLE entry
*          DS  0D                        Align on doubleword boundary
* ARGSTRING DSECT ,                      REXX Argument String
* ARGTABLE_END DC  XL8'FFFFFFFFFFFFFFFF' End of ARGTABLE marker
*
* Rexx Evaluation Block labels from TSO/E MACRO IRXEVALB
* Old MACLIBs do not have Program Product TSO/E MACROs and
* labels are too long for old assemblers like IFOX00,
* so for compatibility, labels are not used.
* LICENSED MATERIALS - PROPERTY OF IBM
* THIS MACRO IS "RESTRICTED MATERIALS OF IBM"
* 5685-025 (C) COPYRIGHT IBM CORP. 1988, 1991
* SEE COPYRIGHT INSTRUCTIONS
* Defaults to DECLARE=NO for DSECT
* If DECLARE=NO
* EVALBLOCK DSECT ,              REXX Evaluation Block
* EVALBLOCK_EVPAD1 DS  F         Reserved - set to binary zero
* EVALBLOCK_EVSIZE DS  F         Size of EVALBLOCK in double words
* EVALBLOCK_EVLEN  DS  F         Length of data
* EVALBLOCK_EVPAD2 DS  F         Reserved - set to binary zero
* EVALBLOCK_EVDATA DS  C         Result
* Notes: EVALBLOCK_EVLEN is X'80000000' on input to indicate if
* a new length is stored to indicate data returned.
* EVALBLOCK_EVDATA is the first byte of the data but cannot
* exceed EVALBLOCK_EVLEN
*
R0       EQU   0                  Register equate for register 0
R1       EQU   1                  Register equate for register 1
R2       EQU   2                  Register equate for register 2
R3       EQU   3                  Register equate for register 3
R4       EQU   4                  Register equate for register 4
R5       EQU   5                  Register equate for register 5
R6       EQU   6                  Register equate for register 6
R7       EQU   7                  Register equate for register 7
R8       EQU   8                  Register equate for register 8
R9       EQU   9                  Register equate for register 9
R10      EQU   10                 Register equate for register 10
R11      EQU   11                 Register equate for register 11
R12      EQU   12                 Register equate for register 12
R13      EQU   13                 Register equate for register 13
R14      EQU   14                 Register equate for register 14
R15      EQU   15                 Register equate for register 15
         END   ,                  The end of the program
//*
//L.SYSLMOD  DD  DISP=SHR,DSN=????.LOAD????
 NAME DELAY
//*
//CHECKCC EXEC PGM=IEFBR14
//
