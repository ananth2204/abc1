//SOMITCWT JOB (????????,????,1439,9999,9999),TAPESMF-SOMITCW,
//             CLASS=?,MSGCLASS=?,
//             NOTIFY=SOMITCW,COND=(4,LT)
//HLASMCL  EXEC HLASMCL,PARM.C=(NORENT,OBJECT,NODECK,TERM),
//             PARM.L=NORENT
//SYSLIB   DD
//         DD  DISP=SHR,DSN=SYS1.MODGEN
//         DD  DISP=SHR,DSN=????.SORC????
PASS TITLE 'TAPESMF - - - Extracts tape EXPDT from SMF record type 15'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     This program reads a VBS copy of SMF records type 14 and 15
*  and extracts all tape records.  Three files are created.
*
*  DATASETS is data for all OPEN/CLOSE to all data sets on all tapes.
*  VOLUMES is data for tape volumes that first label was re-written.
*  VOLOUT is data for tape volumes were updated, i.e. to go offsite.
*  VOLOUT is obsolete.  Replaced by a perl script.
*
* There is an indicator code on each record to show the status of the
* record, either has or has not been scratched.
* I = Record of a tape data set read for input
* O = New output tape data set that has been written
* S = is to be scratched ( Selected ) S honored after expiration date
* X = If tape volume has appeared on a scratch list ( Scratched )
* S and X are obsolete.  Tape scratch is now handled with P/390
* and Flex-ES automountCCW programs TAPESTAT and TAPESYN2.
*
*     Sample JCL:
*
* //*
* //* * * * * * Start of tape management
* //*
* //* TAPESMF extracts tape information from SMF data.
* //* Tape vol sers starting ?? are ????. ??????? tapes.
* //* Tape vol sers starting ?? are ??????????? ??????? ??? tapes.
* //* Tape vol sers starting ??? and ??? are considered ???? tapes.
* //* Tapes written on file number one are added to both data sets.
* //* All tape data sets accessed are added to the DATASETS data set.
* //* A previous entry for each vol ser should normally already be
* //* in the VOLUMES data set.
* //*
* //TAPESMF EXEC PGM=TAPESMF
* //SMFIN    DD  DSN=BACKUP.SMFDUMPD,DISP=SHR
* //* All input/output tapes
* //DATASETS DD  DISP=MOD,DSN=????.TAPES.????????.DATASETS(+0)
* //* New output tapes
* //VOLUMES  DD  DISP=MOD,DSN=????.TAPES.????????.VOLUMES
* //* All output tapes
* //VOLOUT   DD  DISP=MOD,DSN=????.MIRROR.????????.VOLUMES
* //* or
* //VOLOUT   DD  DUMMY
* //SYSUDUMP DD  SYSOUT=*
* //*
* //* Following sorts the VOLUMES tape file to drop old records
* //* for tapes that have been written over.
* //* After TAPEOLD runs, there will only be one record for
* //* each file on each tape in the VOLUMES data set.
* //*
* //* Data sets are kept on shared disk volume ??????, so
* //* all processing after TAPEOLD can be run on ????/????.
* //*
* //* First step 'SORT' inverts the accessed close date and time so
* //* the most current record for each tape is kept.
* //* If duplicate tape number with duplicate close date and time,
* //* the highest indicator code is kept.
* //*
* //* Second step 'TAPEOLD' drops old tape records for tapes that
* //* re-written.
* //*
* //SORTACT EXEC PGM=SORT,PARM='RC16=ABE',RD=R
* //SYSOUT   DD  SYSOUT=*
* *             VolSer   Created   Ind.-Code      EXPDT---D
*  SORT FIELDS=(1,6,CH,A,8,23,CH,D,35,1,CH,D)    ,37,8,CH,D)
* //SORTIN   DD  DISP=OLD,DSN=????.TAPES.????????.VOLUMES
* //SORTOUT  DD  DISP=(,CATLG,DELETE),DSN=????.TAPES.????????.SORT(+1),
* //             UNIT=SYSDA,SPACE=(TRK,(150,150),RLSE),
* //             DCB=$,RECFM=FB,LRECL=171
* //*
* //TAPEOLD EXEC PGM=TAPEOLD
* //SORTED   DD  DISP=SHR,DSN=????.TAPES.????????.SORT(+1) input
* //VOLUMES  DD  DISP=OLD,DSN=????.TAPES.????????.VOLUMES replaced
* //SYSUDUMP DD  SYSOUT=*
* //*
* //SORTHST EXEC PGM=SORT,PARM='RC16=ABE',RD=R
* //SYSOUT   DD  SYSOUT=*
* *     volser, close-date, close-time, File-seq-Number, indicator-code
*  SORT FIELDS=(1,35,CH,A)
* //SORTIN   DD  DISP=OLD,DSN=????.TAPES.????????.DATASETS(+0)
* //SORTOUT  DD  DISP=(,CATLG,DELETE),
* //             DSN=????.TAPES.????????.DATASETS(+1),
* //             VOL=REF=*.SORTIN,SPACE=(TRK,(150,150),RLSE),
* //             DCB=$,RECFM=FB,LRECL=171
* //*
* //* * * * * * End of ???? tape management
* //*
*
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
TAPESMF  CSECT ,
TAPESMF  AMODE 24                 Addressing mode of 24 for GET MACRO
TAPESMF  RMODE 24                 Residency mode of 24 because of AMODE
         USING *,R15              Set temporary base register
         SAVE  (14,12),,'TAPESMF.&SYSDATE..&SYSTIME'  Save Registers
         DROP  R15                Drop the temporary base register
         LR    R12,R15            Load the program's base register
         USING TAPESMF,R12        Give the assembler the new base
         LA    R0,WORKSIZE        Load work area size for GETMAIN
         GETMAIN R,LV=(0)         Get storage for work space
         XC    0(CLEARSIZ,R1),0(R1)  Clear SAVEAREA in DSECT
         ST    R1,8(,R13)         Connect old and new save areas
         ST    R13,4(,R1)         Connect old and new save areas
         LR    R13,R1             Connect old and new save areas
         USING SAVEAREA,R13
* OPEN
         OPEN  (SMFIN,INPUT)      Open the SMF input VBS file
         OPEN  (DATASETS,EXTEND)  Open the DATASETS output FB data file
         OPEN  (VOLUMES,EXTEND)   Open the write output FB data file
         OPEN  (VOLOUT,EXTEND)    Open other write output FB data file
GET      DS    0H
         GET   SMFIN              Get an SMF record ( Address in R1 )
         LR    R11,R1             Put address where it is safe
         USING SMFRCD14,R11       Give Assembler addressibility
         USING JFCB,SMFJFCB1      Give Assembler addressibility
         CLI   SMF14RTY,14        See if type 14 record
         BL    GET                Below 14, go skip record
         CLI   SMF14RTY,15        See if type 15 record
         BH    GET                Above 15, go skip record
         TM    SMF14RIN,X'20'     See if a DASD record
         BO    GET                is DASD, go skip record, we want tape
         SLR   R1,R1              Prepare a work register
         IC    R1,JFCBNVOL        Load number of volumes
         LTR   R1,R1              See if no volumes
         BZ    GET                no volumes, go to skip the record
         MVI   RECORD,X'40'       Put space in output data record
         MVC   RECORD+1(L'RECORD-1),RECORD  Clear record to spaces
* VOLSER
         MVC   VOLSER,SMFSRTEV    Copy volume serial no. to output rec.
* Tape closed date
         ICM   R1,B'1111',SMF14DTE  Load date record written 0CYYDDDF
         ST    R1,DWORK           Save the date that tape was closed
         AP    DWORK(4),P1900000  Correct the century
         MVC   CL@DATE,DATEMASK   Copy edit mask to output record
         ED    CL@DATE,DWORK      Format date CCYYDDDF
* Tape closed time
         ICM   R3,B'1111',SMF14TME  Load time in hundredth second
         SLR   R2,R2              Clear the high order dividend
         D     R2,F100            Find hundreds of a second
         CVD   R2,DWORK           Save remainder ( hundreds of second
         OI    DWORK+7,X'0F'      Correct the sign
         UNPK  CL@TH,DWORK+6(2)   Unpack hundredth of second
         MVI   CL@TH,C'.'         Put decimal point over leading zero
         SLR   R2,R2              Clear top of dividend for divide
         D     R2,F60             Find second within the minute
         CVD   R2,DWORK           Save remainder ( seconds
         OI    DWORK+7,X'0F'      Correct the sign
         UNPK  CL@SS,DWORK+6(2)   Unpack number of second
         MVI   CL@SS,C':'         Put colon over leading zero
         SLR   R2,R2              Clear top of dividend for divide
         D     R2,F60             Find number of a minutes
         CVD   R2,DWORK           Save remainder ( minute of hour
         OI    DWORK+7,X'0F'      Correct the sign
         UNPK  CL@MM,DWORK+6(2)   Unpack minute within the hour
         MVI   CL@MM,C':'         Put colon over leading zero
         CVD   R3,DWORK           Save product ( hour in the day
         OI    DWORK+7,X'0F'      Correct the sign
         UNPK  CL@HH,DWORK+6(2)   Unpack hour in the day
         MVI   CL@HH,C' '         Put space over leading zero
* File sequence number ( LABEL=(???,SL)
         LH    R1,JFCBFLSQ        Load file sequence number
         CVD   R1,DWORK           Convert file sequence no. to decimal
         MVC   FILESEQN,MASK5     Copy mask to file seq. no. output
         ED    FILESEQN,DWORK+5   Copy file sequence no. to output
*  If new output record mark 'O', if input record mark 'I'
         MVI   CODE+1,C'O'        Put output indicator code in record
         CLI   SMF14RTY,15        See if output type SMF record
         BE    ISTYPE15           Is output, go leave the 'O' ind.code
         MVI   CODE+1,C'I'        Else, put 'input' ind.code in record
         B     ENDEXPDT           No EXPDT in SMF for tape reads
ISTYPE15 DS    0H
* Expiration date
         MVC   EX@YEAR(9),CL@DATE Assume close date for expiration date
         CLC   JFCBXPDT,ZEROES    See if any expiration date
         BE    ENDEXPDT           No EXPDT, leave close date for EXPDT
         SLR   R1,R1              Clear work register
         IC    R1,JFCBXPDT        Load expire year relative to 1900
         AH    R1,H1900           Add 1900 for absolute year
         CVD   R1,DWORK           Convert year to decimal
         OI    DWORK+7,X'0F'      Correct the sign
         UNPK  EX@YEAR,DWORK+5(3) Copy expire date year to output
         MVI   EX@YEAR,X'40'      Clear byte before the year
         MVI   EX@PER,X'4B'       Put period output data record
         LH    R1,JFCBXPDT+1      Load expire day of the year
         CVD   R1,DWORK           Convert day to decimal
         OI    DWORK+7,X'0F'      Correct the sign
         UNPK  EX@DAY,DWORK+6(2)  Unpack expire day number to output
ENDEXPDT DS    0H
* Data set name
         MVC   DSNAME,JFCBDSNM    Copy DSNAME to output record
* Volume number within data set
         SLR   R1,R1              Prepare a work register
         IC    R1,JFCBNVOL        Load no.of volumes ( also vol.no )
         CVD   R1,DWORK           Convert volume sequence no.to decimal
         MVC   VOLSEQN,MASK3      Copy mask to volume seq. no. output
         ED    VOLSEQN,DWORK+6    Copy volume sequence no. to output
* Block count written on tape
         L     R1,SMFDCBBL        Load block count of tape
         CVD   R1,DWORK           Convert block count to decimal
         MVC   BLKCOUNT,MASK9     Copy edit pattern to output record
         ED    BLKCOUNT,DWORK+3   Copy block count to output record
* RECFM
*        TM    JFCRECFM,JFCUND    See if RECFM=U    JFCB less accurate?
         TM    SMFDCBRF,JFCUND    See if RECFM=U     DCB more accurate?
         BO    RECFMU             Is RECFM=U, go store U
         TM    SMFDCBRF,JFCFIX    See if RECFM=F
         BO    RECFMF             Is RECFM=F, go store F
         TM    SMFDCBRF,JFCVAR    See if RECFM=V
         BO    RECFMV             Is RECFM=V, go store V
         TM    SMFDCBRF,JFCVARD   See if RECFM=D ( Variable ASCII )
         BZ    ENDRECFM           Don't know what, skip RECFM
RECFMD   DS    0H
         MVI   RECFM+1,C'D'       Put D in output record for RECFM
         B     BLOCKED            Go see of data is blocked
RECFMU   DS    0H
         MVI   RECFM+1,C'U'       Put U in output record for RECFM
         B     CC                 Go see of carraige control
RECFMV   DS    0H
         MVI   RECFM+1,C'V'       Put V in output record for RECFM
         B     BLOCKED            Go see of data is blocked
RECFMF   DS    0H
         MVI   RECFM+1,C'F'       Put F in output record for RECFM
*        B     BLOCKED            Go see of data is blocked
BLOCKED  DS    0H
         TM    SMFDCBRF,JFCRFB    See if RECFM=B
         BZ    SPANNED            Not blocked,go check Spanned/standard
         MVI   RECFM+2,C'B'       Put B in output record for RECFM
SPANNED  DS    0H
         TM    SMFDCBRF,JFCRFS    See if RECFM=S Spanned or Standard
         BZ    CC                 Not RECFM=S,go check Carraige Control
         MVI   RECFM+3,C'S'       Put S in output record for RECFM
CC       DS    0H
         TM    SMFDCBRF,JFCASA    See if RECFM=A ( ASA CC )
         BZ    CCM                Not RECFM=A, go check machine CC
         MVI   RECFM+4,C'A'       Put A in output record for RECFM
CCM      DS    0H
         TM    SMFDCBRF,JFCMAC    See if RECFM=M ( ASA CC )
         BZ    COMPRESS           Not RECFM=M, go compress RECFM data
         MVI   RECFM+4,C'M'       Put M in output record for RECFM
COMPRESS DS    0H
         CLI   RECFM+3,X'40'      See if third byte of RECFM is blank
         BNE   RECFM2             Is not blank, don't compress out
         MVC   RECFM+3(2),RECFM+4 Compress space out
RECFM2   DS    0H
         CLI   RECFM+2,X'40'      See if second byte of RECFM is blank
         BNE   ENDRECFM           Is not blank, don't compress out
         MVC   RECFM+2(3),RECFM+3 Compress space out
ENDRECFM DS    0H
* LRECL
         LH    R1,JFCLRECL        Logical RECord Length of data set
         CVD   R1,DWORK           Convert LRECL to decimal
         MVC   LRECL(6),MASK5     Copy edit pattern to output record
         ED    LRECL(6),DWORK+5   Copy LRECL to output record
         TM    JFCBFLG3,JFCBBFTK  See if LRECL=?????K
         BZ    ENDLRECL           LRECL bytes, not K, don't store K
         MVI   LRECL+6,C'K'       Indicate that LRECL is specified in K
ENDLRECL DS    0H
* BLKSIZE
         LH    R1,JFCBLKSI        Load block size of data set
         CVD   R1,DWORK           Convert BLKSIZE to decimal
         MVC   BLKSIZE,MASK5      Copy edit pattern to output record
         ED    BLKSIZE,DWORK+5    Copy BLKSIZE to output record
* System name
         MVC   SYSTEM,SMF14SID    Copy SMF System id to output record
* JOB name
         MVC   JOBNAME,SMF14JBN   Copy JOB name to output record
* See if Step name and Program name are available
         TM    SMF14RIN+1,SMF14XSG  See if SMF record has extended info
         BZ    NOEXINFO           No extended info, skip step&pgm names
         LH    R1,SMF14SXS        Load the length of extended info.
         BCTR  R1,0               Find length without length field
         BCTR  R1,0               Find length without length field
         SLR   R3,R3              Clear a work register
         IC    R3,SMF14SUC        Load the size of the UCB segment
         LA    R2,SMF14XIC(R3)    Load address of first extended info.
         USING SMF14XIC,R2        Tell assembler where R2 points
FINDSTEP DS    0H
         CLI   SMF14STY,SMF14STP  See if step&pgm names extention
         BE    GOTSTEP            Step&pgm extention, go process
         SH    R1,SMF14ESL        Skip to next extention
         BZ    NOEXINFO           No more extentions, no step&pgm names
         AH    R2,SMF14ESL        Skip to next extention
         B     FINDSTEP           Go check the next extention
GOTSTEP  DS    0H
         LA    R2,4(,R2)          Bump around length & segment type
         USING SMF14SPI,R2        Point to step&pgm name info address
         MVC   STEPNAME,SMF14SPN  Copy JOB or PROC STEP to output
* Program name
         MVC   PGMNAME,SMF14PGN   Copy program name to output
         DROP  R2                 Don't need addressibility anymore
NOEXINFO DS    0H
* DDNAME
         MVC   DDNAME,SMFTIOE5    Copy DDNAME to output record
* Put all records to the DATASETS file
         PUT   DATASETS,RECORD    PUT a DATASETS output record
*
* If an output record and it is either the first data set on a
* tape volume or after the first tape of a data set, also write
* to the VOLUMES file
* e.g. Tape X and Y are written.
* Tape X has 14 data sets written on it, of which the last data set
* overflows to tape Y.
* The VOLUMES data set will get a record for the first data set on
* tape X and a record for the first data set on tape Y which shows
* as data set #14.
* GOTONE   DS    0H
         CLI   CODE+1,C'O'        See if an output record
         BNE   GET                Not output, don't put to VOLUMES file
         PUT   VOLOUT,RECORD      All output volumes for offsite mirror
         CLI   JFCBNVOL,X'01'     See if NOT first tape of data set
         BH    PUTVOL             Not first, put to VOLUMES file
         CLC   JFCBFLSQ,H1        See if the first file of the tape
         BNE   GET                Not first, don't put to VOLUMES file
PUTVOL   DS    0H
         PUT   VOLUMES,RECORD     PUT label=1 output record to VOLUMES
         B     GET                Go get the next SMF input record
EODAD    DS    0H
         CLOSE DATASETS           Close the output DATASETS file
         CLOSE VOLUMES            Close the output write file
         CLOSE VOLOUT             Close the all output write file
         CLOSE SMFIN              Close the SMF input data file
         LA    R0,WORKSIZE        Load work area size for FREEMAIN
         LR    R1,R13             Save work area location for FREEMAIN
         L     R13,4(,R13)        Restore caller's save area address
         FREEMAIN R,LV=(0),A=(1)  Free work area's storage
         RETURN (14,12),RC=(15)   Return to caller with FREEMAIN retcde
*
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Constants
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         LTORG ,                  If any literals, put them here
DATEMASK DC   XL9'40212020204B202020'  Date edit mask nnnn.nnn
H1       DC   H'1'                Constant for compare
H1900    DC   H'1900'             Constant to calculate year
ZEROES   DC   F'0'                Constant to compare
F100     DC   F'100'              Divisor to convert time
F60      DC   F'60'               Divisor to convert time
P1900000 DC   PL4'1900000'        Convert century for CL@DATE
MASK3    DC   XL4'40202120'       Edit mask for 3 digit numbers
MASK5    DC   XL6'402020202120'   Edit mask for 5 digit numbers
MASK9    DC   XL10'40202020202020202120'  Edit mask for 9 digit numbers
*
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DATA CONTROL BLOCKS FOLLOW
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
SMFIN    DCB   DDNAME=SMFIN,DSORG=PS,MACRF=GL,EODAD=EODAD,RECFM=VBS,   +
               BFTEK=A   ( RECFM=VBS Locate mode system buffering )
*              BFTEK=A   Means that the system will put VBS records
*              BFTEK=A   back together before giving you its address.
* No LRECL specified to cause ABEND for attempt to read enpty data set
DATASETS DCB   DDNAME=DATASETS,DSORG=PS,MACRF=PM,RECFM=FB,LRECL=171
VOLUMES  DCB   DDNAME=VOLUMES,DSORG=PS,MACRF=PM,RECFM=FB,LRECL=171
VOLOUT   DCB   DDNAME=VOLOUT,DSORG=PS,MACRF=PM,RECFM=FB,LRECL=171
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DSECTs Follow
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
SAVEAREA DSECT ,
         DS    9D                 Register save area
CLEARSIZ EQU   *-SAVEAREA
         SPACE 1
DWORK    DS    D                  CVD work area
         SPACE 1
         COPY  TAPEDSCT           Volume record layout
* RECORD   DS    0CL171
* VOLSER   DS    CL6    '??????'
* CL@DATE  DS    CL9   ' YYYY.DDD'
* CL@HH    DS    CL3    ' HH'
* CL@MM    DS    CL3    ':MM'
* CL@SS    DS    CL3    ':SS'
* CL@TH    DS    CL3    '.TH'
* FILESEQN DS    CL6    ' nnnnn'
* CODE     DS    CL2    ' O'  ' I'
* EX@YEAR  DS    CL5    ' yyyy'
* EX@PER   DS    CL1    '.'
* EX@DAY   DS    CL3    'ddd'
* SCRDATE  DS    CL9    ' yyyy.ddd' Date the tape is put on Scratchlist
*          DS    CL1    ' '         Space
* DSNAME   DS    CL44               Data set name
* VOLSEQN  DS    CL4    ' nnn'      Volume sequence number
* BLKCOUNT DS    CL10   ' zzzzzzzzn'  Block count on the tape
* RECFM    DS    CL5    ' FBSA'     Record format of data set
* LRECL    DS    CL7    ' zzzznK'   Logical record length of data set
* BLKSIZE  DS    CL6    ' zzzzn'    Block size of data set
*          DS    CL1    ' '         Space
* SYSTEM   DS    CL4                SMF ID for the system name
*          DS    CL1    ' '         Space
* JOBNAME  DS    CL8                JOB name
*          DS    CL1    ' '         Space
* STEPNAME DS    CL8                Step name
*          DS    CL1    ' '         Space
* PGMNAME  DS    CL8                Program name
*          DS    CL1    ' '         Space
* DDNAME   DS    CL8                DDNAME
         SPACE 1
WORKSIZE EQU   *-SAVEAREA
         SPACE 1
SMFRCD14 DSECT ,
         IFASMFR 15               DSECT for SMF record type 15
         SPACE 1
JFCB     DSECT ,
         IEFJFCBN LIST=YES        JOB File Control Block in SMF record
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     REGISTER EQUATES
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
R0       EQU   0                  Register equate for register 0
R1       EQU   1                  Register equate for register 1
R2       EQU   2                  Register equate for register 2
R3       EQU   3                  Register equate for register 3
R4       EQU   4                  Register equate for register 4
R5       EQU   5                  Register equate for register 5
R6       EQU   6                  Register equate for register 6
R7       EQU   7                  Register equate for register 7
R8       EQU   8                  Register equate for register 8
R9       EQU   9                  Register equate for register 9
R10      EQU   10                 Register equate for register 10
R11      EQU   11                 Register equate for register 11
R12      EQU   12                 Register equate for register 12
R13      EQU   13                 Register equate for register 13
R14      EQU   14                 Register equate for register 14
R15      EQU   15                 Register equate for register 15
         END   ,                  The end of the program
//L.SYSLMOD DD DSN=????.LOAD????,DISP=SHR,SPACE=   ,
//*          UNIT=3390,VOL=SER=------
   NAME TAPESMF
