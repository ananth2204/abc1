//SOMITCWI JOB (xxxxxxxx,xxxx,1439,9999),'IGC0023{-SOMITCW',
//             CLASS=x,MSGCLASS=x,
//             NOTIFY=SOMITCW,
//             PERFORM=xx,COND=(0,NE)
//HLASMCL  EXEC PROC=HLASMCL,
//             PARM.C='TERM,NODECK,LIST,OBJECT,RENT,XREF(FULL)',
//             PARM.L=(LIST,REFR,REUS,RENT,XREF,NCAL)
//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB
//         DD  DISP=SHR,DSN=SYS1.MODGEN
PASS     TITLE 'IGC0023{ - - - User SVC to issue P/390 tape mount CCW '
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* Change log:
*
* 2011-12-16 Moved back one byte and expanded DDEBUCB and DEBUCB from
*  W.A.M.    three bytes to four.  Changed the STCM DEBUCB to ST.
*
* 2006-06-07 Moved all tapes back to their standard scratch areas.
*  W.A.M.    B***** tapes go to /tapeB
*            A***** tapes go to /tapeA
*            All others go to /tapeC
*
* 2006-02-25 Moved all "B" tapes except B00 to /TapeC
*  W.A.M.
*
*   Note: As coded, /tapeC/C01/C01234.aws must match the format of
* the Flex-ES tape pool and files for the mount to work correctly.
*
*   Note:  If real physical tape drives move from channel 5,
* then the CLI for UCBCHAN should change.
*
*    This SVC accepts a tape volume serial number and
* tape drive Unit Control Block pointed to by registers
* zero and one and issues a CCW command code 4B to the
* tape device with mount information ( tape file specs ).
*
*   Register zero will point to the volume serial number
* to be mounted on the unit.
*
*   Register one will point to the Unit Control Block to
* mount the tape on.
*
*    CCW issued to the tape device number will be something like:
* CCW CCW X'4B',FILESPEC,X'20',21  Mount tape CCW
* FILESPEC DC  CL21'/tapeC/C01/C01234.aws'  Tape file specification
*
*    If SYS1.PARMLIB(IEASVCxx) specifies APF(YES) then the
* caller to this SVC must be APF or otherwise authorized.
*
*     This SVC must be linkedited into SYS1.LPALIB.
* It must run as a type 3 or 4 SVC.
* It must be defined in SYS1.PARMLIB(IEASVCxx) something like:
* SVCPARM 230,REPLACE,TYPE(3),EPNAME(IGC0023{),APF(YES),NPRMPT(NO)
*      /* 230 - Tape automountCCW issuer                           */
*      /* 230 = SVC C'W'                                           */
*      /* 227 = SVC C'T' might make more sense to some people.     */
*
*    Registers:
*     R0  Volume serial address on entry.  Copied to R11.
*     R1  UCB address on entry.  Copied to R12.
*     R2  Not used.
*     R3  Not used. CVT address.
*     R4  Not used. TCB address.
*     R5  Not used. SVRB address.
*     R6  Base register.
*     R7  Not used. ASCB base register.
*     R8  Not used.
*     R9  Work register.
*     R10 To save R14 to return to caller.
*     R11 Address of the tape volume serial to mount R0.
*     R12 Address of the UCB from R1.
*     R13 Save area for IOSINT?? and control blocks.
*     R14 Return address on entry and return.  Copied to R10.
*     R15 Return code of 0 on all returns.
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
         PRINT ON,GEN,DATA
IGC00230 CSECT ,
IGC00230 AMODE 31                 Addressing mode above 16M line
IGC00230 RMODE ANY                Allow loading anywhere in storage
         USING *,R6               Give assembler the base register
         B     START              Branch around core mark
         DC    AL1(23),CL23'IGC0023{.&SYSDATE..&SYSTIME'  Coremark
*
START    DS    0H
         LR    R10,R14            Save return address
         LR    R11,R0             Save volume serial address
         USING VOLDSECT,R11       Give the assembler the vol.ser.reg.
         LR    R12,R1             Save UCB address
         USING UCB,R12            Give assembler the UCB register
         CLI   UCBCHAN,X'05'      See if a real tape drive
         BE    NOFREE             Is channel 5, get out now
         LA    R0,SAVESIZE        Load work area size for GETMAIN
         GETMAIN RU,LV=(0),LOC=(BELOW,ANY)  Get storage for work space
         XC    0(CLEARSIZ,R1),0(R1)  Clear SAVEAREA in DSECT
         LR    R13,R1             Put save areas in R13
         USING SAVEAREA,R13       Give the assembler the save area reg.
*
*    Fill in DEB, DCB, IOB, and CCW fields
         MVC   DEBVT(DEBLEN),DDEBVT   Copy DEB template
         LA    R9,DCB             Load address of DCB
         STCM  R9,B'0111',DEBDCB  Store DCB address in DEB
         LA    R9,DEBVT           Load address of DEB Vector table
         STCM  R9,B'0111',DEBIOVT Store vector table addr. in DEB
         ST    R12,DEBUCB         Store UCB address in the DEB
         MVC   DCB(DCBLEN),DDCB   Copy DEB template
         LA    R9,DEB             Load address of DEB
         STCM  R9,B'0111',DCBDEB  Store DEB address in DCB
         MVC   IOB(DIOBLEN),DIOB  Copy IOB templates
         LA    R9,ECB             Load address of Event Contr.Blk
         STCM  R9,B'0111',IOBECB  Store ECB address in IOB
         LA    R9,IOBCCW          Load addr.of Chan. Command Word
         ST    R9,IOBCCWA         Store CCW address in IOB
         LA    R9,DCB             Load address of Data Control Block
         ST    R9,IOBDCB          Store DCB address in IOB
         LA    R9,MOUNT           Load address of mount command
         STCM  R9,B'0111',IOBCCW+1 Store mount command address
         MVC   MOUNT,DMOUNT       Copy mount command template
         MVC   MOUNT1,VOLSER      Complete file system name for mount
         MVC   MOUNT3,VOLSER      Move in directory name for mount
         MVC   MOUNT6,VOLSER      Move in vol ser for mount
         CLI   VOLSER,C'A'        Should file system name be tapeA?
         BE    VOLFIN             If tapeA, file system resolved
         CLI   VOLSER,C'B'        Should file system name be tapeB?
         BE    VOLFIN             If tapeB, file system resolved
         MVI   MOUNT1,C'C'        Not tapeA or tapeB, set tapeC
         DROP  R11                Don't need volume serial pointer now
VOLFIN   DS 0H
*
* mount tape
         XC    ECB,ECB            Clear left over garbage in ECB
         EXCP  IOB                Issue automountccw
*        WTO   'SVC 230 - EXCP for IOB done',ROUTCDE=11
         TM    ECB,ECBPOST        Was ECB posted?
         BO    NOWAIT             Already posted, weird, tape may be
* offline or something else to cause OS/390 to not have outstanding
* I/O to the tape drive which allowed the mount to complete.
*
* If using IOS MACROs in normal code, watch out for the save area use.
* IOS MACROs overlay the caller's caller's R13 address.  Can be nasty.
*        L     R1,4(,R13)         Save old R13 from IOS overlay
         IOSINTRP UCB=(R12)       Interrupt old tape I/O for new
         TM    ECB,ECBPOST        Was ECB posted?
         BO    NOWAIT             Posted because IOSINTRP redrove I/O
         WAIT  ECB=ECB            Wait for mount to complete
*
NOWAIT   DS    0H
         LA    R0,SAVESIZE        Load work area size for FREEMAIN
         FREEMAIN RU,LV=(0),A=(R13)  Free work area's storage
         DROP  R13                Drop work area base register
NOFREE   DS    0H                 If no GETMAIN, FREEMAIN bypassed
         LR    R14,R10            Restore return address
         SLR   R15,R15            Set the return code to zero
         BR    R14                Return to caller
         DROP  R6                 Drop base register
         DROP  R12                Drop UCB using
*
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Constants and model control blocks
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
         DS    0D                Align to a double word
*
BINTABLE DC    XL64'0'            Translate display hex to real hex
         ORG   BINTABLE+1        Set location counter to letters ABCDEF
         DC    XL6'0A0B0C0D0E0F'  Constant for letters ABCDEF
         ORG   ,                  Reset location counter
         ORG   BINTABLE+48        Set location counter to digits 0-9
         DC    XL10'00010203040506070809'  Set number values
         ORG   ,                  Reset location counter
*
* APPEND   DC    X'0B0E'          Dummy I/O appendage routine BSM 0,R14
*
* DEB template
         DS    0D                 Insure alignment
DDEBVT   DS    0XL20              Data Extent Appendage Vector Table
         DC    A(PSARET-PSA)  0   I/O appendage end-of-extent
         DC    A(PSARET-PSA)  4   I/O appendage Start I/O
         DC    A(PSARET-PSA)  8   I/O appendage Pgm.Contl.Intr.
         DC    A(PSARET-PSA) 12   I/O appendage Channel end
         DC    A(PSARET-PSA) 16   I/O appendage Abnormal end
DDEBPREF DS    0XL16              DEB Prefix table
         DC    3A(0)       20     Reserved?
         DC    XL1'06'     32     Number of double-words in DEB ( 06 )
         DC    XL1'00'     33     Unknown Access method type
         DC    H'0'        34     Offset in DEB table for this DEB
DDEB     DS    0XL36
         DC    A(0)        36     Address of TCB for this DCB
         DC    AL1(4)      40     4 bytes in Acc.Meth.Dependent section
         DC    AL3(0)      41     Address of next DEB in chain
         DC    X'C0000000' 44     DEBDISP new data set
         DC    XL1'30'     48     DEBOPATB Data set positioning leave
         DC    AL3(0)      49     Addr.of first IOB in purge chain
         DC    A(0)        52     Pointer to related request
         DC    A(0)        56     Address of locate parameter list
         DC    XL1'0F'     60     Indicate a DEB
DDEBDCB  DC    AL3(*-*)    61     Address of DCB or ACB
         DC    AL1(2)      64     Half-words in DEB dev.dependent sect.
DDEBIOVT DC    AL3(*-*)    65     Addr. I/O app. vector table DEBVT
DDEBDEV  DS    0XL4               Device dependent secion
DDEBUCB  DC    A(*-*)      68     Address of UCB
         DC    F'0'        72     ?
         DC    F'0'        76     ?
         DC    F'0'        80     ?
DEBLEN   EQU   *-DDEBVT    84     Length of the DEB
*
* DCB template
DDCB     DS    0D
         DC    10F'0'             40 byte unused for EXCP foundation
         DC    H'0'               TIOT offset
         DC    B'11010000'        MACRF byte 1
* DCBMRECP EQU   DCBBIT0        EXECUTE CHANNEL PROGRAM (EXCP) ---
* DCBMRFE  EQU   DCBBIT1        FOUNDATION EXTENSION IS PRESENT (EXCP)
* DCBMRCI  EQU   DCBBIT3        COMMON INTERFACE (EXCP)
         DC    B'00001000'        MACRF byte 2
* DCBMR5WD EQU   DCBBIT4        FIVE-WORD DEVICE INTERFACE (EXCP)
         DC    A(*-*)             Will be the address of the DEB
         DC    X'10000000'        OFLGS last I/O operation was a write
*        DC    X'00000000'        OFLGS last I/O operation was read
         DC    5F'0'              5 word EXCP device interface
DCBLEN   EQU   *-DDCB             Length of the DCB
*
* IOB templates
DIOB     DS    0D                 IOB to mount a tape
         DC    XL4'42000000'  0   Command Chaining and nonsequential
* IOBCMDCH EQU   X'40' -   COMMAND CHAINING USED IN CHANNEL PROGRAM
* IOBUNREL EQU   X'02' -   IOB UNRELATED FLAG (I.E., NONSEQUENTIAL)
         DC    XL1'7F'        4   Addr. of expected I/O completion code
DIOBECB  DC    AL3(*-*)       5   Address of the ECB
         DC    D'0'           8   Channel Status Word
DIOBCCWA DC    A(*-*)        16   Address of the Channel Command Words
DIOBDCB  DC    A(*-*)        20   Address of the Data Control Block
         DC    A(0)          24   IOB Restart
         DC    XL4'00010000' 28   Flags and counters
*   Don't know what the bit means.  DEBE had it, so why not use it?
         DC    D'0'          32   Seek address MBBCCHHR ? ? ? ?
DIOBCCW  CCW   X'4B',*-*,X'20',L'DMOUNT  Mount tape CCW
DIOBLEN  EQU   *-DIOB             Size of IOB template
*
DMOUNT   DC    CL21'/tape?/???/??????.aws'  Mount command
MOUNTLEN EQU   *-DMOUNT           Length of mount command
*
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DSECTs Follow
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
VOLDSECT DSECT ,
VOLSER   DS    CL6                Tape volume serial from calling pgm.
*
SAVEAREA DSECT ,
         DS    9D                 Register save area
*
CLEARSIZ EQU   *-SAVEAREA
*
ECB      DS    F                  Event Control Block for mount
ECBPOST  EQU   X'40'              Indicator that ECB was posted
*
DWORK    DS    D                  Double word work area
*
         DS    0D                 Align the following DEB
DEBVT    DS    5F                 Five words DEB vector table
DEBPREF  DS    XL16               DEB Prefix table
DEB      DS    XL(DEBLEN)         Data Extent Block
DEBDCB   EQU   DEBVT+61,3         Address of DCB or ACB
DEBIOVT  EQU   DEBVT+65,3         Addr. I/O app. vector table DDEBVT
DEBUCB   EQU   DEBVT+68,4         Address of UCB
*
         DS    0D                 Align the following DCB
DCB      DS    XL(DCBLEN)         Tape DCB
DCBDEB   EQU   DCB+45,3           DEB address in the DCB
*
         DS    0D                 Align IOB to double word boundary
IOB      DS    XL(DIOBLEN)        Input and Output Block
IOBCSW   EQU   IOB+8,8            Channel Status Word
IOBECB   EQU   IOB+5,3            Address of Event Control Block
IOBCCWA  EQU   IOB+16,4           Address of Channel Command Words
IOBDCB   EQU   IOB+20,4           Address of Data Control Block
IOBCCW   EQU   IOB+40,8           Tape mount CCW
*
MOUNT    DS    XL(MOUNTLEN)       Mount command '/tape?/???/??????.aws'
MOUNT1   EQU   MOUNT+5,1          Last byte of file-system name
MOUNT3   EQU   MOUNT+7,3          First three bytes of tape VolSer
MOUNT6   EQU   MOUNT+11,6         Tape VolSer
*
SAVESIZE EQU   *-SAVEAREA
*
UCB      DSECT ,                  Provide DSECT statement for UCB
         IEFUCBOB ,               Unit Control Block mapping
*
         DCBD  DSORG=PS,DEVD=DA   Data Control Block DSECT IHADCB
*
PSA      IHAPSA DSECT=YES         Prefix Storage Area
*
IOCSTUFF DSECT ,
         IECDIOCM ,               I/O Communication area DSECT
*
         CVT   DSECT=YES,LIST=YES Communication Vector Table for IOS
*
IGC00230 CSECT ,
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     Register Equates
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
R0       EQU   0                  Register equate for register 0
R1       EQU   1                  Register equate for register 1
R2       EQU   2                  Register equate for register 2
R3       EQU   3                  Register equate for register 3
R4       EQU   4                  Register equate for register 4
R5       EQU   5                  Register equate for register 5
R6       EQU   6                  Register equate for register 6
R7       EQU   7                  Register equate for register 7
R8       EQU   8                  Register equate for register 8
R9       EQU   9                  Register equate for register 9
R10      EQU   10                 Register equate for register 10
R11      EQU   11                 Register equate for register 11
R12      EQU   12                 Register equate for register 12
R13      EQU   13                 Register equate for register 13
R14      EQU   14                 Register equate for register 14
R15      EQU   15                 Register equate for register 15
         END   ,                  The end of the program
//L.SYSLMOD DD DISP=SHR,DSN=SYS1.LPALIB,SPACE=
   NAME IGC0023{
