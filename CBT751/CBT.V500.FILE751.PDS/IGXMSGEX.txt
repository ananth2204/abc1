//SOMITCWI JOB (????????,????,1439,9999,9999),IGXMSGEX-SOMITCW,
//         CLASS=?,MSGCLASS=?,
//         COND=(4,LT),NOTIFY=SOMITCW
//*
//IEBCOPY EXEC PGM=IEBCOPY,PARM='SIZE=3072K'   ,COND=ONLY
//SYSPRINT DD  SYSOUT=*
 COPY   OUTDD=O1,INDD=I1,LIST=YES
 SELECT MEMBER=IGX00030
//I1       DD  DISP=SHR,DSN=SYS1.LPALIB
//O1       DD  DISP=SHR,DSN=????.LOAD????
//*
//* For OS/390 2.4.0 with this JCL, you must MPLA
//* ( or FLPA ) the change into the system.
//*
//* SYS1.PARMLIB(IEALPA00)
//* INCLUDE LIBRARY(SYSx.LOADxxxx) MODULES(
//*  IGX00030)  /* IGXMSGEX for Flex-ES tape mounts */
//*
//* Newer systems may have IGXMSGEX as a separate
//* load module so member name might not be IGX00030 ?
//*
//REFRESH1 EXEC PGM=COMMAND,PARM='MODIFY LLA,REFRESH'
//*
//IGXMSGEX EXEC PROC=SMPE,PARM='CSI=SYS1VNEW.MVSSPV5.GLOBAL.CSI'
//SMPMTS   DD  DISP=SHR,DSN=SYS1NEW.SMPMTS
//SYSLIB   DD  DISP=SHR,DSN=SYS1NEW.SMPMTS
//         DD  DISP=SHR,DSN=SYS1NEW.MACLIB
//         DD  DISP=SHR,DSN=SYS1NEW.MODGEN
//         DD  DISP=SHR,DSN=????.SORC????
//LPALIB   DD  DISP=SHR,DSN=????.LOAD????
//* SMPLOG   DD  DSN=SYS1.SMPLOG,DISP=MOD
//SMPPTFIN DD  *
++ USERMOD(IGXMSGX) REWORK(1994315) .
++ VER(Z038) FMID(HDZ11D0) PRE(UW73466) .
++ SRC(IGXMSGEX) DISTLIB(AEDGSRC1) .
PASS TITLE 'IGXMSGEX - - - Mount tapes displayed on tape drives'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     This program is exit SMS IGXMSGEX that gets control
*  immediately before a message is displayed on a tape drive.
*
*    This exit will display to the console:
* 1. The tape drive hardware address.
* 2. The message that the tape drive will display.
*
*    This program will also issue SVC W ( SVC 230 ) to issue
* a P/390 auto-mount-CCW ( CCW X'4B' ) to mount any requested
* tapes on the requested tape drive.
*
*    If the mount request is for a scratch tape, this exit
* will select a scratch tape to be mounted.
*
* Date written: 2005-08-30
*
* Blame: somitcw@Yahoo.com
*
*
* Change log:
*
* 2008-07-05 Added display of control byte to message WAM000I
*   W.A.M.   Old format was:
*             WAM000I T 0405,KB00058 ,MB00504S
*            New format is:
*             WAM000I T 0405,F0,DA00048 ,MPRIVATS
*             WAM000I T 0405,50,*IEC701 , A12345
*             WAM000I T 041C,48,MPRIVATS,
*             WAM000I T 0405,40, C00123 ,
*             WAM000I T 0405,28,DC01234 ,
*             WAM000I T 0405,28,KC01234 ,
*             WAM000I T 0405,28,RC01234 ,
*             WAM000I T 041C,20, A00484S,
*             Above for unmount/mount, IEHINITT mount,
*             Mount-blink, change data set, Dismount-blink,
*             Keep-blink, Remove-blink, and tape accepted.
*
* 2007-09-12 Added skip for tape requested to recover from a
*   W.A.M.   file protect message *IEC509A/DIEC509
*            *IEC501A M 0405,B00504,SL,COMP,SOMITCWT,TAPEZERO
*             WAM000I T 0405,KB00058 ,MB00504S
*             WAM000I T 0405, B00504S,
*            *IEC509A F 0405,B00504,SOMITCWT,TAPEZERO
*             WAM000I T 0405,DIEC509 ,MB00504S
*             WAM000I T 0405, B00504S,
*            *IEC509A F 0405,B00504,SOMITCWT,TAPEZERO
*             WAM000I T 0405,DIEC509 ,MB00504S
*             WAM000I T 0405, B00504S,
*            *IEC509A F 0405,B00504,SOMITCWT,TAPEZERO
*
* 2006-10-03 Change TAPEHIGH from increasing 1000 tapes at a time to
*   W.A.M.   be a high water mark of the tape numbers used.
*            Since there are 8 tapes to a byte, the pool will
*            expand 8 tapes at a time unless the high water
*            mark is set higher with program TAPERSET.
*
* 2006-07-17 Corrected and simplified logic used to search for
*   W.A.M.   scratch tapes.
*
* 2005-10-04 Changed TAPESKIP ( in TAPEBITS ) to XCVTSKIP ( in
*   W.A.M.   CVTUSER ).  Added use of R5 to map to CVTUSER.
*
* 2005-09-05 Added "CLI UCBCHAN,X'05'" so requests to real tape
*   W.A.M.   drives do not have an automountCCW issued for them.
*
* 2005-08-30 Created the IGXMSGEX exit from IGXTRACE.
*   W.A.M.
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
IGXMSGEX CSECT ,
IGXMSGEX AMODE 31
IGXMSGEX RMODE ANY
         PRINT ON,GEN,DATA        Need all information
         USING *,R15              Set temporary base register
         SAVE  (14,12),,'IGXMSGEX.&SYSDATE..&SYSTIME' Save Registers
         DROP  R15                Drop the temporary base register
         LR    R12,R15            Load the program's base register
         USING IGXMSGEX,R12       Give the assembler the new base
         USING PLIST,R1           Give the assembler the PARM list reg.
         LM    R2,R3,PLIST        Load UCB addr. & message text addr.
         DROP  R1                 Finished with the parameter list
         USING UCB,R2             Give assembler the UCB register
         USING MSGTEXT,R3         Give assembler the message text reg.
         GETMAIN RC,LV=SAVELEN    Get a save and work area
         LTR   R15,R15            Insure that GETMAIN worked
         BZ    CONTINUE           GETMAIN worked, go continue
         WTO   'IGXMSGEX - GETMAIN failed, no tape mount',ROUTCDE=2
         B     NOMOUNT            Bypass trying to mount tape
CONTINUE DS    0H
         XC    0(CLEARLEN,R1),0(R1)  Clear the save/work area
         ST    R1,8(,R13)         Connect old and new save areas
         ST    R13,4(,R1)         Connect old and new save areas
         LR    R13,R1             Connect old and new save areas
         USING SAVEAREA,R13       Point the assembler to the save area
         MVC   WTOLIST,DUMWTO     Copy WTO MF=L template to work area
         UNPK  WTOLIST+14(5),UCBCHAN(3) Copy UCB hardware addr
         TR    WTOLIST+14(4),TABLE-240 Translate address for display
         MVI   WTOLIST+18,C','    Put a comma after the address
         UNPK  WTOLIST+19(3),CONTROL(2)  Unpack control byte
         TR    WTOLIST+19(2),TABLE-240 Translate X'CA'-'CF' to C'A'-'F'
         MVI   WTOLIST+21,C','    Put a comma after the address
         MVC   WTOLIST+22(8),MSG1 Copy first message display date
         MVC   WTOLIST+31(8),MSG2 Copy second message display date
         WTO   MF=(E,WTOLIST)     Issue the write to operator
*
         CLI   UCBCHAN,X'05'      See if a real tape drive
         BE    EXIT               Is channel 5, get out now
*
*        OI    CONTROL,ACL        Just leave Auto.Cart.Loader bit on
*                                 Don't need to turn it on again
*                                 Don't turn it off either
*
         L     R5,16              Load the address of the CVT
         USING CVT,R5             Give the assembler the CVT DSECT
         L     R5,CVTUSER         Load the CVT user area address
         USING XCVTUSER,R5        Give assembler the CVTUSER mapping
         CLC   XCVTUEYE,CVTUSER1  See if eye-catcher matches
         BNE   NOCVTUSR           No match so cannot locate XCVTSKIP
         L     R11,XCVTTAPE       Load address
         USING TAPEBITS,R11       Give assembler the TAPEBITS mapping
         CLC   TAPEEYE,TAPEBIT1   See if eye-catcher matches
         BNE   NOBITS             No match so cannot locate TAPEBITS
* R5  now has the address of CVTUSER area
* R11 now has the address of TAPEBITS
         B     CHECKMSG          Go check messages to find tape request
*
NOCVTUSR DS    0H
*        WTO  'IGXMSGEX - Could not find CVTUSER in memory',ROUTCDE=11
         SLR   R5,R5              Cannot find XCVTUSER, clear pointer
*
NOBITS   DS    0H
         SLR   R11,R11            Cannot find TAPEBITS, clear pointer
*
CHECKMSG DS    0H
*
* I haven't seen a call for "SCRTCH" for years and assume that normal
* scratch requests are for "PRIVAT".  More specifically "MPRIVATS".
* Calling for a tape without (TAPE,,DEFER) and no DSNAME and default
* DISP of NEW,DELETE,DELETE can cause a "SCRTCH" mount.
* In most cases, "SCRTCH" should be ignored because the program
* does not need a scratch tape but will set a specific vol ser
* before opening the tape.
* This exit will attempt to mount a tape with a vol ser of "SCRTCH"
* which will fail and the application program can do what it wants.
* A better method might to check for "SCRTCH" and ignore the
* mount request but put out a message to fix the JCL.
* Another option is to treat a "SCRTCH" mount request like a "PRIVAT"
* mount request and waste a scratch tape until TAPESYN2 runs.
         CLC   MPRIVAT,MSG1       See if message1 is for a scratch tape
         BE    FINDTAPE           Message 1 is for scratch, go find one
         CLC   MPRIVAT,MSG2       See if message2 is for a scratch tape
         BE    FINDTAPE           Message 2 is for scratch, go find one
*
         LA    R10,MSG1           Load address of first message
         CLI   0(R10),C'M'        See if a call for a specific tape
         BE    MOUNT              If mount, go mount
         CLC   DIEC509,MSG1       See if msg1 is file protect remount
         BE    EXIT               Message 1 is remount loop, skip mount
         LA    R10,MSG2           Load address of second message
         CLI   0(R10),C'M'        See if a call for a specific tape
         BE    MOUNT              If mount, go mount
*
         CLC   IEC701,MSG1        See if an IEHINITT display
         BNE   EXIT               No mount requested of any type
* R10 still has the needed MSG2 address
         B     MOUNT              Go to mount a tape
*
*
FINDTAPE DS    0H
         LTR   R11,R11            See if a valid TAPEBITS found
         BNZ   FIND2              TAPEBITS found, can select scratch
         WTO   'IGXMSGEX - Cannot find scratch tape volume',ROUTCDE=11
         WTO   'IGXMSGEX - Did TAPESAVE start?',ROUTCDE=11
         B     EXIT               No TAPEBITS, can not select scratch
FIND2    DS    0H
*
* TAPEDISP is the last, current, or next byte to contain a zero bit
* ( which will indicate a scratch tape ).
*
* TAPEHIGH indicates the high tape byte in use since TAPENEW or
* TAPERSET has run.  It defines the upper soft limit of the tape
* pool.
*
*    Following logic:
* If TAPEDISP points to byte with bit available, use it
* If TAPEDISP to TAPEHIGH points to byte with bit available, use
* first tape within the range.
* If no bits from TAPEDISP to TAPEHIGH, search from tape zero to end
* of the tape bits ( 12,500 bytes, 100,000 bits ).
* If first byte found is after TAPEHIGH, TAPEHIGH will be set to be
* equal to the new high water mark.
*
         LA    R6,TAPES           Load addr.of beginning of tape bits
         AH    R6,TAPEDISP        Find address of current displacement
         CLI   0(R6),X'FF'        See if all bits are in use
         BNE   BIT2TAPE           A tape available, go use it
* Initial search for byte with zero bit in it
         LH    R7,TAPEHIGH        Load displacement of high-water-mark
         SH    R7,TAPEDISP        Find number of bytes to search
         BNP   RETRY              End of TAPEHIGH, search from zero
         LA    R6,1(,R6)          TAPEDISP byte already checked
         LA    R8,0               Clear CLCL data register
         LA    R9,255             Clear CLCL length/pad register
         SLL   R9,24              Put pad in first bits and zero length
         CLCL  R6,R8              Find a byte that is not X'FF'
         BZ    RETRY              No non-full bytes were found
* R6 has the address of a byte that has a bit that is zero ( scratch )
BIT2TAPE DS    0H
         LA    R7,TAPES           Load address of tapes
         LR    R8,R6              Load new displacement address
         SLR   R8,R7              Find relative displacement
         STH   R8,TAPEDISP        Store new or current displacement
         SLR   R9,R9              Clear work register
         IC    R9,0(,R6)          Load the byte to find bit
         IC    R9,BITTABLE(R9)    Find which bit is zero
         CH    R9,H8              See if no zero bit in byte
         BE    BITSTOLE           Some other mount stole the bit
         SLR   R7,R7              Clear work register
         IC    R7,BITS(R9)        Load the bit mask for TM and OI
* Should serialize around EX for TM, BO, and EX for OI
         EX    R7,TM              See if tape is still available
         BO    BITSTOLE           Tape was stolen
         EX    R7,OI              Turn the BIT on for tape found
* Should serialize around EX for TM, BO, and EX for OI
         OI    TAPEUPD,1          Mark TAPEBITS update to write to disk
         SLL   R8,3               Multiply displacement by 8 bits/byte
         ALR   R8,R9              Add tape within byte for tape number
         CVD   R8,DWORK           Convert tape number to packed decimal
         UNPK  VOLSER+1(5),DWORK+5(3)  Unpack the tape number
         OI    VOLSER+5,X'F0'     Correct the sign
         MVC   VOLSER(1),TAPECHAR Add first byte of tape number
         LA    R0,VOLSER          Load address of VOLSER to be mounted
         B     MOUNT4             Go mount the tape on the drive
TM       TM    0(R6),0            See if tape still available
OI       OI    0(R6),0            Mark scratch tape as in use tape
*
RETRY    DS    0H
         WTO   'IGXMSGEX - Searching from tape zero',ROUTCDE=11
         LA    R6,TAPES           Load address of TAPE bits
         LH    R7,TAPEMAX         Load displacement of end of TAPEBITS
         LA    R8,0               Clear CLCL data register
         LA    R9,255             Clear CLCL length/pad register
         SLL   R9,24              Put pad in first bits and zero length
         CLCL  R6,R8              Find a byte that is not X'FF'
         BZ    ALLUSED            No non-full bytes were found
         LH    R7,TAPEHIGH        Load current soft pool limit displac.
         LA    R7,TAPES(R7)       Load current soft pool limit address
         CLR   R6,R7              See if soft limit must raise
         BNH   BIT2TAPE           Within pool, convert bits to tape no.
* Dead   LH    R10,TAPEHIGH       Load the old limit
* Dead   LA    R10,125(,R10)      Bump high limit by 1000 tapes
* Dead   STH   R10,TAPEHIGH       Save new high limit
         LA    R7,TAPES           Load address of tapes
         LR    R8,R6              Load new high water mark address
         SLR   R8,R7              Find relative displacement
         STH   R8,TAPEHIGH        Store new high water mark displ.
         WTO   'IGXMSGEX - Tape pool high water mark raised',ROUTCDE=11
         B     BIT2TAPE           Go back to convert bits to tape numbr
*
MOUNT    DS    0H
         LTR   R5,R5              See if CVTUSER was found
         BZ    MOUNT3             CVTUSER not found, go skip skip check
*        BNZ   MOUNT2             CVTUSER found, go check XCVTSKIP
MOUNT2   DS    0H
         CLC   XCVTSKIP,1(R10)    See if tape has an IEC512I error
         BE    SKIP               Tape has a problem, go skip mount
MOUNT3   DS    0H
         LA    R0,1(,R10)         Load address of the requested vol ser
MOUNT4   DS    0H
         LR    R1,R2              Load the UCB address
         SVC   C'W'               Issue the autoloadCCW SVC
         B     EXIT               Mission complete, go exit
*
ALLUSED  DS    0H
         WTO   'IGXMSGEX - All tapes used, need new tape pool',        C
               ROUTCDE=11
         B     EXIT
*
SKIP     DS    0H
         XC    XCVTSKIP,XCVTSKIP  Clear tape to skip, already skipped
         WTO   'IGXMSGEX - Tape is one to skip mount for',ROUTCDE=11
         B     EXIT               Due to previous error, skip mount
*
BITSTOLE DS    0H
         WTO   'IGXMSGEX - Byte found, but bit stolen',ROUTCDE=11
         B     EXIT
*
EXIT     DS    0H
         LR    R1,R13             Save work area location for FREEMAIN
         L     R13,4(,R13)        Restore caller's save area address
         FREEMAIN RC,LV=SAVELEN,A=(1)  Free work area's storage
NOMOUNT  DS    0H
         ICM   R15,B'1111',EDGMSGEX  Load the next routine address
         BZ    RETURN             If no next routine, return to caller
         LM    R0,R12,20(R13)     Restore caller's registers
         BR    R15                Branch to next routine
RETURN   DS    0H
         RETURN (14,12),RC=0      Return to caller with return code 0
*
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Constants and model control blocks
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         DS    0F                 Insure that WTO is aligned
DUMWTO   WTO   'WAM000I T 0400,xx,xxxxxxxx,xxxxxxxx',ROUTCDE=11,MF=L
*               456789 123456789 123456789 12345678
WTOLEN   EQU   *-DUMWTO
*
MPRIVAT  DC    CL7'MPRIVAT'       Compare for scratch tape request
*
DIEC509  DC    CL7'DIEC509'       Compare for file-protect remount loop
*
IEC701   DC    CL7'*IEC701'       IEHINITT tape mount message
*
H8       DC    H'8'               Constant for compare
*
TAPEMAX  DC    H'12500'           Maximum TAPEBITS TAPES displacement
*
* ANOMSGEX DC    V(ANOMSGEX)        ? ? ? ?
EDGMSGEX DC    V(EDGMSGEX)        Next routine ( DFSMSrmm MSG exit )
*
         DS    0D                 Why not align?
*
CVTUSER1 DC    CL7'CVTUSER',X'01' Compare for CVT user area found
TAPEBIT1 DC    CL7'TAPEBIT',X'01' Compare for TAPEBITS area found
*
TABLE    DC    CL16'0123456789ABCDEF'  Packed-unsigned to display
*
BITTABLE DC    128X'00'           Find bit in byte
         DC     64X'01'           Find bit in byte
         DC     32X'02'           Find bit in byte
         DC     16X'03'           Find bit in byte
         DC      8X'04'           Find bit in byte
         DC      4X'05'           Find bit in byte
         DC      2X'06'           Find bit in byte
         DC      1X'07'           Find bit in byte
         DC      1X'08'           No bits in byte
*
BITS     DC    XL8'8040201008040201'  Bit to set on
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DSECTs Follow
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
SAVEAREA DSECT ,
         DS    9D                 Register save area, not used
*
*
CLEARLEN EQU   *-SAVEAREA
*
*
DWORK    DS    D                  Double word work area
*
WTOLIST  DS    XL(WTOLEN)         Write To Operator parameter list
*
VOLSER   DS    CL6                Volume serial to pass to SVC 230
*
SAVELEN  EQU   *-SAVEAREA         Length of SAVEAREA
*
*
*  Parameter list pointed to be register 1
PLIST    DSECT ,
UCBA     DS    A                  UCB address
MSGTEXTA DS    A                  Message text address
*
*
*  Message text structure
MSGTEXT  DSECT ,
CONTROL  DS    CL1
ACL      EQU   X'01'              ACL request bit
MSG1     DS    CL8                first message
MSG2     DS    CL8                second message
*
*  Control byte?
*
* Bits 0 - 2 New Message Overlay:
*
* (*) When lit the messages in bytes 1-8 and 9-16 are
* overlayed with a drive message when the drive next
* starts tape motion
*
* (*) Bit 1 overlays the messages in bytes 1-8 and 9-16
* with a drive message only when the tape cartridge is
* physically removed from the drive.
*
* (*) Bit 2 overlays the messages in bytes 1-8 and 9-16
* with a drive message only when the drive becomes ready.
*
* (*) Bits 0, 1, 2 displays the messages in bytes 1-8 and
* 9-16 until a tape cartridge has been physically removed
* from the drive. Then, display only the message in bytes
* 9-16 until the drive becomes ready.
*
*
* FCB_FS is high order three bits ( 0-2 )
* FCB_FS_RESET_DISPLAY: // 0x80
* FCB_FS_MOUNT:       // 0x40
* FCB_FS_UNMOUNT:     // 0x20
* FCB_FS_NOP:         // 0x60
* FCB_FS_UMOUNTMOUNT: // 0xE0
* FCB_AM X'10' Alternate ( when set and mount and/or
*  dismount, two messages display )
* FCB_AM X'10' Alternate ( when set, next two bits ignored )
* FCB_BM X'08' Blinking
* FCB_M2 X'04' Message 2 ( may mean only message #2 to display? )
* FCB_AL X'01' AutoLoader
*
* "When bit 7 (FCB_AL) is active and bits 0-2 (FCB_FS) specify
*         a Mount Message, then only the first eight characters of the
*         message are displayed and bits 3-5 (FCB_AM, FCB_BM, FCB_M2)
*         are ignored."
* "When bit 7 (FCB_AL) is active and bits 0-2 (FCB_FS) specify
*         a Demount/Mount message, then only the last eight characters
*         of the message are displayed. Bits 3-5 (FCB_AM, FCB_BM,
*         FCB_M2 are ignored."
* "When bit 3 (FCB_AM) is set to 1, then bits 4 (FCB_BM) and 5
*         (FCB_M2) are ignored."
*
         COPY  CVTUSER
* XCVTUSER DSECT ,
* XCVTUEYE DS    CL8              7 bytes of 'CVTUSER' and 1 byte X'01'
* XCVTUVOL DS    XL6              VOLSER from message used by IEC507D
*          DS    XL2              Space available for expansion
* XCVTUTIM DS    XL6              CYYDDDHHMMSS Century, Year,Day, Hour,
* *                               Minute, and Second, used by IOS000I
*          DS    XL2              Space available for expansion
* XCVTPSWD DS    F                ACF2 LGNIXIT anchor, used by SAVEPSWD
* XCVTJOUR DS    F                DFHJC4508 Journal PRIM or SECO
* XCVTTAPE DS    XL4              TAPE, TAPESAVE, TAPESYNC, & IGXMSGEX
* XCVTSKIP DS    XL6              IEC512I tape vol ser to ignore
*          DS    XL6              Space available for expansion
* XCVTUSIZ EQU   *-XCVTUSER       Length of area pointed to by CVTUSER
*
*
TAPEBITS DSECT ,
         COPY  TAPEBITS
* TAPEEYE  DS    D                DSECT eye-catcher CL7'TAPEBIT',XL1'1'
* TAPEOLD  DS    A                Addr of old TAPEBITS record to delete
*          DS    CL6              TAPESKIP moved to CVTUSER as XCVTSKIP
* TAPEDISP DS    XL2              Last TAPES byte that had a free bit
* TAPEHIGH DS    XL2              High-water-mark and soft pool limit
* TAPEUPD  DS    XL1              Tape bits updated, need writing
* TAPECHAR DS    CL1              First byte of tapes described next
* TAPES    DS    XL12500          Bits for 100,000 tapes ?00000-?99999
* * TAPEBIT0 EQU   X'80'            First tape within a byte
* * TAPEBIT1 EQU   X'40'            Second tape within a byte
* * TAPEBIT2 EQU   X'20'            Third tape within a byte
* * TAPEBIT3 EQU   X'10'            Fourth tape within a byte
* * TAPEBIT4 EQU   X'08'            Fifth tape within a byte
* * TAPEBIT5 EQU   X'04'            Sixth tape within a byte
* * TAPEBIT6 EQU   X'02'            Seventh tape within a byte
* * TAPEBIT7 EQU   X'01'            Eighth tape within a byte
* TAPELEN  EQU   *-TAPEEYE        Length of TAPEBITS data record
*
*
         CVT   DSECT=YES,LIST=YES Communication Vector Table
*
*
UCB      DSECT ,                  provide DSECT statement for UCB
         IEFUCBOB ,               Unit Control Block mapping
*
*
IGXMSGEX CSECT ,                  End the DSECTs
         LTORG ,                  In case someone adds literals
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     REGISTER EQUATES
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
R0       EQU   0                  Register equate for register 0
R1       EQU   1                  Register equate for register 1
R2       EQU   2                  Register equate for register 2
R3       EQU   3                  Register equate for register 3
R4       EQU   4                  Register equate for register 4
R5       EQU   5                  Register equate for register 5
R6       EQU   6                  Register equate for register 6
R7       EQU   7                  Register equate for register 7
R8       EQU   8                  Register equate for register 8
R9       EQU   9                  Register equate for register 9
R10      EQU   10                 Register equate for register 10
R11      EQU   11                 Register equate for register 11
R12      EQU   12                 Register equate for register 12
R13      EQU   13                 Register equate for register 13
R14      EQU   14                 Register equate for register 14
R15      EQU   15                 Register equate for register 15
         END   ,                  The end of the program
//SYSIN  DD *
 SET BOUNDARY(GLOBAL).
  REJECT SELECT(IGXMSGX) BYPASS(APPLYCHECK).
  RESETRC.
  RECEIVE SYSMOD SELECT(IGXMSGX).
 SET BOUNDARY(TARGET).
  APPLY SELECT(IGXMSGX) ASSEM REDO.
//*
//REFRESH2 EXEC PGM=COMMAND,PARM='MODIFY LLA,REFRESH'
