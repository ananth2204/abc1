//SOMITCWT JOB (????????,????,1439,9999,9999),TAPEDRPV-SOMITCW,
//             CLASS=?,MSGCLASS=?,
//             NOTIFY=SOMITCW,COND=(0,NE)
//HLASMCL  EXEC HLASMCL,PARM.C=(NORENT,OBJECT,NODECK,TERM),
//             PARM.L=NORENT
//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB
//         DD  DISP=SHR,DSN=SYS1.MODGEN
PASS TITLE 'TAPEDRPV - - Drops records that are on COMBINED VOLUMES DS'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     This program reads a sorted copy of the active tapes VOLUMES
*  data set along with the COMBINED VOLUMES data set.  Any record
*  that is in the sorted copy of the regional data set that is not
*  in the corresponding COMBINED are copied to replace the VOLUMES
*  data set.  Records that have been copied to and exist in the
*  COMBINED data set is not copied, so they are dropped from
*  regional data sets.
*
*     Sample JCL:
*
* //*
* //* TAPEDRPV drops records in the VOLUMES data sets that have been
* //* copied to the COMBINED data sets.  It copies the regional data
* //* set to a backup data set, then copies it back dropping any
* //* records with the same volser, and an equal or higher create date.
* //*
* //* This JOB then compares the COMBINED VOLUMES data set to only
* //* copy records to the regional data sets that have NOT already
* //* been moved to the COMBINED data sets.
* //*
* //* VOLUMES data set processing is first half of following JCL
* //*
* //VOLSORT EXEC PGM=SORT,RD=R
* //SYSOUT   DD  SYSOUT=*
*  SORT FIELDS=(1,171,CH,A)  Sort entire record
*  SUM FIELDS=(1,44)         Drops records duplicated in columns 1-44
* //SORTIN   DD  DISP=OLD,DSN=????.TAPES.????????.VOLUMES
* //SORTOUT  DD  DISP=(,CATLG,DELETE),
* //*            DSN=????.TAPES.????????.VOLSUM(+1),
* //             UNIT=SYSDA,SPACE=(TRK,(15,15),RLSE),
* //             DCB=$,RECFM=FB,LRECL=171
* //SORTWK01 DD UNIT=SYSDA,SPACE=(CYL,(1,1))
* //SORTWK02 DD UNIT=SYSDA,SPACE=(CYL,(1,1))
* //SORTWK03 DD UNIT=SYSDA,SPACE=(CYL,(1,1))
* //*
* //VOLDROP EXEC PGM=TAPEDRPV,RD=R
* //REGIONAL DD  DISP=SHR,DSN=????.TAPES.????????.VOLSUM(+1)  Compared
* //COMBINED DD  DISP=SHR,DSN=????.TAPES.COMBINED.VOLUMES     Compared
* //REPLACE  DD  DISP=OLD,DSN=????.TAPES.????????.VOLUMES     Replaced
* //*
* //* DATASETS data set processing follows
* //*
* //DSSORT  EXEC PGM=SORT,RD=R
* //SYSOUT   DD  SYSOUT=*
*  SORT FIELDS=(1,171,CH,A)  Sort entire record
*  SUM FIELDS=(1,44)         Drops records duplicated in columns 1-44
* //SORTIN   DD  DISP=OLD,DSN=????.TAPES.????????.DATASETS
* //SORTOUT  DD  DISP=(,CATLG,DELETE),
* //             DSN=????.TAPES.????????.DS-SUM(+1),
* //             UNIT=SYSDA,SPACE=(TRK,(15,15),RLSE),
* //             DCB=$,RECFM=FB,LRECL=171
* //SORTWK01 DD UNIT=SYSDA,SPACE=(CYL,(1,1))
* //SORTWK02 DD UNIT=SYSDA,SPACE=(CYL,(1,1))
* //SORTWK03 DD UNIT=SYSDA,SPACE=(CYL,(1,1))
* //*
* //DSDROP  EXEC PGM=TAPEDRPV,RD=R
* //REGIONAL DD  DISP=SHR,DSN=????.TAPES.????????.DS-SUM(+1)  Compared
* //COMBINED DD  DISP=SHR,DSN=????.TAPES.COMBINED.DATASETS    Compared
* //REPLACE  DD  DISP=OLD,DSN=????.TAPES.????????.DATASETS    Replaced
*
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
TAPEDRPV CSECT ,
TAPEDRPV AMODE 24                 Addressing mode of 24 for GET MACRO
TAPEDRPV RMODE 24                 Residency mode of 24 because of AMODE
         USING *,R15              Set temporary base register
         SAVE  (14,12),,'TAPEDRPV.&SYSDATE..&SYSTIME' Save Registers
         DROP  R15                Drop the temporary base register
         LR    R12,R15            Load the program's base register
         USING TAPEDRPV,R12       Give the assembler the new base
* Initialize
         LA    R0,WORKSIZE        Load work area size for GETMAIN
         GETMAIN R,LV=(0)         Get storage for work space
         XC    0(CLEARSIZ,R1),0(R1)  Clear SAVEAREA in DSECT
         ST    R1,8(,R13)         Connect old and new save areas
         ST    R13,4(,R1)         Connect old and new save areas
         LR    R13,R1             Connect old and new save areas
         USING SAVEAREA,R13       Tell assembler that R13 is save area
* OPEN
         OPEN  (REGIONAL,INPUT)   Open the local sorted input file
         GET   REGIONAL           Get the first record for this LPAR
         LR    R11,R1             Save the first record address
         OPEN  (COMBINED,INPUT)   Open the COMBINED sorted input file
         GET   COMBINED           Get the first record for all LPARs
         LR    R10,R1             Save the first record address
         OPEN  (REPLACE,OUTPUT)   Open the rewrite output FB data file
         CLI   0(R11),X'40'       See if any volser
         BH    COMPAREV           Is a volser, must not be header
         PUT   REPLACE,(R11)      Is not volser, write the header
         GET   REGIONAL           Get another REGIONAL record
         LR    R11,R1             Save the first record address
* Main loop follows
COMPAREV DS    0H
         CLC   0(6,R11),0(R10)    See if same volume serial number
         BH    GETCOMB            REGIONAL vol too high, get next COMB.
         BL    WRITE              Less than COMBINED, go copy
*        BE    COMPARED           Duplicate VOL, go check date of Vol.
COMPARED DS    0H
         CLC   7(26,R11),7(R10)   See if a duplicate Date and File Seq.
         BNH   GETREG             Same or lower date, skip copy
*        BH    GETCOMB            REGIONAL date higher, get next COMB.
GETCOMB  DS    0H
         GET   COMBINED           Get COMBINED until REGIONAL is equal
         LR    R10,R1             Save the record address
         B     COMPAREV           Go compare next volume input record
WRITE    DS    0H
         PUT   REPLACE,(R11)      Put the current REGIONAL record
GETREG   DS    0H
         GET   REGIONAL           Get next record or take EODAD exit
         LR    R11,R1             Save the first record address
         B     COMPAREV           Go compare next volume input record
* End-Of-Data routines follow
EODCOMB  DS    0H
         TM    REPLACE+DCBOFLGS-IHADCB,DCBOFOPN  Insure output opened
         BZ    ABEND1             Abend because COMBINED was empty
PUTLOOP  DS    0H
         PUT   REPLACE,(R11)      Put the current REGIONAL record
         GET   REGIONAL           Get next record or take EODAD exit
         LR    R11,R1             Save the first record address
         B     PUTLOOP            Return to write the new record
EODREG   DS    0H
         TM    REPLACE+DCBOFLGS-IHADCB,DCBOFOPN  Insure output opened
         BZ    ABEND2             Abend because REGIONAL was empty
         CLOSE REPLACE            Close the OUTPUT data set
         CLOSE REGIONAL           Close the regional data set
         CLOSE COMBINED           Close the combined data set
         LA    R0,WORKSIZE        Load work area size for FREEMAIN
         LR    R1,R13             Save work area location for FREEMAIN
         L     R13,4(,R13)        Restore caller's save area address
         FREEMAIN R,LV=(0),A=(1)  Free work area's storage
         RETURN (14,12),RC=(15)   Return to caller with FREEMAIN retcde
*
* Abend routines follow
ABEND1   DS   0H
         WTO  'COMBINED input data set is empty',ROUTCDE=11
         B    ABEND               Go abend
ABEND2   DS   0H
         WTO  'REGIONAL input data set is empty',ROUTCDE=11
*        B    ABEND               Go abend
ABEND    DS   0H
         WTO  'TAPEDRPV will abend',ROUTCDE=11
         WTO  'The output data set was not opened',ROUTCDE=11
         ABEND 1                  Abend without a dump
*
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Constants
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         LTORG ,                  If any literals, put them here
*
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DATA CONTROL BLOCKS FOLLOW
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
REGIONAL DCB   DDNAME=REGIONAL,DSORG=PS,MACRF=GL,EODAD=EODREG,         +
               RECFM=FB,LRECL=171
COMBINED DCB   DDNAME=COMBINED,DSORG=PS,MACRF=GL,EODAD=EODCOMB,        +
               RECFM=FB,LRECL=171
REPLACE  DCB   DDNAME=REPLACE,DSORG=PS,MACRF=PM,RECFM=FB,LRECL=171
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DSECTs Follow
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
SAVEAREA DSECT ,
         DS    9D                 Register save area
CLEARSIZ EQU   *-SAVEAREA
WORKSIZE EQU   *-SAVEAREA
         SPACE 1
         DCBD  DSORG=PS,DEVD=DA   DCB mapping Dsect IHADCB
         SPACE 1
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     REGISTER EQUATES
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
R0       EQU   0                  Register equate for register 0
R1       EQU   1                  Register equate for register 1
R2       EQU   2                  Register equate for register 2
R3       EQU   3                  Register equate for register 3
R4       EQU   4                  Register equate for register 4
R5       EQU   5                  Register equate for register 5
R6       EQU   6                  Register equate for register 6
R7       EQU   7                  Register equate for register 7
R8       EQU   8                  Register equate for register 8
R9       EQU   9                  Register equate for register 9
R10      EQU   10                 Register equate for register 10
R11      EQU   11                 Register equate for register 11
R12      EQU   12                 Register equate for register 12
R13      EQU   13                 Register equate for register 13
R14      EQU   14                 Register equate for register 14
R15      EQU   15                 Register equate for register 15
         END   ,                  The end of the program
//L.SYSLMOD DD DSN=????.LOAD????,DISP=SHR,SPACE=   ,
//*          UNIT=3390,VOL=SER=------
   NAME TAPEDRPV(R)
