//SOMITCWS JOB (????????,????,1439,9999,9999),SETWHEN-SOMITCW,
//             CLASS=?,MSGCLASS=?,
//             NOTIFY=SOMITCW,COND=(0,NE)
//HLASMCL  EXEC HLASMCL,PARM.C=(RENT,OBJECT,NODECK,TERM),
//             PARM.L=RENT
//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB
//         DD  DISP=SHR,DSN=SYS1.MODGEN or SYS1.AMODGEN
//         DD  DISP=SHR,DSN=????.SORC????
PASS TITLE 'SETWHEN - - - Set Day, Night, Week-end indicator'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*    MPF exits IEF378I, IEF450I, and IEF453I need to know if an
*  abend or JCL error occurred during nightly or week-end
*  processing to know whether to ignore, send E-Mail, or send
*  a Cell-Phone Text-message.  This program updates one byte
*  in the area pointed to by CVTUSER to indicate D, N, or W.
*
*     Sample JCL:
*
* //xxxxxxxS JOB (xxxxxxxx,xxxx,1439,9999,9999),SETWHENJ-xxxxxxxx,
* //         CLASS=x,MSGCLASS=x,
* //         NOTIFY=&SYSUID,COND=(0,NE)
* //SETWHEN EXEC PGM=SETWHEN,PARM=D
* //SYSUDUMP DD  SYSOUT=*
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
SETWHEN  CSECT ,
SETWHEN  AMODE 31                 Addressing mode of 31
SETWHEN  RMODE ANY                Residency mode of anywhere
         USING *,R15              Set temporary base register
         SAVE  (14,12),,'SETWHEN.&SYSDATE..&SYSTIME' Save Registers
         DROP  R15                Drop the temporary base register
         LA    R11,0(,R1)         Save the PARM register
         LR    R12,R15            Load the program's base register
         USING SETWHEN,R12        Give the assembler the new base
         LA    R0,SAVESIZE        Load reg. save area size for GETMAIN
         GETMAIN R,LV=(0)         Get storage for reg. save area space
         XC    0(SAVESIZE,R1),0(R1)  Clear register save area
         ST    R1,8(,R13)         Connect old and new save areas
         ST    R13,4(,R1)         Connect old and new save areas
         LR    R13,R1             Connect old and new save areas
         USING SAVEAREA,R13       Give assembler register for DSECT
*                                 Save area just for convention, no use
* Find the PARM
         LTR   R11,R11            Insure that there is a PARM list addr
         BZ    NOPARM             No address, go abend because no PARM
         L     R11,0(,R11)        Load the PARM address
         LA    R11,0(,R11)        Strip high-order bit if present
         LTR   R11,R11            Insure that there is a PARM addr
         BZ    NOPARM             No address, go abend because no PARM
         CLI   1(R11),1           Insure that the PARM is one byte
         BNE   NOPARM             Go abend if no valid length PARM
         LA    R11,2(,R11)        Load the address of the PARM byte
*                                 Save area just for convention, no use
* Find CVTUSER area
         L     R10,16             Load the address of the CVT
         USING CVT,R10            Give assembler the CVT mapping
         ICM   R9,B'1111',CVTUSER Load address of the CVT user area
         USING XCVTUSER,R9        Give assembler the CVTUSER mapping
         BNZ   GOTUSER            Have CVTUSER, skip getting a new one
*    Create CVTUSER if needed ( GETMAIN, init, chain )
         MODESET KEY=ZERO         Switch to key zero
   GETMAIN RU,LV=XCVTUSIZ,LOC=BELOW,SP=245 Get 48 byte CVTUSER SQA area
*                                 CSA would make more sense than SQA,
*                                 but someday I may need fixed storage
         LR    R9,R1              Save address of storage gotten
         USING XCVTUSER,R9        Tell assembler about dsect
         XC    XCVTUSER(XCVTUSIZ),XCVTUSER  Clear CVTUSER pointed area
         MVC   XCVTUEYE,CVTUSER1  Move 'CVTUSERn' to CVTUSER area
         SLR   R8,R8              Clear a register for the 'CS' inst.
* CS - If R8 and CVTUSER are equal, then R9 is stored in CVTUSER
* CS - If R8 and CVTUSER are not equal, then CVTUSER is loaded to R8
         CS    R8,R9,CVTUSER      Set CVTUSER address in CVT
         DROP  R10                Don't need pointer to CVT anymore
         BE    NEWUSER            Got CVTUSER now, go back to main line
* Some other program put CVTUSER in CVT first, free the new one
         FREEMAIN RU,LV=XCVTUSIZ,A=(R9),SP=245   Free extra SQA storage
         LR    R9,R8              Use the first CVTUSER area address
*        B     NEWUSER            Got CVTUSER now, now check it
NEWUSER  DS    0H
         MODESET KEY=NZERO        Go back to key 8
GOTUSER  DS    0H
         CLC   XCVTUEYE,CVTUSER1  See if the CVTUSER area is mine
         BNE   BADUSER            If someone else has CVTUSER, go tell
*
* Update XCVTWHEN in memory
*
UPDATE   DS    0H
         MODESET KEY=ZERO         Switch to key zero
         MVC   XCVTWHEN,0(R11)    Set D, N, or W
         MODESET KEY=NZERO        Switch to key eight
         LA    R0,SAVESIZE        Load work area size for FREEMAIN
         LR    R1,R13             Save work area location for FREEMAIN
         L     R13,4(,R13)        Restore caller's save area address
         FREEMAIN R,LV=(0),A=(1)  Free work area's storage
         RETURN (14,12),RC=(15)   Return to caller with FREEMAIN retcde
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* Error routines
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
NOPARM   DS    0H
         WTO 'SETWHEN - PARM is missing or invalid',ROUTCDE=11
         WTO 'SETWHEN - valid PARMs are D, N, and W',ROUTCDE=11
         WTO 'SETWHEN - Program is abending',ROUTCDE=11
         ABEND 123                Abend without a dump
*
BADUSER  DS    0H
         WTO  'SETWHEN - CVTUSER area not valid',ROUTCDE=11
         WTO  'SETWHEN - Some other software must be using',ROUTCDE=11
         WTO  'SETWHEN - Program is abending',ROUTCDE=11
         ABEND 234                Abend without a dump
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* Constants
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         DS    0D                 Align Constants area
*
* The X'1' is the DSECT version number
CVTUSER1 DC    CL7'CVTUSER',XL1'1'  Constant to check CVTUSER
*
         LTORG ,                  In case someone adds literals
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DSECTs Follow
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
SAVEAREA DSECT ,
         DS    9D                 Register save area
SAVESIZE EQU   *-SAVEAREA
*
         COPY CVTUSER             Copy the CVTUSER area DSECT
* XCVTUSER DSECT ,
* XCVTUEYE DS    CL8              7 bytes of 'CVTUSER' and 1 byte X'01'
* XCVTUVOL DS    XL6              VOLSER from message used by IEC507D
* XCVTWHEN DS    CL1              D-N-W Day, Night, Week-end indicator
*          DS    XL1              Space available for expansion
* XCVTUTIM DS    XL6              CYYDDDHHMMSS Century, Year,Day, Hour,
* *                               Minute, and Second, used by IOS000I
*          DS    XL2              Space available for expansion
* XCVTPSWD DS    F                ACF2 LGNIXIT anchor, used by SAVEPSWD
* XCVTJOUR DS    F                DFHJC4508 Journal PRIM or SECO
* XCVTTAPE DS    XL4              TAPE, TAPESAVE, TAPESYNC, & IGXMSGEX
* * TAPESKIP DS    CL6            TAPESKIP was old name for XCVTSKIP
* XCVTSKIP DS    CL6              IEC512I tape vol ser to ignore
*          DS    XL22             Space available for expansion
* XCVTUSIZ EQU   *-XCVTUSER       Length of area pointed to by CVTUSER
*
         CVT   DSECT=YES,LIST=YES Communication Vector Table
*
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     REGISTER EQUATES
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
R0       EQU   0                  Register equate for register 0
R1       EQU   1                  Register equate for register 1
R2       EQU   2                  Register equate for register 2
R3       EQU   3                  Register equate for register 3
R4       EQU   4                  Register equate for register 4
R5       EQU   5                  Register equate for register 5
R6       EQU   6                  Register equate for register 6
R7       EQU   7                  Register equate for register 7
R8       EQU   8                  Register equate for register 8
R9       EQU   9                  Register equate for register 9
R10      EQU   10                 Register equate for register 10
R11      EQU   11                 Register equate for register 11
R12      EQU   12                 Register equate for register 12
R13      EQU   13                 Register equate for register 13
R14      EQU   14                 Register equate for register 14
R15      EQU   15                 Register equate for register 15
         END   ,                  The end of the program
//L.SYSLMOD DD DSN=????.LOAD????,DISP=SHR,SPACE=   ,
//*          UNIT=3390,VOL=SER=------
   SETCODE AC(1)
   NAME SETWHEN
