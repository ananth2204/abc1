//SOMITCWT JOB (????????,????,1439,9999,9999),TAPE-SOMITCW,
//             CLASS=?,MSGCLASS=?,
//             NOTIFY=SOMITCW,COND=(0,NE)
//HLASMCL  EXEC HLASMCL,PARM.C=(RENT,OBJECT,NODECK,TERM),
//             PARM.L='RENT,AC=1'
//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB
//         DD  DISP=SHR,DSN=????.SORC????
//         DD  DISP=SHR,DSN=SYS1.MODGEN or SSY1.AMODGEN
PASS TITLE 'TAPE - - - Mounts tapes in Flex-ES'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     This program accepts MODIFY operator commandsd
*  and sends mount CCWs to tape drives to give Flex-ES
*  the file specs for a tape file.
*
*  The format of the console modify command is:
*  f tape,cccu,volser
*  To request that tape N00321 be mounted on tape
*  drive 415, the command would be:
*  f tape,0415,A00321 or
*  f tape,415,A00321
*
*  Tape vol sers starting with an "A" are in /tapeA
*  Tape vol sers starting with an "B" are in /tapeB
*  All other tapes are in file system /tapeC
*
*  The first three bytes of the volser is also the
*  directory name for the tapes.
*  Tape TX1234 would have file spec:
*  /tapeC/TX1/TX1234.aws
*
*  Warning...  If we ever convert to four digit
* dynamic tape UCBs above the line, then IOSLOOK
* should be converted to UCBLOOK or UCBSCAN with
* appropriate PIN/NOPIN and UCBPIN UNPIN.
*
*     Sample JCL:
*
* //TAPE    EXEC PGM=TAPE,TIME=1439
* //* No required DD statements so running as a sub-system is easier
* //STCLOCK  DD  DISP=OLD,DSN='Only one TAPE STC can run at a time',
* //             VOL=REF=SYS1.LINKLIB
*
*     Sample console start command:
*
* s tape,sub=mstr
*
*     Sample stop command:
*
* p tape
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
         PRINT ON,GEN,DATA        Want to see all
TAPE     CSECT ,
TAPE     AMODE 24                 Addressing mode of 24 for EXCP MACRO
TAPE     RMODE 24                 Residency mode of 24 because of AMODE
         USING *,R15              Set temporary base register
         SAVE  (14,12),,'TAPE.&SYSDATE..&SYSTIME' Save Registers
         DROP  R15                Drop the temporary base register
         LR    R12,R15            Load the program's base register
         USING TAPE,R12           Give the assembler the new base
         LA    R0,SAVESIZE        Load work area size for GETMAIN
         GETMAIN RU,LV=(0)        Get storage for work space
         XC    0(CLEARSIZ,R1),0(R1)  Clear SAVEAREA in DSECT
         ST    R1,8(,R13)         Connect old and new save areas
         ST    R13,4(,R1)         Connect old and new save areas
         LR    R13,R1             Connect old and new save areas
         USING SAVEAREA,R13
*
*    Fill in EXTRACT, DCB, IOB, and CCW fields
         MVC   EXTRACT(DUMLEN),DUMEXT  Move EXTRACT MACRO list
         MVC   DEBVT(DEBLEN),DDEBVT    Copy DEB template
         LA    R11,DCB            Load address of DCB
         STCM  R11,B'0111',DEBDCB Store DCB address in DEB
         LA    R11,DEBVT               Load address of DEB Vector table
         STCM  R11,B'0111',DEBIOVT     Store vector table addr. in DEB
         MVC   DCB(DCBLEN),DDCB   Copy DEB template
         LA    R11,DEB                 Load address of DEB
         STCM  R11,B'0111',DCBDEB Store DEB address in DCB
         MVC   IOB(DIOBLEN),DIOB  Copy IOB templates
         LA    R11,ECB            Load address of Event Contr.Blk
         STCM  R11,B'0111',IOBECB Store ECB address in IOB
         LA    R11,IOBCCW         Load addr.of Chan. Command Word
         ST    R11,IOBCCWA        Store CCW address in IOB
         LA    R11,DCB            Load address of Data Control Block
         ST    R11,IOBDCB         Store DCB address in IOB
         LA    R11,MOUNT          Load address of mount command
         STCM  R11,B'0111',IOBCCW+1 Store mount command address
         MVC   MOUNT,DMOUNT       Copy mount command template
         EXTRACT TIOT,'S',FIELDS=(TIOT,COMM),MF=(E,EXTRACT)
         L     R11,TIOT           Load the address of the STC name
*        ENQ   (QNAME,(R11),E,8,SYSTEM), See if STC TAPE active      X
*              RET=USE,                  See if STC TAPE active      X
*              MF=(E,(R??))              See if STC TAPE active
*        LTR   R10,R15            See if TAPE already running
*        BNZ   ERRORDUP           If TAPE already running, get out
         L     R11,COMM           Load address of Communication Area
* Communications area (mapped by IEZCOM)
         USING COMLIST,R11        Tie IEZCOM to R10
*
         ICM   R10,B'1111',COMCIBPT  Load addr.of Command Input Buffer
         USING CIBLIST,R10        Tie IEZCIB to R10
         BZ    CIBSET             No start CIB, go allow Modify CIBs
         WTO   'TAPE - Initial CIB',ROUTCDE=11
         BAL   R9,DISPCIB         Display the CID to the console
* CIBSTART EQU   X'04' -  Command code for START
         CLI   CIBVERB,CIBSTART   See if initial CIB from start command
         BNE   CIBSET             Not known CIB, go ignore it for now
         QEDIT ORIGIN=COMCIBPT,BLOCK=(10)  Free the start CIB
CIBSET   DS    0H
         QEDIT ORIGIN=COMCIBPT,CIBCTR=34  Allow 34 pending Modifies
CIBFIND  DS    0H
         ICM   R10,B'1111',COMCIBPT  Load addr.of Command Input Buffer
         BZ    WAIT               No CIB found, go wait for next POST
*
* CIBSTOP  EQU   X'40' -  Command code for STOP
* CIBMODFY EQU   X'44' -  Command code for MODIFY
         CLI   CIBVERB,CIBSTOP    See if a Stop console command
         BE    EOJ                Operator issue Stop, so end-of-job
         CLI   CIBVERB,CIBMODFY   See if a Modify console command
         BE    MODIFY             Got modify, go process it
         WTO   'TAPE - Following unknown CIB will be freed',ROUTCDE=11
         BAL   R9,DISPCIB         Unknown CIB, perform display for it
         QEDIT ORIGIN=COMCIBPT,BLOCK=(10)  Free the unknown CIB
         B     CIBFIND            Go back to find another CIB
*
MODIFY   DC    0H
         CLI   CIBDATLN+1,10      See if three byte unit address
         BE    MODTHREE           Go process three byte unit address
         CLI   CIBDATLN+1,11      See if four byte unit address
         BE    MODFOUR            Go process four byte unit address
         BNE   BADDATA1           Invalid data, go display error
MODTHREE DS    0H
         CLI   CIBDATA+3,C','     See if three byte tape drive number
         BNE   BADDATA2           Invalid data, go display error
         MVI   UNIT,C'0'          Add leading zero to unit address
         MVC   UNIT+1(3),CIBDATA  Move in rest of unit address
         MVC   VOLSER,CIBDATA+4   Move volser for processing
         B     UCBFIND            Go find UCB for tape drive
*
MODFOUR  DS    0H
         CLI   CIBDATA+4,C','     See if four byte tape drive number
         BNE   BADDATA3           Invalid data, go display error
         MVC   UNIT,CIBDATA       Move in the unit address
         MVC   VOLSER,CIBDATA+5   Move volser for processing
UCBFIND  DS    0H
         OC    UNIT,UPCASE        Upper case the tape address
         OC    VOLSER,UPCASE      Upper case the volume serial number
         TR    UNIT,BINTABLE-192  Translate display hex to real hex
         PACK  DWORK(3),UNIT(5)   Translate display hex to real hex
         SLR   R6,R6              Clear work register
         ICM   R6,B'0011',DWORK   Load tape device address
         MODESET MODE=SUP         Switch to supevisor mode for IOSLOOK
         AL    R13,F8             IOSLOOK uses strange save area
         IOSLOOK DEV=(6),UCB=(7)  Use device address to find UCB addr.
         SL    R13,F8             IOSLOOK uses strange save area
* R15 will have the return code of zero or four
         LR    R6,R15             Save IOSLOOK ret.code before MODESET
         MODESET MODE=PROB        Switch back to problem state
         LTR   R6,R6              Check the IOSLOOK return code
         BNZ   UCBERROR           Go print error if IOSLOOK failed
         WTO   'TAPE - IOSLOOK for UCB worked...',ROUTCDE=11
* R7 contains the address of the UCB
         QEDIT ORIGIN=COMCIBPT,BLOCK=(10)  Free the Modify CIB
         B     GOMOUNT            UCB and VOLSER found, go mount tape
*        B     CIBFIND            Go find another CIB
*
* Wait for next Modify console command
WAIT     DS    0H
         L     R8,COMECBPT        Load address of COMM. ECB pointer
         WAIT  ECB=(8)            Wait for a Modify or Stop
         B     CIBFIND
*
DISPCIB  DS    0H
         SLR   R8,R8              Clear a counter register
         IC    R8,CIBLEN          Load number double words in CIB
         LR    R7,R10             Load address of start of CIB
         LA    R6,0               Set start of CIB address
         MVC   DISPWTO,DISPDUM    Move WTO template to work area
DISPCIB2 DS    0H
         CVD   R6,DWORK           Convert binary displacement to dec.
         UNPK  DISPWTO+8(3),DWORK+6(2) Put CIB displacement in WTO
         MVC   DWORK(8),0(R7)     Move data to convert to display
         OI    DISPWTO+10,X'F0'   Correct the sign
         UNPK  DISPWTO+12(9),DWORK(5) Unpack first part of double word
         MVI   DISPWTO+20,X'40'   Set extra byte to a space
         UNPK  DISPWTO+21(9),DWORK+4(5) Unpack rest of double word
         MVI   DISPWTO+29,X'4B'   Set extra byte to a resiod
         TR    DISPWTO+12(8),HEXTABLE-240 Change X'FA'-'FF' to C'A'-'F'
         TR    DISPWTO+21(8),HEXTABLE-240 Change X'FA'-'FF' to C'A'-'F'
         WTO   MF=(E,DISPWTO)     Display the CIB data
         LA    R6,8(,R6)          Bump to next displacement
         LA    R7,8(,R7)          Bump to next displacement
         BCTR  R8,0               Subtract number of doublewords to do
         LTR   R8,R8              See if all double words displayed
         BNZ   DISPCIB2           Go back to display next double word
         BR    R9                 Return to main-line code
*
GOMOUNT  DS    0H
         STCM  R7,B'0111',DEBUCB  Store UCB address in the DEB
         MVC   MOUNT1,VOLSER      Complete file system name for mount
         MVC   MOUNT3,VOLSER      Move in directory name for mount
         MVC   MOUNT6,VOLSER      Move in vol ser for mount
         CLI   MOUNT1,C'A'        Should file system name be tapeA?
         BE    VOLFIN             If tapeA, file system resolved
         CLI   MOUNT1,C'B'        Should file system name be tapeB?
         BE    VOLFIN             If tapeB, file system resolved
         MVI   MOUNT1,C'C'        Not tapeA or tapeB, set tapeC
VOLFIN   DS 0H
*
* mount tape
         XC    ECB,ECB            Clear left over garbage in ECB
         MODESET KEY=ZERO         PSW Key 0 for EXCP with own DEB
         WTO   'MODESET zero done',ROUTCDE=11
         EXCP  IOB                Issue automountccw
         WTO   'EXCP for IOB done',ROUTCDE=11
         TM    ECB,ECBPOST        Was ECB posted?
         BO    NOWAIT             Already posted, weird, tape may be
* offline or something else to cause OS/390 to not have outstanding
* I/O to the tape drive which allowed the mount to complete.
         MODESET MODE=SUP         Switch to supervisor mode
         L     R1,4(,R13)         Save old register 13 from IOSINTRP
         IOSINTRP UCB=(R7)        Interrupt old tape I/O for new
         MODESET MODE=PROB        Switch to problem state
*        SYSx.MVS220.SOURCE(IEE3103D)
*        SYS1.MODGEN(IOSINTRP)
         TM    ECB,ECBPOST        Was ECB posted?
         BO    NOWAIT             Posted because IOSINTRP cleared I/O
         WTO   'WAIT for ECB started',ROUTCDE=11
         WAIT  ECB=ECB            Wait for mount to complete
         WTO   'WAIT for ECB done',ROUTCDE=11
NOWAIT   DS    0H
         MODESET KEY=NZERO        Switch back to non-key zero ( 8 )
         WTO   'MODESET NZERO done',ROUTCDE=11
         B     WAIT               Go back and wait for next modify
*
EOJ      DS    0H
         WTO   'TAPE - STOP console command accepted',routcde=11
         BAL   R9,DISPCIB         Perform display for STOP CIB
         QEDIT ORIGIN=COMCIBPT,BLOCK=(10)  Free the stop CIB
EOJQUICK DS    0H
         LA    R0,SAVESIZE        Load work area size for FREEMAIN
         LR    R1,R13             Save work area location for FREEMAIN
         L     R13,4(,R13)        Restore caller's save area address
         FREEMAIN RU,LV=(0),A=(1) Free work area's storage
         RETURN (14,12),RC=(15)   Return to caller with FREEMAIN retcde
*
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Error routines
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
ERRORDUP DS    0H
         WTO   'TAPE - STC is already running, will exit',ROUTCDE=11
         B     EOJQUICK           Exit ptogram quickly
*
UCBERROR DS    0H
         WTO   'TAPE - UCB address not found by IOSLOOK',ROUTCDE=11
         B     BADDATA            Go free the bad CIB
*
BADDATA1 DS    0H
         WTO   'TAPE - Following CIB has bad data length',ROUTCDE=11
         B     BADDATA            Go free the bad CIB
*
BADDATA2 DS    0H
        WTO   'TAPE - Following CIB has no comma xxx,xxxxxx',ROUTCDE=11
         B     BADDATA            Go free the bad CIB
*
BADDATA3 DS    0H
       WTO   'TAPE - Following CIB has no comma xxxx,xxxxxx',ROUTCDE=11
         WTO   'TAPE - or volume serial number is too long',ROUTCDE=11
*        B     BADDATA            Go free the bad CIB
BADDATA  DS    0H
         BAL   R9,DISPCIB         Perform display for invalid data CIB
         QEDIT ORIGIN=COMCIBPT,BLOCK=(10)  Free the invalid Modify CIB
         WTO   'Expected format is: F TAPE,ccu,volser',ROUTCDE=11
         B     CIBFIND            Go find another CIB
*
BADUSER  DS    0H
         WTO   'Sub-System TAPE found a bad CVTUSER area',ROUTCDE=11
         WTO   'Scratch tape numbers cannot be determined',ROUTCDE=11
         B     CIBFIND            Go check for another CIB
*
BADBITS  DS    0H
         WTO   'Sub-System TAPE found a bad TAPEBITS area',ROUTCDE=11
         WTO   'Scratch tape numbers cannot be determined',ROUTCDE=11
         B     CIBFIND            Go check for another CIB
*
         DROP  R10                Don't need CIB addressibilty anymore
         DROP  R11                Don't need COMM addressibilty anymore
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Constants and model control blocks
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
         DS    0D                Align to a double word
* QNAME    DC    CL8'ONE-STC '     ENQ major name
*
* The X'1' is the DSECT version number
CCVTUSER DC    CL7'CVTUSER',XL1'1'  Constant to check CVTUSER
CTAPEBIT DC    CL7'TAPEBIT',XL1'1'  Constant to check TAPEBIT
*
BINTABLE DC    XL64'0'            Display hex to hex table
         ORG   BINTABLE+1        Set location counter to letters ABCDEF
         DC    XL6'0A0B0C0D0E0F'  Constant for letters ABCDEF
         ORG   ,                  Reset location counter
         ORG   BINTABLE+48        Set location counter to digits 0-9
         DC    XL10'00010203040506070809'  Set number values
         ORG   ,                  Reset location counter
*
HEXTABLE DC    CL16'0123456789ABCDEF'  Display hex data trans. table
*
* The TAPETABL is used to find a byte with a free bit
* and the first bit free within the byte with one TRT
* instruction for each 256 bytes of the TAPEBITS table.
TAPETABL DC    128X'80'           Tape bit table first 128 bytes
         DC     64X'40'           Tape bit table first  64 bytes
         DC     32X'20'           Tape bit table first  32 bytes
         DC     16X'10'           Tape bit table first  16 bytes
         DC      8X'08'           Tape bit table first   8 bytes
         DC      4X'04'           Tape bit table first   4 bytes
         DC      2X'02'           Tape bit table first   2 bytes
         DC       X'01'           Tape bit table first   1 byte
         DC       X'00'           Tape bit table first   1 byte
*
F8       DC    F'8'               Save area offset for IOSLOOK
*
DISPDUM  WTO   'CIB+000 XXXXXXXX XXXXXXXX.',ROUTCDE=11,MF=L
DISPLEN  EQU   *-DISPDUM          Length of WTO
*
UPCASE   DC    XL6'404040404040'  Data to upper case unit and volser
*
DUMEXT   EXTRACT *-*,'S',FIELDS=(TIOT,COMM),MF=L  Model EXTRACT
DUMLEN   EQU     *-DUMEXT         Calculate length of EXTRACT
*
* APPEND   DC    X'0B0E'          Dummy I/O appendage routine BSM 0,R14
*
* DEB template
         DS    0D                 Insure alignment
DDEBVT   DS    0XL20              Data Extent Appendage Vector Table
         DC    A(PSARET-PSA)  0   I/O appendage end-of-extent
         DC    A(PSARET-PSA)  4   I/O appendage Start I/O
         DC    A(PSARET-PSA)  8   I/O appendage Pgm.Contl.Intr.
         DC    A(PSARET-PSA) 12   I/O appendage Channel end
         DC    A(PSARET-PSA) 16   I/O appendage Abnormal end
DDEBPREF DS    0XL16              DEB Prefix table
         DC    3A(0)       20     Reserved?
         DC    XL1'06'     32     Number of double-words in DEB ( 06 )
         DC    XL1'00'     33     Unknown Access method type
         DC    H'0'        34     Offset in DEB table for this DEB
DDEB     DS    0XL36
         DC    A(0)        36     Address of TCB for this DCB
         DC    AL1(4)      40     4 bytes in Acc.Meth.Dependent section
         DC    AL3(0)      41     Address of next DEB in chain
         DC    X'C0000000' 44     DEBDISP new data set
         DC    XL1'30'     48     DEBOPATB Data set positioning leave
         DC    AL3(0)      49     Addr.of first IOB in purge chain
         DC    A(0)        52     Pointer to related request
         DC    A(0)        56     Address of locate parameter list
         DC    XL1'0F'     60     Indicate a DEB
DDEBDCB  DC    AL3(*-*)    61     Address of DCB or ACB
         DC    AL1(2)      64     Half-words in DEB dev.dependent sect.
DDEBIOVT DC    AL3(*-*)    65     Addr. I/O app. vector table DEBVT
DDEBDEV  DS    0XL4               Device dependent secion
         DC    XL1'00'     68     Tape Modeset   ? X'D3' ?
DDEBUCB  DC    AL3(*-*)    69     Address of UCB
         DC    F'0'        72     ?
         DC    F'0'        76     ?
         DC    F'0'        80     ?
DEBLEN   EQU   *-DDEBVT    84     Length of the DEB
*
* DCB template
DDCB     DS    0D
         DC    10F'0'             40 byte unused for EXCP foundation
         DC    H'0'               TIOT offset
         DC    B'11010000'        MACRF byte 1
* DCBMRECP EQU   DCBBIT0        EXECUTE CHANNEL PROGRAM (EXCP) ---
* DCBMRFE  EQU   DCBBIT1        FOUNDATION EXTENSION IS PRESENT (EXCP)
* DCBMRCI  EQU   DCBBIT3        COMMON INTERFACE (EXCP)
         DC    B'00001000'        MACRF byte 2
* DCBMR5WD EQU   DCBBIT4        FIVE-WORD DEVICE INTERFACE (EXCP)
         DC    A(*-*)             Will be the address of the DEB
         DC    X'10000000'        OFLGS last I/O operation was a write
*        DC    X'00000000'        OFLGS last I/O operation was read
         DC    5F'0'              5 word EXCP device interface
DCBLEN   EQU   *-DDCB             Length of the DCB
*
* IOB templates
DIOB     DS    0D                 IOB to mount a tape
         DC    XL4'42000000'  0   Command Chaining and nonsequential
* IOBCMDCH EQU   X'40' -   COMMAND CHAINING USED IN CHANNEL PROGRAM
* IOBUNREL EQU   X'02' -   IOB UNRELATED FLAG (I.E., NONSEQUENTIAL)
         DC    XL1'7F'        4   Addr. of expected I/O completion code
DIOBECB  DC    AL3(*-*)       5   Address of the ECB
         DC    D'0'           8   Channel Status Word
DIOBCCWA DC    A(*-*)        16   Address of the Channel Command Words
DIOBDCB  DC    A(*-*)        20   Address of the Data Control Block
         DC    A(0)          24   IOB Restart
         DC    XL4'00010000' 28   Flags and counters
*   Don't know what the bit means.  DEBE had it, so why not use it?
         DC    D'0'          32   Seek address MBBCCHHR ? ? ? ?
DIOBCCW  CCW   X'4B',*-*,X'20',L'DMOUNT  Mount tape CCW
DIOBLEN  EQU   *-DIOB             Size of IOB template
*
DMOUNT   DC    CL21'/tape?/???/??????.aws'  Mount command
MOUNTLEN EQU   *-DMOUNT           Length of mount command
*
         SPACE 3
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DSECTs Follow
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 1
SAVEAREA DSECT ,
         DS    9D                 Register save area
*
ECB      DS    F                  Event Control Block for mount
ECBPOST  EQU   X'40'              Indicator that ECB was posted
*
CLEARSIZ EQU   *-SAVEAREA
*
*
DWORK    DS    D                  Double word work area
*
UNIT     DS    CL4                Tape drive unit address
*
TIOT     DS    F,D                TIOT word and COMM words
COMM     EQU   TIOT+4,8           Address of the Communication area
*
VOLSER   DS    CL6                Tape volume serial to mount
*
EXTRACT  DS    XL(DUMLEN)         EXTRACT list to get TIOT or COMM
*
DISPWTO  DS    XL(DISPLEN)        Display CIB WTO
*
         DS    0D                 Align the following DEB
DEBVT    DS    5F                 Five words DEB vector table
DEBPREF  DS    XL16               DEB Prefix table
DEB      DS    XL(DEBLEN)         Data Extent Block
DEBDCB   EQU   DEBVT+61,3         Address of DCB or ACB
DEBIOVT  EQU   DEBVT+65,3         Addr. I/O app. vector table DDEBVT
DEBUCB   EQU   DEBVT+69,3         Address of UCB
*
         DS    0D                 Align the following DCB
DCB      DS    XL(DCBLEN)         Tape DCB
DCBDEB   EQU   DCB+45,3           DEB address in the DCB
*
         DS    0D                 Align IOB to double word boundary
IOB      DS    XL(DIOBLEN)        Input and Output Block
IOBCSW   EQU   IOB+8,8            Channel Status Word
IOBECB   EQU   IOB+5,3            Address of Event Control Block
IOBCCWA  EQU   IOB+16,4           Address of Channel Command Words
IOBDCB   EQU   IOB+20,4           Address of Data Control Block
IOBCCW   EQU   IOB+40,8           Tape mount CCW
*
MOUNT    DS    XL(MOUNTLEN)       Mount command '/tape?/???/??????.aws'
MOUNT1   EQU   MOUNT+5,1          Last byte of file-system name
MOUNT3   EQU   MOUNT+7,3          First three bytes of tape VolSer
MOUNT6   EQU   MOUNT+11,6         Tape VolSer
*
SAVESIZE EQU   *-SAVEAREA
*
*
         COPY  CVTUSER            User DSECT from ????.SORC????
* XCVTUSER DSECT ,
* XCVTUEYE DS    CL8              7 bytes of 'CVTUSER' and 1 byte X'01'
* XCVTUVOL DS    XL6              VOLSER from message used by IEC507D
*          DS    XL2              Space available for expansion
* XCVTUTIM DS    XL6              CYYDDDHHMMSS Century, Year,Day, Hour,
* *                               Minute, and Second, used by IOS000I
*          DS    XL2              Space available for expansion
* XCVTPSWD DS    F                ACF2 LGNIXIT anchor, used by SAVEPSWD
* XCVTJOUR DS    F                DFHJC4508 Journal PRIM or SECO
* XCVTTAPE DS    XL4              TAPE, TAPESAVE, TAPESYNC, & IGXMSGEX
*          DS    XL12             Space available for expansion
* XCVTUSIZ EQU   *-XCVTUSER       Length of area pointed to by CVTUSER
*
*
TAPEBITS DSECT ,
         COPY  TAPEBITS           Copy TAPEBITS DSECT
* TAPEEYE  DS    D                DSECT eye-catcher CL7'TAPEBIT',XL1'1'
* TAPEOLD  DS    A                Addr of old TAPEBITS record to delete
* TAPESKIP DS    CL6              IEC512I tape vol ser to ignore
* TAPEDISP DS    XL2              Last TAPES byte that had a free bit
* TAPEHIGH DS    XL2              Displacement to return to zero
* TAPEUPD  DS    XL1              Tape bits updated, need writing
* TAPECHAR DS    CL1              First byte of tapes described next
* TAPES    DS    XL12500          Bits for 100,000 tapes ?00000-?99999
* TAPEBIT0 EQU   X'80'            First tape within a byte
* TAPEBIT1 EQU   X'40'            Second tape within a byte
* TAPEBIT2 EQU   X'20'            Third tape within a byte
* TAPEBIT3 EQU   X'10'            Fourth tape within a byte
* TAPEBIT4 EQU   X'08'            Fifth tape within a byte
* TAPEBIT5 EQU   X'04'            Sixth tape within a byte
* TAPEBIT6 EQU   X'02'            Seventh tape within a byte
* TAPEBIT7 EQU   X'01'            Eighth tape within a byte
* TAPELEN  EQU   *-TAPEEYE        Length of TAPEBITS data record
*
         DCBD  DSORG=PS,DEVD=DA   Data Control Block DSECT IHADCB
*
         CVT   DSECT=YES,LIST=YES Communication Vector Table
*
PSA      IHAPSA DSECT=YES         Prefix Storage Area
*
IEZCOM   DSECT ,
         IEZCOM ,                 Communications area
*
* IEZIOB   DSECT ,
*        IEZIOB ,                 Input/Output Block
*
CIBLIST  DSECT ,
         IEZCIB ,                 Command Input Buffer
*
IOCSTUFF DSECT ,
         IECDIOCM ,               I/O Communication area DSECT
*
TAPE     CSECT ,
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     Register Equates
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
R0       EQU   0                  Register equate for register 0
R1       EQU   1                  Register equate for register 1
R2       EQU   2                  Register equate for register 2
R3       EQU   3                  Register equate for register 3
R4       EQU   4                  Register equate for register 4
R5       EQU   5                  Register equate for register 5
R6       EQU   6                  Register equate for register 6
R7       EQU   7                  Register equate for register 7
R8       EQU   8                  Register equate for register 8
R9       EQU   9                  Register equate for register 9
R10      EQU   10                 Register equate for register 10
R11      EQU   11                 Register equate for register 11
R12      EQU   12                 Register equate for register 12
R13      EQU   13                 Register equate for register 13
R14      EQU   14                 Register equate for register 14
R15      EQU   15                 Register equate for register 15
         END   ,                  The end of the program
//L.SYSLMOD DD DSN=????.LOAD????,DISP=SHR,SPACE=   ,
//*          UNIT=3390,VOL=SER=------
   NAME TAPE
