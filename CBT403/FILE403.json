{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011932000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 587860, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE403.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 587860, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 587860, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE403.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\n\\t'", "DS1TRBAL": "b'hB'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\xdd\\x00\\x01\\x02\\xdd\\x00\\x0b\\x00\\x0b'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\"O\\x01\\x02\"O\\x08\\x08\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-08-12T00:00:00", "modifydate": "2002-08-12T08:08:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 450    FILE:  403\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT450.FILE403\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 16 MEMBERS COUNTED; CUMULATIVE SIZE IS 5,101 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   08/12/02    08:08:00    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x17\\x01\\x02!\\x9f\\x01\\x02\"\\x0f\\x10\\x02\\x00Z\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2002-08-07T00:00:00", "modifydate": "2002-08-08T10:02:17", "lines": 90, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "      Notes about this convenient Message Display Facility\n\n\nSometimes, when you are involved in servicing one, or several,\ncomponents of the MVS operating system very often, you might like\na convenient (and very quick) way of displaying the messages from\nthat component, under ISPF.  Then this system is something you can\nuse.\n\nThis system is also very flexible, and the display capability is\nnot limited to IBM messages, but you can make arbitrary members\nof the \"message pds\" and display them anytime, by entering their\n\"member name\" in the UMSG display panel.\n\nThe messages are displayed, using either ISPF Browse, or the REVIEW\nTSO command from File 134 (load modules on File 135) of the CBT Tape.\nThe REXX exec which uses ISPF Browse (in this pds) is member UMSG.\nThe REXX exec which uses the REVIEW TSO command, is member UMSGR.\nThe panel using ISPF Browse, is called MESAJP, and the one using\nREVIEW, is called MESAJP1.  (Sam Golob is responsible for the REVIEW\nadaptation.  Ugur did all the work, though.  It was only a slight\nchange from Ugur's original REXX.  SG)\n\nIf you didn't remember the exact name of the message, you can ask for\na partial message, by using an asterisk as a wild card.  For example,\nif you want to display a list of all ARC**** members in your\nMESAJ.PDS, then type ARC* in the pop-up panel.  (The procedure for\nthe REVIEW adaptation, is that if you got the message id a bit wrong,\nand a blank REVIEW screen pops up, then you can enter the DIR\nsubcommand of REVIEW, to get a pds directory so you can find the\nright message id.)\n\n  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nThis package is very simply constructed, and is also easy to install.\n\nTo install this package, just copy the UMSG and UMSGR execs into your\nSYSPROC or SYSEXEC library for your TSO session.  And copy the two\npanels (member MESAJP, or the MESAJP1 panel if you want to use the\nREVIEW implementation) into a panel library in your ISPPLIB\nconcatenation.  The messages themselves will be put (later) into an\nFB-80 partitioned dataset that you create, which may get to be rather\nlarge, epending on the number of IBM (or other) messages that you may\nwant to load into it.\n\nYou must customize the UMSG and UMSGR execs to point to your message\nlibrary pds (not to my library).  Then you load the message library\npds with the IBM messages (I'll tell you how to do it, below), and\nthen you run the UMSG exec.  The messages library pds is usually\nnamed 'prefix.MESAJ.PDS' , but you can name it anything you want,\nas long as the UMSG or UMSGR execs point to it.\n\nIf you are using the REVIEW command (member UMSGR) to display the\nmessages, then you must install it.  The easiest way to do that, is\nto get CBT Tape File 135 (from www.cbttape.org , or from a CBT Tape)\nand copy every member starting with REV****, and all their aliases,\nto an ISPLLIB or STEPLIB, that is accessible to your TSO session.\n\nI have made an ISPF command table entry, called UMSG (abbreviated\nto 2 characters) to invoke UMSG, so all I have to do, on my system,\nis to type UM on the command line, and press enter.  Then I get\nthe MESAJP panel window, and I enter the member name of the message\nI want to look up.  It is very simple to use.\n\nUnfortunately, the actual IBM messages are copyrighted, and their\nexplanations may also change once in a while.  So we can not\ninclude the actual IBM messages in this file, but we will tell you\nhow you can get them, if you have Bookmanager installed under MVS.\n\nJust look at the $MESAJ2 member in this pds, and you will see how\nto generate the members of your 'userid.MESAJ.PDS', for whichever\nmessages that you want to extract from Bookmanager.\n\nWe have included several sample (non-IBM) messages to include in your\n'userid.MESAJ.PDS' so you can test how the system works.  These are\nin the member (of this pds) called SAMPMSGS.  The member is a pds, in\nIEBUPDTE or PDSLOAD unloaded format, and contains (at least) a member\ncalled ABEND (displaying most of the common ABEND codes) and REVIEW\n(which is a HELP member for the REVIEW TSO command).  If you also\ninclude these members in your 'userid.MESAJ.PDS' dataset, then you\ncan access them by entering ABEND or REVIEW in the UMSG panel.\n\nBest of luck to all of you.....\n\n\n   Ugur Cilesiz\n   Sam Golob                   August 08, 2002\n\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$MESAJ1": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x009\\x01\\x02!\\x9f\\x01\\x02!\\x9f\\x085\\x00'\\x00'\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-08-07T00:00:00", "modifydate": "2002-08-07T08:35:39", "lines": 39, "newlines": 39, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject: Rexx Utility for DFSMS Message Explanation\nDate: Tue, 6 Aug 2002 10:34:13 +0200\nFrom: Ugur.Cilesiz@rwesystems.com\nTo: sbgolob@attglobal.net\n\nHi Sam,\n\nAfter the exchange on IBM-MAIN earlier in the week, I thought\nI'd polish these bits of code up and submit them to the CBT.\nI hope they may be of use.\n\nThe xmitted file contains :\n\nUMSG  - A REXX DFSMS (hsm, dss and dfp) Message explainer\nMESAJP- ISPF Panel\nARC*   -  HSM Messages\nIDC*    -  DFP  Messages\nADR*  -  DSS  MESSAGES\n\nRegards,\nMit freundlichen Gruessen,\n\n* Ugur Cilesiz  *\n\n-------------------------------------------\n        RWE Systems Computing GmbH\n        C-PB    DLZ Neurath\n        Am Dornbusch 36\n        41513 Grevenbroich\n        T intern   : 778 - 218\n        T extern  : +49-2181-285-218\n        T Fax      : +49-2181-285-203\n            MailTo:Ugur.Cilesiz@Rwesystems.com\n-------------------------------------------\n\n    ---------------------------------------------------------------------\n                Name: mesaj.zip\n   mesaj.zip    Type: Zip Compressed Data (application/x-zip-compressed)\n            Encoding: base64\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$MESAJ2": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00%\\x01\\x02!\\x9f\\x01\\x02!\\x9f\\t4\\x00P\\x007\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2002-08-07T00:00:00", "modifydate": "2002-08-07T09:34:25", "lines": 80, "newlines": 55, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject: AW: New use for UMSG\nDate: Wed, 7 Aug 2002 07:23:05 +0200\nFrom: Ugur.Cilesiz@rwesystems.com\nTo: sbgolob@attglobal.net\n\nHi Sam,\n\n1. Under IBM Bookmanager you must first unload the messages to a\nflat file tab to ACTION BAR ----> FUNCTION -----> COPY ----->\nselect from_section to_section\n\nfor example  the ARC* Messages from_section = 2.1 to_section = 2.1289\n\n2. With the JCL (ARCUNJCL for ARC**** messages) and the REXX exec\n(member ARCUNLOD for the ARC**** messages), you can create\nthe pds members for the messages\n\n3. The process is as follows:  Once you create the flat file\ncontaining all the ARC**** messages from the Bookmanager system,\nyou run the ARCUNLOD REXX to put (IEBUPDTE or PDSLOAD (CBT FIle 093))\n./ ADD NAME=msgnumbr   cards in front of each particular message in\nthe flat file.  In our example, the resulting file (still a flat\nfile) is called 'userid.ARC.OFF', which was created from the file\n'userid.ARC.MSGS' that was produced by Bookmanager.  Then, in another\n(TSO-in-batch) step, in member ARCUNJCL, you run the PDSLOAD program,\nand creates the pds:  'userid.ARC.MSGS.PDS', whose members you can\nthen copy into the 'userid.MESAJ.PDS'.\n\nThe PDSLOAD program source is in CBT Tape File 093--load modules are\nin File 035, and all you have to do is to copy the load module into\nyour load library, and use it.\n\n4. The way I have set up this package on my system, I only have used\nthe ADR**** (from DFDSS - PGM=ADRDSSU) message, the ARC**** (from HSM)\nmessages, and the IDC**** (from IDCAMS) messages.  Between these three\nsets of messages only, there are over 2800 members in my MESAJ.PDS .\nI have included separate sets of JCL to get each type of message group\nfor myself.  But you can do this for any sets of messages that you\nwant.  Just make sure that your MESAJ.PDS has enough space, and enough\ndirectory blocks.\n\nCIAO\n <<msg.make.zip>>\nMit freundlichen Gruessen,\n\n* Ugur Cilesiz  *\n\n-------------------------------------------\n        RWE Systems Computing GmbH\n        C-PB    DLZ Neurath\n        Am Dornbusch 36\n        41513 Grevenbroich\n        T intern   : 778 - 218\n        T extern  : +49-2181-285-218\n        T Fax      : +49-2181-285-203\n            MailTo:Ugur.Cilesiz@Rwesystems.com\n-------------------------------------------\n\n> -----Urspr\u00bengliche Nachricht-----\n> Von:  Sam Golob [SMTP:sbgolob@attglobal.net]\n> Gesendet am:  Dienstag, 6. August 2002 15:51\n> An:   Ugur.Cilesiz@rwesystems.com\n> Betreff:      New use for UMSG\n>\n> Hi Ugur,\n>\n>     On my own system, I have put my own members into the\n> MESAJ.PDS, and have made an ISPF command table entry called\n> UMSG, abbreviated to 2 characters, which says SELECT CMD(UMSG).\n> I think I will use your system very much.  Thank you for your\n> work.\n>\n>     I am looking forward to adding the procedure to generate\n> the \"messages pds\" from the IBM materials, and then I'll put the\n> file on the CBT Tape.\n>\n>     Thank you again.\n>\n> Sincerely,   Sam Golob\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE403": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x008\\x00\\x99\\x08?\\x01\\x02\"\\x0f\\tX\\x00z\\x00\\x16\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "2002-08-08T09:58:38", "lines": 122, "newlines": 22, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 403 is from Ugur Cilesiz, and contains a very simple      *   FILE 403\n//*           system to display IBM Messages (and other FB-80       *   FILE 403\n//*           help-type information) on your screen, instantly.     *   FILE 403\n//*                                                                 *   FILE 403\n//*           This system consists of a REXX exec (two versions     *   FILE 403\n//*           available), one panel, and an FB-80 format            *   FILE 403\n//*           partitioned dataset, which contains the message       *   FILE 403\n//*           text, for each message.  You set up the partitioned   *   FILE 403\n//*           dataset, with the message members you want to         *   FILE 403\n//*           include.                                              *   FILE 403\n//*                                                                 *   FILE 403\n//*           Instructions are included here for obtaining the IBM  *   FILE 403\n//*           message members, from Bookmanager installed under     *   FILE 403\n//*           MVS.  Of course, if you have another vendor's         *   FILE 403\n//*           documentation also installed under Bookmanager in     *   FILE 403\n//*           MVS, you can easily extract and load their messages   *   FILE 403\n//*           also.                                                 *   FILE 403\n//*                                                                 *   FILE 403\n//*           email:  Ugur.Cilesiz@rwesystems.com                   *   FILE 403\n//*                                                                 *   FILE 403\n//*       - - - - - - - - - - - - - - - - - - - - - - - - - -       *   FILE 403\n//*                                                                 *   FILE 403\n//*           Notes about this Message Display Facility             *   FILE 403\n//*                                                                 *   FILE 403\n//*      Sometimes, when you are involved in servicing one, or      *   FILE 403\n//*      several, components of the MVS operating system very       *   FILE 403\n//*      often, you might like a convenient (and very quick) way    *   FILE 403\n//*      of displaying the messages from that component, under      *   FILE 403\n//*      ISPF.  Then this system is something you can use.          *   FILE 403\n//*                                                                 *   FILE 403\n//*      This system is also very flexible, and the display         *   FILE 403\n//*      capability is not limited to IBM messages, but you can     *   FILE 403\n//*      make arbitrary members of the \"message pds\" and display    *   FILE 403\n//*      them anytime, by entering their \"member name\" in the       *   FILE 403\n//*      UMSG display panel.                                        *   FILE 403\n//*                                                                 *   FILE 403\n//*      The messages are displayed, using either ISPF Browse,      *   FILE 403\n//*      or the REVIEW TSO command from File 134 (load modules      *   FILE 403\n//*      on File 135) of the CBT Tape.  The REXX exec which uses    *   FILE 403\n//*      ISPF Browse (in this pds) is member UMSG.  The REXX        *   FILE 403\n//*      exec which uses the REVIEW TSO command, is member          *   FILE 403\n//*      UMSGR.  The panel using ISPF Browse, is called MESAJP,     *   FILE 403\n//*      and the one using REVIEW, is called MESAJP1.  (Sam         *   FILE 403\n//*      Golob is responsible for the REVIEW adaptation.  Ugur      *   FILE 403\n//*      did all the work, though.  It was only a slight change     *   FILE 403\n//*      from Ugur's original REXX.  SG)                            *   FILE 403\n//*                                                                 *   FILE 403\n//*      If you didn't remember the exact name of the message,      *   FILE 403\n//*      you can ask for a partial message, by using an asterisk    *   FILE 403\n//*      as a wild card.  For example, if you want to display a     *   FILE 403\n//*      list of all ARC**** members in your MESAJ.PDS, then        *   FILE 403\n//*      type ARC* in the pop-up panel.  (The procedure for the     *   FILE 403\n//*      REVIEW adaptation, is that if you got the message id a     *   FILE 403\n//*      bit wrong, and a blank REVIEW screen pops up, then you     *   FILE 403\n//*      can enter the DIR subcommand of REVIEW, to get a pds       *   FILE 403\n//*      directory so you can find the right message id.)           *   FILE 403\n//*                                                                 *   FILE 403\n//*       - - - - - - - - - - - - - - - - - - - - - - - - - -       *   FILE 403\n//*                                                                 *   FILE 403\n//*      This package is very simply constructed, and is also       *   FILE 403\n//*      easy to install.                                           *   FILE 403\n//*                                                                 *   FILE 403\n//*      To install this package, just copy the UMSG and UMSGR      *   FILE 403\n//*      execs into your SYSPROC or SYSEXEC library for your TSO    *   FILE 403\n//*      session.  And copy the one panel (member MESAJP) into a    *   FILE 403\n//*      panel library in your ISPPLIB concatenation.  The          *   FILE 403\n//*      messages themselves will be put (later) into an FB-80      *   FILE 403\n//*      partitioned dataset that you create, which may get to      *   FILE 403\n//*      be rather large, depending on the number of IBM (or        *   FILE 403\n//*      other) messages that you may want to load into it.         *   FILE 403\n//*                                                                 *   FILE 403\n//*      You must customize the UMSG and UMSGR execs to point to    *   FILE 403\n//*      your message library pds (not to my library).  Then you    *   FILE 403\n//*      load the message library pds with the IBM messages         *   FILE 403\n//*      (I'll tell you how to do it, below), and then you run      *   FILE 403\n//*      the UMSG exec.  The messages library pds is usually        *   FILE 403\n//*      named 'prefix.MESAJ.PDS' , but you can name it anything    *   FILE 403\n//*      you want, as long as the UMSG or UMSGR execs point to      *   FILE 403\n//*      it.                                                        *   FILE 403\n//*                                                                 *   FILE 403\n//*      If you are using the REVIEW command (member UMSGR) to      *   FILE 403\n//*      display the messages, then you must install it.  The       *   FILE 403\n//*      easiest way to do that, is to get CBT Tape File 135        *   FILE 403\n//*      (from www.cbttape.org , or from a CBT Tape) and copy       *   FILE 403\n//*      every member starting with REV****, and all their          *   FILE 403\n//*      aliases, to an ISPLLIB or STEPLIB, that is accessible      *   FILE 403\n//*      to your TSO session.                                       *   FILE 403\n//*                                                                 *   FILE 403\n//*      I have made an ISPF command table entry, called UMSG       *   FILE 403\n//*      (abbreviated to 2 characters) to invoke UMSG, so all I     *   FILE 403\n//*      have to do, on my system, is to type UM on the command     *   FILE 403\n//*      line, and press enter.  Then I get the MESAJP panel        *   FILE 403\n//*      window, and I enter the member name of the message I       *   FILE 403\n//*      want to look up.  It is very simple to use.                *   FILE 403\n//*                                                                 *   FILE 403\n//*      Unfortunately, the actual IBM messages are copyrighted,    *   FILE 403\n//*      and their explanations may also change once in a while.    *   FILE 403\n//*      So we can not include the actual IBM messages in this      *   FILE 403\n//*      file, but we will tell you how you can get them, if you    *   FILE 403\n//*      have Bookmanager installed under MVS.                      *   FILE 403\n//*                                                                 *   FILE 403\n//*      Just look at the $MESAJ2 member in this pds, and you       *   FILE 403\n//*      will see how to generate the members of your               *   FILE 403\n//*      'userid.MESAJ.PDS', for whichever messages that you        *   FILE 403\n//*      want to extract from Bookmanager.                          *   FILE 403\n//*                                                                 *   FILE 403\n//*      We have included several sample (non-IBM) messages to      *   FILE 403\n//*      include in your 'userid.MESAJ.PDS' so you can test how     *   FILE 403\n//*      the system works.  These are in the member (of this        *   FILE 403\n//*      pds) called SAMPMSGS.  The member is a pds, in IEBUPDTE    *   FILE 403\n//*      or PDSLOAD unloaded format, and contains (at least) a      *   FILE 403\n//*      member called ABEND (displaying most of the common         *   FILE 403\n//*      ABEND codes) and REVIEW (which is a HELP member for the    *   FILE 403\n//*      REVIEW TSO command).  If you also include these members    *   FILE 403\n//*      in your 'userid.MESAJ.PDS' dataset, then you can access    *   FILE 403\n//*      them by entering ABEND or REVIEW in the UMSG panel.        *   FILE 403\n//*                                                                 *   FILE 403\n//*      Best of luck to all of you.....                            *   FILE 403\n//*                                                                 *   FILE 403\n//*         Ugur Cilesiz                August 07, 2002             *   FILE 403\n//*         Sam Golob                                               *   FILE 403\n//*                                                                 *   FILE 403\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADRUNJCL": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\"\\x01\\x02!\\x7f\\x01\\x02!\\x9f\\x07\\x00\\x00%\\x00\\x1d\\x00\\x00\\xd9\\xc5\\xf0\\xf3\\xf0\\xf6\\xf3@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2002-08-05T00:00:00", "modifydate": "2002-08-07T07:00:22", "lines": 37, "newlines": 29, "modlines": 0, "user": "RE03063"}, "text": "//ADRUNLOD JOB (DVRF,PS,,,,,,,00,4703F0000),'CILESIZ 225',\n//             CLASS=D,MSGCLASS=T,REGION=0M,NOTIFY=&SYSUID\n//* JCL ADRUNJCL\n//*\n//* DATA SET   : RE03063.MSG.CNTL(ADRUNJCL)\n//* NAME       : UGUR CILESIZ\n//* DATE       : 06.08.2002\n//* PARAMETER  :\n//* DESCRIPTION:\n//*\n//*\n//IDCAMS  EXEC PGM=IDCAMS\n//*========================\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD *\n DELETE RE03063.ADRMSG.OFF NONVSAM PURGE\n IF MAXCC = 8 THEN SET MAXCC = 0\n/*\n//TSOBATCH EXEC PGM=IKJEFT01\n//*-------------------------\n//OUTFILE   DD DSN=RE03063.ADRMSG.OFF,\n//             DISP=(NEW,CATLG,DELETE),SPACE=(CYL,(100,100),RLSE),\n//             DCB=(DSORG=PS,RECFM=FB,LRECL=132)\n//SYSEXEC   DD DISP=SHR,DSN=RE03063.MSG.CNTL\n//INFILE    DD DISP=SHR,DSN=RE03063.ADR.MSGS\n//SYSTSPRT  DD SYSOUT=*\n//SYSTSIN   DD *\n %ADRUNLOD\n/*\n//PDSMAKE EXEC PGM=PDSLOAD,PARM='UPDTE(><)'\n//*-------------------------\n//STEPLIB  DD  DSN=RE03063.REVIEW.LOAD,DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSN=RE03063.ADRMSG.OFF,DISP=SHR\n//SYSUT2   DD  DSN=RE03063.ADR.MSG.PDS,DISP=(NEW,CATLG),\n//             UNIT=3390,SPACE=(CYL,(10,10,100),RLSE)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADRUNLOD": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00)\\x01\\x02!\\x7f\\x01\\x02!\\x8f\\x06Q\\x003\\x003\\x00\\x00\\xd9\\xc5\\xf0\\xf3\\xf0\\xf6\\xf3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-08-05T00:00:00", "modifydate": "2002-08-06T06:51:29", "lines": 51, "newlines": 51, "modlines": 0, "user": "RE03063"}, "text": "/* Rexx ADRUNLOD\n |\n |  Data Set   : RE03063.MSG.CNTL(ADRUNLOD)\n |  Name       : Ugur Cilesiz\n |  Date       : 06.08.2002\n |  Parameter  :\n |  Description:\n |\n */\nTrace O\n\n\n/* --------------------------------------------------------- *\n *   PROCESS EACH RECORD Until End-OF-FILE REACHED           *\n * --------------------------------------------------------- */\n Go  = 0\n EOF = 'NO'\n Do While EOF='NO'\n    \"EXECIO 1 DISKR INFILE\"\n    If Rc <> 0\n       Then EOF = 'YES'\n       Else Do\n            Parse Pull RECORD\n            End\n    If Substr(RECORD,2,2) = '3.' & Substr(Word(RECORD,2),1,3) = 'ADR'\n       Then Do\n            MessageId = Substr(Word(RECORD,2),1,8)\n            Go  = 1\n            Add = 1\n            Iterate\n            End\n    If Add = 1\n       Then Do\n            Add = 0\n            Push './ ADD NAME=' || MessageId\n            \"EXECIO 1  DISKW OUTFILE\"\n            End\n    If Go = 1\n       Then Do\n            Push RECORD\n            \"EXECIO 1  DISKW OUTFILE\"\n            End\n End /* End Do While */\n Push './ ENDUP '\n \"EXECIO 1  DISKW OUTFILE\"\n\n \"FREE ALL\"\n Exit\n/* --------------------------------------------------------- *\n *             Procedure SECTION                             *\n * --------------------------------------------------------- */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ARCUNJCL": {"ttr": 533, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x06\\x01\\x02!\\x7f\\x01\\x02!\\x9f\\x07\\x02\\x00$\\x00C\\x00\\x00\\xd9\\xc5\\xf0\\xf3\\xf0\\xf6\\xf3@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2002-08-05T00:00:00", "modifydate": "2002-08-07T07:02:06", "lines": 36, "newlines": 67, "modlines": 0, "user": "RE03063"}, "text": "//ARCUNLOD JOB (DVRF,PS,,,,,,,00,4703F0000),'CILESIZ 225',\n//             CLASS=D,MSGCLASS=T,REGION=0M,NOTIFY=&SYSUID\n//* JCL ARCUNJCL\n//*\n//* DATA SET   : RE03063.MSG.CNTL(ARCUNJCL)\n//* NAME       : UGUR CILESIZ\n//* DATE       : 05.08.2002\n//* PARAMETER  :\n//* DESCRIPTION:\n//*\n//IDCAMS  EXEC PGM=IDCAMS\n//*========================\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD *\n DELETE RE03063.ARCMSG.OFF NONVSAM PURGE\n IF MAXCC = 8 THEN SET MAXCC = 0\n/*\n//TSOBATCH EXEC PGM=IKJEFT01\n//*-------------------------\n//OUTFILE   DD DSN=RE03063.ARCMSG.OFF,\n//             DISP=(NEW,CATLG,DELETE),SPACE=(CYL,(100,100),RLSE),\n//             DCB=(DSORG=PS,RECFM=FB,LRECL=132)\n//SYSEXEC   DD DISP=SHR,DSN=RE03063.MSG.CNTL\n//INFILE    DD DISP=SHR,DSN=RE03063.ARC.MSGS\n//SYSTSPRT  DD SYSOUT=*\n//SYSTSIN   DD *\n %ARCUNLOD\n/*\n//PDSMAKE EXEC PGM=PDSLOAD,PARM='UPDTE(><)'\n//*-------------------------\n//STEPLIB  DD  DSN=RE03063.REVIEW.LOAD,DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSN=RE03063.ARCMSG.OFF,DISP=SHR\n//SYSUT2   DD  DSN=RE03063.ARC.MSG.PDS,DISP=(NEW,CATLG),\n//             UNIT=3390,SPACE=(CYL,(10,10,100),RLSE)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ARCUNLOD": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00B\\x01\\x02!\\x7f\\x01\\x02!\\x8f\\x06V\\x003\\x00\\xc2\\x00\\x00\\xd9\\xc5\\xf0\\xf3\\xf0\\xf6\\xf3@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2002-08-05T00:00:00", "modifydate": "2002-08-06T06:56:42", "lines": 51, "newlines": 194, "modlines": 0, "user": "RE03063"}, "text": "/* Rexx ARCUNLOD\n |\n |  Data Set   : RE03063.MSG.CNTL(ARCUNLOD)\n |  Name       : Ugur Cilesiz\n |  Date       : 05.08.2002\n |  Parameter  :\n |  Description:\n |\n */\nTrace O\n\n\n/* --------------------------------------------------------- *\n *   PROCESS EACH RECORD Until End-OF-FILE REACHED           *\n * --------------------------------------------------------- */\n Go  = 0\n EOF = 'NO'\n Do While EOF='NO'\n    \"EXECIO 1 DISKR INFILE\"\n    If Rc <> 0\n       Then EOF = 'YES'\n       Else Do\n            Parse Pull RECORD\n            End\n    If Substr(RECORD,2,2) = '2.' & Substr(Word(RECORD,2),1,3) = 'ARC'\n       Then Do\n            MessageId = Substr(Word(RECORD,2),1,8)\n            Go  = 1\n            Add = 1\n            Iterate\n            End\n    If Add = 1\n       Then Do\n            Add = 0\n            Push './ ADD NAME=' || MessageId\n            \"EXECIO 1  DISKW OUTFILE\"\n            End\n    If Go = 1\n       Then Do\n            Push RECORD\n            \"EXECIO 1  DISKW OUTFILE\"\n            End\n End /* End Do While */\n Push './ ENDUP '\n \"EXECIO 1  DISKW OUTFILE\"\n\n \"FREE ALL\"\n Exit\n/* --------------------------------------------------------- *\n *             Procedure SECTION                             *\n * --------------------------------------------------------- */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IDCUNJCL": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00$\\x01\\x02!\\x8f\\x01\\x02!\\x9f\\x07\\x01\\x00%\\x00\\x1e\\x00\\x00\\xd9\\xc5\\xf0\\xf3\\xf0\\xf6\\xf3@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2002-08-06T00:00:00", "modifydate": "2002-08-07T07:01:24", "lines": 37, "newlines": 30, "modlines": 0, "user": "RE03063"}, "text": "//IDCUNLOD JOB (DVRF,PS,,,,,,,00,4703F0000),'CILESIZ 225',\n//             CLASS=D,MSGCLASS=T,REGION=0M,NOTIFY=&SYSUID\n//* JCL IDCUNJCL\n//*\n//* DATA SET   : RE03063.MSG.CNTL(IDCUNJCL)\n//* NAME       : UGUR CILESIZ\n//* DATE       : 06.08.2002\n//* PARAMETER  :\n//* DESCRIPTION:\n//*\n//*\n//IDCAMS  EXEC PGM=IDCAMS\n//*========================\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD *\n DELETE RE03063.IDCMSG.OFF NONVSAM PURGE\n IF MAXCC = 8 THEN SET MAXCC = 0\n/*\n//TSOBATCH EXEC PGM=IKJEFT01\n//*-------------------------\n//OUTFILE   DD DSN=RE03063.IDCMSG.OFF,\n//             DISP=(NEW,CATLG,DELETE),SPACE=(CYL,(100,100),RLSE),\n//             DCB=(DSORG=PS,RECFM=FB,LRECL=132)\n//SYSEXEC   DD DISP=SHR,DSN=RE03063.MSG.CNTL\n//INFILE    DD DISP=SHR,DSN=RE03063.IDC.MSGS\n//SYSTSPRT  DD SYSOUT=*\n//SYSTSIN   DD *\n %IDCUNLOD\n/*\n//PDSMAKE EXEC PGM=PDSLOAD,PARM='UPDTE(><)'\n//*-------------------------\n//STEPLIB  DD  DSN=RE03063.REVIEW.LOAD,DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSN=RE03063.IDCMSG.OFF,DISP=SHR\n//SYSUT2   DD  DSN=RE03063.IDC.MSG.PDS,DISP=(NEW,CATLG),\n//             UNIT=3390,SPACE=(CYL,(10,10,100),RLSE)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IDCUNLOD": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x06\\x01\\x02!\\x8f\\x01\\x02!\\x8f\\x087\\x003\\x003\\x00\\x00\\xd9\\xc5\\xf0\\xf3\\xf0\\xf6\\xf3@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2002-08-06T00:00:00", "modifydate": "2002-08-06T08:37:06", "lines": 51, "newlines": 51, "modlines": 0, "user": "RE03063"}, "text": "/* Rexx IDCUNLOD\n |\n |  Data Set   : RE03063.MSG.CNTL(IDCUNLOD)\n |  Name       : Ugur Cilesiz\n |  Date       : 06.08.2002\n |  Parameter  :\n |  Description:\n |\n */\nTrace O\n\n\n/* --------------------------------------------------------- *\n *   PROCESS EACH RECORD Until End-OF-FILE REACHED           *\n * --------------------------------------------------------- */\n Go  = 0\n EOF = 'NO'\n Do While EOF='NO'\n    \"EXECIO 1 DISKR INFILE\"\n    If Rc <> 0\n       Then EOF = 'YES'\n       Else Do\n            Parse Pull RECORD\n            End\n    If Substr(RECORD,2,2) = '9.' & Substr(Word(RECORD,2),1,3) = 'IDC'\n       Then Do\n            MessageId = Substr(Word(RECORD,2),1,8)\n            Go  = 1\n            Add = 1\n            Iterate\n            End\n    If Add = 1\n       Then Do\n            Add = 0\n            Push './ ADD NAME=' || MessageId\n            \"EXECIO 1  DISKW OUTFILE\"\n            End\n    If Go = 1\n       Then Do\n            Push RECORD\n            \"EXECIO 1  DISKW OUTFILE\"\n            End\n End /* End Do While */\n Push './ ENDUP '\n \"EXECIO 1  DISKW OUTFILE\"\n\n \"FREE ALL\"\n Exit\n/* --------------------------------------------------------- *\n *             Procedure SECTION                             *\n * --------------------------------------------------------- */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MESAJP": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x003\\x01\\x02\\x01_\\x01\\x02\"\\x0f\\x078\\x00\\x1a\\x004\\x00\\x00\\xd9\\xc5\\xf0\\xf3\\xf0\\xf6\\xf3@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2002-01-15T00:00:00", "modifydate": "2002-08-08T07:38:33", "lines": 26, "newlines": 52, "modlines": 0, "user": "RE03063"}, "text": ")Attr Default(%+_)\n }  TYPE(TEXT  ) INTENS(HIGH) COLOR(GREEN) HILITE(REVERSE)\n {  TYPE(INPUT ) INTENS(HIGH) CAPS(ON ) COLOR(TURQ) HILITE(USCORE)\n \u00a6  TYPE(TEXT  ) INTENS(HIGH) COLOR(GREEN)\n\n)Body  Expand(//) window(60,11)\n}                                                          +\n} +                                                      } +\n} % Command ===>_ZCMD                                +   } +\n} +                                                      } +\n} \u00a6 Message Id  %===>{Mesaj   +                          } +\n} +                                                      } +\n} + Examples:    ARC0001I  --> Full qualified message    } +\n} +              ARC12*    --> Messages beginning ARC12  } +\n} +              *         --> All messages              } +\n} +                                                      } +\n}                                                          +\n)INIT\n .CURSOR = Mesaj\n &zwinttl   = 'RWE - DFSMS(hsm,dss and dfp) Message Display Facility'\n\n)REINIT\n REFRESH(*)\n)PROC\n   VER (&Mesaj,NB)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MESAJP1": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x11\\x01\\x02\\x01_\\x01\\x02!\\x8f\\tY\\x00\\x16\\x004\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2002-01-15T00:00:00", "modifydate": "2002-08-06T09:59:11", "lines": 22, "newlines": 52, "modlines": 0, "user": "SBGOLOB"}, "text": ")Attr Default(%+_)\n }  TYPE(TEXT  ) INTENS(HIGH) COLOR(GREEN) HILITE(REVERSE)\n {  TYPE(INPUT ) INTENS(HIGH) CAPS(ON ) COLOR(TURQ) HILITE(USCORE)\n \u00a6  TYPE(TEXT  ) INTENS(HIGH) COLOR(GREEN)\n\n)Body  Expand(//) window(60,07)\n}                                                          +\n} +                                                      } +\n} % Command ===>_ZCMD                                +   } +\n} +                                                      } +\n} \u00a6 Message Id  %===>{Mesaj   +                          } +\n} +                                                      } +\n}                                                          +\n)INIT\n .CURSOR = Mesaj\n &zwinttl   = 'RWE - DFSMS(hsm,dss and dfp) Message Display Facility'\n\n)REINIT\n REFRESH(*)\n)PROC\n   VER (&Mesaj,NB)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SAMPMSGS": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02!\\x9f\\x01\\x02!\\x9f\\tE\\x10T\\x10T\\x00\\x00\\xd7\\xc4\\xe2\\xd3\\xd6\\xc1\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-08-07T00:00:00", "modifydate": "2002-08-07T09:45:00", "lines": 4180, "newlines": 4180, "modlines": 0, "user": "PDSLOAD"}, "text": "./ ADD NAME=ABEND    0100-02218-02218-0929-02307-02307-00000-SBGOLOB\n)F FUNCTION -\n   ABEND IS NOT A COMMAND, BUT IS A LIST OF SOME OF THE MORE COMMON\n   ABEND CODES.  THE DESCRIPTIONS PROVIDED HERE ARE NOT CLAIMED TO\n   EXPLAIN ALL POSSIBLE CAUSES OF THE PROBLEM.  IF YOU REQUIRE MORE\n   INFORMATION, REFER TO THE OS/VS MESSAGE LIBRARY PUBLICATIONS:\n     GC38-1008  VS2 SYSTEM CODES\n     GC38-1002  VS2 SYSTEM MESSAGES\n     GC26-3920  VS2 MVS UTILITIES MESSAGES\n     GC28-1157  MVS/XA MESSAGE LIBRARY: SYSTEM CODES\n     GC28-1376  MVS/XA MESSAGE LIBRARY: SYSTEM MESSAGES VOLUME 1\n     GC28-1377  MVS/XA MESSAGE LIBRARY: SYSTEM MESSAGES VOLUME 2\n     GC28-1815  MVS/ESA MESSAGE LIBRARY: SYSTEM CODES\n     GC28-1812  MVS/ESA MESSAGE LIBRARY: SYSTEM MESSAGES VOLUME 1\n     GC28-1813  MVS/ESA MESSAGE LIBRARY: SYSTEM MESSAGES VOLUME 2\n     GC28-1664  MVS/ESA SYSTEM CODES\n     GC28-1656  MVS/ESA SYSTEM MESSAGES, VOLUME 1  ADY-IDC\n     GC28-1657  MVS/ESA SYSTEM MESSAGES, VOLUME 2  IEA-IEE\n     GC28-1658  MVS/ESA SYSTEM MESSAGES, VOLUME 3  IEF-IXP\n)X SYNTAX -\n   HELP ABEND OPERAND(ABEND-CODE)\n\n   REQUIRED - ABEND\n   DEFAULTS - NONE - IF NO OPERAND SPECIFIED, ALL ABEND CODES LISTED.\n     NOTE --- BOTH THE SYSTEM AND YOUR PROGRAM CAN ISSUE ABEND CODES.\n              IN YOUR REQUEST YOU MUST INDICATE THE SOURCE OF THE CODE\n              BY THE FIRST CHARACTER: S FOR SYSTEM, U FOR USER.\n              SYSTEM CODES ARE ALWAYS 3 CHARACTERS (KEEP LEADING ZEROS)\n              USER CODES ARE 1 TO 4 CHARACTERS (DROP LEADING ZEROS)\n   EXAMPLES - HELP ABEND OPERAND(S013)     HELP ABEND OPERAND(U20)\n)O OPERANDS\n))S001 - AN INPUT/OUTPUT ERROR CONDITION WAS ENCOUNTERED DURING\n     EXECUTION OF A CHECK/GET/PUT MACRO INSTRUCTION.  EITHER NO SYNAD\n     ROUTINE WAS PROVIDED TO HANDLE THE ERROR, OR DCB=EROPT=ABE WAS\n     SPECIFIED OR DEFAULTED.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S001 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S001-RC)**\n   --POSSIBLE CAUSE--\n     INPUT RECORD DESCRIBED INCORRECTLY, LENGTH ERROR\n     TRIED TO READ AFTER ENCOUNTERING END OF FILE\n     RECFM V IS INCOMPATIBLE WITH TRTCH ET\n     TRIED TO WRITE ON AN INPUT FILE\n     READ INTO A TABLE WHOSE SUBSCRIPT WAS ZERO\n     INCORRECT LABEL PARAMETER\n     TRTCH PARM WAS WRONG\n     TAPE BEING READ IN WRONG DENSITY\n     DIRECTORY OF PDS WAS OVERWRITTEN\n     NSL LABEL HAD INCORRECT DSNAME, OPERATOR CANCELLED\n     TRUE I/O FAILURE, UCB SHOW REDUNDANCY\n     HARDWARE ERROR - BAD TAPE OR TAPE DRIVE\n     SECONDARY SPACE ALLOCATION FOR DASD OUTPUT FILE TOO SMALL\n        (SEE SB37)\n     COBOL - INCORRECT USE OF BLOCK CONTAINS CLAUSE\n           - HAD RECORDING MODE F WHEN GENERATED, BUT NOT WHEN READ\n))S001-01 - AN I/O ERROR OCCURRED DURING BDAM CREATE, BSAM, BISAM,\n     QSAM, OR BDAM AND NO SYNAD EXIT WAS SPECIFIED BY THE USER.\n))S001-02 - AN ERROR WAS ENCOUNTERED WHILE ATTEMPTING TO CLOSE\n     THE DATASET.\n))S001-03 - FOR QSAM, AN ERROR WAS ENCOUNTERED THAT COULD NOT BE\n     ACCEPTED.\n))S001-04 - FOR QSAM, ABE OR AN INVALID VALUE FOR EROPT PARAMETER IN\n     THE DCB AND/OR NO ERROR HANDLING (SYNAD) EXIT WAS SPECIFIED.\n))S001-05 - FOR QSAM, A GET WAS ISSUED AFTER END-OF-FILE.\n))S002 - RECORD IS GREATER THAN 32,768 BYTES, EXCEEDS MAXIMUM TRACK\n         LENGTH OR STATED BLOCKSIZE, COULD NOT BE CONTAINED IN ONE\n         EXTENT, OR TOO MANY TRACKS SPECIFIED FOR CYLINDER OVERFLOW.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S002 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S002-RC)**\n   --POSSIBLE CAUSE--\n     DCB HAD THE WRONG BLOCK SIZE\n     IEHMOVE - ATTEMPT TO RENAME DATA SET WHEN NEW NAME ALREADY EXISTS\n     WRONG RECORD FORMAT SPECIFIED IN JCL\n))S002-04 - AN INVALID RECORD WAS ENCOUNTERED ON A GET OPERATION.\n     THE LENGTH FIELD OF A RECORD DESCRIPTOR WORD (RDW) FOR A VARIABLE\n     LENGTH RECORD SPECIFIES A VALUE LESS THAN 4.\n))S002-08 - AN INVALID RECORD WAS ENCOUNTERED ON A PUT OR WRITE\n     OPERATION.  THE RECORD OR BLOCK LENGTH PLUS THE KEY LENGTH AND\n     REQUIRED OVERHEAD ADD UP TO MORE THAN 32,767 BYTES.\n))S002-0C - AN INVALID RECORD WAS ENCOUNTERED ON A PUT OR WRITE\n     OPERATION.  THE RECORD OR BLOCK LENGTH PLUS THE KEY LENGTH AND\n     REQUIRED OVERHEAD IS GREATER THAN THE DASD TRACK CAPACITY.\n))S002-10 - AN INVALID RECORD WAS ENCOUNTERED ON A PUT OPERATION;\n     THE DATASET USES THE TRACK OVERFLOW FEATURE.  THE RDW FOR A\n     VARIABLE LENGTH RECORD SPECIFIES A LENGTH GREATER THAN 32,752.\n))S002-14 - AN INVALID RECORD WAS ENCOUNTERED ON A PUT OR WRITE\n     OPERATION.  THE RECORD LENGTH IS GREATER THAN THE BLOCKSIZE\n     SPECIFIED IN THE DCB.\n))S002-18 - AN INVALID RECORD WAS ENCOUNTERED ON A PUT OPERATION;\n     THE DATASET USES THE VARIABLE RECORD FORMAT.  THE LENGTH VALUE OF\n     THE RDW IS EITHER: LESS THAN 4, GREATER THAN 32,767, GREATER THAN\n     THE BLOCKSIZE SPECIFIED IN THE DCB, OR LESS THAN 5 IF ASA CONTROL\n     CHARACTERS ARE BEING USED.\n))S002-1C - THE ERROR OCCURRED DURING THE CREATION OF A DIRECT DATASET.\n     A WRITE MACRO WAS ISSUED FOR A RECORD LARGER THAN THE TRACK\n     CAPACITY, AND THE RECORD FORMAT DOES NOT USE THE TRACK OVERFLOW\n     FEATURE.\n))S002-20 - THE ERROR OCCURRED DURING THE CREATION OF A DIRECT DATASET.\n     A WRITE MACRO WAS ISSUED CAUSING A SECONDARY EXTENT TO BE OBTAINED.\n     THE BLOCK WILL NOT FIT ON THE AMOUNT OF SPACE ALLOCATED FOR THE\n     SECONDARY EXTENT.\n))S002-24 - THE ERROR OCCURRED DURING THE CREATION OF A DIRECT DATASET.\n     A WRITE MACRO WAS ISSUED TO WRITE OUT A BLOCK LARGER THAN THE\n     PRIMARY EXTENT ON THE PREALLOCATED DATASET.  THIS COULD ALSO OCCUR\n     IF ALLOCATION OF THE PRIMARY EXTENT WAS NON-CONTIGUOUS AND ANY\n     OF THE SECONDARY EXTENTS WERE SMALLER THAN THE BLOCK.\n))S002-28 - THE ERROR OCCURRED DURING THE CREATION OF A DIRECT DATASET.\n     DURING THE EXECUTION OF OPEN IT WAS DETECTED THAT THE BLOCKSIZE\n     WAS LARGER THAN THE PRIMARY EXTENT.\n))S002-2C - THE ERROR OCCURRED WHILE OPENING AN ISAM DATASET.\n     TOO MANY TRACKS WERE SPECIFIED FOR CYLINDER OVERFLOW.\n))S002-30 - ONE OF THE FOLLOWING IS TRUE:\n     - A READ WAS ISSUED BUT THE LENGTH TO BE READ WAS ZERO.\n     - A QSAM PUT WITH MOVE MODE WAS ISSUED FOR RECFM=F, FB OR U\n       BUT DCBLRECL CONTAINED A NON-POSITIVE VALUE.\n))S002-34 - A READ MACRO WAS ISSUED FOR AN OUTPUT-ONLY DASD DATA SET.\n))S002-3C - PDSE MEMBER CREATION WAS PREVENTED BECAUSE THE PDSE\n     ALREADY HAD THE MAXIMUM NUMBER OF MEMBERS (2**19 - 2).\n))S002-50 - SERIALIZATION OF AN INTERNAL SAM CONTROL BLOCK (SACB)\n     USED FOPR PROCESSING HAS BEEN VIOLATED.\n))S002-54 - DEBCHK FAILURE DURING PDSE PROCESSING.\n))S002-58 - AN INTERNAL SAM CONTROL BLOCK (SACB) USED FOR PROCESSING\n     PDSE REQUESTS IS INCORRECT.\n))S002-5C - AN INTERNAL SAM CONTROL BLOCK (FRQ) USED FOR QUEUING\n     PDSE REQUESTS IS INCORRECT.\n))S002-60 - NON-ZERO KEYLENGTH SPECIFIED FOR OUTPUT PDSE MEMBER.\n))S002-64 - FOR BSAM, THE READ OR WRITE REQUEST COULD NOT BE ACCEPTED\n     BECAUSE THE VALUE OF NCP INT THE DCB HAD ALREADY BEEN REACHED.\n))S002-68 - INCORRECT BLOCKSIZE SPECIFIED.\n))S002-6C - UNABLE TO CREATE A PDSE MEMBER.\n))S002-70 - UNABLE TO UPDATE AN INTERNAL SAM CONTROL BLOCK (PACB)\n     USED FOR PDSE PROCESSING WITH INFORMATION CONCERNING THE MEMBER\n     BEING ACCESSED.\n))S002-74 - AN INTERNAL SAM CONTROL BLOCK (PACB) USED FOR STORING\n     PDSE DIRECTORY AND MEMBER INFORMATION IS INCORRECT.\n))S002-78 - ERROR RETURN FROM IGWFMPCR WHEN ATTEMPTING TO GIVE CONTROL\n     TO A ROUTINE TO PROCESS PDSE REQUESTS.\n))S002-7C - POINT DETECTED THAT INFORMATION CONCERNING THE MEMBER\n     BEING ACCESSED IS NOT FOUND IN THE PACB.\n))S002-80 - POINT DETECTED AN ERROR WHILE ATTEMPTING TO SYNCHRONIZE\n     DATA ON OUTPUT.\n))S002-84 - POINT DETECTED AN ERROR WHILE ATTEMPTING TO RECONNECT TO\n     A PDSE MEMBER FOR HOLD.\n))S002-88 - POINT DETECTED AN ERROR WHILE ATTEMPTING TO RECONNECT TO\n     A PDSE MEMBER FOR I/O.\n))S002-8C - POINT DETECTED AN ERROR WHILE ATTEMPTING TO DISCONNECT\n     FROM A PDSE MEMBER.\n))S002-90 - POINT DETECTED AN ERROR WHILE ATTEMPTING TO CONNECT TO\n     A PDSE MEMBER.\n))S002-94 - INCORRECT ATTEMPT TO CREATE A PDSE MEMBER SINCE THE\n     MAXIMUM NUMBER OF MEMBERS HAVE ALREADY BEEN CREATED.\n))S002-98 - UNABLE TO COMPLETE A WRITE REQUEST ISSUED WITHIN A\n     PDSE MEMBER.\n))S002-9C - INCORRECT UPDATE WRITE DETECTED.  ALL OUTSTANDING READS\n     HAD NOT BEEN CHECKED PRIOR TO THE WRITE.\n))S002-A0 - INCORRECT ATTEMPT TO ACCESS A PDSE DIRECTORY.  EITHER:\n     - WRITE ATTEMPTED TO THE DIRECTORY OF A PDSE.\n     - READ ATTEMPTED TO THE DIRECTORY OF A PDSE AND EITHER THE\n       RECFM WAS NOT F WITH BLKSIZE >= 256    ==OR==\n       RECFM WAS NOT U WITH BLKSIZE >= 256.\n))S002-A4 - UNABLE TO COMPLETE THE READ AGAINST THE PDSE DIRECTORY\n     DUE TO AN ERROR RETURN CODE FROM AN SMS SERVICE USED TO OBTAIN\n     DIRECTORY INFORMATION.\n))S002-A8 - MAXIMUM NUMBER OF RECORDS IN MEMBER HAS BEEN EXCEEDED.\n))S002-AC - BAD BUFFER FORMAT DETECTED FOR VARIABLE LENGTH RECORDS.\n     EITHER:\n     - RDW LENGTH IS LESS THAN 4.\n     - LENGTH OF SPANNED RECORD IS GREATER THAN 32760.\n     - THE SUM OF THE LENGTHS IN THE RDWS PLUS 4 DOES NOT EQUAL THE\n       LENGTH SPECIFIED IN THE BDW.\n     - RECFM DOES NOT SPECIFY BLOCKED BUT MORE THAN 1 RDW IN BUFFER.\n))S002-B0 - EITHER RECFM=F AND DCBBLKSI DOES NOT EQUAL DCBLRECL,\n     OR RECFM=FB AND DCBBLKSI IS NOT A MULTIPLE OF DCBLRECL.\n))S003 - THE ERROR OCCURED DURING END-OF-BLOCK PROCESSING USING EITHER\n         BSAM OR QSAM.  THE ERROR OCURRED BECAUSE THE I/O MACRO\n         INSTRUCTIONS FOR A 3525-ASSOCIATED DATA SET WERE NOT EXECUTED\n         IN THE PROPER SEQUENCE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S003 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S003-RC)**\n))S003-01 - THE ERROR WAS A READ SEQUENCE ERROR.\n))S003-02 - THE ERROR WAS A PUNCH SEQUENCE ERROR.\n))S003-03 - THE ERROR WAS A PRINT SEQUENCE ERROR.\n))S004 - THE ERROR OCCURED DURING OPEN PROCESSING USING EITHER BSAM OR\n         QSAM BECAUSE A CONFLICTING OR INVALID DCB PARAMETER (FUNC OR\n         RELATED PARAMETER) IS SPECIFIED.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S004 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S004-RC)**\n))S004-01 - INVALID DCB FUNC PARAMETER SPECIFIED.\n))S004-02 - INVALID COMBINATION OF DCB FUNC PARAMETER AND CNTRL MACRO\n            SPECIFIED.\n))S004-03 - CONFLICTING ACCESS METHODS SPECIFIED.\n))S004-04 - INVALID DCB SPECIFIED FOR 3505 OR 3525.\n))S004-05 - INVALID FORMAT CARD OR AN INVALID DEVICE SPECIFIED WITH\n            OPTICAL MARK READ (OMR).\n))S004-06 - DATA PROTECTION IMAGE NOT FOUND IN THE SYS1.IMAGELIB\n            DATA SET, VOLUME CONTAINING SYS1.IMAGELIB NOT MOUNTED,\n            OR SYS1.IMAGELIB NOT CATALOGED.\n))S005 - THE ERROR OCCURRED BECAUSE OF AN INVALID DECB DURING READ\n         PROCESSING USING BSAM.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S005 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S005-RC)**\n))S005-04 - A REQUIRED ADDRESS WAS NOT SPECIFIED IN THE DECB.  THIS\n            CAN BE EITHER THE HEADER ADDRESS AND/OR THE AREA ADDRESS.\n))S005-08 - THE RBL TYPE OF READ WAS NOT USED FOR THE 3886.\n))S006 - THE PROGRAM HAD AN INCORRECT AUTHORIZATION TO RUN A 1419.\n))S008 - THE ERROR OCCURRED DURING EXECUTION OF A SYNAD ROUTINE.  THE\n         ROUTINE WAS GIVEN CONTROL FOLLOWING EXECUTION OF A BSAM CHECK\n         MACRO INSTRUCTION.\n))S013 - CONFLICTING OR UNSUPPORTED PARAMETERS IN DCB; MEMBER NAME\n         SPECIFIED IN DD NOT FOUND; NO DIRECTORY ALLOCATION\n         SUBPARAMETER IN DD.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S013 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S013-RC)**\n   --POSSIBLE CAUSE--\n     DCB PARAMETERS CONFLICT, NO BLKSIZE OR NOT VALID MULTIPLE OF LRECL\n     MISSING OR MISPLACED SYSIN DD CARD\n     PARTITIONED DATA SET MEMBER NOT FOUND\n     MERGE - SORTIN01 DOES NOT CONTAIN THE MAXIMUM BLOCKSIZE\n     JCL - TRIED TO CREATE A PDS WITHOUT ALLOCATING DIRECTORY BLOCKS\n))S013-04 - AMERICAN NATIONAL STANDARD LABELS WERE SPECIFIED IN THE\n     LABEL PARAMETER OF THE DD STATEMENT, BUT ARE NOT SUPPORTED BY\n     THE SYSTEM. CORRECT THE LABEL PARAMETER.\n          - OPTCD=Q WAS SPECIFIED BUT IS NOT SUPPORTED BY THE SYSTEM.\n     CORRECT THE DCB OPTCD OPTION.\n))S013-08 - AMERICAN NATIONAL STANDARD LABELS WERE SPECIFIED IN THE\n     LABEL PARAMETER OF THE DD STATEMENT, BUT THE UNIT PARAMETER\n     SPECIFIED A 7-TRACK TAPE DRIVE.  ANSI LABELS A VALID ONLY FOR\n     9-TRACK UNITS.\n))S013-0C - A BUFFER LENGTH OF 0 WAS SPECIFIED FOR A BDAM DATASET\n     FOR WHICH DYNAMIC BUFFERING WAS REQUESTED.\n))S013-10 - AN OPEN MACRO WAS ISSUED FOR A NULL DATASET AND BLKSIZE\n     AND BUFL ARE BOTH 0. SPECIFY ONE OR THE OTHER AS NON-ZERO.\n))S013-14 - AN OPEN MACRO WAS ISSUED WITH OUTPUT OR OUTIN SPECIFIED.\n     DCB SPECIFIES DSORG=PO, BUT THE DSCB INDICATES THE DATASET IS\n     NOT PARTITIONED. CHANGE DSORG TO PS, OR CREATE DATASET AS PDS.\n          - AN OPEN MACRO WAS ISSUED WITH INPUT SPECIFIED.  THE DSCB\n     INDICATES THAT DSORG=PO, BUT THE DCB SPECIFIES NEITHER DSORG=PO\n     NOR PS.\n))S013-18 - AN OPEN WAS ISSUED FOR A PARTITIONED DATASET.  THE\n     SPECIFIED MEMBER NAME WAS NOT FOUND IN THE DATASET.\n))S013-1C - AN OPEN MACRO WAS ISSUED FOR A PARTITIONED DATASET,\n     BUT AN I/O ERROR WAS ENCOUNTERED SEARCHING THE DIRECTORY.\n))S013-20 - AN OPEN MACRO WAS ISSUED FOR A SEQUENTIAL DATASET USING\n     THE QUEUED ACCESS TECHNIQUE WITH RECFM=FB, BUT BLKSIZE IS NOT\n     A MULTIPLE OF LRECL, OR FOR VARIABLE-LENGTH RECORDS, BLKSIZE\n     IS NOT 4 BYTES GREATER THAN THE LRECL.\n))S013-24 - AN OPEN WAS ISSUED WITH INPUT, INOUT, RDBACK, OR UPDAT\n     SPECIFIED, BUT THE DCB MACRF DID NOT SPECIFY EXCP, GET, OR READ.\n))S013-28 - AN OPEN MACRO WAS ISSUED WITH OUTPUT OR OUTIN SPECIFIED,\n     BUT THE DCB DID NOT SPECIFY A MACRF OF EXCP, PUT, OR WRITE.\n))S013-2C - A SEQUENTIAL DATASET USING THE QUEUED ACCESS TECHNIQUE WITH\n     EXCHANGE BUFFERING WAS OPENED FOR INPUT, BUT THE BUFFER CONTROL\n     BLOCK ADDRESS WAS 0.\n))S013-30 - A SEQUENTIAL DATASET USING THE QUEUED ACCESS TECHNIQUE WITH\n     EXCHANGE BUFFERING WAS OPENED FOR OUTPUT, BUT THE BUFFER CONTROL\n     BLOCK ADDRESS (DCBBUFCB) WAS 0.\n))S013-34 - ONE OF THE FOLLOWING WAS DETECTED:\n     - AN OPEN MACRO WAS ISSUED FOR A DATASET WITH BLKSIZE AND\n     BUFL EQUAL TO 0.  THE SYSTEM DETERMINED THAT IT HAD TO OBTAIN\n     BUFFERS BUT WAS UNABLE TO DO SO.\n     - RECFM WAS SPECIFIED WITH BOTH A AND M ATTRIBUTES.\n     - QSAM, LRECL=0 AND RECFM WAS NOT V OR VB.\n     - RECFM=V OR VB AND LRECL > (BLKSIZE-4).\n     - QSAM AND BLKSIZE=0.\n     - RECFM NOT VARIABLE OR UNDEFINED AND LRECL > BLKSIZE.\n     - BFTEK=A,LRECL=0,RECFM=VBS.\n))S013-38 - AN OPEN MACRO WAS ISSUED FOR A SEQUENTIAL DATASET ON A\n     DIRECT ACCESS DEVICE WITH TRACK OVERFLOW, BUT THE BUFFER\n     CONTROL BLOCK ADDRESS WAS ZERO.  THIS TYPE OF ERROR OFTEN\n     OCCURS IF A DCB IS SHARED BY TWO OR MORE TASKS, OR IS\n     OPENED AND CLOSED SEVERAL TIMES WITHIN ONE JOB STEP.\n))S013-3C - A SEQUENTIAL DATASET WAS OPENED FOR INPUT OR OUTPUT,\n     BUT THE BUFFER CONTROL BLOCK ADDRESS WAS 0.  THIS TYPE OF ERROR\n     OFTEN OCCURS IF A DCB IS SHARED BY TWO OR MORE TASKS, OR IS\n     OPENED AND CLOSED SEVERAL TIMES WITHIN ONE JOB STEP.\n))S013-40 - A SEQUENTIAL OR DIRECT DATASET WAS OPENED FOR INPUT,\n     BUT THE BUFFER CONTROL BLOCK ADDRESS WAS 0.\n))S013-44 - AN OPEN MACRO WAS ISSUED FOR A DATASET ON A DIRECT ACCESS\n     DEVICE FOR WHICH CHAINED SCHEDULING WAS SPECIFIED, BUT THE BUFFER\n     CONTROL BLOCK ADDRESS WAS 0.\n))S013-48 - AN OPEN MACRO WAS ISSUED FOR A SEQUENTIAL DATASET USING THE\n     QUEUED ACCESS TECHNIQUE, BUT THE BUFFER CONTROL BLOCK ADDRESS WAS\n     ZERO.\n))S013-4C - AN OPEN MACRO WAS ISSUED FOR A SEQUENTIAL DATASET USING THE\n     QUEUED ACCESS TECHNIQUE.  THE SYSTEM DETERMINED THAT A BUFFER\n     POOL EXISTED FOR THIS DATASET AND MADE THE APPROPIATE TEST SHOWN\n     BELOW WITH UNSATISFACTORY RESULTS:\n     - IF THE DATA WAS TO BE SENT DIRECTLY TO A UNIT RECORD DEVICE (NO\n       SPOOLING), THE BUFFER LENGTH VALUE IN THE BUFFER CONTROL BLOCK\n       HAD TO BE EQUAL TO OR GREATER THAN THE VALUE SPECIFIED IN THE\n       DCB FOR LOGICAL RECORD LENGTH (LRECL).\n     - OTHERWISE, THE BUFFER LENGTH VALUE IN THE BUFFER CONTROL BLOCK\n       HAD TO BE EQUAL TO OR GREATER THAN THE VALUE SPECIFIED IN THE\n       DCB FOR BLKSIZE.\n))S013-50 - AN OPEN MACRO ISSUED FOR A DATASET ALLOCATED TO A PRINTER\n     DID NOT HAVE OUTPUT SPECIFIED AS AN OPEN OPTION.\n))S013-54 - NO SECONDARY CONTROL UNIT COULD NOT BE FOUND FOR A 1419.\n))S013-58 - AN OPEN MACRO WAS ISSUED FOR A PAPER TAPE DATASET AND\n     CONCATENATION WITH UNLIKE ATTRIBUTES WAS SPECIFIED.\n))S013-5C - AN OPEN MACRO WAS ISSUED FOR A SEQUENTIAL DATASET USING THE\n     QUEUED ACCESS TECHNIQUE.  THE DATASET CONTAINED SPANNED VARIABLE\n     LENGTH RECORDS LARGER THAN 32,756 BUT GET LOCATE MODE WAS NOT USED.\n     ALTERNATIVELY, BFTEK=A WAS SPECIFIED WITH MACRF=GM OR MACRF=PM.\n))S013-60 - AN OPEN MACRO WAS ISSUED FOR A DATASET WITH A DCB\n     SPECIFYING RECFM=F, AND BLKSIZE WAS NOT EQUAL TO LRECL.  CORRECT\n     THE RECFM TO FB, OR MAKE LRECL AND BLKSIZE EQUAL.\n))S013-64 - AN OPEN MACRO WAS ISSUED FOR A NULL DATASET USING AN\n     ACCESS METHOD OTHER THAN QSAM OR BSAM. THIS IS A NO-NO.\n))S013-68 - AN OPEN WAS ISSUED FOR A DATASET WHOSE DCB SPECIFIED\n     BLKSIZE GREATER THAN 32,767, WHICH IS THE MAXIMUM ALLOWED.\n))S013-6C - AN OPEN MACRO WAS ISSUED FOR A DATASET WITH RECFM=T IN THE\n     DCB, REQUESTING TRACK OVERFLOW, BUT THE DIRECT ACCESS DEVICE\n     DOES NOT SUPPORT TRACK OVERFLOW.\n))S013-70 - AN OPEN MACRO WAS ISSUED FOR A DATASET ON MAGNETIC TAPE.\n     A CONFLICT EXISTS AMONG LABEL PARAMETERS ON THE DD STATEMENT,\n     AND DCBRECFM, DCBOPTCD, DCBBUFOF, AND DCBUSASI GIVE THE APPEARANCE\n     OF MIXED USASI AND EBCDIC ATTRIBUTES TO THE DATASET; OR OPTCD=Q\n     WAS SPECIFIED FOR A DATASET ON A DEVICE OTHER THAN MAGNETIC TAPE.\n))S013-74 - AN OPEN MACRO WAS ISSUED FOR AN OPTICAL CHARACTER READER\n     DATASET, BUT THE OPEN OPTION DID NOT SPECIFY INPUT.\n))S013-78 - AN OPEN MACRO WAS ISSUED FOR AN OPTICAL CHARACTER READER\n     DATASET. THE BUFL PARAMETER IN THE DCB WAS SPECIFIED AS ZERO.\n))S013-7C - AN OPEN MACRO WAS ISSUED FOR AN OPTICAL CHARACTER READER\n     DATASET, BUT THE LRECL PARAMETER IN THE DCB WAS ZERO.\n))S013-80 - AN OPEN MACRO WAS ISSUED FOR AN OPTICAL CHARACTER READER\n     DATASET, BUT THE BUFL WAS LESS THAN THE LRECL.\n))S013-84 - AN OPEN MACRO WAS ISSUED FOR AN OPTICAL CHARACTER READER\n     DATASET.  THE NUMBER OF BUFFERS SPECIFIED IN THE BUFFER POOL\n     CONTROL BLOCK IS NOT THE SAME AS THAT SPECIFIED IN THE DCBBUFNO.\n))S013-88 - AN OPEN MACRO WAS ISSUED FOR A TELECOMMUNICATIONS DEVICE\n     BUT THE DCBDSORG DID NOT SPECIFY TSO.\n))S013-8C - AN OPEN MACRO WAS ISSUED FOR A DIRECT ORGANIZATION DATASET\n     (BDAM) BUT THE DCBRECFM PARAMETER WAS NOT SPECIFIED.\n))S013-A4 - A DCB WAS OPENED FOR A SYSIN OR SYSOUT DATASET BUT THE\n     DSORG WAS NOT SPECIFIED AS PS.\n))S013-A8 - AN INVALID RECORD FORMAT WAS REQUESTED FOR A SYSIN OR\n     SYSOUT DATASET.  (RECFM=D, VS, OR VBS ARE INVALID FOR SYSIN)\n))S013-AC - A QSAM OPEN WAS ISSUED WITH A NON-ZERO KEYLENGTH IN THE DCB\n     WHICH IS NOT SUPPORTED.  (NOW SUPPORTED, BUT WITH INPUT ONLY.)\n))S013-B0 - AN OPEN MACRO WAS ISSUED WITH THE RDBACK OPTION FOR A DCB\n     SPECIFYING A RECORD FORMAT OF VARIABLE SPANNED RECORDS.  THESE\n     ARE CONFLICTING PARAMETERS.\n))S013-B4 - AN OPEN MACRO WAS ISSUED WITH THE INOUT/OUTIN OPTION FOR\n     A DCB SPECIFYING THE QSAM MACRF VALUES; THESE ARE CONFLICTING\n     PARAMETERS.\n))S013-B8 - AN OPEN MACRO WAS ISSUED FOR THE 3890 DOCUMENT PROCESSOR\n     AND DCBHDR WAS NOT SPECIFIED IN THE DCB.\n))S013-BC - A SYSIN OR SYSOUT DCB WAS OPENED WITH INVALID OPTIONS.\n     EITHER OPEN SPECIFIED UPDAT OR RDBACK, OR THE POINT MACRO\n     FUNCTION WAS SPECIFIED IN MACRF=RP OR WP.  REPOSITIONING OR\n     UPDATING A SPOOLED DATASET IS NOT PERMITTED.\n))S013-C0 - A SYSIN OR SYSOUT DATASET COULD NOT BE OPENED BY A JOB\n     ENTRY SUBSYSTEM.  THE FAILING DCB IS NOT OPENED, HOWEVER THE TASK\n     IS NOT TERMINATED. PROCESSING CONTINUES FOR OTHER DCBS OPENED.\n))S013-C4 - DURING THE CREATION OF A DIRECT DATASET, THE OPEN ROUTINE\n     FOUND THAT THE DCB SPECIFIED READ(R) OR GET(G) IN THE MACRF FIELD.\n     ONLY WRITE LOAD (WL) IS ALLOWED.\n))S013-C8 - THE OPEN SUBSYSTEM EXECUTOR MODULE WAS PASSED AN ERROR\n     RETURN CODE IN REGISTER 15 AFTER ISSUING THE IEFSSREQ MACRO TO\n     CONNECT THE USER'S ACB TO THE SUBSYSTEM.  THIS INDICATES THE\n     SUBSYSTEM WAS NOT OPERATING.\n))S013-CC - SETPRT PROCESSING FAILED TO SET UP THE DEVICE DURING AN\n     OPEN FOR THE IBM 3800 PRINTING SUBSYSTEM.\n))S013-D0 - AN INVALID RECORD FORMAT OF FBS OR FS WAS SPECIFIED FOR A\n     PARTITIONED DATA SET.\n))S013-D0 - A DB/DBS RECORD FORMAT WAS SPECIFIED FOR QSAM LOCATE MODE,\n     BUT THE LOGICAL RECORD INTERFACE IS NOT PRESENT IN THE ASSOCIATED\n     BUFFER CONTROL BLOCK; IE. SEGMENT MODE IS IMPLIED.\n))S013-D8 - A CONFLICT HAS OCCURRED FOR THE SPANNED RECORD FORMAT\n     EXTENDED LOGICAL RECORD INTERFACE (XLRI).\n     BUFFER CONTROL BLOCK; IE. SEGMENT MODE IS IMPLIED.\n))S013-E4 - THE LIMIT OF 123 EXTENTS FOR A CONCATENATED PARTITIONED\n     DATA SET HAS BEEN EXCEEDED.  (USED TO BE 256 EXTENTS?)\n))S013-E8 - THE OPEN VERIFICATION FUNCTION OF THE IEFSSREQ MACRO\n     RETURNED AN ERROR CODE IN REGISTER 15.\n))S014-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S014)\n     THE TASK WHICH ISSUED A CLOSE FOR A DASD DATA SET WAS NOT\n     THE TASK WHICH OPENED THE DATA SET.\n))S016 - AN ERROR OCCURRED IN SAM SIO/PAGE FIX OR DASD END-OF-BLOCK\n     MODULES BECAUSE OF ONE OF THE FOLLOWING:\n     - THE DASD END-OF-BLOCK MODULES ISSUED AN EXCPVR SVC REQUEST ON\n       BEHALF OF A USER REQUEST, BUT A PREVIOUS EXCPVR SVC REQUEST\n       HAD NOT COMPLETED.  ONE OF THE FOLLOWINF OCCURRED:\n       - A DATA EXTENT CONTROL BLOCK (DECB) WAS USED TWICE.\n       - MULTIPLE READS OR WRITES WERE ISSUED, BUT ONLY THE LAST\n         READ OR WRITE WAS CHECKED.\n     - AN EXCPVR SVC REQUEST ON BEHALF OF A USER REQUEST WAS GOING TO\n       BE ISSUED TO READ A DATA SET THAT IS EXECUTE ACCESS PROTECTED,\n       BUT THE USER IS NOT IN SUPERVISOR STATE.\n       (THE SAM SIO APPENDAGE ISSUED THIS ABEND.)\n))S020 - DURING AN OPEN FOR A BDAM DATA SET THE CONTROL PROGRAM FOUND\n     THAT DCBMACRF DID NOT CONTAIN AN A, K OR I (RC=04), OR THE BDAM\n     DATA SET CONTAINED ZERO EXTENTS (RC=08).\n))S021 - A CALLER OF THE ASCBCHAP ROUTINE PASSED TO ASCBCHAP AN ASCB\n     ADDRESS THAT HAD BITS SET TO ONE IN ITS HIGH ORDER BYTE.\n))S022 - THE VPSS ENCOUNTERED A MISSING DEVICE END ON CONTROL PORT 0.\n))S023 - LNKLST LOOKASIDE (LLA) COULD NOT OBTAIN ALL THE LNKLST\n     DIRECTORY ENTRIES.\n))S024 - AN ABNORMAL TERMINATION OCCURRED IN PRINT SERVICES FACILITY.\n))S027 - AN ABNORMAL TERMINATION OCCURRED IN PRINT SERVICES FACILITY.\n))S028 - A PAGING OPERATION HAS NOT COMPLETED SUCCESSFULLY DUE TO ONE\n     OF THE FOLLOWING:\n     - A PERMANENT I/O ERROR OCCURRED WHILE ATTEMPTING A PAGE-IN OR\n       SWAP-IN OPERATION. THE DATA BEING PAGED IN OR SWAPPED IN IS LOST.\n     - A REAL STORAGE MANAGEMENT ROUTINE OR ANOTHER SYSTEM ROUTINE\n       PERFORMING A SERVICE FOR RSM SUFFERED AN INTERMEDIATE ERROR.\n       THE FUNCTION PERFORMED IS TERMINATED.\n     - A AUXILIARY STORAGE MANAGEMENT ROUTINE SUFFERED A TRANSLATION\n       ERROR WHILE USING THE CONTROL REGISTER OF ANOTHER ADDRESS SPACE\n       TO UPDATE THAT ADDRESS SPACE'S LSQA.\n))S029 - AN INVALID VIO REQUEST WAS DETECTED BY THE PAGE OPERATIONS\n     STARTER ROUTINE OF ASM.  THE SYS1.LOGREC ERROR RECORD CONTAINS\n     A HEXADECIMAL REASON CODE.\n))S02A - JES2 FOUND THAT DATA MANAGEMENT CONTROL BLOCKS OR THE JES2\n     UBUF CONTROL BLOCK WAS NO LONGER VALID DURING EXECUTION OF A DATA\n     MANAGEMENT REQUEST FOR A SPOOL DATA SET.\n))S02B - A USER EXIT ROUTINE ISSUED A RETURN CODE GREATER THAN THAT\n     SPECIFIED IN THE &MAXRC PARAMETER OF THE $EXIT### MACRO.\n))S02C - AN ERROR OCCURRED IN JES2 SUPPORT OF AN FSS ADDRESS SPACE.\n))S02D - THE JES2 MAIN TASK WAS ABENDED BY THE OPERATOR OR A\n     CATASTROPHIC ERROR.\n))S030 - DURING A BISAM OR QISAM OPEN DCBMACRF DID NOT INDICATE A\n     VALID MODE OF OPERATION.\n))S031 - A QISAM I/O ERROR OCCURRED.\n))S032 - DURING A BISAM OR QISAM OPEN DCBMACRF WAS NOT VALID FOR ISAM.\n))S03B - ISAM DATASET TO BE PROCESSED, BUT NOT CREATED OR ITS DCB\n         NOT CLOSED AFTER CREATION.\n   --POSSIBLE CUASE--\n     DATASET WAS TO BE WRITTEN ON BUT WAS OPENED AS INPUT\n     LRECL/BLKSIZE PROBLEM EXISTS - INVALID VALUES OR NOT MULTIPLES\n))S03D - THE ERROR OCCURRED DURING THE EXECUTION OF A QISAM OR BISAM OR\n     BDAM MACRO INSTRUCTION.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S03D OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S03D-RC)**\n))S03D-04 - AN OPEN MACRO WAS ISSUED FOR AN INDEXED SEQUENTIAL OR\n     DIRECT DATASET.  THE VOLUME SERIAL NUMBERS ON THE DD STATEMENT\n     WERE NOT SPECIFIED IN THE SAME ORDER THAT THE DATASET WAS CREATED.\n))S03D-08 - AN OPEN MACRO WAS ISSUED FOR AN INDEXED SEQUENTIAL DATASET.\n     THE FIRST VOLUME OF THE DATASET DOE NOT HAVE A FORMAT2 DSCB.\n))S03D-0C - AN OPEN MACRO WAS ISSUED FOR A DIRECT DATASET.  THE DATASET\n     HAS AN INDEXED SEQUENTIAL ORGANIZATION.\n))S047 - AN UNAUTHORIZED PROGRAM REQUESTED A RESTRICTED SVC.\n))S04B - AN INVALID OPERATION CODE WAS PASSED TO A TSO LINKAGE ASSIST\n     ROUTINE (LAR).\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S04B OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S04B-RC)**\n))S04B-04 - THE LAR (IKJEFTSL) FOR THE TERMINAL MONITOR PROGRAM (TMP)\n     RECEIVED AN INVALID FUNCTION NUMBER.\n))S04B-08 - THE SERVICE ROUTINE'S LAR (IKJTSLAR) WAS INVOKED AT\n     IKJTSLAR, WHICH IS AN INVALID SERVICE ROUTINE ENTRY POINT.\n))S04C - THE TERMINAL MONITOR PROGRAM (TMP) WAS INVOKED AT ENTRY POINT\n     IKJEFT1A AND THE TMP DETACHED A PROGRAM THAT COMPLETED WITH\n     A NON-ZERO COMPLETION CODE (WHICH IS IN REGISTER 15).\n))S04E - INTERNAL IBM DATABASE 2 (DB2) ERROR.\n))S04F - DB2 ABNORMAL TERMINATION TO AVOID DATA INTEGRITY PROBLEMS.\n))S052 - A PROGRAM MADE AN INVALID PC/AUTH REQUEST.  CHECK THE CODE IN\n     REGISTER 15.\n))S053 - A PROGRAM MADE A PC/AUTH REQUEST BUT AN ERROR PREVENTED\n     NORMAL COMPLETION. CHECK THE CODE IN REGISTER 15.\n))S064 - AN ADDRESS SPACE THAT HOLDS A CROSS MEMORY LOCAL LOCK (CML\n     LOCK) TERMINATED ABNORMALLY BEFORE IT FREED THE LOCK.\n))S071 - THE OPERATOR PRESSED THE RESTART KEY TO ACTIVATE THE SYSTEM'S\n     RECOVERY AND TERMINATION PROCESS.  THE PROGRAM RUNNING AT THE\n     TIME THE OPERATOR PRESSED THE RESTART BUTTON WAS SENT THROUGH\n     ABEND PROCESSING BECAUSE THE OPERATOR DETERMINED IT WAS IN A\n     NONCANCELABLE LOOP OR WAIT STATE.\n))S078 - RCT (REGION CONTROL TASK) PROCESSING HAS RECEIVED AN\n     UNACCEPTABLE RETURN CODE FROM AN INVOKED ROUTINE AND CANNOT\n     CONTINUE PROCESSING.  RCT RECOVERY RECORDS THE ERROR IN\n     SYS1.LOGREC, PERFORMS RESOURCE CLEAN-UP, REQUESTS A SYS1.DUMP OF\n     THE ADDRESS SPACE AND THEN REQUESTS ADDRESS TERMINATION.\n))S079 - RCT (REGION CONTROL TASK) ATTENTION EXIT PROCESSING HAS\n     RECEIVED AN UNACCEPTABLE RETURN CODE FROM AN INVOKED ROUTINE AND\n     CANNOT CONTINUE PROCESSING.  RCT RECOVERY RECORDS THE ERROR IN\n     SYS1.LOGREC, PERFORMS RESOURCE CLEAN-UP, REQUESTS A SYS1.DUMP OF\n     THE ADDRESS SPACE AND THEN REQUESTS ADDRESS TERMINATION.\n))S07C - SUPERVISOR CONTROL RECOVERY HAS DETECTED AN ERROR WHICH\n     REQUIRES THAT THE CURRENT TASK BE TERMINATED OR THAT THE CURRENT\n     ADDRESS SPACE BE TERMINATED.\n))S07F - DURING RECOVERY, VERIFICATION OF THE TCB QUEUE ASSOCIATED WITH\n     THE TERMINATED ADDRESS SPACE RESULTED IN AN EMPTY TCB QUEUE.\n     THE ADDRESS SPACE OR JOB IS TERMINATED. RESUBMIT THE JOB.\n))S0A7 - DURING Z NET,CANCEL COMMAND PROCESSING, VTAM FOUND THAT A USER\n     HAD NOT SPECIFIED A TPEND EXIT ROUTINE, OR VTAM COULD NOT SCHEDULE\n     A USER'S TPEXIT ROUTINE.\n))S0A8 - VTAM DETECTED AN ERROR DURING EXECUTION OF AN APPLICATION\n     PROGRAM.  THE TWO LOW-ORDER BYTES OF REGISTER 15 CONTAIN A\n     HEXADECIMAL REASON CODE.\n        2101--A VTAM VALIDITY CHECK OF THE USER'S RPL FAILED BECAUSE\n              THE RPL DOES NOT HAVE THE SAM PROTECTION KEY AS THE\n              APPLICATION PROGRAM'S TCB.\n        7001--THE USER'S RPL OR ECB IS INVALID.\n))S0A9 - EITHER A HALT NET,CANCEL COMMAND WAS ENTERED OR AN ERROR\n     OCCURRED DURING EXECUTION OF A VTAM MODULE.  THE TWO\n     LOW-ORDER BYTES OF REGISTER-15 CONTAIN A HEXIDECIMAL\n     REASON CODE.\n        0000--A HALT NET,CANCEL COMMAND HAS BEEN PROCESSED.\n        10F1--THE ACF/VTAM STAE RETRY ROUTINE ISSUED AN ABEND\n              0A9 IN ORDER TO GIVE CONTROL TO THE USER RECOVERY\n              ROUTINE (STAE EXIT ROUTINE).\n        3100--THERE ARE NOT ENOUGH I/O BUFFERS TO SATISFY A\n              VTAM STORAGE REQUEST.\n        3111--A VTAM MODULE FINISHED PROCESSING BEFORE IT\n              RELEASED A LOCK.\n        3141--A VTAM DESTINATION VECTOR TABLE (DVT) ENTRY\n              IS INVALID FOR THE DEFINED ATTACHMENT.\n        7002--A VTAM REQUEST FOR STORAGE FAILED\n        7003--A VTAM REQUEST TO RELEASE STORAGE FAILED BECAUSE\n              THE STORAGE HAD ALREADY BEEN RELEASED.\n        7004--VTAM COULD NOT OBTAIN A LOCAL MEMORY LOCK.\n        7009--VTAM WAS UNABLE TO RESTORE ITS REGISTERS AFTER A\n              USER EXIT ROUTINE RETURNED CONTROL TO VTAM.\n        7071--A RELSTORE WAS ISSUED FOR A PREVIOSLY FREED BUFFER.\n        7141--CONTROL CANNOT BE PASSED TO THE PROPER VTAM MODULE.\n              EITHER A VTAM DESTINATION VECTOR TABLE ENTRY IS INVALID\n        FOR THE DEFINED ATTACHMENT OR VTAM STOARGE HAS BEEN ALTERED.\n))S0AA - AN ABEND CONDITION OCCURRED DURING EXECUTION OF VTAM.\n         THE ERROR COULD NOT BE ASSOCIATED WITH ANY PARTICULAR TCB.\n         ALL TASKS IN THE ADDRESS SPACE ARE ABNORMALLY TERMINATED.\n))S0AE - IOS SUPPORT OF SYSTEM RESTART PROCESSING FOUND THAT THE I/O\n         PURGE MODULE (IGC0001F) WAITING FOR THE COMPLETION OF AN I/O\n         REQUEST.  THE SYSTEM ABNORMALLY TERMINATES ALL TASKS IN THE\n         ADDRESS SPACE, THEN THE SYSTEM TERMINATES THE ADDRESS SPACE.\n))S0B0 - AN UNCORRECTABLE ERROR WAS DETECTED BY THE SWA MANAGER.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S0B0 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S0B0-RC)**\n))S0B0-04 - INVALID FUNCTION REQUESTED.\n))S0B0-08 - INVALID SVA (DOES NOT POINT TO THE BEGINNING OF A SWA\n     PREFIX OR THE SWA PREFIX HAS BEEN DESTROYED).\n))S0B0-0C - ATTEMPTING TO READ A BLOCK NOT YET WRITTEN.\n))S0B0-10 - INVALID LENGTH (0 OR NEGATIVE FOR ASSIGN LOCATE OR\n     ATTEMPTING TO READ OR WRITE A RECORD, WHICH IS NOT 176 BYTES, IN\n     MOVE MODE).\n))S0B0-14 - INVALID COUNT FIELD (0 FOR READ, WRITE, ASSIGN OR 00 FOR\n     WRITE AND ASSIGN).\n))S0B0-18 - QMNGRIO MACRO WAS ISSUED WITH BOTH OR NEITHER OF THE READ\n     AND WRITE BITS SET.\n))S0B0-1C - INVALID ID (THE CALLER ATTEMPTED TO WRITE A BLOCK FOR THE\n     FIRST TIME AND HAS EITHER PASSED A NON-EXISTING ID OR HAS FAILED\n     TO PASS ONE AND THE BLOCK DOES NOT HAVE AN IMBEDDED ID).\n))S0B0-20 - INVALID BLOCK POINTER (WRITE LOCATE IS ATTEMPTING TO WRITE\n     AND IS PASSING A BLOCK POINTER WHICH IS NOT VALID FOR THE SVA\n     REQUESTED).\n))S0C1 - OPERATION EXCEPTION - AN OPERATION CODE IS NOT ON THE MACHINE\n   --POSSIBLE CAUSE--\n     SUBSCRIPT ERROR - CLOBBERED CODE\n     TRIED TO READ A FILE THAT WAS NOT OPEN\n     MISSPELLED DDNAME\n     ERROR IN PARAMETERS PASSED TO SUBROUTINES\n     MISSING DD CARD\n     RECORDING MODE WAS WRONG, OR DENSITY WAS INCORRECT\n     BAD LOAD MODULE, POSSIBLE BAD OBJECT DECK OR MISSING SUBROUTINE\n     FORTRAN - MISSING DIMENSION STATEMENT, SAME NAME FOR ARRAY AND A\n             SUBROUTINE\n     COBOL - SUBROUTINE PROG ID WAS THE SAME AS THE ENTRY NAME\n     COBOL - TRIED TO CALL WITHIN COBOL F SORT INPUT/OUTPUT PROCEDURE\n     COBOL - TRIED TO CALL A SUBROUTINE WHICH COULD NOT BE FOUND\n     COBOL - INCOMPLETE DCB FOR SORTIN\n     COBOL - USING SORT VERB, DDNAME WAS NOT SORTOUT WHEN THE GIVING\n             OPTION WAS USED.\n     COBOL - EXECUTING SORT-USING AFTER OPENING SORTIN\n))S0C2 - PRIVILEGED OPERATION EXCEPTION\n   --POSSIBLE CAUSE--\n     UNINTENTIONAL BRANCH TO INVALID INSTRUCTION DUE TO SUBSCRIPT ERROR\n     COBOL - MISSING PERIOD AT END OF PARAGRAPH OR PARAGRAPH NAMES\n           - MISSING GOBACK AFTER SORT VERB - LOGIC FELL INTO INPUT\n                PROCEDURE\n           - ACCEPT VERB EXECUTED WHEN NO SYSIN DD WAS AVAILABLE.\n))S0C3 - EXECUTION EXCEPTION - THE SUBJECT INSTRUCTION OF EXECUTE\n         IS ANOTHER EXECUTE.\n   --POSSIBLE CAUSE--\n     UNINTENTIONAL BRANCH, LOSS OF ADDRESSABILITY.\n))S0C4 - PROTECTION EXCEPTION - A VIRTUAL ADDRESS COULD NOT BE\n         TRANSLATED INTO A REAL ADDRESS.\n   --POSSIBLE CAUSE--\n     INVALID ADDRESS WAS REFERENCED DUE TO SUBSCRIPT ERROR OR BAD PARMS\n     THE KEY OF AN INSTRUCTION OR AN OPERAND IN STORAGE DOES NOT\n          MATCH THE PROTECTION KEY IN THE PSW (INTERRUPT CODE 4)\n     THE VIRTUAL SEGMENT OR PAGE WAS NEVER ALLOCATED\n          (INTERRUPT CODE 10 OR 11, RESPECTIVELY)\n     THE PAGE WAS PAGED OUT AND THE ROUTINE REQUESTING THE CODE WAS\n          DISABLED FOR I/O INTERRUPTS (INTERRUPT CODE 11)\n     COBOL - IN GROUP MOVE, RECEIVING RECORD VARIABLE LENGTH DEFINED\n                WRONG\n           - TRIED MOVING VAR. LENGTH REC. LARGER THAN TARGET FIELD MAX\n           - TRIED TO READ OR WRITE A FILE WHICH WAS NOT OPEN\n           - USED DD DUMMY AND LOGIC SAYS AT END MOVE HIGH VALUES TO FD\n           - TRIED TO CALL WITHIN COBOL F SORT INPUT/OUTPUT PROCEDURE\n           - U WITH SORT - TRIED TO GOBACK IN THE OUTPUT PROCEDURE\n))S0C5 - ADDRESSING EXCEPTION - AN ADDRESS BEYOND THE AVAILABLE REAL\n             STORAGE WAS REQUESTED\n   --POSSIBLE CAUSE--\n     SEE S0C1 FOR MORE INFORMATION\n     SUBSCRIPT ERROR - REFERENCED BEYOND TABLE IN PROGRAM RUNNING V=R\n     COBOL - PERFORMED PROCEDURE NOT EXITED PROPERLY\n           - RECORD DESCRIBED TOO SHORT\n           - REFERENCED A RECORD WITHOUT GIVING A READ\n           - TRIED TO USE WRITE WITHOUT FROM OPTION ON APPLY WRITE\n                ONLY FILE\n))S0C6 - SPECIFICATION EXCEPTION - AN INCORRECT BOUNDARY WAS SPECIFIED.\n     USUALLY CAUSED BY UNINTENTIONAL BRANCH TO INVALID INSTRUCTION.\n))S0C7 - DATA EXCEPTION - DECIMAL DATA IS INCORRECT OR IMPROPERLY\n            OVERLAPPED OR NOT VALIDLY INITIALIZED.\n   --POSSIBLE CAUSE--\n     SUBSCRIPT ERROR, REFERENCED BEYOND TABLE\n     COBOL - WORKING STORAGE NOT INITIALIZED\n           - BAD DATA, SHOULD CHECK DATA FOR ERRORS\n           - GARBAGE IN A FIELD BEING TESTED OR DISPLAYED\n           - MOVE ZEROES TO GROUP LEVEL IS DISPLAY, HAD SUBLEVELS\n                THAT WERE NOT\n           - PERIOD MISSING AFTER IMPERATIVE STATEMENTS WITHIN AT END\n                CLAUSE\n           - BINARY FIELD IN AN ARITHMETIC OPERATION IS NOT LARGE\n                ENOUGH TO ACCEPT RESULT\n     (FOR MORE INFORMATION, SEE DESCRIPTION OF S0C1)\n))S0C8 - FIXED POINT OVERFLOW EXCEPTION\n     NOTE - MASKED BY FORTRAN\n))S0C9 - FIXED POINT DIVIDE EXCEPTION\n     NOTE - MASKED BY FORTRAN\n))S0CA - DECIMAL OVERFLOW EXCEPTION\n     THE DESTINATION FIELD IS TOO SMALL TO CONTAIN THE RESULT FIELD\n         IN A DECIMAL OPERATION.\n))S0CB - DECIMAL DIVIDE EXCEPTION\n     A QUOTIENT EXCEEDS THE SPECIFIED DATA FIELD SIZE.\n))S0CC - EXPONENT OVERFLOW EXCEPTION\n     A FLOATING POINT NUMBER EXCEEDS THE MAXIMUM SIZE.\n     NOTE - THIS ERROR IS DETECTED AND FIXED IN FORTRAN\n))S0CD - EXPONENT UNDERFLOW EXCEPTION\n     A FLOATING POINT NUMBER IS SMALLER THAN THE MINIMUM.\n     NOTE - FORTRAN WILL SET THE RESULT TO ZERO AND CONTINUE PROCESSING\n))S0CE - SIGNIFICANCE EXCEPTION\n     A FLOATING POINT ADDITION OR SUBTRACTION RESULTS IN AN ALL ZERO\n         FRACTION\n     NOTE - THIS IS MASKED IN FORTRAN\n))S0CF - FLOATING POINT DIVIDE EXCEPTION - DIVIDE BY ZERO\n     NOTE - THIS ERROR IS DETECTED AND NOTED BY FORTRAN\n))S0D2 - A PROGRAM CHECK WAS DETECTED; AN INTERRUPTION CODE OF 18\n     X'12' (TRANSLATION SPECIFICATION EXCEPTION) HAS OCCURRED.  THERE\n     IS INVALID DATA IN EITHER CONTROL REGISTERS ZERO OR ONE, OR A\n     SEGMENT OR PAGE TABLE.  THE ERROR IS THE RESULT OF A HARDWARE\n     ERROR OR A PROGRAM RUNNING IN KEY ZERO HAS CAUSED DATA DAMAGE.\n))S0D3 - A PROGRAM CHECK, INTERRUPTION CODE 19 X'13' (SPECIAL OPERATION\n     ERROR) HAS OCCURRED.  A PRIVILEGED PROGRAM ISSUED A SET SYSTEM\n     MASK. THIS INSTRUCTION IS NOT VALID IN OS/VS2 (SINCE RELEASE 2).\n))S0D9 - A PROGRAM CHECK, INTERRUPTION CODE 38 (PAGE FAULT ASSIST\n     ERROR) HAS OCCURRED.  EITHER A HARDWARE ERROR OCCURRED OR A\n     PROGRAM RUNNING IN KEY ZERO CAUSED DATA DAMAGE.\n))S0E0 - AN INVALID OR UNRECOGNIZED PROGRAM INTERRRUPT OCCURRED.\n   --POSSIBLE CAUSE--\n     THIS LEVEL OF MVS IS NOT THE CORRECT ONE FOR THE HARDWARE,\n     ESPECIALLY IF THE INTERRUPT CODE IS UNKNOWN.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S0E0 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S0E0-RC)**\n))S0E0-1D - A SQUARE ROOT EXECEPTION OCCURED.\n))S0E0-1E - AN UNNORMALIZED OPERAND EXECEPTION OCCURED.\n))S0E0-28 - RESERVED BIT POSITIONS IN AN ALET WERE NON-ZERO.\n))S0E0-29 - AN ALET SPECIFIED AN INVALID ACCESS LIST ENTRY.\n))S0E0-2A - AN ALET SPECIFIED A PREVIOUSLY DELETED ACCESS LIST ENTRY.\n))S0E0-2B - AN ACCESS LIST ENTRY SPECIFIED AN INVALID DATA SPACE.\n))S0E0-2C - THE SEQUENCE NUMBER IN THE ASTE THAT THE ACCESS LIST ENTRY\n     REFERS TO IS NOT EQUAL TO THE NUMBER IN THE ACCESS LIST ENTRY.\n))S0E0-2D - A PRIVATE ACCESS LIST ENTRY IS SPECIFIED, AND THE CURRENT\n     EAX IS NOT AUTHORIZED TO THE TARGET ADDRESS SPACE.\n))S0E0-30 - A STACKING INTRUCTION WAS ISSUED WHEN THE LINKAGE STACK\n     WAS FULL.\n))S0E0-31 - AN UNSTACKING INTRUCTION WAS ISSUED WHEN THE LINKAGE STACK\n     HAS NO STACK ENTRIES.\n))S0E0-32 - A LINKAGE STACK SPECIFICATION INTERRUPT OCCURED.\n))S0E0-33 - AN INVALID LINKAGE STACK ENTRY (LSE) TYPE WAS ENCOUNTERED\n     BY THE HARDWARE OR BY AN UNSTACKING OPERATION.\n))S0E0-34 - A PR INSTRUCTION WAS ISSUED AGAINST A LINKAGE STACK ENTRY\n     THAT HAS THE UNSTACK SUPPRESSION BIT SET.  MVS SETS THIS BIT IN\n     A LINKAGE STACK ENTRY TO PREVENT SVC ROUTINES FROM UNSTACKING\n     ENTRIES THEY DID NOT ADD TO THE STACK.\n))S0E1 - THE ERROR OCCURRED WHILE PROCESSING THE FIRST EXCP OF A VIO\n     DATASET. PLEASE REPORT THIS PROBLEM TO THE SYSTEMS GROUP.\n))S0E2 - THE ERROR OCCURRED WHILE PROCESSING THE FIRST EXCP OF A VIO\n     DATASET.  THE SYSTEM WAS UNABLE TO ASSIGN, LOCATE, FIX, FREE, OR\n     ACCESS VIO PAGES FOR THE DATASET.  PLEASE REPORT THIS PROBLEM\n     TO THE SYSTEMS GROUP.\n))S0E3 - THE ERROR OCCURRED WHILE PROCESSING A VIO DATASET.  THE SYSTEM\n     WAS UNABLE TO ASSIGN, LOCATE, FIX, FREE, OR ACCESS VIO PAGES FOR\n     THE DATASET. PLEASE REPORT THIS PROBLEM TO THE SYSTEMS GROUP.\n))S0E4 - THE ERROR OCCURRED WHILE TRYING TO SCRATCH A VIO DATASET.\n     PLEASE REPORT THIS PROBLEM TO THE SYSTEMS GROUP.\n))S0E5 - UNABLE TO DISCONNECT THE VIRTUAL TRACK BUFFER FORM THE VIO\n     DATASET. PLEASE REPORT THIS PROBLEM TO THE SYSTEMS GROUP.\n))S0E6 - UNABLE TO PROCESS A DATA SET THAT HAS ALREADY BEEN SCRATCHED.\n))S0F0 - AN ERROR OCCURRED WHILE PROCESSING A MACHINE CHECK\n     INTERRUPTION.  IN AN ATTEMPT TO RECOVER THE SYSTEM THE INTERRUPTED\n     TASK WAS TERMINATED.\n))S0F1 - PROGRAM INTERRUPTION IN I/O INTERRUPTION HANDLER\n     RECORD DESCRIBED AS WRONG LENGTH\n))S0F2 - I/O INTERRUPT PROCESSING ERROR. I/O RECOVERY ROUTINE FAILED.\n     CLOBBERED IOB OR OTHER SVC PARAMETERS - SEE S0C1\n))S0F3 - MACHINE CHECK INTERRUPTION\n     DISK I/O FAILURE OR MACHINE TROUBLE\n))S0F8 - THE ISSUER OF AN SVC WAS EITHER IN SRB MODE, HELD A LOCK,\n         WAS DISABLED, OR WAS IN CROSS MEMORY MODE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S0F8 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S0F8-RC)**\n))S0F8-04 - THE SVC ISSUER WAS NOT IN TCB MODE.\n))S0F8-08 - THE SVC ISSUER HELD A LOCK.\n))S0F8-0C - THE SVC ISSUER WAS DISABLED.\n))S0F8-10 - THE SVC ISSUER WAS IN CROSS MEMORY MODE.\n))S0F8-14 - THE SVC ISSUER HAD AN ENABLED UNLOCKED TASK MODE FRR.\n            IE. EUT=YES WAS SPECIFIED ON THE SETFRR MACRO.\n))S0F8-18 - THE SVC ISSUER WAS IN AR ADDRESS SPACE CONTROL MODE\n            FOR AN SVC WHICH DOES NOT ALLOW THIS.\n))S0F8-1C - THE SVC ISSUER WAS NOT AUTHORIZED FOR SVC MICROCODE ASSIST.\n))S0F9 - THE ERROR OCCURRED WHILE TRYING TO ACQUIRE OR RELEASE AN SVRB.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S0F9 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S0F9-RC)**\n))S0F9-00 - LSQA HAS BEEN EXHAUSTED AND AN SVRB CANNOT BE CREATED TO\n   HONOUR AN SVC REQUEST IN THE ADDRESS SPACE.\n))S0F9-04 - AN SVRB BEING FREED MAY NOT BELONG TO THE SVRB POOL.\n))S0FB - A TRANSLATION EXCEPTION HAS OCCURRED.  INVALID CONTENTS\n         WERE DETECTED IN CONTROL REGISTER 0.\n))S0FC - A TRANSLATION ERROR OCCURRED WHILE REFERENCING DATA NOT IN\n         THE HOME ADDRESS SPACE. BAD DAT TABLES OR WRONG STO ADDRESS.\n))S0FD - A TYPE 6 SVC REQUESTED THE SVC FIRST LEVEL INTERRUPT HANDLER\n         (FLIH) TO SCHEDULE A CROSS MEMORY SRB.\n         T6EXIT MACRO POINTS TO SRB WHERE SRBASCB IS NOT HOME ASCB.\n))S0FE - AN ERROR WAS DETECTED WHILE RMF WAS SAMPLING DATA ABOUT\n         THE STATE OF THE SYSTEM.\n))S100 - A DEVICE TO BE USED WAS NOT OPERATIONAL OR A PSEUDO DEVICE\n         PREVIOUSLY ALLOCATED HAS BEEN REALLOCATED.\n))S101 - DURING EXECUTION OF A WAIT MACRO, THE PROBLEM PROGRAM\n         SPECIFIED MORE EVENTS THAN THERE WERE ECBS.\n))S102 - THE ERROR OCCURRED DURING EXECUTION OF A POST MACRO\n   INSTRUCTION.  THE CONTROL PROGRAM FOUND AN INVALID EVENT CONTROL\n   BLOCK ADDRESS, OR THE ECB WAS IN A STORAGE AREA WITH A PROTECTION\n   KEY DIFFERENT FROM THAT OF THE TASK ISSUING THE MACRO.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S102 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S102-RC)**\n))S102-00 - INVALID ECB FOR POST IN THE USER'S KEY.\n))S102-04 - INVALID ECB FOR AN XMPOST (CROSS MEMORY POST).\n))S102-08 - INVALID ECB FOR BRANCH ENTRY POST IN THE USER'S KEY.\n))S102-0C - INVALID ECB FOR BRANCH ENTRY XMPOST.\n))S104 - GETMAIN ERROR.  AN AUTHORIZED PROGRAM REQUESTED VIRTUAL\n     STORAGE THAT REQUIRES MORE REAL STORAGE THAN IS AVAILABLE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S104 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S104-RC)**\n))S104-04 - NOT ENOUGH REAL STORAGE FOR SPACE IN SQA SUBPOOL.\n))S104-08 - NOT ENOUGH REAL STORAGE FOR SPACE IN FIXED CSA SUBPOOL.\n))S104-0C - NOT ENOUGH REAL STORAGE FOR SPACE IN LSQA SUBPOOL.\n))S104-1C - LSQA REQUEST FAILED - PAGE TABLE PAGED OUT.\n))S104-20 - AUTHORIZED PRIVATE REQUEST FAILED - PAGE TABLE PAGED OUT.\n))S106 - AN ERROR WAS DETECTED BY THE CONTROL PROGRAM WHEN IT ATTEMPTED\n     TO FETCH THE REQUESTED PROGRAM INTO VIRTUAL STORAGE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S106 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S106-RC)**\n   --POSSIBLE CAUSE--\n     PREVIOUS LKED STEP FAILED TO OUTPUT A SYSLMOD, NEEDS LARGER SIZE=\n     I/O ERROR - MACHINE TROUBLE OR DISK FAILURE\n))S106-0B - A PROGRAM CHECK OR LOOP OCCURRED IN FETCH.\n))S106-0C - NOT ENOUGH STORAGE WAS AVAILABLE FOR FETCH TO DO A GETMAIN\n     FOR THE MODULE OR CONTROL BLOCKS.  CHECK REGISTER 0:\n          04 - NO STORAGE FOR DATD.\n          08 - NO STORAGE FOR DEB.\n          0C - NO STORAGE FOR IOSB.\n          10 - NO STORAGE FOR EXLIST.\n          14 - NO STORAGE FOR MODULE.\n          18 - UNABLE TO FIX STORAGE.\n))S106-0D - THE CONTROL PROGRAM FOUND AN INVALID RECORD TYPE IN THE\n     LOAD MODULE.\n))S106-0E - THE CONTROL PROGRAM FOUND AN INVALID ADDRESS IN THE LOAD\n     MODULE.  CHECK REGISTER 0:\n          20 - ERROR CONVERTING TTR.\n          24 - BLOCK IS OUTSIDE OF THE MODULE.\n          28 - AN ADCON LOCATION IS INVALID.\n))S106-0F - AN UNCORRECTABLE INPUT/OUTPUT ERROR OCCURRED, THE LOAD\n     MODULE HAD AN ERROR WHICH CAUSED THE CHANNEL PROGRAM TO FAIL,\n     OR A LINKLIST LIBRARY EXPANDED INTO ANOTHER EXTENT SINCE IPL.\n     CHECK REGISTER 0:\n          40 - I/O ERROR ON A PDS.\n          44 - ERROR ON A VIRTUAL DS.\n          48 - SEEK ADDRESS OUTSIDE EXTENT.\n))S106-10 - THE CONTROL PROGRAM DETECTED A RELOCATION ERROR IN THE\n     LOAD MODULE.\n))S10A - GETMAIN ERROR.  A PROGRAM REQUESTED VIRTUAL STORAGE THAT\n     REQUIRES MORE REAL STORAGE THAN IS AVAILABLE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S10A OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S10A-RC)**\n))S10A-04 - NOT ENOUGH REAL STORAGE FOR SPACE IN SQA SUBPOOL.\n))S10A-08 - NOT ENOUGH REAL STORAGE FOR SPACE IN FIXED CSA SUBPOOL.\n))S10A-0C - NOT ENOUGH REAL STORAGE FOR SPACE IN LSQA SUBPOOL.\n))S10A-1C - LSQA REQUEST FAILED - PAGE TABLE PAGED OUT.\n))S10A-20 - AUTHORIZED PRIVATE REQUEST FAILED - PAGE TABLE PAGED OUT.\n))S10B - TIME SERVICE ROUTINE ERROR - ERROR IN INPUT PARAMETERS.\n))S10D - JOBSTEP TASK ABENDED WHEN A SUBTASK THAT IS ALSO A JOBSTEP\n         TASK IS IN STEP-MUST-COMPLETE STATUS.\n))S10E - SPIE MACRO ERROR. THE PICA ADDRESS IS INVALID.\n))S112 - INVALID INPUT WAS PASSED TO SVC 18 BY THE BLDL OR FIND MACRO.\n     REQUIRES MORE REAL STORAGE THAN IS AVAILABLE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S112 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S112-RC)**\n   --POSSIBLE CAUSE--\n     THE DCB HAS BEEN OVERLAID, ESPECIALLY DCBDEBAD OR DCBPOINT.\n))S112-01 - PARAMETER LIST NOT IN CALLER'S STORAGE.\n))S112-02 - DCB NOT IN CALLER'S STORAGE.\n))S112-03 - DCB DOES NOT POINT TO A VALID DEB.\n))S112-04 - PROGRAM CHECK OCCURRED IN THE POINT ROUTINE.\n))S112-13 - DCB DOES NOT POINT TO A VALID DEB. DCB DUMPED TO GTF.\n))S112-14 - PROGRAM CHECK OCCURRED IN THE POINT ROUTINE.\n   THE DCB IS DUMPED TO THE GTF DATA SET.\n))S113 - AN ERROR OCCURRED DURING AN OPEN WITH A TYPE=J OPERAND.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S113 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S113-RC)**\n))S113-08 - A JFCB EXTENSION BLOCK WAS NEEDED FOR PROCESSING A\n   PHYSICAL SEQUENTIAL DATA SET BUT NONE WAS AVAILABLE.\n))S113-0C - AN OPEN TYPE=J WAS ISSUED, BUT NO JFCB EXIT WAS FOUND IN\n   THE DCB EXIT LIST.  SPECIFY A JFCB EXIT, SUPPLY THE JFCB.\n))S113-18 - A JFCB EXTENSION BLOCK WAS NEEDED FOR PROCESSING A DIRECT\n   OR INDEX SEQUENTIAL DATA SET.\n))S113-20 - END-OF-VOLUME ENCOUNTERED FOR A VSAM DATA SET.\n   MULTI-VOLUME VSAM FILES CANNOT BE OPENED WITH A DCB.\n))S113-24 - OPEN ISSUED TO A MULTI-VOLUME VSAM DATA SET.\n   MULTI-VOLUME VSAM FILES CANNOT BE OPENED WITH A DCB.\n))S113-28 - OPEN ATTEMPT FOR CONCATENATED VSAM USING A DCB.\n))S113-2C - OPEN ATTEMPT FOR VSAM USING A DCB WHEN THE CALLER\n   WAS NOT APF AUTHORIZED OR IN SUPERVISOR STATE.\n))S113-30 - INVALID JCL DISPOSITION DETECTED FOR VSAM OPENED WITH A\n   DCB.  ONLY ALLOWED (OLD,KEEP,KEEP) OR (SHR,KEEP,KEEP).\n))S113-34 - AN UNSUPPORTED DCB OPTION WAS SPECIFIED FOR A VSAM DATA\n   SET OPENED WITH A DCB.  ONLY VALID OPTIONS ARE INPUT AND UPDAT.\n))S113-38 - AN OPEN WAS ISSUED FOR A VSAM DATA SET WITH A DCB,\n   BUT THE VTOC DOES NOT INDICATE THAT IT IS A VSAM DATA SET.\n))S115 - SVC 21 (STOW) ERROR.  THE DCB DID NOT POINT TO A VALID DEB,\n   OR THE DEB DID NOT POINT BACK TO THE DCB.\n))S117 - AN I/O ERROR OCCURRED DURING A BSAM CLOSE TYPE=T MACRO.\n))S118 - INVALID PARAMETERS WERE PASSED TO DEVTYPE (SVC 24).\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S118 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S118-RC)**\n))S118-01 - THE DDNAME (ADDRESS IN GPR 1) WAS NOT IN CALLER'S REGION.\n))S118-02 - OUTPUT AREA (ADDRESS IN GPR 0) WAS NOT IN CALLER'S REGION.\n))S11A - A PROTECTION CHECK OCCURRED WHEN THE SYSTEM TRIED TO STORE\n     INTO A USER SUPPLIED OS/VS CAMLST WORK AREA.\n))S121 - A MODULE ISSUED SVC 33 (IOHALT) WITH THE LOW ORDER BIT OF\n     GPR1 OFF, WHICH INDICATES THE PRE-XA (2-BYTE UCB ADDR) INTERFACE.\n))S122 - EITHER THE OPERATOR OR THE JOB ENTRY SUBSYSTEM CANCELLED THE\n     JOB, REQUESTING A DUMP. CHECK THE JOB LOG LISTING FOR MORE INFO.\n))S128 - AN INVALID ADDRESS LIST WAS SPECIFIED FOR AN EXTRACT MACRO.\n     LIST NOT ON A FULLWORD BOUNDARY OR NOT IN JOB STEP'S STORAGE.\n))S12D - INVALID SEGMENT TABLE IN AN OVERLAY PROGRAM\n     SEE S0C1\n))S12E - ERROR FOUND IN INPUT PARAMETERS TO TTIMER SERVICE ROUTINE.\n))S130 - THE DEQ MACRO SPECIFIED A RESOURCE NOT PREVIOUSLY SPECIFIED BY\n     BY AN ENQ MACRO.  THAT IS, THE PROGRAM HAD NOT REQUESTED CONTROL\n     OF A RESOURCE IT WAS ATTEMPTING TO RELEASE.\n))S137 - I/O ERROR IN END OF VOLUME LABEL PROCESSING ON MAGNETIC TAPE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S137 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S137-RC)**\n))S137-04 - AN I/O ERROR OCCURRED WHILE WRITING AN END OF VOLUME\n     LABEL OR TAPE MARK.\n))S137-08 - AN I/O ERROR OCCURRED WHILE POSITIONING THE TAPE IN\n     PREPARATION FOR LABEL PROCESSING.\n))S137-0C - AN I/O ERROR OCCURRED READING A TRAILER LABEL FOR A\n     DATASET OPENED WITH THE INPUT OR INOUT OPTION, OR READING THE\n     HEADER LABEL FOR A DATASET OPENED WITH THE RDBACK OPTION.\n))S137-10 - AN I/O ERROR OCCURRED WHILE POSITIONING A MAGNETIC\n     TAPE AT THE END OF THE DATASET.\n))S137-14 - AN I/O ERROR OCCURRED READING HEADER LABELS FOR A DATASET\n     OPENED FOR INPUT OR INOUT, OR READING THE TRAILER LABEL FOR A\n     DATASET OPENED FOR RDBACK.\n))S137-18 - AN I/O ERROR OCCURRED WHILE POSITIONING A MAGNETIC TAPE\n     DATASET AT THE FIRST DATA RECORD, OR ON A READ BLOCK ID COMMAND\n     USED TO ESTABLISH THE TAPE POSITION.\n))S137-1C - AN INVALID TRAILER LABEL WAS READ DURING END OF VOLUME.\n))S137-20 - AN INVALID HEADER LABEL WAS READ DURING END OF VOLUME.\n))S137-24 - A SPECIFIC VOLUME SERIAL NUMBER WAS SPECIFIED FOR THE\n     SECOND OR SUBSEQUENT VOLUME OF AN OUTPUT DATASET ON MAGNETIC\n     TAPE.  DURING EOV PROCESSING, IT WAS DISCOVERED THAT THE\n     EXPIRATION DATE (FROM THE HDR1 LABEL OF THE FIRST DATASET\n     CURRENTLY ON THE SPECIFIED VOLUME) HAD NOT PASSED.  WHEN\n     REQUESTED TO SPECIFY WHETHER THE VOLUME COULD BE USED IN SPITE\n     OF THE EXPIRATION DATE, THE OPERATOR DID NOT REPLY 'U'.\n     ASK THE OPERATOR TO REPLY 'U' OR SPECIFY ANOTHER VOLUME SERIAL.\n))S137-28 - THE OPERATOR REPLIED 'M' (REJECT VOL1 LABEL REWRITE)\n     TO MESSAGE IEC704A.\n))S137-2C - THE INPUT VOLUME CONTAINS AN ISCII/ASCII VOLUME LABEL WITH\n     A STANDARD VERSION LABEL THAT IS NOT 1 OR 3.\n))S137-30 - A LABEL VIOLATED THE PUBLISHED STANDARD FOR THE LABEL, AND\n     THE LABEL VALIDATION EXIT REQUESTED OPEN/EOV TO REJECT THE VOLUME.\n))S137-38 - AN I/O ERROR OCCURRED WHILE PROCESSING A READ BLOCK ID TO\n     ESTABLISH THE TAPE POSITION.\n))S138 - THE ERROR OCCURRED DURING THE EXECUTION OF AN ENQ MACRO.\n     TWO ENQ MACROS WERE ISSUED FOR THE SAME RESOURCE IN THE SAME TASK\n     WITHOUT AN INTERVENING DEQ MACRO.  THE SECOND ENQ MACRO DID NOT\n     SPECIFY TEST, USE, OR HAVE IN ITS RET OPERAND.\n))S13E - THE TASK WHICH CREATED A SUBTASK HAS ISSUED A DETACH FOR\n     THAT SUBTASK, SPECIFYING STAE=NO, BEFORE THAT SUBTASK HAS\n     TERMINATED.\n))S14F - THE ROUTINE ATTEMPTED TO EXECUTE THE STATUS MACRO INSTRUCTION\n     FOR OTHER THAN THE STOP, STOP SYNCH, OR START FUNCTION AND WAS NOT\n     IN SUPERVISOR KEY (0-7).\n))S16E - THE CONTROL PROGRAM REQUESTED THAT A DEBCHK FUNCTION BE\n     PERFORMED ON A DATA EXTENT BLOCK OBTAINED FROM THE DCB PASSED BY\n     THE PROGRAM. THAT FUNCTION COULD NOT BE COMPLETED.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S16E OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S16E-RC)**\n))S16E-04 - THE INDICATED DEB POINTER IS NOT IN THE DEB TABLE.  A DEB\n     WHOSE ADDRESS IS NOT IN THE DEB TABLE CANNOT BE VERIFIED,\n     DELETED, OR PURGED.\n))S16E-08 - INVALID TYPE SPECIFIED (MACRO NOT ISSUED).  ACCEPTABLE\n     TYPES ARE ADD, DELETE, VERIFY, AND PURGE.\n))S16E-10 - DEBDCBAD DOES NOT POINT TO DCB.  IT IS NORMALLY ASSUMED\n     THAT THE DCBDEBAD FIELD OF THE DCB POINTES TO THE DEB, BUT THE\n     DEBDCBAD FIELD OF THE DEB MUST POINT TO THE DCB WHEN TYPE=VERIFY,\n     ADD, OR DELETE.\n))S16E-14 - AM VALUE DOES NOT EQUAL DEBAMTYP VALUE.  WHEN A DEB POINTER\n     IS ADDED TO THE TABLE, THE ACCESS METHOD POINTER (AM) VALUE, IF\n     GIVEN IS PLACED IN THE DEBAMTYP FIELD OF THE DEB.  IF NO AM VALUE\n     IS CODED, A 0 IS INSERTED IN THE FIELD.  SUBSEQUENT DEBCHKS ISSUED\n     TO VERIFY OR DELETE THAT DEB POINTER MUST EITHER SPECIFY THE SAME\n     AM VALUE OR OMIT THE OPERAND.  WHEN THE OPERAND IS OMITTED, NO\n     COMPARISON IS MADE.\n))S16E-18 - DEB NOT ON TCB CHAIN FOR TYPE = ADD.  BEFORE THE DEB\n     POINTER CAN BE ADDED TO THE TABLE, THE DEB ITSELF MUST BE QUEUED\n     ON THE CURRENT TCB DEB CHAIN.\n))S16E-1C - DEBAMTYP OR DEBTBLOF = 0 FOR TYPE = ADD.  VALUES OTHER THAN\n     0 INDICATE A POINETR TO THIS DEB ALREADY EXISTS IN THE DEB TABLE.\n))S16E-20 - DEB TABLE CONTAINS 32760 BYTES AND TYPE = ADD. THE CURRENT\n     DEB TABLE DOES NOT HAVE SPACE FOR THIS NEW DEB POINTER.  TO\n     INCREASE THE TABLE SIZE BY THE REQUIRED INCREMENT OF 24 WOULD\n     CAUSE THE TABLE TO EXCEED ITS MAXIMUM SIZE.\n))S171 - THE REAL STORAGE MANAGER WAS INVOKED WITH A REQUEST FOR A\n     PGFIX, PGFREE, PGLOAD, OR PGOUT SERVICE AND THE REQUEST WAS\n     ILLEGAL OR INVALID.  THE REQUEST IS CONSIDERED TO BE ILLEGAL IF\n     THE STORAGE RANGE SPECIFIED BY THE INPUT PARAMETERS DOES NOT\n     EXIST (A GETMAIN WAS NOT ISSUED FOR IT).\n     NOTE: THE MEANINGS OF THE CONTENTS OF GENERAL REGISTERS 11,\n           12, 13, AND 14 ARE PROVIDED FOR DIAGNOSTIC PURPOSES IN THE\n           FULL DESCRIPTION OF THIS ABEND IN THE SYSTEM CODES MANUAL.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S171 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S171-RC)**\n   --POSSIBLE CAUSE--\n     INPUT PARAMETER ERROR IN VIRTUAL SUBAREA LIST (VSL):\n      - VSL NOT ON A FULLWORD BOUNDARY.\n      - VSL NOT IN FIXED STORAGE.\n      - UNDEFINED OR CONFLICTING OPTION FLAGS.\n     END ADDRESS OF RANGE NOT GREATER THAN BEGINNING ADDRESS.\n     AN OPTION WAS SPECIFIED WHICH IS NOT SUPPORTED BY MVS.  THESE ARE\n       RSAOPT AND ECBIND.\n      - VSL IS STORE PROTECTED FROM THE CALLER.\n     INPUT PARAMETER ERROR ON ECB:\n      - ECB NOT ON FULLWORD BOUNDARY.\n      - ECB IS STORE-PROTECTED FROM CALLER.\n      - ECB NOT SPECIFIED FOR PGFIX.\n      - ECB SPECIFIED FOR PGOUT.\n))S171-04 - THE ERROR WAS DETECTED BY THE PAGE SERVICES ROUTINE.  THIS\n     GENERALLY INDICATES THAT THE CALLER DID NOT OWN THE VIRTUAL\n     STORAGE DEFINED BY THE VSL LIST ENTRY.\n))S171-16 - THE INPUT VSL OR ECB FAILED TO PASS THE PAGE SERVICES\n     INTERFACE VALIDITY CHECK.\n))S178 - GETMAIN ERROR.  AN AUTHORIZED PROGRAM REQUESTED VIRTUAL\n     STORAGE THAT REQUIRES MORE REAL STORAGE THAN IS AVAILABLE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S178 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S178-RC)**\n))S178-04 - NOT ENOUGH REAL STORAGE FOR SPACE IN SQA SUBPOOL.\n))S178-08 - NOT ENOUGH REAL STORAGE FOR SPACE IN FIXED CSA SUBPOOL.\n))S178-0C - NOT ENOUGH REAL STORAGE FOR SPACE IN LSQA SUBPOOL.\n))S178-1C - LSQA REQUEST FAILED - PAGE TABLE PAGED OUT.\n))S178-20 - AUTHORIZED PRIVATE REQUEST FAILED - PAGE TABLE PAGED OUT.\n))S201 - THE WAIT MACRO EXPANSION CONTAINED AN INVALID EVENT CONTROL\n   BLOCK (ECB) ADDRESS OR THE PROGRAM IS NOT IN THE SAME KEY AS THE ECB.\n))S202 - THE POST MACRO INSTRUCTION ENCOUNTERED AN ERROR WHILE\n   PROCESSING AN EVENT CONTROL BLOCK (ECB).\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S202 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S202-RC)**\n))S202-00 - THE CONTROL PROGRAM FOUND AN INVALID REQUEST BLOCK (RB)\n   ADDRESS IN THE 3 LOW-ORDER BYTES OF THE ECB SPECIFIED IN A WAIT\n   MACRO. THE RB ADDRESS MUST REMAIN IN THE ECB UNTIL A POST IS ISSUED.\n))S202-04 - THE WAITING RB IS NOT ENABLED FOR INTERRUPTS.\n))S202-08 - FOR A POST IN A USER KEY AND A WAIT IN A SYSTEM KEY,\n   THE ECB TO BE POSTED DOES NOT MATCH ANY ECB BEING WAITED ON.\n))S202-0C - FOR A WAIT IN A USER KEY, THE ECB ADDRESS IS INVALID.\n))S204-00 - (00 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S204)\n   GETMAIN ERROR.  NOT ENOUGH REAL STORAGE AVAILABLE TO BACK A MINIMUM\n   NUMBER OF VSM CELLS (IN LSQA) DURING LOCAL CELL POOL EXPANSION.\n))S205-00 - (00 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S205)\n   GETMAIN ERROR.  NOT ENOUGH REAL STORAGE AVAILABLE TO BACK A MINIMUM\n   NUMBER OF VSM CELLS (IN LSQA) DURING LOCAL CELL POOL EXPANSION.\n))S206 - THE ADDRESS OF THE PARAMETER LIST, OR ONE OF THE PARAMETERS\n   PASSED TO A LINK, LOAD, XCTL, OR DELETE MACRO WAS INVALID.\n))S20A-00 - (00 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S20A)\n   GETMAIN ERROR.  NOT ENOUGH REAL STORAGE AVAILABLE TO BACK A MINIMUM\n   NUMBER OF VSM CELLS (IN LSQA) DURING LOCAL CELL POOL EXPANSION.\n))S213 - DSCB NOT FOUND; I/O ERROR IN READING OR WRITING DSCB.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S213 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S213-RC)**\n   --POSSIBLE CAUSE--\n     THE DATA SET IS NOT ON THE SPECIFIED VOLUME\n     DISP = MOD IS NOT COMPATIBLE WITH A VOLUME REFERENCE\n     INCORRECT TAPE POSITIONING\n))S213-04 - AN I/O ERROR OCCURRED READING THE FORMAT-1 DSCB, OR THE\n     FORMAT-1 DSCB COULD NOT BE FOUND ON THE FIRST VOLUME SPECIFIED\n     BY THE DD STATEMENT VOLUME SERIAL FIELD.\n))S213-08 - AN OPEN MACRO WAS ISSUED FOR A PASSWORD PROTECTED DATASET\n     BUT THE SYSTEM WAS UNABLE TO LOCATE THE PASSWORD DATASET.\n))S213-0C - AN I/O ERROR OCCURRED READING A FORMAT-1 DSCB FOR A DIRECT\n     OR INDEXED SEQUENTIAL DATASET, OR THE FORMAT-1 DSCB COULD NOT BE\n     FOUND ON THE VOLUME SPECIFIED BY THE DD STATEMENT.\n))S213-18 - AN I/O ERROR OCCURRED WRITING BACK A FORMAT-1 DSCB.\n))S213-20 - DURING AN OPEN, A VOLUME CONTAINED MORE THAN 16 EXTENTS\n     OF THE INDICATED DATASET.  GOOD LUCK FIGURING THIS ONE OUT!\n     (SAM ACCESS OF AN ICF VSAM COMPONENT, PERHAPS?)\n))S213-24 - DURING AN OPEN, A VOLUME HAD A TYPE OF SPLIT CYLINDER\n     ALLOCATION NOT SUPPORTED UNDER OS.  POSSIBLE DOS VOLUME.\n))S213-28 - AN OPEN MACRO WAS ISSUED FOR A DIRECT ACCESS DATASET\n     SPECIFING UNIT=SYSDA, BUT THE UNIT ALREADY CONTAINED 127 USERS,\n     WHICH IS THE MAXIMUM NUMBER ALLOWED.\n))S213-2C - THE FORMAT-1 DSCB NOT FOUND INSTALLATION EXIT MODULE\n     ENCOUNTERED AN ERROR.\n))S213-30 - AN ATTEMPT WAS MADE TO OPEN A PDS FOR OUTPUT,DISP=SHR.\n     THE PDS IS ALREADY OPEN IN THIS CONDITION.\n))S213-38 - WHEN OPENING A PDSE THE KEYLENGTH WAS NOT ZERO (0), OR THE\n     KEYLENGTH WAS NOT ZERO (0) OR EIGHT (8) FOR DIRECTORY INPUT.\n))S213-3C - WHEN OPENING A PDSE THE RECFM IN THE DCB WAS DIFFERENT\n     FROM THE RECFM ALREADY IN THE FORMAT-1 DSCB IN THE VTOC.\n))S213-40 - WHEN OPENING A PDSE, MACRF=(E) WAS SPECIFIED.  ACCESS OF\n     A PDSE BY EXCP IS NOT SUPPORTED.\n))S213-48 - OPEN DETECTED A BAD RETURN CODE FROM THE EXTENDED CACHE\n     ATTRIBUTE FACILITY.\n))S213-4C - WHEN OPENING A PDSE\n     DSORG=PS WAS SPECIFIED, BUT NO MEMBER WAS SPECIFIED.\n))S213-50 - OPEN DETECTED AN ERROR RETURN CODE FROM AN SMS SERVICE\n     WHILE PROCESSING A PDSE.\n))S213-58 - AN ATTEMPT WAS MADE TO CHANGE THE DSORG OF AN SMS-MANAGED\n   DATA SET TO UNMOVEABLE WHICH IS NOT ALLOWED ON SMS-MANAGED VOLUMES.\n))S213-60 - OPEN DETECTED AN ERROR RETURN CODE FROM THE RESIDENT\n   CONVERT ROUTINE WHILE PROCESSING A PDSE DATA SET.\n))S213-64 - AN INCORRECT OPEN OPTION WAS SPECIFIED FOR A PDSE DATA SET.\n))S213-68 - AN OPEN FOR A PDSE WAS ISSUED WITH RECFM=FB AND LRECL=0.\n))S213-6C - AN OPEN FOR A PDSE WAS ISSUED REQUESTING QSAM UPDATE\n   BUT LOCATE MODE WAS NOT SPECIFIED IN MACRF.\n))S213-70 - OPEN DETECTED A CROSS SYSTEM SHARE CONFLICT FOR THE PDSE.\n))S214 - I/O ERROR IN TAPE POSITIONING OR VOLUME DISPOSITION\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S214 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S214-RC)**\n))S214-04 - AN I/O ERROR OCCURRED READING A USER LABEL ON MAGNETIC TAPE.\n))S214-08 - AN I/O ERROR POSITIONING A MAGNETIC TAPE VOLUME DURING\n     EXECUTION OF A CLOSE MACRO.\n))S214-0C - AN I/O ERROR OCCURRED WHILE PROCESSING A READ BLOCK ID\n     COMMAND TO ESTABLISH THE TAPE POSITION.\n))S214-10 - THE NUMBER OF BLOCKS PROCESSED ACCORDING TO THE TAPE\n     POSITION DOES NOT MATCH THE DCB BLOCK COUNT.\n))S222 - EITHER THE OPERATOR OR THE JOB ENTRY SUBSYSTEM CANCELLED THE\n     JOB.  CHECK THE JOB LOG LISTING FOR MORE INFORMATION.  IF THERE IS\n     NO APPARENT EXPLANATION, CONTACT OPERATIONS BEFORE RESUBMITTING.\n   --POSSIBLE CAUSE--\n     LINE OR CARD ESTIMATE EXCEEDED\n     JCL ERROR CAUSED MOUNT REQUEST FOR INVALID OR NON-EXISTING VOLUME\n     REQUESTED DEVICES NOT CURRENTLY AVAILABLE (JOB MAY BE REQUEUED)\n))S233 - INVALID PARAMETERS HAVE BEEN PASSED TO SVC DUMP.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S233 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S233-RC)**\n))S233-04 - THE ADDRESS OF THE PARAMETER LIST IS ZERO.\n))S233-08 - THE PARAMETER LIST IS NOT A VALID SVC DUMP OR SNAP\n     PARAMETER LIST FOR MVS.\n))S233-0C - THE CALLER-SUPPLIED DATASET IS ON AN UNSUPPORTED DEVICE.\n))S233-10 - IN A USER-SUPPLIED STORAGE RANGE, THE START ADDRESS IS\n     GREATER THAN THE END ADDRESS.\n))S233-14 - THE USER-SUPPLIED DATA (FOR HDR= OR HDRAD=) IS GREATER\n     THAN 100 CHARACTERS.\n))S233-18 - THE 4K SQA BUFFER HAS BEEN REQUESTED (BUFFER=YES) BUT IT\n     IS NOT SERIALIZED (BY SETTING ON THE HIGH ORDER BIT IN CVTSDBF)\n))S233-1C - THE PARAMETER LIST OR WHAT IT POINTS TO IS IN THE 4K\n     SQA BUFFER.\n))S233-20 - THE USER SUPPLIED A DCB ADDRESS AND THE DCB IS NOT OPEN,\n     OR THE DCB ADDRESS IS INVALID.\n))S233-24 - THE SPECIFIED ASID PARAMETER WAS SYNTACTICALLY INVALID.\n     THE ASID WAS LESS THAN ZERO, OR GREATER THAN THE MAXIMUM VALUE.\n))S233-28 - AN ASID SPECIFIED IN THE ASID LIST POINTED TO BY THE\n     ASIDLST PARAMETER WAS SYNTACTICALLY INVALID.  THE ASID WAS LESS\n     THAN ZERO, OR GREATER THAN THE MAXIMUM VALUE.\n))S233-2C - THE ASIDLST ADDRESS IS ZERO, OR POINTS TO AN AREA THAT\n     THE USER CANNOT REFERENCE.\n))S233-38 - THE CALLER SPECIFIED THE 4K SQA BUFFER (BUFFER=YES) BUT\n     AN SVC DUMP WAS ALREADY IN PROGRESS.\n))S237 - THE ERROR OCCURRED DURING END-OF-VOLUME LABEL VERIFICATION.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S237 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S237-RC)**\n   --POSSIBLE CAUSE--\n     INCORRECT VOLUME SERIAL\n     INCORRECT VOLUME MOUNTED\n     INCORRECT LABELS\n))S237-04 - THE BLOCK COUNT IN THE DCB DOES NOT MATCH THAT IN THE\n     TRAILER LABEL. A BLOCK OF DATA HAS BEEN MISSED OR SKIPPED.\n))S237-08 - THE DSNAME IN A HEADER LABEL DOES NOT MATCH THAT IN THE\n     JFCB ON THE SECOND OR SUBSEQUENT VOLUME OF A MAGNETIC TAPE DATASET.\n     VERIFY THAT THE CORRECT VOLUME AND DSNAME WERE SPECIFIED.\n))S237-0C - THE NUMBER OF BLOCKS PROCESSED, WHICH IS DETERMINED BY THE\n     POSITION OF THE TAPE, DOES NOT MATCH THE DCB BLOCK COUNT.\n))S23E - THE ERROR WAS DETECTED DURING EXECUTION OF A DETACH MACRO\n     INSTRUCTION.  EITHER 1) THE PARAMETER PASSED TO DETACH IN REGISTER\n     1 WAS NOT A FULLWORD ADDRESS, 2) THE STORAGE KEY OF THAT ADDRESS\n     DID NOT MATCH THAT OF THE ISSUER OF THE DETACH, OR 3) THE\n     PARAMETER CONTAINED IN THE ADDRESSED FULLWORD OF THE ISSUER WAS\n     NOT THE ADDRESS OF A SUBTASK OF THE ISSUER OF THE DETACH.\n))S240 - AN ERROR OCCURRED DURING EXECUTION OF A RDJFCB MACRO.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S240 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S240-RC)**\n))S240-04 - A RDJFCB MACRO INSTRUCTION WAS ISSUED, BUT THE DCB DID NOT\n     CONTAIN A FOUNDATION EXTENSION BLOCK.\n))S240-08 - A RDJFCB MACRO INSTRUCTION WAS ISSUED, BUT NO EXLST ADDRESS\n     WAS FOUND IN THE DCB.\n))S240-0C - A RDJFCB MACRO INSTRUCTION WAS ISSUED, BUT NO JFCB EXIT\n     WAS SPECIFIED IN THE DCB EXIT LIST.\n))S240-10 - A RDJFCB MACRO INSTRUCTION WAS ISSUED, BUT THE JFCB BUFFER\n     IS NOT WITHIN THE USER'S STORAGE.\n))S278-00 - (00 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S278)\n   GETMAIN ERROR.  NOT ENOUGH REAL STORAGE AVAILABLE TO BACK A MINIMUM\n   NUMBER OF VSM CELLS (IN LSQA) DURING LOCAL CELL POOL EXPANSION.\n))S2F3 - JOB WAS BEING EXECUTED WHEN SYSTEM FAILURE OCCURRED -\n           A SYSTEM RESTART WAS PERFORMED\n))S300 - AN ERROR WAS DETECTED WHEN AN I/O OPERATION WAS REQUESTED;\n  *  EITHER THE IOBM FIELD IN THE I/O BLOCK (IOB) IS HIGHER THAN THE\n     MAXIMUM EXTENT COUNT (DEBNMEXT) IN THE DATA EXTENT BLOCK (DEB) OR\n  *  THE STORAGE PROTECTION KEY OF THE DATA EXTENT BLOCK WAS NOT ZERO\n     OR THE DEB VALIDITY CHECK ROUTINE RETURNED TO EXCP WITH A NON\n     ZERO RETURN CODE.  IN THE ABNORMAL TERMINATION DUMP, THE TCB FIELD\n     TCBEXCPD (AT OFFSET C0) POINTS TO THE EXCP PROBLEM DETERMINATION\n     AREA.  THE ITEMS IN THE PROBLEM DETERMINATION AREA OF GREATEST\n     INTEREST TO YOU ARE: (ALL OFFSETS IN HEX)\n      - OFFSET 10 CONTAINS A COPY OF THE REGISTERS WHEN EXCP DETERMINED\n        THE ERROR CONDITION.\n      - OFFSET 50 CONTAINS THE CONTENTS OF THE REQUEST QUEUE ELEMENT\n        (RQE) IF ALLOCATED, WHEN THE PROGRAM CHECK OCCURRED.\n     POSSIBLE CAUSES OF A NON-ZERO RETURN CODE FROM IFGDEBCK ARE:\n      - THE DEBTABLE DOES NOT EXIST.\n      - THE DEBTBLOF VALUE IN THE DEB IS LESS THAN ONE OR GREATER THAN\n        THE NUMBER OF ENTRIES IN THE DEBTABLE.\n      - THE DEB ADDRESS FROM THE DCB DOES NOT MATCH ANY DEBTABLE ENTRY.\n))S301 - AN ECB SPECIFIED IN A WAIT MACRO ALREADY HAD ITS WAIT FLAG ON.\n))S305 - THE ERROR OCCURRED DURING EXECUTION OF A FREEMAIN MACRO:\n     - THE SPECIFIED SUBPOOL COULD NOT BE FOUND.\n     - THE SP PARAMETER WAS SPECIFIED BUT THE VIRTUAL STORAGE AREA\n       TO BE RELEASED WAS NOT WITHIN THE SUBPOOL SPECIFIED.\n     - THE SP PARAMETER WAS NOT SPECIFIED BUT THE VIRTUAL STORAGE\n       AREA TO BE RELEASED WAS NOT WITHIN SUBPOOL ZERO.\n     - THE SP PARAMETER WAS SPECIFIED CORRECTLY, BUT THE BOUNDARIES\n       OF THE STORAGE AREAS TO BE FREED WERE NOT COMPLETELY DESCRIBED\n       BY A DESCRIPTOR QUEUE ELEMENT.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S305 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S305-RC)**\n))S305-08 - SQA STORAGE IS NOT IN THE SUBPOOL SPECIFIED.\n))S305-0C - CSA STORAGE IS NOT IN THE SUBPOOL SPECIFIED.\n))S305-10 - LSQA STORAGE IS NOT IN THE SUBPOOL SPECIFIED.\n))S305-18 - PRIVATE AREA SUBPOOL NOT FOUND.\n))S305-1C - ZERO LENGTH WAS NOT SPECIFIED ON A SUBPOOL FREEMAIN.\n))S306 - THE ERROR OCCURRED DURING THE EXECUTION OF THE LINK, XCTL,\n     ATTACH, OR LOAD SERVICE ROUTINES. THE AUTHORIZED ROUTINE REQUESTED\n     A MODULE WHICH COULD NOT BE FOUND ON AN AUTHORIZED LIBRARY, BUT A\n     COPY OF THE MODULE MAY HAVE BEEN FOUND ON A NONAUTHORIZED LIBRARY.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S306 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S306-RC)**\n))S306-04 - THE REQUESTED PROGRAM WAS NOT FOUND IN THE INDICATED SOURCE.\n     THAT IS, IT WAS FOUND IN AN UNAUTHORIZED LIBRARY.\n))S306-08 - AN UNCORRECTABLE I/O ERROR OCCURRED WHEN THE CONTROL\n     PROGRAM ATTEMPTED TO SEARCH THE DIRECTORY OF THE LIBRARY\n     CONTAINING THE MODULE, OR THE MODULE IS NOT RE-ENTRANT.\n))S306-0C - THE MODULE COULD NOT BE FOUND IN THE LPA OR IN THE LPA\n     DIRECTORY OR AN AUTHORIZED LIBRARY.\n))S306-10 - A LOAD MACRO REQUESTED A MODULE REQUIRING PAGE ALIGNMENT\n     WITH  GLOBAL=(YES,F)  SPECIFIED.\n))S306-20 - A JOB STEP MODULE WAS FOUND IN AN UNAUTHORIZED LNKLST\n     LIBRARY WHEN AN APF AUTHORIZED MODULE WAS REQUIRED.\n))S306-24 - AN AUTHORIZED SERVICE ATTEMPTED TO ACCESS A NON-REENTRANT\n     LOAD MODULE WHICH WAS LOADED FROM AN AUTHORIZED LIBRARY BY AN\n     UNAUTHORIZED CALLER.  ANOTHER COPY OF THE MODULE COULD NOT BE\n     FOUND.\n))S306-30 - THE USER WAS DENIED ACCESS TO THE PROGRAM BY THE\n     SYSTEM AUTHORIZATION FACILITY.\n))S306-34 - THE USER ATTEMPTED TO USE A PROGRAM WHILE A\n     PROGRAM-ACCESSED DATA SET WAS OPEN.\n))S30A - THE ERROR OCCURRED DURING EXECUTION OF AN R-FORM FREEMAIN\n     MACRO FOR ONE OF THE FOLLOWING REASONS:\n     - A FREEMAIN FOR AN ENTIRE SUBPOOL WAS REQUESTED (REGISTER 1 WAS\n       ZERO) BUT THE LENGTH IN REGISTER 0 WAS NOT SET TO ZERO.\n     - THE SPECIFIED SUBPOOL COULD NOT BE FOUND.\n     - THE SP PARAMETER WAS SPECIFIED, BUT THE VIRTUAL STORAGE AREA TO\n       BE RELEASED WAS NOT WITHIN THE SUBPOOL SPECIFIED.\n     - THE SP PARAMETER WAS NOT SPECIFIED, BUT THE VIRTUAL STORAGE AREA\n       TO BE RELEASED WAS NOT WITHIN SUBPOOL ZERO.\n     - THE SP PARAMETER WAS SPECIFIED CORRECTLY, BUT THE BOUNDARIES OF\n       THE STORAGE AREAS TO BE FREED WERE NOT COMPLETELY DESCRIBED BY\n       A DECSRIPTOR QUEUE ELEMENT (DQE).\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S30A OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S30A-RC)**\n))S30A-08 - SQA STORAGE IS NOT IN THE SUBPOOL SPECIFIED.\n))S30A-0C - CSA STORAGE IS NOT IN THE SUBPOOL SPECIFIED.\n))S30A-10 - LSQA STORAGE IS NOT IN THE SUBPOOL SPECIFIED.\n))S30A-14 - PRIVATE STORAGE IS NOT IN THE SUBPOOL SPECIFIED.\n))S30A-18 - PRIVATE AREA SUBPOOL NOT FOUND.\n))S30A-1C - ZERO LENGTH WAS NOT SPECIFIED ON A SUBPOOL FREEMAIN.\n))S30A-20 - FOR A CSA STORAGE FREEMAIN, THE AREA TO BE FREED IS\n   LARGER THAN WAS SPECIFIED ON THE ORIGINAL GETMAIN,\n   OR THE FREEMAIN START ADDRESS IS NOT VALID.\n))S30A-24 - FOR A PRIVATE STORAGE FREEMAIN, THE AREA TO BE FREED IS\n   LARGER THAN WAS SPECIFIED ON THE ORIGINAL GETMAIN,\n   OR THE FREEMAIN START ADDRESS IS NOT VALID.\n))S313 - AN ABEND OCCURRED WHILE OPENING A DASD DATA SET BECAUSE\n   OF A VTOC I/O ERROR OR A SYSTEM LOGIC ERROR.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S313 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S313-RC)**\n))S313-04 - AN I/O ERROR OCCURRED READING A FORMAT-2 OR FORMAT-3 DSCB\n     DURING THE EXECUTION OF AN OPEN MACRO.\n))S313-08 - OPEN RECEIVED A NON-ZERO RETURN CODE FROM DASD CALCULATION\n     SERVICES (DCS) WHILE TRYING TO GET A SYSTEM-DETERMINED BLOCKSIZE.\n))S314 - I/O ERROR IN READING DSCB\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S314 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S314-RC)**\n   --POSSIBLE CAUSE--\n     SORTIN JCL GAVE WRONG BLOCK SIZE FOR A VARIABLE RECORD\n))S314-04 - AN I/O ERROR OCCURRED READING A DSCB FOR A DATASET ON A\n     DIRECT ACCESS DEVICE DURING EXECUTION OF A CLOSE MACRO.\n))S314-08 - AN I/O ERROR OCCURRED READING A FORMAT-1 DSCB DURING\n     EXECUTION OF A CLOSE MACRO AND STANDARD USER LABELS WERE SPECIFIED.\n))S317 - AN OCCURRED DURING A BSAM CLOSE TYPE=T MACRO FOR A DASD FILE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S317 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S317-RC)**\n))S317-04 - AN I/O ERROR OCCURRED READING A FORMAT-1 DSCB DURING\n     EXECUTION OF A BSAM CLOSE TYPE=T MACRO INSTRUCTION.\n))S317-08 - THE DSCB READ DURING EXECUTION OF A BSAM CLOSE TYPE=T\n     MACRO INSTRUCTION DID NOT HAVE THE EXPECTED FORMAT-1 OR FORMAT-4\n     FORMAT ID.\n))S322 - JOB OR STEP TIME EXCEEDED THE SPECIFIED LIMIT\n     PROGRAM IS IN A LOOP\n     INSUFFICIENT TIME PARAMETER ON JOB OR EXEC CARD\n))S32D - ADDRESS IN SEGMENT TABLE OR ENTRY TABLE OUTSIDE OF STORAGE\n         FOR JOB STEP\n     AN OVERLAY PROGRAM WAS FOUND TO CONTAIN A RECORD OF INCORRECT\n         LENGTH, OR AN I/O ERROR WAS ENCOUNTERED - RE-LINKEDIT IT\n))S337 - THE ERROR OCCURRED WHEN THE END OF A DATA SET WAS REACHED.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S337 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S337-RC)**\n   --POSSIBLE CAUSE--\n     NO END OF DATA ROUTINE WAS PROVIDED\n     TRIED TO READ PAST END OF FILE\n     TRIED TO WRITE ON A TAPE DEFINED AS INPUT\n))S337-04 - THE END OF DATASET WAS REACHED, BUT NO END-OF-DATASET\n     ROUTINE (EODAD) WAS SPECIFIED IN THE DCB.\n))S337-08 - NO END-OF-DATASET ROUTINE (EODAD) SPECIFIED IN THE DCB FOR\n     DD DUMMY DATASET.\n))S338 - AN UNAUTHORIZED TASK ATTEMPTED TO USE AUTHORIZED OPTIONS OF\n     THE ENQ MACRO INSTRUCTION.\n))S33E - A DETACH MACRO INSTRUCTION SPECIFYING THE STAE=YES OPERAND\n     HAS BEEN ISSUED BY THE ORIGINATING TASK, BUT THE SPECIFIED\n     SUBTASK HAS NOT COMPLETED EXECUTION.\n   --POSSIBLE CAUSE--\n     THIS MAY OR MAY NOT BE AN ERROR.  IF YOU INTEND FOR THE SUBTASK\n          TO COMPLETE PROCESSING BEFORE IT IS DETACHED, USE THE ECB\n          OR EXTR OPERAND ON THE ATTACH MACRO INSTRUCTION THAT\n          CREATES THE SUBTASK TO ACHEIVE SYNCHRONIZATION.\n))S378 - THE ERROR OCCURRED DURING EXECUTION OF AN RC OR RU FORM\n     FREEMAIN MACRO.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S378 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S378-RC)**\n   --POSSIBLE CAUSE--\n     A FREEMAIN FOR AN ENTIRE SUBPOOL WAS REQUESTED (REGISTER 1 WAS\n          ZERO) BUT THE LENGTH IN REGISTER 0 WAS NOT SET TO ZERO.\n     THE SPECIFIED SUBPOOL COULD NOT BE FOUND.\n     THE SP PARAMETER WAS SPECIFIED, BUT THE VIRTUAL STORAGE AREA TO BE\n          RELEASED WAS NOT WITHIN THE SUBPOOL SPECIFIED.\n     THE SP PARAMETER WAS NOT SPECIFIED, BUT THE VIRTUAL STORAGE AREA\n          TO BE RELEASED WAS NOT WITHIN SUBPOOL ZERO.\n     THE SP PARAMETER WAS SPECIFIED CORRECTLY, BUT THE BOUNDARIES OF\n          THE STORAGE AREA TO BE FREED WERE NOT COMPLETELY DESCRIBED\n          BY THE DESCRIPTOR QUEUE ELEMENT (DQE).\n))S378-08 - SQA STORAGE IS NOT IN THE SUBPOOL SPECIFIED.\n))S378-0C - CSA STORAGE IS NOT IN THE SUBPOOL SPECIFIED.\n))S378-10 - LSQA STORAGE IS NOT IN THE SUBPOOL SPECIFIED.\n))S378-14 - PRIVATE AREA STORAGE IS NOT IN THE SUBPOOL SPECIFIED.\n))S378-18 - PRIVATE AREA SUBPOOL NOT FOUND.\n))S378-1C - ZERO LENGTH WAS NOT SPECIFIED ON A SUBPOOL FREEMAIN.\n))S400 - THE DCB IN THE DEB DOES NOT EQUAL THE DCB ADDRESS IN THE IOB.\n     IN THE ABNORMAL TERMINATION DUMP, THE TCB FIELD TCBEXCPD (AT\n     OFFSET C0) POINTS TO THE EXCP PROBLEM DETERMINATION AREA.  THE\n     ITEMS IN THE PROBLEM DETERMINATION AREA OF GREATEST INTEREST TO\n     YOU ARE: (ALL OFFSETS IN HEX)\n      - OFFSET 10 CONTAINS A COPY OF THE REGISTERS WHEN EXCP DETERMINED\n        THE ERROR CONDITION.\n      - OFFSET 50 CONTAINS THE CONTENTS OF THE REQUEST QUEUE ELEMENT\n        (RQE) IF ALLOCATED, WHEN THE PROGRAM CHECK OCCURRED.\n))S402 - THE EVENTS POST MACRO INSTRUCTION ENCOUNTERED AN ERROR WHILE\n   PROCESSING AN EVENT CONTROL BLOCK (ECB).\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S402 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S402-RC)**\n))S402-00 - THE CONTROL PROGRAM FOUND AN INVALID EVENTS TABLE ADDRESS\n   IN THE 3 LOW-ORDER BYTES OF THE ECB SPECIFIED.\n))S402-04 - THE WAITING RB IS NOT ENABLED FOR INTERRUPTS.\n))S402-08 - FOR A WAIT OR POST IN A USER KEY, THE ECB ADDRESS IS\n   INVALID.\n))S406 - THE REQUESTED LOAD MODULE WAS MARKED BY THE LINKAGE EDITOR\n         AS ONLY LOADABLE.\n))S40A - AN R-FORM FREEMAIN MACRO IS ATTEMPTING TO FREE AN ENTIRE\n     SUBPOOL THAT SHOULD NOT BE FREEMAINED.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S40A OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S40A-RC)**\n))S40A-04 - ATTEMPTING TO FREEMAIN A SUBPOOL THAT CANNOT BE SUBPOOL\n     FREEMAINED.\n))S40A-08 - A  PROBLEM PROGRAM IS TRYING TO FREE SUBPOOL ZERO.\n))S40D - THIS COMPLETION CODE IS FOUND ONLY IN ASCBS.  BECAUSE OF\n     RECURSIVE ERRORS TRYING TO TERMINATE A TASK IT BECAME NECESSARY\n     TO TERMINATE THE MEMORY. THE RTM ATTEMPTS TO TERMINATE THE ADDRESS\n     SPACE. A DUMP MAY HAVE BEEN TAKEN TO THE SYS1.DUMP DATASET.\n))S413 - INPUT, INOUT, OR RDBACK SPECIFIED, BUT NO VOL SER IN DD; I/O\n         ERROR IN READING VOLUME LABEL; COULD NOT MOUNT VOLUME ON\n         DEVICE; VOLUMES SPECIFIED LESS THAN DEVICES ALLOCATED.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S413 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S413-RC)**\n   --POSSIBLE CAUSE--\n     FORGOTTEN VOLUME SERIAL FOR INPUT TAPE\n     HAD DISP NEW WHEN SHOULD HAVE HAD OLD\n     GENERATED AS NL, TRIED TO READ AS SL\n     MISSING OR INCONSISTENT DCB INFORMATION\n     VOLUME COULD NOT BE MOUNTED, OPERATOR MOUNTED SCRATCH\n     ERROR READING LABEL\n     OPENED A FILE AS INPUT WITHOUT FIRST GENERATING THE FILE\n     TRIED TO CLOSE A FILE WITHOUT OPENING IT\n     TRIED TO OPEN SECOND DATA SET ON A TAPE WITHOUT CLOSING THE FIRST\n     THE REQUESTED DRIVE WAS SWITCHED OFF\n     SORT VERB BLEW DUE TO SD NOT MATCHING FD WITH USING OR GIVING\n))S413-04 - NO UNIT IS AVAILABLE FOR MOUNTING THE VOLUME FOR THE\n     DATASET BEING OPENED.  THE VOLUME ALREADY ON THE ALLOCATED UNIT AS\n     SPECIFIED BY THE VOL=SER IS EITHER PERMANENTLY RESIDENT OR\n     RESERVED. IT COULD NOT BE DEMOUNTED IN ORDER TO MOUNT THE REQUIRED\n     VOLUME, OR THE VOLUME CANNOT BE DEMOUNTED BECAUSE ANOTHER DCB IS\n     OPEN ON THAT DEVICE OR THE DEVICE TYPE IS INCOMPATIBLE WITH THE\n     DSORG IN THE DCB. THIS ERROR MAY BE DUE TO A PREVIOUS ABNORMAL\n     TERMINATION ASSOCIATED WITH THE SAME UNIT IN THE SAME STEP.\n))S413-08 - AN I/O ERROR OCCURRED POSITIONING A MAGNETIC TAPE VOLUME.\n))S413-0C - AN I/O ERROR OCCURRED READING THE VOLUME LABEL ON A\n     MAGNETIC TAPE VOLUME.\n))S413-10 - AN I/O ERROR OCCURRED WRITING A TAPE MARK.\n))S413-18 - THE SPECIFIED DATASET WAS OPENED FOR INPUT, BUT NO VOLUME\n     SERIAL NUMBER WAS SPECIFIED ON THE DD STATEMENT.\n))S413-1C - AN OPEN MACRO WAS ISSUED FOR A DATASET, BUT THE VOLUME\n     SEQUENCE NUMBER ON THE ASSOCIATED DD STATEMENT WAS GREATER THAN\n     THE NUMBER OF VOLUMES CONTAINING THE DATASET.\n))S413-20 - AN I/O ERROR OCCURRED READING THE VOLUME LABEL OR FORMAT-4\n     DSCB ON A DIRECT ACCESS VOLUME.\n))S413-24 - AN OPEN MACRO WAS ISSUED FOR A DATASET ON MAGNETIC TAPE.\n     A DENSITY WAS SPECIFIED IN THE DCB DEN PARAMETER WHICH WAS\n     INCOMPATIBLE WITH THE RECORDING DENSITY OF THE DRIVE ALLOCATED\n     TO THE DATASET.\n))S413-28 - NON-ZERO RETURN CODE FROM OPEN DAVV (DIRECT ACCESS VOLUME\n     VERIFICATION) MODULE AFTER A IEFSSREQ MACRO INSTRUCTION.  THIS\n     CODE INDICATES THE SUBSYSTEM DISCOVERED A FUNCTIONAL OR LOGICAL\n     ERROR THAT IT COULD NOT PROCESS.\n))S413-2C - ERROR DURING MSS MOUNT, DEMOUNT, ACQUIRE OR RELINQUISH.\n))S413-30 - THE MSS HARDWARE MOUNTED THE WRONG VIRTUAL VOLUME.\n))S413-34 - LABEL=(N) WAS SPECIFIED, WHERE N IS GREATER THAN 1, AND\n     VOL=SER WAS NOT SPECIFIED FOR A TAPE DATASET.\n))S413-38 - DURING A READ BLOCK ID COMMAND TO ESTABLISH THE TAPE\n     POSITION, AN ERROR OCCURRED.\n))S413-40 - THE DEVICE DOES NOT SUPPORT THE RECORDING MODE REQUESTED\n     BY THE USER OR DETERMINED BY THE SYSTEM.\n))S413-44 - THE TAPE VOLUME DOES NOT CONFORM TO THE SINGLE RECORDING\n     MODE RULES.  FOR INPUT, THE VIOLATION OCCURRED WHEN THE TAPE\n     WAS WRITTEN WHEN THE RULES COULD NOT BE ENFORCED.  FOR OUTPUT,\n     THE ABEND PREVENTS ANY VIOLATION FROM HAPPENING.\n))S414 - AN ERROR OCCURRED DURING CLOSE PROCESSING FOR A DATASET ON A\n     DIRECT ACCESS DEVICE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S414 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S414-RC)**\n))S414-04 - AN I/O ERROR OCCURRED WRITING A DSCB DURING CLOSE OF A\n     DASD FILE.\n))S414-08 - FOR A QSAM DATA SET EITHER AN I/O ERROR OCCURRED WHILE\n     FLUSHING THE BUFFERS DURING CLOSE PROCESSING, OR A CLOSE WAS\n     ISSUED IN THE CALLER'S SYNAD ROUTINE.\n))S417-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S417)\n     AN I/O ERROR OCCURRED WRITING AN UPDATED FORMAT-1 DSCB DURING\n     THE EXECUTION OF A BSAM CLOSE TYPE=T MACRO INSTRUCTION.\n))S437 - AN ERROR OCCURRED DURING END-OF-VOLUME.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S437 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S437-RC)**\n))S437-08 - WHEN FEOV WAS ISSUED, THE DCB POINTER WAS INVALID.\n))S437-0C - DEB NOT IN DEB TABLE.\n))S478 - AN RC-FORM OR RU-FORM FREEMAIN MACRO IS ATTEMPTING TO FREE AN\n     ENTIRE SUBPOOL THAT SHOULD NOT BE FREEMAINED.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S478 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S478-RC)**\n))S478-04 - ATTEMPTING TO FREEMAIN A SUBPOOL THAT CANNOT BE SUBPOOL\n     FREEMAINED.\n))S478-08 - A  PROBLEM PROGRAM IS TRYING TO FREE SUBPOOL ZERO.\n))S502 - DURING EXECUTION OF A POST MACRO INSTRUCTION, THE CONTROL\n   PROGRAM FOUND THAT THE EVENTS TABLE SPECIFIED IN THE ECB HAD NO\n   AVAILABLE ENTRIES TO CONTAIN THE POSTED ECB ADDRESS.\n))S504-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S504)\n     AT LEAST ONE OVERLAP AMONGST LENGTH LIST, ADDRESS LIST AND\n     PARAMETER LIST AT GETMAIN EXECUTION TIME.\n))S505-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S505)\n     AT LEAST ONE OVERLAP AMONGST LENGTH LIST, ADDRESS LIST AND\n     PARAMETER LIST AT FREEMAIN EXECUTION TIME.\n))S513 - THE ERROR OCCURRED DURING EXECUTION OF AN OPEN MACRO\n     INSTRUCTION FOR A DATA SET ON MAGNETIC TAPE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S513 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S513-RC)**\n))S513-04 - AN OPEN MACRO WAS ISSUED FOR A MAGNETIC TAPE DATASET\n     ALLOCATED TO A DEVICE THAT ALREADY HAS AN OPEN DATASET ON IT.\n))S513-08 - A LABEL VIOLATED THE PUBLISHED STANDARD FOR THAT LABEL, AND\n     THE LABEL VALIDATION EXIT REQUESTED OPEN/EOV TO REJECT THE VOLUME.\n))S513-0C - NON-STANDARD VOL1 HEADER ON AN ASCII TAPE.\n))S522 - JOB OR TSO SESSION EXCEEDED MAXIMUM JOB WAIT TIME OR\n     OPERATOR DID NOT MOUNT THE REQUIRED TAPE WITHIN ALLOWED TIME LIMIT\n))S582-00 - (00 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S582)\n     WHILE PERFORMING RACHECK SVC PROCESSING, RACF WAS UNABLE TO VERIFY\n     A USER BECAUSE NO ACCESS CONTROL ENVIRONMENT (ACEE) WAS AVAILABLE.\n   --POSSIBLE CAUSE--\n     USER LOGGED ON OR JOB STARTED WHILE RACF WAS INACTIVE, BUT RACF\n     HAS SINCE BEEN REACTIVATED.\n))S604 - GETMAIN ERROR\n   --POSSIBLE CAUSE--\n     MISSING SORTLIB CARD\n     SUBSCRIPT ERROR - CLOBBERED FREE QUEUE ELEMENT\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S604 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S604-RC)**\n))S604-04 - THE PARAMETER LIST IS NOT ON A WORD BOUNDARY.\n))S604-08 - THE PARAMETER LIST IS IN PROTECTED STORAGE.\n))S604-0C - THE LENGTH LIST IS NOT ON A WORD BOUNDARY.\n))S604-10 - THE LENGTH LIST IS IN PROTECTED STORAGE.\n))S604-14 - THE ADDRESS LIST IS NOT ON A WORD BOUNDARY.\n))S604-18 - THE ADDRESS LIST IS IN PROTECTED STORAGE.\n))S604-1C - THE PARAMETER LIST REQUEST FLAGS ARE INVALID.\n))S605 - FREEMAIN ERROR\n   --POSSIBLE CAUSE--\n     MISSING SORTLIB CARD\n     SUBSCRIPT ERROR - CLOBBERED FREE QUEUE ELEMENT\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S605 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S605-RC)**\n))S605-04 - THE PARAMETER LIST IS NOT ON A WORD BOUNDARY.\n))S605-08 - THE PARAMETER LIST IS IN PROTECTED STORAGE.\n))S605-0C - THE LENGTH LIST IS NOT ON A WORD BOUNDARY.\n))S605-10 - THE LENGTH LIST IS IN PROTECTED STORAGE.\n))S605-14 - THE ADDRESS LIST IS NOT ON A WORD BOUNDARY.\n))S605-18 - THE ADDRESS LIST IS IN PROTECTED STORAGE.\n))S605-1C - THE PARAMETER LIST REQUEST FLAGS ARE INVALID.\n))S60A - (NON-MVS/XA) FREEMAIN QUEUE ELEMENT OR ADDRESS ERROR\n     NEEDS MORE CORE\n     JCL FOR INPUT DISKS REQUESTED 2 UNITS, GAVE 1 VOLUME SERIAL\n     FORGOT DD CARD FOR SYS1.SORTLIB\n))S613 - I/O ERROR IN TAPE POSITIONING OR LABEL PROCESSING\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S613 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S613-RC)**\n   --POSSIBLE CAUSE--\n     TAPE LABEL WAS NOT IN REQUESTED DENSITY\n     DCB MISSING\n     DEN MISSING ON A TAPE THAT REQUIRES IT DEFAULT DEN=3 (1600 BPI)\n     RECFM=F WAS SPECIFIED FOR A FILE WHICH WAS FB\n     INCORRECT HEADER\n     TAPE POSITIONING ERROR\n     TAPE DRIVE FAILURE DURING OPEN\n))S613-04 - AN I/O ERROR OCCURRED POSITIONING A MAGNETIC TAPE VOLUME.\n))S613-08 - AN I/O ERROR OCCURRED READING A LABEL ON A MAGNETIC TAPE.\n))S613-0C - AN INVALID LABEL WAS READ FROM A MAGNETIC TAPE VOLUME.\n     THIS ERROR MAY BE DUE TO A PREVIOUS ABNORMAL TERMINATION\n     ASSOCIATED WITH THE SAME TAPE SINCE IT WAS LAST MOUNTED, POSSIBLY\n     IN A PREVIOUS JOB OR STEP, LEAVING THE TAPE POSITIONED IMPROPERLY.\n))S613-10 - AN I/O ERROR OCCURRED WRITING A TAPE LABEL.\n))S613-14 - AN I/O ERROR OCCURRED WRITING A TAPE MARK AFTER THE HEADER\n     LABELS.\n))S614 - AN ERROR OCCURRED DURING CLOSE PROCESSING FOR A DATASET ON A\n     DIRECT ACCESS DEVICE OR FOR A SUBSYSTEM DATASET.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S614 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S614-RC)**\n   --POSSIBLE CAUSE--\n     OPERATOR DISMOUNTED VOLUME WHILE PROGRAM WAS PROCESSING\n))S614-04 - AN I/O ERROR OCCURRED WRITING A FILE MARK FOR A DATASET ON\n     A DIRECT ACCESS DEVICE DURING EXECUTION OF A CLOSE MACRO.\n   --POSSIBLE CAUSE--\n     OPERATOR DISMOUNTED VOLUME WHILE PROGRAM WAS PROCESSING\n))S614-08 - A FILE MARK SHOULD HAVE BEEN WRITTEN ON AN OUTPUT DATASET.\n     THE DCBFDAD FIELD IN THE DCB INDICATED AN EXTENT NUMBER IN THE\n     DEB GREATER THAN THE NUMBER OF EXTENTS IN THE DATASET.\n     CONSEQUENTLY, IT COULD NOT BE DETERMINED WHERE THE FILE MARK\n     SHOULD HAVE BEEN WRITTEN.\n))S614-0C - IEFSSREQ MACRO RETURNED AN ERROR CODE IN REGISTER 15 WHICH\n     INDICATES THAT THE SUBSYSTEM WAS NOT OPERATING.\n))S614-10 - A SPOOLED OR SUBSYSTEM DATASET COULD NOT BE CLOSED BY THE\n     JOB ENTRY SUBSYSTEM OR ALTERNATE SUBSYSTEM.\n))S614-14 - A CLOSE MACRO INSTRUCTION DETECTED AN ERROR RETURN CODE\n     FROM AN SMS SERVICE WHILE PROCESSING A PDSE DATA SET.\n))S622 - TSO SESSION WAS CANCELLED\n     OPERATOR STOPPED TSO OR CANCELLED THE USER\n     USER SIGNALLED ATTN AFTER THE ALLOCATION PROCESS HAD COMPLETED\n     THE USER DISCONNECTED HIS TERMINAL FROM THE SYSTEM\n))S637 - I/O ERROR IN WRITING TAPE MARK, TAPE POSITIONING, READING\n         LABEL, SENSING FOR FILE PROTECTION RING; DCB BIT DOES NOT\n         INDICATE CONCATENATION OF UNLIKE ATTRIBUTES.\n     IMPROPER INFO ON JCL FOR MULTIREEL NSL TAPE\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S637 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S637-RC)**\n))S637-04 - AN I/O ERROR OCCURRED WHILE READING A TAPE LABEL, WRITING\n     A TAPE MARK, OR POSITIONING A MAGNETIC TAPE VOLUME.\n))S637-08 - FOLLOWING USER TRAILER LABEL PROCESSING, AN I/O ERROR\n     OCCURRED POSITIONING A MAGNETIC TAPE.\n))S637-0C - CONCATENATION OF DATASETS WITH UNLIKE ATTRIBUTES WAS\n     DETECTED, BUT NOT SPECIFIED IN THE DCB.\n))S637-10 - AN I/O ERROR OCCURRED WHILE POSITIONING A MAGNETIC TAPE\n     DATASET THAT WAS OPENED WITH THE OPTION INPUT OR INOUT TO BE READ\n     BACKWARD. IF IT IS A TAPE WITH STANDARD LABELS, THE ERROR OCCURRED\n     POSITIONING AT THE LABELS.  IF IT IS A TAPE WITH NO LABELS, THE\n     ERROR OCCURRED POSITIONING AT THE DATA.\n))S637-14 - AN I/O ERROR IN TAPE POSITIONING OCCURRED FOR A DATASET\n     WITH THE LEAVE OPTION SPECIFIED IN THE OPEN MACRO OR IN THE\n     FEOV MACRO.\n))S637-18 - AN I/O ERROR IN TAPE POSITIONING OCCURRED FOR A DATASET\n     OPENED WITH THE REREAD OPTION.\n))S637-1C - AN I/O ERROR IN TAPE POSITIONING OCCURRED WHEN FEOV WAS\n     ISSUED FOR A DATASET WITH DISP=PASS AND NO OPEN OPTION 2 SPECIFIED.\n))S637-20 - RDBACK WAS INVALIDLY SPEICFIED FOR A NEW CONCATENATED TAPE\n     VOLUME.  RDBACK IS NOT SUPPORTED WITH CONCATENATION.\n))S637-24 - AN I/O ERROR OCCURRED REWINDING A SCRATCH MAGNETIC TAPE\n     VOLUME.  EITHER FEOV WITH A REWIND OPTION WAS ISSUED, OR NO OPEN\n     OPTION 2 WAS SPECIFIED WHEN THE DISPOSITION WAS NOT PASS.\n))S637-2C - AN I/O ERROR OCCURRED WHILE REWINDING A MAGNETIC TAPE\n     VOLUME PRIOR TO VERIFYING THE VOLUME LABEL.\n))S637-34 - AN I/O ERROR OCCURRED DURING END OF VOLUME PROCESSING\n     WHILE READING THE VOLUME LABEL OF A MAGNETIC TAPE.\n))S637-38 - AN I/O ERROR OCCURRED WHILE POSITIONING A TAPE WITHOUT\n     LABELS OR WITH NONSTANDARD LABELS.\n))S637-3C - AN I/O ERROR OCCURRED WHILE POSITIONING A CONCATENATED\n     MAGNETIC TAPE DATASET.\n))S637-40 - AN I/O ERROR OCCURRED POSITIONING A MAGNETIC TAPE DATASET\n     THAT WAS OPENED WITH THE OPTION INPUT OR INPUT TO BE READ FORWARD.\n))S637-44 - AN I/O ERROR OCCURRED WHILE CHECKING SENSE BYTES TO\n     DETERMINE IF A FILE PROTECT RING IS ON A MAGNETIC TAPE CONTAINING\n     A DATASET OPENED FOR INOUT.\n))S637-4C - AN I/O ERROR OCCURRED IN TAPE POSITIONING FOLLOWING USER\n     HEADER LABEL PROCESSING.\n))S684 - THE MODULE CALLING THE RACF MANAGER OR THE RACLIST FUNCTION\n     IS NOT AUTHORISED TO THE SVC FUNCTION.THE MODULE CALLING THE RACF\n     MANAGER MUST BE AUTHORISED (APF-AUTHORISED, IN SYSTEM KEY 0-7, OR\n     IN SUPERVISOR STATE).  THE MODULE CALLING THE RACLIST FUNCTION\n     MUST BE AUTHORISED (APF-AUTHORISED, IN SYSTEM KEY 0-7, OR IN\n     SUPERVISOR STATE) OR IN THE RACF-AUTHORISED CALLER TABLE AND\n     FETCHED FROM AN AUTHORISED LIBRARY.\n      - POSSIBLE USER ERROR.  IF THE RACF MANAGER WAS CALLED, VERIFY\n        THAT THE CALLING MODULE WAS EXECUTING IN AN AUTHORISED\n        STATE.  IF THE RACLIST FUNCTION WAS CALLED, VERIFY THAT\n        THE MODULE NAME WAS ENTERED IN THE RACF-AUTHORISED CALLER\n        TABLE AND THAT THE CALLING MODULE WAS LINK EDITED INTO\n        AN AUTHORISED LIBRARY.\n))S700 - A PROGRAM CHECK OCCURRED DURING EXCP PROCESSING OF AN I/O\n     REQUEST.  THE PROGRAM CHECK OCCURRED IN A SUPERVISOR SERVICE\n     ROUTINE CALLED BY EXCP. THIS IS LIKELY NOT A PROGRAMMER ERROR.\n     IN THE ABNORMAL TERMINATION DUMP, THE TCB FIELD TCBEXCPD (AT\n     OFFSET C0) POINTS TO THE EXCP PROBLEM DETERMINATION AREA.  THE\n     ITEMS IN THE PROBLEM DETERMINATION AREA OF GREATEST INTEREST TO\n     YOU ARE: (ALL OFFSETS IN HEX)\n      - OFFSET 2 CONTAINS A FLAG BYTE INDICATING WHERE THE ERROR\n        OCCURRED.\n        THE BIT PATTERN IS AS FOLLOWS:\n        1... ....  ERROR IN SVC PORTION OF EXCP\n        .1.. ....  ERROR IN SRB PORTION OF EXCP\n        ..1. ....  ERROR IN PCI APPENDAGE\n        ...1 ....  ERROR IN CHE APPENDAGE\n        .... 1...  ERROR IN ABE APPENDAGE\n        .... .1..  ERROR IN EOE APPENDAGE\n        .... ..1.  ERROR IN PGFX APPENDAGE\n        .... ...1  APENDAGE IS ACTIVE\n        .... ....  ERROR IN SIO APPENDAGE\n      - OFFSET 4 CONTAINS A COPY OF THE PROGRAM STATUS WORD (PSW)\n        BEFORE RTM WAS ENTERED.\n      - OFFSET E CONTAINS THE INTERRUPTION CODE.\n      - OFFSET 10 CONTAINS A COPY OF THE REGISTERS WHEN EXCP ISSUED\n        THE ABEND MACRO.\n      - OFFSET 54 CONTAINS THE CONTENTS OF THE REQUEST QUEUE ELEMENT\n        (RQE), IF ALLOCATED, FOR THE I/O REQUEST BEING PROCESSED.\n))S706 - THE REQUESTED LOAD MODULE WAS MARKED BY THE LINKAGE EDITOR\n         AS NOT EXECUTABLE.\n     BAD PRIOR LINKEDIT - CHECK THE LKED SYSPRINT\n))S713 - TRIED TO WRITE ON A DATASET WHOSE DATE PROTECTION HAD NOT\n         EXPIRED. OPERATOR REPLIED 'M' TO IEC507D TO HONOR EXP DATE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S713 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S713-RC)**\n))S713-04 - A DATASET ON MAGNETIC TAPE WAS OPENED FOR INOUT, OUTIN,\n     OUTPUT, OUTINX, OR EXTEND, BUT THE VOLUME CONTAINED A DATASET\n     WHOSE EXPIRATION DATE HAD NOT BEEN REACHED.\n))S713-08 - AN OPEN MACRO WAS ISSUED WITH INOUT FOR A DATASET ON A\n     DIRECT ACCESS DEVICE WITH DISP=OLD SPECIFIED ON THE DD STATEMENT.\n     THE EXPIRATION DATE ON THE DATASET HAD NOT BEEN REACHED.\n))S713-0C - THE OPERATOR REPLIED 'M' TO IEC704A TO REJECT THE REQUEST\n     TO REWRITE THE TAPE VOLUME'S VOL1 HEADER.\n))S714 - I/O ERROR IN LABEL PROCESSING - CLOSE FOR MAGNETIC TAPE\n     TAPE DRIVE FAILURE DURING CLOSE\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S714 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S714-RC)**\n))S714-04 - AN I/O ERROR OCCURRED WRITING TRAILER LABEL 1 FOR A DATASET\n     ON MAGNETIC TAPE DURING EXECUTION OF A CLOSE MACRO.\n))S714-08 - AN I/O ERROR OCCURRED WRITING TRAILER LABEL 2 FOR A DATASET\n     ON MAGNETIC TAPE DURING EXECUTION OF A CLOSE MACRO.\n))S714-0C - AN I/O ERROR OCCURRED WRITING A TAPE MARK DURING EXECUTION\n     OF A CLOSE MACRO.\n))S717 - AN I/O ERROR OCCURRED DURING EXECUTION OF A BSAM CLOSE TYPE=T\n     MACRO INSTRUCTION.  THE RETURN CODE INDICATES THE EXACT ERROR.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S717 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S717-RC)**\n))S717-04 - I/O ERROR FOR BSAM CLOSE TYPE=T WHEN\n     WRITING A TAPE MARK FOLLOWING THE LAST RECORD\n))S717-08 - I/O ERROR FOR BSAM CLOSE TYPE=T WHEN\n     WRITING TRAILER LABEL-1 OR TRAILER LABEL-2\n))S717-0C - I/O ERROR FOR BSAM CLOSE TYPE=T WHEN\n     WRITING A TAPE MARK FOLLOWING THE TRAILER LABELS\n))S717-10 - I/O ERROR FOR BSAM CLOSE TYPE=T WHEN\n     READING TRAILER LABEL-1 TO UPDATE THE DCB BLOCK COUNT\n))S722 - THE OUTPUT LIMIT SPECIFIED BY THE OUTLIM KEYWORD ON THE SYSOUT\n     DD STATEMENT OR BY THE LINES KEYWORD ON THE JOBPARM DD STATEMENT\n     WAS EXCEEDED.\n))S737 - I/O ERROR; DSCB NOT FOUND FOR MULTI-VOLUME OR CONCATENATED\n         DATA SET.\n     BE SURE ALL THE DATA SETS EXIST FOR CONCATENATED DATA SETS\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S737 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S737-RC)**\n))S737-04 - AN I/O ERROR OCCURRED READING A DSCB DURING END OF VOLUME\n     PROCESSING OR THE DSCB COULD NOT BE FOUND ON THE SPECIFIED VOLUME.\n))S737-08 - AN I/O ERROR OCCURRED READING A DIRECT ACCESS VOLUME\n     LABEL DURING END OF VOLUME PROCESSING.\n))S737-0C - AN I/O ERROR OCCURRED READING THE DSCB FOR A CONCATENATED\n     PARTITIONED DATASET.\n))S737-10 - AN I/O ERROR OCCURRED WRITING A FILE MARK FOR A DATASET\n     ON A DIRECT ACCESS DEVICE.\n))S737-14 - AN I/O ERROR OCCURRED READING A DSCB PREPARING FOR USER\n     TRAILER LABEL PROCESSING.\n))S737-1C - AN I/O ERROR OCCURRED WHILE READING A FORMAT-3 DSCB.\n))S737-24 - A MISSING MEMBER NAME WAS DETECTED BY BLDL WHILE SEARCHING\n     FOR THE TTR OF A CONCATENATED MEMBER.\n))S737-2C - THE ERROR OCCURRED WHEN A FEOV MACRO WAS ISSUED WHILE\n     ATTEMPTING TO WRITE A FILE MARK AT THE END OF DATA.  THE DCBFDAD\n     FIELD IN THE DCB INDICATED AN EXTENT NUMBER IN THE DEB GREATER\n     THAN THE NUMBER OF EXTENTS IN THE DATASET.  CONSEQUENTLY IT COULD\n     NOT BE DETERMINED WHERE THE FILE MARK SHOULD HAVE BEEN WRITTEN.\n))S737-3C - THE FORMAT-1 DSCB NOT FOUND INSTALLATION EXIT MODULE\n     ENCOUNTERED AN ERROR.\n))S738 - AN UNEXPECTED ERROR OCCURRED DURING THE EXECUTION OF AN ENQ\n     MACRO. RELATED INFORMATION IS RECORDED IN SYS1.LOGREC.\n))S800 - AN ERROR OCCURRED WHEN EXCP ATTEMPTED TO FIX A PAGE FOR\n     THIS EXCP REQUEST.\n))S804 - REQUEST FOR 0 BYTES OF VIRTUAL STORAGE OR NOT ENOUGH VIRTUAL\n         STORAGE AVAILABLE FOR GETMAIN REQUEST.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S804 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S804-RC)**\n   --POSSIBLE CAUSE--\n     PROGRAM EXCEEDED REGION SIZE\n))S804-04 - THERE IS NOT ENOUGH VIRTUAL SQA TO SATISFY THE REQUEST.\n))S804-08 - THERE IS NOT ENOUGH VIRTUAL CSA TO SATISFY THE REQUEST.\n))S804-0C - THERE IS NOT ENOUGH VIRTUAL LSQA TO SATISFY THE REQUEST.\n))S804-10 - THERE IS NOT ENOUGH PRIVATE AREA TO SATISFY THE REQUEST.\n    MAY BE A V=R REGION BEFORE ITS INITIALIZATION HAS COMPLETED.\n))S804-1C - THERE IS NOT ENOUGH VIRTUAL LSQA FOR VSM'S CELLPOOL\n     REQUIRED DURING THE REQUEST.\n))S805-1C - (1C IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S805)\n     THERE IS NOT ENOUGH VIRTUAL LSQA FOR VSM'S CELLPOOL REQUIRED\n     DURING THE FREEMAIN REQUEST.\n))S806 - BLDL DETECTED ERROR: MODULE NOT FOUND OR I/O ERROR DURING\n         DIRECTORY SEARCH\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S806 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S806-RC)**\n   --POSSIBLE CAUSE--\n    MISSING JOBLIB OR STEPLIB CARD\n    TRIED TO EXECUTE A NON-EXISTENT PROGRAM\n    TRIED TO EXECUTE IN BATCH A PROGRAM ASSEMBLED WITH 'TEST' OPTION\n    SYSIN DESCRIBED INCORRECTLY TO LKED OR NAME CARD MISSING\n))S806-04 - THE PROGRAM ENTRY POINT SPECIFIED WAS NOT FOUND IN THE\n     INDICATED LIBRARY (PRIVATE LIBRARY, JOB LIBRARY, OR LINK LIBRARY).\n))S806-08 - AN UNCORRECTABLE INPUT/OUTPUT ERROR OCCURRED WHEN THE BLDL\n     CONTROL PROGRAM ROUTINE ATTEMPTED TO SEARCH THE DIRECTORY OF THE\n     LIBRARY THAT CONTAINED THE PROGRAM WHOSE ENTRY POINT WAS\n     SPECIFIED.  THIS CAN OCCUR IF THE INDICATED LIBRARY IS AN\n     UNINITIALIZED PARTITIONED DATASET.\n))S806-0C - THE SUPERVISOR ATTEMPTED TO SEARCH A LIBRARY FOR THE\n     SPECIFIED ENTRY POINT, BUT THE DCB OF THE LIBRARY WAS NOT OPEN.\n))S806-10 - AN EXPLICIT LOAD WAS ISSUED WITH NO DCB SPECIFIED.\n))S806-14 - AN SVC ROUTINE REQUIRED BY THE SYSTEM COULD NOT BE FOUND IN\n     THE LINK PACK AREA.\n))S806-18 - AN SVC ROUTINE REQUIRED BY THE SYSTEM COULD NOT BE FOUND IN\n     THE LINK PACK AREA BECAUSE THE DIRECTORY WAS NOT YET BUILT.\n))S806-1C - SPECIFIED DCB FOR ATTACH, LINK, LOAD, OR XCTL IS INCORRECT.\n))S80A - REQUEST FOR 0 BYTES OF VIRTUAL STORAGE OR NOT ENOUGH VIRTUAL\n         STORAGE AVAILABLE FOR GETMAIN OR FREEMAIN REQUEST.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S80A OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S80A-RC)**\n))S80A-04 - THERE IS NOT ENOUGH VIRTUAL SQA TO SATISFY THE REQUEST.\n))S80A-08 - THERE IS NOT ENOUGH VIRTUAL CSA TO SATISFY THE REQUEST.\n))S80A-0C - THERE IS NOT ENOUGH VIRTUAL LSQA TO SATISFY THE REQUEST.\n))S80A-10 - THERE IS NOT ENOUGH PRIVATE AREA TO SATISFY THE REQUEST.\n    MAY BE A V=R REGION BEFORE ITS INITIALIZATION HAS COMPLETED.\n))S80A-1C - THERE IS NOT ENOUGH VIRTUAL LSQA FOR VSM'S CELLPOOL\n     REQUIRED DURING THE REQUEST.\n))S813-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S813)\n     AN OPEN MACRO WAS ISSUED FOR A DATASET ON MAGNETIC TAPE, BUT THE\n     DATASET NAME ON THE HEADER LABEL DID NOT MATCH THAT IN THE JFCB.\n   --POSSIBLE CAUSE--\n    WRONG DSNAME OR VOLUME SERIAL - JCL DISAGREES WITH LABEL\n    INCORRECT RECORD FORMAT OR BLOCK SIZE\n    THE REQUESTED DRIVE WAS NOT SWITCHED TO THIS MACHINE\n))S822 - A REGION REQUIRED TO RUN THE STEP COULD NOT BE OBTAINED.  ONE\n     OF THE FOLLOWING MESSAGES WILL BE WRITTEN TO THE PROGRAMMER,\n     DEPENDING UPON WHETHER THE JOB WAS AN ORDINARY JOB OR A DEFERRED\n     CHECKPOINT RESTART:\n     - IEF085I REGION UNAVAILABLE, ERROR CODE = CDE\n     - IEF186I REGION UNAVAILABLE FOR RESTART, ERROR CODE = CDE\n   ***IF THE IEF085I OR IEF186I ERROR CODE IS AVAILABLE, SUPPLY IT ***\n   ***IN THE S822 OPERAND FOR MORE INFORMATION: H ABEND O(S822-EC)***\n))S822-08 - IEF085I - A V=V REGION WAS REQUESTED AND A REGION SIZE WAS\n     SPECIFIED WHICH WAS LARGER THAN THE PRIVATE AREA, OR A V=R REGION\n     WAS REQUESTED AND A REGION SIZE GREATER THAN THE V=R AREA WAS\n     SPECIFIED.\n     IEF186I - THE REGION PARAMETER WAS INCREASED SO THAT THE REGION\n     COULD NOT BE ALLOCATED OR THE CONFIGURATION OF THE SYSTEM CHANGED\n     SO THAT THE REGION COULD NOT BE OBTAINED:\n        - FOR ADDRSPC=REAL, THE SIZE OF THE REAL AREA WAS DECREASED.\n        - FOR ADDRSPC=VIRT, THE SIZE OF THE PRIVATE AREA DECREASED\n          BECAUSE THE SIZE OF THE NUCLEUS INCREASED OR THE SIZE OF THE\n          SQA OR THE IPA INCREASED.\n))S822-16 - IEF085I - A V=R AREA WAS REQUESTED, BUT EITHER LONG-FIXED\n     OR DAMAGED PAGES IN THE V=R AREA MADE IT IMPOSSIBLE TO OBTAIN THE\n     REQUESTED REGION, OR A V=R REGION WAS  REQUESTED AND THERE WAS NOT\n     ENOUGH SQA AVAILABLE FOR THE SYSTEM TO COMPLETE THE PROCESSING OF\n     THE REQUEST.\n     IEF186I - IF A REAL REGION WAS REQUESTED, EITHER LONG-FIXED OR\n     DAMAGED PAGES IN THE REAL AREA MADE IT IMPOSSIBLE TO OBTAIN THE\n     REQUIRED REGION.\n))S822-20 - IEF085I AND IEF186I - EITHER A V=V OR V=R REGION WAS\n     REQUESTED FRAGMENTATION BY LSQA, SWA, OR SUBPOOLS 229 OR 230\n     HAS MADE IT IMPOSSIBLE TO OBTAIN THE REQUESTED REGION.\n))S822-24 - IEF085I AND IEF186I - A REQUEST FOR A V=R REGION COULD NOT\n     BE SATISFIED BECAUSE THE INSTALLATION GETPART EXIT ROUTINE\n     REJECTED THE REQUEST.\n))S837 - THE ERROR OCCURRED DURING END OF VOLUME FOR A SEQUENTIAL\n     DATA SET.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S837 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S837-RC)**\n))S837-04 - THE UNIT IS NOT CAPABLE OF HANDLING THE REQUESTED DENSITY.\n))S837-08 - THE VOLUME SERIAL NUMBER WAS NOT FOUND IN THE JFCB.\n   --POSSIBLE CAUSES--\n     VOLUME COUNT TO SMALL IN VOL PARAMETER OF DD STATEMENT\n     OPEN TYPE=J WAS USED TO CHANGE VOLUME SERIAL BUT NOT WRITTEN BACK\n))S837-0C - ANOTHER DATA SET ON THE VOLUME WAS IN USE.\n))S837-10 - THE DEVICE DOES NOT SUPPORT THE SELECTED RECORDING MODE.\n))S837-14 - THE TAPE VOLUME DOES NOT CONFORM TO THE SINGLE RECORDING\n     MODE RULES.  FOR INPUT, THE VIOLATION OCCURRED WHEN THE TAPE\n     WAS WRITTEN WHEN THE RULES COULD NOT BE ENFORCED.  FOR OUTPUT,\n     THE ABEND PREVENTS ANY VIOLATION FROM HAPPENING.\n))S878 - REQUEST FOR 0 BYTES OF VIRTUAL STORAGE OR NOT ENOUGH VIRTUAL\n         STORAGE AVAILABLE FOR GETMAIN OR FREEMAIN REQUEST.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S878 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S878-RC)**\n))S878-04 - THERE IS NOT ENOUGH VIRTUAL SQA TO SATISFY THE REQUEST.\n))S878-08 - THERE IS NOT ENOUGH VIRTUAL CSA TO SATISFY THE REQUEST.\n))S878-0C - THERE IS NOT ENOUGH VIRTUAL LSQA TO SATISFY THE REQUEST.\n))S878-10 - THERE IS NOT ENOUGH PRIVATE AREA TO SATISFY THE REQUEST.\n    MAY BE A V=R REGION BEFORE ITS INITIALIZATION HAS COMPLETED.\n))S878-14 - A NEGATIVE STORAGE AMOUNT WAS SPECIFIED FOR A GETMAIN.\n))S878-18 - A NEGATIVE STORAGE AMOUNT WAS SPECIFIED FOR A FREEMAIN.\n))S878-1C - THERE IS NOT ENOUGH VIRTUAL LSQA FOR VSM'S CELLPOOL\n     REQUIRED DURING THE REQUEST.\n))S905-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S905)\n     AREA TO BE FREED BY FREEMAIN IS NOT ON A DOUBLEWORD BOUNDARY.\n))S90A-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S90A)\n     THE ERROR OCCURRED DURING THE EXECUTION OF AN R-FORM FREEMAIN\n     MACRO.  THE ADDRESS OF THE STORAGE AREA TO BE RELEASED WAS NOT ON\n     A DOUBLEWORD BOUNDARY (A MULTIPLE OF 8).\n))S913 - THE ERROR OCCURRED DURING 1) THE EXECUTION OF AN OPEN MACRO\n         OR DURING END-OF-VOLUME PROCESSING FOR A PASSWORD PROTECTED\n         DATASET, OR 2) THE EXECUTION OF AN OPEN MACRO INVOLVING A\n         CHECKPOINT DATASET.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S913 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S913-RC)**\n   --POSSIBLE CAUSE--\n     OPERATOR FAILED TO SUPPLY CORRECT PASSWORD FOR PROTECTED DATASET\n     UNAUTHORIZED ATTEMPT TO USE LABEL=BLP\n     PREVIOUS DATASET ON THIS TAPE WAS PROTECTED, NEW DATASET IS NOT\n))S913-04 - AN OPEN MACRO WAS ISSUED FOR A MAGNETIC TAPE DATASET WITH\n     AMERICAN NATIONAL STANDARD LABELS.  THE VOLUME ACCESSABILITY BYTE\n     (OFFSET X'0A') IN THE VOLUME LABEL IS NOT BLANK.  THIS INDICATES\n     THE LABEL WAS NOT WRITTEN FOR USE ON AN IBM SYSTEM, OR THAT IT WAS\n     WRITTEN BY THE USER. THE VOLUME MUST BE RECREATED.\n))S913-08 - AN OPEN MACRO WAS ISSUED FOR A MAGNETIC TAPE DATASET WITH\n     AMERICAN NATIONAL STANDARD LABELS. THE SECURITY BYTE IN THE HEADER\n     LABEL WAS NOT BLANK AND NOT EQUAL TO X'F1'. THIS MEANS THE LABEL\n     EITHER WAS NOT CREATED ON AN IBM SYSTEM OR WAS CREATED BY THE\n     USER. THE VOLUME MUST BE RECREATED FOR USE ON AN IBM SYSTEM.\n))S913-0C - AN OPEN MACRO WAS ISSUED FOR A PROTECTED DATASET FOR\n     WHICH YOU ARE NOT ALLOWED THIS TYPE OF ACCESS.\n))S913-10 - AN OPEN MACRO WAS ISSUED TO THE VTOC FOR OUTPUT PROCESSING\n     BY AN UNAUTHORIZED JOB STEP OR JOB-STEP TASK.\n))S913-14 - AN OPEN MACRO WAS ISSUED TO CONCATENATE CHECKPOINT AND\n     NONCHECKPOINT DATASETS.\n))S913-18 - AN OPEN TYPE=J MACRO WAS ISSUED FOR A MAGNETIC TAPE VOLUME.\n     THE JFCB WAS MODIFIED TO INDICATE LABEL=BLP (BYPASS LABEL\n     PROCESSING) AN THE TASK WAS NOT AUTHORIZED.  BLP MAY BE SPECIFIED\n     IN THE JCL (IF THE INSTALLATION READER PROCEDURE ALLOWS IT), BUT\n     THE JFCB MAY NOT BE MODIFIED TO INDICATE BLP UNLESS THE TASK IS\n     AUTHORIZED.\n))S913-1C - THE ERROR OCCURRED DURING THE EXECUTION OF AN OPEN TYPE=J\n     MACRO TO A DIRECT ACCESS DEVICE DATASET. THE DATASET NAME SUPPLIED\n     TO OPEN WAS NOT AVAILABLE TO THE JOB. EITHER THE DATASET WAS BEING\n     OPENED FOR INPUT AND SOME OTHER JOB HAD EXCLUSIVE CONTROL OF IT,\n     OR THE DATASET WAS BEING OPENED FOR AN OPTION OTHER THAN INPUT\n     (THUS REQUIRING EXCLUSIVE CONTROL) AND SOME OTHER JOB WAS USING\n     THE DATASET.\n))S913-20 - AN OPEN MACRO USING THE EXCP ACCESS METHOD WAS ISSUED IN\n     WHICH USER-WRITTEN APPENDAGES WERE REQUIRED.  THE APPENDAGE NAMES\n     WERE NOT INCLUDED IN THE PARMLIB MEMBER IEAAPP00, AND THE PROGRAM\n     ISSUING THE OPEN WAS NOT AUTHORIZED (BY APF OR PROTECT KEY).\n))S913-28 - AN OPEN MACRO WAS ISSUED FOR A CHECKPOINT DATASET.  THE\n     DATASET ORGANIZATION WAS NOT BPAM OR BSAM AND THE TASK WAS NOT\n     AUTHORIZED VIA THE AUTHORIZED PROGRAM FACILITY (APF).\n))S913-2C - AN OPEN MACRO WAS ISSUED TO AN ISAM DATASET DEFINED BY TWO\n     OR THREE DD STATEMENTS.  EITHER THE DATASET NAMES CODED IN THE\n     DD STATEMENTS WERE NOT ALL THE SAME, OR THE JFCB PASSED TO OPEN\n     (IF AN OPEN TYPE=J IS BEING USED) HAS A DATASET NAME DIFFERENT\n     FROM THAT CODED IN THE DD STATEMENTS.\n))S913-30 - AN OPEN MACRO WAS ISSUED TO WRITE A DATASET ON A MAGNETIC\n     TAPE CONTAINING ONE OR MORE PREVIOUS DATASETS.  THE PROTECTION\n     MODE OF THE DATASET TO BE WRITTEN WAS DIFFERENT THAN THE\n     PROTECTION MODE OF THE PREVIOUS DATASET.\n))S913-34 - AT OPEN, THE CALLER IS NOT AUTHORIZED TO REJECT FOR INPUT.\n))S913-38 - AN OPEN WAS ISSUED FOR A RACF-PROTECTED DATA SET ON DASD\n     OR A RACF-PROTECTED TAPE VOLUME TO WHICH THE CALLER WAS NOT\n     AUTHORIZED.\n))S913-3C - AN OPEN WAS ISSUED FOR A RACF-INDICATED (RACF BIT ON IN\n     THE FORMAT-1 DSCB IN THE VTOC) DATA SET, BUT THE DATA SET IS NOT\n     DEFINED TO RACF.\n))S913-40 - A VSAM DATA SPACE BEING OPENED IS RACF-DEFINED.\n))S913-44 - INVALID SPECIFICATION OF PROTECT - THE TAPE VOLUME WAS\n     ALREADY RACF-PROTECTED.\n))S913-48 - INVALID SPECIFICATION OF PROTECT - THE SYSTEM TAPE OPTION\n     IS NOT IN EFFECT.\n))S913-4C - INVALID SPECIFICATION OF PROTECT - THE USER IS NOT DEFINED\n     TO RACF.\n))S913-50 - INVALID SPECIFICATION OF PROTECT - THE REQUEST IS FOR A\n     NL, BLP OR LTM TAPE.\n))S913-54 - INVALID SPECIFICATION OF PROTECT - THE REQUEST IS FOR\n     INPUT OR INOUT.\n))S913-58 - INVALID SPECIFICATION OF PROTECT - THE VOLUME SEQUENCE\n     NUMBER OR THE FILE SEQUENCE NUMBER IS NOT EQUAL TO ONE ON A\n     AL, SUL, AL OR AUL TAPE, OR THE TAPE IS BEING OPENED WITH\n     DISP=MOD (INCLUDING OPEN OPTIONS OUTINX AND EXTEND).\n))S913-5C - INVALID SPECIFICATION OF PROTECT - THE VOLUME BEING USED\n     IS A PUBLIC VOLUME.\n))S913-60 - THE USER IS NOT AUTHORIZED TO DEFINE A DATA SET WITH THE\n     SPECIFIED NAME.  THIS NAME AND FILE SEQUENCE INDICATOR DO NOT\n     MATCH THE CORRESPONDING NAMES IN THE TVTOC (TAPE VTOC).\n))S913-64 - THE USER IS NOT AUTHORIZED TO SPECIFY BLP.\n))S913-68 - THE USER IS NOT AUTHORIZED TO ADD A DATA SET TO THE VOLUME.\n))S913-6C - PROTECT WAS NOT SPECIFIED IN THE JCL.  THE USER IS NOT\n     AUTHORIZED TO DEFINE A DATASET PROTECTED BY A GENERIC PROFILE.\n))S913-70 - THE USER HAS RACF EXECUTE ACCESS ONLY AND ONE OF THE\n     FOLLOWING REQUIREMENTS WAS VIOLATED:\n     - THE CALLER MUST BE IN SUPERVISOR STATE\n       OR THE DATA SET MUST BE A PDS.\n     - THE ACCESS METHOD MUST NOT BE EXCP.\n))S913-72 - AN UNEXPECTED RETURN CODE HAS BEEN RETURNED FROM RACF.\n))S978-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S978)\n     AREA TO BE FREED BY FREEMAIN IS NOT ON A DOUBLEWORD BOUNDARY.\n))SA00 - A PROGRAM CHECK OCCURRED IN AN APPENDAGE.  IN THE ABNORMAL\n     TERMINATION DUMP, THE TCB FIELD TCBEXCPD (AT OFFSET C0) POINTS\n     TO THE EXCP PROVIDED DEBUGGING AREA.  THE ITEMS IN THE DEBUGGING\n     AREA OF GREATEST INTEREST TO YOU ARE: (ALL OFFSETS IN HEX)\n      - OFFSET 2 CONTAINS A FLAG BYTE INDICATING WHERE THE ERROR\n        OCCURRED.\n        THE BIT PATTERN IS AS FOLLOWS:\n        1... ....  ERROR IN SVC PORTION OF EXCP\n        .1.. ....  ERROR IN SRB PORTION OF EXCP\n        ..1. ....  ERROR IN PCI APPENDAGE\n        ...1 ....  ERROR IN CHE APPENDAGE\n        .... 1...  ERROR IN ABE APPENDAGE\n        .... .1..  ERROR IN EOE APPENDAGE\n        .... ..1.  ERROR IN PGFX APPENDAGE\n        .... ...1  APENDAGE IS ACTIVE\n        .... ....  ERROR IN SIO APPENDAGE\n      - OFFSET 4 CONTAINS A COPY OF THE PROGRAM STATUS WORD (PSW)\n        BEFORE RTM WAS ENTERED.\n      - OFFSET E CONTAINS THE INTERRUPTION CODE.\n      - OFFSET 10 CONTAINS A COPY OF THE REGISTERS WHEN EXCP ISSUED\n        THE ABEND MACRO.\n      - OFFSET 54 CONTAINS THE CONTENTS OF THE REQUEST QUEUE ELEMENT\n        (RQE), IF ALLOCATED, FOR THE I/O REQUEST BEING PROCESSED.\n))SA05 - ERROR DURING FREEMAIN.  AREA TO BE RELEASED OVERLAPS FREE\n     STORAGE OR PAGE-FIXED STORAGE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SA05 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SA05-RC)**\n))SA05-04 - THE SQA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA05-08 - THE CSA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA05-0C - THE LSQA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA05-10 - THE PRIVATE AREA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA05-14 - PART OF THE CSA BEING FREED IS STILL FIXED.\n))SA05-18 - PART OF THE PRIVATE AREA BEING FREED IS STILL FIXED.\n))SA0A - ERROR DURING R-FORM FREEMAIN.  AREA TO BE RELEASED OVERLAPS\n     FREE STORAGE OR PAGE-FIXED STORAGE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SA0A OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SA0A-RC)**\n))SA0A-04 - THE SQA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA0A-08 - THE CSA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA0A-0C - THE LSQA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA0A-10 - THE PRIVATE AREA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA0A-14 - PART OF THE CSA BEING FREED IS STILL FIXED.\n))SA0A-18 - PART OF THE PRIVATE AREA BEING FREED IS STILL FIXED.\n))SA13 - THE ERROR OCCURRED DURING EXECUTION OF AN OPEN MACRO ON\n     MAGNETIC TAPE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SA13 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SA13-RC)**\n))SA13-04 - AN UNEXPECTED LOAD POINT WAS ENCOUNTERED WHILE POSITIONING\n     A TAPE.  FOR NL TAPE THIS IS PROBABLY A USER ERROR ASSOCIATED WITH\n     THE USE OF A MULTIVOLUME MULTIFILE NL TAPE.\n))SA13-08 - THE REQUESTED FILE SEQUENCE NUMBER IS LESS THAN THAT OF THE\n     FIRST FILE ON THE SL TAPE DURING AN OPEN TO THE START OF THE FILE.\n))SA13-0C - THE REQUESTED FILE SEQUENCE NUMBER IS LESS THAN THAT OF THE\n     FIRST FILE ON THE SL TAPE DURING AN OPEN TO THE END OF A FILE.\n))SA13-10 - A TAPE MARK WAS READ INSTEAD OF A HDR1 LABEL WHILE FORWARD\n     SPACING TO THE DESIRED FILE ON AN SL TAPE.  THUS, THE MULTIFILE\n     TAPE ENDS BEFORE THE DESIRED FILE.  WHEN POSITIONING TO THE END OF\n     FILE 1, THIS MEANS THE VOL LABEL IS FOLLOWED BY A TAPE MARK.\n     CHECK THE FILE SEQUENCE NUMBER AND THE VOLUME SERIAL NUMBERS AND\n     THAT THE JOB THAT WROTE THE TAPE WROTE ALL THE FILES.\n))SA13-14 - A TAPE MARK WAS READ INSTEAD OF A HDR1 LABEL WHILE OPENING\n     FOR INPUT TO THE START OF THE DESIRED FILE ON AN SL TAPE.  THUS,\n     THE TAPE ENDS JUST BEFORE THE DESIRED FILE.  CHECK THE FILE\n     SEQUENCE NUMBER AND THE VOLUME SERIAL NUMBERS AND THAT THE JOB\n     THAT WROTE THE TAPE WROTE ALL THE FILES.\n))SA13-18 - AN EOV1 LABEL WAS READ ON THE LAST SL TAPE VOLUME WHILE\n     FORWARD SPACEING TO THE DESIRED FILE.  IF OPENING TO THE END OF\n     THE FILE, IT COULD NOT BE TREATED AS THE END OF THE DATA SET\n     BECAUSE IT WAS FOR A PREVIOUS FILE SEQUENCE NUMBER.\n))SA14-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH SA14)\n     I/O ERROR OCCURRED DURING A CLOSE ATTEMPTING A PARTIAL RELEASE\n     OF SPACE ON A DIRECT ACCESS DEVICE.\n))SA37 - THE ERROR OCCURRED DURING END OF VOLUME PROCESSING.  THE TASK\n     IS TERMINATED UNLESS THE ERROR IS TO BE IGNORED AS SPECIFIED IN\n     THE DCB ABEND EXIT ROUTINE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SA37 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SA37-RC)**\n   --POSSIBLE CAUSE--\n     AN OPEN DCB MAY HAVE BEEN PARTIALLY OVERLAID\n     THE DCB MAY HAVE BEEN CLOSED IN A SYNAD ROUTINE\n     THE DCB MAY HAVE BEEN AUTOMATICALLLY CLOSED BY A PREVIOUS END OF\n       OF VOLUME ERROR WHERE IGNORE WAS SPECIFIED IN THE DCB ABEND EXIT\n))SA37-04 - AN SVC 55 (EOV) WAS ISSUES, USUALLY BY A CHECK, GET, OR PUT\n     ROUTINE, AGAINST A DCB WHICH WAS NOT OPEN.\n))SA37-08 - THE DATA EXTENT BLOCK (DEB) DOES NOT POINT TO THE DCB.\n))SA78 - ERROR DURING RU-FORM FREEMAIN.  AREA TO BE RELEASED OVERLAPS\n     FREE STORAGE OR PAGE-FIXED STORAGE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SA78 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SA78-RC)**\n))SA78-04 - THE SQA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA78-08 - THE CSA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA78-0C - THE LSQA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA78-10 - THE PRIVATE AREA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA78-14 - PART OF THE CSA BEING FREED IS STILL FIXED.\n))SA78-18 - PART OF THE PRIVATE AREA BEING FREED IS STILL FIXED.\n))SACC - NOT AN ERROR - FORTRAN ACCOUNTING TERMINATION\n))SB00 - A PROGRAM CHECK OCCURRED IN AN EXCP PROCEDURE. IN THE ABNORMAL\n     TERMINATION DUMP, THE TCB FIELD TCBEXCPD (AT OFFSET C0) POINTS\n     TO THE EXCP PROVIDED DEBUGGING AREA. THE ITEMS IN THE DEBUGGING\n     AREA OF GREATEST INTEREST TO YOU ARE: (ALL OFFSETS IN HEX)\n      - OFFSET 2 CONTAINS A FLAG BYTE INDICATING WHERE THE ERROR\n        OCCURRED.\n        THE BIT PATTERN IS AS FOLLOWS:\n        1... ....  ERROR IN SVC PORTION OF EXCP\n        .1.. ....  ERROR IN SRB PORTION OF EXCP\n        ..1. ....  ERROR IN PCI APPENDAGE\n        ...1 ....  ERROR IN CHE APPENDAGE\n        .... 1...  ERROR IN ABE APPENDAGE\n        .... .1..  ERROR IN EOE APPENDAGE\n        .... ..1.  ERROR IN PGFX APPENDAGE\n        .... ...1  APENDAGE IS ACTIVE\n        .... ....  ERROR IN SIO APPENDAGE\n      - OFFSET 4 CONTAINS A COPY OF THE PROGRAM STATUS WORD (PSW)\n        BEFORE RTM WAS ENTERED.\n      - OFFSET E CONTAINS THE INTERRUPTION CODE.\n      - OFFSET 10 CONTAINS A COPY OF THE REGISTERS WHEN EXCP ISSUED\n        THE ABEND MACRO.\n      - OFFSET 50 CONTAINS THE TRANSLATION EXCEPTION ADDRESS,\n        IF APPLICABLE.\n      - OFFSET 54 CONTAINS THE CONTENTS OF THE REQUEST QUEUE ELEMENT\n        (RQE), IF ALLOCATED, FOR THE I/O REQUEST BEING PROCESSED.\n      - OFFSET 80 IS THE START OF THE 160 BYTE BLOCKS INVOLVED IN THE\n        I/O REQUEST, IF ALLOCATED.\n))SB04 - THE ERROR OCCURRED DURING EXECUTION OF A GETMAIN MACRO:\n         - A SUBPOOL NUMBER GREATER THAN 127 WAS SPECIFIED BY A PROBLEM\n           PROGRAM (A PROGRAM NOT AUTHORIZED TO USE VALID SUBPOOL\n           NUMBERS GREATER THAN 127) (RC=08)\n         - AN AUTHORIZED PROGRAM REQUESTED AN INVALID SUBPOOL (RC=04)\n   --POSSIBLE CAUSE--\n    TRIED TO CHANGE BLOCKING FACTOR WHILE LOADING A DATASET\n    COBOL - CONTROL PASSED BEYOND END OF PROGRAM DUE TO INVALID PERFORM\n))SB05 - THE ERROR OCCURRED DURING EXECUTION OF A FREEMAIN MACRO:\n         - A SUBPOOL NUMBER GREATER THAN 127 WAS SPECIFIED BY A PROBLEM\n           PROGRAM (A PROGRAM NOT AUTHORIZED TO USE VALID SUBPOOL\n           NUMBERS GREATER THAN 127) (RC=08)\n         - AN AUTHORIZED PROGRAM REQUESTED AN INVALID SUBPOOL (RC=04)\n   --POSSIBLE CAUSE--\n    TRIED TO CHANGE BLOCKING FACTOR WHILE LOADING A DATASET\n    COBOL - CONTROL PASSED BEYOND END OF PROGRAM DUE TO INVALID PERFORM\n))SB0A - THE ERROR OCCURRED DURING EXECUTION OF AN R-FORM GETMAIN OR\n     FREEMAIN MACRO:\n         - A SUBPOOL NUMBER GREATER THAN 127 WAS SPECIFIED BY A PROBLEM\n           PROGRAM (A PROGRAM NOT AUTHORIZED TO USE VALID SUBPOOL\n           NUMBERS GREATER THAN 127) (RC=08)\n         - AN AUTHORIZED PROGRAM REQUESTED AN INVALID SUBPOOL (RC=04)\n   --POSSIBLE CAUSE--\n    TRIED TO CHANGE BLOCKING FACTOR WHILE LOADING A DATASET\n    COBOL - CONTROL PASSED BEYOND END OF PROGRAM DUE TO INVALID PERFORM\n))SB13 - THE ERROR OCCURRED DURING THE EXECUTION OF AN OPEN MACRO FOR\n     A DATA SET ON A PRINTER WITH UNIVERSAL CHARACTER SET (UCS).\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SB13 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SB13-RC)**\n))SB13-04 - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER.\n     THE OPERATOR REPLIED 'CANCEL' TO IEC120A, IEC122D OR 1EC123D\n     BECAUSE THE UCS IMAGE COULD NOT BE FOUND IN SYS1.IMAGELIB.\n))SB13-08 - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER.\n     BLDL FOUND A PERMANENT I/O ERROR WHEN SEARCHING SYS1.IMAGELIB\n     FOR THE REQUESTED UCS IMAGE.\n))SB13-0C - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER\n     OR TO A 3886.  A PERMANENT I/O ERROR PERSISTED AFTER TWO ATTEMPTS\n     AT LOADING THE UCS BUFFER -OR- A PERMANENT I/O ERROR OCCURRED\n     WHEN LOADING THE FORMAT RECORD INTO THE 3886.\n))SB13-10 - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER.\n     A PERMANENT I/O ERROR RESULTED WHEN TRYING TO PRINT THE CHARACTER\n     SET IMAGE FOR VISUAL VERIFICATION, OR DURING AN OPERATION WHICH\n     RESULTED IN POSSIBLE LOST DATA.\n))SB13-14 - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER.\n     THE OPERATOR REPLIED 'CANCEL' TO IEC121D AFTER THE CHARACTER SET\n     IMAGE WAS PRINTED FOR VISUAL VERIFICATION.\n))SB13-18 - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER.\n     A PERMANENT I/O ERROR RESULTED WHEN TRYING TO PRINT THE FCB\n     IMAGE FOR VISUAL VERIFICATION.\n))SB13-1C - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER.\n     THE OPERATOR REPLIED 'CANCEL' TO IEC128D AFTER THE FCB IMAGE WAS\n     PRINTED FOR VISUAL VERIFICATION -OR- SOME OTHER I/O ERROR.\n))SB13-20 - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER,\n     BUT NOT ENOUGH STORAGE WAS AVAILABLE TO OPEN SYS1.IMAGELIB.\n     DURING 3886 OPEN, EITHER THE PROPER VOLUME WAS NOT MOUNTED\n     OR A PERMANENT I/O ERROR OCCURRED WHILE READING SYS1.IMAGELIB.\n))SB13-24 - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER,\n     BUT THE VOLUME CONTAINING SYS1.IMAGELIB WAS NOT MOUNTED OR WAS\n     NOT CATALOGUED.  DURING 3886 OPEN, THE FORMAT RECORD IDENTIFIER\n     WAS NOT SPECIFIED.\n))SB13-28 - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER,\n     BUT A PERMANENT I/O ERROR PERSISTED WHILE OPENING SYS1.IMAGELIB.\n))SB13-2C - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER.\n     BLDL FOUND A PERMANENT I/O ERROR WHEN SEARCHING SYS1.IMAGELIB\n     FOR THE REQUESTED FCB IMAGE.\n))SB13-30 - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER.\n     A PERMANENT I/O ERROR PERSISTED AFTER TWO ATTEMPTS AT LOADING THE\n     FORMS CONTROL BUFFER (FCB).\n))SB13-34 - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER.\n     THE OPERATOR REPLIED 'CANCEL' TO IEC127D BECAUSE THE FCB IMAGE\n     COULD NOT BE FOUND IN SYS1.IMAGELIB.\n))SB13-38 - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER.\n     NO OPERATION WAS PERFORMED FOR ONE OF THE FOLLOWING REASONS:\n     - THE DATA CONTROL BLOCK (DCB) WAS NOT OPEN.\n     - THE DCB WAS NOT VALID FOR A SEQUENTIAL DATA SET.\n     - THE SETPRT PARAMETER LIST WAS NOT VALID.\n     - THE OUTPUT DEVICES WAS NOT A UCS OR 3800 PRINTER.\n))SB14 - AT CLOSE A PARTITIONED DATA SET DIRECTORY CANNOT BE UPDATED\n         BECAUSE THE NAME IS ALREADY IN THE DIRECTORY, NO SPACE IS\n         AVAILABLE IN THE DIRECTORY, OR AN I/O ERROR WAS ENCOUNTERED\n         IN THE DIRECTORY.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SB14 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SB14-RC)**\n   --POSSIBLE CAUSE--\n    ALLOCATED DIRECTORY SPACE IN JCL, WRITTEN AS SEQUENTIAL DATA SET\n))SB14-04 - A DUPLICATE NAME WAS FOUND IN THE DIRECTORY OF THE PDS.\n))SB14-08 - THE TTRN FOR A MEMBER WAS NOT WITHIN THE EXTENTS IN THE DEB\n))SB14-0C - THE ATTEMPTED UPDATE OF THE PARTITIONED DATASET FOUND\n     THAT THERE WAS NO SPACE LEFT IN THE DIRECTORY.\n))SB14-10 - AN I/O ERROR OCCURRED TRYING TO UPDATE THE DIRECTORY\n     OF THE PARTITIONED DATASET.\n))SB14-14 - THE CLOSE ROUTINE ATTEMPTED TO UPDATE THE DIRECTORY OF\n     THE PARTITIONED DATASET, HOWEVER THE DCB OF THE DATASET WAS\n     NOT OPEN.\n))SB14-18 - UNSUCCESSFUL GETMAIN FOR STOW WORKAREA WHEN CLOSE TRIED TO\n     UPDATE A PARTITIONED DATASET.  REGION SIZE IS TOO SMALL.\n))SB37 - AT END OF VOLUME, THE VOLUME MUST BE DEMOUNTED, BUT THE SYSTEM\n         IS UNABLE TO DISMOUNT THE VOLUME.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SB37 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SB37-RC)**\n   --POSSIBLE CAUSE--\n     THE DATA SET ON DASD - OUTPUT - ALREADY HAD 16 EXTENTS, BUT\n         REQUIRED MORE SPACE - SECONDARY SPACE WAS TOO SMALL\n     NO MORE SPACE WAS AVAILABLE ON THE VOLUME\n     THE VOLUME TABLE OF CONTENTS WAS FULL\n))SB37-04 - DURING END-OF-VOLUME PROCESSING THE SYSTEM HAD TO DEMOUNT\n     A VOLUME IN ORDER TO MOUNT THE NEXT VOLUME OF THE DATASET.  IT WAS\n     UNABLE TO DEMOUNT THE VOLUME FOR ONE OF THE FOLLOWING REASONS:\n     - THE VOLUME WAS PERMANENTLY RESIDENT OR WAS RESERVED.\n     - ANOTHER JOB HAD DATASETS ALLOCATED ON THE VOLUME.\n     - THE FAILING TASK HAD OPEN DATASETS ON THE VOLUME.\n     FOR AN OUTPUT DATASET ON A DIRECT ACCESS DEVICE:\n     - NO MORE SPACE WAS AVAILABLE ON THE VOLUME.\n     - THE DATASET ALREADY HAD 16 EXTENTS BUT REQUIRED MORE SPACE.\n     - MORE SPACE WAS REQUIRED, BUT THE VTOC WAS FULL.\n     FOR AN OUTPUT DATASET ON MAGNETIC TAPE:\n     - A VOLUME NEEDED TO BE DEMOUNTED BECAUSE THE REFLECTIVE SPOT\n       WAS ENCOUNTERED AND MORE RECORDS NEEDED TO BE WRITTEN, BUT\n       THE LIMIT OF OUTPUT TAPES HAD BEEN REACHED.\n))SB37-08 - DURING END-OF-VOLUME PROCESSING THE SYSTEM ATTEMPTED TO\n     EXTEND THE DATASET TO A VOLUME ON WHICH THE DIRF BIT WAS SET.\n     THE VTOC FOR THE VOLUME COULD NOT BE CONVERTED TO THE STANDARD\n     FORMAT FOR ONE OF THE FOLLOWING REASONS:\n     - TWO DATASETS WERE ALLOCATED TO THE SAME SPACE ON THE VOLUME.\n     - A SPLIT CYLINDER DATASET WAS LOCATED ON THE SAME CYLINDER AS\n       A NON-SPLIT CYLINDER DATASET.\n     - THE VTOC CONVERSION ROUTINE IS SET TO REJECT DIRF REQUESTS.\n))SB37-0C - THE MOUNTED DIRECT ACCESS VOLUME WAS REQUESTED TO CONTINUE\n     PROCESSING THE DATASET, BUT THE UNIT ALREADY CONTAINED THE\n     MAXIMUM OF 127 CONCURRENT USERS.\n))SB78 - THE ERROR OCCURRED DURING EXECUTION OF A GETMAIN OR FREEMAIN\n     MACRO:\n         - A SUBPOOL NUMBER GREATER THAN 127 WAS SPECIFIED BY A PROBLEM\n           PROGRAM (A PROGRAM NOT AUTHORIZED TO USE VALID SUBPOOL\n           NUMBERS GREATER THAN 127) (RC=08)\n         - AN AUTHORIZED PROGRAM REQUESTED AN INVALID SUBPOOL (RC=04)\n   --POSSIBLE CAUSE--\n    TRIED TO CHANGE BLOCKING FACTOR WHILE LOADING A DATASET\n    COBOL - CONTROL PASSED BEYOND END OF PROGRAM DUE TO INVALID PERFORM\n))SC03 - A DATA SET COULD NOT BE CLOSED BY THE CONTROL PROGRAM, BECAUSE\n         THE DCB HAD BEEN ERRONEOUSLY MODIFIED.\n     ISAM FILE - BAD BLOCK SIZE\n))SC13 - THE ERROR OCCURRED DURING THE EXECUTION OF AN OPEN MACRO FOR\n     A CONCATENATED PARTITIONED OR GRAPHICS DATASET.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SC13 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SC13-RC)**\n   --POSSIBLE CAUSE--\n     ATTEMPED TO WRITE OUTPUT TO CONCATENATED PARTITIONED DATASETS\n     MISSING OR DELETED JOBLIB DATA SET\n     GRAPHICS - SYSTEM PROBLEM - WAIT FOR IPL\n))SC13-04 - THE CURRENT TASK TRIED TO OPEN A GRAPHICS DEVICE THAT WAS\n     PREVIOUSLY OPENED AND NOT CLOSED.\n))SC13-10 - AN OPEN MACRO WAS ISSUED SPECIFYING OUTPUT OR EXTEND FOR\n     A CONCATENATED PARTITIONED DATASET.  OUTPUT DATASETS CANNOT BE\n     CONCATENATED.\n))SC13-18 - AN OPEN MACRO WAS ISSUED FOR A PARTITIONED DATA SET THAT\n     WAS CONCATENATED WITH A DATA SET THAT DOES NOT RESIDE ON DASD.\n))SC37 - THE ERROR OCCURRED WHEN AN INPUT OPERATION WAS REQUESTED ON\n     A DIRECT ACCESS DEVICE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SC37 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SC37-RC)**\n))SC37-04 - END-OF-VOLUME OCCURRED ON INPUT BUT THE NEXT VOLUME\n     CONTAINED MORE THAN SIXTEEN (16) EXTENTS.\n))SC37-08 - END-OF-VOLUME OCCURRED ON INPUT BUT THE NEXT VOLUME\n     CONTAINED A SPLIT CYLINDER ALLOCATION NOT SUPPORTED UNDER MVS.\n))SD04-08 - (08 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH SD04)\n     ERROR DURING GETMAIN:\n          - THERE IS NO REAL STORAGE AVAILABLE FOR THE LSQA AQAT TABLE\n            OR TO BACK THE RSM CONTROL BLOCKS.\n))SD05 - ERROR DURING FREEMAIN.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SD05 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SD05-RC)**\n))SD05-04 - THE FREEMAIN FOR LSQA SPECIFIED STORAGE THAT WAS NOT\n     ASSOCIATED WITH THE TASK.\n))SD05-08 - THERE IS NO REAL STORAGE AVAILABLE FOR THE LSQA AQAT TABLE\n     OR TO BACK THE RSM CONTROL BLOCKS.\n))SD0A - ERROR DURING R-FORM GETMAIN OR FREEMAIN.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SD0A OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SD0A-RC)**\n))SD0A-04 - THE FREEMAIN FOR LSQA SPECIFIED STORAGE THAT WAS NOT\n     ASSOCIATED WITH THE TASK.\n))SD0A-08 - THERE IS NO REAL STORAGE AVAILABLE FOR THE LSQA AQAT TABLE\n     OR TO BACK THE RSM CONTROL BLOCKS.\n))SD0D - INVALID ABEND RECURSION DURING ABNORMAL TERMINATION OF SUBTASK\n         JOB STEP TASK TERMINATED\n))SD13-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH SD13)\n     OPEN FOR GRAPHICS - DCB FOR OTHER THAN GRAPHICS DEVICE.\n))SD14 - THE TASK WHICH ISSUED A CLOSE FOR A GRAPHIC DEVICE WAS NOT\n     THE SAME TASK WHICH PERFORMED THE OPEN.\n))SD23 - THE ERROR OCCURRED DURING THE EXECUTION OF A WTO OR WTOR MACRO\n     FOR ONE OF THE FOLLOWING REASONS:\n     - THE PARAMETER LIST SUPPLIED TO THE WTOR MACRO DOES NOT BEGIN ON\n       A FULLWORD BOUNDARY.\n     - A WTOR/MLWTO PARAMATER LIST WAS SPECIFIED.\n     - A MULTILINE WTO WAS SPECIFIED AND SPACE WAS NOT AVAILABLE IN\n       SUBPOOL 229 FOR A WORKAREA FOR SVC 35.\n     - THE PARAMETER LIST PASSED BY THE USER DOES NOT RESIDE IN STORAGE\n       THAT IS ACCESSIBLE BY THE USER.\n     - SPACE WAS NOT AVAILABLE IN SUBPOOL 231 FOR AN ORE OR WQE BUFFER.\n))SD2D - OVERLAY SUPERVISOR FOUND INVALID RECORD TYPE\n     BAD LOAD MODULE RE-LINKEDIT\n))SD37-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH SD37)\n     A DATASET OPENED FOR OUTPUT USED ALL THE PRIMARY SPACE, AND NO\n     SECONDARY SPACE WAS REQUESTED.  EITHER SPECIFY A LARGER PRIMARY\n     QUANTITY OR ADD A SECONDARY QUANTITY TO THE REQUEST.\n))SD78 - ERROR DURING RU- OR VRU-FORM GETMAIN OR RU-FORM FREEMAIN.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SD78 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SD78-RC)**\n))SD78-04 - THE FREEMAIN FOR LSQA SPECIFIED STORAGE THAT WAS NOT\n     ASSOCIATED WITH THE TASK.\n))SD78-08 - THERE IS NO REAL STORAGE AVAILABLE FOR THE LSQA AQAT TABLE\n     OR TO BACK THE RSM CONTROL BLOCKS.\n))SE00 - AN ERROR OCCURRED DURING EXCP PROCESSING OF AN I/O REQUEST.\n     THE IOSB RETURNED TO EXCP TERMINATION HAD A RETURN CODE OF X'45'.\n     THE I/O REQUEST WAS TERMINATED.  NO EXCP DEBUGGING ERROR IS\n     SUPPLIED.  A RECORD IS WRITTEN TO SYS1.LOGREC.  THE PREVIOUS\n     LOGREC ERROR RECORD SHOULD INDICATE THE CAUSE OF THE ABEND.\n   --POSSIBLE CAUSE--\n     A PROGRAM CHECK OR MACHINE CHECK OCCURRED WHILE THE IOS IRB\n     ANALYSIS MODULES OR MODULE IECVPST WAS EXECUTING.\n     A PROGRAM CHECK OR MACHINE CHECK OCCURRED WHILE A NONRESIDENT\n     ERP OR ERP LOADER MODULE WAS EXECUTING.\n     THE OPERATOR CAUSED A SYSTEM RESTART DURING I/O REQUEST PROCESSING\n))SE03 - A TASK ATTEMPTED TO TERMINATE NORMALLY BUT WAS OPERATING IN\n     MUST-COMPLETE STATUS AND DID NOT RESET MUST-COMPLETE.  ENSURE THAT\n     EACH ISSUANCE OF AN ENQ, RESERVE AND STATUS MACRO IS PAIRED WITH\n     A DEQ OR STATUS MACRO REQUESTING 'RESET MUST-COMPLETE'.\n))SE13-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH SE13)\n     WHEN OPENING A GRAPHIC DATA CONTROL BLOCK THE GNCP (MAXIMUM NUMBER\n     OF CONCURRENT CHANNEL PROGRAMS) BYTE CONTAINED A VALUE OUTSIDE\n     THE ACCEPTABLE RANGE OF 1 TO 99.\n))SE1A - CAS (THE CATALOG ADDRESS SPACE) ALLOCATE TASK ABENDED BECAUSE\n     IT EXCEEDED THE ALLOTTED TIME FOR PROCESSING.  IT MAY HAVE BEEN\n     WAITING FOR SOME PERMANENTLY UNAVAILABLE SYSTEM RESOURCE.\n     THE SYSTEM ATTACHES A NEW TASK TO RESTORE THE ALLOCATE FUNCTION.\n))SE37 - THE ERROR OCCURRED DURING END OF VOLUME PROCESSING WHEN AN\n     OUTPUT OPERATION WAS REQUESTED FOR A DATASET.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SE37 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SE37-RC)**\n   --POSSIBLE CAUSE--\n     RAN OUT OF DIRECTORY SPACE IN A PDS\n     OUTPUT EXCEEDED VOLUME COUNT\n))SE37-04 - A DATASET OPENED FOR OUTPUT USED ALL SPACE AVAILABLE ON\n     THE CURRENT VOLUME, AND NO MORE VOLUMES WERE AVAILABLE:\n     - NOT ENOUGH VOLUMES WERE SPECIFIED FOR THE DATASET THROUGH THE\n       'SER', VOLUME COUNT, OR 'REF' SUBPARAMETER OF THE VOLUME\n       PARAMETER.  WHEN ALL THE VOLUMES WERE FILLED, THE PROGRAM\n       ATTEMPTED TO WRITE ANOTHER RECORD.\n     - FOR A PARTITIONED DATASET ON A DIRECT ACCESS VOLUME, ALL SPACE\n       WAS FILLED WHEN THE PROGRAM ATTEMPTED TO WRITE ANOTHER RECORD.\n       (A PARTITIONED DATASET CAN RESIDE ON ONLY ONE VOLUME.)\n     - FOR A PARTITIONED DATASET ON A DIRECT ACCESS VOLUME, 16 EXTENTS\n       HAD BEEN USED WHEN THE PROGRAM ATTEMPTED TO WRITE ANOTHER\n       RECORD; HOWEVER, NO VOLUME WAS AVAILABLE FOR DEMOUNTING.\n))SE37-08 - ON A DATASET OPENED FOR OUTPUT, END-OF-VOLUME HAD FOUND\n     A DSCB WITH A DUPLICATE DATASET NAME ON THE NEXT VOLUME, WITH A\n     VOLUME SEQUENCE NUMBER LESS THAN THAT IN THE DEB.\n     - A MULTI-VOLUME PHYSICAL SEQUENTIAL DATASET WAS BEING WRITTEN\n       ON A DIRECT ACCESS DEVICE.  ALL SPACE WAS FILLED ON A VOLUME,\n       AND AN ATTEMPT WAS MADE TO OBTAIN SPACE ON THE NEXT SPECIFIED\n       VOLUME.  EITHER THE SPACE WAS NOT AVAILABLE ON THAT VOLUME OR\n       THE DATASET ALREADY EXISTED ON THAT VOLUME.\n))SE37-0C - AN INSTALLATION DADSM EXIT, IGGPRE00, REJECTED THE EXTEND\n     REQUEST.\n))SE82 - DISABLED CODE WAS EXECUTING AND ISSUED RACHECK (SVC 130) WHICH\n     IS INACTIVE BECAUSE RACF IS NOT INSTALLED ON THE SYSTEM.\n))SE83 - DISABLED CODE WAS EXECUTING AND ISSUED RACINIT (SVC 131) WHICH\n     IS INACTIVE BECAUSE RACF IS NOT INSTALLED ON THE SYSTEM.\n))SE84 - DISABLED CODE WAS EXECUTING AND ISSUED RACLIST (SVC 132) WHICH\n     IS INACTIVE BECAUSE RACF IS NOT INSTALLED ON THE SYSTEM.\n))SE85 - DISABLED CODE WAS EXECUTING AND ISSUED RACDEF (SVC 133) WHICH\n     IS INACTIVE BECAUSE RACF IS NOT INSTALLED ON THE SYSTEM.\n))SF2D - OVERLAY SUPERVISOR - INVALID SUPERVISOR CALL\n     BAD LOAD MODULE. RE-LINKEDIT ENTIRE MODULE.\n))SF37 - HARDWARE ERROR\n))U4 -\n  GO STEP OF FORTRAN - SUBROUTINE FILENO - NON SEQUENTIAL DATA SET.\n))U8 -\n  GO STEP OF FORTRAN - SUBROUTINE FILENO - IDSRN OUT OF RANGE.\n))U12 -\n  GO STEP OF FORTRAN - SUBROUTINE FILENO - DATA SET REFERENCE NUMBER\n    HAS NOT BEEN USED.\n))U16 -\n  SYNCSORT - UNSUCCESSFUL SORT, SEE DIAGNOSTIC MESSAGES\n  GO STEP OF FORTRAN - MISSING SD4060 DD CARD FOR SD4060 OUTPUT\n  GO STEP OF FORTRAN - SUBROUTINE FILENO - SECOND ARGUMENT NOT 'IN' OR\n    'OUT' .\n))U20 -\n  GO STEP OF FORTRAN - SUBROUTINE FILENO - PREVIOUS FILE NOT CLOSED.\n  ASMF COULD NOT OPEN SYSIN - CHECK YOUR SYSIN DD CARD\n  I/O FAILURE WHEN READING A BAD TRACK\n))U24 -\n  GO STEP OF FORTRAN - SUBROUTINE FILENO - DEVICE IS NOT A TAPE\n  RPG - ALPHAMERIC DATA IN NUMERIC SPECIFIED FIELD\n  RPG - MISSING DD CARD\n))U30 -\n  GO STEP OF FORTRAN - MISSING FT06F001 DD CARD.\n))U40 -\n  RPG - INPUT FILE OUT OF SEQUENCE\n))U44 -\n  RPG - UNDEFINED RECORD TYPE\n))U64 -\n  RPG - I/O ERROR QSAM\n))U100 -\n  FDR - OPEN ERROR - UNABLE TO OPEN DISK OR TAPE FILE\n))U101 -\n  FDR - DISK I/O ERROR\n))U200 -\n  FDR - TAPE I/O ERROR\n))U201 -\n  FDR - TAPE END OF FILE BEFORE DATASET OR TRAILER RECORD FOUND\n))U204 -\n  PAN#8 - SYSPRINT DD STATEMENT MISSING\n))U240 -\n  FORTRAN - SPIE\n))U402 -\n  FDR - SYSPRINT OR SYSPRIN-N ERROR\n))U502 -\n  FDRDSF - INPUT CONTROL STATEMENT ERROR\n))U888 -\n  FDR - DIAGNOSTIC WARNING ASSOCIATED WITH TEXT ON SYSPRINT\n))U999 -\n  SYNCSORT - I/O ERROR OCCURRED, SEE DIAGNOSTIC MESSAGES\n))U2000 -\n  PL1\n))U4000 -\n  PL1\n./ ADD NAME=REVIEW   3605-84237-02208-2330-01871-00076-00000-UBQ001\n*                    TSO HELP FOR 'REVIEW' RELEASE 36.5     JULY 2002\n)F Function -\n  The REVIEW command allows a data set or UNIX entity to be examined at\n  a 3270 TSO terminal in full screen mode.  Both disk and tape files\n  may be REVIEWed.  If a PDS without a member is specified then a\n  member selection list is displayed.  Load module members with a\n  residence mode of ANY are shown in high intensity or red in the\n  member list.  SCLM-managed members are flagged with an equals ('=')\n  sign in the member list.  When looking at file data, a 'K' may be\n  shown in the \"ruler\" heading line to denote the first and last, or\n  only, column(s) of record keys.  On color terminals the portion of\n  the \"ruler\" line corrsponding to record keys is shown in red.  If\n  the record format indicates printer carriage control characters then\n  an 'A' or an 'M' as appropriate may be shown in column 1 of the\n  \"ruler\" heading line.\n\n  REVIEW can format records according to Assembler data structure\n  source code supplied by the user.  REVIEW can also format system\n  related data such as SMF records, EREP data, VTOC entries, tape\n  labels and load module structure and identification data.  REVIEW\n  can format the directories of ZIP files created by PKZIP, Info-ZIP,\n  WinZIP, etc.\n\n  REVIEW can display the history of program objects residing in PDSE\n  data sets or UNIX files, including compilation and program bind\n  timestamps.\n\n  REVIEW can display pictures in 1-bit (black-and-white), 4-bit\n  (16 colors) and 8-bit (256 colors) single-plane \".PCX\" (ZSoft\n  Paintbrush) files on a terminal with 3270 graphics capabilities.\n\n  REVIEW can process a single data set or a pre-allocated file\n  concatenation.  Partitioned files can be sequentialized,\n  offloaded in PDSLOAD (IEBUPDTE-like) format, or searched for\n  specific or picture-masked data.  Load modules can be offloaded\n  into a sequential format, and can be delinked into object decks.\n  Sequential offload files can be processed to restore members\n  into partitioned data sets.\n\n  REVIEW can process the system PARMLIB concatenation.\n\n  REVIEW can process UNIX files such as HFS (Hierarchical File System)\n  files.\n\n  REVIEW can operate as an ISPF dialog while processing OS data sets\n  which are not partitioned.\n\n  REVIEW allows access to, and the saving of, data by data content,\n  data beyond I/O errors and end-of-file markers, and data from\n  deleted members of a PDS.\n\n  REVIEW can convert ASCII data to EBCDIC.\n\n  REVIEW can be invoked recursively by using the TSO subcommand.\n  Swapping between parallel sessions allows access to any nested\n  REVIEW session without requiring the termination of any other\n  REVIEW session.\n\n  It is intended that the installation authorize 'REVVSAM' to allow the\n  REVIEWing of VSAM components for problem diagnosis by programming\n  support staff.  Normally, VSAM KSDS, ESDS, RRDS, VRRDS and LINEAR\n  clusters, paths, alternate indices and their components can be\n  REVIEWed without this authorization, with logical records being\n  extracted from controlintervals for non-LINEAR organizations.  If a\n  DB2 tablespace is REVIEWed, each row from a table in the tablespace\n  will be presented as a logical record, independently from any DB2\n  activity.\n\n  The 'REVVSAM' command is intended to allow the browsing of physical\n  VSAM components (ie. VSAM objects with VTOC entries) even with\n  corrupt or missing data in a CATALOG, VVDS or CI control flags.\n  APF authority is also required to REVIEW subsystem data sets.\n)X Syntax -\n         REVIEW  'dsname'  UNIT('unit')  VOLUME('volume')  QUICK  DATA\n                        TOP('rel-addr')  SUBSYS('subsys')  XISPMODE\n     or\n         REVIEW  'filename'  FILE  DATA  TOP('rel-addr')  XISPMODE\n     or\n         REVIEW  'pathname'  XISPMODE\n\n  Required - 'dsname'\n     or      'filename'  FILE\n     or      'pathname'  which must begin with a slash\n     or      no operands for \"point and shoot\".\n\n  Defaults - TOP(0)\n             UNIT(SYSALLDA) when VOLUME is specified.\n\n  Aliases  - REV, REVVSAM\n)O Operands -\n)P 'dsname' or 'dsname(member)' - The data set to be examined.\n   'filename' - The DDNAME allocated to the data set to be examined.\n   'pathname' - The path name of an UNIX directory.\n\n   If the first operand begins with a slash ('/') then it is deemed to\n   specify an UNIX directory path, and no other operands are allowed.\n   A specific UNIX file cannot be specified, but can be selected from\n   a directory entry list display.\n\n   If the first operand does not begin with a slash then it is assumed\n   to be a DSNAME unless it is followed by the keyword 'FILE'.\n\n   Specifying the quoted dsname of 'FORMAT4.DSCB' and a VOLUME\n   requests that the VTOC of that volume be REVIEWed.\n\n   Specifying the file name of PARMLIB when there is no PARMLIB\n   allocated on a OS/390 1.2 or later system requests that the\n   logical PARMLIB service be used to REVIEW the system PARMLIB\n   concatenation.\n\n   If no operands are supplied then REVIEW reads the screen image\n   and extracts the data set name from the part of the screen\n   containing the cursor.  This works in both fullscreen and line\n   modes, but not under Session Manager which updates the screen\n   before REVIEW receives control.  If a data set name is not found\n   then normal TSO prompting is commenced except for a recursive\n   REVIEW session where a message is displayed.\n\n   ISPF users may like to load\n       TSO REV) MODE(FSCR\n   into a PF key for easy access to \"point and shoot\".  Similarly,\n       TSO REV\n   can be loaded into a REVIEW Program Function key.\n\n   A member name is NOT considered part of the data set name for\n   \"point and shoot\" purposes.\n\n))FILE     - This keyword indicates that the first operand is\n             a FILENAME, not a DSNAME.  This is useful for looking\n             at a temporary data set or at concatenated libraries.\n             A member name may be specified in the first operand\n             after the DDNAME if the DDNAME is allocated to a\n             PDS.  This allows you to enter 'REVIEW SYSPROC(X) F'\n             to look at member 'X' in whatever PDS is allocated to\n             DDNAME 'SYSPROC'.\n\n             Note that REVIEWing a concatenated sequential file may\n             cause unexpected behaviour.\n\n             The 'FILE' operand may be abbreviated to 'F'.\n\n))VOLUME('volume') - For uncataloged data sets, the volume serial.\n\n             'VOLUME' may be abbreviated to 'V'.\n\n))UNIT('unit') - For uncataloged data sets, the unit type.\n             This operand is ignored if 'VOLUME' is not specified.\n             If 'VOLUME' is specified the default unit is 'SYSALLDA'.\n             For data sets accessed via the catalog, the unit is\n             determined from the catalog entry.\n\n             'UNIT' may be abbreviated to 'U'.\n\n))TOP('rel-addr') - This specifies a relative address within the\n             data set to be considered as the logical top-of-data.\n             'TOP' performs the same function as the 'NEWTOP'\n             subcommand before the initial display of data.  As with\n             'NEWTOP', 'rel-addr' is a 1 to 6 hexadecimal digit\n             number interpreted as a TTR for disk data sets, or as\n             a BLOCK IDENTIFIER for tape data sets.  When 0 is\n             specified or defaulted to, no special action is taken.\n             This operand is ignored for VSAM and subsystem data sets.\n\n             'TOP' may be abbreviated to 'T'.\n\n))TTR('rel-addr') - Same as TOP('rel-addr').\n\n))SUBSYS('subsys') - For subsystem data sets, this specifies the 1-4\n             character subsystem name.  The subsystem must be active\n             and allow data set allocation for this to be successful.\n             The subsystem data set name specified may include a\n             member name in parentheses if appropriate.\n             This operand is ignored if 'VOLUME' is specified.\n\n             'SUBSYS' may be abbreviated to 'S'.\n\n))QUICK    - This indicates that if an unquoted data set name was\n             specified then the name was fully qualified apart from\n             the prefix (ie. no trailing qualifier has to be added).\n             This saves a search of the catalog to look for trailing\n             qualifiers which is otherwise performed unconditionally\n             unless the 'VOLUME' operand was specified.  This operand\n             is ignored if 'VOLUME' is specified.\n\n             The 'QUICK' operand may be abbreviated to 'Q'.\n\n))DATA     - This operand has several uses which, in general, mean\n             that control data is displayed rather than interpreted.\n             Specifically, this operand has seven (7) different\n             functions depending upon the type of data set being\n             REVIEWed.\n\n             1) For a VSAM component -\n                'DATA' indicates that control interval information\n                and DB2 tablespace structure is not to be interpreted\n                and that physical blocks are to be shown as-is without\n                extracting logical records or rows.\n\n             2) For a VSAM KSDS (Key-Sequenced Data Set) cluster -\n                'DATA' indicates that records are to be presented in\n                RBA (Relative Byte Address) or physical order rather\n                than in key-sequence order.\n\n             3) For a partitioned data set -\n                'DATA' indicates that the PDS directory is to be\n                REVIEWed as a sequential file, thereby precluding\n                access to the contents of members.\n\n             4) For other disk files with fixed length records -\n                'DATA' indicates that direct access logic which can\n                speed up access to different parts of the file will\n                not be used.  This logic is employed by default when\n                RECFM=F, RECFM=FS, or RECFM=FBS unless 'DATA' is\n                specified.  It is also used when RECFM=FB and the\n                VTOC indicates more than 256 tracks of data unless\n                'DATA' is specified.\n                (If this direct access logic is used and the file\n                does not use standard blocking, incorrect line\n                numbers and/or I/O errors could possibly occur.\n                The 'NEWTOP' subcommand (without any operand)\n                can be used from within REVIEW to make REVIEW\n                start behaving as if 'DATA' had been specified.)\n\n             5) For a SUBSYSTEM data set with a member included -\n                'DATA' indicates that a sequential file will be\n                allocated to the specified member only and data from\n                other members will not be accessible.  Use the 'DATA'\n                operand if the subsystem data set has members but the\n                subsystem does not support partitioned access.\n                (Normally, if 'DATA' was not specified then data from\n                 the nominated member would initially be displayed,\n                 but data from other members could subsequently\n                 be displayed by using the 'MEMBER' subcommand.)\n\n             6) For a ZIP file 'DATA' indicates that the ZIP directory\n                will not be formatted, but that normal sequential read\n                and display processing will take place.  Only DASD\n                sequential files and UNIX files are checked for ZIP\n                format by REVIEW.\n\n             7) For a PCX (Paintbrush) file 'DATA' indicates that\n                picture data is not to be interpreted, but that normal\n                data display processing will take place.  Without the\n                'DATA' operand REVIEW would attempt to display the\n                picture image contained in 1-bit, 4-bit or 8-bit color\n                single-plane PCX file.  (The 'FORMAT OFF' subcommand\n                can be used from within REVIEW to instruct REVIEW to\n                discard the picture data and therefore no longer show\n                the picture image.  A subsequent 'NEWTOP' subcommand\n                could be used to reactivate the image display.)  PCX\n                files are recognised by data content when the first\n                record is at least 80 bytes long.\n\n             The 'DATA' operand may be abbreviated to 'D'.\n\n))XISPMODE - This specifies that REVIEW\n             1) is not to act as an ISPF application and is therefore\n                to perform terminal I/O and subcommand processing\n                natively; and\n             2) is not to determine terminal capabilities from ISPF\n                variables but is to issue a Read Partition (Query)\n                itself if appropriate.\n\n             This operand will only affect processing in an ISPF\n             environment.  The first function listed above is only\n             relevant to non-partitioned OS data sets (that is, it\n             is not relevant to PDSs, PDSEs, and UNIX files because\n             directory list processing in an ISPF application is\n             not currently supported by REVIEW).\n\n             The second function listed above relates to detecting\n             the graphics capabilities of the TSO terminal.  If you\n             want REVIEW to render graphic images (pictures) in an\n             ISPF environment then the XISPMODE operand is required\n             so that REVIEW will detect that the terminal can handle\n             graphics.  Without this operand, REVIEW determines\n             color, highlighting and graphics escape support from\n             ISPF, does not perform terminal I/O for a Query, and\n             can therefore present non-graphic file data more rapidly.\n\n             The 'XISPMODE' operand may be abbreviated to 'X'.\n\n))PFK      - This is not an operand, but a description of\n             the Program Function Keys used by this command.\n             PFK1  - HEL     PFK2  - SWAP LIST  PFK3  - END\n             PFK4  - TSO     PFK5  - RFIND      PFK6  - FULL\n             PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP\n             PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n             PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n             PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n             PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n             PFK22 - ASCII   PFK23 - TSO REV    PFK24 - RECALL\n             These can be changed using the PFK# subcommand, but the\n             changes are in effect only until the command ends unless\n             a profile data set is allocated to DDNAME 'ISPPROF'.\n             Example: 'PFK6 RIGHT 1' would make PFK6 'RIGHT 1'.\n)S Subcommands -\n ----------- DIRECTORY ENTRY LIST MODE SUBCOMMANDS --------------------\n\n   The following is a list of subcommands which can be entered in\n   the directory entry list display primary input field marked by\n   'LOCATE ==>'.  These subcommands will cause the action described,\n   and will not be interpreted as an entry locate string.\n\n  =CANCEL  - This subcommand instructs REVIEW to terminate.\n             Any changes to your profile will be discarded.\n\n  =DELINK  - (For PDS data sets only.  Not for UNIX files.)\n             This subcommand instructs REVIEW to delink load modules\n             and write object \"decks\" to the sequential file defined\n             by the pre-allocated \"SETFILE\" value.  (See =SETFILE.)\n\n             The subject PDS must have RECFM=U and must not be a PDSE.\n\n             Only tagged members are delinked, unless there are no\n             tagged members in which case ALL MEMBERS are delinked.\n\n             REVIEW will attach the DELINKI program from CBT file 90\n             to perform the delink function.  Fixed-length 80-byte\n             records are written.  Note that SCATTER and OVERLAY\n             programs will NOT be handled correctly.\n\n             If the resultant object data is relinked, the new load\n             modules may not be bit-for-bit copies of the original\n             load modules, even though they should be functionally\n             equivalent.  That is, reconstructed load modules may be\n             reblocked and/or reordered.\n\n  =EDITMEM - (For PDS and PDSE data sets only.  Not for UNIX files.)\n             This subcommand instructs REVIEW to request a member\n             name from the user which is to be edited using ISPF.\n             This facility allows users to edit new members,\n             although it can also be used to edit existing members.\n             Once REVIEW receives this subcommand, it will request\n             that the actual member name is typed in by the user in\n             the primary input area.  Only the first PDS in a\n             concatenation can be edited by this method.\n\n  =HELP    - This subcommand instructs REVIEW to display help pages\n             detailing subcommands and selection codes, with their\n             abbreviations, available in the directory entry list\n             display screen.\n\n  =OFFLOAD - (For PDS and PDSE data sets only.  Not for UNIX files.)\n             This subcommand instructs REVIEW to offload PDS members\n             to the sequential file defined by the pre-allocated\n             \"SETFILE\" value.  (See =SETFILE.)  Offloading can be\n             performed for a partitioned data set or concatenation\n             with ANY record format.\n\n             The output RECFM will be overridden to FB or VB as\n             appropriate.  The output LRECL will be overridden to\n             the PDS LRECL or 80, whichever is greater.  If the PDS\n             has an undefined record format then fixed-length\n             80-byte records will be written.\n\n             Members will be offloaded in member selection list\n             order, and will be preceded by an IEBUPDTE-like\n             './ ADD ' control statement.  IEBUPDTE-like './ ALIAS '\n             statements are also generated only if the member list is\n             sorted into TTR-order, and only for aliases whose\n             corresponding real member is also offloaded.  Note that\n             only the first occurrence of a given member name in a\n             concatenation can be offloaded.\n\n             OVERLAY programs cannot be offloaded by =OFFLOAD.\n\n             Only tagged members are offloaded, unless there are no\n             tagged members in which case ALL MEMBERS are offloaded.\n\n             If the first two (2) data bytes of a record are './'\n             then they will be translated to '><' on output.\n\n  =PDSLOAD - (For PDS and PDSE data sets only.  Not for UNIX files.)\n             This subcommand instructs REVIEW to process sequential\n             input and load the data into members of the library\n             being REVIEWed, which must not be a concatenation.\n\n             The user is prompted with a panel to specify the data\n             set containing the sequential input, whether ISPF\n             statistics are to be generated, and an optional\n             member name selection mask.\n\n             The input is expected to be data created by =OFFLOAD\n             or a compatible offload process.\n\n             REVIEW will attach the PDSLOAD program from CBT file 93\n             (or the REVLMOD program if the PDS RECFM=U) to perform\n             the reload operation.\n\n             Load modules reconstructed by this subcommand will be\n             bit-for-bit copies of the original load modules.  No\n             reblocking is performed for load modules.\n\n             See PDSLOAD documentation for details on fixed- and\n             variable-length record format combinations, and record\n             truncation and extension actions.\n\n  =REFRESH - This subcommand instructs REVIEW to update in-storage\n             directory information with the latest data from disk.\n             It will reset the tag status of all entries.\n\n  =RESET   - This subcommand instructs REVIEW to untag all entries\n             without re-reading entry list data from disk.\n\n  =SEARCH  - This subcommand instructs REVIEW to search PDS or PDSE\n             member contents, or UNIX file contents for specified data.\n             When entered, the user will be presented with a data\n             entry screen in which to specify the search type, the\n             data to be searched for, an optional starting column\n             where the data must reside, and, for PDS and PDSE data\n             sets, a member name mask field which can be used to\n             restrict the search to members with certain name\n             patterns.\n\n  =SEQLOAD - (For PDS and PDSE data sets only.  Not for UNIX files.)\n             This subcommand instructs REVIEW to offload PDS members\n             to the sequential file defined by the pre-allocated\n             \"SETFILE\" value.  (See =SETFILE.)  Offloading can only\n             be performed for fixed-length and variable-length record\n             files.  The output RECFM will be overridden to FB or VB\n             as appropriate.  The output LRECL will be overridden to\n             the PDS LRECL.  Members will be offloaded in member\n             selection list order.  Note that only the first\n             occurrence of a given member name in a concatenation can\n             be offloaded.\n\n             If NO MEMBERS are tagged then ALL MEMBERS are offloaded.\n\n      Note:  '=SEQLOAD' performs the same processing as '=OFFLOAD'\n             except that no IEBUPDTE-like control statements are\n             generated, './' is not translated on output, and the\n             minimum output LRECL of 80 required by '=OFFLOAD' for\n             IEBUPDTE compatibility is not required by '=SEQLOAD'.\n             '=SEQLOAD' cannot process RECFM=U libraries.\n\n  =SETFILE - (For PDS and PDSE data sets only.  Not for UNIX files.)\n             This subcommand instructs REVIEW to request a file (DD)\n             name from the user which may be used for output by the\n             =DELINK, =OFFLOAD and =SEQLOAD subcommands which require\n             a pre-allocated sequential output file.\n\n             Once REVIEW receives this subcommand, it will request\n             that the actual file (DD) name is typed in by the user\n             in the primary input area.  The new value remains in\n             effect only for the current REVIEW session.\n\n             The default output DDname is SYSUT2.\n\n  =TAGFLIP - This subcommand instructs REVIEW to toggle the tag status\n             for every entry in the selection list.  Tagged entries\n             will become untagged, while entries which were untagged\n             will be tagged.\n\n  =X       - This subcommand instructs REVIEW to terminate.  Use this\n             subcommand if PFK3 on your terminal is broken, or if the\n             PFK3 key sequence required by your 3270 emulation is too\n             tedious to be bothered with.\n\n ----------- DIRECTORY ENTRY LIST MODE SELECTION CODES ----------------\n\n   S       - Selection code for selecting an entry to be REVIEWed\n             from a PDS or PDSE member list, or UNIX directory list.\n             When an UNIX directory entry is selected REVIEW treats\n             this as a navigation request, and replaces the displayed\n             entries with entries from the selected directory.\n             'S' is the default selection code, and is assumed\n             when the cursor is placed on an entry selection input\n             field but no character is typed.\n\n   E       - Selection code for selecting an entry to be edited\n             from a PDS or PDSE member list, or UNIX directory list.\n             ISPF/PDF Edit is used.  This will only work if the\n             file is acceptable to ISPF/PDF Edit and only in an\n             ISPF environment.  This will not work if the 'REVIEW'\n             command is issued from 'READY' mode.\n\n   B       - Selection code for selecting an entry to be browsed\n             from a PDS or PDSE member list, or UNIX directory list.\n             ISPF/PDF Browse is used.  This will only work if the\n             file is acceptable to ISPF/PDF Browse and only in an\n             ISPF environment.  This will not work if the 'REVIEW'\n             command is issued from 'READY' mode.\n\n   T       - Selection code for tagging an entry for later processing.\n             Tagged entries are shown in high intensity in the entry\n             list.  For PDS and PDSE data sets, If any members are\n             tagged, then only tagged members are processed during\n             offload (see =OFFLOAD and =SEQLOAD), delink (see\n             =DELINK) and search (see =SEARCH) operations.\n             For UNIX files, if any files are tagged then only tagged\n             files are processed during search operations.\n             Further, tagging an entry may be useful for display\n             control purposes when the entry list is large as\n             PFK5/17 can be used to locate the next tagged entry.\n             All tags can be cleared by =REFRESH and =RESET.\n\n   R       - Selection code for resetting the tag status of an entry.\n             All tags can be cleared by =REFRESH and =RESET.\n\n   H       - Selection code for extracting and displaying the history\n             of a program.\n\n             For a load module (in a PDS) the normal display is merely\n             scrolled right to show the first page of REVIEW's CESD\n             formatting.  The formatted display of a CESD record can\n             be up to fifteen (15) pages wide (one page width per\n             symbol).  The formatted display of CESD blocks can also\n             show data from IDR blocks.  The string '(go DOWN for\n             data)' is shown when IDR data is not available and not\n             all IDR blocks have been read.  To remedy this simply\n             scroll down so that all IDR blocks are read and cached by\n             REVIEW, then scroll up again to the desired CESD block.\n\n             For a program object (in a PDSE or UNIX file) the Binder\n             API is invoked to access IDR data which is then\n             formatted and shown with one item per line.  The last\n             display record will usually contain the program bind\n             (link edit) IDR data, including the date and time of\n             the bind.\n\n   /       - Selection code for selecting an entry to be REVIEWed\n             from a PDS or PDSE member list or UNIX directory list\n             as if the DATA operand had been specified.  Normally,\n             the DATA operand precludes access to PDS and PDSE member\n             contents, and the DATA operand cannot be specified on\n             an UNIX REVIEW request.  This selection code performs the\n             same function as the 'S' selection code except that the\n             DATA operand is deemed to have been specified.  This will\n             prevent REVIEW from attempting to interpret data content\n             such as pictures and ZIP file directories.  '/' and 'S'\n             are identical when used to navigate the UNIX directory\n             structure.\n\n   A       - Selection code for selecting a UNIX file to be REVIEWed.\n             This code instructs REVIEW to treat the file as an ASCII\n             text file.  ASCII-to-EBCDIC translation is activated,\n             and a new line is triggered by an ASCII LF character\n             (x'0A') or an ASCII CRLF string (x'0D0A').  (EBCDIC text\n             files employ the EBCDIC NL character (x'15') to trigger\n             a new line.)\n\n ----------- REVIEW-DATA MODE SUBCOMMANDS -----------------------------\n\n   HELP    - Request HELP about REVIEW and/or its subcommands.\n             The system supplied 'HELP' command will be used.\n   HEL     - Same as 'HELP' except that the fullscreen 'HEL'\n             command will be used if available.\n   FSHELP  - Same as 'HEL'.\n   FSH     - Same as 'HEL'.\n   KEYS    - Display current Program Function Key values.\n   ?       - Same as 'KEYS'.\n   UP      - Scroll backwards a specified number of records.\n             If no operand is specified, the 'scroll' value is\n             used.  This is displayed in the upper right corner.\n             Note that scrolling up to a previous volume or data\n             set cannot be performed.\n   '-'     - Same as 'UP'.\n   DOWN    - Scroll forwards a specified number of records.\n             If no operand is specified, the 'scroll' value is\n             used.  This is displayed in the upper right corner.\n   '+'     - Same as 'DOWN'.\n   LEFT    - Scroll to the left a specified number of columns.\n             If no operand is specified, the 'scroll' value is used.\n   '<'     - Same as 'LEFT'.\n   RIGHT   - Scroll to the RIGHT a specified number of columns.\n             If no operand is specified, the 'scroll' value is used.\n   '>'     - Same as 'RIGHT'.\n   TOP     - Scroll up to the first record (on this volume).\n   BOTTOM  - Scroll down to the last record.\n   BOT     - Same as 'BOTTOM'.\n   LIST    - Display the specified record number.\n             (Relative record number only, not sequence numbers.)\n   L       - Same as 'LIST'.\n   LOC     - Same as 'LIST'.\n   LOCATE  - Same as 'LIST'.\n   HEX ON  - Display the screen in hexadecimal.\n   HEX OFF - Display the screen in character mode.\n   HEX     - If HEX currently on, turn it off.  If off, turn it on.\n   FIND    - Search until the specified string is found.\n             A case insensitive search is performed.\n             String does not have to be in quotes unless it\n             contains one or more imbedded blanks.\n             String may be followed by a column number.\n             If no operand, operands from previous FIND are used.\n   F       - Same as 'FIND'.\n   FINDCHR - Search until the specified string is found.\n             Same as 'FIND' except that the search is case sensitive.\n   FC      - Same as 'FINDCHR'.\n   FINDHEX - Search until the specified string is found.\n             Same as 'FIND' except that the search string is\n             represented by an even number of hexadecimal digits.\n             Quotes are optional.\n   FH      - Same as 'FINDHEX'.\n   FX      - Same as 'FINDHEX'.\n   FINDPIC - Search until the specified string is found.\n             Same as 'FIND' except that the search argument can contain\n             picture mask characters to represent character types.\n   FP      - Same as 'FINDPIC'.\n   FINDSMF - Search for an SMF record type and optionally sub-type.\n   FS      - Same as 'FINDSMF'.\n   FINDNOT - Search until the specified string is not found.\n             A case insensitive search is performed.\n             String does not have to be in quotes unless it\n             contains one or more imbedded blanks.\n             String may be followed by a column number.\n             If no operand, operands from previous FIND are used.\n   FN      - Same as 'FINDNOT'.\n   FCN     - Search until the specified string is not found.\n             Same as 'FINDNOT' except that the search is\n             case sensitive.\n   FHN     - Search until the specified string is not found.\n             Same as 'FINDNOT' except that the search string is\n             represented by an even number of hexadecimal digits.\n             Quotes are optional.\n   FXN     - Same as 'FHN'.\n   FPN     - Search until the specified string is not found.\n             Same as 'FINDNOT' except that the search argument can\n             contain picture mask characters.\n   RFIND   - Repeat the previous FIND or FINDNOT operation.\n   IFIND   - Same as 'RFIND'.\n   RESET   - Deactivate line exclusion caused by the ALL or REST\n             operand of a FIND or FINDNOT subcommand.\n   RES     - Same as 'RESET'.\n   FULL ON - Use full EBCDIC translation for display.  This may give\n             errors on some terminals.\n   FULL OFF- Use the standard 3270 keyboard character set for display.\n   FULL    - If FULL is on, turn it off.  If off, turn it on.\n   ASCII ON- Specifies that ASCII data is being REVIEWed and that\n             characters are to be translated to EBCDIC before being\n             displayed.  Note that search arguments to the 'FIND' and\n             'FINDCHR' commands (and the 'FINDNOT' and 'FCN' commands)\n             typed in while in ASCII mode are translated to ASCII.\n   ASCII OFF- Leave the characters to be displayed in EBCDIC.\n   ASCII   - If ASCII is on, turn it off.  If off, turn it on.\n   DISP T  - Display TN/T11-like EBCDIC text characters where possible.\n             This is similar to 3278T in ISPF.\n   DISP A  - Display APL/EBCDIC characters where possible.\n             This is similar to 3278A in ISPF.\n   DISP    - Toggle between DISP T and DISP A.\n   DISPLAY - Same as 'DISP'.\n   DIR     - Display the directory of the partitioned data set or file\n             currently being REVIEWed.\n   MEMBER  - Switch to a specified member within the same\n             partitioned data set (or concatenation thereof)\n             as the current member.\n   MEM     - Same as 'MEMBER'.\n   NEWTOP  - Specify a relative physical address to be considered\n             as the top-of-data.  This is useful for looking past\n             I/O errors, end-of-file markers, and at deleted members.\n             It is also useful for directly viewing data a long way\n             from the start without reading all the preceding records.\n   TSO     - Issue a TSO command while REVIEWing a file.\n             CLISTs are not supported.\n   TSS     - Same as 'TSO'.\n   SUBMIT  - Submit the file or MEMBER being REVIEWed.\n             TSO SUBMIT is invoked.\n             The data set must be sequential or partitioned,\n             and have fixed length 80-byte records.\n   SUB     - Same as 'SUBMIT'.\n   PFK#    - Set Program Function Key '#'.\n   PFK0    - Set Program Function Keys to default values.\n   RECALL  - Recall previously typed-in commands for optional\n             editing and reissuing.\n   SMF ON  - If SMF data is being examined, convert the record\n             to eye-readable format.\n   SMF OFF - Undo 'SMF ON'.\n   SMF     - If SMF is currently on, turn it off.  If off, turn it on.\n   EREP ON - If LOGREC data is being examined, convert the record\n             to eye-readable format.\n   EREP OFF- Undo 'EREP ON'.\n   EREP    - If EREP is currently on, turn it off. If off, turn it on.\n   FORMAT  - Format file data according to Assembler data definition\n             source code in the nominated member of the REVFMTS file.\n             VTOC entries can be formatted without the REVFMTS file.\n   FMT     - Same as 'FORMAT'.\n   FMT OFF - Suspend record formatting.  Disable picture rendering.\n   FMT ON  - Resume record formatting.\n   FMTVAR  - Manually specify the data type of a data item.\n   FV      - Same as 'FMTVAR'.\n   COLOR # - Set the data display color to color number '#'.\n   COLOR ON- Turn on 7-color/extended highlighting mode.\n             This may give errors on some older model terminals.\n   COLOR OFF- Turn off 7-color/extended highlighting mode.\n   COLOR   - If COLOR is on, turn it off.  If off, turn it on.\n   COLOUR  - Same as 'COLOR'.\n   APPEND  - Copy REVIEWed data starting from the first record shown\n             on the screen to an output file.  Data is to be appended\n             to any existing data in the output file.\n   ADD     - Same as 'APPEND'.\n   TACKON  - Same as 'APPEND'.\n   COPYOUT - Copy REVIEWed data starting from the first record shown\n             on the screen to an output file.  Any data in the output\n             file will be overwritten and lost.\n   CUTOFF  - Same as 'COPYOUT'.\n   CUT     - Same as 'COPYOUT'.\n   CUTOVER - Same as 'COPYOUT'.\n   PICDATA - Cause Assembler source statements containing picture\n             image data to be written to a file.\n   EDIT    - Process the current data set with ISPF EDIT.\n   BROWSE  - Process the current data set with ISPF BROWSE.\n   SWAP    - Transfer control between parallel sessions.\n   END     - END the command.\n   CANCEL  - Same as 'END' but user profile changes are not saved.\n   CAN     - Same as 'CANCEL'.\n   EXIT    - END the command bypassing the directory member list.\n   RETURN  - Same as 'EXIT'.\n   =X      - Same as 'EXIT'.\n=HELP=HEL=FSHELP=FSH\n)F Function -\n  The HELP subcommand provides function, syntax, and operand\n  information on the 'REVIEW' command and its subcommands.\n)X Syntax -\n         HELP   'subcommand name'\n                FUNCTION  SYNTAX  OPERANDS('keyword list')  ALL\n                POSITIONAL('operand number') MSG('msgid')\n  Aliases  - HEL, FSHELP, FSH\n  Required - None.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             subcommands of the current command will be displayed.\n  Note     - 'keyword list' is optional when OPERANDS is used.\n)O Operands -\n)P 'subcommand name'\n           - Name of the subcommand of 'REVIEW' to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Format is to be displayed.\n))OPERANDS('keyword list')\n           - Operand description is to be displayed.  If\n             'keyword list' is present, only those keyword descriptions\n             are to be displayed.\n    'keyword list'\n           - Keywords separated by commas, blanks, or tabs.\n))ALL      - Function, syntax, and operand descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('msgid')\n           - A description of the message identified by msgid is to be\n             displayed.\n=MEMBER=MEM\n)F   The MEMBER subcommand switches to a different member in the same\n  PDS or concatenation thereof. It is only valid for partitioned files.\n)X Syntax -\n     MEMBER 'membername'\n\n Alias    - MEM\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'membername' - Specifies the name of a new MEMBER to be displayed.\n=DIR\n)F   The DIR subcommand causes the member list of the PDS being\n  REVIEWed to be displayed.  It is only valid for partitioned files.\n)X Syntax -\n     DIR\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=FIND=F\n)F   The FIND subcommand positions the screen to a text string.\n\n  FIND notes:\n   1.  A case insensitive search is performed.  That is, both\n       upper and lower case characters can cause a match.\n       To perform a case sensitive search use FINDCHR.\n       To search for undisplayable data use FINDHEX.\n       To search using picture mask characters use FINDPIC.\n   2.  If no operand is entered, the previously used string is used.\n   3.  Quotation marks are optional for the string unless it contains\n       blank characters.\n   4.  If any operands are specified the first must be the search\n       string.  An unquoted asterisk means use the same string as\n       previously.\n   5.  A numeric second or third operand may be entered to specify\n       a single starting column; otherwise all columns are searched.\n   6.  A non-numeric second or third operand of 'FIRST', 'NEXT',\n       'PREV', 'LAST', 'REST' or 'ALL' may be entered to indicate\n       the search direction and starting location.\n   7.  If currently in ASCII mode the string will be translated to\n       ASCII.\n   8.  The 'REST' and 'ALL' operands causes lines without the string\n       to be excluded from view.  No place marker lines for this\n       exclusion are shown.  This exclusion is cancelled by other\n       FIND/FINDNOT commands, and by 'UP' (including 'UP MAX'),\n       'LIST', 'BOTTOM' and 'RESET'.  It is NOT cancelled by 'DOWN'\n       or 'TOP', by 'LEFT' or 'RIGHT' scrolling or by formatting\n       subcommands.\n\n)X Syntax -\n     FIND 'string' 'column'   FIRST / NEXT / PREV / LAST / REST / ALL\n\n Alias    - F\n Defaults - Same string and direction <or> NEXT (if string specified)\n Required - None.\n)O Operands -\n)P 'string'  - Specifies the data to locate.  Case is ignored.\n)P 'column'  - Optional, specifies a column number to search.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))REST    - Search forward from the current location\n              for all occurrences, excluding lines without the string.\n))ALL     - Search forward from the start of the file or member\n              for all occurrences, excluding lines without the string.\n=FINDCHR=FC\n)F   The FINDCHR subcommand positions the screen to a text string.\n\n  FINDCHR notes:\n   1.  The search argument is used exactly as typed in, although\n       it will be translated to ASCII if currently in ASCII mode.\n   2.  If no operand is entered, the previously used string is used.\n   3.  Quotation marks are optional for the string unless it contains\n       blank characters.\n   4.  If any operands are specified the first must be the search\n       string.  An unquoted asterisk means use the same string as\n       previously.\n   5.  A numeric second or third operand may be entered to specify\n       a single starting column; otherwise all columns are searched.\n   6.  A non-numeric second or third operand of 'FIRST', 'NEXT',\n       'PREV', 'LAST', 'REST' or 'ALL' may be entered to indicate\n       the search direction and starting location.\n   7.  The 'REST' and 'ALL' operands cause lines without the string\n       to be excluded from view.  No place marker lines for this\n       exclusion are shown.  This exclusion is cancelled by other\n       FIND/FINDNOT commands, and by 'UP' (including 'UP MAX'),\n       'LIST', 'BOTTOM' and 'RESET'.  It is NOT cancelled by 'DOWN'\n       or 'TOP', by 'LEFT' or 'RIGHT' scrolling or by formatting\n       subcommands.\n\n)X Syntax -\n   FINDCHR 'string' 'column'   FIRST / NEXT / PREV / LAST / REST / ALL\n\n Alias    - FC\n Defaults - same string and direction <or> NEXT (if string specified)\n Required - None.\n)O Operands -\n)P 'string'  - Specifies the character data to locate.\n)P 'column'  - Optional, specifies a column number to search.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))REST    - Search forward from the current location\n              for all occurrences, excluding lines without the string.\n))ALL     - Search forward from the start of the file or member\n              for all occurrences, excluding lines without the string.\n=FINDHEX=FH=FX\n)F   The FINDHEX subcommand positions the screen to a data string.\n\n  FINDHEX notes:\n   1.  The search argument must be a even number of hexadecimal digits\n       or a single unquoted asterisk.\n   2.  If no operand is entered, the previously used string is used.\n   3.  Quotation marks are optional for the hexadecimal string.\n   4.  If any operands are specified the first must be the search\n       string.  An unquoted asterisk means use the same string as\n       previously.\n   5.  A numeric second or third operand may be entered to specify\n       a single starting column; otherwise all columns are searched.\n   6.  A non-numeric second or third operand of 'FIRST', 'NEXT',\n       'PREV', 'LAST', 'REST' or 'ALL' may be entered to indicate\n       the search direction and starting location.\n   7.  The 'ALL' operand causes lines without the string to be\n       excluded from view.  No place marker lines for this\n       exclusion are shown.  This exclusion is cancelled by other\n       FIND/FINDNOT commands, and by UP (including UP MAX), LIST,\n       BOTTOM and RESET.  It is NOT cancelled by DOWN or TOP, by LEFT\n       or RIGHT scrolling or by formatting subcommands.\n\n)X Syntax -\n   FINDHEX 'string' 'column'   FIRST / NEXT / PREV / LAST / REST / ALL\n\n Aliases  - FH, FX\n Defaults - Same string and direction <or> NEXT (if string specified)\n Required - None.\n)O Operands -\n)P 'string'  - Specifies the hexadecimal data to locate.\n)P 'column'  - Optional, specifies a column number to search.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))REST    - Search forward from the current location\n              for all occurrences, excluding lines without the string.\n))ALL     - Search forward from the start of the file or member\n              for all occurrences, excluding lines without the string.\n=FINDPIC=FP\n)F   The FINDPIC subcommand positions the screen to a data string.\n\n  FINDPIC notes:\n   1.  The search argument can contain mask characters which are\n       interpreted as representing certain types of characters.\n       Valid picture mask characters are:\n         =  any character             .  invalid characters\n         @  alphabetic characters     -  non-numeric characters\n         #  numeric characters        <  lower case alphabetics\n         $  special characters        >  upper case alphabetics\n         \u00ac  non-blank characters\n       Non-mask characters represent themselves, with matching of\n       specific alphabetics being case insensitive.\n   2.  The search argument is never translated to ASCII.\n   3.  If no operand is entered, the previously used string is used.\n   4.  Quotation marks are optional for the string unless it contains\n       blank characters.\n   5.  If any operands are specified the first must be the search\n       string.  An unquoted asterisk means use the same string as\n       previously.\n   6.  A numeric second or third operand may be entered to specify\n       a single starting column; otherwise all columns are searched.\n   7.  A non-numeric second or third operand of 'FIRST', 'NEXT',\n       'PREV', 'LAST', 'REST' or 'ALL' may be entered to indicate\n       the search direction and starting location.\n   8.  The 'REST' and 'ALL' operands cause lines without the string\n       to be excluded from view.  No place marker lines for this\n       exclusion are shown.  This exclusion is cancelled by other\n       FIND/FINDNOT commands, and by 'UP' (including 'UP MAX'),\n       'LIST', 'BOTTOM' and 'RESET'.  It is NOT cancelled by 'DOWN'\n       or 'TOP', by 'LEFT' or 'RIGHT' scrolling or by formatting\n       subcommands.\n\n)X Syntax -\n   FINDPIC 'string' 'column'   FIRST / NEXT / PREV / LAST / REST / ALL\n\n Alias    - FP\n Defaults - same string and direction <or> NEXT (if string specified)\n Required - None.\n)O Operands -\n)P 'string'  - Specifies the picture data to locate.\n)P 'column'  - Optional, specifies a column number to search.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))REST    - Search forward from the current location\n              for all occurrences, excluding lines without the string.\n))ALL     - Search forward from the start of the file or member\n              for all occurrences, excluding lines without the string.\n=FINDSMF=FS\n)F   The FINDSMF subcommand positions the screen to an SMF record\n     of the requested type and optionally also subtype.  It is only\n     of practical value when SMF data is being REVIEWed.\n\n  FINDSMF notes:\n   1.  The first or only search argument specifying the SMF record\n       type must be a single unquoted decimal number between 0\n       and 255 inclusive.\n   2.  An optional second or third numeric operand is allowed.\n       It is a second search argument specifying the SMF record\n       subtype and must be a single unquoted decimal number\n       between 0 and 255 inclusive.\n   3.  Subtype searches for system records (0 to 127) are only\n       allowed for record types known to have subtypes.  Subtype\n       searches for user records (128 to 255) are allowed without\n       validation.\n   4.  No validity checking is performed on the specified subtype.\n       Hence it is possible to search for a subtype which does not\n       exist.\n   5.  If no operand is entered, the previously used string is used.\n   6.  A search will be performed even for non-SMF data.\n   7.  Obviously a column operand is not applicable.\n   8.  A non-numeric second or third operand of 'FIRST', 'NEXT',\n       'PREV', 'LAST', 'REST' or 'ALL' may be entered to indicate\n       the search direction and starting location.\n\n)X Syntax -\n   FINDSMF 'type' 'subtype'   FIRST / NEXT / PREV / LAST / REST / ALL\n\n Alias    - FS\n Defaults - same string and direction <or> NEXT (if string specified)\n Required - None.\n)O Operands -\n)P    'type' - Specifies the decimal SMF record type.\n               Unquoted decimal integer in the 0 to 255 range.\n)P 'subtype' - Specifies the decimal SMF record subtype.  Optional.\n               Unquoted decimal integer in the 0 to 255 range.\n               eg. \"FS 30 NEXT\" or \"FS 30\"\n                    will search for any type 30 SMF record.\n               eg. \"FS 30 NEXT 5\" or \"FS 30 5 NEXT\" or \"FS 30 5\"\n                    will search for a type 30 subtype 5 SMF record.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))REST    - Search forward from the current location\n              for all occurrences, excluding other record types.\n))ALL     - Search forward from the start of the file or member\n              for all occurrences, excluding other record types.\n=FINDNOT=FN\n)F   The FINDNOT subcommand positions the screen to a text string\n  which does NOT match the search argument.\n\n  FINDNOT notes:\n   1.  The case (upper or lower) of characters in the first operand\n       is ignored.  For case sensitive searching use FCN.  To perform\n       searching for hexadecimal data use FHN or FXN.  To perform\n       searching for picture strings use FPN.\n   2.  If no operand is entered, the previously used string is used.\n   3.  Quotation marks are optional for the string unless it contains\n       blank characters.\n   4.  If any operands are specified the first must be the search\n       string.  An unquoted asterisk means use the same string as\n       previously.\n   5.  A numeric second or third operand may be entered to specify\n       a single starting column; otherwise all columns are searched.\n   6.  A non-numeric second or third operand of 'FIRST', 'NEXT',\n       'PREV', 'LAST', 'REST' or 'ALL' may be entered to indicate\n       the search direction and starting location.\n   7.  If currently in ASCII mode the string will be translated to\n       ASCII.\n\n)X Syntax -\n   FINDNOT 'string' 'column'   FIRST / NEXT / PREV / LAST / REST / ALL\n\n Alias    - FN\n Defaults - same string and direction <or> NEXT (if string specified)\n Required - None.\n)O Operands -\n)P 'string'  - Specifies the character data to mismatch.\n)P 'column'  - Optional, specifies a column number to search.\n              eg. \"FN ' ' 70\"\n                   will search for a non-blank in column 70.\n              eg. \"FN ' ' ALL\"\n                   will only show records with non-blanks.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))REST    - Search forward from the current location\n              for all occurrences, excluding other lines.\n))ALL     - Search forward from the start of the file or member\n              for all occurrences, excluding other lines.\n=FCN\n)F   The FCN subcommand positions the screen to a text string\n  which does NOT match the search argument.\n\n  FCN notes:\n   1.  The search argument is used exactly as typed in, although\n       it will be translated to ASCII if currently in ASCII mode.\n   2.  If no operand is entered, the previously used string is used.\n   3.  Quotation marks are optional for the string unless it contains\n       blank characters.\n   4.  If any operands are specified the first must be the search\n       string.  An unquoted asterisk means use the same string as\n       previously.\n   5.  A numeric second or third operand may be entered to specify\n       a single starting column; otherwise all columns are searched.\n   6.  A non-numeric second or third operand of 'FIRST', 'NEXT',\n       'PREV', 'LAST', 'REST' or 'ALL' may be entered to indicate\n       the search direction and starting location.\n\n)X Syntax -\n     FCN 'string' 'column'   FIRST / NEXT / PREV / LAST / REST / ALL\n\n Aliases  - None.\n Defaults - same string and direction <or> NEXT (if string specified)\n Required - None.\n)O Operands -\n)P 'string'  - Specifies the character data to mismatch.\n)P 'column'  - Optional, specifies a column number to search.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))REST    - Search forward from the current location\n              for all occurrences, excluding other lines.\n))ALL     - Search forward from the start of the file or member\n              for all occurrences, excluding other lines.\n=FHN=FXN\n)F   The FXN subcommand positions the screen to a data string\n  which does NOT match the search argument.\n\n  FXN notes:\n   1.  The search argument must be a even number of hexadecimal digits\n       or a single unquoted asterisk.\n   2.  If no operand is entered, the previously used string is used.\n   3.  Quotation marks are optional for the hexadecimal string.\n   4.  If any operands are specified the first must be the search\n       string.  An unquoted asterisk means use the same string as\n       previously.\n   5.  A numeric second or third operand may be entered to specify\n       a single starting column; otherwise all columns are searched.\n   6.  A non-numeric second or third operand of 'FIRST', 'NEXT',\n       'PREV', 'LAST', 'REST' or 'ALL' may be entered to indicate\n       the search direction and starting location.\n\n)X Syntax -\n     FXN 'string' 'column'   FIRST / NEXT / PREV / LAST / REST / ALL\n\n Alias    - FHN\n Defaults - Same string and direction <or> NEXT (if string specified)\n Required - None.\n)O Operands -\n)P 'string'  - Specifies the hexadecimal data to mismatch.\n)P 'column'  - Optional, specifies a column number to search.\n              eg. \"FXN 00\"\n                   will search for the next non-null.\n              eg. \"FXN 00 ALL\"\n                   will exclude all records made up of nulls only.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))REST    - Search forward from the current location\n              for all occurrences, excluding other lines.\n))ALL     - Search forward from the start of the file or member\n              for all occurrences, excluding other lines.\n=FPN\n)F   The FPN subcommand positions the screen to a picture string\n  which does NOT match the search argument.\n\n  FPN notes:\n   1.  The search argument can contain mask characters which are\n       interpreted as representing certain types of characters.\n       Valid picture mask characters are:\n         =  any character             .  invalid characters\n         @  alphabetic characters     -  non-numeric characters\n         #  numeric characters        <  lower case alphabetics\n         $  special characters        >  upper case alphabetics\n         \u00ac  non-blank characters\n       Non-mask characters represent themselves, with matching of\n       specific alphabetics being case insensitive.\n   2.  The search argument is never translated to ASCII.\n   3.  If no operand is entered, the previously used string is used.\n   4.  Quotation marks are optional for the string unless it contains\n       blank characters.\n   5.  If any operands are specified the first must be the search\n       string.  An unquoted asterisk means use the same string as\n       previously.\n   6.  A numeric second or third operand may be entered to specify\n       a single starting column; otherwise all columns are searched.\n   7.  A non-numeric second or third operand of 'FIRST', 'NEXT',\n       'PREV', 'LAST', 'REST' or 'ALL' may be entered to indicate\n       the search direction and starting location.\n\n)X Syntax -\n     FPN 'string' 'column'   FIRST / NEXT / PREV / LAST / REST / ALL\n\n Aliases  - None.\n Defaults - same string and direction <or> NEXT (if string specified)\n Required - None.\n)O Operands -\n)P 'string'  - Specifies the picture data to mismatch.\n)P 'column'  - Optional, specifies a column number to search.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))REST    - Search forward from the current location\n              for all occurrences, excluding other lines.\n))ALL     - Search forward from the start of the file or member\n              for all occurrences, excluding other lines.\n=RFIND=IFIND\n)F   The RFIND subcommand repeats the previous FIND or FINDNOT\n  operation.  No operands are allowed.  It is expected that RFIND\n  will be used as the default meaning of a PFK such as PF5 or PF17.\n\n)X Syntax -\n     RFIND\n\n Alias    - IFIND\n Defaults - Same operation, string and direction.\n Required - None.\n)O Operands - None.\n=RESET=RES\n)F   The RESET subcommand deactivates line exclusion caused by the\n  REST and ALL operands of any FIND or FINDNOT subcommand.  The\n  first file data line displayed on the screen (ie. the location\n  line number) remains unchanged.\n\n)X Syntax -\n     RESET\n\n Alias    - RES\n Defaults - None.\n Required - None.\n)O Operands - None.\n=UP=-\n)F   The UP subcommand moves the screen up the specified number of\n  lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     UP 'amount'\n\n Aliases  - UP, -\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the screen.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=DOWN=+\n)F   The DOWN subcommand moves the screen down the specified number\n  of lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     DOWN 'amount'\n\n Aliases  - DOWN, +\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the screen.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=LEFT=<\n)F   The LEFT subcommand moves the screen left the specified number of\n  columns; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     LEFT 'amount'\n\n Aliases  - LEFT, <\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the screen.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=RIGHT=>\n)F   The RIGHT subcommand moves the screen right the specified number\n  of columns; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     RIGHT 'amount'\n\n Aliases  - RIGHT, >\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the screen.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=TOP\n)F   The TOP subcommand moves the screen to the first line of the\n  data set or member.  It differs from 'UP MAX' when line exclusion\n  is active in that line exclusion is not cancelled.  In this case,\n  TOP can be used to view the results of a \"FIND ALL\" search from\n  the start without the need to reissue the \"FIND ALL\" command.\n)X Syntax -\n     TOP\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=BOTTOM=BOT\n)F   The BOTTOM subcommand moves the screen to the last line of the\n  data set or member.\n)X Syntax -\n     BOTTOM\n\n Alias    - BOT\n Defaults - None.\n Required - None.\n)O Operands - None.\n=FULL\n)F   The FULL subcommand specifies whether character data is displayed\n  using full EBCDIC translation or only standard 3270 keyboard\n  characters.  If turned on then only code-points that usually cause\n  screen errors are deemed to be undisplayable.  If turned off then\n  all characters not on a \"standard\" keyboard are deemed to be\n  undisplayable.  (In character mode, undisplayable bytes are\n  represented by a period ('.').)  Terminals with APL support may\n  have normally unprintable characters displayed from the APL\n  character set instead when in 'FULL OFF' mode, equivalent to one of\n  the 3278A or the 3278T terminal display modes of ISPF, depending\n  on the value set by the DISPLAY subcommand.\n)X Syntax -\n     FULL ON / OFF\n\n Aliases  - None.\n Defaults - opposite mode\n Required - None.\n)O Operands -\n))ON       - Specifies that all code points X'40' to X'FE' and some\n             below X'40' are displayable characters.\n))OFF      - Specifies that only keyboard and possibly APL\n             characters are displayable.\n=DISPLAY=DISP\n)F   The DISPLAY subcommand specifies whether character data shown\n  in FULL OFF mode is TEXT EBCDIC (as per TN and T11 print trains)\n  or not.  This subcommand can be used to improve the readability\n  of the data being REVIEWed.  The current setting is shown in the\n  message area of the top screen line after the KEYS subcommand is\n  issued.  The DISPLAY setting is saved in the user profile data set.\n)X Syntax -\n     DISPLAY A / T\n\n Alias    - DISP\n Defaults - opposite mode\n Required - None.\n)O Operands -\n))A        - Specifies that data code points are to be displayed\n             from the standard character set if keyboard characters,\n             or possibly from the graphic (APL) character set if not\n             keyboard characters.  The graphic character set is not\n             available on some terminals.  This mode is similar to\n             the ISPF 3278A display mode.\n))T        - Specifies that the \"text\" character set (similar to the\n             TN and T11 print trains) is to be used for character\n             code point interpretation.  Characters from the primary\n             (standard) and alternate (graphic/APL) character sets\n             may be used as appropriate in order to assist in data\n             representation.  This mode is similar to the ISPF 3278T\n             display mode, and is helpful in reading syntax diagrams.\n=KEYS=?\n)F   The KEYS subcommand displays the current Program Function Key\n  values.  Each PF Key (1 to 24) has a default value which may\n  be changed with the PFK command.\n)X Syntax -\n     KEYS\n\n Alias    - ?\n Defaults - None.\n Required - None.\n)O Operands - None.\n=ASCII\n)F   The ASCII subcommand specifies whether character data is displayed\n  using ASCII-to-EBCDIC translation or is to be treated as EBCDIC\n  characters.  Only HEX-OFF displays are affected.  If turned on then\n  system-supplied translation is carried out.  The internal bit\n  patterns of previously entered FIND command strings are not altered,\n  but FIND text strings entered while ASCII is turned on are translated\n  to ASCII before search processing.  If turned on during CUTOFF or\n  APPEND processing then output data will be translated from ASCII to\n  EBCDIC before being written to the output file.\n)X Syntax -\n     ASCII ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Specifies that ASCII data is being REVIEWed and should\n             be translated to EBCDIC before being displayed.\n))OFF      - Specifies that the data is to be shown as-is in EBCDIC.\n=RECALL\n)F   The RECALL subcommand causes previously typed-in commands to be\n  displayed in the primary input area where they may be changed if\n  required and then reissued.  Note that single character input strings\n  and text implied by PFK usage are not recallable.  The first command\n  recalled is the most recently typed in command.  Consecutive RECALL\n  commands cause increasingly older commands to be recalled.\n)X Syntax -\n     RECALL\n\n Alias    - The DUP character (X'1C').\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PFK\n)F   The PFK subcommand changes PFK definitions for the duration of\n  the REVIEW session; to change a PFK, a subcommand such as\n  'PFK6 RIGHT 1'  is entered to change PFK6 to 'RIGHT 1'.\n\n  By default, the PF KEYS are defined as the following:\n              PFK1  - HEL     PFK2  - SWAP LIST  PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - FULL\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - RECALL\n\n  Changes to the PFK assignments may be saved in the profile data set.\n)X Syntax -\n     PFK## 'newpfdata'\n\n Aliases  - None.\n Defaults - None.\n Required - nn and 'newpfdata'\n)O Operands -\n)P  ##      - Specifies the PF Key to be modified.\n              ## is a 1 or 2 decimal digit number in the range of\n              0 to 24 inclusive.  Numbers from 1 to 24 specify a\n              particular Program Function Key.  If ## is 0 then\n              all 24 PF Keys will be assigned their default values.\n\n 'newpfdata'- Specifies the new subcommand for this PF Key.\n=HEX\n)F   The HEX subcommand specifies the display mode (character or\n  hexadecimal) for data.  If HEX is entered without operands, the\n  current HEX mode is switched to the opposite HEX mode.\n)X Syntax -\n     HEX  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Specifies that data should be displayed in HEX mode.\n))OFF      - Specifies that data should be displayed in character mode.\n=SMF\n)F   The SMF subcommand specifies whether or not SMF records are\n  to be converted to eye-readable summary format or not.  It is\n  only of practical use if SMF records are being REVIEWed.  If SMF\n  is entered without operands the current SMF mode is switched to\n  the opposite SMF mode.  Note that activating SMF formatting\n  deactivates EREP formatting.\n)X Syntax -\n     SMF  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Specifies that SMF data should be interpreted.\n))OFF      - Specifies that SMF data should not be interpreted.\n=EREP\n)F   The EREP subcommand specifies whether or not environmental\n  records (originally from SYS1.LOGREC) are to be converted to\n  eye-readable summary format or not.  It is only of practical\n  use if LOGREC records are being REVIEWed.  If EREP is entered\n  without operands the current EREP mode is switched to the\n  opposite EREP mode.  Note that activating EREP formatting\n  deactivates SMF formatting.\n)X Syntax -\n     EREP  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Specifies that EREP data should be interpreted.\n))OFF      - Specifies that EREP data should not be interpreted.\n=FORMAT=FMT\n)F   The FORMAT subcommand causes REVIEW to format file data on the\n  screen according to the data structure and types specified in\n  Assembler DS and/or DC statements.  The \"ruler\" heading line above\n  the data is used to show the names of the visible data items, and\n  where room permits the starting column number of the item is shown\n  directly above the data item name.\n     The format of the actual file data remains unchanged when HEX ON\n  is active.  When HEX OFF is current, each data item is formatted\n  according to the data type in the DS or DC statement.  The main data\n  types are character, hexadecimal, decimal, and binary integer.\n     The Assembler statements are read from the partitioned data set(s)\n  allocated to the REVFMTS file.  REVFMTS must be allocated before it\n  can be used by this subcommand.  The TSO subcommand may be useful in\n  helping to perform this allocation from within REVIEW.  The FMTVAR\n  subcommand can be used to override the data type of a specific data\n  item or variable in a dynamic fashion.\n     Note that for variable-length records, the record descriptor word\n  (RDW) is assumed to be present in the data structure source, even\n  though the contents of the RDW are not shown by REVIEW.\n     When using this subcommand (as opposed to the SMF subcommand) to\n  format SMF records, the following members of SYS1.MACLIB may be\n  useful, especially after a FINDSMF ALL subcommand has been issued:\n     IFASMFR  - type 0                   IAZSMF49 - type 49\n     IFASMFR1 - type 7                   IFASMFR5 - type 50\n     IFGSMF14 - type 14 and type 15      IAZSMF45 - type 52\n     IGGSMF17 - type 17                  IAZSMF45 - type 53\n     IFASMFR2 - type 20                  IAZSMF45 - type 54\n     IGESMF21 - type 21                  IAZSMF45 - type 55\n     IOSDSMFR - type 22                  IAZSMF45 - type 56\n     IAZSMF24 - type 24                  IAZSMF45 - type 57\n     IAZSMF25 - type 25                  IAZSMF45 - type 58\n     IAZSMF26 - type 26                  IDASMF62 - type 62\n     IFASMFI6 - type 36                  IGGSMF63 - type 63\n     IFASMFR4 - type 40                  IDASMF64 - type 64\n     IAZSMF43 - type 43                  IGGSMF67 - type 67\n     IAZSMF45 - type 45                  IGGSMF68 - type 68\n     IAZSMF47 - type 47                  IGGSMF69 - type 69\n     IAZSMF48 - type 48                  IFASMFR9 - type 80\n\n     When REVIEWing a VTOC, the VTOC entries can be formatted by\n  'FORMAT ON' when even no REVFMTS file allocation is present.\n)X Syntax -\n     FORMAT  'fmtname' / ON / OFF\n\n Alias    - FMT\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n)P 'fmtname' - Specifies the member name of the REVFMTS file which\n               is to be read for data structure information in the\n               form of Assembler DS and/or DC statements.  Once read\n               the format is held in memory until overlayed by a\n               subsequent FORMAT request or REVIEW terminates.\n               Optionally, the format name may be quoted.\n))ON         - Specifies that the in-storage format that was read\n               due to a previous FORMAT request is to be used\n               again to format the data display.\n))OFF        - Specifies that special formatting of file data is\n               to be suspended.\n=FMTVAR=FV\n)F   The FMTVAR subcommand allows a user to override the data type\n  of a data item or variable in a data structure previously read\n  into memory by a FORMAT subcommand.  This is sometimes useful to\n  enhance the viewability of some items.\n)X Syntax -\n     FMTVAR  'varname'  'type'\n\n Alias    - FV\n Defaults - None.\n Required - 'varname' and 'type'\n)O Operands -\n)P 'varname' - Specifies the name of the data item or variable which\n               is to have its data type specified.  Note that data\n               items which have no name (because there was no label\n               in the defining Assembler statement) cannot have their\n               data type changed by this subcommand.\n)P 'type'    - Specifies the data type which is to now be used to\n               format the specified data item.  This operand must be\n               a single character.  Valid types are:\n\n               C - Characters.\n                   Can be translated to EBCDIC when ASCII is ON.\n                   Default for Assembler definition type C.\n\n               Z - Zoned decimal.\n                   Same as C but leading '0's are shown as blanks.\n                   Default for Assembler definition type Z.\n\n               X - Hexadecimal.\n                   Each byte is shown as two hexadecimal digits.\n                   Default for Assembler definition types\n                   A, B, D, E, L, Q, S, V, X, and Y.\n\n               P - Packed decimal.\n                   Each byte is shown as two hexadecimal digits.\n                   Leading zeros are shown as blanks.\n                   If the last four bits of the item are a valid\n                   packed decimal sign then it is shown as a\n                   blank for hex A, C, E, and F to denote positive,\n                   and as a '-' (minus sign) for hex B and D to\n                   denote negative.\n                   Default for Assembler definition type P.\n\n               I - Signed binary integer.\n                   The item is treated as a twos-complement binary\n                   integer and converted to decimal for display.\n                   A leading minus sign will be used when the first\n                   bit of the item is a '1' indicating a negative\n                   number.\n                   The maximum length supported is four (4) bytes.\n                   Default for Assembler definition types\n                   F and H when two or four bytes long.\n\n               U - Unsigned binary integer.\n                   The item is treated as a non-negative binary\n                   integer and converted to decimal for display.\n                   The maximum length supported is four (4) bytes.\n                   Default for Assembler definition types\n                   F and H when one or three bytes long.\n=COLOR=COLOUR\n)F   The COLOR subcommand specifies whether or not data is to be\n  displayed using 3270 extended highlighting and extended color,\n  and which color is to be used for actual data display.  Colors\n  for formatting mode, character mode and hexadecimal mode may be\n  independently selected.  This command may cause errors on some\n  terminals depending on terminal type and network definitions.\n  If no operands are entered then the color mode is switched to\n  the opposite mode.\n\n  The data display colors may be saved in the profile data set.\n)X Syntax -\n     COLOR  ON / OFF / #\n\n Alias    - COLOUR\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON      - Specifies that 3270 data stream extensions may be used.\n            This may be rejected if the terminal is known to not\n            support color or extended highlighting.\n))OFF     - Specifies that 3270 data stream extensions may not be used.\n))#       - Specifies the color to be used for actual data.\n\n            If specified when formatting is active then this color is\n            used when the record display is the result of formatting.\n\n            Otherwise, when record formatting is OFF:\n            If specified while in character mode then this color is\n            used in character mode.  If specified while in hexadecimal\n            mode then this color is used in hexadecimal mode.\n\n            If specified while a picture image is being displayed, then\n            a) the \"white\" pixels of a black-and-white image are shown\n               in this color, or\n            b) all non-black pixels of a color image displayed using\n               programmed symbols are shown in this color unless the\n               color number is 7 whereupon all colors are shown\n               correctly, or\n            c) the color number is used to control which color planes\n               GDDM will be requested to display.\n            The picture color is NOT saved in the profile data set,\n            and defaults to 7 (neutral).\n\n            # must be a single hexadecimal digit and may be rejected\n            if it is known that the color is not supported by the\n            terminal.  The possible colors and their codes are:\n               1 - Blue                9 - Deep blue\n               2 - Red                 A - Orange\n               3 - Pink                B - Purple\n               4 - Green               C - Pale green\n               5 - Turquoise           D - Pale turquoise\n               6 - Yellow              E - Grey\n               7 - Neutral             F - White\n                  (Codes 0 and 8 (Black) are not allowed.)\n                  (Codes 9 to F are only for 16-color terminals.)\n=SWAP\n)F   The SWAP subcommand specifies which parallel REVIEW session\n  is to become the current session.  It can also list the started\n  REVIEW sessions which are eligible to become the current session.\n  A parallel REVIEW session is created when the REVIEW TSO subcommand\n  (not the ISPF TSO subcommand) is used to create a recursive REVIEW\n  session.  The nesting order of these sessions can be changed by SWAP.\n)X Syntax -\n     SWAP   LIST / #\n\n Aliases  - None.\n Default  - 1\n Required - None.\n)O Operands -\n))LIST    - Specifies that all parallel REVIEW sessions are to be\n            listed in SWAP target session number order.\n))#       - Specifies the decimal number of the target REVIEW session\n            that is to be swapped with the current session.  The\n            current session is always session 0, so the 'SWAP 0'\n            subcommand is a no-operation.\n=SUBMIT=SUB\n)F   The SUBMIT subcommand invokes TSO SUBMIT for the file or member\n  being REVIEWed.  This subcommand is invalid unless the file is\n  sequential or partitioned, and has fixed length 80-byte records.\n)X Syntax -\n     SUBMIT\n\n Alias    - SUB\n Defaults - None.\n Required - None.\n)O Operands - None.\n=TSO=TSS\n)F   The TSO subcommand specifies a TSO command processor to be\n  invoked from the REVIEW processor.  CLISTs are not supported.\n)X Syntax -\n     TSO  'command' 'operands'\n\n Alias    - TSS\n Defaults - None.\n Required - 'command'\n)O Operands -\n)P 'command'  - Specifies a TSO command to be executed.\n\n)P 'operands' - Specifies any desired operands for this TSO command.\n=LIST=L=LOC=LOCATE\n)F   The LIST subcommand repositions the screen to the relative line\n  number entered.\n)X Syntax -\n     LIST 'lineno'\n\n Aliases  - L, LOC, LOCATE\n Defaults - None.\n Required - lineno\n)O Operands -\n)P 'lineno' -  Specifies the relative line number to which the screen\n               is to be positioned.\n=NEWTOP\n)F   The NEWTOP command allows the specification of an arbitrary\n  relative physical address to be considered as the top-of-data.\n  This is useful for viewing data beyond I/O errors and end-of-file\n  markers that would normally be encountered, for viewing the\n  contents of deleted PDS members, and for resynchronizing the\n  REVIEW session with a file that is currently being updated.\n  It is also useful for directly viewing data a long way from the\n  start of the file without reading all the preceding records.\n)X Syntax -\n     NEWTOP 'rel-addr'\n\n Aliases  - None.\n Defaults - 0\n Required - None.\n)O Operands -\n)P 'rel-addr' - a 1 to 6 hexadecimal digit number specifying a\n     relative physical address.  For disk files this specifies a\n     relative TTR.  For tape files this specifies a relative block\n     number.  A value of zero specifies that the real top-of-data\n     address is to be used and previously acquired end-of-file and\n     record location information is to be dropped.\n  ** Note that 0 is the only operand allowed when viewing VSAM\n     files, and in this case NEWTOP merely performs a CLOSE\n     followed by an OPEN to drop all pre-loaded buffers.\n  ** Also note that the subcommand sequence\n            HEX ON\n            RIGHT MAX\n            HEX OFF\n     can be used to display the relative physical address of each\n     logical record in NEWTOP operand format.  For spanned records\n     the address of the last segment is shown.\n=APPEND=ADD=TACKON\n)F   The APPEND subcommand causes REVIEW to write records from the\n  data being REVIEWed to an output file.  Records are written\n  consecutively from the first record shown on the screen until\n  the requested number of records has been copied or end-of-file is\n  reached.  When complete, the first record AFTER the copied records\n  is made the new top-of-screen record.  The APPEND subcommand\n  performs the same processing as the COPYOUT subcommand except that\n  the output file is opened for EXTEND, so that data is appended to\n  any data already residing in the output file.  Obviously, APPEND\n  and COPYOUT become identical when output is directed to SYSOUT or\n  the user's terminal.\n     A major advantage that the COPYOUT and APPEND subcommands provide\n  is the ability to copy data that has been rendered inaccessible by\n  I/O errors.  Data beyond an I/O error can be REVIEWed with the use\n  of the NEWTOP subcommand.  Any data that can be REVIEWed can be\n  copied and saved to an intermediate file for data reclamation.\n     Another feature of COPYOUT and APPEND is selectivity.  Not only\n  can records be selected by manually scrolling to a specific record\n  and cutting a specific number of records, but selectivity can be\n  automated with FIND ALL and FINDNOT ALL.  Only records eligible\n  for display can be copied, so FIND ALL and FINDNOT ALL subcommands\n  can be used to exclude records based on their data content not\n  only from display but also from offloading by COPYOUT and APPEND.\n     Further, data copied from an ASCII file can be converted to EBCDIC\n  by specifying ASCII ON before commencing the COPYOUT operation.\n)X Syntax -\n     APPEND 'filename' 'record-count'\n\n Aliases  - ADD, TACKON\n Defaults - SYSUT2, copy to end-of-file.\n Required - None.\n)O Operands -\n)P 'filename' - Specifies the DDNAME of the output file.  The output\n                file must be pre-allocated.  SYSUT2 is the default\n                DDNAME, even if overridden on a previous APPEND.\n                If the output file is not SYSUT2, then 'filename'\n                MUST be specified.\n)P 'record-count'\n              - Specifies the number of records to be copied.\n                If not specified then data is copied until end-of-file\n                is reached or forced by an I/O error.\n=COPYOUT=CUTOFF=CUT=CUTOVER\n)F   The COPYOUT subcommand causes REVIEW to write records from the\n  data being REVIEWed to an output file.  Records are written\n  consecutively from the first record shown on the screen until\n  the requested number of records has been copied or end-of-file is\n  reached.  When complete, the first record AFTER the copied records\n  is made the new top-of-screen record.  The COPYOUT subcommand\n  performs the same processing as the APPEND subcommand except that\n  the output file is opened for OUTPUT, so that data already residing\n  in the output file is overwritten and lost.  Obviously, COPYOUT\n  and APPEND become identical when output is directed to SYSOUT or\n  the user's terminal.\n     A major advantage that the COPYOUT and APPEND subcommands provide\n  is the ability to copy data that has been rendered inaccessible by\n  I/O errors.  Data beyond an I/O error can be REVIEWed with the use\n  of the NEWTOP subcommand.  Any data that can be REVIEWed can be\n  copied and saved to an intermediate file for data reclamation.\n     Another feature of COPYOUT and APPEND is selectivity. Not only\n  can records be selected by manually scrolling to a specific record\n  and cutting a specific number of records, but selectivity can be\n  automated with FIND ALL and FINDNOT ALL.  Only records eligible\n  for display can be copied, so FIND ALL and FINDNOT ALL subcommands\n  can be used to exclude records based on their data content not\n  only from display but also from offloading by COPYOUT and APPEND.\n     Further, data copied from an ASCII file can be converted to EBCDIC\n  by specifying ASCII ON before commencing the COPYOUT operation.\n)X Syntax -\n     COPYOUT 'filename' 'record-count'\n\n Aliases  - CUTOFF, CUT, CUTOVER\n Defaults - SYSUT2, copy to end-of-file.\n Required - None.\n)O Operands -\n)P 'filename' - Specifies the DDNAME of the output file.  The output\n                file must be pre-allocated.  SYSUT2 is the default\n                DDNAME, even if overridden on a previous CUTOFF.\n                If the output file is not SYSUT2, then 'filename'\n                MUST be specified.\n)P 'record-count'\n              - Specifies the number of records to be copied.\n                If not specified then data is copied until end-of-file\n                is reached or forced by an I/O error.\n=PICDATA\n)F   The PICDATA subcommand causes REVIEW to write fixed-length\n  80-byte records to the specified file.  The records are Assembler\n  source statements containing data necessary to recreate the image\n  which is currently being displayed by REVIEW.\n     This subcommand is only valid when REVIEW can display the image\n  contained in a picture file.  Its use provides a mechanism for\n  exporting an image into other application source code.\n     If REVIEW is displaying the picture with programmed symbols,\n  the file will contain the data necessary to load the symbols\n  (18 bytes per format type-1 symbol) plus data regarding symbol\n  placement in the picture.\n     If REVIEW issues calls to GDDM to display the picture, the\n  data will contain the bitmaps passed to GDDM via GSIMG calls.\n     Data for blue, red and green planes will be written for color\n  images, whereas only one plane is used for black-and-white images.\n)X Syntax -\n     PICDATA 'filename'\n\n Aliases  - None.\n Defaults - None.\n Required - 'filename'\n)O Operands -\n)P 'filename' - Specifies the DDNAME of the output file.  Fixed-length\n                80-byte records will be written to this file.  This\n                operand must be specified.\n=BROWSE\n)F   The BROWSE subcommand requests ISPF to BROWSE the data set or\n  member currently being REVIEWed.  This subcommand is only valid\n  when the current data set is an MVS DASD data set.  It is not\n  valid for an UNIX file or a data set being treated as a ZIP file.\n  The ISPF request will only succeed in an ISPF environment.\n\n)X Syntax -\n     BROWSE\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EDIT\n)F   The EDIT subcommand requests ISPF to EDIT the data set or\n  member currently being REVIEWed.  This subcommand is only valid\n  when the current data set is an MVS DASD data set.  It is not\n  valid for an UNIX file or a data set being treated as a ZIP file.\n  The ISPF request will only succeed in an ISPF environment.\n\n)X Syntax -\n     EDIT\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=CANCEL=CAN\n)F   The CANCEL subcommand performs the same processing as the END\n  subcommand without saving the REVIEW/HEL user profile to disk.  The\n  REVIEW/HEL user profile (which contains data display colors,\n  scrolling amount and 24 PF Key values) is normally only rewritten to\n  disk at the END of a REVIEW session if it has been changed during\n  that session.  If a member list has not been displayed in a session\n  then the REVIEW session is terminated without saving the user\n  profile.  If a member list has been shown it is reshown but the user\n  profile is no longer considered to have been altered, even though the\n  profile \"in-core\" still has the changes applied to it.  Changing the\n  profile at this stage and exiting will cause all accumulated profile\n  changes for the REVIEW session to be saved to disk unless another\n  CANCEL is issued.\n)X Syntax -\n     CANCEL\n\n Alias    - CAN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=END\n)F   The END subcommand terminates the REVIEW command, or, if in\n  member selection mode, returns to the member selection list.\n  The member selection list may be bypassed with the EXIT subcommand.\n)X Syntax -\n     END\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EXIT=RETURN==X\n)F   The EXIT subcommand terminates the REVIEW command, bypassing\n  the member selection list.\n)X Syntax -\n     EXIT\n\n Aliases  - RETURN, =X\n Defaults - None.\n Required - None.\n)O Operands - None.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UMSG": {"ttr": 2563, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x000\\x01\\x02!\\x8f\\x01\\x02\"O\\x08\\x03\\x00\\x9b\\x00\\x94\\x00\\x00\\xd9\\xc5\\xf0\\xf3\\xf0\\xf6\\xf3@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2002-08-06T00:00:00", "modifydate": "2002-08-12T08:03:30", "lines": 155, "newlines": 148, "modlines": 0, "user": "RE03063"}, "text": "/* Rexx UMSG\n |\n |  Data Set   : RE03063.MESAJ.PDS(UMSG)\n |  Name       : Ugur Cilesiz\n |  Date       : 06.08.2002\n |  Parameter  :\n |  Description: Display Information For DFSMS (hsm, dfp and dss)\n |               Messages\n */\n\nIf Initialise() <> 0\n   Then Exit 8\n\nArg Mesaj\n\nMesaj = Strip(Mesaj)\n\nAddress ISPEXEC \"CONTROL ERRORS RETURN\"\n\nIf Pos(\"ARC\",Mesaj) \u00ac= 0 | Pos(\"ADR\",Mesaj) \u00ac= 0 | Pos(\"IDC\",Mesaj) \u00ac= 0\n   Then Signal  FindTheMessage\n\nMain:\nMesaj = 'ARCxxxx'\nAddress ISPEXEC \"ADDPOP ROW(03) COLUMN(04)\"\nAddress ISPEXEC \"DISPLAY PANEL(\"Pan_Main\")\"\n\nIf Rc = 12 | Rc = 20\n   Then Do\n        ZEDSMSG = 'Panel error|'\n        ZEDLMSG = 'Display Panel Error Rc 'Rc\n        Address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n        Call Exitus\n        End\n\nIf ZCMD = Trace\n   Then Do\n        ZCMD = ' '\n        Trace ?r\n        End\n\nIf Rc = 8\n   Then Do\n        Address ISPEXEC \"REMPOP\"\n        Call Exitus\n        End\n\nAddress ISPEXEC \"REMPOP\"\n\nFindTheMessage:\n\nIf Pos(\"*\",Mesaj) <> 0\n   Then Do\n        MessageMember = Mesaj\n        Address ISPEXEC ,\n        \"LMINIT DATAID(LibDD) DATASET('\"Msg_DSN\"')\",\n        \"ENQ(SHRW)  ORG(LIBORG)\"\n\n        Address ISPEXEC ,\n        \"LMOPEN DATAID(\"LibDD\") OPTION(INPUT) LRECL(LIBRECL)\",\n        \"RECFM(LIBRECFM) ORG(LIBORG)\"\n\n        If Rc <> 0\n           Then Signal Exitus\n\n        Display:\n        Address ISPEXEC ,\n        \"LMMDISP DATAID(\"LibDD\")  OPTION(DISPLAY) COMMANDS(ANY)\",\n        \"MEMBER(\"MessageMember\")\"\n        If Rc > 0\n           Then If Rc = 8\n                   Then Signal Main\n                   Else Signal Exitus\n        Do While Rc = 0\n           ZLMEMBER = Strip(ZLMEMBER)\n           If Pos(ZLLCMD,\"SB\") = 0\n              Then Signal Display\n           If ZLLCMD = \"B\"\n              Then ISPF = \"BROWSE\"\n           If ZLLCMD = \"S\"\n              Then ISPF = \"BROWSE\"\n        Address ISPEXEC ,\n        \"LMINIT DATAID(EditDD) DATASET('\"Msg_DSN\"')\",\n        \"ENQ(SHRW)  ORG(LIBORG)\"\n        Address ISPEXEC ISPF\" DATAID(\"EditDD\") MEMBER(\"ZLMEMBER\")\"\n        Address ISPEXEC \"LMFREE DATAID(\"EditDD\")\"\n        Address ISPEXEC \"LMMDISP DATAID(\"LibDD\")  OPTION(GET)\"\n        Signal Display\n        End /* Do While */\n        End /* If Pos(  */\n\n   Else Do\n        If Pos(\"ADR\",Mesaj) \u00ac= 0\n           Then MessageMember = Strip(Substr(Mesaj,1,7))\n           Else MessageMember = Strip(Substr(Mesaj,1,8))\n\n        Address ISPEXEC \"BROWSE DATASET('\"Msg_DSN\"(\"MessageMember\")')\"\n\n        If Rc > 0\n           Then Do\n                ZEDSMSG = 'No Message|'\n                ZEDLMSG = 'No Message Available with Id = ' ||Mesaj\n                Address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n                Call Main\n                End\n        End\n\nCall Main\n\nExitus:\n   Address ISPEXEC \"LMCLOSE DATAID(\"LibDD\")\"\n   Address ISPEXEC \"LMFREE DATAID(\"LibDD\")\"\n  ExitRc = LIBDEF_Libraries(AllDDNs)\nExit\n\nInitialise:\n\nPan_DSN     = 'RE03063.MESAJ.PDS'\nPan_DDn     = 'ISPPLIB'\nPan_Main    = 'MESAJP'\n\nMsg_DSN     = 'RE03063.MESAJ.PDS'\nMsg_DDn     = 'ISPMLIB'\n\nAllDDNs     = Pan_DDn  Msg_DDn\nAllDSNs     = Pan_DSN  Msg_DSN\n\nIf LIBDEF_Libraries(AllDDNs,AllDSNs) <> 0\n   Then Return 8\n\nReturn 0\n\nLIBDEF_Libraries:\nParse Arg DDNames,DSNames\n\n\nDo i = 1 To Words(DDNames)\n   If DSNames = ''\n      Then Address ISPEXEC \"LIBDEF\" Word(DDNames,i)\n      Else Do\n           Address ISPEXEC ,\n                   \"LIBDEF\" Word(DDNames,i) \"DATASET ID('\"Word(DSNames,i)\"')\",\n                   \"STACK\"\n           If Rc <> 0\n              Then Do\n                   Say 'Rc='Rc 'from LIBDEF of' Word(DSNames,i) ,\n                       'To' Word(DDNames,i)\n                   Call LIBDEF_Libraries Subword(DDNames,i)\n                   Leave Rc=8\n                   End\n           End\n\nEnd\n\nReturn Rc\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UMSGR": {"ttr": 2567, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x10\\x01\\x02!\\x8f\\x01\\x02\"\\x0f\\t@\\x00p\\x00\\x94\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2002-08-06T00:00:00", "modifydate": "2002-08-08T09:40:10", "lines": 112, "newlines": 148, "modlines": 0, "user": "SBGOLOB"}, "text": "/* Rexx UMSG\n |\n |  Data Set   : SBGOLOB.MESAJ.PDS(UMSG)\n |  Name       : Ugur Cilesiz\n |  Date       : 06.08.2002\n |  Parameter  :\n |  Description: Display Information For DFSMS (hsm, dfp and dss)\n |               Messages\n */\n\nIf Initialise() <> 0\n   Then Exit 8\n\nArg Mesaj\n\nMesaj = Strip(Mesaj)\n\nAddress ISPEXEC \"CONTROL ERRORS RETURN\"\n\nIf Pos(\"ARC\",Mesaj) \u00ac= 0 | Pos(\"ADR\",Mesaj) \u00ac= 0 | Pos(\"IDC\",Mesaj) \u00ac= 0\n   Then Signal  FindTheMessage\n\nMain:\nMesaj = 'ARCxxxx'\nAddress ISPEXEC \"ADDPOP ROW(03) COLUMN(04)\"\nAddress ISPEXEC \"DISPLAY PANEL(\"Pan_Main\")\"\n\nIf Rc = 12 | Rc = 20\n   Then Do\n        ZEDSMSG = 'Panel error|'\n        ZEDLMSG = 'Display Panel Error Rc 'Rc\n        Address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n        Call Exitus\n        End\n\nIf ZCMD = Trace\n   Then Do\n        ZCMD = ' '\n        Trace ?r\n        End\n\nIf Rc = 8\n   Then Do\n        Address ISPEXEC \"REMPOP\"\n        Call Exitus\n        End\n\nAddress ISPEXEC \"REMPOP\"\n\nFindTheMessage:\n\nIf Pos(\"ADR\",Mesaj) \u00ac= 0\n   Then MessageMember = Strip(Substr(Mesaj,1,7))\n   Else MessageMember = Strip(Substr(Mesaj,1,8))\n\nAddress TSO     \"REVIEW '\"Msg_DSN\"(\"MessageMember\")'\"\n\nIf Rc > 0\n   Then Do\n        ZEDSMSG = 'No Message|'\n        ZEDLMSG = 'No Message Available with Id = ' ||Mesaj\n        Address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n        Call Main\n        End\n\n/* Call Main  */\nCall Exitus\n\nExitus:\n  ExitRc = LIBDEF_Libraries(AllDDNs)\nExit\n\nInitialise:\n\nPan_DSN     = 'SBGOLOB.MESAJ.PDS'\nPan_DDn     = 'ISPPLIB'\nPan_Main    = 'MESAJP1'\n\nMsg_DSN     = 'SBGOLOB.MESAJ.PDS'\nMsg_DDn     = 'ISPMLIB'\n\nAllDDNs     = Pan_DDn  Msg_DDn\nAllDSNs     = Pan_DSN  Msg_DSN\n\nIf LIBDEF_Libraries(AllDDNs,AllDSNs) <> 0\n   Then Return 8\n\nReturn 0\n\nLIBDEF_Libraries:\nParse Arg DDNames,DSNames\n\n\nDo i = 1 To Words(DDNames)\n   If DSNames = ''\n      Then Address ISPEXEC \"LIBDEF\" Word(DDNames,i)\n      Else Do\n           Address ISPEXEC ,\n                   \"LIBDEF\" Word(DDNames,i) \"DATASET ID('\"Word(DSNames,i)\"')\",\n                   \"STACK\"\n           If Rc <> 0\n              Then Do\n                   Say 'Rc='Rc 'from LIBDEF of' Word(DSNames,i) ,\n                       'To' Word(DDNames,i)\n                   Call LIBDEF_Libraries Subword(DDNames,i)\n                   Leave Rc=8\n                   End\n           End\n\nEnd\n\nReturn Rc\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT403/FILE403.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT403", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}