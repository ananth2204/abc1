000100 PROCESS DYNAM,NAME,PGMNAME(COMPAT)
000200 PROCESS ADV,AWO,NOC(W),FSRT,FLAG(I,I)
000300 PROCESS INTDATE(ANSI),LANG(EN),LIB,LIST,MAP
000400 PROCESS NONUM,NUMPROC(PFD),OBJ,APOST
000500 PROCESS RENT,NOSEQ,SOURCE,NOSSRANGE,
000600 PROCESS NOTERM,NOTEST,VBREF,
000700 PROCESS XREF(FULL),ZWB,FASTSRT,AR(E)
000800 ID DIVISION.
000900 PROGRAM-ID. 'TESTCOB1'.
001000 AUTHOR. JOHN MCKOWN.
001100 INSTALLATION. CBT Tape.
001200 DATE-WRITTEN.
001300 DATE-COMPILED.
001400 SECURITY. NONE.
001500*
001600 ENVIRONMENT DIVISION.
001700 CONFIGURATION SECTION.
001800 SOURCE-COMPUTER. IBM-370.
001900 OBJECT-COMPUTER. IBM-370.
002000 SPECIAL-NAMES.
002100 INPUT-OUTPUT SECTION.
002200 FILE-CONTROL.
002300 I-O-CONTROL.
002400*    APPLY WRITE-ONLY ON REPORT1-FD.
002500*
002600 DATA DIVISION.
002700 FILE SECTION.
002800
002900*
003000 WORKING-STORAGE SECTION.
003100 COPY COBSQLTE .
003200 01  CEE3DMP-PARAMETERS.
003300     05 CEE3DMP-TITLE              PIC X(80)
003400        VALUE 'TEST DUMP'.
003500     05 CEE3DMP-OPTIONS            PIC X(255)
003600        VALUE 'NOTRACE NOENTRY'.
003700 01  LE-FC.
003800     02  CONDITION-TOKEN-VALUE.
003900     COPY  CEEIGZCT.
004000         03  CASE-1-CONDITION-ID.
004100             04  SEVERITY    PIC S9(4) BINARY.
004200             04  MSG-NO      PIC S9(4) BINARY.
004300         03  CASE-2-CONDITION-ID
004400                   REDEFINES CASE-1-CONDITION-ID.
004500             04  CLASS-CODE  PIC S9(4) BINARY.
004600             04  CAUSE-CODE  PIC S9(4) BINARY.
004700         03  CASE-SEV-CTL    PIC X.
004800         03  FACILITY-ID     PIC XXX.
004900     02  I-S-INFO            PIC S9(9) BINARY.
005000*
005100 LOCAL-STORAGE SECTION.
005200 01  LS-FULLWORD-RETURN.
005300     05  LS-LIBVERSION-POINTER   POINTER.
005400     05  LS-LIBVERSION-BINVALUE  REDEFINES LS-LIBVERSION-POINTER
005500                                 PIC S9(9) COMP-5.
005600 77  LS-LILIAN               PIC S9(9) COMP-5.
005700 77  LS-GMT-SECS-1           USAGE COMP-2.
005800 77  LS-GMT-SECS-2           USAGE COMP-2.
005900 77  LS-GMT-SECS-3           USAGE COMP-2.
006000 77  LS-GMT-SECS-4           USAGE COMP-2.
006100 77  LS-GMT-SECS-5           USAGE COMP-2.
006200 77  LS-GMT-SECS-6           USAGE COMP-2.
006300 77  LS-DB                   USAGE IS POINTER.
006400 77  LS-INSERT-STMT          USAGE IS POINTER.
006500 77  LS-SELECT-STMT          USAGE IS POINTER.
006600 77  LS-ZERO                 PIC S9(9) COMP-5
006700                             VALUE IS ZERO.
006800 77  LS-RC                   PIC S9(9) COMP-5.
006900 77  LS-SQL-RC               PIC S9(9) COMP-5.
007000 77  SQL-ZCHAR               PIC X(255).
007100 77  LS-I                    PIC S9(9) COMP-5.
007200 77  LS-RECORD-COUNT         PIC S9(9) COMP-5.
007300 77  LS-MINUS-ONE            PIC S9(9) COMP-5
007400        VALUE IS -1.
007500 77  LS-ONE                  PIC S9(9) COMP-5
007600        VALUE IS 1.
007700 77  LS-LIBVERSION-LENGTH    PIC S9(9) COMP-5
007800        VALUE IS 0.
007900 LINKAGE SECTION.
008000 01  MVS-PARM.
008100     05 MVS-PARM-LENGTH      PIC S9(4) COMP-5.
008200     05 MVS-PARM-VALUE       PIC X(32760).
008300 77  LINKAGE-LIBVERSION      PIC X(101).
008400* MVS-PARM-VALUE LENGTH IS REALLY ONLY THE NUMBER OF CHARACTERS
008500* CONTAINED IN MVS-PARM-LENGTH. YOU NEED TO USE REFERENCE
008600* MODIFICATION TO MAKE SURE YOU DON'T EXCEED THE ACTUAL LENGTH
008700* PASSED TO THIS PROGRAM.
008800*
008900 PROCEDURE DIVISION USING MVS-PARM.
009000 START-UP.
009100**
009200** How to access the data when SQLITE returns a
009300** pointer. The following shows how to get the pointer
009400** and then determine the length of the C "string"
009500** which ends with a LOW-VALUES (0x00).
009600     CALL 'SQLITE3A' USING SQLITE3-LIBVERSION
009700          RETURNING LS-LIBVERSION-POINTER
009800     END-CALL
009900     IF LS-LIBVERSION-POINTER NOT EQUAL TO NULL THEN
010000        SET ADDRESS OF LINKAGE-LIBVERSION TO LS-LIBVERSION-POINTER
010100*
010200* Get the length of the returned string by finding the first
010300* LOW-VALUE (0x00). Probably not as efficient as calling the
010400* C "strlen" routine, but is "pure" COBOL.
010500        MOVE ZERO TO LS-LIBVERSION-LENGTH
010600        INSPECT LINKAGE-LIBVERSION
010700                TALLYING LS-LIBVERSION-LENGTH
010800                FOR CHARACTERS BEFORE INITIAL LOW-VALUE
010900*
011000* If you're interested, this is how to call "strlen". It requires
011100* that CEE.SCEELKED be available for dynamic calling or linking
011200* depending on the compile option DYNAM or NODYNAM, respectively.
011300*       CALL    'STRLEN' USING BY VALUE LS-LIBVERSION-POINTER
011400*               RETURNING LS-LIBVERSION-LENGTH
011500*       END-CALL
011600        DISPLAY "Sqlite version is "
011700                LINKAGE-LIBVERSION(1:LS-LIBVERSION-LENGTH)
011800                UPON SYSOUT
011900     END-IF
012000     CALL 'SQLITE3A' USING SQLITE3-INITIALIZE
012100     RETURNING LS-SQL-RC
012200     END-CALL
012300D    DISPLAY 'INITIALIZE LS-SQL-RC=' LS-SQL-RC
012400D            UPON SYSOUT
012500     IF LS-SQL-RC NOT = SQLITE-OK THEN
012600        DISPLAY 'SQLITE-INITIALIZE FAILED. RC='
012700            RETURN-CODE
012800            UPON SYSOUT
012900        GOBACK
013000     END-IF
013100     .
013200 INITIALIZE-SQLITE.
013300*
013400* Note: in my testing, this creates a z/OS UNIX file in
013500* the /tmp subdirectory, with the name testcob1.sqlite3 .
013600* That is, the data base name is actually the UNIX file name.
013700* This can be absolute, as in my example, or relative to the
013800* user's UNIX $HOME directory if the value does not start with
013900* a slash character. This is the norm for UNIX file names.
014000*
014100* Note that a prefix of a tilde, ~/, does not expand to the user's
014200* $HOME as it would in a UNIX shell.
014300* Again, in my testing, the OPEN fails with SQLITE-CANTOPEN (14).
014400*
014500     MOVE Z'/tmp/testcob1.sqlite3' TO SQL-ZCHAR
014600     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-OPEN
014700          BY REFERENCE SQL-ZCHAR
014800          BY REFERENCE LS-DB
014900          RETURNING LS-SQL-RC
015000     END-CALL
015100     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
015200        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
015300        DISPLAY 'SQLITE3-OPEN FAILED. RC='
015400           LS-SQL-RC UPON SYSOUT
015500        GOBACK
015600     END-IF
015700     .
015800 DROP-TABLE.
015900     MOVE Z'DROP TABLE xz' TO SQL-ZCHAR
016000     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-EXEC
016100          BY VALUE LS-DB
016200          BY REFERENCE SQL-ZCHAR
016300          BY VALUE LS-ZERO
016400          BY VALUE LS-ZERO
016500          BY VALUE LS-ZERO
016600          RETURNING LS-SQL-RC
016700     END-CALL
016800     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
016900        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
017000        DISPLAY 'DROP TABLE  FAILED. RC='
017100           LS-SQL-RC UPON SYSOUT
017200     END-IF
017300     .
017400 CREATE-TABLE.
017500     MOVE Z'CREATE TABLE xz(N INTEGER)' TO SQL-ZCHAR
017600     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-EXEC
017700          BY VALUE LS-DB
017800          BY REFERENCE SQL-ZCHAR
017900          BY VALUE LS-ZERO
018000          BY VALUE LS-ZERO
018100          BY VALUE LS-ZERO
018200          RETURNING LS-SQL-RC
018300     END-CALL
018400D    DISPLAY 'CREATE TABLE RC=' LS-SQL-RC UPON SYSOUT
018500     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
018600        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
018700        DISPLAY 'CREATE TABLE  FAILED. RC='
018800           LS-SQL-RC UPON SYSOUT
018900        GOBACK
019000     END-IF
019100     .
019200 CREATE-INDEX.
019300     MOVE Z'CREATE INDEX r1 ON xz(N)' TO SQL-ZCHAR
019400     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-EXEC
019500          BY VALUE LS-DB
019600          BY REFERENCE SQL-ZCHAR
019700          BY VALUE LS-ZERO
019800          BY VALUE LS-ZERO
019900          BY VALUE LS-ZERO
020000          RETURNING LS-SQL-RC
020100     END-CALL
020200D    DISPLAY 'CREATE TABLE RC=' RETURN-CODE UPON SYSOUT
020300     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
020400        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
020500        DISPLAY 'CREATE TABLE  FAILED. RC='
020600           LS-SQL-RC UPON SYSOUT
020700        GOBACK
020800     END-IF
020900     .
021000 PREPARE-INSERT.
021100     MOVE Z'INSERT INTO xz(N) VALUES(?)' TO SQL-ZCHAR
021200     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-PREPARE
021300          BY VALUE LS-DB
021400          BY REFERENCE SQL-ZCHAR
021500          BY VALUE LS-MINUS-ONE
021600          BY REFERENCE LS-INSERT-STMT
021700          BY VALUE LS-ZERO
021800          RETURNING LS-SQL-RC
021900     END-CALL
022000D    DISPLAY 'PREPARE INSERT RC=' LS-SQL-RC UPON SYSOUT
022100     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
022200        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
022300        DISPLAY 'PREPARE OF INSERT FAILED. RC='
022400           LS-SQL-RC UPON SYSOUT
022500        GOBACK
022600     END-IF
022700     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-CHANGES
022800          BY VALUE LS-DB
022900          RETURNING LS-SQL-RC
023000     END-CALL
023100     DISPLAY 'CHANGES BEFORE BEGIN=' LS-SQL-RC
023200       UPON SYSOUT
023300     .
023400 BEGIN-TRANSACTION.
023500     MOVE Z'BEGIN TRANSACTION' TO SQL-ZCHAR
023600     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-EXEC
023700          BY VALUE LS-DB
023800          BY REFERENCE SQL-ZCHAR
023900          BY VALUE LS-ZERO
024000          BY VALUE LS-ZERO
024100          BY VALUE LS-ZERO
024200          RETURNING LS-SQL-RC
024300     END-CALL
024400D    DISPLAY 'BEGIN TRANSACTION RC=' LS-SQL-RC UPON SYSOUT
024500     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
024600        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
024700        DISPLAY 'BEGIN TRANSACTION. RC='
024800           LS-SQL-RC UPON SYSOUT
024900        GOBACK
025000     END-IF
025100     CALL 'CEEGMT' USING LS-LILIAN, LS-GMT-SECS-1, LE-FC
025200     .
025300 INSERT-VALUES.
025400*
025500* Inline PERFORM to insert values.
025600     PERFORM VARYING LS-I FROM 0 BY 1 UNTIL LS-I >= 50000
025700* Bind the host variable contents to the prepared statement
025800     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-BIND-INT
025900          BY VALUE LS-INSERT-STMT
026000          BY VALUE LS-ONE
026100          BY VALUE LS-I
026200          RETURNING LS-SQL-RC
026300     END-CALL
026400D    DISPLAY 'INSERT BIND RC=' LS-SQL-RC UPON SYSOUT
026500     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
026600        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
026700        DISPLAY 'INSERT BIND FAILED. RC='
026800           LS-SQL-RC UPON SYSOUT
026900        GOBACK
027000     END-IF
027100* Actually insert the data.
027200     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-STEP
027300          BY VALUE LS-INSERT-STMT
027400          RETURNING LS-SQL-RC
027500     END-CALL
027600D    DISPLAY 'INSERT STEP RC=' LS-SQL-RC
027700D            ' VALUE=' LS-I
027800D            UPON SYSOUT
027900     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
028000        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
028100        DISPLAY 'INSERT (STEP) FAILED. RC='
028200           LS-SQL-RC UPON SYSOUT
028300        GOBACK
028400     END-IF
028500* Do a "reset" to reset the prepared statement for reuse.
028600     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-RESET
028700          BY VALUE LS-INSERT-STMT
028800          RETURNING LS-SQL-RC
028900     END-CALL
029000D    DISPLAY 'INSERT RESET RC=' LS-SQL-RC UPON SYSOUT
029100     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
029200        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
029300        DISPLAY 'RESET FAILED. RC='
029400           LS-SQL-RC UPON SYSOUT
029500        GOBACK
029600     END-IF
029700     END-PERFORM
029800* End of INSERT loop
029900     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-CHANGES
030000          BY VALUE LS-DB
030100          RETURNING LS-SQL-RC
030200     END-CALL
030300     DISPLAY 'CHANGES BEFORE COMMIT=' LS-SQL-RC
030400             UPON SYSOUT
030500* Finalize the prepared statement to release resources.
030600     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-FINALIZE
030700          BY VALUE LS-INSERT-STMT
030800          RETURNING LS-SQL-RC
030900     END-CALL
031000*    MOVE RETURN-CODE TO LS-SQL-RC
031100D    DISPLAY 'INSERT FINIALIZE RC=' LS-SQL-RC UPON SYSOUT
031200     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
031300        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
031400        DISPLAY 'FINALIZE FAILED. RC='
031500           LS-SQL-RC UPON SYSOUT
031600        GOBACK
031700     END-IF
031800     .
031900 COMMIT-TRANSACTION.
032000* Commit the data just inserted.
032100     MOVE Z'COMMIT TRANSACTION' TO SQL-ZCHAR
032200     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-EXEC
032300          BY VALUE LS-DB
032400          BY REFERENCE SQL-ZCHAR
032500          BY VALUE LS-ZERO
032600          BY VALUE LS-ZERO
032700          BY VALUE LS-ZERO
032800          RETURNING LS-SQL-RC
032900     END-CALL
033000D    DISPLAY 'COMMIT EXEC RC=' LS-SQL-RC UPON SYSOUT
033100     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
033200        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
033300        DISPLAY 'DROP TABLE  FAILED. RC='
033400           LS-SQL-RC UPON SYSOUT
033500        GOBACK
033600     END-IF
033700     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-CHANGES
033800          BY VALUE LS-DB
033900          RETURNING LS-SQL-RC
034000     END-CALL
034100     DISPLAY 'CHANGES AFTER COMMIT=' LS-SQL-RC
034200             UPON SYSOUT
034300     .
034400 GET-TIMING-1.
034500     CALL 'CEEGMT' USING LS-LILIAN, LS-GMT-SECS-2, LE-FC
034600     SUBTRACT LS-GMT-SECS-1 FROM LS-GMT-SECS-2
034700              GIVING LS-GMT-SECS-4.
034800     DISPLAY 'TIME DIFFERENCE #1=' LS-GMT-SECS-4
034900             UPON SYSOUT
035000     .
035100 PREPARE-SELECT.
035200     MOVE Z'SELECT N FROM xz;' TO SQL-ZCHAR
035300     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-PREPARE
035400          BY VALUE LS-DB
035500          BY REFERENCE SQL-ZCHAR
035600          BY VALUE LS-MINUS-ONE
035700          BY REFERENCE LS-SELECT-STMT
035800          BY VALUE LS-ZERO
035900          RETURNING LS-SQL-RC
036000     END-CALL
036100*    MOVE RETURN-CODE TO LS-SQL-RC
036200D    DISPLAY 'SELECT PREPARE RC=' LS-SQL-RC UPON SYSOUT
036300     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
036400        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
036500        DISPLAY 'PREPARE OF SELECT FAILED. RC='
036600           LS-SQL-RC UPON SYSOUT
036700        GOBACK
036800     END-IF
036900     .
037000 SETUP-SELECT-LOOP.
037100     CALL 'CEEGMT' USING LS-LILIAN, LS-GMT-SECS-4, LE-FC
037200     MOVE ZERO TO LS-SQL-RC
037300     MOVE ZERO TO LS-I
037400     MOVE ZERO TO LS-RECORD-COUNT
037500     .
037600 SELECT-LOOP.
037700* Inline PERFORM to insert values.
037800     PERFORM UNTIL LS-SQL-RC NOT = 0
037900* Bind the host variable contents to the prepared statement
038000D    DISPLAY 'LS-RECORD-COUNT=' LS-RECORD-COUNT UPON SYSOUT
038100D    DISPLAY 'LS-ONE=' LS-ONE UPON SYSOUT
038200     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-STEP
038300          BY VALUE LS-SELECT-STMT
038400          RETURNING LS-SQL-RC
038500     END-CALL
038600D    DISPLAY 'SELECT STEP RC=' LS-SQL-RC UPON SYSOUT
038700     EVALUATE LS-SQL-RC
038800     WHEN SQLITE-OK
038900D         DISPLAY 'SQLITE-OK' UPON SYSOUT
039000          ADD +1 TO LS-RECORD-COUNT
039100          MOVE 0 TO LS-SQL-RC
039200     WHEN SQLITE-ROW
039300D         DISPLAY 'SQLITE-ROW' UPON SYSOUT
039400          ADD +1 TO LS-RECORD-COUNT
039500D         CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-COLUMN-INT
039600D              BY VALUE LS-SELECT-STMT
039700D              BY VALUE LS-ZERO
039800D              RETURNING LS-I
039900D         END-CALL
040000D         DISPLAY 'GOT VALUE ' LS-I ' ON CALL ' LS-RECORD-COUNT
040100D                 UPON SYSOUT
040200          MOVE 0 TO LS-SQL-RC
040300     WHEN SQLITE-DONE
040400D         DISPLAY 'SQLITE-DONE' UPON SYSOUT
040500          MOVE +4 TO LS-SQL-RC
040600     WHEN OTHER
040700D         DISPLAY 'OTHER' UPON SYSOUT
040800          DISPLAY 'SELECT FAILED ERROR=' LS-SQL-RC
040900                  'COUNT=' LS-RECORD-COUNT
041000                  UPON SYSOUT
041100          MOVE +8 TO LS-SQL-RC
041200     END-EVALUATE
041300     END-PERFORM
041400* End of INSERT loop
041500* Finalize the prepared statement to release resources.
041600     CALL 'SQLITE3A' USING BY REFERENCE SQLITE3-FINALIZE
041700          BY VALUE LS-SELECT-STMT
041800          RETURNING LS-SQL-RC
041900     END-CALL
042000D    DISPLAY 'SELECT FINALIZE RC=' LS-SQL-RC UPON SYSOUT
042100     IF LS-SQL-RC IS NOT EQUAL TO SQLITE-OK AND
042200        LS-SQL-RC IS NOT EQUAL TO SQLITE-DONE THEN
042300        DISPLAY 'FINALIZE FAILED. RC='
042400           LS-SQL-RC UPON SYSOUT
042500        GOBACK
042600     END-IF
042700     .
042800
042900 GET-TIMING-2.
043000     CALL 'CEEGMT' USING LS-LILIAN, LS-GMT-SECS-5, LE-FC
043100     SUBTRACT LS-GMT-SECS-4 FROM LS-GMT-SECS-5
043200              GIVING LS-GMT-SECS-6.
043300     DISPLAY 'SELECT TIME=' LS-GMT-SECS-6 ' '
043400             LS-RECORD-COUNT ' ROWS SELECTED.'
043500             UPON SYSOUT
043600     .
043700
043800 SHUTDOWN.
043900     CALL 'SQLITE3A' USING SQLITE3-SHUTDOWN
044000          RETURNING LS-SQL-RC
044100     END-CALL
044200     GOBACK
044300     .
044400 END PROGRAM 'TESTCOB1'.
