./ ADD NAME=$DOC     0100-09054-09054-0229-00097-00097-00000-DOC
Since you have PDSs (libraries) on MVS already, what do I need
a librarian for?  The LIBRARIAN prevents mutliple users from
updating a member at the same time.  When a user wants to update
a member of a library, they "CHECK OUT" the member.  The LIBRARIAN
updates the status to reflect the status is "CHECKED OUT" and
records the time, date, and user id of who CHECKED OUT the member.
While the member is in CHECKED OUT state, others will not be allowed
to CHECK OUT the same member.  Only the user that CHECKED out the
member may CHECK IN that member.  When the member is CHECKED IN,
the LIBRARIAN will change the status to CHECKED IN and record the
time, date, and user id of the user that performed the CHECK IN.
A member may be VIEWed or BROWSEd at any time.  VIEWing or BROWSEing
members does not changed the STATUS or CHECK-IN or CHECK_OUT
time stamps.

Access to members is controlled via a user exit (LIBUX02).
You may over-ride standard access controls.  For example,
it may be that a user that has a member CHECKED OUT is on
vacation or no long working for your company.  You may want
to allow a manager to CHECK IN the member.

The LIBRARIAN is network based.  Users "connect" using VTAM LU 6.2
or TCP/IP.

The server or back-end can be run as a JOB or started task (STC).
Users may interface to the LIBRARIAN either though batch or an SPF
dialog.

The LIBRARIAN can manage multiple libraries.  This allows one
LIBRARIAN to manage SOURCE, MACRO, JCL, etc libraries.

Libraries are KSDS VSAM clusters.

Members in the library may be stored in a compressed form.
User exit LIBUX01 allows you to use the LIBRARIAN supplied
compression, use a compression method of your own, or turn
compression off.  The librarian compression mechanism averages
about a 4-to-1 compression ratio.

This version of the LIBRARIAN allows you to add up to 5 lines of
comments about a member for documentation.  These comments are
not considered a part of the member itself.

The LIBRARIAN allows for up to 32,767 versions of a given member.

When a user selects a library, by default only the highest
version of members are listed.  If you want to see all versions
of members, use the "A" (for all) or "F" (for full) line command.


The VSAM key used in the KSDSs allows approximately 2 billion
(a 4 byte binary field) blocks of source data.  Each block
is up to 8K in size.  If data compression is used, the blocks
contain compressed data.  The amount of data that can be stored
in a library is usually limited only by the amount of disk space
available.

Using an network interface was to allow users to
access a library without having to log-in to the system
where the library actually lives.  You could have a system
at a central location serving remote offices.  If you have
multiple LPARs, users can access libraries on any of the
LPARs while logged in to only one of the LPARs.

Several supporting utilities are also supplied.
  .  LIBINIT     Initializes a new library.
  .  UTIL0001    Loads members to a library "offline"
  .  UTIL0002    Unloads a library to a sequential file
  .  UTIL0003    Converts a source file to compressed form
  .  UTIL0004    Detail library status report.
  .  UTIL0005    Unloads members to a sequential file in
                 LIBRARIAN "export" format
  .  UTIL0006    Imports members from a sequential file
                 in LIBRARIAN "export" format
  .  UTIL0007    Loads members of a PDS directly to a library


To create a new library,
  . define the VSAM KSDS
    The KSKS must have "KEYS(15 0)" and "RECORDSIZE(95 8000).
  . Initialize the library with LIBINIT.


Once a library has been created you can add new members
with the offline utility, UTIL0001, 'import' members
with utility UTIL0006, load members of a PDS or you can
start using it immediately with the LIBRARIAN.

To access a library with the LIBRARIAN, you can add
control statements to the start up parameters or you
can use the "DEF[INE]" command from a system console.

When libraries are CLOSEd, they are dynamically de-allocated
via DYNALLOC (SVC 99).  This allows you to do offline
maintenance on a library.  For example you could re-allocate
the library to increase the size or move the library
to a different DASD volume without stopping the LIBRARIAN.
./ ADD NAME=BATCH    0100-09054-09054-0229-00129-00129-00000-DOC
Use the LIBRARIAN from batch

JCL
     //LIBRARY  EXEC PGM=CALLSUB
     //STEPLIB  DD DSN=..................,DISP=SHR
     //SYSPRINT DD SYSOUT=*
     //SYSIN    DD *
          .
        Your control statements here
          .
     /*
     //


This utility is not very sophisticated (neither am I).

Actually this was a "quick and dirty" utility to test
LIBSUB.

This interface still does not support TCP/IP.

All control statements have the command in columns 1 to 9.
Parameters for the control statements begin in column 10.

Control statements are:

  LIB APPL    The VTAM APPLID of the LIBRARIAN server.
              The space in the command "LIB APPL" is required.

  LIBRARY     The 1 to 8 character library name.

  MEMBER      The 1 to 8 character member name.

  VERSION     The 1 to 5 digit version number for the member.

  FUNCTION    The library function.  Valid functions are:

        CHECKIN            Check in a member
        CKIN
        IN

        CHECKOUT           Check out a member
        CKOUT
        OUT

        COM                Updates the comments for a member
        COMM
        COMMENT
        COMMENTS
        DESC
        DESCRIP
        DESCRIPT
        DOC
        DOCS
        DOCUMENT

        DEL                Delete a member
        DELETE
        REMOVE

        LIB                Gets a list of available libraries
        LIBS
        LIB LIST

        MEM                Gets a list of members in a library
        MEMS
        MEM LIST

        VIEW               View a member

  MSG 1       Up to 72 characters of description or documentation.
    to        This utility allows up to 5 lines of documentation.
  MSG 5       MSG statements do not have to be in sequential order.
              If you give MSG 1 and MSG 4, then lines 2 and 3 of
              the member's comments would be blank.

  UDSN        The name of your dataset or PDS that will be used
              as the source for a member on a CHECK IN or the
              output for any other command.

  UMEM        If the dataset name specified for UDSN is a PDS,
              this is the name of the member.

  CALL        Calls the LIBRARIAN with the parameters up to the
              point where the CALL statement is in the stream of
              control statements.


Control statement parameters are saved as they are read and are
never "cleared"... this can cause unexpected results.

Let's say you are going to CHECK IN two or members with one
execution of the  utility.  You give MSG 1, MSG 2, and MSG 3
for the first member.  Then you give have another MEMBER and
UMEM statements and MSG 1 for the comments for the second
member.  The second member would get the 'residual' data from
the MSG 2 and MSG 3 from the first member.  To "clear"  MSG 2
and MSG 3, you need to have MSG 2 and MSG 3 statements with
columns 10 to 80 left blank.

Version defaults to 1.  If you give a VERSION statement, that
version remains in effect until you give another VERSION statement.



Example:

      LIB APPL PRODLIB
      LIBRARY  SOURCE
      VERSION  00001
      UDSN     WORKING.SOURCE
      UMEM     UTIL1
      MEMBER   PROGRAM1
      FUNCTION CHECK IN
      CALL
      UMEM     UTILX
      MEMBER   SUB1
      FUNCTION CHECK IN
      CALL

  This would reference library SOURCE that is being managed by
  the LIBRARIAN using VTAM APPL name PRODLIB.  Member UTIL1 from the
  user's dataset called WORKING.SOURCE would be CHECKED IN to the
  library as member PROGRAM1.  Since there is no UDSN statement
  between the first and second CALL statements, the dataset on the
  first (only UDSN) statement is still in effect.  The second CALL
  would CHECK IN member UTILX from dataset WORKING.SOURCE into the
  SOURCE library as member SUB1.  There are no MSG x statements so
  both members would be stored with no comment/description data.
./ ADD NAME=CONSOLE  0100-09054-09054-0229-00105-00105-00000-DOC
Console interface

The librarian allows commands to be issued via the MVS MODIFY (F)
and STOP (P) commands.

The commands available are:

    CLOSE          Close a library

    DEF            Define a library
    DEFINE

    KILL           Kill a user's connection to the LIBRARIAN

    LIB            Display the libraries and their OPEN/CLOSE state
    LIBS

    LIBSTAT        Display statistics of the library activity

    OPEN           Open a library

    SNAP           Take a SNAP DUMP (SNAP shot)

    USER           Display the users currently connected
    USERS

    SHUT           Shutdown the server
    STOP
    QUIT

    ?              List the commands


CLOSE command
     CLOSE,llllllll or CLOSE,ALL

         llllllll must be the name of a library defined on a
         LIBRARY start up control statement or defined via a
         previous DEF or DEFINE console command.

         The library must 'idle' before it can be CLOSEd.  You
         can determine that status of a library by issuing the
         "LIBS" command.  Any active users must log-out or be
         terminated via the "KILL" command before a library can
         be CLOSEd.



DEF or DEFINE command
     DEF[INE],llllllll,dsn

         llllllll will be used for the library's name.  This
         is the name you will need to use on future console
         commands to OPEN or CLOSE this library.  The initial
         state of a library defined via the console is CLOSED.
         dsn is the VSAM cluster name of the library.  The
         library will need to be initialized with the LIBINIT
         utility before it can be OPENed.


OPEN command
     OPEN,lllllll or OPEN,ALL

         llllllll must be the name of a library defined on a
         LIBRARY start up control statement or defined via a
         previous DEF or DEFINE console command.


KILL command
     KILL,uuuuuuu or KILL,ALL

         uuuuuuuu must be the USER ID of a user that is currently
         using the LIBRARIAN or 'ALL'.



LIB or LIBS command
     Displays the libraries that have been defined and their
     OPEN/CLOSE state and lists any users currently using the
     library.



LIBSTAT
     Displays detail statistics for each library.



USER[S]
     Displays the users currently connected.  For each user
     the library and last server function they used is shown.



SNAP
     Requests the server make a SNAP DUMP.
     The server will dyanmically allocate DD LIBSNAP with
     option CLOSE=RELEASE.  The SYSOUT class is specified
     by the SNAPCLAS parameter to the OPTIONS macro in the
     LIBOPT SOURCE library member.



SHUT/STOP/QUIT or the MVS "STOP (P)" command
     Shuts down the LIBRARIAN server
./ ADD NAME=INSTALL  0100-09054-09054-0229-00135-00135-00000-DOC
      Estimated space required on a 3390:
            Library             RECFM  LRECL BLKSIZE   PRI SEC  DIR
            DOC                   FB     80    4000      5   5    5
            ISPPLIB               FB     80    4000      5   5    5
            JCL                   FB     80    4000      5   5    5
            MACLIB                FB     80    4000      5   5   10
            OBJECT                FB     80    4000     10   5   10
            SOURCE                FB     80    4000     60  15   20
            LOADLIB               U       0    6144     10  10   10
            HISTORY (optional)    FB    104    5200
                   The space for the history file will depend on
                   how many files are checked-in or deleted.


  .  I took a lot of liberties with labels in the source code.
     You will need to use IEV90 or later assembler.

  .  As is the LIBRARIAN does not need to be in an APF authorized
     library.  If I ever get the authorization written to call RACF,
     it will need to be APF authorized to make the RACF calls.

  .  If you want to use VTAM for user-server communication, the
     LIBRARIAN will need a VTAM application id (APPLID).  Also each
     user will will need an APPLID.

     The users will use the names in the UACB list coded on the
     OPTIONS macro in the LIBOPT source member.  Once you have
     decided what VTAM application names to use, enter the names
     for the users on the OPTIONS macro in the LIBOPT member of
     the SOURCE library.  The APPLIDs used for user sessions are
     re-used.  That is the number of names in the UACB list is the
     maximum number of users that can communicate with the LIBRARIAN
     at one time.

     For an example assume the LIBRARIAN will use APPLID PRODLIB
     and users will use LIBUSER0, LIBUSER1, LIBUSER2, and LIBUSER3.
     You would code UACB=(LIBUSER0,LIBUSER1,LIBUSER2,LIBUSER3) on
     the OPTIONS in member LIBOPT of the SOURCE library.  PRODLIB
     would need to be specified on APPLID= control statement for
     the LIBRARIAN start up parameters.  This would allow up to
     four users to use the LIBRARIAN at one time.

     Have your VTAM administrator add the APPLIDs to VTAM.

  .  If you are going to use TCP/IP decide which PORT number
     you want the server to LISTEN on.

  .  Allocate the libraries.

  .  Edit the members of the JCL library.
       .  Add valid JOB statements
       .  If you are going to add the LIBRARIAN LOADLIB to your
          LINKLST, remove the STEPLIB DD statements.  Otherwise
          change the DSN on the STEPLIB DD statements.

  .  Edit the ASMLINK JCL member.
       .  Update the JOB statement
       .  Change the SYSOUT class(es) if necessary
       .  Change the DSN on the SYSLIB DD in the IEV90 step to
          the name you used for the MACRO library
       .  Change the DSN on the SYSPUNCH DD in the IEV90 step to
          the name you used for the OBJECT library
       .  Change the DSN on the SYSIN DD in the IEV90 step to
          the name you used for the SOURCE library
       .  Change the DSN on the SYSLIB DD in the LINK step to
          the name you used for the OBJECT library
       .  Change the DSN on the SYSLMOD DD in the LINK step to
          the name you used for the LOADLIB library

  .  Update the LIBOPT member in the SOURCE library.
       . Add the VTAM APPL names that users will use for
         communication with the LIBRARIAN.

  .  Determine if you want to use the LIBRARIAN's built in data
     compression, replace the compress/decompress with your own
     compression mechinism, or turn compression off (LIBUX01).

  .  Add code for security to LIBUX02.

  .  User exit 3 (LIBUX03) identifies the user by examining SMF
     and RACF control blocks.  If you use some other a security
     system other than RACF, you may need to update LIBUX03.

  .  Submit ASMLINK to assemble and LINK-EDIT the LIBRARIAN.

  .  Optionally add the LIBRARIAN LOADLIB to the LINKLST.

  .  Define the libraries you will use.
       Use DEFLIB as a model.
       Change the CLUSTER, DATA, and INDEX component names
       Change the VOLUMES parameter
       Change the TRACKS
       Change the library description records (SYSIN statements)
         for LIBINIT.

  .  If you are going to run the LIBRARIAN as a started task
     (STC), you will need a data set or PDS member for the
     start-up parameters and you will need to change the
     LIBIN DD statement to refer to this data set or PDS member.
     If you use RACF, you will need to update ICHRIN03 or define
     a user with the same name as the STC PROC name to allow the
     STC to access data sets, etc.


  .  Edit the start up parameters.
     See the LIBSTC member of the DOC library for the
     control statements.

  .  Copy the LIB and LIB2 REXX execs to a library accessible
     to SPF.

  .  Add the library used for the LIBRARIAN load modules to
     a library accessible to SPF.  If you have TSOPLUS, the
     STEPLIBX facility can be used in the REXX execs.

  .  Edit the REXX execs if necessary.  If you changed the
     names of the REXX execs, be sure to change the name of
     LIB2 in exec LIB (LIB calls LIB2).  Change the name of
     the panel library in the LIBDEF for ISPPLIB.  Add the
     APPLID(s) of the LIBRARIAN(s) to the LIST variable in
     the LIB REXX exec.

  .  Optionally add the LIBRARIAN as an option to a menu.

  .  Start up the LIBRARIAN.  Submit the JOB or start the STC.


  .  Log-in to TSO.

  .  Start a session to the LIBRARIAN
       If the LIBRARIAN was added to a menu, select the menu option
       otherwise use SPF option 6 and then enter the name of you
       used for the LIB REXX exec.

  .  You should be going.  Report problems to someone else!
./ ADD NAME=LIB      0100-09054-09054-0229-00051-00051-00000-DOC
/* REXX ------------------------------------------------------------ */
/*                                                                   */
/* ----------------------------------------------------------------- */

 /* TRACE R */

ARG PARMS

LIST = "APPL1 APPL2 APPL3  ... "             < -------------

NBR_WORDS = WORDS(PARMS)

IF NBR_WORDS = 0 THEN
   DO
      LIB_APPL = "YOUR DEFAULT APPLID"       < -------------
      LIB_NAME = ""
      ADDRESS TSO ISPEXEC "CONTROL ERRORS RETURN"
      ADDRESS TSO
        ISPEXEC "SELECT  CMD(LIB2" LIB_APPL LIB_NAME") NEWAPPL(LIB)"
      EXIT(0)
   END

IF NBR_WORDS = 2 THEN
   DO
      LIB_APPL = WORD(PARMS,1)
      LIB_NAME = WORD(PARMS,2)
      ADDRESS TSO ISPEXEC "CONTROL ERRORS RETURN"
      ADDRESS TSO
        ISPEXEC "SELECT  CMD(LIB2" LIB_APPL LIB_NAME") NEWAPPL(LIB)"
      EXIT(0)
   END

DO I = 1 TO NBR_WORDS
   IF POS(WORD(PARMS,I),LIST) > 0 THEN
      DO
         LIB_APPL = WORD(PARMS,1)
         LIB_NAME = ""
         ADDRESS TSO ISPEXEC "CONTROL ERRORS RETURN"
         ADDRESS TSO
      ISPEXEC "SELECT  CMD(LIB2" LIB_APPL LIB_NAME") NEWAPPL(LIB)"
         EXIT(0)
      END
END

LIB_APPL = "DEFAULT APPL"                       < -----------------
LIB_NAME = WORD(PARMS,1)
ADDRESS TSO ISPEXEC "CONTROL ERRORS RETURN"
ADDRESS TSO
  ISPEXEC "SELECT  CMD(LIB2" LIB_APPL LIB_NAME") NEWAPPL(LIB)"
EXIT(0)

./ ADD NAME=LIBINIT  0100-09054-09054-0229-00020-00020-00000-DOC
LIBINIT   Initialize a library

JCL
       //.......  JOB .............
       //LIBINIT EXEC PGM=LIBINIT
       //STEPLIB  DD DSN=..................,DISP=SHR
       //SYSPRINT DD SYSOUT=*
       //LIB      DD DSN=...library cluster...,DISP=SHR
       //SYSIN    DD *

           Your control statements here

       /*
       //

Control statements
All SYSIN records are copied to the library as library description
records.  There are no restrictions.  The contents of the first
record is what will appear in the library description in the
user SPF panels and in the responses to the LIB[S] console command.
./ ADD NAME=LIBIP    0100-09054-09054-0229-00046-00046-00000-DOC
/* REXX ------------------------------------------------------------ */
/*                                                                   */
/* ----------------------------------------------------------------- */

TRACE 'O'

ARG PARMS

NBR_WORDS = WORDS(PARMS)

DEFAULT_HOST="abc.xyz.com"
DEFAULT_PORT="nnnn"

IF NBR_WORDS = 0 THEN
   DO
      LIB_HOST = 'H=' || DEFAULT_HOST
      LIB_PORT = 'P=' || DEFAULT_PORT
      LIB_NAME = ""
      ADDRESS TSO ISPEXEC "CONTROL ERRORS RETURN"
      ADDRESS TSO
ISPEXEC "SELECT  CMD(MYLIB2" LIB_HOST LIB_PORT LIB_NAME") NEWAPPL(LIB)"
      EXIT(0)
   END

IF NBR_WORDS = 2 THEN
   DO
      LIB_HOST = 'H=' || WORD(PARMS,1)
      LIB_NAME = WORD(PARMS,2)
      ADDRESS TSO ISPEXEC "CONTROL ERRORS RETURN"
      ADDRESS TSO
ISPEXEC "SELECT  CMD(MYLIB2" LIB_HOST LIB_PORT LIB_NAME") NEWAPPL(LIB)"
      EXIT(0)
   END

LIB_HOST = 'H=' || WORD(PARMS,1)

IF DATATYPE(LIB_HOST) = 1 THEN
         LIB_NAME = ""
      ELSE
         LIB_HOST = 'P=' || DEFAULT_LIBRARY_ADDR

ADDRESS TSO ISPEXEC "CONTROL ERRORS RETURN"
ADDRESS TSO
ISPEXEC "SELECT  CMD(MYLIB2" LIB_HOST LIB_PORT LIB_NAME") NEWAPPL(LIB)"
EXIT(0)

./ ADD NAME=LIBSTC   0100-09054-09054-0229-00176-00176-00000-DOC
LIBSTC    LIBRARIAN server

JCL
           //.......  JOB .............
           //LIBRARY  EXEC PGM=LIBSTC
           //STEPLIB  DD DSN=..............................,DISP=SHR
Optional   //LIBHIST  DD DSN=... changed source history ...,DISP=SHR
           //LIBPRT   DD SYSOUT=*
           //LIBIN    DD *
                 .
               Control statements
                 .
           /*
           //

Control statements
Statements start in column 1.  Comments may be used at any time.
Start a comment with an asterisk (*) in column 1.
Statements may not be continued.

APPLID=  Optional.
         1 to 8 character VTAM application name

PORT     Optional.
         TCP/IP PORT number.  Must be numeric.  Range 1025-65535.

   ** You may specify both APPLID and PORT.  At least one is required.



LIBRARY=llllll,DSN=
     or
LIBRARY=llllll,OPEN=YES

        Defines a library to the LIBRARIAN.
           "llllllll" is a 1 to 8 character library "name".
           This is the name you will use in console commands to
           OPEN or CLOSE this library.

           DSN= is the library's VSAM cluster name.  This is
           the same name used in the DEFLIB job used to create
           the library.

        You may define multiple libraries.

        If you want the librarian to automatically open a
        library at server start-up, include a "LIBRARY="
        statement with the OPEN=YES parameter.  Note that this
        takes two statements, one to define the library, the
        second to indicate you want the library open at server
        start-up.



SNAPCLASS=c
        A one character class used for SNAP DUMPs


SYSNAME=
       A 1 to 20 character librarian name
       The info entered is displayed on user's SPF screens.
       This is a means for the user's to verify they have
       connected to the correct LIBRARIAN.
       This is an infomation only parameter.

XUSER=SMFID,USER1,USER2
       If users can connect from other systems, their userid
       may not be the same on both the remote and local system.
       XUSER statements allow you to "equate" a user id on
       a remote system to an id on the local system.

       SMFID is the 1 to 4 character SMF name of the remote
       system.  USER1 is the user's id on the remote system.
       USER2 is the user's id on the local system.

       For example assume a user logs-in as JOEBLOW on system
       MVS1 and the same user logs in on system MVS2 as JOHNDOE.
       Assume also that the LIBRARIAN is running on system
       MVS2.  You could include a LIBRARIAN start up control
       statement that says "XUSER=MVS1,JOEBLOW,JOHNDOE".
       When JOEBLOW on MVS1 connects to the LIBRARIAN running
       on MVS2, the LIBRARIAN would use JOHNDOE for the user's ID.
       If the user logs in on MVS2 they would use their MVS2 ID,
       JOHNDOE... in either case the LIBRARIAN uses JOHNDOE for
       the user.





Operation of the LIBRARIAN server

You do not include DD statements for libraries.  The LIBRARIAN
uses DYNALLOC (SVC 99) to allocate and de-allocate libraries.
When a library is OPENed, the library will be allocated, then
OPENed.  When a library is CLOSEd, it is CLOSEd and de-allocated.
This allows you to CLOSE individual libraries, back them up,
re-allocate them, etc without having to shutdown the LIBRARIAN.

If the LIBHIST DD statement is present when the server is
started, the LIBRARIAN will ATTACH a "changed history" subtask.
When users CHECK IN or DELETE members, the existing member's
source is written to the LIBHIST dataset before the CHECK IN
or DELETE.  A header record is written to identify the member.
Archiving the "changed source history" can allow you to recover
a member to a known date and time.

Each user that connects with the LIBRARIAN uses a VTAM LU 6.2
or TCP/IP connection.  Each user that uses VTAM requires a
VTAM APPLID.  The list of APPLIDs available for users needs to
be coded on the UACB parameter of the OPTIONS macro in the LIBOPT
member of the SOURCE library.  These APPLIDs are reused.  The
number of concurrent VTAM users is limited by the number of user
APPLIDs.

When a user connects to a LIBRARIAN, the LIBRARIAN server
ATTACHes an MVS subtask.  Each user is independently system
dispatchable so users can perform work concurrently.  If one
user causes his/her subtask to be WAITed for some reason, the
other users should not be affected.

The LIBRARIAN uses multiple MVS subtasks internally.  This is
to allow as much concurrent work as possible.  For example
there is a CONSOLE subtask so commands entered by an operator
can be processed concurrenty with work being done by a user.

When the LIBRARIAN server is shutdown, it prints some
statistics.  These should help you identify how heavily
(or not) at library is being used.

The LIBRARIAN also logs to SYSPRINT all user connections and
the LIBRARIAN functions they have performed.  This allows
user activity to be audited.


Sample start up JCL

            //LIBRARY  EXEC PGM=LIBSTC
            //STEPLIB  DD DSN=..................,DISP=SHR
            //LIBHIST  DD DSN=..................,DISP=SHR
            //LIBPRT   DD SYSOUT=*
            //LIBIN    DD *
            SYSNAME=PRODUCTION LIBRARY
            APPLID=PRODLIB
            PORT=4321
            LIBRARY=SOURCE,DSN=PROD.LIB.SOURCE
            LIBRARY=SOURCE,OPEN=YES
            LIBRARY=MACLIB,DSN=PROD.LIB.MACLIB
            LIBRARY=MACLIB,OPEN=YES
            SNAPCLASS=Z
            XUSER=MVST,TEST1,PROD1
            /*
            //

  In this example assume the LIBRARIAN will run on system MVSP.
       The "changed source history" is active
       The LIBRARIAN system name is "PRODUCTION LIBRARY"
       The LIBRARIAN would use VTAM APPLID PRODLIB and TCP/IP port 4321.
       There are two libraries called SOURCE and MACLIB.
       The VSAM cluster name for library SOURCE is "PROD.LIB.SOURCE"
       The VSAM cluster name for library MACLIB is "PROD.LIB.MACLIB"
       Both libraries SOURCE and MACLIB would be OPENed at start up.
       SNAP commands would create SNAP dumps to LIBSNAP with SYSOUT
         class Z.
       If user TEST1 connects from system MVST, the LIBRARIAN will
         use PROD1 for their user id.

  Both libraries need to be initialized with LIBINIT before
  starting up the LIBRARIAN.







./ ADD NAME=LIBSUB   0100-09054-09054-0229-00078-00078-00000-DOC
LIBSUB is a subroutine that is "CALLABLE" from programs that
use standard subroutine linkage.

LIBSUB may be called by either 24-bit or 31-bit callers.
LIBSUB is re-entrant.

     Parmeter list:
            Library APPLID          8 characters
            Library name            8 characters
            Member name             8 characters
            Member version          2 bytes, binary
            Function                8 characters
            User dataset           44 characters
            User member             8 characters
            Return code             1 character
            Message 1              80 characters
            Message 2              80 characters
            Message 3              80 characters
            Message 4              80 characters
            Message 5              80 characters



Sample parameter list in assembler language:

       PARM_LIST         DS       0c
       PARM_APPL         DS       CL8
       PARM_LIB_NAME     DS       CL8
       PARM_MEM_NAME     DS       CL8
       PARM_MEM_VERSION  DS       XL2
       PARM_FUNCTION     DS       CL8
       PARM_USER_DSN     DS       CL44
       PARM_USER_MEMBER  DS       CL8
       PARM_RETURN_CODE  DS       C
       PARM_MSG          DS      0CL80
       PARM_MSG_1        DS       CL80
       PARM_MSG_2        DS       CL80
       PARM_MSG_3        DS       CL80
       PARM_MSG_4        DS       CL80
       PARM_MSG_5        DS       CL80



Sample parm list in COBOL
       01 LIBRARIAN_PARM_LIST.
          05 LIBRARIAN_APPL        PIC X(8).
          05 LIBRARIAN_LIBRARY     PIC X(8).
          05 LIBRARIAN_MEMBER      PIC X(8).
          05 LIBRARIAN_VERSION     PIC S9(4) COMP.
          05 LIBRARIAN_FUNCTION    PIC X(4).
          05 LIBRARIAN_USER_DSN    PIC X(44).
          05 LIBRARIAN_USER_MEMBER PIC X(8).
          05 LIBRARIAN_RETURN_CODE PIC X.
          05 LIBRARIAN_MSG_1       PIC X(80).
          05 LIBRARIAN_MSG_2       PIC X(80).
          05 LIBRARIAN_MSG_3       PIC X(80).
          05 LIBRARIAN_MSG_4       PIC X(80).
          05 LIBRARIAN_MSG_5       PIC X(80).


Example of calling SUBLIB from assembler:
          MVC   PARM_APPL,=CL8'PRODLIB'
          MVC   PARM_LIB_NAME,=CL8'SOURCE'
                  .
                  .
                  .
          MVC   PARM_FUNCTION,=CL8'GET MEMS'
          LA    R1,PARM_LIST
          L     R15,=V(LIBSUB)
          BASSM R14,R15




Example of calling SUBLIB from COBOL.

          CALL 'LIBSUB' using LIBRARY_PARM_LIST.

./ ADD NAME=LIB2     0100-09054-09054-0229-00030-00030-00000-DOC
/* REXX ------------------------------------------------------------ */
/*                                                                   */
/*    THIS EXEC EXPECTS YOU TO HAVE TSOPLUS.                         */
/*                                                                   */
/*    IF YOU DON'T USE TSOPLUS, YOU WILL NEED TO REMOVE THE          */
/*    "STEPLIBX" STATEMENTS AND ALLOCATE THE LOADLIB IN YOUR         */
/*    TSO LOGON PROC OR POSSIBLY VIA A ISPLLIB?                      */
/*                                                                   */
/*                                                                   */
/* ----------------------------------------------------------------- */

 /* TRACE R  */

PARSE UPPER ARG APPL LIB

ADDRESS TSO FREE "FI(LIBTEMP)"
ADDRESS TSO ALLOC "FI(STEPLIBX) DA('.......LIB.LOADLIB'  ***) SHR REUSE"
SAVELIBX = TSOPEXT

ADDRESS TSO ISPEXEC "LIBDEF ISPPLIB DATASET ID('.......LIB.ISPPLIB')"

ADDRESS TSO ISPEXEC "SELECT PGM(LIBTSO) PARM(" || APPL LIB || ")"

IF SAVELIBX = '' THEN
   ADDRESS TSO FREE "FI(STEPLIBX)"
ELSE
   ADDRESS TSO ALLOC "FI(STEPLIBX) DA(" SAVELIBX ") SHR REUSE"

ADDRESS TSO FREE "FI(LIBTEMP)"
EXIT (0)
./ ADD NAME=PRIMARY  0100-09054-09054-0229-00054-00054-00000-DOC
Primary commands

On "Available libraries display"

STATus displays the active users and the status of the libraries.







On the member display:

A      Administration
Admin

D      Delete
DEL
DELETE

I      Check in
IN

J      Submit member as a batch job
JOB
SUB
SUBMIT

L      Locate (scroll to a member)
LOCATE

O      Check out a member
OUT

S      Select (view details) of a member
SEL
SELECT


STATus displays the active users and the status of the libraries.

V      View (get a copy of a member)
View





For example on the command line,
  "JOB IEFBR14" would submit member IEFBR14.

Note:  For command line, the highest version of a member is used.

./ ADD NAME=USER     0100-09054-09054-0229-00317-00317-00000-DOC
              General info type stuff
Member identification is made up of two parts, the NAME and VERSION.
You may have mutliple versions (more than two) of the same member.
Any member/version may be CHECKED IN and CHECKED OUT.

When creating a new member, the VERSION will be forced to 1.

To make a new version of an existing member, use the 'X' line
command.

Only the highest (or only) version of a member may be deleted.
If you want to delete all versions of a member, delete them one
at a time in reverse version order.

Optionally, when the LIBRARIAN server is started up, a "changed
member history" file may be kept.  Any time a member is CHECKED IN
or DELETEd, the existing member's source will be written to this
history file.  The history file may be used to recover source
to a known date and time.

To use the LIBRARIAN, start up the LIBRARIAN SPF interface.
  . This may be assigned to an option on an SPF menu
  . if LIBRARIAN is not a menu option, enter the name given
    to the REXX EXEC when the LIBRARIAN was installed.


You should see a list of the libraries available and the OPEN/CLOSE
state of each library.

The list is scrollable.  You may need to scroll down to find the
library you need.  Only libraries that are OPEN may be selected.

There is a line command area to the left of each library.

Use the TAB keys to tab down to the library you need and enter a
non-blank character in the line command.  Press ENTER.  You will
get a list of members in the library.  Only the highest version
number of a member will be displayed.  If you want all versions
of members to be listed, use line command 'A' (for all) or 'F'
(for full) list.







You should get a list of members in the library you selected.
You should also see message LIBTDMEM05 that tells you how many
members there are in this library.  The heading will tell you
which library you have selected.

Information displayed per member is the member name, version,
owner, size and status.  The remainder of the information depends
on the member's CHECK IN/CHECK OUT status.  If the member is
in CHECK IN status, the time, date, and last user that CHECKED IN
the member is displayed.  If the member is in CHECKED OUT state,
the time, date, user that last CHECKED OUT the member is displayed.
Once you have performed an operation on a member, the CHECK IN/
CHECK OUT information is over-layed with a message to remind you
what operations you have last performed on which members.
The "R" line command will restore the CHECK IN/CHECK OUT information.

The list of members is scrollable.
There is a line command area to the left side of each member.
Use the TAB keys to move the cursor next to the member you need.

Line commands available are:

       A       Administer check in/check out stats of a member
       B       Browse a member
       D       Delete a member
       I       Check in a member
       J       Submit a member as a batch job
       L or S  Display detail information for a member
       O       Check out a member
       R       Restore the CHECK IN/CHECK OUT information
       U       Undo (reset CHECK-OUT to CHECK-IN)
       V       View a member
       X       Create a new version of a member


To create a new member, enter NEW in the primary command area.


You can return to the list of available libraries by pressing PF3.



You can see who is using the LIBRARIAN by entering "STAT" or
"STATUS" on the primary command area on the library list display.
The information displayed is scrollable.  The STATUS display
includes information about the users that are currently connected
and statistics about the libraries.






            Administer check in/check out status
At times you may need to change the check-in/check-out status
of a member.  Or you may need to change who has a member checked
out.  For example someone may check out a member and while they
have it checked out they go on vacation or leave the company.
The "A" option will let you change the status or change who has
the member checked out.  If you change the status to check-out,
the librarian changes the 'last check out' time stamp to the
current time and date.  The librarian makes no checks to validate
the user id you enter... that is it does not call RACF, etc to
verify the user is defined to RACF.





                 CHECK OUT a member
Enter "O" in the line command for the member.  Press ENTER.

Only members in CHECKED IN state can be CHECKED OUT.

The next screen will show you the library, member, and VERSION
of the member you are CHECKing OUT.  The LIBRARIAN is going to
make a copy of the member into a data set or PDS member that you
provide and change the STATUS to CHECKED OUT.  Enter the name
of the dataset where you want the member to be written.  If the
dataset is sequential, leave the member name blank.  If the
dataset is a PDS, enter the member name (it does not have to be
the same as the name in the LIBRARIAN library).  If the data set
or PDS member already exists, you have to enter "Y" or "YES"
in "Replace/over-write".

Press ENTER.

The LIBRARIAN will make a copy of the member into the dataset or
PDS member you specified.  The member's status will be changed
to CHECKED OUT.  The time and date and your ID will be recorded
in the last check-out information.  You will be returned to the
member list display.

Until you CHECK IN the member no one else (even you) will be
allowed to CHECK OUT the member.  Only the user that has a member
CHECKED OUT can CHECK IN that member.  Members may be VIEWed
or BROWSEd at all times.








                 CHECK IN a member
Enter "I" in the line command for the member.  Press ENTER.

You cannot CHECK IN a member unless you have the member
CHECKED OUT.

The next screen will show you the library, member, and VERSION
of the member you are CHECKing IN.  The LIBRARIAN is going to
replace the source for this member.  The LIBRARIAN reads the
sequential dataset or PDS member you specify, compresses the
data and stores it in the library.  The time, date, and your
user id will be recorded in the last check-in information.
The size will also be updated.

Enter the name of the data set that has the source for the
member you are CHECKING IN.  If the dataset is a sequential
file, leave the member name blank.  If the dataset is a PDS,
enter the member name.  The member name does not have to be
the same name as the LIBRARIAN's name.

At the bottom of the screen are the comments that have been
previously recorded for this member.  You may over-type the
comments.

Press ENTER.

The LIBRARIAN will read your source dataset or PDS member
and store it in the library.  The time, data, and your user
id will be recorded in the last check-in information.

The documentation in the library will also be updated with
the information you have entered.

You will then be returned to the member display screen.
The CHECK IN/CHECK OUT information will be overlayed with
a message to remind you of the last operation you have
performed on this member.






                 BROWSE a member
Enter "B" in the line command for the member.  Press ENTER.

The source will be returned and written to a temporary work file
and SPF browse will be called.  The CHECK IN/CHECK OUT status
will not be updated.  You may BROWSE a member regardless of
the member's CHECK IN/CHECK OUT state.  You may use any of the
functions of SPF BROWSE to search, scroll, etc.  When you end
the BROWSE, the member list will be re-displayed.





                 VIEW a member
Enter "V" in the line command for the member.  Press ENTER.

The next screen will show you the library, member, and VERSION
of the member you are VIEWing.  The LIBRARIAN is going to make
a copy of the member into a dataset or PDS member that you
provide.  The CHECK IN/CHECK OUT status will not be updated.
VIEWing a member lets you review the source for a member without
having to CHECK OUT the member.  You can VIEW a member regardless
of the member's CHECK IN/CHECK OUT state.



           Displaying the detail information for a member
Enter "L" or "S" in the line command for the member.  Press ENTER.

The next screen will show you the library, member, and version
of the member you are displaying.  Under "Member status" is the
member's owner (userid of the user that created the member),
CHECK IN/CHECK out state, size of the member in records,
number of check-outs, date and time the member was created,
date, time, and id of the last user that last checked in the member,
and the date, time, and user that last check out the member.
Under "Documentation" is up to five lines of any comments that
have been previously entered as documenation for the member.
You may over-type this information if you wish.  If you update
the comments, press ENTER to have the LIBRARIAN update the
documentation information.

Press PF3 to return to the member list display.






                 DELETE a member
Only the highest version of a member can be deleted.  If multiple
versions of a member exist, delete them one at time in reverse
numerical sequence.

Enter "D" in the line command for the member.  Press ENTER.

The next screen will show you the library, member, and version
of the member you are DELETEing.

You must enter "Y" or "YES" in the "Confirm deletion".

Press ENTER.

If the LIBRARIAN's "Changed source history" is active, the
existing member's source will be written to the history file
before the member is deleted.  This history file could be used
to recover a member to a known date and time.

When a member is deleted, the source and all documentation/comments
are deleted.





                 Create new members
Enter "NEW" on the primary command line.

Press ENTER.

The next screen will display the library name you are using.
The member name will be blank and the version will be forced
to 1.  Enter the name you want for this member inside the
LIBRARIAN.  Enter the name of the dataset or PDS that has the
your source for this new member.  If your dataset is a PDS,
enter the name of the member.  The name used for the LIBRARIAN
name does not have to be the same as the name in your PDS.
If you want to save any comments or documentation with this
new member, enter them in the area below the "Documentation".

Press ENTER.

The LIBRARIAN will create the new member, copy your source,
make you the member's owner, record the time and date when
the member was created, record the member's size, and set
the status to CHECKED IN.



                 Undo
At times a member may be 'checked out', but never updated.
Rather than having to 'check-in' the member, the user that
has the member checked-out can 'undo' the check-out status.
Only the user that has the member checked-out can 'undo'
the status.  Undo is less overhead than check-in.



                 Submit a member as a batch job
The librarian may be used to control JCL.  The "J" line command
will cause the librarian to submit the member as a batch JOB.
The librarian is network based... the job is submitted by the
librarian STC, not the by the user.  That is if the user is logge-in
on system A and the librarian STC is running on system B, the job
will be submitted by the librarian STC on system B.  Members can be
any state (checked-in or checked-out).

You can enter "JOB member" or "SUBmit member" as a primary command.
This will cause the librarian to submit the highest version.
There is no provision for specifying a version with the command
line "JOB/SUBmit" command.
./ ADD NAME=UTIL0001 0100-09054-09054-0229-00060-00060-00000-DOC
UTIL0001  Load a member directly to a library

JCL
       //.......  JOB .............
       //UTIL0001 EXEC PGM=UTIL0001
       //STEPLIB  DD DSN=..................,DISP=SHR
       //SYSPRINT DD SYSOUT=*
       //LIB      DD DSN=...library cluster...,DISP=SHR
       //SYSIN    DD *

           Your control statements here

       /*
       //

Control statements
Control statements for this utilitiy are a bit confusing.  To allow
all 80 columns to be used for data, the method used is to have the
control statment keyword on one statement and the data for that
keyword on the next statement.  The exception being the SOURCE
statement.  All records after the SOURCE statement are considered
source for the member being loaded.  Only one member may be loaded
per execution of this utility.

The control statement keywords are:
  MEMBER
  DESCRIPTION
  SOURCE

There is no provision to specify a VERSION, VERSION is hard-set to 1.

Example:
       MEMBER
       MEMBER1
       DESCRIPTION
       MEMBER1 DESCRIPTION LINE 1
       DESCRIPTION
       MEMBER2 DSECRIPTION LINE 2
       SOURCE
       LINE 1 OF SOURCE
       LINE 2 OF SOURCE
       LINE 3 OF SOURCE
       LINE 4 OF SOURCE
       LINE 5 OF SOURCE
       LAST LINE OF SOURCE

This would create a member called MEMBER1.
There would be two lines of description that would say:
    MEMBER1 DESCRIPTION LINE 1
    MEMBER2 DSECRIPTION LINE 2
There would be six lines of source:
    LINE 1 OF SOURCE
    LINE 2 OF SOURCE
    LINE 3 OF SOURCE
    LINE 4 OF SOURCE
    LINE 5 OF SOURCE
    LAST LINE OF SOURCE

This program is not very "smart"... there is limited error checking.
Be sure you know what you're doing before using this utility.
./ ADD NAME=UTIL0002 0100-09054-09054-0229-00013-00013-00000-DOC
UTIL0002  Print all members of a library

JCL
       //.......  JOB .............
       //UTIL0002 EXEC PGM=UTIL0002
       //STEPLIB  DD DSN=..................,DISP=SHR
       //SYSPRINT DD SYSOUT=*
       //LIB      DD DSN=...library cluster...,DISP=SHR
       //


Each member will start on a new page.  The member's name and version
will be printed on the heading on each page.
./ ADD NAME=UTIL0003 0100-09054-09054-0229-00024-00024-00000-DOC
UTIL0003  Convert a member to compressed form

JCL
       //.......  JOB .............
       //UTIL0003 EXEC PGM=UTIL0003
       //STEPLIB  DD DSN=..................,DISP=SHR
       //SYSUT1   DD DSN=... source .......,DISP=SHR
       //SYSUT2   DD DSN=... compressed ...,DISP=SHR
       //


The data in the source file (SYSUT1) will be read and
compressed.  The data written to SYSUT2 will be the
same as is recored by the LIBRARIAN.

This utility calls exit LIBUX01 in the same manner as
the LIBRARIAN.  You can use this utility to verify
that the compression algorithem you choose is producing
the correct results.

SYSUT1 must have RECFM F or FB and LRECL 80.

SYSUT2 will be VB, LRECL 8000, BLKSIZE 8004.

./ ADD NAME=UTIL0004 0100-09054-09054-0229-00011-00011-00000-DOC
UTIL0004  Detail library status report

JCL
       //.......  JOB .............
       //UTIL0004 EXEC PGM=UTIL0004
       //STEPLIB  DD DSN=..................,DISP=SHR
       //LIB      DD DSN=..library cluster..DISP=SHR
       //SYSPRINT DD SYSOUT=*
       //


./ ADD NAME=UTIL0005 0100-09054-09054-0229-00030-00030-00000-DOC
UTIL0005  Create a backup of all or specified members in
          'EXPORT' format
JCL
       //.......  JOB .............
       //UTIL0005 EXEC PGM=UTIL0005
       //STEPLIB  DD DSN=..................,DISP=SHR
       //SYSPRINT DD SYSOUT=*
       //LIB      DD DSN=...library vsam cluster...,DISP=SHR
       //SYSUT2   DD DSN=...exported members.......,DISP=SHR
       //SYSIN    DD *
            .
          Your control statements here
            .
       //


ALL or specified members will be written to SYSUT2 in LIBRARIAN
"EXPORT" format.

Control statements:
mmmmmmmm[,vvvv]

mmmmmmmm is the member name
vvvv is the member version.  If omitted, version defaults to 1.

If there are no control statements in the SYSIN file, all
members will be EXPORTed.

The SYSUT2 dataset will have RECFM=VB, LRECL=8000, BLKSIZE=8004.

./ ADD NAME=UTIL0006 0100-09054-09054-0229-00123-00123-00000-DOC
UTIL0006  Restore members from an 'EXPORT' file

JCL
       //.......  JOB .............
       //UTIL0006 EXEC PGM=UTIL0006
       //STEPLIB  DD DSN=..................,DISP=SHR
       //SYSPRINT DD SYSOUT=*
       //LIB      DD DSN=...library vsam cluster...,DISP=SHR
       //SYSUT1   DD DSN=...export file ...........,DISP=SHR
       //SYSIN    DD *
            .
          Your control statements here
            .
       //


Restore all or specified members of from a LIBRARIAN "EXPORT" file.
The library is not "cleared" by this utility.  Any members in the
library that are not also in the export file will not be affected.
That is if member ABC exists in the library and is not in the
export file (SYSUT1), member ABC will still be unchanged in the
library.





Control statements:

RESTORE mmmmmmmm[,vvvv]

    mmmmmmmm is the member name
    vvvv is the member version.  If omitted, version defaults to 1.



REPLACE








If no RESTORE statements are specfied, all members will be restored.

If a member already exists in the library it will not be
overwritten unless the REPLACE control statement is specified.





Examples:

       //.......  JOB .............
       //UTIL0006 EXEC PGM=UTIL0006
       //STEPLIB  DD DSN=..................,DISP=SHR
       //SYSPRINT DD SYSOUT=*
       //LIB      DD DSN=...library vsam cluster...,DISP=SHR
       //SYSUT1   DD DSN=...export file ...........,DISP=SHR
       //SYSIN    DD *
       //
   All members in the export file will be restored if they
   do not already exist in the library.






       //.......  JOB .............
       //UTIL0006 EXEC PGM=UTIL0006
       //STEPLIB  DD DSN=..................,DISP=SHR
       //SYSPRINT DD SYSOUT=*
       //LIB      DD DSN=...library vsam cluster...,DISP=SHR
       //SYSUT1   DD DSN=...export file ...........,DISP=SHR
       //SYSIN    DD *
       RESTORE ABCDEFG
       //
   Member abcdefg version 1 will be restored if it is not
   already in the library.






       //.......  JOB .............
       //UTIL0006 EXEC PGM=UTIL0006
       //STEPLIB  DD DSN=..................,DISP=SHR
       //SYSPRINT DD SYSOUT=*
       //LIB      DD DSN=...library vsam cluster...,DISP=SHR
       //SYSUT1   DD DSN=...export file ...........,DISP=SHR
       //SYSIN    DD *
       REPLACE
       //
   All members found in the export file will be restored
   to the library.  Any members in the export file that
   are already in the library will replace the existing
   member(s).






       //.......  JOB .............
       //UTIL0006 EXEC PGM=UTIL0006
       //STEPLIB  DD DSN=..................,DISP=SHR
       //SYSPRINT DD SYSOUT=*
       //LIB      DD DSN=...library vsam cluster...,DISP=SHR
       //SYSUT1   DD DSN=...export file ...........,DISP=SHR
       //SYSIN    DD *
       RESTORE ABCDEFG,1
       RESTORE WXYZ,3
       REPLACE
       //
   Member ABCDEFG version 1, and member WXYZ version 3
   will be restored from the export file.  If either or
   both members already exist in the library, they will
   be replaced.
./ ADD NAME=UTIL0007 0100-09054-09054-0229-00018-00018-00000-DOC
UTIL0007  Load members of a PDS to a library

JCL
       //.......  JOB .............
       //UTIL0007 EXEC PGM=UTIL0007
       //STEPLIB  DD DSN=..................,DISP=SHR
       //SYSPRINT DD SYSOUT=*
       //LIB      DD DSN=...library vsam cluster...,DISP=SHR
       //SYSUT1   DD DSN=...PDS to convert.........,DISP=SHR
       //


All members of the PDS will be loaded to the library.  All members
will have version set to 1.  All members status will be set to
'checked in'.

Any members that have names that already exist in the library will
not replace the existing member(s).
