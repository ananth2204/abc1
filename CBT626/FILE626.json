{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012506000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE626.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE626.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x08'", "DS1TRBAL": "b'd\\xac'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\x8e\\x00\\x0c\\x04\\x8f\\x00\\x00\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04<\\x00\\x00\\x01\\x03\\x16?\\x01\\x03\\x16?\"\\x01\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf0@@@'", "ispf": {"version": "04.60", "flags": 0, "createdate": "2003-06-12T00:00:00", "modifydate": "2003-06-12T22:01:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-460"}, "text": "REGULAR CBT TAPE - VERSION 460    FILE:  626\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT460.FILE626\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    3120    PO\n\n   PDS117I 9 MEMBERS COUNTED; CUMULATIVE SIZE IS 815 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   06/12/03    22:01:34    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x12\\x00\\x11\\x01\\x03\\x11O\\x01\\x03\\x14?\\t\\x16\\x00\\xa5\\x008\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.18", "flags": 0, "createdate": "2003-04-24T00:00:00", "modifydate": "2003-05-23T09:16:11", "lines": 165, "newlines": 56, "modlines": 0, "user": "TS0710"}, "text": "FUNCTIONS - CBT file 626\n=========\n1. JI - Display JES2 Available Initiators\n2. EN - Display dataset ENQs\n3. CSA - Display common storage usage\n\n================================================================================\n================================================================================\n================================================================================\n\n1) JI - Displays all AVAILABLE JES2 Initiators. By Class and by name.\n\nFormat of call : 'TSO JI'\n\nContents of this CBT entry consist of :\n=====================================\n1. $DOC   - This document\n2. JI     - A REXX that displays available JES2 initiators\n\nInstall Instructions\n====================\n1. Copy REXX 'JI' to an EXEC dataset. If JI is already used, change its name\n   to something else.\n\nUSE Instructions\n================\nExamples of call\n\n1. \"TSO JI\" or \"JI\" if placed in the ISPF COMMAND Table.\n\nSAMPLE \"TSO JI\" results\n=======================\n\n   (SYSA)                    AVAILABLE INITIATORS            05/06/03  14:25:10\n   Name Classes    Name CLasses    Name Classes    Name Classes    Name Classes\n ==============================================================================\n    P2   SE345      P3   SE345      P4   SE534      P5   SE534      P6   Q\n    P7   Q          P9   L          PA   L          PB   L          PC   L\n    PF   M          PG   M          PH   M          PI   M          PJ   M\n    PL   M          PM   M          PN   8          PO   N          PP   U\n    A1   H          A2   H          B1   P          B2   P          B3   O\n    C1   F          C2   F          C3   Z          H1   A5         H4   A5\n    I4   B          I5   B          I6   G          I7   G          M1   G\n    M3   P\n ==============================================================================\n (61) Available Classes Follow :\n AABBBEEEEFFFGGGHHLLLLLMMMMMMMMNOPPPQQSSSSUUZ12333344445555558\n\n================================================================================\n================================================================================\n================================================================================\n\n2) EN - Displays all ENQs against a dataset name.\n\nFormat of call : First, issue 3.4 using any hlq; then 'EN' line cmd on any entry\n\nContents of this CBT entry consist of :\n=====================================\n1. $DOC   - This document\n2. TSOENQ - ASM program that does the actual work\n3. ASMENQ - Assemble & link TSOENQ\n4. EN     - A REXX that displays those ENQUEUED against a dataset\n\nInstall Instructions\n====================\n1. Copy REXX 'EN' to an EXEC dataset. If EN is already used, change its name\n   to something else.\n2. Copy TSOENQ to a source lib\n3. Modify ASMENQ :\n   - insert a JOB card\n   - have variable SRCLIB point to your source dsn\n   - have variable LODLIB point to an AUTHORIZED loadlib\n   - Submit ASMENQ job\n4. TSOENQ is an AUTHORIZED program. Not only must it live in an authorized\n   load library but also in TSO table IKJTSOxx must have an entry for it in :\n   AUTHPGM NAMES(               /* AUTHORIZED PROGRAMS */      +.\n\nUSE Instructions\n================\nExamples of call\n\n1. =3.4 ISPF using any HLQ (or portion of) you want\n2. EN line command against any or all datasets listed. Can use \"=\" after the\n   first EN to speed the process up a bit.\n\nSAMPLE \"EN\" results\n===================\n(3.4) screen 1st. In this ex. =3.4 against \"CBC\".\n\nDSLIST - Data Sets Matching CBC*\nCommand ===>\n\nCommand - Enter \"/\" to select action\n                                                      Message             Volume\n--------------------------------------------------------------------------------\nEN       CBC.SCBCCMP                                                      ABC001\n=        CBC.SCBCDOC                                                      ABC002\n=        CBC.SCBCIMG                                                      ABC003\n\n\nThe results appear thusly .....\n\n\nCBC.SCBCCMP   (SSEOR3)\n----------------------\nLLA        SHR   SYSDSN     (SYSB)\nXCFAS      SHR   SYSDSN     (SYSK)\nLLA        SHR   SYSDSN     (SYSK)\nXCFAS      SHR   SYSDSN     (SYSU)\nLLA        SHR   SYSDSN     (SYSU)\nCBC.SCBCDOC   (SSEOR3)\n----------------------\n*== NO ENQUEUES ==*\nCBC.SCBCIMG   (SSEOR3)\n----------------------\nCR2928     SHR   SYSDSN     (SYSB)\nTS3439     SHR   SYSDSN     (SYSX)\n\n================================================================================\n================================================================================\n================================================================================\n\n3) CSA - Displays CSA/SQA information\n\nFormat of call : 'TSO CSA'\n\nContents of this CBT entry consist of :\n=====================================\n1. $DOC   - This document\n2. CSA    - A REXX that displays common storage use\n\nInstall Instructions\n====================\n1. Copy REXX 'CSA' to an EXEC dataset. If CSA is already used, change its name\n   to something else.\n\nUSE Instructions\n================\nExamples of call\n\n1. \"TSO CSA\" or \"CSA\" if placed in the ISPF COMMAND Table.\n\nSAMPLE \"TSO CSA\" results\n=======================\n\n (SYSB)       CSA/SQA Statistics  05/23/03 09:14:12\n=======================================================\n CSA size           2711552     2648 K    2.6 M\n CSA used           1231032     1202 K    1.2 M ( 46 %)\n\n SQA initial        1556480     1520 K    1.5 M\n SQA overflow             0        0 K    0.0 M\n SQA alloc          1556480     1520 K    1.5 M\n SQA used           1276528     1247 K    1.2 M ( 83 %)\n\n ECSA size        172355584   168316 K  164.4 M\n ECSA used         96838104    94568 K   92.4 M ( 57 %)\n\n ESQA initial      21430272    20928 K   20.4 M\n ESQA overflow      4861952     4748 K    4.6 M\n ESQA alloc        26292224    25676 K   25.1 M\n ESQA used         29155416    28472 K   27.8 M (111 %)\n\n CSA/SQA UNALLOC    1572864     1536 K    1.5 M\n REGION SIZE       10485760    10240 K   10.0 M\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$LOADLIB": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x01\\x03\\x16?\\x01\\x03\\x16?!Y\\x00'\\x00'\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-06-12T00:00:00", "modifydate": "2003-06-12T21:59:00", "lines": 39, "newlines": 39, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "@FILE626": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04<\\x00\\x00\\x01\\x03\\x16?\\x01\\x03\\x16?\"\\x01\\x00\\x12\\x00\\x12\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf0@@@'", "ispf": {"version": "04.60", "flags": 0, "createdate": "2003-06-12T00:00:00", "modifydate": "2003-06-12T22:01:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "CBT-460"}, "text": "//***FILE 626 is from Bob Glover and contains several handy REXX    *   FILE 626\n//*           execs with an assembler program that one of them      *   FILE 626\n//*           drives.                                               *   FILE 626\n//*                                                                 *   FILE 626\n//*           The EXECs are:                                        *   FILE 626\n//*                                                                 *   FILE 626\n//*       EN     - Display enqueues on a dataset                    *   FILE 626\n//*       JI     - Display non-drained initiators and their         *   FILE 626\n//*                classes.  Runs SDSF in batch in the foreground.  *   FILE 626\n//*       CSA    - Display common storage usage                     *   FILE 626\n//*                                                                 *   FILE 626\n//*           Assembler program:                                    *   FILE 626\n//*                                                                 *   FILE 626\n//*       TSOENQ - Assembler program which gets the data for the    *   FILE 626\n//*                EN exec to display.                              *   FILE 626\n//*                                                                 *   FILE 626\n//*       email:  Bob.Glover@fnf.com                                *   FILE 626\n//*                                                                 *   FILE 626\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ASMENQ": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00'\\x01\\x03\\x12o\\x01\\x03\\x12\\x7f\\t\\x16\\x001\\x001\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-05-06T00:00:00", "modifydate": "2003-05-07T09:16:27", "lines": 49, "newlines": 49, "modlines": 0, "user": "TS0710"}, "text": "//-----  YOUR JOB CARD HERE --------     <== MODIFY\n//*\n//* ASMLK PGM TSOENQ\n//*\n//* ASSEMBLE AND LINK USING PDS INPUT\n//ASMLK  PROC  AREGION=2M,\n//             LREGION=2M,\n//             UNIT='SYSALLDA',\n//             CLASS='*',\n//             SYSLIB1='SYS1.MACLIB',\n//             SYSLIB2='SYS1.MODGEN',\n//             SRCLIB=TEMPNAME,\n//             LODLIB=TEMPNAME,\n//             RENT='NO',  /* ENTER RENT=NO FOR NON REENTRANT */\n//             SRCMOD='TEMPNAME',\n//             LODMOD='TEMPNAME'\n//*\n//ASM    EXEC  PGM=IEV90,PARM='NODECK,OBJECT,&RENT.RENT',\n//             REGION=&AREGION\n//SYSLIB   DD  DSN=&SYSLIB1.,DISP=SHR\n//         DD  DSN=&SYSLIB2.,DISP=SHR\n//SYSIN    DD  DSN=&SRCLIB.(&SRCMOD.),DISP=SHR\n//SYSUT1   DD  UNIT=(&UNIT.,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  DUMMY\n//SYSPRINT DD SYSOUT=&CLASS.,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1))\n//SYSLIN   DD  DISP=(,PASS),UNIT=&UNIT.,SPACE=(CYL,(5,5,0)),\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//*\n//LNK  EXEC  PGM=IEWL,\n//  PARM='MAP,LET,LIST,NCAL,&RENT.RENT,AMODE=24,RMODE=24',\n//             REGION=&LREGION.,COND=(0,LT,ASM)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=&LODLIB.(&LODMOD.),DISP=SHR\n//SYSUT1   DD  UNIT=&UNIT.,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=&CLASS.,DCB=(RECFM=FB,BLKSIZE=3509)\n// PEND\n//*\n//STEP1 EXEC ASMLK,CLASS='*',\n//           RENT='NO',   /* ''=RENT, 'NO'=NON-RENT */\n//           SRCLIB='--YOUR SOURCE LIB--',  <== MODIFY\n//           LODLIB='--YOUR LOAD LIB--',    <== MODIFY\n//           SRCMOD=TSOENQ,\n//           LODMOD=TSOENQ\n//*-------------------------------------\n//LNK.SYSIN  DD *\n  SETCODE AC(1)\n  NAME TSOENQ(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSA": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x04\\x01\\x01\\x14\\x1f\\x01\\x03\\x14/\\x15&\\x00s\\x00\\x0e\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2001-05-21T00:00:00", "modifydate": "2003-05-22T15:26:04", "lines": 115, "newlines": 14, "modlines": 0, "user": "TS0710"}, "text": "/* REXX */\n/*-------------------------------------------------------------------*/\n/* Display CSA/SQA info - formatted                                  */\n/*-------------------------------------------------------------------*/\nCVTSYSAD      = D2x(C2d(Storage(10,4)) + 48)   /* Point to CVTSYSAD */\nCVTECVT       = D2X(C2d(Storage(10,4)) + 140)  /* Point to CVTECVT  */\nCVTSNAME      = D2X(C2d(Storage(10,4)) + 340)  /* Point to CVTSNAME */\nSysid         = strip(Storage(CVTSNAME,8))     /* sysid             */\nuid           = sysvar(sysuid)                 /* user id           */\nCVTGDA        = D2x(C2d(Storage(10,4)) + 560)  /* Point to CVTGDA   */\nGDACSASZ      = d2x(c2d(Storage(CVTGDA,4)) + 112)   /* CSA size */\nCSA           = c2d(Storage(GDACSASZ,4))\nCSA           = format(CSA,10)\nGDAECSAS      = d2x(c2d(Storage(CVTGDA,4)) + 128)   /* ECSA size */\nECSA          = c2d(Storage(GDAECSAS,4))\nECSA          = format(ECSA,10)\nGDAECSARE     = d2x(c2d(Storage(CVTGDA,4)) + 132)   /* CSA/SQA LEFT */\nUNALLOC       = c2d(Storage(GDAECSARE,4))\nUNALLOC       = format(UNALLOC,10)\nGDASQASZ      = d2x(c2d(Storage(CVTGDA,4)) + 148)   /* SQA size */\nSQA           = c2d(Storage(GDASQASZ,4))\nSQA           = format(SQA,10)\nGDAESQAS      = d2x(c2d(Storage(CVTGDA,4)) + 156)   /* ESQA size */\nESQA          = c2d(Storage(GDAESQAS,4))\nESQA          = format(ESQA,10)\nGDAPVTSZ      = d2x(c2d(Storage(CVTGDA,4)) + 164)   /* PRIVATE Size */\nPRIVATE       = c2d(Storage(GDAPVTSZ,4))\nPRIVATE       = format(PRIVATE,10)\nGDACSAALLOC   = d2x(c2d(Storage(CVTGDA,4)) + 432)   /* CSA Getmained */\nCSALLOC       = c2d(Storage(GDACSAALLOC,4))\nCSALLOC       = format(CSALLOC,10)\nGDAECSAALLOC  = d2x(c2d(Storage(CVTGDA,4)) + 436)   /* ECSA Getmained */\nECSALLOC      = c2d(Storage(GDAECSAALLOC,4))\nECSALLOC      = format(ECSALLOC,10)\nGDASQAALLOC   = d2x(c2d(Storage(CVTGDA,4)) + 440)   /* SQA Getmained */\nSQALLOC       = c2d(Storage(GDASQAALLOC,4))\nSQALLOC       = format(SQALLOC,10)\nGDAESQAALLOC  = d2x(c2d(Storage(CVTGDA,4)) + 444)   /* ESQA Getmained */\nESQALLOC      = c2d(Storage(GDAESQAALLOC,4))\nESQALLOC      = format(ESQALLOC,10)\nGDACSACONV    = d2x(c2d(Storage(CVTGDA,4)) + 448)   /* SQA Overflow */\nSQAOVER       = c2d(Storage(GDACSACONV,4))\nSQAOVER       = format(SQAOVER,10)\nGDAECSACONV   = d2x(c2d(Storage(CVTGDA,4)) + 452)   /* ESQA Overflow */\nESQAOVER      = c2d(Storage(GDAECSACONV,4))\nESQAOVER      = format(ESQAOVER,10)\nCSAPCTX       = (CSALLOC*100/CSA)+0.5\nCSAPCT        = format(CSAPCTX,3,0)\nSQAPCTX       = (SQALLOC*100/SQA)+0.5\nSQAPCT        = format(SQAPCTX,3,0)\nECSAPCTX      = (ECSALLOC*100/ECSA)+0.5\nECSAPCT       = format(ECSAPCTX,3,0)\nESQAPCTX      = (ESQALLOC*100/ESQA)+0.5\nESQAPCT       = format(ESQAPCTX,3,0)\nCSAM          = format(CSA/1024,6)\nSQAM          = format(SQA/1024,6)\nECSAM         = format(ECSA/1024,6)\nESQAM         = format(ESQA/1024,7)\nUNALLOCM      = format(UNALLOC/1024,7)\nPRIVATEK      = format((PRIVATE/1024),7,0)\nCSAUM         = format((CSALLOC/1024),6,0)\nSQAUM         = format((SQALLOC/1024),6,0)\nESQAUM        = format((ESQALLOC/1024),7,0)\nECSAUM        = format((ECSALLOC/1024),6,0)\nSQAINIT       = format(SQA-SQAOVER,10)\nSQAIM         = format(SQAINIT/1024,6)\nESQAINIT      = format(ESQA-ESQAOVER,10)\nESQAIM        = format(ESQAINIT/1024,6)\nSQAOM         = format(SQAOVER/1024,6)\nESQAOM        = format(ESQAOVER/1024,6)\nCSAMB         = format(CSAM/1024,4,1)\nCSAUMB        = format(CSAUM/1024,4,1)\nSQAIMM        = format(SQAIM/1024,4,1)\nSQAOMM        = format(SQAOM/1024,4,1)\nSQAMM         = format(SQAM/1024,4,1)\nSQAUMM        = format(SQAUM/1024,4,1)\nECSAMM        = format(ECSAm/1024,4,1)\nECSAUMM       = format(ECSAUM/1024,4,1)\nESQAIMM       = format(ESQAIM/1024,4,1)\nESQAOMM       = format(ESQAOM/1024,4,1)\nESQAMM        = format(ESQAM/1024,4,1)\nESQAUMM       = format(ESQAUM/1024,4,1)\nUNALLOCMM     = format(UNALLOCM/1024,4,1)\nPRIVATEM      = format((PRIVATEK/1024),4,1)\ncall msg('OFF')\nADDRESS TSO\n\"DELETE ('\"UID\".\"SYSID\".CSA')\"\n\"FREE FI(SYSPRINT)\"\n\"ALLOC FI(SYSPRINT) DA('\"UID\".\"SYSID\".CSA') NEW CATALOG\n       SPACE(3,1) TRACKS RECFM(F B) LRECL(80) BLKSIZE(27920)\"\n/*===================================================================*/\ncsa.1 =' '\ncsa.2 =' ('SYSID')       CSA/SQA Statistics '  date('u')  time()\ncsa.3 ='======================================================='\ncsa.4 =' CSA size        'CSA '  'CSAM 'K' CSAMB' M'\ncsa.5 =' CSA used        'CSALLOC '  'CSAUM 'K' CSAUMB' M ('CSAPCT '%)'\ncsa.6 =' '\ncsa.7 =' SQA initial     'SQAINIT '  'SQAIM 'K' SQAIMM' M'\ncsa.8 =' SQA overflow    'SQAOVER '  'SQAOM 'K' SQAOMM' M'\ncsa.9 =' SQA alloc       'SQA  '  'SQAM  'K' SQAMM' M'\ncsa.10=' SQA used        'SQALLOC '  'SQAUM 'K' SQAUMM 'M ('SQAPCT '%)'\ncsa.11=' '\ncsa.12=' ECSA size       'ECSA '  'ECSAM  'K' ECSAMM 'M'\ncsa.13=' ECSA used       'ECSALLOC'   'ECSAUM 'K' ECSAUMM 'M ('ECSAPCT '%)'\ncsa.14=' '\ncsa.15=' ESQA initial    'ESQAINIT'   'ESQAIM 'K' ESQAIMM' M'\ncsa.16=' ESQA overflow   'ESQAOVER '  'ESQAOM 'K' ESQAOMM' M'\ncsa.17=' ESQA alloc      'ESQA'  'ESQAM 'K' ESQAMM 'M'\ncsa.18=' ESQA used       'ESQALLOC'  'ESQAUM 'K' ESQAUMM 'M ('ESQAPCT '%)'\ncsa.19=' '\ncsa.20=' CSA/SQA UNALLOC 'UNALLOC'  'UNALLOCM 'K' UNALLOCMM 'M'\ncsa.21=' REGION SIZE     'PRIVATE'  'PRIVATEK 'K' PRIVATEM 'M'\n\"EXECIO * DISKW SYSPRINT (STEM csa. FINIS)\"\n\"ISPEXEC BROWSE DATASET('\"UID\".\"SYSID\".CSA')\"\nexit\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EN": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00%\\x01\\x03\\x12o\\x01\\x03\\x12\\x7f\\x15\\x02\\x00\\x0b\\x00\\r\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2003-05-06T00:00:00", "modifydate": "2003-05-07T15:02:25", "lines": 11, "newlines": 13, "modlines": 0, "user": "TS0710"}, "text": "/* REXX */\n/* Display dataset ENQUEUEs */\n/* =3.4 display and enter 'EN' next to it */\nparse arg dsn\nmyid=SYSVAR(SYSUID)\nmsg_status = MSG('OFF')\naddress tso\n\"FREE FI(SYSPRINT)\"\n\"ALLOC DA(*) FI(SYSPRINT) RECFM(F) BLKSIZE(80)\"\nADDRESS TSO \"CALL 'Your.LOADLIB(TSOENQ)' \"dsn\"\"  <============= CHANGE\n\"FREE FI(SYSPRINT)\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JI": {"ttr": 533, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x003\\x01\\x03\\x12o\\x01\\x03\\x13O\\x10U\\x00\\xb3\\x00\\xae\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2003-05-06T00:00:00", "modifydate": "2003-05-14T10:55:33", "lines": 179, "newlines": 174, "modlines": 0, "user": "TS0710"}, "text": "/* REXX */\n/* Display available JES2 initiators */\nmsg_status = MSG('OFF')\nmyid=SYSVAR(SYSUID)\nCVTSNAME      = D2X(C2d(Storage(10,4)) + 340)  /* Point to CVTSNAME */\nSYSID         = strip(Storage(CVTSNAME,8))\nparms='++24,300'\ncall cleanup\ncall alloc\ncall SDSF\ncall read\ncall cull\ncall sort\ncall report\ncall cleanup\nexit\n/*======================== SUB ROUTINES ===============================*/\nCLEANUP:\n  \"FREE DA('\"myid\".JI.ISFIN') DELETE\"\n  \"FREE DA('\"myid\".JI.ISFOUT') DELETE\"\n  \"FREE DA('\"myid\".JI.ISFRPT') DELETE\"\nreturn\n/*===*/\nALLOC:\n  \"ALLOC F(ISFIN) DA('\"myid\".JI.ISFIN') NEW CATALOG UNIT(SYSALLDA)\n            SPACE(1,1) CYL RECFM(F B) BLKSIZE(80) LRECL(80)\"\n   if rc \u00ac= 0 then\n     do\n       say ' 'myid'.JI.ISFIN NOT ALLOCATED \"NEW\" .... Check error'\n       exit\n     end\n  \"ALLOC F(ISFOUT) DA('\"myid\".JI.ISFOUT') NEW CATALOG UNIT(SYSALLDA)\n            SPACE(1,1) CYL RECFM(F B) BLKSIZE(300) LRECL(300)\"\n   if rc \u00ac= 0 then\n     do\n       say ' 'myid'.JI.ISFOUT NOT ALLOCATED .... Check error'\n       exit\n     end\n  \"ALLOC F(ISFRPT) DA('\"myid\".JI.ISFRPT') NEW CATALOG UNIT(SYSALLDA)\n            SPACE(1,1) CYL RECFM(F) BLKSIZE(80) LRECL(80)\"\n   if rc \u00ac= 0 then\n     do\n       say ' 'myid'.JI.ISFRPT NOT ALLOCATED .... Check error'\n       exit\n     end\n  ISFIN.1='INIT'\n  \"EXECIO * DISKW ISFIN (STEM ISFIN. FINIS)\"\n  \"FREE FI(ISFIN)\"\n  \"FREE DA('\"myid\".JI.ISFIN')\"\n  \"ALLOC F(ISFIN) DA('\"myid\".JI.ISFIN') OLD\"\n   if rc \u00ac= 0 then\n     do\n       say ' 'myid'.JI.ISFIN NOT ALLOCATED \"OLD\" .... Check error'\n       exit\n     end\nreturn\n/*===*/\nSDSF:\n  address LINKPGM \"SDSF parms\"\n  if RC \\= 0 then\n    do\n      say 'SDSF RC='rc\n      say 'SDSF error : REXX canceled'\n      exit\n    end\nreturn\n/*===*/\nREAD:\n  \"EXECIO * DISKR ISFOUT (STEM ISF. FINIS)\"\nreturn\n/*===*/\nCULL:\n  i=0\n  lx=0\n  #l=1\n  mydate=date('u')\n  mytime=TIME()\n  li.#l=' '\n  li.#l='   ('SYSID')                    AVAILABLE INITIATORS'\n  li.#l=li.#l || '            'mydate'  'mytime\n  #l=#l+1\n  li.#l='   Name Classes    Name CLasses    Name Classes    Name Classes'\n  li.#l=li.#l || '    Name Classes'\n  #l=#l+1\n  li.#l=' =============================================================='\n  li.#l=li.#l ||'================'\n  #l=#l+1\n  li.#l=' '\n  do x=1 to isf.0\n    if pos('INACTIVE',isf.x) /= 0 then\n      do\n        posinact=pos('INACTIVE',isf.x)\n        posid=posinact-3\n        pospast=posinact+8\n        do y = pospast to pospast+8 by 1\n          if substr(isf.x,y,1) /= ' ' then\n            leave\n        end\n        posclass=y\n        lx=lx+1\n        if lx>5 then\n          do\n            lx=0\n            #l=#l+1\n            li.#l=' '\n          end\n       li.#l=li.#l || '   ' || substr(isf.x,posid,2)\n       li.#l=li.#l || '   ' || substr(isf.x,posclass,8)\n        itemp=substr(isf.x,posclass,8)\n        do y=1 to 8 by 1\n          if substr(itemp,y,1) = ' ' then\n            leave\n          else\n            do\n              i=i+1\n              itab.i=substr(itemp,y,1)\n            end\n        end\n      end\n  end\n  if i=0 then\n    do\n      li.#l=' '\n      #l=#l+1\n      li.#l='***  NO AVAILABLE INITIATORS  ***'\n    end\n  else\n    do\n      #l=#l+1\n      li.#l=' =============================================================='\n      li.#l=li.#l ||'================'\n    end\nreturn\n/*===*/\nSORT:\n  if i=0 then return\n  z=i-1\n  do a=1 to z         /* outer loop */\n    do b=1 to z       /* inner loop */\n      c=b+1\n      if substr(itab.b,1,1) > substr(itab.c,1,1) then\n        do\n          tmp = substr(itab.b,1,1)\n          itab.b = itab.c\n          itab.c = tmp\n        end\n    end\n  end\n  #l=#l+1\n  li.#l=' ('||i||') Available Classes Follow :'\n  #l=#l+1\n  line=' '\n  #out=0\n  do II=1 to I by 1\n    if itab.ii = '' then\n      leave\n    else\n      do\n        line=line || substr(itab.ii,1)\n        #out=#out+1\n        if #out > 78 then\n          do\n            li.#l=line\n            #l=#l+1\n            line = ' '\n            li.#l=line\n            #l=#l+1\n            line = ' '\n            #out=0\n          end\n      end\n  end\n  li.#l=line\nreturn\n/*===*/\nREPORT:\n  \"EXECIO  *  DISKW ISFRPT (STEM li. FINIS)\"\n  \"ISPEXEC BROWSE DATASET('\"myid\".JI.ISFRPT')\"\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOENQ": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x004\\x01\\x03\\x12o\\x01\\x03\\x12o\\x161\\x00\\xe3\\x00\\xe3\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-05-06T00:00:00", "modifydate": "2003-05-06T16:31:34", "lines": 227, "newlines": 227, "modlines": 0, "user": "TS0710"}, "text": "         TITLE 'TSOENQ - LIST DATASET USERS'\n*=====================================================================*\n* THIS PROGRAM REQUIRES A DATASET NAME FROM THE USER. IT SCANS THE    *\n* GRS SERIALIZATION QUEUE FOR HITS ON THIS MINOR NAME.                *\n* ENQUEUES SEARCHED IS : STEP, SYSTEM, SYSTEMS W/IN THE CEC WE EXECUTE*\n* MULTIPLE MACHINES CAN BE SUPPORTED BY USING SCOPE=GLOBAL.           *\n*=====================================================================*\n         SPACE\nTSOENQ   CSECT\n         USING *,R15\n         B     AROUND\n         DC    AL1(23)\n         DC    CL9'&SYSDATE'\n         DC    CL5'&SYSTIME'\nAROUND   DS    0H\n         STM   R14,R12,12(R13)\n         ST    R13,SAVEAREA+4\n         LA    R7,SAVEAREA\n         ST    R7,8(R13)\n         LA    R13,SAVEAREA\n         DROP  R15\n         USING SAVEAREA,R13\n         B     BEGIN\nSAVEAREA DC    18F'0'\nBEGIN    DS    0H\n         L     R1,0(R1)\n         LH    R2,0(R1)                R2 ==> DSN LENGTH\n         BCTR  R2,0\n         STC   R2,MVC1+1               ALTER MOVES\n         STC   R2,MVC2+1               *\n         LR    R3,R2                   MAKE DASHES\n         LA    R3,11(R3)               FLOAT\n         STC   R3,MVC3+1               *\n         LA    R2,1(R2)                MAKE DSN L' REAL\n         ST    R2,DSNL                 SAVE DSNAME L'\nMVC1     MVC   RNAME(0),2(R1)          DSNAME IS MINOR\n* GET 1 MB\n         GETMAIN EC,LV=1024000,A=@MYRIB\n         LTR   R15,R15                 DID WE GET IT ?\n         BZ    MAINOK                  YES\n         BAL   R11,MAINERR             NO..ABEND W/ MSG\nMAINOK   EQU   *\n*\n         OPEN  (SYSPRINT,(OUTPUT))\n         LOCATE CAMLST                 FIND DSNAME LOCATION\n         LTR   R15,R15                 OK ?\n         BZ    MVC2                    YES..\n         MVC   VOLSERS+6(6),=6C'*'     MARK AS NOT CATALOGUED\nMVC2     MVC   DETAIL(0),RNAME         TARGET TO PRT\n         LA    R15,DETAIL(R2)\n         MVI   3(R15),C'('\n         MVC   4(6,R15),VOLSERS+6      VOLSER LOCATION TO PRINT\n         MVI   10(R15),C')'\n         BAL   R11,PRINTIT             OUTPUT 1ST LINE\nMVC3     MVC   DETAIL(0),DASHES        SEPARATOR\n         BAL   R11,PRINTIT             OUTPUT 2ND LINE\n         L     R2,DSNL                 RELOAD DSNAME L'\n         L     R3,RIBLEN               GETMAIN L'\n         L     R5,@MYRIB               R4==>GQSCAN OUTPUT ADR\n         XC    TOKEN(L'TOKEN),TOKEN    CLEAR TOKEN FILED\n         MODESET MODE=SUP\n         GQSCAN AREA=((R5),(R3)),                                      X\n               REQLIM=MAX,                                             X\n               SCOPE=ALL,                                              X\n               RESNAME=(QNAME,RNAME,(R2),SPECIFIC,0),                  X\n               TOKEN=TOKEN\n         STM   R15,R0,SAVE15           SAVE RC/RS\n*************************************\n* PRINT RC (TEST ONLY)\n*        UNPK  RCMSG+3(3),SAVE15+2(2)  RC\n*        MVZ   RCMSG+3(2),=2X'00'      ZONES OFF\n*        TR    RCMSG+3(2),TABLE        MAKE PRINTABLE\n*        MVC   DETAIL(L'RCMSG-1),RCMSG MSG TO PRT\n*        BAL   R11,PRINTIT             PRINT THE LINE\n* END PRINT RC (TEST ONLY)\n*************************************\n         MODESET MODE=PROB\n         LM    R15,R0,SAVE15           RESTORE RC/RS\n         SLL   R15,2                   * 4\n         B     BRTAB(R15)\nBRTAB    B     SOMFOUND                RC=0\n         B     NONFOUND                RC=4\n         B     GQERR                   RC=8\n         B     GQERR                   RC=12\n         B     NONFOUND                RC=16\n         B     GQERR                   RC=20\nSOMFOUND EQU   *\n         LR    R2,R0\n         LR    R3,R0\n         SRL   R2,16                   R2 ==> L' RIB FIXED AREA\n         SLL   R3,16\n         SRL   R3,16                   R3 ==> L' RIBE\n         L     R5,@MYRIB               R5 ==> A(RIB)\n         USING RIB,R5\n         MVC   MAJORNAM(8),RIBQNAME    SAVE MAJOR\n         L     R4,RIBNRIBE             R4 ==> # RIBE BLOCKS\n         LH    R15,RIBVLEN             R15 ==> RIB VARIABLE L'\n         AR    R5,R2                   ADD IN RIB FIXED L'\n         AR    R5,R15                  R5 ==> 1ST RIBE\n         USING RIBE,R5\nINNER    EQU   *\n         MVC   DETAIL(8),RIBEJBNM      REQUESTOR JOBNAME\n         TM    RIBERFLG,RIBERESV       RESERVE ?\n         BO    RESERVE                 YES\n         TM    RIBERFLG,RIBETYPE       ENQ SHR ?\n         BO    SHARE                   YES\n         MVC   DETAIL+8+3(3),=C'EXC'   MARK EXCLUSIVE ENQ\n         B     MAJOR\nRESERVE  EQU   *\n         MVC   DETAIL+8+3(3),=C'RSV'   MARK RESERVE\n         B     MAJOR\nSHARE    EQU   *\n         MVC   DETAIL+8+3(3),=C'SHR'   MARK SHARED ENQ\n         SPACE\nMAJOR    EQU   *\n         MVC   DETAIL+8+3+6(8),MAJORNAM MAJOR ENQ NAME TO DETAIL\n         MVI   DETAIL+8+3+6+11,C'('    (\n         MVC   DETAIL+8+3+6+11+1(4),RIBESYSN  SYSTEM NAME\n         MVI   DETAIL+8+3+6+11+5,C')'   )\n         BAL   R11,PRINTIT             PRINT DETAIL LINE\n         LA    R5,0(R3,R5)             POINT TO NEXT RIBE\n         BCT   R4,INNER                DO ALL ENQ/RSV'S\n         B     EXIT\n         SPACE\nNONFOUND EQU   *\n         MVC   DETAIL(19),=C'*== NO ENQUEUES ==*'\n         BAL   R11,PRINTIT             NO..POINT THAT OUT\nEXIT     EQU   *\n         FREEMAIN EU,LV=1024000,A=@MYRIB\n         CLOSE (SYSPRINT)\n         L     R13,SAVEAREA+4          EXIT BACK TO TSO\n         RETURN (14,12),RC=0\n         EJECT\n*=====================================================================*\n*                         S U B R O U T I N E S                       *\n*=====================================================================*\n         SPACE\n         DC    CL8'PRINTIT',F'0'\nPRINTIT  ST    R11,PRINTIT-4\n         PUT   SYSPRINT,DETAIL\n         MVC   DETAIL(L'DETAIL),DETAIL-1\n         L     R11,PRINTIT-4\n         BALR  R11,R11\n         SPACE 3\nFINDERR  EQU  *\n         CVD   R15,DOUB\n         UNPK  FINDMSG+20(4),DOUB+6(2)\n         OI    FINDMSG+23,240\n         MVC   FINDMSG+29(44),RNAME\n         MVC   DETAIL(L'FINDMSG),FINDMSG\n         BAL   R11,PRINTIT\n         B     EXIT\n         SPACE 3\nGQERR    EQU  *\n         CVD   R15,DOUB\n         UNPK  GQMSG+16(4),DOUB+6(2)\n         OI    GQMSG+19,240\n         MVC   DETAIL(L'GQMSG),GQMSG\n         BAL   R11,PRINTIT\n         B     EXIT\n         SPACE 3\nMAINERR  EQU   *\n         CVD   R15,DOUB                GET RC\n         UNPK  MSGMAIN+16(4),DOUB+6(2) RC TO MSG\n         OI    MSGMAIN+19,240\n         XR    R14,R14\n         L     R15,RIBLEN\n         CVD   R15,DOUB\n         MVC   MSGMAIN+26(L'MASKVOL),MASKVOL\n         ED    MSGMAIN+26(L'MASKVOL),DOUB+3\n         MVC   DETAIL+1(L'MSGMAIN),MSGMAIN    MSG TO ERROR RPT\n         BAL   R11,PRINTIT             PRINT ERROR\n         B     EXIT\n         SPACE 3\n         LTORG\n         EJECT\n*=====================================================================*\n*                         D A T A   A R E A S                         *\n*=====================================================================*\n         SPACE\nDOUB     DS    D\nMAJORNAM DC    CL8' '\nQNAME    DC    8X'00'              SHOULD ALWAYS BE NULL\nRNAME    DC    CL44' '             DATASET IN QUESTION\nTOKEN    DC    F'0'\nDSNL     DS    F\nSAVE15   DS    2F                  R15,R0\nFOUND    DC    C'0'\nTABLE    DC    C'0123456789ABCDEF'\nCAMLST   CAMLST NAME,RNAME,,VOLSERS\nFINDMSG  DC    CL80'DSNAME NOT FOUND,RC=XXXX,DSN='\nGQMSG    DC    C'ENQ SCAN ERR,RC=XXXX'\nRCMSG    DC    C'RC=XXX'\n         DC    C' '\nDETAIL   DC    CL80' '\nDASHES   DC    55C'-'\n         DS    0D\n         PRINT NOGEN\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,BLKSIZE=80\n         PRINT GEN\n         DS    0D\nVOLSERS  DC    265C' '\n         DC    C'MYRIB'\n@MYRIB   DC    A(0)\nRIBLEN   DC    A(1024000)                   1 MEG\nMASKVOL  DC    X'402020202020202120'\nMSGMAIN  DC    CL34'GETMAIN ERR,R15=XXXX,SIZE=XXXXXXXXX'\n         EJECT\n         ISGRIB\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT626/FILE626.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT626", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}