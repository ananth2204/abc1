{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011425000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 3585946, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 12, "INMDSNAM": "CBT.V500.FILE180.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 3585946, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 3585946, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE180.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x009\\x02'", "DS1TRBAL": "b'\\xd8\\x16'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01B\\x00\\x02\\x01E\\x00\\x0e\\x00:'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00y\\x08\\x1f\\x00\\x92\\t\\x0f B\\x01d\\x00\\xd3\\x00\\xb6\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1979-03-22T00:00:00", "modifydate": "1992-03-30T20:42:00", "lines": 356, "newlines": 211, "modlines": 182, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1984 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n$CAL     TITLE '$ - TSO CALL FUNCTION FOR LINKLIB MODULES'\n*---------------------------------------------------------------------*\n*                                                                     *\n*   PROGRAM NAME:  $                                                  *\n*                                                                     *\n*   PURPOSE:       CALL LINKLIST MODULES WITHOUT USING A DCB          *\n*                                                                     *\n*   AUTHOR:        BRUCE M. DANE                                      *\n*                                                                     *\n*   DATE:          LONG, LONG AGO                                     *\n*                                                                     *\n*   UPDATES:                                                          *\n*      09/05/84 LDW2  SPECIFY ATTACH SVC # VIA SYSPARM, TO ALLOW USE  *\n*                        OF EXXON SPFMAGIC SVC WITHOUT SOURCE CHANGES *\n*      08/31/82 LDW1  CHANGE TO MY STANDARD MACROS SO THAT THE ONES   *\n*                        COPIED INLINE BY SDM COULD BE DELETED        *\n*                     FIX BUG IN BMD'S ABEND406 SIMULATOR             *\n*      01/08/81 BMD2  SEARCH SVS/MVS LPA DIRECTORY BEFORE ISSUING     *\n*                        BLDL FOR A MODULE                            *\n*                     FIX BLDL LEN FOR SVS/MVS                        *\n*                     OTHER MISCELLANIA                               *\n*                     (NOTE:  THIS FIX ACTUALLY COPIED INTO THIS      *\n*                        VERSION BY LDW AFTER 03/06/82 UPDATES DONE)  *\n*                     (NOTE:  THIS WAS BRUCE'S +BMD+ UPDATE)          *\n*      05/09/73 BMD1  FIX PARM OF ''                                  *\n*                     SHARE SUBPOOL 78 FOR IKJPUTGT                   *\n*                     (NOTE:  THIS WAS BRUCE'S *BMD* UPDATE)          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*LDW1 $  TSOENTER REGS=YES,PL=(CPPL,PARSE),WORK=260\n$        OSENTER  ENV=CP,PARMREG=R2,PL=(PARSE),                    LDW1$\n               GETMAIN=(WORKLEN,TSODSECT),EXIT=LEAVE,RC=(R2)       LDW1\n         EJECT\nTSODSECT DSECT ,                        RE-ESTABLIST DSECT\n*LDW1    ORG   TSOWORK                  GET ADDR\nDOUBLE   DC    D'0'                     FOR CONVERSIONS\nATTLIST  ATTACH DE=0,SF=L               PHONEY ATTACH LIST\nATTLISTL EQU   *-ATTLIST                LENGTH\nATTTCB   DC    A(0)                     TCB ADDRESS\nATTECB   DC    F'0'                     ECB ADDRESS\nSTAECMP  DC    F'0'                     CMP FOR STAI\nBLDL     DC    2H'0',CL64' '            BLDL LIST                  BMD2\n         CNOP  2,4                      FOR STANDARDS              BMD2\nPARM     DC    H'0',CL100' '            PARM FIELD\nPARMPTR  DC    A(0)                     POINTER TO PARM\n         DC    3A(0)                    FAKE REST OF CPPL\n         ORG\nWORKLEN  EQU   *-TSODSECT               LENGTH TO GETMAIN          LDW1\n$        CSECT\n         TITLE '$ - INITIALIZATION CODE'\n         MVC   BLDL(4),=AL2(1,64)       NUMBER/LEN                 BMD2\n         XC    TSPARANS(4),TSPARANS     CLEAR ANSWER FIELD         LDW1\n         XC    TSECB(4),TSECB           AND ECB                    LDW1\n         MVC   STAECMP(4),TSECB         CLEAR IT THIS WAY          LDW1\n         L     R15,CPPLCBUF             LOAD CMD BUFFER\n         TSPARSE  CBUF=(15),PCL=(=V(PCL),I)  CALL PARSE ROUTINE    LDW1\n         LTR   R15,R15                  TEST RETURN CODE\n         BZ    ANALYZE                  OK, CONTINUE\nBADPARSE LA    R0,L'MSG01               LOAD MESSAGE SIZE\n         LA    R1,MSG01                 AND MESSAGE ADDR\n         B     PRELEAVX                 DONE, FORGET IT\n         TITLE '$ - ANALYZE INPUT'\n         USNGX PDL,R11                  TELL ASSEMBLER             LDW1\nANALYZE  L     R11,TSPARANS             LOAD ANSWER AREA           LDW1\n         L     R1,MODNAME               GET MODULE NAME ENTRY\n         TM    MODNAME+6,X'80'          IS IT THERE\n         BNO   BADPARSE                 NO, STOP HERE\n         MVC   BLDL+4(8),=8C' '         CLEAR MODULE NAME\n         LH    R15,MODNAME+4            GET LEN\n         BCTR  R15,0                    -1 FOR EXECUTE\n         EX    R15,MVCMOD               DO IT\n         LH    R2,PDLPARM+4             GET LENGTH\n         L     R3,PDLPARM               GET ADDRESS\n         CH    R2,=H'100'               CHECK IT\n         BNH   LENOK                    OK, SO FAR\n         LA    R1,MSG02                 GET MESSAGE\n         LA    R0,L'MSG02               AND LENGTH\n         TPUT  (1),(0),R                DO IT\n         LA    R2,100                   SET AT MAXIMUM\nLENOK    LTR   R2,R2                    TEST FOR NON-ZERO LEN      BMD1\n         STH   R2,PARM                  SAVE IN LENGTH\n         BCTR  R2,0                     SUBTRACT ONE\n         BNP   *+12                     NOT THERE, NO MOVE         BMD1\n         EX    R2,MVCPARM               DO THAT\n         B     *+10                     AROUND XC\n         XC    PARM+2(40),PARM+2        CLEAR IT FOR ACCIDENTAL PARSE\n         LA    R1,PARM                  LOAD PARM FIELD\n         ST    R1,PARMPTR               SAVE IT THERE\n         MVI   PARMPTR,X'80'            FLAG AS LAST\n         MVC   PARMPTR+4(12),CPPLUPT    JUST IN CASE CALL CP\n         SPACE 3\n         L     R3,CVTPTR                GET CVT ADDRESS            BMD2\n         LM    R0,R1,BLDL+4             GET PARMS FOR ROUTINE      BMD2\n         L     R15,CVTLPDSR-CVTMAP(,R3) ADDRESS OF ROUTINE         BMD2\n         BALR  R14,R15                  CALL ROUTINE               BMD2\n         B     DOATTACH                 ATTACH LPA MODULE          BMD2\n         EJECT ,\n         XR    R1,R1                    CLEAR DCB ADDRESS\n         BLDL  (1),BLDL                 DO IT\n         CH    R15,=H'8'                CHECK JUST IN CASE\n         BNH   *+8                      OK\n         LA    R15,12                   LOAD ERROR CODE\n         B     *+4(R15)                 DO BRANCH\n         B     DOATTACH                 RETURN CODE=0\n         B     NONESUCH                 NO SUCH MODULE\n         B     IOERR                    I/O ERROR IN SEARCH\n         LA    R1,MSG03                 BAD RETURN CODE FROM BLDL\n         LA    R0,L'MSG03               AND LEN\n         B     PRELEAVX                 DIE RIGHT NOW\n         TITLE '$ - ERROR AND RETURN CODE'\nNONESUCH MVC   PARM(L'NOMOD),NOMOD      MOVE IN MESSAGE\n         MVC   PARM+MODOFF(8),BLDL+4    MOVE IN MODULE NAME\n         LA    R1,PARM                  LOAD PLACE\n         LA    R0,L'NOMOD               LEN\n         B     PRELEAVX                 DO IT\n         SPACE 2\nIOERR    LA    R1,IOERRMSG              LOAD MESSAGE\n         LA    R0,L'IOERRMSG            LENGTH\n         SPACE 2\nPRELEAVX MVI   STAECMP+3,20             ERROR CODE\nPRELEAVE TPUT  (1),(0),R                DO IT\nRELEASEA IKJRLSA TSPARANS                                          LDW1\n         L     R2,STAECMP               TEST CMP CODE\n         LTR   R2,R2                    TEST IT\n         BP    *+6                      AROUND CLEAR\n         XR    R2,R2                    CLEAR IT\n         B     LEAVE                    LEAVE NOW                  LDW1\n         TITLE '$ - SOME CONSTANTS'\nMSG01    DC    C'MISSING PROGRAM NAME OR PARSE ERROR, PLEASE RE-ENTER C$\n               OMMAND'\nMSG02    DC    C'PARM FIELD TOO LONG, TRUNCATED AT 100 CHARACTERS'\nMSG03    DC    C'** ERROR IN BLDL ** CONTACT SYSTEMS PERSONNEL'\nMSG10    DC    C'** ATTACH ERROR ** CONTACT SYSTEMS PERSONNEL'\nIOERRMSG DC    C'** I/O ERROR DURING BLDL ** CONTACT SYSTEMS PERSONNEL'\nNOMOD    DC    C'PROGRAM 12345678 NOT FOUND, PLEASE RE-ENTER COMMAND'\nABCODE   DC    C'PROGRAM 12345678 ABENDED, SYS=000, USER=0000'\nNONZERO  DC    C'PROGRAM 12345678 ENDED, COND. CODE=00000000 '\nMODOFF   EQU   8\nABSYS    EQU   30\nABUSER   EQU   40\nNONCODE  EQU   35\nTRT      EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\n         TITLE '$ - PARSE PCL'\nPCL      IKJPARM DSECT=PDL\nMODNAME  IKJIDENT 'PROGRAM',MAXLNTH=8,FIRST=ALPHANUM,                  $\n               OTHER=ALPHANUM,PROMPT='PROGRAM NAME',                   $\n               HELP='NAME OF PROGRAM TO BE CALLED'\n         SPACE 2\nPDLPARM  IKJPOSIT QSTRING,HELP='PARM FIELD FOR PROGRAM'\n         IKJENDP\n         TITLE '$ - SET UP AND ATTACH PROGRAM'\nDOATTACH TM    CPPLCBUF,X'80'           CALL ON ME?\n         BO    NOECTCHG                 RIGHT, DON'T CHANGE ECT\n         L     R1,CPPLECT               LOAD ECT ADDR\n         MVC   12(8,R1),BLDL+4          MOVE IN MODULE NAME\nNOECTCHG LA    R1,PARMPTR               LOAD PARM POINTER\n         SPACE 3\n         XC    ATTLIST(ATTLISTL),ATTLIST  CLEAR ATTACH LIST\n         XC    ATTECB(4),ATTECB         CLEAR IT\n         LTR   R15,R15                  IF I CAME FROM BLDL        BMD2\n         BZ    ATTACH                   IT WILL BE ZERO, ELSE      BMD2\n         SPACE 1\n         LR    R15,R0                   GET CDE ADDRESS            BMD2\n         TM    28(R15),X'01'            IS IT LOAD-ONLY?           LDW1\n         BO    LPATTACH                 NOPE, TRY IT               BMD2\n         MVC   STAECMP+1(3),=X'406004'  MY CODE                    LDW1\n         XC    ATTTCB(4),ATTTCB         SET NO TCB ADDRESS         BMD2\n         B     LPABEND                  AND ISSUE ABEND MESSAGE    BMD2\n         SPACE 1\nLPATTACH ATTACH EPLOC=BLDL+4,DCB=0,ECB=ATTECB,SZERO=NO,            BMD2$\n               STAI=(STAI,(R13)),PURGE=NONE,ASYNCH=YES,            BMD2$\n               MF=(E,(1)),SF=(E,ATTLIST),SHSPV=78                  BMD2\n         SPACE 1\n          AIF   ('&SYSPARM' EQ '').SVCOK1                          LDW2\n         ORG   *-2                      BACK OVER THE SVC          LDW2\n         SVC   &SYSPARM                                            LDW2\n.SVCOK1   ANOP                                                     LDW2\n         SPACE 1\n         B     ATTCOMM                  AND CONTINUE AS NORMAL     BMD2\n         EJECT ,\nATTACH   ATTACH DE=BLDL+4,DCB=0,ECB=ATTECB,SZERO=NO,                   $\n               STAI=(STAI,(R13)),PURGE=NONE,ASYNCH=YES,                $\n               MF=(E,(1)),SF=(E,ATTLIST),SHSPV=78                  BMD1\n         SPACE 1\n          AIF   ('&SYSPARM' EQ '').SVCOK2                          LDW2\n         ORG   *-2                      BACK OVER THE SVC          LDW2\n         SVC   &SYSPARM                                            LDW2\n.SVCOK2   ANOP                                                     LDW2\n         SPACE 1\nATTCOMM  LTR   R15,R15                  TEST RETURN CODE           BMD2\n         BZ    ATTWAIT                  OK, SAVE TCB AND WAIT\n         LA    R1,MSG10                 MESSAGE ADDRESS\n         LA    R0,L'MSG10               AND LEN\n         B     PRELEAVX                 DONE FOR\n         SPACE 3\nATTWAIT  ST    R1,ATTTCB                SAVE TCB ADDRESS\n         WAIT  1,ECB=ATTECB             WAIT FOR SUBTASK\n         OC    STAECMP(4),STAECMP       GET CMP FROM TASK\n         BZ    GETRC                    OK, GET RETURN CODE\nLPABEND  MVI   STAECMP,X'00'            CLEAR HIGH BYTE            BMD2\n         L     R1,STAECMP               GET IT\n         SLL   R1,4                     NOW HAVE 0SSSUUU0\n         ST    R1,ATTECB                SAVE IT\n         MVC   PARM(L'ABCODE),ABCODE\n         MVC   PARM+MODOFF(8),BLDL+4    MOVE IN MOD NAME\n         UNPK  DOUBLE(4),ATTECB(3)      GET FOR HEX\n         MVC   PARM+ABSYS(3),DOUBLE     DO THAT\n         TR    PARM+ABSYS(3),TRT        GET IN PRINTABLE\n         MVC   ATTECB(2),STAECMP+2      GET LOW 2 BYTES\n         NI    ATTECB,X'0F'             OFF LOW SYSTEM BYTE\n         LH    R15,ATTECB               LOAD CMP CODE\n         CVD   R15,DOUBLE               CONVERT IT\n         UNPK  PARM+ABUSER(4),DOUBLE+5(3)\n         OI    PARM+ABUSER+3,C'0'       PRINTABLE\n         B     DETACH                   DO DETACH\n         SPACE 3\nGETRC    L     R15,ATTECB               GET ECB\n         LA    R15,0(,R15)              OFF POST FLAGS\n         LTR   R15,R15                  TEST RETURN CODE\n         ST    R15,STAECMP              SAVE IT IN RIGHT FIELD\n         MVI   STAECMP,X'FF'            SET NO-FLAG\n         BZ    DETACH                   NO FORMAT TO DO\n         MVI   STAECMP,X'00'            OFF FLAG\n         CVD   R15,DOUBLE               CONVERT IT\n         MVC   PARM(L'NONZERO),NONZERO  MOVE IN CODE\n         MVC   PARM+MODOFF(8),BLDL+4    MOVE IN NAME\n         UNPK  PARM+NONCODE(8),DOUBLE+3(5)\n         OI    PARM+NONCODE+7,C'0'      PRINTABLE\n         EJECT\nDETACH   OC    ATTTCB(4),ATTTCB         IS THERE A TCB?            BMD2\n         BZ    DETACH2                  NOPE, MUST BE FAKED EXIT   BMD2\n         DETACH ATTTCB,STAE=NO          NO CHANCE                  BMD2\nDETACH2  LA    R1,PARM                  LOAD ADDRESS OF ROUTINE    BMD2\n         LA    R0,L'NONZERO             BOTH SAME LEN\n         CLI   STAECMP,X'FF'            CMP ZERO?\n         BE    RELEASEA                 YES, NO MESSAGE\n         B     PRELEAVE                 DIE NOW\n         TITLE '$ - STAI EXIT ROUTINE'\n         DROPX ,                                                   LDW1\n         USNGX STAI,R15                 TELL ASSEMBLER             LDW1\nSTAI     CH    R0,=H'12'                CODE FOR NO CORE?\n         BE    STAINCOR                 NO CORE, OK\n         L     R2,0(,R1)                GET ADDR OF PARM\n         USNGX TSODSECT,R2              TELL ASSEMBLER             LDW1\n         OC    STAECMP(4),STAECMP       SET CONDITION CODE\n         BNZ   STAIDIE                  RECURSION-DIE\n         MVC   STAECMP(4),4(R1)         COPY STAE ABCODE\n         B     STAIDO                   GO TO RETRY ROUTINE\n         SPACE 3\nSTAINCOR OC    STAECMP(4),STAECMP       SET CONDITION CODE\n         BNZ   STAIDIE                  STAI-RECURSION DIE\n         ST    R1,STAECMP               SAVE CMP AS PUT THERE\nSTAIDO   LA    R0,STAITRY               LOAD STAE RETRY ROUTINE\n         LA    R15,4                    LOAD RETRY CODE\n         SVC   3                        RETURN TO ASIR\n         SPACE 1\nSTAIDIE  LR    R3,R1                    SAVE POINTER\n         POST  ATTECB,0                 POST MY MOTHER\n         XC    DOUBLE(4),DOUBLE         CLEAR IT\n         WAIT  1,ECB=DOUBLE             STOP HERE\n         DROPX ,                                                   LDW1\nSTAITRY  STAE  0,CT                     CLEAR ANY STAE CB'S\n         SVC   3                        RETURN UP ANOTHER LEVEL\n         EJECT\n         USNGX TSODSECT,R13             RE-ESTABLIST FOR EX'D ISNS LDW1\nMVCMOD   MVC   BLDL+4(0),0(R1)          <<EXECUTED>>\nMVCPARM  MVC   PARM+2(0),0(R3)          <<EXECUTED>>\n         SPACE 2\nHERMAN   LTORG\n         CVT   DSECT=YES                                           BMD2\n*LDW1    END   $,(B.M.DANE,0300,80008)                             BMD2\n         END   ,                                                   LDW1\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$$CPYRT": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\t\\x0f\\x00\\x92\\t\\x0f 9\\x00R\\x00R\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-03-30T00:00:00", "modifydate": "1992-03-30T20:39:00", "lines": 82, "newlines": 82, "modlines": 0, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1991 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CALC": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x03\\x00\\x00\\x00\\x00\\x80\\x05?\\x00\\x80\\x05?\\x12F\\x0cv\\x0cv\\x00\\x00\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "03.00", "flags": 0, "createdate": "1980-02-22T00:00:00", "modifydate": "1980-02-22T12:46:00", "lines": 3190, "newlines": 3190, "modlines": 0, "user": "LDW"}, "text": "CALC     TITLE 'DESK CALCULATOR'\n***********************************************************************\n***********************************************************************\n**                                                                   **\n**  PROGRAM NAME:  CALC                                              **\n**                                                                   **\n**  AUTHOR:        ?                                                 **\n**                                                                   **\n**  DATE:          ?                                                 **\n**                                                                   **\n**  INSTALLATION:  ?                                                 **\n**                                                                   **\n**  PURPOSE:       ?                                                 **\n**                                                                   **\n**  HISTORY:       THIS PROGRAM USED TO BE AN URSA PROCESSOR AT CCN. **\n**                 IT WAS THEN CONVERTED TO A TSO COMMAND AT CCN.    **\n**                                                                   **\n**                 I STRONGLY RECOMMEND THAT YOU GIVE UP ANY         **\n**                 PERVERSE THOUGHTS OF CLEANING UP THIS TRAVESTY.   **\n**                 ... BE THANKFUL THAT YOU CAN EVEN GET IT TO WORK. **\n**                                                                   **\n**  UPDATES:                                                         **\n**     02/21/80 LDW   1) MAKE THIS TURKEY ASSEMBLE WITHOUT THE       **\n**                       \"BATCH\" OPTION (WHICH THE IFOX ASSEMBLER    **\n**                       DOES NOT HAVE!!!)                           **\n**                    2) COPY UNIQUE MACROS INLINE                   **\n**                    3) CHANGE TO STANDARD SYMBOLIC REGISTERS       **\n**                                                                   **\n***********************************************************************\n***********************************************************************\n         TITLE 'C A L C  -  STUPID MACROS'\n         MACRO\n&NAME    BCE   &FINDADS,&REG,&CHR\n.*$MACRO=BCE        DATE=04/00/79       SOURCE=UCLA\n.*       THE BCE MACRO WILL COMPARE &REG WITH THE LIST OF CHARACTERS\n.*       GIVEN IN &CHR. IF AN EQUAL MATCH HAS BEEN MADE, CONTROL\n.*       WILL PASS TO &FINDADS.\n.*       THE CONTENTS OF R0 WILL BE DESTROYED BY THE MACRO, AND\n.*       &REG MUST HAVE ZEROS IN THE HIGH ORDER THREE BYTES.\n         LCLA  &COUNT\n         LCLC  &X\n&COUNT   SETA  1\n&NAME    SR    R0,R0\n.LOOP    AIF   ('&CHR(&COUNT)'(1,1) NE 'X').CHAR\n&X       SETC  '&CHR(&COUNT)'(2,2)\n         IC    R0,=X'&X'\n         AGO   .CR\n.CHAR    IC    R0,=C&CHR(&COUNT)\n.CR      CR    R0,&REG\n         BE    &FINDADS\n&COUNT   SETA  &COUNT+1\n         AIF   (&COUNT LE N'&CHR).LOOP\n         MEND\n         SPACE 3\n         MACRO\n&NAME    ZGPR  &REG\n.*.\n.*$MACRO=ZGPR       DATE=04/00/79       SOURCE=UCLA\n.*       THE ZGPR MACRO WILL ZERO THE GPR'S GIVEN IN THE LIST &REG.\n.*.\n         LCLA  &LENGTH,&COUNT\n&LENGTH  SETA  N'&REG+1\n&COUNT   SETA  1\n         AIF   ( '&NAME' EQ '' ).LOOP\n&NAME    EQU   *\n.LOOP    SR    &REG(&COUNT),&REG(&COUNT)\n&COUNT   SETA  &COUNT+1\n         AIF   ( '&COUNT' LT '&LENGTH' ).LOOP\n         MEND\n         SPACE 3\n         MACRO\n&NAME    ADDG  &REG,&NO\n.*.\n.*$MACRO=ADDG       DATE=04/00/79       SOURCE=UCLA\n.*       THE ADDG MACRO WILL ADD &NO TO &REG. &NO MUST BE A NUMBER\n.*       LESS THAN 4096 AND &REG MUST BE A NUMBER BETWEEN 1 AND 15.\n.*.\n&NAME    LA    &REG.,&NO.(&REG.)\n         MEND\n         SPACE 3\n         MACRO\n&NAME    PLOP  &REG\n.*.\n.*$MACRO=PLOP       DATE=04/00/79       SOURCE=UCLA\n.*       PLOP WILL PLACE THE ENTITY INTO A STACK POINTED TO BY\n.*       GPR &REG.\n.*.\n&NAME    STM   R15,R1,0(&REG.)\n         ADDG  &REG,12\n         MEND\n         SPACE 3\n         MACRO\n&NAME    STACKO &REG,&ENDLOC\n.*.\n.*$MACRO=STACKO     DATE=04/00/79       SOURCE=UCLA\n.*       THE SCACKO MACRO WILL POP ONE ENTITY FROM THE STRING THAT\n.*       IS THE RESULT OF SCAN 1 OR 2.\n.*       &REG IS THE POINTER TO THE NEXT CONTROL BYTE.\n.*       &ENDLOC IS THE TRANSFER POINT IF AN EOB IS FOUND.\n.*       THE RESULT OF THE POP IS THAT R0 AND R1 CONTAIN THE\n.*       ENTITY AND GPR 15 CONTAINS THE CONTROL BYTE.\n.*       OPERATORS ARE FOUND IN ONLY THE LOW ORDER BYTE IN R1.\n.*         (THE EOB OPERATOR WILL BE FOUND IN THE SAME PLACE\n.*          AS OTHER OPERATORS AFTER THE TRANSFER.)\n.*       LITERALS OCCUPY BOTH GPR'S.\n.*       LABELS ARE RIGHT ADJUSTED IN R1.\n.*.\n&NAME    ZGPR  R15                   CLEAR REGISTER\n         IC    R15,0(&REG.)          GET CONTROL BYTE.\n         LR    R14,R15               TRANSFER IT.\n         ADDG  &REG,1                ADD ONE TO COUNT.\n         N     R14,=F'128'           TEST FOR OPERATOR.\n         BZ    OPO&SYSNDX            YES, A OPERATOR.\n         LR    R14,R15               NO, TRANSFER CONTROL BYTE.\n         N     R14,=F'64'            TEST FOR OPERAND\n         BZ    OPN&SYSNDX            YES, A LABEL OPERAND.\n         LA    R14,8                 NO, A LITERAL OPERAND.\nL1&SYSNDX SLDL R0,8                  SHIFT.\n         IC    R1,0(&REG.)           GET NEXT CHARACTER.\n         ADDG  &REG,1                ADD ONE TO COUNT.\n         BCT   R14,L1&SYSNDX         BRANCH AND COUNT.\n         B     L3&SYSNDX             TERMINATE.\nOPO&SYSNDX ZGPR R0                   OPERATOR. CLEAR R0.\n         ZGPR  R1                    AND ONE.\n         IC    R1,0(&REG.)           GET THE OPERATOR.\n         ADDG  &REG,1                AND ADD ONE TO THE COUNT.\n         BCE   &ENDLOC,R1,X26        IS IT AN EOB...\n         B     L3&SYSNDX             NO, TERMINATE.\nOPN&SYSNDX ZGPR R0                   OPERAND, OR LABEL THAT IS.\n         ZGPR  R1                    CLEAR REGISTERS.\n         LR    R14,R15               GET COUNT LENGTHE.\n         N     R14,=F'15'            EDIT.\nL2&SYSNDX SLDL R0,8                  SHIFT\n         IC    R1,0(&REG.)           GET CHARACTR.\n         ADDG  &REG,1                ADD ONE TO COUNT.\n         BCT   R14,L2&SYSNDX         BRANCH AND COUNT.\nL3&SYSNDX EQU  *                     THIS IS THE END.\n         MEND\n         SPACE 3\n         MACRO\n&NAME    POPP  &REG,&ENDLOC\n.*.\n.*$MACRO=POPP       DATE=02/00/80       SOURCE=LDW\n.*$MACRO=POP        DATE=04/00/79       SOURCE=UCLA\n.*       THE POP MACRO WILL POP ONE ENTITY FROM THE GENERAL\n.*       STACKS POINTED TO BY GPR &REG. IF AN EOB IS FOUND, CONTROL\n.*       WILL TRANSFER TO &ENDLOC.\n.*       AN EOB WILL BE FOUND IN THE ENTITY REGISTER AFTER THE\n.*       TRANSFER.\n&NAME    SH    &REG,=H'12'\n         LM    R15,R1,0(&REG.)\n         LR    R14,R15\n         N     R14,=F'128'\n         BM    GO&SYSNDX\n         BCE   NO&SYSNDX,R1,X26\n         B     GO&SYSNDX\nNO&SYSNDX ADDG &REG,12\n         B     &ENDLOC\nGO&SYSNDX EQU  *\n         MEND\n         SPACE 3\n         MACRO\n&NAME    CHR   &END\n.*.\n.*$MACRO=CHR        DATE=04/00/79       SOURCE=UCLA\n.*       THE CHR MACRO WILL PICK UP ONE CHARACTER FROM THE POINTER\n.*       IN R4. IF THE CHARACTER IS A BLANK, IT WILL BE IGNORED.\n.*       IF THE CHARACTER IS AN EOB, CONTROL WILL TRANSFER TO &END.\n.*.\n&NAME    ZGPR  R3\n         IC    R3,0(R4)\n         ADDG  R4,1\n         C     R3,=F'64'     BLANK\n         BE    &NAME\n         C     R3,=F'38'     EOB\n         BE    &END\n         MEND\n         SPACE 3\n         MACRO\n&NAME    SCANC &LIST,&LENGTH,&FINDADS\n.*.\n.*$MACRO=SCANC      DATE=04/00/79       SOURCE=UCLA\n.*\n.*       THE SCANC MACRO WILL SCAN &LIST FOR THE CHARACTER PRESENT\n.*       IN R3. &LENGTH IS THE LENGTH OF THE LIST AND &FINDADS IS\n.*       THE TRANSFER ADDRESS IF A MATCH IS MADE.\n.*         R0  IS USED FOR THE TEST CHR. FROM THE LIST.\n.*         R1  IS THE INDEX OF &LIST.\n.*         R3  IS THE SCAN CHARACTER.\n.*         GPR R14 IS THE INCREMENT GPR.\n.*         GPR 15 IS THE UPPER LIMIT GPR.\n.*.\n&NAME    ZGPR  (R0,R1)\n         LA    R14,1\n         LA    R15,&LENGTH-1\nGET&SYSNDX IC  R0,&LIST.(R1)\n         CR    R0,R3\n         BE    &FINDADS\n         BXLE  R1,R14,GET&SYSNDX\n         MEND\n         SPACE 3\n         MACRO\n&NAME    LOOKUP\n.*.\n.*$MACRO=LOOKUP     DATE=04/00/79       SOURCE=UCLA\n.*.\n&NAME    BAL   R14,LOOK\n         MEND\n         EJECT\n         MACRO\n&LBL     TSENTRY &Z,&BASE=R12,&SYMREG=YES,&PL=,&GETMAIN=0,&MACRO=,     X\n               &DSECT=NO,&LOAD=,&MAP=,&PARSE=,&EXIT=,&SP=1,&EPS=\n.*.\n.*$MACRO=TSENTRY    DATE=04/00/79       SOURCE=UCLA\n.*\n.* LAST UPDATED:\n.*  WDD:  1/11/77 - ADD EPS=, SUPPORT MULTIPLE ENTRY POINTS\n.*  WDD:      /76 - ADD EXIT=, EXIT ROUTINE GENERATION\n.*  WDD:      /76 - ADD BASE=(BASE1,BASE2), PROVISION FOR 2ND BASE REG\n.*.\n         GBLB  &GDAIRM,&GPARSEM         FLAGS TO AVOID DUPLICATES\n         GBLB  &GDAIR,&GPARSE           DAIR OR PARSE LOADED\n         LCLA  &A,&J\n         LCLB  &C,&P,&D,&I,&M\n         LCLC  &PARNAME                 ENTRY PARM IF PARSE LOADED\n         LCLA  &X,&N,&X1\n         LCLC  &COM,&ADD\n&N       SETA  N'&EPS                   NO. OF ALTERNATE ENTRY POINTS\n&ADD     SETC  '&LBL'\n&PARNAME SETC  ''\n         SPACE 2\nTSDSECT  DSECT\nTSAVE    DS    18F                      SAVE AREA\n         TSCPPL\n         AIF   ('&PL' EQ '').L12\nTSECB    DS    F                        ECB FOR THE TSO SERVICES\n&A       SETA  1\n.L1      AIF   ('&PL(&A)' NE 'CSCAN').L2\n&C       SETB  1\n         AGO   .L7\n.L2      AIF   ('&PL(&A)' NE 'PARSE').L3\n&P       SETB  1\n         AGO   .L7\n.L3      AIF   ('&PL(&A)' NE 'DAIR').L4\n&D       SETB  1\n         AGO   .L7\n.L4      AIF   ('&PL(&A)' NE 'IO').L5\n&I       SETB  1\n         AGO   .L7\n.L5      AIF   ('&PL(&A)' NE 'MESSAGE').L6\n&M       SETB  1\n         AGO   .L7\n.L6      MNOTE 4,'UNKNOWN PL PARAMETER = &PL(&A)'\n.L7      ANOP\n&A       SETA  &A+1\n         AIF   (&A LE N'&PL).L1\n         AIF   ('&PARSE(2)' EQ '').L7E\n&M       SETB  1                        GENERATE THE MESSAGE STUFF\n.L7E     AIF   (NOT &C).L8\n         TSCSPL\n.L8      AIF   (NOT &P).L9\n         TSPPL\n.L9      AIF   (NOT &D).L10\n         TSDAPL\nDAPBAREA DS    22F *                    AREA FOR DAIR PARAMETER BLOCK\n         TSDMPL\n.L10     AIF   (NOT &I).L11\n         TSIOPL\n.L11     AIF   (NOT &M).L12\n         TSMPL\n.L12     ANOP\n&J       SETA  0\n.L12L    ANOP\n&J       SETA  &J+1\n         AIF   ('&LOAD(&J)'  EQ  '').L12Z\n&LOAD(&J) DS   F\n         AGO   .L12L\n.L12Z    AIF   ('&MACRO' NE 'YES').L12A\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        DYNAMIC STORAGE DEFINED BY USER TSWORK MACRO                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n         DS    0D                       BEGIN ON DOUBLE WORD BOUNDARY\n         TSWORK\n.L12A    AIF   ('&GETMAIN' EQ '0').L12B\nTSWORK   DS    0D                       POINTER TO USER WORK AREA\n.L12B    ANOP\nTSDSECTL DS    0D\n         AIF   ( NOT &D ).NODM\n         AIF   ( &GDAIRM ).NODM\n&GDAIRM  SETB  1                        SET 1 TIME FLAG\n         EJECT\n         IKJDAP08\nDAPB08L  EQU   *-DAPB08 *               LENGTH OF DAPB08 BLOCK\n         EJECT\n         IKJDAP18\nDAPB18L  EQU   *-DAPB18 *               LENGTH OF DAPB18 BLOCK\n         SPACE 3\n         IKJDAP1C\nDAPB1CL  EQU   *-DAPB1C *               LENGTH OF DAPB1C BLOCK\n         EJECT\n         IKJDAP30\nDAPB30L  EQU   *-DAPB30 *               LENGTH OF DAPB30 BLOCK\n.NODM    ANOP\n&J       SETA  0\n         AGO   .L32B\n.L32L    ANOP\n         MNOTE *,'GENERATED DSECT FOR &MAP(&J) '\n.L32B    ANOP\n&J       SETA  &J+1\n         AIF   ('&MAP(&J)'  EQ  '').L32Z\n         EJECT\n         AIF   ('&MAP(&J)' EQ 'ECT').ECT\n         AIF   ('&MAP(&J)' EQ 'PBE').PBE\n         AIF   ('&MAP(&J)' EQ 'PSCB').PSCB\n         AIF   ('&MAP(&J)' EQ 'UPT').UPT\n         AIF   ('&MAP(&J)' EQ 'DSE').DSE\n         AIF   ('&MAP(&J)' EQ 'JSCB').JSCB\n         AIF   ('&MAP(&J)' EQ 'TSCVT').TSCVT\n         AIF   ('&MAP(&J)' EQ 'TJB').TJB\n         AIF   ('&MAP(&J)' EQ 'TJBX').TJBX\n         AIF   ('&MAP(&J)' EQ 'TSB').TSB\n         AIF   ('&MAP(&J)' EQ 'TCB').TCB\n         AIF   ('&MAP(&J)' EQ 'CVT').CVT\n         AIF   ('&MAP(&J)' EQ 'ECTX').ECTX\n         AIF   ('&MAP(&J)' EQ 'TAT').TAT\n         AIF   ('&MAP(&J)' EQ 'UVT').UVT\n         AIF   ('&MAP(&J)' EQ 'DAPB00').DAPB00\n         AIF   ('&MAP(&J)' EQ 'DAPB04').DAPB04\n         AIF   ('&MAP(&J)' EQ 'DAPB10').DAPB10\n         AIF   ('&MAP(&J)' EQ 'DAPB14').DAPB14\n         AIF   ('&MAP(&J)' EQ 'DAPB2C').DAPB2C\n         AIF   ('&MAP(&J)' EQ 'DAPB34').DAPB34\n         AIF   ('&MAP(&J)' EQ 'PDEDSECT').PDEDS\n         MNOTE 4,'UNSUPPORTED MAP PARAMETER &MAP(&J) '\n         AGO   .L32L\n.ECT     IKJECT\n         AGO   .L32L\n.ECTX    ECTX\n         AGO   .L32L\n.PBE     PBE\n         AGO   .L32L\n.PSCB    IKJPSCB\n         AGO   .L32L\n.UPT     IKJUPT\n         AGO   .L32L\n.DSE     IKJDSE\n         AGO   .L32L\n.TSB     IKJTSB\n         AGO   .L32L\n.UVT     ANOP\nUVT      DSECT\n         CCNUVT\n         AGO   .L32L\n.TCB     IKJTCB\n         AGO   .L32L\n.CVT     ANOP\nCVT      DSECT\n         CVT\n         AGO   .L32L\n.JSCB    IEZJSCB\n         AGO   .L32L\n.TSCVT   IKJTSCVT\n         AGO   .L32L\n.TJB     IKJTJB\n         AGO   .L32L\n.TJBX    IKJTJBX\n         AGO   .L32L\n.DAPB00  IKJDAP00\nDAPB00L  EQU   *-DAPB00                 LENGTH OF DAPB00\n         AGO   .L32L\n.DAPB04  IKJDAP04\nDAPB04L  EQU   *-DAPB04                 LENGTH OF DAPB04\n         AGO   .L32L\n.DAPB10  IKJDAP10\nDAPB10L  EQU   *-DAPB10                 LENGTH OF DAPB10\n         AGO   .L32L\n.DAPB14  IKJDAP14\nDAPB14L  EQU   *-DAPB14                 LENGTH OF DAPB14\n         AGO   .L32L\n.DAPB2C  IKJDAP2C\nDAPB2CL  EQU   *-DAPB2C                 LENGTH OF DAPB10\n         AGO   .L32L\n.DAPB34  IKJDAP34\nDAPB34L  EQU   *-DAPB34                 LENGTH OF DAPB34\n         AGO   .L32L\n.PDEDS   PDEDSECT\n         AGO   .L32L\n.TAT     CCNUID\n         EJECT\nTAT      DSECT\n         CCNTAT\n         AGO   .L32L\n.L32Z    AIF   ('&SYMREG' NE 'YES').L13\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*                   DEFINE SYMBOLIC REGISTERS                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nR0       EQU   0                        THE SYMBOLIC REGISTERS\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.L13     AIF   ('&DSECT' NE 'NO').L19\n         EJECT\n&LBL     CSECT\n         TSAVE (14,12),,*\n         AIF   (&N EQ 0).ONEENT         IF ONLY ONE ENTRY POINT\n&COM     SETC  'TSE&SYSNDX.C'\n.*       MVI   16(R13),0                PRIMARY ENTRY POINT NUMBER * 4\n         XR    R4,R4                    PRIMARY ENTRY POINT NUMBER * 4\n         B     &COM-&LBL.(R15)          GO TO COMMON ENTRY\n&X       SETA  1\n.ELOOP   ANOP\n         SPACE 2\n         ENTRY &EPS(&X)                 ALTERNATE ENTRY POINT\n&EPS(&X) SAVE  (14,12),,*\n.*       MVI   16(R13),&X*4             ENTRY POINT NUMBER * 4\n         LA    R4,&X*4                  ENTRY POINT NUMBER * 4\n&X1      SETA  &X+1                     X + 1\n         AIF   (&X1 GT &N).EDONE        IF NEXT IS NULL, NO BRANCH\n         B     &COM-&EPS(&X)(R15)       GO TO COMMON ENTRY\n&X       SETA  &X+1                     NEXT ENTRY POINT\n         AGO   .ELOOP                   PROCESS NEXT ENTRY\n.EDONE   SPACE 2\n&COM     BALR  &BASE(1),0               LOAD BASE REGISTER\n&ADD     SETC  'TSE&SYSNDX.B'\n&ADD     EQU   *                        PROGRAM BASE LOCATION\n         USNGX &ADD,&BASE(1)            COMMON PROGRAM ADDRESSIBLITY\n         AGO   .MULTENT                 JOIN COMMON\n.ONEENT  USNGX &ADD,&BASE(1)            ESTABLISH PROGRAM\n         LR    &BASE(1),R15             ADDRESSIBLITY\n.MULTENT AIF   ('&BASE(2)' EQ '').NOBASE2\n         LA    &BASE(2),4095(&BASE(1))  EXTEND PROGRAM ADDRESSIBLITY\n         LA    &BASE(2),1(&BASE(2))     WITH 2ND PROGRAM BASE REGISTER\n         USNGX &ADD+4096,&BASE(2)\n         AIF   ('&BASE(3)' EQ '').NOBASE2\n         MNOTE 8,'BASE REGISTER &BASE(3) WAS NOT ESTABLISHED'\n         MNOTE 8,'ONLY 2 BASE REGISTERS ARE SUPPORTED'\n.NOBASE2 LR    R5,R1                    SAVE PTR TO CPPL\n         GETMAIN R,LV=TSDSECTL-TSDSECT+&GETMAIN,SP=&SP\n         ST    R13,4(R1)                DO SAVE AREA CHAINING\n         ST    R1,8(R13)\n         LR    R13,R1                   ESTABLISH ADDRESSABILITY\n         USNGX TSDSECT,R13              FOR THE TSDSECT\n         MVC   CPPL(CPPLL),0(R5)        COPY CPPL TO TS AREA\n         AIF   (NOT(&C OR &P OR &D OR &I OR &M)).L18A\n         L     R1,CPPLUPT               GET PTR TO UPT\n         L     R2,CPPLECT               GET PTR TO ECT\n         LA    R3,TSECB                 GET PTR TO ECB\n         SR    R0,R0                    CLEAR ECB\n         ST    R0,TSECB\n         AIF   (NOT &C).L14\n         STM   R1,R3,CSPL               INITIALIZE CSPL\n         ST    R0,CSFLG                 ZERO CSFLG\n         LA    R0,CSFLG\n         ST    R0,CSPLFLG\n         LA    R0,CSOA\n         ST    R0,CSPLOA\n.L14     AIF   (NOT &P).L15\n         STM   R1,R3,PPL                INITIALIZE PPL. UPT,ECT,ECB\n         LA    R0,TSPARANS              ADRS OF PARSE ANSWER PLACE\n         ST    R0,PPLANS                POINTER TO ADRS OF PARSE ANSWER\n         ST    R13,PPLUWA               PARSE USER WORK AREA POINTER\n         XC    TSPARANS(4),TSPARANS     TO AVOID DUPLICATE IKJRLSA\n.L15     AIF   (NOT &D).L16\n         STM   R1,R3,DAPL               INITIALIZE DAPL\n         L     R0,CPPLPSCB              GET PTR TO PSCB\n         ST    R0,DAPLPSCB              SET POINTER TO PSCB\n.L16     AIF   (NOT &I).L17\n         STM   R1,R3,IOPL               INITIALIZE IOPL\n.L17     AIF   (NOT &M).L18A\n         ST    R3,MPLECB                INITIALIZE MPL, PTR TO ECB\n         LA    R0,CPPL                  ADDRESS OF CPPL\n         ST    R0,MPLCPPL               PTR TO CPPL\n         LA    R0,MPLCSECT              PTR TO MESSAGE CSECT\n         ST    R0,MPLCSECP              PTR TO MESSAGE CSECT ADDRESS\n         XC    MPLSW(MPLZL),MPLSW       INITIALIZE REMAINING MPL TO 0\n.L18A    ANOP\n&J       SETA  0\n.L72L    ANOP\n&J       SETA  &J+1\n         AIF   ('&LOAD(&J)'  EQ  '').L72Z\n         SPACE 2\n         LOAD  EP=&LOAD(&J)\n         ST    R0,&LOAD(&J)\n         MNOTE *,'MODULE  &LOAD(&J) LOADED'\n         AIF   ('&LOAD(&J)'  NE  'IKJDAIR').L72P\n&GDAIR   SETB  1                        INDICATE DAIR LOADED\n         AGO   .L72L\n.L72P    AIF   ('&LOAD(&J)'  NE  'IKJPARS').L72L\n&GPARSE  SETB  1                        PARSE WAS LOADED\n&PARNAME SETC  'IKJPARS'\n         AGO   .L72L\n.L72Z    AIF   ('&PARSE(1)'   EQ '').L57K\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        PARSE THE COMMAND LINE                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         TSPARSE CBUF=(CPPLCBUF,I),PCL=(=V(&PARSE(1)),I),              *\n               SYNAD=&PARSE(2),ENTRY=&PARNAME\n         MNOTE *,'COMMAND LINE WILL BE PARSED'\n.L57K    AIF   ('&PARSE(2)' EQ '' AND '&EXIT' EQ '').L18\n         B     TSE&SYSNDX\n         AIF   ('&PARSE(2)'  EQ  '' OR &GPARSEM EQ 1).L57M\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        PARSE ERROR ANALYSIS SUBROUTINE                              *\n*                                                                     *\n***********************************************************************\n         TSPARERR\n         MNOTE  *,'PARSE ERROR ANALYSIS ROUTINE GENERATED'\n&GPARSEM SETB  1                        PARSE ERROR ANALYSIS GENERATED\n.L57M    AIF   ('&EXIT' EQ '').L58K\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        COMMAND PROCESSOR EXIT                                       *\n*                                                                     *\n***********************************************************************\n        MNOTE *,' BRANCH TO &EXIT WITH RC IN R15 TO EXIT'\n         SPACE 2\n&EXIT(1) EXIT  RC=(15),LV=TSDSECTL-TSDSECT+&GETMAIN,SP=&SP\n.L58K    SPACE 2\nTSE&SYSNDX DS  0H\n.L18     AIF   (&N EQ 0).L18W\n         LR    R15,R4                   SET ENTRY POINT NUMBER * 4\n         MNOTE *,' REGISTER 15 CONTAINS ENTRY POINT NUMBER * 4'\n         SPACE\n.L18W    MNOTE *,' THE FOLLOWING BASE REGISTERS HAVE BEEN ESTABLISHED'\n         MNOTE *,' '\n         MNOTE *,'         USING TSDSECT,R13'\n         MNOTE *,'         USING &ADD,&BASE(1) '\n         AIF   ('&BASE(2)' EQ '').L19\n         MNOTE *,'         USING &ADD+4096,&BASE(2)'\n.L19     SPACE 4\n         MEND\n         SPACE 5\n         MACRO\n&LBL     EXIT  &LV=72,&SP=1,&RC=0,&SVC3=NO\n.*$MACRO=EXIT       DATE=04/00/79       SOURCE=UCLA\n&LBL     LR    R1,R13                   SAVE FREEMAIN ADD\n         L     R13,4(R13)               UNCHAIN\n         AIF   ('&RC' EQ '&RC(1)').L0\n         ST    &RC(1),16(R13)            SAVE RETURN CODE\n.L0      ANOP\n         FREEMAIN R,LV=&LV,A=(1),SP=&SP\n         LM    R14,R12,12(R13)\n         AIF   ('&RC' EQ '&RC(1)').L00\n         AGO   .L2\n.L00     AIF   ('&RC' EQ '0').L1\n         LA    R15,&RC\n         AGO   .L2\n.L1      ANOP\n         SR    R15,R15\n.L2      AIF   ('&SVC3' NE 'YES').L3\n         SVC   3\n         MEXIT\n.L3      ANOP\n         BR    R14\n         MEND\n         TITLE 'C A L C  -  THE DRIVER FOR THE DESK CALCULATOR.'\n         MACRO\n         TSWORK\nTPUTSAVE DS    5F                       REGISTER SAVE AREA\nTGETLEN  DS    H                        LENGTH OF LAST TGET\n         DS    H                        UNUSED\nTMPMAC   TMPMAC MF=L                    REMOTE LIST FOR TMPMAC\nTMPMACL  EQU   *-TMPMAC                 LENGTH OF THE LIST\nCSTEMP   DS    F                        POINTER TO 4K\nCALCFLAG DS    F\nCSUSER   DS    26D\n         DS    D\n         DS    18F\n         DS    F\n         DS    F\nCSSTOR   DS    900X\nPFLAG    DS    X\n         DS    3X\nCARD     DS    (CHRMAX+5)X\nPSTACK   DS    (FACTOR)X\n         DS    0D\nOUTSTAK  DS    144X\nBUFF     EQU   CARD\n         MEND\n         SPACE 2\n         MACRO\n&LABEL   SETUP &FAKE\n         AIF   ('&LABEL' EQ '').END\n&LABEL   DS    0H\n.END     MEND\n         SPACE 2\n*        ASSEMBLY PARAMETERS\nLINEMAX  EQU   2                     THE MAXIMUM NUMBER OF LINES INPUT\nFACTOR   EQU   LINEMAX*220+10\nCHRMAX   EQU   LINEMAX*40            THE MAXIMUM NUMBER OF CHARS INPUT\n         EJECT\nCALC     TSENTRY BASE=R12,MACRO=YES,EXIT=EXIT,GETMAIN=4096,MAP=ECT\nF0       EQU   0\nF2       EQU   2\nF4       EQU   4\nF6       EQU   6\n         EJECT\n         XC    CALCFLAG(4),CALCFLAG\n         XC    PFLAG(1),PFLAG           CLEAR FLAGS\n         XC    CSUSER(250),CSUSER       CLEAR USER STORE\n         XC    CSUSER+250(250),CSUSER+250   AND MORE...\n         SPACE 2\n         LA    R0,TSWORK                ADDRESS OF 4K GETMAINED  *WDD*\n         ST    R0,CSTEMP                IN CSTEMP                *WDD*\n         L     R0,=XL4'08260000'     INITILIZE SAVE STACK.\n         ST    R0,CSSTOR             AT THIS POINT.\n         SPIE  PROGERR,(12,15)          SET UP SPIE EXIT          *WDD*\n         L     R1,CPPLECT               ADDRESS OF ECT            *WDD*\n         TM    ECTSWS-ECT(R1),ECTNOPD   OPERANDS PRESENT          *WDD*\n         BO    MAIN2                    NO                       *WDD*\n         MVI   BUFF,X'03'               PRIME THE BUFFER         *WDD*\n         MVC   BUFF+1(CHRMAX),BUFF      FOR 81 CHARACTERS        *WDD*\n         L     R15,CPPLCBUF             POINTER TO CBUF          *WDD*\n         LH    R1,0(R15)                LENGTH OF CBUF           *WDD*\n         LH    R2,2(R15)                OFFSET TO OPERANDS\n         AH    R2,=H'4'                 RELATIVE TO CBUF\n         SR    R1,R2                    LENGTH OF OPERANDS\n         BNP   MAIN2                                              *WDD*\n         STH   R1,TGETLEN               SIMULATE THE TGET LENGTH  *WDD*\n         LA    R15,0(R2,R15)            POINT AT OPERANDS         *WDD*\n         BCTR  R1,0                     -1 FOR EXECUTE\n         EX    R1,#MVC#\n#MVC#    MVC   BUFF(0),0(R15)           == EXECUTED MVC ===\n         LH    R1,TGETLEN\n         B     MAIN3\n         EJECT\n         INUSE\nMAIN2    EQU   *                     YES...\n         L     R1,CPPLECT               ADDRESS OF ECT            *WDD*\n         TM    ECTSWS-ECT(R1),ECTNOPD   OPERANDS PRESENT ?        *WDD*\n         BZ    LEAVE                    ES  ... LEAVE\n*WDD*    LA    R2,MSG                SET UP REG 2\n         SETUP                       NOW THE HEADING.\n         TPUTX 'CALC: ',ASIS         WAS'ENTER EQUATION;'\n         SPACE 3\nMAIN1    EQU   *                        WAITING FOR A REPLY.\n         MVI   BUFF,X'03'\n         MVC   BUFF+1(CHRMAX),BUFF      TOTAL OF 81 BYTES\n         LA    R1,BUFF                  INPUT BUFFER ADDRESS\n         LA    R0,CHRMAX-1              MAXIMUM LENGTH TO READ\n         O     R1,=X'80000000'          INDICATE TGET\n         TGET  (1),(0),R                GET A STRING\n         SPACE 2\n         BXH   R15,R15,MAIN2            ON ANY ERROR  OR ATTENTION\n         LTR   R1,R1                    WAS ANYTHING READ ?\n         BZ    MAIN2                    NO\n         STH   R1,TGETLEN               LENGTH OF STRING\n         SPACE\nMAIN3    LA    R15,BUFF                 FOLD THE INPUT TO UPPER CASE\nUPPERL   OI    0(R15),X'40'             FOLD THIS CHARACTER\n         LA    R15,1(R15)               POINT TO NEXT CHARACTER\n         BCT   R1,UPPERL                LOOP FOR STRING LENGTH\n         EJECT\n         INUSE\n         CLC   BUFF(6),=C'POLISH'    HOW ABOUT POLISH....\n         BE    POLISHF               YES...\n         CLC   BUFF(6),=C'RESUME'    DID HE SAY RESUME...\n         BE    RESUME                YES...\n         CLC   BUFF(3),=C'END'\n         BE    LEAVE                 YES...\n         CLC   BUFF(4),=C'AUTO'\n         BE    AUTO\n         CLC   BUFF(3),=C'DO '       DID HE SAY DO    ...         *WDD*\n         BE    DO                    YES...                       *WDD*\n         CLC   BUFF(4),=C'HELP'      DID HE SAY HELP  ...         *WDD*\n         BE    HELP                  YES...                       *WDD*\n         CLI   BUFF,C'?'                ? ENTERED                 *WDD*\n         BNE   NOSUBCMD                 NO                        *WDD*\n         SPACE 2\n         TPUTX 'ENTER AN EQUATION, SUBCOMMAND OR END'             *WDD*\n         B     MAIN2                                              *WDD*\nPOLISHF  OI    PFLAG,X'01'\n         B     MAIN2\nRESUME   NI    PFLAG,X'FE'              TURN OFF POLISH\n         B     MAIN2\nAUTO     XI    CALCFLAG,B'10000000'\n         B     MAIN2\nLEAVE    XR    R15,R15                  ZERO RETURN CODE\n         B     EXIT                     AND EXIT\n         EJECT\nNOSUBCMD XC    OUTSTAK(8),OUTSTAK    CLEAR OUTPUT AREA FOR US.\n         LA    R1,BUFF               GET THE ADDRESS OF THE BUFFER.\n         LR    R2,R1                 IN BOTH PLACES.\n         ZGPR  R0                    CLEAR SOME GPR'S\n         ZGPR  R3                    ...\n         ZGPR  R8                    ...\n         ZGPR  R9                    ...\n         LA    R4,X'03'              GET A CURSOR.                  SSL\n         LA    R5,X'15'              AND OTHER CHARACTERS.\n         LA    R6,X'7F'              ...\n         LA    R7,X'40'              ...\nLOOP1    IC    R0,0(R1)              GET EACH CHARACTER\n         CR    R0,R4                 AND GO AROUND THE STORE IF\n         BE    FOUND                 IT BELONGS TO THE SPECIAL\n         CR    R0,R5                 GROUP.\n         BE    ADD                   ...\n         CR    R0,R6                 ...\n         BE    ADD                   ...\n         CR    R0,R7                 ...\n         BE    ADD                   ...\n         STC   R0,0(R2,R3)           OK. STORE THE CHARACTER.\n         ADDG  R3,1                  ADD ONE TO THE COUNT.\n         C     R3,=A(CHRMAX+1)\n         BE    CALC$ERO              YES...\n         ADDG  R8,1                  ADD ONE TO POSITIONAL COUNT.\n         C     R8,=F'40'             IS IT AT 40...\n         BL    ADD                   NO\n         ZGPR  R8                    YES, ZERO IT...\n         ADDG  R9,1                  ADD ONE TO THE LINE COUNT.\nADD      ADDG  R1,1                  ADD ONE TO INPUT LOC.\n         B     LOOP1                 GO BACK.\nFOUND    C     R3,=F'0'              NO COUNT OF CHARACTERS...\n         BE    MAIN2                 YES...                      *WDD*\n         TM    CALCFLAG,B'10000000'\n         BZ    NOUSE\n         LA    R1,0(R2,R3)\n         S     R3,=F'1'\n         LA    R15,0(R2,R3)\n         CLI   R0(R15),C':'\n         BE    NOPRT\n         CLI   0(R15),C';'\n         BE    NOPRT\n         MVC   0(5,R1),USEITT\n         LA    R3,6(R3)\n         LA    R14,5\n         B     NOUSEA\nNOPRT    MVC   0(4,R1),USEITT+1\n         LA    R3,5(R3)\n         LA    R14,4\nNOUSEA   LA    R8,0(R14,R8)\n         C     R8,=F'40'\n         BL    NOUSE\n         S     R8,=F'40'\n         ADDG  R9,1\nNOUSE    EQU   *\n         LA    R0,38                 SET UP LAST CHARACTER\n         STC   R0,0(R2,R3)           STORE IT\n         L     R15,CSTEMP\n         USNGX STACKS,R15\n         LA    R1,TS1\n         ST    R1,A1T1\n         ST    R1,A2T1\n         LA    R1,TS2\n         ST    R1,A1T2\n         LA    R1,TS3\n         ST    R1,A1T3\n         ST    R1,A2T3\n         LA    R1,TS4\n         ST    R1,A1T4\n         ST    R1,A2T4\n         DROPX R15\n         LA    R1,CARD               RESTORE ADDRESS OF CARD.\n         ST    R1,LIST1              STOER IT IN LIST ONE.\n         LA    R1,PSTACK             GET ADDRESS OF STACK.\n         ST    R1,LIST1+4            STORE IT IN LIST ONE\n         L     R1,=A(LIST1)          GET ARGUMENT ADDRESS.\n         L     R15,=V(PGEN)          AND ADDRESS OF POLISH GENERATOR\n         BALR  R14,R15               GO THERE\n         LTR   R15,R15               TEST REG R15 AT RETURN\n         BC    6,CALC$ERR            NO ZERO MEANS ERROR.\n         TM    PFLAG,1               TEST FOR POLISH.\n         BO    PDISP                 YES... DISPLAY POLISH LINE.\n         LA    R1,PSTACK             GET ADDRESS OF POLISH STACK\n         ST    R1,LIST2              STORE IT IN LIST TWO\n         LA    R1,CSUSER             GET ADDRESS OF USER\n         ST    R1,T1                 STORE IN IN LIST TWO\n         LA    R1,OUTSTAK            GET ADDRESS OF OUTPUT AREA\n         ST    R1,T2                 STORE IT IN LIST TWO\n         L     R1,=A(LIST2)          GET ARGUMENT ADDRESS\n         STM   R2,R13,SPIESAVE                                    *WDD*\n         L     R15,=V(XCUTER)        AND ADDRESS OF INTERPRETER\n         BALR  R14,R15               GO THERE\n         LTR   R15,R15               TEST REGISTER R15\n         BC    6,CALC$ERR            NON ZERO MEANS ERROR\n         LA    R1,64                 GET A BLANK\n         LTR   R8,R8                 TEST POSITIONAL COUNT.\n         BZ    LOOP2                 IF ZERO THE END OF A LINE\nLOOP3A   STC   R1,0(R2,R3)           FILL OUT THE LINE WITH\n         ADDG  R3,1                  BLANKS\n         ADDG  R8,1                  ...\n         C     R8,=F'40'             AT END OF LINE...\n         BL    LOOP3A                NO...\n         ADDG  R9,1                  ADDONE TO LINE COUNT.\nLOOP2    LR    R4,R3                 TRANSFER CHARACTER COUNT.\nLOOP4    STC   R1,0(R2,R3)           CONTINUE FILLING SCREEN\n         ADDG  R3,1                  IMMAGE WITH BLANKS\n         C     R3,=F'479'            ...\n         BNH   LOOP4                 ...\n         AR    R2,R4                 FIND FIRST OUTPUT POINT\n         LA    R3,OUTSTAK            GET ADDRESS OF OUTPUT AREA\n         LR    R10,R9                TRANSFER LINE COUNT.\nLOOP31   C     R10,=F'12'            ARE WE AT THE END OF THE SCREEN...\n         BE    EOB1                  YES...\n         LM    R15,R1,0(R3)          GET THE OUTPUT RESUMT.\n         LTR   R15,R15               IS IT A XERO LAGEL\n         BZ    EOB1\n         ADDG  R3,12                 ADD TO INPUT COUNT.\n         ADDG  R10,1                 NO, ADD ONE TO LINE COUNT.\n         ZGPR  R5                    NO, CLEAR GPRS...\n         ZGPR  R14                   ...\nSHIFT1$  SLDL  R14,8                 SHIFT CHARACTER INTO R14\n         LTR   R14,R14               IS IS ZERO\n         BZ    SHIFT1$               YES, BRANCH BACK.\nSTORE1   STC   R14,0(R2,R5)          NO, STOER IT\n         ADDG  R5,1                  ADD ONE TO COUNT\n         ZGPR  R14                   ZERO GPR R14\n         SLDL  R14,8                 SHIFT ONE MORE\n         LTR   R14,R14               IS IT ZERO\n         BP    STORE1                NO, STORE IT.\n         LA    R14,126               GET AN EQUALS SIGN.\n         STC   R14,4(R2)             STORE IT AWAY.\n         LA    R5,6(R2)              GET A NEW ADDRESS.\n         STM   R0,R1,STORE           STORE OUTPUT IN STORAGE.\n         LD    F6,STORE              GET INTO FPR 6.\n         LTDR  F0,F6                 TEST FOR ZERO...\n         BZ    CALCZERO              ...\n         BP    GOON1                 GO THERE IS POSITIVE.\n         LPDR  F0,F0                 MAKE IT POSITIVE.\n         MVI   0(R5),C'-'            MOVE IN THE MINUS SIGN.\nGOON1    ADDG  R5,1                  ADDONE TO COUNT.\n         CE    F0,=E'1E10'           IS THE NUMBER GREATER THAN 10\n         BH    EOUT                  YES...\n         CE    F0,=E'1E-3'           IS THE NUMBER LESS AND 0.0001\n         BL    EOUT                  YES...\n         BAL   R14,OUTCNV            OTHERWISE OUTPUT F FORMAT.\n         B     LOOP3                 GO AROUND THIS CODE.\nEOUT     EQU   *                     EXPONENTIAL OUTPUT.\n         ZGPR  R9                    CLEAR GPR R9\n         CE    F0,=E'1'\n         BL    NEGEXP\nTEST$    CE    F0,=E'10'\n         BL    GOON2\n         DD    F0,=D'10'\n         ADDG  R9,1\n         B     TEST$\nGOON2    BAL   R14,OUTCNV\n         B     EXPOUT\nNEGEXP   CE    F0,=E'1'\n         BH    GOON3\n         ADDG  R9,1\n         MD    F0,=D'10'\n         B     NEGEXP\nGOON3    BAL   R14,OUTCNV\n         LNR   R9,R9\nEXPOUT   LTR   R9,R9\n         BZ    ZERO1\n         MVI   24(R2),C'E'\n         LTR   R9,R9\n         BP    GOGO\n         MVI   25(R2),C'-'\n         LPR   R9,R9\nGOGO     CVD   R9,STORE\n         UNPK  26(2,R2),STORE+6(R2)\n         OI    27(R2),X'F0'\nZERO1    B     LOOP3\nCALCZERO MVC   7(3,R2),=C'0.0'\nLOOP3    MVC   20(4,R2),24(R2)          MOVE EXPON LEFT 4 BYTES  *WDD*\n         MVC   24(4,R2),=C'    '        AND BLANK OLD EXPONENT   *WDD*\n*        THIS GETS RID OF 4 DIGITS WHICH ARE NOT WITHIN THE ACCURACY\n         ADDG  R2,40\n         B     LOOP31\n         SPACE 2\nOUTCNV   SR    R4,R4\n         SR    R15,R15\n         BCTR  R4,0\nREDUC    CD    F0,=D'10'\n         BL    LESS\n         DD    F0,=D'10'\n         ADDG  R15,1\n         BCT   R4,REDUC\nLESS     LPR   R4,R4\n         STE   F0,T\n         MVC   T+1(3),=XL3'0'\n         AD    F0,T\n         SR    R6,R6\nOLOOP    BCT   R6,FRC\n         BR    R14\nFRC      SDR   F2,F2\n         LE    F2,=XL4'4E000000'\n         AWR   F2,F0\n         STD   F2,WORD\n         AD    F2,=D'0'\n         SDR   F0,F2\n         BP    SET\n         LTR   R4,R4\n         BP    SET\n         TM    WORD+7,X'FF'\n         BZR   R14\nSET      MD    F0,=D'10'\n         OI    WORD+7,X'F0'\n         MVC   0(1,R5),WORD+7\n         LA    R5,1(R5)\n         BCT   R4,OLOOP\n         MVI   0(R5),C'.'\n         LA    R5,1(R5)\n         LA    R6,16\n         SR    R6,R15\n         B     OLOOP\nEOB1     C     R10,=F'10'\n         BNH   PUTOUT\n         L     R15,0(R3)\n         LTR   R15,R15\n         BZ    CALC$EOB\n         SH    R2,=H'2'\n         MVC   0(1,R2),=C'*'\nCALC$EOB ZGPR  R2\nWRITE    EQU   *\n         TPUTX BUFF,479,MF=B\n         BAL   R14,$TPUTX               PUT BUFFER 40 CHAR AT A TIME\n         B     MAIN2\n         SPACE 2\nPUTOUT   LA    R3,BUFF\n         SR    R2,R3\n         TPUTX BUFF,(R2),MF=B\n         BAL   R14,$TPUTX               PUT THE BUFFER TO TERMINAL\n         B     MAIN2                    WAS MAIN1                *WDD*\n         SPACE 2\nPDISP    EQU   *\n         LA    R1,64\n         LTR   R8,R8\n         BZ    LOOP5\nLOOP5A   STC   R1,0(R2,R3)\n         ADDG  R3,1\n         ADDG  R8,1\n         C     R8,=F'40'\n         BL    LOOP5A\nLOOP5    EQU   *\n         LA    R4,PSTACK\nCALC$GET STACKO R4,ENDDISP\n         LR    R14,R15\n         N     R14,=F'128'\n         BZ    DISPOP\n         N     R15,=F'64'\n         BZ    PUTT\n         LA    R1,123\n         B     PUTT\nDISPOP   BCE   CALC$EXP,R1,'%'\n         B     PUTT\nCALC$EXP LH    R1,=C'**'\nPUTT     EQU   *\n         ZGPR  R0\n         LTR   R1,R1\n         BNZ   SHIFTT\n         LA    R1,C' '\nSHIFTT   SLDL  R0,8\n         LTR   R0,R0\n         BZ    SHIFTT\nSTOREE   STC   R0,0(R2,R3)\n         ZGPR  R0\n         ADDG  R3,1\n         SLDL  R0,8\n         LTR   R0,R0\n         BNZ   STOREE\n         LA    R1,64\n         STC   R1,0(R2,R3)\n         ADDG  R3,1\n         B     CALC$GET\nENDDISP  LA    R1,64\nENDLOOP  STC   R1,0(R2,R3)\n         ADDG  R3,1\n         C     R3,=F'479'\n         BL    ENDLOOP\n         B     WRITE\n         EJECT\n         INUSE\nCALC$ERO LA    R15,7\n         LA    R1,38\n         STC   R1,0(R2,R3)\n         BCTR  R2,0\nCALC$ERR LR    R9,R15\n         LTR   R8,R8\n         BZ    LOOP21\n         LA    R1,64\nLOOP3B   STC   R1,0(R2,R3)\n         ADDG  R3,1\n         ADDG  R8,1\n         C     R8,=F'40'\n         BL    LOOP3B\nLOOP21   LR    R4,R3\nLOOP41   STC   R1,0(R2,R3)\n         ADDG  R3,1\n         C     R3,=F'479'\n         BNH   LOOP41\n         AR    R2,R4\n         C     R9,=F'16'\n         BL    KNOWN\n         IC    R8,ALPHANUM(R9)\n         STC   R8,ERMSG+4\n         MVC   0(40,R2),ERMSG\nCALC$BKK SETUP\n         ADDG  R2,40\n         LA    R3,BUFF\n         SR    R2,R3\n         TPUTX BUFF,(R2),MF=B\n         BAL   R14,$TPUTX               GO TPUT THE BUFFER\n         B     MAIN1\n         SPACE 2\nKNOWN    SLL   R9,2\n         L     R8,ATABLE(R9)\n         MVC   0(40,R2),0(R8)\n         ADDG  R2,40\n         MVC   0(40,R2),MSSG\n         B     CALC$BKK\n         EJECT\n         INUSE\n         USNGX PROGERR,R15\nPROGERR  LM    R3,R4,4(R1)\n         SRL   R4,24\n         LA    R5,BACK\n         SLL   R5,8\n         SRDL  R4,8\n         ST    R5,8(R1)\n         BR    R14\n         DROPX R15\n         SPACE 2\n         DROPX R12                                                *WDD*\nBACK     LR    R14,R3                   SAVE REGISTER R3\n         BALR  R15,0                    GET SOME ADDRESSIBLITY    *WDD*\n         USNGX *,R15                                              *WDD*\n         LM    R2,R13,SPIESAVE          RESTORE REGISTERS         *WDD*\n         DROPX R15                      NOT NEEDED               *WDD*\n         USNGX CALC,R12                 PGM ADDRSIBLITY NOW R12  *WDD*\n*WDD*    L     R13,4(R13)\n*WDD*    LM    R2,R12,28(R13)\n         LR    R9,R14\n         N     R9,=XL4'F'\n         LTR   R8,R8\n         BZ    LOOP22\n         LA    R1,64\nLOOP32   STC   R1,0(R2,R3)\n         ADDG  R3,1\n         ADDG  R8,1\n         C     R8,=F'40'\n         BL    LOOP32\nLOOP22   LR    R4,R3\nLOOP42   STC   R1,0(R2,R3)\n         ADDG  R3,1\n         C     R3,=F'479'\n         BNH   LOOP42\n         AR    R2,R4\n         LR    R5,R2\n         LR    R2,R9\n         SLL   R2,2\n         L     R1,BTABLE(R2)\n         MVC   0(40,R5),MESS1\n         MVC   40(40,R5),0(R1)\n         LA    R2,80(R5)\n         MVC   0(40,R2),MSSG\n         B     CALC$BKK                 GO WRITE MESSAGE\n         SPACE\nSPIESAVE DC    13F'0'                   REGS FOR SPIE RECOVERY  *WDD*\n         EJECT\n         INUSE\n*******************************************************************WDD*\n*\n* HELP         HELP SUBCOMMAND\n*\n* INPUT        BUFF - THE BUFFER\n*\n*******************************************************************WDD*\n         SPACE 2\nHELP     LH    R3,TGETLEN               LENGTH OF BUFFER\n         TMPMAC CMD=(BUFF,(R3)),EXEC=YES,DCB=0,STACK=YES,CMDFAIL=MSG,  $\n               MF=(E,TMPMAC),CMDLIB=YES,SCMD=YES,STAX=YES\n         SPACE 2\n         B     MAIN2                    GO READ NEW INPUT\n         EJECT\n         INUSE\n*******************************************************************WDD*\n*\n* DO           SEGMENT TO DO A TSO COMMAND AS A SUBCOMMAND\n*\n* INPUT        BUFF - THE BUFFER\n*\n*******************************************************************WDD*\n         SPACE 2\nDO       LH    R3,TGETLEN               LENGTH OF BUFFER\n         SH    R3,=H'3'                 - LENGTH OF COMMAND NAME\n         BNP   MAIN2                    NO OPERANDS WERE PRESENT\n         SPACE 2\n         TPUTX 'DOING'\n         SPACE 2\n         TMPMAC CMD=(BUFF+3,(R3)),EXEC=YES,DCB=0,STACK=YES,CMDFAIL=MSG,$\n               MF=(E,TMPMAC),STAX=YES\n         SPACE 2\n         TPUTX 'DONE'\n         B     MAIN2                    GO READ NEW INPUT\n         EJECT\n         INUSE\n*******************************************************************WDD*\n*\n* $TPUTX       SUBROUTINE TO DISPLAY THE OUTPUT BUFFER\n*              AT 40 BYTES PER LINE\n*\n* INPUT        R1 - POINTS TO BUFFER\n*              R0 - CONTAINS LENGTH TO DISPLAY\n*\n*******************************************************************WDD*\n         SPACE 2\n$TPUTX   STM   R14,R2,TPUTSAVE          SAVE REGISTERS\n         LA    R14,0(R1)                POINTER TO OUTPUT BUFFER\n         LR    R2,R0                    LENGTH OF THE STRING\n         B     TPUTX1                   BEGIN\n         SPACE\nTPUTXL   TPUT  (R14),(0)                PUT PART OF STRING\nTPUTXNO  LA    R14,40(R14)              POINT AT NEXT 40 CHAR\n         S     R2,=F'40'                SUBTRACT 40 FROM LENGTH\n         BNP   $TPUTXX                  IF NEG OR ZERO, DONE\n         SPACE\nTPUTX1   LA    R0,40                    MAXIMUM LENGTH OF LINE\n         CR    R2,R0                    REMAINING LENGTH > 40 ?\n         BH    *+6                      YES\n         LR    R0,R2                    NO, USE REMAINDER\n         LR    R1,R0                    LENGTH OF THIS LINE\n         LR    R15,R14                  STRING POINTER\nTPUTXL1  CLI   0(R15),C' '              DO NOT PRINT BLANK LINES\n         BNE   TPUTXL                   AT LEAST ONE NON BLANK\n         LA    R15,1(R15)               POINT AT NEXT CHARACTER\n         BCT   R1,TPUTXL1\n         B     TPUTXNO                  SKIP THIS LINE\n         SPACE\n$TPUTXX  LM    R14,R2,TPUTSAVE          RESTORE REGISTERS\n         BR    R14                      RETURN TO CALLER\n         EJECT\n         INUSE\n*ETUPT   TIME  BIN\n*WDD*    MVI   BMES3+3,C'A'\n*WDD*    LPR   R1,R0\n*WDD*    SR    R0,R0\n*WDD*    D     R0,=F'360000'\n*WDD*    C     R1,=F'12'\n*WDD*    BL    GOOK\n*WDD*    BE    *+8\n*WDD*    S     R1,=F'12'\n*WDD*    MVI   BMES3+3,C'P'\n*WDD*    WAS GOOK EQU *\n*WDD*    CVD   R1,BDTIME\n*WDD*    UNPK  BMES1+1(2),BDTIME+6(2)\n*WDD*    OI    BMES1+2,X'F0'\n*WDD*    LPR   R1,R0\n*WDD*    SR    R0,R0\n*WDD*    D     R0,=F'6000'\n*WDD*    CVD   R1,BDTIME\n*WDD*    UNPK  BMES2(2),BDTIME+6(2)\n*WDD*    OI    BMES2+1,X'F0'\n*WDD*    LPR   R1,R0\n*WDD*    SR    R0,R0\n*WDD*    D     R0,=F'100'\n*WDD*    CVD   R1,BDTIME\n*WDD*    UNPK  BMES3(2),BDTIME+6(2)\n*WDD*    OI    BMES3+1,X'F0'\n*WDD*    MVC   27(12,R2),BMES1\n*WDD*    MVI   39(R2),C' '\n*WDD*    TM    CSALTFLG+1,X'01'         TEST FOR MESSAGE WAITING\n*WDD*    BZ    *+8\n*WDD*    MVI   39(R2),C'*'\n*WDD*    BR    R14\n*MES1    DC    C'   .'\n*MES2    DC    C'  .'\n*MES3    DC    C'   AM'\n         EJECT\nALPHANUM DC    C'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nUSEITT   DC    C';USE:'\nWORD     DS    D\nSAVE     DS    F\nMSSG     DC    CL40'RE-ENTER EQUATION: '\n         CNOP  0,8\nT        DS    F\n         DC    F'4'\nSTORE    EQU   *\nBDTIME   DS    D\nERMSG    DC    CL40'ERR= , RE-ENTER EQUATION:'\nATABLE   DC    F'0'\n         DC    A(M1)\n         DC    A(M2)\n         DC    A(M3)\n         DC    A(M4)\n         DC    A(M5)\n         DC    A(M6)\n         DC    A(M7)\n         DC    A(M8,M9,M10,M11,M12,M13,M14,M15)\nAREA     DS    16X\n         CNOP  0,4\nLIST1    EQU   *\n         DC    F'0'\n         DC    F'0'\nA1T1     DC    F'0'\nA1T2     DC    F'0'\nA1T3     DC    F'0'\nA1T4     DC    F'0'\nLIST2    EQU   *\n         DC    F'0'\nA2T1     DC    F'0'\nA2T3     DC    F'0'\nT1       DC    F'0'\nA2T4     DC    F'0'\nT2       DC    F'0'\nMESS1    DC    CL40'*** A PROGRAM INTERRUPTION HAS OCCURRED.'\nBTABLE   DC    A(N0)\n         DC    A(N1,N2,N3,N4,N5,N6,N7,N8,N9,N10,N11,N12,N13,N14,N15)\n         LTORG\nSTACKS   DSECT\n         CNOP  0,8\nTS1      DS    (FACTOR*3)X\n         CNOP  0,8\nTS2      DS    (FACTOR*3)X\n         CNOP  0,8\nTS3      DS    (FACTOR*3)X\n         CNOP  0,8\nTS4      DS    4F\n         EJECT\nCALC     CSECT\nM1       DC    CL40'*** ILLEGAL CHARACTER ENCOUNTERED.'\nM2       DC    CL40'*** LABEL TOO LONG.'\nM3       DC    CL40'*** PROGRAM ERROR '\nM4       DC    CL40'*** UNBALANCED PARENTHESIS.'\nM5       DC    CL40'*** LITERAL TOO LARGE.'\nM6       DC    CL40'*** ILLEGAL OPERATOR SEQUENCE.'\nM7       DC    CL40'*** EQUATION TOO LONG.'\nM8       DC    CL40'*** ILLEGAL USE OF LITERAL.'\nM9       DC    CL40'*** TOO MANY OPERANDS FOR FUNCTION.'\nM10      DC    CL40'*** NEGATIVE SQRT NOT ALLOWED.'\nM11      DC    CL40'*** ILLEGAL KEY-WORD.'\nM12      DC    CL40'*** UNRECOGNIZED FUNCTION.'\nM13      DC    CL40'*** OVERFLOW OF SAVE AREA.'\nM14      DC    CL40'*** EXPONENTIAL GREATER THAN 174.67309.'\nM15      DC    CL40'*** LOG OF NUMBER LE ZERO NOT ALLOWED.'\nN0       DC    CL40'    IMPRECISE INTERRUPT'\nN1       DC    CL40'    MASKABLE'\nN2       EQU   N1\nN3       EQU   N1\nN4       EQU   N1\nN5       EQU   N1\nN6       EQU   N1\nN7       EQU   N1\nN8       EQU   N1\nN9       EQU   N1\nN10      EQU   N1\nN11      EQU   N1\nN12      DC    CL40'    EXPONENT OVERFLOW'\nN13      EQU   N1\nN14      EQU   N1\nN15      DC    CL40'    FLOATING-POINT DIVIDE'\n         LTORG\n*        END\n         TITLE 'THE E X E C U T E R.'\n*        PRINT NOGEN\nXCUTER   CSECT\n*        ARGUMENTS ( POINTER IN R0. )\n*        1) ADDRESS OF POLISH INPUT STRING.\n*        2) ADDRESS OF EXECUTER STACK.\n*        3) ADDRESS OF HOLD STACK.\n*        4) ADDRESS OF USER STORAGE AREA.\n*        5) ADDRESS OF TEMPORARY STOREAGE AREA ( 2 DOUBLE WORDS )\n*        6) ADDRESS OF OUTPUT STACK.\n*\n*        NOTE ON THE FLAG REGISTER.\n*\n*        BIT   MEANING\n*\n*        1     COMMA FOUND\n*        2     USE IN EFFECT\n*        4     MULTIPLE USE KEY WORD FOUND.\n*        8     EQUALS SIGN FOUND IN THIE EQUATION.\n*        16    SIMI-COLON FOUND (OR COLON)\n*        32    INTERRUPT (BOMB OUT)\n*        64    END OF RUN - ANY UNSTORED VARIABLES...\n*\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         USING XCUTER,R12\n         LR    R2,R1\nPOLISH   EQU   R3\nSTACK    EQU   R4\nUSER     EQU   R5\nTEMP     EQU   R6\nFLAGS    EQU   R7\nOPERR    EQU   R8\nCOMMAS   EQU   R9\nOUTPUT   EQU   R10\nSAVER    EQU   R11\n         L     POLISH,0(R2)\n         L     STACK,4(R2)\n         L     USER,12(R2)\n         L     TEMP,16(R2)\n         L     OUTPUT,20(R2)\n         L     COMMAS,8(R2)\n         ST    R13,4(USER)\n         ST    USER,8(USER)\n         LR    R13,USER\n         ADDG  USER,72\n         ZGPR  (R0,R15)\n         LA    R1,38\n         PLOP  COMMAS\n         ZGPR  FLAGS\n         USING UAREA,USER\n         SR    R14,R14\n         ST    R14,SAVCT\nMAIN4    ZGPR  R0\n         LA    R1,38\n         ZGPR  R15\n         PLOP  STACK\nMAIN     STACKO POLISH,THATSALL\n         LR    R14,R15\n         N     R14,=F'128'\n         BZ    OPER\n         PLOP  STACK\n         B     MAIN\nOPER     LR    OPERR,R1\n         BCE   COMMA3,R1,','\n         BCE   EQUALS,R1,'='\n         BCE   COLON,R1,':'\n         BCE   SIMI,R1,';'\n         BCE   MAIN,R1,'&&'\n         BCE   UNIRARY,R1,'_'\n         BCE   FUNC,R1,'|'\n         POPP  STACK,ERR1\n         LOOKUP\n         STM   R0,R1,0(TEMP)\n         LD    F2,0(TEMP)\n         POPP  STACK,ERR1\n         LOOKUP\n         STM   R0,R1,8(TEMP)\n         LD    F0,8(TEMP)\n         BCE   PLUS,OPERR,'+'\n         BCE   MINUS,OPERR,'-'\n         BCE   MULT,OPERR,'*'\n         BCE   DIV,OPERR,'/'\n         BCE   XCUT$EXP,OPERR,'%'\nERR1     EQU   *\nERR3     LA    R0,3\nXCUT$ERR L     R13,4(R13)\n         ST    R0,16(R13)\n         LM    R14,R12,12(R13)\n         BR    R14\nUNIRARY  POPP  STACK,ERR1\n         LOOKUP\n         STM   R0,R1,0(TEMP)\n         LD    F0,0(TEMP)\n         LCDR  F0,F0\nX$STORE  STD   F0,0(TEMP)\n         LM    R0,R1,0(TEMP)\n         LA    R15,192\n         PLOP  STACK\n         B     MAIN\nPLUS     ADR   F0,F2\n         B     X$STORE\nMINUS    SDR   F0,F2\n         B     X$STORE\nMULT     MDR   F0,F2\n         B     X$STORE\nDIV      DDR   F0,F2\n         B     X$STORE\nXCUT$EXP EQU   *\n         LD    F0,8(TEMP)\n         L     R15,ADLOG\n         BALR  R14,R15\n         LTR   R0,R15\n         BP    XCUT$ERR\n         MD    F0,0(TEMP)\n         L    R15,ADEXP\n         BALR  R14,R15\n         LTR   R0,R15\n         BP    XCUT$ERR\n         B     X$STORE\nCOMMA3   LR    R14,FLAGS\n         N     R14,=F'1'\n         BM    COMMA1\n         O     FLAGS,=F'1'\n         L     COMMAS,8(R2)\n         ZGPR  (R0,R15)\n         LA    R1,38\n         PLOP  COMMAS\n         POPP  STACK,ERR1\n         STM   R15,R1,0(TEMP)\n         POPP  STACK,ERR6\n         PLOP  COMMAS\n         LM    R15,R1,0(TEMP)\nCOMMA4   PLOP  COMMAS\n         B     MAIN\nCOMMA1   POPP  STACK,ERR1\n         B     COMMA4\nBLNK     L     R15,=C'____'\n         LM    R0,R1,0(TEMP)\n         LR    R14,FLAGS\n         N     R14,=F'64'\n         BM    STOREIT\n         CLC   SAVCT(4),=F'0'\n         BNE   MAIN\n         B     STOREIT\nEQUALS   O     FLAGS,=F'8'\n         POPP  STACK,ARND\n         LOOKUP\n         STM   R0,R1,0(TEMP)\n         STM   R0,R1,$$$$\n         POPP  STACK,BLNK\n         N     R15,=F'64'\n         BM    ERR2\n         LTR   R1,R1\n         BZ    ERR3\n         LR    OPERR,R1\n         ZGPR  R0\nSHIFT    SLDL  R0,8\n         LTR   R0,R0\n         BZ    SHIFT\n         LR    R1,R0\n         N     R1,=F'16'\n         BM    TWOS\n         LR    R1,R0\n         N     R1,=F'32'\n         BM    THREES\n         LA    R1,R0\n         B     SETUP\nTWOS     LA    R1,9\n         B     SETUP\nTHREES   LA    R1,17\nSETUP    N     R0,=F'15'\n         AR    R1,R0\n         S     R1,=F'1'\n         SLL   R1,3\n         LA    R15,MSTORAGE(R1)\n         LM    R0,R1,0(TEMP)\n         STM   R0,R1,0(R15)\n         CLC   SAVCT(4),=F'0'\n         BNE   MAIN\n         LR    R15,OPERR\nSTOREIT  L     R14,20(R2)\n         ADDG  R14,144\n         CR    OUTPUT,R14\n         BNL   ARND\n         PLOP  OUTPUT\n         ZGPR  R15\n         ST    R15,0(OUTPUT)\nARND     EQU   *\n         LR    R14,FLAGS\n         N     R14,=F'64'\n         BM    RETURN\n         LR    R14,FLAGS\n         N     R14,=F'16'\n         BM    XCUT$BKK\n         B     MAIN\nCOLON    POPP  STACK,TRYHOLD\n         N     R15,=F'64'\n         BM    ERR2\n         LTR   R1,R1\n         ZGPR  R15\nCOMP     L     R14,KEYWDS(R15)\n         C     R14,ENDWD\n         BE    NONE\n         ADDG  R15,8\n         CR    R14,R1\n         BNE   COMP\n         L     R14,ADS(R15)\n         BR    R14\nTRYHOLD  POPP  COMMAS,XCUT$BKK\n         LOOKUP\n         STM   R0,R1,0(TEMP)\n         LD    F6,0(TEMP)\n         LPDR  F6,F6\n         AW    F6,=X'4E00000000000000'\n         STD   F6,0(TEMP)\n         L     R14,4(TEMP)\n         ST    R14,SAVCT\n         POPP  COMMAS,ERR6\n         N     R15,=F'64'\n         BM    ERR2\n         O     FLAGS,=F'4'\n         ZGPR  R15\nCOMP1    L     R14,KEYWDS(R15)\n         C     R14,ENDWD\n         BE    NONE\n         ADDG  R15,8\n         CR    R14,R1\n         BNE   COMP1\n         L     R14,ADS(R15)\n         BR    R14\n         CNOP  0,8\nKEYWDS   DC    C'SAVE'\nADS      EQU   *-8\n         DC    A(XCUTSAVE)\n         DC    C'LOOP'\n         DC    A(USE)\n         DC    X'0'\n         DC    C'USE'\n         DC    A(USE)\n         DC    C'TACK'\n         DC    A(TACK)\n         DC    C'DISP'\n         DC    A(DISP)\nENDWD    DC    F'0'\nSIMI     O     FLAGS,=F'16'\n         LR    R14,FLAGS\n         N     R14,=F'8'\n         BZ    EQUALS\nXCUT$BKK N     FLAGS,=X'FFFFFFE6'\n         L     STACK,4(R2)\n         B     MAIN4\nERR2     LA    R0,8\n         B     XCUT$ERR\nERR6     LA    R0,6\n         B     XCUT$ERR\nNONE     LA    R0,11\n         B     XCUT$ERR\nFUNCTION EQU   R8\nFUNC     POPP  STACK,ERR1\n         LR    FUNCTION,R1\n         C     FUNCTION,=C'SQRT'\n         BE    SQRT\n         LA    R15,FNAME\nLOOP99   C     FUNCTION,0(R15)\n         BE    FOUND99\n         CLC   0(4,R15),ENDNAME\n         BE    ALLONES\n         ADDG  R15,8\n         B     LOOP99\nALLONES  EQU   *\nERR7     EQU   *\n         LA    R0,12\n         B     XCUT$ERR\nFOUND99  L     FUNCTION,4(R15)\n         LTR   FUNCTION,FUNCTION\n         BZ    ERR7\n         LR    R14,FLAGS\n         N     R14,=F'1'\n         BM    ERR4\n         POPP  STACK,ERR1\n         LOOKUP\n         STM   R0,R1,0(TEMP)\n         LD    F0,0(TEMP)\n         LR    R15,FUNCTION\n         BALR  R14,R15\n         LTR   R0,R15\n         BP    XCUT$ERR\n         B     X$STORE\n         CNOP  0,4\nFNAME    DC    X'00',C'LOG'\nADLOG    DC    V(DLOG)\n         DC    X'00',C'EXP'\nADEXP    DC    V(DEXP)\n         DC    C'LG10'\n         DC    V(DLOG10)\n         DC    C'EXIT'\n         DC    A(XCUTEXIT)\n         DC    X'00',C'ABS'\n         DC    V(ABS)\n         DC    X'00',C'DEG'\n         DC    V(DEG)\n         DC    X'00',C'RAD'\n         DC    V(RAD)\n         DC    X'00',C'SIN'\n         DC    V(DSIN)\n         DC    X'00',C'COS'\n         DC    V(DCOS)\n         DC    X'00',C'TAN'\n         DC    V(DTAN)\n         DC    C'CTAN'\n         DC    V(DCTAN)\n         DC    C'ATAN'\n         DC    V(DATAN)\n         DC    C'ASIN'\n         DC    V(DARSIN)\n         DC    C'ACOS'\n         DC    V(DARCOS)\n         DC    C'BOOL'\n         DC    V(BOOL)\nENDNAME  DC    CL4'    '\nXCUTEXIT LTDR  F0,F0\n         BP    X$STORE\n         XC    SAVCT(4),SAVCT\n         B     THATSALL\nSQRT     LR    R14,FLAGS\n         N     R14,=F'1'\n         BM    ERR4\n         POPP  STACK,ERR1\n         LOOKUP\n         STM   R0,R1,0(TEMP)\n         LD    F2,0(TEMP)\n         LTDR  F2,F2\n         BM    ERR5\n         LTDR  F0,F2\n         BZ    X$STORE\n         SR    R1,R1\n         IC    R1,0(TEMP)\n         LA    R1,65(R1)\n         SRA   R1,1\n         STC   R1,0(TEMP)\n         LD    F0,0(TEMP)\n         LA    R1,8\nSQLOOP1  LDR   F4,F2\n         DDR   F4,F0\n         ADR   F4,F0\n         HDR   F0,F4\n         BCT   R1,SQLOOP1\n         B     X$STORE\nERR4     LA    R0,9\n         B     XCUT$ERR\nERR5     LA    R0,10\n         B     XCUT$ERR\nXCUTSAVE EQU   *\n         LA    SAVER,SAREA\n         ST    SAVER,SAV\nENTER    LA    OPERR,SAREA+900\nGETTYPE  IC    R1,0(POLISH)\n         ADDG  POLISH,1\n         CR    SAVER,OPERR\n         BE    XCUT$ERO\n         STC   R1,0(SAVER)\n         ADDG  SAVER,1\n         LR    R14,R1\n         N     R14,=F'128'\n         BZ    OPER1\n         LR    R14,R1\n         N     R14,=F'64'\n         BZ    OPRN\n         LA    R14,8\nGETLIT   IC    R1,0(POLISH)\n         STC   R1,0(SAVER)\n         ADDG  POLISH,1\n         CR    SAVER,OPERR\n         BE    XCUT$ERO\n         ADDG  SAVER,1\n         BCT   R14,GETLIT\n         B     GETTYPE\nOPRN     LR    R14,R1\n         N     R14,=F'15'\n         B     GETLIT\nOPER1    ZGPR  R1\n         IC    R1,0(POLISH)\n         ADDG  POLISH,1\n         BCE   SIMMI,R1,';'\n         BCE   SIMMI,R1,':'\n         BCE   XCUT$EOB,R1,X26\n         CR    SAVER,OPERR\n         BE    XCUT$ERO\n         STC   R1,0(SAVER)\n         ADDG  SAVER,1\n         B     GETTYPE\nSIMMI    IC    R1,=C';'\n         LA    R0,3(SAVER)\n         CR    R0,OPERR\n         BNL   XCUT$ERO\n         STC   R1,0(SAVER)\n         LA    R1,8\n         STC   R1,R1(SAVER)\n         LA    R1,38\n         STC   R1,2(SAVER)\n         ADDG  SAVER,1\n         ST    SAVER,SAV\n         B     XCUT$BKK\nTACK     EQU   *\n         L     SAVER,SAV\n         B     ENTER\nXCUT$EOB IC    R1,=C';'\n         LA    R0,3(SAVER)\n         CR    R0,OPERR\n         BNL   XCUT$ERO\n         STC   R1,0(SAVER)\n         LA    R1,8\n         STC   R1,1(SAVER)\n         LA    R1,38\n         STC   R1,2(SAVER)\n         ADDG  SAVER,1\n         ST    SAVER,SAV\n         B     THATSALL\nXCUT$ERO L     SAVER,SAV\n         LA    R1,8\n         STC   R1,0(SAVER)\n         LA    R1,38\n         STC   R1,1(SAVER)\n         LA    R0,13\n         B     XCUT$ERR\nDISP     EQU   *\n         LA    R0,12\n         B     XCUT$ERR\nUSE      LR    R14,FLAGS\n         N     R14,=F'4'\n         BZ    USEIT\n         L     R14,SAVCT\n         LTR   R14,R14\n         BZ    XCUTZERO\n         LR    R14,FLAGS\n         N     R14,=F'32'\n         BM    USEIT0\n         L     R14,SAVCT\n         S     R14,=F'1'\n         N     R14,=F'1023'\n         ST    R14,SAVCT\n         N     R14,=F'15'\n         BNZ   USEIT\n*WDD*    CSDEF\nXCUTER   CSECT\n         L     OPERR,4(R13)\n         L     OPERR,64(OPERR)\n*WDD*    USING CS,OPERR\n*WDD*    WAITE CONSOLE,TIME=0\n*WDD*    TM    104(OPERR),2\n*WDD*    BO    THATSIT\nUSEIT    O     FLAGS,=F'2'\n         LR    SAVER,POLISH\n         LA    POLISH,SAREA\n         B     XCUT$BKK\nUSEIT0   XC    SAVCT(4),SAVCT\n         B     USEIT\nTHATSIT  O     FLAGS,=F'32'\n         XC    SAVCT(4),SAVCT\n         B     USEIT\nTHATSALL LR    R14,FLAGS\n         N     R14,=F'2'\n         BM    RESTORE\n         O     FLAGS,=F'64'\n         LR    R14,FLAGS\n         N     R14,=F'8'\n         BZ    EQUALS\nRETURN   EQU   *\n         L     R13,4(R13)\n         SR    R0,R0\n         ST    R0,16(R13)\n         LM    R14,R12,12(R13)\n         BR    R14\nRESTORE  LR    POLISH,SAVER\n         LR    R14,FLAGS\n         N     R14,=F'4'\n         BM    USE\nXCUTZERO EQU   *\n         N     FLAGS,=X'FFFFFFE0'\n         L     STACK,4(R2)\n         B     MAIN4\nLOOK     N     R15,=F'64'\n         BM    RET\n         LTR   R1,R1\n         BZ    ERR3\n         ZGPR  R0\nSHIFT1   SLDL  R0,8\n         LTR   R0,R0\n         BZ    SHIFT1\n         C     R0,=F'91'\n         BE    $$$\n         LR    R1,R0\n         N     R1,=F'16'\n         BM    TWOSL\n         LR    R1,R0\n         N     R1,=F'32'\n         BM    THREESL\n         LA    R1,R0\n         B     SETUPL\nTWOSL    LA    R1,9\n         B     SETUPL\nTHREESL  LA    R1,17\nSETUPL   N     R0,=F'15'\n         AR    R1,R0\n         S     R1,=F'1'\n         SLL   R1,3\n         LA    R15,MSTORAGE(R1)\n         LM    R0,R1,0(R15)\nRET      BR    R14\n$$$      LM    R0,R1,$$$$\n         BR    R14\n         CNOP  0,4\n         DC    X'FFFFFFFE'              (MSK1)\nMSK2     DC    X'FFFFFFFD'\n*******  DC    C'COPYRIGHT 1966 BY JAMES R. LEWIS'\n         LTORG\nUAREA    DSECT\nMSTORAGE DS    26D\n$$$$     DS    D\nSAV      DS    F\nSAVCT    DS    F\nSAREA    DS    900X\n*        END\n         TITLE 'P G E N  -  THE POLISH COMPILER.'\n***********************************************************************\n***********************************************************************\n**                                                                   **\n**                                                                   **\n**        CCCCC                                                      **\n**       C                                                           **\n**       C                                                           **\n**       C                                                           **\n**       C       O M P I L E R                                       **\n**        CCCCC                                                      **\n**                                                                   **\n**                                                                   **\n**                           BY JAMES R. LEWIS, AUGUST 1966          **\n**                                                                   **\n***********************************************************************\n***********************************************************************\n*        ARGUMENTS OF THE ROUTINE..\n*          1) ADDRESS OF CARD IMAGE.\n*          2) ADDRESS OF POLISH STACK.\n*          3) ADDRESS OF A TEMPORARY STORAGE AREA.\n*          4) ''\n*          5) ''\n*          6) TRIPLE WORD FOR STORAGE.\n***********************************************************************\n*\n*     GENERAL REMARKS...\n*\n*          THIS ROUTINE WILL CONVERT AN INPUT EQUATION INTO AN STRING\n*        OF ENTITIES CONSISTING OF OPERANDS AND OPERATORS. THE OPERANDS\n*        CAN BE OF TWO FORMS, LABELS AND LITERALS. THE INPUT STRING\n*        IS SCANED THREE TIMES. THE FIRST SCAN IDENTIFIES THE\n*        OPERATORS, OPERANDS, AND LITERALS. AS THE RESULT OF THE FIRST\n*        SCAN, EACH ENTITY, AS IT CAN NOW BE CALLED, IS PRECEEDED BY\n*        A CONTROL BYTE. THIS CONTROL BYTE CAN THEN BE INTERPRETED BY\n*        OTHER PASSES AND OTHER ROUTINES. THE RECOGNITION OF THE\n*        DIFFERENT ENTITIES IS AS FOLLOWS..\n*             1) OPERATORS ARE RECOGNIZED AS BELONGING TO A SET OF\n*                10 CHARACTERS, NAMELY...\n*                  ( ) + - * / = , COLON AND SIMI-COLON.\n*                  EXPONENTIATION IS RECOGNIZED BY '**'.\n*                  IN ADDITION TO THE ABOVE OPERATORS, SEVERAL\n*                OPERATORS ARE CREATED BY THE PROGRAM FOR INTERNAL\n*                AND EXTERNAL USE. LEFT AND RIGHT PARENTHESIS FOR\n*                FUNCTION NOTATION ARE CONVERTED DURING SCAN ONE AND\n*                TWO TO LEFT AND RIGHT BRACKETS. THESE APPEAR ON THE\n*                GRAPHIC CHARACTER SET AS LESS-THAN AND GREATER-THAN\n*                SYMBOLS.\n*                  THE FUNCTION NOTATION OPERATOR IS INSERTED DURING\n*                THE THIRD AND FINAL SCAN. THIS OPERATOR IS A CONCAT-\n*                TINATION SIGN. (THE BEST GRAPHIC SYMBOL FOR A DOWNWARD\n*                ARROW.)\n*                  THE EXPONENTIATION OPERATOR IS CONVERTED INTO\n*                A '%'.\n*                  THE FINAL OPERATOR IN THE INPUT STRING MUST\n*                BE AN EOB. THE EOB IS THEN PLACED IN THE OUTPUT\n*                STRING TO INDICATE THE END OF THAT STRING.\n*             2) OPERANDS MUST HAVE A LETTER AS THE FIRST CHARACTER\n*                IN THE FIELD. A LETTER OR NUMBER MAY BE USED\n*                THEREAFTER. LABELS MAY BE NO LONGER THAN FOUR\n*                CHARACTERS.\n*             3) IF THE FIRST CHARACTER OF THE FIELD IS A NUMBER OR\n*                A DECIMAL POINT, THE ENTITY IS CONSIDERED A LITERAL.\n*                LITERALS MAY BE OF THE FORM...\n*\n*                  NNN\n*                  NNN.NNN\n*                  NNNENN\n*                  NNN.NNNENN\n*                  NNNE+NN\n*                  NNNE-NN\n*                  NNN.NNNE+NN\n*                  NNN.NNNE-NN\n*\n*                  WHERE...\n*                   NNN IS A FIELD OF INTEGERS UP TO 9 DIGITS.\n*                   NN IS AN EXPONENT OF RANGE -78 TO +75.\n*                   . IS A DECIMAL POINT.\n*                   E IS THE EXPONENTIATION SIGN.\n*\n*             4) A FUNCTION OPERAND IS RECOGNIZED BY A LEFT\n*                PARENTHESIS FOLLOWING THE OPERAND.\n*\n***********************************************************************\n*\n*        OPERATOR HIERARCHY TABLE.\n*\n*        HIERARCHY     OPERATOR\n*        0             COLON AND SIMI-COLON.\n*        1             (\n*        2             )\n*        3             =\n*        4             , AND RIGNT BRACKET\n*        5             + -\n*        6             * /\n*        7             **\n*        8             LEFT BRACKET.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        REGISTER ASSIGNMENTS.\n*\n*        GENERAL\n*         REGISTER     USE\n*         0            SCRATCH\n*         1            SCRATCH\n*         2            ARGUMENT REGISTER.\n*         11           RESERVED\n*         12           BASE REGISTER\n*         13           NOT USED\n*         14           SCRATCH\n*         15           SCRATCH\n*\n*        FIRST SCAN (ENTITY CREATION)\n*         REGISTER     USE\n*         3            INCOMING CHARACTER\n*         4            POINTER TO NEXT INPUT CHARACTER\n*         5            POINTER TO OUTPUT STRING\n*         6            SCRATCH\n*         7            SCRATCH\n*         8            SCRATCH\n*         9            SCRATCH\n*         10           SCRATCH\n*\n*        THIRD SCAN (POLISH CREATION)\n*         REGISTER     USE\n*         3            POINTER TO ENTITY STRING\n*         4            POINTER TO POLISH STACK\n*         5            POINTER TO OPERATOR STACK\n*         6            POINTER TO HOLD STACK\n*         7            POINTER TO TEMPORARY TRIPLE WORD\n*         8            COMPILATION FLAGS (SEE THAT SECTION)\n*         9            SCRATCH\n*         10           HIERARCHY OF LAST OPERATOR\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        FORMAT OF THE CONTROL BYTE...\n*\n*        BITS\n*          0    1    2-7\n*        *******************\n*        * F1 * F2 * COUNT *\n*        *******************\n*\n*        WHERE...\n*              F1 IS THE OPERAND FLAG. A 1 INDICATES THAT THIS\n*              IS AN OPERAND ENTITY.\n*              F2 IS THE LITERAL FLAG. IF THE OPERAND FLAG IS ON,\n*              F2 INDICATES A LITERAL.\n*              COUNT SERVES TWO PURPOSES.\n*                1) COUNT IS THE LENGTH OF AN OPERAND, AND\n*                2) COUNT IS THE HEIRARCHY OF AN OPERATOR.\n*              LITERALS HAVE AN IMPLIED LENGTH OF 8.\n*\n*        EXAMPLES...\n*\n*        10000001\n*              OPERAND OF LENGTH ONE.\n*        11000000\n*              LITERAL OPERAND.\n*        00000011\n*              OPERATOR OF HEIRARCHY 3.\n*\n***********************************************************************\n         TITLE 'P G E N  - THE POLISH STRING GENERATOR'\n*        PRINT NOGEN\nPGEN     CSECT\n*        INITILIZATION...\n         STM   R14,R12,12(R13)\n         LR    R2,R1                 TRANSFER ARGUMENT REGISTER.\n         LR    R12,R15\n         USING PGEN,R12\n         L     R4,0(R2)              GET THE FIRST ARGUMENT\n*                                     - THE INPUT CARD IMAGE.\n         L     R5,4(R2)              GET THE SECOND ARGUMENT\n*                                     - THE ENTITY STACK.\nPGEN$GET CHR   GETEND                GET THE CHARACTERS\nGET1     SCANC LETTERS,27,OPERAND\n         SCANC OPS,R10,OPERATOR      TEST FOR AN OPERATOR.\n         SCANC DIGITS,R11,LITERAL    TEST FOR A LITERAL.\n         LA    R0,1                  CHARACTER NOT FOUND...\n*                                     - MUST BE ILLEGAL.\nPGEN$ERR ST    R0,16(R13)\n         LM    R14,R12,12(R13)\n         BR    R14\n*        ERROR CODES IN R0.\n*          1 ILLEGAL CHARACTER FOUND.\n*          2 OPERAND TOO LONG.\n*          3 PROGRAM ERROR.\n*          4 UNBALANCED PARENS.\n*          5 LITERAL TO LARGE.\n*          6 ILLEGAL OPERATOR COMBINATION.\n         TITLE 'O P E R A N D  PROCESSOR'\nOPERAND  ZGPR  (R7,R9,R10)           INITILIZATION FOR OPERAND.\n         LR    R8,R3                 SAVE FIRST CHARACTER.\nOPRNDGET CHR   OPEND                 GET NEXT CHARACTER.\n         SCANC OPS,R10,OPRNDEND      IS IT AN OPERATOR...\n         SCANC LETTERS,37,OPGO\n*                                     - (36 THIS TIME)\n         LA    R0,R1                 ILLEGAL CHARACTER...\n         B     PGEN$ERR              BRANCH TO LOCAL ERROR ROUTINE.\nOPGO     EQU   *                     IT IS AN OPERAND CHARACTER.\n         LR    R9,R3                 MOVE IT UP\n         SLL   R9,24                 REMOVE HIGH ORDER BYTES\n         SLDL  R8,8                  CONCATINATE WITH SAVED PART.\n         ADDG  R10,1                 ADD ONE TO COUNT.\n         B     OPRNDGET              GET NEXT CHARACTER.\nOPEND    EQU   *                     DUAL PURPOSE ROUTINE.\nOPRNDEND ADDG  R10,1                 ADD ONE TO COUNT.\n         LA    R0,2                  SET UP ERROR CODE.\n         C     R10,=F'4'             ABOVE FOUR CHARACTERS, AND\n         BH    PGEN$ERR              ITS AN ILLEGAL LABEL.\n         LR    R1,R10                SET UP COUNT FOR MANIPULATION\n         SLL   R1,3                  MULTIPLY BY 8.\n         SRDL  R8,0(R1)              SHIFT LABEL AROUND.\n         O     R10,=F'128'           SET UP CONTROL BYTE.\n         STC   R10,0(R5)             STORE CONTROL BYTE FOR OPERAND.\n         ADDG  R5,1                  INCREMENT POINTER.\n         LR    R11,R10               SAVE COUNT.\n         N     R11,=F'127'           USE ONLY COUNT.\n         S     R11,=F'1'             SUBTRACT FOR BXLE.\n         AR    R11,R5                ADD CURRENT ADDRESS.\n         LA    R10,1                 INCREMENT.\nOPRNDLOP ZGPR  R8                    CLEAR GPR 8\n         SLDL  R8,8                  GET CHARACTER.\n         STC   R8,0(R5)              STORE CHARACTER IN OUTPUT\n         BXLE  R5,R10,OPRNDLOP       DO LOOP...\n         BCE   LBRA,R3,'('           SEE IF WE HAVE A FUNCTION\n         BCE   GETEND,R3,X26         OR AN EOB\n         B     OPERATOR              GO TO OPERATOR.\n         TITLE 'O P E R A T O R   PROCESSOR'\nOPERATOR BCE   LPAR,R3,'('           THIS IS A SERIES OF TESTS\n         BCE   RPAR,R3,')'           TO DETERMINE WHAT KIND OF\n         BCE   PGENPLUS,R3,'+'           OPERATOR WE HAVE...\n         BCE   MINS,R3,'-'           .\n         BCE   MUL,R3,'*'            .\n         BCE   PGENDIV,R3,'/'        .\n         BCE   PGENEQAL,R3,'='       .\n         BCE   COMMA2,R3,','          .\n         BCE   CNTRL,R3,(':',';')    .\n         LA    R0,3                  SET UP ERROR CODE.\n         B     PGEN$ERR              BRANCH TO LOCAL ERROR ROUTINE.\nPGENDIV  EQU   *                     DIVISION AND MULTIPLICATION\nMUL      LR    R8,R3                 HAVE SAME HEIRARCHY.\nA0001    CHR   OPEREND               GET NEXT CHARACTER.\n         BCE   PGEN$EXP,R3,'*'          IS IT AN ASTERISCKS.\n         LA    R0,6                  SET UP HEIRARCHY\n         B     OPERSTO1              GO TO SPECIAL ROUTINE\nLPAR     LA    R0,1                  FROH HERE ON DOWN,\n         B     OPERSTO               JUST SET UP HEIRARCHY,\nRPAR     LA    R0,2                  SPECIAL OPERATORS, AND\n         B     OPERSTO               STORE IN OUTPUT STREAM.\nMINS     EQU   *                     .\nPGENPLUS LA    R0,5                  .\n         B     OPERSTO               .\nPGEN$EXP BCE   PGENILL,R8,'/'        .\n         LA    R0,7                  .\n         LA    R3,108                .\n         B     OPERSTO               .\nPGENEQAL LA    R0,3                  .\n         B     OPERSTO               .\nCOMMA2   LA    R0,4                  .\n         B     OPERSTO               .\nLBRA     LA    R0,8                  .\n         LA    R3,76                 .\n         B     OPERSTO               .\nCNTRL    ZGPR  R0                    .\nOPERSTO  STC   R0,0(R5)              STORE CONTROL BYTE\n         STC   R3,1(R5)              STORE OPERATOR.\n         ADDG  R5,2                  ADD IN 2 TO ADDRESS.\n         B     PGEN$GET              GO BACK FOR MORE.\nOPEREND  EQU   *                     END ON AN OPERATOR.\nOPERSTO1 STC   R0,0(R5)              STORE CONTROL BYTE.\n         STC   R8,1(R5)              STORE OPERATOR.\n         ADDG  R5,2                  ADD TWO.\n         BCE   GETEND,R3,X26         EOB GOES OUT...\n         B     GET1                  GO BACK SPECIAL WAY.\n         TITLE 'L I T E R A L  PROCESSOR'\nLITERAL  ZGPR  (R6,R7,R8,R9,R10)     INITILIZATION FOR LITERAL.\n         BCE   DECIMAL,R3,'.'        IS IT JUST A DECIMAL\n         LR    R7,R3                 NO, SAVE FIRST CHARACTER.\n         N     R7,=F'15'             CLEAR OFF ZONE BITS.\nLITGET   CHR   ENDLIT                GET NEXT CHARACTER.\nLITTEST  EQU   *\n         SCANC DIGITS,R12,LITOK      DIGITS OR NOT.\n         B     LITEND                NOT A DIGIT, END OF LITERAL.\nLITOK    BCE   DECIMAL,R3,'.'        IS THE CHRACTER A DECIMAL\n         BCE   EXPLIT,R3,'E'         OR AN E\n         N     R3,=F'15'             REMOVE ZONE BITS.\n         M     R6,=F'10'             MULTIPLY SAVED RESULT..\n         LA    R0,5                  SET UP ERROR CODE\n         LTR   R6,R6                 TEST REGISTER 6 FOR OVERFLOW.\n         BP    PGEN$ERR              GO TO LOCAL ERROR ROUTINE.\n         AR    R7,R3                 ADD IN CURRENT DIGIT\n         ZGPR  R0                    SET UP GPR R0\n         LR    R1,R10                GET CURRENT COUNT.\n         SLDL  R0,24                 SHIFT TO FIND COUNT.\n         SRL   R1,24                 LETS LOOK AT CONTROL BITS...\n         N     R1,=F'2'              IF 2 BIT IS ON, WE HAVE\n         BM    LITGET                AN EXPONENT AND MUST NOT ADD ONE\n         LR    R1,R10                TO GPR R10'S COUNT FIELD\n         SLL   R1,24                 SHIFT TO RESTORE...\n         A     R0,=F'1'              ADD ONE TO R0\n         SRDL  R0,24                 RESTORE GPR\n         LR    R10,R1                SHIFT BACK TO GPR R10.\n         B     LITGET                GO GET NEXT CHARACTER.\nDECIMAL  LA    R0,1                  DECIMAL POINT FOUND...\n         LR    R1,R10                HAVE WE BEEN HERE BEFORE...\n         N     R1,=F'1'              TEST IT\n         BM    PGEN$ERR              YES... GO TO LOCAL ERROR ROUTINE.\n         LR    R8,R7                 SAVE WHOLE PART.\n         O     R10,=F'1'             SET UP FLAG.\n         ZGPR  (R6,R7)               RESET GPR 6 AND 7\n         N     R10,=XL4'FF'          ZERO THE COUNT\n         B     LITGET                GO BACK FOR MORE.\nEXPLIT   LA    R0,1                  EXPONENT LITERAL.\n         LR    R1,R10                GET FLAGS...\n         N     R1,=F'2'              HAVE WE BEEN HERE BEFORE...\n         BM    PGEN$ERR              YES... GO TO LOCAL ERROR ROUTINE\n         LR    R1,R10                GET FLAGS AGAIN\n         N     R1,=F'1'              IS THIS A FRACTION OR WHOLE\n         BM    EXPOK                 FRACTION, GO...\n         LR    R8,R7                 SAVE WHOLE\n         B     A00021                GO AROUND.\nEXPOK    EQU   *                     IT IS A FRACTION\n         LR    R9,R7                 SAVE FRACTION\nA00021   O     R10,=F'2'             SET FLAG.\nA0002    CHR   EXPERR                GET NEXT CHARACTER FOR SIGN\n         ZGPR  R6                    SET UP GPR 6\n         ZGPR  R7                    AND 7\n         BCE   LITGET,R3,'+'         IF IT IS A PLUS\n         BCE   MINEXP,R3,'-'         OR A MINUS...\n         B     LITTEST\nEXPERR   LA    R0,1                  SET UP ERROR CODE\n         B     PGEN$ERR              GO TO LOCAL ERROR ROUTINE.\nMINEXP   O     R10,=F'8'             MINUS EXPONENT... SET FLAG.\n         B     LITGET                GO BACK FOR MORE.\nENDLIT   O     R10,=F'4'             THE END OF A LITERAL\n*                                     - SET FLAG FOR END OF INPUT\nLITEND   LR    R1,R10                GET FLAGS...\n         N     R1,=F'3'              TEST FOR FRACTION OR EXP.\n         BM    WHOLE8                NEITHER\n         LR    R1,R7                 EITHER - SHIFT FROM GPR 8\n         B     WHOLE                 GO AROUND\nWHOLE8   LR    R1,R8                 GET FROM SAVE GPR.\nWHOLE    L     R6,28(R2)             PICK UP A STORAGE LOCATION\n*                                    THIS LOCATION MUST BEGIN ON A\n*                                    DOUBLE WORD BOUNDRY.\n         ZGPR  R0                    SET UP GPR R0\n         SDR   F0,F0                 SET UP FPR 0\n         XC    0(16,R6),0(R6)        CLEAR THS STORAGE AREA\n         LD    F2,=D'10.'            LOAD THE FP 10\n         LTR   R1,R1                 TEST FOR A ZERO WHOLE PART.\n         BZ    FRAC                  GO TO FRACTION\n         L     R0,MASK               LOAD THE MASK\n         STM   R0,R1,0(R6)           STORE UNNORMALIZED NUMBER.\n         LD    F0,0(R6)              LOAD INTO FPR 0.\n         AD    F0,MASK               ADD IN A UNNORMALIZED ZERO\n         STD   F0,0(R6)              STORE THE WHOLE PART OF THE\n*                                    LITERAL AS A FLOATING POINT\n*                                    NUMBER.\nFRAC     LR    R1,R10                FRACTION . GET FLAGS.\n         N     R1,=F'1'              WHERE IS THE FRACTION\n         BZ    EXPON                 THERE IS NO FRACTION\n         LR    R1,R10                GET FLAGS...\n         N     R1,=F'2'              WAS THERE AN EXPONENT...\n         BM    FRAC9                 YES...\n         LPR   R1,R7                 NO GET FROM NORMAL REGISTER.\n         B     FRACGO                BRANCH AROUND...\nFRAC9    LPR   R1,R9                 GET POSITIVE FRACTION\nFRACGO   LTR   R1,R1                 SEE IF THE FRACTION WAS ZERO.\n         BZ    EXPON                 YES...\n         L     R0,MASK               NO, GET MASK.\n         STM   R0,R1,8(R6)           STORE THE UNNORMALIZED NUMBER\n         LD    F0,8(R6)               LOAD INTO FPR 0\n         AD    F0,MASK                ADD THE UNNORMALIZED AERO\n         LR    R1,R10                GET COUNT.\n         ZGPR  R0                    ZERO GPR R0\n         SLDL  R0,24                 SHIFT IN COUNT\nLOOPFRAC DDR   F0,F2                 DIVIDE BY TEN\n         S     R0,=F'1'              SUBTRACT 1 FROM COUNT\n         BP    LOOPFRAC              GO IF THERE IS STILL SOME MORE\n         AD    F0,0(R6)              ADD IN WHOLE PART.\nEXPON    LR    R1,R10                EXPONENT TEST FLAGS...\n         N     R1,=F'2'              SEE IF THERE WAS AN EXPONENT...\n         BZ    NOEXP                 NO...\nEXPLOOP  LTR   R7,R7                 TEST EXPONENT REGISTER...\n         BZ    NOEXP                 GO IF ZERO\n         LA    R0,5                  GET ERROR FLAG.\n         LR    R1,R10                GET FLAGS\n         N     R1,=F'8'              TEST FOR NEGITIVE EXPONENT\n         BZ    EXP1                  NOT NEGITIVE...\nEXP2     DDR   F0,F2                 DIVIDE BY 10.0\n         BCT   R7,EXP2               BRANCH ON COUNT\n         B     NOEXP                 GO AROUND\nEXP1     CD    F0,=D'7.2E74'         POSITIVE EXPONENT...\n*                                    COULD IT BE TOO LARGE.\n         BH    PGEN$ERR              GO TO LOCAL ERROR IF TO LARGE.\n         MDR   F0,F2                 MULTIPLY BY 10.0\n         BCT   R7,EXP1               BRANCH ON COUNT LESS\nNOEXP    STD   F0,0(R6)              STORE RESULT IN STORAGE\n         LA    R0,192                GET LITERAL CONTROL BYTE.\n         STC   R0,0(R5)              STORE IT IN OUTPUT.\n         ADDG  R5,1                  ADD ONE FOR THE CONTROL\n         L     R1,0(R6)              LOAD FIRST HALF OF LITERAL\n         LA    R7,4                  GET COUNT\nEXPPUT   SLDL  R0,8                  SHIFT AND COUNT\n         STC   R0,0(R5)              STORE CHARACTER.\n         ADDG  R5,1                  ADD TO POINTER.\n         BCT   R7,EXPPUT             BRANCH ON COUNT.\n         L     R1,4(R6)              GET SECOND HALF.\n         LA    R7,4                  GET COUNT\nEXPPUT1  SLDL  R0,8                  SHIFT BY 8 BITS\n         STC   R0,0(R5)              STORE CHARACTER.\n         ADDG  R5,1                  ADD ONE TO POINTER.\n         BCT   R7,EXPPUT1            BRANCH ON COUNT\n         N     R10,=F'4'             TEST FOR EOB\n         BM    GETEND                YES... END OF INPUT\n         B     GET1                  GO BACK\nGETEND   EQU   *                     END OF INPUT AND FIRST SCAN\n         LA    R0,8                  CREATE EOB CONTROL BYTE.\n         STC   R0,0(R5)               STORE THE CONTROL BYTE\n         LA    R0,38                 GET A NEW EOB.\n         STC   R0,1(R5)              STORE EOB.\n         TITLE 'P G E N  - THE POLISH STRING GENERATOR'\n*        NOTE ON GPR 8\n*          BIT 1 INDICATES AN '=' SIGN HAS BEEN FOUND IN THIS EQUATION\n*          BIT 2 INDICATES THE PREVIOUS ENTITY WAS AN OPERATOR.\n*          BIT 3 INDICATES THE PREVIOUS OPERATOR WAS AN '**'.\n*          BIT 4 INDICATES A COMMA SERIES WAS FOUND.\n*          BIT 5 INDICATES THAT AN OPERATOR HAS BEEN FOUND\n         ZGPR  (R0,R8)               SET UP GPR R0 AND 8\n         LA    R15,8                 SET UP EOB CONTROL BYTE\n         LA    R1,38                 AND EOB CHARACTER.\n         L     R3,4(R2)              ENTITY STRING\n         L     R4,8(R2)              POLISH STACK\n         L     R5,12(R2)             OPERATOR STACK\n         L     R6,16(R2)             HOLD STACK\n         PLOP  R4                    SET UP POLISH STACK.\n         PLOP  R5                    SET UP OPERATOR STACK\n         PLOP  R6                    SET UP HOLD STACK.\n         B     PGENUTS\nPGENGET  STACKO R3,PGENDONE          GET A ENTITY\nPGENGET1 LR    R14,R15               GET CONTROL BYTE\n         N     R14,=F'128'           TEST THE TYPE FOR OPERATOR\n         BZ    PGENOPO               BRANCH IF OPERATOR\nPGENOPN  PLOP  R4                    PLACE IN LIFO STACK\n         N     R8,MSK                TURN OFF OPERATOR PREVIOUS FLAG\nPGENTST  STACKO R3,PGENDONE          GET ENTITY\n         LR    R14,R15               SEE OF IT IS AN OPERATOR\n         N     R14,=F'128'           OR AN OPERAND\n         BM    PGENOPN               OPERAND\n         BCE   PGENEXP,R1,'%'        IS IT AN EXPONENT.\nPGENOP   EQU   *                     SWITCHING\n         L     R7,20(R2)             TEMPORARY TRIPLE WORD.\n         PLOP  R7                    STARTS HERE\n         LR    R10,R15               SAVE HIERARCHY\nPGENTST1 POPP  R5,PGENOP1            GET AN OPERATOR\n         CR    R15,R10               TEST IT WITH THE OLD OPERATOR.\n         BC    10,PGENMOVE           IF GREATER THAN OR EQUAL\n         PLOP  R5                    OTHERWISE IT GOES BACK\n         POPP  R7,PGENERR1           GET OLD OPERATOR\n         B     PGENOPO               GO TO OPERATOR PROCESSOR\nPGENMOVE BCE   UNBAL,R1,('(','|')\n         ZGPR  R0\n         PLOP  R4\n         B     PGENTST1              BRANCH BACK FOR MORE MOVES.\nPGENEXP  LR    R9,R8                 EXPONENTIAL OPERATOR\n         N     R9,=F'4'              ARE WE THE FIRST TIME HERE\n         BZ    PGENOP                YES\n         B     PGENOPO               NO\nPGENOP1  POPP  R7,PGENERR1           RESTORE THE OLD OPERATOR\nPGENOPO  BCE   PGENEQU,R1,'='        TEST FOR EQUALS SIGH\n         BCE   PGENCTL,R1,(':',';')  COLON OR SIMI-COLON\n         BCE   PGENCOMM,R1,','       COMMA\n         O     R8,=F'16'             TURN ON OPERATOR FLAG.\n         BCE   PGENLBRA,R1,'<' LBRA\n         BCE   PGENRPAR,R1,')'\nPGENBKK  EQU   *\n         PLOP  R5                    PLACE OPERATOR IN STACK\n         BCE   PGENLPAR,R1,'('       LEFT PAREN TEST.\n         LR    R9,R8                 GET FLAGS\n         N     R9,=F'2'              TEST FOR TWO OPERATORS IN A ROW\n         BM    PGENILL               YES...\n         BCE   PGENUTS,R1,','        TEST FOR A COMMA\n         O     R8,=F'2'              TURN ON THE OPERATOR FLAG.\n         N     R8,MSK1               TURN OFF EXP FLAG.\n         BCE   PGENFLG,R1,'%'        SEE IF THE CURRENT OPERATOR IS **\n         B     PGENGET               NO, GO BACK\nPGENCOMM EQU   *                     COMMA OPERATOR\n         O     R8,=F'8'              TURN ON COMMA FLAG.\n         B     PGENBKK               GO BACK....\nPGENLPAR N     R8,MSK                LEFT PAREN... TURN OFF OPERATOR\n*                                    FLAG FOR UNIARY OPERATORS.\n         B     PGENUTS               GO TO UNIARY TEST.\nPGENFLG  O     R8,=F'4'              FLAG FOR EXPONENT OPERATOR '**'\n         B     PGENGET               GO BACK\nPGENCTL  LR    R10,R1                COLON OR SIMI-COLON OPERATOR\nPGENCTL2 POPP  R5,PGENCTL3           GET SAVED OPERATORS\n         BCE   UNBAL,R1,'|'\n         BCE   UNBAL,R1,'('          IS IT A RIGHT PARENTHESIS\n         PLOP  R4                    PLACE IN POLISH STACK.\n         B     PGENCTL2              LOOP\nPGENCTL3 ZGPR  (R8,R15)              RE-SET GPR R8 AND R15\n         LR    R1,R10                GET OPERATOR\n         ZGPR  R15                   CLEAR CONTROL BYTE FOR OPER.\n         PLOP  R4                    STORE IT AWAY.\n         B     PGENUTS\nPGENLBRA PLOP  R5                    SAVE LEFT BRACKET.\n         POPP  R4,PGENERR1           GET OPERAND FOR FUNCTION\n         PLOP  R6                    HOLD IT.\n         ZGPR  R0                    LETS CREATE THE GOOD OLD\n         LA    R1,X'4F'              DOWNWARD ARROW\n         LA    R15,0                 AND ITS CONTROL BYTE\n         PLOP  R5                    STORE IT IN THE OPERATOR STACK\n         B     PGENUTS               GO FOR NEXT OPERATOR.\nPGENSOK  POPP  R5,UNBAL              GET NEXT OPERATOR\n         BCE   PGENROK,R1,'<' LBRA\n         B     UNBAL                 BAD EQUATION...\nPGENROK  POPP  R6,PGENERR1           POP HOLD STACK\n         PLOP  R4                    PUT IT IN THE POLISH STACK...\n         LA    R0,0                  SET UP ARROW\n         LA    R1,X'4F'              THIS IS THE HEX FOR IT...\n         LA    R15,0                 AND THE CONTROL BYTE.\n         PLOP  R4                    PUT IN THE POLISH STACK.\n         B     PGENTST               GO BACK FOR MORE.\nPGENRPAR LR    R9,R8                 A RIGHT PARENTHESIS... GET FLAGS\n         N     R9,=F'2'              TEST FOR TRAILING OPERATORS.\n         BM    PGENILL               GO TO ERROR\n         POPP  R5,UNBAL              GET SAVED OPERATOR\n         BCE   PGENSOK,R1,'|' ARROW OR SPEAR.\n         BCE   PGENTST,R1,'('        IF IT IS NOT A PARENTHESIS '('\nUNBAL    LA    R0,4                  UNBALANCED... SET UP ERROR CODE\n         B     PGEN$ERR              GO TO LOCAL ERROR ROUTINE.\nPGENEQU  LR    R9,R8                 EQUAL SIGN... GET FLAGS...\n         N     R9,=F'25'\n         BM    PGENILL               EITHER IS AN ERROR.\n         O     R8,=F'1'              TURN ON FLAG FOR EQUALS.\n         PLOP  R5                    PUT IT IN THE OPERATOR STACK.\nPGENUTS  STACKO R3,PGENDONE          GET NEXT ENTITY\n         LR    R14,R15               TRANSFER CONTROL BYTE\n         N     R14,=F'128'           TEST FOR OPERATOR\n         BM    PGENOPN               NOT AN OPERATOR, OK\n         BCE   PGENOPO,R1,'('        IF AN OPERATOR, IT MUST BE\n         BCE   PGENUNIR,R1,'+'       A LEFT PARENTHESIS, A PLUS SIGN,\n         BCE   PGENUNIS,R1,'-'       OR A MINUS SIGN.\n         B     PGENILL               OTHERWISE GO TO ERROR\nPGENUNIR IC    R1,AMPER              UNIARY PLUS SIGH\n         B     PGENOPO               GO BACK\nPGENUNIS IC    R1,=C'_'              UNIARY MINUS SIGN.\n         B     PGENOPO               GO BACK.\nPGENILL  LA    R0,6                  ILLEGAL OPERATOR SEQUENCE...\n         B     PGEN$ERR              GO TO LOCAL ERROR ROUTINE.\nPGENERR1 LA    R0,3                  A PROGRAM ERROR... CAN IT HAPPEN\n         B     PGEN$ERR              GO TO LOCAL ERROR ROUTINE.\nPGENDONE N     R8,=F'2'              END OF GENERATION... TEST FOR\n*                                    TRAILING OPERATORS...\n         BM    PGENILL               GO TO LOCAL ERROR\nPGENDONN POPP  R5,PGENDON1           GET THE NEXT OPERATOR IN STACK\n         BCE   UNBAL,R1,'|'\n         BCE   UNBAL,R1,'('          IS IT A PARENTHESIS...\n         PLOP  R4                    IF NOT, STORE IT AWAY...\n         B     PGENDONN              GO BACK FOR MORE\nPGENDON1 L     R3,4(R2)\n*                                    OUTPUT.\n         PLOP  R4                    STORE THE EOB RECORD.\n         L     R4,8(R2)              GET THE ADDRESS OF THE INPUT.\n         ADDG  R4,12                 ADD 12 FOR THE EOB.\nPGENDON2 LM    R15,R1,0(R4)          GET THE ENTITY.\n         ADDG  R4,12                 INCREMENT POINTER.\n         LR    R14,R15               TRANSFER THE CONTROL BYTE...\n         N     R14,=F'128'           TEST FOR OPERAND...\n         BM    PGENGO                YES\n         BCE   PGENEND,R1,X26  EOB\nPGENGO   EQU   *                     OTHER THAN EOB...\n         STC   R15,0(R3)             STORE THE CONTROL BYTE\n         ADDG  R3,1                  INCREMENT POINTER TO OUTPUT\n         LR    R14,R15               GET FLAGS\n         N     R14,=F'128'           TEST FOR OPERATOR\n         BZ    PGENOPP               GO IF OPERATOR...\n         LR    R14,R15               GET THE FLAGS\n         N     R14,=F'64'            TEST FOR A LITERAL\n         BZ    PGENOPNN              GO IF NOT A LITERAL\n         LA    R14,4                 GET A COUNT\n         LR    R11,R0                AND FIRST HALF OF THE LITERAL\nL11      SLDL  R10,8                 SHIFT EACH CHARACTER.\n         STC   R10,0(R3)             AND STORE IT\n         ADDG  R3,1                  INCREMENT POINTER TO OUTPUT\n         BCT   R14,L11               BRANCH ON COUNT (4)\n         LA    R14,4                 GET NEXT COUNT\n         LR    R11,R1                AND SECOND HALF ON LITERAL\nL12      SLDL  R10,8                 SHIFT THE CHARACTER...\n         STC   R10,0(R3)             STORE IT AWAY\n         ADDG  R3,1                  ADD ONE TO THE POINTER\n         BCT   R14,L12               BRANCH ON COUNT (4)\n         B     PGENDON2              GO BACK FOR NEXT ENTITY...\nPGENOPP  STC   R1,0(R3)              OPERATOR... STORE IT\n         ADDG  R3,1                  INCREMENT THE POINTER...\n         B     PGENDON2              GO FOR THE NEXT ENTITY...\nPGENOPNN LR    R14,R15               OPERAND\n         N     R14,=F'15'            HOW LONG IS IT...\n         SLL   R14,3                 MULTIPLY BY EIGHT.\n         LR    R0,R1                 EXCHANGE ONE INTO ZERO\n         SRDL  R0,0(R14)             SHIFT OVER N CHARACTERS...\n         SRL   R14,3                 DIVIDE COUNT BY EIGHT...\nL13      SLDL  R0,8                  GET EACH CHARACTER\n         STC   R0,0(R3)              STORE IT AWAY\n         ADDG  R3,1                  INCREMENT POINTER...\n         BCT   R14,L13               BRANCH ON COUNT(N)\n         B     PGENDON2              GO GET NEXT ENTITY.\nPGENEND  EQU   *                     END OF OUTPUT\n         STC   R15,0(R3)             STORE CONTROL BYTE.\n         STC   R1,1(R3)              AND THE EOB\n         SR    R0,R0\n         ST    R0,16(R13)\n         LM    R14,R12,12(R13)\n         BR    R14\n         CNOP  0,8\nMSK      DC    X'FFFFFFFD'\nMSK1     DC    X'FFFFFFFB'\nMASK     DC    X'4E00000000000000'\nLETTERS  DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n         DC    C'$'\nDIGITS   DC    C'0123456789.E'\nOPS      DC    C'()+-*/=,;:'\nAMPER    DC    X'50'\n*****    DC    C'COPYRIGHT 1966 BY JAMES R. LEWIS'\n         LTORG\n*        END\n         TITLE 'ABS, CON, RAD, DEG, BOOL'\nABS      CSECT\n         LPDR  F0,F0\n         SR    R15,R15\n         BR    R14\n         SPACE\n         ENTRY RAD\n         ENTRY DEG\n         SPACE\nCON      CSECT\nRAD      EQU   *\n         USING RAD,R15\n         DD    F0,RFACTOR\n         SR    R15,R15\n         BR    R14\n         SPACE\nDEG      EQU   *\n         USING DEG,R15\n         MD    F0,RFACTOR\n         SR    R15,R15\n         BR    R14\nRFACTOR  DC    D'57.29577951308232'\n         SPACE\nBOOL     CSECT\n         USING BOOL,R15\n         LTDR  F0,F0\n         BH    BOOL$ONE\n         SDR   F0,F0\n         SR    R15,R15\n         BR    R14\nBOOL$ONE LD    F0,=D'1.0'\n         SR    R15,R15\n         BR    R14\n         LTORG\n*        END\n         TITLE 'ARCSIN-ARCCOSINE FUNCTION'\nIHCLASCN CSECT\n*        ARCSIN-ARCCOSINE FUNCTION (LONG)\n*              1. IF X BETWEEN 0 AND 1/2, COMPUTE ACRSIN BY POLYNOMIAL\n*              2. IF X BETWEEN 1/2 AND 1,\n*              ARSIN(X) = PI/2-2*ARSIN(SQRT((1-X)/2))\n*              3. IF X NEGATIVE, ARSIN(X) = -ARSIN(/X/)\n*              4. ARCOS(X) = PI/2-ARSIN(X)\n         ENTRY DARSIN\n         ENTRY DARCOS\n         SPACE\nGRT      EQU   R7                      PREVIOUS SAVE AREA POINTER\n         SPACE\n         USING *,R15\nDARCOS   EQU   *\n         STM   R14,GRT,12(R13)         SAVE REGISTERS\n         MVI   SWICH1+1,X'00'          SAVE REGS, SET SWICH1 TO 'BC 0'\n         LA    R15,DARSIN-DARCOS(R15)  ADJUST BASE REGISTER\n         USING DARSIN,R15              AND JOIN COMMON CIRCUIT\n         B     JOIN$1\n         SPACE\nDARSIN   EQU   *\n         STM   R14,GRT,12(R13)         SAVE REGISTERS\n         MVI   SWICH1+1,X'F0'          SAVE REGS, SET SWICH1 TO 'BC 15'\n         SPACE\nJOIN$1   EQU   *\n         LR    R6,R15                  SWITCH BASE REGISTER TO GRB\n         USING DARSIN,R6\n         DROP  R15\n         SPACE\n         STD   F0,ARG#A\n         LPER  F0,F0                   /X/\n         CD    F0,LASCNONE\n         BC    2,LASCNERR              IF /X/ GREATER THAN 1, ERROR\n         MVI   SWICH2+1,X'10'\n         CE    F0,HALFASCN             IF /X/ SMALLER THAN 1/2, SET SWI\n         BC    12,POLYN                TO 'BC 1' AND SKIP TO POLYNOM SE\n         SPACE\n         MVI   SWICH2+1,X'80'          IF /X/ GREATER THAN 1/2,\n         HDR   F0,F0                   SET SWICH2 TO 'BC 8' AND\n         SD    F0,HALFASCN             COMPUTE SQRT((1-X)/2)\n         LPER  F0,F0\n         LTDR  R2,F0\n         BZ    SQFIN\n         SR    R1,R1\n         IC    R1,ARG#A\n         LA    R1,65(R1)\n         SRA   R1,1\n         STC   R1,ARG#A\n         LD    F0,ARG#A\n         LA    R1,8\nSQLOOP2  LDR   F4,F2\n         DDR   F4,F0\n         ADR   F4,F0\n         HDR   F0,F4\n         BCT   R1,SQLOOP2\nSQFIN    EQU   *\n         SPACE\nPOLYN    LDR   R2,F0                   COMPUTE ARSIN(X) OR\n         MDR   F2,F2                   ARSIN(SQRT((1-X)/2))\n         SDR   F4,F4                   BY A POLYNOMIAL OF FORM\n         LM    R3,R5,INDEX\nLOOP     AD    F4,COEF(R3)             ARSIN(Z) = Z+C1*Z**3+C2*Z**5\n         MDR   F4,R2                   +...+C12*Z**25\n         BXLE  R3,R4,LOOP\n         MDR   F4,F0\n         ADR   F0,F4\n         SPACE\n         TM    SWICH1+1,X'80'          IF ARSIN WANTED AND BIG /X/,\nSWICH2   BC    1,SKIP                  SUBTRACT F0 FROM PI/4\n         BC    1,*+8                   IF ARCOS WANTED AND SMALL /X/,\n         SD    F0,PIOV4#1              SUBTRACT F0 FROM PI/2\n         SD    F0,PIOV4#1              EXTRA STEPS ARE EMPLOYED\n         LPER  F0,F0                   TO RETAIN ACCURACY\nSKIP     TM    SWICH2+1,X'80'          IF /X/ WAS BIG, DOUBLE F0 TO GE\n         BZ    *+6                     2*ARSIN(SQRT((1-X)/2)), OR\n         ADR   F0,F0                   PI/2-2*ARSIN)SQRT((1-X)/2))\n         SPACE\n         TM    ARG#A,X'80' (SIGN)%\n         BZ    FIN                     IF NEGATIVE AND ARSIN, CHANGE SI\n         LNER  F0,F0                   IF NEG AND ARCOS, SUBTRACT FROM\nSWICH1   B     FIN                     ='BC 15,FIN' FOR ARSIN, 'BC 0,FI\n         AD    F0,PI#ASCN              FOR ARCOS\n         SPACE\nFIN      LM    R14,GRT,12(R13)         RESTORE REGISTERS\n         SR    R15,R15\n         BR    R14\n         SPACE\n         CNOP  0,4\nLASCNERR LM    R14,GRT,12(R13)\n         LA    R15,20\n         BR    R14\n         SPACE\nARG#A    DS    D\nCOEF     DC    X'3F829434AE2563EF'      0.3187962129808229E-1\n         DC    X'BF424DB5FD243711'     -0.1618739213360045E-1\n         DC    X'3F4FED5AB9F625B1'      0.1951346817021131E-1\n         DC    X'3F1ABE782B17D797'      0.6529302032040626E-2\n         DC    X'3F31D950B3793EDF'      0.1217013858656887E-1\n         DC    X'3F38DF501DA5EEFF'      0.1388484282722024E-1\n         DC    X'3F471B0C5D335967'      0.1735977964127353E-1\n         DC    X'3F5BA27AD75504B9'      0.2237174973316874E-1\n         DC    X'3F7C71CB34A39F66'      0.3038195969768495E-1\n         DC    X'3FB6DB6D9FB55B40'      0.4464285680599894E-1\n         DC    X'4013333333376F72'      0.7500000000385202E-1\n         DC    X'402AAAAAAAAAA5CF'      0.1666666666666494\nPIOV4#1  EQU   *\nPIOV     DC    X'40C90FDAA22168C2'     PI/4\nPI#ASCN  DC    X'413243F6A8885A31'     PI\nLASCNONE DC    X'4110000000000000'\nHALFASCN DC    X'4080000000000000'\nINDEX    EQU   *-4\n         DC    F'8'\n         DC    F'88'\n         LTORG\n*        END\n         TITLE 'ARCTANGENT FUNCTION'\nIHCLATN2 CSECT\n*\n*        ARCTANGENT FUNCTION  (LONG, 2 ENTRY POINTS)\n*              1. REDUCE THE CASE TO THE 1ST OCTANT BY USING\n*              ATAN(-X=-ATAN(X), ATAN(1/X)=P1/2-ATAN(X)\n*              2. REDUCE FURTHER TO THE CASE /X/ LESS THAN TAN(PI/12)\n*              BY ATAN(X)=PI/6+ATAN(X*SQRT3-1)/(X+SQRT3)).\n*              3. FOR THE BASIC RANGE (X LESS THAN TAN(PI/12)), USE\n*              A CONTINUED FRACTION APPROXIMATION\n*              4. DATAN2 ENTRY REQUIRES A PAIR OF ARGUMENTS Y AND X,\n*              AND COMPUTES ATAN(Y/X).  ANSWER IS IN (-PI,PI)\n         SPACE\n         ENTRY DATAN\n         ENTRY DATAN2\n         SPACE\nGRX      EQU   R14\n         SPACE\n         USING *,R15\nDATAN2   EQU   *\n         STM   R14,R15,12(R13)         SAVE REGISTERS\n         MVI   ATN2FLAG,1              SAVE R14, R15 AND SET FLAG\n         LA    R15,DATAN-DATAN2(R15)   ADJUST BASE REGISTER AND SKIP\n         USING DATAN,R15\n         B     MERGE1\n         SPACE\nDATAN    EQU   *\n         STM   R14,R15,12(R13)         SAVE REGISTERS\n         MVI   ATN2FLAG,0              SAVE R14,R15 AND RESET FLAG\nMERGE1   EQU   *\n         STE   F0,ATN2SIGN             SAVE ITS SIGN\n         TM    ATN2FLAG,1\n         BZ    ATAN1                   IF DATAN ENTRY, SKIP TO MAIN CIR\n         SPACE\n         STE   R2,XSIGN                SAVE ITS SIGN\n         LM    R0,R1,ATN2SIGN          IF X2=0, OR IF /X1/X2/ IS GREATE\n         N     R1,MASK1                THAN 2**56, GIVE + OR -P1/2 AS\n         BZ    VERTL                   ANSWER TO AVOID IBFINT TROUBLE\n         N     R0,MASK1\n         SR    R0,R1\n         C     R0,BIAS\n         BL    NORML1\nVERTL    LTER  F0,F0\n         BZ    LATN2ERR                IF X1=X2=0, ERROR\n         LD    F0,PIOV2\n         BP    ATN2EXIT\n         LCER  F0,F0\n         B     ATN2EXIT\n         SPACE\nNORML1   DDR   F0,R2\n         STE   F0,ATN2SIGN             JOIN MAIN CIRCUTI WITH X=X1/X2\n         SPACE\nATAN1    LPER  F0,F0                   MAIN CIRCUIT.  FORCE SIGN POSIT\n         SR    R1,R1                   R1 FOR DISTINGUISHING CASES\n         CE    F0,ATN2ONE\n         BL    SKIP1\n         LD    R2,ATN2ONE              IF X GREATER THAT 1, TAKE INVER\n         DDR   R2,F0                   AND INCREMEMENT R1 BY 16\n         LDR   F0,R2\n         LA    R1,16\n         SPACE\nSKIP1    CE    F0,TAN15\n         BC    12,SKIP2\n         LDR   R2,F0                   IF X GREATER THAN TAN(PI/12),\n         MD    F0,RT3M1                REDUCE X TO (X*SQRT3-1)/(X+SQRT3\n         SD    F0,HALFATN2\n         SD    F0,HALFATN2             COMPUTE X*SQRT3-1 AS\n         ADR   F0,F2                   X*(SQRT3-1)-0.5-0.5+X\n         AD    R2,RT3                  TO GAIN ACCURACY\n         DDR   F0,R2\n         LA    R1,8(R1)                INCREMENT R1 BY 8\n         SPACE\nSKIP2    LDR   F6,F0                   COMPUTE ATAN OF REDUCED ARGUMENT\n         MDR   F0,F0\n         LDR   R2,F0                   ATAN(X) = X(1+F*XSQ)\n         AD    R2,BETA4\n         LD    F4,ALPHA4               F = A1/(B1+XSQ+A2/(B2+XSQ+A3\n         DDR   F4,R2                   /(B3+XSQ+A4/(B4+XSQ))..)\n         ADR   F4,F0\n         AD    F4,BETA3\n         LD    R2,ALPHA3\n         DDR   R2,F4\n         ADR   R2,F0\n         AD    R2,BETA2\n         LD    F4,ALPHA2\n         DDR   F4,R2\n         ADR   F4,F0\n         AD    F4,BETA1\n         LD    R2,ALPHA1\n         DDR   R2,F4\n         MDR   F0,R2\n         MDR   F0,F6\n         ADR   F0,F6\n         SPACE\n         C     R1,SXTEN                DEPENDING ON THE CASE EITHER ADD\n         BL    *+10                    0 OR PI/6 OR SUBTRACT FROM PI/3\n         LCER  F0,F0                   PI/2.  DO LATTER IN 2 STEPS\n         AD    F0,PO2M1-16(R1)\n         AD    F0,ATN2ZERO(R1)\n         TM    ATN2SIGN,X'80'          IF SIGN WAS NEGATIVE,\n         BZ    *+6                     ANSWER IS NEGATIVE\n         LCER  F0,F0\n         TM    ATN2FLAG,1\n         BZ    ATN2EXIT                IF DATAN ENTRY SKIP TO EXIT\n         SPACE\n         TM    XSIGN,X'80'             DATAN2 CASE\n         BZ    ATN2EXIT                IF X2 IS POSITIVE, SKIP TO EXIT\n         LD    R2,PI#ATN2              OTHERWISE SUBTRACT OR ADD PI\n         LTDR  F0,F0                   DEPENDING ON THE SIGN OF F0\n         BP    *+6\n         LCER  R2,R2\n         SDR   F0,R2\n         SPACE\nATN2EXIT L     GRX,12(R13)\n         SR    R15,R15\n         BR    R14\n         SPACE\nATN2FLAG DS    C\n         SPACE\n         CNOP  0,4\nLATN2ERR L     R14,12(R13)\n         LA    R15,19\n         BR    R14\n         SPACE\n         DS    0D\nPI#ATN2  DC    X'413243F6A8885A31'\nRT3M1    DC    X'40BB67AE8584CAA8'     SQRT(3)-1\nRT3      DC    X'411BB67AE8584CAB'     SQRT(3)\nALPHA1   DC    X'C0D5F788DF6CB457'      -0.8358083291502266\nBETA1    DC    X'414D42F041242098'       4.828842405755528\nALPHA2   DC    X'C1DD6E91F2AD24DF'     -13.839494655565710\nBETA2    DC    X'4168C2DCB9C0437F'       6.547573781576119\nALPHA3   DC    X'C1138256FCDD5CB6'      -1.219321239235610\nBETA3    DC    X'41224D09A3EFF7AC'       2.143808021908152\nALPHA4   DC    X'C0145A9C5C07FB43'      -0.07950761076788829\nBETA4    DC    X'4114451896975D03'       1.266869152304765\nPO2M1    DC    X'40921FB54442D184'     90 DEGREES MINUS ONE\n         DC    X'408C152382D73658'     60 DEGREES MINUS HALF\nATN2ZERO DC    D'0'                    0\n         DC    X'40860A91C16B9B2D'     30 DEGREES\nATN2ONE  DC    X'4110000000000000'\nHALFATN2 DC    X'4080000000000000'\nPIOV2    DC    X'411921FB54442D18'     90 DEGREES\nTAN15    DC    X'40449851'\nBIAS     DC    X'0E000000'\nSXTEN    DC    F'16'\nATN2SIGN DS    F\nXSIGN    DS    F\nMASK1    DC    X'7FFFFFFF'\n         LTORG\n*        END\n         TITLE 'EXPONENTIAL FUNCTION'\nEXPONNTL CSECT\n*        EXPONENTIAL FUNCTION (LONG)\n         ENTRY DEXP\n         SPACE\n         USING *,R15\nDEXP     EQU   *\n         STM   R14,R3,12(R13)\n         CE    F0,EXPO#MAX\n         BH    EXPONERR\n         CE    F0,EXPO#MIN\n         BC    12,SMALL\n         SPACE\n         DD    F0,LOGE2#1\n         STE   F0,EXPOSIGN\n         LER   R2,F0\n         AU    R2,SCALER1\n         STE   R2,FIELDS\n         SDR   R2,R2\n         AE    R2,FIELDS\n         SDR   F0,R2\n         L     R2,FIELDS\n         SPACE\n         TM    EXPOSIGN,X'80'\n         BO    READY1\n         SD    F0,ONO16\n         LA    R2,1(R2)\n         LCR   R2,R2\n         SPACE\nREADY1   SR    R3,R3\n         SRDL  R2,4\n         SRL   R3,25\n         SRDL  R2,2\n         SLL   R2,24\n         LCR   R0,R2\n         SR    R2,R2\n         SLDL  R2,2\n         SPACE\n         LDR   R2,F0\n         ME    F0,C6\n         AD    F0,C5\n         MDR   F0,R2\n         AD    F0,C4\n         MDR   F0,R2\n         AD    F0,C3\n         MDR   F0,R2\n         AD    F0,C2\n         MDR   F0,R2\n         AD    F0,C1\n         MDR   F0,R2\n         AD    F0,C0A\n         AD    F0,C0A\n         SPACE\n         LTR   R3,R3\n         BZ    SKIP5\n         CE    F0,EXPONONE\n         BL    SKIP4\n         LD    F0,MCONST-8(R3)\n         B     SKIP5\nSKIP4    MD    F0,MCONST-8(R3)\nSKIP5    LTR   R2,R2\n         BZ    SKIP3\n         HDR   F0,F0\n         BCT   R2,*-2\nSKIP3    STD   F0,EXPOSIGN\n         A     R0,EXPOSIGN\n         ST    R0,EXPOSIGN\n         SDR   F0,F0\n         AD    F0,EXPOSIGN\n         SPACE\nEXPOEXIT LM    R2,R3,28(R13)\n         SR    R15,R15\n         BR    R14\n         SPACE\nSMALL    SDR   F0,F0\n         B     EXPOEXIT\n         SPACE\nEXPONERR LA    R15,R14\n         LM    R2,R3,28(R13)\n         BR    R14\nEXPOSIGN DS    D\nFIELDS   EQU   EXPOSIGN+4\nLOGE2#1  DC    X'40B17217F7D1CF79'\nONO16    DC    X'4010000000000000'\nEXPONONE DC    X'41100000'\nC6       DC    X'3D9E0F1E'\nC5       DC    X'3E575D42BB7276D4'\nC4       DC    X'3F276553A5F9BC94'\nC3       DC    X'3FE35846A61AEE7A'\nC2       DC    X'403D7F7BFF0289DE'\nC1       DC    X'40B17217F7D1CC79'\nC0A      DC    X'4080000000000000'\nMCONST   DC    X'40F5257D152486CC'\n         DC    X'40EAC0C6E7DD2439'\n         DC    X'40E0CCDEEC2A94E1'\n         DC    X'40D744FCCAD69D6B'\n         DC    X'40CE248C151F8481'\n         DC    X'40C5672A115506DB'\n         DC    X'40BD08A39F580C57'\n         DC    X'40B504F333F9DE65'\n         DC    X'40AD583EEA42A14B'\n         DC    X'40A5FED6A9B15139'\n         DC    X'409EF5326091A112'\n         DC    X'409837F0518DB8A9'\n         DC    X'4091C3D373AB11C3'\n         DC    X'408B95C1E3EA8BD7'\n         DC    X'4085AAC367CC487B'\nSCALER1  DC    X'45000000'\nEXPO#MAX DC    X'42AEAC4E'\nEXPO#MIN DC    X'C2B437DF'\n         LTORG\n*        END\n         TITLE 'LOGARITHMIC FUNCTION'\nLOGRTHMC CSECT\n*        LOGARITHMIC FUNCTION (LONG)\n         SPACE\n         ENTRY DLOG\n         ENTRY DLOG10\n         SPACE\n         SPACE\n         USING *,R15\nDLOG10   EQU   *\n         STM   R14,R3,12(R13)\n         MVI   LOGFLAG,1\n         LA    R15,DLOG-DLOG10(R15)\n         USING DLOG,R15\n         B     MERGE2\n         SPACE\nDLOG     EQU   *\n         STM   R14,R3,12(R13)\n         MVI   LOGFLAG,0\nMERGE2   STD   F0,DBUFF\n         LM    R0,R1,DBUFF\n         LTR   R2,R0\n         BC    12,LOGERROR\n         SRDL  R2,24\n         SLL   R2,2\n         STH   R2,IPART+2\n         SR    R2,R2\n         SLDL  R2,4\n         IC    R2,TABLE(R2)\n         SLDL  R0,0(R2)\n         STM   R0,R1,DBUFF\n         MVI   DBUFF,X'40'\n         SPACE\n         LA    R1,8\n         LD    F0,DBUFF\n         CE    F0,LIMIT\n         BH    READY2\n         SR    R1,R1\n         LA    R2,1(R2)\n         SPACE\nREADY2   LDR   R2,F0\n         SD    F0,HALFLOG\n         SD    F0,LOGZERO(R1)\n         AD    R2,HALFLOG(R1)\n         DDR   F0,R2\n         STD   F0,DBUFF\n         SPACE\n         MDR   F0,F0\n         LDR   R2,F0\n         MD    R2,C7#LOG\n         AD    R2,C6#LOG\n         MDR   R2,F0\n         AD    R2,C5#LOG\n         MDR   R2,F0\n         AD    R2,C4#LOG\n         MDR   R2,F0\n         AD    R2,C3#LOG\n         MDR   R2,F0\n         AD    R2,C2#LOG\n         MDR   R2,F0\n         AD    R2,C1#LOG\n         MDR   R2,F0\n         LD    F0,DBUFF\n         MDR   R2,F0\n         ADR   R2,F0\n         ADR   R2,F0\n         SPACE\n         LD    F0,IPART\n         LA    R2,256(R2)\n         STH   R2,IPART+2\n         SE    F0,IPART\n         MD    F0,LOGE2#2\n         ADR   F0,R2\n         SPACE\n         TM    LOGFLAG,X'1'\n         BZ    *+8\n         MD    F0,LOGTE\n         LM    R2,R3,28(R13)\n         SR    R15,R15\n         BR    R14\n         SPACE\nLOGFLAG  DS    C\n         SPACE\nLOGERROR LA    R15,15\n         LM    R2,R3,28(R13)\n         BR    R14\n         SPACE\nDBUFF    DS    D\nIPART    DC    X'4600000000000000'\nTABLE    DC    X'0303020201010101'\nLOGZERO  DC    X'0000000000000000'\nHALFLOG  DC    X'4080000000000000'\n         DC    X'4110000000000000'\nC7#LOG   DC    X'4025E9B17CA9B973'\nC6#LOG   DC    X'40273337E26DBA7F'\nC5#LOG   DC    X'402E8CD32A425C06'\nC4#LOG   DC    X'4038E38A00083F6B'\nC3#LOG   DC    X'4049249251450212'\nC2#LOG   DC    X'40666666665EBAA3'\nC1#LOG   DC    X'40AAAAAAAAAAAD6C'\nLOGE2#2  DC    X'40B17217F7D1CF7B'\nLOGTE    DC    X'406F2DEC549B943A'\nLIMIT    DC    X'40B504F3'\nACOM     DC    F'0'\n         LTORG\n*        END\n         TITLE 'SINE/COSINE FUNCTIONS'\nIHCLSCN  CSECT\n*\n*        SINE/COSINE FUNCTIONS (LONG)\n*              1. DIVIDE MAGNITUDE OF ARG BY PI/4 TO FIND OCTANT\n*                   AND FRACTION\n*              2. IF COSINE, ADD 2 TO OCTANT NUMBER\n*                 IF SINE FOR NEGATIVE ARG, ADD 4 TO OCTANT NUMBER\n*              3. COMPUTE SINE OR COSINE OF FRACTION*PI/4 DEPENDING\n*                   ON THE OCTANT\n*              4. IF OCTANT NUMBER IS FOR LOWER PLANE, MAKE SIGN -\n         SPACE\n         ENTRY DCOS\n         ENTRY DSIN\n         SPACE\n         SPACE\n         USING *,R15\nDCOS     EQU   *\n         STM   R14,R15,12(R13)\n         LA    R0,2                    OCTANT CRANK OF 2 TO R0\n         LA    R15,DSIN-DCOS(R15)      ADJUST BASE REGISTER\n         USING DSIN,R15                AND JOIN MAIN CIRCUIT\n         B     MERGE3\n         SPACE\nDSIN     EQU   *\n         STM   R14,R15,12(R13)\n         SR    R0,R0                   ARGUMENT ADDRESS TO R1\n         LTDR  F0,F0\n         BNL   *+8\n         LA    R0,4\n         SPACE\nMERGE3   EQU   *\n         LPER  F0,F0                   FORCE SIGN OF ARG TO +\n         CE    F0,LSCN#MAX\n         BC    10,LSCN$ERR             ERROR IF /X/ GRT THAN OR = PI*2*\n         SPACE\n         DD    F0,PIOV4#2              DIVIDE BY PI/4 AND SEPARATE INTE\n         LDR   R2,F0                   PART AND FRACTION PART OF QUOTIE\n         AW    R2,SCALER2              FORCE CHARACTERISTIC X'4E'\n         STD   R2,ARG                  INTEGER PART UNNORMALIZED = OCTA\n         SDR   R2,R2\n         AD    R2,ARG                  INTEGER PART NORMALIZED\n         SDR   F0,R2\n         AL    R0,ARG+4                ADJUST OCTANT NUMBER WITH CRANK\n         ST    R0,OCTNT#1              AND SAVE IT\n         SPACE\n         TM    OCTNT#1+3,X'01'         IF ODD OCTANT, TAKE COMPLEMENT\n         BZ    EVEN$1                  OF FRACTION TO OBTAIN MODIFIED A\n         SD    F0,HALFLSCN\n         SD    F0,HALFLSCN             SUBTRACT 1 IN 2 STEPS\n         SPACE\nEVEN$1   LPDR  F4,F0\n         SR    R1,R1                   R1 = 0 FOR COSINE POLYNOMIAL\n         TM    OCTNT#1+3,X'03'         THIS IS FOR OCTANT 2,3,6, OR 7\n         BM    *+8                     IF OCTANT 1,4,5, OR 8, USE SINE\n         LA    R1,8                    POLYNOMIAL.  R1 = 8\n         SPACE\n         MDR   F0,F0                   COMPUTE SIN OR COS OF MODIFIED A\n         LDR   R2,F0                   USING PROPER CHEBYSHEV INTERPOLA\n         MD    F0,C7#LSCN(R1)          POLYNOMIAL\n         AD    F0,C6#LSCN(R1)\n         MDR   F0,F2                   SIN(X)/X POLYN OF DEGREE 6 IN XS\n         AD    F0,C5#LSCN(R1)          COS(X)   POLYN OF DEGREE 7 IN XS\n         MDR   F0,R2\n         AD    F0,C4#LSCN(R1)\n         MDR   F0,R2\n         AD    F0,C3#LSCN(R1)\n         MDR   F0,R2\n         AD    F0,C2#LSCN(R1)\n         MDR   F0,R2\n         AD    F0,C1#LSCN(R1)\n         SPACE\n         LTR   R1,R1\n         BZ    COSF\n         MDR   F0,F4                   COMPLETE SIN POLYNOMIAL BY\n         B     LSCNSIGN                MULTIPLYING BY X\n         SPACE\nCOSF     MDR   F0,R2                   COMPLETE COS POLYNOMIAL\n         AD    F0,HALFLSCN             (ONE MORE DEGREE)\n         AD    F0,HALFLSCN             ADD 1 IN 2 STEPS\n         SPACE\nLSCNSIGN TM    OCTNT#1+3,X'04'         IF MODIFIED OCTANT IS IN\n         BZ    *+6                     LOWER PLANE, SIGN IS NEGATIVE\n         LNER  F0,F0\n         SPACE\n         SR    R15,R15\n         BR    R14\n         SPACE\n         CNOP  0,4\nLSCN$ERR LA    R15,16\n         BR    R14\n         SPACE\nARG      DS    D\nSCALER2  DC    X'4E00000000000000'\nC7#LSCN  DC    X'B66C992E84B6AA37'\n         DC    X'3778FCE0E5AD1685'     S6\nC6#LSCN  DC    X'387E731045017594'\n         DC    X'B978C01C6BEF8CB3'     S5\nC5#LSCN  DC    X'BA69B47B1E41AEF6'\n         DC    X'3B541E0BF684B527'     S4\nC4#LSCN  DC    X'3C3C3EA0D06ABC29'\n         DC    X'BD265A599C5CB632'     S3\nC3#LSCN  DC    X'BE155D3C7E3C90F8'\n         DC    X'3EA335E33BAC3FBD'     S2\nC2#LSCN  DC    X'3F40F07C206D6AB1'\n         DC    X'C014ABBCE625BE41'     S1\nC1#LSCN  DC    X'C04EF4F326F91777'     LAST DGT REDUCED BY 2\nPIOV4#2  DC    X'40C90FDAA22168C2'     S0\nHALFLSCN DC    X'4080000000000000'     1/2 = C0/2\nLSCN#MAX DC    X'4DC90FDA'\nOCTNT#1  DS    F\n         LTORG\n*        END\n         TITLE 'TANGENT/COTANGENT FUNCTIONS'\nIHCLTNCT CSECT\n*        TANGENT-COTANGENT FUNCTION (LONG)\n*              1. DIVIDE MAGNITUDE OF ARG BY PI/4 TO FIND OCTANT AND\n*              FRACTION.  REDUCED ARGUMENT W IS EITHER THIS\n*              FRACTION OR ITS COMPLEMENT.  THE MAGNITUDE OF\n*              ANSWER IS EITHER TAN(W*PI/4) OR COT(W*PI/4)\n*              2. IF /ARG/ IS EQUAL OR GREATER THAN PI*2**50, ERROR1\n*              3. IF COTAN IS WANTED, AND IF /ARG/ IS EQUAL OR SMALLER\n*              THAN 2**(-252), ERROR2\n*              4. IF ARG IS SO CLOSE TO ONE OF SINGULARITIES OF THE\n*              FUNCTION THAT THE COMBINED EFFECT OF COMPUTATIONAL\n*              ERROR AND MINIMAL INPUT ERROR CAN CAUSE RELATIVE\n*              ERROR OF 1/5, ERROR2 IS GIVEN\n         SPACE\n         ENTRY DTAN\n         ENTRY DCTAN\n         ENTRY QDTAN                   FOR MODIFICATION OF ERROR CONTRO\n         SPACE\n         SPACE\n         USING *,R15\nDCOTAN   EQU   *\nDCTAN    EQU   *\n         STM   R14,R15,12(R13)         SAVE REGISTERS\n         MVI   SWICH,X'97'             SET INSTRUCTION AT SWICH TO XI\n         LA    R15,DTAN-DCOTAN(R15)    ADJUST BASE REGISTER\n         USING DTAN,R15                AND JOIN COMMON CIRCUIT\n         B     MERGE4\n         SPACE\nDTAN     EQU   *\n         STM   R14,R15,12(R13)         SAVE REGISTERS\n         MVI   SWICH,X'91'             SET INSTRUCTION AT SWICH TO TM\n         SPACE\nMERGE4   EQU   *\n         STE   F0,ARG#T\n         LPER  F0,F0                   /ARG/\n         CE    F0,LTNCTMAX\n         BC    10,ERROR1               IF /ARG/ TOO BIG, GIVE ERROR1\n         DD    F0,PIOV4#3\n         STE   F0,OCTNT#2\n         MVC   TEST(1),OCTNT#2         GIVE CHAR OF QUOTIENT TO TESTING\n         CE    F0,LTNCTONE\n         BC    10,NORML2               IF QUOTIENT HAS INTEGER PART, SK\n         SPACE\n         MVI   OCTNT#2+7,X'00'         SET LOW PART OCTANT TO 0\n         TM    SWICH,X'02'             IF PURE FRACTION\n         BZ    JOIN$2                  AND IF TAN ENTRY, SKIP\n         CE    F0,MIN                  IF PURE FRACTION AND COTAN ENTRY\n         BH    JOIN$2                  SKIP ONLY WHEN NO DANGER OF OVER\n         SPACE\n         CNOP  0,4\nERROR2   LA    R15,18\n         BR    R14\n         SPACE\nNORML2   LDR   R2,F0                   IF QUOTIENT HAS INTEGER PART,\n         AW    R2,CH4E                 ISOLATE IT IN R2 (UNNORMALIZED)\n         STD   R2,OCTNT#2              SAVE IT (LAST BITS ARE FOR OCTAN\n         SDR   R2,R2                   NORMALIZE IT IN R2 AND\n         AD    R2,OCTNT#2              SUBTRACT IT FROM F0 TO\n         SDR   F0,R2                   OBTAIN FRACTION PART IN F0\nJOIN$2   TM    OCTNT#2+7,X'01'\n         BZ    EVEN$2                  IF EVEN OCTANT, MODIF ARG W IS R\n         SD    F0,HALFLTNC             IF ODD OCTANT, W=1-FRACTION\n         SD    F0,HALFLTNC\nEVEN$2   LPDR  F6,F0                   LEAVE W IN F6\nSWICH    XI    OCTNT#2+7,X'01'         XI IF COTAN ENTRY, TM IF TAN ENT\n         MDR   F0,F0                   I.E., IF COTAN, REVERSE LAST BIT\n         LDR   F4,F0                   OF OCTANT.  THIS ACTION REDUCES\n         MD    F0,A3                   COTAN ENTRY TO TAN ENTRY\n         AD    F0,A2\n         MDR   F0,F4                   COMPUTE FACTORS P(W) AND Q(W)\n         AD    F0,A1                   BY POLYNOMIALS OF THE FORM\n         MDR   F0,F4\n         AD    F0,A0                   P(W) = A0*W+A1*W**3\n         MDR   F0,F6                   +A2*W**5+A3*W**7\n         LDR   R2,F4\n         AD    F2,B3                   Q(W) = B0+B1*W**2\n         MDR   F2,F4                   +B2*W**4+B3*W**6+W**8\n         AD    R2,B2\n         MDR   R2,F4\n         AD    R2,B1\n         MDR   R2,F4\n         AD    R2,B0\n         TM    OCTNT#2+7,X'03'\n         BM    COTN\n         DDR   F0,F2                   IF OCTANT IS 0 OR 3 (MOD 4),\n         B     LTNCSIGN                THE ANSWER IS TAN(W*PI/4=P(W)/Q(\n         SPACE\nCOTN     CD    F6,TEST                 IF OCTANT IS 1 OR 2 (MOD 4), AND\n         BC    12,ERROR2               W IS TOO SMALL, SINGULARITY TROU\n         DDR   R2,F0                   OTHERWISE, THE ANSWER IS\n         LDR   F0,R2                   COTAN(W*PI/4)=Q(W)/P(W)\n         SPACE\nLTNCSIGN TM    OCTNT#2+7,X'02'         IF OCTANT IS 2 OR 3 (MOD 4)\n         BZ    *+6                     CHANGE SIGN OF ANSWER\n         LCER  F0,F0\n         TM    ARG#T,X'80'\n         BZ    *+6                     CHANGE SIGN OF ANSWER\n         LCER  F0,F0\n         SR    R15,R15\n         BR    R14\n         SPACE\n         SPACE\n         CNOP  0,4\nERROR1   LA    R15,17\n         BR    R14\n         SPACE\nOCTNT#2  DS    D\nPIOV4#3  DC    X'40C90FDAA22168C2'     PI/4\nHALFLTNC DC    X'4080000000000000'\nCH4E     DC    X'4E00000000000000'     UNNORM ZERO FOR SCALING\nTEST     DC    X'00000000'             WITH EXPN P GIVEN TO TEST,\nQDTAN    DC    X'00000008'             VALUE OF 2 WORDS = 2**(4P-53)\nA0       DC    X'46A6C4EF86458B3D'      0.1092939152449866E+8 RDD UP\nA1       DC    X'C5DB82BFF1D367E5'     -0.8991159965395029E+6\nA2       DC    X'443799624FA939C4'     0.1423338402803097E+5\nA3       DC    X'C22DB88919A77DCD'     -0.4572084198321481E(2\nB0       DC    X'46D456557D27917A'      0.1391573348888501E+8\nB1       DC    X'C63D20D20D5EE18A'     -0.4006098052229019E+7\nB2       DC    X'45212A3F3063FBCA'      0.1358439493141017E+6\nB3       DC    X'C33F931E00B5BF01'     -0.1017194824895807E+4\nLTNCTMAX DC    X'4DC90FDA'             PI*2**50\nMIN      DC    X'02145F31'             (4/PI)*2**-252\nLTNCTONE DC    X'41100000'\nARG#T    DS    F\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CHIMP": {"ttr": 2049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x15\\x00\\x00\\x00\\x814\\x1f\\x00\\x92\\t\\x0f C\\x05\\xd4\\x04\\x13\\x03\\x8f\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.21", "flags": 0, "createdate": "1981-12-07T00:00:00", "modifydate": "1992-03-30T20:43:00", "lines": 1492, "newlines": 1043, "modlines": 911, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1990 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nCHIMP TITLE 'C H I M P - MAIN STORAGE MONITOR (REAL TIME) DCMS VERSION'\n***********************************************************************\n*.\n* IN CASE YOU ARE INTERESTED, THE SOURCE OF THE NAME (OR RATHER THE\n* JUSTIFICATION FOR THE NAME) OF THIS SILLY PROGRAM IS/WAS:\n*  COMPUTERIZED HEURISTIC INFORMATION MONITORING PROGRAM  (WHEW!)\n* THIS COMMAND HAS SEVERAL DIFFERENT MODES OF DISPLAY:\n*\n*     I   - THIS MODE WILL DISPLAY ONLY THOSE MEMORIES WHICH ARE EITHER\n*           SWAPPED IN AND RUNNING OR SWAPPED OUT BUT READY TO RUN.\n*     O   - THIS MODE WILL DISPLAY ALL ACTIVE MEMORIES IN THE SYSTEM,\n*           REGARDLESS OF LOCATION.\n*\n*   TO SWITCH BETWEEN MODES, TYPE EITHER I OR O.\n*\n*      YOU MAY ALSO ENTER OPTIONS TO RESTRICT THE OUTPUT TO ONLY\n*      TSO MEMORIES (IN EITHER IN/OUT OR WAITING STATUS ACCORDING\n*      TO YOUR USE OF THE I AND O OPTIONS ABOVE) OR ONLY STARTED\n*      TASK/BATCH JOB MEMORIES:\n*\n*     T  - RESTRICTS THE OUTPUT TO ONLY TSO MEMORIES\n*\n*     J  - RESTRICTS THE OUTPUT TO ONLY BATCH MEMORIES\n*\n*     S  - RESTRICTS THE OUTPUT TO ONLY STARTED TASK MEMORIES\n*\n*     B  - RESTRICTS THE OUTPUT TO STARTED TASK/BATCH MEMORIES\n*\n*     A  - SELECTS ALL - TSO, STARTED TASK, AND BATCH MEMORIES\n*\n*   TO EXIT FROM THIS COMMAND, SIMPLY TYPE E (FOR END),\n*         OR HIT PA1 (ATTN) OR PF3 OR PF12 (DCMS STANDARD EXIT)\n*\n*  GLOSSARY OF TERMS FOR OUTPUT DISPLAY:\n*\n*    JOB       JOB NAME OF MEMORY\n*    STEP      FOR BATCH JOBS WILL ALWAYS BE INIT.\n*              FIXED TO SHOW ACTUAL BATCH STEP NAME                U001\n*              FOR TSO JOBS AND STARTED TASKS WILL BE ACTUAL STEP NAME.\n*    RL        REASON CODE FOR SWAP OUT FROM OUCBPFL.\n*              THE FOLLOWING ARE THE REASON CODES DISPLAYED:\n*                R  RESET VALUE.\n*                W  MEMORY IS IN LONG WAIT OR INPUT TERMINAL WAIT.\n*                T  MEMORY IS IN OUTPUT TERMINAL WAIT.\n*                E  AN ENQHOLD HAS BEEN RECEIVED FOR THIS MEMORY.\n*                V  MEMORY WAS SWAPPED OUT BY MS6 LONG WAIT DETECTION.\n*                O  MEMORY WAS SWAPPED OUT TO MAKE ROOM FOR TSO TRIV.\n*                P  INVOLUNTARY SWAPOUT USUALLY DUE TO PARTIAL ANAL.\n*                S  SWAPOUT CAUSED BY REAL STORAGE SHORTAGE.\n*                ?  UNABLE TO DETERMINE SWAPOUT REASON.\n*    FRAMES    CURRENT AMOUNT OF MEMORY ALLOCATED TO THIS MEMORY.\n*    WSS       SRM'S VIEW OF THE WORKING SET SIZE FOR THIS MEMORY.\n*    T         TYPE OF MEMORY (S=STC OR MOUNT, T=TSO, J=BATCH)     U001\n*    CL        CURRENT LOCATION OF THIS MEMORY:\n*                IN  SWAPPED IN AND ELIGIBLE TO RUN.\n*                OUT SWAPPED OUT BUT READY TO RUN.\n*                WT  SWAPPED OUT AND NOT READY TO RUN.\n*                N/S SWAPPED IN AND V=R OR NON-SWAPPABLE STATUS.\n*                <-> TRANSITIONING BETWEEN STATES.\n*    DP        DISPATCHING PRIORITY OF MEMORY (IN HEX).\n*    PG        PERFORMANCE GROUP.\n*    SC        NUMBER OF TIMES THE MEMORY HAS BEEN SWAPPED IN THE\n*              CURRENT TRANSACTION.\n*    WMR       CURRENT SRM WORKLOAD MANAGER RECOMMENDATION VALUE.\n*              (ACTUALLY THE WORKLOAD LEVEL AT WHICH THIS MEMORY IS\n*               OPERATING).\n*    SRV       SERVICE ACCUMULATED IN THE LAST SWAPPED IN PERIOD.\n*    CPU       CPU TIME IN SECONDS USED BY THE MEMORY (SRB PLUS TASK).\n*\n*  MODIFIED TO RUN REAL TIME UNDER DCMS NOV  25, 1976 (HAPPY       U001\n*  THANKSGIVING )                                                  U001\n*  - WHEN RUNNING UNDER DCMS THE FOLLOWING DIFFERENCES OCCUR       U001\n*    . THE SCREEN IS UPDATED ON  AN INTERVAL SPECIFIED BY THE      U001\n*      USER ( DEFAULT SET TO ONE SECOND )                          U001\n*                                                                  U001\n*       3270                                                       U001\n*        KEY     FUNCTION                                          U001\n*      ________  ________________________________________________  U001\n*                                                                  U001\n*    .  -----                                                      U001\n*      | PF1 |   DISPLAY HELP SCREEN                               U005\n*      |     |                                                     U001\n*       -----                                                      U001\n*                                                                  U001\n*    .  -----                                                      U001\n*      | PF2 |   START AUTO UPDATING.                              U005\n*      |     |                                                     U001\n*       -----                                                      U001\n*                                                                  U001\n*    .  -----                                                      U001\n*      | PF3 |   EXIT CHIMP                                        U005\n*      |PF12 |                                                     U001\n*       -----                                                      U001\n*                                                                  U001\n*    .  -----                                                      U001\n*      | PA1 |   WILL GET THE USER OUT OF  CHIMP WHEN ALL          U001\n*      |     |   ELSE FAILS                                        U001\n*       -----                                                      U001\n*                                                                  U001\n*                                                                  U001\n*    ANY PROBLEMS, COMMENTS (NON-CAUSTIC), SUGGESTIONS ARE         U001\n*    WELCOME:                                                      U001\n*       FRED LUDDY                                                 U001\n*       AMDAHL CORP.                                               U001\n*       1250 E. ARQUES                                             U001\n*       SUNNYVALE CA. 95051                                        U001\n*    PHONE:                                                        U001\n*       (408) - 735 - 4011                                         U001\n*\n*    PROGRAM CHANGED TO DCMS STANDARDS, CODE ADDED FOR STARTED     U003\n*    TASK SELECTION, AND AUTO UPDATE UNDER TSO, FEB. 79, BY:       U003\n*       DWIGHT HARM                                                U003\n*       SYSTEM DEV. CORP.                                          U003\n*       2500 COLORADO AVE.                                         U003\n*       SANTA MONICA, CA. 90405                                    U003\n*    PHONE:                                                        U003\n*       (213) - 829-7511 X2423 OR X3701                            U003\n*\n*  Updates:\n*    16Dec90  U026 LDW  Correct frame count & WSS for MVS/SP 3.1\n*    21Sep89  U025 LDW  Fix bug in CPU display for > 9999.99 seconds\n*    08Apr89  U024 LDW  Indicate disconnected TSO users via '*' in last\n*                          character of userid field\n*    20Aug88  U023 LDW  Display frames in M if > 9999K\n*    29Aug87  U022 LDW  Fix for MVS/XA\n*                       Fix for missing info for TSO \"STARTING\"\n*                       Change various char constants to lower case\n*    20Jun87  U021 LDW  For TSO address spaces, display VTAM terminal\n*                          id in PROCSTEP field if CHIMP is APF auth\n*                       Rearrange stuff to fix addressability problem\n*                       Don't use LC macro anymore\n*                       Add third help screen to split out pfk defs\n*                       Copy help text to workarea so that help screens\n*                          don't upper case after first time\n*    04Apr87  U020 LDW  Add \"D\" command for detail display\n*    26DEC86  U019 LDW  DISPLAY IDLE TIME ON HEX SCREEN\n*                       USE &@@SPLVL IN @GLOBALS INSTEAD OF &LEVEL\n*    02/24/86 U018 LDW  ALLOW MVS OPERATOR COMMANDS TO BE ISSUED VIA\n*                          \"/XXX\"\n*    07/31/84 U017 LDW  DISPLAY 6 DIGITS OF IOREQ INSTEAD OF 5\n*                       RE-WRITE SERVICE UNITS DISPLAY CODE\n*    ??/??/?? U016 LDW  FORGOT AN UPDATE NOTE IN HERE SOMEWHERE...\n*    08/01/83 U015 LDW  DISPLAY PERF GROUP PERIOD ON PF5 TYPE DISPLAY\n*                       CHANGE SOME HEADERS TO LOWER CASE\n*                       DELETE SOME OLD COMMENTED OUT CODE\n*                       FIX FOR SERVICE UNITS > 99.9M\n*                       DON'T CHECK LOGICAL SWAP IF NOT SP\n*                       FIX SELECTION CODE FOR STARTED TASKS SO THAT\n*                          'J' COMMAND DOES NOT ALSO SELECT STC'S\n*                       CLEAN UP TYPE SELECTION\n*                       CHANGE HELP SCREENS TO LOWER CASE\n*    07/08/82 U014 LDW  ADD MORE STUPID EQUATES FOR SP1 \"IRARMCT\" MACRO\n*    05/25/82 U013 LDW  DISPLAY 4 DIGITS OF SWAP COUNT (NOTE: IT WILL\n*                          RUN INTO PRECEDING FIELD IF > 999)\n*    04/13/82 U012 LDW  FIX SERVICE UNITS WHEN DISPLAYED AS \"M\"\n*    03/29/82 U011 LDW  ADD \"LOGICAL SWAP\" LOCATION TYPE\n*    03/23/82 U010 LDW  REDESIGN FIELD DISPLAY LOGIC SO CAN HAVE\n*                          DIFFERENT COMBINATIONS OF FIELDS DISPLAYED\n*                       ADD 'X' COMMAND TO DISPLAY HEX STUFF, 'D'\n*                          TO RESET TO NORMAL DISPLAY ('X' WILL\n*                          FLIPFLOP, AND IS RESTRICTED) (MAKE PF5='X')\n*                       SPLIT FLAGS INTO 2 FLAG BYTES, CHANGE NAMES\n*                          (MOST OF THIS UPDATE NOT MARKED)\n*                       USING -> USNGX, DROP -> DROPX\n*                       ADD \"Z\" COMMAND TO EXIT\n*                       ADD \"U\" COMMAND TO PRETEND TO SET DISPLAY LIKE\n*                          DUMB USER (PF6='U')\n*                       ATTEMPT TO FIX BLANK SCREEN OVERFLOW PROBLEM\n*    03/22/82 U009 LDW  PUT IN CONDITIONAL ASSEMBLY FOR SP1.1\n*    02/11/82 U008 LDW  FIX FOR TOO LARGE CPU AND SERVICE UNIT VALUES\n*    12/07/81 U007 LDW  FIX DISPLAY OF LOCATION AND SWAP REASON CODE\n*                          (RE-ARRANGE COLUMNS TO DO THIS RIGHT)\n*                       FIX MISSING TITLE ON SECOND SCREEN BUG\n*                       ADD DISPLAY OF VARIOUS SRM DATA\n*                       ONLY DISPLAY PGN/DMN IF OPERATOR\n*                       GENERAL RE-ARRANGEMENT OF DISPLAY DATA\n*                       FIX UP HELP SCREENS\n*                       USE ALL APPROPRIATE DSECTS INSTEAD OF OFFSETS\n*    09/23/81 U006 LDW  FIX DISPLAY OF I/O > 99999\n*    07/25/80 U005 LDW  ADD HELP SCREEN\n*                       STANDARDIZE PF KEYS\n*    03/21/80 U004 LDW  SHOW I/O COUNT\n*                       FIX FOR OVERFLOW IN SERVICE UNITS DISPLAY\n*                       USE DSECTS CORRECTLY\n*                       GENERAL CLEANUP\n*    02/  /79 U003 DLH  DWIGHT HARM CHANGES @ SDC\n*    11/27/76 U002 SU7  REPAIR DAMAGE TO OUCB LEFT BY SUPER 1 & 2 SU'S\n*    11/25/76 U001      FRED LUDDY CHANGES @ AMDAHL\n*.\n***********************************************************************\n         SPACE 3\n         MACRO                                                     U005\n&NFS     FLD   &INTEN,&TEXT,&OPTION=,&CURSOR=NO,&ROW=,&COLUMN=,    U021$\n               &FUDGE=0                                            U???\n         LCLA  &L,&I                                               U005\n&L       SETA  K'&TEXT-2-&FUDGE                                    U005\n         MNOTE '         DCMSFLD  &L,&OPTION,INTEN=&INTEN,CURSOR=&CURSO$\n               R,ROW=&ROW,COLUMN=&COLUMN'                          U005\n&NFS     DCMSFLD  &L,&OPTION,INTEN=&INTEN,CURSOR=&CURSOR,ROW=&ROW, U005$\n               COLUMN=&COLUMN                                      U005\nHELPIMG  CSECT ,                        RESUME\n         DC    C&TEXT\nCHIMP    CSECT\n*---------------------------------------------------------------------*\n         SPACE 2\n         MEND                                                      U005\n         SPACE 2\n*U019    GBLA  &LEVEL                                              U009\n*&LEVEL  SETA  13                       MVS/SP1.3                  U015\n         COPY  @GLOBALS                                            U019\n         EJECT\nCHIMP    DCMSTART RENT,STAE=NO,LV=4096\n         MVI   FLAG1,F1JOBS+F1INONLY+F1TSO  DEFAULT=IN JOBS & TSO\n         MVI   FLAG2,F2USER             ASSUME DUMB USER           U010\n         L     R1,PSATOLD-PSA           -> MY TCB                  U007\n         L     R1,TCBJSCB-TCB(,R1)      -> JSCB                    U007\n         L     R1,JSCBPSCB-IEZJSCB(,R1) -> PSCB                    U007\n         TM    PSCBATR1-PSCB(R1),PSCBCTRL  OPERATOR?               U007\n         BNO   *+8                      NO - SKIP                  U007\n         XI    FLAG2,F2OPER+F2USER      YES - SET OPER, RESET USER U010\n*\n         TESTAUTH  FCTN=1                                          U021\n         SPACE 1\n         LTR   R15,R15                  are we APF authorized?     U021\n         BNZ   *+8                      no - skip                  U021\n         OI    FLAG2,F2APF              yes - remember             U021\n         SPACE 1\n          AIF   (&@@SPLVL LT 130).NOTXA1                           U022\n         L     R1,CVTPTR                LOAD PTR TO CVT.           U022\n         TM    CVTDCB-CVT(R1),CVTMVSE   running under MVS/XA?      U022\n         BZ    NOT$XA1                  no - skip                  U022\n         OI    FLAG2,F2MVSE             yes - remember             U022\n          AIF   (&@@SPLVL LT 200).NOTXA1                           U022\n         $AMODE  31                                                U022\nNOT$XA1  EQU   *                                                   U022\n.NOTXA1   ANOP                                                     U022\n*\n         BAL   R14,CLEARIT              CLEAR SCREEN\n*\nRESTART  EQU   *\n         L     R1,CVTPTR                LOAD PTR TO CVT.           U007\n         L     R1,CVTASVT-CVT(,R1)      TO ASVT                    U007\n         L     R8,ASVTMAXU-ASVT(,R1)    MAXIMUM NUMBER OF ENTRIES  U007\n         LA    R9,ASVTENTY-4-ASVT(,R1)  FIRST ENTRY MINUS 4.       U007\n         LA    R1,SCR1+7                ADDR OF FIRST ATTR BYTE-2\n         ST    R1,ATTRLOC               SAVE FOR LATER\n         ST    R1,FIRSTATR              SAVE FOR LATER\n*\n         LA    R4,LINE1                 -> PLACE FOR HEADER LINE   U021\n         L     R15,=A(HEADERS)          -> COLUMN HEADERS          U010\n         BAL   R14,MOVEDATA             BUILD THE CORRECT HEADING  U010\n         LA    R4,LINE2                 LOAD ADDR OF OUTPUT BUFFER U010\n         MVC   CURLINES,TOTLINES        CURRENT LINES AVAILABLE    U003\nASCBLOOP LA    R9,4(,R9)                -> NEXT ASCB POINTER       U007\n         ICM   R5,B'1111',0(R9)         LOAD THE PTR.              U007\n         BM    NEXTASCB                 BRANCH IF ASID NOT IN USE\n         MVC   FIELDS(L'BLANKS),BLANKS  CLEAR ALL DISPLAY FIELDS   U010\n         MVC   FIELDS+L'BLANKS(FIELDLEN-L'BLANKS),BLANKS  THE REST U010\n         USNGX ASCB,R5                                             U001\n         UNPK  EDITWORK(6+1),1(3+1,R9)  FORMAT THE ASCB ADDRESS    U010\n         TR    EDITWORK(6),TRTBL        MAKE IT PRINTABLE          U010\n         MVC   F@ASCB,EDITWORK          SAVE                       U010\n         UNPK  EDITWORK(4+1),ASCBASID(2+1)  FORMAT THE ASID        U010\n         TR    EDITWORK(4),TRTBL        MAKE IT PRINTABLE          U010\n         MVC   F@ASID,EDITWORK          SAVE                       U010\n         TM    ASCBRCTF,ASCBOUT         TEST FOR SWAPPED OUT.\n         BZ    SWAPDIN                  IN...ALWAYS DISPLAY        U003\n         TM    FLAG1,F1INONLY           DID USER REQ ONLY IN?      U003\n         BO    NEXTASCB                 ...YES, SKIP THIS ONE.     U003\n*\nSWAPDIN  EQU   *\n         L     R15,ASCBOUCB             LOAD OUCB POINTER\n         USNGX OUCB,R15                                            U004\n         MVI   STATFLAG,X'00'           CLEAR BYTE FOR TESTING\n         TM    OUCBYFL,OUCBLOG          IT IS TSO?\n         BZ    NOTTSO\n         OI    STATFLAG,F1TSO           YES, SET FLAG\n         B     CKFLAGS                  AND COMPARE TO REQUESTED\n         DROPX R15                                                 U015\n*\n*NOTTSO  TM    ASCBFLG1,ASCBTOFF        TIMING OFF = STARTED TASK\n*U015    BZ    NOTSTC                   YES - MUST BE BATCH JOB    U015\nNOTTSO   CLC   ASCBJBNI,=F'0'           ANY INITIATED JOBNAME PTR? U015\n         BNE   NOTSTC                   YES - MUST BE BATCH JOB    U015\n         OI    STATFLAG,F1STC           SET FLAG\n         B     CKFLAGS                  AND COMPARE TO REQUESTED\n*\nNOTSTC   OI    STATFLAG,F1JOBS          MUST BE BATCH\n*\nCKFLAGS  NC    STATFLAG,FLAG1           CHECK FOR MATCH\n         BZ    NEXTASCB                 NO MATCH...SKIP IT.\n*\n         L     R7,ATTRLOC               LAST ATTRIBUTE BYTE        U007\n         LA    R7,8(,R7)                THIS ATTRIBUTE BYTE        U007\n         ST    R7,ATTRLOC                                          U007\n*\n         MVC   0(79,R4),BLANKS          CLEAR THIS LINE            U021\n         MVC   F@JOB,=CL8'starting'     TO BYPASS GARBAGE          U022\n         L     R15,ASCBJBNI             AN INITIATED JOB ?         U001\n         LTR   R15,R15                  ...                        U001\n         BZ    NOTINIT                  NO                         U001\n         MVC   F@JOB,0(R15)             MOVE JOBNAME               U001\n*                                                                  U001\n* INITIATED JOBS DO NOT HAVE A CSCB PTR, BUT ASCBJBNI POINTS TO    U001\n* CHKEY WHICH IS 8 INTO THE CSCB.                                  U001\n*                                                                  U001\n         USNGX CHKEY,R15                                           U004\n         MVC   F@STEP,CHSTEP            MOVE THE STEPNAME          U001\n         MVC   F@PROC,CHPROCSN          MOVE THE PROCSTEPNAME      U010\n         MVI   F@TYPE,C'j'              ADD BATCH TYPE             U004\n         B     STEPOK                   AN DAS AWL                 U001\n         DROPX R15                                                 U001\n         SPACE 2                                                   U001\nNOTINIT  EQU   *                                                   U001\n         L     R15,ASCBJBNS             GET HIS NAME               U001\n         LTR   R15,R15                                             U001\n*U022    BZ    STEPOK                   UNDECIDED ...              U001\n         BZ    *+10                     UNDECIDED ...              U022\n         MVC   F@JOB,0(R15)             MOVE JOBNAME               U001\n*                                                                  U001\n*                                                                  U001\n* S / M / L SHOULD ALWAYS HAVE A CSCB PTR.                         U001\n*                                                                  U001\n         L     R15,ASCBCSCB                                        U001\n         LTR   R15,R15                                             U001\n         BZ    STEPOK                   I GIVE UP                  U001\n         USNGX CSCB,R15                                            U001\n         MVC   F@STEP,CHCLS             MOVE THE STEPNAME          U001\n         MVC   F@PROC,CHPROCSN          MOVE THE PROCNAME          U010\n         MVI   F@TYPE,C't'              DEFAULT TSO                U001\n         CLI   CHTRKID,CHTSID           IS IT ?                    U001\n         BE    STEPTSO                  YES.                       U001\n         MVI   F@TYPE,C's'              INDICATE STARTED TASK      U001\n         MVC   F@PROC,CHPROCSN          MOVE THE PROCNAME          U021\n         DROPX R15                                                 U004\n         B     STEPOK                   continue                   U021\n         SPACE 1\nSTEPTSO  TM    FLAG2,F2APF              are we APF authorized?     U021\n         BZ    STEPOK                   no skip                    U021\n         L     R2,ASCBTSB               -> TSB                     U021\n         MODESET  KEY=ZERO                                         U021\n         MVC   F@PROC,TSBTRMID-TSB(R2)  put termid in procstep     U021\n         TM    TSBFLG4-TSB(R2),TSBHUNG  has terminal hung up?      U024\n         BZ    *+8                      no - ok                    U024\n         MVI   F@JOB+7,C'*'             yes - indicate disc        U024\n         MODESET  KEY=NZERO                                        U021\nSTEPOK   DS    0H\n          AIF   (&@@SPLVL GE 300).FMCTESA                          U026\n         LH    R0,ASCBFMCT              LOAD ALLOC FRAME COUNT.\n          AGO   .FMCTOK                                            U026\n.FMCTESA  ANOP                                                     U026\n         L     R14,ASCBRSME             -> RAX                     U026\n         L     R0,RAXFMCT-RAX(,R14)     get current frame count    U026\n.FMCTOK   ANOP                                                     U026\n         SLL   R0,2                     4K PER FRAME.\n         BAL   R14,STORAGE              CONVERT TO DECIMAL FORMAT. U004\n         MVC   F@FRAMES,EDITWORK+4      MOVE IN 4 DIGITS + 'K'     U023\n         CH    R0,=H'9999'              too big for field?         U023\n         BNH   FRAMESOK                 no - ok                    U023\n         MVI   F@FRAMES+4,C'M'          yes - change units type    U023\n         MVC   F@FRAMES(2),EDITWORK+3   move in mm                 U023\n         MVI   F@FRAMES+2,C'.'          decimal point              U023\n         MVC   F@FRAMES+3(1),EDITWORK+3 move in hundred thousands  U023\n         C     R0,=F'99999'             did it fit as mm.m?        U023\n         BNH   FRAMESOK                 yes - ok                   U023\n         MVC   F@FRAMES,EDITWORK+1      no - move in 4 digits      U023\n         SPACE 1\nFRAMESOK EQU   *                                                   U023\n         L     R6,ASCBOUCB              PTR TO OUCB.\n         USNGX OUCB,R6                                             U004\n          AIF   (&@@SPLVL GE 300).WSSESA  maybe earlier than 3.1?  U026\n         LH    R0,OUCBWSS               SRM'S IDEA OF WORKING SET  U002\n          AGO   .WSSOK                                             U026\n.WSSESA   ANOP                                                     U026\n         L     R0,OUCBWSS               working set size           U026\n.WSSOK    ANOP                                                     U026\n         SLL   R0,2                     TIMES FOUR FOR K.\n         BAL   R14,STORAGE              CONVERT TO DECIMAL.\n         MVC   F@WSS,EDITWORK+4         MOVE IN 4 DIGITS + 'K'     U023\n         CH    R0,=H'999'               too big for field?         U023\n         BNH   *+14          >=======+  no - ok                    U023\n         MVC   F@WSS,EDITWORK+1      |  move in 4 digits           U023\n         MVI   F@WSS+4,C'M'          V  and show units type        U023\n         SPACE 1\n         MVC   F@WHERE,=C'in'           DEFAULT MEMORY POS IS IN   U007\n         MVI   0(R7),X'F8'              SET DCMS HI-INTEN ATR BYTE U003\n         TM    OUCBSFL,OUCBNSW          TEST FOR NON-SWAP          U007\n         BZ    TRYPRIV                  BRANCH IF NOT NON-SWAP.    U007\n         MVC   F@WHERE,=C'ns'           INDICATE NON-SWAPPABLE     U007\n         B     WHEREOK                  SKIP REST OF POSITION PROC'ING\nTRYPRIV  DS    0H                                                  U007\n         TM    OUCBSFL,OUCBPVL          PRIVILEGED PGM RUNNING?    U007\n         BZ    TRYMSO                   NO - SKIP                  U007\n         MVC   F@WHERE,=C'pr'           YES - INDICATE             U007\n         MVI   0(R7),X'F4'              SET LOW INTENSITY          U007\nTRYMSO   DS    0H                                                  U007\n         TM    OUCBQFL,OUCBOFF          REQ: ENTER WAIT STATE?     U007\n         BZ    NOTOFF                   NO - SKIP THIS SECTION     U007\n         TM    OUCBEFL,OUCBMWT          MSO DETECTED WAIT STATUS?  U007\n         BZ    TRYTERM                  NO - SKIP                  U007\n         MVC   F@WHERE,=C'wm'           YES - INDICATE             U007\n         MVI   0(R7),X'F4'              SET LOW INTENSITY          U007\n         B     WHEREOK                  DONE HERE                  U007\nTRYTERM  DS    0H                                                  U007\n         TM    OUCBEFL,OUCBTRM          TERMINAL WAIT STATUS?      U007\n         BZ    TRYLONG                  NO - SKIP                  U007\n         MVC   F@WHERE,=C'wt'           YES - INDICATE             U007\n*U019     AIF   (&LEVEL LT 11).LSW01    SKIP IF NOT SP             U015\n          AIF   (&@@SPLVL LT 110).LSW01 SKIP IF NOT SP             U019\n         TM    OUCBQFL,OUCBLSW          LOGICALLY SWAPPED?         U011\n         BNO   *+10                     NO - SKIP                  U011\n         MVC   F@WHERE,=C'lo'           YES - INDICATE             U011\n.LSW01    ANOP                                                     U015\n         MVI   0(R7),X'F4'              SET LOW INTENSITY          U007\n         B     WHEREOK                  DONE HERE                  U007\nTRYLONG  DS    0H                                                  U007\n         TM    OUCBEFL,OUCBLWT          LONG WAIT STATUS?          U007\n         BZ    OTHRWAIT                 NO - SKIP                  U007\n         MVC   F@WHERE,=C'wl'           YES - INDICATE             U007\n         MVI   0(R7),X'F4'              SET LOW INTENSITY          U007\n         B     WHEREOK                  DONE HERE                  U007\nOTHRWAIT DS    0H                                                  U007\n         MVC   F@WHERE,=C'wo'           INDICATE OTHER WAIT        U007\n         MVI   0(R7),X'F4'              SET LOW INTENSITY          U007\nNOTOFF   DS    0H                                                  U007\n         TM    OUCBQFL,OUCBGOB          TRANS'ING BETWEEN STATES?  U007\n         BZ    TRYTRANO                 NO - SKIP                  U007\n         MVC   F@WHERE,=C'<>'           YES - INDICATE             U007\n         MVI   0(R7),X'F8'              SET HIGH INTENSITY         U007\n         B     WHEREOK                  DONE HERE                  U007\nTRYTRANO DS    0H                                                  U007\n         TM    OUCBQFL,OUCBGOO          TRANSITIONING OUT?         U007\n         BZ    TRYTRANI                 NO - SKIP                  U007\n         MVC   F@WHERE,=C'>>'           YES - INDICATE             U007\n         MVI   0(R7),X'F8'              SET HIGH INTENSITY         U007\n         B     WHEREOK                  DONE HERE                  U007\nTRYTRANI DS    0H                                                  U007\n         TM    OUCBQFL,OUCBGOI          TRANSITIONING IN?          U007\n         BZ    WHEREOK                  NO - SKIP                  U007\n         MVC   F@WHERE,=C'<<'           YES - INDICATE             U007\n         MVI   0(R7),X'F8'              SET HIGH INTENSITY         U007\n         B     WHEREOK                  DONE HERE                  U007\nWHEREOK  DS    0H\n         UNPK  EDITWORK(2+1),ASCBDP(1+1) GET THE DISPATCHING PRTY  U010\n         TR    EDITWORK(2),TRTBL        MAKE IT PRINTABLE          U010\n         MVC   F@DP,EDITWORK            SAVE FORMATTED DPRTY       U010\n*U019     AIF  (&LEVEL LT 11).PGN01     OLD WAY IF NOT MVS/SP1.1   U009\n          AIF   (&@@SPLVL LT 110).PGN01 OLD WAY IF NOT MVS/SP1.1   U019\n         LH    R0,OUCBNPG               NEW PGN                    U009\n          AGO  .PGN02                                              U009\n.PGN01    ANOP ,                                                   U009\n         SR    R0,R0                    PREPARE FOR THE IC.\n         IC    R0,OUCBNPG               NEW PGN\n.PGN02    ANOP ,                                                   U009\n         CVD   R0,WORK                  CONVERT IT TO DECIMAL.\n         MVC   EDITWORK(4),=X'40202120' MOVE IN THE EDIT MASK.     U010\n         ED    EDITWORK(4),WORK+6       EDIT THE OUTPUT FIELD.     U010\n         MVC   F@PGN(3),EDITWORK+1      SAVE 3 DIGIT PERF GROUP    U010\n*---  THE FOLLOWING CODE RIPPED OFF FROM ELSEWHERE...              ---*\n*---  (I.E., I DON'T UNDERSTAND)                                   ---*\n         SR    R15,R15                  CLEAR FOR IC               U015\n         IC    R15,OUCBPGP              GET PGP OFFSET             U015\n         SH    R15,=Y(WPGDLEN-WPGPLEN)  SUBTRACT HEADER LENGTH     U015\n         SR    R14,R14                  CLEAR FOR DIVIDE           U015\n         D     R14,=A(WPGPLEN)          DIVIDE BY ENTRY LENGTH     U015\n         LA    R15,1+C'0'(,R15)         GET DISPLAYABLE NUMBER     U015\n         MVI   F@PP,C' '                BLANK THE FIRST CHAR       U015\n         STC   R15,F@PP+1               SAVE PERF GROUP PERIOD     U015\n*  NOTE: THIS CODE FAILS IF PP > 9.                                U015\n         LH    R15,OUCBSWC              GET SRM'S SWAP COUNT       U013\n         CVD   R15,WORK                 CONVERT IT TO DECIMAL.     U013\n         MVC   EDITWORK(6),=X'402020202120' MOVE IN THE EDIT MASK. U013\n         ED    EDITWORK(6),WORK+5       EDIT THE OUTPUT FIELD.     U013\n         MVC   F@SWC(4),EDITWORK+2      SAVE 4 DIGIT SWAP COUNT    U013\n         CH    R15,=H'9999'             DID IT FIT?                U013\n         BNH   SWAPOK                   YES                        U013\n         SR    R14,R14                  CLEAR FOR DIVIDE           U013\n         D     R14,=F'1000'             SCALE                      U013\n         CVD   R15,WORK                 CONVERT IT TO DECIMAL.     U013\n         MVC   EDITWORK(4),=X'40202120' MOVE IN THE EDIT MASK.     U013\n         ED    EDITWORK(4),WORK+6       EDIT THE OUTPUT FIELD      U013\n         MVC   F@SWC(3),EDITWORK+1      SAVE 3 DIGITS OF K SWAPS   U013\n         MVI   F@SWC+3,C'k'             MAKE IT SAY 'K'            U013\nSWAPOK   L     R0,OUCBWMR               WKLD MGR RECCOMENDATION    U002\n         LTR   R0,R0                    SEE IF HI-ORDER BIT IS ON\n         BNM   WMROK                    INDICATING WMR INVALID.\n         MVC   F@WMR(5),=C'*n/a*'       IF SO, MOVE IN NOT AVAIL INDIC.\n         MVI   F@SERV+4,C'-'            BLANK THE SERVICE COUNTER.\n         B     WMSOK                    BY-PASS SERVICE PROCESSING.\nWMROK    DS    0H\n*U004    SRL   R0,8                     DIVIDE BY 256\n         CVD   R0,WORK                  CONVERT IT TO DECIMAL.\n         MVC   EDITWORK(6),=X'402020202120'  MOVE IN EDIT MASK.    U010\n         ED    EDITWORK(6),WORK+5       EDIT THE RESULT            U010\n         MVC   F@WMR,EDITWORK+2         SAVE THE RESULT            U010\nWMROKA   DS    0H\n         L     R0,ASCBIOSC              Get I/O count              U022\n          AIF   (&@@SPLVL GE 200).GOTIO                            U022\n         TM    FLAG2,F2MVSE             running MVS/XA?            U022\n         BO    *+8                      yes - skip                 U022\n*U022    L     R0,OUCBIOSM              GET TOTAL SMF I/O REQUESTS U004\n         A     R0,OUCBIOSM              GET TOTAL SMF I/O REQUESTS U022\n.GOTIO    ANOP                                                     U022\n         CVD   R0,WORK                  CONVERT TO DECIMAL.        U004\n         MVC   EDITWORK(10),=X'40202020202020202120'  GET MASK     U017\n         ED    EDITWORK(10),WORK+3      MAKE IT PRINTABLE          U017\n         MVC   F@IOREQ,EDITWORK+4       ASSUME IT FITS IN 6 CHARS  U017\n         C     R0,=F'1E6'               TOO BIG FOR FIELD?         U017\n         BL    IOROK                    NO - DONE                  U017\n         MVC   F@IOREQ(5),EDITWORK+2    YES - GET THOUSANDS        U017\n         MVI   F@IOREQ+5,C'k'           INDICATE K                 U017\n         C     R0,=F'1E8'               TOO BIG FOR FIELD?         U017\n         BL    IOROK                    NO - DONE                  U017\n         MVI   F@IOREQ,C' '             YES...                     U017\n         MVC   F@IOREQ+1(4),EDITWORK    ...   GET MILLIONS         U017\n         MVI   F@IOREQ+5,C'm'           INDICATE M                 U017\n         SPACE 1                                                   U004\nIOROK    EQU   *                                                   U017\n         EJECT ,                                                   U001\n* SWAP REASON  CODE...\n         LA    R15,=C'**'               ASSUME OUT OF RANGE        U007\n         CLI   OUCBSRC,10               IS IT OVER OUR LIMIT ?     U001\n         BH    WMR0                     GO AWAY IF HE'S IN-CORE    U001\n*                                       OR OUT OF BOUNDS...        U001\n         CLC   F@WHERE,=C'in'           SWAPPED IN?                U007\n         BE    PFLDONE                  YES - SKIP REASON CODE     U007\n         CLC   F@WHERE,=C'pr'           PRIVILEGED PROGRAM?        U007\n         BE    PFLDONE                  YES - SKIP REASON CODE     U007\n         CLC   F@WHERE,=C'ns'           NON-SWAPPABLE?             U007\n         BE    PFLDONE                  YES - SKIP REASON CODE     U007\n         XR    R15,R15                  CLEAR FOR IC               U007\n         IC    R15,OUCBSRC              GET THE SWAP REASON CODE   U001\n         AR    R15,R15                  ENTRIES ARE TWO BYTES      U007\n         LA    R15,SWAPCODE(R15)        -> DISPLAYABLE REASON CODE U007\nWMR0     EQU   *                                                   U001\n         MVC   F@WHY,0(R15)             AND PLACE IN SCREEN BUFF   U007\nPFLDONE  DS    0H\n         L     R15,OUCBWMS              LOAD SERVICE UNITS THIS    U002\n         CVD   R15,WORK                 CONVERT TO DECIMAL.\n         MVC   EDITWORK(10),=X'40202020202020202120'  GET MASK     U017\n         ED    EDITWORK(10),WORK+3      MAKE IT PRINTABLE          U017\n         MVC   F@SERV,EDITWORK+5        ASSUME IT FITS IN 5 CHARS  U017\n         C     R15,=F'1E5'              TOO BIG FOR FIELD?         U017\n         BL    WMSOK                    NO - DONE                  U017\n         MVC   F@SERV(4),EDITWORK+3     YES - GET THOUSANDS        U017\n         MVI   F@SERV+4,C'k'            INDICATE K  (####K)        U017\n         C     R15,=F'1E7'              TOO BIG FOR FIELD?         U017\n         BL    WMSOK                    NO - DONE                  U017\n         MVC   F@SERV(2),EDITWORK+2     YES - GET MILLIONS         U017\n         MVI   F@SERV+2,C'.'            PUT IN THE DOT             U017\n         MVC   F@SERV+3(1),EDITWORK+4   GET HUNDRED THOUSANDS      U017\n         MVI   F@SERV+4,C'm'            INDICATE M  (##.#M)        U017\n         C     R15,=F'1E8'              TOO BIG FOR FIELD?         U017\n         BL    WMSOK                    NO - DONE                  U017\n         MVC   F@SERV(4),EDITWORK       YES - GET MILLIONS         U017\n         SPACE 1\nWMSOK    EQU   *                                                   U017\n         SPACE 1\n         LM    R2,R3,ASCBEJST           GET TASK TYPE CPU TIME     U007\n         SRDL  R2,12                    TO GET MICROSEC            U007\n         LM    R14,R15,ASCBSRBT         LOAD UP SRB TIME.\n         SRDL  R14,12                   TO GET MICROSEC\n         D     R2,=F'10000'             MAKE IT .01 SEC            U008\n         D     R14,=F'10000'            MAKE IT .01 SEC            U016\n         AR    R3,R15                   ADD TOGETHER.              U016\n         CVD   R3,WORK                  CONVERT IT TO DECIMAL.     U007\n         MVC   EDITWORK(9),=X'4020202021204B2020'   EDIT MASK      U010\n         ED    EDITWORK(9),WORK+4       EDIT THE RESULT.           U010\n         C     R3,=F'9999999'           DID IT FIT?                U008\n         BNH   CPU$OK                   YES - CONTINUE             U008\n         MVC   EDITWORK(9),=X'40202020206B202120'  DIFFERENT MASK  U025\n         ED    EDITWORK(9),WORK+3       AND DON'T SHOW HUNDREDTHS  U025\nCPU$OK   MVC   F@CPU,EDITWORK+1         SAVE 8 BYTE CPU VALUE      U010\n         SPACE 2\n         LM    R2,R3,ASCBEWST           GET TOD WHEN I-STREAM      U019\n*                                       SWITCHED FROM A.S.         U019\n         STCK  WORK                     GET CURRENT TOD            U019\n         LM    R14,R15,WORK             ...                        U019\n         SLR   R14,R2                   COMPUTE 64 BIT DIFF        U019\n         SLR   R15,R3                   COMPUTE 64 BIT DIFF        U019\n         BC    B'0111',*+6              SKIP IF NO BORROW          U019\n         BCTR  R14,0                    DO THE BORROW              U019\n         SRDL  R14,12                   CONVERT TO MICROSEC        U019\n         D     R14,=F'1000000'          MAKE IT SECONDS            U019\n         SPACE 1\n         SR    R14,R14                  CLEAR FOR DIVIDE           U019\n         D     R14,=F'60'               R14=SEC, R15=MIN           U019\n         CVD   R14,WORK                                            U019\n         OI    WORK+7,X'0F'             REMOVE SIGN                U019\n         UNPK  EDITWORK+09(2),WORK      SS                         U019\n         SR    R14,R14                  CLEAR FOR DIVIDE           U019\n         D     R14,=F'60'               R14=MIN, R15=HR            U019\n         CVD   R14,WORK                                            U019\n         OI    WORK+7,X'0F'             REMOVE SIGN                U019\n         UNPK  EDITWORK+06(2),WORK      MM                         U019\n         MVI   EDITWORK+08,C':'                                    U019\n         SR    R14,R14                  CLEAR FOR DIVIDE           U019\n         D     R14,=F'24'               R14=HR, R15=DAY            U019\n         CVD   R14,WORK                 HOURS                      U019\n         OI    WORK+7,X'0F'             REMOVE SIGN                U019\n         UNPK  EDITWORK+03(2),WORK      HH                         U019\n         MVI   EDITWORK+05,C'h'                                    U019\n         CVD   R15,WORK                 DAYS                       U019\n         OI    WORK+7,X'0F'             REMOVE SIGN                U019\n         UNPK  EDITWORK+00(2),WORK      DD                         U019\n         MVI   EDITWORK+02,C'd'                                    U019\n         LA    R15,EDITWORK             ASSUME DAYS                U019\n         CLC   =C'00',0(R15)            ANYTHING HERE?             U019\n         BNE   OK$IDLE                  YES - DISPLAY NNDNN        U019\n         LA    R15,EDITWORK+3           ASSUME HOURS               U019\n         CLC   =C'00',0(R15)            ANYTHING HERE?             U019\n         BNE   OK$IDLE                  YES - DISPLAY NNHNN        U019\n         LA    R15,EDITWORK+6           ELSE DISPLAY MM:SS         U019\nOK$IDLE  MVC   F@IDLE,0(R15)            SET VALUE FOR DISPLAY      U019\n         SPACE 2\n         MVC   EDITWORK(4),=X'40202120'                            U010\n         XR    R0,R0                    GET SET\n         IC    R0,OUCBDMN               GET THE DOMAIN NUMBER      U001\n         CVD   R0,WORK                  ...                        U001\n         ED    EDITWORK(4),WORK+6       ...                        U010\n         MVC   F@DMN,EDITWORK+1         SAVE FORMATTED DOMAIN      U010\n*  MOVE DATA TO SCREEN LINE POINTED TO BY R4                       U021\n         LA    R15,FIELDS               -> DATA TO MOVE            U010\n         BAL   R14,MOVEDATA             BUILD CORRECT DATA LINE    U010\n         SPACE 1\n         LA    R4,79(,R4)               BUMP OUTPUT POINTER        U021\n         LH    R0,CURLINES              # LINE AVAILABLE\n         BCT   R0,*+8                   CONT IF MORE LINES AVAIL   U003\n         B     PUTIT                    OUTPUT IF SCREEN FULL      U003\n         STH   R0,CURLINES              SAVE CUR # LINES FREE      U003\n         SPACE 2\nNEXTASCB BCT   R8,ASCBLOOP              LOOP BACK FOR NEXT A.S.    U007\n         B     PUTIT                    GO WRITE THE SCREEN        U010\n         EJECT\n*  SUBROUTINE TO MOVE DESIRED FIELDS TO A DISPLAY LINE             U010\n*                                                                  U010\n*  INPUT TO THIS ROUTINE:                                          U010\n*                                                                  U010\n*    R4  -> OUTPUT LINE                                            U021\n*    R15 -> DATA TO BE MOVED (NOT INTACT ON RETURN)                U010\n*    R14 -> RETURN ADDR                                            U010\n*                                                                  U010\n*    WHICH FIELDS TO MOVE IS DECIDED BY EXAMINING FLAG1 & FLAG2    U010\n*                                                                  U010\n*    WHETHER ANY FIELD IS DISPLAYED DEPENDS ON WHICH OF THE 3      U010\n*    DISPLAY TYPES CURRENTLY IN EFFECT, AS GIVEN IN THIS TABLE:    U010\n*                                                                  U010\n*    FIELD   LENGTH   HEX  OPER  USER                              U010\n*    -----   ------   ---  ----  ----                              U010\n*    ASID      5       *                                           U010\n*    ASCB      7       *                                           U010\n*    JOB       9       *    *     *                                U010\n*    STEP      9            *     *                                U010\n*    PROC      9            *     *                                U010\n*    TYPE      2       *    *     *                                U015\n*    FRAMES    6            *     *                                U015\n*    WSS       5            *     *                                U015\n*    WHERE     3       *    *     *                                U010\n*    WHY       3       *    *     *                                U010\n*    DP        3       *    *     *                                U010\n*    SWAPS     4       *    *     *                                U010\n*    PGN       4       *    *                                      U010\n*    PP        2       *                                           U015\n*    DMN       4       *                                           U010\n*    WMR       6       *                                           U010\n*    SERV      6       *    *     *                                U010\n*    CPU       9       *    *     *                                U010\n*    IOR       7       *    *     *                                U010\n*    IDLE      5       *                                           U010\n*                                                                  U010\nMOVEDATA LR    R1,R4                    copy line pointer          U014\n         USNGX FIELDS,R15                                          U010\n         TM    FLAG1,F1HEX              WANT HEX FIELDS?           U010\n         BNO   MD$01                    NO - SKIP                  U010\n         MVC   0(4,R1),F@ASID                                      U010\n         MVC   5(6,R1),F@ASCB                                      U010\n         LA    R1,12(,R1)               -> NEXT OUTPUT LOCATION    U010\nMD$01    MVC   0(8,R1),F@JOB            JOBNAME                    U010\n         LA    R1,9(,R1)                -> NEXT OUTPUT LOCATION    U010\n         TM    FLAG1,F1HEX              HEX STUFF?                 U010\n         BO    MD$02                    YES - DON'T HAVE ROOM      U010\n         MVC   0(8,R1),F@STEP           STEPNAME                   U010\n         MVC   9(8,R1),F@PROC           PROCSTEPNAME               U010\n         LA    R1,18(,R1)               -> NEXT OUTPUT LOCATION    U015\nMD$02    MVC   0(1,R1),F@TYPE           J/S/T                      U015\n         LA    R1,2(,R1)                -> NEXT OUTPUT LOCATION    U015\n         TM    FLAG1,F1HEX              HEX STUFF?                 U015\n         BO    MD$03                    YES - DON'T HAVE ROOM      U015\n         MVC   0(10,R1),F@FRAMES        FRAMES + WSS               U010\n         LA    R1,11(,R1)               -> NEXT OUTPUT LOCATION    U015\nMD$03    MVC   0(2,R1),F@WHERE                                     U015\n         MVC   3(2,R1),F@WHY                                       U015\n         MVC   6(2,R1),F@DP                                        U015\n         MVC   8(4,R1),F@SWC            SWAP COUNT                 U015\n         LA    R1,13(,R1)               -> NEXT OUTPUT LOCATION    U015\n         TM    FLAG2,F2USER             DUMB USER?                 U010\n         BO    MD$04                    YES - SKIP PGN             U010\n         MVC   0(3,R1),F@PGN                                       U010\n         LA    R1,4(,R1)                -> NEXT OUTPUT LOCATION    U010\nMD$04    TM    FLAG1,F1HEX              WANT HEX FIELDS?           U010\n         BNO   MD$05                    NO - SKIP FIELDS           U010\n         MVC   0(2,R1),F@PP             GET PERF GROUP PERIOD      U015\n         MVC   3(3,R1),F@DMN                                       U015\n         MVC   7(4,R1),F@WMR                                       U015\n         LA    R1,12(,R1)               -> NEXT OUTPUT LOCATION    U015\nMD$05    MVC   0(5,R1),F@SERV                                      U010\n         MVC   6(8,R1),F@CPU                                       U010\n         MVC   15(6,R1),F@IOREQ                                    U010\n         LA    R1,22(,R1)               -> NEXT OUTPUT LOCATION    U010\n         TM    FLAG1,F1HEX              WANT HEX FIELDS?           U010\n         BNO   MD$06                    NO - SKIP FIELDS           U010\n         MVC   0(5,R1),F@IDLE                                      U010\nMD$06    BR    R14                      RETURN TO CALLER           U021\n         DROPX R15                                                 U010\n         EJECT\nPUTIT    EQU   *                                                   U001\n         MVC SRMLINE,=C'CPU=xxx   UIC=xxx   AFC=xxxx   ASMQ=xxx  ' U007\n         L     R15,CVTPTR               -> CVT                     U007\n         USNGX CVT,R15                                             U007\n          AIF   (&@@SPLVL GE 200).NOAFC                            U022\n         L     R14,CVTPVTP              -> PVT                     U007\n         LH    R0,PVTAFC-PVT(,R14)      AVAILABLE FRAME COUNT      U007\n         CVD   R0,WORK                                             U007\n         MVC   EDITWORK(10),=X'40202020212040404040'               U007\n         LA    R1,EDITWORK+5            INIT SIGNIFICANCE POINTER  U007\n         EDMK  EDITWORK(6),WORK+5                                  U007\n         MVC   SRMLINE+24(5),0(R1)      MOVE AFC TO DISPLAY        U007\n.NOAFC    ANOP                                                     U022\n         SPACE 1\n         L     R14,CVTOPCTP             -> SRM CONTROL TABLE       U007\n         DROPX R15                      CVT                        U007\n         USNGX RMCT,R14                                            U007\n          AIF   (&@@SPLVL GE 200).NOUIC                            U022\n         L     R15,RMCTMCT              -> SRM STORAGE MGT CTL TBL U007\n         LH    R0,MCVSTCRI-MCT(,R15)    SYSTEM HIGHEST UIC         U007\n         CVD   R0,WORK                                             U007\n         MVC   EDITWORK(10),=X'40202020212040404040'               U007\n         LA    R1,EDITWORK+5            INIT SIGNIFICANCE POINTER  U007\n         EDMK  EDITWORK(6),WORK+5                                  U007\n         MVC   SRMLINE+14(5),0(R1)      MOVE UIC TO DISPLAY        U007\n.NOUIC    ANOP                                                     U022\n         SPACE 1\n         L     R1,RMCTCCT               -> SRM CPU MGT CONTROL TBL U007\n         DROPX R14                                                 U007\n         LH    R0,CCVUTILP-CCT(,R1)     SYSTEM CPU UTILIZATION     U007\n         CVD   R0,WORK                                             U007\n         MVC   EDITWORK(10),=X'40202020212040404040'               U007\n         LA    R1,EDITWORK+5            INIT SIGNIFICANCE POINTER  U007\n         EDMK  EDITWORK(6),WORK+5                                  U007\n         MVC   SRMLINE+04(5),0(R1)      MOVE CPU TO DISPLAY        U007\n         SPACE 1\n         LA    R1,MCTLEN(,R15)          -> SRM RESOURCE MGT CTL TB U010\n         LH    R0,RCVASMQA-RCT(,R1)     ASMQ LENGTH AVERAGE        U007\n         CVD   R0,WORK                                             U007\n         MVC   EDITWORK(10),=X'40202020212040404040'               U007\n         LA    R1,EDITWORK+5            INIT SIGNIFICANCE POINTER  U007\n         EDMK  EDITWORK(6),WORK+5                                  U007\n         MVC   SRMLINE+36(5),0(R1)      MOVE ASMQ TO DISPLAY       U007\n         EJECT\n         MVC   CURLINES,TOTLINES                                   U003\n         MVC   ENTERLN,BLANKS           CLEAR ANY OLD INPUT        U003\n          AIF   (&@@SPLVL LT 200).NOTXA2                           U022\n         $AMODE  24                                                U022\n.NOTXA2   ANOP                                                     U022\n         TM    FLAG2,F2AUTO             AUTO UPDATE?               U003\n         BO    PUTIT2                   ...YES                     U003\n*\n         SPACE 2\n         MVI   IOCBFLGD,X'00'\n         OI    IOCBFLGC,IOCBCATR                                   U004\n         SPACE 1\n         TRMIO IOCB,FORMAT=SCR1,IMAGE=LINE1                        U001\n         SPACE 1\n          AIF   (&@@SPLVL LT 200).NOTXA3                           U022\n         $AMODE  31                                                U022\n.NOTXA3   ANOP                                                     U022\n         SPACE 3\n*---  LOOK FOR CHARACTER INPUT FIRST\nGO$CHECK LA    R1,ENTERLN-1             INIT INPUT CHAR POINTER    U007\n         NI    FLAG2,255-F2VALID        CLEAR FLAG (NO CMD FOUND)  U007\n         CLI   ENTERLN,C'/'             MVS OPERATOR COMMAND?      U018\n         BE    MVS$CMD                  YES - GO EXECUTE IT        U018\nNXTINPUT LA    R1,1(,R1)                -> NEXT INPUT CHAR         U007\n         CLI   0(R1),C' '               END OF INPUT?              U007\n         BE    CI3                      YES - SEE WHERE TO GO      U007\n         LA    R14,CMDTABLE             RESPONSES THEMSELVES       U007\nCI1      CLC   0(1,R14),0(R1)           COMPARE INPUT CHARACTER    U007\n         BNE   CI2                      NOT THIS GUY               U007\n*U022    L     R15,0(,R14)              GET ROUTINE ADDRESS        U007\n         SR    R15,R15                  CLEAR FOR ICM (MVS/XA!)    U022\n         ICM   R15,B'0111',1(R14)       GET ROUTINE ADDRESS        U022\n         OI    FLAG2,F2VALID            SET \"VALID CMD FOUND\" FLAG U007\n         BR    R15                      AND GO TO IT               U007\nCI2      LA    R14,4(,R14)              GET NEXT RESPONSE          U007\n         CLI   0(R14),X'FF'             END OF LIST?               U007\n         BNE   CI1                      NO - KEEP SCANNING         U007\n         B     NXTINPUT                 INVALID, TRY NEXT CHAR     U007\nCI3      TM    FLAG2,F2VALID            ANY VALID FOUND?           U007\n         BO    GOODGRIF                 YES - GO PROCESS           U007\n*---  NONE VALID - CHECK PFKEY\n         SPACE 1\n         PFKEY DEF=GOODGRIF,K1=HELPPFK,K2=UPDATE,K3=EODAD,         U007$\n               K5=HEXFLIP,K6=USERFLIP,                             U010$\n               K9=DCMSOVER,K12=EODAD,ATTN=EODAD                    U010\n         SPACE 1\nPUTIT2   EQU   *                                                   U003\n         OI    IOCBFLGD,IOCBDYON+IOCBDFRC                          U003\n         OI    IOCBFLGC,IOCBCATR+IOCBCRAO                          U004\n         SPACE 1\n         TRMIO IOCB,WRITE,FORMAT=SCR1,IMAGE=LINE1                  U001\n         SPACE 1\n          AIF   (&@@SPLVL LT 200).NOTXA4                           U022\n         $AMODE  31                                                U022\n.NOTXA4   ANOP                                                     U022\n         PFKEY DEF=GOODGRIF,ATTN=UPDATE                            U003\n         SPACE 1\nTSO      EQU   *\n         OI    FLAG1,F1TSO+F1MODESW     RESET THE FLAGS TO GET     U015\n         NI    FLAG1,255-F1JOBS-F1STC       ONLY TSO MEMORIES.     U003\n         B     NXTINPUT                 CHECK NEXT INPUT CHAR      U007\n         SPACE 1\nBATCH    EQU   *\n         OI    FLAG1,F1JOBS+F1STC+F1MODESW SET THE BRANCHES TO GET U015\n         NI    FLAG1,255-F1TSO             BATCH AND STC MEMORIES. U003\n         B     NXTINPUT                 CHECK NEXT INPUT CHAR      U007\n         SPACE 1\nJOBS     EQU   *\n         OI    FLAG1,F1JOBS+F1MODESW    RESET THE FLAGS TO GET     U015\n         NI    FLAG1,255-F1STC-F1TSO         ONLY BATCH MEMORIES   U003\n         B     NXTINPUT                 CHECK NEXT INPUT CHAR      U007\n         SPACE 1\nSTC      EQU   *\n         OI    FLAG1,F1STC+F1MODESW     RESET THE FLAGS TO GET     U003\n         NI    FLAG1,255-F1TSO-F1JOBS   ONLY STC MEMORIES.         U003\n         B     NXTINPUT                 CHECK NEXT INPUT CHAR      U007\n         SPACE 1\nALL      EQU   *\n         OI    FLAG1,F1TSO+F1STC+F1JOBS+F1MODESW  SET ALL FLAGS    U015\n         B     NXTINPUT                 CHECK NEXT INPUT CHAR      U007\n         SPACE 1\nUPDATE   EQU   *                                                   U003\n         XI    FLAG2,F2AUTO             FLIP AUTO UPD<->WAIT MODES U003\n         B     GOODGRIF                                            U003\n         SPACE 1\nHEXFLIP  TM    FLAG2,F2OPER             PRIVILEGED USER?           U010\n         BNO   GOODGRIF                 NO - IGNORE SUBCOMMAND     U015\n         XI    FLAG1,F1HEX              FLIP HEX FLAG              U010\n         NI    FLAG2,255-F2USER         TURN OFF DUMB USER FLAG    U010\n         B     GOODGRIF                 REBUILD THE DISPLAY        U010\n         SPACE 1\n*HEXOFF  NI    FLAG1,255-F1MODESW-F1HEX DOESN'T COUNT AS MODE CHNG U010\nHEXOFF   NI    FLAG1,255-F1HEX          TURN OFF HEX MODE          U015\n         B     GOODGRIF                 REBUILD THE DISPLAY        U010\n         SPACE 1\nUSERFLIP TM    FLAG2,F2OPER             PRIVILEGED USER?           U010\n         BNO   GOODGRIF                 NO - IGNORE SUBCOMMAND     U015\n         XI    FLAG2,F2USER             FLIP USER FLAG             U010\n         NI    FLAG1,255-F1HEX          AND TURN OFF HEX DISPLAY   U010\n*USERFLOP NI    FLAG1,255-F1MODESW      DOESN'T COUNT AS MODE CHNG U003\n         B     GOODGRIF                 REBUILD THE DISPLAY        U010\n         SPACE 1\nOUTQUE   EQU   *\n         NI    FLAG1,255-F1INONLY       RESET SWAPPED-IN ONLY FLAG U003\n         OI    FLAG1,F1MODESW           INDICATE CHANGE OF MODES.  U003\n         B     NXTINPUT                 CHECK NEXT INPUT CHAR      U007\n         SPACE 1\nINQUE    EQU   *\n         OI    FLAG1,F1INONLY+F1MODESW  SET SWAPPED IN ONLY        U003\n         B     NXTINPUT                 CHECK NEXT INPUT CHAR      U007\n         SPACE 1\nGOODGRIF DS    0H\n         BAL   R14,CLEARIT              CLEAR ALL OUTPUT AREAS     U007\n         LA    R4,LINE1                 -> PLACE FOR HEADER LINE   U010\n         L     R15,=A(HEADERS)          -> COLUMN HEADERS          U010\n         BAL   R14,MOVEDATA             BUILD THE CORRECT HEADING  U010\n         LA    R4,LINE2                 RESET OUTPUT POINTER       U021\n         MVC   ATTRLOC,FIRSTATR         ...AND ATTR BYTE POINTER\n         TM    FLAG1,F1MODESW           CHECK FOR CHANGE OF MODES. U003\n         BZ    MODEOK                   BRANCH IF SAME MODE.       U003\n         NI    FLAG1,255-F1MODESW       RESET MODE CHANGE.         U003\n         B     RESTART                  START OVER FROM BEGINNING.\nMODEOK   DS    0H\n         CH    R8,=H'1'                 MORE MEMORIES TO PROCESS?  U010\n         BH    NEXTASCB                 YES.                       U010\n         B     RESTART                  NO, START OVER FROM THE TOP.\n         SPACE 4\nHELPPFK  LA    R1,ENTERLN-1             FAKE INPUT POINTER         U007\nHELP     MVI   IOCBFLGD,X'00'                                      U005\n*U021    L     R15,=A(HELPIMG)                                     U005\n         LM    R2,R3,=A(HELPFMT1,HELPIMG1)  ASSUME HELP#1          U021\n         LA    R4,HELPENT1              ...                        U021\n         CLI   1(R1),C'2'               WANT SECOND HELP SCREEN?   U007\n         BNE   *+12                     NO - SKIP                  U021\n         LM    R2,R3,=A(HELPFMT2,HELPIMG2)  ASSUME HELP#2          U021\n         LA    R4,HELPENT2              ...                        U021\n         CLI   1(R1),C'3'               WANT THIRD HELP SCREEN?    U021\n         BNE   *+12                     NO - SKIP                  U021\n         LM    R2,R3,=A(HELPFMT3,HELPIMG3)  ASSUME HELP#3          U021\n         LA    R4,HELPENT3              ...                        U021\n         SPACE 2\n         LR    R0,R3                    -> source                  U021\n         LH    R1,0(,R2)                length                     U021\n         LA    R14,SCRBUFF              -> target                  U021\n         LR    R15,R1                   length                     U021\n         MVCL  R14,R0                   copy the help text         U021\n         SPACE 1\n          AIF   (&@@SPLVL LT 200).NOTXA5                           U022\n         $AMODE  24                                                U022\n.NOTXA5   ANOP                                                     U022\n         SPACE 2\n*U021    TRMIO IOCB,FORMAT=(R2),IMAGE=(R3)                         U007\n         TRMIO IOCB,FORMAT=(R2),IMAGE=SCRBUFF                      U007\n         SPACE 1\n          AIF   (&@@SPLVL LT 200).NOTXA6                           U022\n         $AMODE  31                                                U022\n.NOTXA6   ANOP                                                     U022\n         SPACE 2\n         MVC   ENTERLN,0(R4)            MOVE INPUT FOR CMD SCAN    U007\n         MVC   0(L'ENTERLN,R4),BLANKS   AND CLEAR FOR NEXT TIME    U007\n         B     GO$CHECK                 CHECK IT OUT               U005\n         SPACE 3\nCLEARIT  LA    R1,LINE1                 CLEAR IMAGE USING...       U005\n         LA    R0,SCR1                  ... DCMS SUBROUTINE        U005\n         B     @CLEAR                                              U005\n         SPACE 3\nDECIMAL  CVD   R0,WORK                  CONVERT TO PACKED          U004\n         MVC   EDITWORK(8),=X'4020202020202120'  MOVE IN THE MASK  U004\n         ED    EDITWORK(8),WORK+4       MAKE IT EBCDIC             U004\n         BR    R14                      RETURN TO CALLER           U004\n         SPACE 2\nSTORAGE  CVD   R0,WORK                  CONVERT TO PACKED          U004\n         MVC   EDITWORK(9),=X'402020202020212092' MOVE IN THE MASK U023\n         ED    EDITWORK(8),WORK+4       MAKE IT EBCDIC             U004\n         BR    R14                      RETURN TO CALLER           U004\n         SPACE 3\nMVS$CMD  TM    FLAG2,F2OPER             PRIVILEGED USER?           U018\n         BZ    CI3                      NO - IGNORE IT, TRY PFK    U018\n         CLC   ENTERLN+1(L'ENTERLN-1),BLANKS  ANY COMMAND HERE?    U018\n         BE    CI3                      NO - IGNORE IT, TRY PFK    U018\n         LA    R0,CMDPARM               -> COMMAND                 U018\n         ST    R0,CMDADDR               SET IN PARMLIST            U018\n         OI    CMDADDR,X'80'            MARK END OF LIST           U018\n         LA    R15,L'ENTERLN-1          GET LENGTH OF COMMAND      U018\n         STH   R15,CMDPARM              STORE IN PARM              U018\n         MVC   CMDPARM+2(L'ENTERLN-1),ENTERLN+1  AND COMMAND TEXT  U018\n         LA    R1,CMDADDR               -> PARMLIST                U018\n         LINK  EP=OPERCMD               ISSUE THE COMMAND & WTO    U018\n         B     GOODGRIF                 ALL DONE                   U018\n         SPACE 3\nTOTLINES DC    H'21'                                               U003\n         SPACE 2\nCMDTABLE DC    C'S',AL3(STC)            SYSTEM TASKS               U003\n         DC    C'E',AL3(EODAD)          END                        U003\n         DC    C'Z',AL3(EODAD) no help  RMFMON TYPE \"END\"          U010\n         DC    C'J',AL3(JOBS)           BATCH JOBS ONLY (NO STC)   U003\n         DC    C'T',AL3(TSO)            TSO ADDRESS SPACES         U001\n         DC    C'B',AL3(BATCH)          BATCH AND STC              U003\n         DC    C'P',AL3(DCMSOVER)       BATCH AND TSO              U003\n         DC    C'A',AL3(ALL)            ALL ADDRESS SPACES         U001\n         DC    C'I',AL3(INQUE)          SWAPPED IN  SPACES         U001\n         DC    C'O',AL3(OUTQUE)         ADDRESS SPACES             U001\n         DC    C'X',AL3(HEXFLIP)        HEX INFO ON & OFF          U010\n         DC    C'D',AL3(HEXOFF)         HEX INFO OFF               U010\n         DC    C'U',AL3(USERFLIP)       USER TYPE STUFF ON & OFF   U010\n         DC    C'H',AL3(HELP)           HELP                       U005\n         DC    C'?',AL3(HELP)           HELP                       U005\n         DC    X'FF000000'              END OF LIST INDICATOR      U007\n         SPACE 2\nSWAPCODE DS    0CL2                     SWAPOUT REASON CODES       U007\n         DC    C'  '                    00:  NONE                  U007\n         DC    C'to'                    01:  TERMINAL OUTPUT       U007\n         DC    C'ti'                    02:  TERMINAL INPUT        U007\n         DC    C'lw'                    03:  LONG WAIT             U007\n         DC    C'xs'                    04:  AUX STORAGE SHORTAGE  U007\n         DC    C'rs'                    05:  REAL STORAGE SHORTAGE U007\n         DC    C'dw'                    06:  DETECTED WAIT         U007\n         DC    C'rq'                    07:  REQUESTED SWAP        U007\n         DC    C'nq'                    08:  ENQUEUE EXCHANGE      U007\n         DC    C'ex'                    09:  EXCHANGE SWAP         U007\n         DC    C'us'                    10:  UNILATERAL SWAP       U007\n         SPACE 2\n*  NOTE: CHANGES TO FIELDS HERE MUST CORRESPOND WITH CHANGES TO THE\n*        VARIABLES IN \"FIELDS\"                                     U010\nHEADERS  EQU   *                                                   U010\n         DC    CL6' Ascb '                                         U010\n         DC    CL4'Asid'                                           U010\n         DC    CL8'Jobname'                                        U010\n         DC    CL8'Stepname'                                       U010\n         DC    CL8'Procstep'                                       U010\n         DC    C'T'                                                U010\n         DC    CL(5+5)'Frames Wss'                                 U010\n         DC    CL2'CL'                                             U010\n         DC    CL2'RL'                                             U010\n         DC    CL2'DP'                                             U010\n         DC    CL4'  SC'                                           U013\n         DC    CL3'PGN'                                            U010\n         DC    CL2'PP'                                             U015\n         DC    CL3'Dmn'                                            U010\n         DC    CL4' Wmr'                                           U010\n         DC    CL5'  Srv'                                          U010\n         DC    CL8'    Cpu '                                       U010\n         DC    CL6'   Ior'                                         U010\n         DC    CL5' Idle'                                          U018\n         EJECT ,\nEODAD    DC    0H'0'                                               U022\n          AIF   (&@@SPLVL LT 200).NOTXA7                           U022\n         $AMODE  24                                                U022\n.NOTXA7   ANOP                                                     U022\n         SPACE 1\n         DCMSTOP                                                   U003\n         EJECT\nCHIMP    CSECT                          RESUME                     U021\nSCR1     DCMSFMT                                                   U001\nLINE1    DCMSFLD 79                                                U001\n         PRINT NOGEN                                               U007\nLINE2    DCMSFLD 79                                                U001\n         DCMSFLD 79                     LINE 3                     U001\n         DCMSFLD 79                     LINE 4                     U001\n         DCMSFLD 79                     LINE 5                     U001\n         DCMSFLD 79                     LINE 6                     U001\n         DCMSFLD 79                     LINE 7                     U001\n         DCMSFLD 79                     LINE 8                     U001\n         DCMSFLD 79                     LINE 9                     U001\n         DCMSFLD 79                     LINE 10                    U001\n         DCMSFLD 79                     LINE 11                    U001\n         DCMSFLD 79                     LINE 12                    U001\n         DCMSFLD 79                     LINE 13                    U001\n         DCMSFLD 79                     LINE 14                    U001\n         DCMSFLD 79                     LINE 15                    U001\n         DCMSFLD 79                     LINE 16                    U001\n         DCMSFLD 79                     LINE 17                    U001\n         DCMSFLD 79                     LINE 18                    U001\n         DCMSFLD 79                     LINE 19                    U001\n         DCMSFLD 79                     LINE 20                    U001\n         DCMSFLD 79                     LINE 21                    U001\n         DCMSFLD 79                     LINE 22                    U001\n         PRINT GEN                                                 U007\nENTERLN  DCMSFLD 37,ALPHA,INTEN=LO,CURSOR=AFTER                    U007\nSRMLINE  DCMSFLD 41                                                U007\n         DCMSFEND\n         SPACE 3\nDCMSWORK DSECT                          RESUME                     U005\nSCRBUFF  EQU   *                                                   U???\n         DSGEN SCR1                     GEN DSECT FOR OUTPUT SCRN  U003\n         ORG   SCRBUFF                                             U???\nCHIMP    CSECT                          RESUME                     U015\n         EJECT ,\n*---------------------------------------------------------------------*\nHELPFMT1 DCMSFMT                                                   U007\n*---------------------------------------------------------------------*\nHELPIMG  CSECT                                                     U021\nHELPIMG1 EQU   *                                                   U021\nCHIMP    CSECT                                                     U021\n         FLD   ,'********************  CHIMP - Display Field Explanatio$\n               ns  ******************** '                          U015\n         PRINT NOGEN                                               U007\n         FLD   ,'T:     '               ROW 2                      U015\n         FLD   LO,'Type of Address Space     '                     U015\n         FLD   ,'J'                                                U015\n         FLD   LO,'Batch Job   '                                   U015\n         FLD   ,'T'                                                U015\n         FLD   LO,'TSO User    '                                   U015\n         FLD   ,'S'                                                U015\n         FLD   LO,'Started Task'                                   U015\n         FLD   ,'Frames:'               ROW 3                      U015\n         FLD   LO,'Amount of real storage currently in use by this addr$\n               ess space          '                                U015\n         FLD   ,'WSS:   '               ROW 4                      U015\n         FLD   LO,'SRM''s view of Working Set Size  ',FUDGE=1      U015\n         FLD   ,'DP:   '                                           U015\n         FLD   LO,'Dispatching Priority in hex    '                U015\n         FLD   ,'CL:    '               row 5                      U015\n         FLD   LO,'Current Location of this addrspc:'              U015\n         FLD   ,'    IN',ROW=6,COLUMN=2                            U015\n         FLD   LO,'Swapped in and eligible to run  '               U015\n         FLD   ,'    NS'                                           U015\n         FLD   LO,'In and V=R or Non-Swappable     '               U015\n         FLD   ,'    PR'                row 7                      U015\n         FLD   LO,'Privileged program in control   '               U015\n         FLD   ,'    WM'                                           U015\n         FLD   LO,'Wait (MSO detected)             '               U015\n         FLD   ,'    WT'                row 8                      U015\n         FLD   LO,'Wait (Terminal)                 '               U015\n         FLD   ,'    WL'                                           U015\n         FLD   LO,'Wait (Long) '                                   U015\n         FLD   ,'    WO'                                           U015\n         FLD   LO,'Wait (Other)'                                   U015\n         FLD   ,'    LO'                row 9                      U015\n         FLD   LO,'Logically Swapped Out           '               U015\n         FLD   ,'    >>'                                           U015\n         FLD   LO,'Transitioning Out               '               U015\n         FLD   ,'    <<'                row 10                     U015\n         FLD   LO,'Transitioning In                '               U015\n         FLD   ,'    <>'                                           U015\n         FLD   LO,'Transitioning Between States    '               U015\n         FLD   ,'RL:    '               row 11                     U015\n         FLD   LO,'Reason for Last Swap out  '                     U015\n         FLD   ,'    TO',ROW=12,COLUMN=2                           U015\n         FLD   LO,'Term Output wait   '                            U015\n         FLD   ,'    TI'                                           U015\n         FLD   LO,'Term Input Wait    '                            U015\n         FLD   ,'    LW'                                           U015\n         FLD   LO,'Long Wait         '                             U015\n         FLD   ,'    XS'                                           U015\n         FLD   LO,'Aux Stor shortage  ' row 13                     U015\n         FLD   ,'    RS'                                           U015\n         FLD   LO,'Real Stor shortage '                            U015\n         FLD   ,'    DW'                                           U015\n         FLD   LO,'Detected Wait     '                             U015\n         FLD   ,'    RQ'                                           U015\n         FLD   LO,'Requested Swap     '  row 14                    U015\n         FLD   ,'    NQ'                                           U015\n         FLD   LO,'ENQ exchange       '                            U015\n         FLD   ,'    EX'                                           U015\n         FLD   LO,'Exchange swap     '                             U015\n         FLD   ,'    US'                                           U015\n         FLD   LO,'Unilateral Swap    '    row 15                  U015\n         FLD   ,'    ??'                                           U015\n         FLD   LO,'Unknown code       '                            U015\n         FLD   ,'SC:    ',ROW=16,COLUMN=2                          U015\n         FLD   LO,'# of times the addrspc has been swapped in the curre$\n               nt transaction     '                                U015\n         FLD   ,'PGN:   '               row 17                     U015\n         FLD   LO,'Performance Group     '                         U015\n         FLD   ,'PP:   '                                           U015\n         FLD   LO,'P.G. period        '                            U015\n         FLD   ,'DMN:   '                                          U015\n         FLD   LO,'Domain       '                                  U015\n         FLD   ,'WMR:   '               row 18                     U015\n         FLD   LO,'SRM Workload Mgr Recom. value (actually workld lvl t$\n               his A.S. operating)'                                U015\n         FLD   ,'SRV:   '               row 19                     U015\n         FLD   LO,'Service accumulated in the last swapped in period   $\n                                  '                                U015\n         FLD   ,'CPU:   '               row 20                     U015\n         FLD   LO,'CPU time in seconds used by the address space (task $\n               plus SRB)          '\n         FLD   ,'IOR:   '               row 21                     U015\n         FLD   LO,'I/O requests counted by SMF                         $\n                                  '                                U015\n         FLD   ,'**********  Enter \"?2\" for CHIMP subcommands and PF Ke$\n               y definitions  **********',ROW=22,COLUMN=2          U015\n         PRINT GEN                                                 U015\nHELPENT1 FLD   LO,                                                 U015$\n               '                                             ',    U015$\n               OPTION=ALPHA,CURSOR=YES,ROW=23,COLUMN=2             U015\n         DCMSFEND  ,                                               U015\n         EJECT\nHELPFMT2 DCMSFMT                                                   U015\nHELPIMG  CSECT                                                     U021\nHELPIMG2 EQU   *                                                   U021\nCHIMP    CSECT                                                     U021\n         FLD   ,'****************************  CHIMP - Subcommands  ***$\n               *************************'                          U015\n         PRINT NOGEN                                               U015\n         FLD   ,'I  ',ROW=3,COLUMN=2                               U015\n         FLD   LO,'Select only swapped in jobs'                    U015\n         FLD   ,'O  ',ROW=4,COLUMN=2                               U015\n         FLD   LO,'Include swapped out jobs'                       U015\n         FLD   ,'B  ',ROW=5,COLUMN=2                               U015\n         FLD   LO,'Select batch (jobs and started tasks)'          U015\n         FLD   ,'J  ',ROW=6,COLUMN=2                               U015\n         FLD   LO,'Select initiated jobs'                          U015\n         FLD   ,'P  ',ROW=7,COLUMN=2                               U015\n         FLD   LO,'Select jobs and TSO users'                      U015\n         FLD   ,'A  ',ROW=8,COLUMN=2                               U015\n         FLD   LO,'Select jobs, started tasks, and TSO users'      U015\n         FLD   ,'S  ',ROW=9,COLUMN=2                               U015\n         FLD   LO,'Select system tasks'                            U015\n         FLD   ,'T  ',ROW=10,COLUMN=2                              U015\n         FLD   LO,'Select TSO users'                               U015\n         FLD   ,'E  ',ROW=11,COLUMN=2                              U015\n         FLD   LO,'Terminate CHIMP'                                U015\n         FLD   ,'?1 ',ROW=12,COLUMN=2                              U015\n         FLD   LO,'Display Field Definitions'                      U015\n         FLD   ,'?2 ',ROW=13,COLUMN=2                              U015\n         FLD   LO,'Display CHIMP Subcommands (this screen)'        U015\n         FLD   ,'?3 ',ROW=14,COLUMN=2                              U015\n         FLD   LO,'Display CHIMP PF Key definitions'               U015\n         FLD   ,'Privileged subcommands:',ROW=17,COLUMN=2          U015\n         FLD   ,'X  ',ROW=18,COLUMN=2                              U015\n         FLD   LO,'Toggle hex fields display'                      U015\n         FLD   ,'D  ',ROW=19,COLUMN=2                              U015\n         FLD   LO,'Normal Display'                                 U015\n         FLD   ,'U  ',ROW=20,COLUMN=2                              U015\n         FLD   LO,'Set display as normal user'                     U015\n*U021    FLD   ,'*******************  Enter \"?1\" for explanation of fie$\n               LDS ********************',ROW=22,COLUMN=2           U015\n         PRINT GEN                                                 U015\nHELPENT2 FLD   LO,                                                 U015$\n               '                                             ',    U015$\n               OPTION=ALPHA,CURSOR=YES,ROW=23,COLUMN=2             U015\n         DCMSFEND  ,                                               U007\n         EJECT\nHELPFMT3 DCMSFMT                                                   U015\nHELPIMG  CSECT                                                     U021\nHELPIMG3 EQU   *                                                   U021\nCHIMP    CSECT                                                     U021\n         FLD   ,'***********************  CHIMP - Program Function Keys$\n                 ***********************'                          U015\n         PRINT NOGEN                                               U015\n         FLD   ,'PF1 /PF13  ',ROW=3,COLUMN=2                       U015\n         FLD   LO,'Display Field Definitions (?1)'                 U015\n         FLD   ,'PF2 /PF14  ',ROW=4,COLUMN=2                       U015\n         FLD   LO,'Start auto update'                              U015\n         FLD   ,'PF3 /PF15  ',ROW=5,COLUMN=2                       U015\n         FLD   LO,'Exit from CHIMP'                                U015\n         FLD   ,'PF5 /PF17  ',ROW=6,COLUMN=2                       U015\n         FLD   LO,'Toggle hex display mode    (privileged)'        U015\n         FLD   ,'PF6 /PF18  ',ROW=7,COLUMN=2                       U015\n         FLD   LO,'Set display as normal user (privileged)'        U015\n         FLD   ,'PF9 /PF21  ',ROW=8,COLUMN=2                       U015\n         FLD   LO,'Restart CHIMP'                                  U015\n         FLD   ,'PF12/PF24  ',ROW=9,COLUMN=2                       U015\n         FLD   LO,'Exit from CHIMP'                                U015\n         FLD   ,'PA1 /ATTN  ',ROW=10,COLUMN=2                      U015\n         FLD   LO,'Halt updating or exit if not in update mode'    U015\n*U021    FLD   ,'*******************  Enter \"?1\" for explanation of fie$\n               LDS ********************',ROW=22,COLUMN=2           U015\n         PRINT GEN                                                 U015\nHELPENT3 FLD   LO,                                                 U015$\n               '                                             ',    U015$\n               OPTION=ALPHA,CURSOR=YES,ROW=23,COLUMN=2             U015\n         DCMSFEND  ,                                               U007\n         EJECT ,\nDCMSWORK DSECT                          RESUME FOR OVERLAY         U021\n         SPACE 2\n         ORG   SCRBUFF                  use the same screen buffer U021\n         DSGEN HELPFMT1                 GEN DSECT FOR HELP SCR # 1 U007\n         SPACE 2\n         ORG   SCRBUFF                  use the same screen buffer U021\n         DSGEN HELPFMT2                 GEN DSECT FOR HELP SCR # 2 U007\n         SPACE 2\n         ORG   SCRBUFF                  use the same screen buffer U021\n         DSGEN HELPFMT3                 GEN DSECT FOR HELP SCR # 3 U021\n         SPACE 2\n         ORG   ,                        back to the max end        U021\n         ORG   ,                                                   U005\n         SPACE 3\nDCMSWORK DSECT                          RESUME                     U005\n         SPACE 4\n*  WORK AREAS                                                      U003\n*                                                                  U003\nWORK     DS    D                                                   U003\n*                                       SAVE LOC OF ATTR BYTES:\nATTRLOC  DS    F                           CURR ATTR BYTE IN FMT   U003\nFIRSTATR DS    F                           FIRST ATTR BYTE ALSO    U003\nCURLINES DS    H                                                   U003\n         SPACE 1\nFLAG1    DS    X                                                   U003\nF1INONLY EQU   X'80'                    IN CORE ONLY               U003\nF1JOBS   EQU   X'40'                    BATCH                      U003\nF1STC    EQU   X'20'                    STARTED TASKS              U003\nF1TSO    EQU   X'10'                    TSO                        U003\nF1MODESW EQU   X'02'                    USER DID MODE SWITCH       U003\nF1HEX    EQU   X'01'                    DISPLAY CB ADDRESSES       U010\n         SPACE 1\nFLAG2    DS    X                                                   U003\nF2AUTO   EQU   X'80'                    AUTO UPDATE                U003\nF2VALID  EQU   X'40'                    VALID MODE CMD IN INPUT    U007\nF2APF    EQU   X'08'                    CHIMP is APF authorized    U021\nF2MVSE   EQU   X'04'                    Running under MVS/XA       U022\nF2OPER   EQU   X'02'                    USER IS AN OPERATOR        U007\nF2USER   EQU   X'01'                    USER TYPE DISPLAY          U010\n         SPACE 1\nSTATFLAG DS    X                                                   U005\n         SPACE 2\nEDITWORK DS    CL11                                                U019\n         SPACE 2\nCMDADDR  DS    A                        -> PARMLIST FOR \"OPERCMD\"  U018\nCMDPARM  DS    H,CL(L'ENTERLN-1)                                   U018\n         TITLE 'C H I M P  - OUTPUT FIELDS'                        U010\n*  NOTE: CHANGES TO FIELDS HERE MUST CORRESPOND WITH CHANGES TO THE\n*        CONSTANTS IN \"HEADERS\"                                    U010\nFIELDS   EQU   *                                                   U010\nF@ASCB   DS    CL6                      ASCB ADDRESS               U010\nF@ASID   DS    CL4                      ASID IN HEX                U010\nF@JOB    DS    CL8                      JOBNAME\nF@STEP   DS    CL8                      STEPNAME\nF@PROC   DS    CL8                      PROCNAME                   U010\nF@TYPE   DS    C                        J/T/S                      U007\nF@FRAMES DS    CL5                      REAL STORAGE IN USE (NNNNK)\n*  NOTE: IF WSS IS > 999K, IT WILL RUN INTO THE FIELD TO ITS LEFT\nF@WSS    DS    CL5                      WORKING SET SIZE (NNNNK)\nF@WHERE  DS    CL2                      CURRENT LOCATION\nF@WHY    DS    CL2                      REASON FOR LAST SWAP       U007\nF@DP     DS    CL2\nF@SWC    DS    CL4                                                 U013\nF@PGN    DS    CL3\nF@PP     DS    CL2                      PERFORMANCE GROUP PERIOD   U015\nF@DMN    DS    CL3                      DOMAIN NUMBER              U007\nF@WMR    DS    CL4                                                 U010\nF@SERV   DS    CL5\nF@CPU    DS    CL8\nF@IOREQ  DS    CL6                      I/O REQUESTS               U010\nF@IDLE   DS    CL5                      ASCBEWST                   U019\nFIELDLEN EQU   *-FIELDS                                            U010\n         TITLE 'C H I M P  - MISCELLENEOUS MVS DSECT DEFINITIONS'  U007\n         PRINT NOGEN                                               U007\n         SPACE 2\n         IHAPSA  ,                                                 U007\n         SPACE 2\n         IKJTCB  ,                                                 U007\n         SPACE 2\n         IEZJSCB  ,                                                U007\n         SPACE 2\n         IKJPSCB  ,                                                U007\n         SPACE 2\n         IHAASVT  ,                                                U007\n         SPACE 2\n         CVT   DSECT=YES                                           U007\n         SPACE 2\n         PRINT GEN                                                 U007\n         TITLE 'C H I M P  - MVS ASCB DSECT DEFINITION'\n         IHAASCB\n         TITLE 'C H I M P  - MVS TSB DSECT DEFINITION'             U021\n         IKJTSB ,                                                  U021\n         TITLE 'C H I M P  - MVS OUCB DSECT DEFINITION'\n         IRAOUCB\n          AIF   (&@@SPLVL LT 300).NORAX                            U026\n         TITLE 'C H I M P  - MVS RAX DSECT DEFINITION'             U026\n         IARRAX  ,                                                 U026\n.NORAX    ANOP                                                     U026\n         TITLE 'C H I M P  - MVS CSCB DSECT DEFINITION'\nCSCB     DSECT\n         SPACE 1\n         IEECHAIN\n         TITLE 'C H I M P  - MVS PVT DSECT DEFINITION'             U007\n         IHAPVT  ,                                                 U007\n         TITLE 'C H I M P  - MVS RMCT DSECT DEFINITION'            U007\n*  THE RMCT DSECT IS ON PVTMACS, IF YOU DON'T HAVE IT, COMMENT     U007\n*  OUT THE IRARMCT AND UNCOMMENT OUT THE FOLLOWING.                U007\n         SPACE 1\n*RMCT    DSECT                                                     U007\n*        DS    C'RMCT'                                             U007\n*RMCTCCT DS    A(CCT)                                              U007\n*        DS    A(ICT)                                              U007\n*RMCTMCT DS    A(MCT)                                              U007\n         SPACE 1\n         IRARMCT  ,                                                U007\n*  EQU'S TO PREVENT ASSEMBLY ERRORS                                U007\nICT      EQU   *                                                   U007\nRMPT     EQU   *                                                   U007\nRMCA     EQU   *                                                   U007\nRMEX     EQU   *                                                   U007\nRMSB     EQU   *                                                   U007\nIRAEPPA  EQU   *                                                   U007\nEPDTSCN  EQU   *                                                   U007\nEPATSCN  EQU   *                                                   U007\nEPAT     EQU   *                                                   U007\nIRAFLTM  EQU   *                                                   U007\nIRAEPPR  EQU   *                                                   U007\nIRACTMQE EQU   *                                                   U007\nIRAOUCB  EQU   *                                                   U007\nIRAWTQE  EQU   *                                                   U007\nIRAOTQE  EQU   *                                                   U007\nIRAINQE  EQU   *                                                   U007\nRQSV     EQU   *                                                   U007\nIRAOUXB  EQU   *                                                   U007\nIRASRBT  EQU   *                                                   U007\n         SPACE 1\n*  MORE EQUATES FOR SP1                                            U014\nLSCT     EQU   *                                                   U014\n*RCT     EQU   *                                                   U014\nICSP     EQU   *                                                   U014\nRSPL     EQU   *                                                   U014\nENFPM    EQU   *                                                   U014\n         TITLE 'C H I M P  - MVS CCT DSECT DEFINITION'             U007\n*  THE CCT DSECT IS ON PVTMACS, IF YOU DON'T HAVE IT, COMMENT      U007\n*  OUT THE IRACCT AND UNCOMMENT OUT THE FOLLOWING.                 U007\n         SPACE 1\n*CCT     DSECT                                                     U007\n*        ORG   CCT+X'6E'                                           U007\n*CCVUTILP DS   H                                                   U007\n         SPACE 1\n         IRACCT  ,                                                 U007\n         TITLE 'C H I M P  - MVS MCT DSECT DEFINITION'             U007\n*  THE MCT DSECT IS ON PVTMACS, IF YOU DON'T HAVE IT, COMMENT      U007\n*  OUT THE IRAMCT AND UNCOMMENT OUT THE FOLLOWING.                 U007\n         SPACE 1\n*MCT     DSECT                                                     U007\n*        ORG   MCT+X'38'                                           U007\n*MCVSTCRI DS   H                                                   U007\n*MCTLEN  EQU   X'96'                                               U007\n         SPACE 1\n         IRAMCT  ,                                                 U007\n         TITLE 'C H I M P  - MVS RCT DSECT DEFINITION'             U007\n*  THE RCT DSECT IS ON PVTMACS, IF YOU DON'T HAVE IT, COMMENT      U007\n*  OUT THE IRARCT AND UNCOMMENT OUT THE FOLLOWING.                 U007\n         SPACE 1\n*RCT     DSECT                                                     U007\n*        ORG   RCT+X'2C'                                           U007\n*RCVASMQA DS   H                                                   U007\n         SPACE 1\n         IRARCT  ,                                                 U007\n         TITLE 'C H I M P  - MVS PERF GROUP TABLE DESCRIPTION DEF' U015\n*  THE WPGDT DSECT IS ON PVTMACS, IF YOU DON'T HAVE IT, COMMENT    U015\n*  OUT THE IRAWPGDT AND UNCOMMENT OUT THE FOLLOWING.               U015\n         SPACE 1\n*WPGD    DSECT                                                     U015\n*        ORG   WPGD+X'1C'                                          U015\n*WPGDLEN EQU   *-WPGD                                              U015\n         SPACE 1\n*WPGP    DSECT                                                     U015\n*        ORG   WPGP+X'10'                                          U015\n*WPGPLEN EQU   *-WPGP                                              U015\n         SPACE 1\n         IRAWPGDT ,                                                U015\n         SPACE 3\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CLISTSET": {"ttr": 2566, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x03\\x01\\x00\\x00\\x00\\x85\\x11\\x9f\\x00\\x92\\t\\x0f C\\x00\\xb7\\x00e\\x00R\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "03.01", "flags": 0, "createdate": "1985-04-29T00:00:00", "modifydate": "1992-03-30T20:43:00", "lines": 183, "newlines": 101, "modlines": 82, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1985 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nCLISTSET TITLE 'C L I S T S E T  --  TSO/E COMPATIBILITY VERSION'\n***********************************************************************\n*                                                                     *\n*                           C L I S T S E T                           *\n*                                                                     *\n*                     BUILDS PARM LIST FOR IKJUPDT                    *\n*                                                                     *\n*    THIS SUBROUTINE IS A REPLACEMENT FOR A ROUTINE OF THE SAME NAME  *\n*    WHICH WOULD SET A SYMBOLIC VARIABLE TO A USER-SPECIFIED VALUE    *\n*    WITHIN A CLIST.  WHAT THIS ROUTINE DOES IS TAKE THE PARM LIST    *\n*    BUILT ORIGINALLY FOR THE ORIGINAL CLISTSET ROUTINE AND           *\n*    BUILD A PARM LIST COMPATIBLE WITH IKJCT441.                      *\n*                                                                     *\n*    ON ENTRY: R1 CONTAINS THE ADDRESS OF A THREE FULLWORD            *\n*              PARMAMETER LIST.                                       *\n*                                                                     *\n*    R1  --->  EXTADDR  DS   A         ADDR OF ECT (NO LONGER USED)   *\n*              VALADDR  DC   A(VALUE)  ADDR OF NEW VALUE              *\n*              NAMADDR  DC   A(NAME)   ADDR OF SYMBOLIC NAME          *\n*                                                                     *\n*              VALUE    DC   H'8',CL8'ABCDEFGH'                       *\n*              NAME     DC   H'7',CL7'SYSDVAL'                        *\n*                                                                     *\n*              NOTE THAT THE VARIABLE NAME IS *NOT* PRECEEDED BY      *\n*              AN AMPERSAND ('&').                                    *\n*                                                                     *\n*                                                                     *\n*              ON ENTRY TO IKJCT441 R1 CONTAINS THE ADDRESS OF A 6    *\n*              WORD PARAMETER LIST.                                   *\n*                                                                     *\n*       R1  --->  ECADDR    DS   A(F'ENTRY_CODE')                     *\n*                 VARADDR   DS   A(A(VARNAME))                        *\n*                 VARLEN    DS   A(F'VARLEN')                         *\n*                 VALADDR   DS   A(A(VALNAME))                        *\n*                 VALLEN    DS   A(F'VALLEN')                         *\n*                 TOKNADDR  DS   A(F'TOKEN')                          *\n*                                                                     *\n*      RETURN CODES:                                                  *\n*                 R15 = 0    NORMAL RETURN; VALUE WAS SET             *\n*                 R15 = 4    NO CLIST RUNNING                         *\n*                 R15 = 8    VARIABLE NAME NOT FOUND                  *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nCLISTSET OSENTER GETMAIN=(WKAREAL,WORKAREA),EXIT=RETURN,RC=(R15),      X\n               PARMREG=R11\n         EJECT\n*  SET PTRS TO VAR NAME, LEN, VALUE NAME, LEN\n         L     R15,8(,R11)              -> VARIABLE NAME ELEMENT\n         LA    R14,2(,R15)              SKIP OVER LENGTH FIELD\n         ST    R14,NAMEPTR\n         SPACE 1\n         LH    R0,0(,R15)               GET LENGTH OF VARIABLE NAME\n         ST    R0,NAMELEN               SET FOR IKJCT441\n         SPACE 1\n         L     R15,4(,R11)              -> VALUE ELEMENT\n         LA    R14,2(,R15)              SKIP OVER LENGTH FIELD\n         ST    R14,DATAPTR\n         SPACE 1\n         LH    R0,0(,R15)               GET LENGTH OF VALUE\n         ST    R0,DATALEN               SET FOR IKJCT441\n         SPACE 1\n         XC    TOKEN,TOKEN              CLEAR IT JUST TO BE SURE\n         SPACE 1\n         LA    R14,=A(TSVEUPDT)         -> ENTRY CODE VALUE FOR 'SET'\n         LA    R15,NAMEPTR              -> -> VAR NAME\n         LA    R0,NAMELEN               -> VAR LENGTH\n         LA    R1,DATAPTR               -> -> VALUE\n         LA    R2,DATALEN               -> VALUE LENGTH\n         LA    R3,TOKEN                 -> TOKEN (NOT USED)\n         STM   R14,R3,PARMLIST          SET PARMS FOR IKJCT441\n         OI    PARMLIST+5*4,X'80'       SET VL=1\n         L     R15,CVTPTR               -> CVT\n         L     R15,CVTTVT(,R15)         -> TSVT\n         L     R15,TSVTVACC-TSVT(,R15)  -> IKJCT441\n         LA    R1,PARMLIST              A(PARMLIST)\n         BALR  R14,R15                  DO IT\n         LTR   R15,R15                  CHECK RETURN CODE\n         BZ    EXIT\n         CH    R15,=H'40'               INVALID CLIST ENVIRONMENT?\n         BE    NOTCLIST                 YES - SET RC=4\n         LA    R15,8                    NAME NOT DEFINED\n         B     EXIT\nNOTCLIST LA    R15,4                    NOT A CLIST\nEXIT     B     RETURN\n         EJECT\nWORKAREA DSECT\nPARMLIST DS    6A\nNAMEPTR  DS    A\nDATAPTR  DS    A\nNAMELEN  DS    F\nDATALEN  DS    F\nTOKEN    DS    F\nWKAREAL  EQU   *-WORKAREA\n         SPACE 5\nCVTPTR   EQU   16\nCVTTVT   EQU   X'9C'\n         SPACE 2\n         IKJTSVT\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CLOCK": {"ttr": 2570, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x82\\x06\\x9f\\x00\\x92\\t\\x0f D\\x01\\x8e\\x01-\\x00c\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1982-03-10T00:00:00", "modifydate": "1992-03-30T20:44:00", "lines": 398, "newlines": 301, "modlines": 99, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1982 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nCLOCK  TITLE '-----  DISPLAY CURRENT TIME AND WASTE SOME  -----'\n*---------------------------------------------------------------------*\n*                                                                     *\n*   PROGRAM NAME:  CLOCK                                              *\n*                                                                     *\n*   AUTHOR:        LEONARD D. WOREN                                   *\n*                                                                     *\n*   DATE:          MARCH 10, 1982                                     *\n*                                                                     *\n*   INSTALLATION:  TITLE INSURANCE                                    *\n*                                                                     *\n*   PURPOSE:       NOT MUCH                                           *\n*                                                                     *\n*   UPDATES:                                                          *\n*      04/15/82 EMS   - FIX FOR 3278-5                                *\n*      03/15/82 LDW   - CHANGE ATTN PROCESSING:  BOUNCE IF BITLESS    *\n*                          USER, DISPLAY TIMESTAMP IF SYSPGMR         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\nCLOCK    OSENTER  EXIT=LEAVE,RC=0,GETMAIN=(WORKLEN,WORKD)\n         GTSIZE  ,                      GET THE TERMINAL LINE SIZE\n         SPACE 1\n         CH    R1,=H'80'                80 COLUMNS WIDE?\n         BL    BADTERM                  NO - GET OUT\n         CH    R0,=H'24'                24 OR MORE LINES?\n         BL    BADTERM                  NO - GET OUT\n         MVC   IOCBNAME(8),=CL8'CLOCK'\n         MVC   IOCBWAIT,=F'099'         .99 SECOND UPDATE INTERVAL\n         MVI   FLAG,FAUTO               DEFAULT START AUTO UPDATING\n         SPACE 1\n         LOAD  EPLOC==CL8'TERMIO'       LOAD DCMS TERMINAL I/O ROUTINE\n         ST    R0,IOCBATIO              SAVE ADDRESS\n         SPACE 1\n         STFSMODE  ON,INITIAL=YES\n         SPACE 2\nLOOP     LA    R14,REPLY                -> START\n         LH    R15,SCR1                 LENGTH OF SCREEN BUFFER\n         L     R1,=X'40000000'          GET PAD CHAR & LEN=0\n         MVCL  R14,R0                   CLEAR THE SCREEN BUFFER\n         SPACE 2\n         TIME  DEC                      GET TIME IN R1: HHMMSSTH\n         SPACE 1\n         LR    R15,R0                   GET HHMMSSTH INTO BETTER REG\n         SPACE 1\n         LA    R2,LINEONE               WHERE TO START FORMATTING\n         BAL   R10,FMTCHAR              FORMAT FIRST H\n         SPACE 1\n         LA    R2,12(,R2)               -> NEXT SCREEN POSITION\n         BAL   R10,FMTCHAR              SECOND H\n         SPACE 1\n         LA    R2,12(,R2)               -> NEXT SCREEN POSITION\n         MVC   02*79(2,R2),=C'**'       PUT\n         MVC   03*79(2,R2),=C'**'          IN\n         MVC   08*79(2,R2),=C'**'            THE\n         MVC   09*79(2,R2),=C'**'               COLON\n         SPACE 1\n         LA    R2,4(,R2)                -> NEXT SCREEN POSITION\n         BAL   R10,FMTCHAR              FORMAT FIRST M\n         SPACE 1\n         LA    R2,12(,R2)               -> NEXT SCREEN POSITION\n         BAL   R10,FMTCHAR              SECOND M\n         SPACE 1\n         LA    R2,12(,R2)               -> NEXT SCREEN POSITION\n         MVC   02*79(2,R2),=C'**'       PUT\n         MVC   03*79(2,R2),=C'**'          IN\n         MVC   08*79(2,R2),=C'**'            THE\n         MVC   09*79(2,R2),=C'**'               COLON\n         SPACE 1\n         LA    R2,4(,R2)                -> NEXT SCREEN POSITION\n         BAL   R10,FMTCHAR              FORMAT FIRST S\n         SPACE 1\n         LA    R2,12(,R2)               -> NEXT SCREEN POSITION\n         BAL   R10,FMTCHAR              SECOND S\n         EJECT\nWRITE    OI    IOCBFLGC,IOCBCTIM        DO NOT TIMESTAMP SCREENS\n         TM    FLAG,FAUTO               AUTO UPDATE?\n         BO    WRT$AUTO                 YES - GO DO IT\n         NI    IOCBFLGC,255-IOCBCTIM    DON'T TIMESTAMP WHEN NOT AUTO\n         MVI   IOCBFLGD,0               CLEAR FLAGS\n         SPACE 1\n         TRMIO IOCB,FORMAT=SCR1,IMAGE=REPLY\n         SPACE 1\n         OI    IOCBFLGC,IOCBCCLR        FORMAT WHOLE SCREEN NEXT TIME\n         SPACE 2\nPFKEY    PFKEY ATTN=ATTN,K2=UPDATE,K3=QUIT,K12=QUIT\n         SPACE 2\n         B     LOOP\n         SPACE 3\nATTN     TM    FLAG,FAUTO               IN AUTO UPDATE MODE?\n         BNO   QUIT                     NO - GET OUT OF HERE\n         L     R1,16                    -> CVT\n         L     R1,0(,R1)                -> DISPATCH\n         L     R1,4(,R1)                -> TCB\n         L     R1,180(,R1)              -> JSCB\n         L     R1,264(,R1)              -> PSCB\n*        TM    PSCBATR1,PSCBCTRL        ACCOUNT?\n         TM    16(R1),X'40'             ACCOUNT?\n         BNO   QUIT                     NO - GET OUT OF HERE\n         SPACE 2\nUPDATE   XI    FLAG,FAUTO               FLIP FLAG\n         B     LOOP                     AND DO IT AGAIN\n         SPACE 3\nWRT$AUTO OI    IOCBFLGD,IOCBDYON+IOCBDFRC\n         SPACE 1\n         TRMIO IOCB,WRITE,FORMAT=SCR1,IMAGE=REPLY\n         SPACE 1\n         NI    IOCBFLGC,255-IOCBCCLR    STOP FORMATTING WHOLE SCREEN\n         SPACE 2\n         PFKEY ATTN=ATTN,DEF=LOOP\n         SPACE 3\nQUIT     STFSMODE  OFF\n         SPACE 1\n         B     LEAVE\n         EJECT\nFMTCHAR  SR    R14,R14                  CLEAR FOR SHIFT\n         SLDL  R14,4                    GET A DIGIT\n         MH    R14,=Y(BLOCKLEN)         GET OFFSET INTO \"BLOCK\"\n         LA    R14,BLOCK(R14)           -> CHARACTER\n         MVC   00*79(10,R2),00*10(R14)  FIRST LINE\n         MVC   01*79(10,R2),01*10(R14)\n         MVC   02*79(10,R2),02*10(R14)\n         MVC   03*79(10,R2),03*10(R14)\n         MVC   04*79(10,R2),04*10(R14)\n         MVC   05*79(10,R2),05*10(R14)\n         MVC   06*79(10,R2),06*10(R14)\n         MVC   07*79(10,R2),07*10(R14)\n         MVC   08*79(10,R2),08*10(R14)\n         MVC   09*79(10,R2),09*10(R14)\n         MVC   10*79(10,R2),10*10(R14)\n         MVC   11*79(10,R2),11*10(R14)  LAST LINE\n         BR    R10                      RETURN TO MAINLINE\n         SPACE 3\nBADTERM  TPUTX 'ONLY 3270 TERMINALS ARE SUPPORTED'\n         SPACE 1\n         B     LEAVE\n         SPACE 3\n         LTORG\n         EJECT\n*  COLON\n         DC    CL4'    '\n         DC    CL4'    '\n         DC    CL4' ** '\n         DC    CL4' ** '\n         DC    CL4'    '\n         DC    CL4'    '\n         DC    CL4'    '\n         DC    CL4'    '\n         DC    CL4' ** '\n         DC    CL4' ** '\n         DC    CL4'    '\n         DC    CL4'    '\n*  ZERO\nBLOCK    DC    CL10'  ******  '\nBLOCK1   EQU   *-BLOCK                  LENGTH OF 1 LINE\n         DC    CL10' ******** '\n         DC    CL10'**      **'\n         DC    CL10'**     ***'\n         DC    CL10'**    * **'\n         DC    CL10'**   *  **'\n         DC    CL10'**  *   **'\n         DC    CL10'** *    **'\n         DC    CL10'***     **'\n         DC    CL10'**      **'\n         DC    CL10' ******** '\n         DC    CL10'  ******  '\nBLOCKLEN EQU   *-BLOCK                  LENGTH OF WHOLE CHARACTER\n*  ONE\n         DC    CL10'    **    '\n         DC    CL10'   ***    '\n         DC    CL10'  ****    '\n         DC    CL10'    **    '\n         DC    CL10'    **    '\n         DC    CL10'    **    '\n         DC    CL10'    **    '\n         DC    CL10'    **    '\n         DC    CL10'    **    '\n         DC    CL10'    **    '\n         DC    CL10' ******** '\n         DC    CL10' ******** '\n*  TWO\n         DC    CL10' ******** '\n         DC    CL10'**********'\n         DC    CL10'**      **'\n         DC    CL10'        **'\n         DC    CL10'        **'\n         DC    CL10'       ** '\n         DC    CL10'     **   '\n         DC    CL10'   **     '\n         DC    CL10' **       '\n         DC    CL10'**        '\n         DC    CL10'**********'\n         DC    CL10'**********'\n*  THREE\n         DC    CL10' ******** '\n         DC    CL10'**********'\n         DC    CL10'**      **'\n         DC    CL10'        **'\n         DC    CL10'        **'\n         DC    CL10'     **** '\n         DC    CL10'     **** '\n         DC    CL10'        **'\n         DC    CL10'        **'\n         DC    CL10'**      **'\n         DC    CL10'**********'\n         DC    CL10' ******** '\n*  FOUR\n         DC    CL10'      *** '\n         DC    CL10'     **** '\n         DC    CL10'    ** ** '\n         DC    CL10'   **  ** '\n         DC    CL10'  **   ** '\n         DC    CL10' *********'\n         DC    CL10'**********'\n         DC    CL10'       ** '\n         DC    CL10'       ** '\n         DC    CL10'       ** '\n         DC    CL10'       ** '\n         DC    CL10'       ** '\n*  FIVE\n         DC    CL10'**********'\n         DC    CL10'**********'\n         DC    CL10'**        '\n         DC    CL10'**        '\n         DC    CL10'**        '\n         DC    CL10'*******   '\n         DC    CL10'********  '\n         DC    CL10'       ** '\n         DC    CL10'        **'\n         DC    CL10'        **'\n         DC    CL10'**********'\n         DC    CL10'********* '\n*  SIX\n         DC    CL10' ******** '\n         DC    CL10'**********'\n         DC    CL10'**      **'\n         DC    CL10'**        '\n         DC    CL10'**        '\n         DC    CL10'********* '\n         DC    CL10'**********'\n         DC    CL10'**      **'\n         DC    CL10'**      **'\n         DC    CL10'**      **'\n         DC    CL10'**********'\n         DC    CL10' ******** '\n*  SEVEN\n         DC    CL10'**********'\n         DC    CL10'********* '\n         DC    CL10'**    **  '\n         DC    CL10'     **   '\n         DC    CL10'    **    '\n         DC    CL10'   **     '\n         DC    CL10'   **     '\n         DC    CL10'   **     '\n         DC    CL10'   **     '\n         DC    CL10'   **     '\n         DC    CL10'   **     '\n         DC    CL10'   **     '\n*  EIGHT\n         DC    CL10' ******** '\n         DC    CL10'**********'\n         DC    CL10'**      **'\n         DC    CL10'**      **'\n         DC    CL10' **    ** '\n         DC    CL10'  ******  '\n         DC    CL10'  ******  '\n         DC    CL10' **    ** '\n         DC    CL10'**      **'\n         DC    CL10'**      **'\n         DC    CL10'**********'\n         DC    CL10' ******** '\n*  NINE\n         DC    CL10' ******** '\n         DC    CL10'**********'\n         DC    CL10'**      **'\n         DC    CL10'**      **'\n         DC    CL10'**      **'\n         DC    CL10'**********'\n         DC    CL10'**********'\n         DC    CL10'        **'\n         DC    CL10'        **'\n         DC    CL10'**      **'\n         DC    CL10'**********'\n         DC    CL10' ******** '\n         EJECT\n         PRINT NOGEN\n         SPACE 1\nSCR1     DCMSFMT\nREPLY    DCMSFLD  10,ALPHA,INTEN=HI,CURSOR=YES\n         DCMSFLD  68,INTEN=HI\nLINEONE  DCMSFLD  79,INTEN=LO,ROW=7     1\n         DCMSFLD  79,INTEN=LO           2\n         DCMSFLD  79,INTEN=LO           3\n         DCMSFLD  79,INTEN=LO           4\n         DCMSFLD  79,INTEN=LO           5\n         DCMSFLD  79,INTEN=LO           6\n         DCMSFLD  79,INTEN=LO           7\n         DCMSFLD  79,INTEN=LO           8\n         DCMSFLD  79,INTEN=LO           9\n         DCMSFLD  79,INTEN=LO           10\n         DCMSFLD  79,INTEN=LO           11\n         DCMSFLD  79,INTEN=LO           12\n         DCMSFEND\n         SPACE 3\nWORKD    DSECT                          RESUME\nDWD      DS    D\nFLAG     DS    X\nFAUTO    EQU   X'80'\n         SPACE 2\nIOCB     IOCB\n         EJECT\n         DSGEN SCR1                     SCREEN BUFFER\n         SPACE 2\nWORKLEN  EQU   *-WORKD\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CONS": {"ttr": 2822, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x12\\x00\\x00\\x00\\x822\\x8f\\x00\\x90\\x05\\x1f\\x182\\x07c\\x05N\\x03\\xd9\\xc5\\xd4\\xe2@@@@@@@'", "ispf": {"version": "02.18", "flags": 0, "createdate": "1982-11-24T00:00:00", "modifydate": "1990-02-20T18:32:00", "lines": 1891, "newlines": 1358, "modlines": 985, "user": "EMS"}, "text": "CONSOLE  TITLE 'C O N S O L E - OPERATOR CONSOLE SUPPORT FOR DCMS '\n***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1988 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.                                     *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1, with DFP 3.1),  *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc-oberon!LDW (last resort)                           *\n*                                                                     *\n*          (213) 743-5391 (direct -- 11 am to 7 pm Pacific time)      *\n*          (213) 743-2957 (msgs)                                      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, or 714.  Sorry.                                       *\n*                                                                     *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n         SPACE 3\n*.\n* CONSOLE\n*\n* THIS PROGRAM WILL DO CONSOLE SIMULATION FOR A DCMS TERMINAL.\n* IT GOES OUT AND FINDS A GRAPHICS (3277) ACTIVE CONSOLE AND USES\n* THAT CONSOLES SCREEN IMAGE FOR OUTPUT AND UCM-ID FOR SVC 34.\n* THIS PROGRAM REQUIRES AUTHORIZATION TO USE THE SVC 34 INTERFACE.\n*\n* TO USE IT SIMPLY SAY.. CONSOLE\n*\n* ERROR MESSAGES -\n*  NO ACCEPTABLE (3277) CONSOLES FOUND\n*\n*\n* A NULL INPUT CAUSES THE SCREEN TO BE UPDATED.\n*\n* COMMANDS ARE NOT BROADCAST TO THE CONSOLE BEING USED SO YOU CAN\n* HAVE SOME FUN WITH YOUR OPERATORS. THE COMMAND ENTERED IS PLACED\n* ON THE LINE BELOW THE INPUT LINE.\n*  *** AS OF 10/23/80, THE ABOVE IS NOT QUITE TRUE.  READ THE CODE. ***\n*\n*\n* IF YOU HAVE ANY QUESTIONS PLEASE CALL:\n*\n*     FRED LUDDY\n*     AMDAHL CORP.\n*     1250 E ARQUES\n*     SUNNYVALE CA.\n*  PHONE:\n*     (408) - 735 - 4011\n*\n*\n*\n*  CURRENT RESPONSIBLE PROGRAMMERS:\n*\n*  LDW = Leonard D. Woren\n*\n*  SDM = Steven D. McGinty\n*\n*  EMS = Eric M. Schindler\n*\n*\n*\n*  Installation instructions:\n*\n*  Edit appropriate values for your installation into MACLIB members\n*  @GLOBALS and @GLOBALC.\n*\n*  Assemble and link TERMIO1,2,3,4,5 into a single RENT load mod with\n*  entry point TERMIO1.\n*\n*  Assemble and link CONS RENT,AC(1).\n*\n*  Note that if &@@SPLVL in @GLOBALS is set to 220, you must assemble\n*  CONS with 2.2.0 maclibs, and the resulting load module will execute\n*  on pre-2.2.0 systems.\n*\n*\n*\n*  Updates:\n*  20Feb90 U039 EMS  Check for null command and ignore it\n*  04Jan89 U038 LDW  Fix addressability errors fix\n*  29Dec88 U037 EMS  Add delete command (K nn)\n*                    Fix addressability errors.\n*  15Apr88 U036 LDW  Show descriptive console location in message line\n*                    Eliminate use of LC macro\n*  01Apr88 U035 SDM  Fix \"S\" command bug when console unavailable.\n*                    Fix ROUTCD \"ALL\" and \"NONE\" formatting bug.\n*                    Improve test for MVS/SP level.\n*  17Nov87 U034 SDM  Format route codes on MVS/XA 2.2.0.\n*                    Call a 3279 a 3270-X -- can't tell the difference.\n*  05Nov87 U033 SDM  Make it work at all on MVS/XA 2.2.0.\n*                    Use @GLOBALC for installation dependent code.\n*                    Format pre-SP 2.2.0 console route codes.\n*                    Display 3270 screen size.\n*  16Feb87 U032 LDW  Save last command in a ring buffer\n*  13Jan86 U031 LDW  USE @GLOBALS (REPLACES &SP3 AND &APFSVC)\n*                    DISPLAY SYSTEM ID ON MSGLINE\n*                    UPDATE CONSOLE DESCRIPTIONS\n*  12Aug84 U030 LDW  UPDATE CONSOLE DESCRIPTIONS\n*  14Mar84 U029 LDW  USE TABLE LOOKUP FOR CONSOLE DESCRIPTION\n*                       (INSTEAD OF INDEXING INTO THE TABLE)\n*                    FIX BUG IN CONVERTING OPERAND OF 'S' COMMAND\n*  29Dec83 U028 SDM  ADD 3278-4 SUPPORT (39 LINE SCREEN)\n*                    INTERPRET CONS PARM AS COMMAND\n*                    ADD 'S' COMMAND TO SELECT CONSOLE (LIKE PF9)\n*                    DELETE OLD COMMENTED OUT CODE\n*  10May83 U027 LDW  FIX FOR NON-SP3 (AGAIN)\n*  18Jan83 U026 LDW  ADD USE OF SPECIAL APF SET SVC\n*  04Jan83 U025 SDM  MAKE IT WORK AGAIN IN NON-SP3 ENVIRONMENT\n*  06Dec82 U024 LDW  REQUIRE \"/\" IN FRONT OF MVS COMMANDS\n*                    DELETE SOME OLD COMMENTED OUT CODE\n*  24Nov82 U023 LDW  INSTALL SUPPORT FOR SP1.3 (THIS CODE ADAPTED\n*                       FROM HOWARD DEAN'S MODIFIED \"SPY\")\n*                    ONLY RUN KEY ZERO WHEN ACTUALLY NECESSARY\n*                    RECOGNIZE MORE DEVICE TYPES IN \"LISTCONS\"\n*                    ADD CONSOLE LOCATION TABLE\n*                    CHANGE MESSAGES TO LOWER CASE\n*  30Mar82 U022 LDW  CORRECT DISPLAY OF CONSOLE CMDAUTH\n*  22Mar82 U021 LDW  MOVE LABEL \"MENUBIG\" TO MAKE LONG CANNED\n*                       COMMANDS WORK AGAIN\n*                    MINOR CHANGES TO CANNED COMMANDS LIST\n*  21Mar82 U020 LDW  FIX U019 TO WORK ON NON-SP SYSTEM\n*                    USING -> USNGX, DROP -> DROPX, INUSE\n*                    MOVE TESTAUTH TO FIX \"CONS ?\" PROBLEM\n*                    IMPROVE \"D C\" DEVICE TYPE DISPLAY\n*                    CHANGE \"CURSOR=AFTER\" TO \"CURSOR=YES\"\n*  18Mar82 U019 LDW  DISPLAY 20 LINES INSTEAD OF 19 FOR SP1.1\n*  03Dec81 U018 LDW  ADD \"DISPLAY CONSOLES\" FUNCTION (\"?\" ON PF9)\n*                    MINOR CHANGES TO CANNED COMMANDS\n*  07Oct81 U017 LDW  ADD FLIP-FLOP LOGIC TO AUTO UPDATE IF 3066\n*                    INSTALL TESTAUTH TO PREVENT SPF-6 SYSUDUMPS\n*  03Aug81 U016 SDM  ALLOW PARM TO SPECIFY CONSOLE ADDRESS\n*                    CHANGE INPUT LINE RESETING LOGIC\n*                    ALLOW CONCURRENT COMMAND AND SWITCH TO MENU\n*                    FIX 'OPERATOR NOT AUTHORIZED' DISPLAY BUG\n*                    DISALLOW QUIESCE COMMAND\n*  17Jun81 U015 LDW  FIX U014 UPDATE\n*  16Jun81 U014 LDW  ADD SUPPORT FOR 3066 (168 CONSOLE)\n*  25Mar81 U013 SDM  REMOVE TCLEARQ INPUT (VTAM WORKS AGAIN)\n*                    SUPPRESS DISPLAY OF REPLY TEXT\n*                    FIX MINOR BUGS IN CANNED COMMANDS\n*  23Oct80 U012 LDW  WTO USERID & COMMAND ISSUED\n*                    MAKE PROGRAM RE-ENTRANT\n*                    IGNORE UNDEFINED PF KEYS\n*  16Sep80 U011 LDW  MODESET KEY=ZERO FOR AFTER PUT7908\n*  02Jun80 U010 LDW  MAKE PF5 TO PF5 WORK\n*  27May80 U009 LDW  CANNED COMMANDS CAPABILITY (PF5)\n*                    RE-WRITE ERROR MESSAGE LOGIC\n*                    MOVE \"TESTAUTH\" OUT OF LOOP\n*  22May80 U008 LDW  CHANGE UPDATE KEY FROM PF1 TO PF2\n*                    MAKE PF1 \"HELP\" TO CONFORM TO SPF\n*                    ADD CONSOLE SELECT CAPABILITY TO PF9\n*                    MISCELLANEOUS CLEANUP\n*  14Mar80 U007 LDW  ADD REPROMPT (PF6) FEATURE\n*  08Feb80 U006 LDW  FIX \"DCMSWARN\" MSG & DISPLAY OF LAST CMD\n*                    DEFINE PF3 AS \"END\" TO CONFORM TO SPF\n*                    DISPLAY ACTION INDICATORS AT START OF LINE\n*                    DISPLAY ONLY ACTION MSGS IN HIGH INTENSITY\n*  04Feb80 U005 LDW  \"TCLEARQ INPUT\" TO GET AROUND VTAM RESHOW BUG\n*  30Nov79 U004 SDM  ELIMINATE 'SYSTEM PROGRAMMER' RESTRICTION\n*  30Nov79 U003 LDW  FIX LENGTH OF \"CMND\" PASSED TO SVC 34\n*  12Nov79 U002 LDW  CHANGE CHECK FOR USER'S AUTHORIZATION\n*                    FIX BUG IN DISPLAY OF SVC34 RETURN CODE\n*  08Oct79 U001 LDW  FIND MSTCONS\n*                    CHECK FOR OPERATOR BIT\n*                    CHECK FOR \"END\" OPERATOR COMMAND TO\n*                       LEAVE THIS PROCESSOR.\n*                    INIT TO NO AUTO UPDATE\n         EJECT\n*\n*\n*    .  -----\n*      | PA1 |   WHEN IN AUTO-UPDATE : SWITCHES TO WAIT MODE\n*      |     |   WHEN IN WAIT MODE : TERMINATES PROGRAM\n*       -----\n*\n*    .  -----\n*      | PF1 |   DISPLAY HELP INFORMATION                          U008\n*      |     |\n*       -----\n*\n*    .  -----\n*      | PF2 |   PUTS CONSOLE IN AUTO-UPDATE MODE                  U008\n*      |     |\n*       -----\n*\n*    .  -----\n*      | PF3 |   TERMINATES PROGRAM                                U006\n*      |     |\n*       -----\n*\n*    .  -----\n*      | PF5 |   DISPLAY CANNED COMMANDS MENU                      U009\n*      |     |\n*       -----\n*\n*    .  -----\n*      | PF6 |   REPROMPT LAST COMMAND ON COMMAND LINE             U007\n*      |     |\n*       -----\n*\n*    .  -----\n*      | PF7 |   SELECT TOP OF LARGE SCREEN (DEFAULT)              U014\n*      |     |\n*       -----\n*\n*    .  -----\n*      | PF8 |   SELECT BOTTOM OF LARGE SCREEN                     U014\n*      |     |\n*       -----\n*\n*    .  -----\n*      | PF9 |   SELECT ANOTHER CONSOLE                            U008\n*      |     |\n*       -----\n*\n*    .  -----\n*      | PF12|   TERMINATES PROGRAM\n*      |     |\n*       -----\n*.\n         EJECT ,\n         COPY  @GLOBALS                                            U031\n         EJECT ,\nCONS     DCMSTART R,LV=WORKLEN,BASE2=R11                           U037\n         SPACE 3                                                   U023\n*u037    LA    R11,4095(,R12)           PREPARE                    U023\n*u037    LA    R11,1(,R11)                      SECOND             U023\n*u037    USING CONS+4096,R11                           REGISTER    U023\n         EJECT\n         LR    R2,R1                    SAVE CBUF POINTER          U018\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*  INITIALIZE MISCELLANEOUS DATA                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         MVI   XUCMID,0                                            U012\n         MVI   FLAG,0                   DEFAULT = NO AUTO UPDATE   U001\n         XC    CMDNUM(L'CMDNUM+L'RETNUM),CMDNUM                    U032\n         LR    R9,R13                   copy dsa addr              U038\n         AH    R9,=H'4096'              -> second 4k               U038\n         USNGX DCMSWORK+4096,R9         temp addressability        U038\n*U038    LA    R14,CMDSTACK-4095        -> DEST-4095               U032\n*U038    LA    R14,4095(,R14)           -> DEST                    U032\n         LA    R14,CMDSTACK             -> DEST                    U038\n         ST    R14,STACKA               SAVE FOR LATER USE         U032\n         LA    R15,16*L'CMDBUF          DEST LENGTH                U032\n         SR    R1,R1                    PAD CHAR; SOURCE LEN = 0   U032\n         MVCL  R14,R0                   CLEAR COMMAND STACK        U032\n*U038    LA    R14,DOMTAB-4095          -> dest-4095               U037\n*U038    LA    R14,4095(,R14)           -> dest                    U037\n         LA    R14,DOMTAB               -> dest                    U038\n         ST    R14,DOMTABA              -> dest                    U037\n*U038    LA    R14,MENUSAVE-4095        -> dest-4095               U037\n*U038    LA    R14,4095(,R14)           -> dest                    U037\n         LA    R14,MENUSAVE             -> dest                    U038\n         ST    R14,MENUSAVA             -> dest                    U037\n         DROPX R9                       DCMSWORK+4096              U038\n         MVC   DISPCMD,BLANKS                                      U013\n         MVC   ERRMSG,BLANKS                                       U012\n         MVC   UNITADDR(L'UNITADDR+L'UNITCONS),BLANKS              U031\n         L     R1,CVTPTR                -> CVT                     U031\n         L     R1,CVTSMCA-CVT(,R1)      -> SMCA                    U031\n         MVC   SYSID,SMCASID-SMCABASE(R1)  GET SYSTEM ID           U031\n         XC    ADDRUCM,ADDRUCM          WE DON'T HAVE A CONSOLE    U028\n         MVC   WTO(WTOL),WTOMASK        COPY PATTERN WTO           U012\n         MVC   SCR1(SCR1L),SCR1X        COPY STANDARD SCRN DESCR   U012\n         MVC   MENUSCR(256),MENUSCRX    COPY MENU SCRN DESCR       U012\n         MVC   MENUSCR+256(MENUSCRL-256),MENUSCRX+256              U012\n         SPACE 2\n         LA    R1,79+4                  MGCR LENGTH                U012\n         SLL   R1,16                                               U012\n         ST    R1,CMND                  STORE IN WTO LIST          U012\n         SPACE 1\n         LA    R1,SCREEN                -> AREA TO CLEAR           U009\n         LA    R0,SCR1                  -> LENGTH                  U009\n         BAL   R14,@CLEAR               CLEAR THE SCREEN BUFFER    U009\n         SPACE 1\n         L     R0,=A(MENULIST)          -> SOURCE                  U009\n         LA    R1,MENULEN               LENGTH                     U009\n         ICM   R1,B'1000',BLANKS        GET PAD CHAR               U009\n         L     R14,MENUSAVA             -> DEST                    U037\n         LH    R15,MENUSCR              LENGTH                     U009\n         MVCL  R14,R0                   COPY THE MENU              U009\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*  CHECK FOR PCAUTH ADDRESS SPACE.  IF FOUND, WE ARE RUNNING MVS/SP1.3*\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         L     R1,CVTPTR                -> CVT                     U023\n         SH    R1,=H'40'                -> SP level indicator      U035\n         MVI   SPLVL,NONSP              Assume MVS 3.8 base        U035\n         CLC   0(2,R1),=C'SP'           Is this MVS/SP at all?     U035\n         BNE   GOTLVL                   No, SP flag is correct     U035\n         CLC   2(5,R1),=C'1.3.0'        Is this at least SP 1.3.0? U035\n         BL    GOTLVL                   No, SP flag is correct     U035\n         MVI   SPLVL,SP130              Assume SP 1.3.0            U033\n         CLC   2(5,R1),=C'2.2.0'        Is this at least SP 2.2.0? U035\n         BL    GOTLVL                   No, SP flag is correct     U035\n         MVI   SPLVL,SP220              Yes, set SP 2.2.0          U035\nGOTLVL   DC    0H'0'                                               U033\n         SPACE 2\n          AIF   (&@@SPLVL GE 220).SKIP002 Skip if SP22 supported   U033\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Complain if necessary support is not generated                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         LA    R1,=C'2.2.0'             Release number for msg     U033\n         CLI   SPLVL,SP220              Running SP 2.2.0?          U033\n          AIF   (&@@SPLVL GE 130).SKIP001 Skip if SP13 supported   U033\n         BNL   LVLERR                   Yes, the news is bad       U033\n         LA    R1,=C'1.3.0'             Release number for msg     U033\n         CLI   SPLVL,SP130              Running SP 1.3.0?          U033\n.SKIP001  ANOP                                                     U033\n         BL    TESTAUTH                 No, continue               U033\nLVLERR   MVC   SCREEN(LVLML),LVLM       Format basic message       U033\n         MVC   LVLMREL-LVLM+SCREEN,0(R1)  Format release number    U033\n         BAL   R9,WRITE                 WRITE THE SCREEN           U023\n         B     DCMSTOP                  FINI                       U023\n         SPACE 1\nLVLM     DC    C'*** This version of \"CONS\" was not'               U033\n         DC    C' generated with SP '                              U033\nLVLMREL  DC    C'X.X.X'                                            U033\n         DC    C' support ***'                                     U033\nLVLML    EQU   *-LVLM                   Length of error message    U033\n         SPACE 1\nTESTAUTH DC    0H'0'                                               U023\n         SPACE 1\n.SKIP002  ANOP                                                     U023\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*  SEE IF WE HAVE APF AUTHORIZATION, IF NOT, CAN'T DO ANYTHING...     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         TESTAUTH  FCTN=1               ASK MVS IF WE ARE ARE      U020\n         SPACE 1                                                   U020\n         LTR   R15,R15                  WELL, ARE WE?              U020\n          AIF   (&@@SCSVC NE 0).SVC01                              U031\n         BNZ   NOTAPF                   NO - GET OUT               U020\n          AGO   .SVC02                                             U026\n.SVC01    ANOP                                                     U026\n         BZ    YESAPF                   YES - CONTINUE             U026\n         LA    R0,1                     REQUEST SET APF AUTH       U026\n         SVC   &@@SCSVC                 ISSUE MAGIC SVC            U031\n         SPACE 1\n         TESTAUTH  FCTN=1               SEE IF IT WORKED           U026\n         SPACE 1\n         LTR   R15,R15                  WELL, DID IT?              U026\n         BNZ   NOTAPF                   NO - GET OUT               U026\n         OI    FLAG,AUTHSET             YES - REMEMBER WE SET IT   U026\nYESAPF   EQU   *                                                   U026\n.SVC02    ANOP                                                     U033\n         SPACE 2\n          AIF   (&@@SPLVL LT 130).SKIP003 Skip if SP13 unsupported U031\n*---------------------------------------------------------------------*\n*                                                                     *\n*  SET UP CROSS MEMORY ADDRESS SPACE COMMUNICATION SO WE CAN TRANSFER *\n*  DATA FROM CONSOLE ADDRESS SPACE                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         CLI   SPLVL,SP130              Running SP3?               U033\n         BL    NOAXSET                  No - skip AXSET            U033\n         BAL   R9,MODESUP               GET SUPERVISOR STATE       U023\n         SPACE 1\n*---  THE STUPID MACRO FOLLOWING DOES NOT ALLOW COMMENTS           U023\n*---  EXTRACT AUTHORIZATION INDEX FOR CURRENT PASID                U023\n         AXEXT\n         SPACE 1\n         STH   R0,OLDAXVAL              SAVE FOR RESTORE           U023\n         SPACE 1\n         ESAR  R3                       GET SECONDARY ASID         U023\n         SPACE 1\n         STH   R3,OLDSASID              SAVE FOR RESTORE           U023\n         SPACE 1\n         LA    R0,1                     GET AX VALUE               U023\n         SPACE 1\n         AXSET AX=(0)                   SET AUTHORIZATION INDEX    U023\n         SPACE 1\n         BAL   R9,MODEPROB              RESTORE PROBLEM STATE      U023\nNOAXSET  EQU   *,,C'I'                                             U023\n.SKIP003  ANOP                                                     U023\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  COPY PARM INTO COMMAND BUFFER                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         MVC   CMDBUF,BLANKS            CLEAR CMD INTERPRET AREA   U028\n         L     R1,0(,R2)                -> CBUF                    U018\n         LR    R15,R1                   -> CBUF                    U028\n         AH    R15,0(,R1)               -> END OF COMMAND + 1      U028\n         LH    R14,2(,R1)               OFFSET TO PARAMETERS       U028\n         LA    R14,4(R14,R1)            -> COMMAND PARAMETERS      U028\n         SR    R15,R14                  LENGTH OF PARAMETERS       U028\n         BNP   GET$PSCB                 NONE, DON'T MOVE PARM      U028\n         BCTR  R15,0                    REDUCE BY ONE FOR 'EX'     U028\n         MVC   CMDBUF(0),0(R14)         << EXECUTED >>             U028\n         EX    R15,*-6                  COPY PARMS INTO AREA       U028\n         OC    CMDBUF,BLANKS            FORCE CMD TO UPPER CASE    U028\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  FIND REAL PSCB, SEE IF USER IS AUTHORIZED TO BE HERE               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nGET$PSCB L     R1,16                    -> CVT                     U001\n         L     R1,0(,R1)                -> DISPATCH                U001\n         L     R1,4(,R1)                -> TCB                     U001\n         L     R1,180(,R1)              -> JSCB                    U001\n         L     R1,264(,R1)              -> PSCB                    U001\n         TM    PSCBATR1-PSCB(R1),PSCBCTRL  OPERATOR?               U023\n         BNO   BOUNCE                   NO - THROW HIM OUT         U002\n         MVC   WTO+4+4(7),PSCBUSER-PSCB(R1)  MOVE IN TSO USERID    U023\n         EJECT\nGETMAST  XC    UNITADDR,UNITADDR        INDICATE NO SPECIFIC ADDR  U028\n         L     R1,CVTPTR                AND IN THE BEGINNING...\n         L     R1,CVTCUCB-CVT(,R1)      ...\n         USNGX UCM,R1                                              U023\n         LR    R15,R1                   COPY FOR ADJUSTMENT        U023\n         SH    R15,=H'4'                POINT TO MCS PREFIX ADDR   U023\n         L     R15,0(,R15)              GET MCS PREFIX             U023\n         USNGX UCMPRFX,R15                                         U023\n         MVC   CONSASID,UCMCTID         SAVE CONSOLE TASK ASID...  U023\n*                                       ... FOR SSAR               U023\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*  TRY TO LOCATE THE MASTER CONSOLE                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         L     R3,UCMMCENT              GET MASTER CONSOLE ENTRY   U001\n         DROPX R15                      UCMPRFX                    U028\n         LTR   R3,R3                    IS THERE ONE?              U001\n         BZ    SEARCH                   NO - SKIP                  U016\n         BAL   R9,GETTDCM               COPY TDCM IF NECESSARY     U023\n         BNZ   GOTUCM                   It worked, go use it       U033\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  COULDN'T FIND MSTCONS, SO NOW WE DO IT THE OLD WAY --              *\n*  JUST USE THE FIRST AVAILABLE GRAPHICS CONSOLE.                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nSEARCH   L     R1,CVTPTR                LOCATE UCM BASE AGAIN ...  U028\n         L     R1,CVTCUCB-CVT(,R1)      ... AT THIS ENTRY POINT    U028\n         LM    R3,R5,UCMVEA             R3 -> TO THE FIRST UCME\n*                                         R4 CONTAINS UCME LENGTH\n*                                           R5 -> TO THE LAST UCME\n         DROPX R1                       UCM                        U023\n         SPACE 1\nDID0     EQU   *                        SEARCH FOR SOMETHING USEFUL\n         USNGX UCMLIST,R3\n***\n         OC    UNITADDR,UNITADDR        LOOKING FOR SPECIFIC CONS? U028\n         BZ    ANY                      NO - SKIP                  U016\n         L     R1,UCMUCB                -> MVS UCB                 U028\n         CLC   UNITADDR,13(R1)          YES - THIS IT?             U028\n         BNE   DID1                     NO - TRY NEXT              U008\n         SPACE 1\nANY      BAL   R9,GETTDCM               Copy TDCM if necessary     U023\n         BNZ   GOTUCM                   It worked, go use it       U033\nDID1     BXLE  R3,R4,DID0               GET THE NEXT ENTRY\n         OC    UNITADDR,UNITADDR        LOOKING FOR SPECIFIC CONS? U028\n         BNZ   NOTFOUND                 YES - DIDN'T FIND IT       U016\n         MVC   SCREEN(47),=C'>>> NO ACCEPTABLE (3270 OR 3066) CONSOLES $\n               FOUND'                                              U017\n         BAL   R9,WRITE                 WRITE THE SCREEN\n         B     DCMSEXIT                 FINI\n         DROPX R3                       UCMLIST                    U023\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  ASSORTED ERROR MESSAGES                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nNOTFOUND MVC   ERRMSG,BLANKS            CLEAR THE AREA             U009\n         MVC   ERRMSG(3),UNITADDR       WHAT WE ARE LOOKING FOR    U028\n         MVC   ERRMSG+3(24),=C' NOT FOUND OR NOT USABLE'           U009\n         MVC   ENTRLNE,ERRMSG           COPY TO SCREEN             U009\n         B     REFRESH                  BACK TO WHERE HE WAS       U009\n         SPACE 1\nSELERR   MVC   ERRMSG,BLANKS            CLEAR THE AREA             U028\n         MVC  ERRMSG(37),=C'INVALID ADDRESS SPECIFIED FOR CONSOLE' U028\n         MVC   ENTRLNE,ERRMSG           COPY TO SCREEN             U028\n         B     REFRESH                  BACK TO WHERE HE WAS       U028\n         SPACE 2\nBOUNCE   MVC   SCREEN(33),=C'COMMAND NOT AUTHORIZED FOR USERID'    U002\n         BAL   R9,WRITE                 WRITE THE SCREEN           U002\n         B     DCMSEXIT                 LEAVE QUICKLY              U002\n         SPACE 2\nNOTAPF   MVC   SCREEN(31),=C'CONS REQUIRES APF AUTHORIZATION'      U017\n         BAL   R9,WRITE                 WRITE THE SCREEN           U017\n         B     DCMSTOP                  LEAVE EXTREMELY QUICKLY    U023\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  DISPLAY LIST OF CONSOLES AND THEIR STATUS (LIKE \"D C\")         U018*\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nLISTCONS LA    R1,SCREEN                -> AREA TO CLEAR           U018\n         LA    R0,SCR1                  -> LENGTH                  U018\n         BAL   R14,@CLEAR               CLEAR THE SCREEN BUFFER    U018\n         SPACE 1\n         L     R1,CVTPTR                AND IN THE BEGINNING...    U018\n         L     R1,CVTCUCB-CVT(,R1)      ...                        U018\n         USNGX UCM,R1\n         LM    R3,R5,UCMVEA             R3 -> TO THE FIRST UCME    U018\n*                                         R4 CONTAINS UCME LENGTH  U018\n*                                           R5 -> TO THE LAST UCME U018\n         LA    R8,SCREEN                -> OUTPUT LINE             U018\n         USNGX LCLINE,R8                                           U018\n         LA    R15,SCR1+6               -> FIRST LINE DESCRIPTOR   U018\n         MVC   0(MSGLOCL,R8),MSGLOC     Move in header             U033\n         MVI   1(R15),X'F8'             MAKE HEADER BRIGHT         U018\n         LA    R8,79(,R8)               -> NEXT SCREEN LINE        U023\n         LA    R15,8(,R15)              -> NEXT LINE DESCRIPTOR    U023\n         MVI   0(R8),C'-'               SET UP FOR A LINE ...      U023\n         MVC   1(79-1,R8),0(R8)         ... OF DASHES              U023\n         MVI   1(R15),X'F4'             MAKE DASHES LOW INTENSITY  U023\n         LA    R7,19                    MAX LINES                  U023\n         SPACE 1\n         USNGX UCMLIST,R3                                          U018\n         INUSE ,                                                   U020\n         SPACE 2\nLC$01    LA    R8,79(,R8)               -> NEXT SCREEN LINE        U018\n         LA    R15,8(,R15)              -> NEXT LINE DESCRIPTOR    U018\n         MVI   1(R15),X'F4'             MAKE IT LOW INTENSITY      U018\n*---  DEVICE ADDRESS\n         L     R1,UCMUCB                                           U018\n         MVC   LC@ADDR,13(R1)           COPY DEVICE ADDRESS        U018\n*---  CONSOLE ID NUMBER\n         SR    R2,R2                    CLEAR FOR IC               U018\n         IC    R2,UCMID                 GET CONSOLE ID NUMBER      U018\n         BAL   R14,@DECIML2             CONVERT TO DECIMAL         U018\n         MVC   LC@ID,DECWORK4+2         MOVE TO DISPLAY LINE       U018\n*---  CONSOLE LOCATION -- TABLE MUST BE UPDATED FOR YOUR INSTALLATION\n         L     R1,=A(NAMES-LOCTABLL)    -> name loc table          U033\n         BAL   R14,LOCFIRST             SET LOOP ADDR, SKIP FIRST  U029\n         LA    R1,LOCTABLL(,R1)         -> next table entry        U033\n         CLC   0(3,R1),BLANKS           END OF TABLE?              U029\n         BE    NONAME                   YES - LEAVE IT BLANK       U029\nLOCFIRST CLC   LC@ADDR,0(R1)            IS THIS THE ENTRY?         U029\n         BNER  R14                      NO - TRY NEXT              U029\n         MVC   LC@LOC(LNML),3(R1)       Yes, get description       U033\n*---  CONSOLE STATUS\nNONAME   MVI   LC@STAT,C'I'             ASSUME INACTIVE            U018\n         TM    UCMATR,UCMUF             IS IT ACTIVE?              U018\n         BNO   *+12                     NO - SKIP                  U023\n         MVI   LC@STAT,C'A'             YES - INDICATE             U018\n         MVI   1(R15),X'F8'             MAKE IT BRIGHT             U023\n         TM    UCMDISP1,UCMDISPA        MASTER CONSOLE?            U018\n         BNO   *+8                      NO - SKIP                  U018\n         MVI   LC@STAT,C'M'             YES - INDICATE             U018\n*---  DISPLAY MODE\n         TM    UCMDISP2,UCMDISPI        $TOSCN,D=T ?               U018\n         BNO   *+10                     NO - SKIP                  U018\n         MVC   LC@STAT+1(2),=C',T'      YES - INDICATE             U018\n         TM    UCMDISP2,UCMDISPJ        $TOSCN,D=J ?               U018\n         BNO   *+10                     NO - SKIP                  U018\n         MVC   LC@STAT+1(2),=C',J'      YES - INDICATE             U018\n         TM    UCMATR,UCMAT04           STATUS TO CHANGE?          U018\n         BNO   *+10                     NO - SKIP                  U018\n         MVC   LC@STAT+3(2),=C',C'      YES - INDICATE             U018\n*---  COMMAND AUTHORIZATION\n         IC    R14,UCMAUTHA             PICK UP AUTHORIZATION BYTE U018\n         SRL   R14,8-3                  SHIFT OUT JUNK             U018\n         N     R14,=F'7'                REMOVE OTHER JUNK          U018\n         MH    R14,=Y(L'AUTHTBL)        * TABLE ENTRY LENGTH       U018\n         LA    R14,AUTHTBL(R14)         -> DESCRIPTOR              U018\n         MVC   LC@AUTH,0(R14)           MOVE TO DISPLAY LINE       U018\n*---  DEVICE TYPE\n         L     R1,UCMUCB                -> UCB                     U020\n         MVC   LC@TYPE(4),=C'????'      ASSUME UNKNOWN             U023\n         CLI   18(R1),X'10'             GRAPHICS DEVICE CLASS?     U023\n         BNE   LC$02                    NO - TRY UNIT RECORD       U023\n         CLI   19(R1),X'02'             IN RANGE?                  U023\n         BL    LC$05                    NO - UNKNOWN GRAPHICS      U023\n         CLI   19(R1),X'0E'             IN RANGE?                  U023\n         BH    LC$05                    NO - UNKNOWN GRAPHICS      U023\n         SR    R14,R14                  CLEAR FOR IC               U023\n         IC    R14,19(,R1)              GET DEVICE TYPE CODE       U023\n         SLL   R14,2                    MULTIPLY TYPE CODE BY 4    U023\n         LA    R14,GRAFTYPE-(2*4)(R14)  -> DEVICE TYPE             U023\n         MVC   LC@TYPE(4),0(R14)        MOVE IN DEVICE TYPE        U023\n          AIF   (&@@SPLVL LT 130).SKIP004 Skip if SP13 unsupported U033\n         CLI   SPLVL,SP130              Running SP3?               U033\n         BL    LC$05                    No - skip config format    U033\n         CLI   19(R1),X'09'             3270 device type?          U033\n         BNE   LC$05                    No, done                   U033\n         LA    R14,DEVCNFGX             Assume invalid value       U033\n         CLM   R14,B'0001',UCMEDEVX     Is config value valid?     U033\n         BL    *+8                      No, use the special value  U033\n         IC    R14,UCMEDEVX             Yes, get config value      U033\n         MH    R14,=Y(DEVCNFGL)         Offset into table          U033\n         LA    R14,DEVCNFG(R14)         -> Device config entry     U033\n         MVC   LC@TYPE+2(5),0(R14)      Move device type detail    U033\n         MVC   LC@SCSZ(6),5(R14)        Move screen size string    U034\n.SKIP004  ANOP                                                     U033\n         B     LC$05                    DONE                       U023\n         SPACE 1\nLC$02    CLI   18(R1),X'08'             UNIT RECORD CLASS?         U023\n         BNE   LC$05                    NO - UNKNOWN               U023\n         LA    R14,URTYPE               -> UNIT RECORD TYPE TABLE  U023\n         SPACE 1\nLC$03    CLC   0(1,R14),19(R1)          IS THIS THE DEVICE TYPE?   U023\n         BE    LC$04                    YES - MOVE IT IN           U023\n         LA    R14,1+5(,R14)            -> NEXT TYPE TABLE ENTRY   U023\n         CLI   0(R14),X'FF'             END OF TABLE?              U023\n         BNE   LC$03                    NO - KEEP LOOKING          U023\n*  THE FOLLOWING CLC IS INCORRECT, BUT I DON'T HAVE ANY 2740'S     U023\n*  TO LOOK AT, AND 2740 IS NOT LISTED IN DEBUGGING HANDBOOK        U023\n         CLC   =X'98765432',16(R1)      IS IT A 2740?              U023\n         BNE   LC$05                    NO - UNKNOWN TYPE          U023\n         LA    R14,=C' 2740 '           YES - FAKE THE STRING      U023\n         SPACE 1\nLC$04    MVC   LC@TYPE(5),1(R14)        MOVE IN DEVICE TYPE        U023\nLC$05    DC    0H'0'                                               U033\n*---  ROUTING CODES\n          AIF   (&@@SPLVL LT 220).SKIP005 Skip if SP22 unsupported U033\n         CLI   SPLVL,SP220              Running SP 2.2.0?          U033\n         BL    LC$06                    No, format old route codes U034\n         L     R1,UCMFEXTP              -> Fixed extension         U034\n         LA    R1,UCMEFRC-UCMEFEXT(,R1)  -> console route codes    U034\n         LA    R0,128                   Number of route codes      U034\n         B     LC$07                    Go format the codes        U034\nLC$06    DC    0H'0'                                               U034\n.SKIP005  ANOP                                                     U033\n         LA    R1,UCMRTCD               -> route codes             U034\n         LA    R0,15                    Number of route codes      U034\nLC$07    STM   R14,R12,12(R13)          Save program registers     U034\n         SR    R2,R2                    Init loaded rtcds ctr      U034\n         LR    R3,R2                    Init prev rtcd             U034\n         LA    R4,LC@ROUT               -> output area             U034\n         MVC   PWORK,BLANKS             Clear format area          U034\n         OI    FLAG,F@ALLRC+F@NILRC     First time through         U034\n         B     RTCD2                    Enter the loop             U034\nRTCD1    NI    FLAG,255-F@ALLRC         Indicate not 'all'         U034\nRTCD2    BAL   R14,RTCDCK               Test next rtcd             U034\n         BZ    RTCD1                    Not set, try another       U034\n         BM    RTCDX                    End of list, exit          U034\n         BAL   R14,RTCDFM               Format rtcd number         U034\n         BAL   R14,RTCDCK               Test for possible range    U034\n         BZ    RTCD1                    Not set, not range         U034\n         BM    RTCDX                    End of list, exit          U034\nRTCD3    BAL   R14,RTCDCK               Test next rtcd             U034\n         BO    RTCD3                    Set, still in range        U034\n         BM    RTCD4                    End of list, format & exit U034\n         BAL   R14,RTCDFMR              Format end of range        U034\n         B     RTCD1                    Try next rtcd              U034\n         SPACE 2                                                   U034\nRTCDCK   LA    R3,1(,R3)                Current rtcd               U034\n         CR    R3,R0                    Rtcd in range?             U034\n         BH    RTCDCK2                  No, bail out now           U034\n         SLL   R5,1                     Shift bit into position    U034\n         CR    R3,R2                    Got code in register?      U034\n         BNH   RTCDCK1                  Yes, use it                U034\n         L     R5,0(,R1)                No, get new bunch          U034\n         LA    R1,4(,R1)                -> next bunch              U034\n         LA    R2,32(,R2)               Set new limit              U034\nRTCDCK1  ST    R5,DOUBLE                Store for TM               U034\n         TM    DOUBLE,X'80'             Rtcd bit set?              U034\n         BR    R14                      Return CC to caller        U034\n         SPACE 1                                                   U034\nRTCDCK2  TM    *,X'FF'                  Set 'mixed' CC             U034\n         BR    R14                      Return CC to caller        U034\n         SPACE 2                                                   U034\nRTCDFMR  MVI   PWORK+8,C'-'             Set range separator        U034\n         LR    R15,R3                   Current rtcd               U034\n         BCTR  R15,0                    Use prev rtcd              U034\n         B     RTCDFM1                  Go format end of range     U034\n         SPACE 1                                                   U034\nRTCDFMX  MVI   PWORK+8,C' '             Set ending separator       U034\n         B     RTCDFM2                  Go flush format buffer     U034\n         SPACE 1                                                   U034\nRTCDFM   MVI   PWORK+8,C','             Set comma separator        U034\n         LR    R15,R3                   Current rtcd               U034\nRTCDFM1  CVD   R15,DOUBLE               Rtcd to decimal            U034\n         MVC   PWORK(4),EDITMASK        Simple edit mask           U034\n         ED    PWORK(4),DOUBLE+6        Edit the rtcd number       U034\n         TM    FLAG,F@NILRC             First time through?        U034\n         BO    RTCDFM6                  Yes, skip format           U034\nRTCDFM2  LA    R6,PWORK+4               -> left end of number      U034\nRTCDFM3  CLI   0(R6),C' '               Leading blank?             U034\n         BNE   RTCDFM4                  No, found significance     U034\n         LA    R6,1(,R6)                Yes, skip it               U034\n         B     RTCDFM3                  Loop                       U034\nRTCDFM4  LA    R7,PWORK+8               -> right end of number     U034\n         CLI   0(R7),X'40'              Ending separator?          U034\n         BH    RTCDFM5                  No, length is right        U034\n         BCTR  R7,0                     Yes, shorten field         U034\nRTCDFM5  SR    R7,R6                    Length -1 for EX           U034\n         LA    R9,1(R7,R4)              -> end of output data +1   U035\n         LA    R15,LC@ROUT+L'LC@ROUT    -> end of area +1          U034\n         CR    R9,R15                   Will data fit?             U035\n         BH    RTCDXX                   No, blow out now           U034\n         EX    R7,RTCDMVC               Yes, move data             U034\n         LR    R4,R9                    -> end of data +1          U035\nRTCDFM6  MVC   PWORK+4(4),PWORK         Save number for later      U034\n         NI    FLAG,255-F@NILRC         Indicate rtcds present     U034\n         BR    R14                      Return to caller           U034\n         SPACE 1                                                   U034\nRTCDMVC  MVC   0(0,R4),0(R6)            << executed >>             U034\n         SPACE 2                                                   U034\nRTCD4    BAL   R14,RTCDFMR              Format end of range        U034\n         SPACE 1                                                   U034\nRTCDX    TM    FLAG,F@NILRC             Found any yet?             U034\n         BO    RTCDX1                   No, indicate none          U034\n         TM    FLAG,F@ALLRC             All rtcds set?             U034\n         BO    RTCDX2                   Yes, indicate all          U034\n         BAL   R14,RTCDFMX              Flush format hold area     U034\n         B     RTCDXX                   Exit now                   U034\n         SPACE 1                                                   U034\nRTCDX1   MVC   LC@ROUT(4),=C'NONE'      Indicate no rtcds set      U035\n         B     RTCDXX                   Exit now                   U034\n         SPACE 1                                                   U034\nRTCDX2   MVC   LC@ROUT(3),=C'ALL'       Indicate all rtcds set     U034\n         SPACE 1                                                   U034\nRTCDXX   LM    R14,R12,12(R13)          Restore program registers  U034\n*---  NEXT CONSOLE\n         BXLE  R3,R4,*+8   >========+   GET THE NEXT ENTRY         U018\n         B     *+8    >========+    |   GET OUT IF ALL DONE        U018\n         BCT   R7,LC$01        | <==+   LOOP UNTIL FULL            U018\n         B     DISPLAY      <==+        GO DISPLAY MY HANDIWORK    U018\n         SPACE 1\n         DROPX R8                                                  U018\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n* A CONSOLE HAS BEEN FOUND COPY THE SCREEN AND DISPLAY IT FOR THE USER*\n*                                                                     *\n*        R3 ->  UCME                                                  *\n*        R6 ->  TDCM                                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         USNGX DCMSTRT,R6                                          U033\nGOTUCM   NI    FLAG,255-LARGCON-DISPBOT  Reset flags               U028\n         LH    R1,DCMMSGAL              NBR OF LINES IN MSG AREA   U028\n         SH    R1,=H'20'                NUMBER OF EXCESS LINES     U028\n         BNP   EXECUTE                  SHORT SCREEN, DONE HERE    U028\n         OI    FLAG,LARGCON             CONSOLE HAS LARGE SCREEN   U028\n         MH    R1,DCMCORLN              Offset to bottom of screen U033\n         A     R1,DCMASCRN              -> BOTTOM OF SCREEN        U028\n         ST    R1,ADRBOT                SAVE FOR LATER             U028\n         LH    R1,=H'20'                OFFSET TO LINE 21          U028\n         MH    R1,DCMCORLN              Offset to line 21          U033\n         A     R1,DCMASCRN              -> LINE 21                 U028\n         ST    R1,ADRL21                SAVE FOR LATER             U028\n         B     EXECUTE                  FIRE IT UP                 U028\n         SPACE 2\nCHKATTN  TM    FLAG,FLASH               IN AUTO UPDATE MODE?       U008\n         BZ    DCMSEXIT                 NO - TIME TO LEAVE         U008\n         NI    FLAG,255-FLASH           RESET AUTO UPDATE MODE     U009\n         SPACE 2\nREFRESH  TM    FLAG,MENUFLAG            RETURN TO MENU?            U010\n         BO    DISPMENU                 YES - GO TO IT             U010\n         ICM   R3,B'1111',ADDRUCM       -> DESIRED UCME            U016\n         BZ    DISPLAY                  NOT SET, TAKE SHORTCUT     U028\n         L     R6,ADDRTDCM              -> Correct console TDCM    U035\n         L     R1,UCMUCB                -> UCB                     U018\n         MVC   UNITADDR,13(R1)          GET DEVICE ADDRESS         U018\n         MVC   UNITCONS,BLANKS          ASSUME NOT MASTER CONSOLE  U018\n         TM    UCMDISP1,UCMDISPA        MSTCONS?                   U018\n         BNO   *+10                     NO - SKIP                  U018\n         MVC   UNITCONS,=C'*MSTCONS*'   YES - SHOW WE'RE SMART     U018\n         BAL   R9,OPENCONS              ACCESS CONSOLE BUFFERS     U028\n         L     R7,DCMASCRN              -> FIRST INPUT LINE        U017\n         LA    R8,SCREEN                -> OUTPUT AREA             U028\n         LH    R2,DCMMSGAL              NBR OF LINES IN MSG AREA   U028\n         TM    FLAG,LARGCON             TOO BIG FOR ME?  (3278-2)  U028\n         BZ    SIZEOK                   NO - CONTINUE              U028\n         LH    R2,=H'20'                YES - USE MY MAX           U028\n         TM    FLAG,FLASH               IN AUTO UPDATE MODE?       U017\n         BNO   SIZEOK                   NO - LEAVE HIM WHEREVER... U017\n         NI    FLAG,255-DISPBOT         ASSUME TOP OF SCREEN       U017\n         L     R7,ADRL21                -> LINE 21 OF SCREEN       U028\n         LA    R1,78                    LENGTH OF DATA IN LINE     U028\n         BAL   R9,GETCONS               GET LINE FROM CONSOLE      U028\n         CLC   0(78,R8),BLANKS          ANYTHING ON BOTTOM?        U028\n         L     R7,DCMASCRN              -> TOP OF SCREEN           U028\n         BE    SIZEOK                   NO - STAY ON TOP           U017\n         OI    FLAG,DISPBOT             YES - GO TO BOTTOM         U017\n         SPACE 1\nSIZEOK   TM    FLAG,DISPBOT             BOTTOM OF SCREEN?          U014\n         BNO   *+8                      NO - SKIP                  U014\n         L     R7,ADRBOT                -> BOTTOM OF SCREEN        U028\n         LA    R3,SCR1+6                -> FIRST LINE DESCRIPTOR   U028\nGOT1     EQU   *\n         LA    R1,78                    LENGTH OF DATA IN LINE     U028\n         BAL   R9,GETCONS               GET LINE FROM CONSOLE      U028\n         TR    0(78,R8),BLANKTAB        GET IT READABLE            U006\n         MVI   1(R3),X'F4'              MAKE IT LOW INTENSITY      U028\n         CLI   3(R8),C'*'               SYSTEM ACTION MESSAGE?     U006\n         BNE   *+8                      NO - LEAVE AS IS           U006\n         MVI   1(R3),X'F8'              YES - MAKE IT BRIGHT       U028\n         CLI   3(R8),C'@'               USER ACTION MESSAGE?       U006\n         BNE   *+8                      NO - LEAVE AS IS           U006\n         MVI   1(R3),X'F8'              YES - MAKE IT BRIGHT       U028\n         LA    R8,79(,R8)               OUR SIZE\n         AH    R7,DCMCORLN              Theirs                     U033\n         LA    R3,8(,R3)                -> NEXT LINE DESCRIPTOR    U028\n         BCT   R2,GOT1                  GET EM AL                  U028\n         L     R8,DOMTABA               -> dom table               U037\n         LA    R1,DOMTABL               l'dom table                U037\n         L     R7,DCMDOMPK              -> dom table (+x'20')      U037\n         BAL   R9,GETCONS               copy table over            U037\n         BAL   R9,CLOSCONS              DROP CONSOLE BUFFERS       U028\n         MVI   SCR1+6+20*8+1,X'F8'      MAKE NEXT LINE BRIGHT      U018\n         MVC   ML@SIM,=C'Simulated Console:  '  Our instr line     U036\n         MVC   ML@RANGE,BLANKS          CLEAR RANGE INDICATOR      U036\n         MVC   ML@TYPE,=C'3270'         assume 3270                U036\n         TM    FLAG,LARGCON             STANDARD SIZE SCREEN?      U028\n         BZ    NOTLARG                  YES - SKIP SPECIAL CODE    U028\n         CLI   DCMIONDX,X'04'           IS IT A 3066 ?             U028\n         BNE   *+10                     NO, SKIP 3066 DEVICE TYPE  U028\n         MVC   ML@TYPE,=C'3066'         2250 REINCARNATED          U036\n         MVC   ML@RANGE,=C'(Lines 01-20)'                          U036\n         TM    FLAG,DISPBOT             TOP OR BOTTOM?             U014\n         BZ    NOTLARG                  TOP                        U014\n         LH    R1,DCMMSGAL              NBR OF LINES IN MSG AREA   U028\n         CVD   R1,DECWORK3              ENDING LINE IN DECIMAL     U028\n         OI    DECWORK3+7,X'0F'         ELIMINATE PACKED SIGN      U028\n         UNPK  ML@RBOT,DECWORK3         FORMAT END LINE INTO MSG   U028\n         SH    R1,=Y(20-1)              GET FIRST LINE NUMBER      U028\n         CVD   R1,DECWORK3              STARTING LINE IN DECIMAL   U028\n         OI    DECWORK3+7,X'0F'         ELIMINATE PACKED SIGN      U028\n         UNPK  ML@RTOP,DECWORK3         FORMAT START LINE INTO MSG U028\n         SPACE 2\nNOTLARG  MVC   ML@SYSID,SYSID           SYSTEM ID                  U036\n         MVC   ML@ADDR,UNITADDR         CONSOLE ADDRESS            U036\n         MVC   ML@MSTR,UNITCONS         '*MSTCONS*' OR ' '         U031\n*---  CONSOLE LOCATION -- TABLE MUST BE UPDATED FOR YOUR INSTALLATION\n         L     R1,=A(NAMES-LOCTABLL)    -> name loc table          U036\n         BAL   R14,LOC$01               SET LOOP ADDR, SKIP FIRST  U036\n         LA    R1,LOCTABLL(,R1)         -> next table entry        U036\n         CLC   0(3,R1),BLANKS           END OF TABLE?              U036\n         BE    LOC$02                   YES - LEAVE IT BLANK       U036\nLOC$01   CLC   UNITADDR,0(R1)           IS THIS THE ENTRY?         U036\n         BNER  R14                      NO - TRY NEXT              U036\n         MVC   ML@LOC,3(R1)             Yes, get description       U036\nLOC$02   MVC   MODELINE(18),=C'IEE163I MODE= DCMS'                 U020\n         TM    FLAG,QUIET               IN QUIET MODE?             U024\n         BNO   *+10                     NO - SKIP                  U024\n         MVC   MODELINE+18(6),=C'/QUIET'  YES - REMIND HIM         U024\n         MVC   MODELINE+30(79-30),DISPCMD  SHOW HIM LAST COMMAND   U020\n         SPACE 2\nDISPLAY  BAL   R9,WRITE                 DO IT JACK !!!\n         SPACE 1\n         PFKEY K1=HELP,K2=SETMODE,K3=DCMSEXIT,K5=EXEMENU,          U009$\n               K6=REPROMPT,K7=TOP,K8=BOTTOM,K9=SELPFK,             U028$\n               K10=LISTCONS,K12=DCMSEXIT,                          U024$\n               DEF=REFRESH,ATTN=CHKATTN,ENTER=EXECUTE              U012\n         SPACE 2\nEXEMENUX MVC   CMDBUF,BLANKS            KILL THE \"MENU\" SUBCOMMAND U024\nEXEMENU  OI    FLAG,MENUFLAG            DISPLAY MENU NEXT TIME     U016\n         SPACE 1                                                   U001\nEXECUTE  CLC   CMDBUF,BLANKS            NULL INPUT ?               U016\n         BE    REFRESH\n         CLI   CMDBUF,C'/'              MVS COMMAND?               U024\n         BE    SLASH                                               U024\n         CLI   CMDBUF,C'E'              WANT OUT?                  U024\n         BE    DCMSEXIT                                            U001\n         CLI   CMDBUF,C'A'              START AUTO UPDATE?         U024\n         BE    SETMODEX                                            U024\n         CLI   CMDBUF,C'H'              HELP?                      U024\n         BE    HELP                                                U024\n         CLI   CMDBUF,C'?'              HELP?                      U024\n         BE    HELP                                                U024\n         CLI   CMDBUF,C'M'              MENU?                      U024\n         BE    EXEMENUX                                            U024\n         CLI   CMDBUF,C'U'              UP?                        U024\n         BE    TOP                                                 U024\n         CLI   CMDBUF,C'D'              DOWN?                      U024\n         BE    BOTTOM                                              U024\n         CLI   CMDBUF,C'S'              SELECT?                    U028\n         BE    SELECT                                              U028\n         CLI   CMDBUF,C'L'              LIST CONSOLES?             U024\n         BE    LISTCONS                                            U024\n         CLI   CMDBUF,C'K'              clear line?                U037\n         BE    DOM                                                 U037\n         CLI   CMDBUF,X'80'             SPECIAL CHARACTER?         U024\n         BL    JESCMD                   YES - MUST BE JES CMD      U024\n         CLC   =C'CONS',CMDBUF          CHANGE \"SNEAKY MODE\"?      U016\n         BE    SNEAKY                   YES - GO DO IT             U012\n         MVC   ERRMSG,BLANKS                                       U024\n         MVC   ERRMSG(61),=C'*** INVALID SUBCOMMAND (IF MVS COMMAND, PR$\n               ECEDE WITH \"/\") ***'                                U024\n         MVC   ENTRLNE,ERRMSG                                      U024\n         B     REFRESH                                             U024\n         SPACE 2\nJESCMD   MVC   SAVECMD,CMDBUF           SAVE INPUT COMMAND         U009\n         MVC   DISPCMD,CMDBUF           SAVE COMMAND FOR DISPLAY   U013\n         B     EXECUTE2                 SKIP CHECK FOR \"REPLY\"     U024\n         SPACE 2\nSLASH    MVC   ENTRLNE,CMDBUF           COPY FOR REFORMAT          U028\n         MVI   ENTRLNE,C' '             PLUG THE SLASH             U028\n         LA    R1,ENTRLNE               -> COPY                    U028\n         BAL   R9,GETCMD                SCAN FOR THE MVS COMMAND   U024\n         CLI   CMDBUF,C' '              any command entered?       U039\n         BE    REFRESH                  no, just refresh           U039\n         CLC   =C'QUIESCE',CMDBUF       DANGEROUS SYSTEM COMMAND?  U024\n         BE    QUIESCE                  YES - DISALLOW             U024\n         MVI   SAVECMD,C'/'             INDICATE MVS COMMAND       U028\n         MVC   SAVECMD+1(L'CMDBUF-1),CMDBUF  SAVE FOR REPROMPT     U028\n         MVC   DISPCMD,CMDBUF           SHOW WHAT WE WILL EXECUTE  U024\n         SPACE 1\n*---  CHECK FOR \"REPLY\" COMMAND\n         LA    R1,DISPCMD               -> SAVED COMMAND           U013\n         LA    R0,L'DISPCMD             LENGTH OF SAVED COMMAND    U013\n         CLC   =C'R ',0(R1)             'R' COMMAND?               U013\n         BNE   RL02                     NO, TEST ANOTHER           U013\n         LA    R1,2(,R1)                SKIP COMMAND               U013\n         SH    R0,=H'2'                 REDUCE LENGTH              U013\n         B     RL03                     AND GO SKIP BLANKS         U013\nRL02     CLC   =C'REPLY ',0(R1)         'REPLY' COMMAND?           U013\n         BNE   RL05                     NO, LOOK FOR NUMBER        U013\n         LA    R1,6(,R1)                SKIP COMMAND               U013\n         SH    R0,=H'6'                 REDUCE LENGTH              U013\nRL03     LTR   R0,R0                    ANY MORE DATA?             U013\n         BNP   EXECUTE2                 NO, NOT A REPLY            U013\nRL04     CLI   0(R1),C' '               LEADING BLANK?             U013\n         BNE   RL05                     NO, LOOK FOR NUMBER        U013\n         LA    R1,1(,R1)                INCREMENT POINTER          U013\n         BCT   R0,RL04                  AND LOOP                   U013\nRL05     LTR   R0,R0                    ANY MORE DATA?             U013\n         BNP   EXECUTE2                 NO, NOT A REPLY            U024\n         TM    0(R1),X'F0'              NUMERIC ZONE?              U013\n         BNO   EXECUTE2                 NO, CAN'T BE REPLY         U024\n         MVI   REPLID,C'0'              ASSUME ONLY ONE DIGIT      U013\n         MVC   REPLID+1(1),0(R1)        SAVE REPLID FIRST DIGIT    U013\n         CH    R0,=H'2'                 ROOM FOR SECOND DIGIT?     U013\n         BL    RL06                     NO, USE ONLY ONE DIGIT     U013\n         TM    1(R1),X'F0'              NUMERIC ZONE?              U013\n         BNO   RL06                     NO, USE ONLY ONE DIGIT     U013\n         MVC   REPLID,0(R1)             SAVE BOTH DIGITS           U013\nRL06     MVC   DISPCMD,BLANKS           CLEAR SAVED COMMAND        U013\n         MVC   DISPCMD(6),=C'REPLY '    FORMAT REPLY MESSAGE       U013\n         MVC   DISPCMD+6(2),REPLID      MOVE IN REPLY NUMBER       U013\n         SPACE 2\nEXECUTE2 LH    R1,CMDNUM                GET CURRENT CMD NUMBER     U032\n         LA    R1,1(,R1)                INCREMENT                  U032\n         STH   R1,CMDNUM                SAVE UPDATED NUMBER        U032\n         STH   R1,RETNUM                SET NEXT CMD NBR TO RET    U032\n         N     R1,=F'15'                MAKE IT MODULO(STACKSIZE)  U032\n         MH    R1,=Y(L'CMDBUF)          GET OFFSET IN STACK        U032\n         AL    R1,STACKA                -> COMMAND TO RETRIEVE     U032\n         MVC   0(L'CMDBUF,R1),SAVECMD   SAVE CMD ON STACK          U032\n         TM    FLAG,QUIET               SUPPRESS WTO?              U012\n         BO    SKIPWTO                  YES                        U012\n         MVC   WTO+4+16(79),DISPCMD     MOVE COMMAND TO WTO        U013\n         SR    R0,R0                    CLEAR FOR IC               U012\n         IC    R0,XUCMID                GET CONSOLE ID             U012\n         WTO   MF=(E,WTO)               NO - SO TELL THE OPERATOR  U012\n         SPACE 2\nSKIPWTO  BAL   R9,KEYZERO               SO SVC34 WILL LIKE ME      U011\n         SPACE 1\n         SR    R15,R15                  PREPARE R15 BECAUSE...     U008\n         BCTR  R15,0                    ...SVC34 USUALLY DOESN'T...U008\n*                                       ...SET R15 IF IT DOESN'T...U008\n*                                       ...EXECUTE THE COMMAND     U008\n         LA    R1,CMND                  POINT TO COMMAND RDW\n         XR    R0,R0\n         IC    R0,XUCMID                OUR MAN IN THE COMM TASK\n         SVC   34                       FIRE HIM THRU\n         LR    R2,R15                   SAVE RETURN CODE\n         SPACE 1\n         BAL   R9,KEYNZERO              I HOPE SVC34 WAS HAPPY     U011\n*\n         LTR   R15,R2                   DID IT WORK?\n         BZ    REFRESH                  YES - REFRESH SCREEN\n         SPACE  1\n***\n* SEE IF  WE ARE HERE BY A PREVIOUS MARRIAGE ...\n*\n         SPACE 1\n         MVC   ERRMSG,BLANKS            CLEAR THE AREA             U009\n         MVC   ERRMSG(34),=C'*** ERROR *** SVC 34 RETURN CODE ='   U009\n         ST    R15,DOUBLE               SET DOWN RETURN CODE       U012\n         UNPK  ERRMSG+35(8+1),DOUBLE(4+1)                          U012\n         TR    ERRMSG+35(8),HEXTAB      MAKE IT PRINTABLE          U009\n         MVI   ERRMSG+35+8,C' '         FIX FLIP BYTE              U009\n         MVC   ENTRLNE,ERRMSG           COPY ERROR MSG TO SCREEN   U009\n         NI    FLAG,255-FLASH           INHIBIT AUTO UPDATING      U009\n         B     REFRESH                  REFRESH THE SCREEN         U009\n         SPACE 3\nSETMODEX MVC   CMDBUF,BLANKS            KILL THE \"AUTO\" SUBCOMMAND U024\n         NI    FLAG,255-MENUFLAG        RESET MENU FLAG            U024\nSETMODE  OI    FLAG,FLASH               START AUTO UPDATING        U009\n         B     EXECUTE                  EXECUTE OPR CMD, IF ANY    U009\n         SPACE 3\nSNEAKY   MVC   ERRMSG,BLANKS            CLEAR THE AREA             U012\n         MVC   ERRMSG(24),=C'=== QUIET MODE RESET ==='             U012\n         NI    FLAG,255-QUIET           ASSUME RESET               U012\n         CLC   =C'=QUIET',CMDBUF+4      WANT IT SET?               U016\n         BNE   SNEAKY2                  NO - SKIP                  U012\n         OI    FLAG,QUIET               YES - SET IT               U012\n         MVC   ERRMSG+15(9),ERRMSG+17   'QUIET MODE SET'           U012\nSNEAKY2  MVC   ENTRLNE,ERRMSG           COPY ERROR MSG TO SCREEN   U012\n         B     REFRESH                  REFRESH THE SCREEN         U012\n         SPACE 3\nQUIESCE  MVC   ERRMSG,BLANKS            CLEAR THE AREA             U016\n         MVC   ERRMSG(29),=C'YOU CAN''T \"QUIESCE\" FROM HERE'       U016\n         MVC   ENTRLNE,ERRMSG           COPY ERROR MSG TO SCREEN   U016\n         B     REFRESH                  REFRESH THE SCREEN         U016\n         SPACE 3\n*EPROMPT MVC   ENTRLNE,SAVECMD          MOVE BACK HIS LAST COMMAND U009\nREPROMPT LH    R1,RETNUM                GET CMD NUMBER TO RETRIEVE U032\n         LR    R0,R1                    COPY TO ADJUST             U032\n         SH    R0,=H'1'                 DECREMENT FOR NEXT TIME    U032\n         BNM   *+8                      SKIP IF NOT BACK TO START  U032\n         LH    R0,CMDNUM                ELSE RESET BACK TO TOP     U032\n         STH   R0,RETNUM                SAVE NEXT CMD NBR TO RET   U032\n         N     R1,=F'15'                MAKE IT MODULO(STACKSIZE)  U032\n         MH    R1,=Y(L'CMDBUF)          GET OFFSET IN STACK        U032\n         AL    R1,STACKA                -> COMMAND TO RETRIEVE     U032\n         MVC   ENTRLNE,0(R1)            MOVE BACK DESIRED COMMAND  U032\n         B     REFRESH                  AND REFRESH THE SCREEN     U009\n         SPACE 3\nTOP      NI    FLAG,255-DISPBOT         TURN OFF BOTTOM FLAG       U014\n         B     REFRESH                  DO IT AGAIN                U014\n         SPACE 3                                                   U014\nBOTTOM   TM    FLAG,LARGCON             IS THIS A LARGE CONSOLE?   U014\n         BNO   REFRESH                  NO - IGNORE COMMAND        U014\n         OI    FLAG,DISPBOT             TURN ON BOTTOM FLAG        U014\n         B     REFRESH                  DO IT AGAIN                U014\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Delete line on screen                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nDOM      TM    FLAG,DISPBOT             bottom of large screen?    U037\n         BO    DOMERR1                  yes, invalid               U037\n         LA    R1,CMDBUF                -> command line            U037\n         LA    R0,L'CMDBUF              len to check               U037\nDOM01    CLI   0(R1),C' '               blank?                     U037\n         BE    DOM02                    yes, end of command        U037\n         LA    R1,1(,R1)                -> next char               U037\n         BCT   R0,DOM01                 check em all               U037\n         MVC   CMDBUF,BLANKS            clear                      U037\n         B     GETMAST                  and try again              U037\nDOM02    CLI   0(R1),C' '               is it blank?               U037\n         BNE   DOM03                    no, start of operand       U037\n         LA    R1,1(,R1)                -> next char               U037\n         BCT   R0,DOM02                 and loop                   U037\n         MVC   CMDBUF,BLANKS            clear                      U037\n         B     GETMAST                  and try again              U037\n         SPACE 1\nDOM03    CLC   =C'E,',0(R1)             \"k e,#\"? (pseudo mvs)??    U037\n         BNE   DOM04                    no, skip update            U037\n         LA    R1,2(,R1)                skip past it               U037\n         SH    R0,=H'2'                 less data len              U037\n         BNP   DOMERR2                  if none, then exit         U037\nDOM04    XR    R14,R14                  clear                      U037\n         SR    R15,R15                  both regs                  U037\nDOM05    OI    0(R1),C' '               force to upper case        U037\n         CLI   0(R1),C' '               is it blank?               U037\n         BE    DOM06                    yes, then done             U037\n         CLI   0(R1),C'0'               is                         U037\n         BL    DOMERR2                     it                      U037\n         CLI   0(R1),C'9'                     numeric              U037\n         BH    DOMERR2                                ???          U037\n         NI    0(R1),X'0F'              just numeric part          U037\n         IC    R15,0(R1)                get number                 U037\n         MH    R14,=H'10'               shift it                   U037\n         AR    R14,R15                  and get next               U037\n         LA    R1,1(,R1)                get next char              U037\n         BCT   R0,DOM05                 and test it                U037\n         SPACE 1\nDOM06    CH    R14,=H'20'               over max entry?            U037\n         BH    DOMERR2                  yes, flag as error         U037\n         SH    R14,=H'1'                table origin 0             U037\n         BL    DOMERR2                  if below, flag it          U037\n          AIF   (&@@SPLVL LT 220).SKIP006                          U037\n         CLI   SPLVL,SP220              at sp 220?                 U037\n         BE    DOM07                    yes, then symbols ok       U037\n         MH    R14,=H'8'                len of entries at 1.3.5    U037\n         B     DOM08                    and continue               U037\n.SKIP006  ANOP ,                                                   U037\nDOM07    MH    R14,=Y(L'DOMTAB)         * len of entry             U037\nDOM08    AL    R14,DOMTABA              -> our entry               U037\n         XR    R1,R1                    clear                      U037\n         ICM   R1,B'0111',5(R14)        get dom-id                 U037\n         DOM   MSG=(R1)                 delete that entry          U037\n         B     REFRESH                  and refresh screen         U037\n         SPACE 1\nDOMERR1  MVC   ERRMSG,BLANKS            clear error msg            U037\n         MVC   ERRMSG(25),=C'Invalid for large screens'            U037\n         MVC   ENTRLNE,ERRMSG           COPY TO SCREEN             U037\n         B     REFRESH                                             U037\nDOMERR2  MVC   ERRMSG,BLANKS            clear error msg            U037\n         MVC   ERRMSG(22),=C'Valid entries are 1-20'               U037\n         MVC   ENTRLNE,ERRMSG           COPY TO SCREEN             U037\n         B     REFRESH                                             U037\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*  SELECT DIFFERENT CONSOLE ADDRESS                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nSELECT   LA    R1,CMDBUF                -> INPUT DATA              U016\n         LA    R0,L'CMDBUF              MAXIMUM DATA LENGTH        U016\nSEL01    CLI   0(R1),C' '               FOUND END OF COMMAND YET?  U028\n         BE    SEL02                    YES, GO FIND ADDRESS       U028\n         LA    R1,1(,R1)                NO, -> NEXT CHARACTER      U028\n         BCT   R0,SEL01                 DECREMENT LENGTH AND LOOP  U028\n         MVC   CMDBUF,BLANKS            AVOID UNFORTUNATE LOOP     U028\n         B     GETMAST                  WHO KNOWS WHAT HAPPENED?   U028\n         SPACE 1\nSELPFK   LA    R1,CMDBUF                -> INPUT DATA              U028\n         LA    R0,L'CMDBUF              MAXIMUM DATA LENGTH        U028\nSEL02    CLI   0(R1),C' '               FOUND REQUEST DATA YET?    U028\n         BNE   SEL03                    YES, GO FIND ADDRESS       U028\n         LA    R1,1(,R1)                NO, -> NEXT CHARACTER      U028\n         BCT   R0,SEL02                 DECREMENT LENGTH AND LOOP  U028\n         MVC   CMDBUF,BLANKS            AVOID UNFORTUNATE LOOP     U028\n         B     GETMAST                  WHO KNOWS WHAT HAPPENED?   U028\n         SPACE 1\nSEL03    XR    R14,R14                  CLEAR WORKING REGISTER     U028\nSEL04    OI    0(R1),X'40'              FORCE UPPER CASE           U028\n         CLI   0(R1),C' '               ENDING BLANK?              U028\n         BE    SEL06                    YES, END OF DATA           U028\n         ICM   R15,B'1000',0(R1)        GET WORKING CHARACTER      U028\n         SLL   R15,4                    SHIFT OFF SIGN NYBBLE      U028\n         SLDL  R14,4                    SHIFT NUMERIC INTO VALUE   U028\n         CLI   0(R1),C'9'               TOO HIGH FOR NUM?          U028\n         BH    SELERR                   YES, BAD VALUE             U028\n         CLI   0(R1),C'0'               IS IT 0-9?                 U028\n         BNL   SEL05                    YES, USE IT                U028\n         CLI   0(R1),C'F'               IS IT TOO HIGH FOR A-F?    U028\n         BH    SELERR                   YES, BAD VALUE             U028\n         CLI   0(R1),C'A'               IS IT A-F?                 U028\n         BL    SELERR                   NO, BAD VALUE              U028\n         LA    R14,9(,R14)              YES, ADJUST VALUE          U028\nSEL05    LA    R1,1(,R1)                INCREMENT POINTER          U028\n         BCT   R0,SEL04                 REDUCE COUNT AND LOOP      U028\n         SPACE 1\nSEL06    ST    R14,HEXWORK1             STORE FOR CONVERSION       U028\n         BAL   R14,@HEX                 CONVERT TO PRINTABLE HEX   U028\n         CLC   HEXWORK2(5),=5C'0'       PROPER LEADING ZEROS?      U028\n         BNE   SELERR                   NO, BAD VALUE              U028\n         MVC   UNITADDR,HEXWORK2+5      INDICATE CONSOLE ADDRESS   U028\n         MVC   CMDBUF,BLANKS            AVOID UNFORTUNATE LOOP     U028\n         B     SEARCH                   AND GO TRY TO GET IT\n         SPACE 3                                                   U014\n*---------------------------------------------------------------------*\n*                                                                     *\n*  DISPLAY HELP SCREEN                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nHELP     LA    R14,SCREEN               -> DESTINATION             U008\n         LA    R15,20*79                LENGTH                     U008\n         L     R0,=A(HELPIMG)           -> HELP IMAGE              U008\n         LA    R1,HELPIMGL              LENGTH                     U008\n         ICM   R1,B'1000',BLANKS        GET THE PAD CHAR           U008\n         MVCL  R14,R0                   MOVE IT IN                 U008\n         SPACE 1                                                   U008\n         LA    R15,SCR1+6               -> FIRST ATTRIBUTE AREA    U008\n         MVI   1(R15),X'F8'             MAKE TITLE LINE BRIGHT     U008\n         LA    R0,20                    NUMBER OF LINES MORE       U019\n         LA    R15,8(,R15)   <===+      -> NEXT ATTRIBUTE AREA     U008\n         MVI   1(R15),X'F4'      |      MAKE IT LOW INTENSITY      U008\n         BCT   R0,*-8     >======+      DO THE WHOLE THING         U008\n         B     DISPLAY                  GO REWRITE THE SCREEN      U016\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*  DISPLAY MENU OF CANNED COMMANDS                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nDISPMENU LA    R5,DCMSWORK+4095         NEED MORE BASE REGISTER    U012\n         USNGX DCMSWORK+4095,R5         TEMPORARILY                U012\n         MVC   ENTRLNE2,ENTRLNE         GET ERROR MESSAGE, IF ANY  U010\n         MVC   ENTRLNE,BLANKS                                      U016\n         MVC   SHOWCMD2+30(79-30),DISPCMD   AND THE LAST COMMAND   U016\n         DROPX R5                                                  U012\n         NI    FLAG,255-MENUFLAG-FLASH  RESET FLAGS                U010\n         NI    IOCBFLGD,255-IOCBDYON-IOCBDFRC                      U009\n         SPACE 1\n         L     R15,MENUSAVA             -> save area               U037\n         TRMIO IOCB,FORMAT=MENUSCR,IMAGE=(R15)                     U037\n         SPACE 2\n         PFKEY K1=HELP,K2=MENUPF2,K3=DCMSEXIT,K5=MENUMENU,         U008$\n               K6=REPROMPT,K9=SELECT,K10=LISTCONS,K12=DCMSEXIT,    U024$\n               DEF=DISPMENU,ATTN=CHKATTN,ENTER=MENU$GO             U012\n         SPACE 3                                                   U009\nMENUPF2  OI    FLAG,FLASH               SET AUTO UPDATE MODE       U009\n         B     MENU$GO                  CONTINUE                   U010\n         SPACE 2\nMENUMENU OI    FLAG,MENUFLAG            SET RETURN INDICATOR       U010\n         SPACE 2\nMENU$GO  LA    R5,DCMSWORK+4095         NEED MORE BASE REGISTER    U012\n         USNGX DCMSWORK+4095,R5         TEMPORARILY                U012\n         LA    R1,ENTRLNE2              -> INPUT DATA              U016\n         BAL   R9,GETCMD                MOVE DATA TO CMD BUF       U016\n         CLC   CMDBUF,BLANKS            ANY COMMAND HERE?          U016\n         BNE   EXECUTE                  YES - GO PROCESS           U016\n         LH    R1,IOCBCUR               GET CURSOR OFFSET          U009\n         LTR   R1,R1                    ANY?                       U009\n         BNP   REFRESH                  NO - BACK TO NORMAL CODE   U009\n         SR    R0,R0                    CLEAR FOR DIVIDE           U009\n         CH    R1,=Y(MENUBIG-MENUSAVE)  CURSOR AT BIG COMMAND?     U013\n         BNL   MENU01                   YES, GO USE THAT LOGIC     U013\n         D     R1-1,=F'39'              COMPUTE COMMAND #          U009\n         M     R1-1,=F'39'              GET OFFSET TO START OF CMD U009\n         LA    R15,MENUSAVE(R1)         -> CORRECT COMMAND         U009\n         MVC   ENTRLNE2(39),0(R15)      MOVE IN THE COMMAND        U016\n         B     MENU02                   GO PROCESS                 U016\n         SPACE 1\nMENU01   SH    R1,=Y(MENUBIG-MENUSAVE)  SET OFFSET TO BIG BASE     U013\n         CH    R1,=Y(ENTRLNE2-MENUBIG)  CURSOR GONE TOO FAR?       U013\n         BNL   EXECUTE                  YES, GO PROCESS            U013\n         D     R1-1,=F'79'              COMPUTE COMMAND #          U013\n         M     R1-1,=F'79'              GET OFFSET TO START OF CMD U013\n         LA    R15,MENUBIG(R1)          -> CORRECT COMMAND         U013\n         MVC   ENTRLNE2(79),0(R15)      MOVE IN THE COMMAND        U016\n         SPACE 1\nMENU02   LA    R1,ENTRLNE2              -> INPUT DATA              U016\n         BAL   R9,GETCMD                MOVE TO CMDBUF             U016\n         DROPX R5                                                  U012\n         B     EXECUTE                  GO PROCESS COMMAND         U016\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*  COPY PAGEABLE DCM (TDCM) TO ACCESSABLE STORAGE.                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nGETTDCM  ST    R9,SAVER9                PRESERVE RETURN REGISTER   U025\n         TM    UCMATR,UCMUF             Is it active?              U033\n         BZ    GETTDCM8                 No - leave without TDCM    U033\n         ICM   R6,B'1111',UCMXB         -> Resident DCM (RDCM)     U033\n         BZ    GETTDCM9                 None, not graphics         U033\n         BAL   R9,OPENCONS              GET ACCESS TO CONSOLE      U028\n          AIF   (&@@SPLVL LT 220).SKIP007 Skip if SP22 unsupported U033\n         CLI   SPLVL,SP220              Running SP 2.2.0?          U033\n         BL    GETTDCM2                 No, use local ASN          U033\n         LA    R9,DOUBLE                Destination                U033\n         LA    R14,4                    Length of address          U033\n         SLR   R15,R15                  Move in key zero           U033\n         MVCP  0(R14,R9),DCMADTRN-DCMTSRT(R6),R15  Addr of TDCM    U033\n         ICM   R6,B'1111',DOUBLE        -> Pageable DCM (TDCM)     U033\n         B     GETTDCM3                 Go move the data           U033\nGETTDCM2 DC    0H'0'                                               U033\n.SKIP007  ANOP                                                     U033\n         ICM   R6,B'1111',DCMADTRN-DCMTSRT(R6)  -> TDCM            U033\nGETTDCM3 BZ    GETTDCM5                 None, bad news             U033\n         LR    R7,R6                    -> SOURCE DATA             U028\n         LA    R8,COPYTDCM              -> DESTINATION DATA        U028\n         LA    R1,DCMEND-DCMSTRT        LENGTH TO MOVE             U028\n         BAL   R9,GETCONS               COPY CONSOLE DATA          U028\nGETTDCM5 BAL   R9,CLOSCONS              Drop access to console     U028\n         LTR   R6,R6                    Did it work (even close)?  U033\n         BZ    GETTDCM9                 No, just leave             U033\n         LA    R6,COPYTDCM              AND FAKE THE POINTER       U025\n         MVC   XUCMID,UCMID             Save this                  U033\n         CLI   DCMIONDX,X'10'           Is it a 3270?              U033\n         BE    GETTDCM9                 Yes - use it               U033\n         CLI   DCMIONDX,X'04'           Is it a 3066?              U033\n         BE    GETTDCM9                 Yes - use it               U033\nGETTDCM8 SLR   R6,R6                    Indicate bad console       U033\nGETTDCM9 L     R9,SAVER9                Restore return register    U033\n         LTR   R6,R6                    Notify caller of result    U033\n         BZR   R9                       Return if no console found U035\n         ST    R3,ADDRUCM               Save good console          U035\n         ST    R6,ADDRTDCM              Save good console          U035\n         BR    R9                       AND RETURN TO MAINLINE     U023\n         DROPX R3,R6                    DCMSTRT, UCMLIST           U033\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  SUBROUTINE TO WRITE THE SCREEN                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nWRITE    ST    R9,SAVER9                SAVE RETURN ADDRESS        U028\n         OI    IOCBFLGC,IOCBCATR        REFRESH ALL ATTR BYTES     U008\n         TM    FLAG,FLASH               IN FLASH (AUTO-UPDATE) MODE?\n         BZ    WRITER                   ...NO, DO WRITE/READ\n*                                       ...YES, DO WRITE/NOREAD\n         OI    IOCBFLGD,IOCBDYON+IOCBDFRC\n*\n         TRMIO IOCB,WRITE,FORMAT=SCR1,IMAGE=SCREEN\n*\n         B     WRITEOK                  CONTINUE                   U018\n         SPACE 2\nWRITER   NI    IOCBFLGD,255-IOCBDYON-IOCBDFRC\n*\n         TRMIO IOCB,FORMAT=SCR1,IMAGE=SCREEN\n         SPACE 2\nWRITEOK  MVC   CMDBUF,BLANKS            CLEAR PREVIOUS COMMAND     U028\n         CLC   ERRMSG,ENTRLNE           ERRMSG COME BACK?          U018\n         BE    WRITECLR                 YES, FORGET INPUT          U028\n         LA    R1,ENTRLNE               -> INPUT AREA              U028\n         BAL   R9,GETCMD                MOVE TO COMMAND BUFFER     U028\nWRITECLR MVC   ERRMSG,BLANKS            CLEAR ERRMSG FOR NEXT TIME U018\n         LA    R1,SCREEN                -> AREA TO CLEAR           U018\n         LA    R0,SCR1                  -> LENGTH                  U018\n         BAL   R14,@CLEAR               CLEAR THE SCREEN BUFFER    U018\n         L     R9,SAVER9                RESTORE RETURN ADDRESS     U028\n         BR    R9                       RETURN TO CALLER\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MOVE INPUT DATA INTO COMMAND BUFFER                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nGETCMD   MVC   CMDBUF,BLANKS            CLEAR COMMAND BUFFER       U016\n         CLC   0(L'ENTRLNE,R1),BLANKS   ANY INPUT AT ALL?          U016\n         BER   R9                       NO, RETURN TO CALLER       U016\n         CLC   ERRMSG,0(R1)             REALLY ERROR MSG HERE?     U016\n         BE    GCMD03                   YES - GO IGNORE IT         U016\n         LA    R14,0(,R1)               -> INPUT AREA              U016\n         LA    R15,L'ENTRLNE            LENGTH OF INPUT AREA       U016\nGCMD01   CLI   0(R14),C' '              LEADING BLANK?             U016\n         BNE   GCMD02                   NO, PROCESS INPUT          U016\n         LA    R14,1(,R14)              UPDATE DATA POINTER        U016\n         BCT   R15,GCMD01               DECREMENT AND LOOP         U016\n         EX    0,*                      SCAN LOGIC ERROR           U016\n         SPACE 1\nGCMD02   BCTR  R15,0                    LENGTH MINUS ONE FOR EX    U016\n         EX    R15,GCMDMVC              MVC CMDBUF(0),0(R14)       U016\nGCMD03   MVC   0(L'ENTRLNE,R1),BLANKS   CLEAR INPUT AREA           U016\n         BR    R9                       RETURN TO CALLER           U016\n         SPACE 2\nGCMDMVC  MVC   CMDBUF(*-*),0(R14)       << EXECUTED >>             U016\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  ACQUIRE ACCESS TO CONSOLE BUFFERS                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nOPENCONS ST    R9,DOUBLE                SAVE ROUTINE LINKAGE       U028\n          AIF   (&@@SPLVL LT 130).SKIP008 Skip if SP13 unsupported U031\n         CLI   SPLVL,SP130              Running SP3?               U033\n         BL    NOTSP3$1                 No - just use KEYZERO      U033\n         BAL   R9,MODESUP               GET SUPERVISOR STATE       U028\n         LH    R14,CONSASID             GET ASID OF 'CONSOLE' A.S. U028\n         SSAR  R14                      SET 'CONSOLE' AS SECONDARY U028\n         B     *+8                      SKIP AROUND KEYZERO        U028\nNOTSP3$1 EQU   *,,C'I'                                             U028\n.SKIP008  ANOP                                                     U028\n         BAL   R9,KEYZERO               DO IT HIS WAY              U028\n         L     R9,DOUBLE                RESTORE ROUTINE LINKAGE    U028\n         BR    R9                       RETURN TO CALLER\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  DROP ACCESS TO CONSOLE BUFFERS                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nCLOSCONS ST    R9,DOUBLE                SAVE ROUTINE LINKAGE       U028\n          AIF   (&@@SPLVL LT 130).SKIP009 Skip if SP13 unsupported U031\n         CLI   SPLVL,SP130              Running SP3?               U033\n         BL    NOTSP3$2                 No - just reset key        U033\n         LH    R14,OLDSASID             GET OLD SECONDARY ASID     U028\n         SSAR  R14                      RESTORE OLD SECONDARY ASID U028\n         BAL   R9,MODEPROB              RESTORE PROBLEM STATE      U028\n         B     *+8                      SKIP AROUND KEYNZERO       U028\nNOTSP3$2 EQU   *,,C'I'                                             U028\n.SKIP009  ANOP                                                     U028\n         BAL   R9,KEYNZERO              DO THE REST MY WAY         U028\n         L     R9,DOUBLE                RESTORE ROUTINE LINKAGE    U028\n         BR    R9                       RETURN TO CALLER           U028\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  GET DATA FROM CONSOLE BUFFERS                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nGETCONS  STM   R7,R8,DOUBLE             SAVE DATA ADDRESSES        U028\n         LR    R0,R1                    LENGTH OF DATA             U028\nGCONS01  DC    0H'0'                                               U028\n          AIF   (&@@SPLVL LT 130).SKIP010 Skip if SP13 unsupported U031\n         CLI   SPLVL,SP130              Running SP3?               U033\n         BL    GCONS02                  No - normal move           U033\n         SR    R14,R14                  CLEAR KEY                  U028\n*  NOTE THAT WE ARE STILL SUPERVISOR, TO GET PAST THE KEY CHECK    U028\n         MVCP  0(R0,R8),0(R7),R14       MOVE CONSOLE BUFFER LINE   U028\n         LA    R15,256                  MAX LENGTH OF MOVE         U028\n         B     GCONS03                  SKIP LOCAL ASN STUFF       U028\nGCONS02  EQU   *,,C'I'                                             U028\n.SKIP010  ANOP                                                     U028\n         LR    R15,R0                   REMAINING LENGTH OF DATA   U028\n         BCTR  R15,0                    LENGTH - 1                 U028\n         N     R15,=XL4'7F'             LENGTH OF MOVE - 1         U028\n         EX    R15,GCONSMVC             MOVE DATA                  U028\n         LA    R15,1(,R15)              ACTUAL LENGTH MOVED        U028\nGCONS03  AR    R7,R15                   NEXT DESTINATION LOCATION  U028\n         AR    R8,R15                   NEXT SOURCE LOCATION       U028\n         SR    R0,R15                   REMAINING LENGTH TO MOVE   U028\n         BP    GCONS01                  MOVE NEXT HUNK             U028\n         LM    R7,R8,DOUBLE             Restore data addresses     U028\n         BR    R9                       RETURN TO CALLER           U028\n         SPACE 1\nGCONSMVC MVC   0(0,R8),0(R7)            << EXECUTED >>             U028\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  SUBROUTINES TO CHANGE STATE                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nKEYZERO  MODESET  KEY=ZERO                                         U011\n         SPACE 1\n         BR    R9                       RETURN TO CALLER           U011\n         SPACE 4\nKEYNZERO MODESET  KEY=NZERO                                        U011\n         SPACE 1\n         BR    R9                       RETURN TO CALLER           U011\n         SPACE 4\nMODESUP  MODESET  MODE=SUP                                         U023\n         SPACE 1\n         BR    R9                       RETURN TO CALLER           U023\n         SPACE 4\nMODEPROB MODESET  MODE=PROB                                        U023\n         SPACE 1\n         BR    R9                       RETURN TO CALLER           U023\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  RESTORE AX AND LEAVE                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n          AIF   (&@@SPLVL LT 130).SKIP011 Skip if SP13 unsupported U031\nDCMSEXIT CLI   SPLVL,SP130              Running SP3?               U033\n         BL    EXIT02                   No - skip                  U033\n*  WE WILL NEVER FALL THRU IF NOT RUNNING SP3                      U023\n         BAL   R9,MODESUP               GET SUPERVISOR STATE       U023\n         SPACE 1\n         AXSET AX=OLDAXVAL              RESTORE PREVIOUS AUTH INDX U023\n         SPACE 1\n         BAL   R9,MODEPROB              RESTORE PROBLEM STATE      U023\nEXIT02   EQU   *                                                   U026\n          AGO   .SKIP012                                           U027\n.SKIP011  ANOP                                                     U027\nDCMSEXIT EQU   *                                                   U027\n.SKIP012  ANOP                                                     U027\n          AIF   (&@@SCSVC EQ 0).SVC03                              U031\n         TM    FLAG,AUTHSET             DID WE SET APF?            U026\n         BNO   DCMSTOP                  NO - ALL DONE              U026\n         LA    R0,0                     REQUEST RESET APF AUTH     U026\n         SVC   &@@SCSVC                 ISSUE MAGIC SVC            U031\n.SVC03    ANOP                                                     U026\nDCMSTOP  DCMSTOP  RC=(15)                                          U033\nCONS     CSECT                                                     U033\n         TITLE 'D I D O C S - DATA AREAS AND THE LIKE'\nSCR1X    DCMSFMT\nSCREEN   DCMSFLD  79                    1\n         DCMSFLD  79                    2\n         PRINT NOGEN                                               U011\n         DCMSFLD  79                    3\n         DCMSFLD  79                    4\n         DCMSFLD  79                    5\n         DCMSFLD  79                    6\n         DCMSFLD  79                    7\n         DCMSFLD  79                    8\n         DCMSFLD  79                    9\n         DCMSFLD  79                    10\n         DCMSFLD  79                    11\n         DCMSFLD  79                    12\n         DCMSFLD  79                    13\n         DCMSFLD  79                    14\n         DCMSFLD  79                    15\n         DCMSFLD  79                    16\n         DCMSFLD  79                    17\n         DCMSFLD  79                    18\n         DCMSFLD  79                    19\n         DCMSFLD  79                    20\n         PRINT GEN                                                 U020\nMSGLINE  DCMSFLD  79                    21                         U020\nENTRLNE  DCMSFLD  79,ALPHA,CURSOR=YES   22                         U020\nMODELINE DCMSFLD  79                    23                         U020\n         DCMSFEND\nSCR1L    EQU   *-SCR1X                  LENGTH OF SCREEN DESCRIPT. U012\n         SPACE 3\nMENUSCRX DCMSFMT  ,                                                U009\nMENUSAVE DCMSFLD  39                    1                          U009\n         PRINT NOGEN                                               U011\n         DCMSFLD  39                                               U009\n         DCMSFLD  39,ALPHA              2                          U009\n         DCMSFLD  39,ALPHA                                         U009\n         DCMSFLD  39,ALPHA              3                          U009\n         DCMSFLD  39,ALPHA                                         U009\n         DCMSFLD  39,ALPHA              4                          U009\n         DCMSFLD  39,ALPHA                                         U009\n         DCMSFLD  39,ALPHA              5                          U009\n         DCMSFLD  39,ALPHA                                         U009\n         DCMSFLD  39,ALPHA              6                          U009\n         DCMSFLD  39,ALPHA                                         U009\n         DCMSFLD  39,ALPHA              7                          U009\n         DCMSFLD  39,ALPHA                                         U009\n         DCMSFLD  39,ALPHA              8                          U009\n         DCMSFLD  39,ALPHA                                         U009\n         DCMSFLD  39,ALPHA              9                          U009\n         DCMSFLD  39,ALPHA                                         U009\n         DCMSFLD  39,ALPHA              10                         U009\n         DCMSFLD  39,ALPHA                                         U009\n         DCMSFLD  39,ALPHA              11                         U009\n         DCMSFLD  39,ALPHA                                         U009\n         DCMSFLD  39,ALPHA              12                         U009\n         DCMSFLD  39,ALPHA                                         U009\n         DCMSFLD  39,ALPHA              13                         U009\n         DCMSFLD  39,ALPHA                                         U009\n         DCMSFLD  39,ALPHA              14                         U009\n         DCMSFLD  39,ALPHA                                         U009\n         DCMSFLD  39,ALPHA              15                         U009\n         DCMSFLD  39,ALPHA                                         U009\n         DCMSFLD  39,ALPHA              16                         U009\n         DCMSFLD  39,ALPHA                                         U009\n         DCMSFLD  39,ALPHA              17                         U009\n         DCMSFLD  39,ALPHA                                         U009\nMENUBIG  DCMSFLD  79,ALPHA              18                         U021\n         DCMSFLD  79,ALPHA              19                         U013\n         DCMSFLD  79,ALPHA              20                         U018\n         DCMSFLD  79                    21                         U009\n         PRINT GEN                                                 U011\nENTRLNE2 DCMSFLD  79,ALPHA,CURSOR=YES   22                         U020\nSHOWCMD2 DCMSFLD  79                    23                         U009\n         DCMSFEND\nMENUSCRL EQU   *-MENUSCRX               LENGTH OF SCREEN DESCRIPT. U012\n         SPACE 2\nHEXTAB   EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\n         SPACE 2\nWTOMASK  WTO   '*** USERIDX ==> 000000000011111111112222222222333333333$\n               3444444444455555555556666666666777777777',          U012$\n               MF=L,MCSFLAG=REG0                                   U012\nWTOL     EQU   *-WTOMASK                                           U012\n         SPACE 2\n*MSGSIM  DC    C'DCMS simulated console on xxxx using 3270 at '    U031\n         SPACE 1\nMSGLOC   DC    C'<<< Location >>> Type   Addr  Id  Stat  Cmdauth'  U033\n         DC    C' Routcdes'                                        U034\n          AIF   (&@@SPLVL LT 130).SKIP013 Skip if SP13 unsupported U033\n         DC    C'                  Scrsz'                          U034\n.SKIP013  ANOP                                                     U033\nMSGLOCL  EQU   *-MSGLOC                                            U033\n         SPACE 2\nNAMES    CSECT                                                     U027\nLNML     EQU   15                                                  U033\nLOCTABLL EQU   3+LNML                                              U033\nLOCTABLE DC    0C' '                                               U033\n         @GLOBALC CONS,LOCTABLE                                    U033\n         DC    20CL(LOCTABLL)' '        PATCH SPACE                U033\n         DC    CL3' '                   FLAG END OF TABLE          U029\n         SPACE 2\nCONS     CSECT                          RESUME                     U027\n         SPACE 1                                                   U027\nBLANKTAB DC    CL256' '\n         ORG   BLANKTAB+C'\u00a2'\n         DC    C'\u00a2.<(+|',X'50'\n         ORG   BLANKTAB+C'!'\n         DC    C'!$*);\u00ac-/'\n         ORG   BLANKTAB+C','\n         DC    C',%_>?'\n         ORG   BLANKTAB+C':'\n         DC    C':#@''=\"'\n         ORG   BLANKTAB+X'81'\n         DC    X'818283848586878889'                               U001\n         ORG   BLANKTAB+X'91'      ...\n         DC    X'919293949596979899'                               U001\n         ORG   BLANKTAB+X'A2'      ...\n         DC    X'A2A3A4A5A6A7A8A9'                                 U001\n         ORG   BLANKTAB+C'A'\n         DC    C'ABCDEFGHI'\n         ORG   BLANKTAB+C'J'\n         DC    C'JKLMNOPQR'\n         ORG   BLANKTAB+C'S'\n         DC    C'STUVWXYZ '\n         ORG   BLANKTAB+C'0'\n         DC    C'0123456789'\n         ORG\n         SPACE 4\nAUTHTBL  DC    C'INFO   '               0:  INFO ONLY              U022\n         DC    C'CON    '               1:  UCMAUTH3               U018\n         DC    C'I/O    '               2:  UCMAUTH2               U018\n         DC    C'I/O+CON'               3:  UCMAUTH2+UCMAUTH3      U018\n         DC    C'SYS    '               4:  UCMAUTH1               U018\n         DC    C'SYS+CON'               5:  UCMAUTH1+UCMAUTH3      U018\n         DC    C'SYS+I/O'               6:  UCMAUTH1+UCMAUTH2      U018\n         DC    C'ALL    '               7:  UCMAUTH1+2+3           U018\n         SPACE 4\nGRAFTYPE DC    C'2250'                  UCBTYPE=XXXX1002           U023\n         DC    C'2260'                  UCBTYPE=XXXX1003           U023\n         DC    C'????'                  UCBTYPE=XXXX1004           U023\n         DC    C'????'                  UCBTYPE=XXXX1005           U023\n         DC    C'????'                  UCBTYPE=XXXX1006           U023\n         DC    C'????'                  UCBTYPE=XXXX1007           U023\n         DC    C'3066'                  UCBTYPE=XXXX1008           U023\n         DC    C'3270'                  UCBTYPE=XXXX1009           U023\n         DC    C'3284'                  UCBTYPE=XXXX100A           U023\n         DC    C'3286'                  UCBTYPE=XXXX100B           U023\n         DC    C'3158'                  UCBTYPE=XXXX100C           U023\n         DC    C'3036'                  UCBTYPE=XXXX100D           U023\n         DC    C'????'                  UCBTYPE=XXXX100E  PATCH    U023\n         SPACE 2\nURTYPE   DC    X'01',C'2540R'           UCBTYPE=XXXX0801           U023\n         DC    X'04',C'2501 '           UCBTYPE=XXXX0804           U023\n         DC    X'05',C'2520 '           UCBTYPE=XXXX0805           U023\n         DC    X'06',C'3505 '           UCBTYPE=XXXX0806           U023\n         DC    X'08',C'1403 '           UCBTYPE=XXXX0808           U023\n         DC    X'09',C'3211 '           UCBTYPE=XXXX0809           U023\n         DC    X'0A',C'1443 '           UCBTYPE=XXXX080A           U023\n         DC    X'0B',C'3203 '           UCBTYPE=XXXX080B           U023\n         DC    X'0C',C'3525 '           UCBTYPE=XXXX080C           U023\n         DC    X'20',C'1052 '           UCBTYPE=XXXX0820           U023\n         DC    X'22',C'3210 '           UCBTYPE=XXXX0822           U023\n         DC    X'23',C'3215 '           UCBTYPE=XXXX0823           U023\n         DC    X'30',C'3213 '           UCBTYPE=XXXX0830           U023\n         DC    X'FF'                    END OF TABLE INDICATOR     U023\n         SPACE 2                                                   U033\nDEVCNFGL EQU   5+6                      Length of table entry      U034\nDEVCNFG  EQU   *-8*DEVCNFGL             Origin zero start of table U033\n         DC    C'77-1  12x40'           X'08' 3277-1               U034\n         DC    C'77-2  24x80'           X'09' 3277-2               U034\n         DC    C'78-1  12x80'           X'0A' 3278-1               U034\n         DC    C'78-2  24x80'           X'0B' 3278-2               U034\n         DC    C'78-2A 20x80'           X'0C' 3278-2A              U034\n         DC    C'78-3  32x80'           X'0D' 3278-3               U034\n         DC    C'78-4  43x80'           X'0E' 3278-4               U034\n         DC    C'79-2A 24x80'           X'0F' 3279-2A              U034\n         DC    C'70-X  24x80'           X'10' 3270-X or 3279-2B    U034\n         DC    C'79-3A 32x80'           X'11' 3279-3A              U034\n         DC    C'70-X  32x80'           X'12' 3270-X or 3279-3B    U034\n         DC    C'84/6       '           X'13' 3284/3286            U034\n         DC    C'79-2C 20x80'           X'14' 3279-2C              U034\n         DC    C'70-X       '           X'15' 3270-X               U034\n         DC    C'70-X 27x132'           X'16'                      U034\n         DC    C'70-X  31x80'           X'17'                      U034\n         DC    C'70-X 31x160'           X'18'                      U034\n         DC    C'70-X  43x80'           X'19'                      U034\n         DC    C'70-X  62x80'           X'1A'                      U034\n         DC    C'70-X 62x160'           X'1B'                      U034\n         DC    C'70-X 50x106'           X'1C'                      U034\nDEVCNFGX EQU   (*-DEVCNFG)/DEVCNFGL                                U033\n         DC    C'70    ??x??'     Unknown entry value              U034\n         SPACE 4\nHELPIMG  CSECT                                                     U008\n         DC    CL79'*** CONS - HELP ***            (ANY PFKEY NOT LISTE$\n               D IS IGNORED)               '                       U024\n         DC    CL79' '                                             U008\n         DC    CL79'PF1  / PF13  - H    - HELP (THIS SCREEN)'      U024\n         DC    CL79'PF2  / PF14  - A    - START AUTO UPDATING'     U024\n         DC    CL79'PF3  / PF15  - E    - EXIT'                    U024\n         DC    CL79'PF5  / PF17  - M    - DISPLAY MENU OF CANNED COMMAN$\n               DS'                                                 U024\n         DC    CL79'PF6  / PF18  -      - REPROMPT WITH LAST COMMAND EN$\n               TERED'                                              U024\n         DC    CL79'PF7  / PF19  - U    - SELECT TOP OF LARGE CONSOLE' $\n                                                                   U028\n         DC    CL79'PF8  / PF20  - D    - SELECT BOTTOM OF LARGE CONSOL$\n               E'                                                  U028\n         DC    CL79'PF9  / PF21  - S    - SELECT ANOTHER CONSOLE'  U028\n         DC    CL79'PF10 / PF22  - L    - LIST CONSOLE STATUS'     U024\n         DC    CL79'PF12 / PF24  - E    - EXIT'                    U024\n         DC    CL79'ATTN / PA1   -        STOP AUTO UPDATING'      U024\nHELPIMGL EQU   *-HELPIMG                LENGTH OF HELP SCREEN      U008\n         SPACE 3\nMENULIST CSECT                                                     U009\n         DC    CL39'(ANY COMMAND BELOW CAN BE MODIFIED.  IT'    1  U009\n         DC    CL39'WILL BE REMEMBERED UNTIL LEAVING CONS) '       U009\n         @GLOBALC CONS,MENULIST                                    U033\n         DC    C'Position cursor at command above, or enter any command$\n                or subcommand below'                           21  U036\n         DC    CL79'                                       '   22  U009\n         DC    CL79'IEE163I Mode= Menu                     '   23  U009\nMENULEN  EQU   *-MENULIST               LENGTH OF MENU SCREEN      U009\n         SPACE 2\n         PUSH  PRINT\n         PRINT NOGEN\n         IEETDCM  ,                     TRANSIENT DCM (TDCM)       U025\n         POP   PRINT\n         SPACE 3\nDCMSWORK DSECT                          Reestablish DCMS workarea  U033\nSAVER9   EQU   PARMADDR                 REUSE IDLE FIELD           U028\nADDRUCM  DC    A(0)                     -> CURRENT UCM             U009\nADDRTDCM DC    A(0)                     -> Current TDCM            U035\n*\nADRBOT   DC    A(0)                     ADDRESS OF BOTT OF SCREEN  U028\nADRL21   DC    A(0)                     ADDRESS OF LINE 21         U028\nMENUSAVA DC    A(0)                     -> menu savearea           U037\nDOMTABA  DC    A(0)                     -> dom table copy          U037\nCONSASID DC    H'0'                     ASID OF 'CONSOLE'          U023\nOLDSASID DC    H'0'                     PREVIOUS SECONDARY ASID    U023\nOLDAXVAL DC    H'0'                     PREVIOUS AUTH INDEX        U023\n*  FOLLOWING 3 LINES *MUST* BE TOGETHER\nCMND     DC    F'0'\nCMDBUF   DC    CL79' '\nCMNDLEN  EQU   *-CMND\nWTO      DC    CL(WTOL)' '                                         U012\nSAVECMD  DC    CL79' '                                             U012\nDISPCMD  DC    CL79' '                                             U013\nERRMSG   DC    CL79' '                                             U012\nREPLID   DC    CL2' '                                              U013\n         SPACE 1\nCOPYTDCM DS    CL(DCMEND-DCMSTRT)       TDCM COPIED FROM ...       U023\n*                                       ... 'CONSOLE' ADDR SPACE   U027\n         SPACE 1\n*  FOLLOWING 2 LINES *MUST* BE TOGETHER                            U031\nUNITADDR DC    CL3' '                                              U031\nUNITCONS DC    CL9' '                   MAYBE '*MSTCONS*'          U031\nSYSID    DC    CL4' '                                              U031\nCMDNUM   DC    H'0'                     CURRENT COMMAND NUMBER     U032\nRETNUM   DC    H'0'                     NUMBER OF CMD TO RETRIEVE  U032\nSTACKA   DC    A(0)                     A(CMDSTACK)                U032\n         SPACE 1\nXUCMID   DC    X'00'\nFLAG     DC    X'00'\nFLASH    EQU   X'80'                    AUTO-UPDATE MODE\nMENUFLAG EQU   X'40'                    RETURN TO MENU SCREEN      U010\nQUIET    EQU   X'20'                    CURRENTLY IN QUIET MODE    U012\nLARGCON  EQU   X'10'                    SELECTED CONSOLE IS LARGE  U014\nDISPBOT  EQU   X'08'                    BOTTOM OF SCREEN SELECTED  U014\nF@ALLRC  EQU   X'04'                    All ROUTCDEs are set       U034\nAUTHSET  EQU   X'02'                    SVC USED TO SET APF AUTH   U026\nF@NILRC  EQU   X'01'                    No ROUTCDEs are set        U034\n         SPACE 2\nSPLVL    DC    X'00'                    What version of MVS        U033\nNONSP    EQU   0                        MVS 3.8 base               U033\nSP130    EQU   1                        At least MVS/SP 1.3.0      U033\nSP220    EQU   2                        At least MVS/SP 2.2.0      U033\n         SPACE 2\n         DC    0H'0'                                               U012\nSCR1     DC    XL(SCR1L)'00'            ATTRIBUTE BYTES            U012\n         DC    0H'00'                                              U012\nMENUSCR  DS    XL(MENUSCRL)             ATTRIBUTE BYTES            U012\n         SPACE 2\n         DSGEN SCR1X                                               U009\n         ORG   MSGLINE                                             U036\nML@SIM   DS    C'Simulated Console:  '                             U036\nML@SYSID DS    C'xxxx',C' '                                        U036\nML@TYPE  DS    C'xxxx',C' '                                        U036\nML@ADDR  DS    C'xxx',CL2' '                                       U036\nML@LOC   DS    CL(LNML),C' '            descriptive location       U036\nML@MSTR  DS    C'*MSTCONS*',CL2' '      or blanks                  U036\nML@RANGE DS   0C'(Lines nn-nn)'         or blanks                  U036\nML@RNGET DS    C'(Lines '                                          U036\nML@RTOP  DS    C'nn',C'-'                                          U036\nML@RBOT  DS    C'nn',C')'                                          U036\nML@LL    EQU   *-MSGLINE                                           U036\nML@LLERR EQU   L'MSGLINE-ML@LL          error if too long          U036\n         ORG   ,                                                   U036\n         SPACE 2\n         DSGEN MENUSCRX                                            U009\n         SPACE 2\nCMDSTACK DS    16CL(L'CMDBUF)' '        COMMAND STACK              U032\n         SPACE 2\n          AIF  (&@@SPLVL LT 220).SKIP014                           U037\nDOMTAB   DS    20XL18                   dom table copy             U037\n          AGO  .SKIP015                                            U037\n.SKIP014  ANOP ,                                                   U037\nDOMTAB   DS    XL8                      dom table copy             U037\n.SKIP015  ANOP ,                                                   U037\nDOMTABL  EQU   *-DOMTAB                 len of table to copy       U037\n         SPACE 2\nWORKLEN  EQU   *-DCMSWORK                                          U012\n         EJECT\nLCLINE   DSECT                          FOR \"DISPLAY CONSOLES\"     U018\nLC@LOC   DS    CL(LNML)'LOCATION DESCRIPTION'                      U033\n         DS    CL2                                                 U023\nLC@TYPE  DS    CL7'3279-3B'                                        U033\n         DS    CL1                                                 U020\nLC@ADDR  DS    CL3'012'                                            U018\n         DS    CL2                                                 U018\nLC@ID    DS    CL2'01'                                             U018\n         DS    CL2                                                 U018\nLC@STAT  DS    CL5'M,J,P'                                          U018\n         DS    CL1                                                 U020\nLC@AUTH  DS    CL7'ALL'                                            U018\n         DS    CL1                                                 U034\nLC@ROUT  DS    CL24'2,4,6,8,10,12,14,16,18, '                      U034\n         DS    CL1                                                 U034\nLC@SCSZ  DS    CL6'62x160'                                         U033\nLCLINEL  EQU   *-LCLINE                 LENGTH OF DISPLAY LINE     U020\n         PRINT NOGEN\n         IEECUCM FORMAT=NEW\n          AIF   (&@@SPLVL LT 220).SKIP016 Skip if SP22 unsupported U034\nUCMRTCD  EQU   UCMXB+4,2                For compatibility          U034\n.SKIP016  ANOP                                                     U034\n         SPACE 2\n         IEERDCM\n         SPACE 2\n         CVT   DSECT=YES\n         SPACE 2\n         IHASCVT ,                                                 U033\n         SPACE 2\n         IEESMCA  ,                                                U031\n         SPACE 2\n         IHAASVT  ,                                                U023\n         SPACE 2\n         IHAASCB  ,                                                U023\n         SPACE 2\n         IKJPSCB ,                                                 U001\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CORE": {"ttr": 3591, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x00\\x00\\x84\\x04\\x8f\\x00\\x92\\t\\x0f D\\x0c\\x85\\nu\\x02\\xec\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "1984-02-17T00:00:00", "modifydate": "1992-03-30T20:44:00", "lines": 3205, "newlines": 2677, "modlines": 748, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1991 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nCORE     TITLE 'CORE --  DCMS STORAGE ALTER/DISPLAY'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Updates:                                                           *\n*                                                                     *\n*    26May91  U072 LDW  Fix bug in LPA search code                    *\n*                                                                     *\n*    21May91  U071 LDW  Fix UCB command for MVS/XA                    *\n*                                                                     *\n*    18Sep90  U070 LDW  Add WHERE command (from Mike Stein's LOOKXA)  *\n*             U069 LDW  Add \"LPA\" command (like \"M\", skips MLPA)      *\n*                       Change help screens to lower case             *\n*                                                                     *\n*    14Jun90  U068 LDW  Fix bug in cross memory mode                  *\n*                                                                     *\n*    07Jan90  U067 LDW  Fix bug in \"M\" for minor LPDEs                *\n*                                                                     *\n*    01Aug88  U066 LDW  Add IS command for short (24-bit) indirect    *\n*                                                                     *\n*    22May88  U065 LDW  Insert relative offset into dump line         *\n*             U064 LDW  Fix bug in control block formatting           *\n*                                                                     *\n*    21Feb88  U063 LDW  Update for 31 bit addresses                   *\n*                          (Includes running AMODE=31)                *\n*                                                                     *\n*    02Aug87  U062 LDW  Fix for MVS/XA                                *\n*                                                                     *\n*    10/05/84 U061 LDW  SUPPORT CROSS MEMORY FETCH                    *\n*             U060 LDW  FIXES FOR ADDRESSABILITY                      *\n*             U059 LDW  DON'T DO 'LRA' FOR PAGE 0, TO FIX FOR         *\n*                          RUNNING MVS UNDER VM WITH 'STBYPASS VR'    *\n*                                                                     *\n*    03/12/84 U058 SDM  ADD SSCVT COMMAND                             *\n*                                                                     *\n*    02/17/84 U057 SDM  ADD SVC COMMAND                               *\n*                                                                     *\n*    06/07/83 U056 SDM  FIX KEY BUG INSERTED IN U054                  *\n*                                                                     *\n*    05/23/83 U055 SDM  CHANGE ALL 2K PAGE REFERENCES TO 4K           *\n*             U054 SDM  FIX BIG HOLES IN FIND COMMAND                 *\n*             U053 SDM  USE EP ADDR FROM MINOR CDE                    *\n*             U052 SDM  IMPROVE LPA MODULE LOOKUP CODE                *\n*                                                                     *\n*    02/07/83 U051 SDM  EXPAND 'UNDEFINED SYMBOL' MESSAGE             *\n*             U050 SDM  FIX SO INDIRECT WORKS FROM PROTECTED MEMORY   *\n*             U049 SDM  WRITE EVAL ROUTINE, REPLACE NUMSCAN LOGIC     *\n*                                                                     *\n*    11/16/81 U048 LDW  ALLOW BLANKS BEFORE CMD AND BEFORE OPERAND    *\n*             U047 LDW  REWRITE STORAGE KEY DISPLAY LOGIC             *\n*             U046 LDW  MOVE CODE AROUND FOR SIMPLICITY               *\n*             U045 LDW  ADD \"ASID\" AND \"JOB\" COMMANDS                 *\n*             U044 LDW  INCREASE SIZE OF HISTORY AND SYMBOL TABLES    *\n*             U043 LDW  REWRITE HELP ROUTINE                          *\n*                                                                     *\n*    11/05/81 U042 LDW  FIX BUGS INTRODUCED ON 11/02/81               *\n*                                                                     *\n*    11/02/81 U041 LDW  REMOVE SPIE MACRO FROM INNER \"FIND\" LOOP      *\n*             U040 LDW  MINOR ADJUSTMENTS TO SCREEN LAYOUT            *\n*             U039 LDW  FIX \"FIND\" NO-STOP-AT-END-OF-STORAGE BUG      *\n*             U038 LDW  EXPAND ERROR MESSAGES FROM \"LINK\"             *\n*                                                                     *\n*    10/30/81 U037 LDW  RE-WRITE \"M\" COMMAND TO ALSO FIND FLPA, MLPA  *\n*             U036 LDW  ADD \"*\" COMMAND TO RE-DISP PREV COMMAND       *\n*             U035 LDW  MISC CLEANUP                                  *\n*                                                                     *\n*    10/26/81 U034 EMS  FIX GETSTOR ROUTINE CROSSING 2K BOUNDARY      *\n*                                                                     *\n*    06/12/81 U033 LDW  ADD \"M\" COMMAND TO LOCATE LPA MODULES         *\n*                                                                     *\n*    02/25/81 U032 LDW  ADD \"FIND\" COMMAND, AND RE-PROMPT FEATURE     *\n*             U031 LDW  RE-ARRANGE SCREEN FORMAT                      *\n*             U030 LDW  CHANGE CB LOAD MODULE NAME: CBMACS -> CORECBS *\n*             U029 LDW  FIX '=' CMD - NO DUPLICATE OR INVALID SYMBOLS *\n*             U028 LDW  ADD NEW COMMANDS:  \"D\", \"U\", \"HISTORY\",       *\n*                        '=' WITH NO OPERAND DISPLAYS DEFINED SYMBOLS *\n*             U027 LDW  ADD \"BLIST\" TO DISPLAY NAMES OF KNOWN CB MAPS *\n*             U026 LDW  FINISH \"GETSTOR\"                              *\n*             U025 LDW  SPLIT HELP SCREEN INTO 3 SCREENS              *\n*             U024 LDW  MISC OTHER CLEANUP                            *\n*             U023 LDW  ALLOW VARIABLE LENGTH COMMAND NAMES           *\n*             U022 LDW  CHANGE SO SPIE IS ONLY ACTIVE WHEN NEEDED     *\n*             U021 LDW  TOTAL RE-WRITE OF DUMP SCREEN FORMAT ROUTINES *\n*             U020 LDW  ADD PAGEFIX AND PAGEFREE COMMANDS             *\n*             U019 LDW  CHANGE OVERLAY SUBCMD FROM \"O\" TO \"B\", ALLOW  *\n*                        \"B\" TO MEAN THE SAME THING AS \"BNULL\"        *\n*                                                                     *\n*    08/18/80 U018 LDW  CHANGE \"ENTR\" TO \"OSENTER\"                    *\n*             U017 LDW  ADD STORAGE ALTERATION CAPABILITIES           *\n*             U016 LDW  MAKE PF12 END ALSO                            *\n*             U015 LDW  USE \"PSCBACCT\" BIT FOR \"SYSTEMS PROGRAMMER\"   *\n*             U014 LDW  DISP KEYMODE (\"USER\" OR \"ZERO\") IF AUTH USER  *\n*             U013 LDW  DISPLAY STORAGE KEY IF AUTH USER              *\n*                                                                     *\n*    07/29/80 U012 LDW  LOAD \"TERMIO\"                                 *\n*                                                                     *\n*    05/23/80 U011 LDW  USE \"ENTR\" MACRO                              *\n*             U010 LDW  CHANGE PROGRAM NAME FROM \"LOOK\" TO \"CORE\"     *\n*             U009 LDW  \"UCB\" COMMAND TO LOCATE A SPECIFIC UCB        *\n*             U008 LDW  \"Z\" COMMAND TO SET/RESET KEY ZERO MODE        *\n*             U007 LDW  IMPLEMENT AUTO UPDATE (PF2)                   *\n*             U006 LDW  PROVIDE BETTER PROGRAM CHECK INFORMATION      *\n*             U005 LDW  USE \"STFSMODE\"                                *\n*                                                                     *\n*    04/21/80 U004 LDW  MAKE \"CBMACS\"  EXTERNALLY LOADED              *\n*             U003 LDW  IMPLEMENT HELP SCREEN                         *\n*             U002 LDW  USE \"PFKEY\" MACRO                             *\n*             U001 LDW  MISC CLEANUP                                  *\n*                                                                     *\n*                                                                     *\n*  TO DO:                                                             *\n*                                                                     *\n*    REPLACE TRACE LOGIC                                              *\n*    ADD '#' COMMAND                                                  *\n*    ADD 'TSO' COMMAND                                                *\n*    ADD 'ENABLESRB' COMMAND                                          *\n*    FIX PAGEFIX/PAGEFREE                                             *\n*    IF SCAN STRING CROSSES A FETCH BOUNDARY, IT WON'T BE FOUND!! %%  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n         MACRO                                                     U063\n&NFS     SCMDE &CMD,&ADDR                                          U063\n         LCLA  &L                                                  U063\n&L       SETA  K'&CMD-2                                            U063\n&NFS     DC    A(&ADDR),Y(0),AL1(0,&L-1),CL8&CMD                   U070\n         SPACE 1                                                   U063\n         MEND                                                      U063\n         EJECT\n         COPY  @GLOBALS                                            U063\n         EJECT\nCORE     OSENTER  BASE=R10,BASE2=R11,GETMAIN=(WORKLEN,WORKAREA),   U024$\n               EXIT=LEAVE,LOAD=CORECBS,AMODE=31                    U063\n         SPACE 3\n$        EQU   CORE                     shorthand for offsets      U063\nRLINK    EQU   R9                       PRIMARY LINKAGE REGISTER   U024\nNUMHIST  EQU   16*4                     SIZE OF HISTORY TABLE      U044\nNUMNAME  EQU   16*4                     SIZE OF SYMBOL TABLE       U044\n         EJECT\n         STFSMODE  ON,INITIAL=YES       TELL VTAM WE'RE HERE       U005\n         SPACE 2\n         LA    R2,CLRSTART              -> START OF AREA TO CLEAR  U011\n         LH    R3,=Y(CLRLEN)            LENGTH TO CLEAR            U044\n         SR    R5,R5                    ZERO PAD BYTE, LENGTH 2\n         MVCL  R2,R4                    CLEAR THE WORK AREA\n         MVC   IOCBNAME,=CL8'CORE'      SET DCMS PROCESSOR NAME    U010\n         SPACE 2\n         LOAD  EPLOC==CL8'TERMIO'                                  U012\n         ST    R0,IOCBATIO              SAVE ADDRESS               U012\n         SPACE 2\n         L     R1,X'218'                -> TCB                     U008\n         L     R1,180(,R1)              -> JSCB                    U008\n         L     R1,264(,R1)              -> PSCB                    U008\n         TM    PSCBATR1-PSCB(R1),PSCBACCT  SYSTEMS PROGRAMMER?     U015\n         BNO   TURKEY                   NO - SKIP                  U008\n         OI    FLAGS,AUTHUSER           YES - REMEMBER             U008\n         SPACE 2\n         TESTAUTH  FCTN=1               ARE WE APF AUTHORIZED?     U008\n         SPACE 1\n         LTR   R15,R15                  WELL?                      U008\n*U068    BNZ   *+8                      NO - SKIP                  U008\n         BNZ   TURKEY                   NO - SKIP                  U068\n         OI    FLAGS,AUTHAPF            YES - REMEMBER             U008\n         IPK   0                        get my current key         U068\n         STC   R2,MYKEY                 save for MS$KUSER          U068\n         SPACE 2\nTURKEY   LA    R2,IOAREA                START OF IO BUFFER\n         LA    R3,IOLEN                 SIZE OF IO BUFFER\n         LA    R5,C' '                  PAD BYTE\n         SLL   R5,24                    MOVE TO HIGH ORDER BYTE\n         MVCL  R2,R4                    CLEAR THE IO BUFFER\n          AIF   (&@@SPLVL GE 200).XA01                             U063\n         MVC   HEADER,=CL79'CORE'                                  U063\n         SPACE 2\n         SPIE  MF=(E,SPIEMFL)           SET UP PGM CHECK HANDLER   U041\n          AGO   .XA02                                              U063\n.XA01     ANOP                                                     U063\n         MVC   HEADER,=CL79'CORE/XA'                               U063\n         SPACE 2\n         ESPIE SET,SPIEEXIT,(4,5)       SET UP PGM CHECK HANDLER   U063\n.XA02     ANOP                                                     U063\n         SPACE 1\n         ST    R1,OLDPIE                SAVE ADDR OF PREV PIE      U041\n         EJECT\n*---------------------------------------------------------------------*\n*\n*   INPUT SCAN\n*\n*---------------------------------------------------------------------*\n         SPACE 2\nISCAN    CLC   =C'* ',INPLINE           IS THIS THE SPECIAL CMD?   U036\n         BNE   ISCAN010                 NO - CONTINUE              U036\n         XC    INPLINE,INPSAVE          YES - SWITCH...            U036\n         XC    INPSAVE,INPLINE          ... CURRENT AND ...        U036\n         XC    INPLINE,INPSAVE          ... PREVIOUS COMMANDS      U036\n         B     DISPLAY                  AND GO RE-DISPLAY          U036\n         SPACE 2\nISCAN010 MVC   MSGLINE,BLANKS           CLEAR MESSAGE              U048\n         CLC   INPLINE,BLANKS           ANYTHING HERE AT ALL?      U048\n         BE    FORMAT                   NO - JUST GO FORMAT SCREEN U048\n         SPACE 2\nISCAN020 CLI   INPLINE,C' '             LEADING BLANK?             U048\n         BNE   ISCAN030                 NO - EXIT THIS LOOP        U048\n         MVC   INPLINE(L'INPLINE-1),INPLINE+1  YES - SHIFT OVER    U048\n         MVI   INPLINE+L'INPLINE-1,C' ' FIX LAST BYTE              U048\n         B     ISCAN020                 AND KEEP SCANNING          U048\n         SPACE 2\nISCAN030 MVC   INPSAVE,INPLINE          SAVE LAST USER INPUT\n         SPACE 2\nISCAN2   LA    R3,OPERAND               POINT TO START OF INPUT    U048\n         MVC   OPERAND,INPLINE          ASSUME NO COMMAND          U048\n         L     R1,=A(SCANTAB)           COMMAND TABLE              U070\n         NI    FLAGS,255-INDFLAG-INDFLAGS  TURN OFF INDIRECT FLAG  U066\n         MVC   MSGLINE,BLANKS           CLEAR ERROR MESSAGE        U031\n         MVC   PGMCKMSG,BLANKS          CLEAR PGMCHK MESSAGE       U042\n         SPACE 2\nSCANLOOP L     R12,0(,R1)               get address of routine     U070\n         SR    R15,R15                  CLEAR FOR IC               U048\n         IC    R15,7(,R1)               GET EX LENGTH OF CMD NAME  U070\n         EX    R15,SCANCLC              IS THIS THE COMMAND?       U023\n         BE    SCANGOT                  YES - GO FIND OPERAND      U048\n         LA    R1,16(,R1)               -> NEXT ENTRY              U070\n         CLI   0(R1),X'FF'              END OF TABLE?              U023\n         BE    NUMSCAN                  YES - ASSUME NUMERIC INPUT\n         B     SCANLOOP                 KEEP LOOKING\n         SPACE 2\nSCANGOT  LA    R1,INPLINE+1(R15)        -> PAST END OF COMMAND     U048\n*U070    AR    R12,R10                  relocate routine address   U070\n         LA    R14,INPLINE+L'INPLINE-1  -> END OF BUFFER           U048\n         MVC   OPERAND,BLANKS           PRE-CLEAR FIELD            U048\n         SPACE 1\nFINDOPER CLI   0(R1),C' '               BLANK?                     U048\n         BNE   GOTOPER                  YES - GO MOVE OPERAND      U048\n         LA    R1,1(,R1)                -> NEXT POSITION           U048\n         CR    R1,R14                   PAST END?                  U048\n         BNH   FINDOPER                 NO - KEEP LOOKING          U048\n         BR    R12                      NO OPERAND - GO TO COMMAND U070\n         SPACE 1\nGOTOPER  SR    R14,R1                   COMPUTE LENGTH OF OPERAND  U048\n         EX    R14,SCANMVC              MOVE OPERAND               U048\n         BR    R12                      GO TO COMMAND ROUTINE      U070\n         SPACE 2\nSCANCLC  CLC   INPLINE(*-*),8(R1)       << EXECUTED >>             U070\nSCANMVC  MVC   OPERAND(*-*),0(R1)       << EXECUTED >>             U048\n         EJECT\n*---------------------------------------------------------------------*\n*\n*     FORMAT THE OUTPUT SCREEN\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n*---  BLANK INPUT COMMAND\n         SPACE 1\nFORMAT   MVC   INPLINE,BLANKS           CLEAR INPUT LINE\nFORMAT1  LA    R3,OPERAND               CURSOR ADDRESS             U048\nFORMAT2  LH    R2,CURRENT               HISTORY TABLE POINTER\n         L     R4,HISTORY(R2)           GET ADDRESS TO DISPLAY\n         ST    R4,CURRLOC               SAVE FOR LATER             U040\n         MVC   LOCLINE,BLANKS           CLEAR THE WHOLE THING      U045\n         BAL   R14,ERASE                CLEAR THE SCREEN\n         LA    R0,IOAREA                START OF SCREEN IMAGE\n         SR    R3,R0                    CURSOR OFFSET\n         SR    R5,R5                    CLEAR FOR IC\n         IC    R5,HISTORY+4(R2)         GET DISPLAY FMT FROM HIST TAB\n         B     *+4(R5)                  GO TO DISPLAY ROUTINE\n         B     DUMP                     0: DUMP FORMAT IS STANDARD\n         B     CBHIT                    4: CB MAP IN USE\n         B     NOCB                     8: SUPPRESS CB USAGE\n* NO CODE ABOVE 8 IN USE NOW\n         SPACE 2\n* TRY TO LOCATE A CONTROL BLOCK FORMAT\nDUMP     L     R5,CORECBS               GET START OF INDEX         U030\nDUMPCB   CLI   0(R5),X'FF'              SEE IF END OF INDEX\n         BE    NOCB                     IF YES, NO CB FOUND\n         CLI   4(R5),X'FF'              ENTRY ONLY FOR \"B\" CMDS?   U001\n         BE    NEXTCB                   YES - SKIP IT              U001\n         L     R2,4(,R5)                GET CB IDENTIFIER OFFSET\n         AR    R2,R4                    ADD DISPLAY ADDRESS\n         LA    R0,4                     LENGTH TO FETCH\n         BAL   RLINK,GETSTOR            FETCH THE DATA             U024\n         BNZ   NOCB                     BR IF NOT ALL DATA FOUND   U054\n         CLC   0(4,R5),DUMPDATA         SEE IF IDENTIFIER MATCH\n         BE    CBHIT                    BR IF YES, CB WAS FOUND\n         SPACE 1\nNEXTCB   LA    R5,12(,R5)               NEXT INDEX ENTRY\n         B     DUMPCB                   AND CHECK FOR MORE CB'S\n         SPACE 2\n* IF NO CONTROL BLOCK TO BE SHOWN, JUST USE DUMP FORMAT\nNOCB     LR    R2,R4                    COPY ADDR TO DISPLAY\n         N     R2,=XL4'FFFFFFF0'        ROUND DOWN FOR DISPLAY     U054\n         LR    R5,R2                    SAVE ADDR OF CARET LINE    U021\n         TM    MODEFLAG,MIDDUMP         PUT ADDR INCENTER OF SCREEN?\n         BZ    *+8                      BR IF NOT\n         SH    R2,=H'64'                IF YES, BACK UP            U021\n         LA    R2,0(,R2)                CLEAR HIGH BYTE            U021\n* R2 NOW HAS FIRST ADDRESS TO DISPLAY\n         OI    FLAGS,DISPKEY            FORMAT KEYS FOR DISPLAY    U054\n         LA    R0,256                   LENGTH TO FETCH\n         BAL   RLINK,GETSTOR            GO FETCH THE DATA          U024\n         NI    FLAGS,255-DISPKEY        RESET DISPLAY FORMAT FLAG  U054\n         SPACE 1\n         LA    R6,DUMPDATA              POINT TO DATA TO DISPLAY\n         LA    R4,OUT1                  FIRST OUTPUT LINE ADDR\n         LA    R0,16                    NO. OF LINES TO DISPLAY    U021\n         SPACE 2\nDUMPLOOP ST    R2,TEMP1                 SET DOWN ADDRESS           U021\n         MVC   0(79,R4),BLANKS          CLEAR THE DISPLAY LINE     U021\n         HEX   (0,R4),TEMP1,LEN=4       FORMAT THE ADDRESS         U063\n         LR    R15,R2                   copy current line addr     U065\n         SL    R15,CURRLOC              offset of this line        U065\n         MVI   10(R4),C'+'              assume positive offset     U065\n         BNM   *+10                     skip if correct            U065\n         MVI   10(R4),C'-'              make it negative           U065\n         LCR   R15,R15                  and flip sign of offset    U065\n         ST    R15,TEMP1                set down for unpk          U065\n         HEX   (11,R4),TEMP1+3,LEN=1    and show the offset        U065\n         LR    R15,R2                   COPY CURRENT LINE ADDR     U021\n         AL    R15,=F'15'               -> LAST BYTE FOR THIS LINE U021\n         CL    R2,HIGOOD                LEFT > HI ?                U054\n         BH    DL$CARET                 YES - NOTHING TO DISPLAY   U021\n         CL    R15,LOGOOD               RIGHT < LO ?               U054\n         BL    DL$CARET                 YES - NOTHING TO DISPLAY   U021\n         UNPK  HEXWORK+00(14+1),00(7+1,R6)      BYTES 01-07        U021\n         UNPK  HEXWORK+14(14+1),07(7+1,R6)      BYTES 08-14        U021\n         UNPK  HEXWORK+28(04+1),14(2+1,R6)      BYTES 15-16        U021\n         TR    HEXWORK(32),HEXTAB       MAKE IT ALL DISPLAYABLE    U021\n*U065    MVI   58(R4),C'|'              LEFT CHAR DELIM            U063\n*U065    MVC   59(8,R4),0(R6)           FIRST 8 BYTES OF CHAR DATA U063\n*U065    MVC   68(8,R4),8(R6)           LAST 8 BYTES OF CHAR DATA  U063\n*U065    TR    59(17,R4),VALCHAR        MAKE IT ALL DISPLAYABLE    U063\n*U065    MVI   76(R4),C'|'              RIGHT CHAR DELIM           U063\n*U065    MVC   11(4,R4),HEXWORK+00      WORD                       U063\n*U065    MVC   16(4,R4),HEXWORK+04           1                     U063\n*U065    MVC   22(4,R4),HEXWORK+08      WORD                       U063\n*U065    MVC   27(4,R4),HEXWORK+12           2                     U063\n*U065    MVC   34(4,R4),HEXWORK+16      WORD                       U063\n*U065    MVC   39(4,R4),HEXWORK+20           3                     U063\n*U065    MVC   45(4,R4),HEXWORK+24      WORD                       U063\n*U065    MVC   50(4,R4),HEXWORK+28           4                     U063\n*?       MVI   61(R4),C'|'              LEFT CHAR DELIM            U065\n         MVC   62(8,R4),0(R6)           FIRST 8 BYTES OF CHAR DATA U065\n         MVC   71(8,R4),8(R6)           LAST 8 BYTES OF CHAR DATA  U065\n         TR    62(17,R4),VALCHAR        MAKE IT ALL DISPLAYABLE    U065\n*?       MVI   ??(R4),C'|'              RIGHT CHAR DELIM           U065\n         MVC   15(4,R4),HEXWORK+00      WORD                       U065\n         MVC   20(4,R4),HEXWORK+04           1                     U065\n         MVC   26(4,R4),HEXWORK+08      WORD                       U065\n         MVC   31(4,R4),HEXWORK+12           2                     U065\n         MVC   38(4,R4),HEXWORK+16      WORD                       U065\n         MVC   43(4,R4),HEXWORK+20           3                     U065\n         MVC   49(4,R4),HEXWORK+24      WORD                       U065\n         MVC   54(4,R4),HEXWORK+28           4                     U065\n         SPACE 2\nDL$CARET CR    R2,R5                    IS THIS THE CARET LINE?    U021\n         BNE   DL$NEXT                  NO - SKIP                  U021\n         LA    R1,15                    MASK FOR LOW 4 BITS        U021\n         N     R1,CURRLOC               GET LOW 4 BITS OF ADDR     U040\n         IC    R1,DUMPOFFS(R1)          GET CARET OFFSET           U021\n         LA    R1,14(R1,R4)             -> CARET POS               U065\n         MVI   0(R1),C'>'               ASSUME EVEN                U021\n         TM    CURRLOC+3,1              EVEN OR ODD?               U042\n         BNO   *+8                      EVEN - OK                  U021\n         MVI   0(R1),C'<'               ODD                        U021\n         SPACE 1\nDL$NEXT  LA    R2,16(,R2)               -> NEXT SOURCE ADDRESS\n         LA    R6,16(,R6)               -> NEXT SOURCE DATA\n         LA    R4,79(,R4)               -> NEXT SCREEN LINE\n         BCT   R0,DUMPLOOP              FILL THE SCREEN            U021\n         EJECT\nFMT$LOC  MVC   LOCLINE(4),=C'ADDR'      DISPLAY CURRENT...         U047\n         HEX   LOCLINE+5,CURRLOC,LEN=4   ... LOCATION              U063\n         TM    FLAGS,AUTHAPF            CAN WE DO THIS?            U047\n         BNO   DISPLAY                  NO - SO SKIP ALL THE REST  U047\n         SPACE 2\n         MVC   LOCLINE+18(4),=C'KEY='                              U063\n         LA    R15,KEYSAVE1             -> FIRST SAVED KEY         U047\n         LA    R1,LOCLINE+22            -> DESTINATION             U063\n         BAL   RLINK,FMT$KEY            FORMAT THIS KEY            U047\n         SPACE 1\n         CLC   KEYSAVE1,KEYSAVE2        BOTH KEYS IDENTICAL?       U047\n         BE    SAME$KEY                 YES - DON'T FORMAT SECOND  U047\n         SPACE 1\n         MVC   LOCLINE+30(5),=C'KEY2='                             U063\n         LA    R15,KEYSAVE2             -> SECOND SAVED KEY        U047\n         LA    R1,LOCLINE+35            -> DESTINATION             U063\n         BAL   RLINK,FMT$KEY            FORMAT THIS KEY            U047\n         SPACE 2\nSAME$KEY TM    FLAGS,AUTHUSER           AUTHORIZED USER?           U047\n         BNO   DISPLAY                  NO - DON'T TELL MODE/ASID  U047\n         MVC   LOCLINE+43(12),=C'MODE=USERKEY' ASSUME NOT KEY ZERO U047\n         TM    MODEFLAG,KEYZERO         ARE WE RUNNING KEY ZERO?   U047\n         BNO   *+10                     NO - SKIP                  U047\n         MVC   LOCLINE+48(7),=C'KEYZERO' YES - CHANGE MESSAGE      U047\n         SPACE 2\n         OC    ASID,ASID                DIFFERENT A.S.?            U045\n         BZ    DISPLAY                  NO - SKIP                  U045\n         MVC   LOCLINE+59(4),=C'ASID'   YES...                     U045\n         HEX   LOCLINE+64,ASID,LEN=2    ...DISPLAY ASID...         U045\n         MVI   LOCLINE+69,C'('          ...AND...                  U045\n         MVC   LOCLINE+70(8),JOBNAME    ...JOBNAME...              U045\n         MVI   LOCLINE+78,C')'          ...                        U045\n         B     DISPLAY                  SHOW THE SCREEN            U047\n         SPACE 2\nFMT$KEY  MVI   0(R1),C'?'               ASSUME LRA FAILED          U047\n         CLI   0(R15),X'FF'             UNDEFINED KEY?             U054\n         BER   RLINK                    JUST RETURN IF SO          U054\n         UNPK  TEMP2(2+1),0(1+1,R15)    UNPACK THE KEY BYTE        U047\n         TR    TEMP2(1),HEXTAB          MAKE IT DISPLAYABLE        U047\n         MVC   0(1,R1),TEMP2            MOVE TO 'LOCLINE'          U047\n         TM    0(R15),X'08'             FETCH PROTECTED?           U047\n         BNO   *+8                      NO - SKIP                  U047\n         MVI   2(R1),C'F'               YES - INDICATE IT          U047\n         TM    0(R15),X'02'             CHANGED?                   U047\n         BNO   *+8                      NO - SKIP                  U047\n         MVI   4(R1),C'C'               YES - INDICATE IT          U047\n         BR    RLINK                    RETURN TO MAINLINE         U047\n         EJECT\n* DISPLAY THE PAGE AND CHECK FOR END REQUEST\nDISPLAY  TM    FLAGS,AUTOFLAG           IN AUTO UPDATE MODE?       U007\n         BO    DISPAUTO                 YES - GO WRITE ONLY        U007\n         SPACE 1\n         NI    IOCBFLGD,255-IOCBDYON-IOCBDFRC                      U007\n         SPACE 1\n         L     R2,=A(SCR1)              -> SCREEN FORMAT DESC      U060\n         TRMIO IOCB,FORMAT=(R2),IMAGE=IOAREA                       U060\n         SPACE 1\n         B     CHKPFKEY                                            U007\n         SPACE 3\nDISPAUTO OI    IOCBFLGD,IOCBDYON+IOCBDFRC                          U007\n         SPACE 1\n         L     R2,=A(SCR1)              -> SCREEN FORMAT DESC      U060\n         TRMIO IOCB,WRITE,FORMAT=(R2),IMAGE=IOAREA                 U060\n         SPACE 3\nCHKPFKEY PFKEY K1=HELPKEY,              PF1 IS HELP                U043$\n               K2=UPDATE,               PF2 IS START AUTO UPDATE   U007$\n               K3=ENDIT,                PF3 IS END                 U002$\n               K5=FINDKEY,              FIND PREVIOUS STRING AGAIN U032$\n               K6=REPEAT,               REPEAT LAST INPUT LINE     U024$\n               K7=UP,                   SCROLL UP OR PREV CB SEG   U002$\n               K8=DOWN,                 SCROLL DOWN OR NEXT CB SEG U002$\n               K10=BACK,                BACK THRU HISTORY          U002$\n               K11=FWD,                 FWD THRU HISTORY           U002$\n               K12=ENDIT,               PF12 IS END ALSO           U016$\n               ATTN=ATTN,               ATTN IS STOP AUTO UPDATE   U007$\n               ENTER=ISCAN,                                        U023$\n               DEF=DISPLAY              ALL OTHERS IGNORED         U002\n         SPACE 2\nENDIT    STFSMODE OFF                   RESET FULLSCREEN MODE      U005\n         SPACE 1\n          AIF   (&@@SPLVL GE 200).XA03                             U063\n         L     R1,OLDPIE                -> PREVIOUS PIE            U041\n         SPACE 1\n         SPIE  MF=(E,(1))               RESTORE PREVIOUS SPIE      U041\n          AGO   .XA04                                              U063\n.XA03     ANOP                                                     U063\n         ESPIE RESET,OLDPIE             restore previous ESPIE     U063\n.XA04     ANOP                                                     U063\n         SPACE 1\n*  RESTORE AX IF NECESSARY                                         U061\n         OC    ASID,ASID                FETCHING FROM ALT A.S.?    U061\n         BZ    LEAVE                    NO - SKIP                  U061\n         BAL   R14,MS$SUPR              GET SUPERVISOR STATE       U061\n         SPACE 1\n         AXSET AX=OLDAXVAL              RESTORE PREVIOUS AUTH INDX U061\n         SPACE 1\n         BAL   R14,MS$PROB              RESTORE PROBLEM STATE      U061\n         B     LEAVE                    ALL DONE                   U006\n         SPACE 2\nATTN     TM    FLAGS,AUTOFLAG           IN AUTO UPDATE MODE?       U007\n         BNO   ENDIT                    NO - LEAVE                 U007\n         NI    FLAGS,255-AUTOFLAG       YES - TURN IT OFF          U007\n         B     FORMAT                   AND RE-DISPLAY             U007\n         EJECT\n*---------------------------------------------------------------------*\n*\n* CBHIT  -- CONTROL BLOCK FORMATTING ROUTINE\n* AT ENTRY:    R3 HAS CURSOR OFFSET\n*              R4 HAS ADDRESS TO DISPLAY\n*              R5 HAS CBINDEX ENTRY ADDRESS\n*\n*---------------------------------------------------------------------*\n         SPACE 2\nCBHIT    LH    R2,CURRENT               GET HISTORY TABLE POINTER\n         LA    R2,HISTORY+4(R2)         GET CURRENT SEG FROM HIST TABLE\n         SR    R6,R6                    clear for icm              U064\n         ICM   R6,7,1(R2)               LAST SEGMENT DISPLAYED\n         BNZ   CBHIT2                   BR IF A CONTINUING DISPLAY\n         L     R6,8(,R5)                ELSE GET FIRST SEG ADDRESS\n         STCM  R6,B'0111',1(R2)         AND SAVE FOR LATER\n         MVI   0(R2),4                  NOTE CB FORMAT ROUTINE IN USE\n         USNGX CBS,R6\n         SPACE 1\nCBHIT2   LH    R0,CBSSIZE               LENGTH TO FETCH\n         LH    R2,CBSFIRST              OFFSET TO FETCH\n         AR    R2,R4                    ADD START OF CB ADDRESS\n         BAL   RLINK,GETSTOR            GO FETCH THE DATA          U024\n         BNZ   NOCB                     BR IF NOT ALL DATA FETCHED U054\n         SPACE 1\n         LA    R5,OUT1                  START OF SCREEN\n         LA    R2,DUMPDATA              POINT TO DATA BUFFER\n         SPACE 2\nCBLOOP   LH    R15,CBSTYPE              GET FORMAT ITEM TYPE\n         B     *+4(R15)                 GO TO FORMAT ROUTINE\n         B     FMT$LOC                  TYPE 0 END OF SEGMENT      U047\n         B     CBHEX                    TYPE 4 HEX\n         B     CBCONST                  TYPE 8 EBCDIC CONSTANT\n         B     CBEBCD                   TYPE 12 EBCDIC DATA\n         SPACE 2\n* EBCDIC CONSTANT ITEM\nCBCONST  LA    R15,CBSDATA              ADDR OF DATA ITEM\n         LH    R14,CBSLEN               LENGTH FOR MVC\n         LH    R1,CBSOFF                SCREEN OFFSET\n         AR    R1,R5                    ADD START OF SCREEM\n         EX    R14,CBEMVC               MOVE EBCDIC DATA\n         LA    R6,7(R14,R6)             POINT TO NEXT FOMAT ITEM\n         B     CBLOOP\n         SPACE 1\nCBEMVC   MVC   0(*-*,R1),0(R15)         MOVE EBCDIC DATA\n         SPACE 2\n* EBCDIC DATA ITEM\nCBEBCD   LH    R15,CBSDATA              OFFSET OF DATA TO SHOW\n         AR    R15,R2                   ADD START OF BUFFER\n         LH    R14,CBSLEN               LENGTH TO MOVE\n         LH    R1,CBSOFF                SCREEN OFFSET\n         AR    R1,R5                    ADD START OF SCREEN\n         EX    R14,CBEMVC               MOVE THE DATA\n         LA    R6,8(,R6)                POINT TO NEXT FORMAT ITEM\n         B     CBLOOP\n         SPACE 2\n* HEX DATA ITEM\nCBHEX    LH    R15,CBSDATA              DATA OFFSET\n         AR    R15,R2                   ADD START OF BUFFER\n         UNPK  TEMP1(9),0(5,R15)        UNPACK THE DATA\n         TR    TEMP1(8),HEXTAB          AND CONVERT TO HEX\n         IC    R14,CBSLEN+1             GET MVC LENGTH\n         LH    R1,CBSOFF                GET SCREEN OFFSET\n         AR    R1,R5                    ADD START OF SCREEN\n         LA    R15,TEMP1                FIRST DIGIT UNPACKED\n         TM    CBSLEN,1                 SEE IF NEXT DIGIT WANTED\n         BZ    CBHEX2                   BR IF NOT\n         LA    R15,TEMP1+1              ELSE POINT TO NEXT HEX DIGIT\n         SPACE 1\nCBHEX2   EX    R14,CBEMVC               MOVE THE DATA\n         LA    R6,8(,R6)                POINT TO NEXT FORMAT ITEM\n         B     CBLOOP\n         SPACE 2\n         DROPX R6\n         SPACE 5\n*---------------------------------------------------------------------*\n*\n* OVERLAY  --  MANIPULATE CONTROL BLOCK FORMATTING\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n*---  \"B\" COMMAND\n         SPACE 1\nOVERLAY  CSECT ,                                                   U070\n         USNGX OVERLAY,R12                                         U070\n         CLC   =C'NULL',OPERAND         SEE IF \"NO FMTTING\" WANTED U048\n         BE    OVERNULL                 BR IF YES\n         CLC   BLANKS(5),OPERAND        ANOTHER WAY TO SAY THAT    U048\n         BE    OVERNULL                 BR IF YES                  U019\n         CLC   =C'LIST',OPERAND         SEE IF LIST WANTED         U048\n         BE    OVERLIST                 BR IF YES                  U027\n         L     R5,CORECBS               GET CB MAP INDEX           U030\n         SPACE 2\nOVERLOOP CLI   0(R5),X'FF'              SEE IF END OF INDEX\n         BE    FORMAT                   BR IF YES,IGNORE COMMAND\n         CLC   OPERAND(4),0(R5)         SEE IF CB MATCH            U048\n         BE    OVERHIT                  BR IF YES\n         LA    R5,12(,R5)               ELSE POINT TO NEXT ENTRY\n         B     OVERLOOP                 AND KEEP LOOKING\n         SPACE 2\nOVERHIT  LH    R2,CURRENT               CURRENT HIST TABLE ENTRY OFFSET\n         L     R6,8(,R5)                START SEG ADDR FOR CB FOUND\n         ST    R6,HISTORY+4(R2)         PUT IN HISTORY TABLE\n         LA    R2,HISTORY+4(R2)         -> FLAG BYTE IN HIST TABLE\n         MVI   0(R2),4                  NOTE CB FORMAT IN USE\n         B     FORMAT                   GO SHOW IT\n         SPACE 2\nOVERNULL LH    R2,CURRENT               CURRENT HIST TABLE ENTRY OFFSET\n         LA    R2,HISTORY+4(R2)         -> FLAG BYTE IN HIST TABLE\n         MVI   0(R2),8                  SUPPRESS CB OVERLAY\n         B     FORMAT                   GO SHOW STORAGE\n         SPACE 2\nOVERLIST L     R5,CORECBS               -> MAP INDEX               U030\n         BAL   R14,ERASE                CLEAR THE SCREEN           U027\n         MVC   INPLINE,BLANKS           CLEAR INPUT LINE           U027\n       MVC MSGLINE+22(36),=C'*** AVAILABLE CONTROL BLOCK MAPS ***' U044\n         SR    R15,R15                  INITIAL COLUMN OFFSET      U027\n         SPACE 1\nOVRLST10 LA    R1,OUT1(R15)             -> FIRST SLOT              U044\n         LA    R0,16                    NUMBER OF LINES            U044\n         SPACE 1\nOVRLST20 CLI   0(R5),X'FF'              END OF INDEX?              U027\n         BE    DISPLAY                  YES - DISPLAY THE RESULTS  U027\n         MVC   0(4,R1),0(R5)            NO - MOVE CB NAME TO SCRN  U027\n         MVC   TEMP1(4),0(R5)           COPY CB NAME               U027\n         TR    TEMP1(4),VALCHAR         GET RID OF GARBAGE CHARS   U027\n         CLC   TEMP1(4),0(R5)           DID IT CHANGE?             U027\n         BE    OVRLST30                 NO - OK                    U027\n         HEX   (0,R1),(0,R5),LEN=4      YES - SHOW IT IN HEX       U027\n         SPACE 1\nOVRLST30 LH    R14,6(,R5)               GET OFFSET OF IDENTIFIER   U027\n         MVI   10(R1),C'+'              ASSUME POSITIVE            U027\n         LTR   R14,R14                  IS IT?                     U027\n         BNM   OVRLST40                 YES - SKIP                 U027\n         LPR   R14,R14                  CONVERT OFFSET TO POSITIVE U027\n         MVI   10(R1),C'-'              INDICATE NEGATIVE          U027\nOVRLST40 STH   R14,TEMP1                SET DOWN OFFSET            U027\n         HEX   (11,R1),TEMP1,LEN=2      PUT IT ON THE SCREEN       U027\n         LA    R1,79(,R1)               -> NEXT SCREEN LINE        U027\n         LA    R5,12(,R5)               -> NEXT ENTRY              U027\n         BCT   R0,OVRLST20              FILL THIS COLUMN           U027\n         LA    R15,20(,R15)             NEXT COLUMN OFFSET         U027\n         B     OVRLST10                 GO TO TOP OF NEXT COLUMN   U027\n         SPACE 1\n         DROPX R12                      OVERLAY (local base)       U070\n         EJECT\n*---------------------------------------------------------------------*\n*\n* DOWN -- SCROLL DOWN 256 BYTES OR NEXT CTRL BLK SEGMENT\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n*---  \"D\" COMMAND\n*---  PF8, PF20\n         SPACE 1\nCORE     CSECT ,                                                   U070\nDOWN     LH    R2,CURRENT               CURRENT HIST TABLE POINTER\n         LA    R2,HISTORY(R2)           POINT TO HIST TABLE ENTRY\n         CLI   4(R2),4                  SEE IF THIS IS A CB DISPLAY\n         BE    DOWNCB                   BR IF YES\n         L     R1,0(,R2)                ELSE GET ADDR TO SHOW\n         AH    R1,=H'256'               AND MOVE DOWN ONE SCREEN\n         ST    R1,0(,R2)                AND REPLACE IN HIST TABLE  U063\n*%%% might need to zero high byte if not XA                        U063\n         B     FORMAT                   GO DISPLAY IT\n         SPACE 2\nDOWNCB   L     R1,4(,R2)                GET CB SEGMENT ADDR\n         L     R1,4(,R1)                GET NEXT SEG ADDR\n         STCM  R1,7,5(R2)               AND PUT IN HIST TABLE\n         B     FORMAT                   GO SHOW IT\n         SPACE 4\n*---------------------------------------------------------------------*\n*\n* UP   -- SCROLL UP   256 BYTES OR PREV CTRL BLK SEGMENT\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n*---  \"U\" COMMAND\n*---  PF7, PF19\n         SPACE 1\nUP       LH    R2,CURRENT               CURRENT HIST TABLE POINTER\n         LA    R2,HISTORY(R2)           POINT TO HIST TABLE ENTRY\n         CLI   4(R2),4                  SEE IF THIS IS A CB DISPLAY\n         BE    UPCB                     BR IF YES\n         L     R1,0(,R2)                ELSE GET ADDR TO SHOW\n         SH    R1,=H'256'               AND MOVE UP ONE SCREEN\n         ST    R1,0(,R2)                AND REPLACE IN HIST TABLE  U063\n*%%% might need to zero high byte if not XA                        U063\n         B     FORMAT                   GO DISPLAY IT\n         SPACE 2\nUPCB     L     R1,4(,R2)                GET CB SEGMENT ADDR\n         L     R1,0(,R1)                GET PREV SEG ADDR\n         STCM  R1,7,5(R2)               AND PUT IN HIST TABLE\n         B     FORMAT                   GO SHOW IT\n         EJECT\n*---------------------------------------------------------------------*\n*\n* AUTO -- START AUTO UPDATING\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n*---  PF2\n         SPACE 1\nUPDATE   XI    FLAGS,AUTOFLAG           FLIP AUTO UPDATE MODE      U007\n         B     FORMAT                   AND GO FORMAT THE SCREEN   U007\n         SPACE 5\n*---------------------------------------------------------------------*\n*\n* REPEAT -- REPEAT LAST INPUT LINE\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n*---  PF6\n         SPACE 1\nREPEAT   MVC   INPLINE,INPSAVE          COPY SAVED INPUT\n         B     ISCAN2                   AND PROCESS IT\n         SPACE 5\n*---------------------------------------------------------------------*\n*\n*  ESTABLISH SCREEN MODE\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n*---  \"MODE\" COMMAND\n         SPACE 1\nMODE1    OI    MODEFLAG,MIDDUMP         MODE 1 MEANS BACK UP 4 LINES\n         B     FORMAT\n         SPACE 2\nMODE2    NI    MODEFLAG,255-MIDDUMP     MODE 2 MEANS BACKUP 0\n         B     FORMAT\n         EJECT\n*---------------------------------------------------------------------*\n*\n* LINK -- LINK TO LABELED CONTROL BLOCK FIELD\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n*---  \"L\" COMMAND\n         SPACE 1\nLINK     CSECT ,                                                   U070\n         USNGX LINK,R12                                            U070\n         LH    R5,CURRENT               CURRENT HIST TABLE POINTER\n         LA    R5,HISTORY(R5)           POINT TO HIST TABLE ENTRY\n         CLI   4(R5),4                  SEE IF CB FORMATTING IN USE\n         BE    LINK2                    BR IF YES\n         MVC   MSGLINE(64),=C'***** LINK NOT POSSIBLE - CONTROL BLOCK F$\n               ORMATTING NOT IN EFFECT'                            U038\n         B     FORMAT                   AND RESHOW SCREEN\n         SPACE 1\nLINK2    XR    R3,R3                    clear for ICM              U064\n         ICM   R3,B'0111',5(R5)         GET CURRENT CB SEG ADDRESS U064\n         LR    R4,R3                    SAVE THE START OF SEG ADDR\n         USNGX CBS,R3\n         SPACE 1\nLINK3    LH    R15,CBSTYPE              GET ITEM TYPE\n         B     *+4(R15)                 GO HANDLE ITEM TYPE\n         B     LINKEND                  END OF SEGMENT\n         B     LINKHEX                  HEX ITEM\n         B     LINKCON                  CONSTANT ITEM\n         B     LINKHEX                  EBCD ITEM\n         SPACE 2\n* HEX    ITEM\nLINKHEX  LA    R3,8(,R3)                POINT TO NEXT ITEM\n         B     LINK3                    CHECK NEXT ITEM\n         SPACE 2\n* CONST  ITEM  (A LABEL)\nLINKCON  LH    R14,CBSLEN               GET LABEL LENGTH\n         LA    R15,CBSDATA              POINT TO THE LABEL\n         EX    R14,LINKEX               SEE IF ITS THE SAME\n         LA    R3,7(R3,R14)             POINT TO NEXT ITEM\n         BNE   LINK3                    BR IF NOT A MATCH, IGNORE IT\n         LA    R1,OPERAND+1(R14)        -> BYTE AT END OF COMMAND  U048\n         CLI   0(R1),C' '               SEE IF FOLLOWED BY BLANK\n         BNE   LINK3                    BR IF NOT A MATCH, IGNORE IT\n         CLI   CBSTYPE+1,4              SEE IF NEXT ITEM IS HEX\n         BNE   LINK3                    IF NOT, ANALYZE IT FOR A LABEL\n         SPACE 1\n* A MATCH HAS  BEEN FOUND. FETCH THE  ADDRESS TO LINK TO\n         SR    R1,R1                    CLEAR FOR IC\n         IC    R1,CBSLEN+1              LENGTH OF ITEM  MINUS 1\n         LA    R1,2(,R1)                TRUE LENGTH PLUS 1 FOR ROUNDING\n         SRL   R1,1                     GET NUMBER OF BYTES TO FETCH\n         LR    R0,R1                    COPY TO LENGTH REG\n         LH    R2,CURRENT               HIST TABLE POINTER\n         L     R2,HISTORY(R2)           CCURRENT DISPLAY ADDRESS\n         AH    R2,CBSDATA               OFFSET OF ITEM TO FETCH\n         AH    R2,CBSFIRST-CBS(R4)      AND REMEMBER THE SEGMENT OFFSET\n         BAL   RLINK,GETSTOR            FETCH THE  ADDRESS         U024\n         BNZ   LINK3                    BR IF DATA CANT BE FETCHED U054\n         BAL   R15,FWDSUB               UPDATE HIST TABLE TO NEXT\n         SR    R15,R15                  CLEAR FOR IC\n         IC    R15,CBSLEN+1             GET LENGTH MINUS 1 AGAIN\n         LA    R15,1(,R15)              GET TRUE LENGTH\n         SLL   R15,2                    4 BITS PER NIBBLE\n         SR    R0,R0                    CLEAR RESULT REG\n         L     R1,DUMPDATA              LOAD ADDRESS THAT WAS FETCHED\n         TM    CBSLEN,1                 SEE IF ODD DIGIT WANTED\n         BZ    *+8                      BR IF NOT\n         SLL   R1,4                     ELSE SHIFT OUT UNWANTED BITS\n         SLDL  R0,0(R15)                ISOLATE DESIRED BITS\n         LH    R2,CURRENT               NEW HIST TABLE POINTER\n         ST    R0,HISTORY(R2)           SAVE IN HIST TAB\n         SR    R0,R0                    CLEAR CBSEGMENT INDICATOR\n         ST    R0,HISTORY+4(R2)         SAVE IN HIST TABLE\n         B     FORMAT                   GO FORMAT THE NEW CB\n         DROPX R3\n         SPACE 2\n         USNGX CBS,R4\nLINKEND  L     R3,CBSNEXT               NEXT SEG ADDR\n         LR    R4,R3                    SAVE IT\n         CLM   R4,7,5(R5)               SEE IF SAME AS FIRST ONE\n         BNE   LINK3                    NO, SEARCH NEW SEG         U038\n         MVC   MSGLINE(35),=C'***** LINK FAILED - LABEL NOT FOUND' U038\n         B     FORMAT                   AND RESHOW SCREEN          U038\n         DROPX R4\n         SPACE 1\nLINKEX   CLC   OPERAND(*-*),0(R15)      CHECK FOR LABEL MATCH      U048\n         SPACE 1\n         DROPX R12                      LINK (local base)          U070\n         SPACE 2\n*---------------------------------------------------------------------*\n*\n*  SET INDIRECT FLAG\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n*---  \"IS\" COMMAND                                                 U066\n         SPACE 1\nCORE     CSECT ,                                                   U070\nINDIR$S  OI    FLAGS,INDFLAGS           Remember \"Short Indirect\"  U066\n         SPACE 2\n*---  \"I\" COMMAND\n         SPACE 1\nINDIR    OI    FLAGS,INDFLAG            SET FLAG\n         CLI   OPERAND,C' '             USE CURRENT ADDRESS        U048\n         BNE   NUMSCAN                  IF NO, GO SCAN INPUT ADDRESS\n         LH    R4,CURRENT               GET LAST ADDRESS DISPLAYED\n         L     R4,HISTORY(R4)           AND USE AS BASE FOR INDIRECT\n         B     ENDNUM\n         EJECT\n*---------------------------------------------------------------------*\n*\n*  FIND MODULE IN LPA (PLPA, MLPA, FLPA)\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n*---  \"M\" COMMAND\n         SPACE 1\nMODULE   L     R1,16           CVTPTR   -> CVT                     U033\n         L     R3,X'80'(,R1)   CVTNUCB  -> TOP OF NUCLEUS          U037\n         L     R4,X'168'(,R1)  CVTLPDIR -> FIRST LPDE (BEGIN PLPA?)U033\n         L     R5,X'BC'(,R1)   CVTQLPAQ -> -> FIRST LPAQ           U037\n         L     R5,0(,R5)                -> RECENT LPA ACTIVE CDE   U052\n         USNGX CDENTRY,R5                                          U037\n         SPACE 2\nMODLOOP1 CLC   CDNAME,OPERAND           IS THIS THE MOD WE WANT?   U052\n         BE    MODHERE1                 YES - DISPLAY THIS LOC     U037\n         ICM   R5,B'1111',CDCHAIN       -> NEXT CDE                U052\n         BNZ   MODLOOP1                 NO - KEEP LOOKING          U037\n         SPACE 2\n*---  MODULE NOT FOUND ON ACTIVE LPA QUEUE.  SCAN ALL LPDE'S NOW   U037\nMOD$LPA  L     R3,16          CVTPTR    -> CVT                     U052\n         L     R6,X'160'(,R3) CVTLPDSR  -> LPDE SEARCH ROUTINE     U052\n         LM    R0,R1,OPERAND            MODULE NAME                U052\n         BALR  R14,R6                   CALL LPDE SEARCH ROUTINE   U052\n* R0, R1, R3, AND R14 MUST BE SET.\n* R0 RETURNS LPDE ADDRESS IF FOUND. R6, R8 AND R9 ARE ALTERED.\n* RETURN TO R14+0 IF FOUND, R14+4 IF NOT.\n         B     MODHERE2                 FOUND MODULE, USE IT       U052\n         SPACE 1\n         MVC   MSGLINE(32),=C'MODULE XXXXXXXX NOT FOUND IN LPA'    U037\n         MVC   MSGLINE+7(8),OPERAND     MODULE NAME TO MESSAGE     U048\n         B     FORMAT                   GO DISPLAY ERROR MSG       U033\n         SPACE 2\nMODHERE1 ST    R5,TEMP1                 SAVE CDE ADDRESS           U037\n         L     R1,CDENTPT               GET EPA                    U053\n         MVC   MSGLINE+15(4),=C'CDE='   SET TITLE                  U063\n         TM    CDATTR,CDMIN             MINOR CDE?                 U037\n         BNO   *+8                      NO - SKIP                  U037\n         L     R5,CDXLMJP               YES - GET PTR TO MAJOR     U037\n         MVC   MSGLINE+33(8),CDNAME     TRUE MODULE NAME TO MSG    U063\n         SPACE 1\n         MVC   MSGLINE+43(8),=C'LOC=PLPA'   ASSUME PLPA            U063\n         L     R5,CDXLMJP               -> EXTENT LIST             U037\n         DROPX R5                                                  U037\n         USNGX XTLST,R5                                            U037\n         L     R0,XTLMSBAA              ADDR OF MODULE (NOT EPA)   U062\n         SPACE 1\n         CL    R3,XTLMSBAA              NUCLEUS VS. ADDR           U062\n         BNH   MODNFLPA                 NOT IN FIXED LPA           U037\n         MVI   MSGLINE+47,C'F'          INDICATE FLPA              U063\n         B     MODHERE                  GO SET DISPLAY ADDRESS     U037\n         SPACE 1\nMODHERE2 LR    R4,R0                    -> RETURNED LPDE           U052\n         USNGX LPDE,R4                                             U052\n         ST    R4,TEMP1                 SAVE LPDE ADDRESS          U052\n         L     R1,LPDENTP               EPA                        U053\n         MVC   MSGLINE+14(5),=C'LPDE='  SET TITLE                  U063\n         MVC   MSGLINE+33(8),LPDENAME   MOVE MODULE NAME TO MSG    U063\n         TM    LPDEATTR,LPDEMIN         MINOR LPDE?                U037\n*U067    BNO   *+10                     NO - OK                    U037\n*U067    MVC   MSGLINE+33(8),LPDEMJNM   YES - MOVE TRUE MOD NAME   U063\n         BNO   *+8                      no - ok                    U067\n         L     R4,LPDEMJP               yes - get ptr to major     U067\n         MVC   MSGLINE+33(8),LPDENAME   and move true mod name     U067\n         L     R0,LPDEXTAD              ADDR OF MODULE             U037\n         MVC   MSGLINE+43(8),=C'LOC=PLPA'   IDENTIFY PLPA          U063\n         B     MODHERE                  GO SET DISPLAY ADDRESS     U037\n         DROPX R4                       LPDE                       U052\n         SPACE 1\nMODNFLPA CL    R4,XTLMSBAA              TOP OF MLPA VS. ADDR       U062\n         BNH   MODHERE                  NOT IN MLPA - GO SET ADDR  U037\n         MVI   MSGLINE+47,C'M'          INDICATE MLPA              U063\n         SPACE 1\nMODHERE  HEX   MSGLINE+19,TEMP1,LEN=4   CDE OR LPDE ADDRESS        U063\n         ST    R1,TEMP1                 GET EPA                    U037\n         MVC   MSGLINE(4),=C'EPA='      MOVE TITLE                 U037\n         HEX   MSGLINE+4,TEMP1,LEN=4    FILL IN ENTRY POINT ADDR   U063\n         MVC   MSGLINE+29(4),=C'MOD='   ...                        U063\n         LH    R2,CURRENT               GET HISTORY TABLE PTR      U033\n         ST    R0,HISTORY(R2)           SET ADDR TO DISPLAY        U033\n         B     FORMAT                   GO DISPLAY IT              U033\n         SPACE 1\n         DROPX R5                                                  U037\n         EJECT\n*---------------------------------------------------------------------*\n*\n*  FIGURE OUT WHERE WE ARE                                         U070\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n*---  \"WHERE\" COMMAND\n         SPACE 1\nWHERE    CSECT ,                                                   U070\n         USNGX WHERE,R12                                           U070\n         L     R8,CURRLOC               address to process         U070\n         N     R8,=X'7FFFFFFF'          sure high bit zero         U070\n         SPACE 1                                                   U070\n         L     R4,PSATOLD-PSA           @ current TCB              U070\n         USNGX TCB,R4                                              U070\nWH$JPQ1  SR    R7,R7                                               U070\n         ICM   R7,B'0111',TCBJPQB       top CDE on JOB PACK queue  U070\n         BNZ   WH$JPQ2                                             U070\n         ICM   R4,15,TCBOTC                                        U070\n         BNZ   WH$JPQ1                                             U070\n         USNGX CDENTRY,R7                                          U070\nWH$JPQ2  BAL   R14,CK$CDE                                          U070\n         B     WH$FNDJ                                             U070\n         ICM   R7,15,CDCHAIN                                       U070\n         BNZ   WH$JPQ2                                             U070\n         DROPX R4                       TCB                        U070\n         SPACE 1                                                   U070\n* search active LPA queue                                          U070\n         LA    R6,=CL16'active LPA'                                U070\n         L     R3,CVTPTR                                           U070\n         USNGX CVTMAP,R3                                           U070\n         L     R7,CVTQLPAQ                                         U070\n* need FRR incase queue changes?                                   U070\nWH$LPA1  ICM   R7,15,CDCHAIN                                       U070\n         BZ    WH$LPA2                                             U070\n         BAL   R14,CK$CDE                                          U070\n         B     WH$FND                                              U070\n         B     WH$LPA1                                             U070\n         DROPX R7                       CDENTRY                    U070\n         SPACE 1                                                   U070\n* search lpa directory                                             U070\nWH$LPA2  LA    R6,=CL16'LPA directory'                             U070\n         SR    R7,R7                                               U070\n         ICM   R7,B'0111',CVTLPDIR                                 U070\n         USNGX LPDE,R7                                             U070\nWH$LPA3  BAL   R14,CK$CDE                                          U070\n         B     WH$FND                                              U070\n         LA    R7,LPDEMJNM+L'LPDEMJNM   @ NEXT LPDE ENTRY          U070\n         CLI   LPDENAME,X'FF'                                      U070\n         BNE   WH$LPA3                                             U070\n         DROPX R7                       LPDE                       U070\n         SPACE 1                                                   U070\n* try nuclkup; note RC 4 if not found (rc 8 if loc zero)           U070\n* returns csect addr in r0 too!                                    U070\n         LR    R0,R8                    don't have nuclkup kill r8 U070\n         NUCLKUP  BYADDR,NAME=TEMP2,ADDR=(0)                       U070\n         LTR   R15,R15                                             U070\n         BNZ   WH$NFND                                             U070\n         N     R0,=X'7FFFFFFF'          clear amode bit            U070\n         LR    R1,R0                                               U070\n         LA    R7,TEMP2-(CDNAME-CDENTRY)  fake a cde               U070\n         LA    R6,=CL16'in nucleus'                                U070\n         B     WH$FND                                              U070\n         SPACE 1                                                   U070\n* not found, try VSM list?                                         U070\nWH$NFND  MVC   MSGLINE(30),=CL30'not found'                        U070\n         B     FORMAT                                              U070\n         SPACE 1                                                   U070\nWH$FNDJ  MVC   MSGLINE+60(16),=CL16'tcb '                          U070\n         ST    R4,TEMP1                                            U070\n         HEX   MSGLINE+60+4,TEMP1,LEN=4                            U070\n         LA    R6,MSGLINE+60                                       U070\n         SPACE 1                                                   U070\nWH$FND   SR    R8,R1                    get offset into module     U070\n         MVI   MSGLINE,C'+'                                        U070\n         ST    R8,TEMP1                                            U070\n         HEX   MSGLINE+1,TEMP1,LEN=4                               U070\n         MVC   MSGLINE+9(4),=C' in '                               U070\n         MVC   MSGLINE+13(8),CDNAME-CDENTRY(R7)                    U070\n         MVC   MSGLINE+22(16),0(R6)                                U070\n         B     FORMAT                                              U070\n         SPACE 1                                                   U070\n* Entry: R7  = @ CDE (or LPDE) to check                            U070\n*        R8  = address to \"where\"                                  U070\n*        R14 = return addr  (+ 4 if not found, +0 if found)        U070\n*                                                                  U070\n* Exit:  R0  = @ past end of module                                U070\n*        R1  = @ begining of module                                U070\n*                                                                  U070\n* (only supports single extent XL's).                              U070\n         SPACE 1                                                   U070\n         USNGX CDENTRY,R7                                          U070\nCK$CDE   TM    CDATTR,CDMIN             minor?                     U070\n         BO    4(,R14)                  rif minor, not a match     U070\n         LA    R1,LPDEXTLN-LPDE+CDENTRY-8  assume LPDE             U070\n         TM    CDATTRB,CDELPDE          this LPDE?                 U070\n         BO    CK$CDE1                  bif LPDE                   U070\n         ICM   R1,15,CDXLMJP            @ extent list              U070\n         BZ    4(,R14)                  skip if no XL              U070\nCK$CDE1  LM    R0,R1,8(R1)              len/adr of module          U070\n         N     R0,=X'7FFFFFFF'          clear high bit in len      U070\n         N     R1,=X'7FFFFFFF'           and addr                  U070\n         AR    R0,R1                    @ past end of module       U070\n         CLR   R8,R0                    where :: end addr          U070\n*U072    BH    4(,R14)                  rif adr past end           U070\n         BNL   4(,R14)                  rif adr past end           U072\n         CLR   R8,R1                    where :: begin addr        U070\n         BL    4(,R14)                  rif adr before begining    U070\n         BR    R14                                                 U070\n         DROPX R7                       CDENTRY                    U070\n         DROPX R12                      WHERE (local base)         U070\n         EJECT\n*---------------------------------------------------------------------*\n*\n*  MANIPULATE HISTORY TABLE\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n*---  \">\" COMMAND\n         SPACE 1\nCORE     CSECT ,                                                   U070\nFWD      BAL   R15,FWDSUB               FORWARD 1 IN HIST TABLE\n         B     FORMAT\n         SPACE\nFWDSUB   LH    R1,CURRENT               CURRENT ENTRY INDEX\n         LA    R1,8(,R1)                ADVANCE 1\n         CH    R1,=Y(NUMHIST*8)         SEE IF WRAP NEEDED         U044\n         BL    *+6                      BR IF NOT\n         SR    R1,R1                    WRAP TO BEGINNING\n         STH   R1,CURRENT               STORE NEW OFFSET\n         BR    R15                      RETURN TO CALLER\n         SPACE 2\n*---  \"<\" COMMAND\n         SPACE 1\nBACK     LH    R1,CURRENT\n         SH    R1,=H'8'                 BACK UP ONE ENTRU\n         BNM   *+8                      BR IF NO BACKWARD WRAP\n         LA    R1,(NUMHIST-1)*8         ELSE GO TO END OF TABLE    U044\n         STH   R1,CURRENT               SAVE RESULT\n         B     FORMAT\n         EJECT\n*---------------------------------------------------------------------*\n*\n*  DISPLAY HISTORY TABLE                                           U028\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n*---  \"HISTORY\" COMMAND\n         SPACE 1\nSHOWHIST CSECT ,                                                   U070\n         USNGX SHOWHIST,R12                                        U070\n         BAL   R14,ERASE                CLEAR THE SCREEN BUFFER    U028\n         MVC   INPLINE,BLANKS           CLEAR INPUT LINE           U028\n         MVC   MSGLINE+29(21),=C'*** HISTORY TABLE ***'            U044\n         LA    R4,HISTORY               -> FIRST ENTRY             U028\n         LA    R14,NUMHIST*8(,R4)       -> PAST LAST ENTRY         U044\n         SR    R15,R15                  INITIAL LINE OFFSET        U028\n         LH    R2,CURRENT               OFFSET OF CURRENT ENTRY    U028\n         AR    R2,R4                    -> CURRENT ENTRY           U028\n         SPACE 1\nSHSTLP1  LA    R1,OUT1(R15)             -> FIRST OUTPUT LINE       U044\n         LA    R0,16                    NUMBER OF OUTPUT LINES     U044\n         SPACE 1\nSHSTLP2  HEX   (1,R1),(0,R4),LEN=4      LOCATION                   U063\n         CR    R4,R2                    IS THIS THE CURRENT ENTRY? U028\n         BNE   *+8                      NO - SKIP                  U028\n         MVI   0(R1),C'>'               YES - FLAG IT              U028\n         SPACE 2\n*---  SEE IF THIS LOCATION HAS HAD A SYMBOL DEFINED HERE.          U028\n         LA    R3,NAMES                 -> FIRST                   U028\n         LA    R5,NUMNAME               MAX NUMBER                 U044\n         SPACE 1\nSHSTLP3  CLI   0(R3),0                  UNUSED ENTRY?              U028\n         BE    SHWHST20                 YES - END THIS LOOP        U028\n         CLC   0(4,R4),8(R3)            THIS SYMBOL AT THIS LOC?   U063\n         BE    SHWHST79                 YES - SHOW ITS NAME        U028\n         LA    R3,12(,R3)               -> NEXT SYMBOL ENTRY       U028\n         BCT   R5,SHSTLP3               KEEP SEARCHING             U028\n         SPACE 2\n*---  SEE IF THIS IS A CONTROL BLOCK THAT WE KNOW OF               U028\nSHWHST20 CLI   4(R4),4                  CB DISPLAY HERE?           U028\n         BNE   SHWHST90                 NO - SKIP THIS SECTION     U028\n         SR    R3,R3                    clear for ICM              U063\n         ICM   R3,B'0111',5(R4)         -> CB SEGMENT              U028\n         SPACE 1\nSHWHST30 L     R5,CORECBS               -> CB INDEX                U028\n         MVC   TEMP1(4),0(R5)           COPY CB NAME               U028\n         TR    TEMP1(4),VALCHAR         SEE IF IT'S ANY GOOD       U028\n         CLC   TEMP1(4),0(R5)           DID IT CHANGE?             U028\n         BNE   SHWHST50                 YES - SKIP FUNNY ENTRIES   U028\n         SPACE 2\nSHWHST40 CLM   R3,B'0111',9(R5)         IS THIS IT?                U028\n         BE    SHWHST80                 YES - SHOW NAME            U028\n         ICM   R3,B'0111',1(R3)         -> previous segment        U063\n         CLM   R3,B'0111',5(R4)         HAVE WE WRAPPED?           U063\n         BNE   SHWHST40                 NO - KEEP TESTING THIS CB  U028\n         SPACE 1\nSHWHST50 LA    R5,12(,R5)               -> NEXT INDEX ENTRY        U028\n         CLI   0(R5),X'FF'              END OF INDEX?              U028\n         BNE   SHWHST40                 NO - KEEP LOOKING          U028\n         B     SHWHST90                 YES - DON'T DISPLAY IT     U028\n         SPACE 1\nSHWHST79 MVC   11(8,R1),0(R3)           MOVE IN SYMBOL NAME        U063\n         B     SHWHST90                 NEXT HISTORY TABLE ENTRY   U028\n         SPACE 1\nSHWHST80 MVC   11(3,R1),=C'CB='                                    U063\n         MVC   14(4,R1),0(R5)           MOVE CB NAME               U063\n         SPACE 1\nSHWHST90 LA    R4,8(,R4)                -> NEXT TABLE ENTRY        U028\n         LA    R1,79(,R1)               -> NEXT SCREEN LINE        U028\n         CR    R4,R14                   END OF HISTORY TABLE?      U028\n         BNL   DISPLAY                  YES - GO DISPLAY IT        U028\n         BCT   R0,SHSTLP2               FILL THIS COLUMN           U028\n         LA    R15,20(,R15)             -> NEXT COLUMN             U028\n         B     SHSTLP1                  GO TO TOP OF NEXT COLUMN   U028\n         SPACE 1\n         DROPX R12                      SHOWHIST (local base)      U070\n         EJECT\n*---------------------------------------------------------------------*\n*\n*   ADD ENTRY TO SYMBOL TABLE\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n*---  \"=\" COMMAND\n         SPACE 1\n*  MUCH OF THIS SECTION OF CODE WAS RE-ARRANGED, SO THAT           U029\n*  DUPLICATE AND INVALID SYMBOLS COULD BE DETECTED.                U029\n*  CODE WHICH WAS ONLY MOVED WAS NOT FLAGGED.                      U029\nDEFINE   CSECT ,                                                   U070\n         USNGX DEFINE,R12                                          U070\n         LA    R3,NAMES                 START OF TABLE\n         CLI   OPERAND,C' '             ANY OPERAND?               U048\n         BE    DEFLIST                  NO - SHOW HIM KNOWN NAMES  U028\n         MVC   TEMP1(8),BLANKS          CLEAR AN AREA              U029\n         LA    R15,9                    MAX LENGTH + 1\n         LA    R0,OPERAND               -> START OF SYMBOL         U048\n         LR    R1,R0                    COPY SYMBOL ADDR\n         SPACE 1\nDEFLOOP1 CLI   0(R1),C' '               SEE IF END OF SYM\n         BE    DEFEND                   BR IF YES\n         LA    R1,1(,R1)                -> NEXT BYTE OF SYMBOL\n         BCT   R15,DEFLOOP1             CONTINUE FOR 9 BYTES\n         MVC   MSGLINE(21),=C'***** SYMBOL TOO LONG'               U031\n         B     FORMAT2                  DISPLAY WITH CURSOR AT ERROR\n         SPACE 1\nDEFBAD   MVC   MSGLINE(50),=C'***** INVALID SYMBOL (SYMBOL ENTERED IS V$\n               ALID HEX)'                                          U046\n         B     FORMAT2                  DISPLAY WITH CURSOR AT ERROR\n         SPACE 1\nDEFEND   SR    R1,R0                    SYMBOL LENGTH\n         BCTR  R1,0                     FOR EXECUTE\n         EX    R1,DEFMOVE               MOVE SYMBOL\n         EX    R1,HEXTRT                DOES IT LOOK LIKE HEX?     U029\n         BZ    DEFBAD                   YES - DON'T ALLOW IT       U029\n         SPACE 1\n         LA    R15,NUMNAME              NUMBER OF TABLE ENTRIES    U044\n         SPACE 1\nDEFLOOP2 CLC   TEMP1(8),0(R3)           SYMBOL HERE?               U029\n         BE    DEFREPL                  YES - REDEFINE IT          U029\n         CLI   0(R3),X'0'               SEE IF UNUSED ENTRY\n         BE    DEFNEW                   BR IF SPACE FOUND          U029\n         LA    R3,12(,R3)               NEXT ENTRY ADDR\n         BCT   R15,DEFLOOP2             TRY ALL ENTRIES\n         MVC   MSGLINE(26),=C'***** SYMBOL TABLE IS FULL'          U031\n         B     FORMAT\n         SPACE 1\nDEFREPL  MVC   MSGLINE(16),=C'SYMBOL REDEFINED'                    U031\nDEFNEW   MVC   0(8,R3),TEMP1            PUT SYMBOL NAME IN TABLE   U029\n         LH    R1,CURRENT               GET CURRENT ADDRESS\n         L     R1,HISTORY(R1)\n         ST    R1,8(,R3)                STORE WITH SYMBOL\n         B     FORMAT\n         SPACE 1\nDEFMOVE  MVC   TEMP1(*-*),OPERAND       EXECUTED TO MOVE SYMBOL    U048\n         SPACE 2\nDEFLIST  BAL   R14,ERASE                CLEAR THE SCREEN BUFFER    U028\n         MVC   INPLINE,BLANKS           CLEAR INPUT LINE           U028\n         MVC   MSGLINE+28(23),=C'*** DEFINED SYMBOLS ***'          U044\n         SR    R15,R15                  INITIAL DISP LINE OFFSET   U028\n         SPACE 1\nDEF710   LA    R1,OUT1(R15)             -> FIRST OUTPUT LINE       U044\n         LA    R0,16                    # OF LINES TO USE          U044\n         SPACE 1\nDEF720   CLI   0(R3),0                  UNUSED ENTRY?              U028\n         BE    DISPLAY                  YES - DISPLAY THE RESULTS  U028\n         MVC   0(8,R1),0(R3)            MOVE SYMBOL NAME TO SCREEN U028\n         HEX   (10,R1),(8,R3),LEN=4     AND ITS VALUE              U063\n         LA    R1,79(,R1)               -> NEXT LINE               U028\n         LA    R3,12(,R3)               -> NEXT SYMBOL ENTRY       U028\n         BCT   R0,DEF720                FILL THIS COLUMN           U028\n         LA    R15,20(,R15)             GET NEXT COLUMN OFFSET     U028\n         B     DEF710                   START AT TOP OF NEXT COL   U028\n         SPACE 1\n         DROPX R12                      DEFINE (local base)        U070\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  SCAN THE ADDRESS EXPRESSION                                        *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*   R0  - WORK                                                        *\n*   R1  - WORK                                                        *\n*   R2  - WORK                                                        *\n*   R3  - SCAN POINTER                                                *\n*   R4  - VALUE                                                       *\n*   R14 - WORK                                                        *\n*   R15 - WORK                                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\nCORE     CSECT ,                                                   U070\n         SPACE 1\nNUMSCANX MVC   OPERAND,INPLINE          RESTORE COMMAND LINE       U049\n         SPACE 1\n*---  \",\" COMMAND\nNUMSCAN  L     R2,CURRLOC               INPUT VALUE                U057\n         BAL   R14,CALLEVAL             CALL EVAULATE ROUTINE      U057\n         CH    R15,=H'4'                SUCCESSFUL?                U049\n         BH    FORMAT2                  NO, GO DISPLAY MESSAGE     U057\n         LR    R4,R2                    SET NEW VALUE              U049\n         SPACE 1\nENDNUM   TM    FLAGS,INDFLAG            IS THIS AN INDIRECT REQ\n         BZ    EN01                     BR IF NOT                  U050\n*%%%% THE FOLLOWING CODE IS INVALID ON THE SRB!!!!!\n         BAL   R14,MS$KZERO             ENTER KEY ZERO             U050\n         L     R4,0(,R4)                DO THE INDIRECT\n         BAL   R14,MS$KUSER             ENTER USER KEY             U050\nEN01     LA    R4,0(,R4)                CLEAR HIGH BYTE            U021\n         TM    FLAGS,INDFLAGS           Short Indirect?            U066\n         BZ    *+8                      no - continue              U066\n         N     R4,=X'00FFFFFF'          yes - strip off garbage    U066\n         BAL   R15,FWDSUB               UPDATE HISTORY POINTR\n         LH    R15,CURRENT              NEW HIST TABLE OFFSET\n         ST    R4,HISTORY(R15)          SAVE VALUE IN HISTORY TABLE\n         SR    R0,R0                    INDICATE DISPLAY FORMAT IS DUMP\n         ST    R0,HISTORY+4(R15)        AND SAVE WITH HISTORY\n         B     FORMAT\n         EJECT\n*---------------------------------------------------------------------*\n*\n*  FIND A UCB                                                      U009\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n*---  \"UCB\" COMMAND                                                U024\n         SPACE 1\nUCB      TRT   OPERAND(3),NUMTAB        IS IT HEX?                 U048\n         BNZ   NUMSCANX                 NO                         U049\n          AIF   (&@@SPLVL GE 200).XA15                             U071\n         L     R14,16                   -> CVT                     U009\n         L     R14,40(,R14)             -> ILK2                    U009\n         SPACE 1\nUCBLOOP  CLC   =X'FFFF',0(R14)          END OF TABLE?              U009\n         BE    NUMSCANX                 YES - IT'S NOT HERE        U049\n         SR    R4,R4                    PREPARE FOR ICM            U009\n         ICM   R4,B'0011',0(R14)        LOAD UCB ADDRESS           U009\n         BZ    UCBNEXT                  NO - SKIP                  U009\n         CLC   OPERAND(3),13(R4)        IS THIS THE RIGHT ONE?     U048\n         BNE   UCBNEXT                  NO - TRY NEXT              U009\n         LH    R2,CURRENT               GET HISTORY TABLE PTR      U009\n         ST    R4,HISTORY(R2)           SET ADDR TO DISPLAY        U009\n         B     FORMAT                   GO DISPLAY IT              U009\n         SPACE 1\nUCBNEXT  LA    R14,2(,R14)              -> NEXT UCB ADDRESS        U009\n         B     UCBLOOP                  GO ON SCANNING             U009\n          AGO   .XA16                                              U071\n.XA15     ANOP                                                     U071\n         XC    IOSWORK,IOSWORK          init IOSVSUCB work area    U071\n         LA    R14,IOSWORK              -> 100 byte work area      U071\n         LA    R15,=X'00'               -> class byte              U071\n         LA    R0,IOSANSW               -> answer area             U071\n         STM   R14,R0,IOSPARM           set up parms for IOSVSUCB  U071\n         L     R15,16                   -> CVT                     U071\n         L     R3,CVTUCBSC-CVT(,R15)    -> LOOKUP ROUTINE          U071\n         SPACE 1\nUCBLOOP  LA    R1,IOSPARM               -> PARMLIST FOR IOSVSUCB   U071\n         LR    R15,R3                   -> IOSVSUCB                U071\n         BALR  R14,R15                  invoke IOSVSUCB            U071\n         CH    R15,=H'4'                did it work?               U071\n         BE    NUMSCANX                 yes - no more UCBs         U071\n         BL    *+8                      yes - we got a UCB         U071\n         EX    0,*                      no - invalid rc            U071\n         L     R4,IOSANSW               get returned UCB addr      U071\n         CLC   OPERAND(3),13(R4)        is this the right one?     U071\n         BNE   UCBLOOP                  no - try next              U071\n         LH    R2,CURRENT               get history table ptr      U071\n         ST    R4,HISTORY(R2)           set addr to display        U071\n         B     FORMAT                   go display it              U071\n.XA16     ANOP                                                     U071\n         SPACE 3\n*---------------------------------------------------------------------*\n*\n*  PAGEFIX AND PAGEFREE COMMANDS                                   U020\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n*---  \"PAGEFREE\" COMMAND\n         SPACE 1\nPAGEFREE TM    FLAGS,AUTHUSER           CAN HE DO THIS?            U020\n         BNO   NUMSCANX                 NO - IGNORE COMMAND        U049\n         TM    FLAGS,AUTHAPF            CAN I DO THIS?             U020\n         BNO   ZOTNOT                   NO - TELL HIM SORRY        U020\n         OC    ASID,ASID                IN ANOTHER A.S.?           U047\n         BNZ   PAGENOPE                 YES - COMMAND INVALID      U047\n         LH    R1,CURRENT               HISTORY TABLE POINTER      U020\n         L     R1,HISTORY(R1)           GET CURRENT ADDRESS        U020\n         N     R1,=X'FFFFF000'          MAKE IT A 4K BOUNDARY      U055\n         SPACE 1\n         PGFREE  R,A=(1)                                           U020\n         SPACE 1\n         LTR   R15,R15                  OK?                        U020\n         BZ    *+8                      YES - CONTINUE             U020\n         EX    0,*                      NO - DIE                   U020\n         MVC   MSGLINE(10),=C'PAGE FREED'                          U020\n         B     FORMAT                   RE-DISPLAY SCREEN          U020\n         SPACE 2\n*---  \"PAGEFIX\" COMMAND\n         SPACE 1\nPAGEFIX  TM    FLAGS,AUTHUSER           CAN HE DO THIS?            U020\n         BNO   NUMSCANX                 NO - IGNORE COMMAND        U049\n         TM    FLAGS,AUTHAPF            CAN I DO THIS?             U020\n         BNO   ZOTNOT                   NO - TELL HIM SORRY        U020\n         OC    ASID,ASID                IN ANOTHER A.S.?           U047\n         BNZ   PAGENOPE                 YES - COMMAND INVALID      U047\n         LH    R1,CURRENT               HISTORY TABLE POINTER      U020\n         L     R1,HISTORY(R1)           GET CURRENT ADDRESS        U020\n         N     R1,=X'FFFFF000'          MAKE IT A 4K BOUNDARY      U055\n         LA    R0,FIXECB                -> ECB                     U020\n         SPACE 1\n         PGFIX R,A=(1),LONG=Y,ECB=(0)   FIX IT                     U020\n         SPACE 1\n         CH    R15,=H'8'                WAIT FOR IT?               U020\n         BE    FIXWAIT                  YES                        U020\n         LTR   R15,R15                  OK?                        U020\n         BZ    FIXDONE                  YES - CONTINUE             U020\n         EX    0,*                      NO - DIE                   U020\n         SPACE 2\nFIXWAIT  WAIT  ECB=FIXECB               WAIT FOR THE PAGE          U020\n         SPACE 1\n         CLI   FIXECB+3,0               OK?                        U020\n         BE    FIXDONE                  YES                        U020\n         MVC   MSGLINE(13),=C'BAD POST CODE'                       U020\n         B     FORMAT                   RE-DISPLAY SCREEN          U020\n         SPACE 2\nFIXDONE  MVC   MSGLINE(37),=C'PAGE FIXED (WHILE YOU ARE SWAPPED IN)'\n         B     FORMAT                   RE-DISPLAY SCREEN          U020\n         SPACE 3\nPAGENOPE MVC   MSGLINE(30),=C'***** COMMAND INVALID WITH SRB'      U047\n         B     FORMAT                   RE-DISPLAY SCREEN          U047\n         EJECT\n*---------------------------------------------------------------------*\n*\n*  STORAGE ALTERATION ROUTINES                                     U017\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n*---  \"S\", \"X\", \"O\", \"N\" COMMANDS\n         SPACE 1\nSTORES   BAL   R1,STORE                 GO TO ROUTINE              U017\n         MVC   0(*-*,R4),ALTRDATA       << EXECUTED >>             U017\n         SPACE 1\nSTOREX   BAL   R1,STORE                 GO TO ROUTINE              U017\n         XC    0(*-*,R4),ALTRDATA       << EXECUTED >>             U017\n         SPACE 1\nSTOREO   BAL   R1,STORE                 GO TO ROUTINE              U017\n         OC    0(*-*,R4),ALTRDATA       << EXECUTED >>             U017\n         SPACE 1\nSTOREN   BAL   R1,STORE                 GO TO ROUTINE              U017\n         NC    0(*-*,R4),ALTRDATA       << EXECUTED >>             U017\n         SPACE 3\nSTORE    OC    ASID,ASID                IN ANOTHER A.S.?           U047\n         BNZ   INVSTORE                 YES - COMMAND INVALID      U047\n         ST    R1,ALTERPTR              SAVE PTR TO ALTER INSTR    U017\n         LA    R6,ALTERLEN              -> MY AREA                 U048\n         BAL   RLINK,GETSTRNG           CONVERT THE OPERAND        U032\n         LH    R2,CURRENT               HISTORY TABLE POINTER      U017\n         L     R4,HISTORY(R2)           GET ADDRESS TO ALTER       U017\n         L     R3,ALTERPTR              GET ADDRESS OF INSTRUCTION U017\n         LH    R5,ALTERLEN              GET LENGTH TO ALTER        U048\n         BCTR  R5,0                     -1 FOR EX                  U017\n         OI    FLAGS,PGMCHKOK           ALLOW PGM CHECKS           U041\n         BAL   R14,MS$KZERO             YES - SO DO IT             U024\n         LA    R14,BADSTORE             SET SPIE RETURN ADDR       U022\n         EX    R5,0(,R3)                DO THE ALTER               U017\n         SPACE 1\nBADSTORE BAL   R14,MS$KUSER             YES - SO UN-DO IT          U024\n         NI    FLAGS,255-PGMCHKOK       DISALLOW PGM CHECKS        U041\n         B     FORMAT                   DISPLAY MY HANDYWORK       U017\n         SPACE 2\nINVSTORE MVC   MSGLINE(30),=C'***** ALTER INVALID IN XM MODE'      U061\n         B     FORMAT                                              U047\n         EJECT\n*---------------------------------------------------------------------*\n*\n*  SEARCH FOR SOME DATA                                            U032\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n*---  PF5\n         SPACE 1\nFINDKEY  MVC   INPLINE,BLANKS           CLEAR THE INPUT            U032\n         MVI   INPLINE,C'F'             SIMULATE COMMAND           U032\n         MVC   OPERAND,BLANKS           PF5 HAS NO OPERAND         U048\n         L     R12,=A(FIND)             set local base             U070\n         BR    R12                      go to it                   U070\n         SPACE 2\n*---  \"F\" COMMAND\n         SPACE 1\nFIND     CSECT ,                                                   U070\n         USNGX FIND,R12                                            U070\n         MVC   MSGLINE,BLANKS           CLEAR MESSAGE AREA         U048\n         LA    R6,FINDLEN               -> MY AREA                 U048\n         BAL   RLINK,GETSTRNG           CONVERT THE OPERAND        U032\n         SPACE 1\n         STIMER  TASK,BINTVL==A(10000*100)  SET FOR 10,000 SECS    U032\n         SPACE 1\n         XC    FINDCNT1(4*2),FINDCNT1   CLEAR COUNTERS             U032\n         LH    R6,FINDLEN               GET LENGTH TO FIND         U048\n         SH    R6,=H'2'                 GET EX LENGTH OF REMAINDER U032\n         SR    R1,R1                    CLEAR FOR IC               U032\n         IC    R1,FINDDATA              GET FIRST CHARACTER        U032\n         LA    R1,TRTAB(R1)             -> LOC IN TRTAB            U032\n         XC    TRTAB,TRTAB              SET TO STOP ON ...         U032\n         MVI   0(R1),X'FF'              ... FIRST CHAR TO FIND     U032\n         LH    R1,CURRENT               GET OFFSET INTO HIST TBL   U032\n         L     R3,HISTORY(R1)           -> LOCATION TO FETCH       U032\n         CLI   OPERAND,C' '             WAS THERE AN OPERAND?      U048\n         BNE   *+8                      YES - START AT CURRENT LOC U032\n         LA    R3,1(,R3)                NO - START AT NEXT BYTE    U032\n         SPACE 2\nFIND$LP1 LR    R2,R3                    GET ADDRESS TO FETCH       U032\n         LA    R1,256(,R2)              END OF DATA + 1            U054\n         CLR   R1,R2                    DID IT WRAP?               U054\n         BH    *+6                      NO, USE AS IS              U054\n         XR    R1,R1                    YES, TRUNCATE TO END       U054\n         SR    R1,R2                    ACTUAL LENGTH TO FETCH     U054\n         LA    R0,0(,R1)                CLEAR NOISE BITS           U054\n         BAL   RLINK,GETSTOR            RETRIEVE DATA              U054\n         C     R2,LOGOOD                IS FIRST PART AVAILABLE?   U054\n         BNE   FINDFAIL                 NO, SKIP IMMEDIATE         U054\n         L     R4,HIGOOD                -> HIGH VALID BYTE         U054\n         SR    R4,R2                    VALID LENGTH - 1           U054\n         SR    R4,R6                    REAL SCAN LENGTH (TRICKY)  U054\n         BNP   FINDFAIL                 COULDN'T WORK ANYWAY       U054\n         SPACE 1\nFINDGET  L     R1,FINDCNT1              GET BYTES SCANNED          U032\n         AR    R1,R4                    INCREMENT                  U032\n         ST    R1,FINDCNT1              SAVE NEW COUNT             U032\n         LA    R1,DUMPDATA              -> SCAN DATA               U054\n         LR    R0,R1                    -> SCAN DATA               U054\n         AR    R0,R4                    -> END OF SCAN DATA + 1    U054\n         BCTR  R0,0                     -> END OF SCAN DATA        U054\n         SPACE 1\nFIND$LP2 LR    R2,R0                    -> END OF SCAN DATA + 1    U054\n         SR    R2,R1                    LENGTH TO SCAN             U054\n         BM    FINDNEXT                 RAN OUT OF ROOM            U054\n         EX    R2,FIND$TRT              FIND THE FIRST CHAR        U054\n         BZ    FINDNEXT                 NOT FOUND, GET NEXT DATA   U032\n         LTR   R6,R6                    MORE THAN 1 BYTE?          U032\n         BM    FINDDISP                 NO - FOUND IT - GO DISPLAY U032\n         EX    R6,FIND$CLC              DOES THE REST MATCH?       U032\n         BE    FINDDISP                 YES - DISPLAY IT           U032\n         LA    R1,1(,R1)                NO - SKIP A BYTE           U054\n         B     FIND$LP2                 AND TRY AGAIN              U054\n         SPACE 1\nFINDNEXT LA    R3,0(R3,R4)              -> NEXT CHUNK              U054\n         LTR   R3,R3                    DID IT WRAP?               U054\n         BNZ   FIND$LP1                 NO, PROCESS NEW DATA       U054\n         BCTR  R3,0                     ALL ONES                   U054\n         LA    R2,0(,R3)                ARCHITECTURE END OF MEMORY U054\n         B     FINDNOT                  EXIT                       U032\n         SPACE 2\nFINDFAIL XR    R4,R4                    CLEAR SCAN LENGTH          U054\n         AL    R3,=F'4096'              -> NEXT 4K                 U055\n         N     R3,=X'FFFFF000'          -> START OF PAGE           U055\n         LR    R1,R3                    -> NEXT PAGE               U054\n         SLR   R1,R2                    LENGTH SKIPPED             U054\n         A     R1,FINDCNT2              TOTAL LENGTH SKIPPED       U054\n         ST    R1,FINDCNT2              STORE BACK                 U032\n         B     FINDNEXT                 TRY NEXT PAGE              U054\n         SPACE 1\nFINDDISP LR    R2,R1                    SAVE DISPLAY ADDRESS       U032\n         LA    R0,DUMPDATA              -> START OF FETCH AREA     U032\n         SR    R2,R0                    COMPUTE OFFSET             U032\n         AR    R2,R3                    GET TRUE ADDRESS           U032\n         SPACE 1\nFINDNOT  BAL   R15,FWDSUB               UPDATE HISTORY POINTER     U032\n         LH    R15,CURRENT              GET NEW HIST TABLE OFFSET  U032\n         ST    R2,HISTORY(R15)          SAVE LOCATION IN HIST TBL  U032\n         SR    R0,R0                    INDICATE DISPLAY FMT=DUMP  U032\n         ST    R0,HISTORY+4(R15)        AND SAVE WITH HISTORY      U032\n         SPACE 2\n         TTIMER  CANCEL,MIC,TEMP1       SEE HOW MUCH TIME IS LEFT  U032\n         SPACE 1\n         MVC   MSGLINE,BLANKS           CLEAR MESSAGE AREA         U032\n         LM    R0,R1,TEMP1              REMAINING MUSEC * 2 **12   U032\n         SRDL  R0,12                    CONVERT TO MICROSECONDS    U032\n         D     R0,=F'1000'              CONVERT TO MILLISECS       U032\n         S     R1,=A(10000*1000)        SEE HOW MUCH WE USED       U032\n         MVC   MSGLINE+1(8),=X'202021204B202020' PUT IN EDIT MASK  U032\n         CVD   R1,TEMP1                 GET READY TO DISPLAY       U032\n         OI    TEMP1+7,X'0F'            REMOVE SIGN (WAS NEGATIVE) U032\n         ED    MSGLINE(9),TEMP1+4       SHOW HOW MUCH TIME USED    U032\n         MVC   MSGLINE(9),MSGLINE+2     SHIFT IT LEFT              U032\n         MVC   MSGLINE+8(7),=C'SECONDS'                            U032\n         SPACE 1\n         L     R1,FINDCNT1              GET # BYTES SCANNED        U032\n         SRL   R1,10                    CONVERT TO K BYTES SCANNED U032\n         BAL   RLINK,FINDCONV           FORMAT FOR PRINTING        U032\n         MVC   MSGLINE+17(5),TEMP2+1    MOVE THE CONVERTED NUMBER  U054\n         MVC   MSGLINE+22(9),=C'K SCANNED'                         U054\n         SPACE 1\n         L     R1,FINDCNT2              GET SKIPPED COUNT          U032\n         SRL   R1,10                    CONVERT TO KBYTES SKIPPED  U054\n         BAL   RLINK,FINDCONV           FORMAT FOR PRINTING        U032\n         MVC   MSGLINE+33(5),TEMP2+1    MOVE THE CONVERTED NUMBER  U054\n         MVC   MSGLINE+38(9),=C'K SKIPPED'                         U054\n         MVC   PGMCKMSG,BLANKS          CLEAR ANY PREVIOUS PGMCHK  U047\n         B     FORMAT                   AND GO DISPLAY             U032\n         SPACE 1\nFINDCONV CVD   R1,TEMP1                 CONVERT                    U032\n         MVC   TEMP2(6),=X'402020202120'  MOVE EDIT MASK           U032\n         ED    TEMP2(6),TEMP1+5         UNPACK IT                  U032\n         BR    RLINK                    RETURN TO MAINLINE         U032\n         SPACE 1\nFIND$TRT TRT   0(*-*,R1),TRTAB          << EXECUTED >>             U032\nFIND$CLC CLC   1(*-*,R1),FINDDATA+1     << EXECUTED >>             U032\n         SPACE 1\n         DROPX R12                      FIND (local base)          U070\n         EJECT\n*---------------------------------------------------------------------*\n*\n*  CONVERT CHARACTER OR HEX OPERAND                                U032\n*\n*---------------------------------------------------------------------*\n         SPACE 2\nCORE     CSECT ,                                                   U070\n         SPACE 1\n         USNGX STRWORK,R6                                          U032\nGETSTRNG CLI   OPERAND,C'*'             WANT RE-PROMPT?            U048\n         BE    SHOWSTR                  YES - DO IT                U032\n         CLI   OPERAND,C' '             ANY OPERAND?               U048\n         BE    SAMESTR                  NO - USE PREVIOUS          U017\n         XC    TRTAB(256),TRTAB         PREPARE TRT TABLE          U032\n         CLI   OPERAND,C'A'             DELIMITER?                 U048\n         BL    STRNGDLM                 YES - SPECIAL HANDLING     U017\n         MVI   TRTAB+C' ',255           SET TO STOP ON BLANKS      U032\n         LA    R1,OPERAND+78            PRESET STOP ADDRESS        U048\n         TRT   OPERAND(78),TRTAB        FIND A BLANK               U048\n         LR    R15,R1                   COPY STOP ADDRESS          U017\n         LA    R14,OPERAND              -> START                   U048\n         SR    R15,R14                  COMPUTE LENGTH OF HEX      U017\n         STC   R15,TEMP1                STORE FOR TEST             U017\n         TM    TEMP1,1                  EVEN NUMBER OF DIGITS?     U017\n         BO    BADHEX                   NO - BLOW OUT              U017\n         BCTR  R15,0                    -1 FOR EX                  U017\n         EX    R15,HEXTRT               SEE IF ALL GOOD HEX        U017\n         BNZ   BADHEX                   NOPE                       U017\n*  DO THIS BY BRUTE FORCE, SINCE IT'S EASIER                       U017\n         MVI   STRDLM,X'EF'             INDICATE NO DELIMITER      U032\n         LA    R2,STRDATA               -> DEST                    U032\n         LA    R3,OPERAND               -> SOURCE                  U048\n         SPACE 1\nHEXLOOP  MVC   TEMP1(2),0(R3)           GET 1 BYTE'S WORTH         U017\n         TR    TEMP1(2),HEXTAB          CONVERT TO PSUEDO HEX      U017\n         PACK  0(1+1,R2),TEMP1(2+1)     CONVERT TO INTERNAL HEX    U017\n         LA    R2,1(,R2)                BUMP DEST PTR              U017\n         LA    R3,2(,R3)                BUMP SOURCE PTR            U017\n         SH    R15,=H'2'                DESC SOURCE LENGTH         U017\n         BNM   HEXLOOP                  CONTINUE FOR ALL INPUT     U017\n         LA    R1,STRDATA+1-1           -> START OF ALTER DATA     U032\n*                                       (FUDGED FOR INCR ABOVE)    U017\n         SR    R2,R1                    COMPUTE LENGTH OF DATA     U017\n         STH   R2,STRLEN                SAVE LENGTH OF ALTER DATA  U048\n         BR    RLINK                    RETURN TO CALLER           U032\n         SPACE 1\nSTRNGDLM CLC   OPERAND(1),OPERAND+1     NULL STRING?               U048\n         BE    STRNGNUL                 YES - COMPLAIN             U032\n         SR    R1,R1                    CLEAR FOR IC               U017\n         IC    R1,OPERAND               GET DELIMITER              U048\n         STC   R1,STRDLM                SAVE FOR RE-PROMPT         U032\n         LA    R1,TRTAB(R1)             -> SPOT IN TRT TABLE       U032\n         MVI   0(R1),255                SET TO STOP THE TRT        U017\n         TRT   OPERAND+1(77),TRTAB      FIND ENDING DELIM          U048\n         BZ    NODELIM                  NONE?                      U017\n         LA    R0,OPERAND+1             -> START OF DATA           U048\n         SR    R1,R0                    COMPUTE LENGTH OF DATA     U017\n         STH   R1,STRLEN                SAVE LENGTH OF ALTER DATA  U048\n         MVC   STRDATA,OPERAND+1        AND SAVE THE DATA          U048\n         BR    RLINK                    RETURN TO CALLER           U032\n         SPACE 2\nSAMESTR  OC    STRLEN,STRLEN            ANY PREVIOUS DATA?         U048\n         BNZR  RLINK                    YES - RETURN TO CALLER     U032\n         MVC   MSGLINE(22),=C'***** OPERAND REQUIRED'              U024\n         B     FORMAT                   GO FORMAT THE SCREEN       U017\n         SPACE 2\nSHOWSTR  OC    STRLEN,STRLEN            ANY PREVIOUS DATA?         U048\n         BZ    STARNONE                 NO - BLOW                  U032\n         CLI   STRDLM,X'EF'             HEX OR CHAR?               U032\n         BE    STARHEX                  HEX                        U032\n         MVC   OPERAND(1),STRDLM        PUT IN LEADING DELIM       U048\n         MVC   OPERAND+1(76),STRDATA    MOVE DATA & TRAILING DELIM U048\n         B     FORMAT1                  DISPLAY IT                 U032\n         SPACE 2\nSTARHEX  LH    R1,STRLEN                GET LENGTH                 U048\n         LA    R3,OPERAND               -> OUTPUT AREA             U048\n         LA    R2,STRDATA               -> SOURCE                  U032\n         SPACE 1\nSTARHEX1 HEX   (0,R3),(0,R2),LEN=1      UN-DO A BYTE               U032\n         LA    R3,2(,R3)                -> NEXT OUTPUT PLACE       U032\n         LA    R2,1(,R2)                -> NEXT SOURCE             U032\n         BCT   R1,STARHEX1              UN-DO ALL                  U032\n         B     FORMAT1                  DISPLAY MY HANDIWORK       U032\n         SPACE 2\nSTARNONE MVC   MSGLINE(25),=C'***** NO PREVIOUS OPERAND'           U032\n         B     FORMAT1                                             U032\n         SPACE 2\nBADHEX   MVC   MSGLINE(17),=C'***** INVALID HEX'                   U031\n         B     FORMAT2                  DISP WITH CURSOR AT ERROR  U017\n         SPACE 2\nSTRNGNUL MVC   MSGLINE(25),=C'***** NULL STRING INVALID'           U032\n         B     FORMAT2                  DISP WITH CURSOR AT ERROR  U032\n         SPACE 2\nNODELIM  MVC   MSGLINE(25),=C'***** NO ENDING DELIMITER'           U031\n         B     FORMAT2                  DISP WITH CURSOR AT ERROR  U017\n         SPACE 1\nHEXTRT   TRT   OPERAND(*-*),NUMTAB      << EXECUTED >>             U048\n         SPACE 1\n         DROPX R6                                                  U032\n         EJECT\n*---------------------------------------------------------------------*\n*\n*  DISPLAY HELP ROUTINE\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n*---  \"H\", \"?\", AND \"HELP\" COMMANDS                                U043\n         SPACE 1\nHELPKEY  MVC   OPERAND,BLANKS           NO OPERAND FOR HELP KEY    U043\n         L     R12,=A(HELP)             set local base             U070\n         BR    R12                      go to it                   U070\n         SPACE 1\nHELP     CSECT ,                                                   U070\n         USNGX HELP,R12                                            U070\n         L     R4,=V(COREHELP)          -> HELP DESCRIPTORS        U043\n         MVC   INPLINE,BLANKS           CLEAR INPUT LINE           U025\n         MVI   INPLINE,C'?'             SET TO GO TO NEXT          U043\n         CLI   OPERAND,C' '             ANY OPERAND?               U043\n         BNE   *+8                      YES - KEEP IT              U043\n         MVI   OPERAND,C'1'             NO - ASSUME '1'            U043\n         CLI   OPERAND+1,C' '           OPERAND TOO LONG?          U043\n         BNE   HELPBAD                  YES - DISPLAY ERROR MSG    U043\n         CLI   OPERAND,C'0'             DIGIT?                     U043\n         BL    HELPBAD                  NO - DISPLAY ERROR MSG     U043\n         IC    R15,OPERAND              GET OPERAND DIGIT          U043\n         LA    R14,1(,R15)              SET DIGIT FOR...           U043\n         STC   R14,INPLINE+1            ... NEXT HELP SCREEN       U043\n         N     R15,=F'15'               STRIP IT                   U043\n         BZ    HELPBAD                  NO GOOD IF ZERO            U043\n         C     R15,0(,R4)               OUT OF RANGE?              U043\n         BH    HELPHIGH                 YES - DISPLAY ERROR MSG    U043\n         BNE   *+10                     SKIP IF NOT LAST           U043\n         MVC   INPLINE,BLANKS           TERMINATE AT THIS SCREEN   U043\n         BCTR  R15,0                    ADD IN V.F.F.              U043\n         SLL   R15,3                    *8                         U043\n         LA    R15,4(R4,R15)            -> DESCRIPTORS             U043\n         LM    R4,R5,0(R15)             GET (ADDR,LEN)             U043\n         LA    R2,MSGLINE               -> START OF OUTPUT AREA    U043\n         LA    R3,79*(16+1)             LENGTH                     U043\n         ICM   R5,B'1000',BLANKS        PAD CHAR                   U003\n         MVCL  R2,R4                    COPY IMAGE TO SCREEN BUF   U003\n         B     DISPLAY                  GO SHOW IT                 U003\n         SPACE 2                                                   U043\nHELPBAD  MVC   MSGLINE(28),=C'***** HELP - OPERAND INVALID'        U043\n         MVC   INPLINE(2),BLANKS        KILL REBUILT PROMPT        U043\n         B     FORMAT2                                             U043\n         SPACE 2                                                   U043\nHELPHIGH MVC   MSGLINE(33),=C'***** HELP - OPERAND OUT OF RANGE'   U043\n         MVC   INPLINE(2),BLANKS        KILL REBUILT PROMPT        U043\n         B     FORMAT2                                             U043\n         SPACE 1\n         DROPX R12                      HELP (local base)          U070\n         EJECT\n*---------------------------------------------------------------------*\n*\n*  FLIP KEY 0 FLAG                                                 U008\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n*---  \"Z\" COMMAND\n         SPACE 1\nCORE     CSECT ,                                                   U070\n         SPACE 1\nZOT      TM    FLAGS,AUTHUSER           CAN HE DO THIS?            U008\n         BNO   NUMSCANX                 NO - PRETEND LIKE BAD CMD  U049\n         TM    FLAGS,AUTHAPF            CAN WE DO THIS?            U008\n         BNO   ZOTNOT                   NOPE                       U008\n         XI    MODEFLAG,KEYZERO         FLIP FLAG                  U008\n         MVC   LOCLINE+48(7),=C'USERKEY'  ASSUME NOT KEY ZERO      U040\n         TM    MODEFLAG,KEYZERO         ARE WE RUNNING KEY ZERO?   U014\n         BNO   FORMAT                   NO - SKIP                  U014\n         MVC   LOCLINE+48(7),=C'KEYZERO'  YES - CHANGE MESSAGE     U040\n         B     FORMAT                   RE-DISPLAY                 U008\n         SPACE 1\nZOTNOT   MVC   MSGLINE(24),=C'***** NOT APF AUTHORIZED'            U031\n         B     FORMAT                   RE-DISPLAY                 U008\n         EJECT\n*---------------------------------------------------------------------*\n*\n*  SET JOBNAME                                                     U045\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n*---  \"JOB\" COMMAND\n         SPACE 1\nJOB      BAL   RLINK,JOBCHECK           CAN HE DO THIS?            U045\n         L     R1,16                    -> CVT                     U045\n         L     R1,X'22C'(,R1)           CVTASVT                    U045\n         L     R0,X'204'(,R1)           ASVTMAXU = MAXUSERS        U045\n         LA    R1,X'210'(,R1)           ASVTFRST -> FIRST ENTRY    U045\n         SPACE 2\nJOBLOOP  ICM   R14,B'1111',0(R1)        GET AN ASCB ADDR           U045\n         BM    JOBNEXT                  SKIP UNUSED ENTRIES        U045\n         USNGX ASCB,R14                                            U045\n         ICM   R15,B'1111',ASCBJBNI     -> INIT JOBNAME            U045\n         BNZ   *+12                     SKIP IF PRESENT            U045\n         ICM   R15,B'1111',ASCBJBNS     -> S/M/L JOBNAME           U045\n         BZ    JOBNEXT                  SKIP IF NO JOBNAME PTR     U045\n         CLC   OPERAND(8),0(R15)        THIS THE JOB?              U045\n         BE    JOBFOUND                 YES                        U045\n         SPACE 1\nJOBNEXT  LA    R1,4(,R1)                -> NEXT ASCB PTR           U045\n         BCT   R0,JOBLOOP               SEARCH ALL ASID'S          U045\n         MVC   MSGLINE(28),=C'***** JOB XXXXXXXX NOT FOUND'        U045\n         MVC   MSGLINE+10(8),OPERAND    PUT JOBNAME IN MESSAGE     U045\n         B     FORMAT2                                             U045\n         SPACE 2                                                   U045\nJOBFOUND MVC   JOBNAME,OPERAND          SAVE JOBNAME               U045\n         MVC   ASID,ASCBASID            SAVE ASID                  U045\n         ST    R1,ADDRASCB              SAVE OTHER ASCB ADDRESS    U045\n         B     ASIDBIND                 GO DO AXSET                U061\n         DROPX R14                                                 U045\n         SPACE 3\nJOBCHECK TM    FLAGS,AUTHUSER           CAN HE DO THIS?            U045\n         BNO   NUMSCANX                 NO - FAKE IT               U049\n         TM    FLAGS,AUTHAPF            CAN I DO THIS?             U045\n         BNO   ZOTNOT                   NO - TELL HIM              U045\n         XC    ASID,ASID                CLEAR ASID                 U045\n         CLI   OPERAND,C' '             ANY OPERAND?               U045\n         BE    ASIDBIND                 NO - GO DO AXSET           U061\n         CLC   OPERAND(8),=CL8'*'       RESET TO SELF?             U045\n         BE    ASIDBIND                 YES - GO DO AXSET          U061\n         BR    RLINK                    RETURN TO SUBCOMMAND       U045\n         EJECT\n*---------------------------------------------------------------------*\n*\n*  LOCATE SVC MODULE                                               U057\n*\n*---------------------------------------------------------------------*\n         SPACE 2\nSVC      CSECT ,                                                   U070\n         USNGX SVC,R12                                             U070\n         BAL   R14,CALLEVAL             EVALUATE SVC NUMBER        U057\n         CH    R15,=H'4'                IS THERE AN ERROR MESSAGE? U057\n         BH    FORMAT2                  YES, SKIP OUT QUICK        U057\n         BE    SVC99                    RELATIVE EXPR -- ERROR     U057\n         LTR   R2,R2                    SVC NUMBER NEGATIVE?       U057\n         BM    SVC99                    YES, ERROR                 U057\n         CH    R2,=H'255'               SVC NUMBER TOO HIGH?       U057\n         BH    SVC99                    YES, ERROR                 U057\n         SLL   R2,3                     (X8) OFFSET INTO SVC TABLE U057\n         L     R1,16           CVTPTR   -> CVT                     U057\n         L     R1,X'C8'(,R1)   CVTABEND -> SCVT                    U057\n         L     R1,X'84'(,R1)   SCVTSVCT -> SVCTABLE                U057\n         AR    R1,R2                    -> SVCTABLE ENTRY          U057\n         MVC   MSGLINE(10),=C'TYPE 1 SVC'                          U057\n         TM    4(R1),X'E0'              ANY TYPE BITS SET?         U057\n         BZ    SVC01                    NO, TYPE ONE SVC           U057\n         TM    4(R1),X'C0'              TYPE TWO OR THREE SET?     U057\n         MVI   MSGLINE+5,C'2'                                      U057\n         BM    SVC01                    MIXED, TYPE TWO            U057\n         MVI   MSGLINE+5,C'3'                                      U057\n         BO    SVC01                    BOTH, TYPE THREE           U057\n         MVI   MSGLINE+5,C'6'           NEITHER, TYPE SIX          U057\nSVC01    LA    R2,MSGLINE+10                                       U057\n         TM    4(R1),X'08'              AUTHORIZED?                U057\n         BZ    SVC02                    NO                         U057\n         MVC   0(5,R2),=C', APF'        YES, SAY SO                U057\n         LA    R2,5(,R2)                POSITION PAST MSG          U057\nSVC02    TM    4(R1),X'04'              PART OF ESR?               U057\n         BZ    SVC03                    NO                         U057\n         MVC   0(5,R2),=C', ESR'        YES, SAY SO                U057\n         LA    R2,5(,R2)                POSITION PAST MSG          U057\nSVC03    TM    4(R1),X'02'              NON-PREEMPTABLE            U057\n         BZ    SVC04                    NO                         U057\n         MVC   0(4,R2),=C', NP'         YES, SAY SO                U057\n         LA    R2,4(,R2)                POSITION PAST MSG          U057\nSVC04    CLI   6(R1),X'00'              ANY LOCKS?                 U057\n         BE    SVC50                    NO, EXIT                   U057\n         MVC   0(8,R2),=C', LOCKS:'                                U057\n         LA    R2,7(,R2)                POSITION PAST MSG          U057\n         TM    6(R1),X'80'              LOCAL LOCK?                U057\n         BZ    SVC05                    NO                         U057\n         MVC   2(6,R2),=C'LOCAL,'       YES, SAY SO                U057\n         LA    R2,7(,R2)                POSITION PAST MSG          U057\nSVC05    TM    6(R1),X'40'              CMS LOCK?                  U057\n         BZ    SVC06                    NO                         U057\n         MVC   2(4,R2),=C'CMS,'         YES, SAY SO                U057\n         LA    R2,5(,R2)                POSITION PAST MSG          U057\nSVC06    TM    6(R1),X'20'              OPT LOCK?                  U057\n         BZ    SVC07                    NO                         U057\n         MVC   2(4,R2),=C'OPT,'         YES, SAY SO                U057\n         LA    R2,5(,R2)                POSITION PAST MSG          U057\nSVC07    TM    6(R1),X'10'              SALLOC LOCK?               U057\n         BZ    SVC08                    NO                         U057\n         MVC   2(7,R2),=C'SALLOC,'      YES, SAY SO                U057\n         LA    R2,8(,R2)                POSITION PAST MSG          U057\nSVC08    TM    6(R1),X'08'              DISP LOCK?                 U057\n         BZ    SVC09                    NO                         U057\n         MVC   2(5,R2),=C'DISP,'        YES, SAY SO                U057\n         LA    R2,6(,R2)                POSITION PAST MSG          U057\nSVC09    MVI   0(R2),C' '               CLEAR TRAILING COMMA       U057\nSVC50    LH    R2,CURRENT               HISTORY TABLE OFFSET       U057\n         LA    R2,HISTORY(R2)           -> HISTORY TABLE ENTRY     U057\n         MVC   0(4,R2),0(R1)            SET ADDRESS TO DISPLAY     U057\n         B     FORMAT                   GO DISPLAY IT              U057\nSVC99    MVC   MSGLINE(24),=C'***** INVALID SVC NUMBER'            U057\n         B     FORMAT2                  GO WRITE MESSAGE           U057\n         SPACE 1\n         DROPX R12                      SVC (local base)           U070\n         EJECT\n*---------------------------------------------------------------------*\n*\n*  LOCATE SUBSYSTEM CONTROL VECTOR TABLE                           U058\n*\n*---------------------------------------------------------------------*\n         SPACE 2\nCORE     CSECT ,                                                   U070\n         SPACE 1\nSSCVT    L     R1,16           CVTPTR   -> CVT                     U058\n         L     R1,X'128'(,R1)  CVTJESCT -> JESCT                   U058\n         L     R1,X'18'(,R1)   JESSSCT  -> SSCVT                   U058\nSSCVT01  CLC   8(4,R1),OPERAND SSCTSNAM DESIRED SUBSYSTEM?         U058\n         BE    SSCVT02                  YES, GO DISPLAY IT         U058\n         ICM   R1,B'1111',4(R1)         NO, -> NEXT SSCVT          U058\n         BNZ   SSCVT01                  GOT ONE, TEST IT           U058\n         MVC   MSGLINE(30),=C'***** UNDEFINED SUBSYSTEM NAME'      U058\n         B     FORMAT2                  GO WRITE MESSAGE           U058\nSSCVT02  LH    R15,CURRENT              HISTORY TABLE OFFSET       U058\n         LA    R15,HISTORY(R15)         -> HISTORY TABLE ENTRY     U058\n         ST    R1,0(,R15)               SET ADDRESS TO DISPLAY     U058\n         B     FORMAT                   GO DISPLAY IT              U058\n         EJECT\n*---------------------------------------------------------------------*\n*\n*  SET ASID                                                        U045\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n*---  \"ASID\" COMMAND\n         SPACE 1\nASIDGET  CSECT ,                                                   U070\n         USNGX ASIDGET,R12                                         U070\n         BAL   RLINK,JOBCHECK           CAN HE DO THIS?            U045\n         TR    OPERAND,HEXTAB           CONVERT TO HEX             U045\n         LA    R1,OPERAND               -> START OF OPERAND        U045\n         SR    R0,R0                    CLEAR ACCUMULATOR          U045\n         LA    R14,15                   MASK                       U045\n         MVI   OPERAND+L'OPERAND-1,C' ' INSURE STOP                U045\n         SPACE 1\nASIDLOOP CLI   0(R1),C' '               END OF OPERAND?            U045\n         BE    ASIDEND                  YES                        U045\n         IC    R15,0(,R1)               GET A CHAR                 U045\n         NR    R15,R14                  STRIP IT                   U045\n         SLL   R0,4                     SHIFT PREVIOUS             U045\n         OR    R0,R15                   ADD IN THIS HEX DIGIT      U045\n         LA    R1,1(,R1)                -> NEXT INPUT CHAR         U045\n         B     ASIDLOOP                 CONTINUE                   U045\n         SPACE 1\nASIDEND  L     R1,16                    CVTPTR                     U045\n         L     R1,X'22C'(,R1)           CVTASVT                    U045\n         C     R0,X'204'(,R1)           ASVTMAXU                   U045\n         BH    ASIDBAD                  SPECIFIED GT MAX           U045\n         LTR   R0,R0                    POSITIVE?                  U045\n         BNP   ASIDBAD                  NO - ERROR                 U045\n         SLL   R0,2                     *4                         U045\n         LA    R1,X'20C'(,R1)           ASVTFRST -> FIRST ENT-4    U045\n         AR    R1,R0                    -> ASCB ADDRESS            U045\n         TM    0(R1),X'80'              UNUSED ENTRY?              U045\n         BO    ASIDFREE                 YES                        U045\n         L     R1,0(,R1)                -> ASCB                    U045\n         USNGX ASCB,R1                                             U045\n         MVC   ASID,ASCBASID            SAVE ASID                  U045\n         ST    R1,ADDRASCB              SAVE OTHER ASCB ADDRESS    U045\n         MVC   JOBNAME,=C'????????'     INITIALIZE JOBNAME         U045\n         ICM   R14,B'1111',ASCBJBNI     INITIATED JOBNAME          U045\n         BNZ   *+12                     SKIP IF GOT IT             U045\n         ICM   R14,B'1111',ASCBJBNS     -> S/M/L JOBNAME           U045\n         BZ    ASIDBIND                 NO JOBNM PTR - GO DO AXSET U061\n         MVC   JOBNAME,0(R14)           SAVE JOBNAME               U045\n         B     ASIDBIND                 GO DO AXSET                U061\n         DROPX R1                                                  U045\n         SPACE 2\nASIDBAD  MVC   MSGLINE(28),=C'***** ASID - INVALID OPERAND'        U045\n         B     FORMAT2                                             U045\n         SPACE 2\nASIDFREE MVC   MSGLINE(26),=C'***** ASID XXXX NOT IN USE'          U045\n         SRL   R0,2                     DIVIDE BY 4 (RESTORE ASID) U045\n         STH   R0,TEMP1                 PUT INTO WORK AREA         U045\n         HEX   MSGLINE+11,TEMP1,LEN=2   PUT ASID INTO MESSAGE      U045\n         B     FORMAT2                                             U045\n         SPACE 1\n         DROPX R12                      ASIDGET (local base)       U070\n         EJECT\n*---------------------------------------------------------------------*\n*\n*  SET AX TO ALLOW ACCESS TO ANOTHER ADDRESS SPACE                 U061\n*\n*---------------------------------------------------------------------*\n         SPACE 2\nCORE     CSECT ,                                                   U070\n         SPACE 1\n*%  SHOULD PREVENT OTHER A.S. FROM TERMINATING WHILE WE HAVE IT    U061\n*%  BOUND.  SOME OTHER DAY.                                        U061\nASIDBIND L     R1,ADDRASCB              -> ASCB                    U061\n         L     R1,ASCBOUCB-ASCB(,R1)    -> OUCB                    U061\n         TM    OUCBSFL-OUCB(R1),OUCBNSW NON-SWAPPABLE?             U061\n         BO    BIND$OK                  YES - CONTINUE             U061\n         MVC   MSGLINE(50),=C'***** XXXXXXXX (ASID XXXX) NOT NON-SWAPPA$\n               BLE *****'                                          U061\n         MVC   MSGLINE+6(8),JOBNAME     PUT JOBNAME INTO MESSAGE   U061\n         HEX   MSGLINE+21,ASID,LEN=2,BYTE=C')'  ALSO ASID          U061\n         XC    ASID,ASID                CLEAR ASID                 U061\n         B     FORMAT2                                             U061\nBIND$OK  TM    FLAGS,AXSAVED            ALREADY SAVED AXVAL?       U061\n         BO    FORMAT                   YES - DON'T SAVE IT AGAIN  U061\n         BAL   R14,MS$SUPR              GET SUPERVISOR STATE       U061\n         SPACE 1\n*---  THE STUPID MACRO FOLLOWING DOES NOT ALLOW COMMENTS           U061\n*---  EXTRACT AUTHORIZATION INDEX FOR CURRENT PASID                U061\n         AXEXT\n         SPACE 1\n         STH   R0,OLDAXVAL              SAVE FOR RESTORE           U061\n         SPACE 1\n         ESAR  R1                       GET SECONDARY ASID         U061\n         SPACE 1\n         STH   R1,OLDSASID              SAVE FOR RESTORE           U061\n         SPACE 1\n         LA    R0,1                     GET AX VALUE               U061\n         SPACE 1\n         AXSET AX=(0)                   SET AUTHORIZATION INDEX    U061\n         SPACE 1\n         BAL   R14,MS$PROB              RESTORE PROBLEM STATE      U061\n         B     FORMAT                                              U061\n         EJECT                                                     U045\n*---------------------------------------------------------------------*\n*\n*  PROGRAM CHECK EXIT\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n          AIF   (&@@SPLVL LT 200).XA05                             U063\n         USNGX EPIE,R1                                             U063\n.XA05     ANOP                                                     U063\nSPIEEXIT TM    FLAGS,PGMCHKOK           PGM CHK ALLOWED?           U041\n         BO    OKPGMCHK                 YES - CONTINUE             U041\n         SPACE 2\n         MVC   PGMCKMSG,BLANKS                                     U063\n         MVC   PGMCKMSG(22),=C'ADDR=xxxxxxxx  OFFSET='             U063\n          AIF   (&@@SPLVL GE 200).XA13                             U063\n         L     R0,8(,R1)                PSW IN PIE                 U063\n         HEX   PGMCKMSG+5,(8,R1),LEN=4  show addr of pgm check     U063\n          AGO   .XA14                                              U063\n.XA13     ANOP                                                     U063\n         L     R0,EPIEPSW+4             PSW IN PIE                 U063\n         HEX   PGMCKMSG+5,EPIEPSW+4,LEN=4  show addr of pgm check  U063\n.XA14     ANOP                                                     U063\n         SR    R0,R10                   compute offset             U063\n         ST    R0,TEMP1                                            U063\n         HEX   PGMCKMSG+22,TEMP1+1,LEN=3  show offset of pgm check U063\n         SPACE 1\n         TPUTX '*** UNEXPECTED PROGRAM CHECK ***'                  U041\n         SPACE 1\n         TPUTX PGMCKMSG,28                                         U063\n         SPACE 1\n         ABEND 1                                                   U041\n         SPACE 2\nOKPGMCHK MVC   PGMCKMSG,=C' ****** PROGRAM CHECK ******'           U046\n          AIF   (&@@SPLVL GE 200).XA06                             U063\n         CLI   4+2+1(R1),4              PROTECTION?                U006\n          AGO   .XA07                                              U063\n.XA06     ANOP                                                     U063\n         CLI   EPIEINT+2+1,4            PROTECTION?                U063\n.XA07     ANOP                                                     U063\n         BNE   *+10                     NO - SKIP                  U006\n         MVC   PGMCKMSG,=C'*** PROTECTION EXCEPTION ***'           U046\n          AIF   (&@@SPLVL GE 200).XA08                             U063\n         CLI   4+2+1(R1),5              ADDRESSING?                U006\n          AGO   .XA09                                              U063\n.XA08     ANOP                                                     U063\n         CLI   EPIEINT+2+1,5            ADDRESSING?                U063\n.XA09     ANOP                                                     U063\n         BNE   *+10                     NO - SKIP                  U006\n         MVC   PGMCKMSG,=C'*** ADDRESSING EXCEPTION ***'           U046\n         LA    R0,SPIERET               SET RETURN FROM GETSTOR\n          AIF   (&@@SPLVL GE 200).XA10                             U063\n         ST    R0,8(,R1)                PSW IN PIE\n          AGO   .XA11                                              U063\n.XA10     ANOP                                                     U063\n         ST    R0,EPIEPSW+4             PSW IN PIE                 U063\n         OI    EPIEPSW+4,X'80'          and run in 31 bit mode     U063\n.XA11     ANOP                                                     U063\nSPIERET  BR    R14                      RETURN TO SUPV\n          AIF   (&@@SPLVL LT 200).XA12                             U063\n         DROPX R1                       EPIE                       U063\n.XA12     ANOP                                                     U063\n         SPACE 5\n*---------------------------------------------------------------------*\n*\n* ERASE  --  CLEAR THE SCREEN BUFFER\n*\n*---------------------------------------------------------------------*\n         SPACE 2\nERASE    SAVE  (2,5)                    NEED SOME WORK REGS\n         LA    R2,OUT1                  START OF AREA TO CLEAR\n         LA    R3,79*16                 LENGTH TO CLEAR\n         LA    R5,C' '                  FILL CHAR\n         SLL   R5,24                    MAKE PAD BYTE AND CLEAR SOURCE\n         MVCL  R2,R4                    PROPAGATE BLANKS\n         RETURN (2,5)                   RESTORE REGS AND RETURN\n         SPACE 5\n*---------------------------------------------------------------------*\n*\n* CALLEVAL -- CALL EXPRESSION EVALUATOR                            U057\n*\n*---------------------------------------------------------------------*\n         SPACE 2\nCALLEVAL ST    R14,CELINK               SAVE ROUTINE LINKAGE       U057\n         LA    R1,OPERAND               -> INPUT DATA              U057\n         LA    R0,OPERAND+L'OPERAND     -> END OF DATA + 1         U057\n         SR    R0,R1                    LENGTH OF DATA             U057\n         L     R15,=A(EVAL)             -> EXPRESSION EVALUATOR    U057\n         BALR  R14,R15                  EVALUATE EXPRESSION        U057\n         CH    R15,=H'4'                DID IT WORK?               U057\n         BNH   CE01                     YES, RETURN TO CALLER      U057\n         MVC   MSGLINE(6),=CL6'*****'                              U057\n         LH    R14,0(,R15)              MESSAGE LENGTH             U057\n         BCTR  R14,0                    MINUS ONE FOR EX           U057\n         EX    R14,CEMVC                MVC MSGLINE+6(0),2(R15)    U057\n         B     CE02                     GO RETURN TO CALLER        U057\nCE01     LR    R3,R1                    SET SCAN POINTER           U057\nCE02     L     R14,CELINK               RESTORE ROUTINE LINKAGE    U057\n         BR    R14                      RETURN TO CALLER           U057\n         SPACE 2                                                   U057\nCEMVC    MVC   MSGLINE+6(0),2(R15)      << EXECUTED >>             U057\n         EJECT\n*---------------------------------------------------------------------*\n*\n*  MODE CHANGE SUBROUTINES\n*\n*---------------------------------------------------------------------*\n         SPACE 1\nMS$SUPR  MODESET  MODE=SUP              GET SUPERVISOR STATE       U024\n         SPACE 1\n         BR    R14                      RETURN TO CALLER           U024\n         SPACE 3\nMS$PROB  MODESET  MODE=PROB             GET PROBLEM STATE          U024\n         SPACE 1\n         BR    R14                      RETURN TO CALLER           U024\n         SPACE 3\nMS$KZERO TM    MODEFLAG,KEYZERO         ARE WE RUNNING KEY ZERO?   U050\n         BZR   R14                      NO - SKIP                  U050\n         SPACE 1\n         MODESET  KEY=ZERO              GET KEY ZERO               U024\n         SPACE 1\n         BR    R14                      RETURN TO CALLER           U024\n         SPACE 3\nMS$KUSER TM    MODEFLAG,KEYZERO         ARE WE RUNNING KEY ZERO?   U050\n         BZR   R14                      NO - SKIP                  U050\n         OC    ASID,ASID                FETCH FROM ANOTHER A.S.?   U068\n         BNZ   MS_KU_XM                 yes - can't use SVC type   U068\n         SPACE 1\n         MODESET  KEY=NZERO             GET PROBLEM KEY            U024\n         SPACE 1\n         BR    R14                      RETURN TO CALLER           U024\n         SPACE 2\nMS_KU_XM IC    R15,MYKEY                get my original key        U068\n         SPKA  0(R15)                                              U068\n         BR    R14                      RETURN TO CALLER           U068\n         EJECT\n*---------------------------------------------------------------------*\n*\n*  STORAGE RETRIEVAL SUBROUTINE\n*\n*---------------------------------------------------------------------*\n*\n*  INPUT:\n*     R0 =  LENGTH TO FETCH\n*     R2 -> SOURCE LOCATION\n*\n*  OUTPUT:\n*     \"DUMPDATA\" WILL CONTAIN THE REQUESTED DATA\n*\n*  RETURNS:\n*     ALL DATA FOUND:             R15 = 0, CC = 0                  U054\n*     SOME OR ALL DATA NOT FOUND: R15 = 4, CC = 2                  U054\n*\nGETSTOR  STM   R14,R7,12(R13)           SAVE ALL REGISTERS         U054\n         MVI   LOGOOD,X'FF'             INVALIDATE                 U054\n         MVI   HIGOOD,X'00'               STORAGE RANGE            U054\n         LR    R3,R0                    DATA LENGTH                U054\n         LR    R6,R3                    SAVE DATA LENGTH           U054\n         AR    R0,R2                    END OF DATA + 1            U054\n         BCTR  R0,0                     ACTUAL END OF DATA         U054\n         N     R0,=X'FFFFF000'          GET START OF PAGE          U055\n         CR    R0,R2                    ALL DATA IN SAME PAGE?     U054\n         BL    GETS01                   YES, SETUP IS OKAY         U054\n         SR    R0,R2                    GET LENGTH IN PAGE         U054\n         LR    R3,R0                    AND USE THAT FOR MOVE      U054\n         SPACE 1\nGETS01   LR    R7,R3                    SAVE MOVED DATA LENGTH     U054\n         LA    R4,DUMPDATA              DESTINATION ADDRESS        U054\n         BAL   R5,GOFETCH               GET DATA IN FIRST PAGE     U054\n         MVC   KEYSAVE1,KEYSAVE         SAVE THE KEY               U054\n         MVC   KEYSAVE2,KEYSAVE         SAVE IT AGAIN              U054\n         LTR   R15,R15                  DID FETCH WORK?            U054\n         BNZ   GETS02                   NO, TRY NEXT ONE           U054\n         ST    R2,LOGOOD                YES, SET LOW ADDRESS       U054\n         LR    R0,R2                    START OF DATA              U054\n         AR    R0,R3                    END OF DATA                U054\n         ST    R0,HIGOOD                SET HIGH ADDRESS           U054\n         SPACE 1                                                   U054\nGETS02   SR    R6,R7                    RESIDUAL DATA LENGTH       U054\n         BNP   GETS04                   NONE, EXIT                 U054\n         ALR   R2,R7                    DATA RESTART ADDRESS       U054\n         LR    R3,R6                    LENGTH TO MOVE             U054\n         AR    R4,R7                    DEST RESTART ADDRESS       U054\n         BAL   R5,GOFETCH               FETCH THE SECOND PART      U054\n         MVC   KEYSAVE2,KEYSAVE         SAVE THE KEY               U054\n         LTR   R15,R15                  DID SECOND FETCH WORK?     U054\n         BNZ   GETS04                   NO, EXIT WITH ERROR        U054\n         CLI   LOGOOD,X'FF'             PREVIOUS FETCH WORK?       U054\n         BNE   GETS03                   YES, DON'T UPDATE LOGOOD   U054\n         ST    R2,LOGOOD                NO, SET NEW LOW ADDRESS    U054\n         LA    R15,4                    INDICATE PREVIOUS FAILURE  U054\nGETS03   LR    R0,R2                    START OF DATA              U054\n         AR    R0,R3                    END OF DATA                U054\n         ST    R0,HIGOOD                SET HIGH ADDRESS           U054\n         SPACE 1\nGETS04   L     R14,12(R13)              RESTORE CALLER'S R14       U054\n         LM    R0,R7,20(R13)            RESTORE CALLER'S R0-R7     U054\n         LTR   R15,R15                  SET CC FOR CALLER          U054\n         BR    RLINK                    RETURN TO CALLER           U054\n         EJECT\n*\n*  INPUT:\n*     R2 -> SOURCE LOCATION\n*     R3 =  LENGTH TO FETCH\n*     R4 -> DESTINATION\n*     R5 -> RETURN ADDRESS                                         U054\n*\n*  OUTPUT:\n*     DATA MOVED TO REQUESTED LOCATION\n*\n*  RETURNS:\n*     ALL DATA FOUND:             R15 = 0                          U054\n*     SOME OR ALL DATA NOT FOUND: R15 = 4                          U054\n*\nGOFETCH  OI    FLAGS,PGMCHKOK           INDICATE PGMCHK'S ALLOWED  U041\n         MVI   KEYSAVE,X'FF'            ASSUME LRA FAILED          U056\n         BAL   R14,MS$KZERO             GET KEY ZERO               U024\n         OC    ASID,ASID                FETCH FROM ANOTHER A.S.?   U061\n         BNZ   GF$CMS                   YES - DO IT                U061\n         LA    R14,BADFETCH             SET SPIE RETURN ADDR       U022\n         BCTR  R3,0                     -1 FOR EX                  U026\n         EX    R3,FETCHMVC              FETCH THE DATA             U026\n         BAL   R14,MS$KUSER             RESTORE MY KEY             U024\n         NI    FLAGS,255-PGMCHKOK       DISALLOW PGMCHK'S          U041\n         XR    R15,R15                  INDICATE FETCH WORKED      U054\n         TM    FLAGS,AUTHAPF+DISPKEY    CAN WE DO THIS?            U047\n         BNOR  R5                       NO - RETURN NOW TO GETSTOR U054\n         BAL   R14,MS$SUPR              GET SUPERVISOR MODE        U047\n         LTR   R15,R2                   VIRTUAL PAGE 0?            U059\n         BZ    GF$ISK                   YES - SKIP LRA             U059\n         LRA   R15,0(,R2)               GET REAL STORAGE ADDRESS   U056\n         BNZ   GF$01                    RETURN IF FAILED           U054\n         N     R15,=X'FFFFF000'         GET DOWN TO 4K BOUNDARY    U055\n*GF$ISK  ISK   R14,R15                  GET THE STORAGE KEY        U047\nGF$ISK   ISKE  R14,R15                  GET THE STORAGE KEY        U062\n         STC   R14,KEYSAVE              SAVE IT                    U047\nGF$01    BAL   R14,MS$PROB              GET OUT OF SUPERVISOR      U054\n         XR    R15,R15                  INDICATE FETCH WORKED      U054\n         BR    R5                       RETURN TO GETSTOR          U054\n         SPACE 1\nGF$CMS   BAL   R14,MS$SUPR              GET SUPERVISOR             U061\n         LH    R14,ASID                 GET DESIRED ASID           U061\n         SSAR  R14                      SET AS SECONDARY ASN       U061\n         SR    R15,R15                  CLEAR KEY                  U061\n         LA    R14,BADFETCH             SET SPIE RETURN ADDR       U061\n         MVCP  0(R3,R4),0(R2),R15       FETCH THE DATA             U061\n         BAL   R14,MS$KUSER             RESTORE MY KEY             U061\n         LH    R14,OLDSASID             GET OLD SECONDARY ASID     U061\n         SSAR  R14                      RESTORE SECONDARY ASN      U061\n         BAL   R14,MS$PROB              RESTORE PROBLEM STATE      U061\n         NI    FLAGS,255-PGMCHKOK       DISALLOW PGMCHK'S          U061\n*%%  WHAT ABOUT THE STORAGE KEY???                                 U061\n*%%      XR    R15,R15                  INDICATE FETCH WORKED      U061\n*%%      TM    FLAGS,AUTHAPF+DISPKEY    CAN WE DO THIS?            U061\n*%%      BNOR  R5                       NO - RETURN NOW TO GETSTOR U061\n*%%      BAL   R14,MS$SUPR              GET SUPERVISOR MODE        U061\n*%%      LRA   R15,0(,R2)               GET REAL STORAGE ADDRESS   U061\n*%%      BNZ   GF$03                    RETURN IF FAILED           U061\n*%%      N     R15,=X'FFFFF000'         GET DOWN TO 4K BOUNDARY    U061\n*%%      ISK   R14,R15                  GET THE STORAGE KEY        U061\n*%%      STC   R14,KEYSAVE              SAVE IT                    U061\n*%%GF$03 BAL   R14,MS$PROB              GET OUT OF SUPERVISOR      U061\n         XR    R15,R15                  INDICATE FETCH WORKED      U061\n         BR    R5                       RETURN TO GETSTOR          U061\n         SPACE 1\nBADFETCH BAL   R14,MS$KUSER             RESTORE MY KEY             U054\n         NI    FLAGS,255-PGMCHKOK       DISALLOW PGMCHK'S          U054\n         LA    R15,4                    INDICATE FAILURE           U054\n         OC    ASID,ASID                IN ALTERNATE ADDR MODE?    U061\n         BZR   R5                       NO - RETURN NOW TO GETSTOR U061\n         LH    R14,OLDSASID             GET OLD SECONDARY ASID     U061\n         SSAR  R14                      RESTORE SECONDARY ASN      U061\n         BAL   R14,MS$PROB              RESTORE PROBLEM STATE      U061\n         LA    R15,4                    INDICATE FAILURE           U054\n         BR    R5                       RETURN NOW TO GETSTOR      U054\n         SPACE 2\nFETCHMVC MVC   0(*-*,R4),0(R2)          << EXECUTED >>             U026\n         EJECT\nBLANKS   DC    CL79' '\n         SPACE 1\n         LTORG ,                                                   U070\n         SPACE 1\n          AIF   (&@@SPLVL GE 200).XA91                             U063\nSPIEMFL  SPIE  SPIEEXIT,(4,5),MF=L      ROOM FOR SPIE PARM LIST    U022\n.XA91     ANOP                                                     U063\n         SPACE 3\nHEXTAB   DC    256C' '                  GENERAL HEX CONVERSION TABLE\n         ORG   HEXTAB+C'A'              INPUT CONVERSION\n         DC    X'0A0B0C0D0E0F'\n         ORG   HEXTAB+C'0'              OUTPUT CONVERSION\n         DC    C'0123456789ABCDEF'\n         ORG\n         SPACE 2\n* HEX INPUT TRT TABLE\nNUMTAB   DC    256X'1'\n         ORG   NUMTAB+C'A'\n         DC    6X'0'\n         ORG   NUMTAB+C'0'\n         DC    10X'0'\n         ORG\n         SPACE 2\nVALCHAR  CHARTAB  FILL='.'              TRANSLATE TO VALID CHARS   U046\n         SPACE 2\n*  CARET OFFSETS INTO HEX PART OF SCREEN LINE (DUMP FORMAT)        U063\n*UMPOFFS DC    AL1(8,13,13,18,19,24,24,29,31,36,36,41,42,47,47,52) U021\nDUMPOFFS DC    AL1(0,5,5,10,11,16,16,21,23,28,28,33,34,39,39,44)   U063\n         EJECT\n         LTORG ,                                                   U024\n         EJECT\nSCANTAB  DC    0A(0)                    COMMAND TABLE\n*---  Table format changed                                  --->   U063\n         SCMDE 'UCB',UCB                                           U009\n         SCMDE ' ',FORMAT\n         SCMDE 'D',DOWN                                            U028\n         SCMDE 'U',UP                                              U028\n         SCMDE 'IS',INDIR$S                                        U066\n         SCMDE 'I',INDIR\n         SCMDE '>',FWD\n         SCMDE '<',BACK\n         SCMDE 'F',FIND\n         SCMDE 'LPA',MOD$LPA                                       U069\n         SCMDE 'WHERE',WHERE                                       U069\n         SCMDE 'L',LINK\n         SCMDE '=',DEFINE\n         SCMDE ',',NUMSCAN                                         U049\n         SCMDE 'END',ENDIT                                         U023\n         SCMDE 'HIST',SHOWHIST                                     U028\n         SCMDE 'MODE1',MODE1                                       U023\n         SCMDE 'MODE2',MODE2                                       U023\n         SCMDE 'B',OVERLAY                                         U019\n         SCMDE 'Z',ZOT                                             U008\n         SCMDE 'SVC',SVC                                           U057\n         SCMDE 'SSCVT',SSCVT                                       U058\n         SCMDE 'S',STORES                                          U017\n         SCMDE 'X',STOREX                                          U017\n         SCMDE 'O',STOREO                                          U017\n         SCMDE 'N',STOREN                                          U017\n         SCMDE 'M',MODULE                                          U033\n         SCMDE 'PAGEFIX',PAGEFIX                                   U020\n         SCMDE 'PAGEFREE',PAGEFREE                                 U020\n         SCMDE '?',HELP                                            U003\n         SCMDE 'HELP',HELP                                         U043\n         SCMDE 'H',HELP                                            U003\n         SCMDE 'ASID',ASIDGET                                      U045\n         SCMDE 'JOB',JOB                                           U045\n         DC    X'FF'                    END OF TABLE INDICATOR\n         EJECT\n*  SCREEN FORMAT\n         SPACE 1\nSCR1     DCMSFMT\nHEADER   DCMSFLD 79                                                U031\nINPLINE  DCMSFLD 79,ALPHA,CURSOR=YES                               U031\nINPSAVE  DCMSFLD 79,INTEN=LO                                       U031\n***  NOTE:  \"HELP\" DEPENDS ON MSGLINE BEING IMMEDIATELY IN FRONT   U043\n***         OF OUT1.                                               U043\nMSGLINE  DCMSFLD 79                                                U031\nOUT1     DCMSFLD 79,INTEN=LO                                       U031\n         PRINT NOGEN\n         DCMSFLD 79,INTEN=LO\n         DCMSFLD 79,INTEN=LO\n         DCMSFLD 79,INTEN=LO\n         DCMSFLD 79,INTEN=LO\n         DCMSFLD 79,INTEN=LO\n         DCMSFLD 79,INTEN=LO\n         DCMSFLD 79,INTEN=LO\n         DCMSFLD 79,INTEN=LO\n         DCMSFLD 79,INTEN=LO\n         DCMSFLD 79,INTEN=LO\n         DCMSFLD 79,INTEN=LO\n         DCMSFLD 79,INTEN=LO\n         DCMSFLD 79,INTEN=LO\n         DCMSFLD 79,INTEN=LO\n         DCMSFLD 79,INTEN=LO\n         PRINT GEN\nLOCLINE  DCMSFLD 79,ROW=22,COLUMN=2                                U040\n         DCMSFEND\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  EVALUATE AN EXPRESSION                                             *\n*                                                                     *\n*  EXPRESSIONS MAY CONSIST OF ADD, SUBTRACT, MULTIPLY, AND DIVIDE     *\n*  OPERATIONS INVOLVING HEXADECIMAL CONSTANTS, DECIMAL CONSTANTS      *\n*  (NUMERICS FOLLOWED BY A PERIOD), AND SYMBOLS.  THE DOLLAR          *\n*  CHARACTER IS A SPECIAL SYMBOL THAT HAS THE VALUE OF THE CURRENT    *\n*  LOCATION COUNTER.                                                  *\n*                                                                     *\n*  MULTIPLY AND DIVIDE OPERATIONS WILL BE PERFORMED FROM LEFT TO      *\n*  RIGHT BEFORE ADD AND SUBTRACT OPERATIONS ARE PERFORMED FROM LEFT   *\n*  TO RIGHT.  EXPRESSIONS IN PARENTHESES WILL BE EVALUATED FIRST.     *\n*                                                                     *\n*  AN EXPRESSION THAT STARTS WITH AN ADD OR SUBTRACT OPERATOR (A      *\n*  'RELATIVE' EXPRESSION) WILL BE ADDED TO OR SUBTRACTED FROM THE     *\n*  INITIAL VALUE SUPPLIED BY THE CALLER.                              *\n*                                                                     *\n*  REGISTER USAGE:                                                    *\n*    R0  - INPUT, LENGTH OF EXPRESSION STRING                         *\n*        - WORK                                                       *\n*    R1  - INPUT, ADDRESS OF EXPRESSION STRING                        *\n*        - OUTPUT, ADDRESS OF END OF STRING + 1                       *\n*    R2  - INPUT, INITIAL VALUE (IF EXPRESSION IS RELATIVE)           *\n*        - OUTPUT, RESULTING VALUE OF EVALUATION                      *\n*    R13 - INPUT, WORK AREA ADDRESS                                   *\n*    R14 - INPUT, RETURN ADDRESS                                      *\n*    R15 - OUTPUT, RETURN CODE                                        *\n*          0 - SUCCESS, ABSOLUTE EXPRESSION                           *\n*          4 - SUCCESS, RELATIVE EXPRESSION                           *\n*          >4 - FAILURE, POINTER TO ERROR MESSAGE AND LENGTH          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         DROPX R10,R11                  DROP BASE REGISTERS\n         INUSE\n         SPACE 2\nEVAL#    CSECT ,                                                   U070\nEVAL     SAVE  (14,12),,*               SAVE CALLER'S REGS\n         LR    R11,R15                  SET EVAL BASE\n         USNGX EVAL,R11                 ADDRESS EVAL\n         L     R10,=A(EVALWK-WORKAREA)  EVAL work area offset      U071\n         AR    R10,R13                  -> EVALWK                  U071\n         USNGX EVALWK,R10               ADDRESS EVAL WORD\n         ST    R2,EVNSTAK               SAVE INITIAL VALUE\n         LA    R2,EVNSTAK               -> CURR STACK ENTRY\n         ST    R2,EVNSTAKP              SAVE STACK POINTER\n         MVC   EVOSTAK(2),=AL1(EV$STRT,EVP$STRT)  INIT OP STACK\n         LA    R2,EVOSTAK               -> CURR STACK ENTRY\n         ST    R2,EVOSTAKP              SAVE STACK POINTER\n         BAL   R14,INITCHAR             INITIALIZE STRING ROUTINES\n         MVI   EVFLAGS,EVFINIT          SET FLAGS TO INITIAL NUMBER\n         B     *+8                      GO GET TOKEN\nEVLOOP   NI    EVFLAGS,255-EVFINIT      PAST FIRST TOKEN\n         BAL   R14,GETTOKN              GET NEXT TOKEN\n         B     *+4(R15)                 BRANCH ON RETURN CODE\n         B     EVNUM                 0  NUMBER\n         B     EVOP                  4  OPERATOR\n         B     EVSYM                 8  SYMBOL\n         LR    R15,R1               12  -> TOKEN ERROR MESSAGE\nEVEXIT   LM    R0,R12,12+2*4(R13)       RESTORE REGS 0-12\n         L     R14,12(,R13)             RESTORE REG 14\n         BR    R14                      RETURN TO CALLER\n         SPACE 2\n* PROCESS SYMBOL TOKEN\nEVSYM    BAL   R14,SYMLOC               GO LOCATE SYMBOL TABLE ENTRY\n         LTR   R15,R15                  TEST RETURN CODE\n         BZ    EVS01                    FOUND SYMBOL\n         MVC   EVERRWK+2(7),=C'SYMBOL ' BUILD ERROR MESSAGE        U051\n         MVC   EVERRWK+2+7(8),WORD      SYMBOL NAME                U051\n         LA    R15,EVERRWK+2+7          -> START OF SYMBOL NAME    U051\n         AH    R15,WORDLEN              -> END OF NAME PLUS ONE    U051\n         MVC   0(12,R15),=C' NOT DEFINED'  END OF MESSAGE TEXT     U051\n         LA    R15,7+12                 LENGTH OF FIXED TEXT       U051\n         AH    R15,WORDLEN              FULL MESSAGE LENGTH        U051\n         STH   R15,EVERRWK              SET MESSAGE LENGTH         U051\n         LA    R15,EVERRWK              PASS MESSAGE BACK          U051\n         B     EVEXIT                   RETURN WITH ERROR\nEVS01    L     R1,8(,R1)                SYMBOL VALUE\n*        B     EVNUM                    PROCESS AS NUMBER TOKEN\n         SPACE 2\n* PROCESS NUMBER TOKEN\nEVNUM    TM    EVFLAGS,EVFNUM           TWO NUMBERS IN A ROW?\n         BO    EVOPSEQ                  YES, OPERAND SEQUENCE ERROR\n         OI    EVFLAGS,EVFNUM           REMEMBER NUMBER\n         L     R14,EVNSTAKP             -> CURR STACK ENTRY\n         LA    R14,4(,R14)              -> NEXT STACK ENTRY\n         LA    R15,EVNSTAKE             -> STACK LIMIT\n         CR    R14,R15                  ROOM IN STACK?\n         BH    EVCOMP                   NO, EXPRESSION TOO COMPLEX\n         ST    R14,EVNSTAKP             SAVE STACK POINTER\n         ST    R1,0(,R14)               STACK THE NUMBER\n         B     EVLOOP                   GO GET ANOTHER TOKEN\n         SPACE 2\n* PROCESS OPERATOR TOKEN\nEVOP     CLI   OPERATOR,EV$LPAR         OPEN PARENTHESIS?\n         BNE   EVO01                    NO, CONTINUE\n         TM    EVFLAGS,EVFNUM           PREVIOUS NUMBER?\n         BNO   EVO05                    NO, GO STACK PAREN\nEVOPSEQ  LA    R15,EVEMOS               -> OPERATOR SEQUENCE MSG\n         B     EVEXIT                   RETURN WITH ERROR\nEVO01    TM    EVFLAGS,EVFINIT          LEADING OPERATOR?\n         BNO   EVO02                    NO, CONTINUE\n         OI    EVFLAGS,EVFREL           YES, INDICATE RELATIVE EXPR\n         CLI   OPPRIOR,EVP$MUL          MULT OR DIV PRIORITY?\n         BE    EVOPSEQ                  YES, INVALID OPERATOR SEQ\nEVO02    TM    EVFLAGS,EVFNUM+EVFINIT   PREVIOUS NUMBER?\n         BZ    EVOPSEQ                  NO, OPERATOR SEQUENCE ERROR\n         CLI   OPERATOR,EV$RPAR         CLOSE PARENTHESIS?\n         BNE   EVO03                    NO, CONTINUE\n         OI    EVFLAGS,EVFNUM           YES, ACT LIKE PREV NUMBER\n         B     EVO04                    CONTINUE\nEVO03    NI    EVFLAGS,255-EVFNUM       REMEMBER NOT NUMBER\nEVOLOOP  EQU   *\nEVO04    L     R14,EVOSTAKP             -> CURR OPERATOR STACK ENTRY\n         CLC   OPPRIOR,1(R14)           COMPARE PRIORITIES\n         BNH   EVO07                    NOT HIGHER - POP STACK\n         CLI   OPERATOR,EV$RPAR         HIGHER - STACKING CLOSE PAREN?\n         BE    EVNBPAR                  YES, EXCESS RIGHT PARENS\nEVO05    L     R14,EVOSTAKP             -> CURR OPERATOR STACK ENTRY\n         LA    R14,2(,R14)              -> NEXT OPERATOR STACK ENTRY\n         LA    R15,EVOSTAKE             -> OPERATOR STACK LIMIT\n         CR    R14,R15                  IS THERE ROOM IN STACK?\n         BNH   EVO06                    YES, GO STACK IT\nEVCOMP   LA    R15,EVEMCE               -> COMPLEX EXPR MSG\n         B     EVEXIT                   RETURN WITH ERROR\nEVO06    ST    R14,EVOSTAKP             SAVE OPERATOR STACK POINTER\n         MVC   0(2,R14),OPERATOR        STACK NEW OPERATOR\n         B     EVLOOP                   GO GET NEXT TOKEN\nEVO07    SR    R15,R15\n         IC    R15,0(,R14)              OPERATOR VALUE\n         SLL   R15,2                    OPERATOR TIMES 4\n         SH    R14,=H'2'                -> PREV OPERATOR STACK ENTRY\n         ST    R14,EVOSTAKP             SAVE OPERATOR STACK POINTER\n         L     R1,EVNSTAKP              -> CURR NUMBER STACK ENTRY\n         SH    R1,=H'4'                 -> PREV NUMBER STACK ENTRY\n*   R1 IS PASSED TO THE OPERATION ROUTINES\n         B     *+4(R15)                 BRANCH ON OPERATOR\n         B     EVOSTRT               0  START OF EXPR\n         B     EVOLPAR               1  LEFT PAREN\n         B     EVORPAR               2  RIGHT PAREN\n         B     EVOADD                3  ADD\n         B     EVOSUB                4  SUBTRACT\n         B     EVOMULT               5  MULTIPLY\n* DIVIDE OPERATOR\n         OC    4(4,R1),4(R1)         6  ATTEMPT DIVIDE BY ZERO?\n         BNZ   EVOD01                   NO, CONTINUE\n         LA    R15,EVEMDZ               -> DIVIDE BY ZERO MSG\n         B     EVEXIT                   RETURN WITH ERROR\nEVOD01   ST    R1,EVNSTAKP              SAVE NUMBER STACK POINTER\n         L     R15,0(,R1)               PREVIOUS NUMBER\n         SR    R14,R14\n         D     R14,4(,R1)               OPERATION\n         ST    R15,0(,R1)               SAVE RESULT\n         B     EVOLOOP                  GET NEXT OPERATOR\n         SPACE 2\n* MULTIPLY OPERATOR\nEVOMULT  ST    R1,EVNSTAKP              SAVE NUMBER STACK POINTER\n         L     R15,0(,R1)               PREVIOUS NUMBER\n         M     R14,4(,R1)               OPERATION\n         ST    R15,0(,R1)               SAVE RESULT\n         B     EVOLOOP                  GET NEXT OPERATOR\n         SPACE 2\n* SUBTRACT OPERATOR\nEVOSUB   ST    R1,EVNSTAKP              SAVE NUMBER STACK POINTER\n         L     R15,0(,R1)               PREVIOUS NUMBER\n         S     R15,4(,R1)               OPERATION\n         ST    R15,0(,R1)               SAVE RESULT\n         B     EVOLOOP                  GET NEXT OPERATOR\n         SPACE 2\n* ADD OPERATOR\nEVOADD   ST    R1,EVNSTAKP              SAVE NUMBER STACK POINTER\n         L     R15,0(,R1)               PREVIOUS NUMBER\n         A     R15,4(,R1)               OPERATION\n         ST    R15,0(,R1)               SAVE RESULT\n         B     EVOLOOP                  GET NEXT OPERATOR\n         SPACE 2\n* RIGHT PAREN - THIS SHOULDN'T HAPPEN\nEVORPAR  LA    R15,EVEMLE               -> LOGIC ERROR MESSAGE\n         B     EVEXIT                   RETURN WITH ERROR\n         SPACE 2\n* LEFT PAREN - PARENTHESIZED EXPRESSION IS COMPLETE\nEVOLPAR  CLI   OPERATOR,EV$RPAR         MATCHED PARENTHESES?\n         BE    EVLOOP                   YES, ANNIHILATE OPERATOR\nEVNBPAR  LA    R15,EVEMUP               -> UNBAL PAREN MSG\n         B     EVEXIT                   RETURN WITH ERROR\n         SPACE 2\n* START OF STRING - EXPRESSION IS COMPLETE\nEVOSTRT  L     R2,4(,R1)                CURRENT RESULT\n         L     R1,CHARADR               END OF CHAR SCAN\n         STM   R1,R2,12+2*4+R1*4(R13)   STASH R1 AND R2 IN SAVE AREA\n         SR    R15,R15                  ASSUME ABSOLUTE EXPR\n         TM    EVFLAGS,EVFREL           RELATIVE EXPRESSION?\n         BNO   EVEXIT                   NO, RETURN\n         LA    R15,4                    INDICATE RELATIVE EXPR\n         B     EVEXIT                   RETURN TO CALLER\n         SPACE 1\nEVEMOS   DC    Y(L'EVETOS)\nEVETOS   DC    C'OPERATOR SEQUENCE ERROR'\n         SPACE 1\nEVEMCE   DC    Y(L'EVETCE)\nEVETCE   DC    C'EXPRESSION IS TOO COMPLEX'\n         SPACE 1\nEVEMDZ   DC    Y(L'EVETDZ)\nEVETDZ   DC    C'ATTEMPTED DIVIDE BY ZERO'\n         SPACE 1\nEVEMLE   DC    Y(L'EVETLE)\nEVETLE   DC    C'LOGIC ERROR - CLOSE PAREN IS ON STACK'\n         SPACE 1\nEVEMUP   DC    Y(L'EVETUP)\nEVETUP   DC    C'UNBALANCED PARENTHESES'\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*    LOOK UP SYMBOL IN SYMBOL TABLE                                   *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*   R0  - WORK                                                        *\n*   R1  - INPUT, POINTER TO SYMBOL NAME                               *\n*       - OUTPUT, POINTER TO SYMBOL IN TABLE (OR AVAILABLE SLOT)      *\n*   R14 - INPUT, RETURN ADDRESS                                       *\n*   R15 - OUTPUT, RETURN CODE                                         *\n*                  0 - SYMBOL FOUND                                   *\n*                  4 - SYMBOL NOT FOUND, SPACE IS AVAILABLE           *\n*                  8 - SYMBOL NOT FOUND, TABLE IS FULL                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nSYMLOC   LA    R0,NUMNAME               NUMBER OF TABLE ENTRIES\n         LA    R15,NAMES                -> START OF SYMBOL TABLE\nSL01     CLI   0(R15),X'00'             EMPTY ENTRY?\n         BE    SL02                     YES, RETURN AVAILABLE SLOT\n         CLC   0(8,R15),0(R1)           NO, IS IT THE ONE WE WANT?\n         BE    SL03                     YES, RETURN IT TO USER\n         LA    R15,12(,R15)             -> NEXT TABLE ENTRY\n         BCT   R0,SL01                  COUNT AND LOOP\n         LA    R15,8                    TABLE IS FULL\n         BR    R14                      RETURN TO CALLER\nSL02     LR    R1,R15                   PASS BACK ADDRESS OF SLOT\n         LA    R15,4                    INDICATE AVAILABLE SLOT\n         BR    R14                      RETURN TO CALLER\nSL03     LR    R1,R15                   PASS BACK ADDRESS OF SYMBOL\n         SR    R15,R15                  INDICATE SYMBOL FOUND\n         BR    R14                      RETURN TO CALLER\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*    GET A TOKEN FROM THE INPUT STRING                                *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*   R1  - OUTPUT, NUMBER - VALUE OF NUMBER                            *\n*                 OPERATOR - VALUE IN BYTE 2, AND                     *\n*                            PRIORITY IN BYTE 3                       *\n*                 SYMBOL - POINTER TO EIGHT CHARACTER SYMBOL NAME     *\n*                 INVTOK - POINTER TO ERROR MESSAGE                   *\n*   R2  - WORK                                                        *\n*   R14 - INPUT, RETURN ADDRESS                                       *\n*   R15 - OUTPUT, RETURN CODE                                         *\n*                  0 - NUMBER                                         *\n*                  4 - OPERATOR                                       *\n*                  8 - SYMBOL                                         *\n*                 12 - INVALID TOKEN                                  *\n*---------------------------------------------------------------------*\n         SPACE 1\nGETTOKN  ST    R14,GTLINK               SAVE ROUTINE LINKAGE\n         BAL   R14,GETWORD              GET WORD (IF POSSIBLE)\n         CLM   R2,B'0001',=X'FF'        INVALID DELIMITER?\n         BE    GTINVD                   YES, ERROR\n         LTR   R15,R15                  TEST WORD LENGTH\n         BM    GTINVW                   TOO LONG, INVALID WORD\n         CLM   R2,B'0001',=AL1(EV$DEC)  DECIMAL NUMBER?\n         BE    GTDEC                    YES, PROCESS IT\n         LTR   R15,R15                  TEST WORD LENGTH\n         BNZ   GTWORD                   GOT WORD, PROCESS IT\n         CLM   R2,B'0001',=AL1(EV$END)  END OF EVERYTHING?\n         BE    GTOEND                   YES, PROCESS IT\n         BAL   R14,GETCHAR              CONSUME SYMBOL\n         CLM   R2,B'0001',=AL1(EV$CURR) CURRENT VALUE SYMBOL?\n         BE    GTOCURR                  YES, PROCESS IT\n         STC   R2,OPERATOR              SAVE OPERATOR VALUE\n         STC   R2,OPPRIOR               SAVE VALUE FOR TRANS.\n         TR    OPPRIOR,GTOPT            TRANSLATE VALUE TO PRIOR.\n         B     GTOEXIT                  RETURN OPERATOR TO CALLER\nGTOCURR  L     R1,CURRLOC               RETURN CURRENT LOCATION\n         B     GTNEXIT                  RETURN WITH NUMBER\nGTOEND   MVC   OPERATOR,=AL1(EV$STRT,EVP$STRT)   SET END OPERATOR\n*        B     GTOEXIT                  RETURN OPERATOR TO CALLER\nGTOEXIT  LH    R1,OPERATOR              RETURN OPERATOR\n         LA    R15,4                    INDICATE OPERATOR\n         B     GTEXIT                   RETURN TO CALLER\nGTDEC    BAL   R14,GETCHAR              CONSUME PERIOD\n         BAL   R14,CVDECIN              CONVERT DECIMAL FOR INPUT\n         LTR   R1,R15                   TEST RESULT\n         BNM   GTNEXIT                  RETURN NUMBER TO CALLER\n         LA    R1,GTEMID                -> INVALID DECIMAL MSG\n         B     GTEEXIT                  RETURN ERROR TO CALLER\nGTWORD   BAL   R14,CVHEXIN              ASSUME IT IS HEX\n         LTR   R15,R15                  DID IT WORK?\n         BZ    GTNEXIT                  YES, RETURN NUMBER TO CALLER\n         CLI   WORD,C'0'                NO, LEADING NUMERIC?\n         BNE   GTSEXIT                  NO, RETURN SYMBOL TO CALLER\n         LA    R1,GTEMIH                -> INVALID HEX NUMBER MSG\n         B     GTEEXIT                  RETURN ERROR TO CALLER\nGTINVW   LA    R1,GTEMTL                -> WORD TOO LONG MSG\n         B     GTEEXIT                  RETURN ERROR TO CALLER\nGTINVD   LA    R1,GTEMIC                -> INVALID CHAR MSG\n*        B     GTEEXIT                  RETURN ERROR TO CALLER\nGTEEXIT  LA    R15,12                   INDICATE ERROR RETURN\n         B     GTEXIT                   RETURN TO CALLER\nGTNEXIT  SR    R15,R15                  INDICATE NUMBER RETURN\n         B     GTEXIT                   RETURN TO CALLER\nGTSEXIT  LA    R1,WORD                  -> SYMBOL NAME\n         LA    R15,8                    INDICATE SYMBOL RETURN\n*        B     GTEXIT                   RETURN TO CALLER\nGTEXIT   L     R14,GTLINK               RESTORE ROUTINE LINKAGE\n         BR    R14                      RETURN TO CALLER\n         SPACE 2\n* OPERATOR VALUES FOR STACK\nEV$STRT  EQU   0                        EXPR START OR END\nEV$LPAR  EQU   1                        LEFT PAREN\nEV$RPAR  EQU   2                        RIGHT PAREN\nEV$ADD   EQU   3                        ADD\nEV$SUB   EQU   4                        SUBTRACT\nEV$MULT  EQU   5                        MULTIPLY\nEV$DIV   EQU   6                        DIVIDE\n* SPECIAL OPERATOR VALUES FOR 'GETTOKN'\nEV$CURR  EQU   7                        CURRENT ADDRESS\nEV$DEC   EQU   8                        DECIMAL NUMBER\nEV$END   EQU   9                        BLANK CHARACTER\n* OPERATOR PRIORITIES FOR STACK\nEVP$STRT EQU   0                        EXPR START AND END\nEVP$PAR  EQU   1                        PARENTHESES\nEVP$ADD  EQU   2                        ADD AND SUBTRACT\nEVP$MUL  EQU   3                        MULTIPLY AND DIVIDE\n         SPACE 2\n* OPERATOR VALUE VS. OPERATOR PRIORITY TRANSLATION TABLE\nGTOPT    DC    7X'00'\n         ORG   GTOPT+EV$LPAR\n         DC    AL1(EVP$PAR)\n         ORG   GTOPT+EV$RPAR\n         DC    AL1(EVP$PAR)\n         ORG   GTOPT+EV$ADD\n         DC    AL1(EVP$ADD)\n         ORG   GTOPT+EV$SUB\n         DC    AL1(EVP$ADD)\n         ORG   GTOPT+EV$MULT\n         DC    AL1(EVP$MUL)\n         ORG   GTOPT+EV$DIV\n         DC    AL1(EVP$MUL)\n         ORG   ,\n         SPACE 2\nGTEMID   DC    Y(L'GTETID)\nGTETID   DC    C'INVALID DECIMAL NUMBER'\n         SPACE 1\nGTEMIH   DC    Y(L'GTETIH)\nGTETIH   DC    C'INVALID HEX NUMBER'\n         SPACE 1\nGTEMTL   DC    Y(L'GTETTL)\nGTETTL   DC    C'SYMBOL OR NUMBER IS TOO LONG'\n         SPACE 1\nGTEMIC   DC    Y(L'GTETIC)\nGTETIC   DC    C'INVALID CHARACTER'\n         EJECT\n**************************************************************\n* STEVE MCGINTY HANDY-DANDY SCANNER ROUTINES (V19M5R2 OR SO) *\n**************************************************************\n         SPACE 1\n* INITIALIZE SCANNER WORK AREAS\n* REG 'R1' POINTS AT BEGINNING OF SOURCE STRING\n* REG 'R0' CONTAINS LENGTH OF SOURCE STRING\nINITCHAR BCTR  R1,0                     INITIALIZE ADDRESSES\n         ST    R1,CHARADR               SAVE STRING START (-1)\n         AR    R1,R0                    POINT TO END OF STRING\n         ST    R1,CHARLIM               SAVE STRING END\n*              NOW WE FALL INTO THE GETCHAR ROUTINE TO GET THE\n*              FIRST CHARACTER.\n         SPACE 1\n* GET THE NEXT CHARACTER FROM THE SOURCE STRING INTO 'CHAR'\n* THE CONDITION CODE WILL BE ZERO IF SUCCESSFUL, NONZERO IF NOT\nGETCHAR  MVI   CHAR,C' '                SET INITIAL VALUE\n         L     R1,CHARADR               POINT TO PREV CHAR\n         C     R1,CHARLIM               ARE WE TOO FAR?\n         BHR   R14                      YES, RETURN (NONZERO CC)\n         LA    R1,1(,R1)                POINT TO NEXT CHAR\n         ST    R1,CHARADR               SAVE NEW POINTER\n         C     R1,CHARLIM               ARE WE TOO FAR?\n         BHR   R14                      YES, RETURN (NONZERO CC)\n         OC    CHAR,0(R1)               GET CHARACTER (UPPER CASE)\n         CR    0,0                      SET COND CODE ZERO\n         BR    R14                      EXIT FOR NOW\n         SPACE 2\n* SKIP PAST CONSECUTIVE BLANKS IN THE SOURCE STRING.\nSPANSPA  ST    R14,SSLINK               SAVE THE LINK REGISTER\nSS01     CLI   CHAR,C' '                ARE WE AT A SPACE?\n         BNE   SS03                     NO, EXIT\n         BAL   R14,GETCHAR              GET THE NEXT CHARACTER\n         BZ    SS01                     GOT IT, SO GO TEST IT.\nSS03     L     R14,SSLINK               RESTORE THE LINK REGISTER\n         BR    R14                      GO BACK TO MOMMA\n         SPACE 2\n* GET A WORD (8 CHAR MAX) FROM THE SOURCE STRING.\n* HALFWORD 'WORDLEN' AND REG 'R15' WILL CONTAIN THE LENGTH, AND\n* 'WORD' WILL CONTAIN THE WORD (RIGHT FILLED WITH BLANKS).\n* IF THE SOURCE WORD WAS LONGER THAN 8 CHARACTERS, 'R15' WILL\n* BE COMPLEMENTED, AND 'WORD' WILL CONTAIN THE TRUNCATED WORD.\n* THE CONDITION CODE ALWAYS REFLECTS THE STATE OF 'R15'.\n* REGISTER USAGE:\n*   R1  - WORK\n*   R2  - OUTPUT, TRT VALUE FOR DELIMITER\n*   R14 - INPUT, RETURN ADDRESS\n*   R15 - OUTPUT, WORD LENGTH (COMPLEMENTED IF OVER 8)\nGETWORD  ST    R14,GWLINK               SAVE LINK REGISTER\n         BAL   R14,SPANSPA              SKIP LEADING SPACES\n         MVC   WORD,=8C' '              INITIALIZE THE WORD\n         MVI   CHAR,C' '                INITIALIZE CHARACTER\n         L     R15,CHARLIM              -> END OF INPUT STRING\n         LA    R1,1(,R15)               INITIALIZE FOR TRT\n         L     R14,CHARADR              -> INPUT STRING\n         SR    R2,R2                    INITIALIZE FOR TRT\n         SR    R15,R14                  LENGTH FOR TRT\n         BM    GW01                     NO DATA\n         EX    R15,GWTRT                TRT 0(0,R14),GWTBL\n         BZ    GW01                     NO DELIMITER BEFORE END\n         MVC   CHAR,0(R1)               SAVE DELIMITER CHARACTER\nGW01     ST    R1,CHARADR               SAVE DELIMITER ADDRESS\n         LR    R15,R1                   -> DELIMITER\n         SR    R15,R14                  WORD LENGTH\n         STH   R15,WORDLEN              SAVE WORD LENGTH\n         BNP   GW03                     NO DATA\n         CH    R15,=H'8'                HOW MUCH DATA?\n         BNH   GW02                     NOT TOO MUCH\n         LH    R15,=H'8'                TOO MUCH, TRUNCATE IT\nGW02     BCTR  R15,0                    MINUS 1 FOR EX\n         EX    R15,GWMVC                MVC WORD(0),0(R14)\nGW03     L     R14,GWLINK               RESTORE LINK REGISTER\n         LH    R15,WORDLEN              GET LENGTH\n         CH    R15,=H'8'                HOW'ED WE DO?\n         BH    GW04                     NOT SO HOT\n         LTR   R15,R15                  SET CONDITION CODE\n         BR    R14                      EXIT TO CALLER\nGW04     LCR   R15,R15                  COMPLEMENT LENGTH\n*                                       (AND SET COND CODE)\n         BR    R14                      EXIT\n         SPACE 2\nGWTRT    TRT   0(0,R14),GWTBL           << EXECUTED >>\nGWMVC    MVC   WORD(0),0(R14)           << EXECUTED >>\n         SPACE 2\nGWTBL    DC    256X'FF'\n         ORG   GWTBL+C' '\n         DC    AL1(EV$END)\n         ORG   GWTBL+C'('\n         DC    AL1(EV$LPAR)\n         ORG   GWTBL+C')'\n         DC    AL1(EV$RPAR)\n         ORG   GWTBL+C'+'\n         DC    AL1(EV$ADD)\n         ORG   GWTBL+C'-'\n         DC    AL1(EV$SUB)\n         ORG   GWTBL+C'*'\n         DC    AL1(EV$MULT)\n         ORG   GWTBL+C'/'\n         DC    AL1(EV$DIV)\n         ORG   GWTBL+C'$'\n         DC    AL1(EV$CURR)\n         ORG   GWTBL+C'.'\n         DC    AL1(EV$DEC)\n         ORG   GWTBL+C'A'\n         DC    9X'00'\n         ORG   GWTBL+C'J'\n         DC    9X'00'\n         ORG   GWTBL+C'S'\n         DC    8X'00'\n         ORG   GWTBL+C'0'\n         DC    10X'00'\n         ORG   ,\n         SPACE 2\n* TEST FOR ALL NUMERIC WORD AND LEAVE THE VALUE IN REG 'R15'.\n* IF IT IS NOT NUMERIC, THEN LEAVE -1.  THE CONDITION CODE WILL\n* REFLECT THE STATE OF 'R15'.\nCVDECIN  LH    R15,WORDLEN\n         LTR   R15,R15\n         BZ    CDIBAD\n         LA    R1,WORD\n         CH    R15,=H'8'\n         BH    CDIBAD\nCDI01    CLI   0(R1),C'0'\n         BL    CDIBAD\n         CLI   0(R1),C'9'\n         BH    CDIBAD\n         LA    R1,1(,R1)\n         BCT   R15,CDI01\n         LH    R15,WORDLEN\n         BCTR  R15,0\n         EX    R15,CDIPACK\n         CVB   R15,EVTEMP\n         LTR   R15,R15\n         BR    R14\nCDIPACK  PACK  EVTEMP(8),WORD(0)        << EXECUTED >>\nCDIBAD   LA    R15,1\n         LCR   R15,R15\n         BR    R14\n         SPACE 2\n* CONVERT HEXADECIMAL INPUT IN WORD INTO INTERNAL REPRESENTATION.\n* REGISTER USAGE:\n*   R1  - WORK\n*       - OUTPUT, RESULT OF CONVERSION\n*   R14 - INPUT, RETURN ADDRESS\n*   R15 - OUTPUT, RETURN CODE\n*                  0 - SUCCESS\n*                  8 - FAILURE, INVALID HEX\nCVHEXIN  LH    R1,WORDLEN               LENGTH OF HEX DATA\n         LTR   R1,R1                    IS THERE ANY?\n         BNP   CHIINV                   NO, TOO BAD\n         CH    R1,=H'8'                 IS THERE TOO MUCH?\n         BH    CHIINV                   YES, ALSO TOO BAD\n         L     R15,=A(NUMTAB)           -> TRANSLATE TABLE\n         BCTR  R1,0                     LENGTH MINUS ONE FOR EX\n         EX    R1,CHITRT                TRT WORD(0),NUMTAB\n         BNZ   CHIINV                   NOT VALID HEX\n         MVC   EVTEMP,=8C'0'            INITIALIZE WORK AREA\n         LA    R15,EVTEMP+7             -> END OF DEST\n         SR    R15,R1                   -> DESTINATION\n         EX    R1,CHIMVC                MVC 0(0,R15),WORD\n         L     R15,=A(HEXTAB)           -> TRANSLATE TABLE\n         TR    EVTEMP(8),0(R15)         CONVERT TO PSEUDO-HEX\n         PACK  EVTEMP+8(4+1),EVTEMP(8+1)  PACK INTO REAL HEX\n         L     R1,EVTEMP+8              RETURN NUMBER TO CALLER\n         SR    R15,R15                  INDICATE GOOD NUMBER\n         BR    R14                      RETURN TO CALLER\nCHIINV   LA    R15,8                    INDICATE FAILURE\n         BR    R14                      RETURN TO CALLER\n         SPACE 1\nCHITRT   TRT   WORD(0),0(R15)           << EXECUTED >>\nCHIMVC   MVC   0(0,R15),WORD            << EXECUTED >>\n         SPACE 2\n         DROPX R10,R11                  DROP BASE REGISTERS\n         SPACE 2\n         LTORG\n         EJECT\nCOREHELP CSECT                                                     U043\n         DC    F'3'                     NUMBER OF HELP SCREENS     U043\n         DC    A(HELP001,HELP001L)      ADDRESS, LENGTH            U043\n         DC    A(HELP002,HELP002L)      ADDRESS, LENGTH            U043\n         DC    A(HELP003,HELP003L)      ADDRESS, LENGTH            U043\n*  FIRST LINE OF EACH SCREEN IS TITLE AND GOES ON \"MSGLINE\"        U043\n         SPACE 2\nHELP001  DC    CL79'                        *********** COMMANDS ******$\n               ****'                                               U025\n         DC    CL79' '                                         1   U025\n         DC    CL79'B<name>  - Display current location as control bloc$\n               k <name>'                                       2   U025\n         DC    CL79'B        - Turn off control block mapping for this $\n               location this time'                             3   U025\n         DC    CL79'I<exp>   - Indirect from location <exp>  IS<exp> - $\n               Indirect Short (24 bit)'                        4   U066\n         DC    CL79'L<name>  - Link using <name> field from current con$\n               trol block mapping'                             5   U025\n         DC    CL79',<exp>   - Display location <exp>'         6   U025\n         DC    CL40'HISTORY  - Display history table        '  7   U057\n         DC    CL39'                                       '       U058\n         DC    CL40'=<name>  - Define symbol                '  8   U025\n         DC    CL39'UCB<cuu> - Display UCB for device <cuu>'       U025\n         DC    CL40'=        - Display symbol table         '  9   U025\n         DC    CL39'MODE1    - Set mode to disp+0          '       U023\n         DC    CL40'>        - Forward in history table     '  10  U025\n         DC    CL39'MODE2    - Set mode to disp-64         '       U023\n         DC    CL40'<        - Backward in history table    '  11  U025\n         DC    CL39'?2       - Display more commands       '       U025\n         DC    CL40'D        - Scroll down (+x''100'')      '  12  U025\n         DC    CL39'?3       - Display pf key definitions  '       U025\n         DC    CL40'U        - Scroll up   (-x''100'')      '  13  U025\n         DC    CL39'*        - Re-prompt previous input cmd'       U036\n         DC    CL40'M<name>  - Find module in LPA/MLPA      '  14  U069\n         DC    CL39'SVC<exp> - Find SVC routine            '       U057\n         DC    CL40'LPA<name> - Find module in LPA          ' 15   U069\n         DC    CL39'SSCVT    - Locate subsys control block '       U058\n         DC    CL40'END      - Exit from this processor    '   16  U025\n         DC    CL39'                                       '       U069\nHELP001L EQU   *-HELP001                                           U025\n         SPACE 2\nHELP002  DC    CL79'                  *********** COMMANDS (continued) $\n               **********                 '                        U033\n         DC    CL79' '                  1                          U025\n         DC    CL79'PAGEFIX  - Page fix current location until LOGOFF  $\n                      (privileged command)'  2                     U025\n         DC    CL79'PAGEFREE - Un-fix page at current location         $\n                      (privileged command)'  3                     U025\n         DC    CL79'Z        - Set/reset keyzero                       $\n                      (privileged command)'  4                     U025\n         DC    CL79'S<data>  - Store <data> at current loc'  5     U025\n         DC    CL79'X<data>  - Exclusive or at current loc'  6     U025\n         DC    CL79'O<data>  - \"Or\"  <data> at current loc'  7     U025\n         DC    CL79'N<data>  - \"And\" <data> at current loc'  8     U025\n         DC    CL79'F<data>  - Search for <data>'            9     U032\n         DC    CL79'--- <data> is a character string enclosed in delimi$\n               ters, or a hex string    ---'  10                   U025\n         DC    CL79'--- Examples:  N7f     turn off high order bit in b$\n               yte at current location  ---'  11                   U025\n         DC    CL79'---     S/hi there/    store ''hi there'' at curren$\n               t location                 ---'  12                 U025\n         DC    CL79'--- Note:  Searches and alters are done in current $\n               key (set by \"Z\" command) ---'  13                   U032\n         DC    CL79'--- Note:  An operand of \"*\" for cmds S,X,O,N,F wil$\n               l re-prompt the last oprnd -'  14                   U032\nHELP002L EQU   *-HELP002                                           U025\n         SPACE 2\nHELP003  DC    CL79'                        ****** PF KEY DEFINITIONS *$\n               *****'                                              U025\n         DC    CL79' '                                             U025\n         DC    CL79'PF1 / PF13   -  Help (this screen)'            U025\n         DC    CL79'PF2 / PF14   -  Start auto updating'           U025\n         DC    CL79'PF3 / PF15   -  End (exit from processor)'     U025\n         DC    CL79'PF4 / PF16   -  (unused)'                      U025\n         DC    CL79'PF5 / PF17   -  Repeat last find command'      U025\n         DC    CL79'PF6 / PF18   -  Repeat last input line'        U025\n         DC    CL79'PF7 / PF19   -  Scroll up or go to previous control$\n                block segment              '                       U025\n         DC    CL79'PF8 / PF20   -  Scroll down or go to next control b$\n               lock segment                '                       U025\n         DC    CL79'PF9 / PF21   -  (unused)'                      U025\n         DC    CL79'PF10/ PF22   -  Back thru history'             U025\n         DC    CL79'PF11/ PF23   -  Forward thru history'          U025\n         DC    CL79'PF12/ PF24   -  End (exit from processor)'     U025\n         DC    CL79' '                                             U025\n         DC    CL79'PA1 / ATTN   -  Stop auto updating'            U025\nHELP003L EQU   *-HELP003                                           U025\n         EJECT\nWORKAREA DSECT\nCLRSTART EQU   *                                                   U011\nOLDPIE   DS    A                        ADDRESS OF PREVIOUS PIE    U006\nLOGOOD   DS    A                        LOWEST ADDRESS FETCHED     U026\nHIGOOD   DS    A                        HIGHEST ADDRESS FETCHED    U026\nCURRLOC  DS    A                        CURRENT DISPLAY LOCATION   U040\nCELINK   DS    A                        LINKAGE SAVED BY CALLEVAL  U057\nFIXECB   DS    F                        ECB FOR PGFIX              U020\nALTERPTR DS    A                        -> ALTER INSTRUCTION       U017\nFINDCNT1 DS    F                        BYTES SCANNED              U032\nFINDCNT2 DS    F                        K SKIPPED                  U032\n         SPACE 1\nALTERLEN DS    H                        LENGTH OF DATA TO STORE    U048\nALTERDLM DS    C                        DELIMITER FOR ALTER        U048\nALTRDATA DS    CL76,C                   DATA TO STORE              U048\n         SPACE 1\nFINDLEN  DS    H                        LENGTH OF DATA TO FIND     U048\nFINDDLM  DS    C                        DELIMITER FOR FIND         U048\nFINDDATA DS    CL76,C                   DATA TO FIND               U048\n         SPACE 1\nSTRWORK  DSECT                                                     U048\nSTRLEN   DS    H                        LENGTH OF DATA             U048\nSTRDLM   DS    C                        DELIMITER                  U048\nSTRDATA  DS    CL76,C                   DATA                       U048\n         SPACE 1\nWORKAREA DSECT                          RESUME                     U032\n         DS    0D                       ALIGNMENT                  U046\nDUMPDATA DS    XL256                    DATA RETURNED BY GETSTOR\nTRTAB    DS    XL256                    TRT TABLE TO WORK WITH     U032\nHEXWORK  DS    CL32,C                                              U021\nKEYSAVE  DS    X                        \"GOFETCH\" SAVES KEY HERE   U047\nKEYSAVE1 DS    X                        KEY FOR FIRST PART         U047\nKEYSAVE2 DS    X                        KEY FOR SECOND PART        U047\nCURRENT  DS    H                        HIST TABLE OFFSET\nASID     DS    H                        OTHER ASID, OR ZERO        U045\nASIDPREV DS    H                        PREVIOUS ASID FOR UNBIND   U061\nOLDSASID DS    H                        PREVIOUS SECONDARY ASID    U061\nOLDAXVAL DS    H                        PREVIOUS AUTH INDEX        U061\nMYKEY    DS    X                        my normal execution key    U068\n         DS    X                        currently wasted           U068\n         DS    0F                       ALIGNMENT FOR 'OPERAND'    U061\nOPERAND  DS    CL78                     OPERAND OF THIS COMMAND    U048\nJOBNAME  DS    CL8                      OTHER JOBNAME              U045\nADDRASCB DS    A                        ADDR OF OTHER ASCB         U045\n         SPACE 1\nIOAREA   EQU   *\n         DSGEN SCR1\nIOLEN    EQU   *-IOAREA\n         ORG   HEADER+79-28                                        U046\nPGMCKMSG DS    CL28                                                U046\n         ORG   ,                                                   U046\nTEMP1    DS    D,C                      CONVERSION WORK AREA       U021\nTEMP2    DS    CL9                      CONVERSION WORK AREA\n         SPACE 1\nFLAGS    DS    X                        ASSORTED FLAGS\nINDFLAG  EQU   X'80'                    INDIRECT IN PROGRESS\nAUTOFLAG EQU   X'40'                    WE ARE AUTO UPDATING       U007\nAUTHAPF  EQU   X'20'                    WE ARE APF AUTHORIZED      U008\nAUTHUSER EQU   X'10'                    THIS USER IS A GOOD GUY    U008\nDISPKEY  EQU   X'08'                    FORMATTING FOR DISPLAY     U054\nAXSAVED  EQU   X'04'                    OLD AX SAVED IN OLDAXVAL   U061\nINDFLAGS EQU   X'02'                    Short Indirect             U066\nPGMCHKOK EQU   X'01'                    PGM CHECKS ARE ALLOWED     U041\n         SPACE 1\nMODEFLAG DS    X                        USER OPTION FLAGS\nMIDDUMP  EQU   X'80'                    ON TO FORCE DISP BACK 4 LINES\nKEYZERO  EQU   X'08'                    FETCH SHOULD BE DONE KEY0  U008\n         SPACE 1\n          AIF   (&@@SPLVL LT 200).XA94                             U071\nIOSPARM  DS    3A                       parmlist for IOSVSUCB      U071\nIOSANSW  DS    A                        answer area                U071\n         DS    0D                       alignment                  U071\nIOSWORK  DS    CL100                    work area for IOSVSUCB     U071\n.XA94     ANOP                                                     U071\n         EJECT\nIOCB     IOCB\n         EJECT ,\nHISTORY  DS    (NUMHIST*8/4)F           HISTORY TABLE              U044\n         DS    X                        END OF LIST INDICATOR      U044\n         DS    0D                       ALIGN THE FOLLOWING        U044\nNAMES    DS    (NUMNAME*12/4)F          SYMBOL TABLE               U044\n         SPACE 1\nCLRLEN   EQU   *-CLRSTART               LENGTH TO CLEAR            U044\n*\n*  ROUTINE \"EVAL\" WORK AREA\n*\nEVALWK   DC    0D'0'\nEVTEMP   DC    2D'0'                    CONVERSION WORK AREA\nWORD     DC    CL8' '\nGTLINK   DC    A(0)                     TOKEN ROUTINE RETURN ADDRESS\nSSLINK   DC    A(0)\nGWLINK   DC    A(0)\nCHARADR  DC    A(0)\nCHARLIM  DC    A(0)\n         SPACE 1\nEVNSTAKP DC    A(0)                     EVNSTACK POINTER\nEVNSTAK  DC    10F'0'                   EVAL NUMBER STACK\nEVNSTAKE EQU   *-4                      EVNSTAK LIMIT\n         SPACE 1\nEVOSTAKP DC    A(0)                     EVOSTACK POINTER\nEVOSTAK  DC    10H'0'                   EVAL OPERATOR STACK\nEVOSTAKE EQU   *-2                      EVOSTAK LIMIT\n         SPACE 1\nOPERATOR DC    H'0'                     OPERATOR AND PRIORITY\nOPPRIOR  EQU   OPERATOR+1,1             PRIORITY\nWORDLEN  DC    H'0'\nEVERRWK  DC    Y(0),CL40' '             ERROR MESSAGE BUILD AREA\nCHAR     DC    C' '\n         SPACE 1\nEVFLAGS  DC    X'00'                    EVAL ROUTINE FLAGS\nEVFINIT  EQU   X'80'                    FIRST TOKEN IN STRING\nEVFNUM   EQU   X'40'                    PREV TOKEN NUMERIC\nEVFREL   EQU   X'20'                    EXPR IS RELATIVE\n         SPACE 2\nWORKLEN  EQU   *-WORKAREA\n         SPACE 5\n*---------------------------------------------------------------------*\n*\n* CBS  -- CONTROL BLOCK SEGMENT\n*\n*---------------------------------------------------------------------*\n         SPACE 2\nCBS      DSECT\nCBSPREV  DS    A                        ADDR OF PREVIOUS SEGMENT\nCBSNEXT  DS    A                        ADDR OF NEXT SEGMENT\nCBSFIRST DS    H                        OFFSET OF FIRST DATA TO FETCH\nCBSSIZE  DS    H                        LENGTH OF DATA TO FETCH\nCBSNAME  DS    CL8                      SEGMENT IDENTIFIER\n* THE FOLLOWING FIELDS DESCRIBE A FORMAT ITEM\nCBSTYPE  DS    H                        FORMAT TYPE\n*                                         4=HEX\n*                                         8=LABEL\n*                                        12=CHAR\nCBSLEN   DS    H                        SCREEN LENGTH OF ITEM AS REQ\n*                                       BY FORMAT ROUTINE\nCBSOFF   DS    H                        SCREEN OFFSET OF ITEM\nCBSDATA  DS    H                        DATA OFFSET FROM START OF THIS\n*                                       SEGMENTS DATA AREA OR A\n*                                       VARIABLE LENGTH CONSTANT\n         EJECT\n         IKJPSCB\n         EJECT\n         IHALPDE ,                                                 U033\n         SPACE 1\nLPDELEN  EQU   *-LPDE                   LENGTH OF LPDE             U033\n         EJECT\n         IHACDE ,                                                  U037\n         EJECT\n         IHAXTLST ,                                                U037\n         SPACE 2\n          AIF   (&@@SPLVL LT 200).XA92                             U063\n         IHAEPIE  ,                                                U063\n.XA92     ANOP                                                     U063\n         SPACE 2\n         PRINT NOGEN\n         SPACE 2\n         IHAPSA  ,                                                 U070\n         SPACE 2\n         CVT   DSECT=YES                                           U070\n         SPACE 2\n         IHAASCB  ,                                                U045\n         SPACE 2\n         IRAOUCB  ,                                                U059\n         SPACE 2\n         IKJTCB   ,                                                U070\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CORECBS": {"ttr": 4872, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x80\\t\\x1f\\x00\\x92\\t\\x0f E\\x03@\\x02\\xb1\\x00\\x96\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1980-03-31T00:00:00", "modifydate": "1992-03-30T20:45:00", "lines": 832, "newlines": 689, "modlines": 150, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1988 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n         MACRO\n&N       CBSTART\n         GBLC  &FIRST,&PREV,&CURR,&NEXT\n&FIRST   SETC  '&SYSNDX'\n&CURR    SETC  '&FIRST.E'\n&NEXT    SETC  '&FIRST'\n&N       EQU   *\n         MEND\n         SPACE 3\n         MACRO\n         CBSEG &OFF=,&LEN=,&NAME='CTRL BLK'\n         GBLC  &FIRST,&PREV,&CURR,&NEXT\n         GBLA  &SEGOFF,&HEX\n         LCLC  &SEGSTR\n         AIF   (&FIRST EQ &NEXT).NF    SKIP IF FIRST SEG\n         DC    AL2(0)                  END PREVIOUS SEGMENT\n.NF      ANOP\n&PREV    SETC  '&CURR'\n&CURR    SETC  '&NEXT'\n&NEXT    SETC  '&SYSNDX'\nCB&CURR  DC    AL4(CB&PREV,CB&NEXT)    PREV AND NEXT SEG ADDRS\n         CBCONV &OFF,OFF\n&SEGOFF  SETA  &HEX\n&SEGSTR  SETC  '&HEX' GET AROUND SIGN PROBLEMS WITH SETC\n         AIF   (&HEX GE 0).NOSIGN\n&SEGSTR  SETC '-'.'&HEX'\n.NOSIGN  ANOP\n         CBCONV &LEN,LEN\n         DC    FL2'&SEGSTR,&HEX'       SEGMENT DATA OFFSET AND LENGTH\n         DC    CL8&NAME                SEGMENT NAME\n.MEND    MEND\n         SPACE 3\n         MACRO\n         CBITEM &TYPE,&ROW,&COL,&OFF,&LEN,&DIGIT=0\n         GBLA  &SEGOFF,&HEX\n         LCLA  &IOFF,&ILEN\n         AIF   ('&TYPE' NE 'LABEL').NOLABEL SKIP IF NOT LABEL TYPE\n         DC    AL2(8)                  LABEL TYPE\n&ILEN    SETA  K'&OFF-3                CALCULATE LENGTH\n         DC    AL2(&ILEN)              LENGTH\n         DC    AL2(&ROW*79-79+&COL-1)  SCREEN OFFSET\n         DC    C&OFF                   EBCDIC CONSTANT\n         MEXIT\n.NOLABEL CBCONV &OFF,OFFSET            CONVERT DATA OFFSET FROM HEX\n&IOFF    SETA  &HEX-&SEGOFF            TO DECIMAL\n         AIF   (&HEX LT &SEGOFF).OFFLOW SEE IF TOO LOW FOR SEGMENT\n         AIF   (&HEX GT (&SEGOFF+255)).OFFHI OR IF TOO HIGH\n         CBCONV &LEN,LENGTH            JUST CHECK FOR VALID HEX\n&ILEN    SETA  &HEX-1                  CALCULATE LENGTH\n         AIF   ('&TYPE' NE 'HEX').NOHEX SKIP IF NOT HEX TYPE\n         AIF   ('&DIGIT' NE '0' AND '&DIGIT' NE '1').BADDIG\n         DC    AL2(4)                  HEX TYPE\n         DC    AL1(&DIGIT,&ILEN)       DIGIT OFFSET AND LENGTH\n         DC    AL2(&ROW*79-79+&COL-1)  SCREEN OFFSET\n         DC    AL2(&IOFF)              DATA OFFSET\n         MEXIT\n.NOHEX   AIF   ('&TYPE' NE 'EBCD').NOTYPE SKIP IF NOT EBCDIC TYPE\n         DC    AL2(12)                 EBCDIC DATA TYPE\n         DC    AL2(&ILEN)              LENGTH\n         DC    AL2(&ROW*79-79+&COL-1)  SCREEN OFFSET\n         DC    AL2(&IOFF)              DATA OFFSET\n         MEXIT\n.NOTYPE  MNOTE 8,'TYPE FIELD MISSING OR INVALID'\n         MEXIT\n.BADDIG  MNOTE 8,'DIGIT FIELD INVALID'\n         MEXIT\n.OFFLOW  MNOTE 8,'OFFSET SPECIFIED TOO LOW FOR SEGMENT'\n         MEXIT\n.OFFHI   MNOTE 8,'OFFSET SPECIFIED TOO HIGH FOR SEGMENT'\n         MEND\n         SPACE 3\n         MACRO\n         CBEND\n         GBLC  &FIRST,&PREV,&CURR,&NEXT\n         DC    AL2(0)                  END OF SEGMENT INDICATOR\nCB&NEXT  EQU   CB&FIRST                WRAP AROUND SEG CHAIN\nCB&FIRST.E EQU CB&CURR                 BACKWARDS WRAP\n         MEND\n         SPACE 3\n         MACRO\n         CBCONV &DATA,&NAME\n         GBLA  &HEX\n         LCLC  &CH\n         LCLA  &N\n&HEX     SETA  0\n         AIF   ('&DATA'(1,1) NE '-').LOOP\n&N       SETA  1\n.LOOP    AIF   (&N GE K'&DATA).DONE\n&N       SETA  &N+1\n&CH      SETC  '&DATA'(&N,1)\n         AIF   ('&CH' GE '0').ZEROTO9\n         AIF   ('&CH' EQ 'A').AX\n         AIF   ('&CH' EQ 'B').BX\n         AIF   ('&CH' EQ 'C').CX\n         AIF   ('&CH' EQ 'D').DX\n         AIF   ('&CH' EQ 'E').EX\n         AIF   ('&CH' EQ 'F').FX\n         MNOTE 12,'&DATA FIELD NOT A VALID HEX NUMBER'\n&HEX     SETA  0\n         MEXIT\n.ZEROTO9 ANOP\n&HEX     SETA  &HEX*16+&CH\n         AGO   .LOOP\n.AX      ANOP\n&HEX     SETA  &HEX*16+X'A'\n         AGO   .LOOP\n.BX      ANOP\n&HEX     SETA  &HEX*16+X'B'\n         AGO   .LOOP\n.CX      ANOP\n&HEX     SETA  &HEX*16+X'C'\n         AGO   .LOOP\n.DX      ANOP\n&HEX     SETA  &HEX*16+X'D'\n         AGO   .LOOP\n.EX      ANOP\n&HEX     SETA  &HEX*16+X'E'\n         AGO   .LOOP\n.FX      ANOP\n&HEX     SETA  &HEX*16+X'F'\n         AGO   .LOOP\n.DONE    AIF ('&DATA'(1,1) NE '-').MEND\n&HEX     SETA  0-&HEX\n.MEND    MEND\n         SPACE 3\n         EJECT\nCBMACS   CSECT\n         ENTRY CBINDEX\nCBINDEX  DC    XL4'0A0307FE',XL4'00000050',A(CVTMAP)\n         DC    CL4'TCB ',FL4'256',AL4(TCBMAP)\n         DC    CL4'ASCB',FL4'0',AL4(ASCBMAP)\n         DC    CL4'CVT ',FL4'0',AL4(CVTMAP)\n         DC    CL4'UVT ',FL4'0',AL4(UVTMAP)\n         DC    CL4'RB  ',FL4'0',AL4(RBMAP)\n         DC    CL4'OUCB',FL4'0',AL4(OUCBMAP)\n         DC    CL4'SDWA',FL4'0',AL4(SDWAMAP)\n         DC    X'FF'\nCVTMAP   CBSTART\n         CBSEG OFF=0,LEN=100,NAME='CVT 1'\n         CBITEM LABEL,1,1,'TCBP'\n         CBITEM HEX,1,7,0,8\n         CBITEM LABEL,1,17,'0EF00'\n         CBITEM HEX,1,23,4,8\n         CBITEM LABEL,1,33,'LINK'\n         CBITEM HEX,1,39,8,8\n         CBITEM LABEL,1,49,'RESV'\n         CBITEM HEX,1,55,C,8\n         CBITEM LABEL,1,65,'BUF'\n         CBITEM HEX,1,71,10,8\n         CBITEM LABEL,2,1,'XAPG'\n         CBITEM HEX,2,7,14,8\n         CBITEM LABEL,2,17,'0VL00'\n         CBITEM HEX,2,23,18,8\n         CBITEM LABEL,2,33,'PCNVT'\n         CBITEM HEX,2,39,1C,8\n         CBITEM LABEL,2,49,'PRLTV'\n         CBITEM HEX,2,55,20,8\n         CBITEM LABEL,2,65,'ILK1'\n         CBITEM HEX,2,71,24,8\n         CBITEM LABEL,3,1,'ILK2'\n         CBITEM HEX,3,7,028,8\n         CBITEM LABEL,3,17,'XTLER'\n         CBITEM HEX,3,23,02C,8\n         CBITEM LABEL,3,33,'SYSAD'\n         CBITEM HEX,3,39,030,8\n         CBITEM LABEL,3,49,'BTERM'\n         CBITEM HEX,3,55,034,8\n         CBITEM LABEL,3,65,'DATE'\n         CBITEM HEX,3,71,038,8\n         CBITEM LABEL,4,1,'MSLT'\n         CBITEM HEX,4,7,3C,8\n         CBITEM LABEL,4,17,'ZDTAB'\n         CBITEM HEX,4,23,40,8\n         CBITEM LABEL,4,33,'XITP'\n         CBITEM HEX,4,39,44,8\n         CBITEM LABEL,4,49,'EXIT'\n         CBITEM HEX,4,55,50,4\n         CBITEM LABEL,4,65,'BRET'\n         CBITEM HEX,4,71,52,4\n         CBITEM LABEL,5,1,'SVDCB'\n         CBITEM HEX,5,7,54,8\n         CBITEM LABEL,5,17,'TPC'\n         CBITEM HEX,5,23,58,8\n         CBITEM LABEL,5,33,'CUCB'\n         CBITEM HEX,5,39,64,8\n         CBITEM LABEL,5,49,'QTE00'\n         CBITEM HEX,5,55,68,8\n         CBITEM LABEL,5,65,'QTD00'\n         CBITEM HEX,5,71,6C,8\n         CBITEM LABEL,6,1,'STB'\n         CBITEM HEX,6,7,70,8\n         CBITEM LABEL,6,17,'DCB'\n         CBITEM HEX,6,23,74,8\n         CBITEM LABEL,6,33,'IXAVL'\n         CBITEM HEX,6,39,7C,8\n         CBITEM LABEL,6,49,'NUCB'\n         CBITEM HEX,6,55,80,8\n         CBITEM LABEL,6,65,'FBOSV'\n         CBITEM HEX,6,71,84,8\n         CBITEM LABEL,7,1,'0DS'\n         CBITEM HEX,7,7,88,8\n         CBITEM LABEL,7,17,'ILCH'\n         CBITEM HEX,7,23,8C,8\n         CBITEM LABEL,7,33,'MSER'\n         CBITEM HEX,7,39,94,8\n         CBITEM LABEL,7,49,'0PT01'\n         CBITEM HEX,7,55,98,8\n         CBITEM LABEL,7,65,'MZ00'\n         CBITEM HEX,7,71,A4,8\n         CBITEM LABEL,8,1,'1EF00'\n         CBITEM HEX,8,7,A8,8\n         CBITEM LABEL,8,17,'QOCR'\n         CBITEM HEX,8,23,AC,8\n         CBITEM LABEL,8,33,'QMWR'\n         CBITEM HEX,8,39,B0,8\n         CBITEM LABEL,8,49,'SNCTR'\n         CBITEM HEX,8,55,B4,4\n         CBITEM LABEL,8,65,'OPT '\n         CBITEM HEX,8,71,B6,4\n         CBITEM LABEL,9,1,'QCDSR'\n         CBITEM HEX,9,7,B8,8\n         CBITEM LABEL,9,17,'QLPAQ'\n         CBITEM HEX,9,23,BC,8\n         CBITEM LABEL,9,33,'SMCA'\n         CBITEM HEX,9,39,C4,8\n         CBITEM LABEL,9,49,'ABEND'\n         CBITEM HEX,9,55,C8,8\n         CBITEM LABEL,9,65,'USER'\n         CBITEM HEX,9,71,CC,8\n         CBITEM LABEL,10,1,'QABST'\n         CBITEM HEX,10,7,D4,8\n         CBITEM LABEL,10,17,'TSCE'\n         CBITEM HEX,10,23,D8,8\n         CBITEM LABEL,10,33,'PATCH'\n         CBITEM HEX,10,39,DC,8\n         CBITEM LABEL,10,49,'RMS'\n         CBITEM HEX,10,55,E0,8\n         CBITEM LABEL,10,65,'0SCR1'\n         CBITEM HEX,10,71,E8,8\n         CBITEM LABEL,11,1,'GTF'\n         CBITEM HEX,11,7,EC,8\n         CBITEM LABEL,11,17,'AQAVT'\n         CBITEM HEX,11,23,F0,8\n         CBITEM LABEL,11,33,'VOLM2'\n         CBITEM HEX,11,39,F4,8\n         CBITEM LABEL,11,49,'EXT1'\n         CBITEM HEX,11,55,FC,8\n         CBITEM LABEL,13,1,'CVT --  FIRST SEGMENT'\n         CBSEG OFF=100,LEN=100,NAME='CVT+100'\n         CBITEM LABEL,1,1,'TCBSP'\n         CBITEM HEX,1,7,100,8\n         CBITEM LABEL,1,17,'PURGA'\n         CBITEM HEX,1,23,105,6\n         CBITEM LABEL,1,33,'AMFF'\n         CBITEM HEX,1,39,108,8\n         CBITEM LABEL,1,49,'QMSG'\n         CBITEM HEX,1,55,10C,8\n         CBITEM LABEL,1,65,'DMSR'\n         CBITEM HEX,1,71,110,8\n         CBITEM LABEL,2,1,'REAL'\n         CBITEM HEX,2,7,11C,8\n         CBITEM LABEL,2,17,'PTRV'\n         CBITEM HEX,2,23,120,8\n         CBITEM LABEL,2,33,'JESCT'\n         CBITEM HEX,2,39,128,8\n         CBITEM LABEL,2,49,'TZ'\n         CBITEM HEX,2,55,130,8\n         CBITEM LABEL,2,65,'MCHPR'\n         CBITEM HEX,2,71,134,8\n         CBITEM LABEL,3,1,'EORM'\n         CBITEM HEX,3,7,138,8\n         CBITEM LABEL,3,17,'APF'\n         CBITEM HEX,3,23,144,8\n         CBITEM LABEL,3,33,'EXT2'\n         CBITEM HEX,3,39,148,8\n         CBITEM LABEL,3,49,'HJES'\n         CBITEM HEX,3,55,14C,8\n         CBITEM LABEL,3,65,'GETL'\n         CBITEM HEX,3,71,15C,8\n         CBITEM LABEL,13,1,'CVT  -- SECOND SEGMENT'\n         CBSEG OFF=-6,LEN=6,NAME='CVT PREFIX'\n         CBITEM LABEL,1,1,'MODEL'\n         CBITEM HEX,1,7,-6,4\n         CBITEM LABEL,1,13,'RELEASE'\n         CBITEM EBCD,1,21,-4,4\n         CBEND\nUVTMAP   CBSTART\n         CBSEG OFF=0,LEN=128,NAME='USCUVT 1'\n         CBITEM LABEL,1,01,'ID'\n         CBITEM  EBCD,1,08,00,8\n         CBITEM LABEL,1,20,'SIZE'\n         CBITEM   HEX,1,27,08,8\n         CBITEM LABEL,1,39,'VERS'\n         CBITEM   HEX,1,46,0C,8\n         CBITEM LABEL,1,58,'SYSTB'\n         CBITEM   HEX,1,65,10,8\n         CBITEM LABEL,2,01,'SYSTN'\n         CBITEM   HEX,2,08,14,8\n         CBITEM LABEL,2,20,'MSG'\n         CBITEM   HEX,2,27,18,8\n         CBITEM LABEL,2,39,'RV001'\n         CBITEM   HEX,2,46,1C,8\n         CBITEM LABEL,2,58,'VTACT'\n         CBITEM   HEX,2,65,20,8\n         CBITEM LABEL,3,01,'RV002'\n         CBITEM   HEX,3,08,24,8\n         CBITEM LABEL,3,20,'LGN'\n         CBITEM   HEX,3,27,28,8\n         CBITEM LABEL,3,39,'EFLA1'\n         CBITEM   HEX,3,46,2C,8\n         CBITEM LABEL,3,58,'RV003'\n         CBITEM   HEX,3,65,30,8\n         CBITEM LABEL,4,01,'RV003'\n         CBITEM   HEX,4,08,34,8\n         CBITEM LABEL,4,20,'RV003'\n         CBITEM   HEX,4,27,38,8\n         CBITEM LABEL,4,39,'RV003'\n         CBITEM   HEX,4,46,3C,8\n         CBITEM LABEL,4,58,'FLAGS'\n         CBITEM   HEX,4,65,40,8\n         CBITEM LABEL,5,01,'(    )'\n         CBITEM   HEX,5,08,44,8\n         CBITEM LABEL,5,20,'(    )'\n         CBITEM   HEX,5,27,48,8\n         CBITEM LABEL,5,39,'(    )'\n         CBITEM   HEX,5,46,4C,8\n         CBITEM LABEL,5,58,'WORD'\n         CBITEM  EBCD,5,65,50,8\n         CBITEM LABEL,6,01,'RV004'\n         CBITEM   HEX,6,08,58,8\n         CBITEM LABEL,6,20,'RV004'\n         CBITEM   HEX,6,27,5C,8\n         CBITEM LABEL,6,39,'RV005'\n         CBITEM   HEX,6,46,60,8\n         CBITEM LABEL,6,58,'RV005'\n         CBITEM   HEX,6,65,64,8\n         CBITEM LABEL,7,01,'RV006'\n         CBITEM   HEX,7,08,68,8\n         CBITEM LABEL,7,20,'RV006'\n         CBITEM   HEX,7,27,6C,8\n         CBITEM LABEL,7,39,'RV006'\n         CBITEM   HEX,7,46,70,8\n         CBITEM LABEL,7,58,'RV006'\n         CBITEM   HEX,7,65,74,8\n         CBITEM LABEL,8,01,'RV006'\n         CBITEM   HEX,8,08,78,8\n         CBITEM LABEL,8,20,'RV006'\n         CBITEM   HEX,8,27,7C,8\n         CBITEM LABEL,13,1,                                            $\n               'University of Southern California User Vector Table'\n         CBEND\nTCBMAP   CBSTART\n         CBSEG OFF=-020,LEN=100,NAME='TCB 1'\n         CBITEM LABEL,1,15,' TCB  FIRST SEGMENT'\n         CBITEM LABEL,2,1,'FLOATING POINT REGISTERS'\n         CBITEM LABEL,2,27,'0'\n         CBITEM LABEL,2,48,'2'\n         CBITEM LABEL,3,27,'4'\n         CBITEM LABEL,3,48,'6'\n         CBITEM HEX,2,29,-20,8\n         CBITEM HEX,2,38,-1C,8\n         CBITEM HEX,2,50,-18,8\n         CBITEM HEX,2,59,-14,8\n         CBITEM HEX,3,29,-10,8\n         CBITEM HEX,3,38,-C,8\n         CBITEM HEX,3,50,-8,8\n         CBITEM HEX,3,59,-4,8\n         CBITEM LABEL,4,1,'RBP'\n         CBITEM HEX,4,7,00,8\n         CBITEM LABEL,4,17,'PIE'\n         CBITEM HEX,4,23,04,8\n         CBITEM LABEL,4,33,'DEB'\n         CBITEM HEX,4,39,08,8\n         CBITEM LABEL,4,49,'TIO'\n         CBITEM HEX,4,55,0C,8\n         CBITEM LABEL,4,65,'CMP'\n         CBITEM HEX,4,71,10,8\n         CBITEM LABEL,5,1,'TRN'\n         CBITEM HEX,5,7,14,8\n         CBITEM LABEL,5,17,'MSS'\n         CBITEM HEX,5,23,18,8\n         CBITEM LABEL,5,33,'PKF'\n         CBITEM HEX,5,39,1C,2\n         CBITEM LABEL,5,43,'FLGS'\n         CBITEM HEX,5,48,1D,8\n         CBITEM HEX,5,56,21,2\n         CBITEM LABEL,5,60,'LMP'\n         CBITEM HEX,5,64,22,2\n         CBITEM LABEL,5,68,'DSP'\n         CBITEM HEX,5,72,23,2\n         CBITEM LABEL,6,1,'LLS'\n         CBITEM HEX,6,7,24,8\n         CBITEM LABEL,6,17,'JLB'\n         CBITEM HEX,6,23,28,8\n         CBITEM LABEL,6,33,'JPQ'\n         CBITEM HEX,6,39,2C,8\n         CBITEM LABEL,7,1,'GENERAL REGISTERS:'\n         CBITEM LABEL,8,1,'0-7'\n         CBITEM HEX,8,6,30,8\n         CBITEM HEX,8,15,34,8\n         CBITEM HEX,8,24,38,8\n         CBITEM HEX,8,33,3C,8\n         CBITEM HEX,8,42,40,8\n         CBITEM HEX,8,51,44,8\n         CBITEM HEX,8,60,48,8\n         CBITEM HEX,8,69,4C,8\n         CBITEM LABEL,9,1,'8-F'\n         CBITEM HEX,9,6,50,8\n         CBITEM HEX,9,15,54,8\n         CBITEM HEX,9,24,58,8\n         CBITEM HEX,9,33,5C,8\n         CBITEM HEX,9,42,60,8\n         CBITEM HEX,9,51,64,8\n         CBITEM HEX,9,60,68,8\n         CBITEM HEX,9,69,6C,8\n         CBITEM LABEL,10,1,'FSA'\n         CBITEM HEX,10,7,70,8\n         CBITEM LABEL,10,17,'TCB'\n         CBITEM HEX,10,23,74,8\n         CBITEM LABEL,10,33,'TME'\n         CBITEM HEX,10,39,78,8\n         CBITEM LABEL,10,49,'JSTCB'\n         CBITEM HEX,10,55,7C,8\n         CBITEM LABEL,10,65,'NTC'\n         CBITEM HEX,10,71,80,8\n         CBITEM LABEL,11,1,'OTC'\n         CBITEM HEX,11,7,84,8\n         CBITEM LABEL,11,17,'LTC'\n         CBITEM HEX,11,23,88,8\n         CBEND\nASCBMAP  CBSTART\n         CBSEG OFF=0,LEN=D0,NAME='ASCB'\n         CBITEM LABEL,1,1,'ASCB'\n         CBITEM EBCD,1,6,0,4\n         CBITEM LABEL,1,16,'FWDP'\n         CBITEM HEX,1,21,4,8\n         CBITEM LABEL,1,31,'BWDP'\n         CBITEM HEX,1,36,8,8\n         CBITEM LABEL,1,46,'CMSF'\n         CBITEM HEX,1,51,C,8\n         CBITEM LABEL,1,61,'RV12'\n         CBITEM HEX,1,66,10,8\n         CBITEM LABEL,2,1,'RV10'\n         CBITEM HEX,2,6,14,8\n         CBITEM LABEL,2,16,'IOSP'\n         CBITEM HEX,2,21,18,8\n         CBITEM LABEL,2,31,'SPL'\n         CBITEM HEX,2,36,1C,8\n         CBITEM LABEL,2,46,'CPUS'\n         CBITEM HEX,2,51,20,8\n         CBITEM LABEL,2,61,'ASID'\n         CBITEM HEX,2,66,24,4\n         CBITEM LABEL,2,72,'SEQN'\n         CBITEM HEX,2,77,26,4\n         CBITEM LABEL,3,1,'IOSM'\n         CBITEM HEX,3,6,28,4\n         CBITEM LABEL,3,16,'RV07'\n         CBITEM HEX,3,21,2A,2\n         CBITEM LABEL,3,31,'DP'\n         CBITEM HEX,3,36,2B,2\n         CBITEM LABEL,3,46,'STOR'\n         CBITEM HEX,3,51,2C,8\n         CBITEM LABEL,3,61,'LDA'\n         CBITEM HEX,3,66,30,8\n         CBITEM LABEL,4,1,'RSM'\n         CBITEM HEX,4,6,34,8\n         CBITEM LABEL,4,16,'CSCB'\n         CBITEM HEX,4,21,38,8\n         CBITEM LABEL,4,31,'TSB'\n         CBITEM HEX,4,36,3C,8\n         CBITEM LABEL,4,46,'EJST'\n         CBITEM HEX,4,51,40,8\n         CBITEM HEX,4,59,44,8\n         CBITEM LABEL,5,1,'EWST'\n         CBITEM HEX,5,6,48,8\n         CBITEM HEX,5,14,4C,8\n         CBITEM LABEL,5,31,'JSTL'\n         CBITEM HEX,5,36,50,8\n         CBITEM LABEL,5,46,'ECB'\n         CBITEM HEX,5,51,54,8\n         CBITEM LABEL,5,61,'UBET'\n         CBITEM HEX,5,66,58,8\n         CBITEM LABEL,6,1,'QSVC'\n         CBITEM HEX,6,6,5C,8\n         CBITEM LABEL,6,16,'DUMP'\n         CBITEM HEX,6,21,60,8\n         CBITEM LABEL,6,31,'AFFN'\n         CBITEM HEX,6,36,64,4\n         CBITEM LABEL,6,46,'RCTF'\n         CBITEM HEX,6,51,66,2\n         CBITEM LABEL,6,61,'FLG1'\n         CBITEM HEX,6,66,67,2\n         CBITEM LABEL,7,1,'TMCH'\n         CBITEM HEX,7,6,68,8\n         CBITEM LABEL,7,16,'ASXB'\n         CBITEM HEX,7,21,6C,8\n         CBITEM LABEL,7,31,'SWCT'\n         CBITEM HEX,7,36,70,4\n         CBITEM LABEL,7,46,'DSP1'\n         CBITEM HEX,7,51,72,2\n         CBITEM LABEL,7,61,'FLG2'\n         CBITEM HEX,7,66,73,2\n         CBITEM LABEL,8,1,'SSRB'\n         CBITEM HEX,8,6,74,4\n         CBITEM LABEL,8,16,'SRBS'\n         CBITEM HEX,8,21,76,4\n         CBITEM LABEL,8,31,'VSC'\n         CBITEM HEX,8,36,78,4\n         CBITEM LABEL,8,46,'NVSC'\n         CBITEM HEX,8,51,7A,4\n         CBITEM LABEL,8,61,'TCBS'\n         CBITEM HEX,8,66,7C,8\n         CBITEM LABEL,9,1,'LOCK'\n         CBITEM HEX,9,6,80,8\n         CBITEM LABEL,9,16,'LSQH'\n         CBITEM HEX,9,21,84,8\n         CBITEM LABEL,9,31,'QECB'\n         CBITEM HEX,9,36,88,8\n         CBITEM LABEL,9,46,'MECB'\n         CBITEM HEX,9,51,8C,8\n         CBITEM LABEL,9,61,'OUCB'\n         CBITEM HEX,9,66,90,8\n         CBITEM LABEL,10,1,'OUXB'\n         CBITEM HEX,10,6,94,8\n         CBITEM LABEL,10,16,'FMCT'\n         CBITEM HEX,10,21,98,4\n         CBITEM LABEL,10,31,'RS01'\n         CBITEM HEX,10,36,9A,4\n         CBITEM LABEL,10,46,'XMPQ'\n         CBITEM HEX,10,51,9C,8\n         CBITEM LABEL,10,61,'IQEA'\n         CBITEM HEX,10,66,A0,8\n         CBITEM LABEL,11,1,'RTWA'\n         CBITEM HEX,11,6,A4,8\n         CBITEM LABEL,11,16,'MCC '\n         CBITEM HEX,11,21,A8,8\n         CBITEM LABEL,11,31,'JBNI'\n         CBITEM HEX,11,36,AC,8\n         CBITEM LABEL,11,46,'JBNS'\n         CBITEM HEX,11,51,B0,8\n         CBITEM LABEL,11,61,'LGCB'\n         CBITEM HEX,11,66,B4,8\n         CBITEM LABEL,12,1,'VGTT'\n         CBITEM HEX,12,6,B8,8\n         CBITEM LABEL,12,16,'PCTT'\n         CBITEM HEX,12,21,BC,8\n         CBITEM LABEL,12,31,'RS12'\n         CBITEM HEX,12,36,C0,4\n         CBITEM LABEL,12,46,'SMCT'\n         CBITEM HEX,12,51,C2,2\n         CBITEM LABEL,12,61,'RS14'\n         CBITEM HEX,12,66,C3,2\n         CBITEM LABEL,13,1,'SWTL'\n         CBITEM HEX,13,6,C4,8\n         CBITEM LABEL,13,16,'SRBT'\n         CBITEM HEX,13,21,C8,8\n         CBEND\nRBMAP CBSTART\n         CBSEG OFF=-18,LEN=78,NAME='RB'\n         CBITEM LABEL,1,39,'RB'\n         CBITEM LABEL,2,5,'RTOPSW'\n         CBITEM HEX,2,12,-18,8\n         CBITEM HEX,2,19,-14,8\n         CBITEM LABEL,2,29,'RTICIL'\n         CBITEM HEX,2,36,-10,8\n         CBITEM LABEL,2,46,'TRAN'\n         CBITEM HEX,2,51,-C,8\n         CBITEM LABEL,2,61,'FLAGS1'\n         CBITEM HEX,2,68,-8,8\n         CBITEM LABEL,3,5,'WCSA'\n         CBITEM HEX,3,12,-4,2\n         CBITEM LABEL,3,22,'INTCDA'\n         CBITEM HEX,3,29,-3,6\n         CBITEM LABEL,4,5,'PPSAV'\n         CBITEM HEX,4,12,0,8\n         CBITEM LABEL,4,22,'ABOPSW'\n         CBITEM HEX,4,29,4,8\n         CBITEM LABEL,4,39,'SIZE'\n         CBITEM HEX,4,46,8,4\n         CBITEM LABEL,4,56,'STAB'\n         CBITEM HEX,4,63,A,4\n         CBITEM LABEL,5,5,'CDE'\n         CBITEM HEX,5,12,C,8\n         CBITEM LABEL,5,22,'OPSW'\n         CBITEM HEX,5,29,10,8\n         CBITEM HEX,5,46,14,8\n         CBITEM LABEL,5,56,'PGMQ'\n         CBITEM HEX,5,63,18,8\n         CBITEM LABEL,6,5,'WCF'\n         CBITEM HEX,6,12,1C,2\n         CBITEM LABEL,6,22,'LINKB'\n         CBITEM HEX,6,29,1D,6\n         CBITEM LABEL,7,5,'GENERAL REGISTERS'\n         CBITEM LABEL,8,4,'0-7'\n         CBITEM HEX,8,9,20,8\n         CBITEM HEX,8,18,24,8\n         CBITEM HEX,8,27,28,8\n         CBITEM HEX,8,36,2C,8\n         CBITEM HEX,8,45,30,8\n         CBITEM HEX,8,54,34,8\n         CBITEM HEX,8,63,38,8\n         CBITEM HEX,8,72,3C,8\n         CBITEM LABEL,9,4,'8-F'\n         CBITEM HEX,9,9,40,8\n         CBITEM HEX,9,18,44,8\n         CBITEM HEX,9,27,48,8\n         CBITEM HEX,9,36,4C,8\n         CBITEM HEX,9,45,50,8\n         CBITEM HEX,9,54,54,8\n         CBITEM HEX,9,63,58,8\n         CBITEM HEX,9,72,5C,8\n         CBEND\nOUCBMAP  CBSTART\n         CBSEG OFF=0,LEN=88,NAME='OUCB'\n         CBITEM LABEL,1,1,'FWD'\n         CBITEM HEX,1,5,4,8\n         CBITEM LABEL,1,15,'BCK'\n         CBITEM HEX,1,20,8,8\n         CBITEM LABEL,1,30,'TMA'\n         CBITEM HEX,1,35,C,8\n         CBITEM LABEL,1,45,'QFL'\n         CBITEM HEX,1,50,10,2\n         CBITEM LABEL,1,55,'SFL'\n         CBITEM HEX,1,60,11,2\n         CBITEM LABEL,1,65,'YFL'\n         CBITEM HEX,1,70,12,2\n         CBITEM LABEL,2,01,'AFL'\n         CBITEM HEX,2,5,13,2\n         CBITEM LABEL,2,10,'TFL'\n         CBITEM HEX,2,15,14,2\n         CBITEM LABEL,2,20,'EFL'\n         CBITEM HEX,2,25,15,2\n         CBITEM LABEL,2,30,'NQC'\n         CBITEM HEX,2,35,16,2\n         CBITEM LABEL,2,40,'BUFL'\n         CBITEM HEX,2,45,35,2\n         CBITEM LABEL,2,50,'NPG'\n         CBITEM HEX,2,55,18,2\n         CBITEM LABEL,2,60,'RPG'\n         CBITEM HEX,2,65,19,2\n         CBITEM LABEL,2,70,'NDP'\n         CBITEM HEX,2,75,1A,2\n         CBITEM LABEL,3,01,'RDP'\n         CBITEM HEX,3,5,1B,2\n         CBITEM LABEL,3,10,'SPG'\n         CBITEM HEX,3,15,1C,2\n         CBITEM LABEL,3,20,'PGP'\n         CBITEM HEX,3,25,1F,2\n         CBITEM LABEL,3,30,'WMG'\n         CBITEM HEX,3,35,20,4\n         CBITEM LABEL,3,40,'DMO'\n         CBITEM HEX,3,45,27,4\n         CBITEM LABEL,3,50,'DMN'\n         CBITEM HEX,3,55,24,2\n         CBITEM LABEL,3,60,'SRC'\n         CBITEM HEX,3,65,25,2\n         CBITEM LABEL,3,70,'SWC'\n         CBITEM HEX,3,75,26,4\n         CBITEM LABEL,4,01,'ASCB'\n         CBITEM HEX,4,06,29,6      6789012\n         CBITEM LABEL,4,15,'IMCB'\n         CBITEM HEX,4,22,2D,6\n         CBITEM LABEL,4,30,'TMW'\n         CBITEM HEX,4,35,30,8\n         CBITEM LABEL,4,45,'WMS'\n         CBITEM HEX,4,50,36,4\n         CBITEM LABEL,4,55,'CPU'\n         CBITEM HEX,4,60,38,8\n         CBITEM LABEL,5,01,'IOC'\n         CBITEM HEX,5,05,3E,4\n         CBITEM LABEL,5,10,'MSO'\n         CBITEM HEX,5,15,40,8\n         CBITEM LABEL,5,25,'TMS'\n         CBITEM HEX,5,30,44,8\n* STOP HERE\n         CBITEM LABEL,5,40,'TMO'\n         CBITEM HEX,5,45,48,8\n         CBITEM LABEL,5,55,'PSO'\n         CBITEM HEX,5,60,4C,4\n         CBITEM LABEL,5,65,'WSS'\n         CBITEM HEX,5,70,4E,4\n         CBITEM LABEL,6,01,'ACT'\n         CBITEM HEX,6,05,50,8\n         CBITEM LABEL,6,15,'CSW'\n         CBITEM HEX,6,20,54,8\n         CBITEM LABEL,6,30,'ACN'\n         CBITEM HEX,6,35,54,4\n         CBITEM LABEL,6,40,'CFL'\n         CBITEM HEX,6,45,56,2\n         CBITEM LABEL,6,50,'CMRV'\n         CBITEM HEX,6,55,58,8\n         CBITEM LABEL,6,65,'WMR'\n         CBITEM HEX,6,70,5C,8\n         CBITEM LABEL,7,01,'IRV'\n         CBITEM HEX,7,5,60,4\n         CBITEM LABEL,7,10,'CRV'\n         CBITEM HEX,7,15,62,4\n         CBITEM LABEL,7,20,'IOR'\n         CBITEM HEX,7,25,66,4\n         CBITEM LABEL,7,30,'TMP'\n         CBITEM HEX,7,35,68,8\n         CBITEM LABEL,7,45,'PS1'\n         CBITEM HEX,7,50,60,8\n         CBITEM LABEL,7,60,'PS2'\n         CBITEM HEX,7,65,60,8\n         CBITEM LABEL,8,01,'PST'\n         CBITEM HEX,8,5,78,8\n         CBITEM LABEL,8,15,'TCP'\n         CBITEM HEX,8,20,7C,8\n         CBITEM LABEL,8,30,'TIO'\n         CBITEM HEX,8,35,80,8\n         CBITEM LABEL,8,45,'NDS'\n         CBITEM HEX,8,50,84,4\n         CBITEM LABEL,13,1,'OUCB -- '\n CBEND\nSDWAMAP  CBSTART\n         CBSEG OFF=0,LEN=100,NAME='SDWA PART 1'\n         CBITEM LABEL,1,1,'PARM'\n         CBITEM HEX,1,6,0,8\n         CBITEM LABEL,1,16,'ABCC'\n         CBITEM HEX,1,21,4,8\n         CBITEM LABEL,2,31,'CTL1'\n         CBITEM HEX,2,36,8,8\n         CBITEM HEX,2,45,C,8\n         CBITEM LABEL,2,55,'(BC PSW AT ERR TIME)'\n         CBITEM LABEL,2,31,'CTL2'\n         CBITEM HEX,2,36,10,8\n         CBITEM HEX,2,45,14,8\n         CBITEM LABEL,2,55,'(BC PSW FROM LAST PRB)'\n         CBITEM LABEL,3,30,'REGS AT TIME OF ERROR:'\n         CBITEM LABEL,4,1,'0-7'\n         CBITEM HEX,4,5,18,8\n         CBITEM HEX,4,14,1C,8\n         CBITEM HEX,4,23,20,8\n         CBITEM HEX,4,32,24,8\n         CBITEM HEX,4,41,28,8\n         CBITEM HEX,4,50,2C,8\n         CBITEM HEX,4,59,30,8\n         CBITEM HEX,4,68,34,8\n         CBITEM LABEL,5,1,'8-F'\n         CBITEM HEX,5,5,38,8\n         CBITEM HEX,5,14,3C,8\n         CBITEM HEX,5,23,40,8\n         CBITEM HEX,5,32,54,8\n         CBITEM HEX,5,41,48,8\n         CBITEM HEX,5,50,4C,8\n         CBITEM HEX,5,59,50,8\n         CBITEM HEX,5,68,54,8\n         CBEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DATETIME": {"ttr": 5377, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00y\\x12\\x8f\\x00\\x92\\t\\x0f E\\x02T\\x02\\x0b\\x02R\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1979-05-08T00:00:00", "modifydate": "1992-03-30T20:45:00", "lines": 596, "newlines": 523, "modlines": 594, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1979 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n         TITLE 'IGCSV000  ---  SSVC 0   ---  NOWSVC:  DATE AND TIME'\n**********************************************************************\n*                                                                    *\n*  IGCSV000                                                          *\n*                                                                    *\n*  PROGRAMMER:      VIC TOLOMEI                                      *\n*                                                                    *\n*  WRITTEN:         7/10/73                                          *\n*  UPDATES: 08/17/77 - *KDR* - REMOVE DECIMAL INSTRUCTIONS           *\n*           02/02/79 - JCJ1  - KLUDGE FIX FOR SECURITY HOLE (SPIE    *\n*                              EXIT GETS CONTROL IF DATA EXCEPTIONS) *\n*           05/08/79 - LDW1  - CHANGE TO A LINKED-TO MODULE FOR MVS  *\n*                                                                    *\n*  MACROS USED:     REGEQU, GETMAIN, TIME                            *\n*                                                                    *\n*  MODULE ATTRIBUTES:    FULLY RE-ENTRANT AND SERIALLY RE-USABLE     *\n*                                                                    *\n**********************************************************************\n         SPACE 9\n**********************************************************************\n*                                                                    *\n*  IGCSV000  ---  THE NOW SVC  ---  SSVC 0                           *\n*                                                                    *\n*  THIS LOAD OF THE SERVICE SVC  (SVC 245) WILL RETURN THE DATE AND  *\n*  IN THE MANY FORMS USEFUL TO THE ASSEMBLER PROGRAMMER.  THESE      *\n*  FORMS MAY BE SEEN IN THE URSA PROCESSOR 'NOW'.  THESE FORMS       *\n*  COME COMPLETE WITH RELEVANT PUNCTUATION, SO THAT THEY ARE READY   *\n*  TO USE IMMEDIATELY.   THE CALLER                                  *\n*  MAY EITHER REQUEST THE CURRENT DATE BY ZEROING R1 BEFORE THE CALL *\n*  OR MAY HAVE THE TIME AND DATE (IN R0 AND R1 RESPECTIVELY)         *\n*  INTERPRETED BY THE SVC.  THE SVC IS REFERENCED BY CODING THE      *\n*  FOLLOWING (ASSUMING R1 IS ZERO, OR R0 AND R1 ARE CORRECTLY        *\n*  INITIALIZED):                                                     *\n*                                                                    *\n*        SSVC  0                        FOR CCN/MVT                  *\n*        LINK  EP=DATETIME              FOR MVS                  LDW1*\n*                                                                    *\n*  ON RETURN, R1 WILL POINT TO A PARMLIST IN WHICH THE               *\n*  SVC WILL PLACE THE FORMS OF THE DATE AND TIME.  THIS PARMLIST     *\n*  WILL BE 72 BYTES LONG, AND WILL BE ALIGNED ON A DOUBLEWORD,       *\n*  RESIDENT IN THE CALLER'S SUBPOOL 0.  THE FOLLOWING CHARACTER      *\n*  INFORMATION IS FILLED IN BY THE SVC:   THE DATE (WITH A CHARACTER *\n*  MONTH AND A NUMERIC MONTH), THE JULIAN DATE, AND THE TIME (IN     *\n*  24-HOUR CLOCK AND 12-HOUR CLOCK).  THE SSVC ALSO DETERMINES       *\n*  WHETHER THE TIME IS 'AM' OR 'PM', AND WHETHER WE ARE IN           *\n*  PACIFIC STANDARD TIME (PST) OR PACIFIC DAYLIGHT TIME (PDT).       *\n*                                                                    *\n*  OFFSET   FORM                 DESCRIPTION                         *\n*   0-11  HH:MM:SS ZZZ       24-HOUR TIME, WHERE ZZZ IS PST OR PDT   *\n*  14-21  (M)M/(D)D/YY       THE DATE, RIGHT JUSTIFIED               *\n*  24-32  WWWWWWWWW          THE DAY OF THE WEEK, LEFT JUSTIFIED     *\n*  34-46  MMM(M) (D)D, 19YY  THE DATE, WHERE MMM(M) IS THE STANDARD  *\n*                            ABBREVIATIONS FOR MONTHS (JAN/FEB/      *\n*                            MAR/APR/MAY/JUNE/JULY/AUG/SEPT/OCT/     *\n*                            NOV/DEC) LEFT JUSTIFIED                 *\n*  49-63  HH:MM:SS TT ZZZ    12-HOUR TIME, WHERE TT IS AM OR PM,     *\n*                            AND ZZZ IS PST OR PDT                   *\n*  66-71  YY-DDD             THE JULIAN DATE                         *\n*                                                                    *\n*                                                                    *\n*  RETURN CODES (R15):   0 ..... SUCCESSFUL COMPLETION               *\n*                        4 ..... NO CORE AVAILABLE FOR PARMLIST      *\n*                                                                    *\n*                                                                    *\n*  FOR EXAMPLE, IF SSVC 0  WAS CALLED ON SEPT. 26, 1973 AT 3:16:17PM *\n*  THE PARAMETER LIST RETURNED WOULD LOOK LIKE:                      *\n*                                                                    *\n*15:16:17 PDT   9/26/73  WEDNESDAY SEPT 26, 1973  03:16:17 PM PDT  73*\n*.269                                                                *\n*                                   OR                               *\n*                                                                    *\n*00:35:17 PST    1/1/73  MONDAY    JAN 1, 1973    12:35:17 AM PST  73*\n*.001                                                                *\n*                                                                    *\n*  NOTE:  FOR CURRENT TIME, R1 MAY EITHER BE ZEROED BY THE USER      *\n*         BEFORE THE CALL, OR THE MACRO MAY DO IT, AS FOLLOWS:       *\n*                                                                    *\n*               SSVC 0,R1=0             FOR CCN/MVT                  *\n*                                                                    *\n*               SR   R1,R1              FOR MVS                  LDW1*\n*               LINK EP=DATETIME        FOR MVS                  LDW1*\n*                                                                    *\n*  NOTE:  OFFSET 0-21 GIVES A SHORT FORM OF THE TIME AND DATE FOR    *\n*         USE IN TSO COMMANDS WHERE IT SHOULD BE SHORT.  EG:         *\n*              0-21...15:16:17 PDT   9/26/73                         *\n*              0-26...15:16:17 PDT   9/26/73  WED                    *\n*             0-32...15:16:17 PDT   9/26/73  WEDNESDAY               *\n*         THE 40-CHARACTER STRING AT 24063 GIVES DATE AND TIME IN A  *\n*         'NICE' FORM - APPROPRIATE FOR URSA LIKE 'NOW' ETC.         *\n*                                                                    *\n**********************************************************************\n         EJECT\n         REGEQU\n         SPACE 8\n**********************************************************************\n*                                                                    *\n*  REGISTER USAGE:  R0 ..... TIME RETURN FROM SVC 11 OR FROM CALLER  *\n*                   R1 ..... DATE RET FROM SVC 11, PARM RET PTR      *\n*                   R2 ..... WORKAREA PTR AND BASE FROM SSVC         *\n*                   R3 ..... BASE FOR CALER PARMLIST                 *\n*                   R4 ..... R0 SAVE AND WORK REG                    *\n*                   R5 ..... R1 SAVE AND WORK REG                    *\n*                   R6 ..... *** FREE ***                            *\n*                   R7 ..... *** FREE ***                            *\n*                   R8 ..... *** FREE ***                            *\n*                   R9 ..... *** FREE ***                            *\n*                   R10 .... *** FREE ***                            *\n*                   R11 .... *** FREE ***                            *\n*                   R12 .... CSECT BASE                              *\n*                   R13 .... *** FREE ***                            *\n*                   R14 .... WORK REGISTER                           *\n*                   R15 .... ENTRY POINT, RETURN CODE, AND WORK REG  *\n*                                                                    *\n**********************************************************************\n         TITLE 'IGCSV000  ---  SSVC 0   ---  NOWSVC:  MAIN ENTRY'\nIGCSV000 CSECT\n         STM   R14,R12,12(R13)          SAVE CALLER'S REGS         LDW1\n         LR    R12,R15                  GET ADDRESSABILITY\n         USING IGCSV000,R12\n*LDW1    USING NOWWORK,R2\n*LDW1    LM    R4,R5,32(R5)             GET R0 & R1 FROM SVRB (SSVC R5)\n         LR    R4,R0                    GET R0                     LDW1\n         LR    R5,R1                    GET R1                     LDW1\n*\n*  GET THE CORE FOR THE PARMLIST IN THE CALLER'S SUBPOOL 0 (SP=250)\n*\n*JCJ1    XC    GETLIST(10),GETLIST      ZERO OUT GETMAIN LIST\n*LDW1    GETMAIN EC,LV=PARMLEN,A=PARMADDR,MF=(E,GETLIST),SP=250\n         GETMAIN RU,LV=PARMLEN                                     LDW1\n*LDW1    LTR   R15,R15                  DID IT GET THE CORE?\n*LDW1    BZ    *+6                      YES - GO ON\n*LDW1    SVC   3                        NO - RET WITH RC=4, IGNORE CALL\n         SPACE 2\n*  ----  SET US AS A PEON. NOTE THAT R15 = 0.                      JCJ1\n         SPACE 1\n*LDW1    SVC   254                      ENABLED,PROBLEM STATE/KEY  JCJ1\n         SPACE 2\n*LDW1    L     R3,PARMADDR              SAVE THE PTR FOR ADDRBLTY & RET\n         LR    R3,R1                    SAVE THE PTR ...           LDW1\n         USING PARMLIST,R3\n         MVI   PARMLIST,C' '            INITIALIZE THE PARMLIST...\n         MVC   PARMLIST+1(PARMLEN-1),PARMLIST      TO BLANKS\n         LR    R0,R4                    RESTORE R0 (TO FOOL TIME DEC)\n         LR    R1,R5                    RESTORE R1 (TO FOOL TIME DEC)\n         SPACE 2\n*LDW1    DROP  R2                       DONE WITH EXT RB WKAREA    JCJ1\n         EJECT\n**********************************************************************\n*                                                                    *\n*  GET THE CURRENT TIME (OR USER-SPECIFIED TIME)                     *\n*                                                                    *\n**********************************************************************\n         SPACE 2\n*\n*  24-HOUR TIME\n*\n         SPACE 1\n         LTR   R1,R1                    DOES HE WANT THE CURRENT TIME?\n         BNZ   NOCURR                   NO - HE'S SUPPLYING IT\n         TIME  DEC                      GET THE DATE AND THE TIME\nNOCURR   ST    R0,WORD                  SAVE THE TIME\n         UNPK  DBLW(8),WORD(4)          GET THE TIME IN CHAR\n         MVC   TIME24HR(2),DBLW+1       MOVE 24-HR HOUR TO PARMLIST\n         MVI   TIME24HR+2,C':'          MOVE IN PUNCTUATION\n         MVC   TIME24MN(2),DBLW+1+2     MOVE MINUTES TO PARMLIST\n         MVI   TIME24MN+2,C':'          MOVE IN PUNCTUATION\n         MVC   TIME24SC(2),DBLW+1+4     MOVE SECONDS TO PARMLIST\n         SPACE 2\n*\n*  12-HOUR TIME\n*\n         SPACE 1\n         SRL   R0,20                    JUST GET THE HOURS (+ SIGN NIB)\n         XC    DBLW(8),DBLW             CLEAR OUT WORK AREA\n         ST    R0,DBLW+4                SAVE THE HOURS AWAY\n         OI    DBLW+7,X'0F'             MOVE IN SIGN\n         CVB   R0,DBLW                  GET BINARY HOURS BACK IN REG\n         C     R0,=F'12'                ARE WE AM?\n         BL    AM                       YES - GO ON\n         BE    NOON                     NO - IT'S IN BETWEEN (NOON)\n         S     R0,=F'12'                NO - IT'S PM, SO CONVERT TO AM\nNOON     MVC   AMPM(2),=C'PM'           SAY IT IS PM\n         B     GETCHAR                  AND WORK ON THE HOUR\nAM       MVC   AMPM(2),=C'AM'           SAY IT IS AM\n         LTR   R0,R0                    ARE WE MIDNIGHT THOUGH (00:00)?\n         BNZ   GETCHAR                  NO - NOTHING TO WORRY ABOUT\n         LA    R0,12                    YES - IT'S 12 O'CLOCK AM, NOT 0\nGETCHAR  CVD   R0,DBLW                  GET THE 12-HOUR TIME IN DEC\n         UNPK  WORD(3),DBLW+6(2)        GET IT IN CHAR\n         OI    WORD+2,X'F0'             GET THE FLIP BYTE\n         MVC   TIME12HR(2),WORD+1       MOVE THE 12-HOUR HR TO PARMLIST\n         MVC   TIME12HR+2(6),TIME24HR+2 MOVE IN :MM:SS FROM 24-HR\n         EJECT\n**********************************************************************\n*                                                                    *\n*  GET THE CURRENT DATE (OR THE USER-SPECIFIED DATE)                 *\n*                                                                    *\n**********************************************************************\n         SPACE 2\n*\n*  THE YEAR (REGULAR AND JULIAN)\n*\n         SPACE 1\n         ST    R1,WORD                  GET THE DATE\n         MVO   DBLW(8),WORD+1(1)        PICK OFF THE YEAR\n         OI    DBLW+7,X'0F'             FLIP BYTE\n         UNPK  YEAR(2),DBLW+6(2)        MOVE IT TO PARMLIST\n         MVC   JULYEAR(2),YEAR          MOVE IT FOR JULIAN DATE TOO\n         CVB   R1,DBLW                  GET YEAR IN BINARY\n         STH   R1,WORKYEAR              SAVE THE YEAR FOR WEEKDAY RTN\n*\n*  DETERMINE NOW, WITH THE JULIAN DATE HANDY, WHETHER WE ARE IN\n*  PACIFIC STANDARD OR PACIFIC DAYLIGHT TIME (PST OR PDT).\n*  THIS IS DONE AS FOLLOWS:  DAYLIGHT SAVINGS (PDT) RUNS FROM 2AM\n*  ON THE LAST SUNDAY OF APRIL TO 2AM ON THE LAST SUNDAY OF OCTOBER.\n*  STANDARD TIME (PST) RUNS FOR THE OTHER 6 MONTHS.  A TABLE WAS MADE\n*  ('PSTPDT') OF THE PAIR OF JULIAN DATES CORRESPONDING TO THE\n*  THOSE SUNDAYS FOR EACH YEAR FROM 1973 (YEAR OF THE SOURCE) TO\n*  1982 (10 YEARS FROM NOW, WHEN IT MIGHT NOT EVEN MATTER ANY MORE.)\n*  THE JULIAN DATE TO BE INTERPRETED BY THE SSVC IS LOCATED WITHIN\n*  WITHIN THAT TABLE BY YEAR AND BY DAY, AND THUS EITHER 'PST' OR\n*  'PDT' IS MOVED TO THE RETURN PARMLIST.\n*  AT THIS POINT, R1 CONTAINS THE BINARY YEAR (TO BE USED FOR AN\n*  OFFSET INTO THE TABLE, AND 'WORD' CONTAINS THE FULL JULIAN DATE\n*  (THE LOW ORDER HALFWORD OF THE DAY WILL BE USED ONLY.  NOTE THAT THE\n*  TABLE CONTAINS THE JULIAN DAYS IN PACKED DECIMAL, SO ALL COMPARISONS\n*  WILL BE DONE IN PACKED DECIMAL.\n*  NOTE:  DAYLIGHT SAVINGS IS IN EFFECT BETWEEN THE LAST APRIL SUNDAY\n*         AND THE LAST OCTOBER SUNDAY (APR INCLUSIVE, OCT EXCLUSIVE) AS\n*         FOLLOWS:\n*              APR SUNDAY <= DAY < OCT SUNDAY.\n*         SO STANDARD TIME IS IN EFFECT IN THE FOLLOWING PERIODS:\n*              JAN 1 <= DAY < APR SUNDAY AND OCT SUNDAY <= DAY < DEC 31\n*         THE CROSSOVERS IN THIS ROUTINE WILL NOT OCCUR AT 2AM,\n*         BUT AT 12AM OF THOSE TWO SUNDAYS (FOR EASE IN PROGRAMMING).\n*  FOR YEARS BEYOND 1982 (BEYOND THE TABLE), THE FIELDS FOR PST/PDT\n*  ARE LEFT BLANK.\n*\n         CH    R1,=H'82'                IS THE YEAR BEYOND THE TABLE?\n         BH    DONEPSDT                 YES - FORGET THIS, LEAVE BLANK\n*\n         LR    R15,R1                   SAVE R1 FOR LATER WORK\n         SH    R15,=H'73'               GET OFFSET INTO PSTPDT TABLE\n         SLL   R15,2                    *4 FOR FULLWORDS\n         LA    R15,PSTPDT(R15)          PT TO JULIAN DAY PAIR FOR YEAR\n         MVC   TIME24TZ(3),=C'PST'      ASSUME STANDARD TIME\n         MVC   TIME12TZ(3),=C'PST'      ASSUME STANDARD TIME FOR NOW\n         NI    WORD+3,X'FC'             MAKE SURE CLC'S ARE VALID *KDR*\n         CLC   WORD+2(2),0(R15)         CURR DAY < LAST APR SUN?  *KDR*\n         BL    DONEPSDT                 YES - THEN IT HAS TO BE PST\n         CLC   WORD+2(2),2(R15)         CURR DAY < LAST OCT SUN?  *KDR*\n         BNL   DONEPSDT                 NO - IT'S PST, SO DEFAULT IS OK\n*\n         MVC   TIME24TZ(3),=C'PDT'      APR SUNDAY  < DAY < OCT SUNDAY\n         MVC   TIME12TZ(3),=C'PDT'      SO IT MUST BE PDT\n*\n*  GET THE MONTH, JULIAN DAY, AND DAY\n*\n         SPACE 1\nDONEPSDT MVC   MOTAB(26),DAYSINMO       GET THE DAYS IN EACH MO\n         N     R1,=F'3'                 TEST FOR LEAP YEAR\n         BNZ   *+10                     NO - LEAVE IT ALONE\n         MVC   MOTAB+2(2),=H'29'        YES - 29 DAYS IN FEBRUARY\n*\n         UNPK  JULDAY(3),WORD+2(2)      GET JULIAN DAY WHILE AT IT\n         OI    JULDAY+2,C'0'        HOW COULD HE BE THAT STUPID?   LDW1\n         MVI   JULYEAR+2,C'.'           MOVE IN DOT\n*\n         XR    R1,R1                    MONTH COUNTER\n         XR    R15,R15                  INDEX REGISTER\n         XC    DBLW(8),DBLW             CLEAR WORK AREA\n         MVC   DBLW+6(2),WORD+2         GET THE DAY OF THE YEAR\n         CVB   R14,DBLW                 IN BINARY\nMOLOOP   SH    R14,MOTAB(R15)           SUBTRACT A MONTH WORTH OF DAYS\n         BNP   GOTMO                    WE HAVE THE MONTH\n         LA    R1,1(R1)                 NOT YET, UPDATE MONTH COUNT\n         LA    R15,2(R15)               UP THE TABLE PTR\n         B     MOLOOP                   KEEP IT UP\n*\nGOTMO    AH    R14,MOTAB(R15)           CORRECT FOR 1 TOO MANY SUBTRACT\n         STH   R14,WORKDAY              SAVE THE DAY FOR WEEKDAY RTN\n         LR    R15,R1                   PROTECT THE MONTH\n         LA    R15,1(R15)               MONTH=MONTH+1 (WEEKDAY ROUTINE)\n         STH   R15,WORKMO               SAVE THE MONTH FOR WEEKDAY RTN\n*\n*  MAKE THE DATE MM/DD/YY BY RIGHT JUSTIFYING AND SQUISHING OUT THE\n*  LEADING INSIGNIFICANT ZEROES.\n*\n         MVI   DAY+2,C'/'               MOVE IN SLASH FOR /YY\n         CVD   R14,DBLW                 GET THE DAY\n         OI    DBLW+7,X'0F'             MAKE IT PACKED DEC\n         UNPK  DAY(2),DBLW+6(2)         MOVE DAY TO PARMLIST\n         LA    R4,MO+1                  ASSUME THERE IS A LEADING 0\n         LA    R5,DAY                   HERE ALSO (SET PTRS UP)\n         CLI   DAY,C'0'                 IS THERE ONE?\n         BE    MVISLASH                 YES - SO CLOBBER IT WITH '/'\n         BCTR  R4,0                     NO - MOVE ALL PTRS 1 COL LEFT\n         BCTR  R5,0                     THIS ONE TOO\nMVISLASH MVI   0(R5),C'/'               MOVE '/' FOR /DD (OR /D)\n         CVD   R15,DBLW                 GET THE MONTH IN DECIMAL\n         OI    DBLW+7,X'0F'             FLIP BYTE\n         UNPK  0(2,R4),DBLW+6(2)        MOVE IT TO THE PARMLIST\n         CLI   0(R4),C'0'               DOES MONTH HAVE A LEADING 0?\n         BNE   OKMO                     NO - LEAVE IT ALONE\n         MVI   0(R4),C' '               YES - KILL IT, BUT NO SQUASH\nOKMO     SLL   R1,2                     INDEX FACTOR INTO MO TAB (4)\n         LA    R1,MONTHS(R1)            PICK IT UP\n         MVC   CHARDATE(4),0(R1)        MOVE THE MONTH TO THE PARMLIST\n*\n*  SQUASH THE REST OF THE FIELDS OVER AGAINST A POSSIBLY SHORT MONTH\n*  (MONTH MAY BE EITHER MMMM OR MMM)\n*\n         LA    R5,CHARDATE+3            ASSUME IT IS MMMM\nBLANKLP  CLI   CHARDATE+3,C' '          ARE WE RIGHT?\n         BNE   GOTNON                   YES - WE HAVE IT, GET OUT\n         BCTR  R5,0                     NO - POINT TO THE NON-BLANK\n         SPACE 1\n*  CLEAN UP DAY IF IT HAS AN INSIGNIFICANT 0 AND NEEDS TO BE EDITED.\n*  DO THIS EDITING BY CLEARING OUT THAT 0 AND SQUASHING THE REST OF\n*  THE DATE OVER SO THAT IT LOOKS GOOD.\n         SPACE 1\nGOTNON   MVC   WORD(2),DAY              SAVE THE DAY FOR THE WORK\n         CLI   WORD,C'/'                DID DAY HAVE INSIG 0 (SQUASHED)\n         BNE   NOCHEAT                  NO - LEAVE IT ALONE\n         MVI   WORD,C' '                YES - WE MUST EDIT NASTILY\n         BCTR  R5,0                     SQUASH THE STRING UP ONE BYTE\nNOCHEAT  MVC   0+2(2,R5),WORD           MOVE IN DAY, W/ INTERVEN BLANK\n         MVC   2+2(4,R5),=C', 19'       MOVE IN MASK\n         MVC   6+2(2,R5),YEAR           MOVE IN YEAR AFTER\n         SPACE 3\n**********************************************************************\n*                                                                    *\n*  GET THE DAY OF THE WEEK                                           *\n*                                                                    *\n*  ALGORITHM        MONTH=MOD(MONTH,12)+1                            *\n*                   IF(MONTH=11 | MONTH=12) YEAR=YEAR-1              *\n*                   A=(13*MONTH-1)/5                                 *\n*                   B=YEAR/4                                         *\n*                   C=CENTURY/4                                      *\n*                   D=A+B+C+DAY+YEAR-2*CENTURY                       *\n*                   Z=MOD(D,7)+1                                     *\n*                                                                    *\n*  WHERE Z = DAY OF THE WEEK, 1=SUNDAY, ..., 7=SATURDAY              *\n*                                                                    *\n**********************************************************************\n         SPACE 2\n*  MONTH=MOD(MONTH+9,12)+1\n         SPACE 1\n         XR    R4,R4                    CLEAR REM REG\n         LH    R5,WORKMO                GET MONTH\n         LA    R5,9(R5)                 MONTH+9\n         D     R4,=F'12'                /12\n         LA    R4,1(R4)                 R4=MONTH\n         STH   R4,WORKMO                SAVE IT\n         SPACE 1\n*  IF(MONTH=11 | MONTH=12) YEAR=YEAR-1\n         SPACE 1\n         CH    R4,=H'11'                11?\n         BE    SUBYEAR                  YES - SUBTRACT\n         C     R4,=F'12'                12?\n         BNE   GETOUT                   NO - LEAVE THIS\nSUBYEAR  LH    R5,WORKYEAR              GET THE YEAR\n         BCTR  R5,0                     -1\n         STH   R5,WORKYEAR              SAVE IT AWAY\n         SPACE 1\n*  A=(13*MONTH-1)/5\n         SPACE 1\nGETOUT   XR    R4,R4                    CLEAR REM REG\n         LH    R5,WORKMO                MONTH\n         MH    R5,=H'13'                *13\n         BCTR  R5,0                     -1\n         D     R4,=F'5'                 ALL OVER 5 (R5=A)\n         SPACE 1\n*  B=YEAR/4\n         SPACE 1\n         LH    R4,WORKYEAR              GET YEAR\n         SRL   R4,2                     YEAR/4\n         AR    R5,R4                    D=A+B SO FAR\n         SPACE 1\n*  C=CENTURY/4\n         SPACE 1\n         LH    R4,=H'19'                GET THE CENTURY\n         SLL   R4,1                     GET CENTURY*2 FOR LATER\n         SR    R5,R4                    D=A+B-CENT*2 SO FAR\n         SRL   R4,3                     CENTURY/4\n         AR    R5,R4                    D=A+B+C-2*CENT NOW\n         SPACE 1\n*  D=A+B+C+DAY+YEAR-2*CENTURY\n         SPACE 1\n         AH    R5,WORKDAY               ADD DAY\n         AH    R5,WORKYEAR              ADD YEAR\n         SPACE 1\n*  Z=MOD(D,7)+1\n         SPACE 1\n         XR    R4,R4                    CLEAR REM REG\n         D     R4,=F'7'                 GET MOD(D,7) IN R4 = Z\n*  NOTE:  Z-1 FOR OFFSET INTO TABLE\n         MH    R4,=H'9'                 GET OFFSET INTO TABLE\n         LA    R4,DAYS(R4)              POINT TO THE DAY IN TABLE\n         MVC   WEEKDAY(9),0(R4)         MOVE DAY TO PARMLIST\n         SPACE 2\n*  RETURN TO THE CALLER WITH R1 AND R15\n         SPACE 1\n         LR    R1,R3                    GET ADDR OF SVC WORKAREA   JCJ1\n         LA    R0,SVC#END-PARMLIST      LENGTH OF AREA TO FREE     JCJ1\n         FREEMAIN R,LV=(0),A=(1)        FREE WORKAREA              JCJ1\n         LA    R1,SVC#END               POINT TO RETURN AREA       JCJ1\n         SPACE 1\n*LDW1    XR    R15,R15                  RC=0 FOR SUCCESSFUL OPERATION\n*LDW1    SVC   3                        ALL DONE - RETURN TO CALLER\n         ST    R1,24(,R13)              SET R1 TO RETURN           LDW1\n         LM    R14,R12,12(R13)          RESTORE CALLER'S REGS      LDW1\n         XR    R15,R15                  RC=0 FOR SUCCESSFUL OPER.  LDW1\n         BR    R14                      RETURN TO CALLER           LDW1\n         TITLE 'IGCSV000  ---  SSVC 0   ---  NOWSVC:  CONSTANTS'\nDAYSINMO DC    H'31',H'28',H'31',H'30'\n         DC    H'31',H'30',H'31',H'31'\n         DC    H'30',H'31',H'30',H'31',H'9999'\n         SPACE 3\nDAYS     DC    CL9'SUNDAY   '\n         DC    CL9'MONDAY   '\n         DC    CL9'TUESDAY  '\n         DC    CL9'WEDNESDAY'\n         DC    CL9'THURSDAY '\n         DC    CL9'FRIDAY   '\n         DC    CL9'SATURDAY '\n         SPACE 3\nMONTHS   DC    CL4'JAN '\n         DC    CL4'FEB '\n         DC    CL4'MAR '\n         DC    CL4'APR '\n         DC    CL4'MAY '\n         DC    CL4'JUNE'\n         DC    CL4'JULY'\n         DC    CL4'AUG '\n         DC    CL4'SEPT'\n         DC    CL4'OCT '\n         DC    CL4'NOV '\n         DC    CL9'DEC '\n         SPACE 3\n*  TABLE OF PST/PDT CROSSOVER JULIAN DAYS FROM 1973 TO 1982.\n*  (LAST SUNDAY IN APRIL AND LAST SUNDAY IN OCTOBER FOR EACH YEAR)\n         SPACE 1\nPSTPDT   DS    0F\n         DC    PL2'119,301'             APR 29, OCT 28    1973\n         DC    PL2'118,300'             APR 28, OCT 27    1974\n         DC    PL2'117,299'             APR 27, OCT 26    1975\n         DC    PL2'116,305'             APR 25, OCT 31    1976  (LEAP)\n         DC    PL2'114,303'             APR 24, OCT 30    1977\n         DC    PL2'120,302'             APR 30, OCT 29    1978\n         DC    PL2'119,301'             APR 29, OCT 28    1979\n         DC    PL2'118,300'             APR 27, OCT 26    1980  (LEAP)\n         DC    PL2'116,298'             APR 26, OCT 25    1981\n         DC    PL2'115,304'             APR 25, OCT 31    1982\n         SPACE 3\n*  LITERALS\n         SPACE 1\n         LTORG\n         TITLE 'IGCSV000  ---  SSVC 0   ---  NOWSVC:  DUMMY SECTIONS'\nNOWWORK  DSECT                          WORKAREA AREA SPACE FROM SSVC\n         SPACE 1\nPARMADDR DS    A                        ADDRESS FROM GETMAIN       JCJ1\n*GETLIST GETMAIN EC,A=PARMADDR,LV=PARMLEN,SP=250,MF=L     LDW1     JCJ1\n         TITLE 'IGCSV000  ---  SSVC 0   ---  NOWSVC:  PARMLIST DSECT'\nPARMLIST DSECT                          PARMLIST DSECT MASK\n         SPACE 2\n*  ----  SVC WORK VARIABLES MOVED TO PROBLEM KEY CORE.             JCJ1\n         SPACE 2\nDBLW     DS    D                        SCRATCH DBLW               JCJ1\nWORD     DS    F                        SCRATCH WORD               JCJ1\nWORKYEAR DS    H                        SAVE THE YEAR              JCJ1\nWORKDAY  DS    H                        SAVE THE DAY               JCJ1\nWORKMO   DS    H                        SAVE THE MONTH             JCJ1\nMOTAB    DS    13H                      DAYS IN EACH MONTH         JCJ1\nSVC#END  DS    0D                       ALIGN/FLAG END OF WORKAREA JCJ1\n         SPACE 2\n*  ----  END OF SVC WORKAREA VARIABLES.                            JCJ1\n         SPACE 2\nTIME24   DS    0CL12                    TIME IN 24-HR.....HH:MM:SS PST\nTIME24HR DS    2C,C                     HH:\nTIME24MN DS    2C,C                     MM:\nTIME24SC DS    2C                       SS\n         DS    C                        BLANK\nTIME24TZ DS    3C                       PST OR PDT\n         DS    2C                       BLANKS\n         SPACE 1\nNUMDATE  DS    0CL8                     THE DATE...(M)M/(D)D/YY\nMO       DS    2C,C                     (M)M/\nDAY      DS    2C,C                     (D)D/\nYEAR     DS    2C                       YY\n         DS    2C                       BLANKS\n         SPACE 1\nWEEKDAY  DS    9C                       THE WEEKDAY\n         DS    C                        BLANK\n         SPACE 1\nCHARDATE DS    13C                      THE DATE:  MMM(M) (D)D, 19YY\n         DS    2C                       BLANKS\n         SPACE 1\nTIME12   DS    0CL15                    TIME IN 12-HR:  HH:MM:SS AM PST\nTIME12HR DS    2C,C                     HH:\nTIME12MN DS    2C,C                     MM:\nTIME12SC DS    2C,C                     SS + BLANK\nAMPM     DS    2C                       AM OR PM\n         DS    C                        BLANK\nTIME12TZ DS    3C                       PDT OR PST\n         DS    2C                       BLANKS\n         SPACE 1\nJULDATE  DS    0CL6                     THE DATE:  YY.DDD\nJULYEAR  DS    2C,C                     YY.\nJULDAY   DS    3C                       DDD\n         SPACE 2\n         DS    0D                       ALIGN FOR BOUNDARY         JCJ1\nPARMLEN  EQU   *-PARMLIST               LENGTH OF THE PARMLIST\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DELAY": {"ttr": 5633, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00y\\x08\\x1f\\x00\\x92\\t\\x0f F\\x00\\xb5\\x00\\x1a\\x00\\xa8\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1979-03-22T00:00:00", "modifydate": "1992-03-30T20:46:00", "lines": 181, "newlines": 26, "modlines": 168, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1988 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nDELAY    TITLE '-----  WAIT FOR A SPECIFIED TIME PERIOD  -----'\n*---------------------------------------------------------------------*\n*                                                                     *\n*   PROGRAM NAME:  DELAY                                              *\n*                                                                     *\n*   PURPOSE:       TO ALLOW A CLIST OR A BATCH JOB TO ENTER A WAIT    *\n*                  STATE FOR A USER SPECIFIED LENGTH OF TIME          *\n*                                                                     *\n*   AUTHOR:        LEONARD D. WOREN                                   *\n*                                                                     *\n*   DATE:          LONG, LONG AGO (AT SDC)                            *\n*                                                                     *\n*   UPDATES:                                                          *\n*      14Feb87  LDW  If not TSO, wait on STOP ECB, set RC=8 if stop   *\n*      03/26/84 LDW  ALLOW FRACTIONAL SECONDS IN OPERAND              *\n*      01/07/82 LDW  CHANGE STIMER FROM WAIT TO REAL (TO ALLOW ATTN)  *\n*                                                                     *\n*   INPUT:         THE NUMBER OF SECONDS TO WAIT.  AS A TSO COMMAND   *\n*                  PROCESSOR, THE INPUT IS THE OPERAND.  AS A BATCH   *\n*                  JOB, THE NUMBER OF SECONDS IS THE PARM FIELD.      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\nDELAY    OSENTER  ENV=(CALL,SIM),EXIT=LEAVE,RC=(R5),                   $\n               PARMREG=R4,ADDRREG=R2,LENREG=R3\n         SR    R9,R9                    CLEAR ACCUMULATOR\n         LA    R7,100                   GET SCALE FACTOR\n         SPACE 2\nLOOP     LTR   R3,R3                    ANYTHING LEFT?\n         BNP   DONE\n         CLI   0(R2),C'.'               DECIMAL POINT?\n         BE    DECPOINT                 YES - GO HANDLE FRACTIONS\n         MH    R9,=H'10'                SHIFT PREVIOUS\n         IC    R1,0(,R2)                GET A CHAR\n         N     R1,=F'15'                STRIP IT\n         AR    R9,R1                    ADD NEW\n         LA    R2,1(,R2)                MOVE SCAN PTR\n         BCTR  R3,0                     DECR LENGTH LEFT\n         CLI   FLAG,0                   DECIMAL POINT HIT?\n         BE    LOOP                     NO\n         SR    R6,R6                    CLEAR FOR DIVIDE\n         D     R7-1,=F'10'              ADJUST SCALE FACTOR\n         LTR   R7,R7                    ANYTHING LEFT?\n         BNP   DONE                     NO - WHY BOTHER\n         B     LOOP\n         SPACE 3\nDECPOINT BCTR  R3,0                     ADJUST FOR DECIMAL POINT\n         LA    R2,1(,R2)                ...\n         MVI   FLAG,X'FF'               REMEMBER HIT DECIMAL POINT\n         CH    R3,=H'2'                 MORE THAN .TH?\n         BNH   LOOP                     NO - USE WHAT'S LEFT\n         LH    R3,=H'2'                 YES - USE JUST .TH\n         B     LOOP\n         SPACE 3\nDONE     MR    R9-1,R7                  CONVERT SECONDS TO HUNDREDTHS\n         LTR   R9,R9                    ANY DELAY GIVEN?\n         BNP   *+8                      NO - USE DEFAULT\n         ST    R9,TIME\n         SPACE 2\n         STIMER  REAL,RING,BINTVL=TIME\n         SPACE 1\n         EXTRACT  ANSWER,,FIELDS=(COMM,TSO)\n         SPACE 1\n         SR    R5,R5                    assume rc=0\n         L     R1,ANSWER+4              -> tso flag byte\n         TM    0(R1),X'80'              TSO address space?\n         BNZ   WAIT1                    yes - don't wait on stop ecb\n         L     R2,ANSWER                -> communications area\n         L     R2,0(,R2)                -> comm ecb\n         ST    R2,ECBLIST+4\n         OI    ECBLIST+4,X'80'          set end-of-list\n         SPACE 1\n         WAIT  1,ECBLIST=ECBLIST\n         SPACE 1\n         TM    0(R2),X'40'              was it stop?\n         BZ    LEAVE                    no - ok\n         LA    R5,8                     yes - set rc=8\n         B     LEAVE\n         SPACE 2\nWAIT1    WAIT  ECB=ECB\n         SPACE 1\n         B     LEAVE\n         SPACE 3\n         DROPX ,\n         SPACE 1\n         USING *,R15\nRING     POST  ECB,1\n         SPACE 1\n         BR    R14\n         SPACE 1\n         DROP  R15\n         SPACE 3\nTIME     DC    A(24*60*100-1)           LONG TIME\nECB      DC    F'0'\nECBLIST  DC    A(ECB,0)\nANSWER   DC    2A(0)\nFLAG     DC    X'00'\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DEX": {"ttr": 5637, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00\\x00\\x00y\\x11\\x0f\\x00\\x92\\t\\x0f F\\x02\\xbb\\x02\\x88\\x00\\xc3\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "1979-04-20T00:00:00", "modifydate": "1992-03-30T20:46:00", "lines": 699, "newlines": 648, "modlines": 195, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1990 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nDEX      TITLE 'DEX - A DECIMAL-HEXADECIMAL CALCULATOR'\n*---------------------------------------------------------------------*\n* UPDATES:                                                            *\n*    23JUL90  LDW2 - CHANGE DEFAULT MODE TO HEX                       *\n*    14FEB89  LDW1 - FIX FOR ASMH V2                                  *\n*    03/22/80 SDM1 - CHANGE 'PREVIOUS CHAR' SYMBOL FROM * TO $        *\n*    04/20/79 SDM  - INSTALL FROM MVS USER GROUP                      *\n*                    MAKE MANY SMALL CHANGES                          *\n*---------------------------------------------------------------------*\nDEX      CSECT\n         SAVE  (14,12),,DEX_&SYSDATE._&SYSTIME                     LDW1\n         LR    BASE,R15\n         LA    BASE2,4095(,BASE)\n         LA    BASE2,1(,BASE2)\n         USING DEX,BASE,BASE2\n         LA    R15,REGSAVE\n         ST    R15,8(,R13)\n         ST    R13,4(,R15)\n         LR    R13,R15\n         B     START\n         SPACE 2\nRETURN   L     R13,4(,R13)\n         RETURN (14,12),RC=0\n         EJECT\n*   PUTGET IS CALLED BY:\n*        LA    R1,OUTAREA\n*        LA    R0,OUTSIZE\n*        BAL   LINK,PUTGET\n*\n*   INPUT DATA LENGTH IS RETURNED IN R1.\n*\n         SPACE 1\nPUTGET   TPUT  (1),(0),R                PUT THE MESSAGE OUT\n         SPACE 1\n         LA    R1,READINTO              SET INPUT AREA ADDRESS\n         LA    R0,L'READINTO            SET AREA LENGTH\n         ICM   R1,8,=X'80'              SPECIFY TGET\n         TGET  (1),(0),R                GET INPUT\n         LTR   R15,R1                   SAVE AND TEST INPUT DATA LEN\n         BZR   LINK                     ZERO, DON'T FOOL WITH DATA\n         OC    READINTO,BLANKS          CONVERT ALL TO UPPER CASE\n         CH    R1,=H'3'                 IS IT THREE CHARS\n         BNE   PG01                     NO, DON'T TEST FOR 'END'\n         CLC   READINTO(3),=C'END'      DOES THIS END IT\n         BE    RETURN                   YES, THE LEAVE NOW\nPG01     BCTR  R15,0                    REDUCE LENGTH FOR MOVE\n         EX    R15,PGMVC                MOVE DATA TO USER AREA\n         BR    LINK                     RETURN TO CALLER\n         SPACE 1\nPGMVC    MVC   TSTRING(0),READINTO      << EXECUTED >>\n         EJECT\nSTART    XR    R1,R1                    SET MY OWN MASK\n         SPM   R1\n         MVI   TSTRING,X'00'            INDICATE INITIAL NULL INPUT\nTLOOP    LA    R1,M2                    WRITE MESSAGE\n         LA    R0,L'M2                  AND\n         BAL   LINK,PUTGET              READ A LINE\nTLOOP0   XC    PRES(8),PRES             INITIALIZE\n         MVC   TNAME(8),SYMTBL\n         XC    TNAME+8(4),TNAME+8\n         MVI   PROP,C'+'\n         MVI   EQYET,X'00'\n         LA    R3,TSTRING\n         ST    R3,TLSTART               SAVE START\n         LTR   R1,R1                    TEST LENGTH\n         BNP   TLOOP1                   DON'T CHANGE OLD INPUT\nREADOK   LA    R5,0(R3,R1)\n         BCTR  R5,0\n         CLI   0(R5),C';'               SEE IF LAST IS ;\n         BE    NOSEMC                   IF SO, DO NOT INSERT\n         MVI   1(R5),C';'               PUT A ; ON THE END\n         LA    R5,1(,R5)                POINT TO NEXT\nNOSEMC   MVI   1(R5),X'00'              AND A 00 AFTER THAT\nTLOOP1   CLI   0(R3),C' '               LOOK FOR NON-BLANK\n         BNE   TLOOP1A\n         LA    R3,1(,R3)\n         B     TLOOP1\nTLOOP1A  CLI   EQYET,X'01'              SEE IF DONE SOMETHING YET\n         BE    TLOOP1B                  IF SO, NO CHECK FOR COMMANDS\n         CLC   0(5,R3),CDUMP            SEE IF ASKING FOR A DUMP\n         BE    DUMP                     IF SO, GEEV EET 2 HEEM\n         CLC   0(4,R3),CDEC             SEE IF MODE TO BE DEC\n         BE    SETMODED                 IF SO, SET THE MODE\n         CLC   0(4,R3),CHEX             SAME FOR HEX MODE\n         BE    SETMODEH\n         CLC   0(7,R3),CDEL             SEE IF TRYING TO DELETE\n         BE    DELETE\n         CLC   0(5,R3),CDISP            SEE IF SET DISPLAY MODE\n         BE    YDISP\n         CLC   0(7,R3),CNODISP          SEE IF SET NO DISPLAY MODE\n         BE    NDISP\n         CLC   0(5,R3),CSORT            SEE IF WANT A SORT\n         BE    SORT\nTLOOP1B  CLI   0(R3),X'00'              SEE IF AT END\n         BE    TLOOP                    IF DO, GET MORE\nTLOOP2   SR    R2,R2                    CLEAR REG 2\n         TRT   0(20,R3),TRTBL           EXECUTE THE TRT\n*        (R1) -> BYTE, (R2)=RESULT\n         BZ    TNONE                    SEE IF FOUND A STOPPER\n         CH    R2,=H'1'                 SEE IF NEW LINE\n         BE    TNONE                    IF SO, COMPLAIN\n         LR    R4,R1                    PUT WHERE BYTE IS IN R4\n         SR    R4,R3                    (4) = # OF BYTES - 1\n         MVI   TRES,C' '                BLANK RESULT\n         MVC   TRES+1(49),TRES\nTLOOP3   CLI   0(R1),C' '               LOOK AGAIN FOR NON-BLANK\n         BNE   TLOOP4\n         LA    R1,1(,R1)\n         B     TLOOP3\nTLOOP4   MVC   TRES(1),0(R1)            MOVE STOPPING CHAR\n         LTR   R4,R4                    SEE IF NULL CHAR STRING\n         BNE   TLOOP5\n*SDM1    CLI   TRES,C'*'                SEE IF PREV RESULT\n*SDM1    BE    TLPREV                   IF SO, SAY SO\n         CLI   TRES,C'-'                SEE IF INITIAL -\n         BE    TLFZ                     FORCE A ZERO\n         CLI   TRES,C'+'                LEADING +?\n         BE    TLFZ                     YES, FORCE A ZERO\n         CLI   TRES,C';'                ONLY A SEMICOLON?\n         BNE   TLMOP                    NO... MISSING OPERAND\n*SDM1    B     TLFZ                     ELSE FORCE A 0\n*SDM1 TLPREV MVI TRES+4,C'*'            SAY THIS IS A SYMBOL\n*SDM1    LA    R1,1(,R1)                POINT 1 TO NEXT CHAR\n*SDM1    LA    R4,1                     GIVE 4 A NICE VALUE\n*SDM1    B     TLOOP3                   THEN CONTINUE\nTLFZ     MVI   TRES+4,C'0'              IF SO, FORCE A 0\n         B     TLOOP6\nTNONE    LA    R1,TNMESS\n         LA    R0,L'TNMESS\n         BAL   LINK,PUTGET              NO STOPPERS FOUND - COMPLAIN\n         LTR   R1,R1                    SEE IF ANYTHING ENTERED\n         BZ    TNONE                    IF NOT, COMPLAIN AGAIN\n         B     TLOOP0\nTLOOP5   BCTR  R4,0                     CHOP R4 DOWN\n         EX    R4,TMVC                  MOVE WITH EXECUTE\nTLOOP6   LA    R3,1(,R1)                POINT R3 PAST CHAR\n         CLI   TRES,C'='                SEE IF STORE RESULT\n         BE    TLEQ\n         MVI   EQYET,X'01'              DO NOT ALLOW ANY MORE =\n         TRT   0(1,R1),TRTBL            SEE IF OPERAND STOPPED THE SCAN\n         BZ    TLNOP                    IF NOT, ERROR\n         LA    R1,TRES+4                IF NOT, FIND WHAT THING IS\n         LA    R2,SYMTBL                START AT BEGINNING\n         BAL   LINK,DEFSYM\n         LTR   R1,R1                    SEE IF DEFINED\n         BP    TLOK\nTLUNDEF  MVC   TLUNDM(8),TRES+4         COMPLAIN ABOUT UNDEFINED\n         LA    R1,TLUNDM\n         LA    R0,L'TLUNDM\n         BAL   LINK,PUTGET\n         LTR   R1,R1\n         BNZ   TLOOP0\n         LA    R2,BLZR                  FAKE A NUMBER\nTLOK     CLI   PROP,C'+'                SEE IF +\n         BE    TLPL\n         CLI   PROP,C'-'\n         BE    TLMIN\n         CLI   PROP,C'*'\n         BE    TLMULT\n         CLI   PROP,C'/'\n         BNE   TLNOP\n         L     R9,8(,R2)                GET DIVISOR\n         LTR   R9,R9                    SEE IF ZERO\n         BE    ZRDV                     IF SO, COMPLAIN\n         CH    R9,=H'-1'                SEE IF DIVIDING BY -1\n         BE    DVM1                     IF SO, DO A SUBTRACT\n         L     R8,PRES+4                GET PREV RESULT\n         SRDA  R8,32                    PROPAGATE SIGN\n         D     R8,8(,R2)                DIVIDE BY THIS\n         ST    R9,PRES+4                STORE RESULT\n         B     NXTSYM                   GO TO NEXT\nDVM1     SR    R9,R9                    DIVIDE BY -1\n         S     R9,PRES+4                INSTEAD, SUBTRACT\n         ST    R9,PRES+4\n         B     NXTSYM                   THEN CONTINUE\nZRDV     MVC   ZRDVM(8),TRES+4          ZERO DIVIDE COMPLAINT\n         LA    R1,ZRDVM\n         LA    R0,L'ZRDVM\n         BAL   LINK,PUTGET\n         LTR   R1,R1\n         BNZ   TLOOP0\n         B     NXTSYM\nTLNOP    LA    R1,TLNOPM\n         LA    R0,L'TLNOPM\n         BAL   LINK,PUTGET              MISSING OPERATOR COMPLAINT\n         MVI   EQYET,X'01'              SET = OCCURED BIT\n         LTR   R1,R1\n         BNZ   TLOOP0\n         MVI   PROP,C'+'\n         BCTR  R3,0\n         B     TLOOP1\nTLMOP    LA    R3,1(,R1)                MISSING OPERAND COMPLAINT\n         LA    R1,TLMOPM\n         LA    R0,L'TLMOPM\n         BAL   LINK,PUTGET\n         MVI   EQYET,X'01'              SET = OCCURED BIT\n         LTR   R1,R1\n         BNZ   TLOOP0\n         B     NXTSYM\nTLMULT   L     R9,PRES+4                DO MULTIPLY\n         M     R8,8(,R2)                DO IT\n         ST    R9,PRES+4\n         B     NXTSYM\nTLPL     MVC   PRES+4(4),8(R2)          IF PREV WAS PLUS,SET\n         B     NXTSYM\nTLMIN    SR    R8,R8                    IF -, STORE -\n         S     R8,8(,R2)\n         ST    R8,PRES+4\n         B     NXTSYM\nTLEQ     CLI   EQYET,X'01'              FOUND AN =; SEE IF PREVIOUS\n         BE    DUPEQ\n         MVI   EQYET,X'01'              SET BIT\n         MVC   TNAME(8),TRES+4\n         ST    R4,TNAME+8\n         B     TLOOP1\nDUPEQ    LA    R1,DUPEQM\n         LA    R0,L'DUPEQM+1\n         BAL   LINK,PUTGET              COMPLAIN OF MORE THAN 1 =\n         LTR   R1,R1                    SEE IF ANYTHING ENTERED\n         BNZ   TLOOP0                   IF SO, RESTART\n         B     TLOOP1                   ELSE CONTINUE\nDUPEQM   DC    CL23'ILLEGAL OCCURANCE OF ='\nNXTSYM   CLI   TRES,C';'                SEE IF END\n         BE    NXTSYM1                  IF SO, DO NOT REPLACE OP\n         MVC   PROP(1),TRES             NOW SEE IF ADD TO BIG TERM\n         CLI   TRES,C'*'                IS NEXT OP * OR /\n         BE    TLOOP1                   IF SO, JUST CONTINUE\n         CLI   TRES,C'/'\n         BE    TLOOP1\nNXTSYM1  L     R8,PRES                  IF NOT, ADD TO BIG TOTAL\n         A     R8,PRES+4\n         ST    R8,PRES\n         CLI   TRES,C';'                SEE IF END\n         BNE   TLOOP1                   IF NOT, DO MORE\n         L     R1,PRES                  GET RESULT\n         CLI   EQYET,X'01'              SEE IF STORING\n         BNE   NOEQ                     IF NOT, SKIP LOOKUP\n         LA    R1,TNAME                 IF SO, FIND WHERE RESULT GOES\n         L     R4,TNAME+8\n         LA    R2,SYMTBL                START SEARCH AT BEGINNING\n         BAL   LINK,DEFSYM              FIND WHERE IT GOES\n         L     R1,PRES                  GET TOTAL\n         ST    R1,8(,R2)                STORE IT\nNOEQ     ST    R1,SYMTBL+8              STORE AT SYMBOL *\n         BAL   LINK,CVD                 CONVERT TO DECIMAL\n         MVC   TRES(21),0(R1)\n         L     R1,TLSTART\n         LR    R2,R3\n         SR    R2,R1\n         CH    R2,=H'75'                SEE IF MOVING TOO MUCH\n         BL    NXTSYM2                  IF NOT, OK\n         LH    R2,=H'75'                MOVE MAX\n         BCTR  R2,0\nNXTSYM2  EX    R2,TMVC1                 MOVE THE DESIRED AMOUNT\n         MVI   TRES+21,C' '\n         MVC   TRES+22(18),TRES+21      CLEAR OUT REST OF LINE\n         CLI   0(R3),X'00'              SEE IF AT END\n         BE    YESDISP                  IF SO, ALWAYS DISPLAY\n         CLI   DISP,C'Y'                SEE IF DISPLAY\n         BNE   TLNFNB                   IF NOT, SUPPRESS DISPLAY\nYESDISP  LA    R1,TRES\n         LA    R0,40(,R2)\n         BAL   LINK,PUTGET              PUT IT OUT\n         LTR   R1,R1\n         BNZ   TLOOP0                   IF NOT, REPROCESS\nTLNFNB   CLI   0(R3),C' '               LOOK FOR NON-BLANK\n         BNE   TLNFNB1\n         LA    R3,1(,R3)\n         B     TLNFNB\nTLNFNB1  CLI   0(R3),C';'               CHECK FOR NULL STATEMENT\n         BNE   TLNFNB2\n         LA    R3,1(,R3)\n         B     TLNFNB\nTLNFNB2  EQU   *\n         MVI   PROP,C'+'\n         MVI   EQYET,X'00'              NUTTIN YET\n         XC    PRES(8),PRES\n         MVC   TNAME(8),SYMTBL\n         XC    TNAME+8(4),TNAME+8\n         ST    R3,TLSTART\n         B     TLOOP1\nTMVC     MVC   TRES+4(1),0(R3)\nTMVC1    MVC   TRES+40(1),0(R1)\n*\n*        LA    R1,SYMBOL\n*        LA    R2,START_OF_SEARCH\n*        BAL   LINK,DEFSYM\n*\n*        (R2) -> LOC OF SYMBOL\n*        (R1) = 0 IF SYMBOL NEW, 1 IF OLD, -1 IF COULD NOT FIT,\n*               2 IF CONSTANT\n*\nDEFSYM   ST    LINK,DEFSLINK            SAVE LINKAGE REGISTER\n         MVC   DEFDRM(10),0(R1)         MOVE TO ERROR MESSAGE IN CASE\n         CLI   0(R1),C'0'               SEE IF NUMBER\n         BL    DEFSYM1\n         CLI   0(R1),C'9'\n         BH    DEFSYM1\n         LA    R2,0(R1,R4)\n         CLI   0(R2),C'.'               SEE IF ENDS IN A .\n         BE    DEFDY                    IF SO, ALWAYS DECIMAL\n         CLI   0(R2),C'H'               SEE IF ENDS IN H\n         BE    DEFH                     IF SO, ALWAYS HEX\n         CLI   MODE,C'D'                SEE WHAT THE MODE IS\n         BE    DEFD0                    DECIMAL\n         B     DEFMH                    IN HEX MODE - MUST BE HEX\nDEFDY    BCTR  R2,0                     CUT 2 DOWN FOR CHECK\n         BCTR  R4,0                     CUT 4 DOWN FOR LENGTH\n         B     DEFD0                    GO TO CONVERT\nDEFMH    LA    R4,1(,R4)                ADD 1 TO LENGTH COUNT\n         B     DEFH                     THEN GO TO CONVERT HEX\nDEFD0    CH    R4,=H'8'                 SEE IF TOO LONG\n         BH    DEFDERR\nDEFD01   CLI   0(R2),C'0'               CHECK FOR VALID #\n         BL    DEFDERR\n         BCTR  R2,0\n         CLI   0(R2),C' '\n         BNE   DEFD01\n         LA    R2,0(R1,R4)\n         EX    R4,DEFPACK               PACK  THE NUMBER\n         CVB   R2,DEFPK                 CONVERT TO BINARY\nDEFD1    ST    R2,DEFPK+8               MAKE CONSTANT LOOKLIKE SYMBOL\n         LA    R2,DEFPK\n         LA    R1,2\n         B     DEFRET\nDEFDERR  LA    R1,DEFDRM\n         LA    R0,L'DEFDRM\n         BAL   LINK,PUTGET              BAD DATA\n         LTR   R1,R1\n         BNZ   TLOOP0\n         SR    R2,R2\n         B     DEFD1\nDEFH     SR    R0,R0\n         LR    R2,R1\nDEFH1    BCTR  R4,0\n         IC    R1,0(,R2)                GET A CHARACTER\n         CLI   0(R2),C'0'               SEE IF 0-N\n         BNL   DEFH2                    IF SO, KEEP RIGHT 4 BITS\n         CLI   0(R2),C'A'               MAKE SURE A-F\n         BL    DEFDERR                  IF NOT, COMPLAIN\n         CLI   0(R2),C'F'\n         BH    DEFDERR\n         LA    R1,9(,R1)                GET RIGHT 4 BITS + 9\nDEFH2    SLL   R1,28\n         LA    R2,1(,R2)\n         SLDL  R0,4\n         LTR   R4,R4\n         BP    DEFH1\n         LR    R2,R0\n         B     DEFD1\nDEFSYM1  SR    R0,R0                    ZERO REG 0 FOR TEST\nDEFSYM2  CLI   0(R2),X'FF'              SEE IF AT END\n         BE    DEFEND                   IF SO, SEE IF FOUND ANYTHING\n         LTR   R0,R0                    SEEIF FOUND A PREVIOUS PLACE\n         BNZ   DEFSYM3                  IF SO, SKIP\n         CLI   0(R2),X'00'              SEE IF SPACE OPEN\n         BNE   DEFSYM3\n         LR    R0,R2                    IF SO, SAVE R2\nDEFSYM3  CLC   0(8,R2),0(R1)            SEE IF MATCH\n         BE    DEFOLD\n         LA    R2,12(,R2)               IF NOT,\n         B     DEFSYM2                    TRY AGAIN\nDEFEND   LTR   R2,R0                    AT END - SEE IF FOUND SPACE\n         BNZ   DEFNEW                   IF SO, OK\nDEFATAL  MVC   DEFOVM1,0(1)             COULD NOT FIT\n         LA    R1,DEFOVM\n         LA    R0,L'DEFOVM\n         BAL   LINK,PUTGET              COMPLAIN\n         LTR   R1,R1\n         BNZ   TLOOP0\n         LA    R2,SYMTBL\n         B     DEFOLD\nDEFNEW   MVC   0(8,R2),0(R1)            NEW - MOVE SYMBOL IN\n         XC    8(4,R2),8(R2)            GIVE IT A VALUE OF ZERO\n         SR    R1,R1\n         B     DEFRET                   RETURN\nDEFOLD   LA    R1,1                     OLD SYMBOL\nDEFRET   L     LINK,DEFSLINK\n         BR    LINK\nDEFPACK  PACK  DEFPK(8),0(1,R1)\nCVD      CVD   R1,CVDN                  CONVERT TO DECIMAL\n         LR    R5,R1\n         LA    R2,CVHNR\n         MVI   CVHNR,C'0'\n         MVC   CVHNR+1(7),CVHNR\nCVH1     SR    R4,R4\n         LA    R6,CVHTBL\n         LTR   R5,R5\n         BZ    CVH2\n         SLDA  R4,4\n         LA    R6,0(R6,R4)\n         MVC   0(1,R2),0(R6)\n         LA    R2,1(,R2)\n         B     CVH1\nCVH2     EQU   *\n         LR    R2,R1                    SAVE R1\n         LA    R1,CVDNR+11              POINT 1 FOR EDMK\n         MVC   CVDNR(12),CVDMSK         MOVE EDMK MASK\n         EDMK  CVDNR(12),CVDN+2         DO THE EDIT\n         LTR   R2,R2                    SEE IF INPUT NEG\n         BM    CVDM\nCVD1     LA    R1,CVDNR                 POINT 1 TO CVD\n         BR    LINK\nCVDM     BCTR  R1,0\n         MVI   0(R1),C'-'\n         B     CVD1\nDUMP     LA    R2,SYMTBL+12             2 -> SYMBOL TABLE\nDUMP1    LA    R3,SCREEN                3 -> DISPLAY SCREEN\n         LA    R4,10 ***                4 COUNTS\nDUMP2    CLI   0(R2),X'00'              SEE IF EMPYT PLACE\n         BNE   DUMP2A                   IF SO, DO NOT DISPLAY\n         LA    R2,12(,R2)               POINT 2 TO NEXT\n         B     DUMP2                    TRY AGAIN\nDUMP2A   CLI   0(R2),X'FF'\n         BE    DUMP3\n         MVI   0(R3),C' '               CLEAR OUT A LINE\n         MVC   1(39,R3),0(R3)\n         L     R1,8(,R2)                GET THE VALUE\n         STM   R2,R4,DUMPSV\n         BAL   LINK,CVD                 CONVERT TO A STRING\n         LM    R2,R4,DUMPSV\n         MVC   0(8,R3),0(R2)            MOVE IN NAME\n         MVI   9(R3),C'='               AN =\n         MVC   11(21,R3),0(R1)          AND THE VALUE\n         LA    R3,40(,R3)               SET FOR NEXT\n         LA    R2,12(,R2)\n         BCT   R4,DUMP2                  6 TIMES PER SCREEN\nDUMP3    LA    R4,SCREEN                FIND HOW MUCH TO DISPLAY\n         SR    R3,R4\n         BZ    TLOOP                    IF NONE, QUIT\n         LA    R1,SCREEN\n         LA    R0,0(,R3)\n         BAL   LINK,PUTGET              PUT IT OUT\n         LTR   R1,R1                    SEE IF ANYTHING READ\n         BZ    DUMP1                    IF NOT, CONTINUE DUMP\n         B     TLOOP0                   IF SO, GO TO PROCESS IT\nSETMODED MVI   MODE,C'D'                SET THE MODE TO DECIMAL\n         B     TLOOP                    THEN RESTART\nSETMODEH MVI   MODE,C'H'                SET THE MODE TO HEX\n         B     TLOOP                    THEN RESTART\n*\n* DELETE - REMOVE SYMBOLS FROM TABLE\n*\nDELETE   LA    R1,7(,R3)                POINT 1 PAST KEYWORD\nDEL1     CLI   0(R1),C' '               SCAN FOR NON-BLANK\n         BNE   DEL2\n         LA    R1,1(,R1)\n         B     DEL1\nDEL2     CLI   0(R1),C';'               SEE IF AT END\n         BE    TLOOP                    IF SO, QUIT\n         LA    R3,1(,R1)                SET3 PAST NON-BLANK\nDEL3     CLI   0(R3),X'15'              CHECK FOR END LINE\n         BE    TNONE                    IF SO, KILL\n         CLI   0(R3),C' '               SCAN FOR BLANK OR ;\n         BE    DEL4\n         CLI   0(R3),C';'\n         BE    DEL4\n         LA    R3,1(,R3)                POINT TO NEXT\n         B     DEL3                     TRY AGAIN\nDEL4     LR    R4,R3\n         SR    R4,R1                    PUT LENGTH IN 4\n         BCTR  R4,0                     CHANGE TO LENGTH-1\n         CH    R4,=H'8'                 SEE IF REG4 TOO BIG\n         BL    DEL4A\n         LA    R4,7                     IF SO, SET TO 7\nDEL4A    MVI   DELERM,C' '              BLANK OUT MESSAGE\n         MVC   DELERM+1(7),DELERM\n         EX    R4,DELMVC                MOVE TO ERROR MESSAGE IN CASE\n         LA    R1,DELERM                POINT 1 NICE\n         LA    R2,SYMTBL+12             START PAST PREV RESULT\n         BAL   LINK,DEFSYM              FIND WHERE IT IS\n         CH    R1,=H'1'                 SEE IF OLD\n         BNE   DELERR                   IF NOT, ERROR\n         MVC   DELMSG(8),DELERM         SAY  DELETED\n         LA    R1,DELMSG\n         LA    R0,L'DELMSG\n         BAL   LINK,PUTGET\nDEL5     MVI   0(R2),X'00'              DELETE SYMBOL\n         LTR   R1,R1                    SEE IF READ IN STUFF\n         BNZ   TLOOP0\n         LR    R1,R3                    RESTORE 1\n         B     DEL1                     CONTINUE\nDELERR   LR    R0,R1                    SAVE 1 IN 0\n         LA    R1,DELERM\n         LA    R0,40\n         BAL   LINK,PUTGET\n         LTR   R0,R0                    SEE IF NEW AND JUST DEFINED\n         BZ    DEL5                     IF SO, GO TO DELETE\n         LTR   R1,R1                    SEE IF ANYTHING READ\n         BNZ   TLOOP0\n         LR    R1,R3                    CONTINUE\n         B     DEL1\nDELMVC   MVC   DELERM(0),0(R1)          <<< EXECUTED >>>\nYDISP    MVI   DISP,C'Y'                DISPLAY ALL ANSWERS\n         B     TLOOP\nNDISP    MVI   DISP,C'N'                DISPLAY ONLY LAST ANSWERS\n         B     TLOOP\n*\n* SORT - SORT THE SYMBOL TABLE\n*\nSORT     LA    R1,SYMTBL+12             1 -> MAIN FIELD\nSORT1    CLI   0(R1),X'00'              SEE IF MAIN FIELD FREE\n         BE    SORT4                    IF SO, IGNORE IT\n         CLI   0(R1),X'FF'              SEE IF AT END\n         BE    DUMP                     IF SO, TERMINATE SORT\n         LA    R2,12(,R1)               2 -> FIELD TO BE COMPARED\nSORT2    CLI   0(R2),X'00'              SEE IF SECONDARY FIELD FREE\n         BE    SORT3                    IF SO, IGNORE IT\n         CLI   0(R2),X'FF'              SEE IF AT END\n         BE    SORT4                    IF SO, STOP THIS SCAN\n         CLC   0(8,R1),0(R2)            WANT 1 <= 2\n         BNH   SORT3                    IF OK, SKIP EXCHANGE\nSORT2A   MVC   SORTSAVE(12),0(R1)       EXCHANGE\n         MVC   0(12,R1),0(R2)\n         MVC   0(12,R2),SORTSAVE\nSORT3    LA    R2,12(,R2)               POINT 2 TO NEXT ENTRY\n         B     SORT2                    CONTINUE SCAN\nSORT4    LA    R1,12(,R1)               IF SO, POINT 1 TO NEXT\n         B     SORT1                    THEN CONTINUE\n         EJECT\n         LTORG\nREGSAVE  DC    9D'0'\nDEFSLINK DC    A(0)\nTLNOPM   DC    CL17'MISSING OPERATOR'\nTLMOPM   DC    C'MISSING OPERAND'\nTNMESS   DC    C'INVALID DATA - PLEASE  RE-ENTER'\nM2       DC    C'ENTER EQUATION(S) OR ''END'''\nCVDMSK   DC    X'402020202020202020202120'\nCDUMP    DC    CL5'/DUMP'\nCDEC     DC    CL4'/DEC'\nCHEX     DC    CL4'/HEX'\nCDEL     DC    CL7'/DELETE'\nCDISP    DC    CL5'/DISP'\nCNODISP  DC    CL7'/NODISP'\nCSORT    DC    CL5'/SORT'\nZRDVM    DC    CL31'         = 0; DIVIDE SUPPRESSED'\nPROP     DC    C'+'\nPRES     DC    2F'0'\n         DC    CL4' '\nTNAME    DC    CL12' '\nBLZR     DC    0F'0'\n         DC    CL8'0'\n         DC    2F'0'\nEQYET    DC    X'00'\nDISP     DC    C'Y'                     DISPLAY FLAG\n         DC    0F'0'\nBLANKS   DC    CL256' '\nTSTRING  DS    CL256' '\nTRES     DC    CL250' '\nTRTBL    DC    XL256'00'\n         ORG   TRTBL+X'00'\n         DC    X'6A'\n         ORG   TRTBL+X'01'\n         DC    C'%'\n         ORG   TRTBL+X'15'\n         DC    X'01'\n         ORG   TRTBL+C' '\n         DC    C' '\n         ORG   TRTBL+C'+'\n         DC    C'+'\n         ORG   TRTBL+X'55'\n         DC    X'01'\n         ORG   TRTBL+C'*'\n         DC    C'*'\n         ORG   TRTBL+C';'\n         DC    C';'\n         ORG   TRTBL+C'-'\n         DC    C'-'\n         ORG   TRTBL+C'/'\n         DC    C'/'\n         ORG   TRTBL+C'='\n         DC    C'='\n         ORG\nTLSTART  DC    F'0'\nDEFDRM   DC    CL30'           INVALID; 0 ASSUMED'\nDEFOVM   DC    CL23'SYMBOL TABLE OVERFLOW; XXXXXXXX'\nDEFOVM1  EQU   *-8,8\nDELERM   DC    CL9' '\n         DC    CL31'NOT PREVIOUSLY DEFINED - ERROR'\nDELMSG   DC    C'XXXXXXXX DELETED'\nSCREEN   DC    11CL40' '\nREADINTO DC    CL255' '                 PLACE TO READ INTO\nDUMPSV   DC    3F'0'\n         DC    0F'0'\n*SDM1 SYMTBL DC CL8'*'\nSYMTBL   DC    CL8'$'                                              SDM1\n         DC    223F'0'\n         DC    4X'FF'\nDEFPK    DC    2D'0'\nCVHTBL   DC    C'0123456789ABCDEF'\nCVDN     DC    2D'0'\nCVHN     DC    2D'0'\nCVDNR    DC    CL13' '\nCVHNR    DC    CL08' '\nTLUNDM   DC    CL30'         UNDEFINED - SET TO 0'\n         DC    0F'0'\n*MODE    DC    C'D'                     INITIAL MODE - DECIMAL\nMODE     DC    C'H'                     INITIAL MODE - HEX         LDW2\nSORTSAVE DC    CL12' '\nQQSAVE   DC    2F'0'\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nLINK     EQU   10\nBASE2    EQU   11\nBASE     EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   DEX\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DISC": {"ttr": 5894, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x894o\\x00\\x92\\t\\x0f G\\x00\\x89\\x007\\x00R\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1989-12-12T00:00:00", "modifydate": "1992-03-30T20:47:00", "lines": 137, "newlines": 55, "modlines": 82, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1989 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nDISC TITLE '-----  Issue VTAM oper cmd to Disconnect TSO sess  -----'\n*---------------------------------------------------------------------*\n*                                                                     *\n*   Program name:  DISC                                               *\n*                                                                     *\n*   Purpose:       Issue the VTAM operator command to disconnect a    *\n*                  session, so that the user doesn't have to know     *\n*                  the VTAM command for doing it.                     *\n*                                                                     *\n*   Author:        Leonard D. Woren                                   *\n*                                                                     *\n*   Date:          December 12, 1989                                  *\n*                                                                     *\n*   Attributes:    Re-entrant, APF authorized                         *\n*                                                                     *\n*   Installation:  University of Southern California                  *\n*                                                                     *\n*   Updates:                                                          *\n*      ddmmmyy  Unnn LDW - None                                       *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\nDISC     OSENTER  EXIT=LEAVE,RC=0,GETMAIN=(WORKLEN,WORKD)\n         MVC   CMDLINE(50),=C'VARY NET,TERM,TYPE=COND,NOTIFY=NO,LU2=TSO$\n               nnnn,LU1='\n         L     R1,PSAANEW-PSA           -> ASCB\n         L     R2,ASCBTSB-ASCB(,R1)     -> TSB\n         USNGX TSB,R2\n         MODESET  KEY=ZERO\n         L     R3,TSBEXTNT              -> TSBX\n         USNGX TSBX,R3\n         MVC   CMDLINE+50(8),TSBTRMID\n         LH    R9,TSBXAIND              get TSO LU number\n         CVD   R9,DWD\n         OI    DWD+7,X'0F'              remove sign\n         UNPK  CMDLINE+41(4),DWD\n***      TPUTX CMDLINE,58\n         MVC   CMDDESC(4),=Y(4+58,0)\n         SR    R0,R0                    use master console\n         MGCR  CMDDESC                  issue the command\n         MODESET  KEY=NZERO\n         B     LEAVE\n         LTORG ,\n         SPACE 2\nWORKD    DSECT ,                        resume\nDWD      DS    D\nCMDDESC  DS    2H\nCMDLINE  DS    CL58\nWORKLEN  EQU   *-WORKD\n         SPACE 2\n         PRINT NOGEN\n         IHAPSA  ,\n         IHAASCB  ,\n         IKJTSB  EXT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DMOD": {"ttr": 5897, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x10\\x00\\x00\\x00\\x80\\x01\\x8f\\x00\\x91\\x12\\x7f\"\\x00\\x06\\x89\\x04\\t\\x02\\xdb\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.16", "flags": 0, "createdate": "1980-01-18T00:00:00", "modifydate": "1991-05-07T22:00:00", "lines": 1673, "newlines": 1033, "modlines": 731, "user": "LDW"}, "text": "DMOD     TITLE 'DMOD - TSO COMMAND FOR MODIFYING FORMAT 1 DSCB''S '\n***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1988 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.                                     *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1, with DFP 3.1),  *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc-oberon!LDW (last resort)                           *\n*                                                                     *\n*          (213) 743-5391 (direct -- 11 am to 7 pm Pacific time)      *\n*          (213) 743-2957 (msgs)                                      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, or 714.  Sorry.                                       *\n*                                                                     *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n*---------------------------------------------------------------------*\n* UPDATES:                                                            *\n*   07May91 U019 LDW  Fix for ASM2 fields that moved with V310 & SMS  *\n*                     Fix to assemble under ASMH V2                   *\n*   25Nov87 U018 SDM  Fix U016 to assemble again w/o ASM2.            *\n*   27MAY87 U017 SDM  DO UCB SCAN WITH MVS/SP SERVICE 'IOSVSUCB'      *\n*   16MAY87 U016 LDW  FIX BUG                                         *\n*                     MAKE ASM2 CONDITIONAL ON &@@ASM2 IN @GLOBALS    *\n*                     CHANGE SYS3.DMOD TO &@@DMOD                     *\n*   14MAY87 U015 LDW  ADD \"CHANGED\", \"NOCHANGED\", \"CHKPT\", \"NOCHKPT\"  *\n*   11FEB87 U014 LDW  ADD \"LMDATE\", \"LMTIME\", \"LMID\" ASM2 KEYWORDS    *\n*                     ADD SECOND BASE REG (ARRGGH)                    *\n*   20JAN87 U013 LDW  ADD SUPPORT FOR DSORG(VS)                       *\n*   04JUN86 U012 LDW  ADD 'DSSN' KEYWORD                              *\n*   02JUL85 U011 LDW  REMOVE ALIAS 'BLOCKS' FROM 'AVBLOCKS'... IT     *\n*                        WILL CAUSE TOO MUCH CONFLICT WITH 'BLKSIZE'  *\n*                     REFIT 17JUL84 MOD:  ALLOW USE IF BATCH AND      *\n*                        REQUESTOR HAS ACCESS TO THE DMOD CONTROL DS  *\n*   13JUN85 U010 SDM  ADD ALLOCATION TYPE KEYWORDS                    *\n*                     SECONDARY ALLOC IS THREE BYTES LONG, NOT TWO    *\n*   20FEB81 U009 SDM  CORRECT DSN PREFIX LOGIC FOR NULL PREFIX        *\n*                     FIX FINGER SEQUENCE ERROR IN U008               *\n*   12DEC80 U008 LDW  ADD SUPPORT FOR RACF BIT                        *\n*                     CHANGE DMOD.PASSWORD TO SYS3.DMOD               *\n*                     USE A FEW MORE SYMBOLICS                        *\n*   06FEB80 U007 LDW  MARK 'DMOD.PASSWORD' NOT IN USE.                *\n*   18JAN80 U006 LDW  ADD SUPPORT FOR \"LDATE\" AND \"SECONDARY\" KEYWDS  *\n*   25OCT79 U005 SDM  INCLUDE EXTERNALLY ASSEMBLED MODULES HERE       *\n*   26OCT79 U004 SDM  CORRECT THE LOGIC FOR DSNAME LISTS              *\n*   28AUG79 U003 SDM  DO DISK ADDRESS PARAMETER CORRECTLY             *\n*   21AUG79 U002 SDM  ADD PASSWORD TESTS                              *\n*   02AUG79 U001 SDM  FIX UP TO RUN AT GIBRALTAR                      *\n*---------------------------------------------------------------------*\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*  DMOD MODIFIED FOR OS/VS2 MVS -- ENHANCED VERSION                   *\n*                                                                     *\n*  DEVELOPED BY --                                                    *\n*   PETER H. HAAS                                                     *\n*   SENIOR SYSTEMS PROGRAMMER                                         *\n*   MELLONICS INFORMATION CENTER                                      *\n*   6701 VARIEL AVENUE                                                *\n*   CANOGA PARK, CALIFORNIA 91303                                     *\n*   TELEPHONE (213) 877-5100                                          *\n*                                                                     *\n*  ACKNOWLEDGEMENT --                                                 *\n*   THIS PROGRAM IS A MODIFICATION OF THE ENHANCED VERSION OF THE     *\n*   DMOD PROGRAM DEVELOPED AT MACAUTO BY R. J. STANN.  THROUGH A      *\n*   EXCHANGE OF PROGRAMS, MY MVS DMOD COMMAND, WHICH WAS BASED UPON   *\n*   THE ORIGINAL VERSION OF THE DMOD COMMAND WHICH SUPPORTED ONLY     *\n*   MVT, WAS TRADED FOR THE ENHANCED VERSION OF THE DMOD COMMAND      *\n*   WHICH ALSO SUPPORTED ONLY MVT.  MY MVS MODS WERE SUBSEQUENTLY     *\n*   INCORPORATED INTO THIS ENHANCED VERSION, RESULTING IN THIS        *\n*   PROGRAM.                                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n         COPY  @GLOBALS                                            U016\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  THIS PROGRAM WILL MODIFY ANY NON-SPACE RELATED FIELD IN A FORMAT 1 *\n*  DSCB.  DUE TO ITS MODE OF OPERATION, DMOD WILL NOT CURRENTLY       *\n*  EXECUTE UNDER MVS.                                                 *\n*                                                                     *\n*  DMOD IS RENTRANT AND REFRESHABLE.                                  *\n*                                                                     *\n*  OPERATOR AUTHORITY IS REQUIRED TO MODIFY DATASETS OTHER THAN       *\n*     YOUR OWN, OR TO USE THE PASSWORD OPERAND.                       *\n*                                                                     *\n*  FORMAT -                                                           *\n*                                                                     *\n*    DMOD  'DSLIST' 'OPTIONS'                                         *\n*                                                                     *\n*  WHERE -                                                            *\n*                                                                     *\n*    DSLIST  -  LIST OF DATASETS TO ME MODIFIED.                      *\n*    OPTIONS -  ANY OR ALL OF THE FOLLOWING FIELDS OF THE FORMAT 1    *\n*               DSCB THAT ARE TO BE MODIFIED.                         *\n*                                                                     *\n*       BLKSIZE(NUMBER) -                                             *\n*       LRECL(NUMBER) -                                               *\n*       RECFM('FBS', 'VBA', 'U', ETC.) -                              *\n*       DSORG('IS', 'ISU', 'DA', 'DAU', 'PO', 'POU', 'PS', OR 'PSU') -*\n*       KEYLEN(NUMBER) -                                              *\n*       CDATE(JULIAN DATE) -                                          *\n*       EDATE(JULIAN DATE) -                                          *\n*       LDATE(JULIAN DATE) -                                      U006*\n*       SECONDARY(NUMBER) -                                       U006*\n*       PASSWORD('R', 'W' OR 'N') -                                   *\n*       AVBLOCKS/CYLINDERS/CYLS/TRACKS/TRKS -                     U011*\n*       RACF/NORACF -                                             U008*\n*       ROUND/NOROUND -                                           U010*\n*       DSSN(VALUE) -                                             U012*\n          AIF   (&@@ASM2 EQ 0).NOASM2A                                *\n*       LMDATE(YYDDD) -                                           U014*\n*       LMTIME(HHMM) -                                            U014*\n*       LMID(JOBNAME) -                                           U014*\n.NOASM2A  ANOP                                                        *\n*       CHANGED/NOCHANGED -                                       U015*\n*       CHKPT/NOCHKPT -                                           U015*\n*       VOLUME(VOLSER FOR UNCATALOGED DATA SETS) -                    *\n*       ADDRESS  -  WRITTEN AS IS - RETURNS DSCB ADDRESS              *\n*                                                                     *\n*  AUTHOR -                                                           *\n*                                                                     *\n*    RAYMOND J. STANN                                                 *\n*    MCDONNELL DOUGLAS AUTOMATION COMPANY                             *\n*    MAIL CODE 1-29                                                   *\n*    3855 LAKEWOOD BLVD.                                              *\n*    LONG BEACH, CA.  90846                                           *\n*    3/12/76     (213) 593-4662                                       *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\n         MACRO\n&LABEL   MSG   &MSG\n         LCLC  &IHBNX                                              U010\n&IHBNX   SETC  'IHB&SYSNDX'                                        U010\nDMODMSG  CSECT                                                     U010\n&IHBNX   DC    AL2(&IHBNX.E-*,0)                                   U010\n         DC    C&MSG\n&IHBNX.E EQU   *                                                   U010\n&LABEL   EQU   &IHBNX-DMODMSG                                      U010\n&SYSECT  CSECT                                                     U010\n         MEND\n         EJECT\nDMOD     CSECT                                                     U001\n         USING PSA,0                                               U010\n         SAVE  (14,12),,DMOD_&SYSDATE._&SYSTIME   SAVE REGISTERS   U019\n         LR    BASE,R15                 SET PRIMARY BASE REGISTER  U001\n         USING DMOD,BASE                                           U001\n         LA    R11,4095(,BASE)          SET UP SECOND BASE REG     U014\n         LA    R11,1(,R11)              ...                        U014\n         USING DMOD+4096,R11                                       U014\n         LR    R9,R1                    SAVE PARAMETER POINTER     U014\n         USING CPPL,R9                                             U014\n         GETMAIN R,LV=WORKALEN,SP=1     GET SAVE AND WORK AREA     U001\n         ST    R1,8(,R13)               SET FORWARD CHAIN          U001\n         ST    R13,4(,R1)               SET BACKWARD CHAIN         U001\n         LR    R13,R1                   ESTABLISH PRIMARY SAVE AREAU001\n         USING WORKAREA,R13                                        U001\n         MVI   STATUS,0                 INITIALIZE STATUS SWITCHES U002\n* DON'T TRUST THE CPPL - FIND THE PSCB THROUGH MVS CONTROL BLOCKS\n         L     R1,PSATOLD               -> CURRENT TCB             U010\n         L     R1,180(,R1)              -> JSCB                    U002\n         L     R1,264(,R1)              -> PSCB                    U002\n         ST    R1,PSCBADDR              SAVE THE ADDRESS FOR LATER U002\n*\n*  FILL IN PPL AND PUTLINE IOPL\n*\n         LA    R15,WKPPL                ADDRESS PPL STORAGE        U001\n         USING PPL,R15                                             U001\n         LA    R14,WKIOPL               -> PUTLINE IOPL            U001\n         USING IOPL,R14                                            U001\n         LA    R1,WKDAPL                -> DAIR PARM LIST          U002\n         USING DAPL,R1                                             U002\n         L     R0,CPPLUPT               -> USER PROFILE TABLE      U001\n         ST    R0,PPLUPT                STORE IN PARSE PARAM LIST  U001\n         ST    R0,IOPLUPT               STORE IN PUTLINE IOPL      U001\n         ST    R0,DAPLUPT               STORE IN DAIR PARAM LIST   U002\n         L     R0,CPPLECT               -> ENVIRON CONTROL TABLE   U001\n         ST    R0,PPLECT                STORE IN PARSE PARAM LIST  U001\n         ST    R0,IOPLECT               STORE IN PUTLINE IOPL      U001\n         ST    R0,DAPLECT               STORE IN DAIR PARAM LIST   U002\n         LA    R0,ECB                   -> THE ECB                 U001\n         ST    R0,PPLECB                STORE IN PARSE PARAM LIST  U001\n         ST    R0,IOPLECB               STORE IN PUTLINE IOPL      U001\n         ST    R0,DAPLECB               STORE IN DAIR PARAM LIST   U002\n         L     R0,PSCBADDR              -> PROTECTED STEP CTL BLK  U002\n         ST    R0,DAPLPSCB              STORE IN DAIR PARAM LIST   U002\n         L     R0,=A(CMDPCL)            PARSE CONTROL LIST         U001\n         ST    R0,PPLPCL                STORE IN PARSE PARAM LIST  U001\n         LA    R0,ANSWER                -> ANSWER POINTER          U001\n         ST    R0,PPLANS                STORE IN PARSE PARAM LIST  U001\n         L     R0,CPPLCBUF              -> COMMAND BUFFER          U001\n         ST    R0,PPLCBUF               STORE IN PARSE PARAM LIST  U001\n         SR    R0,R0                    ZERO THE                   U001\n         ST    R0,ECB                   . ECB                      U001\n         ST    R0,PPLUWA                . WORK AREA POINTER        U001\n         ST    R0,ANSWER                . PARSE ANSWER POINTER     U001\n         ST    R0,PLPARM                . PUTLINE PARM BLOCK       U001\n         ST    R0,PLDLEN                . PUTLINE DATA LENGTH      U001\n         DROP  R15                                                 U001\n         LA    R0,WKDAPB                -> DAIR PARAM BLOCK        U002\n         ST    R0,DAPLDAPB              STORE IN DAIR PARAM LIST   U002\n         DROP  R1                                                  U002\n         LA    R1,PLPARM                -> PUTLINE PARM BLOCK      U001\n         ST    R1,IOPLIOPB              STORE IN PUTLINE IOPL      U001\n         DROP  R14                                                 U001\n*\n*  PARSE COMMAND BUFFER\n*\n         LA    R1,WKPPL                 -> PARSE PARAM LIST        U001\n         CALLTSSR EP=IKJPARS            CALL PARSE ROUTINE       P.H.H.\n         LTR   R15,R15                  CHECK IF PARSE FAILED (ONLY\n         BNZ   RETURN                     POSSIBLE IF NOPROMPT MODE)\n         L     R10,ANSWER\n         USING IKJPARMD,R10\n*\n**  FIND FULL DATA SET NAME\n*\n         LA    R5,P#DSNAME              A(FIRST DSNAME)            U004\nNEXTDSN  MVC   SERIAL,SPACES            BLANK OUT VOLSER FIELD\n         MVC   DS1DSNAM,SPACES          BALNK OUT DSNAME FIELD\n         L     R1,0(,R5)                LOAD A(DSNAME FIELD)\n         LH    R2,4(,R5)                LOAD L'DSNAME\n         BCTR  R2,0                     DECREMENT LENGTH\n         TM    6(R5),X'40'              TEST FOR QUOTES\n         BO    MOVENAME                 DSNAME IN QUOTES\n*\n*  FIND USERID AND COMBINE IT WITH SUPPLIED DSNAME\n*\n         L     R3,CPPLUPT               UPT ADDR.                P.H.H.\n         LA    R3,16(,R3)               UPTPREFX ADDR.           P.H.H.\n         MVC   DS1DSNAM(7),0(R3)        MOVE USERID\n         XR    R4,R4\n         IC    R4,7(,R3)                LOAD L'(NON-BLANK PORTION)\n         LTR   R4,R4                    ANY PREFIX?                U009\n         BZ    MOVENAME                 NO, THEN DON'T PREFIX IT   U009\n         LA    R4,DS1DSNAM(R4)\n         MVI   0(R4),C'.'               INSERT QUALIFYING PERIOD\n         EX    R2,TSODSN                MOVE DSNAME\n         B     TESTAUTH\nTSODSN   MVC   1(0,R4),0(R1)            MOVE TSO-TYPE DSNAME\nOSDSN    MVC   DS1DSNAM(0),0(R1)        MOVE FULL DSNAME\nMOVENAME EX    R2,OSDSN                 MOVE DSNAME\n*\n**  CHECK FOR AUTHORIZATION\n*\nTESTAUTH L     R15,PSCBADDR                                        U002\n         USING PSCB,R15                                            U002\n         CLI   PSCBUSRL,0               FUNNY USERID?              U002\n*U011    BE    NOBATCH                  YES, FORGET IT             U002\n         BE    TA04                     YES, ALLOW IF KNOWS PSWD   U011\n         SR    R1,R1                    CLEAR FOR 'IC'             U002\n         IC    R1,PSCBUSRL              GET USERID LENGTH          U002\n         BCTR  R1,0                     FOR EX                     U002\n         EX    R1,TACLC                 IS PREFIX = USERID?        U002\n         BNE   TA01                     NO, BAD STUFF              U002\n         LA    R1,DS1DSNAM+1(R1)        POINT TO QUAL. PERIOD      U002\n         CLI   0(R1),C'.'               IS IT REALLY A PERIOD?     U002\n         BE    TA02                     YES, GOOD STUFF            U002\nTA01     TM    PSCBATR1,PSCBCTRL        OPER AUTHORIZATION?        U002\n         BNO   NOTAUTH                  NO, TOO BAD FOR HIM        U002\nTA02     TM    I#PSWD+6,X'80'           'PASSWORD' SPECIFIED?      U002\n         BO    TA03                     YES - SEE IF OPER          U008\n         CLI   K#RACF+1,0               RACF/NORACF SPECIFIED?     U008\n         BE    FNDVOL                   NOT SPECIFIED              U008\nTA03     TM    PSCBATR1,PSCBCTRL        OPER AUTHORIZATION?        U002\n         BNO   NAUTHPW                  NO, TOO BAD FOR HIM        U002\n         DROP  R15                                                 U002\nTA04     CLC   DS1DSNAM(44),DMODPWDS+2  \"THAT\" DATASET?            U011\n         BE    NOMODPW                  YES, FORGET IT             U002\n         BAL   R14,DMODPW               TEST PASSWORD              U002\n*\n**  FIND VOLUME SERIAL NUMBER\n*\nFNDVOL   TM    I#VOL+6,X'80'            TEST FOR PRESENCE OF PARAMETER\n         BZ    CHKCAT\n         LH    R1,I#VOL+4               LOAD L'(VOLUME SERIAL)\n         L     R2,I#VOL                 LOAD A(VOLUME SERIAL)\n         BCTR  R1,0                     DECREMENT\n         EX    R1,VOLMOVE               MOVE VOLUME SERIAL NO.\n         B     RDDSCB\nVOLMOVE  MVC   SERIAL(0),0(R2)          MOVE VOLUME SERIAL NUMBER\n*\n*  SEARCH CATALOG FOR VOLUME SERIAL NUMBER\n*\nCHKCAT   BAL   R14,LOOKUP                                          U005\n*\n**  READ THE DSCB\n*\nRDDSCB   BAL   R14,RDFMT1               READ THE FMT1 DSCB\n*\n**  CHANGE DSCB\n*\n*  CHECK BLKSIZE\n*\n         TM    I#BLKLEN+6,X'80'         CHECK IF SPECIFIED\n         BZ    CHKLRECL                 NOT SPECIFIED\n         L     R2,I#BLKLEN              LOAD A(BLKLEN)\n         LH    R1,I#BLKLEN+4            LOAD L'BLKLEN)\n         BCTR  R1,0                     DECREMENT\n         EX    R1,PACK\n         CVB   R1,WORK\n         C     R1,=F'32760'             VERIFY LENGTH\n         BH    BLKERR                   TOO LARGE\n         STH   R1,DS1BLKL               STORE BLKSIZE\n         OI    STATUS,UPDVTOC           UPDATE VTOC\n*\n*  CHECK LRECL\n*\nCHKLRECL TM    I#RECLEN+6,X'80'         CHECK IF SPECIFIED\n         BZ    CHKRECFM                 NOT SPECIFIED\n         L     R2,I#RECLEN              LOAD A(LRECL)\n         LH    R1,I#RECLEN+4            LOAD L'LRECL\n         BCTR  R1,0                     DECREMENT\n         EX    R1,PACK\n         CVB   R1,WORK\n         C     R1,=F'32760'             VERIFY LENGTH\n         BH    LENERR\n         STH   R1,DS1LRECL              STORE NEW LRECL\n         OI    STATUS,UPDVTOC           UPDATE VTOC\n*\n*  CHECK RECFM\n*\nCHKRECFM TM    I#RECFM+6,X'80'          CHECK IF SPECIFIED\n         BZ    CHKKEYL                  NOT SPECIFIED\n         L     R2,I#RECFM               LOAD A(RECFM)\n         LH    R1,I#RECFM+4             LOAD L'RECFM\n         NI    DS1RECFM,X'20'   INITIALIZE FIELD - LEAVE 'T' PARM ALONE\nCHKREC1  CLI   0(R2),C'F'              FIND RECORD TYPE\n         BE    RECF\n         CLI   0(R2),C'V'\n         BE    RECV\n         CLI   0(R2),C'U'\n         BE    RECU\n         CLI   0(R2),C'B'               TEST FOR BLOCKING\n         BE    RECB\n         CLI   0(R2),C'S'          TEST FOR STANDARD BLOCKS OR SPANNING\n         BE    RECS\n         CLI   0(R2),C'A'               TEST FOR CARRAGE CONTROL\n         BE    RECA\n         CLI   0(R2),C'M'\n         BE    RECM\n         B     RECFMERR                 ILLEGAL RECFM CODE\nRECF     TM    DS1RECFM,X'C0'           VERIFY NOT PREVIOUSLY SET\n         BNZ   RECFMERR                 CODE ALREADY EXISTS\n         OI    DS1RECFM,X'80'           SET CODE\n         B     RECDECRI\nRECV     TM    DS1RECFM,X'C0'           VERIFY NOT PREVIOUSLY SET\n         BNZ   RECFMERR                 CODE ALREADY EXISTS\n         OI    DS1RECFM,X'40'           SET CODE\n         B     RECDECRI\nRECU     TM    DS1RECFM,X'D9'       VERIFY ONLY 'T','A', AND/OR 'M' SET\n         BNZ   RECFMERR                 CODE ALREADY EXISTS\n         OI    DS1RECFM,X'C0'           SET CODE\n         B     RECDECRI\nRECB     TM    DS1RECFM,X'C0'           VERIFY NOT 'U'\n         BO    RECFMERR                 ILLEGAL CODE\n         TM    DS1RECFM,X'10'           VERIFY NOT PREVIOUSLY SET\n         BO    RECFMERR\n         OI    DS1RECFM,X'10'           SET CODE\n         B     RECDECRI\nRECS     TM    DS1RECFM,X'C0'           VERIFY NOT 'U'\n         BO    RECFMERR                 ILLEGAL CODE\n         TM    DS1RECFM,X'08'           VERIFY NOT PREVIOUSLY SET\n         BO    RECFMERR\n         OI    DS1RECFM,X'08'           SET CODE\n         B     RECDECRI\nRECA     TM    DS1RECFM,X'06'           VERIFY NOT PREVIOUSLY SET\n         BNZ   RECFMERR                 CODE ALREADY EXISTS\n         OI    DS1RECFM,X'04'           SET CODE\n         B     RECDECRI\nRECM     TM    DS1RECFM,X'06'           VERIFY NOT PREVIOUSLY SET\n         BNZ   RECFMERR                 CODE ALREADY EXISTS\n         OI    DS1RECFM,X'02'           SET CODE\nRECDECRI LA    R2,1(R2)                 INCREMENT POINTER\n         BCT   R1,CHKREC1               LOOP\n         TM    DS1RECFM,X'C0'           FINAL VERIFICATION\n         BZ    RECFMERR                 RECORD TYPE NOT SET\n         OI    STATUS,UPDVTOC           UPDATE VTOC\n*\n*  CHECK KEYLEN\n*\nCHKKEYL  TM    I#KEYLEN+6,X'80'         CHECK IF SPECIFIED\n         BZ    CHKDSORG                 NOT SPECIFIED\n         L     R2,I#KEYLEN              LOAD A(KEYLEN)\n         LH    R1,I#KEYLEN+4            LOAD L'KEYLEN\n         BCTR  R1,0                     DECREMENT\n         EX    R1,PACK\n         CVB   R1,WORK\n         CH    R1,=H'255'               CHECK FOR MAXIMUM LENGTH\n         BH    KEYERR\n         STC   R1,DS1KEYL\n         OI    STATUS,UPDVTOC           UPDATE VTOC\n*\n*  CHECK DSORG\n*\nCHKDSORG TM    I#DSORG+6,X'80'          CHECK IF SPECIFIED\n         BZ    CHKPSWRD                 NOT SPECIFIED\n         L     R2,I#DSORG               LOAD A(DSORG)\n         CLC   0(2,R2),=C'IS'           CHECK TYPES\n         BE    DSOIS\n         CLC   0(2,R2),=C'PS'\n         BE    DSOPS\n         CLC   0(2,R2),=C'DA'\n         BE    DSODA\n         CLC   0(2,R2),=C'PO'\n         BE    DSOPO\n         CLC   0(2,R2),=C'VS'                                      U013\n         BE    DSOVS                                               U013\n         B     DSOERR\nDSOIS    MVI   DS1DSORG,X'80'\n         B     CHKUNMOV\nDSOPS    MVI   DS1DSORG,X'40'\n         B     CHKUNMOV\nDSODA    MVI   DS1DSORG,X'20'\n         B     CHKUNMOV\nDSOPO    MVI   DS1DSORG,X'02'\n         B     CHKUNMOV                                            U013\nDSOVS    MVC   DS1DSORG(2),=X'0008'                                U013\nCHKUNMOV LH    R1,I#DSORG+4             LOAD L'DSORG\n         OI    STATUS,UPDVTOC           UPDATE VTOC\n         CH    R1,=H'3'\n         BNE   CHKPSWRD\n         CLI   2(R2),C'U'               TEST FOR UNMOVEABLE\n         BNE   DSOERR\n         OI    DS1DSORG,X'01'           SET CODE\n*\n*  CHECK PASSWORD PROTECTION CHARACTER\n*\nCHKPSWRD TM    I#PSWD+6,X'80'           CHECK IF SPECIFIED\n         BZ    CHKRACF                  NOT SPECIFIED              U008\n         OI    STATUS,UPDVTOC           UPDATE VTOC\n         L     R2,I#PSWD                LOAD A(PASSWORD PROTECT SYMBOL)\n         CLI   0(R2),C'R'               CHECK FOR READ/WRITE PROTECT\n         BE    RWPROT                   IT IS\n         CLI   0(R2),C'W'               CHECK FOR WRITE ONLY PROTECT\n         BE    WPROT                    IT IS\n         CLI   0(R2),C'N'               CHECK FOR NO PROTECTION\n         BNE   PSWDERR\n         NI    DS1DSIND,255-DS1IND10-DS1IND04 REMOVE PASSWORD BITS U008\n         B     CHKRACF                                             U008\nRWPROT   NI    DS1DSIND,255-DS1IND10-DS1IND04 REMOVE PASSWORD BITS U008\n         OI    DS1DSIND,DS1IND10        ADD ONE BACK               U008\n         B     CHKRACF                                             U008\nWPROT    OI    DS1DSIND,DS1IND10+DS1IND04  ADD BOTH PASSWORD BITS  U009\n*\n*  CHECK RACF/NORACF KEYWORDS\n*\nCHKRACF  CLI   K#RACF+1,0               CHECK IF SPECIFIED         U008\n         BE    CHKCHG                   NOT SPECIFIED              U015\n         OI    STATUS,UPDVTOC           UPDATE VTOC                U008\n         CLI   K#RACF+1,1               \"RACF\"?                    U008\n         BNE   *+8                      NO - SKIP                  U008\n         OI    DS1DSIND,DS1IND40        YES - SET FLAG             U008\n         CLI   K#RACF+1,2               \"RACF\"?                    U008\n         BNE   *+8                      NO - SKIP                  U008\n         NI    DS1DSIND,255-DS1IND40    YES - UNSET FLAG           U008\n*\n*  CHECK CHANGED/NOCHANGED KEYWORDS                                U015\n*\nCHKCHG   CLI   K#CHANGE+1,0             CHECK IF SPECIFIED         U015\n         BE    CHKCHKPT                 NOT SPECIFIED              U015\n         OI    STATUS,UPDVTOC           UPDATE VTOC                U015\n         CLI   K#CHANGE+1,1             \"CHANGED\"?                 U015\n         BNE   *+8                      NO - SKIP                  U015\n         OI    DS1DSIND,DS1DSCHA        YES - SET FLAG             U015\n         CLI   K#CHANGE+1,2             \"NOCHANGED\"?               U015\n         BNE   *+8                      NO - SKIP                  U015\n         NI    DS1DSIND,255-DS1DSCHA    YES - UNSET FLAG           U015\n*\n*  CHECK CHKPT/NOCHKPT KEYWORDS                                    U015\n*\nCHKCHKPT CLI   K#CHKPT+1,0              CHECK IF SPECIFIED         U015\n         BE    CHKCDATE                 NOT SPECIFIED              U015\n         OI    STATUS,UPDVTOC           UPDATE VTOC                U015\n         CLI   K#CHKPT+1,1              \"CHKPT\"?                   U015\n         BNE   *+8                      NO - SKIP                  U015\n         OI    DS1DSIND,DS1CHKPT        YES - SET FLAG             U015\n         CLI   K#CHKPT+1,2              \"NOCHKPT\"?                 U015\n         BNE   *+8                      NO - SKIP                  U015\n         NI    DS1DSIND,255-DS1CHKPT    YES - UNSET FLAG           U015\n*\n*  CHECK CREATION DATE\n*\nCHKCDATE TM    I#CDATE+6,X'80'          CHECK IF SPECIFIED\n         BZ    CHKEDATE                 NOT SPECIFIED\n         OI    STATUS,UPDVTOC           UPDATE VTOC\n         L     R2,I#CDATE               LOAD A(CDATE)\n         LH    R1,I#CDATE+4             LOAD L'CDATE\n         BAL   R3,DATE                  CONVERT DATE\n         LTR   R15,R15                  CHECK RETURN\n         BNZ   CDATERR\n         MVC   DS1CREDT(3),WORK1        STORE CREATION DATE\n*\n*  CHECK EXPIRATION DATE\n*\nCHKEDATE TM    I#EDATE+6,X'80'          CHECK IF SPECIFIED\n         BZ    CHKLDATE                 NOT SPECIFIED              U006\n         OI    STATUS,UPDVTOC           UPDATE VTOC\n         L     R2,I#EDATE               LOAD A(EDATE)\n         LH    R1,I#EDATE+4             LOAD L'EDATE\n         BAL   R3,DATE                  CONVERT DATE\n         LTR   R15,R15                  CHECK RETURN\n         BNZ   EDATERR\n         MVC   DS1EXPDT(3),WORK1        STORE EXPIRATION DATE\n*\n*  CHECK LAST REFERENCED DATE\n*\nCHKLDATE TM    I#LDATE+6,X'80'          CHECK IF SPECIFIED         U006\n         BZ    CHKLMDAT                 NOT SPECIFIED              U014\n         OI    STATUS,UPDVTOC           UPDATE VTOC                U006\n         L     R2,I#LDATE               LOAD A(LDATE)              U006\n         LH    R1,I#LDATE+4             LOAD L'LDATE               U006\n         BAL   R3,DATE                  CONVERT DATE               U006\n         LTR   R15,R15                  CHECK RETURN               U006\n         BNZ   EDATERR                                             U006\n         MVC   DS1REFD(3),WORK1         STORE LAST REF'D DATE      U006\nCHKLMDAT EQU   *                                                   U016\n          AIF   (&@@ASM2 EQ 0).NOASM2B                             U016\n*\n*  CHECK LAST MODIFIED DATE (ASM2)                                 U014\n*\n         TM    I#LMDATE+6,X'80'         CHECK IF SPECIFIED         U014\n         BZ    CHKLMTIM                 NOT SPECIFIED              U014\n         OI    STATUS,UPDVTOC           UPDATE VTOC                U014\n         L     R2,I#LMDATE              LOAD A(LMDATE)             U014\n         LH    R1,I#LMDATE+4            LOAD L'LMDATE              U014\n         BAL   R3,DATE                  CONVERT DATE               U014\n         LA    R1,LMDATMSG              -> MESSAGE, IN CASE        U014\n         LTR   R15,R15                  CHECK RETURN               U014\n         BNZ   ERRMSG                   BAD - ISSUE ERROR MESSAGE  U014\n         MVC   ASM2LMDT(3),WORK1        STORE LAST MOD'D DATE      U014\n*\n*  CHECK LAST MODIFIED TIME                                        U014\n*\nCHKLMTIM TM    I#LMTIME+6,X'80'         CHECK IF SPECIFIED         U014\n         BZ    CHKLMID                  NOT SPECIFIED              U014\n         L     R2,I#LMTIME              LOAD A(LMTIME)             U014\n         LH    R15,I#LMTIME+4           LOAD L'LMTIME)             U014\n         LA    R1,LMTIMMSG              -> MESSAGE, IN CASE        U014\n         CH    R15,=H'4'                CORRECT LENGTH?            U014\n         BNE   ERRMSG                   NO - ERROR                 U014\n         PACK  WORK(2+1),0(4+1,R2)      HHMM IN UNSIGNED PACKED    U014\n         MVC   ASM2LMTM(2),WORK         STORE LAST MOD'D TIME      U014\n         OI    STATUS,UPDVTOC           UPDATE VTOC                U014\n*\n*  CHECK LAST-MODIFIED-BY ID                                       U014\n*\nCHKLMID  TM    I#LMID+6,X'80'           DSSN SPECIFIED?            U014\n         BZ    CHKTYPE                  NOT PRESENT                U014\n         OI    STATUS,UPDVTOC           UPDATE VTOC                U014\n         MVC   ASM2LMID,=CL8' '         CLEAR THE FIELD            U014\n         LH    R1,I#LMID+4              LOAD L'(VALUE)             U014\n         L     R2,I#LMID                LOAD A(VALUE)              U014\n         BCTR  R1,0                     DECREMENT                  U014\n         EX    R1,LMIDMOVE              MOVE LMID VALUE            U014\n         B     CHKADDR                  CONTINUE                   U014\nLMIDMOVE MVC   ASM2LMID(*-*),0(R2)      << EXECUTED >>             U014\n.NOASM2B  ANOP                                                     U016\n*\n*  CHECK SPACE ALLOCATION TYPE\n*\nCHKTYPE  CLI   K#TYPE+1,0               SPECIFY ANY KEYWORD?       U010\n         BE    CHKROUND                 NO, GO CHECK FOR ROUND     U010\n         IC    R1,DS1SCALO              TYPE OF ALLOCATION         U010\n         N     R1,=A(JFCBSPAC)          CLR ALL EXCEPT SPACE TYPE  U010\n         TM    I#SECND+6,X'80'          ANY SECONDARY SPECIFIED?   U010\n         BZ    *+8                      NO, SPACE TYPE OKAY        U010\n         LA    R1,JFCBABS               YES, FORCE SIMPLE LOGIC    U010\n         SRL   R1,4                     OLD TYPE IN BITS 28-29     U010\n         AH    R1,K#TYPE                ADD NEW TYPE IN BITS 30-31 U010\n         IC    R1,TYPETBL(R1)           CORRECT ACTION STRING      U010\n         LA    R1,TYPETBL(R1)           -> ACTION STRING           U010\n         ST    R1,TYPACT                INITIALIZE LOOP            U010\nTYPLOOP  L     R1,TYPACT                -> NEXT ACTION             U010\n         XR    R0,R0                    CLEAR FOR IC               U010\n         IC    R0,0(,R1)                NEXT ACTION VALUE          U010\n         LA    R1,1(,R1)                -> NEW NEXT ACTION         U010\n         ST    R1,TYPACT                SAVE FOR LOOP              U010\n         LR    R1,R0                    ACTION TO USABLE REGISTER  U010\n         B     TYPBRTB(R1)              BRANCH TO ACTION           U010\nTYPBRTB  DC    0H'0'                    ACTION BRANCH TABLE        U010\nTYPEAZER EQU   *-TYPBRTB                PUSH ZERO ONTO STACK       U010\n         XR    R1,R1                    SET ZERO FOR PUSH          U010\n         B     TYPPUSH                  PUSH IT ONTO STACK         U010\nTYPEAVAL EQU   *-TYPBRTB                PUSH VALUE ONTO STACK      U010\n         XR    R1,R1                    CLEAR FOR ICM              U010\n         ICM   R1,B'0111',DS1SCALO+1    INPUT VALUE                U010\n         B     TYPPUSH                  PUSH IT ONTO STACK         U010\nTYPEABLK EQU   *-TYPBRTB                PUSH BLKS/TRK ONTO STACK   U010\n         L     R0,DEB+32                -> UCB                     U010\n         TRKCALC FUNCTN=TRKCAP,         COMPUTE TRACK CAPACITY     U010$\n               UCB=(R0),                UCB OF DESIRED VOLUME      U010$\n               R=1,                     NEXT RECORD NUMBER         U010$\n               K=DS1KEYL,               KEY LENGTH                 U010$\n               DD=DS1BLKL,              DATA LENGTH                U010$\n               REGSAVE=YES,             SAVE REGISTERS             U010$\n               MF=(E,TRKCLST)                                      U010\n         LTR   R1,R0                    DID IT ALL WORK?           U010\n         BZ    TYPERR                   NO, ERROR                  U010\n         B     TYPPUSH                  YES, PUSH IT ONTO STACK    U010\nTYPEATRK EQU   *-TYPBRTB                PUSH TRKS/CYL ONTO STACK   U010\n         L     R1,DEB+32                -> UCB                     U010\n         XR    R14,R14                  CLEAR FOR IC               U010\n         IC    R14,19(,R1)              DEVICE UNIT TYPE           U010\n         L     R1,CVTPTR                -> OS CVT                  U010\n         L     R1,CVTZDTAB-CVT(,R1)     -> DEVICE DESCR. TABLE     U010\n         IC    R14,0(R14,R1)            DEVICE DESCR. OFFSET       U010\n         LH    R1,2(R14,R1)             TRACKS PER CYLINDER        U010\nTYPPUSH  EQU   *                        PUSH R1 ONTO STACK         U010\n         MVC   TYPEYREG,TYPEXREG        PUSH STACK DOWN            U010\nTYPPUSH1 EQU   *                        PUT R1 ONTO STACK W/O PUSH U010\n         CLM   R1,B'1000',=X'00'        VALUE FIT IN 3 BYTES?      U010\n         BNE   TYPERR                   NO, CONVERSION ERROR       U010\n         ST    R1,TYPEXREG              STORE VALUE ON STACK       U010\n         B     TYPLOOP                  GET NEXT VALUE             U010\nTYPEAMUL EQU   *-TYPBRTB                MULTIPLY                   U010\n         L     R1,TYPEYREG              MULTIPLICAND               U010\n         M     R0,TYPEXREG              MULTIPLIER                 U010\n         B     TYPPUSH1                 PUT RESULT ON STACK        U010\nTYPEADIV EQU   *-TYPBRTB                DIVIDE                     U010\n         L     R1,TYPEYREG              DIVIDEND                   U010\n         XR    R0,R0                    CLEAR HIGH ORDER WORD      U010\n         D     R0,TYPEXREG              DIVISOR                    U010\n         LTR   R0,R0                    IS REMAINDER ZERO?         U010\n         BZ    TYPPUSH1                 YES, LEAVE RESULT ALONE    U010\n         AH    R1,=H'1'                 NO, ADJUST QUOTIENT        U010\n         B     TYPPUSH1                 PUT RESULT ON STACK        U010\nTYPEXBLK EQU   *-TYPBRTB                EXIT (SET BLK)             U010\n         LA    R1,JFCBAVR               SET AVBLK ALLOCATION TYPE  U010\n         B     TYPXIT                   SET VALUE AND EXIT         U010\nTYPEXTRK EQU   *-TYPBRTB                EXIT (SET TRK)             U010\n         LA    R1,JFCBTRK               SET TRK ALLOCATION TYPE    U010\n         B     TYPXIT                   SET VALUE AND EXIT         U010\nTYPEXCYL EQU   *-TYPBRTB                EXIT (SET CYL)             U010\n         LA    R1,JFCBCYL               SET CYL ALLOCATION TYPE    U010\nTYPXIT   IC    R0,DS1SCALO              GET ALLOCATION TYPE        U010\n         N     R0,=A(255-JFCBSPAC)      CLR SPACE TYPE             U010\n         OR    R0,R1                    SET NEW SPACE TYPE         U010\n         STC   R0,DS1SCALO              STORE NEW TYPE             U010\n         L     R1,TYPEXREG              GET NEW VALUE              U010\n         STCM  R1,B'0111',DS1SCALO+1    STORE NEW VALUE            U010\n         OI    STATUS,UPDVTOC           UPDATE VTOC                U010\nTYPEXIT  EQU   *-TYPBRTB                NO CONVERSION DONE         U010\n*\n*  CHECK FOR ROUNDED ALLOCATION\n*\nCHKROUND CLI   K#ROUND+1,0              WAS ROUND SPECIFIED?       U010\n         BE    CHKSECND                 NO, GO CHECK SECONDARY     U010\n         CLI   K#ROUND+1,1              WAS IT ROUND OR NOROUND?   U010\n         BE    ROUND01                  IT WAS ROUND               U010\n         TM    DS1SCALO,JFCROUND        NOROUND - ROUND IN DSCB?   U010\n         BZ    CHKSECND                 NO, ALL IS CORRECT         U010\n         NI    DS1SCALO,255-JFCROUND    YES, TURN IT OFF           U010\n         OI    STATUS,UPDVTOC           UPDATE VTOC                U010\n         B     CHKSECND                 GO CHECK SECONDARY         U010\nROUND01  TM    DS1SCALO,JFCROUND        ROUND - ROUND IN DSCB?     U010\n         BO    CHKSECND                 YES, ALL IS CORRECT        U010\n         OI    DS1SCALO,JFCROUND        YES, TURN IT ON            U010\n         OI    STATUS,UPDVTOC           UPDATE VTOC                U010\n*\n*  CHECK SECONDARY\n*\nCHKSECND TM    I#SECND+6,X'80'          CHECK IF SPECIFIED         U006\n         BZ    CHKDSSN                  NOT SPECIFIED              U012\n         L     R2,I#SECND               LOAD A(SECOND)             U006\n         LH    R1,I#SECND+4             LOAD L'SECOND)             U006\n         BCTR  R1,0                     DECREMENT                  U006\n         EX    R1,PACK                                             U006\n         CVB   R1,WORK                                             U006\n         CLM   R1,B'1000',=X'00'        VERIFY VALUE               U010\n         BNE   SECERR                   TOO LARGE                  U010\n         STCM  R1,B'0111',DS1SCALO+1    STORE SECONDARY SIZE       U010\n         OI    STATUS,UPDVTOC           UPDATE VTOC                U006\n         B     CHKDSSN                                             U012\n*\n*  DATE CONVERSION ROUTINE\n*\nDATE     CH    R1,=H'5'                 CHECK LENGTH OF INPUT\n         BE    DATE1                    NORMAL DATE\n         CH    R1,=H'1'                 CHECK FOR STAR\n         BNE   DATERR\n         CLI   0(R2),C'*'\n         BNE   DATERR\n         TIME  TU  ASKING FOR YESTERDAY'S DATE - FIRST GET TODAY'S DATE\n         ST    R1,WORK                  DATE (00YYDDDF) RETURNED IN R1\n         SP    WORK(4),=P'1'            CHANGE TO YESTERDAY'S DATE\n         OI    WORK+3,X'0F'             CORRECT SIGN\n         UNPK  WORK1(5),WORK+1(3)    PUT IN SAME FORMAT AS NORMAL INPUT\n         LA    R2,WORK1\nDATE1    LA    R1,1                     LOAD DECRIMENTED L'YEAR\n         EX    R1,PACK                  CONVERT YEAR TO BINARY\n         CVB   R0,WORK\n         LA    R1,2                     LOAD DECRIMENTED L'DAY\n         LA    R2,2(R2)                 INCREMENT POINTER\n         EX    R1,PACK                  CONVERT DAY TO BINARY\n         CVB   R1,WORK\n         SLL   R1,16                    COMBINE YEAR AND DAY\n         SRDL  R0,8\n         ST    R1,WORK1\n         XR    R15,R15                  INDICATE NORMAL COMPLETION\n         BR    R3                       RETURN\nDATERR   LA    R15,1                    INDICATE ERROR\n         BR    R3\n*\n*  CHECK DSSN REQUEST                                              U012\n*\nCHKDSSN  TM    I#DSSN+6,X'80'           DSSN SPECIFIED?            U012\n         BZ    CHKADDR                  NOT PRESENT                U012\n         OI    STATUS,UPDVTOC           UPDATE VTOC                U012\n         MVC   DS1DSSN,=CL6' '          CLEAR THE FIELD            U012\n         LH    R1,I#DSSN+4              LOAD L'(VALUE)             U012\n         L     R2,I#DSSN                LOAD A(VALUE)              U012\n         BCTR  R1,0                     DECREMENT                  U012\n         EX    R1,DSSNMOVE              MOVE DSSN VALUE            U012\n         B     CHKADDR                  CONTINUE                   U012\nDSSNMOVE MVC   DS1DSSN(*-*),0(R2)       << EXECUTED >>             U012\n*\n*  CHECK ADDRESS REQUEST\n*\nCHKADDR  TM    K#ADDR+1,X'01'        CHECK FOR PRESENCE OF ADDRESS PARM\n         BZ    WRTDSCB   NOT PRESENT\n         MVC   LINE(29),ADDRHDR\n         MVC   TRWORK(5),DADDR+3\n         MVC   TRWORK+5(5),TRWORK\n         TR    TRWORK(5),PAT1\n         TR    TRWORK+5(5),PAT2\n         MVC   LINE+7(10),PAT3\n         TR    LINE+7(10),TRWORK\n         MVC   LINE+20(6),SERIAL\n         MVC   LINE+29(44),DS1DSNAM\n         LA    R1,LINE                  POINT TO DATA              U001\n         LA    R0,73                    SET DATA LENGTH            U001\n         BAL   R14,PUTLINE              WRITE THE MESSAGE          U001\n*\n**  DSCB MODIFICATIONS COMPLETE - RETURN DSCB TO VTOC\n*\nWRTDSCB  TM    STATUS,UPDVTOC           TEST TO UPDATE VTOC\n         BNO   CHKPDE\n         NI    STATUS,255-UPDVTOC       RESET UPDATE BIT\n         BAL   R14,WRTFMT1              REWRITE DSCB\n*\n**  SUCCESSFUL COMPLETION OF REQUEST - RETURN NORMALLY\n*\nCHKPDE   CLI   24(R5),X'FF'             CHECK FOR END OF CHAIN\n         BE    RETURN\n         L     R5,24(R5)                A(PDE FOR NEXT DSNAME)\n         B     NEXTDSN\n*\n**  ERRORS\n*\nNOTMNT   MVC   LINE(6),SERIAL\n         MVC   LINE+6(L'NMNTMSG),NMNTMSG\n         MVC   LINE+6+L'NMNTMSG(44),DS1DSNAM\n         LA    R1,LINE                  POINT TO DATA              U001\n         LA    R0,L'NMNTMSG+50          SET DATA LENGTH            U001\n         BAL   R14,PUTLINE              WRITE THE MESSAGE          U001\n         B     CHKPDE\n         SPACE 3\nDSNOTFND MVC   LINE(6),SERIAL\n         MVC   LINE+6(L'NFNDMSG),NFNDMSG\n         MVC   LINE+6+L'NFNDMSG(44),DS1DSNAM\n         LA    R1,LINE                  POINT TO DATA              U001\n         LA    R0,L'NFNDMSG+50          SET DATA LENGTH            U001\n         BAL   R14,PUTLINE              WRITE THE MESSAGE          U001\n         B     CHKPDE\n         SPACE 3\nRDERR    MVC   LINE(6),SERIAL\n         MVC   LINE+6(L'RDMSG),RDMSG\n         MVC   TRWORK(5),DADDR+3        A(VTOC ERROR)\n         MVC   TRWORK+5(5),TRWORK\n         TR    TRWORK(5),PAT1\n         TR    TRWORK+5(5),PAT2\n         MVC   LINE+9(10),PAT3\n         TR    LINE+9(10),TRWORK\n         MVC   LINE+6+L'RDMSG(44),DS1DSNAM\n         LA    R1,LINE                  POINT TO DATA              U001\n         LA    R0,L'RDMSG+50            SET DATA LENGTH            U001\n         BAL   R14,PUTLINE              WRITE THE MESSAGE          U001\n         B     CHKPDE\n         SPACE 3\nCATERR   MVC   LINE(L'CATMSG),CATMSG\n         MVC   LINE+L'CATMSG(44),DS1DSNAM\n         LA    R1,LINE                  POINT TO DATA              U001\n         LA    R0,L'CATMSG+44           SET DATA LENGTH            U001\n         BAL   R14,PUTLINE              WRITE THE MESSAGE          U001\n         B     CHKPDE\n         SPACE 3\n*\n**  UNRECOVERABLE ERRORS - MUST TERMINATE\n*\nBLKERR   LA    R1,BLKMSG                                           U001\n         B     ERRMSG                                              U001\nLENERR   LA    R1,LENMSG                                           U001\n         B     ERRMSG                                              U001\nRECFMERR LA    R1,RFMSG                                            U001\n         B     ERRMSG                                              U001\nKEYERR   LA    R1,KEYMSG                                           U001\n         B     ERRMSG                                              U001\nDSOERR   LA    R1,DOMSG                                            U001\n         B     ERRMSG                                              U001\nPSWDERR  LA    R1,PSWDMSG                                          U001\n         B     ERRMSG                                              U001\nCDATERR  LA    R1,CDTEMSG                                          U001\n         B     ERRMSG                                              U001\nEDATERR  LA    R1,EDTEMSG                                          U001\n         B     ERRMSG                                              U001\nLDATERR  LA    R1,LDTEMSG                                          U006\n         B     ERRMSG                                              U006\nSECERR   LA    R1,SECMSG                                           U006\n         B     ERRMSG                                              U006\nNOBATCH  LA    R1,NOBATMSG                                         U002\n         B     ERRMSG                                              U002\nNOTAUTH  LA    R1,NAUTHMSG                                         U001\n         B     ERRMSG                                              U002\nNAUTHPW  LA    R1,NAUTHPWM                                         U001\n         B     ERRMSG                                              U002\nNOMODPW  LA    R1,NOMODPWM                                         U001\n         B     ERRMSG                                              U010\nTYPERR   LA    R1,TYPERMSG                                         U010\nERRMSG   A     R1,=A(DMODMSG)           -> ACTUAL MESSAGE TEXT     U010\n         BAL   R14,PUTMSG                                          U010\n         LA    R15,8\n         B     EXIT\n*\n**  RETURN\n*\nRETURN   XR    R15,R15\nEXIT     LR    R1,R13                   SAVE FOR FREEMAIN          U001\n         L     R13,4(,R13)              BACK UP SAVEAREA CHAIN     U001\n         ST    R15,16(,R13)             SET RC IN SAVEAREA         U001\n         FREEMAIN R,LV=WORKALEN,A=(1),SP=1   FREE WORK AREA        U001\n         RETURN (14,12),T               RETURN TO CALLER           U001\n*\n**  OBJECTS OF EX INSTRUCTIONS\n*\nTACLC    CLC   DS1DSNAM(0),PSCBUSER-PSCB(R15) PREFIX VS. USERID    U002\nPACK     PACK  WORK(8),0(0,R2)          UNIVERSAL PACK INSTRUCTION\n         EJECT\n*\n**  PUTLINE INTERFACE\n*\nPUTLINE  ST    R14,PLLINK               SAVE ROUTINE LINKAGE       U001\n         LTR   R15,R0                   GET MESSAGE LENGTH         U001\n         BNPR  R14                      TOO SHORT, GIVE UP         U001\n         CH    R15,=AL2(L'PLDATA)       TOO LONG?                  U001\n         BNH   PL01                     NO                         U001\n         LH    R15,=AL2(L'PLDATA)       REDUCE TO MAX              U001\nPL01     BCTR  R15,0                    REDUCE FOR 'EX'            U001\n         EX    R15,PLMVC                                           U001\n         LA    R15,5(,R15)              SET REQUIRED LENGTH        U001\n         STH   R15,PLDLEN               SET FOR PUTLINE            U001\n         LA    R0,PLDLEN                POINT FOR PUTLINE          U001\n         B     PL02                     PERFORM PUTLINE            U001\nPUTMSG   ST    R14,PLLINK               SAVE ROUTINE LINKAGE       U001\n         LR    R0,R1                    POINT TO MESSAGE           U001\nPL02     PUTLINE OUTPUT=((0),TERM,SINGLE,DATA),                    U001X\n               MF=(E,WKIOPL)                                       U001\n         L     R14,PLLINK               RESTORE LINK REGISTER      U001\n         BR    R14                      RETURN TO CALLER           U001\nPLMVC    MVC   PLDATA(0),0(R1)          MOVE MESSAGE               U001\n         EJECT\n*\n**  TEST DMOD PROGRAM PASSWORD\n*\nDMODPW   ST    R14,DPLINK                                          U002\n         LA    R1,WKDAPB                -> DAIR PARAM BLOCK        U002\n         USING DAPB08,R1                                           U002\n         XC    DAPB08(DAPB08L),DAPB08   CLEAR THE WHOLE THING      U002\n         MVC   DA08CD,=X'0008'          SET DAIR ENTRY CODE        U002\n         LA    R0,DMODPWDS              -> DATASET NAME            U002\n         ST    R0,DA08PDSN              SAVE IN PARAM BLOCK        U002\n         MVC   DA08DDN,SPACES           ANY DD NAME WILL DO        U002\n         MVC   DA08UNIT,SPACES          ANY UNIT WILL DO           U002\n         MVC   DA08SER,SPACES           SAME FOR VOLSER            U002\n         MVC   DA08MNM,SPACES           NO MEMBER NAME             U002\n         MVC   DA08PSWD,SPACES          I DON'T KNOW THE PASSWORD  U002\n         MVI   DA08DSP1,DA08SHR         LET'S ALLOCATE IT SHR      U002\n         MVI   DA08DPS2,DA08KEEP        KEEP IT WHEN DONE          U002\n         MVC   DA08ALN,SPACES           NO ATTRIBUTE LIST          U002\n         DROP  R1                                                  U002\n         LA    R1,WKDAPL                -> DAIR PARAM LIST         U002\n         CALLTSSR EP=IKJDAIR            ALLOCATE THE DATASET       U002\n         LTR   R15,R15                  DID DAIR WORK?             U002\n         BNZ   DP01                     NO, LET USER CONTINUE      U002\n         MVC   WKPWDCB(PWDCBL),PWDCB    MOVE THE DCB TO WORKAREA   U002\n         MVC   DCBDDNAM-IHADCB+WKPWDCB,DA08DDN-DAPB08+WKDAPB       U002\n         MVI   WKOCL,X'80'              INITIALIZE OPEN/CLOSE LIST U002\n         OPEN  (WKPWDCB,(UPDATE)),      SEE IF HE KNOWS THE PSWD   U002X\n               MF=(E,WKOCL)                                        U002\n         CLOSE MF=(E,WKOCL)             WE CAN CLOSE IT NOW        U002\n         SPACE 2\n         LA    R1,WKDAPB                -> DAIR PARM BLOCK         U007\n         USING DAPB2C,R1                                           U007\n         XC    DAPB2C(DAPB2CL),DAPB2C   CLEAR THE WHOLE THING      U007\n         MVI   DA2CCD+1,X'2C'           SET DAIR ENTRY CODE        U007\n         MVI   DA2CFLG+1,X'01'          MARK SPECIFIC DDNAME       U007\n         MVC   DA2CDDN,DCBDDNAM-IHADCB+WKPWDCB   GET DDNAME        U007\n         DROP  R1                                                  U007\n         LA    R1,WKDAPL                -> DAIR PARAM LIST         U007\n         CALLTSSR EP=IKJDAIR            MARK THE DDN \"NOT IN USE\"  U007\n*  IGNORE THE RETURN CODE.  THERE'S NOTHING WE CAN DO ANYWAY.\nDP01     L     R14,DPLINK                                          U002\n         BR    R14                                                 U002\n         EJECT\n*\n**  DETERMINE LOCATION OF CATALOGED DATASET\n*\nLOOKUP   ST    R14,LULINK                                          U005\n         MVC   CAMLST(CAMLSTL),CLPAT    BUILD CAMLST\n         LA    R1,DS1DSNAM              -> DATASET NAME            U005\n         ST    R1,CAMLST+4              STORE IT IN CAMLST         U005\n         LA    R1,CAMAREA               -> CAMLST WORD AREA        U005\n         ST    R1,CAMLST+12             STORE IT IN CAMLST         U005\n         LOCATE CAMLST                  GET THE VOLUME\n         LTR   R15,R15                  TEST CAM RETURN CODE       U005\n         BNZ   CATERR                   NO GOOD - ERROR            U005\n         MVC   SERIAL,CAMAREA+6         MOVE SERIAL NUMBER         U005\n         L     R14,LULINK                                          U005\n         BR    R14                                                 U005\n         EJECT\n*\n**  READ, OR WRITE FORMAT 1 DSCB\n*\nRDFMT1   LA    R0,RDD                   INDICATE READ FUNCTION     U005\n         B     START\n         SPACE 2\nWRTFMT1  LA    R0,WRTD                  INDICATE WRITE FUNCTION    U005\n         SPACE 2\nSTART    ST    R14,RWLINK                                          U005\n*\n*  MOVE PARTIALLY FILLED CONTROL BLOCKS TO DSECT\n*\n         MVC   DCB(DCBL),DCBPAT         DATA CONTROL BLOCK         U003\n         MVC   DEB(DEBL),DEBPAT         DATA EXTENT CONTROL BLOCK  U003\n         MVC   IOB(IOBL),IOBPAT         I/O BLOCK\n         MVC   CHANPROG(CCWL),CCWPAT    CHANNEL PROGRAM            U003\n*\n*  FINISH FILLING THEM IN\n*\n         LA    R1,RWECB\n         ST    R1,IOB+4\n         LA    R1,CHANPROG\n         ST    R1,IOB+16\n         STCM  R1,7,CCW2+1\n         LA    R1,CCW3\n         STCM  R1,7,CCW5+1\n         LA    R1,DCB\n         ST    R1,IOB+20\n         ST    R1,DEB+24\n         MVI   DEB+24,X'0F'\n         LA    R1,IOBSEEK+3\n         STCM  R1,7,CHANPROG+1\n         LA    R1,IECSDSL1              -> DSCB STORAGE            U005\n         STCM  R1,7,CCW4+1\n         LA    R1,44(,R1)\n         ST    R1,CCW6\n         STC   R0,CCW6                  SET SAVED CCW CODE\n         LA    R1,COUNT\n         STCM  R1,7,CCW3+1\n         LA    R1,DEB\n         ST    R1,DCBDEBAD-IHADCB+DCB   STORE A(DEB)\n         MVI   DEB+28,X'04'             INDICATE DASD\n*\n*  FIND THE UCB\n*\n          AIF   (&@@SPLVL GE 130).UCB010                           U017\nFDUCB    L     R1,CVTPTR                -> CVT                     U010\n         L     R1,CVTILK2-CVT(,R1)      -> UCB LOOKUP TABLE        U010\n*U014    L     R2,0(,R11)               -> DESIRED VOLSER          U003\n         XR    R15,R15                  CLEAR FOR ICM              U010\n         B     LOOP1                    ENTER THE SCAN LOOP        U017\nCONT     LA    R1,2(,R1)                INCREMENT TO NEXT UCB      U017\nLOOP1    ICM   R15,B'0011',0(R1)        GET A UCB ADDR             U010\n         BZ    CONT                     THIS IS A UCB 'HOLE'     P.H.H.\n         CLM   R15,B'0011',=X'FFFF'     END OF LOOKUP TABLE?       U010\n         BE    NOTMNT                   YES, VOLUME IS NOT MOUNTED U010\n         USING UCBCMSEG,R15             UCB COMMON SEGMENT         U017\n         CLI   UCBTBYT3,UCB3DACC        DIRECT ACCESS?             U017\n         BNE   CONT                     NO, GO TO NEXT UCB         U017\n          AGO   .UCB020                                            U017\n.UCB010   ANOP                                                     U017\nFDUCB    LA    R1,IOSWORK               -> IOSVSUCB WORK AREA      U017\n         ST    R1,IOSPARM               -> IOSVSUCB WORK AREA      U017\n         LA    R1,IOSDVCLS              -> IOSVSUCB DEVICE CLASS   U017\n         ST    R1,IOSPARM+4             -> IOSVSUCB DEVICE CLASS   U017\n         LA    R1,IOSAUCB               -> IOSVSUCB RETURN -> UCB  U017\n         ST    R1,IOSPARM+8             -> IOSVSUCB RETURN -> UCB  U017\n         OI    IOSPARM+8,X'80'          FLAG END OF PARMS          U017\n         XC    IOSWORK,IOSWORK          CLEAR IOSVSUCB WORK AREA   U017\n         MVI   IOSDVCLS,UCB3DACC        LIMIT SCAN TO DASD         U017\n         LA    R1,IOSPARM               -> IOSVSUCB PARAMETERS     U017\nCONT     L     R15,CVTPTR               -> CVT                     U017\n         L     R15,CVTUCBSC-CVT(,R15)   -> IOSVSUCB ROUTINE        U017\n         BALR  R14,R15                  LOCATE NEXT UCB            U017\n         LTR   R15,R15                  ANY UCB FOUND?             U017\n         BNZ   NOTMNT                   NO, END OF SCAN            U017\n         L     R15,IOSAUCB              -> UCB                     U017\n         USING UCBCMSEG,R15             UCB COMMON SEGMENT         U017\n.UCB020  ANOP                                                      U017\n         TM    UCBSTAT,UCBONLI          ONLINE?                    U017\n         BNO   CONT                     NO - IGNORE IT             U017\n         CLC   SERIAL,UCBVOLI           THIS OUR VOLUME?           U017\n         BNE   CONT                     TRY NEXT UCB\n         STCM  R15,B'0111',DEB+33       STORE A(UCB)               U017\n         MVC   TTR(3),UCBVTOC           MOVE RELATIVE VTOC ADDR    U017\n         B     CONVERT\n         DROP  R15                      UCBCMSEG                   U017\n*\n*  CONVERT TTR FOUND IN UCB TO CCHHR - A(VTOC)\n*\nCONVERT  L     R1,CVTPTR                -> CVT                     U010\n         L     R15,CVTPCNVT-CVT(,R1)    -> TTR TO MBBCCHHR RTN     U010\n         LA    R2,IOBSEEK               LOAD AREA FOR VTOC ADDRESS\n         LA    R1,DEB\n         L     R0,TTR                   CURRENT A(VTOC)\n         STM   R14,R12,12(R13)      CONVERT ROUTINE SCREWS UP SOME REG.\n         LR    R3,R13                   INCLUDING R13\n         BALR  R14,R15                  BRANCH TO CONVERT ROUTINE\n         LR    R13,R3                   RESTORE R13\n         LM    R14,R12,12(R13)          RESTORE REST OF THE REGISTERS\n         L     R1,CVTPTR                -> CVT                     U010\n         MVC   DEB+29(3),CVTXAPG+1-CVT(R1)  -> SYSTEM'S AVT        U010\n         L     R1,PSATOLD               -> CURRENT TCB             U010\n         OC    DEB+24(1),28(R1)         MOVE TCB KEY\n*\n*  DO THE I/O IN KEY ZERO SO THE SYSTEM WON'T VALIDITY CHECK THE DEB\n*\n         MODESET KEY=ZERO                                          U001\n         EXCP  IOB                      READ THE DSCB\n         MODESET KEY=NZERO                                         U001\n         WAIT  ECB=RWECB\n         CLI   RWECB,X'7F'              CHECK FOR NORMAL COMPLETION\n         BE    RWRET\n         CLI   CSW+4,X'0C'              CHECK FOR SEVERE ERROR\n         BNE   RDERR                    STATUS NOT CLEAN; ERROR\n         B     DSNOTFND                 CLEAN, DATASET NOT FOUND\n*\n*  RETURN\n*\nRWRET    XC    DADDR(8),DADDR\n         MVC   DADDR+3(5),COUNT         ADDRESS OF DSCB\n         L     R14,RWLINK                                          U005\n         BR    R14                                                 U005\n         EJECT\n         LTORG                                                     U001\n         SPACE 2\n*\n**  ERROR MESSAGES\n*\nNMNTMSG  DC    CL17' - NOT MOUNTED - '\nNFNDMSG  DC    CL24' - DATA SET NOT FOUND - '\nRDMSG    DC    CL33' -            - VTOC I/O ERROR - '\nWRTMSG   DC    CL23' - VTOC UPDATE ERROR - '\nCATMSG   DC    CL17'NOT CATALOGUED - '\nBLKMSG   MSG   'BLKSIZE ERROR'\nLENMSG   MSG   'LRECL ERROR'\nRFMSG    MSG   'RECFM ERROR'\nKEYMSG   MSG   'KEYLEN ERROR'\nDOMSG    MSG   'DSORG ERROR'\nPSWDMSG  MSG   'PASSWORD OPERAND ERROR'\nCDTEMSG  MSG   'CREATION DATE ERROR'\nEDTEMSG  MSG   'EXPIRATION DATE ERROR'\nLDTEMSG  MSG   'LAST REFERENCED DATE ERROR'                        U006\n          AIF   (&@@ASM2 EQ 0).NOASM2C                             U016\nLMDATMSG MSG   'LAST MODIFIED DATE ERROR'                          U014\nLMTIMMSG MSG   'LAST MODIFIED TIME ERROR'                          U014\n.NOASM2C  ANOP                                                     U016\nSECMSG   MSG   'SECONDARY ALLOCATION ERROR'                        U006\nNOBATMSG MSG   'DEFINITELY NOT FROM BATCH'                         U002\nNAUTHMSG MSG   'ONLY YOUR OWN DATASETS, PLEASE'                    U002\nNAUTHPWM MSG   'NOT AUTHORIZED TO CHANGE PASSWORD STATUS'          U002\nNOMODPWM MSG   'PASSWORD OPERAND NOT OPERABLE ON ''&@@DMOD'''      U016\nTYPERMSG MSG   'ALLOCATION TYPE CONVERSION ERROR'                  U010\nADDRHDR  DC    CL29'ADDR -            -        - '\nSPACES   DC    CL80' '\nPAT1     DC    C'000000000000000011111111111111112222222222222222'\n         DC    C'333333333333333344444444444444445555555555555555'\n         DC    C'666666666666666677777777777777778888888888888888'\n         DC    C'9999999999999999AAAAAAAAAAAAAAAABBBBBBBBBBBBBBBB'\n         DC    C'CCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEE'\n         DC    C'FFFFFFFFFFFFFFFF'\nPAT2     DC    C'0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF'\n         DC    C'0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF'\n         DC    C'0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF'\n         DC    C'0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF'\n         DC    C'0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF'\n         DC    C'0123456789ABCDEF'\nPAT3     DC    X'00050106020703080409'\nDMODPWDS DC    H'09',CL44'&@@DMOD'                                 U016\nPWDCB    DCB   DDNAME=TRASH,MACRF=E                                U002\nPWDCBL   EQU   *-PWDCB                                             U002\nCLPAT    CAMLST NAME,0,,0               DUMMY CAMLST\n*\n*  THE FOLLOWING IS THE PATTERN FOR THE IOB, CCW'S, DEB, DCB, ETC.\n*\n*  IOB\n         DS    0D\nIOBPAT   DC    X'42000000'\n         DC    9F'0'\nIOBL     EQU   *-IOBPAT                                            U003\nCCWPAT   CCW   IDEQ,0,X'40',5           SEARCH ID EQUAL\n         CCW   TIC,0,0,0\n         CCW   RDC,0,X'40',8            READ COUNT\n         CCW   KEYEQ,0,X'40',44         SEARCH KEY EQUAL\n         CCW   TIC,0,0,0\n         CCW   RDD,0,0,96               READ DATA\nCCWL     EQU   *-CCWPAT                                            U003\nIDEQ     EQU   X'31'   SEARCH ID EQUAL\nTIC      EQU   X'08'   TRANSFER IN CHANNEL\nRDC      EQU   X'92'   READ COUNT (MULTI TRACK)\nRDD      EQU   X'86'   READ DATA (MULTI TRACK)\nKEYEQ    EQU   X'A9'   SEARCH KEY EQUAL (MULTI TRACK)\nWRTD     EQU   X'05'   WRITE DATA\nDEBPAT   DC    4F'0'\n         DC    X'01',AL3(0)\n         DC    2F'0'\n         DC    X'04',AL3(0)\n         DC    X'C0',AL3(0)\n         DC    F'0'\n         DC    H'0',H'-1'\n         DC    H'-1',X'7FFF'\nDEBL     EQU   *-DEBPAT                                            U003\nDCBPAT   DC    6F'0'\n         DC    X'0000'\n         DC    X'2000'\n         DC    6F'0'\nDCBL     EQU   *-DCBPAT\n         EJECT\n*\n**  PARSE CONTROL LIST\n*\n         PRINT NOGEN                                               U006\n         SPACE 2\nCMDPCL   IKJPARM\n         SPACE 2\nP#DSNAME IKJPOSIT   DSNAME,LIST,PROMPT='DATA SET NAME'\n         SPACE 2\nK#BLKSZ  IKJKEYWD\n         SPACE 2\n         IKJNAME    'BLKSIZE',SUBFLD=S#BLKSZ\n         SPACE 2\nK#LRECL  IKJKEYWD\n         SPACE 2\n         IKJNAME    'LRECL',SUBFLD=S#LRECL\n         SPACE 2\nK#RECFM  IKJKEYWD\n         SPACE 2\n         IKJNAME    'RECFM',SUBFLD=S#RECFM\n         SPACE 2\nK#KEYLEN IKJKEYWD\n         SPACE 2\n         IKJNAME    'KEYLEN',SUBFLD=S#KEYLEN\n         SPACE 2\nK#DSORG  IKJKEYWD\n         SPACE 2\n         IKJNAME    'DSORG',SUBFLD=S#DSORG\n         SPACE 2\nK#CDATE  IKJKEYWD\n         SPACE 2\n         IKJNAME    'CDATE',SUBFLD=S#CDATE\n         SPACE 2\nK#EDATE  IKJKEYWD\n         SPACE 2\n         IKJNAME    'EDATE',SUBFLD=S#EDATE\n         SPACE 2\nK#LDATE  IKJKEYWD\n         SPACE 2\n         IKJNAME    'LDATE',SUBFLD=S#LDATE                         U006\n         SPACE 2\n          AIF   (&@@ASM2 EQ 0).NOASM2D                             U016\n*  THE FOLLOWING STUPID MACRO DOES NOT ALLOW COMMENTS:             U014\nK#LMDATE IKJKEYWD\n         SPACE 2\n         IKJNAME    'LMDATE',SUBFLD=S#LMDATE                       U014\n         SPACE 2\n*  THE FOLLOWING STUPID MACRO DOES NOT ALLOW COMMENTS:             U014\nK#LMTIME IKJKEYWD\n         SPACE 2\n         IKJNAME    'LMTIME',SUBFLD=S#LMTIME                       U014\n         SPACE 2\n*  THE FOLLOWING STUPID MACRO DOES NOT ALLOW COMMENTS:             U014\nK#LMID   IKJKEYWD\n         SPACE 2\n         IKJNAME    'LMID',SUBFLD=S#LMID                           U014\n         SPACE 2\n.NOASM2D  ANOP                                                     U016\nK#SCNDRY IKJKEYWD\n         SPACE 2\n         IKJNAME    'SECONDARY',SUBFLD=S#SECND                     U006\n         SPACE 2\nK#PSWD   IKJKEYWD\n         SPACE 2\n         IKJNAME    'PASSWORD',SUBFLD=S#PSWD\n         SPACE 2\nK#RACF   IKJKEYWD\n         SPACE 2\n         IKJNAME    'RACF'                                         U008\n         SPACE 2\n         IKJNAME    'NORACF'                                       U008\n         SPACE 2\n*  THE FOLLOWING STUPID MACRO DOES NOT ALLOW COMMENTS:             U015\nK#CHANGE IKJKEYWD\n         SPACE 2\n         IKJNAME    'CHANGED'                                      U015\n         SPACE 2\n         IKJNAME    'NOCHANGED'                                    U015\n         SPACE 2\n*  THE FOLLOWING STUPID MACRO DOES NOT ALLOW COMMENTS:             U015\nK#CHKPT  IKJKEYWD\n         SPACE 2\n         IKJNAME    'CHKPT'                                        U015\n         SPACE 2\n         IKJNAME    'NOCHKPT'                                      U015\n         SPACE 2\nK#TYPE   IKJKEYWD ,                                                U010\n         SPACE 2\n         IKJNAME    'AVBLOCKS'   ,ALIAS=('BLOCKS')                 U011\nTYPEBLK  EQU   1                                                   U010\n         SPACE 2\n         IKJNAME    'TRACKS',ALIAS='TRKS'                          U010\nTYPETRK  EQU   2                                                   U010\n         SPACE 2\n         IKJNAME    'CYLINDERS',ALIAS='CYLS'                       U010\nTYPECYL  EQU   3                                                   U010\n         SPACE 2\nK#ROUND  IKJKEYWD ,                                                U010\n         SPACE 2\n         IKJNAME    'ROUND'                                        U010\n         SPACE 2\n         IKJNAME    'NOROUND'                                      U010\n         SPACE 2\nK#VOL    IKJKEYWD\n         SPACE 2\n         IKJNAME    'VOLUME',SUBFLD=S#VOL\n         SPACE 2\n*  THE FOLLOWING STUPID MACRO DOES NOT ALLOW COMMENTS:             U012\nK#DSSN   IKJKEYWD\n         SPACE 2\n         IKJNAME    'DSSN',SUBFLD=S#DSSN                           U012\n         SPACE 2\nK#ADDR   IKJKEYWD\n         SPACE 2\n         IKJNAME    'ADDRESS'\n         EJECT\n*\n*  SUBFIELDS\n*\n         SPACE 2\nS#BLKSZ  IKJSUBF\n         SPACE 2\nI#BLKLEN IKJIDENT   'NUMBER',MAXLNTH=5,FIRST=NUMERIC,OTHER=NUMERIC,    $\n               PROMPT='BLOCK SIZE'\n         SPACE 2\nS#LRECL  IKJSUBF\n         SPACE 2\nI#RECLEN IKJIDENT   'NUMBER',MAXLNTH=5,FIRST=NUMERIC,OTHER=NUMERIC,    $\n               PROMPT='LOGICAL RECORD LENGTH'\n         SPACE 2\nS#RECFM  IKJSUBF\n         SPACE 2\nI#RECFM  IKJIDENT   'SYMBOLS',MAXLNTH=4,PROMPT='RECFM+',               $\n               HELP='(F,V OR U) (B) (S) (A OR M) ONLY'\n         SPACE 2\nS#KEYLEN IKJSUBF\n         SPACE 2\nI#KEYLEN IKJIDENT   'NUMBER',MAXLNTH=3,FIRST=NUMERIC,OTHER=NUMERIC,    $\n               PROMPT='KEY LENGTH'\n         SPACE 2\nS#DSORG  IKJSUBF\n         SPACE 2\nI#DSORG  IKJIDENT   'SYMBOLS',MAXLNTH=3,PROMPT='DSORG+',               $\n               HELP='IS,ISU,PO,POU,PS,PSU,DA OR DAU ONLY'\n         SPACE 2\nS#CDATE  IKJSUBF\n         SPACE 2\nI#CDATE  IKJIDENT   'NUMBER',ASTERISK,MAXLNTH=5,FIRST=NUMERIC,         $\n               OTHER=NUMERIC,PROMPT='CREATION DATE+',                  $\n               HELP=('5 DIGIT JULIAN DATE OR *+',                      $\n               '* FOR YESTERDAY''S DATE')\n         SPACE 2\nS#EDATE  IKJSUBF\n         SPACE 2\nI#EDATE  IKJIDENT   'NUMBER',ASTERISK,MAXLNTH=5,FIRST=NUMERIC,         $\n               OTHER=NUMERIC,PROMPT='EXPIRATION DATE+',                $\n               HELP=('5 DIGIT JULIAN DATE OR *+',                      $\n               '* FOR YESTERDAY''S DATE')\n         SPACE 2\nS#LDATE  IKJSUBF\n         SPACE 2\nI#LDATE  IKJIDENT   'NUMBER',ASTERISK,MAXLNTH=5,FIRST=NUMERIC,     U006$\n               OTHER=NUMERIC,PROMPT='LAST REFERENCED DATE+',       U006$\n               HELP=('5 DIGIT JULIAN DATE OR *+',                  U006$\n               '* FOR YESTERDAY''S DATE')                          U006\n         SPACE 2\n          AIF   (&@@ASM2 EQ 0).NOASM2E                             U016\n*  THE FOLLOWING STUPID MACRO DOES NOT ALLOW COMMENTS:             U014\nS#LMDATE IKJSUBF\n         SPACE 2\nI#LMDATE IKJIDENT   'NUMBER',ASTERISK,MAXLNTH=5,FIRST=NUMERIC,     U014$\n               OTHER=NUMERIC,PROMPT='LAST MODIFIED DATE+',         U014$\n               HELP=('5 DIGIT JULIAN DATE OR *+',                  U014$\n               '* FOR YESTERDAY''S DATE')                          U014\n         SPACE 2\n*  THE FOLLOWING STUPID MACRO DOES NOT ALLOW COMMENTS:             U014\nS#LMTIME IKJSUBF\n         SPACE 2\nI#LMTIME IKJIDENT   'TIME',MAXLNTH=4,FIRST=NUMERIC,OTHER=NUMERIC,  U014$\n               PROMPT='LAST MODIFIED TIME'                         U014\n         SPACE 2\n*  THE FOLLOWING STUPID MACRO DOES NOT ALLOW COMMENTS:             U014\nS#LMID   IKJSUBF\n         SPACE 2\nI#LMID   IKJIDENT   'MOD ID',MAXLNTH=8,FIRST=ALPHANUM,OTHER=ALPHANUM,  $\n               PROMPT='LAST-MODIFIED-BY ID'                        U014\n.NOASM2E  ANOP                                                     U018\n         SPACE 2\nS#SECND  IKJSUBF\n         SPACE 2\nI#SECND  IKJIDENT   'NUMBER',MAXLNTH=8,FIRST=NUMERIC,OTHER=NUMERIC,    $\n               PROMPT='SECONDARY ALLOCATION SIZE'                  U010\n         SPACE 2\nS#PSWD   IKJSUBF\n         SPACE 2\nI#PSWD   IKJIDENT   'SYMBOLS',MAXLNTH=1,                               $\n               PROMPT='PASSWORD SET CHARACTER+',                       $\n               HELP='''R'' FOR READ/WRITE PROTECTION, ''W'' FOR WRITE O$\n               NLY PROTECTION OR ''N'' FOR NO PROTECTION'\n         SPACE 2\nS#VOL    IKJSUBF\n         SPACE 2\nI#VOL    IKJIDENT   'IDENTIFIER',MAXLNTH=6,FIRST=ALPHANUM,             $\n               OTHER=ALPHANUM,PROMPT='VOLUME SERIAL NUMBER'\n         SPACE 2\n*  THE FOLLOWING STUPID MACRO DOES NOT ALLOW COMMENTS:             U012\nS#DSSN   IKJSUBF\n         SPACE 2\nI#DSSN   IKJIDENT   'IDENTIFIER',MAXLNTH=6,FIRST=ALPHANUM,         U012$\n               OTHER=ALPHANUM,PROMPT='DATASET''S FIRST VOLSER'     U012\n         SPACE 2\n         IKJENDP\n         EJECT\n*\n**  COMMAND PROCESSOR PARAMETER LIST\n*\n         IKJCPPL\n*\n**  PROTECTED STEP CONTROL BLOCK\n*\n         IKJPSCB\n*\n**  DYNAMIC ALLOCATION (DAIR) PARAMETER LIST\n*\n         IKJDAPL\nDAPLLEN  EQU   *-DAPL                                              U002\n*\n**  DYNAMIC ALLOCATION (DAIR) PARAMETER BLOCKS\n*\n         IKJDAP08\nDAPB08L  EQU   *-DAPB08                                            U002\n*\n         IKJDAP2C\nDAPB2CL  EQU   *-DAPB2C                                            U007\n*\n**  PARSE PARAMETER LIST\n*\n         IKJPPL ,                                                  U001\nPPLLEN   EQU   *-PPL                                               U001\n*\n**  PUTLINE I/O PARAMETER LIST\n*\n         IKJIOPL ,                                                 U001\nIOPLLEN  EQU   *-IOPL                                              U001\n*\n**  DATA CONTROL BLOCK\n*\n         DCBD\n*                                        *\n*** THE FOLLOWING DSECT MAPS SUBPOOL 1 ***\n*                                        *\n         SPACE 3\n         PRINT GEN                                                 U016\nWORKAREA DSECT                                                     U001\n         DS    18F                                                 U001\nLULINK   DS    A                                                   U005\nRWLINK   DS    A                                                   U005\nCAMLST   CAMLST NAME,CAMLST,,CAMLST\nCAMLSTL  EQU   *-CAMLST\nCAMAREA  DS    265X\n         DS    0D\n*\nIOB      DC    X'42000000'\n         DC    A(RWECB)\nCSW      DC    2F'0'\n         DC    A(CHANPROG)\n         DC    A(DCB)\n         DC    2F'0'\nIOBSEEK  DC    2F'0'\n*\nCOUNT    DS    XL8\n*\nCHANPROG DS    D\nCCW2     DS    D                                                   U005\nCCW3     DS    D                                                   U005\nCCW4     DS    D                                                   U005\nCCW5     DS    D                                                   U005\nCCW6     DS    D                                                   U005\n*\nDEB      DC    4F'0'\n         DC    X'01',AL3(0)   INDICATE 1 EXTENT\n         DC    F'0'\n         DC    X'0F',AL3(DCB)   INSERT PROTECT KEY LATER\n         DC    X'04',AL3(0)   DASD / A(I/O APPENDAGE TABLE)\n         DC    X'C0',AL3(0)   FILE MASK / A(UCB)\n         DC    F'0'   BIN NO. / CYL START ADDR\n         DC    H'0',H'-1'   TRK START ADDR / CYL END ADDR\n         DC    H'-1',X'7FFF'   TRK END ADDR / TRKS IN THIS EXTENT\n*\n*\nRWECB    DC    F'0'\n*\nTTR      DC    F'0'\nDCB      DC    6F'0'\n         DC    X'0000'\n         DC    X'2000'   DIRECT DATA SET (FOR SVC 57 ONLY)\n         DC    4F'0'\n         DC    A(DEB)\n         DC    F'0'\nPSCBADDR DS    A                                                   U002\nDPLINK   DS    A                                                   U002\nECB      DS    F\nANSWER   DS    F\nADDR     DS    3A\nTYPACT   DS    F                                                   U010\nTYPEXREG DS    F                                                   U010\nTYPEYREG DS    F                                                   U010\nTRKCLST  TRKCALC MF=L                                              U010\nSTATUS   DS    X\nUPDVTOC  EQU   X'80'                    REWRITE THE VTOC           U002\nLINE     DS    130C\nTRWORK   DS    10C\n         CNOP  2,4\nSERIAL   DS    CL6                      VOLUME SERIAL NUMBER\nDADDR    DS    CL8                      DIRECT ACCESS ADDRESS\nWORK     DS    D\nWORK1    DS    D\nWKPPL    DS    0F                                                  U001\n         ORG   *+PPLLEN                                            U001\nPLLINK   DS    A                                                   U001\nPLPARM   PUTLINE MF=L                   PUTLINE PARAM LIST STORAGE U001\nPLDLEN   DS    0F,2H                    PUTLINE DATA STORAGE       U001\nPLDATA   DS    CL80                     PUTLINE DATA STORAGE       U001\nWKIOPL   DS    0F                       PUTLINE IOPL STORAGE       U001\n         ORG   *+IOPLLEN                                           U001\nWKDAPL   DS    0F                       DAIR PARAM LIST STORAGE    U002\n         ORG   *+DAPLLEN                                           U002\nWKDAPB   DS    0F                       DAIR PARAM BLOCK STORAGE   U002\n         ORG   WKDAPB+DAPB08L                                      U002\nWKPWDCB  DS    0F                       PASSWORD DCB STORAGE       U002\n         ORG   *+PWDCBL                                            U002\nIOSPARM  DC    A(IOSWORK,IOSDVCLS,IOSAUCB+X'80000000')             U017\nIOSAUCB  DC    A(0)                     IOSVSUCB RETURNED UCB ADDR U017\nIOSDVCLS DC    AL1(UCB3DACC)            IOSVSUCB DASD DEVICE CLASS U017\nIOSWORK  DC    XL100'00'                IOSVSUCB SERVICE WORK AREA U017\nWKOCL    OPEN  (0),MF=L                 OPEN/CLOSE LIST STORAGE    U002\n*\n*  MAP FORMAT 1 DSCB\n*\n         IECSDSL1 1\n          AIF   (&@@ASM2 EQ 0).NOASM2F                             U016\n         ORG   DS1DSSN                  FMT1+45                    U014\nASM2USE  DS    FL3                      ASM2 - USE COUNT           U014\nASM2LMDT DS    XL3    YDD               ASM2 - LAST MODIFY DATE    U014\n         ORG   DS1SYSCD                 FMT1+62                    U014\nASM2LMID DS    CL8                      ASM2 - LAST MODIFY ID      U014\n          AIF   (&@@ASM2 LT 310).ASM2X1                            U019\n         DS    CL1                      ASM2 - wasted for stupidityU019\nASM2LMTM DS    XL2    HHMM              ASM2 - last modify time    U019\n          AGO   .ASM2X2                                            U019\n.ASM2X1   ANOP                                                     U019\n         ORG   IECSDSL1+80              +2 INTO 4 BYTES RESERVED   U014\nASM2LMTM DS    XL2    HHMM              ASM2 - LAST MODIFY TIME    U014\n.ASM2X2   ANOP                                                     U019\n         ORG    ,                                                  U016\n.NOASM2F  ANOP                                                     U016\nWORKALEN EQU   *-WORKAREA                                          U001\n         PRINT NOGEN                                               U016\n*\n*  MAP COMMUNICATIONS VECTOR TABLE\n*\n         CVT  DSECT=YES                                            U010\n*\n*  PREFIXED STORAGE AREA (LOW MEMORY)\n*\n         IHAPSA ,                                                  U010\n*\n*  MAP JOB FILE CONTROL BLOCK\n*\n         IEFJFCBN ,                                                U010\n*\n*  MAP UCB FIELDS                                                  U017\n*\n         IEFUCBOB ,                                                U017\n         SPACE 3\n*\n*        ALLOCATION TYPE CONVERSION TABLES\n*\nDMOD     CSECT                                                     U010\nTYPETBL  DC    16X'00'                                             U010\n         ORG   TYPETBL+JFCBABS/16+TYPEBLK   ABSTR->BLK             U010\n         DC    AL1(TYPETAB)                                        U010\n         ORG   TYPETBL+JFCBABS/16+TYPETRK   ABSTR->TRK             U010\n         DC    AL1(TYPETAT)                                        U010\n         ORG   TYPETBL+JFCBABS/16+TYPECYL   ABSTR->CYL             U010\n         DC    AL1(TYPETAC)                                        U010\n         ORG   TYPETBL+JFCBAVR/16+TYPEBLK   BLK->BLK               U010\n         DC    AL1(TYPETEX)                                        U010\n         ORG   TYPETBL+JFCBAVR/16+TYPETRK   BLK->TRK               U010\n         DC    AL1(TYPETBT)                                        U010\n         ORG   TYPETBL+JFCBAVR/16+TYPECYL   BLK->CYL               U010\n         DC    AL1(TYPETBC)                                        U010\n         ORG   TYPETBL+JFCBTRK/16+TYPEBLK   TRK->BLK               U010\n         DC    AL1(TYPETTB)                                        U010\n         ORG   TYPETBL+JFCBTRK/16+TYPETRK   TRK->TRK               U010\n         DC    AL1(TYPETEX)                                        U010\n         ORG   TYPETBL+JFCBTRK/16+TYPECYL   TRK->CYL               U010\n         DC    AL1(TYPETTC)                                        U010\n         ORG   TYPETBL+JFCBCYL/16+TYPEBLK   CYL->BLK               U010\n         DC    AL1(TYPETCB)                                        U010\n         ORG   TYPETBL+JFCBCYL/16+TYPETRK   CYL->TRK               U010\n         DC    AL1(TYPETCT)                                        U010\n         ORG   TYPETBL+JFCBCYL/16+TYPECYL   CYL->CYL               U010\n         DC    AL1(TYPETEX)                                        U010\n         ORG   ,                        END OF TYPE TABLE          U010\nTYPETEX  EQU   *-TYPETBL                                           U010\n         DC    AL1(TYPEXIT)                                        U010\nTYPETAB  EQU   *-TYPETBL                ABSTR->BLK                 U010\n         DC    AL1(TYPEAZER)             PUSH ZERO                 U010\n         DC    AL1(TYPEXBLK)             EXIT (SET BLK)            U010\nTYPETAT  EQU   *-TYPETBL                ABSTR->TRK                 U010\n         DC    AL1(TYPEAZER)             PUSH ZERO                 U010\n         DC    AL1(TYPEXTRK)             EXIT (SET TRK)            U010\nTYPETAC  EQU   *-TYPETBL                ABSTR->CTL                 U010\n         DC    AL1(TYPEAZER)             PUSH ZERO                 U010\n         DC    AL1(TYPEXCYL)             EXIT (SET CYL)            U010\nTYPETBT  EQU   *-TYPETBL                BLK->TRK                   U010\n         DC    AL1(TYPEAVAL)             PUSH BLKS                 U010\n         DC    AL1(TYPEABLK)             PUSH BLKS/TRK             U010\n         DC    AL1(TYPEADIV)             DIVIDE = TRKS             U010\n         DC    AL1(TYPEXTRK)             EXIT (SET TRK)            U010\nTYPETBC  EQU   *-TYPETBL                BLK->CYL                   U010\n         DC    AL1(TYPEAVAL)             PUSH BLKS                 U010\n         DC    AL1(TYPEABLK)             PUSH BLKS/TRK             U010\n         DC    AL1(TYPEADIV)             DIVIDE = TRKS             U010\n         DC    AL1(TYPEATRK)             PUSH TRKS/CYL             U010\n         DC    AL1(TYPEADIV)             DIVIDE = CYLS             U010\n         DC    AL1(TYPEXCYL)             EXIT (SET CYL)            U010\nTYPETTB  EQU   *-TYPETBL                TRK->BLK                   U010\n         DC    AL1(TYPEAVAL)             PUSH TRKS                 U010\n         DC    AL1(TYPEABLK)             PUSH BLKS/TRK             U010\n         DC    AL1(TYPEAMUL)             MULTIPLY = BLKS           U010\n         DC    AL1(TYPEXBLK)             EXIT (SET BLK)            U010\nTYPETTC  EQU   *-TYPETBL                TRK->CYL                   U010\n         DC    AL1(TYPEAVAL)             PUSH TRKS                 U010\n         DC    AL1(TYPEATRK)             PUSH TRKS/CYL             U010\n         DC    AL1(TYPEADIV)             DIVIDE = CYLS             U010\n         DC    AL1(TYPEXCYL)             EXIT (SET CYL)            U010\nTYPETCB  EQU   *-TYPETBL                CYL->BLK                   U010\n         DC    AL1(TYPEAVAL)             PUSH CYLS                 U010\n         DC    AL1(TYPEATRK)             PUSH TRKS/CYL             U010\n         DC    AL1(TYPEAMUL)             MULTIPLY = TRKS           U010\n         DC    AL1(TYPEABLK)             PUSH BLKS/TRK             U010\n         DC    AL1(TYPEAMUL)             MULTIPLY = BLKS           U010\n         DC    AL1(TYPEXBLK)             EXIT (SET BLK)            U010\nTYPETCT  EQU   *-TYPETBL                CYL->TRK                   U010\n         DC    AL1(TYPEAVAL)             PUSH CYLS                 U010\n         DC    AL1(TYPEATRK)             PUSH TRKS/CYL             U010\n         DC    AL1(TYPEAMUL)             MULTIPLY = TRKS           U010\n         DC    AL1(TYPEXTRK)             EXIT (SET TRK)            U010\n         SPACE 3\nR0       EQU   0                                                   U001\nR1       EQU   1                                                   U001\nR2       EQU   2                                                   U001\nR3       EQU   3                                                   U001\nR4       EQU   4                                                   U001\nR5       EQU   5                                                   U001\nR6       EQU   6                                                   U001\nR7       EQU   7                                                   U001\nR8       EQU   8                                                   U001\nR9       EQU   9                                                   U001\nR10      EQU   10                                                  U001\nR11      EQU   11                                                  U001\nR12      EQU   12                                                  U001\nBASE     EQU   R12                                                 U001\nR13      EQU   13                                                  U001\nR14      EQU   14                                                  U001\nR15      EQU   15                                                  U001\n         SPACE 3\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DPAGE": {"ttr": 6662, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x08\\x00\\x00\\x00\\x80\\x14?\\x00\\x92\\t\\x0f G\\x02L\\x00\\xcc\\x01\\xda\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.08", "flags": 0, "createdate": "1980-05-22T00:00:00", "modifydate": "1992-03-30T20:47:00", "lines": 588, "newlines": 204, "modlines": 474, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1988 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nDPAGE  TITLE '-----  DISPLAY NAMES OF ACTIVE PAGE/SWAP DATASETS  -----'\n*---------------------------------------------------------------------*\n*                                                                     *\n*   PROGRAM NAME:  DPAGE                                              *\n*                                                                     *\n*   AUTHOR:        LEONARD D. WOREN                                   *\n*                                                                     *\n*   DATE:          APRIL 10, 1980                                     *\n*                                                                     *\n*   PURPOSE:       DISPLAY INFORMATION ON CURRENTLY ACTIVE PAGE AND   *\n*                  SWAP DATASETS.                                     *\n*                                                                     *\n*   Updates:                                                          *\n*      24Sep88  LDW   - Update for XA 2.2                             *\n*                     - Use macros instead of offsets                 *\n*                     - Change some things to lower case              *\n*      12/01/82 LDW   - ADD PFK6 (ADR) TO DISPLAY CB ADDRESSES        *\n*      05/06/82 LDW   - MAKE IT WORK ON EMS'S MOD 5                   *\n*                     - FIX NON-FULLSCR SUPPORT                       *\n*      04/21/81 LDW   - CHANGE ENTR TO OSENTER                        *\n*                     - ADD 'ATTR' COMMAND TO DISPLAY DS ATTRIBUTES   *\n*                     - MAKE PROGRAM RE-ENTRANT                       *\n*      11/05/80 LDW   - EXPAND PAGE DS TYPE FROM 1 TO 4 CHARS         *\n*                     - ACCEPT \"END\" TO LEAVE                         *\n*                     - NEW INTERFACE TO DCMS TERMIO                  *\n*      05/22/80 LDW   CONVERT TO DCMS (FULLSCREEN)                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\nDPAGE    OSENTER  EXIT=LEAVE,RC=0,GETMAIN=(WORKLEN,WORKD),AMODE=31\nREPEAT   MVC   LASTCMD,BLANKS\n         MVC   ERRMSG,BLANKS\n         MVI   FLAG,0                   INIT FLAG\n         SPACE 2\n         GTSIZE  ,                      GET THE TERMINAL LINE SIZE\n         SPACE 1\n         CH    R1,=H'80'                80 OR MORE COLUMNS WIDE?\n         BL    LOOP                     NO - SKIP\n         CH    R0,=H'24'                24 OR MORE LINES?\n         BL    LOOP                     NO - SKIP\n         OI    FLAG,F3270               YES - SET 3270 FLAG\n         MVC   IOCBNAME(8),=CL8'DPAGE'\n         SPACE 1\n         LOAD  EPLOC==CL8'TERMIO'       LOAD DCMS TERMINAL I/O ROUTINE\n         ST    R0,IOCBATIO              SAVE ADDRESS\n         SPACE 1\n         STFSMODE  ON,INITIAL=YES\n         SPACE 2\nLOOP     LA    R14,HEADER               -> START\n         LH    R15,SCR1                 LENGTH OF SCREEN BUFFER\n         L     R1,=X'40000000'          GET PAD CHAR & LEN=0\n         MVCL  R14,R0                   CLEAR THE SCREEN BUFFER\n         MVC   HEADER(40),=C'Type   Size  Inuse  Avail  Error  Dsname'\n         TM    FLAG,FADDR               DISPLAY ADDRESSES?\n         BNO   *+10                     NO - SKIP\n         MVC   HEADER+73(6),=C'@PARTE'\n         TM    FLAG,FATTR               DISPLAY ATTRIBUTES?\n         BNO   *+10                     NO - SKIP\n         MVC   HEADER+34(41),=C'Volume adr type   PGWT  PCTRQTIM  PARER$\n               QTM'\n         MVC   REPLY,LASTCMD            MOVE IN LAST CMD (ONLY IF BAD)\n         MVC   MODEMSG+10(20),ERRMSG    AND ERROR MSG IF ANY\n         MVC   LASTCMD,BLANKS           CLEAR OUT THE BAD COMMAND\n         MVC   ERRMSG,BLANKS            AND THE ERROR MSG\n         LA    R10,LINEONE-79           -> FIRST SCREEN LINE (SORT OF)\n         LA    R9,20+1                  MAX LINES (SORT OF)\n         USING LINE,R10\n         TM    FLAG,F3270               FULLSCREEN MODE?\n         BO    NO$HDR                   YES - SKIP\n         LA    R10,REPLY+79             -> LINE BUFFER TO USE\n         TPUTX HEADER,79                PUT OUT THE HEADER\n         TPUTX '-------------------------------------------------------$\n               ------------------------'\n         SPACE 3\nNO$HDR   L     R1,16                    -> CVT\n         L     R1,X'2C0'(,R1)           -> ASMVT\n         L     R2,8(,R1)                -> PART\n         USNGX PART,R2\n         L     R3,PARTDSNL  24          -> DSN LIST IN CSA\n         L     R4,PARTSIZE   4          NUMBER OF PARTE'S IN PART\n         L     R5,PARTEUSE   8          NUMBER OF PARTE'S INUSE\n         LA    R6,PARTENTS  80          -> FIRST PARTE\n         NI    FLAG,255-FSWAP           NOT SWAP DATASETS YET\n         BAL   R11,SPEW\n         SPACE 3\n         L     R1,16                    -> CVT\n         L     R1,X'2C0'(,R1)           -> ASMVT\n         L     R2,4(,R1)                -> SART\n*  Should have a SART dsect, but we'll use PART for now...\n         L     R3,24(,R2)               -> DSN LIST IN CSA\n         L     R4,4(,R2)                NUMBER OF SARTE'S IN SART\n         L     R5,8(,R2)                NUMBER OF SARTE'S INUSE\n         LA    R6,80(,R2)               -> FIRST SARTE\n         OI    FLAG,FSWAP               SWAP DATASETS FROM HERE ON\n         BAL   R11,SPEW\n         DROPX R2                       PART\n         TM    FLAG,F3270               FULLSCREEN MODE?\n         BO    WRITE                    YES - DO DCMS WRITE\n         SPACE 2\nTGET     TPUTX 'DPAGE:',ASIS            PROMPT HIM\n         SPACE 1\n*        TGET  REPLY,L'REPLY            LET HIM SAY SOMETHING\n         LA    R1,REPLY\n         LA    R0,L'REPLY\n         O     R1,=X'80000000'          SET TGET FLAG\n         SVC   93                       TGET\n         SPACE 1\n         OC    REPLY,BLANKS             FOLD IT\n         B     ENTER                    DECODE COMMAND\n         EJECT\nWRITE    TM    FLAG,FAUTO               AUTO UPDATE?\n         BO    WRT$AUTO                 YES - GO DO IT\n         MVI   IOCBFLGD,0               CLEAR FLAGS\n         SPACE 1\n         TRMIO IOCB,FORMAT=SCR1,IMAGE=HEADER\n         SPACE 2\nPFKEY    PFKEY ATTN=ATTN,DEF=BADKEY,ENTER=ENTER,K1=CMD$HELP,K2=UPDATE, $\n               K3=QUIT,K4=FLIP$ACT,K5=FLIP$ATR,K6=FLIP$ADR,            $\n               K9=REPEAT,K12=QUIT\n         SPACE 2\nENTER    CLI   REPLY,C' '               ANY REPLY?\n         BE    LOOP                     NO\n         CLI   REPLY,C'E'               WANT OUT?\n         BE    QUIT\n         CLC   =C'AL',REPLY             ALL PAGE DATASETS?\n         BE    CMD$ALL\n         CLC   =C'AC',REPLY             ONLY ACTIVE PAGE DATASETS?\n         BE    CMD$ACT\n         CLC   =C'AT',REPLY             DISPLAY ATTRIBUTES?\n         BE    CMD$ATTR\n         CLC   =C'DS',REPLY             DISPLAY DSNAMES?\n         BE    CMD$DSN\n         CLC   =C'AD',REPLY             DISPLAY CTL BLOCK ADDRESSES?\n         BE    CMD$ADDR\n         CLI   REPLY,C'H'               NEED HELP?\n         BE    CMD$HELP\n         CLI   REPLY,C'?'               NEED HELP?\n         BE    CMD$HELP\n         MVC   LASTCMD,REPLY\n         MVC   ERRMSG(19),=C'* INVALID COMMAND *'\n         B     LOOP\n         SPACE 3\nBADKEY   MVC   ERRMSG+1(17),=C'* UNKNOWN PFKEY *'\n         B     LOOP\n         SPACE 3\nATTN     TM    FLAG,FAUTO               IN AUTO UPDATE MODE?\n         BNO   QUIT                     NO - GET OUT OF HERE\n         SPACE 2\nUPDATE   XI    FLAG,FAUTO               FLIP FLAG\n         B     LOOP                     AND DO IT AGAIN\n         SPACE 3\nFLIP$ACT XI    FLAG,FACTIVE             FLIP FLAG\n         B     LOOP                     AND DO IT AGAIN\n         SPACE 3\nFLIP$ATR XI    FLAG,FATTR               FLIP FLAG\n         NI    FLAG,255-FADDR           FORCE OFF THIS FLAG\n         B     LOOP                     AND DO IT AGAIN\n         SPACE 3\nFLIP$ADR XI    FLAG,FADDR               FLIP FLAG\n         NI    FLAG,255-FATTR           FORCE OFF THIS FLAG\n         B     LOOP                     AND DO IT AGAIN\n         SPACE 3\nCMD$ALL  NI    FLAG,255-FACTIVE         RESET FLAG\n         B     LOOP                     AND DO IT AGAIN\n         SPACE 3\nCMD$ACT  OI    FLAG,FACTIVE             SET FLAG\n         B     LOOP                     AND DO IT AGAIN\n         SPACE 3\nCMD$ATTR OI    FLAG,FATTR               SET FLAG\n         NI    FLAG,255-FADDR           RESET OTHER FLAG\n         B     LOOP                     AND DO IT AGAIN\n         SPACE 3\nCMD$DSN  NI    FLAG,255-FATTR-FADDR     RESET FLAGS\n         B     LOOP                     AND DO IT AGAIN\n         SPACE 3\nCMD$ADDR OI    FLAG,FADDR               SET FLAG\n         NI    FLAG,255-FATTR           FORCE OFF THIS FLAG\n         B     LOOP                     AND DO IT AGAIN\n         SPACE 3\nCMD$HELP TM    FLAG,F3270               FULLSCREEN?\n         BNO   HELPTPUT                 NO - DO IT LINE BY SLOW LINE\n         MVC   HELPHDR,HELPIMG          MOVE IN HELP HEADER LINE\n         MVC   REPLYH,BLANKS            CLEAR REPLY\n         MVC   MODEMSGX,BLANKS\n         LA    R14,HELPONE              -> START\n         LA    R15,HELPLEN              LENGTH OF SCREEN BUFFER\n         LA    R0,HELPLNE1              -> SCREEN IMAGE\n         LR    R1,R15                   GET PAD CHAR & LENGTH\n         MVCL  R14,R0                   COPY THE HELP SCREEN IMAGE\n         MVI   IOCBFLGD,0               CLEAR FLAGS\n         OI    IOCBFLGC,IOCBCTIM        DO NOT TIMESTAMP HELP SCREEN\n         SPACE 1\n         TRMIO IOCB,FORMAT=HELPSCR,IMAGE=HELPHDR\n         SPACE 2\n         NI    IOCBFLGC,255-IOCBCTIM    RESET:  TIMESTAMP NEXT SCREEN\n         MVC   REPLY,REPLYH             MOVE REPLY\n         B     PFKEY                    DECODE PF KEYS\n         SPACE 2\nHELPTPUT TPUTX HELPIMG,79               PUT OUT HELP HEADER\n         SPACE 1\n         LA    R10,HELPLNE1             -> FIRST HELP LINE\n         LA    R9,HELPLEN/79            NUMBER OF HELP LINES\n         SPACE 1\nHELPLOOP TPUTX (R10),79\n         LA    R10,79(,R10)             -> NEXT HELP LINE\n         BCT   R9,HELPLOOP              DO ALL LINES\n         B     TGET                     LET HIM ASK FOR SOMETHING\n         SPACE 3\nWRT$AUTO OI    IOCBFLGD,IOCBDYON+IOCBDFRC\n         SPACE 1\n         TRMIO IOCB,WRITE,FORMAT=SCR1,IMAGE=HEADER\n         SPACE 2\n         PFKEY ATTN=ATTN,DEF=LOOP\n         SPACE 3\nQUIT     STFSMODE  OFF\n         SPACE 1\n         B     LEAVE\n         EJECT\n         USNGX PARTENT,R6\nSPEW     TM    FLAG,FACTIVE             ONLY DISPLAY ACTIVE DATASETS?\n         BNO   SPEW$ALL                 NO - SKIP\n         SH    R5,=H'1'                 DECREMENT IN-USE COUNT\n         BM    SPEW$NXT                 SKIP IF NO MORE IN USE\n         TM    PAREFLG1,X'80'           NOT IN USE?\n         BO    SPEW$NXT                 YES - SKIP\n         SPACE 1\nSPEW$ALL TM    FLAG,F3270               FULLSCREEN MODE?\n         BNO   SPEW$GO                  NO - SKIP THIS STUFF\n         LA    R10,79(,R10)             -> NEXT SCREEN LINE\n         BCT   R9,SPEW$GOF              CONTINUE IF NOT FULL\n         MVC   HEADER+50(28),=C'** TOO MANY PAGE DATASETS **'\n         B     WRITE\n         SPACE 2\nSPEW$GO  MVC   LINE(79),BLANKS          CLEAR PRINT LINE\nSPEW$GOF TM    FLAG,FATTR               WANT ATTRIBUTES?\n         BNO   SPEW$DSN                 NO - GIVE DSNAME\n         TM    PAREFLG1,X'80'           PARTE/SARTE IN USE?\n         BO    SPEW$NUM                 NO - SKIP THIS SECTION OF CODE\n         CLC   BLANKS(44),0(R3)         ANY DSNAME HERE?\n         BE    SPEW$NUM                 NO - SKIP THIS SECTION OF CODE\n         L     R15,PAREUCBP             -> UCB FOR THIS PAGE DATASET\n         MVC   VOLUME,28(R15)           MOVE IN VOLSER\n         MVC   UNIT,13(R15)             AND UNIT ADDRESS\n         L     R15,PAREPCTP             -> PCT OR SDCTE\n         TM    FLAG,FSWAP               SWAP DATASET?\n         BO    SPEWSWAP                 YES - GO FORMAT SDCTE\n*                                       NO - FORMAT PCT\n         MVC   UNITTYPE,4(R15)          MOVE DEVICE TYPE\n         HEX   PAGEWGHT,(28,R15),LEN=2  PAGING WEIGHT FOR THIS DEV TYPE\n         HEX   MINTIME,(32,R15),LEN=4   MIN SLOT READ OR WRITE TIME\n         HEX   CORRVAL,PARERQTM,LEN=4   CORRECTION VALUE FOR SRV BURST\n         B     SPEW$NUM                 SKIP OTHER MVC\n         SPACE 2\nSPEWSWAP MVC   UNITTYPE,0(R15)          MOVE DEVICE TYPE\n         B     SPEW$NUM                 SKIP OTHER MVC\n         SPACE 2\nSPEW$DSN MVC   DSN,0(R3)                COPY THE DATASET NAME\n         TM    FLAG,FADDR               WANT PARTE/SARTE ADDRESS?\n         BNO   SPEW$NUM                 NO - SKIP\n         MVI   ADDR-1,C' '              BLANK OUT IN CASE LONG DSN\n         ST    R6,DWD                   SET DOWN ADDRESS FOR CONVERT\n         HEX   ADDR,DWD,LEN=4\n         SPACE 2\nSPEW$NUM TM    PAREFLG1,X'40'           ASM DETECTED ERRORS?\n         BNO   *+10                     NO - SKIP\n         MVC   LINE+79-5-6(5),=C'*BAD*' YES - SAY SO\n         MVC   TYPE,=C'SWAP '           ASSUME SWAP\n         TM    FLAG,FSWAP               SWAP?\n         BO    GOT$TYPE                 YES - SKIP\n         MVC   TYPE,=C'PLPA '           ASSUME PLPA\n         TM    PARETYPE,X'80'           IS IT?\n         BO    GOT$TYPE                 YES\n         MVC   TYPE,=C'Commn'           ASSUME COMMON\n         TM    PARETYPE,X'40'           IS IT?\n         BO    GOT$TYPE                 YES\n         MVC   TYPE,=C'Duplx'           ASSUME DUPLEX\n         TM    PARETYPE,X'20'           IS IT?\n         BO    GOT$TYPE                 YES\n         MVC   TYPE,=C'Local'           ASSUME LOCAL\n         TM    PARETYPE,X'10'           IS IT?\n         BO    GOT$TYPE                 YES\n         MVC   TYPE,=C'  ?  '           HUH?\n         SPACE 2\nGOT$TYPE L     R0,PARESZSL              GET SIZE\n         CVD   R0,DWD                   CONVERT\n         OI    DWD+7,X'0F'              REMOVE SIGN\n         MVC   SIZE(5),=X'2020202120'   MOVE IN MASK\n         ED    SIZE-1(6),DWD+5\n         SPACE 1\n         S     R0,PARESLTA              COMPUTE INUSE=SIZE-AVAIL\n         CVD   R0,DWD                   CONVERT\n         OI    DWD+7,X'0F'              REMOVE SIGN\n         MVC   INUSE(5),=X'2020202120'  MOVE IN MASK\n         ED    INUSE-1(6),DWD+5\n         SPACE 1\n         L     R0,PARESLTA              GET AVAIL\n         CVD   R0,DWD                   CONVERT\n         OI    DWD+7,X'0F'              REMOVE SIGN\n         MVC   AVAIL(5),=X'2020202120'  MOVE IN MASK\n         ED    AVAIL-1(6),DWD+5\n         SPACE 1\n         L     R0,PARERRCT              GET ERROR COUNT\n         CVD   R0,DWD                   CONVERT\n         OI    DWD+7,X'0F'              REMOVE SIGN\n         MVC   ERROR(5),=X'2020202120'  MOVE IN MASK\n         ED    ERROR-1(6),DWD+5\n         SPACE 2\n         TM    FLAG,F3270               FULLSCREEN MODE?\n         BO    SPEW$NXT                 YES - SKIP\n         TPUTX LINE,79                  NO - PRINT OUT THE LINE NOW\n         SPACE 2\nSPEW$NXT LA    R3,44(,R3)               -> NEXT DSN\n         LA    R6,PARTELEN(,R6)         -> NEXT PARTE\n         TM    FLAG,FSWAP               IS THIS REALLY A SWAP?\n         BNO   *+8                      NO - SKIP\n         SH    R6,=Y(64-48)             ADJUST TO SIZE OF SARTE\n         BCT   R4,SPEW                  LOOP\n         BR    R11                      RETURN TO CALLER\n         SPACE 2\n         DROPX R6                       PARTENT\n         SPACE 3\n         LTORG\n         SPACE 3\nBLANKS   DC    CL79' '\nHEXTAB   HEXTAB  DUAL=NO\n         SPACE 2\n         SPACE 2\nHELPIMG  DC    CL79'                           << D P A G E  --  HELP >$\n               >'\n         DC    CL79'                                                   $\n                                           '\nHELPLNE1 DC    CL79'    PF KEY DEFINITIONS               COMMANDS      $\n                                           '\n         DC    CL79'                                                   $\n                                           '\n         DC    CL79'_________________________         ACT - SELECT ACTI$\n               VE DATASETS ONLY            '\n         DC    CL79'|PF1 /13|PF2 /14|PF3 /15|         ALL - DISPLAY ALL$\n                PARTES/SARTES              '\n         DC    CL79'| HELP  | AUTO  |  END  |         ATR - DISPLAY DS $\n               ATTRIBUTES                  '\n         DC    CL79'|_______________________|         DSN - DISPLAY DSN$\n               AMES                        '\n         DC    CL79'|PF4 /16|PF5 /17|PF6 /18|         ADR - DISPLAY PAR$\n               TE/SARTE ADDRESSES          '\n         DC    CL79'|ACT/ALL|ATR/DSN|ADR    |         END - EXIT FROM P$\n               ROGRAM                      '\n         DC    CL79'|_______________________|                          $\n                                           '\n         DC    CL79'|PF7 /19|PF8 /20|PF9 /21|                          $\n                                           '\n         DC    CL79'|       |       |RESTART|                          $\n                                           '\n         DC    CL79'|_______________________|                          $\n                                           '\n         DC    CL79'|PF10/22|PF11/23|PF12/24|                          $\n                                           '\n         DC    CL79'|       |       |  END  |                          $\n                                           '\n         DC    CL79'|_______________________|                          $\n                                           '\nHELPLEN  EQU   *-HELPLNE1               LENGTH OF HELP DATA\n         SPACE 2\nLINE     DSECT\nTYPE     DS    CL5,CL2\nSIZE     DS    CL5,CL2\nINUSE    DS    CL5,CL2\nAVAIL    DS    CL5,C\nERROR    DS    CL5,CL2\nDSN      DS    CL44,C\n         ORG   LINE+79-8\nADDR     DS    CL8\n         ORG   DSN\nVOLUME   DS    CL6,C\nUNIT     DS    CL3,C\nUNITTYPE DS    CL6,C\nPAGEWGHT DS    CL4,CL2\nMINTIME  DS    CL8,CL2\nCORRVAL  DS    CL8,C\n         ORG   ,\n         SPACE 3\nDPAGE    CSECT                          RESUME\n         EJECT\n         PRINT NOGEN\n         SPACE 1\nSCR1     DCMSFMT\nHEADER   DCMSFLD  79\nREPLY    DCMSFLD  10,ALPHA,INTEN=HI,CURSOR=YES\nMODEMSG  DCMSFLD  68,INTEN=HI\nLINEONE  DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFEND\n         SPACE 3\nHELPSCR  DCMSFMT\nHELPHDR  DCMSFLD  79\nREPLYH   DCMSFLD  10,ALPHA,INTEN=HI,CURSOR=YES\nMODEMSGX DCMSFLD  68,INTEN=HI\nHELPONE  DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFLD  79,INTEN=LO\n         DCMSFEND\n         SPACE 3\nWORKD    DSECT                          RESUME\nDWD      DS    D\nLASTCMD  DS    CL10\nERRMSG   DS    CL20\n         SPACE 1\nFLAG     DS    B\nF3270    EQU   X'80'                    TERMINAL IS A 3270\nFAUTO    EQU   X'40'                    IN AUTO UPDATE MODE\nFSWAP    EQU   X'20'                    NOW FORMATTING SWAP DATASETS\nFACTIVE  EQU   X'10'                    ONLY DISPLAY ACTIVE DATASETS\nFATTR    EQU   X'08'                    DISPLAY DS ATTRIBUTES\nFADDR    EQU   X'04'                    DISPLAY PARTE/SARTE ADDRESSES\n         SPACE 2\nIOCB     IOCB\n         EJECT\n         DSGEN SCR1                     SCREEN BUFFER\n         SPACE 2\n         DSGEN HELPSCR                  HELP SCREEN BUFFER\n         SPACE 2\nWORKLEN  EQU   *-WORKD\n*        ILRPART\nPART     DSECT\nPARTIDEN DC    CL4'PART'\nPARTSIZE DS    F    +4\nPARTEUSE DS    F    +8\nPARTCIR0 DS    A    +C\nPARTCIR1 DS    A    +10\nPARTCIR2 DS    A    +14\nPARTTPAR DS    0A   +18\nPARTDSNL DS    A    +18\nPARTPCTQ DS    A    +1C\nPARTLCNT DS    H    +20\nPARTFLG1 DS    B    +22\n         DS    X    +23\nPARTNPCF DS    A    +24\nPARTNPCL DS    A    +28\nPARTTIME DS    F    +2C\n         DS    CL32 +30\nPARTENTS EQU   *\n         SPACE 2\nPARTENT  DSECT\nPAREPARE DS    A    +0\nPAREBRST DS    AL1  +4\nPAREIORN DS    AL1  +5\n         DS    XL2  +6\nPARETYPE DS    B    +8\nPAREFLG1 DS    B    +9\nPARENN   DS    H    +A\nPAREDEIB DS    A    +C\nPARESZSL DS    F    +10\nPARESLTA DS    F    +14\nPARERRCT DS    F    +18\nPAREIORB DS    A    +1C\nPAREPATP DS    A    +20\nPAREPCTP DS    A    +24\nPAREEDBP DS    A    +28\nPAREUCBP DS    A    +2C\n*  Following are unique for the PARTE\nPARETIOR DS    A    +30\nPARETIME DS    F    +34\nPARERQTM DS    F    +38\nPARELSLT DS    H    +3C\nPAREREQS DS    H    +3E\n         DS    XL32 +40                 maybe something new for 2.2???\nPARTELEN EQU   *-PARTENT\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DSAT": {"ttr": 6918, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x03\\x0e\\x00\\x00\\x00\\x816/\\x00\\x91 \\x1f\\x01&\\x07]\\x05\\x13\\x03v\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "03.14", "flags": 0, "createdate": "1981-12-28T00:00:00", "modifydate": "1991-07-20T01:26:00", "lines": 1885, "newlines": 1299, "modlines": 886, "user": "LDW"}, "text": "DSAT     TITLE 'DISPLAY DATA SET ATTRIBUTES'\n***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1988 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.                                     *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1, with DFP 3.1),  *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc-oberon!LDW (last resort)                           *\n*                                                                     *\n*          (213) 743-5391 (direct -- 11 am to 7 pm Pacific time)      *\n*          (213) 743-2957 (msgs)                                      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, or 714.  Sorry.                                       *\n*                                                                     *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*                              D S A T                                *\n*                                                                     *\n*             TSO COMMAND TO DISPLAY DATASET ATTRIBUTES               *\n*                                                                     *\n*      THIS COMMAND LISTS THE FOLLOWING ATTRIBUTES OF ANY DATA SET:   *\n*                                                                     *\n*        TYP          -  TYPE OF SPACE ALLOCATION (CYL/TRK/REC)       *\n*        ALLOC        -  # OF CYL.TRK ALLOCATED TO DATA SET           *\n*        USED         -  # OF CYL.TRK USED                            *\n*        XT           -  # OF EXTENTS USED                            *\n*        SEC          -  SECONDARY ALLOCATION SIZE                    *\n*        RF           -  RECORD FORMAT (RECFM)                        *\n*        BLOCK        -  BLOCKSIZE                                    *\n*        LRECL        -  LOGICAL RECORD LENGTH                        *\n*        ORG          -  DATASET ORGANIZATION (DSORG)                 *\n*        C/DATE       -  CREATION DATA OF DATA SET                    *\n*        L/USED       -  LAST OPEN DATE OF DATA SET                   *\n*        VOLUME       -  VOLUME CONTAINING DATA SET                   *\n*        DEVICE       -  DEVICE TYPE                                  *\n*        P            -  PROTECTION FLAG (W = WRITE PROTECTED,        *\n*                                         R = READ  PROTECTED,        *\n*                                         A = RACF  PROTECTED)        *\n*                                                                     *\n*       DSAT    'DSNAME' VOLSER(DISK VOLUME SERIAL)  EXTENTS          *\n*               LIST/NOLIST  SAVE/NOSAVE  HEADER/NOHEADER             *\n*                                                                     *\n*       DSAT ALWAYS SETS THE COMPLETION CODE (&LASTCC IN A CLIST) AS  *\n*       FOLLOWS:                                                      *\n*                                                                     *\n*       LASTCC     REASON                                             *\n*                                                                     *\n*          0       DATASET FOUND                                      *\n*          1       DATASET FOUND BUT COULD NOT 'SAVE'; NOT IN CLIST   *\n*          2       DATASET FOUND BUT COULD NOT 'SAVE'; NAME NOT FOUND *\n*          4       CVOL NOT MOUNTED                                   *\n*          8       DSNAME NOT FOUND                                   *\n*         12       INDEX NAME SPECIFIED                               *\n*         16       DATA SET FOUND AT LOWER LEVEL                      *\n*         20       DSNAME HAS SYNTAX ERROR                            *\n*         24       PERMANENT I/O ERROR                                *\n*         28       TTR OUTSIDE OF SYSCTLG                             *\n*         32       INVALID LOCATE WORK AREA POINTER                   *\n*         36       VOLUME NOT MOUNTED                                 *\n*         40       DSNAME NOT ON VOLUME SPECIFIED                     *\n*         44       INVALID OBTAIN WORK AREA POINTER                   *\n*         48       CCHH NOT IN VTOC                                   *\n*         52       VOLUME SPECIFIED WAS NOT ONLINE                    *\n*         56       PARSE ERROR                                        *\n*         60       DATA SET NOT ON DIRECT ACCESS DEVICE               *\n*                  (MESSAGE WILL BE 'SAVED' IF REQUESTED)             *\n*                                                                     *\n*           (RETURN CODES 04-32 ARE FROM LOCATE, 36-52 ARE OBTAIN'S   *\n*            RC + 32)                                                 *\n*                                                                     *\n*                                                                     *\n*       REQUIRED    -  'DSNAME'                                       *\n*                                                                     *\n*       ALIAS       -  AT                                             *\n*                                                                     *\n*  OPERANDS  -                                                        *\n*                                                                     *\n*       'DSNAME'  NAME OF THE DATA SET FOR WHICH THE LIST OF          *\n*                 ATTRIBUTES IS DESIRED.                              *\n*                                                                     *\n*       VOLSER    DISK VOLUME SERIAL NUMBER WHERE THE DATASET RESIDES.*\n*                 THIS PARAMETER IS OPTIONAL; IF NOT SPECIFIED THE    *\n*                 SYSTEM CATALOG IS SEARCHED.                         *\n*                                                                     *\n*       FULL      A SECOND DATA LINE WILL BE PRINTED CONTAINING THE   *\n*       (ALL)     FOLLOWING INFORMATION:                              *\n*                                                                     *\n*                 DSNAME     -  FULL DATASET NAME                     *\n*                 E/DATE     -  EXPIRATION DATE                       *\n*                 KEY        -  KEYLENGTH                             *\n*                 RKP        -  RELATIVE KEY POSITION                 *\n*                 M          -  MODIFICATION INDICATOR                *\n*                 P          -  PASSWORD FLAG IF RACF PROTECTED       *\n*                                                                     *\n*       EXTENTS   ADDITIONAL DATA LINES WILL BE PRINTED GIVING THE    *\n*                 FOLLOWING INFORMATION FOR EACH EXTENT OF THE DS:    *\n*                                                                     *\n*                 EXTENT     -  EXTENT SEQUENCE NUMBER (FROM 0)       *\n*                 START/CCHH -  STARTING CCHH OF EXTENT (HEX)         *\n*                 S/TRK      -  STARTING TRACK OF EXTENT (DECIMAL)    *\n*                 END/CCHH   -  ENDING CCHH OF EXTENT (HEX)           *\n*                 E/TRK      -  ENDING TRACK OF EXTENT (DECIMAL)      *\n*                 LENGTH     -  LENGTH OF OF EXTENT (DECIMAL)         *\n*                                                                     *\n*       LIST      THESE KEYWORDS ENABLE AND DISABLE THE LISTING OF    *\n*       NOLIST    ALL MESSAGES. ('LIST' IS THE DEFAULT) IF 'NOLIST'   *\n*                 IS SPECIFIED YOU WILL SEE NO OUTPUT ON YOUR CRT,    *\n*                 HOWEVER THE VARIABLE '&LASTCC' WILL BE SET.         *\n*                 ('NOLIST' ALSO DISABLES THE PRINTING OF ALL ERROR   *\n*                 MESSAGES!)                                          *\n*                                                                     *\n*       SAVE      THESE KEYWORDS CONTROL THE 'CLIST INTERFACE'. IF    *\n*       NOSAVE    'SAVE' IS SPECIFIED WHEN DSAT IS RUN INSIDE A CLIST *\n*                 ALL THE DATA THAT DSAT GATHERS WILL BE SAVED INTO   *\n*                 THE CLIST VARIABLE &SYSDVAL. THIS COULD THEN BE     *\n*                 PARSED INTO SEPARATE VARIABLE NAMES USING THE       *\n*                 'READDVAL' FUNCTION.   ALSO, EACH DATA ITEM IS      *\n*                 PLACED IN A UNIQUELY NAMED CLIST VARIABLE, IF IT    *\n*                 EXISTS.                                             *\n*                                                                     *\n*       JULIAN    ALL DATES ARE TO BE DISPLAYED IN \"JULIAN\" FORMAT    *\n*                 INSTEAD OF STANDARD MM/DD/YY.                       *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Updates:                                                           *\n*    19Jul91 U025 LDW  Display some TMS fields for tape datasets      *\n*                      Change SET macro to use new SET subroutine     *\n*                      Change some DC's to literals (not flagged)     *\n*    09Dec90 U024 LDW  Support ASM2 3.1.0 (last mod time was moved    *\n*                         to not conflict with new SMS fields)        *\n*    20Sep89 U023 LDW  Add extent type indicator to each extent       *\n*    11Sep89 U022 LDW  Add TRKS keyword                               *\n*    16Jan88 U021 LDW  Add TRBAL & OPTCD fields to FULL display       *\n*    25Nov87 U020 SDM  Do UCB scan with MVS/SP service 'IOSVSUCB'     *\n*    06Jun87 U019 LDW  Fix minor bug (garbage byte at end of line2)   *\n*    25May87 U018 LDW  Add &DSATLMDATE, &DSATLMTIME                   *\n*    09Feb87 U017 LDW  SHOW ASM2 FIELDS ON \"FULL\" DISPLAY             *\n*                      ELIMINATE USE OF \"LC\" MACRO                    *\n*                      MOVE DSNAME TO SEPARATE LINE (FIRST LINE) IF   *\n*                         \"FULL\" DISPLAY BEING DONE                   *\n*    22May85 U016 LDW  SET &DSATVOLUME, EVEN IF 'VOLUME NOT           *\n*                         MOUNTED' (THIS APPLIES TO 'MIGRAT')         *\n*                      FIX BUG IN WARNING MESSAGES                    *\n*    18Oct84 U015 LDW  HANDLE DATASETS WITH MORE THAN 16 EXTENTS      *\n*                         (DF/EF ALLOWS 125 EXTENTS, VIA MULTIPLE     *\n*                         FMT3 DSCB'S)                                *\n*                      USE OSENTER                                    *\n*                      SOME OTHER MISC CLEANUP                        *\n*    15May84 U014 LDW  DISPLAY DSORG OF 'EF' IF DF/EF DATASET,        *\n*                         AND 'BCS' IF AN ICF CATALOG                 *\n*    08Aug83 U013 LDW  ALWAYS RETURN TRUE DSNAME TO CLIST (IF GIVEN   *\n*                         DSN IS AN ALIAS OR GDG NAME, AND THE DSN    *\n*                         DOES NOT ACTUALLY EXIST ON THE VOLUME,      *\n*                         IT'S STILL USEFUL TO GET THE TRUE DSNAME)   *\n*                      ADD DEVICETYPES 3375, 3380                     *\n*    28Dec81 U012 LDW  ADD CLIST INTERFACE (LIFTED FROM SCE'S VERS)   *\n*                      UPDATE MESSAGES, AND CHANGE TO LOWER CASE      *\n*                      HANDLE GDG DSNAMES (KLUDGE AROUND PARSE)       *\n*                      MISC CLEANUP                                   *\n*                      FIX OBSCURE BUG AFTER \"PARSE COULDN'T\" MSG     *\n*                      ADD \"JDATE\" KEYWORD TO DISPLAY JULIAN DATES    *\n*    20Mar81 U011 LDW  DISPLAY EXTENTS IN DECIMAL RELATIVE TRACK      *\n*                      FIX FOR EXPDT > 99.365                         *\n*    14Mar81 U010 LDW  ADD \"EXTENTS\" KEYWORD                          *\n*                      FIX FOR NON DIRECT ACCESS DEV TYPE DISPLAY     *\n*    25Jan81 U009 LDW  SHOW DSORG=VS; FIX DSORG=..U CHECK             *\n*    26Sep80 U008 LDW  FLIP RACF & PSWD FIELDS IF RACF PROTECTED      *\n*    15Aug80 U007 SDM  CHANGE SEC OVERFLOW FROM '+++' TO 'BIG'        *\n*    10Jun80 U006 LDW  USE DS1SCALO AS 3 BYTE FIELD, NOT 2 BYTES      *\n*                      SHOW OVERFLOW IN SECONDARY FIELD               *\n*                      FIX BASE REGISTER PROBLEM DUE TO PGM GROWTH    *\n*    20May80 U005 LDW  ADD KEYWORD \"FULL\" TO DISPLY SOME MORE ATTRS   *\n*    07Feb80 U004 LDW  ADD KEYWORD \"VOLUME\"                           *\n*         80 U003 LDW  DISPLAY SECONDARY SPACE ALLOCATION             *\n*         80 U002 LDW  SHOW LAST REF'D DATE (CHNG TO USE IECSDSL1)    *\n*         77 U001 LDW  ADD KEYWORD \"NOHEAD\" AND DSN-LIST CAPABILITY   *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*     REGISTER USAGE                                                  *\n*   R0  LINKAGE REGISTER         R8   INTERNAL LINKAGE REGISTER       *\n*   R1                           R9   SECOND PROGRAM BASE REGISTER    *\n*   R2                           R10  BASE REGISTER IOPL              *\n*   R3                           R11  BASE REGISTER FOR PPL           *\n*   R4                           R12  PROGRAM BASE REGISTER           *\n*   R5                           R13  WORK AREA BASE REGISTER         *\n*   R6                           R14  LINKAGE REGISTER                *\n*   R7                           R15  LINKAGE REGISTER AND RC         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\n         MACRO                                                     U012\n.* &NFS  SET   &VARNAME,&VALUE,&VALLEN,&NOCLIST=                   U012\n&NFS     SET   &VARNAME,&VALUE,&VALLEN                             U025\n         LCLA  &A\n.*U025   LCLC  &NOPE\n.*&NOPE  SETC  'IHB&SYSNDX'\n.*U025   AIF   ('&NOCLIST' EQ '').OK\n.*&NOPE  SETC  '&NOCLIST'\n.* .OK   ANOP\n.* &NFS  TM    FLAG1,F1SAVE             IN \"SAVE\" MODE?\n.*U025   BNO   &NOPE                    NO - SKIP\n&A       SETA  K'&VARNAME               GET LENGTH OF VARIABLE NAME\n&NFS     MVC   NAME(2),=H'&A'           SET LENGTH OF VARIABLE NAME\n         MVC   NAME+2(&A),=C'&VARNAME'  SET NAME OF VARIABLE\n         MVC   VALUE(2),=Y(&VALLEN)     SET LENGTH OF VALUE        U017\n         MVC   VALUE+2(&VALLEN),&VALUE  SET VALUE\n.*U025   LA    1,SETPARM                -> PARM LIST\n.******* LINK  EP=CLISTSET\n.*U025   L     15,CLISTSET              -> CLIST INTERFACE SUBROUTINE\n.*U025   BALR  14,15                    CALL IT\n         BAL   14,SET                   invoke CLISTSET helper     U025\n.*U025   AIF   ('&NOCLIST' NE '').MEXIT\n.*&NOPE  EQU   *\n.MEXIT   SPACE 2\n         MEND\n         SPACE 2\n         COPY  @GLOBALS                 Installation definitions   U020\n         EJECT\nDSAT     OSENTER  BASE2=R9,GETMAIN=(WORKLEN,WORKD),PARMREG=R2,     U015$\n               EXIT=LEAVE,RCLOC=RC                                 U015\nLINK     EQU   R8                                                  U015\n         MVI   BLANKS,C' '              INIT...                    U006\n         MVC   BLANKS+1(L'BLANKS-1),BLANKS  ...                    U006\n         XC    RC,RC                                               U012\n*---------------------------------------------------------------------*\n*                                                                     *\n*                      CONTROL BLOCK SETUP                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n*--------SET UP BASE REGISTERS FOR CONTROL BLOCKS\n         USING CPPL,R2\n         LA    R11,PPLAREA\n         USING PPL,R11\n         LA    R10,IOPLAREA\n         USING IOPL,R10\n*--------INITIALIZE PPL AND IOPL\n         L     R1,CPPLUPT               USER PROFILE TABLE ADDRESS\n         ST    R1,IOPLUPT\n         ST    R1,PPLUPT\n         L     R1,CPPLECT               ENVIRONMENT CONTROL TABLE ADDR\n         ST    R1,IOPLECT\n         ST    R1,ECTADDR                                          U012\n         ST    R1,PPLECT\n         L     R1,ECB                   EVENT CONTROL BLOCK ADDRESS\n         ST    R1,IOPLECB\n         ST    R1,PPLECB\n         LA    R1,PUTLNMFL              PUTLINE PARAMETER BLOCK ADDRESS\n         ST    R1,IOPLIOPB\n         L     R1,=V(PCL)               PARAMETER CONTROL LIST ADDRESS\n         ST    R1,PPLPCL\n         LA    R1,PARS#ANS              ANSWER LIST (PDL) ADDRESS\n         ST    R1,PPLANS\n         L     R1,CPPLCBUF              COMMAND BUFFER ADDRESS\n         ST    R1,PPLCBUF\n         LA    R0,VALUE                                            U012\n         ST    R0,VALADDR                                          U012\n         LA    R0,NAME                                             U012\n         ST    R0,NAMADDR                                          U012\n         DROP  R2                       DONE WITH CPPL             U006\n         LA    R1,DS1FMTID              -> FMT1 DSCB WORK AREA     U015\n         ST    R1,CAM#SRCH+12           STORE ADDR IN CAMLST       U015\n*---------------------------------------------------------------------*\n*                                                                     *\n*                      PROCESS COMMAND OPERANDS                       *\n*                                                                     *\n*---------------------------------------------------------------------*\n*--------PARSE THE COMMAND\n         LA    R1,PPLAREA\n         LINK  EP=IKJPARS\n         LTR   R15,R15\n         BNZ   ERRPARS\n         L     R11,PARS#ANS\n         USING PDL,R11\n         LA    R1,DSN                   INIT                       U001\n         ST    R1,DSNPTR                PTR TO FIRST PDL           U001\n         CLI   24(R1),X'FF'             IS THIS THE LAST ONE?      U005\n         BE    *+8                      YES - SKIP                 U005\n         OI    FLAG1,F1DSLIST           NO - SET LIST FLAG         U005\n*--------CHECK FOR \"NOHEADER\" OPTION                               U001\n         CLI   P#NOHEAD+1,1             NOHEADER GIVEN?            U001\n         BNE   *+8                      NO - SKIP                  U001\n         OI    FLAG1,F1NOHEAD           SET FLAG                   U001\n*--------CHECK FOR \"FULL\" OPTION                                   U005\n         CLI   P#FULL+1,1               FULL (OR ALL) GIVEN?       U005\n         BNE   *+8                      NO - SKIP                  U005\n         OI    FLAG2,F2FULL             SET FLAG                   U005\n*--------CHECK FOR \"EXTENTS\" OPTION                                U010\n         CLI   P#EXTENT+1,1             EXTENTS GIVEN?             U010\n         BNE   *+8                      NO - SKIP                  U010\n         OI    FLAG2,F2EXTNTS           SET FLAG                   U010\n*--------CHECK FOR \"NOLIST\" OPTION                                 U012\n         CLI   P#NOLIST+1,1             NOLIST GIVEN?              U012\n         BNE   *+8                      NO - SKIP                  U012\n         OI    FLAG1,F1NOLIST           SET FLAG                   U012\n*--------CHECK FOR \"SAVE\" OPTION                                   U012\n         CLI   P#SAVE+1,1               SAVE GIVEN?                U012\n         BNE   NO$SAVE                  NO - SKIP                  U012\n         OI    FLAG1,F1SAVE             SET FLAG                   U012\n         LOAD  EPLOC==CL8'CLISTSET'     LOAD CLIST INTERFACE       U012\n         ST    R0,CLISTSET              SAVE ADDRESS               U012\n*--------CHECK FOR \"JDATE\" OPTION                                  U012\nNO$SAVE  CLI   P#JDATE+1,0              JDATE GIVEN?               U012\n         BE    *+8                      NO - SKIP                  U012\n         OI    FLAG1,F1JULDAT           SET FLAG                   U012\n*--------CHECK FOR \"TRKS\" OPTION                                   U022\n         CLI   P#TRKS+1,1               TRKS GIVEN?                U022\n         BNE   *+8                      NO - SKIP                  U022\n         OI    FLAG1,F1TRKS             SET FLAG                   U022\n*--------PROCESS \"VOLUME\" KEYWORD                                  U004\n         CLI   P#VOLUME+1,1             GIVEN?                     U004\n         BNE   NO$VOL                   NO - SKIP                  U012\n         MVC   VOLUME,BLANKS            PREPARE THE FIELD          U012\n         L     R14,I#VOLUME             -> PDL                     U004\n         LH    R15,I#VOLUME+4           LENGTH                     U004\n         BCTR  R15,0                    -1 FOR EX                  U004\n         MVC   VOLUME(*-*),0(R14)       << EXECUTED >>             U004\n         EX    R15,*-6                  SAVE THE VOLSER            U004\n         OI    FLAG1,F1USEVOL           REMEMBER THAT HE TOLD US   U004\n         SPACE 2                                                   U012\n*--------SET CLIST VARIABLES WITH COLUMN HEADERS IF NECESSARY      U012\nNO$VOL   SET   DSATHEADER1,HEADER1+4,80                            U012\n         TM    FLAG2,F2FULL             WANT SECOND DATA LINE?     U012\n         BNO   NEXT$DSN                 NO - DON'T SEND HDR FOR IT U012\n         SET   DSATHEADER2,HEADER2+4,80                            U012\n         SET   DSATHEADER3,HEADER3+4,OL@LEN3                       U017\n*--------PROCESS NEXT DSNAME\nNEXT$DSN MVC   DSNAME(44),BLANKS        BLANK THE DSNAME BUFFER    U001\n         LA    R2,DSNAME                LOAD DESTINATION ADDRESS\n         L     R3,DSN                   LOAD ADDRESS OF INPUT\n         L     R14,DSNPTR               -> PDL FOR DSN             U012\n         MVC   DSNPTR,24(R14)           SAVE PTR TO NEXT PDL       U012\n         LH    R1,4(,R14)               LOAD LENGTH                U012\n         L     R3,0(,R14)               -> DSN                     U012\n         BCTR  R1,0                     REDUCE LENGTH BY 1\n         EX    R1,MOVENAME              MVC 0(*-*,R2),0(R3)\n         LA    R2,1(R1,R2)              -> END OF DATASET NAME     U012\n         LH    R1,12(,R14)              GET LENGTH OF MEMBER NAME  U012\n         TM    14(R14),X'80'            MEMBER NAME PRESENT?       U012\n         BNO   NO$MBR                   NO - SKIP                  U012\n         L     R3,8(,R14)               -> MEMBER NAME             U012\n         CLI   0(R3),C'#'               WANT A GENERATION?         U012\n         BNE   NO$MBR                   NO - IGNORE MEMBER NAME    U012\n         MVI   0(R2),C'('               PUT IN STARTING DELIM      U012\n         LA    R2,1(,R2)                -> DESTINATION FOR MVC     U012\n         EX    R1,MOVENAME              COPY GENERATION NUMBER     U012\n         MVI   0(R2),C'-'               CHANGE '#' TO '-'          U012\n         LA    R2,1(R1,R2)              -> PAST MEMBER NAME        U012\n         MVI   0(R2),C')'               PUT IN TRAILING DELIM      U012\nNO$MBR   SET   DSATDSNAME,DSNAME,44     TENTATIVE DSN TO CLIST     U013\n*---------------------------------------------------------------------*\n*                                                                     *\n*                  GET CATALOG AND DSCB INFORMATION                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n*--------DETERMINE VOLUME TYPE IF NOT USING THE CATALOG FOR VOLSER U004\n         TM    FLAG1,F1USEVOL           DID HE TELL US WHAT VOL?   U004\n         BNO   LOCATE                   NO - GO LOOK IT UP IN CAT  U004\n         MVC   SERIAL(6),VOLUME         YES - MOVE HIS TO CATBLOCK U004\n         SET   DSATVOLUME,VOLUME,6      AND PASS VOLSER TO CLIST   U016\n          AIF   (&@@SPLVL GE 130).IOS010                           U020\n         L     R1,16                    -> CVT                     U004\n         L     R1,CVTILK2-CVT(,R1)      -> UCB lookup table        U020\n         SLR   R15,R15                  Clear for ICM              U020\n         B     UCBLOOP                  Ttu next UCB               U020\nNEXT$VOL LA    R1,2(,R1)                -> next UCB address        U020\nUCBLOOP  CLC   =X'FFFF',0(R1)           END OF TABLE?              U004\n         BE    NOTMOUNT                 YES - VOLUME NOT MOUNTED   U004\n         ICM   R15,B'0011',0(R1)        -> UCB                     U020\n         BZ    NEXT$VOL                 SKIP IT IF DUMMY           U004\n         USING UCBCMSEG,R15             UCB common segment         U020\n         CLI   UCBTBYT3,UCB3DACC        Direct access?             U020\n         BNE   NEXT$VOL                 NO - IGNORE IT             U004\n          AGO   .IOS020                                            U020\n.IOS010   ANOP                                                     U020\n         LA    R1,IOSWORK               -> IOSVSUCB work area      U020\n         ST    R1,IOSPARM               -> IOSVSUCB work area      U020\n         LA    R1,IOSDVCLS              -> IOSVSUCB device class   U020\n         ST    R1,IOSPARM+4             -> IOSVSUCB device class   U020\n         LA    R1,IOSAUCB               -> IOSVSUCB return -> UCB  U020\n         ST    R1,IOSPARM+8             -> IOSVSUCB return -> UCB  U020\n         OI    IOSPARM+8,X'80'          Flag end of parms          U020\n         XC    IOSWORK,IOSWORK          Clear IOSVSUCB work area   U020\n         MVI   IOSDVCLS,UCB3DACC        Limit scan to DASD         U020\n         LA    R1,IOSPARM               -> IOSVSUCB parameters     U020\nNEXT$VOL L     R15,CVTPTR               -> CVT                     U020\n         L     R15,CVTUCBSC-CVT(,R15)   -> IOSVSUCB routine        U020\n         BALR  R14,R15                  Locate next UCB            U020\n         LTR   R15,R15                  Any UCB found?             U020\n         BNZ   NOTMOUNT                 No, end of scan            U020\n         L     R15,IOSAUCB              -> UCB                     U020\n         USING UCBCMSEG,R15             UCB common segment         U020\n.IOS020   ANOP                                                     U020\n         TM    UCBSTAT,UCBONLI          Online?                    U020\n         BNO   NEXT$VOL                 NO - IGNORE IT             U004\n         CLC   VOLUME,UCBVOLI           Is this our volume?        U020\n         BNE   NEXT$VOL                 NO - TRY NEXT              U004\n         MVC   DEVCODE(2),UCBTBYT3      Save unit type             U020\n         B     GOTVOL                   CONTINUE                   U004\n*--------FIND DATA SET NAME IN CATALOG\nLOCATE   LOCATE LOCLIST\n         LR    R2,R15                   SAVE RETURN CODE           U013\n         SET   DSATDSNAME,DSNAME,44     PASS TRUE DSN TO CLIST     U013\n         LTR   R15,R2                   TEST RETURN CODE           U013\n         BNZ   LOCERROR\n         SET   DSATVOLUME,SERIAL,6      AND PASS VOLSER TO CLIST   U016\n*--------FIND DEVICE\nGOTVOL   SR    R1,R1                    CLEAR FOR IC               U002\n         IC    R1,DEVCODE+1             GET DEVICE CODE BYTE       U012\n         MH    R1,=H'8'                 GET OFFSET                 U002\n         LA    R1,DEVTABLE(R1)          GET ADDR OF ENTRY          U002\n         CLI   DEVCODE,X'20'            DASD?                      U012\n         BNE   NOTDASD                  NO                         U012\nGOTVOLDA MVC   OL@DEVIC(6),2(R1)        COPY DEVICE NAME TO OUTPUT U002\n         MVC   TRKPRCYL(2),0(R1)        COPY TRACKS PER CYLINDER   U002\n         SPACE 1\n         SET   DSATDEVTYPE,OL@DEVIC,6   PASS TO CLIST              U012\n*--------OBTAIN FORMAT 1 DSCB\nOBTAIN   OBTAIN CAM#SRCH                READ FORMAT 1 DSCB\n         LTR   R15,R15                  TEST RETURN CODE\n         BNZ   DSNERR\n*--------SEE IF FORMAT 3 DSCB IS NEEDED\n         CLC   DS1PTRDS,=X'0000000000'                             U002\n         BE    ALLOCTYP\n         MVC   SEEKADDR,DS1PTRDS        SET CCHHR TO READ          U015\n         LA    R1,IECSDSL3              -> FIRST FMT3 WORK AREA    U015\n         SPACE 2\nFMT3LOOP ST    R1,CAM#SEEK+12           STORE ADDR IN CAMLST       U015\n         XC    0(140,R1),0(R1)          CLEAR THE AREA             U015\n         OBTAIN CAM#SEEK                READ FORMAT 3 DSCB\n         LTR   R15,R15                  TEST RETURN CODE\n         BNZ   DSNERR\n*--------IF MULTIPLE FORMAT 3 DSCBS, GET THEM ALL                  U015\n         L     R1,CAM#SEEK+12           GET ADDR OF CURRENT FMT3   U015\n         MVC   SEEKADDR,DS3PTRDS-IECSDSL3(R1)  SET CCHHR TO READ   U015\n         LA    R1,140(,R1)              -> AREA FOR NEXT FMT3      U015\n         CLC   SEEKADDR,=X'0000000000'  ANY MORE FMT3 DSCBS?       U015\n         BNE   FMT3LOOP                 YES, GO GET NEXT           U015\n*\n****************\n*\n*        DECODE ALLOCATION TYPE\n*\n****************\n*\nALLOCTYP MVC   OL@TYPEO(5),BLANKS                                  U012\n         TM    DS1SCALO,DS1CYLA\n         BO    ALLOCCYL\n         TM    DS1SCALO,DS1TRKA\n         BO    ALLOCTRK\n         TM    DS1SCALO,DS1RECA\n         BO    ALLOCREC\n         MVC   OL@TYPEO(3),=C'ABS'\n         B     NOSS\nALLOCCYL MVC   OL@TYPEO(3),=C'CYL'\n         B     NOSS\nALLOCTRK MVC   OL@TYPEO(3),=C'TRK'\n         B     NOSS\nALLOCREC MVC   OL@TYPEO(3),=C'REC'\n         SPACE 1\nNOSS     SET   DSATALLOCTYPE,OL@TYPEO,3 PASS TO CLIST              U012\n*---------------------------------------------------------------------*\n*                                                                     *\n*                           GET ALLOCATION                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n*--------GET TRACK ALLOCATION\n         SR    R2,R2              CLEAR REGISTER 2\n         LR    R3,R2              CLEAR REGISTER 3\n         LR    R4,R2              CLEAR REGISTER 4\n         MVC   OL@VOLSR(6),SERIAL       COPY VOLUME SERIAL\n         SPACE 1\n         IC    R2,DS1NOEPV              LOAD NUMBER OF EXTENTS     U002\n         LTR   R2,R2                    TEST NUMBER OF EXTENTS\n         BZ    GETRECFM\nGETSIZE  LH    R5,XTNTLIST(R3)          GET OFFSET OF EXTENT DESC  U015\n         LA    R5,DSCBAREA(R5)          GET ADDR OF EXTENT DESC    U015\n         CLI   0(R5),X'00'\n         BE    GETUNUSD\n         LA    R5,2(,R5)                LOAD ADDR OF STARTING TRK\n         SR    R0,R0                    CLEAR REGISTER 0\n         LR    R1,R0                    CLEAR REGISTER 1\n         LH    R0,4(,R5)                LOAD ENDING CYL NUMBER\n         LH    R1,0(,R5)                LOAD STARTING CYL NUMBER\n         SR    R0,R1                    SUBTRACT START FROM END\n         MH    R0,TRKPRCYL              MULTIPLY BY TRKS PER CYL\n         LH    R1,6(,R5)                LOAD ENDING TRACK\n         AR    R0,R1                    ADD TO TRACK COUNT\n         LH    R1,2(,R5)                LOAD STARTING TRACK\n         SR    R0,R1                    SUBTRACT FROM TRACK COUNT\n         AR    R4,R0                    ACCUMULATE TOTAL\n         LA    R4,R1(,R4)               ADD 1 TRACK\n         LA    R3,2(,R3)                                           U015\n         BCT   R2,GETSIZE               DECREMENT EXTENT COUNT\nGETUNUSD ST    R4,TRACKS                STORE TRACKS ALLOCATED\n         TM    FLAG1,F1TRKS             want it in tracks?         U022\n         BNZ   TRKALLOC                 yes                        U022\n         LA    R1,OL@ALLOC              POINT TO MES AREA\n         BAL   R15,CONVTRK              GO GET CYL.TRK\n         MVC   OL@ALLOC+4(2),DECNUM+10                             U015\n         OI    OL@ALLOC+4,X'F0'\n         B     SETALLOC                                            U022\n         SPACE 1\nTRKALLOC LR    R0,R4                    get tracks allocated       U022\n         BAL   R14,CONVDEC0             convert to decimal         U022\n         MVC   OL@ALLOC,DECNUM+L'DECNUM-6  copy to output area     U022\n         SPACE 1\nSETALLOC SET   DSATALLOC,OL@ALLOC,6     PASS TO CLIST              U012\n*--------GET TRACKS USED\n         CLC   DS1LSTAR(3),=XL3'00'                                U012\n         BE    SECONDRY\n         LH    R1,DS1LSTAR                                         U002\n         LA    R1,1(,R1)\n         ST    R1,TRACKS\n         TM    FLAG1,F1TRKS             want it in tracks?         U022\n         BNZ   TRKUSED                  yes                        U022\n         LA    R1,OL@USED               POINT TO MSG AREA\n         BAL   R15,CONVTRK              GO GET CYL.TRK\n         MVC   OL@USED+4(2),DECNUM+10                              U015\n         OI    OL@USED+4,X'F0'\n         B     SETUSED                                             U022\n         SPACE 1\nTRKUSED  LR    R0,R1                    get tracks allocated       U022\n         BAL   R14,CONVDEC0             convert to decimal         U022\n         MVC   OL@USED,DECNUM+L'DECNUM-6  copy to output area      U022\n         SPACE 1\nSETUSED  SET   DSATUSED,OL@USED,6       PASS TO CLIST              U012\n*--------GET SECONDARY SIZE                                        U003\nSECONDRY LA    R2,DS1SCALO+1            POINT TO FIELD             U006\n         LA    R3,3                     GET LENGTH                 U006\n         BAL   R14,CONVDEC              CONVERT IT                 U003\n         MVC   OL@SECND(3),DECNUM+9     AND COPY TO PRINT TO LINE  U015\n         OC    DS1SCALO+1(3),DS1SCALO+1 IS THERE ONE?              U006\n         BNZ   *+10                     YES - SKIP                 U003\n         MVC   OL@SECND(3),=C'---'      NO - FLAG IT               U003\n         CLC   DS1SCALO+1(3),=FL3'999'  TOO BIG?                   U006\n         BNH   *+10                     NO - SKIP                  U006\n         MVC   OL@SECND(3),=C'BIG'      NO - FLAG IT               U007\n         SPACE 1\n         SET   DSATSECONDARY,OL@SECND,3 PASS TO CLIST              U012\n*--------GET NUMBER OF EXTENTS\n         LA    R2,DS1NOEPV              GET NUMBER OF EXTENTS      U002\n         LA    R3,1\n         BAL   R14,CONVDEC\n         MVC   OL@XTNTS,DECNUM+9                                   U015\n         SPACE 1\n         SET   DSATEXTENTS,OL@XTNTS,3   PASS TO CLIST              U015\n         B     GETRECFM\n         SPACE 4\nCONVTRK  EQU   *\n         STM   R4,R7,CONVSAV            SAVE WORK REGS\n         LR    R7,R1                    SAVE MSG POINTER\n         L     R5,TRACKS                GET TRACK COUNT\n         LH    R6,TRKPRCYL              GET TRACKS PER CYLINDER\n         CR    R5,R6                    COUNT LESS THAN CYL\n         BL    ALDONE                   YES ALL DONE\n         SR    R4,R4                    ZERO FOR DIVIDE\n         DR    R4,R6                    DIVIDE COUNT BY TRKS PER CYL\n         LA    R3,4                     SET CONVERT COUNT TO 4\n         ST    R5,CYLIND                SAVE CYL COUNT\n         LA    R2,CYLIND                POINT TO CYL COUNT\n         BAL   R14,CONVDEC              CONVERT TO PRINTABLE\n         MVC   0(3,R7),DECNUM+9         PUT IN MSG                 U015\n         ST    R4,TRACKS                SAVE TRK COUNT\nALDONE   EQU   *\n         MVI   3(R7),C'.'               PUT IN THE POINT\n         LM    R4,R7,CONVSAV            RESTORE WORK REGS\n         LA    R3,4                     SET CONVERT COUNT TO 4\n         LA    R2,TRACKS                POINT TO TRK COUNT\n         LR    R14,R15                  SET RETURN REG14\n         B     CONVDEC                  GO CONVERT TRK COUNT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                          GET DCB ATTRIBUTES                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*--------GET RECORD FORMAT\nGETRECFM LA    R2,OL@RECFM              -> OUTPUT AREA\n         LA    R1,DS1RECFM              -> input                   U025\n         BAL   LINK,RECFM               convert                    U025\n*--------GET BLOCKSIZE\n         LA    R3,2\n         LA    R2,DS1BLKL                                          U002\n         BAL   R14,CONVDEC\n         MVC   OL@BLKSI(5),DECNUM+7                                U015\n         SPACE 1\n         SET   DSATBLKSIZE,OL@BLKSI,5   PASS TO CLIST              U012\n*--------GET LRECL\n         LA    R3,2\n         LA    R2,DS1LRECL                                         U002\n         BAL   R14,CONVDEC\n         MVC   OL@LRECL(5),DECNUM+7                                U015\n         SPACE 1\n         SET   DSATLRECL,OL@LRECL,5     PASS TO CLIST              U012\n*--------GET DSORG\n         TM    DS1DSORG,X'01'           UNMOVABLE?                 U009\n         BZ    *+8                                                 U009\n         MVI   OL@DSORG+2,C'U'                                     U009\n         TM    DS1DSORG,X'80'           IS?                        U002\n         BZ    NXORG1\n         MVC   OL@DSORG(2),=C'IS'\n         B     ENDORG\nNXORG1   TM    DS1DSORG,X'20'           DA?                        U002\n         BZ    NXORG2\n         MVC   OL@DSORG(2),=C'DA'\n         B     ENDORG\nNXORG2   TM    DS1DSORG,X'40'           PS?                        U002\n         BZ    NXORG3\n         MVC   OL@DSORG(2),=C'PS'\n         B     ENDORG\nNXORG3   TM    DS1DSORG,X'02'           PO?                        U002\n         BZ    NXORG4\n         MVC   OL@DSORG(2),=C'PO'\n         B     ENDORG\nNXORG4   TM    DS1DSORG+1,X'08'         VSAM?                      U009\n         BZ    ENDORG                                              U009\n         MVC   OL@DSORG(2),=C'VS'                                  U009\n         TM    DS1OPTCD,DS1OPTIC  X'80' DATASET IN ICF CATLG?      U014\n         BNO   ENDORG                   NO - SKIP                  U014\n         MVC   OL@DSORG(2),=C'EF'       YES - INDICATE DF/EF DS    U014\n         TM    DS1OPTCD,DS1OPTBC  X'40' ICF CATALOG?               U014\n         BNO   ENDORG                   NO - SKIP                  U014\n         MVC   OL@DSORG(3),=C'BCS'      YES - IND. BASIC CAT DS    U014\n         SPACE 1\nENDORG   SET   DSATDSORG,OL@DSORG,3     PASS TO CLIST              U012\n*---------------------------------------------------------------------*\n*                                                                     *\n*                         FIND CREATION DATE                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n*--------GET CREATION DATE\n         MVC   DATEWORK+1(3),DS1CREDT   YDD                        U002\n         BAL   R14,CONVDATE             CONVERT IT                 U002\n         MVC   OL@CDATE(8),DATEWORK     MOVE DATE TO PRINT LINE    U002\n         SPACE 1\n         SET   DSATCREDT,OL@CDATE,8     PASS TO CLIST              U012\n*---------------------------------------------------------------------*\n*                                                                     *\n*                         FIND LAST REFERENCED DATE                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n*--------GET LAST REFERENCED DATE                                  U002\n         CLC   =XL3'00',DS1REFD         LAST REF'D DATE ANY GOOD?  U002\n         BE    NO$REFD                  NO - SKIP IT               U002\n         MVC   DATEWORK+1(3),DS1REFD    GET LAST REFERENCED DATE   U002\n         BAL   R14,CONVDATE             CONVERT IT                 U002\n         MVC   OL@LDATE(8),DATEWORK     MOVE DATE TO PRINT LINE    U002\n         SPACE 1\nNO$REFD  SET   DSATLUSED,OL@LDATE,8     PASS TO CLIST              U012\n*--------SHOW PASSWORD PROTECTION FLAGS\n         MVI   OL@PROT1,C'-'            ASSUME NONE                U002\n         TM    DS1DSIND,DS1IND40        IS IT RACF PROTECTED?      U008\n         BNO   NOT$RACF                 NO - SEE IF PASSWORD       U008\n         MVI   OL@PROT1,C'A'            SHOW IT'S RACF             U008\n         B     OK$PSWD                  END OF THIS SECTION        U008\nNOT$RACF TM    DS1DSIND,X'14'           ANY PASSWORD PROTECTION?\n         BZ    OK$PSWD                  NO                         U005\n         MVI   OL@PROT1,C'R'            ASSUME READ PROTECTED      U002\n         TM    DS1DSIND,X'04'           READ W/O PASSWORD?         U001\n         BZ    OK$PSWD                  NO - GOT IT                U005\n         MVI   OL@PROT1,C'W'            YES - ONLY WRITE PROTECTED U002\n         SPACE 1\nOK$PSWD  SET   DSATPROTIND1,OL@PROT1,1  PASS TO CLIST              U012\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FORMAT SECOND PRINT LINE IF REQUESTED                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n*--------GET TRACK BALANCE                                         U021\n         LA    R3,2                     Field length               U021\n         LA    R2,DS1TRBAL              Field address              U021\n         BAL   R14,CONVDEC                                         U021\n         MVC   OL@TRBAL(5),DECNUM+7                                U021\n         SPACE 1\n         SET   DSATTRBAL,OL@TRBAL,5     PASS TO CLIST              U021\n         SPACE 1\n*---------------------------------------------------------------------*\n*                                                                     *\n*                         FIND EXPIRATION DATE                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n*--------GET EXPIRATION DATE                                       U005\n         MVC   OL@EDATE(8),=C' 00.000 ' ASSUME NONE AND JULIAN     U012\n         TM    FLAG1,F1JULDAT           IS IT JULIAN?              U012\n         BO    *+10                     YES                        U012\n         MVC   OL@EDATE(8),=C'00/00/00' ASSUME NONE AND NON JULIAN U005\n         CLC   =XL3'00',DS1EXPDT        ANY EXPIRATION DATE?       U005\n         BE    NO$EXPDT                 NO - SKIP IT               U005\n         MVC   DATEWORK+1(3),DS1EXPDT   GET EXPIRATION DATE        U005\n         BAL   R14,CONVDATE             CONVERT IT                 U005\n         MVC   OL@EDATE(8),DATEWORK     MOVE DATE TO PRINT LINE    U005\n         SPACE 1\nNO$EXPDT SET   DSATEXPDT,OL@EDATE,8     PASS TO CLIST              U012\n*--------GET KEYLEN                                                U005\n         LA    R3,1                     GET FIELD LENGTH           U005\n         LA    R2,DS1KEYL               -> KEY LENGTH              U005\n         BAL   R14,CONVDEC              CONVERT TO DECIMAL         U005\n         MVC   OL@KEYL(3),DECNUM+9      MOVE TO PRINT LINE         U015\n         SPACE 1\n         SET   DSATKEYLEN,OL@KEYL,3     PASS TO CLIST              U012\n*--------GET RKP                                                   U005\n         LA    R3,2                     GET FIELD LENGTH           U005\n         LA    R2,DS1RKP                -> KEY LENGTH              U005\n         BAL   R14,CONVDEC              CONVERT TO DECIMAL         U005\n         MVC   OL@RKP(5),DECNUM+7       MOVE TO PRINT LINE         U015\n         SPACE 1\n         SET   DSATRKP,OL@RKP,5         PASS TO CLIST              U012\n*--------GET OPTCD                                                 U021\n         LA    R1,=C'WUCHBZTJ'          assume PS/PO               U021\n         TM    DS1DSORG,DS1DSGPS+DS1DSGPO  is it?                  U021\n         BNZ   OPTCD$GO                 yes - go decode            U021\n         LA    R1,=C'WtEFAdxR'          assume DA                  U021\n         TM    DS1DSORG,DS1DSGDA        is it?                     U021\n         BNZ   OPTCD$GO                 yes - go decode            U021\n         LA    R1,=C'WUMIY6LR'          assume IS                  U021\n         TM    DS1DSORG,DS1DSGIS        is it?                     U021\n         BNZ   OPTCD$GO                 yes - go decode            U021\n         LA    R1,=C'ib345678'          assume AM                  U021\n         TM    DS1DSORG+1,DS1ORGAM      is it?                     U021\n         BZ    NO$OPTCD                 no - do it only in hex     U021\n         SPACE 1\nOPTCD$GO LA    R14,OL@OPTCD             -> output field            U021\n         ICM   R0,B'1000',DS1OPTCD      get OPTCD bits             U021\n         LA    R15,8                    number of bits             U021\nOPTCD$LP LTR   R0,R0                    top bit set?               U021\n         BNM   OPTCD$NO                 no - try next bit          U021\n         MVC   0(1,R14),0(R1)           yes - move in OPTCD letter U021\n         LA    R14,1(,R14)              bump output ptr            U021\nOPTCD$NO SLL   R0,1                     move to next bit           U021\n         LA    R1,1(,R1)                -> next OPTCD letter       U021\n         BCT   R15,OPTCD$LP             do all 8 bits              U021\n         SPACE 1\nNO$OPTCD SET   DSATOPTCD,OL@OPTCD,2     PASS TO CLIST              U021\n*--------HEX OPTCD                                                 U021\n         UNPK  OL@OPTCX(2+1),DS1OPTCD(1+1)                         U021\n         TR    OL@OPTCX(2),HEXTAB                                  U021\n         MVI   OL@OPTCX+2,C'='                                     U021\n         SPACE 1\n         SET   DSATOPTCDHEX,OL@OPTCX,2  PASS TO CLIST              U021\n*--------GET MODIFIED-SINCE-LAST-BACKUP INDICATOR                  U005\n         MVI   OL@MOD,C'-'              ASSUME NOT                 U005\n         TM    DS1DSIND,DS1IND02        IS IT?                     U005\n         BNO   *+8                      NO - SKIP                  U012\n         MVI   OL@MOD,C'Y'              SHOW IT IS                 U005\n         SPACE 1\n         SET   DSATMODIND,OL@MOD,1      PASS TO CLIST              U012\n*--------GET RACF PROTECTION INDICATOR                             U005\n         MVI   OL@PROT2,C'-'            ASSUME NOT                 U005\n         TM    DS1DSIND,DS1IND40        IS IT?                     U005\n         BNO   NO$PROT2                 NO - SKIP                  U012\n*  IT'S RACF PROTECTED.  THIS INDICATOR WAS ALREADY DISPLAYED ON   U008\n*  THE FIRST DATA LINE, SO DISPLAY THE PASSWORD INDICATOR HERE.    U008\n         TM    DS1DSIND,X'14'           ANY PASSWORD PROTECTION?   U008\n         BZ    NO$PROT2                 NO                         U012\n         MVI   OL@PROT2,C'R'            ASSUME READ PROTECTED      U008\n         TM    DS1DSIND,X'04'           READ W/O PASSWORD?         U008\n         BZ    NO$PROT2                 NO - GOT IT                U012\n         MVI   OL@PROT2,C'W'            YES - ONLY WRITE PROTECTED U008\n         SPACE 1\nNO$PROT2 SET   DSATPROTIND2,OL@PROT2,1  PASS TO CLIST              U012\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FORMAT ASM2 FIELDS IF THEY'RE VALID AND \"FULL\" SPECIFIED     *\n*                                                                     *\n*---------------------------------------------------------------------*\n*--------SEE IF ASM2 DATA IN FMT1                                  U017\n         CLC   =C'IBMOSVS2',DS1SYSCD    IBM VANILLA?               U017\n         BE    NO$ASM2                  YES - SKIP - NO ASM2 DATA  U017\n         MVC   OL@LMID,DS1LMID          SHOW ASM2 LAST MOD BY ID   U017\n         SET   DSATLMID,OL@LMID,8       PASS TO CLIST              U017\n*--------GET LAST MODIFIED DATE                                    U017\n         MVC   DATEWORK+1(3),DS1LMDAT   YDD                        U017\n         BAL   R14,CONVDATE             CONVERT IT                 U017\n         MVC   OL@LMDAT(8),DATEWORK     MOVE DATE TO PRINT LINE    U017\n         SET   DSATLMDATE,OL@LMDAT,8    PASS TO CLIST              U018\n*--------SHOW LAST MOD TIME                                        U017\n         UNPK  OL@LMTIM+1(4+1),DS1LMTIM(2+1)  GET HHMMX            U017\n         MVI   OL@LMTIM+1+4,C' '        FIX FLIP BYTE              U017\n         MVC   OL@LMTIM(2),OL@LMTIM+1   HHHMM                      U017\n         MVI   OL@LMTIM+2,C':'          HH:MM                      U017\n         SET   DSATLMTIME,OL@LMTIM,5    PASS TO CLIST              U018\n         SPACE 1\n         B     SAVEDATA                                            U012\n         SPACE 2\nNO$ASM2  MVI   HEADER2+4,C'-'           CLEAR THE ASM2 FIELD ...   U017\n         MVC   HEADER2+5(22),HEADER2+4  ... HEADERS                U017\n         B     SAVEDATA                                            U017\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SUBROUTINE TO FORMAT A DATE FROM PACKED DECIMAL (JULIAN)     *\n*                                                                     *\n*---------------------------------------------------------------------*\nCONVJDAT TM    FLAG1,F1JULDAT           WANT JULIAN DATES?         U025\n         BZ    CONVJD$1                 no - convert it            U025\n         MVC   DATEWORK(8),BLANKS                                  U025\n         IC    R0,0(,R15)               get packed YY              U025\n         STC   R0,DATEWORK+1            set .Y                     U025\n         OI    DATEWORK+1,X'F0'         make it printable          U025\n         SRL   R0,4                     shift right one nibble     U025\n         STC   R0,DATEWORK              set Y.                     U025\n         OI    DATEWORK,X'F0'           make it printable          U025\n         MVI   DATEWORK+2,C'.'          put in separator           U025\n         UNPK  DATEWORK+3(3),1(2,R15)   get DDD                    U025\n         BR    R14                      done                       U025\nCONVJD$1 ZAP   DATEPDEC,1(2,R15)        get DDD                    U025\n         CVB   R0,DATEPDEC              in binary                  U025\n         STH   R0,DATEWORK+2            save for CONVDATE          U025\n         SR    R1,R1                    clear for ic               U025\n         IC    R1,0(,R15)               get packed YY              U025\n         SLL   R1,4                     make it 0YY0               U025\n         LA    R1,X'F'(,R1)             make it 0YYF               U025\n         STH   R1,DATEPDEC+6            store for convert          U025\n         CVB   R0,DATEPDEC              get it in binary           U025\n         STC   R0,DATEWORK+1            save for CONVDATE          U025\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SUBROUTINE TO COMPUTE DATE                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\nCONVDATE LH    R1,DATEWORK+2            LOAD DAY OF YEAR\n         SR    R3,R3                    CLEAR FOR IC               U012\n         IC    R3,DATEWORK+1            GET YEAR IN BINARY         U012\n         TM    FLAG1,F1JULDAT           WANT JULIAN DATES?         U012\n         BO    JULDATE                  YES - DO IT THAT WAY       U012\n         SR    R2,R2                    ASSUME IT'LL BE ZERO       U005\n         LTR   R1,R1                    ANY DAY OF YEAR?           U005\n         BZ    DATECVT3                 NO: M=0, D=0               U005\n         TM    DATEWORK+1,X'03'         TEST FOR YEAR MULTIPLE OF 4\n         BZ    DATEMODA\n*--------NOT A LEAP YEAR\n         C     R1,=F'60'\n         BL    DATEMODA\n         LA    R1,1(,R1)\n*--------CONVERT DAY OF YEAR TO MONTH AND DAY OF MONTH\nDATEMODA SR    R2,R2                    INITIALIZE MONTH COUNTER\nDATECVT1 SH    R1,DATEMNTH(R2)          SUBTRACT NO. OF DAYS IN MONTH\n         LTR   R1,R1\n         BNP   DATECVT2\n         LA    R2,2(,R2)                INCREMENT TO NEXT MONTH\n         B     DATECVT1\n*--------ADD BACK NUMBER OF DAYS AND DIVIDE REG 2 BY 2\nDATECVT2 AH    R1,DATEMNTH(R2)\n         SRA   R2,1\n         LA    R2,1(,R2)\n*--------REG 1 = DAY OF MONTH\n*--------REG 2 = MONTH\n*--------REG 3 = YEAR\nDATECVT3 CVD   R2,DATEPDEC\n         UNPK  DATEUDEC(8),DATEPDEC+4(4)\n         OI    DATEUDEC+7,X'F0'\n         MVC   DATEWORK(2),DATEUDEC+6\n         MVI   DATEWORK+2,C'/'\n         CVD   R1,DATEPDEC\n         UNPK  DATEUDEC(8),DATEPDEC+4(4)\n         OI    DATEUDEC+7,X'F0'\n         MVC   DATEWORK+3(2),DATEUDEC+6\n         MVI   DATEWORK+5,C'/'\n         CVD   R3,DATEPDEC\n         UNPK  DATEUDEC(8),DATEPDEC+4(4)\n         OI    DATEUDEC+7,X'F0'\n         MVC   DATEWORK+6(2),DATEUDEC+6\n         BR    R14                      RETURN TO C-DATE/L-USED    U002\n*--------REG 1 = DAY OF YEAR\n*--------REG 3 = YEAR\nJULDATE  MVC   DATEWORK(8),BLANKS                                  U012\n         CVD   R3,DATEPDEC              CONVERT YEAR TO PACKED     U012\n         OI    DATEPDEC+7,X'0F'         REMOVE SIGN                U012\n         UNPK  DATEWORK+1(2),DATEPDEC+6(2)  UNPACK YEAR            U012\n         MVI   DATEWORK+3,C'.'          PUT IN THE DOT             U012\n         CVD   R1,DATEPDEC              CONVERT DAY TO PACKED      U012\n         OI    DATEPDEC+7,X'0F'         REMOVE SIGN                U012\n         UNPK  DATEWORK+4(3),DATEPDEC+6(2)  UNPACK YEAR            U012\n         BR    R14                      RETURN TO MAINLINE         U012\n*---------------------------------------------------------------------*\n*                                                                     *\n*                  BINARY TO EBCDIC CONVERSION ROUTINE                *\n*                                                                     *\n*---------------------------------------------------------------------*\n*--------CONVERT TO EBCDIC\nCONVDEC  SR    R0,R0\nCONVDECL SLL   R0,8\n         IC    R0,0(,R2)\n         LA    R2,1(,R2)\n         BCT   R3,CONVDECL\n         LPR   R0,R0\nCONVDEC0 CVD   R0,DECWORK\n         MVC   DECNUM(12),DECMASK                                  U015\n         ED    DECNUM(12),DECWORK+2                                U015\n         BR    R14\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                               ERRORS                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n*--------ERROR IN PARSE ROUTINE\nERRPARS  MVC   BUFFER1+13(14),=C'Parse Couldn''t'                  U012\n         MVI   RC+3,56                  SET RETURN CODE            U012\n         MVI   DSNPTR,X'FF'             BE SURE NOT TO LOOP BACK   U012\n         B     ERRMSG                                              U005\n*--------ERROR IN LOCATE MACRO\nLOCERROR ST    R15,RC                   SAVE RETURN CODE           U012\n         SLA   R15,3\n         LA    R15,LOCMSGS-32(R15)\n         MVC   BUFFER1+13(32),0(R15)                               U012\n         B     ERRMSG                                              U005\n*--------VOLUME NOT MOUNTED                                        U004\nNOTMOUNT MVC   BUFFER1+13(18),=C'Volume not mounted'               U012\n         MVI   RC+3,52                  SET RETURN CODE            U012\n         B     ERRMSG                                              U004\n*--------ERROR IN OBTAIN MACRO\nDSNERR   MVC   BUFFER1+13(6),SERIAL                                U012\n         LA    R14,32(,R15)             COMPUTE MY RETURN CODE     U012\n         ST    R14,RC                   SAVE FOR RETURN            U012\n         SLA   R15,3\n         LA    R15,DSNERRS-32(R15)\n         MVI   BUFFER1+20,C'-'                                     U012\n         MVC   BUFFER1+22(32),0(R15)                               U012\n         B     ERRMSG\n*--------NOT A DIRECT ACCESS DEVICE\n*\n*  THIS IS A SPECIAL CASE; FORCE A CALL TO 'CLISTSET' IF 'SAVE'\n*  WAS SPECIFIED SO USER CAN PICK UP VOLSER AND FILE SEQ NUM.\n*\nNOTDASD  MVI   RC+3,60                  SET RETURN CODE            U012\n         TM    FLAG2,F2FULL             WANT SECOND DATA LINE?     U025\n         BNO   NO$LINE1                 NO - SKIP                  U025\n         MVC   OL@DSN,DSNAME            FILL IN DSNAME             U025\n         LA    R0,BUFF0RDW              -> RDW                     U025\n         BAL   R14,PUTLINE              CONDITIONALLY PUT IT OUT   U025\n         MVC   BUFFER1,BLANKS           CLEAN THE PRINT LINE BUFF  U025\n         SPACE 2\nNO$LINE1 CLI   DEVCODE,X'80'            tape?                      U025\n         BE    TAPE$VOL                 yes - do warning msg       U025\n         MVC   BUFFER1(11),=C'** ERROR **'                         U025\n         MVC   BUFFER1+13(6),SERIAL                                U012\n*U025    MVC   BUFFER1+20(48),=C'- Device is not direct-access  -  File$\n                number = '                                         U012\n         MVC   BUFFER1+20(30),=C'-- Device is not direct-access'   U025\n         LA    R0,BUFF1RDW              -> RDW                     U025\n         BAL   R14,PUTLINE              CONDITIONALLY PUT IT OUT   U025\n         SPACE 1\n         SET   SYSDVAL,BUFFER1,80       MSG TO CLIST               U025\n         MVC   BUFFER1,BLANKS           CLEAN THE PRINT LINE BUFF  U025\n         B     NO$TMS                   all done                   U025\n         SPACE 2\nTAPE$VOL MVI   RC+3,2                   rc 60 is tacky             U025\n         LA    R2,FSN                   POINT TO FIELD             U012\n         LA    R3,2                     GET LENGTH OF FIELD        U012\n         BAL   R14,CONVDEC              CONVERT IT                 U012\n         MVC   BUFFER1(11),=C'< Warning >'                         U025\n         MVC   BUFFER1+13(6),SERIAL                                U025\n         MVC  BUFFER1+20(33),=C'is a tape volume -- File number =' U025\n         MVC   BUFFER1+54(5),DECNUM+7   FILE SEQ NUMBER TO MSG     U025\n         MVC   OL4@FSEQ,DECNUM+8        also to TMS data line      U025\n*U025    LA    R0,BUFF1RDW              -> RDW                     U012\n*U025    BAL   R14,PUTLINE              CONDITIONALLY PUT IT OUT   U012\n         SPACE 1\n         SET   SYSDVAL,BUFFER1,80       MSG TO CLIST               U012\n         MVC   BUFFER1,BLANKS           CLEAN THE PRINT LINE BUFF  U012\n         SPACE 2\n          AIF   (&@@U01 EQ 0).NO$TMS1                              U025\n*\n         OPENTMC  NOTACT=NO$TMS,MF=E                               U025\n*\n         GETTMC  SERIAL,TMRECORD,TMS$ERR,ENQ=NO                    U025\n*\n         LH    R2,FSN                   get file sequence number   U025\n         BCT   R2,*+8                   decrement                  U025\n         B     GOT$TMS                  continue if first file     U025\n*                                       (in TMC record)            U025\n*                                       otherwise must find DSNB   U025\n         L     R14,TMADSNB              get first DSNB number      U025\n*\nTMS$LOOP GETDSNB  TMDSNB,(R14),(R3),ENQ=NO                         U025\n*\n         USING TMDSNB,R3                                           U025\n         L     R14,DSNBNEXT             -> get next DSNB number    U025\n         BCT   R2,TMS$LOOP              keep reading               U025\n*---  Now fudge our copy of the TMC record to simplify code below  U025\n         MVC   TMDSN,DSNBDSN            dsname                     U025\n         MVC   TMCRTDT,DSNBCRDT         creation date              U025\n         MVC   TMEXPDT,DSNBEXDT         expiration date            U025\n         MVC   TMRECFM,DSNBRFM          recfm                      U025\n         MVC   TMBLKSI,DSNBBLKS         block size                 U025\n         MVC   TMLRECL,DSNBLREC         lrecl                      U025\n         MVC   TMBLKCNT,DSNBBLKC        block count                U025\n         MVC   TMJOBNM,DSNBCJN          creating job name          U025\n         DROP  R3                       TMDSNB                     U025\n*                                                                  U025\nGOT$TMS  DELETE  EPLOC==CL8'TMSSVC'                                U025\n*                                                                  U025\n         CLC   DSNAME,TMDSN             does it match up?          U025\n         BNE   NO$TMS                   no - skip everything       U025\n         MVI   RC+3,1                   set rc for TMS tape        U025\n         LA    R0,HEADER4               -> tape header line        U025\n         BAL   R14,PUTLINE              CONDITIONALLY PUT IT OUT   U025\n*--------Block Count                                               U025\n         LA    R2,TMBLKCNT              POINT TO FIELD             U025\n         LA    R3,4                     GET LENGTH OF FIELD        U025\n         BAL   R14,CONVDEC              CONVERT IT                 U025\n         MVC   OL4@BCNT,DECNUM+4        move to print line         U025\n*--------Out of Area code                                          U025\n         MVC   OL4@OUTA,TMOUTAR                                    U025\n*--------Recfm                                                     U025\n         LA    R2,OL4@RFM               -> OUTPUT AREA             U025\n         LA    R1,TMRECFM               -> input                   U025\n         BAL   LINK,RECFM               convert                    U025\n*--------Blocksize                                                 U025\n         LA    R3,2                                                U025\n         LA    R2,TMBLKSI                                          U025\n         BAL   R14,CONVDEC                                         U025\n         MVC   OL4@BKSZ(5),DECNUM+7                                U025\n         SPACE 1\n         SET   DSATBLKSIZE,OL4@BKSZ,5   PASS TO CLIST              U025\n*--------Lrecl                                                     U025\n         LA    R3,2                                                U025\n         LA    R2,TMLRECL                                          U025\n         BAL   R14,CONVDEC                                         U025\n         MVC   OL4@LRCL(5),DECNUM+7                                U025\n         SPACE 1\n         SET   DSATLRECL,OL4@LRCL,5     PASS TO CLIST              U025\n*------- Creation date                                             U025\n         LA    R15,TMCRTDT              YDD                        U025\n         BAL   R14,CONVJDAT             CONVERT IT                 U025\n         MVC   OL4@CDAT,DATEWORK        move date to print line    U025\n*------- Last used date                                            U025\n         LA    R15,TMLASUSD             YDD                        U025\n         BAL   R14,CONVJDAT             CONVERT IT                 U025\n         MVC   OL4@LDAT,DATEWORK        move date to print line    U025\n*------- Scratch/Delete                                            U025\n         TM    TMFLAG1,TMSCRTCH                                    U025\n         BZ    *+8                                                 U025\n         MVI   OL4@SCR,C'S'                                        U025\n         TM    TMFLAG1,TMDELET                                     U025\n         BZ    *+8                                                 U025\n         MVI   OL4@DEL,C'D'                                        U025\n*------- Volser                                                    U025\n         MVC   OL4@VOL,SERIAL                                      U025\n*------- Device type                                               U025\n         MVC   OL4@DEV,=C'*TAPE*'       someday do this right...   U025\n*\n         LA    R0,BUFF4RDW              -> RDW                     U025\n         BAL   R14,PUTLINE              CONDITIONALLY PUT IT OUT   U025\n         MVC   BUFFER1,BLANKS           clean main print line buff U025\n*\n*\n         TM    FLAG2,F2FULL             WANT SECOND DATA LINE?     U025\n         BZ    DONE4                    no - skip                  U025\n         LA    R0,HEADER5               -> tape header line        U025\n         BAL   R14,PUTLINE              CONDITIONALLY PUT IT OUT   U025\n*------- Creating jobname                                          U025\n         MVC   OL5@CJOB,TMJOBNM                                    U025\n*------- Last used by jobname                                      U025\n         MVC   OL5@LJOB,TMLASUSJ                                   U025\n*--------VolSeq                                                    U025\n         LA    R3,2                                                U025\n         LA    R2,TMVOLSEQ                                         U025\n         BAL   R14,CONVDEC                                         U025\n         MVC   OL5@VSEQ(4),DECNUM+8                                U025\n*--------First/Previous/Next volsers                               U025\n         MVC   OL5@1VOL,TMFRSVOL                                   U025\n         MVC   OL5@PRVL,TMPRVVOL                                   U025\n         MVC   OL5@NXVL,TMNXTVOL                                   U025\n*------- Expiration date                                           U025\n         LA    R15,TMEXPDT              YDD                        U025\n         BAL   R14,CONVJDAT             CONVERT IT                 U025\n         MVC   OL5@EDAT,DATEWORK        move date to print line    U025\n*------- Out of Area date                                          U025\n         LA    R15,TMOUTDAT             YDD                        U025\n         BAL   R14,CONVJDAT             CONVERT IT                 U025\n         MVC   OL5@ODAT,DATEWORK        move date to print line    U025\n*\n         LA    R0,BUFF5RDW              -> RDW                     U025\n         BAL   R14,PUTLINE              CONDITIONALLY PUT IT OUT   U025\n         B     DONE4                                               U025\n         SPACE 2\nNO$TMS   EQU   *                                                   U025\nTMS$ERR  EQU   *                                                   U025\n.NO$TMS1  ANOP                                                     U025\n         LA    R0,BUFF1RDW              -> RDW                     U025\n         BAL   R14,PUTLINE              CONDITIONALLY PUT IT OUT   U025\n         MVC   BUFFER1,BLANKS           CLEAN THE PRINT LINE BUFF  U012\n*U025    TM    FLAG2,F2FULL             WANT SECOND DATA LINE?     U012\n*U025    BNO   DONE4                    NO - SKIP                  U012\n*U025    MVC   BUFFER1,BLANKS           CLEAN THE PRINT LINE BUFF  U012\n*U025    MVC   BUFFER1(8),=C'Dsname ='                             U012\n*U025    MVC   BUFFER1+8+1(44),DSNAME   FILL IN DSNAME             U012\n*U025    LA    R0,BUFF1RDW              -> RDW                     U012\n*U025    BAL   R14,PUTLINE              CONDITIONALLY PUT IT OUT   U012\n*U025    MVC   BUFFER1,BLANKS           CLEAN THE PRINT LINE BUFF  U012\n         B     DONE4                                               U012\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*       SAVE OUTPUT LINE IN '&SYSDVAL' IF 'SAVE' WAS SPECIFIED        *\n*                                                                     *\n*---------------------------------------------------------------------*\n*AVEDATA SET   SYSDVAL,BUFFER1,80,NOCLIST=DONE   MSG TO CLIST      U012\nSAVEDATA TM    FLAG1,F1SAVE             IN \"SAVE\" MODE?            U025\n         BZ    DONE                     NO - SKIP                  U025\n         SET   SYSDVAL,BUFFER1,80       MSG TO CLIST               U025\n         B     *+4(R15)                 CHECK CLISTSET RETURN CODE U012\n         B     DONE                     RC=0; CONTINUE             U012\n         B     READY                    RC=4; NOT IN CLIST         U012\n         MVI   RC+3,2                   RC=8; SET RC=2             U012\n         MVC   WARNMSG(32),=CL32'\"SYSDVAL\" not defined           ' U012\n         B     PRTWARN                                             U012\nREADY    MVI   RC+3,1                   RC=4; SET RC=1             U012\n         MVC   WARNMSG(32),=CL32'Not in CLIST - \"SAVE\" ignored   ' U012\n         SPACE 1\nPRTWARN  LA    R0,WARN                  -> RDW                     U012\n         BAL   R14,PUTLINE              CONDITIONALLY PUT IT OUT   U012\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                            DISPLAY OUTPUT                           *\n*                                                                     *\n*---------------------------------------------------------------------*\nDONE     TM    FLAG1,F1DSLIST           LIST OF DSNAMES?           U017\n         BO    DONE0                    YES - DON'T DO DSNAME YET  U017\n         TM    FLAG2,F2FULL             \"FULL\" LIST REQUESTED?     U017\n         BZ    DONE0                    NO - DON'T DO DSNAME       U017\n         MVC   OL@DSN,DSNAME            DSNAME TO MESSAGE          U017\n         LA    R0,BUFF0RDW              -> RDW                     U017\n         BAL   R14,PUTLINE              CONDITIONALLY PUT IT OUT   U017\nDONE0    BAL   LINK,PUTHEAD             PUT OUT FIRST HEADER LINE  U010\n         TM    FLAG2,F2FULL+F2EXTNTS    ANY MORE DATA LINES?       U010\n         BZ    DONE1                    NO - SKIP                  U010\n         TM    FLAG1,F1DSLIST           LIST OF DSNAMES?           U005\n         BNO   DONE2                    NO - SKIP                  U005\n         TM    FLAG2,F2FULL             SECOND DATA LINE?          U010\n         BNO   *+8                      NO - SKIP                  U010\n         BAL   LINK,PUTHEAD2            YES - PUT SECOND HDR NOW   U005\n         TM    FLAG2,F2EXTNTS           EXTENT LIST?               U010\n         BNO   *+8                      NO - SKIP                  U010\n         BAL   LINK,PUTHEAD3            YES - PUT THIRD HDR NOW    U010\n         BAL   LINK,PUTBLANK            AND PUT OUT A BLANK LINE   U005\nDONE1    OI    FLAG1,F1NOHEAD           AND SUPPRESS FOREVERMORE   U005\nDONE2    TM    FLAG2,F2FULL             FULL DISPLAY?              U017\n         BZ    NO$DSN                   NO - SKIP                  U017\n         TM    FLAG1,F1DSLIST           LIST OF DSNAMES?           U017\n         BZ    NO$DSN                   NO - SKIP, ALREADY DONE    U017\n         MVC   OL@DSN,DSNAME            DSNAME TO MESSAGE          U017\n         LA    R0,BUFF0RDW              -> RDW                     U017\n         BAL   R14,PUTLINE              CONDITIONALLY PUT IT OUT   U017\nNO$DSN   LA    R0,BUFF1RDW              -> RDW                     U012\n         BAL   R14,PUTLINE              CONDITIONALLY PUT IT OUT   U012\n         MVC   BUFFER1,BLANKS           CLEAN THE PRINT LINE BUFF  U001\n         TM    FLAG2,F2FULL+F2EXTNTS    ANY OPTIONAL OUTPUT?       U010\n         BZ    DONE5                    NO - SKIP                  U010\n         TM    FLAG2,F2FULL             ANY SECOND LINE?           U005\n         BZ    DONE3                    NO - SKIP                  U010\n         BAL   LINK,PUTHEAD2            PUT OUT 2ND HDR LINE NOW   U005\n         TM    FLAG2,F2EXTNTS           FORTH LINE REQUESTED?      U010\n         BO    *+8                      YES - DON'T RESET FLAG YET U010\n         OI    FLAG1,F1NOHEAD           NO MORE HEADER LINES       U005\n         LA    R0,BUFF2RDW              -> RDW                     U012\n         BAL   R14,PUTLINE              CONDITIONALLY PUT IT OUT   U012\n         MVC   BUFFER2,BLANKS           CLEAN THE PRINT LINE BUFF  U001\nDONE3    TM    FLAG2,F2EXTNTS           WANT EXTENT LIST?          U010\n         BZ    DONE4                    NO - SKIP                  U010\n         SR    R2,R2                    CLEAR FOR IC               U010\n         ICM   R2,B'0001',DS1NOEPV      GET NUMBER OF EXTENTS      U010\n         BZ    DONE4                    NO EXTENTS TO LIST         U010\n         LA    R3,XTNTLIST              -> FIRST EXTENT POINTER    U010\n         BAL   LINK,PUTHEAD3            PUT OUT THIRD HDR LINE NOW U010\n         OI    FLAG1,F1NOHEAD           NO MORE HEADER LINES       U005\n         MVC   BUFFER3(OL@LEN3),BLANKS  CLEAR EXTENT LINE BUFFER   U015\nXTNTLOOP LH    R1,0(,R3)                GET AN EXTENT OFFSET       U015\n         LA    R1,DSCBAREA(R1)          GET AN EXTENT ADDRESS      U015\n         LA    R14,OL@XTYPE-2           -> start of output field   U023\n*                                                                  U023\n         TM    DS1EXT1,X'81'            extent on cylinder bound?  U023\n         BNO   NOT$CYL                  no - skip                  U023\n         MVC   0(5,R14),=C', Cyl'       yes - show it              U023\n         LA    R14,5(,R14)              bump scan ptr              U023\n         B     YES$CYL                  skip around                U023\n*                                                                  U023\nNOT$CYL  TM    DS1EXT1,X'80'            extent sharing cylinder?   U023\n         BZ    *+4+6+4                  no - skip                  U023\n         MVC   0(9,R14),=C', Shr Cyl'   yes - show it              U023\n         LA    R14,9(,R14)              bump scan ptr              U023\n*                                                                  U023\nYES$CYL  TM    DS1EXT1,X'40'            first extent describe UL?  U023\n         BZ    *+4+6+4                  no - skip                  U023\n         MVC   0(9,R14),=C', Usr Lbl'   yes - show it              U023\n         LA    R14,9(,R14)              bump scan ptr              U023\n*                                                                  U023\n         TM    DS1EXT1,X'04'            isam index?                U023\n         BZ    *+4+6+4                  no - skip                  U023\n         MVC   0(9,R14),=C', IS Indx'   yes - show it              U023\n         LA    R14,9(,R14)              bump scan ptr              U023\n*                                                                  U023\n         TM    DS1EXT1,X'02'            isam overflow?             U023\n         BZ    *+4+6+4                  no - skip                  U023\n         MVC   0(9,R14),=C', IS Ovfl'   yes - show it              U023\n         LA    R14,9(,R14)              bump scan ptr              U023\n*                                                                  U023\n         TM    DS1EXT1,X'01'            user data / isam prime?    U023\n         BZ    *+4+6+4                  no - skip                  U023\n         MVC   0(6,R14),=C', Data'      yes - show it              U023\n         LA    R14,6(,R14)              bump scan ptr              U023\n*                                                                  U023\n         MVC   OL@XTYPE-2(2),=C'  '     blank out leading ', '     U023\n         SR    R0,R0                    CLEAR FOR IC               U010\n         IC    R0,1(,R1)                GET EXTENT SEQUENCE NUMBER U010\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL         U015\n         MVC   OL@XTNT,DECNUM+12-3      MOVE ANSWER TO OUTPUT LINE U015\n*--- EXTENT STARTING ADDRESS (HEX)                                 U011\n         UNPK  OL@START+1(8+1),2(4+1,R1)  CCHH EXTENT START        U010\n         TR    OL@START+1(8),HEXTAB     CONVERT TO PRINTABLE HEX   U010\n         MVI   OL@START+9,C' '          FIX FLIP BYTE              U010\n         MVC   OL@START(4),OL@START+1   SHIFT OVER CC              U010\n         MVI   OL@START+4,C','          PUT IN SEPARATOR           U010\n*--- EXTENT STARTING ADDRESS (DEC)                                 U011\n         LH    R0,2(,R1)                GET START CC               U011\n         MH    R0,TRKPRCYL              GET START CC IN TRKS       U011\n         AH    R0,4(,R1)                ADD START HH               U011\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL         U011\n         MVC   OL@STRK,DECNUM+12-5      GET 5 DIGIT NUMBER         U015\n*--- EXTENT ENDING ADDRESS (HEX)                                   U011\n         UNPK  OL@END+1(8+1),6(4+1,R1)  CCHH EXTENT END            U010\n         TR    OL@END+1(8),HEXTAB       CONVERT TO PRINTABLE HEX   U010\n         MVI   OL@END+9,C' '            FIX FLIP BYTE              U010\n         MVC   OL@END(4),OL@END+1       SHIFT OVER CC              U010\n         MVI   OL@END+4,C','            PUT IN SEPARATOR           U010\n*--- EXTENT ENDING ADDRESS (DEC)                                   U011\n         LH    R0,6(,R1)                GET END CC                 U011\n         MH    R0,TRKPRCYL              GET END CC IN TRKS         U011\n         AH    R0,8(,R1)                ADD END HH                 U011\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL         U011\n         MVC   OL@ETRK,DECNUM+12-5      GET 5 DIGIT NUMBER         U015\n*--- LENGTH IN TRACKS OF EXTENT (DEC)                              U011\n         LH    R15,6(,R1)               GET END CC                 U010\n         SH    R15,2(,R1)               SUB START CC               U010\n         MH    R15,TRKPRCYL             GET NUMBER OF TRACKS       U010\n         AH    R15,8(,R1)               ADD END HH                 U010\n         SH    R15,4(,R1)               SUB START HH               U010\n         LA    R0,1(,R15)               FUDGE FACTOR               U011\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL         U011\n         MVC   OL@LNTH,DECNUM+12-5      GET 5 DIGIT NUMBER OF TRKS U015\n         LA    R0,BUFF3RDW              -> RDW                     U012\n         BAL   R14,PUTLINE              CONDITIONALLY PUT IT OUT   U012\n         LA    R3,2(,R3)                -> NEXT EXTENT ADDRESS     U015\n         BCT   R2,XTNTLOOP              DO NEXT EXTENT             U010\n         MVC   BUFFER3(OL@LEN3),BLANKS  CLEAR PRINT LINE BUFFER    U012\nDONE4    CLI   DSNPTR,X'FF'             ANY MORE DSNAMES?          U005\n         BE    *+8                      NO - SKIP                  U005\n         BAL   LINK,PUTBLANK            PUT OUT A BLANK LINE       U005\nDONE5    CLI   DSNPTR,X'FF'             END OF LIST?               U001\n         BNE   NEXT$DSN                 NO - DO NEXT               U001\n         IKJRLSA PARS#ANS\n         TM    FLAG1,F1SAVE             'SAVE' REQUESTED?          U012\n         BNO   LEAVE                    NO - SKIP                  U015\n         DELETE  EPLOC==CL8'CLISTSET'   YES - DONE WITH INTERFACE  U012\n         B     LEAVE                    FREEMAIN AND EXIT          U015\nERRMSG   MVC   BUFFER1(13),=CL13'** ERROR **  '                    U012\n         LA    R0,BUFF1RDW              -> RDW                     U012\n         BAL   R14,PUTLINE              CONDITIONALLY PUT IT OUT   U012\n         SPACE 1\n         SET   SYSDVAL,BUFFER1,80       PASS MSG TO CLIST          U012\n         MVC   BUFFER1,BLANKS           CLEAN THE PRINT LINE BUFF  U001\n         B     DONE4                                               U005\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Convert recfm to displayable                                    U025\n*                                                                     *\n*---------------------------------------------------------------------*\nRECFM    TM    0(R1),X'C0'              RECFM=U?                   U002\n         BO    RECFM$U                  YES                        U012\n         BZ    RECFM$T                  NO RECFM AT ALL - SKIP\n         TM    0(R1),X'80'              TEST FOR RECFM=F           U002\n         BZ    RECFM$V                  NOPE - MUST BE RECFM=V     U012\n         MVI   0(R2),C'F'\n         LA    R2,1(,R2)\n         B     RECFM$T\nRECFM$U  MVI   0(R2),C'U'                                          U012\n         LA    R2,1(,R2)                                           U012\n         B     RECFM$T                                             U012\nRECFM$V  MVI   0(R2),C'V'\n         LA    R2,1(,R2)\nRECFM$T  TM    0(R1),X'20'                                         U002\n         BZ    RECFM$B\n         MVI   0(R2),C'T'\n         LA    R2,1(,R2)\nRECFM$B  TM    0(R1),X'10'                                         U002\n         BZ    RECFM$S\n         MVI   0(R2),C'B'\n         LA    R2,1(,R2)\nRECFM$S  TM    0(R1),X'08'                                         U002\n         BZ    RECFM$A\n         MVI   0(R2),C'S'\n         LA    R2,1(,R2)\nRECFM$A  TM    0(R1),X'04'                                         U002\n         BZ    RECFM$M\n         MVI   0(R2),C'A'\n         LA    R2,1(,R2)\nRECFM$M  TM    0(R1),X'02'                                         U002\n         BZ    RECFM$OK\n         MVI   0(R2),C'M'\n         SPACE 1\nRECFM$OK SET   DSATRECFM,0(R2),3        PASS TO CLIST              U025\n         BR    LINK                                                U025\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*                            PUT OUT HEADER LINE(S)\n*                                                                     *\n*---------------------------------------------------------------------*\nPUTHEAD  TM    FLAG1,F1NOHEAD           SUPPRESS HEADER LINES?     U012\n         BOR   LINK                     YES - JUST RETURN          U012\n         LA    R0,HEADER1               -> RDW                     U012\n         BAL   R14,PUTLINE              CONDITIONALLY PUT IT OUT   U012\n         BR    LINK                     RETURN TO CALLER           U005\n         SPACE 2\nPUTHEAD2 TM    FLAG1,F1NOHEAD           SUPPRESS HEADER LINES?     U012\n         BOR   LINK                     YES - JUST RETURN          U012\n         LA    R0,HEADER2               -> RDW                     U012\n         BAL   R14,PUTLINE              CONDITIONALLY PUT IT OUT   U012\n         BR    LINK                     RETURN TO CALLER           U005\n         SPACE 2\nPUTHEAD3 TM    FLAG1,F1NOHEAD           SUPPRESS HEADER LINES?     U012\n         BOR   LINK                     YES - JUST RETURN          U012\n         LA    R0,HEADER3               -> RDW                     U012\n         BAL   R14,PUTLINE              CONDITIONALLY PUT IT OUT   U012\n         BR    LINK                     RETURN TO CALLER           U010\n         SPACE 2\nPUTBLANK LA    R0,=X'0005000040'        -> RDW FOR ONE BLANK       U012\n         BAL   R14,PUTLINE              CONDITIONALLY PUT IT OUT   U012\n         BR    LINK                     RETURN TO CALLER           U005\n         SPACE 2\nPUTLINE  TM    FLAG1,F1NOLIST           SUPPRESS OUTPUT?           U012\n         BOR   R14                      YES - JUST RETURN          U012\n         ST    R14,PUTLIN14             SAVE RETURN ADDRESS        U012\n         SPACE 1\n         PUTLINE  OUTPUT=((0),,,DATA),MF=(E,IOPLAREA)              U012\n         SPACE 1                                                   U012\n         L     R14,PUTLIN14             RESTORE RETURN ADDRESS     U012\n         BR    R14                      RETURN TO CALLER           U012\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Subroutine to invoke CLISTSET                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\nSET      TM    FLAG1,F1SAVE             IN \"SAVE\" MODE?            U025\n         BNOR  R14                      NO - just return to caller U025\n         LA    R1,SETPARM               -> PARM LIST               U025\n******** LINK  EP=CLISTSET                                         U025\n         L     R15,CLISTSET             -> CLIST INTERFACE SUBR    U025\n         BR    R15                      CALL IT (he'll ret via R14)U025\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                               DATA                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 4\n         LTORG\n         SPACE 4\nCYLIND   DC    F'0'\nCONVSAV  DC    4F'0'\nTRKPRCYL DC    F'0'                    TRACKS PER CYLINDER\nDSNPTR   DC    A(0)                     -> PDL FOR DSN             U001\nPUTLIN14 DC    A(0)                     LINKAGE SAVE AREA          U001\nMOVENAME MVC   0(*-*,R2),0(R3)          << EXECUTED >>\nDSNAME   DC    CL44' '\nVOLUME   DC    CL6' '                                              U004\nFLAG1    DC    X'00'                                               U004\nF1NOHEAD  EQU   X'80'                   SUPPRESS HEADER LINES      U004\nF1USEVOL  EQU   X'40'                   USE SUPPLIED VOLUME        U004\nF1DSLIST  EQU   X'20'                   DSN LIST WAS ENTERED       U005\nF1NOLIST  EQU   X'10'                   SUPPRESS ALL DISPLAY DATA  U012\nF1SAVE    EQU   X'08'                   SAVE INFO IN CLIST VARS    U012\nF1JULDAT  EQU   X'04'                   DATES TO BE GIVEN JULIAN   U012\nF1TRKS    EQU   X'02'                   show ALLOC/USED in tracks  U022\nFLAG2    DC    X'00'                                               U004\nF2FULL    EQU   X'80'                   SHOW ALL ATTRIBUTES        U005\nF2EXTNTS  EQU   X'40'                   SHOW DATASET EXTENTS       U010\n         SPACE 4\n*--------DATE CONVERSION\nDATEWORK DC    2F'0'\nDATEMNTH DC    H'31'                    JAN\n         DC    H'29'                    FEB\n         DC    H'31'                    MAR\n         DC    H'30'                    APR\n         DC    H'31'                    MAY\n         DC    H'30'                    JUN\n         DC    H'31'                    JUL\n         DC    H'31'                    AUG\n         DC    H'30'                    SEP\n         DC    H'31'                    OCT\n         DC    H'30'                    NOV\n         DC    H'31'                    DEC\n         DC    X'7FFF'                  ALL THE REST (99.366)      U011\nDATEPDEC DC    D'0'\nDATEUDEC DC    D'0'\n*--------DECIMAL CONVERSION\nDECWORK  DC    D'0'                     DOUBLE WORD FOR PACKED DECIMAL\nDECMASK  DC    X'402020202020202020202120'  EDIT PATTERN           U015\nDECNUM   DC    CL12' '                  RESULT AREA                U015\nHEXTAB   EQU   *-C'0'                                              U010\n         DC    C'0123456789ABCDEF'                                 U010\n         EJECT\n*--------DSCB'S\nXTNTLIST DC    Y(DS1EXT1-DSCBAREA)      FORMAT 1                   U015\n         DC    Y(DS1EXT2-DSCBAREA)                                 U015\n         DC    Y(DS1EXT3-DSCBAREA)                                 U015\n         DC    Y(DS3EXTNT+00-DSCBAREA)  FORMAT 3 # 1               U015\n         DC    Y(DS3EXTNT+10-DSCBAREA)                             U015\n         DC    Y(DS3EXTNT+20-DSCBAREA)                             U015\n         DC    Y(DS3EXTNT+30-DSCBAREA)                             U015\n         DC    Y(DS3ADEXT+00-DSCBAREA)                             U015\n         DC    Y(DS3ADEXT+10-DSCBAREA)                             U015\n         DC    Y(DS3ADEXT+20-DSCBAREA)                             U015\n         DC    Y(DS3ADEXT+30-DSCBAREA)                             U015\n         DC    Y(DS3ADEXT+40-DSCBAREA)                             U015\n         DC    Y(DS3ADEXT+50-DSCBAREA)                             U015\n         DC    Y(DS3ADEXT+60-DSCBAREA)                             U015\n         DC    Y(DS3ADEXT+70-DSCBAREA)                             U015\n         DC    Y(DS3ADEXT+80-DSCBAREA)                             U015\n         DC    Y(DS3EXTNT+00-DSCBAREA+140*1)  FORMAT 3 # 2         U015\n         DC    Y(DS3EXTNT+10-DSCBAREA+140*1)                       U015\n         DC    Y(DS3EXTNT+20-DSCBAREA+140*1)                       U015\n         DC    Y(DS3EXTNT+30-DSCBAREA+140*1)                       U015\n         DC    Y(DS3ADEXT+00-DSCBAREA+140*1)                       U015\n         DC    Y(DS3ADEXT+10-DSCBAREA+140*1)                       U015\n         DC    Y(DS3ADEXT+20-DSCBAREA+140*1)                       U015\n         DC    Y(DS3ADEXT+30-DSCBAREA+140*1)                       U015\n         DC    Y(DS3ADEXT+40-DSCBAREA+140*1)                       U015\n         DC    Y(DS3ADEXT+50-DSCBAREA+140*1)                       U015\n         DC    Y(DS3ADEXT+60-DSCBAREA+140*1)                       U015\n         DC    Y(DS3ADEXT+70-DSCBAREA+140*1)                       U015\n         DC    Y(DS3ADEXT+80-DSCBAREA+140*1)                       U015\n         DC    Y(DS3EXTNT+00-DSCBAREA+140*2)  FORMAT 3 # 3         U015\n         DC    Y(DS3EXTNT+10-DSCBAREA+140*2)                       U015\n         DC    Y(DS3EXTNT+20-DSCBAREA+140*2)                       U015\n         DC    Y(DS3EXTNT+30-DSCBAREA+140*2)                       U015\n         DC    Y(DS3ADEXT+00-DSCBAREA+140*2)                       U015\n         DC    Y(DS3ADEXT+10-DSCBAREA+140*2)                       U015\n         DC    Y(DS3ADEXT+20-DSCBAREA+140*2)                       U015\n         DC    Y(DS3ADEXT+30-DSCBAREA+140*2)                       U015\n         DC    Y(DS3ADEXT+40-DSCBAREA+140*2)                       U015\n         DC    Y(DS3ADEXT+50-DSCBAREA+140*2)                       U015\n         DC    Y(DS3ADEXT+60-DSCBAREA+140*2)                       U015\n         DC    Y(DS3ADEXT+70-DSCBAREA+140*2)                       U015\n         DC    Y(DS3ADEXT+80-DSCBAREA+140*2)                       U015\n         DC    Y(DS3EXTNT+00-DSCBAREA+140*3)  FORMAT 3 # 4         U015\n         DC    Y(DS3EXTNT+10-DSCBAREA+140*3)                       U015\n         DC    Y(DS3EXTNT+20-DSCBAREA+140*3)                       U015\n         DC    Y(DS3EXTNT+30-DSCBAREA+140*3)                       U015\n         DC    Y(DS3ADEXT+00-DSCBAREA+140*3)                       U015\n         DC    Y(DS3ADEXT+10-DSCBAREA+140*3)                       U015\n         DC    Y(DS3ADEXT+20-DSCBAREA+140*3)                       U015\n         DC    Y(DS3ADEXT+30-DSCBAREA+140*3)                       U015\n         DC    Y(DS3ADEXT+40-DSCBAREA+140*3)                       U015\n         DC    Y(DS3ADEXT+50-DSCBAREA+140*3)                       U015\n         DC    Y(DS3ADEXT+60-DSCBAREA+140*3)                       U015\n         DC    Y(DS3ADEXT+70-DSCBAREA+140*3)                       U015\n         DC    Y(DS3ADEXT+80-DSCBAREA+140*3)                       U015\n         DC    Y(DS3EXTNT+00-DSCBAREA+140*4)  FORMAT 3 # 5         U015\n         DC    Y(DS3EXTNT+10-DSCBAREA+140*4)                       U015\n         DC    Y(DS3EXTNT+20-DSCBAREA+140*4)                       U015\n         DC    Y(DS3EXTNT+30-DSCBAREA+140*4)                       U015\n         DC    Y(DS3ADEXT+00-DSCBAREA+140*4)                       U015\n         DC    Y(DS3ADEXT+10-DSCBAREA+140*4)                       U015\n         DC    Y(DS3ADEXT+20-DSCBAREA+140*4)                       U015\n         DC    Y(DS3ADEXT+30-DSCBAREA+140*4)                       U015\n         DC    Y(DS3ADEXT+40-DSCBAREA+140*4)                       U015\n         DC    Y(DS3ADEXT+50-DSCBAREA+140*4)                       U015\n         DC    Y(DS3ADEXT+60-DSCBAREA+140*4)                       U015\n         DC    Y(DS3ADEXT+70-DSCBAREA+140*4)                       U015\n         DC    Y(DS3ADEXT+80-DSCBAREA+140*4)                       U015\n         DC    Y(DS3EXTNT+00-DSCBAREA+140*5)  FORMAT 3 # 6         U015\n         DC    Y(DS3EXTNT+10-DSCBAREA+140*5)                       U015\n         DC    Y(DS3EXTNT+20-DSCBAREA+140*5)                       U015\n         DC    Y(DS3EXTNT+30-DSCBAREA+140*5)                       U015\n         DC    Y(DS3ADEXT+00-DSCBAREA+140*5)                       U015\n         DC    Y(DS3ADEXT+10-DSCBAREA+140*5)                       U015\n         DC    Y(DS3ADEXT+20-DSCBAREA+140*5)                       U015\n         DC    Y(DS3ADEXT+30-DSCBAREA+140*5)                       U015\n         DC    Y(DS3ADEXT+40-DSCBAREA+140*5)                       U015\n         DC    Y(DS3ADEXT+50-DSCBAREA+140*5)                       U015\n         DC    Y(DS3ADEXT+60-DSCBAREA+140*5)                       U015\n         DC    Y(DS3ADEXT+70-DSCBAREA+140*5)                       U015\n         DC    Y(DS3ADEXT+80-DSCBAREA+140*5)                       U015\n         DC    Y(DS3EXTNT+00-DSCBAREA+140*6)  FORMAT 3 # 7         U015\n         DC    Y(DS3EXTNT+10-DSCBAREA+140*6)                       U015\n         DC    Y(DS3EXTNT+20-DSCBAREA+140*6)                       U015\n         DC    Y(DS3EXTNT+30-DSCBAREA+140*6)                       U015\n         DC    Y(DS3ADEXT+00-DSCBAREA+140*6)                       U015\n         DC    Y(DS3ADEXT+10-DSCBAREA+140*6)                       U015\n         DC    Y(DS3ADEXT+20-DSCBAREA+140*6)                       U015\n         DC    Y(DS3ADEXT+30-DSCBAREA+140*6)                       U015\n         DC    Y(DS3ADEXT+40-DSCBAREA+140*6)                       U015\n         DC    Y(DS3ADEXT+50-DSCBAREA+140*6)                       U015\n         DC    Y(DS3ADEXT+60-DSCBAREA+140*6)                       U015\n         DC    Y(DS3ADEXT+70-DSCBAREA+140*6)                       U015\n         DC    Y(DS3ADEXT+80-DSCBAREA+140*6)                       U015\n         DC    Y(DS3EXTNT+00-DSCBAREA+140*7)  FORMAT 3 # 8         U015\n         DC    Y(DS3EXTNT+10-DSCBAREA+140*7)                       U015\n         DC    Y(DS3EXTNT+20-DSCBAREA+140*7)                       U015\n         DC    Y(DS3EXTNT+30-DSCBAREA+140*7)                       U015\n         DC    Y(DS3ADEXT+00-DSCBAREA+140*7)                       U015\n         DC    Y(DS3ADEXT+10-DSCBAREA+140*7)                       U015\n         DC    Y(DS3ADEXT+20-DSCBAREA+140*7)                       U015\n         DC    Y(DS3ADEXT+30-DSCBAREA+140*7)                       U015\n         DC    Y(DS3ADEXT+40-DSCBAREA+140*7)                       U015\n         DC    Y(DS3ADEXT+50-DSCBAREA+140*7)                       U015\n         DC    Y(DS3ADEXT+60-DSCBAREA+140*7)                       U015\n         DC    Y(DS3ADEXT+70-DSCBAREA+140*7)                       U015\n         DC    Y(DS3ADEXT+80-DSCBAREA+140*7)                       U015\n         DC    Y(DS3EXTNT+00-DSCBAREA+140*8)  FORMAT 3 # 9         U015\n         DC    Y(DS3EXTNT+10-DSCBAREA+140*8)                       U015\n         DC    Y(DS3EXTNT+20-DSCBAREA+140*8)                       U015\n         DC    Y(DS3EXTNT+30-DSCBAREA+140*8)                       U015\n         DC    Y(DS3ADEXT+00-DSCBAREA+140*8)                       U015\n         DC    Y(DS3ADEXT+10-DSCBAREA+140*8)                       U015\n         DC    Y(DS3ADEXT+20-DSCBAREA+140*8)                       U015\n         DC    Y(DS3ADEXT+30-DSCBAREA+140*8)                       U015\n         DC    Y(DS3ADEXT+40-DSCBAREA+140*8)                       U015\n         DC    Y(DS3ADEXT+50-DSCBAREA+140*8)                       U015\n         DC    Y(DS3ADEXT+60-DSCBAREA+140*8)                       U015\n         DC    Y(DS3ADEXT+70-DSCBAREA+140*8)                       U015\n         DC    Y(DS3ADEXT+80-DSCBAREA+140*8)                       U015\n         DC    Y(DS3EXTNT+00-DSCBAREA+140*9)  FORMAT 3 # 10        U015\n         DC    Y(DS3EXTNT+10-DSCBAREA+140*9)                       U015\n         DC    Y(DS3EXTNT+20-DSCBAREA+140*9)                       U015\n         DC    Y(DS3EXTNT+30-DSCBAREA+140*9)                       U015\n         DC    Y(DS3ADEXT+00-DSCBAREA+140*9)                       U015\n         DC    Y(DS3ADEXT+10-DSCBAREA+140*9)                       U015\n         DC    Y(DS3ADEXT+20-DSCBAREA+140*9)                       U015\n         DC    Y(DS3ADEXT+30-DSCBAREA+140*9)                       U015\n         DC    Y(DS3ADEXT+40-DSCBAREA+140*9)                       U015\n         DC    Y(DS3ADEXT+50-DSCBAREA+140*9)                       U015\n         DC    Y(DS3ADEXT+60-DSCBAREA+140*9)                       U015\n         DC    Y(DS3ADEXT+70-DSCBAREA+140*9)                       U015\n         DC    Y(DS3ADEXT+80-DSCBAREA+140*9)                       U015\n         SPACE 2\nCAM#SRCH CAMLST  SEARCH,DSNAME,SERIAL,DS1FMTID-DS1FMTID            U015\n         SPACE 2\nCAM#SEEK CAMLST  SEEK,SEEKADDR,SERIAL,IECSDSL3-IECSDSL3            U015\n         SPACE 4\n*--------CATALOG SEARCH MACRO\nLOCLIST  CAMLST NAME,DSNAME,,CATBLOCK\n         SPACE 4\n*--------MESSAGES\nBUFF0RDW DC    Y(4+OL@LEN0,0)                                      U017\nBUFFER0  DC    C'Dsname:  '                                        U017\nOL@DSN   DC    CL44' '                                             U017\nOL@LEN0  EQU   *-BUFFER0                                           U017\n         SPACE 3\nHEADER1  DC    H'84,0'\n         DC    CL80'Typ--Alloc---Used-Xt-Sec-Rf--Blksi-Lrecl-Org--C/Dat$\n               e---L/Used--Volser-Device-P '                       U017\nBUFF1RDW DC    H'84,0'\nBUFFER1  DC    CL80' '\n         ORG   *-80                                                U002\nOL@TYPEO DS    CL3,C                    CYL/TRK/REC/ABS            U002\nOL@ALLOC DS    CL6,C                                               U002\nOL@USED  DS    CL6                      XTNTS WILL BUMP AGAINST    U015\nOL@XTNTS DS    CL3,C                        USED, IF XTNTS > 99    U015\nOL@SECND DS    CL3,C                                               U003\nOL@RECFM DS    CL3,C                                               U002\nOL@BLKSI DS    CL5,C                                               U002\nOL@LRECL DS    CL5,C                                               U002\nOL@DSORG DS    CL3,C                                               U002\nOL@CDATE DS    CL8,C                                               U002\nOL@LDATE DS    CL8,C                                               U002\nOL@VOLSR DS    CL6,C                                               U002\nOL@DEVIC DS    CL6,C                                               U002\nOL@PROT1 DS    C                                                   U002\n         ORG   ,                                                   U002\n         SPACE 3\nHEADER2  DC    H'84,0'                                             U005\n         DC    CL80'LM-Date-LM-Time--LM-id---------------M-TrBal--E/Dat$\n               e--Key---Rkp--Optcd-------P '                       U021\nBUFF2RDW DC    H'84,0'                                             U005\nBUFFER2  DC    CL80' '                                             U005\n         ORG   *-80                                                U005\nOL@LMDAT DS    CL8,C                                               U017\nOL@LMTIM DS    CL5,CL2                                             U017\nOL@LMID  DS    CL8,CL13                                            U021\n*L@USCNT DS    CL8                      %%%                        U017\nOL@MOD   DS    C,C                                                 U021\nOL@TRBAL DS    CL5,C                                               U021\nOL@EDATE DS    CL8,C                                               U005\nOL@KEYL  DS    CL3,C                                               U005\nOL@RKP   DS    CL5,CL2                                             U021\nOL@OPTCX DS    CL2,C                                               U021\nOL@OPTCD DS    CL8,C                                               U021\nOL@PROT2 DS    C                                                   U005\n         ORG   ,                                                   U019\n         SPACE 3\nHEADER3  DC    Y(4+OL@LEN3,0)                                      U010\n         DC    C'Ext#-Start/CCHH--S/Trk----End/CCHH--E/Trk--Length--Typ$\n               e-------------------------'                         U023\nBUFF3RDW DC    Y(4+OL@LEN3,0)                                      U010\nBUFFER3  DC    CL80' '                                             U023\n         ORG   BUFFER3                                             U023\nOL@XTNT  DS    CL3,CL3                                             U023\nOL@START DS    CL9,CL2                                             U011\nOL@STRK  DS    CL5,CL3                                             U011\nOL@END   DS    CL9,CL2                                             U011\nOL@ETRK  DS    CL5,CL3                                             U011\nOL@LNTH  DS    CL5,CL2                                             U010\nOL@XTYPE DS    CL29                                                U023\nOL@LEN3  EQU   *-BUFFER3                LENGTH OF FORTH LINE       U010\n         SPACE 3\nHEADER4  DC    Y(4+OL4@LEN,0)                                      U025\n         DC    CL80'------OutA-Blkcount-Fseq-Rf--Blksi-Lrecl-S-D--C/Dat$\n               e---L/Used--Volser-Device   '                       U025\nBUFF4RDW DC    Y(4+OL4@LEN,0)                                      U025\nBUFFER4  EQU   *                                                   U025\n         DC    CL6' '                                              U025\nOL4@OUTA DC    CL4' ',C' '                                         U025\nOL4@BCNT DC    CL8' ',C' '                                         U025\nOL4@FSEQ DC    CL4' ',C' '                                         U025\nOL4@RFM  DC    CL3' ',C' '                                         U002\nOL4@BKSZ DC    CL5' ',C' '                                         U002\nOL4@LRCL DC    CL5' ',C' '                                         U002\nOL4@SCR  DC    C' ',C' '                                           U025\nOL4@DEL  DC    C' ',C' '                                           U025\nOL4@CDAT DC    CL8' ',C' '                                         U025\nOL4@LDAT DC    CL8' ',C' '                                         U025\nOL4@VOL  DC    CL6' ',C' '                                         U025\nOL4@DEV  DC    CL6' '             ,C' '                            U025\nOL4@LEN  EQU   *-BUFFER4                LENGTH OF first tape line  U025\n         SPACE 3\nHEADER5  DC    Y(4+OL5@LEN,0)                                      U025\n         DC    CL80'Cre/Job--Last/Job-Vseq-1stVol-PrvVol-NxtVol---E/Dat$\n               e--Out/Date'                                        U025\nBUFF5RDW DC    Y(4+OL5@LEN,0)                                      U025\nBUFFER5  EQU   *                                                   U025\nOL5@CJOB DC    CL8' ',C' '                                         U025\nOL5@LJOB DC    CL8' ',C' '                                         U025\nOL5@VSEQ DC    CL4' ',C' '                                         U025\nOL5@1VOL DC    CL6' ',C' '                                         U025\nOL5@PRVL DC    CL6' ',C' '                                         U025\nOL5@NXVL DC    CL6' ',CL2' '                                       U025\nOL5@EDAT DC    CL8' ',C' '                                         U025\nOL5@ODAT DC    CL8' ',C' '                                         U025\nOL5@LEN  EQU   *-BUFFER5                LENGTH OF second tape line U025\n         SPACE 3\nDS1CYLA  EQU      B'11000000'           CYLINDER ALLOCATION\nDS1RECA  EQU      B'01000000'           BLOCK ALLOCATION\nDS1TRKA  EQU      B'10000000'           TRACK ALLOCATION\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                           ERROR MESSAGES                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\nWARN     DC    H'49,0'                                             U012\n         DC    C'< Warning >  '                                    U012\nWARNMSG  DC    CL32' '                                             U012\n         SPACE 1\nLOCMSGS  DC    CL32'CVOL not mounted                ' RC=04 -> 04  U012\n         DC    CL32'Dataset not cataloged           ' RC=08 -> 08  U012\n         DC    CL32'Index name specified            ' RC=12 -> 12  U012\n         DC    CL32'Dataset found at lower level    ' RC=16 -> 16  U012\n         DC    CL32'Syntax error in dataset  name   ' RC=20 -> 20  U012\n         DC    CL32'Permanent I/O error             ' RC=24 -> 24  U012\n         DC    CL32'TTR outside of SYSCTLG          ' RC=28 -> 28  U012\n         DC    CL32'Invalid LOCATE work area pointer' RC=32 -> 32  U012\n         SPACE 1\nDSNERRS  DC    CL32'Volume not mounted              ' RC=04 -> 36  U012\n         DC    CL32'Dataset not on volume indicated ' RC=08 -> 40  U012\n         DC    CL32'Invalid OBTAIN work area pointer' RC=12 -> 44  U012\n         DC    CL32'CCHH not within VTOC            ' RC=16 -> 48  U012\nTRACKS   DC    F'0'\nCATBLOCK DS    34D\nDEVCODE  EQU   CATBLOCK+4                                          U012\nSERIAL   EQU   CATBLOCK+6\nFSN      EQU   CATBLOCK+12                                         U012\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                            DEVICE TABLE                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 4\n*  DEVICE ATTRIBUTES TABLE.  FORMAT IS H'TRKS/CYL',CL6'NAME'\nDEVTABLE DC    H'0000',C'??????'        00   INVALID ENTRY         U002\n         DC    H'0010',C'2311  '        01                         U002\n         DC    H'0200',C'2301  '        02                         U002\n         DC    H'0100',C'2303  '        03                         U002\n         DC    H'0046',C'2302  '        04                         U002\n         DC    H'1300',C'2321  '        05                         U002\n         DC    H'0008',C'2305-1'        06                         U002\n         DC    H'0008',C'2305-2'        07                         U002\n         DC    H'0020',C'2314  '        08                         U002\n         DC    H'0019',C'3330  '        09                         U002\n         DC    H'0012',C'3340  '        0A                         U002\n         DC    H'0030',C'3350  '        0B                         U002\n         DC    H'0012',C'3375  '        0C                         U013\n         DC    H'0019',C'3330-1'        0D                         U002\n         DC    H'0015',C'3380  '        0E                         U013\n         DC    H'0000',C'??????'        0F   PATCH SPACE IN TABLE  U002\nDEVTMAX  EQU   (*-DEVTABLE)/8           HIGHEST                    U002\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                        TSO CONTROL BLOCKS                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 4\nECB      DC    F'0'                    EVENT CONTROL BLOCK\nPPLAREA  DC    7A(0)                   PARSE PARAMETER LIST\nIOPLAREA DC    4A(0)                   I/O PARAMETER LIST\nPARS#ANS DC    A(0)                    ANSWER LIST (PDL) ADDRESS\nSEEKADDR DC    XL5'00'                  CCHHR OF NEXT FMT3         U015\nPUTLNMFL PUTLINE   MF=L                PUTLINE PARAMETER LIST\n         PRINT NOGEN                                               U005\nPCL      IKJPARM   DSECT=PDL\nDSN      IKJPOSIT  DSNAME,USID,LIST,PROMPT='DATA SET NAME'         U001\n* STUPID IKJKEYWD MACRO DOES NOT ALLOW COMMENTS: UPDATE NOTE HERE: U001\nP#NOHEAD IKJKEYWD\n         IKJNAME  'NOHEADER'                                       U001\n         IKJNAME  'HEADER'                                         U001\n* STUPID IKJKEYWD MACRO DOES NOT ALLOW COMMENTS: UPDATE NOTE HERE: U005\nP#FULL   IKJKEYWD\n         IKJNAME  'FULL',ALIAS='ALL'                               U005\n* STUPID IKJKEYWD MACRO DOES NOT ALLOW COMMENTS: UPDATE NOTE HERE: U010\nP#EXTENT IKJKEYWD\n         IKJNAME  'EXTENTS'                                        U010\n* STUPID IKJKEYWD MACRO DOES NOT ALLOW COMMENTS: UPDATE NOTE HERE: U012\nP#NOLIST IKJKEYWD\n         IKJNAME  'NOLIST'                                         U012\n         IKJNAME  'LIST'                                           U012\n* STUPID IKJKEYWD MACRO DOES NOT ALLOW COMMENTS: UPDATE NOTE HERE: U012\nP#SAVE   IKJKEYWD\n         IKJNAME  'SAVE'                                           U012\n         IKJNAME  'NOSAVE'                                         U012\n* STUPID IKJKEYWD MACRO DOES NOT ALLOW COMMENTS: UPDATE NOTE HERE: U022\nP#TRKS   IKJKEYWD\n         IKJNAME  'TRKS',ALIAS=('TRACKS')                          U022\n* STUPID IKJKEYWD MACRO DOES NOT ALLOW COMMENTS: UPDATE NOTE HERE: U012\nP#JDATE  IKJKEYWD\n         IKJNAME  'J',ALIAS=('JDATE','JULIAN')                     U012\nP#VOLUME IKJKEYWD\n         IKJNAME  'VOLUME',SUBFLD=S#VOLUME                         U004\nS#VOLUME IKJSUBF\nI#VOLUME IKJIDENT  'VOLUME',MAXLNTH=6,                             U004$\n               FIRST=ALPHANUM,OTHER=ALPHANUM,                      U004$\n               PROMPT='VOLUME SERIAL WHERE DATASET RESIDES'        U004\n         IKJENDP\n         PRINT GEN                                                 U005\n         SPACE 3\nWORKD    DSECT                          RESUME                     U006\nRC       DS    F                        RETURN CODE                U012\nCLISTSET DS    A                        ADDR OF 'CLISTSET' MODULE  U012\nBLANKS   DS    CL80                                                U006\n         SPACE 2\nSETPARM  DS    0F                       PARM FOR \"CLISTSET\"        U012\nECTADDR  DS    A                        -> ECT                     U012\nVALADDR  DC    A(VALUE)                 -> VALUE TO BE SET         U012\nNAMADDR  DC    A(NAME)                  -> SYMBOLIC VARIABLE NAME  U012\n         SPACE 1\nNAME     DS    H,CL20                   LENGTH OF NAME, NAME       U012\nVALUE    DS    H,CL255                  LENGTH OF VALUE, VALUE     U012\n         SPACE 2\n          AIF   (&@@U01 EQ 0).NO$TMS2                              U025\n         OPENTMC  MF=L                                             U025\n*\nTMRECORD TMRECORD  ,                                               U025\n*\n         TMSDSNB  ,                                                U025\n*\n.NO$TMS2  ANOP                                                     U025\n         SPACE 2\nDSCBAREA DS    0D                                                  U015\n         IECSDSL1 1                                                U015\n         ORG   DS1DSSN                  FMT1+45                    U017\nDS1USCNT DS    FL3                      ASM2 - USE COUNT           U017\nDS1LMDAT DS    XL3    YDD               ASM2 - LAST MODIFY DATE    U017\n         ORG   DS1SYSCD                 FMT1+62                    U017\nDS1LMID  DS    CL8                      ASM2 - LAST MODIFY ID      U017\n          AIF   (&@@ASM2 LT 310).ASM2X1                            U024\n         DS    CL1                      ASM2 - wasted for stupidityU024\nDS1LMTIM DS    XL2    HHMM              ASM2 - LAST MODIFY TIME    U024\n          AGO   .ASM2X2                                            U024\n.ASM2X1   ANOP                                                     U024\n         ORG   DSCBAREA+80              +2 INTO 4 BYTES RESERVED   U017\nDS1LMTIM DS    XL2    HHMM              ASM2 - LAST MODIFY TIME    U017\n.ASM2X2   ANOP                                                     U024\n         ORG   ,                                                   U017\n         SPACE 2\n         DS    0D                                                  U015\n         IECSDSL1 3                                                U015\n         SPACE 2\nIOSPARM  DC    A(IOSWORK,IOSDVCLS,IOSAUCB+X'80000000')             U020\nIOSAUCB  DC    A(0)                     IOSVSUCB returned UCB addr U020\nIOSDVCLS DC    AL1(UCB3DACC)            IOSVSUCB DASD device class U020\nIOSWORK  DC    XL100'00'                IOSVSUCB service work area U020\n         SPACE 2\n         DS    9XL140                   SPACE FOR UP TO 127 XTNTS  U015\n         SPACE 2\nWORKLEN  EQU   *-WORKD                                             U006\n         SPACE 3\n         PRINT NOGEN                                               U020\n         IKJCPPL\n         IKJPPL\n         IKJIOPL\n         CVT  DSECT=YES                                            U020\n         IEFUCBOB ,                                                U020\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DUCB": {"ttr": 7686, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\"\\x00\\x00\\x00y(_\\x00\\x902o\\x13\\x15\\x05F\\x02\\xd8\\x04`\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.34", "flags": 0, "createdate": "1979-10-12T00:00:00", "modifydate": "1990-11-22T13:15:00", "lines": 1350, "newlines": 728, "modlines": 1120, "user": "LDW"}, "text": "DUCB     TITLE 'D U C B - DISPLAY UNITS COMMAND FROM TSO/DCMS'\n***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1988 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.                                     *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1, with DFP 3.1),  *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc-oberon!LDW (last resort)                           *\n*                                                                     *\n*          (213) 743-5391 (direct -- 11 am to 7 pm Pacific time)      *\n*          (213) 743-2957 (msgs)                                      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, or 714.  Sorry.                                       *\n*                                                                     *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Updates:                                                           *\n*    22Nov90  U027 LDW  Show if device is O-BOX                       *\n*    27Aug90  U026 LDW  Add U024 new commands to HELP displays        *\n*                       Change HELP panels to mixed case              *\n*    15Apr90  U025 LDW  Add UCBREW display                            *\n*    30Mar90  U024 LDW  Add 3380K recognition                         *\n*                       Reduce file= to MVS max of 4 digits           *\n*                       Add support for COMM-only, DISP-only, and     *\n*                          U/R-only displays                          *\n*                       Fix bugs in Mode= display                     *\n*    20Feb90  U023 EMS  Add 2 digits to File= disp.                   *\n*                       Add 3390 recognition                          *\n*                       Fix a few literal length errors               *\n*    20Feb88  U022 LDW  Fix for MVS/XA                                *\n*                       Correct the VIO test                          *\n*                       Display 'F-Box' for boxed devices             *\n*                       Change some things to lower case (not flagged)*\n*                       Change some DC's to literals     (not flagged)*\n*    23JUN86  U021 LDW  CHECK FOR AND DISPLAY 3380E                   *\n*    22JUN86  U020 LDW  FIX INFINITE LOOP PROBLEM WHEN NO DEVICES     *\n*                          MEET DISPLAY CRITERIA                      *\n*    02/28/86 U019 LDW  FIX SO THAT IF THE NUMBER OF DEVICES TO BE    *\n*                          DISPLAYED IS AN EXACT MULTIPLE OF THE      *\n*                          SCREEN SIZE, SCROLLING PAST THE END        *\n*                          DOESN'T DISPLAY A BLANK SCREEN             *\n*                       ALLOW OPERATOR COMMANDS TO BE ISSUED VIA      *\n*                          \"/XXX\"                                     *\n*                       ADD DEVICE TYPES                              *\n*    02/23/86 U018 LDW  USE UCB LOOKUP ROUTINE IF SP1.3 OR SP2        *\n*                       USE @GLOBALS                                  *\n*                       ADD SMFID SYSTEM ID TO MODE LINE              *\n*    04/12/83 U017 LDW  INDICATE SUSPENDED CH PGM VIA 'A-SPD'         *\n*    03/24/83 U016 LDW  ADD CHECK FOR SUSPENDED CHANNEL PROGRAM       *\n*    10/25/82 U015 LDW  ADD NEW DEVICE TYPES                          *\n*                       FIX TAPE DENSITY LOGIC                        *\n*                       REMOVE DEF=NO FOR NEW PFKEY MACRO             *\n*    07/31/81 U014 SDM  FIX TO MAKE INPUT PARM WORK AGAIN             *\n*    07/23/81 U013 LDW  DISPLAY 'SCRTCH' IF MOUNT PENDING VOLSER IS   *\n*                          BAD                                        *\n*    07/10/81 U012 SDM  CHANGE POSITION LOGIC TO UCBNAME FROM UCBCHAN *\n*                       FIX PARM LENGTH SENSITIVE BUG                 *\n*                       FIX HELP TEXT FOR UNPRIVILEGED USER (&GIS)    *\n*    07/08/81 U011 SDM  COMPLETELY REORGANIZE SCROLLING LOGIC         *\n*                       FIX 0C4 ABENDS WITH 'ON' OR 'OFF' OPERANDS    *\n*                       DISPLAY QUEUED I/O MODE                       *\n*    06/25/81 U010 SDM  CHANGE DEFAULT MODE TO ONLINE TAPES           *\n*                       IMPLEMENT GIBRALTAR COND ASSEMBLY (&GIS)      *\n*                       FORCE NORMAL USERS TO ONLINE TAPES (&GIS)     *\n*    06/09/81 U009 SDM  FIX MOUNT PENDING LOGIC SOME MORE             *\n*                       RECOMPUTE FIRST AUTO UPDATE SCREEN            *\n*                       FIX BUG BACKING UP PAST FIRST UCB             *\n*    03/23/81 U008 SDM  FIX MOUNT PENDING LOGIC                       *\n*    01/26/81 U007 LDW  BUILD TABLE OF DEVICE ADDRESSES DISPLAYED, SO *\n*                          THAT WE CAN SHOW ALL DEVICES EVEN IF A     *\n*                          SWAP HAS OCCURRED, WHICH GETS THE UCB'S    *\n*                          OUT OF ORDER, (THE OLD OPTCHAN CODE        *\n*                          CODE SKIPPED THEM)                         *\n*    01/12/81 U006 LDW  CHANGE 3277 TO 3278                           *\n*                       ADD DEVICE TYPES: 3203, 3290, 3800,           *\n*                                         3838, 3851, 3886            *\n*                       DISPLAY 'C' INSTEAD OF 'A' FOR MCS CONSOLES   *\n*    01/08/81 U005 SDM  RECOGNIZE MOUNT PENDING CONDITION             *\n*                       MOVE CVTA TO DSECT (FIX REENTERABILITY)       *\n*    08/12/80 U004 LDW  STANDARDIZE PF KEY USAGE TO CONFORM TO SPF    *\n*                       CHANGE ENTER KEY TO REDISPLAY RATHER THAN     *\n*                          SCROLL DOWN                                *\n*                       ADD \"+\", \"-\", \".\" COMMANDS IN CASE NO PFK'S   *\n*                       ADD HELP COMMAND                              *\n*                       ACCEPT \"END\" TO EXIT                          *\n*    04/29/80 U003 LDW  SHOW FILE SEQUENCE NUMBER FOR TAPES           *\n*    04/14/80 U002 LDW  SHOW OWNER FOR TAPE DRIVES                    *\n*                       DEFINE PF3 TO BE EXIT                         *\n*                       MISCELLANEOUS CHANGES FOR NEW TERMIO$         *\n*    10/12/79 U001 LDW  ADD SOME UNIT TYPES                           *\n*                       CHANGE DEFAULT TO 'ONLINE' FROM 'ALL'         *\n*---------------------------------------------------------------------*\n         SPACE 4\n         MACRO\n         DX    &HEXTYP,&CHAR\n         DC    X'&HEXTYP'\n         DC    CL7&CHAR\n         MEND\n         SPACE 3\n         MACRO\n&NFS     $     &TEXT\n&NFS     DC    CL79&TEXT\n         MEND\n         EJECT\n         COPY  @GLOBALS                                            U018\n         EJECT\n         SPACE 3\n*.\n* DUCB  -\n*   DISPLAY UNITS COMMAND FROM TSO/DCMS\n*   ALL SYSGENNED UNITS ARE DISPLAYED STARTING FROM THE WORD ZERO\n*\n*   INPUT PARAMETERS ALLOWED -\n*      D - DISPLAY DASD ONLY\n*      T - DISPLAY TAPE ONLY\n*      AL - DISPLAY ALL DEVICES\n*      Q - DISPLAY ONLY DEVICES WITH QUEUE LENGTH > 0\n*      CUU - DISPLAY BEGINNING AT UNIT 'CUU'\n*\n* PF KEY DEFINITIONS -\n*\n*    -----\n*   | PF2 |   AUTO UPDATE MODE - REDISPLAY CURRENT SCREEN          U004\n*   |     |\n*    -----\n*\n*    -----\n*   | PF3 |   EXIT                                                 U002\n*   |     |\n*    -----\n*\n*    -----\n*   | PF4 |   SWITCH MODES - (A) DISPLAY ALL SYSGEN'D UNITS        U004\n*   |     |                  (B) DISPLAY ONLY ONLINE UNITS\n*    -----\n*\n*    -----\n*   | PF7 |   SCROLL UP 20 UNITS\n*   |     |\n*    -----\n*\n*    -----\n*   | PF8 |   SCROLL DOWN 20 UNITS\n*   |     |\n*    -----\n*\n*    -----\n*   | PF9 |   RESTART AT FIRST UCB, CLEAR ALL FLAGS\n*   |     |\n*    -----\n*\n*\n* REGISTER USAGE\n*\n*    R2 - POINTER TO CURRENT UCB LOOKUP TABLE ENTRY\n*    R3 - POINTER TO CURRENT UCB NAME TABLE ENTRY\n*    R4 - POINTER TO CURRENT SCREEN LINE ENTRY\n*    R5 - POINTER TO THE CURRENT UCB\n*    R7 - POINTER TO LAST UCB DISPLAYED\n*    R9 - SUBROUTINE LINKAGE REGISTER\n*   R11 - BASE+4096\n*   R12 - BASE\n*\n*  THIS PROGRAM DOES NOT ATTEMPT TO FIND THE 'OPTCHAN' UNITS SO YOU\n*  MAY SEE SOME UNITS APPEARING MORE THAN ONCE.\n*\n*  *SDC* CODE ATTEMPTS TO SKIP OPTCHAN DEVICE UCB'S, BUT MAY SKIP\n*  OTHER DEVICES IF THERE HAS BEEN A 'SWAP' SINCE THE LAST IPL.\n*\n* IF YOU HAVE ANY QUESTIONS PLEASE CALL:\n*\n*     FRED LUDDY\n*     AMDAHL CORP.\n*     1250 E ARQUES\n*     SUNNYVALE CA.\n*   PHONE:\n*     (408) 735 4011\n*\n*.\n         EJECT\nDUCB     DCMSTART RENT,LV=DCMSWLEN\n         SPACE 1\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         USING DUCB+4096,R11\n         SPACE 2\n* INITIALIZE AREAS IN DSECT\n         SPACE 1\n         NI    IOCBFLGD,255-IOCBDYON+IOCBDFRC                      U002\n         OI    IOCBFLGC,IOCBCRAO+IOCBCFRA                          U002\n         SPACE 1\n         MVC   DEVCLAS,=C'Tape'         DEFAULT = TAPE             U010\n         MVI   FLAG1,F1ON+F1TAPE        SET TO ONLINE TAPES ONLY   U010\n         MVI   FLAG2,0                  INIT OTHER FLAGS           U019\n         SPACE 1\n         L     R2,CVTPTR                AND IN THE BEGINNING...    U011\n         USING CVT,R2                                              U018\n         L     R15,CVTSMCA              -> SMF CONTROL BLOCK       U018\n         MVC   SYSID,SMCASID-SMCABASE(R15)  SAVE SMF ID            U018\n          AIF   (&@@SPLVL GE 130).SP01                             U018\n         L     R2,CVTILK2               -> UCB WORDS               U011\n         ST    R2,UCBLTBL               SAVE POINTER TO THE BEGIN  U011\n         SR    R5,R5                    CLEAR FOR ICM (LATER)\n          AGO   .SP02                                              U018\n.SP01     ANOP                                                     U018\n         MVC   IOSVSUCB,CVTUCBSC        SAVE IOSVSUCB ADDR         U018\n         XC    UCBWORK,UCBWORK          INIT IOSVSUCB WORK AREA    U018\n         LA    R14,UCBWORK              -> 100 BYTE WORK AREA      U018\n         LA    R15,=X'00'               -> CLASS BYTE              U018\n         LA    R0,UCBADDR               -> ANSWER AREA             U018\n         STM   R14,R0,UCBPARM           SET UP PARMS FOR IOSVSUCB  U018\n.SP02     ANOP                                                     U018\n         DROP  R2                       CVT                        U018\n         SPACE 1\n         L     R1,0(,R1)                ADDRESS OF COMMAND STRING\n         LH    R2,0(,R1)                LOAD COMMAND STRING LENGTH\n         LH    R3,2(,R1)                LOAD OFFSET\n         LA    R6,4(R1,R3)              BEGINNING OF SUBCOMMAND DATA\n         SPACE 1\n         L     R1,PSATNEW-PSA           -> MY TCB                  U018\n         L     R1,TCBJSCB-TCB(,R1)      -> JSCB                    U018\n         L     R1,JSCBPSCB-IEZJSCB(,R1) -> PSCB                    U018\n         USING PSCB,R1                                             U018\n         TM    &@@STAFF                 DATA CENTER STAFF?         U018\n         BZ    *+8                      NO - SKIP                  U018\n         OI    FLAG2,F2PRIV             INDICATE PRIVILEGED USER   U012\n         TM    PSCBATR1,PSCBCTRL        OPERATOR AUTHORITY?        U019\n         BZ    *+8                      NO - SKIP                  U019\n         OI    FLAG2,F2OPER             YES - REMEMBER             U019\n         DROP  R1                       IKJPSCB                    U018\n         SPACE 1\nINIT1    SR    R2,R3                    SUBTRACT OFFSET OF 'SUBCMDS'\n         SH    R2,=H'4'                 SUB LEN OF HEADER          U012\n         BNP   RESTART                  NO SUBCOMMANDS             U012\n         SPACE 1\nINSHIFT  EQU   *\n         LR    R1,R6                    -> FIRST BYTE              U012\nIS01     CLI   0(R1),C' '               ENDING BLANK?              U012\n         BE    IS02                     YES, END OF DATA           U012\n         LA    R1,1(,R1)                NO, INCREMENT POINTER      U012\n         BCT   R2,IS01                  REDUCE COUNT AND LOOP      U012\nIS02     LR    R2,R1                    -> END OF SUBCMD + 1       U012\n         SR    R2,R6                    LENGTH OF SUBCMD           U012\n         BNP   RESTART                  NO SUBCMD, IGNORE          U012\n         BCTR  R2,0                     REDUCE FOR EX              U012\n         SPACE 1\n         EX    R2,UPSHIFT               SHIFT TO UPPERCASE\n         SPACE 1\n         CLC   =C'END',0(R6)            WANT OUT?                  U012\n         BE    END1                     YES - LET HIM OUT          U004\n         CLI   0(R6),C'H'               NEED HELP?                 U012\n         BE    HELP                     YES - POOR GUY             U004\n         CLI   0(R6),C'?'               REALLY NEED HELP?          U012\n         BE    HELP                     YES - POOR GUY             U004\n         CLC   =C'DA',0(R6)             DASD ONLY?                 U011\n         BE    PARMDA                   YES - SET IT               U011\n         CLI   0(R6),C'T'               TAPE ONLY?                 U011\n         BE    PARMTA                   YES - SET IT               U011\n         CLC   0(2,R6),=C'CO'           comm only?                 U024\n         BE    PARMCOMM                 yes - set it               U024\n         CLC   0(2,R6),=C'DI'           disp only?                 U024\n         BE    PARMDISP                 yes - set it               U024\n         CLI   0(R6),C'U'               u/r only?                  U024\n         BE    PARMUR                   yes - set it               U024\n         CLI   0(R6),C'Q'               DEVICES WITH I/O QUEUED?   U011\n         BE    PARMQ                    YES - SET IT               U011\n         CLC   =C'ON',0(R6)             ONLINE DEVICES ONLY?       U004\n         BE    PARMON                   YES - SET IT               U011\n         CLC   =C'OF',0(R6)             INCLUDE OFFLINE DEVICES?   U004\n         BE    PARMOF                   YES - SET IT               U011\n         CLC   0(2,R6),=C'AL'           ALL DEVICES?\n         BE    DOALL                                               U011\n         B     SETFIRST                                            U011\n         SPACE 2\nDOALL    MVC   DEVCLAS,=C'All '         SET CLASS MESSAGE\n         NI    FLAG1,255-F1DEVTYP-F1QD  CLEAR types + Q FLAGS      U024\n         B     RESTART\n         SPACE 1\nPARMDA   NI    FLAG1,255-F1DEVTYP       CLEAR types                U024\n         OI    FLAG1,F1DASD             ...YES, SET FLAG\n         MVC   DEVCLAS,=C'Dasd'         SET CLASS MESSAGE\n         B     RESTART\n         SPACE 1\nPARMTA   NI    FLAG1,255-F1DEVTYP       CLEAR types                U024\n         OI    FLAG1,F1TAPE             ...YES, SET FLAG\n         MVC   DEVCLAS,=C'Tape'         SET CLASS MESSAGE\n         B     RESTART                  AND PROCEED\n         SPACE 1\nPARMCOMM NI    FLAG1,255-F1DEVTYP       CLEAR types                U024\n         OI    FLAG1,F1COMM             ...YES, SET FLAG           U024\n         MVC   DEVCLAS,=C'Comm'         SET CLASS MESSAGE          U024\n         B     RESTART                  AND PROCEED                U024\n         SPACE 1\nPARMDISP NI    FLAG1,255-F1DEVTYP       CLEAR types                U024\n         OI    FLAG1,F1DISP             ...YES, SET FLAG           U024\n         MVC   DEVCLAS,=C'Disp'         SET CLASS MESSAGE          U024\n         B     RESTART                  AND PROCEED                U024\n         SPACE 1\nPARMUR   NI    FLAG1,255-F1DEVTYP       CLEAR types                U024\n         OI    FLAG1,F1UR               ...YES, SET FLAG           U024\n         MVC   DEVCLAS,=C'U/R '         SET CLASS MESSAGE          U024\n         B     RESTART                  AND PROCEED                U024\n         SPACE 1\nPARMQ    OI    FLAG1,F1QD+F1ON          SET ONLINE AND QUEUED I/O\n         B     RESTART\n         SPACE 1\nPARMON   OI    FLAG1,F1ON               SET ONLINE ONLY            U011\n         NI    FLAG1,255-F1QD           RESET QUEUED I/O FLAG      U011\n         B     RESTART                                             U011\n         SPACE 1\nPARMOF   NI    FLAG1,255-F1ON-F1QD      SET OFFLINE AND ONLINE     U011\n         B     RESTART                                             U011\n         SPACE 1\nSETFIRST EQU   *\n         MVC   FIRSTUCB,=3C'0'          CLEAR WORK AREA            U012\n         CH    R2,=H'2'                 TOO LONG?                  U012\n         BNH   *+8       >=====+        NO, USE IT AS IS           U012\n         LH    R2,=H'2'        |        YES, CUT IT OFF            U012\n         EX    R2,MOVEUCB  <===+        MOVE INPUT PARM TO PACK W.A.\n         LA    R0,L'FIRSTUCB            LOOP COUNT                 U012\n         LA    R1,FIRSTUCB              FIRST BYTE TO CHECK        U012\nSF01     CLI   0(R1),C'A'               IS IT HIGH ENOUGH FOR HEX? U012\n         BL    RESTART                  NO, IGNORE INPUT           U012\n         CLI   0(R1),C'F'               IS IT A-F ?                U012\n         BNH   SF02                     YES, IT'S OKAY             U012\n         CLI   0(R1),C'0'               IS IT HIGH ENOUGH FOR NUM? U012\n         BL    RESTART                  NO, IGNORE INPUT           U012\n         CLI   0(R1),C'9'               IS IT 0-9 ?                U012\n         BH    RESTART                  NO, IGNORE INPUT           U012\nSF02     LA    R1,1(,R1)                -> NEXT BYTE               U012\n         BCT   R0,SF01                  DECREMENT COUNT AND LOOP   U012\n         XC    FIRSTUCB,=3C'0'          FIX COLLATING SEQUENCE     U012\n         OI    FLAG2,F2POS              INDICATE POSITION REQUEST  U011\n         B     RESTART                  AND PROCEED\n         SPACE 1\nMOVEUCB  MVC   FIRSTUCB(0),0(R6)        EXECUTED                   U012\nUPSHIFT  OC    0(0,R6),BLANKS           EXECUTED\n         SPACE 2\n*   START DISPLAY WITH FIRST UCB\n         SPACE 1\nRESTART  MVC   UCBNBRT,=H'1'            DISPLAY FIRST UCB FOUND    U011\n         NI    FLAG2,255-F2DISP         ASSUME NOTHING DISPLAYED   U020\n         SPACE 1\n*   START DISPLAY WITH 'UCBNBRT' UCB\n         SPACE 1\nREDISP   XC    UCBNBR,UCBNBR            NO UCB'S FOUND YET         U011\n         NI    FLAG2,255-F2FOUND        ASSUME NOTHING FOUND       U019\n          AIF   (&@@SPLVL GE 130).SP03                             U018\n         L     R2,UCBLTBL               INIT UCB LOOKUP POINTER    U011\n          AGO   .SP04                                              U018\n.SP03     ANOP                                                     U018\n         XC    UCBWORK,UCBWORK          START SCAN AT BEGINNING    U018\n.SP04     ANOP                                                     U018\n         LA    R3,NAMELIST              INIT NAME TABLE POINTER    U011\nDU01     EQU   *\n         TM    FLAG2,F2PRIV             PRIVILEGED USER?           U012\n         BO    DU02                     YES, SKIP RESTRICTIONS     U012\n*                                       NORMAL TSO USERS GET ONLY  U010\n*                                          ONLINE TAPES WITHOUT    U010\n*                                          AUTO UPDATE CLASS       U010\n         NI    FLAG1,255-F1DEVTYP       CLEAR FLAGS                U024\n         NI    FLAG2,255-F2AUTO         CLEAR FLAG                 U024\n         NI    IOCBFLGS,255-IOCBFNRD           CLEAR AUTO FLAGS    U010\n         NI    IOCBFLGD,255-IOCBDYON-IOCBDFRC  CLEAR AUTO FLAGS    U010\n         OI    FLAG1,F1ON+F1TAPE        FORCE ONLINE TAPES ONLY    U010\n         MVC   DEVCLAS,=C'Tape'         SET TAPES MESSAGE          U010\nDU02     EQU   *                                                   U010\n*                                       STARTING AT UCB ENTRY POINTED\n*                                       TO BY R2\n         LA    R8,20                    NUMBER OF UNITS TO DISPLAY\n         LA    R0,FORMAT1               CLEAR SCREEN\n         LA    R1,L1                        WORK AREA\n         BAL   R14,@CLEAR                       USING DCMS SUBROUTINE\n         MVC   L1,TITLE                 INITIALIZE TITLE LINE\n         MVC   MODECLH,=C'Class ='         AND LAST LINE           U011\n         MVC   MODECLAS,DEVCLAS                                    U011\n         MVC   MODEMH,=C'Mode ='                                   U011\n         MVC   MODEMODE,=CL19'Queued I/O only'                     U011\n         TM    FLAG1,F1QD               QUEUED I/O ONLY?           U011\n         BO    DU03                     YES, CONTINUE WITH DISPLAY U011\n         MVC   MODEMODE,=CL19'Online only'                         U011\n         TM    FLAG1,F1ON               ONLINE ONLY?               U011\n         BO    DU03                     YES, CONTINUE WITH DISPLAY U011\n         MVC   MODEMODE,=CL19'Online and Offline'                  U011\n         SPACE 1\nDU03     EQU   *\n         MVC   MODESYS,=C'SYS = '                                  U018\n         MVC   MODEID,SYSID             FILL IN SMF SYSTEM ID      U018\n         LA    R4,L1                    GET ADDRESS OF CURRENT ENTRY\n         USING OUTLINE,R4\n         SPACE 1\nDU04     EQU   *                        BCT LOOP HERE...\n*                                       ...FOR EACH LINE OF OUTPUT.\n         LA    R4,79(,R4)               GET NEXT LINE ADDRESS\n         SPACE 1\nDU05     EQU   *                        LOOP TO HERE FOR NEXT UCB.\n          AIF   (&@@SPLVL GE 130).SP05                             U018\n         CLC   0(2,R2),=X'FFFF'         END OF UCB TABLE?\n         BE    PUTOUT                   ...YES, STOP HERE.\n         ICM   R5,3,0(R2)               SEE IF WE HAVE A LIVE ONE\n         BNZ   DU07                     THIS UNIT DOES EXIST\n         USING UCBOB,R5                                            U011\n         SPACE 1\nDU06     EQU   *\n         LA    R2,2(,R2)                GET NEXT\n         B     DU05\n         SPACE 1\n          AGO   .SP06                                              U018\n.SP05     ANOP                                                     U018\n         USING UCBOB,R5                                            U018\n         SPACE 1\nDU06     EQU   *                                                   U018\n         LA    R1,UCBPARM               -> PARMLIST FOR IOSVSUCB   U018\n         L     R15,IOSVSUCB             -> LOOKUP ROUTINE          U018\n         BALR  R14,R15                  INVOKE IOSVSUCB            U018\n         CH    R15,=H'4'                DID IT WORK?               U018\n         BE    PUTOUT                   YES - NO MORE UCBS         U018\n         BL    *+8                      YES - WE GOT A UCB         U018\n         EX    0,*                      NO - INVALID RC            U018\n         L     R5,UCBADDR               GET RETURNED UCB ADDR      U018\n.SP06     ANOP                                                     U018\nDU07     EQU   *\n         SPACE 1\n*    HAVE A POSSIBLE CANDIDATE.  CHECK FLAGS FOR RESTRICTIONS\n*    INDICATED BY USER, AND VERIFY THAT DEVICE MATCHES REQUEST.\n         SPACE 1\n*  BUT FIRST LET'S SEE IF WE ALREADY DID THIS ONE                  U007\n         LA    R14,NAMELIST             -> FIRST                   U007\n         LA    R0,3                     INCREMENT                  U007\nPREVLOOP CR    R14,R3                   END OF LIST?               U011\n         BNL   SHOWNOW                  YES, DISPLAY UNIT          U011\n         CLC   UCBNAME(3),0(R14)        THIS IT?                   U007\n         BE    DU06                     YES - DON'T DISPLAY AGAIN  U007\n         AR    R14,R0                   -> NEXT SLOT               U007\n         B     PREVLOOP                 KEEP LOOKING               U007\n*\n*\nSHOWNOW  MVC   0(3,R14),UCBNAME         SAVE DEVICE ADDRESS        U007\n         AR    R3,R0                    -> NEXT SLOT               U011\n*\n         TM    FLAG1,F1ON               ONLINE ONLY ?\n         BZ    DU08                     NO..\n         TM    UCBSTAT,UCBONLI\n         BZ    DU06                     NOT ONLINE, IGNORE\n*\nDU08     EQU   *\n         TM    FLAG1,F1DASD             LIST DASD ONLY?\n         BZ    CHKTP                    ...NO\n         TM    UCBTBYT3,UCB3DACC        ...YES, CHECK FOR DASD\n         BZ    DU06                     NOT DASD, SKIP\n         B     GOTONE                   ...OK, FORMAT IT\n*\nCHKTP    TM    FLAG1,F1TAPE             LIST TAPE ONLY?\n         BZ    CHKCOMM                  ...NO, PROCEED\n         TM    UCBTBYT3,UCB3TAPE        ...YES, CHECK FOR TAPE\n         BZ    DU06                     NOT TAPE, SKIP\n         B     GOTONE                   ...OK, FORMAT IT           U024\n*\nCHKCOMM  TM    FLAG1,F1COMM             LIST comm ONLY?            U024\n         BZ    CHKDISP                  ...NO, PROCEED             U024\n         TM    UCBTBYT3,UCB3COMM        ...YES, CHECK FOR comm     U024\n         BZ    DU06                     NOT comm, SKIP             U024\n         B     GOTONE                   ...OK, FORMAT IT           U024\n*\nCHKDISP  TM    FLAG1,F1DISP             LIST disp ONLY?            U024\n         BZ    CHKUR                    ...NO, PROCEED             U024\n         TM    UCBTBYT3,UCB3DISP        ...YES, CHECK FOR disp     U024\n         BZ    DU06                     NOT disp, SKIP             U024\n         B     GOTONE                   ...OK, FORMAT IT           U024\n*\nCHKUR    TM    FLAG1,F1UR               LIST u/r  ONLY?            U024\n         BZ    GOTONE                   ...NO, PROCEED             U024\n         TM    UCBTBYT3,UCB3UREC        ...YES, CHECK FOR u/r      U024\n         BZ    DU06                     NOT u/r , SKIP             U024\n*\nGOTONE   EQU   *                        PASSED DASD/TAPE CRITERIA\n*   NOW CONTROL PAGING BY BYPASSING ACCEPTABLE UCB'S UNTIL THE\n*   CONTROL COUNTER IS EQUAL TO THE TOP OF SCREEN TARGET.\n         LA    R1,1                                                U011\n         AH    R1,UCBNBR                                           U011\n         STH   R1,UCBNBR                                           U011\n         CH    R1,UCBNBRT               HAVE WE HIT TOP OF SCREEN? U011\n         BL    DU06                     NO, SKIP THIS ONE          U011\n         SPACE 1\n*   TEST FOR POSITION BY NAME\nCKPOS    TM    FLAG2,F2POS              POSITIONING BY NAME?       U011\n         BNO   TESTQ                    NO, SKIP THIS TEST         U011\n         MVC   DWORK(3),UCBNAME         GET UCB IDENTIFIER         U012\n         XC    DWORK(3),=3C'0'          FIX COLLATING SEQUENCE     U012\n         CLC   DWORK(3),FIRSTUCB        IS IT PAST FIRST REQ'D UCB?U012\n         BL    DU06                     ...NO, SKIP IT.\n         NI    FLAG2,255-F2POS          RESET POSITIONING FLAG     U011\n         MVC   UCBNBRT,UCBNBR           SET TOP OF SCREEN NUMBER   U011\n         SPACE 1\n*   NOW TEST FOR I/O QUEUED RESTRICTIONS\nTESTQ    TM    FLAG1,F1QD               ONLY DEVICES W/ I/O QUEUED?\n         BZ    MOVEIT                   ...NO, THEN THIS ONE IS OK.\n          AIF   (&@@SPLVL GE 200).SPX1                             U022\n         CLI   UCBCNT,X'00'             ANY QUEUE?\n         BZ    DU06                     ...NO, SKIP THIS ONE.\n.SPX1     ANOP                                                     U018\n*\n*  THIS UCB HAS PASSED ALL THE SELECTION CRITERIA.\n*  BEGIN FORMATTING OUTPUT INFORMATION.\n*\nMOVEIT   EQU   *\n         OI    FLAG2,F2FOUND+F2DISP     WE FOUND SOMETHING         U020\n         MVC   OUTUNIT(3),UCBNAME       MOVE THE EBCDIC NAME\n*\n* DETERMINE UNIT TYPE..\n*\n         CLC   UCBTBYT1(4),=F'0'        DUMMY?                     U015\n         BNE   DU09A                    NO - TRY NEXT              U015\n         MVC   OUTTYPE,=CL8'Dummy'      YES - SHOW IT              U015\n         B     DU14                     AND PRESS ON               U015\nDU09A    EQU   *                                                   U015\n         CLI   UCBTBYT3,UCB3TAPE        IS THIS A TAPE\n         BNE   DU09                     NO, TRY NEXT\n         BAL   R9,ITSATAPE              GO DO TAPE UNIT STUFF\n         B     DU14                     AND PRESS ON\nDU09     EQU   *\n         CLI   UCBTBYT3,UCB3COMM        IS THIS A TERMINAL\n         BNE   DU10                     NO, TRY NEXT\n         BAL   R9,ITSACOMM              GO DO TERMINAL\n         B     DU14                     AND PRESS ON\nDU10     EQU   *\n         CLI   UCBTBYT3,UCB3CTC         IS THIS A CTC\n         BNE   DU11                     NO, THANK GOD IF THIS A 470\n         BAL   R9,ITSACTC               GO DO CTC STUFF\n         B     DU14                     AND PRESS ON\nDU11     EQU   *\n         CLI   UCBTBYT3,UCB3DACC        IS THIS DASD ?\n         BNE   DU12                     NO, WHATS UP DOC ?\n         BAL   R9,ITSADASD              GO DO DASDSTUFF\n         B     DU14                     AND PRESS ON\nDU12     EQU   *\n         CLI   UCBTBYT3,UCB3DISP        IS THIS GRAPHICS\n         BNE   DU13                     NO.. HOPE FOR UR\n         BAL   R9,ITSATUBE              GO DOWN THE TUBES\n         B     DU14                     AND PRESS ON\nDU13     EQU   *\n         CLI   UCBTBYT3,UCB3UREC        IS THIS UNIT RECORD ?\n         BNE   DU14                     NO.. LEAVE THE DAMN THING BLANK\n         BAL   R9,ITSAUR                GO DO THE UNIT RECORD STUFF\n*\nDU14     EQU   *\n*\n* ANALYZE THE DEVICES CURRENT STATUS, ONLINE OR OFF, ALLOCATED, OR NOT\n* BUSY OR NOT, ETC...\n*\n         MVC   OUTSTAT(7),=C'Offline'   DEFAULT TO OFFLINE\n         TM    UCBFLA,UCBBOX            is it boxed?               U022\n         BZ    *+10                     no - skip                  U022\n         MVC   OUTSTAT(7),=CL7'F-Box'   show boxed                 U022\n         TM    UCBSTAT,UCBONLI          IS THIS DEVICE ONLINE ?\n         BZ    DU15                     NO, PRESS ON\n         MVC   OUTSTAT(7),BLANKS        RESET A MINUTE\n         MVI   OUTSTAT,C'O'             SHOW IT'S ONLINE\n*??      TM    UCBIOSF1,UCBRESVH        is it reserved?            U022\n*??      BZ    *+10                     no - skip                  U022\n*??      MVC   OUTSTAT+5(2),=C'-R'      show reserved              U022\n*\n* SEE WHATS HAPPENING WITH ONLINE DEVICES\n*\n         TM    UCBSTAT,UCBALOC          IS IT ALLOCATED\n         BZ    *+8                      NO.. SKIP MVI\n         MVI   OUTSTAT,C'A'             SHOW ALLOCATED\n         CLI   UCBTBYT3,UCB3DACC        IS IT A DISK?              U006\n         BE    NOTCONS                  YES.. SKIP NEXT TEST       U006\n         TM    UCBSTAT,UCBSYSR          IS IT A CONSOLE?           U006\n         BZ    NOTCONS                  NO.. SKIP MVI              U006\n         MVI   OUTSTAT,C'C'             SHOW CONSOLE               U006\nNOTCONS  TM    UCBFLA,UCBNRY            NOT READY ?\n         BZ    NOTMTP                   NO, AND SKIP MTP LOGIC TOO U009\n         MVC   OUTSTAT+1(5),=C'-Nrdy'\n         CLI   UCBTBYT3,UCB3DACC        DIRECT ACCESS DEVICE?      U008\n         BNE   MP01                     NO, SKIP DISK MTP TEST     U008\n         TM    UCBDMCT,UCBMOUNT         MOUNT PENDING?             U008\n         BO    MP02                     YES, GO SAY SO             U008\n         B     NOTMTP                   LEAVE QUIETLY              U008\nMP01     CLI   UCBTBYT3,UCB3TAPE        TAPE DEVICE?               U008\n         BNE   NOTMTP                   NO, SKIP TAPE MTP TEST     U008\n         TM    UCBSTAB,UCBBNUL          MESSAGES OUTSTANDING?      U008\n         BNO   NOTMTP                   NO, ASSUME NO MOUNT        U008\nMP02     MVC   OUTSTAT+1(5),=C'-MTP '   OVERLAY NOTREADY IN OUTPUT U008\n         CLC   OUTVOL(6),UCBVOLI        WAS VOLSER READABLE?       U013\n         BE    *+10                     YES - OK                   U013\n         MVC   OUTVOL(6),=C'Scrtch'     NO - MTP MUST BE 'SCRTCH'  U013\nNOTMTP   TM    UCBFLA,UCBBOX            is it boxed?               U027\n         BZ    *+10                     no - skip                  U027\n         MVC   OUTSTAT(7),=CL7'O-Box'   show boxed                 U027\n          AIF   (&@@SPLVL GE 200).SPX4                             U022\n         TM    UCBFLA,UCBBSY            IS IT BUSY ?\n          AGO   .SPX5                                              U022\n.SPX4     ANOP                                                     U022\n         TM    UCBFLA,UCBSTRT           start subchannel issued?   U022\n.SPX5     ANOP                                                     U022\n         BZ    DU17                     NO..\n         MVC   OUTSTAT+1(5),=C'-Busy'   SHOW BUSY\n*\n* ATTEMPT TO FIND OUT WHY\n*\n         TM    UCBFLA,UCBPSNS           PENDING SENSE ?\n         BZ    DU15                     NO\n         MVC   OUTNOTE(13),=C'Sense pending'  SHOW REASON          U003\n         B     DU17                     GET OUT\nDU15     EQU   *\n          AIF   (&@@SPLVL GE 200).SPX6                             U022\n         TM    UCBFLA,UCBCUB            IS THE CONTROL UNIT BUSY ?\n         BZ    DU16                     NO, SEE IF CHANNEL PGM ACTIVE\n         MVC   OUTNOTE(17),=C'Control Unit busy'                   U003\n         B     DU17                     AND SPLIT\n.SPX6     ANOP                                                     U022\nDU16     EQU   *\n         L     R1,UCBEXTPT              -> COMMON EXTENSION        U017\n         USING UCBCMEXT,R1                                         U017\n         TM    UCBFL7,UCBSSPND          CHANNEL PGM SUSPENDED?     U017\n         BZ    DU16A                    NO - SEE IF CH PGM ACTIVE  U017\n         MVC   OUTSTAT+2(4),=C'SPD '    INDICATE SUSPENDED         U017\n         B     DU17                     GET OUT                    U017\n         DROP  R1                                                  U017\nDU16A    EQU   *\n          AIF   (&@@SPLVL GE 200).SPX2                             U022\n         TM    UCBFLA,UCBACTV           CHAN PGM ACTIVE\n         BZ    DU17                     SORRY.. I GIVE UP\n         MVC   OUTNOTE(22),=C'Channel program active'              U002\n.SPX2     ANOP                                                     U022\nDU17     EQU   *\n         LR    R1,R5                    GET THE ADDRESS OF THE UCB\n          AIF   (&@@SPLVL GE 200).SPX3                             U022\n         SR    R6,R6                    CLEAR FOR IC\n         IC    R6,UCBCNT                GET CURRENT QUEUE LENGTH\n         CVD   R6,DWORK                 TO DECIMAL\n         UNPK  DWORK(3),DWORK+6(2)\n         OI    DWORK+2,X'F0'            SET ZONE\n         MVC   OUTQLEN+2(3),DWORK       MOVE TO OUTPUT FIELD\n.SPX3     ANOP                                                     U022\n          AIF   (&@@SPLVL LT 130).SP07                             U018\n         LA    R2,2(,R2)                GET PTR TO NEXT LOOK UP\n.SP07     ANOP                                                     U018\n         BCT   R8,DU04                  LOOP FOR THE NEXT\n         TITLE 'WRITE SCREEN AND (OPTIONALLY) READ INPUT'\nPUTOUT   EQU   *\n         NI    FLAG2,255-F2POS          CLEAR POSITION REQUEST     U011\n         TM    FLAG2,F2DISP             ANYTHING DISPLAYED?        U020\n         BZ    NOTHING                  NOPE - SPECIAL MESSAGE     U020\n         TM    FLAG2,F2FOUND            DID WE FIND ANYTHING?      U019\n         BZ    RESTART                  NO - START OVER            U019\n*\nPUTBAL   EQU   *                        DOIT JACK !!!\n         NI    FLAG2,255-F2FOUND        RESET \"SOMETHING FOUND\"    U020\n         TM    FLAG2,F2AUTO             AUTO UPDATE?               U024\n         BO    WRITE                    ...YES, DO WRITE ONLY\n*\nPUTHELP  TRMIO IOCB,FORMAT=FORMAT1,IMAGE=L1    WRITE/READ\n*\n*\n         PFKEY DEF=REDISP,ATTN=END1,ENTER=ENTER,RESHOW=PUTHELP,    U011$\n               K1=HELP,K2=AUTO,K3=END1,K4=FLIPMODE,                U011$\n               K7=BACK,K8=FORWARD,K9=DOALL,K12=END1                U004\n*\nWRITE    EQU   *                            WRITE ONLY\n         TRMIO IOCB,WRITE,FORMAT=FORMAT1,IMAGE=L1\n         SPACE 1\n         PFKEY ATTN=AUTOOFF                                        U015\n         SPACE 1\n         B     AUTO                     GO UPDATE THE DISPLAY      U020\n         SPACE 3\nNOTHING  MVC OUTSTAT+79*2(31),=C'No devices meet search criteria'  U020\n         B     PUTBAL                   DISPLAY ERROR MESSAGE      U020\n         TITLE 'INPUT HANDLING SUBROUTINES'\nAUTO     EQU   *                        AUTO UPDATE CLASS REQUESTED\n         OI    FLAG2,F2AUTO                                        U024\n         OI    IOCBFLGS,IOCBFNRD        NO READ\n         OI    IOCBFLGD,IOCBDYON+IOCBDFRC\n         B     REDISP                                              U009\n         SPACE 1\nAUTOOFF  EQU   *                        TURN OFF AUTO UPDATE\n         NI    FLAG2,255-F2AUTO                                    U024\n         NI    IOCBFLGS,255-IOCBFNRD\n         NI    IOCBFLGD,255-IOCBDYON-IOCBDFRC\n         B     PUTBAL\n         SPACE 1\nFORWARD  EQU   *                        GET NEXT 20 UNITS\n          AIF   (&@@SPLVL GE 130).SP09                             U018\n         CLC   0(2,R2),=X'FFFF'         ARE WE AT END ALREADY?\n         BE    RESTART                  ...YES, SO GO BACK TO ZERO.U011\n          AGO   .SP10                                              U018\n.SP09     ANOP                                                     U018\n         OC    UCBWORK,UCBWORK          ARE WE AT END ALREADY?     U018\n         BZ    RESTART                  ...YES, SO GO BACK TO ZERO.U018\n.SP10     ANOP                                                     U018\n         LA    R1,20                                               U011\n         AH    R1,UCBNBRT               NEW CURRENT UCB            U011\n         STH   R1,UCBNBRT               SET NEW TOP OF SCREEN      U011\n         B     DU01                     GO GET NEXT SET OF UCBS.\n         SPACE 1\nENTER    EQU   *                        HIT ENTER KEY\n         LA    R0,L'ENTRLN              LENGTH OF DATA             U012\n         LA    R6,ENTRLN                FIRST INPUT BYTE           U012\nENTER1   CLI   0(R6),C' '               LEADING BLANK?             U012\n         BNE   ENTER2                   NO, TEST THE DATA          U012\n         LA    R6,1(,R6)                -> NEXT BYTE               U012\n         BCT   R0,ENTER1                DECREMENT LENGTH AND LOOP  U012\n         B     REDISP                   NO DATA, GO REDISPLAY      U012\nENTER2   CLI   0(R6),C'.'               PAGE FORWARD?              U012\n         BE    FORWARD                  YES - DO IT                U004\n         CLI   0(R6),C'+'               PAGE FORWARD?              U012\n         BE    FORWARD                  YES - DO IT                U004\n         CLI   0(R6),C'-'               PAGE BACKWARD?             U012\n         BE    BACK                     YES - DO IT                U004\n         CLI   0(R6),C'/'               MVS OPERATOR COMMAND?      U019\n         BE    MVS$CMD                  YES - DO IT                U019\n         LR    R2,R0                    DATA LENGTH FOR 'INSHIFT'  U012\n         B     INSHIFT                  JUST GO TO PARM ANALYSIS\n         SPACE 1\nMVS$CMD  TM    FLAG2,F2OPER             PRIVILEGED USER?           U019\n         BZ    REDISP                   NO - IGNORE IT             U019\n         MVI   0(R6),C' '               REMOVE THE '/'             U019\n         CLC   ENTRLN+1(L'ENTRLN-1),BLANKS  ANY COMMAND HERE?      U019\n         BE    REDISP                   NO - IGNORE IT             U019\n         LA    R15,CMDPARM              -> COMMAND                 U019\n         ST    R15,CMDADDR              SET IN PARMLIST            U019\n         OI    CMDADDR,X'80'            MARK END OF LIST           U019\n         BCTR  R0,0                     -1 FOR '/'                 U019\n         STH   R0,CMDPARM               STORE CMD LENGTH IN PARM   U019\n         LR    R14,R0                   COPY LENGTH                U019\n         MVC   CMDPARM+2(L'ENTRLN),BLANKS  CLEAR RECEIVING AREA    U019\n         BCTR  R14,0                    -1 FOR EX                  U019\n         EX    R14,CMD$MVC              COPY TEXT TO PARM AREA     U019\n         LA    R1,CMDADDR               -> PARMLIST                U019\n         LINK  EP=OPERCMD               ISSUE THE COMMAND & WTO    U019\n         B     REDISP                   ALL DONE                   U019\n         SPACE 1\nCMD$MVC  MVC   CMDPARM+2(*-*),1(R6)     << EXECUTED >>             U019\n         SPACE 2\nFLIPMODE EQU   *                        SWITCH ONLINE/OFFLINE MODES\n         TM    FLAG1,F1QD               QUEUED I/O MODE?           U011\n         BO    PARMON                   YES, GO SET ONLINE MODE    U011\n         TM    FLAG1,F1ON               ONLINE MODE?               U011\n         BO    PARMOF                   YES, GO SET OFFLINE MODE   U011\n         B     PARMON                   OTEHRWISE, SET ONLINE      U011\n         SPACE 1\n*\n* COUNT BACK UP 20 UNITS PRIOR TO *FIRST* ONE ON SCREEN\n*\nBACK     EQU   *\n         LH    R1,UCBNBRT               TOP OF SCREEN UCB NUMBER   U011\n         SH    R1,=H'20'                REDUCE BY TWENTY           U011\n         BNP   RESTART                  NOT OKAY, START AT TOP     U011\n         STH   R1,UCBNBRT               SAVE NEW TOP OF SCREEN     U011\n         B     REDISP                   AND GO FORMAT DISPLAY      U011\n         SPACE 3\nHELP     LA    R14,L1                   DEST ADDR                  U004\n         LH    R15,FORMAT1              DEST LEN                   U004\n         LA    R0,HELPIMG               SOURCE ADDR                U004\n         LA    R1,HELPLEN               SOURCE LEN                 U004\n         TM    FLAG2,F2PRIV             PRIVILEGED USER?           U012\n         BO    HELP1                    YES, WE HAVE RIGHT IMAGE   U012\n         LA    R0,HELPIMG1              NO, POINT TO NEW IMAGE     U004\n         LA    R1,HELPLEN1                 AND NEW IMAGE LENGTH    U004\nHELP1    ICM   R1,B'1000',BLANKS        PAD CHAR                   U004\n         MVCL  R14,R0                   COPY THE HELP SCREEN       U004\n         B     PUTHELP                  GO WRITE IT                U004\n         TITLE 'DEVICE TYPE SPECIFIC SUBROUTINES'\nITSACTC  EQU   *                        UCBTYPE3=X'41'\n         MVC   OUTTYPE,=CL7'CTC'                                   U023\n         BR    R9\n         SPACE 2\nITSAUR   EQU   *                        UCBTYPE3=X'08'\n         LA    R1,URTYPES               GET DEVICE TYPES ADDRESSES\nUR0      EQU   *\n         CLC   UCBUNTYP,0(R1)           IS IT THIS ?\n         BE    UR1                      SHORE IS\n         LA    R1,TYPESIZE(R1)          GET NEXT IF NOT\n         CLI   0(R1),255                STOPPER ?\n         BNE   UR0\nUR1      EQU   *\n         MVC   OUTTYPE,1(R1)            MOVE THE DESCRIPTOR\n         BR    R9\n         SPACE 2\nITSACOMM EQU   *                        UCBTYPE3=X'40'\n         LA    R1,COMMTYPS              GET DEVICE TYPES ADDRESSES\n         MVC   DWORK(1),UCBTBYT1\n         NI    DWORK,15                 GET MODEL CODE\nCO0      EQU   *\n         CLC   DWORK(1),0(R1)           IS IT THIS ?\n         BE    CO1                      SHORE IS\n         LA    R1,TYPESIZE(,R1)         GET NEXT IF NOT\n         CLI   0(R1),255                STOPPER ?\n         BNE   CO0\n         MVC   DWORK(1),UCBUNTYP\n         NI    DWORK,15                 GET CONTROL UNIT-TYPE\n         LA    R1,COMMCUS\nCO00     EQU   *\n         CLC   DWORK(1),0(R1)           IS IT THIS ?\n         BE    CO1                      SHORE IS\n         LA    R1,TYPESIZE(,R1)         GET NEXT IF NOT\n         CLI   0(R1),255                STOPPER ?\n         BNE   CO00\nCO1      EQU   *\n         MVC   OUTTYPE,1(R1)            MOVE THE DESCRIPTOR\n         BR    R9\n         SPACE 2\nITSATUBE EQU   *                        UCBTYPE3=X'10'\n         LA    R1,TUBETYPS              GET DEVICE TYPES ADDRESSES\nTU0      EQU   *\n         CLC   UCBUNTYP,0(R1)           IS IT THIS ?\n         BE    TU1                      SHORE IS\n         LA    R1,TYPESIZE(,R1)         GET NEXT IF NOT\n         CLI   0(R1),255                STOPPER ?\n         BNE   TU0\nTU1      EQU   *\n         MVC   OUTTYPE,1(R1)            MOVE THE DESCRIPTOR\n         BR    R9\n         SPACE 2\nITSATAPE EQU   *                        UCBTYPE3=X'80'\n         LA    R1,TAPETYPS              GET DEVICE TYPES ADDRESSES\nTA0      EQU   *\n         CLC   UCBUNTYP,0(R1)           IS IT THIS ?\n         BE    TA1                      SHORE IS\n         LA    R1,TYPESIZE(,R1)         GET NEXT IF NOT\n         CLI   0(R1),255                STOPPER ?\n         BNE   TA0\nTA1      EQU   *\n         MVC   OUTTYPE,1(R1)            MOVE THE DESCRIPTOR\n         TM    UCBSTAT,UCBONLI          IS IT ONLINE ?\n         BZ    TA10                     NO.. MOVE ON\n         MVC   OUTVOL(6),UCBVOLI        MOVE THE VOL-SER\n         TR    OUTVOL(6),BLANKTAB       MAKE SURE IT IS READABLE\n*\n* CHECK  OUT THE DENSITIES AVAILABLE\n*\nTA10     EQU   *\n         TM    UCBTBYT2,UCBDUDN1        DUAL  800/1600 ?           U015\n         BZ    TA2                      NO..\n         MVC   OUTNOTE(9),=CL9'800/1600'\n         MVC   OUTTYPE+4(2),=C'-4'      3400-4                     U004\n         TM    UCBTBYT2,UCB2OPT1        SUPPORT ASCII ?\n         BZ    TA7                      NO..\n         MVC   OUTNOTE+9(5),=C'ASCII'\n         B     TA7\nTA2      EQU   *\n         TM    UCBTBYT2,UCBDUDN2        1600/6250 ?\n         BZ    TA3                      NO..\n         MVC   OUTNOTE(9),=C'1600/6250'\n         MVC   OUTTYPE+4(2),=C'-6'      3400-6                     U004\n         B     TA7\nTA3      EQU   *\n         TM    UCBTBYT2,UCB2OPT0        7-TRACK ?\n         BZ    TA4                      NO..\n         MVC   OUTNOTE(7),=C'7-Track'                              U023\n         MVC   OUTTYPE+4(2),=C'-2'      3400-2                     U004\n         B     TA7\nTA4      EQU   *\n         TM    UCBTBYT1,UCBD1600        1600 BPI ?\n         BZ    TA5\n         MVC   OUTNOTE(4),=C'1600'\n         MVC   OUTTYPE+4(2),=C'-3'      3400-3                     U004\n         B     TA7\nTA5      EQU   *\n         TM    UCBTBYT1,UCBD6250        6250 BPI ?\n         BZ    TA7                      NO..\n         MVC   OUTNOTE(4),=C'6250'\n         MVC   OUTTYPE+4(2),=C'-5'      3400-5                     U004\nTA7      EQU   *\n         TM    UCBSTAT,UCBALOC          IS IT ALLOCATED?           U002\n         BNO   TA9                      NO - SKIP                  U002\n*U024    MVC   OUTNOTE+26(5),=C'file='                             U003\n         LH    R0,UCBFSEQ               GET FILE SEQUENCE NUMBER   U003\n         CVD   R0,DWORK                                            U003\n         OI    DWORK+7,X'0F'            REMOVE SIGN                U003\n         UNPK  OUTNOTE+31(5),DWORK+5(3) PUT ON SCREEN              U023\n         MVC   OUTNOTE+27(5),=C'file='                             U024\n         L     R1,UCBEXTPT              -> COMMON EXTENSION        U002\n         LH    R15,UCBASID-UCBCMEXT(,R1)  GET ASID OF OWNER        U002\n         BCTR  R15,0                    APPLY FUDGE FACTOR         U002\n         SLL   R15,2                    * 4 BYTES / ENTRY          U002\n         L     R1,16                    -> CVT                     U002\n         L     R1,CVTASVT-CVT(,R1)      -> ASVT                    U002\n         L     R1,ASVTENTY-ASVT(R15,R1) -> ASCB                    U002\n         MVC   OUTSTATE(3),=C'-->'      FLAG IT                    U002\n         L     R15,ASCBJBNI-ASCB(,R1)   -> JOBNAME                 U002\n         LTR   R15,R15                  OK?                        U002\n         BNZ   TA8                      YES - CONTINUE             U002\n         L     R15,ASCBJBNS-ASCB(,R1)   -> JOBNAME FOR S/M/L       U002\n         LTR   R15,R15                  OK?                        U002\n         BZ    TA9                      NO - BYPASS                U002\nTA8      EQU   *                                                   U002\n         MVC   OUTSTATE+3(8),0(R15)     MOVE IN JOBNAME            U002\nTA9      EQU   *                                                   U002\n         TM    UCBWGT,UCBREW            is it rewinding?           U025\n         BZ    *+10                     no                         U025\n         MVC   OUTNOTE(15),=C'>> rewinding <<'                     U025\n         BR    R9\n         SPACE 2\nITSADASD EQU   *                        UCBTYPE3=X'20'\n         TM    UCBWGT,UCBMTPXP          IS THIS THE DOLDRUMS ?\n         BZ    DA00                     NO..\n         TM    UCBCHAN+1,15             IS THIS THE BASE EXPOSURE? U022\n         BNZ   DU06                     NOPE.. GOTO NEXT\nDA00     EQU   *\n         LA    R1,DASDTYPS              GET DEVICE TYPES ADDRESSES\nDA0      EQU   *\n         CLC   UCBUNTYP,0(R1)           IS IT THIS ?\n         BE    DA1                      SHORE IS\n         LA    R1,TYPESIZE(,R1)         GET NEXT IF NOT\n         CLI   0(R1),255                STOPPER ?\n         BNE   DA0\nDA1      EQU   *\n         MVC   OUTTYPE,1(R1)            MOVE THE DESCRIPTOR\n*U022    TM    UCBTBYT2,UCBRVDEV        IS THIS VIO\n         TM    UCBJBNR,UCBVRDEV         IS THIS VIO                U022\n         BZ    DA10                     NO..\n         MVC   OUTVOL,=CL7'V-I-O'       INDICATE SO..\nDA10     EQU   *\n         CLC   =C'3380',OUTTYPE         IS IT SOMETHING STUPID?    U021\n         BNE   DA11                     NO - NORMAL DEVICE         U021\n         L     R1,UCBEXTPT              -> COMMON EXTENSION        U021\n         ICM   R1,B'1111',DCEUCBEX(R1)  -> DCE                     U021\n         BZ    DA11                     NONE - CAN'T BE 3380E      U021\n         USING DCE,R1                   DASD CLASS EXTENSION       U021\n         TM    DCEFLAG1,DCEVALFS        DEVICE FIELDS VALID?       U021\n         BZ    DA11                     NO - CAN'T BE 3380E/K      U021\n         MVI   OUTTYPE+4,C'K'           assume 3380K               U024\n         CLC   =H'2656',DCEUDCYL        # OF DATA+ALT CYL ==> \"K\"  U024\n         BE    DA11                     yes - continue             U024\n         MVI   OUTTYPE+4,C'E'           assume 3380E               U024\n         CLC   =H'1771',DCEUDCYL        # OF DATA+ALT CYL ==> \"E\"  U021\n         BE    DA11                     yes - continue             U024\n         MVI   OUTTYPE+4,C' '           assume standard 3380       U024\n         DROP  R1                       DCE                        U021\nDA11     EQU   *                                                   U021\n         TM    UCBSTAT,UCBONLI          IS IT ONLINE ?\n         BZR   R9                       NO.. RETURN\n         TM    UCBSTAB,UCBPGFL          IS THERE PAGING ON THIS PACK\n         BZ    *+10\n         MVC   OUTNOTE(13),=CL13'<Paging-pack>'  TELL THE USER\n         MVC   OUTVOL(6),UCBVOLI        MOVE THE VOL-SER\n         TR    OUTVOL(6),BLANKTAB       MAKE SURE IT IS READABLE\n         TM    UCBSTAT,UCBSYSR          IS THIS THE SYSRES ?\n         BZ    DA2                      NO... PRESS ON\n         MVC   OUTSTATE(10),=CL10'<-SYSRES->'  INDICATE SO\n         BR    R9                       AND RETURN\n         SPACE\nDA2      EQU   *\n         TM    UCBSTAB,UCBBPRV          IS THIS VOL PRIVATE ?\n         BZ    DA3                      NO..\n         MVC   OUTSTATE,=C'Priv'        SHOW IT IS SO\nDA3      EQU   *\n         TM    UCBSTAB,UCBBPUB          IS IT PUBLIC ?\n         BZ    DA4                      NO..\n         MVC   OUTSTATE,=C'Publ'\nDA4      EQU   *\n         TM    UCBSTAB,UCBBSTR          STORAGE ?\n         BZ    DA5                      NO...\n         MVC   OUTSTATE,=C'Strg'\nDA5      EQU   *\n         TM    UCBSTAT,UCBRESV          IS IT RESERVED ?\n         BZ    DA6                      NO..\n         MVC   OUTSTAT2,=C'/Rserv'\nDA6      EQU   *\n         TM    UCBSTAT,UCBPRES          PERMANENTLY RESIDENT\n         BZ    DA7                      NO..\n         MVC   OUTSTAT2,=CL7'/Rsdnt'\nDA7      EQU   *\n         BR    R9\n         TITLE 'D U - DATA AREAS AND THE LIKE'\nFORMAT1  DCMSFMT\nL1       DCMSFLD  79\nL2       DCMSFLD  79,INTEN=LO\nL3       DCMSFLD  79,INTEN=LO\nL4       DCMSFLD  79,INTEN=LO\nL5       DCMSFLD  79,INTEN=LO\nL6       DCMSFLD  79,INTEN=LO\nL7       DCMSFLD  79,INTEN=LO\nL8       DCMSFLD  79,INTEN=LO\nL9       DCMSFLD  79,INTEN=LO\nL10      DCMSFLD  79,INTEN=LO\nL11      DCMSFLD  79,INTEN=LO\nL12      DCMSFLD  79,INTEN=LO\nL13      DCMSFLD  79,INTEN=LO\nL14      DCMSFLD  79,INTEN=LO\nL15      DCMSFLD  79,INTEN=LO\nL16      DCMSFLD  79,INTEN=LO\nL17      DCMSFLD  79,INTEN=LO\nL18      DCMSFLD  79,INTEN=LO\nL19      DCMSFLD  79,INTEN=LO\nL20      DCMSFLD  79,INTEN=LO\nL21      DCMSFLD  79,INTEN=LO\nENTRLN   DCMSFLD  79,ALPHA,CURSOR=AFTER\nMODELN   DCMSFLD  79\n         DCMSFEND\n*\n          AIF   (&@@SPLVL GE 200).SPX7                             U022\nTITLE    DC    CL79'UNIT TYPE   STATUS  VOLSER  VOLSTATE  Q-LEN  ______$\n               ____NOTES_____________'\n          AGO  .SPX8                                               U022\n.SPX7     ANOP                                                     U022\nTITLE    DC    CL79'UNIT TYPE   STATUS  VOLSER  VOLSTATE  __________NOT$\n               ES_____________'                                    U022\n.SPX8     ANOP                                                     U022\n         LTORG\nBLANKTAB DC    CL256' '\n         ORG   BLANKTAB+C'\u00a2'\n         DC    C'\u00a2.<(+|',X'50'\n         ORG   BLANKTAB+C'!'\n         DC    C'!$*);\u00ac-/'\n         ORG   BLANKTAB+C','\n         DC    C',%_>?'\n         ORG   BLANKTAB+C':'\n         DC    C':#@''=\"'\n         ORG   BLANKTAB+C'A'\n         DC    C'ABCDEFGHI'\n         ORG   BLANKTAB+C'J'\n         DC    C'JKLMNOPQR'\n         ORG   BLANKTAB+C'S'\n         DC    C'STUVWXYZ '\n         ORG   BLANKTAB+C'0'\n         DC    C'0123456789'\n         ORG\nTYPESIZE EQU   8                        SIZE OF A 'DX' ENTRY\n         PRINT NOGEN                                               U002\n*  THIS TABLE IS BY LOW ORDER NIBBLE OF 4TH UCBTYPE BYTE           U002\n*  (UCB+X'13')                                                     U002\n         SPACE 2\nCOMMCUS  EQU   *              XXXX40XN  UCBTYP3=X'40' (IF NOT COMMTYP)\n         DX    1,'2702'\n         DX    2,'2701'\n         DX    3,'2703'\n         DX    4,'2955'                 FEDAU                      U001\n         DX    5,'3704/5'\n         DX    FF,'COMM'\n         SPACE 3\nTAPETYPS EQU   *              XXXX80NN  UCBTYP3=X'80': TAPE DEVICES\n         DX    1,'2400'\n         DX    3,'3400'\n         DX    80,'3480'                                           U019\n         DX    FF,'TAPE'\n         SPACE 3\nDASDTYPS EQU   *              XXXX20NN  UCBTYP3=X'20': DIRECT ACCESS\n***      DX    1,'2311'                 DISK                       U019\n***      DX    2,'2301'                 DISK                       U019\n***      DX    3,'2303'                 DISK                       U019\n***      DX    4,'2302'                 DISK                       U019\n***      DX    5,'2321'                 DISK                       U019\n         DX    6,'2305-1'               FIXED HEAD\n         DX    7,'2305-2'               FIXED HEAD\n         DX    8,'2314'                 DISK\n         DX    9,'3330'                 DISK\n         DX    A,'3340'                 DISK\n         DX    B,'3350'                 DISK\n         DX    C,'3375'                 DISK                       U015\n         DX    D,'3330-1'               DISK\n         DX    E,'3380'                 DISK                       U015\n         DX    F,'3390'                 disk                       U023\n         DX    FF,'DASD'\n         SPACE 3\nTUBETYPS EQU   *              XXXX10NN  UCBTYP3=X'10': GRAPHICS\n         DX    2,'2250'                 DISPLAY UNIT               U015\n***      DX    3,'2260'                 DISPLAY UNIT               U019\n***      DX    4,'1053'                 PRINTER                    U019\n***      DX    5,'2280'                 DISPLAY UNIT               U019\n***      DX    6,'2282'                 DISPLAY UNIT               U019\n***      DX    7,'2282'                 MODEL 85 CONSOLE           U019\n         DX    8,'3066'                 168 SYSTEM CONSOLE\n         DX    9,'3278'                 DISPLAY STATION            U006\n         DX    A,'3284'                 PRINTER\n         DX    B,'3286'                 PRINTER\n         DX    C,'3158'                 158 CONSOLE                U001\n         DX    D,'3036'                 3033 CONSOLE               U001\n***      DX    E,'3138'                 138 CONSOLE                U001\n***      DX    F,'3148'                 148 CONSOLE                U001\n         DX    FF,'TUBE'\n         SPACE 3\nCOMMTYPS EQU   *              XNXX40XX  UCBTYP3=X'40': COMMUNICATIONS\n         DX    1,'TWX'\n         DX    3,'2740'\n         DX    4,'2740'\n         DX    5,'2740C'\n         DX    6,'2741P'\n         DX    7,'BSC3'\n         DX    8,'2740X'\n         DX    9,'2740B'\n         DX    F1,'3791'                LOCAL CONTROL UNIT\n         DX    FF,'COMM'\n         SPACE 3\nURTYPES  EQU   *              XXXX08NN  UCBTYP3=X'08':  UNIT RECORD\n         DX    1,'2540-R'               CARD READER\n         DX    2,'2540-P'               CARD PUNCH\n         DX    3,'1442-R'\n         DX    4,'2501'                 CARD READER\n         DX    5,'2520'                 CARD READ PUNCH\n         DX    6,'3505'                 CARD READER\n         DX    8,'1403'                 PRINTER\n         DX    9,'3211'                 PRINTER\n         DX    A,'1443'                 PRINTER\n         DX    B,'3203'                 PRINTER                    U006\n         DX    C,'3525'                 CARD PUNCH\n         DX    E,'3800'                 LASER PRINTER              U006\n         DX    10,'2671'                PAPER TAPE READER\n         DX    11,'4245'                PRINTER                    U019\n         DX    13,'4248'                PRINTER                    U019\n         DX    16,'3890'                DOCUMENT PROCESSOR         U006\n         DX    17,'3886'                OPTICAL CHARACTER READER   U006\n         DX    18,'2495'                TAPE CARTRIDGE READER\n         DX    19,'3895'                DOCUMENT READER/INSCRIBER  U019\n         DX    1A,'1285'                OPTICAL READER             U019\n         DX    1B,'1287'                OPTICAL READER\n         DX    1C,'1288'                OPTICAL PAGE READER\n         DX    1D,'1419'                MAG CHAR RDR, PRIMARY C.U. U019\n         DX    1E,'2ND CU'              SECONDARY CU FOR 1419,1275 U019\n         DX    1F,'1275'                OPTICAL RDR SORTER, PRI CU U019\n         DX    20,'1052'                CONSOLE PRINTER-KEYBOARD\n         DX    21,'2150'                CONSOLE                    U019\n         DX    22,'3210'                CONSOLE PRINTER-KEYBOARD\n         DX    23,'3215'                CONSOLE PRINTER-KEYBOARD\n         DX    30,'3213'                PRINTER\n         DX    3D,'7443'                SRF                        U002\n         DX    42,'3851'                MSF                        U006\n         DX    44,'3540'                DISKETTE\n         DX    4C,'3838'                ARRAY PROCESSOR            U006\n         DX    FF,'U/R'\n         PRINT GEN                                                 U004\n         TITLE 'D U - TERMINATION AND REENTRANT DATA AREAS'\nEND1     DCMSTOP\n         SPACE 2\nDUCB     CSECT                          RESUME                     U004\n         PRINT NOGEN                                               U006\nHELPIMG  $     '       * * *  D U C B  * * *           HELP'       U026\n         $     ' '\n $ 'PF key definitions:                    Commands:'\n $ ' '\n $ '____________________________    HELP - this screen'\n $ '|PF1   13|PF2   14|PF3   15|    END  - terminate DUCB'\n $ '| Help   | Update | End    |    ON   - select online devices only'\n $ '|________|________|________|    OFF  - include offline devices'\n $ '|PF4   16|PF5   17|PF6   18|    DA   - select dasd only'\n $ '| On/Off |        |        |    T    - select tape only'\n $ '|________|________|________|    CO   - select comm only'       U026\n $ '|PF7   19|PF8   20|PF9   21|    DI   - select display only'    U026\n $ '| Down   | Up     | Restart|    U    - select U/R only'        U026\n $ '|________|________|________|    Q    - select only devices with I/O$\n                queued'                                            U026\n $ '|PF10  22|PF11  23|PF12  24|    ALL  - reset DA/T/CO/DI/U/Q'   U026\n $ '|        |        |        |     '\n $ '|________|________|________|    +    - scroll down'\n $ '                                .    - scroll down'\n $ '                                -    - scroll up'\n $ '                                /xxx - issue MVS operator command \"$\n               xxx\"'\nHELPLEN  EQU   *-HELPIMG                                           U004\n         SPACE 2\nHELPIMG1 $     '       * * *  D U C B  * * *           HELP'       U026\n         $     ' '\n $ 'PF key definitions:                    Commands:'\n $ ' '\n $ '____________________________    HELP - this screen'\n $ '|PF1   13|PF2   14|PF3   15|    END  - terminate DUCB'\n $ '| Help   | Update | End    |    '\n $ '|________|________|________|    '\n $ '|PF4   16|PF5   17|PF6   18|    '\n $ '| On/Off |        |        |    '\n $ '|________|________|________|    '                              U026\n $ '|PF7   19|PF8   20|PF9   21|    '                              U026\n $ '| Down   | Up     | Restart|    '                              U026\n $ '|________|________|________|    Q    - select only devices with I/O$\n                queued'                                            U026\n $ '|PF10  22|PF11  23|PF12  24|    ALL  - reset Q'                U026\n $ '|        |        |        |     '\n $ '|________|________|________|    +    - scroll down'\n $ '                                .    - scroll down'\n $ '                                -    - scroll up'\nHELPLEN1 EQU   *-HELPIMG1\n         SPACE 1\n         PRINT GEN                                                 U006\n         SPACE 2\nDCMSWORK DSECT                          RESUME                     U004\nDWORK    DS    D\n         DSGEN FORMAT1                  GENERATE SCREEN WORK AREA\n         SPACE 1\n         ORG   MODELN                   REDEFINE MODELN AREA       U011\nMODECLH  DS    C'Class ='                                          U011\n         DS    CL1                                                 U011\nMODECLAS DS    C'ALL '                                             U024\n         DS    CL2                                                 U024\nMODEMH   DS    C'Mode ='                                           U011\n         DS    CL1                                                 U011\nMODEMODE DS    CL19'Online and Offline'                            U011\n         ORG   MODELN+(L'MODELN-6-4-1)                             U018\nMODESYS  DS    C'SYS = '                                           U018\nMODEID   DS    C'SCG3'                                             U018\n         ORG   ,                                                   U019\n         SPACE 1\nCMDADDR  DS    A                        -> PARMLIST FOR \"OPERCMD\"  U019\nCMDPARM  DS    H,CL(L'ENTRLN)                                      U019\n         ORG\n         SPACE 2\n          AIF   (&@@SPLVL GE 130).SP91                             U018\nUCBLTBL  DS    A                        START OF UCB LOOKUP TABLE  U011\n          AGO   .SP92                                              U018\n.SP91     ANOP                                                     U018\nIOSVSUCB DS    A                        COPY OF CVTUCBSC           U018\nUCBPARM  DS    3A                       PARMLIST FOR IOSVSUCB      U018\nUCBADDR  DS    A                        ANSWER AREA                U018\n         DS    0D                       ALIGNMENT                  U018\nUCBWORK  DS    CL100                    WORK AREA FOR IOSVSUCB     U018\n.SP92     ANOP                                                     U018\nUCBNBRT  DS    H                        NUMBER OF FIRST DSPLY UCB  U011\nUCBNBR   DS    H                        NUMBER OF CUR DSPLY UCB    U011\n         SPACE 1\nFLAG1    DS    X                        DEFAULT 'ALL'\nF1ON     EQU   X'80'                    USE ONLY ONLINE PEOPLE\nF1DASD   EQU   X'40'                    ONLY DASD DEVICES\nF1TAPE   EQU   X'20'                    ONLY TAPE DEVICES\nF1COMM   EQU   X'10'                    only comm devices          U024\nF1DISP   EQU   X'08'                    only disp devices          U024\nF1UR     EQU   X'04'                    only u/r  devices          U024\nF1DEVTYP EQU   F1DASD+F1TAPE+F1COMM+F1DISP+F1UR  dev cls mask bits U024\nF1QD     EQU   X'01'                    ONLY DEVICES WITH I/O QUEUED\n*\nFLAG2    DS    X                                                   U019\nF2PRIV   EQU   X'80'                    FULL PRIVILEGED USER       U012\nF2OPER   EQU   X'40'                    OPERATOR AUTHORITY         U019\nF2AUTO   EQU   X'10'                    AUTO UPDATE                U024\nF2POS    EQU   X'04'                    POSITION TO UCB BY NAME    U011\nF2DISP   EQU   X'02'                    AT LEAST 1 DEV DISPLAYED   U020\nF2FOUND  EQU   X'01'                    WE FOUND SOMETHING         U019\n*\nFIRSTUCB DS    CL3                      DEFAULT FIRST UCB TO PRINT U012\n*\nDEVCLAS  DS    CL4                      curr class (ALL/DASD/TAPE) U024\n*\nSYSID    DS    CL4                      SMF SYSTEM ID              U018\n*\nNAMELIST DS    (65535/40)CL3            NAMES OF UCB'S DONE        U007\n         DS    0D\nDCMSWLEN EQU   *-DCMSWORK               FOR GETMAIN\n         SPACE 4\nOUTLINE  DSECT ,\nOUTUNIT  DS    CL5\nOUTTYPE  DS    CL7\nOUTSTAT  DS    CL8\nOUTVOL   DS    CL7\nOUTSTATE DS    CL4\nOUTSTAT2 DS    CL7\n          AIF   (&@@SPLVL GE 200).SPX9                             U022\nOUTQLEN  DS    CL7\n.SPX9     ANOP                                                     U022\nOUTNOTE  DS    CL36                                                U023\nOUTLINE# EQU   *-OUTLINE                len of outline             U023\n         DS    0XL(L'L1-OUTLINE#)       if to long, get asm error  U023\n         TITLE 'MVS UCB DEFINITION '\nUCB      DSECT ,                                                   U018\n         IEFUCBOB  ,\n         TITLE 'DASD CLASS EXTENSION'                              U021\n         IECDDCE  ,                                                U021\n         EJECT ,                                                   U018\n*U018    TITLE 'ASVT DEFINITION'\n         PRINT NOGEN                                               U018\n         IHAASVT  ,                                                U002\n*U018    TITLE 'ASCB DEFINITION'\n         IHAASCB  ,                                                U002\n*U018    TITLE 'MVS CVT DEFINITION'\n         CVT   DSECT=YES\n         IHAPSA  ,                                                 U018\n         IKJTCB  ,                                                 U018\n         IEZJSCB  ,                                                U018\n         IKJPSCB  ,                                                U018\n         IEESMCA  ,                                                U018\n*  Things to add:                                                  U022\n*    ucbfl5,ucbnaloc  oltep(etc)                                   U022\n*    ucbflc,ucbattp   attention pending                            U022\n*    ucbflc,ucbddrsw  ddr sw pending                               U022\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DUSERS": {"ttr": 8200, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x87\\t/\\x00\\x90\\'?\"\\x02\\x01\\x81\\x00\\xbf\\x00\\xd6\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1987-04-02T00:00:00", "modifydate": "1990-09-30T22:02:00", "lines": 385, "newlines": 191, "modlines": 214, "user": "LDW"}, "text": "DUSERS TITLE '-----  Display Logged on TSO Users and Term Names  -----'\n***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1988 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.                                     *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1, with DFP 3.1),  *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc-oberon!LDW (last resort)                           *\n*                                                                     *\n*          (213) 743-5391 (direct -- 11 am to 7 pm Pacific time)      *\n*          (213) 743-2957 (msgs)                                      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, or 714.  Sorry.                                       *\n*                                                                     *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*   Program Name:  DUSERS                                             *\n*                                                                     *\n*   Purpose:       Display (sorted by userid) the userid and terminal *\n*                  names of all logged on TSO users, and flag those   *\n*                  which are disconnected.                            *\n*                                                                     *\n*   Author:        Leonard D. Woren                                   *\n*                                                                     *\n*   Date:          April 2, 1987                                      *\n*                                                                     *\n*   Note:          This program is a copy of TSLINE, changed to sort  *\n*                  by userid instead of terminal name.                *\n*                                                                     *\n*   Updates:                                                          *\n*      30Sep90  U005 LDW - Use PUTLINE instead of TPUT                *\n*      21Dec89  U004 LDW - Fix check for end of ASVT so that some     *\n*                             users are randomly overlooked           *\n*                        - Use DSECT names instead of offsets         *\n*                             (not marked with update flag)           *\n*      13Feb89  U003 LDW - Display count of disconnected users        *\n*      07May87  U002 LDW - Display user counts                        *\n*      05Apr87  U001 LDW - Fix sort bug so works if only one id       *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\nDUSERS   OSENTER  EXIT=RETURN,RC=0,GETMAIN=(WORKLEN,WORKD,ZERO),   U003$\n               PARMREG=R2,ENV=(CP,SIM),PL=(IO)                     U005\nLINK     EQU   R11\nTABSIZE  EQU   200                      # of internal table entries\n         MVI   FLAGS,0                  init all flags\n         MVC   BUFFOLD(4),=F'1'         number of output segments  U005\n         LA    R1,BUFFLEN               -> PUTLINE buffer          U005\n         ST    R1,BUFFOLD+4                                        U005\n         XC    BUFFOFF(2),BUFFOFF       offset                     U005\n         MVI   BUFFMID,C' '             init msgid                 U005\n         MVC   PUTLINEW(PUTLINEL),PUTLINEC  init MF=L area         U005\n         XC    COUNTON(L'COUNTON+L'COUNTALL+L'COUNTDSC),COUNTON    U003\n         SPACE 2\n*U005    TPUTX HEADER1,LINELEN*ENTRIES\n         MVC   BUFFER(LINELEN*ENTRIES),HEADER1                     U005\n         MVC   BUFFLEN,=Y(4+1+LINELEN*ENTRIES)                     U005\n         BAL   R14,PUTLINE                                         U005\n         SPACE 1\n*U005    TPUTX HEADER2,LINELEN*ENTRIES\n         MVC   BUFFER(LINELEN*ENTRIES),HEADER2                     U005\n         MVC   BUFFLEN,=Y(4+1+LINELEN*ENTRIES)                     U005\n         BAL   R14,PUTLINE                                         U005\n         SPACE 1\n         LA    R7,TABSIZE               get internal table size\n         LA    R6,TABLE                 -> table\n         USING TABLED,R6\n         SPACE 1\n         L     R3,CVTPTR                -> cvt\n         L     R3,CVTASVT-CVT(,R3)      -> asvt\n         L     R8,ASVTMAXU-ASVT(,R3)    max nbr of address spaces  U004\n         LA    R3,ASVTFRST-ASVT(,R3)    -> top entry of asvt\n***      LA    R0,1                     set entry code \"set apf\"\n***      SVC   243                      do it\n         SPACE 3\nLOOP     LA    R3,4(,R3)                -> next asvt entry\n*U004    CLC   0(4,R3),=X'80000000'     if last asvt entry,\n*U004    BE    LASTASID                 ... then thru loop.\n         SH    R8,=H'1'                 decr remaining a.s. count  U004\n         BM    LASTASID                 exit loop when all done    U004\n         TM    0(R3),X'80'              if top bit on,\n         BO    LOOP                     ...then entry not in use.\n         SPACE 1\n         L     R1,0(,R3)                ascb address\n         USNGX ASCB,R1                                             U004\n         L     R5,ASCBTSB               -> tsb (in protected core)\n         LTR   R5,R5                    if zero,\n         BZ    LOOP                     ... then batch job, so skip.\n         USING TSB,R5\n         SPACE 1\n         MVC   0(TABLELEN,R6),BLANKS    blank this entry\n         MVC   TUSERID,=C'Starting'     assume special case\n         LA    R0,1                     get increment              U002\n         AH    R0,COUNTALL              count a tso user           U002\n         STH   R0,COUNTALL              store updated counter      U002\n         L     R1,ASCBJBNS              -> userid\n         LTR   R1,R1                    any pointer?\n         BZ    NO$JOBNM                 no - skip                  U002\n         MVC   TUSERID,0(R1)            move jobname\n         LA    R0,1                     get increment              U002\n         AH    R0,COUNTON               count a logged on user     U002\n         STH   R0,COUNTON               store updated counter      U002\n         DROPX R1                       ASCB                       U004\n         SPACE 1\nNO$JOBNM MODESET KEY=ZERO               set protect key = 0\n         SPACE 1\n***      UNPK  TLINEADR-1(5),TSBLINE(3) line address\n         MVC   TTERMID,TSBTRMID         terminal symbolic name\n*        TM    TSBFLG5,TSBVTAM          is it vtam?\n*        BNO   TCAM                     no - tcam\n*        L     R1,TSBEXTNT              -> tsb extension\n*        USING TSBX,R1\n*        TM    TSBXFLG1,TSBXWREC        awaiting reconnect?\n*        BNO   *+10                     no - skip\n*        MVC   TTERMID,=C'DISCON''D'    yes - say so\n*        DROP  R1,R5\n         MVI   TSTAR,C' '\n         TM    TSBFLG4,TSBHUNG          has terminal hung up?\n         BNO   TCAM                     no - ok                    U003\n         MVI   TSTAR,C'*'               yes - remember\n         OI    FLAGS,FSTAR\n         LA    R0,1                     get increment              U003\n         AH    R0,COUNTDSC              count a disconnect user    U003\n         STH   R0,COUNTDSC              store updated counter      U003\n         DROP  R5\n         SPACE 1\nTCAM     MODESET KEY=NZERO              reset protect key to normal\n         SPACE 1\n***      TR    TLINEADR(3),HEXTAB\n***      CLC   =C'000',TLINEADR         anything here?\n***      BNE   *+10                     yes - skip\n***      MVC   TLINEADR,BLANKS          no - blank it out\n         LA    R6,TABLELEN(,R6)         bump to next id area\n         BCT   R7,LOOP                  array full?\n*U005    TPUTX 'internal table overflow'  ...yes\n         MVC   BUFFER(23),=C'internal table overflow'  yes         U005\n         MVC   BUFFLEN,=Y(4+1+23)                                  U005\n         BAL   R14,PUTLINE                                         U005\n         SPACE 3\nLASTASID MVI   0(R6),X'FF'              set end of list indicator\n***      SR    R0,R0                    set entry code \"unset apf\"\n***      SVC   243                      do it\n         SPACE 2\nSORTLP1  SH    R6,=Y(TABLELEN)          back up to last table entry\n         DROP  R6\n         LA    R1,TABLE                 -> first table entry\n         CR    R6,R1                    end at start?\n*U001    BL    GOPRINT                  yes - done sorting\n         BNH   GOPRINT                  yes - done sorting         U001\n         USING TABLED,R1\nSORTLP2  CLC   TUSERID,TUSERID+TABLELEN do we need to swap entries?\n         BL    NOSWAP                   no - skip\n         MVC   SWAPAREA,0(R1)           yes - so use ...\n         MVC   0(TABLELEN,R1),TABLELEN(R1)  ... the standard ...\n         MVC   TABLELEN(TABLELEN,R1),SWAPAREA  ... cheap swap method\n         SPACE 1\nNOSWAP   LA    R1,TABLELEN(,R1)         -> next table entry\n         CR    R1,R6                    end of table?\n         BL    SORTLP2                  no - continue this sort pass\n         B     SORTLP1                  yes - do next pass\n         SPACE 3\nGOPRINT  LA    R6,TABLE                 reset pointer\n         USING TABLED,R6\n         BAL   LINK,INIT                set counter & line pointer\n         USING LINE,R2\n         SPACE 2\nPRLOOP   CLI   0(R6),X'FF'              end of table?\n         BE    TABDONE                  yes - leave\n         MVC   LTERMID,TTERMID          get termid from table\n         MVC   LUSERID,TUSERID\n         MVC   LSTAR,TSTAR\n***      MVC   LLINEADR,TLINEADR\n         LA    R6,TABLELEN(,R6)         -> next table entry\n         LA    R2,LINELEN(,R2)          -> next entry on line\n         BCT   R4,PRLOOP                fill this line\n         BAL   LINK,PRINT               print this line\n         B     PRLOOP                   fill next line\n         SPACE 2\nTABDONE  CLC   MSGAREA,BLANKS           if line is all blank\n         BE    *+8                      ...then nothing to print\n         BAL   LINK,PRINT               and print line.\n         SPACE 2\n*---  Print counts of logged on and logging on users               U002\n         MVC   MSGAREA(COUNTMSL),COUNTMSG  copy summary text       U002\n         LH    R0,COUNTON               get logged on count        U002\n         CVD   R0,DWD                   prepare to edit            U002\n         ED    MSGON-COUNTMSG+MSGAREA(4),DWD+6  make displayable   U002\n         LH    R0,COUNTDSC              get disconnect count       U003\n         CVD   R0,DWD                   prepare to edit            U003\n         ED    MSGDSC-COUNTMSG+MSGAREA(4),DWD+6  make displayable  U003\n         MVI   MSGDSC-COUNTMSG+MSGAREA+1,C'('                      U003\n         LH    R0,COUNTALL              get total count            U002\n         SH    R0,COUNTON               get starting count         U002\n         CVD   R0,DWD                   prepare to edit            U002\n         ED    MSGST-COUNTMSG+MSGAREA(4),DWD+6  make displayable   U002\n*U005    TPUTX ' '                      print a blank line         U002\n         MVI   BUFFER,C' '              print a blank line         U005\n         MVC   BUFFLEN,=Y(4+1+1)                                   U005\n         BAL   R14,PUTLINE                                         U005\n*U005    TPUTX MSGAREA,COUNTMSL         print the counts           U002\n         MVC   BUFFER(COUNTMSL),MSGAREA                            U005\n         MVC   BUFFLEN,=Y(4+1+COUNTMSL)                            U005\n         BAL   R14,PUTLINE              print the counts           U005\n         TM    FLAGS,FSTAR              footnote needed?\n         BNO   RETURN                   no - return now\n*U005    TPUTX ' '                      print a blank line         U002\n         MVI   BUFFER,C' '              print a blank line         U005\n         MVC   BUFFLEN,=Y(4+1+1)                                   U005\n         BAL   R14,PUTLINE                                         U005\n*U005    TPUTX '=== Note:  \"*\" preceeding userid indicates session is d$\n               isconnected ==='\n         MVC   BUFFER(71),=C'=== Note:  \"*\" preceeding userid indicates$\n                session is disconnected ==='                       U005\n         MVC   BUFFLEN,=Y(4+1+71)                                  U005\n         BAL   R14,PUTLINE                                         U005\n         B     RETURN                   leave\n         SPACE 3\n*PRINT   TPUTX MSGAREA,L'MSGAREA        print the line\nPRINT    MVC   BUFFER(L'MSGAREA),MSGAREA                           U005\n         MVC   BUFFLEN,=Y(4+1+L'MSGAREA)                           U005\n         BAL   R14,PUTLINE              print the counts           U005\n         SPACE 1\nINIT     LA    R4,ENTRIES               set counter\n         LA    R2,MSGAREA               reset output pointer\n         MVC   MSGAREA,BLANKS           clear the print line\n         BR    LINK                     return to caller\n         SPACE 3\nPUTLINE  ST    R14,PL@R14               save return address        U005\n*\n         PUTLINE  OUTPUT=BUFFOLD,PARM=PUTLINEW,MF=(E,IOPL)         U005\n*\n         SPACE 1\n         L     R14,PL@R14               restore return address     U005\n         BR    R14                                                 U005\n         SPACE 3\n         LTORG\n         SPACE 2\nBLANKS   DC    CL80' '\nHEXTAB   EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\n         SPACE 2\nPUTLINEC PUTLINE  MF=L                                             U005\n*                                                                  U005\nPUTLINEL EQU   *-PUTLINEC                                          U005\n         SPACE 2\nLINE     DSECT\nLSTAR    DS    CL1\n         DS    CL1\nLUSERID  DS    CL8\n         DS    CL1\nLTERMID  DS    CL8\n         DS    CL1\n*LLINEADR DS    CL3\n***      DS    CL3\nLINELEN  EQU   *-LINE\n         SPACE 1\n*NTRIES  EQU   (L'MSGAREA-1)/LINELEN\n*NTRIES  EQU   (80-1)/LINELEN           @#(*&%$&\u00ac assembler\nENTRIES  EQU   80/LINELEN               @#(*&%$&\u00ac assembler\n         SPACE 2\nDUSERS   CSECT                          RESUME\n*EADER1  DC    3CL(LINELEN)'  Userid   Terminal line'\n*EADER2  DC    3CL(LINELEN)'  ------   -------- ----'\nHEADER1  DC    4CL(LINELEN)'  Userid   Terminal '\nHEADER2  DC    4CL(LINELEN)'  ------   -------- '\nCOUNTMSG EQU   *                                                   U002\nMSGON    DC    X'40202120',C' users logged on'                     U003\nMSGDSC   DC    X'40202120',C' disconnected),'                      U003\nMSGST    DC    X'40202120',C' users logging on.'                   U002\nCOUNTMSL EQU   *-COUNTMSG                                          U002\n         SPACE 2\nTABLED   DSECT\nTSTAR    DS    C,C\nTUSERID  DS    CL8\nTTERMID  DS    CL8,C\n*TLINEADR DS    CL3,C\nTABLELEN EQU   *-TABLED\n         SPACE 2\nWORKD    DSECT                          RESUME\nDWD      DS    D                                                   U002\nCOUNTON  DS    H                        number of users logged on\nCOUNTALL DS    H                        total number of users\nCOUNTDSC DS    H                        number of disc'd users     U003\nFLAGS    DS    X\nFSTAR    EQU   X'80'                    footnote msg is required\nPL@R14   DS    F                                                   U005\n*                                                                  U005\nBUFFOLD  DS    2F                       OUTPUT LINE DESCRIPTOR\nBUFFLEN  DS    H                        PRINTLINE LENGTH\nBUFFOFF  DS    H                        OFFSET\nBUFFMID  DS    C                        delim after msgid\nBUFFER   DS    CL131                    OUTPUT BUFFER\n*\nPUTLINEW PUTLINE  MF=L                                             U005\n*\n         DS    0F                       alignment\nSWAPAREA DS    CL(TABLELEN)\nMSGAREA  DS    CL80\nTABLE    DS    (TABSIZE)XL(TABLELEN)\nTABLEND  DS    X\nWORKLEN  EQU   *-WORKD\n         EJECT\n*        IKJTSB  LIST=YES,EXT=YES\n         IKJTSB  LIST=YES\n         PRINT NOGEN                                               U004\n         CVT   DSECT=YES                                           U004\n         IHAASVT  ,                                                U004\n         IHAASCB  ,                                                U004\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ENQ": {"ttr": 8453, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x821\\x1f\\x00\\x92\\t\\x0f H\\x03\\x7f\\x02(\\x01\\xb4\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1982-11-07T00:00:00", "modifydate": "1992-03-30T20:48:00", "lines": 895, "newlines": 552, "modlines": 436, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1988 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nENQ      TITLE '-----  DISPLAY MVS/SP ENQUEUES  -----'\n*---------------------------------------------------------------------*\n*                                                                     *\n*   Program name:  ENQ                                                *\n*                                                                     *\n*   Purpose:       Enable a TSO user to display MVS/SP enqueues       *\n*                                                                     *\n*   Origin:        This program was obtained from UCLA-OAC in Nov82   *\n*                                                                     *\n*   Updates:                                                          *\n*      05Aug89  U008 LDW  Correctly blank the char after jobname      *\n*      10JAN89  U007 LDW  CHANGE UPPER LIMIT OF VC GETMAIN FROM 2G    *\n*                            TO 2M TO REDUCE PROBLEMS WHEN RUNNING    *\n*                            UNDER PIE/TSO/SESSIONS                   *\n*      03FEB87  U006 LDW  FREE SOME STORAGE AFTER VC GETMAIN TO TRY   *\n*                            AVOID S40D AND SIMILAR PROBLEMS          *\n*      10OCT86  U005 LDW  DISPLAY RNAME IN CHAR FIRST, EVEN IF IT     *\n*                            IS TO BE DISPLAYED IN HEX                *\n*      04/24/85 U004 LDW  CHANGE DEFAULT TO 'NOCLEAR', DUE TO         *\n*                            PROBLEMS UNDER SESSION MANAGER           *\n*      06/11/84 U003 LDW  CLEAR SCREEN BEFORE EACH DISPLAY, UNLESS    *\n*                            'NOCLEAR' SUBCOMMAND ENTERED ('CLEAR'    *\n*                            WILL RESUME SCREEN CLEAR)                *\n*                         ADD 'RESERVE' SUBCOMMAND TO LIST ONLY       *\n*                            RESERVES                                 *\n*      11/10/83 U002 SDM  ELIMINATE OAC MACROS                        *\n*      01/31/83 U001 LDW  CHANGE SYSTEM WIDE ENQ CHAR FROM 'S' TO 'Y' *\n*                         TEST FOR SYSTEMS WIDE ENQ, DISPLAY AS 'Z'   *\n*                         NAME THE SUBFIELDS OF PRTBUFF, INSTEAD OF   *\n*                            USING OFFSETS                            *\n*                         CHANGE PUTGET PROMPT TO ASIS                *\n*                         FIX TEST FOR '*' AS OPERAND OF 'FIND', SO   *\n*                            'F * * *MASTER*' WORKS                   *\n*                         PUT IN SPECIAL CHECK FOR QNAME='SPFEDIT'    *\n*                         FORMAT RNAME IN HEX IF IT CONTAINS          *\n*                            UNPRINTABLE CHARACTERS                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\n         MACRO\n&LBL     MSG   &PARM\n         LCLA  &A\n&A       SETA  2+K'&PARM\n&LBL     DC    0H'0',AL2(&A,0)\n         DC    C&PARM\n         MEND\n         SPACE 3\n         MACRO -- XCALL -- CALL INTERNAL SUBROUTINE                U002\n&L       XCALL &N                                                  U002\n&L       LA    R15,&N                   -> ROUTINE ENTRY           U002\n         BALR  R14,R15                  CALL ROUTINE               U002\n         MEND                                                      U002\n         SPACE 3\n         MACRO -- XSUB -- DEFINE INTERNAL SUBROUTINE ENTRY         U002\n&L       XSUB  ,                                                   U002\n&L       SAVE  (14,12),,*               SAVE INCOMING REGS         U002\n         LR    R10,R15                  SET SUBROUTINE BASE        U002\n         LA    R15,PUSHSTAK-&L.(,R15)   -> PUSH STACK ROUTINE      U002\n         BALR  R14,R15                  PUSH THE SAVE AREA STACK   U002\n         USNGX &L,R10                   ADDRESS THE SUBROUTINE     U002\n         MEND                                                      U002\n         SPACE 3\n         MACRO -- XRET -- RETURN FROM  INTERNAL SUBROUTINE         U002\n&LBL     XRET  &RC=                                                U002\n         LCLC  &L,&N                                               U002\n&L       SETC  'IHB&SYSNDX.A'                                      U002\n         AIF   ('&LBL' EQ '').NOLBL                                U002\n&L       SETC  '&LBL'                                              U002\n.NOLBL   ANOP                                                      U002\n&N       SETC  '&L'                                                U002\n         AIF   ('&RC' EQ '').NORC                                  U002\n         AIF   ('&RC'(1,1) EQ '(').REGRC                           U002\n&N       LA    R15,&RC                  SET RETURN CODE            U002\n&N       SETC  ''                                                  U002\n.REGRC   AIF   ('&RC' EQ '(15)').NORC                              U002\n         AIF   ('&RC' EQ '(R15)').NORC                             U002\n&N       LR    R15,&RC(1)               SET RETURN CODE            U002\n&N       SETC  ''                                                  U002\n.NORC    ANOP                                                      U002\n&N       LA    R2,POPSTAK               -> POP STACK ROUTINE       U002\n         BALR  R14,R2                   RETURN BY WAY OF POP RTN   U002\n         MEND                                                      U002\n         EJECT\nENQ      OSENTER BASE=R10,GETMAIN=(WORKALEN,WORKAREA),PARMREG=R2,  U002$\n               ENV=(CP,SIM),EXIT=EXIT,RC=(R15),LOAD=K              U003\n         TITLE 'ENQ - INITIALIZATION'\n*\n*        INITIALIZATION\n*\n         LR    R12,R13                  -> WORKAREA                U002\n         DROPX R13                      WORKAREA                   U002\n         USNGX WORKAREA,R12             SEPARATE WORK FROM SAVE    U002\n         LA    R0,SAVESTK               -> FIRST STACK ENTRY       U002\n         ST    R0,SAVESTKP              STACK POINTER              U002\n         LA    R0,SAVESTKE              -> LAST STACK ENTRY        U002\n         ST    R0,SAVESTKL              STACK LIMIT                U002\n         LA    R8,IOPLL           INITIALIZE THE IOPL\n         USNGX IOPL,R8                                             U002\n         MVC   IOPLUPT(4),CPPLUPT COPY UPT ADD FROM CPPL\n         MVC   IOPLECT(4),CPPLECT COPY ECT ADD FROM CPPL\n         LA    R1,TSOECB          GET TSO ECB ADDRESS\n         ST    R1,IOPLECB         STORE IN IOPL\n         DROPX R8                                                  U002\n         LA    R1,PRTLEN          INITIALIZE TO OLD\n         ST    R1,OLD+4           STORE OUTPUT BUF ADD IN OLD\n         LA    R1,1               GET NUMBER OF OUTPUT SEGMENTS\n         ST    R1,OLD             STORE IN OLD\n         XC    PRTOFF(2),PRTOFF   ZERO OFFSET OF FIRST SEGMENT\n         MVC   GETMAINL(GETMLEN),GETMDC BUY AN AREA FOR GQSCAN\nGETAREA  GETMAIN VC,LA=MEMLOW,A=AREAA,MF=(E,GETMAINL),SP=1,            X\n               RELATED=(FREEAREA)\n         LTR   R15,R15\n         BZ    CONFL1\n         LA    R1,NOMEM           COMPLAIN ABOUT LACK OF MEMORY\n         XCALL PRINT                                               U002\n         LA    R15,4\n         B     EXIT\n*\n*        ON ENTRY WE ASSUME THE CONFLICT COMMAND\n*\nCONFL1   MVI   FLGS,CONFLG        INIT THE FLAG\n         L     R1,AREAA                 -> GOTTEN STORAGE          U006\n         L     R0,AREAA+4               GET LENGTH OF GOTTEN STG   U006\n         AR    R1,R0                    -> PAST END                U006\n         S     R1,=A(32*1024)           -> PART TO FREE            U006\n         S     R0,=A(32*1024)           ADJUST LENGTH TO KEEP      U006\n         ST    R0,AREAA+4               STORE UPDATED LENGTH       U006\n*  CAN'T BE NON-POSITIVE, SINCE THE MINIMUM WE'LL ACCEPT WAS       U006\n*  CHANGED FROM 32K TO 64K                                         U006\n         FREEMAIN  RU,A=(1),LV=32*1024,SP=1  GIVE BACK 32K TO SYS  U006\n         XC    QNL(6),QNL         ZERO LENGTHS\n         MVC   GQLIST(CONQL),CONQ INIT PARM LIST\n         TITLE 'ENQ - MAIN Q SCAN/FORM AT LOOP'\n*\n*        MAIN  Q SCAN/FORMAT LOOP  FOR ALL COMMANDS\n*\nENQLP    TM    FLAG2,F2CLEAR      CLEAR SCREEN?                    U004\n         BNO   ENQLP0             NO - SKIP                        U004\n         L     R15,K              -> CLEAR SCREEN SUBROUTINE       U003\n         BALR  R14,R15            CALL IT                          U003\n         SPACE 2\nENQLP0   XCALL SCAN               GO SCAN QUEUES                   U002\n         BNZ   GETCMD             NOTHING THERE\n         L     R9,AREAA           POINT TO FIRST RIB\n         USNGX RIB,R9                                              U002\n*\n*        LOOP  TO HERE AFTER RESCAN WHERE ALL RIBES FOR THE\n*              PREVIOUS RIB OCCURED  IN THE PREVIOUS AREA\n*\nENQLP1   MVC   NRIBES(4),RIBTRIBE TOTAL NUMBER OF RIBE'S FOR THIS RIB\n         NI    FLGS,X'FF'-CONTFLG MARK START OF RIB\n         MVC   NCRIBES(4),RIBNRIBE SAVE # RIBES THIS AREA\n         LR    R8,R9              COPY RIB ADDR\n         AH    R8,RIBL            ADD IN RIBLENGTH RETURN BY GQSCAN\n         AH    R8,RIBVLEN         ADD IN LENGTH OF VARIABLE PORTION\n         USNGX RIBE,R8                                             U002\n*\n*        LOOP  TO HERE TO PROCESS  A RIBE\n*\nENQLP3   XCALL FINDCHK            SEE IF WE PRINT THIS ONE         U002\n         BNZ   ENQ2               IF NOT NO PRINT\n         XCALL FMTRIBE            FORMAT JOB INFO                  U002\n         XCALL FMTRIB             FORMAT QNAME, RNAME INFO         U002\n         XCALL PRINT                                               U002\n         BNZ   GETCMD             IF ATTN, QUIT\nENQ2     AH    R8,RIBEL           POINT TO NEXT RIBE\n         L     R1,NRIBES          GET # UNPROCESSED RIBES THIS RIB\n         BCT   R1,ENQ4            DECREMENT\n*\n*        FINISHED WITH THE RIBES IN THIS RIB\n*        ADJUST POINTER AND DECREMENT NUMBER OF RIBS\n*\nENQ2A    LR    R9,R8              ITS A RIB NOT A RIBE\n         NI    FLGS,X'FF'-CONTFLG MARK START OF RIB\n         L     R1,NRIBS           GET # UNPROCESSED RIBS\n         BCT   R1,ENQ3            DECREMENT\n*\n*        FINISHED WITH ALL THE RIBS IN THIS AREA\n*        CHECK RC TO SEE IF THAT  WAS THE LAST RIB\n*\n         ICM   R1,15,GQRC         CHECK FOR END OF LIST\n         BZ    GETCMD\n         XCALL RESCAN             GET NEXT CHUNK OF STUFF          U002\n         L     R9,AREAA           POINT TO FIRST RIB\n         BZ    ENQLP1\n         B     GETCMD             TOTAL NUMBER OF RIBE'S FOR THIS RIB\n*\n*        THERE IS AT LEAST ONE UNPROCESSED RIB IN THIS AREA\n*\nENQ3     ST    R1,NRIBS           STORE NEW #\n         B     ENQLP1             GO PROCESS THIS RIB\n*\n*        THERE IS AT LEAST ONE UNPROCESSED RIBE IN THIS RIB\n*\nENQ4     ST    R1,NRIBES          STORE NEW #\n         L     R1,NCRIBES         GET # UNPROCESSED RIBS THIS AREA\n         BCT   R1,ENQ5\n*\n*        THE RIBES FOR THIS RIB SPAN THIS AREA\n*        SO WE  WANT THE NEXT CHUNK, BUT WE DONT\n*        WANT  TO REDISPLAY THE QNAME, RNAME INFO\n*\n**       XCALL RESCAN             GET NEXT CHUNK OF STUFF          U002\n**       BNZ   GETCMD\n**       L     R9,AREAA           POINT TO FIRST RIB\n**       OI    FLGS,CONTFLG       MARK CONTINUATION\n**       B     ENQLP2\n*\n*        WELL  IT WAS A GOOD IDEA, BUT IT TURNS OUT THAT\n*        GQSCAN TRUNCATES SPANNED RIBES UNLESS THE SCOPE\n*        IS LOCAL OR GLOBAL, FOR WHICH YOU HAVE TO BE\n*        KEY ZERO SUPERVISOR, SO JUST PUT OUT A MSG OF (*MORE*)\n*        AND PROCESS THE NEXT RIB\n         LA    R1,MOREM           POINT TO MORE MESSAGE\n         ST    R1,OLD+4           STORE IN OLD\n         XCALL PRINT                                               U002\n         BZ    ENQ2A              PROCESS NEXT RIB\n         B     GETCMD             IF ATTN PROCESS NEXT CMD\n*\n*        THERE  IS AT LEAST ONE UNPROCESSED RIBE IN THIS AREA\n*\nENQ5     ST    R1,NCRIBES         STORE NEW #\n         B     ENQLP3             GO FORMAT THIS ONE\n         TITLE 'ENQ - COMMAND REQUESTOR'\n*\n*        COMMAND REQUESTOR\n*\nGETCMD   NI    FLGS,CONFLG+FINDFLG+GLOBFLG CLEANUP FLAGS\n         LA    R1,HERALD          POINT TO HERALD\n         ST    R1,OLD+4           STORE IN OLD\n         MVC   PUTGETL(PUTGTDCL),PUTGETDC INIT PARM BLOCK\n         XC    TSOECB(4),TSOECB   INIT ECB\n         PUTGET PARM=PUTGETL,OUTPUT=(OLD,SINGLE,MODE),                 X\n               TERMPUT=(ASIS,WAIT,NOHOLD,NOBREAK),                 U001X\n               TERMGET=(EDIT,WAIT),MF=(E,IOPLL)\n         CH    R15,=H'5'          SEE IF OK RETURN\n         BL    GETCMD1\n         CH    R15,=H'8'          WAS IT ATTENTION?\n         BE    GETCMD             IF SO REPROMPT\n         CH    R15,=H'32'         DID THE USER HANG UP?\n         BE    CLEANUP            IF SO JUST EXIT\n         EX    R0,*               SHOULD NEVER HAPPEN\nGETCMD1  L     R9,PUTGETL+12      GET ADDR OF REPLY\n         ST    R9,GETADDR         SAVE AS ADDR OF INPUT BUFFER\n         LH    R8,0(R9)           GET LENGTH OF INPUT BUFFER\n         ST    R8,GETLEN          SAVE LENGTH\n         CH    R8,=H'4'           SEE IF EMPTY\n         BH    GETCMD2            NO SO PROCESS IT\nRECMD    TM    FLGS,CONFLG        DO LAST COMMAND AGAIN\n         BO    CONFLICT           IF CONFLICT, DO IT AGAIN\n         TM    FLGS,FINDFLG       IF FIND\n         BO    FINDAG             DO THAT AGAIN\n         TM    FLGS,GLOBFLG       IF GLOBAL\n         BO    GLOBAL             DO THAT AGAIN\nGETCMDAG XCALL GETCMDFR           FREE THE INPUT BUFFER            U002\n         B     GETCMD             AND ASK AGAIN\nGETCMD2  LA    R7,0(R8,R9)        POINT PAST END OF INPUT BUFFER\n         ST    R7,CUREND          SAVE THIS POSITION\n         LA    R6,4(R9)           POINT TO FIRST TEXT CHAR\n         ST    R6,CURIN           INITIALIZE CURRENT INPUT POSITION\n         XCALL GETTOKEN                                            U002\n         BZ    RECMD              IF EMPTY LINE, DO PREVIOUS CMD\n*  THIS TEST MUST OCCUR BEFORE TEST FOR 'CONFLICT'                 U003\n         CLC   =C'CLEAR',0(R1)    IS IT CLEAR?                     U003\n         BE    SETCLEAR           YES - RESET FLAG                 U003\n         CLI   0(R1),C'C'         SEE IF CONFLICT\n         BE    CONFLICT\n         CLI   0(R1),C'E'         SEE IF END\n         BE    END\n         CLI   0(R1),C'F'         SEE IF FIND\n         BE    FIND\n         CLI   0(R1),C'R'         SEE IF RESERVE                   U003\n         BE    RESERVE                                             U003\n         CLI   0(R1),C'G'         SEE IF GLOBAL\n         BE    GLOBAL\n         CLC   =C'NOCLEAR',0(R1)  IS IT CLEAR?                     U003\n         BE    SETNOCLR           YES - SET FLAG                   U003\n         LA    R1,CMDNF           POINT TO INVALID COMMAND MSG\n         ST    R1,OLD+4\n         XCALL PRINT                                               U002\n         BZ    GETCMDAG           IF NO ATTN, ASK AGAIN\n         B     END                IF ATTN, END\n         TITLE 'ENQ - COMMANDS'\nSETCLEAR OI    FLAG2,F2CLEAR      TURN ON CLEAR FLAG               U004\n         B     ENQLP              NEW DISPLAY                      U003\n*\nSETNOCLR NI    FLAG2,255-F2CLEAR  TURN OFF CLEAR FLAG              U004\n         B     ENQLP              NEW DISPLAY                      U003\n*\nCONFLICT XCALL GETCMDFR           CONFLICT                         U002\n         B     CONFL1\n*\nEND      XCALL GETCMDFR           END                              U002\n         B     CLEANUP\n*\nGLOBAL   XCALL GETCMDFR           GLOBAL                           U002\n         MVI   FLGS,GLOBFLG       CLEAR FLAGS\n         MVC   GQLIST(ALLQL),ALLQ INIT PARM BLOCK\n         B     ENQLP\n*\nRESERVE  OI    FLAG2,F2RSRV       INDICATE SELECT ONLY RESERVES    U003\n         B     FINDX              JOIN COMMON CODE                 U003\n*\nFIND     NI    FLAG2,255-F2RSRV   DON'T RESTRICT TO RESERVES       U003\n*      ( B     FINDX )            JOIN COMMON CODE                 U003\n*\nFINDX    XC    QNL(6),QNL         ZERO ALL LENGTHS\n         XCALL GETTOKEN                                            U002\n         BZ    FIND1              IF NONE LEAVE ALL EMPTY\n         CH    R15,=H'1'                OPERAND EXACTLY 1 CHAR?    U001\n         BNE   *+12                     NO - SKIP NEXT TEST        U001\n         CLI   0(R1),C'*'         * IS SAME AS EMPTY\n         BE    FIND1\n         CH    R15,=H'8'          CHECK LENGTH\n         BH    FINDPR\n         STH   R15,QNL            SAVE QNAME LENGTH\n         BCTR  R15,0              DECREMENT FOR  EXECUTE\n         MVC   QNAME(1),0(R1)     < EXECUTED >\n         EX    R15,*-6            MOVE INTO SAVE AREA\nFIND1    XCALL GETTOKEN                                            U002\n         BZ    FIND2              IF NONE LEAVE REST EMPTY\n         CH    R15,=H'1'                OPERAND EXACTLY 1 CHAR?    U001\n         BNE   *+12                     NO - SKIP NEXT TEST        U001\n         CLI   0(R1),C'*'         * IS SAME AS EMPTY\n         BE    FIND2\n         CH    R15,=H'255'\n         BH    FINDPR\n         STH   R15,RNL            SAVE RNAME LENGTH\n         BCTR  R15,0              DECREMENT FOR EXECUTE\n         MVC   RNAME(1),0(R1)     < EXECUTED >\n         EX    R15,*-6\nFIND2    XCALL GETTOKEN                                            U002\n         BZ    FINDAG             IF NONE LEAVE REST EMPTY\n         CH    R15,=H'1'                OPERAND EXACTLY 1 CHAR?    U001\n         BNE   *+12                     NO - SKIP NEXT TEST        U001\n         CLI   0(R1),C'*'         * IS SAME AS EMPTY\n         BE    FINDAG\n         CH    R15,=H'8'          CHECK FOR VALID LENGTH\n         BH    FINDPR\n         STH   R15,JNL            SAVE JOBNAME LENGTH\n         BCTR  R15,0              DECREMENT FOR EXECUTE\n         MVC   JNAME(1),0(R1)     < EXECUTED >\n         EX    R15,*-6\nFINDAG   XCALL GETCMDFR                                            U002\n         MVI   FLGS,FINDFLG       FIND\n         MVC   GQLIST(ALLQL),ALLQ INIT PARM BLOCK\n         B     ENQLP\nFINDPR   LA    R1,FINDPRM         POINT TO INVALID PARM MSG\n         ST    R1,OLD+4           STORE IN OLD\n         XCALL PRINT                                               U002\n         BZ    GETCMDAG           IF NO ATTN, ASK AGAIN\n         B     END                IF ATTN, QUIT\n*\nCLEANUP  MVC   FREEML(FREEMLEN),FREEMDC\nFREEAREA FREEMAIN VU,A=AREAA,MF=(E,FREEML),SP=1,RELATED=(GETAREA)\n         SR    R15,R15\n         B     EXIT\n         TITLE 'ENQ - CONSTANTS'\n*MEMLOW  DC    X'00008000'        MEM LIMITS FOR GQ AREA\nMEMLOW   DC    X'00010000'        MEM LIMITS FOR GQ AREA           U006\n*MEMHIGH DC    X'7FFFFFFF'\nMEMHIGH  DC    X'001FFFFF'                                         U007\nGETMDC   GETMAIN VC,SP=1,MF=L\nGETMLEN  EQU   *-GETMDC\nFREEMDC  FREEMAIN VU,SP=1,MF=L\nFREEMLEN EQU   *-FREEMDC\nPUTGETDC PUTGET  OUTPUT=(0,,MODE),MF=L\nPUTGTDCL EQU   *-PUTGETDC\nALLQ     GQSCAN REQLIM=MAX,SCOPE=ALL,SYSNAME=0,REQCNT=1,MF=L\nALLQL    EQU   *-ALLQ\nCONQ     GQSCAN REQLIM=MAX,SCOPE=ALL,SYSNAME=0,WAITCNT=1,MF=L\nCONQL    EQU   *-CONQ\nNOMEM    MSG   ' NOT ENOUGH CORE TO PROCESS REQUEST'\n*HERALD  MSG   ' ENQ'\nHERALD   MSG   ' ENQ:'                                             U001\nCMDNF    MSG   ' INVALID COMMAND'\nFINDPRM  MSG   ' INVALID PARAMETER'\nMOREM    MSG   ' (*MORE*)'\n         LTORG\n         DROPX R10                                                 U002\n         TITLE 'ENQ - SUBROUTINES'\n*\n*        SUBROUTINE TO PARSE AND  UPPERCASE NEXT TOKEN FROM INPUT LINE\n*\n*     ON ENTRY ASSUMES:\n*        CURIN POINTS TO FIRST CHAR OF TEXT\n*        CUREND POINTS PAST END OF TEXT\n*\n*     ON RETURN:\n*        R1 POINTS TO FIRST CHAR OF TOKEN\n*        R15 CONTAINS LENGTH OF TOKEN\n*        CURIN POINTS TO NEXT POSITION IN INPUT STRING\n*\nGETTOKEN XSUB                                                      U002\n         L     R6,CURIN           POINT TO CURRENT POS\n         L     R7,CUREND          POINT PAST END OF STRING\n         SR    R15,R15            ASSUME ZERO LENGTH TOKEN\n         CR    R6,R7              SEE IF AT END OF TEXT\n         BNL   GETTR1             IF SO RETURN WITH EMPTY TOKEN\n*\n*        FIND  FIRST NON BLANK, OR COMMA\n*\nGETT1    OI    0(R6),C' '         UPPERCASE THE CHARACTER\n         CLI   0(R6),C' '         SEE IF BLANK\n         BNE   GETT2              BRANCH IF NOT\n         LA    R6,1(R6)           POINT TO NEXT CHAR\n         CR    R6,R7              SEE IF OFF END OF TEXT\n         BL    GETT1              IF NOT OFF END CONTINUE\n         B     GETTR1             IF OFF END RETURN EMPTY TOKEN\nGETT2    CLI   0(R6),C','         IS IT A COMMA\n         BNE   GETT3              IF NOT THEN START OF TOKEN\n         B     GETTR              AND RETURN EMPTY TOKEN\n*\n*        NEXT  BLANK OR COMMA DELIMITS TOKEN\n*\nGETT3    LR    R1,R6              SAVE START OF TOKEN\nGETT4    OI    0(R6),C' '         UPPERCASE THE CHARACTER\n         CLI   0(R6),C' '         FIND NEXT BLANK\n         BE    GETTR              END OF TOKEN\n         CLI   0(R6),C','         COMMA IS ALSO A DELIMITER\n         BE    GETTR              END OF TOKEN\n         LA    R15,1(R15)         COUNT THIS CHAR\n         LA    R6,1(R6)           BUMP POINTER\n         CR    R6,R7              SEE IF OFF END OF TEXT\n         BL    GETT4              IF NOT, CONTINUE SCAN\nGETTR    LA    R6,1(R6)           POINT TO NEXT CHAR\nGETTR1   ST    R6,CURIN           SAVE NEW CURRENT POSSITION\n         XRET  RC=(R15)                                            U002\n         LTORG\n         DROPX R10                                                 U002\n         EJECT\n*\n*        SUBROUTINE TO FREE INPUT BUFFER FROM PUTGET\n*        ASSUMES ADDR IN R9, LENGTH IN R8\n*\nGETCMDFR XSUB                                                      U002\n         L     R9,GETADDR         POINT TO AREA TO BE FREED\n         L     R8,GETLEN          GET LENGTH OF AREA TO BE FREED\n         FREEMAIN R,A=(R9),LV=(R8),SP=1\n         XRET                                                      U002\n         LTORG\n         DROPX R10                                                 U002\n         EJECT\nSCAN     XSUB                                                      U002\n         XC    TOKEN(4),TOKEN     ZERO TOKEN\n         LM    R2,R3,AREAA        GET AREA ADDR AND LENGTH\n         GQSCAN AREA=((R2),(R3)),TOKEN=TOKEN,MF=(E,GQLIST)\n         ST    R15,GQRC           SAVE THE RC\n         CH    R15,=H'4'          EMPTY\n         BE    SCANRT             IF SO RETURN\n         CH    R15,=H'12'         ERROR\n         BL    SCAN1\n         EX    R0,*               SHOULD NEVER HAPPEN\nSCAN1    ST    R0,RIBL            SAVE LENGTHS OF RIB AND RIBE\n         ST    R1,NRIBS           SAVE # RIBS THIS AREA\n         SR    R15,R15\nSCANRT   XRET  RC=(R15)                                            U002\n         LTORG\n         DROPX R10                                                 U002\n         EJECT\n*\n*        CALL  TO GET NEXT CHUNK  OF DATA FROM GQSCAN\n*\nRESCAN   XSUB                                                      U002\n         GQSCAN MF=(E,GQLIST)\nSCANCHK  ST    R15,GQRC           SAVE THE RC\n         CH    R15,=H'4'          EMPTY\n         BE    RESCANRT           IF SO RETURN\n         CH    R15,=H'12'         ERROR\n         BL    RESCAN1\n         EX    R0,*               SHOULD NEVER HAPPEN\nRESCAN1  ST    R0,RIBL            SAVE LENGTHS OF RIB AND RIBE\n         ST    R1,NRIBS           SAVE # RIBS THIS AREA\n         SR    R15,R15\nRESCANRT XRET  RC=(R15)                                            U002\n         LTORG\n         DROPX R10                                                 U002\n         EJECT\n*\n*        CHECK  TO SEE IF FIND IS  IN EFFECT\n*        IF NOT RETURN RC=0\n*\n*        IF SO CHECK THAT SPECIFIED INITIAL PORTIONS OF\n*        QNAME RNAME AND JOBNAME  MATCH\n*        RETURN ZERO IF SO, NONZERO IF NOT\n*\nFINDCHK  XSUB                                                      U002\n         TM    FLGS,FINDFLG       IS FIND APPROPRIATE\n         BNO   FINDC00            NO, EVERYTHING IS FOUND\n         TM    FLAG2,F2RSRV       WANT ONLY RESERVES?              U003\n         BZ    FINDC0             NO - CONTINUE                    U003\n         TM    RIBETYPE,RIBERESV  YES - IS THIS A RESERVE?         U003\n         BNO   FINDNZ             NO - DON'T DISPLAY IT            U003\nFINDC0   SR    R1,R1              CLEAR R1\n         ICM   R1,3,QNL           GET QNAME LENGTH\n         BZ    FINDC1\n         BCTR  R1,0               DECREMENT FOR EXECUTE\n         CLC   RIBQNAME(1),QNAME  < EXECUTED >\n         EX    R1,*-6\n         BNE   FINDNZ\nFINDC1   ICM   R1,3,JNL           GET JOBNAME LENGTH\n         BZ    FINDC2\n         BCTR  R1,0               DECREMENT FOR EXECUTE\n         CLC   RIBEJBNM(1),JNAME  < EXECUTED >\n         EX    R1,*-6\n         BNE   FINDNZ\nFINDC2   ICM   R1,3,RNL           GET RNAME LENGTH\n         BZ    FINDC00\n         BCTR  R1,0               DECREMENT FOR EXECUTE\n         LR    R15,R9             COPY RIB ADDR\n         AH    R15,RIBL           POINT TO VARIABLE PORTION\n         CLC   0(1,R15),RNAME     < EXECUTED >\n         EX    R1,*-6\n         BNE   FINDNZ\nFINDC00  SR    R15,R15\nFINDNZ   DS    0H                 R15 CONTAINS BASE AND IS NON-ZERO\nFINDRET  XRET  RC=(R15)                                            U002\n         LTORG\n         DROPX R10                                                 U002\n         EJECT\n*\n*        FORMAT THE REQUESTOR SPECIFIC INFO FROM THE RIB AND RIBE\n*\nFMTRIBE  XSUB                                                      U002\n         MVI   PRTBUFF,C' '       START WITH A BLANK\n         MVI   PRTSCOPE,C'J'      ASSUME SCOPE OF STEP             U001\n         TM    RIBSCOPE,RIBSTEP   STEP?\n         BO    FMTRIBE1           YES\n         MVI   PRTSCOPE,C'Y'      IF NOT, ASSUME SYSTEM            U001\n         TM    RIBSCOPE,RIBSYS    SYSTEM?                          U001\n         BO    FMTRIBE1           YES                              U001\n         MVI   PRTSCOPE,C'Z'      IF NOT, ASSUME SYSTEMS           U001\nFMTRIBE1 MVI   PRTTYPE,C'S'       ASSUME SHARED\n         TM    RIBERFLG,RIBETYPE  SEE IF SHARED\n         BO    FMTRIBE2\n         MVI   PRTTYPE,C'E'       IF NOT, ITS EXCLUSIVE\nFMTRIBE2 MVI   PRTSTAT,C'G'       ASSUME OWNES THE RESOURCE\n         TM    RIBESFLG,RIBESTAT  SEE IF OWNES\n         BO    FMTRIBE3\n         MVI   PRTSTAT,C'W'       IF NOT, ITS WAITING\nFMTRIBE3 MVI   PRTRSRV,C'R'       ASSUME RESERVE\n         TM    RIBETYPE,RIBERESV\n         BO    FMTRIBE4\n         MVI   PRTRSRV,C' '       IF NOT, LEAVE BLANK\nFMTRIBE4 MVI   PRTMC,C'M'         ASSUME MUST COMPLETE\n         TM    RIBETYPE,RIBEMC\n         BO    FMTRIBE5\n         MVI   PRTMC,C' '         IF NOT, LEAVE BLANK\nFMTRIBE5 MVI   PRTBLNK1,C' '      BLANK\n         MVC   PRTJOBNM(8),RIBEJBNM COPY JOBNAME\n*U001    MVC   PRTLEN(2),=H'19'   ASSUME NO VOL,UCB - LEN=15+4\n         MVC   PRTLEN,=Y(PRTDATA-PRTLEN)  ASSUME NO VOL,UCB        U001\n         MVI   PRTBLNK2,C' '                                       U008\n         TM    RIBETYPE,RIBERESV  TEST FOR RESERVE\n         BNO   FMTRIBE6\n*U001    MVC   PRTLEN(2),=H'31'   LEN = 27+4\n         MVC   PRTLEN,=Y(PRTDATA+11-PRTLEN)                        U001\n         L     R2,RIBEUCB         GET UCB ADDRESS\n         MVC   PRTDATA(6),UCBVOLI-UCBOB(R2)\n         MVI   PRTDATA+6,C'-'\n         SLL   R2,4               SHIFT UCB ADDRESS LEFT 2\n         ST    R2,PARMLSTS        STORE IN WORK AREA\n         OI    PARMLSTS+3,X'0F'   OR IN SIGN\n         UNPK  PRTDATA+7(4),PARMLSTS+1(3) UNPACK\n         L     R1,=A(FMTTRTBL)    BECAUSE OF ADDRESSABILITY\n         TR    PRTDATA+7(4),0(R1) CONVERT TO CHARACTER\nFMTRIBE6 LA    R1,PRTLEN          POINT TO THE SEGMENT\n         ST    R1,OLD+4           STORE IN OLD\n         XRET                                                      U002\nFMTTRTBL EQU   *-C'0'\n         DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         LTORG\n         DROPX R10                                                 U002\n         EJECT\n*\n*        FORMAT THE RESOURCE SPECIFIC INFO FROM THE RIB\n*\n*        ALTHOUGH THIS SUBROUTINE IS CALLED FOR EACH RIBE,\n*        IT ONLY ADDS STUFF TO THE PRINT BUFFER ONCE FOR EACH\n*        RIB.  IT ASSUMES THAT FMTRIBE HAS ALREADY BEEN CALLED\n*\nFMTRIB   XSUB                                                      U002\n         TM    FLGS,CONTFLG       SEE IF RIB ALREADY FORMATTED\n         BO    FMTRIB00\n         OI    FLGS,CONTFLG       MARK RIB AS FORMATTED\n         LA    R1,PRTLEN          POINT TO OUTPUT BUFFER\n         ST    R1,OLD+4           POINT OLD TO PRINT BUFFER\n         LH    R2,PRTLEN          GET LENGTH\n         LA    R1,0(R1,R2)        POINT PAST END OF BUFFER\n         MVI   0(R1),C' '         MOVE IN QNAME\n         MVC   1(8,R1),RIBQNAME\n         MVI   9(R1),C' '\n         AH    R2,=H'10'          ADDJUST LENGTH\n         SR    R3,R3              CLEAR R3\n         ICM   R3,1,RIBRNMLN      GET RNAME LENGTH\n         BNZ   FMTRIB1\n         STH   R2,PRTLEN          SAVE NEW LENGTH\n         B     FMTRIB00\nFMTRIB1  LR    R4,R9                    COPY RIB ADDR              U001\n         AH    R4,RIBL                  POINT TO VARIABLE PORTION  U001\n         CLC   =C'SPFEDIT ',RIBQNAME    SPECIAL?                   U001\n         BNE   FMTRIB2                  NO - CONTINUE NORMALLY     U001\n         CH    R3,=H'44'                MEMBER NAME PRESENT?       U001\n         BNH   FMTRIB2                  NO - CONTINUE NORMALLY     U001\n         CLC   =CL8' ',44(R4)           ANY MEMBER NAME THERE?     U001\n         BE    FMTRIB2                  NO - CONTINUE NORMALLY     U001\n         CH    R3,=H'52'                TOO BIG?                   U001\n         BH    FMTRIB2                  YES - SOMETHING'S WRONG    U001\n         MVC   10(44,R1),0(R4)          GET WHOLE DATASET NAME     U001\n         LA    R14,10(,R1)              -> START OF DSNAME         U001\n         LA    R3,43(,R14)              -> END OF DSN              U001\n         CLI   0(R3),C' '               FIND END OF DSN?           U001\n         BNE   *+8                      YES - GO FILL IN MEMBER    U001\n         BCT   R3,*-8                   KEEP LOOKING               U001\n         MVI   1(R3),C'('               PUT IN START DELIM         U001\n         MVC   2(8,R3),44(R4)           GET MEMBER NAME            U001\n         LA    R3,9(,R3)                -> END OF MEMBER NAME      U001\n         CLI   0(R3),C' '               FIND END OF MEMBER NAME?   U001\n         BNE   *+8                      YES                        U001\n         BCT   R3,*-8                   NO - KEEP LOOKING          U001\n         MVI   1(R3),C')'               PUT IN TRAILING DELIM      U001\n         SR    R3,R14                   COMPUTE PHONY RNAME LEN    U001\n         LA    R2,2(R3,R2)              ADD TO PREVIOUS PRINT LEN  U001\n         STH   R2,PRTLEN                SAVE                       U001\n         B     FMTRIB00                 RETURN TO CALLER           U001\nFMTRIB2  AR    R2,R3              ADD RNAME LENGTH TO PRINT LENGTH\n         STH   R2,PRTLEN          SAVE NEW LENGTH\n         BCTR  R3,0               DECREMENT FOR EXECUTE\n         MVC   10(1,R1),0(R4)     < EXECUTED >\n         EX    R3,*-6             MOVE IN RNAME\n*U005    LR    R14,R1                   PRESERVE PAST TRT          U001\n*U005    LR    R15,R2                   ...                        U001\n         LA    R14,1(R3,R1)             -> WHERE HEX MAY GO        U005\n         LA    R15,1(R3,R2)             LENGTH SO FAR              U005\n*U005    EX    R3,FMTRIBTR              SEE IF ANY INVALID CHARS   U001\n*U005    BZ    FMTRIB00                 NONE - RETURN              U001\n         EX    R3,FMTRIBTR              TRANSLATE OUT BAD CHARS    U005\n         EX    R3,FMTRIBCL              SEE IF IT CHANGED          U005\n         BE    FMTRIB00                 ALL CHARS GOOD - RETURN    U005\n         LA    R2,1+4(R3,R15)           ADJUST FOR BCTR AND \" X''\" U001\n         STH   R2,PRTLEN                SAVE NEW LENGTH            U001\n         MVC   10(3,R14),=C' X'''       START IT OFF               U001\n         LA    R14,10+3(,R14)           -> START OF HEX O/P AREA   U001\n         LA    R3,1(,R3)                RESTORE LENGTH             U001\nFMTRIB3  UNPK  0(2*7+1,R14),0(7+1,R4)   GET 7 BYTES OF RNAME       U001\n         TR    0(2*7,R14),HEXTAB        MAKE IT PRINTABLE          U001\n         MVI   2*7(R14),C''''           FIX FLIP BYTE              U001\n         LA    R1,2*7+1(,R14)           -> PAST END                U001\n         LA    R14,2*7(,R14)            BUMP OUTPUT POINTER        U001\n         LA    R4,7(,R4)                BUMP INPUT POINTER         U001\n         SH    R3,=H'7'                 ADJUST REMAINING LENGTH    U001\n         BP    FMTRIB3                  LOOP IF MORE               U001\n         BZ    FMTRIB00                 RETURN IF EXACTLY DONE     U001\n         AR    R14,R3                   BACK UP OUTPUT POINTER     U001\n         AR    R14,R3                   ...                        U001\n         MVC   0(13,R14),=CL13''''      KILL THE EXTRA AMOUNT      U001\n         LA    R1,1(,R14)               -> PAST END                U001\nFMTRIB00 XRET                                                      U002\n*MTRIBTR TRT   10(*-*,R1),TRTAB         << EXECUTED >>             U001\nFMTRIBTR TR    10(*-*,R1),TRTAB         << EXECUTED >>             U005\nFMTRIBCL CLC   10(*-*,R1),0(R4)         << EXECUTED >>             U005\nPRTSPACE MSG   '  '\n         LTORG\n         DROPX R10                                                 U002\n*TRTAB   DC    256X'01'                                            U001\n*U005                                                              U005\n*U005    ORG   TRTAB+C'A'-X'40'                                    U001\n*U005    DC    9X'00'                                              U001\n*U005    ORG   TRTAB+C'J'-X'40'                                    U001\n*U005    DC    9X'00'                                              U001\n*U005    ORG   TRTAB+C'S'-X'40'                                    U001\n*U005    DC    8X'00'                                              U001\n*U005    ORG   TRTAB+C'A'                                          U001\n*U005    DC    9X'00'                                              U001\n*U005    ORG   TRTAB+C'J'                                          U001\n*U005    DC    9X'00'                                              U001\n*U005    ORG   TRTAB+C'S'                                          U001\n*U005    DC    8X'00'                                              U001\n*U005    ORG   TRTAB+C'0'                                          U001\n*U005    DC    10X'00'                                             U001\n*U005    ORG   TRTAB+C' '                                          U001\n*U005    DC    X'00'                                               U001\n*U005    ORG   TRTAB+C'.'                                          U001\n*U005    DC    6X'00'                                              U001\n*U005    ORG   TRTAB+C'$'                                          U001\n*U005    DC    7X'00'                                              U001\n*U005    ORG   TRTAB+C','                                          U001\n*U005    DC    5X'00'                                              U001\n*U005    ORG   TRTAB+C':'                                          U001\n*U005    DC    6X'00'                                              U001\n*U005    ORG   TRTAB+256                                           U001\nTRTAB    CHARTAB  FILL='?'                                         U005\nHEXTAB   EQU   *-C'0'                                              U001\n         DC    C'0123456789ABCDEF'                                 U001\n         EJECT\n*\n*        PUTLINE SUBROUTINE, ASSUMES OLD POINTS TO SEGMENT TO BE\n*         PRINTED. RETURNS NON ZERO IF ATTENTION SIGNALLED\n*\nPRINT    XSUB                                                      U002\n         XC    TSOECB(4),TSOECB\n         MVC   PUTLL(PUTLDCL),PUTLDC\n         PUTLINE PARM=PUTLL,OUTPUT=OLD,MF=(E,IOPLL)\n         LTR   R15,R15\n         BZ    PRINTRET\n         CH    R15,4              ATTENTION?\n         BE    PRINTNZ            IF SO RETURN NON ZERO RC\n         CH    R15,20             TERMINAL DISCONNECTED?\n         BE    PRINTRET           IGNORE IT\n         CH    R15,12             SEVERE ERROR\n         BL    PRINTRET           IGNORE ALL OTHERS\n         EX    R0,*               SHOULD NEVER HAPPEN\nPRINTRET SR    R15,R15            ZERO RETURN CODE\nPRINTNZ  XRET  RC=(R15)                                            U002\nPUTLDC   PUTLINE MF=L\nPUTLDCL  EQU   *-PUTLDC\n         LTORG\n         DROPX R10                                                 U002\n         SPACE 3\n         USNGX PUSHSTAK,R15                                        U002\nPUSHSTAK L     R2,SAVESTKP              -> NEXT STACK ENTRY        U002\n         C     R2,SAVESTKL              EXCEED STACK LIMIT?        U002\n         BH    PSABEND                  YES, LEARN TO PROGRAM      U002\n         LA    R3,L'SAVESTK(,R2)        -> NEW NEXT STACK ENTRY    U002\n         ST    R3,SAVESTKP              -> NEXT STACK ENTRY        U002\n         ST    R2,8(,R13)               FORWARD CHAIN AREAS        U002\n         ST    R13,4(,R2)               BACKWARD CHAIN AREAS       U002\n         LR    R13,R2                   -> NEW SAVE AREA           U002\n         BR    R14                      RETURN TO CALLER           U002\nPSABEND  ABEND 199,DUMP                 BAD NEWS BEARS             U002\n         DROPX R15                      PUSHSTAK                   U002\n         SPACE 3\n         USNGX POPSTAK,R2                                          U002\nPOPSTAK  L     R3,SAVESTKP              -> NEXT STACK ENTRY        U002\n         SH    R3,=Y(L'SAVESTK)         -> PREVIOUS ENTRY          U002\n         ST    R3,SAVESTKP              -> NEW NEXT STACK ENTRY    U002\n         L     R13,4(,R13)              -> PREVIOUS SAVE AREA      U002\n         XC    8(4,R13),8(R13)          CLEAR FORWARD POINTER      U002\n         LM    R2,R12,28(R13)           RESTORE CALLERS R2-R12     U002\n         DROPX R2                       POPSTAK                    U002\n         L     R14,12(,R13)             RESTORE RETURN REGISTER    U002\n         LTR   R15,R15                  SET CC FROM RETURN CODE    U002\n         BR    R14                      RETURN TO CALLER           U002\n         LTORG                                                     U002\n         TITLE 'ENQ - DSECTS'\nWORKAREA DSECT                                                     U002\nAREAA    DS    F                  ADDRESS OF Q AREA\nAREAL    DS    F                  LENGTH OF AREA\nRIBL     DS    H                  LENGTH OF RIB\nRIBEL    DS    H                  LENGTH OF RIBE\nTOKEN    DS    F                  TOKEN FOR GQSCAN\nGQRC     DS    F                  RETURN CODE FROM GQSCAN\nNRIBS    DS    F                  NUMBER OF RIBS RETURNED\nNRIBES   DS    F                  NUMBER OF RIBES THIS RIB\nNCRIBES  DS    F                  NUMBER OF RIBES IN THIS AREA\nGQLIST   GQSCAN MF=L\nIOPLL    DS    4F\nTSOECB   DS    F\nGETADDR  DS    F                  ADDR OF BUFFER RETURNED BY PUTGET\nGETLEN   DS    F                  LENGTH OF BUFFER RETURNED BY PUTGET\nCURIN    DS    F                  POINTER TO CURRENT INPUT POSITION\nCUREND   DS    F                  POINTER PAST END OF CURRENT INPUT\nOLD      DS    2F                 OUTPUT LINE DESCRIPTOR\nPARMLSTS EQU   *\nPUTLL    PUTLINE MF=L             PUTLINE PARM BLOCK\n         ORG   PARMLSTS\nPUTGETL  PUTGET  MF=L             PUTGET PARM BLOCK\n         ORG   PARMLSTS\nGETMAINL GETMAIN VC,MF=L\n         ORG   PARMLSTS\nFREEML   FREEMAIN VU,MF=L\n         ORG\nQNL      DS    H                  QNAME LENGTH\nRNL      DS    H                  RNAME LENGTH\nJNL      DS    H                  JOBNAME LENGTH\nFLGS     DS    X\nCONTFLG  EQU   X'80'              RIB HAS BEEN FORMATTED\nCONFLG   EQU   X'40'              CONFLICT COMMAND IN EFFECT\nFINDFLG  EQU   X'20'              FIND COMMAND IN EFFECT\nGLOBFLG  EQU   X'10'              GLOBAL COMMAND IN EFFECT\nFLAG2    DS    B                  OTHER MISC FLAGS                 U003\nF2CLEAR  EQU   X'08'              CLEAR SCREEN BEFORE EACH DISPLAY U004\nF2RSRV   EQU   X'04'              'RESERVE' SUBCOMMAND IN EFFECT   U003\nQNAME    DS    CL8                QUEUE NAME\nJNAME    DS    CL8                JOB NAME\nRNAME    DS    CL255              RNAME\nPRTLEN   DS    H                  PRINTLINE LENGTH\nPRTOFF   DS    H                  OFFSET\nPRTBUFF  DS    (900)CL1           OUTPUT BUFFER                    U005\n         ORG   PRTBUFF+1                                           U001\nPRTSCOPE DS    C                  J(JOB) Y(SYSTEM) Z(SYSTEMS)      U001\nPRTTYPE  DS    C                  S(SHARED) E(EXCLUSIVE)           U001\nPRTSTAT  DS    C                  G(OWNED) W(WAITING)              U001\nPRTRSRV  DS    C                  R(RESERVE)                       U001\nPRTMC    DS    C                  M(MUST COMPLETE)                 U001\nPRTBLNK1 DS    C                                                   U001\nPRTJOBNM DS    CL8                JOBNAME                          U001\nPRTBLNK2 DS    C                                                   U001\nPRTDATA  DS    0C                                                  U001\n         ORG   ,                                                   U002\nSAVESTKP DC    A(0)                     -> NEXT ENTRY ON STACK     U002\nSAVESTKL DC    A(0)                     -> LAST ENTRY ON STACK     U002\n         DC    0D'0'                                               U002\nSAVESTK  DC    2XL72'00'                TWO INTERNAL SAVE AREAS    U002\nSAVESTKE EQU   *-L'SAVESTK              LAST ENTRY IN STACK        U002\n         DC    0D'0'                                               U002\nWORKALEN EQU   *-WORKAREA                                          U002\n         IKJIOPL\nUCB      DSECT\n         IEFUCBOB\n         EJECT\n         ISGRIB\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LAU": {"ttr": 8713, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x816_\\x00\\x92\\t\\x0f H\\x01\\x12\\x00\\x98\\x00\\x8e\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1981-12-31T00:00:00", "modifydate": "1992-03-30T20:48:00", "lines": 274, "newlines": 152, "modlines": 142, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1988 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nLAU      TITLE '-----  LIST ACF2 USERS (LOGGED ON AND BATCH)   -----'\n*---------------------------------------------------------------------*\n*                                                                     *\n*   PROGRAM NAME:  LAU                                                *\n*                                                                     *\n*   PURPOSE:       SEARCH THE ACF2 ASVT AND LIST INFORMATION ON THE   *\n*                  ACF2 LOGONID FOR EACH CURRENTLY EXECUTING JOB AND  *\n*                  TSO SESSION.                                       *\n*                                                                     *\n*   AUTHOR:        LEONARD D. WOREN                                   *\n*                                                                     *\n*   DATE:          DECEMBER 31, 1981                                  *\n*                                                                     *\n*   UPDATES:                                                          *\n*      21Dec88  LDW  Use PUTLINE instead of TPUT                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\n         MACRO\n&NFS     SHOW  &FIELD\n         LCLA  &A\n         LCLC  &LQ\n&A       SETA  K'&FIELD\n&LQ      SETC  'L'''                    STUPID ASSEMBLER\n&NFS     MVC   BUFFER,BLANKS\n         MVC   BUFFER+5(&A+1),=C'&FIELD='\n         MVC   BUFFER+5+&A+1(&LQ&FIELD),&FIELD\n.*       BAL   LINK,TPUTX\n         BAL   LINK,PUTLINE\n         MEND\n         MACRO\n&NFS     TPUTLIT  &TEXT,&LENGTH,&OPTS\n         LCLA  &L\n         AIF   ('&OPTS' EQ '').OPTSOK\n         MNOTE 8,'Options not supported by TPUTLIT'\n         MEXIT\n.OPTSOK  ANOP\n.LIT     ANOP\n&L       SETA  K'&TEXT-2\n&NFS     MVC   BUFFER(&L),=C&TEXT\n         LA    R0,&L&LENGTH\n         BAL   LINK,PUTLINE\n         SPACE 1\n         MEND\n         EJECT\nLAU      OSENTER  EXIT=LEAVE,RC=0,PARMREG=R2,ADDRREG=R3,LENREG=R4,     $\n               GETMAIN=(WORKLEN,WORKD),ENV=(CP,SIM),PL=(IO)\nLINK     EQU   R11\n         SPACE 2\n         MVC   BUFFOLD(4),=F'1'         NUMBER OF OUTPUT SEGMENTS\n         LA    R1,BUFFLEN               -> PUTLINE BUFFER\n         ST    R1,BUFFOLD+4\n         MVC   BUFFLEN(4),=H'80,0'      length, offset (BUFFOFF)\n         MVI   BUFFMID,C' '             INIT MSGID\n         MVC   BUFFER,BLANKS            CLEAR DISPLAY BUFFER\n*        LTR   R4,R4                    ANY PARM?\n*        BNP   NOPARM                   NO - ERROR\n*        CH    R4,=H'8'                 PARM TOO LONG?\n*        BNL   PARMLONG                 YES - ERROR\n*        BCTR  R4,0                     -1 FOR EX\n*        EX    R4,PACK                  << PACK DWD,0(*-*,R3) >>\n*        CVB   R4,DWD                   GET ASID IN BINARY\n         SR    R4,R4                    DO ALL ASID'S\n         ACFINCVT  R9,NONE=NOACFCVT     GET THE ACF2 CVT ADDRESS\n         USING ACCVT,R9\n         MVC   BUFFER(15),=C'ACF2 CVT ADDR ='\n         ST    R9,DWD\n         HEX   BUFFER+16,DWD+1,LEN=3\n*        BAL   LINK,TPUTX\n         BAL   LINK,PUTLINE\n         L     R8,ACCASVT               OBTAIN ASVT ADDR\n         MVC   BUFFER(16),=C'ACF2 ASVT ADDR ='\n         ST    R8,DWD\n         HEX   BUFFER+17,DWD+1,LEN=3\n*        BAL   LINK,TPUTX\n         BAL   LINK,PUTLINE\n         L     R1,CVTPTR                -> CVT\n         L     R1,CVTASVT-CVT(,R1)      -> ASVT\n         L     R3,ASVTMAXU-ASVT(,R1)    MAXIMUM NUMBER OF ENTRIES\n         LA    R6,ASVTENTY-4-ASVT(,R1)  -> FIRST ENTRY - 4\n*        TPUTX ' '\n         TPUTLIT  ' '\n*        TPUTX HEADER1,80\n         MVC   BUFFER(80),HEADER1\n         BAL   LINK,PUTLINE\n*        TPUTX HEADER1,80\n         MVC   BUFFER(80),HEADER2\n         BAL   LINK,PUTLINE\n         SPACE 3\nLOOP     LA    R4,1(,R4)                NEXT ASID\n         ST    R4,DWD\n         HEX   ASID,DWD+2,LEN=2\n         LA    R6,4(,R6)                -> NEXT ASCB ADDRESS\n         ICM   R15,B'1111',0(R6)        GET THE ASCB ADDRESS\n         BM    NEXT                     SKIP IF NOT IN USE\n         USING ASCB,R15\n         ICM   R14,B'1111',ASCBJBNI     AN INITIATED JOB?\n         BNZ   *+8                      YES - OK\n         ICM   R14,B'1111',ASCBJBNS     NO - TRY S/M/L\n         BZ    *+10                     NO JOBNAME POINTER\n         MVC   JOBNAME,0(R14)\n         DROP  R15\n         LR    R7,R4  **TEMP KLUDGE**   OBTAIN USERS ASID\n         SLL   R7,ASVINDEX              OFFSET IN ASVT\n         ALR   R7,R8                    NOW HAVE ENTRY PTR\n         USING ACFASVT,R7\n         CLI   ASVLID,0                 ANYTHING HERE?\n         BE    SKIPACF2                 NO - DON'T MOVE LOGONID OR SRC\n         MVC   SOURCE,ASVSRC\n         MVC   LOGONID,ASVLID\nSKIPACF2 MVC   JOBID,ASVJID\n         MVC   ADRACUCB,=C'  ..  '\n         TM    ASVFLAG1,ASVF1UCB        ACUCB VALID?\n         BNO   NO$ACUCB                 NO\n         HEX   ADRACUCB,ASVUCB+1,LEN=3\n*O$ACUCB BAL   LINK,TPUTX\nNO$ACUCB BAL   LINK,PUTLINE\n***  ACUCB IS IN PRIVATE AREA - MAY ONLY BE ACCESSED FOR CURRENT USER.\n*        L     R3,ASVUCB                GET THE ACUCB ADDRESS\n*        USING ACUCB,R3\n*        TPUTX (R3),ACULEN              **TEMP KLUDGE**\nNEXT     BCT   R3,LOOP\n         B     LEAVE\n         SPACE 2\n*TPUTX   TPUTX BUFFER,80\n*        MVC   BUFFER,BLANKS\n*        BR    LINK\n         SPACE 2\n*NOPARM  TPUTX '*** PARM MISSING ***'\nNOPARM   TPUTLIT  '*** PARM MISSING ***'\n         SPACE 1\n         B     LEAVE\n         SPACE 2\n*ARMLONG TPUTX '*** PARM TOO LONG ***'\nPARMLONG TPUTLIT  '*** PARM TOO LONG ***'\n         SPACE 1\n         B     LEAVE\n         SPACE 2\n*OACFCVT TPUTX '*** ACF2 IS NOT UP ***'\nNOACFCVT TPUTLIT '*** ACF2 IS NOT UP ***'\n         SPACE 1\n         B     LEAVE\n         SPACE 3\nPUTLINE  PUTLINE  OUTPUT=BUFFOLD,PARM=PUTLINEC,MF=(E,IOPL)\n         SPACE 1\n         MVC   BUFFER,BLANKS\n         BR    LINK\n         SPACE 3\nPACK     PACK  DWD,0(*-*,R3)            << EXECUTED >>\n         EJECT\n         LTORG ,\n         SPACE 2\nPUTLINEC PUTLINE  MF=L\n         SPACE 2\nBLANKS   DC    CL80' '\nHEADER1  DC    CL80'ASID  JOB ID    JOBNAME   LOGONID   SOURCE    @ACUC$\n               B'\nHEADER2  DC    CL80'----  --------  --------  --------  --------  -----$\n               -'\nHEXTAB   HEXTAB  DUAL=NO\n         SPACE 3\nWORKD    DSECT                          RESUME\nDWD      DS    D\n         SPACE 2\nBUFFOLD  DS    2F                       OUTPUT LINE DESCRIPTOR\nBUFFLEN  DS    H                        PRINTLINE LENGTH\nBUFFOFF  DS    H                        OFFSET\nBUFFMID  DS    C                        delim after msgid\nBUFFER   DS    CL80\n         ORG   BUFFER\nASID     DS    CL4,CL2\nJOBID    DS    CL8,CL2\nJOBNAME  DS    CL8,CL2\nLOGONID  DS    CL8,CL2\nSOURCE   DS    CL8,CL2\nADRACUCB DS    CL6\n         ORG   ,\nWORKLEN  EQU   *-WORKD                  DEFINE LENGTH\n         EJECT\n         ACCVT ,                        ACF2 CVT\n         EJECT\n         ACFASVT  ,                     ACF2 ASVT ENTRY\n         EJECT\n         ACUCB ,                        ACF2 USER CONTROL BLOCK\n         EJECT\n         CVT   DSECT=YES\n         EJECT\n         IHAASVT  ,\n         EJECT\n         IHAASCB  ,\n         SPACE 3\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LISTVO": {"ttr": 8964, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x1c\\x00\\x00\\x00\\x80\\x00/\\x00\\x893?\\x16\\x08\\x04H\\x03\\xfe\\x03\\xc4\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.28", "flags": 0, "createdate": "1980-01-02T00:00:00", "modifydate": "1989-11-29T16:08:00", "lines": 1096, "newlines": 1022, "modlines": 964, "user": "LDW"}, "text": "LVO      TITLE 'LISTVO - COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1988 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.                                     *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1, with DFP 3.1),  *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc-oberon!LDW (last resort)                           *\n*                                                                     *\n*          (213) 743-5391 (direct -- 11 am to 7 pm Pacific time)      *\n*          (213) 743-2957 (msgs)                                      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, or 714.  Sorry.                                       *\n*                                                                     *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Attributes:  Reenterable, Authorized                               *\n*               (will work non-authorized, but not get free DSCB      *\n*               count from Indexed VTOCs).                            *\n*                                                                     *\n*  Updates:                                                           *\n*    12Sep89 U029 LDW  Check for parse failure to avoid S0C4 later    *\n*    05May89 U028 LDW  Fix off-by-one bug in U025 which caused        *\n*                        zero length line to be PUTLINE'd             *\n*    13Dec87 U027 LDW  Move NAMELIST to fix addressibility            *\n*    06Dec87 U026 SDM  Restore 'No volumes' message removed by U024.  *\n*                      Fix 'ALL' security hole in U025.               *\n*    25Nov87 U025 SDM  Add sort keywords (default BYVOLSER):          *\n*                        BYVOLSER,BYVOLUME,BYVOLID                    *\n*                        BYADDRESS,BYDEVADDRESS,BYDEVADR              *\n*                        BYFREE                                       *\n*                        BYCONTIGFREE                                 *\n*                      Implement special vol index flags:             *\n*                        $xxx - use xxx as vol index (suppress        *\n*                               unitname search).                     *\n*                        = - use TSO default unitname.                *\n*                        * or ALL - list all DASD (sysprog only).     *\n*                        -xxx or \u00acxxx - suppress xxx volumes.         *\n*    09Nov87 U024 SDM  Use @GLOBALC to create volumes index lists.    *\n*                      Change logic to scan UCB's exactly once.       *\n*                      First try each name against unit names table,  *\n*                         unless name starts with \"$\" flag character. *\n*    09Sep87 U023 LDW  Make all numeric fields blank filled           *\n*    18Aug87 U022 LDW  Rework 12Jun86 mod expanding various fields    *\n*                         to support 3380E                            *\n*                      Eliminate use of \"LC\" macro                    *\n*                      Change some messages to lower case             *\n*                      Make it assemble with XA MACLIB                *\n*    05JUN87 U021 SDM  Use TESTAUTH before getting available DSCB     *\n*                         count from Indexed VTOC.                    *\n*    01JUN87 U020 SDM  GET UNITNAMES FROM @GLOBALS                    *\n*            U019 SDM  DO UCB SCAN WITH MVS/SP SERVICE 'IOSVSUCB'     *\n*                      USE @GLOBALS TO DETERMINE OPERATING SYS LEVEL  *\n*    05DEC83 U018 LDW  ADD TOTALS LINE IF MORE THAN ONE VOLUME        *\n*                         LISTED (\"NOTOTALS\" KEYWORD WILL SUPPRESS)   *\n*                      FIX CHECK FOR 'ALL'                            *\n*    30NOV83 U017 LDW  USE GQSCAN TO CHECK FOR ENQ ON SYSVTOC         *\n*                      MISC OTHER CLEANUP                             *\n*    26JUL83 U016 LDW  IF VTOC INDEX EXISTS, CALL CVAF TO GET         *\n*                         NUMBER OF AVAILABLE DSCBS                   *\n*                      UPDATE UNITNAME TABLE                          *\n*    14MAR83 U015 LDW  DISPLAY 4 DIGITS OF # OF FREE EXTENTS          *\n*    29NOV82 U014 EMS  FIX BUG IN U013                                *\n*    19NOV82 U013 LDW  SHORTEN LINE LENGTH FOR STUPID OLD OLD TCAM    *\n*                      CHANGE HEADER LINES TO LOWER CASE              *\n*                      PUT IN 'REMOV' INSTEAD OF LEAVING IT BLANK     *\n*    15NOV82 U012 LDW  CHANGE UNIT DEFINITIONS FOR HUGHES AIRCRAFT    *\n*                      DON'T DEFAULT TO 'ALL' IF GUN NOT FOUND        *\n*                      USE \"PUTLINE\" INSTEAD OF \"TPUT\"/\"TPUTX\"        *\n*    30AUG82 U011 LDW  INDICATE INDEXED VTOC FOR PRIVILEGED USERS     *\n*    09AUG82 U010 LDW  DEFAULT TO \"STATUS\" IF TUBE                    *\n*                      ADD \"NOHEADER\" KEYWORD                         *\n*                      UPDATE VOLUMES TABLE                           *\n*    16FEB82 U009 LDW  RESTRICT 'ALL' TO SYSTEMS PROGRAMMERS          *\n*                      CREATE 'UNITS' MACRO, INCREASE MAX TO 5        *\n*                      SET FOR TITLE INSURANCE UNIT TYPES             *\n*                      HANDLE BLANK GUN IN UNITNAME TABLE             *\n*                      IMPROVE \"NO VOLUMES FOUND ...\" ERROR MSG       *\n*                      USE 'UNITS' FOR PHONY GENERICS                 *\n*                      ADD PHONY GENERIC \"PC\"                         *\n*    23JUN81 U008 SDM  SIMPLIFY UNIT TABLE LOGIC (SLIGHTLY)           *\n*    08JUN81 U007 SDM  CONVERT 'MACRO=YES' TO 'GETMAIN='              *\n*                      ADD THREE INDEX SUPPORT FOR 'SYS' REQUEST      *\n*                      MAKE GENERIC NAME LENGTH LOGIC MORE FLEXIBLE   *\n*    06JAN81 U006 LDW  SCAN QCB'S TO CHECK FOR ENQ ON SYSVTOC         *\n*    07MAY80 U005 LDW  ADD PHONY GENERIC 'SYS'                        *\n*                      CHANGE TO LOCAL MACROS                         *\n*    04DEC79 U004 LDW  INSERT MORE SPACES                             *\n*                      CHANGE UNIT TABLE                              *\n*                      ADD STATUS INFO                                *\n*                      DO BOTH USE COUNTS                             *\n*    16NOV79 U003 SDM  REPLACE 'SVC 3' WITH REAL EXIT CODE            *\n*    01OCT79 U002 LDW  REPAIR FMT4 OBTAIN CODE                        *\n*         77 U001 LDW  OVERHAUL TITLE LOGIC                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         COPY  @GLOBALS                 INSTALLATION DEFINITIONS   U019\n         EJECT ,\nLISTVO   OSENTER  ENV=(CP,SIM),PL=(PARSE,IO),PARMREG=R2,           U012+\n               EXIT=RET,RC=(R15),GETMAIN=(WORKLEN,WORKD)           U017\n         EJECT\n         MVC   LINERDW(4),=Y(4+LINEL,0)   INITIALIZE PUTLINE RDW   U012\n         LA    R0,PUTLNMFL              -> PUTLINE MF=L            U012\n         ST    R0,IOPLIOPB              SET IN IOPL                U012\n         SPACE 2\n*        IF NO OPERAND GIVEN DEFAULT TO SEARCH INDEX BASED ON USER'S\n*        GENERIC UNIT NAME\n         SPACE 2\n         MVI   FLAG,F@TOTALS+F@DFLT     Initialize all flags.      U025\n         XC    CLEAR(CLEARL),CLEAR      CLEAR SOME VARIABLES       U018\n         ZAP   TOTCYL,=P'0'             ...                        U018\n         ZAP   TOTTRK,=P'0'             ...                        U018\n         ZAP   TOTNUM,=P'0'             ...                        U018\n         LA    R0,SORTVOL               -> Volser sort compare     U025\n         ST    R0,SORTRTN               Initialize to volser sort  U025\n         SPACE 1\n         GTSIZE  ,                      GET SCREEN SIZES           U010\n         LTR   R0,R0                    TUBE?                      U010\n         BNP   *+8                      NO - SKIP                  U010\n         OI    FLAG,F@STAT              YES - DEFAULT TO STATUS    U010\n         SPACE 1\n         MVC   XHDR1,HEADER1            COPY HEADER LINE 1         U011\n         MVC   XHDR2,HEADER2            COPY HEADER LINE 2         U011\n         TESTAUTH  FCTN=1               Test running authorized    U024\n         LTR   R15,R15                  Well?                      U024\n         BNZ   *+8                      No, forget about it        U024\n         OI    FLAG,F@AUTH              Yes, remember it           U024\n         L     R1,CPPLPSCB              -> PSCB                    U011\n         USNGX PSCB,R1                                             U025\n         TM    &@@STAFF                 System operator?           U025\n         BO    OKIXVTOC                 YES - HE SEES IXVTOC IND.  U011\n         DROPX R1                       PSCB                       U025\n*                                       NO - CLEAR IT FROM ...     U011\n         MVC   XHDR1+OLIXVTOC-1-LINE(4),BLANKS  ... HEADER ...     U011\n         MVC   XHDR2+OLIXVTOC-1-LINE(4),BLANKS  ... LINES          U011\n         SPACE 1\nOKIXVTOC LA    R1,INDXLIST              -> Target index list       U025\n         ST    R1,INDXLADR              Save for later             U025\n         ST    R1,INDXLPTR              Save for later             U025\n         LA    R1,INDXLL-1(,R1)         -> last byte in list       U025\n         ST    R1,INDXLLIM              Save for limit test        U025\n         LA    R1,SPRSLIST              -> Suppress index list     U025\n         ST    R1,SPRSLADR              Save for later             U025\n         ST    R1,SPRSLPTR              Save for later             U025\n         LA    R1,SPRSLL-1(,R1)         -> last byte in list       U025\n         ST    R1,SPRSLLIM              Save for limit test        U025\n         L     R1,CPPLECT               -> ECT                     U024\n         TM    ECTSWS-ECT(R1),ECTNOPD   NO OPERAND?\n         BO    UNIT                     NO, LEAVE IT BLANK\n         SPACE 1\n         TSPARSE CBUF=(CPPLCBUF,I),PCL=(=V(PCL),I)\n         SPACE 1\n         LTR   R2,R15                   parse ok?                  U029\n         BZ    PARSE$OK                 yes - continue             U029\n         LA    R0,MSGPARSE              -> error message           U029\n         BAL   R14,PUTLINE              display it                 U029\n         LA    R2,20                    set return code            U029\n         B     RET                      and leave                  U029\n         SPACE 2\nRET0     SR    R2,R2                    set return code            U029\n         B     RET                      and leave                  U029\n         SPACE 2\nPARSE$OK L     R15,TSPARANS             POINT TO DESCRIPTOR LIST   U004\n         CLI   STAT+1-PDL(R15),1        STATUS SPECIFIED?          U004\n         BNE   *+8                      NO                         U004\n         OI    FLAG,F@STAT              YES - SET FLAG             U004\n         CLI   STAT+1-PDL(R15),2        NOSTATUS SPECIFIED?        U010\n         BNE   *+8                      NO                         U010\n         NI    FLAG,255-F@STAT          YES - UNSET FLAG           U010\n         CLI   HEAD+1-PDL(R15),2        NOHEADER SPECIFIED?        U010\n         BNE   *+8                      NO                         U010\n         OI    FLAG,F@NOHEAD            YES - SET FLAG             U010\n         CLI   TOTALS+1-PDL(R15),2      NOTOTALS SPECIFIED?        U018\n         BNE   *+8                      NO - SKIP                  U018\n         NI    FLAG,255-F@TOTALS        YES - UNSET FLAG           U018\n         CLI   SORTS+1-PDL(R15),BYVOL   Volser sort requested?     U025\n         BE    GOTSORT                  Yes, sort is set           U025\n         LA    R0,SORTADDR              Set devaddr sort           U025\n         CLI   SORTS+1-PDL(R15),BYADDR  Devaddr sort requested?    U025\n         BE    SETSORT                  Yes, set the sort          U025\n         LA    R0,SORTFREE              Set freespace sort         U025\n         CLI   SORTS+1-PDL(R15),BYFREE  Freespace sort requested?  U025\n         BE    SETSORT                  Yes, set the sort          U025\n         LA    R0,SORTCNTG              Set contigfree sort        U025\nSETSORT  ST    R0,SORTRTN               Set sort compare addr      U025\nGOTSORT  DC    0H'0'                                               U025\n         LA    R3,VOL-PDL(,R15)         -> vol index descriptor    U024\n         L     R14,0(,R3)               -> vol index data          U024\nLST$NAME MVC   LISTNAME,BLANKS          Clear name of list         U024\n         LH    R1,4(,R3)                Get length of name         U024\n         BCTR  R1,0                     Decrement for execute      U024\n         EX    R1,NAMVC                 Move name to fixed field   U024\n         LA    R1,LISTNAME              -> List name               U024\n         CLI   0(R1),C'-'               Suppressed vol index?      U025\n         BE    NOT$LIST                 Yes, use as volume index   U025\n         CLI   0(R1),C'\u00ac'               Suppressed vol index?      U025\n         BE    NOT$LIST                 Yes, use as volume index   U025\n         NI    FLAG,255-F@DFLT          Turn off default flag      U025\n         CLC   =C'* ',LISTNAME          Request for 'ALL' volumes? U026\n         BE    LST$ALL                  Yes, use 'ALL' index       U026\n         CLC   =C'ALL ',LISTNAME        Request for 'ALL' volumes? U026\n         BNE   NOT$ALL                  No, skip 'ALL' logic       U026\n         L     R15,CPPLPSCB             -> PSCB                    U026\n         USNGX PSCB,R15                                            U026\n         TM    &@@SYSP                  Systems programmer?        U026\n         BZ    NOT$ALL                  No, skip 'ALL' logic       U026\n         DROPX R15                      PSCB                       U026\nLST$ALL  LA    R1,BLANKS                Set 'ALL' index            U026\n         B     NOT$LIST                 Go set the vol index       U026\nNOT$ALL  CLI   0(R1),C'$'               Forced vol index?          U026\n         BNE   TRY$LIST                 No, try it as a unit name  U024\n         LA    R1,1(,R1)                -> desired vol index       U024\n         B     NOT$LIST                 Process vol index          U024\nTRY$LIST BAL   R14,SET$UNIT             Set the unit name          U024\n         BZ    NXT$NAME                 Found it, get next name    U024\nNOT$LIST BAL   R14,SET$INDX             Set the vol index          U024\nNXT$NAME CLC   =X'FF000000',8(R3)       End of vol index list?     U024\n         BE    CONTINUE                 Yes, end of processing     U024\n         L     R3,8(,R3)                -> next vol index PDE      U024\n         L     R14,0(,R3)               -> vol index data          U024\n         B     LST$NAME                 Go process next name       U024\n         SPACE 1\nNAMVC    MVC   LISTNAME(0),0(R14)       << Executed >>             U024\n         TITLE 'S P A C E -- PRODUCE VOLUME LIST'\n*---------------------------------------------------------------------*\n*\n* NAME         UNIT\n*\n* FUNCTION     SELECT A DEFAULT SEARCH INDEX BASED ON USER'S GENERIC\n*              UNIT NAME IN PSCB.\n*\n*---------------------------------------------------------------------*\n         SPACE 2\nUNIT     LA    R1,=C'='                 Request default unit       U025\n         BAL   R14,SET$UNIT             Set the unit name          U024\n         BZ    CONTUNIT                 Found it, go finish up     U025\n         SPACE 1\n         MVC   LINE(LINEL),BLANKS       Clear the print line       U024\n         MVC  LINE(44),=C'No table entry found for generic unit name -'\n         MVC   LINE+45(8),0(R1)                                    U024\n         LA    R0,LINERDW               -> message line            U024\n         BAL   R14,PUTLINE              Tell him about our problem U024\n         LA    R2,12                    Set return code            U029\n         B     RET                      End the program            U024\n         SPACE 2\nSET$UNIT ST    R14,LINKUNIT             Save return address        U024\n         LA    R2,NAMELIST              -> unit name table         U024\n         CLI   0(R1),C'='               Special request?           U025\n         BNE   UNITSCAN                 No, look up name as-is     U025\n         L     R1,CPPLPSCB              Yes, look up default       U025\n         LA    R1,PSCBGPNM-PSCB(,R1)    Generic unit for TSO ID    U025\n         SPACE 1\nUNITSCAN CLI   0(R2),C' '               End of table ?             U024\n         BE    UNITNONE                 YES, UNIT NAME NOT FOUND   U012\n         CLC   0(8,R2),0(R1)            SEARCH TABLE FOR UNITNAME  U020\n         BE    UNITYES                  FOUND\n         LA    R2,UNITNLEN(,R2)         -> NEXT TABLE ENTRY        U008\n         B     UNITSCAN\n         SPACE 1\nUNITYES  LA    R2,8(,R2)                -> first vol index         U024\n         SPACE 1\nUNIT$NXT CLI   0(R2),C' '               End of list?               U024\n         BE    UNITDONE                 Yes, end of vol index list U024\n         LR    R1,R2                    -> desired vol index       U024\n         BAL   R14,SET$INDX             List the vol index         U024\n         LA    R2,6(,R2)                -> next vol index          U024\n         B     UNIT$NXT                 Go list it                 U024\n         SPACE 1\nUNITNONE LA    R15,8                    Indicate name not in table U024\n         B     UNITEXIT                 Go return to caller        U024\n         SPACE 1\nUNITDONE SLR   R15,R15                  Indicate that it worked    U024\n         SPACE 1\nUNITEXIT L     R14,LINKUNIT             Restore return address     U024\n         LTR   R15,R15                  Set CC according to retcd  U024\n         BR    R14                      Return to caller           U024\n         SPACE 2\nSET$INDX ST    R14,LINKINDX             Save return address        U025\n         LA    R14,SPRSLADR             -> suppress list           U025\n         CLI   0(R1),C'-'               Suppress index?            U025\n         BE    LEN01                    Yes, process suppress      U025\n         CLI   0(R1),C'\u00ac'               Suppress index?            U025\n         BNE   LEN02                    No, process normal index   U025\nLEN01    LA    R1,1(,R1)                Skip flag character        U025\n         B     LEN03                    Process name               U025\nLEN02    LA    R14,INDXLADR             -> target list             U025\n         LH    R15,=H'-1'               Set for possible \"ALL\"     U025\n         CLI   0(R1),C' '               Request for 'ALL' volumes? U026\n         BE    LEN06                    Yes                        U025\nLEN03    LA    R15,5(,R1)               -> end of index            U025\nLEN04    CLI   0(R15),C' '              Trailing blank?            U025\n         BNE   LEN05                    No, found real end         U025\n         BCT   R15,LEN04                Decrement and loop         U025\n         SPACE 1\nLEN05    SR    R15,R1                   Length -1 for EX           U025\nLEN06    L     R4,4(,R14)               -> current available entry U025\n         LA    R0,LISTEL(,R4)           -> next available entry    U026\n         C     R0,8(,R14)               Entry fit in list?         U025\n         BH    ERRCAP                   No, capacity error         U024\n         MVI   0(R4),X'00'              Init flags byte            U026\n         STC   R15,1(,R4)               Save length in list        U026\n         MVC   2(6,R4),BLANKS           Clear index field          U026\n         LTR   R15,R15                  Really any index?          U025\n         BM    LEN07                    No, skip move              U025\n         EX    R15,SIMVC                Move data to list          U024\nLEN07    ST    R0,4(,R14)               -> Next available entry    U025\n         L     R14,LINKINDX             Restore return address     U025\n         BR    R14                      Return to caller           U024\n         SPACE 1\nSIMVC    MVC   2(0,R4),0(R1)            << Executed >>             U026\n         SPACE 2\nERRCAP   MVC   LINE(LINEL),BLANKS       Clear the print line       U024\n         MVC   LINE(36),=C'Volume index table capacity exceeded'   U024\n         LA    R0,LINERDW               -> message line            U024\n         BAL   R14,PUTLINE              Tell him about our problem U024\n         SPACE 2\nCONTINUE DS    0H\n         IKJRLSA TSPARANS               Release parse storage      U025\n         TM    FLAG,F@DFLT              Still need default unit?   U025\n         BO    UNIT                     Yes, go get the default    U025\nCONTUNIT DC    0H'0'                                               U025\n         LA    R0,WORKD                 -> program work area       U025\n         AH    R0,=Y(OUTLINES-WORKD)    -> output lines area       U025\n         ST    R0,AOUTLINA              -> output lines area       U025\n         ST    R0,AOUTLINN              -> next output line        U025\n         A     R0,=A(OUTLINEL-1)        -> end of area             U025\n         ST    R0,AOUTLINL              -> end of area             U025\n         LA    R1,HEADERL1              Get length of short title  U025\n         TM    FLAG,F@STAT              Status wanted?             U025\n         BNO   *+8                      No                         U025\n         LA    R1,HEADERL2              Yes, use longer line       U025\n         LA    R1,4(,R1)                Length of RDW + data       U025\n         SLL   R1,16                    Format for RDW             U025\n         STCM  R1,B'1111',LINERDW       Set line RDW               U025\n         STCM  R1,B'1111',XHDR1RDW      Set header1 RDW            U025\n         STCM  R1,B'1111',XHDR2RDW      Set header2 RDW            U025\n         SPACE 3\n*        SCAN UCB TABLE\n         SPACE 1\nFINDUCB  XR    R4,R4                    Clear UCB pointer          U024\n          AIF   (&@@SPLVL GE 130).UCB010                           U019\n         L     R1,CVTPTR                GET CVT ADDRESS            U019\n         L     R3,CVTILK2-CVT(,R1)      -> UCB lookup table        U024\n         B     LOOP                     ENTER THE SCAN LOOP        U019\n         SPACE 1\nNXTUCB   LA    R3,2(,R3)                -> next UCB address        U024\n         SPACE 1\nLOOP     CLC   =X'FFFF',0(R3)           Is it end of table?        U024\n         BE    RETURN                   ...YES, RETURN\n         SR    R2,R2                    Clear for ICM              U024\n         ICM   R2,B'0011',0(R3)         UCB offset                 U024\n         LTR   R2,R2                                               U024\n         BZ    NXTUCB                   IF NON-ZERO GO ON          U019\n         USNGX UCB,R2                                              U024\n         CLI   UCBTBYT3,UCB3DACC        DIRECT ACCESS?             U019\n         BNE   NXTUCB                   NO                         U019\n         DROPX R2                       UCB                        U024\n          AGO   .UCB020                                            U019\n.UCB010   ANOP                                                     U019\n         LA    R1,IOSWORK               -> IOSVSUCB WORK AREA      U019\n         ST    R1,IOSPARM               -> IOSVSUCB WORK AREA      U019\n         LA    R1,IOSDVCLS              -> IOSVSUCB DEVICE CLASS   U019\n         ST    R1,IOSPARM+4             -> IOSVSUCB DEVICE CLASS   U019\n         LA    R1,IOSAUCB               -> IOSVSUCB RETURN -> UCB  U019\n         ST    R1,IOSPARM+8             -> IOSVSUCB RETURN -> UCB  U019\n         OI    IOSPARM+8,X'80'          FLAG END OF PARMS          U019\n         XC    IOSWORK,IOSWORK          CLEAR IOSVSUCB WORK AREA   U019\n         MVI   IOSDVCLS,UCB3DACC        LIMIT SCAN TO DASD         U019\nNXTUCB   LA    R1,IOSPARM               -> IOSVSUCB PARAMETERS     U019\n         L     R15,CVTPTR               -> CVT                     U019\n         L     R15,CVTUCBSC-CVT(,R15)   -> IOSVSUCB ROUTINE        U019\n         BALR  R14,R15                  LOCATE NEXT UCB            U019\n         LTR   R15,R15                  ANY UCB FOUND?             U019\n         BNZ   RETURN                   NO, END OF SCAN            U019\n         L     R2,IOSAUCB               -> UCB                     U024\n.UCB020   ANOP                                                     U019\n         CR    R2,R4                    Already done this one?     U024\n         BNH   NXTUCB                   IF SO SKIP IT NOW\n         LR    R4,R2                    -> new UCB                 U024\n         USNGX UCB,R4                                              U024\n         TM    UCBSTAT,UCBONLI          ONLINE?\n         BNO   NXTUCB                   NO, IGNORE DEVICE\n         CLC   UCBTBYT3(2),=X'2005'     DATA CELL?\n         BE    NXTUCB                   IF SO SKIP IT\n         TM    UCBVOLI,X'FF'            ANY NAME?\n         BZ    NXTUCB                   NO, IGNORE IT\n         LA    R1,SPRSLADR              -> suppress list           U025\n         LA    R15,UCBVOLI              -> current volume serial   U026\n         BAL   R14,LISTFIND             Find entry in list         U025\n         BZ    NXTUCB                   Found, skip this UCB       U025\n         LA    R1,INDXLADR              -> target list             U025\n         LA    R15,UCBVOLI              -> current volume serial   U026\n         BAL   R14,LISTFIND             Find entry in list         U025\n         BNZ   NXTUCB                   Not found, skip this UCB   U025\n         SPACE 1\n*        FORMAT UCB INFORMATION FIRST\n         SPACE 1\nUSEUCB   MVC   LINE(LINEL),BLANKS       CLEAR THE LINE             U001\n         MVC   OLVOLSER,UCBVOLI         PRINT VOLUME NAME\n         MVC   OLDEVADR,UCBNAME         GET UNIT ADDRESS\n         SPACE 1\n         MVI   OLSTAT1+4,C'/'           PUT IN DELIMITER           U004\n         MVC   OLSTAT2,=C'Remov'        ASSUME REMOVABLE           U022\n         TM    UCBSTAT,UCBRESV          RESERVED?                  U004\n         BNO   *+10                     NO - SKIP                  U004\n         MVC   OLSTAT2,=C'Rsrvd'        YES                        U022\n         TM    UCBSTAT,UCBPRES          RESIDENT?                  U004\n         BNO   *+10                     NO - SKIP                  U004\n         MVC   OLSTAT2,=C'Rsdnt'        YES                        U022\n         SPACE 1\n         TM    UCBSTAB,UCBBPRV          PRIVATE?                   U004\n         BNO   *+10                     NO - SKIP                  U004\n         MVC   OLSTAT1,=C'Priv'         YES                        U022\n         TM    UCBSTAB,UCBBPUB          PUBLIC?                    U004\n         BNO   *+10                     NO - SKIP                  U004\n         MVC   OLSTAT1,=C'Publ'         YES                        U022\n         TM    UCBSTAB,UCBBSTR          STORAGE?                   U004\n         BNO   *+10                     NO - SKIP                  U004\n         MVC   OLSTAT1,=C'Stor'         YES                        U022\n         SPACE 1\n          AIF   (&@@SPLVL GE 200).UCB030                           U019\n         XR    R1,R1                    CLEAR A REG                U004\n         IC    R1,UCBUSER               GET USE COUNT              U004\n          AGO  .UCB040                                             U019\n.UCB030  LH    R1,UCBUSER               GET USE COUNT              U019\n.UCB040   ANOP                                                     U019\n         CVD   R1,DBLW                  CONVERT TO PRINT           U004\n         MVC   OLUALLOC-1(6),=X'402020202020'                      U023\n         ED    OLUALLOC-1(6),DBLW+5                                U023\n         SPACE 1\n         IC    R1,UCBDMCT               GET OPEN DCB COUNT         U002\n         N     R1,=XL4'7F'              REPAIR IT                  U002\n         CVD   R1,DBLW                  CONVERT TO PRINT\n         MVC   OLUOPEN-1(4),=X'40202020'                           U023\n         ED    OLUOPEN-1(4),DBLW+6                                 U023\n         SPACE 1\n         TM    UCBFLA,UCBNRY            NOT READY?                 U004\n         BNO   CHECKENQ                 NO - CONTINUE              U017\n         MVC   OLMSG(9),=C'Not Ready'   SAY WHAT THE PROBLEM IS    U022\n         B     PUTIT                    AND DON'T HANG UP HERE     U004\n         SPACE 2\nLISTFIND LA    R0,4                     Assume a miss              U026\n         L     R5,0(,R1)                -> First entry in list     U026\n         SLR   R6,R6                    Clear for IC               U026\nLISTF1   C     R5,4(,R1)                Reached end of list?       U026\n         BNL   LISTF9                   Yes, end of loop           U026\n         ICM   R6,B'0001',1(R5)         EX length for CLC          U026\n         BM    LISTF2                   Hit an 'ALL' request.      U026\n         EX    R6,EXCLC                 Does volume name match?    U026\n         BNE   LISTF3                   No, Pick up next entry     U026\nLISTF2   SLR   R0,R0                    Indicate a hit             U026\n         OI    0(R5),LF@FND             Indicate volume found      U026\nLISTF3   LA    R5,LISTEL(,R5)           -> next vol index          U026\n         B     LISTF1                   Check next index           U025\nLISTF9   LTR   R15,R0                   Set CC for caller          U026\n         BR    R14                      Return to caller           U025\n         SPACE 1\nEXCLC    CLC   2(0,R5),0(R15)           << Executed >>             U026\n         SPACE 3\n*        SCAN THE ENQ STRUCTURE TO SEE IF ANYONE IS ENQUEUED ON    U006\n*        'SYSVTOC' 'VOLSER'.  IF SO, DON'T DO THE LSPACE SVC,      U006\n*        SINCE IT WILL HANG UP AND CAN'T BE ATTENTIONED OUT OF.    U006\nCHECKENQ EQU   *                                                   U022\n          AIF   (&@@SPLVL GE 200).GRS01                            U022\n         L     R1,16                    -> CVT                     U017\n         CLC   =F'0',640(R1)            ANY QCB'S?                 U017\n         BNZ   QCBSCAN                  YES - PRE SP1.2            U017\n          AIF   (&@@SPLVL GE 120).GRS01                            U019\n         B     LSPACE                   SP1.2, BUT NOT SUPPORTED   U017\n          AGO   .GRS02                                             U017\n.GRS01    ANOP                                                     U017\n         MVC   GQLIST(GQSCANXL),GQSCANX INIT PARM BLOCK            U017\n         XC    TOKEN(4),TOKEN           ZERO TOKEN                 U017\n         L     R2,=A(AREAL)             GET LENGTH OF 'AREA'       U017\n         SPACE 1                                                   U017\n         GQSCAN  AREA=(AREA,(R2)),TOKEN=TOKEN,MF=(E,GQLIST),       U017$\n               RESNAME=(=CL8'SYSVTOC',UCBVOLI,6)                   U017\n         SPACE 1                                                   U017\n         CH    R15,=H'16'               RC IN RANGE?               U017\n         BNH   *+8(R15)                 YES - DECODE IT            U017\n         EX    0,*                      NO - DIE                   U017\n         B     SCAN1                    00 - SCAN COMPLETE         U017\n         B     LSPACE                   04 - NOTHING FOUND         U017\n         B     SCAN1                    08 - SCAN INCOMPLETE       U017\n         EX    0,*                      12 - FOUND ABNORMAL COND.  U017\n         EX    0,*                      16 - INVALID SYSNAME       U017\n         SPACE 1                                                   U017\nSCAN1    ST    R0,RIBLS                 SAVE LENGTH OF RIB & RIBE  U017\n         SR    R15,R15                  CLEAR RETURN REGISTER      U017\n         LA    R1,AREA                  POINT TO RIB               U017\n         USNGX RIB,R1                                              U017\n         AH    R1,RIBVLEN               + LEN OF VARIABLE PORTION  U017\n         AH    R1,RIBL                  + RIBLENGTH RETURN BY SCAN U017\n*                                       R1 -> FIRST RIBE           U017\n         DROPX R1                       RIB                        U017\n         USNGX RIBE,R1                                             U017\n         MVC   OLMSG(39),=C'Try later - VTOC in use by job ????????' 22\n         MVC   OLMSG+31(8),RIBEJBNM     PUT JOBNAME INTO MESSAGE   U017\n         B     PUTIT                    AND PUT OUT MESSAGE        U017\n         DROPX R1                       RIBE                       U017\n          AIF   (&@@SPLVL GE 200).GRS03                            U022\n.GRS02    ANOP                                                     U019\n         SPACE 3\n*---  SEARCH OLD STYLE QCB'S IN SQA                                ---*\nQCBSCAN  L     R1,16                    -> CVT                     U006\n         LA    R2,640(,R1)              -> QCB ORIGIN              U006\n         USNGX MAJ,R2                   MAJOR QCB                  U006\n         SPACE 1\nMAJLOOP  L     R2,MAJNMAJ               -> NEXT MAJOR QCB          U006\n         LTR   R2,R2                    END OF CHAIN?              U006\n         BZ    LSPACE                   YES - NO MAJOR QCB FOR     U006\n*                                       'SYSVTOC', SO IT'S SAFE.   U006\n         CLC   =C'SYSVTOC ',MAJNAME     IS THIS WHAT WE WANT?      U006\n         BNE   MAJLOOP                  NO - CHECK NEXT MAJOR QCB. U006\n         L     R2,MAJFMIN               -> FIRST MINOR QCB         U006\n         DROPX R2                       MAJOR QCB                  U006\n         USNGX MIN,R2                                              U006\n         B     MINLOOP1                 SKIP AROUND FIRST TIME     U006\n         SPACE 1                                                   U006\nMINLOOP  L     R2,MINNMIN               -> NEXT MINOR QCB.         U006\nMINLOOP1 LTR   R2,R2                    ANY?                       U006\n         BZ    LSPACE                   NO - IT'S SAFE.            U006\n         CLC   OLVOLSER,MINNAME         IS IT FOR OUR VOLUME?      U006\n         BNE   MINLOOP                  NO - CHECK NEXT            U006\n*  DRAT.  SOMEONE IS ENQUEUED ON THE VTOC OF THE VOLUME I WANT TO  U006\n*  LOOK AT.  SO, SAY WE'RE SORRY, AND SKIP THE LSPACE SVC.         U006\n         L     R2,MINFQEL               -> FIRST QEL               U006\n         DROPX R2                       MINOR QCB                  U006\n         USNGX QEL,R2                                              U006\n         MVC   OLMSG(39),=C'Try later - VTOC in use by job ????????' 22\n         LH    R15,QELASID              GET OWNER'S ASID           U006\n         DROPX R2                       QEL                        U017\n         LTR   R15,R15                  ANY?                       U006\n         BZ    PUTIT                    NO - LEAVE MSG AS IS       U006\n         L     R1,16                    -> CVT                     U006\n         L     R1,CVTASVT-CVT(,R1)      -> ASVT                    U017\n         SLL   R15,2                    MULTIPLY ASID BY 4         U006\n         LA    R1,ASVTENTY-4-ASVT(R1,R15)  -> THIS AS'S ASVT ENT   U017\n         L     R1,0(,R1)                -> ASCB                    U006\n         USNGX ASCB,R1                                             U017\n         ICM   R15,B'1111',ASCBJBNI     -> JOBNAME                 U006\n         BNZ   GOTJOBNM                 IT'S A JOB                 U006\n         ICM   R15,B'1111',ASCBJBNS     -> S/M/L JOBNAME           U006\n         BZ    PUTIT                    NO POINTER HERE EITHER?    U006\n         DROPX R1                       ASCB                       U017\n         SPACE 1\nGOTJOBNM MVC   OLMSG+31(8),0(R15)       MOVE JOBNAME TO MSG        U006\n         B     PUTIT                    AND WE'RE DONE.            U006\n.GRS03    ANOP                                                     U019\n         SPACE 2                                                   U006\n*        GET MORE INFORMATION FROM LSPACE\n         SPACE 1\nLSPACE   LR    R0,R4                    Point to UCB               U024\n         LA    R1,DBLW                  WORKSPACE\n         SVC   78                       GET SPACE INFO\n         LTR   R15,R15                  DID IT WORK?\n         BZ    SPCOK                    YES\n* THE 'DOS' BIT (AT LEAST) WILL GET US HERE.\n* APPARENTLY, HOWEVER, THE DIRF BIT WON'T.\nVTOCERR  MVC   OLMSG(25),=CL25'Error in VTOC'                      U022\n         SPACE 2\nPUTIT    L     R1,AOUTLINN              -> next output line        U025\n         C     R1,AOUTLINL              Still within the table?    U025\n         BH    ERRSORT                  No, go out with error      U025\n         LA    R0,L'OUTLINES(,R1)       -> new next output line    U025\n         ST    R0,AOUTLINN              Save for later             U025\n         L     R15,SORTRTN              -> sort compare routine    U025\nSORT1    SH    R1,=Y(L'OUTLINES)        -> previous output line    U025\n         C     R1,AOUTLINA              Still in the table?        U025\n         BL    SORT2                    No, insert line at start   U025\n         MVC   L'OUTLINES(L'OUTLINES,R1),0(R1)  Move line back JIC U025\n         BR    R15                      Select compare routine     U025\nSORTFREE CLC   OLFCYL-LINERDW(OLFTRK+L'OLFTRK-OLFCYL,R1),OLFCYL    U025\n         BL    SORT1                    No, loop                   U025\n         B     SORT2                    Yes, go insert line        U025\nSORTCNTG CLC   OLCCYL-LINERDW(OLCTRK+L'OLCTRK-OLCCYL,R1),OLCCYL    U025\n         BL    SORT1                    No, loop                   U025\n         B     SORT2                    Yes, go insert line        U025\nSORTVOL  CLC   OLVOLSER-LINERDW(,R1),OLVOLSER  Found place?        U025\n         BH    SORT1                    No, loop                   U025\nSORTADDR DC    0H'0'                    Already in devaddr order   U025\nSORT2    MVC   L'OUTLINES(L'OUTLINES,R1),LINERDW  Yes, insert line U025\n         LH    R15,NUMVOLS              GET # OF VOLUMES FOUND     U018\n         LA    R15,1(,R15)              INCREMENT                  U018\n         STH   R15,NUMVOLS              SAVE UPDATED COUNT         U018\n         B     NXTUCB                   NOW GO ON\n         SPACE 2                                                   U004\nSPCOK    MVC   OLFCYL,DBLW+6            CYL (TOTAL)                U022\n         LA    R15,OLFCYL               -> field                   U023\n         BAL   R14,UNZERO               blank out leading zeroes   U023\n         MVC   OLFTRK,DBLW+11           TRK (TOTAL)\n         LA    R15,OLFTRK               -> field                   U023\n         BAL   R14,UNZERO               blank out leading zeroes   U023\n         MVC   OLFNUM,DBLW+16           NUM (OF AREAS)             U015\n         LA    R15,OLFNUM               -> field                   U023\n         BAL   R14,UNZERO               blank out leading zeroes   U023\n         MVC   OLCCYL,DBLW+21           CYL (LARGEST)              U022\n         LA    R15,OLCCYL               -> field                   U023\n         BAL   R14,UNZERO               blank out leading zeroes   U023\n         LA    R15,DBLW+26              -> field                   U023\n         BAL   R14,UNZERO               blank out leading zeroes   U023\n         MVC   OLCTRK,DBLW+27           TRK (LARGEST)\n         SPACE 1\n*---  UPDATE TOTALS/MAX COUNTERS                                   ---*\n         PACK  PWORK,DBLW+6(4)          GET NUMBER OF FREE CYL     U022\n         AP    TOTCYL,PWORK             ACCUMULATE IT              U018\n         PACK  PWORK,DBLW+11(4)         GET NUMBER OF FREE TRK     U018\n         AP    TOTTRK,PWORK             ACCUMULATE IT              U018\n         PACK  PWORK,DBLW+16(4)         GET NUMBER OF FREE EXTENTS U018\n         AP    TOTNUM,PWORK             ACCUMULATE IT              U018\n         CLC   OLCCYL,MAXCYL            THIS LARGEST CONTIG EXT?   U018\n         BL    GET$FMT0                 NO - SKIP                  U018\n         BE    CYLSAME                  MAYBE                      U018\n         MVC   MAXCYL,OLCCYL            YES - SAVE NEW LARGEST CYL U018\n         MVC   MAXTRK,OLCTRK            ..AND SAVE NEW LARGEST TRK U018\n         B     GET$FMT0                 DONE HERE                  U018\n         SPACE 1\nCYLSAME  CLC   OLCTRK,MAXTRK            THIS LARGEST CONTIG TRK?   U018\n         BNH   *+10                     NO - SKIP                  U018\n         MVC   MAXTRK,OLCTRK            YES - SAVE NEW LARGEST TRK U018\n         SPACE 1\n*        NOW FIND THE NUMBER OF DSCBS LEFT (FMT0 COUNT)\n         SPACE 1\nGET$FMT0 MVC   CAML(4),=AL1(193,0,0,0)  MOVE IN DSNAME OPTIONS     U002\n         MVC   CAMV(6),UCBVOLI          VOLUME NAME\n         LA    R0,=44X'04'              FORMAT 4 DSCB'S DSNAME     U002\n         LA    R1,CAMV                  VOLUME LIST\n         LA    R2,CAMW                  WORKAREA\n         STM   R0,R2,CAML+4             SET UP CAMLIST\n         MVC   OLFDSCB+L'OLFDSCB-3(3),=C'n/a'   Assume not avail.  U021\n         MVC   OLIXVTOC,=C'??'          SET DEFAULT                U021\n         L     R1,CPPLPSCB              -> PSCB                    U017\n         USNGX PSCB,R1                                             U025\n         TM    &@@STAFF                 System operator?           U025\n         BO    *+10                     YES - SKIP                 U017\n         MVC   OLIXVTOC,BLANKS          NO - REMOVE '??'           U017\n         DROPX R1                       PSCB                       U025\n         OBTAIN CAML                    GET FORMAT 4 DSCB\n         LTR   R15,R15                  DID IT WORK?\n         BNZ   PUTIT                    THEN GIVE UP               U002\n******** TM    DS4VTOCI,DS4IVTOC        INDEXED VTOC?              U016\n         TM    CAMW+14,1                INDEXED VTOC?              U016\n         BO    IXVTOC                   YES - GO CALL CVAF         U016\n         MVC   OLIXVTOC,BLANKS          CLEAR INDEXED INDICATOR    U017\n         LH    R1,CAMW+6   DS4DSREC     GET NUMBER OF FMT0S        U002\n         SPACE 2                                                   U016\nFMT$FMT0 CVD   R1,DBLW                  CONVERT IT\n         MVC   OLFDSCB-1(6),=X'402020202020'                       U023\n         ED    OLFDSCB-1(6),DBLW+5                                 U023\n         A     R1,TOTDSCB               TALLY TOTAL NUMBER OF ...  U018\n         ST    R1,TOTDSCB               ... FREE DSCB'S            U018\n         B     PUTIT                    NOW GO ON                  U016\n         SPACE 2                                                   U016\nIXVTOC   L     R1,CPPLPSCB              -> PSCB                    U011\n         USNGX PSCB,R1                                             U025\n         TM    &@@STAFF                 System operator?           U025\n         BNO   *+10                     NO - SKIP                  U016\n         MVC   OLIXVTOC,=C'IX'          YES - SHOW IT'S INDEXED    U011\n         DROPX R1                       PSCB                       U025\n         MVC   CVPL(CVPLLEN),CVPLX      COPY MODEL CVPL            U016\n         SPACE 1\n*---  NEED TO OPEN THE VTOC AND PASS THE DEB ADDR IF NOT APF AUTH  ---*\n*        CVAFDSM  ACCESS=MAPDATA,MAP=VTOC,COUNT=YES,DEB=(R??),     U016$\n               CTAREA=DBLW,MF=(E,CVPL)                             U016\n*---  SO, FOR NOW, WE'LL BE APF AUTHORIZED AND USE THE UCB ADDR    ---*\n         TM    FLAG,F@AUTH              Running authorixed?        U024\n         BZ    PUTIT                    No, forget about it        U024\n         CVAFDSM  ACCESS=MAPDATA,MAP=VTOC,COUNT=YES,UCB=(R4),      U024$\n               CTAREA=DBLW,MF=(E,CVPL),BRANCH=(YES,PGM)            U016\n         SPACE 1\n         LTR   R15,R15                  DID CVAFDSM WORK?          U021\n         BNZ   PUTIT                    I FIGURED AS MUCH          U016\n         L     R1,DBLW                  GET THE FORMAT ZERO COUNT  U016\n         B     FMT$FMT0                 AND GO FORMAT IT           U016\n         DROPX R4                       UCB                        U024\n         SPACE 2\n*        Print the list now\n         SPACE 2\nRETURN   LA    R2,INDXLIST              -> volume index list       U026\nRETLST   C     R2,INDXLPTR              Still in the list?         U026\n         BNL   RETURN1                  No, end of scan            U026\n         TM    0(R2),LF@FND             Any found here?            U026\n         BO    RETLST1                  Yes, try next one          U026\n         LA    R1,SPRSLADR              -> suppress list           U026\n         LA    R15,2(,R2)               -> index                   U026\n         BAL   R14,LISTFIND             Was it suppressed?         U026\n         BZ    RETLST1                  Yes, no error              U026\n         MVC   LINE(LINEL),BLANKS       Clear the line             U026\n         MVC   LINE(28),=C'No volumes found for index -'           U026\n         MVC   LINE+29(6),2(R2)         Show what we didn't find   U026\n         LA    R0,LINERDW               -> data line               U026\n         BAL   R14,PUTLINE              Put it out                 U026\nRETLST1  LA    R2,LISTEL(,R2)           -> next list entry         U026\n         B     RETLST                   Go check next entry        U026\n         SPACE 2\nERRSORT  MVC   LINE(LINEL),BLANKS       Clear the print line       U025\n         MVC   LINE(35),=C'Output sort table capacity exceeded'    U025\n         LA    R0,LINERDW               -> message line            U025\n         BAL   R14,PUTLINE              Tell him about our problem U025\n         SPACE 1\nRETURN1  CLC   NUMVOLS,=H'1'            Any volumes found?         U026\n         BL    RET0                     No, skip                   U029\n         TM    FLAG,F@NOHEAD            Need headers?              U026\n         BNZ   RETPRT                   No, skip                   U025\n         LA    R0,XHDR1RDW              -> Title line              U025\n         BAL   R14,PUTLINE              Write first title line     U025\n         LA    R0,XHDR2RDW              -> Title line              U025\n         BAL   R14,PUTLINE              Write second title line    U025\n         SPACE 1\nRETPRT   L     R2,AOUTLINA              -> first data line         U025\n         SPACE 1\nRETPRT1  C     R2,AOUTLINN              Any data left?             U025\n         BNL   RETPRT2                  No, finished with data     U028\n         LR    R0,R2                    -> data line               U025\n         BAL   R14,PUTLINE              Write detail line          U025\n         LA    R2,L'OUTLINES(,R2)       -> Next output line        U025\n         B     RETPRT1                  Loop                       U025\n         SPACE 2\nRETPRT2  TM    FLAG,F@TOTALS            Want totals?               U025\n         BNO   RET0                     NO - END THE PROGRAM       U029\n         CLC   NUMVOLS,=H'2'            MORE THAN ONE VOL FOUND?   U018\n         BL    RET0                     NO - SKIP TOTALS LINE      U029\n         SPACE 2\n*---  FORMAT THE TOTALS LINE                                       U018\n         MVC   LINE(LINEL),BLANKS       CLEAR THE DISPLAY LINE     U018\n         MVC   LINE+3(14),=C'*** Totals ***'                       U022\n         MVC   OLIXVTOC+2(11),=C'*** Max ***'                      U022\n         MVC   DBLW(6),=X'402020202020'                            U023\n         ED    DBLW(6),TOTCYL+1                                    U023\n         MVC   OLFCYL-1(5),DBLW+1                                  U023\n         MVC   DBLW(6),=X'402020202020'                            U023\n         ED    DBLW(6),TOTTRK+1                                    U023\n         MVC   OLFTRK-1(5),DBLW+1                                  U023\n         MVC   OLFNUM-2(6),=X'402020202020'                        U023\n         ED    OLFNUM-2(6),TOTNUM+1                                U023\nFNUM5    MVC   OLCCYL,MAXCYL            MOVE IN LARGEST CONTIG CYL U022\n         MVC   OLCTRK,MAXTRK            MOVE IN LARGEST CONTIG TRK U018\n         L     R1,TOTDSCB               GET TOTAL # OF FREE DSCBS  U018\n         CVD   R1,DBLW                  CONVERT IT                 U018\n         MVC   OLFDSCB-1(6),=X'402020202020'                       U023\n         ED    OLFDSCB-1(6),DBLW+5                                 U023\n         LA    R0,LINERDW               -> DATA LINE               U012\n         BAL   R14,PUTLINE              Write the line             U024\n         B     RET0                     END THE PROGRAM            U029\n         SPACE 2\n*--- At entry:  R15 -> 4 char field to blank leading zeroes on     U023\nUNZERO   CLI   0(R15),C'0'              leading zero?              U023\n         BNER  R14                      no - all done              U023\n         MVI   0(R15),C' '              yes - blank it             U023\n         CLI   1(R15),C'0'              leading zero?              U023\n         BNER  R14                      no - all done              U023\n         MVI   1(R15),C' '              yes - blank it             U023\n         CLI   2(R15),C'0'              leading zero?              U023\n         BNER  R14                      no - all done              U023\n         MVI   2(R15),C' '              yes - blank it             U023\n         BR    R14                      all done                   U023\n         SPACE 2\n*---  AT ENTRY:  R0 -> RDW FOR PUTLINE                             U012\nPUTLINE  ST    R14,LINKLINE             Save routine linkage       U024\n         PUTLINE  OUTPUT=((0),,,DATA),MF=(E,IOPL)                  U024\n         SPACE 1\n         L     R14,LINKLINE             Restore routine linkage    U024\n         BR    R14                      Return to caller           U024\n         DROPX R12                      LISTVO                     U025\n         EJECT                                                     U025\n*\n*        Parse exit to validity check volume index entries\n*\nVALVOL   SAVE  (14,2)                                              U025\n         LR    R2,R15                   Routine base address       U025\n         USNGX VALVOL,R2                                           U025\n         SLR   R15,R15                  Set normal retcode         U025\n         L     R14,0(,R1)               -> vol index PDE           U025\n         L     R1,0(,R14)               -> vol index data          U025\n         CLI   0(R1),C'*'               Special request?           U026\n         BE    VALVOL3                  Yes, check validity        U025\n         CLI   0(R1),C'='               Special request?           U025\n         BE    VALVOL2                  Yes, check length          U025\n         CLI   0(R1),C'$'               Special request?           U025\n         BE    VALVOL5                  Yes, check length          U025\n         CLI   0(R1),C'\u00ac'               Special request?           U025\n         BE    VALVOL5                  Yes, check length          U025\n         CLI   0(R1),C'-'               Special request?           U025\n         BE    VALVOL5                  Yes, check length          U025\n         CLI   0(R1),C'#'               National char?             U025\n         BE    VALVOL9                  Yes, valid                 U025\n         CLI   0(R1),C'@'               National char?             U025\n         BE    VALVOL9                  Yes, valid                 U025\n         CLI   0(R1),C'A'               Alphabetic?                U025\n         BL    VALVOL8                  Invalid, error             U025\n         CLI   0(R1),C'I'               Alphabetic?                U025\n         BNH   VALVOL9                  Yes, valid                 U025\n         CLI   0(R1),C'J'               Alphabetic?                U025\n         BL    VALVOL8                  No, error                  U025\n         CLI   0(R1),C'R'               Alphabetic?                U025\n         BNH   VALVOL9                  Yes, valid                 U025\n         CLI   0(R1),C'S'               Alphabetic?                U025\n         BL    VALVOL8                  No, error                  U025\n         CLI   0(R1),C'Z'               Alphabetic?                U025\n         BNH   VALVOL9                  Yes, valid                 U025\n         CLI   0(R1),C'0'               Numeric?                   U025\n         BL    VALVOL8                  No, error                  U025\n         CLI   0(R1),C'9'               Numeric?                   U025\n         BNH   VALVOL9                  Yes, valid                 U025\n         B     VALVOL8                  No, error                  U025\nVALVOL2  CLC   4(2,R14),=H'1'           Exactly one char?          U025\n         BNE   VALVOL8                  No, error                  U025\n         B     VALVOL9                  Yes, valid                 U025\nVALVOL3  CLC   4(2,R14),=H'1'           Exactly one char?          U025\n         BNE   VALVOL8                  No, error                  U025\n         L     R1,540          PSATOLD  -> current TCB             U026\n         L     R1,180(,R1)     TCBJSCB  -> job step CB             U025\n         L     R1,264(,R1)     JSCBPSCB -> TSO protected step CB   U025\n         USNGX PSCB,R1                                             U025\n         TM    &@@SYSP                  Systems programmer?        U025\n         BZ    VALVOL8                  No, error                  U025\n         B     VALVOL9                  Yes, valid                 U025\n         DROPX R1                       PSCB                       U025\nVALVOL5  CLC   4(2,R14),=H'1'           More than one char?        U025\n         BNH   VALVOL8                  No, error                  U025\n         CLC   4(2,R14),=H'7'           More than seven chars?     U025\n         BNH   VALVOL9                  No, valid                  U025\nVALVOL8  LA    R15,4                    Indicate invalid parm      U025\nVALVOL9  RETURN (14,2),RC=(15)          Return to caller (IKJPARS) U025\n         DROPX R2                       VALVOL                     U025\n         TITLE 'LISTVO    -- CONSTANTS'\n         LTORG                                                     U025\n         SPACE 2\nBLANKS   DC    CL80' '                                             U007\nHEADER1  DC    C'Volume  Dev  Use Count  ---------- Free ---------   Co$\n               ntiguous  IX '                                      U022\nHEADERL1 EQU   *-HEADER1                                           U004\n         DC    C' Unit Mount'                                      U022\nHEADERL2 EQU   *-HEADER1                                           U004\n         SPACE 1\nHEADER2  DC    C' Name   Adr   Alc Opn   Cyl   Trk   Extents  DSCB     $\n               Cyl Trk  VTOC'                                      U022\n         DC    C'   Status  '                                      U022\n         SPACE 3                                                   U007\n*---  MESSAGES USE 'WTO' MACRO ONLY FOR THE PURPOSE OF GENERATING\n*---  A VARIABLE LENGTH MESSAGE.  THESE ARE *NOT* REAL WTO'S.      U012\n         SPACE 1\nMSGPARSE WTO   'PARSE FAILED',MF=L                                 U029\n         SPACE 2\nMSGNALL  WTO   'RESTRICTED OPERAND - \"ALL\"',MF=L                   U014\n         SPACE 2\nCVPLX    CVAFDSM  ACCESS=MAPDATA,MAP=VTOC,COUNT=YES,MF=L           U016\n         SPACE 1\nCVPLLEN  EQU   *-CVPLX                                             U016\n         SPACE 2\nGQSCANX  GQSCAN  AREA=(,AREAL),REQLIM=MAX,SCOPE=ALL,REQCNT=1,MF=L  U017\n         SPACE 1\nGQSCANXL EQU   *-GQSCANX                                           U017\n         SPACE 2\n*DCBX    DCB   DDNAME=*-*,???           FOR VTOC FOR CVAF          U017\n         SPACE 1\n*DCBXL   EQU   *-DCBX                                              U017\n         SPACE 2\nNAMELIST DC    0C' '                                               U024\n         @GLOBALC LISTVO,NAMELIST                                  U024\n         DC    5CL(UNITNLEN)' '         Patch space for 5 lists    U024\n         DC    C' '                     End flag for NAMELIST      U024\n         SPACE 2\n         PRINT NOGEN\nPCL      IKJPARM DSECT=PDL\nVOL      IKJIDENT 'VOLUME SEARCH LIST NAME',LIST,                  U025$\n               FIRST=ANY,OTHER=ALPHANUM,VALIDCK=VALVOL,            U025$\n               MAXLNTH=8,PROMPT='VOLUME SEARCH LIST NAME'          U024\nSTAT     IKJKEYWD\n         IKJNAME  'STATUS'                                         U010\n         IKJNAME  'NOSTATUS'                                       U010\nHEAD     IKJKEYWD\n         IKJNAME  'HEADER'                                         U010\n         IKJNAME  'NOHEADER'                                       U010\nTOTALS   IKJKEYWD\n         IKJNAME  'TOTALS'                                         U018\n         IKJNAME  'NOTOTALS'                                       U018\nSORTS    IKJKEYWD DEFAULT='BYVOLSER'                               U025\n         IKJNAME  'BYVOLSER',ALIAS=('BYVOLUME','BYVOLID')          U025\n         IKJNAME  'BYADDRESS',ALIAS=('BYDEVADDRESS','BYDEVADR')    U025\n         IKJNAME  'BYFREE'                                         U025\n         IKJNAME  'BYCONTIGFREE'                                   U025\nBYVOL    EQU   1                                                   U025\nBYADDR   EQU   2                                                   U025\nBYFREE   EQU   3                                                   U025\nBYCNTG   EQU   4                                                   U025\n         IKJENDP\n         PRINT GEN\n         TITLE 'LISTVO  - DYNAMIC STORAGE DEFINITIONS'\nWORKD    DSECT                                                     U017\n         SPACE 1\nLISTNAME DS    CL8                                                 U024\nLINKUNIT DS    A                                                   U024\nLINKINDX DS    A                                                   U025\nLINKLINE DS    A                                                   U024\n         SPACE 1\n* The following three lines MUST remain in order\nINDXLADR DS    A                        -> first byte in list area U025\nINDXLPTR DS    A                        -> next byte in list area  U025\nINDXLLIM DS    A                        -> last byte in list area  U025\n         SPACE 1\n* The following three lines MUST remain in order\nSPRSLADR DS    A                        -> first byte in list area U025\nSPRSLPTR DS    A                        -> next byte in list area  U025\nSPRSLLIM DS    A                        -> last byte in list area  U025\n         SPACE 1\nAOUTLINA DS    A                        -> output lines area       U025\nAOUTLINL DS    A                        -> end of area +1          U025\nAOUTLINN DS    A                        -> next output line        U025\nSORTRTN  DS    A                        -> sort compare routine    U025\nPUTLNMFL PUTLINE  MF=L                                             U012\n         SPACE 1\nCVPL     CVAFDSM  ACCESS=MAPDATA,MAP=VTOC,COUNT=YES,MF=L           U016\n         SPACE 2\nIOSPARM  DC    A(IOSWORK,IOSDVCLS,IOSAUCB+X'80000000')             U019\nIOSAUCB  DC    A(0)                     IOSVSUCB RETURNED UCB ADDR U019\nIOSWORK  DC    XL100'00'                IOSVSUCB SERVICE WORK AREA U019\n         SPACE 2\nLINERDW  DS    2H                       PUTLINE RECORD DESC WORD   U012\nLINE     DS    0C\nOLVOLSER DS    CL6\n         DS    2C                                                  U004\nOLDEVADR DS    CL3\n         DS    C                                                   U023\nOLUALLOC DS    CL5                                                 U023\n         DS    C                                                   U004\nOLUOPEN  DS    CL3                                                 U004\n         DS    2C                                                  U022\nOLMSG    EQU   *+1                      MESSAGES GO HERE           U022\nOLFCYL   DS    CL4                                                 U022\n         DS    2C                                                  U018\nOLFTRK   DS    CL4\n         DS    4C                                                  U015\nOLFNUM   DS    CL4                                                 U015\n         DS    3C                                                  U022\nOLFDSCB  DS    CL5                                                 U022\n         DS    4C                                                  U022\nOLCCYL   DS    CL4                                                 U022\n         DS    C\nOLCTRK   DS    CL3\n         DS    3C                                                  U011\nOLIXVTOC DS    CL2                                                 U011\nOLMSGL   EQU   *-OLMSG                  MAX LENGTH AVAIL FOR MSGS  U006\n         DS    2C                                                  U011\nOLSTAT1  DS    CL4                                                 U004\n         DS    C'/'                                                U004\nOLSTAT2  DS    CL5                                                 U004\nLINEL    EQU   *-LINE\n         SPACE 2\nIOSDVCLS DC    AL1(UCB3DACC)            IOSVSUCB DASD DEVICE CLASS U019\n         SPACE 1\nFLAG     DS    X                                                   U001\nF@DFLT   EQU   X'80'                    Need to use default unit   U025\nF@STAT   EQU   X'40'                    WANTS STATUS ALSO          U004\nF@NOHEAD EQU   X'10'                    DOESN'T WANT HEADER LINES  U007\nF@AUTH   EQU   X'08'                    Running APF authorized     U024\nF@TOTALS EQU   X'04'                    WANT TOTALS LINE           U018\n         SPACE 2\nCLEAR    EQU   *                        START OF AREA TO ZERO      U018\nNUMVOLS  DS    H                        NUMBER OF VOLUMES FOUND    U018\nTOTCYL   DS    PL4                      TOTAL NUMBER OF FREE CYL   U018\nTOTTRK   DS    PL4                      TOTAL NUMBER OF FREE TRK   U018\nTOTNUM   DS    PL4                      TOTAL NUMBER OF FREE EXT   U018\nTOTDSCB  DS    F                        TOTAL                      U018\nMAXCYL   DS    CL4                      MAX CONTIG CYL             U018\nMAXTRK   DS    CL4                      MAX CONTIG TRK             U018\nCLEARL   EQU   *-CLEAR                  LENGTH TO ZERO             U018\nPWORK    DS    PL4                      WORK AREA FOR PACK         U018\nDBLW     DS    4D\nXHDR1RDW DS    2H                       RDW FOR PUTLINE            U012\nXHDR1    DS    CL(HEADERL2)                                        U011\nXHDR2RDW DS    2H                       RDW FOR PUTLINE            U012\nXHDR2    DS    CL(HEADERL2)                                        U011\nCAM      DS    0D\nCAML     DS    4F                       OBTAIN LIST\nCAMV     DS    2F                       VOL NAME\n         DS    0D\nCAMW     DS    140X                     CAMLST WORK AREA\nTOKEN    DS    F                        TOKEN FOR GQSCAN           U017\nRIBLS    DS    0F                       RIB LENGTHS...             U017\nRIBL     DS    H                        LENGTH OF RIB              U017\nRIBEL    DS    H                        LENGTH OF RIBE             U017\nGQLIST   GQSCAN  MF=L                                              U017\nLISTEL   EQU   1+1+6                    Index list entry length    U026\nLF@FND   EQU   X'80'                    Volume was found           U026\nINDXLIST DS    64XL(LISTEL)             Target vol index list      U026\nINDXLL   EQU   *-INDXLIST               Max length of target list  U025\nSPRSLIST DS    16XL(LISTEL)             Suppressed vol index list  U026\nSPRSLL   EQU   *-SPRSLIST               Max length of suppress lst U025\nAREA     DS    CL4096                   GQSCAN ANSWER AREA         U017\nAREAL    EQU   *-AREA                                              U017\n         DS    0H                       Align the following field  U025\nOUTLINES DS    500XL(LINEL+4)           Room for 500 output lines  U025\nOUTLINEL EQU   *-OUTLINES               Length of output area      U025\n         DS    H                        OUTLINES ending flag       U025\nWORKLEN  EQU   *-WORKD                                             U017\n         TITLE 'LISTVO    -- DSECTS'\n         PRINT NOGEN                                               U025\n         CVT   DSECT=YES                                           U019\n         SPACE 2\nUCB      DSECT\n         IEFUCBOB\n         SPACE 2\n         IKJPSCB\n         SPACE 2\n         IKJECT\n         SPACE 2\n          AIF   (&@@SPLVL GE 200).GRS91                            U022\n         IHAQCB\n         SPACE 2\n         IHAQEL\n.GRS91    ANOP                                                     U022\n         SPACE 2\n         ISGRIB  ,                                                 U017\n         SPACE 2\n         IHAASVT  ,                                                U017\n         SPACE 2\n         IHAASCB  ,                                                U017\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LOCK": {"ttr": 9473, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x0e\\x00\\x00\\x00\\x84\\x18\\x7f\\x00\\x893?\\x16\\x08\\x02|\\x01;\\x01x\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.14", "flags": 0, "createdate": "1984-07-05T00:00:00", "modifydate": "1989-11-29T16:08:00", "lines": 636, "newlines": 315, "modlines": 376, "user": "LDW"}, "text": "LOCK     TITLE '-----  SECURE TERMINAL WITHOUT LOGGING OFF  -----'\n***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1988 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.                                     *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1, with DFP 3.1),  *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc-oberon!LDW (last resort)                           *\n*                                                                     *\n*          (213) 743-5391 (direct -- 11 am to 7 pm Pacific time)      *\n*          (213) 743-2957 (msgs)                                      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, or 714.  Sorry.                                       *\n*                                                                     *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*   PROGRAM NAME:  LOCK                                               *\n*                                                                     *\n*   PURPOSE:       SECURE A TSO TERMINAL FROM UNAUTHORIZED USE,       *\n*                  WITHOUT HAVING TO LOG OFF.  THIS COMMAND WILL NOT  *\n*                  EXIT UNTIL THE CORRECT ACF2 PASSWORD FOR THE       *\n*                  ACTIVE USER IS ENTERED.  ALSO, THIS COMMAND WILL   *\n*                  WAKE UP EVERY 10 MINUTES FOR UP TO 90 MINUTES,     *\n*                  TO KEEP THE SESSION FROM ABENDING S522.            *\n*                                                                     *\n*   Author:        Leonard D. Woren                                   *\n*                                                                     *\n*   Date:          January 17, 1984                                   *\n*                                                                     *\n*   Attributes:    APF authorized                                     *\n*                                                                     *\n*   Installation:  University of Southern California                  *\n*                                                                     *\n*   Written at:    Hughes Aircraft Company                            *\n*                                                                     *\n*   Updates:                                                          *\n*      27May88  LDW  Update acf2 check for USC                        *\n*      25Apr88  LDW  Insert @SWITCH calls for PIE/Sessions            *\n*      30Aug87  LDW  Put conditional assembly around ACF2 code        *\n*      06May87  LDW  Minor change to message text (say \"logon\" pswd)  *\n*                    Eliminate use of LC macro                        *\n*      01/16/86 LDW  ALLOW USE BY USERS, BUT DON'T DO 522 BYPASS      *\n*                    REMOVE CALLS TO APFAUTH SVC                      *\n*      07/11/85 LDW  DISPLAY TERMID ON SCREEN                         *\n*      07/03/85 LDW  DISPLAY SMFID ON SCREEN                          *\n*                    UPDATE FOR NEW F3270 MACRO FORMAT                *\n*                    SAY 'ENTER UADS PASSWORD' IF ACF2 NOT UP         *\n*      06/18/85 LDW  REMOVE CHECK FOR OPERATOR & ACCOUNT              *\n*      05/01/85 LDW  USE STTMPMD TO MAKE SESSION MANAGER HAPPY        *\n*      01/17/85 LDW  FIX FOR 3278-5                                   *\n*      11/15/84 LDW  CHANGE ROUTCDE ON TIMER WTO'S FROM 11 TO 15, SO  *\n*                       THAT THEY WILL APPEAR ONLY IN SYSLOG          *\n*      08/10/84 LDW  ADD LONG=YES TO SUBTASK'S \"WAIT\"                 *\n*      07/26/84 LDW  DON'T ALLOW ATTN                                 *\n*      07/05/84 LDW  FINISH AND INSTALL                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n         COPY  @GLOBALS\n         EJECT\nLOCK     OSENTER  EXIT=LEAVE,RC=0,PARMREG=R2,ENV=(CP,SIM),             $\n               GETMAIN=(WORKLEN,WORKD)\n         MVI   FLAGS,0                  INIT ALL FLAGS\n*--------------------------------------*\n*  SEE IF THIS USER IS A PRIVILEGED    *\n*  USER.  IF SO, WE WILL WAKE UP       *\n*  EVERY 10 MINUTES FOR AN HOUR TO     *\n*  DELAY AN ABEND S522.                *\n*--------------------------------------*\n          AIF   (&@@ACF2 EQ 0).NOACF2A\n         ACFINCVT  R4,NONE=NO$UID       GET ACF2 CVT PTR\n         SPACE 1\n         USNGX ACCVT,R4\n         OI    FLAGS,FACF2              ACF2 IS AVAILABLE\n         SPACE 1\n         ACFGUCB  R5,NONE=ACF2DOWN,INLINE=YES,SYS=AOS2\n         SPACE 1\n         USNGX ACUCB,R5\n         SPACE 1\n         ICM   R1,B'1111',ACULRECP      -> LIDREC\n         BZ    NO$UID\n         CLC   =C'UCS',LIDDEPT-LIDREC(R1)  GOOD GUY?\n         BNE   NO$UID                   NO\n         OI    FLAGS,FSTAFF             YES - REMEMBER\n          AGO   .ACF2A\n.NOACF2A  ANOP\n         L     R1,PSATOLD-PSA           -> TCB\n         USNGX TCB,R1\n         TM    TCBFBYT3,TCBEXP          TCB EXPANSION THERE ?\n         BNO   GETUID2                  TRY ASXBSENV IF NO TCBSENV\n         ICM   R4,B'1111',TCBSENV       TASK ACEE PRESENT?\n         BNZ   GETUID3                  ACEE FOUND IF PRESENT\nGETUID2  L     R3,PSAAOLD-PSA           -> ASCB (STILL VALID?)\n         L     R4,ASCBASXB-ASCB(,R3)    -> ASXB\n         ICM   R4,B'1111',ASXBSENV-ASXB(R4)\n         BZ    NO$UID\nGETUID3  CLC   =C'SYS',ACEEGRPN-ACEE(R4)  GOOD GUY?\n         BE    SYS$UID                  YES\n         CLC   =C'STAFF',ACEEGRPN-ACEE(R4)  GOOD GUY?\n         BNE   NO$UID                   NO\nSYS$UID  OI    FLAGS,FSTAFF             YES - REMEMBER\n.ACF2A    ANOP\n         SPACE 3\n*--------------------------------------*\n*  FIND REAL PSCB, SEE IF USER IS      *\n*  ALLOWED TO USE THIS PROCESSOR.      *\n*--------------------------------------*\nNO$UID   L     R10,CPPLPSCB             -> PSCB\n         USNGX PSCB,R10\n***      TM    PSCBATR1,PSCBCTRL+PSCBACCT  OPER OR ACCT AUTH?\n***      BNZ   USER$OK                  YES - CONTINUE\n***      WTO   'LOCK - USE NOT AUTHORIZED',ROUTCDE=11\n***      B     LEAVE\n         SPACE 3\n*--------------------------------------*\n*  SEE IF WE CAN RUN ON THIS TERMINAL. *\n*--------------------------------------*\nUSER$OK  GTSIZE  ,                      DETERMINE SCREEN ATTRIBUTES\n         LTR   R0,R0                    DISPLAY TERMINAL?\n         BP    TERM$OK                  YES - CONTINUE\n         TPUTX '\"LOCK\" CAN ONLY BE USED ON 3270 TYPE DEVICES, SORRY'\n         B     LEAVE\n         SPACE 3\n*--------------------------------------*\n*  ESTABLISH SUBTASK TO PREVENT S522.  *\n*--------------------------------------*\nTERM$OK  TM    FLAGS,FSTAFF             SYSTEMS STAFF?\n         BZ    NO$ATTCH                 NO - SKIP ATTACH\n         SPACE 1\n         IDENTIFY  ENTRY=LOCKTIME,EP=LOCKTIME  SET UP ANOTHER ENTRY PT\n         SPACE 1\n         ATTACH  EP=LOCKTIME\n         SPACE 1\n         ST    R1,TCBADDR               SAVE TCB ADDRESS\n         SPACE 3\n*--------------------------------------*\n*  MISCELLANEOUS OTHER INITIALIZATION  *\n*--------------------------------------*\nNO$ATTCH MVC   USERID,PSCBUSER          MOVE USERID TO SCREEN\n         MVC   USERIDL,PSCBUSRL         save userid length\n         MVC   USERIDA,PSCBUSER         save userid\n         L     R1,CVTPTR                -> CVT\n         L     R1,CVTSMCA-CVT(,R1)      -> SMF CONTROL BLOCK\n         MVC   SMFID,SMCASID-SMCABASE(R1)  DISPLAY SMF SYSTEM ID\n         L     R1,PSAANEW-PSA           -> ASCB\n         L     R2,ASCBTSB-ASCB(,R1)     -> TSB (FETCH PROTECTED)\n         LTR   R2,R2                    ANY?\n         BZ    SKIPTERM                 NO - NO TERMINAL NAME TO DISP\n         SPACE 1\n***      LA    R0,1\n***      SVC   243                      GET APF AUTHORIZED\n         SPACE 1\n         MODESET  KEY=ZERO              SET PROTECT KEY = 0\n         SPACE 1\n         UNPK  LINE-1(5),TSBLINE-TSB(3,R2)  GET THE LINE ADDRESS\n         MVC   TERMID,TSBTRMID-TSB(R2)  AND THE TERMINAL NAME\n         SPACE 1\n         MODESET  KEY=NZERO             RESTORE PROBLEM KEY\n         SPACE 1\n***      LA    R0,0\n***      SVC   243                      GET APF UNAUTHORIZED\n         SPACE 1\n         TR    LINE,HEXTAB              MAKE IT DISPLAYABLE HEX\n         CLC   =C'000',LINE             ANY LINE ADDRESS\n         BNE   SKIPTERM                 YES - LEAVE IT\n         MVC   LINE,BLANKS              NO - BLANK IT OUT\n         MVC   ON,BLANKS                AND BLANK OUT THE ' ON LINE '\n         SPACE 1\n***      STAX  STAXEXIT                 TRAP ATTENTIONS\nSKIPTERM STAX  DEFER=YES                IGNORE ATTENTIONS\n         STFSMODE  ON,INITIAL=YES\n         STTMPMD   ON,KEYS=ALL\n         @SWITCH  CONTROL=STOP          disallow PIE/Sessions switching\n         TIME  DEC                      GET CURRENT TIME (HHMMSSTH)\n         ST    R0,DWD                   STORE FOR EDIT\n         MVC   TIMELOCK,TIMEMASK        MOVE EDIT MASK TO SCREEN\n         ED    TIMELOCK,DWD\n         SR    R3,R3                    CLEAR LOOP COUNTER\n***      TM    FLAGS,FACF2              IS ACF2 ACTIVE?\n***      BO    *+10                     YES - KEEP MESSAGE TEXT ASIS\n***      MVC   PSWDTYPE,=C'UADS'        NO - ALTER MESSAGE TEXT\n         SPACE 3\n*--------------------------------------*\n*  MAIN LOOP                           *\n*--------------------------------------*\nNO$INPUT MVC   ACF2MSG,BLANKS           CLEAR MSG AREA\n         SPACE 1\nLOOP     CVD   R3,DWD\n         MVC   NUM,=X'40202020'\n         ED    NUM,DWD+6\n         TIME  DEC                      GET CURRENT TIME (HHMMSSTH)\n         ST    R0,DWD                   STORE FOR EDIT\n         MVC   TIME,TIMEMASK            MOVE EDIT MASK TO SCREEN\n         ED    TIME,DWD\n         TPUT  SCREEN,SCREENL,FULLSCR\n         CH    R15,=H'20'               RC TOO BIG?\n         BH    TPUT$ERR                 YES - ABEND\n         B     *+4(R15)                 DECODE RC\n         B     TPUT$OK                  00 - CONTINUE\n         B     TPUT$ERR                 04 - NO BUFFERS FOR NOWAIT\n         B     ATTN$HIT                 08 - ATTN HIT\n         B     TPUT$ERR                 0C - INPUT BUFFER TOO SMALL\n         B     TPUT$ERR                 10 - INVALID PARAMETERS\n         B     DETACH                   14 - TERMINAL IS DISCONNECTED\n         SPACE 1\nTPUT$ERR ABEND 93,,STEP                 GET OUT FOR SURE\n         SPACE 3\nTPUT$OK  MVC   ATTNMSG,BLANKS           CLEAR MSG\n         OC    WAITTIME,WAITTIME        ANY WAITTIME?\n         BZ    NO$WAIT                  NO - GO DO TGET NOW\n         CLC   INBUF,BLANKS             WAS THERE ANY INPUT?\n         BE    NO$WAIT                  NO - DON'T DO THE WAIT\n         STIMER  WAIT,BINTVL=WAITTIME   YES - MAKE HIM WAIT A WHILE\n         SPACE 1\nNO$WAIT  TGET  INBUF,80                 READ SOMETHING\n         XC    POPCOUNT,POPCOUNT        RESET COUNTER FOR ANOTHER HOUR\n         CH    R15,=H'20'               RC TOO BIG?\n         BH    TGET$ERR                 YES - ABEND\n         B     *+4(R15)                 DECODE RC\n         B     TGET$OK                  00 - CONTINUE\n         B     TGET$ERR                 04 - NO BUFFERS FOR NOWAIT\n         B     ATTN$HIT                 08 - ATTN HIT\n         B     TGET$OK                  0C - INPUT BUFFER TOO SMALL\n         B     TGET$ERR                 10 - INVALID PARAMETERS\n         B     DETACH                   14 - TERMINAL IS DISCONNECTED\n         SPACE 1\nTGET$ERR ABEND 93,,STEP                 GET OUT FOR SURE\n         SPACE 3\n*--------------------------------------*\n*  SEE IF CORRECT PASSWORD SUPPLIED    *\n*--------------------------------------*\nTGET$OK  TCLEARQ  INPUT\n         OC    INBUF,BLANKS             UPPER CASE THE INPUT\n         CLC   INBUF,BLANKS             ANY INPUT?\n         BE    NO$INPUT                 NO - CLEAR MSG & RESHOW SCREEN\n         CLI   INBUF,C'>'               RESHOW???\n         BNE   NOT$RS                   NO - CONTINUE\n         CLC   INBUF+1(L'INBUF-1),BLANKS  ANY MORE INPUT?\n         BE    LOOP                     NO - JUST RESHOW SCREEN\nNOT$RS   LA    R3,1(,R3)                INCR ATTEMPTS COUNTER\n         MVC   ATTEMPT,ATTEMPTS         MOVE IN TEXT STRING 'ATTEMPTS'\n         CH    R3,=H'1'                 IS THIS THE FIRST ATTEMPT?\n         BNE   *+8                      NO - SKIP\n         MVI   ATTEMPT+L'ATTEMPT-1,C' ' YES - MAKE IT SAY 'ATTEMPT '\n         CLC   =C'XYZZY',INBUF      %%% PASSWORD CORRECT?\n         NOP   RELEASE              %%% YES - CLEAN UP EVERYTHING\n         SPACE 2\n          AIF   (&@@ACF2 EQ 0).NOACF2B\n         TM    FLAGS,FACF2              IS ACF2 AVAILABLE?\n         BZ    ACF2DOWN                 NO - CHECK UADS PASSWORD\n         SPACE 1\n         XC    ACVALD(ACVLEN),ACVALD    CLEAR WHOLE PARM LIST\n         MVI   ACVFCN,1                 SET FUNCTION CODE\n         MVI   ACVSFCN,ACVSRVLD         REVALIDATE PASSWORD\n**??     MVI   ACVCNTL,ACVCIPSD         BUMP BAD PW COUNT IF BAD\n**??     MVI   ACVCNTL,ACVCNACT         DO NOT INCR SYSTEM ACCESS COUNT\n         ST    R5,ACVUCB                ADDR OF ACUCB\n         LA    R0,MSGBUFF               -> 128 BYTE MESSAGE BUFFER\n         ST    R0,ACVMSG                ...\n         MVC   ACVLID,USERID            LID TO BE REVALIDATED\n         MVC   ACVPSWD,INBUF            PASSWORD TO BE VALIDATED\n         XC    INBUF,INBUF              CLEAR SENDING FIELD\n         MVC   ACVSRCE,BLANKS           SHOW WHERE FROM\n         MVC   ACVJOBV,USERID           USE LID FOR JOBNAME\n         MVC   ACVSLID,=CL8'LOGON  '    INDICATE IT'S ME\n         MVC   ACVPATH,BLANKS           NO REMOTE PATH\n         MVC   ACVAPROG,=CL8'LOCK'      NO PROGRAM NAME\n         SPACE 1\n***      LA    R0,1\n***      SVC   243                      GET APF AUTHORIZED\n         SPACE 1\n         ACFSVC  ACVALD,CVT=HAVE        VALIDATE PASSWORD\n         SPACE 1\n***      LR    R2,R15                   SAVE RETURN CODE\n***      LA    R0,0\n***      SVC   243                      GET APF UNAUTHORIZED\n         SPACE 1\n***      LTR   R15,R2                   CORRECT PASSWORD?\n         LTR   R15,R15                  CORRECT PASSWORD?\n         BZ    RELEASE                  YES - BAIL OUT\n         TM    ACVRFLG,ACVRMSG          MESSAGE PRESENT?\n         BNO   LOOP                     NO - JUST LOOP\n*        LH    R0,MSGBUFF               GET MSG LENGTH\n*        LA    R1,MSGBUFF+4             -> MSG TEXT\n*        TPUT  (1),(0),R                PUT IT OUT\n         MVC   ACF2MSG,MSGBUFF+4        COPY MSG TEXT\n          AGO   .ACF2B\n.NOACF2B  ANOP\n         MVC   PASSWORD,INBUF           set password\n         SPACE 1\n         RACINIT  ENVIR=CREATE,USERID=USERIDL,PASSWRD=PSWDL,           $\n               ACEE=ADDRACEE,SUBPOOL=2\n         SPACE 1\n         CH    R15,=Y(X'34')            RC too big?\n         BH    RACF$BAD                 yes - just loop\n         B     *+4(R15)                 no - decode it\n         B     RACF$00                  00 - ok\n         B     RACF$04                  04 - user not defined to RACF\n         B     RACF$08                  08 - password not authorized\n         B     RACF$0C                  0C - the password is expired\n         B     RACF$10                  10 - the new pswd is invalid\n         B     RACF$14                  14 - user not defined to group\n         B     RACF$18                  18 - RACINIT failed by inst ext\n         B     RACF$1C                  1C - user access revoked\n         B     ACF2DOWN                 20 - RACF is not active\n         B     RACF$24                  24 - user acc to group revoked\n         B     RACF$28                  28 - oid reqd not supplied\n         B     RACF$2C                  2C - oid card invalid for user\n         B     RACF$30                  30 - user not auth to terminal\n         B     RACF$34                  34 - user not auth to appl\n         SPACE 2\nRACF$00  RACINIT  ENVIR=DELETE,                                        $\n               ACEE=ADDRACEE,SUBPOOL=2\n         SPACE 1\n         B     RELEASE                  All done - leave\n         SPACE 2\nRACF$BAD MVC   ACF2MSG(27),=C'RACINIT return code > X''34'''\n         B     LOOP\n         SPACE 2\nRACF$04  MVC   ACF2MSG(24),=C'User not defined to RACF'\n         B     LOOP\n         SPACE 2\nRACF$08  MVC   ACF2MSG(18),=C'Incorrect password'\n         B     LOOP\n         SPACE 2\nRACF$0C  MVC   ACF2MSG(19),=C'Password is expired'\n         B     LOOP\n         SPACE 2\nRACF$10  MVC   ACF2MSG(23),=C'New password is invalid'\n         B     LOOP\n         SPACE 2\nRACF$14  MVC   ACF2MSG(25),=C'user not defined to group'\n         B     LOOP\n         SPACE 2\nRACF$18  MVC   ACF2MSG(27),=C'RACINIT failed by inst exit'\n         B     LOOP\n         SPACE 2\nRACF$1C  MVC   ACF2MSG(19),=C'user access revoked'\n         B     LOOP\n         SPACE 2\nRACF$24  MVC   ACF2MSG(28),=C'user access to group revoked'\n         B     LOOP\n         SPACE 2\nRACF$28  MVC   ACF2MSG(26),=C'OID required, not supplied'\n         B     LOOP\n         SPACE 2\nRACF$2C  MVC   ACF2MSG(20),=C'OID invalid for user'\n         B     LOOP\n         SPACE 2\nRACF$30  MVC   ACF2MSG(31),=C'user not authorized to terminal'\n         B     LOOP\n         SPACE 2\nRACF$34  MVC   ACF2MSG(34),=C'user not authorized to application'\n         B     LOOP\n         SPACE 2\n.ACF2B    ANOP\n         SPACE 3\n*--------------------------------------*\n*  IF INCORRECT PASSWORD ENTERED,      *\n*  INCREASE DELAY TIME BEFORE USER IS  *\n*  GIVEN ANOTHER TRY.                  *\n*--------------------------------------*\nBAD$PSWD L     R1,WAITTIME              GET CURRENT WAIT TIME\n         LA    R1,100(,R1)              ADD 1 SECOND\n         ST    R1,WAITTIME              SAVE NEW WAIT TIME\n         B     LOOP                     AND TRY AGAIN\n         SPACE 3\n*--------------------------------------*\n*  ACF2 IS NOT UP.  GET PSWD FROM TSB. *\n*--------------------------------------*\n*CF2DOWN LA    R0,1\n***      SVC   243                      GET APF AUTHORIZED\n         SPACE 1\nACF2DOWN MODESET  KEY=ZERO              TSB IS FETCH PROTECTED\n         L     R1,PSAANEW-PSA           -> MY ASCB\n         L     R1,ASCBTSB-ASCB(,R1)     -> TSB\n         LTR   R1,R1                    ANY TSB?\n         BZ    RELEASE                  NO - WHAT'S GOING ON HERE?\n         MVC   DWD(8),TSBPSWD-TSB(R1)   SAVE PASSWORD TEMPORARILY\n         MODESET  KEY=NZERO             GO BACK TO PROBLEM KEY\n         XC    INBUF(8),DWD             DOES PASSWORD MATCH?\n         BE    RELEASE                  YES - LEAVE\n         MVC   ACF2MSG(30),=C'PASSWORD INCORRECT -- RE-ENTER'\n         B     BAD$PSWD                 CONTINUE\n         SPACE 3\n*--------------------------------------*\n*  CORRECT PSWD ENTERED.  CLEAN UP.    *\n*--------------------------------------*\nRELEASE  STFSMODE  OFF                  TURN OFF FULLSCREEN MODE\n         STTMPMD   OFF,KEYS=NO\n         @SWITCH  CONTROL=START         allow PIE/Sessions switching\n         LTR   R15,R15                  VTAM?\n         BZ    DETACH                   YES - SKIP\n         TPUT  CLEAR,CLEARL,FULLSCR\n         SPACE 2\nDETACH   TM    FLAGS,FSTAFF             SYSTEMS STAFF?\n         BZ    NO$DETCH                 NO - SUBTASK WASN'T ATTACHED\n         DETACH  TCBADDR                TERMINATE SUBTASK\n         SPACE 2\nNO$DETCH STAX  DEFER=NO                 ALLOW ATTENTIONS\n         B     LEAVE                    AND LEAVE\n         SPACE 3\n*--------------------------------------*\n*  ATTN PRESSED.  PRETEND LIKE WE      *\n*  IGNORED IT.                         *\n*--------------------------------------*\nATTN$HIT MVC   ATTNMSG,ATTNMSGC\n         MVI   STAR,C'*'                PERMANENT INDICATOR\n         LA    R3,1(,R3)                INCR ATTEMPTS COUNTER\n         MVC   ATTEMPT,ATTEMPTS         MOVE IN TEXT STRING 'ATTEMPTS'\n         CH    R3,=H'1'                 IS THIS THE FIRST ATTEMPT?\n         BNE   *+8                      NO - SKIP\n         MVI   ATTEMPT+L'ATTEMPT-1,C' ' YES - MAKE IT SAY 'ATTEMPT '\n         L     R1,WAITTIME              PICK UP WAITTIME\n         SRL   R1,2                     DIVIDE BY 4\n         ST    R1,WAITTIME              STORE REDUCED WAITTIME\n         STFSMODE  ON                   ATTN TURNS OFF FULLSCR\n         B     LOOP\n         SPACE 1\n         DROPX ,\n         SPACE 3\nSTAXEXIT BR    R14                      JUST RETURN, TGET RC=8\n         SPACE 3\n*--------------------------------------*\n*  SUBTASK TO PREVENT S522.  ONE HOUR  *\n*  LIMIT.                              *\n*--------------------------------------*\nLOCKTIME LR    R12,R15                  SET BASE\n         USNGX LOCKTIME,R12\nTIMELOOP MVI   TIMEECB,0\n         STIMER  REAL,TIMEEXIT,BINTVL==A(10*60*100)  WAIT 10 MINUTES\n         WAIT  ECB=TIMEECB,LONG=YES\n         TTIMER  CANCEL\n         XC    WAITTIME,WAITTIME        RESET TGET WAIT TIME TO 0\n         L     R1,POPCOUNT              GET COUNT OF TIMER POPS\n         LA    R1,1(,R1)                INCREMENT\n         ST    R1,POPCOUNT              SAVE UPDATED COUNT\n         CH    R1,=H'6'                 6 * 10 MIN = 1 HOUR\n         BNL   TIMEOUT                  NO MORE EXTENSIONS\n         WTO   'LOCK - TIMER POP',ROUTCDE=15\n         B     TIMELOOP\n         SPACE 1\nTIMEOUT  WTO   'LOCK - EXTENSION LIMIT REACHED',ROUTCDE=15\n         MVI   TIMEECB,0                RESET ECB\n         WAIT  ECB=TIMEECB,LONG=YES     IT'LL NEVER WAKE UP AGAIN\n         EX    0,*                      CAN'T GET HERE.\n         DROPX R12                      LOCKTIME\n         SPACE 2\n         USNGX *,R15\nTIMEEXIT POST  TIMEECB\n         BR    R14\n         DROP  R15\n         SPACE 3\n*--------------------------------------*\n*  MISCELLANEOUS CONSTANTS             *\n*--------------------------------------*\nTIMEECB  DC    F'0'                     ECB FOR STIMER\nPOPCOUNT DC    F'0'                     NUMBER OF TIMER POPS\nWAITTIME DC    F'0'                     WAITTIME BEFORE TGET, IN .01SEC\nADDRACEE DC    A(0)                     Addr of dummy ACEE\nUSERIDL  DC    AL1(7)                   Length of userid\nUSERIDA  DC    CL7' '                   userid\nPSWDL    DC    AL1(8)                   Length of password\nPASSWORD DC    CL8' '                   password\nATTEMPTS DC    C'Attempts'\nATTNMSGC DC    C'Nice try, but that would be too easy.'\nTIMEMASK DC    C' ',X'2120',C':',X'2020',C':',X'2020'\nBLANKS   DC    CL80' '\n         HEXTAB  DUAL=NO\n         SPACE 3\n*--------------------------------------*\n*  3270 SCREEN BUFFER                  *\n*--------------------------------------*\nSCREEN   DC    X'27F5'                  ESC, ERASE WRITE STD\n         DC    X'C1'                    WCC:\n         F3270 ROW=24,COL=80,MODEL=2    SPF START\n         F3270 ROW=1,COL=1              ...\n         F3270 ROW=1,COL=1,RA=00        CLEAR WHOLE SCREEN\n         F3270 ROW=1,COL=1,ATTR=(SF,PROT,BRIGHT)\nUSERID   DC    CL7' ',C' '              PADDING FOR MOVE FROM THIS FLD\n         F3270 ROW=1,COL=32\nSMFID    DC    CL4' ',C' / '\nTERMID   DC    CL8' '\nON       DC    C' on line '\nLINE     DC    CL3' ',C' '\n         F3270 ROW=1,COL=70\nTIME     DC    C' HH:MM:SS'\n         F3270 ROW=5,COL=1,ATTR=(SF,PROT,NORM)\n*        DC    '/this terminal locked.  /to unlock, enter '\n         DC    C'This terminal locked at'\nTIMELOCK DC    C' HH:MM:SS',C'.'\n         F3270 ROW=7,COL=2\n*        DC    'To unlock, enter '\n*SWDTYPE DC    C'ACF2'\n*        DC    C' password.'\n         DC    C'To unlock, enter logon password.'\n         F3270 ATTR=(SF,PROT,BRIGHT),INITIAL='===>'\n         F3270 ATTR=(SF,NDISP,UNPROT),LENGTH=8\n         F3270 ATTR=(SF,PROT,BRIGHT)\n         F3270 ROW=9,COL=2\nACF2MSG  DC    CL79' '\n         F3270 ROW=22,COL=1,ATTR=(SF,PROT,BRIGHT)\nNUM      DC    CL4' '\n         F3270 ATTR=(SF,PROT,NORM)\nATTEMPT  DC    CL8' '                   'ATTEMPTS'\n         F3270 ROW=22,COL=80\nSTAR     DC    C' '                     ATTN HIT INDICATOR\n         F3270 ROW=24,COL=5\nATTNMSG  DC    CL(L'ATTNMSGC)' '\n*        F3270 ROW=5,COL=62\n         F3270 ROW=7,COL=40\n         DC    X'13'                    IC\nSCREENL  EQU   *-SCREEN\n         SPACE 2\nCLEAR    DC    X'40'                    WCC:  NOTHING SPECIAL\n         F3270 ROW=24,COL=79            LAST SPF FULLSCREEN\n         F3270 ROW=1,COL=1              ...\n         F3270 ROW=1,COL=1,RA=00        CLEAR ENTIRE SCREEN\nCLEARL   EQU   *-CLEAR\n         SPACE 3\n*--------------------------------------*\n*  WORK AREA                           *\n*--------------------------------------*\nWORKD    DSECT                          RESUME\nDWD      DS    D                        CVD WORK AREA\nTCBADDR  DS    F                        ADDR OF SUBTASK'S TCB\nFLAGS    DS    B\nFPRIV     EQU   X'80'                   PRIVILEGED USER\nFACF2     EQU   X'40'                   ACF2 IS ACTIVE\nFSTAFF    EQU   X'20'                   USER IS SYSTEMS STAFF\n         DS    XL3                      WASTED FOR ALIGNMENT\nINBUF    DS    CL80                     TGET INPUT BUFFER\nMSGBUFF  DS    CL128                    ACF2 ERROR MESSAGE BUFFER\n         SPACE 2\n          AIF   (&@@ACF2 EQ 0).NOACF2C\n         ACVALD  DSECT=NO\n.NOACF2C  ANOP\n         SPACE 2\nWORKLEN  EQU   *-WORKD                  LENGTH TO GETMAIN\n         SPACE 2\n*--------------------------------------*\n*  CONTROL BLOCK DSECTS                *\n*--------------------------------------*\n         PRINT NOGEN\n         CVT   DSECT=YES\n         IEESMCA  ,\n         IKJPSCB  ,\n         IHAPSA  ,\n         IHAASCB  ,\n         IHAASXB ,\n         IHAACEE ,\n         IKJTCB ,\n         IKJTSB  ,\n          AIF   (&@@ACF2 EQ 0).NOACF2D\n         ACCVT ,\n         ACFASVT  ,\n         ACUCB ,\n         LIDREC  ,\n.NOACF2D  ANOP\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LSTA": {"ttr": 9731, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x00\\x00y\\x08\\x1f\\x00\\x92\\t\\x0f I\\x01\\x0b\\x00\\x83\\x01\\x06\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1979-03-22T00:00:00", "modifydate": "1992-03-30T20:49:00", "lines": 267, "newlines": 131, "modlines": 262, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1980 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nLSTA     TITLE 'LIST ALLOCATED -- SHORT VERSION '\n***********************************************************************\n* UPDATES:                                                            *\n*    10/27/80 LDW2 - CHANGE NAME DISPLAYED FOR VTOC                   *\n*    02/15/80 LDW1 - CHECK FOR VTOC DSNAME, REMOVE MODID MACRO        *\n*    11/23/79 SDM2 - STOP SKIPPING SYSTEM GENERATED DATASET NAMES     *\n*    06/26/79 SDM1 - 1. CATCH \"NO DATASETS ALLOCATED\" CONDITION       *\n*                    2. ELIMINATE THOSE PUTRID OVERLAPPING MVC'S      *\n*                    3. IDENTIFY MODULE AND ASSMBLY DATE WITH 'MODID' *\n***********************************************************************\n         SPACE 2\nLSTA     CSECT\n         SAVE  (14,12),,LSTA_&SYSDATE_&SYSTIME                     LDW1\n         LR    R12,R15\n         USING LSTA,R12\n         LA    R15,REGSAVE\n         ST    R15,8(,R13)\n         ST    R13,4(,R15)\n         LR    R13,R15\n         SPACE 3\nNEXT     CLI   LE+6,X'80'               LAST ENTRY?\n         BE    END                      ...YES, TERMINATE\n         MVC   BUFF,SPACES                                         SDM1\n         LA    R1,PARMLIST\n         MVC   DD+4(10),XDD\n         MVC   DA+4(46),XDA\n         MVC   MEM+4(10),XMEM\n         LH    R2,RR+6\n         LA    R2,1(,R2)\n         STH   R2,RR+6                  UP ENTRY COUNT\n         SVC   99                       DO IT.\n         LTR   R11,R15                  SAVE IT FOR THE TURKEYS\n         BNZ   SVC99ERR                 POOR FOOL FOUND NOTHING    SDM1\n*                                       (OR SOME OTHER ERROR)      SDM1\n         SPACE 1\n* IF SYSTEM ASSIGNED NAME, SKIP COMPLETELY\n*SDM2    CLI   DA+5,X'18'\n*SDM2    BL    SETDD                    TOO SHORT FOR SYSTEM ASSIGNED\n*SDM2    CLC   DA+6(3),=C'SYS'\n*SDM2    BNE   SETDD\n*SDM2    CLC   DA+14(2),=C'.T'\n*SDM2    BNE   SETDD\n*SDM2    CLC   DA+22(3),=C'.RA'\n*SDM2    BE    NEXT                     GOOD ENUFF FOR ME\n         SPACE 1\nSETDD    MVC   DDNAME,DD+6\n         CLI   DS+6,X'80'               DUMMY ALLOCATION\n         BNE   CK2\n         MVC   DSNAME(8),=CL8'DUMMY'\n         B     PUT\n         SPACE 1\nCK2      CLI   DS+6,X'40'               TERMINAL ALLOCATION\n         BNE   SETDSN\n         MVC   DSNAME(8),=CL8'TERMINAL'\n         B     PUT\n         SPACE 1\nSETDSN   MVC   DSNAME,DA+6\n         CLC   DSNAME,=44X'04'          CUTE?                      LDW1\n         BNE   NOTVTOC                  NO - SKIP                  LDW1\n         MVC   DSNAME,=CL44'*** VTOC ***'  YES - BE CUTER HERE     LDW2\n         LA    R2,DSNAME+12             POINT TO NEXT AREA         LDW1\n         B     SETDISP                  SKIP MEMBERNM PROCESSING   LDW1\n         SPACE 2\nNOTVTOC  LH    R2,DA+4                  DSN LENGTH\n         LA    R2,DSNAME(R2)            WHERE TO START MEMBER FIELD\n         SPACE 1\n         CLI   MEM+5,X'00'              IS THERE MEMBER NAME?\n         BE    SETDISP                  NO - SKIP PROCESSING\n         MVI   0(R2),C'('\n         MVC   1(8,R2),MEM+6            MOVE MEMBER NAME\n         SR    R3,R3\n         IC    R3,MEM+5                 GET LENGTH OF MEMBER NAME\n         LA    R2,1(R2,R3)              END OF MEMBER NAME\n         MVI   0(R2),C')'\n         LA    R2,1(,R2)\n         SPACE 2\nSETDISP  MVC   3(3,R2),=C'SHR'\n         CLI   D1+6,X'08'\n         BE    PUT                      FOR SHR, DON'T SET  DISP\n         MVC   3(3,R2),=C'NEW'\n         CLI   D1+6,X'04'\n         BE    CK3\n         MVC   3(3,R2),=C'MOD'\n         CLI   D1+6,X'02'\n         BE    CK3\n         MVC   3(3,R2),=C'OLD'\n         SPACE 1\nCK3      LA    R1,D2+6\n         LA    R2,6(,R2)\n         BAL   R14,DODISP\n         LA    R1,D3+6\n         BAL   R14,DODISP\n         SPACE 1\nPUT      TPUT  BUFF,74\n         B     NEXT                     GO GET THE NEXT ONE\n         SPACE 1\nEND      SR    R15,R15                                             SDM1\nGETOUT   L     R13,4(,R13)              TIME TO LEAVE              SDM1\n         RETURN (14,12),T,RC=(15)                                  SDM1\nSVC99ERR CH    R15,=H'4'                WUZZIT \"NO DATASETS\"       SDM1\n*                                       (OR WHATEVER RC=4 REALLY   SDM1\n*                                       MEANS)                     SDM1\n         BNE   SVC99UGH                 NO, IT REALLY IS A PROBLEM SDM1\n         TPUT  NDSMSG,L'NDSMSG          TELL GREG \"NO DATASETS\"    SDM1\n         LR    R15,R11                  RESTORE SAVED SVC 99 RC    SDM1\n         B     GETOUT                   EXIT WITH SPECIAL RC       SDM1\nSVC99UGH TPUT  UGHMSG,L'UGHMSG          SAY I'VE GOT A PROBLEM     SDM1\n         LR    R15,R11                  RESTORE SAVED SVC 99 RC    SDM1\n         B     GETOUT                   EXIT WITH SPECIAL RC       SDM1\n         EJECT\nDODISP   SR    R3,R3\n         SR    R4,R4\n         IC    R3,0(,R1)                DISP INDICATOR\n         SPACE 1\n         LTR   R3,R3                    IS IT ZERO?\n         BZR   R14                      IF SO, SKIP COMPLETELY\n         SPACE 1\nLOOP     LA    R4,1(,R4)                COUNT LOOP EXECUTIONS\n         SRA   R3,1                     SHIFT,\n         BNZ   LOOP                     UNTIL VALUE IS ZERO\n         SPACE 1\n         SLA   R4,3                     MULTIPLY BY 8\n         LA    R4,DISPTAB-8(R4)         OFFSET OF NAME\n         MVC   1(7,R2),1(R4)            MOVE DISP\n         MVI   0(R2),C','\n         SR    R3,R3\n         IC    R3,0(,R4)                LENGTH OF OF DISP NAME\n         LA    R2,1(R2,R3)              WHERE TO START NEXT FIELD\n         BR    R14\n         EJECT\n         LTORG\n         EJECT\nREGSAVE  DC    9D'0'\n         SPACE 1                                                   SDM1\nNDSMSG   DC    C'NO DATASETS ALLOCATED!!!!'                        SDM1\nUGHMSG   DC    C'SVC 99 DIDN''T LIKE SOMETHING'                    SDM1\n         SPACE 1\nDISPTAB  DC    X'07',C'UNCATLG',X'05',C'CATLG  '\n         DC    X'06',C'DELETE ',X'04',C'KEEP   '\n         DC    X'04',C'PASS   '\n         SPACE 1\nSPACES   DC    CL75' '                                             SDM1\nBUFF     DS    0CL75\nDDNAME   DS    CL8\n         DS    2C\nDSNAME   DS    CL44\n         DS    21C\n         SPACE 1\nPARMLIST DS    0F\n         DC    X'80',AL3(RB)\nRB       DC    X'14071000',F'0',A(TP),2F'0'\nTP       DC    A(DD),A(DA),A(MEM),A(D1),A(D2),A(D3),A(LE),A(DS)\n         DC    X'80',AL3(RR)\nDD       DC    H'4',H'1',H'8',8C' '\nDA       DC    H'5',H'1',H'44',44C' '\nMEM      DC    H'6',H'1',H'8',8C' '\nD1       DC    H'7',H'1',H'1',X'00'\nD2       DC    H'8',H'1',H'1',X'00'\nD3       DC    H'9',H'1',H'1',X'00'\nLE       DC    H'13',H'1',H'1',X'00'\nDS       DC    H'14',H'1',H'1',X'00'\nRR       DC    H'15',H'1',H'2',H'0'\n         SPACE 1\nXDD      DC    H'8',8C' '\nXDA      DC    H'44',44C' '\nXMEM     DC    H'8',8C' '\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 3\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MS": {"ttr": 9736, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00\\x00\\x00y\\x08\\x1f\\x00\\x893?\\x16\\x08\\x03\\xa5\\x03\\x0e\\x01\\x15\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "1979-03-22T00:00:00", "modifydate": "1989-11-29T16:08:00", "lines": 933, "newlines": 782, "modlines": 277, "user": "LDW"}, "text": "MS       TITLE 'MS - TSO MASTER SUMMARY COMMAND'\n***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1988 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.                                     *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1, with DFP 3.1),  *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc-oberon!LDW (last resort)                           *\n*                                                                     *\n*          (213) 743-5391 (direct -- 11 am to 7 pm Pacific time)      *\n*          (213) 743-2957 (msgs)                                      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, or 714.  Sorry.                                       *\n*                                                                     *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n***********************************************************************\n* UPDATES:                                                            *\n*    16OCT89  U007 LDW - FIX FOR > 99,999.99 SECONDS OF CPU TIME      *\n*                      - FIX CPU SECONDS COMPUTATION                  *\n*    23AUG87  U006 LDW - FIX FOR MVS/XA                               *\n*    10/28/82 U005 LDW - FIX FOR > 16M CPU SIZE                       *\n*    12/16/80 U004 LDW - FIX FOR 4 CHAR CPU MODEL NUMBER              *\n*                      - CHANGE TO INSTALLATION STANDARD MACROS       *\n*                      - MARK SYSHELP NOT IN USE AFTER \"HELP\" SUBCMD  *\n*    06/20/80 U003 LDW - CHANGE LINE LEN TO 78 FROM 79 (STUPID TCAM)  *\n*                      - IMPROVE \"LP\" DISPLAY                         *\n*    08/29/79 U002 SDM - SIMPLIFY IDLE INITIATOR LOGIC                *\n*    11/30/76 U001     - REVISED FOR MVS R3.70 SU807. W.M. BLAKE      *\n*    11/75         - FROM MVS USERS GROUP                             *\n***********************************************************************\n         MACRO                                                     U004\n         TSWORK ,                                                  U004\n         MEND                                                      U004\n         SPACE 3\n         COPY  @GLOBALS                                            U006\n         EJECT\nMS       OSENTER  ENV=(CP,SIM),PL=(CSCAN,DAIR),PARMREG=R2,         U004$\n               EXIT=EXIT,RC=0,MACRO=YES                            U004\n         SPACE 2\n         IKJDAP2C  ,                                               U004\nDA2CLEN  EQU   *-DAPB2C                                            U004\n         SPACE 2\nMS       CSECT                          RESUME                     U004\n         SPACE 2\n         MVC   ONNULL,=A(CMDJ)          DEFAULT ENTRY\n         L     R3,CPPLCBUF              SET UP FOR FIRST TIME\n         B     TIME1ST\n         SPACE 3\n* COMMAND FETCH AND ANALYZE\n         SPACE 1\nASKAGAIN ICM   R1,15,GETPARM+12         GET PUTGET BUFF ADDR\n         BZ    NOFREE                   NONE, THEN DON'T FREEMAIN\n         LH    R0,0(R1)                 LINE LENGTH\n         ICM   R0,B'1000',=X'01'        SUBPOOL\n         FREEMAIN R,LV=(0),A=(1)\n         SPACE 1\nNOFREE   L     R3,CPPLECT\n         L     R2,CPPLUPT\n         PUTGET  PARM=GETPARM,UPT=(2),ECT=(3),ECB=GETECB,MF=(E,IOPLADS)\n         SPACE 1\n         L     R3,GETPARM+12            GET INPUT BUFFER\nTIME1ST  ST    R3,CSPLCBUF              STORE FOR CMD SCAN\n         ST    R3,CPPLCBUF              FOR HELP (IN CASE)\n         SPACE 2\nRESCAN   SR    R0,R0\n         ST    R0,CSFLG                 ZERO FLAGS\n* INVOKE CMD SCAN\n         CALLTSSR EP=IKJSCAN,MF=(E,CSPL)\n         SPACE 1\nSCANRET  ICM   R2,15,CSOACNM            CMD NAME ADDR\n         BZ    NULLLINE                 IF NONE DO SAME THIN\n         SPACE 1\n         CLI   0(R2),C'H'               IS HELP?\n         BNE   NOHELP\n         SPACE 1\n         LA    R1,CPPL * * * * * * INVOKE HELP * * * * * * * * *\n         LINK  EP=HELP\n         LA    R1,DAPBAREA              -> WORK AREA               U004\n         USNGX DAPB2C,R1                                           U004\n         XC    DAPB2C(DA2CLEN),DAPB2C   CLEAR THE WHOLE THING      U004\n         MVI   DA2CCD+1,X'2C'           SET ENTRY CODE             U004\n         MVI   DA2CFLG+1,X'01'          MARK SPECIFIC DDNAME       U004\n         MVC   DA2CDDN,=C'SYSHELP '     DDNAME TO BE UN-USED       U004\n         DROPX R1                                                  U004\n         TSDAIR  DAPB=(1)               MARK \"SYSHELP\" NOT-IN-USE  U004\n         B     ASKAGAIN\n         SPACE 1\nNOHELP   CLC   =C'MS',0(R2)             FIRST TIME ENTRY\n         BNE   NOT1TIME\n         MVC   0(2,R2),BLANKS           BLANK 'MS' FOR RESCAN\n         B     RESCAN\n         SPACE 1\nNULLLINE L     R15,ONNULL               GO TO SAVED EP\n         BR    R15\nNOT1TIME CLC   0(2,R2),=C'SS'           SYSTEM STATS\n         BE    CMDSS\n         CLC   0(2,R2),=C'LP'           SYSTEM STATS\n         BE    CMDLP\n         CLC   0(2,R2),=C'TS'           TSO    STATS\n         BE    CMDTS\n         CLI   0(R2),C'I'               INIT COMMAND?\n         BE    CMDI\n         CLI   0(R2),C'J'               JOBS COMMAND?\n         BE    CMDJ\n         CLI   0(R2),C'S'               TSC?\n         BE    CMDS\n         CLI   0(R2),C'T'               TSU\n         BE    CMDT\n         CLI   0(R2),C'E'               EXIT?\n         BE    EXIT\n         B     OPTIONS                  BAD INPUT GIVE OPTIONS\n         SPACE 1\nCMDI     MVC   PROMPT(2),=C'IN'\n         MVC   ONNULL,=A(MAINLOOP)\n         B     MAINLOOP\n         SPACE 1\nCMDTS    MVC   PROMPT(2),=C'TS'\n         MVC   ONNULL,=A(MAINLOOP)\n         B     MAINLOOP\n         SPACE 1\nCMDT     MVC   PROMPT(2),=C'T '\n         MVC   ONNULL,=A(CMDT)\n         CALL  USERS                    CALL USERS COMMAND\n         B     ASKAGAIN\n         SPACE 1\nCMDJ     MVC   PROMPT(2),=C'J '\n         MVC   ONNULL,=A(CMDJ)\n         CALL  JOBS                     CALL JOB DISP COMMAND\n         B     ASKAGAIN\n         SPACE 1\nCMDS     MVC   PROMPT(2),=C'S '\n         MVC   ONNULL,=A(MAINLOOP)\n         B     MAINLOOP\n         SPACE 1\nCMDSS    MVC   PROMPT(2),=C'SS'\n         MVC   ONNULL,=A(MAINLOOP)\n         B     MAINLOOP\n         EJECT\n* MAIN SCANNING LOOP\n         SPACE 1\nMAINLOOP L     R1,16                    FIND CVT\n         L     R1,X'22C'(,R1)           FIND ASVT\n         LA    R3,X'210'(,R1)           FIND FIRST ENTRY\n         LA    R4,4                     BXLE INCREMENT\n         L     R5,X'204'(,R1)           MAX ADDR SPEC\n         SLA   R5,2                     MULT BY FOUR\n         LA    R5,0(R3,R5)              POINT TO END\n         BCTR  R5,0                     BACK UP ONE\n         SPACE 1\n         CLC   =C'SS',PROMPT            STATS COMMAND?\n         BE    DOSS                     YES, GO DO IT\n         SPACE 1\n         TPUT  HEADER,L'HEADER\n         SPACE 2\nLOOP     TM    0(R3),X'FF'              CHECK BITS ON\n         BNZ   LOOPBXLE                 SKIP IF ONE ON\n         L     R2,0(,R3)                PICK UP POINTER TO ASCB\n         MVC   LINE(80),BLANKS          BLANK LINE\n*U002    ICM   R1,15,172(R2)            JOB NAME FOR INIT PGMS\n*U002    BZ    *+10\n*U002    MVC   LINE+15(8),0(R1)\n         ICM   R1,15,176(R2)            JOBNAME FOR START MOUNT ETC\n         BZ    *+10\n         MVC   LINE+4(8),0(R1)\n         SPACE 1\n         ICM   R1,15,56(R2)             FIND CSCB POINTER\n         BZ    TESTSYS                  NO POINTER, MUST BE SYSTASK\n         SPACE 1\n         ICM   R0,15,52(R1)             CHECK FOR V=R\n         BZ    *+8\n         MVI   LINE+13,C'R'             SET V=R INDICATOR\n         SPACE 1\n*U002    CLI   28(R1),0                 CHECK FOR SYSTEM TASKS\n*U002    BE    TESTSYS\n         CLI   28(R1),1                 CHECK FOR TSU\n         BE    TESTTSU\n         CLI   28(R1),3                 TEST FOR INITIATOR         U002\n         BE    TESTINIT\n         B     TESTSYS                  LEFT OVERS ARE STC\n         SPACE 1\nTESTTSU  CLI   PROMPT,C'T'              ASKING FOR TSU\n         BNE   LOOPBXLE\n         B     LIKEIT                   ELSE REJECT\n         SPACE 1\nTESTINIT CLI   PROMPT,C'I'              ASKING FOR INIT?\n         BNE   LOOPBXLE\n         MVC   LINE+4(6),=C'(IDLE)'                                U002\n         ICM   R1,15,172(R2)            JOB NAME FOR INIT PGMS     U002\n         BZ    LIKEIT                   INITIATOR IS IDLE          U002\n         MVC   LINE+4(8),0(R1)                                     U002\n         B     LIKEIT\n         SPACE 1\nTESTSYS  CLI   PROMPT,C'S'              WANT SYS TASKS?\n         BNE   LOOPBXLE                 IF NOT, WE NO LIKE\n         LTR   R1,R1                    CSCB PRESENT?\n         BZ    LIKEIT                   NO, SKIP THE FOLLOWING\n         MVC   LINE+4(8),16(R1)         MOVE IN ID\n         CLI   24(R1),C' '              UNIT NAME PRES\n         BNH   STNOU\n         MVC   LINE+9(3),24(R1)         MOVE IN UNIT ID\n         MVI   LINE+8,C'-'\nSTNOU    MVC   LINE+15(8),BLANKS\n         SPACE 1\nLIKEIT   LH    R1,36(,R2)               PICK UP ASID\n         CVD   R1,DOUBLE\n         UNPK  LINE(3),DOUBLE\n         OI    LINE+2,C'0'              MAKE IT PRINTABLE\n         SPACE 1\n          AIF   (&@@SPLVL LT 200).XA01                             U006\n         $AMODE 31                                                 U006\n.XA01     ANOP                                                     U006\n         L     R1,X'90'(,R2)            FIND OUCB\n         TM    17(R1),X'80'             NON SWAP?\n         BZ    *+20\n         TM    LINE+13,C'R'   IS IT ALREADY V=R?\n         BO    *+8            THEN DONT MARK N/S\n         OI    LINE+13,C'$'\n         TM    21(R1),X'80'             LONG WAIT?\n         BZ    *+8\n         MVI   LINE+14,C'L'\n         TM    21(R1),X'40'             TERMINAL WAIT?\n         BZ    *+8\n         MVI   LINE+14,C'I'\n         TM    21(R1),X'20'             OUTPUT   WAIT?\n         BZ    *+8\n         MVI   LINE+14,C'O'\n         TM    21(R1),X'08'             ENQHOLD  PROCESSED\n         BZ    *+8\n         MVI   LINE+14,C'Q'\n         SPACE 1\n         SR    R0,R0\n         ICM   R0,B'0011',38(R1)       XACTION SWAP COUNT\n         CVD   R0,DOUBLE\n         MVC   LINE+24(7),=X'4020206B202120'\n         ED    LINE+24(7),DOUBLE+5\n         SPACE 1\n          AIF   (&@@SPLVL LT 200).XA02                             U006\n         $AMODE 24                                                 U006\n.XA02     ANOP                                                     U006\n         SPACE 1\n         SR    R0,R0\n         ICM   R0,B'0011',112(R2)       LOAD # WAITS\n         CVD   R0,DOUBLE\n         MVC   LINE+17(7),=X'4020206B202120'\n         ED    LINE+17(7),DOUBLE+5\n         SPACE 1\n         LH    R1,120(,R2)              ALLOC AUX SLOTS (VAM)\n         SLA   R1,2                     MULT BY 4 TO GET IT IN 'K'\n         CVD   R1,DOUBLE\n         MVC   LINE+31(7),=X'4020206B202120'  EDIT MASK\n         ED    LINE+31(7),DOUBLE+5      DO THE EDIT\n         MVI   LINE+38,C'K'\n         LH    R1,122(,R2)              ALLOC AUX SLOTS (NON-VAM)\n         SLA   R1,2                     MULT BY 4 TO GET IT IN 'K'\n         CVD   R1,DOUBLE\n         MVC   LINE+39(7),=X'4020206B202120'  EDIT MASK\n         ED    LINE+39(7),DOUBLE+5      DO THE EDIT\n         MVI   LINE+46,C'K'\n         LH    R1,152(,R2)              REAL STORAGE IN USE\n         SLA   R1,2                     MULT BY 4 TO GET IT IN 'K'\n         CVD   R1,DOUBLE\n         MVC   LINE+47(6),=X'402020202120'  EDIT MASK              U003\n         ED    LINE+47(6),DOUBLE+5      DO THE EDIT                U003\n         MVI   LINE+53,C'K'                                        U003\n         LM    R0,R1,64(R2)             PICK UP CPU TIME\n*U007    SRDL  R0,24                    MOVE TO ODD REG\n*U007    M     R0,=A(1048576)           COMPUTE IN SECONDS\n*U007    D     R0,=A(10000*256)\n         SRDL  R0,12                    GET MICROSECONDS           U007\n         D     R0,=F'10000'             MAKE IT .01 SECONDS        U007\n         CVD   R1,DOUBLE\n         MVC   LINE+54(10),=X'4020206B2021204B2020'                U003\n         ED    LINE+54(10),DOUBLE+4      DO THE EDIT               U003\n         C     R1,=F'9999999'           DID IT FIT?                U007\n         BNH   *+4+6+6                  YES - CONTINUE             U007\n         MVC   LINE+54(10),=X'40206B2020206B202120'                U007\n         ED    LINE+54(10),DOUBLE+3     AND DON'T SHOW HUNDREDTHS  U007\n*LDW1    MVI   LINE+64,C'S'                                        U003\n         LM    R0,R1,200(R2)            PICK UP SRB TIME\n*U007    SRDL  R0,24                    MOVE TO ODD REG\n*U007    M     R0,=A(1048576)           COMPUTE IN SECONDS\n*U007    D     R0,=A(10000*256)\n         SRDL  R0,12                    GET MICROSECONDS           U007\n         D     R0,=F'10000'             MAKE IT .01 SECONDS        U007\n         CVD   R1,DOUBLE\n         MVC   LINE+64(10),=X'4020206B2021204B2020'                U003\n         ED    LINE+64(10),DOUBLE+4      DO THE EDIT               U003\n         C     R1,=F'9999999'           DID IT FIT?                U007\n         BNH   *+4+6+6                  YES - CONTINUE             U007\n         MVC   LINE+64(10),=X'40206B2020206B202120'                U007\n         ED    LINE+64(10),DOUBLE+3     AND DON'T SHOW HUNDREDTHS  U007\n         MVI   LINE+74,C'S'                                        U003\n         MVI   LINE+64,C'S'                                        U003\n         UNPK  DOUBLE(3),43(2,R2)       CONVERT DPRTY TO HEX\n         TR    DOUBLE(2),HEXTAB\n         MVC   LINE+76(2),DOUBLE        MOVE FOR PRNTING           U003\n         SPACE 1\n         TPUT  LINE,L'LINE\nLOOPBXLE BXLE  R3,R4,LOOP\n         SPACE 1\n         B     ASKAGAIN\n         EJECT\n* ACTIVE LPA LISTER\n         SPACE 1\nCMDLP    MVC   PROMPT(2),=C'LP'\n         MVC   ONNULL,=A(CMDLP)\n         TPUT  LPHDR,LPHDRL             PRINT THE HEADER LINE      U003\n         L     R2,16                    -> CVT\nLPAFIRST L     R2,X'0BC'(,R2)           -> -> MOST RECENT LPDE\n         ICM   R2,15,0(R2)              SKIP DUMMY\n         BZ    ASKAGAIN                 IF NULL\nLPALOOP  MVC   LINE(80),BLANKS          BLANK LINE\n         LA    R3,LINE\n         LA    R4,27                    BXLE SETUP                 U003\n         LA    R5,LINE+78-(27-3)        -> LAST ENTRY ON LINE      U003\nLPALOOP1 MVC   7(8,R3),8(R2)            MOVE IN MODULE NAME\n         ST    R2,FWORK                 CONVERT LPDE ADDR TO HEX\n         UNPK  DOUBLE(7),FWORK+1(4)\n         TR    DOUBLE(6),HEXTAB\n         MVC   0(6,R3),DOUBLE           LPDE ADDR TO PRINT LINE\n         UNPK  DOUBLE(7),17(4,R2)       CONVERT EPA\n         TR    DOUBLE(6),HEXTAB\n         MVC   6+1+8+1(6,R3),DOUBLE     MOVE EPA TO PRINT LINE     U003\n         ICM   R2,15,0(R2)              FOLLOW PNTR\n         BZ    LPATPUT\n         BXLE  R3,R4,LPALOOP1\nLPATPUT  TPUT  LINE,L'LINE\n         LTR   R2,R2\n         BNZ   LPALOOP\n         B     ASKAGAIN\nLPHDR    DC    3CL27'-LPDE- -MODULE- -EPA--'                       U003\nLPHDRL   EQU   *-LPHDR                                             U003\n         SPACE 5\n* CURRENT OPTIONS SUPPORTED DISPLAY\n         SPACE 1\nOPTIONS  MVC   PROMPT(2),=C'OP'\n         MVC   ONNULL,=A(OPTIONS)\n         TPUT  OP1,OPLEN\n         B     ASKAGAIN\n         EJECT\n* SYSTEM STATISTICS DISPLAY\n         SPACE 1\nDOSS     SR    R7,R7                    VIO SLOTS USED COUNTER\n         SR    R8,R8                    REG SLOTS IN USE COUNTER\nSSLOOP   TM    0(R3),X'FF'              ENTRY IN USE\n         BNZ   SSBXLE                   NO, SKIP\n         L     R2,0(,R3)                PICK UP ASCB POINTER\n         AH    R7,120(,R2)              PICK UP VIO PAGES\n         AH    R8,122(,R2)              PICK UP AUX PAGES\nSSBXLE   BXLE  R3,R4,SSLOOP\n         SPACE 1\n         MVC   LINE(80),BLANKS\n         MVC   LINE+29(21),=C'* SYSTEM STATISTICS *'               U004\n         TPUT  LINE,L'LINE\n         SPACE 1\n         L     R2,16                    FIND CVT\n         L     R3,X'C4'(,R2)            FIND SMCA\n         MVC   LINE(80),BLANKS\n         MVC   LINE(7),=C'SYSTEM-'\n         MVC   LINE+7(4),16(R3)         MOVE IN SYSTEM ID\n         S     R2,=F'6'                 BACK UP TO CVT PREFIX\n         MVC   LINE+20(8),=C'RELEASE-'\n         MVC   LINE+28(2),2(R2)         FIRST HALF OF REL NO\n         MVI   LINE+30,C'.'\n         MVC   LINE+31(2),4(R2)         SECOND HALF OF REL NO\n         UNPK  DOUBLE(5),0(3,R2)        MODEL NUM\n         TR    DOUBLE(4),HEXTAB                                    U004\n         MVC   LINE+40(10),=C'CPU MODEL-'\n         MVC   LINE+50(4),DOUBLE                                   U004\n         MVC   LINE+60(9),=C'CPU SIZE-'\n         L     R3,312+6(,R2)\n*U005    LA    R3,1(,R3)                BUMP BY ONE\n         AH    R3,=H'1'                 BUMP BY ONE                U005\n         SRL   R3,10                    CONVERT TO K\n         CVD   R3,DOUBLE\n         MVC   LINE+69(7),=X'4020206B202120'  EDIT MASK\n         ED    LINE+69(7),DOUBLE+5      DO THE EDIT\n         MVI   LINE+76,C'K'\n         TPUT  LINE,L'LINE\n         SPACE 1\n         MVC   LINE(80),BLANKS\n         MVC   LINE(16),=C'VIO SLOTS IN USE'\n         SLA   R7,2                     MULT BY 4 TO MAKE K\n         CVD   R7,DOUBLE\n         MVC   LINE+20(10),=X'40206B2020206B202120'\n         ED    LINE+20(10),DOUBLE+4\n         MVI   LINE+30,C'K'\n         MVC   LINE+40(17),=C'A.S. SLOTS IN USE'\n         SLA   R8,2                     MULT BY 4 TO MAKE K\n         CVD   R8,DOUBLE\n         MVC   LINE+60(10),=X'40206B2020206B202120'\n         ED    LINE+60(10),DOUBLE+4\n         MVI   LINE+70,C'K'\n         TPUT  LINE,L'LINE\n         SPACE 1\n         MVC   LINE(80),BLANKS\n         MVC   LINE(17),=C'SLOT SPACE IN USE'\n         AR    R7,R8                    SUM UP\n         CVD   R7,DOUBLE\n         MVC   LINE+20(10),=X'40206B2020206B202120'\n         ED    LINE+20(10),DOUBLE+4\n         MVI   LINE+30,C'K'\n         L     R1,16                    FIND CVT\n         L     R7,X'164'(,R1)           FIND PVT\n         MVC   LINE+40(18),=C'USABLE FRAME SPACE'\n         LH    R8,8(,R7)                USABLE FRAME COUNT\n         SLL   R8,2                     MULT BY 4 TO GET K\n         CVD   R8,DOUBLE\n         MVC   LINE+60(10),=X'40206B2020206B202120'\n         ED    LINE+60(10),DOUBLE+4\n         MVI   LINE+70,C'K'\n         TPUT  LINE,L'LINE\n         SPACE 2\n         CALL  PAGE\n         B     ASKAGAIN\n         EJECT\nDOUBLE   DC    D'0'\nONNULL   DC    A(CMDJ)                  DEFAULT SUBCOMMAND\nIOPLADS  DC    4F'0'                    PUTGET IOPL\nGETPARM  PUTGET OUTPUT=(PROLD,SINGLE,MODE),TERMPUT=(ASIS),MF=L\nFWORK    DC    F'0'\nGETECB   DC    F'0'\nLINE     DC    CL80' '\nPROLD    DC    A(1,PRRDW)\nPRRDW    DC    AL2(7,0),C' '\nPROMPT   DC    CL2'IN'\nBLANKS   DC    CL80' '\nHEADER   DC    CL80'AID   NAME   FLGS  WAITS  SWAPS --VIO-- -SLOTS- WKG*\n                SET  CPU TIME  SRB TIME PR'                        U003\nOP1      DC    CL40'* * OPTIONS CURRENTLY SUPPORTED * *'\n         DC    CL40'E  - END THIS PROCESSOR'\n         DC    CL40'H  - HELP SUBCOMMAND (ENTER HELP HELP)'\n         DC    CL40'I  - INITIATOR DISPLAY'\n         DC    CL40'J  - RUNNING JOBS DISPLAY'\n         DC    CL40'LP - ACTIVE LINK PACK AREA'\n         DC    CL40'S  - STARTED TASK DISPLAY'\n         DC    CL40'SS - SYSTEM PERFORMANCE STATISTICS'\n         DC    CL40'T  - TSO USER DISPLAY'\n         DC    CL40'TS - TSO USER DISPLAY W/STATISTICS'\nOPLEN    EQU   *-OP1\n         SPACE 2\n         LTORG\n         SPACE 1\nHEXTAB   EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\n         SPACE 2\n         TITLE 'JOBS - TSO DISPLAY JOBS COMMAND'\nJOBS    CSECT\n         SAVE  (14,12),T,JOBS_TSO_COMMAND\n         USING JOBS,R15\n         LA    R11,SAVEARE2\n         ST    R13,SAVEARE2+4\n         ST    R11,8(,R13)\n         LR    R13,R11\n         B     STAR2\n         DROP  R15\n         SPACE 2\nSAVEARE2 DC    18F'0'\n         SPACE 2\nSTAR2    DS    0H\n         USING SAVEARE2,R13\n         SPACE 2\n         L     R6,=V(CLEARREG)\n         LM    R6,R9,0(R6)              INITIALIZE TABLE\n         MVCL  R6,R8\n         SPACE 1\n         L     R1,16                    FIND CVT\n         L     R2,X'94'(,R1)            FIND BASEA (M.S.RES.DATA)\n         L     R3,=V(TABLE)             NAME TABLE\n         LA    R4,80                    BXLE INCREMENT\n         LR    R5,R3                    BXLE END\n         A     R5,=A(LENTABLE)\n         SR    R6,R6                    COUNT OF JOBS\nCSCBLOOP ICM   R2,15,0(R2)\n         BZ    CSCBEND                  WHEN DONE\n         CLI   28(R2),2                 JOB IDENTIFIER ?\n         BNE   CSCBLOOP\n         SPACE 1\n* FIND THE ASSOCIATED ASCB\n         SPACE 1\n         L     R1,16                    GET CVT\n         L     R1,X'22C'(,R1)           FIND ASVT\n         LA    R1,X'20C'(,R1)           FIND ENTRY ZERO\n         LH    R0,30(,R2)               GET ASID\n         SLA   R0,2                     MULT BY FOUR\n         AR    R1,R0                    R1 NOW POINTS TO ASVT ENTRY\nGOTASVE  L     R1,0(,R1)                GET ASCB ADDRESS\n         SPACE 1\nGOTASCB  ICM   R7,15,176(R1)            PICK UP STC NAME\n         BZ    CSCBLOOP                 NONE, SKIP\n         CLC   =CL8'INIT',0(R7)         CHECK FOR INIT\n         BNE   CSCBLOOP                 SKIP IF NOT\n         SPACE 2\n         LA    R6,1(,R6)                BUMP USER COUNT\n         MVC   1(8,R3),8(R2)            MOVE JOBNAME TO TABLE\n         SPACE 1\n          AIF   (&@@SPLVL LT 200).XA03                             U006\n         $AMODE 31                                                 U006\n.XA03     ANOP                                                     U006\n         L     R15,X'90'(,R1)           FIND OUCB\n         TM    17(R15),X'80'            NON SWAPPABLE?\n         BZ    *+8\n         MVI   0(R3),C'$'\n         CLI   32(R2),C' '              CHECK FOR PRINTABLE\n         BNH   *+10\n         MVC   10(8,R3),32(R2)          MOVE IN PROCSTEP\n         CLI   64(R2),C' '              CHECK FOR PRINTABLE\n         BNH   *+10\n         MVC   19(8,R3),64(R2)          MOVE IN STEPNAME\n         SPACE 1\n         LH    R0,120(,R1)              ALLOC AUX SLOTS (VAM)\n         SLA   R0,2                     MULT BY 4 TO GET IT IN 'K'\n         CVD   R0,WOUBLE\n         MVC   27(7,R3),=X'4020206B202120'  EDIT MASK\n         ED    27(7,R3),WOUBLE+5      DO THE EDIT\n         MVI   34(R3),C'K'\n         LH    R0,122(,R1)              ALLOC AUX SLOTS (NON-VAM)\n         SLA   R0,2                     MULT BY 4 TO GET IT IN 'K'\n         CVD   R0,WOUBLE\n         MVC   35(7,R3),=X'4020206B202120'  EDIT MASK\n         ED    35(7,R3),WOUBLE+5      DO THE EDIT\n         MVI   42(R3),C'K'\n*        LH    R0,152(,R1)              REAL STORAGE IN USE\n         ICM   R15,15,52(R2)            CHECK FOR V=R\n         BZ    VIRTJOB\n         LR    R0,R15                   DISPLAY V=R SIZE\n         MVI   0(R3),C'='               SHOW V=R\n*IRTJOB  SLA   R0,2                     MULT BY 4 TO GET IT IN 'K'\nVIRTJOB  LM    R14,R15,48(R2)           PICK UP REGION SIZE\n         SRDL  R14,32                 MOVE TO ODD REGISTER\n         D     R14,=A(1024)            CONVERT TO K\n         CVD   R15,WOUBLE\n         MVC   44(7,R3),=X'4020206B202120'  EDIT MASK              U003\n         ED    44(7,R3),WOUBLE+5      DO THE EDIT                  U003\n         MVI   51(R3),C'K'                                         U003\n         LM    R14,R15,64(R1)           PICK UP CPU TIME\n*U007    SRDL  R14,24                   MOVE TO ODD REG\n*U007    M     R14,=A(1048576)          COMPUTE IN SECONDS\n*U007    D     R14,=A(10000*256)\n         SRDL  R14,12                   GET MICROSECONDS           U007\n         D     R14,=F'10000'            MAKE IT .01 SECONDS        U007\n         CVD   R15,WOUBLE\n         MVC   54(10,R3),=X'4020206B2021204B2020'                  U003\n         ED    54(10,R3),WOUBLE+4      DO THE EDIT                 U003\n         C     R15,=F'9999999'          DID IT FIT?                U007\n         BNH   *+4+6+6                  YES - CONTINUE             U007\n         MVC   54(10,R3),=X'40206B2020206B202120'                  U007\n         ED    54(10,R3),WOUBLE+3       AND DON'T SHOW HUNDREDTHS  U007\n*LDW1    MVI   64(R3),C'S'                                         U003\n         LM    R14,R15,200(R1)          PICK UP SRB TIME\n*U007    SRDL  R14,24                   MOVE TO ODD REG\n*U007    M     R14,=A(1048576)          COMPUTE IN SECONDS\n*U007    D     R14,=A(10000*256)\n         SRDL  R14,12                   GET MICROSECONDS           U007\n         D     R14,=F'10000'            MAKE IT .01 SECONDS        U007\n         CVD   R15,WOUBLE\n         MVC   64(10,R3),=X'4020206B2021204B2020'                  U003\n         ED    64(10,R3),WOUBLE+4      DO THE EDIT                 U003\n         C     R15,=F'9999999'          DID IT FIT?                U007\n         BNH   *+4+6+6                  YES - CONTINUE             U007\n         MVC   64(10,R3),=X'40206B2020206B202120'                  U007\n         ED    64(10,R3),WOUBLE+3       AND DON'T SHOW HUNDREDTHS  U007\n         MVI   64(R3),C'S'                                         U003\n         MVI   74(R3),C'S'                                         U003\n         UNPK  WOUBLE(3),43(2,R1)       CONVERT DPRTY TO HEX\n         TR    WOUBLE(2),TABHEX\n         MVC   76(2,R3),WOUBLE          MOVE FOR PRNTING           U003\n         SPACE 1\n          AIF   (&@@SPLVL LT 200).XA04                             U006\n         $AMODE 24                                                 U006\n.XA04     ANOP                                                     U006\n         BXLE  R3,R4,CSCBLOOP\n         TPUT  MSGOV,L'MSGOV\n         SPACE 2\nCSCBEND  CVD   R6,WOUBLE                NUM JOBS MSG\n         MVC   NUMJOBS(4),=X'40202120'\n         ED    NUMJOBS(4),WOUBLE+6\n         TPUT  NUMJOBS,LMSG\n         SPACE 2\n         LR    R5,R3                    SET END OF TABLE\n         L     R2,=V(TABLE)             SET START OF TABLE\n         LR    R6,R4                    FOR S0RT\n         LR    R7,R5\n         SR    R7,R6                    BACK UP ONE ENTRY\n         SR    R7,R6\n         LR    R8,R2                    SAVE FIRST ADDRESS\nS0RTLOOP CLC   1(8,R2),81(R2)           COMPARE TWO\n         BNH   S0RTBXLE\n         LR    R8,R2                    LAST SWAP\n         XC    0(80,R2),80(R2)\n         XC    80(80,R2),0(R2)\n         XC    0(80,R2),80(R2)\nS0RTBXLE BXLE  R2,R6,S0RTLOOP\n         LR    R7,R8                    SAVE LAST SWAP\n         L     R2,=V(TABLE)             REINIT\n         LR    R8,R2                    REINIT LAST SWAP\nCOMPARE  CR    R2,R7                    DONE?\n         BL    S0RTLOOP\n* OUTPUT THE DATA\n         SPACE 1\nBLNKLOOP CLC   =CL10' ',0(R2)           BLANK ENTRY?\n         BE    PRNTBXLE\nPRNTTPUT TPUT  (R2),(R4),R\nPRNTBXLE BXLE  R2,R4,BLNKLOOP\n         SPACE 1\n         L     R13,SAVEARE2+4\n         RETURN (14,12),RC=0\n         SPACE 1\nNUMJOBS  DC    X'40202120',C' ACTIVE JOBS            --VIO--'\n         DC    C' -SLOTS-  RGN SIZE    CPU TIME  SRB TIME PR'      U003\nLMSG     EQU   *-NUMJOBS\nMSGOV    DC    C'* TABLE OVERFLOW *'\nWOUBLE   DC    D'0'\n         SPACE 1\nTABHEX   EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\n         SPACE 3\n         LTORG\n         SPACE 1\n         TITLE 'USERS - TSO DISPLAY LOGGED ON USERS COMMAND'\nUSERS    CSECT\n         ENTRY CLEARREG,TABLE\n         SAVE  (14,12),T,USERS_TSO_COMMAND\n         USING USERS,R15\n         LA    R11,SAVEARE3\n         ST    R13,SAVEARE3+4\n         ST    R11,8(,R13)\n         LR    R13,R11\n         B     STAR3\n         DROP  R15\n         SPACE 2\nSAVEARE3 DC    18F'0'\n         SPACE 2\nSTAR3    DS    0H\n         USING SAVEARE3,R13\n         SPACE 2\n         LM    R6,R9,CLEARREG\n         MVCL  R6,R8                    CLEAR TABLE\n         SPACE 1\n         L     R1,16                    FIND CVT\n         L     R2,X'94'(,R1)            FIND BASEA (M.S.RES.DATA)\n         LA    R3,TABLE                 NAME TABLE\n         LA    R4,10                    BXLE INCREMENT\n         L     R5,=A(TABLE+LENTABLE)    BXLE END\n         SR    R6,R6                    COUNT OF USERS\nCSC8LOOP ICM   R2,15,0(R2)\n         BZ    CSC8END                  WHEN DONE\n         CLI   28(R2),1                 TSO USER ID?\n         BNE   CSC8LOOP\n         LA    R6,1(,R6)                BUMP USER COUNT\n         MVC   0(8,R3),8(R2)            MOVE USERID TO TABLE\n         BXLE  R3,R4,CSC8LOOP\n         TPUT  MSG0V,L'MSG0V\n         SPACE 2\nCSC8END  CVD   R6,D0UBLE                NUM USERS MSG\n         MVC   NUMUSERS(4),=X'40202020'\n         ED    NUMUSERS(4),D0UBLE+6\n         TPUT  NUMUSERS,LNSG\n         SPACE 2\n         LR    R5,R3                    SET END OF TABLE\n         LA    R2,TABLE                 SET START OF TABLE\n         LR    R6,R4                    FOR SORT\n         LR    R7,R5\n         SH    R7,=H'20'                BACK UP ONE ENTRY\n         LR    R8,R2                    SAVE FIRST ADDRESS\nSORTLOOP CLC   0(8,R2),10(R2)           COMPAIR TWO\n         BNH   SORTBXLE\n         LR    R8,R2                    LAST SWAP\n         XC    0(8,R2),10(R2)\n         XC    10(8,R2),0(R2)\n         XC    0(8,R2),10(R2)\nSORTBXLE BXLE  R2,R6,SORTLOOP\n         LR    R7,R8                    SAVE LAST SWAP\n         LA    R2,TABLE                 REINIT\n         LR    R8,R2                    REINIT LAST SWAP\nCOMPAIR  CR    R2,R7                    DONE?\n         BL    SORTLOOP\n         SPACE 2\n* SKIP FOR NON BLANK NAME\n         SPACE 1\nBLNKL00P CLI   0(R2),C' '\n         BNE   PRNTLOOP\n         BXLE  R2,R4,BLNKL00P\n         SPACE 1\n* OUTPUT NAMES\n         SPACE 1\nPRNTLOOP LR    R3,R5                    COMPUTE LENGTH\n         SR    R3,R2\n         BP    *+6                      IF ANSWER IS ZERO\n         LR    R3,R4                    ONLY 1 USER IS ON\n         TPUT  (2),(3),R\n         SPACE 1\n         L     R13,SAVEARE3+4\n         RETURN (14,12),RC=0\n         SPACE 1\nNUMUSERS DC    X'40202020',C' USERS LOGGED ON'\nLNSG     EQU   *-NUMUSERS\nMSG0V    DC    C'* TABLE OVERFLOW *'\nD0UBLE   DC    D'0'\n         SPACE 3\n         LTORG\n         SPACE 1\nCLEARREG DC    A(TABLE,2000),A(0),X'40000000'\nTABLE    DS    200CL10' '\nLENTABLE EQU   *-TABLE\n         TITLE 'PAGE - PAGE TABLE STAT DISPLAY SUBROUTINE '\nPAGE     CSECT\n         SAVE (14,12),T,PAGEFRAME\n         LR    R10,R15                  SET BASE\n         USING PAGE,R10                                            U004\n         LR    R9,R1\n         LA    R1,SAVE\n         ST    R1,8(R13)\n         ST    R13,4(R1)\n         LR    R13,R1\n         MVI   OUTLINE,C' '\n         MVC   OUTLINE+1(79),OUTLINE\n         MVC   OUTLINE+24(31),=C'* PAGE FRAME TABLE STATISTICS *'\n         TPUT  OUTLINE,L'OUTLINE\n         XC    NUC(LEN),NUC\n         L     R2,16\n         L     R2,X'164'(R2)            PVT\n         L     R3,12(R2)                PFT\n         LR    R4,R3\n         LH    R5,16(R2)                STARTING OFFSET\n         AH    R4,18(R2)                ENDING OFFSET\n         AR    R3,R5                    ADD STARTING OFFSET\n         SRL   R5,4                     DIVIDE BY 16 FOR PAGE COUNT\n         STH   R5,NUC                   PAGES OF NUC AND FIXED AREA\nL00P     CLI   14(R3),0                 AVAILABE FRAME\n         BNE   VR                       NO, TRY V=R\n         LH    R1,AVAIL\n         LA    R1,1(R1)\n         STH   R1,AVAIL\n         B     NEXT\nVR       TM    12(R3),2                 IS IT USED FOR V=R\n         BZ    BD                       NO, TEST FOR BAD FRAME\n         LH    R1,REAL\n         LA    R1,1(R1)\n         STH   R1,REAL\n         B     NEXT\nBD       TM    12(R3),4                 IS IT A BAD FRAME\n         BZ    FIX                      NO, TEST FOR LONG FIXED\nINCBAD   LH    R1,BAD\n         LA    R1,1(R1)\n         STH   R1,BAD\n         B     NEXT\nFIX      TM    12(R3),16                IS IT LONG FIXED\n         BZ    VIOTEST                  NO, TEST FOR SQA\n         LH    R1,LONG\n         LA    R1,1(R1)\n         STH   R1,LONG\nVIOTEST  TM    13(R3),X'10'             IS IT VIO\n         BZ    SQAREA                   NO, TEST FOR SQA\n         LH    R1,VIO\n         LA    R1,1(R1)\n         STH   R1,VIO\nSQAREA   CLI   14(R3),4                 IS IT RESERVED FOR SQA\n         BE    INCSQA                   YES, COUNT A PART OF SQA\n         CLI   14(R3),12                IS IT SQA\n         BNE   COM                      NO, TEST FOR LOCAL\nINCSQA   LH    R1,SQA\n         LA    R1,1(R1)\n         STH   R1,SQA\n         B     NEXT\nCOM      CLI   14(R3),8                 IS IT CSA\n         BNE   LOC                      NO, TEST FOR LOCAL\n         LH    R1,CSA\n         LA    R1,1(R1)\n         STH   R1,CSA\n         B     STL\nLOC      CLI   14(R3),X'80'             IS IT PROCGAMMER AREA\n         BNE   LOCSQA                   NO, TEST FOR LSQA\n         LH    R1,PGM\n         LA    R1,1(R1)\n         STH   R1,PGM\n         B     INCLOC\nLOCSQA   CLI   14(R3),X'84'             IS IT LSQA\n         BNE   XXX                      NO, CANT BE\n         LH    R1,LSQA\n         LA    R1,1(R1)\n         STH   R1,LSQA\nINCLOC   LH    R1,LOCAL\n         LA    R1,1(R1)\n         STH   R1,LOCAL\nSTL      CLC   8(2,R3),=X'0000'         IS IT FIXED AT ALL\n         BE    NEXT                     NO SKIP IT\n         TM    12(R3),16                ISIT LONG FIX\n         BO    NEXT                     YES, SKIP, WE WANT SHORT\n         LH    R1,SHORT\n         LA    R1,1(R1)\n         STH   R1,SHORT\n         B     NEXT\nXXX      NOP   0\nNEXT     LA    R3,16(R3)\n         CR    R3,R4                    WE AT END\n         BNH   L00P                     NO\n         LA    R3,VALUES\n         LA    R4,NUC\n         LA    R5,NAMES\nEACHLINE LA    R6,OUTLINE\n         LA    R2,4                     PER LINE\n         MVI   OUTLINE,C' '             BLANK\n         MVC   OUTLINE+1(79),OUTLINE    RIPPLE\nEACHVAL  MVC   0(9,R6),0(R5)  COPY NAME\n         LH    R7,0(R4)                 GET VALUE\n         SLL   R7,2\n         CVD   R7,CVWORK\n         MVC   9(7,R6),=X'4020206B202120'\n         ED    9(7,R6),CVWORK+5\n         MVI   16(R6),C'K'\n         LA    R4,2(R4)                 NEXT VALUE\n         LA    R5,9(R5)                 NEXT NAME\n         LA    R6,20(R6)                NEXT POSITION IN LINE\n         BCT   R3,BUMP\n         B     PUT\nBUMP     BCT   R2,EACHVAL\nPUT      TPUT  OUTLINE,80\n         LTR   R3,R3                    ANY MORE\n         BNZ   EACHLINE                 YES\nXIT      L     R13,4(R13)\n         RETURN (14,12),RC=0\n         EJECT\nSAVE     DS    18F\nCVWORK   DS    D\nNUC      DS    H\nAVAIL    DS    H\nBAD      DS    H\nSQA      DS    H\nCSA      DS    H\nREAL     DS    H\nLONG     DS    H\nVIO      DS    H\nLSQA     DS    H\nPGM      DS    H\nLOCAL    DS    H\nSHORT    DS    H\nLEN      EQU   *-NUC\nVALUES   EQU   12\nREPLY    DS    CL3\nOUTLINE  DS    CL80\nNAMES    DC    CL9'NUCLEUS'\n         DC    CL9'AVAILABLE'\n         DC    CL9'BAD PAGES'\n         DC    CL9'SQA'\n         DC    CL9'LPA/CSA'\n         DC    CL9'REAL'\n         DC    CL9'LONG FIX'\n         DC    CL9'VIO'\n         DC    CL9'LSQA'\n         DC    CL9'PROGRAM'\n         DC    CL9'LOCAL'\n         DC    CL9'SHORT FIX'\n         LTORG\n         SPACE 5\n*U006    IKJCVT\n         CVT   DSECT=YES                                           U006\n         SPACE 5\n         END   MS\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "OPERCMD": {"ttr": 10243, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x03\\x00\\x00\\x00\\x84\\x19?\\x00\\x92\\t\\x0f I\\x01\\xdb\\x018\\x00\\xb6\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.03", "flags": 0, "createdate": "1984-07-11T00:00:00", "modifydate": "1992-03-30T20:49:00", "lines": 475, "newlines": 312, "modlines": 182, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1987 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nOPERCMD  TITLE 'C O M M A N D  --  Issue System Operator Commands V2.1'\n***********************************************************************\n*                                                                     *\n*                           C O M M A N D                             *\n*                                                                     *\n*                   Issue System Operator Commands                    *\n*                                                                     *\n*                                                                     *\n*     This program accepts system or JES operator commands as         *\n*     input and executes them using SVC 34. It must be APF            *\n*     authorized.                                                     *\n*                                                                     *\n*     OPERCMD can operate in one of three modes:                      *\n*                                                                     *\n*     1) Batch or CALLed program                                      *\n*        In this mode OPERCMD accepts input as either 80-byte         *\n*        card images from SYSIN or a single command from the PARM     *\n*        field. The response to the operator command will             *\n*        appear on all operator consoles. For example:                *\n*                                                                     *\n*           //STEP1    EXEC PGM=OPERCMD,PARM='VARY 017,ONLINE'        *\n*                                                                     *\n*           - or -                                                    *\n*                                                                     *\n*           //STEP1    EXEC PGM=OPERCMD                               *\n*           //SYSIN    DD *                                           *\n*           VARY 017,ONLINE                                           *\n*           /*                                                        *\n*                                                                     *\n*     2) TSO Command Processor                                        *\n*        In this mode OPERCMD expects to find the operator command    *\n*        directly following on the TSO input line. The response to    *\n*        OS commands will then be displayed on the TSO terminal.      *\n*        Response to JES commands will appear on all consoles.        *\n*        For example:                                                 *\n*                                                                     *\n*           OPERCMD D T         <--- (Response will appear on CRT)    *\n*                                                                     *\n*     3) Callable subroutine                                          *\n*        In this mode OPERCMD accepts input according to standard     *\n*        OS linkage conventions. In addition to the command itself,   *\n*        a second parameter may be passed which contains the          *\n*        console number where you wish the response to appear.        *\n*        (The SVC 34 will also assume the authority of that           *\n*        console.) For example:                                       *\n*                                                                     *\n*           LA       R1,CMDADDR                                       *\n*           LA       R15,=V(OPERCMD)                                  *\n*           BALR     R14,R15                                          *\n*                                                                     *\n*           CMDADDR  DC    A(OPERCMD)                                 *\n*           CNSADDR  DC    XL1'80',AL3(CONSOLE)                       *\n*           OPERCMD  DC    H(3),CL3'D T'                              *\n*           CONSOLE  DC    F'5'                                       *\n*                                                                     *\n*        This would make it appear as if 'D T' were issued from       *\n*        console 5. (This method is used by program 'SPY')            *\n*                                                                     *\n*     Just prior to issuing a command via SVC 34, OPERCMD will        *\n*     issue a WTO of the form                                         *\n*                                                                     *\n*        *** jobname ==> VARY 017,ONLINE                              *\n*                                                                     *\n*     This will appear on the operator's console and in SYSLOG.       *\n*                                                                     *\n*     OPERCMD may be used to issue replies to WTORs. Since the        *\n*     reply may be sensitive (for example, a password) OPERCMD        *\n*     will suppress it whenever a REPLY is issued.                    *\n*                                                                     *\n*     Author:                                                         *\n*       The original version of OPERCMD was written by Mark Sorkin.   *\n*       The current version has been heavily modified at SCE.         *\n*       Questions and comments may be sent to                         *\n*                                                                     *\n*          Steve Langley                                              *\n*          Southern California Edison                                 *\n*          P.O. Box 800                                               *\n*          Rosemead, Calif. 91770                                     *\n*          1-213-572-3435                                             *\n*                                                                     *\n*  Updates:                                                           *\n*    29Jul87  LDW  Put conditional assembly around ACF2 stuff         *\n*                  Fix for XA                                         *\n*    12/13/84 LDW  Add '==DELAY==' input statement for 5 second dalay *\n*                  If TSO, check that user has \"OPER\" privilege       *\n*                  If STC, allow use                                  *\n*                  If JOB, check that user has \"OPER\" by looking at   *\n*                     the ACF2 LIDREC (if ACF2 not up, allow use)     *\n*                  Change all USING/DROP to USNGX/DROPX               *\n*    07/11/84 LDW  Rename from COMMAND to OPERCMD because we already  *\n*                     a TSO command called \"COMMAND\" (Also have a     *\n*                     program called OPERCMD, but this one's          *\n*                     upward compatible)                              *\n*                  Change format of WTOs                              *\n*                  Accept any LRECL input dataset (RECFM=FB)          *\n*                  Strip off sequence numbers only if last 8 chars    *\n*                     are all numeric                                 *\n*                  Do WTO after command, not before, in case there's  *\n*                     a system problem with the consoles (WTO may     *\n*                     hang)                                           *\n*                  Remove check for JES2 commands                     *\n*                  Misc other cleanup                                 *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  @GLOBALS\n         EJECT ,\nOPERCMD  CSECT\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2                        work\nR3       EQU   3                        work\nR4       EQU   4                        work\nR5       EQU   5                        input LRECL\nR10      EQU   10                       parameter list address\nR11      EQU   11                       subroutine linkage\nR12      EQU   12                       base\nR13      EQU   13                       save area address\nR14      EQU   14\nR15      EQU   15\n         EJECT\n         SAVE  (14,12),,OPERCMD_&SYSDATE_&SYSTIME  save caller's regs\n         LR    R12,R15                  establish\n         USNGX OPERCMD,R12              addressability\n         LA    R3,SAVEAREA              get our savearea address\n         ST    R13,SAVEAREA+4           establish back\n         ST    R3,8(,R13)               and forward savearea pointers\n         LR    R13,R3                   establish our savearea address\n         LR    R10,R1                   save parameter register\n         SPACE 2\n         L     R3,PSATNEW-PSA           -> our TCB\n         USNGX TCB,R3\n         L     R1,TCBTIO                -> TIOT\n         MVC   JOBNAME(8),TIOCNJOB-TIOT1(R1)  save our jobname\n         L     R4,PSAANEW-PSA           -> our ASCB\n         USNGX ASCB,R4\n         MVC   ASID,ASCBASID            save our ASID\n         L     R1,ASCBOUCB              -> OUCB\n         USNGX OUCB,R1\n         $AMODE  31\n         MVC   SAVEOUCB,OUCBYFL         save flag byte in 24 bit stor\n         $AMODE  24\n         TM    SAVEOUCB,OUCBSTT         STC?\n         BO    INITDONE                 Yes - allow use\n         TM    SAVEOUCB,OUCBLOG         TSO?\n         BNO   NOT$TSO                  No - see if \"OPER\"\n         SPACE 1\nCHK$PSCB ICM   R3,B'0111',TCBJSCB+1     -> JSCB\n         DROPX R3                       TCB\n         BZ    BOUNCE                   No JSCB???\n         ICM   R3,B'0111',JSCBPSCB+1-IEZJSCB(R3)  -> PSCB\n         BZ    BOUNCE                   No PSCB???\n         TM    PSCBATR1-PSCB(R3),PSCBCTRL  Operator?\n         BO    INITDONE                 Yes - allow use\n         B     BOUNCE                   No - fail it\n         SPACE 2\nNOT$TSO  CLC   ASCBJBNI,=F'0'           Any initiated jobname ptr?\n         BE    INITDONE                 no - must be STC, allow use\n         DROPX R4,R1                    ASCB, OUCB\n          AIF   (&@@ACF2 EQ 0).ACF201\n*  Batch - see if we can find an ACF2 LIDREC to check for OPERATOR auth\n         SPACE 1\n         ACFINCVT  R3,NONE=INITDONE\n         SPACE 1\n         USNGX ACCVT,R3\n         SPACE 1\n         ACFGUCB  R4,NONE=INITDONE,INLINE=YES,SYS=AOS2\n         SPACE 1\n         DROPX R3                       ACCVT\n         ICM   R3,B'1111',ACULRECP-ACUCB(R4)  -> LIDREC\n         BZ    INITDONE\n         TM    LIDTFLG3-LIDREC(R3),LIDT3OPR  Operator privilege?\n         BO    INITDONE                 Yes - allow use\n          AGO   .ACF202\n.ACF201   ANOP\n*  Batch - see if we can find a PSCB to check for OPERATOR auth\n         B     CHK$PSCB\n.ACF202   ANOP\n         SPACE 2\nBOUNCE   WTO   'OPERCMD - User not authorized',ROUTCDE=(2,11)\n         ABEND 2\n         SPACE 3\nINITDONE DS    0H                       check out input parm\n         TM    0(R10),X'80'             is first the only parm?\n         BO    ONEPARM                  yes; only parm\n         TM    4(R10),X'80'             is second the last parm?\n         BO    TWOPARMS                 yes; 2 parms (called with CNxx)\n***********************************************************************\n*                                                                     *\n*     A X'80' was not found in the high order byte of the first       *\n*     two parms, so we can assume command is being called as a CP.    *\n*     If the command being issued is not a JES command then           *\n*     place our ASID into the R0 mask and continue. If it is a        *\n*     JES command, simply issue the command (Mode 1).                 *\n*                                                                     *\n***********************************************************************\n         LH    R2,ASID                  ASID of caller\n         O     R2,=XL4'00008000'        tell SVC34 its an ASID\n         ST    R2,R0MASK                and override the R0 mask\n         L     R3,0(,R10)               -> input line\n         LA    R4,4(,R3)                -> first char of input\n         AH    R4,2(,R3)                -> first char past command\n         LH    R2,0(,R3)                total length of string\n         SH    R2,2(,R3)                length of oper cmd portion\n         SH    R2,=H'5'                 -1 for EX, -4 for buffer desc\n         BNP   USESYSIN                 operand missing - assume sysin\n         EX    R2,MOVE1                 move cmd into card\n*LDW*    CLI   CARD,C'$'                is this a JES2 cmd?\n*LDW*    BNE   DOSVC34                  no;  go do it\n*LDW*    XC    R0MASK(4),R0MASK         yes; don't try to get back rply\n         B     DOSVC34\n***********************************************************************\n*                                                                     *\n*     X'80' was found in the high order byte of the second parm,      *\n*     so we have been called as a subroutine (Mode 3). The second     *\n*     parm contains the console ID where the command is to 'come      *\n*     from', so use that for the UCMID.                               *\n*                                                                     *\n***********************************************************************\nTWOPARMS L     R3,4(,R10)               -> UCMID for SVC34\n         MVC   R0MASK(4),0(R3)          save R0 mask for SVC34\n***********************************************************************\n*                                                                     *\n*     Only one parm was passed, so we are being called in mode 1.     *\n*     Just issue the command from the parm string.                    *\n*                                                                     *\n***********************************************************************\nONEPARM  L     R10,0(,R10)              get parameter address\n         LH    R3,0(,R10)               get parameter text length\n         LTR   R3,R3                    is parameter text present?\n         BZ    USESYSIN                 no - go get commands from SYSIN\n         BCTR  R3,R0                    decrement R3 for use in execute\n         EX    R3,MOVE                  execute MVC\nDOSVC34  LA    R11,EOJ                  get addr for return from SVC34\n         B     SVC34                    go issue command\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*     No parm field found, so look at SYSIN for input                 *\n*                                                                     *\n***********************************************************************\nUSESYSIN OPEN  (SYSIN,INPUT)            open SYSIN\n         LH    R5,SYSIN+82              get LRECL\n         LTR   R5,R5                    positive?\n         BNP   BADLRECL                 no - die\n         CH    R5,=H'121'               too long?\n         BH    BADLRECL                 yes - die\nGETSYSIN GET   SYSIN,CARD               get a SYSIN rec into SVC34 list\n*LDW*    MVC   CARD+72(8),CARD+80       blank out seq field in 73-80\n         LA    R1,CARD                  -> start of input stmt\n         AR    R1,R5                    -> past end of stmt\n         SH    R1,=H'8'                 back up to possible seq number\n         MVC   WORK(8),0(R1)            copy last 8 chars of stmt\n         NC    WORK(8),=C'00000000'     strip off digit nibbles\n         CLC   WORK(8),=C'00000000'     was it all numeric?\n         BNE   *+10                     no - leave it asis\n         MVC   0(8,R1),=CL8' '          yes - remove sequence number\n         CLI   CARD,C'*'                is this a comment?\n         BE    GETSYSIN                 yes; go get another card\n         CLC   =C'==DELAY==',CARD       want to wait 5 seconds?\n         BE    DELAY                    yes - go do it\n*LDW*    CLC   CARD(2),=C'/*'           is this a '/* $xx' card?\n*LDW*    BNE   NOSLASHS                 no;  no slashes\n*LDW*    MVC   CARD(78),CARD+2          yes; shift over '/*'\nNOSLASHS LA    R11,GETSYSIN             get addr for return from SVC34\n         B     SVC34                    go issue command\n         SPACE 3\nDELAY    LA    R0,500                   set default delay = 5 seconds\n         CLC   CARD+9(5),=CL8' '        any operand?\n         BE    STIMER                   no - use default\n         PACK  DWD,CARD+9(5)            pack the 5 digit operand\n         CVB   R0,DWD                   get operand in binary\n         SPACE 1\nSTIMER   ST    R0,DWD                   set down for STIMER\n         STIMER  WAIT,BINTVL=DWD        wait a bit\n         B     GETSYSIN                 read next card\n         SPACE 3\nEODSYSIN CLOSE (SYSIN)                  close SYSIN\n         SPACE 3\nEOJ      L     R13,SAVEAREA+4           -> caller's savearea\n         RETURN (14,12),RC=0            return to caller\n         SPACE 3\nBADLRECL WTO   'OPERCMD - Invalid input LRECL',ROUTCDE=(2,11)\n         SPACE 1\n         ABEND 1,DUMP\n         EJECT\n***********************************************************************\n*                                                                     *\n*     This routine actually issues the SVC 34. It either returns      *\n*     to the SYSIN-read loop or EOJ depending on the value of R11     *\n*                                                                     *\n***********************************************************************\nSVC34    MVC   WTOTEXT(121),CARD        move command text into WTO list\n         CLC   =C'r ',WTOTEXT           is this a lower case reply?\n         BE    REPLY                    no; go on\n         CLC   =C'reply ',WTOTEXT       is this a lower case reply?\n         BE    REPLY                    no; go on\n         CLC   =C'R ',WTOTEXT           is this an upper case reply?\n         BE    REPLY                    no; go on\n         CLC   =C'REPLY ',WTOTEXT       is this an upper case reply?\n         BE    REPLY                    no; go on\n         CLI   WTOTEXT,X'F0'            start with a number?\n         BL    NOTREPLY                 no; can't be a reply\nREPLY    MVC   WTOTEXT(121),=CL121'Reply Suppressed by ''OPERCMD'''\nNOTREPLY LA    R3,WTOTEXT+L'WTOTEXT-1   point to end of text\n         LA    R4,WTOTEXT               point to beginning of text\n         SPACE\nFINDTEXT DS    0H                       find last text character\n         CR    R3,R4                    all blank?\n         BL    SVC34END                 yes - ignore it\n         CLI   0(R3),C' '               blank character?\n         BNE   GOTTEXT                  no - found end of text\n         BCT   R3,FINDTEXT              keep on looking\n         SPACE\nGOTTEXT  DS    0H                       build parameter list lengths\n         MVC   WTOUSER(8),JOBNAME       put job name in message\n         SR    R3,R4                    compute length of\n         LA    R3,4+1(,R3)              text and list prefix\n         STH   R3,CMDLIST               set SVC 34 list length\n         LA    R3,L'WTOID+L'WTOUSER(,R3)  add WTO id length\n         STH   R3,WTOLEN                set WTO list length\n         MODESET KEY=ZERO               indicate key=zero\n         L     R0,R0MASK                UCMID for SVC34 (probably 0)\n         LA    R1,CMDLIST               -> SVC 34 list\n         SVC   34                       issue SVC 34 to process command\n         WTO   MF=(E,WTOLIST)           echo cmd to operator via WTO\n         MODESET KEY=NZERO              go back to user key\n         SPACE\nSVC34END DS    0H                       end of command routine\n         BR    R11                      return to mainline\n         EJECT\nSAVEAREA DC    18F'0'                   our savearea\nR0MASK   DC    A(0)                     R0 mask for SVC34\nJOBNAME  DC    CL8' '                   our jobname\nWORK     DC    CL8' '                   work area\nDWD      DC    D'0'                     for CVB\nASID     DC    H'00'                    our ASID\nSAVEOUCB DC    X'00'                    save for OUCBYFL\n         SPACE\nWTOLIST  DC    0F'0'                    WTO list\nWTOLEN   DC    AL2(*-*,0)               text length & MCS flags\nWTOID    DC    C'*** '                  TEXT IDENTIFIER\nWTOUSER  DC    C'XXXXXXXX ==> '         caller's jobname\nWTOTEXT  DC    CL121' '                 text passed to cmd processor\n         SPACE\n         CNOP  4,8                      align to middle of double word\nCMDLIST  DC    Y(*-*,0)                 SVC 34 list\nCARD     DC    CL121' '                 command text\n         SPACE 3\nMOVE     MVC   CARD(*-*),2(R10)         move parm text into SVC 34 list\nMOVE1    MVC   CARD(*-*),0(R4)          move parm text into SVC 34 list\n         SPACE 3\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GM),RECFM=FB,EODAD=EODSYSIN\n         SPACE 3\n         LTORG ,                        begin literal pool\n         EJECT\n***********************************************************************\n*                                                                     *\n*                System Control Block Mapping DSECTs                  *\n*                                                                     *\n*      All these macros can be found in the 'SYS1.AMODGEN' maclib     *\n*                                                                     *\n***********************************************************************\n         PRINT NOGEN\n         IHAPSA\n         SPACE 2\n         CVT   DSECT=YES\n         SPACE 2\n         DSECT\n         IEFTIOT1                       TASK I/O Table\n         SPACE 2\n         IHAASCB                        ADDRESS Space Control Block\n         SPACE 2\n         IRAOUCB                        SRM User Control Block\n         SPACE 2\n         IKJTCB                         TASK Control Block\n         SPACE 2\n         IEZJSCB                        JOB Step Control Block\n         SPACE 2\n         IKJPSCB                        PROTECTED Step Control Block\n         SPACE 2\n          AIF   (&@@ACF2 EQ 0).ACF299\n         ACCVT                          ACF2 CVT\n         SPACE 2\n         ACFASVT                        ACF2 ASVT\n         SPACE 2\n         ACUCB                          ACF2 User Control Block\n         SPACE 2\n         LIDREC                         ACF2 Logonid Record\n.ACF299   ANOP\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RELEASE": {"ttr": 10251, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1c\\x00\\x00\\x00y\\x07\\x9f\\x00\\x88\\x11_\"\\x14\\x06\\'\\x07\\x0f\\x06%\\xc5\\xd4\\xe2@@@@@@@'", "ispf": {"version": "01.28", "flags": 0, "createdate": "1979-03-20T00:00:00", "modifydate": "1988-04-24T22:14:00", "lines": 1575, "newlines": 1807, "modlines": 1573, "user": "EMS"}, "text": "RELEASE  TITLE 'TSO DATA SET SPACE RELEASE COMMAND'\n*---------------------------------------------------------------------*\n*                                                                     *\n* TITLE -      TSO DATA SET SPACE RELEASE COMMAND                     *\n*                                                                     *\n* FUNCTION -   PROVIDE THE ABILITY FOR A TSO USER TO RELEASE UNUSED   *\n*              SPACE IN A DATA SET, OR A SERIES OF DATA SETS.         *\n*                                                                     *\n* OPERATION -  ACCEPT FROM THE TSO USER A COMMAND STRING CONTAINING   *\n*              THE NAME(S) OF THE DATA SETS TO BE PROCESSED. OPEN     *\n*              EACH DATA SET WITH DISP=MOD, THEN CLOSE THE DATA SET.  *\n*                                                                     *\n* INPUT -      STANDARD COMMAND PROCESSOR PARAMETER LIST POINTED TO   *\n*              BY REGISTER 1                                          *\n*                                                                     *\n* OUTPUT -     UNUSED SPACE RELEASED IN THE REQUESTED DATA SETS.      *\n*                                                                     *\n* ATTRIBUTES - REENTRANT, REUSEABLE, REFRESHABLE.                     *\n*                                                                     *\n* UPDATES -                                                           *\n*  24Apr88 U010 EMS  fix for asmh under mvs/xa.                       *\n*  28Aug87 U009 SDM  Use USID to generate fully qualified DSNAME.     *\n*  06Aug87 U008 SDM  Fix VERDSN routine 0C4 bug found under MVS/XA.   *\n*                    Initialize all 8 characters of DA08SER for XA.   *\n*                    Call DAIRFAIL to report DAIR return codes.       *\n*  20OCT81 U007 SDM  FIX BUG WHEN RELEASE BYPASSED FOR KEEP TOO BIG   *\n*  06AUG80 U006 SDM  ELIMINATE SPACE REQUEST IN JFCB TO FIX NON-CYL   *\n*                       RELEASE BUG                                   *\n*  09JUN80 U005 SDM  1) ELIMINATE 'CLEAR' MACRO                       *\n*                    2) ADD LTORG RIGHT AFTER CODE                    *\n*                    3) USE MVS MACRO FOR JFCB                        *\n*                    4) SHORTEN PROMPT MESSAGE FOR NON-CYL RELEASE    *\n*                    5) ELIMINATE CYLINDER BOUNDARY TEST              *\n*                    6) ELIMINATE SECOND DCB                          *\n*                    7) DETERMINE FINAL SIZE BY OPENING FILE AGAIN    *\n*                    8) USE OBTAIN TO DETERMINE ORIGINAL ALLOC TYPE   *\n*  01JUN79 U004 SDM  1) ELIMINATE 'TPUTX' MACRO                       *\n*                    2) IMPROVE 'CLEAR' MACRO CODE                    *\n*  31MAY79 U003 LDW  MVS UPDATES FROM MIC'S VERSION                   *\n*  08FEB79 U002 JCJ  1) DE-ALLOCATE DATASETS AS WELL AS DDNAMES.      *\n*                    2) ADD 'PDS/NOPDS' KEYWORDS (DEFAULT 'PDS') TO   *\n*                       ALLOW/INHIBIT RELEASE OF DSORG=PO DATASETS.   *\n*                    3) FIX ANCIENT DE-ALLOCATION/CLOSE BUG.          *\n*  03OCT78 U001 JCJ  RELEASE DATASETS ALLOCATED CYLINDER ON A         *\n*                    CYLINDER (NOT TRACK) BOUNDARY; IF USE OF A       *\n*                    PARTIAL SPACE REQUEST WILL RELEASE TO A NON-CYL  *\n*                    BOUNDARY, ASK IF RELEASE SHOULD BE PERFORMED.    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n         MACRO\n&NAME    ENTER &TYPE\n         AIF   ('&TYPE' NE '').A1\n&NAME    CSECT\n         SPACE 2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nWORKREG  EQU   10\nBASEREG1 EQU   11\nBASEREG2 EQU   12\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 5\n         SAVE  (14,12),,&NAME._&SYSDATE._&SYSTIME                  u010\n         LR    BASEREG1,R15\n         LA    BASEREG2,4095(BASEREG1)\n         LA    BASEREG2,1(BASEREG2)\n         USING &NAME,BASEREG1,BASEREG2\n         B     IHB&SYSNDX\n         DC    C'COPYRIGHT 1972 BY FIREMAN''S FUND INSURANCE'\n         DC    C'COPYRIGHT 1973 BY SECURITY PACIFIC NATIONAL BANK'\nIHB&SYSNDX DS  0H\n         SPACE 2\n         MEXIT\n.A1      AIF   ('&TYPE' NE 'VALCHECK').A2\n&NAME    SAVE  (14,12)\n         L     WORKREG,4(1)   WORK AREA ADDRESS\n         LM    BASEREG1,BASEREG2,BASES RESTORE BASE REGISTERS\n         L     R9,0(1)       PDE ADDRESS\n         LA    R15,VALSAVE\n         ST    R13,4(R15)\n         ST    R15,8(R13)\n         LR    R13,R15\n         SPACE 3\n         MEXIT\n.A2      ANOP\n         MNOTE 8,'INVALID TYPE ''&TYPE'''\n         MEND\n         SPACE 2\n         MACRO\n&NAME    EXIT  &LV=\n&NAME    DS    0H\n         AIF   ('&LV' EQ '').A1\n         LR    R2,R13         ADDR OF THIS SAVE AREA\n.A1      L     R13,4(R13)\n         STM   R15,R1,16(R13) RETURN REGS 15, 0, 1\n         AIF   ('&LV' EQ '').A2 NOT DYNAMIC CORE\n         FREEMAIN R,LV=&LV,A=(R2)\n.A2      SPACE 1\n         RETURN (14,12),T\n         MEND\n         SPACE 2\n         MACRO\n&NAME    MSG   &TEXT\n         LCLA  &A\n&A       SETA  K'&TEXT-2+4\n&NAME    DC    H'&A',H'0',C&TEXT\n         MEND\n         EJECT\nRELEASE  ENTER\n         LR    R2,R1          SAVE ADDR OF CPPL\n         SPACE 1\n         L     R3,CORESIZE\n         GETMAIN R,LV=(R3)\n         SPACE 2\n         LR    WORKREG,R1     ADDR OF WORK AREA\n         USING WORKAREA,WORKREG\n         EJECT\n*\n*        CLEAR WORK AREA\n*\n         LR    R4,WORKREG     POINT TO WORKAREA                    U003\n         LA    R5,0(,R3)      LOAD ITS LENGTH                      U003\n         SR    R6,R6          ZERO REG 6                           U003\n         SR    R7,R7          ZERO REG 7                           U003\n         MVCL  R4,R6          CLEAR WORK AREA                      U003\n         SPACE 2\n         STM   BASEREG1,BASEREG2,BASES SAVE BASE ADDRESSES\n         SPACE 2\n         LA    R15,MAINSAVE\n         ST    R15,8(R13)\n         ST    R13,4(R15)\n         LR    R13,R15\n         MVI   OPENLIST,X'80'                                      U003\n         EJECT\n*\n*        LOAD TSO SERVICE ROUTINES\n*\n         LOAD  EPLOC==CL8'IKJEHCIR'                                U003\n         ST    R0,ADDRCIR\n         SPACE 3\n*                                                                  U003\n*        SAVE CPPL ADDRESSES                                       U003\n*                                                                  U003\n         SPACE 3\n         USING CPPL,R2        BASE FOR COMMAND PARM LIST           U003\n         MVC   ADDRUPT,CPPLUPT ADDR OF USER PROFILE TABLE          U003\n         MVC   ADDRPSCB,CPPLPSCB                                   U003\n         MVC   ADDRECT,CPPLECT ADDR OF ENVIROMENT TABLE            U003\n         MVC   ADDRCBUF,CPPLCBUF                                   U003\n         DROP  R2                                                  U003\n         EJECT\n*\n*        BUILD PARSE PARAMETER LIST AND INVOKE\n*        IKJPARS TO ANALYZE COMMAND OPERANDS\n*\n         SPACE 3\n         LA    R1,PARSELST    AREA FOR PARSE PARAMETERS\n         USING PPL,R1         BASE FOR PARSE PARAMETER LIST\n         SPACE 2\n         MVC   PPLUPT,ADDRUPT PASS UPT ADDRESS\n         MVC   PPLECT,ADDRECT AND ECT ADDRESS\n         MVC   PPLCBUF,ADDRCBUF AND COMMAND BUFFER ADDR\n         SPACE 1\n         ST    WORKREG,PPLUWA ALSO WORK AREA ADDR FOR VALIDITY EXITS\n         SPACE 1\n         LA    R0,ATTNECB     ECB FOR ATTN INTERRUPTS\n         MVI   ATTNECB,0      CLEAR ECB\n         ST    R0,PPLECB      PASSE TO PARSE\n         SPACE 1\n         LA    R0,ADDRANSR    PASS ADDR OF WORD WHERE PARSE\n         ST    R0,PPLANS      RETURNS PDL ADDRESS\n         SPACE 1\n         MVC   PPLPCL,ADDRPCL STORE PCL ADDRESS\n         SPACE 3\n         CALLTSSR EP=IKJPARS  INVOKE PARSE                         U003\n         DROP  R1\n         SPACE 2\n         LA    R14,MAXPARSE   RETURN CODE LIMIT\n         SPACE 1\n         CR    R15,R14        VERIFY RETURN CODE WITHIN LIMITS\n         BH    PARSEBAD       NO, ERROR\n         SPACE 1\n         B     *+4(R15)       PROCESS RETURN CODE\n         SPACE 1\nPARSERET B     PARSEOK         0- SUCESSFUL\n         B     ERROROUT        4- PARSE UNABLE TO PROMPT\n         B     ERROROUT        8- USER ENTERED ATTENTION\n         B     PARSEBAD       12- INVALID PARAMETERS\n         B     PARSEBAD       16- PARSE INTERNAL FAILURE\n         B     ERROROUT       20 - VALIDITY CHECK ERROR\nMAXPARSE EQU   *-PARSERET\n         SPACE 5\nPARSEBAD DS    0H\n         MVC   MSGTEXT2+4(L'MSGPARSE),MSGPARSE\n         LA    R1,MSGTEXT2+4+L'MSGPARSE\n         SPACE 1\n         CVD   R15,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  0(2,R1),DOUBLE\n         SPACE 1\n         LA    R0,MSGTEXT2-2\n         SR    R1,R0\n         SLL   R1,16\n         ST    R1,MSGTEXT2\n         SPACE 2\n         LA    R0,MSGTEXT2    PUT OUT 'COMMAND ERROR' MSG\n         LA    R1,MSGCMDER\n         SPACE 1\n         BAL   R14,ERRORMSG\n         SPACE 3\nEXIT12   DS    0H\nERROROUT LA    R15,12         ERROR CODE 12 - COMMAND FAILED\n         B     RETURN\n         SPACE 1\nEXIT0    SR    R15,R15\n         SPACE 3\nRETURN   LTR   R2,R15         NORMAL EXIT?\n         BZ    RETURN1        YES\n         SPACE 2\n         LA    R1,PARMLIST    AREA FOR STACK PARM LIST\n         USING IOPL,R1\n         SPACE 1\n         MVC   IOPLUPT,ADDRUPT\n         MVC   IOPLECT,ADDRECT\n         LA    R0,ATTNECB\n         MVI   ATTNECB,0\n         ST    R0,IOPLECB\n         SPACE 2\n         STACK PARM=PARMLIST+16,DELETE=ALL,MF=(E,(1))\n         SPACE 3\n         TCLEARQ INPUT        CLEAR INPUT BUFFERS\n         SPACE 3\nRETURN1  DS    0H\n         BAL   R14,FREEPDL    FREE THE PARSE STROAGE\n         SPACE 3\n         LR    R15,R2         RESTORE RETURN CODE\n         SPACE 1\n         L     R0,CORESIZE\n         SPACE 1\n         EXIT  LV=(0)\n         EJECT\nPARSEOK  DS    0H\n         L     R9,ADDRANSR    ADDR OF PARSE DESCRIPTOR LIST\n         USING PDL,R9         RETURNED BY PARSE\n         SPACE 2\n*  ----  CHECK IF DSORG=PO DATASETS ARE TO BE RELEASED.            U002\n         SPACE 2\n         CLI   OPTPDS+1,OPTPDS#N 'NOPDS' SPECIFIED?                U002\n         BNE   DO#PDS         NO - CONTINUE                        U002\n         SPACE 2\n         OI    FLAGS2,FNOPDS  FLAG NO RELEASE ON DSORG=PO DATASETS U002\n*U004    TPUTX 'PARTITIONED DATASETS WILL NOT BE RELEASED'         U002\n         LA    R1,MSGNOPDS    NO PDS'S NEED APPLY                  U004\n         SR    R0,R0          NO SECOND LEVEL MESSAGE              U004\n         BAL   R14,ERRORMSG   USE PUTLINE TO WRITE THE MESSAGE     U004\n         SPACE 2\nDO#PDS   EQU   *                                                   U002\n         SPACE 2\n         LA    R2,OPTDSN      ADDR OF DSNAME PDL\n         SPACE 3\nNEXTPDL  DS    0H\n         NI    FLAGS,X'FF'-FMATCH-FCVOL CLEAR DATA SET FOUND FLAGS\n         SPACE 2\n         MVC   DSNAME,SPACES                                       U005\n         SPACE 1\n         L     R15,0(R2)      MOVE DSNAME TO AREA\n         LH    R14,4(R2)\n         STH   R14,DSNLEN\n         BCTR  R14,0\n         MVC   DSNAME(0),0(R15)\n         EX    R14,*-6\n         SPACE 1\n         MVC   PASSWORD,SPACES                                     U005\n         TM    22(R2),X'80'   PASSWORD SUPPLIED?\n         BZ    NOPASS         NO\n         SPACE 1\n         L     R15,16(R2)\n         LH    R14,20(R2)\n         BCTR  R14,0\n         MVC   PASSWORD(0),0(R15)\n         EX    R14,*-6\nNOPASS   DS    0H\n         SPACE 2\n         BAL   R14,INDXSCAN   DETERMINE IF PATTERN INDEX SPECIFIED\n         B     NOPATTRN       00-SYNTAX ERROR\n         B     NOPATTRN       04-NOT PATTERN FORMAT\n*                             08-DSN IS PATTERN\n         EJECT\n*\n         SPACE 1\n         MVC   PATTERN,SPACES CLEAR PATTERN AREA                   U005\n         SPACE 2\n*\n*        PROCESS REQUEST BY INDEX LEVEL(S)\n*\n         SPACE 2\n         SR    R5,R5          ZERO CIR BLOCK ADDR\n         SR    R3,R3          ZERO INDEX LEVEL COUNTER\n         LA    R4,PATTERN-1\n         SPACE 2\n         BAL   R14,PUSHCIR    GET ANOTHER CIR BLOCK\n         USING CIRBLOCK,R5\n         SPACE 2\nNEXTLVL  DS    0H\n         NI    CIRFLAGS,X'FF'-FLINDEX\n         LA    R0,1(R3)       JUMP INDEX COUNTER\n         CH    R0,INDEXCNT    CHECK FOR END OF SCAN\n         BH    FINDDS         YES, END OF THIS LEVEL\n         BL    NOTLAST\n         OI    CIRFLAGS,FLINDEX  INDICATE LAST INDEX LEVEL\nNOTLAST  DS    0H\n         SPACE 1\n         LR    R14,R3\n         LA    R15,10\n         LR    R3,R0\n         MR    R14,R14       OFFSET OF INDEX NAME\n         LA    R15,INDXLIST(R15)\n         LH    R14,0(R15)\n         LTR   R14,R14        PATTERN LEVEL?\n         BZ    ANYINDEX       YES\n         SPACE 1\n         LA    R0,1(R4,R14)   END OF DSNAME\n         LA    R1,PATTERN+L'PATTERN\n         CR    R0,R1\n         BH    INDXERR\n         SPACE 1\n         BCTR  R14,0\n         MVI   0(R4),C'.'\n         MVC   1(,R4),2(R15)\n         EX    R14,*-6\n         LA    R4,2(R4,R14)   JUMP DSNAME POINTER\n         TM    CIRFLAGS,FLINDEX\n         BO    FINDDS\n         B     NEXTLVL\n         SPACE 1\nANYINDEX DS    0H\n         BAL   R14,PUSHCIR    NEXT WORK BLOCK\n         SPACE 1\n         MVC   DSNAME,SPACES                                       U005\n         SPACE 1\n         LR    R15,R4\n         LA    R0,PATTERN\n         SR    R15,R0\n         STH   R15,DSNLEN\n         SPACE 1\n         BCTR  R15,0\n         MVC   DSNAME(0),PATTERN\n         EX    R15,*-6\n         SPACE 2\nSCANBLK  DS    0H\n         TM    CIRFLAGS,FLINDEX  AT END OF NAME?\n         BO    ENDLEVEL       YES, LOCATE BY DSNAME\n         LA    R0,#INDEX      LOCATE BY INDEX\n#INDEX   EQU   X'02'\n         SPACE 1\n         LA    R15,CIRDATA\n         ST    R15,PTRENTRY\n         BAL   R14,CALLCIR    LOCATE CIR INFORMATION\n         LTR   R15,R15        SUCCESSFUL?\n         BNZ   LASTINDX\n         L     R1,PTRENTRY\n         SPACE 2\nNXTINDEX DS    0H\n         L     R1,PTRENTRY\n         TM    CIRFLAGS,FLINDEX\n         LA    R15,ID#INDEX\n         BZ    *+8\n         LA    R15,ID#DSN\n         SPACE 1\n         CLI   0(R1),0\n         EX    R15,*-4\nID#INDEX EQU   X'00'\nID#DSN   EQU   X'07'\n         BNE   NXTENTRY       NO, GET NEXT ENTRY\n         SPACE 2\n         LA    R14,1(R1)\n         LA    R1,8(R1)       SCAN FOR END OF INDEX\n         CLI   0(R1),C' '\n         BNE   *+8\n         BCT   R1,*-8\n         SPACE 1\n         SR    R1,R14         LENGTH OF INDEX\n         BM    INDXERR\n         SPACE 1\n         LA    R0,2(R4,R1)    END OF NAME\n         LA    R15,PATTERN+L'PATTERN\n         CR    R0,R15\n         BH    INDXERR\n         SPACE 1\n         MVC   1(,R4),0(R14)\n         EX    R1,*-6\n         SPACE 1\n         MVI   0(R4),C'.'\n         LA    R4,2(R1,R4)\n         SPACE 1\n         TM    CIRFLAGS,FLINDEX\n         BO    RLSETHIS\n         SPACE 2\n         B     NEXTLVL        SCAN NEXT LEVEL\n         SPACE 3\nINDXERR  DS    0H\nNXTENTRY DS    0H\n         L     R1,PTRENTRY\n         LH    R3,CNTINDEX\n         L     R4,PTRINDEX\n         CLI   0(R1),X'FF'    END OF CURRENT BLOCK?\n         BE    ENDBLOCK       YES\n         SPACE 1\n         CLI   0(R1),X'00'    INDEX ENTRY\n         LA    R0,12\n         BE    UPENTRY\n         CLI   0(R1),X'07'    DSNAME ENTRY?\n         LA    R0,9\n         BE    UPENTRY\n         CLI   0(R1),X'02'\n         LA    R0,16\n         BE    UPENTRY\n         SPACE 3\nCIRERROR EX    0,*\n         SPACE 2\nUPENTRY  DS    0H\n         AR    R1,R0\n         ST    R1,PTRENTRY    SAVE NEW ENTRY POINTER\n         SPACE 1\n         B     NXTINDEX\n         SPACE 2\nENDBLOCK DS    0H\n         OC    1(3,R1),1(R1)  END OF CHAIN?\n         BZ    LASTINDX       YES\n         SPACE 1\n         MVC   TTR,1(R1)      NO, TTR OF NEXT BLOCK\n         MVC   CVOL,4(R1)     ALSO CVOL NAME\n         OI    FLAGS,FTTR+FCVOL INDICATE LOCATE BY TTR\n         SPACE 1\n         B     SCANBLK        SCAN NEW BLOCK\n         SPACE 3\nLASTINDX DS    0H\n         BAL   R14,POPCIR     POP BACK ONE BLOCK\n         B     ENDCHAIN       IF AT END OF CHAIN\nDOWNINDX DS    0H\n         B     NXTENTRY\n         SPACE 3\nENDLEVEL DS    0H\n         LA    R0,#DATASET    LOCATE BY DATA SET\n#DATASET EQU   X'01'\n         LA    R15,CIRDATA\n         ST    R15,PTRENTRY\n         BAL   R14,CALLCIR    LOCATE\n         SPACE 2\n         LTR   R15,R15        DATA SET PRESENT?\n         BNZ   DOWNINDX\n         SPACE 2\n         B     NXTINDEX\n         SPACE 3\nRLSETHIS DS    0H\n         LR    R15,R4\n         LA    R1,PATTERN\n         SR    R15,R1\n         SPACE 2\n         MVC   DSNAME,SPACES                                       U005\n         SPACE 1\n         STH   R15,DSNLEN\n         BCTR  R15,0\n         MVC   DSNAME(0),PATTERN\n         EX    R15,*-6\n         SPACE 2\n         BAL   R14,RLSEDS     RELEASE SPACE IN THIS DATA SET\n         SPACE 1\n         B     NXTENTRY\n         SPACE 5\nFINDDS   DS    0H\n         LR    R15,R4\n         LA    R0,PATTERN\n         SR    R15,R0\n         STH   R15,DSNLEN\n         SPACE 1\n         MVC   DSNAME,SPACES                                       U005\n         SPACE 1\n         BCTR  R15,0\n         MVC   DSNAME(0),PATTERN\n         EX    R15,*-6\n         SPACE 2\n         NI    CIRFLAGS,X'FF'-FLINDEX\n         LA    R0,#VOLUMES    LOCATE BY VOLUME\n#VOLUMES EQU   X'04'\n         LA    R15,BUFFER\n         BAL   R14,CALLCIR\n         SPACE 1\n         LTR   R15,R15\n         BNZ   NXTENTRY\n         B     RLSETHIS\n         EJECT\n*\n*        PUSH DOWN STACK FOR NEW INDEX LEVEL\n*\n         SPACE 2\nPUSHCIR  DS    0H\n         ST    R14,R14SAVE\n         SPACE 1\n         L     R1,BLOCKPTR    FREE BLOCK?\n         LTR   R1,R1          YES, USE IT\n         BNZ   PUSHCIR1\n         SPACE 1\n         GETMAIN R,LV=SIZECIR\n         SPACE 1\n         XC    0(LENCIR,R1),0(R1)\n         SPACE 2\nPUSHCIR1 DS    0H\n         LR    R14,R5         SAVE ADDR OF LAST CIR BLOCK\n         LR    R5,R1          ADDRESS OF NEW CIR BLOCK\n         L     R15,CIRCHAIN\n         ST    R15,BLOCKPTR\n         XC    CIRBLOCK(LENCIR),CIRBLOCK\n         ST    R14,CIRCHAIN   SAVE POINTER TO PREVIOUS BLOCK\n         SPACE 1\n         ST    R4,PTRINDEX    SAVE CURRENT INDEX LEVEL ADDRESS\n         STH   R3,CNTINDEX    SAVE INDEX LEVEL COUNTER\n         MVC   CIRFLAGS,CIRFLAGS-CIRBLOCK(R14) SAVE PREVIOUS FLAGS\n         SPACE 1\n         L     R14,R14SAVE\n         BR    R14\n         SPACE 5\n*\n*        POP THE STACK UP ONE LEVEL\n*\n         SPACE 2\nPOPCIR   DS    0H\n         L     R0,CIRCHAIN    PREVIOUS CIR POINTER\n         MVC   CIRCHAIN,BLOCKPTR\n         ST    R5,BLOCKPTR\n         SPACE 2\n         LR    R5,R0\n         SPACE 1\n         NI    CIRFLAGS,X'FF'-FLINDEX\n         L     R1,PTRENTRY    RESTORE ENTRY POINTER\n         L     R4,PTRINDEX    RESTORE INDEX POINTER\n         LH    R3,CNTINDEX    RESTORE INDEX COUNTER\n         OC    CIRCHAIN,CIRCHAIN END OF STACK?\n         BCR   8,R14          YES, EXIT\n         SPACE 2\n         B     4(,R14)\n         EJECT\n*\n*        CATALOG INFORMATION ROUTINE INTERFACE SUBROUTINE\n*\n         SPACE 2\nCALLCIR  DS    0H\n         ST    R14,R14SAVE\n         SPACE 1\n         LA    R1,CIRPARMS\n         USING CIRPARM,R1\n         XC    0(LCIRPARM,R1),0(R1)\n         SPACE 1\n         STC   R0,CIROPT      SET FUNCTION CODE\n         SPACE 1\n         ST    R15,CIRWA\n         LA    R0,VALSAVE     SECONDARY SAVE AREA\n         ST    R0,CIRSAVE\n         SPACE 1\n         TM    FLAGS,FTTR     READ BY TTR?\n         LA    R0,DSNAME      FOR SEARCH BY NAME\n         ST    R0,CIRSRCH\n         BZ    CALLCIR1\n         XI    FLAGS,FTTR\n         LA    R0,TTR\n         ST    R0,CIRSRCH\n         MVI   CIRSRCH,X'80'\nCALLCIR1 DS    0H\n         SPACE 2\n         TM    FLAGS,FCVOL    ALTERNATE CVOL?\n         BZ    CALLCIR2\n         LA    R0,CVOL        CVOL ADDRESS\n         ST    R0,CIRCVOL     SET CVOL ADDRESS\nCALLCIR2 DS    0H\n         SPACE 2\n         L     R15,ADDRCIR    ADDRESS OF IKJEHCIR\n         BALR  R14,R15\n         SPACE 2\n         L     R14,R14SAVE\n         BR    R14            EXIT\n         EJECT\n*\n*        PATTERN INDEX/DSNAME SCAN SUBROUTINE\n*\n         SPACE 2\nINDXSCAN DS    0H\n         STM   14,12,12(13)\n         SPACE 1\n         SR    R3,R3\n         LA    R0,MAXINDEX\n         LA    R1,DSNAME\n         LH    R15,DSNLEN\n         AR    R15,R1\n         BCTR  R15,0\n         LA    R14,1\n         NI    FLAGS,X'FF'-FPATTERN\n         SPACE 1\nSCAN0    DS    0H\n         LR    R2,R1          SAVE START OF INDEX AREA\nSCAN1    DS    0H\n         CLI   0(R1),C'*'     SPECIAL INDEX?\n         BE    SCAN2          YES\n         CLI   0(R1),C'.'     INDEX SEPERATOR?\n         BE    SCAN3          YES\n         BXLE  R1,R14,SCAN1   GET NEXT CHARACTER\n         SPACE 1\nSCAN3    DS    0H\n         LR    R14,R1\n         SR    R14,R2\n         SPACE 1\nSCAN4    DS    0H\n         LA    R3,1(R3)\n         CR    R3,R0\n         BH    SCAN0A\n         LA    R4,10\n         LR    R5,R3\n         BCTR  R5,0\n         MR    R4,R4\n         LA    R5,INDXLIST(R5)\n         STH   R14,0(R5)\n         LTR   R14,R14\n         BZ    SCAN5\n         BCTR  R14,0\n         MVC   2(0,R5),0(R2)\n         EX    R14,*-6\n         SPACE 1\nSCAN5    DS    0H\n         LA    R14,1\n         BXLE  R1,R14,SCAN0\n         SPACE 1\n         STH   R3,INDEXCNT\n         TM    FLAGS,FPATTERN\n         LA    R15,4\n         BZ    SCANEXIT\n         LA    R15,8\n         SPACE 1\nSCANEXIT DS    0H\n         L     14,12(13)\n         LM    0,12,20(13)\n         B     0(R14,R15)\n         SPACE 3\nSCAN0A   DS    0H             SYNTAX ERROR - TOO MANY LEVELS\n         SR    R15,R15\n         B     SCANEXIT\n         SPACE 2\nSCAN2    DS    0H\n         OI    FLAGS,FPATTERN\n         SR    R14,R14\n         LA    R1,1(R1)\n         B     SCAN4\n         EJECT\n*\n*        END OF PATTERN DSNAME PROCESSING\n*\n         SPACE 2\nENDCHAIN DS    0H\n         TM    FLAGS,FMATCH   WAS ANY DATA SET FOUND\n         BO    NEXTDSN        YES, CONTINUE\n         SPACE 2\n         MVC   MSGTEXT1,MSGNOPAT\n         LH    R14,MSGTEXT1\n         LH    R15,4(R2)      GET PATTERN LENGTH\n         LA    R0,0(R14,R15)\n         STH   R0,MSGTEXT1\n         LA    R14,MSGTEXT1(R14)\n         BCTR  R15,0\n         L     R1,0(R2)\n         MVC   0(0,R14),0(R1)\n         EX    R15,*-6\n         SPACE 2\n         LA    R1,MSGTEXT1\n         SR    R0,R0\n         BAL   R14,ERRORMSG\n         B     NEXTDSN\n         EJECT\n*\n*        SINGLE DATA SET NAME PROCESSING\n*\n         SPACE 2\nNOPATTRN DS    0H\n         BAL   R14,RLSEDS     RELEASE SPACE IN THIS DATA SET\n         SPACE 3\n*\n*        GET NEXT DATA SET/INDEX LEVEL\n*\n         SPACE 2\nNEXTDSN  DS    0H\n         L     R2,24(R2)      GET LIST CHAIN ADDRESS\n         LA    R2,0(R2)       CLEAR TOP BYTE\n         LTR   R2,R2          ANOTHER ENTRY IN THE LIST?\n         BNZ   NEXTPDL        YES, CONTINUE\n         SPACE 1\n         B     EXIT0          SUCESSFUL COMPLETION EXIT\n         EJECT\n*\n*        SPACE RELEASE SUBROUTINE\n*\n         SPACE 3\nRLSEDS   ST    R14,R14RLSE\n         SPACE 2\n         LA    R1,DAIRBLK     ADDRESS OF DAIR PARAMETER BLOCK\n         USING DAPB08,R1\n         XC    DAIRBLK(LDAIRBLK),DAIRBLK\n         SPACE 2\n         MVI   DA08CD+1,X'08'                                      U005\n         SPACE 2\n         LA    R0,DSNLEN                -> DATASET NAME\n         ST    R0,DA08PDSN              SAVE FOR DAIR\n         SPACE 2\n         MVC   DA08UNIT,SPACES          UNIT NAME                  U005\n         MVC   DA08SER,VOLUME           VOLUME NAME\n         MVC   DA08MNM,SPACES           MEMBER NAME                U005\n         MVC   DA08PSWD,PASSWORD        DATASET PASSWORD\n         SPACE 2\n         OI    DA08DSP1,DA08OLD    ASSUME DISP=(OLD,KEEP,KEEP)     U003\n         OI    DA08DPS2,DA08KEEP\n         OI    DA08DPS3,DA08KEP\n         SPACE 1\n         MVC   DA08DDN,SPACES                                      U005\n         SPACE 2\n         BAL   R14,CALLDAIR             ALLOCATE THE DATA SET\n         LTR   R15,R15                  CHECK RETURN CODE\n         BNZ   NOTALLOC                 DATA SET DID NOT ALLOCATE\n         SPACE 2\n         LA    R1,DAIRBLK     MOVED UP FROM BELOW FOR 'NORLSE' FIX U002\n         MVC   DCB(DCBL),DUMMYDCB       MOVED FOR 'NORLSE' FIX     U005\n         MVC   DDNAME,DA08DDN           MOVED FOR 'NORLSE' FIX     U002\n         SPACE 2\n         OI    FLAGS,FMATCH             INDICATE DATA SET MATCH\n         TM    DA08DSO,X'42'            DSORG=PS OR PO?\n         BZ    NORLSE                   NO, BYPASS RELEASE\n         SPACE 2\n*  ----  CHECK IF BYPASSING RELEASE OF PARTITIONED DATASETS.       U002\n         SPACE 2\n         TM    DA08DSO,X'02'            DSORG=PO DATASET?          U002\n         BZ    *+12                     NO - CONTINUE              U002\n         SPACE 2\n         TM    FLAGS2,FNOPDS  DON'T RELEASE DSORG=PO DATASETS?     U002\n         BO    NORLSE         YES - SAY RELEASE BYPASSED/CONTINUE  U002\n         SPACE 2\n         LA    R1,EXLST\n         IC    R0,DCBEXLST-IHADCB+DCB                              U005\n         ST    R1,DCBEXLST-IHADCB+DCB                              U005\n         STC   R0,DCBEXLST-IHADCB+DCB                              U005\n         SPACE 2\n         MVC   DCBDDNAM-IHADCB+DCB,DDNAME                          U005\n         SPACE 2\n         LA    R0,JFCB\n         ST    R0,EXLST\n         MVI   EXLST,X'87'\n         SPACE 2\n         RDJFCB DCB,MF=(E,OPENLIST)     GET THE JFCB               U005\n         SPACE 2\n         NI    JFCBIND2,255-JFCDISP     RESET DISP                 U005\n         OI    JFCBIND2,JFCMOD          SET DISP=MOD               U005\n         SPACE 1\n         XC    JFCBPQTY,JFCBPQTY        ZERO PRIMARY SPACE         U006\n         XC    JFCBCTRI,JFCBCTRI        ZERO ALLOCATION TYPE       U006\n         XC    JFCBSQTY,JFCBSQTY        ZERO SECONDARY SPACE       U006\n         XC    JFCBDQTY,JFCBDQTY        ZERO DIRECTORY SPACE       U006\n         SPACE 2\n         OI    JFCBIND1,JFCRLSE         TURN ON RELEASE            U005\n         OPEN  (,OUTPUT),TYPE=J,MF=(E,OPENLIST)                    U005\n         SPACE 2\n         BAL   R14,CALCSIZE                                        U005\n         ST    R0,SIZEDS                SAVE DATASET SIZE          U005\n         LTR   R0,R0                    IS THERE ANY SPACE?        U005\n         BM    FULLDS                   NO, THIS ONE'S THROUGH     U005\n         EJECT\n*\n* DETERMINE FREE SPACE IN DATASET\n*\n         STM   R1,R12,24(R13)           SAVE REGISTERS             U005\n         LR    R3,R13\n         L     R1,DCBDEBAD-IHADCB+DCB   DEB ADDRESS                U005\n         LA    R2,DCBFDAD-IHADCB+DCB    CCHHR OF LAST RECORD       U005\n         L     R15,CVTPTR               ADDR OF CVT                U003\n         L     R15,CVTPRLTV-CVT(,R15)   CCHHR TO TTR CONVERT       U003\n         BALR  R14,R15\n         LR    R13,R3\n         LM    R1,R12,24(R13)           RESTORE REGISTERS          U005\n         SPACE 2\n         LTR   R0,R0                    TOTALLY EMPTY DATASET?     U005\n         BZ    EMPTY                    YES, LEAVE USED TRACKS=0   U005\n         SPACE 1\n         SRL   R0,16                  GET RELATIVE # OF LAST TRACK\n         AH    R0,=H'1'                 TOTAL USED TRACKS          U005\n         SPACE 2\nEMPTY    L     R1,SIZEDS                ALLOCATED SIZE OF DATASET  U005\n         SR    R1,R0                    TOTAL FREE SPACE\n         BNP   FULLDS                   IF NONE IS FREE\n         SPACE 1\n         STH   R1,SIZEFREE\n         EJECT\n*\n*        COMPUTE ADDRESS OF LAST TRACK IN DATA SET\n*\n         SPACE 1\n         MVC   SAVCCHHR,DCBFDAD-IHADCB+DCB SAVE LAST CCHHR         U005\n         SPACE 1\n         TM    FLAGS,FPARTIAL           PARTIAL SPACE REQUEST?\n         BZ    FREEALL                  NO, RELEASE ALL SPACE\n         SPACE 2\n         SH    R1,SIZESAVE              AMOUNT OF SPACE TO SAVE\n*U007    BNP   NORLSE                   NONE TO RELEASE\n         BNM   *+6                      VALUE IS VALID             U007\n         SR    R1,R1                    NOT VALID, FORCE ZERO      U007\n         SPACE 2\n         STH   R1,SIZEFREE              SAVE AMOUNT TO BE RELEASED\n         SPACE 1\n         STM   R14,R12,12(R13)          SAVE REGS FROM CONVERT     U005\n         SPACE 1\n         L     R0,SIZEDS                END OF DATA SET            U005\n         SH    R0,SIZEFREE              MINUS AMOUNT TO FREE\n         BNP   EMPTY2                   DATASET IS EMPTY           U005\n         BCTR  R0,0                     MINUS 1                    U005\nEMPTY2   SLL   R0,16                    LEAVES REL # OF LAST TRACK U005\n         O     R0,=XL4'100'             FORM TTR0 OF LAST RECORD   U005\n         SPACE 1\n         L     R1,DCB+(DCBDEBAD-IHADCB) GET DEB ADDRESS            U005\n         LA    R2,DCB+(DCBFDAD-IHADCB)  AREA FOR CCHHR             U005\n         SPACE 1\n         L     R15,CVTPTR                                          U003\n         L     R15,CVTPCNVT-CVT(,R15)   TTR TO CCHHR CONVERT       U003\n         LR    R3,R13\n         BALR  R14,R15\n         LR    R13,R3\n         LM    R14,R12,12(R13)          RESTORE REGISTERS\n         SPACE 2\nFREEALL  DS    0H\n         CLOSE MF=(E,OPENLIST)          RELEASE SPACE              U005\n         SPACE 1\n         NI    JFCBIND1,255-JFCRLSE     TURN OFF RELEASE           U005\n         OPEN  TYPE=J,MF=(E,OPENLIST)   RE-OPEN DCB                U005\n         SPACE 2\n         BAL   R14,CALCSIZE             GET NEW SIZE OF DATASET    U005\n         L     R1,SIZEDS                OLD SIZE OF DATASET        U005\n         SR    R1,R0                    AMOUNT ACTUALLY FREED      U005\n         STH   R1,SIZEFREE              SAVE FOR MESSAGE           U005\n         SPACE 1\n         MVC   DCBFDAD-IHADCB+DCB,SAVCCHHR SET LAST BLOCK CCHHR    U005\n         SPACE 2\n         CLOSE MF=(E,OPENLIST)          RESTORE CORRECT LAST       U005\n*                                       RECORD ADDRESS\n         SPACE 2\n         LH    R1,SIZEFREE    TOTAL AMOUNT OF SPACE FREED          U003\n         CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         SPACE 2\n         SR    R15,R15\n         LA    R14,10         COMPUTE WIDTH OF NUMBER\n         SPACE 1\nFIXWIDTH DS    0H\n         SR    R0,R0\n         DR    R0,R14\n         LA    R15,1(R15)\n         LTR   R1,R1          SIZE DETERMINED?\n         BNZ   FIXWIDTH       NO\n         SPACE 2\n         LR    R14,R15\n         SLL   R15,4          SET WIDTH FOR UNPK\n         SPACE 2\n         UNPK  MSGTEXT1+4(0),DOUBLE\n         EX    R15,*-6\n         SPACE 1\n         MVI   MSGTEXT1+4,C' '\n         SPACE 1\n         LA    R15,MSGTEXT1+5(R14)\n         MVC   0(L'MSGTRACK,R15),MSGTRACK\n         LH    R1,SIZEFREE    TOTAL SIZE FREED\n         BCTR  R1,0\n         LTR   R1,R1          ONLY ONE TRACK?\n         LA    R15,L'MSGTRACK(R15)\n         BZ    ONETRACK       YES\n         SPACE 1\n         MVI   0(R15),C'S'\n         LA    R15,1(R15)\n         SPACE 1\nONETRACK DS    0H\n         MVC   0(L'MSGRLSED,R15),MSGRLSED\n         LA    R15,L'MSGRLSED(R15)\n         SPACE 1\n         MVC   0(44,R15),JFCBDSNM       DATA SET NAME              U005\n         LA    R15,44(R15)\n         LA    R1,MSGTEXT1\n         SR    R15,R1         TOTAL MSG LENGTH\n         SLL   R15,16\n         ST    R15,0(R1)\n         SR    R0,R0\n         SPACE 1\n         BAL   R14,ERRORMSG\n         SPACE 2\nFREEDS   DS    0H\n         LA    R1,DAIRBLK\n         XC    DAIRBLK(LDAIRBLK),DAIRBLK\n         USING DAPB18,R1\n         SPACE 2\n         MVC   DA18DDN,DDNAME RELEASE THE DATA SET\n         LA    R0,X'18'\n         MVI   DA18CTL,DA18PERM         DE-ALLOC THE DATASET ALSO  U002\n         STH   R0,DA18CD\n         SPACE 2\n         BAL   R14,CALLDAIR\n         SPACE 2\nEXITRLSE DS    0H\n         L     R14,R14RLSE\n         BR    R14\n         EJECT\n*\n*        CALCULATE TOTAL AMOUNT OF SPACE IN DATA SET\n*\n         SPACE 2\nCALCSIZE ST    R14,CSLINK               SAVE ROUTINE LINKAGE       U005\n         SR    R0,R0                    DATASET SIZE WORK REG\n         L     R1,DCB+(DCBDEBAD-IHADCB) GET DEB ADDR               U005\n         SR    R14,R14\n         ICM   R14,B'0001',DEBNMEXT(R1) GET EXTENT COUNT\n         BZ    CS02                     NO EXTENTS - SIZEDS=0      U005\n         SR    R15,R15\n         IC    R15,DEBAMLNG(R1)         GET EXTENT SIZE\n         SPACE 2\nCS01     AH    R0,DEBDVMOD+14(R1) ADD NUMBER OF TRACKS IN EXTENT\n         AR    R1,R15                   JUMP EXTENT POINTER\n         BCT   R14,CS01                 LOOP THROUGH EXTENTS\n         SPACE 2\n*        R0 = TOTAL NUMBER OF TRACKS IN DATA SET\n         SPACE 2\nCS02     L     R14,CSLINK               RESTORE LINKAGE            U005\n         BR    R14                      RETURN TO CALLER           U005\n         EJECT\n* THE CODE ELIMINATED BELOW (CALLED CYL#FIX) ATTEMPTS TO ROUND     U005\n* THE RELEASE REQUEST TO A CYLINDER BOUNDARY.  IT MIGHT BE USEFUL  U005\n* WHEN THE 'CYL' KEYWORD IS IMPLEMENTED.  ON THE OTHER HAND, IT    U005\n* MIGHT JUST BE EASIER TO RESET THE JFCNWRIT (NO REWRITE) BIT AND  U005\n* SET JFCBSPAC TO JFCBCYL (ALLOC TYPE 'CYL') BEFORE THE CLOSE.     U005\n         SPACE 1\n         AGO   .NOFIX                                              U005\n*---------------------------------------------------------------------*\n*                                                                     *\n* WE GET TO THIS SECTION OF CODE WHILE PROCESSING A DATASET THAT IS   *\n* ALLOCATED CYLINDER. OUR DEFINITION OF CYLINDER ALLOCATION ONLY      *\n* TAKES INTO ACCOUNT THE FIRST EXTENT OF THE DATASET. IF THE FILE     *\n* MASK IN THE DEB FOR THE FIRST EXTENT ALLOWS HEAD AND/OR CYLINDER    *\n* SEEKS, WE ASSUME THE DATASET IS ALLOCATED CYLINDER.                 *\n*                                                                     *\n* IN THIS SECTION OF CODE, WE FIRST SET THE CYLINDER ALLOCATION BITS  *\n* IN THE JFCB AND TURN OFF THE JFCB NO-REWRITE-TO-JOBQ BIT SO CLOSE   *\n* WILL SEE THE CYLINDER ALLOCATION BITS. NEXT, WE MAKE THE DATASET    *\n* LOOK 'FULL' UP TO A CYLINDER BOUNDARY FOR THE MAINLINE RELEASE      *\n* CODE. R0 ON INPUT CONTAINS THE RELATIVE NUMBER OF TRACKS (ACTUAL-1) *\n* IN USE IN THE DATASET (FROM DS1LSTAR/DCBFDAD). WE ROUND THIS DATUM  *\n* UP TO A VALUE EVENLY DIVISIBLE BY THE NUMBER OF TRACKS IN A         *\n* CYLINDER FOR THE RESIDENCE DEVICE AND THEN DECREMENT THE VALUE BY   *\n* ONE (RELATIVE TRACKS). IF NO USER PARTIAL SPACE REQUEST IS IN       *\n* EFFECT, WE EXIT TO THE MAINLINE CODE. OTHERWISE, WE CHECK IF THE    *\n* END RESULT OF THE RELEASE WITH THE USER'S PARTIAL SAVE REQUEST WILL *\n* BE ON A CYLINDER BOUNDARY. IF IT IS, WE EXIT TO MAINLINE TO USE THE *\n* USER'S REQUEST. IF IT IS NOT, WE TELL THE USER WHAT'S UP AND ASK IF *\n* THE RELEASE SHOULD BE PERFORMED. DEPENDING ON THE ANSWER, WE EITHER *\n* BYPASS THE RELEASE OR EXIT TO MAINLINE TO PERFORM THE RELEASE.      *\n*                                                                     *\n* REGISTERS USED: R14 - WORK,TRKS-PER-CYL FOR OWNING DEVICE           *\n*                 R15 - INPUT DEB POINTER,WORK                        *\n*                  R0 - INPUT COUNT OF TRACKS IN USE IN DATASET,      *\n*                       OUTPUT COUNT ROUNDED UP TO 'CYL' MULTIPLE     *\n*                  R1 - WORK                                          *\n*                  R3 - WORK                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\nCYL#FIX  MVI   JFCBCTRI,JFCBCYL         SET CYL ALLOC FOR CLOSE    U005\n         NI    JFCBTSDM,255-JFCNWRIT    REWRITE TO JOBQ FOR CLOSE  U005\n         L     R15,DEBUCBAD(,R15)       UCB ADDR OF CURRENT DEVICE U001\n         L     R14,16                   CVT ADDR                   U001\n         IC    R15,UCBTYP+3(,R15)       DEV CHAR TAB OFFSET INDEX  U001\n         L     R14,CVTZDTAB-CVT(,R14)   ADDR/DEV CHAR TAB INDICES  U003\n         N     R15,=F'15'               ISOLATE OFFSET INDEX       U001\n         LR    R1,R0                    GET TRKS IN USE MINUS ONE  U001\n         IC    R15,0(R15,R14)           GET DEV TABLE ENTRY OFFSET U001\n         XR    R0,R0                    INIT FOR DIVIDE            U001\n         ALR   R14,R15                  GEN DEV. CHAR. TAB ADDR    U001\n         LH    R14,2(,R14)              GET TRKS PER CYLINDER      U001\n         LR    R3,R1                    SAVE INPUT REL. TRKS VALUE U001\n         SPACE 2\n         ALR   R1,R14                   ADD FOR FOLLOWING ROUNDUP  U001\n         DR    R0,R14                   GENERATE CYLINDER COUNT    U001\n         MR    R0,R14                   CONVERT TO TRACK COUNT     U001\n         LR    R0,R1                    RESET MAINLINE WORK REG    U001\n         BCTR  R0,0                     BACK TO RELATIVE TRACKS    U001\n         SPACE 2\n         TM    FLAGS,FPARTIAL           PARTIAL SPACE REQUEST?     U001\n         BZ    CYL#RET                  NO - RETURN TO MAINLINE    U001\n         SPACE 2\n*  ----  PERFORM SPECIAL PARTIAL SPACE REQUEST CHECKS.             U001\n         SPACE 2\n         LH    R1,SIZESAVE              USER'S PARTIAL REQUEST     U001\n         XR    R0,R0                    SET UP FOR DIVIDE          U001\n         LA    R1,1(R1,R3)              GEN USER'S VALUE/TOT TRKS  U001\n         DR    R0,R14                   DIVIDE BY TRKS PER CYL     U001\n         LTR   R0,R0                    USER TOTAL A CYL MULTIPLE? U001\n         BZ    CYL#BYE                  YES - LET HIM HAVE HIS WAY U001\n         SPACE 2\n*  ----  ASK IF WE SHOULD LET THE RELEASE CONTINUE. USE TGET TO    U001\n*  ----  INSURE INPUT IS COMING FROM THE TERMINAL.                 U001\n         SPACE 2\n         MVC   MSGTEXT1(MSGASKO),MSGASKI SPACE REQ. NOT CYL BOUND. U001\n         MVC   MSGTEXT1+MSGASKO(44),JFCBDSNM  APPEND DSNAME TO MSG U005\n         XR    R0,R0                    NO SECOND LEVEL MSG        U001\n         LA    R1,MSGTEXT1              POINT TO MSG               U001\n         BAL   R14,ERRORMSG             USE PUTLINE TO OUTPUT MSG  U001\n         SPACE 2\nCYL#ASK  MVC   MSGTEXT1,MSGASKR         TYPE Y TO RLSE,N TO BYPASS U001\n         XR    R0,R0                    NO SECOND LEVEL MSG        U001\n         LA    R1,MSGTEXT1              POINT TO MSG               U001\n         BAL   R14,ERRORMSG             USE PUTLINE TO OUTPUT MSG  U001\n         SPACE 2\n         LA    R0,1                     LENGTH OF INPUT WE WANT    U001\n         LA    R1,MAINSAVE              ADDR OF INPUT BUFFER AREA  U001\n         O     R1,=XL4'80000000'        INDICATE TGET              U001\n         TGET  (1),(0),R                AND DO IT                  U001\n         BXLE  R15,R15,CYL#CHK          CHECK DATA IF ALL KOSHER   U001\n         SPACE 2\n         CH    R15,=AL2(12*2)           TOO MUCH INPUT?            U001\n         BNE   NORLSE                   NO - SKIP THE DSN          U001\n         SPACE 2\n         TCLEARQ INPUT                  CLEAN OUT THINGS           U001\n         B     CYL#ASK                  AND ASK AGAIN              U001\n         SPACE 2\nCYL#CHK  OI    MAINSAVE,X'40'           FORCE UPPER CASE           U001\n         CLI   MAINSAVE,C'N'            SKIP THE RELEASE?          U001\n         BE    NORLSE                   YES - SO DO IT             U001\n         SPACE 2\n         CLI   MAINSAVE,C'Y'            DO THE RELEASE ANYWAY?     U001\n         BNE   CYL#ASK                  NO - GO ASK AGAIN          U001\n         SPACE 2\n         NI    JFCBCTRI,255-JFCBCYL     TURN OFF CYL ALLOC         U005\n         OI    JFCBTSDM,JFCNWRIT        NO JFCB FOR CLOSE TO SEE   U005\n         SPACE 2\nCYL#BYE  LR    R0,R3                    GET REL TRK COUNT BACK     U001\n         B     CYL#RET                  AND RETURN TO MAINLINE     U001\n.NOFIX   ANOP  ,                                                   U005\n         EJECT\nFULLDS   DS    0H\n         MVC   MSGTEXT1,MSGSPACE\n         B     SKIPRLSE\n         SPACE 2\nNORLSE   DS    0H\n         MVC   MSGTEXT1,MSGNRLSE\n         SPACE 2\nSKIPRLSE DS    0H\n         LH    R15,MSGTEXT1\n         LA    R14,44(R15)\n         STH   R14,MSGTEXT1\n         SPACE 1\n         LA    R15,MSGTEXT1(R15)\n         MVC   0(44,R15),JFCBDSNM                                  U005\n         SPACE 2\n         TM    DCB+DCBOFLGS-IHADCB,DCBOFOPN DCB OPEN?              U005\n         BZ    SKIP#CLS       NO - SO DON'T CLOSE IT               U002\n         SPACE 2\n         CLOSE DCB,MF=(E,OPENLIST)                                 U005\n         SPACE 2\nSKIP#CLS EQU   *                                                   U002\n         SPACE 2\n         SR    R0,R0\n         LA    R1,MSGTEXT1\n         BAL   R14,ERRORMSG\n         B     FREEDS\n         EJECT\n*\n*\n*        DATA SET NAME VALIDITY CHECK EXIT\n*\n*\n         SPACE 3\nVERDSN   ENTER VALCHECK\n         MVC   VOLUME,SPACES                                       U005\n         SPACE 1\n         TM    6(R9),X'80'    DSNAME SPECIFIED?\n         MVC   MSGTEXT1,MSGDSERR\n         BZ    DSNERROR       NO, MUST ONLY BE MEMBER NAME\n         SPACE 3\n         MVC   DSNAME,SPACES                                       U005\n         SPACE 1\n         L     R15,0(,R9)     GET ADDR OF DSNAME                   U008\n         LH    R14,4(,R9)     GET DSN LENGTH                       U008\n         STH   R14,DSNLEN\n         SPACE 1\n         BCTR  R14,0\n         MVC   DSNAME(0),0(R15)\n         EX    R14,*-6\n         SPACE 2\n         BAL   R14,INDXSCAN   DETERMINE IF PATTERN DSNAME\n         B     VERDSN0C       EXIT - SYNTAX ERROR\n         NOP   0              RETURN - NOT PATTERN\n         SR    R15,R15        RETURN - PATTERN NAME\n         SPACE 2\nVERDSNX  DS    0H\n         EXIT\n         SPACE 3\nVERDSN0C DS    0H\n         MVC   MSGTEXT1,MSGNOPAT\n         SPACE 1\nDSNERROR DS    0H\n         LH    R1,MSGTEXT1\n         LH    R14,4(,R9)     LENGTH OF DSN                        U008\n         LA    R0,0(R14,R1)\n         STH   R0,MSGTEXT1\n         SPACE 1\n         LA    R1,MSGTEXT1(R1)\n         L     R15,0(,R9)                                          U008\n         SPACE 1\n         BCTR  R14,0\n         MVC   0(0,R1),0(R15)\n         EX    R14,*-6\n         SPACE 1\n         LA    R1,MSGTEXT1\n         SR    R0,R0\n         SPACE 1\n         BAL   R14,ERRORMSG\n         LA    R15,4                    RETURN CODE OF 4\n         B     VERDSNX\n         EJECT\n*\n*        VOLUME VERIFICATION SUBROUTINE\n*\n         SPACE 2\nVERVOL   ENTER VALCHECK\n         L     R15,0(R9)\n         LH    R14,4(R9)\n         SPACE 2\n         MVC   VOLUME,SPACES                                       U005\n         SPACE 2\n         BCTR  R14,0\n         MVC   VOLUME(0),0(R15)\n         EX    R14,*-6\n         SPACE 2\n         SR    R15,R15\n         EXIT\n         EJECT\n*\n*        FREE SPACE VALIDITY CHECK SUBROUTINE\n*\n         SPACE 2\nVERSAVE  ENTER VALCHECK\n         L     R15,0(R9)\n         LH    R14,4(R9)\n         SPACE 1\n         BCTR  R14,0\n         PACK  DOUBLE,0(,R15)\n         EX    R14,*-6\n         SPACE 1\n         CVB   R1,DOUBLE\n         STH   R1,SIZESAVE\n         SPACE 1\n         OI    FLAGS,FPARTIAL\n         SPACE 2\n         SR    R15,R15\n         SPACE 2\n         EXIT\n         EJECT\n*\n*        PARSE CLEANUP ROUTINE\n*\n         SPACE 3\nFREEPDL  DS    0H\n         SPACE 1\n         ST    R14,R14SAVE\n         SPACE 1\n         IKJRLSA ADDRANSR     RELEASE THE STORAGE\n         SPACE 2\n         XC    ADDRANSR,ADDRANSR\n         SPACE 1\n         L     R14,R14SAVE\n         BR    R14\n         EJECT\n*\n*        DYNAMIC ALLOCATION INVOCATION SUBROUTINE\n*\n         SPACE 3\nCALLDAIR DS    0H\n         ST    R14,R14SAVE    SAVE LINKAGE REGISTER\n         SPACE 2\n         LA    R1,PARMLIST    BUILD DYNAMIC ALLOCATION PARAMETER LIST\n         USING DAPL,R1\n         SPACE 1\n         MVC   DAPLUPT,ADDRUPT\n         MVC   DAPLECT,ADDRECT\n         MVC   DAPLPSCB,ADDRPSCB\n         SPACE 1\n         LA    R0,ATTNECB\n         MVI   ATTNECB,0\n         ST    R0,DAPLECB\n         SPACE 1\n         LA    R0,DAIRBLK\n         ST    R0,DAPLDAPB\n         SPACE 2\n         CALLTSSR  EP=IKJDAIR                                      U003\n         ST    R15,DAIRRC     Save DAIR RC for DAIRFAIL            U008\n         SPACE 2\n         L     R14,R14SAVE    RESTORE LINKAGE REGISTER\n         BR    R14            EXIT\n         EJECT\nNOTALLOC DS    0H\n         TM    FLAGS,FPATTERN PATTERN REQUEST?\n         BO    EXITRLSE       YES, EXIT W/O A MESSAGE\n         SPACE 2\n         LA    R14,MAXDAIR\n         CR    R15,R14        CHECK DAIR RETURN CODE\n         BH    DAIRBAD        VERY BAD ERROR\n         SPACE 3\n         B     *(R15)         DAIR ERROR PROCESSING\n         B     DAIRBAD        RC=04 INVALID DAIR PARAMETERS\n         B     DAIRCAM        RC=08 ERROR IN CATALOG MANAGEMENT\n         B     DAIRDYN        RC=12 ERROR IN DYNAMIC ALLOCATION\n         B     DAIRFULL       RC=16 NO SPACE IN TIOT\nMAXDAIR  EQU   16\n         SPACE 3\nDAIRFULL LA    R1,MSGFULL     ERROR MSG\n         LA    R0,MSGFULL1    SECOND LEVEL MSG\n         OI    FLAGS,FNORETRY\n         B     ALLOCERR\n         EJECT\n*\n*        PROCESS ERRORS FROM CATALOG MANAGEMENT\n*\n         SPACE 2\nDAIRCAM  DS    0H\n         SPACE 2\n*\n*        PROCESS ERRORS FROM DYNAMIC ALLOCATION\n*\n         SPACE 3\nDAIRDYN  DS    0H\n         LA    R1,DFPLST      Area for DAIRFAIL parameter list     U008\n         USING DFDSECTD,R1    DAIRFAIL parameter list              U008\n         LA    R15,PARMLIST   -> failing DAIR parameter list       U008\n         ST    R15,DFDAPLP    Set address for DAIRFAIL             U008\n         LA    R15,DAIRRC     -> Return code from DAIR             U008\n         ST    R15,DFRCP      Set address for DAIRFAIL             U008\n         LA    R15,=A(0)      Don't know where IKJEFF02 is         U008\n         ST    R15,DFJEFF02   Set address for DAIRFAIL             U008\n         LA    R15,DFID       -> DAIRFAIL request type halfword    U008\n         ST    R15,DFIDP      Set address for DAIRFAIL             U008\n         MVC   DFID,=AL1(0,DFDAIR)  DIRFAIL flags set to:          U008\n*                             use PUTLINE, error is from DAIR      U008\n         DROP  R1             DFDSECTD                             U008\n         LINK  EP=IKJEFF18    Call DAIRFAIL                        U008\n         B     EXITRLSE       Go process another dataset           U008\n         SPACE 3\nDAIRBAD  DS    0H\n         SR    R1,R1          DEFAULT TO FIRST LEVEL MSG\n         LH    R14,MSGDYNER\n         MVC   MSGTEXT2(0),MSGDYNER\n         EX    R14,*-6        CREATE MSG - DYNAMIC ALLOCATION FAILURE\n         STH   R15,DOUBLE\n         LA    R14,MSGTEXT2(R14)\n         UNPK  0(5,R14),DOUBLE(3)\n         TR    0(4,R14),TRTABLE\n         LA    R0,MSGTEXT2-4\n         SR    R14,R0\n         SLL   R14,16\n         ST    R14,MSGTEXT2\n         LA    R0,MSGTEXT2\n         B     ALLOCERR\n         EJECT\n*\n*\n*        ALLOCATION ERROR MESSAGE SUBROUTINE\n*\n*\n         SPACE 3\nALLOCERR DS    0H\n         LA    R15,MSGTEXT1+4 MESSAGE BUFFER\n         MVC   0(L'MSG1,R15),MSG1 MOVE 'DATA SET ' MSG TO BUFFER\n         LH    R14,DSNLEN     LENGTH OF DSNAME\n         LA    R15,L'MSG1(R15)\n         SPACE 1\n         MVC   0(0,R15),DSNAME\n         EX    R14,*-6        MOVE DSNAME TO BUFFER\n         AR    R15,R14\n         SPACE 2\n         MVC   0(L'MSG3,R15),MSG3 MOVE ' NOT ALLOCATED, ' MSG TO BUFFER\n         LA    R15,L'MSG3(R15)\n         SPACE 2\n         LTR   R1,R1          DEFAULT FIRST LEVEL MSG?\n         BNZ   ALOCERR4       NO\n         SPACE 1\n         LA    R1,MSG4        YES\n         SPACE 1\nALOCERR4 LH    R14,0(R1)      GET MSG LEN + 4\n         SPACE 1\n         MVC   0(0,R15),4(R1)\n         EX    R14,*-6\n         AR    R15,R14\n         LA    R14,MSGTEXT1+4\n         SR    R15,R14\n         SLL   R15,16\n         ST    R15,MSGTEXT1   STORE MESSAGE LENGTH\n         SPACE 1\n         LA    R1,MSGTEXT1\n         BAL   R14,ERRORMSG   ISSUE THE ERROR MESSAGE\n         SPACE 1\n         TM    FLAGS,FNORETRY\n         BO    EXIT12\n         SPACE 2\n         B     EXITRLSE       FOR ANOTHER DATA SET\n         EJECT\nERRORMSG DS    0H\n         ST    R14,R14SAVE    SAVE LINKAGE REGISTER\n         SPACE 1\n         LTR   R0,R0          SECOND LEVEL MSG?\n         BZ    ERRORM1        NO\n         SPACE 1\n         MVC   MSGTEXT1,0(R1) INSURE MSG IN WORK AREA\n         LA    R1,MSGTEXT1\n         SPACE 1\n         LH    R14,0(R1)      LENGTH OF FIRST LEVEL MSG\n         LA    R15,0(R14,R1)  ADDR OF END OF MSG\n         LA    R14,1(R14)     JUMP MSG LENGTH\n         STH   R14,0(R1)\n         MVI   0(R15),C'+'    INDICATE SECOND LEVEL MSG EXISTS\n         SPACE 2\n         SR    R14,R14        CLEAR CHAIN FIELD\n         LA    R15,1          ONE SEGMENT IN 2ND MSG\n         STM   R14,R0,PUTOLD2 CREATE SECOND-LEVEL\n*                             OUTPUT LINE DESCRIPTOR ('OLD')\n         LA    R0,PUTOLD2\n         SPACE 3\nERRORM1  LR    R14,R0         NEXT 'OLD' ADDR OR ZERO\n         LA    R15,1          ONE SEGMENT\n         LR    R0,R1          MSG ADDR\n         STM   R14,R0,PUTOLD1 FIRST LEVEL 'OLD'\n         SPACE 1\n         LA    R1,PARMLIST\n         USING IOPL,R1\n         SPACE 1\n         MVC   IOPLECT,ADDRECT\n         MVC   IOPLUPT,ADDRUPT\n         SPACE 1\n         LA    R0,ATTNECB\n         ST    R0,IOPLECB\n         MVI   ATTNECB,0\n         SPACE 3\n         XC    PARMLIST+16(4),PARMLIST+16\n         PUTLINE PARM=PARMLIST+16,MF=(E,(1)),                      U003X\n               OUTPUT=(PUTOLD1,TERM,MULTLVL,INFOR)\n         SPACE 3\n         L     R14,R14SAVE\n         BR    R14\n         SPACE 3\n         LTORG ,                                                   U005\n         EJECT\n*\n*\n*        P A R S E   C O N T R O L   L I S T\n*\n*\n         SPACE 3\n         PRINT NOGEN\nPCLMAIN  IKJPARM DSECT=PDL\n         SPACE 2\nOPTDSN   IKJPOSIT DSTHING,LIST,USID,VALIDCK=VERDSN,                U009$\n               PROMPT='NAME OF DATA SET TO BE RELEASED',               $\n               HELP=('NAMES OF THE DATA SETS FOR WHICH UNUSED SPACE IS $\n               TO BE RELEASED.')\n         SPACE 2\nOPTVOL   IKJKEYWD\n         IKJNAME 'VOLUME',SUBFLD=$VOLUME\n         SPACE 2\nOPTSPACE IKJKEYWD\n         IKJNAME 'SPACE',SUBFLD=$SAVE\n         IKJNAME 'LEAVE',SUBFLD=$SAVE\n         IKJNAME 'KEEP',SUBFLD=$SAVE\n         IKJNAME 'SAVE',SUBFLD=$SAVE\n         SPACE 2\nOPTPDS   IKJKEYWD DEFAULT='PDS'                                    U002\n         IKJNAME 'PDS'                                             U002\n         IKJNAME 'NOPDS'                                           U002\nOPTPDS#N EQU   2                        'NOPDS' KEYWORD POSITION   U002\n         SPACE 2\n$VOLUME  IKJSUBF\nOPTSER   IKJIDENT 'VOLUME NAME',VALIDCK=VERVOL,                        $\n               HELP=('NAME OF THE VOLUME ON WHICH THE DATA SET(S) RESID$\n               E.','ALL DATA SETS MUST RESIDE ON THIS VOLUME.'),       $\n               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6\n         SPACE 2\n$SAVE    IKJSUBF\nOPTSAVE  IKJIDENT 'SPACE VALUE',VALIDCK=VERSAVE,                       $\n               HELP=('AMOUNT OF FREE SPACE TO BE RETAINED IN THE DATA S$\n               SET(S).'),                                              $\n               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=4\n         SPACE 2\n         IKJENDP\n         SPACE 2\n         PRINT GEN\n         EJECT\n*\n*\n*        CONSTANTS\n*\n*\n         SPACE 2\nUCBTYP   EQU   X'10'                    TYPE FIELD IN UCB          U001\n         SPACE 1\nDEBAMLNG EQU   4\nDEBNMEXT EQU   16\nDEBDVMOD EQU   32\nDEBUCBAD EQU   X'20'                    LOC OF UCB ADDR            U001\n         SPACE 2\n         DS    0F\nCORESIZE DC    AL1(1),AL3(LENWORK)\n         SPACE 1\nADDRPCL  DC    A(PCLMAIN)     ADDR OF MAIN PARSE CONTROL LIST\n         SPACE 3\nTRTABLE  EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'\n         SPACE 2\nDUMMYDCB DCB   DDNAME=X,DSORG=PS,MACRF=W\nDCBL     EQU   *-DUMMYDCB                                          U005\n         SPACE 2\nSPACES   DC    CL44' '                                             U005\n         EJECT\n*\n*        PROGRAM MESSAGES\n*\n         SPACE 2\n         PRINT NOGEN\n         SPACE 1\nMSGNOPDS MSG   ' PARTITIONED DATA SETS WILL NOT BE RELEASED'       U004\nMSGDYNER MSG   ' DYNAMIC ALLOCATION ERROR CODE '\nMSGFULL  MSG   'TOO MANY DATA SETS'\nMSGFULL1 MSG   ' FREE DATA SETS NO LONGER REQUIRED'\nMSGCMDER MSG   ' COMMAND SYSTEM ERROR'\nMSGNRLSE MSG   ' RELEASE BYPASSED FOR DATA SET '\nMSGSPACE MSG   ' NO EMPTY SPACE IN DATA SET '\nMSGNOPAT MSG   ' NO DATA SETS FOUND MATCHING PATTERN NAME '\nMSGDSERR MSG   ' INVALID DATA SET NAME, '\nMSG4     MSG   'SYSTEM ERROR'\nMSG1     DC    C' DATA SET '\nMSG3     DC    C' NOT ALLOCATED, '\nMSGPARSE DC    C' PARSE ERROR CODE '\nMSGTRACK DC    C' TRACK'\nMSGRLSED DC    C' RELEASED FROM DATA SET '\n         SPACE 2\nMSGASKR  MSG   ' TYPE N TO BYPASS RELEASE - Y TO RELEASE ON TRACK BOUND\u00ac\n               ARY'                     SEE IF CYL ALLOC TO KILL   U001\nMSGASKI  DC    AL2(MSGASKO+44,0)        PUTLINE CNTL DATA          U001\n         DC    C' RELEASE REQUEST IS NOT TO CYL BOUNDARY FOR DSN = '\nMSGASKO  EQU   *-MSGASKI                OFFSET TO START OF DSNAME  U001\n         EJECT\n*\n*        DYNAMIC WORK AREA\n*\n         SPACE 3\nWORKAREA DSECT\nMAINSAVE DS    18A\nVALSAVE  DS    18A\nSAVCCHHR DS    CL8            REAL LAST MBBCCHHR                   U003\nBASES    DS    2A             PROGRAM BASE ADDRESSES\nDFPLST   DS    4F             DAIRFAIL parameter list              U008\nDOUBLE   DS    D\nVOLUME   DS    CL8            Same length as DA08SER               U008\nDDNAME   DS    CL8\nPASSWORD DS    CL8\nDAIRBLK  DS    25D            SPACE FOR DAIR PARAMETER LIST\nLDAIRBLK EQU   *-DAIRBLK\nPARSELST DS    5A             AREA FOR PARSE PARAMETER LIST\nR14SAVE  DS    A\nR14RLSE  DS    A\nCSLINK   DS    A\nADDRUPT  DS    A\nADDRECT  DS    A\nADDRPSCB DS    A\nADDRCBUF DS    A\nADDRCIR  DS    A\nADDRANSR DS    A\nATTNECB  DS    F\nDAIRRC   DS    F              Return code from IKJDAIR             U008\nCIRPARMS DS    0A\nPARMLIST DS    7A\nDFID     DS    XL2            DAIRFAIL caller ID                   U008\nFLAGS    DS    XL2            GENERAL STATUS FLAGS\nFNORETRY EQU   X'80'          TERMINATE PROCESSING\nFPARTIAL EQU   X'40'           'PARTIAL' RELEASE REQUEST\nFTTR     EQU   X'20'          LOCATE BY TTR\nFCVOL    EQU   X'10'          ALTERNATE CVOL REQUIRED\nFPATTERN EQU   X'04'\nFMATCH   EQU   X'01'\nFLAGS2   EQU   FLAGS+1        LABEL SECOND FLAG BYTE               U002\nFNOPDS   EQU   X'80'          DO NOT RELEASE DSORG=PO DATASETS     U002\n         SPACE 3\nCVOL     DS    CL6\n         DS    X\nTTR      DS    XL3,X\nBLOCKPTR DS    A\n         DS    X\nPATTERN  DS    CL44\n         DS    0F\nMSGTEXT1 DS    XL124\nMSGTEXT2 DS    XL124\n         SPACE 3\nPUTOLD1  DS    3F\nPUTOLD2  DS    3F\n         SPACE 3\nSIZEDS   DS    F                                                   U005\nSIZEFREE DS    H\nSIZESAVE DS    H\nDSNLEN   DS    H\nDSNAME   DS    0CL44\nJFCB     DS    0D                       SAME ALIGN AS DSECT        U005\n         IEFJFCBN                                                  U005\n         SPACE 2\nDCB      DS    XL(DCBL)\nEXLST    DS    F\nOPENLIST DS    F\n         SPACE 2\nMAXINDEX EQU   22\nINDEXCNT DS    H\nINDXLIST DS    (MAXINDEX)XL10\nLINDXLST EQU   *-INDXLIST\n         SPACE 2\n         DS    0D\nBUFFER   DS    XL265\n         SPACE 2\n         DS    0D\nLENWORK  EQU   *-WORKAREA\n         EJECT\n         IKJPPL\n         IKJIOPL\n         IKJPSCB\n         IKJECT\n         IKJCPPL\n         IKJDAPL\n         IKJDAP08\n         IKJDAP18\n         IKJEFFDF DFDSECT=YES   DAIRFAIL parameter list            U008\n         EJECT\n         CVT   DSECT=YES                                           U003\n         EJECT\n         DCBD  DSORG=PS\n         EJECT\nCIRBLOCK DSECT\nCIRCHAIN DS    A\nPTRINDEX DS    A\nPTRENTRY DS    A\nCIRFLAGS DS    XL2\nFLINDEX  EQU   X'80'\nCNTINDEX DS    H\nLENCIR   EQU   *-CIRBLOCK     LENGTH OF HEADER AREA\n         SPACE 2\n         DS    0D\nCIRDATA  DS    XL265\nSIZECIR  EQU   *-CIRBLOCK\n         EJECT\nCIRPARM  DSECT\nCIROPT   DS    F\nCIRSRCH  DS    A\nCIRCVOL  DS    A\nCIRWA    DS    A\nCIRSAVE  DS    A\nLCIRPARM EQU   *-CIRPARM\n         SPACE 5\n         END   RELEASE\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SPFLIB": {"ttr": 11014, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x85\\x01\\x7f\\x00\\x893?\\x16\\t\\x04\\xc0\\x031\\x01\\xa3\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1985-01-17T00:00:00", "modifydate": "1989-11-29T16:09:00", "lines": 1216, "newlines": 817, "modlines": 419, "user": "LDW"}, "text": "SPFLIB   TITLE '-----  S P F L I B -- Allocate SPF libraries  -----'\n***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1988 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.                                     *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1, with DFP 3.1),  *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc-oberon!LDW (last resort)                           *\n*                                                                     *\n*          (213) 743-5391 (direct -- 11 am to 7 pm Pacific time)      *\n*          (213) 743-2957 (msgs)                                      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, or 714.  Sorry.                                       *\n*                                                                     *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*   Program name:  SPFLIB                                             *\n*                                                                     *\n*   Purpose:       Allow users to change the concatenation of their   *\n*                  SPF libraries without needing to re-specify (or    *\n*                  even know) the system library names.               *\n*                                                                     *\n*   Author:        Leonard D. Woren                                   *\n*                                                                     *\n*   Date:          January 17, 1985                                   *\n*                                                                     *\n*   Updates:                                                          *\n*                                                                     *\n*      28Nov86  U005 LDW - Change concept:  make the standard oper-   *\n*                             ation to keep all existing libraries.   *\n*                             This function was previouslky provided  *\n*                             via the \"ADD\" keyword, which is now     *\n*                             obsolute, and will produce a warning    *\n*                             warning message to that effect.         *\n*                                                                     *\n*      01/09/86 U004 LDW - Don't attempt re-allocation if there are   *\n*                             no datasets in the new list (this will  *\n*                             prevent the ABEND when LOAD(*) is       *\n*                             specified and there are no system libs) *\n*                                                                     *\n*      12/09/85 U003 LDW - Change concatenation for ISPTLIB to keep   *\n*                             the first library first, due to design  *\n*                             stupidity in the way that ISPF does the *\n*                             ENQ when updating a table (we always    *\n*                             have the same dummy library first in    *\n*                             the concatenation in the logon proc)    *\n*                        - Change all DDname checks to 8 characters   *\n*                                                                     *\n*      05/07/85 U002 LDW - Add support for HELP  to re-alloc SYSHELP  *\n*                        - Check for duplicate specification of       *\n*                             datasets, and use only first            *\n*                             occurrence                              *\n*                        - Add \"ADD\" keyword to cause all existing    *\n*                             dataset allocations to be retained,     *\n*                             not just those on system index levels   *\n*                        - Fix bug that was causing all ddnames to    *\n*                             be checked for SYSxxx and TSOx, not     *\n*                             just SYSPROC                            *\n*                        - Add \"DEBUG\" keyword to bypass actually     *\n*                             freeing and reallocating anything       *\n*                             (\"DEBUG\" forces \"LIST\")                 *\n*                                                                     *\n*      01/23/85 U001 LDW - Add support for CLIST to re-alloc SYSPROC  *\n*                        - Add LIST keyword to list all dsnames info  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\nSPFLIB   OSENTER  PL=(PARSE),EXIT=LEAVE,RC=(R15),                      $\n               PARMREG=R5,ENV=(CP,SIMULATE),ADDRREG=R14,LENREG=R15,    $\n               GETMAIN=(WORKLEN,WORKD)\nSPFLIB   CSECT                          Resume\n         LA    R14,ZEROVARS             -> Start of area to clear\n         L     R15,=A(ZEROLEN)          Length to clear\n         SR    R1,R1                    No \"from\" length\n         MVCL  R14,R0                   Clear the whole thing\n         LR    R15,R13                  Copy addr of WORKD\n         AH    R15,=H'4096'             Temp second base\n         USNGX WORKD+4096,R15\n*\n         LA    R0,AR@CLIST              -> first CLIST dsn slot    U001\n         ST    R0,P@CLIST               Save for later use         U001\n         ST    R0,A@CLIST               Save for PARSE valck exit  U001\n         MVC   L@CLIST,=CL8'CLIST'      Set lib type for clists    U001\n         MVC   D@CLIST,=CL8'SYSPROC'    Set sys DDname for clists  U001\n*\n         LA    R0,AR@HELP               -> first HELP dsn slot     U002\n         ST    R0,P@HELP                Save for later use         U002\n         ST    R0,A@HELP                Save for PARSE valck exit  U002\n         MVC   L@HELP,=CL8'HELP'        Set lib type for clists    U002\n         MVC   D@HELP,=CL8'SYSHELP'     Set sys DDname for clists  U002\n*\n         LA    R0,AR@LOAD               -> first slot for LOAD dsnames\n         ST    R0,P@LOAD                Save for later use\n         ST    R0,A@LOAD                Save for PARSE valck exit\n         MVC   L@LOAD,=CL8'LOAD'        Set library type for messages\n         MVC   D@LOAD,=CL8'ISPLLIB'     Set SPF DDname for messages\n*\n         LA    R0,AR@MSGS               -> first slot for MSGS dsnames\n         ST    R0,P@MSGS                Save for later use\n         ST    R0,A@MSGS                Save for PARSE valck exit\n         MVC   L@MSGS,=CL8'MSGS'        Set library type for messages\n         MVC   D@MSGS,=CL8'ISPMLIB'     Set SPF DDname for messages\n*\n         LA    R0,AR@PNLS               -> first slot for PNLS dsnames\n         ST    R0,P@PANELS              Save for later use\n         ST    R0,A@PANELS              Save for PARSE valck exit\n         MVC   L@PANELS,=CL8'PANELS'    Set library type for panels\n         MVC   D@PANELS,=CL8'ISPPLIB'   Set SPF DDname for panels\n*\n         LA    R0,AR@SKLS               -> first slot for SKLS dsnames\n         ST    R0,P@SKELS               Save for later use\n         ST    R0,A@SKELS               Save for PARSE valck exit\n         MVC   L@SKELS,=CL8'SKELS'      Set library type for skels\n         MVC   D@SKELS,=CL8'ISPSLIB'    Set SPF DDname for skels\n*\n         LA    R0,AR@TBLS               -> first slot for TBLS dsnames\n         ST    R0,P@TABLES              Save for later use\n         ST    R0,A@TABLES              Save for PARSE valck exit\n         MVC   L@TABLES,=CL8'TABLES'    Set library type for tables\n         MVC   D@TABLES,=CL8'ISPTLIB'   Set SPF DDname for tables\n*\n         DROPX R15                      WORKD+4096\n         SPACE 2\n         TSPARSE  PCL=(=V(PCL),I),CBUF=(0(,R5),I),USER=(R13)\n*??                                     SYNAD=XXX\n         SPACE 2\n         LTR   R15,R15                  Did PARSE work?\n         BZ    PARSEOK                  Yes - continue\n         TPUTX 'IKJPARS Couldn''t'\n         LA    R15,16                   Set return code\n         B     LEAVE                    Get out\n         SPACE 3\n*---------------------------------------------------------------------*\n*  Check LIST/NOLIST/DEBUG/ADD keywords --                            *\n*  All other operands have been saved by validity check exits         *\n*---------------------------------------------------------------------*\nPARSEOK  L     R2,TSPARANS              -> PARSE output area       U001\n         USNGX PDL,R2                                              U001\n         CLI   P#LIST+1,1               \"LIST\" requested?          U001\n         BNE   *+8                      No - skip                  U001\n         OI    FLAGS,F@LIST             Yes - remember             U001\n         CLI   P#DEBUG+1,1              \"DEBUG\" requested?         U002\n         BNE   *+8                      No - skip                  U002\n         OI    FLAGS,F@DEBUG+F@LIST     Yes - remember             U002\n         CLI   P#ADD+1,1                \"ADD\" requested?           U002\n         BNE   *+8                      No - skip                  U002\n         OI    FLAGS,F@ADD              Yes - remember             U002\n         DROPX R2                       PDL                        U002\n*---------------------------------------------------------------------*\n*  Free PARSE's storage                                               *\n*---------------------------------------------------------------------*\n         IKJRLSA  TSPARANS              Free PARSE's storage\n         SPACE 3\n*---------------------------------------------------------------------*\n*  Issue warning message if obsolete keyword was used             U005*\n*---------------------------------------------------------------------*\n         TM    FLAGS,F@ADD              \"ADD\" specified?           U005\n         BZ    TIOTSCAN                 No - continue              U005\n         TPUTX 'SPFLIB - \"ADD\" is obsolete -- ignored'             U005\n         SPACE 3\n*---------------------------------------------------------------------*\n*  Scan the TIOT and save all the dsnames, volsers, and unit types    *\n*  of currently allocated SPF datasets                                *\n*---------------------------------------------------------------------*\nTIOTSCAN L     R1,PSATNEW-PSA           -> My TCB\n         L     R1,TCBTIO-TCB(,R1)       -> My TIOT\n         LA    R1,TIOENTRY-TIOT1(,R1)   -> First device entry\n         USNGX TIOENTRY,R1\n         SR    R0,R0                    Clear for IC\n         SPACE 2\nTIOT$LP1 CLC   =F'0',0(R1)              End of TIOT?\n         BE    GO$ALLOC                 Yes - go start allocating\n*\n         LA    R2,@@CLIST               -> CLIST DSN list descript U001\n         CLC   =C'SYSPROC ',TIOEDDNM    Start of LOAD libraries?   U003\n         BE    TIOT$LP2                 Yes - save system ds info  U001\n*\n         LA    R2,@@HELP                -> HELP DSN list descript  U002\n         CLC   =C'SYSHELP ',TIOEDDNM    Start of LOAD libraries?   U003\n         BE    TIOT$LP2                 Yes - save system ds info  U002\n*\n         LA    R2,@@LOAD                -> LOAD DSN list descriptor\n         CLC   =C'ISPLLIB ',TIOEDDNM    Start of LOAD libraries?   U003\n         BE    TIOT$LP2                 Yes - save system ds info\n*\n         LA    R2,@@MSGS                -> MSGS DSN list descriptor\n         CLC   =C'ISPMLIB ',TIOEDDNM    Start of MSGS libraries?   U003\n         BE    TIOT$LP2                 Yes - save system ds info\n*\n         LA    R2,@@PANELS              -> PANELS DSN list descriptor\n         CLC   =C'ISPPLIB ',TIOEDDNM    Start of PANELS libraries? U003\n         BE    TIOT$LP2                 Yes - save system ds info\n*\n         LA    R2,@@SKELS               -> SKELS DSN list descriptor\n         CLC   =C'ISPSLIB ',TIOEDDNM    Start of SKELS libraries?  U003\n         BE    TIOT$LP2                 Yes - save system ds info\n*\n         LA    R2,@@TABLES              -> TABLES DSN list descriptor\n         CLC   =C'ISPTLIB ',TIOEDDNM    Start of TABLES libraries? U003\n         BE    TIOT$LP2                 Yes - save system ds info\n*\nIGNORE   IC    R0,TIOELNGH              Get length of this TIOT entry\n         AR    R1,R0                    -> next TIOT entry\n         B     TIOT$LP1                 Scan whole TIOT\n         SPACE 3\n         USNGX DSDESC,R2\nTIOT$LP2 CLC   DS@NBR,=F'0'             Any user specified datasets?\n         BE    IGNORE                   No - don't bother reallocating\n*                                            this DDname\n         SR    R14,R14                  Clear for ICM\n         ICM   R14,B'0111',TIOEJFCB     -> JFCB Prefix\n         L     R3,DS@NBR                Get number of dsnames      U002\n         L     R4,DS@TOP                -> first dsname element    U002\n         USNGX DSENTRY,R4                                          U002\n         SPACE 1\nDUP$LOOP CLC   DSE@DSN,16(R14)          Already have this dsname?  U002\n         BE    NEXTTIOT                 Yes - don't add again      U002\n         LA    R4,DSE@@LEN(,R4)         -> next array element      U002\n         BCT   R3,DUP$LOOP              Keep looking for this dsn  U002\n         DROPX R4                       DSENTRY                    U002\n*---  This dsname not previously specifed                          ---*\n*U005    TM    FLAGS,F@ADD              \"ADD\" requested?           U002\n*U005    BO    SAVE$DSN                 Yes - bypass check for     U002\n*                                          system dsnames          U002\n         SPACE 2\n*U005    CLC   =C'SPF',16(R14)          SPF system dataset?\n*U005    BE    SAVE$DSN                 Yes - save dsn info        U001\n*U005    CLC   DS@NAME,=CL8'CLIST'      Is this special?           U002\n*U005    BE    OK$SYS                   Yes - allow TSOx and SYSx  U002\n*U005    CLC   DS@NAME,=CL8'HELP'       Is this special?           U002\n*U005    BNE   NEXTTIOT                 No - skip it\n*OK$SYS  CLC   =C'TSO',16(R14)          System CLIST library?      U001\n*U005    BE    SAVE$DSN                 Yes - save dsn info        U001\n*U005    CLC   =C'SYS',16(R14)          System CLIST library?      U001\n*U005    BNE   NEXTTIOT                 No - skip it               U001\n         SPACE 1\nSAVE$DSN L     R3,DS@NEXT               Get addr for next dsname\n         USNGX DSENTRY,R3\n         L     R4,DS@NBR                Get number of dsnames\n         CH    R4,=H'16'                Are we full here?\n         BNL   TOOMANY                  Yes - say \"no can do\"\n         MVC   DSE@DSN,16(R14)          Save this dsname\n         SR    R14,R14                  Clear for ICM\n         ICM   R14,B'0111',TIOEFSRT     -> UCB\n         USNGX UCBOB,R14\n         MVC   DSE@VOL,UCBVOLI          Save VOLSER\n         SR    R15,R15                  Clear for IC\n         IC    R15,UCBTBYT4             Get DASD device type code\n         SLL   R15,3                    * 8\n         LA    R15,DEVTYPES-8(R15)      -> Character form of devtype\n         MVC   DSE@UNIT,0(R15)          Save it in dsn table\n         LA    R3,DSE@@LEN(,R3)         Bump table pointer\n         LA    R4,1(,R4)                Increment number of dsnames\n         ST    R3,DS@NEXT               Save updated addr\n         ST    R4,DS@NBR                Save updated number\n         DROPX R14,R3                   UCBOB, DSENTRY\n         SPACE 2\nNEXTTIOT IC    R0,TIOELNGH              Get length of this TIOT entry\n         AR    R1,R0                    -> next TIOT entry\n         CLC   =F'0',0(R1)              End of TIOT?\n         BE    GO$ALLOC                 Yes - go start allocating\n         CLC   TIOEDDNM,BLANKS          Concatenation?\n         BE    TIOT$LP2                 Yes - continue current DDname\n         B     TIOT$LP1                 No - go check for new DDname\n         DROPX R1                       TIOENTRY\n         SPACE 2\nTOOMANY  MVC   BUFFER,BLANKS\n         MVC   BUFFER(75),=C'*** Maximum of 16 dsnames exceeded for lib$\n               rary xxxxxxxx DDname xxxxxxxx ***'\n         MVC   BUFFER+47(8),DS@NAME\n         MVC   BUFFER+63(8),DS@DDN\n         TPUTX BUFFER,75\n         ABEND 1,DUMP\n         DROPX R2                       DSDESC\n         SPACE 3\n*---------------------------------------------------------------------*\n*  Initialize SVC 99 Request Block and Text Units                     *\n*---------------------------------------------------------------------*\nGO$ALLOC LA    R1,$99RBLEN              -> Request block\n         ST    R1,$99RBPTR\n         MVI   $99RBPTR,S99RBPND        Set end of list indicator\n         MVI   $99RBLEN,20              Set length of Request Block\n         SPACE 2\n         LA    R14,T1#DSN\n         LA    R15,T1#SHR\n         LA    R0,T1#PERM\n         LA    R1,T1#DDN\n         LA    R2,T1#VOL\n         LA    R3,T1#UNIT\n         STM   R14,R3,TEXTLST1          Set Text Unit pointers\n         OI    TEXTLST1+5*4,X'80'       Set end of list indicator\n         MVC   T1#DSN(6),=Y(DALDSNAM,1,44)\n         MVC   T1#SHR(6),=Y(DALSTATS,1,1)\n         MVC   T1#PERM(4),=Y(DALPERMA,0)\n         MVI   T1#SHR+6,X'08'           SHR\n         MVC   T1#VOL(6),=Y(DALVLSER,1,6)\n         MVC   T1#UNIT(6),=Y(DALUNIT,1,8)\n         SPACE 2\n         LA    R14,T2#DDN\n         LA    R15,T2#PERM\n         STM   R14,R15,TEXTLST2         Set Text Unit pointers\n         OI    TEXTLST2+4*1,X'80'       Set end of list indicator\n         MVC   T2#DDN(2),=Y(DCCDDNAM)\n         MVC   T2#PERM(4),=Y(DCCPERMC,0)\n         SPACE 2\n         LA    R14,T3#DDN\n         LA    R15,T3#UNALC\n         STM   R14,R15,TEXTLST3         Set Text Unit pointer\n         OI    TEXTLST3+4*1,X'80'       Set end of list indicator\n         MVC   T3#DDN(6),=Y(DUNDDNAM,1,8)\n         MVC   T3#UNALC(4),=Y(DUNUNALC,0)\n         SPACE 3\n         TM    FLAGS,F@LIST             Want list of dsnames?      U001\n         BNO   NO$LIST                  No - skip                  U001\n         SPACE 1                                                   U001\n         LA    R1,=C'--- SYSPROC INFO ---'                         U001\n         L     R2,P@CLIST                                          U001\n         L     R3,N@CLIST                                          U001\n         BAL   LINK,TEMP$PRT                                       U001\n         SPACE 1\n         LA    R1,=C'--- SYSHELP INFO ---'                         U002\n         L     R2,P@HELP                                           U002\n         L     R3,N@HELP                                           U002\n         BAL   LINK,TEMP$PRT                                       U002\n         SPACE 1\n         LA    R1,=C'--- ISPLLIB INFO ---'                         U001\n         L     R2,P@LOAD\n         L     R3,N@LOAD\n         BAL   LINK,TEMP$PRT\n         SPACE 1\n         LA    R1,=C'--- ISPMLIB INFO ---'                         U001\n         L     R2,P@MSGS\n         L     R3,N@MSGS\n         BAL   LINK,TEMP$PRT\n         SPACE 1\n         LA    R1,=C'--- ISPPLIB INFO ---'                         U001\n         L     R2,P@PANELS\n         L     R3,N@PANELS\n         BAL   LINK,TEMP$PRT\n         SPACE 1\n         LA    R1,=C'--- ISPSLIB INFO ---'                         U001\n         L     R2,P@SKELS\n         L     R3,N@SKELS\n         BAL   LINK,TEMP$PRT\n         SPACE 1\n         LA    R1,=C'--- ISPTLIB INFO ---'                         U001\n         L     R2,P@TABLES\n         L     R3,N@TABLES\n         BAL   LINK,TEMP$PRT\n         B     NO$LIST                                             U001\n         SPACE 2\nTEMP$PRT LTR   R3,R3\n         BZR   LINK\n         TPUTX (1),20                   Put out the header line    U001\nTEMP$PRL TPUTX (R2),DSE@@LEN\n         LA    R2,DSE@@LEN(,R2)\n         BCT   R3,TEMP$PRL\n         BR    LINK\n         SPACE 3\n*---------------------------------------------------------------------*\n*  Free and rebuild each SPF library concatenation                    *\n*---------------------------------------------------------------------*\nNO$LIST  TM    FLAGS,F@DEBUG            In debug mode?             U002\n         BO    LEAVE                    Yes - skip all FREE/ALLOC  U002\n         LA    R2,@@CLIST               -> First array descriptor  U001\n         LA    R3,7                     Nbr of arrays to process   U002\n         USNGX DSDESC,R2\n         SPACE 3\n*---  Free the current allocation, if this operand specified       ---*\nMAINLOOP CLC   DS@NBR,=F'0'             Anything here?\n         BE    CONCATOK                 No - skip to next DDN\n         MVC   T3#DDN+6(8),DS@DDN       Get DDName to FREE\n         LA    R0,TEXTLST3              -> Text Unit address list\n         ST    R0,$99TXTPP              Set in Request Block\n         XC    $99FLAG1,$99FLAG1\n         XC    $99ERROR(L'$99ERROR+L'$99INFO),$99ERROR\n         MVI   $99VERB,S99VRBUN         Indicate \"UNALLOCATION\"\n         LA    R1,$99RBPTR\n         SVC   99                       Free the DDname\n         LTR   R15,R15                  OK?\n         BZ    FREE$OK                  Yes - continue\n         CLC   =X'0438',$99ERROR        DDname not allocated?\n         BNE   FREE$ERR                 No - print error message\n         CLC   =C'ISPLLIB ',T3#DDN+6    Special case?              U003\n         BE    FREE$OK                  Yes - continue\nFREE$ERR MVC   BUFFER,BLANKS            Clear message buffer\n         MVC   BUFFER(35),=C'*** De-allocation failed for DDname'\n         MVC   BUFFER+36(8),T3#DDN+6    Fill in DDname\n         LA    R2,BUFFER+45             -> Area for return codes\n         BAL   LINK,DYN$ERR             Format R15, Error & info\n         CLC   =X'0420',$99ERROR        Not freed because ds is open?\n         BNE   FREE$AB                  Don't say anything more\n         TPUTX '*** Dataset is open -- SPFLIB command cannot be execute$\n               d from within SPF   ***'\nFREE$AB  TPUTX '*******************************************************$\n               ***********************'\n         ABEND 2,DUMP\n         SPACE 3\n*---  Allocate each dataset and save system generated DDname       ---*\nFREE$OK  LA    R4,T2#DDN+4              -> First DDname slot for CONCAT\n         L     R5,DS@NBR                Get number of dsnames\n         L     R6,DS@TOP                -> First dsname\n         SR    R7,R7                    Init number of DDnames\n         USNGX DSENTRY,R6\n         CH    R5,=H'1'                 Anything to ALLOC?         U004\n         BH    ALLOC$LP                 Yes - do it                U004\n         CLC   =C'* ',DSE@DSN           Is this \"RESET\" function?  U004\n         BNE   ALLOC$LP                 No - go do alloc           U004\n         MVC   BUFFER,BLANKS            ... nothing to alloc...    U004\n         MVC   BUFFER(8),DS@DDN         DDname                     U004\n         MVC   BUFFER+9(66),=C' not re-allocated -- no system libraries$\n                were previously allocated'                         U004\n         TPUTX BUFFER,75                                           U004\n         B     CONCATOK                 And pretend we did it      U004\n         SPACE 2\nALLOC$LP CLC   =C'* ',DSE@DSN           Is this \"RESET\" function?\n         BE    SKIPDSN                  Yes - don't alloc anything yet\n         LA    R7,1(,R7)                Increment DDname number\n         MVC   T1#DSN+6(44),DSE@DSN     Get DSNAME to ALLOC\n         OI    TEXTLST1+3*4,X'80'       Assume no VOL and UNIT\n         CLC   DSE@VOL,BLANKS           Any?\n         BE    NO$VOL                   No - skip\n         MVC   T1#VOL+6(6),DSE@VOL      VOLSER to SVC99 parmlist\n         MVC   T1#UNIT+6(8),DSE@UNIT    UNIT to SVC99 parmlist\n         NI    TEXTLST1+3*4,X'FF'-X'80' And include their text units\nNO$VOL   LA    R0,TEXTLST1              -> Text Unit address list\n         ST    R0,$99TXTPP              Set in Request Block\n         XC    $99FLAG1,$99FLAG1\n         XC    $99ERROR(L'$99ERROR+L'$99INFO),$99ERROR\n         MVI   $99VERB,S99VRBAL         Indicate ALLOC by DSNAME\n         MVC   T1#DDN(6),=Y(DALRTDDN,1,8)  Assume not first in concat\n         CH    R7,=H'1'                 Is this first in this concat?\n         BNE   NOTFIRST                 No - OK as is\n         MVC   T1#DDN(2),=Y(DALDDNAM)   Yes - we will supply the DDname\n         MVC   T1#DDN+6(8),DS@DDN       Fill it in\n         SPACE 1\nNOTFIRST LA    R1,$99RBPTR\n         SVC   99                       Alloc the input dataset\n         LTR   R15,R15                  OK?\n         BZ    ALLOC$OK                 Yes\n         CLC   =X'1708',$99ERROR        Dataset not found?\n         BE    DSNOTFND                 Yes - print better msg\n         SPACE 1\n         MVC   BUFFER,BLANKS            Clear message buffer\n         MVC   BUFFER(32),=C'*** Allocation failed for DSName'\n         MVC   BUFFER+33(44),T1#DSN+6   Fill in DSName\n         LA    R2,BUFFER+33             -> Start of dsname\n         CLI   0(R2),C' '  <====+       Find end yet?\n         LA    R2,1(,R2)        |       -> Next char of dsname\n         BNE   *-8     >========+       No - keep looking\n         BAL   LINK,DYN$ERR             Format R15, Error & info\n         TPUTX '*******************************************************$\n               ***********************'\n         ABEND 3,DUMP\n         SPACE 2\nDSNOTFND TPUTX '*******************************************************$\n               ***********************'\n         MVC   BUFFER(24),=C'*** Dataset not found:  '\n         MVC   BUFFER+24(44),T1#DSN+6\n         TPUTX BUFFER,24+44\n         TPUTX '*******************************************************$\n               ***********************'\n         ABEND 4\n         SPACE 3\nALLOC$OK MVC   0(2,R4),=H'8'            Set length of this DDname\n         MVC   2(8,R4),T1#DDN+6         Move in this DDname\n         LA    R4,10(,R4)               Increment to next DDname slot\n         SPACE 2\nSKIPDSN  LA    R6,DSE@@LEN(,R6)         Increment to next DSNAME slot\n         BCT   R5,ALLOC$LP              Alloc all dsnames for this lib\n         SPACE 1\n         DROPX R6                       DSENTRY\n         SPACE 3\n*---  Concatenate all the DDnames                                  ---*\n         CH    R7,=H'1'                 More than 1 to CONCAT?\n         BE    CONCATOK                 No - so skip the CONCAT\n         STH   R7,T2#DDN+2              Save # of DDnames for CONCAT\n         LA    R0,TEXTLST2              -> Text Unit address list\n         ST    R0,$99TXTPP              Set in Request Block\n         XC    $99FLAG1,$99FLAG1\n         XC    $99ERROR(L'$99ERROR+L'$99INFO),$99ERROR\n         MVI   $99VERB,S99VRBCC         Indicate CONCATENATION\n         LA    R1,$99RBPTR\n         SVC   99                       Concat all datasets\n         LTR   R15,R15                  OK?\n         BZ    CONCATOK                 Yes\n         SPACE 1\n         MVC   BUFFER,BLANKS            Clear message buffer\n         MVC   BUFFER(35),=C'*** Concatenation failed for DDname'\n         MVC   BUFFER+36(8),DS@DDN      Fill in DDname\n         LA    R2,BUFFER+45             -> Area for return codes\n         BAL   LINK,DYN$ERR             Format R15, Error & info\n         TPUTX '*******************************************************$\n               ***********************'\n         ABEND 5,DUMP\n         SPACE 2\nCONCATOK LA    R2,DS@@LEN(,R2)          -> Next Library Descriptor\n         BCT   R3,MAINLOOP              Process all 5 libraries\n         B     LEAVE                    All done!\n         SPACE 2\n         DROPX R2                       DSDESC\n         SPACE 3\nDYN$ERR  TPUTX '*******************************************************$\n               ***********************'\n         MVC   0(33,R2),=C'(R15=XXXX,ERR=XXXX,INFO=XXXX) ***'\n         ST    R15,TEMP1                Set down SVC99's return code\n         HEX   (5,R2),TEMP1+2,LEN=2,BYTE=C','  FORMAT IT INTO MESSAGE\n         HEX   (14,R2),$99ERROR,LEN=2,BYTE=C','\n         HEX   (24,R2),$99INFO,LEN=2,BYTE=C')'\n         TPUTX BUFFER,L'BUFFER          Display the message\n         BR    LINK                     Return to caller\n         SPACE 3\n         DROPX ,\n         EJECT\n*---------------------------------------------------------------------*\n*  PARSE validify check exit to save a dsname for \"CLIST()\"       U001*\n*---------------------------------------------------------------------*\nVAL#C    STM   R14,R12,12(R13)          Save PARSE'S registers\n         LA    R15,VAL#DSN-VAL#C(,R15)  Adjust base for common routine\n         LA    R2,@@CLIST-WORKD         Offset of CLIST dsn descriptor\n         BR    R15                      Go to common routine\n         SPACE 2\n*---------------------------------------------------------------------*\n*  PARSE validify check exit to save a dsname for \"HELP()\"        U002*\n*---------------------------------------------------------------------*\nVAL#H    STM   R14,R12,12(R13)          Save PARSE'S registers\n         LA    R15,VAL#DSN-VAL#H(,R15)  Adjust base for common routine\n         LA    R2,@@HELP-WORKD          Offset of HELP dsn descriptor\n         BR    R15                      Go to common routine\n         SPACE 2\n*---------------------------------------------------------------------*\n*  PARSE validify check exit to save a dsname for \"LOAD()\"            *\n*---------------------------------------------------------------------*\nVAL#L    STM   R14,R12,12(R13)          Save PARSE'S registers\n         LA    R15,VAL#DSN-VAL#L(,R15)  Adjust base for common routine\n         LA    R2,@@LOAD-WORKD          Offset of LOAD dsn descriptor\n         BR    R15                      Go to common routine\n         SPACE 2\n*---------------------------------------------------------------------*\n*  PARSE validify check exit to save a dsname for \"MSGS()\"            *\n*---------------------------------------------------------------------*\nVAL#M    STM   R14,R12,12(R13)          Save PARSE'S registers\n         LA    R15,VAL#DSN-VAL#M(,R15)  Adjust base for common routine\n         LA    R2,@@MSGS-WORKD          Offset of MSGS dsn descriptor\n         BR    R15                      Go to common routine\n         SPACE 2\n*---------------------------------------------------------------------*\n*  PARSE validify check exit to save a dsname for \"PANELS()\"          *\n*---------------------------------------------------------------------*\nVAL#P    STM   R14,R12,12(R13)          Save PARSE'S registers\n         LA    R15,VAL#DSN-VAL#P(,R15)  Adjust base for common routine\n         LA    R2,@@PANELS-WORKD        Offset of PANELS dsn descriptor\n         BR    R15                      Go to common routine\n         SPACE 2\n*---------------------------------------------------------------------*\n*  PARSE validify check exit to save a dsname for \"SKELS()\"           *\n*---------------------------------------------------------------------*\nVAL#S    STM   R14,R12,12(R13)          Save PARSE'S registers\n         LA    R15,VAL#DSN-VAL#S(,R15)  Adjust base for common routine\n         LA    R2,@@SKELS-WORKD         Offset of SKELS dsn descriptor\n         BR    R15                      Go to common routine\n         SPACE 2\n*---------------------------------------------------------------------*\n*  PARSE validify check exit to save a dsname for \"TABLES()\"          *\n*---------------------------------------------------------------------*\nVAL#T    STM   R14,R12,12(R13)          Save PARSE'S registers\n         LR    R12,R15                  Get a base register        U003\n         USNGX VAL#T,R12                                           U003\n*---  If this is the first table specification, find and save the  ---*\n*---  current first library in the TIOT, so that it remains first  ---*\n         L     R11,4(,R1)               Get addr of WORKD          U003\n         USNGX WORKD,R11                                           U003\n         LA    R2,@@TABLES              -> ISPTLIB descriptor      U003\n         USNGX DSDESC,R2                                           U003\n         CLC   DS@NBR,=F'0'             Any here yet?              U003\n         BNE   VAL#T$OK                 Yes - continue normally    U003\n         L     R14,DS@NEXT              -> Next dsname slot        U003\n         USNGX DSENTRY,R14                                         U003\n         MVC   0(DSE@@LEN,R14),BLANKS   Clear it                   U003\n         L     R1,PSATNEW-PSA           -> My TCB                  U003\n         L     R1,TCBTIO-TCB(,R1)       -> My TIOT                 U003\n         LA    R1,TIOENTRY-TIOT1(,R1)   -> First device entry      U003\n         USNGX TIOENTRY,R1                                         U003\n         SR    R0,R0                    Clear for IC               U003\n         SPACE 2\nVAL#T$LP CLC   =F'0',0(R1)              End of TIOT?               U003\n         BE    VAL#T$OK                 Yes - should never occur   U003\n         CLC   =C'ISPTLIB ',TIOEDDNM    Tables library?            U003\n         BE    VAL#T$SV                 Yes - save first ds info   U003\n         IC    R0,TIOELNGH              Get len of this TIOT entry U003\n         AR    R1,R0                    -> next TIOT entry         U003\n         B     VAL#T$LP                 Scan whole TIOT            U003\n         SPACE 1\nVAL#T$SV SR    R15,R15                  Clear for ICM              U003\n         ICM   R15,B'0111',TIOEJFCB     -> JFCB Prefix             U003\n         MVC   0(44,R14),16(R15)        Save the dsname            U003\n         SR    R4,R4                    Clear for ICM              U003\n         ICM   R4,B'0111',TIOEFSRT      -> UCB                     U003\n         DROPX R1                       TIOENTRY                   U003\n         USNGX UCBOB,R4                                            U003\n         MVC   DSE@VOL,UCBVOLI          Save VOLSER                U003\n         SR    R1,R1                    Clear for IC               U003\n         IC    R1,UCBTBYT4              Get DASD device type code  U003\n         SLL   R1,3                     * 8                        U003\n         LA    R1,DEVTYPES-8(R1)        -> Char form of devtype    U003\n         MVC   DSE@UNIT,0(R1)           Save it in dsn table       U003\n         DROPX R4                       UCBOB                      U003\n         MVC   DS@NBR,=F'1'             Set count for this one     U003\n         LA    R14,DSE@@LEN(,R14)       -> Next dsname slot        U003\n         ST    R14,DS@NEXT              Store updated pointer      U003\n         DROPX R14,R2                   DSENTRY, DSDESC            U003\n         SPACE 1\nVAL#T$OK LM    R14,R12,12(R13)          Restore entry registers    U003\n*---  And now the standard code for these routines                 ---*\n         LA    R15,VAL#DSN-VAL#T(,R15)  Adjust base for common routine\n         LA    R2,@@TABLES-WORKD        Offset of TABLES dsn descriptor\n         BR    R15                      Go to common routine\n         SPACE 1\n         DROPX R12,R11                  VAL#T, WORKD               U003\n         SPACE 3\n*---------------------------------------------------------------------*\n*  PARSE validify check exit -- common code                           *\n*---------------------------------------------------------------------*\nVAL#DSN  LR    R12,R15                  Get my base\n         USNGX VAL#DSN,R12\n         LM    R10,R11,0(R1)            Get addr of PDE & WORKD\n         USNGX DSNPDE,R10\n         USNGX WORKD,R11\n         AR    R2,R11                   Relocate dsname descriptor ptr\n         USNGX DSDESC,R2\n         L     R15,DS@NBR               Get current count\n         LA    R15,1(,R15)              Increment\n         ST    R15,DS@NBR               Store updated count\n         L     R14,DS@NEXT              -> Next dsname slot\n         USNGX DSENTRY,R14\n         MVC   0(DSE@@LEN,R14),BLANKS   Clear it\n         LH    R1,PDEDSNL               Get length of dsn\n         BCTR  R1,0                     -1 for EX\n         L     R15,PDEDSNA              -> dsn\n         EX    R1,MVC#DSN               MVC 0(*-*,R14),0(R15)\n         LA    R14,DSE@@LEN(,R14)       -> Next dsname slot\n         ST    R14,DS@NEXT              Store updated pointer\n         LM    R14,R12,12(R13)          Restore caller's registers\n         SR    R15,R15                  Indicate \"Parameter is valid\"\n         BR    R14                      Return to PARSE\n         DROPX R2                       DSDESC\nMVC#DSN  MVC   DSE@DSN(*-*),0(R15)      << Executed >>\n         DROPX R12,R11,R10,R14          VAL#DSN, WORKD, DSNPDE, DSENTRY\n         SPACE 3\n         LTORG\n         EJECT\nWORKD    DSECT                          RESUME\nTEMP1    DS    F                        For hex convert\nZEROVARS EQU   *                        Start of area to be cleared\n         SPACE 2\nDSDESC   DSECT                          Format of DSN array descriptors\nDS@TOP   DS    A                        -> First dsn\nDS@NEXT  DS    A                        -> Next available dsn slot\nDS@NBR   DS    F                        Current number of dataset names\nDS@NAME  DS    CL8                      External id of this array\nDS@DDN   DS    CL8                      SPF DDname for this array\nDS@@LEN  EQU   *-DSDESC                 Length of 1 array descriptor\n         SPACE 2\nWORKD    DSECT                          RESUME\n*\n@@CLIST  DS    0A                                                  U001\nP@CLIST  DS    A                        -> First CLIST dsname slot U001\nA@CLIST  DS    A                        -> Next CLIST dsname slot  U001\nN@CLIST  DS    F                        Current nbr of CLIST dsns  U001\nL@CLIST  DS    CL8                      'CLIST'                    U001\nD@CLIST  DS    CL8                      'SYSPROC'                  U001\n*\n@@HELP   DS    0A                                                  U002\nP@HELP   DS    A                        -> First HELP dsname slot  U002\nA@HELP   DS    A                        -> Next HELP dsname slot   U002\nN@HELP   DS    F                        Current nbr of HELP dsns   U002\nL@HELP   DS    CL8                      'HELP'                     U002\nD@HELP   DS    CL8                      'SYSHELP'                  U002\n*\n@@LOAD   DS    0A\nP@LOAD   DS    A                        -> First LOAD dsname slot\nA@LOAD   DS    A                        -> Next LOAD dsname slot\nN@LOAD   DS    F                        Current number of LOAD dsns\nL@LOAD   DS    CL8                      'LOAD'\nD@LOAD   DS    CL8                      'ISPLLIB'\n*\n@@MSGS   DS    0A\nP@MSGS   DS    A                        -> First MSGS dsname slot\nA@MSGS   DS    A                        -> Next MSGS dsname slot\nN@MSGS   DS    F                        Current number of MSGS dsns\nL@MSGS   DS    CL8                      'MSGS'\nD@MSGS   DS    CL8                      'ISPMLIB'\n*\n@@PANELS DS    0A\nP@PANELS DS    A                        -> First PANELS dsname slot\nA@PANELS DS    A                        -> Next PANELS dsname slot\nN@PANELS DS    F                        Current number of PANELS dsns\nL@PANELS DS    CL8                      'PANELS'\nD@PANELS DS    CL8                      'ISPPLIB'\n*\n@@SKELS  DS    0A\nP@SKELS  DS    A                        -> First SKELS dsname slot\nA@SKELS  DS    A                        -> Next SKELS dsname slot\nN@SKELS  DS    F                        Current number of SKELS dsns\nL@SKELS  DS    CL8                      'SKELS'\nD@SKELS  DS    CL8                      'ISPSLIB'\n*\n@@TABLES DS    0A\nP@TABLES DS    A                        -> First TABLES dsname slot\nA@TABLES DS    A                        -> Next TABLES dsname slot\nN@TABLES DS    F                        Current number of TABLES dsns\nL@TABLES DS    CL8                      'TABLES'\nD@TABLES DS    CL8                      'ISPTLIB'\n*\nFLAGS    DS    B                                                   U001\nF@LIST    EQU   B'10000000'             \"LIST\" option requested    U001\nF@DEBUG   EQU   B'01000000'             \"DEBUG\" option requested   U002\nF@ADD     EQU   B'00100000'             \"ADD\" option requested     U002\n*\nBUFFER   DS    CL120\n         SPACE 3\n*---------------------------------------------------------------------*\n*  Parmlist for SVC 99                                                *\n*---------------------------------------------------------------------*\n         DC    0A(0)                    Alignment\n$99RBPTR DC    X'80',AL3($99RBLEN)\n         SPACE 1\n$99RBLEN DC    AL1(20)                  Length\n$99VERB  DC    AL1(*-*)                 Verb code\n$99FLAG1 DC    X'0000'\n$99ERROR DC    H'0'                     Error reason code\n$99INFO  DC    H'0'                     Information reason code\n$99TXTPP DC    A(*-*)                   -> Text units\n         DC    A(0),F'0'                Reserved;  FLAGS2\n         SPACE 2\n*---------------------------------------------------------------------*\n*  Text elements to ALLOC input dataset                               *\n*---------------------------------------------------------------------*\nTEXTLST1 DC    A(T1#DSN,T1#SHR,T1#PERM,T1#DDN,T1#VOL,T1#UNIT)\n         SPACE 1\nT1#DSN   DC    Y(DALDSNAM,1,44),CL44' ' DSNAME\nT1#SHR   DC    Y(DALSTATS,1,1),X'08'    DISP=SHR\nT1#PERM  DC    Y(DALPERMA,0)            Permanently allocated\nT1#DDN   DC    Y(DALRTDDN,1,8),CL8' '   Return DDname\nT1#VOL   DC    Y(DALVLSER,1,6),CL6' '   VOLSER\nT1#UNIT  DC    Y(DALUNIT,1,8),CL8' '    UNIT type\n         SPACE 2\n*---------------------------------------------------------------------*\n*  Text elements for CONCATENATION function                           *\n*---------------------------------------------------------------------*\nTEXTLST2 DC    A(T2#DDN,T2#PERM)\n         SPACE 1\nT2#DDN   DC    Y(DCCDDNAM,*-*),16XL(2+8)'00'  DDnames\nT2#PERM  DC    Y(DCCPERMC,0)            Permanently concatenated\n         SPACE 2\n*---------------------------------------------------------------------*\n*  Text elements for UNALLOCATION                                     *\n*---------------------------------------------------------------------*\nTEXTLST3 DC    A(T3#DDN,T3#UNALC)\n         SPACE 1\nT3#DDN   DC    Y(DUNDDNAM,1,8),CL8' '   DDname\nT3#UNALC DC    Y(DUNUNALC,0)            Unalloc even if PERM alloc\n         SPACE 3\n*---------------------------------------------------------------------*\n*  DSNAME arrays for each DDname                                      *\n*---------------------------------------------------------------------*\n         SPACE 2\nDSENTRY  DSECT\nDSE@DSN  DS    CL44                     Dsname\nDSE@VOL  DS    CL6                      Volser or blank\nDSE@UNIT DS    CL8                      Unit or blank\nDSE@@LEN EQU   *-DSENTRY                Length of one entry\n         SPACE 2\nWORKD    DSECT                          Resume\n*---  DSNAME/VOLUME/UNIT Arrays                                    ---*\nAR@CLIST DS    16XL(DSE@@LEN)                                      U001\nAR@HELP  DS    16XL(DSE@@LEN)                                      U002\nAR@LOAD  DS    16XL(DSE@@LEN)\nAR@MSGS  DS    16XL(DSE@@LEN)\nAR@PNLS  DS    16XL(DSE@@LEN)\nAR@SKLS  DS    16XL(DSE@@LEN)\nAR@TBLS  DS    16XL(DSE@@LEN)\n         SPACE 1\nZEROLEN  EQU   *-ZEROVARS               Length to clear\n         SPACE 1\nWORKLEN  EQU   *-WORKD                  For OSENTER macro\n         SPACE 3\nSPFLIB   CSECT                          Resume\n         EJECT\nHEXTAB   HEXTAB  DUAL=NO\nBLANKS   DC    CL(L'BUFFER)' '\nDEVTYPES DC    C'2311    2301    2303    2302    2321    2305-1  2305-2$\n                 2314    3330    3340    3350    3375    3330-1  3380  $\n                 ??0F    '\n         SPACE 1\nLINK     EQU   R10                      Primary linkage register\n         EJECT\n***********************************************************************\n*                                                                     *\n*   SYNTAX:                                                           *\n*                                                                     *\n*      SPFLIB LOAD(mdsn1 mdsn2 ...) MSGS(pdsn1 pdsn2 ...)             *\n*                                                                     *\n*           PANELS(sdsn1 sdsn2 ...) SKELS(tdsn1 tdsn2 ...)            *\n*                                                                     *\n*           TABLES(ldsn1 ldsn2 ...) CLIST(cdsn1 cdsn2 ...)            *\n*                                                                     *\n*           HELP(hdsn1 hdsn2 ...)                                     *\n*                                                                     *\n*           LIST/NOLIST/DEBUG                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         PRINT NOGEN                    Save 10 pages\n         SPACE 2\nPCL      IKJPARM  DSECT=PDL\n*---------------------------------------------------------------------*\nP#LIST   IKJKEYWD\n*---------------------------------------------------------------------*\n         IKJNAME  'LIST'                                           U001\n         IKJNAME  'NOLIST'                                         U001\n*---------------------------------------------------------------------*\nP#DEBUG  IKJKEYWD\n*---------------------------------------------------------------------*\n         IKJNAME  'DEBUG'                                          U002\n*---------------------------------------------------------------------*\nP#ADD    IKJKEYWD\n*---------------------------------------------------------------------*\n         IKJNAME  'ADD'                                            U002\n*---------------------------------------------------------------------*\nP#CLIST  IKJKEYWD\n*---------------------------------------------------------------------*\n         IKJNAME  'CLIST',SUBFLD=S#CLIST                           U001\n*---------------------------------------------------------------------*\nP#HELP   IKJKEYWD\n*---------------------------------------------------------------------*\n         IKJNAME  'HELP',SUBFLD=S#HELP                             U002\n*---------------------------------------------------------------------*\nP#LOAD   IKJKEYWD\n*---------------------------------------------------------------------*\n         IKJNAME  'LOAD',SUBFLD=S#LOAD\n*---------------------------------------------------------------------*\nP#MSGS   IKJKEYWD\n*---------------------------------------------------------------------*\n         IKJNAME  'MSGS',SUBFLD=S#MSGS\n*---------------------------------------------------------------------*\nP#PANELS IKJKEYWD\n*---------------------------------------------------------------------*\n         IKJNAME  'PANELS',SUBFLD=S#PANELS\n*---------------------------------------------------------------------*\nP#SKELS  IKJKEYWD\n*---------------------------------------------------------------------*\n         IKJNAME  'SKELS',SUBFLD=S#SKELS\n*---------------------------------------------------------------------*\nP#TABLES IKJKEYWD\n*---------------------------------------------------------------------*\n         IKJNAME  'TABLES',SUBFLD=S#TABLES\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\nS#CLIST  IKJSUBF  ,                                                U001\n*---------------------------------------------------------------------*\nI#CLIST  IKJPOSIT  DSTHING,USID,VALIDCK=VAL#C,                     U001$\n               PROMPT='Dataset name',                              U001$\n               HELP='Name(s) of CLIST libraries'                   U001\n*---------------------------------------------------------------------*\nI#CLST02 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#C                      U001\n*---------------------------------------------------------------------*\nI#CLST03 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#C                      U001\n*---------------------------------------------------------------------*\nI#CLST04 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#C                      U001\n*---------------------------------------------------------------------*\nI#CLST05 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#C                      U001\n*---------------------------------------------------------------------*\nI#CLST06 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#C                      U001\n*---------------------------------------------------------------------*\nI#CLST07 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#C                      U001\n*---------------------------------------------------------------------*\nI#CLST08 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#C                      U001\n*---------------------------------------------------------------------*\nI#CLST09 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#C                      U001\n*---------------------------------------------------------------------*\nI#CLST10 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#C                      U001\n*---------------------------------------------------------------------*\nI#CLST11 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#C                      U001\n*---------------------------------------------------------------------*\nI#CLST12 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#C                      U001\n*---------------------------------------------------------------------*\nI#CLST13 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#C                      U001\n*---------------------------------------------------------------------*\nI#CLST14 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#C                      U001\n*---------------------------------------------------------------------*\nI#CLST15 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#C                      U001\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\nS#HELP   IKJSUBF  ,                                                U002\n*---------------------------------------------------------------------*\nI#HELP   IKJPOSIT  DSTHING,USID,VALIDCK=VAL#H,                     U002$\n               PROMPT='Dataset name',                              U002$\n               HELP='Name(s) of HELP libraries'                    U002\n*---------------------------------------------------------------------*\nI#HELP02 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#H                      U002\n*---------------------------------------------------------------------*\nI#HELP03 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#H                      U002\n*---------------------------------------------------------------------*\nI#HELP04 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#H                      U002\n*---------------------------------------------------------------------*\nI#HELP05 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#H                      U002\n*---------------------------------------------------------------------*\nI#HELP06 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#H                      U002\n*---------------------------------------------------------------------*\nI#HELP07 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#H                      U002\n*---------------------------------------------------------------------*\nI#HELP08 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#H                      U002\n*---------------------------------------------------------------------*\nI#HELP09 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#H                      U002\n*---------------------------------------------------------------------*\nI#HELP10 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#H                      U002\n*---------------------------------------------------------------------*\nI#HELP11 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#H                      U002\n*---------------------------------------------------------------------*\nI#HELP12 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#H                      U002\n*---------------------------------------------------------------------*\nI#HELP13 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#H                      U002\n*---------------------------------------------------------------------*\nI#HELP14 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#H                      U002\n*---------------------------------------------------------------------*\nI#HELP15 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#H                      U002\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\nS#LOAD   IKJSUBF\n*---------------------------------------------------------------------*\nI#LOAD   IKJPOSIT  DSTHING,USID,VALIDCK=VAL#L,                         $\n               PROMPT='Dataset name',                                  $\n               HELP='Name(s) of SPF LOAD libraries'\n*---------------------------------------------------------------------*\nI#LOAD02 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#L\n*---------------------------------------------------------------------*\nI#LOAD03 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#L\n*---------------------------------------------------------------------*\nI#LOAD04 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#L\n*---------------------------------------------------------------------*\nI#LOAD05 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#L\n*---------------------------------------------------------------------*\nI#LOAD06 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#L\n*---------------------------------------------------------------------*\nI#LOAD07 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#L\n*---------------------------------------------------------------------*\nI#LOAD08 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#L\n*---------------------------------------------------------------------*\nI#LOAD09 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#L\n*---------------------------------------------------------------------*\nI#LOAD10 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#L\n*---------------------------------------------------------------------*\nI#LOAD11 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#L\n*---------------------------------------------------------------------*\nI#LOAD12 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#L\n*---------------------------------------------------------------------*\nI#LOAD13 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#L\n*---------------------------------------------------------------------*\nI#LOAD14 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#L\n*---------------------------------------------------------------------*\nI#LOAD15 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#L\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\nS#MSGS   IKJSUBF\n*---------------------------------------------------------------------*\nI#MSGS   IKJPOSIT  DSTHING,USID,VALIDCK=VAL#M,                         $\n               PROMPT='Dataset name',                                  $\n               HELP='Name(s) of SPF MSGS libraries'\n*---------------------------------------------------------------------*\nI#MSGS02 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#M\n*---------------------------------------------------------------------*\nI#MSGS03 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#M\n*---------------------------------------------------------------------*\nI#MSGS04 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#M\n*---------------------------------------------------------------------*\nI#MSGS05 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#M\n*---------------------------------------------------------------------*\nI#MSGS06 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#M\n*---------------------------------------------------------------------*\nI#MSGS07 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#M\n*---------------------------------------------------------------------*\nI#MSGS08 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#M\n*---------------------------------------------------------------------*\nI#MSGS09 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#M\n*---------------------------------------------------------------------*\nI#MSGS10 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#M\n*---------------------------------------------------------------------*\nI#MSGS11 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#M\n*---------------------------------------------------------------------*\nI#MSGS12 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#M\n*---------------------------------------------------------------------*\nI#MSGS13 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#M\n*---------------------------------------------------------------------*\nI#MSGS14 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#M\n*---------------------------------------------------------------------*\nI#MSGS15 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#M\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\nS#PANELS IKJSUBF\n*---------------------------------------------------------------------*\nI#PANELS IKJPOSIT  DSTHING,USID,VALIDCK=VAL#P,                         $\n               PROMPT='Dataset name',                                  $\n               HELP='Name(s) of SPF PANELS libraries'\n*---------------------------------------------------------------------*\nI#PNLS02 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#P\n*---------------------------------------------------------------------*\nI#PNLS03 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#P\n*---------------------------------------------------------------------*\nI#PNLS04 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#P\n*---------------------------------------------------------------------*\nI#PNLS05 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#P\n*---------------------------------------------------------------------*\nI#PNLS06 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#P\n*---------------------------------------------------------------------*\nI#PNLS07 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#P\n*---------------------------------------------------------------------*\nI#PNLS08 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#P\n*---------------------------------------------------------------------*\nI#PNLS09 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#P\n*---------------------------------------------------------------------*\nI#PNLS10 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#P\n*---------------------------------------------------------------------*\nI#PNLS11 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#P\n*---------------------------------------------------------------------*\nI#PNLS12 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#P\n*---------------------------------------------------------------------*\nI#PNLS13 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#P\n*---------------------------------------------------------------------*\nI#PNLS14 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#P\n*---------------------------------------------------------------------*\nI#PNLS15 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#P\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\nS#SKELS  IKJSUBF\n*---------------------------------------------------------------------*\nI#SKELS  IKJPOSIT  DSTHING,USID,VALIDCK=VAL#S,                         $\n               PROMPT='Dataset name',                                  $\n               HELP='Name(s) of SPF SKELS libraries'\n*---------------------------------------------------------------------*\nI#SKLS02 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#S\n*---------------------------------------------------------------------*\nI#SKLS03 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#S\n*---------------------------------------------------------------------*\nI#SKLS04 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#S\n*---------------------------------------------------------------------*\nI#SKLS05 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#S\n*---------------------------------------------------------------------*\nI#SKLS06 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#S\n*---------------------------------------------------------------------*\nI#SKLS07 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#S\n*---------------------------------------------------------------------*\nI#SKLS08 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#S\n*---------------------------------------------------------------------*\nI#SKLS09 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#S\n*---------------------------------------------------------------------*\nI#SKLS10 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#S\n*---------------------------------------------------------------------*\nI#SKLS11 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#S\n*---------------------------------------------------------------------*\nI#SKLS12 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#S\n*---------------------------------------------------------------------*\nI#SKLS13 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#S\n*---------------------------------------------------------------------*\nI#SKLS14 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#S\n*---------------------------------------------------------------------*\nI#SKLS15 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#S\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\nS#TABLES IKJSUBF\n*---------------------------------------------------------------------*\nI#TABLES IKJPOSIT  DSTHING,USID,VALIDCK=VAL#T,                         $\n               PROMPT='Dataset name',                                  $\n               HELP='Name(s) of SPF TABLES libraries'\n*---------------------------------------------------------------------*\nI#TBLS02 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#T\n*---------------------------------------------------------------------*\nI#TBLS03 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#T\n*---------------------------------------------------------------------*\nI#TBLS04 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#T\n*---------------------------------------------------------------------*\nI#TBLS05 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#T\n*---------------------------------------------------------------------*\nI#TBLS06 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#T\n*---------------------------------------------------------------------*\nI#TBLS07 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#T\n*---------------------------------------------------------------------*\nI#TBLS08 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#T\n*---------------------------------------------------------------------*\nI#TBLS09 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#T\n*---------------------------------------------------------------------*\nI#TBLS10 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#T\n*---------------------------------------------------------------------*\nI#TBLS11 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#T\n*---------------------------------------------------------------------*\nI#TBLS12 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#T\n*---------------------------------------------------------------------*\nI#TBLS13 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#T\n*---------------------------------------------------------------------*\nI#TBLS14 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#T\n*---------------------------------------------------------------------*\nI#TBLS15 IKJPOSIT  DSTHING,USID,VALIDCK=VAL#T\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n         IKJENDP\n*---------------------------------------------------------------------*\n         EJECT ,\n         IEFZB4D0 ,\n         EJECT ,\n         IEFZB4D2 ,\n         SPACE 2\n         IKJCVT  ,\n         SPACE 2\nDSNPDE   DSECT\nPDEDSNA  DS    A                        -> dsn\nPDEDSNL  DS    H                        L'dsn\nPDEFLG1  DS    X\nPDEF1PRS  EQU   X'80'                   dsn present\n         DS    X                        reserved\n         SPACE 1\nPDEMBRA  DS    A                        -> member name\nPDEMBRL  DS    H                        L'member name\nPDEFLG2  DS    X\nPDEF2PRS  EQU   X'80'                   member name present\n         DS    X                        reserved\n         SPACE 1\nPDEPSWDA DS    A                        -> password\nPDEPSWDL DS    H                        L'password\nPDEFLG3  DS    X\nPDEF3PRS  EQU   X'80'                   password present\n         DS    X                        reserved\n         SPACE 2\n         PRINT NOGEN\n         IHAPSA\n         IKJTCB\nTIOT     DSECT\n         IEFTIOT1\nUCB      DSECT\n         IEFUCBOB\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TALK": {"ttr": 11526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x87\\x08\\x1f\\x00\\x92\\t\\x0f I\\x00\\xc3\\x00S\\x00t\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1987-03-22T00:00:00", "modifydate": "1992-03-30T20:49:00", "lines": 195, "newlines": 83, "modlines": 116, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1990 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nTALK     TITLE '-----  Simple two-way TSO communication  -----'\n*---------------------------------------------------------------------*\n*                                                                     *\n*   Program name:  TALK                                               *\n*                                                                     *\n*   Purpose:       Provide a simple alternative to repeated SENDs     *\n*                                                                     *\n*   Author:        Leonard D. Woren                                   *\n*                                                                     *\n*   Date:          March 21, 1987                                     *\n*                                                                     *\n*   Attributes:    None                                               *\n*                                                                     *\n*   Installation:  University of Southern California                  *\n*                                                                     *\n*   Updates:                                                          *\n*      13Apr87  U001 LDW - Indent prompt and change TGET length       *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\nTALK     OSENTER  EXIT=LEAVE,RC=0,PARMREG=R2,ADDRREG=R14,LENREG=R15,   $\n               ENV=(CALL,SIM)\n         LTR   R15,R15                  Any parm?\n         BNZ   HAVEPARM                 Yes - continue\n         TPUTX 'TALK - target userid operand required'\n         B     LEAVE\n         SPACE 2\nMVC$PARM OC    HISID(*-*),0(R14)        << Executed >>\nHAVEPARM CH    R15,=H'8'                Too long?\n         BL    PARM$OK                  No - continue\n         TPUTX 'TALK - target userid invalid (> 7 characters)'\n         B     LEAVE\n         SPACE 2\nPARM$OK  BCTR  R15,0                    -1 for EX\n         EX    R15,MVC$PARM             OC  hisid,0(R14)\n         L     R1,16                    -> CVT\n         L     R1,0(,R1)                -> Dispatch\n         L     R1,4(,R1)                -> TCB\n         L     R1,180(,R1)              -> JSCB\n         L     R1,264(,R1)              -> PSCB\n*        MVC   PROMPT(7),PSCBUSER-PSCB(R1)  Move in my userid\n         MVC   PROMPT(7),0(R1)          Move in my userid\n         MVC   PROMPT+27(7),0(R1)       Move in my userid\n         MVC   BYEMSG(7),0(R1)          Move in my userid\n         MVC   MYID(7),0(R1)            Move in my userid\n         SR    R15,R15                  Clear for IC\n         IC    R15,7(R1)                Get userid length\n         LA    R15,MYID(R15)            -> past end of userid\n         MVI   0(R15),C':'              Put in separator\n         TPUT  PROMPT,PROMPTL,USERIDL=HISID   Prompt the other guy\n         BAL   R11,TPUT_CHK             Check the TPUT return code\n         TPUTX 'Enter null (not blank) line to wait, \"end\" to exit'\n         SPACE 2\n*LOOP    TPUTX '>',ASIS\nLOOP     TPUTX '        >',ASIS                                    U001\n*        ???\n         LA    R1,BUFFER\n         LA    R0,L'BUFFER\n         TGET  (1),(0)\n*        ???\n         LTR   R1,R1                    Any input?\n         BNP   LOOP                     No - just ask again\n         MVC   WORK(3),BUFFER           Get first part of input\n         OC    WORK(3),=CL3' '          Upper case it\n         CLC   =C'END',WORK             Want out?\n         BE    BYE                      Yes\n         LA    R0,L'MYID(,R1)           Get length of input\n         TPUT  MYID,(0),USERIDL=HISID     So do it\n         BAL   R11,TPUT_CHK             Check the TPUT return code\n         B     LOOP\n         SPACE 2\nBYE      TPUT  BYEMSG,BYEMSGL,USERIDL=HISID\n         B     LEAVE\n         SPACE 2\nTPUT_CHK B     *+4(R15)                 decode TPUT return code\n         BR    R11                      00 - ok\n         NOPR  0                        filler\n         B     TPUT_ERR                 04 - no buffers\n         B     TPUT_ERR                 08 - attn\n         B     TPUTRC12                 12 - nointercom\n         B     TPUT_ERR                 16 - bad parmlist\n         B     TPUTRC20                 20 - disc or not logged on\n         SPACE 1\nTPUT_ERR MVC   ERRMSG+ERRMSGL-8(8),HISID\n         TPUTX ERRMSG,ERRMSGL           'Error in TPUT to xxxxxxxx'\n         B     BYE\n         SPACE 1\nTPUTRC12 MVC   NOINT(8),HISID\n         TPUTX NOINT,NOINTL             'xxxxxxxx is not accepting msgs\n         B     BYE\n         SPACE 2\nTPUTRC20 MVC   DISCMSG(8),HISID\n         TPUTX DISCMSG,DISCMSGL         'Error in TPUT to xxxxxxxx'\n         B     BYE\n         SPACE 2\n         LTORG ,\n         SPACE 2\nHISID    DC    CL8' '                   Target hisid\nPROMPT   DC    C'xxxxxxx TALKing, use \"TALK xxxxxxx\" to respond.'\nPROMPTL  EQU   *-PROMPT\nBYEMSG   DC    C'xxxxxxx done TALKing (enter \"END\" to exit).'\nBYEMSGL  EQU   *-BYEMSG\nERRMSG   DC    C'Error in TPUT to xxxxxxxx.'\nERRMSGL  EQU   *-ERRMSG\nNOINT    DC    C'xxxxxxxx is not accepting messages.'\nNOINTL   EQU   *-NOINT\nDISCMSG  DC    C'xxxxxxxx is disconnected or not logged on.'\nDISCMSGL EQU   *-DISCMSG\nMYID     DC    C'xxxxxxx  '             My id, with ':' after\n*BUFFER  DC    CL71' '\nBUFFER   DC    CL69' '                                             U001\nWORK     DC    CL8' '\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TASKLIB": {"ttr": 11530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x04\\x00\\x00\\x00\\x80\\x07\\x9f\\x00\\x88\\x10\\x1f\\x19U\\x01\\xda\\x01\\xa6\\x00F\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.04", "flags": 0, "createdate": "1980-03-19T00:00:00", "modifydate": "1988-04-10T19:55:00", "lines": 474, "newlines": 422, "modlines": 70, "user": "LDW"}, "text": "TLIB     TITLE 'QCTL01 -- TASKLIB EFFECTOR FOR TESTING THE IPS'\n***   COPYRIGHT 1976 - REGENTS OF THE UNIVERSITY OF CALIFORNIA,     ***\n***   CAMPUS COMPUTING NETWORK   (SHARE CODE 'UR')  -  1/15/76      ***\n***   ALTHOUGH WE ARE RUNNING THIS MODULE IN OUR PRODUCTION SYSTEM, ***\n***   NO WARRANTY, EXPRESSED OR IMPLIED, IS MADE BY CCN AS TO THE   ***\n***   FUNCTIONING OR CORRECTNESS OF THE FOLLOWING CODE.             ***\n*F* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*F\n*F\n*F       ID:   QCTL01 ...\n*F             H. C. LUDLAM, FEBRUARY, 1973.\n*  Updates:                                                           *\n*    10Apr88  U006 LDW - Don't CLOSE if didn't OPEN!  (This bug       *\n*                           didn't show up until MVS/XA 2.2)          *\n*                      - Fix id on SAVE to make ASMH V2 happy         *\n*    10/20/82 U005 LDW - SEARCH LPA FOR MODULE TO BE ATTACHED         *\n*    11/18/81 U004 LDW - CHANGE SYSTEMS PROGRAMMER TEST TO PSCBACCT   *\n*    ??/??/79 U003 LDW - ADD ALIASES 'ACP' AND 'ATASKLIB' TO ATTACH   *\n*                           A COMMAND WITH APF AUTHORIZATION          *\n*                           (REQUIRES THIS COMMAND TO BE IN IKJEFTE2) *\n*    ??/??/79 U002 LDW - ADD ALIAS OF 'CP' TO ASSUME DDNAME=SYSCP     *\n*    ??/??/79 U001 LDW - FIX FOR MVS (ATTACH LIST IS LONGER)          *\n*                                                                     *\n*F       FUNCTION:\n*F             THIS IS A TSO COMMAND PROCESSOR WHICH ALLOWS THE\n*F             INVOCATION OF ANOTHER COMMAND PROCESSOR OR PROCEDURE\n*F             WITH THE SPECIFICATION OF A TASK LIBRARY.\n*F             THIS IS SOMEWHAT LIKE BEING ABLE TO 'CALL' A\n*F             COMMAND PROCESSOR.  (NOTE THAT THE LIBRARY IS NOT\n*F             IN EFFECT DURING THE EXECUTION OF A COMMAND\n*F             PROCEDURE, BUT ONLY DURING THE BUILDING OF IT.)\n*F             THE MODULE IS NORMALLY STORED UNDER AN ALIAS OF\n*F             'TASKLIB.'\n*F       ENTRY:\n*F             THE MODULE CAN BE INVOKED VIA ANY MEANS THAT WILL\n*F             PASS A CPPL VIA R1.  THIS INCLUDES DIRECT INVOCATION\n*F             BY COMMAND 'TASKLIB' OR  INDIRECT INVOCATION THROUGH\n*F             'TEST.'  IT DOES NOT INCLUDE 'CALL.'\n*F             THE INPUT COMMAND BUFFER CONTAINS:\n*F\n*F                  TASKLIB   FILE  COMMAND   OPERANDS -OR-\n*F                  CP              COMMAND   OPERANDS             U002\n*F                  ACP             COMMAND   OPERANDS             U003\n*F\n*F             WHERE:  'TASKLIB' IS THE INVOKING COMMAND NAME;\n*F                  'FILE' IS A FILENAME TO BE OPENED AS A TASK\n*F                  LIBRARY (IT SHOULD ALREADY BE COMPLETELY\n*F                  ALLOCATED -- WE USE A FILE INSTEAD OF A DATA\n*F                  SET NAME TO GIVE US A CONCATENATED ABILITY);\n*F                  IF THIS OPERAND IS SPECIFIED AS '*,' NO TASK\n*F                  LIBRARY WILL BE USED.\n*F                  IF THIS COMMAND IS EXECUTED UNDER A NAME OF    U002\n*F                  'CP', A DDNAME OF 'SYSCP' WILL BE USED.        U002\n*F                  IF THIS COMMAND IS EXECUTED UNDER A NAME OF    U003\n*F                  'ACP', NO TASK LIBRARY WILL BE USED.           U003\n*F                  (THE SYSTEM PROGRAMMER PRIVILEGE IS REQUIRED.) U003\n*F                  'COMMAND' IS THE INVOKING COMMAND OF THE CP TO\n*F                   BE EXECUTED UNDER THE TASK LIBRARY;\n*F                  'OPERANDS' IS WHATEVER THE 'COMMAND' PROCESSOR\n*F                  WANTS.\n*F             WHEN THE CP IS ATTACHED, IT WILL RECEIVE THE SAME\n*F             INPUT CPPL AS THIS ROUTINE, BUT ALL NON-BLANK\n*F             CHARACTERS AHEAD OF 'COMMAND' WILL HAVE BEEN\n*F             REPLACED BY BLANKS.\n*F       NORMAL EXIT:\n*F             WHEN THE CP'S ATTACH ECB IS POSTED, THE TASK LIBRARY\n*F             DCB IS CLOSED AND THIS ROUTINE RETURNS NORMALLY.\n*F       ABNORMAL EXIT:\n*F             IF ANY ERROR IS DISCOVERED, THIS ROUTINE WILL ISSUE A\n*F             MESSAGE AND RETURN WITH A CODE OF 8, AS OPPOSED TO THE\n*F             USUAL ZERO.  THE ERROR MESSAGE IS ONE OF THESE\n*F             VARIANTS:\n*F        'QCTL001I TASKLIB FAILED -- INVALID COMMAND SYNTAX.'\n*F                                 -- CANNOT OPEN LIBRARY FILE.'\n*F                                 -- BLDL ERROR.'\n*F             THE NAME 'TASKLIB' IS NOT BUILT IN, BUT WILL APPEAR\n*F             AS WHATEVER ALIAS WAS USED TO INVOKE THIS ROUTINE.\n*F       EXTERNAL ROUTINES:\n*F             IKJSCAN VIA LOAD/CALL/DELETE, IKJPUTL VIA LINK,\n*F             IKJDAIR VIA LINK.\n*F             THE NAMED COMMAND PROCCESSOR, VIA ATTACH.\n*F             OS SUPERVISOR SERVICES:\n*F                  GETMAIN, FREEMAIN, ABEND, OPEN, CLOSE, BLDL, LINK,\n*F                  ATTACH, DETACH, WAIT, IDENTIFY, LOAD, DELETE.\n*F       TABLES / WORKAREAS:\n*F             THE CPPL, CSPL, CSOA, DCB, ECT, ATTACH PARAMETER LIST,\n*F             THE DAIR PARAMETER LIST, AND DAIR BLOCK '2C.'\n*F       ATTRIBUTES:\n*F             REENTRANT; READ-ONLY;  COMPLETELY NON-PRIVILEGED.\n*F       NOTES / DEPENDENCIES\n*F             THE ROUTINE IS TOTALLY DEPENDENT ON THE TSO ENVIRONMENT.\n*F             IT CAN BE USED UNDER 'TEST,' BUT THE MODULE REALLY\n*F             BEING TESTED WILL NOT BE IN CORE UNTIL AFTER A 'GO,'\n*F             WHICH WILL AFFECT CONSOLE TECHNIQUES.\n*F\n*F\n*F* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\n         LCLC  &GEN\n&GEN     SETC  'GEN'\n         PRINT &GEN\n         SPACE 2\nQCTL01   CSECT\n         SPACE\nR0       EQU   0                        THESE ARE REGISTERS WHICH ARE\nR1       EQU   1                        ASSIGNED GLOBAL MEANINS\nR13      EQU   13                       FOR THIS OPERATING SYSTEM.\nR14      EQU   14                       THEY DON'T DESERVE  REAL\nR15      EQU   15                       NAMES.\nCPPLR    EQU    2                       --> INPUT PARAMETER LIST.\nWK       EQU    3                       GENERAL WORK REGISTER.\nSCRET    EQU    4                       RETURN FROM THE SCAN ROUTINE.\nCA       EQU    5                       ADDRESS OF SCANNED COMMAND.\nCLNG     EQU    6                       LENGTH OF SCANNED COMMAND.\nACB      EQU    7                       --> COMMAND BUFFER.\nRC       EQU    8                       HOLDS RETURN CODE.\nSCREG    EQU    9                       HOLDS 'SCAN' ADDRESS.\nBASE     EQU    10                      PROGRAM BASE REGISTER.\nDCBR     EQU    11                      INDICATES PRESENCE OF DCB.\n         EJECT\nTASKLIB  SAVE  (14,12),,TASKLIB_&SYSDATE._&SYSTIME NORMAL, BORING  U006\n         LR    CPPLR,R1                 ENTRY-POINT HOUSEKEEPING.  SAVE\n         USING CPPL,CPPLR               REGS, SET UP ADDRESSABILITIES,\n         LR    BASE,R15\n         USING TASKLIB,BASE\n         L     R0,COREPARM              GET THE DYNAMIC CORE AREA,\n         GETMAIN R,LV=(0)\n         ST    R0,0(,R1)                CHAIN IT INTO THE SAVE\n         ST    R1,8(,R13)               STACK, AND\n         ST    R13,4(,R1)\n         LR    R13,R1                   PUSH DOWN THE STACK.\n         USING DSA,R13\n         SPACE 2\n         MVC   DINIT(256),SINIT         MOVE THE STATIC INTITAL VALUES\n         MVC   DINIT+256(DLINIT-256),SINIT+256                     U001\n         MVC   CSPLUPT,CPPLUPT          INTO THE DYNAMIC AREA.  FILL IN\n         MVC   CSPLECT,CPPLECT          THE ADDRESSES PASSED FROM TSO.\n         MVC   CSPLCBUF,CPPLCBUF\n         MVC   SAVEPSCB,CPPLPSCB\n         LA    WK,DFLAG                 ADJUST THE RELOCATABLE PARTS\n         ST    WK,CSPLFLG               OF THE DYNAMIC AREA.\n         LA    WK,DECB\n         ST    WK,CSPLECB\n         MVI   DECB,0\n         SPACE\n         LA    WK,CSOA\n         ST    WK,CSPLLOA\n         SPACE\n         LOAD  EPLOC=SCNAME             LOAD AND SAVE THE\n         LR    SCREG,R0                 'SCAN' ROUTINE.\n         SPACE\n         BAL   SCRET,SCAN               LOCATE AND CLEAR THE ORIGINAL\n         EX    CLNG,SETNM               COMMAND.  SAVE IT FIRST,\n         EX    CLNG,CLRCOM              MAKING A TENTATIVE MESSAGE\n         LA    CLNG,5(,CLNG)            SEGMENT.\n         STH   CLNG,MSGNAME\n         SPACE\n         SLR   DCBR,DCBR\n         MVI   DFLAG,X'80'\n         SPACE 1\n         CLI   MSGNAME+4,C'A'           AUTHORIZED VERSION?        U003\n         BNE   NOT$A                    NO - SKIP CHECK            U003\n         L     R15,SAVEPSCB             -> PSCB                    U003\n*U004    TM    PSCBATU1-PSCB(R15),PSCBSYSP  SYSTEMS PROGRAMMER?    U003\n         TM    PSCBATR1-PSCB(R15),PSCBACCT  SYSTEMS PROGRAMMER?    U004\n         BNO   ERR4                     NO - BLOW HIM OUT          U003\n         CLC   =C'CP ',MSGNAME+5        IS THIS 'ACP'?             U003\n         BNE   ATASKLIB                 NO - GET THE FILE NAME     U003\n         MVI   DFLAG,X'00'                                         U003\n         B     NOFILE2                  YES - NO FILE NAME TO USE  U003\n         SPACE 2\nNOT$A    CLC   =C'CP ',MSGNAME+4        BY MY ALIAS NAME?          U002\n         BE    CP$CP01                  YES - DDNAME IS 'SYSCP'    U002\n         SPACE 1\nATASKLIB BAL   SCRET,SCAN               BREAKOUT THE FILE NAME.  IF IT\n         MVI   DFLAG,X'00'\n         CLI   0(CA),C'*'               IS '*' THERE IS NO FILE.\n         BE    NOFILE                   OTHERWISE, SET DCB'S IN THE\n         SPACE 1\nCP$CP01  LA    DCBR,DDCB                ATTACH LIST AND A REGISTER.\n         ATTACH SF=(E,DATCH),DCB=(DCBR),TASKLIB=(DCBR)\n         ORG   *-2\n         SPACE\n         CLC   =C'CP ',MSGNAME+4        BY MY ALIAS NAME?          U002\n         BE    CP$CP02                  YES - DDNAME IS 'SYSCP'    U002\n         MVC   DDNAME(8),=CL8' '        BLANK THE RECEIVING FIELD  U002\n         EX    CLNG,SETFILE             SET THE INDICATED DDNAME AND\nCP$CP02  OPEN  DDCB,MF=(E,DOPEN)        TRY TO OPEN THE NAMED FILE.\n         TM    DOFLG,OPENED             IF IT WON'T COOPERATE,\n         BZ    ERR3                     NEITHER NEED WE.\n         SPACE\nNOFILE   CLC   =C'CP ',MSGNAME+4        BY MY ALIAS NAME?          U002\n         BE    *+8                      YES - NO DDNAME TO CLEAR   U002\n         EX    CLNG,CLRCOM              CLEAR THE FILE NAME OR *.\nNOFILE2  BAL   SCRET,SCAN               BREAKOUT THE COMMAND NAME, AND\n         EX    CLNG,SETCP               MOVE IT TO THE ATTACH LIST.\n         SPACE 2\n*---  FIRST, SEE IF THE MODULE IS IN LPA.                          U005\n*  **WARNING** REGISTER 3 IS CALLED 'WK'!!!                        U005\nEXECLOOP L     3,CVTPTR                 GET CVT ADDRESS            U005\n         LM    R0,R1,DEPN               GET MODNAME FOR ROUTINE    U005\n         L     R15,CVTLPDSR-CVTMAP(,3)  GET ADDRESS OF ROUTINE     U005\n         BALR  R14,R15                  CALL ROUTINE               U005\n         B     BYNAME                   +0 RETURN = FOUND IN LPA   U005\n*                                       +4 RETURN = NOT   IN LPA   U005\n         IDENTIFY EPLOC=DEPN,ENTRY=0    BEFORE YOU BLDL, WHICH'LL\n         CH    R15,H12                  PRECLUDE USE OF AN IN-CORE\n*U005    LA    R15,DATCH                MODULE, DECIDE WHETHER SUCH A\n         BE    NOTLDLD                  MODULE EXISTS BY TRYING TO\n*U005    ATTACH  SF=(E,(15)),EPLOC=DEPN  REUSE THE NAME.  SIMULATE\nBYNAME   ATTACH  SF=(E,DATCH),EPLOC=DEPN REUSE THE NAME.  SIMULATE U005\n         ORG   *-2                      A 'B' FORM MACRO INSTRUCTION,\n         B     BLDLD                    SETTING UP FOR EITHER FAST\nNOTLDLD  ATTACH  SF=(E,DATCH),DE=DEPN   DISK FETCH OR CORE SEARCH. U005\n         ORG   *-2                      IF IDENTIFY WORKED, NOT LOADED.\n         SPACE\n         BLDL  (DCBR),BLDLIST           ATTEMP TO LOCATE THE COMMAND\n         CH    R15,H4                   PROCESSOR IN THE NEW LIBRARY.\n         BL    BLDLD                    PASS BACK ANY ERROR.\n         BH    ERR1                     IF NOT THERE,\n         BLDL  0,BLDLIST                TRY THE COMMAND LIBRARY.\n         CH    R15,H4                   IF IT IS FOUND, GO FINISH THE\n         BL    BLDLD                    TB.  PASS BACK ANY ERROR.\n         BH    ERR1                     IF NOT IN COMMAND LIB,\n         L     WK,CPPLCBUF              TRY AGAIN IN\n         CLC   2(2,WK),ZERO             THE PROCEDURE LIBRARIES.\n         BE    ERR1                     ONE TIME ONLY, ZERO OUT THE\n         MVC   2(2,WK),ZERO             'SCAN' OFFSET POINTER, AND\n         MVC   DEPN,EXECNAME            TRY TO CALL 'EXEC'.\n         B     EXECLOOP\n         SPACE\nBLDLD    L     WK,CPPLECT               ADDRESS THE ECT.\n         USING ECT,WK                   SAVE THE OLD COMMAND NAME\n         MVC   OLDNAME,ECTPCMD          AND REPLACE IT WITH THE\n         MVC   ECTPCMD,DEPN             NEW ONE.\n         MVC   ECTSCMD,BLANKS\n         MVI   DECB,0\n         TM    CSOAFLG,CSOAVNP          SINCE WE HAVE CHANGED THE\n         BZ    *+8                      COMMAND BUFFER, RESET THE\n         OI    ECTSWS,ECTNOPD           'NO OPERANDS' BIT.\n         ATTACH SF=(E,DATCH),           ATTACH THE NAMED PROCESSOR     *\n               MF=(E,(CPPLR)),          USING THE PARAMETERS THAT      *\n               ECB=DECB                 HAVE BEEN SET UP.\n         SPACE\n         ST    R1,DAPTCB                HANG ONTO THE TASK ADDRESS, AND\n         WAIT  1,ECB=DECB               WAIT FOR WHATEVER.\n         SPACE\n         MVI   DECB,0                   TRANSFORM SCAN PARAMETER LIST\n         LA    WK,DAPB                  INTO A DAIR LIST.\n         ST    WK,TMDAPB\n         MVC   TMDPSCB,SAVEPSCB         CALL DAIR TO MARK FILES\n         LA    R1,TMDAIR                'NOT IN USE.'\n         LINK  EP=IKJDAIR\n         SPACE\n         DETACH DAPTCB                  IT'S ALL OVER --\n         SPACE\n         LA    RC,0                     RETURN WITH AN OK\n         B     CLOSE                    STATUS CODE.\n         SPACE 2\nERR1     LA    WK,SEG3A                 FOR EACH ERROR CONDITION,\n         B     ERRJOIN                  SELECT THE APPROPRIATE\nERR2     LA    WK,SEG3B                 ERROR MESSAGE.\n         B     ERRJOIN\nERR3     LA    WK,SEG3C\n         B     ERRJOIN                                             U003\nERR4     LA    WK,SEG3D                                            U003\nERRJOIN  ST    WK,ASEG3                 COMPLETE THE PUTLINE\n         LA    WK,MSGNAME               PARAMETERS AND WRITE\n         ST    WK,ASEG2                 THE MESSAGE.\n         PUTLINE MF=(E,CSPL),PARM=PLPB,OUTPUT=OLD1\n         LA    RC,8                     RETURN A BAD CODE.\n         SPACE 3\nCLOSE    CLC   =C'ACP',MSGNAME+4        is this 'ACP'?             U006\n         BE    DELETE                   Yes - nothing to CLOSE     U006\n         SPACE 1\n         CLOSE MF=(E,DOPEN)             WASH UP AND FORGET IT.\n         SPACE 2\nDELETE   DELETE  EPLOC=SCNAME           DELETE 'SCAN.OC=SCNAME\n         SPACE\n         LA    R1,0(,R13)               ADDRESS THE DSA AND FREE IT.\n         L     R0,0(,R1)\n         L     R13,4(,R13)\n         FREEMAIN R,LV=(0),A=(1)\n         LR    R15,RC                   RESTORE ALL REGS BUT THE\n         L     R14,12(0,R13)            RETURN CODE, AND RETURN.\n         RETURN (0,12),T,RC=(15)\n         EJECT\nSCAN     L     ACB,CPPLCBUF             RTN TO LOCATE THE FIRST THING\n         USING CBUF,ACB                 STILL IN THE CBUFFER.  ALWAYS\n         MVC   CBOFS,ZERO               START FROM THE BEGINNING.\n         SPACE\n         LA    R1,CSPL                  CALL THE SCAN ROUTINE.\n         LR    R15,SCREG\n         BALR  R14,R15\n         LTR   R15,R15                  IF SCAN DID NOT COMPLETE, OR\n         BNZ   ERR1                     RETURNED A LESS-THAN-NICE\n         TM    CSOAFLG,CSOAVWP+CSOAVNP  OPINION, FORGET IT.\n         BZ    ERR1\n         SPACE\n         L     CA,CSOACNM               DON'T ALLOW STRINGS LONGER\n         LH    CLNG,CSOALNM             THAN EIGHT CHARACTERS.\n         CH    CLNG,H8                  IF, THROUGHOUT ALL THESE PERILS\n         BH    ERR1                     YOU REMAIN STEADFAST, YOU MAY\n         BCTR  CLNG,SCRET               RETURN SAFELY TO YOUR\n         BR    SCRET                    WHATEVER ...\n         SPACE 2\nSETFILE  MVC   DDNAME(0),0(CA)          VARIOUS INSTRUCTIONS THAT MAY\nCLRCOM   MVC   0(0,CA),BLANKS           BE EXECUTED WITH THE RESULTS\nSETCP    MVC   DEPN(0),0(CA)            OF THE ABOVE ROUTINE.\nSETNM    MVC   MSGNAME+4(0),0(CA)\n         EJECT\n*        STATIC DATA AREA:\n         SPACE\nSCNAME   DC    CL8'IKJSCAN'             'LOAD' NAME FOR 'SCAN' RTN.\nEXECNAME DC    CL8'EXEC'                CP NAME FOR 'EXEC' COMMAND.\nCOREPARM DC    0F'0',AL1(0),AL3(LDSA)   GETMAIN PARAMETER.\nH4       DC    H'4'                     USEFUL CONSTANTS...\nH8       DC    H'8'\nH12      DC    H'12'\n         SPACE\nSEG1     DC    Y(ES1-*,0)               SKELETON OF ERROR MESSAGE.\nMS1A     DC    C'QCTL001I '\nMS1B     DC    C' FAILED -- '\nMS1C     DC    C'.'\nES1      EQU   *\n         SPACE\nSEG3A    DC    Y(ES3A-*,MS1C-MS1A),C'INVALID COMMAND SYNTAX'\nES3A     EQU   *\n         SPACE\nSEG3B    DC    Y(ES3B-*,MS1C-MS1A),C'BLDL ERROR'\nES3B     EQU   *\n         SPACE\nSEG3C    DC    Y(ES3C-*,MS1C-MS1A),C'CANNOT OPEN LIBRARY FILE'\nES3C     EQU   *\n         SPACE\nSEG3D    DC    Y(ES3D-*,MS1C-MS1A),C'COMMAND NOT AUTHORIZED FOR USERID'\nES3D     EQU   *                                                   U003\n         EJECT\nDSA      DSECT DESCRIBING THE DYNAMIC STORAGE AREA:\n         DS    18F                      STANDARD BORING SAVE AREA.\n         SPACE\nDINIT    DS    0F  THIS IS THE BEGINNING OF THE INITIALIZATION AREA.\n         SPACE\nDATCH    ATTACH SF=L,                   HERE GOES THE SKELETON         *\n               SHSPV=78,                ATTACH PARAMETER LIST.         *\n               SZERO=NO\n         SPACE\nDECB     DC    F'0'                     TERMINATION ECB.\n         SPACE\n         PRINT NOGEN\nDDCB     DCB   DSORG=PO,                SKELETON DATA CONTROL BLOCK.   *\n               MACRF=E,                 THIS IS BOTH TASKLIB, AND THE  *\n               DDNAME=SYSCP             ATTACH DCB ITSELF.         U002\nDOPEN    OPEN  0,MF=L                   SKELETON OPEN PARAMETERS.\n         PRINT &GEN\n         SPACE\nCSPL     DS    0F                       THE COMMAND SCAN PARAM LIST:\nCSPLUPT  DC    A(0)                     --> USER PROFILE TABLE.\nCSPLECT  DC    A(0)                     --> ENVIRONMENT CONTROL TABLE.\nCSPLECB  DC    A(0)                     --> INTERRUPT ECB (NOT USED).\nCSPLFLG  DC    A(0)                     --> INPUT OPTION FLAGS.\nCSPLLOA  DC    A(0)                     --> SCAN OUTPUT AREA.\nCSPLCBUF DC    A(0)                     --> COMMAND BUFFER.\n         SPACE\n         ORG   CSPL                     OVERLAY WITH\nTMDAIR   DS    0F                       DAIR PARAMETER LIST:\nTMDUPT   DS    A                          --> UPT.\nTMDECT   DS    A                          --> ECT.\nTMDECB   DS    A                          --> ECB.\nTMDPSCB  DS    A                          --> PSCB.\nTMDAPB   DS    A                          --> PARAMETERS.\n         SPACE\n         ORG\nDAPB     DS    0F                       DAIR PARAMETERS:\nDAPID    DC    X'002C0000'                CODE FOR 'MARK NOT IN USE.'\nDAPTCB   DS    A                          --> TCB.\nDAECB    DS    A                          DAIR ECB.\n         SPACE\nDFLAG    DC    BL4'0'                   OPTIONS -- REQ SYNTAX CHECK.\n         SPACE\nOLD1     DC    A(3)                     SKELETON FOR AN OUTPUT\nASEG1    DC    A(0)                     LINE DESCRIPTOR WITH\nASEG2    DC    A(0)                     THREE SEGMENTS.\nASEG3    DC    A(0)\n         SPACE\nMSGNAME  DC    2H'0',CL8' '             PLACE FOR CP NAME.\n         SPACE\nPLPB     DC    3F'0'                    PUTLINE PARAMETER BLOCK.\n         SPACE\nBLDLIST  DC    F'0'\nDEPN     DC    0CL8' ',CL58' '          ATTACH PROGRAM NAME\n         SPACE\nDLINIT   EQU   *-DINIT  LENGTH OF THE AREA TO INITIALIZE.\n         SPACE\nCSOA     DS    0F                       COMMAND SCAN OUTPUT AREA:\nCSOACNM  DC    A(0)                     --> COMMAND NAME.\nCSOALNM  DC    H'0'                     TRUE LENGTH OF NAME.\nCSOAFLG  DC    BL2'0'                   SCAN STATUS FLAGS:\nCSOAVWP  EQU   X'80'                    VALID WITH PARAMETERS.\nCSOAVNP  EQU   X'40'                    VALID WITH NO PARAMETERS.\nCSOAQM   EQU   X'20'                    QUESTION MARK.\nCSOANOC  EQU   X'10'                    NO COMMAND AT ALL.\nCSOABAD  EQU   X'08'                    INVALID COMMAND NAME.\n         SPACE\nSAVEPSCB DS    A                        --> PSCB.\n         SPACE\nOLDNAME  DS    CL16                     STORAGE FOR SWAPPING ECT NAME.\n         EJECT\nQCTL01   CSECT RESUME TO BUILD DSA'S INITIALIZATION AREA:\n         SPACE\nSINIT    DS    0F  THIS IS THE BEGINNING OF THE INITIALIZING DATA.\n         SPACE\n         ATTACH SF=L,                   HERE GOES THE SKELETON         *\n               SHSPV=78,                ATTACH PARAMETER LIST.         *\n               SZERO=NO\n         SPACE\nZERO     DC    F'0'                     TERMINATION ECB.\n         SPACE 2\n         PRINT NOGEN\n         DCB   DSORG=PO,                SKELETON DATA CONTROL BLOCK.   *\n               MACRF=E,                                                *\n               DDNAME=SYSCP                                        U002\n         OPEN  0,MF=L                   SKELETON OPEN PARAMETERS.\n         PRINT &GEN\n         SPACE 2\n         DC    6F'0'                    THE COMMAND SCAN PARAM LIST\n         DC    0F'0',X'002C0000',2A(0)  DAIR PARAMETERS.\n         DC    F'0'                     AND FLAGWORD.\n         SPACE\n         DC    A(3,SEG1,0,0)            SKELETON FOR BLOCKS FOR\nSEG2     DC    Y(4,MS1B-MS1A)           'PUTLINE'.\nMS2      DC    CL8' '\n         PUTLINE MF=L\n         SPACE\n         DC    0F'0',Y(1,58)            BLDL LIST, WITH\nBLANKS   DC    0CL8' ',CL58' '          ATTACH PROGRAM NAME\n         SPACE 2\nSLINIT   EQU   *-SINIT  LENGTH OF THE INITIALIZING DATA.\n         SPACE\n         DS    (SLINIT-DLINIT)X         THESE TWO LENGTHS HAD BETTER\n         DS    (DLINIT-SLINIT)X         BE THE SAME.\n         EJECT\nECT      DSECT DESCRIBING THE ENVIRONMENT CONTROL TABLE:\n         IKJECT ,\n         SPACE 2\nPARAMS   DSECT DESCRIBING THE COMMAND PROCESSOR PARAMETER LIST:\n         IKJCPPL  ,\n         SPACE 2\n         IKJPSCB  ,                                                U003\n         SPACE 1\n*U004    GISPSCB  ,                     GIBRALTAR BIT DEFINITIONS  U003\n         SPACE 2\nCBUF     DSECT DESCRIBING THE COMMAND BUFFER:\nCBLNG    DS    H                        TOTAL BUFFER LENGTH.\nCBOFS    DS    H                        SCAN HISTORY INDEX.\nCBTXT    DS    C                        ACTUAL TEXT...\n         SPACE 2\n         PRINT NOGEN                    NOBODY WANTS TO SEE:\n         CVT   DSECT=YES                                           U005\n         DCBD  DSORG=XE,DEVD=DA\n         PRINT &GEN\nDOFLG    EQU   DCBOFLGS-IHADCB+DDCB\nOPENED   EQU   X'10'\nDDNAME   EQU   DCBDDNAM-IHADCB+DDCB\n         SPACE 2\nDSA      DSECT TO BE FINALIZED:\n         ORG\n         DS    0D\nLDSA     EQU   *-DSA\n         SPACE\nQCTL01   CSECT TO BE FINALIZED:\n         LTORG\n         SPACE\n         END   QCTL01\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TERMIO1": {"ttr": 11783, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x07\\x00\\x00\\x00\\x80\\x17\\x7f\\x00\\x92\\t\\x0f P\\x01|\\x00\\xd6\\x00\\xf4\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.07", "flags": 0, "createdate": "1980-06-25T00:00:00", "modifydate": "1992-03-30T20:50:00", "lines": 380, "newlines": 214, "modlines": 244, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1988 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nTERMIO1  TITLE 'TERMIO1 -- 3270 ACCESS METHOD SELECTOR ROUTINE'\n*---------------------------------------------------------------------*\n*                                                                     *\n*        T E R M I O 1                                                *\n*                                                                     *\n*        AN OPEN-ENDED CSECT WHOSE ONLY FUNCTION IS TO                *\n*        DETECT WHICH SERVICE I/O ROUTINE TO USE -                    *\n*        BY DETERMINING WHETHER OR NOT THIS JOBSTEP                   *\n*        IS   T S O    OR   D C M S  \"START\"                          *\n*                                                                     *\n*        THE ASCB TSB FIELD IS CHECKED FOR NONZERO.                   *\n*            A NONZERO TSB ADDRESS IMPLIES                            *\n*            THAT THIS IS A TSO ADDRESS SPACE:                        *\n*                                                                     *\n*  Updates:                                                           *\n*    24Apr88   LDW2 - Eliminate use of LC macro                       *\n*              LDW2 - Change id to keep ASMH V2 happy                 *\n*    11-12-81  SDM1 - HIDE VAM MACROS BEHIND CONDITIONAL ASSEMBLY     *\n*    09-18-81  LDW1 - CHANGE LOWER CASE TO USE 'LC' MACRO             *\n*                   - ADD VAM SUPPORT (PUKE)                          *\n*                   - MISC MINOR CLEANUP                              *\n*    08-07-80  LDW  - CHANGE SOME MESSAGES TO LOWER CASE FOR          *\n*                     ESTHETICS                                       *\n*    06-25-80  LDW  - CHANGE \"INITIAL TSO DELAY\" FROM 1 TO 2 SECONDS  *\n*                   - CHANGE CSECT NAMES:   TERMIO#  -> TERMIO1       *\n*                                           TERMIO$  -> TERMIO2       *\n*                                           TERMIO@  -> TERMIO3       *\n*                                           TERMIOWT -> TERMIO4       *\n*                                           TERMIOHC -> TERMIO5       *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n         LCLB  &VAM                     INDICATE VAM SYSTEM        SDM1\n&VAM     SETB  0                        THIS IS NOT A VAM SYSTEM   SDM1\n         SPACE 1\n*  SEQUENCE SYMBOLS IN USE:\n*   .NVAM**  01 02 03\n         SPACE 3\nTERMIO1  CSECT                                                     LDW1\n         SPACE 2\n         DCMSREGS\n         SAVE  (14,12),,TERMIO1_&SYSDATE._&SYSTIME                 LDW2\n         LR    R11,R15\n         USING TERMIO1,R11\n         LR    R10,R1                       SAVE IOCB ADDRESS\n         USING IOCB,R10\n         EJECT\n*\n*\n*       REGISTERS:\n*                   R2  = FSA\n*                   R3  = IOCBTIME\n*                   R5  = TDCB\n*                   R6  = ASCB\n*                   R7  = NEW/OLD\n*                   R8  = CVT\n*                   R10 = IOCB\n*                   R11 = BASE\n*                   R12 = TCB\n*\n*\n         SPACE 2\n         MVI   IOCBAID,AIDNULL          R E S E T  CURRENT AID\n         SR    R5,R5                        CLEAR TDCB\n         L     R8,16                        POINT AT THE CVT\n         L     R7,0(,R8)                    NEW/OLD\n         L     R12,4(,R7)                   OUR TCB\n         L     R2,112(,R12)                     AND ITS FSA\n         L     R6,12(,R7)                   OUR ASCB\n*  SINCE THE DORK WHO DESIGNED DCMS DIDN'T HAVE ANY OF THE PROCESSORS\n*  INITIALIZE THE IOCB TO ANYTHING USEFUL (LIKE ZERO), AND UNDER\n*  REGULAR TSO, ETC, IT WILL LIKELY BE ZERO, BUT UNDER VAM IT OFTEN\n*  WON'T BE ZERO BECAUSE VAM SHARES STORAGE ALL OVER THE PLACE, WE NOW\n*  MAKE A FEEBLE ATTEMPT (IT'S THE BEST I CAN DO) TO DETERMINE IF THE\n*  IOCB HAS REALLY BE INITIALIZED.  IF IT HASN'T, THE TYPE DETECTION\n*  MAY BRANCH WHEN IT SHOULDN'T.                                   LDW1\n         CLI   IOCBTIME,C'0'            DOES IT LOOK ANY GOOD?     LDW1\n         BNE   NEWIOCB                  NO - DO TYPE CHECKING      LDW1\n         CLI   IOCBTIME+3,X'7A'         COLON THERE?               LDW1\n         BNE   NEWIOCB                  NO - DO TYPE CHECKING      LDW1\n         CLI   IOCBTIME+6,X'7A'         HOW ABOUT HERE?            LDW1\n         BNE   NEWIOCB                  NO - DO TYPE CHECKING      LDW1\n         CLI   IOCBTIME+9,X'4B'         DOT HERE?                  LDW1\n         BNE   NEWIOCB                  NO - DO TYPE CHECKING      LDW1\n*  AT THIS POINT, I ASSUME IT'S AN INITIALIZED IOCB.  GOD HELP US IF\n*  IT'S NOT, ESPECIALLY IF THIS IS VAM.                            LDW1\n         TM    IOCBFLGT,IOCBTTSO+IOCBTCMD+IOCBTBSC\n         BNZ   OLDIOCBX                 SKIP DETECTION IF KNOWN TYPE\n         EJECT\n*\n*\n*        T E R M I N A L    T Y P E    S E L E C T I O N    C O D E\n*\n*\n*        NEW IOCB - WE MUST SCAN FOR TYPE\n*\n*   AT THIS POINT WE HAVE LOCATED THE FIRST SAVE AREA PROVIDED TO THIS\n*   TASK WHEN IT WAS ATTACHED. NOBODY CARES ABOUT THE REGISTERS THAT\n*   IT CONTAINS, SO TERMIO USES IT AS THE ANCHOR FOR ITS TABLE.\n*   USAGE IS AS FOLLOWS:\n*\n*        24    ORIGINAL PARM SAVED BY INITIAL ROUTINE (DCB PTR)\n*        28    '#???' IF TERMIO HAS EVER BEEN INVOKED\n*        32    POINTER TO PREVIOUS FORMAT TABLE USED.\n*        36    POINTER TO CURRENT TERMIO WORK AREA\n*\nNEWIOCB  EQU   *\n         MVI   IOCBFLGT,0               INITIALIZE FLAGS           LDW1\n         L     R1,60(,R6)               THE TSB,\n         LA    R1,0(,R1)                IF IT\n         LTR   R1,R1                    EXISTS -\n         BZ    NOTSO                    IMPLIES\n         OI    IOCBFLGT,IOCBTTSO        THIS IS\n         B     CONTINU                  T S O\n         SPACE 2\nNOTSO    EQU   *\n         AIF   (NOT &VAM).NVAM01                                   SDM1\n*  USE THE IOCBTIME WORK AREA FOR A BLDL LIST TO DETERMINE IF THE VAM\n*  INTERFACE MODULE IS PRESENT.  IF IT ISN'T, WE ASSUME THAT THIS IS\n*  NOT A VAM USER.                                                 LDW1\n         MVC   IOCBTIME(4),=H'1,12'     #, LENGTH OF BLDL ENTRIES  LDW1\n         MVC   IOCBTIME+4(8),=C'VAMINF00'  FILL IN MODULE NAME     LDW1\n         SPACE 1\n         BLDL  0,IOCBTIME               SEE IF WE CAN FIND IT      LDW1\n         SPACE 1\n         LTR   R15,R15                  IS VAM INTERFACE HERE?     LDW1\n         BNZ   NOTVAM                   NO - SEE IF BSC            LDW1\n         SPACE 1\n         VAMUSER  NO=NOTVAM,LINK=YES    SEE IF THIS IS A VAM USER  LDW1\n         SPACE 1                                                   LDW1\n         OI    IOCBFLGT,IOCBTTSO+IOCBTVAM  FLAG THIS AS VAM + TSO  LDW1\n         B     CONTINU                  YES                        LDW1\n         SPACE 2\nNOTVAM   EQU   *                                                   LDW1\n.NVAM01  L     R5,24(,R2)               RECOVER\n         L     R5,0(,R5)                    TDCB\n         LA    R5,0(,R5)                        FROM\n         ST    R5,IOCBTDCB                          FSA+24\n*\n         CLC   TDCBTYPE-TDCB(R5),=CL4'#CMD'\n         BNE   NOTCMD\n         OI    IOCBFLGT,IOCBTCMD\n         B     CONTINU\n         SPACE 2\nNOTCMD   EQU   *\n         CLC   28(4,R2),=C'#BSC'        IS THIS OUR FIRST TIME THRU\n*        BNE   NOTBSC\n         OI    IOCBFLGT,IOCBTBSC\n         B     CONTINU\n         SPACE 2\nNOTBSC   EQU   *\n         EX    0,*                      ILLEGAL TYPE !\n         SPACE 2\nCONTINU  EQU   *\n         ST    R5,IOCBTDCB              THE TDCB\n*\n*         END OF TYPE SELECTION CODE\n*\n         EJECT\nOLDIOCBX EQU   *\n         L     R5,IOCBTDCB              ** INIT IOCB WAIT VALUE **\n         L     R3,IOCBWAIT              CHECK CURRENT VALUE\n         LTR   R3,R3                    IS IT ZERO?\n         BNZ   SETTIME                  ...NO, DONT RESET\n*\n         LTR   R5,R5                    COPY\n         BZ    TSOTIME                       TIME\n         L     R4,TDCBDUPT-TDCB(,R5)             FROM\n         L     R3,DUPTINTV-DUPT(,R4)                 DUPT\n         B     SETTIME                                   UNLESS TSO\n         SPACE 2\nTSOTIME  EQU   *\n         LA    R3,200                   DFLT INITIAL TSO DELAY = 2 SEC\n         SPACE 1\nSETTIME  EQU   *\n         ST    R3,IOCBWAIT              INIT DELAY TIME IN .01 UNITS\n         EJECT\n*\n*\n*        S C R E E N    A U T O    T I M E S T A M P    C O D E\n*\n*\n         MVC   IOCBTIME(L'IOCBTIME),SPACEZ\n         TIME  DEC\n         ST    R0,IOCBFWDW              TIME\n         MVI   IOCBPSGN,X'0C'               STAMP\n         MVC   IOCBTIME(12),=X'F021207A20207A20204B2020' THE\n         ED    IOCBTIME(12),IOCBFWDW                IOCB\n         ST    R1,IOCBFWDW                              FOR\n         MVC   IOCBTIME+13(9),=X'40202020214B202020'        SCREEN\n         ED    IOCBTIME+13(9),IOCBFWDW                          SERVICE\n         MVC   IOCBTIME+12(4),SPACER             USAGE\n         MVC   IOCBCTRL(5),=X'115C6F1DE8'             LATER\n         TM    IOCBFLGC,IOCBCINT\n         BO    NOINTV\n         L     R14,IOCBWAIT\n         CVD   R14,IOCBISWK\n         MVC   IOCBSSTH-1(6),=XL6'2120204B2120'\n         ED    IOCBSSTH-1(6),IOCBISWK+5\n         MVC   IOCBITVL(12),INTERVAL\n         AIF   (NOT &VAM).NVAM02                                   SDM1\n         TM    IOCBFLGT,IOCBTVAM        IS THIS VAM?               LDW1\n         BNO   *+10                     NO - SKIP                  LDW1\n         MVC   IOCBITVL(10),=C'<< VAM >> '  YES - NO INTERVAL      LDW1\n.NVAM02  ANOP                                                      SDM1\nNOINTV   EQU   *\n         MVC   IOCBSHOW(L'IOCBSHOW),SPACEZ    CLEAR INTERVAL AREA\n         MVC   IOCBEND(L'IOCBEND),SPACEZ      CLEAR INTERVAL AREA\n*  THE FOLLOWING TEST IS STILL WRONG, BUT IT ISN'T AS WRONG AS IT WAS.\n         CLI   IOCBNAME,C'A'                                       LDW1\n         BL    SPCNAM\n         CLI   IOCBNAME,C'Z'                                       LDW1\n         BH    SPCNAM\n         B     ROUTINE\n         EJECT\nSPCNAM   EQU   *\n         MVC   IOCBNAME(8),SPACEZ\n         SPACE 1\nROUTINE  EQU   *\n         MVC   IOCBSHOW,NAM#A\n         TM    IOCBFLGS,IOCBFNRD+IOCBFNWR\n         BZ    NN#W                     READ + WRITE = WAITING\n         BO    NN#H                     NOREAD + NOWRITE = HALTED\n         TM    IOCBFLGS,IOCBFNRD\n         BNO   NN#A                     WRITE + NOREAD = RUNNING\n         SPACE 1\n         AIF   (NOT &VAM).NVAM03                                   SDM1\n         TM    IOCBFLGT,IOCBTVAM        IS THIS VAM?               LDW1\n         BNO   NN#R                     NO - \"RUNNING\" IS OK       LDW1\n         MVI   IOCBAID,AIDPA1           SIMULATE STOP REQUEST      LDW1\n         LM    R14,R12,12(R13)          RESTORE CALLER'S REGISTERS LDW1\n         BR    R14                      AND JUST RETURN TO CALLER  LDW1\n.NVAM03  ANOP                                                      SDM1\n         SPACE 3\n*---  DISPLAY AN ACTION MODIFIER ON STATUS LINE\n         SPACE 1\nNN#R     MVC   IOCBSHOW,NAM#R           'RUNNING'\n         B     NN#END\n         SPACE 1\nNN#W     MVC   IOCBSHOW,NAM#W           'WAITING'\n         B     NN#END\n         SPACE 1\nNN#H     MVC   IOCBSHOW,NAM#H           'HALTED'\n         B     NN#END\n         SPACE 1\nNN#A     MVC   IOCBSHOW,NAM#A           'ACTIVE'\n         B     NN#END\n         SPACE 2\nNN#END   DS    0H\n         EJECT\n*\n*\n*        T E R M I N A L   R O U T I N E  S E L E C T I O N\n*\n*\n         LR    R1,R10\n         TM    IOCBFLGT,IOCBTCMD\n         BO    CMDGOT\n         TM    IOCBFLGT,IOCBTTSO\n         BO    TSOGOT\n         TM    IOCBFLGT,IOCBTBSC\n         BO    BTAMGOT\n         EX    0,*       INVALID TERMINAL TYPE\nTSOGOT   EQU   *\n         L     R15,=V(TERMIO2)\n         BR    R15                      GO TO TSO IO SERVICE\nBTAMGOT  EQU   *\n         ST    R10,TDCBIOCB-TDCB(,R5)\n         L     R15,=V(TERMIO3)\n         BR    R15                      GO TO BTAM IO SERVICE\nCMDGOT   EQU   *\n         L     R15,=V(TERMIO4)\n         BR    R15                      GO TO TSO IO SERVICE\n         SPACE 3\nINTERVAL DC    C'Interval ='                                       LDW2\n         DC    X'1D40'                                             LDW1\n         SPACE 1\nSPACER   DC    CL5' on  '                                          LDW2\n         SPACE 2\nNAM#A    DC    CL11'  Active   '                                   LDW2\nNAM#R    DC    CL11'  Running  '                                   LDW2\n*nam#b   dc    cl11'  Working  '                                   LDW2\nNAM#H    DC    CL11'  Halted   '                                   LDW2\nNAM#W    DC    CL11'  Waiting  '                                   LDW2\n         SPACE 2\nSPACEZ   DC    CL80' '\nPPATCH   DC    20CL8'-TERMIO1'\n         SPACE 2\n         LTORG\n         SPACE 5\nIOCB     DSECT\n         IOCB\n         EJECT\nTDCB     TDCB\n         EJECT\n         DCMSUPT\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TERMIO2": {"ttr": 12036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x0c\\x00\\x00\\x00\\x80\\x17\\x7f\\x00\\x92\\t\\x0f P\\x04\\x1c\\x03\\x84\\x00\\xec\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.12", "flags": 0, "createdate": "1980-06-25T00:00:00", "modifydate": "1992-03-30T20:50:00", "lines": 1052, "newlines": 900, "modlines": 236, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1987 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nTERMIO2  TITLE 'TERMIO2 -- 3270 TO USER INTERFACE ROUTINE UNDER TSO'\n*---------------------------------------------------------------------*\n*                                                                     *\n* UPDATES:                                                            *\n*    23MAR87  U013 EMS  YET ANOTHER VERSION OF U009 FOR VTAM V3/3272  *\n*    11/12/81 U012 SDM  ADD 3270 ATTR AT END OF UPDATE TIME FIELD     *\n*    10/22/81 U011 LDW  INCREASE SIZE OF 'BUFFER' FROM 2100 TO 2700   *\n*                          (FOR PROCESSORS WITH MANY FIELDS)          *\n*    09/08/81 U010 SDM  CHANGE TO USE 3270 ERASE WRITE FOR 3278-5'S   *\n*    06/15/81 U009 LDW  TEMP PATCH FOR STUPID 3277'S OR VTAM???       *\n*    04/20/81 U008 SDM  CHANGE 'ERASE INPUT' FIELD TO ZERO LENGTH     *\n*                       ELIMINATE 'PFK DATA ONLY' LOGIC (SO 'MM'      *\n*                          FIX IN U005 CAN WORK)                      *\n*    02/26/81 U007 SDM  ALLOW NULLS TO SURVIVE UPPERCASE              *\n*                          TRANSLATION                                *\n*    02/24/81 U006 SDM  ALLOW CALLER TO TRANSMIT NULLS                *\n*                       IMPROVE ATTN VS. STFSMODE LOGIC               *\n*    07/24/80 U005 LDW  CHANGE SO TRANSFER ONLY WORKS IF USED WITH    *\n*                          PF3 (THIS ALLOWS A PROCESSOR TO RECEIVE    *\n*                          AN INPUT LINE STARTING WITH '='.)          *\n*    06/25/80 U004 LDW  CHANGE CSECT NAMES:   TERMIO#  -> TERMIO1     *\n*                                             TERMIO$  -> TERMIO2     *\n*                                             TERMIO@  -> TERMIO3     *\n*                                             TERMIOWT -> TERMIO4     *\n*                                             TERMIOHC -> TERMIO5     *\n*    02/11/80 U003 LDW  SUPPORT IOCBCATR FLAG                         *\n*    10/26/79 U002 SDM  FIX THIS STUPID THING FOR NO KEYBOARD         *\n*                          RESET!!!                                   *\n*    10/02/79 U001 LDW  INSTALL STFSMODE MACRO CALL                   *\n*                       TRANSLATE PF 13-24 TO PF 1-12                 *\n*                       CHANGE TRANSFER CHAR TO '='                   *\n*                                                                     *\n*---------------------------------------------------------------------*\nTERMIO2  CSECT\n         SPACE 3\n* * * * *   U S E R   A B E N D   C O D E S   * * * * *\n*\n*  101 - STAX MACRO FAILED\n*  102 - ATTEMPT TO ISSUE TWO READS IN A ROW\n*  103 - UNKNOWN RETURN CODE FROM TGET\n*  104 - OVERLAPPING FIELDS IN FORMAT TABLE\n*  105 - GENERATED DATA EXCEEDS BUFFER SIZE\n*  106 - INVALID CURSOR POSITION\n*  107 - UNKNOWN RETURN CODE FROM TPUT\n*  108 - INVALID INPUT FORMAT\n*  109 - INVALID AID IN INPUT BUFFER\n*  110 - ATTEMPT TO READ W/ UNFORMATTED SCREEN\n*\n         SPACE 3\n*        CONTROL RECEIVED FROM   T E R M I O 1  -\n*        AN OPEN-ENDED CSECT WHOSE ONLY FUNCTION IS TO\n*        DETECT WHICH SERVICE I/O ROUTINE TO USE -\n*        BY DETERMINING WHETHER OR NOT THIS JOBSTEP\n*        IS   T S O    OR   D C M S  \"START\"\n         EJECT\n         DCMSREGS\n         EJECT\n         LR    R11,R15\n         USING TERMIO2,R11\n         LR    R10,R1                       SAVE IOCB ADDRESS\n         USING IOCB,R10\n         OI    IOCBFLGT,IOCBTTSO            TERMIO FOR TSO RESPONDS\n         MVI   IOCBAID,X'00'                SET OFF INPUT INDICATION\n         CLI   IOCBTERM,X'7F'\n         BE    CKDSPLY\n         GTSIZE\n         STM   0,1,IOCBTERM\n         MVI   IOCBTERM,X'7F'\nCKDSPLY  EQU   *\n         CLC   IOCBTERM+2(2),=XL2'0000'                            U001\n         BNE   TSDISPLY\n         LR    R1,R10\n         L     R15,=V(TERMIO5)\n         BR    R15\n*\n*        HARDCOPY ALTERNATE FOR TSO INVOKED HERE\n*\nTSDISPLY EQU   *\n         CLI   IOCBTERM+1,X'7F'         DONE STFSMODE?             U001\n         BE    OKSTFSMD                                            U001\n         STFSMODE  ON,INITIAL=YES                                  U001\n         MVI   IOCBTERM+1,X'7F'         SAY DONE                   U001\n         SPACE 2                                                   U001\nOKSTFSMD EQU   *\n         OI    IOCBFLGT,IOCBTDSP .      FLAG AS DISPLAY DEVICE\n         SPACE 3\n         BAL   R14,GETFSA         GET FIRST SAVE AREA IN REG 2\n*\n*   AT THIS POINT WE HAVE LOCATED THE FIRST SAVE AREA PROVIDED TO THIS\n*   TASK WHEN IT WAS ATTACHED. NOBODY CARES ABOUT THE REGISTERS THAT\n*   IT CONTAINS, SO TERMIO USES IT AS THE ANCHOR FOR ITS TABLE.\n*   USAGE IS AS FOLLOWS:\n*\n*        24    ORIGINAL PARM SAVED BY INITIAL ROUTINE (DCB PTR)\n*        28    'TRIO' IF TERMIO HAS EVER BEEN INVOKED\n*        32    POINTER TO PREVIOUS FORMAT TABLE USED.\n*        36    POINTER TO CURRENT TERMIO WORK AREA\n*        40    POINTER TO MASTER MONITOR (MM) CMD AREA, IF ANY\n*        44    CHARACTER 'MM' IF MASTER MONITOR IN CONTROL.\n*\n         CLC   28(4,R2),=C'#TSO'  IS THIS OUR FIRST TIME THRU\n         BE    CONTINUE           NO, PICK UP WORK AREA ADDRESS\n         MVC   28(4,R2),=C'#TSO'            MARK FSA AS INITIALISED\n         B     NEWWORK            GO GET A WORK AREA\n         SPACE 2\nCONTINUE L     R4,36(,R2)         GET OLD WORK AREA\n         USING WORK,R4\n         TM    IOCBFLGC,IOCBCCLR\n         BO    CHGFMT\n         CLC   IOCBFMT,32(R2)     HAS HE CHANGED FORMATS\n         BNE   CHGFMT             YES, NEED TO CHANGE WORK AREAS\n         L     R15,IOCBFMT        POINT AT THE NEW FORMAT\n         CLC   FMTHEAD,0(R15)     IS HEADER UNCHANGED\n         BNE   CHGFMT             NO, GET NEW WORK AREA\n         TM    IOCBFLGS,IOCBFW8+IOCBFNWT    IS IT NEW FORMAT REQUEST\n         BNO   RESTART            NO, JUST CONTINUE\nNEWFMTOK MVI   FLAGS,CLEARED      REQUEST REFORMATTING\n         RETURN (14,12)\n         SPACE 2\nCHGFMT   DS    0H\n         LR    R1,R4              LOAD WORD AREA ADDRESS\n         L     R0,DSECSIZE        GET SP AND LENGTH\n*        FREEMAIN R,LV=(0),ADDR=(1),SP=(0)\n         SVC   10                 ISSUE FREEMAIN SVC\n         DROP  R4\n         SPACE 2\nNEWWORK  L     R15,IOCBFMT        POINT AT THE NEW FORMAT\n         LH    R3,0(,R15)         GET LENGTH OF IMAGE\n         LA    R3,WORKLEN(,R3)    ADD SIZE OF REST OF WORK AREA\n         ICM   R3,8,=AL1(16)      ASK FOR SP=16\n         LR    R0,R3\n         LNR   R1,R0              SET FLAG FOR GETMAIN\n*        GETMAIN R,LV=(0),SP=(0)\n         SVC   10                 ISSUE GETMAIN SVC\n         ST    R1,36(,R2)         SET POINTER TO THE NEW WORK AREA\n         LR    R4,R1\n         USING WORK,R4\n         ST    R3,DSECSIZE        SAVE FREEMAIN ARGUMENT\n         L     R15,IOCBFMT        POINT AT THE NEW FORMAT TABLE\n         ST    R15,32(,R2)        PLACE IT IN THE FSA\n         MVC   FMTHEAD,0(R15)     SAVE THE HEADER FOR VALIDATION\n         MVI   FLAGS,CLEARED      REQUEST A SCREEN RE-FORMAT\n         LA    R1,ATTNECB\n         ST    R1,WAITLIST             BUILD LIST OF ECB'S FOR WAIT\n         LA    R1,TIMERECB             STIMER ECB\n         ST    R1,WAITLIST+4\n         OI    WAITLIST+4,X'80'        'END OF LIST' FLAG\n         XC    ATTNECB(4),ATTNECB      CLEAR ECB AREA\n         XC    TIMERECB(4),TIMERECB    CLEAR ECB AREA\n*\n         TM    IOCBFLGS,IOCBFW8+IOCBFNWT  IS IT A NEW FORMAT REQUEST\n         BO    NEWFMTOK\n         TM    IOCBFLGS,IOCBFNWR       MUST HAVE A WRITE TO FORMAT TUBE\n         BZ    RESTART\n         ABEND 110     ATTEMPT TO READ WITH UNFORMATTED SCREEN\n         DROP  R4\n         SPACE 4\nRESTART  ST    R4,8(,R13)         FORWARD CHAIN\n         ST    R13,4(,R4)         BACK CHAIN\n         LR    R13,R4             ESTABLISH WORK BASE\n         USING WORK,R13\n*                                 SET ATTENTION EXIT\n         STAX  ATTNEXIT,IBUF=0,OBUF=0,USADDR=(13),MF=(E,STAXLIST)\n         LTR   R15,R15            TEST STAX RETURN\n         BZ    STAXOK             ...GOOD\n         ABEND 101                ...NO GOOD\n*\nSTAXOK   DS    0H\n         L     R15,IOCBFMT        POINT AT THE USERS FORMAT\n         LA    R6,8               SET FMT ENTRY LENGTH FOR BXLE\n         LH    R7,2(,R15)         GET LENGTH OF FORMAT\n         AR    R7,R15             POINT PAST END OF FORMAT\n         SR    R7,R6              POINT AT LAST ENTRY\nXGOTBUF  EQU   *\nREADWILL EQU   *\n         TM    IOCBFLGS,IOCBFNWR  IS A WRITE REQUIRED\n         BO    NOWRITE            NO, CHECK FOR OTHER OPTIONS\n*U010    LA    R8,BUFFER+4        POINT PAST WCC AND SPF FLAG\n*U010    MVC   BUFFER(1),4(R15)   MOVE THE DEFAULT WCC IN\n         MVC   BUFFPFX(INITSCRL),INITSCR  INIT BUFFER PREFIX       U010\n         MVC   BUFFWCC,4(R15)           MOVE THE DEFAULT WCC IN    U010\n         TM    IOCBFLGS,IOCBFNBP+IOCBFNRR+IOCBFNRS  WERE THERE O'RIDES\n         BO    WCCOK              NO, USE WCC FROM FORMAT\n*U010    NC    BUFFER(1),IOCBFLGS           REMOVE OVERRIDDEN BITS\n*U010    OC    BUFFER(1),IOCBWCC            SET THE OVERRIDE VALUES\n*CCOK    OI    BUFFER,X'C0'       MAKE THE WCC PRINTABLE\n*U010    MVC   BUFFER+1(3),=X'115D7F'  SET SPF FLAG FIELD\n         NC    BUFFWCC,IOCBFLGS         REMOVE OVERRIDDEN BITS     U010\n         OC    BUFFWCC,IOCBWCC          SET THE OVERRIDE VALUES    U010\nWCCOK    OI    BUFFWCC,X'C0'            MAKE THE WCC PRINTABLE     U010\n         LA    R8,BUFFDATA              -> BUFFER DATA AREA        U010\n         LA    R4,6(,R15)         POINT AT FIRST ENTRY\n         TM    FLAGS,CLEARED      IS RE-FORMAT NECESSARY?\n*U003    BZ    UPDATE             NO - JUST THE CHANGED FIELDS\n         BO    CLEARIT                  YES - GO DO IT             U003\n         TM    IOCBFLGC,IOCBCATR        REFRESH ATTRIBUTE BYTES?   U003\n         BNO   UPDATE                   NO - JUST CHANGED FIELDS   U003\n         B     NXTATR                   YES - GO BUILD ATTRIBUTES  U003\n         SPACE 2\n*CLEARIT MVC   0(L'CLRORD,R8),CLRORD    MOVE IN ORDERS TO CLEAR SCREEN\n*U010    LA    R8,L'CLRORD(,R8)         BUMP POINTER OF CLEAR ORDERS\nCLEARIT  MVI   BUFFOPCD,X'F5'           3270 ERASE WRITE COMMAND   U010\n         LH    R3,0(,R15)         GET LENGTH OF LOCAL AREA\n         LA    R2,LOCAL           POINT AT LOCAL AREA\n         SR    R1,R1              SET UP TO CLEAR THE AREA\n         MVCL  R2,R0              ZERO THE WHOLE THING\n*\n*   BUILD THE ORDERS TO INSERT THE ATTRIBUTE BYTES\n*\nNXTATR   MVI   0(R8),X'11'        SBA\n         LA    R8,1(,R8)\n         LH    R1,2(,R4)          GET THE BUFFER ADDRESS\n         BCTR  R1,0               BACK UP TO THE ATTRIBUTE BYTE\n         BAL   R14,ENCODE         GO SET UP AN ADDRESS\n         MVI   0(R8),X'1D'        START FIELD\n         MVC   1(1,R8),1(R4)      MOVE IN THE ATTRIBUTE BYTE\n         LA    R8,2(,R8)\n         TM    1(R4),X'30'        IS THIS A DISPLAY FIELD\n         BO    NOFILL             YES, IT CAN BE EXTENDED TO COVER FILL\n         LH    R1,6(,R4)          GET THE FIELD LENGTH\n         AH    R1,2(,R4)          COMPUTE THE NEXT ATTRIBUTE BYTE\n         LA    R1,1(,R1)          POINT AT THE NEXT DATA BYTE\n         CR    R4,R7              IS THERE ANOTHER FIELD\n         BNL   DOFILL             NO, MUST LIMIT THIS ONE\n         CH    R1,10(,R4)         IS NEXT FIELD ADJACENT\n         BE    NOFILL             YES, IT WILL PROVIDE A LIMIT\n         BL    DOFILL             OTHERWISE CREATE A DUMMY FIELD\n         ABEND 104                OVERLAPPING FIELDS IN FORMAT TABLE\n         SPACE 3\nDOFILL   MVI   0(R8),X'11'        SBA\n         LA    R8,1(,R8)          POINT TO NEXT BUFFER BYTE\n         BCTR  R1,0               POINT AT THE ATTRIBUTE BYTE\n         BAL   R14,ENCODE\n         MVC   0(2,R8),=X'1D7C'   BLANK PROTECTED FIELD\n         LA    R8,2(,R8)\n         SPACE 2\nNOFILL   BXLE  R4,R6,NXTATR       GO DO THE NEXT FIELD\n         EJECT\n*\n*   AT THIS POINT R8 POINTS TO A BUFFER POSITION AT WHICH TO PLACE A\n*   SERIES OF ORDERS TO UPDATE THE SCREEN TO LOOK LIKE THE USERS IMAGE.\n*   THE ACTUAL CONTENTS ARE IN THE LOCAL IMAGE.\n*\nUPDATE   SR    R9,R9              INDICATE NO CURRENT BUFFER POSITION\n         LA    R4,6(,R15)         POINT AT THE FIRST FORMAT ENTRY\nNXTFIELD LH    R2,4(R4)           GET IMAGE OFFSET\n         LA    R0,LOCAL(R2)       GET POSITION IN LOCAL IMAGE\n         A     R2,IOCBIMG         GET POSITION IN USER IMAGE\n         LH    R3,6(,R4)          GET THE FIELD LENGTH\n         LR    R1,R3\n         LR    R5,R2              SAVE START OF FIELD\n         CLCL  R0,R2              LOOK FOR DIFFERENCES\n         BE    MATCH              THEY ARE THE SAME\n         SH    R1,6(,R4)          NUMBER OF BYTES THAT ARE THE SAME\n         LCR   R1,R1\n         CH    R1,=H'3'           IS IT WORTH A SBA\n         BH    LNGMATCH           YES, GO DO ONE\n         LR    R2,R5              NO, BACK UP TO START OF FIELD\n         AR    R3,R1              RESTORE COUNT\n         CH    R9,2(R4)           DID A PREVIOUS COMMAND PLACE US THERE\n         BE    NOSBA1             YES, NO NEED TO DO A SBA\n         MVI   0(R8),X'11'        SBA\n         LA    R8,1(,R8)\n         LH    R1,2(,R4)          POINT AT FIRST DATA BYTE\n         BAL   R14,ENCODE\nNOSBA1   TM    0(R4),X'C0'        IS A CURSOR NEEDED AT START OF FIELD\n         BNM   NOCUR1             NO\n         TM    IOCBFLGS,IOCBFCUR  HAS HE OVERRIDDEN THE CURSOR POSITION\n         BO    NOCUR1             YES, DON'T NEED ONE HERE\n         MVI   0(R8),X'13'        INSERT THE CURSOR\n         LA    R8,1(,R8)\nNOCUR1   B     DATAMOVE           GO PLACE THE ACTUAL DATA IN STREAM\n         SPACE 2\nLNGMATCH LR    R5,R1              SAVE BYTE COUNT REMAINING\n         TM    0(R4),X'C0'        DID WE NEED A CURSOR\n         BNM   NOCUR2             NO, JUST GO DO THE DATA\n         TM    IOCBFLGS,IOCBFCUR  HAS HE OVERRIDDEN THE CURSOR POSITION\n         BO    NOCUR2             YES, DON'T HONOR THE FORMAT BYTE\n         CH    R9,2(R4)           MAYBE WE ARE ALREADY THERE\n         BE    NOSBA2             YES, HOW LUCKY\n         MVI   0(R8),X'11'        WHAT A LOT OF WORK FOR A MEASLY\n         LA    R8,1(,R8)             LITTLE CURSOR.\n         LH    R1,2(,R4)          POINT AT THE DATA ADDRESS\n         BAL   R14,ENCODE\nNOSBA2   MVI   0(R8),X'13'        INSERT CURSOR\n         LA    R8,1(,R8)\nNOCUR2   MVI   0(R8),X'11'\n         LA    R8,1(,R8)\n         LH    R1,2(,R4)          GET FIELD ADDRESS IN 3270\n         AR    R1,R5              MOVE TO POINT OF FIRST DIFFERENCE\n         BAL   R14,ENCODE\n*\n*   R8=BUFFER LOCATION  R2=DATA ADDRESS   R3=DATA LENGTH\n*\nDATAMOVE STM   R2,R3,28(R13)      SAVE INPUT POINTERS\n         LH    R1,4(,R4)          GET IMAGE OFFSET\n         LA    R0,LOCAL(R1)       COMPUTE LOCAL FIELD START\n         LR    R1,R3              GET DATA LENGTH\n         SH    R1,6(,R4)          GET COMPLEMENT OF NUMBER OF MATCHES\n         SR    R0,R1              BUMP LOCAL FIELD ADDRESS\n         LR    R1,R3              GET NUMBER OF BYTES TO MOVE\n         MVCL  R0,R2              UPDATE LOCAL IMAGE\n         LM    R2,R3,28(R13)      RESTORE THE DATA POINTERS\n         BCTR  R2,0               ADJUST FOR REVERSE SCAN\nBLNKOUT  LA    R5,0(R2,R3)        POINT AT TRAILING BYTE\n         CLI   0(R5),C' '         IS IT A BLANK\n         BNE   SHORTND            NO, END OF TRUNCATION\n         BCT   R3,BLNKOUT         THROW AWAY THE BLANKS\n         BCTR  R5,0               ALLOW BLANKING OF 1-BYTE FIELDS\n         B     INSPT              JUST WIPE OUT REST OF FIELD\n         SPACE 2\nSHORTND  LA    R2,1(,R2)          POINT BACK AT FIRST BYTE\n         LA    R9,BUFFER+L'BUFFER-16        LAST ALLOWABLE ADDRESS\n         SR    R9,R8\n         CR    R9,R3              WILL IT FIT\n         BH    LENOK\n         ABEND 105                GENERATED DATA EXCEEDS BUFFER LENGTH\nLENOK    LR    R9,R3\n         LR    R1,R9              SAVE OUTPUT LENGTH\n         MVCL  R8,R2\n         LR    R3,R1              RETRIEVE OUTPUT LENGTH\n         LR    R2,R8\n         SR    R2,R3              COMPUTE OUTPUT ADDRESS\n         BAL   R14,OKCHAR         KEEP INVALID CHARS OFF THE LINE\n         SPACE 2\nINSPT    TM    0(R4),X'C0'        DOES HE WANT A CURSOR HERE\n         BNO   NOCUR3\n         TM    IOCBFLGS,IOCBFCUR  HAS HE OVERRIDDEN THE CURSOR POSITION\n         BO    NOCUR3             YES, THEN HE DOESN'T WANT ONE HERE\n         MVI   0(R8),X'13'        INSERT CURSOR\n         LA    R8,1(,R8)\nNOCUR3   S     R5,28(,R13)        COMPUTE DISTANCE TO END OF FIELD\n         S     R5,32(,R13)        GET -1-REMAINING BYTES\n         LCR   R5,R5              THAT MAKES IT REMAINING BYTES + 1\n         BCT   R5,*+8             CHECK FOR FULL FIELD\n         B     NONULL             IF SO, DO NOT PUT THE NULL IN\n         MVI   0(R8),0            INSERT A NULL\n         LA    R8,1(,R8)\nNONULL   MVI   0(R8),X'05'        INSERT A PT ORDER\n         LA    R8,1(,R8)\n         LR    R9,R4              POINT AT CURRENT FMT ENTRY\nPTSCAN   BXH   R9,R6,NOUNP        POINT TO NEXT FORMAT ENTRY\n         TM    1(R9),X'20'        IS THE FIELD UNPROTECTED\n         BO    PTSCAN             NO. PT ORDER WILL SKIP IT\n         LH    R9,2(,R9)          GET STOPPING POINT FOR PT ORDER\n         B     ENDFIELD\n         SPACE 3\nMATCH    TM    IOCBFLGS,IOCBFCUR  HAS HE OVERRIDDEN THE CURSOR POSITION\n         BO    ENDFIELD           YES, THEN WE ARE THROUGH HERE\n         TM    0(R4),X'C0'        DID THE FORMAT CALL FOR A CURSOR\n         BZ    ENDFIELD           NO, GO TO NEXT FIELD\n         BO    MATSCAN            YES, AFTER ALL THE DATA\n         CH    R9,2(,R4)          IS THE BUFF ADD NOW AT RIGHT POINT\n         BE    NOSBA4             YES, HOW FORTUTITOUS\n         LH    R1,2(,R4)          GET THE DATA ADDRESS\nMATSBA   MVI   0(R8),X'11'        SBA\n         LA    R8,1(,R8)\n         BAL   R14,ENCODE\nNOSBA4   MVI   0(R8),X'13'        INSERT CURSOR\n         LA    R8,1(,R8)\n         SR    R9,R9              INDICATE UNKNOWN BUFFER ADDRESS\n         B     ENDFIELD\n         SPACE 2\nMATSCAN  LH    R1,6(,R4)          GET FIELD LENGTH\nMATSCANL BCTR  R2,0               MOVE POINTER BACK ONE\n         CLI   0(R2),C' '         IS THIS A BLANK\n         BNE   MATSCANE           YES, PLACE THE CURSOR HERE\n         BCT   R1,MATSCANL\nMATSCANE AH    R1,2(,R4)          COMPUTE CURSOR ADDRESS\n         B     MATSBA\n         SPACE\nNOUNP    SR    R9,R9              INDICATE NO FOLLOWING UNPROTECTED\nENDFIELD BXLE  R4,R6,NXTFIELD     GO DO NEXT FIELD\n         SPACE 5\n*                             PUT TIMESTAMP IN BOTTOM LH CORNER\n*\n         TM    IOCBFLGC,IOCBCTIM\n         BO    NOTIMSTP\n         MVC   0(STAMPLEN,R8),IOCBCTRL\n*U012    LA    R8,STAMPLEN(R8)\n         MVC   STAMPLEN(2,R8),=X'1D60'  PROT FIELD AFTER STAMP     U012\n         LA    R8,STAMPLEN+2(,R8)       POINT PAST THIS DATA       U012\nNOTIMSTP EQU   *\n*\n*  NOW THAT THE SCREEN HAS BEEN FORMATTED WE CAN PLACE THE SPECIAL\n*  FIELD IN THE LOWER RIGHT CORNER FOR ERASE INPUT DETECTION.\n*\n         MVC   0(7,R8),=X'115D7E1DC11D60'   ROW 24 COL 79          U008\n         LA    R8,7(,R8)          BUMP THE FIELD POINTER\n         TM    IOCBFLGS,IOCBFCUR  HAS HE OVERRIDDEN THE CURSOR POSITION\n         BZ    NOCUR4             NO, THEN CURSOR IS ALREADY IN\n         LH    R1,IOCBCUR         GET IMAGE OFFSET OF CURSOR\n         L     R4,IOCBFMT         GET FIRST FORMAT ENTRY\n         LA    R4,6(,R4)          SKIP THE HEADER\nCURSCAN  LH    R2,4(,R4)          GET THE IMAGE OFFSET OF THE FIELD\n         AH    R2,6(,R4)          COMPUTE END OF FIELD\n         CR    R1,R2              SEE IF CURSOR IS IN FIELD\n         BL    CURFND             YES, GO PLACE IT THERE\n         BXLE  R4,R6,CURSCAN      GO CHECK THE NEXT ENTRY\nCURSBAD  ABEND 106                CURSOR IS BEYOND END OF IMAGE\n         SPACE 2\nCURFND   SH    R1,4(,R4)          COMPUTE OFFSET IN FIELD\n         BNM   CUROK              CHECK FOR INCLUSION\n         B     CURSBAD            CURSOR IS IN IMAGE FILL AREA\nCUROK    AH    R1,2(,R4)          COMPUTE TUBE ADDRESS\n         MVI   0(R8),X'11'        SBA\n         LA    R8,1(,R8)\n         BAL   R14,ENCODE\n         MVI   0(R8),X'13'        INSERT CURSOR\n         LA    R8,1(,R8)\n         SPACE 3\nNOCUR4   NI    BUFFWCC,255-X'02'        RESET 'KEYBOARD RESET' BIT U010\n         LA    R9,BUFFER          POINT AT FRONT OF BUFFER\n         SR    R8,R9              COMPUTE DATA LENGTH\n         TPUT  (R9),(R8),FULLSCR,WAIT,NOHOLD,NOBREAK\n         CH    R15,=H'8'\n         BE    SIMPA1        RC = 8 (ATTENTION DURING TPUT)\n         LTR   R15,R15\n         BZ    TPUTOK\n         ABEND 107                     ERROR FROM TPUT\nTPUTOK   MVI   FLAGS,LASTOPW                REMEMBER THE STATUS\n         TM    IOCBFLGS,IOCBFNRD  WAS A READ REQUESTED\n         BZ    READ               YES, GO ISSUE IT\n         TM    IOCBFLGS,IOCBFNWT  DID HE WANT ME TO DO THE WAIT\n         BZ    SETAID             ...YES, GO DO IT (MAYBE)\n         B     EXIT               ...NO, SO EXIT.\n*\nSETAID   EQU   *\n         MVI   IOCBAID,AIDENT     INIT RETURN AID\n*\n*                          NO  READ REQUESTED\n*\n         TM    IOCBFLGD,IOCBDYON      USE IOCB WAIT TIME?\n         BZ    EXIT                   ...NO, SO EXIT.\n         TM    IOCBFLGD,IOCBDFRC      FORCE DELAY OF TSO USER?\n         BZ    EGETS                  ...NO, SO DO TGET INSTEAD.\n         STIMER REAL,TIMEXIT,BINTVL=IOCBWAIT  ...YES, DO STIMER\n*\n         WAIT  ECBLIST=WAITLIST      THEN WAIT TIL ATTN OR TIMER POST\n*\n         TM    ATTNECB,X'40'            ATTN INTERRUPT?            U006\n         BO    WAIT1                    YES, PROCESS IT            U006\n         MVI   TIMERECB,X'00'           NO, RESET TIMER ECB        U006\n         B     EXIT                         AND GO HOME            U006\n*\nWAIT1    MVI   ATTNECB,X'00'            RESET ATTN ECB             U006\n         TTIMER CANCEL                  CANCEL STIMER\n         MVI   TIMERECB,X'00'           RESET TIMER ECB            U006\n         B     SIMPA1                   AND SIMULATE ATTENTION\n*\nEGETS    EQU   *\n         L     R1,IOCBTERM+8\n         LTR   R1,R1\n         BNZ   EGOTBUF\n         GETMAIN R,LV=4096,SP=1\n         ST    R1,IOCBTERM+8 .       KEEP RETRY BUFFER\nEGOTBUF  EQU   *\n         L     R9,IOCBTERM+8\n         LA    R8,2148\n         B     TGET\n*\n         SPACE 2\nNOWRITE  TM    IOCBFLGS,IOCBFW8   WAS A WAIT ONLY REQUESTED\n         BO    BADREQST           YES, WE CAN'T DO THAT\n         TM    FLAGS,LASTOPW      WAS LAST OPERATION A WRITE\n         BO    READ               YES, THEN GO DO THE READ\nBADREQST ABEND 102                NO, ATTEMPT TO READ TWICE IN A ROW\n         SPACE 2\nREAD     LA    R9,BUFFER\n         LA    R8,L'BUFFER\nTGET     EQU   *\n         ST    R9,CURRBUF\n         TGET  (R9),(R8),ASIS\n         ST    R1,INLEN                SAVE INPUT LENGTH\n         CH    R15,=H'8'               CHECK RESULTS\n         BL    TGETOK\n         BE    SIMPA1                  ATTN WAS PROCESSED\n         ABEND 103                     INVALID RC FROM TGET\n         SPACE 2\nSIMPA1   MVI   0(R9),AIDPA1            SET ATTENTION AID\n         CLI   IOCBTERM+1,X'7F'         DONE STFSMODE?             U006\n         BNE   TGETOK                   NO, DON'T DO IT AGAIN      U006\n         STFSMODE  ON,INITIAL=NO        YES, MAKE SURE ALL IS OKAY U006\n         SPACE 2\nTGETOK   MVI   FLAGS,LASTOPR      INDICATE ALL I/O COMPLETE\n         MVC   IOCBAID,0(R9)      SAVE THE ATTENTION DESCRIPTION\n         TR    IOCBAID,AIDTABLE         CHANGE PF13-24 TO PF1-12   U001\n*\n         BAL   R14,CHKAID               CHK FOR PFK'S OR PA'S\n*\n         LR    R5,R1                    GET LENGTH OF INPUT DATA\n         LA    R5,BUFFER-3(R5)          POINT AT LAST 3 BYTES      U008\n         CLC   0(3,R5),=X'115D7F'       IS LAST FIELD EXPECTED ONE U008\n         BE    CNVTCUR            YES, USER DID NOT HIT ERASE INPUT\n* LOCAL 3272'S SEEM TO CRUNCH THE LAST BYTE OF THE SBA SEQUENCE\n* RETURNED BY OUR SPECIAL ZERO-LENGTH FIELD.  HENCE THE KLUGE HERE.\n         CLC   0(2,R5),=X'115D7F'       IS LAST FIELD SORT OF      U013\n         BE    CNVTCUR                  YES, HARDWARE SCREWED UP   U013\n* LOCAL 3272'S SEEM TO LOSE THE LAST BYTE OF THE SBA SEQUENCE\n* RETURNED BY OUR SPECIAL ZERO-LENGTH FIELD.  HENCE THE KLUGE HERE.\n         LA    R5,1(,R5)                POINT AT LAST 2 BYTES      U009\n         CLC   0(2,R5),=X'115D7F'       IS LAST FIELD SORT OF      U009\n         BE    CNVTCUR                  YES, HARDWARE SCREWED UP   U009\n         LA    R5,2(,R5)                SET LIMIT TO END OF BUFFER U009\n*\n*  THE SPECIAL FIELD THAT WAS PLACED IN THE LOWER RIGHT HAND CORNER\n*  OF THE SCREEN WAS RESET. THE USER HIT THE ERASE INPUT KEY.\n*\n         L     R4,IOCBFMT\n         LA    R4,6(,R4)          POINT AT THE FIRST FORMAT ENTRY\nERSINP   TM    1(R4),X'20'        IS THIS A PROTECTED FIELD\n         BO    ERSPRO             YES, THEN DON'T ERASE IT\n         LH    R2,4(,R4)          GET THE IMAGE OFFSET\n         LA    R2,LOCAL(R2)       POINT AT THE LOCAL COPY\n         LH    R3,6(,R4)          GET THE FIELD LENGTH\n         SR    R1,R1              SET UP FOR FIELD ZEROING\n         ICM   R1,8,=CL128' '     MAKE THE FILL CHARACTER A BLANK\n         MVCL  R2,R0              BLANK OUT THE FIELD\nERSPRO   BXLE  R4,R6,ERSINP       GO DO THE NEXT FIELD\n*U008    CLC   0(3,R5),=X'115D7E6A6A'       IS THE FIELD STILL THER\n*U008    BE    CNVTCUR            FIELD IS STILL THERE, BUT DIFFERENT\n*U008    LA    R5,1(,R5)          MOVE TO LAST POSSIBLE POSITION\n*U008    CLC   0(3,R5),=X'115D7E6A6A'       DID HE ONLY DO IN ONE BYTE\n*U008    BE    CNVTCUR            YES, IGNORE THAT FIELD\n*U008    LA    R5,4(,R5)          FIELD IS GONE COMPLETELY\n*U009    LA    R5,3(,R5)                SET LIMIT TO END OF BUFFER U008\n         SPACE 2\nCNVTCUR  EQU   *\n         SR    R9,R9              COUNT OF # OF FIELDS MOVED\n         LA    R8,BUFFER+1        POINT AT BYTE AFTER THE AID\n         BAL   R14,DECODE         GET THE IMAGE OFFSET FOR IT\n         STH   R1,IOCBCUR         FEED IT BACK TO THE USER\n         CR    R8,R5              IS THE BUFFER EXHAUSTED\n         BNL   EOB                IF SO, COPY THE UPDATED BUFFER\n         CLI   0(R8),X'11'        VERIFY THAT IT IS A SBA ORDER\n         BNE   CLEAR              BUFFER WAS NOT FORMATTED, IGNORE IT\nINPFIELD LA    R8,1(,R8)          POINT PAST THE SBA\n*\n         CLC   0(2,R8),=X'5DE5'   CHECK FOR INTERVAL FIELD\n         BE    NEWTIME            USER CHANGED TIME INTERVAL VALUE\n*\n         BAL   R14,DECODE         GET THE IMAGE OFFSET\n         CH    R1,4(,R4)          DOES IT POINT TO FIELD START\n         BNE   BADDATA            NO...INVALID INPUT LOC\n*\n         LA    R9,1(R9)           INCREMENT COUNT OF FLDS MOVED\n         LR    R2,R8              GET DATA ADDRESS\n         LR    R3,R5              GET EOB ADDRESS\n         SR    R3,R2              COMPUTE REMAINING BYTES\n         BP    SBALOOP            CHECK FOR LEGAL DATA FORMAT\n         LR    R1,R8              USER ERASED THE FIELD\n         BZ    FNDSBA             GO COPY NO BYTES TO THE IMAGE\n*\nBADDATA  ABEND 108                INPUT DATA WAS TOO SHORT\nSBALOOP  CH    R3,=H'256'\n         BNH   SHRTRT             IS LENGTH DOWN BELOW 257\n         TRT   0(256,R2),TRTSBA   LOOK FOR AN SBA BYTE\n         BNZ   FNDSBA             WAS ONE FOUND\n         AH    R2,=H'256'         NO, ADVANCE ONE SWATCH\n         SH    R3,=H'256'         REDUCE THE COUNT\n         B     SBALOOP            GO TRY SOME MORE\nSHRTRT   BCTR  R3,0               REDUCE COUNT FOR EX\n         EX    R3,EXTRT           ONE LAST SCAN\n         BNZ   FNDSBA             WAS ONE FOUND\n         LA    R1,1(R2,R3)        NO, POINT PAST END OF BUFFER\nFNDSBA   SR    R1,R8              GET INPUT FIELD LENGTH\n         LR    R0,R8              GET FIELD ADDRESS\n         AR    R8,R1              POINT AT THE LOCATED BYTE\n         LR    R3,R1              SET UP FOR UPCASE ROUTINE\n         LH    R2,4(,R4)          GET IMAGE OFFSET\n         LA    R2,LOCAL(R2)       POINT AT DESTINATION\n         LR    R14,R2\n         LH    R15,6(,R4)         GET DESTINATION LENGTH\n         ICM   R1,8,=CL128' '     SET UP THE PAD CHARACTER\n         MVCL  R14,R0             COPY INPUT INTO IMAGE\nCHKEND   CR    R8,R5              IS THAT END OF BUFFER\n         BL    INPFIELD           NO, GO DO THE NEXT ONE\nEOB      BE    CANCEL             MAKE SURE EOB HIT RIGHT ON\n         B     BADDATA            END OF INPUT BUFFER WAS MISSED\n         SPACE 2\n*                   GET UPDATED TIME INTERVAL FROM INPUT\n*\nNEWTIME  DS    0H\n         MVC   4(2,R8),5(R8)              COMPRESS OUT '.'\n         XC    DOUBLE(8),DOUBLE           CLEAR WORK AREA\n         PACK  DOUBLE+5(3),2(4,R8)\n         CVB   R1,DOUBLE                  INTO BINARY\n         ST    R1,IOCBWAIT                AND STORE FOR NEXT TIME\n*\n         LA    R8,7(R8)                   MOVE POINTER PAST TIME\n         B     CHKEND                     AND RETURN INTO LOOP\n         EJECT\nCANCEL   L     R2,IOCBIMG         POINT AT USER IMAGE AREA\n         LA    R0,LOCAL           POINT AT OUR IMAGE AREA\n         L     R14,IOCBFMT        POINT AT USER FORMAT\n         LH    R1,0(,R14)         GET IMAGE LENGTH\n         LR    R3,R1\n         MVCL  R2,R0              COPY LOCAL IMAGE TO USER IMAGE\n         LH    R3,0(,R14)              GET LENGTH AGAIN\n         SR    R2,R3\n         BAL   R14,UPCASE              MAKE THE USERS COPY UPPER CASE\n         CLI   IOCBAID,AIDCAN     DID WE GET HERE FROM CANCEL KEY\n         BNE   CHECKSIM           NO, CHECK FOR SIMULATED PFK\n         SPACE 2\nPA1      EQU   *\nPA3      EQU   *\nPF12     EQU   *\n*U010    TPUT  CLEARSCR,11,FULLSCR,,HOLD   CLEAR SCREEN            U001\n         TPUT  CLRSCR,CLRSCRL,FULLSCR                              U010\n*\nCLEAR    MVI   FLAGS,CLEARED      INDICATE THAT TUBE IS NOT FORMATTED\n         B     EXIT               RETURN TO USER\n         SPACE 4\n         EJECT\nCHECKSIM DS    0H     CHECK FOR SIMULATED PFK, OR MM COMMAND\n*                     ...DENOTED BY SINGLE INPUT FIELD WITH\n*                     LEADING '/'.\n*   CHANGED TO '='                                                 U001\n         CH    R9,=H'1'          SINGLE FIELD ENTERED?\n         BNE   EXIT              ...NO, LEAVE\n         L     R1,CURRBUF        WHERE INPUT SHOULD BE\n         LA    R1,6(R1)          START OF ACTUAL DATA\n         CLI   0(R1),C'='        START WITH ESCAPE CHAR?           U001\n         BNE   EXIT              ...NO, LEAVE\n*\n         MVC   TESTPFK(1),1(R1)\n         TR    TESTPFK(1),PFKTRT  TRANSLATE SIMULATORS TO PFK AIDS\n         CLI   TESTPFK,X'00'     WAS IT VALID PFK SIMULATOR?\n         BE    CKSIM2            ...NO, ASSUME MM COMMAND\n         MVC   IOCBAID,TESTPFK   MOVE TO AID FIELD\n         BAL   R14,CHKAID        TEST AGAIN FOR PA1,3, OR PF12\n         B     EXIT              THEN LEAVE.\n*\nCKSIM2   EQU   *                 HAVE MM COMMAND.\n         BAL   R14,GETFSA        GET FSA IN REG2\n         CLC   44(2,R2),=C'MM'   IS MM IN CONTROL?\n         BNE   EXIT              ...NO, TOO BAD.\n         CLI   IOCBAID,AIDPF3           IS IT END KEY?             U005\n         BNE   EXIT                     NO - PASS TO PROCESSOR     U005\n*\n         LA    R0,1(,R1)         SOURCE ADDR (INPUT BUFFER)\n         L     R1,INLEN          USER INPUT LEN\n         SH    R1,=H'12'         LESS LEADING AND TRAILING STUFF\n         ICM   R1,8,=C' '        PAD CHARACTER\n*\n         SR    R3,R3             CLEAR FOR ICM\n         ICM   R3,1,40(R2)       MM WORK AREA LENGTH\n         L     R2,40(R2)         MM WORK AREA ADDR\n*\n         MVCL  R2,R0             DO MOVE TO MM'S AREA\n*\n         MVI   IOCBAID,AIDPA1    SIMULATE ATTN TO TERMINATE TASK\n         B     CLEAR             CLEAR FLAGS\n*\nEXIT     EQU   *\n         BAL   R14,GETFSA        GET FSA IN REG2\n*\n         CLI   44(R2),X'7F'\n         BNE   OOPS\n         L     R3,48(R2)\n         USING TDCB,R3\n         MVC   TDCBAID,IOCBAID\n         DROP  R3\n*\n*\n*\nOOPS     EQU   *\n         STAX  ,                  CANCEL ATTENTION EXIT\n         L     R13,4(,R13)        POINT TO CALLERS REGISTERS\n         RETURN (14,12)\n         EJECT\n*\n*   CONVERT A HALF WORD BUFFER ADDRESS TO 3270 FORMAT\n*\n*        R1 = 12 BIT BUFFER ADDRESS\n*        R8 = OUTPUT AREA ADDRESS\n*\nENCODE   SLDL  R0,26              GET TWO 6-BIT QUANTITIES\n         SRL   R1,2               MAKE THEM 8-BIT QUANTITIES\n         SRDL  R0,8               IN THE SAME REGISTER\n         STCM  R1,12,0(R8)        PLACE THEM IN THE DATA STREAM\n         TR    0(2,R8),TABLENC    MAKE THEM PRINTABLE\n         LA    R8,2(,R8)          BUMP THE OUTPUT ADDRESS\n         BR    R14                RETURN TO CALLER\n         SPACE 2\nTABLENC  DC    C' ABCDEFGHI\u00a2.<(+|&&JKLMNOPQR!$*);\u00ac-/STUVWXYZ\u00a6,%_>?01234X\n               56789:#@''=\"'      TABLE TO MAKE ADDRESSES PRINTABLE\n         SPACE 4\n*\n*   ROUTINE TO CONVERT A FIELD TO UPPER CASE\n*        R2=ADDRESS,  R3=LENGTH,  R14=RETURN\n*\nOKCHAR   LA    R1,OKCTBL          USE OUTPUT TRANSLATE TABLE\n         B     *+8\nUPCASE   LA    R1,UPCTBL          USE INPUT (UPPER CASE) TABLE\n         CH    R3,=H'256'         IS IT TOO SHORT FOR A LONG TR ?\n         BL    LASTPASS           YES, GO DO AN EXECUTED ONE\n         TR    0(256,R2),0(R1)      CONVERT A SWATCH\n         AH    R2,=H'256'         MOVE TO NEXT SWATCH\n         SH    R3,=H'256'         DECREASE REMAINING COUNT\n         BNZ   UPCASE             GO DO IT AGAIN\nLASTPASS SH    R3,=H'1'           REDUCE FOR EXECUTE\n         BMR   R14                YES, JUST RETURN\n         EX    R3,TRUPC           CONVERT TAIL END TO U.C.\n         BR    R14\n         SPACE 2\nTRUPC    TR    0(0,R2),0(R1)           << EXECUTED >>\n         SPACE 2\nOKCTBL   DC    256C'?'                 ALL INVALIDS GO TO QUESTION\n         ORG   OKCTBL+X'00'                                        U006\n         DC    X'00'                                               U006\n         ORG   OKCTBL+C' '\n         DC    C' '\n         ORG   OKCTBL+C'\u00a2'\n         DC    C'\u00a2.<(+|&&'\n         ORG   OKCTBL+C'!'\n         DC    C'!$*);\u00ac-/'\n         ORG   OKCTBL+C','\n         DC    C',%_>?'\n         ORG   OKCTBL+C':'\n         DC    C':#@''=\"'\n         ORG   OKCTBL+X'81'\n         DC    X'818283848586878889'   RETAIN LOWER CASE FOR OUTPUT\n         ORG   OKCTBL+X'91'\n         DC    X'919293949596979899'\n         ORG   OKCTBL+X'A2'\n         DC    X'A2A3A4A5A6A7A8A9'\n         ORG   OKCTBL+C'A'\n         DC    C'ABCDEFGHI'\n         ORG   OKCTBL+C'J'\n         DC    C'JKLMNOPQR'\n         ORG   OKCTBL+C'S'\n         DC    C'STUVWXYZ'\n         ORG   OKCTBL+C'0'\n         DC    C'0123456789'\n         ORG\n         SPACE 2\nUPCTBL   DC    256C'?'                 ALL INVALIDS GO TO QUESTION\n         ORG   UPCTBL+X'00'                                        U007\n         DC    X'00'                                               U007\n         ORG   UPCTBL+C' '\n         DC    C' '\n         ORG   UPCTBL+C'\u00a2'\n         DC    C'\u00a2.<(+|&&'\n         ORG   UPCTBL+C'!'\n         DC    C'!$*);\u00ac-/'\n         ORG   UPCTBL+C','\n         DC    C',%_>?'\n         ORG   UPCTBL+C':'\n         DC    C':#@''=\"'\n         ORG   UPCTBL+X'81'\n         DC    C'ABCDEFGHI'            LOWER GOES TO UPPER FOR INPUT\n         ORG   UPCTBL+X'91'\n         DC    C'JKLMNOPQR'\n         ORG   UPCTBL+X'A2'\n         DC    C'STUVWXYZ'\n         ORG   UPCTBL+C'A'\n         DC    C'ABCDEFGHI'\n         ORG   UPCTBL+C'J'\n         DC    C'JKLMNOPQR'\n         ORG   UPCTBL+C'S'\n         DC    C'STUVWXYZ'\n         ORG   UPCTBL+C'0'\n         DC    C'0123456789'\n         ORG\n         SPACE 4\n*\n*   ROUTINE TO FIND THE IMAGE OFFSET FOR A BUFFER ADDRESS\n*   INPUT:  R8=ADDRESS OF INPUT,  R6 AND R7 SET UP FOR BXLE THROUGH FMT\n*   OUTPUT:  R1= IMAGE OFFSET, R4 POINTS AT FORMAT ENTRY\n*      R1 = -1 IF BUFFER ADDRESS IS OUTSIDE OF THE IMAGE\n*\nDECODE   L     R4,IOCBFMT\n         LA    R4,6(,R4)          POINT AT FIRST FORMAT\n         IC    R0,1(,R8)          GET THE SECOND BYTE\n         SLL   R0,2               REMOVE HIGH TWO BITS\n         ICM   R0,2,0(R8)         TACK ON THE FIRST BYTE\n         SRL   R0,2               PUT IT IN LOW 12 BITS\n         LA    R1,4095            SET MASK FOR 12 BITS\n         NR    R1,R0              GET THE BINARY BUFFER OFFSET\n         LA    R8,2(,R8)          BUMP THE SCAN POINTER\nDECDL    LH    R0,2(,R4)          GET FIELD START\n         CR    R0,R1              IS THIS IT\n         BE    DECDF              YES, RIGHT ON THE DOT\n         BH    DECDERR            FIELD IS NOT DEFINED\n         AH    R0,6(,R4)          POINT AT END OF FIELD\n         CR    R0,R1              CHECK FOR INCLUSION\n         BH    DECDF              YES, GOT IT\n         BXLE  R4,R6,DECDL        GO TRY NEXT FIELD\nDECDERR  LH    R1,=H'-1'          SET ERROR INDICATION\n         BR    R14\nDECDF    SH    R1,2(,R4)          GET RELATIVE POSITION IN FIELD\n         AH    R1,4(,R4)          POINT INTO IMAGE INSTEAD\n         BR    R14                RETURN TO CALLER\n         SPACE 4\nGETFSA   DS    0H        FIND FSA AND RETURN IN REG 2\n         L     R2,16                        POINT AT THE CVT\n         L     R2,0(,R2)                    NEW/OLD\n         L     R2,4(,R2)                    OUR TCB\n         L     R2,112(,R2)                  FSA\n         BR    R14\nCHKAID   DS    0H\n*        TM    IOCBFLGC,IOCBCFRA  IF FORCE\n*        BO    EXIT                  THEN EXIT\n*U008\n*U008    TM    IOCBFLGC,IOCBCRAO  IF\n*U008    BNO   OTHER2               REQUESTED\n*U008    CLI   IOCBAID,AIDPF1                TRANSMIT\n*U008    BL    OTHER1                                ONLY\n*U008    CLI   IOCBAID,AIDPF9                            PFK\n*U008    BH    OTHER2                                       AID\n*U008    B     EXIT                                            BACK\n*OTHER1  EQU   *\n*U008    CLI   IOCBAID,AIDPF10     OTHERWISE,\n*U008    BL    OTHER2                        PERFORM\n*U008    CLI   IOCBAID,AIDPF12                      NORMAL\n*U008    BH    OTHER2                                     READ\n*U008    BE    PF12                                           REPLACE\n*U008    B     EXIT\n*\n*OTHER2  EQU   *\n         CLI   IOCBAID,AIDCLR     DID HE HIT THE CLEAR KEY\n         BE    CLEAR              YES, GO INDICATE ZEROED BUFFER\n         CLI   IOCBAID,AIDCAN     DID HE HIT CANCEL (PA2)\n         BE    CANCEL             YES, GIVE BACK ORIGINAL SCREEN\n         CLI   IOCBAID,AIDPA1     IS IT SOME OTHER FUNCTION\n         BE    PA1\n         CLI   IOCBAID,AIDPA3\n         BE    PA3\n         CLI   IOCBAID,AIDPF12\n         BE    PF12\n         TM    IOCBAID,X'40'      IS IT A VALID AID\n         BOR   R14                YES, GO LOOK AT MANUAL INPUT\n         ABEND 109                AID BYTE WAS NOT VALID\n         EJECT\n*---------------------------------------------------------------------*\n*\n*    ATTENTION EXIT - ENTERED FROM SYSTEM IF USER HITS ATTENTION\n*            KEY.  IT WILL POST AN ECB WHICH THE MAIN LINE ROUTINE\n*            IS WAITING ON.\n*\n*---------------------------------------------------------------------*\n         SPACE 2\n         DROP  R13\n*\nATTNEXIT DS    0H\n         STM   R14,R12,12(R13)          SAVE REGS\n         L     R4,8(R1)                 WORK AREA ADDR\n         USING WORK,R4\n         LR    R12,R15                  ENTRY ADDRESS\n         USING ATTNEXIT,R12\n*\n         POST  ATTNECB                  ISSUE POST\n*\n         RETURN (14,12),RC=0\n*\n         DROP  R4,R12\n         USING WORK,R13\n         EJECT\n*---------------------------------------------------------------------*\n*\n*    STIMER EXIT - ENTERED FROM SYSTEM IF STIMER (FOR IOCB VALUE)\n*            EXPIRES.  IT WILL POST AN ECB WHICH THE MAIN LINE\n*            ROUTINE IS WAITING ON.\n*\n*---------------------------------------------------------------------*\n         SPACE 2\nTIMEXIT  DS    0H\n         STM   R14,R12,12(R13)          SAVE REGS\n         LR    R12,R15                  ENTRY ADDRESS\n         USING TIMEXIT,R12\n*\n*                                       FIND WORK AREA ADDRESS\n         L     R2,16                        POINT AT THE CVT\n         L     R2,0(,R2)                    NEW/OLD\n         L     R2,4(,R2)                    OUR TCB\n         L     R2,112(,R2)                  FSA (FIRST SAVE AREA)\n         L     R4,36(R2)                    WORK AREA ADDRESS\n         DROP  R13                      DROP PREVIOUS WORK BASE\n         USING WORK,R4\n*\n         POST  TIMERECB                 ISSUE POST\n*\n         RETURN (14,12),RC=0            RETURN TO SYSTEM\n*\n         DROP  R4,R12\n         USING WORK,R13                 RESTORE PREVIOUS WORK BASE\n         EJECT\n*   CONSTANTS DSECTS AND OTHER POOR TRASH\nNOT      EQU   X'FF'\nEXTRT    TRT   0(0,R2),TRTSBA     SCAN FOR SBA\n         SPACE 4\n         LTORG\n         SPACE 1\nINITSCR  DC    X'27'                    ESC: 3270 COMMAND FOLLOWS  U010\n         DC    X'F1'                    3270 NORMAL WRITE COMMAND  U010\n         DC    X'C0'                    WCC: SKELETON VALUE        U010\n         DC    X'115D7F'                SPF TCAM PREFIX: INIT      U010\nINITSCRL EQU   *-INITSCR                                           U010\n         SPACE 1\n*LEARSCR DC    XL11'C41140403C4040001D4013'  FOR CLEAR TPUT        U002\n         SPACE 1\nCLRSCR   DC    X'27'                    ESC: 3270 COMMAND FOLLOWS  U010\n         DC    X'F5'                    3270 ERASE WRITE COMMAND   U010\n         DC    X'C4'                    WCC: ALARM                 U010\n         DC    X'115D7E'                SPF TCAM PREFIX: END       U010\n         DC    X'114040'                REQUIRED FOR SPF TCAM PFX  U010\nCLRSCRL  EQU   *-CLRSCR                                            U010\n         SPACE 1\n*U010  CLRORD  DC  X'1140403C404000'         ORDERS TO CLEAR SCREEN\nTRTSBA   DC    XL17'0',X'01',XL238'0'       TRT TABLE FOR SBA ORDER\n         SPACE 1\nPFKTRT   DC    240X'00',X'7A',C'123456789',6X'00'\n         ORG   PFKTRT+C'-'\n         DC    X'7B'        - IS PFK 11 SIMULATOR\n         ORG   PFKTRT+C'='\n         DC    X'7C'        = IS PFK 12 SIMULATOR\n         ORG\n         SPACE 1\nAIDTABLE DC    256AL1(*-AIDTABLE)       EVERYTHING GOES TO ITSELF  U001\n         ORG   AIDTABLE+X'C1'           EXCEPT PF13-PF21           U001\n         DC    X'F1F2F3F4F5F6F7F8F9'    CHANGE TO PF1-PF9          U001\n         ORG   AIDTABLE+X'4A'           AND PF22-PF24              U001\n         DC    X'7A7B7C'                CHANGE TO PF10-PF12        U001\n         ORG   ,                        THAT'S IT                  U001\n         SPACE 1                                                   U001\nPATCH    DS    XL50'0'\nIOCB     DSECT\n         IOCB\n         EJECT\n*---------------------------------------------------------------------*\n*\n*  WORK DSECT ... SAVE AREAS, SCREEN BUFFER AND MISC.\n*\n*---------------------------------------------------------------------*\n         SPACE 2\nWORK     DSECT\n         DS    18F                SAVE AREA\nDOUBLE   DS    D                  WORK AREA FOR NEWTIME - PACK\nTIMERECB DS    F                  ECB FOR STIMER\nATTNECB  DS    F                  ECB FOR ATTENTION EXIT\nWAITLIST DS    2A                 LIST OF ECB'S FOR WAIT\n*\nSTAXLIST STAX  ATTNEXIT,MF=L      LIST FOR OF STAX FOR EXECUTE FORM\n*\nFLAGS    DS    H\nCLEARED  EQU   X'20'\nLASTOPR  EQU   X'10'\nLASTOPW  EQU   X'08'\n*\nCURRBUF  DS    F             LOCATION OF CURRENT INPUT BUFFER\nINLEN    DS    F             LAST TGET INPUT LENGTH\nTESTPFK  DS    X             FOR CHECKING FOR SIMULATED PFK\n*\nFMTHEAD  DS    CL6\nDSECSIZE DS    F\nBUFFER   DS    CL2700                                              U011\n         ORG   BUFFER                                              U010\nBUFFPFX  DS    0XL6                     ENTIRE BUFFER PREFIX       U010\n         DS    X                        \"ESC\": COMMAND FOLLOWS     U010\nBUFFOPCD DS    X                        3270 COMMAND CODE          U010\nBUFFWCC  DS    X                        3270 WRITE CONTROL CODE    U010\nBUFFSPF  DS    XL3                      SPF TCAM PREFIX            U010\nBUFFDATA DS    0C                       START OF BUFFER DATA       U010\n         ORG   ,                                                   U010\nLOCAL    DS    0F\nWORKLEN  EQU   *-WORK\n         EJECT\n         TDCB\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TERMIO3": {"ttr": 12545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x01\\x00\\x00\\x00\\x80\\x17\\x7f\\x00\\x92\\t\\x0f P\\x02\\xfb\\x02\\xa9\\x00R\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.01", "flags": 0, "createdate": "1980-06-25T00:00:00", "modifydate": "1992-03-30T20:50:00", "lines": 763, "newlines": 681, "modlines": 82, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1980 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nTERMIO3  TITLE 'TERMIO3 -- 3270 TO USER INTERFACE ROUTINE BTAM LOCAL'\n         DCMSREGS\nTERMIO3  CSECT\n*        SAVE  (14,12),,*\n*        CONTROL RECEIVED FROM   T E R M I O #  -\n*        AN OPEN-ENDED CSECT WHOSE ONLY FUNCTION IS TO\n*        DETECT WHICH SERVICE I/O ROUTINE TO USE -\n*        BY DETERMINING WHETHER OR NOT THIS JOBSTEP\n*        IS   T S O    OR   D C M S  \"START\"\n*\n*  UPDATES:                                                           *\n*    06-25-80      LDW  CHANGE CSECT NAMES:   TERMIO#  -> TERMIO1     *\n*                                             TERMIO$  -> TERMIO2     *\n*                                             TERMIO@  -> TERMIO3     *\n*                                             TERMIOWT -> TERMIO4     *\n*                                             TERMIOHC -> TERMIO5     *\n*                                                                     *\n         LR    R11,R15\n         USING TERMIO3,R11\n         LR    R10,R1                       SAVE IOCB ADDRESS\n         USING IOCB,R10\n         OI    IOCBFLGT,IOCBTBSC\n         L     R2,16                        POINT AT THE CVT\n         L     R2,0(,R2)                    NEW/OLD\n         L     R2,4(,R2)                    OUR TCB\n         L     R2,112(,R2)                  FSA\n*\n*   AT THIS POINT WE HAVE LOCATED THE FIRST SAVE AREA PROVIDED TO THIS\n*   TASK WHEN IT WAS ATTACHED. NOBODY CARES ABOUT THE REGISTERS THAT\n*   IT CONTAINS, SO TERMIO USES IT AS THE ANCHOR FOR ITS TABLE.\n*   USAGE IS AS FOLLOWS:\n*\n*        24    ORIGINAL PARM SAVED BY INITIAL ROUTINE (DCB PTR)\n*        28    'TRIO' IF TERMIO HAS EVER BEEN INVOKED\n*        32    POINTER TO PREVIOUS FORMAT TABLE USED.\n*        36    POINTER TO CURRENT TERMIO WORK AREA\n*\n         CLC   28(4,R2),=C'#BSC'  IS THIS OUR FIRST TIME THRU\n         BE    CONTINUE           NO, PICK UP WORK AREA ADDRESS\n         MVC   28(4,R2),=C'#BSC'            MARK FSA AS INITIALISEDK\n         B     NEWWORK            GO GET A WORK AREA\n         EJECT\nCONTINUE EQU   *\n         L     R1,36(,R2)         GET OLD WORK AREA\n         USING WORK,R1\n         TM    IOCBFLGC,IOCBCCLR  REFRESH REQUESTED ?\n         BO    CHGFMT                     REFORMAT IF YES\n         CLC   IOCBFMT,32(R2)     HAS HE CHANGED FORMATS\n         BNE   CHGFMT             YES, NEED TO CHANGE WORK AREAS\n         L     R15,IOCBFMT        POINT AT THE NEW FORMAT\n         CLC   FMTHEAD,0(R15)     IS HEADER UNCHANGED\n         BNE   CHGFMT             NO, GET NEW WORK AREA\n         TM    IOCBFLGS,IOCBFW8+IOCBFNWT    IS IT NEW FORMAT REQUEST\n         BNO   RESTART            NO, JUST CONTINUE\n         TM    FLAGS,READING+WRITING        IS I/O IN PROGRESS\n         BZ    NEWFMTOK           NO, MAKE ADJUSTMENT\n         EX    0,BOMB             YES, CANNOT CHANGE FORMAT WITH I/O\nNEWFMTOK MVI   FLAGS,CLEARED      REQUEST REFORMATTING\n         RETURN (14,12)\n         SPACE 2\nCHGFMT   TM    FLAGS,READING+WRITING        WAS I/O IN PROGRESS\n         BZ    FREEOK\n         EX    0,BOMB             CANNOT FREE THE I/O AREA WHILE IN USE\nFREEOK   L     R0,DSECSIZE        GET SP AND LENGTH\n*        FREEMAIN R,LV=(0),ADDR=(1),SP=(0)\n         SVC   10                 ISSUE FREEMAIN SVC\n         DROP  R1\n         SPACE 2\nNEWWORK  L     R15,IOCBFMT        POINT AT THE NEW FORMAT\n         LH    R3,0(,R15)         GET LENGTH OF IMAGE\n         LA    R3,WORKLEN(,R3)    ADD SIZE OF REST OF WORK AREA\n         ICM   R3,8,=AL1(16)      ASK FOR SP=16\n         LR    R0,R3\n         LNR   R1,R0              SET FLAG FOR GETMAIN\n*        GETMAIN R,LV=(0),SP=(0)\n         SVC   10                 ISSUE GETMAIN SVC\n         ST    R1,36(,R2)         SET POINTER TO THE NEW WORK AREA\n         USING WORK,R1\n         ST    R3,DSECSIZE        SAVE FREEMAIN ARGUMENT\n         L     R3,24(,R2)         RETRIEVE PARMLIST ADDRESS\n         L     R3,0(,R3)          GET DCB ADDRESS\n         ST    R3,DECBR+8         INITIALIZE THE DECB\n         ST    R3,DECBW+8            TO POINT TO THE DCB\n         LA    R3,L'BUFFER        GET LENGTH OF INPUT AREA\n         STH   R3,DECBR+6         SET IT FOR THE I/O TASK\n         LA    R3,BUFFER          POINT AT THE I/O AREA\n         ST    R3,DECBR+12        PLACE IT IN THE DECBS\n         ST    R3,DECBW+12           ALSO\n         L     R15,IOCBFMT        POINT AT THE NEW FORMAT TABLE\n         ST    R15,32(,R2)        PLACE IT IN THE FSA\n         MVC   FMTHEAD,0(R15)     SAVE THE HEADER FOR VALIDATION\n         MVI   FLAGS,CLEARED      REQUEST A SCREEN RE-FORMAT\n         TM    IOCBFLGS,IOCBFW8+IOCBFNWT  IS IT A NEW FORMAT REQUEST\n         BO    NEWFMTOK\n         TM    IOCBFLGS,IOCBFNWR       MUST HAVE A WRITE TO FORMAT TUBE\n         BZ    RESTART\n         EX    0,BOMB  ATTEMPT TO READ WITH UNFORMATTED SCREEN\n         DROP  R1\n         SPACE 4\nRESTART  ST    R1,8(,R13)         FORWARD CHAIN\n         ST    R13,4(,R1)         BACK CHAIN\n         LR    R13,R1             ESTABLISH WORK BASE\n         USING WORK,R13\n*\n*        A I D   P R O P O G A T I O N   S U P P O R T\n*\n         TM    IOCBFLGS,IOCBFNRD\n         BNO   NOAIDCPY\n         L     R14,IOCBTDCB\n         LA    R14,0(R14)\n         LTR   R14,R14\n         BZ    NOAIDCPY                COPY AID ACROSS ?????????\n         MVC   IOCBAID(1),TDCBAID-TDCB(R14)\n         TM    IOCBFLGD,IOCBDPK2  EXIT HERE IF KEY 2 IS TO\n         BO    NOAIDCPY                BE PASSED TO USER DISPLAY\n         CLI   IOCBAID,AIDPF2    WAS LAST KEY 2 ?\n         BNE   NOAIDCPY              EXIT IF NOT\n         LA    R1,IOCBTDCB           INVOKE PROFILE PROMPTER\n         XC    WAITPROF,WAITPROF\n         ATTACH EP=DCMSPROF,SF=(E,ATCHLST),ECB=WAITPROF\n         ST    R1,PROFTCBA\n         WAIT  ECB=WAITPROF\n         MVI   IOCBAID,AIDENT .         FORCE DEFAULT AID AFTER PROF\n         DETACH  PROFTCBA,STAE=NO\n         MVI   FLAGS,CLEARED\n         L     R14,IOCBTDCB\n         MVI   TDCBAID-TDCB(R14),AIDENT .\nNOAIDCPY EQU   *\n         EJECT\n         L     R15,IOCBFMT        POINT AT THE USERS FORMAT\n         LA    R6,8               SET FMT ENTRY LENGTH FOR BXLE\n         LH    R7,2(,R15)         GET LENGTH OF FORMAT\n         AR    R7,R15             POINT PAST END OF FORMAT\n         SR    R7,R6              POINT AT LAST ENTRY\n         TM    IOCBFLGS,IOCBFNWR  IS A WRITE REQUIRED\n         BO    NOWRITE            NO, CHECK FOR OTHER OPTIONS\n         TM    FLAGS,READING+WRITING        IS I/O IN PROGRESS\n         BZ    WRITEOK            NO, PROCEED\n         EX    0,BOMB             WRITE REQUESTED WHEN I/O IN PROGRESS\nWRITEOK  LA    R8,BUFFER+5        POINT PAST RDW AND WCC\n         MVC   BUFFER+4(1),4(R15) MOVE THE DEFAULT WCC IN\n         TM    IOCBFLGS,IOCBFNBP+IOCBFNRR+IOCBFNRS  WERE THERE O'RIDES\n         BO    WCCOK              NO, USE WCC FROM FORMAT\n         NC    BUFFER+4(1),IOCBFLGS         REMOVE OVERRIDDEN BITS\n         OC    BUFFER+4(1),IOCBWCC          SET THE OVERRIDE VALUES\nWCCOK    OI    BUFFER+4,X'C0'     MAKE THE WCC PRINTABLE\n         LA    R4,6(,R15)         POINT AT FIRST ENTRY\n         TM    FLAGS,CLEARED      IS RE-FORMAT NECESSARY\n         BZ    UPDATE             NO, JUST THE CHANGED FIELDS\n         LH    R3,0(,R15)         GET LENGTH OF LOCAL AREA\n         LA    R2,LOCAL           POINT AT LOCAL AREA\n         SR    R1,R1              SET UP TO CLEAR THE AREA\n         MVCL  R2,R0              ZERO THE WHOLE THING\n*\n*   BUILD THE ORDERS TO INSERT THE ATTRIBUTE BYTES\n*\nNXTATR   MVI   0(R8),X'11'        SBA\n         LA    R8,1(,R8)\n         LH    R1,2(,R4)          GET THE BUFFER ADDRESS\n         BCTR  R1,0               BACK UP TO THE ATTRIBUTE BYTE\n         BAL   R14,ENCODE         GO SET UP AN ADDRESS\n         MVI   0(R8),X'1D'        START FIELD\n         MVC   1(1,R8),1(R4)      MOVE IN THE ATTRIBUTE BYTE\n         LA    R8,2(,R8)\n         TM    1(R4),X'30'        IS THIS A DISPLAY FIELD\n         BO    NOFILL             YES, IT CAN BE EXTENDED TO COVER FILL\n         LH    R1,6(,R4)          GET THE FIELD LENGTH\n         AH    R1,2(,R4)          COMPUTE THE NEXT ATTRIBUTE BYTE\n         LA    R1,1(,R1)          POINT AT THE NEXT DATA BYTE\n         CR    R4,R7              IS THERE ANOTHER FIELD\n         BNL   DOFILL             NO, MUST LIMIT THIS ONE\n         CH    R1,10(,R4)         IS NEXT FIELD ADJACENT\n         BE    NOFILL             YES, IT WILL PROVIDE A LIMIT\n         BL    DOFILL             OTHERWISE CREATE A DUMMY FIELD\n         EX    0,BOMB             OVERLAPPING FIELDS IN FORMAT TABLE\n         SPACE 3\nDOFILL   MVI   0(R8),X'11'        SBA\n         LA    R8,1(,R8)          POINT TO NEXT BUFFER BYTE\n         BCTR  R1,0               POINT AT THE ATTRIBUTE BYTE\n         BAL   R14,ENCODE\n         MVC   0(2,R8),=X'1D7C'   BLANK PROTECTED FIELD\n         LA    R8,2(,R8)\n         SPACE 2\nNOFILL   BXLE  R4,R6,NXTATR       GO DO THE NEXT FIELD\n         EJECT\n*\n*   AT THIS POINT R8 POINTS TO A BUFFER POSITION AT WHICH TO PLACE A\n*   SERIES OF ORDERS TO UPDATE THE SCREEN TO LOOK LIKE THE USERS IMAGE.\n*   THE ACTUAL CONTENTS ARE IN THE LOCAL IMAGE.\n*\nUPDATE   SR    R9,R9              INDICATE NO CURRENT BUFFER POSITION\n         LA    R4,6(,R15)         POINT AT THE FIRST FORMAT ENTRY\nNXTFIELD LH    R2,4(R4)           GET IMAGE OFFSET\n         LA    R0,LOCAL(R2)       GET POSITION IN LOCAL IMAGE\n         A     R2,IOCBIMG         GET POSITION IN USER IMAGE\n         LH    R3,6(,R4)          GET THE FIELD LENGTH\n         LR    R1,R3\n         LR    R5,R2              SAVE START OF FIELD\n         CLCL  R0,R2              LOOK FOR DIFFERENCES\n         BE    MATCH              THEY ARE THE SAME\n         SH    R1,6(,R4)          NUMBER OF BYTES THAT ARE THE SAME\n         LCR   R1,R1\n         CH    R1,=H'3'           IS IT WORTH A SBA\n         BH    LNGMATCH           YES, GO DO ONE\n         LR    R2,R5              NO, BACK UP TO START OF FIELD\n         AR    R3,R1              RESTORE COUNT\n         CH    R9,2(R4)           DID A PREVIOUS COMMAND PLACE US THERE\n         BE    NOSBA1             YES, NO NEED TO DO A SBA\n         MVI   0(R8),X'11'        SBA\n         LA    R8,1(,R8)\n         LH    R1,2(,R4)          POINT AT FIRST DATA BYTE\n         BAL   R14,ENCODE\nNOSBA1   TM    0(R4),X'C0'        IS A CURSOR NEEDED AT START OF FIELD\n         BNM   NOCUR1             NO\n         TM    IOCBFLGS,IOCBFCUR  HAS HE OVERRIDDEN THE CURSOR POSITION\n         BO    NOCUR1             YES, DON'T NEED ONE HERE\n         MVI   0(R8),X'13'        INSERT THE CURSOR\n         LA    R8,1(,R8)\nNOCUR1   B     DATAMOVE           GO PLACE THE ACTUAL DATA IN STREAM\n         SPACE 2\nLNGMATCH LR    R5,R1              SAVE BYTE COUNT REMAINING\n         TM    0(R4),X'C0'        DID WE NEED A CURSOR\n         BNM   NOCUR2             NO, JUST GO DO THE DATA\n         TM    IOCBFLGS,IOCBFCUR  HAS HE OVERRIDDEN THE CURSOR POSITION\n         BO    NOCUR2             YES, DON'T HONOR THE FORMAT BYTE\n         CH    R9,2(R4)           MAYBE WE ARE ALREADY THERE\n         BE    NOSBA2             YES, HOW LUCKY\n         MVI   0(R8),X'11'        WHAT A LOT OF WORK FOR A MEASLY\n         LA    R8,1(,R8)             LITTLE CURSOR.\n         LH    R1,2(,R4)          POINT AT THE DATA ADDRESS\n         BAL   R14,ENCODE\nNOSBA2   MVI   0(R8),X'13'        INSERT CURSOR\n         LA    R8,1(,R8)\nNOCUR2   MVI   0(R8),X'11'\n         LA    R8,1(,R8)\n         LH    R1,2(,R4)          GET FIELD ADDRESS IN 3270\n         AR    R1,R5              MOVE TO POINT OF FIRST DIFFERENCE\n         BAL   R14,ENCODE\n*\n*   R8=BUFFER LOCATION  R2=DATA ADDRESS   R3=DATA LENGTH\n*\nDATAMOVE STM   R2,R3,28(R13)      SAVE INPUT POINTERS\n         LH    R1,4(,R4)          GET IMAGE OFFSET\n         LA    R0,LOCAL(R1)       COMPUTE LOCAL FIELD START\n         LR    R1,R3              GET DATA LENGTH\n         SH    R1,6(,R4)          GET COMPLEMENT OF NUMBER OF MATCHES\n         SR    R0,R1              BUMP LOCAL FIELD ADDRESS\n         LR    R1,R3              GET NUMBER OF BYTES TO MOVE\n         MVCL  R0,R2              UPDATE LOCAL IMAGE\n         LM    R2,R3,28(R13)      RESTORE THE DATA POINTERS\n         BCTR  R2,0               ADJUST FOR REVERSE SCAN\nBLNKOUT  LA    R5,0(R2,R3)        POINT AT TRAILING BYTE\n         CLI   0(R5),C' '         IS IT A BLANK\n         BNE   SHORTND            NO, END OF TRUNCATION\n         BCT   R3,BLNKOUT         THROW AWAY THE BLANKS\n         BCTR  R5,0               ALLOW BLANKING OF 1-BYTE FIELDS\n         B     INSPT              JUST WIPE OUT REST OF FIELD\n         SPACE 2\nSHORTND  LA    R2,1(,R2)          POINT BACK AT FIRST BYTE\n         LA    R9,BUFFER+L'BUFFER-16        LAST ALLOWABLE ADDRESS\n         SR    R9,R8\n         CR    R9,R3              WILL IT FIT\n         BH    LENOK\n         EX    0,BOMB             GENERATED DATA EXCEEDS BUFFER LENGTH\nLENOK    LR    R9,R3\n         LR    R1,R9              SAVE OUTPUT LENGTH\n         MVCL  R8,R2\n         LR    R3,R1              RETRIEVE OUTPUT LENGTH\n         LR    R2,R8\n         SR    R2,R3              COMPUTE OUTPUT ADDRESS\n         BAL   R14,UPCASE              KEEP INVALID CHARS OFF THE LINE\n         SPACE 2\nINSPT    TM    0(R4),X'C0'        DOES HE WANT A CURSOR HERE\n         BNO   NOCUR3\n         TM    IOCBFLGS,IOCBFCUR  HAS HE OVERRIDDEN THE CURSOR POSITION\n         BO    NOCUR3             YES, THEN HE DOESN'T WANT ONE HERE\n         MVI   0(R8),X'13'        INSERT CURSOR\n         LA    R8,1(,R8)\nNOCUR3   S     R5,28(,R13)        COMPUTE DISTANCE TO END OF FIELD\n         S     R5,32(,R13)        GET -1-REMAINING BYTES\n         LCR   R5,R5              THAT MAKES IT REMAINING BYTES + 1\n         BCT   R5,*+8             CHECK FOR FULL FIELD\n         B     NONULL             IF SO, DO NOT PUT THE NULL IN\n         MVI   0(R8),0            INSERT A NULL\n         LA    R8,1(,R8)\nNONULL   MVI   0(R8),X'05'        INSERT A PT ORDER\n         LA    R8,1(,R8)\n         LR    R9,R4              POINT AT CURRENT FMT ENTRY\nPTSCAN   BXH   R9,R6,NOUNP        POINT TO NEXT FORMAT ENTRY\n         TM    1(R9),X'20'        IS THE FIELD UNPROTECTED\n         BO    PTSCAN             NO. PT ORDER WILL SKIP IT\n         LH    R9,2(,R9)          GET STOPPING POINT FOR PT ORDER\n         B     ENDFIELD\n         SPACE 3\nMATCH    TM    IOCBFLGS,IOCBFCUR  HAS HE OVERRIDDEN THE CURSOR POSITION\n         BO    ENDFIELD           YES, THEN WE ARE THROUGH HERE\n         TM    0(R4),X'C0'        DID THE FORMAT CALL FOR A CURSOR\n         BZ    ENDFIELD           NO, GO TO NEXT FIELD\n         BO    MATSCAN            YES, AFTER ALL THE DATA\n         CH    R9,2(,R4)          IS THE BUFF ADD NOW AT RIGHT POINT\n         BE    NOSBA4             YES, HOW FORTUTITOUS\n         LH    R1,2(,R4)          GET THE DATA ADDRESS\nMATSBA   MVI   0(R8),X'11'        SBA\n         LA    R8,1(,R8)\n         BAL   R14,ENCODE\nNOSBA4   MVI   0(R8),X'13'        INSERT CURSOR\n         LA    R8,1(,R8)\n         SR    R9,R9              INDICATE UNKNOWN BUFFER ADDRESS\n         B     ENDFIELD\n         SPACE 2\nMATSCAN  LH    R1,6(,R4)          GET FIELD LENGTH\nMATSCANL BCTR  R2,0               MOVE POINTER BACK ONE\n         CLI   0(R2),C' '         IS THIS A BLANK\n         BNE   MATSCANE           YES, PLACE THE CURSOR HERE\n         BCT   R1,MATSCANL\nMATSCANE AH    R1,2(,R4)          COMPUTE CURSOR ADDRESS\n         B     MATSBA\n         SPACE\nNOUNP    SR    R9,R9              INDICATE NO FOLLOWING UNPROTECTED\nENDFIELD BXLE  R4,R6,NXTFIELD     GO DO NEXT FIELD\n         SPACE 5\n         TM    IOCBFLGC,IOCBCTIM\n         BO    NOTIMSTP\n*        TIMESTAMP SCREEN\n*\n         MVC   0(STAMPLEN,R8),IOCBCTRL    COPY TIMESTAMP AND INTERVAL\n         LA    R8,STAMPLEN(R8)\nNOTIMSTP EQU   *\n*\n*  NOW THAT THE SCREEN HAS BEEN FORMATTED WE CAN PLACE THE SPECIAL\n*  FIELD IN THE LOWER RIGHT CORNER FOR ERASE INPUT DETECTION.\n*\n         MVC   0(7,R8),=X'115D7D1D5D6A6A'  ROW 24 COL  78\n         LA    R8,7(,R8)          BUMP THE FIELD POINTER\n         TM    IOCBFLGS,IOCBFCUR  HAS HE OVERRIDDEN THE CURSOR POSITION\n         BZ    NOCUR4             NO, THEN CURSOR IS ALREADY IN\n         LH    R1,IOCBCUR         GET IMAGE OFFSET OF CURSOR\n         L     R4,IOCBFMT         GET FIRST FORMAT ENTRY\n         LA    R4,6(,R4)          SKIP THE HEADER\nCURSCAN  LH    R2,4(,R4)          GET THE IMAGE OFFSET OF THE FIELD\n         AH    R2,6(,R4)          COMPUTE END OF FIELD\n         CR    R1,R2              SEE IF CURSOR IS IN FIELD\n         BL    CURFND             YES, GO PLACE IT THERE\n         BXLE  R4,R6,CURSCAN      GO CHECK THE NEXT ENTRY\n         EX    0,BOMB             CURSOR IS BEYOND END OF IMAGE\n         SPACE 2\nCURFND   SH    R1,4(,R4)          COMPUTE OFFSET IN FIELD\n         BNM   CUROK              CHECK FOR INCLUSION\n         EX    0,BOMB             CURSOR IS IN IMAGE FILL AREA\nCUROK    AH    R1,2(,R4)          COMPUTE TUBE ADDRESS\n         MVI   0(R8),X'11'        SBA\n         LA    R8,1(,R8)\n         BAL   R14,ENCODE\n         MVI   0(R8),X'13'        INSERT CURSOR\n         LA    R8,1(,R8)\n         SPACE 3\nNOCUR4   LA    R9,BUFFER          POINT AT FRONT OF BUFFER\n         SR    R8,R9              COMPUTE DATA LENGTH\n         STH   R8,BUFFER\n         XC    BUFFER+2(2),BUFFER+2  CLEAR OUT REST OF RDW\n         LA    R1,DECBW           POINT AT THE OUTPUT DECB\n         ST    R1,IOCBDECB        PUT IT WHERE CALLER CAN WAIT FOR IT\n         TM    FLAGS,CLEARED      WAS AN ERASE/WRITE NEEDED\n         BO    WRITEER            YES, GO GET IT\n         WRITE (1),SF,MF=E\n         B     TESTCHK\nWRITEER  WRITE (1),SZ,MF=E\nTESTCHK  MVI   FLAGS,WRITING+LASTOPW        REMEMBER THE STATUS\n         TM    IOCBFLGS,IOCBFNRD  WAS A READ REQUESTED\n         BZ    READ               YES, GO ISSUE IT\n         L     R15,IOCBTDCB\n*KLUGE\n         MVC   TDCBPECB-TDCB(4,R15),=F'0'  TDECB POINTER\n*KLUGE\n*        BLUSH BLUSH STAMMER\n         TM    IOCBFLGS,IOCBFNWT  DID HE WANT ME TO DO THE WAIT\n         BO    EXIT               NO, GET OUT OF HERE\nWRTCHK   CHECK DECBW              WAIT FOR THE WRITE TO COMPLETE\n         NI    FLAGS,NOT-WRITING  INDICATE I/O NOT OUTSTANDING\n         TM    IOCBFLGS,IOCBFNRD  WAS A READ REQUESTED\n         BO    EXIT               NO, NOW WE ARE DONE\n         B     RDWAIT             YES, GO CHECK IT OUT\n         SPACE 2\nNOWRITE  TM    IOCBFLGS,IOCBFW8   WAS A WAIT ONLY REQUESTED\n         BO    WAITONLY           YES, GO SEE WHAT'S COOKING\n         TM    FLAGS,LASTOPW      WAS LAST OPERATION A WRITE\n         BO    READ               YES, THEN GO DO THE READ\n         EX    0,BOMB             NO, ATTEMPT TO READ TWICE IN A ROW\n         SPACE 2\nWAITONLY TM    IOCBFLGS,IOCBFNWT  DOES HE REALLY WANT A WAIT\n         BO    EXIT               NO, JUST GETTING SET UP\n         TM    FLAGS,WRITING      WAS A WRITE IN PROGRESS\n         BO    WRTCHK             YES, THAT MUST BE WHAT HE WANTS\n         TM    FLAGS,READING      WAS A READ IN PROGRESS\n         BO    RDCHK              YES, GO CHECK THAT\n         EX    0,BOMB             WAIT REQUESTED WHEN NO I/O RUNNING\n         SPACE 4\nREAD     TM    FLAGS,READING      IS READ ALREADY GOING\n         BZ    READOK             NO, THEN WE CAN DO ONE\n         EX    0,BOMB             TWO READS ATTEMPTED\nREADOK   LA    R1,DECBR           POINT AT INPUT DECB\n         ST    R1,IOCBDECB        PUT IT WHERE HE CAN WAIT ON IT\n         READ  (1),SF,MF=E\n         OI    FLAGS,READING\n         TM    IOCBFLGS,IOCBFNWR  WAS A WRITE REQUESTED\n         BZ    WRTCHK             YES, GO CHECK IT\n         SPACE 2\nRDWAIT   TM    IOCBFLGS,IOCBFNWT  DID HE WANT ME TO DO THE CHECK\n         BO    EXIT               NO, GO BACK TO HIM\nRDCHK    CHECK DECBR\n         MVI   FLAGS,LASTOPR      INDICATE ALL I/O COMPLETE\n         MVC   IOCBAID,BUFFER+4   SAVE THE ATTENTION DESCRIPTION\n         TM    IOCBFLGD,IOCBDPK2     RETURN KEY 2\n         BO    NOPROFKY                     IF REQUESTED\n         CLI   IOCBAID,AIDPF2          ELSE\n         BNE   NOPROFKY                    INVOKE\n         LA    R1,IOCBTDCB                        PROFILE  AND\n         XC    WAITPROF,WAITPROF\n         ATTACH EP=DCMSPROF,SF=(E,ATCHLST),ECB=WAITPROF\n         ST    R1,PROFTCBA\n         WAIT  ECB=WAITPROF\n         MVI   IOCBAID,AIDENT .         FORCE DEFAULT AID AFTERWARDS\n         DETACH  PROFTCBA,STAE=NO\nNOPROFKY EQU   *\n         TM    IOCBFLGC,IOCBCFRA  IF FORCE\n         BO    EXIT                  THEN EXIT\n         TM    IOCBFLGC,IOCBCRAO  IF\n         BNO   OTHER2               REQUESTED\n         CLI   IOCBAID,AIDPF1                TRANSMIT\n         BL    OTHER1                                ONLY\n         CLI   IOCBAID,AIDPF9                            PFK\n         BH    OTHER2                                       AID\n         B     EXIT                                            BACK\nOTHER1   EQU   *\n         CLI   IOCBAID,AIDPF10     OTHERWISE,\n         BL    OTHER2                        PERFORM\n         CLI   IOCBAID,AIDPF12                      NORMAL\n         BH    OTHER2                                     READ\n         B     EXIT                                           REPLACE\nOTHER2   EQU   *\n         CLI   IOCBAID,AIDCLR     DID HE HIT THE CLEAR KEY\n         BE    CLEAR              YES, GO INDICATE ZEROED BUFFER\n         CLI   IOCBAID,AIDCAN     DID HE HIT CANCEL (PA2)\n         BE    CANCEL             YES, GIVE BACK ORIGINAL SCREEN\n         CLI   IOCBAID,AIDPA1     IS IT SOME OTHER FUNCTION\n         BE    PA1\n         CLI   IOCBAID,AIDPA3\n         BE    PA3\n         TM    IOCBAID,X'40'      IS IT A VALID AID\n         BO    AIDVALID           YES, GO LOOK AT MANUAL INPUT\n         EX    0,BOMB             AID BYTE WAS NOT VALID\nAIDVALID LH    R5,BUFFER          GET LENGTH OF INPUT DATA\n         LA    R5,BUFFER-5(R5)    POINT AT LAST 5 BYTES\n         CLC   0(5,R5),=X'115D7E6A6A'       IS LAST FIELD EXPECTED ONE\n         BE    CNVTCUR            YES, USER DID NOT HIT ERASE INPUT\n*\n*   THE SPECIAL FIELD THAT WAS PLACED IN THE LOWER RIGHT HAND CORNER\n*  OF THE SCREEN WAS TAMPERED WITH. THE ASSUMPTION IS MADE THAT THE\n*   USER HIT THE ERASE INPUT FIELD. IF HE WAS JUST FUTZING AROUND,\n*   TOO BAD FOR HIM. THE FIELD IS NON-DISPLAY ANAYWAY.\n*\n         L     R4,IOCBFMT\n         LA    R4,6(,R4)          POINT AT HTE FIRST FORMAT ENTRY\nERSINP   TM    1(R4),X'20'        IS THIS A PROTECTED FIELD\n         BO    ERSPRO             YES, THEN DON'T ERASE IT\n         LH    R2,4(,R4)          GET THE IMAGE OFFSET\n         LA    R2,LOCAL(R2)       POINT AT THE LOCAL COPY\n         LH    R3,6(,R4)          GET THE FIELD LENGTH\n         SR    R1,R1              SET UP FOR FIELD ZEROING\n         ICM   R1,8,=CL128' '     MAKE THE FILL CHARACTER A BLANK\n         MVCL  R2,R0              BLANK OUT THE FIELD\nERSPRO   BXLE  R4,R6,ERSINP       GO DO THE NEXT FIELD\n         CLC   0(3,R5),=X'115D7E6A6A'       IS THE FIELD STILL THER\n         BE    CNVTCUR            FIELD IS STILL THERE, BUT DIFFERENT\n         LA    R5,1(,R5)          MOVE TO LAST POSSIBLE POSITION\n         CLC   0(3,R5),=X'115D7E6A6A'       DID HE ONLY DO IN ONE BYTE\n         BE    CNVTCUR            YES, IGNORE THAT FIELD\n         LA    R5,4(,R5)          FIELD IS GONE COMPLETELY\n         SPACE 2\nCNVTCUR  LA    R8,BUFFER+5        POINT AT BYTE AFTER THE AID\n         BAL   R14,DECODE         GET THE IMAGE OFFSET FOR IT\n         STH   R1,IOCBCUR         FEED IT BACK TO THE USER\n         CR    R8,R5              IS THE BUFFER EXHAUSTED\n         BNL   EOB                IF SO, COPY THE UPDATED BUFFER\n         CLI   0(R8),X'11'        VERIFY THAT IT IS A SBA ORDER\n         BNE   CLEAR              BUFFER WAS NOT FORMATTED, IGNORE IT\nINPFIELD LA    R8,1(,R8)          POINT PAST THE SBA\n         BAL   R14,DECODE         GET THE IMAGE OFFSET\n         CH    R1,4(,R4)          DOES IT POINT TO FIELD START\n         BE    ADDROK\n         EX    0,BOMB             RETURNED ATTR ADDR+1 WAS NOT VALID\nADDROK   LR    R2,R8              GET DATA ADDRESS\n         LR    R3,R5              GET EOB ADDRESS\n         SR    R3,R2              COMPUTE REMAINING BYTES\n         BP    SBALOOP            CHECK FOR LEGAL DATA FORMAT\n         LR    R1,R8              USER ERASED THE FIELD\n         BZ    FNDSBA             GO COPY NO BYTES TO THE IMAGE\n         EX    0,BOMB             INPUT DATA WAS TOO SHORT\nSBALOOP  CH    R3,=H'256'\n         BNH   SHRTRT             IS LENGTH DOWN BELOW 257\n         TRT   0(256,R2),TRTSBA   LOOK FOR AN SBA BYTE\n         BNZ   FNDSBA             WAS ONE FOUND\n         AH    R2,=H'256'         NO, ADVANCE ONE SWATCH\n         SH    R3,=H'256'         REDUCE THE COUNT\n         B     SBALOOP            GO TRY SOME MORE\nSHRTRT   BCTR  R3,0               REDUCE COUNT FOR EX\n         EX    R3,EXTRT           ONE LAST SCAN\n         BNZ   FNDSBA             WAS ONE FOUND\n         LA    R1,1(R2,R3)        NO, POINT PAST END OF BUFFER\nFNDSBA   SR    R1,R8              GET INPUT FIELD LENGTH\n         LR    R0,R8              GET FIELD ADDRESS\n         AR    R8,R1              POINT AT THE LOCATED BYTE\n         LR    R3,R1              SET UP FOR UPCASE ROUTINE\n         LH    R2,4(,R4)          GET IMAGE OFFSET\n         LA    R2,LOCAL(R2)       POINT AT DESTINATION\n         LR    R14,R2\n         LH    R15,6(,R4)         GET DESTINATION LENGTH\n         ICM   R1,8,=CL128' '     SET UP THE PAD CHARACTER\n         MVCL  R14,R0             COPY INPUT INTO IMAGE\n         CR    R8,R5              IS THAT END OF BUFFER\n         BL    INPFIELD           NO, GO DO THE NEXT ONE\nEOB      BE    CANCEL             MAKE SURE EOB HIT RIGHT ON\n         EX    0,BOMB             END OF INPUT BUFFER WAS MISSED\n         SPACE 2\nCANCEL   L     R2,IOCBIMG         POINT AT USER IMAGE AREA\n         LA    R0,LOCAL           POINT AT OUR IMAGE AREA\n         L     R14,IOCBFMT        POINT AT USER FORMAT\n         LH    R1,0(,R14)         GET IMAGE LENGTH\n         LR    R3,R1\n         MVCL  R2,R0              COPY LOCAL IMAGE TO USER IMAGE\n         LH    R3,0(,R14)              GET LENGTH AGAIN\n         SR    R2,R3\n         BAL   R14,UPCASE              MAKE THE USERS COPY UPPER CASE\n         CLI   IOCBAID,AIDCAN     DID WE GET HERE FROM CANCEL KEY\n         BNE   EXIT               NO,RETURN TO USER\n         SPACE 2\nPA1      EQU   *\nPA3      EQU   *\nCLEAR    MVI   FLAGS,CLEARED      INDICATE THAT TUBE IS NOT FORMATTED\n         B     EXIT               RETURN TO USER\n         EJECT\nEXIT     EQU   *\n         TM    IOCBFLGD,IOCBDYON . SUPPRESS DELAY IF:\n         BNO   REALEXIT .\n         CLC   IOCBWAIT,=F'0' .      - DELAY IS ZERO\n         BE    REALEXIT .\n         BL    REALEXIT .\n         CLI   IOCBAID,AIDENT .       O R -\n         BE    RTIMER .                     ANY\n         CLI   IOCBAID,AIDCAN .                PF\n         BE    RTIMER .                           KEY\n         CLI   IOCBAID,AIDNULL .                     WAS\n         BE    RTIMER .                                 ENTERED\n         B     REALEXIT .\nRTIMER   EQU   *\n         STIMER WAIT,BINTVL=IOCBWAIT\nREALEXIT EQU   *\n         L     R13,4(,R13)        POINT TO CALLERS REGISTERS\n         RETURN (14,12)\n         EJECT\n*\n*   CONVERT A HALF WORD BUFFER ADDRESS TO 3270 FORMAT\n*\n*        R1 = 12 BIT BUFFER ADDRESS\n*        R8 = OUTPUT AREA ADDRESS\n*\nENCODE   SLDL  R0,26              GET TWO 6-BIT QUANTITIES\n         SRL   R1,2               MAKE THEM 8-BIT QUANTITIES\n         SRDL  R0,8               IN THE SAME REGISTER\n         STCM  R1,12,0(R8)        PLACE THEM IN THE DATA STREAM\n         TR    0(2,R8),TABLENC    MAKE THEM PRINTABLE\n         LA    R8,2(,R8)          BUMP THE OUTPUT ADDRESS\n         BR    R14                RETURN TO CALLER\n         SPACE 2\nTABLENC  DC    C' ABCDEFGHI\u00a2.<(+|&&JKLMNOPQR!$*);\u00ac-/STUVWXYZ\u00a6,%_>?01234X\n               56789:#@''=\"'      TABLE TO MAKE ADDRESSES PRINTABLE\n         SPACE 4\nBOMB     EX    0,BOMB\n         SPACE 4\n*\n*   ROUTINE TO CONVERT A FIELD TO UPPER CASE\n*        R2=ADDRESS,  R3=LENGTH,  R14=RETURN\n*\nUPCASE   CH    R3,=H'256'         IS IT TOO SHORT FOR A LONG TR\n         BL    LASTPASS           YES, GO DO AN EXECUTED ONE\n         TR    0(256,R2),UPCTBL     CONVERT A SWATCH\n         AH    R2,=H'256'         MOVE TO NEXT SWATCH\n         SH    R3,=H'256'         DECREASE REMAINING COUNT\n         BNZ   UPCASE             GO DO IT AGAIN\nLASTPASS SH    R3,=H'1'           REDUCE FOR EXECUTE\n         BMR   R14                YES, JUST RETURN\n         EX    R3,TRUPC           CONVERT TAIL END TO U.C.\n         BR    R14\n         SPACE 2\nTRUPC    TR    0(0,R2),UPCTBL\n         SPACE 2\nUPCTBL   DC    256C'?'                 ALL INVALIDS GO TO QUESTION\n         ORG   UPCTBL+C' '\n         DC    C' '\n         ORG   UPCTBL+C'\u00a2'\n         DC    C'\u00a2.<(+|&&'\n         ORG   UPCTBL+C'!'\n         DC    C'!$*);\u00ac-/'\n         ORG   UPCTBL+C','\n         DC    C',%_>?'\n         ORG   UPCTBL+C':'\n         DC    C':#@''=\"'\n         ORG   UPCTBL+X'81'\n         DC    C'ABCDEFGHI'\n         ORG   UPCTBL+X'91'\n         DC    C'JKLMNOPQR'\n         ORG   UPCTBL+X'A2'\n         DC    C'STUVWXYZ'\n         ORG   UPCTBL+C'A'\n         DC    C'ABCDEFGHI'\n         ORG   UPCTBL+C'J'\n         DC    C'JKLMNOPQR'\n         ORG   UPCTBL+C'S'\n         DC    C'STUVWXYZ'\n         ORG   UPCTBL+C'0'\n         DC    C'0123456789'\n         ORG\n         SPACE 4\n*\n*   ROUTINE TO FIND THE IMAGE OFFSET FOR A BUFFER ADDRESS\n*   INPUT:  R8=ADDRESS OF INPUT,  R6 AND R7 SET UP FOR BXLE THROUGH FMT\n*   OUTPUT:  R1= IMAGE OFFSET, R4 POINTS AT FORMAT ENTRY\n*      R1 = -1 IF BUFFER ADDRESS IS OUTSIDE OF THE IMAGE\n*\nDECODE   L     R4,IOCBFMT\n         LA    R4,6(,R4)          POINT AT FIRST FORMAT\n         IC    R0,1(,R8)          GET THE SECOND BYTE\n         SLL   R0,2               REMOVE HIGH TWO BITS\n         ICM   R0,2,0(R8)         TACK ON THE FIRST BYTE\n         SRL   R0,2               PUT IT IN LOW 12 BITS\n         LA    R1,4095            SET MASK FOR 12 BITS\n         NR    R1,R0              GET THE BINARY BUFFER OFFSET\n         LA    R8,2(,R8)          BUMP THE SCAN POINTER\nDECDL    LH    R0,2(,R4)          GET FIELD START\n         CR    R0,R1              IS THIS IT\n         BE    DECDF              YES, RIGHT ON THE DOT\n         BH    DECDERR            FIELD IS NOT DEFINED\n         AH    R0,6(,R4)          POINT AT END OF FIELD\n         CR    R0,R1              CHECK FOR INCLUSION\n         BH    DECDF              YES, GOT IT\n         BXLE  R4,R6,DECDL        GO TRY NEXT FIELD\nDECDERR  LH    R1,=H'-1'          SET ERROR INDICATION\n         BR    R14\nDECDF    SH    R1,2(,R4)          GET RELATIVE POSITION IN FIELD\n         AH    R1,4(,R4)          POINT INTO IMAGE INSTEAD\n         BR    R14                RETURN TO CALLER\n         EJECT\n*   CONSTANTS DSECTS AND OTHER POOR TRASH\nNOT      EQU   X'FF'\nEXTRT    TRT   0(0,R2),TRTSBA     SCAN FOR SBA\n         SPACE 4\n         LTORG\nTRTSBA   DC    XL17'0',X'01',XL238'0'       TRT TABLE FOR SBA ORDER\nPATCH    DS    XL50'0'\nIOCB     DSECT\n         IOCB\nWORK     DSECT\n         DS    18F                SAVE AREA\nPROFTCBA DS    F .\nWAITPROF DS    F .\nATCHLST  ATTACH EP=DCMSPROF,ECB=WAITPROF,SF=L\n         WRITE DECBW,SF,MF=L\n         READ  DECBR,SF,MF=L\nFLAGS    DS    H\nREADING  EQU   X'80'\nWRITING  EQU   X'40'\nCLEARED  EQU   X'20'\nLASTOPR  EQU   X'10'\nLASTOPW  EQU   X'08'\nFMTHEAD  DS    CL6\nDSECSIZE DS    F\nBUFFER   DS    CL2100\nLOCAL    DS    0F\nWORKLEN  EQU   *-WORK\n         TDCB\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TERMIO4": {"ttr": 12804, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x01\\x00\\x00\\x00\\x80\\x17\\x7f\\x00\\x92\\t\\x0f Q\\x00\\xb8\\x00f\\x00R\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.01", "flags": 0, "createdate": "1980-06-25T00:00:00", "modifydate": "1992-03-30T20:51:00", "lines": 184, "newlines": 102, "modlines": 82, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1980 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nTERMIO4  TITLE 'HARDCOPY TERMIO SUPPORT FOR TSO '\n*                                                                     *\n*  UPDATES:                                                           *\n*    06-25-80      LDW  CHANGE CSECT NAMES:   TERMIO#  -> TERMIO1     *\n*                                             TERMIO$  -> TERMIO2     *\n*                                             TERMIO@  -> TERMIO3     *\n*                                             TERMIOWT -> TERMIO4     *\n*                                             TERMIOHC -> TERMIO5     *\n*                                                                     *\n         EJECT\n         DCMSREGS\n         EJECT\nTERMIO4  CSECT\n         USING TERMIO4,R11\n         LR    R11,R15\n*        TERMIO1 SAVED THE REGISTERS\n         LR    R10,R1              POINT TO IOCB\n         USING IOCB,R10\n         GETMAIN R,LV=WORKLEN,SP=2\n         ST    R13,4(R1)           CHAIN\n         ST    R1,8(R13)           THE\n         LR    R13,R1              SAVE AREAS\n         USING DCMSWORK,R13\n         SPACE 3\n         TM    IOCBFLGS,IOCBFNWR+IOCBFNRD\n         BO    QUITLOG\n         TM    IOCBFLGS,IOCBFNWR\n         BO    NOWRITE\n         L     R9,IOCBFMT\n         L     R8,IOCBIMG\n         LH    R7,0(R9)\n         LH    R6,2(R9)\n         AR    R6,R9\n         LA    R9,6(R9)\n         LA    R1,LOGBUF\nFORMLOOP EQU   *\n         LH    R2,2(R9)            TO OFFSET\n         AR    R2,R1\n         LH    R4,4(R9)            FROM OFFSET\n         AR    R4,R8\n         LH    R3,6(R9)            GET LENGTH\n         LR    R5,R3               IN = OUT (LENGTH\n         LA    R5,0(R5)            PADCHAR\n*\n         MVCL  R2,R4\n*\n         LA    R9,8(R9)            NEXT FORMAT ENTRY\n         CR    R9,R6\n         BL    FORMLOOP\n*\n*        LOGOUT VERSION OF SCREEN COMPLETED HERE\n*\n         LA    R2,LOGBUF\n         LA    R3,23\n         LA    R4,80\n         MVC   WTL(WLEN),WTX .        MOVE WTO LIST  N\nLOGLOOP  EQU   *\n         MVI   WTL+4,C'>'\n         MVC   WTL+4(80),0(R2)\n         WTO   MF=(E,WTL),ROUTCDE=(2,11)\n         MVC   WTL+4(80),SPACEZ\n         AR    R2,R4\n         BCT   R3,LOGLOOP\n         MVC   WTL+4(24),IOCBTIME\n         WTO   MF=(E,WTL),ROUTCDE=(2,11)\nNOWRITE  EQU   *\n         MVI   IOCBAID,AIDPA1\n         B     QUITLOG\n*\n         EJECT\nSLASH    DC    80C'-'\nSPACEZ   DC    CL160' '\n         DS    0F .\nQUITLOG  DS     0H .\n         SR    R15,R15\nDCMSRCD  EQU   *\n         LR    R2,R13\n         L     R1,4(R13)\n         ST    R15,16(R1)\n         LR    R13,R1\n         FREEMAIN R,LV=WORKLEN,A=(R2),SP=2\n         LM    14,12,12(13)\n         BR    R14\n         LTORG\nWTX WTO  '                                                             X\n                              ',                                       X\n               MF=L,ROUTCDE=(2,11)\nWLEN     EQU   *-WTX\n         EJECT\nIOCB DSECT\n         IOCB\n         EJECT\nDCMSWORK DSECT\nDCMSAVE  DS    18F .\nPARMADDR DS    F\nOUTPUTL  DS    F .\nWTL WTO  '                                                             X\n                              ',                                       X\n               MF=L,ROUTCDE=(2,11)\nLOGBUF   DS    28CL80 .\nWORKLEN  EQU   *-DCMSWORK\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TERMIO5": {"ttr": 12808, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x01\\x00\\x00\\x00\\x80\\x17\\x7f\\x00\\x92\\t\\x0f Q\\x01F\\x00\\xf4\\x00R\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.01", "flags": 0, "createdate": "1980-06-25T00:00:00", "modifydate": "1992-03-30T20:51:00", "lines": 326, "newlines": 244, "modlines": 82, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1980 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nTERMIO5  TITLE 'HARDCOPY TERMIO SUPPORT FOR TSO '\n*  UPDATES:                                                           *\n*    06-25-80      LDW  CHANGE CSECT NAMES:   TERMIO#  -> TERMIO1     *\n*                                             TERMIO$  -> TERMIO2     *\n*                                             TERMIO@  -> TERMIO3     *\n*                                             TERMIOWT -> TERMIO4     *\n*                                             TERMIOHC -> TERMIO5     *\n*                                                                     *\n         EJECT\n         DCMSREGS\n         EJECT\n*\n*  USER ABEND CODES :\n*     120  - INVALID RETURN FROM TGET SVC\n*\nTERMIO5  CSECT\n         USING TERMIO5,R11\n         LR    R11,R15\n*        TERMIO1 SAVED THE REGISTERS\n         LR    R10,R1              POINT TO IOCB\n         USING IOCB,R10\n         GETMAIN R,LV=WORKLEN,SP=2\n         ST    R13,4(R1)           CHAIN\n         ST    R1,8(R13)           THE\n         LR    R13,R1              SAVE AREAS\n         USING DCMSWORK,R13\n         SPACE 3\n         OI    IOCBFLGT,IOCBTHCY\n         TM    IOCBFLGS,IOCBFNWR+IOCBFNRD\n         BO    QUITLOG\n         TM    IOCBFLGS,IOCBFNWR\n         BO    NOWRITE\n         CLI   IOCBTERM,X'7F'\n         BE    NOCHECK\n         GTSIZE\n         STM   0,1,IOCBTERM\n         MVI   IOCBTERM,X'7F'\nNOCHECK  EQU   *\n         LH    R2,IOCBTERM+6\n         CH    R2,=H'80'\n         BNL   CONTINU\n         TPUT  CANTDO,L'CANTDO\n         LA    R15,16\n         MVI   IOCBAID,AIDPA1\n         B     QUITLOG\nCONTINU  EQU   *\n         SR    R0,R0           . SOURCE LOC = 0\n         SR    R15,R15         .\n         SR    R1,R1           . SOURCE LEN = 0\n         LA    R14,LOGBUF      . TARGET LOC\n         ICM   R1,8,=C' '      . FILL CHARACTER\n         L     R15,=A(28*80) . . TARGET LENGTH\n         MVCL  R14,R0 .        .   CLEAR BUFFER OUT\n         L     R9,IOCBFMT\n         L     R8,IOCBIMG\n         LH    R7,0(R9)\n         LH    R6,2(R9)\n         AR    R6,R9\n         LA    R9,6(R9)\n         LA    R1,LOGBUF\nFORMLOOP EQU   *\n         LH    R2,2(R9)            TO OFFSET\n         AR    R2,R1\n         LH    R4,4(R9)            FROM OFFSET\n         AR    R4,R8\n         LH    R3,6(R9)            GET LENGTH\n         LR    R5,R3               IN = OUT (LENGTH\n         LA    R5,0(R5)            PADCHAR = X'00'\n*\n         MVCL  R2,R4\n*\n         LA    R9,8(R9)            NEXT FORMAT ENTRY\n         CR    R9,R6\n         BL    FORMLOOP\n*\n*        LOGOUT VERSION OF SCREEN COMPLETED HERE\n*\n         LA    R2,LOGBUF\n         LA    R3,23\n         LA    R4,80\n         LA    R5,158         FOR EXECUTES\n         TPUT  SLASH,80\nLOGLOOP  EQU   *\n         MVI   0(R2),C'>'\n*                          FOR 2 BLANK LINES IN A ROW, SKIP ONE.\n         EX    R5,CMPBLANK           TWO BLANK LINES?\n         BE    LOGNOPUT              ...YES, SKIP PUTTING THIS ONE.\n*\n         TPUT  (R2),(R4)\nLOGNOPUT AR    R2,R4\n         BCT   R3,LOGLOOP\n*\n         TPUT  SPACEZ,1\n*\n         LA    R1,IOCBTIME+1\n         LA    R0,STAMPLEN\n         TPUT  (1),(0)\n*\n         TPUT  SPACEZ,1\n*\nNOWRITE  EQU   *\n         MVI   IOCBAID,AIDENT\n         TM    IOCBFLGS,IOCBFNRD\n*        BO    QUITLOG\n         LA    R1,OUTPUTL\n         L     R0,=A(136)\n         TGET  (1),(0)\n         LTR   R15,R15\n         BZ    GETLGTH\n         CH    R15,=H'8'\n         BE    DUMATTN\n         BL    GETLGTH\n         ABEND 120\n*\nGETLGTH  LA    R1,0(R1)\n         MVI   IOCBAID,AIDENT        DEFAULT = ENTER\n         LTR   R3,R1                 INPUT LEN = ZERO?\n         BZ    QUITLOG               ...YES, NO MORE TO DO.\n*\n         BCTR  R3,0                  FOR EXECUTE.\n         EX    R3,TRANS          TRANSLATE INPUT TO UPPER CASE\n*\n         MVC   IOCBEND(L'IOCBEND),OUTPUTL\n         CH    R1,=H'1'\n         BE    DUMPFK\n         CH    R1,=H'2'\n         BNE   INPUT\n         CLI   OUTPUTL,C'1'\n         BNE   INPUT\n         CLI   OUTPUTL+1,C'0'\n         BNE   KEY11\n         MVI   IOCBAID,AIDPF10\n         B     QUITLOG\nTRANS    TR    OUTPUTL(0),UPCTBL      FORCE UPPERCASE ON INPUT\nKEY11    CLI   OUTPUTL+1,C'1'\n         BNE   KEY12\n         MVI   IOCBAID,AIDPF11\n         B     QUITLOG\nKEY12    CLI   OUTPUTL+1,C'2'\n         BNE   QUITLOG\n         MVI   IOCBAID,AIDPF12\n         B     QUITLOG\nDUMPFK   EQU   *\n         CLI   OUTPUTL,C'!'\n         BNE   DUMPFK2\n         MVI   OUTPUTL,AIDPA1\nDUMPFK2  CLI   OUTPUTL,AIDPF1\n         BL    PFK02\n         CLI   OUTPUTL,AIDPF9\n         BH    QUITLOG\n         MVC   IOCBAID(1),OUTPUTL\n         B     QUITLOG\nPFK02    CLI   OUTPUTL,AIDPA3\n         BL    QUITLOG\n         CLI   OUTPUTL,AIDPF12\n         BH    QUITLOG\n         MVC   IOCBAID(1),OUTPUTL\n         B     QUITLOG\nDUMATTN  EQU   *\n         MVI   IOCBAID,AIDPA1\n         B     QUITLOG\n*\nINPUT    EQU   *\n         L     R9,IOCBFMT\n         L     R8,IOCBIMG\n         LH    R7,0(R9)\n         LH    R6,2(R9)\n         AR    R6,R9\n         LA    R9,6(R9)\nLOOKLOOP EQU   *\n         TM    0(R9),X'80'  CURSOR IN FIELD?\n         BO    GOTCUR\n         LA    R9,8(R9)\n         CR    R9,R6\n         BNH   LOOKLOOP\n         B     QUITLOG\nGOTCUR   EQU   *\n         LH    R4,4(R9)   GET OFFSET\n         AR    R4,R8      OFFSET + START\n         AR    R1,R4\n         CR    R1,R9       ? END\n         BNH   MOVEIN\n         LR    R1,R9\n         SR    R1,R4\n         LR    R3,R1\nMOVEIN   EX    R3,MOVEXX\n         B     QUITLOG\nMOVEXX   MVC   0(0,R4),OUTPUTL\n         TITLE 'CONSTANTS'\nCMPBLANK CLC   1(0,R2),SPACEZ           EXECUTED - COMPARE TO BLANKS\nSLASH    DC    80C'-'\nSPACEZ   DC    CL160' '\n         SPACE 2\nUPCTBL   DC    256C'?'                 ALL INVALIDS GO TO QUESTION\n         ORG   UPCTBL+C' '\n         DC    C' '\n         ORG   UPCTBL+C'\u00a2'\n         DC    C'\u00a2.<(+|&&'\n         ORG   UPCTBL+C'!'\n         DC    C'!$*);\u00ac-/'\n         ORG   UPCTBL+C','\n         DC    C',%_>?'\n         ORG   UPCTBL+C':'\n         DC    C':#@''=\"'\n         ORG   UPCTBL+X'81'\n         DC    C'ABCDEFGHI'\n         ORG   UPCTBL+X'91'\n         DC    C'JKLMNOPQR'\n         ORG   UPCTBL+X'A2'\n         DC    C'STUVWXYZ'\n         ORG   UPCTBL+C'A'\n         DC    C'ABCDEFGHI'\n         ORG   UPCTBL+C'J'\n         DC    C'JKLMNOPQR'\n         ORG   UPCTBL+C'S'\n         DC    C'STUVWXYZ'\n         ORG   UPCTBL+C'0'\n         DC    C'0123456789'\n         ORG\n         SPACE 4\nCANTDO   DC    C'LINESIZE OF TERMINAL MUST BE 80 OR GREATER'\n         DS    0F .\nQUITLOG  DS     0H .\n         SR    R15,R15\nDCMSRCD  EQU   *\n         LR    R2,R13\n         L     R1,4(R13)\n         ST    R15,16(R1)\n         LR    R13,R1\n         FREEMAIN R,LV=WORKLEN,A=(R2),SP=2\n         LM    14,12,12(13)\n         BR    R14\n         LTORG\n         EJECT\nIOCB DSECT\n         IOCB\n         EJECT\nDCMSWORK DSECT\nDCMSAVE  DS    18F .\nPARMADDR DS    F\nOUTPUTL  DS    3F .\nLOGBUF   DS    28CL80 .\nWORKLEN  EQU   *-DCMSWORK\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TMPSRV": {"ttr": 13059, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x08\\x00\\x00\\x00\\x80\"O\\x00\\x92\\t\\x0f Q\\x047\\x04\\x0f\\x01\\n\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.08", "flags": 0, "createdate": "1980-08-11T00:00:00", "modifydate": "1992-03-30T20:51:00", "lines": 1079, "newlines": 1039, "modlines": 266, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1988 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n         TITLE 'T M P S R V   -- TSO COMMAND ATTACHER SERVICE'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Updates:                                                           *\n*  10Apr88  U009 LDW  Fix for MVS/XA                                  *\n*  05SEP86  U008 LDW  FIX ERROR IN BXLE IN STAE ROUTINE               *\n*                     CHANGE ALL STAE TO ESTAE                        *\n*  06/27/84 U007 LDW  SPECIFY ATTACH SVC # VIA SYSPARM, TO ALLOW USE  *\n*                        OF EXXON ATTACH SVC WITOUT SOURCE CHANGES    *\n*  04/23/84 U006 SDM  ADD ALPAQ SCAN TO LPA SCAN LOGIC                *\n*                     DELETE EXIT MACRO                               *\n*  08/04/83 U005 LDW  PUT RETURN CODE IN 'ERROR READING STACK' MSG    *\n*  05/24/83 U004 LDW  GET COMMAND'S RETURN CODE FROM TCBCMP, NOT ECB  *\n*                     SAVE EACH RETURN CODE IN ECT, IN CASE WE ARE    *\n*                       EXECUTING COMMANDS IN A CLIST                 *\n*  10/22/82 U003 LDW  ADD LPA SCAN                                    *\n*                     CONVERT 'TIME' TO 'IKJEFT25'                    *\n*                     DELETE ALL &UCLA CODE (FOR CCN/MVT)             *\n*                     REMOVE TSFIND MACRO                             *\n*                     SHARE SP0 EVEN IF UNDER 'TEST'                  *\n*                     MISCELLANEOUS MINOR CLEANUP                     *\n*  08/11/80 U002 LDW  SUPPORT RSAPF=YES ON ATTACH                     *\n*  ??/??/78 U001 LDW  CORRECTLY DETERMINE IF COMMAND ABENDED          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*        TMPSRV:  THIS SERVICE WHEN INVOKED BY A TSO USER (VIA THE    *\n*                 TMPMAC  MACRO OR VIA LINK) WILL CAUSE A TSO COMMAND *\n*                 OR COMMAND PROCEEDURE TO BE EXECUTED AND OPTIONALLY.*\n*                 MONITOR ITS EXECUTION.                              *\n*                                                                     *\n*        INPUT:   R1  -  ADDRESS OF PARAMETER LIST                    *\n*                 R13 -  SAVEAREA                                     *\n*        OUTPUT:  R15 -  RETURN CODES: 0 - TMPSRV NORMAL RETURN       *\n*                                      4 - COMMAND NOT FOUND          *\n*                                      8 - ATTENTION SIGNALED         *\n*                                     12 - NOT ENOUGH CORE            *\n*                                     16 - COMMAD ABENDED             *\n*                                     20 - ERROR WHILE PROCESSING     *\n*                                          STACK                      *\n*                                                                     *\n*        PARAMETER LIST:                                              *\n*            0    AL1(FLAGS),AL3(JOBLIB_DCB)                          *\n*            4    AL1(LENGTH),AL3(COMMAND_LINE)/AL4(PGM_NAME)         *\n*            8    AL1(FLAGS1),AL3(TASKLIB DCB)                        *\n*           12    AL4(RETURN/COMPLETION CODE)/PARM_ADDR FOR PGM=      *\n*           16    AL4(HERALD/REPLY)                                   *\n*        FLAGS:                                                       *\n*                 X'80' - CBUF RATHER THAN CMD                        *\n*                 X'40' - RESERVED                                    *\n*                 X'20' - CMDLIB=NO, THE CATENATED LINKLIB WILL NOT   *\n*                         BE SEACHED.                                 *\n*                 X'10' - EXEC=NO, THE COMMAND IS NOT A PROCEEDURE    *\n*                 X'08' - SCMD=YES, THE COMMAND IS A SUBCOMMAD        *\n*                 X'04' - STAX=NO, ATTENTIONS NOT HANDELED BY         *\n*                         TMPSRV.                                     *\n*                 X'02' - STACK=NO, TMPSRV WILL NOT EXECUTE FROM THE  *\n*                         TSO COMMAND STACK.                          *\n*                 X'01' - CMDFAIL=NOMSG, NO ERROR MSGS GENERATED.     *\n*                                                                     *\n*        FLAGS1:  X'80' - PGM=, MOD TO BE CALLED BATCH MODE           *\n*                                                                     *\n*        ATTRIBUTES: RENT, REUS, REFR, PROB KEY, PROB STATE, ENABLED  *\n*                                                                     *\n*        PROGRAMMER: PETE NIELSON (PCN)                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         TITLE 'T M P S R V   -- @GLOBALS'                         U009\n         COPY  @GLOBALS                                            U009\n         TITLE 'T M P S R V   -- DUMMY SECTIONS'\nTMPSRV   CSECT                          ELIMINATE PRIVATE CODE     U002\n         REGEQU\nTSDSECT  DSECT\nTSSAVE   DS    9D                       SAVE AREA\nPSCBPTR  EQU   TSSAVE+12\nEXTLIST  EQU   TSSAVE+16\nATTLIST  EQU   TSSAVE+16\nBLDLLIST DS    F\nNAME     DS    CL58\nBLDLEN   EQU   *-BLDLLIST\n         TSCPPL                         COMMAD PROCESSOR PARM LIST\nTSECB    DS    F                        TSO SERVICES ECB\n         TSDAPL                         DAIR PARM LIST\nDAPB2C   DS    F                        NOT IN USE PARM BLK\nDA2CTCB  DS    F                        ADDR OF SUBTASK DCB\nDA2CDDN  DS    CL8                      DDNAME\nDA2CL    EQU   *-DAPB2C\n         TSIOPL                         GETLINE PARM LIST\nGETBLK   DS    2F\n         TSCSPL\nSTAXB    STAX  STAXIT,REPLACE=NO,MF=L\nSTAXBL   EQU   *-STAXB\nTMPBLK   TMPMAC CMD=(0,0),MF=L,DCB=0,EXEC=NO\nSTAEB    ESTAE STAEXIT,PARAM=0,MF=L                                U008\nSTAEBL   EQU   *-STAEB\nATTSF    ATTACH  SF=L                                              U003\nDWD      DS    D                                                   U005\nMSG      DS    0CL80                                               U005\nBUF      DS    0H                       PSEUDO CMD BUFFER\nBUFLEN   DS    H                        LENGTH OF BUFFER\nBUFOFF   DS    H                        OFFSET TO OPERANDS\nBUFTEXT  DS    CL256                    TEXT\nWORK     EQU   *-8\nSTACKBLK DS    F                        PTR TO INITIAL STACK BLK\nSTACKREC DS    F                        PTR TO INITIAL STACK RECORD\nPARMPTR  DS    F                        PTR TO PARM PTR\nBASEPTR  DS    F                        PTR TO MAIN PGM BASE\nATTECB   DS    F                        ATTACH ECB\nOLDNAME  DS    CL8                      ORIG ECT CMDNAME\nOLDNAME1 DS    CL8                      ORIG ECT SCMDNAME\nFLG      DS    X                        FLAGS\nATTNF    EQU   X'80'\nDETF     EQU   X'40'                    DETACH NEEDED\nECTPARMF EQU   X'20'                    NOPARM BIT IN INIT ECT\n*        EQU   X'10'                    UNUSED                     U003\n*        EQU   X'08'                    UNUSED                     U003\n*        EQU   X'04'                    UNUSED                     U003\nEXECF    EQU   X'02'                    CMD IS BEING 'EXEC' ED\nRECURSF  EQU   X'01'                    PREVENT BLDL RECURSION\nFLG1     DS    X\nSTKF     EQU   X'80'                    STACK PROCESSED\nTSTF     EQU   X'40'                    EXECUTING UNDER TEST\nSTAIFLAG DS    X                        255=STAI ROUTINE EXEC'D    U001\nTSDSECTL EQU   *-TSDSECT\n         SPACE 3\nPARMS    DSECT PARMS PASSED BY CALLER\nPARMFLG  DS    0X                       FLAGS\nCBUF     EQU   X'80'                    CBUF RATHER THAN CMD\n*        EQU   X'40'                    RESERVED\nNOCMDLIB EQU   X'20'                    CMDLIB=NO\nNOEXEC   EQU   X'10'                    EXEC=NO\nYESSCMD  EQU   X'08'                    SCMD=YES\nNOSTAX   EQU   X'04'                    STAX=NO\nNOSTACK  EQU   X'02'                    STACK=NO\nNOMSG    EQU   X'01'                    CMDFAIL=NOMSG\nPARMDCB  DS    A                        ADD OF JOBLIB DCB\nPARMPGM  DS    0A                       ADDR OF PGM NAME\nPARMLEN  DS    0X                       LNTH OF CMD\nPARMCMD  DS    A                        ADD OF CMD STRING\nPARMFLG1 DS    0X                       MORE FLAGS\nPGM      EQU   X'80'                    MOD TO BE CALLED BATCH MODE\nPARMTDCB DS    A                        ADD OF TASKLIB DCB\nPARMPARM DS    0A                       ADD OF PARM FOR PGM= MODE\nPARMRC   DS    F                        COMPLETION RETURN CODE\nPARMHRLD DS    F                        HERALD PTR\nPARMRPLY EQU   PARMHRLD\n         SPACE 3\nRLGB     DSECT RELOGON BUFFER\nRLGBRLD  DS    256X                     CMD BUF\nRLGBECT  DS    A                        ECT ADDR\n         DS    A                        RESERVED\n         SPACE 3\nLSD      DSECT LIST SOURCE DESCRIPTOR\nLSDATA   DS    A                        ADDR OF IN STORAGE LIST\nLSDRLEN  DS    H                        RECORD LNTH\nLSDTLEN  DS    H                        TOT LIST LNTH\nLSDNXT   DS    A                        ADDR OF NXT REC\nLSDRSVD  DS    A                        RESERVED\n         PRINT NOGEN                                               U004\n         IEZATTCH  ,                                               U003\n         CVT   DSECT=YES                                           U003\n         IKJTCB\n         IKJECT\n         IKJPSCB\n         IEZJSCB  ,                                                U002\n         IHAPSA  ,                                                 U002\n         IHACDE                                                    U006\n         DCBD  DSORG=PO,DEVD=DA\n         PRINT GEN                                                 U004\n         TITLE 'T M P S R V - ENTRY, INITIALIZATION'\n         SPACE 2\nTMPSRV   CSECT\n         SAVE  (14,12),,TMPSRV_&SYSDATE._&SYSTIME  Save registers  U009\n         LR    R12,R15                  SAVE BASE\n         USNGX TMPSRV,R12\n         LR    R11,R1                   SAVE PTR TO PARM LIST\n         USNGX PARMS,R11\n         GETMAIN R,LV=TSDSECTL,SP=1     BUY CORE FOR WORK AREA\n         XC    0(256,R1),0(R1)          ZERO IT\n         XC    256(256,R1),256(R1)\n         XC    512(TSDSECTL-512,R1),512(R1)\n         ST    R13,4(,R1)               HSA\n         ST    R1,8(,R13)               LSA\n         LR    R13,R1                   ESTABLISH NEW SAVE AREA\n         USNGX TSDSECT,R13\n         ST    R11,PARMPTR              STORE PTR TO PARMSFOR EXITS\n         ST    R12,BASEPTR              AND BASE ADDRESS\n         MVI   STAIFLAG,0               INIT FLAG                  U001\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*                          BUILD CPPL                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\n         EXTRACT PSCBPTR,'S',FIELDS=PSB,MF=(E,EXTLIST)\n         L     R4,PSCBPTR               PTR TO PSCB\n         L     R3,PSCBUPT-PSCB(,R4)     PTR TO UPT\n         L     R5,PSCBRLGB-PSCB(,R4)    PTR TO RELOGON BUFFER\n         L     R5,RLGBECT-RLGB(,R5)     PTR TO ECT\n         LR    R10,R5                   SAVE PTR\n         USNGX ECT,R10\n         STM   R3,R5,CPPLUPT\n         LA    R2,BUF                   GET ADD OF PSEUDO BUFFER\n         ST    R2,CPPLCBUF              STORE IN PARM LIST\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*                      BUILD TSO SERVICES PARM LISTS                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\n         LR    R4,R3                    MOVE REGS FOR CONVIENIENCE\n         XC    TSECB(4),TSECB           CLEAR TSO SERVICES ECB\n         LA    R6,TSECB                 GET TSO SERVICES ECB ADDR\n         SPACE 1\n*        SET UP CSPL\n         SPACE 1\n         STM   R4,R6,CSPLUPT\n         LA    R1,CSFLG\n         ST    R1,CSPLFLG\n         LA    R1,CSOA\n         ST    R1,CSPLOA\n         ST    R2,CSPLCBUF\n         SPACE 1\n*        SET UP DAPL\n         SPACE 1\n         STM   R4,R6,DAPLUPT\n         MVC   DAPLPSCB(4),PSCBPTR\n         LA    R1,DAPB2C\n         ST    R1,DAPLDAPB\n         XC    DAPB2C(DA2CL),DAPB2C     CLEAR BLK\n         MVI   DAPB2C+1,X'2C'           MOVE IN FCTN CODE\n         MVC   DA2CDDN(8),=CL9' '       AND NULL DDN\n         SPACE 1\n*        SET UP IOPL\n         SPACE 1\n         STM   R4,R6,IOPLUPT\n         LA    R1,GETBLK\n         ST    R1,IOPLIOPB\n         XC    GETBLK(8),GETBLK\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*            FIND CURRENT PLACE IN STACK                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\n         L     R1,ECTIOWA               GET ADD OF IOSRL\n         L     R2,0(,R1)                GET ADD OF TOP ELE OF STACK\n         ST    R2,STACKBLK              STORE FOR FUTURE REF\n         CLC   1(3,R2),=XL3'0'          SEE IF A TERM ELE\n         BNE   L1\n         MVC   STACKREC(4),0(R2)        IF SO COPY THE ELEMENT\n         B     L2\nL1       L     R2,0(,R2)                GET ADD OF LSD\n         MVC   STACKREC(4),LSDNXT-LSD(R2) SAVE CURRENT RECORD PTR\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*                 SET UP INITIAL INPUT BUFFER                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nL2       TM    PARMFLG1,PGM             SEE IF BATCH MODE(PGM =)\n         BO    L2C                      IF SO NO CBUF\n         TM    PARMFLG,CBUF             SEE IF USING CBUF FORM\n         BNO   L2A\n         L     R2,PARMCMD               GET ADD OF CBUF\n         LH    R1,0(,R2)                GET LNTH OF BUFFER         U003\n         SH    R1,2(,R2)                ADJUST FOR OFFSET          U003\n         SH    R1,=H'5'                 ADJUST FOR HDR AND EXEC    U003\n         AH    R2,2(,R2)                ADJUST FOR OFFSET\n         LA    R2,4(,R2)                ADJUST FOR HEADER\n         B     L2B\nL2A      XR    R1,R1                    CLEAR REG                  U003\n         IC    R1,PARMLEN               GET CMD LNTH               U003\n         BCTR  R1,0                     DECREMENT FOR EXECUTE      U003\n         L     R2,PARMCMD               GET ADD OF CMD STRING\nL2B      EX    R1,*+4                   MOVE IN TEXT               U003\n         MVC   BUFTEXT(*-*),0(R2)       << EXECUTED >>\n         LA    R1,5(,R1)                ADJUST LNTH FOR HEADER     U003\n         STH   R1,BUFLEN                STORE LNTH                 U003\n         XC    BUFOFF(2),BUFOFF         ZERO OFFSET\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                   STORE INITIAL CONDITION OF THE ECT                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\nL2C      MVI   FLG,0                    INIT FLG TO ZERO\n         TM    ECTSWS,ECTNOPD           SEE IF NO PARMS FLG ON\n         BNO   *+8\n         OI    FLG,ECTPARMF             STORE THE BIT\n         MVC   OLDNAME(8),ECTPCMD\n         MVC   OLDNAME1(8),ECTSCMD\n         MVC   ECTRCDF(4),=XL4'0'       ZERO RETURN CODE FIELD\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FIND OUT IF WE ARE UNDER TEST                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n        SPACE 2\n         MVI   FLG1,0                   ZERO THE FLAG\n*U003    TSFIND TCB,R1                  POINT TO TCB\n         L     R1,16                    -> CVT                     U003\n         L     R1,0(,R1)                -> DISPATCH                U003\n         L     R1,4(,R1)                -> MY TCB                  U003\n         SPACE 1\nL2D      TM    TCBTRN-TCB(R1),TCBTCP    UNDER TEST?\n         BO    L2E                      IF SO SET FLG AND EXIT\n         L     R1,TCBOTC-TCB(,R1)       POINT TO MOTHER\n         LA    R1,0(,R1)                CLEAR HIGH BYTE\n         LTR   R1,R1                    SEE IF MOTHERLESS\n         BNZ   L2D                      IF NOT TEST BIT\n         B     L2F                      IF SO EXIT LOOP\nL2E      OI    FLG1,TSTF                SET UNDER TEST BIT\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*                 SET UP STAE EXIT                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\nL2F      XC    STAEB(STAEBL),STAEB\n         L     R15,=A(STAEXIT)\n         ESTAE (15),MF=(E,STAEB),PARAM=(13)                        U008\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*                      SET UP ATTENTION EXIT IF CALLER WANTS ONE.     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\n         TM    PARMFLG,NOSTAX           SEE IF NONE NECCESSARY\n         BO    SCAN                     IF NOT SKIP IT\n         XC    STAXB(STAXBL),STAXB      CLEAR BLOCK\n         L     R14,=A(STAXIT)\n         OC    PARMHRLD(4),PARMHRLD     SEE IF A TALKATIVE EXIT\n         BZ    L3\n         L     R3,PARMHRLD              GET ADD OF HERALD STRING\n         LH    R4,0(,R3)                GET LNTH OF HERALD STRING\n         LA    R3,2(,R3)                PT TO HERALD TEXT\n         STAX  (R14),REPLACE=NO,USADDR=(13),OBUF=((3),(4)),            X\n               IBUF=(BUFTEXT,256),MF=(E,STAXB)\n         B     SCAN\nL3       STAX  (R14),REPLACE=NO,USADDR=(13),MF=(E,STAXB)\n         TITLE 'T M P S R V - FIND COMMAND AND GET IT DONE'\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SYNTAX CHECK COMMAND                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nSCAN     TM    FLG,ATTNF                SEE IF ATTN SIGNALED\n         BO    RC8\n         NI    FLG,ECTPARMF             CLEAR FLAGS\n         XC    CSFLG(4),CSFLG           SPECIFY SYNTAX CHECKING\n         TM    PARMFLG1,PGM             SEE IF BATCH MODE\n         BNO   SCAN01                   IF NOT TO SCAN\n         L     R1,PARMPGM               IF SO FAKE SCAN\n         ST    R1,CSOACNM               STORE PTR TO NAME\n         MVC   CSOALNM(2),=H'8'         MOVE IN LNTH\n         B     SCAN02                   AND DO REST OF PROCESSING\nSCAN01   LA    R1,CSPL                  GET PARM LIST FOR CMD SCAN\n         LINK  EP=IKJSCAN               SCAN THE CMD\n         BXH   15,15,RC4X\n         TM    CSOAFLG,CSOAVWP+CSOAVNP  SEE IF VALID CMD\n         BZ    RC4X\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*       SEE IF THIS IS A % COMMAND;  CHECK FOR DISALLOWED COMMANDS    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nSCAN02   MVC   NAME(9),=CL9' '          BLANK CMD NAME\n         L     R7,CSOACNM               GET PTR TO CMD NAME\n         LH    R2,CSOALNM               GET LNTH\n         BCTR  R2,0                     DECREMENT FOR EXECUTE\n         EX    R2,*+4                   MOVE IN CMD NAME\n         MVC   NAME(*-*),0(R7)          << EXECUTED >>\n         CLC   NAME(8),=CL8'LOGOFF'     DO NOT PERMIT LOGOFF\n         BE    RC4\n         CLC   NAME(8),=CL8'LOGON'      OR LOGON TO BE EXECUTED\n         BE    RC4\n         CLC   NAME(8),=CL8'TEST'       DO NOT PERMIT TEST EITHER\n         BE    RC4\n         CLC   NAME(8),=CL8'TIME'       TIME COMMAND DOES NOT      U003\n         BNE   SCAN04                   REALLY EXIST               U003\n         TM    CSOAFLG,CSOAEXEC         '%TIME' ?                  U003\n         BO    SCAN04                   YES - SKIP                 U003\n         MVC   NAME(8),=C'IKJEFT25'     PUT IN REAL NAME OF 'TIME' U003\nSCAN04   XR    R8,R8                    ZERO DCB REG JUST IN CASE\n         TM    CSOAFLG,CSOAEXEC         CHECK FOR '%CMD'           U003\n         BNO   SCAN05                   SKIP IF NOT CLIST          U003\n         OI    FLG,EXECF                MARK IT                    U003\n         XC    BUFOFF(2),BUFOFF         TELL EXEC IT IS IMPLICIT\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        UPDATE THE ECT AS APPROPRIATE                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nSCAN05   LA    R1,NAME                  POINT TO NAME\n         MVC   ECTSCMD(8),0(R1)\n         TM    PARMFLG,YESSCMD\n         BO    SCAN06\n         MVC   ECTPCMD(8),0(R1)\n*U003    MVC   ECTSCMD(8),=CL8'HELP'\n         MVC   ECTSCMD(8),=CL8'*TMPSRV*'                           U003\n         NI    ECTSWS,X'FF'-ECTNOPD\n         TM    CSOAFLG,CSOAVNP\n         BNO   *+8\n         OI    ECTSWS,ECTNOPD\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*      DETERMINE CORRECT DCB TO SEARCH FOR CMD                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nSCAN06   MVC   ATTSF(ATTSFL),ATTSFDC    SET UP ATTACH PARMLIST     U003\n         LA    R9,ATTSF                 -> PARMLIST                U003\n         USING ATTCHLST,R9              SET UP DSECT               U003\n         LA    R0,NAME                  -> EPLOC=/DE=              U003\n         ST    R0,ATPGNADA              SET INTO ATTACH PARMLIST   U003\n         L     R8,PARMDCB               GET USER DCB\n         LA    R8,0(,R8)                CLEAR FLGS\n         LTR   R8,R8                    SEE IF THERE\n         BNZ   SCAN09\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*      DETERMINE IF THE MODULE IS IN LPA                          U003*\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\n          AIF   (&@@SPLVL GE 200).XA1                              U009\nSCAN07   NI    ATDEFLAG,255-ATDENTRY    TURN OFF \"DE=\" FLAG        U003\n          AGO   .XA2                                               U009\n.XA1      ANOP                                                     U009\nSCAN07   NI    ATFLAGS2,255-ATNDENT     TURN OFF \"DE=\" FLAG        U009\n.XA2      ANOP                                                     U009\n         L     R3,CVTPTR                GET CVT ADDRESS            U003\n         L     R1,CVTQLPAQ-CVTMAP(,R3)  -> -> LPAQ                 U006\n         L     R1,0(,R1)                -> RECENT ACTIVE LPA CDE   U006\n         USING CDENTRY,R1                                          U006\nSCAN07L  CLC   CDNAME,NAME              IS THIS OUR MODULE?        U006\n         BE    SCAN10                   YES, THEN IT EXISTS        U006\n         ICM   R1,B'1111',CDCHAIN       -> NEXT CDE                U006\n         BNZ   SCAN07L                  ANOTHER ONE AVAILABLE      U006\n         DROP  R1                       CDENTRY                    U006\n         LM    R0,R1,NAME               GET MODNAME FOR ROUTINE    U003\n         L     R15,CVTLPDSR-CVTMAP(,R3) GET ADDRESS OF ROUTINE     U003\n         STM   R14,R12,12(R13)          SAVE ALL REGISTERS         U003\n* R0, R1, R3, AND R14 MUST BE SET.\n         BALR  R14,R15                  CALL ROUTINE               U003\n* R0 RETURNS LPDE ADDRESS IF FOUND. R6, R8 AND R9 ARE ALTERED.\n* RETURN TO R14+0 IF FOUND, R14+4 IF NOT.\n         B     SCAN10L                  +0 RETURN = FOUND IN LPA   U003\n*                                       +4 RETURN = NOT   IN LPA   U003\n         LM    R14,R12,12(R13)          RESTORE ALL REGISTERS      U003\n          AIF   (&@@SPLVL GE 200).XA3                              U009\n         OI    ATDEFLAG,ATDENTRY        INDICATE \"DE=\"             U003\n          AGO   .XA4                                               U009\n.XA3      ANOP                                                     U009\n         OI    ATFLAGS2,ATNDENT         INDICATE \"DE=\"             U009\n.XA4      ANOP                                                     U009\n         XR    R8,R8                    ZERO DCB REC FOR DRILL\n         OI    FLG,RECURSF              PREVENT BLDL RECURSION\n         TM    PARMFLG,NOCMDLIB         SEE IF CMDLIB TO BE USED\n         BNO   SCAN09                   IF SO USE IT\n         SPACE 2\nSCAN08   TM    PARMFLG,NOEXEC           SEE IF EXEC=NO\n         BO    RC4\n         TM    PARMFLG1,PGM             SEE IF BATCH MODE\n         BO    RC4                      IF SO NO EXEC\n         MVC   NAME(8),=CL8'EXEC'\n         XC    BUFOFF(2),BUFOFF\n         OI    FLG,EXECF                TURN ON EXEC FLAG\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*      DCB FOUND,  DO BLDL ON IT                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nSCAN09   MVC   BLDLLIST(4),=AL2(1,58)   SET UP BLDL LIST\n         XC    NAME+8(58-8),NAME+8\n         BLDL  (R8),BLDLLIST            DO THE BLDL\n         BXLE  15,15,SCAN10             IF OK DO ATTACH\n         TM    FLG,RECURSF+EXECF        SEE IF WE                  U003\n         BZ    SCAN07                   CAN TRY ANOTHER DCB\n         TM    FLG,EXECF                SINCE EXEC IS THE LAST THING WE\n         BO    RC4                      DO IF THIS IS ON WE EXIT\n         TM    FLG,RECURSF              CHECK FOR SECOND DCB SEARCH\n         BO    SCAN08                   IF SO MABY WE CAN EXEC IT\n         B     RC4\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*    SUCCESSFUL BLDL,DO BOOKKEEPING AND ATTACH THE CMD                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nSCAN10L  LM    R14,R12,12(R13)          RESTORE ALL REGISTERS      U003\n*SCAN10  LA    R1,NAME                  PT TO CMD NAME\n*U003    O     R1,=XL4'80000000'        TELL TSIP IT'S PRE-ATTACH\n*U001    TSEVENT  PPMODE\n*U003    TM    FLG1,TSTF                UNDER TEST?\n*U003    BO    SCAN10A                  IF SO SHARE SP 0\n*U003    MVC   ATTSF(ATTSFL),ATTSFDC    IF NOT DONT SHARE SP0\n*U003    B     SCAN10B\n*SCAN10A MVC   ATTSF(ATTSF1L),ATTSF1DC  SHARE SP0\n         SPACE 1\n*SCAN10B XC    ATTECB(4),ATTECB         CLEAR THE ECB\nSCAN10   XC    ATTECB(4),ATTECB         CLEAR THE ECB              U003\n         L     R7,PARMTDCB              PT TO TASKLIB DCB\n         L     R2,=A(STAIEXIT)          GET STAI EXIT ADDRESS\n         SPACE 2\n         LA    R5,CPPL                  GET PARM ADDR              U003\n         TM    PARMFLG1,PGM             SEE IF IN PGM MODE\n         BNO   SCAN11\n         L     R5,PARMPARM              GET PARM ADDR              U003\n         NI    PARMFLG1,X'FF'-PGM       TURN OFF PGM MODE\n         SPACE 2\nSCAN11   TESTAUTH  FCTN=1               ARE WE APF AUTHORIZED?     U002\n         SPACE 1\n         SR    R4,R4                    ASSUME NOT, SET FLAG       U002\n         LTR   R15,R15                  WELL?                      U002\n         BNZ   SCAN11A                  NO - GO DO THE ATTACH      U002\n*U003    LTR   R8,R8                    USING A DCB?               U002\n*U003    BNZ   SCAN11A                  YES - DON'T BE PRIVILEGED, U002\n*                                       SO RSAPF=YES WILL BE IGNORED\n         USING PSA,R0                                              U002\n         L     R1,PSATNEW               -> TCB                     U002\n         DROP  R0                                                  U002\n         USING TCB,R1                                              U002\n**TEST%% L     R1,TCBJSTCB              -> JSTCB                   U002\n         LTR   R1,R1                    %%TEST%%                   U002\n         BNZ   *+8                      %%TEST%%                   U002\n         EX    0,*                      %%TEST%%                   U002\n         L     R4,TCBJSCB               -> JSCB                    U002\n         LTR   R4,R4                    %%TEST%%                   U002\n         BNZ   *+8                      %%TEST%%                   U002\n         EX    0,*                      %%TEST%%                   U002\n         DROP  R1                                                  U002\n         USING IEZJSCB,R4                                          U002\n**TEST%% L     R4,JSCBACT               -> ACTIVE JSCB             U002\n         LTR   R4,R4                    %%TEST%%                   U002\n         BNZ   *+8                      %%TEST%%                   U002\n         EX    0,*                      %%TEST%%                   U002\n         SPACE 1\n         MODESET  KEY=ZERO              GET KEY 0                  U002\n         SPACE 1\n         NI    JSCBOPTS,255-JSCBAUTH    TURN OFF APF AUTHORIZATION U002\n         SPACE 1\n         MODESET  KEY=NZERO,MODE=SUP    NORMAL KEY, SUPR MODE      U002\n*                                       SUPERVISOR MODE IS USED HERE\n*                                       SO WE WILL BE ABLE TO DO THE\n*                                       MODESET LATER ON, SINCE THE\n*                                       JSCBAUTH FLAG IS NOW OFF.\n         SPACE 2\n*U003    ATTACH SF=(E,ATTSF),MF=(E,(R5)),DCB=(R8),TASKLIB=(R7),    U003$\n               RSAPF=YES,                                          U002$\n               DE=NAME,ECB=ATTECB,STAI=((R2),(R13))\n         SPACE 1\n         OI    ATFLAGS1,ATRSAPF         SET RSAPF=YES              U003\n*U003    B     SCAN12                   CONTINUE                   U002\n         SPACE 2\n*SCAN11A ATTACH SF=(E,ATTSF),MF=(E,(R5)),DCB=(R8),TASKLIB=(R7),        $\n               DE=NAME,ECB=ATTECB,STAI=((R2),(R13))\nSCAN11A  ATTACH SF=(E,ATTSF),MF=(E,(R5)),DCB=(R8),TASKLIB=(R7),        $\n               ECB=ATTECB,STAI=((R2),(R13))                        U003\n          AIF   ('&SYSPARM' EQ '').SVCOK1                          U007\n         ORG   *-2                      BACK OVER THE SVC          U007\n         SVC   &SYSPARM                                            U007\n.SVCOK1   ANOP                                                     U007\n         SPACE 2\nSCAN12   ST    R1,DA2CTCB               STORE TCB ADDR\n         OI    FLG,DETF                 DETACH NECCESSARY\n         WAIT  ECB=ATTECB               WAIT FOR SUBTASK TO COMPLETE\n         LTR   R4,R4                    WERE WE APF AUTHORIZED?    U002\n         BZ    SCAN12A                  NO - SKIP                  U002\n         SPACE 1\n         MODESET  KEY=ZERO,MODE=PROB    KEY ZERO, PROB STATE       U002\n         SPACE 1\n         OI    JSCBOPTS,JSCBAUTH        TURN APF AUTH BACK ON      U002\n         DROP  R4                                                  U002\n         SPACE 1\n         MODESET  KEY=NZERO             RETURN TO MY NORMAL KEY    U002\n         SPACE 2\nSCAN12A  MVC   PARMRC(4),ATTECB         COPY POST CODE\n         LA    R1,OLDNAME               DO POST ATTACH ACCOUNTING\n*U001    TSEVENT  PPMODE\n         TM    FLG,DETF                 SEE IF DETACH NEEDED\n         BNO   RC8                      IF NOT MUST HAVE HAD ATTN\n         LA    R1,DAPL                  MARK FILES NOT IN USE\n         LINK  EP=IKJDAIR\n         L     R1,DA2CTCB               GET TCB ADDR\n         L     R2,TCBCMP-TCB(,R1)       GET THE COMPLETION CD\n         ST    R2,PARMRC                SAVE RETURN/ABEND CODE     U004\n         OI    ECTRCDF,X'80'            ASSUME ABEND               U004\n         STCM  R2,B'0111',ECTRTCD       SAVE FOR USE VIA &LASTCC   U004\n         CLI   STAIFLAG,0               ABEND FLAG SET?            U001\n         BNE   RC16                     YES - ...                  U001\n         NI    ECTRCDF,255-X'80'        NO - TURN OFF FLAG         U004\n         DETACH DA2CTCB,STAE=NO\n         NI    FLG,X'FF'-DETF           TURN OFF DETACH NEEDED FLG\n         TM    PARMFLG,NOSTACK          SEE IF NOT EXECUTING STACK\n         BO    EXIT                     IF NOT FINISHED\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*                SEE IF BACK TO ENTERING POSITION IS STACK            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nREADCHK  L     R1,ECTIOWA               GET ADD PF IOSRL\n         L     R2,0(,R1)                GET ADD OF TOP ELE OF STACK\n         CLC   1(3,R2),=XL3'0'          SEE IF A TERM ELE\n         BE    READCHK2                 IF SO ASSUME FINISHED\n         C     R2,STACKBLK              IF NOT SEE IF MATCH\n         BE    READCHK1\n         BH    READLINE\n         B     READCHK2\nREADCHK1 L     R2,0(,R2)                POINT TO LSD\n         CLC   STACKREC(4),LSDNXT-LSD(R2) SEE IF RECORDS MATCH\n         BH    READLINE                 IF NOT CONTINUE\nREADCHK2 OI    FLG1,STKF                MARK STACK AS PROCESSED\n         B     EXIT                     AND EXIT\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*                          READ A LINE FROM THE STACK                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nREADLINE XC    GETBLK(8),GETBLK         CLEAR GETLINE PARM BLK\n         GETLINE PARM=GETBLK,INPUT=(ISTACK,LOGICAL),                   X\n               TERMGET=(EDIT,WAIT),MF=(E,IOPL)\n         CH    R15,=H'16'               SEE IF AN EOD ON LIST\n         BE    READCHK                  IF SO GOTO NXT LST ELE\n         CH    R15,=H'4'                MAKE SURE LINE CAME FROM STACK\n         BNE   RC20A                                               U005\n         L     R1,GETBLK+4              GET ADD OF RTN\n         LH    R2,0(,R1)                GET LNTH\n         BCTR  R2,0                     DECREMENT FOR EXECUTE\n         EX    R2,*+4\n         MVC   BUF(1),0(R1)             MOVE TO MY BUFFER\n         LA    R2,1(,R2)                GET REAL LNTH\n         FREEMAIN R,A=(R1),LV=(R2),SP=1 FREE THE CORE\n         B     SCAN                     AND PROCESS THIS LINE\n         TITLE 'T M P S R V - RETURNS'\n*---------------------------------------------------------------------*\n*                                                                     *\n*           NORMAL EXIT                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nEXIT     BAL   R7,CLEANUP               CLEAN UP THE MESS\n         SR    R15,R15                  RC=0\nRETURN   LR    R1,R13                   ADDRESS FOR FREEMAIN       U006\n         L     R13,4(,R13)              BACK DOWN SAVE AREA CHAIN  U006\n         ST    R15,16(,R13)             STORE RETCODE FOR CALLER   U006\n         FREEMAIN  R,LV=TSDSECTL,SP=1,A=(1)  FREE DYNAMIC STORAGE  U006\n         RETURN  (14,12)                RETURN TO CALLER           U006\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*                  COMMAND NOT FOUND                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nRC4      TM    PARMFLG,NOMSG            SEE IF WE ARE GIVING MSGS\n         BO    RC4A                     IGF NOT SKIP MSG GENEREATION\n         MVC   BUF(CMNFMSGL),CMNFMSG    MOVE IN PLATTEN\n         MVC   CMNFV-CMNFMSG+BUF(8),NAME MOVE IN THE COMMAND NAME\n         LA    R1,BUF                   GET MSG ADD\n         LA    R0,CMNFMSGL              GET LNTH\n         TPUT  (1),(0),R                OUTPUT THE MSG\nRC4A     BAL   R7,CLEANUP               CLEAN UP THE MESS\n         LA    R15,4                    RC=4\n         B     RETURN\nRC4X     TM    PARMFLG,NOMSG            SEE IF GIVING MSGS\n         BO    RC4A                     IF NOT RETURN TO CALLER\n         LA    R1,SYNMSG                GET ADD OF MSG\n         LA    R0,L'SYNMSG              GET LNTH OF MSG\n         TPUT  (1),(0),R                OUTPUT THE MSG\n         B     RC4A                     RETURN\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*                 ATTENTION SIGNALED                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nRC8      OC    PARMHRLD(4),PARMHRLD     SEE IF A TALKATIVE EXIT\n         BZ    RC8A                     IF NOT DON'T WORRY ABOUT RPLY\n         LH    R2,BUFOFF                GET LNTH OF REPLY\n         LA    R2,2(R2)                 ADJUST LNTH FOR HEADER\n         GETMAIN R,LV=(R2),SP=1         GET CORE FOR REPLY\n         ST    R1,PARMRPLY              STORE ADD FOR CALLER\n         BCTR  R2,0                     DECREMENT FOR EXECUTE\n         EX    R2,*+4\n         MVC   0(1,R1),BUFOFF           MOVE IN RPLY\nRC8A     BAL   R7,CLEANUP               CLEANUP THE MESS\n         LA    R15,8                    RC=8\n         B     RETURN                   RETURN TO CALLER\n         SPACE 2\n*---------------------------------------------------------------------*\n*\n*                   NOT ENOUGH CORE TO LOAD MODULE                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nRC12     TM    PARMFLG,NOMSG            SEE IF IN MSG MODE\n         BO    RC12A                    IF NOT GIVE NO MSG\n         MVC   BUF(NCMSGL),NCMSG        MOVE IN PLATTEN\n         MVC   NCMSGV-NCMSG+BUF(8),NAME MOVE IN CMD NAME\n         LA    R1,BUF                   GET MSG ADD\n         LA    R0,NCMSGL                GET MSG LNTH\n         TPUT  (1),(0),R                OUTPUT IT\nRC12A    BAL   R7,CLEANUP1              CLEAN UP THIS MESS\n         LA    R15,12                   RC=12\n         B     RETURN                   RETURN TO CALLER\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                   COMMAND ABENDED                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nRC16     OI    ECTRCDF,X'80'            INDICATE CMD ABENDED\n         MVC   PARMRC+1(3),TCBCMPC-TCB(R1) COPY COMPLETION CODE\n         TM    PARMFLG,NOMSG            SEE IF IN MSG MODE\n         BO    RC16A                    IF NOT GIVE NO MSG\n         MVC   BUF(CAMSGL),CAMSG        MOVE IN PLATTEN\n         MVC   BUF+CAMSGV(8),NAME       MOVE IN CMD NAME\n         UNPK  WORK(7),TCBCMPC-TCB(4,R1)\n         TR    WORK(6),TRTBL\n         MVC   BUF+CAMSGV1(3),WORK      MOVE IN ABEND CODE\n         MVC   BUF+CAMSGV2(3),WORK+3    MOVE IN USER CODE\n         LA    R1,BUF                   GET MAG ADD\n         LA    R0,CAMSGL                GET LNTH\n         TPUT  (1),(0),R                OUTPUT IT\nRC16A    DETACH DA2CTCB,STAE=NO         DETACH SUBTASK\n         BAL   R7,CLEANUP               CLEAN UP THIS MESS\n         LA    R15,16                   RC=16\n         B     RETURN                   RETURN TO CALLER\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*                   ERROR WHILE PROCCESSING STACK                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nRC20A    LA    R1,C'1'                  INDICATE HOW WE GOT HERE   U005\n         B     *+8                      AROUND OTHER 'LA'          U005\n         SPACE 1\nRC20B    LA    R1,C'2'                  INDICATE HOW WE GOT HERE   U005\n         SPACE 1                                                   U005\n*RC20    LA    R1,STMSG                 GET MSG ADD\n*        LA    R0,L'STMSG               GET MSG LNTH\n         MVC   MSG(L'STMSG),STMSG       COPY ERROR MESSAGE PATTERN U005\n         STC   R1,MSG+16                SET ERROR POINTER          U005\n         CVD   R15,DWD                  GET RETURN CODE            U005\n         OI    DWD+7,X'0F'              REMOVE SIGN NIBBLE         U005\n         UNPK  MSG+42(2),DWD            UNPACK RETURN CODE TO MSG  U005\n         LA    R1,MSG                   -> ERROR MSG               U005\n         LA    R0,L'STMSG               GET MSG LNTH               U005\n         TPUT  (1),(0),R                OUTPUT IT\n         ESTAE 0                                                   U008\n         BAL   R7,CLEANUP5              CLEANUP THIS MESS\n         LA    R15,20                   RC=20\n         B     RETURN                   RETURN TO CALLER\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*                   GENERAL CLEANUP ROUTINE                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nCLEANUP  ESTAE 0                        CANCEL STAE EXIT           U008\nCLEANUP1 TM    PARMFLG,NOSTACK          SEE IF STACK TO BE PROCESSED\n         BO    CLEANUP5                 IF NOT SKIP THIS MESS\n         TM    FLG1,STKF                SEE IF ALREADY PROCESSED\n         BO    CLEANUP5                 IF SO SKIP THIS MESS\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FLUSH THE APROPRIATE PART OF THE STACK                       *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\nCLEANUP2 L     R1,ECTIOWA               GET ADD OF IOSRL\n         L     R2,0(,R1)                GET ADD OF TOP ELE OF STK\n         CLC   1(3,R2),=XL3'0'          SEE IF TERM ELE\n         BE    CLEANUP5                 IF SO ASSUME FINISHED\n         C     R2,STACKBLK              SEE IF MATCH\n         BE    CLEANUP3                 IF SO CHECK REC\n         BH    CLEANUP4                 IF HIGH MORE TO FLUSH\n         B     CLEANUP5                 IF LOW FINISHED\nCLEANUP3 L     R2,0(,R2)                POINT TO LSD\n         CLC   STACKREC(4),LSDNXT-LSD(R2) CHK RECS\n         BNH   CLEANUP5                 IF NOT HIGH THEN FINISHED\nCLEANUP4 XC    GETBLK(8),GETBLK         CLEAR GETLINE PARM BLK\n         GETLINE PARM=GETBLK,INPUT=(ISTACK,LOGICAL),                   X\n               TERMGET=(EDIT,WAIT),MF=(E,IOPL)\n         CH    R15,=H'16'               SEE IF EOD ON LST\n         BE    CLEANUP2\n         CH    R15,=H'4'                MAKE SURE IT CAME FROM STK\n         BNE   RC20B                                               U005\n         L     R1,GETBLK+4              POINT TO BUFFER\n         LH    R2,0(,R1)                GET LNTH\n         FREEMAIN R,A=(R1),LV=(R2),SP=1 FREE THE CORE\n         B     CLEANUP2\nCLEANUP5 NI    ECTSWS,X'FF'-ECTNOPD     TURN OFF NO OPERANDS FLG\n         TM    FLG,ECTPARMF             SEE IF IT WAS ORIGINALLY ON\n         BNO   *+8                      IF NOT LEAVE IT OFF\n         OI    ECTSWS,ECTNOPD           RESTORE ORIG CONDITION OF BIT\n         MVC   ECTPCMD(8),OLDNAME       RETORE COMMAND NAME\n         MVC   ECTSCMD(8),OLDNAME1      RESTORE SUBCOMMAND NAME\n         MVI   PARMRC,0                 CLEAR HIGH BYTE OF RC\n         MVC   ECTRTCD(3),PARMRC+1      SAVE RETURN CODE\n         TM    PARMFLG,NOSTAX           SEE IF A STAX DONE\n         BOR   R7                       IF NOT RETURN\n         STAX  ,                        CANCEL STAX EXIT\n         BR    R7                       RETURN\n         TITLE 'T M P S R V - CONSTANTS'\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*                   CONSTANTS                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nCMNFMSG  DC    C'COMMAND XXXXXXXX NOT FOUND'\nCMNFMSGL EQU   L'CMNFMSG\nCMNFV    EQU   CMNFMSG+8\nNCMSG    DC    C'NOT ENOUGH CORE TO LOAD COMMAND XXXXXXXX'\nNCMSGV   EQU   *-8\nNCMSGL   EQU   *-NCMSG\nCAMSG    DC    C'COMMAND XXXXXXXX'\nCAMSGV   EQU   *-(8+CAMSG)\n         DC    C'  SYSTEM XXX'\nCAMSGV1  EQU   *-(3+CAMSG)\n         DC    C'  USER XXX'\nCAMSGV2  EQU   *-(3+CAMSG)\nCAMSGL   EQU   *-CAMSG\n*STMSG   DC    C'TMPSRV ERROR WHILE READING STACK'\nSTMSG    DC    C'TMPSRV - ERROR #N WHILE READING STACK (RC=NN)'    U005\nSYNMSG   DC    C'INVALID COMMAND SYNTAX'\nTRTBL    EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'      TMPCMP TRAMSLATE TBL\n*TTSFDC  ATTACH DE=0,ECB=0,SHSPV=78,SZERO=NO,SF=L\nATTSFDC  ATTACH EPLOC=0,ECB=0,SHSPV=78,SZERO=NO,SF=L               U003\nATTSFL   EQU   *-ATTSFDC\n*TTSF1DC ATTACH DE=0,ECB=0,SHSPV=78,SZERO=YES,SF=L\n*TTSF1L  EQU   *-ATTSF1DC\n         LTORG\n         TITLE 'T M P S R V - STAX EXIT'\n*---------------------------------------------------------------------*\n*                                                                     *\n*              STAX EXIT                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\n         DROPX R12\nSTAXIT   LR    R12,R15                  GET BASE\n         USNGX STAXIT,R12\n         LR    R11,R14                  SAVE RETURN ADDR\n         L     R13,8(,R1)               RESTORE PTR TO TSDSECT\n         LR    R10,R1                   SAVE PTR TO ATTN INFO\n         L     R2,0(,R1)                GET ADD OF TAIE\n         L     R1,4(,R10)               SEE IF AN IBUF GIVEN\n         LTR   R1,R1\n         BZ    STAXIT0                  IF NOT SKIP IMPOSIBLE CHECK\n         XR    R15,R15\n         CLI   2(R2),0                  SEE IF INTERUPT INTERUPTED\n         BNER  R11                      IF SO HAVE SEEN HIGHER POWER\nSTAXIT0  POST  TSECB                    POST ATTN ECB\n         XR    R15,R15                  CLEAR RETURN CD\n         L     R1,4(,R10)               SEE IF IBUF SPECIFIED\n         LTR   R1,R1\n         BZ    STAXIT1                  IF NOT SKIP REPLY HANDELING\n         LH    R3,0(,R2)                GET RPLY LNTH\n         STH   R3,BUFOFF                STORE FOR CALLER\n         LTR   R3,R3                    SEE IF ZERO\n         BZ    STAXIT1                  IF SO SKIP RPLY HANDELING\n         MVC   BUFOFF(2),0(R2)          COPY RPLY LNTH\nSTAXIT1  OI    FLG,ATTNF                TURN ON ATTN FLG\n         TM    FLG,DETF                 SEE IF DETACH NEEDED\n         BNOR  R11                      IF NOT RETURN\n         LA    R1,DAPL                  MARK FILES AS UNUSED\n         LINK  EP=IKJDAIR\n         DETACH DA2CTCB,STAE=YES        DETACH SUBTASK\n         NI    FLG,X'FF'-DETF           TURN OFF DETACH NEEDED FLG\n         SR    R15,R15\n         BR    R11                      RETURN TO CALLER\n         DROPX R12\n         TITLE 'T M P S R V - STAE AND STAE-RETRY EXITS'\n*---------------------------------------------------------------------*\n*                                                                     *\n*               STAE    EXIT                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\n         USNGX STAEXIT,R15\nSTAEXIT  CH    R0,=H'12'                CHECK FOR NO CORE ENTRY\n         BE    STAEXITA\n         L     R12,0(,R1)               GET PTR TO TSDSECT\n         DROPX R13\n         USNGX TSDSECT,R12\n         LA    R2,STAELST               CHECK ABEND CODE FOR\n         LA    R4,2                     NO CORE ABENDS             U008\n         LA    R5,STAELSTE                                         U008\nSTAEXIT1 CLC   5(2,R1),0(R2)\n         BE    STAEXIT2\n         BXLE  R2,R4,STAEXIT1\nSTAEXITE MVC   BUF(ABMSGL),ABMSG        MOVE IN PLATTEN\n         UNPK  WORK(7),5(4,R1)\n         L     R3,=A(TRTBL)\n         TR    WORK(6),0(R3)\n         MVC   BUF+ABMSGV(3),WORK       MOVE IN ABEND CODE\n         MVC   BUF+ABMSGV1(3),WORK+3    MOVE IN USER CODE\n         LA    R1,BUF\n         LA    R0,ABMSGL\n         LR    R11,R14                  SAVE RETURN ADD\n         TPUT  (1),(0),R\n         XR    R15,R15                  NO RETRY\n         BR    R11\nSTAEXIT2 LA    R0,STAERTRY-STAEXIT(,R15)  GET ADD OR RTRY RTN\n         LA    R15,4                    ASK FOR RTRY\n         BR    R14\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*         THEN IS STAE ENTRY WHEN IT CAH GET NO CORE                  *\n*         CANT DO ANYTHING ABOUT IT SO GO AHEAD AND ABEND             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nSTAEXITA LR    R12,R2\n         LR    R1,R2\n         SH    R1,=H'4'\n         B     STAEXITE\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*             STAE EXIT CONSTANTS                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nSTAELST  DC    X'01040E0405060606010A080A'\nSTAELSTE EQU   *-2\nABMSG    DC    C'TMPSRV ABENDED SYSTEM XXX'\nABMSGV   EQU   *-(3+ABMSG)\n         DC    C'  USER XXX'\nABMSGV1  EQU   *-(3+ABMSG)\nABMSGL   EQU   *-ABMSG\n         LTORG\n         SPACE 3\n*---------------------------------------------------------------------*\n*                                                                     *\n*      STAE RETRY ROUTINE (ENTERED ONLY FOR NO CORE ABENDS)           *\n*       RE-ESTABLISH ADDRESSABILITY REGS AND GOTO RC12                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nSTAERTRY L     R13,0(,R1)\n         USNGX TSDSECT,R13\n         L     R12,BASEPTR\n         L     R10,CPPLECT\n         L     R11,PARMPTR\n         FREEMAIN R,LV=104,A=(R1)\n         B     RC12-TMPSRV(,R12)\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        STAI EXIT ROUTINE                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 3\nSTAIEXIT XR    R0,R0\n         L     R15,0(,R1)               -> PRMLST (ASSUME GOT SDWA U001\n         MVI   STAIFLAG-TSDSECT(R15),255    SET FLAG               U001\n         LA    R15,16                   ASK FOR RETRY\n         BR    R14\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSLINE": {"ttr": 13322, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\r\\x00\\x00\\x00\\x80\\x15O\\x00\\x92\\t\\x0f R\\x01\\x1a\\x00Z\\x00\\xd6\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.13", "flags": 0, "createdate": "1980-06-02T00:00:00", "modifydate": "1992-03-30T20:52:00", "lines": 282, "newlines": 90, "modlines": 214, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1987 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nTSLINE   TITLE '-----  DISPLAY TERMINAL NAMES OF ALL TSO USERS  -----'\n*---------------------------------------------------------------------*\n*                                                                     *\n*   PROGRAM NAME:  TSLINE                                             *\n*                                                                     *\n*   PURPOSE:       DISPLAY (SORTED BY TERMINAL NAME) THE TERMINAL     *\n*                  NAMES (AND FOR TCAM, THE LINE ADDRESSES) OF ALL    *\n*                  LOGGED TSO USERS, AND FLAG THOSE WHICH ARE         *\n*                  DISCONNECTED.                                      *\n*                                                                     *\n*   AUTHOR:        UNKNOWN, PROBABLY DWIGHT HARM                      *\n*                                                                     *\n*   DATE:          SOMETIME IN 1977?                                  *\n*                                                                     *\n*   UPDATES:                                                          *\n*      05APR87  LDW  FIX SORT BUG SO WORKS IF ONLY ONE ID             *\n*                    USE &@@SCSVC                                     *\n*                    CHANGE HEADER LINE TO LOWER CASE                 *\n*      07/24/83 LDW  USE SPFCOPY SVC TO GET APF AUTHORIZED            *\n*      07/05/83 LDW  FIX BUG WHICH CAUSED FOOTNOTE TO NOT BE PRINTED  *\n*                       IF LAST DATA LINE WAS FULL                    *\n*      06/22/83 LDW  CHECK FOR HUNG UP TERMINAL, SO IT WORKS ON TCAM  *\n*                    DON'T OVERLAY TERMINAL NAME WITH \"DISCON'D\"      *\n*      04/14/81 LDW  SORT BY TERMINAL NAME                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n         COPY  @GLOBALS\n         EJECT\nTSLINE   OSENTER  EXIT=RETURN,RC=0,GETMAIN=(WORKLEN,WORKD)\nLINK     EQU   R11\nTABSIZE  EQU   200                      # OF INTERNAL TABLE ENTRIES\n         MVI   FLAGS,0                  INIT ALL FLAGS\n         SPACE 2\n         TPUTX HEADER1,LINELEN*ENTRIES\n         SPACE 1\n         TPUTX HEADER2,LINELEN*ENTRIES\n         SPACE 1\n         LA    R7,TABSIZE               GET INTERNAL TABLE SIZE\n         LA    R6,TABLE                 -> TABLE\n         USING TABLED,R6\n         SPACE 1\n         L     R3,16                    -> CVT\n         L     R3,556(,R3)              -> ASVT (X'22C' INTO CVT)\n         LA    R3,524(,R3)              -> TOP ENTRY OF ASVT\n          AIF   (&@@SCSVC EQ 0).NOAPF1\n         LA    R0,1                     SET ENTRY CODE \"SET APF\"\n         SVC   &@@SCSVC                 DO IT\n.NOAPF1   ANOP\n         SPACE 3\nLOOP     LA    R3,4(,R3)                -> NEXT ASVT ENTRY\n         CLC   0(4,R3),=X'80000000'     IF LAST ASVT ENTRY,\n         BE    LASTASID                 ... THEN THRU LOOP.\n         TM    0(R3),X'80'              IF TOP BIT ON,\n         BO    LOOP                     ...THEN ENTRY NOT IN USE.\n         SPACE 1\n         L     R1,0(,R3)                ASCB ADDRESS\n         L     R5,60(,R1)               -> TSB (IN PROTECTED CORE)\n         LTR   R5,R5                    IF ZERO,\n         BZ    LOOP                     ... THEN BATCH JOB, SO SKIP.\n         USING TSB,R5\n         SPACE 1\n         MVC   0(TABLELEN,R6),BLANKS    BLANK THIS ENTRY\n         MVC   TUSERID,=C'STARTING'     ASSUME SPECIAL CASE\n         L     R1,176(,R1)              -> USERID\n         LTR   R1,R1                    ANY POINTER?\n         BZ    *+10                     NO - SKIP\n         MVC   TUSERID,0(R1)            MOVE JOBNAME\n         SPACE 1\n         MODESET KEY=ZERO               SET PROTECT KEY = 0\n         SPACE 1\n         UNPK  TLINEADR-1(5),TSBLINE(3) LINE ADDRESS\n         MVC   TTERMID,TSBTRMID         TERMINAL SYMBOLIC NAME\n*        TM    TSBFLG5,TSBVTAM          IS IT VTAM?\n*        BNO   TCAM                     NO - TCAM\n*        L     R1,TSBEXTNT              -> TSB EXTENSION\n*        USING TSBX,R1\n*        TM    TSBXFLG1,TSBXWREC        AWAITING RECONNECT?\n*        BNO   *+10                     NO - SKIP\n*        MVC   TTERMID,=C'DISCON''D'    YES - SAY SO\n*        DROP  R1,R5\n         MVI   TSTAR,C' '\n         TM    TSBFLG4,TSBHUNG          HAS TERMINAL HUNG UP?\n         BNO   *+12                     NO - OK\n         MVI   TSTAR,C'*'               YES - REMEMBER\n         OI    FLAGS,FSTAR\n         DROP  R5\n         SPACE 1\nTCAM     MODESET KEY=NZERO              RESET PROTECT KEY TO NORMAL\n         SPACE 1\n         TR    TLINEADR(3),HEXTAB\n         CLC   =C'000',TLINEADR         ANYTHING HERE?\n         BNE   *+10                     YES - SKIP\n         MVC   TLINEADR,BLANKS          NO - BLANK IT OUT\n         LA    R6,TABLELEN(,R6)         BUMP TO NEXT ID AREA\n         BCT   R7,LOOP                  ARRAY FULL?\n         TPUTX 'INTERNAL TABLE OVERFLOW'  ...YES\n         SPACE 3\nLASTASID MVI   0(R6),X'FF'              SET END OF LIST INDICATOR\n          AIF   (&@@SCSVC EQ 0).NOAPF2\n         SR    R0,R0                    SET ENTRY CODE \"UNSET APF\"\n         SVC   243                      DO IT\n.NOAPF2   ANOP\n         SPACE 2\nSORTLP1  SH    R6,=Y(TABLELEN)          BACK UP TO LAST TABLE ENTRY\n         DROP  R6\n         LA    R1,TABLE                 -> FIRST TABLE ENTRY\n         CR    R6,R1                    END AT START?\n***      BL    GOPRINT                  YES - DONE SORTING\n         BNH   GOPRINT                  YES - DONE SORTING\n         USING TABLED,R1\nSORTLP2  CLC   TTERMID,TTERMID+TABLELEN DO WE NEED TO SWAP ENTRIES?\n         BL    NOSWAP                   NO - SKIP\n         XC    0(TABLELEN,R1),TABLELEN(R1)  YES - SO USE ...\n         XC    TABLELEN(TABLELEN,R1),0(R1)  ... THE STANDARD ...\n         XC    0(TABLELEN,R1),TABLELEN(R1)  ... CHEAP SWAP METHOD\n         SPACE 1\nNOSWAP   LA    R1,TABLELEN(,R1)         -> NEXT TABLE ENTRY\n         CR    R1,R6                    END OF TABLE?\n         BL    SORTLP2                  NO - CONTINUE THIS SORT PASS\n         B     SORTLP1                  YES - DO NEXT PASS\n         SPACE 3\nGOPRINT  LA    R6,TABLE                 RESET POINTER\n         USING TABLED,R6\n         BAL   LINK,INIT                SET COUNTER & LINE POINTER\n         USING LINE,R2\n         SPACE 2\nPRLOOP   CLI   0(R6),X'FF'              END OF TABLE?\n         BE    TABDONE                  YES - LEAVE\n         MVC   LTERMID,TTERMID          GET TERMID FROM TABLE\n         MVC   LUSERID,TUSERID\n         MVC   LSTAR,TSTAR\n         MVC   LLINEADR,TLINEADR\n         LA    R6,TABLELEN(,R6)         -> NEXT TABLE ENTRY\n         LA    R2,LINELEN(,R2)          -> NEXT ENTRY ON LINE\n         BCT   R4,PRLOOP                FILL THIS LINE\n         BAL   LINK,PRINT               PRINT THIS LINE\n         B     PRLOOP                   FILL NEXT LINE\n         SPACE 2\nTABDONE  CLC   MSGAREA,BLANKS           IF LINE IS ALL BLANK\n         BE    *+8                      ...THEN NOTHING TO PRINT\n         BAL   LINK,PRINT               AND PRINT LINE.\n         TM    FLAGS,FSTAR              FOOTNOTE NEEDED?\n         BNO   RETURN                   NO - LEAVE NOW\n         BAL   LINK,PRINT               PRINT A BLANK LINE\n         TPUTX '=== NOTE:  \"*\" PRECEEDING USERID INDICATES SESSION IS D$\n               ISCONNECTED ==='\n         B     RETURN                   LEAVE\n         SPACE 3\nPRINT    TPUTX MSGAREA,L'MSGAREA        PRINT THE LINE\n         SPACE 1\nINIT     LA    R4,ENTRIES               SET COUNTER\n         LA    R2,MSGAREA               RESET OUTPUT POINTER\n         MVC   MSGAREA,BLANKS           CLEAR THE PRINT LINE\n         BR    LINK                     RETURN TO CALLER\n         SPACE 3\n         LTORG\n         SPACE 2\nBLANKS   DC    CL80' '\nHEXTAB   EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\n         SPACE 2\nLINE     DSECT\nLSTAR    DS    CL1\n         DS    CL1\nLUSERID  DS    CL8\n         DS    CL1\nLTERMID  DS    CL8\n         DS    CL1\nLLINEADR DS    CL3\n         DS    CL3\nLINELEN  EQU   *-LINE\n         SPACE 1\n*NTRIES  EQU   (L'MSGAREA-1)/LINELEN\nENTRIES  EQU   (80-1)/LINELEN           @#(*&%$&\u00ac ASSEMBLER\n         SPACE 2\nTSLINE   CSECT                          RESUME\nHEADER1  DC    3CL(LINELEN)'  Userid   Terminal Line'\nHEADER2  DC    3CL(LINELEN)'  ------   -------- ----'\n         SPACE 2\nTABLED   DSECT\nTSTAR    DS    C,C\nTUSERID  DS    CL8\nTTERMID  DS    CL8,C\nTLINEADR DS    CL3,C\nTABLELEN EQU   *-TABLED\n         SPACE 2\nWORKD    DSECT                          RESUME\nFLAGS    DS    X\nFSTAR    EQU   X'80'                    FOOTNOTE MSG IS REQUIRED\n         DS    0F                       ALIGNMENT\nMSGAREA  DS    CL80\nTABLE    DS    (TABSIZE)XL(TABLELEN)\nTABLEND  DS    X\nWORKLEN  EQU   *-WORKD\n         EJECT\n*        IKJTSB  LIST=YES,EXT=YES\n         IKJTSB  LIST=YES\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VMCP": {"ttr": 13574, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x1f\\x00\\x00\\x00y)\\x9f\\x00\\x92\\t\\x0f R\\x04'\\x03;\\x03\\xed\\xd3\\xc4\\xe6@@@@@@@\"", "ispf": {"version": "01.31", "flags": 0, "createdate": "1979-10-26T00:00:00", "modifydate": "1992-03-30T20:52:00", "lines": 1063, "newlines": 827, "modlines": 1005, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1991 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nVMCP     TITLE 'V M C P'\n***********************************************************************\n***********************************************************************\n**                                                                   **\n**  PROGRAM NAME:  VMCP                                              **\n**                                                                   **\n**  AUTHOR:        JEFF JOHNSON (JCJ)                                **\n**                                                                   **\n**  PURPOSE:       ALLOW SYSTEM PROGRAMMERS TO ISSUE VM COMMANDS     **\n**                 FROM TSO                                          **\n**                                                                   **\n**  Updates:                                                         **\n**     12Aug91  U014 LDW - Check for VM/ESA (for reflection)         **\n**     01Jan91  U013 LDW - Add \"COUPLE\" to valid commands table      **\n**     14Dec90  U012 LDW - Add \"SMSG\" to valid commands table        **\n**     24May90  U011 LDW - Fix for ASMH V2                           **\n**     04/24/86 U010 LDW - Fix turkey bug in update 'U006'           **\n**     03/26/86 U009 LDW - Update check for VM/SP, check for VM/XA   **\n**     09/24/84 U008 LDW - Add \"RESET\" to valid commands table       **\n**     09/20/84 U007 LDW - Don't use GISUTYP macro                   **\n**                       - Fix for VM/SP                             **\n**     02/18/81 U006 SDM - Use PCCA for VM test instead of STIDP     **\n**                       - Move reply area to page bnd and pgfix it  **\n**                       - Use new macros to test systems programmer **\n**                       - Move other tests to after environ. test   **\n**                       - Allow multiple command mode from batch    **\n**     06/17/80 U005 LDW - Fix PSDB sysp check                       **\n**                       - Reduce VM/370 reply buff to 4k (from 8k)  **\n**     12/05/79 U004 SDM - Eliminate command--> WTO's                **\n**     12/02/79 U003 SDM - Eliminate DESC=2 on security WTO's        **\n**                       - Eliminate \"system programmer's log\" WTO   **\n**     11/30/79 U002 LDW - Fix operation as a TSO CP                 **\n**                       - Change authorized user check method       **\n**     11/09/79 U001 LDW - Convert to MVS                            **\n**                                                                   **\n***********************************************************************\n***********************************************************************\n         TITLE 'V M C P   ---   MACROS'\n         MACRO\n&LAB     WTXT  &TEXT\n         LCLA  &LEN,&LENC               LOCAL LEN USE\n&LENC    SETA  K'&TEXT-2                SET TEXT LENGTH\n&LEN     SETA  &LENC-1                  SET EXECUTE LENGTH\n&LAB     DC    AL1(&LEN),CL&LENC&TEXT\n         SPACE 1\n         MEND\n         SPACE 4\n         MACRO\n&LABEL   CTAB  &DATA\n         LCLA  &IX,&L\n         LCLC  &LAB\n&IX      SETA  1                        INIT &SYSLIST INDEX\n&LAB     SETC  '&LABEL'                 GET USER'S LABEL IF ANY\n.LOOP    AIF   (&IX GT N'&SYSLIST).FINI BIF NO MORE INPUT DATA\n&L       SETA  K'&SYSLIST(&IX)          SET LEN OF COMMAND\n&LAB     DC    AL1(&L,&SYSLIST(&IX+1)),C'&SYSLIST(&IX)'\n&LAB     SETC  ''                       DISABLE LABEL\n&IX      SETA  &IX+2                    POINT TO NEXT ENTRY\n         AGO   .LOOP                    GO CHECK FOR END\n.FINI    DC    X'FF'                    FLAG END OF TABLE\n         SPACE 2\n         MEND\n         TITLE 'V M C P   ---   REGISTER USAGE'\nVMCP     CSECT\n         SPACE 2\n***********************************************************************\n***********************************************************************\n***********************************************************************\n***                                                                 ***\nR0       EQU   0                        SYSTEM,WORK                 ***\nR1       EQU   1                        SYSTEM,WORK                 ***\nR2       EQU   2                        WORK                        ***\nR3       EQU   3                        WORK                        ***\nR4       EQU   4                        WORK                        ***\nR5       EQU   5                        WORK                        ***\nR6       EQU   6                        * * *   F R E E   * * *     ***\nR7       EQU   7                        * * *   F R E E   * * *     ***\nR8       EQU   8                        * * *   F R E E   * * *     ***\nR9       EQU   9                        * * *   F R E E   * * *     ***\nR10      EQU   10                       PNTR TO INPUT PARM LIST     ***\nR11      EQU   11                       BAL REG                     ***\nR12      EQU   12                       PROGRAM BASE REGISTER       ***\nR13      EQU   13                       SAVEAREA PNTR               ***\nR14      EQU   14                       SYSTEM,WORK                 ***\nR15      EQU   15                       SYSTEM,WORK                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n***********************************************************************\n         TITLE 'V M C P   ---   INITIALIZE'\n***********************************************************************\n***********************************************************************\n**                                                                   **\n** SAVE CALLER'S REGISTERS; BUY AND INITIALIZE OUR DYNAMIC WORKAREA. **\n**                                                                   **\n***********************************************************************\n***********************************************************************\n         SPACE 2\n         SAVE  (14,12),,VMCP_&SYSDATE._&SYSTIME SAVE CALLER'S REGS U011\n         LA    R12,0(,R15)              SET BASE REGISTER\n         USING VMCP,R12                 SET ADDRESSIBILITY\n         USING PSA,0                                               U006\n         SPACE 2\n         LR    R10,R1                   SAVE PARM PNTR\n         GETMAIN RU,LV=WORKL,SP=1,BNDRY=PAGE BUY PROGRAM WORKAREA  U006\n         ST    R1,8(,R13)               LSA IN HIS\n         ST    R13,4(,R1)               HSA IN MINE\n         LA    R13,0(,R1)               SET SAVAREA/WORKAREA PNTR\n         USING WORK,R13                 SET ADDRESSIBILITY\n         SPACE 2\n         XC    WK#XC(WK#XCL),WK#XC      INIT WORK AREA\n         XC    WK#TRT(WK#TRTL),WK#TRT   CLEAR TRT TABLE\n         MVI   WK#TRT+X'15',X'FF'       SET FOR TRT TO X'15'\n         OI    WK#FLAG,WK#FEXIT         DEFAULT SINGLE COMMAND MODE\n*U004    MVC   WK#PRE(WTO#MSKL),WTO#MSK SET CMND PREFIX IN WORKAREA\n         SPACE 2\n         LA    R2,WORK                  -> DYNAMIC WORK AREA       U006\n         AH    R2,=Y(WK#VMC-WORK)       -> COMMUNICATION AREA      U006\n         ST    R2,WK#VMCA               SAVE COMM. AREA ADDRESS    U006\n         TITLE 'V M C P   ---   DETERMINE CALLING ENVIRONMENT'\n***********************************************************************\n***********************************************************************\n**                                                                   **\n** DETERMINE OUR ENVIRONMENT. IF RUNNING UNDER TSO, SET UP PUTGET    **\n** CONTROL BLOCK DATA IN CASE WE WILL BE DOING MULTIPLE COMMANDS.    **\n** IF NOT RUNNING AS A TSO COMMAND PROCESSOR, MAKE THE 'CALL' PARM   **\n** DATA LOOK LIKE A COMMAND INPUT BUFFER. VALIDITY CHECK THE MANNER  **\n** OF INVOCATION; WE ONLY ALLOW PROCESSING IF RUNNING AS A TSO       **\n** PROCESS UNDER A USER WITH THE SYSTEM PROGRAMMER BIT IN THE PSCB   **\n** OR AS A SYSTEM TASK.                                              **\n**                                                                   **\n** REGISTER USE: R0  - WORK                                          **\n**               R1  - WORK                                          **\n**               R2  - WORK                                          **\n**               R10 - INPUT PARAMETER ADDR                          **\n**               R14 - WORK                                          **\n**               R15 - WORK                                          **\n**                                                                   **\n***********************************************************************\n***********************************************************************\n         SPACE 2\n         L     R14,PSATOLD              -> TCB                     U006\n         L     R15,PSAAOLD              -> ASCB                    U006\n         L     R15,ASCBCSCB-ASCB(,R15)  -> CSCB                    U002\n         CLI   CHTRKID-CSCB(R15),1      TSO TASK?                  U002\n         BNE   ENV#SYST                 NO - CHECK SYSTEM TASK     U002\n         SPACE 2\n         OI    WK#FLAG,WK#FTSO          SAY A TSO TASK\n         L     R15,TCBJSCB-TCB(,R14)    TCB.JSCB                   U002\n*U004    MVC   WK#PRE+4+7(4),=C'TSO/'   REPLACE 'COMMAND-->' WITH...\n         L     R15,JSCBPSCB-IEZJSCB(,R15) JSCB.PSCB\n*U004    MVC   WK#PRE+4+7+4(3),PSCBUSER-PSCB(R15) 'TSO/UID-->'\n         MVC   WK#IOPL+IOPLUPT+1-IOPL(3),PSCBUPT+1-PSCB(R15) UPT ADDR\n         L     R1,PSCBRLGB-PSCB(,R15)   PSCB.RLGB\n         MVC   WK#IOPL+IOPLECT+1-IOPL(3),RLGBECT+1-RLGB(R1)        U002\n         SPACE 1\n*U007    GISUTYP (SYSPGMR,FAIL,ENV#ERRT),   FAIL IF NOT            U006+\n               PSCB=(R15)                   SYSTEMS PROGRAMMER     U006\n         TM    PSCBATR1-PSCB(R15),PSCBACCT  SYSTEMS PROGRAMMER?    U007\n         BZ    ENV#ERRT                 NO - GET OUT               U007\n         LA    R0,WK#ECB                PNT TO ATTN ECB\n         LA    R1,WK#PGPB               AND PUTGET PARM BLOCK\n         LR    R2,R15                   SAVE POSSIBLE PSCB ADDR    U006\n         STM   R0,R1,WK#IOPL+IOPLECB-IOPL SET PUTGET IOPL ADDRS\n         SPACE 2\n         STAX  STAXEXIT,REPLACE=NO,DEFER=NO,USADDR=(R13),              +\n               MF=(E,WK#STAX)           SET UP FOR ATTENTIONS\n         EJECT\n*  ----  CHECK IF RUNNING AS A COMMAND PROCESSOR HERE.\n         SPACE 2\n         CLM   R2,B'0111',CPPLPSCB+1-CPPL(R10) HAVE A CPPL?        U006\n         BNE   ENV#PARM                 BIF IF NOT A CMND PROCESSOR\n         SPACE 2\n         L     R1,CPPLCBUF-CPPL(,R10)   GET CMND BUFFER ADDR\n         LH    R14,0(,R1)               GET BUFFER LENGTH\n         LH    R15,2(,R1)               GET OPERAND OFFSET\n         SLR   R14,R15                  SUBTRACT COMMAND DATA LENGTH\n         LA    R15,4(R1,R15)            POINT PAST COMMAND TEXT\n         SLL   R14,16                   SHIFT NEW BUFFER LEN TO HI HALF\n         L     R1,WK#VMCA               -> COMMUNICATION AREA      U006\n         MVC   4(WK#OPRL-4,R1),0(R15)   TAKE MAX OPERAND LENGTH    U006\n         ST    R14,0(,R1)               SET UP BUFFER HWORDS       U006\n         B     VM#TEST                  AND CONTINUE\n         SPACE 2\n*  ----  WE GET HERE WITH ILLEGAL ACCESS BY A TSO USER.\n         SPACE 2\nENV#ERRT MVC   WK#WTO(WTO#AC1L),WTO#AC1 MOVE IN WTO MASK\n         MVC   WK#WTO+WTO#AC01(3),PSCBUSER-PSCB(R15) ADD USER INITS\n         WTO   MF=(E,WK#WTO)            WTO THE OFFENDER'S IDENTITY\n         B     EXIT#R16                 EXIT NOW                   U003\n         SPACE 2\n*  ----  WE GET HERE WITH ILLEGAL ACCESS BY PROBABLE BATCH JOB.\n         SPACE 2\nENV#ERRJ MVC   WK#WTO(WTO#AC2L),WTO#AC2 MOVE IN WTO MASK\n         MVC   WK#WTO+WTO#AC02(8),0(R14) PROPAGATE JOBNAME\n         WTO   MF=(E,WK#WTO)            WTO THE OFFENDER'S IDENTITY\n         B     EXIT#R16                 AND EXIT\n         SPACE 2\n*  ----  CHECK IF RUNNING AS A SYSTEM TASK HERE.\n         SPACE 2\nENV#SYST L     R14,TCBTIO-TCB(,R14)     TIOT ADDR FOR JOBNAME      U002\n         CLI   CHTRKID-CSCB(R15),2      JOB? (NOT INIT OR TSO)     U002\n         BNE   ENV#ERRJ                 NO - FLAG ACCESS ERROR     U002\n         SPACE 2\nENV#PARM L     R15,0(,R10)              GET ADDR OF PARMLIST\n         LH    R1,0(,R15)               GET PARM LENGTH\n         LA    R1,4(,R1)                ADD FOR CONTROL HALFWORDS\n         L     R14,WK#VMCA              -> COMMUNICATION AREA      U006\n         MVC   4(WK#OPRL-4,R14),2(R15)  MOVE MAX LENGTH DATA       U006\n         SLL   R1,16                    SHIFT LENGTH TO HI HALFWORD\n         ST    R1,0(,R14)               AND SET UP A FAKE CBUF     U006\n         TITLE 'V M C P   ---   CHECK IF RUNNING UNDER VM'\n***********************************************************************\n***********************************************************************\n**                                                                   **\n** DETERMINE IF WE ARE RUNNING UNDER VM/370.                         **\n** IF NO, TERMINATE; ELSE CONTINUE.                                  **\n**                                                                   **\n***********************************************************************\n***********************************************************************\n         SPACE 2\nVM#TEST  L     R1,PSAPCCAV              -> PCCA                    U006\n         CLC   =C'FF',4(R1)             IS THIS VM?                U006\n         LA    R1,ERR#VM                PNT TO ERROR WTO TEXT IN CASE\n         BNE   ERR#LOG                  NO - EXIT WITH ERROR\n         TITLE 'V M C P   ---   PAGE FIX VM/370 COMMUNICATION AREA'\n***********************************************************************\n***********************************************************************\n**                                                                   **\n** PAGE FIX THE VM/370 COMMUNICATION BUFFER SO THAT IT WILL REMAIN   **\n** IN STORAGE AS LONG AS WE DO.  LATER WE WILL GET THE LOCAL LOCK    **\n** TO ENSURE THAT THE SYSTEM CANNOT SWAP US AND THUS MOVE THE FIXED  **\n** PAGE AFTER WE HAVE DETERMINED ITS REAL ADDRESS FOR THE DIAGNOSE   **\n** INSTRUCTION.                                                      **\n**                                                                   **\n** REGISTER USE: R0  - WORK                                          **\n**               R1  - WORK; ERROR MESSAGE TEXT                      **\n**               R2  - WORK; COMMUNICATION AREA POINTER              **\n**               R14 - WORK                                          **\n**               R15 - WORK                                          **\n**                                                                   **\n***********************************************************************\n***********************************************************************\n         SPACE 2\n         L     R2,WK#VMCA               -> COMMUNICATION AREA      U006\n         LR    R15,R2                   -> COMMUNICATION AREA      U006\n         AH    R15,=Y(WK#VMCL)          -> END OF AREA + 1         U006\n         LA    R0,WK#ECB                -> PGFIX ECB               U006\n         PGFIX R,A=(2),EA=(15),LONG=Y,ECB=(0)   FIX THE STORAGE    U006\n         LTR   R15,R15                  PGFIX COMPLETE?            U006\n         BZ    FIX01                    YES, CONTINUE              U006\n         LA    R1,ERR#PGFX              ERROR MESSAGE, IN CASE     U006\n         CH    R15,=H'8'                PGFIX PROCEEDING?          U006\n         BNE   ERR#LOG                  NO, GO DIE                 U006\n         WAIT  ECB=WK#ECB               WAIT FOR PGFIX COMPL.      U006\nFIX01    MVI   WK#ECB,X'00'             UNPOST THE ECB             U006\n         OI    WK#FLAG,WK#FPGFX         INDICATE PGFIX COMPLETION  U006\n         TITLE 'V M C P   ---   DETERMINE VM RELEASE LEVEL'\n***********************************************************************\n***********************************************************************\n**                                                                   **\n** DETERMINE WHICH VM VERSION WE ARE RUNNING UNDER. RELEASES         **\n** PREVIOUS TO 6 DO NOT SUPPORT THE COMMAND RESPONSE BEING RETURNED  **\n** IN A VIRTUAL BUFFER AREA. WE ISSUE DIAGNOSE CODE 00 TO DETERMINE  **\n** THE RELEASE LEVEL OF THE CURRENT SYSTEM. NOTE THAT THE DIAGNOSE   **\n** MAY RETURN INFORMATION ABOUT NESTED VM MACHINES; WE ONLY CARE     **\n** ABOUT THE FIRST LEVEL MACHINE.                                    **\n**                                                                   **\n** REGISTER USE: R1 - ERROR MESSAGE TEXT PNTR                        **\n**               R2 - ADDR OF PAGE FIXED STATUS BUFFER AREA          **\n**               R3 - DIAGNOSE REG X - REAL ADDRESS OF STATUS AREA   **\n**               R4 - DIAGNOSE REG Y - LENGTH OF STATUS BUFFER AREA  **\n**                                                                   **\n** DIAGNOSE RETURN: REG Y (R4) CONTAINS ITS ORIGINAL VALUE LESS THE  **\n**                  NUMBER OF BYTES STORED.                          **\n**                                                                   **\n***********************************************************************\n***********************************************************************\n         SPACE 2\n         L     R2,WK#VMCA               -> COMMUNICATION AREA      U006\n         LA    R2,WK#STAT-WK#VMC(,R2)   -> DIAGNOSE 00 REPLY AREA  U006\n         LA    R4,WK#STATL              LENGTH OF AREA             U006\n         BAL   R11,PREPDIAG             GO PREPARE ENVIRONMENT     U006\n         LRA   R3,0(,R2)                VM INSISTS ON REAL ADDR    U006\n         BZ    *+8                      CONTINUE IF OK             U005\n         EX    0,*                      DIE IF NOT                 U005\n         DC    X'83',X'34',XL2'0000'    ISSUE DIAGNOSE CODE 00     U006\n         BAL   R11,ENDDIAG              RESTORE NORMAL ENVIRONMENT U006\n         SPACE 2\n         SH    R4,=Y(WK#STATL)          GET NEG VALUE/BYTES RETURNED\n         LPR   R4,R4                    GEN POSITIVE VALUE/TEST\n         LA    R1,ERR#D0                PNT TO ERROR WTO TEXT IN CASE\n         BNP   ERR#LOG                  FLAG ERROR IF NO RETURN STATUS\n         CLI   8(R2),6                  RELEASE 6 OR GREATER?      U006\n         BL    *+8                      NO - CANNOT DO REPLY REFLECTION\n         OI    WK#FLAG,WK#FBUF          FLAG REFLECTION ALLOWABLE\n*U009    TM    24(R2),X'E0'             VM/SP?                     U007\n*U009    BNO   *+8                      NO - CANNOT DO REFLECTION  U007\n*U009    OI    WK#FLAG,WK#FBUF          FLAG REFLECTION ALLOWABLE  U007\n         CLC   =C'VM/SP',0(R2)          VM/SP?                     U009\n         BNE   *+8                      NO - CANNOT DO REFLECTION  U009\n         OI    WK#FLAG,WK#FBUF          FLAG REFLECTION ALLOWABLE  U009\n         CLC   =C'VM/XA',0(R2)          VM/XA SF?                  U009\n         BNE   *+8                      NO - CANNOT DO REFLECTION  U009\n         OI    WK#FLAG,WK#FBUF          FLAG REFLECTION ALLOWABLE  U009\n         CLC   =C'VM/ESA',0(R2)         VM/ESA?                    U014\n         BNE   *+8                      NO - CANNOT DO REFLECTION  U014\n         OI    WK#FLAG,WK#FBUF          FLAG REFLECTION ALLOWABLE  U014\n         TITLE 'V M C P   ---   VALIDATE THE COMMAND TEXT'\n***********************************************************************\n***********************************************************************\n**                                                                   **\n** CHECK THE BUFFER DATA FOR VALIDITY. SKIP PAST LEADING BLANKS,     **\n** FOLD TEXT TO UPPER CASE, AND TRUNCATE TRAILING BLANKS. IF THE     **\n** FIRST THREE COMMAND CHARS ARE 'END', EXIT TO THE CALLER.          **\n**                                                                   **\n** REGISTER USE: R14 - BXLE INCREMENT                                **\n**               R15 - BXLE END PNTR,COMPUTED COMMAND LENGTH         **\n**                R1 - BXLE INDEX                                    **\n**                R2 - ADDR OF FIRST COMMAND CHAR                    **\n**                R4 - LENGTH OF COMMAND + OPERANDS                  **\n**                                                                   **\n***********************************************************************\n***********************************************************************\n         SPACE 2\nVM#GO    L     R14,WK#VMCA              -> COMMUNICATION AREA      U006\n         LH    R15,0(,R14)              GET BUFFER LENGTH          U006\n         SH    R15,=H'4'                SUBTRACT OFF PREFIX LENGTH\n         LA    R1,4(,R14)               POINT TO START OF DATA     U006\n         BM    VM#BUFE                  BIF SOMETHING FUNNY\n         CH    R15,=Y(WK#OPRL-4)        LENGTH WITHIN BOUNDS?\n         LA    R14,1                    SET BXLE INCREMENT\n         BH    VM#BUFE                  NO - FLAG ERROR\n         ALR   R15,R1                   SET BXLE END/LAST BYTE + 1\n         MVI   0(R15),C' '              INSURE NO NON-BLANK HIT\n         SPACE 1\nVM#BUF1  CLI   0(R1),C' '               LEADING BLANK?\n         BE    VM#BUF2                  YES - SKIP IT              U006\n         CLI   0(R1),X'00'              NO - LEADING NULL?         U006\n         BNE   VM#BUF3                  NO - WE HAVE DATA\nVM#BUF2  BXLE  R1,R14,VM#BUF1           LOOP TIL WE GET DATA\n         SPACE 2\n*  ----  WE GET HERE WITH AN EMPTY (OR NULL) INPUT BUFFER.\n         TM    WK#FLAG,WK#FEXIT         INITIAL COMMAND?           U006\n         BO    VM#PUT                   YES, GO ASK FOR MORE       U006\n         B     EXIT#R00                 NO, EXIT NOW               U006\n         SPACE 1\nVM#BUFE  LA    R1,ERR#BUF               PNT TO ERROR TEXT\n         B     ERR#LOG                  AND GO LOG IT/EXIT\n         SPACE 1\nVM#BUF3  LR    R2,R1                    SAVE ADDR OF FIRST BYTE\nVM#BUF4  OI    0(R1),X'40'              FOLD TO UPPER CASE\n         BXLE  R1,R14,VM#BUF4           DO REST OF BUFFER\n         SPACE 1\n         CLC   0(3,R2),=C'END'          TIME TO LEAVE?\n         BE    EXIT#R00                 YES - EXIT\n         SPACE 1\nVM#BUF5  SLR   R15,R14                  DECREMENT END PNTR\n         CLI   0(R15),C' '              TRAILING BLANK?\n         BE    VM#BUF5                  YES - LOOP\n         SPACE 1\n         SLR   R15,R2                   GEN CMND LENGTH - 1\n         LA    R4,1(,R15)               SET CMND LEN IN PARM REG\n         TITLE 'V M C P   ---   ISSUE THE COMMAND VIA DIAGNOSE'\n***********************************************************************\n***********************************************************************\n**                                                                   **\n** PASS THE COMMAND TEXT TO VM FOR PROCESSING; WE ISSUE DIAGNOSE     **\n** CODE X'08' TO ACCOMPLISH THIS FUNCTION. FOR VM RELEASE 6 AND      **\n** ABOVE, CP WILL RETURN THE COMMAND RESPONSE TO A VIRTUAL MACHINE   **\n** BUFFER AREA. WE CHECK IF COMMAND RESPONSE REPLY FEEDBACK IS       **\n** ALLOWED AND SET THE CALLING REGISTERS APPROPRIATELY.              **\n**                                                                   **\n** REGISTER USE: R15 - WORK                                          **\n**                R2 - DIAGNOSE REG X   - ADDR OF CP COMMAND STRING  **\n**                R3 - DIAGNOSE REG X+1 - BUFF FOR COMMAND RESPONSE  **\n**                R4 - DIAGNOSE REG Y   - X'FLAG',FL3(CMND LENGTH)   **\n**                     FLAGS: X'80'     - CP TO REJECT LINK PASSWORD **\n**                            X'40'     - CP TO RETURN COMMAND REPLY **\n**                R5 - DIAGNOSE REG Y+1 - LENGTH OF RESPONSE BUFFER  **\n**               R11 - BAL REG                                       **\n**                                                                   **\n***********************************************************************\n***********************************************************************\n         SPACE 2\n         BAL   R11,CMND#CHK             CHECK IF COMMAND EXECUTE WTOR\n         B     VM#XCHK                  RET +0 - DO NOT DO COMMAND\n         SPACE 1\n*U004    MVC   WK#WTO(WTO#MSKL),WK#PRE  INIT WTO PREFIX\n*U004    MVC   WK#TXT(WTOL),0(R2)       MAX LEN CMND TO WORK BUFFER\n*U004    LA    R15,WTO#MSKL(,R4)        GEN WTO LENGTH\n*U004    CH    R4,=Y(WTOL)              COMMAND TOO LONG FOR BUFF?\n*U004    BNH   *+12                     BIF COMMAND FITS IN WTO BUFFER\n*U004    LA    R15,WTO#MSKL+WTOL        GEN MAX WTO LENGTH\n*U004    MVI   WK#WTO+WTO#MSKL+WTOL-1,C'+' FLAG THE OVERFLOW SOMEWHAT\n*U004    SPACE 1\n*U004    STH   R15,WK#WTO               SET CMND WTO LENGTH\n*U004    WTO   MF=(E,WK#WTO)            SAY WHAT WE ARE DOING\n         SPACE 1\n         TM    WK#FLAG,WK#FBUF          COMMAND RESPONSE TO BUFFER?\n         BZ    VM#CMND                  NO - CONTINUE\n         SPACE 1\n         L     R3,WK#VMCA               ADDR OF REPLY BUFFER       U006\n         LH    R5,=Y(WK#VMCL)           LENGTH OF REPLY BUFFER\n         O     R4,=XL4'40000000'        TELL CP TO RETURN RESPONSE\n         SPACE 2\nVM#CMND  BAL   R11,PREPDIAG             GO PREPARE ENVIRONMENT     U006\n         LRA   R2,0(,R2)                VM LIKES                   U001\n         LRA   R3,0(,R3)                         REAL ADDRESSES    U001\n         DC    X'83',X'24',XL2'0008'    ISSUE CP DIAGNOSE\n         BALR  R2,0                     SAVE COND CODE IN CASE\n         BAL   R11,ENDDIAG              RESTORE NORMAL ENVIRONMENT U006\n         TITLE 'V M C P   ---   PROCESS COMMAND RETURN'\n***********************************************************************\n***********************************************************************\n**                                                                   **\n** PROCESS THE RETURN FROM THE DIAGNOSE HERE. IF WE ARE RUNNING      **\n** UNDER RELEASE 5 OR LOWER, NO COMMAND REPLY FEEDBACK TO OUR        **\n** BUFFER HAS BEEN REQUESTED. OTHERWISE, COMMAND REPLY FEEDBACK      **\n** HAS BEEN REQUESTED. THE FOLLOWING RETURN STATUS MAY OCCUR:        **\n**                                                                   **\n** REGISTER USE: R14 - BAL REG                                       **\n**               R15 - WORK                                          **\n**                R1 - WORK                                          **\n**                R2 - DIAGNOSE COND. CODE,WORK                      **\n**                R3 - RETURN DATA LINE INDEX REG                    **\n**                R4 - VM RETURN STATUS COUNT                        **\n**                R5 - VM RETURN COUNT/MAX REPLY TEXT LENGTH         **\n**                                                                   **\n** NO FEEDBACK RETURN: RY (R4) CONTAINS 0 OR A NUMERIC ERROR MESSAGE **\n**                     CODE.                                         **\n** FEEDBACK RETURN:    RY (R4) CONTAINS 0 OR A NUMERIC ERROR MESSAGE **\n**                     CODE.                                         **\n**                     REPLY FIT IN BUFFER: COND CODE = 0            **\n**                                          RY+1 (R5) = REPLY CHAR   **\n**                                                      COUNT        **\n**                     REPLY TOO LARGE:     COND CODE = 1            **\n**                                          RY+1 (R5) = COUNT OF     **\n**                                                      LOST CHARS   **\n**                                                                   **\n***********************************************************************\n***********************************************************************\n         SPACE 2\n         LTR   R4,R4                    ALL WENT OK?\n         MVC   WK#WTO(WTO#REPL),WTO#REP SET REPLY WTO PREFIX\n         BNZ   VM#RERR                  NO - GO LOG ERROR MSG\n         SPACE 2\n         TM    WK#FLAG,WK#FBUF          COMMAND RESPONSE TO BUFFER?\n         BZ    VM#XCHK                  NO - GO CHECK IF DONE\n         SPACE 2\n*  ----  CHECK RETURN STATUS; LOG MISSING CHARACTERS IF NECESSARY.\n         SPACE 2\n         SPM   R2                       RESET CONDITION CODE\n         BC    8,VM#ECHO                BRANCH IF NO CHARS LOST\n         SPACE 1\n         LA    R1,WK#WTO                PNT TO TEXT TO WTO\n         CVD   R5,WK#DBLW               LOST CHARS TO PACKED\n         MVC   WK#WTO+WTO#REPL(17),=C'REPLY CHARS LOST ' ERR MSG PREFIX\n         OI    WK#DBLW+7,X'0F'          SET FOR UNPK\n         UNPK  WK#WTO+WTO#REPL+17(5),WK#DBLW+5(3) COUNT TO MSG\n         LH    R5,=Y(WK#VMCL)           RESET REPLY TEXT LENGTH\n         MVI   WK#WTO+1,WTO#REPL+17+5   SET WTO LENGTH\n         BAL   R14,WTO#TXT              DO BATCH WTO/TSO TPUT\n         SPACE 2\nVM#ECHO  L     R2,WK#VMCA               POINT TO START OF DATA     U006\n         ALR   R5,R2                    POINT TO LAST CHAR + 1\n         SPACE 2\nVM#DUMP  XR    R1,R1                    INSURE HI BYTE CLEAR FOR SUB\n         CLR   R2,R5                    MORE DATA TO PROCESS?\n         LR    R3,R2                    SET NEW SCAN START ADDR\n         BNL   VM#XCHK                  NO - GO CHECK IF DONE\n         SPACE 2\n         TRT   0(WTOL,R3),WK#TRT        SCAN FOR X'15'\n         LA    R2,1(,R1)                ASSUME HIT/SET NEW SCAN ADDR\n         BZ    VM#MORE                  TOO LONG/MUST FOLD HERE\n         SPACE 2\nVM#GEN   SLR   R1,R3                    GEN DATA LENGTH\n         TM    WK#FLAG,WK#FTSO          TSO CALLER?\n         LR    R0,R1                    ASSUME YES/SET TPUT LENGTH\n         BZ    VM#WTO                   BIF WTO TO DO\n         SPACE 2\n         LR    R1,R3                    SET TPUT ADDR\n         TPUT  (1),(0),R                TPUT OUT THE RESPONSE\n         B     VM#DUMP                  AND CHECK FOR NEXT SEGMENT\n         SPACE 2\nVM#WTO   MVC   WK#WTO+WTO#REPL(0),0(R3) <<< EXECUTED >>>\n         EX    R1,*-6                   MOVE TEXT + 1 CHAR\n         LA    R15,WTO#REPL(,R1)        GEN WTO LENGTH\n         STH   R15,WK#WTO               SET FOR WTO\n         WTO   MF=(E,WK#WTO)            DUMP IT OUT\n         B     VM#DUMP                  AND CHECK FOR NEXT SEGMENT\n         SPACE 2\nVM#MORE  LA    R1,WTOL(,R3)             FAKE OUT A HIT\n         LR    R2,R1                    SET RESUME ADDR\n         B     VM#GEN                   CONTINUE\n         TITLE 'V M C P   ---   PROCESS TSO COMMAND ENTRIES'\n***********************************************************************\n***********************************************************************\n**                                                                   **\n** CHECK FOR SINGLE COMMAND MODE (EITHER BATCH OR TSO WITH PARMS);   **\n** EXIT TO THE CALLER IF THIS MODE IS IN EFFECT. ELSE ISSUE PUTGET   **\n** FOR ANOTHER VM/CP COMMAND. SAVE COMMAND IN OUR WORKAREA, FREE     **\n** THE PUTGET BUFFER, AND GO PROCESS THE COMMAND.                    **\n**                                                                   **\n** REGISTER USE: R0  - SYSTEM, WORK                                  **\n**               R1  - SYSTEM, WORK                                  **\n**               R2  - WORK, COMMUNICATION AREA ADDRESS              **\n**               R3  - WORK                                          **\n**               R14 - SYSTEM, WORK                                  **\n**               R15 - SYSTEM, WORK                                  **\n**                                                                   **\n***********************************************************************\n***********************************************************************\n         SPACE 2\nVM#XCHK  TM    WK#FLAG,WK#FEXIT         SINGLE COMMAND MODE?\n         BO    EXIT#R00                 YES - EXIT TO CALLER\n         SPACE 2\nVM#PUT   NI    WK#FLAG,255-WK#FEXIT     KILL OFF SINGLE COMMAND FLAG\n         TM    WK#FLAG,WK#FTSO          RUNNING UNDER TSO?         U006\n         BNO   VM#WTOR                  NO, USE WTOR               U006\n         SPACE 1\n         PUTGET OUTPUT=(HERALD,SINGLE,MODE),                           +\n               TERMPUT=(ASIS,WAIT,NOHOLD,NOBREAK),TERMGET=(EDIT,WAIT), +\n               MF=(E,WK#IOPL)           PROMPT 'VMCP: ' AND GET REPLY\n         CH    R15,=H'8'                CHECK MAX ALLOWABLE RC\n         BE    EXIT#R00                 EXIT IF ATTN ENTERED\n         BH    VM#ERRP                  TPUT ERROR IF PUTGET ERROR\n         SPACE 2\n         L     R1,WK#PGPB+PGPBIBUF-PGPB GET RETURNED BUFFER ADDR\n         LH    R14,0(,R1)               GET BUFFER LENGTH          U010\n         LR    R0,R14                   SAVE FOR FREEMAIN          U010\n         CH    R14,=H'256'              TOO LONG?                  U010\n         BNH   *+8                      NO - OK                    U010\n         LH    R14,=H'256'              YES - USE MY MAX           U010\n         L     R15,WK#VMCA              -> REPLY BUFFER            U006\n         MVI   0(R15),C' '              CLEAR IT JUST FOR LAUGHS   U010\n         MVC   1(255,R15),0(R15)        ...                        U010\n         BCTR  R14,0                    -1 FOR EX                  U010\n         EX    R14,PTGT#MVC             COPY THE REPLY BUFFER      U010\n*U010    MVC   0(WK#OPRL,R15),0(R1)     MAX LEN DATA TO OUR BUF    U006\n*U010    LH    R0,0(,R1)                GET BUFFER LENGTH\n         O     R0,=XL4'01000000'        SET PROPER SUBPOOL\n         FREEMAIN R,LV=(0),A=(1)        AND FREE THE BUFFER\n         B     VM#GO                    GO PROCESS THIS INPUT\n         SPACE 1\nPTGT#MVC MVC   0(*-*,R15),0(R1)         << EXECUTED >>             U010\n         SPACE 2\nVM#ERRP  TPUTX 'PUTGET ERROR'           TELL USER WHAT HAPPENED\n         B     EXIT#R16                 AND EXIT\n         SPACE 2\nVM#WTOR  MVC   WK#WTOR(WTR#CMDL),WTR#CMD  PREPARE COMMAND WTOR     U006\n         L     R2,WK#VMCA               -> COMMUNICATION           U006\n         LA    R3,4(,R2)                -> COMMAND AREA            U006\n         MVC   0(WK#CMDL,R3),SPACES     CLEAR INPUT AREA           U006\n         WTOR  ,(3),,WK#ECB,MF=(E,WK#WTOR)                         U006\n         WAIT  ECB=WK#ECB                                          U006\n         MVI   WK#ECB,X'00'             UNPOST THE ECB             U006\n         MVC   0(4,R2),=Y(WK#CMDL+4,0)  SET COMMAND LENGTH         U006\n         B     VM#GO                    GO EXECUTE THE COMMAND     U006\n         TITLE 'V M C P   ---   PROCESS VM/CP COMMAND ERROR RETURNS'\n***********************************************************************\n***********************************************************************\n**                                                                   **\n** WE GET HERE IF VM RETURNS AN ERROR CODE. WTO THE ERROR CODE AND   **\n** EXIT IF NOT RUNNING UNDER TSO. OTHERWISE, TPUT THE COMMAND ERROR  **\n** CODE TO THE TERMINAL AND GO CHECK FOR ANOTHER COMMAND.            **\n**                                                                   **\n** REGISTER USE: R14 - BAL REG                                       **\n**                R1 - WORK                                          **\n**                R4 - VM ERROR CODE                                 **\n**                                                                   **\n***********************************************************************\n***********************************************************************\n         SPACE 2\nVM#RERR  LA    R1,WK#WTO                POINT TO ERROR WTO\n         CVD   R4,WK#DBLW               ERROR CODE TO PACKED\n         MVC   WK#WTO+WTO#REPL(14),=C'CP ERROR CODE ' ID THE ERROR\n         OI    WK#DBLW+7,X'0F'          FIX FOR UNPK\n         UNPK  WK#WTO+WTO#REPL+14(3),WK#DBLW+6(2) MAP CODE TO BUFFER\n         MVI   WK#WTO+1,WTO#REPL+14+3   SET WTO LENGTH\n         BAL   R14,WTO#TXT              GO TO BATCH WTO/TSO TPUT\n         SPACE 2\n         B     VM#XCHK                  GO CHECK FOR TERMINATION\n         SPACE 1\n         TITLE 'V M C P   ---   TERMINATION'\n***********************************************************************\n***********************************************************************\n**                                                                   **\n** PROCESS TERMINATIONS HERE. ISSUE ANY REQUIRED ERROR MESSAGES,     **\n** CLEAN UP, AND RETURN TO THE CALLER.                               **\n**                                                                   **\n** REGISTER USE: R14 - WORK                                          **\n**                R0 - SYSTEM,WORK                                   **\n**                R1 - SYSTEM,WORK                                   **\n**                R2 - HOLDS RETURN CODE                             **\n**               R11 - BAL REG                                       **\n**                                                                   **\n***********************************************************************\n***********************************************************************\n         SPACE 2\nEXIT#R00 XR    R2,R2                    SET RC/ALL OK\n         SPACE 2\nEXIT     TM    WK#FLAG,WK#FPGFX         PAGES FIXED?               U006\n         BNO   EXIT01                   NO, THEN DON'T FREE THEM   U006\n         L     R1,WK#VMCA               -> COMMUNICATION AREA      U006\n         LR    R15,R1                   -> COMMUNICATION AREA      U006\n         AH    R15,=Y(WK#VMCL)          -> END OF AREA + 1         U006\n         PGFREE R,A=(1),EA=(15),RELEASE=Y   UNFIX THE STORAGE      U006\n         NI    WK#FLAG,255-WK#FPGFX     CLEAR FIXED PAGES INDIC.   U006\nEXIT01   LA    R1,WORK                  SET ADDR OF AREA TO FREE   U006\n         L     R13,4(,R13)              CALLER'S SAVE AREA\n         FREEMAIN R,LV=WORKL,SP=1,A=(1) FREE VMCP WORKAREA         U006\n         ST    R2,16(,R13)              SET RETCODE FOR RESTORE\n         LM    R14,R12,12(R13)          RESTORE CALLER'S REGISTERS\n         BR    R14                      RETURN TO CALLER\n         SPACE 2\n*  ----  WE GET HERE WITH SOME SORT OF ERROR TO BE LOGGED.\n         SPACE 2\nERR#LOG  XR    R15,R15                  CLEAR FOR IC\n         IC    R15,0(,R1)               GET EXLEN OF ERR TEXT\n         MVC   WK#WTO(WTO#ERRL),WTO#ERR SET ERROR MSG PREFIX\n         CH    R15,=Y(124+4-WTO#ERRL-1) TEXT TOO LONG?\n         MVC   WK#WTO+WTO#ERRL(124+4-WTO#ERRL),1(R1) GET MAX TEXT LEN\n         BNH   *+8                      NO - CONTINUE\n         LH    R15,=Y(124+4-WTO#ERRL-1) ELSE SET MAX TEXTLEN\n         LA    R15,WTO#ERRL+1(,R15)     ADD FOR PREFIX LENGTH/EXLEN\n         LA    R1,WK#WTO                PNT TO WTO FOR WTO#TXT\n         STH   R15,WK#WTO               SET WTO LENGTH\n         BAL   R14,WTO#TXT              GO DO BATCH WTO/TSO TPUT\n         SPACE 2\nEXIT#R16 LA    R2,16                    ERROR RETCODE\n         B     EXIT                     GO EXIT\n         TITLE 'V M C P   ---   HANDLE ENVIRONMENT CHANGES'\n***********************************************************************\n***********************************************************************\n**                                                                   **\n** THESE ROUTINES ENTER AND LEAVE SUPERVISOR STATE.  AT THE SAME     **\n** TIME, THEY ACQUIRE AND RELEASE THE LOCAL LOCK TO PREVENT THE      **\n** POSSIBILITY OF ADDRESS SPACE SWAP MOVING THE FIXED PAGES THAT     **\n** CONTAIN VM/370 COMMUNICATION AREAS.                               **\n**                                                                   **\n** REGISTER USE: R0  - WORK                                          **\n**               R1  - WORK                                          **\n**               R11 - RETURN ADDRESS                                **\n**               R14 - WORK                                          **\n**               R15 - WORK                                          **\n**                                                                   **\n***********************************************************************\n***********************************************************************\n         SPACE 2\nPREPDIAG MODESET MODE=SUP,KEY=ZERO      ENTER SUPVR STATE          U006\n         SPACE 2\nGETLL    SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,  GET LOCAL LOCK    U006+\n               REGS=USE,                USE R14 THRU R1            U006+\n               RELATED=('DISALLOW ADDRESS SPACE SWAP',FREELL)      U006\n         SPACE 2\n         L     R14,PSATOLD              -> TCB                     U006\n         USING TCB,R14                                             U006\n         MODESET EXTKEY=TCB,WORKREG=1   RETURN TO PROBLEM KEY      U006\n         DROP  R14                                                 U006\n         LA    R1,ERR#GLKL              -> ERROR WTO TEXT          U006\n         LTR   R15,R15                  DID WE GET THE LOCK?       U006\n         BNZ   ERR#LOG                  NO - EXIT WITH ERROR       U006\n         SPACE 2\n         BR    R11                      RETURN TO CALLER           U006\n         SPACE 4\nENDDIAG  MODESET EXTKEY=ZERO,WORKREG=1  GET ZERO KEY AGAIN         U006\n         SPACE 2\nFREELL   SETLOCK RELEASE,TYPE=LOCAL,    RELEASE LOCAL LOCK         U006+\n               REGS=USE,                USE R14 THRU R1            U006+\n               RELATED=('ALLOW ADDRESS SPACE SWAP',GETLL)          U006\n         SPACE 2\n         LA    R1,ERR#RLKL              -> ERROR WTO TEXT          U006\n         LTR   R15,R15                  DID WE RELEASE THE LOCK?   U006\n         BNZ   ERR#LOG                  NO - EXIT WITH ERROR       U006\n         SPACE 2\n         MODESET MODE=PROB,KEY=NZERO    BACK TO PROBLEM STATE      U006\n         SPACE 2\n         BR    R11                      RETURN TO CALLER           U006\n         TITLE 'V M C P   ---   CHECK IF COMMAND EXECUTE WTOR TO DO'\n***********************************************************************\n***********************************************************************\n**                                                                   **\n** THIS ROUTINE IS CALLED TO CHECK IF THE CP COMMAND TO BE EXECUTED  **\n** IS 'NICE' AND MAY BE INVOKED WITHOUT ASKING THE USER IF HE IS     **\n** SURE IF HE WANTS TO DO THIS COMMAND. THE TABLE AT LOCATION        **\n** 'CMND#TAB' DEFINES THE 'NICE' COMMANDS WE ALLOW TO BE EXECUTED    **\n** WITHOUT A VALIDATION PASS. EACH TABLE ENTRY CONSISTS OF           **\n** AL1(FULL-COMMAND-LENGTH),AL1(MINIMUM-ABBREVIATION-LENGTH),        **\n** C'COMMAND'.                                                       **\n**                                                                   **\n** REGISTER USE: R14 - WORK                                          **\n**               R15 - WORK                                          **\n**                R0 - WORK                                          **\n**                R1 - WORK                                          **\n**                R2 - INPUT PNTR TO COMMAND/OPERANDS                **\n**                R4 - INPUT LENGTH OF COMMAND/OPERANDS              **\n**               R11 - RETURN ADDR                                   **\n**                                                                   **\n** RETURNS: +0 - COMMAND IS TO BE SKIPPED                            **\n**          +4 - COMMAND IS TO BE PROCESSED                          **\n**                                                                   **\n***********************************************************************\n***********************************************************************\n         SPACE 2\nCMND#CHK LR    R15,R2                   SET ADDRESS OF COMMAND\n         LA    R0,0(,R4)                CLEAR HI BYTE/SET COMMAND LEN\n         SPACE 1\nCMND#LP1 CLI   0(R15),C' '              ENDING BLANK?\n         BE    CMND#LEN                 YES - GO GEN CMND LENGTH\n         LA    R15,1(,R15)              ELSE INCR INDEX PNTR\n         BCT   R0,CMND#LP1              BIF MORE TEXT TO CHECK\n         SPACE 2\nCMND#LEN SLR   R15,R2                   GEN COMMAND LENGTH\n         LR    R0,R15                   SAVE CMND LENGTH\n         LA    R1,CMND#TAB              PNT TO LEGAL COMMAND TABLE\n         BCTR  R15,0                    GEN COMMAND EXLEN\n         XR    R14,R14                  CLEAR FOR IC\n         SPACE 2\nCMND#LP2 CLM   R0,B'0001',0(R1)         USER TEXT TOO LONG?\n         IC    R14,0(R1)                GET LENGTH/THIS ENTRY\n         BH    CMND#NXT                 BIF USER ENTRY TOO LONG\n         CLM   R0,B'0001',1(R1)         USER TEXT TOO SHORT?\n         BL    CMND#NXT                 YES - GO CHECK NEXT ENTRY\n         CLC   0(0,R2),2(R1)            <<< EXECUTED >>>\n         EX    R15,*-6                  USER ENTRY MATCH?\n         BE    4(,R11)                  YES - RET +4 WITH CMND LEGAL\n         SPACE 1\nCMND#NXT LA    R1,1+1(R1,R14)           POINT TO NEXT ENTRY\n         CLI   0(R1),X'FF'              END OF TABLE?\n         BNE   CMND#LP2                 NO - GO CHECK NEXT ENTRY\n         SPACE 2\n*  ----  WE GET HERE WITH THE COMMAND NOT IN THE 'NICE' TABLE.\n         SPACE 2\n         LA    R0,WK#ASK                WTOR REPLY AREA\n         LA    R1,WK#ECB                WTOR COMPLETION ECB\n         LA    R14,0(,R4)               CLEAR HI/GET CMND TEXT LENGTH\n         STM   R0,R1,WK#WTOR            INIT WTOR ADDRESSES\n         MVC   WK#WTOR+8(WTR#MSKL),WTR#MSK GET WTOR PREFIX TEXT\n         CH    R14,=Y(WTORL)            TEXT FIT?\n         MVI   WK#WTOR+0,WK#ASKL        SET WTOR REPLY LENGTH\n         MVC   WK#TXTR(WTORL),0(R2)     PROPAGATE MAX TEXT LENGTH\n         BNH   *+8                      BIF COMMAND TEXT FITS\n         LA    R14,WTORL                ELSE SET MAX POSSIBLE TEXT\n         SPACE 1\n         LA    R14,WTR#MSKL(,R14)       ADD IN PREFIX LENGTH\n         LA    R1,WK#WTOR               PNT TO WTOR TEXT\n         STH   R14,WK#WTOR+8            SET WTOR LENGTH\n         MVC   WK#ASK(WK#ASKL),SPACES   CLEAR INPUT AREA           U006\n         BAL   R14,WTO#TXT              GO HANDLE BATCH/TSO CASE\n         SPACE 2\n         OC    WK#ASK(3),SPACES         FOLD REPLY TO UPPER CASE\n         CLC   WK#ASK(3),=C'YES'        DO THE COMMAND?\n         BE    4(,R11)                  YES - RET +4 TO EXEC COMMAND\n         SPACE 1\n         LA    R1,WTO#SKP               PNT TO COMMAND IGNORED MSG\n         BAL   R14,WTO#TXT              DUMP FOR TSO/BATCH\n         BR    R11                      RET +0 - COMMAND INGNORED\n         TITLE 'V M C P   ---   TSO TPUT/BATCH WTO CHECKS'\n***********************************************************************\n***********************************************************************\n**                                                                   **\n** THIS ROUTINE IS PASSED THE ADDRESS OF A WTO OR A WTOR. IT CHECKS  **\n** IF WE ARE RUNNING UNDER TSO. IF NOT AND A WTO IS PASSED, THE WTO  **\n** IS ISSUED AND THE ROUTINE RETURNS; IF NOT AND A WTOR IS PASSED,   **\n** THE ROUTINE ISSUES THE WTOR, WAITS FOR A REPLY, AND RETURNS TO    **\n** THE CALLER. IF WE ARE RUNNING UNDER TSO, WTOS ARE CONVERTED TO    **\n** TPUTS, THE TPUTS ARE ISSUED, AND THE ROUTINE RETURNS. IF WE       **\n** HAVE A TSO/WTOR ENVIRONMENT, THE WTOR TEXT IS CONVERTED TO A      **\n** TPUT, THE TPUT IS ISSUED, AND A TGET IS ISSUED FOR THE SAME       **\n** BUFFER/LENGTH AS THE WTOR. WHEN THE TGET COMPLETES, THE ROUTINE   **\n** RETURNS TO THE CALLER.                                            **\n**                                                                   **\n** REGISTER USE: R14 - WORK                                          **\n**               R15 - WORK                                          **\n**                R1 - INPUT WTO/WTOR PNTR,WORK                      **\n**                R2 - SAVE PNTR TO WTO/WTOR                         **\n**               R11 - RETURN REGISTER                               **\n**                                                                   **\n** RETURN: +0 - ALWAYS                                               **\n**                                                                   **\n***********************************************************************\n***********************************************************************\n         SPACE 2\nWTO#TXT  STM   R14,R2,12(R13)           SAVE WORK REGS\n         TM    WK#FLAG,WK#FTSO          RUNNING UNDER TSO?\n         LR    R2,R1                    SAVE WTO/WTOR ADDR\n         BZ    WT#JOB                   NO - GO DO WTO/WTOR\n         SPACE 2\n         CLI   0(R2),0                  HAVE A WTO HERE?\n         LH    R0,08(,R2)               ASSUME WTOR/GET LENGTH\n         LA    R1,12+7(,R2)             ASSUME WTOR/GET ADDRESS\n         BNZ   *+12                     BIF WTOR TEXT\n         LH    R0,00(,R2)               GET WTO LENGTH\n         LA    R1,04+7(,R2)             GET WTO ADDR\n         SH    R0,=Y(4+7)               SUB FOR HWORD PREFIX,C'VMCP - '\n         SPACE 1\n         TPUT  (1),(0),R                TPUT THE MSG\n         CLI   0(R2),0                  WTO HERE?\n         BZ    WT#EXIT                  YES - RETURN\n         SPACE 1\n         ICM   R0,B'1111',0(R2)         GET AL1(LEN),AL3(REPLY-ADDR)\n         SRDL  R0,24                    LEN TO LOW BYTE/ADDR TO R1\n         SRL   R1,8                     ADDR TO LOW 3 BYTES\n         MVI   0(R1),0                  NEGATE POSSIBLE FAKE REPLY\n         O     R1,=XL4'80000000'        INDICATE TGET\n         TGET  (1),(0),R                AND DO IT\n         BXLE  R15,R15,WT#EXIT          RETURN IF RETCODE OK\n         CH    R15,=Y(2*8)              ATTN?\n         BE    WT#EXIT                  YES - JUST EXIT\n         SPACE 1\n         TPUTX 'TGET ERROR'             SAY WHAT WENT WRONG\n         LM    R14,R2,12(R13)           RESTORE CALLER'S REGS\n         B     EXIT#R16                 AND TERMINATE\n         SPACE 2\nWT#JOB   WTO   MF=(E,(1))               ISSUE THE WTO/WTOR\n         CLI   0(R2),0                  WTO HERE?\n         L     R2,4(,R2)                ASSUME NO/GET ECB ADDR\n         BE    WT#EXIT                  BIF A WTO/EXIT\n         SPACE 1\n         WAIT  1,ECB=(2)                WAIT FOR COMPLETION\n         MVI   0(R2),0                  UNPOST ECB\n         SPACE 2\nWT#EXIT  LM    R14,R2,12(R13)           RESTORE CALLER'S REGS\n         BR    R14                      RETURN TO CALLER\n         TITLE 'V M C P   ---   TSO STAX EXIT'\n***********************************************************************\n***********************************************************************\n**                                                                   **\n** PROCESS TSO ATTENTIONS HERE. EXIT IF THE TGET RETCODE IS 8        **\n** (INDICATING AN ATTN). ELSE POST TSECB AND RETURN.                 **\n**                                                                   **\n** REGISTER USE: R14 - RETURN REG AT ENTRY                           **\n**               R15 - STAX EXIT RETURN CODE                         **\n**                R1 - STAX EXIT PARM LIST PNTR                      **\n**                R2 - TAIE PNTR                                     **\n**                R3 - HOLDS RETURN ADDR                             **\n**                                                                   **\n** RETURN: TSO - ALWAYS                                              **\n**                                                                   **\n***********************************************************************\n***********************************************************************\n         SPACE 2\nSTAXEXIT L     R13,8(,R1)               SET PROGRAM WORKAREA ADDR\n         XR    R15,R15                  SET EXIT RETURN CODE\n         L     R2,0(,R1)                GET TAIE ADDR\n         CLI   TAIETGET-TAIE(R2),8      ATTN DURING TGET?\n         BER   R14                      YES - RETURN DIRECTLY\n         SPACE 2\n         LR    R3,R14                   ELSE SAVE RETURN ADDR\n         POST  WK#ECB                   WAKE UP THE CP\n         XR    R15,R15                  RESET RETURN CODE\n         BR    R3                       AND RETURN TO TSO\n         TITLE 'V M C P   ---   STATIC DATA'\nHERALD   DC    F'1',A(*+4),AL2(10,0),C' VMCP:'   PUTGET PROMPT     U006\n*WTO#MSK DC    AL2(0,0),C'VMCP - COMMAND--> ' WTO PREFIX\n*WTO#MSKL EQU  *-WTO#MSK                LENGTH OF PREFIX\nWTO#REP  DC    AL2(0,0),C'VMCP - REPLY--> ' WTO PREFIX\nWTO#REPL EQU   *-WTO#REP                LENGTH OF PREFIX\nWTO#ERR  DC    AL2(0,0),C'VMCP - ERROR: ' ERROR WTO PREFIX\nWTO#ERRL EQU   *-WTO#ERR                LENGTH OF PREFIX\nWTR#CMD  WTOR  'VMCP - ENTER VM/370 COMMAND',,WK#CMDL,MF=L         U006\nWTR#CMDL EQU   *-WTR#CMD                                           U006\nWTR#MSK  DC    AL2(121+4,0)\n         DC    C'VMCP - REPLY ''YES'' TO PROCESS COMMAND --> '\nWTR#MSKL EQU   *-WTR#MSK                LENGTH OF PREFIX\nSPACES   DC    CL120' '                                            U006\n         SPACE 2\nERR#VM   WTXT  'NOT RUNNING UNDER VM'\nERR#PGFX WTXT  'PGFIX SVC FAILED'                                  U006\nERR#GLKL WTXT  'SETLOCK OBTAIN,TYPE=LOCAL FAILED'                  U006\nERR#RLKL WTXT  'SETLOCK RELEASE,TYPE=LOCAL FAILED'                 U006\nERR#D0   WTXT  'DIAGNOSE CODE 00 FAILED'\nERR#BUF  WTXT  'INVALID BUFFER DATA'\nWTO#SKP  WTO   'VMCP - COMMAND IGNORED',MF=L\n*WTO#LOG WTO 'VMCP - LOG IN SYSTEM PROGRAMMER''S LOG',\n*U003          ROUTCDE=(2,9,11),MF=L\nWTO#AC1  WTO   'VMCP - INVALID USAGE OF VMCP BY TSO USER XXX',         +\n               ROUTCDE=(2,9,11),MF=L                               U003\nWTO#AC1L EQU   *-WTO#AC1                LENGTH OF WTO TEXT\nWTO#AC01 EQU   4+41                     OFFSET TO TSO USER LOC\nWTO#AC2  WTO   'VMCP - INVALID USAGE OF VMCP BY JOB 12345678',         +\n               ROUTCDE=(2,9,11),MF=L                               U003\nWTO#AC2L EQU   *-WTO#AC2                LENGTH OF WTO TEXT\nWTO#AC02 EQU   4+36                     OFFSET TO JOBNAME LOC\n         SPACE 2\nCMND#TAB CTAB  CHANGE,2,                                               +\n               COUPLE,6,                                               +\n               CLOSE,1,                                                +\n               DISPLAY,1,                                              +\n               DUMP,4,                                                 +\n               INDICATE,3,                                             +\n               MESSAGE,1,                                              +\n               MSG,1,                                                  +\n               ORDER,3,                                                +\n               QUERY,1,                                                +\n               RESET,5,                                                +\n               SMSG,2,                                                 +\n               SPOOL,2,                                                +\n               TAG,2\n         SPACE 2\n         LTORG\n         TITLE 'V M C P   ---   PROGRAM WORKAREA'\nWORK     DSECT                          WORKAREA\n         DS    9D                       SAVEAREA\nWK#DBLW  DS    D                        CVD DBLWORD\nWK#TRT   DS    (256/8)D                 TRT TABLE/X'15' SCAN\nWK#TRTL  EQU   *-WK#TRT                 LENGTH FOR CLEARING\nWK#XC    EQU   *                        START OF AREA TO CLEAR\nWK#STAX  STAX  STAXEXIT,REPLACE=NO,DEFER=NO,MF=L\nWK#VMCA  DS    A                        ADDRESS OF REPLY AREA      U006\nWK#FLAG  DS    F                        CONTROL FLAGS\nWK#FTSO  EQU   X'80'                    RUNNING AS A TSO TASK\nWK#FBUF  EQU   X'40'                    VM SUPPORTS CMND REPLY TO BUF\nWK#FEXIT EQU   X'20'                    EXIT AFTER DOING ONE COMMAND\nWK#FPGFX EQU   X'10'                                               U006\nWK#PGPB  DS    4F                       PUTGET PARM BLOCK\nWK#IOPL  DS    4F                       PUTGET I/O BLOCK\nWK#ECB   DS    F                        ECB FOR STAX POST\nWK#XCL   EQU   *-WK#XC                  LENGTH OF AREA TO CLEAR\n*WK#PRE  DS    CL(WTO#MSKL)             WORK BUF FOR CMND WTO PREFIX\n         SPACE 1\nWK#WTO   DS    0H                       COMMAND/REPLY WTO AREA\n*U004    DS    CL(WTO#MSKL)             COMMAND WTO PREFIX\n*U004    ORG   WK#WTO                   REDEFINE PREFIX\n         DS    CL(WTO#REPL)             REPLY WTO PREFIX\n         ORG   ,                        RESET TO LONGEST LENGTH\nWTOL     EQU   124+4-(*-WK#WTO)         MAX WTO TEXT SUFFIX\nWK#TXT   DS    CL(WTOL),C               WTO BUFFER AREA + OVERFLOW\n         SPACE 1\n         ORG   WK#WTO                   REUSE WTO AREA FOR WTOR    U006\nWK#WTOR  WTOR  'X',WK#ASK,WK#ASKL,WK#ECB,MF=L FOR CMND EXEC REQUEST\n         ORG   WK#WTOR                  REDEFINE AREA              U006\n         DS    CL(WTR#CMDL)             ROOM FOR COMMAND WTOR      U006\n         ORG   WK#WTOR+8                REDEFINE AREA\n         DS    CL(WTR#MSKL)             WTOR PREFIX\nWTORL    EQU   121+12-(*-WK#WTOR)       MAX WTOR TEXT SUFFIX\nWK#TXTR  DS    CL(WTORL),4X,C           WTOR BUFFER + CODES + OVERFLOW\nWK#ASK   DS    CL20                     WTOR REPLY AREA            U006\nWK#ASKL  EQU   *-WK#ASK                 LENGTH OF WTOR REPLY AREA  U006\n         ORG   ,                        GET OUT OF REDEFINE        U006\n         SPACE 1\nPAGELEN  EQU   4*1024                   DEFINE 4K PAGE LENGTH\n         ORG   WORK+(*-WORK+PAGELEN-1)/PAGELEN*PAGELEN  PAGE BNDRY U006\nWK#VMC   DS    CL(PAGELEN)              1 PAGE COMMUNICATION AREA  U006\nWK#VMCL  EQU   *-WK#VMC                 LENGTH OF REPLY\nWK#OPRL  EQU   256                      MAX ALLOWABLE OPERAND LENGTH\nWK#STAT  EQU   WK#VMC+WK#OPRL+8         DIAG 00 RETURN (DW ALIGN)  U006\nWK#STATL EQU   160                      DIAGNOSE 00 AREA LENGTH    U006\nWK#CMDL  EQU   120                      CMD WTOR REPLY LENGTH      U006\n         DS    0D                       ALIGN FOR GETMAIN\nWORKL    EQU   *-WORK                   LENGTH FOR GETMAIN\n         TITLE 'V M C P   ---   SYSTEM  DSECTS'\n         PRINT NOGEN\n         SPACE 4\n         IKJCPPL ,\n         SPACE 4\n         IKJPSCB ,\n         SPACE 1\n*U007    GISPSCB ,                                                 U006\n         SPACE 4\n         IKJIOPL ,\n         SPACE 4\n         IKJPGPB ,\n         SPACE 4\n         IKJRLGB ,\n         SPACE 4\n         IEZJSCB ,\n         SPACE 4\n         IKJTAIE ,\n         SPACE 4\n         IKJTCB ,\n         SPACE 4\n         IHAPSA ,                                                  U006\n         SPACE 4\n         IHAASCB ,                                                 U002\n         SPACE 4\nCSCB     DSECT                                                     U002\n         IEECHAIN ,                                                U002\n         SPACE 4\n         END   VMCP\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WHICH": {"ttr": 14084, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x88\\x13o\\x00\\x91\\x14o!X\\x01C\\x00\\xdd\\x00g\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1988-05-15T00:00:00", "modifydate": "1991-05-26T21:58:00", "lines": 323, "newlines": 221, "modlines": 103, "user": "LDW"}, "text": "WHICH    TITLE '-----  Find which library a module is in -----'\n***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1988 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.                                     *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1, with DFP 3.1),  *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc-oberon!LDW (last resort)                           *\n*                                                                     *\n*          (213) 743-5391 (direct -- 11 am to 7 pm Pacific time)      *\n*          (213) 743-2957 (msgs)                                      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, or 714.  Sorry.                                       *\n*                                                                     *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*   Program name:  WHICH                                              *\n*                                                                     *\n*   Purpose:       Do a BLDL and then interpret the results and       *\n*                  display the library name.  Note that this program  *\n*                  runs only under MVS/XA because it needs to use     *\n*                  the table of linklist dsnames.                     *\n*                                                                     *\n*   Author:        Leonard D. Woren                                   *\n*                                                                     *\n*   Date:          May 15, 1988                                       *\n*                                                                     *\n*   Attributes:    AMODE=31                                           *\n*                                                                     *\n*   Installation:  University of Southern California                  *\n*                                                                     *\n*   Updates:                                                          *\n*      26May91  U001 LDW - Check for module in LPA                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\nWHICH    OSENTER  EXIT=LEAVE,RC=(R15),AMODE=31,RMODE=24,               $\n               GETMAIN=(WORKLEN,WORKD),PL=(IO),                        $\n               PARMREG=R2,ENV=(CP,SIM),LENREG=R14,ADDRREG=R15\n         MVC   BUFFOLD(4),=F'1'         NUMBER OF OUTPUT SEGMENTS\n         LA    R1,BUFFLEN               -> PUTLINE BUFFER\n         ST    R1,BUFFOLD+4\n         XC    BUFFOFF(2),BUFFOFF       OFFSET\n         MVI   BUFFMID,C' '             INIT MSGID\n         LTR   R14,R14                  any parm?\n         BP    HAVEPARM                 yes - continue\n         MVC   BUFFER(24),=C'WHICH - operand required'\n         MVC   BUFFLEN,=H'29'           set length\n         BAL   R11,PUTLINE\n         LA    R15,12                   set rc\n         B     LEAVE\n         SPACE 2\nHAVEPARM CH    R14,=H'8'                parm length ok?\n         BNH   PARMOK                   yes\n         MVC   BUFFER(24),=C'WHICH - operand too long'\n         MVC   BUFFLEN,=H'29'           set length\n         BAL   R11,PUTLINE\n         LA    R15,12                   set rc\n         B     LEAVE\n         SPACE 2\nPARMMVC  OC    MEMBER(*-*),0(R15)       << executed >>\nPARMOK   BCTR  R14,0                    -1 for ex\n         MVC   MEMBER,=CL8' '           blank the target\n         EX    R14,PARMMVC              save member name, in upper case\n         MVC   BUFFER(8),MEMBER\n         LM    R0,R1,MEMBER             get parms for routine\n         L     R3,CVTPTR                -> CVT\n         L     R15,CVTLPDSR-CVTMAP(,R3) -> LPA search routine\n         BALR  R14,R15                  call it\n         B     FOUNDLPA              +0 module is in LPA\n*                                    +4 module not in LPA\n         MVC   BLDL(4),=H'1,14'         number of entries, length\n*\n         BLDL  0,BLDL                   try to find the module\n*\n         LTR   R15,R15                  find it?\n         BNZ   NOT$LOAD                 no - try for a clist in SYSPROC\n         CLI   Z,0                      private library?\n         BNE   *+8                      no - ok\n         EX    0,*                      yes - shouldn't happen\n         CLI   Z,1                      link library?\n         BE    LINKLIST                 yes\n         MVC   BUFFER(8),MEMBER\n         MVC   BUFFER+09(11),=C' K=xx, Z=xx'\n         HEX   BUFFER+12,K,LEN=1,BYTE=C','\n         HEX   BUFFER+18,Z,LEN=1\n         MVC   BUFFLEN,=H'25'           set length\n*%       BAL   R11,PUTLINE              %debug\n         NOP   PUTLINE                  %debug\n         L     R15,PSATOLD-PSA          -> current TCB\n         SR    R0,R0                    clear for ic\n         IC    R0,Z                     get library indicator\n         SH    R0,=H'2'                 adjust\n         BNM   *+8                      continue if ok\n         EX    0,*                      logic error\n         BZ    GET$DCB                  skip loop if current task's jlb\n         L     R15,TCBOTC-TCB(,R15)     -> parent\n         BCT   R0,*-8                   go up the TCB tree\n         SPACE 1\nGET$DCB  L     R4,TCBJLB-TCB(,R15)      -> joblib DCB\n         BAL   R11,FIND$DSN             get the dsn\n         MVC   BUFFER,BLANKS\n         MVC   BUFFER(8),MEMBER\n         MVC   BUFFER+9(31),=C'found in tasklib-nnn (xxxxxxxx)'\n         SR    R0,R0                    clear for ic\n         IC    R0,Z                     get library indicator\n         SH    R0,=H'2'                 adjust\n         CVD   R0,DWD\n         OI    DWD+7,X'0F'              remove sign\n         UNPK  BUFFER+26(3),DWD         put concatenation number in msg\n         MVC   BUFFER+31(8),DDNAME\n         MVC   BUFFER+41(44),0(R1)      fill in dsn\n         MVC   BUFFLEN,=H'90'\n         CLI   Z,2                      tasklib for this task?\n         BNE   *+4+6+6\n         MVC   BUFFER+25(56),BUFFER+29  shift out the -nnn\n         MVC   BUFFLEN,=H'86'           and adjust length\n         BAL   R11,PUTLINE\n         SR    R15,R15                  set rc\n         B     LEAVE\n         SPACE 2\nLINKLIST MVC   BUFFER(8),MEMBER\n         MVC   BUFFER+8(24),=C' is in linklist library '\n         MVC   BUFFER+32(44),BLANKS\n         HEX   BUFFER+32,K,LEN=1\n         SR    R15,R15                  clear for ic\n         IC    R15,K                    get concatenation number\n         L     R1,CVTPTR                -> cvt\n         L     R2,CVTLLTA-CVT(,R1)      -> link list table\n         CLC   =C'LLT ',0(R2)           id there?\n         BE    *+8                      yes - continue\n         EX    0,*\n         C     R15,4(,R2)               K too high?\n         BNH   *+8                      no - ok\n         EX    0,*                      yes - die\n*\n         MH    R15,=H'45'               multiply by entry length\n         LA    R15,8(R15,R2)            -> dsname\n         MVC   BUFFER+32(44),1(R15)\n         MVC   BUFFLEN,=H'81'\n         BAL   R11,PUTLINE\n         SR    R15,R15                  set rc\n         B     LEAVE\n         SPACE 3\nFOUNDLPA MVC   BUFFER,BLANKS\n         MVC   BUFFER(8),MEMBER\n         MVC   BUFFER+9(12),=C'found in LPA'\n         MVC   BUFFLEN,=H'26'           and adjust length\n         BAL   R11,PUTLINE\n         SR    R15,R15                  set rc\n         B     LEAVE\n         SPACE 3\n*--- try to find a clist with this name\nNOT$LOAD OPEN  SYSPROC\n         TM    SYSPROC+48,X'10'         did it open?\n         BZ    NOTFOUND                 no - so the module is not found\n*\n         BLDL  SYSPROC,BLDL\n*\n         LTR   R15,R15                  did it work?\n         BNZ   NOTFOUND                 nope - module not found\n         CLI   Z,0                      private library?\n         BE    *+8                      yes - ok\n         EX    0,*                      no - logic error\n         LA    R4,SYSPROC               -> DCB\n         BAL   R11,FIND$DSN\n         MVC   BUFFER(8),MEMBER\n         MVC   BUFFER+8(31),=C' is a clist in SYSPROC library '\n         MVC   BUFFER+39(44),0(R1)      dsname\n         MVC   BUFFLEN,=H'88'\n         BAL   R11,PUTLINE\n         LA    R15,4                    set rc\n         B     LEAVE\n         SPACE 2\nNOTFOUND MVC   BUFFER(25),=C'module xxxxxxxx not found'\n         MVC   BUFFER+7(8),MEMBER\n         MVC   BUFFLEN,=H'30'\n         BAL   R11,PUTLINE\n         LA    R15,8                    set rc\n         B     LEAVE\n         SPACE 3\n         USNGX IHADCB,R4\nFIND$DSN SR    R0,R0                    clear for icm\n         ICM   R0,B'0001',K             get concatenation number\n*  locate the TIOT DD entry for this concatenation\n         L     R15,PSATOLD-PSA          -> current TCB\n         L     R15,TCBTIO-TCB(,R15)     -> TIOT\n         AH    R15,DCBTIOT              -> entry for this DCB\n         USNGX TIOENTRY,R15\n         MVC   DDNAME,TIOEDDNM          save ddname for later\n         LTR   R0,R0                    first concat #?\n         BNP   CONCATOK                 yes - skip loop\n         SR    R14,R14                  clear for icm\nCONCATLP ICM   R14,B'0001',TIOELNGH     get length of this entry\n         AR    R15,R14                  -> next entry\n         BCT   R0,CONCATLP\n         SPACE 2\n*  r15 -> TIOT DD entry for desired dataset\nCONCATOK SR    R1,R1                    clear for icm\n         ICM   R1,B'0111',TIOEJFCB      -> JFCB prefix\n         LA    R1,16(,R1)               -> JFCB\n         BR    R11                      return with dsn ptr in R1\n         SPACE 1\n         DROPX R4,R15                   IHADCB, TIOENTRY\n         SPACE 3\nPUTLINE  PUTLINE  OUTPUT=BUFFOLD,PARM=PUTLINEC,MF=(E,IOPL)\n         SPACE 1\n         BR    R11\n         SPACE 2\n         LTORG ,\n         SPACE 2\nPUTLINEC PUTLINE  MF=L\n         SPACE 2\nHEXTAB   HEXTAB  DUAL=NO\n         SPACE 2\nBLANKS   DC    CL131' '\n         SPACE 3\nSYSPROC  DCB   DDNAME=SYSPROC,MACRF=E,DEVD=DA\n         SPACE 3\nWORKD    DSECT                          RESUME\nDWD      DS    D                        CVD workarea\nDDNAME   DS    CL8                      filled in by FIND$DSN\nBLDL     DS    2H                       entry number, length\nMEMBER   DS    CL8\nTTR      DS    XL3\nK        DS    X\nZ        DS    X\n         SPACE 2\nBUFFOLD  DS    2F                       OUTPUT LINE DESCRIPTOR\nBUFFLEN  DS    H                        PRINTLINE LENGTH\nBUFFOFF  DS    H                        OFFSET\nBUFFMID  DS    C                        delim after msgid\nBUFFER   DS    CL131                    OUTPUT BUFFER\nWORKLEN  EQU   *-WORKD                  LENGTH TO GETMAIN\n         SPACE 2\n         PRINT NOGEN\n         SPACE 2\n         IHAPSA  ,\n         SPACE 2\n         CVT   DSECT=YES\n         SPACE 2\n         IEFTIOT1  ,\n         SPACE 2\n         IKJTCB  ,\n         SPACE 2\n         DCBD  ,\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WHOAMI": {"ttr": 14090, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x18\\x00\\x00\\x00y\\x16?\\x00\\x92\\t\\x0f S\\x01\\x8b\\x00P\\x01\\x87\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.24", "flags": 0, "createdate": "1979-06-12T00:00:00", "modifydate": "1992-03-30T20:53:00", "lines": 395, "newlines": 80, "modlines": 391, "user": "LDW"}, "text": "***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1991 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please see reason mentioned       *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please see reason        *\n*        mentioned below.)                                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1.3, w/DFP 3.2),   *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw                                                *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nWHOAMI  TITLE '---  DISPLAY TSO USER ID AND OPERATING ENVIRONMENT  ---'\n*---------------------------------------------------------------------*\n*                                                                     *\n*   PROGRAM NAME:  WHOAMI                                             *\n*                                                                     *\n*   PURPOSE:       DISPLAY TSO USERID, PREFIX, PROC, CPU, ETC.        *\n*                                                                     *\n*   AUTHOR:        STEVE MCGINTY???                                   *\n*                                                                     *\n*   ATTRIBUTES:    APF AUTHORIZED (TO ACCESS TERMINAL NAME)           *\n*                                                                     *\n*   UPDATES:                                                          *\n*                                                                     *\n*      06Apr91  U005 LDW - Show PIE MultiTSO session number           *\n*                                                                     *\n*      22SEP86  U004 LDW - USE PUTLINE INSTEAD OF TPUT                *\n*                        - USE OSENTER                                *\n*                        - INTERCHANGE CPU MODEL AND SMFID FIELDS     *\n*                        - USE LOWER CASE IN MESSAGES                 *\n*                                                                     *\n*      04/02/86 U003 LDW - CHANGE 'UNDER VM/370' TO 'UNDER VM'        *\n*                        - ONLY DISPLAY ABOVE MESSAGE IF USER HAS     *\n*                             OPERATOR AUTHORITY                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n         MACRO\n&LABEL   MCON  &MSG\n         LCLA  &L\n&L       SETA  K'&MSG-2\n&LABEL   DC    AL1(&L),C&MSG\n         MEND\n         SPACE 3\nWHOAMI   OSENTER  PARMREG=LISTPTR,ENV=(CP,SIM),PL=(IO),            U004$\n               EXIT=LEAVE,RC=0,GETMAIN=(WORKLEN,WORKD)             U004\n         BAL   LINK,CLRMSG              INITIALIZE MESSAGE AREA\n         MVC   BUFFOLD(4),=F'1'         NUMBER OF OUTPUT SEGMENTS  U004\n         LA    R1,BUFFLEN               -> PUTLINE BUFFER          U004\n         ST    R1,BUFFOLD+4                                        U004\n         XC    BUFFOFF(2),BUFFOFF       OFFSET                     U004\n         MVI   BUFFER,C' '              INIT MSGID                 U004\n         SPACE 2\n*  USER ID\n         LA    POINTER,MSG01            'YOU ARE '\n         BAL   LINK,MCON                MOVE CONSTANT TO MESSAGE\n         L     POINTER,CPPLPSCB         POINT TO PSCB\n         USING PSCB,POINTER\n         MVC   USERLEN,PSCBUSRL         GET LENGTH OF USER ID\n         MVC   USERDATA,PSCBUSER        GET USER ID DATA\n         TM    PSCBATR1,PSCBCTRL        OPERATOR AUTHORITY?        U003\n         BZ    *+8                      NO - SKIP                  U003\n         OI    FLAGS,FOPER              YES - REMEMBER             U003\n         DROP  POINTER\n         LA    POINTER,USERID\n         BAL   LINK,MCON                MOVE USERID TO MESSAGE\n         SPACE 2\n*  DSNAME PREFIX\n         L     POINTER,CPPLUPT          POINT TO UPT\n         USING UPT,POINTER\n         MVC   PRFXLEN,UPTPREFL         GET PREFIX LENGTH\n         MVC   PRFXDATA,UPTPREFX        GET PREFIX DATA\n         DROP  POINTER\n         IC    COUNT,USERLEN            GET LENGTH FOR COMPARE\n         EX    COUNT,CPCLC              COMPARE LENGTH AND DATA\n         BE    IDOK                     USERID = PREFIX\n         LA    POINTER,MSG02A           ' ('\n         BAL   LINK,MCON                MOVE PAREN INTO MESSAGE\n         CLI   PRFXLEN,0                NULL PREFIX?\n         BE    CP01                     YES, SPECIAL CASE.\n         LA    POINTER,MSG03A           'MASQUERADING AS '\n         BAL   LINK,MCON                MOVE CONSTANT TO MESSAGE\n         LA    POINTER,PREFIX\n         BAL   LINK,MCON                MOVE PREFIX TO MESSAGE\n         B     CP02                     CONTINUE MESSAGE\nCPCLC    CLC   USERID(0),PREFIX         << EXECUTED >>\nCP01     LA    POINTER,MSG03B           'INCOGNITO'\n         BAL   LINK,MCON                MOVE CONSTANT TO MESSAGE\nCP02     LA    POINTER,MSG04            ')'\n         BAL   LINK,MCON                MOVE CONSTANT TO MESSAGE\n         SPACE 2\n*  TERMINAL NAME (IF WE CAN GET TO IT)\nIDOK     L     AUXPTR,X'220'            -> ASCB\n         L     AUXPTR,60(,AUXPTR)       -> TSB (FETCH PROTECTED)\n         LTR   AUXPTR,AUXPTR            ANY?\n         BZ    SKIPTERM                 NO - NO TERMINAL NAME TO DISP\n         SPACE 1\n         TESTAUTH  FCTN=1               CAN WE DO THIS?\n         SPACE 1\n         LTR   R15,R15                  WELL?\n         BNZ   SKIPTERM                 NO - SO DON'T\n         SPACE 1\n         MODESET  KEY=ZERO              SET PROTECT KEY = 0\n         SPACE 1\n         UNPK  LINE-1(5),82(3,AUXPTR)   GET THE LINE ADDRESS\n         MVC   TERMID,104(AUXPTR)       AND THE TERMINAL NAME\n         SPACE 1\n         MODESET  KEY=NZERO             RESTORE PROBLEM KEY\n         SPACE 1\n         LA    POINTER,MSG08            ' ON TERMINAL '\n         BAL   LINK,MCON                MOVE CONSTANT TO MESSAGE\n         LA    POINTER,TERMID           POINT TO TERMINAL ID\n         LA    AUXPTR,TERMID+7          POINT TO END OF TERMID\nTID01    CLI   0(AUXPTR),C' '           END OF TERMID?\n         BNE   TID02                    YES\n         BCT   AUXPTR,TID01             DECREMENT AND LOOP\nTID02    LA    COUNT,1(,AUXPTR)\n         SR    COUNT,POINTER            SET ACTUAL LENGTH\n         BAL   LINK,MVAR                MOVE TERMID TO MESSAGE\n         SPACE 2\n*  LINE ADDRESS (IF WE CAN GET TO IT)\n         TR    LINE,HEXTAB              MAKE IT REAL HEX\n         CLC   =C'000',LINE             ANYTHING HERE?\n         BE    SKIPTERM                 NO - SO SKIP IT\n         LA    POINTER,MSG09            ' ON LINE '\n         BAL   LINK,MCON                MOVE CONSTANT TO MESSAGE\n         LA    POINTER,LINE             POINT TO LINE\n         LA    COUNT,3                  LENGTH\n         BAL   LINK,MVAR                MOVE LINE TO MESSAGE\n         SPACE 2\n*  SMF CPUID                                                       U004\nSKIPTERM LA    POINTER,MSG05            ' LOGGED ONTO '\n         BAL   LINK,MCON                MOVE CONSTANT TO MESSAGE\n         L     POINTER,16               -> CVT                     U004\n         L     POINTER,196(,POINTER)    -> SMCA                    U004\n         LA    POINTER,16(,POINTER)     -> SMF ID                  U004\n         LR    R15,POINTER              SAVE PTR FOR LATER TEST    U004\n         LA    COUNT,4                  LEN OF SMF ID FIELD        U004\n         BAL   LINK,MVAR                MOVE SMF ID TO MESSAGE     U004\n         SPACE 2\n*  CPU MODEL NUMBER (IF DIFFERENT FROM SMFID)                      U004\n         L     POINTER,520              LOCATE THE PCCA\n         LA    POINTER,12(,POINTER)     POINT TO CPU TYPE\n         CLC   0(4,POINTER),0(R15)      IS CPU MODEL = SMFID?      U004\n         BE    CHECKVM                  YES, SKIP MESSAGE          U004\n         LR    R15,POINTER              PRESERVE MODEL POINTER     U004\n         LA    POINTER,MSG02B           ' (THE'                    U004\n         BAL   LINK,MCON                MOVE CONSTANT TO MESSAGE   U004\n         LR    POINTER,R15              RESTORE MODEL POINTER      U004\n         LA    COUNT,4                  ASSUME FOUR BYTES\n         CLI   0(POINTER),C'0'          LEADING ZERO?\n         BNE   CPUOK                    NO, OK AS IS.\n         LA    POINTER,1(,POINTER)      YES, POINT NO NEXT CHAR\n         BCTR  COUNT,0                  REDUCE LENGTH\nCPUOK    BAL   LINK,MVAR                MOVE CPU TYPE TO MESSAGE\n         LA    POINTER,MSG04            ')'                        U001\n         BAL   LINK,MCON                CLOSE LIST                 U001\n         SPACE 2\n*  VM/370\nCHECKVM  TM    FLAGS,FOPER              OPERATOR AUTHORITY?        U001\n         BZ    NOTVM                    NO - SKIP THIS CHECK       U001\n         L     POINTER,520              -> PCCA (AGAIN)\n         CLC   =C'FF',4(POINTER)        IS THIS VM?\n         BNE   NOTVM                    NO - SKIP\n         LA    POINTER,MSG06            ' (UNDER VM)'\n         BAL   LINK,MCON                MOVE VM INDICATION TO MESSAGE\n         SPACE 2\n*  LOGON PROC (ACTUALLY STEPNAME)\nNOTVM    LA    POINTER,MSG07            ' WITH PROC '\n         BAL   LINK,MCON                MOVE CONSTANT TO MESSAGE\n         L     POINTER,16               POINT TO CVT\n         L     POINTER,0(,POINTER)      POINT TO PSAAOLD\n         L     POINTER,8(,POINTER)      POINT TO CURRENT ASCB\n         L     POINTER,56(,POINTER)     POINT TO CSCB\n         LA    POINTER,16(,POINTER)     POINT TO CHCLS (PROC NAME)\n         LA    AUXPTR,7(,POINTER)       POINT TO END OF PROC NAME\nPN01     CLI   0(AUXPTR),C' '           END OF PROC NAME?\n         BNE   PN02                     YES\n         BCT   AUXPTR,PN01              DECREMENT AND LOOP\nPN02     LA    COUNT,1(,AUXPTR)\n         SR    COUNT,POINTER            SET ACTUAL LENGTH\n         BAL   LINK,MVAR                MOVE PROC NAME TO MESSAGE\n         SPACE 2\n*  END THE SENTENCE\n         LA    POINTER,MSG10            '.'\n         BAL   LINK,MCON                MOVE CONSTANT TO MESSAGE\n         SPACE 2\n*  See if running under Pie/MultiTSO\n         MVC   BLDLLIST(4),=H'1,64'     number and length          U005\n         MVC   BLDLLIST+4(8),=CL8'PIECHECK'  module name           U005\n         BLDL  0,BLDLLIST               try to find PIECHECK       U005\n         LTR   R15,R15                  do we have it?             U005\n         BNZ   NO$PIE                   no - skip                  U005\n         XC    LINKSFL(LINKSFLL),LINKSFL  clear parm list          U005\n         SR    R1,R1                    I dunno why i need this    U005\n         LINK  DE=BLDLLIST+4,SF=(E,LINKSFL)  call PIECHECK         U005\n         LTR   R15,R15                  running under PIE?         U005\n         BZ    NO$PIE                   no - skip                  U005\n         STC   R15,PIEID                yes - save session id      U005\n         LA    POINTER,MSG11            'Active PIE session is '   U005\n         BAL   LINK,MCON                MOVE CONSTANT TO MESSAGE   U005\n         LA    COUNT,1                  length                     U005\n         LA    POINTER,PIEID            address of value           U005\n         BAL   LINK,MVAR                move pid sess id to msg    U005\n         LA    POINTER,MSG10            '.'                        U005\n         BAL   LINK,MCON                MOVE CONSTANT TO MESSAGE   U005\n         SPACE 2\nNO$PIE   BAL   LINK,WMSG                WRITE THIS MESSAGE\n         B     LEAVE                    ALL DONE                   U004\n         SPACE 3\n* MOVE CONSTANT TEXT INTO MESSAGE\nMCON     SR    COUNT,COUNT              PREPARE FOR IC\n         IC    COUNT,0(,POINTER)        GET LENGTH\n         LA    POINTER,1(,POINTER)      POINT TO REAL TEXT\n         SPACE 1\n* MOVE VARIABLE TEXT INTO MESSAGE\nMVAR     LR    AUXPTR,COUNT             GET REQUESTED LENGTH\n         A     AUXPTR,MSGAPTR           COMPUTE NEW END\n         C     AUXPTR,MSGALIM           IS IT GONNA FIT?\n         BNH   *+8                      YES, LIVE ON.\n         EX    0,*                      DIDN'T FIT;  DIE (0C3).\n         L     AUXPTR,MSGAPTR           FIND NEXT CHARACTER\n         BCTR  COUNT,0                  PREPARE FOR EX\n         EX    COUNT,MVMVC              MOVE THE DATA\n         LA    AUXPTR,1(COUNT,AUXPTR)   POINT PAST NEW STRING\n         ST    AUXPTR,MSGAPTR           SAVE IT FOR POSTERITY\n         BR    LINK                     RETURN TO THE POOR TURKEY\n         SPACE 1\nMVMVC    MVC   0(0,AUXPTR),0(POINTER)   << EXECUTED >>\n         SPACE 3\nWMSG     L     COUNT,MSGAPTR            FIND END OF MESSAGE\n         LA    POINTER,MSGAREA          POINT TO START OF MESSAGE\n         SR    COUNT,POINTER            COMPUTE LENGTH OF MESSAGE\n         CH    COUNT,=H'78'             IS IT TOO LONG?\n         BNH   WM03                     NO, WRITE IT AS IS\n         LA    AUXPTR,MSGAREA+78\nWM01     CLI   0(AUXPTR),C' '           LOOK FOR A SPACE\n         BE    WM02\n         BCT   AUXPTR,WM01\nWM02     LR    COUNT,AUXPTR\n         SR    COUNT,POINTER            LENGTH OF FIRST LINE\n         LA    R0,4+1(,COUNT)           GET BUFFER LENGTH          U004\n         STH   R0,BUFFLEN               SET LENGTH FOR PUTLINE     U004\n         MVC   BUFFER+1(79),0(POINTER)  MOVE TOO MUCH, WHO CARES?  U004\n         PUTLINE  OUTPUT=BUFFOLD,PARM=PUTLINEC,MF=(E,IOPL)         U004\n         SPACE 1\n         L     COUNT,MSGAPTR            FIND END OF MESSAGE\n         LA    POINTER,1(,AUXPTR)       FIND START OF SECOND LINE\n         SR    COUNT,POINTER            FIGURE LENGTH OF SECOND LINE\nWM03     LA    R0,4+1(,COUNT)           GET BUFFER LENGTH          U004\n         STH   R0,BUFFLEN               SET LENGTH FOR PUTLINE     U004\n         MVC   BUFFER+1(79),0(POINTER)  MOVE TOO MUCH, WHO CARES?  U004\n         PUTLINE  OUTPUT=BUFFOLD,PARM=PUTLINEC,MF=(E,IOPL)         U004\n         SPACE 1\nCLRMSG   LA    POINTER,MSGAREA          INITIALIZE DATA POINTER\n         ST    POINTER,MSGAPTR          SAVE IT FOR LATER\n         MVC   MSGAREA,SPACES           CLEAR IT TO BLANKS\n         BR    LINK                     RETURN TO CALLER\n         SPACE 2\nPUTLINEC PUTLINE  MF=L                                             U004\n         SPACE 3\n         LTORG\n         SPACE 3\nHEXTAB   EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\nFLAGS    DC    X'00'                                               U001\nFOPER     EQU   X'80'                   USER HAS 'OPER'            U001\nUSERID   DS    0D\nUSERLEN  DC    AL1(0)\nUSERDATA DC    CL7' '\nPREFIX   DS    0D\nPRFXLEN  DC    AL1(0)\nPRFXDATA DC    CL7' '\n         DC    C' '                     REQUIRED PADDING FOR 'LINE'\nLINE     DC    CL3' '                   BYTE AFTER 'LINE' ALSO PADDING\nTERMID   DC    CL8' '\nMSGAPTR  DC    A(0)\nMSGALIM  DC    A(MSGAREA+L'MSGAREA)\nMSGAREA  DC    C'YOU ARE 1234567 (MASQUERADING AS 1234567) LOGGED ONTO $\n               THE 1234 (1234) (UNDER VM/370) WITH PROC 12345678 ON TER$\n               MINAL 12345678 ON LINE 123.  Active PIE session is x' U5\nSPACES   DC    CL(L'MSGAREA)' '\n         EJECT\n* MESSAGE CONSTANT SEGMENTS\nMSG01    MCON  'You are '\nMSG02A   MCON  ' ('\nMSG02B   MCON  ' (the '                                            U004\nMSG03A   MCON  'masquerading as '\nMSG03B   MCON  'incognito'\nMSG04    MCON  ')'\nMSG05    MCON  ' logged onto '                                     U004\nMSG06    MCON  ' (under VM)'                                       U003\nMSG07    MCON  ' with proc '\nMSG08    MCON  ' on terminal '\nMSG09    MCON  ' on line '\nMSG10    MCON  '.'\nMSG11    MCON  '  Active PIE session is '                          U005\n         SPACE 3\nWORKD    DSECT                          RESUME                     U004\nBUFFOLD  DS    2F                       OUTPUT LINE DESCRIPTOR     U004\nBUFFLEN  DS    H                        PRINTLINE LENGTH           U004\nBUFFOFF  DS    H                        OFFSET                     U004\nBUFFER   DS    CL80                     OUTPUT BUFFER              U004\nPIEID    DS    C                        save area for Pie sess id  U005\nBLDLLIST DS    2H,XL64                                             U005\nLINKSFL  LINK  SF=L                                                U005\nLINKSFLL EQU   *-LINKSFL                                           U005\nWORKLEN  EQU   *-WORKD                  LENGTH TO GETMAIN          U004\n         EJECT\n         PRINT NOGEN\n         SPACE 3\n         IKJPSCB\n         SPACE 3\n         IKJUPT\n         SPACE 1\n         PRINT GEN\n         SPACE 2\nCOUNT    EQU   R2\nPOINTER  EQU   R3\nAUXPTR   EQU   R4\nLISTPTR  EQU   R10\nLINK     EQU   R11\n         SPACE 3\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WHOHAS": {"ttr": 14341, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x00\\x00\\x00\\x83\\x17\\x1f\\x00\\x893?\\x16\\x11\\x01\\xbe\\x00\\xd8\\x01\\xb1\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "1983-06-20T00:00:00", "modifydate": "1989-11-29T16:11:00", "lines": 446, "newlines": 216, "modlines": 433, "user": "LDW"}, "text": "WHOHAS   TITLE '-----  Show who is enqueued on a dataset  -----'\n***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1988 by Leonard D. Woren.                           *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.                                     *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.                            *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1, with DFP 3.1),  *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc-oberon!LDW (last resort)                           *\n*                                                                     *\n*          (213) 743-5391 (direct -- 11 am to 7 pm Pacific time)      *\n*          (213) 743-2957 (msgs)                                      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, or 714.  Sorry.                                       *\n*                                                                     *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*   Program name:  WHOHAS                                             *\n*                                                                     *\n*   Purpose:       Give a TSO user a simple way to find out who       *\n*                  (batch jobs or TSO users) is enqueued on a         *\n*                  dataset.                                           *\n*                                                                     *\n*   Attributes:    Rent/Reus/Refr                                     *\n*                                                                     *\n*   Updates:                                                          *\n*      04Mar88  U003 LDW - FREEMAIN some storage to avoid S40D abends *\n*                        - Change to OSENTER                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n**********************************************************************\n* MODIFICATION: 06/27/83: WHEN WE WENT TO MVS/SP1.3 WHOHAS NO LONGER *\n*               WORKED. THIS WAS BECAUSE OF THE GLOBAL RESOURCE      *\n*               SERIALIZATION. WHAT MVS/SP1.3 DID WAS REMOVE THE     *\n*               POINTER TO THE QCB FROM THE CVT. SINCE GRS IS IN ITS *\n*               OWN ADDRESS SPACE IBM GAVE US A NEW MACRO \"GQSCAN\".  *\n*               THIS NEW MACRO BUILDS TWO NEW CONTROL BLOCKS (RIB &  *\n*               RIBE) WHICH GIVES US THE SAME INFORMATION WE GOT     *\n*               FROM THE QCB AND QEL.                                *\n*               WHOHAS WAS ALSO CHANGED TO PREFIX ANY NON FULLY      *\n*               QUALIFIED DATA SET WITH USER PREFIX FROM THE USER    *\n*               PROFILE TABLE (UPT).                                 *\n**********************************************************************\n         SPACE 3\n**********************************************************************\n* MODIFICATION: 10/21/83: A NEW ALIAS WAS ASSIGNED TO WHOHAS (WH)    *\n*               REPLACING THE WHO ALIAS. WHOHAS HAS HARD CODED INTO  *\n*               IT A CHECH FOR THE MINIMUM LENGTH OF THE COMMAND AND *\n*               THE MINUMUM OFFSET INTO THE CPPL BUFFER FOR THE      *\n*               COMMAND OPERAND. SINCE THE LENGTH OF THE COMMAND     *\n*               NAME WAS SHORTED FROM A MINIMUM OF THREE BYTES TO A  *\n*               MINIMUM OF 2 BYTES THE MINIMUN COMMAND LENGTH AND    *\n*               MINIMUN DISPLACEMENT NEEDED TO BE CHANGED.           *\n**********************************************************************\n         EJECT\nWHOHAS   OSENTER  PARMREG=R11,USING=(CPPL,R11),EXIT=RETURN,RC=0,   U003$\n               GETMAIN=(LWRKSPCE,WRKSPACE)                         U003\n         MVI   DSNAME,C' '\n         MVC   DSNAME+1(43),DSNAME\n         MVC   MSG(5),SETMSG\n         MVI   MSG+5,C' '\n         MVC   MSG+6(64),MSG+5\n         MVI   PSW,0\n         L     R2,CPPLCBUF             LOAD BUFFER ADDRESS\n         CLI   1(R2),X'08'             BUFFER LENGTH MUST BE   10/21/83\n         BL    ERROR                   AT LEAST 9 BYTES AND\n         CLI   3(R2),X'03'             THE OFFSET 4 BYTES      10/21/83\n         BL    ERROR\n         LH    R3,2(R2)                LOAD OFFSET\n         LA    R3,4(R3)\n         LH    R5,0(R2)                LOAD BUFFER LENGTH\n         SR    R5,R3                   FIND OPERAND LENGTH\n         AR    R3,R2                   POINT TO FIRST CHARACTER\n*                                      AFTER COMMAND DSN\n         SPACE 2\n         LR    R4,R3                   FIND LAST CHARACTER\nDSN1     CLI   0(R4),X'40'             OF DSNAME\n         BE    DSN2\n         LA    R4,1(R4)\n         BCT   R5,DSN1\n         SPACE 2\nDSN2     BCTR  R4,R0\n         CLI   0(R3),C' '\n         BE    ERROR\n         CLI   0(R3),C''''             IF FIRST CHARACTER IS ',\n         BNE   USERID                  DON'T ADD USERID TO DSNAME\n         CLI   0(R4),C''''\n         BNE   ERROR\n         LA    R3,1(R3)\n         SR    R4,R3                   FIND LENGTH OF DSNAME - 1\n         LTR   R4,R4                   AND CHECK FOR ERRORS\n         BNP   ERROR\n         LR    R8,R4\n         LA    R5,44\n         CR    R8,R5\n         BH    ERROR\n         ST    R4,DSNLNGTH             SAVE DSNAME LENGTH      06/27/83\n         BCTR  R4,R0\n         EX    R4,MOVEFQ\n         B     SEARCH\nUSERID   L     R7,CPPLUPT              LOAD ADDRESS OF UPT     06/27/83\n         USING UPT,R7                                          06/27/83\n         SR    R8,R8\n         IC    R8,UPTPREFL             LENGTH OF PREFIX        06/27/83\n         BCTR  R8,R0\n         EX    R8,MOVEU                MOVE USERID\n         LA    R7,DSNAME\n         AR    R7,R8\n         LA    R7,1(R7)\n         MVI   0(R7),C'.'\n         SR    R4,R3                   DSNAME LENGTH - 1\n         AR    R8,R4\n         LA    R8,3(R8)\n         LA    R5,44\n         CR    R8,R5\n         BH    ERROR\n         ST    R8,DSNLNGTH             SAVE DSNAME LENGTH      06/27/83\n         EX    R4,MOVEDSN\n         SPACE 4\nSEARCH   LR    R7,R8                   CONVERT DSNAME TO\n         LA    R2,DSNAME               UPPER CASE\nCONV     OI    0(R2),X'40'\n         LA    R2,1(R2)\n         BCT   R7,CONV\n         SPACE 2\n*        L     R2,16                   ADDRESS OF CVT          06/27/83\n*        USING CVT,R2                                          06/27/83\n*        L     R2,CVTFQCB              ADDRESS OF FIRST MAJOR  06/27/83\n*CBNEXT  LTR   R2,R2                                           06/27/83\n*        BZ    NOFIND                                          06/27/83\n*        USING QCB,R2                                          06/27/83\n*        CLC   MAJNAME(8),SYSDSN                               06/27/83\n*        BE    FINDDSN                                         06/27/83\n*        L     R2,MAJNMAJ              ADDRESS OF NEXT MAJOR   06/27/83\n*        B     QCBNEXT                                         06/27/83\n*        SPACE 2                                               06/27/83\n*INDDSN  L     R3,MAJFMIN              ADDRESS OF FIRST MINOR Q06/27/83\n*        SR    R4,R4                                           06/27/83\n*EXTMIN  LTR   R3,R3                                           06/27/83\n*        BZ    NOFIND                                          06/27/83\n*        DROP  R2                                              06/27/83\n*        USING MINNMIN,R3                                      06/27/83\n*        IC    R4,MINNAMEL             LENGTH OF QCB NAME      06/27/83\n*        CR    R4,R8                                           06/27/83\n*        BNE   INCR                                            06/27/83\n*        BCTR  R4,R0                                           06/27/83\n*        EX    R4,COMPDSN                                      06/27/83\n*        BE    GETQEL                                          06/27/83\n*NCR     L     R3,MINNMIN              ADDRESS OF NEXT MINOR QC06/27/83\n*        B     NEXTMIN                                         06/27/83\n*        SPACE 2                                               06/27/83\n*ETQEL   LA    R4,58                                           06/27/83\n*        LA    R2,MSG                                          06/27/83\n*        L     R3,MINFQEL     A(1ST QEL)                       06/27/83\n*        USING QEL,R3         ADDRESSABILITY                   06/27/83\n*        LA    R5,MSG+6                                        06/27/83\n*        B     TESTQEL                                         06/27/83\n*EXTQEL1 LA    R5,MSG+6                                        06/27/83\n*EXTQEL  L     R3,QELNQEL              LOAD ADDRESS OF QEL     06/27/83\n*ESTQEL  LTR   R3,R3                                           06/27/83\n*        BZ    OUT                                             06/27/83\n*        MVI   PSW,X'00'               RESET PRINT SWITCH      06/27/83\n*        TM    QELQFLGS,QELSHARE QEL SHARED?                   06/27/83\n*        BO    SHR                                             06/27/83\n*        LA    R1,MSG+6       ANYTHING IN THE MESSAGE          06/27/83\n*        CLR   R1,R5           BUFFER YET?                     06/27/83\n*        BE    OLDER          NO => STARTING WITH OLD          06/27/83\n*        SR    R5,R2          PUT OUT                          06/27/83\n*        BCTR  R5,R0          DROP THE COMMA                   06/27/83\n*        TPUT  (R2),(R5)       WHAT'S THERE                    06/27/83\n         MVC   GETMAINL(GETMLEN),GETMDC BUY AN AREA FOR GQSCAN 06/27/83\nGETAREA  GETMAIN VC,LA=MEMLOW,A=AREAA,MF=(E,GETMAINL),SP=1,            X\n               RELATED=(FREEAREA)                              06/27/83\n         LTR   R15,R15                                         06/27/83\n         BZ    GETRIB                                          06/27/83\n         TPUT  NOMEM,35                                        06/27/83\n         B     RETURN                                          06/27/83\nGETRIB   L     R1,AREAA                 -> GOTTEN STORAGE          U003\n         L     R0,AREAA+4               GET LENGTH OF GOTTEN STG   U003\n         AR    R1,R0                    -> PAST END                U003\n         S     R1,=A(32*1024)           -> PART TO FREE            U003\n         S     R0,=A(32*1024)           ADJUST LENGTH TO KEEP      U003\n         ST    R0,AREAA+4               STORE UPDATED LENGTH       U003\n*  CAN'T BE NON-POSITIVE, SINCE THE MINIMUM WE'LL ACCEPT WAS       U003\n*  CHANGED FROM 32K TO 64K                                         U003\n         FREEMAIN  RU,A=(1),LV=32*1024,SP=1  GIVE BACK 32K TO SYS  U003\n         LA    R5,DSNAME      TELL GQSCAN WHAT WE WANT         06/27/83\n         LA    R4,SYSDSN        TO FIND                        06/27/83\n         L     R6,DSNLNGTH    DSNAME LENGTH                    06/27/83\n         MVC   GQLIST(ALLQL),ALLQ INIT PARM BLOCK              06/27/83\n         XC    TOKEN(4),TOKEN ZERO TOKEN                       06/27/83\n         LM    R2,R3,AREAA    GET AREA AND LENGTH              06/27/83\nSCAN     GQSCAN AREA=((R2),(R3)),TOKEN=TOKEN,RESNAME=((R4),(R5),(R6)), X\n               MF=(E,GQLIST)                                   06/27/83\n         CH    R15,=H'4'      EMPTY                            06/27/83\n         BE    NOFIND         IF SO RETURN AFTER MSG           06/27/83\n         CH    R15,=H'12'     ERROR                            06/27/83\n         BL    SCAN1                                           06/27/83\n         CH    R15,=H'16'     IVALID SYSNAME                   06/27/83\n         BNE   GQABEND        NO, SCAN ENDED ABNORMALLY        06/27/83\n         TPUT  INVALID,34                                      06/27/83\n         B     RETURN                                          06/27/83\nGQABEND  TPUT  QSABEND,46                                      06/27/83\n         B     RETURN                                          06/27/83\nSCAN1    ST    R0,RIBL        SAVE LENGTH OF RIB AND RIBE      06/27/83\n         ST    R1,NRIBS       SAVE # RIBS THIS AREA            06/27/83\n         SR    R15,R15        CLEAR RETURN REGISTER            06/27/83\n         L     R3,AREAA       POINT TO RIB                     06/27/83\n         USING RIB,R3\n         MVC   NRIBES(4),RIBTRIBE TOTAL NUMBER OF RIBES FOR    06/27/83\n*                                   THIS RIB                   06/27/83\n         MVC   NCRIBES(4),RIBNRIBE SAVE # RIBES THIS AREA      06/27/83\n         LA    R4,58\n         LA    R2,MSG\n         AH    R3,RIBVLEN     ADD IN LENGTH OF VARIABLE PORTION06/27/83\n         AH    R3,RIBL        ADD IN RIBLENGTH RETURN BY SCAN  06/27/83\n         DROP  R3\n         USING RIBE,R3        RIBE ADDRESSABILITY              06/27/83\n         LA    R5,MSG+6\n         B     RIBELOOP                                        06/27/83\nNXTRIBE1 LA    R5,MSG+6                                        06/27/83\nNXTRIBE  AH    R3,RIBEL       POINT TO NEXTRIBE                06/27/83\n         L     R1,NRIBES      GET # UNPROCESSED RIBES          06/27/83\n         BCT   R1,CHK4LAST    DECREMENT                        06/27/83\n         B     OUT                                             06/27/83\n*                                                              06/27/83\n*        THERE  IS AT LEAST ONE UNPROCESSED RIBE IN THIS AREA  06/27/83\n*                                                              06/27/83\nCHK4LAST ST    R1,NRIBES      STORE NEW #                      06/27/83\n         L     R1,NCRIBES     GET # UNPROCESSED RIBS THIS AREA 06/27/83\n         BCT   R1,WHOHAS1                                      06/27/83\n         CLI   PSW,X'00'      ANYTHING TO PRINT?               06/27/83\n         BNE   WHOHAS2                                         06/27/83\n         BCTR  R5,R0          REMOVE COMMA                     06/27/83\n         SR    R5,R2                                           06/27/83\n         TPUT  (R2),(R5)                                       06/27/83\nWHOHAS2  TPUT  MOREM,9        TELL THEM THERE IS MORE          06/27/83\n         B     RETURN                                          06/27/83\nWHOHAS1  ST    R1,NCRIBES     STORE NEW #                      06/27/83\nRIBELOOP MVI   PSW,X'00'      RESET PRINT SWITCH               06/27/83\n         TM    RIBERFLG,RIBETYPE SHARED?                       06/27/83\n         BO    SHR                                             06/27/83\n         LA    R1,MSG+6       ANYTHING IN THE MESSAGE          06/27/83\n         CLR   R1,R5            BUFFER YET                     06/27/83\n         BE    OLDER          NO => STARTING WITH OLD          06/27/83\n         SR    R5,R2          PUT OUT                          06/27/83\n         BCTR  R5,R0          REMOVE COMMA                     06/27/83\n         TPUT  (R2),(R5)      WHATS THERE                      06/27/83\nOLDER    MVC   MSG(3),=C'OLD'\n         LA    R5,MSG+6\n         BAL   R6,FINDJN\n         SR    R5,R2          SET LENGTHS\n         TPUT  (R2),(R5)       AND POINTERS\n         MVC   MSG(3),=C'SHR' RESET THE MESSAGE\n         MVI   PSW,X'FF'      EMPTY BUFFER\n         B     NXTRIBE1       CHECK FOR SHR ENQ\nPRINT    SR    R5,R2\n         TPUT  (R2),(R5)\n         B     RETURN\n         SPACE 2\nSHR      LR    R6,R5\n         SR    R6,R2\n         CR    R6,R4\n         BL    SHR1\n         BCTR  R6,R0\n         TPUT  (R2),(R6)\n         MVI   MSG+6,C' '\n         MVC   MSG+7(63),MSG+6\n         LA    R5,MSG+6\n         MVI   PSW,X'FF'\nSHR1     BAL   R6,FINDJN\n         MVI   0(R5),C','\n         LA    R5,1(R5)\n         B     NXTRIBE\nOUT      CLI   PSW,X'00'\n         BNE   RETURN\n         BCTR  R5,R0\n         B     PRINT\nERROR    TPUT  ERMSG1,15\n         B     RETURN\n         SPACE 4\nNOFIND   TPUT  ERMSG2,22\n         B     RETURN                                              U003\n         EJECT\n*        FINDJN    -    FINDS THE JOB NAME AND MOVES IT\n*                       TO A SPECIFIED LOCATION\n*\n*        UPON ENTRY     REG. 3  -  ADDRESS OF RIBE             06/27/83\n*                       REG. 5  -  LOC. TO REC. JOB NAME OR USERID\n*                       REG. 6  -  RETURN REG.\n*\n*        UPON EXIT      REG. 5  -  CONTAINS ADDRESS FOLLOWING\n*                                  THE JOB NAME OR USERID\n*\n*                       REG. 7  -  WORK REG.\n*                       REG. 8  -  WORK REG.\n*                       REG. 9  -  WORK REG.\n*                       REG. 10 -  WORK REG.\n         SPACE 4\nFINDJN   L     R7,16          A(CVT)\n         USING CVT,R7         ADDRESSABILITY\n         L     R7,CVTASVT     A(ASVT)\n         USING ASVT,R7        ADDRESSABILITY\n         LH    R8,RIBEASID    JOB'S ASID                       06/27/83\n         BCTR  R8,R0          INDEXING INTO ASVT\n         SLL   R8,R2          BY USING (ASID - 1) * 4\n         LA    R7,ASVTENTY(R8) A(A(JOB'S ASCB))\n         L     R7,0(R7)       A(JOB'S ASCB)\n         USING ASCB,R7        ADDRESSABILITY\n         L     R8,ASCBJBNI    A(JOB NAME) IF INITIATED JOB\n         MVI   0(R5),C'J'    ASSUME IT'S A JOB\n         LTR   R8,R8          INITIATED JOB?\n         BNZ   GOTIT          YES => GET THE JOB NAME\n         MVI   0(R5),C'U'     ASSUME IT'S A USER\n         L     R8,ASCBJBNS    A(START/MOUNT/LOGON JOB NAME)\nGOTIT    MVI   1(R5),C'='     SEPARATOR\n         MVC   2(8,R5),RIBEJBNM INSERT THE JOB NAME            06/27/83\n         LA    R7,8           MAXIMUM JOB NAME LENGTH\n         LA    R5,2(R5)       A(1ST CHARACTER OF JOB NAME)\nLOOP     CLI   0(R5),C' '     END OF JOB NAME?\n         BER   R6             YES => RETURN TO OUR CALLER\n         LA    R5,1(R5)       A(NEXT CHARACTER IN JOB NAME)\n         BCT   R7,LOOP        JOB NAME 8 CHARACTERS LONG?\n         BR    R6             YES => RETURN TO OUR CALLER\n         EJECT\nMOVEFQ   MVC   DSNAME(0),0(R3)\nMOVEU    MVC   DSNAME(0),UPTPREFX-UPT(R7)                      06/27/83\nMOVEDSN  MVC   1(0,R7),0(R3)\nSETMSG   DC    C'SHR -'\nSYSDSN   DC    CL8'SYSDSN'\nERMSG1   DC    CL15'ERROR IN DSNAME'\nERMSG2   DC    CL22'DATA SET NOT ALLOCATED'\nGETMDC   GETMAIN VC,SP=1,MF=L\nGETMLEN  EQU   *-GETMDC\n         DS    0F\n*MEMLOW  DC    X'00008000'  MEM LIMITS FOR GQSCAN\nMEMLOW   DC    X'00010000'  MEM LIMITS FOR GQSCAN                  U003\nMEMHIGH  DC    X'7FFFFFFF'\nNOMEM    DC    C'NOT ENOUGH CORE TO PROCESS REQUEST'\nALLQ     GQSCAN REQLIM=MAX,SCOPE=ALL,                                  X\n               REQCNT=1,MF=L\nALLQL    EQU   *-ALLQ\nINVALID  DC    C'INVALID SYSNAME; CALL TECH SUPPORT'\nQSABEND  DC    C'QUEUE SCAN ENDED ABNORMALLY; CALL TECH SUPPORT'\nMOREM    DC    C' (MORE)'\n         EJECT\nWRKSPACE DSECT                          resume\nDSNAME   DS    44C\nMSG      DS    CL70\nPSW      DS    X\nGETMAINL GETMAIN VC,MF=L\nAREAA    DS    F       ADDRESS OF Q AREA\nAREAL    DS    F       LENGTH OF Q AREA\nSYSDSNAD DS    F       QNAME ADDRESS\nDSNAMEAD DS    F       DATA SET NAME ADDRESS\nTOKEN    DS    F       TOKEN FOR GQSCAN\nRIBL     DS    H       LENGTH OF RIB\nRIBEL    DS    H       LENGTH OF RIBE\nNRIBS    DS    F       NUMBER OF RIBS RETURNED\nNRIBES   DS    F       NUMBER OF RIBES THIS RIB\nNCRIBES  DS    F       NUMBER OF RIBES THIS AREA\nDSNLNGTH DS    F       LENGTH OF DATA SET NAME\nGQLIST   GQSCAN MF=L\nLWRKSPCE EQU   *-WRKSPACE\n         CVT   DSECT=YES\n         IKJUPT                                                06/27/83\n         IHAASCB\n         IHAASVT\n         IKJCPPL\n         ISGRIB                                                06/27/83\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT180/FILE180.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT180", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}