MPFCMD   CSECT
MPFCMD   AMODE 31
MPFCMD   RMODE ANY

         YREGS
CLEARED  EQU   X'14'

         TITLE 'MPF Exit to Issue a Command for Any Message'

*        R.P. Shannon
*        Rocket Software
*        12 July 2004

*        MPF exit to issue a command in response to a message.
*        Written to replace MPFXTALL which stated abending in
*        z/OS 1.5. It is triggered by placing an entry in the
*        MPF list. Example:
*
*        IEE391A,SUP(NO),USEREXIT(MPFCMD),AUTO(Y)
*
*        The exit uses the message id as a member in the Parmlib
*        concatenation. Using the example for message IEE391A,
*        there will be an IEE391A member in the Parmlib
*        concatenation that will contain a command to be issued
*        in response to IEE391A. In this example,
*        RSPLEX01.PARMLIB(IEE391A) will contains a "S SMFDUMP"
*        command.
*
*        The format for the command is free form. MPFCMD will
*        issue the command exactly as it was entered in the
*        Parmlib member.

*        * Start SMFDUMP
*        S SMFDUMP

*        A "*" denotes a comment. A blank line will terminate the
*        input.

*        There is no warranty with this code. Use it at your own
*        risk. However, if you do have a problem, send a dump and
         the Parmlib member the exit was suppossed to issue and I
         will try to fix it.

*        At Entry:  R1 ---> FW which contains the CTXC address
*        At Exit:   R15 = 0

         BAKR  R14,R0                     save regs on stack
         LAE   R11,0(R15,0)               establish reg 11 as base
         LA    R12,4095(,R11)             bump addr
         LA    R12,1(,R12)                establish reg 12 as 2nd base
         USING MPFCMD,R11,R12             get addressability

         L     R10,0(R1)                  load ctxt addr

         L     R0,=AL4(WALEN)             load workarea size
         STORAGE OBTAIN,LENGTH=(0),ADDR=(1),LOC=(ANY,ANY),             x
               CHECKZERO=YES,COND=YES

         LR    R13,R1                     r13 ---> workarea
         CH    R15,=Y(CLEARED)            obtained and cleared?
         BE    HOUSKEEP                   bif yes
         LTR   R15,R15                    obtained but not cleared?
         BNZ   STORERR                    bif yes

         LR    R1,R0                      R1 = length
         LR    R0,R2                      R0  = target addr
         LR    R14,R2                     R2  = addr
         XR    R15,R15                    R3  = zero
         MVCL  R0,R14                     clear storage

HOUSKEEP DS    0H
         USING WORKAREA,R13               map workarea
         MVC   SAVEAREA+4,=C'F1SA'        indicate stack in use
         MVC   MEMBER,=CL8' '             init member to blanks
         MVC   CALLER,=CL8' '             init caller to blanks
         MVC   DDNAME,=CL8' '             init ddname to blanks

*        Address the CTXT and Locate the Message
         USING CTXT,R10                   map ctxt
         CLC   CTXTACRN,=C'CTXT'          verify it's the ctxt
         BNE   FREESTOR                   bif not ctxt
         L     R9,CTXTTXPJ                load addr msg attributes
         USING CTXTATTR,R9                map attributes

*        Find Message Id - It will be the first 8 bytes
*        of the message, or fewer than 8 if a blank is
*        encountered

         LA    R1,CTXTTMSG                load message addr
         XR    R2,R2                      initialize kount
         LA    R15,8                      set loop limit

MSGLOOP  DS    0H
         CR    R2,R15                     have we processed 8 chars?
         BNL   MSGLOOPE                   bif yes
         CLI   0(R1),C' '                 blank?
         BE    MSGLOOPE                   bif yes
         LA    R2,1(,R2)                  bump kount
         LA    R1,1(,R1)                  advance to next character
         B     MSGLOOP                    iterate

MSGLOOPE DS    0H
         BCTR  R2,0                       decrement kount for execute
         EX    R2,MOVEMSG                 move message id
         B     PRMSETUP                   branch

MOVEMSG  MVC   MEMBER(0),CTXTTMSG         executed instruction

PRMSETUP DS   0H
         MVC   CALLER,=CL8'MPFCMD'        set caller id
         L     R0,=AL4(WALEN)             load workarea size
         LA    R1,BUFFER-WORKAREA(0,0)    calc size not used for buffer
         SR    R0,R1                      calc buffer size
         ST    R0,BUFFSIZE                save buffer size
         AR    R0,R13                     calc buffer end addr
         ST    R0,BUFFEND@                and save it
         LA    R8,BUFFER                  load buffer addr
         ST    R8,BUFFER@                 and save it

         USING PRM_READ_BUFFER,R8           map buffer
         MVC   PRM_READ_BUFF_SIZE,BUFFSIZE  set buffer size

*        Allocate Parmlib and Read the Member
         IEFPRMLB REQUEST=ALLOCATE,ALLOCDDNAME=DDNAME,BLANK72=YES,     x
               CALLERNAME=CALLER,MEMNAME=MEMBER,MOUNT=NO,              x
               READ=YES,READBUF=(8),RETMSG=NO,S99RB=NO,WAITDSN=NO,     x
               RETCODE=RC,RSNCODE=RSN,PLISTVER=MAX,MF=(E,DYNPRMLB)

         LA    R8,PRM_RECORD              load addr 1st record
         LTR   R15,R15                    work ok?
         BZ    READREC                    bif yes

*        Issue an Error Message Indicating the Parmlib
*        Read Routine Failed
         MVC   WTOTEXT,=C' '              move blank to wtotext
         MVC   WTOTEXT+1(79),WTOTEXT      blank the rest
         MVC   WTOTEXT(CMD00LEN),MPFCMD00 move message to wtotext

*        Format RC
         MVC   SIX+0(4),RC                move rc to work field
         UNPK  TEN,SIX(5)                 unpack it
         MVZ   TEN,=10X'F0'               insure correct zones
         TR    TEN,XLATETBL               xlate
         MVC   WTOTEXT+44(2),TEN+7        move to wtotext

*        Format RSN
         MVC   SIX+0(4),RSN               move rsn to work field
         UNPK  TEN,SIX(5)                 unpack it
         MVZ   TEN,=10X'F0'               insure correct zones
         TR    TEN,XLATETBL               xlate
         MVC   WTOTEXT+51(2),TEN+7        move to wtotext

         MVC   WTOLEN(2),=Y(CMD00LEN)     set length of wto
         XC    WTOFLAGS,WTOFLAGS          set flags
         LA    R1,WTOLEN                  re ---> wto length
         SVC   35                         issue wto
         B     FREESTOR                   and out

READREC  DS    0H
         L     R7,BUFFEND@                load buffer end addr
         MVC   DYNMGCRE(MGCRELEN),MGCRE   copy stactic mgcre to dynamic

RECLOOP  DS    0H
         CR    R8,R7                      end of buffer?
         BNL   FREPRMLB                   bif yes
         CLI   0(R8),C'*'                 comment?
         BE    RECLOOPE                   bif yes
         CLC   0(80,R8),=CL80' '          blank line?
         BE    FREPRMLB                   bif yes - all done
         CLC   0(80,R8),=XL80'00'         null line?
         BE    FREPRMLB                   bif yes - all done
         XC    CMD(4),CMD                 clear flags
         MVI   CMDLEN,X'20'               set cmd length to 32 bytes
         MVC   CMDTEXT(32),0(R8)          move record to command text
         XR    R0,R0                      reg0 = 0
         LA    R2,CMD                     reg2 ---> command

         MGCRE TEXT=(2),CONSID=CONSID,MF=(E,DYNMGCRE) issue command

RECLOOPE DS    0H
         LA    R8,80(,R8)                 bump to next record
         B     RECLOOP                    iterate

*        Free Parmlib (if allocated)
FREPRMLB DS    0H
         CLC   DDNAME,=CL8' '             ddname blank (not allocated)?
         BZ    FREESTOR                   bif yes - skip free

         IEFPRMLB REQUEST=FREE,DDNAME=DDNAME,CALLERNAME=CALLER,        x
               RETCODE=RC,RSNCODE=RSN,PLISTVER=MAX,MF=(E,DYNPRMLB)
         B     FREESTOR                   branch

STORERR  WTO 'MPFCMD01 MPFCMD unable to obtain storage'
         B     BOOGIE                     and out

FREESTOR DS    0H
         L     R0,=AL4(WALEN)             load length for free
         LR    R1,R13                     load storage addr
         STORAGE RELEASE,LENGTH=(0),ADDR=(1)

BOOGIE   DS    0H
         XR    R15,R15                    set rc to zero regardless
         PR                               return

MPFCMD00 DC    C'MPFCMD: Error using IEFPRMLB service. RC xx RSN xx'
CMD00LEN EQU   *-MPFCMD00

*        Parmlib Service
         IEFPRMLB PLISTVER=MAX,MF=(L,PRMLB_L)
PRMLBLEN EQU   *-PRMLB_L

*        SVC 34
MGCRE    MGCRE MF=L
MGCRELEN EQU   *-MGCRE

         ORG    *-240
XLATETBL DS     0CL256
         DS     CL240
         DC     C'0123456789ABCDEF'
         LTORG

WORKAREA DSECT
SAVEAREA DS    18F                        savearea
SIX      DS    XL6                        work field
TEN      DS    XL10                       another work field
RC       DS    F                          iefprmlb return code
RSN      DS    F                          iefprmlb reason code
CALLER   DS    CL8                        iefprmlb caller
MEMBER   DS    CL8                        iefprmlb member name
DDNAME   DS    CL8                        iefprmlb ddname
BUFFEND@ DS    F                          end addr of parm buffer
BUFFSIZE DS    F                          buffer size
BUFFER@  DS    F                          buffer addr
CONSID   DS    F                          X'00000000' (MASTER)
CMD      DS    0D                         command
CMDFLAG1 DS    X                          1st flag byte (x'00000000')
CMDLEN   DS    X                          cmd length (32 bytes max)
CMDTEXT  DS    CL80                       command text
WTOLEN   DS    XL2                        wto length
WTOFLAGS DS    XL2                        wto flags
WTOTEXT  DS    CL80                       wto text
DYNPRMLB DS    0D,CL(PRMLBLEN)            dynamic iefprmlb
DYNMGCRE DS    0D,CL(MGCRELEN)            dynamic mgcre
BUFFER   DS    0D,CL(8192-(*-WORKAREA))   iefprmlb buffer
WALEN    EQU   *-WORKAREA
         IEZVX100                         message dsect
         IEFZPMAP                         iefprmlb buffer mapping
         IEFZPRC                          iefprmlb completion codes
         END
