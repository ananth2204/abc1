{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012636000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE709.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE709.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x02\\x0c'", "DS1TRBAL": "b'l\\x1c'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xec\\x00\\x06\\x04\\xec\\x00\\x08\\x00\\x03'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04D\\x00\\x00\\x01\\x05\\x03O\\x01\\x05\\x03O\\x18A\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf8@@@'", "ispf": {"version": "04.68", "flags": 0, "createdate": "2005-02-03T00:00:00", "modifydate": "2005-02-03T18:41:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-468"}, "text": "REGULAR CBT TAPE - VERSION 468    FILE:  709\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT468.FILE709\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 3 MEMBERS COUNTED; CUMULATIVE SIZE IS 265 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   02/03/05    18:41:53    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE709": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04D\\x00\\x00\\x01\\x05\\x03O\\x01\\x05\\x03O\\x18A\\x00\\x04\\x00\\x04\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf8@@@'", "ispf": {"version": "04.68", "flags": 0, "createdate": "2005-02-03T00:00:00", "modifydate": "2005-02-03T18:41:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "CBT-468"}, "text": "//***FILE 709 is from Bob Shannon and contains an MPFCMD program.   *   FILE 709\n//*                                                                 *   FILE 709\n//*           email:  bob.shannon@rocketsoftware.com                *   FILE 709\n//*                                                                 *   FILE 709\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MPFCMD": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x004\\x01\\x05\\x03O\\x01\\x05\\x03O\\x189\\x00\\xf9\\x00\\xf9\\x00\\x00\\xe2\\xc8\\xc1\\xd5\\xd5\\xd6\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-02-03T00:00:00", "modifydate": "2005-02-03T18:39:34", "lines": 249, "newlines": 249, "modlines": 0, "user": "SHANNON"}, "text": "MPFCMD   CSECT\nMPFCMD   AMODE 31\nMPFCMD   RMODE ANY\n\n         YREGS\nCLEARED  EQU   X'14'\n\n         TITLE 'MPF Exit to Issue a Command for Any Message'\n\n*        R.P. Shannon\n*        Rocket Software\n*        12 July 2004\n\n*        MPF exit to issue a command in response to a message.\n*        Written to replace MPFXTALL which stated abending in\n*        z/OS 1.5. It is triggered by placing an entry in the\n*        MPF list. Example:\n*\n*        IEE391A,SUP(NO),USEREXIT(MPFCMD),AUTO(Y)\n*\n*        The exit uses the message id as a member in the Parmlib\n*        concatenation. Using the example for message IEE391A,\n*        there will be an IEE391A member in the Parmlib\n*        concatenation that will contain a command to be issued\n*        in response to IEE391A. In this example,\n*        RSPLEX01.PARMLIB(IEE391A) will contains a \"S SMFDUMP\"\n*        command.\n*\n*        The format for the command is free form. MPFCMD will\n*        issue the command exactly as it was entered in the\n*        Parmlib member.\n\n*        * Start SMFDUMP\n*        S SMFDUMP\n\n*        A \"*\" denotes a comment. A blank line will terminate the\n*        input.\n\n*        There is no warranty with this code. Use it at your own\n*        risk. However, if you do have a problem, send a dump and\n         the Parmlib member the exit was suppossed to issue and I\n         will try to fix it.\n\n*        At Entry:  R1 ---> FW which contains the CTXC address\n*        At Exit:   R15 = 0\n\n         BAKR  R14,R0                     save regs on stack\n         LAE   R11,0(R15,0)               establish reg 11 as base\n         LA    R12,4095(,R11)             bump addr\n         LA    R12,1(,R12)                establish reg 12 as 2nd base\n         USING MPFCMD,R11,R12             get addressability\n\n         L     R10,0(R1)                  load ctxt addr\n\n         L     R0,=AL4(WALEN)             load workarea size\n         STORAGE OBTAIN,LENGTH=(0),ADDR=(1),LOC=(ANY,ANY),             x\n               CHECKZERO=YES,COND=YES\n\n         LR    R13,R1                     r13 ---> workarea\n         CH    R15,=Y(CLEARED)            obtained and cleared?\n         BE    HOUSKEEP                   bif yes\n         LTR   R15,R15                    obtained but not cleared?\n         BNZ   STORERR                    bif yes\n\n         LR    R1,R0                      R1 = length\n         LR    R0,R2                      R0  = target addr\n         LR    R14,R2                     R2  = addr\n         XR    R15,R15                    R3  = zero\n         MVCL  R0,R14                     clear storage\n\nHOUSKEEP DS    0H\n         USING WORKAREA,R13               map workarea\n         MVC   SAVEAREA+4,=C'F1SA'        indicate stack in use\n         MVC   MEMBER,=CL8' '             init member to blanks\n         MVC   CALLER,=CL8' '             init caller to blanks\n         MVC   DDNAME,=CL8' '             init ddname to blanks\n\n*        Address the CTXT and Locate the Message\n         USING CTXT,R10                   map ctxt\n         CLC   CTXTACRN,=C'CTXT'          verify it's the ctxt\n         BNE   FREESTOR                   bif not ctxt\n         L     R9,CTXTTXPJ                load addr msg attributes\n         USING CTXTATTR,R9                map attributes\n\n*        Find Message Id - It will be the first 8 bytes\n*        of the message, or fewer than 8 if a blank is\n*        encountered\n\n         LA    R1,CTXTTMSG                load message addr\n         XR    R2,R2                      initialize kount\n         LA    R15,8                      set loop limit\n\nMSGLOOP  DS    0H\n         CR    R2,R15                     have we processed 8 chars?\n         BNL   MSGLOOPE                   bif yes\n         CLI   0(R1),C' '                 blank?\n         BE    MSGLOOPE                   bif yes\n         LA    R2,1(,R2)                  bump kount\n         LA    R1,1(,R1)                  advance to next character\n         B     MSGLOOP                    iterate\n\nMSGLOOPE DS    0H\n         BCTR  R2,0                       decrement kount for execute\n         EX    R2,MOVEMSG                 move message id\n         B     PRMSETUP                   branch\n\nMOVEMSG  MVC   MEMBER(0),CTXTTMSG         executed instruction\n\nPRMSETUP DS   0H\n         MVC   CALLER,=CL8'MPFCMD'        set caller id\n         L     R0,=AL4(WALEN)             load workarea size\n         LA    R1,BUFFER-WORKAREA(0,0)    calc size not used for buffer\n         SR    R0,R1                      calc buffer size\n         ST    R0,BUFFSIZE                save buffer size\n         AR    R0,R13                     calc buffer end addr\n         ST    R0,BUFFEND@                and save it\n         LA    R8,BUFFER                  load buffer addr\n         ST    R8,BUFFER@                 and save it\n\n         USING PRM_READ_BUFFER,R8           map buffer\n         MVC   PRM_READ_BUFF_SIZE,BUFFSIZE  set buffer size\n\n*        Allocate Parmlib and Read the Member\n         IEFPRMLB REQUEST=ALLOCATE,ALLOCDDNAME=DDNAME,BLANK72=YES,     x\n               CALLERNAME=CALLER,MEMNAME=MEMBER,MOUNT=NO,              x\n               READ=YES,READBUF=(8),RETMSG=NO,S99RB=NO,WAITDSN=NO,     x\n               RETCODE=RC,RSNCODE=RSN,PLISTVER=MAX,MF=(E,DYNPRMLB)\n\n         LA    R8,PRM_RECORD              load addr 1st record\n         LTR   R15,R15                    work ok?\n         BZ    READREC                    bif yes\n\n*        Issue an Error Message Indicating the Parmlib\n*        Read Routine Failed\n         MVC   WTOTEXT,=C' '              move blank to wtotext\n         MVC   WTOTEXT+1(79),WTOTEXT      blank the rest\n         MVC   WTOTEXT(CMD00LEN),MPFCMD00 move message to wtotext\n\n*        Format RC\n         MVC   SIX+0(4),RC                move rc to work field\n         UNPK  TEN,SIX(5)                 unpack it\n         MVZ   TEN,=10X'F0'               insure correct zones\n         TR    TEN,XLATETBL               xlate\n         MVC   WTOTEXT+44(2),TEN+7        move to wtotext\n\n*        Format RSN\n         MVC   SIX+0(4),RSN               move rsn to work field\n         UNPK  TEN,SIX(5)                 unpack it\n         MVZ   TEN,=10X'F0'               insure correct zones\n         TR    TEN,XLATETBL               xlate\n         MVC   WTOTEXT+51(2),TEN+7        move to wtotext\n\n         MVC   WTOLEN(2),=Y(CMD00LEN)     set length of wto\n         XC    WTOFLAGS,WTOFLAGS          set flags\n         LA    R1,WTOLEN                  re ---> wto length\n         SVC   35                         issue wto\n         B     FREESTOR                   and out\n\nREADREC  DS    0H\n         L     R7,BUFFEND@                load buffer end addr\n         MVC   DYNMGCRE(MGCRELEN),MGCRE   copy stactic mgcre to dynamic\n\nRECLOOP  DS    0H\n         CR    R8,R7                      end of buffer?\n         BNL   FREPRMLB                   bif yes\n         CLI   0(R8),C'*'                 comment?\n         BE    RECLOOPE                   bif yes\n         CLC   0(80,R8),=CL80' '          blank line?\n         BE    FREPRMLB                   bif yes - all done\n         CLC   0(80,R8),=XL80'00'         null line?\n         BE    FREPRMLB                   bif yes - all done\n         XC    CMD(4),CMD                 clear flags\n         MVI   CMDLEN,X'20'               set cmd length to 32 bytes\n         MVC   CMDTEXT(32),0(R8)          move record to command text\n         XR    R0,R0                      reg0 = 0\n         LA    R2,CMD                     reg2 ---> command\n\n         MGCRE TEXT=(2),CONSID=CONSID,MF=(E,DYNMGCRE) issue command\n\nRECLOOPE DS    0H\n         LA    R8,80(,R8)                 bump to next record\n         B     RECLOOP                    iterate\n\n*        Free Parmlib (if allocated)\nFREPRMLB DS    0H\n         CLC   DDNAME,=CL8' '             ddname blank (not allocated)?\n         BZ    FREESTOR                   bif yes - skip free\n\n         IEFPRMLB REQUEST=FREE,DDNAME=DDNAME,CALLERNAME=CALLER,        x\n               RETCODE=RC,RSNCODE=RSN,PLISTVER=MAX,MF=(E,DYNPRMLB)\n         B     FREESTOR                   branch\n\nSTORERR  WTO 'MPFCMD01 MPFCMD unable to obtain storage'\n         B     BOOGIE                     and out\n\nFREESTOR DS    0H\n         L     R0,=AL4(WALEN)             load length for free\n         LR    R1,R13                     load storage addr\n         STORAGE RELEASE,LENGTH=(0),ADDR=(1)\n\nBOOGIE   DS    0H\n         XR    R15,R15                    set rc to zero regardless\n         PR                               return\n\nMPFCMD00 DC    C'MPFCMD: Error using IEFPRMLB service. RC xx RSN xx'\nCMD00LEN EQU   *-MPFCMD00\n\n*        Parmlib Service\n         IEFPRMLB PLISTVER=MAX,MF=(L,PRMLB_L)\nPRMLBLEN EQU   *-PRMLB_L\n\n*        SVC 34\nMGCRE    MGCRE MF=L\nMGCRELEN EQU   *-MGCRE\n\n         ORG    *-240\nXLATETBL DS     0CL256\n         DS     CL240\n         DC     C'0123456789ABCDEF'\n         LTORG\n\nWORKAREA DSECT\nSAVEAREA DS    18F                        savearea\nSIX      DS    XL6                        work field\nTEN      DS    XL10                       another work field\nRC       DS    F                          iefprmlb return code\nRSN      DS    F                          iefprmlb reason code\nCALLER   DS    CL8                        iefprmlb caller\nMEMBER   DS    CL8                        iefprmlb member name\nDDNAME   DS    CL8                        iefprmlb ddname\nBUFFEND@ DS    F                          end addr of parm buffer\nBUFFSIZE DS    F                          buffer size\nBUFFER@  DS    F                          buffer addr\nCONSID   DS    F                          X'00000000' (MASTER)\nCMD      DS    0D                         command\nCMDFLAG1 DS    X                          1st flag byte (x'00000000')\nCMDLEN   DS    X                          cmd length (32 bytes max)\nCMDTEXT  DS    CL80                       command text\nWTOLEN   DS    XL2                        wto length\nWTOFLAGS DS    XL2                        wto flags\nWTOTEXT  DS    CL80                       wto text\nDYNPRMLB DS    0D,CL(PRMLBLEN)            dynamic iefprmlb\nDYNMGCRE DS    0D,CL(MGCRELEN)            dynamic mgcre\nBUFFER   DS    0D,CL(8192-(*-WORKAREA))   iefprmlb buffer\nWALEN    EQU   *-WORKAREA\n         IEZVX100                         message dsect\n         IEFZPMAP                         iefprmlb buffer mapping\n         IEFZPRC                          iefprmlb completion codes\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT709/FILE709.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT709", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}