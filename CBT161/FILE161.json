{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011353000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 2527798, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 65, "INMDSNAM": "CBT.V500.FILE161.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 2527798, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 2527798, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE161.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00,\\t'", "DS1TRBAL": "b'\\x85X'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\x1a\\x00\\x0b\\x01\\x1d\\x00\\n\\x00-'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$PROSE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01[\\x00\\x00\\x00\\x84\\x19\\x8f\\x00\\x990\\x8f\\x072\\x01\\xb8\\x02`\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.91", "flags": 0, "createdate": "1984-07-16T00:00:00", "modifydate": "1999-11-04T07:32:00", "lines": 440, "newlines": 608, "modlines": 0, "user": "S218"}, "text": "        H F000116 D=OCT99\n        T FILE 116 - ISPF-PDF PANELS, ETC  FROM THE US AIR FORCE\n        K ISPF PDF AIR FORCE AIRFORCE V1 SADSC 2ISG V2 TREASURY FMS\n        K JIM MARSHALL PANELS MESSAGES SKELETIONS\n        K $DI ACCOUNT ALIAS AMBLIST ASMH BROWSE CALC CALENDAR\n        K CMD1 COBOLCHK COMPARE COPYSDS  COB2 COBOLII\n        K COBOL-FOR-MVS CUT CVD CVDI CVX CVXI\n        K DLINK DAPF DUTAPE DSMF\n        K DA DATE DEFINE DELETE DUDASD DUSER FORT FORTX FORTRAN GDDM\n        K FA FREEALL INFOSYS JULIAN JULISPF LASTIPL LISTAX\n        K LISTCAT LISTC LM MEMBER LISTSU POF POPUP POPUPS\n        K PRINTOFF QUEUE RMFMON  OBSWYLBUR  OMEGAMON RECEIVE\n        K PHOENIX SLSS  TSOE TSOCP SLSSPRT\n        K SEND SORT ST STATUS SHOWSS TIME TMS TRANSMIT USER ULX\n        K WYLBUR VPS VSFORT VSFORTRAN VTOC UCCEL UCC1 XMIT XBE\n\n         ***************************************************************\n         DSN=SHARE.FILE116.DATA RECFM=FB LRECL=80 BLKSIZE=6160 BLOCKS=\n         ***************************************************************\n\n         RELATED FILES: 31-33, 92, 94, 116-119, DOC  ALL FILES MEMBER $$PROSE\n\n                      I S P F  /  P D F\n\n              RELEASE 18   1 OCTOBER 1999 \"MAJOR Y2K AND POPUP RELEASE\"\n\n              COURTESY     JIM MARSHALL, CAPT, USAF-RET\n                           DEPT OF TREASURY / FINANCIAL MGMT SERVICE\n                           1-202-874-8353\n\n            ---------------------------------------------------------\n            THIS FILE IS A GOOD EXAMPLE OF A PERSON WHO IS WRITING ISPF/\n            PDF PANELS, ETC AND DOESN'T KNOW WHAT IT IS ALL ABOUT. BUT\n            IT WORKS !!!!!! SO IS IT THAT BAD? (IT MIGHT INSPIRE SOMEONE\n            TO WRITE MORE). MOST OF THIS FILE ARE ISPF/PDF GOODIES FOR\n            STRAIGHT TSO TYPE FUNCTIONS. NOW THAT WE HAVE ISPF/PDF, OUR\n            USERS (AND SOME SYSTEMS TYPES) ARE LOST IF IT ISN'T SITTING\n            ON A MENU, ETC.  SO AFTER TRYING TO GET THEM TO USE TSO AS\n            TSO, I STARTED TO PUT SOME THINGS INTO MENUS, PANELS, ETC.\n            THEY LOVE IT. SO WHO CAN ARGUE WITH SUCCESS. AS I SAID,\n            THIS IS MY FIRST ATTEMPT AT CODING THIS STUFF, SO I WILL\n            BE ADDING , SUBTRACTING, REFINING, ETC AS TIME GOES BY.\n\n            MY GOAL IS TO WRITE ISPF/PDF MENUS, ECT AND MODIFY AS LITTLE\n            IBM LIBRARIES AS POSSIBLE. SO TO UNDERSTAND HOW TO DO THIS\n            YOU MUST COMPREHEND THE FILES YOU CAN ALLOCATE IN LOGON\n            PROCEDURE OF A TSO USER THAT HAVE TO DO WITH ISPF/PDF\n            PANELS, ETC.\n\n\n            THERE ARE MORE DD CARDS IN THE LOGON PROC BUT THESE ARE\n            THE ONES  HAVE BEARING HERE. THE ONLY MODIFICATION I WILL\n            MAKE IS TO 'ISR@PRIM' IN IBM'S PANEL LIBRARY (THIS IS THE\n            MASTER PANEL). COPY THIS ONE TO OUR PANEL LIBRARY WHICH IS\n            CONCATENATED  AHEAD OF IBM'S. ALL OTHER LIBRARIES ARE JUST\n            CONCATENTATED WITH IBM'S. SINCE MY GOAL IS NOT TO CHANGEIBM\n            SCREENS ETC, WE WILL HAVE NO PROBLEM. NOW ALL WE DO IS PLACE\n            PANELS IN 'PANEL' LIBRARIES, MSGS IN 'MSG' LIBRARIES, ETC.\n\n            HINT: OR USE 'USR#' INTERFACE DESCRIBED BELOW !!!!\n\n            PHASE 2 OF THIS DISCUSSION SAYS I DO NOT WANT TO HAVE A\n            LOGON PROC FOR EVERY USER WHO WRITES APPLICATIONS. THIS\n            IF YOU LOOK AT THE SERIES OF THINGS CALLED 'USER#' I HAVE\n            A SUGGESTED INTERFACE USING THE 'LIBDEF' PHILOSOPHY AND\n            USE OF THE TSO \"ALTLIB\" FACILITY.  THERE EXISTS A TSO\n            COMMAND CALLED 'CONCAT' FOR USERS TO GET THE NEEDED\n            LIBRARIES IN SPECIAL CASES. SINCE THE ADVENT OF \"ALTLIB\",\n            THE USAGE OF 'CONCAT' SHOULD DECREASE.\n            ---------------------------------------------------------\n\n                     D I S C L A I M E R     !!!!!\n                 *************************************\n               USE ALL OF THESE AT YOUR OWN RISK, NATURALLY!\n                 *************************************\n\n            ---------------------------------------------------------\n           THE FILE IS CONSTRUCTED OF MEMBERS AS FOLLOWS: THE PANEL IS\n           PUT IN AS A NAME TRAILED WITH A #PN (N IF MORE THAN 1),\n           THE SKELETON IS THE NAME TRAILED WITH A #SN (N IF MORE THAN\n           1), AND THE CLIST IS THE NAME TRAILED WITH A #CN (N IF MORE\n           THAN 1).\n\n           NOTE1: HAVE YET TO INCORPORATE SOME TUTORIALS, MSGS, ETC.\n                  WHEN I DO, THE PHILOSOPHY IS THAT ALL ITEMS WILL\n                  FALL TOGETHER.\n           NOTE2: SOME OF THE TUTORIAL MATERIAL IS REALLY TUTORIALS\n                  IN THE PUREST SENSE, THEY ARE PANELS, SO THEY BELONG\n                  IN THE PANEL LIBRARY.\n           NOTE3: SOME OF MY CLISTS ARE NOT TOO ELEGANT. MY STYLE IS\n                  TO KEEP THINGS SIMPLE AND NOT TRY TO IMPRESS WITH\n                  SLICK CODING TRICKS.\n\n           FOR EXAMPLE:   CMD#P   - PANEL FOR THE COMMAND\n                          CMD#S   - SKELETON FOR THE COMMAND\n                          CMD#C   - CLIST FOR THE COMMAND\n                          CMDNN   - MSGS FOR THE COMMAND\n                          CMD..   - MAY HAVE A SPECIAL ISPF ALC PGM\n\n           -------------------------------------------------------\n           NOTE: I GOT INSPIRATION FROM THE PRINTOFF AND VTOC PANELS\n                 FOUND ON THE MODS TAPES. BUT I MODIFIED A LITTLE AND\n                 REPACKAGED. IF BY CHANCE I HAVE LEFT ANYTHING OUT,\n                 PLEASE LET ME KNOW, PUTTING A FILE TOGETHER IS HARD\n                 TRYING TO INCLUDE ALL THE PIECES. ONCE YOU GET INTO\n                 THIS STUFF IT IS LIKE EATING POTATO CHIPS !!!!!!\n\n           RELEASE 18  Y2K AND \"POPUP\" RELEASE.\n\n           $TOOL#C  - \"TOOL CHEST\" POPUP INVOCATION AND MENU.\n           AMB#..   - ADDED: DIALOG FOR EXECUTION OF \"AMBLIST\" USING\n                      \"POPUPS\".\n           CALEND#  - ADDED: POPUP CALENDAR.\n           COBMVS#..- ADDED: COBOL-FOR-MVS SYNTAX CHECK DIALOG USING\n                      \"POPUPS\".\n           COBOL#.. - OS/VS COBOL SYNTAX CHECK USING \"POPUPS\".\n           COB2#..  - COBOL II SYNTAX CHECK USING \"POPUPS\".\n           COMPR#.. - COMPARE USING \"POPUPS\", ETC.\n           COPYS#.. - COPYSDS USING \"POPUPS\",ETC.\n           CVDI#..  - ADDED: CONVERT-TO-DECIMAL DIALOG, ETC.\n           CVDISPF  - ADDED: CONVERT-TO-DECIMAL PGM.\n           CVXI#..  - ADDED: CONVERT-TO-HEXADECIMAL DIALOG, ETC.\n           CVXISPF  - ADDED: CONVERT-TO-HEXADECIMAL PGM\n           HLASM#.. - ADDED: HIGH LEVEL ALC DIALOG USING \"POPUPS\", ETC\n           HLASM    - ADDED: HIGH LEVEL ALC CHECKER PGM.\n           IDT#..   - TRANSMIT/RECEIVE CONVERTED TO \"POPUPS\".\n           JUL#..   - TSO JULIAN CMD CONVERTED TO \"POPUPS\" AND Y2K.\n           JULISPF  - TSO JULIAN CMD CONVERTED TO ISPF.\n           LASTI#.. - ADDED: LASTIPL TSOCP DIALOG USING \"POPUPS\".\n           LASTIPL. - ADDED: LASTIPL TSOCP TO ISPF.\n           PRT#..   - PRINTOFF CONVERTED TO \"POPUPS\".\n           SEND#..  - TSO SEND CONVERTED TO \"POPUPS\".\n           SORT#..  - SMALL SORT CONVERTED TO \"POPUPS\".\n           VFORT#.. - VSFORTRAN SYNTAX CHECK CONVERTED TO \"POPUPS\".\n\n           RELEASE 17\n           PRT#     - REWROTE TO ELIMINATE SKELETON\n           -------------------------------------------------------\n           RELEASE 16\n           $DI#C    - DELETED IN FAVOR OF EXECUTING TSO DIRECTLY.\n           ACC#     - REWROTE APPLICATION.\n           ACCT#    - DELETED OUTDATED APPLICATION.\n           DA#C     - DELETED IN FAVOR OF EXECUTING TSO DIRECTLY.\n           DAPF#C   - DELETED IN FAVOR OF EXECUTING TSO DIRECTLY.\n           DATE#C   - DELETED IN FAVOR OF EXECUTING TSO DIRECTLY.\n           DLINK#C  - DELETED IN FAVOR OF EXECUTING TSO DIRECTLY.\n           DSMF#C   - DELETED IN FAVOR OF EXECUTING TSO DIRECTLY.\n           DUDASD#C - DELETED IN FAVOR OF EXECUTING TSO DIRECTLY.\n           DUTAPE#C - DELETED IN FAVOR OF EXECUTING TSO DIRECTLY.\n           HELP#C   - DELETED IN FAVOR OF EXECUTING TSO DIRECTLY.\n           LASTI#C  - DELETED IN FAVOR OF EXECUTING TSO DIRECTLY.\n           LISTA#C  - DELETED IN FAVOR OF EXECUTING TSO DIRECTLY.\n           LSTSU#C  - DELETED IN FAVOR OF EXECUTING TSO DIRECTLY.\n           POF#C    - DELETED IN FAVOR OF EXECUTING TSO DIRECTLY.\n           RMFMON#C - DELETED IN FAVOR OF EXECUTING TSO DIRECTLY.\n           ST#C     - DELETED IN FAVOR OF EXECUTING TSO DIRECTLY.\n           SVCTAB#C - DELETED IN FAVOR OF EXECUTING TSO DIRECTLY.\n           TIME#C   - DELETED IN FAVOR OF EXECUTING TSO DIRECTLY.\n           VTOC#    - DELETED OLD OUTDATE APPLICATION.\n           -------------------------------------------------------\n           RELEASE 15\n           EDITMAC  - ADDED AS A COLLECTION OF ISPF EDIT MACROS.\n                      WITH  'CUT' AND 'PASTE' TO BEGIN.\n           VFORT#C  - FIXED CLIST ERROR.\n           -------------------------------------------------------\n           RELEASE 14  GET BACK INTO TSO/E AND \"REXX\" FOLLOWED ME !\n           COBOL#   - REWROTE TO ELIMINATE SKELETON\n           COB2#    - REWROTE TO ELIMINATE SKELETON\n           COPYS#   - REWROTE TO ELIMINATE SKELETON\n           COUNT#   - REWROTE TO ELIMINATE SKELETON\n           JUL#     - REWROTE TO ELIMINATE SKELETON\n           SEND#    - REWROTE TO ELIMINATE SKELETON\n           VFORT#   - REWROTE TO ELIMINATE SKELETON\n           -------------------------------------------------------\n           RELEASE 13  GET BACK INTO TSO/E AND \"REXX\" FOLLOWED ME !\n           ASMH#..  - UPDATED TO REMEMBER ENTRIES ON PANEL\n           COBOL#P  - UPDATED\n           COB2#... - UPDATED TO VS/COBOL II R3.1 LEVEL TO MATCH\n                      COB2CHK TSOCMD IN TSO FILE.\n           COMPR#P  - REWROTE\n           COPYS#.. - UPDATED\n           COUNT#P  - UPDATED\n           CUT...   - BILL GODFREY: ADDED SEE CUTDOC\n           CVD#     - ADDED, CONVERT HEX TO DECIMAL\n           CVX#     - ADDED, CONVERT DECIMAL TO HEX\n           FORT#P   - UPDATED\n           FORTX#P  - UPDATED\n           JUL#P    - UPDATED\n           LM#P     - UPDATED\n           MEMB#..  - UPDATED TO REFLECT UPDATE TO MEMBER TSO CMD BY\n                      BILL GODFREY\n           PRINT#P  - UPDATED\n           SEND#P   - UPDATED\n           SORT#P   - UPDATED\n           ULX...   - BILL GODFREY: ADDED SEE ULXDOC\n           VFORT#P  - UPDATED\n           XBE...   - BILL GODFREY: ADDED SEE XBEDOC\n           ZAP#P    - UPDATED\n\n          SUMMARY OF THE MODULES CONTAINED. HINT: MEMB. MEANS ALL\n          MEMBERS NEEDED FOR PANELS, SKELS, ETC TO USE A PARTICULAR\n          FUNCTION.\n\n\n          MEMBER   REL              DESCRIPTION\n          PREFIX\n\n          @PNL#CI   1  CLIST USED TO DETERMINE IF YOU ARE A SYSPROG\n                       SO YOU CAN GET 'TOOL BOX' PANEL. YOU NEVER\n                       TELL USER THEY CAN NOT HAVE SOMETHING BECAUSE\n                       THEY MAY COMPLAIN &  BOSS BOWS TO PRESSURE\n                       (THE WHIMP). SO YOU GIVE THE USER SOMETHING,\n                       YOU GIVE THEM SOMETHING OF LITTLE VAULE (LIKE\n                       PANEL '@PNL#PI')\n\n          @PNL#PI   1  THE WORTHLESS PANEL SPECIFIED ABOVE.\n\n          @PNL#PK   1  PANEL OF TSO COMMANDS FOR USERS.\n\n          @PNL#PM   1  MY CURRENT MASTER MENU.\n\n          @PNL#PX   1  THE SYSTEM PROGRAMMER'S 'TOOL BOX'\n\n          $TOOL#..  1  USER \"TOOL CHEST\" INVOKED VIA POPUP MENUS.\n                       GIVES OUR USER THE ILLUSION WE USE PC'S AND\n                       ARE NOT ALL OLD MAINFRAMERS.\n\n          ABND#     1  MEMBERS FOR USING THE ABEND TSO COMMAND. THIS\n                       WILL PROVIDE A FURTHER EXPLANATION OF SOME OF\n                       THE MORE COMMON ABEND.\n\n          ACC#      3  MEMBERS FOR USING THE TSO ACCOUNT CMD FOR FMS.\n\n          ADM#      1  TOOK INSPIRATION FROM BILL SMITH, SYNTEX TO\n                       MAKE PANEL FOR GDDM PRESENTATION GRAPHICS.GOT\n                       AN IBM 3279 AND WANTED TO DO SOME PGF.  BILL\n                       MADE IT EASY BY MAKING PANELS (LOVE IT).\n\n          AMB#      1  MEMBERS FOR INTERACTIVELY INVOKE \"AMBLIST\".\n\n          ASMH#     3  MEMBERS FOR USING TSO ASMH CMD. ASMH IS TO\n                       INTERACTIVE COMPILES. THESE SERIES OF SCREENS\n                       ETC, ACTUALLY LIMITS THE USER TO ONLY RECEIVE\n                       THEIR ERRORS TO A SYSTERM DD CARD. SINCE NO\n                       LISTINGS, OBJ MODULES, ETC CAN BE GENERATED,\n                       I CALL IT A 'CHEAP CHECKER'. UPDATED USING\n                       \"POPUPS\".\n\n          CALC#     1  MEMBERS FOR USING CALC CMD.\n                       CALC IS A TSO CALCULATOR.\n\n          CALEND#   1  MEMBERS FOR POPUP CALENDAR.\n\n          CNTI#     1  MEMBERS FOR ISPF VERSION OF THE COUNT TSO CMD.\n                       USE THE SUPPLIED \"COUNTI\" TSO CP.\n\n          COBMVS#   1  MEMBERS FOR COBOL-FOR-MVS CHEAP CHECKER\n                       UPDATED USING \"POPUPS\".  TSOCP COBMVS IS\n                       FOUND IN FILE 300.\n\n          COBOL#    3  MEMBERS FOR USING COBOLCHK. COBOLCHK IS TO\n                       INTERACTIVE COMPILES. THESE SERIES OF SCREENS\n                       ETC, ACTUALLY LIMITS THE USER TO ONLY RECEIVE\n                       THEIR ERRORS TO A SYSTERM DD CARD. SINCE NO\n                       LISTINGS, OBJ MODULES, ETC CAN BE GENERATED,\n                       I CALL IT A 'CHEAP CHECKER'.\n\n          COB2#     3  MEMBERS FOR COBOL II VERSION OF CHEAP CHECKER\n                       UPDATED USING \"POPUPS\".\n\n          COMPR#    3  MEMBERS FOR USING THE TSO COMPARE CMD.\n                       UPDATED USING \"POPUPS\".\n\n          COPYS#    2  MEMBERS FOR USING TSO COPYSDS CMD. COPYSDS IS A\n                       SEQUENTIAL DATASET COPY. UPDATED USING \"POPUPS\".\n\n          COUNT#    2  MEMBERS FOR USING THE TSO COUNT COMMAND.\n                       COUNT THE NUMBER OF RECORDS IN A FILE.\n\n          CUT...    1  BILL GODFREY'S 'CUT' AND 'PASTE' MACROS IN\n                       ALCCODE VERSUS CLIST (IMPRESSIVE). SEE CUTDOC\n\n          CVDI      1  ISPF VERSION OF CVD TSOCP.\n\n          CVDI#     2  MEMBERS FOR CVD TSOCP (CONVERTS HEX TO DEC). ADDED\n                       \"POPUP\" SUPPORT.\n\n          CVXI      1  ISPF VERSION OF CVX TSOCP.\n\n          CVXI#     2  MEMBERS FOR CVX TSOCP (CONVERTS DEC  TO HEX). ADDED\n                       \"POPUP\" SUPPORT.\n\n          DEFA#     1  MEMBERS FOR USING DEFINING AN ALIAS IN YOUR\n                       MASTER CATALOG.\n\n          DELA#     2  MEMBERS FOR USING DELETING AN ALIAS FROM THE\n                       MASTER  CATALOG.\n\n          FORT#     1  MEMBERS FOR USING THE FORT CMD. FORT IS TO DO\n                       INTERACTIVE COMPILES WITH FORTRAN G1. THESE\n                       SERIES OF SCREENS, ETC, ACTUALLY LIMITS THE\n                       THE USER TO ONLY RECEIVE THEIR ERRORS TO A\n                       SYSTERM DD CARD. SINCE NO LISTINGS, OR OBJECT\n                       CAN BE GENERATED, I CALL IT A 'CHEAP CHECKER'\n\n          FORTX#    1  MEMBERS FOR USING THE FORTX CMD. FORTX IS TO\n                       DO INTERACTIVE COMPILES, FORTRAN-HX. THESE\n                       SERIES OF SCREENS, ETC, ACTUALLY LIMITS THE\n                       THE USER TO ONLY RECEIVE THEIR ERRORS TO A\n                       SYSTERM DD CARD. SINCE NO LISTINGS, OBJECT\n                       CAN BE GENERATED, I CALL IT A 'CHEAP CHECKER'\n\n          FREEA#    1  MEMBERS FOR USING FREEALL CMD.\n\n          HLASM#    1  DIALOG FOR USING \"HLASM\" INVOKING OF HIGH LEVEL\n                       ASSEMBLER, USING \"POPUPS\".  TSOCP HLASM IS\n                       FOUND IN FILE 300.\n\n          IDT#      1  PANELS SUPPORT TSO/E TRANSMIT-RECEIVE. OUR\n                       USERS ARE NOVICES AND NEEDED A WAY OF USING\n                       FUNCTIONS. SEE THE TSO FILE FOR THE RELATED\n                       MODULES CALLED 'INMXPARM' AND 'INMXZ02' EXIT.\n                       THIS CONTAINS AN UPDATED VERSION OF WHAT WAS\n                       CONTAINED IN THE MEMBERS TRC#.\n\n          ISG@MSTR  2  IS THE PRIMARY PANEL THAT YOUR GET WITH YOU\n                       GET INTO ISPF/PDF FOR 2ISG SYSTEM PROGRAMMERS\n                       BE CONCATENATED AHEAD OF IBM'S (ISPPLIB).\n\n          ISR@PRIM  2  IS THE PRIMARY PANEL THAT YOUR GET WITH YOU\n                       GET INTO ISPF/PDF. PANEL LIB YOU USE SHOULD\n                       BE CONCATENATED AHEAD OF IBM'S (ISPPLIB).\n\n          JUL#      2  MEMBERS FOR JULISPF TSO CMD USING \"POPUPS\".\n\n          JULISPF   1  ISPF VERSION OF JULIAN TSO CMD.\n\n          LASTI#    1  LASTIPL TSOCP DIALOG USING \"POPUPS\".\n\n          LASTIPL   1  ISPF VERSION OF LASTIPL TSOCP.\n\n          LISTC#    1  MEMBERS FOR USING LISTCAT CMD.\n\n          LSTSU#    1  MEMBERS FOR 'LISTSU' TSO CMD\n\n          MEMB#     1  MEMBERS FOR USING MEMBER  CMD.\n\n          NEWS#     1  MEMBERS FOR USING 2ISG NEWS FACILITY.\n                       NOT TOO APPLICABLE TO OTHER INSTALLATIONS\n                       BUT IT SHOWS ONE HOW TO SELECTIVELY INVOKE\n                       'BROWSE' SERVICE FROM YOUR  OWN PANELS, ETC.\n\n          NFLE#     1  EL-CHEAPO FILE TRANSFER TO VM VIA NJE.\n\n          NPRT#     1  EL-CHEAPO FILE TRANSFER TO VM VIA NJE.\n\n          NPUN#     1  EL-CHEAPO FILE TRANSFER TO VM VIA NJE.\n\n          OBSL#     1  MEMBER FOR INVOKING 'OBS' WYLBUR PROGRAM TO\n                       DECOMPRESS WYLBUR FILE, THEN INVOKE ISPF/PDF\n                       BROWSE SERVICE TO BROWSE IT.\n\n          OMEG#     1  MEMBERS FOR INVOKING OMEGAMON IN TSO.\n\n          PHIX#     1  CLIST FOR INVOKING PHOENIX COMPUTER BASE\n                       TRAINING SYSTEM. INVOKES A FRONT-END TSO CP\n                       TO THE PHOENIX TSO CP (LIMITS WHO CAN GET\n                       INTO PHOENIX AND WHO CAN NOT).\n\n          PRT#      3  MEMBERS FOR USING PRINTOFF CMD.  THIS IS\n                       THE FAMOUS 'PRINTOFF' FROM MY TSO FILE.\n\n          SADSYSP   2  THIS IS THE '2ISG'  PANEL MEMBER THAT GOES\n                       IN YOUR PANEL LIBRARY FOR PROGRAM PRODUCTS.\n                       NEEDED ANOTHER PANEL TO ADD THINGS. LOOK\n                       AT ISR@PRIM  AND THIS MEMBER AND IT WILL\n                       WILL MAKE MORE SENSE.\n\n          SADTSOP   2  THIS IS THE '2ISG'  PANEL MEMBER THAT\n                       GOES IN YOUR PANEL LIBRARY FOR TSO COMMANDS.\n                       LOOK AT ISR@PRIM  AND THIS MEMBER AND IT\n                       IT WILL MAKE MORE SENSE.\n\n          SADUTLP   2  THIS IS THE '2ISG'  PANEL MEMBER THAT\n                       GOES IN YOUR PANEL LIB FOR UTILITY FUNCTIONS\n                       AND 'CHEAP CHECKERS'. LOOK AT ISR@PRIM AND\n                       THIS MEMBER AND IT WILL MAKE MORE SENSE.\n\n          SEND#     2  MEMBERS FOR USING SEND TSO CMD.  'SEND'\n                       A MSG TO ANOTHER USER.\n\n          SLSS#     2  A MODIFICATION OF THE SLSS ISPF/PDF PANELS ON\n                       THE MODS TAPE. EXCEPT THIS ONE HAS COBOL PGM\n                       AS THE DRIVER. JIM PETERSON REWROTE THE ISPF\n                       APPLICATION MAKING IT MORE EFFICIENT (I'M\n                       IMPRESSED. I TOOK ALL THE CODE AND REWROTE IT\n                       MYSELF WHEN I TRIED TO IMPLEMENT IT. IT ALL\n                       WORKS NOW. SEE MEMBER SLSS##PR FOR DOC.\n\n          SORT#     3  DO A SMALL SORT INACTIVELY.\n\n          SORTLNK   2  ALC PGM TO \"LINK EP=SORT', ELIMINATES \"CALL\".\n                       UPDATED TO USE \"POPUPS\".\n\n          SYSLG#    1  MEMBERS FOR USING BROWSING THE SPOOLED TO\n                       DISK, OPERATOR CONSOLE LOGS. PUT IT INTO DISK\n                       FILES FOR THE PAST 3 WEEKS FOR BROWSING.\n\n          SYSPR#P   1  SECONDAY PANEL FOR GETTING INTO 2ISG SYSTEM\n                       PROG FUNCTIONS. LOOK AT CLIST THAT IS INVOKED\n                       OUT OF ISR@PRIM WHEN ENTER 'S'. CLIST INVOKED\n                       CHECKS TO SEE IF 1ST CHAR  OF USERID BEGINS\n                       WITH 'S'. SO YOU ARE ONE OF SYSTEMS, IF NOT,\n                       YOU ARE A BAD GUY AND RETURNED TO ISR@PRIM.\n\n          TMS#      1  MEMBERS FOR USING TMS CMD (INVOKE UCC1 PGM\n                       FOR INTERACTIVE TMS ACCESS). SEE DOC MEMBER\n                       CALLED  TMS##PR.\n\n          ULX...    1  BILL GODFREY'S ISPF DISK SPACE INFO PGM.\n                       INDEXED VTOCS ARE SUPPORTED. USER CAN OPT\n                       DISPLAY A LIST OF FREE SPACE.  SEE ULXDOC.\n\n          USR#      1  USER INTERFACE USING LIBDEF FACS. DON'T WANT\n                       USERS MESSING WITH MY LOGON PROCS.\n\n          VFORT#    3  MEMBERS FOR USING VSFORT CMD. VSFORT IS TO\n                       DO INTERACTIVE COMPILES WITH VS FORTRAN.\n                       SERIES OF SCREENS, ETC, ACTUALLY LIMITS THE\n                       THE USER TO ONLY RECEIVE THEIR ERRORS TO A\n                       SYSTERM DD CARD. SINCE NO LISTINGS, OBJECT\n                       CAN BE GENERATED, I CALL IT A 'CHEAP CHECKER'\n                       UPDATED TO USE \"POPUPS\".\n\n          XBE...    1  BILL GODFREY'S PGM TO SET UP ISPF,  CAN HAVE\n                       SHORT CODE WORDS FOR DSNS YOU FREQUENTLY EDIT\n                       OR BROWSE. SEE XBEDOC FOR DETAILS.\n\n          ZAP#      1  MEMBERS FOR USING ZAP CMD.\n        $EOM\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$ZDOC": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x92\\x07\\x7f\\x00\\x936/\\x06$\\x00\\x04\\x01\\xa4\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1992-03-17T00:00:00", "modifydate": "1993-12-28T06:24:00", "lines": 4, "newlines": 420, "modlines": 0, "user": "S218"}, "text": "//***FILE 161 IS FROM JIM MARSHALL (AIR FORCE RETIREE) AND CONTAINS *\n//*           VARIOUS ISPF/PDF MENUS, PANELS, SKELETONS, CLISTS,    *\n//*           ETC. SEE MEMBER $$PROSE FOR ADDITIONAL INFORMATION.   *\n//*           THE FILE IS IN IEBUPDTE SYSIN FORMAT.                 *\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$TOOL#C": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x99\\x16o\\x00\\x99\\x17/\\x06\\x02\\x000\\x00.\\x00\\x05\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1999-06-15T00:00:00", "modifydate": "1999-06-21T06:02:00", "lines": 48, "newlines": 46, "modlines": 5, "user": "S218"}, "text": "PROC 0 DEBUG\n/* ----------------------------------------------------------- */\n/* THIS CLIST CAN BE USED TO INVOKE THE TOOL BOX               */\n/*                                                             */\n/*                    JIM MARSHALL                             */\n/* ----------------------------------------------------------- */\nCONTROL NOLIST NOMSG  NOFLUSH  PROMPT\nIF  &DEBUG \u00ac= &STR() THEN  +\n    CONTROL  MSG  LIST  CONLIST  SYMLIST\n/* ----------------------------------------------------------- */\n/*    ALLOCATE THE ISPF FILE TO OUR OWN DDNAMES.               */\n/* ----------------------------------------------------------- */\nALLOC FI(TOOLS)  DA('FSYX1.USER.TSO.TOOLBOX')     SHR REUSE\n/* ----------------------------------------------------------- */\n/*    USE ISPF'S \"LIBDEF\" FACILITY TO DYNAMICALLY ADD,         */\n/*    TEMPORARILY, OUR OWN ISPF LIBRARY.                       */\n/* ----------------------------------------------------------- */\nISPEXEC  LIBDEF  ISPPLIB  LIBRARY ID(TOOLS)\nISPEXEC  LIBDEF  ISPSLIB  LIBRARY ID(TOOLS)\n/* ----------------------------------------------------------- */\n/*     ISPF RELEASE 3.5+  \"ALTLIB\" FACILITY, USE IT.           */\n/* ----------------------------------------------------------- */\n/*\nALTLIB ACT APPLICATION(CLIST) DA('FSYX1.USER.TSO.TOOLBOX')\n/* ----------------------------------------------------------- */\n/*      THNGS ARE NOW \"RIGHT\", LET'S GET THIS PARTY STARTED    */\n/*      VIEWING THE USER GUIDE.                                */\n/* ----------------------------------------------------------- */\n/*                                                             */\nISPEXEC ADDPOP COLUMN(1) ROW(1)\nISPEXEC SELECT PANEL($TOOL#P) NEWAPPL(TOL#) PASSLIB\nISPEXEC REMPOP\n/*                                                             */\n/* ----------------------------------------------------------- */\n/*      DYNAMICALLY REMOVE OUR ISPF FILE FROM ISPF             */\n/* ----------------------------------------------------------- */\nISPEXEC  LIBDEF  ISPPLIB\nISPEXEC  LIBDEF  ISPSLIB\n/* ----------------------------------------------------------- */\n/*      DEACTIVATE THE ALTLIB LIBRARY.                         */\n/* ----------------------------------------------------------- */\n/*                                                             */\nALTLIB DEACTIVATE APPLICATION(CLIST)\n/* ----------------------------------------------------------- */\n/*      TIDY UP AND GO HOME.                                   */\n/* ----------------------------------------------------------- */\nFREE FI(TOOLS)\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$TOOL#P": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x00\\x99\\x17/\\x00\\x99!\\x9f\\x128\\x007\\x006\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1999-06-21T00:00:00", "modifydate": "1999-08-07T12:38:00", "lines": 55, "newlines": 54, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(76,22) CMD(ZCMD)\n+\n%COMMAND ===>_ZCMD                                                   +\n%\n%0+..High Level ASM Syntax Check.%A+..SEND a MSG to TSO User.\n%1+..OS/VS COBOL Syntax Check.   %B+..Date/Time Last System Reload.\n%2+..VS COBOL II Syntax Check.   %C+..Count Records in a File.\n%3+..ASM-H V2 Syntax Check.      %D+..Display Signed on TSO Userids.\n%4+..VS FORTRAN Syntax Check.    %E+..FAX a Message Using FAXGate.\n%5+..COBOL-FOR-MVS Syntax Check. %F+..Interactive AMBLIST.\n%6+.. -- future use --           %G+..Convert DECIMAL to HEX.\n%7+..COPYSDS - Copy file.        %I+..Convert HEX to DECIMAL.\n%8+.. -- future use --           %J+..JULIAN+/ Gregorian Date Convert.\n%9+..Compare Two Source Files.   %L+..Improved %LISTALC+ command.\n%S+..Foreground %SORT+           %P+..Interactive%PRINTOFF+\n%T+..IDTF+Personal File Transfer\n%X+-%EXIT+or END to leave.\n%\n%\n)INIT\n  .HELP = ISR00003\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n  &ZWINTTL = 'Tool Chest: Utilities and Syntax Checkers'\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n                0,'CMD(%HLASM#C)'\n                1,'CMD(%COBOL#C)'\n                2,'CMD(%COB2#C)'\n                3,'CMD(%ASMH#C)'\n                4,'CMD(%VFORT#C)'\n                5,'CMD(%COBMVS#C)'\n                7,'CMD(%COPYS#C)'\n                9,'CMD(%COMPR#C)'\n                A,'CMD(%SEND#C)'\n                B,'CMD(%LASTI#C)'\n                C,'CMD(%CNTI#C)'\n                D,'CMD(DUSER)'\n                E,'CMD(%FAX#C)'\n                F,'CMD(%AMB#C)'\n                G,'CMD(%CVXI#C)'\n                I,'CMD(%CVDI#C)'\n                J,'CMD(%JUL#C)'\n                L,'CMD(%DDN#C)'\n                P,'CMD(%PRT#C)'\n                S,'CMD(%SORT#C)'\n                T,'CMD(%IDT#C)'\n                X,'EXIT'\n              ' ',' '\n                *,'?' )\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE161": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x99\\x08?\\x00\\x991?\\x147\\x01\\x14\\x01\\x06\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-11-09T14:37:00", "lines": 276, "newlines": 262, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 161 IS FROM JIM MARSHALL (AIR FORCE RETIREE) AND CONTAINS *   FILE 161\n//*           VARIOUS ISPF/PDF MENUS, PANELS, SKELETONS, CLISTS,    *   FILE 161\n//*           ETC. SEE MEMBER $$PROSE FOR ADDITIONAL INFORMATION.   *   FILE 161\n//*           THE FILE IS IN IEBUPDTE SYSIN FORMAT.                 *   FILE 161\n//*                                                                 *   FILE 161\n//*           JIM HAS RETIRED FROM THE AIR FORCE.  HIS ADDRESS IS:  *   FILE 161\n//*                                                                 *   FILE 161\n//*                 JIM MARSHALL, US TREASURY                       *   FILE 161\n//*                 FINANCIAL MANAGEMENT SERVICE                    *   FILE 161\n//*                 PRINCE GEORGES PLAZA II - ROOM 400B             *   FILE 161\n//*                 3700 EAST-WEST HIGHWAY                          *   FILE 161\n//*                 HYATTSVILLE, MD  20782                          *   FILE 161\n//*                 202-874-8353                                    *   FILE 161\n//*                                                                 *   FILE 161\n//*              email:  jim.marshall@fms.treas.gov                 *   FILE 161\n//*                                                                 *   FILE 161\n//*       RELEASE  18   -  01 Oct 99                                *   FILE 161\n//*                                                                 *   FILE 161\n//*                                                                 *   FILE 161\n//*       SUMMARY OF THE MODULES CONTAINED. HINT: MEMBER MEANS      *   FILE 161\n//*       ALL MEMBERS NEEDED FOR PANELS, SKELS, ETC TO USE A        *   FILE 161\n//*       PARTICULAR FUNCTION.                                      *   FILE 161\n//*                                                                 *   FILE 161\n//*                                                                 *   FILE 161\n//*       MEMBER   REL              DESCRIPTION                     *   FILE 161\n//*       PREFIX                                                    *   FILE 161\n//*                                                                 *   FILE 161\n//*       @PNL#CI   1  CLIST USED TO DETERMINE IF YOU ARE A         *   FILE 161\n//*                    SYSPROG SO YOU CAN GET 'TOOL BOX' PANEL.     *   FILE 161\n//*                    YOU NEVER TELL USER THEY CAN NOT HAVE        *   FILE 161\n//*                    SOMETHING BECAUSE THEY MAY COMPLAIN &        *   FILE 161\n//*                    BOSS BOWS TO PRESSURE (THE WHIMP). SO YOU    *   FILE 161\n//*                    GIVE THE USER SOMETHING, YOU GIVE THEM       *   FILE 161\n//*                    SOMETHING OF LITTLE VAULE (LIKE PANEL        *   FILE 161\n//*                    '@PNL#PI')                                   *   FILE 161\n//*                                                                 *   FILE 161\n//*       @PNL#PI   1  THE WORTHLESS PANEL SPECIFIED ABOVE.         *   FILE 161\n//*                                                                 *   FILE 161\n//*       @PNL#PK   1  PANEL OF TSO COMMANDS FOR USERS.             *   FILE 161\n//*                                                                 *   FILE 161\n//*       @PNL#PM   1  MY CURRENT MASTER MENU.                      *   FILE 161\n//*                                                                 *   FILE 161\n//*       @PNL#PX   1  THE SYSTEM PROGRAMMER'S 'TOOL BOX'           *   FILE 161\n//*                                                                 *   FILE 161\n//*       $TOOL#..  1  USER \"TOOL CHEST\" INVOKED VIA POPUP MENUS.   *   FILE 161\n//*                    GIVES OUR USER THE ILLUSION WE USE PC'S      *   FILE 161\n//*                    AND ARE NOT ALL OLD MAINFRAMERS.             *   FILE 161\n//*                                                                 *   FILE 161\n//*       ABND#     1  MEMBERS FOR USING THE ABEND TSO COMMAND.     *   FILE 161\n//*                    THIS WILL PROVIDE A FURTHER EXPLANATION OF   *   FILE 161\n//*                    SOME OF THE MORE COMMON ABEND.               *   FILE 161\n//*                                                                 *   FILE 161\n//*       ACC#      3  MEMBERS FOR USING THE TSO ACCOUNT CMD FOR    *   FILE 161\n//*                    FMS.                                         *   FILE 161\n//*                                                                 *   FILE 161\n//*       ADM#      1  TOOK INSPIRATION FROM BILL SMITH, SYNTEX     *   FILE 161\n//*                    TO MAKE PANEL FOR GDDM PRESENTATION          *   FILE 161\n//*                    GRAPHICS.GOT AN IBM 3279 AND WANTED TO DO    *   FILE 161\n//*                    SOME PGF.  BILL MADE IT EASY BY MAKING       *   FILE 161\n//*                    PANELS (LOVE IT).                            *   FILE 161\n//*                                                                 *   FILE 161\n//*       AMB#      1  MEMBERS FOR INTERACTIVELY INVOKE \"AMBLIST\".  *   FILE 161\n//*                                                                 *   FILE 161\n//*       ASMH#     3  MEMBERS FOR USING TSO ASMH CMD. ASMH IS TO   *   FILE 161\n//*                    INTERACTIVE COMPILES. THESE SERIES OF        *   FILE 161\n//*                    SCREENS ETC, ACTUALLY LIMITS THE USER TO     *   FILE 161\n//*                    ONLY RECEIVE THEIR ERRORS TO A SYSTERM DD    *   FILE 161\n//*                    CARD. SINCE NO LISTINGS, OBJ MODULES, ETC    *   FILE 161\n//*                    CAN BE GENERATED, I CALL IT A 'CHEAP         *   FILE 161\n//*                    CHECKER'. UPDATED USING \"POPUPS\".            *   FILE 161\n//*                                                                 *   FILE 161\n//*       CALC#     1  MEMBERS FOR USING CALC CMD.                  *   FILE 161\n//*                    CALC IS A TSO CALCULATOR.                    *   FILE 161\n//*                                                                 *   FILE 161\n//*       CALEND#   1  MEMBERS FOR POPUP CALENDAR.                  *   FILE 161\n//*                                                                 *   FILE 161\n//*       CNTI#     1  MEMBERS FOR ISPF VERSION OF THE COUNT TSO    *   FILE 161\n//*                    CMD.  USE THE SUPPLIED \"COUNTI\" TSO CP.      *   FILE 161\n//*                                                                 *   FILE 161\n//*       COBMVS#   1  MEMBERS FOR COBOL-FOR-MVS CHEAP CHECKER      *   FILE 161\n//*                    UPDATED USING \"POPUPS\".  TSOCP COBMVS IS     *   FILE 161\n//*                    FOUND IN FILE 300.                           *   FILE 161\n//*                                                                 *   FILE 161\n//*       COBOL#    3  MEMBERS FOR USING COBOLCHK. COBOLCHK IS TO   *   FILE 161\n//*                    INTERACTIVE COMPILES. THESE SERIES OF        *   FILE 161\n//*                    SCREENS ETC, ACTUALLY LIMITS THE USER TO     *   FILE 161\n//*                    ONLY RECEIVE THEIR ERRORS TO A SYSTERM DD    *   FILE 161\n//*                    CARD. SINCE NO LISTINGS, OBJ MODULES, ETC    *   FILE 161\n//*                    CAN BE GENERATED, I CALL IT A 'CHEAP         *   FILE 161\n//*                    CHECKER'.                                    *   FILE 161\n//*                                                                 *   FILE 161\n//*       COB2#     3  MEMBERS FOR COBOL II VERSION OF CHEAP        *   FILE 161\n//*                    CHECKER UPDATED USING \"POPUPS\".              *   FILE 161\n//*                                                                 *   FILE 161\n//*       COMPR#    3  MEMBERS FOR USING THE TSO COMPARE CMD.       *   FILE 161\n//*                    UPDATED USING \"POPUPS\".                      *   FILE 161\n//*                                                                 *   FILE 161\n//*       COPYS#    2  MEMBERS FOR USING TSO COPYSDS CMD. COPYSDS   *   FILE 161\n//*                    IS A SEQUENTIAL DATASET COPY. UPDATED        *   FILE 161\n//*                    USING \"POPUPS\".                              *   FILE 161\n//*                                                                 *   FILE 161\n//*       COUNT#    2  MEMBERS FOR USING THE TSO COUNT COMMAND.     *   FILE 161\n//*                    COUNT THE NUMBER OF RECORDS IN A FILE.       *   FILE 161\n//*                                                                 *   FILE 161\n//*       CUT...    1  BILL GODFREY'S 'CUT' AND 'PASTE' MACROS IN   *   FILE 161\n//*                    ALCCODE VERSUS CLIST (IMPRESSIVE). SEE       *   FILE 161\n//*                    CUTDOC                                       *   FILE 161\n//*                                                                 *   FILE 161\n//*       CVDI      1  ISPF VERSION OF CVD TSOCP.                   *   FILE 161\n//*                                                                 *   FILE 161\n//*       CVDI#     2  MEMBERS FOR CVD TSOCP (CONVERTS HEX TO       *   FILE 161\n//*                    DEC). ADDED \"POPUP\" SUPPORT.                 *   FILE 161\n//*                                                                 *   FILE 161\n//*       CVXI      1  ISPF VERSION OF CVX TSOCP.                   *   FILE 161\n//*                                                                 *   FILE 161\n//*       CVXI#     2  MEMBERS FOR CVX TSOCP (CONVERTS DEC TO       *   FILE 161\n//*                    HEX). ADDED \"POPUP\" SUPPORT.                 *   FILE 161\n//*                                                                 *   FILE 161\n//*       DEFA#     1  MEMBERS FOR USING DEFINING AN ALIAS IN       *   FILE 161\n//*                    YOUR MASTER CATALOG.                         *   FILE 161\n//*                                                                 *   FILE 161\n//*       DELA#     2  MEMBERS FOR USING DELETING AN ALIAS FROM     *   FILE 161\n//*                    THE MASTER  CATALOG.                         *   FILE 161\n//*                                                                 *   FILE 161\n//*       FORT#     1  MEMBERS FOR USING THE FORT CMD. FORT IS TO   *   FILE 161\n//*                    DO INTERACTIVE COMPILES WITH FORTRAN G1.     *   FILE 161\n//*                    THESE SERIES OF SCREENS, ETC, ACTUALLY       *   FILE 161\n//*                    LIMITS THE THE USER TO ONLY RECEIVE THEIR    *   FILE 161\n//*                    ERRORS TO A SYSTERM DD CARD. SINCE NO        *   FILE 161\n//*                    LISTINGS, OR OBJECT CAN BE GENERATED, I      *   FILE 161\n//*                    CALL IT A 'CHEAP CHECKER'                    *   FILE 161\n//*                                                                 *   FILE 161\n//*       FORTX#    1  MEMBERS FOR USING THE FORTX CMD. FORTX IS    *   FILE 161\n//*                    TO DO INTERACTIVE COMPILES, FORTRAN-HX.      *   FILE 161\n//*                    THESE SERIES OF SCREENS, ETC, ACTUALLY       *   FILE 161\n//*                    LIMITS THE THE USER TO ONLY RECEIVE THEIR    *   FILE 161\n//*                    ERRORS TO A SYSTERM DD CARD. SINCE NO        *   FILE 161\n//*                    LISTINGS, OBJECT CAN BE GENERATED, I CALL    *   FILE 161\n//*                    IT A 'CHEAP CHECKER'                         *   FILE 161\n//*                                                                 *   FILE 161\n//*       FREEA#    1  MEMBERS FOR USING FREEALL CMD.               *   FILE 161\n//*                                                                 *   FILE 161\n//*       HLASM#    1  DIALOG FOR USING \"HLASM\" INVOKING OF HIGH    *   FILE 161\n//*                    LEVEL ASSEMBLER, USING \"POPUPS\".  TSOCP      *   FILE 161\n//*                    HLASM IS FOUND IN FILE 300.                  *   FILE 161\n//*                                                                 *   FILE 161\n//*       IDT#      1  PANELS SUPPORT TSO/E TRANSMIT-RECEIVE. OUR   *   FILE 161\n//*                    USERS ARE NOVICES AND NEEDED A WAY OF USING  *   FILE 161\n//*                    FUNCTIONS. SEE THE TSO FILE FOR THE RELATED  *   FILE 161\n//*                    MODULES CALLED 'INMXPARM' AND 'INMXZ02'      *   FILE 161\n//*                    EXIT.  THIS CONTAINS AN UPDATED VERSION OF   *   FILE 161\n//*                    WHAT WAS CONTAINED IN THE MEMBERS TRC#.      *   FILE 161\n//*                                                                 *   FILE 161\n//*       ISG@MSTR  2  IS THE PRIMARY PANEL THAT YOUR GET WITH      *   FILE 161\n//*                    YOU GET INTO ISPF/PDF FOR 2ISG SYSTEM        *   FILE 161\n//*                    PROGRAMMERS BE CONCATENATED AHEAD OF         *   FILE 161\n//*                    IBM'S (ISPPLIB).                             *   FILE 161\n//*                                                                 *   FILE 161\n//*       ISR@PRIM  2  IS THE PRIMARY PANEL THAT YOUR GET WITH      *   FILE 161\n//*                    YOU GET INTO ISPF/PDF. PANEL LIB YOU USE     *   FILE 161\n//*                    SHOULD BE CONCATENATED AHEAD OF IBM'S        *   FILE 161\n//*                    (ISPPLIB).                                   *   FILE 161\n//*                                                                 *   FILE 161\n//*       JUL#      2  MEMBERS FOR JULISPF TSO CMD USING            *   FILE 161\n//*                    \"POPUPS\".                                    *   FILE 161\n//*                                                                 *   FILE 161\n//*       JULISPF   1  ISPF VERSION OF JULIAN TSO CMD.              *   FILE 161\n//*                                                                 *   FILE 161\n//*       LASTI#    1  LASTIPL TSOCP DIALOG USING \"POPUPS\".         *   FILE 161\n//*                                                                 *   FILE 161\n//*       LASTIPL   1  ISPF VERSION OF LASTIPL TSOCP.               *   FILE 161\n//*                                                                 *   FILE 161\n//*       LISTC#    1  MEMBERS FOR USING LISTCAT CMD.               *   FILE 161\n//*                                                                 *   FILE 161\n//*       LSTSU#    1  MEMBERS FOR 'LISTSU' TSO CMD                 *   FILE 161\n//*                                                                 *   FILE 161\n//*       MEMB#     1  MEMBERS FOR USING MEMBER  CMD.               *   FILE 161\n//*                                                                 *   FILE 161\n//*       NEWS#     1  MEMBERS FOR USING 2ISG NEWS FACILITY.  NOT   *   FILE 161\n//*                    TOO APPLICABLE TO OTHER INSTALLATIONS BUT    *   FILE 161\n//*                    IT SHOWS ONE HOW TO SELECTIVELY INVOKE       *   FILE 161\n//*                    'BROWSE' SERVICE FROM YOUR  OWN PANELS,      *   FILE 161\n//*                    ETC.                                         *   FILE 161\n//*                                                                 *   FILE 161\n//*       NFLE#     1  EL-CHEAPO FILE TRANSFER TO VM VIA NJE.       *   FILE 161\n//*                                                                 *   FILE 161\n//*       NPRT#     1  EL-CHEAPO FILE TRANSFER TO VM VIA NJE.       *   FILE 161\n//*                                                                 *   FILE 161\n//*       NPUN#     1  EL-CHEAPO FILE TRANSFER TO VM VIA NJE.       *   FILE 161\n//*                                                                 *   FILE 161\n//*       OBSL#     1  MEMBER FOR INVOKING 'OBS' WYLBUR PROGRAM     *   FILE 161\n//*                    TO DECOMPRESS WYLBUR FILE, THEN INVOKE       *   FILE 161\n//*                    ISPF/PDF BROWSE SERVICE TO BROWSE IT.        *   FILE 161\n//*                                                                 *   FILE 161\n//*       OMEG#     1  MEMBERS FOR INVOKING OMEGAMON IN TSO.        *   FILE 161\n//*                                                                 *   FILE 161\n//*       PHIX#     1  CLIST FOR INVOKING PHOENIX COMPUTER BASE     *   FILE 161\n//*                    TRAINING SYSTEM. INVOKES A FRONT-END TSO     *   FILE 161\n//*                    CP TO THE PHOENIX TSO CP (LIMITS WHO CAN     *   FILE 161\n//*                    GET INTO PHOENIX AND WHO CAN NOT).           *   FILE 161\n//*                                                                 *   FILE 161\n//*       PRT#      3  MEMBERS FOR USING PRINTOFF CMD.  THIS IS     *   FILE 161\n//*                    THE FAMOUS 'PRINTOFF' FROM MY TSO FILE.      *   FILE 161\n//*                                                                 *   FILE 161\n//*       SADSYSP   2  THIS IS THE '2ISG'  PANEL MEMBER THAT GOES   *   FILE 161\n//*                    IN YOUR PANEL LIBRARY FOR PROGRAM PRODUCTS.  *   FILE 161\n//*                    NEEDED ANOTHER PANEL TO ADD THINGS. LOOK     *   FILE 161\n//*                    AT ISR@PRIM  AND THIS MEMBER AND IT WILL     *   FILE 161\n//*                    WILL MAKE MORE SENSE.                        *   FILE 161\n//*                                                                 *   FILE 161\n//*       SADTSOP   2  THIS IS THE '2ISG' PANEL MEMBER THAT GOES    *   FILE 161\n//*                    IN YOUR PANEL LIBRARY FOR TSO COMMANDS.      *   FILE 161\n//*                    LOOK AT ISR@PRIM  AND THIS MEMBER AND IT     *   FILE 161\n//*                    IT WILL MAKE MORE SENSE.                     *   FILE 161\n//*                                                                 *   FILE 161\n//*       SADUTLP   2  THIS IS THE '2ISG' PANEL MEMBER THAT GOES    *   FILE 161\n//*                    IN YOUR PANEL LIB FOR UTILITY FUNCTIONS      *   FILE 161\n//*                    AND 'CHEAP CHECKERS'. LOOK AT ISR@PRIM AND   *   FILE 161\n//*                    THIS MEMBER AND IT WILL MAKE MORE SENSE.     *   FILE 161\n//*                                                                 *   FILE 161\n//*       SEND#     2  MEMBERS FOR USING SEND TSO CMD.  'SEND'      *   FILE 161\n//*                    A MSG TO ANOTHER USER.                       *   FILE 161\n//*                                                                 *   FILE 161\n//*       SLSS#     2  A MODIFICATION OF THE SLSS ISPF/PDF PANELS   *   FILE 161\n//*                    ON THE MODS TAPE. EXCEPT THIS ONE HAS        *   FILE 161\n//*                    COBOL PGM AS THE DRIVER. JIM PETERSON        *   FILE 161\n//*                    REWROTE THE ISPF APPLICATION MAKING IT       *   FILE 161\n//*                    MORE EFFICIENT (I'M IMPRESSED. I TOOK ALL    *   FILE 161\n//*                    THE CODE AND REWROTE IT MYSELF WHEN I        *   FILE 161\n//*                    TRIED TO IMPLEMENT IT. IT ALL WORKS NOW.     *   FILE 161\n//*                    SEE MEMBER SLSS##PR FOR DOC.                 *   FILE 161\n//*                                                                 *   FILE 161\n//*       SORT#     3  DO A SMALL SORT INACTIVELY.                  *   FILE 161\n//*                                                                 *   FILE 161\n//*       SORTLNK   2  ALC PGM TO \"LINK EP=SORT', ELIMINATES        *   FILE 161\n//*                    \"CALL\".  UPDATED TO USE \"POPUPS\".            *   FILE 161\n//*                                                                 *   FILE 161\n//*       SYSLG#    1  MEMBERS FOR USING BROWSING THE SPOOLED TO    *   FILE 161\n//*                    DISK, OPERATOR CONSOLE LOGS. PUT IT INTO     *   FILE 161\n//*                    DISK FILES FOR THE PAST 3 WEEKS FOR          *   FILE 161\n//*                    BROWSING.                                    *   FILE 161\n//*                                                                 *   FILE 161\n//*       SYSPR#P   1  SECONDAY PANEL FOR GETTING INTO 2ISG         *   FILE 161\n//*                    SYSTEM PROG FUNCTIONS. LOOK AT CLIST THAT    *   FILE 161\n//*                    IS INVOKED OUT OF ISR@PRIM WHEN ENTER 'S'.   *   FILE 161\n//*                    CLIST INVOKED CHECKS TO SEE IF 1ST CHAR      *   FILE 161\n//*                    OF USERID BEGINS WITH 'S'. SO YOU ARE ONE    *   FILE 161\n//*                    OF SYSTEMS, IF NOT, YOU ARE A BAD GUY AND    *   FILE 161\n//*                    RETURNED TO ISR@PRIM.                        *   FILE 161\n//*                                                                 *   FILE 161\n//*       TMS#      1  MEMBERS FOR USING TMS CMD (INVOKE UCC1 PGM   *   FILE 161\n//*                    FOR INTERACTIVE TMS ACCESS). SEE DOC MEMBER  *   FILE 161\n//*                    CALLED  TMS##PR.                             *   FILE 161\n//*                                                                 *   FILE 161\n//*       ULX...    1  BILL GODFREY'S ISPF DISK SPACE INFO PGM.     *   FILE 161\n//*                    INDEXED VTOCS ARE SUPPORTED. USER CAN OPT    *   FILE 161\n//*                    DISPLAY A LIST OF FREE SPACE.  SEE ULXDOC.   *   FILE 161\n//*                                                                 *   FILE 161\n//*       USR#      1  USER INTERFACE USING LIBDEF FACS. DON'T      *   FILE 161\n//*                    WANT USERS MESSING WITH MY LOGON PROCS.      *   FILE 161\n//*                                                                 *   FILE 161\n//*       VFORT#    3  MEMBERS FOR USING VSFORT CMD. VSFORT IS TO   *   FILE 161\n//*                    DO INTERACTIVE COMPILES WITH VS FORTRAN.     *   FILE 161\n//*                    SERIES OF SCREENS, ETC, ACTUALLY LIMITS      *   FILE 161\n//*                    THE THE USER TO ONLY RECEIVE THEIR ERRORS    *   FILE 161\n//*                    TO A SYSTERM DD CARD. SINCE NO LISTINGS,     *   FILE 161\n//*                    OBJECT CAN BE GENERATED, I CALL IT A         *   FILE 161\n//*                    'CHEAP CHECKER' UPDATED TO USE \"POPUPS\".     *   FILE 161\n//*                                                                 *   FILE 161\n//*       XBE...    1  BILL GODFREY'S PGM TO SET UP ISPF,  CAN      *   FILE 161\n//*                    HAVE SHORT CODE WORDS FOR DSNS YOU           *   FILE 161\n//*                    FREQUENTLY EDIT OR BROWSE. SEE XBEDOC FOR    *   FILE 161\n//*                    DETAILS.                                     *   FILE 161\n//*                                                                 *   FILE 161\n//*       ZAP#      1  MEMBERS FOR USING ZAP CMD.                   *   FILE 161\n//*                                                                 *   FILE 161\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@PNL#CI": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x17\\x00\\x00\\x00\\x862\\x8f\\x00\\x91\\t_\\x11T\\x00\\x11\\x00\\x08\\x00\\x00\\xc1\\xe2\\xd7\\xc5\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.23", "flags": 0, "createdate": "1986-11-24T00:00:00", "modifydate": "1991-04-05T11:54:00", "lines": 17, "newlines": 8, "modlines": 0, "user": "ASPEJDM"}, "text": "PROC 0  DEBUG\n/*-------------------------------------------------------------*/\n/*      OPEN THE TOOL BOX                                      */\n/*-------------------------------------------------------------*/\nCONTROL NOLIST MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n             CONTROL LIST CONLIST SYMLIST\nIF  &SYSUID EQ &STR(SPROG1) THEN GOTO TOOLBOX\nIF  &SYSUID EQ &STR(SPROG2) THEN GOTO TOOLBOX\nIF  &SYSUID EQ &STR(SPROG3) THEN GOTO TOOLBOX\nIF  &SYSUID EQ &STR(SPROG4) THEN GOTO TOOLBOX\nIF  &SYSUID EQ &STR(SPROG5) THEN GOTO TOOLBOX\nISPEXEC SELECT  PANEL(@PNL#PI)\nEXIT\nTOOLBOX: +\nISPEXEC SELECT  PANEL(@PNL#PS)\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@PNL#PA": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01-\\x00\\x00\\x00\\x862\\x8f\\x00\\x89\\x00O\\x108\\x00,\\x001\\x00\\x00\\xd9\\xe2\\xe6\\xc9\\xd3\\xe2\\xd6@@@'", "ispf": {"version": "01.45", "flags": 0, "createdate": "1986-11-24T00:00:00", "modifydate": "1989-01-04T10:38:00", "lines": 44, "newlines": 49, "modlines": 0, "user": "RSWILSO"}, "text": "%               IN-HOUSE SOFTWARE SYSTEMS\n%OPTION  ===>_ZCMD                                                             +\n%\n+       1%VS COBOL CHK  +- VS COBOL Syntax Checker\n+\n+       2%ASM Check     +- Assembler Checker\n+\n+       3%VSFORT CHK    +- VS FORTRAN Checker\n+\n+       7%COBOL II CHK  +- VS COBOL II Syntax Checker\n+\n+       D%Color Graphic +- Graphical Data Display Manager\n+           Demos             Demonstration Programs\n+\n+       I%IDTF          +- Interactive Data Transmission Facility\n+                          (TRANSMIT & RECEIVE)\n+\n+       P%Phoenix       +- PHOENIX Computer Based Education\n+\n+       S%Sort          +- SORT small files\n+\n%       X +EXIT\n%\n)INIT\n  .HELP = ISR00003\n  &ZPRIM = NO         /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n                1,'PANEL(COBOL#P)'\n                2,'PANEL(ASMH#P)'\n                3,'CMD(%VFORT#C)'\n                7,'PANEL(COB2#P)'\n                B,'CMD(%BDTINIT)'\n                D,'PANEL(ADM#P)'\n                I,'PANEL(IDT#P)'\n                P,'CMD(%PHOENIX)'\n                S,'PANEL(SORT#P)'\n              ' ',' '\n                X,'EXIT'\n                *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@PNL#PI": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01!\\x00\\x00\\x00\\x864o\\x00\\x864o\\x08U\\x00\\x19\\x00#\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.33", "flags": 0, "createdate": "1986-12-12T00:00:00", "modifydate": "1986-12-12T08:55:00", "lines": 25, "newlines": 35, "modlines": 0, "user": "$354JDM"}, "text": "+\n+             S Y S T E M   I N T E G R A T I O N S\n+\n%OPTION  ===>_ZCMD                                                             +\n%\n%           1+SAMPLE1  - SAMPLE 1 APPLICATION\n%           2+.......  - (OPTION 2 APPLICATION)\n%           3+.......  - (OPTION 3 APPLICATION)\n%           4+.......  - (OPTION 4 APPLICATION)\n%           5+.......  - (OPTION 5 APPLICATION)\n%\n%           X +        - EXIT\n%\n)INIT\n  .HELP = ISR00003\n  &ZPRIM = NO         /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n              ' ',' '\n                X,'EXIT'\n                *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@PNL#PK": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01,\\x00\\x00\\x00\\x87\\x00/\\x00\\x93#_\\x083\\x00-\\x003\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.44", "flags": 0, "createdate": "1987-01-02T00:00:00", "modifydate": "1993-08-23T08:33:00", "lines": 45, "newlines": 51, "modlines": 0, "user": "S218"}, "text": "%                    In-House  TSO  Commands\n%OPTION  ===>_ZCMD                                                             +\n%\n%          A+ABEND      - ABEND Information\n%          C+COMPARE    - Compare two files\n%          D+DJOBS      - DISPLAY ACTIVE\n%          E+LISTAX     - Enhanced LISTALC\n%          H+LISTMEM    - PDS Member List & Mask\n%          J+JULIAN     - Convert calendar dates\n%          K+COUNT      - Count records\n%          L+LASTIPL    - Last system load\n%          M+SEND       - Send a message\n%          N+CALC       - Calculator Program\n%          P+PRINTOFF   - Spinoff PRINT File\n%          R+DSPRINT    - JES328X Print Utility\n%          U+DUSER      - Display users\n%          1+COPYSDS    - Copy a sequential file\n%\n%          X+EXIT\n)INIT\n  .HELP = ISR00003\n  &ZPRIM = NO         /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n                A,'CMD(%ABND#C)'\n                C,'PANEL(COMPR#P)'\n                D,'CMD(DA)'\n                E,'CMD(LISTAX)'\n                H,'CMD(%LM#C)'\n                J,'PANEL(JUL#P)'\n                K,'PANEL(COUNT#P)'\n                L,'CMD(LASTIPL)'\n                M,'PANEL(SEND#P)'\n                N,'CMD(%CALC#C)'\n                P,'PANEL(PRINT#P)'\n                R,'PANEL(DSP#P)'\n                U,'CMD(DUSER)'\n                1,'PANEL(COPYS#P)'\n              ' ',' '\n                X,'EXIT'\n                *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@PNL#PM": {"ttr": 782, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x90\\x16?\\x00\\x91\\t_\\x11V\\x00B\\x00B\\x00\\x00\\xc1\\xe2\\xd7\\xc5\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1990-06-12T00:00:00", "modifydate": "1991-04-05T11:56:00", "lines": 66, "newlines": 66, "modlines": 0, "user": "ASPEJDM"}, "text": ")ATTR\n  % TYPE(TEXT)  INTENS(HIGH)  COLOR(WHITE)\n  + TYPE(TEXT)  INTENS(LOW)   COLOR(GREEN)\n  _ TYPE(INPUT) INTENS(HIGH)\n)BODY\n%                     ISPF/PDF PRIMARY MENU\n%OPTION  ===>_ZCMD                                                  +\n%\n%    0 +ISPF PARMS  - Terminal & user parameters              +USERID -%&ZUSER\n%    1 +BROWSE      - Display source data                     +PREFIX -%&ZPREFIX\n%    2 +EDIT        - Create or change source data            +DATE   -%&ZDATE\n%    3 +UTILITIES   - Perform utility functions               +JULIAN -%&ZJDATE\n%    4 +FOREGROUND  - Compile, Assem, LinkEdit, or Debug      +TIME   -%&ZTIME\n%    5 +BATCH       - Compile, Assemble, or Link Edit         +PROC   -%&ZLOGON\n%    6 +COMMAND     - Enter TSO command or CLIST              +TERM   -%&ZTERM\n%    7 +DIALOG TEST - Perform dialog testing                  +KEYS   -%&ZKEYS\n%    C +CHANGES     - summary of changes, this release\n%    S +SDSF        - Spool Display and Search Facility\n%    T +TUTORIAL    - Display information about ISPF/PDF\n%    X +EXIT        - Exit ISPF Ver 2 Rel 3\n%\n%B+BDT       - Bulk Data Transfer      %P+PHOENIX    +- Computer Based Education\n%D+DB2       - DB2 Products Menu       %U+USER SYSTEM+- User Developed System\n%I+Systems   - Systems Integration     %V+Vendor Sys +- ISSO Vendor Software\n%N+In-House  - NSA Developed Software\n%\n+    Report all ISPF problems to the %HELP DESK+- Tele%555-2345+\n)INIT\n  .HELP = ISR00003\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n  VPUT (ZHTOP,ZHINDEX) PROFILE\n)PROC\n&ZQ = &Z\n    IF (&ZCMD \u00ac= ' ')\n       &ZQ =  TRUNC (&ZCMD,'.')\n       IF (&ZQ = ' ')\n          .MSG = ISRU000\n    &ZSEL = TRANS( &ZQ\n                0,'PANEL(ISPOPTA)'\n                1,'PGM(ISRBRO) PARM(ISRBRO01)'\n                2,'PGM(ISREDIT) PARM(P,NSAEDM01)'\n                3,'PANEL(ISRUTIL)'\n                4,'PANEL(ISRFPA)'\n                5,'PGM(ISRJB1) PARM(ISRJPA) NOCHECK'\n                6,'PGM(ISRPTC)'\n                7,'PGM(ISRYXDR) NOCHECK'\n                8,'PANEL(ISRLPRIM)'\n                B,'CMD(%BDTINIT)'\n                C,'PGM(ISPTUTOR) PARM(ISR00005)'\n                D,'CMD(%DBPNINIT)'\n                I,'CMD(%@PNL#CI)'\n                N,'PANEL(@PNL#PN)'\n                P,'CMD(%PHOENIX)'\n                S,'PANEL(ZSDSFOP2) NEWAPPL(ISF)'\n                T,'PGM(ISPTUTOR) PARM(ISR00000)'\n                U,'CMD(%USERCMD)'\n                V,'PANEL(@PNL#PV)'\n              ' ',' '\n                X,'EXIT'\n                *,'?' )\n   IF (&ZCMD = 'S')\n       &ZSEL = 'PGM(ISFISP) NOCHECK NEWAPPL(ISF)'\n  &ZTRAIL = .TRAIL\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@PNL#PN": {"ttr": 784, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00\\x00\\x00\\x90\\x07\\x9f\\x00\\x93#_\\x084\\x00@\\x00,\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "1990-03-20T00:00:00", "modifydate": "1993-08-23T08:34:00", "lines": 64, "newlines": 44, "modlines": 0, "user": "S218"}, "text": ")ATTR\n   % TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n   # TYPE(TEXT)  INTENS(HIGH) COLOR(GREEN) HILITE(REVERSE)\n   + TYPE(TEXT)  INTENS(LOW)  COLOR(RED)\n   _ TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n%            Inhouse  Developed  Software Systems\n+\n%OPTION  ===>_ZCMD                                                             +\n%\n+ A%ASM CHECKER  +- Assembler Syntax Chk    +U%ABEND    +- ABEND Information\n+ B%VSCOBOL      +- VSCOBOL Syntax Checker  +V%COMPARE  +- COMPARE Two Files\n+ C%VSFORT CHK   +- VSFORTRAN Checker       +W%COPYSDS  +- Copy Sequential File\n+ D%future       +- future                  +Y%DUSER    +- Display TSO Users\n+ E%COBOLII CHK  +- VSCOBOL II Syntax Chk   +Z%JULIAN   +- Convert Calendar Date\n+ F%Color DEMOs  +- GDDM Demo Graphs        +0%LASTIPL  +- Date System last IPL\n+ I%IDTF         +- Interactive Data Trans  +1%LISTAX   +- Enhanced LISTALC\n+                   Fac (TRANSMIT/RECEIVE)  +4%SEND     +- SEND Msg to TSO User\n+ J%future       +- future                  +5%future   +- future use\n+ K%COUNT        +- Count Records in a File +6%future   +- future use\n+ L%USER OPTION  +- User Option Tutorial    +7%COMSTEVE +-#TSO to RAPPER COMET+\n+ M%future       +- future\n+ P%PRINTOFF     +- PRINT a File\n+ S%Sort         +- SORT small files\n+\n% X+EXIT\n)INIT\n  .HELP = ISR00003\n  &ZPRIM = NO         /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n)PROC\n&ZQ = &Z\n   IF (&ZCMD \u00ac= ' ')\n      &ZQ = TRUNC(&ZCMD,'.')\n      IF (&ZQ = ' ')\n         .MSG = ISRU000\n  &ZSEL = TRANS( &ZQ\n                A,'PANEL(ASMH#P)'\n                B,'PANEL(COBOL#P)'\n                C,'CMD(%VFORT#C)'\n                E,'PANEL(COB2#P)'\n                F,'PANEL(ADM#P)'\n                I,'PANEL(IDT#P)'\n                K,'PANEL(COUNT#P)'\n                L,'PGM(ISPTUTOR) PARM(USER#PT1)'\n                P,'PANEL(PRINT#P)'\n                S,'PANEL(SORT#P)'\n                U,'CMD(%ABND#C)'\n                V,'PANEL(COMPR#P)'\n                W,'PANEL(COPYS#P)'\n                Y,'CMD(DUSER)'\n                Z,'PANEL(JUL#P)'\n                0,'CMD(LASTIPL)'\n                1,'CMD(LISTAX)'\n                4,'PANEL(SEND#P)'\n                7,'CMD(%COMS#C)'\n                9,'CMD(DA)'\n              ' ',' '\n                X,'EXIT'\n                *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@PNL#PS": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x00\\x00\\x90\\x08\\x0f\\x00\\x91\\t_\\x11W\\x00,\\x009\\x00\\x00\\xc1\\xe2\\xd7\\xc5\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1990-03-21T00:00:00", "modifydate": "1991-04-05T11:57:00", "lines": 44, "newlines": 57, "modlines": 0, "user": "ASPEJDM"}, "text": ")ATTR\n  % TYPE(TEXT)  INTENS(HIGH)  COLOR(PINK)\n  + TYPE(TEXT)  INTENS(LOW)   COLOR(GREEN)\n  _ TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+                SYSPROGs  Internal  Systems\n+\n%OPTION  ===>_ZCMD                                                             +\n%\n% A+ACCOUNT    - Perform Account Fuctions\n% B+avail      - available for use\n% I+Info/MVS   - Information System        %4+SYSLOG   - Browse Yesterday's LOG\n% O+OMEGAMON   - OMEGAMON                  %5+BMANUAL  - Browse Manual Library\n% R+RMFMON     - RMF Monitor (Z to term)   %6+UMANUAL  - Update Manual Library\n% T+Tool Box   - Sys Prog Tool Box\n%\n% X +EXIT\n%\n)INIT\n  .HELP = ISR00003\n  &ZPRIM = NO         /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n)PROC\n&ZQ = &Z\n   IF (&ZCMD \u00ac= ' ')\n      &ZQ = TRUNC(&ZCMD,'.')\n      IF (&ZQ = ' ')\n         .MSG = ISRU000\n  &ZSEL = TRANS( &ZQ\n                4,'CMD(%LOG#C)'\n                5,'CMD(%LIB#CB)'\n                6,'CMD(%LIB#CE)'\n                A,'PANEL(@PNL#PSA)'\n                I,'CMD(%INF#C)'\n                O,'CMD(%OMEGAMON)'\n                R,'CMD(%RMFMON#C)'\n                T,'PANEL(@PNL#PX)'\n              ' ',' '\n                X,'EXIT'\n                *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@PNL#PV": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x90\\x07\\x9f\\x00\\x91\\t_\\x11W\\x00\"\\x00,\\x00\\x00\\xc1\\xe2\\xd7\\xc5\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1990-03-20T00:00:00", "modifydate": "1991-04-05T11:57:00", "lines": 34, "newlines": 44, "modlines": 0, "user": "ASPEJDM"}, "text": "%\n%                    VENDOR  PROVIDED  SOFTWARE\n%\n%OPTION  ===>_ZCMD                                                             +\n%\n+  B%BDT        +- IBM's Bulk Data Transfer\n+  D%DB2        +- Menu of available DB2 Products\n+  P%Phoenix    +- PHOENIX Computer Based Education\n+  V%VPS        +- (future) Control VPS Printer\n+  1%future     +- for future use\n+  2%future     +- for future use\n+\n%  X+EXIT\n%\n)INIT\n  .HELP = ISR00003\n  &ZPRIM = NO         /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n)PROC\n&ZQ = &Z\n   IF (&ZCMD \u00ac= ' ')\n      &ZQ = TRUNC(&ZCMD,'.')\n      IF (&ZQ = ' ')\n         .MSG = ISRU000\n  &ZSEL = TRANS( &ZQ\n                B,'CMD(%BDTINIT)'\n                D,'CMD(%DBPNINIT)'\n                P,'CMD(%PHOENIX)'\n              ' ',' '\n                X,'EXIT'\n                *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@PNL#PX": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01A\\x00\\x00\\x00\\x862\\x8f\\x00\\x93#_\\x086\\x005\\x00+\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.65", "flags": 0, "createdate": "1986-11-24T00:00:00", "modifydate": "1993-08-23T08:36:00", "lines": 53, "newlines": 43, "modlines": 0, "user": "S218"}, "text": "+\n+               Systems Programmers  %T O O L+  Box\n+\n%OPTION  ===>_ZCMD                                                             +\n%\n% A+DSMF        - Display SMF                %1+$DI      - Display Initiators\n% B+DSVCTAB     - Display SVC Table          %2+DUDASD   - D U,DASD\n% C+ future                                  %3+DUTAPE   - D U,TAPE\n% D+ future                                  %4+SHOWSS   - Show SubSystems\n% E+ future                                  %5+avail    - available\n% F+ZAP         - Full Screen Superzap       %6+avail    - available\n% I+avail       - available\n% M+MEMBER      - Member Search\n% N+POF         - Poor Man's%NCCF+\n% O+avail       - available\n% P+avail       - available\n% R+avail       - available\n% S+LISTSU      - List Installed SU's\n% U+DLINK       - Display Linklist\n% V+DAPF        - Display APF List\n%\n% X +EXIT\n%\n)INIT\n  .HELP = ISR00003\n  &ZPRIM = NO         /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n)PROC\n&ZQ = &Z\n   IF (&ZCMD \u00ac= ' ')\n      &ZQ = TRUNC(&ZCMD,'.')\n      IF (&ZQ = ' ')\n         .MSG = ISRU000\n  &ZSEL = TRANS( &ZQ\n                1,'CMD($DI)'\n                2,'CMD(DUDASD)'\n                3,'CMD(DUTAPE)'\n                4,'CMD(SHOWSS)'\n                A,'CMD(SMFDS)'\n                B,'CMD(SVCTAB)'\n                F,'CMD(%ZAP#C)'\n                L,'PANEL(SLSS#P)'\n                M,'CMD(%MEMB#C)'\n                N,'CMD(POF)'\n                S,'CMD(LISTSU)'\n                U,'CMD(DLINK)'\n                V,'CMD(DAPF)'\n              ' ',' '\n                X,'EXIT'\n                *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ABND#C": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x00\\x00\\x85\\x10?\\x00\\x86\\x14\\x1f\\x16\\x01\\x00!\\x000\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xc3\\xd1\\xc3@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "1985-04-13T00:00:00", "modifydate": "1986-05-21T16:01:00", "lines": 33, "newlines": 48, "modlines": 0, "user": "SS02CJC"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      ABEND HELP FOR USERS                              */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST NOMSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &ABN   = &STR(   )\nSET &SC    = &STR(  )\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ABND#P) CURSOR(ABN)\n   IF &LASTCC = 8 THEN GOTO ALLDONE\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GET THE INFO FROM THE PANEL                       */\n   /*--------------------------------------------------------*/\n   ISPEXEC  VGET  (&ABN  &SC)\n   ISPEXEC  FTOPEN   TEMP\n   ISPEXEC  FTINCL   ABND#S\n   ISPEXEC  FTCLOSE\n   ISPEXEC  VGET  ZTEMPF\n   EX       '&ZTEMPF'\n   GOTO LOOP\nALLDONE: +\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABND#P": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x85\\x10?\\x00\\x862\\x8f\\x13A\\x00\\x13\\x00\\x18\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1985-04-13T00:00:00", "modifydate": "1986-11-24T13:41:00", "lines": 19, "newlines": 24, "modlines": 0, "user": "$354JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+               % A B E N D + EXPLANATIONS\n+\n+\n+   ENTER ABEND CODE %===>S_ABN+-_SC+\n+\n+\n+     ENTER THE ABEND CODE ALONG WITH ANY SUBCODES IF\n+     ANY OCCUR.\n+\n+     FOR EXAMPLE     S002-18.\n)PROC\n   VER (&ABN,NONBLANK)\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ABND#S": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x00\\x00\\x85\\x10?\\x00\\x85\\x10\\x7f\\x07!\\x00\\x08\\x00p\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "1985-04-13T00:00:00", "modifydate": "1985-04-17T07:21:00", "lines": 8, "newlines": 112, "modlines": 0, "user": "SS02JDM"}, "text": "PROC 0\nCONTROL PROMPT NOFLUSH\n)SEL      &SC   =  &Z\n     HELP ABEND O(S&ABN)\n)ENDSEL\n)SEL      &SC    \u00ac=  &Z\n     HELP ABEND O(S&ABN.-&SC)\n)ENDSEL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#APP": {"ttr": 1037, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x93 \\x1f\\x00\\x93!o\\t!\\x00\\x1d\\x00\\x1e\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1993-07-20T00:00:00", "modifydate": "1993-08-04T09:21:00", "lines": 29, "newlines": 30, "modlines": 0, "user": "S218"}, "text": "PROC 0\n/* ----------------------------------------------------------- */\n/*      THIS A CLIST WHICH WILL INVOKE BY SYSPROG MENU         */\n/*      AS A SEPARATE APPLICATION.  THIS IS HANDY FOR          */\n/*      PEOPLE LIKE THE SECURITY AND OTHERS TO BE ABLE         */\n/*      TO USE MY THINGS WITHOUT HAVING TO HAVE A SPECIAL      */\n/*      LOGON PROCEDURE.                                       */\n/*                        JIM MARSHALL                         */\n/* ----------------------------------------------------------- */\nCONTROL  NOLIST   MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n          CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nISPEXEC LIBDEF  ISPMLIB DATASET ID('S218.ISPF.PDF')\nISPEXEC LIBDEF  ISPPLIB DATASET ID('S218.ISPF.PDF')\nISPEXEC LIBDEF  ISPSLIB DATASET ID('S218.ISPF.PDF')\nALLOC   DD(SYSUADS)  DA('SYS1.UADS')  SHR REUSE\nALLOC   DD(JCLIST)   DA('S218.ISPF.PDF')  SHR REUSE\nCONCAT  (SYSPROC,JCLIST)\nSET &LASTCC = 0\n/*--------------------------------------------------------*/\nISPEXEC  SELECT PANEL(ACC#P)\n/*--------------------------------------------------------*/\nISPEXEC LIBDEF  ISPMLIB\nISPEXEC LIBDEF  ISPPLIB\nISPEXEC LIBDEF  ISPSLIB\nDECONCAT SYSPROC\nFREE    DD(JCLIST,SYSUADS)\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#DC": {"ttr": 1039, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\t\\x00\\x00\\x00\\x93\\x02o\\x00\\x93 O\\x07#\\x00'\\x00%\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@\"", "ispf": {"version": "01.09", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-07-23T07:23:00", "lines": 39, "newlines": 37, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*----------------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR FMS PANELS FOR TSO ACCOUNT FUNCTIONS   */\n/*      \" DISPLAY TSO USERID UADS ENTRY \"                         */\n/*----------------------------------------------------------------*/\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &AUSER = &STR(S)\nSET &TUSER = &STR(T)\nSET &USER = &STR(&SUBSTR(1:1,&SYSUID))\nIF  &USER NE &AUSER  AND  &USER NE &TUSER THEN GOTO FINISH\nSET &NEWID = &STR( )\n/*--------------------------------------------------------*/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#DP) CURSOR(NEWID)\n   IF &LASTCC = 8 THEN GOTO FINISH\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   ADIOS TIME.\n       GOTO FINISH\n       END\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GOT INFO FROM THE PANEL                           */\n   /*--------------------------------------------------------*/\n   ACCOUNT\n     LIST  (&NEWID)\n   END\n   GOTO LOOP\nFINISH: +\n   CONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ACC#DP": {"ttr": 1041, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x93\\x02o\\x00\\x93!O\\x080\\x00\\x11\\x00\\x11\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-08-02T08:30:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+        COMMAND%===>_ZCMD                                             +\n+\n+\n+  %  Display  the  UAD  entry  for a  TSO ID      +\n+\n+\n+   Enter USERID%===>_NEWID  +       Enter the existing ID.\n+\n)PROC\n VER (&NEWID,NONBLANK)  VER (&NEWID,NAME)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ACC#GC": {"ttr": 1043, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x00\\x93\\x02o\\x00\\x93!O\\t \\x00/\\x00(\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-08-02T09:20:00", "lines": 47, "newlines": 40, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*----------------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR FMS PANELS FOR TSO ACCOUNT FUNCTIONS   */\n/*      \" CHANGE SECONDARY LOGON PROC FOR ALL ACCOUNTS \"          */\n/*----------------------------------------------------------------*/\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &AUSER = &STR(S)\nSET &TUSER = &STR(T)\nSET &USER = &STR(&SUBSTR(1:1,&SYSUID))\nIF  &USER NE &AUSER  AND  &USER NE &TUSER THEN GOTO FINISH\nSET &NEWID   = &STR( )\nSET &PASSWD  = &STR( )\nSET &OPROCED = &STR( )\nSET &PROCED  = &STR( )\n/*--------------------------------------------------------*/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#GP) CURSOR(NEWID)\n   IF &LASTCC = 8 THEN GOTO FINISH\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   ADIOS TIME.\n       GOTO FINISH\n       END\n   IF &PASSWD = &STR( ) THEN +\n       DO\n       SET &PASSWD = &STR(*)\n       END\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GOT INFO FROM THE PANEL                           */\n   /*--------------------------------------------------------*/\n   ACCOUNT\n     CHANGE  (&NEWID &PASSWD * &OPROCED) DATA(&PROCED)\n   END\n   SET &PASSWD = &STR( )\n   GOTO LOOP\nFINISH: +\n   CONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ACC#GP": {"ttr": 1045, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x93\\x02o\\x00\\x93!O\\x10&\\x00\\x1f\\x00\\x18\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-08-02T10:26:00", "lines": 31, "newlines": 24, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+        COMMAND%===>_ZCMD                                             +\n+\n+\n+      % Change the LOGON Procedure for a TSO ID      +\n+\n+\n+    Enter USERID%===>_NEWID  +       Existing Userid.\n+\n+        Password%===>_PASSWD  +      Blank implies to change for all\n+                                     pass words.\n+\n+      LOGON Proc%===>_OPROCED +      Old LOGON Procedure Name.\n+\n+  New LOGON Proc%===>_PROCED  +      New LOGON Procedure Name.\n+\n+\n+  Note:  The above LOGON Proc change applies to all Account Number\n+         structures.\n)PROC\n VER (&NEWID,NONBLANK)  VER (&NEWID,NAME)\n IF  (&PASSWD NE &Z)\n       VER(&PASSWD,NAME)\n VER (&OPROCED,NONBLANK)\n VER (&PROCED,NONBLANK)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ACC#LC": {"ttr": 1047, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x93 \\x1f\\x00\\x93 O\\x07$\\x00%\\x00*\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1993-07-20T00:00:00", "modifydate": "1993-07-23T07:24:00", "lines": 37, "newlines": 42, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*----------------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR FMS PANELS FOR TSO ACCOUNT FUNCTIONS   */\n/*      \" DO LISTCAT SHOWING ALL FILES OF TSO USER \"              */\n/*----------------------------------------------------------------*/\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &AUSER = &STR(S)\nSET &TUSER = &STR(T)\nSET &USER = &STR(&SUBSTR(1:1,&SYSUID))\nIF  &USER NE &AUSER  AND  &USER NE &TUSER THEN GOTO FINISH\n/*--------------------------------------------------------*/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#LP) CURSOR(NEWID)\n   IF &LASTCC = 8 THEN GOTO FINISH\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   ADIOS TIME.\n       GOTO FINISH\n       END\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GOT INFO FROM THE PANEL                           */\n   /*--------------------------------------------------------*/\n   LISTCAT  LEVEL(&NEWID)\n   END\n   GOTO LOOP\nFINISH: +\n   CONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ACC#LP": {"ttr": 1049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x93 /\\x00\\x93!O\\x081\\x00\\x11\\x00\\x11\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1993-07-21T00:00:00", "modifydate": "1993-08-02T08:31:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+        COMMAND%===>_ZCMD                                             +\n+\n+\n+  %  Display  the  CATALOG  Entries  for  a  TSO  ID +\n+\n+\n+   Enter USERID%===>_NEWID   +      Enter the existing ID.\n+\n)PROC\n VER(&NEWID,NAME)  VER (&NEWID,NAME)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ACC#MC": {"ttr": 1051, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00\\x00\\x00\\x93 O\\x00\\x93\"?\\x08\\'\\x00y\\x00%\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "1993-07-23T00:00:00", "modifydate": "1993-08-11T08:27:00", "lines": 121, "newlines": 37, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*----------------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR FMS PANELS FOR TSO ACCOUNT FUNCTIONS   */\n/*      \" DEFINE MASTER CATALOG ALIAS \"                           */\n/*----------------------------------------------------------------*/\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &AUSER = &STR(S)\nSET &TUSER = &STR(T)\nSET &USER = &STR(&SUBSTR(1:1,&SYSUID))\nIF  &USER NE &AUSER  AND  &USER NE &TUSER THEN GOTO FINISH\nSET  &MASTCAT = &STR(CATALOG.MVSICFM.VSYACAT)\nSET  &CATNO   = &STR(1)\n/*--------------------------------------------------------*/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#MP) CURSOR(NEWID)\n   IF &LASTCC = 8 THEN GOTO FINISH\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   ADIOS TIME.\n       GOTO FINISH\n       END\n   SET  &MASTCAT = &STR(CATALOG.MVSICFM.VSYACAT)\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      DEFINE ALIAS ENTRY IN MASTER CATALOG              */\n   /*--------------------------------------------------------*/\n   IF  &CATNO =  &STR(1)  THEN  +\n       DO\n       SET  &CATNAME = &STR(CATALOG.VST1201)\n       END\n   ELSE  +\n       IF  &CATNO = &STR(2)  THEN  +\n           DO\n           SET  &CATNAME = &STR(CATALOG.VPR1001)\n           END\n       ELSE  +\n           IF  &CATNO = &STR(3)  THEN  +\n               DO\n               SET  &CATNAME = &STR(CATALOG.VDE1001)\n               END\n           ELSE  +\n               DO\n               WRITE\n               WRITE    CATALOG NAME ERROR, SEE  TSB !!!!!\n               WRITE\n               GOTO LOOP\n               END\n   SET  &LASTCC = 0\n   DEFINE  ALIAS   (NAME('&NEWID')  RELATE('&CATNAME'))  +\n           CATALOG('&MASTCAT')\n   IF  &LASTCC  EQ  0     THEN  +\n       DO\n       WRITE\n       WRITE  *----------------------------------------------------*\n       WRITE  *    &NEWID  ALIAS  ENTRY  ADDED.                    *\n       WRITE  *----------------------------------------------------*\n       WRITE\n       END\n   ELSE  +\n       DO\n       WRITE\n       WRITE  *----------------------------------------------------*\n       WRITE  *    ERROR  ENCOUNTERED  ADDING  ALIAS  ENTRY,  AS   *\n       WRITE  *    YOU  SAW.   SORRY !!!!!!                        *\n       WRITE  *                                                    *\n       WRITE  *----------------------------------------------------*\n       WRITE\n       END\n   /*--------------------------------------------------------*/\n   /*      DETERMINE THE CPU WE ARE EXECUTING AND SET THE    */\n   /*      \"NODEID\" TO THE OTHER SYSTEM.  BE CAREFUL!!!      */\n   /*--------------------------------------------------------*/\n   SYSID\n   SET &SYSIDRC  =  &LASTCC\n   IF  &SYSIDRC  =  0  THEN  +\n       DO\n       SET  &NODEID = &STR(N2)\n       SET  &ID     = &STR(1)\n       END\n   ELSE  +\n       DO\n       SET  &NODEID = &STR(N1)\n       SET  &ID     = &STR(2)\n       END\n   /*--------------------------------------------------------*/\n   /*      GET THE ACCOUNT NUMBER FROM OUR TSO ID.           */\n   /*--------------------------------------------------------*/\n   GETACCT\n   ISPEXEC  VGET (ACCT#)  SHARED\n   /*--------------------------------------------------------*/\n   /*      GET THE VERIFICATION FOR JOB SUBMIT TO OTHER SYS  */\n   /*--------------------------------------------------------*/\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#MPB)\n   IF &LASTCC = 8 THEN GOTO LOOP\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   JCL STEP 1.\n       GOTO FINISH\n       END\n   /*--------------------------------------------------------*/\n   /*      GET JCL FOR THE JOB1 AND SUBMIT                   */\n   /*--------------------------------------------------------*/\n   ISPEXEC FTOPEN TEMP\n   ISPEXEC FTINCL ACC#MSB\n   ISPEXEC FTCLOSE\n   ISPEXEC VGET   ZTEMPF\n   SUBMIT   '&ZTEMPF'\n   GOTO LOOP\nFINISH: +\n   CONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ACC#MP": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x93 O\\x00\\x93!O\\x082\\x00\\x1b\\x00\\x14\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1993-07-23T00:00:00", "modifydate": "1993-08-02T08:32:00", "lines": 27, "newlines": 20, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n  \u00ac  TYPE(INPUT) INTENS(NON) CAPS(ON) JUST(LEFT)\n)BODY\n+\n+        COMMAND%===>_ZCMD                                             +\n+\n+\n+     % Define an ALIAS entry in the Master Catalog +\n+\n+\n+         Enter Alias Entry%===>_NEWID   +\n+\n+      Enter Catalog Number%===>_CATNO+      1 - CATALOG.VST1201\n+                                            2 - CATALOG.VPR1001\n+                                            3 - CATALOG.VDE1001\n+\n+     Master Catalog  to                     +\n+         be  Used         %===>_MASTCAT                           +\n+     ( informational only)\n+\n)PROC\n VER (&NEWID,NONBLANK) VER(&NEWID,NAME)\n VER (&CATNO,LIST,1,2,3)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ACC#MPA": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x93\"?\\x00\\x93\"?\\x07T\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1993-08-11T00:00:00", "modifydate": "1993-08-11T07:54:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+        COMMAND%===>_ZCMD                                             +\n+\n+\n+                          % V E R I F Y\n+\n+\n+      YOU  HAVE  MADE  A  REQUEST  TO  DEFINE  AN  ALIAS  ENTRY\n+\n+\n+      ALIAS  ENTRY ===>% &NEWID  +\n+\n+\n+\n+       IF  YOU  WISH  TO  CONTINUE  AND  DEFINE  THIS  ENTRY  FOR\n+\n+      %THIS+ SYSTEM,  PRESS  ENTER.\n+\n+\n+       OTHERWISE  PRESS  PF3  OR  ENTER  END  TO  BYPASS.\n+\n+\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#MPB": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x93 O\\x00\\x93\"?\\x07T\\x00\\x1e\\x00\\x1a\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1993-07-23T00:00:00", "modifydate": "1993-08-11T07:54:00", "lines": 30, "newlines": 26, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+        COMMAND%===>_ZCMD                                             +\n+\n+\n+                          % A T T E N T I O N\n+\n+\n+       YOU  HAVE  MADE  A  REQUEST  TO  ADD  AN  ALIAS  ENTRY  WHERE\n+\n+       ALIAS  ===>% &NEWID      +\n+\n+\n+\n+       IF  YOU  WISH  TO  CONTINUE  AND  SUBMIT  THE  JOB  TO %CONNECT\n+\n+       THE  ALIAS  ENTRY  FOR  THE  MASTER  CATALOG  OF  THE\n+\n+      %OTHER+ SYSTEM!\n+\n+\n+\n+       PRESS  ENTER.   OTHERWISE  PRESS  PF3  TO  END  AND  BYPASS.\n+\n+\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#MSB": {"ttr": 1289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x93 O\\x00\\x93\"?\\x080\\x00\\x0c\\x00\\x0b\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1993-07-23T00:00:00", "modifydate": "1993-08-11T08:30:00", "lines": 12, "newlines": 11, "modlines": 0, "user": "S218"}, "text": "//&SYSUID.&NEWID JOB (&ACCT#),'MAST CAT CONNECT',CLASS=A,\n//         MSGCLASS=Z,MSGLEVEL=(1,1)\n/*NOTIFY   &SYSUID\n/*XEQ      &NODEID\n//* ----------------------------------------------------------- *\n//*     CONNECT THIS TSOID TO THE MASTER CATALOG CPU1\n//* ----------------------------------------------------------- *\n//CPU#&ID  EXEC PGM=IDCAMS\n//SYSPRINT DD SYSOUT=S\n//SYSIN    DD *\n DEFINE ALIAS (NAME(&NEWID)    RELATE(CATALOG.VST1201))\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#NC": {"ttr": 1291, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x00\\x00\\x93 O\\x00\\x93\"?\\x08\\'\\x00j\\x00%\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "1993-07-23T00:00:00", "modifydate": "1993-08-11T08:27:00", "lines": 106, "newlines": 37, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*----------------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR FMS PANELS FOR TSO ACCOUNT FUNCTIONS   */\n/*      \" DELETE  AN  ALIAS  ENTRY \"                              */\n/*----------------------------------------------------------------*/\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &AUSER = &STR(S)\nSET &TUSER = &STR(T)\nSET &USER = &STR(&SUBSTR(1:1,&SYSUID))\nIF  &USER NE &AUSER  AND  &USER NE &TUSER THEN GOTO FINISH\nSET  &MASTCAT = &STR(CATALOG.MVSICFM.VSYACAT)\n/*--------------------------------------------------------*/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#NP) CURSOR(NEWID)\n   IF &LASTCC = 8 THEN GOTO FINISH\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   ADIOS TIME.\n       GOTO FINISH\n       END\n   /*--------------------------------------------------------*/\n   /*      VERIFY USERS DESIRE TO PROCEED.                   */\n   /*--------------------------------------------------------*/\n   ISPEXEC DISPLAY PANEL(ACC#NPA)\n   IF &LASTCC = 8 THEN GOTO FINISH\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   ADIOS TIME.\n       GOTO FINISH\n       END\n   SET  &MASTCAT = &STR(CATALOG.MVSICFM.VSYACAT)\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      DELETE ALIAS ENTRY IN MASTER CATALOG, PROVIDED    */\n   /*      THERE ARE NO CATALOG ENTRIES                      */\n   /*--------------------------------------------------------*/\n   LISTCAT  LEVEL('&NEWID')\n   IF  &LASTCC  NE  0  THEN  +\n       DO\n       DELETE  '&NEWID'   ALIAS   CATALOG('&MASTCAT')\n       END\n   ELSE   +\n       DO\n       WRITE\n       WRITE  *--------------------------------------------------*\n       WRITE  *                                                  *\n       WRITE  *    CATALOG  ENTRIES  EXIST  FOR  THE  ALIAS      *\n       WRITE  *    ENTRY  TRYING  TO  BE  DELETED.  SORRY !!!!!  *\n       WRITE  *                                                  *\n       WRITE  *--------------------------------------------------*\n       WRITE\n       GOTO  LOOP\n       END\n   /*--------------------------------------------------------*/\n   /*      DETERMINE THE CPU WE ARE EXECUTING AND SET THE    */\n   /*      \"NODEID\" TO THE OTHER SYSTEM.  BE CAREFUL!!!      */\n   /*--------------------------------------------------------*/\n   SYSID\n   SET &SYSIDRC  =  &LASTCC\n   IF  &SYSIDRC  =  0  THEN  +\n       DO\n       SET  &NODEID = &STR(N2)\n       SET  &ID     = &STR(1)\n       END\n   ELSE  +\n       DO\n       SET  &NODEID = &STR(N1)\n       SET  &ID     = &STR(2)\n       END\n   /*--------------------------------------------------------*/\n   /*      GET THE ACCOUNT NUMBER FROM OUR TSO ID.           */\n   /*--------------------------------------------------------*/\n   GETACCT\n   ISPEXEC  VGET (ACCT#)  SHARED\n   /*--------------------------------------------------------*/\n   /*      GET THE VERIFICATION FOR JOB SUBMIT TO OTHER SYS  */\n   /*--------------------------------------------------------*/\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#NPB)\n   IF &LASTCC = 8 THEN GOTO LOOP\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   JCL STEP 1.\n       GOTO FINISH\n       END\n   /*--------------------------------------------------------*/\n   /*      GET JCL FOR THE JOB1 AND SUBMIT                   */\n   /*--------------------------------------------------------*/\n   ISPEXEC FTOPEN TEMP\n   ISPEXEC FTINCL ACC#NSB\n   ISPEXEC FTCLOSE\n   ISPEXEC VGET   ZTEMPF\n   SUBMIT   '&ZTEMPF'\n   GOTO LOOP\nFINISH: +\n   CONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ACC#NP": {"ttr": 1294, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x93 O\\x00\\x93!O\\x083\\x00\\x18\\x00\\x12\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1993-07-23T00:00:00", "modifydate": "1993-08-02T08:33:00", "lines": 24, "newlines": 18, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n  \u00ac  TYPE(INPUT) INTENS(NON) CAPS(ON) JUST(LEFT)\n)BODY\n+\n+        COMMAND%===>_ZCMD                                             +\n+\n+\n+     % DELETE an ALIAS entry from the Master Catalog +\n+\n+\n+         Enter Alias Entry%===>_NEWID    +\n+\n+\n+\n+     Master Catalog  to                     +\n+         be  Used         %===>_MASTCAT                           +\n+     ( informational only)\n+\n)PROC\n VER (&NEWID,NONBLANK) VER(&NEWID,NAME)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ACC#NPA": {"ttr": 1296, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x93\"?\\x00\\x93\"?\\x07S\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1993-08-11T00:00:00", "modifydate": "1993-08-11T07:53:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+        COMMAND%===>_ZCMD                                             +\n+\n+\n+                          % V E R I F Y\n+\n+\n+      YOU  HAVE  MADE  A  REQUEST  TO  DELETE  AN  ALIAS  ENTRY  FOR\n+\n+\n+      ALIAS  ENTRY ===>% &NEWID  +\n+\n+\n+\n+       IF  YOU  WISH  TO  CONTINUE  AND  DELETE  THIS  ENTRY  FOR\n+\n+      %THIS+ SYSTEM,  PRESS  ENTER.\n+\n+\n+       OTHERWISE  PRESS  PF3  OR  ENTER  END  TO  BYPASS.\n+\n+\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#NPB": {"ttr": 1298, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x93 O\\x00\\x93\"?\\x07S\\x00\\x1e\\x00\\x19\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1993-07-23T00:00:00", "modifydate": "1993-08-11T07:53:00", "lines": 30, "newlines": 25, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+        COMMAND%===>_ZCMD                                             +\n+\n+\n+                          % A T T E N T I O N\n+\n+\n+       YOU  HAVE  MADE  A  REQUEST  TO %DELETE+ AN  ALIAS  ENTRY  WHERE\n+\n+       ALIAS  ===>% &NEWID      +\n+\n+\n+\n+       IF  YOU  WISH  TO  CONTINUE  AND  SUBMIT  THE  JOB  TO %DELETE\n+\n+       THE  ALIAS  ENTRY  FOR  THE  MASTER  CATALOG  OF  THE\n+\n+      %OTHER+ SYSTEM,  PRESS  ENTER.\n+\n+\n+\n+       OTHERWISE  PRESS  PF3  TO  END  AND  BYPASS.\n+\n+\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#NSB": {"ttr": 1300, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x93 O\\x00\\x93\"?\\x080\\x00\\x15\\x00\\x15\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1993-07-23T00:00:00", "modifydate": "1993-08-11T08:30:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "S218"}, "text": "//&SYSUID.&NEWID JOB (&ACCT#),'MAST CAT DELETE',CLASS=A,\n//         MSGCLASS=Z,MSGLEVEL=(1,1)\n/*NOTIFY   &SYSUID\n/*XEQ      &NODEID\n//* ----------------------------------------------------------- *\n//*        DELETE THE ALIAS ENTRY FOR THE OTHER SYSTEM\n//* ----------------------------------------------------------- *\n//CPU1     EXEC PGM=IDCAMS\n//SYSPRINT DD SYSOUT=S\n//SYSIN    DD *\n   /* ------------------------------------- */\n   /*   CHECK TO SEE IF THERE ARE ANY THING */\n   /*   LEFT IN THE CATALOG. IF SO, DO NOT  */\n   /*   DELETE ALIAS ENTRY.                 */\n   /* ------------------------------------- */\n   LISTCAT  LEVEL(&NEWID)\n   IF  LASTCC  NE  0   THEN   +\n        DO\n        DELETE  &NEWID  ALIAS  CATALOG('&MASTCAT')\n        END\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#P": {"ttr": 1302, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x00\\x00\\x93\\x02_\\x00\\x93\"?\\x10\\x17\\x005\\x00(\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "1993-01-25T00:00:00", "modifydate": "1993-08-11T10:17:00", "lines": 53, "newlines": 40, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+            %TSO   A C C O U N T   Functions  +\n+\n%COMMAND ===>_ZCMD                                                             +\n+\n% 1+- Add new TSO USERID, TSB.           %D+- Display USERID UAD Entry.\n+\n% 2+- Add new TSO USERID, FMS User.      %E+- Unused\n+\n% 3+- Delete Existing TSO USERID.        %F+- Unused\n+\n% 4+- Add Secondary LOGON Proc.          %G+- Change Secondary LOGON Proc.\n+\n% 5+- Delete Secondary LOGON Proc.       %L+- Display CAT files for USERID\n+\n% 6+- Add Secondary ACCT Code.           %M+- Create Master Catalog Alias\n+\n% 7+- Delete Secondary ACCT Code.        %N+- Delete Master Catalog Alias\n+\n% 8+- Change ACCT Code.                  %O+- View TSO Held OUTPUT\n+\n% 9+- Change TSO Password.               %R+- Custom Reports (future)\n+\n%   NOTE:  YOU ARE USING  \"SYS1.UADS\"  for  Real.  Report any problems\n%          to Jim Marshall as soon as they happen.\n)INIT\n  .HELP = ISR00003\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n                1,'CMD(ACC#1C)'\n                2,'CMD(ACC#2C)'\n                3,'CMD(ACC#3C)'\n                4,'CMD(ACC#4C)'\n                5,'CMD(ACC#5C)'\n                6,'CMD(ACC#6C)'\n                7,'CMD(ACC#7C)'\n                8,'CMD(ACC#8C)'\n                9,'CMD(ACC#9C)'\n                D,'CMD(ACC#DC)'\n                G,'CMD(ACC#GC)'\n                L,'CMD(ACC#LC)'\n                M,'CMD(ACC#MC)'\n                N,'CMD(ACC#NC)'\n                O,'PGM(ISRUOLP)'\n              ' ',' '\n                *,'?' )\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ACC#1C": {"ttr": 1304, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1c\\x00\\x00\\x00\\x93\\x02_\\x00\\x93\"?\\x084\\x00\\x99\\x00\\x12\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.28", "flags": 0, "createdate": "1993-01-25T00:00:00", "modifydate": "1993-08-11T08:34:00", "lines": 153, "newlines": 18, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*----------------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR FMS PANELS FOR TSO ACCOUNT FUNCTIONS   */\n/*      \" ADD TSO USER, TSB SYSPROG \"                             */\n/*----------------------------------------------------------------*/\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &AUSER = &STR(S)\nSET &TUSER = &STR(T)\nSET &USER = &STR(&SUBSTR(1:1,&SYSUID))\nIF  &USER NE &AUSER  AND  &USER NE &TUSER THEN GOTO FINISH\nSET &NEWID  = &STR( )\nSET &PASSWD = &STR(TSS)\nSET &ACTF   = &STR( )\nSET &PROCED = &STR($TSOUSER)\nSET &MAXREG = &STR(4096)\nSET &ACCT   = &STR(NOACCT)\nSET &JBSUB  = &STR(JCL)\nSET &MNT    = &STR(NOMOUNT)\nSET &OPER   = &STR(OPER)\nSET &DESTU  = &STR( )\nSET &MASTCAT = &STR(CATALOG.MVSICFM.VSYACAT)\n/*--------------------------------------------------------*/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#1P) CURSOR(NEWID)\n   IF &LASTCC = 8 THEN GOTO FINISH\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   ADIOS TIME.\n       GOTO FINISH\n       END\n   SET &MASTCAT = &STR(CATALOG.MVSICFM.VSYACAT)\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GOT INFO FROM THE PANEL                           */\n   /*--------------------------------------------------------*/\n   SET &RSIZE = &MAXREG\n   IF  &PROCED = &STR($TSODBA)  THEN  SET &RSIZE = &STR(8092)\n   IF  &DESTU  = &STR( )  THEN +\n       DO\n       SET  &RMTDEST =  &STR( )\n       END\n   ELSE   +\n       DO\n       SET  &RMTDEST =  &STR(DEST(&DESTU))\n       END\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ACCOUNT\n      ADD (&NEWID  &PASSWD  &ACTF  &PROCED)  +\n      SIZE(&RSIZE)                    +\n      MAXSIZE(&MAXREG)                +\n      UNIT(SYSALLDA)                  +\n      &RMTDEST                        +\n      &ACCT                           +\n      &JBSUB                          +\n      &MNT                            +\n      &OPER                           +\n      MSGCLASS(A) SYSOUT(A) JOBCLASS(A) HOLD(S) RECOVER\n   END\n   /*--------------------------------------------------------*/\n   /*      DETERMINE THE CPU WE ARE EXECUTING AND SET THE    */\n   /*      \"NODEID\" TO THE OTHER SYSTEM.  BE CAREFUL!!!      */\n   /*--------------------------------------------------------*/\n   SYSID\n   SET &SYSIDRC  =  &LASTCC\n   IF  &SYSIDRC  =  0  THEN  +\n       DO\n       SET  &NODEID = &STR(N2)\n       END\n   ELSE  +\n       DO\n       SET  &NODEID = &STR(N1)\n       END\n   /*--------------------------------------------------------*/\n   /*      GET THE ACCOUNT NUMBER FROM OUR TSO ID.           */\n   /*--------------------------------------------------------*/\n   GETACCT\n   ISPEXEC  VGET (ACCT#)  SHARED\n   /*--------------------------------------------------------*/\n   /*      GET THE VERIFICATION FOR  JOB1                    */\n   /*--------------------------------------------------------*/\n   JCL1:  +\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#1PA)\n   IF &LASTCC = 8 THEN GOTO JCL2\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   JCL STEP 1.\n       GOTO FINISH\n       END\n   /*--------------------------------------------------------*/\n   /*      GET JCL FOR THE JOB1 AND SUBMIT                   */\n   /*--------------------------------------------------------*/\n   ISPEXEC FTOPEN TEMP\n   ISPEXEC FTINCL ACC#1SA\n   ISPEXEC FTCLOSE\n   ISPEXEC VGET   ZTEMPF\n   SUBMIT   '&ZTEMPF'\n   /*--------------------------------------------------------*/\n   /*      GET THE VERIFICATION FOR  JOB2                    */\n   /*--------------------------------------------------------*/\n   JCL2:  +\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#1PB)\n   IF &LASTCC = 8 THEN GOTO JCL3\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   JCL STEP 2.\n       GOTO FINISH\n       END\n   /*--------------------------------------------------------*/\n   /*      GET JCL FOR THE JOB2 AND SUBMIT                   */\n   /*--------------------------------------------------------*/\n   ISPEXEC FTOPEN TEMP\n   ISPEXEC FTINCL ACC#1SB\n   ISPEXEC FTCLOSE\n   ISPEXEC VGET   ZTEMPF\n   SUBMIT   '&ZTEMPF'\n   /*--------------------------------------------------------*/\n   /*      GET THE VERIFICATION FOR  JOB3                    */\n   /*--------------------------------------------------------*/\n   JCL3:  +\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#1PC)\n   IF &LASTCC = 8 THEN GOTO LOOP\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   JCL STEP 3.\n       GOTO FINISH\n       END\n   /*--------------------------------------------------------*/\n   /*      GET JCL FOR THE JOB3 AND SUBMIT                   */\n   /*--------------------------------------------------------*/\n   ISPEXEC FTOPEN TEMP\n   ISPEXEC FTINCL ACC#1SC\n   ISPEXEC FTCLOSE\n   ISPEXEC VGET   ZTEMPF\n   SUBMIT   '&ZTEMPF'\n   GOTO LOOP\nFINISH: +\n   CONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ACC#1P": {"ttr": 1540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x93\\x02o\\x00\\x93!O\\x08\\x03\\x00*\\x00(\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-08-02T08:03:00", "lines": 42, "newlines": 40, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+      COMMAND%===>_ZCMD                                              +\n+\n+\n+     % Define a  USERID  Entry for a FMS  Systems Programmer +\n+\n+ Enter USERID%===>_NEWID  +          New userid.\n+     Password%===>_PASSWD  +         Password.\n+      Project%===>_ACTF    +         Account code (8 char max).\n+   Logon proc%===>_PROCED  +         Logon proc name, $TSOUSER, $TSOTRAC.\n+   Max region%===>_MAXREG+           Maximum region size.\n+   MOUNT auth%===>_MNT    +         +NOMOUNT or MOUNT.\n+    ACCT auth%===>_ACCT             +ACCOUNT or NOACCOUNT.\n+    OPER auth%===>_OPER  +          +OPER  or NOOPER.\n+   JOB Submit%===>_JBSUB+           +JCL or NOOJCL.\n+    RMT  Dest%===>_DESTU   +         Remote Dest if any.\n+\n+    Other Defaults: MSGCLASS(A),SYSOUT(A),RECOVER,JOBCLASS(A),HOLD(S),\n+                    UNIT(SYSALLDA)\n+\n+   Master CAT%===>_MASTCAT                   +  (informational only)\n)INIT\n)PROC\n VER (&NEWID,NONBLANK)  VER (&NEWID,NAME)\n VER (&PASSWD,LIST,TSS)\n VER (&ACTF,NONBLANK)\n VER (&PROCED,NONBLANK)  VER(&PROCED,LIST,$TSOUSER,$TSODBA,  +\n                                          $TSOWHIZ,$TSOTRAC)\n VER (&MAXREG,NUM)         VER(&MAXREG,RANGE,1024,8092)\n VER (&ACCT,LIST,ACCT,NOACCT)\n VER (&MOUNT,LIST,MOUNT,NOMOUNT)\n VER (&OPER,LIST,OPER,NOOPER)\n VER (&JBSUB,LIST,JCL,NOJCL)\n IF  (&DESTU = &Z )\n     VER(&DESTU,NAME)\n VER (&MASTCAT,LIST,CATALOG.MVSICFM.VSYACAT)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ACC#1PA": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x93 \\x1f\\x00\\x93 O\\x07H\\x00\\x1c\\x00\\x18\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1993-07-20T00:00:00", "modifydate": "1993-07-23T07:48:00", "lines": 28, "newlines": 24, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+        COMMAND%===>_ZCMD                                             +\n+\n+\n+                          % S T E P 1\n+\n+\n+\n+       YOU  HAVE  MADE  A  REQUEST  TO  ADD  A  TSO  ID  WHERE\n+\n+       TSO  USERID ===>% &NEWID      +\n+\n+\n+       IF  YOU  WISH  TO  CONTINUE  AND  SUBMIT  THE  JOB   TO %CONNECT\n+\n+       THE  ALIAS  ENTRY  FOR  THE  MASTER  CATALOG  OF %THIS+ SYSTEM.\n+\n+\n+\n+       PRESS  ENTER.   OTHERWISE  PRESS  PF3  TO  END  AND  BYPASS.\n+\n+\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#1PB": {"ttr": 1544, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x93\\x16_\\x00\\x93 O\\x07H\\x00\\x1d\\x00\\x17\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1993-06-14T00:00:00", "modifydate": "1993-07-23T07:48:00", "lines": 29, "newlines": 23, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+        COMMAND%===>_ZCMD                                             +\n+\n+\n+                          % S T E P 2\n+\n+\n+       YOU  HAVE  MADE  A  REQUEST  TO  ADD  A  TSO  ID  WHERE\n+\n+       TSO  USERID ===>% &NEWID      +\n+\n+\n+       IF  YOU  WISH  TO  CONTINUE  AND  SUBMIT  THE  JOB  TO %CONNECT\n+\n+       THE  ALIAS  ENTRY  FOR  THE  MASTER  CATALOG  OF  THE\n+\n+      %OTHER SYSTEM+!\n+\n+\n+\n+       PRESS  ENTER.   OTHERWISE  PRESS  PF3  TO  END  AND  BYPASS.\n+\n+\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#1PC": {"ttr": 1546, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x93 \\x1f\\x00\\x93 O\\x07H\\x00\\x1b\\x00\\x18\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1993-07-20T00:00:00", "modifydate": "1993-07-23T07:48:00", "lines": 27, "newlines": 24, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+        COMMAND%===>_ZCMD                                             +\n+\n+\n+                          % S T E P 3\n+\n+\n+       YOU  HAVE  MADE  A  REQUEST  TO  ADD  A  TSO  ID  WHERE\n+\n+       TSO  USERID ===>% &NEWID      +\n+\n+\n+       IF  YOU  WISH  TO  CONTINUE  AND %DUPLICATE+ THE  TSO  ID\n+\n+       ENTRY  ON  THE  OTHER %SYSTEM+!\n+\n+\n+\n+       PRESS  ENTER.   OTHERWISE  PRESS  PF3  TO  BYPASS.\n+\n+\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#1SA": {"ttr": 1548, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x00\\x93\\x16_\\x00\\x93\"?\\x081\\x00\\x0c\\x00\\x12\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1993-06-14T00:00:00", "modifydate": "1993-08-11T08:31:00", "lines": 12, "newlines": 18, "modlines": 0, "user": "S218"}, "text": "//&SYSUID.&NEWID JOB (&ACCT#),'MAST CAT CONNECT',CLASS=A,\n//         MSGCLASS=Z,MSGLEVEL=(1,1)\n/*NOTIFY   &SYSUID\n//* ----------------------------------------------------------- *\n//*     CONNECT THIS TSOID TO THE MASTER CATALOG CPU1\n//* ----------------------------------------------------------- *\n//CPU1     EXEC PGM=IDCAMS\n//SYSPRINT DD SYSOUT=S\n//SYSIN    DD *\n DEFINE  ALIAS  (NAME(&NEWID)  RELATE('CATALOG.VST1201'))   +\n         CATALOG('&MASTCAT')\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#1SB": {"ttr": 1550, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x00\\x00\\x93 \\x1f\\x00\\x93\"?\\x081\\x00\\r\\x00\\x1a\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1993-07-20T00:00:00", "modifydate": "1993-08-11T08:31:00", "lines": 13, "newlines": 26, "modlines": 0, "user": "S218"}, "text": "//&SYSUID.&NEWID JOB (&ACCT#),'MASTCAT CON OTHER',CLASS=A,\n//         MSGCLASS=Z,MSGLEVEL=(1,1)\n/*NOTIFY   &SYSUID\n/*XEQ      &NODEID\n//* ----------------------------------------------------------- *\n//*     CONNECT THIS TSOID TO THE MASTER CATALOG, OTHER CPU\n//* ----------------------------------------------------------- *\n//CPU1     EXEC PGM=IDCAMS\n//SYSPRINT DD SYSOUT=S\n//SYSIN    DD *\n DEFINE  ALIAS  (NAME(&NEWID)  RELATE('CATALOG.VST1201'))   +\n         CATALOG('&MASTCAT')\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#1SC": {"ttr": 1552, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x93 \\x1f\\x00\\x93\"?\\x082\\x00\\x1a\\x00\\x1a\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1993-07-20T00:00:00", "modifydate": "1993-08-11T08:32:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "S218"}, "text": "//&SYSUID.&NEWID JOB (&ACCT#),'TSOID - OTHER SYS',CLASS=A,\n//         MSGCLASS=Z,MSGLEVEL=(1,1)\n/*NOTIFY   &SYSUID\n/*XEQ      &NODEID\n//* ----------------------------------------------------------- *\n//*     INSTALL TSO ID ON OTHER SYSTEM\n//* ----------------------------------------------------------- *\n//TMP      EXEC PGM=IKJEFT01,TIME=15\n//SYSTSPRT DD SYSOUT=S\n//SYSPRINT DD SYSOUT=S\n//SYSUADS  DD DSN=SYS1.UADS,DISP=SHR\n//SYSLBC   DD DSN=SYS1.BRODCAST,DISP=SHR\n//SYSTSIN  DD *\n ACCOUNT\n ADD   (&NEWID  &PASSWD  &ACTF  &PROCED)      +\n        SIZE(&RSIZE)                          +\n        MAXSIZE(&MAXREG)                      +\n        UNIT(SYSALLDA)                        +\n        DEST(&DESTU)                          +\n        &ACCT                                 +\n        &JBSUB                                +\n        &MNT                                  +\n        &OPER                                 +\n        JCL MSGCLASS(A) SYSOUT(A) JOBCLASS(A) HOLD(S) RECOVER\n END\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#2C": {"ttr": 1554, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1d\\x00\\x00\\x00\\x93\\x02o\\x00\\x93\"?\\x085\\x00\\x96\\x004\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.29", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-08-11T08:35:00", "lines": 150, "newlines": 52, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*----------------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR FMS PANELS FOR TSO ACCOUNT FUNCTIONS   */\n/*      \" ADD TSO USER, GENERAL USER \"                            */\n/*----------------------------------------------------------------*/\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &AUSER = &STR(S)\nSET &TUSER = &STR(T)\nSET &USER = &STR(&SUBSTR(1:1,&SYSUID))\nIF  &USER NE &AUSER  AND  &USER NE &TUSER THEN GOTO FINISH\nSET &NEWID  = &STR( )\nSET &PASSWD = &STR(TSS)\nSET &ACTF   = &STR( )\nSET &PROCED = &STR($TSOUSER)\nSET &MAXREG = &STR(3072)\nSET &JBSUB  = &STR(JCL)\nSET &DESTU  = &STR( )\nSET &MASTCAT = &STR(CATALOG.MVSICFM.VSYACAT)\n/*--------------------------------------------------------*/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#2P) CURSOR(NEWID)\n   IF &LASTCC = 8 THEN GOTO FINISH\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   ADIOS TIME.\n       GOTO FINISH\n       END\n   SET &MASTCAT = &STR(CATALOG.MVSICFM.VSYACAT)\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GOT INFO FROM THE PANEL                           */\n   /*--------------------------------------------------------*/\n   SET &RSIZE = &MAXREG\n   IF  &PROCED = &STR($TSODBA)  THEN  SET &RSIZE = &STR(8092)\n   IF  &DESTU  = &STR( )  THEN +\n       DO\n       SET  &RMTDEST =  &STR( )\n       END\n   ELSE   +\n       DO\n       SET  &RMTDEST =  &STR(DEST(&DESTU))\n       END\n   ACCOUNT\n      ADD (&NEWID  &PASSWD  &ACTF  &PROCED)  +\n      SIZE(&RSIZE)                    +\n      MAXSIZE(&MAXREG)                +\n      UNIT(SYSALLDA)                  +\n      &RMTDEST                        +\n      &JBSUB                          +\n      NOACCT  NOOPER  NOMOUNT         +\n      MSGCLASS(A) SYSOUT(A) JOBCLASS(A) HOLD(S) RECOVER\n   END\n   /*--------------------------------------------------------*/\n   /*      DETERMINE THE CPU WE ARE EXECUTING AND SET THE    */\n   /*      \"NODEID\" TO THE OTHER SYSTEM.  BE CAREFUL!!!      */\n   /*--------------------------------------------------------*/\n   SYSID\n   SET &SYSIDRC  =  &LASTCC\n   IF  &SYSIDRC  =  0  THEN  +\n       DO\n       SET  &NODEID = &STR(N2)\n       SET  &IDT    = &STR(2)\n       SET  &IDO    = &STR(1)\n       END\n   ELSE  +\n       DO\n       SET  &NODEID = &STR(N1)\n       SET  &IDT    = &STR(1)\n       SET  &IDO    = &STR(2)\n       END\n   /*--------------------------------------------------------*/\n   /*      GET THE ACCOUNT NUMBER FROM OUR TSO ID.           */\n   /*--------------------------------------------------------*/\n   GETACCT\n   ISPEXEC  VGET (ACCT#)  SHARED\n   /*--------------------------------------------------------*/\n   /*      GET THE VERIFICATION FOR  JOB1                    */\n   /*--------------------------------------------------------*/\n   JCL1: +\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#2PA)\n   IF &LASTCC = 8 THEN GOTO JCL2\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   JCL STEP 1.\n       GOTO FINISH\n       END\n   /*--------------------------------------------------------*/\n   /*      GET JCL FOR THE JOB1 AND SUBMIT                   */\n   /*--------------------------------------------------------*/\n   ISPEXEC FTOPEN TEMP\n   ISPEXEC FTINCL ACC#2SA\n   ISPEXEC FTCLOSE\n   ISPEXEC VGET   ZTEMPF\n   SUBMIT   '&ZTEMPF'\n   /*--------------------------------------------------------*/\n   /*      GET THE VERIFICATION FOR  JOB2                    */\n   /*--------------------------------------------------------*/\n   JCL2: +\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#2PB)\n   IF &LASTCC = 8 THEN GOTO JCL3\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   JCL STEP 2.\n       GOTO FINISH\n       END\n   /*--------------------------------------------------------*/\n   /*      GET JCL FOR THE JOB2 AND SUBMIT                   */\n   /*--------------------------------------------------------*/\n   ISPEXEC FTOPEN TEMP\n   ISPEXEC FTINCL ACC#2SB\n   ISPEXEC FTCLOSE\n   ISPEXEC VGET   ZTEMPF\n   SUBMIT   '&ZTEMPF'\n   /*--------------------------------------------------------*/\n   /*      GET THE VERIFICATION FOR  JOB3                    */\n   /*--------------------------------------------------------*/\n   JCL3: +\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#2PC)\n   IF &LASTCC = 8 THEN GOTO LOOP\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   JCL STEP 3.\n       GOTO FINISH\n       END\n   /*--------------------------------------------------------*/\n   /*      GET JCL FOR THE JOB3 AND SUBMIT                   */\n   /*--------------------------------------------------------*/\n   ISPEXEC FTOPEN TEMP\n   ISPEXEC FTINCL ACC#2SC\n   ISPEXEC FTCLOSE\n   ISPEXEC VGET   ZTEMPF\n   SUBMIT   '&ZTEMPF'\n   GOTO LOOP\nFINISH: +\n   CONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ACC#2P": {"ttr": 1558, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x93\\x02o\\x00\\x93!O\\x08A\\x00#\\x00\"\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-08-02T08:41:00", "lines": 35, "newlines": 34, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+      COMMAND%===>_ZCMD                                              +\n+\n+\n+     % Define a  USERID  entry for a FMS  User  +\n+\n+ Enter USERID%===>_NEWID  +        New userid\n+     Password%===>_PASSWD  +       password\n+      Account%===>_ACTF    +       Account code (8 char max)\n+   Logon proc%===>_PROCED  +       Logon proc name - $TSOUSER, $TSODBA,\n+                                                     $TSOTRAC)\n+   Max region%===>_MAXREG+         Maximum region size, 1024-8092\n+   JOB Submit%===>_JBSUB+          JCL or NOJCL\n+    RMT  Dest%===>_DESTU   +       Remote Dest if any\n+\n+   Other Defaults: MSGCLASS(A),SYSOUT(A),RECOVERY,JOBCLASS(A),HOLD(S)\n+                   UNIT(SYSALLDA)\n+\n+   Master CAT%===>_MASTCAT                   +  (informational only)\n)INIT\n)PROC\n VER (&NEWID,NONBLANK)   VER (&NEWID,NAME)\n VER (&PASSWD,LIST,TSS)\n VER (&ACTF,NONBLANK)\n VER (&PROCED,NONBLANK)  VER(&PROCED,LIST,$TSOUSER,$TSODBA,$TSOTRAC)\n VER (&MAXREG,NUM)       VER(&MAXREG,RANGE,1024,8092)\n VER (&JBSUB,LIST,JCL,NOJCL)\n IF  (&DESTU = &Z )\n     VER(&DESTU,NAME)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ACC#2PA": {"ttr": 1560, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x93 \\x1f\\x00\\x93 \\x1f\\x12\\x06\\x00\\x19\\x00\\x18\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1993-07-20T00:00:00", "modifydate": "1993-07-20T12:06:00", "lines": 25, "newlines": 24, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+                          % S T E P 1\n+\n+\n+\n+       YOU  HAVE  MADE  A  REQUEST  TO  ADD  A  TSO  ID  WHERE\n+\n+       TSO  USERID ===>% &NEWID      +\n+\n+\n+       IF  YOU  WISH  TO  CONTINUE  AND  SUBMIT  THE  JOB   TO %CONNECT\n+\n+       THE  ALIAS  ENTRY  FOR  THE  MASTER  CATALOG  OF %THIS+ SYSTEM.\n+\n+\n+\n+       PRESS  ENTER.   OTHERWISE  PRESS  PF3  TO  END  AND  BYPASS.\n+\n+\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#2PB": {"ttr": 1562, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x93\\x16_\\x00\\x93 \\x1f\\x12\\x06\\x00\\x1a\\x00\\x17\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1993-06-14T00:00:00", "modifydate": "1993-07-20T12:06:00", "lines": 26, "newlines": 23, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+                          % S T E P 2\n+\n+\n+       YOU  HAVE  MADE  A  REQUEST  TO  ADD  A  TSO  ID  WHERE\n+\n+       TSO  USERID ===>% &NEWID      +\n+\n+\n+       IF  YOU  WISH  TO  CONTINUE  AND  SUBMIT  THE  JOB  TO %CONNECT\n+\n+       THE  ALIAS  ENTRY  FOR  THE  MASTER  CATALOG  OF  THE\n+\n+      %OTHER SYSTEM+!\n+\n+\n+\n+       PRESS  ENTER.   OTHERWISE  PRESS  PF3  TO  END  AND  BYPASS.\n+\n+\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#2PC": {"ttr": 1794, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x93 \\x1f\\x00\\x93 \\x1f\\x12\\x06\\x00\\x18\\x00\\x18\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1993-07-20T00:00:00", "modifydate": "1993-07-20T12:06:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+                          % S T E P 3\n+\n+\n+       YOU  HAVE  MADE  A  REQUEST  TO  ADD  A  TSO  ID  WHERE\n+\n+       TSO  USERID ===>% &NEWID      +\n+\n+\n+       IF  YOU  WISH  TO  CONTINUE  AND %DUPLICATE+ THE  TSO  ID\n+\n+       ENTRY  ON  THE  OTHER %SYSTEM+!\n+\n+\n+\n+       PRESS  ENTER.   OTHERWISE  PRESS  PF3  TO  BYPASS.\n+\n+\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#2SA": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x93 \\x1f\\x00\\x93\"?\\x082\\x00\\x0c\\x00\\x0b\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1993-07-20T00:00:00", "modifydate": "1993-08-11T08:32:00", "lines": 12, "newlines": 11, "modlines": 0, "user": "S218"}, "text": "//&SYSUID.&NEWID JOB (&ACCT#),'MAST CAT CONNECT',CLASS=A,\n//         MSGCLASS=Z,MSGLEVEL=(1,1)\n/*NOTIFY   &SYSUID\n//* ----------------------------------------------------------- *\n//*     CONNECT THIS TSOID TO THE MASTER CATALOG THIS CPU\n//* ----------------------------------------------------------- *\n//CPU#&IDT EXEC PGM=IDCAMS\n//SYSPRINT DD SYSOUT=S\n//SYSIN    DD *\n DEFINE  ALIAS  (NAME(&NEWID)  RELATE(CATALOG.VST1201))   +\n         CATALOG('&MASTCAT')\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#2SB": {"ttr": 1798, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x93 \\x1f\\x00\\x93\"?\\x082\\x00\\r\\x00\\x0c\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1993-07-20T00:00:00", "modifydate": "1993-08-11T08:32:00", "lines": 13, "newlines": 12, "modlines": 0, "user": "S218"}, "text": "//&SYSUID.&NEWID JOB (&ACCT#),'MASTCAT CON - OTHER',CLASS=A,\n//         MSGCLASS=Z,MSGLEVEL=(1,1)\n/*NOTIFY   &SYSUID\n/*XEQ      &NODEID\n//* ----------------------------------------------------------- *\n//*     CONNECT THIS TSOID TO THE OTHER SYSTEM'S MASTER CATALOG\n//* ----------------------------------------------------------- *\n//CPU#&IDO EXEC PGM=IDCAMS\n//SYSPRINT DD SYSOUT=S\n//SYSIN    DD *\n DEFINE  ALIAS  (NAME(&NEWID)  RELATE(CATALOG.VST1201))  +\n         MASTER('&MASTCAT')\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#2SC": {"ttr": 1800, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x93 \\x1f\\x00\\x93\"?\\x083\\x00\\x18\\x00+\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1993-07-20T00:00:00", "modifydate": "1993-08-11T08:33:00", "lines": 24, "newlines": 43, "modlines": 0, "user": "S218"}, "text": "//&SYSUID.&NEWID JOB (&ACCT#),'TSOID - OTHER SYS',CLASS=A,\n//         MSGCLASS=Z,MSGLEVEL=(1,1)\n/*NOTIFY   &SYSUID\n/*XEQ      &NODEID\n//* ----------------------------------------------------------- *\n//*     INSTALL TSO ID ON OTHER SYSTEM\n//* ----------------------------------------------------------- *\n//TMP#&IDO EXEC PGM=IKJEFT01,TIME=15\n//SYSTSPRT DD SYSOUT=S\n//SYSPRINT DD SYSOUT=S\n//SYSUADS  DD DSN=SYS1.UADS,DISP=SHR\n//SYSLBC   DD DSN=SYS1.BRODCAST,DISP=SHR\n//SYSTSIN  DD *\n ACCOUNT\n ADD   (&NEWID  &PASSWD  &ACTF  &PROCED)      +\n        SIZE(&RSIZE)                          +\n        MAXSIZE(&MAXREG)                      +\n        UNIT(SYSALLDA)                        +\n        &RMTDEST                               +\n        &JBSUB                                +\n        NOACCT  NOOPER NOMOUNT                +\n        MSGCLASS(A) SYSOUT(A) JOBCLASS(A) HOLD(S) RECOVER\n END\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#3C": {"ttr": 1802, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x18\\x00\\x00\\x00\\x93\\x02o\\x00\\x93\"?\\x085\\x00\\x8b\\x00%\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.24", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-08-11T08:35:00", "lines": 139, "newlines": 37, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*----------------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR FMS PANELS FOR TSO ACCOUNT FUNCTIONS   */\n/*      \" DELETE TSO USER \"                                       */\n/*----------------------------------------------------------------*/\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &AUSER = &STR(S)\nSET &TUSER = &STR(T)\nSET &USER = &STR(&SUBSTR(1:1,&SYSUID))\nIF  &USER NE &AUSER  AND  &USER NE &TUSER THEN GOTO FINISH\nSET &NEWID = &STR( )\nSET &MASTCAT = &STR(CATALOG.MVSICFM.VSYACAT)\n/*--------------------------------------------------------*/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#3P) CURSOR(NEWID)\n   IF &LASTCC = 8 THEN GOTO FINISH\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   ADIOS TIME.\n       GOTO FINISH\n       END\n   SET &MASTCAT = &STR(CATALOG.MVSICFM.VSYACAT)\n   /*--------------------------------------------------------*/\n   /*      VERIFY THE REQUEST, LAST CHANCE.                  */\n   /*--------------------------------------------------------*/\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#3PV)\n   IF &LASTCC = 8 THEN GOTO LOOP\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   ADIOS TIME.\n       GOTO FINISH\n       END\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      DELETE THE  \"ID\" NOW IT HAS BEEN VERIFIED         */\n   /*--------------------------------------------------------*/\n   ACCOUNT\n      DELETE  (&NEWID)\n   END\n   /*--------------------------------------------------------*/\n   /*      DETERMINE THE CPU WE ARE EXECUTING AND SET THE    */\n   /*      \"NODEID\" TO THE OTHER SYSTEM.  BE CAREFUL!!!      */\n   /*--------------------------------------------------------*/\n   SYSID\n   SET &SYSIDRC  =  &LASTCC\n   IF  &SYSIDRC  =  0  THEN  +\n       DO\n       SET  &NODEID = &STR(N2)\n       SET  &IDT    = &STR(2)\n       SET  &IDO    = &STR(1)\n       END\n   ELSE  +\n       DO\n       SET  &NODEID = &STR(N1)\n       SET  &IDT    = &STR(1)\n       SET  &IDO    = &STR(2)\n       END\n   /*--------------------------------------------------------*/\n   /*      GET THE ACCOUNT NUMBER FROM OUR TSO ID.           */\n   /*--------------------------------------------------------*/\n   GETACCT\n   ISPEXEC  VGET (ACCT#)  SHARED\n   /*--------------------------------------------------------*/\n   /*      GET THE VERIFICATION FOR  JOB1                    */\n   /*--------------------------------------------------------*/\n   JCL1: +\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#3PA)\n   IF &LASTCC = 8 THEN GOTO JCL2\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   JCL STEP 1.\n       GOTO FINISH\n       END\n   /*--------------------------------------------------------*/\n   /*      GET JCL FOR THE JOB1 AND SUBMIT                   */\n   /*--------------------------------------------------------*/\n   ISPEXEC FTOPEN TEMP\n   ISPEXEC FTINCL ACC#3SA\n   ISPEXEC FTCLOSE\n   ISPEXEC VGET   ZTEMPF\n   SUBMIT   '&ZTEMPF'\n   /*--------------------------------------------------------*/\n   /*      GET THE VERIFICATION FOR  JOB2                    */\n   /*--------------------------------------------------------*/\n   JCL2: +\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#3PB)\n   IF &LASTCC = 8 THEN GOTO JCL3\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   JCL STEP 2.\n       GOTO FINISH\n       END\n   /*--------------------------------------------------------*/\n   /*      GET JCL FOR THE JOB2 AND SUBMIT                   */\n   /*--------------------------------------------------------*/\n   ISPEXEC FTOPEN TEMP\n   ISPEXEC FTINCL ACC#3SB\n   ISPEXEC FTCLOSE\n   ISPEXEC VGET   ZTEMPF\n   SUBMIT   '&ZTEMPF'\n   /*--------------------------------------------------------*/\n   /*      GET THE VERIFICATION FOR  JOB3                    */\n   /*--------------------------------------------------------*/\n   JCL3: +\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#3PC)\n   IF &LASTCC = 8 THEN GOTO LOOP\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   JCL STEP 3.\n       GOTO FINISH\n       END\n   /*--------------------------------------------------------*/\n   /*      GET JCL FOR THE JOB3 AND SUBMIT                   */\n   /*--------------------------------------------------------*/\n   ISPEXEC FTOPEN TEMP\n   ISPEXEC FTINCL ACC#3SC\n   ISPEXEC FTCLOSE\n   ISPEXEC VGET   ZTEMPF\n   SUBMIT   '&ZTEMPF'\n   GOTO LOOP\nFINISH: +\n   CONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ACC#3P": {"ttr": 1805, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x93\\x02o\\x00\\x93!O\\x08B\\x00\\x14\\x00\\x13\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-08-02T08:42:00", "lines": 20, "newlines": 19, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+         COMMAND%===>_ZCMD                                           +\n+\n+\n+             % Delete a  USERID  entry from TSO    +\n+\n+\n+    Enter USERID%===>_NEWID  +        Userid to be Deleted.\n+\n+\n+      Master CAT%===>_MASTCAT                   +  (informational only)\n+\n)PROC\n VER (&NEWID,NONBLANK) VER(&NEWID,NAME)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ACC#3PA": {"ttr": 1807, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x93 \\x1f\\x00\\x93 O\\x07I\\x00\\x19\\x00\\x18\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1993-07-20T00:00:00", "modifydate": "1993-07-23T07:49:00", "lines": 25, "newlines": 24, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+        COMMAND%===>_ZCMD                                             +\n+\n+\n+                          % S T E P 1\n+\n+\n+       YOU  HAVE  MADE  A  REQUEST  TO %DELETE+ A  TSO  ID  WHERE\n+\n+       TSO  USERID ===>% &NEWID      +\n+\n+\n+       IF  YOU  WISH  TO  CONTINUE  AND  SUBMIT  THE  JOB  TO %DELETE\n+\n+       THE  ALIAS  ENTRY  FOR  THE  MASTER  CATALOG  OF %THIS+ SYSTEM,\n+\n+       PRESS  ENTER.   OTHERWISE  PRESS  PF3  TO  BYPASS.\n+\n+\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#3PB": {"ttr": 1809, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x93 \\x1f\\x00\\x93 O\\x07I\\x00\\x1c\\x00\\x1a\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1993-07-20T00:00:00", "modifydate": "1993-07-23T07:49:00", "lines": 28, "newlines": 26, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+        COMMAND%===>_ZCMD                                             +\n+\n+\n+                          % S T E P 2\n+\n+\n+       YOU  HAVE  MADE  A  REQUEST  TO %DELETE+ A  TSO  ID  WHERE\n+\n+       TSO  USERID ===>% &NEWID      +\n+\n+\n+       IF  YOU  WISH  TO  CONTINUE  AND  SUBMIT  THE  JOB  TO %DELETE\n+\n+       THE  ALIAS  ENTRY  FOR  THE  MASTER  CATALOG  OF  THE\n+\n+      %OTHER SYSTEM+,  PRESS  ENTER.\n+\n+\n+       OTHERWISE  PRESS  PF3  TO  END  AND  BYPASS.\n+\n+\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#3PC": {"ttr": 1811, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x93 \\x1f\\x00\\x93 O\\x07I\\x00\\x1a\\x00\\x18\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1993-07-20T00:00:00", "modifydate": "1993-07-23T07:49:00", "lines": 26, "newlines": 24, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+        COMMAND%===>_ZCMD                                             +\n+\n+\n+                          % S T E P 3\n+\n+\n+       YOU  HAVE  MADE  A  REQUEST  TO %DELETE+ A  TSO  ID  WHERE\n+\n+       TSO  USERID ===>% &NEWID      +\n+\n+\n+       IF  YOU  WISH  TO  CONTINUE  AND %DELETE+ THE  TSO  ID\n+\n+       ENTRY  ON  THE %OTHER  SYSTEM+,  PRESS  ENTER.\n+\n+\n+       OTHERWISE  PRESS  PF3  TO  BYPASS.\n+\n+\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#3PV": {"ttr": 1813, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x93\\x02o\\x00\\x93 O\\x07P\\x00\\x19\\x00\\x1a\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-07-23T07:50:00", "lines": 25, "newlines": 26, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+        COMMAND%===>_ZCMD                                             +\n+\n+\n+                          % V E R I F Y\n+\n+\n+       YOU  HAVE  MADE  A  REQUEST  TO  DELETE  A  TSO  ID  WHERE\n+\n+       TSO  USERID ===>% &NEWID\n+\n+\n+\n+       IF  YOU  WISH  TO  CONTINUE  AND  DELETE  THE  USERID,\n+\n+       PRESS  ENTER.   OTHERWISE  PRESS  PF3  TO  END  WITHOUT\n+\n+       TAKING  FURTHER  ACTION.\n+\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#3SA": {"ttr": 1815, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x00\\x93 \\x1f\\x00\\x93\"?\\x083\\x00\\x14\\x00\\x1a\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1993-07-20T00:00:00", "modifydate": "1993-08-11T08:33:00", "lines": 20, "newlines": 26, "modlines": 0, "user": "S218"}, "text": "//&SYSUID.&NEWID JOB (&ACCT#),'MASTCAT DEL 1',CLASS=A,\n//         MSGCLASS=Z,MSGLEVEL=(1,1)\n/*NOTIFY   &SYSUID\n//* ----------------------------------------------------------- *\n//*     DELETE THE ALIAS ENTRY FOR THIS SYSTEM\n//* ----------------------------------------------------------- *\n//CPU#&IDT EXEC PGM=IDCAMS\n//SYSPRINT DD SYSOUT=S\n//SYSIN    DD *\n   /* ------------------------------------- */\n   /*   CHECK TO SEE IF THERE ARE ANY THING */\n   /*   LEFT IN THE CATALOG. IF SO, DO NOT  */\n   /*   DELETE ALIAS ENTRY.                 */\n   /* ------------------------------------- */\n   LISTCAT  LEVEL(&NEWID)\n   IF  LASTCC  NE  0   THEN   +\n        DO\n        DELETE  &NEWID  ALIAS  CATALOG('&MASTCAT')\n        END\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#3SB": {"ttr": 1817, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x93 \\x1f\\x00\\x93\"?\\x083\\x00\\x15\\x00+\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1993-07-20T00:00:00", "modifydate": "1993-08-11T08:33:00", "lines": 21, "newlines": 43, "modlines": 0, "user": "S218"}, "text": "//&SYSUID.&NEWID JOB (&ACCT#),'MASTCAT DEL 2',CLASS=A,\n//         MSGCLASS=Z,MSGLEVEL=(1,1)\n/*NOTIFY   &SYSUID\n/*XEQ      &NODEID\n//* ----------------------------------------------------------- *\n//*        DELETE THE ALIAS ENTRY FOR THE OTHER SYSTEM\n//* ----------------------------------------------------------- *\n//CPU#&IDO EXEC PGM=IDCAMS\n//SYSPRINT DD SYSOUT=S\n//SYSIN    DD *\n   /* ------------------------------------- */\n   /*   CHECK TO SEE IF THERE ARE ANY THING */\n   /*   LEFT IN THE CATALOG. IF SO, DO NOT  */\n   /*   DELETE ALIAS ENTRY.                 */\n   /* ------------------------------------- */\n   LISTCAT  LEVEL(&NEWID)\n   IF  LASTCC  NE  0   THEN   +\n        DO\n        DELETE  &NEWID  ALIAS  CATALOG('&MASTCAT')\n        END\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#3SC": {"ttr": 1819, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x93 \\x1f\\x00\\x93\"?\\x084\\x00\\x11\\x00\\x18\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1993-07-20T00:00:00", "modifydate": "1993-08-11T08:34:00", "lines": 17, "newlines": 24, "modlines": 0, "user": "S218"}, "text": "//&SYSUID.&NEWID JOB (&ACCT#),'TSOID - OTHER SYS',CLASS=A,\n//         MSGCLASS=Z,MSGLEVEL=(1,1)\n/*NOTIFY   &SYSUID\n/*XEQ      &NODEID\n//* ----------------------------------------------------------- *\n//*     DELETE  TSO ID ON OTHER SYSTEM\n//* ----------------------------------------------------------- *\n//TMP#&IDO EXEC PGM=IKJEFT01,TIME=15\n//SYSTSPRT DD SYSOUT=S\n//SYSPRINT DD SYSOUT=S\n//SYSUADS  DD DSN=SYS1.UADS,DISP=SHR\n//SYSLBC   DD DSN=SYS1.BRODCAST,DISP=SHR\n//SYSTSIN  DD *\n ACCOUNT\n DELETE  (&NEWID)\n END\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#4C": {"ttr": 1821, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x13\\x00\\x00\\x00\\x93\\x02o\\x00\\x93!O\\x10\\t\\x003\\x00/\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.19", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-08-02T10:09:00", "lines": 51, "newlines": 47, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*----------------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR FMS PANELS FOR TSO ACCOUNT FUNCTIONS   */\n/*      \" ADD SECONDARY LOGON PROCEDURE \"                         */\n/*----------------------------------------------------------------*/\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &AUSER = &STR(S)\nSET &TUSER = &STR(T)\nSET &USER = &STR(&SUBSTR(1:1,&SYSUID))\nIF  &USER NE &AUSER  AND  &USER NE &TUSER THEN GOTO FINISH\nSET &NEWID  = &STR( )\nSET &PROCED = &STR( )\nSET &PASSWD = &STR( )\nSET &MAXREG = &STR(3072)\n/*--------------------------------------------------------*/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#4P) CURSOR(NEWID)\n   IF &LASTCC = 8 THEN GOTO FINISH\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   ADIOS TIME.\n       GOTO FINISH\n       END\n   IF &PASSWD = &STR( ) THEN +\n       DO\n       SET &PASSWD = &STR(*)\n       END\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GOT INFO FROM THE PANEL                           */\n   /*--------------------------------------------------------*/\n   SET  &RSIZE = &MAXREG\n   IF   &PROCED = &STR($TSODBA) THEN SET &RSIZE = &STR(8092)\n   ACCOUNT\n     ADD (&NEWID  &PASSWD * )            +\n         DATA(&PROCED) SIZE(&RSIZE)      +\n         UNIT(SYSALLDA)\n     END\n   SET &PASSWD = &STR( )\n   GOTO LOOP\nFINISH: +\n   CONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ACC#4P": {"ttr": 2049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x93\\x02o\\x00\\x93\"/\\x107\\x00!\\x00\\x1a\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-08-10T10:37:00", "lines": 33, "newlines": 26, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+         COMMAND%===>_ZCMD                                            +\n+\n+\n+     % Add a Secondary LOGON Procedure for a TSO user +\n+\n+\n+\n+    Enter USERID%===>_NEWID   +       Enter Existing Userid.\n+\n+        Password%===>_PASSWD  +       Blank implies to add for all passwords.\n+\n+      Logon Proc%===>_PROCED  +       Logon Proc Name: $TSODBA,  $TSOUSER,\n+                                                       $TSOALEX, $TSOWHIZ,\n+                                                       $TSOAPD,  $TSOPILO,\n+                                                       $TSOUSE2, $TSO\n+\n+\n+   Note:  The above LOGON Proc is added to all Pass Word and Account\n+          Number structures.\n)PROC\n VER (&NEWID,NONBLANK) VER(&NEWID,NAME)\n IF  (&PASSWD NE &Z)\n       VER(&PASSWD,NAME)\n VER (&PROCED,NONBLANK) VER(&PROCED,LIST,$TSOUSER,$TSODBA,$TSOWHIZ, +\n                                         $TSOALEX,$TSOAPD,$TSOPILO, +\n                                         $TSOAPD,$TSO,$TSOUSE2)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ACC#5C": {"ttr": 2051, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x00\\x00\\x93\\x02o\\x00\\x93!O\\x07A\\x007\\x00&\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-08-02T07:41:00", "lines": 55, "newlines": 38, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*----------------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR FMS PANELS FOR TSO ACCOUNT FUNCTIONS   */\n/*      \" DELETE SECONDARY LOGON PROCEDURE \"                      */\n/*----------------------------------------------------------------*/\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &AUSER = &STR(S)\nSET &TUSER = &STR(T)\nSET &USER = &STR(&SUBSTR(1:1,&SYSUID))\nIF  &USER NE &AUSER  AND  &USER NE &TUSER THEN GOTO FINISH\nSET &NEWID  = &STR( )\nSET &PROCED = &STR( )\nSET &PASSWD = &STR( )\n/*--------------------------------------------------------*/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#5P) CURSOR(NEWID)\n   IF &LASTCC = 8 THEN GOTO FINISH\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   ADIOS TIME.\n       GOTO FINISH\n       END\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#5PV)\n   IF &LASTCC = 8 THEN GOTO FINISH\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   ADIOS TIME.\n       GOTO FINISH\n       END\n   IF &PASSWD = &STR( ) THEN +\n       DO\n       SET &PASSWD = &STR(*)\n       END\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GOT INFO FROM THE PANEL                           */\n   /*--------------------------------------------------------*/\n   ACCOUNT\n     DELETE  (&NEWID &PASSWD * )  DATA(&PROCED)\n   END\n   SET &PASSWD = &STR( )\n   GOTO LOOP\nFINISH: +\n   CONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ACC#5P": {"ttr": 2053, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x93\\x02o\\x00\\x93!O\\x10!\\x00\\x1d\\x00\\x17\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-08-02T10:21:00", "lines": 29, "newlines": 23, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+         COMMAND%===>_ZCMD                                          +\n+\n+\n+     % Delete a Secondary Logon Proc  for a TSO User +\n+\n+\n+    Enter USERID%===>_NEWID  +        TSO userid\n+\n+        Password%===>_PASSWD +        Blank implies to delete for all\n+                                      passwords.\n+\n+      Logon Proc%===>_PROCED  +       Logon proc name to be deleted.\n+\n+\n+\n+ %Caution:+ If you delete the only LOGON Proc existing beneath an Account\n+            Number, then the Account Number is also deleted.\n)PROC\n VER (&NEWID,NONBLANK)  VER(&NEWID,NAME)\n IF  (&PASSWD  NE  &Z)\n       VER(&PASSWD,NAME)\n VER (&PROCED,NONBLANK)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ACC#5PV": {"ttr": 2055, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x93\\x02o\\x00\\x93!O\\t@\\x00\\x19\\x00\\x18\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-08-02T09:40:00", "lines": 25, "newlines": 24, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+                          % V E R I F Y\n+\n+\n+       YOU  HAVE  MADE  A  REQUEST  TO  DELETE  A  TSO  USERID'S  LOGON  PROC\n+\n+\n+       TSO  USERID ===>% &NEWID\n+\n+       LOGON  PROC ===>% &PROCED\n+\n+\n+\n+       IF  YOU  WISH  TO  CONTINUE  AND  DELETE  THE  LOGON  PROC,\n+\n+       PRESS  ENTER.   OTHERWISE  PRESS  PF3  TO  END  WITHOUT\n+\n+       TAKING  FURTHER  ACTION.\n+\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#6C": {"ttr": 2057, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00\\x00\\x00\\x93\\x02o\\x00\\x93!O\\t\\x18\\x005\\x002\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-08-02T09:18:00", "lines": 53, "newlines": 50, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*----------------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR FMS PANELS FOR TSO ACCOUNT FUNCTIONS   */\n/*      \" ADD SECONDARY ACCOUNT CODE \"                            */\n/*----------------------------------------------------------------*/\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &AUSER = &STR(S)\nSET &TUSER = &STR(T)\nSET &USER = &STR(&SUBSTR(1:1,&SYSUID))\nIF  &USER NE &AUSER  AND  &USER NE &TUSER THEN GOTO FINISH\nSET &NEWID  = &STR( )\nSET &PASSWD = &STR( )\nSET &ACTF   = &STR( )\nSET &PROCED = &STR($TSOUSER)\nSET &MAXREG = &STR(3072)\n/*--------------------------------------------------------*/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#6P) CURSOR(NEWID)\n   IF &LASTCC = 8 THEN GOTO FINISH\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   ADIOS TIME.\n       GOTO FINISH\n       END\n   IF &PASSWD = &STR( ) THEN +\n       DO\n       SET &PASSWD = &STR(*)\n       END\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GOT INFO FROM THE PANEL                           */\n   /*--------------------------------------------------------*/\n   SET &RSIZE = &MAXREG\n   IF  &PROCED = &STR($TSODBA)  THEN  SET &RSIZE = &STR(8092)\n   ACCOUNT\n     ADD (&NEWID  &PASSWD)          +\n          DATA(&ACTF &PROCED)       +\n          SIZE(&RSIZE)              +\n          UNIT(SYSALLDA)\n     END\n   SET &PASSWD = &STR( )\n   GOTO LOOP\nFINISH: +\n   CONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ACC#6P": {"ttr": 2059, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x93\\x02o\\x00\\x93!O\\x08\\x10\\x00\\x1f\\x00\\x18\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-08-02T08:10:00", "lines": 31, "newlines": 24, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+      COMMAND%===>_ZCMD                                              +\n+\n+\n+        % Add Alternate Account number for a  TSO ID   +\n+\n+\n+ Enter USERID%===>_NEWID  +       Existing Userid.\n+\n+     Password%===>_PASSWD +       Blank implies to add for all passwords.\n+                                      passwords.\n+\n+    Acct Info%===>_ACTF    +      New Accounting field to add.\n+\n+   Logon Proc%===>_PROCED  +      Logon procedure.\n+\n+   Max Region%===>_MAXREG+        Maximum Region Size, 1024-8092.\n+\n)PROC\n VER (&NEWID,NONBLANK)   VER (&NEWID,NAME)\n IF  (&PASSWD  NE  &Z)\n       VER(&PASSWD,NAME)\n VER (&ACTF,NONBLANK)    VER(&ACTF,NAME)\n VER (&PROCED,NONBLANK)  VER(&PROCED,LIST,$TSOUSER,$TSODBA,$TSOWHIZ)\n VER (&MAXREG,NUM)       VER(&MAXREG,RANGE,1024,8092)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ACC#7C": {"ttr": 2061, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x0f\\x00\\x00\\x00\\x93\\x02o\\x00\\x93!O\\t\\x18\\x007\\x00'\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@\"", "ispf": {"version": "01.15", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-08-02T09:18:00", "lines": 55, "newlines": 39, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*----------------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR FMS PANELS FOR TSO ACCOUNT FUNCTIONS   */\n/*      \" DELETE SECONDARY ACCOUNT CODE \"                         */\n/*----------------------------------------------------------------*/\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &AUSER = &STR(S)\nSET &TUSER = &STR(T)\nSET &USER = &STR(&SUBSTR(1:1,&SYSUID))\nIF  &USER NE &AUSER  AND  &USER NE &TUSER THEN GOTO FINISH\nSET &NEWID  = &STR( )\nSET &PASSWD = &STR( )\nSET &ACTF   = &STR( )\n/*--------------------------------------------------------*/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#7P) CURSOR(NEWID)\n   IF &LASTCC = 8 THEN GOTO FINISH\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   ADIOS TIME.\n       GOTO FINISH\n       END\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#7PV)\n   IF &LASTCC = 8 THEN GOTO LOOP\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   ADIOS TIME.\n       GOTO FINISH\n       END\n   IF &PASSWD = &STR( ) THEN +\n       DO\n       SET &PASSWD = &STR(*)\n       END\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GOT INFO FROM THE PANEL                           */\n   /*--------------------------------------------------------*/\n   ACCOUNT\n     DELETE (&NEWID &PASSWD  &ACTF)\n   END\n   SET &PASSWD = &STR( )\n   GOTO LOOP\nFINISH: +\n   CONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ACC#7P": {"ttr": 2063, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x93\\x02o\\x00\\x93!O\\x08\\x16\\x00\\x19\\x00\\x15\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-08-02T08:16:00", "lines": 25, "newlines": 21, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+      COMMAND%===>_ZCMD                                               +\n+\n+\n+  % Delete an  Alternate Account number from a TSO ID      +\n+\n+\n+    Enter USERID%===>_NEWID  +       Existing Userid\n+\n+        Password%===>_PASSWD  +      Blank implies to delete Account number\n+                                     for all pass words.\n+\n+       Acct info%===>_ACTF    +      Accounting field\n+\n)PROC\n VER (&NEWID,NONBLANK)  VER (&NEWID,NAME)\n IF  (&PASSWD NE &Z)\n       VER(&PASSWD,NAME)\n VER (&ACTF,NONBLANK)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ACC#7PV": {"ttr": 2065, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x93\\x02o\\x00\\x93 O\\x07P\\x00\\x1c\\x00\\x18\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-07-23T07:50:00", "lines": 28, "newlines": 24, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+        COMMAND%===>_ZCMD                                             +\n+\n+\n+                          % V E R I F Y\n+\n+\n+    YOU  HAVE  MADE  A  REQUEST  TO  DELETE  AN  ACCOUNT  FOR  A  TSO  USER.\n+\n+\n+       TSO  USERID ===>% &NEWID\n+\n+      ACCOUNT CODE ===>% &ACTF\n+\n+\n+\n+       IF  YOU  WISH  TO  CONTINUE  AND  DELETE  THE  ACCOUNT  CODE,\n+\n+       PRESS  ENTER.   OTHERWISE  PRESS  PF3  TO  END  WITHOUT\n+\n+       TAKING  FURTHER  ACTION.\n+\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#8C": {"ttr": 2067, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x00\\x93\\x02o\\x00\\x93!O\\t\\x19\\x00/\\x00(\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-08-02T09:19:00", "lines": 47, "newlines": 40, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR FMS   PANELS FOR USE           */\n/*               DOING TSO 'ACCOUNT' FUNCTIONS            */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &AUSER = &STR(S)\nSET &TUSER = &STR(T)\nSET &USER = &STR(&SUBSTR(1:1,&SYSUID))\nIF  &USER NE &AUSER  AND  &USER NE &TUSER THEN GOTO FINISH\nSET &NEWID  = &STR( )\nSET &PASSWD = &STR( )\nSET &ACTF   = &STR( )\nSET &OACTF  = &STR( )\n/*--------------------------------------------------------*/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#8P) CURSOR(NEWID)\n   IF &LASTCC = 8 THEN GOTO FINISH\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   ADIOS TIME.\n       GOTO FINISH\n       END\n   IF &PASSWD = &STR( ) THEN +\n       DO\n       SET &PASSWD = &STR(*)\n       END\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GOT INFO FROM THE PANEL                           */\n   /*--------------------------------------------------------*/\n   ACCOUNT\n     CHANGE  (&NEWID &PASSWD &OACTF) DATA(&ACTF)\n   END\n   SET &PASSWD = &STR( )\n   GOTO LOOP\nFINISH: +\n   CONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC#8P": {"ttr": 2069, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x93\\x02o\\x00\\x93!O\\x080\\x00\\x1c\\x00\\x18\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-08-02T08:30:00", "lines": 28, "newlines": 24, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+        COMMAND%===>_ZCMD                                             +\n+\n+\n+  % Change the Account information for  TSO ID      +\n+\n+\n+    Enter USERID%===>_NEWID  +       Existing Userid.\n+\n+        Password%===>_PASSWD  +      Blank implies to change the Account\n+                                     number for all pass words.\n+\n+       Acct Info%===>_OACTF   +      Old Accounting field.\n+\n+   New Acct Info%===>_ACTF    +      New Accounting field.\n+\n)PROC\n VER (&NEWID,NONBLANK)  VER (&NEWID,NAME)\n IF  (&PASSWD NE &Z)\n       VER(&PASSWD,NAME)\n VER (&OACTF,NONBLANK)\n VER (&ACTF,NONBLANK)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ACC#9C": {"ttr": 2071, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x93\\x02o\\x00\\x93!O\\x08\"\\x00%\\x00\\'\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-08-02T08:22:00", "lines": 37, "newlines": 39, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR FMS TO CHANGE THE PASSWORD.    */\n/*      NOTE: SINCE WE USE \"TOP SECRET\", THE PASSWORD     */\n/*            ALWAYS SHOWS AS TSS AND IS IGNORED..        */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &AUSER = &STR(S)\nSET &TUSER = &STR(T)\nSET &USER = &STR(&SUBSTR(1:1,&SYSUID))\nIF  &USER NE &AUSER  AND  &USER NE &TUSER THEN GOTO FINISH\nSET &NEWID   = &STR( )\nSET &PASSWD  = &STR( )\nSET &OPASSWD = &STR( )\n/*--------------------------------------------------------*/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ACC#9P) CURSOR(NEWID)\n   IF &LASTCC = 8 THEN GOTO FINISH\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GOT INFO FROM THE PANEL                           */\n   /*--------------------------------------------------------*/\n   ACCOUNT\n     CHANGE  (&NEWID &OPASSWD) DATA(&PASSWD)\n   END\n   GOTO LOOP\nFINISH: +\n   CONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ACC#9P": {"ttr": 2073, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x93\\x02o\\x00\\x93\"\\x1f\\x08Q\\x00\\x1c\\x00\\x1b\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1993-01-26T00:00:00", "modifydate": "1993-08-09T08:51:00", "lines": 28, "newlines": 27, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+        COMMAND%===>_ZCMD                                             +\n+\n+\n+    % Change the Password for a TSO ID      +\n+\n+\n+\n+   Enter USERID%===>_NEWID  +       Existing Userid\n+\n+   Old Password%===>_OPASSWD +      Existing password\n+\n+   New Password%===>_PASSWD  +      New  password\n+\n+\n+   Note:  this panel is only used if you do not have a\n+          security system like RACF, ACF2, TSS, etc installed.\n+\n)PROC\n VER (&NEWID,NONBLANK)    VER (&NEWID,NAME)\n VER (&OPASSWD,NONBLANK)  VER (&OPASSWD,NAME)\n VER (&PASSWD,NONBLANK)   VER (&PASSWD,NAME)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ADM#CC": {"ttr": 2305, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x851\\x9f\\x00\\x86\\x07?\\x136\\x00\\x91\\x00\\x07\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xd9\\xe6@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1985-11-15T00:00:00", "modifydate": "1986-03-14T13:36:00", "lines": 145, "newlines": 7, "modlines": 0, "user": "SS02JRW"}, "text": "PROC 0 DEBUG\n/*-------------------------------------------------------------------*/\n/*  ISPF/PDF CLIST FOR COMPRESSION OF GDDM FILES                     */\n/*     UPDATED FOR FULL GDDM REL 4 SUPPORT.  14 MAR 86  J. R. WARD   */\n/*-------------------------------------------------------------------*/\nCONTROL NOLIST MSG NOFLUSH PROMPT\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST MSG NOFLUSH PROMPT CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nKOMM CLEAR\nWRITE\nWRITE *------------------------------------------------------------*\nWRITE * W  A  R  N  I  N  G  !   PLEASE DO NOT INTERRUPT OR TOUCH  *\nWRITE * YOUR TERMINAL KEYBOARD UNTIL YOUR ARE TOLD TO DO SO.       *\nWRITE *------------------------------------------------------------*\nSTEP1: COMPRESS  ADMCFORM\nIF &LASTCC = 0 THEN  +\n   DO\n   WRITE   ADMCFORM  DATASET COMPRESSED SUCCESSFULLY\n   GOTO STEP2\n   END\nELSE  +\n   DO\n   WRITE  ADMCFORM DATASET DID NOT COMPRESS SUCCESSFULLY.  YOU NEED TO\n   WRITE           TAKE CORRECTIVE ACTION TO ASCERTAIN WHY.\n   GOTO STEP2\n   END\nEND\nSTEP2: COMPRESS  ADMCDATA\nIF &LASTCC = 0 THEN  +\n   DO\n   WRITE   ADMCDATA  DATASET COMPRESSED SUCCESSFULLY\n   GOTO STEP3\n   END\nELSE  +\n   DO\n   WRITE  ADMCDATA DATASET DID NOT COMPRESS SUCCESSFULLY.  YOU NEED TO\n   WRITE           TAKE CORRECTIVE ACTION TO ASCERTAIN WHY.\n   GOTO STEP3\n   END\nEND\nSTEP3: COMPRESS  ADMDECK\nIF &LASTCC = 0 THEN  +\n   DO\n   WRITE   ADMDECK   DATASET COMPRESSED SUCCESSFULLY\n   GOTO STEP4\n   END\nELSE  +\n   DO\n   WRITE  ADMCDECK DATASET DID NOT COMPRESS SUCCESSFULLY.  YOU NEED TO\n   WRITE           TAKE CORRECTIVE ACTION TO ASCERTAIN WHY.\n   GOTO STEP4\n   END\nSTEP4: COMPRESS  ADMSYMBL\nIF &LASTCC = 0 THEN  +\n   DO\n   WRITE   ADMSYMBL  DATASET COMPRESSED SUCCESSFULLY\n   GOTO IMD\n   END\nELSE  +\n   DO\n   WRITE  ADMSYMBL DATASET DID NOT COMPRESS SUCCESSFULLY.  YOU NEED TO\n   WRITE           TAKE CORRECTIVE ACTION TO ASCERTAIN WHY.\n   GOTO IMD\n   END\n/*--------------------------------------------------------------------*/\n/*    CHECK FOR IMD FILES BEFORE COMPRESSION                          */\n/*--------------------------------------------------------------------*/\nIMD: DSNCHECK ADMIFMT NOLIST\nIF &LASTCC = 0 THEN +\n   DO\n   COMPRESS ADMIFMT\n   IF &LASTCC = 0 THEN  +\n      DO\n      WRITE   ADMIFMT  DATASET COMPRESSED SUCCESSFULLY\n      GOTO IMD1\n      END\n   ELSE  +\n      DO\n      WRITE  ADMIFMT DATASET DID NOT COMPRESS SUCCESSFULLY.  YOU NEED TO\n      WRITE          TAKE CORRECTIVE ACTION TO ASCERTAIN WHY.\n      GOTO IMD1\n      END\n   END\nELSE  +\nEND\nIMD1: DSNCHECK ADMGGMAP NOLIST\nIF &LASTCC = 0 THEN +\n   DO\n   COMPRESS ADMGGMAP\n   IF &LASTCC = 0 THEN  +\n      DO\n      WRITE   ADMGGMAP  DATASET COMPRESSED SUCCESSFULLY\n      GOTO IMD2\n      END\n   ELSE  +\n      DO\n      WRITE  ADMGGMAP DATASET DID NOT COMPRESS SUCCESSFULLY.  YOU NEED\n      WRITE           TO TAKE CORRECTIVE ACTION TO ASCERTAIN WHY.\n      GOTO IMD2\n      END\n   END\nELSE  +\nEND\nIMD2: DSNCHECK ADMGDF NOLIST\nIF &LASTCC = 0 THEN +\n   DO\n   COMPRESS ADMGDF\n   IF &LASTCC = 0 THEN  +\n      DO\n      WRITE   ADMGDF  DATASET COMPRESSED SUCCESSFULLY\n      GOTO IMD3\n      END\n   ELSE  +\n      DO\n      WRITE  ADMGDF DATASET DID NOT COMPRESS SUCCESSFULLY.  YOU NEED\n      WRITE         TO TAKE CORRECTIVE ACTION TO ASCERTAIN WHY.\n      GOTO IMD3\n      END\n   END\nELSE  +\nEND\nIMD3: DSNCHECK ADMGNADS NOLIST\nIF &LASTCC = 0 THEN +\n   DO\n   COMPRESS ADMGNADS\n   IF &LASTCC = 0 THEN  +\n      DO\n      WRITE   ADMGNADS  DATASET COMPRESSED SUCCESSFULLY\n      GOTO EOJ\n      END\n   ELSE  +\n      DO\n      WRITE  ADMGNADS DATASET DID NOT COMPRESS SUCCESSFULLY.  YOU NEED\n      WRITE           TO TAKE CORRECTIVE ACTION TO ASCERTAIN WHY.\n      GOTO EOJ\n      END\n   END\nELSE  +\nEND\nEOJ: +\nWRITE *------------------------------------------------------------*\nWRITE *  PRESS ENTER WHEN YOU SEE 3 ASTERICKS AT THE BOTTOM OF     *\nWRITE *  THIS MESSAGE.                                             *\nWRITE *------------------------------------------------------------*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADM#C0": {"ttr": 2309, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x18\\x00\\x00\\x00\\x85 \\x7f\\x00\\x86\\x08O\\x14\\x15\\x00\\xef\\x000\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xd9\\xe6@@@'", "ispf": {"version": "01.24", "flags": 0, "createdate": "1985-07-26T00:00:00", "modifydate": "1986-03-25T14:15:00", "lines": 239, "newlines": 48, "modlines": 0, "user": "SS02JRW"}, "text": "PROC 0 DEBUG\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* WILLIAM SMITH, CIS TECHNICAL SERVICES                             */\n/*   . UPDATED 01NOV84 - GDDM/ISPF DIALOG                            */\n/*     - GRAPHICS FILE ALLOCATION CLIST                              */\n/*         INSTALLED 2ISG, 26 JUL 85,  JDM                           */\n/*     UPDATED FOR FULL GDDM REL 4 SUPPORT.  14 MAR 86  J. R. WARD   */\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* THIS DIALOG PERMITS A TSO USER TO INITIALLY ALLOCATE THE GDDM     */\n/* LIBRARIES PRIOR TO AN INITIAL INVOCATION OF THE INTERACTIVE CHART */\n/* FACILITY, IMAGE SYMBOL EDITOR, VECTOR SYMBOL EDITOR OR INTERACT-  */\n/* IVE MAP DEFINITION.                                               */\n/* ----------------------------------------------------------------- */\nCONTROL NOFLUSH NOMSG\nIF &DEBUG \u00ac=  &STR() THEN +\n   CONTROL LIST MSG NOFLUSH PROMPT CONLIST SYMLIST\nSET &ANS = &STR()\nSET &VOL = &STR()\nISPEXEC DISPLAY PANEL(ADM#P1)\nSET RCODE = &LASTCC\nIF &RCODE \u00ac= 0 THEN EXIT\nKOMM CLEAR\nWRITE *---------------------------------------------------------------*\nWRITE *                     W A R N I N G   !!!!!!!!!                 *\nWRITE *                                                               *\nWRITE *   IF YOU ARE A PRESENT USER OF GDDM, USE OF THIS COMMAND WILL *\nWRITE *   SCRATCH ALL OF YOUR GDDM FILES AND REALLOCATE THEM.         *\nWRITE *---------------------------------------------------------------*\nASKIT: +\nWRITE\nWRITE   IF YOU ARE A FIRST TIME USER OR YOU WOULD LIKE TO HAVE ALL OF\nWRITE   YOUR GDDM FILES SCRATCHED AND REALLOCATED, PLEASE REPLY 'Y' FOR\nWRITE   YES OR 'N' TO EXIT.\nREAD   &ANS\nIF  &ANS = &STR(Y) THEN GOTO PRESSON\nIF  &ANS = &STR(N) THEN  +\n    DO\n    WRITE  THIS COMMAND IS BYPASSED.\n    EXIT\n    END\nELSE  +\n    DO\n    WRITE  YOUR REPLY IS INVALID.\n    GOTO ASKIT\n    END\nEND\n/* ----------------------------------------------------------------- */\n/*   GET RID OF OLD FILES FOR THE REBORN USER.                       */\n/* ----------------------------------------------------------------- */\nPRESSON: +\nFREE FI(ADMCDATA,ADMDECK,ADMCFORM,ADMSYMBL,ADMGDF,ADMGGMAP,ADMGNADS)\nFREE FI(ADMIFMT)\nFREE ATTR(ADMDCB,ADMDCB2)\nDELETE  ADMCDATA\nDELETE  ADMCFORM\nDELETE  ADMDECK\nDELETE  ADMGDF\nDELETE  ADMGGMAP\nDELETE  ADMGNADS\nDELETE  ADMIFMT\nDELETE  ADMSYMBL\nCONTROL MSG\nSET &LASTCC = 0\nSET &MAXCC  = 0\nATTRIB ADMDCB  RECFM(F)   LRECL(400) BLKSIZE(400)\nIF  &LASTCC = 0 THEN  +\n    DO\n    GOTO ADMDCB2\n    END\nELSE +\n    DO\n    GOTO EWRAPUP\n    END\nADMDCB2: +\nATTRIB ADMDCB2 RECFM(F B) LRECL(80)  BLKSIZE(400)\nIF  &LASTCC = 0 THEN  +\n    DO\n    GOTO ADMCDATA\n    END\nELSE +\n    DO\n    SET &MAXCC = &LASTCC\n    GOTO EWRAPUP\n    END\nEND\n/* ----------------------------------------------------------------- */\n/*   ALLOCATION OF GDDM \"ADMCDATA\" DATA SET                          */\n/* ----------------------------------------------------------------- */\nADMCDATA: +\nALLOC FI(ADMCDATA) DA(ADMCDATA) NEW VOL(&VOL.) +\n      SP(&SPDATA.,&SPDATA.) +\n      TRACKS DIR(&DIRBLKS.) USING(ADMDCB) CATALOG\nIF  &LASTCC = 0 THEN  +\n    DO\n    WRITE  ADMCDATA  FILE HAS BEEN ALLOCATED.\n    GOTO ADMDECK\n    END\nELSE +\n    DO\n    SET &MAXCC = &LASTCC\n    GOTO EWRAPUP\n    END\nEND\n/* ----------------------------------------------------------------- */\n/*   ALLOCATION OF GDDM \"ADMDECK\" DATA SET                           */\n/* ----------------------------------------------------------------- */\nADMDECK:  +\nALLOC FI(ADMDECK) DA(ADMDECK) NEW VOL(&VOL.) +\n      SP(&SPDECK.,&SPDECK.) +\n      TRACKS DIR(&DIRBLKS.) USING(ADMDCB2) CATALOG\nIF  &LASTCC = 0 THEN  +\n    DO\n    WRITE  ADMDECK   FILE HAS BEEN ALLOCATED.\n    GOTO ADMCFORM\n    END\nELSE +\n    DO\n    GOTO EWRAPUP\n    END\nEND\n/* ----------------------------------------------------------------- */\n/*   ALLOCATION OF GDDM \"ADMCFORM\" DATA SET                          */\n/* ----------------------------------------------------------------- */\nADMCFORM: +\nALLOC FI(ADMCFORM) DA(ADMCFORM) NEW VOL(&VOL.) +\n      SP(&SPFORM.,&SPFORM.) +\n      TRACKS DIR(&DIRBLKS.) USING(ADMDCB) CATALOG\nIF  &LASTCC = 0 THEN  +\n    DO\n    WRITE  ADMCFORM  FILE HAS BEEN ALLOCATED.\n    GOTO ADMSYMBL\n    END\nELSE +\n    DO\n    GOTO EWRAPUP\n    END\nEND\n/* ----------------------------------------------------------------- */\n/*   ALLOCATION OF GDDM \"ADMSYMBL\" DATA SET                          */\n/* ----------------------------------------------------------------- */\nADMSYMBL: +\nALLOC FI(ADMSYMBL) DA(ADMSYMBL) NEW VOL(&VOL.) +\n      SP(&SPSYMB.,&SPSYMB.) +\n      TRACKS DIR(&DIRBLKS.) USING(ADMDCB2) CATALOG\nIF  &LASTCC = 0 THEN  +\n    DO\n    WRITE  ADMSYMBL  FILE HAS BEEN ALLOCATED.\n    GOTO ADMGDF\n    END\nELSE +\n    DO\n    GOTO EWRAPUP\n    END\nEND\n/* ----------------------------------------------------------------- */\n/*   ALLOCATION OF GDDM \"ADMGDF\" DATA SET                            */\n/* ----------------------------------------------------------------- */\nADMGDF: +\nALLOC FI(ADMGDF) DA(ADMGDF) NEW VOL(&VOL.) +\n      SP(&SPGDF.,&SPGDF.) +\n      TRACKS DIR(&DIRBLKS.) USING(ADMDCB) CATALOG\nIF  &LASTCC = 0 THEN  +\n    DO\n    WRITE  ADMGDF    FILE HAS BEEN ALLOCATED.\n    GOTO ADMGGMAP\n    END\nELSE +\n    DO\n    SET &MAXCC = &LASTCC\n    GOTO EWRAPUP\n    END\nEND\n/* ----------------------------------------------------------------- */\n/*   ALLOCATION OF GDDM \"ADMGGMAP\" DATA SET                          */\n/* ----------------------------------------------------------------- */\nADMGGMAP: +\nALLOC FI(ADMGGMAP) DA(ADMGGMAP) NEW VOL(&VOL.) +\n      SP(&SPGMAP.,&SPGMAP.) +\n      TRACKS DIR(&DIRBLKS.) USING(ADMDCB2) CATALOG\nIF  &LASTCC = 0 THEN  +\n    DO\n    WRITE  ADMGGMAP  FILE HAS BEEN ALLOCATED.\n    GOTO ADMGNADS\n    END\nELSE +\n    DO\n    GOTO EWRAPUP\n    END\nEND\n/* ----------------------------------------------------------------- */\n/*   ALLOCATION OF GDDM \"ADMGNADS\" DATA SET                          */\n/* ----------------------------------------------------------------- */\nADMGNADS: +\nALLOC FI(ADMGNADS) DA(ADMGNADS) NEW VOL(&VOL.) +\n      SP(&SPNADS.,&SPNADS.) +\n      TRACKS DIR(&DIRBLKS.) USING(ADMDCB) CATALOG\nIF  &LASTCC = 0 THEN  +\n    DO\n    WRITE  ADMGNADS  FILE HAS BEEN ALLOCATED.\n    GOTO ADMIFMT\n    END\nELSE +\n    DO\n    GOTO EWRAPUP\n    END\nEND\n/* ----------------------------------------------------------------- */\n/*   ALLOCATION OF GDDM \"ADMIFMT\" DATA SET                           */\n/* ----------------------------------------------------------------- */\nADMIFMT: +\nALLOC FI(ADMIFMT) DA(ADMIFMT) NEW VOL(&VOL.) +\n      SP(&SPIFMT.,&SPIFMT.) +\n      TRACKS DIR(&DIRBLKS.) USING(ADMDCB) CATALOG\nIF  &LASTCC = 0 THEN  +\n    DO\n    WRITE  ADMIFMT   FILE HAS BEEN ALLOCATED.\n    GOTO WRAPUP\n    END\nELSE +\n    DO\n    GOTO EWRAPUP\n    END\nEND\n/* ----------------------------------------------------------------- */\n/*     WE NEED TO GIVE USER A \"WARM AND FUZZY\" FEELING SO THEY       */\n/*     MAY START OFF FEELING GOOD. ALSO NEED TO TELL THEM OF         */\n/*     ANY ERRORS, SO THEY MAY CORRECT.                              */\n/* ----------------------------------------------------------------- */\nWRAPUP:  WRITE\n         WRITE YOU ARE NOW READY TO BEGIN USING GDDM.  HAVE FUN !!\n         GOTO EOJ\nEWRAPUP: WRITE YOU ENCOUNTERED SOME ERROR IN ALLOCATING THE NECESSARY\n         WRITE FILES TO USE GDDM-PGF. PLEASE CORRECT THE ERROR IF\n         WRITE YOU CAN OR CALL FOR ASSISTANCE.\nEOJ:  FREE FI(ADMCDATA,ADMDECK,ADMCFORM,ADMSYMBL,ADMGDF,ADMGGMAP)\n      FREE FI(ADMGNADS,ADMIFMT)\n      FREE ATTR(ADMDCB,ADMDCB2)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADM#C1": {"ttr": 2314, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01*\\x00\\x00\\x00\\x86\\x06\\x9f\\x00\\x86\\x08_\\x15!\\x008\\x00\\x08\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xd9\\xe6@@@'", "ispf": {"version": "01.42", "flags": 0, "createdate": "1986-03-10T00:00:00", "modifydate": "1986-03-26T15:21:00", "lines": 56, "newlines": 8, "modlines": 0, "user": "SS02JRW"}, "text": "PROC 0 DEBUG\n/* CLIST TO CALL GDDM INTERACTIVE MAP DEFINITION (IMD)   J.R. WARD */\nCONTROL NOLIST   MSG NOFLUSH PROMPT\nIF &DEBUG NE &STR() THEN CONTROL LIST MSG NOFLUSH PROMPT CONLIST\nISPEXEC CONTROL ERRORS RETURN\nKOMM CLEAR\nATTRIB ADMDCB  RECFM(F)   LRECL(400) BLKSIZE(400)\nATTRIB ADMDCB2 RECFM(F B) LRECL(80)  BLKSIZE(400)\nDSNCHECK ADMIFMT NOLIST\nIF &LASTCC NE 0 THEN +\n   DO\n      SET &BADFILE = &STR(ADMIFMT)\n      ISPEXEC DISPLAY PANEL(ADM#P1A)\n      ALLOC FI(ADMIFMT) DA(ADMIFMT) NEW VOL(&VOL.) DIR(&DIRBLKS.) +\n        TRACKS SP(&SPACE.,&SPACE.) USING(ADMDCB) CATALOG\n      GOTO GGMAP\n   END\nELSE +\n   GOTO GGMAP\n   END\nGGMAP: DSNCHECK ADMGGMAP NOLIST\nIF &LASTCC NE 0 THEN +\n   DO\n      SET &BADFILE = &STR(ADMGGMAP)\n      ISPEXEC DISPLAY PANEL(ADM#P1A)\n      ALLOC FI(ADMGGMAP) DA(ADMGGMAP) NEW VOL(&VOL.) DIR(&DIRBLKS.) +\n        TRACKS SP(&SPACE.,&SPACE.) USING(ADMDCB2) CATALOG\n      GOTO GNADS\n   END\nELSE +\n   GOTO GNADS\nEND\nGNADS: DSNCHECK ADMGNADS NOLIST\nIF &LASTCC NE 0 THEN +\n   DO\n      SET &BADFILE = &STR(ADMGNADS)\n      ISPEXEC DISPLAY PANEL(ADM#P1A)\n      ALLOC FI(ADMGNADS) DA(ADMGNADS) NEW VOL(&VOL.) DIR(&DIRBLKS.) +\n        TRACKS SP(&SPACE.,&SPACE.) USING(ADMDCB) CATALOG\n      GOTO GOOD\n   END\nELSE +\n   GOTO GOOD\nEND\nGOOD: +\nFREE ATTR(ADMDCB,ADMDCB2)\nALLOC FI(ADMIFMT) DA(ADMIFMT) SHR\nALLOC FI(ADMGGMAP) DA(ADMGGMAP) SHR\nALLOC FI(ADMGNADS) DA(ADMGNADS) SHR\nALLOC FI(ADMLIST) SYSOUT(A)\nALLOC FI(ADMGIMP) DA('SYS1.SADSC.GDDMMAP') SHR\nALLOC FI(MSL1) DA('SYS1.SADSC.GDDMR4.MAPS') SHR\nDOPGM ADMIMD 'MSL1'\nFREE FI(ADMIFMT,ADMGGMAP,ADMGNADS,ADMGIMP,MSL1)\nFREE FI(ADMLIST)\nISPEXEC CONTROL DISPLAY REFRESH\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADM#C2": {"ttr": 2316, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x85 \\x7f\\x00\\x86\\x07?\\x12\\x18\\x00\\x16\\x00\\x15\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xd9\\xe6@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1985-07-26T00:00:00", "modifydate": "1986-03-14T12:18:00", "lines": 22, "newlines": 21, "modlines": 0, "user": "SS02JRW"}, "text": "PROC 0\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* WILLIAM SMITH, CIS TECHNICAL SERVICES                             */\n/*   . UPDATED 01NOV84 - GDDM/ISPF DIALOG                            */\n/*     - INVOKE THE INTERACTIVE CHART UTILITY                        */\n/*         INSTALLED 2ISG,  26 JUL 85,  JDM                          */\n/*     UPDATED FOR FULL GDDM REL 4 SUPPORT.  14 MAR 86  J. R. WARD   */\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* THIS DIALOG PERMITS A TSO USER TO INVOKE THE INTERACTIVE CHART    */\n/* UTILITY AFTER COMPLETION OF THE REQUIRED LIBRARY ALLOCATIONS.     */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\nCONTROL NOFLUSH NOMSG\nALLOC FI(ADMSYMBL) DA(ADMSYMBL) REUSE SHR\nALLOC FI(ADMCFORM) DA(ADMCFORM) REUSE SHR\nALLOC FI(ADMCDATA) DA(ADMCDATA) REUSE SHR\nALLOC FI(ADMGDF) DA(ADMGDF) REUSE SHR\nDOPROGL   ADMCHART\nFREE  FI(ADMSYMBL,ADMCFORM,ADMCDATA,ADMGDF)\nISPEXEC CONTROL DISPLAY REFRESH\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADM#C3": {"ttr": 2318, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x85 \\x7f\\x00\\x86\\x07?\\x12\\x16\\x00\\x14\\x00\\x16\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xd9\\xe6@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1985-07-26T00:00:00", "modifydate": "1986-03-14T12:16:00", "lines": 20, "newlines": 22, "modlines": 0, "user": "SS02JRW"}, "text": "PROC 0\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* WILLIAM SMITH, CIS TECHNICAL SERVICES                             */\n/*   . UPDATED 01NOV84 - GDDM/ISPF DIALOG                            */\n/*     - INVOKE THE IMAGE SYMBOL EDITOR                              */\n/*         INSTALLED  2ISG, 26 JUL 85,  JDM                          */\n/*     UPDATED FOR FULL GDDM REL 4 SUPPORT.  14 MAR 86  J. R. WARD   */\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* THIS DIALOG PERMITS A TSO USER TO INVOKE THE IMAGE SYMBOL EDITOR  */\n/* AFTER COMPLETION OF THE REQUIRED LIBRARY ALLOCATIONS.             */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\nCONTROL NOFLUSH NOMSG\nALLOC FI(ADMDECK)  DA(ADMDECK)  REUSE SHR\nALLOC FI(ADMSYMBL) DA(ADMSYMBL) REUSE SHR\nDOPROGL   ADMISSE\nFREE  FI(ADMDECK,ADMSYMBL)\nISPEXEC CONTROL DISPLAY REFRESH\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADM#C4": {"ttr": 2320, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x85 \\x7f\\x00\\x86\\x07?\\x12\\x15\\x00\\x14\\x00\\x16\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xd9\\xe6@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1985-07-26T00:00:00", "modifydate": "1986-03-14T12:15:00", "lines": 20, "newlines": 22, "modlines": 0, "user": "SS02JRW"}, "text": "PROC 0\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* WILLIAM SMITH, CIS TECHNICAL SERVICES                             */\n/*   . UPDATED 01NOV84 - GDDM/ISPF DIALOG                            */\n/*     - INVOKE THE VECTOR SYMBOL EDITOR                             */\n/*         INSTALLED 2ISG 26 JUL 85,  JDM                            */\n/*     UPDATED FOR FULL GDDM REL 4 SUPPORT.  14 MAR 86  J. R. WARD   */\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* THIS DIALOG PERMITS A TSO USER TO INVOKE THE VECTOR SYMBOL EDITOR */\n/* AFTER COMPLETION OF THE REQUIRED LIBRARY ALLOCATIONS.             */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\nCONTROL NOFLUSH NOMSG\nALLOC FI(ADMDECK)  DA(ADMDECK)  REUSE SHR\nALLOC FI(ADMSYMBL) DA(ADMSYMBL) REUSE SHR\nDOPROGL   ADMVSSE\nFREE  FI(ADMDECK,ADMSYMBL)\nISPEXEC CONTROL DISPLAY REFRESH\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADM#C5": {"ttr": 2322, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x85 \\x8f\\x00\\x86\\x08O\\x12\\x14\\x00\\x07\\x00\\x02\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1985-07-27T00:00:00", "modifydate": "1986-03-25T12:14:00", "lines": 7, "newlines": 2, "modlines": 0, "user": "SS02JDM"}, "text": "PROC 0\n/*--------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR GDDM DEMO                      */\n/*--------------------------------------------------------*/\nALLOC FI(ADMSYMBL) DA('SYS1.SADSC.GDDMSYM') SHR\nCALL 'SYS1.SADSC.GDDM.SAMPEXEC(SAMPLE3)'\nFREE ALL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADM#C6": {"ttr": 2324, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x05\\x00\\x00\\x00\\x85'\\x7f\\x00\\x862\\x8f\\x10G\\x00\\x07\\x00\\x02\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@\"", "ispf": {"version": "01.05", "flags": 0, "createdate": "1985-10-04T00:00:00", "modifydate": "1986-11-24T10:47:00", "lines": 7, "newlines": 2, "modlines": 0, "user": "$354JDM"}, "text": "PROC 0\n/*--------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR GDDM DEMO                      */\n/*--------------------------------------------------------*/\nALLOC FI(FT06F001) DA(*)\nDOPROG SHUTTLE  TASKLIB(DODNS.LOAD,'SYS1.GDDMLOAD')\nFREE  FI(FT06F001)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADM#C7": {"ttr": 2326, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x05\\x00\\x00\\x00\\x85'\\x7f\\x00\\x862\\x8f\\x10H\\x00\\x07\\x00\\x02\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@\"", "ispf": {"version": "01.05", "flags": 0, "createdate": "1985-10-04T00:00:00", "modifydate": "1986-11-24T10:48:00", "lines": 7, "newlines": 2, "modlines": 0, "user": "$354JDM"}, "text": "PROC 0\n/*--------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR GDDM DEMO                      */\n/*--------------------------------------------------------*/\nALLOC FI(FT06F001) DA(*)\nDOPROG SABRBAT  TASKLIB(DODNS.LOAD,'SYS1.GDDMLOAD')\nFREE  FI(FT06F001)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADM#C8": {"ttr": 2561, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x85(\\x0f\\x00\\x862\\x8f\\x10E\\x00\\x07\\x00\\x07\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1985-10-07T00:00:00", "modifydate": "1986-11-24T10:45:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "$354JDM"}, "text": "PROC 0\n/*--------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR GDDM DEMO                      */\n/*--------------------------------------------------------*/\nALLOC FI(FT06F001) DA(*)\nDOPROG  LOGO  TASKLIB(DODNS.LOAD,'SYS1.GDDMLOAD')\nFREE  FI(FT06F001)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADM#C9": {"ttr": 2563, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x85(\\x0f\\x00\\x862\\x8f\\x10G\\x00\\x07\\x00\\x07\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1985-10-07T00:00:00", "modifydate": "1986-11-24T10:47:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "$354JDM"}, "text": "PROC 0\n/*--------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR GDDM DEMO                      */\n/*--------------------------------------------------------*/\nALLOC FI(FT06F001) DA(*)\nDOPROG  NITEFLT  TASKLIB(DODNS.LOAD,'SYS1.GDDMLOAD')\nFREE  FI(FT06F001)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADM#P": {"ttr": 2565, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1d\\x00\\x00\\x00\\x85 \\x7f\\x00\\x86\\x08\\x7f\\x11V\\x00,\\x00)\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xd9\\xe6@@@'", "ispf": {"version": "01.29", "flags": 0, "createdate": "1985-07-26T00:00:00", "modifydate": "1986-03-28T11:56:00", "lines": 44, "newlines": 41, "modlines": 0, "user": "SS02JRW"}, "text": "%             G D D M   Presentation  Graphics  Feature   Rel 4.0\n%               (This is only available for IBM 3279 terminals)\n%\n%SELECT OPTION ===>_ZCMD                                                       +\n%                                                          +USERID   -  &ZUSER\n%   0 +ALLOCATE  - Allocate data sets %(Note 1)            +TIME     -  &ZTIME\n%   1 +IMD       - Invoke Interactive Map Definition       +TERMINAL -  &ZTERM\n%   2 +ICU       - Invoke the Interactive Chart Utility\n%   3 +ISE       - Invoke the Image Symbol Editor\n%   4 +VSE       - Invoke the Vector Symbol Editor\n%   5 +DEMO      - Invoke GDDM Demonstration %(Note 2)+\n%   6 +DEMO      - Demonstration - Space Shuttle %(Note 2)+\n%   7 +DEMO      - Demonstration - Sabrebat Fighter Plane (X-29A) %(Note 2)+\n%   8 +DEMO      - Demonstration - 2nd ISG LOGO %(Note 2)+\n%   9 +DEMO      - Demonstration - Night Flite %(Note 2)+\n%   C +Compress  - Compress your GDDM-PGF files.\n%\n%                           %----> N O T E S <----+\n%    1. +The ALLOCATE procedure (Option 0) for graphics files should only be\n%       +done once - before your%INITIAL+invocation of the IMD, ICU, ISE, or\n%       +VSE.  The files remain available for any subsequent TSO sessions.\n%    2. +Selection of this option%DOES NOT+require file allocation.\n%\n+PRESS%END KEY+TO TERMINATE GDDM/ISPF+\n)INIT\n  .HELP = ADM#PT0\n  &ZHTOP = ISR00003                    /* TUTORIAL TABLE OF CONTENTS */\n  &ZHINDEX = ISR91000                  /* TUTORIAL INDEX - 1ST PAGE  */\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n                 0,'CMD(%ADM#C0)'\n                 1,'CMD(%ADM#C1)'\n                 2,'CMD(%ADM#C2)'\n                 3,'CMD(%ADM#C3)'\n                 4,'CMD(%ADM#C4)'\n                 5,'CMD(%ADM#C5)'\n                 6,'CMD(%ADM#C6)'\n                 7,'CMD(%ADM#C7)'\n                 8,'CMD(%ADM#C8)'\n                 9,'CMD(%ADM#C9)'\n                 C,'CMD(%ADM#CC)'\n               ' ',' '\n                 *,'?' )\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ADM#PT0": {"ttr": 2567, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x85 \\x7f\\x00\\x85 \\x7f\\x14U\\x00!\\x00!\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1985-07-26T00:00:00", "modifydate": "1985-07-26T14:55:00", "lines": 33, "newlines": 33, "modlines": 0, "user": "SS02JDM"}, "text": "%TUTORIAL -------------------  GDDM/ISPF INTERFACE  ------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                              %\n+\n%                     -----------------------------------\n%                     |      GDDM/PDF Tutorial Index    |\n                      -----------------------------------\n+  The%GDDM/PDF+option allows you to select one of 4 functions as listed\n   below.  To select a function, enter a one-character digit as listed on the\n   GDDM/ISPF Selection Menu, which is displayed when option%G+is entered\n   on the Primary Option Menu.\n+\n   The following topics are presented in sequence, or may be selected by number:\n    %1+- ALLOCATE ...... Allocate GDDM format, data, etc. \"save\" files on the\n                         appropriate on-line TSO volumes\n    %2+- ICU      ...... Invoke the Interactive Chart Facility\n    %3+- ISE      ...... Invoke the Image Symbol Editor\n    %4+- VSE      ...... Invoke the Vector Symbol Editor\n\n     \"Graphical Data Display Manager - General Information\" - SC33-0111\n\n     \"Graphical Data Display Manager - Messages\"            - SC33-0150\n\n\n\n)PROC\n   &ZSEL = TRANS( &ZCMD\n                1,ADM#PT1\n                2,ADM#PT2\n                3,ADM#PT3\n                4,ADM#PT4\n                )\n   &ZUP  = ISR00003\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADM#PT1": {"ttr": 2569, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x85 \\x7f\\x00\\x85 \\x7f\\x14V\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1985-07-26T00:00:00", "modifydate": "1985-07-26T14:56:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "SS02JDM"}, "text": "%TUTORIAL ------------------  GDDM/ISPF INTERFACE  -------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                %\n+\n%                     -----------------------------------\n%                     |    Graphics File Allocations    |\n                      -----------------------------------\n+\n+  The%Graphics File Allocations+menu provides the first time GDDM user\n   with the facility for allocating the appropriate libraries required for\n   creation and saving of charts, image symbols, and vector symbol sets.\n\n\n\n\n\n     % \"Graphical Data Display Manager - Presentation Graphics Feature,\n              Interactive Chart Utility User's Guide\" - SC33-0111+\n\n\n\n\n\n\n\n)PROC\n   &ZUP = ADM#PT0\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADM#PT2": {"ttr": 2571, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x85 \\x7f\\x00\\x85 \\x7f\\x14W\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1985-07-26T00:00:00", "modifydate": "1985-07-26T14:57:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "SS02JDM"}, "text": "%TUTORIAL ------------------  GDDM/ISPF INTERFACE  -------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                %\n+\n%                     -----------------------------------\n%                     |    Interactive Chart Utility    |\n                      -----------------------------------\n+\n+  The%Interactive Chart Utility+(ICU) is a part of the%Presentation Graphics%\n%  Feature+(PGF), which is an optional feature of the Graphical Data Display\n   Manager (GDDM) program product.  The Interactive Chart Utility is a program\n   which allows a user to quickly and easily produce business charts in a\n   readily understood fashion.  The ICU can also be used to generate surface\n   charts, histograms, bar charts, pie charts, and Venn diagrams.  A detailed\n   discussion of the ICU can be found in the following IBM publication:\n\n     % \"Graphical Data Display Manager - Presentation Graphics Feature,\n              Interactive Chart Utility User's Guide\" - SC33-0111+\n\n   The above manual includes a number of tutorial sessions that show you how\n   to use the ICU.  You will find that the best way to learn about the ICU\n   is to use it.  In addition tutorial panels are incorporated within the ICU\n   and can be displayed by depressing the HELP (PF1/PF13) program function\n   key.\n\n)PROC\n   &ZUP = ADM#PT0\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADM#PT3": {"ttr": 2573, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x85 \\x7f\\x00\\x85 \\x7f\\x14W\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1985-07-26T00:00:00", "modifydate": "1985-07-26T14:57:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "SS02JDM"}, "text": "%TUTORIAL ------------------  GDDM/ISPF INTERFACE  -------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                %\n+\n%                     -----------------------------------\n%                     |       Image Symbol Editor       |\n                      -----------------------------------\n+\n+  The%Image Symbol Editor+(ISE) is a part of the%Presentation Graphics%\n%  Feature+(PGF), which is an optional feature of the Graphical Data Display\n   Manager (GDDM) program product.  The Image Symbol Editor is a program that\n   you can use at a display station to create new symbols, and change existing\n   ones.  Image symbols are used by GDDM as typefaces, special symbols (such\n   as company logos), shading patterns, or chart marker symbols.  A detailed\n   discussion of the ISE can be found in the following IBM publication:\n\n     % \"Graphical Data Display Manager - Presentation Graphics Feature,\n              Image Symbol Editor User's Guide\" - SC33-0153+\n\n   The above manual includes a number of tutorial sessions that show you how\n   to use the ISE.  You will find that the best way to learn about the ISE\n   is to use it.  In addition tutorial panels are incorporated within the ISE\n   and can be displayed by depressing the HELP (PF1/PF13) program function\n   key.\n\n)PROC\n   &ZUP = ADM#PT0\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADM#PT4": {"ttr": 2575, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x85 \\x7f\\x00\\x85 \\x7f\\x14W\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1985-07-26T00:00:00", "modifydate": "1985-07-26T14:57:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "SS02JDM"}, "text": "%TUTORIAL -------------------  GDDM/ISPF INTERFACE  ------------------- TUTORIAL\n%NEXT SELECTION ===>_ZCMD                                %\n+\n%                     -----------------------------------\n%                     |       Vector Symbol Editor      |\n                      -----------------------------------\n+\n+  The%Vector Symbol Editor+(VSE) is a part of the%Presentation Graphics%\n%  Feature+(PGF), which is an optional feature of the Graphical Data Display\n   Manager (GDDM) program product.  The Vector Symbol Editor is a program\n   which allows a user at a display station to create new vector symbols and\n   change existing ones.  Vector symbols are used as typefaces and special\n   symbols (e.g. arrows). A vector symbol is a character or shape made up of\n   lines and curves between specified points.\n\n     % \"Graphical Data Display Manager - Presentation Graphics Feature,\n              Vector Symbol Editor User's Guide\" - SC33-0145+\n\n   The above manual includes a number of tutorial sessions that show you how\n   to use the VSE.  You will find that the best way to learn about the VSE\n   is to use it.  In addition tutorial panels are incorporated within the VSE\n   and can be displayed by depressing the HELP (PF1/PF13) program function\n   key.\n\n)PROC\n   &ZUP = ADM#PT0\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADM#P1": {"ttr": 2577, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x85 \\x7f\\x00\\x86\\x07\\x1f\\x14\\x08\\x002\\x00(\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xd9\\xe6@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1985-07-26T00:00:00", "modifydate": "1986-03-12T14:08:00", "lines": 50, "newlines": 40, "modlines": 0, "user": "SS02JRW"}, "text": "%------------------------  GRAPHICS FILE ALLOCATIONS  --------------------------\n%\n%   TSO VOLUME     %===> _VOL    +   (DASD volume on which to place GDDM files)\n%\n%   ADMCFORM SPACE %===> _SPFORM +   (number of tracks for%\"FORMAT\"+data set)\n%\n%   ADMCDATA SPACE %===> _SPDATA +   (number of tracks for%\"DATA\"+data set)\n%\n%   ADMDECK  SPACE %===> _SPDECK +   (number of tracks for%\"DECK\"+data set)\n%\n%   ADMSYMBL SPACE %===> _SPSYMB +   (number of tracks for%\"SYMBOLS\"+data set)\n%\n%   ADMGDF   SPACE %===> _SPGDF  +   (number of tracks for%\"GRAPHICS\"+data set)\n%\n%   ADMGGMAP SPACE %===> _SPGMAP +   (number of tracks for%\"MAPS\"+data set)\n%\n%   ADMGNADS SPACE %===> _SPNADS +   (number of tracks for%\"APPLICATIONS\"+data)\n%\n%   ADMIFMT  SPACE %===> _SPIFMT +   (number of tracks for%\"EXPORT\"+data set)\n%\n%   DIRECTORY BLKS %===> _DIRBLKS+   (number of PDS directory blocks)\n%\n%WARNING: +EXECUTION OF THIS PROCEDURE WILL%DELETE+ANY EXISTING GRAPHICS\n%         +FILES.  PRESS%END+KEY IF YOU DO NOT WISH TO DELETE THESE FILES.\n)INIT\n  .HELP    = ADM#PT1        /* DEFAULT TSO VOLUME IF NONE SPECIFIED   */\n  &SPFORM  = 10             /* DEFAULT SPACE FOR THE FORMAT DATA SET  */\n  &SPDATA  = 10             /* DEFAULT SPACE FOR THE DATA DATA SET    */\n  &SPDECK  = 5              /* DEFAULT SPACE FOR THE DECK DATA SET    */\n  &SPSYMB  = 5              /* DEFAULT SPACE FOR THE SYMBOLS DATA SET */\n  &SPGDF   = 5              /* DEFAULT SPACE FOR THE GRAPHIC DATA SET */\n  &SPGMAP  = 5              /* DEFAULT SPACE FOR THE MAPS DATA SET */\n  &SPNADS  = 5              /* DEFAULT SPACE FOR THE APPLICATIONS DATA*/\n  &SPIFMT  = 5              /* DEFAULT SPACE FOR THE EXPORT DATA SET */\n  &DIRBLKS = 10             /* DEFAULT SPACE FOR PDS DIRECTORY BLOCKS */\n)PROC\n  VER (&SPFORM,NUM)\n  VER (&SPDATA,NUM)\n  VER (&SPDECK,NUM)\n  VER (&SPSYMB,NUM)\n  VER (&SPGDF,NUM)\n  VER (&SPGMAP,NUM)\n  VER (&SPNADS,NUM)\n  VER (&SPIFMT,NUM)\n  VER (&DIRBLKS,NUM)\n  VER (&VOL,LIST,TSO800,TSO801,TSO802,TSO803,TSO804,TSO805,TSO806, +\n        TSO807,tso808,tso809,TSO810,TSO811,TSO812,TSO813,tso814,   +\n        TSO008,TSO010,TSO011,TSO012,TSO013,TSO014,FM5001,          +\n        FM5002,000014,SS3380,SS3382)\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADM#P1A": {"ttr": 2579, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x86\\x08_\\x00\\x86\\x08_\\x14\\x19\\x00\"\\x002\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xd9\\xe6@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1986-03-26T00:00:00", "modifydate": "1986-03-26T14:19:00", "lines": 34, "newlines": 50, "modlines": 0, "user": "SS02JRW"}, "text": "%\n%+  The indicated file could not be located on the system.  If this is your\n%+ %FIRST+time in IMD, there is nothing to be concerned about - please provide\n%+  the indicated information.  If you have used IMD before, you may desire to\n%+  research what happened to your file before proceeding.\n%\n%   TSO VOLUME     %===> _VOL    +   (DASD volume on which to place GDDM files)\n%\n%   &BADFILE SPACE %===> _SPACE  +   (in tracks)\n%\n%   DIRECTORY BLKS %===> _DIRBLKS+   (number of PDS directory blocks)\n%\n%+  ADMGGMAP - User %\"MAPS\"+data set\n%+  ADMGNADS - User %\"APPLICATIONS\"+data\n%+  ADMIFMT  - User %\"EXPORT\"+data set\n%\n%\n%\n%\n%\n%\n%      PF3 - EXIT+\n)INIT\n  .HELP    = ADM#PT1        /* DEFAULT TSO VOLUME IF NONE SPECIFIED   */\n  &SPACE   = 5              /* DEFAULT SPACE FOR THE DATA SET         */\n  &DIRBLKS = 10             /* DEFAULT SPACE FOR PDS DIRECTORY BLOCKS */\n)PROC\n  VER (&SPACE,NUM)\n  VER (&DIRBLKS,NUM)\n  VER (&VOL,LIST,TSO800,TSO801,TSO802,TSO803,TSO804,TSO805,TSO806, +\n        TSO807,tso808,tso809,TSO810,TSO811,TSO812,TSO813,tso814,   +\n        TSO008,TSO010,TSO011,TSO012,TSO013,TSO014,FM5001,FM5002,   +\n        000014,SS3380,SS3382)\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMB#C": {"ttr": 2581, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00\\x00\\x00\\x97 /\\x00\\x99\\x19\\x9f\\x13\\x04\\x00P\\x00H\\x00P\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "1997-07-21T00:00:00", "modifydate": "1999-07-18T13:04:00", "lines": 80, "newlines": 72, "modlines": 80, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      INTERACTIVE INVOKING OF IBM UTILITY AMBLIST  JDM  */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST NOMSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN  CONTROL LIST CONLIST SYMLIST MSG\nISPEXEC CONTROL ERRORS RETURN\n/* ------------------------------------------------------ */\n/*      GO GET FILE NAME AND PROGRAM NAME.                */\n/*--------------------------------------------------------*/\nSET &FNAME  =  &STR()\nSET &MEMB   =  &STR()\nAMB:  +\n   SET &CUST   = &STR( )\n   ISPEXEC CONTROL DISPLAY SAVE\n   ISPEXEC ADDPOP COLUMN(1) ROW(1)\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(AMB#P)\n   SET &RC = &LASTCC\n   ISPEXEC REMPOP\n   IF &RC = 8 THEN GOTO CEND\n   IF &MAXCC  > 8   THEN +\n       DO\n       WRITE  ***  SEVERE ERROR IN PANEL \"P\", ADIOS TIME.\n       GOTO CEND\n       END\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      SORT THE FILE INTO JOBNAME SEQUENCE.              */\n   /*--------------------------------------------------------*/\n   DELETE $PRT$\n   FREE  FI(SYSPRINT,SYSIN)\n   SET &LASTCC = 0\n   IF &SYSDSN(&FNAME) NE OK THEN +\n       DO\n       WRITE\n       WRITE       DSN=&FNAME\n       WRITE\n       WRITE  ***  THE ABOVE FILE DOES NOT EXIST.  PLEASE\n       WRITE       CHECK THE DSN.\n       WRITE\n       WRITE  ***  SORRY,  TRY  AGAIN.\n       GOTO AMB\n       END\n   ALLOC FI(AMBLIB) DA(&FNAME) SHR  REUSE\n   ALLOC FI(SYSPRINT) DA($PRT$)   UNIT(SYSDA)                 +\n            TRACKS SPACE(1 1) NEW CATALOG\n   ISPEXEC FTOPEN TEMP\n   ISPEXEC FTINCL AMB#S1\n   ISPEXEC FTCLOSE\n   ISPEXEC VGET   ZTEMPF\n   ALLOC FI(SYSIN) DA('&ZTEMPF') SHR\n   /*--------------------------------------------------------*/\n   /*      INVOKE THE PROGRAM AMBLIST INTERTACTIVELY.        */\n   /*--------------------------------------------------------*/\n   AMBLINK\n   FREE FI(AMBLIB)\n   /*--------------------------------------------------------*/\n   /*      BROWSE THE FILE.                                  */\n   /*--------------------------------------------------------*/\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC BROWSE DATASET($PRT$)\n   IF &MAXCC  = 12  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR IN \"BROWSE\" FILE.  ADIOS TIME.\n       GOTO CEND\n       END\n   ISPEXEC CONTROL DISPLAY RESTORE\n   DEL $PRT$\n   GOTO AMB:\nCEND:    +\nSET ZWINTTL =\nDEL $PRT$\nALLOC FI(SYSIN) DA(*) REUSE\nALLOC FI(SYSPRINT) DA(*) REUSE\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMB#P": {"ttr": 2584, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x97 /\\x00\\x99\\x17/\\x07\\x05\\x00\\x13\\x00\\x17\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1997-07-21T00:00:00", "modifydate": "1999-06-21T07:05:00", "lines": 19, "newlines": 23, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(60,08) CMD(ZCMD)\n+\n+  COMMAND%===>_ZCMD                                       +\n+ ENTER\n+  LOADLIB%==>_FNAME                                       +\n+ ENTER  +\n+  PGM NAME%==>_MEMB    +\n+\n+\n)INIT\n  &ZWINTTL = 'Tool Box: AMBLIST LISTDIR Request'\n)PROC\n VER (&FNAME,NONBLANK)  VER (&FNAME,DSNAME)\n VER (&MEMB,NONBLANK)   VER (&MEMB,NAME)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMB#S1": {"ttr": 2586, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x966/\\x00\\x966/\\x134\\x00\\x01\\x00\\x01\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1996-12-27T00:00:00", "modifydate": "1996-12-27T13:34:00", "lines": 1, "newlines": 1, "modlines": 0, "user": "S218"}, "text": " LISTIDR  DDN=AMBLIB,MEMBER=&MEMB\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMH#C": {"ttr": 2588, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x00\\x00\\x91\\x19\\x1f\\x00\\x99\\x19\\x9f\\x13\\x04\\x00;\\x001\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "1991-07-10T00:00:00", "modifydate": "1999-07-18T13:04:00", "lines": 59, "newlines": 49, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      INVOKE 'ASMH'    TSO COMMAND                      */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST   MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nALLOC  FI(SYSTERM)  DA(*)\nISPEXEC VGET (ASMXDSN,ASMXLIB,ASMXRENT) SHARED\nIF &ASMXRENT = &STR() THEN +\n   DO\n   SET  &ASMXRENT = &STR(NORENT)\n   END\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC ADDPOP COLUMN(1) ROW(1)\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ASMH#P)\n   SET &RC = &LASTCC\n   ISPEXEC REMPOP\n   IF &RC = 8 THEN GOTO ALLDONE\n   IF  &MAXCC NE 0  THEN  GOTO ERRMSG\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*   WE WILL BUILD THE CMD AND SAVE THE VARIABLES, WHY ?  */\n   /*   SHALL BE BACK AND PROBABLY TO COMPILE THE SAME CODE! */\n   /*--------------------------------------------------------*/\n   IF &ASMXLIB  =  &Z   THEN  +\n      DO\n      SET &XALIB = &STR()\n      END\n   ELSE   +\n      DO\n      SET &XALIB = &STR(LIB(&ASMXLIB))\n      END\n   ASMH  &ASMXDSN     +\n         NOPRINT      +\n         NOXREF       +\n         NOESD        +\n         NORLD        +\n         BATCH        +\n         TERM         +\n         NOOBJ        +\n         NOMSG        +\n         &XALIB       +\n         &ASMXRENT\n   GOTO LOOP\nERRMSG:  +\n  WRITE  **  SEVERE  PANEL  ERROR ***\nALLDONE: +\nISPEXEC VPUT (ASMXDSN,ASMXLIB,ASMXRENT) SHARED\nFREE  FI(SYSTERM)\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMH#P": {"ttr": 2590, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x91\\x19\\x1f\\x00\\x99\\x17/\\x07\\x16\\x00\\x17\\x00\\x18\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1991-07-10T00:00:00", "modifydate": "1999-06-21T07:16:00", "lines": 23, "newlines": 24, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(64,09) CMD(ZCMD)\n+\n+  COMMAND%===>_ZCMD                                           +\n+\n+ ENTER\n+  DATASET NAME%==>_ASMXDSN                                    +\n+   USER MACLIB%==>_ASMXLIB                                    +\n+              %==>_ASMXRENT  +NORENT/RENT\n+\n+\n)INIT\n .CURSOR = ASMXDSN\n  &ZWINTTL = 'Tool Box - Cheap Assembler V2 Checker'\n)PROC\n VER (&ASMXDSN,NONBLANK)    VER(&ASMXDSN,DSNAME)\n IF (&USERLIB \u00ac= &Z)\n    VER(&ASMXLIB,NONBLANK)  VER(&ASMXLIB,DSNAME)\n VER (&ASMXRENT,NONBLANK)  VER(&ASMXRENT,LIST,RENT,NORENT)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAL#C": {"ttr": 2818, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99&\\x1f\\x00\\x99&\\x1f\\x10\\x17\\x00 \\x00 \\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-09-18T00:00:00", "modifydate": "1999-09-18T10:17:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR INVOKING A CALENDAR SCREEN.    */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST   MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &CNTI   = &STR( )\nSET &INDSN  = &STR( )\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   %CALEND#C\n   ISPEXEC CONTROL DISPLAY REFRESH\n   ISPEXEC ADDPOP COLUMN(1) ROW(1)\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(CAL#P)\n   SET &RC = &LASTCC\n   ISPEXEC REMPOP\n   IF &RC = 8 THEN GOTO ALLDONE\n   IF &RC = 0 THEN GOTO ALLDONE\n   IF  &MAXCC NE 0  THEN  GOTO ERRMSG\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\nERRMSG:  +\n  WRITE  **  SEVERE  PANEL  ERROR ***\nALLDONE: +\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAL#P": {"ttr": 2820, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99&\\x1f\\x00\\x99&\\x1f\\x10\\x18\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-09-18T00:00:00", "modifydate": "1999-09-18T10:18:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "S218"}, "text": ")ATTR DEFAULT(%+_)\n   % TYPE(TEXT)  INTENS(HIGH)\n   + TYPE(TEXT)  INTENS(LOW)\n   _ TYPE(INPUT) INTENS(HIGH) COLOR(WHITE)  CAPS(ON) JUST(LEFT)\n   \u00a2 TYPE(TEXT)  INTENS(HIGH) COLOR(TURQ)\n   @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n   # TYPE(TEXT)  INTENS(HIGH) COLOR(RED)\n   ! AREA(DYNAMIC)\n     ~ TYPE(DATAOUT) INTENS(LOW)\n    \u00dd TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n    ` TYPE(DATAOUT) INTENS(HIGH)\n    $ TYPE(DATAOUT) INTENS(HIGH) HILITE(REVERSE)\n)BODY WINDOW(25,11) CMD()\n%\n% !OUT$$MTH           !+\n+ !                   !+\n% !                   !+\n% !                   !+\n% !                   !+\n% !                   !+\n% !                   !+\n% !                   !+\n+\n+\n)INIT\n &ZWINTTL = CALENDAR\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CALC#C": {"ttr": 2822, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x84\\x18_\\x00\\x84\\x18_\\x11X\\x00\\r\\x00\\r\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1984-07-03T00:00:00", "modifydate": "1984-07-03T11:58:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "SS02JDM"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------------*/\n/*      PDF CLIST  FOR TSO COMMAND 'CALC'                       */\n/*--------------------------------------------------------------*/\nCONTROL NOLIST NOMSG NOFLUSH PROMPT\nIF &DEBUG NE &STR() THEN +\n  CONTROL LIST MSG NOFLUSH PROMPT CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nALLOC FI(SYSPRINT) DA(*)\nALLOC FI(SYSIN)    DA(*)\nKOMM CLEAR\nCALC\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CALEND#C": {"ttr": 2824, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99&\\x1f\\x00\\x99&\\x1f\\x10\\x16\\x00\\xc5\\x00\\xc5\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-09-18T00:00:00", "modifydate": "1999-09-18T10:16:00", "lines": 197, "newlines": 197, "modlines": 0, "user": "S218"}, "text": "/* Calendar: REXX EXEC to display a calendar in an ISPF Dynamic Area */\n\n/* trace results  */\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* Ref:  \"Enterprise Systems Journal\", November, 1992, article       */\n/*       \"Dynamic Areas in ISPF Panels\", by Rao N. Arimilli, p. 78.  */\n/*                                                                   */\n/* 07Jul93, William Smith, Charles Schwab & Co., Inc.                */\n/*                                                                   */\n/* With corrections by William J. Smith, Charles Schwab & Co., Inc.  */\n/* 101 Montgomery Street, 5th Floor, San Francisco, CA  94104-4122,  */\n/* (415) 627-7607.                                                   */\n/*                                                                   */\n/* - Original listing of working source code obtained from Howard M. */\n/*   Dean, American President Systems, Corporate Data Center,        */\n/*   Alameda, CA (510) 748-8031.                                     */\n/*                                                                   */\n/* The REXX EXEC builds a variable OUT$$MTH, which consists of a     */\n/* concatenation of variables WEEKHDR1, WEEKHDR2, WEEk.1, WEEK.2 ... */\n/* WEEK.6.  It stores the 168-byte character string and the date for */\n/* which the calendar was built in the user profile pool.  The main  */\n/* logic of the EXEC is to compute the day of the week for the first */\n/* day of the month and build a character string for the calendar.   */\n/*                                                                   */\n/* The REXX built-in function for day-of-week was deliberately not   */\n/* used in order that the EXEC may be easily modified to build the   */\n/* calendar for any date, not only the system date.  A reference     */\n/* date of January 1, 1989 is used for computing the day-of-week.    */\n/* The calendar string consists of two header lines and up to six    */\n/* week lines.                                                       */\n/*                                                                   */\n/* The EXEC first determines the number of elapsed days from January */\n/* 1, 1989 to the current date.  Adjustments are made for any leap   */\n/* years between the two dates.  The day-of-week for the current     */\n/* date is then computed because the reference day, January 1, 1989, */\n/* is a Sunday.  The numerical code for the day-of-week used is 1    */\n/* for Sunday, 2 for Monday, ... 7 for Saturday.  After all of the   */\n/* necessary computations, the DAYOFWK variable will have the        */\n/* numeric code for the day-of-week of the first day of the current  */\n/* month.                                                            */\n/*                                                                   */\n/* The EXEC builds one week frame at a time starting with the first  */\n/* of the month.  It builds a string of attribute characters and     */\n/* dates.  The attribute character used is of low intensity for all  */\n/* days in the except the current date, which would be in reverse    */\n/* video for highlighting purposes.  Depending on the number of days */\n/* in the month, there can be up to six week frames in the month.    */\n/*                                                                   */\n/* The \"flag\" variable in the EXEC is used to suppress the high-     */\n/* lighting of the current date.  If this variable is set to any     */\n/* value other than \"Y\", the EXEC will not highlight the current     */\n/* date.  This would be useful if this EXEC is modified to display   */\n/* any other month's calendar.                                       */\n/*                                                                   */\n/* All week frames along with month headers are concatenated into    */\n/* one single variable:  OUT$$MTH.  This variable, along with the    */\n/* current date called OUT$DTE, is stored in the user profile.  The  */\n/* OUT$DTE is stored in the YY/MM/DD format to be able to compare    */\n/* directly with the ISPF dialog variable &ZDATE.                    */\n/*                                                                   */\n/* The dynamic are is defined as one continuous variable of 168      */\n/* bytes.  Since the calendar variables are stored in the user       */\n/* profile, the values are automatically retrieved when the panel is */\n/* displayed.  The first 21 bytes of OUT$$MTH are placed in the      */\n/* first line of the dynamic are, the next 21 bytes are placed in    */\n/* the second line and so on until the last 21 bytes are placed in   */\n/* the eighth line.                                                  */\n/*                                                                   */\n/* There is no need to run the EXEC every time the main menu is      */\n/* displayed.  The panel may be displayed several times a day        */\n/* whereas the calendar needs to be built only once a day.  So, the  */\n/* CALENDAR variable is built only when the systm date is different  */\n/* from the date for which the calendar was previously built.        */\n/*                                                                   */\n/* An invisible option is added to the main menu, which is CALENDAR. */\n/* This option executes the REXX EXEC CALENDAR.  When the system     */\n/* date changes, the panel will simulate the CALENDAR option forcing */\n/* the execution of the EXEC.  This is done by setting the &ZCMD     */\n/* field to CALENDAR.  Then the .RESP field is set to ENTER.  This   */\n/* will have the effect of the user entering CALENDAR in the option  */\n/* field and hitting the ENTER key.  Any actual command entered in   */\n/* the command line should be reentered during this process.         */\n/*                                                                   */\n/* Warning:  Proper care should be taken while implementing this     */\n/* particular change to the )INIT section because of the potential   */\n/* for the panel to go into an infinite loop.  The user must make    */\n/* sure the TSO session save the profile variables as they are       */\n/* updated.  If, for some reason, the CALENDAR variable are not      */\n/* saved in the user profile, the ISPF main menu will hang, issuing  */\n/* the CALENDAR command repeatedly expecting the OUT$DTE to be the   */\n/* same as &ZDATE.                                                   */\n/*                                                                   */\n/* modified 09/02/99 - jdm - putting this into a main menu \"is\" very */\n/*   dangerous for many reasons. change to invoke as a panel option. */\n/* ----------------------------------------------------------------- */\n\ncurdate = date(standard)                /* Current date              */\ncurccyy = substr(curdate,1,4)           /* Current yyyy              */\ncurmm   = substr(curdate,5,2)           /* Current mm                */\ncurdd   = '01'                          /* Start with day 1          */\nflag    = 'Y'                           /* Highlight current day     */\n\nweekhdr1 = date(Month)                  /* Month name                */\nyear     = date(standard)               /* Standard Date             */\nyear     = substr(year,1,4)             /* Extract YYYY from STD     */\nweekhdr1 = weekhdr1 year                /* String month and year     */\nweekhdr1 = center(weekhdr1,20)          /* Center month and year     */\nweekhdr1 = '`' || weekhdr1              /* Add attribute char        */\nweekhdr2 = '\u00ddSu Mo Tu We Th Fr Sa'      /* Week names                */\n\n                           /* Total number of days before each month */\ndays     = '000031059090120151181212243273304334'\nbaseccyy = 1989                         /* Reference year            */\n\nnoofyrs  = curccyy - baseccyy           /* No. of years since 1989   */\ndays1    = noofyrs * 365                /* No. of days since 1989    */\nleapdays = noofyrs % 4                  /* Leap years in between     */\n\npos      = curmm * 3 - 2\na        = substr(days,pos,3)           /* Days in yr until last mon */\nddd      = a + curdd                    /* Days in yr until today    */\nleapflag = curccyy - (curccyy%4)*4      /* If this year is leap      */\n\nIf (leapflag = 0) & (curmm > 2) then    /*  add one more day if      */\n  ddd = ddd + 1                         /*  leap year and past Feb   */\nddd      = leapdays + days1 + ddd       /* Days from 1989/01/01      */\ndayofwk  = ddd // 7\nIf dayofwk = 0 then\n  dayofwk = 7                           /* Adjust Sat. day of week   */\ncurdd    =  substr(curdate,7,2)         /* Todays DD                 */\n\n/* Compute the number of days in the month */\nSelect\n  When ((curmm = 1) | (curmm = 3) | (curmm = 5) | (curmm = 7) |,\n        (curmm = 8) | (curmm = 10) | (curmm = 12)) then\n    lastdd = 31\n  When ((curmm = 4) | (curmm = 6) | (curmm = 9) | (curmm = 11))  then\n    lastdd = 30\nOtherwise\n  If (leapflag = 0) then\n    lastdd = 29\n  Else\n    lastdd = 28\nEnd\n\n                                        /*                           */\nweek.6 = ''                             /* Set last week to nulls    */\ndd     = 1                              /* Beginning of the month    */\nweek   = ''\nline   = 1                              /* Week # 1                  */\npos    = 1                              /* Day  # 1                  */\nattr   = '~'                            /* Attribute character       */\n\nDo while (line < 7)                     /* Do for all 6 possible wks */\n  Do while (pos < 8)                    /* Do for all 7 days in a wk */\n    If (line = 1) & (pos < dayofwk) then\n      Do\n        week = week || attr || '  '     /* Build character string    */\n        pos  = pos + 1\n      End\n    Else\n      Do\n        If ((curdd = dd) & (flag = 'Y')) then\n          Attr = '$'\n        Else\n          Attr = '~'\n        If (length(dd) = 1) then\n          dd = ' ' || dd\n        week = week || attr || dd\n        dd = dd + 1\n        If (dd > lastdd) then\n          pos = 99                      /* Quit columns loop         */\n        Else\n          pos = pos + 1\n      End\n  End\n                                        /* 30 bytes w/o an ATTR char */\n  week = week || '~                              '\n  week = substr(week,1,21)              /* Extract 21 bytes          */\n  week.line = week                      /* A week line is ready      */\n  line = line + 1\n  pos  = 1\n  week = ''\n  If (dd > lastdd) then                 /* Quit rows loop            */\n    line = 99\nEnd\n\nout$$mth = weekhdr1 || weekhdr2 || week.1 || week.2\nout$$mth = out$$mth || week.3   || week.4 || week.5 || week.6\nout$dte  = date(ordered)                /* Today in YY/MM/DD format  */\n\nAddress\n\"ISPEXEC VPUT (OUT$$MTH OUT$DTE) SHARED\"\n\nExit\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CMD#CB": {"ttr": 2828, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x841O\\x00\\x86\\x14\\x1f\\x16\\x03\\x00\\n\\x00\\x0c\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xc3\\xd1\\xc3@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1984-11-09T00:00:00", "modifydate": "1986-05-21T16:03:00", "lines": 10, "newlines": 12, "modlines": 0, "user": "SS02CJC"}, "text": "PROC 0\n/*------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR CMD SUBSYSTEM                */\n/*------------------------------------------------------*/\nCONTROL NOMSG PROMPT\n        ISPEXEC  FTOPEN   TEMP\n        ISPEXEC  FTINCL   CMD#SB\n        ISPEXEC  FTCLOSE\n        ISPEXEC  VGET     ZTEMPF\n        EX    '&ZTEMPF'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CMD#PB": {"ttr": 2830, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x841O\\x00\\x841O\\x07T\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1984-11-09T00:00:00", "modifydate": "1984-11-09T07:54:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+       %# CMD Subsystem Commands from TSO  +\n+\n+     ENTER CMD===>#_CMD1     +\n+\n+\n+     note: List follows for some of the commands available to you:\n+\n+  J   - Display Active      RU=3 - Show tape alloc\n+  JT  - Show TSO Users      #P   - Page rates.\n+  H   - Help                #S   - Critical sys ind.\n+  Hx  - Help for cmd x      #J   - Monitor Active\n+  F   - Frame Usage\n+  I   - ips & swap cts\n+\n+\n)INIT\n .CURSOR = CMD1\n)PROC\n VER (&CMD1,NONBLANK)\n &SEL = 'CMD(%CMD#CB)'\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CMD#SB": {"ttr": 2832, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x841O\\x00\\x86\\x16/\\x14\\x15\\x00\\x04\\x00\\x03\\x00\\x03\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1984-11-09T00:00:00", "modifydate": "1986-06-11T14:15:00", "lines": 4, "newlines": 3, "modlines": 3, "user": "SS02JDM"}, "text": "PROC 0\nCONTROL NOFLUSH\nCALL 'SS.SS02.MVS.#CMDSP13.TSOLIB(CMDTSO)' '&CMD1'\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CNTI#C": {"ttr": 2834, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x99!?\\x00\\x99!\\x9f\\x12U\\x00,\\x00$\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1999-08-01T00:00:00", "modifydate": "1999-08-07T12:55:00", "lines": 44, "newlines": 36, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR TSO COMMAND  'COUNTI', ISPF    */\n/*       VERSION OF COUNT COMMAND.                        */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST   MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &CNTI   = &STR( )\nSET &INDSN  = &STR( )\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   ISPEXEC ADDPOP COLUMN(1) ROW(1)\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(CNTI#P) CURSOR(INDSN)\n   SET &RC = &LASTCC\n   ISPEXEC REMPOP\n   IF &RC = 8 THEN GOTO ALLDONE\n   IF  &MAXCC NE 0  THEN  GOTO ERRMSG\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GET THE INFO FROM THE PANEL                       */\n   /*--------------------------------------------------------*/\n   COUNTI &INDSN\n   IF &LASTCC = 0 THEN +\n      DO\n      ISPEXEC VGET (CNTI)\n      END\n   ELSE  +\n      DO\n      SET  &CNTI = &STR(ERROR OCCURRED)\n      END\n   GOTO LOOP\nERRMSG:  +\n  WRITE  **  SEVERE  PANEL  ERROR ***\nALLDONE: +\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CNTI#P": {"ttr": 2836, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99!?\\x00\\x99!?\\x14 \\x00\\x13\\x00\\x13\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-08-01T00:00:00", "modifydate": "1999-08-01T14:20:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(66,09) CMD(ZCMD)\n+\n+  Command%===>_ZCMD                                             +\n+\n+  Enter Input\n+    File Name%===>_INDSN                                        +\n+\n+   > &CNTI\n+\n+\n)INIT\n &ZWINTTL = 'Tool Box: COUNT Number of Records in a File'\n)PROC\n VER (&INDSN,NONBLANK)     VER (&INDSN,DSNAME)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COBMVS#C": {"ttr": 2838, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01 \\x00\\x00\\x00\\x97\\x14?\\x00\\x99!\\x1f\\x12G\\x00\\xab\\x00\\x89\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.32", "flags": 0, "createdate": "1997-05-23T00:00:00", "modifydate": "1999-07-30T12:47:00", "lines": 171, "newlines": 137, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      INVOKE COBOL-FOR-MVS SYNTAX CHECKER               */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST   MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nISPEXEC VGET (PODSN,USERLIB,QUOTE,CBTERM) SHARED\nIF &QUOTE  = &STR() THEN +\n   DO\n   SET  &QUOTE  = &STR(QUOTE)\n   END\nIF &CBTERM = &STR() THEN +\n   DO\n   SET  &CBTERM = &STR(TERM)\n   END\n/*--------------------------------------------------------*/\n/*      MAKE MOST OF THE ALLOCATIONS HERE                 */\n/*--------------------------------------------------------*/\nCONTROL NOMSG\nFREE FI(COBMTERM,COBMIN,COBMLIB,COBMPUN,  +\n        COBMUT1,COBMUT2,COBMUT3,COBMUT4,COBMUT5,COBMUT6,COBMUT7)\nDELETE   $TERM$.$COBMVS$\nDELETE   $LIST$.$COBMVS$\nCONTROL MSG\nALLOC FI(COBMLIN) DUMMY REUSE\nALLOC FI(COBMPUN) DUMMY REUSE\nALLOC FI(COBMUT1) UNIT(VIO) SPACE(1 1) CYL NEW DELETE\nALLOC FI(COBMUT2) UNIT(VIO) SPACE(1 1) CYL NEW DELETE\nALLOC FI(COBMUT3) UNIT(VIO) SPACE(1 1) CYL NEW DELETE\nALLOC FI(COBMUT4) UNIT(VIO) SPACE(1 1) CYL NEW DELETE\nALLOC FI(COBMUT5) UNIT(VIO) SPACE(1 1) CYL NEW DELETE\nALLOC FI(COBMUT6) UNIT(VIO) SPACE(1 1) CYL NEW DELETE\nALLOC FI(COBMUT7) UNIT(VIO) SPACE(1 1) CYL NEW DELETE\nALLOC FI(ISPLUSR)  DA('IGY.V2R1M0.SIGYCOMP')  SHR REUSE\nISPEXEC  LIBDEF  ISPLLIB  LIBRARY ID(ISPLUSR)\n/*--------------------------------------------------------*/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY SAVE\n   ISPEXEC ADDPOP COLUMN(1) ROW(1)\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(COBMVS#P)\n   SET &RC = &LASTCC\n   ISPEXEC REMPOP\n   IF &RC = 8 THEN GOTO QUIT\n   IF  &MAXCC NE 0  THEN  GOTO ERRMSG\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*   CHECK TO SEE IF ALL THE FILES ARE REALLY THERE.      */\n   /*--------------------------------------------------------*/\n   IF  &SYSDSN(&PODSN)  \u00ac=  OK  THEN  +\n       DO\n       WRITE\n       WRITE   ERROR: INPUT FILE DOES NOT EXIST OR MIGHT NOT\n       WRITE          BE CATALOGED.\n       WRITE\n       GOTO LOOP\n       END\n   ELSE   +\n       DO\n       ALLOC FI(COBMIN) DA(&PODSN)  SHR REUSE\n       END\n   /* ---------------------------------------------------------- */\n   IF &USERLIB \u00ac= &Z  THEN  +\n      DO\n      ALLOC FI(COBMLIB) DA(&USERLIB) SHR REUSE\n      SET &BOOKS = &STR(,LIB)\n      END\n   ELSE  +\n      DO\n      SET &BOOKS = &STR()\n      END\n   /* ---------------------------------------------------------- */\n   IF  &CBTERM  = &STR(BROWSE)  THEN  +\n       DO\n       CONTROL  NOMSG\n       FREE FI(COBMTERM)\n       DELETE   $TERM$.$COBMVS$\n       CONTROL  MSG\n       ALLOC FI(COBMTERM) DA($TERM$.$COBMVS$) NEW CATALOG +\n             SPACE(1 1) TRACKS\n       ALLOC FI(COBMPRT) DUMMY REUSE\n       SET  &OPT1 = &STR(TERM)\n       END\n   IF  &CBTERM  = &STR(TERM)  THEN  +\n       DO\n       ALLOC FI(COBMTERM) DA(*)  REUSE\n       ALLOC FI(COBMPRT) DUMMY REUSE\n       SET  &OPT1 = &STR(TERM)\n       END\n   IF  &CBTERM  = &STR(LIST)  THEN  +\n       DO\n       CONTROL  NOMSG\n       DELETE   $LIST$.$COBMVS$\n       FREE FI(COBMPRT)\n       CONTROL  MSG\n       ALLOC FI(COBMPRT) DA($LIST$.$COBMVS$) NEW CATALOG +\n             SPACE(5 5) TRACKS\n       ALLOC FI(COBMTERM) DUMMY REUSE\n       SET  &OPT1 = &STR(NOTERM)\n       END\n   SET &OPTIONS = &STR(&QUOTE)&STR(&BOOKS)&STR(,)&STR(&OPT1)\n   /* ---------------------------------------------------------- */\n   WRITE\n   WRITE\n   COBMVS '&OPTIONS'\n   SET   &RC = &LASTCC\n   WRITE\n   WRITE  RETURN CODE = &RC\n   /* ---------------------------------------------------------- */\n   IF  &CBTERM  = &STR(BROWSE)  THEN  +\n       DO\n       SET &LASTCC = 0\n       SET &MAXCC  = 0\n       ISPEXEC BROWSE DATASET($TERM$.$COBMVS$)\n       IF &LASTCC = 12 THEN +\n          DO\n          WRITE   BROWSE ERROR\n          END\n       CONTROL  NOMSG\n       DELETE   $TERM$.$COBMVS$\n       CONTROL  MSG\n       ISPEXEC CONTROL DISPLAY RESTORE\n       END\n   IF  &CBTERM  = &STR(TERM)  THEN  +\n       DO\n       CONTROL  NOMSG\n       FREE FI(COBMTERM)\n       CONTROL  MSG\n       END\n   IF  &CBTERM  = &STR(LIST)  THEN  +\n       DO\n       SET &LASTCC = 0\n       SET &MAXCC  = 0\n       ISPEXEC BROWSE DATASET($LIST$.$COBMVS$)\n       IF &LASTCC = 12 THEN +\n          DO\n          WRITE   BROWSE ERROR\n          END\n       CONTROL  NOMSG\n       DELETE   $LIST$.$COBMVS$\n       CONTROL  MSG\n       ISPEXEC CONTROL DISPLAY RESTORE\n       END\n   IF &USERLIB \u00ac= &Z  THEN  +\n      DO\n      FREE  FI(COBMLIB)\n      END\n   GOTO LOOP\n/*--------------------------------------------------------*/\n/*   WE WILL BUILD THE CMD AND SAVE THE VARIABLES, WHY ?  */\n/*   SHALL BE BACK AND PROBABLY TO COMPILE THE SAME CODE! */\n/*--------------------------------------------------------*/\nERRMSG:  +\n  WRITE  **  SEVERE  PANEL  ERROR ***\nQUIT:    +\nISPEXEC VPUT (PODSN,USERLIB,CBTERM) SHARED\nISPEXEC  LIBDEF  ISPLLIB\nFREE FI(ISPLUSR)\nCONTROL  NOMSG\nFREE FI(COBMLIN,COBMPRT,COBMTERM,COBMIN,COBMLIB,COBMPUN,  +\n        COBMUT1,COBMUT2,COBMUT3,COBMUT4,COBMUT5,COBMUT6,COBMUT7)\nDELETE   $LIST$.$COBMVS$\nDELETE   $TERM$.$COBMVS$\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COBMVS#P": {"ttr": 3075, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x00\\x00\\x97\\x14?\\x00\\x99\\x17/\\x07\\x18\\x00\\x1c\\x00\\x1e\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "1997-05-23T00:00:00", "modifydate": "1999-06-21T07:18:00", "lines": 28, "newlines": 30, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(64,12) CMD(ZCMD)\n+\n+ COMMAND%===>_ZCMD                                            +\n+\n+ Enter\n+  Dataset Name%===>_PODSN\n+  USER Copylib%===>_USERLIB\n+              %===>_QUOTE+   QUOTE/APOST  Quote or Apostrophes.\n+              %===>_CBTERM+  TERM         Errors at Terminal.\n+                             BROWSE       Browse Error File.\n+                             LIST         Browse Full Listing.\n+\n+\n)INIT\n .CURSOR = PODSN\n &ZWINTTL = 'Tool Box: Cheap COBOL-FOR-MVS Syntax Checker'\n)PROC\n VER (&PODSN,NONBLANK)\n VER (&PODSN,DSNAME)\n IF (&USERLIB \u00ac= &Z)\n     VER(&USERLIB,NONBLANK) VER(&USERLIB,DSNAME)\n VER (&QUOTE,NONBLANK)   VER(&QUOTE,LIST,QUOTE,APOST)\n VER (&CBTERM,NONBLANK)  VER(&CBTERM,LIST,TERM,BROWSE,LIST)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COBOL#C": {"ttr": 3077, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x00\\x00\\x00\\x92\\x13\\x0f\\x00\\x99\\x19\\x9f\\x13\\x05\\x00W\\x00\\x1f\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "1992-05-09T00:00:00", "modifydate": "1999-07-18T13:05:00", "lines": 87, "newlines": 31, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/* ----------------------------------------------------------- */\n/*      THIS A CLIST TO SETUP ALL THE FILES DYNAMICALLY FOR    */\n/*      DOING A COBOL SYNATX CHECK.                            */\n/* ----------------------------------------------------------- */\nCONTROL NOLIST NOMSG  NOFLUSH  PROMPT\nIF  &DEBUG \u00ac= &STR() THEN  +\n    DO\n    CONTROL  MSG  LIST  CONLIST  SYMLIST\n    SET &SHOW  =  &STR(SHOW)\n    END\nELSE  +\n    SET &SHOW  =  &STR()\nISPEXEC  CONTROL ERRORS RETURN\nISPEXEC VGET (USERLIB,PODSN,APOST,SEQ,FLAGW,NOBATCH,    +\n              NONUM,NOLVL)   SHARED\nIF &APOST  = &STR() THEN +\n   DO\n   SET  &APOST =  &STR(APOST)\n   END\nIF &SEQ    = &STR() THEN +\n   DO\n   SET  &SEQ = &STR(NOSEQ)\n   END\nIF &FLAGW  = &STR() THEN +\n   DO\n   SET  &FLAGW = &STR(FLAGW)\n   END\nIF &NOBATCH  = &STR() THEN +\n   DO\n   SET  &NOBATCH = &STR(NOBATCH)\n   END\nIF &NONUM  = &STR() THEN +\n   DO\n   SET  &NONUM = &STR(NONUM)\n   END\nIF &NOLVL  = &STR() THEN +\n   DO\n   SET  &NOLVL = &STR(NOLVL)\n   END\nIF &LANG   = &STR() THEN +\n   DO\n   SET  &LANG  = &STR(LANGLVL(2))\n   END\nALLOC FI($$COB$$)  DA('SYS1.VSCOLIB')  SHR REUSE\nISPEXEC  LIBDEF  ISPLLIB  LIBRARY ID($$COB$$)\n/* ----------------------------------------------------------- */\n/*      THNGS ARE NOW \"RIGHT\", LET'S DO                        */\n/* ----------------------------------------------------------- */\n/*                                                             */\nLOOP: +\n      ISPEXEC CONTROL DISPLAY REFRESH\n      ISPEXEC ADDPOP COLUMN(1) ROW(1)\n      SET  &LASTCC = 0\n      SET  &MAXCC  = 0\n      ISPEXEC DISPLAY PANEL(COBOL#P) CURSOR(PODSN)\n      SET  &RC = &LASTCC\n      ISPEXEC REMPOP\n      IF &RC = 8 THEN GOTO ALLDONE\n   IF  &MAXCC NE 0  THEN  GOTO ERRMSG\n      SET  &LASTCC = 0\n      SET  &MAXCC  = 0\n      /* ----------------------------------------- */\n      /*      PROCESS THE TRANSACTION              */\n      /* ----------------------------------------- */\n      IF  &USERLIB = &STR( ) THEN +\n          DO\n          SET &ULIB = &STR( )\n          END\n      ELSE  +\n          DO\n          SET &ULIB = &STR(LIB(&USERLIB))\n          END\n      YCOBOL    &PODSN &APOST &SEQ  &ULIB  &NOBATCH +\n                &FLAGW &NONUM &LANG &NOLVL &SHOW\n      GOTO LOOP\n/* ----------------------------------------------------------- */\n/*      TIDY UP AND GO HOME.                                   */\n/* ----------------------------------------------------------- */\nERRMSG:  +\n  WRITE  **  SEVERE  PANEL  ERROR ***\nALLDONE:  +\nISPEXEC VPUT (USERLIB,PODSN,APOST,SEQ,FLAGW,NOBATCH,    +\n              NONUM,NOLVL) SHARED\nISPEXEC  LIBDEF  ISPLLIB\nFREE FI($$COB$$)\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COBOL#P": {"ttr": 3080, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x92\\x13\\x0f\\x00\\x99\\x17/\\x07\\x19\\x00%\\x00%\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1992-05-09T00:00:00", "modifydate": "1999-06-21T07:19:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(64,17) CMD(ZCMD)\n+\n+  Command%===>_ZCMD                                           +\n+\n+ Enter\n+  Data Set Name%===>_PODSN\n+   User Copylib%===>_USERLIB                                  +\n+               %===>_APOST     +APOST/QUOTE\n+               %===>_SEQ       +SEQ/NOSEQ\n+               %===>_FLAGW     +FLAGW/FLAGE\n+               %===>_NONUM     +NONUM/NUM\n+               %===>_NOBATCH   +NOBATCH/BATCH\n+               %===>_LANG      +LANG1/LANG2/LANGLVL(1)/\n+                               +  LANGLVL(2)\n+               %===>_NOLVL     +NOLVL/LVLA/LVLB/LVLC/\n+                              +  LVL('FIPSLVL')\n+\n+\n)INIT\n &ZWINTTL = 'Tool Box: Cheap OS/VS COBOL Syntax Checker'\n)PROC\n VER (&PODSN,NONBLANK)    VER(&PODSN,DSNAME)\n IF (&USERLIB  \u00ac=  &Z )\n    VER(&USERLIB,NONBLANK)  VER(&USERLIB,DSNAME)\n VER (&APOST,NONBLANK)    VER(&APOST,LIST,APOST,QUOTE)\n VER (&SEQ,NONBLANK)      VER(&SEQ,LIST,SEQ,NOSEQ)\n VER (&FLAGW,NONBLANK)    VER(&FLAGW,LIST,FLAGW,FLAGE)\n VER (&NONUM,NONBLANK)    VER(&NONUM,LIST,NONUM,NUM)\n VER (&NOBATCH,NONBLANK)  VER(&NOBATCH,LIST,NOBATCH,BATCH)\n VER (&LANG,NONBLANK) VER(&LANG,LIST,LANG1,LANG2,\n                          'LANGLVL(1)','LANGLVL(2)')\n VER (&NOLVL,NONBLANK)    VER(&NOLVL,LIST,NOLVL,LVLA,LVLB,LVLC,LVLD)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COB2#C": {"ttr": 3082, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00\\x00\\x00\\x92\\x13\\x0f\\x00\\x99\\x19\\x9f\\x13\\x05\\x00F\\x005\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "1992-05-09T00:00:00", "modifydate": "1999-07-18T13:05:00", "lines": 70, "newlines": 53, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/* ----------------------------------------------------------- */\n/*      THIS A CLIST TO SETUP ALL THE FILES DYNAMICALLY FOR    */\n/*      DOING A COBOL V2 SYNTAX CHECK.                         */\n/*   05/09/92 - JDM - RECODED TO ELIMINATE SKELETON FILE       */\n/* ----------------------------------------------------------- */\nCONTROL NOLIST NOMSG  NOFLUSH  PROMPT\nIF  &DEBUG \u00ac= &STR() THEN  +\n    CONTROL  MSG  LIST  CONLIST  SYMLIST\nISPEXEC  CONTROL ERRORS RETURN\nISPEXEC VGET (PODSN,USERLIB,APOST,SEQ,FLAGW,NONUM) SHARED\nIF &APOST  = &STR() THEN +\n   DO\n   SET  &APOST = &STR(APOST)\n   END\nIF &SEQ    = &STR() THEN +\n   DO\n   SET  &SEQ = &STR(NOSEQ)\n   END\nIF &FLAGW  = &STR() THEN +\n   DO\n   SET  &FLAGW = &STR(FLAGW)\n   END\nIF &NONUM  = &STR() THEN +\n   DO\n   SET  &NONUM = &STR(NONUM)\n   END\nALLOC FI($$COB$$)  DA('SYS1.COB2COMP') SHR REUSE\nISPEXEC  LIBDEF  ISPLLIB  LIBRARY ID($$COB$$)\n/* ----------------------------------------------------------- */\n/*      THNGS ARE NOW \"RIGHT\", LET'S DO                        */\n/* ----------------------------------------------------------- */\n/*                                                             */\nLOOP:  +\n      ISPEXEC CONTROL DISPLAY REFRESH\n      ISPEXEC ADDPOP COLUMN(1) ROW(1)\n      SET  &LASTCC = 0\n      SET  &MAXCC  = 0\n      ISPEXEC DISPLAY PANEL(COB2#P) CURSOR(PODSN)\n      SET  &RC = &LASTCC\n      ISPEXEC REMPOP\n      IF &RC = 8 THEN GOTO ALLDONE\n      IF &MAXCC NE 0  THEN  GOTO ERRMSG\n      SET  &LASTCC = 0\n      SET  &MAXCC  = 0\n      /* ----------------------------------------- */\n      /*      PROCESS THE TRANSACTION              */\n      /* ----------------------------------------- */\n      IF  &USERLIB = &STR( ) THEN +\n          DO\n          SET &ULIB = &STR( )\n          END\n      ELSE  +\n          DO\n          SET &ULIB = &STR(LIB(&USERLIB))\n          END\n      COB2CHK   &PODSN &APOST &SEQ  &ULIB +\n                &FLAGW &NONUM\n      GOTO LOOP\n/*                                                             */\n/* ----------------------------------------------------------- */\n/*      TIDY UP AND GO HOME.                                   */\n/* ----------------------------------------------------------- */\nERRMSG:  +\n  WRITE  **  SEVERE  PANEL  ERROR ***\nALLDONE: +\nISPEXEC VPUT (PODSN,USERLIB,APOST,SEQ,FLAGW,NONUM) SHARED\nISPEXEC  LIBDEF  ISPLLIB\nFREE FI($$COB$$)\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COB2#P": {"ttr": 3084, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x92\\x13\\x0f\\x00\\x99\\x17/\\x07 \\x00\\x1c\\x00\\x1f\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1992-05-09T00:00:00", "modifydate": "1999-06-21T07:20:00", "lines": 28, "newlines": 31, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(64,12) CMD(ZCMD)\n+\n+  Command%===>_ZCMD                                           +\n+\n+  Enter\n+   Dataset Name%===>_PODSN                                    +\n+   User Copylib%===>_USERLIB                                  +\n+               %===>_APOST+     APOST/QUOTE\n+               %===>_SEQ  +     SEQ/NOSEQ\n+               %===>_FLAGW+     FLAGW/FLAGE\n+               %===>_NONUM+    +NONUM/NUM\n+\n+\n)INIT\n &ZWINTTL = 'Tool Box: Cheap VS COBOL II Syntax Checker'\n)PROC\n VER (&PODSN,NONBLANK)    VER(&PODSN,DSNAME)\n IF (&USERLIB  \u00ac=  &Z )\n    VER(&USERLIB,NONBLANK)  VER(&USERLIB,DSNAME)\n VER (&APOST,NONBLANK)    VER(&APOST,LIST,APOST,QUOTE)\n VER (&SEQ,NONBLANK)      VER(&SEQ,LIST,SEQ,NOSEQ)\n VER (&FLAGW,NONBLANK)    VER(&FLAGW,LIST,FLAGW,FLAGE)\n VER (&NONUM,NONBLANK)    VER(&NONUM,LIST,NONUM,NUM)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COMPR#C": {"ttr": 3086, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x99\\x11\\x7f\\x00\\x99\\x19\\x9f\\x13\\x05\\x005\\x004\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1999-04-27T00:00:00", "modifydate": "1999-07-18T13:05:00", "lines": 53, "newlines": 52, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      INVOKE 'COMPARE' TSO COMMAND                      */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST   MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nISPEXEC VGET (CDSN1,CDSN2,ALC)  SHARED\nIF &ALC  = &STR() THEN +\n   DO\n   SET  &ALC   = &STR(NO)\n   END\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC CONTROL DISPLAY REFRESH\n   ISPEXEC ADDPOP COLUMN(1) ROW(1)\n   IF &RC = 8 THEN GOTO ALLDONE\n   ISPEXEC DISPLAY PANEL(COMPR#P)\n   SET &RC = &LASTCC\n   ISPEXEC REMPOP\n   IF &RC     = 8 THEN GOTO ALLDONE\n   IF &RC     \u00ac= 0 THEN +\n      DO\n      WRITE  NON-ZERO RC FOR TOOL-BOX(COMPR#C), SEE JIM MARSHALL\n      GOTO ALLDONE\n      END\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*   WE WILL BUILD THE CMD AND SAVE THE VARIABLES, WHY ?  */\n   /*   SHALL BE BACK AND PROBABLY TO COMPILE THE SAME CODE! */\n   /*--------------------------------------------------------*/\n   IF &ALC  =  &STR(YES)  THEN +\n      DO\n      SET &CASM  = &STR(ASM)\n      END\n   ELSE   +\n      DO\n      SET &CASM  = &STR(NOASM)\n      END\n   COMPARE &CDSN1      +\n           &CDSN2      +\n           &CASM\n   ISPEXEC VPUT (CDSN1,CDSN2,ALC) SHARED\n   GOTO LOOP\nALLDONE: +\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMPR#P": {"ttr": 3088, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x91\\x19\\x8f\\x00\\x99\\x17/\\x073\\x00\\x1b\\x00\\x1e\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1991-07-17T00:00:00", "modifydate": "1999-06-21T07:33:00", "lines": 27, "newlines": 30, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(60,14) CMD(ZCMD)\n+\n+ Command%===>_ZCMD                                        +\n+\n+  Enter\n+   Old-DSN%==>_CDSN1                                      +\n+  Enter\n+   New-DSN%==>_CDSN2                                      +\n+  Options:\n+   ALC    %==>_ALC+   NO  - Is not ALC code or ALC has\n+                            no sequence numbers/\n+                      YES - Is ALC Code with sequence\n+                            numbers in 73-80.\n+\n+\n)INIT\n .CURSOR = CDSN1\n &ZWINTTL = 'Tool Box: Match Two Sequential Files Using COMPARE'\n)PROC\n VER (&CDSN1,NONBLANK)     VER (&CDSN1,DSNAME)\n VER (&CDSN2,NONBLANK)     VER (&CDSN2,DSNAME)\n VER (&ALC,LIST,NO,YES)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COPYS#C": {"ttr": 3090, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x92\\x13/\\x00\\x99\\x19\\x9f\\x13\\x05\\x00$\\x00\\x1e\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1992-05-11T00:00:00", "modifydate": "1999-07-18T13:05:00", "lines": 36, "newlines": 30, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*     INVOKE 'COPYSDS' TSO COMMAND WITH OPTIONS          */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST   MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET  &MAX = &STR(9999999)\nSET  &SKP = &STR(0)\nSET  &DSP = &STR(OLD)\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   ISPEXEC ADDPOP COLUMN(1) ROW(1)\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(COPYS#P) CURSOR(INDSN)\n   SET &RC = &LASTCC\n   ISPEXEC REMPOP\n   IF &RC = 8 THEN GOTO ALLDONE\n   IF  &MAXCC NE 0  THEN  GOTO ERRMSG\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      WE HAVE INFORMATION FROM THE PANEL                */\n   /*--------------------------------------------------------*/\n   COPYSDS  &INDSN &OUTDSN MAX(&MAX) BYPASS(&SKP) COUNT &DSP\n   GOTO LOOP\nERRMSG:  +\n  WRITE  **  SEVERE  PANEL  ERROR ***\nALLDONE: +\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COPYS#P": {"ttr": 3092, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x92\\x13/\\x00\\x99\\x17/\\x07\"\\x00\\x1e\\x00#\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1992-05-11T00:00:00", "modifydate": "1999-06-21T07:22:00", "lines": 30, "newlines": 35, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(68,16) CMD(ZCMD)\n+\n+  Command%===>_ZCMD                                              +\n+\n+  Enter input\n+    Dataset Name%==>_INDSN                                       +\n+  Enter output\n+    Dataset Name%==>_OUTDSN                                      +\n+\n+  Output DSN Disp%===>_dsp+     OLD/SHR - Output File Disposition.\n+   Number of\n+  records to copy%===>_MAX    + # records to copy to output file. +\n+   Number of\n+  records to skip%===>_SKP    + # of records to bypass before\n+                                copy the above record number.\n+\n+\n)INIT\n &ZWINTTL = 'Tool Box: Copy Sequential File Using COPYSDS'\n)PROC\n VER (&INDSN,NONBLANK)     VER (&INDSN,DSNAME)\n VER (&OUTDSN,NONBLANK)    VER (&OUTDSN,DSNAME)\n VER (&MAX,RANGE,1,9999999)\n VER (&SKP,RANGE,0,9999999)\n VER (&DSP,LIST,OLD,SHR)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COUNT#C": {"ttr": 3094, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x92\\x13/\\x00\\x92\\x13?\\x081\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1992-05-11T00:00:00", "modifydate": "1992-05-12T08:31:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR TSO COMMAND  'COUNT'           */\n/*                                                        */\n/*      05/09/92 - JDM - ELIMINATED SKELETON              */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST   MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &INDSN  = &STR( )\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(COUNT#P) CURSOR(INDSN)\n   IF &LASTCC = 8 THEN GOTO ALLDONE\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GET THE INFO FROM THE PANEL                       */\n   /*--------------------------------------------------------*/\n   COUNT  &INDSN\n   GOTO LOOP\nALLDONE: +\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COUNT#P": {"ttr": 3096, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\x13/\\x00\\x92\\x13/\\x06!\\x00\\x11\\x00\\x11\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-05-11T00:00:00", "modifydate": "1992-05-11T06:21:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+   COMMAND%===>_ZCMD                                                  +\n+\n+\n+        %C O U N T + the number of records in a file\n+\n+\n+  Enter input\n+    Data Set Name%===>_INDSN\n)PROC\n VER (&INDSN,NONBLANK)     VER (&INDSN,DSNAME)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COUNTI": {"ttr": 3329, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99&\\x1f\\x00\\x99&\\x1f\\x103\\x04\\xcb\\x04\\xcb\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-09-18T00:00:00", "modifydate": "1999-09-18T10:33:00", "lines": 1227, "newlines": 1227, "modlines": 0, "user": "S218"}, "text": "//*--------------------------------------------------------*\n//* *  INSTALL THE 'COUNTI' TSO COMMAND                    *\n//*--------------------------------------------------------*\n//COUNTI   EXEC ASMHCL,COND=(0,NE),\n//         PARM.C='LIST,OBJECT,NODECK,TERM,RENT',\n//         PARM.L='LIST,MAP,RENT,REUS,REFR'\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.AMODGEN,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSTERM  DD SYSOUT=*\n//SYSIN    DD *\n         TITLE '   C O U N T I  '\n************************************************************\n*\n*        'COUNTI' TSO COMMAND, ISPF VERSION OF COUNT TSOCP\n*\n************************************************************\n         SPACE\n* ------------------------------------------------------------------ *\n*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.\n*        DATE WRITTEN. SEPTEMBER 27 1979.\n*        DATE UPDATED. AUGUST 1, 1999.\n*        ATTRIBUTES. RE-ENTRANT.\n*        COMMENTS.\n*            THIS TSO COMMAND COUNTS THE LOGICAL RECORDS IN A\n*            SPECIFIED DATA SET AND DISPLAYS THE TOTAL ON THE TERMINAL.\n*\n*            IF AN UNQUALIFIED DATA SET NAME IS ENTERED, THE\n*            CATALOG MUST BE READ TWICE, ONCE TO APPEND A\n*            TRAILING QUALIFIER IF NECESSARY, AND AGAIN DURING\n*            ALLOCATION. THE USER CAN ELIMINATE THE FIRST BY USING\n*            THE FULLY QUALIFIED NAME, PREFIX AND ALL, IN QUOTES,\n*            OR BY ENTERING ALL BUT THE PREFIX, WITHOUT QUOTES,\n*            PLUS THE KEYWORD 'Q'. THE LATTER IS MUCH SIMPLER\n*            AND GIVES THE SAME PERFORMANCE IMPROVEMENT AS A\n*            FULLY QUALIFIED NAME.\n*\n*            THE 'FILE' KEYWORD IS USEFUL FOR COUNTING TEMPORARY\n*            DATA SETS.  IT TELLS THE COMMAND TO TREAT THE FIRST\n*            OPERAND AS A FILENAME (DDNAME) INSTEAD OF A DSNAME.\n*            WHATEVER DATA SET IS CURRENTLY ALLOCATED TO THE\n*            FILENAME WILL BE COUNTED (AND QUICKLY, BECAUSE\n*            THE COMMAND DOESNT HAVE TO ALLOCATE ANYTHING).\n*\n*            VARIABLE SPANNED RECORDS ARE READ SEGMENT-BY-SEGMENT\n*            AND TWO COUNTS ARE DISPLAYED, ONE REPRESENTING THE\n*            NUMBER OF LOGICAL RECORDS AND ANOTHER THE NUMBER\n*            OF SEGMENTS.  IF THE 'SPANNED' KEYWORD IS SPECIFIED\n*            THEN THE DATA IS READ RECORD-BY-RECORD (BFTEK=A)\n*            AND ONLY THE COUNT OF LOGICAL RECORDS IS DISPLAYED.\n*\n*            NOTE - IF A NON-EXISTENT MEMBER OF A PDS IS SPECIFIED,\n*            THE RESULTING 013-18 ABEND IS TRAPPED BY A DCB ABEND\n*            EXIT, BUT A MESSAGE IS ISSUED BY OPEN ANYWAY. THIS\n*            METHOD IS USED BECAUSE THE ADDITIONAL OVERHEAD\n*            OF ALLOCATING THE PDS AND DOING A 'BLDL' WOULD\n*            DEGRADE THE PERFORMANCE UNACCEPTABLY.\n* ------------------------------------------------------------------ *\n         SPACE\n* ------------------------------------------------------------------ *\n*              INTERCEPT 'LINK' MACROS IMBEDDED IN PUTLINE & STACK\n*              TO MAKE SF=(E,LINKAREA) THE DEFAULT.\n*\n* CHNGE LOG: 02JUN92 - INCLUDED 'OBTAIN' MACRO IN THE SOURCE. WITH\n*        02JUN92 - INCLUDED 'OBTAIN' MACRO IN THE SOURCE. WITH\n*                  MVS/XA 2.2.3, THE MACRO IS ONLY AVAILABLE IN\n*                  'SYS1.AMACLIB' (SOUNDS LIKE IBM IS TRYING TO\n*                  TELL US SOMETHING).  JIM MARSHALL         JDM1\n*        25JUN92 - ADDED DSECT'S  TO CODE                    JDM2\n*        01AUG99 - ALIGNED AND SCRUBBED CODE FOR READABILITY.\n*        03AUG99 - CONVERTED TO PLACE ANSWER IN ISPF VARIABLE\n*                  SO IT CAN DISPLAY ON A PANEL.             ISP\n* ------------------------------------------------------------------ *\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE\n         MACRO                                                   JDM1\n&NAME    OBTAIN &LIST,&DUMMY=                                    JDM1\n         AIF   (T'&LIST EQ 'O').E1                               JDM1\n&NAME    IHBINNRA &LIST                 LOAD REG 1               JDM1\n         SVC   27                       ISSUE OBTAIN SVC         JDM1\n         MEXIT                                                   JDM1\n.E1      IHBERMAC 34                    LIST ADDR MISSING        JDM1\n         MEND                                                    JDM1\n         MACRO\n&NAME    LINK  &EP=,&SF=(E,LINKAREA)\n&NAME    LA    15,&SF(2)\n         LA    0,*+8\n         B     *+12\n         DC    CL8'&EP'\n         ST    0,0(0,15)\n         SVC   6             ISSUE LINK SVC\n         MEND\n         SPACE\n         GBLB  &MVS\n&MVS     SETB  1                   1 - MVS   0 - SVS,MVT\n         SPACE\nCOUNTI   CSECT\n         USING *,R12,R11\n         B     @PROLOG-*(,R15)\n         DC    AL1(11),CL11'COUNTI'\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n@PROLOG  STM   14,12,12(13)\n         LR    R12,R15             BASE\n         LA    R15,1\n         LA    R11,4095(R15,R12)   BASE\n         LR    R2,R1\n         USING CPPL,R2\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         LR    R9,R1\n         USING @DATA,R9\n         ST    R13,4(,R1)          CHAIN SAVEAREA\n         ST    R1,8(,R13)          CHAIN SAVEAREA\n         LR    R13,R1              NEW SAVEAREA\n         SPACE 1\n         MVI   STATUS,0\n         XC    LINKAREA(8),LINKAREA\n         SLR   R15,R15\n         STH   R15,RC              SET RC = 0\n         ST    R15,KOUNT\n         ST    R15,KOUNTSP\n         SPACE\n* -------------------------------------------------------- *\n*        SET UP IOPL FOR PUTLINE\n* -------------------------------------------------------- *\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15                 IOPL\n         SPACE\n         AIF   (NOT &MVS).SKIP1\n         L     R15,CVTPTR          LOAD CVT POINTER              JDM2\n         USING CVT,R15             ADDRESSABILITY TO CVT         JDM2\n         TM    CVTPUTL,X'80'       IS PUTLINE LOADED? (VS2)      JDM2\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,CVTPUTL         YES - USE CVTPUTL\n         DROP  R15                 DROP ADDRESSABILITY           JDM2\n         B     PUTLOADX            BRANCH AROUND LOAD\n.SKIP1   ANOP\nPUTLOAD  EQU   *\n         LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX EQU   *\n         ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         SPACE\n* -------------------------------------------------------- *\n*        SET UP PPL FOR PARSE\n* -------------------------------------------------------- *\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n*        L     R0,=A(COUNTPCL)\n         LA    R0,PCLADDR\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         XC    MYANS(4),MYANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         ST    R9,PPLUWA\n         DROP  R15                 PPL\n         SPACE 1\n* -------------------------------------------------------- *\n*        CALL THE PARSE SERVICE ROUTINE\n* -------------------------------------------------------- *\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         AIF   (NOT &MVS).SKIP2\n         L     R15,CVTPTR          LOAD CVT POINTER              JDM2\n         USING CVT,R15             ADDRESSABILITY TO CVT         JDM2\n         TM    CVTPARS,X'80'       IS IKJPARS LOADED ?           JDM2\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,CVTPARS         CVTPARS                       JDM2\n         DROP  R15                 DROP ADDRESSABILITY           JDM2\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\n         SPACE 1\nPARSELNK EQU   *\n.SKIP2   ANOP\n         LINK  EP=IKJPARS,SF=(E,LINKAREA)\nPARSEEXT EQU   *\n         SPACE 1\n         LTR   R15,R15\n         BZ    PARSEOK\n         LA    R1,MSG01\n         LA    R0,L'MSG01\n         BAL   R14,PUTMSG\n         LA    R15,12\n         B     EXIT\n         SPACE 1\nPARSEOK  EQU   *\n         L     R3,MYANS\n         USING IKJPARMD,R3\n         SPACE\n* -------------------------------------------------------- *\n*        QUALIFY THE DSNAME IF NECESSARY\n* -------------------------------------------------------- *\n         SPACE\n         LA    R6,DSN\n         TM    6(R6),X'80'         IS DATASET NAME SPECIFIED?\n         BO    OKDSN               YES - BRANCH\n         LA    R1,MSG05            NO - JUST MEMBER NAME\n         LA    R0,L'MSG05\n         BAL   R14,PUTMSG\n         LA    R15,12\n         B     NEXTDSN\n         SPACE\nOKDSN    EQU   *\n         LA    R15,DSNAME+2\n         MVI   0(R15),C' '         BLANK THE DSNAME AREA\n         MVC   1(43,R15),0(R15)\n         SLR   R1,R1\n         STH   R1,DSNAME           ZERO DSNAME LENGTH\n         TM    6(R6),X'40'         IS DSN QUOTED?\n         BO    NOPREF              YES, SKIP PREFIXING\n         CLI   FILEKW+1,1          DSN TO BE TREATED AS DDNAME\n         BE    NOPREF              YES, SKIP PREFIXING\n         AIF   (NOT &MVS).SKIPP    PREFIX WITH PREFIX\n         L     R14,CPPLUPT         POINT TO UPT\n         USING UPT,R14\n         IC    R1,UPTPREFL         GET LENGTH OF PREFIX\n         LTR   R1,R1               IS IT ZERO\n         BZ    NOPREF              YES, SKIP PREFIXING\n         B     *+10\n         MVC   0(0,R15),UPTPREFX\n         DROP  R14                 UPT\n.SKIPP   AIF   (&MVS).SKIPU        PREFIX WITH USERID\n         L     R14,CPPLPSCB        POINT TO PSCB\n         USING PSCB,R14\n         IC    R1,PSCBUSRL         GET LENGTH OF USERID\n         LTR   R1,R1               IS IT ZERO\n         BZ    NOPREF              YES, SKIP PREFIXING\n         B     *+10\n         MVC   0(0,R15),PSCBUSER\n         DROP  R14                 PSCB\n.SKIPU   ANOP\n         EX    R1,*-6              MOVE USERID TO DSNAME AREA\n         LA    R15,0(R1,R15)       POINT PAST USERID\n         MVI   0(R15),C'.'         APPEND PERIOD\n         LA    R15,1(,R15)         POINT PAST PERIOD\n         LA    R1,1(,R1)           ADD 1 TO LENGTH\n         STH   R1,DSNAME           STORE LENGTH OF USERID PLUS 1\nNOPREF   EQU   *\n         LH    R1,4(,R6)           GET LENGTH\n         LR    R0,R1\n         AH    R0,DSNAME           ADD LENGTH OF PREFIX OR ZERO\n         STH   R0,DSNAME           SET COMBINED LENGTH\n         L     R14,0(,R6)          POINT TO DSN VALUE\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED MVC\n         MVC   0(0,R15),0(R14)     (EXECUTED)\n         EX    R1,*-6              MOVE DSN TO DSNAME (AFTER PREFIX)\n         SPACE\n* -------------------------------------------------------- *\n*        IF 'FILE' KEYWORD IS SPECIFIED,\n*        GET DSNAME FROM JFCB USING FILE NAME.\n* -------------------------------------------------------- *\n         SPACE\n         CLI   FILEKW+1,1          'FILE' SPECIFIED?\n         BNE   NOFILE              NO, BRANCH\n         CLI   DSNAME+1,8          IS LENGTH 8 OR LESS\n         BH    FILERR1             NO, BRANCH\n         DEVTYPE DSNAME+2,DEVDATA  GET DEVICE TYPE\n         LTR   R15,R15             WAS FILENAME VALID\n         BNZ   FILERR2             NO, BRANCH\n         TM    DEVDATA+2,X'20'     DIRECT ACCESS\n         BZ    FILERR3             NO, BRANCH\n         LA    R4,DYNDCBW\n         MVC   0(DYNDCBL,R4),DYNDCB\n         LA    R0,JFCB\n         LA    R1,DYNEXLST\n         ST    R0,0(,R1)\n         MVI   0(R1),X'87'\n         ST    R1,36(,R4)          DCBEXLST\n         MVC   40(8,R4),DSNAME+2   DCBDDNAM\n         MVC   DDSAVE,DSNAME+2\n         MVI   OPEND,X'80'\n         RDJFCB ((R4)),MF=(E,OPEND)\n         MVC   DSNAME+2(44),JFCB\n         LA    R1,DSNAME+45        LAST CHAR OF DSNAME\n         LA    R0,44               INITIAL LENGTH\nFILEA    EQU   *\n         CLI   0(R1),C' '          IS THIS LAST NONBLANK\n         BNE   FILEB               YES, BRANCH\n         BCTR  R1,0                BACK UP 1 CHARACTER\n         BCT   R0,FILEA            DECREMENT LENGTH AND BRANCH\nFILEB    EQU   *\n         STH   R0,DSNAME           STORE LENGTH OF DSNAME\n*        MVC   VOLUME(6),JFCB+118  GET VOLUME FROM JFCB\n         B     FILESPEC\n         SPACE\nFILERR1  EQU   *\n         LA    R0,MSG14A\n         B     FILERR\n         SPACE\nFILERR2  EQU   *\n         LA    R0,MSG14B\n         B     FILERR\n         SPACE\nFILERR3  EQU   *\n         LA    R0,MSG14C\nFILERR   EQU   *\n         MVC   MSGWK(L'MSG14),MSG14\n         LA    R15,MSGWK+L'MSG14\n         LA    R14,DSNAME\n         LH    R1,0(,R14)\n         BCTR  R1,0\n         B     *+10\n         MVC   MSGWK+L'MSG14(0),2(R14)\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         LR    R14,R0 POINT TO MSG14A, B, OR C\n         MVC   0(L'MSG14A,R15),0(R14)\n         LA    R0,L'MSG14+L'MSG14A+1(,R1)\n         LA    R1,MSGWK\n         BAL   R14,PUTMSG\n         B     NEXTD12\n         SPACE\nNOFILE   EQU   *\n         TM    6(R6),X'40'         IS IT QUOTED?\n         BO    DEFX                YES - SKIP DEFAULT SERVICE\n         CLI   QUICKW+1,1          QUICK SPECIFIED\n         BE    DEFX                YES, USER ENTERED ALL BUT PREFIX\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         LA    R14,MYDFPB\n         ST    R14,IOPLIOPB\n         USING DFPB,R14\n         XC    0(20,R14),0(R14)\n         LA    R0,DSNAME\n         ST    R0,DFPBDSN\n         OI    DFPBCODE,X'04'      SEARCH CAT AND PROMPT IF MULTI\n         MVC   DFPBPSCB,CPPLPSCB\n*        MVI   DFPBCNTL,X'20'      PREFIX THE DSNAME\n         DROP  R14                 DFPB\n         SPACE\n         LA    R1,MYIOPL\n         SPACE\n         LR    R1,R15              POINT TO IOPL\n         AIF   (NOT &MVS).SKIP4\n         L     R15,CVTPTR          LOAD CVT POINTER              JDM2\n         USING CVT,R15             ADDRESSABILITY TO CVT         JDM2\n         TM    CVTEHDEF,X'80'      IS IKJEHDEF LOADED ?          JDM2\n         BNO   EHDEFLNK               THEN DO LINK, NOT CALL\n         L     R15,CVTEHDEF        CVTEHDEF\n         DROP  R15                 DROP ADDRESSABILITY           JDM2\n         BALR  R14,R15             CALL IKJEHDEF\n         B     EHDEFEXT            SKIP AROUND LINK\n         SPACE\nEHDEFLNK EQU   *\n.SKIP4   ANOP\n         LINK  EP=IKJEHDEF,SF=(E,LINKAREA)\n         SPACE\nEHDEFEXT EQU   *\n         B     DEFCODE(R15)\nDEFCODE  B     DEF00               SUCCESS\n         B     NEXTDSN              MSG ALREADY ISSUED\n         B     DEF08               INVALID NAME GT 44\n         B     NEXTDSN              MSG ALREADY ISUED\n         B     DEF16               NOT IN CATALOG\n         B     DEF20               NOT IN CATALOG\n         B     DEF24               IMPOSSIBLE\n         B     DEF28               COMMAND SYSTEM ERROR\n         B     DEF32               IMPOSSIBLE\n         B     DEF36               ?\nDEF08    EQU   *\nDEF16    EQU   *\n         B     DEF24\nDEF20    EQU   *\nLOCERR   EQU   *\n         MVC   MSGWK(L'MSG02),MSG02\n         LA    R15,MSGWK+L'MSG02\n         LA    R14,DSNAME\n         LH    R1,0(,R14)\n         BCTR  R1,0\n         B     *+10\n         MVC   MSGWK+L'MSG02(0),2(R14)\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         MVC   0(L'MSG02A,R15),MSG02A\n         LA    R0,L'MSG02+L'MSG02A+1(,R1)\n         LA    R1,MSGWK\n         BAL   R14,PUTMSG\n         B     NEXTDSN\nDEF24    EQU   *\nDEF28    EQU   *\nDEF32    EQU   *\nDEF36    EQU   *\n         LA    R1,MSG03\n         LA    R0,L'MSG03\n         BAL   R14,PUTMSG\n         B     NEXTDSN\n         SPACE\nDEF00    EQU   *\nDEFX     EQU   *\n         SPACE\n* -------------------------------------------------------- *\n*        ALLOCATE THE DATASET\n* -------------------------------------------------------- *\n         SPACE\n         LA    R1,MYDAPL\n         USING DAPL,R1\n         MVC   DAPLUPT(4),CPPLUPT\n         MVC   DAPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,DAPLECB\n         MVC   DAPLPSCB(4),CPPLPSCB\n         LA    R15,MYDAPB\n         ST    R15,DAPLDAPB\n         DROP  R1                  DAPL\n         USING DAPB08,R15\n         XC    0(84,R15),0(R15)\n         MVI   DA08CD+1,X'08'\n         LA    R0,DSNAME\n         ST    R0,DA08PDSN\n         MVC   DA08DDN(8),=CL8' '\n         MVC   DA08UNIT,=CL8' '\n         MVC   DA08SER,=CL8' '\n         MVC   DA08MNM,=CL8' '\n         MVC   DA08PSWD,=CL8' '\n         MVI   DA08DSP1,DA08SHR\n         MVI   DA08DPS2,DA08KEEP\n         MVI   DA08DPS3,DA08KEP\n         TM    14(R6),X'80'        MEMBER SPECIFIED?\n         BZ    MEMBX               NO - BRANCH\n         LH    R1,12(,R6)          GET LENGTH OF MEMBER\n         BCTR  R1,0                MINUS 1 FOR EX\n         L     R14,8(,R6)          GET ADDRESS OF MEMBER NAME\n         B     *+10\n         MVC   DA08MNM(0),0(R14)   MOVE MEMBER NAME\n         EX    R1,*-6\nMEMBX    EQU   *\n         TM    22(R6),X'80'        PASSWORD SPECIFIED?\n         BZ    PASSX               NO - BRANCH\n         LH    R1,20(,R6)          GET LENGTH OF PSWD\n         BCTR  R1,0                MINUS 1 FOR EX\n         L     R14,16(,R6)         GET ADDRESS OF PSWD\n         B     *+10\n         MVC   DA08PSWD(0),0(R14)  MOVE PSWD\n         EX    R1,*-6\nPASSX    EQU   *\n         LA    R1,MYDAPL\n         SPACE\n         BAL   R14,CALLDAIR\n         LTR   R15,R15\n         BZ    OKDAIR\n         BAL   R14,DAIRFAIL\n         LA    R15,12\n         B     NEXTDSN\n         SPACE\nOKDAIR   EQU   *\n         OI    STATUS,X'40'        TELL CLEANUP TO FREE IT\n         LA    R15,MYDAPB\n         MVC   DDSAVE,DA08DDN\n         TM    DA08DSO,X'40'       IS DSORG SEQUENTIAL?\n         BO    OKDSORG             YES - BRANCH\n         TM    DA08DSO,X'02'       IS DSORG PARTITIONED?\n         BO    OKDSORGP            YES, BRANCH\n         SPACE\n* -------------------------------------------------------- *\n*        DSORG IS NEITHER PS NOR PO\n*        ISAM=X'80' DA=X'20' VSAM=X'00' NONE=X'00'\n* -------------------------------------------------------- *\n         SPACE\nERRDSORG EQU   *\n         LA    R1,MSG06\n         LA    R0,L'MSG06\n         BAL   R14,PUTMSG\n         LA    R15,12\n         B     NEXTDSN\n         SPACE\nOKDSORGP EQU   *\n         CLC   DA08MNM,=CL8' '     WAS MEMBER SPECIFIED?\n         BNE   OKDSORG             YES - BRANCH\n         LA    R1,MSG07\n         LA    R0,L'MSG07\n         BAL   R14,PUTMSG\n         LA    R15,12\n         B     NEXTDSN\n         SPACE\nOKDSORG  EQU   *\n         DROP  R15                 DAPB08\n         SPACE\n* -------------------------------------------------------- *\n*        CHECK FORMAT-1 DSCB FOR EMPTY DATA SET\n* -------------------------------------------------------- *\n         SPACE\n         L     R1,CVTPTR           GET ADDRESS OF CVT            JDM2\n         USING CVT,R1              ADDRESSABILITY TO CVT         JDM2\n         L     R1,CVTTCBP          GET ADDRESS OF DOUBLEWORD     JDM2\n         DROP  R1                                                JDM2\n         L     R1,4(,R1)           R1 = ADDR OF CURRENT TCB      JDM2\n         USING TCB,R1              ADDRESSABILITY TO TCB         JDM2\n         L     R1,TCBTIO           GET ADDRESS OF TIOT           JDM2\n         DROP  R1                                                JDM2\n         USING TIOT1,R1            ADDRESSABILITY TO TIOT        JDM2\n         LA    R1,TIOELNGH         TOIENTRY                      JDM2\nDDLOOP   EQU   *\n         CLI   0(R1),0             END OF TIOT\n         BE    NEXTDSN             YES, BRANCH (NEVER HAPPENS)\n         CLC   4(8,R1),DDSAVE      DOES DDNAME MATCH\n         BE    DDFOUND\n         SLR   R15,R15\n         IC    R15,0(,R1)\n         LA    R1,0(R15,R1)\n         B     DDLOOP\n         SPACE\nDDFOUND  EQU   *\n         L     R15,16(,R1)         TIOEFSRT-1\n         TM    18(R15),X'20'       DIRECT ACCESS DEVICE?\n         DROP  R1                  GIVEUP ADDRESSABILITY         JDM2\n         BZ    OBTX                NO, BYPASS OBTAIN\n         MVC   VOLSER,28(R15)      UCBVOLI\nOBTDSCB  EQU   *\n         LA    R1,OBTAINW\n         MVC   0(OBTAINL,R1),OBTAIN\n         LA    R0,DSNAME+2         DSN FOR OBTAIN\n         ST    R0,4(,R1)\n         LA    R0,VOLSER           VOLUME FOR OBTAIN\n         ST    R0,8(,R1)\n         LA    R0,MYDSCB           ANSWER AREA FOR OBTAIN\n         ST    R0,12(,R1)\n         OBTAIN (1)\n         LTR   R15,R15             WAS OBTAIN SUCCESSFUL\n         BZ    OKDSCB              YES, BRANCH\n         SPACE\n* -------------------------------------------------------- *\n*        OBTAIN HAS FAILED. HOW CAN THAT HAPPEN WHEN\n*        DYNAMIC ALLOCATION WAS SUCCESSFUL? ONE WAY IT\n*        CAN HAPPEN IS IF THE DSNAME IS AN ALIAS ENTRY\n*        IN A VSAM CATALOG.  IF IT IS, A 'LOCATE' WILL\n*        PUT THE TRUE NAME IN THE DSNAME FIELD, SO NOW\n*        WE ISSUE A LOCATE, AND TRY THE OBTAIN AGAIN.\n* -------------------------------------------------------- *\n         SPACE\n         TM    STATUS,X'08'        HAS LOCATE BEEN TRIED ALREADY?\n         BZ    ALIAS               NO, GO TRY IT\nERROBT   EQU   *\n         LA    R1,MSG09            UNABLE TO OBTAIN DSCB\n         LA    R0,L'MSG09\n         BAL   R14,PUTMSG\n         LA    R15,12\n         B     NEXTDSN\n         SPACE\nALIAS    EQU   *\n         OI    STATUS,X'08'        TRIP THE SWITCH\n         LA    R1,LOCATEW\n         MVC   0(LOCATEL,R1),LOCATE\n         LA    R0,DSNAME+2         DSNAME FOR LOCATE\n         ST    R0,4(,R1)\n         LA    R0,LOCBUF           ANSWER AREA FOR LOCATE\n         ST    R0,12(,R1)\n         LOCATE (1)\n         LTR   15,15               WAS LOCATE SUCCESSFUL?\n         BZ    OBTDSCB             YES, GO OBTAIN AGAIN\n         B     ERROBT              NO, ISSUE MESSAGE\n         SPACE\nOKDSCB   EQU   *\n         NI    STATUS,255-X'08'    TURN OFF LOCATE SWITCH\n         TM    MYDSCB-44+X'52',X'42' DSORG = PS OR PO\n         BZ    ERRDSORG\n         TM    MYDSCB-44+X'54',X'C0' RECFM = U\n         BO    ERRRECFM\n         CLC   MYDSCB-44+X'62'(3),=X'000000' CHECK DS1LSTAR\n         BE    DYNEOD              BRANCH IF EMPTY DATA SET\nOBTX     EQU   *\nFILESPEC EQU   *\n         SPACE\n* -------------------------------------------------------- *\n*        SET UP THE DCB\n* -------------------------------------------------------- *\n         SPACE\n         MVC   DYNDCBW(DYNDCBL),DYNDCB\n         LA    R4,DYNDCBW\n         USING IHADCB,R4\n         MVC   DCBDDNAM(8),DDSAVE\n         SPACE\n         SLR   R5,R5               R5 ZERO MEANS NOT-SPANNED\n         CLI   SPANKW+1,1          'SPANNED' SPECIFIED\n         BNE   *+6                 NO, LEAVE R5 ZERO\n         BCTR  R5,0                YES, SPANNED, SET BFTEK=A SWITCH\n         SPACE\n         LA    R15,DYNEOD\n         IC    R0,DCBEODAD-1\n         ST    R15,DCBEODAD-1\n         STC   R0,DCBEODAD-1\n         SPACE\n         LA    R15,DYNSYNAD\n         IC    R0,DCBSYNAD-1\n         ST    R15,DCBSYNAD-1\n         STC   R0,DCBSYNAD-1\n         SPACE\n         LA    R15,DYNEXLST\n         IC    R0,DCBEXLSA-1\n         ST    R15,DCBEXLSA-1\n         STC   R0,DCBEXLSA-1\n         LA    R1,DYNDCBEX\n         ST    R1,0(,R15)\n         MVI   0(R15),X'05'\n         LA    R1,DYNABEND\n         ST    R1,4(,R15)\n         MVI   4(R15),128+X'11'    OPEN ABEND EXIT (MVS)\n         SPACE\n         OI    STATUS,X'80'        TELL CLEANUP TO CLOSE DCB\n         MVI   OPEND,X'80'\n         SPACE\n         OPEN  ((R4),INPUT),MF=(E,OPEND)\n         SPACE\n         TM    DCBOFLGS,X'10'\n         BO    OKOPEN\n         LA    R1,MSG08\n         LA    R0,L'MSG08\n         TM    STATUS,X'10'        MEMBER NOT FOUND?\n         BO    DYNOPENM            YES, BRANCH\n         LA    R1,MSG04\n         LA    R0,L'MSG04\nDYNOPENM EQU   *\n         BAL   R14,PUTMSG\n         LA    R15,12\n         B     NEXTDSN\n         SPACE\nDYNDCBEX EQU   *\n         LTR   R5,R5               'SPANNED' SPECIFIED\n         BZR   R14                 NO, READ SEGMENT BY SEGMENT\n         TM    DCBRECFM,X'C0'      RECFM U\n         BOR   R14                 YES - BRANCH\n         TM    DCBRECFM,X'48'      VARIABLE SPANNED\n         BNOR  R14                 NO - BRANCH\n         OI    DCBBFTEK,X'60'      BFTEK=A\n         BR    R14\n         SPACE\nDYNABEND EQU   *\n         L     R8,0(,R1)           GET COMPLETION CODE\n         N     R8,=A(X'FFF0FF00')\n         CL    R8,=A(X'01301800')  IS IT AN 013-18 ABEND\n         BE    *+10                YES, BRANCH\n         MVI   4(R1),0             ABNORMALLY TERMINATE\n         BR    R14\n         OI    STATUS,X'10'        INDICATE MEMBER NOT FOUND\n         MVI   3(R1),4             IGNORE THE ABEND\n         BR    R14\n         SPACE\nOKOPEN   EQU   *\n         SLR   R5,R5\n         TM    DCBRECFM,X'C0'      RECFM U\n         BO    NOSEGS\n         TM    DCBRECFM,X'48'      RECFM VS\n         BNO   NOSEGS\n         CLI   SPANKW+1,1          USING BFTEK=A\n         BE    NOSEGS\n         BCTR  R5,0                COUNT SEGMENTS AND FIRST-SEGMENTS\nNOSEGS   EQU   *\n         SPACE\nREADLOOP EQU   *\n         MVI   SYNADSW,0           SET SYNAD SWITCH OFF\n         SPACE\n         GET   (R4)\n         SPACE\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BE    OKGET               NO - BRANCH\n         LA    R1,SYNADMSG\n         LA    R0,78\n         BAL   R14,PUTMSG\n         LA    R15,12\n         B     NEXTDSN\n         SPACE\nOKGET    EQU   *\n         LA    R14,1\n         A     R14,KOUNT\n         ST    R14,KOUNT\n         LTR   R5,R5               ARE WE READING SEGMENTS\n         BZ    READLOOP            NO, BRANCH\n         CLI   2(R1),1             0 OR 1 (COMPLETE OR FIRST SEGMENT)\n         BH    READLOOP            NO, DONT COUNT IT AS A RECORD\n         LA    R14,1\n         A     R14,KOUNTSP\n         ST    R14,KOUNTSP         COUNT COMPLETE OR FIRST SEGMENT\n         B     READLOOP\n         SPACE\nDYNEOD   EQU   *\n         LTR   R5,R5               WERE WE READING SEGMENTS\n         BZ    NOSWAP              NO, LEAVE COUNTERS UNCHANGED\n         L     R14,KOUNT           YES, SWAP SEGMENT COUNT\n         L     R15,KOUNTSP              WITH RECORD COUNT\n         ST    R14,KOUNTSP\n         ST    R15,KOUNT\nNOSWAP   EQU   *\n         LA    R1,MSGWK\n         MVC   0(10,R1),=X'40206B2020206B202120'\n         MVC   10(8,R1),=C' RECORDS'\n         CLC   KOUNT,=F'1'\n         BNE   *+8\n         MVI   17(R1),C' '      CHANGE 'RECORDS' TO 'RECORD '\n         L     R15,KOUNT\n         CVD   R15,DOUBLE\n         ED    0(10,R1),DOUBLE+4\n         SPACE\nSHIFLEFT EQU   *\n         CLI   0(R1),C' '       LEADING BLANK?\n         BNE   SHIFTED          NO - READY TO ISSUE\n         MVC   0(17,R1),1(R1)   SHIFT LEFT 1\n         MVI   17(R1),C' '      BLANK LAST BYTE\n         B     SHIFLEFT\n         SPACE\nSHIFTED  EQU   *\n         LTR   R5,R5            WERE WE READING SEGMENTS\n         BZ    SHOWTOTL         NO, BRANCH\n         MVC   18(10,R1),=X'40206B2020206B202120'\n         MVC   28(9,R1),=C' SEGMENTS'\n         L     R15,KOUNTSP\n         CVD   R15,DOUBLE\n         ED    18(10,R1),DOUBLE+4\n         LA    R0,18+19\n         B     *+8\nSHOWTOTL EQU   *\n         LA    R0,18\n         BAL   R14,PUTLINE\n         LA    R15,0\n         B     NEXTDSN\n         SPACE\nNEXTD12  EQU   *\n         LA    R15,12\n         SPACE\nNEXTDSN  EQU   *\n         CH    R15,RC\n         BNH   *+8\n         STH   R15,RC              SET HIGHEST RC\n         TM    STATUS,X'80'\n         BZ    NOCLOSE\n         TM    DCBOFLGS,X'10'      IS IT OPEN?\n         BZ    NOCLOSE             NO, BRANCH\n         MVI   CLOSED,X'80'\n         CLOSE ((R4)),MF=(E,CLOSED)\n         NI    STATUS,255-X'80'    CLOSED\n         DROP  R4                  IHADCB\nNOCLOSE  EQU   *\n         TM    STATUS,X'40'        FREE REQUIRED?\n         BZ    NOFREE\n         LA    R1,MYDAPL\n         LA    R15,MYDAPB\n         USING DAPB18,R15\n         XC    0(40,R15),0(R15)\n         MVI   DA18CD+1,X'18'\n         MVC   DA18DDN,DDSAVE\n         MVC   DA18MNM(8),=CL8' '\n         MVC   DA18SCLS(2),=CL8' '\n         BAL   R14,CALLDAIR        UNALLOCATE\n         NI    STATUS,255-X'40'    UNALLOCATED\n         DROP  R15                 DAPB18\nNOFREE   EQU   *\n         SPACE\n         IKJRLSA MYANS\n         SPACE\n         CLI   RC+1,0              IS RC ZERO?\n         BZ    STACKDX             YES, BRANCH\n         MVC   MYSTPB(STACKDL),STACKD\n         SPACE\n         STACK DELETE=ALL,PARM=MYSTPB,MF=(E,MYIOPL)\n         SPACE\n         TCLEARQ\nSTACKDX  EQU   *\n         SPACE\n         LH    R15,RC\n         B     EXIT\n         SPACE\n* -------------------------------------------------------- *\n*         CALL IKJDAIR SERVICE ROUTINE\n* -------------------------------------------------------- *\n          SPACE\nCALLDAIR EQU   *\n         ST    R14,DAIRREGS\n         AIF   (NOT &MVS).SKIP6\n         L     R15,CVTPTR          LOAD CVT POINTER              JDM2\n         USING CVT,R15             ADDRESSABILITY TO CVT         JDM2\n*        TM    732(R15),X'80'     CVTDAIR\n         TM    CVTDAIR,X'80'       IS IKJDAIR LOADED ?           JDM2\n         BNO   DAIRLINK\n         L     R15,CVTDAIR         GET ADDRESS                   JDM2\n         DROP  R15                 DROP ADDRESSABILITY           JDM2\n         BALR  R14,R15\n         B     DAIRFINI\n         SPACE\nDAIRLINK EQU   *\n.SKIP6   ANOP\n         LINK  EP=IKJDAIR,SF=(E,LINKAREA)\n         SPACE\nDAIRFINI EQU   *\n         L     R14,DAIRREGS\n         BR    R14\n         SPACE\n* -------------------------------------------------------- *\n*        DYNAMIC ALLOCATION FAILURE ROUTINE\n* -------------------------------------------------------- *\n         SPACE\nDAIRFAIL EQU   *\n         ST    R14,MYDFREGS\n         AIF   (NOT &MVS).SKIP7\n         LA    R1,MYDFPARM\n         USING DFDSECTD,R1\n         ST    R15,MYDFRC\n         LA    R15,MYDFRC\n         ST    R15,DFRCP\n         LA    R15,MYDAPL\n         ST    R15,DFDAPLP\n         SLR   R15,R15\n         ST    R15,MYJEFF02\n         LA    R15,MYJEFF02\n         ST    R15,DFJEFF02\n         LA    R15,DFDAIR\n         STH   R15,MYDFID\n         LA    R15,MYDFID\n         ST    R15,DFIDP\n         SLR   R15,R15\n         ST    R15,DFCPPLP\n         LINK  EP=IKJEFF18,SF=(E,LINKAREA)\n         L     R15,MYDFRC\n         DROP  R1                  DFDSECTD\n.SKIP7   ANOP\n         AIF   (&MVS).SKIP8\n         LA    R1,MSGDAIR\n         LA    R0,L'MSGDAIR\n         BAL   R14,PUTMSG\n.SKIP8   ANOP\n         L     R14,MYDFREGS\n         BR    R14\n         SPACE\n* -------------------------------------------------------- *\n*        PUTMSG ROUTINE\n* -------------------------------------------------------- *\n         SPACE\nPUTMSG   EQU   *\n         STM   R14,R1,PUTLINS\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,MYIOPL)\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         SPACE\n* -------------------------------------------------------- *\n*        PUTLINE ROUTINE\n* -------------------------------------------------------- *\n         SPACE\nPUTLINE  EQU   *\n*                  VERSUS BEING RETURNED VIA TSO PUTLINE.\n*----------------------------------------------------------*     ISP\n*        ISPF VARIABLE CODE                                      ISP\n*----------------------------------------------------------*     ISP\n         SPACE 1                                                 ISP\nISPFLINE EQU   *                                                 ISP\n         STM   R14,R1,PUTLINS                                    ISP\n         MVC   IRESULT(18),=CL18' ' BLANK AREA                   ISP\n         MVC   IRESULT(18),0(R1)    MOVE IN ANSWER               ISP\n*        TPUT  IRESULT,18           FOR DEBUG PURPOSES ONLY      ISP\n         SPACE 1                                                 ISP\n*----------------------------------------------------------------ISP*\n*        ISSUE VDEFINE FOR ALL 3 VARIABLES.                      ISP\n*----------------------------------------------------------------ISP*\nISPF1    EQU   *                                                 ISP\n         LA    R7,VDEF             GET ADDR OF VDEF              ISP\n         ST    R7,CALL1            STASH THE ADDRESS             ISP\n         LA    R7,CNTI             GET ADDR OF VARIABLE          ISP\n         ST    R7,CALL1+4          STASH THE ADDRESS             ISP\n         LA    R7,IRESULT          GET ADDR OF ANSWER            ISP\n         ST    R7,CALL1+8          STASH THE ADDRESS             ISP\n         LA    R7,CHAR             GET ADDR OF CHAR              ISP\n         ST    R7,CALL1+12         STASH THE ADDRESS             ISP\n         LA    R7,18               GET LENGTH                    ISP\n         ST    R7,ISPFLEN          SAVE THE LENGTH               ISP\n         LA    R7,ISPFLEN          GET ADDR OF LENGTH FIELD      ISP\n         ST    R7,CALL1+16         STASH THE ADDRESS             ISP\n         OI    CALL1+16,X'80'      FLIP ON HIGH ORDER BIT        ISP\n         SPACE 1                                                 ISP\n         LA    R1,CALL1            GET PARAM LIST ADDR           ISP\n         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP\n         LTR   R15,R15                                           ISP\n         BZ    ISPF2                                             ISP\n         LR    R3,R15              SAVE RETURN CODE              ISP\n         B     ABEND1              TRAP                          ISP\n         SPACE 1                                                 ISP\n*----------------------------------------------------------------ISP-*\n*        WRITE THE VALUE INTO THE SHARED VARIABLE POOL           ISP\n*----------------------------------------------------------------ISP-*\n         SPACE 1                                                 ISP\nISPF2    EQU   *                                                 ISP\n         LA    R7,VPUT             GET ADDR OF VPUT              ISP\n         ST    R7,CALL2            STASH THE ADDRESS             ISP\n         LA    R7,CNTI             GET ADDR OF VARIABLE NAME     ISP\n         ST    R7,CALL2+4          STASH THE ADDRESS             ISP\n         LA    R7,SHR              GET ADDR OF SHR               ISP\n         ST    R7,CALL2+8          STASH THE ADDRESS             ISP\n         OI    CALL2+8,X'80'       FLIP ON HIGH ORDER BIT        ISP\n         LA    R1,CALL2            GET PARAM LIST ADDR           ISP\n         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP\n         LTR   R15,R15                                           ISP\n         BZ    ISPF3                                             ISP\n         LR    R3,R15              SAVE RETURN CODE              ISP\n         B     ABEND2              TRAP                          ISP\n         SPACE 1                                                 ISP\n*----------------------------------------------------------------ISP-*\n*        DELETE THE VARIABLE FROM THIS POOL                      ISP\n*----------------------------------------------------------------ISP-*\n         SPACE 1                                                 ISP\nISPF3    EQU   *                                                 ISP\n         LA    R7,VDEL             GET ADDR OF VDEL              ISP\n         ST    R7,CALL3            STASH THE ADDRESS             ISP\n         LA    R7,CNTI             GET ADDR OF RESULT            ISP\n         ST    R7,CALL3+4          STASH THE ADDRESS             ISP\n         OI    CALL3+4,X'80'       FLIP ON HIGH ORDER BIT        ISP\n         SPACE 1                                                 ISP\n         LA    R1,CALL3            GET PARAM LIST ADDR           ISP\n         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP\n         LTR   R15,R15                                           ISP\n         BZ    ISPFEND                                           ISP\n         LR    R3,R15              SAVE RETURN CODE              ISP\n         B     ABEND3              TRAP                          ISP\n         SPACE 1                                                 ISP\nISPFEND  EQU   *                                                 ISP\n         LM    R14,R1,PUTLINS                                    ISP\n         BR    R14                                               ISP\n         SPACE 1                                                 ISP\n* ---------------------------------------------------------------ISP *\n*        STRANDED PUTLINE CODE FOR FUTURE REFERENCE.             ISP\n* ---------------------------------------------------------------ISP *\n         SPACE\n         STM   R14,R1,PUTLINS\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         SPACE 1\nERRRECFM EQU   *\n         LA    R1,MSGRECFM\n         LA    R0,L'MSGRECFM\n         BAL   R14,PUTMSG\n         B     NEXTD12\n         SPACE\nEXIT     EQU   *\n         LR    R1,R13\n         L     R0,@SIZE\n         L     R13,4(,R13)\n         ST    R15,16(,R13)\n         FREEMAIN R,A=(1),LV=(0)\n         LM    R14,R12,12(R13)\n         BR    R14\n         SPACE\n* -------------------------------------------------------- *\n*        SYNAD EXIT:\n*        THIS ROUTINE IS ENTERED DURING THE 'GET' MACRO\n*        IF AN I/O ERROR OCCURS.\n* -------------------------------------------------------- *\n         SPACE\nDYNSYNAD EQU   *\n         SYNADAF ACSMETH=QSAM\n         MVC   SYNADMSG(78),50(R1)\n         MVI   SYNADSW,X'FF'\n         SYNADRLS\n         BR    R14\n         SPACE\nABEND1   ABEND 1,DUMP                                            ISP\nABEND2   ABEND 2,DUMP                                            ISP\nABEND3   ABEND 3,DUMP                                            ISP\n*----------------------------------------------------------------ISP-*\n*        DEFINE THE CONSTANTS, ISPF NEEDS THEM 8 BYTES LONG      ISP\n*----------------------------------------------------------------ISP-*\nVDEF     DC    CL8'VDEFINE'                                      ISP\nVPUT     DC    CL8'VPUT'                                         ISP\nVDEL     DC    CL8'VDELETE'                                      ISP\nSHR      DC    CL8'SHARED'                                       ISP\nCNTI     DC    CL8'(CNTI)  '       ENSURE ONE BLANK AT END !!!   ISP\nCHAR     DC    CL8'CHAR'           ACCT IS CHARACTER DEFINED     ISP\n         SPACE 1                                                 ISP\n* -------------------------------------------------------- *\n*        CONSTANTS\n* -------------------------------------------------------- *\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\n         PRINT NOGEN\n         SPACE\nDYNDCB   DCB   DDNAME=DYNAM,DSORG=PS,MACRF=(GL),                       +\n               EODAD=0,SYNAD=0,EROPT=ACC\nDYNDCBL  EQU   *-DYNDCB\n         SPACE\n         PRINT GEN\n         SPACE\nOBTAIN   CAMLST SEARCH,2,3,4\nOBTAINL  EQU   *-OBTAIN\n         SPACE\nLOCATE   CAMLST NAME,2,,4\nLOCATEL  EQU   *-LOCATE\n         SPACE\nSTACKD   STACK DELETE=ALL,MF=L\nSTACKDL  EQU   *-STACKD\n         SPACE\nMSG01    DC    C'ERROR IN PARSE SERVICE ROUTINE'\nMSG02    DC    C'IKJ58503I DATA SET '\nMSG02A   DC    C' NOT IN CATALOG'\nMSG03    DC    C'ERROR IN DEFAULT SERVICE ROUTINE'\nMSG04    DC    C'UNABLE TO OPEN DATASET'\nMSG05    DC    C'IKJ58509I DATA SET NAME REQUIRED WHEN MEMBER IS SPECIF+\n               IED'\nMSG06    DC    C'ORGANIZATION OF DATA SET MUST BE PARTITIONED OR SEQUEN+\n               TIAL'\nMSG07    DC    C'DATA SET IS PARTITIONED, MEMBER NOT SPECIFIED'\nMSG08    DC    C'SPECIFIED MEMBER NOT FOUND IN DATASET'\nMSG09    DC    C'UNABLE TO OBTAIN DSCB FOR DATA SET'\nMSG14    DC    C'FILENAME '\nMSG14A   DC    C' INVALID, MORE THAN 8 CHARACTERS  '\nMSG14B   DC    C' IS NOT CURRENTLY ALLOCATED       '\nMSG14C   DC    C' NOT ALLOCATED TO A DASD DATA SET '\nMSGRECFM DC    C'RECORD FORMAT U NOT SUPPORTED'\nMSGDAIR  DC    C'UNABLE TO ALLOCATE'\n         LTORG\nPCLADDR  DC    0D'0'               END OF CSECT\n         SPACE\n* -------------------------------------------------------- *\n*        PARSE PARAMETERS\n* -------------------------------------------------------- *\n         SPACE\n         PRINT NOGEN\nCOUNTPCL IKJPARM\nDSN      IKJPOSIT DSNAME,PROMPT='DATA SET NAME'\nFILEKW   IKJKEYWD\n         IKJNAME 'FILE'\nQUICKW   IKJKEYWD\n         IKJNAME 'QUICK'\nSPANKW   IKJKEYWD\n         IKJNAME 'SPANNED'\n         IKJENDP\n         PRINT GEN\n         SPACE\n* -------------------------------------------------------- *\n*        DSECTS\n* -------------------------------------------------------- *\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nLINKAREA DS    2F\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                  USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                 USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                 USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                 USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL256           USED BY PUTLINE ROUTINE\nPUTLINS  DS    4F                 USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                  ADDRESS OF IKJPUTL\nMYSTPB   DS    0F                 5 WORDS USED BY STACK DELETE\nMYDAPL   DS    5F\nMYDAPB   DS    21F\nMYDFPB   DS    5F\nDSNAME   DS    H,CL44\nVOLSER   DS    CL6\nLOCATEW  DS    0F\nOBTAINW  DS    4F\nLOCBUF   DS    0D                  USES NEXT 265 BYTES\nMYDSCB   DS    CL140               96 BYTES OF DSCB, 5 BYTES CCHHR\nMSGWK    DS    CL128\nSTATUS   DS    X\nRC       DS    H\nMYDFPARM DS    5F  USED BY DAIRFAIL\nMYDFREGS DS    F   USED BY DAIRFAIL\nMYDFRC   DS    F   USED BY DAIRFAIL\nMYJEFF02 DS    F   USED BY DAIRFAIL\nMYDFID   DS    H   USED BY DAIRFAIL\nDOUBLE   DS    D\nEIGHT    DS    CL8\nDDSAVE   DS    CL8\nDAIRREGS DS    F\nOPEND    DS    0F\nCLOSED   DS    F\nDYNEXLST DS    2F\nKOUNT    DS    F\nKOUNTSP  DS    F\nDYNDCBW  DS    0D,XL(DYNDCBL)\nSYNADSW  DS    F\nSYNADMSG DS    CL78\nDEVDATA  DS    2F\nJFCB     DS    0F,CL176\nIRESULT  DS    CL18                                              ISP\nISPFLEN  DS    F                                                 ISP\nCALL1    DS    0CL20                                             ISP\n         DS    F                   A(VDEF)                       ISP\n         DS    F                   A(VARIABLE NAME)              ISP\n         DS    F                   A(VARIABLE VALUE)             ISP\n         DS    F                   A(CHAR)                       ISP\n         DS    F                   A(L4+X'80000000')             ISP\n         SPACE 1                                                 ISP\n*----------------------------------------------------------------ISP-*\n*        DATA AREA TO WRITE VARIABLE INTO SHARED POOL            ISP\n*----------------------------------------------------------------ISP-*\n         SPACE 1                                                 ISP\n         DS    0F                                                ISP\nCALL2    DS    0CL12                                             ISP\n         DS    F                   A(VPUT)                       ISP\n         DS    F                   A(VARIABLE NAME)              ISP\n         DS    F                   A(SHR+X'80000000')            ISP\n         SPACE 1                                                 ISP\n*----------------------------------------------------------------ISP-*\n*        DATA AREA TO WRITE VARIABLE INTO SHARED POOL            ISP\n*----------------------------------------------------------------ISP-*\n         SPACE 1                                                 ISP\n         DS    0F                                                ISP\nCALL3    DS    0CL8                                              ISP\n         DS    F                   A(VDEL)                       ISP\n         DS    F                   A(VARIABLE NAME+X'80000000)   ISP\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nIHADCB   DSECT\n         DS    32XL1\nDCBBFTEK DS    XL1\nDCBEODAD DS    AL3\nDCBRECFM DS    X\nDCBEXLSA DS    AL3\nDCBDDNAM DS    CL8\nDCBOFLGS DS    X\n         DS    7XL1\n         DS    X\nDCBSYNAD DS    AL3\nDCBBLKSI EQU   IHADCB+62,2\nDCBLRECL EQU   IHADCB+82,2\n         SPACE\n         IKJCPPL\n         SPACE 3\n         IKJPPL\n         SPACE\n         IKJDFPB\n         SPACE 2\n         IKJUPT\n         SPACE 2\n         IKJIOPL\n         SPACE 2\n         IKJDAPL\n         SPACE 2\n         IKJDAP08\n         SPACE 2\n         IKJDAP18\n         SPACE 2\n         IKJPSCB\n         SPACE 2\n         CVT   DSECT=YES,LIST=YES,TSO=YES                        JDM2\n         SPACE 2                                                 JDM2\n         IEFTIOT1                                                JDM2\n         SPACE 2                                                 JDM2\n         IKJTCB LIST=YES,DSECT=YES                               JDM2\n         SPACE 2                                                 JDM2\n         AIF   (NOT &MVS).SKIP12\n         IKJEFFDF DFDSECT=YES\n.SKIP12  ANOP\n         SPACE 2\n         END\n//L.SYSLMOD DD DSN=SHARE.LINKLIB,DISP=SHR,UNIT=\n//L.SYSIN DD *\n NAME COUNTI(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CUTC01": {"ttr": 3595, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x03\\x00\\x03\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "BG@PRC"}, "text": "ISREDIT MACRO (P1 P2 P3) NOPROCESS\nISPEXEC CONTROL ERRORS RETURN\nISREDIT !CUT &P1 &P2 &P3\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CUTC02": {"ttr": 3597, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x03\\x00\\x03\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "BG@PRC"}, "text": "ISREDIT MACRO (P1 P2 P3) NOPROCESS\nISPEXEC CONTROL ERRORS RETURN\nISREDIT !PASTE &P1 &P2 &P3\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CUTDOC": {"ttr": 3842, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00C\\x00C\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 67, "newlines": 67, "modlines": 0, "user": "BG@PRC"}, "text": "A BRIEF DESCRIPTION OF THE CUT AND PASTE EDIT MACROS.     APRIL 25 1991\n\nTHESE CUT AND PASTE EDIT MACROS WERE WRITTEN BY BILL GODFREY,\nOF PRC INC. (FORMERLY PLANNING RESEARCH CORPORATION), MCLEAN, VIRGINIA.\n\nTHE AUTHOR HAD SEEN SOME MACROS WRITTEN AS CLISTS THAT PERFORM A\nSIMILAR FUNCTION, BUT THE CLISTS USED THE ISPF PROFILE DATA SET AS A\nHOLDING AREA FOR THE CUT DATA, AND THE AUTHOR FELT THERE HAD TO BE A\nBETTER WAY.  THE CLISTS ARE IMPRESSIVE, AND THERE PROBABLY IS NO BETTER\nWAY TO WRITE THEM IF THEY HAVE TO BE CLISTS.  I NEEDED CUT AND PASTE,\nAND IT WAS TIME I LEARNED HOW TO WRITE AN EDIT MACRO, SO I WROTE THIS\nVERSION OF CUT AND PASTE, NOT AS CLISTS BUT IN ASSEMBLER.  THE CLISTS\nWERE A GREAT HELP AS AN INITIAL MODEL.\n\nCUT AND PASTE WERE WRITTEN TO LOOK AS MUCH AS POSSIBLE LIKE THE EDIT\n'COPY' COMMAND, SO IF YOU KNOW 'COPY' YOU KNOW CUT AND PASTE.\n\nTHE USER TYPES \"CUT\" ON THE COMMAND LINE AND THEN USES THE \"C\"\nLINE COMMAND THE SAME WAY IT IS USED BY THE \"COPY\" COMMAND (THAT IS,\nC ON ONE LINE OR CC ON TWO LINES), OR THE USER TYPES \"CC\" ON ONE\nLINE, PAGES UP OR DOWN TO ANOTHER LINE, TYPES \"CC\" THERE, AND THEN\nTYPES \"CUT\" ON THE COMMAND LINE.\n\nTHE DATA WILL BE COPIED TO A \"TEMPORARY LOCATION\" (ACTUALLY A VIO\nDATA SET).\n\nTHE USER CAN PASTE IT BACK TO THE SAME DATA SET BEING EDITED, BUT\nTHAT'S NOTHING NEW - YOU DON'T NEED CUT AND PASTE FOR THAT (ALTHOUGH\nTHE ABILITY TO REPEATEDLY PASTE THE SAME THING IS NEW).\n\nTHE USER CAN ALSO PASTE IT BACK TO A DIFFERENT DATA SET.  FIRST HE OR\nSHE MUST GET INTO EDIT ON THE DATA SET INTO WHICH IT IS TO BE PASTED.\nTHE USER MAY ALREADY BE THERE ON A SPLIT SCREEN, OR MAY ALREADY BE\nTHERE IN A NESTED EDIT, OR MAY WANT TO END THE CURRENT EDIT AND START\nANOTHER - IT MAKES NO DIFFERENCE.  ONCE THE USER IS IN EDIT ON THE\nDESIRED DATA SET, HE OR SHE JUST HAS TO TYPE \"PASTE\" ON THE COMMAND\nLINE AND AND \"A\" (AFTER) OR \"B\" (BEFORE) LINE COMMAND ON THE DESIRED\nLINE, AND THE DATA THAT WAS CUT TO THE \"TEMPORARY LOCATION\" WILL BE\nCOPIED INTO PLACE.\n\nTHAT IS HOW CUT AND PASTE ARE MOST OFTEN USED, BUT THERE IS MORE.\n\nTHERE ARE IN FACT NINE \"TEMPORARY LOCATIONS\" IN WHICH TO HOLD CUT\nLINES, SO YOU CAN DO SEVERAL CUTS FROM ONE EDIT AND THEN SEVERAL\nPASTES LATER ON. (CUT, CUT 2, CUT 3...CUT 9) (PASTE, PASTE 2...)\n\nUSING THE \"M\" LINE COMMAND INSTEAD OF \"C\" WILL CAUSE THE LINES TO\nBE DELETED AS THEY ARE CUT.\n\nINSTEAD OF LINE COMMANDS YOU CAN USE LABELS, JUST LIKE THE \"COPY\"\nCOMMAND.\n\nTHE DETAILS ARE ON THE HELP SCREEN, WHICH IS DISPLAYED BY ENTERING\n\"CUT ?\" AND \"PASTE ?\" ON THE COMMAND LINE.  (SEE MEMBER CUTH01).\n\nTHE \"TEMPORARY LOCATIONS\" ARE LOST WHEN YOU LOGOFF, AND ARE PROBABLY\nDELETED BY \"FREEALL\" COMMANDS TOO, SO BE CAREFUL WITH \"FREEALL\".\n\nTHERE IS A LIMIT OF 1000 LINES PER \"TEMPORARY LOCATION\", BUT IT IS JUST\nAN ARBITRARY NUMBER CHOSEN TO NOT WASTE LARGE AMOUNTS OF VIO SPACE.  IF\nYOU CHANGE THE LIMIT BY MODIFYING THE SOURCE CODE, CHANGE THE SPACE\nALLOCATIONS FOR VIO IN THE SAME PROGRAM.\n\nONE THING THAT A CLIST VERSION OF CUT-AND-PASTE DOES THAT THIS VERSION\nDOES NOT DO IS RECOGNIZE BOUNDS WITHIN A LINE.  THE AUTHOR HAS NOT PUT\nTHIS FEATURE IN MAINLY BECAUSE NEITHER HE HIMSELF NOR THE CLIENT HE\nSERVES HAS A GREAT NEED FOR IT, AND THERE IS PLENTY OF OTHER WORK TO DO.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CUTD01": {"ttr": 3844, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00K\\x00K\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 75, "newlines": 75, "modlines": 0, "user": "BG@PRC"}, "text": "HOW TO INSTALL THE CUT AND PASTE EDIT MACROS FOR YOUR USERID ONLY,\nJUST TO TEST IT ONCE.\n\nIT IS ASSUMED YOU CAN LOOK AT A JOB THAT LINKS AND COPIES SOFTWARE\nINTO DEFAULT LIBRARIES AND MODIFY THAT JOB TO LINK AND COPY INTO YOUR\nOWN USERID-OWNED LIBRARIES.\n\nIT IS ASSUMED YOU KNOW ENOUGH ABOUT TSO TO TEMPORARILY CHANGE THE\nALLOCATIONS OF PANEL LIBRARIES (DDNAME ISPPLIB), CLIST LIBRARIES\n(DDNAME SYSPROC) AND ISPF LOAD LIBRARIES (ISPLLIB) FOR YOUR SESSION\nWITHOUT AFFECTING OTHER SESSIONS.\n\nON SOME SYSTEMS THE ALLOCATIONS ARE DONE IN LOGON PROCS, AND ON OTHERS\nTHEY ARE DONE BY A CLIST THAT IS EXECUTED TO ENTER ISPF. YOU MAY HAVE\nTO WRITE A CLIST THAT UNDOES THESE ALLOCATIONS AND RE-DOES THEM\nWITH AN ADDITONAL LIBRARY.\n\n1) CREATE A LOAD LIBRARY NAMED CUT.LOAD, ONE TRACK, ONE DIR BLOCK,\n   RECFM=U BLKSIZE=6144.  FULL NAME = YOURUSERID.CUT.LOAD\n\n2) CREATE A CLIST LIBRARY NAMED CUT.CLIST, ONE TRACK, ONE DIR BLOCK,\n   RECFM=FB LRECL=80 BLKSIZE=3120. FULL NAME = YOURUSERID.CUT.CLIST\n\n\n3) CREATE A PANEL LIBRARY NAMED CUT.PANELS, ONE TRACK, ONE DIR BLOCK,\n   RECFM=FB LRECL=80 BLKSIZE=3120 OR WHATEVER YOUR PANEL LIBRARIES ARE.\n   FULL NAME = YOURUSERID.CUT.PANELS\n\nSTEPS 4, 5, 6, 7, AND 8 CAN BE DONE BY SUBMITTING THE JOBS IN 'CUTJ01'\nBUT YOU SHOULD READ THE REST OF THESE INSTRUCTIONS BEFORE SUBMITTING\nTHE JOB.  THE JOB WILL HAVE TO BE TAILORED TO YOUR INSTALLATION.\n\n4) ASSEMBLE 'CUTL01' AND LINK IT INTO YOURUSERID.CUT.LOAD\n   GIVING IT A MEMBER NAME OF 'CUT'\n\n5) ASSEMBLE 'CUTL02' AND LINK IT INTO YOURUSERID.CUT.LOAD\n   GIVING IT A MEMBER NAME OF 'PASTE'\n\n6) COPY 'CUTH01' AND 'CUTH02' INTO YOURUSERID.CUT.PANELS\n\n7) COPY 'CUTC01' INTO YOURUSERID.CUT.CLIST RENAMING IT TO 'CUT'.\n\n8) COPY 'CUTC02' INTO YOURUSERID.CUT.CLIST RENAMING IT TO 'PASTE'.\n\n9) GET OUT OF ISPF.  IF YOU ALWAYS USE A CLIST TO GET INTO ISPF,\n   GO TO STEP 14.\n\n10) STILL OUT OF ISPF, ADD CUT.PANELS TO YOUR CONCATENATION\n   OF PANEL LIBRARIES (DDNAME ISPPLIB). ADD IT TO THE END.\n\n11) STILL OUT OF ISPF, ADD CUT.CLIST TO YOUR CONCATENATION OF\n   CLIST LIBRARIES (DDNAME SYSPROC). PUT IT FIRST IN THE LIST.\n   IF SYSPROC IS NOT ALLOCATED AT ALL, ALLOCATE IT TO CUT.CLIST.\n\n12) STILL OUT OF ISPF, ADD CUT.LOAD TO YOUR CONCATENATION\n   OF LOAD LIBRARIES (DDNAME ISPLLIB). PUT IT FIRST IN THE LIST.\n   IF ISPLLIB IS NOT ALLOCATED AT ALL, ALLOCATE IT TO CUT.LOAD.\n\n13) GO BACK INTO ISPF USING A METHOD THAT DOES NOT REQUIRE A CLIST.\n    EDIT SOMETHING AND ENTER \"CUT ?\" ON THE COMMAND LINE. INSTALL DONE.\n    YOU WILL HAVE TO REPEAT STEPS 10, 11, AND 12 EACH TIME YOU LOGON,\n    SO WRITE A CLIST THAT PERFORMS THAT FUNCTION IF YOU WISH TO GO ON\n    USING THIS VERSION OF CUT AND PASTE.\n    END OF INSTALL.\n\n14) HERE FROM STEP 9. SKIP THIS STEP IF YOU DID STEP 13.\n   IF YOU ALWAYS USE A CLIST TO GET INTO ISPF, COPY THAT CLIST TO\n   CUT.CLIST AS MEMBER 'ISPF', EDIT IT SO THAT ANY ALLOCATIONS\n   OF ISPPLIB WILL INCLUDE CUT.PANELS,\n   OF SYSPROC WILL INCLUDE CUT.CLIST,\n   OF ISPLLIB WILL INCLUDE CUT.LOAD (ADD ONE IF THERE IS NONE)\n   AND USE THAT CLIST TO GET INTO ISPF BY ENTERING \"%ISPF\" AND ANY\n   OPERANDS YOUR OTHER CLIST MAY REQUIRE.\n    EDIT SOMETHING AND ENTER \"CUT ?\" ON THE COMMAND LINE.\n    END OF INSTALL.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CUTD02": {"ttr": 3847, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00/\\x00/\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 47, "newlines": 47, "modlines": 0, "user": "BG@PRC"}, "text": "HOW TO INSTALL THE CUT AND PASTE EDIT MACROS SYSTEM-WIDE\n\n1) MAKE SURE THERE ARE NOT ALREADY SOME MEMBERS NAMED 'CUT' OR 'PASTE'\n   IN THE SYSTEM LINKLIST LIBRARIES (OR LPA, OR TSO SESSION STEPLIBS).\n   IF THERE ARE, YOU WILL EITHER HAVE TO RENAME THE ONES YOU HAVE OR\n   THE ONES YOU ARE ABOUT TO INSTALL.\n\n2) MAKE SURE THERE ARE NOT ALREADY SOME MEMBERS NAMED 'CUT' OR 'PASTE'\n   IN THE TSO SYSPROC CLIST LIBRARIES.\n   IF THERE ARE, YOU WILL EITHER HAVE TO RENAME THE ONES YOU HAVE OR\n   THE ONES YOU ARE ABOUT TO INSTALL.\n\n3) MAKE SURE THERE ARE NOT ALREADY SOME MEMBERS NAMED 'CUTH01' OR\n   'CUTH02' IN YOUR TSO ISPF PANEL LIBRARIES.\n   IF THERE ARE, YOU WILL EITHER HAVE TO RENAME THE ONES YOU HAVE OR\n   THE ONES YOU ARE ABOUT TO INSTALL.  IF YOU RENAME THE ONES YOU ARE\n   ABOUT TO INSTALL, YOU WILL HAVE TO CHANGE THE REFERENCES TO NAMES\n   'CUTH01' AND 'CUTH02' IN THE SOURCE CODE BEFORE ASSEMBLING IT.\n\nSTEPS 4, 5, 6, 8, AND 9 CAN BE DONE BY SUBMITTING THE JOBS IN 'CUTJ02'\nBUT YOU SHOULD READ THE REST OF THESE INSTRUCTIONS BEFORE SUBMITTING\nTHE JOB.  THE JOB WILL HAVE TO BE TAILORED TO YOUR INSTALLATION.\n\n4) ASSEMBLE 'CUTL01' AND LINK IT INTO A SYSTEM LINKLIST LIBRARY OR TSO\n   STEPLIB OR TSO ISPLLIB, GIVING IT A MEMBER NAME OF 'CUT' (OR\n   SOMETHING LIKE 'XCUT' IF NECESSARY TO AVOID A CONFLICT).\n\n5) ASSEMBLE 'CUTL02' AND LINK IT INTO A SYSTEM LINKLIST LIBRARY OR TSO\n   STEPLIB OR TSO ISPLLIB, GIVING IT A MEMBER NAME OF 'PASTE' (OR\n   SOMETHING LIKE 'XPASTE' IF NECESSARY TO AVOID A CONFLICT).\n\n6) COPY 'CUTH01' AND 'CUTH02' INTO ONE OF YOUR ISPF PANEL LIBRARIES,\n   RENAMING THEM IF NECESSARY.\n\n7) AT THIS POINT IT IS POSSIBLE TO TEST THE COMMANDS BY ENTERING\n     !CUT ?   OR  !PASTE ?   ON THE COMMAND LINE IN ISPF/PDF EDIT.\n   ( !XCUT ?   OR  !XPASTE ?    IF YOU CHANGED THE NAMES IN STEPS 4&5.)\n   YOU ONLY NEED THE EXCLAMATION POINT THE FIRST TIME YOU USE THE\n   COMMAND AFTER ENTERING ISPF.  FOR THE REST OF THE SESSION YOU CAN\n   OMIT IT.  THE NEXT STEPS INSTALL CLISTS THAT ELIMINATE THE NEED\n   TO USE THE EXCLAMATION POINT THE FIRST TIME.\n\n8) COPY 'CUTC01' TO ONE OF YOUT SYSPROC CLIST LIBRARIES, RENAMING IT\n   TO 'CUT' OR 'XCUT' OR WHATEVER NAME YOU USED IN STEP 4 LINKEDIT.\n\n9) COPY 'CUTC02' TO ONE OF YOUT SYSPROC CLIST LIBRARIES, RENAMING IT\n   TO 'PASTE' OR 'XPASTE' OR WHATEVER NAME YOU USED IN STEP 5 LINKEDIT.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CUTH01": {"ttr": 3849, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "BG@PRC"}, "text": "%TUTORIAL -------------------- EDIT - 'CUT' COMMAND ------------------- TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+  The%CUT+command is used to copy one or more lines of the data being edited\n   to a temporary location from which it can later be retrieved using the\n  %PASTE+command.  The temporary locations are erased when you logoff.\n\n   To specify the lines to be put into the temporary location, use line\n   commands%C+or%CC+to copy line(s), or%M+or%MM+to move lines, or use%labels+.\n\n   If you specify a%level number+as part of the command, you can use multiple\n   temporary locations, each of which you can later refer to with the%PASTE+\n   command.  Level numbers are '1' thru '9'.  If you do not specify a level\n   number, level '1' is used.\n\n   A maximum of 1000 lines can be copied to each temporary location.\n\n        %COMMAND ===> cut                   +cuts the lines specified by\n                                            +line commands to level 1.\n\n        %COMMAND ===> cut 2 .zf .zl         +cuts all lines to level 2\n\n)PROC\n   &ZUP = ISR2M600\n   &ZCONT = ISR20000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CUTH02": {"ttr": 3851, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x19\\x00\\x19\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "BG@PRC"}, "text": "%TUTORIAL ------------------ EDIT - 'PASTE' COMMAND ------------------- TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+  The%PASTE+command is used to copy one or more lines of data from a\n   temporary location created by the%CUT+command to the data being edited.\n\n   To specify where the data is to be copied, use the%A+(after) or%B+(before)\n   line commands or specify%AFTER+or%BEFORE+as a parameter, followed by a\n  %label+name.  AFTER and BEFORE can be abbreviated %AFT+and%BEF+.\n\n   If you specify a level number as part of the command, you can refer to\n   any one of multiple temporary locations that may have been created by the\n  %CUT+command.  Level numbers are '1' thru '9'.  The default level is '1'.\n\n        %COMMAND ===> paste                 +copies the lines from temporary\n                                            +location level '1' to a location\n                                            +specified by a line command.\n\n        %COMMAND ===> paste 2 before .zf    +copies the lines from temporary\n                                            +location level '2' to the line\n                                            +before the first line.\n)PROC\n   &ZUP = ISR2M600\n   &ZCONT = ISR20000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CUTJ01": {"ttr": 3853, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00)\\x00)\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 41, "newlines": 41, "modlines": 0, "user": "BG@PRC"}, "text": "//$USERID1 JOB (ACCT),'CUT OR XCUT'\n//* THESE JOBS ARE FOR A SINGLE-USER INSTALL OF CUT AND PASTE.\n//* BEFORE RUNNING THESE JOBS, PLEASE READ THE INSTALLATION\n//* INSTRUCTIONS.  YOU HAVE TO CHANGE SOME NAMES IN THIS JOB.\n//* YOU MUST AT LEAST CHANGE $USERID TO YOUR USERID.\n//* THIS JOB ASSEMBLES CUTL01 AND LINKS IT AS 'CUT'\n//ASMFCL EXEC ASMFCL,PARM.ASM='NODECK,OBJECT,NOXREF,NORLD',\n//             PARM.LKED='LIST,MAP,NCAL,RENT,REUS,REFR',\n//             COND.LKED=(0,NE,ASM)\n//ASM.SYSIN DD DSN=$USERID.CUT.SOURCE(CUTL01),DISP=SHR\n//LKED.SYSLMOD DD DSN=$USERID.CUT.LOAD(CUT),UNIT=,SPACE=,DISP=SHR\n//LKED.SYSIN   DD DUMMY\n//$USERID1 JOB (ACCT),'PASTE OR XPASTE'\n//* THIS JOB ASSEMBLES CUTL02 AND LINKS IT AS 'PASTE'\n//ASMFCL EXEC ASMFCL,PARM.ASM='NODECK,OBJECT,NOXREF,NORLD',\n//             PARM.LKED='LIST,MAP,NCAL,RENT,REUS,REFR',\n//             COND.LKED=(0,NE,ASM)\n//ASM.SYSIN DD DSN=$USERID.CUT.SOURCE(CUTL02),DISP=SHR\n//LKED.SYSLMOD DD DSN=$USERID.CUT.LOAD(PASTE),UNIT=,SPACE=,DISP=SHR\n//LKED.SYSIN   DD DUMMY\n//$USERID1 JOB (ACCT),'CUT/PASTE PANELS'\n//* THIS JOB COPIES PANELS CUTH01 AND CUTH02 TO YOUR PANEL LIBRARY\n//COPY    EXEC PGM=IEBCOPY\n//SYSPRINT DD  SYSOUT=*\n//SOURCE   DD  DSN=$USERID.CUT.SOURCE,DISP=SHR\n//ISPPLIB  DD  DSN=$USERID.CUT.PANELS,DISP=SHR\n//SYSIN    DD  *\n COPY I=SOURCE,O=ISPPLIB\n S M=CUTH01\n S M=CUTH02\n//$USERID1 JOB (ACCT),'CUT/PASTE CLISTS'\n//* THIS JOB COPIES CLISTS CUTC01 AND CUTC02 TO YOUR CLIST LIBRARY\n//* WITH NEW NAMES CUT AND PASTE\n//COPY    EXEC PGM=IEBCOPY\n//SYSPRINT DD  SYSOUT=*\n//SOURCE   DD  DSN=$USERID.CUT.SOURCE,DISP=SHR\n//CLIST    DD  DSN=$USERID.CUT.CLIST,DISP=SHR\n//SYSIN    DD  *\n COPY I=SOURCE,O=CLIST\n S M=((CUTC01,CUT))\n S M=((CUTC02,PASTE))\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CUTJ02": {"ttr": 3855, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00(\\x00(\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "BG@PRC"}, "text": "//$USERID1 JOB (ACCT),'CUT OR XCUT'\n//* THESE JOBS ARE FOR A SYSTEM-WIDE INSTALL OF CUT AND PASTE.\n//* BEFORE RUNNING THESE JOBS, PLEASE READ THE INSTALLATION\n//* INSTRUCTIONS.  YOU MAY WANT TO CHANGE SOME NAMES IN THIS JOB.\n//* THIS JOB ASSEMBLES CUTL01 AND LINKS IT AS 'CUT'\n//ASMFCL EXEC ASMFCL,PARM.ASM='NODECK,OBJECT,NOXREF,NORLD',\n//             PARM.LKED='LIST,MAP,NCAL,RENT,REUS,REFR',\n//             COND.LKED=(0,NE,ASM)\n//ASM.SYSIN DD DSN=$USERID.SOURCE(CUTL01),DISP=SHR\n//LKED.SYSLMOD DD DSN=SYS2.CMDLIB(CUT),UNIT=,SPACE=,DISP=SHR\n//LKED.SYSIN   DD DUMMY\n//$USERID1 JOB (ACCT),'PASTE OR XPASTE'\n//* THIS JOB ASSEMBLES CUTL02 AND LINKS IT AS 'PASTE'\n//ASMFCL EXEC ASMFCL,PARM.ASM='NODECK,OBJECT,NOXREF,NORLD',\n//             PARM.LKED='LIST,MAP,NCAL,RENT,REUS,REFR',\n//             COND.LKED=(0,NE,ASM)\n//ASM.SYSIN DD DSN=$USERID.SOURCE(CUTL02),DISP=SHR\n//LKED.SYSLMOD DD DSN=SYS2.CMDLIB(PASTE),UNIT=,SPACE=,DISP=SHR\n//LKED.SYSIN   DD DUMMY\n//$USERID1 JOB (ACCT),'CUT/PASTE PANELS'\n//* THIS JOB COPIES PANELS CUTH01 AND CUTH02 TO YOUR PANEL LIBRARY\n//COPY    EXEC PGM=IEBCOPY\n//SYSPRINT DD  SYSOUT=*\n//SOURCE   DD  DSN=$USERID.SOURCE,DISP=SHR\n//ISPPLIB  DD  DSN=SYS2.ISPPLIB,DISP=SHR\n//SYSIN    DD  *\n COPY I=SOURCE,O=ISPPLIB\n S M=CUTH01\n S M=CUTH02\n//$USERID1 JOB (ACCT),'CUT/PASTE CLISTS'\n//* THIS JOB COPIES CLISTS CUTC01 AND CUTC02 TO YOUR CLIST LIBRARY\n//* WITH NEW NAMES CUT AND PASTE\n//COPY    EXEC PGM=IEBCOPY\n//SYSPRINT DD  SYSOUT=*\n//SOURCE   DD  DSN=$USERID.SOURCE,DISP=SHR\n//CLIST    DD  DSN=SYS2.CLIST,DISP=SHR\n//SYSIN    DD  *\n COPY I=SOURCE,O=CLIST\n S M=((CUTC01,CUT))\n S M=((CUTC02,PASTE))\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CUTL01": {"ttr": 3857, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x04\\x18\\x04\\x18\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 1048, "newlines": 1048, "modlines": 0, "user": "BG@PRC"}, "text": "         TITLE '   C U T   '\n***********************************************************************\n*                                                                     *\n*        'CUT' - ISPF EDIT MACRO                                      *\n*                                                                     *\n***********************************************************************\n         SPACE\n* WRITTEN BY BILL GODFREY, PRC INC.\n*  (PRC INC. OF MCLEAN, VIRGINIA, WAS FORMERLY PLANNING RESEARCH CORP.)\n* CURRENT INSTALLATION:\n*  NOAA (NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION),\n*  5200 AUTH ROAD, CAMP SPRINGS, MARYLAND 20746\n* DATE-WRITTEN: APRIL 25 1991.\n* DATE-UPDATED: OCTOBER 18 1990.\n* ATTRIBUTES. RE-ENTRANT.\n* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.\n* ISPF PANELS: CUTH01.\n* SITE-DEPENDENCIES:\n*  UNIT NAME 'VIO' MAY NEED TO BE CHANGED.\n*  IF MAXLINES IS CHANGED, BE SURE N99PRIME SPECIFIES ENOUGH TRACKS\n*  TO HOLD THAT MANY 256-BYTE RECORDS, AND CHANGE MSG04B.\n* DESCRIPTION.\n*  THIS ISPF EDIT MACRO COPIES ONE OR MORE LINES TO A TEMPORARY FILE\n*  FOR LATER USE BY THE 'PASTE' MACRO.\n*\n*  UP TO 9 DIFFERENT 'CUT' BUFFERS CAN CO-EXIST.  THE DEFAULT BUFFER\n*  (1) IS USED IF NO PARAMETER IS SPECIFIED.  THE USER CAN SPECIFY ANY\n*  OF THE 9 BUFFER LEVELS (1 THRU 9) AS THE PARAMETER.\n*\n*  EACH BUFFER IS ACTUALLY A TEMPORARY DATA SET NAMED '&CUTX' WHERE\n*  X HAS A VALUE THAT CAN RANGE FROM 1 THRU 9.\n*\n*  THE USER HAS TWO WAYS TO SPECIFY THE LINES TO BE CUT.\n*  THEY CAN BE SPECIFIED WITH LINE COMMANDS (C, CC, M, MM)\n*  OR WITH LABELS.  FOR EXAMPLE, CUT 2 .ZF .ZL\n*\n*  THE ONLY PARAMETERS ARE THE BUFFER LEVEL (OPTIONAL) AND ONE OR\n*  TWO LABELS.  IF THE BUFFER LEVEL IS SPECIFIED IT MUST BE THE FIRST\n*  PARAMETER.\n*\n*  MANY 'CUT' CLISTS STORE THE DATA LINES IN THE PROFILE POOL, WHICH\n*  WHICH COULD ADD SEVERAL TRACKS TO THE SIZE OF THE USER'S ISPF\n*  PROFILE DATA SET.  THIS COMMAND DOESN'T DO IT THAT WAY.\n*\n*  RATHER THAN STORE THE DATA LINES IN VARIABLES IN THE PROFILE POOL,\n*  WE STORE THEM IN A TEMPORARY DATA SET ALLOCATED TO VIO.\n*\n*  NOTE THAT CUTP1 THRU CUTP4 ARE 80 BYTES LONG SO WE CAN HANDLE\n*  ALMOST ANYTHING THAT THE USER ENTERS.  CUTP4 WILL CONTAIN\n*  ANY REMAINING PARAMETERS AFTER THE OTHERS, AND IS ONLY USED TO\n*  CHECK THAT NO 4TH OPERAND IS ENTERED.\n*\n*  HAD TO USE 'CER' TO RETAIN CONTROL DURING 'PROCESS' SO WE COULD\n*  ISSUE SETMSG FOR &ZERRMSG SO THAT 'BLOCK COMMAND INCOMPLETE' AND\n*  'COMMAND CONFLICT' WOULD BE DISPLAYED WHEN APPROPRIATE.\n*\n*  ONE BIG DISADVANTAGE OF EDIT MACROS THAT ARE NOT CLISTS IS THAT\n*  EVERY TIME YOU GO INTO EDIT, THEY ARE NOT RECOGNIZED UNTIL:\n*      1) THEY ARE \"DEFINED\" BY AN EDIT MACRO COMMAND IN A CLIST OR IN\n*         ANOTHER PROGRAM, OR\n*      2) THEY ARE ENTERED PRECEDED BY AN EXCLAMATION POINT.\n*  SO IT IS USEFUL TO HAVE A CLIST LIKE THE FOLLOWING IN A MEMBER\n*  OF THE SYSPROC CLIST LIBRARY:\n*      ISREDIT MACRO\n*      ISREDIT DEFINE CUT MACRO PGM\n*      ISREDIT DEFINE PASTE MACRO PGM\n*      ISREDIT DEFINE PAS ALIAS PASTE\n*      SET ZEDSMSG = &STR(CUT/PASTE INSTALLED)\n*      SET ZEDLMSG = &STR(FOR HELP, ENTER \"CUT ?\")\n*      ISPEXEC SETMSG MSG(ISRZ000)\n*  THEN YOU JUST TYPE THE NAME OF THE CLIST ('CUTMAC' FOR EXAMPLE)\n*  ON THE COMMAND LINE, AND THE COMMANDS ARE AVAILABLE.  IF YOU WANT\n*  THE 'CUTMAC' CLIST TO AUTOMATICALLY EXECUTE EACH TIME YOU GO\n*  INTO EDIT, SET 'IMACRO CUTMAC' IN EACH EDIT PROFILE.\n*\n*  AN EVEN BETTER ALTERNATIVE IS A CLIST IN SYSPROC NAMED 'CUT'\n*  WHICH LOOKS LIKE THIS:\n*      ISREDIT MACRO (P1 P2 P3) NOPROCESS\n*      ISPEXEC CONTROL ERRORS RETURN\n*      ISREDIT !CUT &P1 &P2 &P3\n*  THE CLIST GETS INVOKED THE FIRST TIME YOU USE THE CUT COMMAND\n*  AND FROM THEN ON YOU GO STRAIGHT TO THE PROGRAM.\n*  THERE SHOULD ALSO BE A CLIST IN SYSPROC NAMED 'PASTE':\n*      ISREDIT MACRO (P1 P2 P3) NOPROCESS\n*      ISPEXEC CONTROL ERRORS RETURN\n*      ISREDIT !PASTE &P1 &P2 &P3\n*  NOTE: 'ISPEXEC CONTROL ERRORS RETURN' IN THE ABOVE CLISTS SUPPRESSES\n*      AN ERROR PANEL THAT APPEARS IF A 'BLOCK COMMAND INCOMPLETE'\n*      SITUATION (LIKE ONLY ONE CC) OR A 'COMMAND CONFLICT'\n*      SITUATION (LIKE THREE CC'S) OCCURS THE FIRST TIME YOU USE 'CUT'\n*      IN AN ISPF SESSION.  UNFORTUNATELY THE COMMAND IS NOT LEFT ON\n*      THE LINE, BUT THAT'S A MINOR IRRITATION COMPARED TO THE ERROR\n*      PANEL, AND IT ONLY HAPPENS IF IT'S THE FIRST TIME YOU USE CUT.\n* LOG OF CHANGES:\n*  25SEP90 - ADD 'ISPEXEC CONTROL ERRORS RETURN' TO SUGGESTED CLISTS,\n*            AND NOTE ABOUT THEM.  NO CODE CHANGES IN PROGRAM.\n*  04OCT90 - MAKE THAT 'ISPEXEC' IN 25SEP90 COMMENTS, NOT 'ISREXEC'.\n*            NO CODE CHANGES IN PROGRAM.\n*  18OCT90 - ADD VERSION TO @PROLOG.\n*  25APR91 - NO CODE CHANGES. MINOR COMMENT CHANGES.\n         SPACE\nCUT      CSECT\n         USING *,R8\n@ORIGIN  B     @PROLOG-*(,R15)\n         DC    AL1(3),CL7'CUT 1.0'\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(0),AL3(@DATAL)\n@PROLOG  STM   14,8,12(13)         SAVE REGS\n         LR    R8,15               BASE REGISTER\n         LR    R2,R1               PARM POINTER\n         LA    R3,68(,R13)         POINT TO 18TH WORD OF SAVE AREA\n         LA    R1,56(,R13)         POINT TO 15TH WORD OF SAVE AREA\n         MVC   0(10,R1),GMLIST\n         L     R0,@SIZE\n         GETMAIN EC,LV=(0),A=(R3),MF=(E,(1))\n         LTR   R15,R15             IF GETMAIN WAS NOT SUCCESSFUL\n         BZ    GOTMAIN                THEN\n         LM    14,8,12(13)            RESTORE REGS\n         LA    R15,12                 SET RC = 12\n         BR    R14                    RETURN\nGOTMAIN  L     R3,68(,R13)         GET ADDRESS RETURNED BY GETMAIN\n         STM   9,12,56(R13)        SAVE REMAINING REGISTERS\n         DROP  R8\n         LR    R10,R8\n         USING @ORIGIN,R10,R11\n         LA    R15,1\n         LA    R11,4095(R15,R10)\n         SPACE\n         LR    R0,R3               AREA TO BE CLEARED\n         L     R1,@SIZE            LENGTH TO BE CLEARED\n         SLR   R15,R15             ZERO PAD AND 'FROM' LENGTH\n         MVCL  R0,R14              CLEAR GETMAINED AREA\n         SPACE\n         ST    R3,8(,R13)          PUT NEW ADDRESS IN OLD SAVE AREA\n         ST    R13,4(,R3)          PUT OLD ADDRESS IN NEW SAVE AREA\n         LR    R13,R3              SWITCH TO NEW SAVEAREA\n         USING @DATA,R13\n         SPACE\n         LOAD  EP=ISPLINK,ERRET=EXIT12\n         ST    R0,ISPLINKA\n         SPACE\n***********************************************************************\n*                                                                     *\n*         DEFINE VARIABLES                                            *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTP1)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTP1\n         LA    R0,L'CUTP1\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTP2)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTP2\n         LA    R0,L'CUTP2\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTP3)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTP3\n         LA    R0,L'CUTP3\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTP4)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTP4\n         LA    R0,L'CUTP4\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTCM)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTCM\n         LA    R0,L'CUTCM\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTZF)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTZF\n         LA    R0,L'CUTZF\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTZL)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTZL\n         LA    R0,L'CUTZL\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTDW)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTDW\n         LA    R0,L'CUTDW\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTLN)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTLN\n         LA    R0,256\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTBO)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTBO\n         LA    R0,L'CUTBO\n         BAL   R8,VDEFINE\n         SPACE\n***********************************************************************\n*                                                                     *\n*         IDENTIFY THIS AS AN EDIT MACRO, GET PARAMETER               *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,CMD1             ISREDIT MACRO (CUTP1) NOPROCESS\n         LA    R0,L'CMD1\n         BAL   R8,ISREDIT\n         SPACE\n         CLI   CUTP1,C'.'          IF 1ST PARM LOOKS LIKE A LABEL\n         BNE   P1ID                   THEN\n         MVC   CUTP4,CUTP3            SHIFT 3RD TO 4TH\n         MVC   CUTP3,CUTP2            SHIFT 2ND TO 3RD\n         MVC   CUTP2,CUTP1            SHIFT 1ST TO 2ND\n         MVI   CUTP1,C' '             BLANK 1ST\n         MVC   CUTP1+1(79),CUTP1      BLANK 1ST\nP1ID     CLI   CUTP1+1,C' '        IF 1ST OPERAND LONGER THAN 1 CHAR\n         BNE   ERR01                  ERROR\n         CLI   CUTP1,C' '          IF NO OPERAND\n         BNE   P1NB                   THEN\n         MVI   CUTP1,C'1'             DEFAULT LEVEL 1\nP1NB     CLI   CUTP1,C'?'          HELP\n         BE    HELP\n         CLI   CUTP1,C':'          COLON\n         BE    ERR12\n         OI    CUTP1,X'40'         CAPS\n         CLI   CUTP1,C'1'\n         BL    ERR01\n         CLI   CUTP1,C'9'\n         BH    ERR01\n         SPACE\n***********************************************************************\n*                                                                     *\n*         IF ONE OR TWO LABELS ARE SPECIFIED, INTERPRET THEM          *\n*                                                                     *\n***********************************************************************\n         SPACE\nOKP1     BAL   R8,CER\n         TR    CUTP2,CAPS\n         CLI   CUTP2,C' '\n         BE    NOLABS\n         CLI   CUTP2,C'.'\n         BNE   ERR02\n         LA    R1,CUTP2\n         LA    R15,LABEL1\n         MVC   0(9,R15),=CL9' '\n         LA    R0,9\nMOVLAB1  CLI   0(R1),C' '\n         BE    GOTLAB1\n         CLI   0(R1),0\n         BE    GOTLAB1\n         MVC   0(1,R15),0(R1)\n         LA    R1,1(,R1)\n         LA    R15,1(,R15)\n         BCT   R0,MOVLAB1\n         CLI   0(R1),C' '\n         BNE   ERR02               LABEL TOO LONG\nGOTLAB1  MVC   LABELW,LABEL1\n         LA    R1,CMDA             ISREDIT (CUTZF) = LINENUM .LABELXXX\n         LA    R0,L'CMDA\n         MVC   LINE(L'CMDA),0(R1)\n         MVC   LINE+18(9),LABEL1\n         LA    R1,LINE\n         BAL   R8,ISREDIT\n         LTR   R15,R15\n         BNZ   ERR11\n         MVC   CUTZL,CUTZF\n         MVI   CUTCM,C'C'\nOKP2     TR    CUTP3,CAPS\n         CLI   CUTP3,C' '\n         BE    NOP3\n         CLI   CUTP3,C'.'\n         BNE   ERR02\n         LA    R1,CUTP3\n         LA    R15,LABEL2\n         MVC   0(9,R15),=CL9' '\n         LA    R0,9\nMOVLAB2  CLI   0(R1),C' '\n         BE    GOTLAB2\n         CLI   0(R1),0\n         BE    GOTLAB2\n         MVC   0(1,R15),0(R1)\n         LA    R1,1(,R1)\n         LA    R15,1(,R15)\n         BCT   R0,MOVLAB2\n         CLI   0(R1),C' '\n         BNE   ERR02               LABEL TOO LONG\nGOTLAB2  MVC   LABELW,LABEL2\n         LA    R1,CMDB             ISREDIT (CUTZL) = LINENUM .LABELXXX\n         LA    R0,L'CMDB\n         MVC   LINE(L'CMDB),0(R1)\n         MVC   LINE+18(9),LABEL2\n         LA    R1,LINE\n         BAL   R8,ISREDIT\n         LTR   R15,R15\n         BNZ   ERR11\n         SPACE\nNOP3     MVI   CUTCM,C'C'\n         SPACE\n         LA    R1,CMDC             ISREDIT PROCESS\n         LA    R0,L'CMDC            (NEITHER DEST NOR RANGE)\n         BAL   R8,ISREDIT           (JUST TO ENSURE NO LINE CMDS)\n         SPACE\n         LTR   R15,R15             IF RC = 0\n         BZ    OKLABS                 THERE WERE NO LINE CMDS\n         C     R15,=F'16'          IF COMMAND CONFLICT\n         BE    ERR10                SHOW ZERRMSG\n         B     EXIT0               OTHERWISE DONT DO ANYTHING FOR NOW\nOKLABS   BAL   R8,CEC\n         CLC   CUTZF,CUTZL         IF FIRST IS GREATER THAN LAST\n         BNH   OKRANGE                THEN\n         MVC   DOUBLE(6),CUTZF        SWAP THEM\n         MVC   CUTZF,CUTZL\n         MVC   CUTZL,DOUBLE\n         B     OKRANGE\n         SPACE\n***********************************************************************\n*                                                                     *\n*         PROCESS THE LINE COMMAND(S)                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\nNOLABS   LA    R1,CMD8             ISREDIT (CUTBO) = LINENUM .ZLAST\n         LA    R0,L'CMD8\n         BAL   R8,ISREDIT\n         SPACE\n         BAL   R8,CER\n         SPACE\n         LA    R1,CMD2             ISREDIT PROCESS RANGE C\n         LA    R0,L'CMD2\n         BAL   R8,ISREDIT\n         SPACE\n         LTR   R15,R15\n         BZ    OKLINEC\n         SPACE\n         C     R15,=F'16'          IF RC EQ 16\n         BE    ERR10                  BLOCK INCOMPLETE, CMD CONFLICT\n         C     R15,=F'20'          IF RC EQ 20\n         BE    CHKEMPTY               CHECK FOR EMPTY DATA SET\n         C     R15,=F'4'           IF RC GT 4\n         BNE   EXIT0                  ISPF WILL ISSUE ITS OWN MESSAGE\n         B     ERR03               NO LINE COMMAND(S) SPECIFIED\nCHKEMPTY CLC   CUTBO,=C'000000'    IF NOT EMPTY\n         BNE   EXIT0                  ISPF WILL ISSUE ITS OWN MESSAGE\n         B     ERR09               EMPTY\n         SPACE\n***********************************************************************\n*                                                                     *\n*         GET THE FIRST AND LAST LINE NUMBERS OF THE RANGE            *\n*                                                                     *\n***********************************************************************\n         SPACE\nOKLINEC  EQU   *\n         BAL   R8,CEC\n         SPACE\n         LA    R1,CMD3             ISREDIT (CUTCM) = RANGE_CMD\n         LA    R0,L'CMD3\n         BAL   R8,ISREDIT\n         SPACE\n         LA    R1,CMD4             ISREDIT (CUTZF) = LINENUM .ZFRANGE\n         LA    R0,L'CMD4\n         BAL   R8,ISREDIT\n         SPACE\n         LA    R1,CMD5             ISREDIT (CUTZL) = LINENUM .ZLRANGE\n         LA    R0,L'CMD5\n         BAL   R8,ISREDIT\n         SPACE\n*               CUTZF AND CUTZL WERE ORIGINALLY 8 BYTES LONG, AND THE\n*               ABOVE CALLS FILLED THEM IN WITH 6 DIGITS FOLLOWED BY\n*               TWO BLANKS.  WE THEN CHANGED THE LENGTH TO 6.\n         SPACE\n***********************************************************************\n*                                                                     *\n*         WE KNOW THE LINE NUMBERS, EITHER FROM LABELS OR LINE CMDS   *\n*                                                                     *\n***********************************************************************\n         SPACE\nOKRANGE  LA    R1,CMD6             ISREDIT (CUTDW) = DATA_WIDTH\n         LA    R0,L'CMD6\n         BAL   R8,ISREDIT\n         PACK  DOUBLE,CUTDW\n         CVB   R0,DOUBLE\n         STH   R0,WIDTH\n         SPACE\n***********************************************************************\n*                                                                     *\n*         COMPUTE THE NUMBER OF LINES                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n         PACK  DOUBLE(8),CUTZF\n         CVB   R4,DOUBLE\n         PACK  DOUBLE(8),CUTZL\n         CVB   R5,DOUBLE\n         SPACE\n         LR    R0,R5\n         SR    R0,R4               COMPUTE NUMBER OF LINES - 1\n         A     R0,=F'1'            COMPUTE NUMBER OF LINES\n         CVD   R0,DOUBLE\n         MVC   HOWMANY,=X'4020202020202120'\n         ED    HOWMANY,DOUBLE+4\n         C     R0,MAXLINES\n         BH    ERR04\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ALLOCATE THE CUT BUFFER AS AN OLD TEMPORARY DATA SET        *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   OLDNEW,=C'OLD'\n         LA    R1,W99RBPTR\n         LA    R15,W99RB\n         ST    R15,0(,R1)\n         OI    0(R1),X'80'\n         MVC   W99RB(20),P99RB\n         LA    R14,W99TUPL\n         ST    R14,8(,R15)\n         LA    R1,W99RTDDN\n         ST    R1,0(,R14)\n         MVC   0(14,R1),P99RTDDN\n         LA    R1,W99DSNAM\n         ST    R1,4(,R14)\n         MVC   0(11,R1),P99DSNAM\n         MVC   10(1,R1),CUTP1      APPEND PARM TO DSN\n         LA    R1,P99STATS\n         ST    R1,8(,R14)\n         LA    R1,P99NDISP\n         ST    R1,12(,R14)\n         LA    R1,P99PERMA\n         ST    R1,16(,R14)\n         LA    R1,P99CNVRT\n         ST    R1,20(,R14)\n         OI    20(R14),X'80'\n         LA    R1,P99NDISP\n         LA    R1,W99RBPTR\n         SVC   99\n         LTR   R15,R15\n         BZ    OKALLOC\n         C     R15,=F'4'\n         BNE   ERR05\n         CLC   W99RB+4(2),=X'1708'\n         BNE   ERR05\n         MVC   OLDNEW,=C'NEW'\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ALLOCATE THE CUT BUFFER AS A NEW TEMPORARY DATA SET         *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R15,W99RB\n         MVC   W99RB(20),P99RB\n         LA    R14,W99TUPL\n         ST    R14,8(,R15)\n         LA    R1,W99RTDDN\n         ST    R1,0(,R14)\n         MVC   0(14,R1),P99RTDDN\n         LA    R1,W99DSNAM\n         ST    R1,4(,R14)\n         MVC   0(11,R1),P99DSNAM\n         MVC   10(1,R1),CUTP1      APPEND PARM TO DSN\n         LA    R1,N99STATS\n         ST    R1,8(,R14)\n         LA    R1,P99NDISP\n         ST    R1,12(,R14)\n         LA    R1,P99PERMA\n         ST    R1,16(,R14)\n         LA    R1,P99CNVRT\n         ST    R1,20(,R14)\n         LA    R1,N99UNIT\n         ST    R1,24(,R14)\n         LA    R1,N99TRK\n         ST    R1,28(,R14)\n         LA    R1,N99PRIME\n         ST    R1,32(,R14)\n         OI    32(R14),X'80'\n         LA    R1,W99RBPTR\n         SVC   99\n         LTR   R15,R15\n         BZ    OKALLOC\n         C     R15,=F'4'\n         BNE   ERR05\n         CLC   W99RB+4(2),=X'021C'\n         BNE   ERR05\n         B     ERR06\nOKALLOC  EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         OPEN THE TEMPORARY DATA SET                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVI   OPEN,X'80'\n         MVI   CLOSE,X'80'\n         SPACE\n         LA    R3,VIODCBW\n         MVC   0(VIODCBL,R3),VIODCB\n         MVC   DDNAM(8,R3),W99RTDDN+6\n         LH    R0,WIDTH\n         STH   R0,LRECL(,R3)\n         MH    R0,=H'10'\n         STH   R0,BLKSI(,R3)\n*        LA    R1,VIOEXL           SET EXLST=VIOEXL IN DCB\n*        STCM  R1,7,EXLST+1(R3)\n*        LA    R0,VIOEXO\n*        ST    R0,VIOEXL\n*        MVI   VIOEXL,X'85'\n         OPEN  ((R3),OUTPUT),MF=(E,OPEN)\n         TM    48(R3),X'10'\n         BNO   ERR07\n         SPACE\n***********************************************************************\n*                                                                     *\n*         COPY THE EDIT LINES TO THE TEMPORARY DATA SET               *\n*                                                                     *\n***********************************************************************\n         SPACE\nLOOP     CVD   R4,DOUBLE\n         UNPK  NUMBER(6),DOUBLE+4(4)\n         OI    NUMBER+5,X'F0'\n         LA    R1,CMD7             (CUTLN) = LINE XXXXXX\n         LA    R0,L'CMD7\n         MVC   LINE(L'CMD7),0(R1)\n         MVC   LINE+15(6),NUMBER\n         LA    R1,LINE\n         BAL   R8,ISREDIT\n         SPACE\n         PUT   (R3),CUTLN\n         SPACE\n         CR    R4,R5\n         BE    LOOPEND\n         A     R4,=F'1'\n         B     LOOP\nLOOPEND  EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         IF LINE COMMAND WAS 'M' DELETE THE LINE(S)                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         CLI   CUTCM,C'M'\n         BNE   COPYONLY\n         LA    R1,CMD9             ISREDIT DELETE XXXXXX YYYYYY\n         LA    R0,L'CMD9\n         MVC   LINE(L'CMD9),0(R1)\n         MVC   LINE+7(6),CUTZF\n         MVC   LINE+14(6),CUTZL\n         LA    R1,LINE\n         BAL   R8,ISREDIT\nCOPYONLY EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         CLOSE AND ISSUE COMPLETION MESSAGE                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nDONE     LA    R3,VIODCBW\n         CLOSE ((R3)),MF=(E,CLOSE)\n         BAL   R8,UNALLO           REMOVE IN-USE FLAG\n         LTR   R15,R15\n         BNZ   ERR08\n         LA    R1,LINE\n         MVC   0(MSG00L,R1),MSG00\n         MVC   8(6,R1),HOWMANY+2\n         CLC   HOWMANY+6(2),=C' 1' IF ONE LINE\n         BNE   *+10                   THEN\n         MVC   15(9,R1),=C'LINE CUT ' CHANGE PLURAL TO SINGULAR\n         A     R1,MSG00            POINT TO 2ND MESSAGE\n         LA    R1,8(,R1)           POINT TO 2ND MESSAGE\n         MVC   0(1,R1),CUTCM\n         MVC   8(6,R1),CUTZF\n         MVC   15(6,R1),CUTZL\n         MVC   22(3,R1),CUTDW\n         MVC   26(8,R1),W99RTDDN+6\n         MVC   35(3,R1),OLDNEW\n*               ELIMINATE LEADING BLANKS FROM FINAL MESSAGE\n         L     R1,LINE             GET LENGTH OF 1ST MESSAGE\n         A     R1,LINE+4           GET LENGTH OF BOTH MSGS\n         LR    R14,R1\n         BCTR  R14,0               GET LENGTH MINUS 1\n         BCTR  R14,0               GET LENGTH MINUS 2\n         LA    R15,LINE+8          POINT TO 1ST MESSAGE\nSHIFTL   CLI   0(R15),C' '\n         BNE   SHIFTED\n         EX    R14,SHIFTM          SHIFT MESSAGES LEFT\n         BCTR  R1,0                REDUCE LENGTH\n         B     SHIFTL\nSHIFTM   MVC   LINE+8(0),LINE+9    (EXECUTED)\nSHIFTED  S     R1,LINE+4           COMPUTE NEW LENGTH OF 1ST MSG\n         ST    R1,LINE             STORE NEW LENGTH\n*               LEADING BLANKS HAVE BEEN ELIMINATED\n         LA    R1,LINE\n         BAL   R8,ZEDSMSG          SET ZEDSMSG = &STR(IT WORKED)\n         SPACE\n         BAL   R8,SETMSG0          ISPEXEC SETMSG MSG(ISRZ000)\nEXIT0    SR    R15,R15\nEXIT     LR    R2,R15\n         L     R15,ISPLINKA\n         LTR   R15,R15\n         BZ    EXITNOD\n         DELETE EP=ISPLINK\nEXITNOD  EQU   *\n         LR    R1,R13\n         L     R0,@SIZE\n         L     R13,4(,R13)\n         FREEMAIN R,LV=(0),A=(1)\n         LR    R15,R2\n         LM    0,12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\nEXIT12   LA    R15,12\n         B     EXIT\n         SPACE\n***********************************************************************\n*                                                                     *\n*         SUBROUTINES                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n*               REMOVE THE IN-USE FLAG SO THAT SUBSEQUENT ALLOCATIONS\n*               (BY CUT AND PASTE) DO NOT GENERATE ADDITIONAL DDNAMES\n*               AND EVENTUALLY FILL UP THE TIOT.\n         SPACE\nUNALLO   LA    R15,W99RB\n         MVC   W99RB(20),U99RB\n         LA    R14,W99TUPL\n         ST    R14,8(,R15)\n         LA    R1,W99DDNAM\n         ST    R1,0(,R14)\n         MVC   0(6,R1),U99DDNAM\n         MVC   6(8,R1),W99RTDDN+6\n         LA    R1,U99REMOV\n         ST    R1,4(,R14)\n         OI    04(R14),X'80'\n         LA    R1,W99RBPTR\n         SVC   99\n         BR    R8\n         SPACE\nERR01    LA    R1,LINE\n         MVC   0(MSG01L,R1),MSG01\n         MVC   26(8,R1),CUTP1      COPY 1ST 8 BYTES OF 1ST PARM\nERR01J   BAL   R8,ZEDSMSG          SET ZEDSMSG = &STR(WHATEVER)\n         BAL   R8,SETMSG1          ISPEXEC SETMSG MSG(ISRZ001)\n         B     EXIT0\n         SPACE\nERR02    LA    R1,LINE\n         MVC   0(MSG02L,R1),MSG02\n         MVC   26(8,R1),CUTP2      COPY 1ST 8 BYTES OF 2ND PARM\n         B     ERR01J              SET ZEDSMSG = &STR(INVALID PARM)\n         SPACE\nERR03    LA    R1,LINE\n         MVC   0(MSG03L,R1),MSG03\n         B     ERR01J              SET ZEDSMSG = &STR(NO LINE CMD)\n         SPACE\nERR04    LA    R1,LINE\n         MVC   0(MSG04L,R1),MSG04\n         A     R1,MSG04\n         LA    R1,8(,R1)\n         MVC   0(6,R1),HOWMANY+2\n         LA    R1,LINE\n         BAL   R8,ZEDSMSG          SET ZEDSMSG = &STR(TOO MANY LINES)\n         SPACE\n         BAL   R8,SETMSG1          ISPEXEC SETMSG MSG(ISRZ001)\n         B     EXIT0\n         SPACE\nERR05    LA    R1,LINE\n         MVC   0(MSG05L,R1),MSG05\nERR05J   A     R1,LINE\n         LA    R1,8(,R1)\n         CVD   R15,DOUBLE          RETURN CODE FROM SVC 99\n         OI    DOUBLE+7,X'0F'\n         UNPK  3(2,R1),DOUBLE+6(2)\n         UNPK  DOUBLE(5),W99RB+4(3) ERROR CODE FROM SVC 99\n         TR    DOUBLE(4),HEXTAB-240\n         MVC   12(4,R1),DOUBLE\n         UNPK  DOUBLE(5),W99RB+6(3) INFO  CODE FROM SVC 99\n         TR    DOUBLE(4),HEXTAB-240\n         MVC   22(4,R1),DOUBLE\n         LA    R1,LINE\n         B     ERR01J              SET ZEDSMSG = &STR(ALLOC ERROR)\n         SPACE\nERR06    LA    R1,LINE\n         MVC   0(MSG06L,R1),MSG06\n         B     ERR01J              SET ZEDSMSG = &STR(UNIT ERROR)\n         SPACE\nERR07    LA    R1,LINE\n         MVC   0(MSG07L,R1),MSG07\n         B     ERR01J              SET ZEDSMSG = &STR(OPEN ERROR)\n         SPACE\nERR08    LA    R1,LINE\n         MVC   0(MSG08L,R1),MSG08\n         B     ERR05J              SET ZEDSMSG = &STR(UNALLOC ERROR)\n         SPACE\nERR09    LA    R1,LINE\n         MVC   0(MSG09L,R1),MSG09\n         B     ERR01J              SET ZEDSMSG = &STR(EMPTY)\n         SPACE\nERR10    BAL   R8,GETZERR\n         BAL   R8,SETMSGZ          ISPEXEC SETMSG MSG(&ZERRMSG)\n         B     EXIT12\n         SPACE\nERR11    LA    R1,LINE\n         MVC   0(MSG11L,R1),MSG11\n         A     R1,MSG11\n         LA    R1,8(,R1)\n         MVC   0(9,R1),LABELW\n         LA    R1,LINE\n         B     ERR01J              SET ZEDSMSG = &STR(LABEL ERROR)\n         SPACE\nERR12    LA    R1,LINE\n         MVC   0(MSG12L,R1),MSG12\n         OC    8+L'MSG12A(L'MSG12B,R1),MSG12C\n         B     ERR01J              SET ZEDSMSG = &STR(VERSION 1.0)\n         SPACE\nVDEFINE  LR    R15,R1              SAVE ADDRESS\n         ST    R0,VDEFLEN          STORE LENGTH\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'VDEFINE '\n         ST    R0,0(,R1)\n         LA    R0,VDEFNAME\n         ST    R0,4(,R1)\n         ST    R15,8(,R1)          STORE ADDRESS\n         LA    R0,VDEFFMT\n         ST    R0,12(,R1)\n         LA    R0,VDEFLEN\n         ST    R0,16(,R1)\n         OI    16(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nGETZERR  LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'VCOPY '\n         ST    R0,0(,R1)\n         LA    R0,=CL10'(ZERRMSG)'\n         ST    R0,4(,R1)\n         LA    R0,ZERRMSL\n         MVC   ZERRMSL,=F'8'\n         ST    R0,8(,R1)\n         LA    R0,ZERRMSG\n         ST    R0,12(,R1)\n         LA    R0,=CL7'MOVE'\n         ST    R0,16(,R1)\n         OI    16(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nZEDSMSG  LR    R15,R1              SAVE ADDRESS\n         ST    R0,VDEFLEN          STORE LENGTH\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'VREPLACE'\n         ST    R0,0(,R1)\n         LA    R0,=CL17'(ZEDSMSG ZEDLMSG)'\n         ST    R0,4(,R1)\n         ST    R15,8(,R1)          LENGTHS\n         LA    R15,8(,R15)\n         ST    R15,12(,R1)         VALUES\n         OI    12(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nSETMSGZ  LA    R1,ZERRMSG\n         B     SETMSG\nSETMSG0  LA    R1,=CL8'ISRZ000 '\n         B     SETMSG\nSETMSG1  LA    R1,=CL8'ISRZ001 '\nSETMSG   LR    R15,R1              SAVE ADDRESS OF 'ISRZ001'\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'SETMSG'\n         ST    R0,0(,R1)\n         ST    R15,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nCER      LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'CONTROL'\n         ST    R0,0(,R1)\n         LA    R0,=CL8'ERRORS'\n         ST    R0,4(,R1)\n         LA    R0,=CL8'RETURN'\n         ST    R0,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nCEC      LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'CONTROL'\n         ST    R0,0(,R1)\n         LA    R0,=CL8'ERRORS'\n         ST    R0,4(,R1)\n         LA    R0,=CL8'CANCEL'\n         ST    R0,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nHELP     BAL   R8,CER\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'DISPLAY'\n         ST    R0,0(,R1)\n         LA    R0,=CL8'CUTH01'\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         B     EXIT0\n         SPACE\nISREDIT  LR    R15,R1\n         ST    R0,LENGTH\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'ISREDIT '\n         ST    R0,0(,R1)\n         LA    R0,LENGTH\n         ST    R0,4(,R1)\n         ST    R15,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nVIOEXO   CLC   LRECL(2,R1),=H'0'\n         BNE   *+10\n         MVC   LRECL(2,R1),WIDTH\n         CLC   BLKSI(2,R1),=H'0'\n         BNER  R14\n         LH    R0,LRECL(,R1)\n         SLL   R0,4   LRECL TIMES 16\n         STH   R0,BLKSI(,R1)\n         BR    R14\n         SPACE\n***********************************************************************\n*                                                                     *\n*         CONSTANTS                                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\nMAXLINES DC    F'1000' MAXIMUM LINES THAT MAY BE CUT\nGMLIST   GETMAIN EC,MF=L\nCMD1     DC    C'MACRO (CUTP1,CUTP2,CUTP3,CUTP4) NOPROCESS'\nCMD2     DC    C'PROCESS RANGE C M'\nCMD3     DC    C'(CUTCM) = RANGE_CMD'\nCMD4     DC    C'(CUTZF) = LINENUM .ZFRANGE'\nCMD5     DC    C'(CUTZL) = LINENUM .ZLRANGE'\nCMD6     DC    C'(CUTDW) = DATA_WIDTH'\nCMD7     DC    C'(CUTLN) = LINE XXXXXX'\nCMD8     DC    C'(CUTBO) = LINENUM .ZLAST'\nCMD9     DC    C'DELETE XXXXXX XXXXXX'\nCMDA     DC    C'(CUTZF) = LINENUM .LABELXXX'\nCMDB     DC    C'(CUTZL) = LINENUM .LABELXXX'\nCMDC     DC    C'PROCESS'\n*\nMSG00    DC    A(L'MSG00A,L'MSG00B)\nMSG00A   DC    C'NNNNNN LINES CUT'\nMSG00B   DC    C'X RANGE XXXXXX XXXXXX WID DDNAMEXX OLD'\nMSG00L   EQU   *-MSG00\n*\nMSG01    DC    A(L'MSG01A,L'MSG01B)\nMSG01A   DC    C'INVALID PARAMETER XXXXXXXX'\nMSG01B   DC    C'BUFFER IDENTIFIER MUST BE 0-9 OR A-Z'\nMSG01L   EQU   *-MSG01\n*\nMSG02    DC    A(L'MSG02A,L'MSG02B)\nMSG02A   DC    C'INVALID PARAMETER XXXXXXXX'\nMSG02B   DC    C'ONLY ONE OPERAND MAY BE SPECIFIED'\nMSG02L   EQU   *-MSG02\n*\nMSG03    DC    A(L'MSG03A,L'MSG03B)\nMSG03A   DC    C'RANGE NOT SPECIFIED'\nMSG03B   DC    C'A \"C\" OR \"M\" LINE COMMAND HAS NOT BEEN SPECIFIED'\nMSG03L   EQU   *-MSG03\n*\nMSG04    DC    A(L'MSG04A,L'MSG04B)\nMSG04A   DC    C'TOO MANY LINES'\nMSG04B   DC    C'XXXXXX IS MORE THAN THE MAXIMUM OF 1000 LINES'\nMSG04L   EQU   *-MSG04\n*\nMSG05    DC    A(L'MSG05A,L'MSG05B)\nMSG05A   DC    C'ALLOCATION ERROR'\nMSG05B   DC    C'RC=XX ERROR=XXXX INFO=XXXX'\nMSG05L   EQU   *-MSG05\n*\nMSG06    DC    A(L'MSG06A,L'MSG06B)\nMSG06A   DC    C'ALLOCATION ERROR'\nMSG06B   DC    C'UNIT NAME VIO IS UNDEFINED'\nMSG06L   EQU   *-MSG06\n*\nMSG07    DC    A(L'MSG07A,L'MSG07B)\nMSG07A   DC    C'OPEN ERROR'\nMSG07B   DC    C'UNABLE TO OPEN TEMPORARY FILE'\nMSG07L   EQU   *-MSG07\n*\nMSG08    DC    A(L'MSG08A,L'MSG08B)\nMSG08A   DC    C'UNALLOCATE ERROR'\nMSG08B   DC    C'RC=XX ERROR=XXXX INFO=XXXX'\nMSG08L   EQU   *-MSG08\n*\nMSG09    DC    A(L'MSG09A,L'MSG09B)\nMSG09A   DC    C'NO LINES TO CUT'\nMSG09B   DC    C'THERE ARE NO LINES TO CUT'\nMSG09L   EQU   *-MSG09\n*\nMSG11    DC    A(L'MSG11A,L'MSG11B)\nMSG11A   DC    C'LABEL ERROR'\nMSG11B   DC    C'.LABELXXX IS NOT A LABEL'\nMSG11L   EQU   *-MSG11\n*\nMSG12    DC    A(L'MSG12A,L'MSG12B)\nMSG12A   DC    C'VERSION 1.0'\nMSG12B   DC    X'C0E040C0C0D0D040C0D0C0C0D0C0E0'\nMSG12L   EQU   *-MSG12\nMSG12C   DC    X'020800020903030007060406090508'\n*\nPAD      EQU   0  WHENEVER THIS IS REFERENCED, IT'S JUST FOR ALIGNMENT\nP99RB    DC    0F'0',AL1(20,1),X'A000',A(0,0,0,0)\nP99RTDDN DC    0H'0',X'0055',H'1,8',CL8' '\nP99DSNAM DC    0H'0',X'0002',H'1,5',CL5'&&CUT '\nP99STATS DC    0H'0',X'0004',H'1,1',X'01',AL1(PAD) OLD=1 NEW=4\nP99NDISP DC    0H'0',X'0005',H'1,1',X'04',AL1(PAD) DELETE=4\nP99PERMA DC    0H'0',X'0052',H'0'\nP99CNVRT DC    0H'0',X'0053',H'0'\nN99STATS DC    0H'0',X'0004',H'1,1',X'04',AL1(PAD) OLD=1 NEW=4\nN99UNIT  DC    0H'0',X'0015',H'1,8',CL8'VIO'\nN99TRK   DC    0H'0',X'0007',H'0'\nN99PRIME DC    0H'0',X'000A',H'1,3',AL3(8),AL1(PAD) 8 TRACKS\nU99RB    DC    0F'0',AL1(20,2),X'0000',A(0,0,0,0)\nU99DDNAM DC    0H'0',X'0001',H'1,8',CL8' '\nU99REMOV DC    0H'0',X'0008',H'0'\nHEXTAB   DC    C'0123456789ABCDEF'\n         DC    0D'0'\nCAPS     DC    129AL1(*-CAPS)      00-80\n         DC    9AL1(*-CAPS+X'40')  81-89 BECOME C1-C9\n         DC    7AL1(*-CAPS)        8A-90\n         DC    9AL1(*-CAPS+X'40')  91-99 BECOME D1-D9\n         DC    8AL1(*-CAPS)        9A-A1\n         DC    8AL1(*-CAPS+X'40')  A2-A9 BECOME E2-E9\n         DC    86AL1(*-CAPS)       AA-FF\n         SPACE\n         PRINT NOGEN\n         SPACE\nVIODCB   DCB   DDNAME=CUTPASTE,DSORG=PS,MACRF=(PM),RECFM=FB,BUFNO=2\nVIODCBL  EQU   *-VIODCB\n         SPACE\n         PRINT GEN\n         DC    0D'0'\n***********************************************************************\n*                                                                     *\n*         WORKSPACE                                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\n@DATA    DSECT\nSAVE     DS    18F\nDOUBLE   DS    D\nOPEN     DS    F\nCLOSE    DS    F\nVIODCBW  DS    0F,(VIODCBL)X\nVIOEXL   DS    F\nISPLINKA DS    F\nPARAMS   DS    5F\nSERVICE  DS    CL8\nLENGTH   DS    F\nVDEFFMT  DS    CL8\nVDEFLEN  DS    F\nVDEFNAME DS    CL10\nCUTP1    DS    CL80\nCUTP2    DS    CL80\nCUTP3    DS    CL80\nCUTP4    DS    CL80\nCUTCM    DS    CL8\nCUTZF    DS    CL6\nCUTZL    DS    CL6\nCUTDW    DS    CL3\nCUTBO    DS    CL6\nNUMBER   DS    CL6\nHOWMANY  DS    CL8\nWIDTH    DS    H\nOLDNEW   DS    CL3\nZERRMSL  DS    F\nZERRMSG  DS    CL8\nLABEL1   DS    CL9\nLABEL2   DS    CL9\nLABELW   DS    CL9\n         DS    0F                 ALIGN LINE\n         DS    CL3\nLINEM1   DS    C                  LINE-1\nLINE     DS    CL133\nCUTLN    DS    CL256\nW99RBPTR DS    F\nW99RB    DS    5F\nW99TUPL  DS    9F\nW99RTDDN DS    3H,CL8\nW99DDNAM DS    3H,CL8\nW99DSNAM DS    3H,CL5\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nEODAD    EQU   32  OFFSET INTO DCB\nEXLST    EQU   32  OFFSET INTO DCB\nDDNAM    EQU   40  OFFSET INTO DCB\nOFLGS    EQU   48  OFFSET INTO DCB\nMACR     EQU   50  OFFSET INTO DCB\nBLKSI    EQU   62  OFFSET INTO DCB\nLRECL    EQU   82  OFFSET INTO DCB\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CUTL02": {"ttr": 4357, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x03f\\x03f\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 870, "newlines": 870, "modlines": 0, "user": "BG@PRC"}, "text": "         TITLE '   P A S T E   '\n***********************************************************************\n*                                                                     *\n*        'PASTE' - ISPF EDIT MACRO                                    *\n*                                                                     *\n***********************************************************************\n         SPACE\n* WRITTEN BY BILL GODFREY, PRC INC.\n*  (PRC INC. OF MCLEAN, VIRGINIA, WAS FORMERLY PLANNING RESEARCH CORP.)\n* CURRENT INSTALLATION:\n*  NOAA (NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION),\n*  5200 AUTH ROAD, CAMP SPRINGS, MARYLAND 20746\n* DATE-WRITTEN: AUGUST 7 1990.\n* DATE-UPDATED: APRIL 25 1991.\n* ATTRIBUTES. RE-ENTRANT.\n* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.\n* DESCRIPTION.\n*  THIS ISPF EDIT MACRO COPIES ONE OR MORE LINES FROM TEMPORARY FILES\n*  CREATED BY THE 'CUT' MACRO TO THE DATA SET BEING EDITED.\n*\n*  UP TO 9 DIFFERENT 'CUT' BUFFERS CAN CO-EXIST. THE DEFAULT BUFFER\n*  (1) IS USED IF NO PARAMETER IS SPECIFIED.  THE USER CAN SPECIFY ANY\n*  OF THE 9 BUFFER LEVELS AS THE PARAMETER.\n*\n*  EACH BUFFER IS ACTUALLY A TEMPORARY DATA SET NAMED '&CUTX'\n*  WHERE X HAS A VALUE RANGING FROM 1 TO 9.\n*\n*  NOTE THAT CUTP1 THRU CUTP4 ARE 80 BYTES LONG SO WE CAN HANDLE\n*  ALMOST ANYTHING THAT THE USER ENTERS.  CUTP4 WILL CONTAIN\n*  ANY REMAINING PARAMETERS AFTER THE FIRST THREE, AND IS ONLY USED\n*  TO CHECK THAT NO 4TH OPERAND IS ENTERED.\n*\n*  THERE SHOULD BE A CLIST IN SYSPROC NAMED 'PASTE' THAT CONTAINS:\n*      ISREDIT MACRO (P1 P2 P3) NOPROCESS\n*      ISREDIT !PASTE &P1 &P2 &P3\n*  SEE THE COMMENTS IN THE SOURCE CODE FOR 'CUT' ABOUT THIS CLIST.\n*\n* LOG OF CHANGES.\n*  18OCT90 - ADD VERSION TO @PROLOG. FIX MSG12L.\n*  25APR91 - NO CODE CHANGES. MINOR COMMENT CHANGES.\n*\n         SPACE\nPASTE    CSECT\n         USING *,R8\n@ORIGIN  B     @PROLOG-*(,R15)\n         DC    AL1(5),CL11'PASTE 1.0  '\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(0),AL3(@DATAL)\n@PROLOG  STM   14,8,12(13)         SAVE REGS\n         LR    R8,15               BASE REGISTER\n         LR    R2,R1               PARM POINTER\n         LA    R3,68(,R13)         POINT TO 18TH WORD OF SAVE AREA\n         LA    R1,56(,R13)         POINT TO 15TH WORD OF SAVE AREA\n         MVC   0(10,R1),GMLIST\n         L     R0,@SIZE\n         GETMAIN EC,LV=(0),A=(R3),MF=(E,(1))\n         LTR   R15,R15             IF GETMAIN WAS NOT SUCCESSFUL\n         BZ    GOTMAIN                THEN\n         LM    14,8,12(13)            RESTORE REGS\n         LA    R15,12                 SET RC = 12\n         BR    R14                    RETURN\nGOTMAIN  L     R3,68(,R13)         GET ADDRESS RETURNED BY GETMAIN\n         STM   9,12,56(R13)        SAVE REMAINING REGISTERS\n         DROP  R8\n         LR    R10,R8\n         USING @ORIGIN,R10\n         SPACE\n         LR    R0,R3               AREA TO BE CLEARED\n         L     R1,@SIZE            LENGTH TO BE CLEARED\n         SLR   R15,R15             ZERO PAD AND 'FROM' LENGTH\n         MVCL  R0,R14              CLEAR GETMAINED AREA\n         SPACE\n         ST    R3,8(,R13)          PUT NEW ADDRESS IN OLD SAVE AREA\n         ST    R13,4(,R3)          PUT OLD ADDRESS IN NEW SAVE AREA\n         LR    R13,R3              SWITCH TO NEW SAVEAREA\n         USING @DATA,R13\n         SPACE\n         LOAD  EP=ISPLINK,ERRET=EXIT12\n         ST    R0,ISPLINKA\n         SPACE\n***********************************************************************\n*                                                                     *\n*         DEFINE VARIABLES                                            *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTP1)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTP1\n         LA    R0,L'CUTP1\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTP2)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTP2\n         LA    R0,L'CUTP2\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTP3)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTP3\n         LA    R0,L'CUTP3\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTP4)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTP4\n         LA    R0,L'CUTP4\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTBO)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTBO\n         LA    R0,L'CUTBO\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTIP)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTIP\n         LA    R0,L'CUTIP\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTDW)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTDW\n         LA    R0,L'CUTDW\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTLN)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTLN\n         LA    R0,256\n         BAL   R8,VDEFINE\n         SPACE\n***********************************************************************\n*                                                                     *\n*         IDENTIFY THIS AS AN EDIT MACRO, GET PARAMETER               *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,CMD1             ISREDIT MACRO (CUTP1) NOPROCESS\n         LA    R0,L'CMD1\n         BAL   R8,ISREDIT\n         SPACE\n         TR    CUTP1,CAPS\n         CLC   CUTP1(4),=C'AFT '\n         BE    ABSP1\n         CLC   CUTP1(4),=C'BEF '\n         BE    ABSP1\n         CLC   CUTP1(5),=C'AFTER '\n         BE    ABSP1\n         CLC   CUTP1(6),=C'BEFORE '\n         BNE   P1ID                   THEN\nABSP1    MVC   CUTP4,CUTP3            SHIFT 3RD TO 4TH\n         MVC   CUTP3,CUTP2            SHIFT 2ND TO 3RD\n         MVC   CUTP2,CUTP1            SHIFT 1ST TO 2ND\n         MVI   CUTP1,C' '             BLANK 1ST\n         MVC   CUTP1+1(79),CUTP1      BLANK 1ST\nP1ID     CLI   CUTP1+1,C' '        IF 1ST OPERAND LONGER THAN 1 CHAR\n         BNE   ERR01                  ERROR\n         CLI   CUTP1,C' '          IF NO OPERAND\n         BNE   P1NB                   THEN\n         MVI   CUTP1,C'1'             DEFAULT IS 1\nP1NB     CLI   CUTP1,C'?'          HELP\n         BE    HELP\n         CLI   CUTP1,C':'          COLON\n         BE    ERR14\n         OI    CUTP1,X'40'         CAPS\n         CLI   CUTP1,C'1'\n         BL    ERR01\n         CLI   CUTP1,C'9'\n         BH    ERR01\n         SPACE\n***********************************************************************\n*                                                                     *\n*         IF 'BEFORE' OR 'AFTER' SPECIFIED, INTERPRET LABEL           *\n*                                                                     *\n***********************************************************************\n         SPACE\n         BAL   R8,CER\n         MVC   CUTPW,CUTP2         SAVE FOR ERR02\n         TR    CUTP2,CAPS\n         CLI   CUTP2,C' '\n         BE    NOLABS\n         CLC   CUTP2(4),=C'AFT '\n         BE    OKP2\n         CLC   CUTP2(4),=C'BEF '\n         BE    OKP2\n         CLC   CUTP2(5),=C'AFTER '\n         BE    OKP2\n         CLC   CUTP2(6),=C'BEFORE '\n         BNE   ERR02\nOKP2     CLI   CUTP3,C' '          IF NOTHING FOLLOWS 'BEF' OR 'AFT'\n         BE    ERR12                  ERROR\n         TR    CUTP3,CAPS\n         LA    R1,CUTP3\n         LA    R15,LABEL1\n         MVC   0(10,R15),=CL10' '\n         LA    R0,9\nMOVLAB2  CLI   0(R1),C' '\n         BE    GOTLAB2\n         CLI   0(R1),0\n         BE    GOTLAB2\n         MVC   0(1,R15),0(R1)\n         LA    R1,1(,R1)\n         LA    R15,1(,R15)\n         BCT   R0,MOVLAB2\n         MVC   0(1,R15),0(R1)      COPY TRAILING BLANK\n         CLI   0(R1),C' '\n         BNE   ERR11               LABEL TOO LONG\nGOTLAB2  EQU   *\n         CLI   LABEL1,C'.'\n         BNE   ERR11\n         LA    R1,CMDB             ISREDIT (CUTIP) = LINENUM .LABELXXX\n         LA    R0,L'CMDB\n         MVC   LINE(L'CMDB),0(R1)\n         MVC   LINE+18(9),LABEL1\n         LA    R1,LINE\n         BAL   R8,ISREDIT\n         LTR   R15,R15\n         BNZ   ERR11\n         SPACE\n         LA    R1,CMDC             ISREDIT PROCESS\n         LA    R0,L'CMDC            (NEITHER DEST NOR RANGE)\n         BAL   R8,ISREDIT           (JUST TO ENSURE NO LINE CMDS)\n         SPACE\n         LTR   R15,R15             IF RC = 0\n         BZ    OKLABS                 THERE WERE NO LINE CMDS\n         C     R15,=F'16'          IF COMMAND CONFLICT\n         BE    ERR10                SHOW ZERRMSG\n         B     EXIT0               OTHERWISE DONT DO ANYTHING FOR NOW\nOKLABS   BAL   R8,CEC\n         CLI   CUTP2,C'B'          IF BEFORE\n         BNE   HAVIP                  THEN\n         PACK  DOUBLE,CUTIP           REDUCE INSERTION POINT\n         CVB   R1,DOUBLE\n         LTR   R1,R1                  UNLESS\n         BZ    ALR0                    IT IS ZERO\n         BCTR  R1,0\nALR0     CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  CUTIP(6),DOUBLE+4(4)\n         B     HAVIP\n         SPACE\n***********************************************************************\n*                                                                     *\n*         PROCESS THE LINE COMMAND(S)                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\nNOLABS   LA    R1,CMD6             ISREDIT (CUTBO) = LINENUM .ZLAST\n         LA    R0,L'CMD6\n         BAL   R8,ISREDIT\n         SPACE\n         BAL   R8,CER\n         SPACE\n         LA    R1,CMD2             ISREDIT PROCESS DEST\n         LA    R0,L'CMD2\n         BAL   R8,ISREDIT\n         SPACE\n         LTR   R15,R15\n         BZ    OKLINEC\n         SPACE\n         C     R15,=F'20'          IF RC EQ 20\n         BE    CHKEMPTY               MAY BE EMPTY\n         C     R15,=F'16'          IF RC EQ 16\n         BE    ERR10                  COMMAND CONFLICT\n         C     R15,=F'8'           IF RC NE 8\n         BNE   EXIT0                  ISPF WILL ISSUE ITS OWN MESSAGE\n         B     ERR03               NO LINE COMMAND SPECIFIED\nCHKEMPTY CLC   CUTBO,=C'000000'    IF NOT EMPTY\n         BNE   EXIT0                  ISPF WILL ISSUE ITS OWN MESSAGE\n         MVC   CUTIP,CUTBO         EMPTY DATA SET\n         B     HAVIP                  SO USE 000000 AS INSERTION POINT\n         SPACE\n***********************************************************************\n*                                                                     *\n*         GET THE INSERTION POINT                                     *\n*                                                                     *\n***********************************************************************\n         SPACE\nOKLINEC  EQU   *\n         LA    R1,CMD3             ISREDIT (CUTIP) = LINENUM .ZDEST\n         LA    R0,L'CMD3\n         BAL   R8,ISREDIT\n         SPACE\nHAVIP    BAL   R8,CEC\n         SPACE\n         LA    R1,CMD4             ISREDIT (CUTDW) = DATA_WIDTH\n         LA    R0,L'CMD4\n         BAL   R8,ISREDIT\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ALLOCATE THE CUT BUFFER AS AN OLD TEMPORARY DATA SET        *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,W99RBPTR\n         LA    R15,W99RB\n         ST    R15,0(,R1)\n         OI    0(R1),X'80'\n         MVC   W99RB(20),P99RB\n         LA    R14,W99TUPL\n         ST    R14,8(,R15)\n         LA    R1,W99RTDDN\n         ST    R1,0(,R14)\n         MVC   0(14,R1),P99RTDDN\n         LA    R1,W99DSNAM\n         ST    R1,4(,R14)\n         MVC   0(11,R1),P99DSNAM\n         MVC   10(1,R1),CUTP1      APPEND PARM TO DSN\n         LA    R1,P99STATS\n         ST    R1,8(,R14)\n         LA    R1,P99NDISP\n         ST    R1,12(,R14)\n         LA    R1,P99PERMA\n         ST    R1,16(,R14)\n         LA    R1,P99CNVRT\n         ST    R1,20(,R14)\n         OI    20(R14),X'80'\n         LA    R1,W99RBPTR\n         SVC   99\n         LTR   R15,R15\n         BZ    OKALLOC\n         C     R15,=F'4'\n         BNE   ERR05\n         CLC   W99RB+4(2),=X'1708'\n         BNE   ERR05\n         B     ERR06\nOKALLOC  EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         OPEN THE TEMPORARY DATA SET                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVI   OPEN,X'80'\n         MVI   CLOSE,X'80'\n         SPACE\n         LA    R3,VIODCBW\n         MVC   0(VIODCBL,R3),VIODCB\n         MVC   DDNAM(8,R3),W99RTDDN+6\n         LA    R1,EOF              SET EODAD=EOF    IN DCB\n         STCM  R1,7,EODAD+1(R3)\n         LA    R1,VIOEXL           SET EXLST=VIOEXL IN DCB\n*        STCM  R1,7,EXLST+1(R3)\n*        LA    R0,VIOEXO\n*        ST    R0,VIOEXL\n*        MVI   VIOEXL,X'85'\n         OPEN  ((R3),INPUT),MF=(E,OPEN)\n         TM    48(R3),X'10'\n         BNO   ERR07\n         SPACE\n***********************************************************************\n*                                                                     *\n*         COPY THE TEMPORARY FILE TO THE EDIT DATA SET                *\n*                                                                     *\n***********************************************************************\n         SPACE\n         SR    R5,R5\n         PACK  DOUBLE,CUTIP\n         CVB   R4,DOUBLE\n         MVI   CUTLN,C' '          PAD WITH BLANKS\n         MVC   CUTLN+1(255),CUTLN  FOR DATA CUT AS 72 AND PASTED AS 80\n         SPACE\nLOOP     GET   (R3),CUTLN\n         CVD   R4,DOUBLE\n         UNPK  NUMBER(6),DOUBLE+4(4)\n         OI    NUMBER+5,X'F0'\n         LA    R1,CMD5             LINE_AFTER XXXXXX = DATALINE (CUTLN)\n         LA    R0,L'CMD5\n         MVC   LINE(L'CMD5),0(R1)\n         MVC   LINE+11(6),NUMBER\n         LA    R1,LINE\n         BAL   R8,ISREDIT\n         SPACE\n         A     R4,=F'1'\n         A     R5,=F'1'\n         B     LOOP\n         SPACE\n***********************************************************************\n*                                                                     *\n*         CLOSE AND ISSUE COMPLETION MESSAGE                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nEOF      LA    R3,VIODCBW\n         CLOSE ((R3)),MF=(E,CLOSE)\n         BAL   R8,UNALLO           REMOVE IN-USE FLAG\n         LTR   R15,R15\n         BNZ   ERR08\n         CVD   R5,DOUBLE\n         MVC   HOWMANY,=X'4020202020202120'\n         ED    HOWMANY,DOUBLE+4\n         LA    R1,LINE\n         MVC   0(MSG00L,R1),MSG00\n         MVC   8(6,R1),HOWMANY+2\n         CLC   HOWMANY+6(2),=C' 1' IF ONE LINE\n         BNE   *+10                   THEN\n         MVC   15(12,R1),=C'LINE PASTED ' CHANGE PLURAL TO SINGULAR\n         A     R1,MSG00            POINT TO 2ND MESSAGE\n         LA    R1,8(,R1)           POINT TO 2ND MESSAGE\n         MVC   6(6,R1),CUTIP\n         MVC   13(3,R1),CUTDW\n         MVC   17(8,R1),W99RTDDN+6\n*               ELIMINATE LEADING BLANKS FROM FINAL MESSAGE\n         L     R1,LINE             GET LENGTH OF 1ST MESSAGE\n         A     R1,LINE+4           GET LENGTH OF BOTH MSGS\n         LR    R14,R1\n         BCTR  R14,0               GET LENGTH MINUS 1\n         BCTR  R14,0               GET LENGTH MINUS 2\n         LA    R15,LINE+8          POINT TO 1ST MESSAGE\nSHIFTL   CLI   0(R15),C' '\n         BNE   SHIFTED\n         EX    R14,SHIFTM          SHIFT MESSAGES LEFT\n         BCTR  R1,0                REDUCE LENGTH\n         B     SHIFTL\nSHIFTM   MVC   LINE+8(0),LINE+9    (EXECUTED)\nSHIFTED  S     R1,LINE+4           COMPUTE NEW LENGTH OF 1ST MSG\n         ST    R1,LINE             STORE NEW LENGTH\n*               LEADING BLANKS HAVE BEEN ELIMINATED\n         LA    R1,LINE\n         BAL   R8,ZEDSMSG          SET ZEDSMSG = &STR(IT WORKED)\n         SPACE\n         BAL   R8,SETMSG0          ISPEXEC SETMSG MSG(ISRZ000)\nEXIT0    SR    R15,R15\nEXIT     LR    R2,R15\n         L     R15,ISPLINKA\n         LTR   R15,R15\n         BZ    EXITNOD\n         DELETE EP=ISPLINK\nEXITNOD  EQU   *\n         LR    R1,R13\n         L     R0,@SIZE\n         L     R13,4(,R13)\n         FREEMAIN R,LV=(0),A=(1)\n         LR    R15,R2\n         LM    0,12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\nEXIT12   LA    R15,12\n         B     EXIT\n         SPACE\n***********************************************************************\n*                                                                     *\n*         SUBROUTINES                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n*               REMOVE THE IN-USE FLAG SO THAT SUBSEQUENT ALLOCATIONS\n*               (BY CUT AND PASTE) DO NOT GENERATE ADDITIONAL DDNAMES\n*               AND EVENTUALLY FILL UP THE TIOT.\n         SPACE\nUNALLO   LA    R15,W99RB\n         MVC   W99RB(20),U99RB\n         LA    R14,W99TUPL\n         ST    R14,8(,R15)\n         LA    R1,W99DDNAM\n         ST    R1,0(,R14)\n         MVC   0(6,R1),U99DDNAM\n         MVC   6(8,R1),W99RTDDN+6\n         LA    R1,U99REMOV\n         ST    R1,4(,R14)\n         OI    04(R14),X'80'\n         LA    R1,W99RBPTR\n         SVC   99\n         BR    R8\n         SPACE\nERR01    LA    R1,LINE\n         MVC   0(MSG01L,R1),MSG01\n         MVC   26(8,R1),CUTP1      COPY 1ST 8 BYTES OF 1ST PARM\nERR01J   BAL   R8,ZEDSMSG          SET ZEDSMSG = &STR(WHATEVER)\n         BAL   R8,SETMSG1          ISPEXEC SETMSG MSG(ISRZ001)\n         B     EXIT0\n         SPACE\nERR02    LA    R1,LINE\n         MVC   0(MSG02L,R1),MSG02\n         MVC   26(8,R1),CUTPW      COPY 1ST 8 BYTES OF PARM\n         B     ERR01J              SET ZEDSMSG = &STR(INVALID PARM)\n         SPACE\nERR03    LA    R1,LINE\n         MVC   0(MSG03L,R1),MSG03\n         B     ERR01J              SET ZEDSMSG = &STR(NO LINE CMD)\n         SPACE\nERR04    LA    R1,LINE\n         MVC   0(MSG04L,R1),MSG04\n         A     R1,MSG04\n         LA    R1,8(,R1)\n         MVC   0(6,R1),HOWMANY+2\n         LA    R1,LINE\n         BAL   R8,ZEDSMSG          SET ZEDSMSG = &STR(TOO MANY LINES)\n         SPACE\n         BAL   R8,SETMSG1          ISPEXEC SETMSG MSG(ISRZ001)\n         B     EXIT0\n         SPACE\nERR05    LA    R1,LINE\n         MVC   0(MSG05L,R1),MSG05\nERR05J   A     R1,LINE\n         LA    R1,8(,R1)\n         CVD   R15,DOUBLE          RETURN CODE FROM SVC 99\n         OI    DOUBLE+7,X'0F'\n         UNPK  3(2,R1),DOUBLE+6(2)\n         UNPK  DOUBLE(5),W99RB+4(3) ERROR CODE FROM SVC 99\n         TR    DOUBLE(4),HEXTAB-240\n         MVC   12(4,R1),DOUBLE\n         UNPK  DOUBLE(5),W99RB+6(3) INFO  CODE FROM SVC 99\n         TR    DOUBLE(4),HEXTAB-240\n         MVC   22(4,R1),DOUBLE\n         LA    R1,LINE\n         B     ERR01J              SET ZEDSMSG = &STR(ALLOC ERROR)\n         SPACE\nERR06    LA    R1,LINE\n         MVC   0(MSG06L,R1),MSG06\n         B     ERR01J              SET ZEDSMSG = &STR(NOT FOUND)\n         SPACE\nERR07    LA    R1,LINE\n         MVC   0(MSG07L,R1),MSG07\n         B     ERR01J              SET ZEDSMSG = &STR(OPEN ERROR)\n         SPACE\nERR08    LA    R1,LINE\n         MVC   0(MSG08L,R1),MSG08\n         B     ERR05J              SET ZEDSMSG = &STR(UNALLOC ERROR)\n         SPACE\nERR09    LA    R1,LINE\n         MVC   0(MSG09L,R1),MSG09\n         A     R1,LINE\n         LA    R1,8(,R1)\n         CVD   R15,DOUBLE          RETURN CODE FROM PROCESS\n         OI    DOUBLE+7,X'0F'\n         UNPK  3(2,R1),DOUBLE+6(2)\n         MVC   6(6,R1),CUTBO\n         LA    R1,LINE\n         B     ERR01J              SET ZEDSMSG = &STR(EMPTY FILE)\n         SPACE\nERR10    BAL   R8,GETZERR\n         BAL   R8,SETMSGZ          ISPEXEC SETMSG MSG(&ZERRMSG)\n         B     EXIT12\n         SPACE\nERR11    LA    R1,LINE\n         MVC   0(MSG11L,R1),MSG11\n         A     R1,MSG11\n         LA    R1,8(,R1)\n         MVC   0(10,R1),LABEL1\n         LA    R1,LINE\n         B     ERR01J              SET ZEDSMSG = &STR(LABEL ERROR)\n         SPACE\nERR12    LA    R1,LINE\n         MVC   0(MSG12L,R1),MSG12\n         B     ERR01J              SET ZEDSMSG = &STR(OPEN ERROR)\n         SPACE\nERR14    LA    R1,LINE\n         MVC   0(MSG14L,R1),MSG14\n         OC    8+L'MSG14A(L'MSG14B,R1),MSG14C\n         B     ERR01J              SET ZEDSMSG = &STR(VERSION 1.0)\n         SPACE\nVDEFINE  LR    R15,R1              SAVE ADDRESS\n         ST    R0,VDEFLEN          STORE LENGTH\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'VDEFINE '\n         ST    R0,0(,R1)\n         LA    R0,VDEFNAME\n         ST    R0,4(,R1)\n         ST    R15,8(,R1)          STORE ADDRESS\n         LA    R0,VDEFFMT\n         ST    R0,12(,R1)\n         LA    R0,VDEFLEN\n         ST    R0,16(,R1)\n         OI    16(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nGETZERR  LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'VCOPY '\n         ST    R0,0(,R1)\n         LA    R0,=CL10'(ZERRMSG)'\n         ST    R0,4(,R1)\n         LA    R0,ZERRMSL\n         MVC   ZERRMSL,=F'8'\n         ST    R0,8(,R1)\n         LA    R0,ZERRMSG\n         ST    R0,12(,R1)\n         LA    R0,=CL7'MOVE'\n         ST    R0,16(,R1)\n         OI    16(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nZEDSMSG  LR    R15,R1              SAVE ADDRESS\n         ST    R0,VDEFLEN          STORE LENGTH\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'VREPLACE'\n         ST    R0,0(,R1)\n         LA    R0,=CL17'(ZEDSMSG ZEDLMSG)'\n         ST    R0,4(,R1)\n         ST    R15,8(,R1)          LENGTHS\n         LA    R15,8(,R15)\n         ST    R15,12(,R1)         VALUES\n         OI    12(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nSETMSGZ  LA    R1,ZERRMSG\n         B     SETMSG\nSETMSG0  LA    R1,=CL8'ISRZ000 '   ALARM=N0\n         B     SETMSG\nSETMSG1  LA    R1,=CL8'ISRZ001 '   ALARM=YES\nSETMSG   LR    R15,R1              SAVE ADDRESS OF 'ISRZ001'\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'SETMSG'\n         ST    R0,0(,R1)\n         ST    R15,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nCER      LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'CONTROL'\n         ST    R0,0(,R1)\n         LA    R0,=CL8'ERRORS'\n         ST    R0,4(,R1)\n         LA    R0,=CL8'RETURN'\n         ST    R0,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nCEC      LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'CONTROL'\n         ST    R0,0(,R1)\n         LA    R0,=CL8'ERRORS'\n         ST    R0,4(,R1)\n         LA    R0,=CL8'CANCEL '\n         ST    R0,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nHELP     BAL   R8,CER\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'DISPLAY'\n         ST    R0,0(,R1)\n         LA    R0,=CL8'CUTH02'\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         B     EXIT0\n         SPACE\nISREDIT  LR    R15,R1\n         ST    R0,LENGTH\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'ISREDIT '\n         ST    R0,0(,R1)\n         LA    R0,LENGTH\n         ST    R0,4(,R1)\n         ST    R15,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nVIOEXO   CLC   LRECL(2,R1),=H'0'\n         BNE   *+10\n         MVC   LRECL(2,R1),WIDTH\n         CLC   BLKSI(2,R1),=H'0'\n         BNER  R14\n         LH    R0,LRECL(,R1)\n         SLL   R0,4   LRECL TIMES 16\n         STH   R0,BLKSI(,R1)\n         BR    R14\n         SPACE\n***********************************************************************\n*                                                                     *\n*         CONSTANTS                                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\nGMLIST   GETMAIN EC,MF=L\nCMD1     DC    C'MACRO (CUTP1,CUTP2,CUTP3,CUTP4) NOPROCESS'\nCMD2     DC    C'PROCESS DEST'\nCMD3     DC    C'(CUTIP) = LINENUM .ZDEST'\nCMD4     DC    C'(CUTDW) = DATA_WIDTH'\nCMD5     DC    C'LINE_AFTER XXXXXX = DATALINE (CUTLN)'\nCMD6     DC    C'(CUTBO) = LINENUM .ZLAST'\nCMDB     DC    C'(CUTIP) = LINENUM .LABELXXX'\nCMDC     DC    C'PROCESS'\n*\nMSG00    DC    A(L'MSG00A,L'MSG00B)\nMSG00A   DC    C'NNNNNN LINES PASTED'\nMSG00B   DC    C'AFTER XXXXXX WID DDNAMEXX'\nMSG00L   EQU   *-MSG00\n*\nMSG01    DC    A(L'MSG01A,L'MSG01B)\nMSG01A   DC    C'INVALID PARAMETER XXXXXXXX'\nMSG01B   DC    C'EXPECTING LEVEL OR \"AFTER\" OR \"BEFORE\"'\nMSG01L   EQU   *-MSG01\n*\nMSG02    DC    A(L'MSG02A,L'MSG02B)\nMSG02A   DC    C'INVALID PARAMETER XXXXXXXX'\nMSG02B   DC    C'EXPECTING \"AFTER\" OR \"BEFORE\"'\nMSG02L   EQU   *-MSG02\n*\nMSG03    DC    A(L'MSG03A,L'MSG03B)\nMSG03A   DC    C'LINE COMMAND MISSING'\nMSG03B   DC    C'AN \"A\" OR \"B\" LINE COMMAND HAS NOT BEEN SPECIFIED'\nMSG03L   EQU   *-MSG03\n*\nMSG04    DC    A(L'MSG04A,L'MSG04B)\nMSG04A   DC    C'TOO MANY LINES'\nMSG04B   DC    C'XXXXXX IS MORE THAN THE MAXIMUM OF 1000 LINES'\nMSG04L   EQU   *-MSG04\n*\nMSG05    DC    A(L'MSG05A,L'MSG05B)\nMSG05A   DC    C'ALLOCATION ERROR'\nMSG05B   DC    C'RC=XX ERROR=XXXX INFO=XXXX'\nMSG05L   EQU   *-MSG05\n*\nMSG06    DC    A(L'MSG06A,L'MSG06B)\nMSG06A   DC    C'NOTHING WAS CUT'\nMSG06B   DC    C'CANNOT FIND CUT BUFFER'\nMSG06L   EQU   *-MSG06\n*\nMSG07    DC    A(L'MSG07A,L'MSG07B)\nMSG07A   DC    C'OPEN ERROR'\nMSG07B   DC    C'UNABLE TO OPEN TEMPORARY FILE'\nMSG07L   EQU   *-MSG07\n*\nMSG08    DC    A(L'MSG08A,L'MSG08B)\nMSG08A   DC    C'UNALLOCATE ERROR'\nMSG08B   DC    C'RC=XX ERROR=XXXX INFO=XXXX'\nMSG08L   EQU   *-MSG08\n*\nMSG09    DC    A(L'MSG09A,L'MSG09B)\nMSG09A   DC    C'UNEXPECTED ERROR'\nMSG09B   DC    C'RC=XX XXXXXX'\nMSG09L   EQU   *-MSG09\n*\nMSG11    DC    A(L'MSG11A,L'MSG11B)\nMSG11A   DC    C'LABEL ERROR'\nMSG11B   DC    C'.LABELXXX  IS NOT A LABEL'\nMSG11L   EQU   *-MSG11\n*\nMSG12    DC    A(L'MSG12A,L'MSG12B)\nMSG12A   DC    C'MISSING LABEL'\nMSG12B   DC    C'LABEL EXPECTED FOLLOWING \"BEFORE\" OR \"AFTER\"'\nMSG12L   EQU   *-MSG12\n*\nMSG14    DC    A(L'MSG14A,L'MSG14B)\nMSG14A   DC    C'VERSION 1.0'\nMSG14B   DC    X'C0E040C0C0D0D040C0D0C0C0D0C0E0'\nMSG14L   EQU   *-MSG14\nMSG14C   DC    X'020800020903030007060406090508'\n*\nP99RB    DC    0F'0',AL1(20,1),X'A000',A(0,0,0,0)\nP99RTDDN DC    0H'0',X'0055',H'1,8',CL8' '\nP99DSNAM DC    0H'0',X'0002',H'1,5',CL5'&&CUT '\nP99STATS DC    0H'0',X'0004',H'1,1',X'01',X'00' OLD=1 NEW=4 LAST=PAD\nP99NDISP DC    0H'0',X'0005',H'1,1',X'04',X'00' DELETE=4\nP99PERMA DC    0H'0',X'0052',H'0'\nP99CNVRT DC    0H'0',X'0053',H'0'\nU99RB    DC    0F'0',AL1(20,2),X'0000',A(0,0,0,0)\nU99DDNAM DC    0H'0',X'0001',H'1,8',CL8' '\nU99REMOV DC    0H'0',X'0008',H'0'\nHEXTAB   DC    C'0123456789ABCDEF'\n         DC    0D'0'\nCAPS     DC    129AL1(*-CAPS)      00-80\n         DC    9AL1(*-CAPS+X'40')  81-89 BECOME C1-C9\n         DC    7AL1(*-CAPS)        8A-90\n         DC    9AL1(*-CAPS+X'40')  91-99 BECOME D1-D9\n         DC    8AL1(*-CAPS)        9A-A1\n         DC    8AL1(*-CAPS+X'40')  A2-A9 BECOME E2-E9\n         DC    86AL1(*-CAPS)       AA-FF\n         PRINT NOGEN\n         SPACE\nVIODCB   DCB   DDNAME=CUTPASTE,DSORG=PS,MACRF=(GM),RECFM=FB,BUFNO=2\nVIODCBL  EQU   *-VIODCB\n         SPACE\n         PRINT GEN\n         DC    0D'0'\n***********************************************************************\n*                                                                     *\n*         WORKSPACE                                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\n@DATA    DSECT\nSAVE     DS    18F\nDOUBLE   DS    D\nOPEN     DS    F\nCLOSE    DS    F\nVIODCBW  DS    0F,(VIODCBL)X\nVIOEXL   DS    F\nISPLINKA DS    F\nPARAMS   DS    5F\nSERVICE  DS    CL8\nLENGTH   DS    F\nVCOPYLEN DS    F\nVDEFFMT  DS    CL8\nVDEFLEN  DS    F\nVDEFNAME DS    CL10\nCUTPW    DS    CL8\nCUTP1    DS    CL80\nCUTP2    DS    CL80\nCUTP3    DS    CL80\nCUTP4    DS    CL80\nCUTBO    DS    CL6\nCUTIP    DS    CL6\nCUTDW    DS    CL3\nNUMBER   DS    CL6\nHOWMANY  DS    CL8\nWIDTH    DS    H\nZERRMSL  DS    F\nZERRMSG  DS    CL8\nLABEL1   DS    CL9,C\n         DS    0F                 ALIGN LINE\n         DS    CL3\nLINEM1   DS    C                  LINE-1\nLINE     DS    CL133\nCUTLN    DS    CL256\nW99RBPTR DS    F\nW99RB    DS    5F\nW99TUPL  DS    6F\nW99RTDDN DS    3H,CL8\nW99DDNAM DS    3H,CL8\nW99DSNAM DS    3H,CL5\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nEODAD    EQU   32  OFFSET INTO DCB\nEXLST    EQU   32  OFFSET INTO DCB\nDDNAM    EQU   40  OFFSET INTO DCB\nOFLGS    EQU   48  OFFSET INTO DCB\nMACR     EQU   50  OFFSET INTO DCB\nBLKSI    EQU   62  OFFSET INTO DCB\nLRECL    EQU   82  OFFSET INTO DCB\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CVD#C": {"ttr": 4617, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x91\\x14?\\x00\\x91\\x14?\\x11%\\x00#\\x00,\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1991-05-23T00:00:00", "modifydate": "1991-05-23T11:25:00", "lines": 35, "newlines": 44, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      INVOKE 'CVD'     TSO COMMAND                      */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST   MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &THENUM = &STR( )\nSET &O      = &STR(F)\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(CVD#P)\n   IF &LASTCC = 8 THEN GOTO ALLDONE\n   /*--------------------------------------------------------*/\n   /*      GET THE INFO FROM THE PANEL                       */\n   /*--------------------------------------------------------*/\n   IF &O   =  &STR(T) THEN +\n       DO\n       SET  &OPT = &STR(TIME)\n       END\n   ELSE  +\n       DO\n       SET  &OPT = &O\n       END\n   CVD  &THENUM  &OPT\n   GOTO LOOP\nALLDONE: +\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVD#P": {"ttr": 4619, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x91\\x14?\\x00\\x91\\x14?\\x11%\\x00\"\\x00\\x1d\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1991-05-23T00:00:00", "modifydate": "1991-05-23T11:25:00", "lines": 34, "newlines": 29, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+    COMMAND%===>_ZCMD                                                +\n+\n+               %CONVERT  HEX  NUMBER  TO  DECIMAL\n+\n+ ENTER\n+  HEX STRING%===>_THENUM  +  1-8 HEX STRING\n+\n+\n+      OPTION%===>_O       + F - HEX STRING TREATED AS FULLWORD (31 BITS PLUS\n+                                SIGN BIT ON THE LEFT).  IF FEWER THAN 8 HEX\n+                                DIGITS ARE SPECIFIED, LEADING ZEROS ARE\n+                                ASSUMED.  THIS IS THE DEFAULT\n+\n+                          + H - HEX STRING TREATED AS HALFWORD (15 BITS PLUS\n+                                SIGN BIT ON THE LEFT).  IF FEWER THAN 4 HEX\n+                                DIGITS ARE SPECIFIED, LEADING ZEROS ARE\n+                                ASSUMED.\n+\n+                          + T - HEX STRING IS NUMBER REPRESENTING HUNDRETHS OF\n+                                A SECOND SINCE MIDNIGHT AND IS TO BE CONVERTED\n+                                TO HOURS MINUTES, AND SECONDS.\n+\n)INIT\n .CURSOR = THENUM\n)PROC\n  VER (&THENUM,NONBLANK)\n  VER (&O,LIST,F,H,T)\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVDI#C": {"ttr": 4621, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99 _\\x00\\x99 _\\x159\\x00,\\x00,\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-07-24T00:00:00", "modifydate": "1999-07-24T15:39:00", "lines": 44, "newlines": 44, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      INVOKE 'CVDISPF' TSO COMMAND                      */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST   MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &THENUM = &STR( )\nSET &O      = &STR(F)\nSET &ICVD   = &STR()\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   ISPEXEC ADDPOP COLUMN(1) ROW(1)\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(CVDI#P)\n   SET &RC = &LASTCC\n   ISPEXEC REMPOP\n   IF &RC = 8 THEN GOTO ALLDONE\n   IF  &MAXCC NE 0  THEN  GOTO ERRMSG\n   /*--------------------------------------------------------*/\n   /*      GET THE INFO FROM THE PANEL                       */\n   /*--------------------------------------------------------*/\n   IF &O   =  &STR(T) THEN +\n       DO\n       SET  &OPT = &STR(TIME)\n       END\n   ELSE  +\n       DO\n       SET  &OPT = &O\n       END\n   CVDISPF  &THENUM  &OPT\n   ISPEXEC VGET (ICVD)\n   GOTO LOOP\nERRMSG:  +\n  WRITE  **  SEVERE  PANEL  ERROR ***\nALLDONE: +\nISPEXEC VDEL (ICVD)\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVDI#P": {"ttr": 4865, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99 _\\x00\\x99 _\\x15E\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-07-24T00:00:00", "modifydate": "1999-07-24T15:45:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(68,20) CMD(ZCMD)\n+\n+  Command%===>_ZCMD                                               +\n+ Enter\n+  HEX String%==>_THENUM  + 1-8 HEX STRING\n+      Option%==>_O      +  F - HEX string treated as fullword (31\n+                               plus sign bit on left). If fewer\n+                               than 8 hex digits, leading zeros\n+  Result:                      assumed. This is the default.\n+ > &ICVD\n+                         + H - HEX String treated as halfword (15\n+                               plus sign bit on left). If fewer\n+                               than 4 hex digits, leading zeros\n+                               are assumed.\n+                         + T - HEX string is number representing\n+                               hundreths of a second since mid-\n+                               night to be convert to hrs,min,sec.\n+\n+\n)INIT\n .CURSOR = THENUM\n &ZWINTTL =  'Tool Box: Convert HEX Number to Decimal'\n)PROC\n  VER (&THENUM,NONBLANK)\n  VER (&O,LIST,F,H,T)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CVDISPF": {"ttr": 4867, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x00\\x00\\x99\\x19\\x1f\\x00\\x99 _\\x15\"\\x02\\x1b\\x01\\x9f\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1999-07-10T00:00:00", "modifydate": "1999-07-24T15:22:00", "lines": 539, "newlines": 415, "modlines": 0, "user": "S218"}, "text": "         TITLE '   C V D - ISPF VERSION'\n*-------------------------------------------------------------------*\n*        'CVDISPF' - CONVERT HEX TO DECIMAL INTO AN ISPF VARIABLE.\n*-------------------------------------------------------------------*\n         SPACE\n*-------------------------------------------------------------------*\n*   WRITTEN BY BILL GODFREY, PRC INC.\n*        (PRC INC. OF MCLEAN, VA, WAS FORMERLY PLANNING RESEARCH CORP.)\n*   CURRENT INSTALLATION:\n*        NOAA (NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION),\n*        5200 AUTH ROAD, CAMP SPRINGS, MARYLAND 20746\n*   DATE WRITTEN. MAY 9 1985.\n*   DATE UPDATED. APRIL 25 1991.\n*   ATTRIBUTES. RE-ENTRANT.\n*-------------------------------------------------------------------*\n         SPACE\n*-------------------------------------------------------------------*\n* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.\n*   DESCRIPTION.\n*        THIS TSO COMMAND DISPLAYS THE DECIMAL VALUE OF A HEX STRING.\n*        THE VALUE IS ASSUMED TO BE POSITIVE UNLESS:\n*        1) H IS NOT SPECIFIED, THERE ARE 8 HEX CHARACTERS, AND THE\n*           FIRST CHARACTER IS GREATER THAN HEX 7.\n*        2) H IS SPECIFIED, THERE ARE 4 HEX CHARACTERS, AND THE FIRST\n*           CHARACTER IS GREATER THAN HEX 7.\n*    IF THE 'TIME' KEYWORD IS SPECIFIED, THE HEX STRING IS CONVERTED\n*    FROM TIME-OF-DAY AS RETURNED BY THE 'TIME BIN' MACRO (HUNDREDTHS\n*    OF A SECOND SINCE MIDNIGHT) TO HH.MM.SS.\n*   SYNTAX.\n*         FIRST OPERAND: 1 TO 8 HEX DIGITS.\n*         OPTIONAL KEYWORD: H - HALFWORD DATA (16 BIT SIGNED INTEGER).\n*         OPTIONAL KEYWORD: T - TIME-OF-DAY\n*   LOG OF CHANGES.\n*        08AUG86 - TIME KEYWORD ADDED.\n*        25APR91 - NO CODE CHANGES. MINOR CHANGES TO COMMENTS.\n*        15JUL99 - REWORKED CODE TO DOCUMENT MORE, ADD DSECT, CLEAN\n*                  CODE FOR DISTRIBUTION.  MANY THANKS TO BILL.\n*        16JUL99 - REWORKED CODE TO PUT ANSWER INTO AN ISPF VARIABLE\n*                  VERSUS BEING RETURNED VIA TSO PUTLINE.\n*-------------------------------------------------------------------*\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE\nCVDISPF  AMODE 24\nCVDISPF  RMODE 24\nCVDISPF  CSECT\n         SAVE  (14,12),,CVDISPF_&SYSDATE._&SYSTIME\n         LR    R12,R15\n         USING CVDISPF,R12\n         LR    R2,R1\n         USING CPPL,R2\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING @DATA,R13\n         SPACE\n*----------------------------------------------------------*\n*        SET UP IOPL FOR PUTLINE\n*----------------------------------------------------------*\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n*----------------------------------------------------------*\n*        SET UP PPL FOR PARSE\n*----------------------------------------------------------*\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n         L     R0,=A(CVDPCL)\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         XC    MYANS,MYANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         LA    R0,MYUWA\n         ST    R0,PPLUWA\n         DROP  R15                 PPL\n         SPACE 1\n*----------------------------------------------------------*\n*        CALL THE PARSE SERVICE ROUTINE\n*----------------------------------------------------------*\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         L     R15,16              CVTPTR\n         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,524(,R15)       CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\n         SPACE 1\nPARSELNK EQU   *\n         LINK  EP=IKJPARS\nPARSEEXT EQU   *\n         SPACE\n         L     R3,MYANS\n         USING IKJPARMD,R3\n         SPACE\n*----------------------------------------------------------*\n*         GET FIRST POSITIONAL OPERAND\n*----------------------------------------------------------*\n         SPACE\n         MVC   HEXATE(8),=8C'0'    LEADING ZEROES\n         LA    R15,HEXATE+8        POINT PAST HEXATE\n         SH    R15,HEXNUM+4        POINT INTO HEXATE BASED ON LENGTH\n         L     R1,HEXNUM           REG 1  --> OPERAND\n         LH    R14,HEXNUM+4        REG 15  =  LENGTH OF OPERAND\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE OPERAND INTO HEXATE\n         EX    R14,*-6             EXECUTE MVC\n         SPACE\n         LA    R1,HEXATE           FROM AND TO ADDRESS\n         LA    R0,4                LENGTH TO PACK\n         BAL   R14,PACK            CONVERT TO BINARY\n         SPACE\n*----------------------------------------------------------*\n*        DISPLAY THE RESULT\n*----------------------------------------------------------*\n         SPACE\n         L     R0,HEXATE\n         CLI   TYPEKW+1,3          T SPECIFIED\n         BE    TIME\n         CLI   TYPEKW+1,2          H SPECIFIED\n         BNE   CVDBASE             NO, SKIP LH\n         LH    R0,HEXATE+2         YES, LOAD HALFWORD\n         CLC   HEXATE(2),=H'0'     MORE THAN 4 SIGNIFICANT DIGITS\n         BNE   ERROR               YES, ERROR\nCVDBASE  EQU   *\n         CVD   R0,DOUBLE\n         LA    R15,LINE\n         LTR   R0,R0\n         BNM   NOSIGN\n         MVI   0(R15),C'-'\n         LA    R15,1(,R15)\nNOSIGN   EQU   *\n         MVC   0(16,R15),=X'4020206B2020206B2020206B20212040'\n         ED    0(15,R15),DOUBLE+2\n         LA    R0,15(,R15)         POINT PAST LAST DIGIT\nZSUP1    EQU   *\n         CLI   0(R15),C' '\n         BNE   ZSUP2\n         MVC   0(14,R15),1(R15)\n         BCTR  R0,0\n         B     ZSUP1\n         SPACE\nZSUP2    EQU   *\n         LA    R1,LINE\n         SR    R0,R1               COMPUTE LENGTH OF RESULT\nPUTRES   EQU   *\n         AH    R0,=H'4'\n         STH   R0,LINESEG\n         XC    LINESEG+2(2),LINESEG+2\n         SPACE\n         BAL   R14,PUTLINE\n         B     EXIT0\n         SPACE\nTIME     EQU   *\n         LR    R1,R0\n         SR    R0,R0\n         D     R0,=A(360000)\n         CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  LINE(2),DOUBLE+6(2)\n         SRDL  R0,32\n         D     R0,=F'6000'\n         CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  LINE+3(2),DOUBLE+6(2)\n         SRDL  R0,32\n         D     R0,=F'100'\n         CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  LINE+6(2),DOUBLE+6(2)\n         MVI   LINE+2,C'.'\n         MVI   LINE+5,C'.'\n         LA    R0,8\n         B     PUTRES\n         SPACE\nERROR    EQU   *\n         MVC   LINE(5),=C'ERROR'\n         LA    R0,5\n         B     PUTRES\n         SPACE\n*----------------------------------------------------------*\n*        THIS ROUTINE CONVERTS EXTERNAL HEX TO BINARY HEX\n*----------------------------------------------------------*\n         SPACE\nPACK     EQU   *\n         ST    R14,PACK14\n         LR    R15,R1              REG 15 --> SENDING/RECEIVING FLD\nPACLOOP  EQU   *\n         SR    R14,R14\n         IC    R14,0(,R1)          REG 14  =  1ST CHAR\n         CLI   0(R1),C'0'          NUMBER OR LETTER\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT TO FA-FF\n         SLL   R14,4               SHIFT LEFT 4 BITS\n         STC   R14,0(,R15)         STORE THE LEFT HALF\n         IC    R14,1(,R1)          REG 14  =  2ND CHAR\n         CLI   1(R1),C'0'          NUMBER OR LETTER\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT\n         SLL   R14,28              SHIFT LEFT HALF TO OBLIVION\n         SRL   R14,28              SHIFT BACK AGAIN\n         STC   R14,1(,R15)         STORE RIGHT HALF\n         OC    0(1,R15),1(R15)     'OR' RIGHT HALF OVER LEFT HALF\n         LA    R1,2(,R1)           INCREMENT SENDING FIELD\n         LA    R15,1(,R15)         INCREMENT RECEIVING FLD\n         BCT   R0,PACLOOP          LOOP USING LENGTH IN REG 0\n         L     R14,PACK14\n         BR    R14                 EXIT\n         SPACE\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTRAN-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R14                 RETURN TO CALLER\nHEXTRAN  DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n*----------------------------------------------------------*\n*        PUTMSG ROUTINE\n*----------------------------------------------------------*\n         SPACE\n         DS    0H\nPUTMSG   EQU   *\n         STM   R14,R1,PUTLINS\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),MF=(E,MYIOPL)\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         SPACE\n*----------------------------------------------------------*\n*        PUTLINE ROUTINE\n*----------------------------------------------------------*\n         SPACE\nPUTLINE  EQU   *\n         B     ISPFLINE            SHORT CIRCUIT GODFREY CODE\n         SPACE\n         STM   R14,R1,PUTLINS\n         MVC   MYPTPB(12),MODLPTPB\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(LINESEG,DATA),MF=(E,MYIOPL)\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         SPACE\n*----------------------------------------------------------*     ISP\n*        ISPF VARIABLE CODE                                      ISP\n*----------------------------------------------------------*     ISP\n         SPACE 1                                                 ISP\nISPFLINE EQU   *                                                 ISP\n         STM   R14,R1,PUTLINS                                    ISP\n         MVC   IRESULT(16),=CL16' ' BLANK AREA                   ISP\n         LH    R15,LINESEG          GET LENGTH OF ANSWER         ISP\n         SH    R15,=H'4'            REVERSE THE PUTLINE          ISP\n         LA    R7,IRESULT           POINT TO DATA LINE           ISP\n         BCTR  R15,0                SUBTRACT ONE FOR EX          ISP\n         EX    R15,IMOVE            DO THE VARIABLE MOVE         ISP\n         B     ISPF1                                             ISP\nIMOVE    MVC   0(*-*,R7),LINE                                    ISP\n         SPACE 1                                                 ISP\n*----------------------------------------------------------------ISP*\n*        ISSUE VDEFINE FOR ALL 3 VARIABLES.                      ISP\n*----------------------------------------------------------------ISP*\nISPF1    EQU   *                                                 ISP\n         LA    R7,VDEF             GET ADDR OF VDEF              ISP\n         ST    R7,CALL1            STASH THE ADDRESS             ISP\n         LA    R7,ICVD             GET ADDR OF VARIABLE          ISP\n         ST    R7,CALL1+4          STASH THE ADDRESS             ISP\n         LA    R7,IRESULT          GET ADDR OF ANSWER            ISP\n         ST    R7,CALL1+8          STASH THE ADDRESS             ISP\n         LA    R7,CHAR             GET ADDR OF CHAR              ISP\n         ST    R7,CALL1+12         STASH THE ADDRESS             ISP\n         LA    R7,16               GET LENGTH                    ISP\n         ST    R7,ISPFLEN          SAVE THE LENGTH               ISP\n         LA    R7,ISPFLEN          GET ADDR OF LENGTH FIELD      ISP\n         ST    R7,CALL1+16         STASH THE ADDRESS             ISP\n         OI    CALL1+16,X'80'      FLIP ON HIGH ORDER BIT        ISP\n         SPACE 1                                                 ISP\n         LA    R1,CALL1            GET PARAM LIST ADDR           ISP\n         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP\n         LTR   R15,R15                                           ISP\n         BZ    ISPF2                                             ISP\n         LR    R3,R15              SAVE RETURN CODE              ISP\n         B     ABEND1              TRAP                          ISP\n         SPACE 1                                                 ISP\n*----------------------------------------------------------------ISP-*\n*        WRITE THE VALUE INTO THE SHARED VARIABLE POOL           ISP\n*----------------------------------------------------------------ISP-*\n         SPACE 1                                                 ISP\nISPF2    EQU   *                                                 ISP\n         LA    R7,VPUT             GET ADDR OF VPUT              ISP\n         ST    R7,CALL2            STASH THE ADDRESS             ISP\n         LA    R7,ICVD             GET ADDR OF VARIABLE NAME     ISP\n         ST    R7,CALL2+4          STASH THE ADDRESS             ISP\n         LA    R7,SHR              GET ADDR OF SHR               ISP\n         ST    R7,CALL2+8          STASH THE ADDRESS             ISP\n         OI    CALL2+8,X'80'       FLIP ON HIGH ORDER BIT        ISP\n         LA    R1,CALL2            GET PARAM LIST ADDR           ISP\n         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP\n         LTR   R15,R15                                           ISP\n         BZ    ISPF3                                             ISP\n         LR    R3,R15              SAVE RETURN CODE              ISP\n         B     ABEND2              TRAP                          ISP\n         SPACE 1                                                 ISP\n*----------------------------------------------------------------ISP-*\n*        DELETE THE VARIABLE FROM THIS POOL                      ISP\n*----------------------------------------------------------------ISP-*\n         SPACE 1                                                 ISP\nISPF3    EQU   *                                                 ISP\n         LA    R7,VDEL             GET ADDR OF VDEL              ISP\n         ST    R7,CALL3            STASH THE ADDRESS             ISP\n         LA    R7,ICVD             GET ADDR OF RESULT            ISP\n         ST    R7,CALL3+4          STASH THE ADDRESS             ISP\n         OI    CALL3+4,X'80'       FLIP ON HIGH ORDER BIT        ISP\n         SPACE 1                                                 ISP\n         LA    R1,CALL3            GET PARAM LIST ADDR           ISP\n         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP\n         LTR   R15,R15                                           ISP\n         BZ    ISPFEND                                           ISP\n         LR    R3,R15              SAVE RETURN CODE              ISP\n         B     ABEND3              TRAP                          ISP\n         SPACE 1                                                 ISP\nISPFEND  EQU   *                                                 ISP\n         LM    R14,R1,PUTLINS                                    ISP\n         BR    R14                                               ISP\n         SPACE 1                                                 ISP\n*----------------------------------------------------------*\n*         TERMINATE\n*----------------------------------------------------------*\n         SPACE\nEXIT0    EQU   *\n         SR    R15,R15\nEXIT     EQU   *\n         IKJRLSA MYANS\n         LR    R1,R13              ADDRESS TO FREEMAIN\n         L     R0,@SIZE            LENGTH AND SUBPOOL TO FREEMAIN\n         L     R13,4(,R13)\n         LR    R2,R15\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2\n         LM    R0,R12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n         DROP  R12                 BASE\n         SPACE\n*----------------------------------------------------------*\n*        PARSE VALIDITY CHECK ROUTINE FOR HEX STRING\n*\n*        THE IKJIDENT MACRO SPECIFIES THE FOLLOWING:\n*            FIRST=NONATNUM,OTHER=NONATNUM,VALIDCK=REPVALCK\n*        THIS VALIDITY CHECKING ROUTINE ONLY HAS TO CHECK FOR\n*        ALPHABETIC CHARACTERS GREATER THAN 'F' BECAUSE THE\n*        CHARACTERS ARE KNOWN TO BE ALPHABETIC AND/OR NUMERIC.\n*----------------------------------------------------------*\n         SPACE\nREPVALCK DC    0H'0'\n         USING *,R6\n         STM   R14,R12,12(R13)\n         LR    R6,R15              REG 6  =  BASE\n         L     R7,0(,R1)           REG 7 --> PDE\n         L     R4,0(,R7)           REG 4 --> CHARACTER STRING\n         LH    R0,4(,R7)           REG 0  =  LENGTH\n         LA    R15,4               RETURN 4 IF CHECK FAILS\nVALLOOP  EQU   *\n         CLI   0(R4),C'0'          NUMERIC?\n         BNL   VALINCR             YES - THIS CHAR OK\n         CLI   0(R4),C'F'          IN RANGE A THRU F?\n         BH    VALEXIT             NO - EXIT WITH RC=4\nVALINCR  EQU   *\n         LA    R4,1(,R4)           POINT TO NEXT CHAR\n         BCT   R0,VALLOOP\n         SR    R15,R15             SET RC=0\nVALEXIT  EQU   *\n         L     R14,R12(,R13)\n         LM    R0,R12,20(R13)\n         BR    R14\n         DROP  R6\n         SPACE\n*----------------------------------------------------------*\n*        CONSTANTS\n*----------------------------------------------------------*\n         SPACE\nABEND1   ABEND 1,DUMP                                            ISP\nABEND2   ABEND 2,DUMP                                            ISP\nABEND3   ABEND 3,DUMP                                            ISP\n         SPACE\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)   SUBPOOL AND LENGTH\n         SPACE\n         LTORG\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\n*----------------------------------------------------------*\n*        PARSE PCL\n*----------------------------------------------------------*\n         SPACE\n         PRINT NOGEN\nCVDPCL   IKJPARM\nHEXNUM   IKJIDENT 'HEX NUMBER',                                        +\n               FIRST=NONATNUM,OTHER=NONATNUM,MAXLNTH=8,                +\n               VALIDCK=REPVALCK,                                       +\n               PROMPT='HEXADECIMAL NUMBER',                            +\n               HELP='HEX NUMBER (MAX LENGTH 8) TO BE CONVERTED TO DECIM+\n               AL'\nTYPEKW   IKJKEYWD\n         IKJNAME 'F'\n         IKJNAME 'H'\n         IKJNAME 'TIME'\n         IKJENDP\n         PRINT GEN\n         SPACE\n*----------------------------------------------------------------ISP-*\n*        DEFINE THE CONSTANTS, ISPF NEEDS THEM 8 BYTES LONG      ISP\n*----------------------------------------------------------------ISP-*\nVDEF     DC    CL8'VDEFINE'                                      ISP\nVPUT     DC    CL8'VPUT'                                         ISP\nVDEL     DC    CL8'VDELETE'                                      ISP\nSHR      DC    CL8'SHARED'                                       ISP\nICVD     DC    CL8'(ICVD)  '       ENSURE ONE BLANK AT END !!!   ISP\nCHAR     DC    CL8'CHAR'           ACCT IS CHARACTER DEFINED     ISP\n*----------------------------------------------------------*\n*        DSECTS\n*----------------------------------------------------------*\n         SPACE\n@DATA    DSECT\n         DS    18F\nDOUBLE   DS    D\nHEXATE   DS    D\nMYPPL    DS    7F\nMYANS    DS    F\nMYUWA    DS    F\nMYECB    DS    F                  USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                 USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                 USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                 USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL100           USED BY PUTLINE ROUTINE\nPUTLINS  DS    4F                 USED BY PUTLINE ROUTINE\nPACK14   DS    F\nLINESEG  DS    2H\nLINE     DS    CL16\n         SPACE 1                                                 ISP\nIRESULT  DS    CL16                                              ISP\nISPFLEN  DS    F                                                 ISP\nCALL1    DS    0CL20                                             ISP\n         DS    F                   A(VDEF)                       ISP\n         DS    F                   A(VARIABLE NAME)              ISP\n         DS    F                   A(VARIABLE VALUE)             ISP\n         DS    F                   A(CHAR)                       ISP\n         DS    F                   A(L4+X'80000000')             ISP\n         SPACE 1                                                 ISP\n*----------------------------------------------------------------ISP-*\n*        DATA AREA TO WRITE VARIABLE INTO SHARED POOL            ISP\n*----------------------------------------------------------------ISP-*\n         SPACE 1                                                 ISP\n         DS    0F                                                ISP\nCALL2    DS    0CL12                                             ISP\n         DS    F                   A(VPUT)                       ISP\n         DS    F                   A(VARIABLE NAME)              ISP\n         DS    F                   A(SHR+X'80000000')            ISP\n         SPACE 1                                                 ISP\n*----------------------------------------------------------------ISP-*\n*        DATA AREA TO WRITE VARIABLE INTO SHARED POOL            ISP\n*----------------------------------------------------------------ISP-*\n         SPACE 1                                                 ISP\n         DS    0F                                                ISP\nCALL3    DS    0CL8                                              ISP\n         DS    F                   A(VDEL)                       ISP\n         DS    F                   A(VARIABLE NAME+X'80000000)   ISP\n         SPACE\n@DATAL   EQU   *-@DATA\n         SPACE\n         IKJCPPL\n         SPACE 3\n         IKJIOPL\n         SPACE 3\n         IKJPPL\n         SPACE 3\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVDISPF$": {"ttr": 4876, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x99\\x19\\x1f\\x00\\x99!?\\x168\\x00\\x0c\\x00\\x0f\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-07-10T00:00:00", "modifydate": "1999-08-01T16:38:00", "lines": 12, "newlines": 15, "modlines": 0, "user": "S218"}, "text": "//*--------------------------------------------------------------*\n//*       INSTALLATION 'CVDISPF' COMMAND.\n//*--------------------------------------------------------------*\n//CVDISPF  EXEC ASMHCL,COND=(0,NE),\n//         PARM.C='RENT,OBJECT,NODECK,ALIGN,NOLIST,TERM',\n//         PARM.L='LIST,LET,MAP,XREF,RENT'\n//SYSTERM  DD SYSOUT=*\n//SYSIN    DD DISP=SHR,DSN=SHARE.SOURCE(CVDISPF)\n//L.SYSLMOD DD DSN=SHARE.LOAD,DISP=SHR,UNIT=,SPACE=,DCB=\n//L.SYSIN  DD *\n NAME CVDISPF(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVX#C": {"ttr": 5121, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x91\\x14?\\x00\\x91\\x14?\\x11&\\x00\\x1b\\x00#\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1991-05-23T00:00:00", "modifydate": "1991-05-23T11:26:00", "lines": 27, "newlines": 35, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      INVOKE 'CVX'     TSO COMMAND                      */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST   MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &THENUM = &STR( )\nSET &O      = &STR(N)\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(CVX#P)\n   IF &LASTCC = 8 THEN GOTO ALLDONE\n   /*--------------------------------------------------------*/\n   /*      GET THE INFO FROM THE PANEL                       */\n   /*--------------------------------------------------------*/\n   CVX  &THENUM  &O\n   GOTO LOOP\nALLDONE: +\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVX#P": {"ttr": 5123, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x91\\x14?\\x00\\x91\\x15_\\x12\\x07\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1991-05-23T00:00:00", "modifydate": "1991-06-04T12:07:00", "lines": 29, "newlines": 29, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+    COMMAND%===>_ZCMD                                                +\n+\n+               %CONVERT  DECIMAL  NUMBER  TO  HEX\n+\n+ ENTER DEC\n+      NUMBER%===>_THENUM     + DECIMAL NUMBER ( -214783648 TO +2147483647 )\n+                               WITH OPTIONAL SIGN ON LEFT.\n+\n+\n+      OPTION%===>_O+           N - STRING IS TO BE TREATED AS A DECIMAL NUMBER\n+                                   WHOSE NUMERIC VALUE IS TO BE SHOWN IN HEX.\n+\n+                               C - STRING IS TO BE TREATED AS EBCDIC CHARACTERS\n+                                   WHOSE CHARACTER VALUE IS TO BE SHOWN IN HEX.\n+\n+\n+\n)INIT\n .CURSOR = THENUM\n)PROC\n  VER (&THENUM,NONBLANK)\n  VER (&O,LIST,N,C)\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVXI#C": {"ttr": 5125, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x99 _\\x00\\x99 _\\x17)\\x00#\\x00!\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-07-24T00:00:00", "modifydate": "1999-07-24T17:29:00", "lines": 35, "newlines": 33, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      INVOKE 'CVX'     TSO COMMAND                      */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST   MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &THENUM = &STR()\nSET &O      = &STR(N)\nSET &XCVX   = &STR()\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   ISPEXEC ADDPOP COLUMN(1) ROW(1)\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(CVXI#P)\n   SET &RC = &LASTCC\n   ISPEXEC REMPOP\n   IF &RC = 8 THEN GOTO ALLDONE\n   IF  &MAXCC NE 0  THEN  GOTO ERRMSG\n   /*--------------------------------------------------------*/\n   /*      GET THE INFO FROM THE PANEL                       */\n   /*--------------------------------------------------------*/\n   CVXISPF  &THENUM  &O\n   ISPEXEC VGET (XCVX)\n   GOTO LOOP\nERRMSG:  +\n  WRITE  **  SEVERE  PANEL  ERROR ***\nALLDONE: +\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVXI#P": {"ttr": 5127, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99 _\\x00\\x99 _\\x17&\\x00\\x18\\x00\\x18\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-07-24T00:00:00", "modifydate": "1999-07-24T17:26:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(66,12) CMD(ZCMD)\n+\n+ Command%===>_ZCMD                                              +\n+ Enter DEC\n+  Number%==>_THENUM     + Decimal number ( -214783648 TO\n+                        + 21474836 with optional sign on left.\n+  Option%==>_O+       N - String treated as a decimal number\n+                          whose numeric value is to shown in HEX.\n+                      C - String treated as EBCDIC char whose\n+   Result:                character value to be shown in hex.\n+ > &XCVX\n+\n+\n)INIT\n .CURSOR = THENUM\n &ZWINTTL =  'Tool Box: Convert Decimal Number to HEX'\n)PROC\n  VER (&THENUM,NONBLANK)\n  VER (&O,LIST,N,C)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CVXISPF": {"ttr": 5129, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x99 _\\x00\\x99 _\\x170\\x01\\xef\\x01r\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1999-07-24T00:00:00", "modifydate": "1999-07-24T17:30:00", "lines": 495, "newlines": 370, "modlines": 0, "user": "S218"}, "text": "         TITLE '   C V X - ISPF VERSION '\n*-------------------------------------------------------------------*\n*        'CVXISPF' - CONVERT DECIMAL TO HEX INTO AN ISPF VARIABLE.\n*-------------------------------------------------------------------*\n         SPACE\n*-------------------------------------------------------------------*\n*   WRITTEN BY BILL GODFREY, PRC INC.\n*        (PRC INC. OF MCLEAN, VA, WAS FORMERLY PLANNING RESEARCH CORP.)\n*   CURRENT INSTALLATION:\n*        NOAA (NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION),\n*        5200 AUTH ROAD, CAMP SPRINGS, MARYLAND 20746\n*   DATE WRITTEN. OCT 17 1985.\n*   DATE UPDATED. APR 25 1991.\n*   ATTRIBUTES. RE-ENTRANT.\n*-------------------------------------------------------------------*\n         SPACE\n*-------------------------------------------------------------------*\n* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.\n* DESCRIPTION.\n*   THIS TSO COMMAND DISPLAYS THE HEX VALUE OF A DECIMAL NUMBER\n*   OR AN EBCDIC STRING.\n*  SYNTAX.\n*   FIRST OPERAND: 1 TO 9 DECIMAL DIGITS\n*   OPTIONAL KEYWORD: C - CHARACTER TO HEX.\n*  LOG OF CHANGES.\n*   06NOV88 - CHANGE MAXLNTH FROM 8 TO 11 (11 CHARS IN -2147483647)\n*             NOTE: IF VALUE > 2,147,483,647 (HEX 7FFFFFFF)\n*                   OR      < -2,147,483,648 (HEX 80000000)\n*                   THEN YOU GET AN ERROR MESSAGE.\n*        25APR91 - NO CODE CHANGES. MINOR CHANGES TO COMMENTS.\n*        15JUL99 - REWORKED CODE TO DOCUMENT MORE, ADD DSECT, CLEAN\n*                  CODE FOR DISTRIBUTION.  MANY THANKS TO BILL.\n*        16JUL99 - REWORKED CODE TO PUT ANSWER INTO AN ISPF VARIABLE\n*                  VERSUS BEING RETURNED VIA TSO PUTLINE.\n*-------------------------------------------------------------------*\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE\nCVX      AMODE 24\nCVX      RMODE 24\nCVX      CSECT\n         SAVE  (14,12),,CVX_&SYSDATE._&SYSTIME\n         LR    R12,R15\n         USING CVX,R12\n         LR    R2,R1\n         USING CPPL,R2\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING @DATA,R13\n         SPACE\n*----------------------------------------------------------*\n*        SET UP IOPL FOR PUTLINE\n*----------------------------------------------------------*\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n*----------------------------------------------------------*\n*        SET UP PPL FOR PARSE\n*----------------------------------------------------------*\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n         L     R0,=A(CVXPCL)\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         XC    MYANS,MYANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         LA    R0,MYUWA\n         ST    R0,PPLUWA\n         DROP  R15                 PPL\n         SPACE 1\n*----------------------------------------------------------*\n*        CALL THE PARSE SERVICE ROUTINE\n*----------------------------------------------------------*\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         L     R15,16              CVTPTR\n         TM    524(R15),X'80'     IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,524(,R15)       CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK EQU   *\n         LINK  EP=IKJPARS\nPARSEEXT EQU   *\n         SPACE\n         L     R3,MYANS\n         USING IKJPARMD,R3\n         SPACE\n*----------------------------------------------------------*\n*         GET FIRST POSITIONAL OPERAND\n*----------------------------------------------------------*\n         SPACE\n         DROP  R2                  CPPL   (R2 CHANGED BY TRT)\n         L     R4,POSIT1           REG 1  --> OPERAND\n         LH    R14,POSIT1+4        REG 14  =  LENGTH OF OPERAND\n         CLI   TYPEKW+1,2          C SPECIFIED\n         BE    CHARCVX\n         SPACE\n*----------------------------------------------------------*\n*        SINCE THE ABSOLUTE VALUE OF THE LARGEST NEGATIVE NUMBER\n*        IS ONE GREATER THAN THE LARGEST POSITIVE NUMBER, AND\n*        SINCE WE BUILD OUR RESULT BY MAKING A POSITIVE NUMBER\n*        AND THEN NEGATING IT, WE MAKE A SPECIAL TEST FOR THE\n*        LARGEST NEGATIVE NUMBER AND BYPASS THE NORMAL LOGIC.\n*----------------------------------------------------------*\n         SPACE\n         L     R7,=A(X'80000000')  LARGEST NEGATIVE NUMBER\n         CH    R14,=H'11'          IF LENGTH = 11\n         BNE   NOTSPEC                AND\n         CLC   0(11,R4),=C'-2147483648' LARGEST NEGATIVE NUMBER\n         BE    GOTVAL                 THEN USE R7\n         SPACE\n*----------------------------------------------------------*\n*        THE NEXT 3 INSTRUCTIONS TURN OFF FIXED-POINT OVERFLOW\n*        INTERRUPTS (S0C8 ABENDS) WHICH COULD OCCUR ON THE 'AR'\n*        INSTRUCTION LATER ON.  IT MAY NOT REALLY BE NECESSARY,\n*        BECAUSE THE MASK BIT WAS ALREADY OFF IN TESTS WE RAN,\n*        BUT WE DO IT ANYWAY JUST TO BE SURE.\n*----------------------------------------------------------*\n         SPACE\nNOTSPEC  EQU   *\n         BALR  R5,0                GET PROGRAM MASK\n         N     R5,=A(X'F7FFFFFF')  TURN OFF FIXED POINT OVERFLOW\n         SPM   R5                  SET PROGRAM MASK\n         SPACE\n         SR    R5,R5\n         SR    R6,R6               INITIALIZE THE VALUE\n         SR    R7,R7               INITIALIZE THE VALUE\n         MVI   SIGN,C'+'\n         TRT   0(1,R4),NUMERIC\n         BZ    NOSIGN\n         BCT   R14,CKSIGN\n         B     ERROR               ONLY ONE BYTE, NOT NUMERIC\n         SPACE\nCKSIGN   EQU   *\n         CLI   0(R4),C'+'\n         BE    OKSIGN\n         CLI   0(R4),C'-'\n         BNE   ERROR               FIRST CHAR NOT A SIGN, NOT NUMERIC\nOKSIGN   EQU   *\n         MVC   SIGN,0(R4)\n         LA    R4,1(,R4)           POINT TO NEXT CHARACTER\nNUMLOOP  EQU   *\n         TRT   0(1,R4),NUMERIC\n         BNZ   ERROR\nNOSIGN   EQU   *\n         IC    R5,0(,R4)\n         N     R5,=A(X'0000000F')  CHANGE F0-F9 TO 00-09\n         M     R6,=F'10'\n         LTR   R7,R7               IS RESULT GREATER THAN 31 BITS\n         BM    ERROR\n         LTR   R6,R6               IS RESULT GREATER THAN 32 BITS\n         BNZ   ERROR\n         AR    R7,R5\n         BO    ERROR               BRANCH IF OVERFLOW\n         LA    R4,1(,R4)           POINT TO NEXT CHARACTER\n         BCT   R14,NUMLOOP\n         CLI   SIGN,C'-'\n         BNE   *+6\n         LNR   R7,R7               CONVERT TO MINUS\n         SPACE\nGOTVAL   EQU   *\n         ST    R7,DOUBLE\n         LA    R1,DOUBLE\n         LA    R0,4\n         LA    R15,LINE\n         BAL   R14,HEX\n         LA    R0,8\n         B     PUTLN\n         SPACE\nCHARCVX  EQU   *\n         LR    R1,R4\n         LR    R0,R14\n         CH    R0,=H'128'\n         BNH   *+8\n         LH    R0,=H'128'\n         LA    R15,LINE\n         BAL   R14,HEX\n         LA    R1,LINE\n         LR    R0,R15\n         SR    R0,R1\n         SPACE\n*----------------------------------------------------------*\n*         DISPLAY THE RESULT\n*----------------------------------------------------------*\n         SPACE\nPUTLN    EQU   *\n         LA    R1,LINE\nPUTRES   EQU   *\n         AH    R0,=H'4'\n         STH   R0,LINESEG\n         XC    LINESEG+2(2),LINESEG+2\n         SPACE\n         BAL   R14,PUTLINE\n         SPACE\n         B     EXIT0\n         SPACE\nERROR    EQU   *\n         MVC   LINE(5),=C'ERROR'\n         LA    R0,5\n         B     PUTRES\n         SPACE\n*----------------------------------------------------------*\n*        THIS ROUTINE CONVERTS DATA TO HEX\n*----------------------------------------------------------*\n         SPACE\nHEX      EQU   *\n         MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTRAN-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R14                 RETURN TO CALLER\nHEXTRAN  DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n*----------------------------------------------------------*\n*        PUTMSG ROUTINE\n*----------------------------------------------------------*\n         SPACE\nPUTMSG   EQU   *\n         STM   R14,R1,PUTLINS\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),MF=(E,MYIOPL)\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         SPACE\n*----------------------------------------------------------*\n*        PUTLINE ROUTINE\n*----------------------------------------------------------*\n         SPACE\nPUTLINE  EQU   *\n         B     ISPFLINE            SHORT CIRCUIT PUTLINE         ISP\n         SPACE 1                                                 ISP\n         STM   R14,R1,PUTLINS\n         MVC   MYPTPB(12),MODLPTPB\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(LINESEG,DATA),MF=(E,MYIOPL)\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         SPACE\n*----------------------------------------------------------*     ISP\n*        ISPF VARIABLE CODE                                      ISP\n*----------------------------------------------------------*     ISP\n         SPACE 1                                                 ISP\nISPFLINE EQU   *                                                 ISP\n         STM   R14,R1,PUTLINS                                    ISP\n         MVC   XRESULT(22),=CL22' ' BLANK AREA                   ISP\n         LH    R15,LINESEG          GET LENGTH OF ANSWER         ISP\n         SH    R15,=H'4'            REVERSE THE PUTLINE          ISP\n         LA    R7,XRESULT           POINT TO DATA LINE           ISP\n         BCTR  R15,0                SUBTRACT ONE FOR EX          ISP\n         EX    R15,IMOVE            DO THE VARIABLE MOVE         ISP\n         B     ISPF1                                             ISP\nIMOVE    MVC   0(*-*,R7),LINE                                    ISP\n         SPACE 1                                                 ISP\n*----------------------------------------------------------------ISP*\n*        ISSUE VDEFINE FOR ALL 3 VARIABLES.                      ISP\n*----------------------------------------------------------------ISP*\nISPF1    EQU   *                                                 ISP\n         LA    R7,VDEF             GET ADDR OF VDEF              ISP\n         ST    R7,CALL1            STASH THE ADDRESS             ISP\n         LA    R7,XCVX             GET ADDR OF VARIABLE          ISP\n         ST    R7,CALL1+4          STASH THE ADDRESS             ISP\n         LA    R7,XRESULT          GET ADDR OF ANSWER            ISP\n         ST    R7,CALL1+8          STASH THE ADDRESS             ISP\n         LA    R7,CHAR             GET ADDR OF CHAR              ISP\n         ST    R7,CALL1+12         STASH THE ADDRESS             ISP\n         LA    R7,22               GET LENGTH                    ISP\n         ST    R7,ISPFLEN          SAVE THE LENGTH               ISP\n         LA    R7,ISPFLEN          GET ADDR OF LENGTH FIELD      ISP\n         ST    R7,CALL1+16         STASH THE ADDRESS             ISP\n         OI    CALL1+16,X'80'      FLIP ON HIGH ORDER BIT        ISP\n         SPACE 1                                                 ISP\n         LA    R1,CALL1            GET PARAM LIST ADDR           ISP\n         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP\n         LTR   R15,R15                                           ISP\n         BZ    ISPF2                                             ISP\n         LR    R3,R15              SAVE RETURN CODE              ISP\n         B     ABEND1              TRAP                          ISP\n         SPACE 1                                                 ISP\n*----------------------------------------------------------------ISP-*\n*        WRITE THE VALUE INTO THE SHARED VARIABLE POOL           ISP\n*----------------------------------------------------------------ISP-*\n         SPACE 1                                                 ISP\nISPF2    EQU   *                                                 ISP\n         LA    R7,VPUT             GET ADDR OF VPUT              ISP\n         ST    R7,CALL2            STASH THE ADDRESS             ISP\n         LA    R7,XCVX             GET ADDR OF VARIABLE NAME     ISP\n         ST    R7,CALL2+4          STASH THE ADDRESS             ISP\n         LA    R7,SHR              GET ADDR OF SHR               ISP\n         ST    R7,CALL2+8          STASH THE ADDRESS             ISP\n         OI    CALL2+8,X'80'       FLIP ON HIGH ORDER BIT        ISP\n         LA    R1,CALL2            GET PARAM LIST ADDR           ISP\n         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP\n         LTR   R15,R15                                           ISP\n         BZ    ISPF3                                             ISP\n         LR    R3,R15              SAVE RETURN CODE              ISP\n         B     ABEND2              TRAP                          ISP\n         SPACE 1                                                 ISP\n*----------------------------------------------------------------ISP-*\n*        DELETE THE VARIABLE FROM THIS POOL                      ISP\n*----------------------------------------------------------------ISP-*\n         SPACE 1                                                 ISP\nISPF3    EQU   *                                                 ISP\n         LA    R7,VDEL             GET ADDR OF VDEL              ISP\n         ST    R7,CALL3            STASH THE ADDRESS             ISP\n         LA    R7,XCVX             GET ADDR OF RESULT            ISP\n         ST    R7,CALL3+4          STASH THE ADDRESS             ISP\n         OI    CALL3+4,X'80'       FLIP ON HIGH ORDER BIT        ISP\n         SPACE 1                                                 ISP\n         LA    R1,CALL3            GET PARAM LIST ADDR           ISP\n         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP\n         LTR   R15,R15                                           ISP\n         BZ    ISPFEND                                           ISP\n         LR    R3,R15              SAVE RETURN CODE              ISP\n         B     ABEND3              TRAP                          ISP\n         SPACE 1                                                 ISP\nISPFEND  EQU   *                                                 ISP\n         LM    R14,R1,PUTLINS                                    ISP\n         BR    R14                                               ISP\n         SPACE 1                                                 ISP\n*----------------------------------------------------------*\n*         TERMINATE\n*----------------------------------------------------------*\n         SPACE\nEXIT0    SR    15,15\nEXIT     IKJRLSA MYANS\n         LR    R1,R13              ADDRESS TO FREEMAIN\n         L     R0,@SIZE            LENGTH AND SUBPOOL TO FREEMAIN\n         L     R13,4(,R13)\n         LR    R2,R15\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2\n         LM    R0,R12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n         DROP  R12                 BASE\nABEND1   ABEND 1,DUMP                                            ISP\nABEND2   ABEND 2,DUMP                                            ISP\nABEND3   ABEND 3,DUMP                                            ISP\n         SPACE\n*----------------------------------------------------------*\n*        CONSTANTS\n*----------------------------------------------------------*\n         SPACE\n         LTORG\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)   SUBPOOL AND LENGTH\nNUMERIC  DC    240X'FF',10X'00',6X'FF'\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\n*----------------------------------------------------------*\n*        PARSE PCL\n*----------------------------------------------------------*\n         SPACE\n         PRINT NOGEN\nCVXPCL   IKJPARM\nPOSIT1   IKJIDENT 'DATA TO BE CONVERTED TO HEX',ASIS,                  +\n               FIRST=ANY,OTHER=ANY,MAXLNTH=11,                         +\n               PROMPT='DATA TO BE CONVERTED TO HEX',                   +\n               HELP='DATA (MAX LENGTH 10) TO BE CONVERTED TO HEX'\nTYPEKW   IKJKEYWD\n         IKJNAME 'N'\n         IKJNAME 'C'\n         IKJENDP\n         PRINT GEN\n*----------------------------------------------------------------ISP-*\n*        DEFINE THE CONSTANTS, ISPF NEEDS THEM 8 BYTES LONG      ISP\n*----------------------------------------------------------------ISP-*\nVDEF     DC    CL8'VDEFINE'                                      ISP\nVPUT     DC    CL8'VPUT'                                         ISP\nVDEL     DC    CL8'VDELETE'                                      ISP\nSHR      DC    CL8'SHARED'                                       ISP\nXCVX     DC    CL8'(XCVX)  '       ENSURE ONE BLANK AT END !!!   ISP\nCHAR     DC    CL8'CHAR'           ACCT IS CHARACTER DEFINED     ISP\n         SPACE\n*----------------------------------------------------------*\n*        DSECTS\n*----------------------------------------------------------*\n         SPACE\n@DATA    DSECT\n         DS    18F\nDOUBLE   DS    D\nSIGN     DS    C\nMYPPL    DS    7F\nMYANS    DS    F\nMYUWA    DS    F\nMYECB    DS    F                  USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                 USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                 USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                 USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL100           USED BY PUTLINE ROUTINE\nPUTLINS  DS    4F                 USED BY PUTLINE ROUTINE\nLINESEG  DS    2H\nLINE     DS    CL256,CL1\n         SPACE 1                                                 ISP\nXRESULT  DS    CL22                                              ISP\nISPFLEN  DS    F                                                 ISP\nCALL1    DS    0CL20                                             ISP\n         DS    F                   A(VDEF)                       ISP\n         DS    F                   A(VARIABLE NAME)              ISP\n         DS    F                   A(VARIABLE VALUE)             ISP\n         DS    F                   A(CHAR)                       ISP\n         DS    F                   A(L4+X'80000000')             ISP\n         SPACE 1                                                 ISP\n*----------------------------------------------------------------ISP-*\n*        DATA AREA TO WRITE VARIABLE INTO SHARED POOL            ISP\n*----------------------------------------------------------------ISP-*\n         SPACE 1                                                 ISP\n         DS    0F                                                ISP\nCALL2    DS    0CL12                                             ISP\n         DS    F                   A(VPUT)                       ISP\n         DS    F                   A(VARIABLE NAME)              ISP\n         DS    F                   A(SHR+X'80000000')            ISP\n         SPACE 1                                                 ISP\n*----------------------------------------------------------------ISP-*\n*        DATA AREA TO WRITE VARIABLE INTO SHARED POOL            ISP\n*----------------------------------------------------------------ISP-*\n         SPACE 1                                                 ISP\n         DS    0F                                                ISP\nCALL3    DS    0CL8                                              ISP\n         DS    F                   A(VDEL)                       ISP\n         DS    F                   A(VARIABLE NAME+X'80000000)   ISP\n         DS    0D\n         SPACE\n@DATAL   EQU   *-@DATA\n         SPACE\n         IKJCPPL\n         SPACE 3\n         IKJIOPL\n         SPACE 3\n         IKJPPL\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVXISPF$": {"ttr": 5380, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99 _\\x00\\x99!?\\x169\\x00\\x0c\\x00\\x0f\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-07-24T00:00:00", "modifydate": "1999-08-01T16:39:00", "lines": 12, "newlines": 15, "modlines": 0, "user": "S218"}, "text": "//*--------------------------------------------------------------*\n//*       INSTALLATION 'CVXISPF' COMMAND.\n//*--------------------------------------------------------------*\n//CVXISPF  EXEC ASMHCL,COND=(0,NE),\n//         PARM.C='RENT,OBJECT,NODECK,ALIGN,NOLIST,TERM',\n//         PARM.L='LIST,LET,MAP,XREF,RENT'\n//SYSTERM  DD SYSOUT=*\n//SYSIN    DD DISP=SHR,DSN=SHARE.SOURCE(CVXISPF)\n//L.SYSLMOD DD DSN=SHARE.LOAD,DISP=SHR,UNIT=,SPACE=,DCB=\n//L.SYSIN  DD *\n NAME CVXISPF(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DATE#C": {"ttr": 5382, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x84\\x18_\\x00\\x84\\x18_\\x11Y\\x00\\n\\x00\\n\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1984-07-03T00:00:00", "modifydate": "1984-07-03T11:59:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "SS02JDM"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------------*/\n/*      PDF CLIST  FOR TSO COMMAND 'DATE'                       */\n/*--------------------------------------------------------------*/\nCONTROL NOLIST NOMSG NOFLUSH PROMPT\nIF &DEBUG NE &STR() THEN +\n  CONTROL LIST MSG NOFLUSH PROMPT CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nDATE\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DEFA#C": {"ttr": 5384, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00\\x00\\x00\\x84 \\x1f\\x00\\x86\\x14\\x1f\\x16\\x06\\x00*\\x00\\x11\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xc3\\xd1\\xc3@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "1984-07-19T00:00:00", "modifydate": "1986-05-21T16:06:00", "lines": 42, "newlines": 17, "modlines": 0, "user": "SS02CJC"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR SADSC PANELS FOR USE           */\n/*               DOING DEFINE ALIAS TO MASTER CAT         */\n/*--------------------------------------------------------*/\nCONTROL   MSG PROMPT NOFLUSH NOLIST\nIF &DEBUG NE THEN CONTROL LIST MSG CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &AUSER = &STR(SS)\nSET &USER = &STR(&SUBSTR(1:2,&SYSUID))\nIF &USER NE &AUSER THEN EXIT\nSET &MALIAS  = &STR()\nSET &PASSWRD = &STR()\nSET &COSTCDE = &STR()\nLOOP:  +\n    SET &MAXCC   = 0\n    SET &LASTCC  = 0\n    ISPEXEC DISPLAY PANEL(DEFA#P)\n    IF &LASTCC = 8  THEN EXIT\n    ISPEXEC VGET (&MALIAS &PASSWRD)\n    SET &LASTCC = 0\n    SET &MAXCC  = 0\n    SET &COSTCDE = &SUBSTR(1:2,&MALIAS)\n    ISPEXEC  FTOPEN   TEMP\n    ISPEXEC  FTINCL   DEFA#S\n    ISPEXEC  FTCLOSE\n    ISPEXEC  VGET     ZTEMPF\n    CONTROL NOMSG\n    SET &LASTCC = 0\n    SET &MAXCC  = 0\n    EX    '&ZTEMPF'\n    IF &MAXCC EQ 0  THEN +\n       DO\n       WRITE  UPDATE WAS SUCCESSFUL UNLESS OTHERWISE INDICATED.\n       END\n    ELSE   +\n       DO\n       WRITE  UPDATE WAS NOT SUCCESSFUL\n       END\n    CONTROL NOMSG\n    GOTO LOOP\n    END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DEFA#P": {"ttr": 5386, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x84 \\x1f\\x00\\x85\\x10\\x7f\\x14R\\x00\\x14\\x00\\x1f\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1984-07-19T00:00:00", "modifydate": "1985-04-17T14:52:00", "lines": 20, "newlines": 31, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n  \u00ac  TYPE(INPUT) INTENS(NON) CAPS(ON) JUST(LEFT)\n)BODY\n+\n+     % Define an ALIAS entry in the master catalog +\n+\n+         Enter alias entry%===>_MALIAS +\n+\n+\n+    Enter Master catalog                    +\n+                  password%===>\u00acPASSWRD     +\n+\n+\n)PROC\n VER (&MALIAS,NONBLANK) VER(&MALIAS,NAME)\n VER (&PASSWRD,NONBLANK)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DEFA#S": {"ttr": 5388, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x84 \\x1f\\x00\\x86\\x05?\\x15\\x13\\x00v\\x00\\r\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1984-07-19T00:00:00", "modifydate": "1986-02-22T15:13:00", "lines": 118, "newlines": 13, "modlines": 0, "user": "SS02JDM"}, "text": "PROC 0\nCONTROL PROMPT NOFLUSH\nDEFINE   ALIAS ( NAME('&MALIAS')       +\n)SEL      &COSTCDE = AC\n         RELATE('SYSCTLG.VLIBNRC'))    +\n)ENDSEL\n)SEL      &COSTCDE = AE\n         RELATE('SYSCTLG.VLIBNRC'))    +\n)ENDSEL\n)SEL      &COSTCDE = AC\n         RELATE('SYSCTLG.VLIBNRC'))    +\n)ENDSEL\n)SEL      &COSTCDE = AM\n         RELATE('SYSCTLG.VLIBNRC'))    +\n)ENDSEL\n)SEL      &COSTCDE = EH\n         RELATE('SYSCTLG.VLIBNRC'))    +\n)ENDSEL\n)SEL      &COSTCDE = FM\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = FO\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = FP\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = FS\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = FW\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = GA\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = HB\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = IA\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = IR\n         RELATE('SYSCTLG.VLIBNRC'))    +\n)ENDSEL\n)SEL      &COSTCDE = LA\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = NA\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = N4\n         RELATE('SYSCTLG.VLIBNRC'))    +\n)ENDSEL\n)SEL      &COSTCDE = N6\n         RELATE('SYSCTLG.VLIBNRC'))    +\n)ENDSEL\n)SEL      &COSTCDE = OC\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = OH\n         RELATE('SYSCTLG.VLIBNRC'))    +\n)ENDSEL\n)SEL      &COSTCDE = PM\n         RELATE('SYSCTLG.VLIBNRC'))    +\n)ENDSEL\n)SEL      &COSTCDE = QE\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = RF\n         RELATE('SYSCTLG.VLIBNRC'))    +\n)ENDSEL\n)SEL      &COSTCDE = SA\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = SB\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = SC\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = SF\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = SH\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = SP\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = SR\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = SS\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = TC\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = TM\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = TP\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = TS\n         RELATE('SYSCTLG.VLIBNRA'))    +\n)ENDSEL\n)SEL      &COSTCDE = VS\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = YD\n         RELATE('SYSCTLG.VLIBNRB'))    +\n)ENDSEL\n)SEL      &COSTCDE = ZA\n         RELATE('SYSCTLG.VLIBNRA'))    +\n)ENDSEL\n       CATALOG('CATALOG.MVSVSAM.VMVSCAT'/&PASSWRD)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DELA#C": {"ttr": 5391, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x85\\x10\\x7f\\x00\\x86\\x14\\x1f\\x16\\x06\\x00(\\x00+\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xc3\\xd1\\xc3@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1985-04-17T00:00:00", "modifydate": "1986-05-21T16:06:00", "lines": 40, "newlines": 43, "modlines": 0, "user": "SS02CJC"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR SADSC PANELS FOR USE           */\n/*               DOING DELETE ALIAS TO MASTER CAT         */\n/*--------------------------------------------------------*/\nCONTROL   MSG PROMPT NOFLUSH NOLIST\nIF &DEBUG NE THEN CONTROL LIST MSG CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &AUSER = &STR(SS)\nSET &USER = &STR(&SUBSTR(1:2,&SYSUID))\nIF &USER NE &AUSER THEN EXIT\nSET &MALIAS  = &STR()\nSET &PASSWRD = &STR()\nLOOP:  +\n    SET &MAXCC   = 0\n    SET &LASTCC  = 0\n    ISPEXEC DISPLAY PANEL(DELA#P)\n    IF &LASTCC = 8  THEN EXIT\n    ISPEXEC VGET (&MALIAS &PASSWRD)\n    SET &LASTCC = 0\n    SET &MAXCC  = 0\n    ISPEXEC  FTOPEN   TEMP\n    ISPEXEC  FTINCL   DELA#S\n    ISPEXEC  FTCLOSE\n    ISPEXEC  VGET     ZTEMPF\n    CONTROL NOMSG\n    SET &LASTCC = 0\n    SET &MAXCC  = 0\n    EX    '&ZTEMPF'\n    IF &MAXCC EQ 0  THEN +\n       DO\n       WRITE  UPDATE WAS SUCCESSFUL UNLESS OTHERWISE INDICATED.\n       END\n    ELSE   +\n       DO\n       WRITE  UPDATE WAS NOT SUCCESSFUL\n       END\n    CONTROL NOMSG\n    GOTO LOOP\n    END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DELA#P": {"ttr": 5393, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x84 \\x1f\\x00\\x85\\x10\\x7f\\x15\\x03\\x00\\x12\\x00\\x17\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1984-07-19T00:00:00", "modifydate": "1985-04-17T15:03:00", "lines": 18, "newlines": 23, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n  \u00ac  TYPE(INPUT) INTENS(NON) CAPS(ON) JUST(LEFT)\n)BODY\n+\n+    % Delete an ALIAS entry from the Master Catalog +\n+\n+         Enter alias entry                  +\n+                 to delete%===>_MALIAS +\n+\n+    Enter Master catalog                    +\n+                  password%===>\u00acPASSWRD     +\n)PROC\n VER (&MALIAS,NONBLANK) VER(&MALIAS,NAME)\n VER (&PASSWRD,NONBLANK)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DELA#S": {"ttr": 5395, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x84 \\x1f\\x00\\x86\\x05?\\x15\\x13\\x00\\x03\\x00\\x03\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1984-07-19T00:00:00", "modifydate": "1986-02-22T15:13:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "SS02JDM"}, "text": "PROC 0\nCONTROL PROMPT NOFLUSH\nDELETE '&MALIAS' ALIAS CATALOG('CATALOG.MVSVSAM.VMVSCAT'/&PASSWRD)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EDITMAC": {"ttr": 5397, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x92\\x19o\\x00\\x92\\x19o\\x07\\x17\\x01e\\x01`\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1992-07-14T00:00:00", "modifydate": "1992-07-14T07:17:00", "lines": 357, "newlines": 352, "modlines": 0, "user": "S218"}, "text": "./       ADD NAME=#MACDOC\n   *-----------------------------------------------------------------*\n   *              Documentation  for  'EDITMAC'                      *\n   *                                                                 *\n   *       This is a collection of ISPF EDIT macros.  Ran across     *\n   *       \"CUT\" and \"PASTE\" below and decided since these are       *\n   *       just drop-ins, then everyone should have them. You just   *\n   *       place them into your CLIST library and you have them.     *\n   *       Remember, even if they are written in REXX, you can put   *\n   *       in the CLIST's SYSPROC, since they have REXX in line 1    *\n   *       according to the rules.                                   *\n   *                                                                 *\n   *                                                                 *\n   *        People are creating these left and right.  Thus as I     *\n   *        find them, I will package them up.                       *\n   *                                                                 *\n   *        CUT     - similar to function in CTC's SPF/2             *\n   *        PASTE   - similar to function in CTC's SPF/2             *\n   *                                                                 *\n   *                                                                 *\n   *-----------------------------------------------------------------*\n./       ADD NAME=CUT\n/* REXX ***************************************************************/\n/***                                                                  */\n/*** ISPF/PDF edit macro to write lines from a file to the user       */\n/*** PROFILE pool for later inclusion by the PASTE macro.             */\n/***                                                                  */\n/*** To run:                                                          */\n/***  Enter CUT on the COMMAND line and use the C or M line commands  */\n/***  (in any form) to select the lines to be cut.                    */\n/***                                                                  */\n/***  If the M line command is used, the lines will be deleted.       */\n/***                                                                  */\n/***  A parameter of R or REPLACE can be specified to replace any     */\n/***  previously CUT lines (that have not yet been PASTEd) with the   */\n/***  newly selected lines.  Otherwise, the selected lines will be    */\n/***  added to any previously CUT lines.                              */\n/***                                                                  */\n/***  An arbitrary limit of 1000 lines is set in the macro but this   */\n/***  can be changed by providing a new limit on the macro call.      */\n/***  For example, to process up to 2000 lines enter CUT 2000 on the  */\n/***  COMMAND line.  Be aware that each line gets stored in your      */\n/***  PROFILE.                                                        */\n/***                                                                  */\n/**********************************************************************/\nTrace\nAddress ISPEXEC\n'ISREDIT MACRO (PARM1) NOPROCESS'\nparm1 = translate(parm1)\nIf parm1 = '?' Then\n  Do\n    Call help\n    Exit\n  End\n\nIf parm1 \u00ac= ' ' & parm1 \u00ac= 'R' & parm1 \u00ac= 'REPLACE' Then\n  Do\n    If datatype(parm1,w) = 1 & parm1 > 0 Then\n      Do\n        /* set new limit for maximum number of lines cut to profile */\n        cutlimit = parm1\n        'VPUT (CUTLIMIT) PROFILE'\n      End\n    Else\n      Do\n        zedsmsg = 'Invalid parameter'\n        msg = 'Use a whole number > 0, ? for help,'\n        zedlmsg = msg 'R or REPLACE to replace previous lines'\n        'SETMSG MSG(ISRZ001)'\n        Exit 12\n      End\n  End\n\n/* Process line commands, check if C or M was specified              */\n'ISREDIT PROCESS RANGE C M'\nSelect\n  When rc = 0 Then\n    Do\n      'ISREDIT (CMD) = RANGE_CMD'          /* Get the command        */\n      'ISREDIT (LINE1) = LINENUM .ZFRANGE' /* Get first line in range*/\n      'ISREDIT (LINE2) = LINENUM .ZLRANGE' /* Get last line in range */\n      linestocut = line2 - line1 + 1\n    End\n  When rc <= 4 Then /* No C or M entered */\n    Do\n      zedsmsg = 'Enter \"C\"/\"M\" line cmd'\n      zedlmsg = 'CUT requires a \"C\" or \"M\" line command'\n      'SETMSG MSG(ISRZ001)'\n      Exit 12\n    End\n  Otherwise  /* Line command conflict - Edit will create message*/\n    Exit 12\nEnd\n\n/* Get the number of lines that have been cut but not pasted,        */\n/* initialize to zero if first time.                                 */\n'VGET (CUTCNTMX) PROFILE'\nIf rc \u00ac= 0 Then\n  cutcntmx = 0\n\n/* Get the maximum number of lines to be stored in the profile,      */\n/* initialize to 1000 if first time.                                 */\n'VGET (CUTLIMIT) PROFILE'\nIf rc \u00ac= 0 Then\n  Do\n    cutlimit = 1000\n    'VPUT (CUTLIMIT) PROFILE'\n  End\n\nIf parm1 = 'R' | parm1 = 'REPLACE' Then\n  Do\n    If linestocut < cutcntmx Then\n      Do\n        /* delete variables that will not be overwritten */\n        'VGET (ZENVIR) SHARED'\n        Do i = 1 to cutcntmx by 1\n          'VERASE (CL'i') PROFILE'\n        End\n      End\n    cutcntmx = 0\n  End\ncutcntmxsave = cutcntmx\n/* Check to see if the limit will be exceeded by storing the lines   */\n/* into the profile.                                                 */\ncount = cutcntmx + linestocut\nIf count > cutlimit Then\n  Do\n    zedsmsg = '> 'cutlimit 'lines to cut'\n    zedlmsg = 'Reduce the range or change limit with CUT 'count\n    'SETMSG MSG(ISRZ001)'\n    Exit 12\n  End\n\n\n/* cut the lines to the profile */\ncutcnt = cutcntmx\nDo i = line1 to line2\n  cutcnt = cutcnt + 1\n  'ISREDIT (CL'cutcnt') = LINE' i\n\n  Interpret \"CL\"cutcnt\"= Strip(CL\"cutcnt\",'T')\"\n\n  'VPUT (CL'cutcnt') PROFILE'\nEnd\n\n\n/* Put the number of lines cut into the profile for use by PASTE     */\n'VPUT (CUTCNT) PROFILE'\n\n/* If the number of lines cut this time is greater than the maximum  */\n/* cut, then save the new maximum.  PASTE will set this variable to  */\n/* zero if it deletes the variables.                                 */\nIf cutcnt > cutcntmx Then\n  Do\n    cutcntmx = cutcnt\n    'VPUT (CUTCNTMX) PROFILE'\n  End\n\nIf cmd = 'M' Then\n  Do\n    'ISREDIT DELETE 'line1 line2\n    If cutcntmxsave = 0 Then\n      Do\n        zedsmsg = linestocut 'lines cut and deleted'\n        msg = 'lines were cut and deleted from the current file'\n        zedlmsg = linestocut msg\n      End\n    Else\n      Do\n        zedsmsg = linestocut 'lines cut and deleted'\n        msg ='A total of 'cutcntmx' lines have been cut'\n        zedlmsg = msg '- last 'linestocut' were deleted'\n      End\n    'SETMSG MSG(ISRZ000)'\n  End\nElse\n  Do\n    If cutcntmxsave = 0 Then\n      Do\n        zedsmsg = linestocut 'lines cut'\n        zedlmsg = linestocut 'lines were cut from the current file'\n      End\n    Else\n      Do\n        zedsmsg = linestocut' lines plus 'cutcntmxsave 'lines cut'\n        zedlmsg ='A total of 'cutcntmx' lines have been cut'\n      End\n    'SETMSG MSG(ISRZ000)'\n  End\n\nExit\n\nhelp:\nSay '                                                                '\nSay ' ISPF/PDF edit macro to write lines from a file to the user     '\nSay ' PROFILE pool for later inclusion by the PASTE macro.           '\nSay '                                                                '\nSay ' To run:                                                        '\nSay '  Enter CUT on the COMMAND line and use the C or M line commands'\nSay '  (in any form) to select the lines to be cut.                  '\nSay '                                                                '\nSay '  If the M line command is used, the lines will be deleted.     '\nSay '                                                                '\nSay '  A parameter of R or REPLACE can be specified to replace any   '\nSay '  previously CUT lines (that have not yet been PASTEd) with the '\nSay '  newly selected lines.  Otherwise, the selected lines will be  '\nSay '  added to any previously CUT lines.                            '\nSay '                                                                '\nSay '  An arbitrary limit of 1000 lines is set in the macro but this '\nSay '  can be changed by providing a new limit on the macro call.    '\nSay '  For example, to process up to 2000 lines enter CUT 2000 on the'\nSay '  COMMAND line.  Be aware that each line gets stored in your    '\nSay '  PROFILE.                                                      '\nSay '                                                                '\nReturn\n./       ADD NAME=PASTE\n/* REXX ***************************************************************/\n/***                                                                  */\n/*** ISPF/PDF edit macro to write lines from the user PROFILE pool    */\n/*** into the current file.  This macro is used in conjunction with   */\n/*** the CUT macro.                                                   */\n/***                                                                  */\n/*** To run:                                                          */\n/***   Enter PASTE on the COMMAND line and use the A or B line        */\n/***   command to specify where the lines are to be pasted.           */\n/***                                                                  */\n/***   A parameter of K or KEEP can be specified to prevent the macro */\n/***   from setting the profile variables to null after the lines     */\n/***   have been pasted into the file.                                */\n/***                                                                  */\n/***   If line truncation occurs, the profile variables will not be   */\n/***   set to null.  When this occurs, edit a data set with a large   */\n/***   enough record length or use CUT REPLACE to replace the lines   */\n/***   in the PROFILE pool.                                           */\n/**********************************************************************/\nTrace\nAddress ISPEXEC\n\n'ISREDIT MACRO (PARM1) NOPROCESS'\nparm1 = translate(parm1)\nIf parm1 = '?' Then\n  Do\n    Call help\n    Exit\n  End\n\nIf parm1 \u00ac= ' ' & parm1 \u00ac= 'K' & parm1 \u00ac= 'KEEP' Then\n  Do\n    zedsmsg = 'Invalid parameter'\n    zedlmsg = 'Use ? for help, K or KEEP to prevent variable deletion'\n    'SETMSG MSG(ISRZ001)'\n    Exit 12\n  End\n\n/* Process line commands, check if A or B was specified              */\n'CONTROL ERRORS RETURN'\n'ISREDIT PROCESS DEST'\nSelect\n  When rc = 0 Then\n    'ISREDIT (ZDEST) = LINENUM .ZDEST'\n  When rc <= 8 Then /* No A or B entered */\n    Do\n       zedsmsg = 'Enter \"A\"/\"B\" line cmd'\n       zedlmsg = 'PASTE requires an \"A\" or \"B\" line command'\n       'SETMSG MSG(ISRZ001)'\n       Exit 12\n    End\n  When rc < 20 Then /* Conflicting line commands - edit sets message */\n    Exit 12\n  When rc = 20 Then\n    zdest = 0\n  Otherwise\n    Exit 12\nEnd\n'CONTROL ERRORS CANCEL'\n\n/* Get the number of lines variable                                  */\n'VGET (CUTCNT,CUTCNTMX) PROFILE'\nIf rc \u00ac= 0 Then\n  Do\n    zedsmsg = 'Use CUT before PASTE'\n    zedlmsg = 'The CUTCNT profile variable was not found-use CUT first'\n    'SETMSG MSG(ISRZ001)'\n    Exit 12\n  End\nIf cutcnt <= 0 Then\n  Do\n    zedsmsg = 'Use CUT before PASTE'\n    zedlmsg = 'No data has been stored via the CUT macro'\n    'SETMSG MSG(ISRZ001)'\n    Exit 12\n  End\n\ntrunccnt = 0\ncutcount = cutcnt\n/* get each cut line from the profile and add it to the file         */\nDo i = cutcnt to 1 by -1\n  'VGET (CL'i') PROFILE'\n  'ISREDIT LINE_AFTER 'zdest' = DATALINE (CL'i')'\n  If rc = 4 Then trunccnt = trunccnt + 1\nEnd\n\n\n/* If KEEP parameter not given and no lines were truncated, set to    */\n/* null all variables stored in the profile.  Variable cutcntmx       */\n/* contains the number of lines cut but not deleted.                  */\nIf parm1 \u00ac= 'K' & parm1 \u00ac= 'KEEP' & trunccnt = 0 Then\n  Do\n    'VGET (ZENVIR) SHARED'\n    Do i = 1 to cutcntmx by 1\n      'VERASE (CL'i') PROFILE'\n    End\n    cutcnt   = 0\n    cutcntmx = 0\n    'VPUT (CUTCNT,CUTCNTMX) PROFILE'\n  End\n\n/* Check if truncation occurred, if so display message                */\nIf trunccnt > 0 Then\n  Do\n    zedsmsg = trunccnt 'lines truncated'\n    msg     = 'Current record length shorter than origin'\n    zedlmsg = msg '-' trunccnt 'of' cutcount 'records were truncated'\n    'SETMSG MSG(ISRZ001)'\n  End\nElse\n  Do\n    zedsmsg = cutcount 'lines pasted'\n    zedlmsg = cutcount 'lines were pasted into the current file'\n    'SETMSG MSG(ISRZ000)'\n  End\n\nline1 = zdest + 1\n'ISREDIT CURSOR = 'line1 0\nExit\n\nhelp:\nSay '                                                                '\nSay ' ISPF/PDF edit macro to write lines from the user PROFILE pool  '\nSay ' into the current file. This macro is used in conjunction with  '\nSay ' the CUT macro.                                                 '\nSay '                                                                '\nSay ' To run:                                                        '\nSay '  Enter PASTE on the COMMAND line and use the A or B line       '\nSay '  command to specify where the lines are to be pasted.          '\nSay '                                                                '\nSay '  A parameter of K or KEEP can be specified to prevent the macro'\nSay '  from setting the profile variables to null after the lines    '\nSay '  have been pasted into the file.  If you want to paste the same'\nSay '  set of lines many places, specify the K or KEEP parameter.    '\nSay '                                                                '\nSay '  If line truncation occurs, the profile variables will not be  '\nSay '  set to null.  If this occurs, edit a data set with a large    '\nSay '  enough record length or use CUT REPLACE to replace the lines  '\nSay '  in the PROFILE pool.                                          '\nSay '                                                                '\nReturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FORT#C": {"ttr": 5638, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x84\\x19\\x8f\\x00\\x86\\x14\\x1f\\x16\\x07\\x00\\x0b\\x00\\x0c\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xc3\\xd1\\xc3@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1984-07-16T00:00:00", "modifydate": "1986-05-21T16:07:00", "lines": 11, "newlines": 12, "modlines": 0, "user": "SS02CJC"}, "text": "PROC 0\n/*------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR TSO COMMAND 'FORT'           */\n/*------------------------------------------------------*/\nCONTROL NOMSG PROMPT\n        KOMM CLEAR\n        ISPEXEC  FTOPEN   TEMP\n        ISPEXEC  FTINCL   FORT#S\n        ISPEXEC  FTCLOSE\n        ISPEXEC  VGET     ZTEMPF\n        EX    '&ZTEMPF'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FORT#P": {"ttr": 5640, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x84\\x19\\x8f\\x00\\x91\\x14/\\x13U\\x00\\x17\\x00\\x13\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1984-07-16T00:00:00", "modifydate": "1991-05-22T13:55:00", "lines": 23, "newlines": 19, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+  COMMAND%===>_ZCMD                                                  +\n+\n+\n+\n+    % CHEAP   F O R T G 1   S Y N T A X   C H E C K E R+\n+\n+\n+ ENTER DATA SET NAME%===>_PODSN\n+                    %===>_EBCDIC   +EBCDIC/BCD\n)INIT\n .CURSOR = PODSN\n &EBCDIC = TRANS (&EBCDIC ' ',EBCDIC,*,*)\n)PROC\n VER (&PODSN,NONBLANK)    VER(&PODSN,DSNAME)\n VER (&EBCDIC,NONBLANK)   VER(&EBCDIC,LIST,EBCDIC,BCD)\n &SEL  =  'CMD(%FORT#C)'\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FORT#S": {"ttr": 5642, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x84\\x19\\x8f\\x00\\x86\\x05?\\x15\\x14\\x00\\x08\\x00\\x08\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1984-07-16T00:00:00", "modifydate": "1986-02-22T15:14:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "SS02JDM"}, "text": "PROC 0\nCONTROL PROMPT NOFLUSH\nFORT     &PODSN      +\n         NOLOAD      +\n         NOPRINT     +\n         TERM        +\n         NOID        +\n         &EBCDIC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FORTX#C": {"ttr": 5644, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x84\\x19/\\x00\\x86\\x14\\x1f\\x16\\x07\\x00\\x0b\\x00\\x08\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xc3\\xd1\\xc3@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1984-07-10T00:00:00", "modifydate": "1986-05-21T16:07:00", "lines": 11, "newlines": 8, "modlines": 0, "user": "SS02CJC"}, "text": "PROC 0\n/*--------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR TSO COMMAND  'FORTX'           */\n/*--------------------------------------------------------*/\nCONTROL NOMSG PROMPT\n        KOMM CLEAR\n        ISPEXEC  FTOPEN   TEMP\n        ISPEXEC  FTINCL   FORTX#S\n        ISPEXEC  FTCLOSE\n        ISPEXEC  VGET     ZTEMPF\n        EX    '&ZTEMPF'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FORTX#P": {"ttr": 5646, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x84\\x19/\\x00\\x91\\x14/\\x13W\\x00\\x18\\x00\\x1b\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1984-07-10T00:00:00", "modifydate": "1991-05-22T13:57:00", "lines": 24, "newlines": 27, "modlines": 0, "user": "S218"}, "text": ")BODY\n+\n+   COMMAND%===>_ZCMD                                                  +\n+\n+\n+\n+         % CHEAP   F O R T H X   S Y N T A X   C H E C K E R+\n+\n+\n+ ENTER DATA SET NAME%===>_PODSN\n+                    %===>_EBCDIC   +EBCDIC/BCD\n+\n+\n+   NOTE: IF YOU EXPERIENCE AN ABEND 106-C WHEN USING THIS CHECKER\n+         IT JUST MEANS YOU REQUIRE MORE REGION. LOGOFF AND LOGON\n+         SPECIFYING A BIGGER REGION. I.E.  SIZE(1500)\n)INIT\n .CURSOR = PODSN\n &EBCDIC = TRANS (&EBCDIC ' ',EBCDIC,*,*)\n)PROC\n VER (&PODSN,NONBLANK)    VER(&PODSN,DSNAME)\n VER (&EBCDIC,NONBLANK)   VER(&EBCDIC,LIST,EBCDIC,BCD)\n &SEL  =  'CMD(%FORTX#C)'\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FORTX#S": {"ttr": 5648, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x00\\x00\\x84\\x19/\\x00\\x86\\x05?\\x15\\x14\\x00\\x0e\\x00\\t\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1984-07-10T00:00:00", "modifydate": "1986-02-22T15:14:00", "lines": 14, "newlines": 9, "modlines": 0, "user": "SS02JDM"}, "text": "PROC 0\nCONTROL PROMPT NOFLUSH\nFORTX    &PODSN      +\n         NOMSG       +\n         NOSOURCE    +\n         PRINT(*)    +\n         NOOBJECT    +\n         NOMAP       +\n         NOGOSTMT    +\n         NOID        +\n         NOMSG       +\n         TERM(*)     +\n         NOINDEX     +\n         &EBCDIC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FREEA#C": {"ttr": 5650, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x84\\x19\\x8f\\x00\\x84\\x19\\x8f\\x11\\x17\\x00\\x0b\\x00\\x0b\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1984-07-16T00:00:00", "modifydate": "1984-07-16T11:17:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "SS02JDM"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------------*/\n/*      PDF CLIST  FOR TSO COMMAND 'FREEALL'                    */\n/*--------------------------------------------------------------*/\nCONTROL NOLIST NOMSG NOFLUSH PROMPT\nIF &DEBUG NE &STR() THEN +\n  CONTROL LIST MSG NOFLUSH PROMPT CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nFREEALL\nTPRINT 'FREEALL HAS COMPLETED'\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HLASM": {"ttr": 5652, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99&\\x1f\\x00\\x99&\\x1f\\x108\\x00\\xe3\\x00\\xf3\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-09-18T00:00:00", "modifydate": "1999-09-18T10:38:00", "lines": 227, "newlines": 243, "modlines": 0, "user": "S218"}, "text": "         TITLE 'HIGH LEVEL ASSEMBLER SYNTAX CHECKER'\n*---------------------------------------------------------------------*\n*\n*       THIS PROGRAM WAS WRITTEN AS AN EXERCISE TO SEE IF ONE ALC\n*       PROGRAM COULD DO DUPLICATE THE FUNCTIONS OF WRITING A TRUE\n*       TSO COMMAND PROCESSOR.  ALSO I WANTED SOMETHING WHICH COULD\n*       BE EASILY MAINTAINED BY LESS THAN GENIUS ASSEMBLER PROGRAMMERS.\n*       ALTERNATIVE.\n*\n*       TO ACCOMPLISH THE ABOVE STATED GOAL, I USED THE EXAMPLE TO\n*       CREATING A HIGH LEVEL ASSEMBLER SYNATX CHECKER FOR DOING A\n*       VERY FAST INTERACTIVE COMPILE WITHOUT ALL THE OVERHEAD OF\n*       LETTING THE USERS CREATE OBJECT MODULES, LISTINGS, ETC.  IF\n*       A USER CAN BE CODING IN ONE SPLIT SCREEN OF AN ISPF SESSION,\n*       SAVE THE CODE AND SWAP TO THE OTHER SCREEN, THEN BY DOING A\n*       QUICK SYNTAX CHECK, THE PERSON COULD FIX ERRORS AND CONTINUE\n*       CODING.  I DO THIS NOW AND IT MAKES FOR RAPID ALC DEVELOPMENT.\n*       FOR THOSE WHO ARE NOT ALC TYPES, THIS TECHNIQUE CAN BE USED\n*       FOR COBOL, FORTRAN, ETC.\n*\n*       TO ACHIEVE THE GOAL OF WRITING A \"PSEUDO TSO CP\", ONE CAN\n*       DO THE FOLLOWING:\n*\n*       1. USE THE FUNCTIONS OF CLIST OR REXX TO REPLACE THE TSO CP\n*          FUNCTIONS OF IKJDAIR AND PARSING THE COMMAND STRING FOR\n*          THE VARIABLES.  ALLOCATIONS AND CHECKING THOSE ALLOCATIONS\n*          ARE MADE IN THE CLIST.\n*\n*       2. THE VARIABLE INTRODUCTIONS IS DONE IN ISPF PANELS AND/OR\n*          SKELETONS.  THE PANEL CAN DO THE VALIDITY CHECKING OF\n*          WHAT SHOULD BE SPECIFIED.  THIS SAVES A WHOLE BUNCH OF\n*          IN TO TSO CP TO DO THE SAME.\n*\n*       3. FINALLY THE ALC PROGRAM MUST LOOK LIKE A TSO CP AND BE\n*          PASSED ONLY THE VARIABLES IT NEEDS IN THE PARM STRING.\n*          THE FORMAT OF THE PARM STRING CAN BE CONSTRUCTED IN THE\n*          CLIST (REXX) EXEC.  THE ALC PROGRAM JUST MUST ACT KNOW\n*          THAT THE ADDRESS PASSED TO IT IS AN ADDRESS OF A TSO\n*          CPPL.  THEN ONE CHAINS DOWN TO GET THE PARM STRING IN\n*          THE COMMAND BUFFER.\n*\n*       4. SINCE ALL OF THE TOUGH STUFF IS DONE IN THE CLIST AND\n*          ISPF, THE ABILITY TO RUN IN 24 OR 32 BIT MODE IS\n*          DEPENDENT ON THE PROGRAM YOU WILL INVOKE.\n*\n*       5. THERE IS ONE CLIST AND ISPF PANEL WHICH GOES ALONG WITH\n*          THIS PROGRAM.\n*\n*       JIM MARSHALL, CAPT, USAF (RET)\n*       DEPARTMENT OF TREASURY/FINANCIAL MANAGEMENT SERVICE\n*\n* INSTALLED:  01 MAY 97\n*\n* CHANGE LOG: NONE\n*---------------------------------------------------------------------*\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nSP000    EQU   0\n         SPACE\nHLASM    CSECT\nHLASM    AMODE 24\nHLASM    RMODE 24\n         SAVE  (14,12),,HLASM_&SYSDATE &SYSTIME\n         LR    R12,R15\n         USING HLASM,R12\n         LR    R11,R1              SAVE PARAMETER REGISTER\n         USING CPPL,R11            ESTABLISH ADDR TO CPPL\n         GETMAIN RU,LV=WORKSIZE,SP=SP000,LOC=BELOW\n         USING WORKAREA,R1\n         ST    R13,SAVE+4\n         ST    R1,8(R13)\n         LR    R13,R1\n         DROP  R1\n         USING WORKAREA,R13\n         SPACE\n*-------------------------------------------------------------------*\n*        MOVE OUR STATIC PARAMETER LIST FROM STORAGE TO THE BUFFER\n*        IN GOTTEN STORAGE.\n*-------------------------------------------------------------------*\n         SPACE\n         LA    R2,SOPTSL           GET FORCE OPTS LENGTH\n         STH   R2,OPTLEN           STORE OUR COMBINED AMOUNT\n         MVC   OPTS(SOPTSL),SOPTS  MOVE IN FORCED OPTIONS\n         LA    R2,OPTS             GET ADDR OF OPTION AREA\n         LH    R1,OPTLEN           GET LENGTH OF STAN OPTIONS\n         AR    R2,R1               CALCULATE ADDR TO PLACE NEW OPTS\n         SPACE\n*-------------------------------------------------------------------*\n*        PROCESS THE CMD BUFFER TO GET THE REST OF THE PARMS TO\n*        PASS TO THE HIGH LEVEL ASSEMBLER.\n*\n*        CMD BUFFER\n*          2   2\n*        *---*---*---------------------------------------*\n*        *BUF*CMD*HLASM 'BATCH,TERM'                     *\n*        *LEN*LEN*                                       *\n*        *---*---*---------------------------------------*\n*\n*-------------------------------------------------------------------*\n         SPACE\n         L     R10,CPPLCBUF        LOAD R10 W/ADDR OF INPUT CMD BUF\n         LH    R9,0(,R10)          GET LENGTH OF CMD BUFFER\n         LTR   R9,R9               IS IT ZERO??\n         BZ    ABEND1              SOMETHING IS AMISS??\n         LH    R9,2(,R10)          GET LENGTH OF 1ST CMD\n         LTR   R9,R9               IS IT ZERO??\n         BZ    ABEND2              SOMETHING IS AMISS??\n         SPACE\n*-------------------------------------------------------------------*\n*        NOW WE START DOWN THE CMD BUFFER LOOKING FOR THE 1ST\n*        QUOTE AND WHEN FOUND MOVE EVERYTHING UNTIL YOU FIND THE\n*        NEXT QUOTE.\n*-------------------------------------------------------------------*\n         SPACE\n         LA    R10,4(,R10)         POINT TO 1ST CHAR IN BUFFER\nBUFLOOP  EQU   *\n         CLI   0(R10),X'7D'        FOUND SINGLE QUOTE\n         BE    CPLOOP1\n         LA    R10,1(,R10)         MOVE ALONG IN BUFFER\n         B     BUFLOOP\n         SPACE\nCPLOOP1  EQU   *\n         LA    R10,1(,R10)         SKIP OVER 1ST SINGLE QUOTE\n         LH    R4,OPTLEN           GET OPTION LENGTH\nCPLOOP2  EQU   *\n         CLI   0(R10),X'7D'        FOUND 2ND SINGLE QUOTE?\n         BE    CPLOOP3\n         MVC   0(1,R2),0(R10)      MOVE IN 1 BYTE\n         LA    R2,1(,R2)           MOVE ALONG IN INPUT BUF\n         LA    R10,1(,R10)         MOVE ALONG IN OUTPUT BUF\n         LA    R4,1(,R4)           UP THE COUNT BY ONE\n         B     CPLOOP2\n         SPACE\nCPLOOP3  EQU   *\n         STH   R4,OPTLEN           SAVE FINAL COUNT\n         SPACE\n*-------------------------------------------------------------------*\n*        LINK OFF TO THE HIGH LEVEL ASSEMBLER\n*-------------------------------------------------------------------*\n         SPACE\n         LA    R8,OPTS\n         LH    R9,OPTLEN\n         TPUT  (R8),(R9),R         PUT IT TO SCREEN\n         LA    R3,OPTLIST\n         LINK  EP=ASMA90,PARAM=((R3),DDNLIST),VL=1\n         SPACE\n*--------------------------------------------------------------------*\n*        NOW WE CLEANUP AFTER OURSELVES AND GO HOME.\n*--------------------------------------------------------------------*\n         SPACE\nEOJ      EQU   *\n         LR    R1,R13\n         L     R13,SAVE+4\n         ST    R15,16(,R13)            PASS HLASM  RC BACK\n         FREEMAIN RU,LV=WORKSIZE,A=(R1),SP=SP000\n         LM    R14,R12,12(R13)\n         BR    R14\n         SPACE\nABEND1   ABEND 1\nABEND2   ABEND 2\n         SPACE\n*--------------------------------------------------------------------*\n*        DATA AREA\n*--------------------------------------------------------------------*\n         SPACE\n         LTORG\n         SPACE\n         DC    H'0'                FILL AREA\nSTANOPTS EQU   *\n         DC    H'0'                LENGTH OF STANDARD OPTION\nSOPTS    EQU   *\n         DC    C'NODECK,'          NO OBJ DECK\n         DC    C'NODX,'            NO DSECT XREF LISTING\n         DC    C'NOESD,'           NO EXT SYMBOL DICT LISTING\n         DC    C'NOLIST,'          NO LISTING\n         DC    C'NOMX,'            NO MACRO XREF LISTING\n         DC    C'NOOBJ,'           NO OBJECT CODE\n         DC    C'NORLD,'           NO RELOCATION DICTIONARY\n         DC    C'TERM(NARROW),'    TERMINAL\n         DC    C'NOXREF,'          NO XREF LISTING\nSOPTSL   EQU   *-SOPTS\n         SPACE\n         DS    0F\n         DC    H'0'                FILL AREA\nDDNLIST  EQU   *\nDDNLEN   DC    H'96'               LENGTH OF DDNAME LIST\nDDNAMES  EQU   *\n         DC    CL8'HASMLIN '       01 - SYSLIN\n         DC    XL8'00'             02 - N/A\n         DC    XL8'00'             03 - N/A\n         DC    CL8'HASMLIB '       04 - SYSLIB\n         DC    CL8'HASMIN  '       05 - SYSIN\n         DC    CL8'HASMPRT '       06 - SYSPRINT\n         DC    CL8'HASMPUN '       07 - SYSPUNCH\n         DC    CL8'HASMUT1 '       08 - SYSUT1\n         DC    XL8'00'             09 - N/A\n         DC    XL8'00'             10 - N/A\n         DC    XL8'00'             11 - N/A\n         DC    CL8'HASMTERM'       12 - SYSTERM\nDDNAMESL EQU   *-DDNAMES\n         SPACE\nWORKAREA DSECT\nSAVE     DS    18F\n         DS    0F\n         DS    H                   FILL AREA\nOPTLIST  EQU   *\nOPTLEN   DS    H                   LENGTH OF OPTIONS\nOPTS     DS    XL140               PLACE TO PUT OPTION\nWORKSIZE EQU   *-WORKAREA\n         SPACE\nCPPL     IKJCPPL\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HLASM$": {"ttr": 5891, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99&\\x1f\\x00\\x99&\\x1f\\x109\\x00\\x0f\\x00\\x0f\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-09-18T00:00:00", "modifydate": "1999-09-18T10:39:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "S218"}, "text": "//*--------------------------------------------------------------*\n//*        INSTALL OF THE 'HLASM' TSO CMD                        *\n//*--------------------------------------------------------------*\n//HLASM    EXEC ASMHCL,COND=(0,NE),\n//         PARM.C='OBJECT,NODECK,ALIGN,TERM,LIST,NORENT',\n//         PARM.L='MAP,LIST,NORENT'\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.AMODGEN,DISP=SHR\n//SYSTERM  DD SYSOUT=*\n//SYSIN    DD DSN=SHARE.SOURCE(HLASM),DISP=SHR\n//L.SYSLMOD DD DISP=SHR,UNIT=,SPACE=,DCB=,\n//            DSN=SHARE.LINKLIB\n//SYSIN   DD *\n NAME HLASM(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HLASM#C": {"ttr": 5893, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x010\\x00\\x00\\x00\\x97\\x08o\\x00\\x99\\x19\\x9f\\x13\\x07\\x00\\xa5\\x005\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.48", "flags": 0, "createdate": "1997-03-27T00:00:00", "modifydate": "1999-07-18T13:07:00", "lines": 165, "newlines": 53, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      INVOKE THE HIGH LEVEL ASSEMBLER                   */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST   MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nISPEXEC VGET (HLDSN,HLMAC,HLRENT,HLFOLD,HLTERM) SHARED\nIF &HLRENT = &STR() THEN +\n   DO\n   SET  &HLRENT = &STR(NORENT)\n   END\nIF &HLFOLD = &STR() THEN +\n   DO\n   SET  &HLFOLD = &STR(NOFOLD)\n   END\nIF &HLTERM = &STR() THEN +\n   DO\n   SET  &HLTERM = &STR(TERM)\n   END\n/*--------------------------------------------------------*/\n/*      MAKE MOST OF THE ALLOCATIONS HERE                 */\n/*--------------------------------------------------------*/\nALLOC FI(HASMLIN) DUMMY REUSE\nALLOC FI(HASMPUN) DUMMY REUSE\nCONTROL NOMSG\nFREE  FI(HASMUT1)\nCONTROL MSG\nALLOC FI(HASMUT1) UNIT(VIO) SPACE(1 1) CYL NEW DELETE\n/*--------------------------------------------------------*/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY SAVE\n   ISPEXEC ADDPOP COLUMN(1) ROW(1)\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(HLASM#P)\n   SET &RC = &LASTCC\n   ISPEXEC REMPOP\n   IF &RC = 8 THEN GOTO QUIT\n   IF  &MAXCC NE 0  THEN  GOTO ERRMSG\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*   CHECK TO SEE IF ALL THE FILES ARE REALLY THERE.      */\n   /*--------------------------------------------------------*/\n   IF  &SYSDSN(&HLDSN)  \u00ac=  OK  THEN  +\n       DO\n       WRITE\n       WRITE   ERROR: INPUT FILE DOES NOT EXIST OR MIGHT NOT\n       WRITE          BE CATALOGED.\n       WRITE\n       GOTO LOOP\n       END\n   ELSE   +\n       DO\n       ALLOC FI(HASMIN) DA(&HLDSN)  SHR REUSE\n       END\n   /* ---------------------------------------------------------- */\n   IF &HLMAC  =  &Z   THEN  +\n      DO\n      ALLOC FI(HASMLIB) DA('SYS1.MACLIB') SHR REUSE\n      END\n   ELSE  +\n      DO\n      IF  &SYSDSN(&HLMAC)  \u00ac=  OK  THEN +\n          DO\n          WRITE\n          WRITE   ERROR: MACLIB FILE DOES NOT EXIST OR MIGHT NOT\n          WRITE          BE CATALOGED.\n          WRITE\n          GOTO LOOP\n          END\n      ALLOC FI(HASMLIB) DA('SYS1.MACLIB',  +\n                           &HLMAC)    SHR REUSE\n      END\n   /* ---------------------------------------------------------- */\n   SELECT\n   WHEN  (&HLTERM  = &STR(TERM))  +\n       DO\n       ALLOC FI(HASMTERM) DA(*)  REUSE\n       ALLOC FI(HASMPRT) DUMMY REUSE\n       SET  &OPT1 = &STR(TERM,NOLIST)\n       END\n   WHEN  (&HLTERM  = &STR(BROWSE))  +\n       DO\n       CONTROL  NOMSG\n       DELETE   $TERM$.$HLASM$\n       CONTROL  MSG\n       ALLOC FI(HASMTERM) DA($TERM$.$HLASM$)  NEW CATALOG +\n             SPACE(1 1) TRACKS\n       SET  &OPT1 = &STR(TERM(NARROW),LIST)\n       ALLOC FI(HASMPRT) DUMMY REUSE\n       END\n   WHEN  (&HLTERM  = &STR(LIST))  +\n       DO\n       CONTROL  NOMSG\n       DELETE   $LIST$.$HLASM$\n       CONTROL  MSG\n       ALLOC FI(HASMPRT) DA($LIST$.$HLASM$) NEW CATALOG +\n             SPACE(5 5) TRACKS\n       ALLOC FI(HASMTERM) DUMMY REUSE\n       SET  &OPT1 = &STR(NOTERM)\n       END\n   OTHERWISE  +\n       DO\n       WRITE   OPTION ERROR.\n       END\n   END        /* END SELECT */\n   /* ---------------------------------------------------------- */\n   WRITE\n   HLASM  '&HLRENT,&HLFOLD,&OPT1'\n   /* ---------------------------------------------------------- */\n   SELECT\n   WHEN  (&HLTERM  = &STR(TERM))  +\n       DO\n       FREE  FI(HASMTERM,HASMPRT)\n       ISPEXEC CONTROL DISPLAY RESTORE\n       END\n   WHEN  (&HLTERM  = &STR(BROWSE))  +\n       DO\n       ISPEXEC BROWSE DATASET($TERM$.$HLASM$)\n       IF &LASTCC = 12 THEN +\n          DO\n          WRITE   BROWSE ERROR\n          END\n       FREE  FI(HASMPRT)\n       CONTROL  NOMSG\n       DELETE   $TERM$.$HLASM$\n       CONTROL  MSG\n       ISPEXEC CONTROL DISPLAY RESTORE\n       END\n   WHEN  (&HLTERM  = &STR(LIST))  +\n       DO\n       ISPEXEC BROWSE DATASET($LIST$.$HLASM$)\n       IF &LASTCC = 12 THEN +\n          DO\n          WRITE   BROWSE ERROR\n          END\n       FREE  FI(HASMTERM)\n       CONTROL  NOMSG\n       DELETE   $LIST$.$HLASM$\n       CONTROL  MSG\n       ISPEXEC CONTROL DISPLAY RESTORE\n       END\n   END        /* END SELECT */\n/*--------------------------------------------------------*/\n   FREE  FI(HASMLIB)\n   GOTO LOOP\n/*--------------------------------------------------------*/\n/*   WE WILL BUILD THE CMD AND SAVE THE VARIABLES, WHY ?  */\n/*   SHALL BE BACK AND PROBABLY TO COMPILE THE SAME CODE! */\n/*--------------------------------------------------------*/\nERRMSG:  +\n  WRITE  **  SEVERE  PANEL  ERROR ***\nQUIT:    +\nISPEXEC VPUT (HLDSN,HLMAC,HLRENT,HLFOLD,HLTERM) SHARED\nCONTROL  NOMSG\nDELETE   $TERM$.$HLASM$\nFREE FI(HASMLIN,HASMPRT,HASMTERM,HASMIN,HASMLIB,HASMPUN,HASMUT1)\nALLOC FI(SYSPRINT) DA(*)\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HLASM#P": {"ttr": 5897, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x00\\x00\\x97\\x12\\x0f\\x00\\x99\\x17/\\x07$\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "1997-04-30T00:00:00", "modifydate": "1999-06-21T07:24:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(64,13) CMD(ZCMD)\n+\n+ COMMAND%===>_ZCMD                                            +\n+\n+ ENTER\n+   DATASET NAME%===>_HLDSN\n+    USER MACLIB%===>_HLMAC\n+               %===>_HLRENT+  RENT/NORENT  REENTRANT CHECK\n+               %===>_HLFOLD+  FOLD/NOFOLD  FOLD TO UPPER CASE\n+               %===>_HLTERM+  TERM         ERRORS AT TERMINAL\n+                              BROWSE       BROWSE ERROR FILE\n+                              LIST         BROWSE FULL LIST\n+\n+\n)INIT\n .CURSOR = HLDSN\n &ZWINTTL = 'Tool Box: Cheap High Level Assembler Cheaker'\n)PROC\n VER (&HLDSN,NONBLANK)\n VER(&HLDSN,DSNAME)\n IF (&HLMAC \u00ac= &Z)\n     VER(&HLMAC,NONBLANK) VER(&HLMAC,DSNAME)\n VER (&HLRENT,NONBLANK)  VER(&HLRENT,LIST,RENT,NORENT)\n VER (&HLFOLD,NONBLANK)  VER(&HLFOLD,LIST,FOLD,NOFOLD)\n VER (&HLTERM,NONBLANK)  VER(&HLTERM,LIST,TERM,BROWSE,LIST)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#C": {"ttr": 5899, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x17/\\x00\\x99\\x17/\\t \\x00\\r\\x00\\r\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-06-21T00:00:00", "modifydate": "1999-06-21T09:20:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/* ----------------------------------------------------------- */\n/* THIS CLIST CAN BE USED TO INVOKE THE TOOL BOX               */\n/*                                                             */\n/*                    JIM MARSHALL                             */\n/* ----------------------------------------------------------- */\nCONTROL NOLIST NOMSG  NOFLUSH  PROMPT\nIF  &DEBUG \u00ac= &STR() THEN  +\n    CONTROL  MSG  LIST  CONLIST  SYMLIST\nISPEXEC ADDPOP COLUMN(1) ROW(1)\nISPEXEC SELECT PANEL(IDT#P)\nISPEXEC REMPOP\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IDT#C0": {"ttr": 5901, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x00\\x00\\x88\\x18\\x9f\\x00\\x99\\x16o\\x166\\x00\\xcf\\x00\\x86\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "1988-07-07T00:00:00", "modifydate": "1999-06-15T16:36:00", "lines": 207, "newlines": 134, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/* ----------------------------------------------------------------- */\n/*     JIM MARSHALL                                                  */\n/*     TRANSMIT / RECEIVE SYSTEM                                     */\n/*     'TRANSMIT MEMBERS OF A PDS TO TSO  USER'                      */\n/* ----------------------------------------------------------------- */\n\nCONTROL NOLIST NOMSG NOFLUSH PROMPT    /* SET DEFAULT LIST OPTION */\nIF &DEBUG = DEBUG                +\n  THEN CONTROL LIST,MSG,CONLIST, +\n               SYMLIST\nSET &NSY     = &STR()\nSET &SY      = &STR()\nSET &TUSER   = &STR()\nSET &NTF     = &STR(YES)\nSET &MES     = &STR(NO)\nSET &WHOUSER = &STR()\nSET &M0      = &STR()\nISPEXEC CONTROL ERRORS RETURN\nSET ZWINTTL = &STR(IDTF: TRANSMIT FILE TO A TSO USER)\nLOOP:  +\n       ISPEXEC CONTROL DISPLAY REFRESH\n       ISPEXEC ADDPOP COLUMN(2) ROW(2)\n       SET &LASTCC = 0\n       SET &MAXCC  = 0\n       ISPEXEC DISPLAY PANEL(IDT#P0)\n       SET  &RC = &LASTCC\n       ISPEXEC REMPOP\n       IF &RC = 8 THEN GOTO EXIT\n       IF  &MAXCC NE 0  THEN  GOTO ERRMSG\n       /* ------------------------------------------------------ */\n       /*   NOW WE WILL CHECK TO SEE IF THE FILE EXISTS          */\n       /* ------------------------------------------------------ */\n       SET &LASTCC = 0\n       IF  &SYSDSN(&IFILE)  \u00ac= OK  THEN +\n           DO\n           WRITE\n           WRITE DSN=&IFILE   DOES NOT EXIST OR IS\n           WRITE NOT CATALOGED. PLEASE CORRECT !\n           WRITE\n           GOTO LOOP\n           END\n       /*--------------------------------------------------------*/\n       /*    SINCE THE FILE EXISTS, WE NEED TO CONSTRUCT THE     */\n       /*    NODE NAME TRANSPARENT TO THE USER.                  */\n       /*--------------------------------------------------------*/\n       SET   &LASTCC = 0\n       SELECT\n         WHEN (&SY = 1A) +\n           DO\n           SET  &NSY = &STR(FMSROC1A)\n           END\n         WHEN (&SY = 1B) +\n           DO\n           SET  &NSY = &STR(FMSROC1B)\n           END\n         WHEN (&SY = 1C) +\n           DO\n           SET  &NSY = &STR(FMSROC1C)\n           END\n         WHEN (&SY = 1E) +\n           DO\n           SET  &NSY = &STR(FMSROC1E)\n           END\n         WHEN (&SY = 1F) +\n           DO\n           SET  &NSY = &STR(FMSROC1F)\n           END\n         WHEN (&SY = 2A) +\n           DO\n           SET  &NSY = &STR(FMSROC2A)\n           END\n         WHEN (&SY = 2B) +\n           DO\n           SET  &NSY = &STR(FMSROC2B)\n           END\n         WHEN (&SY = 2C) +\n           DO\n           SET  &NSY = &STR(FMSROC2C)\n           END\n         WHEN (&SY = 3A) +\n           DO\n           SET  &NSY = &STR(FMSROC3A)\n           END\n         WHEN (&SY = 3B) +\n           DO\n           SET  &NSY = &STR(FMSROC3B)\n           END\n         WHEN (&SY = 3C) +\n           DO\n           SET  &NSY = &STR(FMSROC3C)\n           END\n         OTHERWISE  +\n           DO\n           WRITE  NODE NUMBER ERROR = &SY\n           GOTO  ENDIT\n           END\n       END\n       /* ------------------------------------------------------ */\n       SET &WHOUSER = &STR(&NSY..&TUSER)\n       /* ------------------------------------------------------ */\n       IF  &NTF = &STR(YES)  THEN  +\n           DO\n           SET &NOTFY  =  &STR(NOTIFY(ALL))\n           END\n       ELSE  +\n           DO\n           SET &NOTFY  =  &STR(NONOTIFY)\n           END\n       /* ------------------------------------------------------ */\n       IF    &MES = &STR(YES)  THEN  +\n           DO\n           SET &MESSAGE = &STR(MESSAGE)\n           END\n       ELSE  +\n           DO\n           SET &MESSAGE = &STR(       )\n           END\n       /* ------------------------------------------------------ */\n       CONTROL MSG\n       SET &XCMD = &STR( TSOEXEC TRANSMIT &WHOUSER DA(&IFILE))\n       SET &XCMD = &STR(&XCMD)&STR( &NOTFY &MESSAGE )\n       SET &XCMD = &STR(&XCMD) &STR( MEMBERS )\n       SET &LPARN = &STR((\n       SET &RPARN = )\n       SET &XCMD = &STR(&XCMD)&STR(&LPARN)\n       ISPEXEC LMINIT DATAID(XMITID) DATASET(&IFILE)\n                                       /* GENERATE DATAID           */\n       IF (&LASTCC \u00ac= 0)               /* CHECK THE CONDCODE        */ +\n          THEN GOTO ERREXIT            /*                           */\n       ISPEXEC LMOPEN DATAID(&XMITID)\n                                       /* OPEN THE DATASET          */\n       IF (&LASTCC \u00ac= 0)               /* CHECK THE CONDCODE        */ +\n          THEN GOTO ERREXIT            /*                           */\n       SET &DISPCMD = &STR(ISPEXEC LMMDISP DATAID(&XMITID))\n       SET &DISPCMD = &DISPCMD &STR(OPTION(DISPLAY)\n       SET &DISPCMD = &DISPCMD &STR( STATS(YES) COMMANDS(ANY)\n       IF (&STR(&M0)  \u00ac= )             /* WAS A PATTERN SUPPLIED    */ +\n          THEN SET &DISPCMD = &DISPCMD &STR( MEMBER(&STR(&M0))\nWRITE  &DISPCMD\n       SET &SAVECC = &LASTCC           /*                           */\n       IF (&SAVECC = 4  )              /* D/S PROBLEM BUT NOT FATAL */ +\n          THEN GOTO LOOP               /* REDISPLAY PANEL           */\n       IF (&SAVECC = 8  )              /* USER HIT END              */ +\n          THEN SET DONE = YES          /* SET LOOP CONTROL          */\n          ELSE SET &DONE = NO          /*                           */\n       IF (&SAVECC = 10 )              /* NO DATAID                 */ +\n          THEN GOTO ERREXIT            /*                           */\n       SET MEMSEL = NO                 /*                           */\n       DO WHILE (&DONE = NO)           /*                           */\n          IF (&SAVECC > 8)             /* DIS A SEVERE ERROR OCCUR  */ +\n             THEN GOTO ERREXIT         /* YES - LEAVE               */\n             ELSE DO                   /*                           */\n                SET &DONE1 = NO        /*                           */\n                DO WHILE (&DONE1 = NO)\n                   IF (&ZLLCMD = S)    /* WAS MEMBER SELECTED       */ +\n                      THEN DO          /* YES - ADD MEMBER TO LIST  */\n                          SET &XCMD = &STR(&XCMD)&STR( &ZLMEMBER)\n                          ISPEXEC LMMDISP DATAID(&XMITID) OPTION(PUT)  +\n                          MEMBER(&ZLMEMBER) ZLUDATA(*XMITTED)\n                          SET MEMSEL =  YES\n                       END             /*                           */\n                   IF (&ZLLCMD = B)    /* WAS MEMBER SELECTED       */ +\n                      THEN DO          /* YES - ADD MEMBER TO LIST  */\n                          ISPEXEC BROWSE MEMBER(&ZLMEMBER)             +\n                                  DATAID(&XMITID)\n                          SET &LASTCC  =  0\n                          ISPEXEC LMMDISP DATAID(&XMITID) OPTION(PUT)  +\n                          MEMBER(&ZLMEMBER) ZLUDATA(*BROWSED)\n                       END             /*                           */\n                   IF (&ZLLCMD = E)    /* WAS MEMBER SELECTED       */ +\n                      THEN DO          /* YES - ADD MEMBER TO LIST  */\n                          ISPEXEC EDIT   MEMBER(&ZLMEMBER)             +\n                                  DATAID(&XMITID)\n                          SET &LASTCC  =  0\n                          ISPEXEC LMMDISP DATAID(&XMITID) OPTION(PUT)  +\n                          MEMBER(&ZLMEMBER) ZLUDATA(*EDITED)\n                       END             /*                           */\n                   ISPEXEC LMMDISP DATAID(&XMITID) OPTION(GET)\n                                       /* SEE IF THERE ARE MORE     */\n                                       /* MEMBERS TO PROCESS        */\n                   IF (&LASTCC = 8)    /*                           */ +\n                      THEN SET &DONE1 = YES\n                END                    /*                           */\n             END                       /*                           */\nWRITE  &DISPCMD\n       SET &SAVECC = &LASTCC           /*                           */\n       IF (&SAVECC = 8)                /* DID USER HIT END          */ +\n          THEN SET &DONE = YES         /* YES - WE ARE DONE         */\n       END                             /*                           */\n       SET &XCMD = &STR(&XCMD)&STR(&RPARN)\n       IF (&DEBUG = DEBUG)             /* IF NOT IN DEBUG MODE      */ +\n           THEN DO                     /* ISSUE COMMAND             */\n             WRITE &XCMD               /*                           */\n             GOTO LMCLOSE              /* ISSUE COMMAND             */\n           END                         /*                           */\n       IF (&MEMSEL = YES)              /* DID USER SELECT MEMBERS   */ +\n           THEN       &XCMD            /* YES - ISSUE COMMAND JDM   */\nLMCLOSE: +\n       ISPEXEC LMCLOSE DATAID(&XMITID)\n                                       /* CLOSE THE DATASET         */\n       ISPEXEC CONTROL DISPLAY REFRESH\n       GOTO  LOOP\nERRMSG:  +                             /*                           */\n  WRITE  **  SEVERE  PANEL  ERROR ***\nERREXIT: +                             /*                           */\n  EXIT CODE(0)                         /*                           */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IDT#C1": {"ttr": 5905, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x18\\x00\\x00\\x00\\x86\\x16\\x7f\\x00\\x99\\x17/\\x08Q\\x00b\\x00\\xef\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.24", "flags": 0, "createdate": "1986-06-16T00:00:00", "modifydate": "1999-06-21T08:51:00", "lines": 98, "newlines": 239, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/* ----------------------------------------------------------------- */\n/*     JIM MARSHALL                                                  */\n/*     TRANSMIT / RECEIVE SYSTEM                                     */\n/*     'TRANSMIT A MSG TO A TSO OR VM/CMS USER'                      */\n/* ----------------------------------------------------------------- */\nCONTROL NOFLUSH NOMSG\nIF &DEBUG \u00ac=  &STR() THEN +\n   CONTROL LIST MSG NOFLUSH PROMPT CONLIST SYMLIST\nSET &NSY     = &STR()\nSET &SY      = &STR()\nSET &TUSER   = &STR()\nSET &WHOUSER = &STR()\nLOOP:  +\n      ISPEXEC CONTROL DISPLAY REFRESH\n      ISPEXEC ADDPOP COLUMN(2) ROW(2)\n      SET  &LASTCC = 0\n      SET  &MAXCC  = 0\n      ISPEXEC DISPLAY PANEL(IDT#P1)\n      SET  &RC = &LASTCC\n      ISPEXEC REMPOP\n      IF &RC = 8 THEN GOTO ENDIT\n      IF  &MAXCC NE 0  THEN +\n           DO\n           SET &ENUM = &STR(C1A)\n           GOTO ERRMSG\n           END\n      SET  &LASTCC = 0\n      SET  &MAXCC  = 0\n       /*--------------------------------------------------------*/\n       /*    SINCE THE FILE EXISTS, WE NEED TO CONSTRUCT THE     */\n       /*    NODE NAME TRANSPARENT TO THE USER.                  */\n       /*--------------------------------------------------------*/\n       SET   &LASTCC = 0\n       SELECT\n         WHEN (&SY = 1A) +\n           DO\n           SET  &NSY = &STR(FMSROC1A)\n           END\n         WHEN (&SY = 1B) +\n           DO\n           SET  &NSY = &STR(FMSROC1B)\n           END\n         WHEN (&SY = 1C) +\n           DO\n           SET  &NSY = &STR(FMSROC1C)\n           END\n         WHEN (&SY = 1E) +\n           DO\n           SET  &NSY = &STR(FMSROC1E)\n           END\n         WHEN (&SY = 1F) +\n           DO\n           SET  &NSY = &STR(FMSROC1F)\n           END\n         WHEN (&SY = 2A) +\n           DO\n           SET  &NSY = &STR(FMSROC2A)\n           END\n         WHEN (&SY = 2B) +\n           DO\n           SET  &NSY = &STR(FMSROC2B)\n           END\n         WHEN (&SY = 2C) +\n           DO\n           SET  &NSY = &STR(FMSROC2C)\n           END\n         WHEN (&SY = 3A) +\n           DO\n           SET  &NSY = &STR(FMSROC3A)\n           END\n         WHEN (&SY = 3B) +\n           DO\n           SET  &NSY = &STR(FMSROC3B)\n           END\n         WHEN (&SY = 3C) +\n           DO\n           SET  &NSY = &STR(FMSROC3C)\n           END\n         OTHERWISE  +\n           DO\n           WRITE  NODE NUMBER ERROR = &SY\n           GOTO  ENDIT\n           END\n       END\n       /*--------------------------------------------------------*/\n       /*   NOW WE WILL INVOKE THE COMMAND AS BUILT.             */\n       /*--------------------------------------------------------*/\n       ISPEXEC CONTROL ERRORS RETURN\n       SET &WHOUSER = &STR(&NSY..&TUSER)\n       CONTROL MSG\n       TSOEXEC TRANSMIT &WHOUSER\n       ISPEXEC CONTROL DISPLAY REFRESH\n       GOTO  LOOP\nERRMSG:  +\n       WRITE  **  SEVERE PANEL - &ENUM   **\nENDIT:   +\n       EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IDT#C2": {"ttr": 6145, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x015\\x00\\x00\\x00\\x86\\x16\\x7f\\x00\\x99\\x17/\\x08R\\x00\\x87\\x00\\x17\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.53", "flags": 0, "createdate": "1986-06-16T00:00:00", "modifydate": "1999-06-21T08:52:00", "lines": 135, "newlines": 23, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/* ----------------------------------------------------------------- */\n/*     JIM MARSHALL                                                  */\n/*     TRANSMIT / RECEIVE SYSTEM                                     */\n/*     'TRANSMIT A FILE TO A TSO OR VM/CMS USER'                     */\n/* ----------------------------------------------------------------- */\nCONTROL NOFLUSH NOMSG\nIF &DEBUG \u00ac=  &STR() THEN +\n   CONTROL LIST MSG NOFLUSH PROMPT CONLIST SYMLIST\nSET &NSY    =  &STR()\nSET &SY     =  &STR()\nSET &NTF    =  &STR(YES)\nSET &MSN    =  &STR(NO)\nSET &DOMSG  =  &STR()\nSET &TUSER  =  &STR()\nSET &IFILE  =  &STR()\nSET &WHOUSER = &STR()\nSET &TYP     = &STR(SEQ)\nSET &NOTFY  =  &STR()\nLOOP:  +\n       ISPEXEC CONTROL DISPLAY REFRESH\n       ISPEXEC ADDPOP COLUMN(2) ROW(2)\n       SET &LASTCC = 0\n       SET &MAXCC  = 0\n       ISPEXEC DISPLAY PANEL(IDT#P2)\n       SET  &RC = &LASTCC\n       ISPEXEC REMPOP\n       IF &RC = 8 THEN GOTO ENDIT\n       IF  &MAXCC NE 0  THEN +\n           DO\n           SET &ENUM = &STR(C2A)\n           GOTO ERRMSG\n           END\n       /*--------------------------------------------------------*/\n       /*    NOW WE WANT TO CHECK THE EXISTENCE OF THE FILE, IF  */\n       /*    IT DOES NOT EXIST, THEN WE WILL TELL THE USER.      */\n       /*--------------------------------------------------------*/\n       SET   &LASTCC = 0\n       IF    &SYSDSN(&IFILE) \u00ac= OK  THEN +\n             DO\n             WRITE\n             WRITE &IFILE\n             WRITE DOES NOT EXIST OR IS NOT CATALOGED.\n             WRITE PLEASE CORRECT.\n             WRITE\n             GOTO LOOP\n             END\n       /*--------------------------------------------------------*/\n       /*    SINCE THE FILE EXISTS, WE NEED TO CONSTRUCT THE     */\n       /*    NODE NAME TRANSPARENT TO THE USER.                  */\n       /*--------------------------------------------------------*/\n       SET   &LASTCC = 0\n       SELECT\n         WHEN (&SY = 1A) +\n           DO\n           SET  &NSY = &STR(FMSROC1A)\n           END\n         WHEN (&SY = 1B) +\n           DO\n           SET  &NSY = &STR(FMSROC1B)\n           END\n         WHEN (&SY = 1C) +\n           DO\n           SET  &NSY = &STR(FMSROC1C)\n           END\n         WHEN (&SY = 1E) +\n           DO\n           SET  &NSY = &STR(FMSROC1E)\n           END\n         WHEN (&SY = 1F) +\n           DO\n           SET  &NSY = &STR(FMSROC1F)\n           END\n         WHEN (&SY = 2A) +\n           DO\n           SET  &NSY = &STR(FMSROC2A)\n           END\n         WHEN (&SY = 2B) +\n           DO\n           SET  &NSY = &STR(FMSROC2B)\n           END\n         WHEN (&SY = 2C) +\n           DO\n           SET  &NSY = &STR(FMSROC2C)\n           END\n         WHEN (&SY = 3A) +\n           DO\n           SET  &NSY = &STR(FMSROC3A)\n           END\n         WHEN (&SY = 3B) +\n           DO\n           SET  &NSY = &STR(FMSROC3B)\n           END\n         WHEN (&SY = 3C) +\n           DO\n           SET  &NSY = &STR(FMSROC3C)\n           END\n         OTHERWISE  +\n           DO\n           WRITE  NODE NUMBER ERROR = &SY\n           GOTO  ENDIT\n           END\n       END\n       /*--------------------------------------------------------*/\n       /*    CONTINUE ON CREATING THE REST OF THE VARIABLES.     */\n       /*--------------------------------------------------------*/\n       SET &WHOUSER = &STR(&NSY..&TUSER)\n       /*--------------------------------------------------------*/\n       IF  &NTF = &STR(YES)  THEN  +\n           DO\n           SET  &NOTFY = &STR(NOTIFY(ALL))\n           END\n       ELSE  +\n           DO\n           SET  &NOTFY = &STR(NONOTIFY)\n           END\n       /*--------------------------------------------------------*/\n       IF  &MSN  = &STR(YES) THEN  +\n           DO\n           SET  &DOMSG = &STR(MSG)\n           END\n       ELSE  +\n           DO\n           SET  &DOMSG = &STR()\n           END\n       /*--------------------------------------------------------*/\n       ISPEXEC CONTROL ERRORS RETURN\n       CONTROL MSG\n       TSOEXEC TRANSMIT &WHOUSER &TYP DA(&IFILE) &NOTFY &DOMSG\n       ISPEXEC CONTROL DISPLAY REFRESH\n       GOTO  LOOP\nERRMSG:  +\n       WRITE  **  SEVERE PANEL - &ENUM   **\nENDIT:   +\n       EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IDT#C3": {"ttr": 6148, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x00\\x00\\x86\\x16\\x9f\\x00\\x99\\x17/\\x08X\\x00$\\x00\\x1b\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "1986-06-18T00:00:00", "modifydate": "1999-06-21T08:58:00", "lines": 36, "newlines": 27, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/* ----------------------------------------------------------------- */\n/*     JIM MARSHALL                                                  */\n/*     TRANSMIT / RECEIVE SYSTEM                                     */\n/*     'TRANSMIT A MSG TO TSO OR VM/CMS USERS USING DISTR. LIST'     */\n/* ----------------------------------------------------------------- */\nCONTROL NOFLUSH NOMSG\nIF &DEBUG \u00ac=  &STR() THEN +\n   CONTROL LIST MSG NOFLUSH PROMPT CONLIST SYMLIST\nSET &TUSER = &STR()\nLOOP:  +\n       ISPEXEC CONTROL DISPLAY REFRESH\n       ISPEXEC ADDPOP COLUMN(2) ROW(2)\n       SET &LASTCC = 0\n       SET &MAXCC  = 0\n       ISPEXEC DISPLAY PANEL(IDT#P3)\n       SET  &RC = &LASTCC\n       ISPEXEC REMPOP\n       IF &RC = 8 THEN GOTO ENDIT\n       IF  &MAXCC NE 0  THEN +\n           DO\n           SET &ENUM = &STR(C3A)\n           GOTO ERRMSG\n           END\n/* ----------------------------------------------------------------- */\n/*     WE WILL INVOKE THE COMMAND.                                   */\n/* ----------------------------------------------------------------- */\n       ISPEXEC CONTROL ERRORS RETURN\n       CONTROL MSG\n       TSOEXEC TRANSMIT (&TUSER)\n       ISPEXEC CONTROL DISPLAY REFRESH\n       GOTO  LOOP\nERRMSG:  +\n       WRITE  **  SEVERE PANEL - &ENUM   **\nENDIT:   +\n       EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IDT#C4": {"ttr": 6150, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x00\\x00\\x86\\x16\\x9f\\x00\\x99\\x17/\\t0\\x00;\\x00E\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "1986-06-18T00:00:00", "modifydate": "1999-06-21T09:30:00", "lines": 59, "newlines": 69, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/* ----------------------------------------------------------------- */\n/*     JIM MARSHALL                                                  */\n/*     TRANSMIT / RECEIVE SYSTEM                                     */\n/*     'TRANSMIT A FILE TO TSO OR VM/CMS USERS USING DISTR LIST'     */\n/* ----------------------------------------------------------------- */\nCONTROL NOFLUSH   MSG  PROMPT\nIF &DEBUG \u00ac=  &STR() THEN +\n   CONTROL LIST MSG NOFLUSH PROMPT CONLIST SYMLIST\nSET &TUSER  = &STR()\nSET &TYP    = &STR(SEQ)\nSET &IFILE  = &STR()\nSET &NOTFY  = &STR()\nSET &NTF    = &STR(YES)\nISPEXEC CONTROL DISPLAY REFRESH\nLOOP:  +\n       ISPEXEC ADDPOP COLUMN(2) ROW(2)\n       SET &LASTCC = 0\n       SET &MAXCC  = 0\n       ISPEXEC DISPLAY PANEL(IDT#P4)\n       SET  &RC = &LASTCC\n       ISPEXEC REMPOP\n       IF &RC = 8 THEN GOTO ENDIT\n       IF  &MAXCC NE 0  THEN +\n           DO\n           SET &ENUM = &STR(C4A)\n           GOTO ERRMSG\n           END\n       /*--------------------------------------------------------*/\n       /*    NOW WE WANT TO CHECK THE EXISTENCE OF THE FILE. IF  */\n       /*    IT DOES NOT EXIST, THEN WE WILL TELL THE USER.      */\n       /*--------------------------------------------------------*/\n       SET   &LASTCC = 0\n       IF    &SYSDSN(&IFILE) \u00ac= OK  THEN +\n             DO\n             WRITE\n             WRITE DSN=&IFILE\n             WRITE DOES NOT EXIST OR IS NOT CATALOGED.\n             WRITE PLEASE CORRECT.\n             WRITE\n             GOTO LOOP\n             END\n       IF    &NTF = &STR(YES)  THEN  +\n             DO\n             SET  &NOTFY = &STR(NOTIFY(ALL))\n             END\n       ELSE  +\n             DO\n             SET  &NOTFY = &STR(NONOTIFY)\n             END\n       ISPEXEC CONTROL ERRORS RETURN\n       CONTROL MSG\n       TSOEXEC TRANSMIT (&TUSER) DA(&IFILE) &NOTFY\n       ISPEXEC CONTROL DISPLAY REFRESH\n       GOTO  LOOP\nERRMSG:  +\n       WRITE  **  SEVERE PANEL - &ENUM   **\nENDIT:   +\n       EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IDT#C5": {"ttr": 6152, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x00\\x00\\x00\\x86\\x17\\x1f\\x00\\x99\\x17/\\t\\x03\\x00\\x93\\x00\\x1b\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "1986-06-20T00:00:00", "modifydate": "1999-06-21T09:03:00", "lines": 147, "newlines": 27, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/* ----------------------------------------------------------------- */\n/*     JIM MARSHALL                                                  */\n/*     TRANSMIT / RECEIVE SYSTEM                                     */\n/*     'TRANSMIT MEMBERS OF A PDS TO TSO  USER'                      */\n/* ----------------------------------------------------------------- */\nCONTROL NOFLUSH NOMSG\nIF &DEBUG \u00ac=  &STR() THEN +\n   CONTROL LIST MSG NOFLUSH PROMPT CONLIST SYMLIST\nSET &NSY     = &STR()\nSET &SY      = &STR()\nSET &TUSER   = &STR()\nSET &NTF     = &STR(YES)\nSET &MSN     = &STR(NO)\nSET &DOMSG   = &STR()\nSET &WHOUSER = &STR()\nSET &M1      = &STR()\nSET &M2      = &STR()\nSET &M3      = &STR()\nSET &M4      = &STR()\nSET &M5      = &STR()\nSET &M6      = &STR()\nSET &M7      = &STR()\nSET &M8      = &STR()\nSET &M9      = &STR()\nSET &MA      = &STR()\nSET &MB      = &STR()\nSET &MC      = &STR()\nSET &MD      = &STR()\nSET &ME      = &STR()\nSET &MF      = &STR()\nISPEXEC CONTROL ERRORS RETURN\nLOOP:  +\n       ISPEXEC CONTROL DISPLAY REFRESH\n       ISPEXEC ADDPOP COLUMN(2) ROW(2)\n       SET &LASTCC = 0\n       SET &MAXCC  = 0\n       ISPEXEC DISPLAY PANEL(IDT#P5)\n       SET  &RC = &LASTCC\n       ISPEXEC REMPOP\n       IF &RC = 8 THEN GOTO ENDIT\n       IF  &MAXCC NE 0  THEN +\n           DO\n           SET &ENUM = &STR(C5A)\n           GOTO ERRMSG\n           END\n      /* -------------------------------------------------------- */\n      /*   NOW WE WILL CHECK TO SEE IF THE FILE EXISTS            */\n      /* -------------------------------------------------------- */\n       SET &LASTCC = 0\n       IF  &SYSDSN(&IFILE)  \u00ac= OK  THEN +\n           DO\n           WRITE\n           WRITE DSN=&IFILE   DOES NOT EXIST OR IS\n           WRITE NOT CATALOGED. PLEASE CORRECT !\n           WRITE\n           GOTO LOOP\n           END\n       /*--------------------------------------------------------*/\n       /*    SINCE THE FILE EXISTS, WE NEED TO CONSTRUCT THE     */\n       /*    NODE NAME TRANSPARENT TO THE USER.                  */\n       /*--------------------------------------------------------*/\n       SET   &LASTCC = 0\n       SELECT\n         WHEN (&SY = 1A) +\n           DO\n           SET  &NSY = &STR(FMSROC1A)\n           END\n         WHEN (&SY = 1B) +\n           DO\n           SET  &NSY = &STR(FMSROC1B)\n           END\n         WHEN (&SY = 1C) +\n           DO\n           SET  &NSY = &STR(FMSROC1C)\n           END\n         WHEN (&SY = 1E) +\n           DO\n           SET  &NSY = &STR(FMSROC1E)\n           END\n         WHEN (&SY = 1F) +\n           DO\n           SET  &NSY = &STR(FMSROC1F)\n           END\n         WHEN (&SY = 2A) +\n           DO\n           SET  &NSY = &STR(FMSROC2A)\n           END\n         WHEN (&SY = 2B) +\n           DO\n           SET  &NSY = &STR(FMSROC2B)\n           END\n         WHEN (&SY = 2C) +\n           DO\n           SET  &NSY = &STR(FMSROC2C)\n           END\n         WHEN (&SY = 3A) +\n           DO\n           SET  &NSY = &STR(FMSROC3A)\n           END\n         WHEN (&SY = 3B) +\n           DO\n           SET  &NSY = &STR(FMSROC3B)\n           END\n         WHEN (&SY = 3C) +\n           DO\n           SET  &NSY = &STR(FMSROC3C)\n           END\n         OTHERWISE  +\n           DO\n           WRITE  NODE NUMBER ERROR = &SY\n           GOTO  ENDIT\n           END\n       END\n       /*--------------------------------------------------------*/\n       /*   NOW WE WILL FINISH BUILDING THE COMMAND.             */\n       /*--------------------------------------------------------*/\n       SET &WHOUSER = &STR(&NSY..&TUSER)\n       /*--------------------------------------------------------*/\n       IF  &NTF = &STR(YES)  THEN  +\n           DO\n           SET &NOTFY  =  &STR(NOTIFY(ALL))\n           END\n       ELSE  +\n           DO\n           SET &NOTFY  =  &STR(NONOTIFY)\n           END\n       /*--------------------------------------------------------*/\n       IF  &MSN = &STR(YES)   THEN  +\n           DO\n           SET &DOMSG = &STR(MSG)\n           END\n       ELSE +\n           DO\n           SET &DOMSG = &STR()\n           END\n       /*--------------------------------------------------------*/\n       CONTROL MSG\n       TSOEXEC TRANSMIT &WHOUSER DA(&IFILE) &NOTFY  &DOMSG +\n               MEMBERS(&M0 &M1 &M2 &M3 &M4 &M5 &M6 &M7 +\n                       &M8 &M9 &MA &MB &MC &MD &ME &MF)\n       ISPEXEC CONTROL DISPLAY REFRESH\n       GOTO  LOOP\nERRMSG:  +\n       WRITE  **  SEVERE PANEL - &ENUM   **\nENDIT:   +\n       EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IDT#C6": {"ttr": 6156, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x86\\x16\\x7f\\x00\\x97\\t\\x0f\\x13\\x03\\x00\\x0e\\x00\\x17\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1986-06-16T00:00:00", "modifydate": "1997-03-31T13:03:00", "lines": 14, "newlines": 23, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/* ----------------------------------------------------------------- */\n/*     JIM MARSHALL                                                  */\n/*     TRANSMIT / RECEIVE SYSTEM                                     */\n/*     'RECEIVE MSGS OR FILES'                                       */\n/* ----------------------------------------------------------------- */\nCONTROL NOFLUSH MSG PROMPT\nIF &DEBUG \u00ac=  &STR() THEN +\n   CONTROL LIST MSG NOFLUSH PROMPT CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &LASTCC = 0\nSET &MAXCC  = 0\nRECEIVE\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IDT#C7": {"ttr": 6158, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x99\\x17/\\t2\\x00 \\x00!\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1999-06-21T09:32:00", "lines": 32, "newlines": 33, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      TSO/E  TRANSMIT/RECEIVE                           */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST NOMSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nSET &CDE   = &STR()\nISPEXEC CONTROL DISPLAY REFRESH\nISPEXEC CONTROL ERRORS RETURN\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC ADDPOP COLUMN(2) ROW(2)\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(IDT#P7) CURSOR(CDE)\n   SET  &RC = &LASTCC\n   ISPEXEC REMPOP\n   IF &RC = 8 THEN GOTO ALLDONE\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GET THE INFO FROM THE PANEL                       */\n   /*--------------------------------------------------------*/\n   CONTROL MSG\n   HELP TRANSMIT M(&CDE)\n   GOTO LOOP\nALLDONE: +\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IDT#C8": {"ttr": 6160, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x99\\x17/\\t3\\x00 \\x00\\x1c\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1999-06-21T09:33:00", "lines": 32, "newlines": 28, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      TSO/E  TRANSMIT/RECEIVE                           */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST NOMSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &CDE   = &STR()\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\nISPEXEC CONTROL DISPLAY REFRESH\n       ISPEXEC ADDPOP COLUMN(2) ROW(2)\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(IDT#P8) CURSOR(CDE)\n   SET  &RC = &LASTCC\n   ISPEXEC REMPOP\n   IF &RC = 8 THEN GOTO ALLDONE\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GET THE INFO FROM THE PANEL                       */\n   /*--------------------------------------------------------*/\n   CONTROL MSG\n   HELP RECEIVE M(&CDE)\n   GOTO LOOP\nALLDONE: +\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IDT#P": {"ttr": 6162, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x00\\x00\\x88\\x18\\x9f\\x00\\x99\\x17/\\x12\\x02\\x001\\x001\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "1988-07-07T00:00:00", "modifydate": "1999-06-21T12:02:00", "lines": 49, "newlines": 49, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(64,19) CMD(ZCMD)\n+\n% Command===>_ZCMD                                         +\n%\n% 1+-%TRANSMIT+Msg to a TSO User.\n% 2+-%TRANSMIT+File to a TSO User.\n% 3+-%TRANSMIT+Msg to TSO Users Using Distribution List.\n% 4+-%TRANSMIT+File to TSO User specifying Distrbution List.\n% 5+-%TRANSMIT+Members of PDS Using Selective Copy.\n% 6+-%RECEIVE+Files or messages.\n% 7+-%TRANSMIT+Message Explanations.\n% 8+-%RECEIVE+Message Explanations.\n% I+- TSO/E IDTF (TRANSMIT-RECEIVE) Implementation.\n% N+- Complete%HELP+for Distribution and Nickname Lists.\n% R+- Complete%HELP+for the%RECEIVE+ TSO command.\n% T+- Complete%HELP+for the%TRANSMIT+TSO command.\n% X+or END to terminate.\n%\n%\n)INIT\n .HELP = IDT#PTIA\n &ZPRIM = NO\n &ZHTOP = IDT#PTIA\n &ZHINDEX = IDT#PTIA\n &ZWINTTL = 'Interactive Data Transmission Facility (IDTF)'\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n              000,'CMD(%IDT#C0)'\n                1,'CMD(%IDT#C1)'\n                2,'CMD(%IDT#C2)'\n                3,'CMD(%IDT#C3)'\n                4,'CMD(%IDT#C4)'\n                5,'CMD(%IDT#C5)'\n                6,'CMD(%IDT#C6)'\n                7,'CMD(%IDT#C7)'\n                8,'CMD(%IDT#C8)'\n                I,'PGM(ISPTUTOR) PARM(IDT#PTIA)'\n                N,'PGM(ISPTUTOR) PARM(IDT#PTNA)'\n                R,'PGM(ISPTUTOR) PARM(IDT#PTRA)'\n                T,'PGM(ISPTUTOR) PARM(IDT#PTXA)'\n              ' ',' '\n                X,'EXIT'\n                *,'?' )\n   &ZTRAIL = .TRAIL\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PT": {"ttr": 6164, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x96'\\x1f\\x00\\x96'\\x1f\\x08I\\x00\\x15\\x00\\x15\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-09-27T00:00:00", "modifydate": "1996-09-27T08:49:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "S218"}, "text": "%            Interactive Data Transmission Facility\n+\n+       This facility allows  you to transmit  and receive  data between\n+   nodes in a network. You will use two commands, TRANSMIT and RECEIVE,\n+   to send or receive sequential or partitioned data sets.  For example\n+   when you issue the  TRANSMIT command,  the data set you requested to\n+   transmit is read,  the records are  converted to  a format  suitable\n+   for  transmission,  header  information is  added,  and  the data is\n+   routed  to a class B  SYSOUT  PUNCH  file  that is  directed to  the\n+   receiving  node  and  userid.  The data routed to the receiving node\n+   is queued on the  JES SPOOL.  When a  user at the  receiving  userid\n+   issues the  RECEIVE  command,  that user is told that a data set has\n+   arrived,  and is  given the name of the  data set  and the  node and\n+   userid of the  sender.  The user might  then specify the  name  of a\n+   data set in which the  data should  be stored.  The data is restored\n+   to its orginal format,   and is written  into the data set indicated\n+   by the user.\n+\n+\n+\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTIA": {"ttr": 6401, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x96'\\x1f\\x00\\x96'\\x1f\\x08T\\x00\\x19\\x00\\x19\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-09-27T00:00:00", "modifydate": "1996-09-27T08:54:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "S218"}, "text": ")BODY\n%         Implementation of TSO/E  TRANSMIT-RECEIVE\n+\n+       TSO/E has a tool called Interactive Data Transmission Facility\n+   (IDTF) from IBM. IDTF allows you to transmit data between nodes in\n+   a network.  Computers can also be running in on the same hardware\n+   platform using different Logical Partitions or LPARs.  Systems are\n+   linked together with IBM's Network Job Entry (NJE) system.  This\n+   This link is made by having Channel-to-Channel Adapters (CTCA) or\n+   Synchronous Data Link Control (SDLC) lines linking each system.\n+   This linking could be pictured as following:\n+\n+                SDLC             SLDC            SLDC\n+     *-------*   or   *-------*   or  *-------*   or   *-------*\n+     |       |  CTCA  |       |  CTCA |       |  CTCA  |       |\n+     |  MVS1 |--------|  MVSA |-------|  MVS2 |--------| MVSB  |\n+     |       |  line  |       |  line |       |  line  |       |\n+     *-------*        *-------*       *-------*        *-------*\n+\n+\n+                     (continued on next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTIB\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTIB": {"ttr": 6403, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x96'\\x1f\\x00\\x96'\\x1f\\t\\x00\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-09-27T00:00:00", "modifydate": "1996-09-27T09:00:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "S218"}, "text": ")BODY\n+\n+       IDTF will allow TSO users to transmit files to other TSO  users\n+   and to receive files from TSO users. IDTF also allows TSO users  to\n+   do  file transfers to  VM/CMS  users on other systems.  Along  with\n+   file   transfers,  IDTF  permits  a  user to  compose  messages and\n+   send them to users on other   systems.  TSO users have long had the\n+   capability to SEND  messages to other  TSO  users on the same node.\n+   Now  with TSO/E TRANSMIT for messages,  TSO users can send messages\n+   or multi-line  messages to TSO  users at the same mode or different\n+   nodes.\n+\n+       IDTF uses the JES2 Spool volume as the  holding  device for the\n+   files and messages.  IDTF will take  the file to be transferred and\n+   perform  a  compression on the records  when they are placed on the\n+   spool.  These files are put out on the spool as CLASS=B punch files\n+   with a jobname  of the  sendor and  queued to an IBM Writer name of\n+   the userid of the receiver.  Files sent to other systems   are sent\n+   over the NJE links to the appropriate system and onto the receiver.\n+   The  receiving user  can be automatically  notified of the  arrival\n+   of the file.\n+\n+                     (continued on next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTIC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTIC": {"ttr": 6405, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00\\x00\\x00\\x96'\\x1f\\x00\\x96'\\x1f\\t!\\x00\\x1d\\x00\\x1a\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "1996-09-27T00:00:00", "modifydate": "1996-09-27T09:21:00", "lines": 29, "newlines": 26, "modlines": 0, "user": "S218"}, "text": ")BODY\n+\n+       Senders of files and  messages  can  request  automatic receipt\n+   notification be generated and  be  sent back to the TSO user.  IDTF\n+   will created a log file automatically when  TRANSMIT is first used.\n+   This log file will have the default name of userid.LOG.MISC  and is\n+   is constructed  as  a  sequential file with attributes of RECFM=VB,\n+   LRECL=251, and  BLKSIZE=3120.  This file will  contain all messages\n+   sent to other users, acknowledgements of receipt of those messages,\n+   information concerning  file  transfers,  receipt of the files, and\n+   what  the  receiving  user  did  with  the  file  (save or delete).\n+   Periodically the  TSO  user  should  EDIT  the file  and delete old\n+   information that has been accumulating.\n+\n+       Files eligible for transfer  between  TSO  users are sequential\n+   and partitioned. TSO users should only transfer sequential files to\n+   VM users.  Presently  there are no VM  systems in the network which\n+   may be used.  Since VM/ESA may be implemented in the future,  it is\n+   best to understand its restrictions.  Partitioned  files are trans-\n+   ferred by having TRANSMIT  interactively  invoke IEBCOPY and create\n+   an IEBCOPY UNLOADED  sequential file.  If this file is sent to a VM\n+   user, they will not  be able to convert  the file  back to readable\n+   format.  VM does not\n+\n+                     (continued on next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTID\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTID": {"ttr": 6407, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x96'\\x1f\\x00\\x96'\\x1f\\t\\x02\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-09-27T00:00:00", "modifydate": "1996-09-27T09:02:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "S218"}, "text": ")BODY\n+   understand partitioned files and does not support the  IBM  IEBCOPY\n+   utility. TSO users may TRANSMIT members of PDS's sequentially to VM\n+   users.  Since these  are sent in true sequential form, then VM will\n+   know how handle the file.\n+\n+      TSO users may send sequential or partitioned files to other  TSO\n+   users using TRANSMIT. When TSO users invoke RECEIVE, they are shown\n+   what files are available to process.  Each file is presented to the\n+   user and the options of  saving  the file,  deleteing the file,  or\n+   simply saying  END.   End  processing on the  transmitted file will\n+   cause nothing to be  done with the  file  and it is available again\n+   when the  user invokes  RECEIVE.  To retrieve the  file,  the  user\n+   should  specify  an existing file or the name of a new file to have\n+   RECEIVE  processing  allocate and  copy the incoming file.  This is\n+   by replying for example:\n+\n+                         DA(FILE.DATA)\n+\n+   This will cause a dynamic allocation of a new file on DASD for the\n+   file 'userid.FILE.DATA' in the correct format (sequential or PDS).\n+\n+                     (continued on next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTIE\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTIE": {"ttr": 6409, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x96'\\x1f\\x00\\x96'\\x1f\\t\\x02\\x00\\n\\x00\\n\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-09-27T00:00:00", "modifydate": "1996-09-27T09:02:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "S218"}, "text": ")BODY\n+\n+      Users may use nicknames or distribution lists to  send  messages\n+   or files. You should see the complete help on NICKNAMES  located in\n+   the IDTF selection panel.\n+\n+\n)PROC\n  &ZUP   = IDT#P\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTJ": {"ttr": 6411, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x86\\x16\\x7f\\x00\\x86\\x17\\x1f\\x125\\x00\\x17\\x00\\x15\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1986-06-16T00:00:00", "modifydate": "1986-06-20T12:35:00", "lines": 23, "newlines": 21, "modlines": 0, "user": "SS02JDM"}, "text": "%            Interactive Data Transmission Facility\n+\n+       This facility allows  you to transmit  and receive  data between\n+   nodes in a network. You will use two commands, TRANSMIT and RECEIVE,\n+   to send or receive sequential or partitioned data sets.  For example\n+   when you issue the  TRANSMIT command,  the data set you requested to\n+   transmit is read,  the records are  converted to  a format  suitable\n+   for  transmission,  header  information is  added,  and  the data is\n+   routed  to a class B  SYSOUT  PUNCH  file  that is  directed to  the\n+   receiving  node  and  userid.  The data routed to the receiving node\n+   is queued on the  JES SPOOL.  When a  user at the  receiving  userid\n+   issues the  RECEIVE  command,  that user is told that a data set has\n+   arrived,  and is  given the name of the  data set  and the  node and\n+   userid of the  sender.  The user might  then specify the  name  of a\n+   data set in which the  data should  be stored.  The data is restored\n+   to its orginal format,   and is written  into the data set indicated\n+   by the user.\n+\n+       VM users can  transmit  files to TSO  users from VM/CMS systems.\n+   TSO users may transmit files to VM/CMS users in the defined network.\n+\n+\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTJA": {"ttr": 6413, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x93#\\x8f\\x073\\x00\\x18\\x00\\x07\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1993-08-26T07:33:00", "lines": 24, "newlines": 7, "modlines": 0, "user": "S218"}, "text": ")BODY\n%         Implementation of TSO/E  TRANSMIT-RECEIVE\n+\n+       TSO/E has a tool called Interactive Data Transmission Facility\n+   (IDTF) from IBM. IDTF allows you to transmit data between nodes in\n+   a network.  Computers are linked together with IBM's Network  Job\n+   Entry (NJE) system. This link is made by having bisynchronous (BSC)\n+   or Synchronous Data Link Control (SDLC) lines linking each system.\n+   This linking could be pictured as following:\n+\n+                SDLC             SLDC            SLDC\n+     *-------*   or   *-------*   or  *-------*   or   *-------*\n+     |       |  BSC   |       |  BSC  |       |  BSC   |       |\n+     |  MVS  |--------|  VM1  |-------|  MVS  |--------|  VSE  |\n+     |       |  line  |       |  line |       |  line  |       |\n+     *-------*        *-------*       *-------*        *-------*\n+\n+\n+\n+                     (continued on next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTIB\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTJB": {"ttr": 6415, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864o\\x14\\x17\\x00\\x1b\\x00\\x1a\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-12T14:17:00", "lines": 27, "newlines": 26, "modlines": 0, "user": "$354JDM"}, "text": ")BODY\n+\n+       IDTF will allow TSO users to transmit files to other TSO  users\n+   and to receive files from TSO users. IDTF also allows TSO users  to\n+   do  file transfers to  VM/CMS  users on other systems.  Along  with\n+   file   transfers,  IDTF  permits  a  user to  compose  messages and\n+   send them to users on other   systems.  TSO users have long had the\n+   capability to SEND  messages to other  TSO  users on the same node.\n+   Now  with TSO/E TRANSMIT for messages, TSO users can send messages\n+   to VM/CMS users at other nodes and multi-line messages to TSO users\n+   at the same nodes or different nodes.\n+\n+       IDTF uses the JES2 Spool volume as the  holding  device for the\n+   files and messages.  IDTF will take  the file to be transferred and\n+   perform  a  compression on the records  when they are placed on the\n+   spool.  These files are put out on the spool as CLASS=B punch files\n+   with a jobname  of the  sendor and  queued to an IBM Writer name of\n+   the userid of the receiver.  Files sent to other systems   are sent\n+   over the NJE links to the appropriate system and onto the receivor\n+   The  receiving  user can  be automatically notified of the arrival\n+   of the file.\n+\n+                     (continued on next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTIC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTJC": {"ttr": 6417, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864o\\x14\\x18\\x00\\x1a\\x00\\n\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-12T14:18:00", "lines": 26, "newlines": 10, "modlines": 0, "user": "$354JDM"}, "text": ")BODY\n+\n+       Senders of files and  messages  can  request  automatic receipt\n+   notification be generated and  be  sent back to the TSO user.  IDTF\n+   will created a log file automatically when  TRANSMIT is first used.\n+   This log file will have the default name of userid.LOG.MISC  and is\n+   is constructed  as  a  sequential file with attributes of RECFM=VB,\n+   LRECL=251, and  BLKSIZE=3120.  This file will  contain all messages\n+   sent to other users, acknowledgements of receipt of those messages,\n+   information concerning  file  transfers,  receipt of the files, and\n+   what  the  receiving  user  did  with  the  file  (save or delete).\n+   Periodically the  TSO  user  should  EDIT  the file  and delete old\n+   information that has been accumulating.\n+\n+       Files eligible for transfer  between  TSO  users are sequential\n+   and partitioned. TSO users should only transfer sequential files to\n+   VM users.  Partitioned  files  are  transferred by having  TRANSMIT\n+   interactively  invoke  IEBCOPY  and  create  an  IEBCOPY   UNLOADED\n+   sequential file.  If this file is sent to a VM user, they will  not\n+   be able to convert the file back to a readable format.  VM does not\n+\n+                     (continued on next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTID\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTJD": {"ttr": 6419, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x13\\x15\\x00\\x1b\\x00\\n\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T13:15:00", "lines": 27, "newlines": 10, "modlines": 0, "user": "$354JDM"}, "text": ")BODY\n+   understand partitioned files and does not support the  IBM  IEBCOPY\n+   utility. TSO users may TRANSMIT members of PDS's sequentially to VM\n+   users.  Since these  are sent in true sequential form, then VM will\n+   know how handle the file.\n+\n+      TSO users may send sequential or partitioned files to other  TSO\n+   users using TRANSMIT. When TSO users invoke RECEIVE, they are shown\n+   what files are available to process.  Each file is presented to the\n+   user and the options of  saving  the file,  deleteing the file,  or\n+   simply saying  END.   End  processing on the  transmitted file will\n+   cause nothing to be  done with the  file  and it is available again\n+   when the  user invokes  RECEIVE.  To retrieve the  file,  the  user\n+   should  specify  an existing file or the name of a new file to have\n+   RECEIVE  processing  allocate and  copy the incoming file.  This is\n+   by replying for example:\n+\n+                         DA(FILE.DATA)\n+\n+   This will cause a dynamic allocation of a new file on DASD for the\n+   file 'userid.FILE.DATA' in the correct format (sequential or PDS).\n+\n+                     (continued on next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTIE\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTJE": {"ttr": 6421, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x86\\x16\\x9f\\x00\\x864O\\x13\\x16\\x00\\n\\x00\\x1b\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1986-06-18T00:00:00", "modifydate": "1986-12-10T13:16:00", "lines": 10, "newlines": 27, "modlines": 0, "user": "$354JDM"}, "text": ")BODY\n+\n+      Users may use nicknames or distribution lists to  send  messages\n+   or files. You should see the complete help on NICKNAMES  located in\n+   the IDTF selection panel.\n+\n+\n)PROC\n  &ZUP   = IDT#P\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTNA": {"ttr": 6423, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x86\\x16\\x9f\\x00\\x864O\\x13\\x16\\x00\\x18\\x00\\x16\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1986-06-18T00:00:00", "modifydate": "1986-12-10T13:16:00", "lines": 24, "newlines": 22, "modlines": 0, "user": "$354JDM"}, "text": "%            The following is a complete HELP for NICKNAMES\n+\n+\n+ The Interactive Data Transmission Facility offers you the capability\n+ of using nicknames and distribution lists in conjunction with the\n+ TRANSMIT and RECEIVE commands and to control the mode of command\n+ operation via the names dataset.  The Interactive Data Transmission\n+ Facility names data set consists of two sections: A CONTROL section\n+ which contains prolog and epilog lines and alternate names data set\n+ specification. A NICKNAMES section which allows addressees to be\n+ specified in other than node.user format, logging defaults for\n+ individual addressees, and distribution list definition.\n+\n+\n+ A nickname is character string which may be used as an addressee\n+ on the TRANSMIT command in place of the node.userid format.  A\n+ distribution list is a group of addressees which may contain\n+ addressees of the following formats:\n+\n+                    (continued next page)\n)PROC\n   &ZUP   = IDT#P\n   &ZCONT = IDT#PTNB\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTNB": {"ttr": 6425, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x86\\x16\\x9f\\x00\\x864O\\x13\\x16\\x00\\x1a\\x00\\x19\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1986-06-18T00:00:00", "modifydate": "1986-12-10T13:16:00", "lines": 26, "newlines": 25, "modlines": 0, "user": "$354JDM"}, "text": "+\n+                node.userid\n+                node/userid\n+                nickname\n+                distribution list\n+\n+ As a user of the TRANSMIT and RECEIVE commands you may have one or\n+ more names data sets to resolve nicknames and establish the default\n+ mode of operation.  You must name your first names data set in the\n+ following manner 'userid.IDTF.NAMES'.  You may then name other names\n+ data sets within the first.  The data set attributes of the names\n+ data set must be: (1) sequential data set, (2) fixed or varying\n+ length records, (3) record length less than or equal to 255,\n+ (4) block or unblocked.  You may apply standard TSO line numbering\n+ conventions to the names data set if you wish.\n+\n+ The first section to occur in the names data set is called the\n+ CONTROL section and is optional.  The data you place in this section\n+ is defined by the following names data set \"tags\". You may enter\n+ these \"tags\" in either upper, lower or mixed case:\n+\n+                    (continued next page)\n)PROC\n   &ZUP   = IDT#P\n   &ZCONT = IDT#PTNC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IDT#PTNC": {"ttr": 6427, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x86\\x16\\x9f\\x00\\x864O\\x13\\x17\\x00\\x1b\\x00\\x1c\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1986-06-18T00:00:00", "modifydate": "1986-12-10T13:17:00", "lines": 27, "newlines": 28, "modlines": 0, "user": "$354JDM"}, "text": "+     :ALTCTL.        data set name of alternate names data set\n+     :EPILOG.        epilog line text\n+     :LOGNAME.       log-dataset-last-qualifier\n+                     (e.g. userid.name.:logname value)\n+     :LOGSEL.        log selector data set middle qualifier\n+                     (e.g. userid.:logsel.:logname)\n+     :LOG.\n+     :NOLOG.\n+     :NOTIFY.\n+     :NONOTIFY.\n+     :PROLOG.        prolog line text\n+\n+ You are NOT required to have a CONTROL section in the names data set.\n+ However, if you do, it must be the first section. Its last entry\n+ is marked by the occurence of the first nickname definition.  When\n+ you elect not to have a CONTROL section, the following defaults\n+ apply:  :LOG and :NOTIFY.\n+\n+ The next section to occur in the names data set is called the\n+ NICKNAMES section and is optional.  The data in this section\n+ is defined by the following names data set \"tags\".  You may enter\n+ these \"tags\" in either upper, lower or mixed case:\n+                    (continued next page)\n)PROC\n   &ZUP   = IDT#P\n   &ZCONT = IDT#PTND\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IDT#PTND": {"ttr": 6429, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x86\\x16\\x9f\\x00\\x864O\\x13\\x17\\x00\\x1b\\x00\\x1b\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1986-06-18T00:00:00", "modifydate": "1986-12-10T13:17:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "$354JDM"}, "text": "+     :NICK.nickname                :NICK.   nickname\n+     :NODE.nodename                :NODE.   nodename\n+     :USERID.userid                :USERID. userid\n+     :NAME.username                :NAME.   username\n+     :LOG\n+     :NOLOG\n+     :LOGLST\n+     :NOTIFY\n+     :NONOTIFY\n+     :PARM.parm data               :PARM.   parm data\n+\n+\n+ When defining a nickname, you must at least specify :NICK and\n+ :USERID.  The value of :NODE if not specified is your system's\n+ nodename.  Also note that the period (.) must immediately follow\n+ the \"tag.\", however the data may follow by one or more blanks.\n+ A nickname entry consists of all the data inbetween two :NICK\n+ \"tags\".  Other user \"tags.\" which are not recognized by the\n+ TRANSMIT and RECEIVE commands may be inbetween the supported\n+ \"tag\" and its data (e.g. :NODE.  :NETNAME.  POK) where the\n+ value of POK is associated with the :NODE \"tag\".\n+\n+                    (continued next page)\n)PROC\n   &ZUP   = IDT#P\n   &ZCONT = IDT#PTNE\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IDT#PTNE": {"ttr": 6431, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x86\\x16\\x9f\\x00\\x864O\\x13\\x17\\x00\\x1b\\x00\\x1b\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1986-06-18T00:00:00", "modifydate": "1986-12-10T13:17:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "$354JDM"}, "text": "+ NOTE:  Each nickname entry must begin with the :NICK \"tag\" AND\n+        the :NICK \"tag\" must be the first non-blank characters\n+        on the line.\n+\n+ To obtain HELP information on specific \"tags\", please enter\n+ HELP NICKNAME OPERAND(tagname)  (e.g. HELP NICKNAME OPERAND(:nick))\n+\n+\n+  SYNTAX  -\n+\n+ Interactive Data Transmission Facility CONTROL Section Tags:\n+\n+\n+      :LOG\n+      :NOLOG\n+      :NOTIFY\n+      :NONOTIFY\n+      :PROLOG.        prolog line text\n+      :EPILOG.        epilog line text\n+      :LOGSEL.        log-dataset-middle-qualifier\n+                      (e.g. userid.:logsel value.name)\n+\n+                    (continued next page)\n)PROC\n   &ZUP   = IDT#P\n   &ZCONT = IDT#PTNF\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IDT#PTNF": {"ttr": 6433, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x86\\x16\\x9f\\x00\\x864O\\x13\\x17\\x00\\x1b\\x00\\x1c\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1986-06-18T00:00:00", "modifydate": "1986-12-10T13:17:00", "lines": 27, "newlines": 28, "modlines": 0, "user": "$354JDM"}, "text": "+      :LOGNAME.       log-dataset-last-qualifier\n+                      (e.g. userid.name.:logname value)\n+\n+      :ALTCTL.        names-file-dataset-name\n+\n+      REQUIRED - None\n+\n+      DEFAULT - :log. :notify.\n+\n+ Interactive Data Transmission Facility NICKNAME Section Tags:\n+\n+      :NICK.   nickname\n+      :NODE.   nodename\n+      :USERID. userid\n+      :NAME.    username\n+      :LOG\n+      :NOLOG\n+      :LOGLST\n+      :NOTIFY\n+      :NONOTIFY\n+\n+      REQUIRED - :nick. :userid.\n+                    (continued next page)\n)PROC\n   &ZUP   = IDT#P\n   &ZCONT = IDT#PTNG\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTNG": {"ttr": 6657, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x86\\x16\\x9f\\x00\\x864O\\x13\\x18\\x00\\x18\\x00\\x18\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1986-06-18T00:00:00", "modifydate": "1986-12-10T13:18:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "$354JDM"}, "text": "+\n+      DEFAULT - :node. your system's node name\n+\n+      NOTE - Each nickname entry must begin with the :NICK tag and\n+             the :NICK must be the first non-blank characters on the\n+             line.\n+  OPERANDS -\n+\n+ :ALTCTL.dsname   - The :ALTCTL tag is used in the control section of\n+                    file to provided the name of a secondary names\n+                    dataset name.  You may specify a maximum of\n+                    ten alternate names data sets.\n+\n+ :EPILOG.text     - The :EPILOG tag is used in the control section\n+                    to specify a text line to be appended at the end\n+                    of any transmitted message.  The maximum length\n+                    of an epilog line is 72 characters.  You may\n+                    specify a maximum of ten epilog lines\n+\n+                    (continued next page)\n)PROC\n   &ZUP   = IDT#P\n   &ZCONT = IDT#PTNH\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTNH": {"ttr": 6659, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x86\\x16\\x9f\\x00\\x864O\\x13\\x18\\x00\\x18\\x00\\x18\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1986-06-18T00:00:00", "modifydate": "1986-12-10T13:18:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "$354JDM"}, "text": "+ :PROLOG.text     - The :PROLOG tag is used in the control section\n+                    to specify a text line to be appended at the\n+                    beginning of any transmitted message.  The maximum\n+                    length of a prolog line is 72 characters.  You may\n+                    specify a maximum of ten prolog lines.\n+\n+ :LOGNAME.name      The :LOGNAME tag may be used either in the control\n+                    section or in a nickname entry.  The value\n+                    specified in the control section serves as a\n+                    default third qualifier for the log dataset name.\n+                    If :LOGNAME. is specified in a nickname entry,\n+                    the value provided overrides the default set\n+                    in the control section.\n+\n+ :LOGSEL.name       The :LOGSEL tag is used in the control section\n+                    to specify the second (middle) qualifier(s) of all\n+                    log dataset names.  The value specified with\n+                    LOGSEL may be 1- to 40-characters.\n+\n+                    (continued next page)\n)PROC\n   &ZUP   = IDT#P\n   &ZCONT = IDT#PTNI\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTNI": {"ttr": 6661, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x86\\x16\\x9f\\x00\\x864O\\x13\\x18\\x00\\x1c\\x00\\x1d\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1986-06-18T00:00:00", "modifydate": "1986-12-10T13:18:00", "lines": 28, "newlines": 29, "modlines": 0, "user": "$354JDM"}, "text": "+ :LOG               The names data set :LOG tag may be used either\n+                    in the control section or in a nickname entry.\n+                    This tag never has an associated value.  When\n+                    used in the control section, the LOG tag\n+                    controls logging for any addressee specified\n+                    by node and userid and also controls logging\n+                    for any nickname which does not also specify\n+                    :LOG or :NOLOG.  If the nickname entry contains\n+                    the :LOG tag, this value overrides any value\n+                    in the control section, but in turn may be\n+                    overridden by a specification on the TRANSMIT\n+                    command.\n+\n+ :NOLOG             The names data set :NOLOG tag may be used either\n+                    in the control section or in a nickname entry.\n+                    This tag never has an associated value.  When\n+                    used in the control section, the NOLOG tag\n+                    controls logging for any addressee specified\n+                    by node and userid and also controls logging\n+                    for any nickname which does not also specify\n+                    :LOG or :NOLOG.  If the nickname entry contains\n+                    the :NOLOG tag, this value overrides any value\n+                    in the control section, but in turn may be\n+                    (continued next page)\n)PROC\n   &ZUP   = IDT#P\n   &ZCONT = IDT#PTNJ\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTNJ": {"ttr": 6663, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x86\\x16\\x9f\\x00\\x864O\\x13\\x18\\x00\\x1b\\x00\\x1c\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1986-06-18T00:00:00", "modifydate": "1986-12-10T13:18:00", "lines": 27, "newlines": 28, "modlines": 0, "user": "$354JDM"}, "text": "+                    overridden by a specification on the TRANSMIT\n+                    command.\n+\n+ :NOTIFY            The :NOTIFY tag may be used in either the names\n+                    data set control section or in a nickname entry.\n+                    This tag never has an associated value.  When\n+                    used in the control section, the NOTIFY\n+                    tag controls notification for any addressee\n+                    specified by node and userid and for any nickname\n+                    where the nickname entry does not contain\n+                    :NOTIFY or :NONOTIFY.  The value of :NOTIFY in\n+                    the names file may be overridden by a similiar\n+                    specification on the TRANSMIT command.\n+\n+ :NONOTIFY          The :NONOTIFY tag may be used in either the names\n+                    data set control section or in a nickname entry.\n+                    This tag never has an associated value.  When\n+                    used in the control section, the NONOTIFY\n+                    tag controls notification for any addressee\n+                    specified by node and userid and for any nickname\n+                    where the nickname entry does not contain\n+\n+                    (continued next page)\n)PROC\n   &ZUP   = IDT#P\n   &ZCONT = IDT#PTNK\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTNK": {"ttr": 6665, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x86\\x16\\x9f\\x00\\x864O\\x13\\x19\\x00\\x1a\\x00\\x1a\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1986-06-18T00:00:00", "modifydate": "1986-12-10T13:19:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "$354JDM"}, "text": "+                    :NOTIFY or :NONOTIFY.  The value of :NONOTIFY in\n+                    the names file may be overridden by a similiar\n+                    specification on the TRANSMIT command.\n+\n+ :NICK.nickname     The :NICK tag is used to begin each nickname\n+                    entry in the names file.  It must be the first\n+                    non-blank (except for line numbers) characters\n+                    of the record.  The nickname is any string of\n+                    non-blank alpha-numeric characters 1- to\n+                    8-characters in length.\n+\n+ :NODE.nodename     The :NODE tag is used within a nickname entry\n+                    to specify a network node name for the nickname\n+                    entry.  If the :NODE tag is not present in a\n+                    nickname entry, your system's node name is assumed.\n+\n+ :USERID.userid     The :USERID tag identifies the userid of the\n+                    addressee.  The :USERID tag may not be\n+                    used in the same entry as the :LIST or :CC\n+                    tags.\n+\n+                    (continued next page)\n)PROC\n   &ZUP   = IDT#P\n   &ZCONT = IDT#PTNL\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTNL": {"ttr": 6667, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x86\\x16\\x9f\\x00\\x864O\\x13\\x19\\x00\\x1b\\x00\\x1c\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1986-06-18T00:00:00", "modifydate": "1986-12-10T13:19:00", "lines": 27, "newlines": 28, "modlines": 0, "user": "$354JDM"}, "text": "+ :LOGLST            The :LOGLST tag is used in a nickname entry that\n+                    defines a distribution list.  The tag indicates\n+                    whether a log entry should be made for each\n+                    addressee in the list (:LOGLST) or not (:NOLOGLST).\n+\n+ :NOLOGLST          The :NOLOGLST tag is used in a nickname entry that\n+                    defines a distribution list.  The tag indicates\n+                    whether a log entry should be made for each\n+                    addressee in the list (:LOGLST) or not (:NOLOGLST).\n+\n+ :NAME.fullname     The :NAME tag specifies the full english name\n+                    the user being defined.  This name will appear\n+                    in the copylist and in any log entries for this\n+                    nickname.  The specified name value may be up\n+                    to 30 characters long.\n+\n+ :PARM.parameters   The :PARM tag is used in a nickname entry to\n+                    specify a parameter string which is to be\n+                    passed to the installation exit routines.\n+                    This parameter string is also included in\n+                    the transmission and passed to the RECEIVE\n+                    command exits.\n+                    (continued next page)\n)PROC\n   &ZUP   = IDT#P\n   &ZCONT = IDT#PTNM\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTNM": {"ttr": 6669, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x86\\x16\\x9f\\x00\\x91\\x19o\\x076\\x00\\x16\\x00\\x15\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1986-06-18T00:00:00", "modifydate": "1991-07-15T07:36:00", "lines": 22, "newlines": 21, "modlines": 0, "user": "S218"}, "text": "+\n+ :ADDR.address      The :ADDR tag is used in a nickname entry to\n+                    specify the address of the specified user.\n+                    Individual lines of the address should be\n+                    separated by semicolons.  This value is not\n+                    used by either TRANSMIT or RECEIVE.\n+\n+ :LIST.addressees   The :LIST tag is used in a nickname entry to\n+                    specify a list of addressees which make up the\n+                    distribution list.  Each addressee specified\n+                    may be either a nickname of the name of another\n+                    distribution list.\n+\n+ :CC.addressees     The :CC tag is used in a nickname entry to\n+                    specify a list of addressees which make up the\n+                    distribution list.  Each addressee specified\n+                    may be either a nickname of the name of another\n+                    distribution list.\n+\n)PROC\n  &ZUP   =  IDT#P\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTRA": {"ttr": 6671, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x13 \\x00\\x1a\\x00\\x1a\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T13:20:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "$354JDM"}, "text": "+           Complete TSO Help for RECEIVE Command\n+\n+        The TSO/E Interactive Data Transmission Facility RECEIVE\n+        command allows you to obtain files transmitted to your\n+        userid.  The RECEIVE command querys the Job Entry Subsystem\n+        (JES) on your behalf to determine if there are any files\n+        for your TSO userid.  If there is at least one file, the\n+        RECEIVE command will obtain the file from JES and then\n+        display descriptive information about the file. You will\n+        then be prompted for information to control the RECEIVE\n+        operation.  You may choose to accept the default dataset\n+        name (the origin dataset name with your prefix replacing\n+        the sender's userid) and space information by simply\n+        pressing the key marked ENTER.  You may also specify\n+        overriding parameters as described later on.  After you\n+        have successfully received a file, the RECEIVE command\n+        will continue processing with any remaining files.\n+        If requested by the sender, a notification of receipt, by\n+        you, and the success of your RECEIVE command processing\n+        will be transmitted back to the sender.\n+\n+                 (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTRB\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTRB": {"ttr": 6673, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x13 \\x00\\x14\\x00\\x14\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T13:20:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "$354JDM"}, "text": "+        If the RECEIVE command detects that the file obtained\n+        from JES was encihpered by the Interactive Data\n+        Transmisison Facility TRANSMIT command, it will\n+        automatically attempt to decipher the data. In order\n+        to do this, you will be prompted for decipher options\n+        which will be passed to the Access Method Services\n+        REPRO command. (not supported)\n+\n+        The RECEIVE command will request that JES retain the file\n+        until you successfully receive or delete it. If the RECEIVE\n+        command detects any errors while processing a file,\n+        the RECEIVE command will automatically retain the file.\n+        In cases where the error is related to JES, the RECEIVE\n+        command will prompt you to retain the file.\n+\n+                 (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTRC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTRC": {"ttr": 6675, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x13 \\x00\\x1a\\x00\\x1a\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T13:20:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "$354JDM"}, "text": "+        The format of the RECEIVE command is:\n+\n+          RECEIVE  USERID(userid)  PARM(string)\n+\n+        The RECEIVE command will prompt you for additional\n+        parameters after obtaining a file from JES. If you\n+        do not specify any parameters, they will be defaulted\n+        or obtained from the control records transmitted with\n+        the data. The optional paramaters which you may specify\n+        are:\n+\n+          BLKSIZE(size)\n+          DATASET(dsn) / DSNAME(dsn)\n+          DIRECTORY(blocks)\n+          NEW/OLD/MOD/SHR\n+          PARM(parameter strings)\n+          RELEASE\n+          RESTORE / RESTORE(LOG) / COPY / DELETE / END\n+          SPACE(primary secondary)\n+          SYSOUT(sysoutclass or *)\n+          TRACKS / CYLINDERS / BLOCKS(size)\n+                 (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTRD\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTRD": {"ttr": 6677, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x13!\\x00\\x1b\\x00\\x1c\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T13:21:00", "lines": 27, "newlines": 28, "modlines": 0, "user": "$354JDM"}, "text": "+          UNIT(unitname)\n+          VOLUME(volser)\n+\n+DEFAULTS: TRACKS NOPREVIEW RESTORE\n+\n+ USERID           The USERID operand of the RECEIVE command is\n+                  the TSO USERID for which files are to be received.\n+                  You may specify this operand, however, the RECEIVE\n+                  command will verify that you have TSO OPERATOR\n+                  command authority before requesting files from\n+                  the Job Entry Subsystem. If you do not have TSO\n+                  OPERATOR command authority and wish to receive\n+                  files for another TSO USERID, your installation\n+                  can provide this function through one of the\n+                  RECEIVE command installation exits.\n+\n+ PARM             You may specify a character string to be passed\n+                  to your installation's exit routines.  If the\n+                  parameter contains blanks or other special\n+                  characters, you must enclose the string in quotes.\n+                  Normally, you will only supply a parameter string\n+\n+                 (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTRE\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTRE": {"ttr": 6679, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x13!\\x00\\x1b\\x00\\x1b\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T13:21:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "$354JDM"}, "text": "+                  value if indicated by your installation support\n+                  personnel. This parameter value only has meaning\n+                  to your installation's exit routines.\n+\n+ DATASET          You may specifiy the name of the data set to\n+                  used to contain the file being received. This\n+                  dataset will be created if it does not exist.\n+\n+                  The dataset name will default to the name of\n+                  the transmitted data set (the sender's userid\n+                  will be replaced with your userid).  If this\n+                  default data set already exists and is a\n+                  sequential data set and you have not specified\n+                  a disposition (SHR/MOD/OLD/NEW), then RECEIVE\n+                  will prompt you for your permission to overwrite\n+                  the data set. If the default data set is a\n+                  partitioned data set, then identically named\n+                  members be automatically replaced.\n+\n+ DSNAME           You may specifiy the name of the data set to\n+                  used to contain the file being received. This\n+                  dataset will be created if it does not exist.\n+                 (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTRF\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTRF": {"ttr": 6681, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x13!\\x00\\x1a\\x00\\x19\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T13:21:00", "lines": 26, "newlines": 25, "modlines": 0, "user": "$354JDM"}, "text": "+                  the transmitted data set (the sender's userid\n+                  will be replaced with your userid).  If this\n+                  default data set already exists and is a\n+                  sequential data set and you have not specified\n+                  a disposition (SHR/MOD/OLD/NEW), then RECEIVE\n+                  will prompt you for your permission to overwrite\n+                  the data set. If the default data set is a\n+                  partitioned data set, then identically named\n+                  members be automatically replaced.\n+\n+ UNIT             You may specify a unit type for the output\n+                  data set to reside on. If you do not specify\n+                  this keyword, your installation default unit\n+                  specification will be used.\n+\n+ VOLUME           You may specify the volume serial number of the\n+                  device that you wish the output data set to\n+                  reside on. The default for this value to let\n+                  your system select a volume as defined by your\n+                  installation's unit name value.\n+\n+                 (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTRG\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTRG": {"ttr": 6683, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x13\"\\x00\\x1a\\x00\\x1a\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T13:22:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "$354JDM"}, "text": "+ SPACE            You may specifiy primary and optionally secondary\n+                  space for the data set in which you are about to\n+                  receive the file from the Job Entry Subsystem. The\n+                  default value for SPACE is a primary size equal to\n+                  the size of the data set you are about to receive\n+                  and a secondary size value 10 percent of the\n+                  primary space allocation.\n+\n+ TRACKS           If you enter this keyword, you are requesting\n+                  that the space allocation be in tracks.  The\n+                  capacity of the track is dependent on the device\n+                  type that you select.\n+\n+ CYLINDERS        If you enter this keyword, you are requesting\n+                  that the space allocation be in cylinders.  The\n+                  capacity of the cylinder is dependent on the\n+                  device that you select.\n+\n+ BLKSIZE          If you enter this keyword, you are requesting\n+                  that the space allocation in unit of the blksize\n+                  value.\n+                 (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTRH\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTRH": {"ttr": 6685, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x13\"\\x00\\x1b\\x00\\x1a\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T13:22:00", "lines": 27, "newlines": 26, "modlines": 0, "user": "$354JDM"}, "text": "+ RELEASE          You may request RECEIVE to release any unused\n+                  space associated with the data set just received\n+                  by specifying this parameter.\n+\n+ DIRECTORY        You may override the number of directory blocks\n+                  for a partitioned data set by specifying this\n+                  parameter.  The default value for the DIRECTORY\n+                  keyword is the number of directory blocks required\n+                  to receive the transmitted members.\n+\n+                  NOTE:  If you are receiving a sequential data set\n+                  as a NEW partitioned data set, DATASET(x(member01)),\n+                  and you do NOT specify the DIRECTORY keyword, the\n+                  RECEIVE command assumes a default directory block\n+                  value of 27.\n+\n+ BLKSIZE          You may specifiy the blocksize to be used when\n+                  receiving the input file from the Job Entry\n+                  Subsystem. Your value will be used as long as\n+                  it does not conflict with the existing data set\n+                  characteristics or device type characteristics.\n+\n+                 (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTRI\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTRI": {"ttr": 6687, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x86\\x16\\x9f\\x00\\x864O\\x13#\\x00\\x1b\\x00\\x19\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1986-06-18T00:00:00", "modifydate": "1986-12-10T13:23:00", "lines": 27, "newlines": 25, "modlines": 0, "user": "$354JDM"}, "text": "+ NEW/OLD/MOD/SHR  You may specify the disposition to be used for\n+                  the data set you are receiving into. If you DO\n+                  NOT specify one of these values AND you also\n+                  DID NOT specify the SPACE keyword, RECEIVE will\n+                  first assume that the data set exists.  If the\n+                  RECEIVE command determines that the data set does\n+                  not exist, the data set is allocated NEW with\n+                  the space values of the original data set.\n+\n+ PARM             You may specify a character string to be passed\n+                  to your installation's exit routines.  If the\n+                  parameter contains blanks or other special\n+                  characters, you must enclose the string in quotes.\n+                  Normally, you will only supply a parameter string\n+                  value if indicated by your installation support\n+                  personnel. This parameter value only has meaning\n+                  to your installation's exit routines.\n+\n+ SYSOUT           You may specify a SYSOUT class which will be\n+                  used for messages from utility programs invoked\n+                  by the RECEIVE  command (e.g. IEBCOPY).   If you\n+\n+                  (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTRJ\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTRJ": {"ttr": 6689, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x13#\\x00\\x1b\\x00\\x1a\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T13:23:00", "lines": 27, "newlines": 26, "modlines": 0, "user": "$354JDM"}, "text": "+                  is '*', however your installation may modify this\n+                  value in the INMXPARM installation parameter CSECT.\n+\n+ PREVIEW          You may request the RECEIVE command to display the\n+                  data at your terminal as it is being restored to\n+                  the data set. Please note that when PREVIEW is\n+                  specified when receiving a partitioned data set\n+                  what you will see is the unloaded dataset before\n+                  RECEIVE has invoked IEBCOPY to restore it to its\n+                  original format.\n+\n+ NOPREVIEW        You may request the RECEIVE command not to display\n+                  the data on your terminal as it is being received\n+                  by specifying the NOPREVIEW keyword.  NOPREVIEW is\n+                  the DEFAULT.\n+\n+ COPY             You may request the RECEIVE command to copy the\n+                  file in its transmission format into the named\n+                  dataset by spefifying this keyword. You may then\n+                  use the RECEIVE INDATASET keyword to restore\n+                  the data in its original format at a later time.\n+\n+                 (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTRK\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTRK": {"ttr": 6913, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x13#\\x00\\x1a\\x00\\x1b\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T13:23:00", "lines": 26, "newlines": 27, "modlines": 0, "user": "$354JDM"}, "text": "+\n+ RESTORE          You may request the RECEIVE command to restore the\n+                  file in its original format into the named dataset\n+                  dataset by specifying this keyword.\n+                  RESTORE is the DEFAULT.\n+\n+ RESTORE(LOG)     Your may request that the file be restored\n+                  to its original format and written to the\n+                  appropriate log. You will also PREVIEW the\n+                  data at your terminal as it is being written to\n+                  the appropriate log. You may not specify the\n+                  DATASET or DSNAME parameter when you specify\n+                  RESTORE(LOG).\n+\n+ DELETE           You may request RECEIVE to delete the current\n+                  file without any further processing by specifying\n+                  this keyword. You may or may not continue processing\n+                  at this time depending on whether or not the RECEIVE\n+                  command has determined the availability of any more\n+                  Interactive Data Transmission Facility files.\n+\n+                 (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTRL\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTRL": {"ttr": 6915, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x13$\\x00\\x08\\x00\\x06\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T13:24:00", "lines": 8, "newlines": 6, "modlines": 0, "user": "$354JDM"}, "text": "+\n+ END              You may request RECEIVE to end its processing\n+                  immediately, leaving the any Interactive Data\n+                  Transmission Facility files available to the\n+                  Job Entry Subsystem for later processing by you.\n)PROC\n  &ZUP  = IDT#P\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTXA": {"ttr": 6917, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x14E\\x00\\x1b\\x00\\x18\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T14:45:00", "lines": 27, "newlines": 24, "modlines": 0, "user": "$354JDM"}, "text": ")BODY\n%        The following is a complete HELP for TRANSMIT\n+\n+        The TSO/E Interactive Data Transmission Facility TRANSMIT\n+        command allows you to send data sets or messages to persons\n+        on other MVS systems via Network Job Entry or directly to\n+        persons on your own system.\n+\n+        You may transmit sequential and partitioned data sets that\n+        have the fixed, variable and undefined record formats.\n+        You MAY NOT transmit ISAM and VSAM data sets, or data sets\n+        with user labels or keys.\n+\n+        When you transmit a partitioned data set, the TRANSMIT\n+        command will invoke the IEBCOPY utility and then transmit\n+        the unloaded data set. The Interactive Data Transmission\n+        Facility RECEIVE command will restore the partitioned\n+        data set to its original format. You may also transmit\n+        a single member of a partitioned data set and request that\n+        it be transmitted as a sequential data set, thereby allowing\n+        the addressee to receive it either as a sequential data set\n+        or as a member of another partitioned data set.\n+               (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTXB\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTXB": {"ttr": 6919, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x14E\\x00\\x1a\\x00\\x18\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T14:45:00", "lines": 26, "newlines": 24, "modlines": 0, "user": "$354JDM"}, "text": "+\n+        You may instruct the TRANSMIT command to append\n+        accompanying messages to the data set being transmitted\n+        by specifying the MESSAGE keyword.  The messages that\n+        you enter will be shown to the addressee when the\n+        Interactive Data Transmission Facility RECEIVE command\n+        is issued.  You may enter messages in full screen mode if\n+        you are logged on to a 3270 information display system\n+        terminal with a minimum screen size of 24 rows by 80\n+        columns, or you may enter messages a line at a time.\n+        You may request that messages be entered in line mode\n+        on a 3270 terminal by specifying the LINE keyword.  While\n+        entering message text in full screen mode, you may use\n+        the program function keys as follows:\n+\n+               PF7 or PF19  Scroll Up     (beginning of data)\n+               PF8 or PF20  Scroll Down   (end of data)\n+               PF3 or PF15  TRANSMIT data to addressee(s)\n+               PA1          Attention\n+               PA2          Reshow message text before last\n+                            modification.\n+               (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTXC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTXC": {"ttr": 6921, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x14E\\x00\\x17\\x00\\x15\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T14:45:00", "lines": 23, "newlines": 21, "modlines": 0, "user": "$354JDM"}, "text": "+\n+        You may invoke the TRANSMIT command in it simplest form\n+        by simply entering \"TRANSMIT addressee-list\". TRANSMIT\n+        will default to terminal input and you may now enter\n+        your message text.  When the addressee invokes the Interactive\n+        Data Transmission Facility RECEIVE command, your message text\n+        will be displayed immediately without the addressee having\n+        to save and then list it.  When you transmit messages in\n+        this manner, they will always be saved in the addressee's\n+        LOG and NOT in any other data set. (NOTE: Use of the TRANSMIT\n+        MESSAGE keyword will inhibit this function.)\n+\n+        You may request the TRANSMIT command to encipher your data\n+        before transmitting it by specifying the ENCIPHER keyword.\n+        You will then be prompted by the TRANSMIT command for the\n+        enciphering options which will be passed to the Access\n+        Method Services REPRO command. (not supported at 2ISG).\n+\n+                   (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTXD\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IDT#PTXD": {"ttr": 6923, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x14F\\x00\\x1b\\x00\\x19\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T14:46:00", "lines": 27, "newlines": 25, "modlines": 0, "user": "$354JDM"}, "text": "+        The format of the TSO TRANSMIT command is:\n+\n+          TRANSMIT  (or XMIT)\n+             (addresseelist)\n+             COPYLIST/NOCOPYLIST\n+             DATASET(dsn)/DSNAME(dsn)/DDNAME(ddname)/FILE(ddname)/\n+             TERMINAL\n+             ENCIPHER\n+             EPILOG/NOEPILOG\n+             FULLSCREEN/LINE/LINE(nn)\n+             LOG/NOLOG/LOG(ALL)\n+             LOGNAME(name)\n+             MEMBERS(memberlist)\n+             MESSAGE/MSG\n+             NOTIFY/NOTIFY(ALL)/NONOTIFY\n+             OUTDDNAME(ddname)/OUTFILE(ddname)/\n+             OUTDSNAME(dsname)/OUTDSN(dsname)\n+             PARM(parameters)\n+             PDS/SEQ\n+             PROLOG/NOPROLOG\n+             SYSOUT(sysout class or *)\n+\n+             (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTXE\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTXE": {"ttr": 6925, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x14F\\x00\\x1b\\x00\\x1c\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T14:46:00", "lines": 27, "newlines": 28, "modlines": 0, "user": "$354JDM"}, "text": "+  DEFAULTS:  EPILOG LOG NOCOPYLIST NOTIFY PDS PROLOG TERMINAL\n+             FULLSCREEN (display terminals only)\n+\n+ 'addresseelist'\n+                  You must specify at least this parameter to\n+                  the TRANSMIT command.  You may specify one\n+                  or a combination of the following forms of\n+                  addressees:\n+\n+                  node/userid       ===>     POK/IBMUSER\n+                  node.userid       ===>     POK.IBMUSER\n+                  nickname          ===>     JPALMER\n+                  distribution list ===>     SANJOSE\n+\n+                  Enter HELP NICKNAME to obtain additional information\n+                  on how to construct nickname and distribution list\n+                  entries in the nickname section of the Interactive\n+                  Data Transmission Facility names data set.\n+ DATASET\n+                  Enter DATASET(dsname) to indicate to the TRANSMIT\n+                  command the data set that you want transmitted to\n+                  the specified addressee.\n+                  (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTXF\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTXF": {"ttr": 6927, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x14F\\x00\\x17\\x00\\x14\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T14:46:00", "lines": 23, "newlines": 20, "modlines": 0, "user": "$354JDM"}, "text": "+ DSNAME           Enter DSNAME(dsname) to indicate to the TRANSMIT\n+                  command the data set that you want transmitted to\n+                  the specified addressee.\n+\n+ DDNAME           Enter DDNAME(filename) to indicate to the TRANSMIT\n+                  command the filename of an already allocated\n+                  data set that you want transmitted to the specified\n+                  addressee.  Typically this will be a data set\n+                  which you have identified by issuing the TSO\n+                  ALLOCATE command.\n+\n+ FILE             Enter FILE(filename) to indicate to the TRANSMIT\n+                  command the filename of an already allocated\n+                  data set that you want transmitted to the specified\n+                  addressee.  Typically this will be a data set\n+                  which you have identified by issuing the TSO\n+                  ALLOCATE command.\n+\n+                  (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTXG\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTXG": {"ttr": 6929, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x14G\\x00\\x17\\x00\\x14\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T14:47:00", "lines": 23, "newlines": 20, "modlines": 0, "user": "$354JDM"}, "text": "+ TERMINAL         You may request the TRANSMIT command to obtain\n+                  its data to be transmitted from your terminal\n+                  by specifying this keyword.  Your input may be\n+                  in line mode (LINE keyword) or in full screen\n+                  (FULLSCREEN keyword).  Your input will default\n+                  FULLSCREEN mode if you are logged onto a 3270\n+                  Information Display System terminal with a\n+                  minimum screen size of 24 rows by 80 columns.\n+\n+ MESSAGE          You may, in addition to transmitted a data set,\n+                  append messages to your transmission by simply\n+                  specifying the MESSAGE keyword.  Your input may\n+                  be in line mode (LINE keyword) or in full screen\n+                  (FULLSCREEN keyword).  Your input will default to\n+                  FULLSCREEN mode if you are logged onto a 3270\n+                  Information Display System terminal with a\n+                  minimum screen size of 24 rows by 80 columns.\n+\n+                  (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTXH\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTXH": {"ttr": 6931, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x14G\\x00\\x1a\\x00\\x17\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T14:47:00", "lines": 26, "newlines": 23, "modlines": 0, "user": "$354JDM"}, "text": "+ MSG              You may, in addition to transmitted a data set,\n+                  append messages to your transmission by simply\n+                  specifying the MESSAGE keyword.  Your input may\n+                  be in line mode (LINE keyword) or in full screen\n+                  (FULLSCREEN keyword).  Your input will default to\n+                  FULLSCREEN mode if you are logged onto a 3270\n+                  Information Display System terminal with a\n+                  minimum screen size of 24 rows by 80 columns.\n+\n+ COPYLIST         You may request the TRANSMIT command to build\n+                  a list of addressees and append it as a prolog\n+                  to the message you are transmitting.  If you are\n+                  transmitting a data set, the list of addressees\n+                  will be transmitted as an accompanying message.\n+\n+ NOCOPYLIST       You may request the TRANSMIT command not\n+                  build and append a list of addressees with a\n+                  transmission by specifying this keyword. This\n+                  is the DEFAULT if you do not specify either\n+                  keyword.\n+\n+                  (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTXI\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTXI": {"ttr": 6933, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x14G\\x00\\x1c\\x00\\x1b\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T14:47:00", "lines": 28, "newlines": 27, "modlines": 0, "user": "$354JDM"}, "text": "+ ENCIPHER         You may request the TRANSMIT command to echipher\n+                  your data set prior to transmitting it to the\n+                  addressee(s).  If your installation allows this\n+                  option the TRANSMIT command will prompt you for\n+                  ENCIPHER options which will be passed to the\n+                  Access Methods Services REPRO command-not supported.\n+\n+ EPILOG           You may request the TRANSMIT command to append\n+                  epilog data from your names data set when\n+                  a message is being transmitted.  Enter HELP\n+                  NICKNAME to obtain additional information about\n+                  how to construct the nicknames section of the\n+                  Interactive Data Transmission Facility names\n+                  data set.\n+\n+ NOEPILOG         You may request the TRANSMIT command not to\n+                  append epilog data from your names data set\n+                  when a message is being transmitted.  This is\n+                  the DEFAULT value if you do not specify either\n+                  keyword.  Enter HELP NICKNAME to obtain additonal\n+                  information about how to construct the nicknames\n+                  section of the Interactive Data Transmission\n+                  Facility names data set.\n+                  (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTXJ\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTXJ": {"ttr": 6935, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x14G\\x00\\x1b\\x00\\x1a\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T14:47:00", "lines": 27, "newlines": 26, "modlines": 0, "user": "$354JDM"}, "text": "+ FULLSCREEN       You may request the TRANSMIT command to obtain\n+                  terminal input (MESSAGE keyword) in full screen\n+                  mode by specifying the FULLSCREEN keyword.\n+                  You may enter messages in full screen mode if you\n+                  are logged on to a 3270 Information Display System\n+                  terminal with a minimum screen size of 24 rows by\n+                  80 columns.  While entering message text in full\n+                  screen mode, you may use the program function keys\n+                  as follows:\n+\n+                  PF7 or PF19  Scroll Up     (beginning of data)\n+                  PF8 or PF20  Scroll Down   (end of data)\n+                  PF3 or PF15  TRANSMIT data to addressee(s)\n+                  PA1          Attention\n+                  PA2          Reshow message text before last\n+                               modification.\n+\n+ LINE             You may request the TRANSMIT command to obtain\n+ LINE(nn)         data from the terminal a line at a time by\n+                  specifying the LINE keyword.  Your terminal\n+                  input will default to this mode if you are\n+                  not logged on to a 3270 Information Display\n+                  (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTXK\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTXK": {"ttr": 6937, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x14H\\x00\\x1b\\x00\\x19\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T14:48:00", "lines": 27, "newlines": 25, "modlines": 0, "user": "$354JDM"}, "text": "+                  System terminal with a minimum screen size of\n+                  24 rows by 80 columns.  You may also use the\n+                  LINE keyword when entering data while executing\n+                  a CLIST.  You may terminate LINE mode input\n+                  by either entering a null line or the one or\n+                  two character value entered on the LINE(xx)\n+                  format of the LINE keyword.\n+\n+ LOG              You may request the TRANSMIT command to log\n+                  all transmissions by specifying the LOG keyword.\n+                  Your entry in the log data set will contain the\n+                  following information: node, userid, data set\n+                  name and the date transmitted.  NOTE: When you\n+                  specify the LOG keyword, it will override any\n+                  LOG function specified on nickname or distribution\n+                  list entries found in the TRANSMIT names data set\n+                  which are involved in this transmission.  Enter\n+                  HELP NICKNAME to obtain additional information\n+                  on how to contruct the nicknames section of the\n+                  Interactive Data Transmission Facility names\n+                  data set.\n+\n+                  (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTXL\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTXL": {"ttr": 6939, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x14H\\x00\\x1c\\x00\\x1a\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T14:48:00", "lines": 28, "newlines": 26, "modlines": 0, "user": "$354JDM"}, "text": "+ NOLOG            You may request the TRANSMIT command not to log\n+                  transmissions by specifying the NOLOG keyword.\n+                  NOTE: When you specify the NOLOG keyword, it will\n+                  override any LOG function specified on nickname\n+                  or distribution list entries found in the names\n+                  dataset which are involved in this transmission.\n+                  Enter HELP NICKNAME to obtain additional information\n+                  on how to contruct the nicknames section of the\n+                  Interactive Data Transmission Facility names\n+                  data set.\n+\n+ LOG(ALL)         You may request the TRANSMIT command to build\n+                  a log entry for each addressee in an addressee\n+                  list and for any addressees obtained from\n+                  distribution lists in the names data set.\n+                  NOTE: When you specify the LOG(ALL) keyword, it will\n+                  override any LOG function specified on nickname\n+                  or distribution list entries found in the names\n+                  dataset that are involved in this transmission.\n+                  Enter HELP NICKNAME to obtain additional information\n+                  on how to contruct the nicknames section of the\n+                  Interactive Data Transmission Facility names\n+                  data set.\n+                  (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTXM\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTXM": {"ttr": 6941, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x14H\\x00\\x1a\\x00\\x18\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T14:48:00", "lines": 26, "newlines": 24, "modlines": 0, "user": "$354JDM"}, "text": "+ LOGNAME          You may request the TRANSMIT command to log a\n+                  transmission in a particular log data set by\n+                  specifying LOGNAME(logname) keyword.  Your\n+                  transmission will then be logged in the data set\n+                  named 'userid.log.logname'.\n+\n+                  NOTE: When you specify the LOGNAME keyword, it will\n+                  override any LOG function specified on nickname\n+                  or distribution list entries found in the names\n+                  dataset that are involved in this transmission.\n+                  Enter HELP NICKNAME to obtain additional information\n+                  on how to contruct the nicknames section of the\n+                  Interactive Data Transmission Facility names\n+                  data set.\n+\n+ MEMBERS          You may request the TRANSMIT command to process\n+                  selected members of a partitioned data set by\n+                  specifying the MEMBERS keyword. You may specify\n+                  MEMBERS(member01) to transmit a single member\n+                  or you may specify MEMBERS(member01 member02 etc)\n+                  to transmit a list of members.\n+                  (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTXN\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTXN": {"ttr": 6943, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x14H\\x00\\x18\\x00\\x16\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T14:48:00", "lines": 24, "newlines": 22, "modlines": 0, "user": "$354JDM"}, "text": "+ NOTIFY           You may request the TRANSMIT command to indicate\n+                  to the Interactive Data Transmisison Facility\n+                  RECEIVE command that RECEIVE should transmit\n+                  a notification to you when the addressee has\n+                  received the data sent by you. Your NOTIFY\n+                  request will always occur when you use the\n+                  node.userid and node/userid addressee format.\n+                  For nicknames and distribution lists, your\n+                  notification requests are controlled by the\n+                  :NOTIFY/:NONOTIFY tag in the names data set.\n+\n+                  NOTE: When you specify the NOTIFY keyword, it will\n+                  override any NONOTIFY function specified on nickname\n+                  or distribution list entries found in the names\n+                  dataset which are involved in this transmission.\n+                  Enter HELP NICKNAME to obtain additional information\n+                  on how to contruct the nicknames section of the\n+                  Interactive Data Transmission Facility names\n+                  data set.\n+                  (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTXO\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTXO": {"ttr": 6945, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x14I\\x00\\x19\\x00\\x16\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T14:49:00", "lines": 25, "newlines": 22, "modlines": 0, "user": "$354JDM"}, "text": "+ NOTIFY(ALL)      You may request the TRANSMIT command to indicate\n+                  to the Interactive Data Transmisison Facility\n+                  RECEIVE command that RECEIVE should transmit\n+                  a notification to you when the addressee has\n+                  received the data sent by you. Your NOTIFY\n+                  request will always occur when you use the\n+                  node.userid and node/userid addressee format.\n+                  For nicknames and distribution lists, your\n+                  notification requests are controlled by the\n+                  :NOTIFY/:NONOTIFY tag in the names data set.\n+\n+                  NOTE: When you specify the NOTIFY(ALL) keyword, it\n+                  will override any NONOTIFY function specified on\n+                  nicknames or distribution list entries found in the\n+                  names dataset which are involved in this transmission\n+                  Enter HELP NICKNAME to obtain additional information\n+                  on how to contruct the nicknames section of the\n+                  Interactive Data Transmission Facility names\n+                  data set.\n+\n+                  (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTXP\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTXP": {"ttr": 7169, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x14I\\x00\\x1b\\x00\\x1a\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T14:49:00", "lines": 27, "newlines": 26, "modlines": 0, "user": "$354JDM"}, "text": "+ NONOTIFY         You may request the TRANSMIT command to surpress\n+                  notification when a file has been received by\n+                  an addressee by specifying the NONOTIFY keyword.\n+                  Please note that when you specify the NONOTIFY\n+                  keyword that it completely surpresses the\n+                  notification process including any :NOTIFY\n+                  specifications on nickanme and distribution\n+                  list entries in your names data set.\n+                  NOTE: When you specify the NONOTIFY keyword, it will\n+                  override any NOTIFY function specified on nickname\n+                  or distribution list entries found in the names\n+                  dataset that are involved in this transmission.\n+                  Enter HELP NICKNAME to obtain additional information\n+                  on how to contruct the nicknames section of the\n+                  Interactive Data Transmission Facility names\n+                  data set.\n+\n+ PARM             You may specify a character string to be passed\n+                  to your installation's exit routines.  If the\n+                  parameter contains blanks or other special\n+                  characters, you must enclose the string in quotes.\n+                  Normally, you will only supply a parameter value\n+                  (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTXQ\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTXQ": {"ttr": 7171, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x14I\\x00\\x19\\x00\\x16\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T14:49:00", "lines": 25, "newlines": 22, "modlines": 0, "user": "$354JDM"}, "text": "+                  if indicated by your installation support\n+                  personnel.  This parameter value only has meaning\n+                  to your installation's exit routines.\n+\n+ PDS              You may request the TRANSMIT command to preserve\n+                  the directory information of the partitioned\n+                  data set you are transmitting by specifying this\n+                  parameter.  When you specify the PDS keyword\n+                  you will force the addressee to restore the\n+                  transmitted file as a partitioned data set.\n+\n+ SEQ              You may request the TRANSMIT command not to\n+                  preserve the directory information, but rather\n+                  to transmit the partitioned data set as a\n+                  sequential data set.  This allows the addressee to\n+                  receive the file as a sequential data set or\n+                  as a member of a partitioned data set.  You may\n+                  only specify SEQ when you specify a single member\n+                  of a partitioned data set.\n+\n+                  (continued next page)\n)PROC\n  &ZUP   = IDT#P\n  &ZCONT = IDT#PTXR\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PTXR": {"ttr": 7173, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x864O\\x14I\\x00\\x1a\\x00\\x19\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-12-10T14:49:00", "lines": 26, "newlines": 25, "modlines": 0, "user": "$354JDM"}, "text": "+ PROLOG           You may request the TRANSMIT command to prefix\n+                  prolog data from the control section of your\n+                  Interactive Data Transmission Facility names\n+                  dataset by specifying the PROLOG keyword.\n+                  Enter HELP NICKNAME to obtain additional information\n+                  on how to construct the control section of your\n+                  Interactive Data Transmission Facility names\n+                  data set.\n+\n+ NOPROLOG         You may request the TRANSMIT command NOT to prefix\n+                  prolog data from the control section of your\n+                  Interactive Data Transmission Facility names\n+                  dataset by specifying the PROLOG keyword.\n+                  Enter HELP NICKNAME to obtain additional information\n+                  on how to construct the control section of your\n+                  Interactive Data Transmission Facility names\n+                  data set.\n+\n+ SYSOUT           You may request the TRANSMIT command to direct\n+                  utility program messages (e.g. IEBCOPY) to a\n+                  specific sysout class or to your terminal.If\n+                  you specify SYSOUT(*), you will receive all\n+                  utility program messages on your terminal.\n)PROC\n  &ZUP  = IDT#P\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PT1A": {"ttr": 7175, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x86\\x16\\x7f\\x00\\x86\\x17\\x1f\\x084\\x00\\x0c\\x00\\x05\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1986-06-16T00:00:00", "modifydate": "1986-06-20T08:34:00", "lines": 12, "newlines": 5, "modlines": 0, "user": "SS02JDM"}, "text": "%             Interactive Data Transmission Facility\n+\n+      This panel will allow you to send a message to a TSO user or\n+   a VM/CMS user on another system. Once you enter the system node\n+   name and userid of the  receiving user,  press enter.  An input\n+   screen will appear for you to  type your message.  Once you are\n+   done with the message, press PFK3 to end the input and transmit\n+   the message.  The message will  be transmitted to the  user and\n+   will be acknowledged by  the RECEIVE  command on your part.  As\n+   usual all traffic is logged in your LOG file.\n+\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PT2A": {"ttr": 7177, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x86\\x16\\x7f\\x00\\x864O\\x14P\\x00\\x19\\x00\\x05\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1986-06-16T00:00:00", "modifydate": "1986-12-10T14:50:00", "lines": 25, "newlines": 5, "modlines": 0, "user": "$354JDM"}, "text": "%               Interactive Data Transmission Facility\n+\n+         This panel will send a file to a TSO user or VM/CMS user on\n+     on another system. You must enter the system node name of where\n+     the receiving user resides. After that, enter the userid of the\n+     user (there is no validity check to ensure that the ID actually\n+     exists).\n+\n+         Next you must  enter the file type; SEQ or PDS. In the file\n+     transfer  TRANSMIT  will  know  if  the  file  is sequential or\n+     partitioned by the file type.   But in the case of transmitting\n+     files to VM,  the VM system can  not unload PDS files sent with\n+     the MVS utility IEBCOPY. Therefore only sequential files should\n+     be sent to VM or members of PDS's transmitted sequentially.\n+\n+         NOTIFY is a request of the TRANSMIT  command to indicate to\n+     RECEIVE command  that  RECEIVE should  transmit  a notification\n+     to you when the addressee has  received the  data  sent by you.\n+     For users of nicknames or distribution lists, your notification\n+     requests are  controlled  by the  :/NOTIFY/:NONOTIFY tag in the\n+     names data set.\n+                    (CONTINUED ON NEXT PAGE)\n)PROC\n  &ZCONT = IDT#PT2B\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#PT2B": {"ttr": 7179, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x86\\x17\\x1f\\x084\\x00\\x08\\x00\\x19\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1986-06-20T08:34:00", "lines": 8, "newlines": 25, "modlines": 0, "user": "SS02JDM"}, "text": "+\n+        The file name of the file to be transmitted must be entered.\n+    Naming conventions used in TSO are used. If the file name is not\n+    placed in single quotes, then the TSO prefix (usually the TSO\n+    USERID) is appended onto the beginning of the file name.\n+\n+\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#P0": {"ttr": 7181, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x18\\x00\\x00\\x00\\x88\\x18\\x9f\\x00\\x97\\x15\\x7f\\x07C\\x00(\\x00$\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.24", "flags": 0, "createdate": "1988-07-07T00:00:00", "modifydate": "1997-06-06T07:43:00", "lines": 40, "newlines": 36, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+     % TSO/E  TRANSMIT  MEMBERS  OF  A  PDS  USING  SELECT\n+\n+ TO SYSTEM==>_SY+  +1A - HRCC-1A ESA           3A - PRCC-3A OS/390\n+                    1B - HRCC-1B ESA           3B - PRCC-3B ESA\n+                    1E - HRCC-1E OS/390\n+\n+                    2A - ARCC-2A ESA\n+                    2B - ARCC-2B OS/390\n+                    2C - ARCC-2C ESA\n+\n+\n+ TO USERID===>_TUSER  +RECEIVING USER ID\n+    NOTIFY===>_NTF+   +YES OR NO  - NOTIFY USER OF ARRIVAL OF THE FILE.\n+   MESSAGE===>_MES+   +YES OR NO  - SEND A MSG IN ADDITION TO THE FILE.\n+  PDS TO\n+  TRANSFER===>_IFILE                                                  +\n+\n+  NOTE: THE FILE NAME MUST BE PLACED IN QUOTES FULLY QUALIFIED\n+\n+  COMMANDS AVAILABLE WHEN THE MEMBER LIST IS DISPLAYED:\n+\n+  %S+- SELECT FOR TRANSMISSION     %B+- BROWSWE    %E+- EDIT\n)INIT\n  .HELP = IDT#PT2\n)PROC\n VER (&SY,NONBLANK)\n VER (&SY,LIST,1A,1B,1C,1E,2A,2B,2C,3A,3B)\n VER (&TUSER,NONBLANK)\n VER (&TUSER,NAME)\n VER (&NTF,LIST,YES,NO)\n VER (&MES,LIST,YES,NO)\n VER (&IFILE,NONBLANK)\n VER (&IFILE,DSNAME)\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IDT#P1": {"ttr": 7183, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x014\\x00\\x00\\x00\\x86\\x16\\x7f\\x00\\x99\\x19\\x9f\\x13\\t\\x00\\x1a\\x00\"\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.52", "flags": 0, "createdate": "1986-06-16T00:00:00", "modifydate": "1999-07-18T13:09:00", "lines": 26, "newlines": 34, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(48,12) CMD()\n+\n+  1E - FM1E OS/390/V2R5  2A - FM2A OS/390/V2R5\n+  1F - FM1F OS/390/V2R5  2B - FM2B OS/390/V2R5\n+  1H - FM1H OS/390/V2R5  2C - FM2C OS/390/V2R5\n+  1J - FM1J OS/390/V2R5  3A - FM3A OS/390/V2R5\n+  1L - FM1J OS/390/V2R5  3B - FM3B OS/390/V2R5\n+                         3C - FM3C OS/390/V2R5\n+\n+ TO System==>_SY+\n+ TO Userid==>_TUSER   +Receiving Userid\n+\n+\n)INIT\n .HELP = IDT#PT1A\n &ZWINTTL = 'IDTF: TRANSMIT Msg to Another TSO User'\n)PROC\n VER (&SY,NONBLANK)\n VER (&SY,LIST,1C,1D,1E,1F,1H,1L,2A,2B,2C,3A,3B,3C)\n VER (&TUSER,NONBLANK)\n VER (&TUSER,NAME)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#P2": {"ttr": 7185, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01 \\x00\\x00\\x00\\x91\\x10/\\x00\\x99\\x19\\x9f\\x13\\x10\\x00'\\x00*\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@\"", "ispf": {"version": "01.32", "flags": 0, "createdate": "1991-04-12T00:00:00", "modifydate": "1999-07-18T13:10:00", "lines": 39, "newlines": 42, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(63,17) CMD()\n+\n+  1D - FM1E OS/390-V2R5  2A - FM2A OS/390-V2R5\n+  1E - FM1F OS/390-V2R5  2B - FM2B OS/390-V2R5\n+  1H - FM1H OS/390-V2R5  2C - FM2C OS/390-V2R5\n+  1J - FM1J OS/390-V2R5  3A - FM3A OS/390-V2R5\n+  1L - FM1J OS/390-V2R5  3B - FM3B OS/390-V2R5\n+                         3C - FM3B OS/390-V2R5\n+\n+ TO SYSTEM==>_SY+      System ID\n+ TO USERID==>_TUSER   +Receiving Userid\n+FILE TYPE===>_TYP+    +SEQ/PDS - File Type Transmitted\n+   NOTIFY===>_NTF+    +YES/NO  - Notify User Arrival of File\n+  MESSAGE===>_MSN+    +YES/NO  - SEND Msg Along with File\n+\n+FILE NAME===>_IFILE                                          +\n+\n+\n)INIT\n .HELP = IDT#PT2A\n &ZWINTTL = 'IDTF: TRANSMIT File to a TSO User'\n)PROC\n VER (&SY,NONBLANK)\n VER (&SY,LIST,1C,1D,1E,1F,1H,1J,1L,2A,2B,2C,3A,3B,3C)\n VER (&TUSER,NONBLANK)\n VER (&TUSER,NAME)\n VER (&IFILE,NONBLANK)\n VER (&IFILE,DSNAME)\n VER (&TYP,LIST,SEQ,PDS)\n VER (&NTF,LIST,YES,NO)\n VER (&MSN,LIST,YES,NO)\n VER (&TYP,NONBLANK)\n IF (&TYP = PDS)\n     VER (&SY,LIST,1C,1D,1E,1F,1H,1J,1L,2A,2B,2C,3A,3B,3C)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#P3": {"ttr": 7187, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x00\\x00\\x86\\x16\\x9f\\x00\\x99\\x17/\\tS\\x00\\x16\\x00\\x16\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "1986-06-18T00:00:00", "modifydate": "1999-06-21T09:53:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(53,10) CMD()\n+\n+ Distribution\n+      List  Name===>_TUSER    +  List name\n+ Note:\n+   To use a distribution list, you must have created\n+   a file called 'userid.LOG.NAMES'  and placed the\n+   list in the file. Please review the TUTORIAL on\n+   how to create NICKNAMES or distribution lists.\n+\n+\n)INIT\n .HELP = IDT#PT1A\n &ZWINTTL = 'IDTF: TRANSMIT Msg Using Distribution List'\n)PROC\n VER (&TUSER,NONBLANK)\n VER (&TUSER,NAME)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#P4": {"ttr": 7189, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x00\\x00\\x86\\x16\\x9f\\x00\\x99\\x17/\\t\\x02\\x00\\x1b\\x00 \\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "1986-06-18T00:00:00", "modifydate": "1999-06-21T09:02:00", "lines": 27, "newlines": 32, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(60,11) CMD()\n+\n+  List\n+    Name==>_TUSER  +List name\n+  File\n+    Type==>_TYP+   +SEQ/PDS - FILE TYPE TRANSMITTED.\n+                     (PDS is only valid, MVS systems)\n+  Notify==>_NTF+   +YES/NO  - Notify user arrival\n+                              of the file\n+    File==>_IFILE                                         +\n+\n+\n)INIT\n .HELP = IDT#PT2A\n &ZWINTTL = 'IDTF: TRANSMIT File Using Distribution List'\n)PROC\n VER (&TUSER,NONBLANK)\n VER (&TUSER,NAME)\n VER (&IFILE,NONBLANK)\n VER (&IFILE,DSNAME)\n VER (&TYP,LIST,SEQ,PDS)\n VER (&NTF,LIST,YES,NO)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#P5": {"ttr": 7191, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01(\\x00\\x00\\x00\\x86\\x17\\x1f\\x00\\x99\\x19\\x9f\\x13\\x12\\x00G\\x00 \\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.40", "flags": 0, "createdate": "1986-06-20T00:00:00", "modifydate": "1999-07-18T13:12:00", "lines": 71, "newlines": 32, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(64,21) CMD()\n+\n+  1D - FM1E OS/390-V2R5  2A - FM2A OS/390-V2R5\n+  1E - FM1F OS/390-V2R5  2B - FM2B OS/390-V2R5\n+  1H - FM1H OS/390-V2R5  2C - FM2C OS/390-V2R5\n+  1J - FM1J OS/390-V2R5  3A - FM3A OS/390-V2R5\n+  1L - FM1J OS/390-V2R5  3B - FM3B OS/390-V2R5\n+                         3C - FM3C OS/390-V2R5\n+\n+ TO SYSTEM==>_SY+  +   SYSTEM ID\n+ TO USERID==>_TUSER   +RECEIVING USERID\n+ FILE TYPE==>_TYP+    +SEQ/PDS - File Type Transmitted\n+    NOTIFY==>_NTF+    +YES/NO  - Notify User Arrival of File\n+   MESSAGE==>_MSN+    +YES/NO  - SEND Msg Along with File\n+  PDS Name==>_IFILE                                           +\n+  Members:\n+  M0=_M0      +  M1=_M1      +  M2=_M2      +  M3=_M3      +\n+  M4=_M4      +  M5=_M5      +  M6=_M6      +  M7=_M7      +\n+  M8=_M8      +  M9=_M9      +  MA=_MA      +  MB=_MB      +\n+  MC=_MC      +  MD=_MD      +  ME=_ME      +  MF=_MF      +\n+\n+\n)INIT\n .HELP = IDT#PT2A\n &ZWINTTL = 'IDTF: TRANSMIT Selected PDS Members'\n)PROC\n VER (&SY,NONBLANK)\n VER (&SY,LIST,1C,1D,1E,1F,1H,1J,1L,2A,2B,2C,3A,3B,3C)\n VER (&NTF,LIST,YES,NO)\n VER (&IFILE,NONBLANK)\n VER (&IFILE,DSNAME)\n VER (&TUSER,NONBLANK)\n VER (&TUSER,NAME)\n VER (&MSN,LIST,YES,NO)\n IF (&M0 \u00ac= '        ')\n     VER(&M0,NAME)\n IF (&M1 \u00ac= '        ')\n     VER(&M1,NAME)\n IF (&M2 \u00ac= '        ')\n     VER(&M2,NAME)\n IF (&M3 \u00ac= '        ')\n     VER(&M3,NAME)\n IF (&M4 \u00ac= '        ')\n     VER(&M4,NAME)\n IF (&M5 \u00ac= '        ')\n     VER(&M5,NAME)\n IF (&M6 \u00ac= '        ')\n     VER(&M6,NAME)\n IF (&M7 \u00ac= '        ')\n     VER(&M7,NAME)\n IF (&M8 \u00ac= '        ')\n     VER(&M8,NAME)\n IF (&M9 \u00ac= '        ')\n     VER(&M9,NAME)\n IF (&MA \u00ac= '        ')\n     VER(&MA,NAME)\n IF (&MB \u00ac= '        ')\n     VER(&MB,NAME)\n IF (&MC \u00ac= '        ')\n     VER(&MC,NAME)\n IF (&MD \u00ac= '        ')\n     VER(&MD,NAME)\n IF (&ME \u00ac= '        ')\n     VER(&ME,NAME)\n IF (&MF \u00ac= '        ')\n     VER(&MF,NAME)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#P7": {"ttr": 7194, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x99\\x17/\\t\\x08\\x00\\x0f\\x00\\x12\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1999-06-21T09:08:00", "lines": 15, "newlines": 18, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(36,05) CMD()\n+\n+   Enter Transmit\n+    Message Number%===>_CDE      +\n+\n+\n)INIT\n  &ZWINTTL = 'IDTF: TRANSMIT Message Explanations'\n)PROC\n   VER (&CDE,NONBLANK)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDT#P8": {"ttr": 7196, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x86\\x16\\x8f\\x00\\x99\\x17/\\t\\t\\x00\\x0f\\x00\\x10\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1986-06-17T00:00:00", "modifydate": "1999-06-21T09:09:00", "lines": 15, "newlines": 16, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(36,09) CMD()\n+\n+   Enter Receive\n+    Message Number%===>_CDE      +\n+\n+\n)INIT\n  &ZWINTTL = 'IDTF: RECEIVE Message Explanations'\n)PROC\n   VER (&CDE,NONBLANK)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ISG@MSTR": {"ttr": 7198, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x86\\x10\\x7f\\x00\\x86\\x10\\x7f\\t\\t\\x002\\x002\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-04-17T00:00:00", "modifydate": "1986-04-17T09:09:00", "lines": 50, "newlines": 50, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n\u00a2 ATTN(ON) TYPE(TEXT) INTENS(HIGH)\n)BODY\n%                     2ISG  MASTER APPLICATION MENU\n% ===>_ZCMD                                                           +\n%\n%                                                           +USERID   - &ZUSER\n%   1 +PDF      - ISPF/Program Development Facility         +TIME     - &ZTIME\n%   2 +SMP/E    - SMP/E Dialogs                             +TERMINAL - &ZTERM\n%   3 +IPCS     - Interactive Problem Control Facility      +PF KEYS  - &ZKEYS\n%   A +ABR      - FDR/ABR R4.8  testing   (planned)\n%   I +INFOCEN  - Information Center\n%   R +RACF     - RACF Functions\n%   S +IN-HOUSE - Do In-house maintenance functions\n%   X +EXIT     - Terminate ISPF using list/log defaults    +APPLID   - &ZAPPLID\n%\n%\n%\n+Enter%END+command to terminate ISPF.\n%\n)INIT\n  .HELP    = ISP00005     /* Help for this master menu             */\n  &ZPRIM   = YES          /* This is a primary option menu         */\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n            /*******************************************************/\n            /*                                                     */\n            /*     PDF Primary Option Menu                         */\n            /*                                                     */\n            /*******************************************************/\n                1,'PANEL(ISR@PRIM) NEWAPPL(PDF)'\n            /*******************************************************/\n            /*                                                     */\n            /*     The following connects the SMP/E Dialogs        */\n            /*                                                     */\n            /*******************************************************/\n                2,'PGM(GIMISCV) PARM(&ZCMD) NOCHECK NEWAPPL(SMPE)'\n            /*******************************************************/\n            /*                                                     */\n            /*     The following connects the IPCS Dialogs         */\n            /*                                                     */\n            /*******************************************************/\n                3,'CMD(IPCSPANL) NEWAPPL(IPCS)'\n                R,'PANEL(ICHP00)'\n                I,'CMD(ICQICF)'\n                S,'CMD(SYSPR#C)'\n              ' ',' '\n                X,'EXIT'\n                *,'?' )\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ISR@PRIM": {"ttr": 7425, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x00\\x00\\x84 \\x1f\\x00\\x86\\x05O\\x16\\x18\\x00.\\x00.\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1984-07-19T00:00:00", "modifydate": "1986-02-23T16:18:00", "lines": 46, "newlines": 46, "modlines": 0, "user": "SS02JDM"}, "text": "%     2nd Information Systems Group  /  Air Force Communications Command\n%\n+------------------------%ISPF/PDF  PRIMARY OPTION MENU +-----------------------\n%OPTION  ===>_ZCMD                                                             +\n%                                                           +USERID   - &ZUSER\n%   0 +ISPF PARMS  - Specify terminal and user parameters   +TIME     - &ZTIME\n%   1 +BROWSE      -%Display+source data or output listings +TERMINAL - &ZTERM\n%   2 +EDIT        -%Create+or%change+source%data+          +PF KEYS  - &ZKEYS\n%   3 +UTILITIES   - Perform%utility+functions              +DATE     - &ZDATE\n%   4 +FOREGROUND  - Invoke foreground language processors  +JULIAN   - &ZJDATE\n%   5 +BATCH       - Submit job for language processing\n%   6 +COMMAND     - Enter%TSO+command or CLIST\n%   7 +DIALOG TEST - Perform dialog testing\n%   8 +2ISG  TSO   - Perform%2ISG TSO+commands\n%   9 +2ISG  UTIL  -%2ISG UTILITIES+and Cheap%CHECKERS+\n%   C +CHANGES     - Display summary of changes for this release\n%   P +Software    - 2ISG %Software Systems+\n%   T +TUTORIAL    - Display information about ISPF/PDF\n%   X +EXIT        - Terminate ISPF using log and list defaults\n+Enter%END+command to terminate ISPF.\n%\n)INIT\n  .HELP = ISR00003\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n                0,'PANEL(ISPOPTA)'\n                1,'PGM(ISRBRO)'\n                2,'PGM(ISREDIT)'\n                3,'PANEL(ISRUTIL)'\n                4,'PANEL(ISRFPA)'\n                5,'PGM(ISRJB1) PARM(ISRJPA) NOCHECK'\n                6,'PGM(ISRPTC)'\n                7,'PGM(ISRYXDR) NOCHECK'\n                8,'PANEL(SADTSOP)'\n                9,'PANEL(SADUTLP)'\n                C,'PGM(ISPTUTOR) PARM(ISR00005)'\n                P,'PANEL(SADSYSP)'\n                T,'PGM(ISPTUTOR) PARM(ISR00000)'\n              ' ',' '\n                X,'EXIT'\n                *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JUL#C": {"ttr": 7427, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x00\\x00\\x99\\x10o\\x00\\x99\\x19\\x9f\\x13\\x02\\x003\\x00\\x1f\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "1999-04-16T00:00:00", "modifydate": "1999-07-18T13:02:00", "lines": 51, "newlines": 31, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR TSO COMMAND  'JULISPF'         */\n/*                                                        */\n/*      05/09/92 - JDM - RECODED TO ELIMINATE SKELETON    */\n/*      06/13/99 - JDM - NOW ISPF FRIENDLY                */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST   MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &JDATE  = &STR( )\nSET &IJULD = &STR()\nSET &IJULY = &STR()\nSET &IJULJ = &STR()\n/*--------------------------------------------------------*/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC ADDPOP COLUMN(1) ROW(1)\n   ISPEXEC DISPLAY PANEL(JUL#P) CURSOR(JDATE)\n   SET &RC = &LASTCC\n   ISPEXEC REMPOP\n   IF &RC = 8 THEN GOTO ALLDONE\n   IF  &MAXCC NE 0  THEN  GOTO ERRMSG\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GET THE INFO FROM THE PANEL                       */\n   /*--------------------------------------------------------*/\n   JULISPF  &JDATE\n   IF &LASTCC EQ 0 THEN  +\n      DO\n      ISPEXEC VGET (IJULD,IJULY,IJULJ)\n      END\n   ELSE +\n      DO\n      SET &IJULJ = &STR(DATE)\n      SET &IJULY = &STR(ENTERED)\n      SET &IJULD = &STR(INVALID)\n      END\n   GOTO LOOP\nERRMSG:  +\n  WRITE  **  SEVERE  PANEL  ERROR ***\nALLDONE: +\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JUL#P": {"ttr": 7429, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x99\\x10o\\x00\\x99\\x17/\\x10A\\x00\\x19\\x00\\x18\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1999-04-16T00:00:00", "modifydate": "1999-06-21T10:41:00", "lines": 25, "newlines": 24, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(60,17) CMD(ZCMD)\n+\n+ Command%===>_ZCMD                                       +\n+\n+Enter\n+   Date%===>_JDATE       +BLANK       Gives today's Julian\n+                         +            date and day of week\n+Results:                 +            in Y2K format.\n+\n% &IJULJ                  +YYYY.DDD    Gives the requested\n% &IJULY                  +            Gregorian and Julian\n% &IJULD                  +            date.\n+\n+                         +MM/DD/YYYY  Gives the requested\n+                                      Julian date and day\n+                                      of the week.\n+\n+\n)INIT\n &ZWINTTL = 'Tool Box: J U L I A N'\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JULISPF": {"ttr": 7431, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x99\\x16?\\x00\\x99\\x16_\\x08\\x00\\x04\\xd1\\x04\\x01\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1999-06-12T00:00:00", "modifydate": "1999-06-14T08:00:00", "lines": 1233, "newlines": 1025, "modlines": 0, "user": "S218"}, "text": "         TITLE ' ISPF FOR OF TSO JULIAN COMMAND'\n*-------------------------------------------------------------------*\n*\n*        'JULISPF'                Y2K COMPLIANT\n*\n*        BASED UPON THE TSO COMMAND WRITTEN BY BILL GODFREY.\n*        DATE WRITTEN. JULY 13 1977.\n*        DATE UPDATED. JUNE 13, 1999\n*        ATTRIBUTES. RE-ENTRANT.\n*        REMARKS.\n*            THIS TSO COMMAND DISPLAYS THE DAY OF THE WEEK\n*            AND THE MONTH, DAY, YEAR, AND JULIAN DATE. THE\n*            OUTPUT OF THE COMMAND IS PLACED INTO THREE ISPF\n*            VARIABLES, \"SHARED POOL\", TO BE USED IN AN ISPF\n*            DIALOG.\n*\n*            VARIABLE        INFORMATION EXAMPLE\n*\n*            IJULJ           1999.164\n*            IJULY           MONDAY\n*            IJULD           JUNE 14, 1999\n*\n*\n*        NOTE: SEE CORRESPONDING ISPF POPUP PANEL AND CLIST PACKAGED\n*              AS PART OF THE \"TOOLBOX\".\n*\n* CHANGE LOG:  NONE.\n*\n*-------------------------------------------------------------------*\n         SPACE 1\n         LCLB  &MVS\n&MVS     SETB  1\n         SPACE 1\nJULISPF  AMODE 24\nJULISPF  RMODE 24\nJULISPF  CSECT\n         SAVE  (14,12),,JULISPF_&SYSDATE._&SYSTIME\n         LR    R12,15\n         USING JULISPF,R12\n         LR    R2,R1\n         USING CPPL,R2\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         ST    13,4(,1)\n         ST    1,8(,13)\n         LR    13,1\n         USING @DATA,13\n         SPACE 1\n         SLR   R15,R15             ZERO POINTER TO PARSE PDL\n         ST    R15,MYANS           IN CASE IKJRLSA WITHOUT PARSE\n*        LOAD  EP=IDATE\n         L     R0,=V(JULSUB)\n         ST    R0,IDATEA\n         SPACE 1\n*-------------------------------------------------------------------*\n*        SET UP IOPL FOR PUTLINE\n*-------------------------------------------------------------------*\n         SPACE 1\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15                 IOPL\n         SPACE 1\n         AIF   (NOT &MVS).SKIP1\n         L     R15,16              LOAD CVT POINTER\n         TM    444(R15),X'80'      IS PUTLINE LOADED? (VS2)\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,444(,R15)       YES - USE CVTPUTL\n         B     PUTLOADX            BRANCH AROUND LOAD\n.SKIP1   ANOP\nPUTLOAD  EQU   *\n         LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX EQU   *\n         ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         SPACE 1\n*-------------------------------------------------------------------*\n*        SET UP PPL FOR PARSE\n*-------------------------------------------------------------------*\n         SPACE 1\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n         L     R0,=A(JULPCL)\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         LA    R0,MYUWA\n         ST    R0,PPLUWA\n         DROP  R15\n         SPACE 1\n*-------------------------------------------------------------------*\n*        CALL THE PARSE SERVICE ROUTINE\n*-------------------------------------------------------------------*\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         AIF   (NOT &MVS).SKIP2\n         L     R15,16              CVTPTR\n         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,524(,R15)       CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK EQU   *\n.SKIP2   ANOP\n         LINK  EP=IKJPARS\nPARSEEXT EQU   *\n         SPACE 1\n         LTR   R15,R15\n         BZ    OKPARSE\n         LA    R1,MSG01\n         LA    R0,L'MSG01\n         BAL   R14,PUTLINE\n         B     EXIT12\n         SPACE 1\nOKPARSE  EQU   *\n         MVC   MSG02(60),MSG02TXT                                Y2K\n         L     R3,MYANS\n         USING IKJPARMD,R3\n         LA    R4,PARSDATE\n         TM    6(R4),X'80'\n         BZ    TODAY\n         L     R5,0(,R4)\n         LH    R6,4(,R4)\n         MVC   MSG02(2),=C'1A'\n         CH    R6,=H'7'                                          Y2K\n         BE    JULIAND\n         CH    R6,=H'8'                                          Y2K\n         BE    JULIANP\n         CH    R6,=H'10'                                         Y2K\n         BE    MMDDYY\n         CH    R6,=H'1'\n         BNE   INVDATE\n         CLI   0(R5),C'*'\n         BE    TODAY\nINVDATE  EQU   *\n         LA    R1,MSG02\n         LA    R0,L'MSG02\n         BAL   R14,PUTLINE\n         B     EXIT12\n         SPACE 1\nTODAY    EQU   *\n         SLR   R1,R1\n         ST    R1,PARM1\n         LA    R1,1\n         ST    R1,PARM2\n         B     CALL\n         SPACE 1\nJULIAND  EQU   *\n         MVC   WORK(7),0(R5)                                     Y2K\n         MVC   MSG02(2),=C'1B'\nJULIANC  EQU   *\n         TRT   WORK(7),NUMERIC                                   Y2K\n         BNE   INVDATE\n         CLC   WORK+4(3),=C'000'                                 Y2K\n         BE    INVDATE\n         CLC   WORK+4(3),=C'366'                                 Y2K\n         BH    INVDATE\n         BL    JULIANL\n         PACK  DOUBLE,WORK(4)                                    Y2K\n         CVB   R1,DOUBLE\n         MVC   MSG02(2),=C'1C'\n         LR    R0,R1\n         SRL   R1,2\n         SLL   R1,2\n         CR    R0,R1\n         BNE   INVDATE\nJULIANL  EQU   *\n         PACK  DOUBLE,WORK(7)                                    Y2K\n         SPACE 1\n* ------------------------------------------------------------------ *\n*        GO OFF TO SUBROUTINE TO GET CONVERSION FROM PACKED\n*        INPUT\n* ------------------------------------------------------------------ *\n         SPACE 1\nJULIANM  EQU   *\n         MVC   PARM1,DOUBLE+4      MOVE IN X\"YYYYDDDF\"\n         LA    R1,3                INDICATE PACKED INPUT\n         ST    R1,PARM2\n         B     CALL\n         SPACE 1\n* ------------------------------------------------------------------ *\n*        FORMAT SHOULD BE \"YYYY.DDD\"\n* ------------------------------------------------------------------ *\n         SPACE 1\nJULIANP  EQU   *\n         MVC   MSG02(2),=C'1D'\n         CLI   4(R5),C'.'          CHECK FOR YYYY.DDD            Y2K\n         BNE   INVDATE             IF NOT, WRONG FORMAT\n         MVC   WORK(4),0(R5)       MOVE IN THE YEAR YYYY         Y2K\n         MVC   WORK+4(3),5(R5)     MOVE IN THE DAY DDD\n         MVC   MSG02(2),=C'1G'\n         B     JULIANC\n         SPACE 1\n*--------------------------------------------------------------------*\n*        FORMAT SHOULD BE \"MM/DD/YYYY\"\n*--------------------------------------------------------------------*\n         SPACE 1\nMMDDYY   EQU   *\n         MVC   MSG02(2),=C'1E'\n         CLI   2(R5),C'/'          VALIDATE THE FIELD\n         BNE   INVDATE\n         CLI   5(R5),C'/'          VALIDATE NEXT FIELD\n         BNE   INVDATE\n         SPACE 1\n*--------------------------------------------------------------------*\n*        REFORMAT THE FIELD TO \"YYYYMMDD\"\n*--------------------------------------------------------------------*\n         SPACE 1\n         MVC   MSG02(2),=C'1F'\n*        MVC   WORK(2),=C'00'                                    Y2K\n         MVC   WORK(4),6(R5)       MOVE IN YYYY                  Y2K\n         MVC   WORK+4(2),0(R5)     MOVE IN MM\n         MVC   WORK+6(2),3(R5)     MOVE IN DDD\n         TRT   WORK(8),NUMERIC                                   Y2K\n         BNE   INVDATE\n         CLC   WORK+4(2),=C'12'\n         BH    INVDATE\n         CLC   WORK+4(2),=C'00'\n         BE    INVDATE\n         CLC   WORK+6(2),=C'31'\n         BH    INVDATE\n         CLC   WORK+6(2),=C'00'\n         BE    INVDATE\n         PACK  DOUBLE,WORK\n         CVB   R1,DOUBLE\n         ST    R1,PARM1\n         LA    R1,2\n         ST    R1,PARM2\n         SPACE 1\n*--------------------------------------------------------------------*\n*        GO OFF WITH INPUT OF \"YYYYMMDD\" AND RETURN WITH JULIAN\n*        DATE IN THE BINARY FORMAT OF \"YYYYDDD\".\n*--------------------------------------------------------------------*\n         SPACE 1\n         BAL   R8,CALIDATE\n         L     R1,PARM3           VALUE SHOULD BE F\"YYYYDDD\"\n         CVD   R1,DOUBLE          CONVERT TO P\"00000000YYYYDDDF\"\n         B     JULIANM\n         SPACE 1\n*--------------------------------------------------------------------*\n*        SUBROUTINE TO GO OFF TO SUBROUTINE AND ASK FOR\n*\n*          1 - OUTPUT IN JULIAN BINARY F\"YYYYDDD\"\n*         16 - 20 CHAR PROSE IN FORM \"JUNE 3, 1996\"\n*        128 - 8 CHAR WEEKDAY IN FORM OF \"SATURDAY\"\n*--------------------------------------------------------------------*\n         SPACE 1\nCALIDATE EQU   *\n         LA    R1,1+16+128\n         ST    R1,PARM4\n         LA    R1,PARMPTRS\n         LA    R14,PARM1\n         ST    R14,0(,R1)\n         LA    R14,PARM2\n         ST    R14,4(,R1)\n         LA    R14,PARM3\n         ST    R14,8(,R1)\n         LA    R14,PARM4\n         ST    R14,12(,R1)\n         LA    R14,PARM5\n         ST    R14,16(,R1)\n         L     R15,IDATEA\n         BALR  R14,R15\n         BR    R8\n         SPACE 1\nCALL     EQU   *\n         BAL   R8,CALIDATE\n         SPACE 1\n         L     R1,PARM3\n         CVD   R1,DOUBLE\n         UNPK  WORK(7),DOUBLE+4(4)                               Y2K\n         OI    WORK+6,X'F0'                                      Y2K\n         MVI   OUTMSG,C' '\n         MVC   OUTMSG+1(OUTMSGL-1),OUTMSG\n         MVC   OUTJUL(4),WORK          BRING IN \"YYYY\"           Y2K\n         MVI   OUTJUL+4,C'.'           MOVE IN \".\"               Y2K\n         MVC   OUTJUL+5(3),WORK+4      BRING IN \"DDD\"            Y2K\n         MVC   OUTDAY,PARM3+24\n         MVC   OUTDATE,PARM3+4\n         SPACE 1                                                 ISP\n*----------------------------------------------------------------ISP*\n*        ISSUE VDEFINE FOR ALL 3 VARIABLES.                      ISP\n*----------------------------------------------------------------ISP*\nISPF1    EQU   *                                                 ISP\n         LA    R7,VDEF             GET ADDR OF VDEF              ISP\n         ST    R7,CALL1            STASH THE ADDRESS             ISP\n         LA    R7,IJULD            GET ADDR OF FULL DATE VARIABLEISP\n         ST    R7,CALL1+4          STASH THE ADDRESS             ISP\n         LA    R7,OUTDATE          GET ADDR OF FULL DATE FIELD   ISP\n         ST    R7,CALL1+8          STASH THE ADDRESS             ISP\n         LA    R7,CHAR             GET ADDR OF CHAR              ISP\n         ST    R7,CALL1+12         STASH THE ADDRESS             ISP\n         LA    R7,18               GET LENGTH                    ISP\n         ST    R7,ISPFLEN          SAVE THE LENGTH               ISP\n         LA    R7,ISPFLEN          GET ADDR OF LENGTH FIELD      ISP\n         ST    R7,CALL1+16         STASH THE ADDRESS             ISP\n         OI    CALL1+16,X'80'      FLIP ON HIGH ORDER BIT        ISP\n         SPACE 1                                                 ISP\n         LA    R1,CALL1            GET PARAM LIST ADDR           ISP\n         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP\n         LTR   R15,R15                                           ISP\n         BZ    ISPF1A                                            ISP\n         DC    X'00000000'         TRAP                          ISP\n         DS    0H                                                ISP\nISPF1A   EQU   *                                                 ISP\n         LA    R7,VDEF             GET ADDR OF VDEF              ISP\n         ST    R7,CALL1            STASH THE ADDRESS             ISP\n         LA    R7,IJULY            GET ADDR OF DAY VARIABLE      ISP\n         ST    R7,CALL1+4          STASH THE ADDRESS             ISP\n         LA    R7,OUTDAY           GET ADDR OF DAY               ISP\n         ST    R7,CALL1+8          STASH THE ADDRESS             ISP\n         LA    R7,CHAR             GET ADDR OF CHAR              ISP\n         ST    R7,CALL1+12         STASH THE ADDRESS             ISP\n         LA    R7,9                GET LENGTH                    ISP\n         ST    R7,ISPFLEN          SAVE THE LENGTH               ISP\n         LA    R7,ISPFLEN          GET ADDR OF LENGTH FIELD      ISP\n         ST    R7,CALL1+16         STASH THE ADDRESS             ISP\n         OI    CALL1+16,X'80'      FLIP ON HIGH ORDER BIT        ISP\n         SPACE 1                                                 ISP\n         LA    R1,CALL1            GET PARAM LIST ADDR           ISP\n         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP\n         LTR   R15,R15                                           ISP\n         BZ    ISPF1B                                            ISP\n         DC    X'00000000'         TRAP                          ISP\n         DS    0H                                                ISP\nISPF1B   EQU   *                                                 ISP\n         LA    R7,VDEF             GET ADDR OF VDEF              ISP\n         ST    R7,CALL1            STASH THE ADDRESS             ISP\n         LA    R7,IJULJ            GET ADDR OF JULIAN DATE VAR   ISP\n         ST    R7,CALL1+4          STASH THE ADDRESS             ISP\n         LA    R7,OUTJUL           GET ADDR OF JULIAN DATE       ISP\n         ST    R7,CALL1+8          STASH THE ADDRESS             ISP\n         LA    R7,CHAR             GET ADDR OF CHAR              ISP\n         ST    R7,CALL1+12         STASH THE ADDRESS             ISP\n         LA    R7,8                GET LENGTH                    ISP\n         ST    R7,ISPFLEN          SAVE THE LENGTH               ISP\n         LA    R7,ISPFLEN          GET ADDR OF LENGTH FIELD      ISP\n         ST    R7,CALL1+16         STASH THE ADDRESS             ISP\n         OI    CALL1+16,X'80'      FLIP ON HIGH ORDER BIT        ISP\n         SPACE 1                                                 ISP\n         LA    R1,CALL1            GET PARAM LIST ADDR           ISP\n         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP\n         SPACE 1\n         LTR   R15,R15                                           ISP\n         BZ    ISPF2                                             ISP\n         DC    X'00000000'         TRAP                          ISP\n         DS    0H                                                ISP\n         SPACE 1                                                 ISP\n*----------------------------------------------------------------ISP-*\n*        WRITE THE VALUE INTO THE SHARED VARIABLE POOL           ISP\n*----------------------------------------------------------------ISP-*\n         SPACE 1                                                 ISP\nISPF2    EQU   *                                                 ISP\n         LA    R7,VPUT             GET ADDR OF VPUT              ISP\n         ST    R7,CALL2            STASH THE ADDRESS             ISP\n         LA    R7,IJULD            GET ADDR OF DATE ANSWER       ISP\n         ST    R7,CALL2+4          STASH THE ADDRESS             ISP\n         LA    R7,SHR              GET ADDR OF SHR               ISP\n         ST    R7,CALL2+8          STASH THE ADDRESS             ISP\n         OI    CALL2+8,X'80'       FLIP ON HIGH ORDER BIT        ISP\n         LA    R1,CALL2            GET PARAM LIST ADDR           ISP\n         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP\n         LTR   R15,R15                                           ISP\n         BZ    ISPF2A                                            ISP\n         DC    X'00000000'         TRAP                          ISP\n         DS    0H                                                ISP\nISPF2A   EQU   *                                                 ISP\n         LA    R7,VPUT             GET ADDR OF VPUT              ISP\n         ST    R7,CALL2            STASH THE ADDRESS             ISP\n         LA    R7,IJULY            GET ADDR OF DAY OF WEEK       ISP\n         ST    R7,CALL2+4          STASH THE ADDRESS             ISP\n         LA    R7,SHR              GET ADDR OF SHR               ISP\n         ST    R7,CALL2+8          STASH THE ADDRESS             ISP\n         OI    CALL2+8,X'80'       FLIP ON HIGH ORDER BIT        ISP\n         LA    R1,CALL2            GET PARAM LIST ADDR           ISP\n         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP\n         LTR   R15,R15                                           ISP\n         BZ    ISPF2B                                            ISP\n         DC    X'00000000'         TRAP                          ISP\n         DS    0H                                                ISP\nISPF2B   EQU   *                                                 ISP\n         LA    R7,VPUT             GET ADDR OF VPUT              ISP\n         ST    R7,CALL2            STASH THE ADDRESS             ISP\n         LA    R7,IJULJ            GET ADDR OF DAY OF WEEK       ISP\n         ST    R7,CALL2+4          STASH THE ADDRESS             ISP\n         LA    R7,SHR              GET ADDR OF SHR               ISP\n         ST    R7,CALL2+8          STASH THE ADDRESS             ISP\n         OI    CALL2+8,X'80'       FLIP ON HIGH ORDER BIT        ISP\n         LA    R1,CALL2            GET PARAM LIST ADDR           ISP\n         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP\n         LTR   R15,R15                                           ISP\n         BZ    ISPF3                                             ISP\n         DC    X'00000000'         TRAP                          ISP\n         DS    0H                                                ISP\n         SPACE  1                                                ISP\n*----------------------------------------------------------------ISP-*\n*        DELETE THE VARIABLE FROM THIS POOL                      ISP\n*----------------------------------------------------------------ISP-*\n         SPACE 1                                                 ISP\nISPF3    EQU   *                                                 ISP\n         LA    R7,VDEL             GET ADDR OF VDEL              ISP\n         ST    R7,CALL3            STASH THE ADDRESS             ISP\n         LA    R7,IJULD            GET ADDR OF FULL DATE         ISP\n         ST    R7,CALL3+4          STASH THE ADDRESS             ISP\n         OI    CALL3+4,X'80'       FLIP ON HIGH ORDER BIT        ISP\n         SPACE 1                                                 ISP\n         LA    R1,CALL3            GET PARAM LIST ADDR           ISP\n         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP\n         LTR   R15,R15                                           ISP\n         BZ    ISPF3A                                            ISP\n         DC    X'00000000'         TRAP                          ISP\n         DS    0H                                                ISP\nISPF3A   EQU   *                                                 ISP\n         LA    R7,VDEL             GET ADDR OF VDEL              ISP\n         ST    R7,CALL3            STASH THE ADDRESS             ISP\n         LA    R7,IJULY            GET ADDR OF DAY OF WEEK       ISP\n         ST    R7,CALL3+4          STASH THE ADDRESS             ISP\n         OI    CALL3+4,X'80'       FLIP ON HIGH ORDER BIT        ISP\n         SPACE 1                                                 ISP\n         LA    R1,CALL3            GET PARAM LIST ADDR           ISP\n         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP\n         LTR   R15,R15                                           ISP\n         BZ    ISPF3B                                            ISP\n         DC    X'00000000'         TRAP                          ISP\n         DS    0H                                                ISP\nISPF3B   EQU   *                                                 ISP\n         LA    R7,VDEL             GET ADDR OF VDEL              ISP\n         ST    R7,CALL3            STASH THE ADDRESS             ISP\n         LA    R7,IJULJ            GET ADDR OF JULIAN            ISP\n         ST    R7,CALL3+4          STASH THE ADDRESS             ISP\n         OI    CALL3+4,X'80'       FLIP ON HIGH ORDER BIT        ISP\n         SPACE 1                                                 ISP\n         LA    R1,CALL3            GET PARAM LIST ADDR           ISP\n         LINK  EP=ISPLINK          GO OFF TO ISPLINK             ISP\n         LTR   R15,R15                                           ISP\n         BZ    EXIT0                                             ISP\n         DC    X'00000000'         TRAP                          ISP\n         DS    0H                                                ISP\nEXITRAP  EQU   *\n*        LA    R1,OUTMSG\n*        LA    R0,OUTMSGL\n*        BAL   R14,PUTLINE\n*        B     EXIT0\n         SPACE 1\nPUTLINE  EQU   *\n         ST    R14,PUTLINS         SAVE RETURN ADDRESS\n         MVC   MYPTPB(12),MODLPTPB FILL IN PUTLINE PARM BLOCK\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         SLL   R14,16              SHIFT TO LEFT HALFWORD\n         ST    R14,MYSEG1          STORE LENGTH AND HALFWORD ZERO\n         LR    R14,R0              RESTORE ORIGINAL LENGTH\n         BCTR  R14,0               LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INSTR\n         MVC   MYSEG1+4(0),0(R1)   (EXECUTED)\n         EX    R14,*-6             MOVE TEXT TO SEGMENT\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE 1\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE 1\n         L     R14,PUTLINS         GET RETURN ADDRESS\n         BR    R14                 RETURN\n         SPACE 1\nEXIT12   EQU   *\n         LA    R15,12\n         B     EXIT\n         SPACE 1\nEXIT0    EQU   *\n         SR    R15,R15\nEXIT     EQU   *\n         LR    R2,R15\n         IKJRLSA MYANS\n         LR    R1,R13\n         L     0,@SIZE\n         L     R13,4(,R13)\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2\n         LM    R0,R12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n         SPACE 1\n*-------------------------------------------------------------------*\n*        CONSTANTS\n*-------------------------------------------------------------------*\n         SPACE 1\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\nMSG01    DC    C'PARSE ERROR'\nMSG02TXT DS    0CL60\n         DC    CL11'   DATE ERR'\n         DC    CL49' - NOT YYYY.DDD OR YYYYDDD OR MM/DD/YYYY'\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\nNUMERIC  DC    0D'0',240X'FF',10X'00',6X'FF'\n*              THE ABOVE TABLE CAN BE USED TO TEST FOR\n*              NUMERIC CHARACTERS WITH A 'TRT' INSTRUCTION.\n*              IF THE FIELD IS NUMERIC, CONDITION CODE IS 0.\n*              WARNING: 'TRT' CAN CHANGE THE LOW ORDER 8 BITS\n*              OF REGISTER 2 AND LOW ORDER 24 BITS OF REG 1.\n         LTORG\n         SPACE 1\n*-------------------------------------------------------------------*\n*        PARSE PARAMETERS\n*-------------------------------------------------------------------*\n         SPACE 1\n         PRINT NOGEN\nJULPCL   IKJPARM\nPARSDATE IKJIDENT 'DATE',FIRST=ANY,OTHER=ANY,MAXLNTH=10\n         IKJENDP\n         PRINT GEN\n         SPACE 1\n*----------------------------------------------------------------ISP-*\n*        DEFINE THE CONSTANTS, ISPF NEEDS THEM 8 BYTES LONG      ISP\n*----------------------------------------------------------------ISP-*\nVDEF     DC    CL8'VDEFINE'                                      ISP\nVPUT     DC    CL8'VPUT'                                         ISP\nVDEL     DC    CL8'VDELETE'                                      ISP\nSHR      DC    CL8'SHARED'                                       ISP\nIJULD    DC    CL8'(IJULD) '       ENSURE ONE BLANK AT END !!!   ISP\nIJULY    DC    CL8'(IJULY) '       ENSURE ONE BLANK AT END !!!   ISP\nIJULJ    DC    CL8'(IJULJ) '       ENSURE ONE BLANK AT END !!!   ISP\nCHAR     DC    CL8'CHAR'           ACCT IS CHARACTER DEFINED     ISP\n*-------------------------------------------------------------------*\n*        DSECTS\n*-------------------------------------------------------------------*\n         SPACE 1\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nDOUBLE   DS    D\nWORK     DS    D\nMYPPL    DS    7F\nMYANS    DS    A\nMYUWA    DS    A\nMYECB    DS    F\nMYIOPL   DS    4F\nMYPTPB   DS    3F\nMYSEG1   DS    2F,256C\nMYPUTLEP DS    F\nPUTLINS  DS    F\nIDATEA   DS    A\nISPFLEN  DS    F                                                 ISP\nMSG02    DS    CL60                                              Y2K\nPARMPTRS DS    5F\nPARM1    DS    F\nPARM2    DS    F\nPARM4    DS    F\nPARM3    DS    8D\nPARM5    DS    32D\nOUTMSG   DS    0C\nOUTDAY   DS    CL9\n         DS    CL1\nOUTDATE  DS    CL20\n         DS    CL1\nOUTJUL   DS    CL6\n         DS    CL11\nOUTMSGL  EQU   *-OUTMSG\n         DS    0F\nCALL1    DS    0CL20\n         DS    F                   A(VDEF)\n         DS    F                   A(VARIABLE NAME)\n         DS    F                   A(VARIABLE VALUE)\n         DS    F                   A(CHAR)\n         DS    F                   A(L4+X'80000000')\n         SPACE\n*--------------------------------------------------------------------*\n*        DATA AREA TO WRITE VARIABLE INTO SHARED POOL\n*--------------------------------------------------------------------*\n         SPACE\n         DS    0F\nCALL2    DS    0CL12\n         DS    F                   A(VPUT)\n         DS    F                   A(VARIABLE NAME)\n         DS    F                   A(SHR+X'80000000')\n         SPACE\n*--------------------------------------------------------------------*\n*        DATA AREA TO WRITE VARIABLE INTO SHARED POOL\n*--------------------------------------------------------------------*\n         SPACE\n         DS    0F\nCALL3    DS    0CL8\n         DS    F                   A(VDEL)\n         DS    F                   A(VARIABLE NAME+X'80000000)\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE 1\n         IKJCPPL\n         SPACE 1\n         IKJPPL\n         SPACE 1\n         IKJIOPL\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n         TITLE '   J U L S U B   '\n*--------------------------------------------------------------------*\n*\n*        'JULSUB'\n*\n*\n*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.\n*        DATE WRITTEN. JUNE 4 1976.\n*        DATE UPDATED. APRIL 23 1980.\n*        ATTRIBUTES. RE-ENTRANT.\n*        REMARKS.\n*            THIS SUBPROGRAM CONVERTS A DATE FROM ONE FORMAT\n*            TO ANOTHER. THE DIFFERENT FORMATS ARE:\n*\n*            INPUT\n*               1   JULIAN       BINARY    F'YYYYDDD'\n*               2   STANDARD     BINARY    F'YYYYMMDD'\n*               3   JULIAN       PACKED    PL4'YYYYDDDF'\n*\n*            OUTPUT\n*               1   JULIAN       BINARY    F'YYYYDDD'\n*               2   STANDARD     BINARY    F'YYYYMMDD'\n*               4   STANDARD     8-CHAR    CL8'MM/DD/YY'\n*               8   ALPHA        8-CHAR    CL8'03JUN76 '\n*              16   PROSE        20-CHAR   CL20'JUNE 3 1976'\n*              32   FRSTLAST     BINARY    F'0' 1 - FIRST OF MONTH\n*                                               2 - LAST OF MONTH\n*              64   WEEKDAYCODE  BINARY    F'0' (SATURDAY)\n*             128   WEEKDAY      8-CHAR    CL8'SATURDAY'\n*             256   TIME         BINARY    F'100THS SEC SINCE MIDNITE'\n*             512   TIME         8-CHAR    CL8'HH:MM:SS'\n*\n*            INPUT MUST BE EITHER JULIAN OR STANDARD.\n*\n*            PASS THE FOLLOWING PARAMETERS VIA A LIST OF ADDRESSES\n*            POINTED TO BY REGISTER 1\n*               1   THE INPUT DATE\n*               2   A FULLWORD CONTAINING THE NUMERIC CODE\n*                   WHICH DEFINES THE INPUT FORMAT\n*               3   THE RECEIVING FIELD FOR OUTPUT\n*               4   A FULLWORD CONTAINING THE NUMERIC CODE\n*                   WHICH DEFINES THE OUTPUT FORMAT\n*               5   A 256 BYTE WORKAREA (ON DOUBLEWORD BOUNDARY)\n*            NOTES.\n*               1) MAKE OUTPUT 00YY IF INPUT IS 00YY.\n*               2) FOR CURRENT DATE, USE TYPE 1 DATE ZERO.\n*--------------------------------------------------------------------*\n         SPACE 1\nINP001   EQU   1\nINP002   EQU   2\nINP003   EQU   3\nOUT001   EQU   1\nOUT002   EQU   2\nOUT004   EQU   4\nOUT008   EQU   8\nOUT016   EQU   16\nOUT032   EQU   32\nOUT064   EQU   64\nOUT128   EQU   128\nOUT256   EQU   1\nOUT512   EQU   2\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nJULSUB   AMODE 24\nJULSUB   RMODE 24\nJULSUB   CSECT\n         SAVE  (14,12),,JULSUB_&SYSDATE._&SYSTIME\n         LR    R12,15\n         USING JULSUB,R12\n         LR    R2,R1\n*        GETMAIN R,LV=@DATAL       GET SAVEAREA ADDRESS\n         L     R1,16(,R1)          GET 5TH WORD ADDR OF 256 BYTE WORK\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         LR    R1,R2\n         USING @DATA,R13\n         SPACE 1\n*--------------------------------------------------------------------*\n*        R2 - ADDRESS OF INPUT DATE\n*        R3 - ADDRESS OF FULL WORD WITH OPTION CHOICE 1/2/3\n*        R4 - ADDRESS OF RECEIVING FIELD\n*        R5 - FULL WORD OF CODE DEFINING OUTPUT FORMAT.\n*--------------------------------------------------------------------*\n         SPACE 1\n         LM    R2,R3,0(R1)         GET INPUT AND DESCRIPTOR\n         LM    R4,R5,8(R1)         GET OUTPUT AND DESCRIPTOR\n         MVC   INPUT(4),0(R2)      COPY INPUT\n         XC    DOUBLE,DOUBLE\n         SLR   R14,R14             ZERO R14\n         ST    R14,FRSTLAST        INIT VALUE TO ZERO\n         ST    R14,TIMEB           INIT VALUE TO ZERO\n         CLI   3(R3),INP003        TEST FOR OPT 3, PACKED?\n         BNE   INP01               NO - BRANCH\n         SPACE 1\n*--------------------------------------------------------------------*\n*        PROCESS JULIAN PACKED INPUT\n*--------------------------------------------------------------------*\n         SPACE 1\n         ST    R14,DOUBLE          INIT VALUE TO ZERO            Y2K\n         MVC   DOUBLE+4(4),INPUT   GET FULL INPUT FIELD\n         CVB   R1,DOUBLE\n         ST    R1,JB\nJULCOMM  EQU   *\n         L     R14,DOUBLE+4        SAVE YYYYDDDF                 Y2K\n         LH    R1,DOUBLE+4         GET YYYY                      Y2K\n         SLL   R1,16               GET YYYY0000                  Y2K\n         SRL   R1,12               GET 000YYYY0                  Y2K\n         ST    R1,DOUBLE+4         STORE BACK 000YYYY0           Y2K\n         OI    DOUBLE+7,X'0F'      SET SIGN                      Y2K\n         CVB   R1,DOUBLE\n         ST    R1,YYYYB\n*        CH    R1,=H'99'                                         Y2K\n*        BH    *+8                                               Y2K\n*        AH    R1,=H'1900'                                       Y2K\n         ST    R1,CENTB\n         UNPK  YYYYC,DOUBLE+5(3)   SAVE YYYY CHAR\n         MVC   YYC,YYYYC+2\n         SPACE 1\n         ST    R14,DOUBLE+4        RESTORE 00YYDDDF\n         XC    DOUBLE(6),DOUBLE    00YYDDDF TO 0000DDDF\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         UNPK  DDDC,DOUBLE+4(4)    SAVE DDD CHAR\n         CVB   R1,DOUBLE           CONVERT DDD TO BINARY\n         ST    R1,DDDB             SAVE DDD BINARY\n         SPACE 1\n         BAL   R9,TODD\n         BAL   R9,TOSB\n         BAL   R9,TOMON\n         BAL   R9,TOPROSE\n         BAL   R9,TOWEEK\n         BAL   R9,TOTIME\n         BAL   R9,OUTPUT\n         B     EXIT0\n         SPACE 1\nINP01    EQU   *\n         CLI   3(R3),INP001        INPUT JULIAN BINARY?\n         BNE   INP02               NO - BRANCH\n         L     R1,INPUT            GET BINARY YYYYDDD\n         LTR   R1,R1               ZERO?\n         BNZ   INP01A              NO - BRANCH\n         TIME  BIN\n         ST    R0,TIMEB            SAVE TIME\n         SLR   R0,R0\n         STM   R0,R1,DOUBLE\n         AP    DOUBLE+4(4),=PL4'1900000'                         Y2K\n         CVB   R1,DOUBLE\n         B     INP01B\n         SPACE 1\nINP01A   CVD   R1,DOUBLE           TO DECIMAL\nINP01B   ST    R1,JB\n         B     JULCOMM             PROCEED AS IF INP003\n         SPACE 1\n*--------------------------------------------------------------------*\n*        CONVERT JULIAN DATE TO MONTH-DAY-YEAR\n*\n*            INPUT  - YYYYB AND DDDB   (ALSO YYC)\n*\n*            OUTPUT - MMB AND DDB, MMC AND DDC, FRSTLAST\n*--------------------------------------------------------------------*\n         SPACE 1\nTODD     EQU   *\n         MVC   DPM(26),DAYSPMON\n         TM    YYYYB+3,B'00000011' IS YEAR A MULTIPLE OF 4?\n         BNZ   DPM365              NO - BRANCH\n         CLC   YYC,=C'00'          DIVISIBLE BY 100?\n         BNE   DPM366              NO - BRANCH\n         L     R15,CENTB\n         SLR   R14,R14\n         D     R14,=F'400'\n         LTR   R14,R14             EVENLY DIVISIBLE BY 400?\n         BNZ   DPM365              NO - NOT A LEAP YEAR\nDPM366   EQU   *\n         MVI   DPM+3,29            CHANGE FEB TO 29 DAYS\nDPM365   EQU   *\n         LA    R14,2               INDEX FOR DPM\n         LR    R0,R14              INDEX INCREMENT\n         L     R1,DDDB             DAY OF YEAR\nDPMLOOP  EQU   *\n         CH    R1,DPM-2(R14)       DAY LESS THAN OR EQ ENTRY?\n         BE    DPMEND              EQUAL - BRANCH\n         BL    DPMWIN              LESS - BRANCH\n         SH    R1,DPM-2(R14)       NO, SUBTRACT ENTRY FROM DAY\n         ALR   R14,R0              ADD 2 TO INDEX\n         B     DPMLOOP             LOOP\n         SPACE 1\nDPMEND   EQU   *\n         MVI   FRSTLAST+3,2        LAST DAY OF MONTH\n         B     DPMCOMM\n         SPACE 1\nDPMWIN   EQU   *\n         CH    R1,=H'1'            FIRST OF MONTH?\n         BNE   DPMCOMM             NO - BRANCH\n         MVI   FRSTLAST+3,1        FIRST DAY OF MONTH\nDPMCOMM  EQU   *\n         SRL   R14,1               HALVE INDEX TO GET MM\n         ST    R1,DDB              SAVE DD BINARY\n         CVD   R1,DOUBLE           CONVERT TO PACKED\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         UNPK  DDC,DOUBLE+6(2)     SAVE DD CHAR\n         ST    R14,MMB             SAVE MM BINARY\n         CVD   R14,DOUBLE          CONVERT TO PACKED\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         UNPK  MMC,DOUBLE+6(2)     SAVE MM CHAR\n         MVI   SLASH1,C'/'\n         MVI   SLASH2,C'/'\n         BR    R9\n         SPACE 1\n*--------------------------------------------------------------------*\n*        CONVERT MONTH NUMBER TO MONTH NAME\n*\n*           INPUT  - MMB     (ALSO DDC AND YYC FOR MOVE)\n*\n*           OUTPUT - MONTH AND ALPHA\n*--------------------------------------------------------------------*\n         SPACE 1\nTOMON    EQU   *\n         L     R15,MMB\n         MH    R15,=H'9'           MULT BY 9\n         LA    R15,ALPHAMON-9(R15) ADDRESS OF ENTRY\n         MVC   MONTH,0(R15)        SAVE PROSE MONTH\n         MVC   ALPHA+2(3),0(R15)   SAVE ALPHA MONTH\n         MVC   ALPHA(2),DDC\n         MVC   ALPHA+5(2),YYC\n         MVI   ALPHA+7,C' '\n         BR    R9\n         SPACE 1\n*--------------------------------------------------------------------*\n*        BUILD PROSE DATE\n*\n*           INPUT  - MONTH, DDC, YYYYC\n*--------------------------------------------------------------------*\n         SPACE 1\nTOPROSE  EQU   *\n         TM    3(R5),OUT016\n         BZR   R9\n         MVI   PROSE,C' '\n         MVC   PROSE+1(L'PROSE-1),PROSE\n         MVC   PROSE(9),MONTH\n         LA    R1,PROSE+9\nPROSE01  EQU   *\n         CLI   0(R1),C' '          BLANK?\n         BNE   PROSE02             NO - FOUND LAST LETTER\n         BCT   R1,PROSE01          BACK UP AND BRANCH\nPROSE02  EQU   *\n         MVC   2(2,R1),DDC\n         CLI   2(R1),C'0'          LEADING ZERO?\n         BNE   PROSE03             NO - BRANCH\n         MVC   2(1,R1),3(R1)       YES - SHIFT\n         MVI   3(R1),C' '\n         BCTR  R1,0\nPROSE03  EQU   *\n         MVI   4(R1),C','          COMMA AFTER DAY\n         LA    R1,1(,R1)           ADD 1 FOR COMMA\n         MVC   5(4,R1),YYYYC\n*        CLC   5(2,R1),=C'00'                                    Y2K\n*        BNE   *+10                                              Y2K\n*        MVC   5(2,R1),=C'19'                                    Y2K\n         BR    R9\n         SPACE 1\n*--------------------------------------------------------------------*\n*        INPUT IS YYYY/MM/DD BINARY\n*--------------------------------------------------------------------*\n         SPACE 1\nINP02    EQU   *\n         L     R1,INPUT\n         CVD   R1,DOUBLE           GET 0000000Y YYYMMDDF\n         LM    R14,R15,DOUBLE\n         NC    DOUBLE,=X'0000000000000FFF' ISOLATE 00000DDF\n         CVB   R1,DOUBLE\n         ST    R1,DDB\n         OI    DOUBLE+7,X'0F'\n         UNPK  DDC,DOUBLE+6(2)\n*\n         STM   R14,R15,DOUBLE\n         NC    DOUBLE,=X'00000000000FF00F' ISOLATE 000MM00F\n         L     R1,DOUBLE+4\n         SRL   R1,8\n         ST    R1,DOUBLE+4\n         OI    DOUBLE+7,X'0F'\n         CVB   R1,DOUBLE\n         CH    R1,=H'12'\n         BNH   *+8\n         LA    R1,13               SET ALL BAD MONTHS TO 13\n         ST    R1,MMB\n         UNPK  MMC,DOUBLE+6(2)\n*\n         SRDL  R14,4               GET YYYYMMDD\n         SLR   R14,R14             GET 00000000 IN R14\n         SRL   R15,12              GET 000YYYYM IN R15\n         STM   R14,R15,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         CVB   R1,DOUBLE\n         ST    R1,YYYYB\n*        CH    R1,=H'99'                                         Y2K\n*        BH    *+8                                               Y2K\n*        AH    R1,=H'1900'                                       Y2K\n         ST    R1,CENTB\n         UNPK  YYYYC,DOUBLE+5(3)\n         MVC   YYC,YYYYC+2\n         MVI   SLASH1,C'/'\n         MVI   SLASH2,C'/'\n*\n         BAL   R9,TOSB\n         BAL   R9,TOJUL\n         BAL   R9,TOMON\n         BAL   R9,TOPROSE\n         BAL   R9,TOWEEK\n         BAL   R9,TOTIME\n         BAL   R9,OUTPUT\n         B     EXIT0\n         SPACE 1\n*--------------------------------------------------------------------*\n*        CONVERT M/D/Y TO JULIAN\n*\n*           INPUT  - MMB, DDB, YYYYB\n*\n*           OUTPUT - DDDB, DDDC, JB\n*--------------------------------------------------------------------*\n         SPACE 1\nTOJUL    EQU   *\n         MVC   DPM(26),DAYSPMON\n         TM    YYYYB+3,B'00000011' IS YEAR A MULTIPLE OF 4?\n         BNZ   JUL365              NO - BRANCH\n         CLC   YYC,=C'00'          DIVISIBLE BY 100?\n         BNE   JUL366              NO - BRANCH\n         L     R15,CENTB\n         SLR   R14,R14\n         D     R14,=F'400'\n         LTR   R14,R14             EVENLY DIVISIBLE BY 400?\n         BNZ   JUL365              NO - NOT A LEAP YEAR\nJUL366   EQU   *\n         MVI   DPM+3,29             CHANGE FEB TO 29 DAYS\nJUL365   EQU   *\n         L     R15,DDB              GET DAYS IN CURRENT MONTH\n         LR    R0,R15               SAVE IT TO COMPARE FOR LAST DAY\n         L     R14,MMB              GET CURRENT MONTH\n         BCTR  R14,0                GET NO. OF COMPLETED MONTHS\n         LA    R1,DPM\n         LTR   R14,R14              JANUARY?\n         BNP   JULEND               YES - BRANCH\n         B     *+8\nJULOOP   EQU   *\n         LA    R1,2(,R1)            POINT TO NEXT MONTH\n         AH    R15,0(,R1)           ADD DAYS IN MONTH TO TOTAL\n         BCT   R14,JULOOP\nJULEND   EQU   *\n         CH    R0,0(,R1)            LAST DAY OF MONTH?\n         BNE   *+8                  NO\n         MVI   FRSTLAST+3,2         YES\n         CH    R0,=H'1'             FIRST DAY OF MONTH?\n         BNE   *+8                  NO\n         MVI   FRSTLAST+3,1         YES\n         ST    R15,DDDB             SAVE DDD\n         CVD   R15,DOUBLE\n         OI    DOUBLE+7,X'0F'       SET SIGN\n         UNPK  DDDC,DOUBLE+4(4)     SAVE DDD CHAR\n         MVC   JC(4),YYYYC                                       Y2K\n         PACK  DOUBLE,JC                                         Y2K\n         CVB   R1,DOUBLE\n         ST    R1,JB\n         BR    R9\n         SPACE 1\n*\n*\n*\n         SPACE 1\nTOSB     EQU   *\n         MVC   WORK(4),YYYYC\n         MVC   WORK+4(2),MMC\n         MVC   WORK+6(2),DDC\n         PACK  DOUBLE,WORK(8)\n         CVB   R1,DOUBLE\n         ST    R1,SB\n         BR    R9\n         SPACE 1\n*--------------------------------------------------------------------*\n*        GET DAY OF WEEK\n*\n*            INPUT  - MMB, DDB, YYYYB\n*\n*            OUTPUT - WEEKB, WEEKC\n*\n*            N = D + 2M + 3(M+1)/5 + Y + Y/4 - Y/100 + Y/400 + 2\n*\n*               WHERE M = 3-14 (JAN,FEB ARE 13,14 OF Y-1)\n*\n*               N/7 LEAVES REMAINDER 0-6, 0 INDICATING SATURDAY\n*--------------------------------------------------------------------*\n         SPACE 1\nTOWEEK   EQU   *\n         TM    3(R5),OUT064+OUT128\n         BZR   R9\n         L     R1,DDB              SET N = D\n         L     R15,CENTB\n         L     R14,MMB\n         CH    R14,=H'2'           JAN OR FEB?\n         BH    WEEKMMOK\n         BE    WEEKFEB\n         LA    R14,13              SET M=13\n         B     WEEKYMIN\n         SPACE 1\nWEEKFEB  EQU   *\n         LA    R14,14              SET M=14\nWEEKYMIN EQU   *\n         BCTR  R15,0               SET Y = Y-1\nWEEKMMOK EQU   *\n         LR    R0,R14              COPY M\n         ALR   R0,R0               GET 2M\n         ALR   R1,R0               SET N = N + 2M\n         LR    R0,R15              SAVE REDEFINED Y\n         SPACE 1\n         LA    R14,1(,R14)         GET M+1\n         MH    R14,=H'3'           GET 3(M+1)\n         SRDL  R14,32              SHIFT INTO R15, ZERO R14\n         D     R14,=F'5'           GET 3(M+1)/5 IN R15\n         ALR   R1,R15              SET N = N + 3(M+1)/5\n         SPACE 1\n         LR    R15,R0              GET Y\n         ALR   R1,R15              SET N = N + Y\n         SLR   R14,R14             ZERO R14\n         D     R14,=F'4'           GET Y/4\n         ALR   R1,R15              SET N = N + Y/4\n         SPACE 1\n         LR    R15,R0              GET Y\n         SLR   R14,R14             ZERO R14\n         D     R14,=F'100'         GET Y/100\n         SLR   R1,R15              SET N = N - Y/100\n         SPACE 1\n         LR    R15,R0              GET Y\n         SLR   R14,R14             ZERO R14\n         D     R14,=F'400'         GET Y/400\n         ALR   R1,R15              SET N = N + Y/400\n         LA    R15,2               GET 2\n         ALR   R1,R15              SET N = N + 2\n         SLR   R0,R0               ZERO R0\n         D     R0,=F'7'            SET N = N/7\n         ST    R0,WEEKB            SAVE REMAINDER\n         LR    R1,R0\n         MH    R1,=H'9'\n         LA    R14,WEEKDAYS(R1)    POINT TO NAME\n         MVC   WEEKC(9),0(R14)     MOVE NAME\n         MVC   WEEKC+9(3),WEEKBLNK PLUS 3 BLANKS\n         BR    R9\n         SPACE 1\n*--------------------------------------------------------------------*\n*        CONVERT TIMEB TO TIMEC\n*\n*           DIVIDE BY 10,10,10,6,10,6,10,6\n*--------------------------------------------------------------------*\n         SPACE 1\nTOTIME   EQU   *\n         TM    2(R5),OUT512\n         BNOR  R9\n         L     R15,TIMEB\n         LA    R6,10               INITIAL DIVISOR\n         LA    R7,12               SET DIVISOR MASK\n         LA    R8,32               SHIFT COUNT\nDECLOOP  EQU   *\n         SR    R14,R14\n         DR    R14,R6\n         LR    R0,R14              SAVE REMAINDER\n         SRDL  R0,4                SHIFT INTO R1\n         SH    R8,=H'4'            DECREMENT SHIFT COUNT\n         LTR   R15,R15             QUOTIENT ZERO?\n         BZ    TOTIMX              YES - BRANCH\n         CL    R8,=F'24'           IF COUNT LT 24\n         BNL   DECLOOP             NO - BRANCH\n         XR    R6,R7               10 TO 6 TO 10 ETC\n         B     DECLOOP\n         SPACE 1\nTOTIMX   EQU   *\n         SRL   R1,0(R8)            SHIFT REMAINING BITS\n         SRL   R1,4                GET 0HHMMSST\n         ST    R1,DOUBLE\n         OI    DOUBLE+3,X'0F'\n         MVC   DOUBLE+6(10),=X'402120204B20204B2020'\n         ED    DOUBLE+6(10),DOUBLE\n         MVC   TIMEC,DOUBLE+8\n         BR    R9\n         SPACE 1\n*---------------------------------------------------------------------*\n*        FORMAT THE OUTPUT AREA BASED UPON 4TH WORD IN PARM LIST.\n*---------------------------------------------------------------------*\n         SPACE 1\nOUTPUT   EQU   *\n         LR    R1,R4               GET THE NUMBER\n         TM    3(R5),OUT001        IS IT 1 - JULIAN BINARY F\"YYYYDDD\"\n         BZ    *+14\n         MVC   0(4,R1),JB          4 CHARACTERS LONG\n         LA    R1,4(,R1)\n         TM    3(R5),OUT002        IS IT 2 - STD BINARY F\"YYYYMMDDD\"\n         BZ    *+14\n         MVC   0(4,R1),SB          4 CHARACTERS LONG\n         LA    R1,4(,R1)\n         TM    3(R5),OUT004        IS IT 4 - STD CHAR \"MM/DD/YY\"\n         BZ    *+14\n         MVC   0(8,R1),SC          8 CHARACTERS LONG\n         LA    R1,8(,R1)\n         TM    3(R5),OUT008        IS IT 8 - ALPHA \"03JUN76 \"\n         BZ    *+14\n         MVC   0(8,R1),ALPHA       8 CHARACTERS LONG\n         LA    R1,8(,R1)\n         TM    3(R5),OUT016        IS IT 16 - 20CHAR \"JUNE 3 1976  \"\n         BZ    *+14\n         MVC   0(L'PROSE,R1),PROSE\n         LA    R1,L'PROSE(,R1)\n         TM    3(R5),OUT032        IS IT 32 - FIRST/LAST  ( 0 / 1 )\n         BZ    *+14\n         MVC   0(4,R1),FRSTLAST    4 BYTES\n         LA    R1,4(,R1)\n         TM    3(R5),OUT064        IS IT 64 - WEEKDAY CODE 0-SAT/6-FRI\n         BZ    *+14\n         MVC   0(4,R1),WEEKB       4 BYTES\n         LA    R1,4(,R1)\n         TM    3(R5),OUT128        IS IT 128 - WEEKDAY NAME\n         BZ    *+14\n         MVC   0(12,R1),WEEKC      12 BYTES\n         LA    R1,12(,R1)\n         TM    2(R5),OUT256        IS IT 256 - TIME BINARY\n         BZ    *+14\n         MVC   0(4,R1),TIMEB       4 BYTES\n         LA    R1,4(,R1)\n         TM    2(R5),OUT512        IS IT 512 - TIME 8 CHAR HH:MM:SS\n         BZ    *+14\n         MVC   0(8,R1),TIMEC       8 BYTES\n         LA    R1,8(,R1)\n         BR    R9\n         SPACE 1\nEXIT0    SR    R15,R15\nEXIT     LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)\n*        FREEMAIN R,A=(1),LV=@DATAL  (COMMENT)\n         LM    R14,R12,12(R13)\n         BR    R14\n         SPACE 1\n*--------------------------------------------------------------------*\n*        CONSTANTS\n*--------------------------------------------------------------------*\n         SPACE 1\nDAYSPMON DC    H'31,28,31,30,31,30,31,31,30,31,30,31,999'\nALPHAMON DC    CL36'JANUARY  FEBRUARY MARCH    APRIL    '\n         DC    CL36'MAY      JUNE     JULY     AUGUST   '\n         DC    CL36'SEPTEMBEROCTOBER  NOVEMBER DECEMBER '\n         DC    CL09'UNKNOWN  '\nWEEKDAYS DC    CL36'SATURDAY SUNDAY   MONDAY   TUESDAY  '\n         DC    CL27'WEDNESDAYTHURSDAY FRIDAY   '\nWEEKBLNK EQU   WEEKDAYS+15         3 BLANKS\n         LTORG\n         SPACE 1\n*--------------------------------------------------------------------*\n*        DSECTS\n*--------------------------------------------------------------------*\n         SPACE 1\n@DATA    DSECT\n         DS    18F\nINPUT    DS    CL8\nDOUBLE   DS    D\nWORK     DS    8C\nSC       DS    0CL8\nMMC      DS    CL2\nSLASH1   DS    C\nDDC      DS    CL2\nSLASH2   DS    C\nYYC      DS    CL2\nYYYYC    DS    CL4\nDDB      DS    F\nMMB      DS    F\nYYYYB    DS    F\nCENTB    DS    F\nDDDB     DS    F\nJB       DS    F\nSB       DS    F\nWEEKB    DS    F\nFRSTLAST DS    F\nTIMEB    DS    F\nTIMEC    DS    CL8\nJC       DS    0CL7                                              Y2K\n         DS    CL4                                               Y2K\nDDDC     DS    CL3\nMONTH    DS    CL9\nALPHA    DS    0CL8\n         DS    CL2\nMON      DS    CL3\n         DS    CL2\n         DS    CL1                 BLANK FILLER LAST BYTE OF ALPHA\nWEEKC    DS    CL12\nPROSE    DS    CL20\nDPM      DS    13H\n@DATAL   EQU   *-@DATA\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JULISPF$": {"ttr": 7941, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x99\\x16?\\x00\\x99!?\\x16A\\x00\\x0f\\x00\\x14\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1999-06-12T00:00:00", "modifydate": "1999-08-01T16:41:00", "lines": 15, "newlines": 20, "modlines": 0, "user": "S218"}, "text": "//*--------------------------------------------------------------*\n//*        INSTALL OF THE 'JULISPF' TSO/ISPF CMD                 *\n//*--------------------------------------------------------------*\n//JULIAN   EXEC ASMHCL,COND=(0,NE),\n//         PARM.C='OBJECT,NODECK,ALIGN,TERM,LIST,RENT,BATCH',\n//         PARM.L='MAP,LIST,RENT'\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.AMODGEN,DISP=SHR\n//SYSPRINT DD SYSOUT=S\n//SYSTERM  DD SYSOUT=*\n//SYSIN    DD DSN=SHARE.SOURCE(JULISPF),DISP=SHR\n//L.SYSLMOD DD DSN=SHARE.LOAD,DISP=SHR,UNIT=,SPACE=\n//SYSIN   DD *\n NAME JULISPF(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LASTI#C": {"ttr": 7943, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99 o\\x00\\x99 o\\x151\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-07-25T00:00:00", "modifydate": "1999-07-25T15:31:00", "lines": 29, "newlines": 29, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      INVOKE 'LASTIPL' TSO COMMAND  (ISPF VERSION)      */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST   MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &XIPL   = &STR()\n/*--------------------------------------------------------*/\n/*      INVOKE THE COMMAND TO GET ANSWER                  */\n/*--------------------------------------------------------*/\n   LASTIPL ISPF\n   ISPEXEC VGET (XIPL)\n   ISPEXEC CONTROL DISPLAY REFRESH\n   ISPEXEC ADDPOP COLUMN(1) ROW(1)\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(LASTI#P)\n   SET &RC = &LASTCC\n   ISPEXEC REMPOP\n   IF &RC = 8 THEN GOTO ALLDONE\n   IF  &MAXCC NE 0  THEN  GOTO ERRMSG\n   GOTO ALLDONE\nERRMSG:  +\n  WRITE  **  SEVERE  PANEL  ERROR ***\nALLDONE: +\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LASTI#P": {"ttr": 7945, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99 o\\x00\\x99 o\\x152\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-07-25T00:00:00", "modifydate": "1999-07-25T15:32:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(52,06) CMD()\n+\n+ The system \"&ZSYSID\"  was last IPL'ed on\n+\n+ &XIPL\n+\n+\n)INIT\n &ZWINTTL =  'Tool Box: Last IPL Information'\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LASTIPL": {"ttr": 7947, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x00\\x00\\x99 o\\x00\\x99 o\\x15&\\x03\\xc7\\x03:\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "1999-07-25T00:00:00", "modifydate": "1999-07-25T15:26:00", "lines": 967, "newlines": 826, "modlines": 0, "user": "S218"}, "text": "         TITLE '   L A S T I P L  -  TSO/ISPF VERSION'\n* ------------------------------------------------------------------ *\n*        'LASTIPL' TSO COMMAND            Y2K COMPLIANT\n*\n*        WRITTEN BY. BILL GODFREY, PRC (PLANNING RESEARCH CORPORATION).\n*        DATE WRITTEN. JANUARY 18 1982.\n*        DATE UPDATED. APRIL 1 1991.     JIM MARSHALL\n*        ATTRIBUTES. RE-ENTRANT.\n*        DESCRIPTION.\n*         THIS TSO COMMAND DISPLAYS THE DATE AND TIME OF THE LAST IPL\n*         ON THE TERMINAL.\n*         DEPENDENCY - WORKS ONLY ON MVS/SE2 OR MVS/SP (IN OTHER WORDS,\n*         MVS SYSTEMS IN WHICH SMF IS RECORDED ON VSAM DATA SETS).\n*\n*         IF YOU PASS A PARAMETER TO LASTIPL OF \"ISPF\", IT WILL  JDM3\n*         YOU WANT THE ANSWER PASSED IN AN ISPF VARIABLE BACK    JDM3\n*         TO THE CALLER.                                         JDM3\n*                            JIM MARSHALL                        JDM3\n*\n*         CHANGE LOG:\n*         01APR92 - ADDED DSECT'S TO REPLACE HARD CODED OFFSETS: JDM1\n*         25JUN98 - CLEANED CODE AND IS NOW Y2K.                 JDM2\n*         31JUL99 - UPDATED TO ADD ISPF VARIABLE FOR THE ANSWER. JDM3\n*\n* ------------------------------------------------------------------ *\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nLASTIPL  AMODE 24\nLASTIPL  RMODE 24\nLASTIPL  CSECT\n         SAVE (14,12),,LASTIPL_&SYSDATE._&SYSTIME\n         LR    R12,R15\n         USING LASTIPL,R12\n         LR    R2,R1               SAVE ADDRESS OF CPPL\n         USING CPPL,R2             ESTABLISH ADDRESSABILITY\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         LR    R9,R1\n         USING @DATA,R9\n         ST    R13,4(,R9)\n         ST    R9,8(,R13)\n         LR    R13,R9\n         SPACE\n*-------------------------------------------------------------------*\n*        PROCESS THE CMD BUFFER TO GET THE REST OF THE PARMS TO\n*        PASS TO THE HIGH LEVEL ASSEMBLER.\n*\n*        CMD BUFFER\n*          2   2\n*        *---*---*---------------------------------------*\n*        *BUF*CMD*LASTIPL ISPF                           *\n*        *LEN*LEN*                                       *\n*        *---*---*---------------------------------------*\n*\n*-------------------------------------------------------------------*\n         SPACE\n         L     R10,CPPLCBUF        LOAD R10 W/ADDR OF INPUT CMD BUF\n         LH    R8,0(,R10)          GET LENGTH OF CMD BUFFER      JDM3\n         LTR   R8,R8               IS IT ZERO??                  JDM3\n         BZ    ABEND0              SOMETHING IS AMISS??          JDM3\n         LH    R8,2(,R10)          GET LENGTH OF CMD ITSELF      JDM3\n         CH    R8,=H'7'            JUST COMMAND ITSELF?          JDM3\n         BE    CONTTSO             SOMETHING IS AMISS??          JDM3\n         B     CONTISP             SKIP TSO SETTING              JDM3\n         SPACE 1                                                 JDM3\nCONTTSO  EQU   *                                                 JDM3\n         MVI   ISPSW,X'00'         SET SW FOR LATER              JDM3\n         B     CONT                                              JDM3\nCONTISP  EQU   *                                                 JDM3\n         MVI   ISPSW,X'FF'         WANT ISPF VERSION             JDM3\nCONT     EQU   *                                                 JDM3\n         MVC   PUTPTPB(12),MODEL\n         LA    R15,PUTIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R1,ECB\n         ST    R1,IOPLECB\n         SR    R0,R0\n         ST    R0,ECB\n         DROP  R15                 IOPL\n         SPACE\n         L     R15,CVTPTR          GET POINTER TO CVT            JDM1\n         USING CVTMAP,R15          GET ADDRESSABILITY TO IT      JDM1\n         L     R10,CVTSMCA         FIND SMCA                     JDM1\n         DROP  R15                                               JDM1\n         USING SMCABASE,R10        GET ADDRESSABILITY            JDM1\n         LA    R3,SMCAIDTE         POINT TO IPL DATE             JDM1\n         LA    R4,SMCAITME         POINT TO IPL TIME             JDM1\n         DROP  R10                                               JDM1\n         MVC   WORK(4),0(R3)       GET THE DATE 0CYYDDD          JDM2\n         AP    WORK,=PL4'1900000'  ADJUST FOR 2000               JDM2\n         MVC   JULDATE(9),JULPATT  MOVE IN PATTERN               JDM2\n         ED    JULDATE,WORK        MAKE IT READABLE              JDM2\n         BAL   R8,DATECONV\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(MESSLEN-1),MESSAGE\n         MVC   MESSAGE(15),=C'LAST IPL WAS ON'\n         LA    R15,MESSAGE+16\n         MVC   MESSAGE+16(9),PARM3+20  DAY OF WEEK\n         LA    R15,MESSAGE+25\nBACK1    EQU   *\n         CLI   0(R15),C' '\n         BNE   *+8\n         BCT   R15,BACK1\n         LA    R15,2(,R15)\n         MVC   0(20,R15),PARM3     MONTH DAY YEAR\n         LA    R15,20(,R15)\nBACK2    EQU   *\n         CLI   0(R15),C' '\n         BNE   *+8\n         BCT   R15,BACK2\n         LA    R15,2(,R15)\n         MVI   0(R15),C'('\n         MVC   1(8,R15),JULDATE+1  JULIAN DATE\n         MVI   09(R15),C')'\n         LA    R15,11(,R15)\n         MVC   0(2,R15),=C'AT'\n         LA    R15,3(,R15)         POINT TO WHERE HH.MM WILL GO\n         L     R1,0(,R4)\n         SLR   R0,R0\n         D     R0,=F'360000'\n         CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  0(2,R15),DOUBLE+6(2)\n         LR    R1,R0\n         SLR   R0,R0\n         D     R0,=F'6000'\n         CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  3(2,R15),DOUBLE+6(2)\n         MVI   2(R15),C'.'\n         LA    R15,5(,R15)\n         SPACE\n         SPACE 1                                                 JDM3\n         CLI   ISPSW,X'FF'         ISPF SWITCH SET ??            JDM3\n         BE    ISPF1                                             JDM3\n         SPACE 1                                                 JDM3\n         LA    R1,MESSAGE\n         LA    R0,4(,R15)\n         SR    R0,R1               COMPUTE LENGTH PLUS 4\n         SPACE\n         SLL   R0,16\n         ST    R0,PUTSEG\n         SPACE\n         PUTLINE PARM=PUTPTPB,OUTPUT=(PUTSEG,DATA),MF=(E,PUTIOPL)\n         SPACE\nEXIT     EQU   *\n         SLR   R15,R15\n         LR    R1,R13\n         L     R0,@SIZE\n         L     R13,4(,R13)\n         FREEMAIN R,LV=(0),A=(1)\n         LR    R15,R2\n         LM    R0,R12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n         SPACE\nABEND0   ABEND 0                                                 JDM3\nABEND1   ABEND 1,DUMP                                            JDM3\nABEND2   ABEND 2,DUMP                                            JDM3\nABEND3   ABEND 3,DUMP                                            JDM3\n*---------------------------------------------------------------------*\n*         DATE CONVERSION\n*---------------------------------------------------------------------*\n         SPACE\nDATECONV EQU   *\n         LA    R1,3\n         ST    R1,PARM2\n         MVC   PARM1(4),WORK                                     JDM2\n         LA    R1,16+128\n         ST    R1,PARM4\n         LA    R1,PARMPTRS\n         LA    R14,PARM1\n         ST    R14,0(,R1)\n         LA    R14,PARM2\n         ST    R14,4(,R1)\n         LA    R14,PARM3\n         ST    R14,8(,R1)\n         LA    R14,PARM4\n         ST    R14,12(,R1)\n         LA    R14,PARM5\n         ST    R14,16(,R1)\n         L     R15,=V(JULSUB)\n         BALR  R14,R15\n         BR    R8\n         SPACE\n*----------------------------------------------------------------JDM3*\n*        ISPF VARIABLE CODE STARTING WITH ISSUING THE            JDM3\n*        VDEFINE FOR THE VARIABLE.                               JDM3\n*----------------------------------------------------------------JDM3*\nISPF1    EQU   *                                                 JDM3\n         LA    R7,VDEF             GET ADDR OF VDEF              JDM3\n         ST    R7,CALL1            STASH THE ADDRESS             JDM3\n         LA    R7,XIPL             GET ADDR OF VARIABLE          JDM3\n         ST    R7,CALL1+4          STASH THE ADDRESS             JDM3\n         LA    R7,MSGIPL           GET ADDR OF ANSWER            JDM3\n         ST    R7,CALL1+8          STASH THE ADDRESS             JDM3\n         LA    R7,CHAR             GET ADDR OF CHAR              JDM3\n         ST    R7,CALL1+12         STASH THE ADDRESS             JDM3\n         LA    R7,47               GET LENGTH                    JDM3\n         ST    R7,ISPFLEN          SAVE THE LENGTH               JDM3\n         LA    R7,ISPFLEN          GET ADDR OF LENGTH FIELD      JDM3\n         ST    R7,CALL1+16         STASH THE ADDRESS             JDM3\n         OI    CALL1+16,X'80'      FLIP ON HIGH ORDER BIT        JDM3\n         SPACE 1                                                 JDM3\n         LA    R1,CALL1            GET PARAM LIST ADDR           JDM3\n         LINK  EP=ISPLINK          GO OFF TO ISPLINK             JDM3\n         LTR   R15,R15                                           JDM3\n         BZ    ISPF2                                             JDM3\n         LR    R3,R15              SAVE RETURN CODE              JDM3\n         B     ABEND1              TRAP                          JDM3\n         SPACE 1                                                 JDM3\n*----------------------------------------------------------------JDM3*\n*        WRITE THE VALUE INTO THE SHARED VARIABLE POOL           JDM3\n*----------------------------------------------------------------JDM3*\n         SPACE 1                                                 JDM3\nISPF2    EQU   *                                                 JDM3\n         LA    R7,VPUT             GET ADDR OF VPUT              JDM3\n         ST    R7,CALL2            STASH THE ADDRESS             JDM3\n         LA    R7,XIPL             GET ADDR OF VARIABLE NAME     JDM3\n         ST    R7,CALL2+4          STASH THE ADDRESS             JDM3\n         LA    R7,SHR              GET ADDR OF SHR               JDM3\n         ST    R7,CALL2+8          STASH THE ADDRESS             JDM3\n         OI    CALL2+8,X'80'       FLIP ON HIGH ORDER BIT        JDM3\n         LA    R1,CALL2            GET PARAM LIST ADDR           JDM3\n         LINK  EP=ISPLINK          GO OFF TO ISPLINK             JDM3\n         LTR   R15,R15                                           JDM3\n         BZ    ISPF3                                             JDM3\n         LR    R3,R15              SAVE RETURN CODE              JDM3\n         B     ABEND2              TRAP                          JDM3\n         SPACE 1                                                 JDM3\n*----------------------------------------------------------------JDM3*\n*        DELETE THE VARIABLE FROM THIS POOL                      JDM3\n*----------------------------------------------------------------JDM3*\n         SPACE 1                                                 JDM3\nISPF3    EQU   *                                                 JDM3\n         LA    R7,VDEL             GET ADDR OF VDEL              JDM3\n         ST    R7,CALL3            STASH THE ADDRESS             JDM3\n         LA    R7,XIPL             GET ADDR OF RESULT            JDM3\n         ST    R7,CALL3+4          STASH THE ADDRESS             JDM3\n         OI    CALL3+4,X'80'       FLIP ON HIGH ORDER BIT        JDM3\n         SPACE 1                                                 JDM3\n         LA    R1,CALL3            GET PARAM LIST ADDR           JDM3\n         LINK  EP=ISPLINK          GO OFF TO ISPLINK             JDM3\n         LTR   R15,R15                                           JDM3\n         BZ    ISPFEND                                           JDM3\n         LR    R3,R15              SAVE RETURN CODE              JDM3\n         B     ABEND3              TRAP                          JDM3\n         SPACE 1                                                 JDM3\nISPFEND  EQU   *                                                 JDM3\n         B     EXIT                                              JDM3\n         SPACE 1                                                 JDM3\n*---------------------------------------------------------------------*\n*        CONSTANTS\n*---------------------------------------------------------------------*\n         SPACE\n         LTORG\n*----------------------------------------------------------------JDM3*\n*        DEFINE THE CONSTANTS, ISPF NEEDS THEM 8 BYTES LONG      JDM3\n*----------------------------------------------------------------JDM3*\n         SPACE 1                                                 JDM3\nVDEF     DC    CL8'VDEFINE'                                      JDM3\nVPUT     DC    CL8'VPUT'                                         JDM3\nVDEL     DC    CL8'VDELETE'                                      JDM3\nSHR      DC    CL8'SHARED'                                       JDM3\nXIPL     DC    CL8'(XIPL)  '       ENSURE ONE BLANK AT END !!!   JDM3\nCHAR     DC    CL8'CHAR'           ACCT IS CHARACTER DEFINED     JDM3\n         SPACE\nMODEL    PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\nMODELL   EQU   *-MODEL\n         SPACE\nJULPATT  DC    X'40202020204B202020'                             JDM2\n@SIZE    DC    0F'0',AL1(0),AL3(@DATAL)                          JDM2\n         DC    0D'0'\n         SPACE\n*---------------------------------------------------------------------*\n*        DSECT\n*---------------------------------------------------------------------*\n         SPACE\n@DATA    DSECT\n         DS    18F\nDOUBLE   DS    D\nPUTIOPL  DS    4F\nPUTPTPB  DS    3F\nWORK     DS    F                                                 JDM2\nECB      DS    F\nPUTSEG   DS    F\nMESSAGE  DS   0CL63\n         DS    CL16'LAST IPL WAS ON '\nMSGIPL   DS    CL10'WEDNESDAY '\n         DS    CL18'SEPTEMBER 10 1981 '\n         DS    CL11'(YYYY.DDD) '                                 JDM2\n         DS    CL03'AT '\n         DS    CL05'HH.MM'\nMESSLEN  EQU   *-MESSAGE\n         DS    0D\nPARMPTRS DS    5F\nPARM1    DS    F\nPARM2    DS    F\nPARM4    DS    F\nPARM3    DS    CL32\nPARM5    DS    32D\nJULDATE  DS    CL09                                              JDM2\nISPSW    DS    CL01                                              JDM3\nISPFLEN  DS    F                                                 JDM3\nCALL1    DS    0CL20                                             JDM3\n         DS    F                   A(VDEF)                       JDM3\n         DS    F                   A(VARIABLE NAME)              JDM3\n         DS    F                   A(VARIABLE VALUE)             JDM3\n         DS    F                   A(CHAR)                       JDM3\n         DS    F                   A(L4+X'80000000')             JDM3\n         SPACE 1                                                 JDM3\n*----------------------------------------------------------------JDM3*\n*        DATA AREA TO WRITE VARIABLE INTO SHARED POOL            JDM3\n*----------------------------------------------------------------JDM3*\n         SPACE 1                                                 JDM3\n         DS    0F                                                JDM3\nCALL2    DS    0CL12                                             JDM3\n         DS    F                   A(VPUT)                       JDM3\n         DS    F                   A(VARIABLE NAME)              JDM3\n         DS    F                   A(SHR+X'80000000')            JDM3\n         SPACE 1                                                 JDM3\n*----------------------------------------------------------------JDM3*\n*        DATA AREA TO WRITE VARIABLE INTO SHARED POOL            JDM3\n*----------------------------------------------------------------JDM3*\n         SPACE 1                                                 JDM3\n         DS    0F                                                JDM3\nCALL3    DS    0CL8                                              JDM3\n         DS    F                   A(VDEL)                       JDM3\n         DS    F                   A(VARIABLE NAME+X'80000000)   JDM3\n         SPACE 1                                                 JDM3\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\n         IKJCPPL\n         SPACE\n         IKJIOPL\n         SPACE\n         IEESMCA                                                 JDM1\n         SPACE 1                                                 JDM1\n         CVT   DSECT=YES,LIST=NO                                 JDM1\n         END\n         TITLE '   J U L S U B   '\n*--------------------------------------------------------------------*\n*\n*        'JULSUB'\n*\n*\n*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.\n*        DATE WRITTEN. JUNE 4 1976.\n*        DATE UPDATED. APRIL 23 1980.\n*        ATTRIBUTES. RE-ENTRANT.\n*        REMARKS.\n*            THIS SUBPROGRAM CONVERTS A DATE FROM ONE FORMAT\n*            TO ANOTHER. THE DIFFERENT FORMATS ARE:\n*\n*            INPUT\n*               1   JULIAN       BINARY    F'YYYYDDD'\n*               2   STANDARD     BINARY    F'YYYYMMDD'\n*               3   JULIAN       PACKED    PL4'YYYYDDDF'\n*\n*            OUTPUT\n*               1   JULIAN       BINARY    F'YYYYDDD'\n*               2   STANDARD     BINARY    F'YYYYMMDD'\n*               4   STANDARD     8-CHAR    CL8'MM/DD/YY'\n*               8   ALPHA        8-CHAR    CL8'03JUN76 '\n*              16   PROSE        20-CHAR   CL20'JUNE 3 1976'\n*              32   FRSTLAST     BINARY    F'0' 1 - FIRST OF MONTH\n*                                               2 - LAST OF MONTH\n*              64   WEEKDAYCODE  BINARY    F'0' (SATURDAY)\n*             128   WEEKDAY      8-CHAR    CL8'SATURDAY'\n*             256   TIME         BINARY    F'100THS SEC SINCE MIDNITE'\n*             512   TIME         8-CHAR    CL8'HH:MM:SS'\n*\n*            INPUT MUST BE EITHER JULIAN OR STANDARD.\n*\n*            PASS THE FOLLOWING PARAMETERS VIA A LIST OF ADDRESSES\n*            POINTED TO BY REGISTER 1\n*               1   THE INPUT DATE\n*               2   A FULLWORD CONTAINING THE NUMERIC CODE\n*                   WHICH DEFINES THE INPUT FORMAT\n*               3   THE RECEIVING FIELD FOR OUTPUT\n*               4   A FULLWORD CONTAINING THE NUMERIC CODE\n*                   WHICH DEFINES THE OUTPUT FORMAT\n*               5   A 256 BYTE WORKAREA (ON DOUBLEWORD BOUNDARY)\n*            NOTES.\n*--------------------------------------------------------------------*\n         SPACE 1\nINP001   EQU   1\nINP002   EQU   2\nINP003   EQU   3\nOUT001   EQU   1\nOUT002   EQU   2\nOUT004   EQU   4\nOUT008   EQU   8\nOUT016   EQU   16\nOUT032   EQU   32\nOUT064   EQU   64\nOUT128   EQU   128\nOUT256   EQU   1\nOUT512   EQU   2\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nJULSUB   AMODE 24\nJULSUB   RMODE 24\nJULSUB   CSECT\n         SAVE  (14,12),,JULSUB_&SYSDATE._&SYSTIME\n         LR    R12,15\n         USING JULSUB,R12\n         LR    R2,R1\n*        GETMAIN R,LV=@DATAL       GET SAVEAREA ADDRESS\n         L     R1,16(,R1)          GET 5TH WORD ADDR OF 256 BYTE WORK\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         LR    R1,R2\n         USING @DATA,R13\n         SPACE 1\n*--------------------------------------------------------------------*\n*        R2 - ADDRESS OF INPUT DATE\n*        R3 - ADDRESS OF FULL WORD WITH OPTION CHOICE 1/2/3\n*        R4 - ADDRESS OF RECEIVING FIELD\n*        R5 - FULL WORD OF CODE DEFINING OUTPUT FORMAT.\n*--------------------------------------------------------------------*\n         SPACE 1\n         LM    R2,R3,0(R1)         GET INPUT AND DESCRIPTOR\n         LM    R4,R5,8(R1)         GET OUTPUT AND DESCRIPTOR\n         MVC   INPUT(4),0(R2)      COPY INPUT\n         XC    DOUBLE,DOUBLE\n         SLR   R14,R14             ZERO R14\n         ST    R14,FRSTLAST        INIT VALUE TO ZERO\n         ST    R14,TIMEB           INIT VALUE TO ZERO\n         CLI   3(R3),INP003        TEST FOR OPT 3, PACKED?\n         BNE   INP01               NO - BRANCH\n         SPACE 1\n*--------------------------------------------------------------------*\n*        PROCESS JULIAN PACKED INPUT\n*--------------------------------------------------------------------*\n         SPACE 1\n         ST    R14,DOUBLE          INIT VALUE TO ZERO            Y2K\n         MVC   DOUBLE+4(4),INPUT   GET FULL INPUT FIELD\n         CVB   R1,DOUBLE\n         ST    R1,JB\nJULCOMM  EQU   *\n         L     R14,DOUBLE+4        SAVE YYYYDDDF                 Y2K\n         LH    R1,DOUBLE+4         GET YYYY                      Y2K\n         SLL   R1,16               GET YYYY0000                  Y2K\n         SRL   R1,12               GET 000YYYY0                  Y2K\n         ST    R1,DOUBLE+4         STORE BACK 000YYYY0           Y2K\n         OI    DOUBLE+7,X'0F'      SET SIGN                      Y2K\n         CVB   R1,DOUBLE\n         ST    R1,YYYYB\n*        CH    R1,=H'99'                                         Y2K\n*        BH    *+8                                               Y2K\n*        AH    R1,=H'1900'                                       Y2K\n         ST    R1,CENTB\n         UNPK  YYYYC,DOUBLE+5(3)   SAVE YYYY CHAR\n         MVC   YYC,YYYYC+2\n         SPACE 1\n         ST    R14,DOUBLE+4        RESTORE 00YYDDDF\n         XC    DOUBLE(6),DOUBLE    00YYDDDF TO 0000DDDF\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         UNPK  DDDC,DOUBLE+4(4)    SAVE DDD CHAR\n         CVB   R1,DOUBLE           CONVERT DDD TO BINARY\n         ST    R1,DDDB             SAVE DDD BINARY\n         SPACE 1\n         BAL   R9,TODD\n         BAL   R9,TOSB\n         BAL   R9,TOMON\n         BAL   R9,TOPROSE\n         BAL   R9,TOWEEK\n         BAL   R9,TOTIME\n         BAL   R9,OUTPUT\n         B     EXIT0\n         SPACE 1\nINP01    EQU   *\n         CLI   3(R3),INP001        INPUT JULIAN BINARY?\n         BNE   INP02               NO - BRANCH\n         L     R1,INPUT            GET BINARY YYYYDDD\n         LTR   R1,R1               ZERO?\n         BNZ   INP01A              NO - BRANCH\n         TIME  BIN\n         ST    R0,TIMEB            SAVE TIME\n         SLR   R0,R0\n         STM   R0,R1,DOUBLE\n         AP    DOUBLE+4(4),=PL4'1900000'                         Y2K\n         CVB   R1,DOUBLE\n         B     INP01B\n         SPACE 1\nINP01A   CVD   R1,DOUBLE           TO DECIMAL\nINP01B   ST    R1,JB\n         B     JULCOMM             PROCEED AS IF INP003\n         SPACE 1\n*--------------------------------------------------------------------*\n*        CONVERT JULIAN DATE TO MONTH-DAY-YEAR\n*\n*            INPUT  - YYYYB AND DDDB   (ALSO YYC)\n*\n*            OUTPUT - MMB AND DDB, MMC AND DDC, FRSTLAST\n*--------------------------------------------------------------------*\n         SPACE 1\nTODD     EQU   *\n         MVC   DPM(26),DAYSPMON\n         TM    YYYYB+3,B'00000011' IS YEAR A MULTIPLE OF 4?\n         BNZ   DPM365              NO - BRANCH\n         CLC   YYC,=C'00'          DIVISIBLE BY 100?\n         BNE   DPM366              NO - BRANCH\n         L     R15,CENTB\n         SLR   R14,R14\n         D     R14,=F'400'\n         LTR   R14,R14             EVENLY DIVISIBLE BY 400?\n         BNZ   DPM365              NO - NOT A LEAP YEAR\nDPM366   EQU   *\n         MVI   DPM+3,29            CHANGE FEB TO 29 DAYS\nDPM365   EQU   *\n         LA    R14,2               INDEX FOR DPM\n         LR    R0,R14              INDEX INCREMENT\n         L     R1,DDDB             DAY OF YEAR\nDPMLOOP  EQU   *\n         CH    R1,DPM-2(R14)       DAY LESS THAN OR EQ ENTRY?\n         BE    DPMEND              EQUAL - BRANCH\n         BL    DPMWIN              LESS - BRANCH\n         SH    R1,DPM-2(R14)       NO, SUBTRACT ENTRY FROM DAY\n         ALR   R14,R0              ADD 2 TO INDEX\n         B     DPMLOOP             LOOP\n         SPACE 1\nDPMEND   EQU   *\n         MVI   FRSTLAST+3,2        LAST DAY OF MONTH\n         B     DPMCOMM\n         SPACE 1\nDPMWIN   EQU   *\n         CH    R1,=H'1'            FIRST OF MONTH?\n         BNE   DPMCOMM             NO - BRANCH\n         MVI   FRSTLAST+3,1        FIRST DAY OF MONTH\nDPMCOMM  EQU   *\n         SRL   R14,1               HALVE INDEX TO GET MM\n         ST    R1,DDB              SAVE DD BINARY\n         CVD   R1,DOUBLE           CONVERT TO PACKED\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         UNPK  DDC,DOUBLE+6(2)     SAVE DD CHAR\n         ST    R14,MMB             SAVE MM BINARY\n         CVD   R14,DOUBLE          CONVERT TO PACKED\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         UNPK  MMC,DOUBLE+6(2)     SAVE MM CHAR\n         MVI   SLASH1,C'/'\n         MVI   SLASH2,C'/'\n         BR    R9\n         SPACE 1\n*--------------------------------------------------------------------*\n*        CONVERT MONTH NUMBER TO MONTH NAME\n*\n*           INPUT  - MMB     (ALSO DDC AND YYC FOR MOVE)\n*\n*           OUTPUT - MONTH AND ALPHA\n*--------------------------------------------------------------------*\n         SPACE 1\nTOMON    EQU   *\n         L     R15,MMB\n         MH    R15,=H'9'           MULT BY 9\n         LA    R15,ALPHAMON-9(R15) ADDRESS OF ENTRY\n         MVC   MONTH,0(R15)        SAVE PROSE MONTH\n         MVC   ALPHA+2(3),0(R15)   SAVE ALPHA MONTH\n         MVC   ALPHA(2),DDC\n         MVC   ALPHA+5(2),YYC\n         MVI   ALPHA+7,C' '\n         BR    R9\n         SPACE 1\n*--------------------------------------------------------------------*\n*        BUILD PROSE DATE\n*\n*           INPUT  - MONTH, DDC, YYYYC\n*--------------------------------------------------------------------*\n         SPACE 1\nTOPROSE  EQU   *\n         TM    3(R5),OUT016\n         BZR   R9\n         MVI   PROSE,C' '\n         MVC   PROSE+1(L'PROSE-1),PROSE\n         MVC   PROSE(9),MONTH\n         LA    R1,PROSE+9\nPROSE01  EQU   *\n         CLI   0(R1),C' '          BLANK?\n         BNE   PROSE02             NO - FOUND LAST LETTER\n         BCT   R1,PROSE01          BACK UP AND BRANCH\nPROSE02  EQU   *\n         MVC   2(2,R1),DDC\n         CLI   2(R1),C'0'          LEADING ZERO?\n         BNE   PROSE03             NO - BRANCH\n         MVC   2(1,R1),3(R1)       YES - SHIFT\n         MVI   3(R1),C' '\n         BCTR  R1,0\nPROSE03  EQU   *\n         MVI   4(R1),C','          COMMA AFTER DAY\n         LA    R1,1(,R1)           ADD 1 FOR COMMA\n         MVC   5(4,R1),YYYYC\n*        CLC   5(2,R1),=C'00'                                    Y2K\n*        BNE   *+10                                              Y2K\n*        MVC   5(2,R1),=C'19'                                    Y2K\n         BR    R9\n         SPACE 1\n*--------------------------------------------------------------------*\n*        INPUT IS YYYY/MM/DD BINARY\n*--------------------------------------------------------------------*\n         SPACE 1\nINP02    EQU   *\n         L     R1,INPUT\n         CVD   R1,DOUBLE           GET 0000000Y YYYMMDDF\n         LM    R14,R15,DOUBLE\n         NC    DOUBLE,=X'0000000000000FFF' ISOLATE 00000DDF\n         CVB   R1,DOUBLE\n         ST    R1,DDB\n         OI    DOUBLE+7,X'0F'\n         UNPK  DDC,DOUBLE+6(2)\n*\n         STM   R14,R15,DOUBLE\n         NC    DOUBLE,=X'00000000000FF00F' ISOLATE 000MM00F\n         L     R1,DOUBLE+4\n         SRL   R1,8\n         ST    R1,DOUBLE+4\n         OI    DOUBLE+7,X'0F'\n         CVB   R1,DOUBLE\n         CH    R1,=H'12'\n         BNH   *+8\n         LA    R1,13               SET ALL BAD MONTHS TO 13\n         ST    R1,MMB\n         UNPK  MMC,DOUBLE+6(2)\n*\n         SRDL  R14,4               GET YYYYMMDD\n         SLR   R14,R14             GET 00000000 IN R14\n         SRL   R15,12              GET 000YYYYM IN R15\n         STM   R14,R15,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         CVB   R1,DOUBLE\n         ST    R1,YYYYB\n*        CH    R1,=H'99'                                         Y2K\n*        BH    *+8                                               Y2K\n*        AH    R1,=H'1900'                                       Y2K\n         ST    R1,CENTB\n         UNPK  YYYYC,DOUBLE+5(3)\n         MVC   YYC,YYYYC+2\n         MVI   SLASH1,C'/'\n         MVI   SLASH2,C'/'\n*\n         BAL   R9,TOSB\n         BAL   R9,TOJUL\n         BAL   R9,TOMON\n         BAL   R9,TOPROSE\n         BAL   R9,TOWEEK\n         BAL   R9,TOTIME\n         BAL   R9,OUTPUT\n         B     EXIT0\n         SPACE 1\n*--------------------------------------------------------------------*\n*        CONVERT M/D/Y TO JULIAN\n*\n*           INPUT  - MMB, DDB, YYYYB\n*\n*           OUTPUT - DDDB, DDDC, JB\n*--------------------------------------------------------------------*\n         SPACE 1\nTOJUL    EQU   *\n         MVC   DPM(26),DAYSPMON\n         TM    YYYYB+3,B'00000011' IS YEAR A MULTIPLE OF 4?\n         BNZ   JUL365              NO - BRANCH\n         CLC   YYC,=C'00'          DIVISIBLE BY 100?\n         BNE   JUL366              NO - BRANCH\n         L     R15,CENTB\n         SLR   R14,R14\n         D     R14,=F'400'\n         LTR   R14,R14             EVENLY DIVISIBLE BY 400?\n         BNZ   JUL365              NO - NOT A LEAP YEAR\nJUL366   EQU   *\n         MVI   DPM+3,29             CHANGE FEB TO 29 DAYS\nJUL365   EQU   *\n         L     R15,DDB              GET DAYS IN CURRENT MONTH\n         LR    R0,R15               SAVE IT TO COMPARE FOR LAST DAY\n         L     R14,MMB              GET CURRENT MONTH\n         BCTR  R14,0                GET NO. OF COMPLETED MONTHS\n         LA    R1,DPM\n         LTR   R14,R14              JANUARY?\n         BNP   JULEND               YES - BRANCH\n         B     *+8\nJULOOP   EQU   *\n         LA    R1,2(,R1)            POINT TO NEXT MONTH\n         AH    R15,0(,R1)           ADD DAYS IN MONTH TO TOTAL\n         BCT   R14,JULOOP\nJULEND   EQU   *\n         CH    R0,0(,R1)            LAST DAY OF MONTH?\n         BNE   *+8                  NO\n         MVI   FRSTLAST+3,2         YES\n         CH    R0,=H'1'             FIRST DAY OF MONTH?\n         BNE   *+8                  NO\n         MVI   FRSTLAST+3,1         YES\n         ST    R15,DDDB             SAVE DDD\n         CVD   R15,DOUBLE\n         OI    DOUBLE+7,X'0F'       SET SIGN\n         UNPK  DDDC,DOUBLE+4(4)     SAVE DDD CHAR\n         MVC   JC(4),YYYYC                                       Y2K\n         PACK  DOUBLE,JC                                         Y2K\n         CVB   R1,DOUBLE\n         ST    R1,JB\n         BR    R9\n         SPACE 1\n*\n*\n*\n         SPACE 1\nTOSB     EQU   *\n         MVC   WORK(4),YYYYC\n         MVC   WORK+4(2),MMC\n         MVC   WORK+6(2),DDC\n         PACK  DOUBLE,WORK(8)\n         CVB   R1,DOUBLE\n         ST    R1,SB\n         BR    R9\n         SPACE 1\n*--------------------------------------------------------------------*\n*        GET DAY OF WEEK\n*\n*            INPUT  - MMB, DDB, YYYYB\n*\n*            OUTPUT - WEEKB, WEEKC\n*\n*            N = D + 2M + 3(M+1)/5 + Y + Y/4 - Y/100 + Y/400 + 2\n*\n*               WHERE M = 3-14 (JAN,FEB ARE 13,14 OF Y-1)\n*\n*               N/7 LEAVES REMAINDER 0-6, 0 INDICATING SATURDAY\n*--------------------------------------------------------------------*\n         SPACE 1\nTOWEEK   EQU   *\n         TM    3(R5),OUT064+OUT128\n         BZR   R9\n         L     R1,DDB              SET N = D\n         L     R15,CENTB\n         L     R14,MMB\n         CH    R14,=H'2'           JAN OR FEB?\n         BH    WEEKMMOK\n         BE    WEEKFEB\n         LA    R14,13              SET M=13\n         B     WEEKYMIN\n         SPACE 1\nWEEKFEB  EQU   *\n         LA    R14,14              SET M=14\nWEEKYMIN EQU   *\n         BCTR  R15,0               SET Y = Y-1\nWEEKMMOK EQU   *\n         LR    R0,R14              COPY M\n         ALR   R0,R0               GET 2M\n         ALR   R1,R0               SET N = N + 2M\n         LR    R0,R15              SAVE REDEFINED Y\n         SPACE 1\n         LA    R14,1(,R14)         GET M+1\n         MH    R14,=H'3'           GET 3(M+1)\n         SRDL  R14,32              SHIFT INTO R15, ZERO R14\n         D     R14,=F'5'           GET 3(M+1)/5 IN R15\n         ALR   R1,R15              SET N = N + 3(M+1)/5\n         SPACE 1\n         LR    R15,R0              GET Y\n         ALR   R1,R15              SET N = N + Y\n         SLR   R14,R14             ZERO R14\n         D     R14,=F'4'           GET Y/4\n         ALR   R1,R15              SET N = N + Y/4\n         SPACE 1\n         LR    R15,R0              GET Y\n         SLR   R14,R14             ZERO R14\n         D     R14,=F'100'         GET Y/100\n         SLR   R1,R15              SET N = N - Y/100\n         SPACE 1\n         LR    R15,R0              GET Y\n         SLR   R14,R14             ZERO R14\n         D     R14,=F'400'         GET Y/400\n         ALR   R1,R15              SET N = N + Y/400\n         LA    R15,2               GET 2\n         ALR   R1,R15              SET N = N + 2\n         SLR   R0,R0               ZERO R0\n         D     R0,=F'7'            SET N = N/7\n         ST    R0,WEEKB            SAVE REMAINDER\n         LR    R1,R0\n         MH    R1,=H'9'\n         LA    R14,WEEKDAYS(R1)    POINT TO NAME\n         MVC   WEEKC(9),0(R14)     MOVE NAME\n         MVC   WEEKC+9(3),WEEKBLNK PLUS 3 BLANKS\n         BR    R9\n         SPACE 1\n*--------------------------------------------------------------------*\n*        CONVERT TIMEB TO TIMEC\n*\n*           DIVIDE BY 10,10,10,6,10,6,10,6\n*--------------------------------------------------------------------*\n         SPACE 1\nTOTIME   EQU   *\n         TM    2(R5),OUT512\n         BNOR  R9\n         L     R15,TIMEB\n         LA    R6,10               INITIAL DIVISOR\n         LA    R7,12               SET DIVISOR MASK\n         LA    R8,32               SHIFT COUNT\nDECLOOP  EQU   *\n         SR    R14,R14\n         DR    R14,R6\n         LR    R0,R14              SAVE REMAINDER\n         SRDL  R0,4                SHIFT INTO R1\n         SH    R8,=H'4'            DECREMENT SHIFT COUNT\n         LTR   R15,R15             QUOTIENT ZERO?\n         BZ    TOTIMX              YES - BRANCH\n         CL    R8,=F'24'           IF COUNT LT 24\n         BNL   DECLOOP             NO - BRANCH\n         XR    R6,R7               10 TO 6 TO 10 ETC\n         B     DECLOOP\n         SPACE 1\nTOTIMX   EQU   *\n         SRL   R1,0(R8)            SHIFT REMAINING BITS\n         SRL   R1,4                GET 0HHMMSST\n         ST    R1,DOUBLE\n         OI    DOUBLE+3,X'0F'\n         MVC   DOUBLE+6(10),=X'402120204B20204B2020'\n         ED    DOUBLE+6(10),DOUBLE\n         MVC   TIMEC,DOUBLE+8\n         BR    R9\n         SPACE 1\n*---------------------------------------------------------------------*\n*        FORMAT THE OUTPUT AREA BASED UPON 4TH WORD IN PARM LIST.\n*---------------------------------------------------------------------*\n         SPACE 1\nOUTPUT   EQU   *\n         LR    R1,R4               GET THE NUMBER\n         TM    3(R5),OUT001        IS IT 1 - JULIAN BINARY F\"YYYYDDD\"\n         BZ    *+14\n         MVC   0(4,R1),JB          4 CHARACTERS LONG\n         LA    R1,4(,R1)\n         TM    3(R5),OUT002        IS IT 2 - STD BINARY F\"YYYYMMDDD\"\n         BZ    *+14\n         MVC   0(4,R1),SB          4 CHARACTERS LONG\n         LA    R1,4(,R1)\n         TM    3(R5),OUT004        IS IT 4 - STD CHAR \"MM/DD/YY\"\n         BZ    *+14\n         MVC   0(8,R1),SC          8 CHARACTERS LONG\n         LA    R1,8(,R1)\n         TM    3(R5),OUT008        IS IT 8 - ALPHA \"03JUN76 \"\n         BZ    *+14\n         MVC   0(8,R1),ALPHA       8 CHARACTERS LONG\n         LA    R1,8(,R1)\n         TM    3(R5),OUT016        IS IT 16 - 20CHAR \"JUNE 3 1976  \"\n         BZ    *+14\n         MVC   0(L'PROSE,R1),PROSE\n         LA    R1,L'PROSE(,R1)\n         TM    3(R5),OUT032        IS IT 32 - FIRST/LAST  ( 0 / 1 )\n         BZ    *+14\n         MVC   0(4,R1),FRSTLAST    4 BYTES\n         LA    R1,4(,R1)\n         TM    3(R5),OUT064        IS IT 64 - WEEKDAY CODE 0-SAT/6-FRI\n         BZ    *+14\n         MVC   0(4,R1),WEEKB       4 BYTES\n         LA    R1,4(,R1)\n         TM    3(R5),OUT128        IS IT 128 - WEEKDAY NAME\n         BZ    *+14\n         MVC   0(12,R1),WEEKC      12 BYTES\n         LA    R1,12(,R1)\n         TM    2(R5),OUT256        IS IT 256 - TIME BINARY\n         BZ    *+14\n         MVC   0(4,R1),TIMEB       4 BYTES\n         LA    R1,4(,R1)\n         TM    2(R5),OUT512        IS IT 512 - TIME 8 CHAR HH:MM:SS\n         BZ    *+14\n         MVC   0(8,R1),TIMEC       8 BYTES\n         LA    R1,8(,R1)\n         BR    R9\n         SPACE 1\nEXIT0    SR    R15,R15\nEXIT     LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)\n*        FREEMAIN R,A=(1),LV=@DATAL  (COMMENT)\n         LM    R14,R12,12(R13)\n         BR    R14\n         SPACE 1\n*--------------------------------------------------------------------*\n*        CONSTANTS\n*--------------------------------------------------------------------*\n         SPACE 1\nDAYSPMON DC    H'31,28,31,30,31,30,31,31,30,31,30,31,999'\nALPHAMON DC    CL36'JANUARY  FEBRUARY MARCH    APRIL    '\n         DC    CL36'MAY      JUNE     JULY     AUGUST   '\n         DC    CL36'SEPTEMBEROCTOBER  NOVEMBER DECEMBER '\n         DC    CL09'UNKNOWN  '\nWEEKDAYS DC    CL36'SATURDAY SUNDAY   MONDAY   TUESDAY  '\n         DC    CL27'WEDNESDAYTHURSDAY FRIDAY   '\nWEEKBLNK EQU   WEEKDAYS+15         3 BLANKS\n         LTORG\n         SPACE 1\n*--------------------------------------------------------------------*\n*        DSECTS\n*--------------------------------------------------------------------*\n         SPACE 1\n@DATA    DSECT\n         DS    18F\nINPUT    DS    CL8\nDOUBLE   DS    D\nWORK     DS    8C\nSC       DS    0CL8\nMMC      DS    CL2\nSLASH1   DS    C\nDDC      DS    CL2\nSLASH2   DS    C\nYYC      DS    CL2\nYYYYC    DS    CL4\nDDB      DS    F\nMMB      DS    F\nYYYYB    DS    F\nCENTB    DS    F\nDDDB     DS    F\nJB       DS    F\nSB       DS    F\nWEEKB    DS    F\nFRSTLAST DS    F\nTIMEB    DS    F\nTIMEC    DS    CL8\nJC       DS    0CL7                                              Y2K\n         DS    CL4                                               Y2K\nDDDC     DS    CL3\nMONTH    DS    CL9\nALPHA    DS    0CL8\n         DS    CL2\nMON      DS    CL3\n         DS    CL2\n         DS    CL1                 BLANK FILLER LAST BYTE OF ALPHA\nWEEKC    DS    CL12\nPROSE    DS    CL20\nDPM      DS    13H\n@DATAL   EQU   *-@DATA\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LASTIPL$": {"ttr": 8449, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x12\\x00\\x00\\x00\\x82\\x06\\x0f\\x00\\x99!?\\x16G\\x00\\x0f\\x00\\x13\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.18", "flags": 0, "createdate": "1982-03-01T00:00:00", "modifydate": "1999-08-01T16:47:00", "lines": 15, "newlines": 19, "modlines": 0, "user": "S218"}, "text": "//*--------------------------------------------------------------*\n//*        INSTALL OF THE 'LASTIPL' TSO CMD                      *\n//*--------------------------------------------------------------*\n//LASTIPL  EXEC ASMHCL,COND=(0,NE),\n//         PARM.C='OBJECT,NODECK,ALIGN,TERM,LIST,RENT,BATCH',\n//         PARM.L='MAP,LIST,RENT'\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.AMODGEN,DISP=SHR\n//SYSPRINT DD SYSOUT=S\n//SYSTERM  DD SYSOUT=*\n//SYSIN    DD DSN=SHARE.SOURCE(LASTIPL),DISP=SHR\n//L.SYSLMOD DD DSN=SHARE.LOAD,DISP=SHR,UNIT=,SPACE=\n//SYSIN   DD *\n NAME LASTIPL(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LISTC#C": {"ttr": 8451, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x84\\x19\\x8f\\x00\\x86\\x14\\x1f\\x16\\x08\\x00\\x0b\\x00\\x0c\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xc3\\xd1\\xc3@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1984-07-16T00:00:00", "modifydate": "1986-05-21T16:08:00", "lines": 11, "newlines": 12, "modlines": 0, "user": "SS02CJC"}, "text": "PROC 0\n/*-----------------------------------------------------------------*/\n/*      CLIST FOR PDF/TSO COMMAND  LISTCAT                         */\n/*-----------------------------------------------------------------*/\nCONTROL NOMSG PROMPT\n        KOMM CLEAR\n        ISPEXEC  FTOPEN   TEMP\n        ISPEXEC  FTINCL   LISTC#S\n        ISPEXEC  FTCLOSE\n        ISPEXEC  VGET     ZTEMPF\n        EX    '&ZTEMPF'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LISTC#P": {"ttr": 8453, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x84\\x19\\x8f\\x00\\x85\\x10\\x9f\\x14\\x15\\x00\\x16\\x00\\x15\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1984-07-16T00:00:00", "modifydate": "1985-04-19T14:15:00", "lines": 22, "newlines": 21, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+          %PERFORM   L I S T C A T    FUNCTIONS   +\n+\n+ ENTER INDEX LEVEL  +\n+          OR BLANK%===>_INDEX                       +\n+                                 +ABOVE INDEX SHOULD NOT BE IN QUOTES\n+\n+                  %===>_CATOPT   +HISTORY, VOLUME, ALL, OR  BLANK\n)INIT\n .CURSOR = INDEX\n &INDEX   = TRANS (&INDEX ' ',' ',*,*)\n &CATOPT  = TRANS (&CATOPT ' ',' ',*,*)\n)PROC\n IF (&CATOPT   \u00ac=  &Z )\n   VER (&CATOPT,NONBLANK) VER(&CATOPT,LIST,' ',HISTORY,VOLUME,ALL)\n &SEL  =  'CMD(%LISTC#C)'\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LISTC#S": {"ttr": 8455, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x84\\x19\\x8f\\x00\\x84\\x19\\x8f\\x10P\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1984-07-16T00:00:00", "modifydate": "1984-07-16T10:50:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SS02JDM"}, "text": "PROC 0\nCONTROL PROMPT NOFLUSH\n)SEL  &CATOPT = &Z   &&   &INDEX = &Z\n      LISTCAT\n)ENDSEL\n)SEL  &CATOPT \u00ac= &Z   &&   &INDEX = &Z\n      LISTCAT  &CATOPT\n)ENDSEL\n)SEL  &CATOPT \u00ac= &Z   &&   &INDEX \u00ac= &Z\n      LISTCAT  LEVEL(&INDEX)  &CATOPT\n)ENDSEL\n)SEL  &CATOPT = &Z   &&   &INDEX \u00ac= &Z\n      LISTCAT  LEVEL(&INDEX)\n)ENDSEL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LM#C": {"ttr": 8457, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x00\\x00\\x864o\\x00\\x864o\\x086\\x00\\x1f\\x00&\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "1986-12-12T00:00:00", "modifydate": "1986-12-12T08:36:00", "lines": 31, "newlines": 38, "modlines": 0, "user": "$354JDM"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      INVOKE 'LM' TSO COMMAND                           */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST NOMSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &PODSN  = &STR( )\nSET &MASK   = &STR( )\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(LM#P) CURSOR(PODSN)\n   IF &LASTCC = 8 THEN GOTO ALLDONE\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GET THE INFO FROM THE PANEL                       */\n   /*--------------------------------------------------------*/\n   IF &MASK = &STR()  THEN +\n       LM  &PODSN\n   ELSE   +\n       LM  &PODSN  M(&MASK)\n   GOTO LOOP\nALLDONE: +\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LM#P": {"ttr": 8459, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x00\\x00\\x864o\\x00\\x91\\x14/\\x133\\x00\\x1d\\x00\\x1a\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "1986-12-12T00:00:00", "modifydate": "1991-05-22T13:33:00", "lines": 29, "newlines": 26, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+    COMMAND%===>_ZCMD                                                +\n+\n+\n+\n+           % LIST Members of a P D S       +\n+\n+\n+\n+    Enter                                                                   +\n+    DATA SET name%===>_PODSN                                                +\n+\n+       Enter mask%===>_MASK    +  blank - display all member of the PDS+\n+                                  mask  - one to 8 character mask for search.\n+\n+\n+\n+\n+\n)PROC\n VER (&PODSN,NONBLANK)    VER(&PODSN,DSNAME)\n IF  (&MASK \u00ac= &Z)\n      VER(&MASK,NAME)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MEMB#C": {"ttr": 8461, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01#\\x00\\x00\\x00\\x864o\\x00\\x91\\x14/\\x12X\\x00,\\x00\\x1f\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.35", "flags": 0, "createdate": "1986-12-12T00:00:00", "modifydate": "1991-05-22T12:58:00", "lines": 44, "newlines": 31, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      INVOKE 'MEMBER'  TSO COMMAND                      */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST   MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &PODSN  = &STR( )\nSET &MEMB   = &STR( )\nSET &SYT    = &STR(SYS)\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(MEMB#P) CURSOR(MEMB)\n   IF &LASTCC = 8 THEN GOTO ALLDONE\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GET THE INFO FROM THE PANEL                       */\n   /*--------------------------------------------------------*/\n   IF &SYT \u00ac= &STR()  THEN +\n       DO\n       IF &PODSN \u00ac= &STR() THEN +\n          DO\n          WRITE\n          WRITE &PODSN  IGNORED WHEN  SYS  OR  SLPA  CODED\n          WRITE\n          END\n       MEMBER &MEMB &SYT WHERE\n       END\n   ELSE  +\n       DO\n       SET &THEDSN =  &STR(&PODSN.(&MEMB))\n       MEMBER '&THEDSN'\n       END\n   GOTO LOOP\nALLDONE: +\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MEMB#P": {"ttr": 8463, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1e\\x00\\x00\\x00\\x864o\\x00\\x91\\x14/\\x12H\\x00!\\x00\\x15\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.30", "flags": 0, "createdate": "1986-12-12T00:00:00", "modifydate": "1991-05-22T12:48:00", "lines": 33, "newlines": 21, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+    COMMAND%===>_ZCMD                                             +\n+\n+\n+           % M E M B E R    S E A R C H    +\n+\n+   Enter\n+      member name%==>_MEMB    +  blank - display all member of the PDS +\n+\n+   Enter DSN fully                                                          +\n+        qualified                                                           +\n+         with  no                                                           +\n+           qutoes%==>_PODSN                                                 +\n+\n+   Search system\n+        libraries%==>_SYT +      SYS   - search steplib and linklst libraries\n+                                 SLPA  - search link pack area\n+                                 blank - only search the specified DSN\n+                                 note:  if SYS is specified DSN will be ignored\n)PROC\n VER (&MEMB,NONBLANK)  VER(&MEMB,NAME)\n IF  (&PODSN \u00ac= &Z)\n       VER(&PODSN,DSNAME)\n IF (&SYT \u00ac= &Z)\n     VER(&SYT,LIST,SYS,SLPA)\n IF (&SYT = &Z)\n     VER(&PODSN,NONBLANK)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NEWS#C": {"ttr": 8465, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x84 \\x1f\\x00\\x86\\x14\\x1f\\x16\\x08\\x00\\n\\x00\\x0b\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xc3\\xd1\\xc3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1984-07-19T00:00:00", "modifydate": "1986-05-21T16:08:00", "lines": 10, "newlines": 11, "modlines": 0, "user": "SS02CJC"}, "text": "PROC 0\n/*--------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR SADSC NEWS                     */\n/*--------------------------------------------------------*/\nCONTROL NOMSG PROMPT\n        ISPEXEC  FTOPEN   TEMP\n        ISPEXEC  FTINCL   NEWS#S\n        ISPEXEC  FTCLOSE\n        ISPEXEC  VGET     ZTEMPF\n        EX    '&ZTEMPF'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NEWS#P": {"ttr": 8467, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x84 \\x1f\\x00\\x85\\x19?\\x14\\x17\\x00\\x18\\x00\"\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1984-07-19T00:00:00", "modifydate": "1985-07-12T14:17:00", "lines": 24, "newlines": 34, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+               2ISG   % N E W S   +\n+\n+     ENTER NEWS ITEM    +\n+               OR BLANK%===>_ITEM    +\n+\n+\n+     ENTER THE NEWS ITEM NAME TO VIEW. IF YOU ENTER A\n+     A BLANK, YOU WILL GET THE INDEX OF ALL NEWS ITEMS\n+     AVAILABLE FOR VIEWING. ONCE THE NEWS ITEM IS\n+     DISPLAYED, YOU FOLLOW THE SAME RULES AS 'BROWSE'.\n)INIT\n .CURSOR = ITEM\n &INDEX   = TRANS (&ITEM ' ',' ',*,*)\n)PROC\n IF (&ITEM  \u00ac=  &Z )\n   VER (&ITEM,NAME)\n &SEL  =  'CMD(%NEWS#C)'\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NEWS#S": {"ttr": 8469, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x84 \\x1f\\x00\\x84 \\x1f\\x104\\x00\\x08\\x00\\x0b\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1984-07-19T00:00:00", "modifydate": "1984-07-19T10:34:00", "lines": 8, "newlines": 11, "modlines": 0, "user": "SS02JDM"}, "text": "PROC 0\nCONTROL PROMPT NOFLUSH\n)SEL   &ITEM    =  &Z\n       ISPEXEC BROWSE DATASET('SYS1.SADSC.NEWS(#TOPICS)')\n)ENDSEL\n)SEL   &ITEM   \u00ac=  &Z\n       ISPEXEC BROWSE DATASET('SYS1.SADSC.NEWS(&ITEM)')\n)ENDSEL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NFLE#C": {"ttr": 8471, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x853\\x9f\\x00\\x86\\x05o\\x14\\x16\\x00n\\x00Y\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xd9\\xe6@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1985-12-05T00:00:00", "modifydate": "1986-02-25T14:16:00", "lines": 110, "newlines": 89, "modlines": 0, "user": "SS02JRW"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      TRANSFER A FILE TO A VM SYSTEM OVER THE NJE       */\n/*      LINE AS ?????.                                    */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST NOMSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST MSG\nISPEXEC CONTROL ERRORS RETURN\n/*--------------------------------------------------------*/\n/*      SET UP THE VARIABLES                              */\n/*--------------------------------------------------------*/\nSET &NSY  = &STR(VM1)\nSET &VMUSER  = &STR()\nSET &NFLE = &STR()\nFREE  FI(FILEOUT)\nFREE  FI(JCL)\nFREE  FI(MYJCL)\nDELETE DXQRY.ZVTXFLE\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n SET &LASTCC = 0\n SET &MAXCC  = 0\n FREE FI(F80)\n ISPEXEC DISPLAY PANEL(NFLE#P1) CURSOR(NSY)\n IF &LASTCC = 8 THEN GOTO ALLDONE\n SET &LASTCC = 0\n SET &MAXCC  = 0\n /*--------------------------------------------------------*/\n /*      GET THE INFO FROM THE PANEL                       */\n /*--------------------------------------------------------*/\n ISPEXEC  VGET  (&NSY &VMUSER  &NFLE ZUSER)\n ATTR F80 RECFM(F B) LRECL(80) BLKSIZE(80)\n /*--------------------------------------------------------*/\n /* CHECK TO SEE IF THE FILE EXISTS BEFORE WE TRY TO PRINT */\n /*--------------------------------------------------------*/\n DSNCHECK '&NFLE' NOLIST\n IF &LASTCC EQ 0 THEN +\n    DO\n    GOTO DOCARD\n    END\n ELSE +\n    DO\n    WRITE  ERROR !!!!!!!!!\n    WRITE\n    WRITE  FILE YOU REQUESTED TO TRANSFER A FILE THAT DOES NOT EXIST\n    WRITE  OR IS NOT CATALOGED  OR THE MEMBER OF A FILE YOU REQUESTED\n    WRITE  DOES NOT EXIST.  PLEASE RE-SPECIFY WITH CORRECT\n    WRITE  INFORMATION.\n    WRITE\n    GOTO LOOP\n    END\n END\n /*--------------------------------------------------------*/\n /*      ALLOC THE FILE FOR JOB CARD PGM                   */\n /*--------------------------------------------------------*/\nDOCARD: +\n ALLOC FI(FILEOUT) UNIT(VIO) SP(5) TR  NEW DELETE USING(F80)\n DOPROGL JOBCARD\n /*--------------------------------------------------------*/\n /*      GO GET THE JOBCARD  (2 RECORDS)                   */\n /*--------------------------------------------------------*/\n ALLOC FI(JCL) UNIT(SYSDA) SP(5) TR NEW CATALOG USING(F80)  +\n          DA(DXQRY.ZVTXFLE)\n OPENFILE FILEOUT INPUT\n OPENFILE JCL     OUTPUT\n GETFILE FILEOUT\n SET &JCL = &FILEOUT\n PUTFILE JCL\n GETFILE FILEOUT\n SET &JCL = &FILEOUT\n PUTFILE JCL\n /*--------------------------------------------------------*/\n /*      GO GET REST OF JCL FROM THE SKELETON              */\n /*--------------------------------------------------------*/\n ISPEXEC FTOPEN TEMP\n ISPEXEC FTINCL NFLE#S\n ISPEXEC FTCLOSE\n ISPEXEC VGET ZTEMPF\n ALLOC FI(MYJCL) DA('&ZTEMPF') OLD\n OPENFILE MYJCL INPUT\n /*--------------------------------------------------------*/\n /*      GO GET 6  JCL CARDS FROM THE SKELETON             */\n /*--------------------------------------------------------*/\n SET &B=1\n DO WHILE &B<7\n    GETFILE MYJCL\n    SET &JCL = &MYJCL\n    PUTFILE JCL\n    SET &B = &B + 1\n END\n CLOSFILE MYJCL\n CLOSFILE JCL\n CLOSFILE FILEOUT\n SUBMIT DXQRY.ZVTXFLE\n SET &V = &STR($)\n SET &UJOB = &STR(&ZUSER&V)\n WRITE\n WRITE\n WRITE  &UJOB   SUBMITTED TO MVS TO ROUTE FILE  TO &NSY USER &VMUSER\n WRITE\n WRITE\n DELETE DXQRY.ZVTXFLE\n FREE  FI(MYJCL,FILEOUT)\n GOTO LOOP\nALLDONE: +\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NFLE#PT": {"ttr": 8474, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x853\\x9f\\x00\\x854\\x0f\\x10\\t\\x00\\x17\\x00\\x16\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1985-12-05T00:00:00", "modifydate": "1985-12-06T10:09:00", "lines": 23, "newlines": 22, "modlines": 0, "user": "SS02JDM"}, "text": "%              EL-CHEAPO FILE TRANSFER TO A VM USER\n+\n+     This is 2ISG's beginning solution to sending a file to a user on\n+  one of 2ISG's VM systems. A file on the MVS system may be sent to a\n+  VM system over the%Network Job Entry+(NJE) link. The mechanism for\n+  this transfer is to have an ISPF panel create a JCL stream to be\n+  submitted to the MVS batch system to perform the copy. This file will\n+  appear on the VM system of the receiving user as a%READER+file with\n+  the VM user being notifed (if persently signed on) of the jobname and\n+  the TSO user of who sent the job. The VM user must process the reader\n+  file and place it on the appropriate mini-disk (the file should be\n+  renamed when it is placed on the mini-disk). Any file sent with a\n+  LRECL of less than 132 will have the file padded with blanks to make\n+  it LRECL=132. The user may truncate the trailing blanks off the file\n+  when the file is placed on the mini-disk. The maximum LRECL is 255\n+  to be received through this mechanism.\n+\n+     The panel will create a batch job stream to perform the transfer\n+  to VM. The file must be cataloged on the MVS system to be transferred\n+  to VM. Additionally if a member of a PDS is requested, the panel will\n+  check for the existence of the member. If it does not exist, then you\n+  will be told.\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NFLE#P1": {"ttr": 8476, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x853\\x9f\\x00\\x86\\x17/\\x16\\x02\\x00\"\\x00\\x1f\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1985-12-05T00:00:00", "modifydate": "1986-06-21T16:02:00", "lines": 34, "newlines": 31, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+       %SEND A  FILE TO A VM USERID +(EL-CHEAPO FILE TRANSFER)\n+\n+ TO SYSTEM===>_NSY+ VM1- VM SYS 1   TO USERID===>_VMUSER  + RECEIVING\n+                    VM2- VM SYS 2                           VM USER\n+                    VM3- VM SYS 3\n+ ENTER\n+ FILE NAME===>_NFLE                                               +\n+\n+ NOTES:\n+  A. FILE MUST BE CATALOGUED AND DSN MUST BE FULLY QUALIFIED AND\n+     WITHOUT QUOTES.\n+\n+  B. THIS PANEL WILL CREATE A BATCH JOB TO SEND A FILE TO A VM USERID.\n+\n+  C. THERE IS NO CHECK MADE TO SEE IF THIS IS A VALID VM USERID! IF THE\n+     VM USERID IS NOT VALID, THE FILE WILL BE SENT A VM SYSTEM'S USERID\n+     TO BE TRASHED.\n+\n+  D. ANY FILE LESS THAT LRECL=132 WILL BE RECEIVED ON VM AS A PRINT\n+     FILE WITH LRECL=132. YOU MAY TRUNCATE THE FILE TO THE PROPER LENGTH\n+     ANY FILE OVER 132 AND LESS THAN 255 WILL BE RECEIVED ASIS.\n)INIT\n  .HELP = NFLE#PT\n)PROC\n VER (&NSY,LIST,VM1,VM2,VM3)\n VER (&VMUSER,NAME)\n VER (&NFLE,DSNAME)\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NFLE#S": {"ttr": 8478, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x853\\x9f\\x00\\x853\\x9f\\x10\\t\\x00\\x06\\x00\\r\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1985-12-05T00:00:00", "modifydate": "1985-12-05T10:09:00", "lines": 6, "newlines": 13, "modlines": 0, "user": "SS02JDM"}, "text": "/*JOBPARM L=500\n/*OUTPUT NFLE DEST=&NSY..&VMUSER\n//STEP1    EXEC PGM=SYSREPRO,TIME=3\n//SYSPRINT DD SYSOUT=*\n//SYSUT2   DD SYSOUT=(A,,NFLE)\n//SYSUT1   DD DSN=&NFLE,DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NPRT#C": {"ttr": 8705, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x854\\x0f\\x00\\x86\\x05o\\x14\\x17\\x00k\\x00k\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xd9\\xe6@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1985-12-06T00:00:00", "modifydate": "1986-02-25T14:17:00", "lines": 107, "newlines": 107, "modlines": 0, "user": "SS02JRW"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      TRANSFER A FILE TO A VM SYSTEM OVER THE NJE       */\n/*      LINE AS PRINT.                                    */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST NOMSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST MSG\nISPEXEC CONTROL ERRORS RETURN\n/*--------------------------------------------------------*/\n/*      SET UP THE VARIABLES                              */\n/*--------------------------------------------------------*/\nSET &NSY  = &STR(VM1)\nSET &VMPRTER = &STR()\nSET &NFLE = &STR()\nFREE  FI(FILEOUT)\nFREE  FI(JCL)\nFREE  FI(MYJCL)\nDELETE DXQRY.ZVTX\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n SET &LASTCC = 0\n SET &MAXCC  = 0\n FREE FI(F80)\n ISPEXEC DISPLAY PANEL(NPRT#P1) CURSOR(NSY)\n IF &LASTCC = 8 THEN GOTO ALLDONE\n SET &LASTCC = 0\n SET &MAXCC  = 0\n /*--------------------------------------------------------*/\n /*      GET THE INFO FROM THE PANEL                       */\n /*--------------------------------------------------------*/\n ISPEXEC  VGET  (&NSY &VMPRTER &NFLE ZUSER)\n ATTR F80 RECFM(F B) LRECL(80) BLKSIZE(80)\n /*--------------------------------------------------------*/\n /* CHECK TO SEE IF THE FILE EXISTS BEFORE WE TRY TO PRINT */\n /*--------------------------------------------------------*/\n DSNCHECK '&NFLE' NOLIST\n IF &LASTCC EQ 0 THEN +\n    DO\n    GOTO DOCARD\n    END\nELSE +\n    DO\n    WRITE  ERROR !!!!!!!!!\n    WRITE\n    WRITE  FILE YOU REQUESTED TO PRINT DOES NOT EXIST OR IS\n    WRITE  NOT CATALOGED  OR THE MEMBER OF A FILE YOU REQUESTED\n    WRITE  DOES NOT EXIST.  PLEASE RE-SPECIFY WITH CORRECT\n    WRITE  INFORMATION.\n    WRITE\n    GOTO LOOP\n    END\nEND\n /*--------------------------------------------------------*/\n /*      ALLOC THE FILE FOR JOB CARD PGM                   */\n /*--------------------------------------------------------*/\nDOCARD: +\n ALLOC FI(FILEOUT) UNIT(VIO) SP(5) TR  NEW DELETE USING(F80)\n DOPROGL JOBCARD\n /*--------------------------------------------------------*/\n /*      GO GET THE JOBCARD  (2 RECORDS)                   */\n /*--------------------------------------------------------*/\n ALLOC FI(JCL) UNIT(SYSDA) SP(5) TR NEW CATALOG USING(F80)  +\n          DA(DXQRY.ZVTX)\n OPENFILE FILEOUT INPUT\n OPENFILE JCL     OUTPUT\n GETFILE FILEOUT\n SET &JCL = &FILEOUT\n PUTFILE JCL\n GETFILE FILEOUT\n SET &JCL = &FILEOUT\n PUTFILE JCL\n /*--------------------------------------------------------*/\n /*      GO GET REST OF JCL FROM THE SKELETON              */\n /*--------------------------------------------------------*/\n ISPEXEC FTOPEN TEMP\n ISPEXEC FTINCL NPRT#S\n ISPEXEC FTCLOSE\n ISPEXEC VGET ZTEMPF\n ALLOC FI(MYJCL) DA('&ZTEMPF') OLD\n OPENFILE MYJCL INPUT\n /*--------------------------------------------------------*/\n /*      GO GET  6 JCL CARDS FROM THE SKELETON             */\n /*--------------------------------------------------------*/\n SET &B=1\n DO WHILE &B<7\n    GETFILE MYJCL\n    SET &JCL = &MYJCL\n    PUTFILE JCL\n    SET &B = &B + 1\n END\n CLOSFILE MYJCL\n CLOSFILE JCL\n CLOSFILE FILEOUT\n SUBMIT DXQRY.ZVTX\n SET &V = &STR($)\n SET &UJOB = &STR(&ZUSER&V)\n WRITE\n WRITE  &UJOB   SUBMITTED TO MVS TO ROUTE PRINT TO &NSY PRINTER &VMPRTER\n DELETE DXQRY.ZVTX\n FREE  FI(MYJCL,FILEOUT)\n GOTO LOOP\nALLDONE: +\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NPRT#PT": {"ttr": 8708, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x854\\x0f\\x00\\x854\\x0f\\x11(\\x00\\x0f\\x00\\x15\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1985-12-06T00:00:00", "modifydate": "1985-12-06T11:28:00", "lines": 15, "newlines": 21, "modlines": 0, "user": "SS02JDM"}, "text": "%              Transfer a File to a VM Printer\n+\n+     This is 2ISG's  solution for  users  wanting to  send a file to be\n+  printed on  one of  2ISG's VM systems. The file to be printed will be\n+  sent to a  VM system over the%Network Job Entry+(NJE) link. The panel\n+  asks you  to  specify the  node  name of the  appropriate  VM  system\n+  (%VM1+or%VM2+or%VM3+).   The copy is done using a batch job submitted\n+  to the MVS batch system.   The existence of the file is checked prior\n+  to the submission of the batch job. If the file does not  exist or is\n+  not cataloged, the request is  denied. Also if a user wants  to print\n+  a member of a PDS, a check is  made to see if the  member  exists (if\n+  it does not exist, you are told.  Also if an  incorrect  VM  printer\n+  name is specified, then you will be told.\n+\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NPRT#P1": {"ttr": 8710, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x854\\x0f\\x00\\x86\\x17/\\x16\\x03\\x00$\\x00#\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1985-12-06T00:00:00", "modifydate": "1986-06-21T16:03:00", "lines": 36, "newlines": 35, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+            %PRINT A FILE ON A VM REMOTE PRINTER +\n+\n+ TO SYSTEM===>_NSY+ VM1 - VM SYS 1   PRINTER===>_VMPRTER + EXISTING VM\n+                    VM2 - VM SYS 2                         PRINTER NAME\n+                    VM3 - VM SYS 3\n+ ENTER\n+ FILE NAME===>_NFLE                                                 +\n+\n+ NOTES: A. FILE MUST BE CATALOGUED.\n+\n+        B. DSN OF THE FILE MUST BE FULLY QUALIFIED AND WITHOUT QUOTES.\n+\n+        C. THIS PANEL WILL CREATE A BATCH JOB TO SEND A PRINT FILE TO\n+           A VM PRINTER. THE FILE IS CHECKED TO SEE IF IT EXISTS AND\n+           IF NOT YOU ARE TOLD. IF THE REQUEST IS TO PRINT A MEMBER OF\n+           A PDS, IT IS CHECKED TO SEE IF IT IS THERE; IF NOT, YOU ARE\n+           NOTIFIED.\n)INIT\n .HELP = NPRT#PT\n)PROC\n VER (&NSY,LIST,VM1,VM2,VM3)\n VER (&NFLE,DSNAME)\n IF  (&NSY = 'VM1')\n    VER (&VMPRTER,LIST,ACDMK, +\n                  AFCOM1,AFCOM2,AFCOM3,AFCOM4,AFCOM5,AFCOM6,  +\n                  AHSLRL1,ATEMIS,DRALOCL,             +\n                  JPPSO1,JPPS02,JPPS03,JPPS05,JPPS08, +\n                  KAFB4,LCAPS1,MMECD1,MMEDC2,+\n                  SADLOCL,SADP000,RMCLOCL)\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NPRT#S": {"ttr": 8712, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x853\\x7f\\x00\\x854\\x0f\\t\\x01\\x00\\x06\\x00\\r\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1985-12-03T00:00:00", "modifydate": "1985-12-06T09:01:00", "lines": 6, "newlines": 13, "modlines": 0, "user": "SS02JDM"}, "text": "/*JOBPARM L=500\n/*OUTPUT NPRT DEST=&NSY..&VMPRTER\n//STEP1    EXEC PGM=SYSREPRO,TIME=3\n//SYSPRINT DD DUMMY\n//SYSUT2   DD SYSOUT=(A,,NPRT)\n//SYSUT1   DD DSN=&NFLE,DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NPUN#C": {"ttr": 8714, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x853\\x9f\\x00\\x86\\x05o\\x14\\x17\\x00n\\x00V\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xd9\\xe6@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1985-12-05T00:00:00", "modifydate": "1986-02-25T14:17:00", "lines": 110, "newlines": 86, "modlines": 0, "user": "SS02JRW"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      TRANSFER A FILE TO A VM SYSTEM OVER THE NJE       */\n/*      LINE AS PUNCH.                                    */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST NOMSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST MSG\nISPEXEC CONTROL ERRORS RETURN\n/*--------------------------------------------------------*/\n/*      SET UP THE VARIABLES                              */\n/*--------------------------------------------------------*/\nSET &NSY  = &STR(VM1)\nSET &VMUSER  = &STR()\nSET &NFLE = &STR()\nFREE  FI(FILEOUT)\nFREE  FI(JCL)\nFREE  FI(MYJCL)\nDELETE DXQRY.ZVTXPUN\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n SET &LASTCC = 0\n SET &MAXCC  = 0\n FREE FI(F80)\n ISPEXEC DISPLAY PANEL(NPUN#P1) CURSOR(NSY)\n IF &LASTCC = 8 THEN GOTO ALLDONE\n SET &LASTCC = 0\n SET &MAXCC  = 0\n /*--------------------------------------------------------*/\n /*      GET THE INFO FROM THE PANEL                       */\n /*--------------------------------------------------------*/\n ISPEXEC  VGET  (&NSY &VMUSER  &NFLE ZUSER)\n ATTR F80 RECFM(F B) LRECL(80) BLKSIZE(80)\n /*--------------------------------------------------------*/\n /* CHECK TO SEE IF THE FILE EXISTS BEFORE WE TRY TO PRINT */\n /*--------------------------------------------------------*/\n DSNCHECK '&NFLE' NOLIST\n IF &LASTCC EQ 0 THEN +\n    DO\n    GOTO DOCARD\n    END\n ELSE +\n    DO\n    WRITE  ERROR !!!!!!!!!\n    WRITE\n    WRITE  FILE YOU REQUESTED TO PUNCH DOES NOT EXIST OR IS\n    WRITE  NOT CATALOGED  OR THE MEMBER OF A FILE YOU REQUESTED\n    WRITE  DOES NOT EXIST.  PLEASE RE-SPECIFY WITH CORRECT\n    WRITE  INFORMATION.\n    WRITE\n    GOTO LOOP\n    END\n END\n /*--------------------------------------------------------*/\n /*      ALLOC THE FILE FOR JOB CARD PGM                   */\n /*--------------------------------------------------------*/\nDOCARD: +\n ALLOC FI(FILEOUT) UNIT(VIO) SP(5) TR  NEW DELETE USING(F80)\n DOPROGL JOBCARD\n /*--------------------------------------------------------*/\n /*      GO GET THE JOBCARD  (2 RECORDS)                   */\n /*--------------------------------------------------------*/\n ALLOC FI(JCL) UNIT(SYSDA) SP(5) TR NEW CATALOG USING(F80)  +\n          DA(DXQRY.ZVTXPUN)\n OPENFILE FILEOUT INPUT\n OPENFILE JCL     OUTPUT\n GETFILE FILEOUT\n SET &JCL = &FILEOUT\n PUTFILE JCL\n GETFILE FILEOUT\n SET &JCL = &FILEOUT\n PUTFILE JCL\n /*--------------------------------------------------------*/\n /*      GO GET REST OF JCL FROM THE SKELETON              */\n /*--------------------------------------------------------*/\n ISPEXEC FTOPEN TEMP\n ISPEXEC FTINCL NPUN#S\n ISPEXEC FTCLOSE\n ISPEXEC VGET ZTEMPF\n ALLOC FI(MYJCL) DA('&ZTEMPF') OLD\n OPENFILE MYJCL INPUT\n /*--------------------------------------------------------*/\n /*      GO GET 6  JCL CARDS FROM THE SKELETON             */\n /*--------------------------------------------------------*/\n SET &B=1\n DO WHILE &B<7\n    GETFILE MYJCL\n    SET &JCL = &MYJCL\n    PUTFILE JCL\n    SET &B = &B + 1\n END\n CLOSFILE MYJCL\n CLOSFILE JCL\n CLOSFILE FILEOUT\n SUBMIT DXQRY.ZVTXPUN\n SET &V = &STR($)\n SET &UJOB = &STR(&ZUSER&V)\n WRITE\n WRITE\n WRITE  &UJOB   SUBMITTED TO MVS TO ROUTE PUNCH TO &NSY USER &VMUSER\n WRITE\n WRITE\n DELETE DXQRY.ZVTXPUN\n FREE  FI(MYJCL,FILEOUT)\n GOTO LOOP\nALLDONE: +\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NPUN#PT": {"ttr": 8717, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x853\\x9f\\x00\\x854\\x0f\\x10$\\x00\\x15\\x00\\x18\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1985-12-05T00:00:00", "modifydate": "1985-12-06T10:24:00", "lines": 21, "newlines": 24, "modlines": 0, "user": "SS02JDM"}, "text": "%          EL-Cheapo PUNCH File Transfer to a VM User\n+\n+     This is 2ISG's beginning solution to sending%punch+file to a user\n+  one of 2ISG's VM systems. A file on the MVS system may be sent to a\n+  a VM system over the%Network Job Entry+(NJE) link. The mechanism for\n+  this transfer is to have an ISPF panel create a JCL stream to be\n+  submitted to the MVS batch system to perform the copy. This file will\n+  appear on the VM system of the receiving user as a%READER+file with\n+  the VM user being notifed (if persently signed on) of the jobname and\n+  the TSO user of who sent the job. The VM user must process the reader\n+  file and place it on the appropriate mini-disk (the file should be\n+  renamed when it is placed on the mini-disk). Any file sent using this\n+  should have a%LRECL=80+and be in card image format.\n+\n+     The panel will create a batch job stream to perform the transfer\n+  to VM. The file must be cataloged on the MVS system for successful\n+  completion. The existence of the file will be checked and if it is\n+  not cataloged you will be told. If you are transferring a member of\n+  a PDS, the existence of the member will be checked (if it does not\n+  exist you will be told).\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NPUN#P1": {"ttr": 8719, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x853\\x9f\\x00\\x86\\x17/\\x16\\x03\\x00\"\\x00\\x1b\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1985-12-05T00:00:00", "modifydate": "1986-06-21T16:03:00", "lines": 34, "newlines": 27, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+    %SEND A PUNCH FILE TO A VM USERID +(EL-CHEAPO FILE TRANSFER)\n+\n+ TO SYSTEM===>_NSY+ VM1- VM SYS 1   TO USERID===>_VMUSER  + RECEIVING\n+                    VM2- VM SYS 2                           VM USER\n+                    VM3- VM SYS 3\n+ ENTER\n+ FILE NAME===>_NFLE                                               +\n+\n+ NOTES:\n+  A. FILE MUST BE CATALOGUED.\n+\n+  B. DSN OF THE FILE MUST BE FULLY QUALIFIED AND WITHOUT QUOTES.\n+\n+  C. THIS PANEL WILL CREATE A BATCH JOB TO SEND A PUNCH FILE TO A VM\n+     USERID. THE RESULTS (JCL LOG AND JCL MSGS) WILL BE HELD FOR YOUR\n+     REVIEW ON TSO WITH THE PUNCH FILE BEING SENT THE APPROPRIATE VM\n+     SYSTEM.\n+\n+  D. THERE IS NO CHECK MADE TO SEE IF THIS IS A VALID VM USERID !!\n+     IF THE VM USERID IS NOT VALID, THE FILE WILL BE PUNCHED ON THE\n+     VM SYSTEM'S PUNCH.\n)INIT\n .HELP = NPUN#PT\n)PROC\n VER (&NSY,NONBLANK)    VER (&NSY,LIST,VM1,VM2,VM3)\n VER (&VMUSER,NONBLANK) VER (&VMUSER,NAME)\n VER (&NFLE,NONBLANK)   VER (&NFLE,DSNAME)\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NPUN#S": {"ttr": 8721, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x853\\x9f\\x00\\x853\\x9f\\t\\x08\\x00\\x06\\x00\\r\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1985-12-05T00:00:00", "modifydate": "1985-12-05T09:08:00", "lines": 6, "newlines": 13, "modlines": 0, "user": "SS02JDM"}, "text": "/*JOBPARM CARDS=100000\n/*ROUTE  PUNCH &NSY..&VMUSER\n//STEP1    EXEC PGM=SYSREPRO\n//SYSPRINT DD SYSOUT=*\n//SYSUT2   DD SYSOUT=B\n//SYSUT1   DD DSN=&NFLE,DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NPUN00": {"ttr": 8723, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x854\\x0f\\x00\\x854\\x0f\\x12Y\\x00\\x12\\x00\\x1b\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1985-12-06T00:00:00", "modifydate": "1985-12-06T12:59:00", "lines": 18, "newlines": 27, "modlines": 0, "user": "SS02JDM"}, "text": "NPUN000  'INVALID SYSTEM NODE NAME'  .HELP=NPUN#PT   .ALARM=YES\n'NAME OF SYSTEM SPECIFIED IS INVALID, RESPECIFY.'\n\nNPUN001  'INVALID VM USERID'         .HELP=NPUN#PT   .ALARM=YES\n'VM USERID INCORRECTLY SPECIFIED,  RESPECIFY.'\n\nNPUN002  'INVALID FILE NAME'         .HELP=NPUN#PT   .ALARM=YES\n'FILE NAME ENTERED IS INCORRECT,   RESPECIFY.'\n\nNPUN003  'ENTER SYSTEM NODE NAME'    .HELP=NPUN#PT   .ALARM=YES\n'ENTER THE CORRECT VM SYSTEM NODE NAME.'\n\nNPUN004  'ENTER VM USERID'           .HELP=NPUN#PT   .ALARM=YES\n'ENTER RECEIVING VM USERID.'\n\nNPUN005  'ENTER FILE NAME'           .HELP=NPUN#PT   .ALARM=YES\n'ENTER FILE NAME WITH QUOTES'\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OBSL#C": {"ttr": 8725, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x00\\x00\\x84 o\\x00\\x85!\\x7f\\x12V\\x00A\\x004\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "1984-07-24T00:00:00", "modifydate": "1985-08-05T12:56:00", "lines": 65, "newlines": 52, "modlines": 0, "user": "SS02JDM"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR DOING BROWSE OF OBS WYLBUR     */\n/*               DATASET (DATA IS COMPRESSED)             */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST NOFLUSH NOMSG NOPROMPT\nIF &DEBUG NE THEN CONTROL LIST NOFLUSH MSG CONLIST SYMLIST PROMPT\nIF &SYSPREF  EQ  &STR() THEN +\n     DO\n     SET &DSPRFX EQ &SYSUID\n     END\nELSE +\n     IF &SYSPREF  EQ  &SYSUID THEN +\n          DO\n          SET &DSPRFX EQ &SYSUID\n          END\n     ELSE +\n          DO\n          SET &DSPRFX EQ &SYSPREF\n          END\nISPEXEC CONTROL ERRORS RETURN\nRESTART: ISPEXEC DISPLAY PANEL(OBSL#P)\nIF &LASTCC = 8 THEN EXIT\nFREE ATTR(FB)\nFREE FI(SYSUT2)\nSET &MAXCC = 0\nSET &LASTCC = 0\nATTR FB RECFM(F B) LRECL(254) BLKSIZE(5080)\nSET &NUM = &SUBSTR(8:8,&SYSTIME)\nFREE  FI(SYSIN)\nSET &LASTCC = 0\nSET &MAXCC = 0\nALLOC FI(SYSUT1) DA(&OBSDSN) SHR\nIF &LASTCC \u00ac= 0  THEN +\n    DO\n    WRITE\n    WRITE &OBSDSN   COULD NOT BE ALLOCATED, SORRY\n    WRITE\n    FREE ATTR(FB)\n    GOTO RESTART\n    END\nALLOC FI(SYSUT2) DA('&DSPRFX..TEMP&NUM..OBSLIST') CATALOG +\n      SPACE(1 3) TRACKS USING(FB) NEW UNIT(SYSDA)\nERROR  DO\n       GOTO WRAPUP\n       END\nATTN   DO\n       GOTO WRAPUP\n       END\nCONTROL MSG PROMPT\nSET &LASTCC = 0\nDOPROGL   WUNPRESS  'NUMBERED'\nIF  &LASTCC NE 0 THEN DO\n    WRITE OBS  UPRESS ERROR\n    GOTO WRAPUP\n    END\nCONTROL NOMSG PROMPT\nISPEXEC BROWSE  DATASET('&DSPRFX..TEMP&NUM..OBSLIST')\nWRAPUP:   +\nFREE ATTR(FB)\nFREE FI(SYSUT1)\nFREE FI(SYSUT2)\nALLOC FI(SYSIN) DA(*)\nDEL  '&DSPRFX..TEMP&NUM..OBSLIST'\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OBSL#P": {"ttr": 8727, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x84 o\\x00\\x85!\\x8f\\x12$\\x00\\x12\\x00\\x0f\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1984-07-24T00:00:00", "modifydate": "1985-08-06T12:24:00", "lines": 18, "newlines": 15, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+          % BROWSE AN   O  B  S   DATASET+\n+\n+ENTER OBS DSN%===>_OBSDSN                                            +\n+\n+\n+   NOTE: IF THE DATASET NAME IS ENTERED WITHOUT QUOTES,\n+         THE SAME NAMING RULES APPLY AS WITH TSO. THE\n+         FILE NAME WILL BE PREFIXED WITH YOUR TSO PREFIX\n+         WHICH IS USUALLY YOUR USERID.\n)PROC\n VER (&OBSDSN,NONBLANK) VER(&OBSDSN,DSNAME)\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OMEG#C": {"ttr": 8729, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00\\x00\\x00\\x85\\x04/\\x00\\x862\\x9f\\x11\\x10\\x00*\\x00(\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "1985-02-11T00:00:00", "modifydate": "1986-11-25T11:10:00", "lines": 42, "newlines": 40, "modlines": 0, "user": "$354JDM"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR SADSC PANEL TO INVOKE          */\n/*      OMEGAMON.                                         */\n/*--------------------------------------------------------*/\nCONTROL NOMSG PROMPT NOFLUSH NOLIST\nIF &DEBUG NE THEN CONTROL LIST MSG CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &PF      = &STR(09)\nSET &RW      = &STR(24)\nSET &LR      = &STR(24)\nSET &CL      = &STR(80)\nSET &PREF    = &STR(S354)\nSET &MAXCC   = 0\nSET &LASTCC  = 0\nISPEXEC DISPLAY PANEL(OMEG#P)\nIF &LASTCC NE 0 THEN  EXIT\nISPEXEC VGET (&PF &RW &LR &CL &PREF)\nSET &LASTCC = 0\nSET &MAXCC  = 0\nFREE FI(OMHELP)\nFREE FI(OMPROC)\nFREE FI(OMPROCSV)\nFREE FI(OMTUTR)\nFREE DA('&PREF..XM.LOAD')\nALLOC FI(OMHELP)    DA('&PREF..XM.HELP')  SHR\nALLOC FI(OMPROC)    DA('&PREF..XM.PROC')  SHR\nALLOC FI(OMPROCSV)  DA('&PREF..XM.PROCNEW')  SHR\nALLOC FI(OMTUTR)    DA('&PREF..XM.TUTR')  SHR\nISPEXEC  FTOPEN   TEMP\nISPEXEC  FTINCL   OMEG#S\nISPEXEC  FTCLOSE\nISPEXEC  VGET     ZTEMPF\nCONTROL NOMSG\nEX    '&ZTEMPF'\nCONTROL MSG\nFREE FI(OMHELP)\nFREE FI(OMPROC)\nFREE FI(OMPROCSV)\nFREE FI(OMTUTR)\nFREE DA('&PREF..XM.LOAD')\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OMEG#P": {"ttr": 8961, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x85\\x04/\\x00\\x862\\x9f\\x11%\\x00\\x1a\\x00\\x13\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1985-02-11T00:00:00", "modifydate": "1986-11-25T11:25:00", "lines": 26, "newlines": 19, "modlines": 0, "user": "$354JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+        INVOKE %O M E G A M O N +IN TSO +\n+\n+    OPTIONS\n+      PFKS%===>_PF+        +NUM INCORE PFK KEYS\n+      ROWS%===>_RW+        +NUM ROWS ON TERMINAL\n+     LROWS%===>_LR+        +NUM LOGICAL ROWS ON TERMINAL\n+      COLS%===>_CL+        +NUM COLUMNS ON TERMINAL (SCROLLING)\n+    PREFIX%===>_PREF            +PREFIX FOR FILE NAMES\n+\n+\n+    NOTE:  ENTER STOP IN OMEGAMON TO EXIT\n)INIT\n .CURSOR = PF\n)PROC\n VER (&PF,NONBLANK)   VER(&PF,RANGE,1,12)\n VER (&RW,NONBLANK)   VER(&RW,LIST,12,24,32,43)\n VER (&LR,NONBLANK)   VER(&LR,LIST,12,24,32,43)\n VER (&CL,NONBLANK)   VER(&CL,LIST,80,132)\n VER (&PREF,NONBLANK) VER(&PREF,DSNAME)\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OMEG#S": {"ttr": 8963, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x85\\x04/\\x00\\x862\\x9f\\x10Y\\x00\\x06\\x00\\x06\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1985-02-11T00:00:00", "modifydate": "1986-11-25T10:59:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "$354JDM"}, "text": "PROC 0\nCONTROL PROMPT NOFLUSH\nCALL  '&PREF..XM.LOAD(OMEGAMON)' +\n      'TS,SYS=SMFID,USER=99,PFKS=&PF,  +\n       ROWS=&RW,LROWS=&LR,COLS=&CL'\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PHIX#C": {"ttr": 8965, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x85$\\x9f\\x00\\x85$\\x9f\\x103\\x00\\x0b\\x00\\x0b\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1985-09-06T00:00:00", "modifydate": "1985-09-06T10:33:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "SS02JDM"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------------*/\n/*      PDF CLIST  FOR TSO COMMAND PHOENIX CBT TRAINING         */\n/*--------------------------------------------------------------*/\nCONTROL NOLIST NOMSG NOFLUSH PROMPT\nIF &DEBUG NE &STR() THEN +\n  CONTROL LIST MSG NOFLUSH PROMPT CONLIST SYMLIST\nISPEXEC CONTROL DISPLAY REFRESH\nCONTROL MSG\nPHOENIX TSPX\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRINT#C": {"ttr": 8967, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x84\\x18_\\x00\\x87\\x10\\x7f\\x16\\x04\\x00\\x07\\x00\\x07\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1984-07-03T00:00:00", "modifydate": "1987-04-17T16:04:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "$354JDM"}, "text": "PROC 0 DEBUG\nCONTROL NOMSG PROMPT\n        ISPEXEC  FTOPEN   TEMP\n        ISPEXEC  FTINCL   PRINT#S\n        ISPEXEC  FTCLOSE\n        ISPEXEC  VGET     ZTEMPF\n        EX    '&ZTEMPF'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRINT#P": {"ttr": 8969, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x00\\x00\\x00\\x84\\x18_\\x00\\x91\\x14/\\x134\\x00=\\x00:\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "1984-07-03T00:00:00", "modifydate": "1991-05-22T13:34:00", "lines": 61, "newlines": 58, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+   COMMAND%===>_ZCMD                                                 +\n+\n+\n+     %   Data Set Print Utility - P R I N T O F F  +\n+\n+Enter Data Set Name%===>_PODSN                                               +\n+             Volume%===>_POVOL    +If not cataloged\n+       Sysout Class%===>_POSOC    +Q - 3800, A - 3211 or remotes\n+               Dest%===>_PODEST   +RMT Name (RMTnn)\n+         Copy Count%===>_POCOPY   +Number of copies\n+               Hold%===>_POHOLD   +Hold or Nohold\n+               List%===>_POLIST   +List or Nolist\n+              Print%===>_POPRNT   +Print or Noprint\n+              Forms%===>_FORM     +\n+                UCS%===>_UCS      +\n+            Heading%===>_HEAD     +Heading or Noheading\n+   Upper Case Shift%===>_FOLD     +Caps or ASIS\n+   Carriage control%===>_ASA      +Enter ASA if 1st char is really\n+                                  +valid ANSI carriage control\n)INIT\n .CURSOR = PODSN\n &POSOC = TRANS (&POSOC ' ',A *,*)\n &POCOPY = TRANS (&POCOPY ' ',1 *,*)\n &POHOLD = TRANS (&POHOLD ' ',NOHOLD *,*)\n &POLIST = TRANS (&POLIST ' ',LIST *,*)\n &POPRNT = TRANS (&POPRNT ' ',PRINT *,*)\n &FOLD   = TRANS (&FOLD   ' ',ASIS *,*)\n &HEAD   = TRANS (&HEAD   ' ',NOHEADING *,*)\n &ASA    = TRANS (&ASA    ' ',' ' *,*)\n)PROC\n VER (&PODSN,NONBLANK)     VER (&PODSN,DSNAME)\n IF (&POVOL \u00ac= &Z)\n    VER (&POVOL,PICT,CCCCCC)\n VER (&POSOC,NONBLANK)     VER (&POSOC,PICT,C)\n IF (&PODEST \u00ac= &Z)\n    VER(&PODEST,NAME)\n VER (&POCOPY,NONBLANK)        VER (&POCOPY,NUM)\n &POHOLD = TRANS (TRUNC (&POHOLD,1) H,HOLD N,NOHOLD *,*)\n VER (&POHOLD,NONBLANK)        VER (&POHOLD,LIST,HOLD,NOHOLD)\n &POLIST = TRANS (TRUNC (&POLIST,1) L,LIST N,NOLIST *,*)\n VER (&POLIST,NONBLANK)        VER (&POLIST,LIST,LIST,NOLIST)\n &POPRNT = TRANS (TRUNC (&POPRNT,1) P,PRINT N,NOPRINT *,*)\n VER (&POPRNT,NONBLANK)        VER (&POPRNT,LIST,PRINT,NOPRINT)\n IF (&FORM \u00ac= &Z)\n    VER (&FORM,PICT,CCCC)\n IF (&UCS \u00ac= &Z)\n    VER (&UCS,PICT,CCCC)\n &HEAD = TRANS (TRUNC (&HEAD,1) H,HEADING N,NOHEADING *,*)\n VER (&HEAD,NONBLANK)        VER (&HEAD,LIST,HEADING,NOHEADING)\n &FOLD = TRANS (TRUNC (&FOLD,1) C,CAPS A,ASIS *,*)\n VER (&FOLD,NONBLANK)        VER (&FOLD,LIST,CAPS,ASIS)\n IF (&ASA \u00ac= &Z)\n    VER (&ASA,NONBLANK)      VER (&ASA,LIST,ASA)\n &SEL = 'CMD(%PRINT#C)'\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PRINT#S": {"ttr": 8971, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x84\\x18_\\x00\\x87\\x10\\x7f\\x16\\x04\\x00\\x13\\x00\\x15\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1984-07-03T00:00:00", "modifydate": "1987-04-17T16:04:00", "lines": 19, "newlines": 21, "modlines": 0, "user": "$354JDM"}, "text": "PROC 0\nCONTROL PROMPT NOFLUSH\nPRINTOFF &PODSN   CLASS(&POSOC) +\n)SEL &PODEST \u00ac= &Z\nDEST(&PODEST) +\n)ENDSEL\n)SEL &FORM \u00ac= &Z\nFORM(&FORM) +\n)ENDSEL\n)SEL &UCS \u00ac= &Z\nTRAIN(&UCS) +\n)ENDSEL\nCOPIES(&POCOPY) +\n&FOLD +\n&POHOLD +\n&POLIST +\n&HEAD +\n&ASA  +\n&POPRNT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRT#C": {"ttr": 8973, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00\\x00\\x00\\x930\\x9f\\x00\\x99\\x19\\x9f\\x13\\x02\\x00Y\\x003\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "1993-11-05T00:00:00", "modifydate": "1999-07-18T13:02:00", "lines": 89, "newlines": 51, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*----------------------------------------------------------------*/\n/*      INVOKES BILL GODFREY'S VERSION OF \"PRINTOFF\"              */\n/*----------------------------------------------------------------*/\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &PODSN   =  &STR()\nSET &POVOL   =  &STR()\nSET &POSOC   =  &STR(A)\nSET &PODEST  =  &STR()\nSET &POCOPY  =  &STR(1)\nSET &POHOLD  =  &STR(NOHOLD)\nSET &POLIST  =  &STR(LIST)\nSET &POPRNT  =  &STR(PRINT)\nSET &FORM    =  &STR()\nSET &UCS     =  &STR()\nSET &FOLD    =  &STR(ASIS)\nSET &HEAD    =  &STR(NOHEADING)\nSET &ASA     =  &STR()\n/*--------------------------------------------------------*/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   ISPEXEC ADDPOP COLUMN(1) ROW(1)\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(PRT#P) CURSOR(PODSN)\n   SET &RC = &LASTCC\n   ISPEXEC REMPOP\n   IF &RC = 8 THEN GOTO FINISH\n   IF &MAXCC  NE 0  THEN +\n       DO\n       WRITE  ***  SEVERE ERROR  ****   ADIOS TIME.\n       GOTO FINISH\n       END\n   IF  &SYSDSN(&PODSN)  \u00ac=  OK  THEN  +\n       DO\n       WRITE\n       WRITE   ERROR: PRINT FILE MIGHT NOT EXIST OR IF PRINTING\n       WRITE          A MEMBER OF A PARTITIONED FILE, THE MEMBER\n       WRITE          MAY NOT EXIST.\n       GOTO LOOP\n       END\n   /*--------------------------------------------------------*/\n   /*      CONSTRUCT ALL THE INDIVIDUAL PIECES OF THE CMD    */\n   /*--------------------------------------------------------*/\n   IF &PODEST =  &Z     THEN +\n       DO\n       SET &PDEST  = &STR( )\n       END\n   ELSE  +\n       DO\n       SET &PDEST  = &STR(DEST(&PODEST))\n       END\n   /*--------------------------------------------------------*/\n   IF &FORM   =  &Z     THEN +\n       DO\n       SET &PFORM  = &STR( )\n       END\n   ELSE  +\n       DO\n       SET &PFORM  = &STR(FORM(&FORM))\n       END\n   /*--------------------------------------------------------*/\n   IF &UCS    =  &Z     THEN +\n       DO\n       SET &PUCS   = &STR( )\n       END\n   ELSE  +\n       DO\n       SET &PUCS   = &STR(TRAIN(&UCS))\n       END\n   /*--------------------------------------------------------*/\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GOT ALL THE PARAMTERS PROCESSED, SO DO THE CMD    */\n   /*--------------------------------------------------------*/\n   PRINTSRV  &PODSN      +\n             CLASS(&POSOC)  &PDEST  &PFORM  &PUCS  +\n             COPIES(&POCOPY)  &FOLD  &POHOLD  &POLIST +\n             &HEAD  &ASA  &POPRNT\n   GOTO LOOP\nFINISH: +\nSET ZWINTTL =\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PRT#P": {"ttr": 8976, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x930\\x9f\\x00\\x99\\x17/\\x078\\x000\\x00=\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1993-11-05T00:00:00", "modifydate": "1999-06-21T07:38:00", "lines": 48, "newlines": 61, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(68,18) CMD(ZCMD)\n+\n+  Command%===>_ZCMD                                               +\n+ Enter\n+  DataSet Name%===>_PODSN                                         +\n+        Volume%===>_POVOL    +If not cataloged\n+  Sysout Class%===>_POSOC    +SYSOUT=A\n+          Dest%===>_PODEST +  Remote (RMTnn), blank implies LOCAL\n+    Copy Count%===>_POCOPY +  Number of copies\n+          Hold%===>_POHOLD+   Hold or Nohold\n+          List%===>_POLIST+  +List or Nolist\n+         Print%===>_POPRNT +  Print or Noprint\n+         Forms%===>_FORM+\n+       Heading%===>_HEAD     +Heading or Noheading\n+   Upper Case %===>_FOLD+     CAPS or ASIS\n+ Carriage cntl%===>_ASA+      Enter ASA if 1st char is really\n+                              valid ANSI carriage control\n+\n+\n)INIT\n &ZWINTTL = 'Tool Box: Print Utility  PRINTOFF'\n)PROC\n VER (&PODSN,NONBLANK)     VER (&PODSN,DSNAME)\n IF (&POVOL \u00ac= &Z)\n    VER (&POVOL,PICT,CCCCCC)\n VER (&POSOC,NONBLANK)     VER (&POSOC,PICT,C)\n IF (&PODEST \u00ac= &Z)\n    VER(&PODEST,NAME)\n VER (&POCOPY,NONBLANK)        VER (&POCOPY,NUM)\n &POHOLD = TRANS (TRUNC (&POHOLD,1) H,HOLD N,NOHOLD *,*)\n VER (&POHOLD,NONBLANK)        VER (&POHOLD,LIST,HOLD,NOHOLD)\n &POLIST = TRANS (TRUNC (&POLIST,1) L,LIST N,NOLIST *,*)\n VER (&POLIST,NONBLANK)        VER (&POLIST,LIST,LIST,NOLIST)\n &POPRNT = TRANS (TRUNC (&POPRNT,1) P,PRINT N,NOPRINT *,*)\n VER (&POPRNT,NONBLANK)        VER (&POPRNT,LIST,PRINT,NOPRINT)\n IF (&FORM \u00ac= &Z)\n    VER (&FORM,PICT,CCCC)\n &HEAD = TRANS (TRUNC (&HEAD,1) H,HEADING N,NOHEADING *,*)\n VER (&HEAD,NONBLANK)        VER (&HEAD,LIST,HEADING,NOHEADING)\n &FOLD = TRANS (TRUNC (&FOLD,1) C,CAPS A,ASIS *,*)\n VER (&FOLD,NONBLANK)        VER (&FOLD,LIST,CAPS,ASIS)\n IF (&ASA \u00ac= &Z)\n    VER (&ASA,NONBLANK)      VER (&ASA,LIST,ASA)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SADSYSP": {"ttr": 8978, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x85$\\x9f\\x00\\x86\\x17_\\x14\\x02\\x00$\\x001\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1985-09-06T00:00:00", "modifydate": "1986-06-24T14:02:00", "lines": 36, "newlines": 49, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+         % 2 ISG  S o f t w a r e   S y s t e m s\n+\n%COMMAND ===>_ZCMD                                                             +\n%\n%   1+- Send a%Punch File to a VM Userid+(El-Cheapo File Transfer).\n%   2+- Send a%File to a VM Userid+(El-Cheapo File Transfer).\n%   3+- Send a%Print File to a VM Printer+via NJE.\n%   G+- Graphics Data Display Manager -%GDDM+\n%              Presentation Graphics Feature+\n%   N+- View 2ISG %NEWS+items.\n%   P+-%PHOENIX+Computer Based Training System+\n%   R+- RACF Functions\n%   V+- Invoke%VTAM Print System+\n)INIT\n  .HELP = ISR00003\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n                1,'CMD(%NPUN#C)'\n                2,'CMD(%NFLE#C)'\n                3,'CMD(%NPRT#C)'\n                G,'PANEL(ADM#P)'\n                I,'PANEL(TRC#P)'\n                N,'PANEL(NEWS#P)'\n                P,'CMD(%PHIX#C)'\n                R,'PANEL(ICHP00)'\n                V,'CMD(%VPS#C)'\n              ' ',' '\n                *,'?' )\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SADTSOP": {"ttr": 8980, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00\\x00\\x00\\x84\\x19\\x8f\\x00\\x93#_\\x085\\x00/\\x00+\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "1984-07-16T00:00:00", "modifydate": "1993-08-23T08:35:00", "lines": 47, "newlines": 43, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+                   % 2 ISG  TSO  COMMANDS  +\n%COMMAND ===>_ZCMD                                                             +\n%\n%   1+- DA      - 2ISG%DISPLAY ACTIVE+TSO command.\n%   2+- LASTIPL - Display when the system was last loaded.\n%   3+- DUSER   - Display TSO users signed on to TSO at 2ISG.\n%   4+- LISTAX  - 2ISG enhanced LISTA command.\n%   5+- FREEALL - Issue cmd to free all dynamically allocated files.\n%   6+- DATE    - Get the current date and time.\n%   7+- CALC    - Turn your 327X terminal into a calculator.\n%   8+- TIME    - Invoke the TSO%TIME+command.\n%   9+- STATUS  - Invoke IBM TSO%STATUS+command.\n%   A+- HELP    - Invoke IBM%HELP+for all TSO commands at 2ISG.\n%   I+- ABEND   - Further information on%ABEND+codes.\n%   J+- JULIAN  - Convert to and from julian dates.\n%   L+- LISTCAT - Perform%LISTCAT+functions.\n%   S+- SEND    -%SEND+a msg to a TSO user or 2ISG operator.\n%\n%   note: option \"V\" has moved to panel P\n)INIT\n  .HELP = ISR00003\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n                1,'CMD(DA)'\n                2,'CMD(LASTIPL)'\n                3,'CMD(DUSER)'\n                4,'CMD(LISTAX)'\n                5,'CMD(%FREEA#C)'\n                6,'CMD(DATE)'\n                7,'CMD(%CALC#C)'\n                8,'CMD(TIME)'\n                9,'CMD(STATUS)'\n                A,'CMD(HELP)'\n                I,'CMD(%ABND#C)'\n                J,'PANEL(JUL#P)'\n                L,'PANEL(LISTC#P)'\n                S,'PANEL(SEND#P)'\n              ' ',' '\n                *,'?' )\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SADUTLP": {"ttr": 8982, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x00\\x00\\x00\\x84 \\x1f\\x00\\x85(\\x1f\\x077\\x00/\\x00%\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "1984-07-19T00:00:00", "modifydate": "1985-10-08T07:37:00", "lines": 47, "newlines": 37, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+      % 2 ISG  Cheap CHECKERS and UTILITY Functions\n+\n%COMMAND ===>_ZCMD                                                             +\n%\n%   1+-%FOREGROUND+CHEAP%COBOL+SYNTAX CHECKER\n%   2+-%FOREGROUND+CHEAP%ASSEMBLER+SYNTAX CHECKER.\n%   3+-%FOREGROUND+CHEAP%FORTRAN H-EXTENDED+SYNTAX CHECKER.\n%   4+-%FOREGROUND+CHEAP%FORTRAN G1+SYNTAX CHECKER.\n%   5+-%PRINTOFF+TSO COMMAND\n%   6+-%VTOC+ UTILITY DISPLAY AND/OR LIST.\n%   7+-%COPYSDS+ COPY SEQ DATASET TO ANOTHER SEQ DATASET.\n%   8+-%COUNT  + COUNT THE NUMBER OF RECORDS IN A SEQUENTIAL FILE.\n%   9+-%COMPARE +COMPARE TWO SEQUENTIAL FILES.\n%   O+- Browse an %O B S WYLBUR+ dataset\n%   S+- FOREGROUND %SORT +\n%   T+- Invoke Tape management system%TMS+inquiry program+\n%         ( enter C to terminate the command )\n%   V+-%FOREGROUND+CHEAP%VS FORTRAN+SYNTAX CHECKER.\n%\n%   note: option \"G\" and \"N\" have moved to panel P\n)INIT\n  .HELP = ISR00003\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n                1,'PANEL(COBOL#P)'\n                2,'PANEL(ASMH#P)'\n                3,'PANEL(FORTX#P)'\n                4,'PANEL(FORT#P)'\n                5,'PANEL(PRINT#P)'\n                6,'CMD(%VTOC#C)'\n                7,'PANEL(COPYS#P)'\n                8,'PANEL(COUNT#P)'\n                9,'PANEL(COMPR#P)'\n                O,'CMD(%OBSL#C)'\n                S,'PANEL(SORT#P)'\n                T,'CMD(%TMS#CMT)'\n                V,'CMD(%VFORT#C)'\n              ' ',' '\n                *,'?' )\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SEND#C": {"ttr": 8984, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x00\\x00\\x99\\x17\\x0f\\x00\\x99\\x19\\x9f\\x13\\x04\\x004\\x00.\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1999-06-19T00:00:00", "modifydate": "1999-07-18T13:04:00", "lines": 52, "newlines": 46, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*     INVOKE 'SEND' COMMAND FOR THE USER                 */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST   MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET  &SCMD     =  &STR(SEND)      /* USED FOR TESTING */\nSET  &USERID   =  &STR()\nSET  &MSG1     =  &STR()\nSET  &MSG2     =  &STR()\nSET  &MSG3     =  &STR()\nSET  &SOPT     =  &STR(NOW)\n/*--------------------------------------------------------*/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   ISPEXEC CONTROL DISPLAY REFRESH\n   ISPEXEC ADDPOP COLUMN(1) ROW(1)\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(SEND#P)  CURSOR(USERID)\n   SET &RC = &LASTCC\n   ISPEXEC REMPOP\n   IF &RC = 8 THEN GOTO ALLDONE\n   IF &MAXCC NE 0  THEN +\n       DO\n       SET &ENUM = &STR(SEND#P)\n       GOTO ERRMSG\n       END\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      WE HAVE INFORMATION FROM THE PANEL                */\n   /*--------------------------------------------------------*/\n   &SCMD  '&MSG1'   USER(&USERID)  &SOPT  NOWAIT\n   IF &MSG2 NE &STR( ) THEN  +\n      DO\n       &SCMD  '&MSG2'   USER(&USERID)  &SOPT  NOWAIT\n       IF &MSG3 NE &STR( ) THEN  +\n          DO\n           &SCMD  '&MSG3' USER(&USERID) &SOPT NOWAIT\n          END\n      END\n   WRITE 'MESSAGE(S) SENT.'\n   GOTO LOOP\nERRMSG:  +\n       WRITE  **  SEVERE PANEL - &ENUM   **\nALLDONE: +\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SEND#P": {"ttr": 8986, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x99\\x17\\x0f\\x00\\x99\\x17/\\x076\\x00\\x1b\\x00#\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1999-06-19T00:00:00", "modifydate": "1999-06-21T07:36:00", "lines": 27, "newlines": 35, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(64,15) CMD(ZCMD)\n+\n+  COMMAND%===>_ZCMD                                           +\n+\n+Enter\n+ TSOID %==>_USERID +\n+ Option%==>_SOPT +  NOW   -  Send the msg now.\n+                    SAVE  -  Place msg in mail box.\n+                    LOGON -  Send NOW now. if user not\n+Enter MSG(s):         +      on, place msg in mail box.\n+ %==>_MSG1                                                    +\n+ %==>_MSG2                                                    +\n+ %==>_MSG3                                                    +\n+note: Apostrophe is part of msg, code 2 apostrophes.\n+\n+\n)INIT\n &ZWINTTL = 'Tool Box: SEND Message to a TSO User'\n)PROC\n VER (&USERID,NONBLANK) VER(&USERID,NAME)\n VER (&MSG1,NONBLANK)\n VER (&SOPT,NONBLANK) VER(&SOPT,LIST,NOW,SAVE,LOGON)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SLSS##PR": {"ttr": 9217, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x00\\x856\\x0f\\x00\\x91\\x19\\x8f\\x10\\x17\\x00\\xa9\\x00;\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1985-12-26T00:00:00", "modifydate": "1991-07-17T10:17:00", "lines": 169, "newlines": 59, "modlines": 0, "user": "S218"}, "text": "                                    28 NOVEMBER 1986\n SLSS\n\n    THIS IS A VARIATION OF SOME ISPF/PDF PANELS ON THE MODS TAPE TO\n KEEP TRACK TO YOUR MANUALS THROUGH SLSS. I SENT THE ORGINIAL STUFF\n TO CAPT JIM PETERSON AT NORTON AFB (AIR FORCE SAFETY & INSPECTION\n CENTER). WELL JIM DID NOT LIKE IT BECAUSE IT TOOK SO LONG TO RUN.\n SO JIM WROTE A COBOL PROGRAM TO REPLACE ALOT OF THE CLIST CODE AND\n A COBOL PRINT PROGRAM FOR LISTING.\n\n    HE SENT THE CODE BACK TO ME AND I PUT THEN I PUT IT TOGETHER AND\n SHIPPED IT OUT. TRIED TO INSTALL 'SLSS' FROM THE WAY I HAD PUT IT\n ON THE TAPE AND GOT FRUSTRATED.  SO I TORE IT ALL APART AND REWROTE\n SOME OF THE COBOL CODE INTO CLISTS AND MADE SENSE OUT OF THE WHOLE\n MESS.  THEN I RE-INSTALLED AND WAS HAPPY.\n\n ------------------------------------------------------------------\n NOTES AND THOUGHTS:\n\n I LIKE THIS SLSS NOT BECAUSE I DID ANYTHING TO IT. IT GIVES ME AN\n EASY WAY TO FIND A MANUAL ON-LINE. ALSO IT WILL SHOW THE TNL THAT\n ARE BEING USED FOR A PARTICULAR MANUAL. THE REPORTS COME IN\n\n       1. I PUT A ONE PAGE LOGO TYPE HEADER ON THE REPORT.\n          TRASH IT, CHANGE IT, OR KEEP IT.\n\n       2. SLSS SUBJECT LIST. TAKEN FROM SLSS#SS AND IS FIRST\n          SO YOU CAN FIND THE CORRECT BALLPARK WHEN YOU HUNT\n          FOR A MANUAL.\n\n       3. SORTED BOOK REPORT. THIS IS A LISTING SORTED BY BOOK\n          NUMBER MAJOR, TRIPLE SPACE BETWEEN EACH BOOK NUMBER.\n\n       4. SORTED MANUAL REPORT.  THIS IS A LISTING OF MANUALS BY\n          THE MANUAL NUMBER. I WILL TRIPLE SPACE BETWEEN EACH\n          CONTROL BREAK OF THE 1ST 4 CHARACTERS (EXCLUDE DASH) OF\n          OF THE MANUAL NUMBER, I.E.  GG22 GROUP, 3 SPACES, GG23,\n          3 SPACES, ETC, ETC.\n\n WHEN I ORDER A MANUAL, I WILL PUT A BOOK NUMBER OF 9999 SINCE I\n REALLY DON'T KNOW WHAT ACTUAL BOOK IT WILL FIT INTO.  SO WHEN I\n LIST OFF THE LIBRARY, ALL MANUALS ON ORDER WILL FALL TOGETHER.\n\n THE LISTINGS ARE ALL GENERATED FROM A 'FLAT' (SEQUENTIAL) FILE\n FROM THE CLIST. ALL I DO IS PACKAGE JCL AROUND IT AND USE WHAT-\n EVER IS AVAILABLE. WE HAVE 'SYNCSORT' AND IT HAS SOME REPORT\n GENERATING ABILITIES. YOU COULD USE YOUR OWN SORT FOLLOWED BY\n IEBPTPCH. I'LL TRY TO DOCUMENT THE JCL GENERATING THE REPORTS\n SO YOU CAN FIGURE THINGS OUT FOR NON-SYNCSORT PEOPLE.\n\n YOU ARE PROBABLY NOT GOING TO GIVE YOUR SLSS TOTALLY TO A SECRETARY\n TO DO !!!!!!!!  I SAY THIS AND IT SHOCKS MANAGEMENT FOR THEY FEEL\n THIS IS A TRIVIAL JOB. MY ONLY COMMENT IS THAT YOU CAN GET YOUR-\n SELF INTO TROUBLE BY HAVING A NON-DP PERSON HANDLE MANUALS TOTALLY.\n FOR-EXAMPLE:  YOU ARE RUNNING JES2/SP1.3.4 AND IBM SENDS YOU\n JES2/SP1.3.5 THAT IS TOTALLY DIFFERENT. WELL THE SECRETARY REPLACES\n AND THROWS AWAY ALL YOUR JES2/SP1.3.4 MANUALS; TRUE YOUR LIBRARY\n IS UP-TO-DATE BUT YOU HAVE BEEN JUST SHOT YOURSELF IN THE FOOT.\n SO MAY I MAKE A SUGGESTION. YOU NEED SOMEONE TO SCREEN WHAT BOOKS\n SHOULD GO IN IMMEDIATELY AND HOLD OUT BOOKS (LIKE A NEW VERSION\n OF JES2) FOR LATER UPDATE. BELIEVE IT OR NOT WE HAVE THE SYSTEMS\n MANAGER DO THIS (IT IS NOT OVERLY DIFFICULT AND CAN BE DONE IN SHORT\n BLOCKS OF TIME WHEN MANAGERS HAVE NOTHING TO DO - IS TRUE IF THEY\n DELEGATE CORRECTLY). NOW THE SECRETARY OR JUNIOR DP PERSON CAN DO\n THE ISPF APPLICATION UPDATE AND ACTUAL FILING. MY FEELING IS THAT\n A JUNIOR DP PERSON SHOULD DO THIS AS A PART OF THEIR MATURATION\n PROCESS.\n                                   JIM MARSHALL\n ------------------------------------------------------------------\n\n    PANELS:\n\n     SLSS#P    - MAIN PANEL FOR DISPLAY\n     SLSS#PA   - ADD PANEL FOR UPDATING SLSS\n     SLSS#PP   - PANEL FOR SLSS\n     SLSS#PS   - PANEL FOR SLSS\n     SLSS#PT1  - TUTORIAL PANEL FOR HELP.\n     SLSS#PT2  - TUTORIAL PANEL FOR HELP.\n\n    SKELETONS\n\n     SLSS#SH   - MEMBER USED TO PRETTY UP THE 1ST PAGE OF PRINT.\n     SLSS#SP   - SKELETON JCL FOR LISTING THE TABLE. ADD YOUR OWN\n                 JOB CARD AND JECL.\n     SLSS#SS   - SUBJECT CODES YOU SHOULD CUSTOMIZE. LOOK AT THEM AND\n                 IT WILL JUMP OUT AT YOU.\n\n    TSO CLISTS\n\n     SLSS#C    - CLIST TO PROCESS THE SLSS\n\n\n    PROGRAMS\n\n     SLSSPRT   - SLSS PRINT PROGRAM  (COBOL)\n     SLSSPRT$  - JCL USED TO INSTALL (NOTHING FANCY)\n\n INSTALLATION INSTRUCTIONS:\n\n 1. SLSS#P   - CHANGE THE APPLICATION NAMES TO SUIT YOU AND WHAT YOU\n               WANT TO DO. DON'T FORGET THE 'VER' STATEMENTS FOR THE\n               CHECKING PURPOSES.\n\n 2. SLSS#SH  - CHANGE THE PRINT HEADER PAGE IF YOU CARE, OURS WAS\n               'MVS'.\n\n 3. SLSS#SP  - ADD A JOBCARD AND JECL CARDS TO THE JCL. CUSTOMIZE THE\n               JCL IF YOU DO NOT HAVE SYNCSORT. MAYBE YOU SHOULD SAVE\n               THIS FOR LATER WHEN IT ALL MAKES SENSE.\n\n 4. SLSS#SS  - SUBJECT NUMBERS. DECIDE HOW YOU WANT YOUR SUBJECT NO.\n               BROKEN UP. USE MINE AS A GUIDE.\n\n 5. SLSS#C   - A. ALLOC A PDS FILE TO TAKE THE PLACE OF MY FILE CALLED\n                  '$354JDM.SLSS.TABLES'. MAKE IT 5 TRKS 3350 OR 3380,\n                  FB/80/6160 WITH SAY 5 DIR.\n               B. CHANGE THE FI(REPORT) TSO ALLOC STATEMENT TO YOUR\n                  DSNAME, UNIT, AND VOLSER. THIS IS USED AS FILE TO\n                  HOLD THE 'FLAT' FILE SO WHEN WE SPIN OFF THE JCL,\n                  THE FILE IS ON DASD AND THEN THE JOB SCRATCHES IT\n                  WHEN IT IS DONE.\n               C. NOTICE THAT THE DDNAME FOR THE TABLE DSN IS\n                  'SLSSTBL'. I DID THIS SO YOU DO NOT HAVE TO WORRY\n                  ABOUT CONCATENATION SEQUENCES TO ISPTLIB. A FEW\n                  WORDS ABOUT ISPTLIB. WHEN YOU DEAL WITH TABLES\n                  YOU MUST HAVE THE TABLE LIBRARY CONCATENATED AS\n                  A PART OF ISPTLIB FOR THE READING IN. THIS YOU\n                  CANNOT CHANGE (V1 OR V2). NOW WHEN YOU WRITE\n                  OUT THE UPDATED TABLE YOU CAN SPECIFY A DDNAME.\n                  THUS TO PRECLUDE THE CHANCE OF A USER MESSING UP\n                  THE CONCATENATION SEQUENCES I HAVE THE FILE\n                  CONCATENATED TO ISPTLIB FOR INPUT PURPOSES AND\n                  ALLOCATED TO SLSSTBL FOR WRITING.\n\n 6. SLSSPRT  - INSTALL THE COBOL PGM IN SOME LIBRARY. REMEMBER TO\n               UPDATE THE SKELETON MEMBER SLSS#SP WITH A STEPLIB DD\n               CARD IF NEED BE.\n\n 7. NOW YOU ARE READY TO INSTALL THE PANELS IN YOUR SYSTEMS PANEL\n    LIBRARY OR BETTER YET A NON-IBM LIBRARY IN THE ISPPLIB DDNAME\n    CONCATENATION. COPY THE MSG MEMBERS INTO THE ISPMLIB DDNAME\n    CONCATENATION. COPY THE SKELETON MEMBERS INTO THE ISPSLIB DDNAME\n    CONCATENATION. COPY THE PROC   MEMBER  INTO THE SYSPROC DDNAME\n    CONCATENATION. CONCATENATE THE TABLE LIBRARY TO 'ISPTLIB'.\n    NOW  HOWEVER YOU HAVE IT SETUP, DO IT.\n\n    NOTE: WITH ISPF/PDF V2 WE HAVE 'LIBDEF' SO YOU CAN USE IT.\n          ALSO INSTEAD OF HAVE SEPARATE LIBRARIES FOR PANELS, MSGS,\n          ETC. KEEP THEM ALL IN ONE LIBRARY !\n\n 8. NOW PUT THE SELECTION INTO SOME PANEL, OURS IS IN OUR SYSTEMS\n    PROGRAMMERS TOOLS MENU. YOUR WILL INVOKING THE A PANEL FOR EXAMPLE\n\n                L,'PANEL(SLSS#P)'\n\n 9. NOW WITH YOU SUBJECT LIST IN HAND, YOU CAN ENTER YOU MASTER LIBRARY\n    BY THE 'BRUTE FORCE' METHOD. SOUNDS TERRIBLE, BUT IT TOOK ME 2\n    HALF DAYS TO DO AN ENTIRE MVS SOFTWARE LIBRARY. NOT THAT BAD AFTER\n    YOU SEE WHAT A EASY TASK IT WAS TO UPDATE THE THING. UPDATING\n    THE BOOKS CAN BE USED TO MAKE YOU LOOK VERY BUSY WHEN YOUR BRAIN\n    NEEDS A BREAK. PLUS YOU GET 1ST CRACK AT THE EXCESS MANUALS!\n\n    IF YOU GET LOST, CALL ME.\n\n              JIM MARSHALL, CAPT, USAF-RET\n              DEPT OF TREASURY / FMS\n              3700 EAST-WEST HIGHWAY, ROOM 400B\n              HYATTSVILLE, MD  20782\n              (301) 436-6580\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SLSS#C": {"ttr": 9221, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x019\\x00\\x00\\x00\\x86\\x11\\x1f\\x00\\x864O\\t\\x08\\x01i\\x01(\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.57", "flags": 0, "createdate": "1986-04-21T00:00:00", "modifydate": "1986-12-10T09:08:00", "lines": 361, "newlines": 296, "modlines": 0, "user": "$354JDM"}, "text": "PROC 0 SLSS(SLSS) FUNC(D) DEBUG SELECT()\n/*------------------------------------------------------*/\n/*     MAINTAIN OUR SLSS                                */\n/*------------------------------------------------------*/\n  CONTROL NOMSG PROMPT NOFLUSH\n  IF &DEBUG = DEBUG THEN CONTROL NOMSG LIST CONLIST SYMLIST\n/*------------------------------------------------------*/\n/*  ALLOC THE SLSS TABLE PDS TO A DDNAME OF 'SLSSTBL'   */\n/*  SO WE MAKE SURE THIS DOESN'T GET ACCIDENTLY STORED  */\n/*  IN SOMEONE ELSES PDS.                               */\n/*                                                      */\n/*  I SAY THIS BECAUSE WE MUST ALSO HAVE THE PDS ALLOC  */\n/*  TO THE DDNAME OF 'ISPTLIB'. THIS IS CRAZY BUT       */\n/*  TBOPEN GIVES YOU NO OTHER OPTION. THE PDS IS READ   */\n/*  OUT OF THE ISPTLIB CONCATENATION AND WRITTEN BACK   */\n/*  TO THE SLSSTBL DDNAME.                              */\n/*                                                      */\n/*  NOW IF YOU ARE ISPF/PDF V1 YOU CAN NOT DO THE       */\n/*  'LIBDEF' FUNCTION AND MUST HAVE THE SLSS PDS IN     */\n/*  THE ISPTLIB CONCATENATION BEFORE IT IS OPEN.        */\n/*                                                      */\n/*                                                      */\n/*------------------------------------------------------*/\n  ISPEXEC LIBDEF ISPTLIB DATASET ID('$354JDM.SLSS.TABLES')\n  FREE FI(SLSSTBL)\n  ALLOC FI(SLSSTBL) DA('$354JDM.SLSS.TABLES') SHR\n  IF &LASTCC \u00ac= 0 THEN  +\n     DO\n     WRITE  TABLE FILE ALLOCATION FAILED !!!!\n     EXIT\n     END\n  SET &LASTCC = 0\n  ISPEXEC TBOPEN &SLSS\n  IF &LASTCC >0 THEN GOTO TBCREATE\n     ELSE GOTO DISPLAY\nTBCREATE: +\n  SET &CREATE = Y\n  ISPEXEC TBCREATE &SLSS KEYS(MANID)  +\n      NAMES(MANID MANDASH NAME STATUS TNL TNL0 TNL1 TNL2 +\n      TNL2 TNL3 TNL4 TNL5 TNL6 TNL7 +\n      TNL8 TNL9 TNLA TNLB TNLC TNLD TNLE TNLF BOOK SB)\n  IF &LASTCC =0 THEN GOTO ADD\n      WRITE SLSS TABLE CREATION FAILED - RETURN CODE &LASTCC\n      EXIT\n/*------------------------------------------------------*/\n/*     DISPLAY THE MENU                                 */\n/*------------------------------------------------------*/\nDISPLAY: +\n  IF &FUNC = A THEN GOTO ADD\n  SET &CREATE =\n  ISPEXEC TBDISPL &SLSS PANEL(SLSS#PS)\n  SET &LCC = &LASTCC\n  IF &LCC = 0 THEN GOTO TESTOPT\n  IF &LCC = 4 THEN GOTO UPDATE\n  IF &LCC = 8 THEN GOTO CLOSE\n  WRITE TABLE DISPLAY FAILED WITH RETURN CODE &LCC\n  GOTO CLOSE\n  /*------------------------------------------------------*/\n  /*     TEST THE OPTIONS IN THE MAIN MENU                */\n  /*------------------------------------------------------*/\nTESTOPT:  +\n  IF &STR(&OPT) = CANCEL THEN GOTO EXIT\n  IF &STR(&OPT) = ADD THEN GOTO ADDS\n  IF &STR(&OPT) = SORT THEN GOTO SORT\n  IF &STR(&OPT) = PRT   THEN GOTO PRINT\n  IF &STR(&OPT) = SAVE THEN GOTO SAVEIT\n  IF &SELECT    = D THEN GOTO DELETE\n  IF &SELECT    = S THEN GOTO REFRESH\n  IF &STR(&OPT) = THEN GOTO DISPLAY\n  SET &MANID    = &SUBSTR(1:9,&STR(&OPT      ))\n  ISPEXEC TBGET &SLSS\n  SET &LCC = &LASTCC\n  IF &LCC = 0 THEN GOTO REFRESH\n  IF &LCC = 8 THEN WRITE &OPT ENTRY NOT IN TABLE\n  GOTO DISPLAY\n  /*------------------------------------------------------*/\n  /*     NOW SAVE THE SLSS                                */\n  /*------------------------------------------------------*/\nSAVEIT:  +\n  ISPEXEC TBSAVE &SLSS PAD(30) LIBRARY(SLSSTBL)\n  GOTO DISPLAY\n  /*------------------------------------------------------*/\n  /*     WE WANT TO ADD AN ENTRY TO THE SLSS              */\n  /*------------------------------------------------------*/\nADDS:  +\n  ISPEXEC TBVCLEAR &SLSS\nADD:     +\n  ISPEXEC DISPLAY PANEL(SLSS#PA)\n  IF &LASTCC >0 THEN GOTO NOADD\n  SET &MANDASH = &SUBSTR(11:12,&STR(&MANID         ))\n  SET &MANID   = &SUBSTR(1:9,&STR(&MANID           ))\n  SET &BOOK    = &SUBSTR(1:4,&STR(&BOOK            ))\n  SET &SB      = &SUBSTR(1:2,&STR(&SB              ))\n  ISPEXEC TBADD &SLSS\n  IF &LASTCC  \u00ac= 0 THEN WRITE &MANID ENTRY EXISTS USE REFRESH\n  IF &SELECT   = R THEN GOTO DISPLAY\n  GOTO ADD\nNOADD:  +\n  SET &FUNC = D\n  GOTO DISPLAY\n  /*------------------------------------------------------*/\n  /*     DELETE AN ENTRY TO SLSS                          */\n  /*------------------------------------------------------*/\nDELETE:  +\n  ISPEXEC TBDELETE &SLSS\n  GOTO DISPLAY\n  /*------------------------------------------------------*/\n  /*     UPDATE AN ENTRY TO SLSS                          */\n  /*------------------------------------------------------*/\nUPDATE:  +\n  IF &SELECT = D THEN GOTO DELETE\n  IF &SELECT = R THEN GOTO REFRESH\n  ISPEXEC TBMOD &SLSS\n  GOTO DISPLAY\n  /*------------------------------------------------------*/\n  /*     REFRESH AN ENTRY                                 */\n  /*------------------------------------------------------*/\nREFRESH:  +\n  ISPEXEC DISPLAY PANEL(SLSS#PA)\n  IF &LASTCC >0 THEN GOTO DISPLAY\n  SET &MANDASH = &SUBSTR(11:12,&STR(&MANID         ))\n  SET &MANID   = &SUBSTR(1:9,&STR(&MANID           ))\n  SET &BOOK    = &SUBSTR(1:4,&STR(&BOOK            ))\n  SET &SB      = &SUBSTR(1:2,&STR(&SB              ))\n  ISPEXEC TBMOD &SLSS\n  GOTO DISPLAY\n  /*------------------------------------------------------*/\n  /*     HERE IS WHERE WE WILL SORT THE SLSS BY MANUAL    */\n  /*     NUMBER.                                          */\n  /*------------------------------------------------------*/\nSORT: +\n  ISPEXEC TBTOP &SLSS\n  ISPEXEC TBSKIP &SLSS NUMBER(+1)\n  CONTROL NOMSG\n  FREE FI(SORTIN)\n  CONTROL MSG\n  ALLOC FI(SORTIN) UNIT(V3380) NEW SPA(10,10) TR\n  OPENFILE SORTIN OUTPUT\nREAD:  +\n  SET &AB   = &SUBSTR(1:3,&STR(-&MANDASH    ))\n  SET &A    = &SUBSTR(1:9,&STR(&MANID        ))\n  IF &TNL   = THEN SET &TNL = N\n  SET &B    = &SUBSTR(1:1,&STR(&TNL ))\n  IF &STR(&STATUS) = THEN SET &STATUS = H\n      ELSE SET &STATUS = O\n  SET &C    = &SUBSTR(1:7,&STR(&STATUS      ))\n  SET &D    = &STR(&BOOK)\n  SET &E    = &STR(&SB)\n  SET &SORTIN = &STR(&A&AB  &B &C &D &E &NAME)\n  PUTFILE SORTIN\n  /*------------------------------------------------------*/\n  /*     WE NEED TO TEST TO SEE IF THERE IS A TNL. IF SO  */\n  /*     THEN WE MUST INCLUDE THEM.                       */\n  /*------------------------------------------------------*/\n    IF &TNL = N THEN GOTO READ1SKP\n       IF &STR(&TNL0) = THEN GOTO SKIPIT\n       SET &SORTIN = &STR(&A&AB.A &TNL0)\n       PUTFILE SORTIN\n       IF &STR(&TNL1) = THEN GOTO SKIPIT\n       SET &SORTIN = &STR(&A&AB.A &TNL1)\n       PUTFILE SORTIN\n       IF &STR(&TNL2) = THEN GOTO SKIPIT\n       SET &SORTIN = &STR(&A&AB.A &TNL2)\n       PUTFILE SORTIN\n       IF &STR(&TNL3) = THEN GOTO SKIPIT\n       SET &SORTIN = &STR(&A&AB.A &TNL3)\n       PUTFILE SORTIN\n       IF &STR(&TNL4) = THEN GOTO SKIPIT\n       SET &SORTIN = &STR(&A&AB.A &TNL4)\n       PUTFILE SORTIN\n       IF &STR(&TNL5) = THEN GOTO SKIPIT\n       SET &SORTIN = &STR(&A&AB.A &TNL5)\n       PUTFILE SORTIN\n       IF &STR(&TNL6) = THEN GOTO SKIPIT\n       SET &SORTIN = &STR(&A&AB.A &TNL6)\n       PUTFILE SORTIN\n       IF &STR(&TNL7) = THEN GOTO SKIPIT\n       SET &SORTIN = &STR(&A&AB.A &TNL7)\n       PUTFILE SORTIN\n       IF &STR(&TNL8) = THEN GOTO SKIPIT\n       SET &SORTIN = &STR(&A&AB.A &TNL8)\n       PUTFILE SORTIN\n       IF &STR(&TNL9) = THEN GOTO SKIPIT\n       SET &SORTIN = &STR(&A&AB.A &TNL9)\n       PUTFILE SORTIN\n       IF &STR(&TNLA) = THEN GOTO SKIPIT\n       SET &SORTIN = &STR(&A&AB.A &TNLA)\n       PUTFILE SORTIN\n       IF &STR(&TNLB) = THEN GOTO SKIPIT\n       SET &SORTIN = &STR(&A&AB.A &TNLB)\n       PUTFILE SORTIN\n       IF &STR(&TNLC) = THEN GOTO SKIPIT\n       SET &SORTIN = &STR(&A&AB.A &TNLC)\n       PUTFILE SORTIN\n       IF &STR(&TNLD) = THEN GOTO SKIPIT\n       SET &SORTIN = &STR(&A&AB.A &TNLD)\n       PUTFILE SORTIN\n       IF &STR(&TNLE) = THEN GOTO SKIPIT\n       SET &SORTIN = &STR(&A&AB.A &TNLE)\n       PUTFILE SORTIN\n       IF &STR(&TNLF) = THEN GOTO SKIPIT\n       SET &SORTIN = &STR(&A&AB.A &TNLF)\n       PUTFILE SORTIN\nSKIPIT: +\n  SET &SORTIN = &STR(&A&AB.Z END OF TNLS)\n  PUTFILE SORTIN\nREAD1SKP:  +\n  ISPEXEC TBSKIP &SLSS NUMBER(+1)\n  SET &LCC = &LASTCC\n  IF &LCC = 0 THEN GOTO READ\n  IF &LCC = 8 THEN GOTO SORTIT\n  WRITE TPSKIP FAILED WITH &LCC DURING SORT ROUTINE\n  GOTO CLOSE\n/*------------------------------------------------------*/\n/*   WE MUST NOW SORT THE FILE. FREE ALL THE FILES SO   */\n/*   WE CAN ALLOCATE THEM CORRECTLY.                    */\n/*------------------------------------------------------*/\nSORTIT:  +\n  CLOSFILE SORTIN\n CONTROL NOMSG\nFREE FI(SYSPRINT SYSIN SORTMSG SORTOUT SORTWK01 +\n       SORTWK02 SORTWK03 SORTLIB  ATTR80 SYSOUT)\nCONTROL MSG\nATTR ATTR80 BLKSIZE(6160) LRECL(80) RECFM(F B)\nALLOC FI(SORTOUT) UNIT(V3380) NEW SPA(10,10) TR +\n        USI(ATTR80)\nALLOC FI(SORTLIB) DS('SYS1.SORTLIB') SHR\nALLOC FI(SORTMSG) DUMMY\nALLOC FI(SORTWK01) UNIT(SYSDA) SPA(10,10) TR\nALLOC FI(SORTWK02) UNIT(SYSDA) SPA(10,10) TR\nALLOC FI(SORTWK03) UNIT(SYSDA) SPA(10,10) TR\nALLOC FI(SYSPRINT) DUMMY\nALLOC FI(SYSOUT)  DUMMY\nALLOC FI(SYSIN) UNIT(V3380) SPA(1) TR\n  OPENFILE SYSIN OUTPUT\n  SET &SYSIN = &STR( SORT FIELDS=(2,12,CH,A) )\n  PUTFILE SYSIN\n  SET &SYSIN = &STR( END )\n  PUTFILE SYSIN\n  CLOSFILE SYSIN\nWRITE ****** SORT BEING INVOKED ******\nCALL 'SYS1.PPLINK(SORT)'\nFREE FI(SYSPRINT ATTR80 SYSIN SORTMSG SORTIN +\n       SORTWK01 SORTWK02 SORTWK03 SORTLIB SYSOUT)\nWRITE ******    SORT ENDED   *********\n  OPENFILE SORTOUT\n  SET &CLOSEFLG = N\n  SET &GTNL = N\n  SET &CNT = 0\n  ISPEXEC TBTOP &SLSS\nCLEARIT: +\n  ISPEXEC TBSKIP &SLSS NUMBER(+1)\n  IF &LASTCC \u00ac= 0 THEN GOTO CLEAROK\n  ISPEXEC TBDELETE &SLSS\n  GOTO CLEARIT\nCLEAROK: +\nERROR DO\n    SET &LCC = &LASTCC\n    IF &LCC \u00ac= 400 THEN RETURN\n    SET &CLOSEFLG = Y\n    END\nREADIN:  +\n  IF &CLOSEFLG = Y THEN GOTO ENDSORT\n  GETFILE SORTOUT\n  IF &SUBSTR(15:17,&STR(&SORTOUT)) = END THEN GOTO TBSKIP\n  IF &GTNL = Y THEN GOTO SETTNL\n  SET &MANID = &SUBSTR(1:9,&STR(&SORTOUT))\n    SET &MANDASH = &SUBSTR(11:12,&STR(&SORTOUT))\n  SET &TNL   = &SUBSTR(15,&STR(&SORTOUT))\n     IF &TNL = N THEN SET &TNL =\n         ELSE SET &TNL = Y\n  SET &STATUS = &SUBSTR(17,&STR(&SORTOUT))\n     IF &STATUS = H THEN SET &STATUS =\n        ELSE SET &STATUS = &STR(*)\n  SET &BOOK   = &SUBSTR(25:28,&STR(&SORTOUT))\n  SET &SB     = &SUBSTR(30:31,&STR(&SORTOUT))\n  SET &NAME   = &SUBSTR(33:80,&STR(&SORTOUT))\n   IF &TNL \u00ac= Y THEN GOTO TBSKIP\n      ELSE SET &GTNL = Y\n     GOTO READIN\nSETTNL: +\n   IF &CNT = 0 THEN SET &TNL0 = &SUBSTR(15:23,&STR(&SORTOUT))\n   IF &CNT = 1 THEN SET &TNL1 = &SUBSTR(15:23,&STR(&SORTOUT))\n   IF &CNT = 2 THEN SET &TNL2 = &SUBSTR(15:23,&STR(&SORTOUT))\n   IF &CNT = 3 THEN SET &TNL3 = &SUBSTR(15:23,&STR(&SORTOUT))\n   IF &CNT = 4 THEN SET &TNL4 = &SUBSTR(15:23,&STR(&SORTOUT))\n   IF &CNT = 5 THEN SET &TNL5 = &SUBSTR(15:23,&STR(&SORTOUT))\n   IF &CNT = 6 THEN SET &TNL6 = &SUBSTR(15:23,&STR(&SORTOUT))\n   IF &CNT = 7 THEN SET &TNL7 = &SUBSTR(15:23,&STR(&SORTOUT))\n   IF &CNT = 8 THEN SET &TNL8 = &SUBSTR(15:23,&STR(&SORTOUT))\n   IF &CNT = 9 THEN SET &TNL9 = &SUBSTR(15:23,&STR(&SORTOUT))\n   IF &CNT = 10 THEN SET &TNLA = &SUBSTR(15:23,&STR(&SORTOUT))\n   IF &CNT = 11 THEN SET &TNLB = &SUBSTR(15:23,&STR(&SORTOUT))\n   IF &CNT = 12 THEN SET &TNLC = &SUBSTR(15:23,&STR(&SORTOUT))\n   IF &CNT = 13 THEN SET &TNLD = &SUBSTR(15:23,&STR(&SORTOUT))\n   IF &CNT = 14 THEN SET &TNLE = &SUBSTR(15:23,&STR(&SORTOUT))\n   IF &CNT = 15 THEN SET &TNLF = &SUBSTR(15:23,&STR(&SORTOUT))\n   SET &CNT = &CNT + 1\n   GOTO READIN\nTBSKIP: +\n  SET &CNT = 0\n     SET &GTNL = N\n  ISPEXEC TBADD &SLSS\n  ISPEXEC TBVCLEAR &SLSS\n  GOTO READIN\nENDSORT: +\nERROR OFF\n    ISPEXEC TBTOP &SLSS\n    CLOSFILE SORTOUT\n    FREE FI(SORTOUT)\n    GOTO DISPLAY\n/*------------------------------------------------------*/\n/*    PRINT THE FILE WE HAVE CREATED WITH ALL THE DATA  */\n/*    WE HAVE. DO THIS WITH A BATCH JOB AND COBOL PGM.  */\n/*    MORE EFFICIENT!!!                                 */\n/*------------------------------------------------------*/\nPRINT: +\n  CONTROL NOMSG\n  ATTR FB LRECL(80) RECFM(F B) BLKSIZE(6160)\n  ALLOC FI(REPORT) DA(TABLE.DATA) NEW CATALOG UNIT(3380) +\n        VOL(USER60) SPACE(1,1) TR  USING(FB)\n  OPENFILE REPORT OUTPUT\n  ISPEXEC TBTOP &SLSS\n  ISPEXEC TBSKIP &SLSS NUMBER(+1)\n  PNEXT: +\n     SET &A   = &SUBSTR(1:9,&STR(&MANID           ))\n     SET &B   = &SUBSTR(1:2,&STR(&MANDASH         ))\n     SET &C   = &SUBSTR(1:1,&STR(&STATUS          ))\n     SET &D   = &SUBSTR(1:4,&STR(&BOOK            ))\n     SET &E   = &SUBSTR(1:2,&STR(&SB              ))\n     SET &FF  = &SUBSTR(1:1,&STR(&TNL             ))\n     IF  &FF  = Y THEN SET &F = Y\n         ELSE  SET &F = N\n     SET &G   = &STR(&NAME)\n     SET &REPORT = &STR(&A&B&C&D&E&F&G)\n     PUTFILE REPORT\n  PREAD: +\n     ISPEXEC TBSKIP &SLSS NUMBER(+1)\n     SET &LCC   = &LASTCC\n     IF  &LCC   = 0  THEN GOTO PNEXT\n     IF  &LCC   = 8  THEN GOTO PCLOSE\n     WRITE  TABLE PRINT FAILED WITH RC = &LCC\n     GOTO CLOSE\n  PCLOSE: +\n     CLOSFILE REPORT\n     FREE FI(REPORT FB)\n     ISPEXEC FTOPEN   TEMP\n     ISPEXEC FTINCL   SLSS#SP\n     ISPEXEC FTCLOSE\n     ISPEXEC VGET     ZTEMPF\n     SUBMIT  '&ZTEMPF'\n     CONTROL MSG\n     GOTO DISPLAY\nCLOSE: +\n  ISPEXEC TBCLOSE &SLSS PAD(30) LIBRARY(SLSSTBL)\n  GOTO WRAPUP\nEXIT: +\n  ISPEXEC TBEND &SLSS\nWRAPUP: +\n  FREE FI(SLSSTBL)\n  EXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SLSS#P": {"ttr": 9228, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x86\\x11O\\x00\\x863/\\x10\\x14\\x00\\x1c\\x00\\x18\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1986-04-24T00:00:00", "modifydate": "1986-11-28T10:14:00", "lines": 28, "newlines": 24, "modlines": 0, "user": "$354JDM"}, "text": "%            System Library Subscription Management\n+\n%COMMAND ===>_ZCMD\n+\n+    Enter the SLSS\n+    you wish to Manage%===>_SLSS    +MVS- MVS/SP\n_DEBUG\n+                                     VM - VM/SP\n+                                     PP - Program Products (non-IBM)\n+\n+\n+    You can manage any number of SLSS's simply by changing the\n+    name and entering the SLSS information.\n+\n+    Your SLSS is the list of all IBM manuals that you have ordered\n+    and reflects those manuals for which IBM will ship updates for.\n+\n+    Note: This SLSS reflects only those manuals that you have entered\n+          into the SLSS table named above.\n+\n)INIT\n &SLSS = TRANS (&SLSS  ' ',MVS *,*)\n .CURSOR = SLSS\n .HELP   = SLSS#PT2\n)PROC\n VER (&SLSS,NONBLANK)   VER (&SLSS,LIST,MVS,VM,C10,PP)\n &ZSEL ='CMD(%SLSS#C SLSS(&SLSS) &DEBUG)'\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SLSS#PA": {"ttr": 9230, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x00\\x00\\x86\\x11\\x1f\\x00\\x863/\\x10\\x01\\x00*\\x00%\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "1986-04-21T00:00:00", "modifydate": "1986-11-28T10:01:00", "lines": 42, "newlines": 37, "modlines": 0, "user": "$354JDM"}, "text": ")ATTR\n  + TYPE(TEXT)  INTENS(LOW) SKIP(ON)\n  % TYPE(TEXT)  INTENS(HIGH) SKIP(ON)\n  _ TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n%    System Library Subscription Service Manual Addition Panel\n+\n%COMMAND ===>_ZCMD\n+\n+Enter Manual #     %===>_MANID       +  full manual number\n+Enter Book   #     %===>_BOOK+          Book number\n+Enter Subject  #   %===>_SB+            Subject number\n+Enter Manual status%===>_STATUS  +      BLANK or O or ONORDER\n+Enter Manual Name:\n+     %===>_NAME                                         +\n+\n+TNL Publications:\n+\n+   TNL 0:_TNL0        +\n+   TNL 1:_TNL1        +   TNL 2:_TNL2        +   TNL 3:_TNL3        +\n+   TNL 4:_TNL4        +   TNL 5:_TNL5        +   TNL 6:_TNL6        +\n+   TNL 7:_TNL7        +   TNL 8:_TNL8        +   TNL 9:_TNL9        +\n+   TNL A:_TNLA        +   TNL B:_TNLB        +   TNL C:_TNLC        +\n+   TNL D:_TNLD        +   TNL E:_TNLE        +   TNL F:_TNLF        +\n)INIT\n .CURSOR = MANID\n &TNL = &Z\n &MANID = '&MANID-&MANDASH'\n &STATUS = TRUNC (&STATUS,1)\n &STATUS = TRANS (&STATUS ' ',' ' O,ONORDER '*',ONORDER)\n)PROC\n VER (&MANID,NONBLANK)\n VER (&NAME,NONBLANK)\n IF (&TNL0 \u00ac= &Z)\n    &TNL = Y\n &STATUS = TRUNC (&STATUS,1)\n IF (&STATUS \u00ac= &Z)\n     &STATUS = '*'\n VER (&BOOK,NONBLANK,PICT,NNNN)\n VER (&SB,NONBLANK,PICT,NN)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SLSS#PP": {"ttr": 9474, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x86\\x11\\x1f\\x00\\x86\\x11\\x1f\\x10&\\x00\\x1d\\x00\\x18\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1986-04-21T00:00:00", "modifydate": "1986-04-21T10:26:00", "lines": 29, "newlines": 24, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  + TYPE(TEXT)  INTENS(LOW) SKIP(ON)\n  % TYPE(TEXT)  INTENS(HIGH) SKIP(ON)\n  _ TYPE(INPUT) INTENS(HIGH)\n)BODY\n%----------- System Library Subscription Management ----------------------------\n%COMMAND ===>_ZCMD\n+\n+    Enter the SLSS you wish to Manage%===>_SLSS    +\n_DEBUG\n+    You can manage any number of SLSS's simply by changing the\n+    name and entering the SLSS information.\n+\n+    Your SLSS is the list of all IBM manuals that you have ordered\n+    and reflects those manuals for which IBM will ship updates for.\n+\n+    Note: This SLSS reflects only those manuals that you have entered\n+          into the SLSS table named above.\n+\n+\n+\n+\n)INIT\n &SLSS = TRANS (&SLSS  ' ',SLSS *,*)\n .CURSOR = SLSS\n)PROC\n VER (&SLSS,NONBLANK)   VER (&SLSS,NAME)\n &ZSEL ='CMD(%SLSS#C SLSS(&SLSS) &DEBUG)'\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SLSS#PS": {"ttr": 9476, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x00\\x00\\x86\\x11\\x1f\\x00\\x863/\\x10\\x01\\x00\\x16\\x00\\x14\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "1986-04-21T00:00:00", "modifydate": "1986-11-28T10:01:00", "lines": 22, "newlines": 20, "modlines": 0, "user": "$354JDM"}, "text": ")ATTR\n @ TYPE(OUTPUT) INTENS(LOW)\n)BODY\n%  System Library Subscription Service +Table: &SLSS\n+Option:_OPT         + add,sort,prt,cancel,                 +%scroll ===>_AMT +\n+                      save, or Manual No.\n+\n+Select opt:  S - Display/Change adding TNLs\n+             D - Delete  (one entry at a time)\n+\n+Sel    Manual #    Book Subj TNL Ord   Name\n+\n)MODEL\n_Z+  @Z       -@Z  @Z    @Z   @Z  @Z @Z\n)INIT\n .CURSOR = OPT\n .HELP = SLSS#PT1\n &AMT = HALF\n &OPT = &Z\n &SELECT = &Z\n &VARS = '(SELECT MANID MANDASH BOOK SB TNL STATUS NAME)'\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SLSS#PT1": {"ttr": 9478, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x86\\x11\\x1f\\x00\\x86\\x11\\x1f\\tI\\x00\\x15\\x00\\x15\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-04-21T00:00:00", "modifydate": "1986-04-21T09:49:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "SS02JDM"}, "text": "%TSLSS ---------- SYSTEM LIBRARY SUBSCRIPTION SYSTEM  --------------------------\n+\n+  THIS ISPF APPLICATION WILL ALLOW YOU TO MANAGE YOU OWN SLSS.\n+\n+  PRIMARY COMMAND OPTIONS:\n+             A    =  ADD NEW MANUALS TO YOUR SLSS\n+             S    =  SORT YOUR SLSS TABLE\n+             P    =  PRINT YOUR SLSS\n+             SAVE = SAVE WHAT YOU HAVE DONE SO FAR\n+             C    =  CANCEL EVERYTHING DONE SO FAR\n+             MANUAL ID = SET CURSOR AT THAT MANUAL (XXNN-NNNN)\n+\n+\n+  LINE COMMAND OPTIONS:\n+             S    =  SELECT MANUAL TO CHANGE STATUS OR ADD TNL'S\n+             D    =  DELETE MANUAL FROM YOUR SLSS\n+\n+\n+  PFK3 OR PFK15 = SAVE/END\n+\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SLSS#PT2": {"ttr": 9480, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x86\\x11\\x1f\\x00\\x863/\\x10\\x12\\x00\\x0e\\x00\\x18\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1986-04-21T00:00:00", "modifydate": "1986-11-28T10:12:00", "lines": 14, "newlines": 24, "modlines": 0, "user": "$354JDM"}, "text": "%              SYSTEM   LIBRARY   SUBSCRIPTION   SYSTEM\n+\n+          This ISPF/PDF application will allow you to manage your own\n+      SLSS. You should have read the distribution SLSS##PR member of\n+      the library before beginning to customize the CLIST members,\n+      dsnames, and library names.\n+\n+\n+          The SLSS application can handle as many different libraries\n+      as is allowed. This is determined by the SLSS#P panel and can\n+      be changed. You could have an MVS and VM library, etc.\n+\n+\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SLSS#SH": {"ttr": 9482, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x86\\x12_\\x00\\x86\\x12o\\x103\\x007\\x005\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1986-05-05T00:00:00", "modifydate": "1986-05-06T10:33:00", "lines": 55, "newlines": 53, "modlines": 0, "user": "SS02JDM"}, "text": "\n\n\n\n\n\n\n                   MM        MM     VV        VV      SSSSSSSSSSS\n                   MMMM    MMMM     VV        VV     SSSSSSSSSSS\n                   MM MM  MM MM     VV        VV     SS\n                   MM  MMMM  MM     VV        VV     SS\n                   MM   MM   MM     VV        VV     SSSSSSSSSSS\n                   MM        MM     VV        VV      SSSSSSSSSSS\n                   MM        MM     VV       VV                SS\n                   MM        MM      VV     VV                 SS\n                   MM        MM       VV   VV                  SS\n                   MM        MM        VVVVV          SSSSSSSSSSS\n                   MM        MM         VVV          SSSSSSSSSSS\n\n\n\n              SSSSSSSSSSS     LL                SSSSSSSSSSS      SSSSSSSSSSS\n             SSSSSSSSSSS      LL               SSSSSSSSSSS      SSSSSSSSSSS\n             SS               LL               SS               SS\n             SS               LL               SS               SS\n             SSSSSSSSSSS      LL               SSSSSSSSSSS      SSSSSSSSSSS\n              SSSSSSSSSSS     LL                SSSSSSSSSSS      SSSSSSSSSSS\n                       SS     LL                         SS               SS\n                       SS     LL                         SS               SS\n              SSSSSSSSSSS     LLLLLLLLLLLL      SSSSSSSSSSS      SSSSSSSSSSS\n             SSSSSSSSSSS      LLLLLLLLLLLL     SSSSSSSSSSS      SSSSSSSSSSS\n\n1\n\n\n\n\n\n\n\n\n                        2 ISG SLSS LISTINGS\n\n\n\n\n                  PART 1  - SLSS BY SUBJECT CODES\n\n\n                  PART 2  - SLSS BY BOOK  NUMBER\n\n\n                  PART 3  - SLSS BY MANUAL NUMBER\n\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SLSS#SP": {"ttr": 9484, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01 \\x00\\x00\\x00\\x85\\x07\\x8f\\x00\\x87\\x16\\x1f\\x11\\x04\\x00k\\x008\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.32", "flags": 0, "createdate": "1985-03-19T00:00:00", "modifydate": "1987-06-10T11:04:00", "lines": 107, "newlines": 56, "modlines": 0, "user": "$354JDM"}, "text": "/*JOBPARM L=25\n//*------------------------------------------------------------------*\n//BUILDDS  EXEC PGM=IEBGENER\n//SYSPRINT DD DUMMY\n//SYSIN    DD DUMMY\n//SYSUT2   DD UNIT=VIO,DSN=&&SLSS,SPACE=(CYL,(25)),\n//            DISP=(,PASS),DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)\n//SYSUT1   DD DSN=&SYSUID..TABLE.DATA,DISP=(OLD,DELETE)\n//*------------------------------------------------------------------*\n//SUBJ     EXEC PGM=IEBGENER\n//SYSPRINT DD DUMMY\n//SYSIN    DD DUMMY\n//SYSUT2   DD UNIT=VIO,DSN=&&SUBJ,SPACE=(CYL,(25)),\n//            DISP=(,PASS),DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)\n//SYSUT1   DD *\n)IM SLSS#SS  NT\n/*\n//*------------------------------------------------------------------*\n//HEADPAGE EXEC PGM=IEBGENER\n//SYSPRINT DD DUMMY\n//SYSIN    DD DUMMY\n//SYSUT2   DD SYSOUT=(U,,XDDA),\n//            DCB=(RECFM=FBA,LRECL=80,BLKSIZE=80)\n//SYSUT1   DD *\n)IM SLSS#SH  NT\n/*\n//*------------------------------------------------------------------*\n//CONTENT  EXEC PGM=IEBPTPCH\n//SYSPRINT DD DUMMY\n//SYSUT2   DD SYSOUT=(U,,XDDA)\n//SYSIN   DD *\n   PRINT CNTRL=2,MAXLINE=60,MAXFLDS=2\n   TITLE ITEM=('SLSS SUBJECTS LIST',10)\n  RECORD FIELD=(2,1,,1),FIELD=(70,3,,5)\n/*\n//SYSUT1   DD DSN=&&SUBJ,DISP=(OLD,PASS)\n//*------------------------------------------------------------------*\n//SUBJPRNT EXEC PGM=SLSSPRT,REGION=1200K\n//PRNTFILE DD SYSOUT=(U,,XDDA),DCB=RECFM=FBA\n//MANUALS  DD DSN=&&SLSS,DISP=(OLD,PASS)\n//SYSOUT   DD DUMMY\n//SORTWK01 DD UNIT=SYSDA,SPACE=(CYL,3)\n//SORTWK02 DD UNIT=SYSDA,SPACE=(CYL,3)\n//SORTWK03 DD UNIT=SYSDA,SPACE=(CYL,3)\n//SUBJECTS DD DSN=&&SUBJ,DISP=(OLD,DELETE)\n//*------------------------------------------------------------------*\n//PRNTSLSS EXEC PGM=SYNCSORT,REGION=1200K,TIME=5\n//SYSOUT   DD DUMMY\n//SORTOUT  DD SYSOUT=(U,,XDDA)\n//SORTIN   DD DSN=&&SLSS,DISP=(OLD,PASS)\n//SORTWK01 DD UNIT=SYSDA,SPACE=(CYL,3)\n//SORTWK02 DD UNIT=SYSDA,SPACE=(CYL,3)\n//SORTWK03 DD UNIT=SYSDA,SPACE=(CYL,3)\n//SYSIN    DD *\n SORT FIELDS=(13,4,CH,A,20,59,CH,A)\n OUTFIL OUTREC=(1:13,4,\n                6:1,9,\n               15:C'-',\n               16:10,2,\n               20:17,2,\n               25:19,1,\n               29:12,1,\n               31:20,59),\n        HEADER2=(1:'SYSTEM LIBRARY SUBSCRIPTION SERVICE ',\n                 37:'BOOK  LISTING ',\n                 57:&&DATE,\n                 67:'PAGE ',\n                 73:&&PAGE,//,\n                  1:'BOOK',\n                  6:'MANUAL #',\n                 19:'SUBJ',\n                 24:'TNL',\n                 28:'ST',\n                 35:'NAME',//),\n        SECTIONS=(13,4,SKIP=3L)\n/*\n//*------------------------------------------------------------------*\n//MANLSEQ  EXEC PGM=SYNCSORT,REGION=1200K,TIME=5\n//SYSOUT   DD DUMMY\n//SORTOUT  DD SYSOUT=(U,,XDDA)\n//SORTIN   DD DSN=&&SLSS,DISP=(OLD,DELETE)\n//SORTWK01 DD UNIT=SYSDA,SPACE=(CYL,3)\n//SORTWK02 DD UNIT=SYSDA,SPACE=(CYL,3)\n//SORTWK03 DD UNIT=SYSDA,SPACE=(CYL,3)\n//SYSIN    DD *\n SORT FIELDS=(1,9,CH,A,20,59,CH,A)\n OUTFIL OUTREC=(1:1,9,\n               10:C'-',\n               11:10,2,\n               14:13,4,\n               20:17,2,\n               25:19,1,\n               29:12,1,\n               31:20,59),\n        HEADER2=(1:'SYSTEM LIBRARY SUBSCRIPTION SERVICE ',\n                 37:'MANUAL LISTING ',\n                 57:&&DATE,\n                 67:'PAGE ',\n                 73:&&PAGE,//,\n                  1:'MANUAL #',\n                 14:'BOOK',\n                 19:'SUBJ',\n                 24:'TNL',\n                 28:'ST',\n                 35:'NAME',//),\n        SECTIONS=(01,4,SKIP=3L)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SLSS#SS": {"ttr": 9487, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x00\\x00\\x85\\x04?\\x00\\x86\\x12_\\x15\\t\\x00F\\x00\\x01\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "1985-02-12T00:00:00", "modifydate": "1986-05-05T15:09:00", "lines": 70, "newlines": 1, "modlines": 0, "user": "SS02JDM"}, "text": "00GENERAL SYSTEM INFORMATION (SUMMARIES,BIBLIOGRAPHIES,CONFIGURATORS)\n01MACHINE SYSTEM (PROCESSOR,CHANNELS,OPERATIONS)\n02CARD READERS AND/OR PUNCHES, CONTROL UNITS\n03PRINTERS, CONTROL UNITS\n04OCR, MCR (OPTICAL/MAGNETIC CHARACTER READERS)\n05MAGNETIC TAPE UNITS, CONTROL UNITS\n06DISPLAY EQUIPMENT (ALSO SEE 09)\n07DASD (DIRECT ACCESS STORAGE DEVICES), CONTROL UNITS\n08OTHER DEVICES, CONTROL UNITS\n09COMMUNICATIONS DEVICES, CONTROL UNITS\n10AUXILIARY EQUIPMENT (DEVICES NORMALLY OFF-LINE)\n13SPECIAL FEATURES INFORMATION\n14CUSTOM FEATURES & SUPPORTING PROGRAMS (PSHRPQ)\n15PHYSICAL PLANNING INFORMATION\n18INFO/SYS, INFO/MGMT, INFO/ACCESS, INFO CENTER\n19SYSTEM MGMT PGM (SMP), SYSTEM MGMT FACIILITY (SMF)\n20GENERAL INFORMATION: EVALUATION, FLYERS\n21ASSEMBLER\n22APL\n23BASIC\n24COBOL\n25FORTRAN\n26STATISTICAL ANALYSIS SYSTEMS: SAS,SPSSX,GPSS,MGRW,MPSX/370\n28RPG\n29PL/1\n30ACCESS METHODS, DATA MGMT ,STORAGE/COM, I/O  CONTROL PGMS\n31SUPPORT PGMS (LINK EDIT, LOADER, UTILITIES, DEMF, EREP)\n32STORAGE MANAGEMENT, HSM, DFDSS, DASD STORAGE\n33SORT/MERGE ( IBM AND SYNCSORT )\n34SYS PLANNING, INSTALL, GENERATION, ADMIN, CUSTOMIZATION               SMF\n35EMULATION, SIMULATION (CATALOGUED BY HOST SYSTEM)\n36MVS CONTROL PGM (E.G. SUPRV, JCL, IPL, JOB MGT, DATA AREAS,CHECKPOINT)\n37MVS DIAGNOSIS, PROBLEM DETER, AUDITING, SERV AIDS, IPCS\n38ACF/TCAM\n39TIME SHARING, INTERACTIVE SYSTEM (TSO, ISPF/PDF, TSO/E, ETC)\n40OPERATIONS(E.G., MESSAGES, CODES, APPLICATION DEVELOPEMENT)\n41STATISTICAL ANALYSIS SYSTEM ( SAS )\n42NETWORK COMM SOFTWARE\n43JOB ENTRY SUBSYSTEM ( JES2 )\n44GRAPHICS SOFTWARE (GDDM,ETC)\n45STORAGE TECHNOLOGY CORPORATION( HARDWARE AND SOFTWARE )\n46MEMOREX  CORPORATION\n47PERFORMANCE AND TUNING, RMF\n48DFP, DSF, GRS\n49ACF/VTAM\n50DB/DC (CICS, IMS, ACF, GIS, DL/I, ...)\n52XEROX CORPORATION ( HARDWARE AND SOFTWARE )\n53UCCEL CORPORATION ( UCC1-TMS, UCC9 )\n54INFOMATICS CORPORATION ( MARKIV )\n55ONLINE BUSINESS SYSTEMS ( WYLBUR )\n57SECURITY SYSTEMS (RACF, ETC)\n58PACE TECHNOLOGY ( KOMMAND )\n59LEVI, RAY, AND SHROUP ( VTAM PRINT SYSTEM )\n60INDUSTRIES - GENERAL\n62CONSULTANTS\n77INNOVATION DATA PROCESSING (FDR,FDRDSF,FDR/ABR,FATAR,FATS)\n79CROSS-INDUSTRY (SEE ALSO 80-83 FOR SELECTIONS)\n80CROSS-INDUSTRY - OFFICE APPLICATIONS\n81CROSS-INDUSTRY - MANAGEMENT, PLANNING, PROJECT CONTROL\n82CROSS-INDUSTRY - MATHEMATICS AND SCIENCE\n83CROSS-INDUSTRY - SIMULATION\n87EDUCATION - COURSE CATALOGS\n90PACE TECHNOLOGY ( KOMMAND )\n91LEVI, RAY, AND SHROUP ( VTAM PRINT SYSTEM )\n92INFOMATICS CORPORATION ( MARKIV )\n93ONLINE BUSINESS SYSTEMS ( WYLBUR )\n94SPSS-X\n95EWS (EARLY WARNING SYSTEM)\n97PTF (PROGRAM TEMPORARY FIX) LISTINGS\n99SCP PROGRAM LISTINGS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SLSSPRT": {"ttr": 9489, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "000010 IDENTIFICATION DIVISION.                                               84\n000020 PROGRAM-ID.           SLSSPRT.                                         05\n000030 AUTHOR.               CPT PETERSEN.\n000040 INSTALLATION.         AFISC/ADDS NORTON AFB CA  AV 876 6681\n000050 DATE-WRITTEN.         FEB 12,1985\n000060 DATE-COMPILED.\n000070 REMARKS.\n000080\n000090     TITLE       SLSS DATA ENTRY SYSTEM\n000100\n000110     FUNCTION    PROVIDE DATA PRINT BY SUBJECT CAPABILITY FOR THE\n000120                 SLSS LIBRARY SYSTEM.\n000130\n000140     SOURCE      LOCATED AT TXTJJP.SOURCE.DATA(SLSSPRNT)\n000150\n000160     LMOD        LOCATED AT SYS1.SPROGLIB(SLSSPRNT)\n000170\n000180 ENVIRONMENT DIVISION.\n000190 INPUT-OUTPUT SECTION.\n000200 FILE-CONTROL.\n000210     SELECT SORT-FILE ASSIGN TO UT-S-SORTFILE.\n000220     SELECT PRINT-FILE ASSIGN TO UT-S-PRNTFILE.\n000230     SELECT SUBJECTS-FILE ASSIGN TO UT-S-SUBJECTS.\n000240     SELECT MANUALS-IN ASSIGN TO UT-S-MANUALS.\n000250\n000260 DATA DIVISION.\n000270 FILE SECTION.\n000280 FD  MANUALS-IN\n000290     RECORDING MODE IS F\n000300     BLOCK CONTAINS 0 RECORDS\n000310     LABEL RECORDS ARE STANDARD\n000320     DATA RECORD IS MANUAL-REC.\n000330 01  MANUAL-REC               PIC X(80).\n000340\n000350 FD  SUBJECTS-FILE\n000360     RECORDING MODE IS F\n000370     BLOCK CONTAINS 0 RECORDS\n000380     LABEL RECORDS ARE STANDARD\n000390     DATA RECORD IS SUBJECT-REC.\n000400 01  SUBJECT-REC               PIC X(80).\n000410\n000420 FD  PRINT-FILE\n000430     RECORDING MODE IS F\n000440     BLOCK CONTAINS 0 RECORDS\n000450     LABEL RECORDS ARE STANDARD\n000460     DATA RECORD IS P-REC.\n000470 01  P-REC                     PIC X(133).\n000480\n000490 SD  SORT-FILE\n000500     DATA RECORD IS SORT-REC.\n000510 01  SORT-REC.\n000520     02  SORT-MANID            PIC X(9).\n000530     02  SORT-MANDASH          PIC XX.\n000540     02  SORT-MAN-STATUS       PIC X.\n000550     02  SORT-BOOK-NUMBER      PIC X(4).\n000560     02  SORT-MAN-SUBJECT      PIC XX.\n000570     02  SORT-TNL              PIC X.\n000580     02  SORT-MAN-NAME         PIC X(59).\n000590     02  FILLER                PIC XX.\n000600\n000610 WORKING-STORAGE SECTION.\n000620 77  PAGE-CNTR                 PIC 9(6)  COMP-3 VALUE 0.\n000630 77  SORT-EOF                  PIC X     VALUE '0'.\n000640 77  SUBJECT-EOF               PIC X     VALUE '0'.\n000650 77  SUBJECT-FOUND             PIC X     VALUE '0'.\n000660 77  SAVE-SUBJECT-CODE         PIC XX    VALUE SPACES.\n000670 77  LINE-COUNT                PIC 9(3)  COMP-3 VALUE 0.\n000680\n000690 01  SUBJECT-NAMES.\n000700     02  SUBJECT-CODE          PIC XX.\n000710     02  SUBJECT-NAME          PIC X(78).\n000720\n000730 01  PRINT-REC.\n000740     02  FILLER                PIC X     VALUE SPACE.\n000750     02  PRINT-BOOK-NUMBER     PIC X(4)  VALUE SPACES.\n000760     02  FILLER                PIC X     VALUE SPACE.\n000770     02  PRINT-MANID           PIC X(9)  VALUE SPACES.\n000780     02  FILLER                PIC X     VALUE '-'.\n000790     02  PRINT-MANDASH         PIC XX    VALUE SPACES.\n000800     02  FILLER                PIC XX    VALUE SPACES.\n000810     02  PRINT-MAN-SUBJECT     PIC XX    VALUE SPACES.\n000820     02  FILLER                PIC XXX   VALUE SPACES.\n000830     02  PRINT-TNL             PIC X     VALUE SPACE.\n000840     02  FILLER                PIC XXX   VALUE SPACES.\n000850     02  PRINT-MAN-STATUS      PIC X     VALUE SPACE.\n000860     02  FILLER                PIC X     VALUE SPACE.\n000870     02  PRINT-MAN-NAME        PIC X(59) VALUE SPACES.\n000880     02  FILLER                PIC X(43) VALUE SPACES.\n000890\n000900 01  HEADER2-REC.\n000910     02  FILLER                PIC X     VALUE '1'.\n000920     02  FILLER                PIC X(51) VALUE\n000930     'SYSTEM LIBRARY SUBSCRIPTION SERVICE SUBJECT LISTING'.\n000940     02  FILLER                PIC X(5)  VALUE SPACES.\n000950     02  PRINT-DATE            PIC X(8)  VALUE SPACES.\n000960     02  FILLER                PIC X(7)  VALUE ' PAGE: '.\n000970     02  PAGE-NUMBER           PIC ZZZZZ9.\n000980     02  FILLER                PIC X(55) VALUE SPACES.\n000990\n001000 01  HEADER3-REC.\n001010     02  FILLER                PIC X     VALUE '0'.\n001020     02  FILLER                PIC X(9)  VALUE 'SUBJECT:'.\n001030     02  PRINT-SUBJECT         PIC X(78) VALUE SPACES.\n001040     02  FILLER                PIC X(45) VALUE SPACES.\n001050\n001060 01  HEADER4-REC.\n001070     02  FILLER                PIC X     VALUE '0'.\n001080     02  FILLER                PIC X(36) VALUE\n001090     'BOOK   MANUAL #   SUBJ TNL ST   NAME'.\n001100     02  FILLER                PIC X(96) VALUE SPACES.\n001110\n001120 01  HEADER5-REC.\n001130     02  FILLER                PIC X     VALUE '0'.\n001140     02  FILLER                PIC X(132) VALUE SPACES.\n001150\n001160 PROCEDURE DIVISION.\n001170 1000-INITIALIZE.\n001180\n001190*    SORT RECORDS\n001200\n001210     SORT SORT-FILE ON ASCENDING KEY SORT-MAN-SUBJECT\n001220                    SORT-MANID   SORT-MANDASH\n001230                    USING MANUALS-IN\n001240                    OUTPUT PROCEDURE SORT-OUT.\n001250\n001260     STOP RUN.\n001270\n001280 SORT-OUT SECTION.\n001290     OPEN OUTPUT PRINT-FILE.\n001300     OPEN INPUT SUBJECTS-FILE.\n001310     MOVE CURRENT-DATE TO PRINT-DATE.\n001320     PERFORM RETURN-SORT.\n001330     PERFORM PRINT-SORT UNTIL SORT-EOF = '1'.\n001340     CLOSE PRINT-FILE.\n001350     CLOSE SUBJECTS-FILE.\n001360 SORT-OUT-EXIT. EXIT.\n001370\n001380 RETURN-SORT.\n001390     RETURN SORT-FILE AT END MOVE '1' TO SORT-EOF.\n001400\n001410 PRINT-SORT.\n001420     IF SORT-MAN-SUBJECT NOT = SAVE-SUBJECT-CODE\n001430        THEN MOVE '0' TO SUBJECT-FOUND\n001440             MOVE SORT-MAN-SUBJECT TO SAVE-SUBJECT-CODE\n001450             PERFORM READ-SUBJECT-FILE UNTIL SUBJECT-FOUND = '1'\n001460             PERFORM PRINT-HEADERS.\n001470     MOVE SORT-MANID       TO PRINT-MANID.\n001480     MOVE SORT-MANDASH     TO PRINT-MANDASH.\n001490     MOVE SORT-MAN-NAME    TO PRINT-MAN-NAME.\n001500     MOVE SORT-MAN-STATUS  TO PRINT-MAN-STATUS.\n001510     MOVE SORT-BOOK-NUMBER TO PRINT-BOOK-NUMBER.\n001520     MOVE SORT-MAN-SUBJECT TO PRINT-MAN-SUBJECT.\n001530     MOVE SORT-TNL         TO PRINT-TNL.\n001540     ADD 1 TO LINE-COUNT.\n001550     IF LINE-COUNT > 45 THEN PERFORM PRINT-HEADERS\n001560                             MOVE 1 TO LINE-COUNT.\n001570     WRITE P-REC FROM PRINT-REC.\n001580     PERFORM RETURN-SORT.\n001590\n001600 READ-SUBJECT-FILE.\n001610     IF SUBJECT-EOF NOT = '1'\n001620        THEN IF SUBJECT-CODE < SORT-MAN-SUBJECT\n001630        THEN READ SUBJECTS-FILE INTO SUBJECT-NAMES AT END\n001640             MOVE '1' TO SUBJECT-EOF.\n001650     IF SUBJECT-EOF = '1'\n001660        THEN MOVE HIGH-VALUES TO SUBJECT-CODE\n001670             MOVE SPACES TO SUBJECT-NAME.\n001680     IF SUBJECT-CODE > SORT-MAN-SUBJECT\n001690        THEN MOVE SPACES TO PRINT-SUBJECT\n001700             MOVE '1' TO SUBJECT-FOUND.\n001710     IF SUBJECT-CODE = SORT-MAN-SUBJECT\n001720        THEN MOVE '1' TO SUBJECT-FOUND\n001730             MOVE SUBJECT-NAME TO PRINT-SUBJECT.\n001740\n001750 PRINT-HEADERS.\n001760     ADD 1 TO PAGE-CNTR.\n001770     MOVE PAGE-CNTR TO PAGE-NUMBER.\n001780     WRITE P-REC FROM HEADER2-REC.\n001790     WRITE P-REC FROM HEADER3-REC.\n001800     WRITE P-REC FROM HEADER4-REC.\n001810     WRITE P-REC FROM HEADER5-REC.\n001820     MOVE 0 TO LINE-COUNT.\n001830\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SLSSPRT$": {"ttr": 9493, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x853?\\x00\\x855\\x8f\\x13$\\x00\\x07\\x00\\n\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1985-11-29T00:00:00", "modifydate": "1985-12-24T13:24:00", "lines": 7, "newlines": 10, "modlines": 0, "user": "SS02JDM"}, "text": "//COBOL        EXEC COBUCL\n//SYSPRINT DD DUMMY\n//SYSIN    DD DSN=SS.SS02.MVS.SADSC.TSOSRC(SLSSPRT),DISP=SHR\n//LKED.SYSLMOD DD DSN=SYS1.TEMPLIB,DISP=SHR,SPACE=\n//LKED.SYSIN DD *\n NAME SLSSPRT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SORT#C": {"ttr": 9729, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x00\\x00\\x00\\x84 \\x8f\\x00\\x99\\x19\\x9f\\x13\\x02\\x00>\\x00\\x1e\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "1984-07-26T00:00:00", "modifydate": "1999-07-18T13:02:00", "lines": 62, "newlines": 30, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      ISPF/PDF CLIST FOR DOING INTERACTIVE SORTS        */\n/*      04/30/99 - JDM - DRIVE DIALOG WITH CLIST          */\n/*--------------------------------------------------------*/\nCONTROL  NOMSG NOLIST NOFLUSH PROMPT\nIF  &DEBUG \u00ac= &STR()  THEN   +\n    CONTROL MSG LIST SYMLIST CONLIST\nISPEXEC CONTROL ERRORS RETURN\nFREE FI(SYSPRINT SYSIN SYSOUT SORTIN SORTOUT    +\n        SORTWK01 SORTWK02 SORTWK03 SORTWK04)\nALLOC FI(SYSOUT) DUMMY\nISPEXEC VGET (SDSNIN,SDSNOUT,CC1)\n/*--------------------------------------------------------*/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC ADDPOP COLUMN(1) ROW(1)\n   ISPEXEC DISPLAY PANEL(SORT#P) CURSOR(SDSNIN)\n   SET &RC = &LASTCC\n   ISPEXEC REMPOP\n   IF &RC = 8 THEN GOTO ALLDONE\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ALLOC FI(SORTIN) DA(&SDSNIN) SHR\n   ALLOC FI(SORTOUT) DA(&SDSNOUT) SHR\n   ALLOC FI(SYSPRINT) DA(*)\n   ISPEXEC FTOPEN TEMP\n   ISPEXEC FTINCL SORT#S\n   ISPEXEC FTCLOSE\n   ISPEXEC VGET   ZTEMPF\n   ALLOC FI(SYSIN) DA('&ZTEMPF') SHR REUSE\n   WRITE\n   WRITE     *-------------------------*\n   WRITE     *                         *\n   WRITE     *   SORT BEING INVOKED    *\n   SET &LASTCC = 0\n   /* ------------------------------------------------- */\n   /*      INVOKE THE FRONT-END FOR SORT SINCE WE       */\n   /*      DO NOT WANT THEM TO USE THE TSO \"CALL\"       */\n   /* ------------------------------------------------- */\n   SORTLNK\n   IF &LASTCC  = 0 THEN  +\n      DO\n      WRITE     *  SORT WAS SUCCESSFUL    *\n      END\n   ELSE +\n      DO\n      WRITE     *  SORT WAS UNSUCCESSFUL  *\n      END\n      WRITE     *      SORT ENDED         *\n      WRITE     *-------------------------*\n      WRITE\n      GOTO LOOP\nALLDONE:  +\n  FREE FI(SYSOUT SORTIN SORTOUT    +\n        SORTWK01 SORTWK02 SORTWK03 SORTWK04)\n  ALLOC FI(SYSIN)    DA(*) REUSE\n  ALLOC FI(SYSPRINT) DA(*) REUSE\n  EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SORT#P": {"ttr": 9731, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x00\\x00\\x84 \\x8f\\x00\\x99\\x17/\\x07(\\x00\"\\x00%\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1984-07-26T00:00:00", "modifydate": "1999-06-21T07:28:00", "lines": 34, "newlines": 37, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(64,16) CMD(ZCMD)\n+\n+   COMMAND%===>_ZCMD                                          +\n+\n+Sort Input Data Set Name:\n+\n+  DSN Input%==>_SDSNIN                                        +\n+\n+Sort Output Data Set Name: different from the input dsname.\n+\n+ DSN Output%==>_SDSNOUT                                       +\n+\n% SORT CONTROL CARD:\n+\n+ SORT FIELDS=(_CC1                                           +)\n+\n+\n)INIT\n .CURSOR = SDSNIN\n &ZWINTTL = 'Tool Box: Simple Foreground SORT'\n &CC1 = TRANS (&CC1 ' ',' ' *,*)\n)PROC\n VER (&CC1,NONBLANK)\n VER (&SDSNIN,NONBLANK)  VER (&SDSNIN,DSNAME)\n VER (&SDSNOUT,NONBLANK)  VER (&SDSNOUT,DSNAME)\n IF  (&SDSNOUT = &SDSNIN)\n      &SDSNOUT = &Z\n VER (&SDSNOUT,NONBLANK)  VER (&SDSNOUT,DSNAME)\n &SEL = 'CMD(%SORT#C)'\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SORT#S": {"ttr": 9733, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x84 \\x8f\\x00\\x862\\x9f\\x112\\x00\\x02\\x00\\x02\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1984-07-26T00:00:00", "modifydate": "1986-11-25T11:32:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "$354JDM"}, "text": " SORT FIELDS=(&CC1)\n END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SORTLNK": {"ttr": 9735, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x98\\x02_\\x00\\x98\\x02\\x7f\\x08\\x18\\x00^\\x00T\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1998-01-25T00:00:00", "modifydate": "1998-01-27T08:18:00", "lines": 94, "newlines": 84, "modlines": 0, "user": "S218"}, "text": "         TITLE 'FRONT-END FOR SORT'\n*---------------------------------------------------------------------*\n*                                                                     *\n*       SOMETIMES SYSTEMS PLACE THE SORT MODULE IN A LINKLIST         *\n*       LIBRARY. IN THIS CASE WE WANT TO DO A SORT IN TSO AND         *\n*       DO NOT WANT TO USE THE TSO 'CALL' COMMAND.  TO USE THE        *\n*       CALL COMMAND, YOU NEED TO GIVE THEM SECURITY ACCESS TO        *\n*       THE CALLING LIBRARY (NO WAY). SO THIS IS A BETTER             *\n*       ALTERNATIVE.                                                  *\n*                                                                     *\n*                                                                     *\n*       JIM MARSHALL, CAPT, USAF (RET)                                *\n*       DEPARTMENT OF TREASURY/FINANCIAL MANAGEMENT SERVICE           *\n*                                                                     *\n* INSTALLED:  05/01/91                                                *\n*                                                                     *\n* CHANGE LOG: 01/24/98 - JDM1 - ON NEW SYSTEM, DFSORT IS NOW IN LPA.  *\n*                               \"LINK\" WOULD S0C4. NOW USE IKJEFTSR.  *\n*---------------------------------------------------------------------*\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nSP000    EQU   0\n         TITLE 'SORTLNK - FRONT END FOR SORTING'\nSORTLNK  CSECT\nSORTLNK  AMODE 24\nSORTLNK  RMODE 24\n         SAVE  (14,12),,SORTLNK_&SYSDATE &SYSTIME\n         LR    R12,R15\n         USING SORTLNK,R12\n         LA    R1,SAVE\n         ST    R13,SAVE+4\n         ST    R1,8(R13)\n         LR    R13,R1\n         SPACE\n*-------------------------------------------------------------------*\n*        SETUP FOR GOING OFF TO TSO/E SERVICE ROUTINE IKJEFTSR\n*-------------------------------------------------------------------*\n         SPACE\n         L     R15,CVTPTR\n         L     R15,CVTTVT(,R15)\n         L     R15,TSVTASF-TSVT(,R15)\n         CALL  (15),(FLAGS,PGM,PGMLEN,RETCODE,REASONC,ABENDCD,         X\n               PARMLIST),VL\n         LTR   R15,R15\n         BNZ   ABORT1\n         SPACE\n*--------------------------------------------------------------------*\n*        NOW WE CLEANUP AFTER OURSELVES AND GO HOME.\n*--------------------------------------------------------------------*\n         SPACE\n         L     R13,SAVE+4\n         RETURN (14,12),RC=(15)\nABORT1   ABEND 1\n         SPACE\n         DC    C'SYSTEMS PROG TOOL BOX'\n         LTORG\nSAVE     DS    18F\nFLAGS    DS    0F\n         DC    XL2'00'             MUST BE ZEROS\n         DC    XL1'00'             ERROR PROCESSING FLAG BYTE\n*                                    00 ==> NO DUMP IF ABEND\n*                                    01 ==> DUMP TAKEN\n         DC    XL1'02'             FUNCTION FLAG BYTE\n*                                    01 ==> TSO CMD IS BEING INVOKED\n*                                    02 ==> PGM BEING INVOKED\n*                                    05 ==> CLIST\nPGM      DC    C'SORT'\nPGMLEN   DC    F'4'\nRETCODE  DS    F\nREASONC  DS    F\nABENDCD  DS    F\nPGMPARM1 DC    H'00'  18\n         DC    CL24'DYNALLOC=(SYSDA,1)'\nPARMLIST CALL ,(PGMPARM1),VL,MF=L\n         SPACE\nCVTPTR   EQU   16\nCVTTVT   EQU   X'9C'\n         IKJTSVT\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SORTLNK$": {"ttr": 9738, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x00\\x00\\x91\\x12\\x8f\\x00\\x98\\x02\\x7f\\x08\\x15\\x00\\x11\\x00\\x11\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1991-05-08T00:00:00", "modifydate": "1998-01-27T08:15:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "S218"}, "text": "//S218JDM$ JOB (S4304OVH),'BIN014/MARSHALL',CLASS=A,\n//         MSGCLASS=S,MSGLEVEL=(1,1),NOTIFY=S218\n/*XEQ      FMSROC1E\n//*--------------------------------------------------------------*\n//*        INSTALL OF THE 'SORTLNK' TSO CMD                      *\n//*--------------------------------------------------------------*\n//SORTLNK  EXEC ASMHCL,COND=(0,NE),\n//         PARM.C='OBJECT,NODECK,ALIGN,TERM,LIST,NORENT',\n//         PARM.L='MAP,LIST,NORENT'\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.AMODGEN,DISP=SHR\n//SYSTERM  DD SYSOUT=*\n//SYSIN    DD DSN=S218.UTIL.FILE(SORTLNK),DISP=SHR\n//L.SYSLMOD DD DISP=SHR,UNIT=,SPACE=,DCB=,DSN=S218.UTIL.LOAD\n//SYSIN   DD *\n NAME SORTLNK(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TMS##PR": {"ttr": 9740, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x843/\\x00\\x87\\x16o\\x08C\\x00c\\x00 \\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1984-11-27T00:00:00", "modifydate": "1987-06-15T08:43:00", "lines": 99, "newlines": 32, "modlines": 0, "user": "$354JDM"}, "text": "THIS IS DOCUMENTATION FOR MY TMS# MEMBERS.\n\n   We have installed UCCEL's TMS and it works great for tapes that\nare controlled internally. i.i. they never leave the computer center and\nare created label=SL.  But how do you account for all those little\ntapes IBM and other vendors send to you ??????  Being in the USAF, they\nhave rules as to where tapes can go (must be the tape library) and they\nmust be accounted for !!!!!!    So consider this:\n\n    1. VENDORS SEND US TAPES (SL AND NL) TO BE USED AT 2ISG TO INSTALL\n       PRODUCTS. WE USUALLY LIKE TO KEEP THEM IN OUR AREA OR DESK JUST\n       BECAUSE WE DO NOT TRUST SOMEONE ELSE.\n    2. USER'S OF THE COMPUTER CENTER SEND IN TAPES TO USE WITH THEIR\n       JOBS. USER'S ALSO WANT YOU TO LOAN (LEASE IN COMMERICAL CONCERN)\n       THEM A TAPE TO SHIP SOME DATA SOMEPLACE.\n    3. USAF REQUIRES THAT YOU TRACK ALL THOSE TAPES.\n\n   Management was hot to have TMS control everything (after all we spent\nbig bucks). Well after thinking about it and knowing something about TMS\nyou know that to let TMS truely control all tapes would be a nightmare.\nWhat management was really asking for was having  TMS manage the\nfunction - a tape comes in, is tracked, etc.\n\n   So while in deep thought (CHEVAS-REGAL), it came to me, follow this:\n\n    1. Define to TMS a series of tapes say X00001-X00500 that will be\n       used in the TMS world for MVS system tapes. Define Y00001-Y00500\n       for VM system tapes, and Z00001-Z00500 for program products tapes\n       like SAS, COBOL, ETC.\n\n    2. Modify the UCCEL 'TMSUPDTE' To change the batch update program\n       so it does not produce a LOGO on the listing.  We put it in a new\n       member called 'SADUPDTE' out with the change. When you execute\n       TMSUPDTE interactively a full page banner page comes out to the\n       screen and is a pain. So if you comment out that \"PUT\" in the\n       program, it does not appear.\n\n    3. Now we can invoke 'SADUPDTE' (modified TMSUPDTE) using a CALL\n       TSO command and build the batch update cards with CLISTS or ISPF\n       skeletons.\n\n    4. We now can use the TMS database for record keeping on the\n       system tapes and  we have reports !!!!!\n\n    5. We can also expire in the same way.  Now we can use TMS REPORT\n       function to produce pretty lists of tapes. There is now peace\n       with our Air Force management !!!!!\n\n    6. Now we took the concept one step further for users' tapes that\n       come into the computing center. We can have them tracked and\n       when they are due to leave us, we have shipping invoices\n       created and more REPORTS !!   How we do that is basically\n       described as follows ( if you want to do the same kind of\n       procedure you need to go through each panel and clist to\n       make sure it is for you - I designed it as general as )\n       possible):\n\n       a. allocate the INFO file as a FB/80/6160 PDS to hold the\n          user address information.\n\n       b. create a TMS series of tapes that will never be known to\n          the users; we did C00001-C00900. Now when tapes come\n          in we assigned externally a label of T00001 to T00900.\n          Yes, the external label does not match the database series.\n          If they matched, then TMS would get very possessive when\n          they called for the tapes by database number. This way\n          the users will always have to code LABEL=EXPDT=98000 for\n          their foreign tapes.\n\n       c. ISPF/PDF panels take care of checking in the tapes and\n          expiring the tapes and creating invoices (is easy to\n          design your own).\n\n       d. If I would have been more knowledgeable in writing ISPF\n          applications I would have replaced the INFO file with\n          a TABLE.\n\n       e. The most interesting part of this whole thing is the\n          interactive updating ability by constructing the control\n          cards with skeletons and feeding the cards to a modified\n          version of TMSUPDTE.\n\n    7. Now a final word about the reports or documents. Back in 1982, I\n       started to use a product called VPS (VTAM Print System) or it\n       is also called JES/3270. It allowed us to put JES2 (or JES3)\n       sysout files to IBM 328X type printers. Sure beats installing\n       IBM 3777s everywhere on separate lines. With the number of\n       IBM 328X printers out there and IBM compatible ones, management\n       was hot to use them. Also VM/RSCS supported IBM 328X type\n       printers and I couldn't be outdone. So most of the reports and\n       shipping documents are being sent directly to an IBM 3287 in\n       the tape librarian's area.\n\n       Since that time, a number of competing products have come out\n       to challenge VPS. IBM even has one called JES328X that is very\n       inexpensive. Remember you get what you pay for  !!!!!  With\n       the number of PCs and attached printers, most have their\n       printers look like IBM 3287s. So I really would investigate\n       the capability.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TMS#CMT": {"ttr": 9743, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x84&\\x8f\\x00\\x84&\\x8f\\x13\\x05\\x00\\n\\x00\\n\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1984-09-24T00:00:00", "modifydate": "1984-09-24T13:05:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "SS02JDM"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------------*/\n/*      PDF CLIST  FOR TSO COMMAND 'TMS'                        */\n/*--------------------------------------------------------------*/\nCONTROL NOLIST NOMSG NOFLUSH PROMPT\nIF &DEBUG NE &STR() THEN +\n  CONTROL LIST MSG NOFLUSH PROMPT CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nTMS\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TMS#CM1": {"ttr": 9745, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x00\\x00\\x84)\\x1f\\x00\\x86\\x08\\x7f\\x14H\\x000\\x00\\xc7\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xd9\\xe6@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "1984-10-17T00:00:00", "modifydate": "1986-03-28T14:48:00", "lines": 48, "newlines": 199, "modlines": 0, "user": "SS02JRW"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      REGISTER AN X-SERIES TAPE FOR TMS.                */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST NOMSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\n/*--------------------------------------------------------*/\n/*      SET UP THE VARIABLES                              */\n/*--------------------------------------------------------*/\nISPEXEC  VGET (ZJDATE ZTIME)\nSET  &D1 = &SUBSTR(1:2,&ZJDATE)\nSET  &D2 = &SUBSTR(4:6,&ZJDATE)\nSET  &T1 = &SUBSTR(1:2,&ZTIME)\nSET  &T2 = &SUBSTR(4:5,&ZTIME)\nSET &CDATE = &STR(&D1&D2)\nSET &CTIME = &STR(&T1&T2)\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   FREE   FI(SYSIN)\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(TMS#PM1) CURSOR(TAPEN)\n   IF &LASTCC = 8 THEN GOTO ALLDONE\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GET THE INFO FROM THE PANEL                       */\n   /*--------------------------------------------------------*/\n   ISPEXEC  VGET  (&TAPEN &DSNAM ZUSER)\n   ISPEXEC  FTOPEN   TEMP\n   ISPEXEC  FTINCL   TMS#SM1\n   ISPEXEC  FTCLOSE\n   ISPEXEC  VGET  ZTEMPF\n   ALLOC  FI(SYSIN) DA('&ZTEMPF') OLD\n   ALLOC  FI(TMSRPT) DA(*)\n   CALL 'SYS1.SADSC.TMSV4L79.LOADLIB(SADUPDTE)' 'NODSN'\n   GOTO LOOP\nALLDONE: +\nFREE   FI(SYSIN)\nFREE   FI(TMSRPT)\nFREE   DA('SYS1.SADSC.TMSV4L79.LOADLIB')\nALLOC  FI(SYSIN) DA(*)\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TMS#CM2": {"ttr": 9747, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x84)\\x1f\\x00\\x86\\x08\\x7f\\x14I\\x000\\x00)\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xd9\\xe6@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1984-10-17T00:00:00", "modifydate": "1986-03-28T14:49:00", "lines": 48, "newlines": 41, "modlines": 0, "user": "SS02JRW"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      REGISTER AN Y-SERIES TAPE FOR TMS.                */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST NOMSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\n/*--------------------------------------------------------*/\n/*      SET UP THE VARIABLES                              */\n/*--------------------------------------------------------*/\nISPEXEC  VGET (ZJDATE ZTIME)\nSET  &D1 = &SUBSTR(1:2,&ZJDATE)\nSET  &D2 = &SUBSTR(4:6,&ZJDATE)\nSET  &T1 = &SUBSTR(1:2,&ZTIME)\nSET  &T2 = &SUBSTR(4:5,&ZTIME)\nSET &CDATE = &STR(&D1&D2)\nSET &CTIME = &STR(&T1&T2)\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   FREE   FI(SYSIN)\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(TMS#PM2) CURSOR(TAPEN)\n   IF &LASTCC = 8 THEN GOTO ALLDONE\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GET THE INFO FROM THE PANEL                       */\n   /*--------------------------------------------------------*/\n   ISPEXEC  VGET  (&TAPEN &DSNAM ZUSER)\n   ISPEXEC  FTOPEN   TEMP\n   ISPEXEC  FTINCL   TMS#SM2\n   ISPEXEC  FTCLOSE\n   ISPEXEC  VGET  ZTEMPF\n   ALLOC  FI(SYSIN) DA('&ZTEMPF') OLD\n   ALLOC  FI(TMSRPT) DA(*)\n   CALL 'SYS1.SADSC.TMSV4L79.LOADLIB(SADUPDTE)' 'NODSN'\n   GOTO LOOP\nALLDONE: +\nFREE   FI(SYSIN)\nFREE   FI(TMSRPT)\nFREE   DA('SYS1.SADSC.TMSV4L79.LOADLIB')\nALLOC  FI(SYSIN) DA(*)\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TMS#CM3": {"ttr": 9749, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x00\\x00\\x84)\\x1f\\x00\\x86\\x08\\x7f\\x14C\\x001\\x00)\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1984-10-17T00:00:00", "modifydate": "1986-03-28T14:43:00", "lines": 49, "newlines": 41, "modlines": 0, "user": "SS02JDM"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      REGISTER AN Z-SERIES TAPE FOR TMS.                */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST NOMSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\n/*--------------------------------------------------------*/\n/*      SET UP THE VARIABLES                              */\n/*--------------------------------------------------------*/\nISPEXEC  VGET (ZJDATE ZTIME)\nSET  &D1 = &SUBSTR(1:2,&ZJDATE)\nSET  &D2 = &SUBSTR(4:6,&ZJDATE)\nSET  &T1 = &SUBSTR(1:2,&ZTIME)\nSET  &T2 = &SUBSTR(4:5,&ZTIME)\nSET &CDATE = &STR(&D1&D2)\nSET &CTIME = &STR(&T1&T2)\nSET &PRJC = &STR(SS06)\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   FREE   FI(SYSIN)\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(TMS#PM3) CURSOR(TAPEN)\n   IF &LASTCC = 8 THEN GOTO ALLDONE\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GET THE INFO FROM THE PANEL                       */\n   /*--------------------------------------------------------*/\n   ISPEXEC  VGET  (&TAPEN &DSNAM ZUSER &PRJC)\n   ISPEXEC  FTOPEN   TEMP\n   ISPEXEC  FTINCL   TMS#SM3\n   ISPEXEC  FTCLOSE\n   ISPEXEC  VGET  ZTEMPF\n   ALLOC  FI(SYSIN) DA('&ZTEMPF') OLD\n   ALLOC  FI(TMSRPT) DA(*)\n   CALL 'SYS1.SADSC.TMSV4L79.LOADLIB(SADUPDTE)' 'NODSN'\n   GOTO LOOP\nALLDONE: +\nFREE   FI(SYSIN)\nFREE   FI(TMSRPT)\nFREE   DA('SYS1.SADSC.TMSV4L79.LOADLIB')\nALLOC  FI(SYSIN) DA(*)\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TMS#CM4": {"ttr": 9751, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x84)\\x1f\\x00\\x86\\x08\\x7f\\x14I\\x00/\\x00)\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xd9\\xe6@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1984-10-17T00:00:00", "modifydate": "1986-03-28T14:49:00", "lines": 47, "newlines": 41, "modlines": 0, "user": "SS02JRW"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      EXPIRE A SYSTEM TAPE.                             */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\n/*--------------------------------------------------------*/\n/*      SET UP THE VARIABLES                              */\n/*--------------------------------------------------------*/\nISPEXEC  VGET (ZJDATE ZTIME)\nSET  &D1 = &SUBSTR(1:2,&ZJDATE)\nSET  &D2 = &SUBSTR(4:6,&ZJDATE)\nSET  &T1 = &SUBSTR(1:2,&ZTIME)\nSET  &T2 = &SUBSTR(4:5,&ZTIME)\nSET &CDATE = &STR(&D1&D2)\nSET &CTIME = &STR(&T1&T2)\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(TMS#PM4) CURSOR(T)\n   IF &LASTCC = 8 THEN GOTO ALLDONE\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   FREE   FI(SYSIN)\n   /*--------------------------------------------------------*/\n   /*      GET THE INFO FROM THE PANEL                       */\n   /*--------------------------------------------------------*/\n   ISPEXEC  VGET  (&T &TAPEN ZUSER)\n   ISPEXEC  FTOPEN   TEMP\n   ISPEXEC  FTINCL   TMS#SM4\n   ISPEXEC  FTCLOSE\n   ISPEXEC  VGET  ZTEMPF\n   ALLOC  FI(SYSIN) DA('&ZTEMPF') OLD\n   ALLOC  FI(TMSRPT) DA(*)\n   CALL 'SYS1.SADSC.TMSV4L79.LOADLIB(SADUPDTE)' 'NODSN'\n   GOTO LOOP\nALLDONE: +\nFREE   FI(SYSIN)\nFREE   FI(TMSRPT)\nFREE   DA('SYS1.SADSC.TMSV4L79.LOADLIB')\nALLOC  FI(SYSIN) DA(*)\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TMS#PM": {"ttr": 9985, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x84)\\x1f\\x00\\x840O\\x10!\\x00\\x1d\\x00)\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1984-10-17T00:00:00", "modifydate": "1984-10-30T10:21:00", "lines": 29, "newlines": 41, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+     %TMS  Maintenance Functions for Systems Programmers\n+\n%COMMAND ===>_ZCMD                                                             +\n%\n%   1+-%Register an X-series+tape for MVS.\n%   2+-%Register an Y-series+tape for VM.\n%   3+-%Register an Z-series+tape for Program Products.\n%   4+-%Expire+a tape for X, Y, or Z series tapes.\n%   T+- Invoke TMS inquiry program.\n%\n)INIT\n  .HELP = ISR00003\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n                1,'CMD(%TMS#CM1)'\n                2,'CMD(%TMS#CM2)'\n                3,'CMD(%TMS#CM3)'\n                4,'CMD(%TMS#CM4)'\n                T,'CMD(%TMS#CMT)'\n              ' ',' '\n                *,'?' )\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TMS#PM1": {"ttr": 9987, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x84)\\x1f\\x00\\x850_\\x085\\x00\\x18\\x00 \\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1984-10-17T00:00:00", "modifydate": "1985-11-01T08:35:00", "lines": 24, "newlines": 32, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+      % REGISTER AN X-SERIES TAPE FOR MVS +\n+\n+  ENTER\n+     TAPE NO%===>X_TAPEN+\n+\n+\n+  COST CODE%===> SS\n+  PROJ CODE%===> SS02\n+     DSNAME%===>_DSNAM                                       +\n+\n+\n+  NOTE: 1. THE DATASET NAME YOU GIVE WILL APPENDED TO 'SS.SS02.' +\n+        2. YOU WILL BE GIVEN AN EXPIRATION DATE OF 99365.        +\n+        3. YOU WILL BE GIVEN PROJ=SS02 AND  DSD=P999.            +\n)PROC\n VER (&TAPEN,RANGE,00001,00300)\n VER (&DSNAM,DSNAME)\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TMS#PM2": {"ttr": 9989, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x84)\\x1f\\x00\\x850_\\x086\\x00\\x19\\x00\\x14\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1984-10-17T00:00:00", "modifydate": "1985-11-01T08:36:00", "lines": 25, "newlines": 20, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+      % REGISTER AN Y-SERIES TAPE FOR VM  +\n+\n+     ENTER\n+     TAPE NO%===>Y_TAPEN+\n+\n+\n+\n+   COST CODE%===> SS\n+   PROJ CODE%===> SS11\n+      DSNAME%===>_DSNAM                                        +\n+\n+\n+  NOTE: 1. THE DATASET NAME YOU GIVE WILL APPENDED TO 'SS.SS11.' +\n+        2. YOU WILL BE GIVEN AN EXPIRATION DATE OF 99365.        +\n+        3. YOU WILL BE GIVEN PROJ=SS11 AND  DSD=P999.            +\n)PROC\n VER (&TAPEN,RANGE,00001,00300)\n VER (&DSNAM,DSNAME)\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TMS#PM3": {"ttr": 9991, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x84)\\x1f\\x00\\x841\\x9f\\x10G\\x00\\x18\\x00\\x14\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1984-10-17T00:00:00", "modifydate": "1984-11-14T10:47:00", "lines": 24, "newlines": 20, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+      % REGISTER AN Z-SERIES TAPE - PROGRAM PRODUCTS +\n+\n+   ENTER\n+   TAPE NO%===>Z_TAPEN+\n+\n+ COST CODE%===> SS                                   +\n+ PROJ CODE%===>_PRJC+\n+    DSNAME%===>_DSNAM                                            +\n+\n+  NOTE: 1. THE DATASET NAME YOU GIVE WILL BE CONSTRUCTED AS      +\n+           FOLLOWS -   COSTCODE.PROJCODE.DSNAME\n+        2. YOU WILL BE GIVEN AN EXPIRATION DATE OF 99365.        +\n+        3. DEFAULT PROJ CODE IS SS06 AND  DSD=P999.            +\n)PROC\n VER (&TAPEN,RANGE,00001,00300)\n VER (&PRJC,LIST,SS01,SS02,SS04,SS05,SS06,SS07,SS08,SS11)\n VER (&DSNAM,DSNAME)\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TMS#PM4": {"ttr": 9993, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x84)\\x1f\\x00\\x840O\\x10\"\\x00\\x14\\x00\\x14\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1984-10-17T00:00:00", "modifydate": "1984-10-30T10:22:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "SS02JDM"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+        % EXPIRE   X, Y, OR Z SERIES TAPE  +\n+\n+\n+\n+ ENTER  SERIES%===>_T+          ENTER X, Y OR Z\n+ ENTER TAPE NO%===>_TAPEN+      ENTER LAST 5 DIGITS\n+\n+\n+  NOTE:    THERE IS NO DSN VALIDATION, SO BE SURE OF THE NUMBER\n+           YOU WANT TO EXPIRE.\n)PROC\n VER (&T,LIST,X,Y,Z)\n VER (&TAPEN,RANGE,00001,00300)\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TMS#SM1": {"ttr": 9995, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x84)\\x1f\\x00\\x84)/\\x14\\x02\\x00\\x06\\x00\\x12\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1984-10-17T00:00:00", "modifydate": "1984-10-18T14:02:00", "lines": 6, "newlines": 18, "modlines": 0, "user": "SS02JDM"}, "text": "VOL X&TAPEN,SCRATCH\nREP CJOB=&ZUSER\nREP DSN=SS.SS02.&DSNAM\nREP EXPDT=99365,LABEL=01,VEND=IBM\nREP PROJ=SS02,DSD=P999\nREP CRTDT=&CDATE,CTIME=&CTIME\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TMS#SM2": {"ttr": 9997, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x84)\\x1f\\x00\\x84)/\\x14\\x03\\x00\\x06\\x00\\x05\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1984-10-17T00:00:00", "modifydate": "1984-10-18T14:03:00", "lines": 6, "newlines": 5, "modlines": 0, "user": "SS02JDM"}, "text": "VOL Y&TAPEN,SCRATCH\nREP CJOB=&ZUSER\nREP DSN=SS.SS11.&DSNAM\nREP EXPDT=99365,LABEL=01,VEND=IBM\nREP PROJ=SS11,DSD=P999\nREP CRTDT=&CDATE,CTIME=&CTIME\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TMS#SM3": {"ttr": 9999, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x84)\\x1f\\x00\\x840O\\t9\\x00\\x06\\x00\\x05\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1984-10-17T00:00:00", "modifydate": "1984-10-30T09:39:00", "lines": 6, "newlines": 5, "modlines": 0, "user": "SS02JDM"}, "text": "VOL Z&TAPEN,SCRATCH\nREP CJOB=&ZUSER\nREP DSN=SS.&PRJC..&DSNAM\nREP EXPDT=99365,LABEL=01,VEND=IBM\nREP PROJ=&PRJC,DSD=P999\nREP CRTDT=&CDATE,CTIME=&CTIME\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TMS#SM4": {"ttr": 10001, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x84)\\x1f\\x00\\x840O\\t\\x11\\x00\\x06\\x00\\x05\\x00\\x06\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1984-10-17T00:00:00", "modifydate": "1984-10-30T09:11:00", "lines": 6, "newlines": 5, "modlines": 6, "user": "SS02JDM"}, "text": "VOL &T&TAPEN\nVER EXPDT=99365\nREP LJOB=&ZUSER\nREP DSN=HEXZEROS\nREP PROJ='    ',DSD='    '\nREP EXPDT=&CDATE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ULXDOC": {"ttr": 10003, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00.\\x00.\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 46, "newlines": 46, "modlines": 0, "user": "BG@PRC"}, "text": " ISPF DISK SPACE INFORMATION PROGRAM            VERSION 1.1  APRIL 1991\n\n WRITTEN BY BILL GODFREY OF PRC INC., MCLEAN, VIRGINIA\n\n THIS PROGRAM DISPLAYS INFORMATION ABOUT AVAILABLE SPACE ON A DISK\n IN THE FORM OF ISPF PANELS.  INDEXED VTOCS ARE SUPPORTED.\n THE USER CAN OPTIONALLY DISPLAY A LIST OF ALL FREE EXTENTS.\n\n MEMBERS IN DISTRIBUTION LIBRARY:\n\n    ULXDOC   -  THIS DOCUMENTATION YOU ARE READING\n    ULXJ01   -  JCL TO ASSEMBLE AND LINK ULXL01\n    ULXL01   -  SOURCE CODE (ASSEMBLER LANGUAGE)\n    ULXP01   -  PANEL 1\n    ULXP02   -  PANEL 2\n    ULXP03   -  PANEL 3\n    ULXH02   -  HELP FOR PANEL 2\n    ULXM01   -  MESSAGES\n\n TO INSTALL,\n   1) ASSEMBLE AND LINK-EDIT ULXL01 (SAMPLE JCL IN ULXJ01)\n      INTO ONE OF THE FOLLOWING, AND NAME IT ULXL01.\n         A) A LINKLIST LIBRARY\n         B) LPALIB  (IN WHICH CASE AN IPL WITH CLPA IS REQUIRED)\n         C) ANY LIBRARY THAT IS ALLOCATED TO DDNAME ISPLLIB AT THE TIME\n            ISPF IS ENTERED.\n\n   2) COPY THE PANELS AND THE HELP INTO YOUR PANEL LIBRARY.\n\n   3) COPY THE MESSAGE MEMBER INTO YOUR ISPF MESSAGE LIBRARY.\n\n AT THIS POINT YOU CAN TEST IT USING THE 'DIALOG TEST' FACILITY OF\n ISPF.  FROM THE PRIMARY OPTION MENU, ENTER 7.1 AND THEN WHEN YOU GET\n THE 'INVOKE DIALOG FUNCTION' SELECTION MENU, ENTER 'ULXL01' ON THE\n 'INVOKE PROGRAM' PGM ===> LINE.\n\n IF IT WORKS, YOU CAN ADD IT TO YOUR PRIMARY OPTION MENU OR ONE OF THE\n THE UTILITY MENUS OR ONE OF YOUR OWN MENUS.  I WILL NOT ATTEMPT TO\n EXPLAIN HOW TO DO THAT HERE EXCEPT TO SAY THAT IT INVOLVES ADDING\n A STATEMENT THAT LOOKS LIKE THIS:\n        SPACE,'PGM(ULXL01)'\n TO THE ')PROC' SECTION OF ONE OF YOUR MENUS, AND YOU CAN CHANGE THE\n WORD 'SPACE' TO WHATEVER YOU WANT.\n\n AN EARLIER VERSION OF THIS PROGRAM BY THE SAME AUTHOR WAS DISTRIBUTED\n ON THE CBT TAPE (FILES 88 AND 137).\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ULXH02": {"ttr": 10005, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x18\\x00\\x18\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "BG@PRC"}, "text": "%TUTORIAL------------------- DISK SPACE INFORMATION ----------------------------\n+\n+  The disk space information panel shows how much space is available\n+  on a specified disk.\n+\n+  Cylinders available --------- The number of cylinders containing no\n+                                used tracks.\n+  Tracks available ------------ The number of unused tracks that are\n+                                in partially used cylinders.\n+  Total tracks available ------ The number of unused tracks including\n+                                all unused cylinders.\n+\n+  Extents of free space ------- An extent is a group of adjacent tracks.\n+                                This is the number of groups of unused\n+                                tracks on the volume.\n+\n+  Largest single extent ------- The largest group of adjacent unused\n+                                tracks.\n+\n+  DSCB's available in VTOC ---- The maximum number of additional data\n+                                sets that this volume can have. The\n+                                number of unused entries in the volume\n+                                table of contents.\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULXJ01": {"ttr": 10007, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x08\\x00\\x08\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "BG@PRC"}, "text": "//$USERID1 JOB (ACCT),'ASMFCL ULXL01'\n//* THIS JOB ASSEMBLES ULXL01 AND LINKS IT AS 'ULXL01'\n//ASMFCL EXEC ASMFCL,PARM.ASM='NODECK,OBJECT,NOXREF,NORLD',\n//             PARM.LKED='LIST,MAP,NCAL,RENT,REUS,REFR',\n//             COND.LKED=(0,NE,ASM)\n//ASM.SYSIN DD DSN=$USERID.LIB.SOURCE(ULXL01),DISP=SHR\n//LKED.SYSLMOD DD DSN=SYS2.CMDLIB(ULXL01),UNIT=,SPACE=,DISP=SHR\n//LKED.SYSIN   DD DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ULXL01": {"ttr": 10009, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x06s\\x06s\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 1651, "newlines": 1651, "modlines": 0, "user": "BG@PRC"}, "text": "         TITLE '   U L X L 0 1   '\n***********************************************************************\n*                                                                     *\n*        'ULXL01' - AN ISPF DIALOG SERVICES PROGRAM                   *\n*         FOR DISPLAYING AVAILABLE DISK SPACE.                        *\n*                                                                     *\n***********************************************************************\n         SPACE\n* WRITTEN BY BILL GODFREY, PRC INC.\n*  (PRC INC. OF MCLEAN, VIRGINIA, WAS FORMERLY PLANNING RESEARCH CORP.)\n* CURRENT INSTALLATION:\n*  NOAA (NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION),\n*  5200 AUTH ROAD, CAMP SPRINGS, MARYLAND 20746\n* DATE WRITTEN. MAY 24 1985.\n* DATE UPDATED. APRIL 25 1991.\n* ATTRIBUTES. RE-ENTRANT.\n* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.\n* REQUIRED PANELS.    ULXP01, ULXP02, ULXP03.\n* REQUIRED MESSAGES.  ULXM01.\n* REQUIRED CLISTS.    NONE.\n* MODULES LOADED. ISPEXEC.\n* DESCRIPTION.\n*         THIS SPF DIALOG PROGRAM DISPLAYS INFORMATION ABOUT\n*         AVAILABLE SPACE ON A DISK VOLUME, FROM THE FORMAT 5\n*         DSCB'S OR THE VTOC INDEX.\n*\n*         SOME OF THE VARIABLES THAT ARE VDEFINED ARE USED ONLY\n*         FOR DEBUGGING AND DO NOT APPEAR ON THE NORMAL PANEL.\n*         THEY COULD BE ADDED TO THE PANEL FOR DEBUGGING.\n*\n*         THE FIRST 3 CHARACTERS OF THE PANEL NAMES MAY BE\n*         OVERRIDDEN BY PASSING A PARM OF 'PFX=XXX'\n*         WHERE XXX ARE THE 3 NEW CHARACTERS.\n*         THIS ALSO OVERRIDES THE FIRST 3 CHARACTERS\n*         OF THE MESSAGE ID'S.  THE MESSAGE ID'S WITHIN THE\n*         MESSAGE MEMBER MUST CORRESPOND WITH THE MEMBER NAME,\n*         SO IF YOU RENAME A MESSAGE MEMBER YOU MUST CHANGE\n*         THE MESSAGE ID'S WITHIN THAT MEMBER.\n*\n* LOG OF CHANGES.\n*  15APR91 - RECOGNIZE 3390. USE LAST 2 BYTES OF DEVICES FOR ALT CYL.\n*            ADD XA UCB SCAN. CREATE VARIABLES ULXCPV ULXPCU.\n*\n* NOTE: AN EARLIER VERSION OF THIS PROGRAM, BY THE SAME AUTHOR, WAS\n*  DISTRIBUTED ON THE CBT TAPE (FILES 88 AND 137) WITH THE AUTHOR'S\n*  NAME REMOVED.\n*\n         SPACE\nULXL01   START\n         USING *,R10,R11\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'ULXL01 1.1 '\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n@PROLOG  STM   14,12,12(R13)       SAVE REGISTERS\n         LR    R10,R15             LOAD BASE REGISTER\n         LA    R15,1\n         LA    R11,4095(R15,R10)\n         LR    R2,R1               PARM POINTER\n         L     R0,@SIZE            WORKAREA SUBPOOL AND LENGTH\n         GETMAIN R,LV=(0)\n         LR    R9,R1               INITIALIZE WORKAREA POINTER\n         SPACE 1\n         LR    R0,R1               AREA TO BE CLEARED\n         L     R1,@SIZE            LENGTH TO BE CLEARED\n         SLR   R15,R15             ZERO PAD AND 'FROM' LENGTH\n         MVCL  R0,R14              ZERO IT ALL\n         SPACE 1\n         ST    R13,4(,R9)          CHAIN SAVEAREA\n         ST    R9,8(,R13)          CHAIN SAVEAREA\n         LR    R13,R9              UPDATE SAVEAREA POINTER\n         USING @DATA,R9\n         SPACE 1\n         AGO   .ESTAE1\n***********************************************************************\n*                                                                     *\n*         SET UP ESTAE ENVIRONMENT                                    *\n*                                                                     *\n***********************************************************************\n         SPACE\n         STM   R10,R11,@BASES\n         MVC   ESTAEL(ESTAELL),ESTAEM\n         LA    R8,ESTAEX\n         ESTAE (R8),TERM=YES,PARAM=(R9),MF=(E,ESTAEL)\n         LTR   R15,R15\n         BNZ   EXIT12\n.ESTAE1  ANOP\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         GET OPTIONAL PREFIX FOR PANEL NAMES                         *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   PFX,=C'ULX'\n         L     R1,0(,R2)\n         LH    R15,0(,R1)          LENGTH OF PARM\n         LTR   R15,R15             IS THERE A PARM\n         BZ    NOPARM              NO, BRANCH\n         CH    R15,=H'4'           LONG ENOUGH FOR PFX=\n         BL    NOPARM              NO\n         CLC   2(4,R1),=C'PFX='    IS IT PFX=\n         BNE   NOPARM              NO\n         SH    R15,=H'4'           GET LENGTH OF PFX\n         BZ    NOPARM              BRANCH IF NULL\n         CH    R15,=H'3'           IS REMAINING LENGTH 3\n         BNE   NOPARM              NO\n         MVC   PFX,6(R1)           YES, CHANGE PANEL AND MESSAGE NAMES\nNOPARM   EQU   *\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         GET ENTRY POINT OF ISPLINK                                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LOAD  EP=ISPLINK,ERRET=EXIT12\n         ST    R0,ISPEXEC\n         SPACE\n***********************************************************************\n*                                                                     *\n*         MAKE 'ULXV01' A DEFINED VARIABLE                            *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXV01)'\n         MVC   VOLUME,=CL6' '\n         LA    R0,VOLUME\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'6'\n         BAL   R8,VDEFINE\n         SPACE\n***********************************************************************\n*                                                                     *\n*         SEE WHAT CONTROL-ERRORS-RETURN DOES                         *\n*                                                                     *\n***********************************************************************\n         SPACE\n*              THIS KEEPS US IN CONTROL IF THE END KEY (PFK3) IS USED\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'CONTROL'\n         ST    R0,0(,R1)\n         LA    R0,ERRORS\n         MVC   ERRORS,=CL8'ERRORS'\n         ST    R0,4(,R1)\n         LA    R0,RETURN\n         MVC   RETURN,=CL8'RETURN'\n         ST    R0,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\n***********************************************************************\n*                                                                     *\n*         DISPLAY PANEL P01 AND WAIT FOR REPLY                        *\n*                                                                     *\n***********************************************************************\n         SPACE\nPAN01    LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'DISPLAY'\n         ST    R0,0(,R1)\n         LA    R0,PANEL\n         MVC   PANEL,=CL8'ULXP01'\n         MVC   PANEL(3),PFX\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\n*              QUESTION: WHAT HAPPENS IF REPLY IS PFK 3?\nERRX01   LTR   R15,R15\n         BZ    OKPAN01\n*        LA    R1,=C'P01FAIL'\n*        LA    R0,7\n*        SVC   93\n         B     EXIT0\nOKPAN01  EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         REPEAT DISPLAY IF NOTHING ENTERED                           *\n*                                                                     *\n***********************************************************************\n         SPACE\n         CLC   VOLUME,=CL6' '\n         BE    PAN01\n         MVC   VOLSER,VOLUME\n         SPACE\n***********************************************************************\n*                                                                     *\n*         FIND THE UCB FOR THE SPECIFIED VOLUME                       *\n*                                                                     *\n***********************************************************************\n         SPACE\nREREAD   EQU   *\n         L     R15,16              CVTPTR\n         TM    116(R15),X'80'      MVS/XA                          .XA.\n         BO    UCBXA               YES                             .XA.\n         L     R15,40(,R15)        CVTILK2\n         B     *+8\nFINDLOOP LA    R15,2(,R15)\n         LH    R1,2(,R15)          GET UCB ADDRESS\n         N     R1,=A(X'0000FFFF')  CANCEL EFFECTS OF LEFTMOST BIT\n         BZ    FINDLOOP            IGNORE IF ADDRESS IS ZERO\n         C     R1,=A(X'0000FFFF')  END OF LIST\n         BE    FAILUCB\n         CLI   18(R1),X'20'        DASD\n         BNE   FINDLOOP            NO\n         TM    3(R1),X'80'         ONLINE?\n         BZ    FINDLOOP            NO\n         CLC   28(6,R1),VOLSER     VOLUME MATCH?\n         BNE   FINDLOOP            NO\n         B     FOUNDUCB\nUCBXA    EQU   *                                                   .XA.\n         LA    R1,DEVPARMS                                         .XA.\n         LA    R14,DEVWORK                                         .XA.\n         ST    R14,0(,R1)                                          .XA.\n         XC    0(100,R14),0(R14)                                   .XA.\n         LA    R14,DEVCLASS                                        .XA.\n         ST    R14,4(,R1)                                          .XA.\n         MVI   0(R14),X'20'        UCB3DACC (DASD UCB'S)           .XA.\n         LA    R14,DEVUCBAD                                        .XA.\n         ST    R14,8(,R1)                                          .XA.\n         OI    8(R1),X'80'                                         .XA.\nUCBLOOPX LA    R1,DEVPARMS                                         .XA.\n         L     R14,16              CVTPTR                          .XA.\n         L     R15,X'434'(,R14)    CVTUCBSC V(IOSVSUCB)            .XA.\n         BALR  R14,R15             CALL IOSVSUCB                   .XA.\n         LTR   R15,R15                                             .XA.\n         BNZ   FAILUCB                                             .XA.\n         L     R1,DEVUCBAD                                         .XA.\n         TM    3(R1),X'80'         ONLINE                          .XA.\n         BZ    UCBLOOPX                                            .XA.\n         CLC   28(6,R1),VOLSER     DOES VOLUME MATCH?              .XA.\n         BNE   UCBLOOPX            NO - BRANCH                     .XA.\n         SPACE\n***********************************************************************\n*                                                                     *\n*         UCB FOUND                                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\nFOUNDUCB MVC   DEVICE(4),16(R1)    COPY UCBTYPE\n         NI    DEVICE+1,255-X'20'  SET OFF SHARED DASD BIT\n         LA    R14,DEVICES\nDEVLOOP  CLI   0(R14),0\n         BE    DEVUNIT             UNKNOWN DEVICE TYPE\n         CLC   DEVICE(4),0(R14)\n         BE    DEVUNIT\n         LA    R14,12(,R14)\n         B     DEVLOOP\nDEVUNIT  MVC   UNITNAME,4(R14)\n         MVC   ALTCYL,10(R14)\n         MVC   CUU,13(R1)\n         SPACE\n***********************************************************************\n*                                                                     *\n*         OBTAIN THE FORMAT-4 DSCB FROM THE VTOC                      *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,CAMLST\n         MVC   0(16,R1),OBTCAM4\n         LA    R15,F4KEY\n         MVI   0(R15),X'04'\n         MVC   1(43,R15),0(R15)\n         ST    R15,4(,R1)\n         LA    R0,VOLSER\n         ST    R0,8(,R1)\n         LA    R0,F4DSCB\n         ST    R0,12(,R1)\n         OBTAIN (1)\n         LTR   R15,R15             WAS FORMAT 4 READ OK\n         BNZ   FAILUCB             NO, GO FIND OUT WHY\n         SPACE\n***********************************************************************\n*                                                                     *\n*         INITIAL VALUES FOR READING EXTENTS                          *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R0,EXTENCE\n         ST    R0,EXTPTR\n         SR    R0,R0\n         ST    R0,EXTCNT\n         ST    R0,BINCALLS\n         ST    R0,BINFIVES\n         XC    LRGEXT,LRGEXT\n         MVI   ORDER,C'L'          ORDERED BY LOCATION\n         MVC   MY99TXDD+6(8),=CL8' '\n         SPACE\n***********************************************************************\n*                                                                     *\n*         CHECK FOR INDEXED VTOC                                      *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R7,F4DSCB\n         USING F4DSECT,R7\n         CLC   UNITNAME(4),=C'3340'\n         BNE   NOT3340\n         CLC   DS4DEVSZ(2),=H'698' IF 70MB 3340\n         BNE   NOT3340                THEN\n         MVC   ALTCYL,=H'2'           2 ALT CYL\nNOT3340  EQU   *\n         LH    R1,DS4DEVSZ\n         SH    R1,ALTCYL\n         STH   R1,CYLVOL\n         MVC   TRKCYL,DS4DEVSZ+2\n         MVC   DSRECF4,DS4DSREC\n         MVC   VTOCE,DS4VTOCE\n         MVC   VTOCI,DS4VTOCI\n         TM    DS4VTOCI,1\n         BO    INDEXED\n         SPACE\n         MVC   CCHHR(4),DS4VTOCE+2\n         MVI   CCHHR+4,2           FMT5'S START WITH RECORD 2\n         DROP  R7\n         SR    R3,R3\n         SR    R4,R4\n         SPACE\n***********************************************************************\n*                                                                     *\n*         NOT INDEXED - READ FORMAT 5 DSCB'S                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nF5OLOOP  LA    R1,CAMLST\n         MVC   0(16,R1),OBTCAM5\n         LA    R15,CCHHR\n         ST    R15,4(,R1)\n         LA    R0,VOLSER\n         ST    R0,8(,R1)\n         LA    R0,F5DSCB\n         ST    R0,12(,R1)\n         OBTAIN (1)\n         LTR   R15,R15             WAS FORMAT 5 READ OK\n         BNZ   FAILUCB             NO, GO FIND OUT WHY\n         SPACE\n         LA    R0,1\n         A     R0,BINFIVES\n         ST    R0,BINFIVES\n         SPACE\n         LA    R7,F5DSCB\n         USING F5DSECT,R7\n         SPACE\n***********************************************************************\n*                                                                     *\n*         COPY EXTENTS TO AREA CONTAINING ALL EXTENTS                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   DS5FMTID(90),DS5FMTID+1  ALL 26 IN A ROW\n         LA    R14,DS5AVEXT        POINT TO FIRST OF 26\n         SR    R1,R1               COUNTER\n         L     R15,EXTPTR\n         LA    R0,26               NUMBER OF EXTENTS IN RECORD\n         MVI   DOUBLE+2,0\nF5ILOOP  CLC   0(5,R14),=X'0000000000' NULL ENTRY\n         BE    F5INXT              YES, IGNORE\n         MVC   0(5,R15),0(R14)\n         MVC   DOUBLE(2),2(R14)    CYLS\n         AH    R3,DOUBLE\n         MVC   DOUBLE+3(1),4(R14)  TRKS\n         AH    R4,DOUBLE+2\n         CLC   LRGEXT,2(R14)\n         BNL   *+10\n         MVC   LRGEXT,2(R14)\n         LA    R15,5(,R15)\n         LA    R1,1(,R1)           COUNT\nF5INXT   LA    R14,5(,R14)\n         BCT   R0,F5ILOOP\nF5IDONE  ST    R15,EXTPTR\n         A     R1,EXTCNT           ADD COUNT IN R1\n         ST    R1,EXTCNT            TO TOTAL COUNT\nF5IMORE  MVC   CCHHR,DS5PTRDS      POINT TO NEXT FORMAT5\n         CLC   CCHHR,=X'0000000000' IS THERE ANOTHER?\n         BNE   F5OLOOP             YES, GO READ IT\n         DROP  R7                  F5DSECT\n         MVC   VOLUME,VOLSER\n         ST    R3,BINCYL\n         ST    R4,BINTRK\n         B     HAVEXT\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ALLOCATE THE VOLUME                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\nINDEXED  LA    R1,MY99RBP\n         LA    R15,MY99RB\n         ST    R15,0(,R1)\n         OI    0(R1),X'80'\n         XC    0(20,R15),0(R15)\n         MVC   0(3,R15),=X'140140'\n         LA    R14,MY99TUPL\n         ST    R14,8(,R15)\n*\n         LA    R15,MY99TXDD\n         ST    R15,0(,R14)\n         MVC   0(14,R15),=X'0055000100084040404040404040' DALRTDDN\n*\n         LA    R15,MY99TXUN\n         ST    R15,4(,R14)\n         MVC   0(06,R15),=X'001500010003'                 DALUNIT\n         MVC   6(3,R15),CUU\n         SPACE\n         LA    R15,MY99TXVL\n         ST    R15,8(,R14)\n         MVC   0(06,R15),=X'001000010006'                 DALVLSER\n         MVC   6(6,R15),VOLSER\n         SPACE\n         LA    R15,MY99TXST\n         ST    R15,12(,R14)\n         MVC   0(07,R15),=X'00040001000108'               DALSTATS\n         SPACE\n         LA    R15,MY99TXFC\n         ST    R15,16(,R14)\n         MVC   0(04,R15),=X'001C0000'                     DALCLOSE\n         OI    16(R14),X'80'\n         SPACE\n         LA    R1,MY99RBP\n         SVC   99\n         SPACE\n         LTR   R15,R15\n         BNZ   FAILUCB\n         OI    SWA,SWA20           ALLOCATED\n         SPACE\n***********************************************************************\n*                                                                     *\n*         OPEN THE VTOC, TO BUILD A DEB                               *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R7,DYNDCBW\n         MVC   0(DYNDCBL,R7),DYNDCBM\n         MVC   DDNAM(8,R7),MY99TXDD+6\n         LA    R1,DYNJFCB\n         LA    R15,DYNEXL\n         ST    R1,0(,R15)\n         MVI   0(R15),X'87'\n         STCM  R15,7,EXLST+1(R7)\n         MVI   OPEN,X'80'\n         SPACE\n         RDJFCB ((R7)),MF=(E,OPEN)\n         SPACE\n         LTR   R15,R15\n         BNZ   FAILUCB\n         MVI   DYNJFCB,X'04'\n         MVC   DYNJFCB+1(43),DYNJFCB\n         OI    DYNJFCB+52,X'08'    DO NOT WRITE BACK DURING OPEN\n         MVI   OPEN,X'80'\n         OPEN  ((R7),INPUT),TYPE=J,MF=(E,OPEN)\n         OI    SWA,SWA10           OPENED\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ISSUE CVAFDSM TO GET NUMBER OF DSCBS AVAILABLE              *\n*                                                                     *\n***********************************************************************\n         SPACE\n         L     R7,DEBAD(,R7)\n         MVC   CVAFDSM(CVAFDSML),CVAFDSMM\n         CVAFDSM ACCESS=MAPDATA,MAP=VTOC,COUNT=YES,CTAREA=CTAREA,      +\n               DEB=(R7),                                               +\n               MAPRCDS=NO,IOAREA=NOKEEP,BRANCH=NO,MF=(E,CVAFDSM)\n         LA    R7,DYNDCBW\n         ST    R15,CVAFDSRC\n         SR    R14,R14\n         IC    R14,CVAFDSM+7\n         ST    R14,CVAFDSST\n         LTR   R15,R15\n         BZ    OKCTAREA\n         XC    CTAREA,CTAREA\nOKCTAREA EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         SET UP EXTENT VARIABLES FOR FIRST CALL                      *\n*                                                                     *\n***********************************************************************\n         SPACE\n         XC    EXTENTS+1(2),EXTENTS+1\n         SR    R3,R3\n         SR    R4,R4\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ISSUE CVAFDSM                                               *\n*                                                                     *\n***********************************************************************\n         SPACE\n*             NOTE: THE INTEGRITY OF THE MAP RECORDS READ IS MAINTAINED\n*             ONLY IF THE VTOC IS ENQUEUED AND THE VOLUME IS RESERVED.\n*             THIS PROGRAM CANNOT DO THAT BECAUSE IT IS UNAUTHORIZED.\n         SPACE\nCVAFLOOP L     R7,DEBAD(,R7)\n         MVC   CVAFDSM(CVAFDSML),CVAFDSMM\n         MVI   EXTENTS,255\n         LA    R0,1\n         A     R0,BINCALLS\n         ST    R0,BINCALLS\n         CVAFDSM ACCESS=MAPDATA,MAP=VOLUME,COUNT=NO,EXTENTS=EXTENTS,   +\n               DEB=(R7),                                               +\n               MAPRCDS=NO,IOAREA=NOKEEP,BRANCH=NO,MF=(E,CVAFDSM)\n         LA    R7,DYNDCBW\n         ST    R15,CVAFRC\n         SR    R14,R14\n         IC    R14,7(,R1)          CVSTAT\n         ST    R14,BINSTAT         SAVE CVSTAT\n         LTR   R15,R15\n         BZ    OKEXTEN\n         CH    R15,=H'4'\n         BNE   CVAFERR1\n         CLI   7(R1),32\n         BNE   CVAFERR1\nOKEXTEN  EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         COPY EXTENTS TO AREA CONTAINING ALL EXTENTS                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R14,EXTENTS+1\n         SR    R1,R1               COUNTER\n         L     R15,EXTPTR\n         SR    R0,R0\n         IC    R0,EXTENTS          NUMBER OF EXTENTS REQUESTED\n         MVI   DOUBLE+2,0\nEXTLOOP  CR    R1,R0               HAVE WE GOT THEM ALL\n         BE    EXTDONE             YES, BRANCH\n         CLC   0(5,R14),=X'0000000000' END OF DATA\n         BE    EXTEOD\n         MVC   0(5,R15),0(R14)\n         MVC   DOUBLE(2),2(R14)    CYLS\n         AH    R3,DOUBLE\n         MVC   DOUBLE+3(1),4(R14)  TRKS\n         AH    R4,DOUBLE+2\n         CLC   LRGEXT,2(R14)\n         BNL   *+10\n         MVC   LRGEXT,2(R14)\n         LA    R15,5(,R15)\n         LA    R1,1(,R1)\n         LA    R14,5(,R14)\n         B     EXTLOOP\nEXTEOD   ST    R15,EXTPTR\n         A     R1,EXTCNT\n         ST    R1,EXTCNT\n         CLI   CVAFRC+3,4\n         BE    EXTGOT\n         B     CVAFERR2            RC 0 BUT NULL EXTENT FOUND\nEXTDONE  ST    R15,EXTPTR\n         A     R1,EXTCNT\n         ST    R1,EXTCNT\n         CLI   CVAFRC+3,0\n         BNE   CVAFERR3            RC 4-32 BUT NO NULL EXTENT\nEXTMORE  SH    R15,=H'5'           POINT TO LAST EXTENT PROCESSED\n         MVC   EXTENTS+1(2),0(R15) SET BEGINNING RTA FOR NEXT REQUEST\n         B     CVAFLOOP\nEXTGOT   ST    R3,BINCYL\n         ST    R4,BINTRK\n         SPACE\n***********************************************************************\n*                                                                     *\n*         CLOSE AND UNALLOCATE                                        *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R8,DYNCLOSX\nDYNCLOSE TM    SWA,SWA20           ALLOCATED\n         BZR   R8                  NO, SKIP CLOSE-AND-UNALLOCATE\n         MVI   CLOSE,X'80'\n         CLOSE ((R7)),MF=(E,CLOSE)\n         NI    SWA,255-SWA20\n         NI    SWA,255-SWA10\n         BR    R8\nDYNCLOSX EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         MAKE MORE DEFINED VARIABLES                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\nHAVEXT   TM    SWA,SWA80           BEEN HERE BEFORE?\n         BO    DEFINED             YES, BYPASS\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXV02)'\n         LA    R0,WRKNEXT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'6'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXOPT)'\n         LA    R0,WRKOPT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'1'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXUNIT)'\n         LA    R0,WRKUNIT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'6'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXCYL)'\n         LA    R0,WRKCYL\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'4'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXTRK)'\n         LA    R0,WRKTRK\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'4'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXEXT)'\n         LA    R0,WRKEXT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'4'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXLRGC)'\n         LA    R0,WRKLRGC\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'4'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXLRGT)'\n         LA    R0,WRKLRGT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'4'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXATOT)'\n         LA    R0,WRKATOT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXLTOT)'\n         LA    R0,WRKLTOT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXPCU)'\n         LA    R0,WRKPCTU\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXCPV)'\n         LA    R0,WRKCPV\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXTPC)'\n         LA    R0,WRKTPC\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXDSREC)'\n         LA    R0,WRKDSREC\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXDSROS)'\n         LA    R0,WRKDSROS\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXDSRIX)'\n         LA    R0,WRKDSRIX\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXNOTE)'\n         LA    R0,WRKNOTE\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'60'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXDSMRC)'\n         LA    R0,WRKDSMRC\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXSTAT)'\n         LA    R0,WRKSTAT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXDDNAM)'\n         LA    R0,WRKDDNAM\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'8'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXCALLS)'\n         LA    R0,WRKCALLS\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXFIVES)'\n         LA    R0,WRKFIVES\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXTRACS)'\n         LA    R0,WRKTRACS\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'4'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXVTOC1)'\n         LA    R0,WRKVTOCE+4\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'8'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXVTOC2)'\n         LA    R0,WRKVTOCE+12\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'8'\n         BAL   R8,VDEFINE\n         SPACE\n         OI    SWA,SWA80\nDEFINED  EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         MOVE DATA FROM MESSAGE AREA TO DEFINED FIELDS               *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   VOLUME,VOLSER\n         MVC   WRKUNIT,UNITNAME\n         MVC   WRKDDNAM,MY99TXDD+6\n         MVI   WRKNOTE,C' '\n         MVC   WRKNOTE+1(L'WRKNOTE-1),WRKNOTE\n         SPACE\n         LH    R1,DSRECF4\n         BAL   R8,LJ7\n         MVC   WRKDSREC,WORK\n         MVC   WRKDSROS,WORK\n         MVC   WRKDSRIX,=CL7'N/A'\n         TM    VTOCI,1             INDEXED VTOC?\n         BNO   GOTDSCBS            NO\n         L     R15,CVAFDSRC        GET RESULT OF CVAF REQUEST\n         LTR   R15,R15             WAS CVAF SUCCESSFUL\n         BZ    IXVTOC              YES, BRANCH\n         MVC   WRKDSRIX,=CL7'ERR'\n         B     GOTDSCBS            AND SHOW VALUE FROM FORMAT 4\nIXVTOC   L     R1,CTAREA           YES, GET AVAILABLE DSCB'S\n         BAL   R8,LJ7\n         MVC   WRKDSREC,WORK\n         MVC   WRKDSRIX,WORK\nGOTDSCBS EQU   *\n         SPACE\n         L     R1,BINTRK\n         BAL   R8,LJ7\n         MVC   WRKTRK,WORK\n         SPACE\n         L     R1,BINCYL\n         BAL   R8,LJ7\n         MVC   WRKCYL,WORK\n         SPACE\n         L     R1,EXTCNT\n         BAL   R8,LJ7\n         MVC   WRKEXT,WORK\n         SPACE\n         LH    R1,LRGEXT\n         BAL   R8,LJ7\n         MVC   WRKLRGC,WORK\n         SPACE\n         SR    R1,R1\n         IC    R1,LRGEXT+2\n         BAL   R8,LJ7\n         MVC   WRKLRGT,WORK\n         SPACE\n         L     R1,BINCYL\n         MH    R1,TRKCYL\n         A     R1,BINTRK\n         ST    R1,TRKTOTA\n         BAL   R8,LJ7\n         MVC   WRKATOT,WORK\n         SPACE\n         LH    R1,CYLVOL\n         MH    R1,TRKCYL           COMPUTE TRACKS PER VOLUME\n         LR    R15,R1              GET TRACKS PER VOLUME\n         S     R15,TRKTOTA         MINUS TRKS AVAILABLE = TRKS USED\n         M     R14,=F'100'         TIMES 100\n         DR    R14,R1              COMPUTE PERCENTAGE USED\n         LR    R1,R15\n         BAL   R8,LJ7\n         MVC   WRKPCTU,WORK\n         SPACE\n         LH    R1,LRGEXT\n         MH    R1,TRKCYL\n         SR    R0,R0\n         IC    R0,LRGEXT+2\n         AR    R1,R0\n         BAL   R8,LJ7\n         MVC   WRKLTOT,WORK\n         SPACE\n         L     R1,CVAFRC\n         BAL   R8,LJ7\n         MVC   WRKDSMRC,WORK\n         SPACE\n         L     R1,BINSTAT\n         BAL   R8,LJ7\n         MVC   WRKSTAT,WORK\n         SPACE\n         LH    R1,CYLVOL\n         BAL   R8,LJ7\n         MVC   WRKCPV,WORK\n         SPACE\n         LH    R1,TRKCYL\n         BAL   R8,LJ7\n         MVC   WRKTPC,WORK\n         SPACE\n         L     R1,BINCALLS\n         BAL   R8,LJ7\n         MVC   WRKCALLS,WORK\n         SPACE\n         L     R1,BINFIVES\n         BAL   R8,LJ7\n         MVC   WRKFIVES,WORK\n         SPACE\n         TM    VTOCI,1             INDEXED\n         BO    NONA                YES, LEAVE CVAF VALUES ALONE\n         MVC   WRKDSMRC,=CL8'N/A'\n         MVC   WRKSTAT,=CL8'N/A'\n         MVC   WRKDDNAM,=CL8'N/A'\nNONA     EQU   *\n         SPACE\n         LA    R1,VTOCE\n         LA    R15,WRKVTOCE\n         LA    R0,10\n         BAL   R14,HEXCVT\n         SPACE\n         MVC   DOUBLE(8),VTOCE+2\n         LH    R14,DOUBLE+2        HH\n         LH    R0,TRKCYL           TRACKS PER CYL\n         LA    R1,1\nCOUNTEM  CLC   DOUBLE,DOUBLE+4\n         BNL   COUNTED\n         LA    R1,1(,R1)           COUNT\n         LA    R14,1(,R14)         ADD 1 TO HH\n         CR    R14,R0              IF BEYOND LAST\n         BNE   NOTLAST                THEN\n         LH    R15,DOUBLE               ADD 1\n         AH    R15,=H'1'                  TO\n         STH   R15,DOUBLE                   CC\n         SR    R14,R14                  ZERO HH\nNOTLAST  STH   R14,DOUBLE+2\n         B     COUNTEM\nCOUNTED  LR    R14,R1\n         BAL   R8,LJ7\n         MVC   WRKTRACS,WORK\n         SPACE\n***********************************************************************\n*                                                                     *\n*         DISPLAY PANEL P02 AND WAIT FOR ENTER                        *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   WRKNEXT,=CL6' '\nPAN02    MVI   WRKOPT,C' '\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'DISPLAY'\n         ST    R0,0(,R1)\n         LA    R0,PANEL\n         MVC   PANEL,=CL8'ULXP02'\n         MVC   PANEL(3),PFX\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\nERRX02   CLC   WRKNEXT,=CL6' '     ANOTHER VOLUME ENTERED?\n         BE    ERRX02A             NO\n         MVC   VOLSER,WRKNEXT\n         B     REREAD\nERRX02A  EQU   *\n         CH    R15,=H'8'           PF3\n*        BE    PAN01               YES, BACK TO PANEL 1\n         BE    EXIT0               YES, END APPLICATION\n         CLI   WRKOPT,C'L'         LIST REQUESTED\n         BE    LISTEXT             YES\n         CLI   WRKOPT,C'S'         LIST REQUESTED\n         BE    LISTEXT             YES\n         B     PAN02               REPEAT PANEL 2\nLISTEXT  L     R6,EXTCNT       GET NUMBER OF EXTENTS\n         LTR   R6,R6           ARE THERE ANY EXTENTS\n         BZ    ERRZEX          DONE IF NOT\n         C     R6,=F'1'            ONLY ONE EXTENT?\n         BE    SORTED              YES, BYPASS SORT\n         CLI   WRKOPT,C'L'     REQUEST SORT BY LOCATION?\n         BE    SORTL           YES, BRANCH\n         SPACE\n***********************************************************************\n*                                                                     *\n*         SORT EXTENT TABLE IN DESCENDING ORDER BY SIZE               *\n*                                                                     *\n***********************************************************************\n         SPACE\n         CLI   ORDER,C'S'          ALREADY IN SIZE ORDER\n         BE    SORTED              YES, BRANCH\n         MVI   ORDER,C'S'\n         LA    R7,EXTENCE\n         BCTR  R6,0                NUMBER OF EXTENTS MINUS 1\n         MH    R6,=H'5'            SIZE OF TABLE, MINUS 5 BYTES\n         LA    R8,EXTENCE(R6)      POINT TO LAST ENTRY IN TABLE\nSORTO    SR    R0,R0\n         LA    R7,EXTENCE\nSORTI    CLC   2(3,R7),7(R7)\n         BNL   SORT2\n         XC    0(5,R7),5(R7)       SWAP\n         XC    5(5,R7),0(R7)        SWAP\n         XC    0(5,R7),5(R7)         SWAP\n         BCTR  R0,0                A SWAP TOOK PLACE\nSORT2    LA    R7,5(,R7)           NEXT PAIR\n         CR    R7,R8               IS THIS THE LAST ONE?\n         BL    SORTI               NO, LOOP\n         LTR   R0,R0               ANY SWAPS DURING THAT PASS?\n         BZ    SORTED              NO, WE ARE DONE\n         B     SORTO\n         SPACE\n***********************************************************************\n*                                                                     *\n*         SORT EXTENT TABLE IN ASCENDING ORDER BY LOCATION            *\n*                                                                     *\n***********************************************************************\n         SPACE\nSORTL    CLI   ORDER,C'L'          ALREADY IN LOCATION ORDER\n         BE    SORTED              YES, BRANCH\n         MVI   ORDER,C'L'\n         LA    R7,EXTENCE\n         BCTR  R6,0                NUMBER OF EXTENTS MINUS 1\n         MH    R6,=H'5'            SIZE OF TABLE, MINUS 5 BYTES\n         LA    R8,EXTENCE(R6)      POINT TO LAST ENTRY IN TABLE\nSORTLO   SR    R0,R0\n         LA    R7,EXTENCE\nSORTLI   CLC   0(2,R7),5(R7)\n         BNH   SORTL2\n         XC    0(5,R7),5(R7)       SWAP\n         XC    5(5,R7),0(R7)        SWAP\n         XC    0(5,R7),5(R7)         SWAP\n         BCTR  R0,0                A SWAP TOOK PLACE\nSORTL2   LA    R7,5(,R7)           NEXT PAIR\n         CR    R7,R8               IS THIS THE LAST ONE?\n         BL    SORTLI              NO, LOOP\n         LTR   R0,R0               ANY SWAPS DURING THAT PASS?\n         BZ    SORTED              NO, WE ARE DONE\n         B     SORTLO\nSORTED   EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         CREATE EXTENT TABLE                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\n         TM    SWA,SWA08           BEEN HERE BEFORE?\n         BO    DEFINED2            YES, BYPASS\n         OI    SWA,SWA08\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBS)'   SCROLL VARIABLE\n         LA    R0,TBS\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'4'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBSEQ)'\n         LA    R0,TBSEQ+1\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'5'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBEXT)'\n         LA    R0,TBEXT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'10'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBCYL)'\n         LA    R0,TBCYL\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'5'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBTRA)'\n         LA    R0,TBTRA\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'3'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBTRK)'\n         LA    R0,TBTRK\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'5'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBBEG)'\n         LA    R0,TBBEG\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'8'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBEND)'\n         LA    R0,TBEND\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'8'\n         BAL   R8,VDEFINE\n         SPACE\nDEFINED2 EQU   *\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'TBCREATE'\n         ST    R0,0(,R1)\n         LA    R0,TABLNAME\n         MVC   TABLNAME,=CL8'ULXT01'\n         ST    R0,4(,R1)\n         LA    R0,KEYNAMES\n         MVC   KEYNAMES,=CL10'(TBSEQ)'\n         ST    R0,8(,R1)\n         LA    R0,VARNAMES\n         MVC   VARNAMES,=CL37'(TBEXT TBCYL TBTRA TBTRK TBBEG TBEND)'\n         ST    R0,12(,R1)\n         LA    R0,NOWRITE\n         MVC   NOWRITE,=CL8'NOWRITE'\n         ST    R0,16(,R1)\n         LA    R0,REPLACE\n         MVC   REPLACE,=CL8'REPLACE'\n         ST    R0,20(,R1)\n         OI    20(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\n         CH    R15,=H'4'\n         BH    ERRTC\n         SPACE\n***********************************************************************\n*                                                                     *\n*         FORMAT DATA FOR A ROW OF THE TABLE                          *\n*                                                                     *\n***********************************************************************\n         SPACE\n* LOOP TO FORMAT EXTENTS FOR ISPF TABLE\n         L     R7,EXTCNT\n         LA    R6,EXTENCE\n         SR    R5,R5\nNXTROW   A     R5,=F'1'\n         CVD   R5,DOUBLE\n         MVC   TBSEQ,=X'402020202120'\n         ED    TBSEQ,DOUBLE+5\n         SPACE\n         LR    R1,R6\n         LA    R0,5\n         LA    R15,TBEXT\n         BAL   R14,HEXCVT\n         SPACE\n         MVC   DOUBLE(2),2(R6)\n         LH    R1,DOUBLE\n         BAL   R8,RJ7BZ\n         MVC   TBCYL,WORK+3\n         SPACE\n         SR    R1,R1\n         IC    R1,4(,R6)\n         BAL   R8,RJ7BZ\n         MVC   TBTRA,WORK+5\n         SPACE\n         MVC   DOUBLE(2),2(R6)\n         LH    R1,DOUBLE\n         MH    R1,TRKCYL\n         SR    R0,R0\n         IC    R0,4(,R6)\n         AR    R1,R0\n         ST    R1,BINTK\n         BAL   R8,RJ7BZ\n         MVC   TBTRK,WORK+3\n         SPACE\n         XC    DOUBLE(2),DOUBLE\n         MVC   DOUBLE+2(2),0(R6)\n         SR    R0,R0\n         L     R1,DOUBLE\n         LH    R15,TRKCYL\n         DR    R0,R15\n         STH   R1,BINBEG\n         STH   R0,BINBEG+2\n         SPACE\n         LA    R1,BINBEG\n         LA    R0,4\n         LA    R15,TBBEG\n         BAL   R14,HEXCVT\n         SPACE\n         XC    DOUBLE(2),DOUBLE\n         MVC   DOUBLE+2(2),0(R6)\n         SR    R0,R0\n         L     R1,DOUBLE\n         A     R1,BINTK\n         BCTR  R1,0\n         LH    R15,TRKCYL\n         DR    R0,R15\n         STH   R1,BINEND\n         STH   R0,BINEND+2\n         SPACE\n         LA    R1,BINEND\n         LA    R0,4\n         LA    R15,TBEND\n         BAL   R14,HEXCVT\n         SPACE\n***********************************************************************\n*                                                                     *\n*         FILL IN A ROW OF THE TABLE\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'TBADD'\n         ST    R0,0(,R1)\n         LA    R0,TABLNAME\n         MVC   TABLNAME,=CL8'ULXT01'\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\n         CH    R15,=H'4'\n         BH    ERRTA\n         SPACE\n         LA    R6,5(,R6)\n         BCT   R7,NXTROW       REPEAT IF ANY MORE EXTENTS\n         SPACE\n***********************************************************************\n*                                                                     *\n*         POINT CRP (CURRENT ROW POINTER) TO TOP                      *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'TBTOP'\n         ST    R0,0(,R1)\n         LA    R0,TABLNAME\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\n***********************************************************************\n*                                                                     *\n*         DISPLAY PANEL P03 AND WAIT FOR END                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nPAN03    LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'TBDISPL'\n         ST    R0,0(,R1)\n         LA    R0,TABLNAME\n         ST    R0,4(,R1)\n         LA    R0,PANEL\n         MVC   PANEL,=CL8'ULXP03'\n         MVC   PANEL(3),PFX\n         ST    R0,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\n         LTR   R15,R15\n         BZ    PAN03\n         B     PAN02\n         SPACE\n***********************************************************************\n*                                                                     *\n*         SUBROUTINES\n*                                                                     *\n***********************************************************************\n         SPACE\nLJUST    CLI   WORK,C' '\n         BNER  R8\n         MVC   WORK(7),WORK+1\n         MVI   WORK+7,C' '\n         B     LJUST\n         SPACE\nLJ7      CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  WORK(7),DOUBLE+4(4)\n         LA    R0,6\nLJ7B     CLI   WORK,C'0'\n         BNER  R8\n         MVC   WORK(6),WORK+1\n         MVI   WORK+6,C' '\n         BCT   R0,LJ7B\n         BR    R8\n         SPACE\nRJ7      CVD   R1,DOUBLE\n         MVC   WORK(8),=X'4020202020202120'\n         ED    WORK(8),DOUBLE+4\n         BR    R8\n         SPACE\nRJ7BZ    CVD   R1,DOUBLE\n         MVC   WORK(8),=X'4020202020202020'\n         ED    WORK(8),DOUBLE+4\n         BR    R8\n         SPACE\nHEXCVT   MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEXCVT           DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R14                 RETURN TO CALLER\n         SPACE\n***********************************************************************\n*                                                                     *\n*         VDEFINE SERVICE\n*                                                                     *\n***********************************************************************\n         SPACE\nVDEFINE  LA    R1,PARAMS\n         ST    R0,8(,R1)           STORE ADDRESS OF FIELD\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'VDEFINE'\n         ST    R0,0(,R1)\n         LA    R0,VDEFNAME\n         ST    R0,4(,R1)\n         LA    R0,VDEFFMT\n         ST    R0,12(,R1)\n         LA    R0,VDEFLEN\n         ST    R0,16(,R1)\n         OI    16(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         BR    R8\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ERROR ROUTINES\n*                                                                     *\n***********************************************************************\n         SPACE\nFAILUCB  MVC   MSG,=CL8'ULXM011A' NOT MOUNTED\n         BAL   R8,DYNCLOSE\n         B     ERRM01\n         SPACE\nCVAFERR1 CLI   CVAFRC+3,4\n         BNE   CVAFERR4\n         CLI   BINSTAT+3,10\n         BNE   CVAFERR4\n         MVC   MSG,=CL8'ULXM012A' NONINDEXED VTOC\n         BAL   R8,DYNCLOSE\n         B     ERRM01\n         SPACE\nCVAFERR2 MVC   MSG,=CL8'ULXM012B' ZERO ENTRY BUT RC WAS ZERO\n         BAL   R8,DYNCLOSE\n         B     ERRM01\n         SPACE\nCVAFERR3 MVC   MSG,=CL8'ULXM012C' END OF DATA RC BUT NO ZERO ENTRY\n         BAL   R8,DYNCLOSE\n         B     ERRM01\n         SPACE\nCVAFERR4 MVC   MSG,=CL8'ULXM012D' UNEXPECTED RC FROM CVAFDSM\n         BAL   R8,DYNCLOSE\n         B     ERRM01\n         SPACE\nERRZEX   MVC   MSG,=CL8'ULXM011C' NO EXTENTS\n         B     ERRM01\n         SPACE\nERRTC    MVC   MSG,=CL8'ULXM011D' TBCREATE ERROR\n         B     ERRM01\n         SPACE\nERRTA    MVC   MSG,=CL8'ULXM011E' TBADD ERROR\n         B     ERRM01\n         SPACE\n***********************************************************************\n*                                                                     *\n*         RE-DISPLAY LAST PANEL WITH MESSAGE                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nERRM01   LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'DISPLAY'\n         ST    R0,0(,R1)\n         LA    R0,PANEL\n         ST    R0,4(,R1)\n         LA    R0,MSG\n         MVC   MSG(3),PFX\n         ST    R0,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         CLI   PANEL+5,C'1'\n         BE    ERRX01\n         B     ERRX02\n         SPACE\n***********************************************************************\n*                                                                     *\n*         RETURN TO CALLER                                            *\n*                                                                     *\n***********************************************************************\n         SPACE\nEXIT0    SR    R15,R15             RETURN CODE ZERO\n         B     EXIT\nEXIT12   LA    R15,12              RETURN CODE 12\nEXIT     LR    R2,R15              SAVE RETURN CODE\n         L     R0,ISPEXEC          GET ENTRY POINT OF ISPLINK\n         LTR   R0,R0               WAS IT LOADED\n         BZ    NODEL               NO, BYPASS DELETE\n         DELETE EP=ISPLINK\n         XC    ISPEXEC,ISPEXEC\nNODEL    EQU   *\n         LR    R1,R13              POINT R1 TO AREA TO BE FREED\n         L     R0,@SIZE            SUBPOOL AND LENGTH\n         L     R13,4(,R13)         RESTORE PREVIOUS SAVEAREA\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2\n         LM    0,12,20(R13)        RESTORE REGISTERS\n         L     14,12(,R13)         LOAD RETURN ADDRESS\n         BR    14                  RETURN\n         SPACE\n         AGO   .ESTAE2\n         SPACE\n************************************************************\n*                                                          *\n*         ESTAE EXIT                                       *\n*                                                          *\n************************************************************\n         SPACE\nESTAEX   DC    0H'0'\n         USING *,R15\n         CH    R0,ESTAE12\n         BNE   ESTASDWA\n         SPACE\n*              REG 0 IS 12\n*              STORAGE NOT AVAILABLE FOR SDWA\n*              REG  1  -  CONTAINS ABEND COMPLETION CODE\n*              REG  2  -  ADDRESS OF PARAM LIST FROM ESTAE MACRO\n*              REG 14  -  RETURN ADDRESS\n*              REG 15  -  ENTRY ADDRESS\n*              REGS 3-13  UNPREDICTABLE\n         SPACE\n         STM   14,12,ESTAEWSV+12-@DATA(R2)\n         LR    R9,R2               RESTORE R9\n         ST    R1,ESTAEWCC\n         MVI   ESTAEWSW,C'N'\n         B     ESTAEXC\nESTAE12  DC    H'12'\n         SPACE\nESTASDWA EQU   *\n         SPACE\n*              REG  1  -  ADDRESS OF SDWA\n*              REG 13  -  ADDRESS OF 72 BYTE REGISTER SAVE AREA\n*              REG 14  -  RETURN ADDRESS\n*              REG 15  -  ENTRY ADDRESS\n*              REGS 2-12  UNPREDICTABLE\n         SPACE\n         STM   14,12,12(R13)\n         L     R9,0(,R1)           RESTORE R9\n         MVC   ESTAEWCC(4),4(R1)   SAVE ABEND CODE FROM SDWA\n         MVC   ESTAEWPS(8),8(R1)   SAVE PSW FROM SDWA\n         MVC   ESTAEWSV+12(60),12(R13)\n         MVI   ESTAEWSW,C'S'\n         ST    R1,ESTAEWWA         SAVE SDWA ADDRESS\n         SPACE\n*              COMMON TO EITHER TYPE OF ENTRY.\n*              (AS LONG AS YOU DONT REFER TO SDWA)\n         SPACE\n         MVC   MESSAGE(38),=C'ABEND XXXXXXXX BASE XXXXXX PSW XXXXXX '\n         LA    R1,ESTAEWCC\n         LA    R15,MESSAGE+6\n         LA    R0,4\n         BAL   R14,HEXCVT\n         LA    R1,@BASES+1\n         LA    R15,MESSAGE+20\n         LA    R0,3\n         BAL   R14,HEXCVT\n         LA    R1,ESTAEWPS+5\n         LA    R15,MESSAGE+31\n         LA    R0,3\n         BAL   R14,HEXCVT\n         LA    R1,MESSAGE\n         LA    R0,37\n         SVC   93\n         LA    R1,MESSAGE\n         LA    R0,38\n         O     R1,=A(X'80000000')\n         SVC   93\n         SPACE\nESTAEXC  EQU   *\n         LM    R10,R11,@BASES      RESTORE BASE REGISTER\n         DROP  R15                 DROP R15 ENTRY ADDRESS\n         SPACE\nESTAEX00 EQU   *\n         CLI   ESTAEWSW,C'S'       SDWA PRESENT?\n         BNE   ESTANOWA            NO - BRANCH\n         L     R1,ESTAEWWA         YES, RESTORE SDWA ADDRESS\n         MVI   X'FC'(R1),0         SET SDWARCDE = 0\n         LM    14,12,12(13)\n         BR    R14\n         SPACE\nESTANOWA LM    14,12,ESTAEWSV+12\n         SLR   R15,R15             CONTINUE TERMINATION\n         BR    R14\n.ESTAE2  ANOP\n         DROP  R9,R10,R11          DROP ALL\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n         LTORG\n         SPACE\nOBTCAM4  CAMLST SEARCH,2,3,4\n         SPACE\nOBTCAM5  CAMLST SEEK,2,3,4\n         SPACE\nCVAFDSMM CVAFDSM MF=L\nCVAFDSML EQU   *-CVAFDSMM\n         SPACE\n*                UCBTYP      UNIT    ALTCYL\nDEVICES  DC    X'3010200F',C'3390  ',AL2(1)\n         DC    X'3010200E',C'3380  ',AL2(1)\n         DC    X'3010200C',C'3375  ',AL2(1)\n         DC    X'3050200B',C'3350  ',AL2(5)\n         DC    X'3050200D',C'3330-1',AL2(7)\n         DC    X'30502009',C'3330  ',AL2(7)\n         DC    X'30582009',C'3330V ',AL2(7) NOT SURE ABOUT ALT CYL\n         DC    X'3040200A',C'3340  ',AL2(1) 70MB VERSION HAS 2 ALT\n         DC    X'30502007',C'2305-2',AL2(1)\n         DC    X'00000000',C'?     ',AL2(1)\n         SPACE\nESTAEM   ESTAE 1,MF=L\nESTAELL  EQU   *-ESTAEM\n         SPACE\nNULL     DC    CL44'(NULL)'\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\nDYNDCBM  DCB   DDNAME=DYNAM,DSORG=PS,MACRF=(R),BLKSIZE=140\nDYNDCBL  EQU   *-DYNDCBM\n         DC    0D'0'\n         SPACE\nDDNAM    EQU   40   DCB OFFSET\nEXLST    EQU   36   DCB OFFSET\nDEBAD    EQU   44   DCB OFFSET\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nWORK     DS    CL8                 WORK AREA\nDOUBLE   DS    D                   DOUBLEWORD WORK AREA\nLINKAREA DS    2F                  LINK MACRO WORK AREA\nFLAG     DS    F\n@BASES   DS    3F                  BASE REGISTERS\nISPEXEC  DS    F\nPARAMS   DS    8F\nSERVICE  DS    CL8\nPANEL    DS    CL8\nMSG      DS    CL8\nPFX      DS    CL3\nVDEFNAME DS    CL10\nVDEFFMT  DS    CL8\nVDEFLEN  DS    F\nERRORS   DS    CL8\nRETURN   DS    CL8\nTABLNAME DS    CL8\nKEYNAMES DS    CL10\nVARNAMES DS    CL37\nNOWRITE  DS    CL8\nREPLACE  DS    CL8\nTBS      DS    CL4\nTBSEQ    DS    CL6\nTBEXT    DS    CL10,X\nTBCYL    DS    CL5\nTBTRA    DS    CL3\nTBTRK    DS    CL5\nTBBEG    DS    CL8,X\nTBEND    DS    CL8,X\nCAMLST   DS    4F\nCCHHR    DS    CL5\nVOLUME   DS    CL6\nVOLSER   DS    CL6\nDEVICE   DS    CL4\nUNITNAME DS    CL6\nCUU      DS    CL3\nS78MSG   DS    CL30\nTRKTOTA  DS    F\nTRKTOTV  DS    F\nCYLVOL   DS    H\nALTCYL   DS    H\nTRKCYL   DS    H\nDSRECF4  DS    H\nWRKNEXT  DS    CL7\nWRKOPT   DS    CL1\nSWA      DS    C\nSWA80    EQU   X'80'\nSWA40    EQU   X'40'\nSWA20    EQU   X'20'\nSWA10    EQU   X'10'\nSWA08    EQU   X'08'\nVTOCE    DS    CL10\nVTOCI    DS    C\nORDER    DS    C\n         DS    0F\nF4KEY    DS    CL44\nF4DSCB   DS    CL140\nF5DSCB   DS    CL140\nWRKUNIT  DS    CL6\nWRKCYL   DS    CL4\nWRKTRK   DS    CL4\nWRKEXT   DS    CL4\nWRKLRGC  DS    CL4\nWRKLRGT  DS    CL4\nWRKATOT  DS    CL7\nWRKPCTU  DS    CL7\nWRKLTOT  DS    CL7\nWRKCPV   DS    CL7\nWRKTPC   DS    CL7\nWRKDSREC DS    CL7\nWRKDSROS DS    CL7\nWRKDSRIX DS    CL7\nWRKDSMRC DS    CL7\nWRKSTAT  DS    CL7\nWRKDDNAM DS    CL8\nWRKCALLS DS    CL7\nWRKFIVES DS    CL7\nWRKVTOCE DS    CL21\nWRKTRACS DS    CL4\nWRKNOTE  DS    CL60\nCTAREA   DS    F\nCVAFDSRC DS    F\nCVAFDSST DS    F\nCVAFRC   DS    F\nBINCYL   DS    F\nBINTRK   DS    F\nBINLRGC  DS    F\nBINLRGT  DS    F\nBINSTAT  DS    F\nBINCALLS DS    F\nBINFIVES DS    F\nBINTK    DS    F\nBINBEG   DS    F\nBINEND   DS    F\nOPEN     DS    0F\nCLOSE    DS    F\nDYNDCBW  DS    0F,(DYNDCBL)X\nDYNEXL   DS    F\nCVAFDSM  DS    0F,(CVAFDSML)X\nDYNJFCB  DS    0F,176X\nDEVPARMS DS    3F\nDEVCLASS DS    C\nDEVUCBAD DS    F\nDEVWORK  DS    25F\n*\nMY99RBP  DS    F       REQUEST BLOCK POINTER\nMY99RB   DS    5F      REQUEST BLOCK\nMY99TUPL DS    5A      TEXT UNIT POINTERS\nMY99TXDD DS    3H,CL8  RETURN DDNAME\nMY99TXUN DS    3H,CL3  UNIT\nMY99TXVL DS    3H,CL6  VOLSER\nMY99TXST DS    3H,CL1  DISP=SHR\nMY99TXFC DS    2H      FREE=CLOSE\n*\nESTAEL   DS    0F,(ESTAELL)X\nESTAEWSV DS    18F\nESTAEWWA DS    F\nESTAEWCC DS    F\nESTAEWPS DS    2F\nESTAEWSW DS    C\nMESSAGE  DS    CL38\n         DS    0D\nEXTCNT   DS    F\nEXTPTR   DS    F\nLRGEXT   DS    XL3,X\nEXTENTS  DS    X,255CL5\nEXTENCE  DS    2600XL5             100 FORMAT 5'S\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nF4DSECT  DSECT\n*        IECSDSL1 4\nDS4IDFMT DS    CL1\nDS4HPCHR DS    XL5\nDS4DSREC DS    XL2\nDS4HCCHH DS    XL4\nDS4NOATK DS    XL2\nDS4VTOCI DS    XL1\nDS4NOEXT DS    XL1\n         DS    XL2\nDS4DEVSZ DS    XL4\n         DS    XL8\nDS4DEVDT DS    XL1\nDS4DEVDB DS    XL1\n         DS    XL29\nDS4VTOCE DS    XL10\n         SPACE\nF5DSECT  DSECT\n*        IECSDSL1 5\nDS5KEYID DS    XL4\nDS5AVEXT DS    XL5     FIRST\nDS5EXTAV DS    XL35    SEVEN MORE\nDS5FMTID DS    XL1\nDS5MAVET DS    XL90    EIGHTEEN MORE\nDS5PTRDS DS    XL5\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ULXM01": {"ttr": 10757, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x14\\x00\\x14\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "BG@PRC"}, "text": "ULXM010  ' '\n\nULXM011A 'VOLUME NOT MOUNTED'\n\nULXM011B 'INVALID OPTION'\n\nULXM011C 'NO EXTENTS'\n\nULXM011D 'TBCREATE ERROR'\n\nULXM011E 'TBADD ERROR'\n\nULXM012A 'NONINDEXED VTOC'\n\nULXM012B 'RC 0 BUT NULL EXTENT FOUND'\n\nULXM012C 'RC 4-32 BUT NO NULL EXTENT'\n\nULXM012D 'CVAFDSM FAILED'\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ULXP01": {"ttr": 10759, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\n\\x00\\n\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "BG@PRC"}, "text": "%--------------------------- DISK SPACE INFORMATION ----------------------------\n+COMMAND ===>_ZCMD                                                     +\n%\n%Display information about available space on a disk volume.\n%\n%     + VOLUME ===>_ULXV01+\n%\n)INIT\n  .CURSOR = ULXV01\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULXP02": {"ttr": 10761, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "BG@PRC"}, "text": "%--------------------------- DISK SPACE INFORMATION ----------------------------\n+ COMMAND =======>_ZCMD                                                +\n+ NEXT VOLUME ===>_ULXV02 +\n+                              Volume ---%&ULXV01\n+                              Device ---%&ULXUNIT\n+\n+    Tracks per cylinder -------------%&ULXTPC  +Cylinders ------%&ULXCPV\n+\n+    Cylinders available -------------%&ULXCYL\n+    Tracks available ----------------%&ULXTRK\n+    Total Tracks available ----------%&ULXATOT +Percent used ---%&ULXPCU\n+\n+    Extents of free space -----------%&ULXEXT+Enter L here to List Extents\n+                                              S for Sorted-by-Size  ===>_ULXOPT\n+    Largest single extent:\n+      Cylinders ---------------------%&ULXLRGC\n+      Tracks ------------------------%&ULXLRGT\n+      Total Tracks ------------------%&ULXLTOT\n+\n+    DSCB's available in VTOC --------%&ULXDSREC\n+       According to Format 4 ---%&ULXDSROS +VTOC tracks ---%&ULXTRACS\n+       According to Index ------%&ULXDSRIX +VTOC Extent ---%&ULXVTOC1%&ULXVTOC2\n)INIT\n  .CURSOR = ULXV02\n  .HELP = ULXH02\n  &ZHTOP = ULXH01     /* TUTORIAL TABLE OF CONTENTS */\n  &ZHINDEX = ULXH00   /* TUTORIAL INDEX - 1ST PAGE  */\n)PROC\n  VER (&UCVOPT,LIST,L,S,MSG=ULXM011B)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULXP03": {"ttr": 10763, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x11\\x00\\x11\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "BG@PRC"}, "text": ")ATTR\n  @ TYPE(OUTPUT) INTENS(LOW)\n)BODY\n%------------- DISK SPACE INFORMATION ------------------------------------------\n+ COMMAND =======>_ZCMD                                        %SCROLL ===>_TBS\n+ Volume%&ULXV01 +Device%&ULXUNIT +Trk/Cyl%&ULXTPC +Extents%&ULXEXT\n+\n+      XXXX = Rel Trk of 1st Trk    YYYY = No. of Cyls    ZZ = No. of Trks\n+\n+SEQNO XXXXYYYYZZ     CYLINDERS   TRACKS   TOTAL     BEGIN CCHH  END CCHH\n+----- ----------     ---------   ------  -------    ---------- ----------\n)MODEL\n@Z    @Z                @Z        @Z      @Z         @Z         @Z\n)INIT\n  .ZVARS = '(TBSEQ TBEXT TBCYL TBTRA TBTRK TBBEG TBEND)'\n  &TBS = HALF\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "USR#PT1": {"ttr": 10765, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x91\\x06_\\x00\\x91\\x12\\x7f\\x12@\\x00\\x18\\x00\\x16\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1991-03-06T00:00:00", "modifydate": "1991-05-07T12:40:00", "lines": 24, "newlines": 22, "modlines": 0, "user": "S218"}, "text": ")BODY\n+\n%           Implementation of USER Applications in ISPF/PDF\n+\n+\n+         ISPF/PDF is a tool to provide users with full-screen EDIT and\n+    utility capabilities.  IBM's provided PANELS have been extended to\n+    give users additional capability.  A user may use this capability\n+    and create ISPF/PDF PANELS, CLISTS, SKELETONS, MESSAGES, and\n+    TABLES.  The MASTER panel has an option for your developed ISPF\n+    system.  The following is a method of exploiting this option\n+    without altering any of the provided dataset names:\n+\n+\n+      1.  Place a CLIST in your 'userid.ISPF.PROFILE' called\n+    AUTOEXEC to do allocations of your own PANEL, MESSAGE, SKELETON,\n+    and TABLE libraries.  You will exploit the LIBDEF facility of\n+    ISPF/PDF.\n+\n+\n+                  (continued on next page - press ENTER)\n)PROC\n &ZCONT = USR#PT2\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "USR#PT2": {"ttr": 10767, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x12\\x8f\\x00\\x91\\x12\\x8f\\x07A\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-08T00:00:00", "modifydate": "1991-05-08T07:41:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "S218"}, "text": ")BODY\n+\n+                  Implementation  (continued)\n+\n+      2.  Selection U is entered on the MASTER panel and the CLIST\n+    called USEREXEC in your file 'userid.ISPF.PROFILE' will be invoked.\n+    The CLIST called USEREXEC would look something like as follows:\n+\n+        PROC 0\n+        ALLOC FI(CLIST) DA(-user clist library name-) SHR REUSE\n+        CONCAT (SYSPROC,CLIST)\n+        ALLOC FI(ISPPUSR) SHR REUSE DA('-YOUR PANEL LIB-')\n+        ALLOC FI(ISPMUSR) SHR REUSE DA('-YOUR MESSAGE LIB-')\n+        ALLOC FI(ISPSUSR) SHR REusE DA('-YOUR SKELETON LIB-')\n+        ALLOC FI(ISPLUSR) SHR REUSE DA('-YOUR USERLINK LIB-')\n+        ALLOC FI(ISPTUSR) SHR REUSE DA('-YOUR TABLE LIB-')\n+        ALLOC FI(ISPTABU) SHR REUSE DA('-YOUR OUTPUT TABLE LIB-')\n+        ALLOC FI(ISPFILU) SHR REUSE DA('-YOUR FILE TAILORING OUTPUT-)  LIB-')\n+        /*     Allocate all other needed files with ALLOC cmd    */\n+        /*     as needed.                                        */\n+        ALLOC FI(- DDNAME -) DA(- DATASET NAME -) SHR REUSE\n+        ALLOC FI(- DDNAME -) DA(- DATASET NAME -) SHR REUSE\n+\n+                  (continued on next page - press ENTER)\n)PROC\n &ZCONT = USR#PT3\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "USR#PT3": {"ttr": 10769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x91\\x06_\\x00\\x91\\x12\\x8f\\x07D\\x00\\x14\\x00\\x16\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1991-03-06T00:00:00", "modifydate": "1991-05-08T07:44:00", "lines": 20, "newlines": 22, "modlines": 0, "user": "S218"}, "text": ")BODY\n+\n+                  Implementation  (continued)\n+\n+        /*  now the LIBDEF services of ISPF/PDF will be invoked to have  */\n+        /*  your libraries searched ahead of the system libraries        */\n+        ISPEXEC LIBDEF ISPPLIB DATASET ID('-your panel lib-')\n+        ISPEXEC LIBDEF ISPMLIB DATASET ID('-your message lib-')\n+        ISPEXEC LIBDEF ISPSLIB DATASET ID('-your skeleton lib-')\n+        ISPEXEC LIBDEF ISPLLIB DATASET ID('-your userlink lib-')\n+        ISPEXEC LIBDEF ISPTLIB DATASET ID('-your table lib-')\n+        ISPEXEC LIBDEF ISPTABL DATASET ID('-your output table lib-')\n+        ISPEXEC LIBDEF ISPFILE DATASET ID('-your file tailoring output lib-')\n+\n+\n+\n+                  (continued on next page - press ENTER)\n)PROC\n &ZCONT = USR#PT4\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "USR#PT4": {"ttr": 10771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x91\\x06_\\x00\\x91\\x12\\x8f\\x07G\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1991-03-06T00:00:00", "modifydate": "1991-05-08T07:47:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "S218"}, "text": ")BODY\n+\n+                  Implementation  (continued)\n+\n+        /*     now we need to invoke the user selection panel or other   */\n+        /*     means to get into our application. There are other ways   */\n+        /*     to invoke the application not shown here.                 */\n+        ISPEXEC PANEL(-USER PANEL NAME-) NEWAPPL(USR)\n+        /*                                                               */\n+        /*    at processing termination, return the libraries            */\n+        /*                                                               */\n+        ISPEXEC LIBDEF ISPMLIB\n+        ISPEXEC LIBDEF ISPPLIB\n+        ISPEXEC LIBDEF ISPSLIB\n+        ISPEXEC LIBDEF ISPTLIB\n+        ISPEXEC LIBDEF ISPTABL\n+        ISPEXEC LIBDEF ISPFILE\n+        ISPEXEC LIBDEF ISPLLIB\n+        DECONCAT (CLIST)\n+        FREE FI(CLIST)\n+        FREE FI( -free all other files allocated- )\n+        EXIT 0\n+\n+                  (continued on next page - press ENTER)\n)PROC\n &ZCONT = USR#PT5\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "USR#PT5": {"ttr": 10773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x91\\x06_\\x00\\x91\\x12\\x7f\\x12P\\x00\\x17\\x00\\x19\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1991-03-06T00:00:00", "modifydate": "1991-05-07T12:50:00", "lines": 23, "newlines": 25, "modlines": 0, "user": "S218"}, "text": ")BODY\n+\n+                              SUMMARY\n+\n+\n+        Using the outline methodology of using LIBDEF services, users\n+        can safely invoke ISPF applications from standard IBM menus\n+        and always be safe from changes in system library names. New\n+        release of the ISPF and ISPF/PDF products can cause library\n+        name changes.  Plus, new third party vendor products added by\n+        the systems personnel can causes allocations of libraries to\n+        change without notice.  Use of this user interface will mean\n+        no interruption of service to our user community.\n+\n+\n+        If you have any questions, please call or visit your local\n+        Technical support office.\n+\n+\n+\n+                  Please  press  PF3  to return  Master Menu\n+\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "USRCMD": {"ttr": 10775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x91\\x10/\\x00\\x91\\x12\\x8f\\x07I\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1991-04-12T00:00:00", "modifydate": "1991-05-08T07:49:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "S218"}, "text": "PROC 0\n/* ----------------------------------------------------------- */\n/*      THIS A CLIST TO SEE IF THE USER HAS INSTALLED THERE    */\n/*      OWN PANELS.                                            */\n/* ----------------------------------------------------------- */\nCONTROL NOLIST NOMSG\nIF &SYSDSN('&SYSUID..ISPF.PROFILE(USEREXEC)') = OK THEN +\n   DO\n   EXEC   '&SYSUID..ISPF.PROFILE(USEREXEC)'\n   END\nELSE  +\n   DO\n   ISPEXEC  SELECT PGM(ISPTUTOR) PARM(USR#PT1)\n   END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VFORT#C": {"ttr": 10777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\t\\x00\\x00\\x00\\x92\\x13/\\x00\\x99\\x19\\x9f\\x13\\x04\\x00>\\x00'\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@\"", "ispf": {"version": "01.09", "flags": 0, "createdate": "1992-05-11T00:00:00", "modifydate": "1999-07-18T13:04:00", "lines": 62, "newlines": 39, "modlines": 0, "user": "S218"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      VS FORTRAN PROMPTER                               */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST NOMSG NOPROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &PODSN  = &STR(   )\nSET &USERLIB = &STR(  )\nSET &FREE    = &STR(FIXED)\nSET &LVL     = &STR(77)\nSET &FPS     = &STR(N)\nSET &ULIB    = &STR( )\nSET &UFIPS   = &STR( )\nALLOC FI(ISPLUSR)  DA('SYS1.FORTVS') UNIT(SYSDA) VOL(SY1AL1) +\n         SHR REUSE\nISPEXEC  LIBDEF  ISPLLIB  LIBRARY ID(ISPLUSR)\n/*--------------------------------------------------------*/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC ADDPOP COLUMN(1) ROW(1)\n   ISPEXEC DISPLAY PANEL(VFORT#P) CURSOR(PODSN)\n   SET &RC = &LASTCC\n   ISPEXEC REMPOP\n   IF &RC = 8 THEN GOTO ALLDONE\n   IF  &MAXCC NE 0  THEN  GOTO ERRMSG\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      PROCESS THE REQUEST                               */\n   /*--------------------------------------------------------*/\n   ISPEXEC  VGET  (&PODSN &USERLIB &FREE &LVL &FPS)\n   IF  &USERLIB  =  &Z THEN +\n       DO\n       SET &ULIB = &STR(NOLIB)\n       END\n   ELSE  +\n       DO\n       SET &ULIB = &STR(LIB(&USERLIB))\n       END\n   IF  &FPS = &STR(S)  |  &FPS = &STR(F) THEN   +\n       DO\n       SET &FIPS = &STR(FIPS(&FPS)\n       END\n   ELSE  +\n       DO\n       SET &FIPS = &STR(NOFIPS)\n       END\n   VSFORT  &PODSN  &ULIB  &FIPS  AUTODBL(NONE)  LANGLVL(&LVL)  +\n           NOLOAD NOSXM PRINT OPT(0) TERM\n   GOTO LOOP\nERRMSG:  +\n  WRITE  **  SEVERE  PANEL  ERROR ***\nALLDONE: +\nISPEXEC  LIBDEF  ISPLLIB\nFREE FI(ISPLUSR)\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VFORT#P": {"ttr": 10779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x92\\x13/\\x00\\x99\\x17/\\x070\\x00 \\x00 \\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1992-05-11T00:00:00", "modifydate": "1999-06-21T07:30:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY WINDOW(68,17) CMD(ZCMD)\n+\n+    COMMAND%===>_ZCMD                                             +\n+\n+  Enter\n+   Dataset Name%==>_PODSN                                         +\n+   Userlib to\n+    Include SRC%==>_USERLIB                                       +\n+               %==>_FREE      +FIXED or FREE format\n+               %==>_LVL       +66/77 language level\n+               %==>_FPS       +N - no FIPS checking\n+                              +S - FIPS subset level\n+                              +F - FIPS full level\n+  Note:\n+   Data set name must follow EDIT naming conventions for creating\n+   FORTRAN source code or DSM must be fully qualified in quotes.\n+\n+\n)INIT\n &ZWINTTL = 'Tool Box: VS FORTRAN Syntax Checker'\n)PROC\n VER (&PODSN,NONBLANK)    VER(&PODSN,DSNAME)\n IF (&USERLIB \u00ac= &Z)\n    VER(&USERLIB,NONBLANK)  VER(&USERLIB,DSNAME)\n VER (&LVL,NONBLANK)  VER(&LVL,LIST,66,77)\n VER (&FPS,NONBLANK)  VER(&FPS,LIST,N,S,F)\n VER (&FREE,NONBLANK)    VER(&FREE,LIST,FREE,FIXED)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "XBE": {"ttr": 11010, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x02I\\x02I\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 585, "newlines": 585, "modlines": 0, "user": "BG@PRC"}, "text": "         TITLE '   X B E L 0 1   '\n***********************************************************************\n*                                                                     *\n*        'XBEL01' - AN ISPF DIALOG SERVICES PROGRAM                   *\n*         FOR EXECUTING BROWSE OR EDIT.                               *\n*                                                                     *\n***********************************************************************\n         SPACE\n* WRITTEN BY BILL GODFREY, PRC INC.\n*  (PRC INC. OF MCLEAN, VIRGINIA, WAS FORMERLY PLANNING RESEARCH CORP.)\n* CURRENT INSTALLATION:\n*  NOAA (NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION),\n*  5200 AUTH ROAD, CAMP SPRINGS, MARYLAND 20746\n* DATE WRITTEN. NOV 27 1985.\n* DATE UPDATED. APRIL 25 1991.\n* ATTRIBUTES. RE-ENTRANT.\n* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.\n* REQUIRED PANELS.   NONE, BUT USES PANEL ISREDM02 FOR EDIT RECOVERY.\n* REQUIRED MESSAGES. NONE.\n* REQUIRED CLISTS.   NONE.\n* MODULES LOADED. ISPEXEC.\n* DESCRIPTION.\n*  THIS SPF DIALOG PROGRAM CALLS BROWSE OR EDIT\n*  USING THE DATA SET NAME SPECIFIED IN THE PARM FIELD.\n*  THE SAME THING COULD BE DONE WITH A CLIST, BUT BY USING\n*  A PROGRAM WE AVOID THE OVERHEAD OF OPENING SYSPROC.\n*\n*  THE PARM FIELD CONTAINS:\n*          1) 'B' OR 'E'\n*          2) COMMA\n*          3) A FULLY QUALIFIED DATA SET NAME,\n*  PLUS, OPTIONALLY,\n*          4) COMMA AND OPTIONAL VOLUME,\n*          5) COMMA AND OPTIONAL PROFILE,\n*          6) COMMA AND OPTIONAL MACRO\n*\n***********************************************************************\n*\n*  SPECIAL CASE:\n*  IF THE FIRST CHARACTER OF THE DSNAME IS A PERIOD, THE PERIOD\n*  WILL BE DROPPED AND THE REST OF THE DSNAME WILL BE PASSED TO\n*  BROWSE/EDIT WITHOUT QUOTES, AND BROWSE/EDIT WILL INSERT THE\n*  THE TSO USER PREFIX (IF THERE IS ONE) AT THE FRONT OF THE\n*  DSNAME.  THIS IS IN CASE YOUR PANEL SPECIFIES:\n*          PGM(XBEL01) PARM(E,&ZPREFIX..LIB.CNTL)\n*  AND &ZPREFIX IS NULL, WHICH IT IS WHEN PROFILE NOPREFIX.\n*\n***********************************************************************\n*\n*    SPECIFYING THE MEMBER NAME IN THE ZCMD FIELD.\n*\n*    IF THE DSNAME IS A PDS WITH NO MEMBER SPECIFIED, BROWSE/EDIT\n*    WILL DISPLAY A MEMBER SELECTION LIST.  YOU CAN, HOWEVER\n*    SPECIFY THE MEMBER ANOTHER WAY.  YOUR PANEL )PROC SECTION\n*    COULD SPECIFY:\n*\n*     &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n*                   C,'PGM(XBEL01) PARM(E,&ZPREFIX..LIB.CLIST) NOCHECK'\n*                   J,'PGM(XBEL01) PARM(E,&ZPREFIX..LIB.CNTL) NOCHECK'\n*                 ' ',' '\n*                   X,'EXIT'\n*                   *,'?' )\n*     &ZTRAIL = .TRAIL\n*\n*    THIS ALLOWS YOU TO SPECIFY THE MEMBER NAME BY APPENDING\n*    A PERIOD AND THE MEMBER NAME TO THE SELECTION FIELD\n*    REPRESENTED BY &ZCMD.  IN THE ABOVE EXAMPLE, IF YOU SELECTED\n*    'J' IN THE &ZCMD FIELD, YOU WOULD GET A MEMBER SELECTION LIST\n*    FOR THE PDS LIB.CLIST, BUT IF YOU ENTERED 'J.ABC' INSTEAD\n*    YOU WOULD GET MEMBER ABC DIRECTLY.\n*\n***********************************************************************\n*\n*  LOG OF CHANGES:\n*    06JUN88 - USE ZTRAIL INSTEAD OF XBEMEM\n*              FIX BUG IN VOLUME: 1ST BCT AFTER PARMVOL WAS TO PARMDSN\n*              ADD EDIT PROFILE AND MACRO.\n*    24MAY90 - ADD RECOVERY SUPPORT.\n*    25APR91 - NO CODE CHANGES. MINOR COMMENT CHANGES.\n*\n         SPACE\nXBEL01   START\n         USING *,R10,R11\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'XBEL01 1.0 '\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n@PROLOG  STM   14,12,12(R13)       SAVE REGISTERS\n         LR    R10,R15             LOAD BASE REGISTER\n         LA    R15,1\n         LA    R11,4095(R15,R10)\n         LR    R2,R1               PARM POINTER\n         L     R0,@SIZE            WORKAREA SUBPOOL AND LENGTH\n         GETMAIN R,LV=(0)\n         LR    R9,R1               INITIALIZE WORKAREA POINTER\n         SPACE 1\n         ST    R13,4(,R9)          CHAIN SAVEAREA\n         ST    R9,8(,R13)          CHAIN SAVEAREA\n         LR    R13,R9              UPDATE SAVEAREA POINTER\n         USING @DATA,R9\n         XC    ISPEXEC,ISPEXEC\n         MVI   DSNAME,C' '\n         MVC   DSNAME+1(55),DSNAME\n         MVC   VOLUME,DSNAME\n         MVC   BLANKS,DSNAME\n         MVC   PROFILE,BLANKS\n         MVC   MARCO,BLANKS\n         MVC   DSNAME+56(8),DSNAME\n         L     R1,0(,R2)           POINT TO PARM\n         LH    R0,0(,R1)           GET LENGTH\n         LTR   R0,R0               IF LENGTH ZERO\n         BZ    EXIT12                 THEN EXIT\n         LA    R1,2(,R1)           POINT TO FIRST BYTE OF PARM\n         SPACE\n***********************************************************************\n*                                                                     *\n*         GET 'B' OR 'E' FROM PARM                                    *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   BORE,=CL8'BROWSE'\n         CLI   0(R1),C'B'\n         BE    GOTBORE\n         CLI   0(R1),C'E'\n         BNE   EXIT12\n         MVC   BORE,=CL8'EDIT'\nGOTBORE  LA    R1,1(,R1)\n         BCT   R0,COMMA1\n         B     EXIT12              JUST 1 BYTE IN PARM\nCOMMA1   CLI   0(R1),C','\n         BNE   EXIT12\n         LA    R1,1(,R1)\n         BCT   R0,GETDSN\n         B     EXIT12              JUST 2 BYTES IN PARM\n         SPACE\n***********************************************************************\n*                                                                     *\n*         GET DSNAME AND VOLUME FROM PARM                             *\n*                                                                     *\n***********************************************************************\n         SPACE\nGETDSN   MVI   DSNAME,C''''        LEADING QUOTES\n         MVI   QUOTES,C''''        CLOSING QUOTES\n         LA    R14,DSNAME+1\n         CLI   0(R1),C'.'          IS FIRST CHARACTER A PERIOD\n         BNE   QUOTED              NO\n         BCTR  R14,0               YES, BACK UP OVER LEADING QUOTES\n         MVI   QUOTES,C' '         CLOSING BLANK\n         LA    R1,1(,R1)           POINT PAST PERIOD\n         BCT   R0,QUOTED           REDUCE LENGTH BY 1 AND BRANCH\n         B     EXIT12              PARM WAS JUST A PERIOD\nQUOTED   LA    R15,54(,R14)        MAX LENGTH 54\nPARMDSN  CLI   0(R1),C','          IT THIS A COMMA\n         BE    PARMCOM2            YES, FINISHED WITH DSNAME\n         CR    R14,R15             TOO LONG?\n         BE    EXIT12              YES, EXIT\n         MVC   0(1,R14),0(R1)\n         LA    R1,1(,R1)\n         LA    R14,1(,R14)\n         BCT   R0,PARMDSN\n         MVC   0(1,R14),QUOTES     CLOSE QUOTES\n         B     PARMX\nPARMCOM2 MVC   0(1,R14),QUOTES     CLOSE QUOTES\n         LA    R1,1(,R1)           POINT PAST COMMA\n         BCT   R0,PARMNXT2\n         B     PARMX               NOTHING FOLLOWS COMMA\nPARMNXT2 LA    R14,VOLUME\n         LA    R15,6(,R14)         MAX LENGTH 6\nPARMVOL  CLI   0(R1),C','          COMMA\n         BE    PARMCOM3            YES, END OF NAME\n         CR    R14,R15             TOO LONG\n         BE    EXIT12              YES, EXIT\n         MVC   0(1,R14),0(R1)\n         LA    R1,1(,R1)\n         LA    R14,1(,R14)\n         BCT   R0,PARMVOL\n         B     PARMX\nPARMCOM3 LA    R1,1(,R1)           POINT PAST COMMA\n         BCT   R0,PARMNXT3\n         B     PARMX               NOTHING FOLLOWS COMMA\nPARMNXT3 LA    R14,PROFILE\n         LA    R15,8(,R14)         MAX LENGTH 8\nPARMPRO  CLI   0(R1),C','          COMMA\n         BE    PARMCOM4            YES, END OF NAME\n         CR    R14,R15             TOO LONG\n         BE    EXIT12              YES, EXIT\n         MVC   0(1,R14),0(R1)\n         LA    R1,1(,R1)\n         LA    R14,1(,R14)\n         BCT   R0,PARMPRO\n         B     PARMX               NOTHING FOLLOWS COMMA\nPARMCOM4 LA    R1,1(,R1)           POINT PAST COMMA\n         BCT   R0,PARMNXT4\n         B     PARMX\nPARMNXT4 LA    R14,MARCO\n         LA    R15,8(,R14)         MAX LENGTH 8\nPARMMAC  CLI   0(R1),C','          COMMA\n         BE    PARMX               YES, END OF NAME\n         CR    R14,R15             TOO LONG\n         BE    EXIT12              YES, EXIT\n         MVC   0(1,R14),0(R1)\n         LA    R1,1(,R1)\n         LA    R14,1(,R14)\n         BCT   R0,PARMMAC\nPARMX    CLI   DSNAME+1,C''''      WAS FIRST BYTE OF PARM A COMMA\n         BE    EXIT12              YES, ERROR\n         CLI   DSNAME+1,C' '       WAS FIRST BYTE OF PARM A COMMA\n         BE    EXIT12              YES, ERROR\n         SPACE\n***********************************************************************\n*                                                                     *\n*         GET ENTRY POINT OF ISPLINK                                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LOAD  EP=ISPLINK,ERRET=EXIT12\n         ST    R0,ISPEXEC\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ISSUE CONTROL-ERRORS-RETURN SO WE WILL MAINTAIN CONTROL     *\n*                                                                     *\n***********************************************************************\n         SPACE\n*              THIS KEEPS US IN CONTROL IF BROWSE/EDIT FAILS DUE TO\n*              DATA SET NOT FOUND OR MEMBER NOT FOUND (BROWSE).\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'CONTROL'\n         ST    R0,0(,R1)\n         LA    R0,ERRORS\n         MVC   ERRORS,=CL8'ERRORS'\n         ST    R0,4(,R1)\n         LA    R0,RETURN\n         MVC   RETURN,=CL8'RETURN'\n         ST    R0,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\n***********************************************************************\n*                                                                     *\n*         GET THE VALUE OF 'ZTRAIL'                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'VCOPY'\n         ST    R0,0(,R1)\n*        LA    R0,=CL10'(XBEMEM)'\n         LA    R0,=CL10'(ZTRAIL)'\n         ST    R0,4(,R1)\n         LA    R0,MEMLEN\n         MVC   MEMLEN,=F'8'\n         ST    R0,8(,R1)\n         LA    R0,MEMNAME\n         ST    R0,12(,R1)\n         LA    R0,=CL7'MOVE'\n         ST    R0,16(,R1)\n         OI    16(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\n***********************************************************************\n*                                                                     *\n*         IF ZTRAIL CONTAINS A MEMBER NAME, APPEND IT TO THE DSN      *\n*                                                                     *\n***********************************************************************\n         SPACE\n         CH    R15,=H'0'\n         BNE   NOMEM\n         L     R15,MEMLEN\n         LTR   R15,R15\n         BZ    NOMEM\n         LA    R1,DSNAME+56\nMEMA01   CLI   0(R1),C' '\n         BNE   MEMA02\n         BCT   R1,MEMA01\nMEMA02   SR    R0,R0\n         CLI   0(R1),C''''\n         BNE   MEMA03\n         BCTR  R0,0                INDICATE QUOTES PRESENT\n         BCTR  R1,0                POINT TO CHAR PRECEDING QUOTES\nMEMA03   CLI   0(R1),C')'          IS MEMBER SPECIFIED IN PARM\n         BE    EXIT12              YES, ERROR\n         MVI   1(R1),C'('          ADD OPEN PAREN\n         LA    R1,2(,R1)           POINT TO WHERE NAME WILL GO\n         BCTR  R15,0               MEMLEN MINUS 1 FOR EX\n         B     *+10\n         MVC   0(0,R1),MEMNAME     (EXECUTED)\n         EX    R15,*-6             MOVE MEMBER NAME\n         LA    R1,1(R15,R1)        POINT PAST MEMBER NAME\n         MVI   0(R1),C')'          CLOSE PARENS\n         LTR   R0,R0               WERE QUOTES PRESENT\n         BZ    *+8                 NO\n         MVI   1(R1),C''''         YES, PUT QUOTES BACK\nNOMEM    EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         IF EDIT, INVOKE EDIT RECOVERY                               *\n*            IF RECOVERY PENDING,                                     *\n*               DISPLAY PANEL ISREDM02                                *\n*               (USER WILL THEN ENTER A CHOICE)                       *\n*               COPY ZEDCMD TO CMDNAME                                *\n*               DEFER, CANCEL, OR PROCESS, DEPENDING ON CMDNAME       *\n*               CHECK FOR MORE RECOVERY PENDING                       *\n*                                                                     *\n***********************************************************************\n         SPACE\n         CLI   BORE,C'E'\n         BNE   EDRX\nEDRLOOP  LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'EDREC'\n         ST    R0,0(,R1)\n         LA    R0,QUERY\n         MVC   QUERY,=CL8'QUERY'\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         LTR   R15,R15             IF NOTHING PENDING\n         BZ    EDRX                   GO INVOKE EDIT\n         C     R15,=F'4'           IF RC NOT = 4 (PENDING)\n         BNE   EXIT12                 SEVERE ERROR\n         SPACE\n*               DISPLAY PANEL 'ISREDM02' TO GET THE USER'S DECISION\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'DISPLAY'\n         ST    R0,0(,R1)\n         LA    R0,PANEL\n         MVC   PANEL,=CL9'ISREDM02 '\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         LTR   R15,R15\n         BNZ   EDRDEF\n         SPACE\n*              PANEL ISREDM02 COPIES THE USER'S RESPONSE IN ZCMD\n*              TO ZEDCMD, THEN ERASES ZCMD.\n*              NOW WE CALL ZCOPY TO GET THE VALUE IN ZEDCMD\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'VCOPY'\n         ST    R0,0(,R1)\n         LA    R0,=CL10'(ZEDCMD)'\n         ST    R0,4(,R1)\n         LA    R0,CMDLEN\n         MVC   CMDLEN,=F'8'\n         ST    R0,8(,R1)\n         LA    R0,CMDNAME\n         ST    R0,12(,R1)\n         MVI   CMDNAME,C' '\n         LA    R0,=CL7'MOVE'\n         ST    R0,16(,R1)\n         OI    16(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         LTR   R15,R15             IF USER ENTERED END\n         BNZ   EDRDEF                 DEFER\n         SPACE\n         L     R0,CMDLEN\n         LTR   R0,R0\n         BNZ   *+8\n         MVI   CMDNAME,C' '\n         SPACE\n         CLI   CMDNAME,C'D'        IF USER REPLIED DEFER\n         BE    EDRDEF                 DEFER\n         CLI   CMDNAME,C'C'        IF USER REPLIED CANCEL\n         BE    EDRCAN                 CANCEL\n         CLI   CMDNAME,C' '        IF USER HIT ANYTHING ELSE BUT ENTER\n         BNE   EDRDEF                 DEFER\n         SPACE\n         LA    R1,PARAMS           USER HIT ENTER, SO PROCESS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'EDREC'\n         ST    R0,0(,R1)\n         LA    R0,PROCESS\n         MVC   PROCESS,=CL8'PROCESS '\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         LTR   R15,R15\n         BZ    EDRLOOP\n         C     R15,=F'4'\n         BNE   EXIT12\n         B     EDRLOOP\n         SPACE\nEDRDEF   LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'EDREC'\n         ST    R0,0(,R1)\n         LA    R0,DEFER\n         MVC   DEFER,=CL8'DEFER'\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         LTR   R15,R15             IF NOT SUCCESSFUL\n         BNZ   EXIT12                 SEVERE ERROR, GIVE UP\n         B     EDRLOOP             QUERY AGAIN IN CASE MULTIPLE PENDING\n         SPACE\nEDRCAN   LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'EDREC'\n         ST    R0,0(,R1)\n         LA    R0,CANCEL\n         MVC   CANCEL,=CL8'CANCEL '\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         LTR   R15,R15             IF NOT SUCCESSFUL\n         BNZ   EXIT12                 SEVERE ERROR, GIVE UP\n         B     EDRLOOP             QUERY AGAIN IN CASE MULTIPLE PENDING\nEDRX     EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         CALL THE BROWSE OR EDIT SERVICE                             *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,BORE\n         ST    R0,0(,R1)\n         LA    R0,DSNAME\n         ST    R0,4(,R1)\n         LA    R0,VOLUME\n         ST    R0,8(,R1)\n         CLI   BORE,C'B'\n         BE    ONLY3\n*              IF NEITHER PROFILE NOR MACRO ARE SPECIFIED, JUST PASS\n*              3 PARAMETERS, IN CASE IT'S AN OLDER ISPF.\n         CLI   PROFILE,C' '\n         BNE   EMORE\n         CLI   MARCO,C' '\n         BE    ONLY3\nEMORE    LA    R0,BLANKS PSWD\n         ST    R0,12(,R1)\n         LA    R0,BLANKS PANEL\n         ST    R0,16(,R1)\n         LA    R0,MARCO\n         ST    R0,20(,R1)\n         LA    R0,PROFILE\n         ST    R0,24(,R1)\n         OI    24(R1),X'80'\n         B     *+8\nONLY3    OI    8(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         LTR   R15,R15\n         BZ    EXIT0\n         SPACE\n***********************************************************************\n*                                                                     *\n*         GET THE VALUE OF 'ZERRMSG'                                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'VCOPY'\n         ST    R0,0(,R1)\n         LA    R0,=CL10'(ZERRMSG)'\n         ST    R0,4(,R1)\n         LA    R0,ZERRMSL\n         MVC   ZERRMSL,=F'8'\n         ST    R0,8(,R1)\n         LA    R0,ZERRMSG\n         ST    R0,12(,R1)\n         LA    R0,=CL7'MOVE'\n         ST    R0,16(,R1)\n         OI    16(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         LTR   R15,R15\n         BNZ   EXIT12\n         SPACE\n***********************************************************************\n*                                                                     *\n*         DISPLAY MESSAGE 'ZERRMSG' ON NEXT PANEL                     *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'SETMSG'\n         ST    R0,0(,R1)\n         LA    R0,ZERRMSG\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         B     EXIT12\n         SPACE\n***********************************************************************\n*                                                                     *\n*         RETURN TO CALLER                                            *\n*                                                                     *\n***********************************************************************\n         SPACE\nEXIT0    SR    R15,R15             RETURN CODE ZERO\n         B     EXIT\nEXIT12   LA    R15,12              RETURN CODE 12\nEXIT     LR    R2,R15              SAVE RETURN CODE\n         L     R0,ISPEXEC          GET ENTRY POINT OF ISPLINK\n         LTR   R0,R0               WAS IT LOADED\n         BZ    NODEL               NO, BYPASS DELETE\n         DELETE EP=ISPLINK\n         XC    ISPEXEC,ISPEXEC\nNODEL    EQU   *\n         LR    R1,R13              POINT R1 TO AREA TO BE FREED\n         L     R0,@SIZE            SUBPOOL AND LENGTH\n         L     R13,4(,R13)         RESTORE PREVIOUS SAVEAREA\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2\n         LM    0,12,20(R13)        RESTORE REGISTERS\n         L     14,12(,R13)         LOAD RETURN ADDRESS\n         BR    14                  RETURN\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n         LTORG\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nISPEXEC  DS    F\nPARAMS   DS    7F\nSERVICE  DS    CL8\nERRORS   DS    CL8\nRETURN   DS    CL8\nQUERY    DS    CL8\nDEFER    DS    CL8\nCANCEL   DS    CL8\nPROCESS  DS    CL8\nCMDLEN   DS    F\nCMDNAME  DS    CL8\nPANEL    DS    CL10\nBORE     DS    CL8\nDSNAME   DS    CL56,CL8\nVOLUME   DS    CL6\nPROFILE  DS    CL8\nMARCO    DS    CL8\nBLANKS   DS    CL8\nQUOTES   DS    CL1\nMEMLEN   DS    F\nMEMNAME  DS    CL8\nZERRMSL  DS    F\nZERRMSG  DS    CL8\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XBE$": {"ttr": 11020, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "BG@PRC"}, "text": "//$USERID1 JOB (ACCT),'XBE'\n//ASMFCL EXEC ASMFCL,PARM.ASM='NODECK,OBJECT,NOXREF,NORLD',\n//             PARM.LKED='LIST,MAP,NCAL,RENT,REUS,REFR',\n//             COND.LKED=(0,NE,ASM)\n//ASM.SYSIN DD DSN=$USERID.SOURCE(XBE),DISP=SHR\n//LKED.SYSLMOD DD DSN=SYS2.CMDLIB(XBE),UNIT=,SPACE=,DISP=SHR\n//LKED.SYSIN   DD DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XBEDOC": {"ttr": 11265, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x8b\\x00\\x8b\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 139, "newlines": 139, "modlines": 0, "user": "BG@PRC"}, "text": "XBE - EXECUTE BROWSE OR EDIT                              APRIL 25 1991\n\nWRITTEN BY BILL GODFREY, PRC INC.\n (PRC INC. OF MCLEAN, VIRGINIA, WAS FORMERLY PLANNING RESEARCH CORP.)\n\nXBE IS A PROGRAM THAT IS EXECUTED FROM ISPF SELECTION PANELS\n\nXBE ALLOWS YOU TO SET UP ISPF SO THAT YOU CAN HAVE SHORT CODE WORDS\nFOR DATA SETS THAT YOU FREQUENTLY EDIT OR BROWSE.\n\nFOR EXAMPLE, WITH A SINGLE-LINE CHANGE TO THE PRIMARY OPTION PANEL,\nISR@PRIM, YOU WILL BE ABLE TO GO STRAIGHT TO THE EDIT MEMBER SELECTION\nLIST FOR SYS1.PROCLIB JUST BY ENTERING \"PR\" FROM THE PRIMARY OPTION\nPANEL, OR BY ENTERING \"=PR\" FROM ANYWHERE IN ISPF.  YOU WILL ALSO\nBE ABLE TO GO STRAIGHT INTO EDIT FOR A SPECIFIC MEMBER OF SYS1.PROCLIB\nJUST BY ENTERING \"PR.MEMBERNAME\" FROM THE PRIMARY OPTION MENU, OR BY\nENTERING \"=PR.MEMBERNAME\" FROM ANYWHERE IN ISPF.\n\nTHE LINE TO BE ADDED TO ISR@PRIM WOULD LOOK LIKE THIS:\n\n          PR,'PGM(XBE) PARM(E,SYS1.PROCLIB) NOCHECK'\n\nIF YOU ADD ANOTHER LINE LIKE THIS:\n\n        EDIT,'PGM(XBE) PARM(E,ISR.V2R3M0.ISRPLIB(ISR@PRIM)) NOCHECK'\n\nYOU WILL BE ABLE TO GO DIRECTLY INTO EDIT ON YOUR PRIMARY OPTION PANEL\nITSELF JUST BY ENTERING \"EDIT\" FROM THE PRIMARY OPTION MENU, OR \"=EDIT\"\nFROM ANYWHERE.  WE HAVE MANY OF OUR SELECTION PANELS SET UP TO GO INTO\nEDIT ON THEMSELVES JUST BY SPECIFYING 'EDIT' ON THAT PANEL.\n\nIF YOU ADD ANOTHER LINE LIKE THIS:\n\n                E,'PGM(XBE) PROC(E,&ZUSER..LIB.CNTL) NOCHECK'\n\nTHEN EACH USER ON THE SYSTEM CAN GET INTO A SPECIFIC MEMBER OF HIS OR\nHER LIB.CNTL LIBRARY FROM ANYWHERE IN ISPF JUST BY ENTERING\n\"=E.MEMBERNAME\".\n\nTO KEEP UPDATE ACTIVITY ON ISR@PRIM TO A MINIMUM, WE SET UP A NEW PANEL\nNAMED 'DSNP01' WHICH IS REACHED FROM THE PRIMARY MENU BY ENTERING 'D'.\nTHE PRIMARY OPTION PANEL HAS THIS LINE ADDED:\n\n                D,'PANEL(DSNP01)'\n\nTHE 'DSNP02' PANEL LOOKS LIKE THIS (IN ABBREVIATED FORM):\n\n\n%--------------------------  SYSTEM DATA SET MENU  -------------------\n%OPTION  ===>_ZCMD                                                             +\n%\n%      PA +SYS1.PARMLIB          % PA2 +SYS2.PARMLIB\n%      PR +SYS1.PROCLIB          % PR2 +SYS2.PROCLIB\n%\n%       X +EXIT          - RETURN TO PRIMARY OPTION MENU\n%\n+ENTER%END+COMMAND TO RETURN TO PRIMARY OPTION MENU\n%\n)INIT\n  .HELP = ISR00003\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n               PA,'PGM(XBE) PARM(E,SYS1.PARMLIB) NOCHECK'\n               PR,'PGM(XBE) PARM(E,SYS1.PROCLIB) NOCHECK'\n              PA2,'PGM(XBE) PARM(E,SYS2.PARMLIB) NOCHECK'\n              PR2,'PGM(XBE) PARM(E,SYS2.PROCLIB) NOCHECK'\n              JCL,'PGM(XBE) PARM(E,SYS2.JCLLIB) NOCHECK'\n             EDIT,'PGM(XBE) PARM(E,SYS2.PANELS(DSNP01)) NOCHECK'\n           BROWSE,'PGM(XBE) PARM(B,SYS2.PANELS(DSNP01)) NOCHECK'\n              ' ',' '\n                X,'EXIT'\n                *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n\n\nNOTICE THAT YOUR MENU DOESN'T HAVE TO DISPLAY ALL OF THE AVAILABLE\nOPTIONS.  IN THE EXAMPLE ABOVE, \"JCL\" WILL STILL TAKE YOU INTO\nSYS2.JCLLIB EVEN THOUGH IT'S NOT SHOWN ON THE MENU. \"EDIT\" WILL\nPUT YOU INTO EDIT ON THE PANEL ITSELF.\n\nUNDER THIS KIND OF SETUP, YOU CAN GET INTO SYS1.PARMLIB BY ENTERING\n\"D.PA\" FROM THE PRIMARY MENU, OR BY ENTERING \"=D.PA\" FROM ANYWHERE.\nYOU CAN GET INTO A SPECIFIC MEMBER OF SYS1.PARMLIB BY ENTERING\n\"=D.PA.MEMBERNAME\".\n\nOF COURSE YOU CAN ALSO SEE THE \"SYSTEMS DATA SET\" MENU DEFINED ABOVE\nBY ENTERING \"D\" FROM THE PRIMARY MENU, AND THEN ENTER \"PA\" FROM THE\nNEW MENU TO GET INTO SYS1.PARMLIB.\n\nXBE REQUIRES TWO PARAMETERS, AND ACCEPTS THREE ADDITIONAL OPTIONAL\nPARAMETERS.  PARAMETERS ARE SEPARATED BY COMMAS. OMITTED PARAMETERS\nARE SPECIFIED BY CONSECUTIVE COMMAS.\n .  THE 1ST PARAMETER IS THE BROWSE-OR-EDIT OPTION \"B\" OR \"E\".\n .  THE 2ND PARAMETER IS THE DATA SET NAME, WHICH CAN BE A PDS,\n    PDS(MEMBERNAME), OR SEQUENTIAL DATA SET.\n .  THE 3RD PARAMETER IS AN OPTIONAL VOLUME, FOR UNCATALOGED DATA SETS\n    (OR FOR BYPASSING THE CATALOG OVERHEAD FOR CATALOGED DATA SETS).\n .  THE 4TH PARAMETER IS AN OPTIONAL PROFILE NAME FOR EDIT.\n .  THE 5TH PARAMETER IS AN OPTIONAL INITIAL MACRO FOR EDIT.\n\nAFTER INSTALLING XBE, AND AFTER INSTALLING ANY UPGRADE OR MAINTENANCE\nTO ISPF/PDF, IT IS A GOOD IDEA TO TEST THE EDIT RECOVERY FEATURE TO\nMAKE SURE THAT IT WORKS OK.\n1.  EDIT SOMETHING.\n2.  IN EDIT, SET RECOVERY ON IF IT ISN'T ALREADY.\n3.  MAKE SOME CHANGES, BUT DON'T SAVE.\n4.  STILL IN EDIT, ASK THE OPERATOR TO CANCEL YOUR SESSION\n    (OR GO TO LUNCH AND LET YOUR SESSION TIME OUT).\n5.  LOGON AGAIN, AND GO INTO ISPF/PDF.\n6.  EDIT SOMETHING USING AN OPTION THAT GOES THRU XBE.\n    IT DOESN'T HAVE TO BE THE SAME THING YOU WERE EDITING BEFORE.\n7.  IF YOU GET AN EDIT RECOVERY MENU ASKING WHAT YOU WANT\n    TO DO ABOUT THE STUFF YOU WERE EDITING BEFORE, IT'S WORKING,\n    AND YOU CAN SKIP THE REMAINING STEPS.\n8.  REPEAT STEPS 1 THRU 5. THEN, INSTEAD OF STEP 6, GO TO STEP 9.\n9.  EDIT SOMETHING BY SELECTING OPTION \"2\".\n    IF YOU GET AN EDIT RECOVERY MENU, THEN IBM'S EDIT RECOVERY IS OK,\n    AND SOMETHING IN XBE HAS TO BE CHANGED TO FIX THE PROBLEM, ALTHOUGH\n    EVERYTHING ELSE IN XBE SHOULD STILL WORK.\n    IF YOU DON'T GET AN EDIT RECOVERY MENU, THEN THE PROBLEM WITH\n    EDIT RECOVERY IS NOT RELATED TO XBE.  CORRECT IT AND REPEAT THE\n    WHOLE PROCESS.\n\n\nNOTE: WHENEVER YOU MAKE A CHANGE TO A PANEL THAT HAS ALREADY BEEN USED\nSINCE YOU ENTERED ISPF, THE CHANGE WILL NOT TAKE EFFECT UNTIL THE NEXT\nTIME YOU ENTER ISPF AFTER HAVING EXITED FROM IT.\n\n\n   * * *   W A R N I N G   * * *\nIT IS DANGEROUS TO CHANGE THE PRIMARY OPTION PANEL (ISR@PRIM) BECAUSE\nIF YOU MAKE A MISTAKE THAT LEAVES THE PANEL UNUSABLE, NOBODY ON THE\nSYSTEM WILL BE ABLE TO GET INTO ISPF, INCLUDING YOURSELF, SO IT CAN\nBE VERY DIFFICULT TO CORRECT THE PROBLEM.  SO BE SURE YOU HAVE A WAY\nOF RECOVERING ISR@PRIM QUICKLY, AND DON'T DEPEND ON USING ISPF TO DO\nTHE RECOVERY.  IF YOU ARE GOING TO ADD A SELF-EDIT OPTION TO THE\nPRIMARY OPTION PANEL, YOU BETTER HAVE SOME SECURITY ON THE PANEL\nLIBRARY THAT RESTRICTS WRITE-ACCESS.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ZAP#C": {"ttr": 11268, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00\\x00\\x00\\x863/\\x00\\x87\\x11\\x1f\\x14\\x00\\x00&\\x00$\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "1986-11-28T00:00:00", "modifydate": "1987-04-21T14:00:00", "lines": 38, "newlines": 36, "modlines": 0, "user": "$354JDM"}, "text": "PROC 0 DEBUG\n/*--------------------------------------------------------*/\n/*      INVOKE FULL SCREEN SUPERZAP                       */\n/*--------------------------------------------------------*/\nCONTROL  NOLIST NOMSG PROMPT NOFLUSH\nIF &DEBUG NE &STR() THEN +\n   CONTROL LIST CONLIST SYMLIST\nISPEXEC CONTROL ERRORS RETURN\nSET &PODSN  = &STR(   )\nSET &VOLSER = &STR(   )\nSET &LGF    = &STR(NO)\nSET &CLS    = &STR(Q)\nSET &VERBOSE = &STR(TERSE)\nSET &DEST    = &STR(LOCAL)\n/**********************************************************/\n/*      THIS IS WHERE THE LOOP BEGINS                     */\n/*--------------------------------------------------------*/\nLOOP:  +\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   ISPEXEC DISPLAY PANEL(ZAP#P) CURSOR(PODSN)\n   IF &LASTCC = 8 THEN GOTO ALLDONE\n   SET &LASTCC = 0\n   SET &MAXCC  = 0\n   /*--------------------------------------------------------*/\n   /*      GET THE INFO FROM THE PANEL                       */\n   /*--------------------------------------------------------*/\n   ISPEXEC  VGET  (&PODSN &VOLSER &LGF &VERBOSE &DEST &CLS)\n   ISPEXEC  FTOPEN   TEMP\n   ISPEXEC  FTINCL   ZAP#S\n   ISPEXEC  FTCLOSE\n   ISPEXEC  VGET  ZTEMPF\n   EXEC     '&ZTEMPF'\n   ISPEXEC CONTROL DISPLAY REFRESH\n   GOTO LOOP\nALLDONE: +\nCONTROL  NOLIST MSG PROMPT NOFLUSH\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZAP#P": {"ttr": 11270, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x13\\x00\\x00\\x00\\x863/\\x00\\x91\\x14/\\x13X\\x00\\x1e\\x00\\x1f\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.19", "flags": 0, "createdate": "1986-11-28T00:00:00", "modifydate": "1991-05-22T13:58:00", "lines": 30, "newlines": 31, "modlines": 0, "user": "S218"}, "text": ")ATTR\n  +  TYPE(TEXT) INTENS(LOW) SKIP(ON)\n  %  TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n  _  TYPE(INPUT) INTENS(HIGH)\n)BODY\n+\n+   COMMAND%===>_ZCMD                                                  +\n+\n+\n+\n+           % FULL Screen  S U P E R Z A P  +\n+\n+ Enter DATA SET name%===>_PODSN                                             +\n+\n+     Volume Serial  %===>_VOLSER+    Volume name if not catalogued\n+  LOG File Written  %===>_LGF+      +Yes or no - record to a log file\n+   LOG Print Class  %===>_CLS+      +Q or A\n+       Print  DEST  %===>_DEST      +Print Destination\n+  Where File  INFO  %===>_VERBOSE+  +VERBOSE or TERSE\n+\n+\n+  WARNING: This command could be lethal if misused. BE CAREFUL !\n)PROC\n VER (&PODSN,NONBLANK)    VER(&PODSN,DSNAME)\n IF (&VOLSER \u00ac= &Z)\n    VER(&VOLSER,NONBLANK)  VER(&VOLSER,NAME)\n VER (&CLS,NONBLANK)  VER(&CLS,LIST,A,Q)\n VER (&LGF,NONBLANK)  VER(&LGF,LIST,YES,NO)\n VER (&VERBOSE,NONBLANK) VER(&VERBOSE,LIST,VERBOSE,TERSE)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ZAP#S": {"ttr": 11272, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x00\\x863/\\x00\\x87\\x11\\x1f\\x13U\\x00\\x13\\x00\\x17\\x00\\x00[\\xf3\\xf5\\xf4\\xd1\\xc4\\xd4@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1986-11-28T00:00:00", "modifydate": "1987-04-21T13:55:00", "lines": 19, "newlines": 23, "modlines": 0, "user": "$354JDM"}, "text": "PROC 0 DEBUG\nCONTROL PROMPT NOFLUSH\n)SEL    &LGF  = YES\nALLOC FI(ZAPOUT) SYSOUT(&CLS) DEST(&DEST)\n)ENDSEL\nZAP      &PODSN      +\n)SEL    &VERBOSE = TERSE\n         TERSE       +\n)ENDSEL\n)SEL    &VERBOSE = VERBOSE\n         VERBOSE\n)ENDSEL\n)SEL    &LGF  =  YES\n         LOG         +\n)ENDSEL\n)SEL    &LGF  =  NO\n         NOLOG       +\n)ENDSEL\n         CRT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT161/FILE161.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT161", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}