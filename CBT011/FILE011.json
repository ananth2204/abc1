{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011041000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 529074, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE011.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 529074, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 529074, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE011.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\t\\t'", "DS1TRBAL": "b'#2'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00%\\x00\\x06\\x00&\\x00\\x00\\x00\\n'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$DOC": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x92\"_\\x00\\x92\"_\\x17R\\x00\\x12\\x00\\x01\\x00\\x12\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1992-08-12T00:00:00", "modifydate": "1992-08-12T17:52:00", "lines": 18, "newlines": 1, "modlines": 18, "user": "SBGCSC"}, "text": "ADDITIONAL DOC FOR FILE 011.                                  08/92 SBG\n                                                              08/92 SBG\n   MSG2USER AND AMSG2USR HAVE BEEN REVISED BY MORRIS KARLIN   08/92 SBG\n   OF THE HUMAN RESOURCES ADMINISTRATION OF NEW YORK CITY,    08/92 SBG\n   TO WORK ON MVS/ESA 3.1.0E  (AND HOPEFULLY BEYOND).         08/92 SBG\n                                                              08/92 SBG\n            MORRIS KARLIN                                     08/92 SBG\n            HRAMIS                                            08/92 SBG\n            111 8TH AVENUE - 6TH FLOOR                        08/92 SBG\n            NEW YORK, NY 10011                                08/92 SBG\n            (212) 206-3799                                    08/92 SBG\n                                                              08/92 SBG\n                                                              08/92 SBG\n   MILTON SOONG'S OLDER VERSION OF MSG2USER HAS BEEN KEPT     08/92 SBG\n   IN THE FILE, AND HIS CORRESPONDING TWO MEMBERS ARE CALLED  08/92 SBG\n   MSG2USEO AND AMSG2USO, RESPECTIVELY.                       08/92 SBG\n                                                              08/92 SBG\n                                                              08/92 SBG\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x87\\x04?\\x00\\x87\\x05O\\x177\\x00\\x17\\x00\\x10\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1987-02-12T00:00:00", "modifydate": "1987-02-23T17:37:00", "lines": 23, "newlines": 16, "modlines": 0, "user": "SBGCSC"}, "text": "$$DOC.....THIS MEMBER\nADEBE.....JCL TO ASSEMBLE AND LINK DEBE\nAMSG2USO..JCL TO ASSEMBLE AND LINK MSG2USER  (FROM MILTON SOONG)\nAMSG2USR..JCL TO ASSEMBLE AND LINK MSG2USER  (FROM MORRIS KARLIN)\nATSO051...JCL TO ASSEMBLE AND LINK TSO051\nDEBE......THIS VERSION WAS MODIFIED TO RUN UNDER MVS/XA AND\n          WILL NOWT SUPPORT BOTH 3420 AND 3480 TAPE DRIVES\nDEBEJCL...PROC TO START DEBE\nMSG2USEO..THIS IS A WTO EXIT. THIS EXIT WILL SEND A MESSAGE TO A TSO\n          USER WHO IS ENQUEUED ON A DATASET NEEDED BY A BATCH JOB.\n          THE FORMAT OF THE MESSAGE IS :\n               NTL861I THE FOLLOWING RESERVED DATASET NAMES\n                       UNAVAILABLE TO JJJJ\n               NTL863I DSN=DSN\nMSG2USER..THIS IS A WTO EXIT. THIS EXIT WILL SEND A MESSAGE TO A TSO\n (ESA)    USER WHO IS ENQUEUED ON A DATASET NEEDED BY A BATCH JOB.\n          THE FORMAT OF THE MESSAGE IS :\n               HRA861I THE FOLLOWING RESERVED DATASET NAMES\n                       UNAVAILABLE TO JJJJ\n               HRA863I DSN=DSN\nOLDDOC....SOME OLD DEBE DOCUMENTATION\nTSO051....THIS PROGRAM WILL GET INFORMATION FROM JCT AND WILL\n          FILL IN VARIOUS CLIST VARIABLES.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADEBE": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x04?\\x00\\x87\\x05O\\x170\\x00 \\x00 \\x00\\x00\\xe2\\xd6\\xd6\\xd5\\xc7@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-12T00:00:00", "modifydate": "1987-02-23T17:30:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "SOONG"}, "text": "//MVS#MKS  JOB (MVS19200,0169),'SOONG,MILTON',\n//         CLASS=W,        <===== TECH SERVICES CAN BE W OR O\n//         MSGCLASS=X,     <===== ROUTE OUTPUT BACK TO MY TERMINAL\n//         NOTIFY=MVS#MKS\n//*\n//SYSASM   PROC MEMBER=PROGRAM\n//*\n//ASM      EXEC PGM=IEV90,PARM='XREF,NODECK,OBJECT'\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD DSN=&&SYSUT1,UNIT=VIO,SPACE=(1700,(600,100))\n//SYSUT2   DD DSN=&&SYSUT2,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSUT3   DD DSN=&&SYSUT3,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD DSN=TECH.MVS#MKS.SOURCE(&MEMBER),DISP=SHR\n//SYSGO    DD DSN=&&OBJLIB(&MEMBER),DISP=(MOD,PASS),\n//            UNIT=WORK,SPACE=(400,(800,400,10),,,ROUND),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=880,DSORG=PO)\n//         PEND\n//*\n//DEBE   EXEC SYSASM,MEMBER=DEBE\n//*\n//*  LINK INTO AUTHORIZED LIBRARY\n//*\n//LKED   EXEC PGM=IEWL,PARM='XREF,LIST,REUS,AC=1'\n//SYSLMOD  DD  DSN=SYS2.LINKLIB,DISP=SHR\n//SYSUT1   DD  UNIT=WORK,SPACE=(CYL,(2,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=&&OBJLIB,DISP=SHR\n//SYSLIN   DD  *\n INCLUDE SYSLIB(DEBE)\n NAME DEBE(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AMSG2USO": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x04?\\x00\\x87\\x05O\\x170\\x00 \\x00 \\x00\\x00\\xe2\\xd6\\xd6\\xd5\\xc7@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-12T00:00:00", "modifydate": "1987-02-23T17:30:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "SOONG"}, "text": "//MVS#MKS  JOB (MVS19200,0169),'SOONG,MILTON',\n//         CLASS=W,        <===== TECH SERVICES CAN BE W OR O\n//         MSGCLASS=X,     <===== ROUTE OUTPUT BACK TO MY TERMINAL\n//         NOTIFY=MVS#MKS\n//*\n//SYSASM   PROC MEMBER=PROGRAM\n//*\n//ASM      EXEC PGM=IEV90,PARM='XREF,NODECK,OBJECT'\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD DSN=&&SYSUT1,UNIT=VIO,SPACE=(1700,(600,100))\n//SYSUT2   DD DSN=&&SYSUT2,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSUT3   DD DSN=&&SYSUT3,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD DSN=TECH.MVS#MKS.SOURCE(&MEMBER),DISP=SHR\n//SYSGO    DD DSN=&&OBJLIB(&MEMBER),DISP=(MOD,PASS),\n//            UNIT=WORK,SPACE=(400,(800,400,10),,,ROUND),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=880,DSORG=PO)\n//         PEND\n//*\n//MSG2USER EXEC SYSASM,MEMBER=MSG2USER\n//*\n//*  LINK INTO AUTHORIZED LIBRARY\n//*\n//LKED   EXEC PGM=IEWL,PARM='XREF,LIST,REUS,AC=1'\n//SYSLMOD  DD  DSN=SYS2.LINKLIB,DISP=SHR\n//SYSUT1   DD  UNIT=WORK,SPACE=(CYL,(2,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=&&OBJLIB,DISP=SHR\n//SYSLIN   DD  *\n INCLUDE SYSLIB(MSG2USER)\n NAME MSG2USER(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AMSG2USR": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\"_\\x00\\x92\"_\\x17\\'\\x00\\r\\x00\\r\\x00\\x00\\xc3\\xd4\\xf0\\xf3\\xd4\\xd8\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-08-12T00:00:00", "modifydate": "1992-08-12T17:27:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "CM03MQK"}, "text": "//DPA0MQKX JOB (DPA0,SYSP,OD69),'KARLIN.M',MSGLEVEL=(2,0),\n//  CLASS=M,MSGCLASS=X,NOTIFY=DPA0MQK\n/*JOBPARM ROOM=259\n//ASMFCL EXEC  ASMHCL,REGION=700K,PARM.C='NODECK,OBJECT',\n//       PARM.L='XREF,LIST,REUS,AC=1,RENT'\n//C.SYSLIB DD\n//           DD  DSN=SYS1.AMODGEN,DISP=SHR\n//           DD  DSN=DPA0MQK.NASPA.MACLIB,DISP=SHR\n//C.SYSPRINT DD  SYSOUT=X\n//C.SYSIN  DD DSN=DPA0MQK.FILE011.PDS(MSG2USER),DISP=SHR\n//L.SYSLMOD  DD  DSN=SYS1.CMDLIB(MSG2USER),DISP=SHR\n//L.SYSPRINT DD  SYSOUT=X\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ATSO051": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x04?\\x00\\x87\\x05O\\x170\\x00.\\x00.\\x00\\x00\\xe2\\xd6\\xd6\\xd5\\xc7@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-12T00:00:00", "modifydate": "1987-02-23T17:30:00", "lines": 46, "newlines": 46, "modlines": 0, "user": "SOONG"}, "text": "//TSO0513 JOB (MVS19200,0181),'B.WILLIAMS',CLASS=W,MSGCLASS=X,\n//             NOTIFY=MVS#WFW,COND=(0,NE)\n//*\n//SYSASM   PROC MEMBER=NEEDED,RVOL=NEWRES,RUNIT=3380,\n//             DVOL=NEWRES,DUNIT=3380,\n//             JVOL=MVSM02,JUNIT=3380\n//*\n//ASM      EXEC PGM=IEV90,PARM='XREF,NODECK,OBJECT'\n//SYSLIB   DD DSN=TECH.MVS#WFW.INSTALL,DISP=SHR,\n//            DCB=BLKSIZE=19040\n//         DD DSN=SYS2.MACLIB,DISP=SHR         $FINDCB MACRO\n//         DD DSN=SYS1.SMPMTS,DISP=SHR,UNIT=&RUNIT,VOL=SER=&JVOL\n//         DD DSN=SYS1.MACLIB,DISP=SHR,UNIT=&RUNIT,VOL=SER=&RVOL\n//         DD DSN=SYS1.AMODGEN,DISP=SHR,UNIT=&DUNIT,VOL=SER=&DVOL\n//         DD DSN=NTL1.ACF411.ACFMAC,DISP=SHR\n//         DD DSN=SYS1.HASPSRC,DISP=SHR,UNIT=&JUNIT,VOL=SER=&JVOL\n//SYSUT1   DD DSN=&&SYSUT1,UNIT=VIO,SPACE=(1700,(600,100))\n//SYSUT2   DD DSN=&&SYSUT2,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSUT3   DD DSN=&&SYSUT3,UNIT=VIO,SPACE=(1700,(300,50))\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD DSN=TECH.MVS#WFW.INSTALL(&MEMBER),DISP=SHR\n//SYSGO    DD DSN=&&OBJLIB(&MEMBER),DISP=(MOD,PASS),\n//            UNIT=WORK,SPACE=(400,(800,400,10),,,ROUND),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=880,DSORG=PO)\n//         PEND\n//*\n//********************************************************************\n//TSO051 EXEC SYSASM,MEMBER=TSO0513\n//*\n//**** LINK NTL1013 LOAD MODULE INTO A AUTHORIZED LIBRARY ****\n//*\n//LKED   EXEC PGM=IEWL,PARM='XREF,LIST,REUS,AC=1'\n//SYSLMOD  DD  DSN=SYS1.LINKLIB,DISP=SHR,UNIT=3380,VOL=SER=NEWRES\n//SYSUT1   DD  UNIT=WORK,SPACE=(CYL,(2,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=&&OBJLIB,DISP=SHR\n//ACFMOD   DD DSN=NTL1.ACF411.ACFMOD,DISP=SHR\n//SYSLIN   DD  *\n ALIAS GETINFO\n ALIAS TSO0513\n INCLUDE SYSLIB(TSO0513)\n INCLUDE ACFMOD($ACFGCVT)\n IDENTIFY GETINFO('GETINFO - TSOE R3 - IKJCT441')\n NAME TSO051(R)\n//AFTER  EXEC PGM=IEFBR14\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DEBE": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x04?\\x00\\x87\\x05O\\x170\\t\\x07\\t\\x07\\x00\\x00\\xe2\\xd6\\xd6\\xd5\\xc7@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-12T00:00:00", "modifydate": "1987-02-23T17:30:00", "lines": 2311, "newlines": 2311, "modlines": 0, "user": "SOONG"}, "text": "DEBE     START 0\n         USING *,8,9,12  USING 3 BASE REGS\n         SPACE 5\n*START PROLOG*********************************************START PROLOG*\n*                                                                     *\n*                          D E B E                                    *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*  LAST MODIFIED   PROGRAMMER           DESCRIPTION                   *\n*     DATE           NAME                                             *\n*                                                                     *\n*   06/19/86       MILTON SOONG    MODIFIED THE UCBLOKUP ROUTINE TO   *\n*                 (INTEL  CORP.)   RUN UNDER MVS/XA AND MVS/SP.  ALL  *\n*                                  MY CODING CHANGES ARE IDENTIFIED   *\n*                                  WITH 'MS061986' IN COLS. 64-71.    *\n*                                                                     *\n*   THE ORIGINAL SOURCE WAS EXTRACTED FROM THE CBT TAPE.  THE ORIGINAL*\n*   DEBE WOULD NOT RUN ON A MVS/XA SYSTEM DUE TO THE WAY THE UCB IS   *\n*   LOOKED UP.  ALL EXCP, CCWS ETC.......ARE THE SAME. (MS061986)     *\n*                                                                     *\n*                                                                     *\n*   07/29/87       MILTON SOONG    MODIFIED TO SUPPORT BOTH 3420 AND  *\n*                                  3480 TAPE DRIVES.  ALL MY CODING   *\n*                                  CHANGES ARE IDENTIFIED WITH        *\n*                                  'MS072987' IN COLS. 64-71          *\n*                                                                     *\n*                                                                     *\n*END   PROLOG*********************************************END   PROLOG*\n         EJECT\n***********************************************************************\n*                                                                     *\n*                          D E B E                                    *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*  THE PURPOSE OF DEBE IS TO PROVIDE THE USER OF 360 OPERATING        *\n*  SYSTEM THE FLEXIBILITY OF THE ORIGINAL DEBE.  FLEXIBILITY CAN      *\n*  ONLY BE OBTAINED BY THE ELIMINATION OF DD CARDS.  ONLY ONE DD      *\n*  CARD IS NECESSARY FOR DEBE, A SYSPRINT DD CARD FOR THE UNIT        *\n*  THAT WILL BE USED AS THE OUTPUT WRITER.  ALL FUNCTIONS WHICH       *\n*  ARE AVAILABLE WITH DEBE ARE PROVIDED IN DEBE.                      *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*  CORE REQUIREMENTS - ABOUT 33,000 BYTES, 20,000 OF WHICH IS USED    *\n*  AS AN I/O AREA, MOST OF WHICH IS USED FOR LARGE TAPE RECORDS.      *\n*                                                                     *\n*  ERROR RECOVERY - THE OPERATING SYSTEM PERFORMS ALL STANDARD        *\n*  ERROR RECOVERY.  IF IT CANNOT RECOVER FROM AN ERROR, DEBE          *\n*  WILL NOT EVEN TRY.                                                 *\n*                                                                     *\n*  ALL REPLIES TO DEBE ARE OF THE WTOR FORMAT,                        *\n*          REPLY 00,'TP'                                              *\n*  WHENEVER ANY INFORMATION IS REQUESTED BY DEBE, A REPLY OF          *\n*  'EOJ' WILL TERMINATE THE SUBROUTINE OF DEBE.    A REPLY OF 'EOJ'   *\n*  IN RESPONSE TO THE REQUEST FOR THE PROGRAM ID WILL TERMINATE       *\n*  DEBE AND CONTROL IS RETURNED TO THE OPERATING SYSTEM.              *\n*                                                                     *\n*  ONCE A ROUTINE IS RUNNING IN DEBE, IT CAN ONLY BE TERMINATED       *\n*  BY CANCELLING THE JOB, AND THE JOB MUST BE RESCHEDULED AGAIN.      *\n*  AN ALTERNATIVE TO CANCELLING THE JOB IS TO CAUSE AN I/O ERROR      *\n*  ON ONE OF THE UNITS BEING USED.  AN I/O ERROR WILL CAUSE THE       *\n*  SUBROUTINE OF DEBE TO TERMINATE, BUT DEBE WILL STILL BE            *\n*  IN CONTROL.                                                        *\n*                                                                     *\n*                                                                     *\n         EJECT\n         SAVE  (14,12)\nBEGIN    BALR  8,0\n         LA    2,6                 ALIGN BASE WITH USING STATMENT\n         SR    8,2\nBEGIN1   EQU   *\n         L     9,BASE9             LOAD THE BASE 9 REG\n         L     12,BASE12\n         LA    14,SAVEAREA\n         ST    13,SAVEAREA+4\n         ST    14,8(0,13)\n         LR    13,14\n         SPACE 2\n*        GET PARM FIELD IF ANY\n         SPACE\n         L     1,0(1)              GET POINTER TO LENGTH OF PARM\n         LA    1,0(1)              CLEAR SIGN BIT\n         LH    2,0(1)              GET LENGTH OF PARM FIELD\n         LTR   2,2                 SEE IF IS ANY PARM INFO\n         BZ    NOPARM              BRANCH IF NO PARM\n         STC   2,MVCPARM+1         STORE LENGTH OF PARM FIELD\nMVCPARM  MVC   ID(1),2(1)          MOVE PARM FIELD TO ID AREA\nNOPARM   EQU   *\n         EJECT\n***********************************************************************\n*                                                                     *\n*  THIS ROUTINE WILL MODIFY ALL WTO AND WTOR MACROS FOR MCS SUPPORT.  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    1,BUMPMOD           GET ADDRESS TO START SCAN\n         LA    2,TDAREA            GET ADDRESS TO END SCAN\nMODIFY   CLI   0(1),X'45'          SEE IF BAL\n         BNE   BUMPMOD             BRANCH NOT EQUAL\n         CLI   1(1),X'10'          SEE IF REG 1\n         BNE   BUMPMOD             BRANCH NOT EQUAL\n         CLI   4(1),X'00'          SEE IF WTO\n         BNE   NOTWTO              BRANCH NOT WTO\n         MVC   6(1,2),=X'0400'     INSERT NCS FLAGS           *********\n         B     BUMPMOD             GO LOOK FOR NEXT WTO OR WTOR\nNOTWTO   CLI   12(1),X'00'         SEE IF WTOR\n         BNE   BUMPMOD             BRANCH NOT EQUAL\n         MVC   14(1,2),=X'0400'    INSERT MCS FLAGS           *********\nBUMPMOD  LA    1,2(1)              BUMP SEARCH ADRS\n         CLR   2,1                 SEE IF FINISHED\n         BH    MODIFY              BRANCH NOT FINISHED\n         EJECT\n         WTO   '********************************************'  MS061986\n         WTO   '* INTEL CORP.    D E B E    MVS/XA VERSION *'  MS061986\n         WTO   '*         RELEASE 2.00 AS OF 07/29/87      *'  MS061986\n         WTO   '********************************************'  MS061986\n         SPACE 2\n*  GET CVT POINTER\n         L     3,16             GET CVT POINTER\n         MVC   SYSTYP(1),116(3)    STORE SYSTEM TYPE IN PROB PROG\n*  GET POINTER TO THE TCB POINTERS\n         L     2,0(0,3)\n*  GET TCB POINTER\n         L     3,4(0,2)\n*  GET TCB ADDRESS FOR THE DEB'S\n         ST    3,INDEB\n         ST    3,OUTDEB\n         SPACE\nFNDDCB   EQU   *\n         B     DEBFND\n         ABEND 1,DUMP\nCODE     DS    0F\n         DC    X'ABCFEDAD'\nDEBFND   EQU   *\n         MVC   PMBBC(1),32(4)      GET FILE MASK\n         MVC   PMBBC+1(6),36(4)    GET SEEK ARG TO IOB\n         MVI   CHHR+3,1              SET RECORD ARG IN IOB\n         SPACE\n         SR    1,1\n         L     0,CODE\n         MODESET KEY=ZERO\n         SPACE 2\n*  ALL ROUTINES RETURN HERE WHEN THEY ARE FINISHED.\nASKAGN   EQU   *\n         MVI   #3480,X'00'         RESET 3480 SWITCH           MS072987\n         CLI   MVCPARM+1,0         SEE IF PARM USED\n         BZ    PARM2               BRANCH IF PARM NOT USED\nPARMSW   TS    PARMSW+1            SEE IF 2ND TIME THROUGH\n         BC    4,EOJ               BRANCH 2 ND TIME THROUGH\nPARM2    EQU   *\n         CLI   MVCPARM+1,0         SEE IF PARM USED\n         BNZ   PARM1               BRANCH IF PARM USED\n         SPACE 2\n         XC    ID+2(L'ID-2),ID+2   CLEAR ID AREA\n         WTOR 'ENTER RTN ID - XX OR EOJ - XXX',ID,40,REPLYECB\n         BAL   11,WAITANS    GO WAIT FOR A REPLY\n         SPACE 2\nPARM1    EQU   *\n*        CLEAN UP AREAS FOR ALL ROUTINES\n         SPACE 1\n         XC    FILES,FILES         CLEAR FILES WORK AREA\n         NI    INIOB,X'42'         CLEAN UP IOB S\n         NI    OUTIOB,X'42'        CLEAN UP IOB S\n         NI    TD3+1,X'0F'   RESET SWITCHES SET IN TP ROUTINE\n         NI    TD6+1,X'0F'\n         SPACE 2\n*        ROUTINE ID'S WHICH ARE SUPPORTED FOLLOW----\n         SPACE 1\n         OC    ID,=CL80' '        MAKE ALL CAPS\n         CLC   ID(3),=C'EOJ'       IS THE USER FINISHED WITH OS DEBE\n         BE    EOJ                 IF YES--- RETURN TO OS\n         CLC   ID(2),=C'BF'        BACK SPACE FILE\n         BE    BF\n         CLC   ID(2),=C'BS'        BACK SPACE RECORD\n         BE    BS\n         CLC   ID(2),=C'CC'        CARD TO CARD\n         BE    CC\n         CLC   ID(2),=C'CP'        CARD TO PRINT\n         BE    CP\n         CLC   ID(2),=C'CT'        CARD TO TAPE\n         BE    CT\n         CLC   ID(2),=C'RW'        REWIND\n         BE    RW\n         CLC   ID(2),=C'SF'        FORWARD SPACE FILE\n         BE    SF\n         CLC   ID(2),=C'SR'        FORWARD SPACE RECORD\n         BE    SR\n         CLC   ID(2),=C'TC'        TAPE TO CARD\n         BE    TC\n         CLC   ID(2),=C'TD'        TAPE TO PRINT HEX\n         BE    TD\n         CLC   ID(2),=C'TP'        TAPE TO PRINT\n         BE    TP\n         CLC   ID(2),=C'TT'        TAPE TO TAPE\n         BE    TT\n         CLC   ID(2),=C'TF'        TAPE TO PRINT FORMATED\n         BE    TF\n         CLC   ID(2),=C'WT'        WRITE TAPE MARK\n         BE    WT\n*\n*    EXTENDED  OPERATIONS ROUTINE\n*\n         CLC   ID(2),=C'FM'        SEE IF SHOULD WRITE FILE MARK\n         BNE   *+14                BRANCH IF NOT\n         MVC   ID(2),=C'WT'        REPLACE FM WITH WT\n         B     WT                  GO WRITE TAPE MARK\n         CLC   ID(2),=C'TM'        SEE IF SHOULD WRITE FILE MARK\n         BE    *-16                REPLACE TM WITH WT\n         CLC   ID(2),=C'BR'        SEE IF SHOULD BACKSPACE RECORD\n         BNE   *+14                BRANCH IF NOT\n         MVC   ID(2),=C'BS'        REPLACE BR WITH BS\n         B     BS                  GO BACKSPACE RECORD\n         CLC   ID(2),=C'FF'        SEE IF SHOULD FOWARD SPACE FILE\n         BNE   *+14                BRANCH IF NOT\n         MVC   ID(2),=C'SF'        SEE IF FORWARD SPACE FILE\n         B     SF                  GO FOWARD SPACE FILE\n         CLC   ID(2),=C'RU'        SEE IF REWIND AND UNLOAD\n         BE    RU                  BRANCH IF REWIND AND UNLOAD\n         CLC   ID(1),=C'U'         SEE IF UNLOAD\n         BE    RU                  IF YES GO UNLOAD\n         CLC   ID(1),=C'R'         SEE IF REWIND\n         BE    RW                  BRANCH ID YES\n         CLC   ID(2),=C'CL'        SEE IF LABEL ROUTINE REQUESTED\n         BE    CLIP                BRANCH TO LABEL ROUTINE\n         CLC   ID(2),=C'LA'        SEE IF LABEL ROUTINE REQUESTED\n         BE    CLIP                BRANCH TO LABEL ROUTINE\n         CLC   ID(2),=C'FR'        SEE IF FORWARD SPACE RECORD\n         BNE   *+14                BRANCH IF NOT\n         MVC   ID(2),=C'SR'        MOVE IN SR CHARACTERS\n         B     SR                  GO TO SR ROUTINE\n*\n         WTO   'ROUTINE ID ENTERED IS NOT SUPPORTED- PLEASE RETRY'\n         B     ASKAGN\n         SPACE 1\nBASE9    DC    A(DEBE+4096)      ADD CON FOR SECOND BASE\nBASE12   DC    A(DEBE+8192)         ADD CON FOR THIRD BASE\n         SPACE 3\nEOJ      L     13,4(0,13)\n         RETURN (14,12),RC=0\n         EJECT\n*        SUB ROUTINE TO SEARCH FOR KEY LETTERS IN ROUTINE ID FIELD\n*        RETURN CONDITION CODE WILL BE EQUAL OR UNEQUAL\n*\n*        FORMAT\n*                 BAL 11,SEARCH       USED TO BRANCH TO THIS SUB-R\n*                 DC  C'A'            CHARACTER TO BE SEARCHED\n*                 DC  AL1(3)          LENGHT OF SEARCH\n*\nSEARCH   STM   2,3,SHSAV           SAVE REG\n         LA    2,ID                GET ADDRESS OF ID AREA\n         SR    3,3                 CLEAR REG\n         IC    3,1(11)             GET LENGTH OF SEARCH\nCLSHR    CLC   2(1,2),0(11)        SEE IF CHARACTER IS FOUND\n         BE    SEARET              BRANCH IF FOUND\n         LA    2,1(2)              BUMP REG BY 1\n         BCT   3,CLSHR             TRY AGAIN\nSEARET   LM    2,3,SHSAV           RESTORE REGS\n         B     2(11)               RETURN\nSHSAV    DC    2F'0'               SAVE AREA\n*\n*\n*  BACKSPACE A FILE ON TAPE\n         SPACE 1\nBF        EQU   *\n         BAL   10,TPOUTSET   DETERMINE WHICH TAPE UNIT AND SET UP\nBF1      EQU   *\n         BAL   10,NBFILS           GET FILE CNT FRM ID FIELD\n         BO    SFEXCP              BRANCH AROUND MSG\n         WTOR  'NUMBR OF FILES BACK SPACED - XXX',FILES+5,3,REPLYECB\n         BAL   11,WAITANS          GO WAIT FOR A REPLY\n         B    SFEXCP\n         SPACE 1\n*  FORWARD SPACE A FILE ON TAPE\n         SPACE 1\nSF       EQU   *\n         BAL   10,TPOUTSET   DETERMINE WHICH TAPE UNIT AND SET UP\nSF1      EQU   *\n         BAL   10,NBFILS           GET FILE CNT FRM ID FIELD\n         BO    SFEXCP              BRANCH AROUND MSG\n         WTOR  'NUMBR OF FILES FRWRD SPACED - XXX',FILES+5,3,REPLYECB\n         BAL   11,WAITANS          GO WAIT FOR A REPLY\nSFEXCP   EQU   *\n         OC    FILES+5(3),=3C' '    MAKE UPPER CASE\n         CLC   FILES+5(3),=C'EOJ'   SEE IF END OF ROUTINE\n         BE    ASKAGN              IF EQUAL EXIT ROUTINE\n         TM    FILES+5,C'0'         SEE IF NUMERIC\n         BNO   ERMSGA              BRANCH TO ERROR MSG\n         TM    FILES+6,C'0'       SEE IF NUMERIC\n         BNO   ERMSGA              BRANCH TO ERROR MSG\n         TM    FILES+7,C'0'       SEE IF NUMERIC\n         BNO   ERMSGA              BRANCH TO ERROR MSG\n         PACK  FILES(8),FILES(8)     PACK INPUT\n         CVB   2,FILES              PUT NUMBER OF FILES IN REG\nREPT     EQU   *\n         MVC   OUTCCW+8(8),SFCCW   MOVE IN SPACE FILE CCW\n         CLC   ID(2),=C'SF'        SEE IF WAS A SPACE FILE\n         BE    *+10                BRANCH IF SPACE FILE\n         MVC   OUTCCW+8(8),BFCCW   MOVE IN BACK SPACE FILE CCW\n         BAL   11,IOOUT      GO EXECUTE THE CCW\n         CLI   OUTECB,X'7F'  WAS EVERYTHING OK\n         BE    *+8                 GO PERFORM NOOP\n         B     TAPERR              BRANCH TO ERROR ROUTINE\n         MVC   OUTCCW+8(8),NOOP    MOVE IN NO-OP CCW\n         BAL   11,IOOUT            GO PERFORM NOOP TO WAIT FOR DEVICE\n         CLI   OUTECB,X'7F'        SEE IF NOOP OK\n         BE    CNTFS               BRANCH IF OK\n         B     TAPERR              BRANCH IF ERROR\nERMSGA   EQU   *\n  WTO   'ERROR--- PLEASE ENTER 3 NUMERIC CHARACTERS FOR NUMBR OF FILES'\n         CLC   ID(2),=C'BF'        FIND WHICH ROUTINE ASKED\n         BE    BF1                 BRANCH TO THAT ROUTINE\n         B     SF1                 BRANCH TO THE OTHER\nCNTFS    EQU   *\n         BCT   2,REPT              BRANCH IF NOT ZERO\n         B     ASKAGN              GET ANOTHER ROUTINE\n         EJECT\n*  BACKSPACE NNNN RECORDS ON TAPE\n         SPACE 1\nBS       EQU   *\n         SPACE 1\n*  SKIP NNNN RECORDS ON TAPE\n         SPACE 1\nSR       EQU   *\n         BAL   10,TPOUTSET   DETERMINE WHICH TAPE UNIT AND SET UP\n         SPACE 2\n* THE FOLLOWING CODE IS FOR SEARCHING A RECORD COUNT WHEN A ONE\n* LINE ENTRY IS USED.\n         SPACE 1\n         LA    2,ID                GET ADDRESS OF SEARCH\n         LA    3,L'ID-5            GET LENGTH OF SEARCH\nRCRCNT   TM    2(2),X'C0'          SEE IF ALPHAMERIC\n         BO    BUMPR               BRANCH IF ALPHAMERIC\n         TM    7(2),X'C0'          SEE IF ALPHAMERIC\n         BO    BUMPR               BRANCH IF ALPHAMERIC\n         LA    4,4                GET NUMBER OF CHARACTERS\n         BAL   11,ALPMRIC         GO SEE IF ALBHAMERIC\n         BNO   BUMPR              BRANCH NOT ALPHAMERIC\n         MVC   FILES+4(4),3(2)          MOVE REC CNT TO CNT AREA\n         B     BYRCRD              BRANCH AROUND REQUEST FOR RECORD CNT\nBUMPR    LA    2,1(2)              BUMP SEARCH ADDRESS\n         BCT   3,RCRCNT            LOOK AGAIN\n         SPACE 2\nRECRTY WTOR 'NUMBR OF REC''S TO BE SKIPPED - XXXX',FILES+4,4,REPLYECB\n         BAL   11,WAITANS    GO WAIT FOR A REPLY\nBYRCRD   OC    FILES+4(3),=3C' '   MAKE ALL CAP'S\n         CLC   FILES+4(3),=C'EOJ'  SEE IF SHOULD END THIS ROUTINE\n         BE    ASKAGN              YES,EXIT THIS ROUTINE\n         TM    FILES+4,X'F0'       SEE IF NUMERIC ENTRY\n         BZ    ENTERR              BRANCH IF NOT\n         TM    FILES+5,X'F0'       SEE IF NUMERIC ENTRY\n         BZ    ENTERR              BRANCH IF NOT\n         TM    FILES+6,X'F0'       SEE IF NUMERIC ENTRY\n         BZ    ENTERR              BRANCH IF NOT\n         TM    FILES+7,X'F0'       SEE IF NUMERIC ENTRY\n         BZ    ENTERR              BRANCH IF NOT\n         PACK  FILES(8),FILES(8)\n         CVB   2,FILES       PUT NUMBER OF REC'S IN REG 2\n         CLC   ID(2),=C'SR'\n         BE    SREX\nBSEX     MVC   OUTCCW+8(8),BSCCW   SET UP BS CCW\nBSAGN    EQU   *\n         BAL   11,IOOUT      EXECUTE THE CCW\n         CLI   OUTECB,X'7F'  EVERYTHING OK\n         BE    BCT6          YES, DO AGAIN TILL COUNT = 0\n         B     TAPERR        NO, END THIS ROUTINE\nBCT6     EQU   *\n         BCT   2,BSAGN       DECREMENT THE COUNT AND DO AGAIN\n         B     ASKAGN        ALL FINISHED WITH THIS ROUTINE\nSREX     MVC   OUTCCW+8(8),SRCCW   SET UP SR CCW\n         B     BSAGN               GO DO AGAIN\n         SPACE 1\nENTERR   EQU   *\n         WTO   'NUMBR OF REC''S ENTRY MUST BE 4 NUMERIC CHARACTERS'\n         B     RECRTY\n         SPACE 1\n         EJECT\n*  CARD TO CARD REPRODUCE\n         SPACE 1\nCC       EQU   *\n         XC    SEQCNTR,SEQCNTR         CLEAR SEQ COUNTER\n         BAL   11,SEARCH           LOOK FOR CHARACTER\n         DC    C'S'                SEE IF SHOULD SEQUENCE\n         DC    AL1(20)             LENGTH OF SEARCH\n         MVI   SEQ+1,0             NO OP BRANCH\n         BE    *+8                 BRANCH IF SHOULD SEQUENCE\n         MVI   SEQ+1,X'F0'         CAUSE BRANCH IF NOT TO SEQ\n         BAL   11,RDRUCB           GO SET UP CCW,DEB,DEV ADRS FOR RDR\n         BAL   11,PCHUCB           GO GET ADRS OF PUNCH\nCCPNCH   EQU   *\nCCLOOP   EQU   *\n         BAL   11,IOIN       READ A CARD\n         CLI   INECB,X'7F'         EVERYTHING OK\n         BE    CC1                 YES, BRANCH\n         TM    INSTAT+4,X'01'    EOF\n         BC    1,FEEDBK            GO FEED TWO BLANK CARDS\n         B     RDRERROR      READER ERROR, END THIS ROUTINE\nCC1      EQU   *\nSEQ      NOP   *+8                 BRANCH NO SEQ\n         BAL   10,SEQCRD           GO TO SEQ ROUTINE\n         BAL   11,IOOUT      PUNCH A CARD\n         CLI   OUTECB,X'7F'        EVERYTHING OK\n         BE    CCLOOP        YES, LOOP\n*\nPCHERROR WTO   'PUNCH ERROR - EOJ'\n         B     ASKAGN\n*\nFEEDBK   MVI   TDAREA,X'40'        INSERT BLANK\n         MVC   TDAREA+1(79),TDAREA MAKE ALL BLANKS\n         BAL   11,IOOUT            GO PUNCH BLANK\n         CLI   OUTECB,X'7F'        SEE IF ERROR\n         BNE   PCHERROR            BRANCH IF ERROR\n         BAL   11,IOOUT            GO PUNCH BLANK\n         CLI   OUTECB,X'7F'        SEE IF ERROR\n         BNE   PCHERROR            BRANCH IF ERROR\n         B     ASKAGN              GO GET NEXT ROUTINE\n*\n         SPACE 5\n*    SUB-ROUTINE TO SEQUENCE CARDS\n*    LINKAGE   BAL 10,SEQCRD\nSEQCRD   SR    11,11               CLEAR REG 11\n         L     11,SEQCNTR          GET COUNT\n         LA    11,10(11)           BUMP BY 10\n         ST    11,SEQCNTR          PUT BACK COUNT\n         CVD   11,UNPACKAR         UNPACK\n         L     2,OUTCCW            GET ADDRESS OF OUTPUT AREA\n         UNPK  72(8,2),UNPACKAR(8) UNPACK SEQUENCE NUMBER\n         OI    79(2),X'F0'         MAKE Z ONE PRINTABLE\n         BR    10\n*\nUNPACKAR DC    D'0'\nSEQCNTR  DC    F'0'\n         EJECT\n***********************************************************************\n*                                                                     *\n*   THIS IS A COMMON ROUTINE FOR FINDING A CARD READER TO BE USED BY  *\n*   DEBE. IT WILL FIRST SCAN THE MESSAGE INPUT AREA FOR A READER      *\n*   DEVICE ADDRESS. FAILING THAT IT WILL SCAN THE UCB'S FOR AN UN-    *\n*   ALLOCATED ONLINE CARD READER. IF STILL NOT FOUND IT WILL ASK FOR  *\n*   THE ADDRESS OF A USABLE CARD READER.                              *\n*                                                                     *\n*   LINKAGE TO THIS ROUTINE IS  BAL 11,RDRUCB                         *\n*                                                                     *\n***********************************************************************\n         SPACE\nRDRUCBSV DC    11F'0'\n         SPACE\nRDRUCB   STM   1,11,RDRUCBSV       SAVE WORK REGISTERS\n         SPACE\n         LA    2,ID                GET ADRS OF MSG AREA\n         LA    3,L'ID-5            GET LENTH OF SEARCH\nRDRUC1   TM    2(2),X'C0'          SEE IF CRT IN FRONT IS ALPHA\n         BO    RDBPAG              BRANCH IF ALPHA\n         TM    6(2),X'C0'          SEE IF CRT IN BACK  IS ALPHA\n         BO    RDBPAG              BRANCH IF ALPHA\n         LA    4,3                 GET NUMBER OF CHARACTERS IN ADRS\n         LR    5,2                 GET ADRS OF SEARCH\nRDALP    TM    3(5),X'C0'          SEE IF NOT ALPHAMERIC\n         BNO   RDBPAG              BRANCH IF NOT\n         LA    5,1(5)              BUMP ADRS OF SEARCH\n         BCT   4,RDALP             BRANCH TO LOOK AGAIN\n         MVC   READER1(3),0(2)     GET CARD READER ADRS FROM MSG AREA\nRDUPPER  OC    READER1(3),=3X'40'  MAKE UPPER CASE\n         B     RDRPCS              BRANCH TO CONTINUE PROCESSING\nRDBPAG   LA    2,1(2)              BUMP SEARCH ADRS\n         BCT   3,RDRUC1            GO GET NEXT CHARACTERS\n         B     RDRADSNF            ASK FOR RDR ADRS\nRDNXTUCB LA    6,2(6)              BUMP POINTER TO UCB ADRS TABLE\n         B     RUCBLOK             GO GET NEXT UCB ADRS\nRDRPCS   EQU   *\n         L     6,16                GET ADRS OF CVT\n         L     6,40(6)             GET ADRS OF UCB ADRS TABLE\n         XC    UCBWORK,UCBWORK     CLEAR WORKAREA FOR UCB SCAN MS061986\n         MVI   DEVCLASS,UCB3UREC   LOOK FOR UNIT RECORD DEVICESMS061986\n         SPACE 1                                               MS061986\nRUCBLOK  EQU   *                                               MS061986\n         L     R2,CVTPTR           GET POINT TO CVT            MS061986\n         USING CVTMAP,R2           ADDRESSABILITY TO CVT       MS061986\n         TM    CVTDCB,X'80'        Q. ARE WE RUNNING UNDER XA? MS061986\n         BO    RUCBLOKX            A. YES WE ARE               MS061986\n         DROP  R2                                              MS061986\n         SPACE 1                                               MS061986\n         LH    7,0(6)              GET UCB ADRS\n         LTR   7,7                 SEE IF GOOD ADRS\n         BZ    RDNXTUCB            BRANCH NO ADRS\n         BM    RDDEVNF             BRANCH - NO UCB FOUND\n         CLI   2(7),X'FF'          SEE IF VALID UCB\n         BNE   RDNXTUCB            GET NEXT UCB\nRUCBCHK  EQU   *                                               MS061986\n         CLC   READER1(3),13(7)    SEE IF DEVICE ASKED FOR\n         BNE   RDNXTUCB            BRANCH NOT ASKED FOR\n         CLI   18(7),X'08'         SEE IF UNIT RECORD DEVICE\n         BNE   RDNXTUCB            GET NEXT UCB\n         CLI   19(7),X'01'         SEE IF 2540 READER\n         BE    CR2540              BRANCH IF 2540\n         CLI   19(7),X'06'         SEE IF 3505 READER\n         BE    CR2540              BRANCH IF 3505 CARD READER\n         CLI   19(7),X'03'         SEE IF 1442 READ/PUNCH\n         BE    RD1442              BRANCH 1442 READ/PUNCH\n         CLI   19(7),X'04'         SEE IF 2501 CARD READER\n         BE    RD2501              BRANCH IF 2501\n         CLI   19(7),X'05'         SEE IF 2520 READ/PUNCH\n         BE    RD2520              BRANCH IF 2520 READ/PUNCH\n         B     RDNXTUCB            GET NEXT UCB\n         SPACE 2                                               MS061986\nRUCBLOKX EQU   *                                               MS061986\n         L     R3,CVTPTR           GET CVT ADDRESS             MS061986\n         USING CVTMAP,R3           SETUP ADDRESSABILITY        MS061986\n         LA    R1,UCBWORK          GET ADDRESS OF WORK AREA    MS061986\n         ST    R1,PARMWA           STORE ADDRESS IN PARMLIST   MS061986\n         LA    R1,DEVCLASS         GET ADDRESS OF AREA CONTAIN-MS061986\n*                                  ING DEVICE CLASS TO SEARCH. MS061986\n         ST    R1,PARMDEVT         SAVE IN PARM LIST           MS061986\n         LA    R1,ADDRUCB          ADDRESS OF RETURNED UCB     MS061986\n         ST    R1,PARMUCB          STORE ADDRESS IN PARMLIST   MS061986\n         OI    PARMUCB,X'80'       INDICATE END OF PARMLIST    MS061986\n         SPACE 1                                               MS061986\nRUCBSRCH EQU   *                                               MS061986\n         USING UCBOB,R7            SETUP ADDRESSABILTY TO UCB  MS061986\n         LA    R1,PARMLIST         PUT PARMLIST IN R1          MS061986\n         L     R15,CVTUCBSC        GET SCAN SERVICE ADDRESS    MS061986\n         BALR  R14,R15             GOTO SCAN SERVICE           MS061986\n         LTR   R15,R15             Q. HAS A UCB BEEN RETURNED? MS061986\n         BNZ   RDRADSNF            A. NO, AT END OF DEVICE     MS061986\n*                                     CLASS AND NO MATCH FOUND.MS061986\n         L     R7,ADDRUCB          R2==> UCB ADDRESS THAT THE  MS061986\n*                                        SCAN ROUTINE RETURNED.MS061986\n         B     RUCBCHK             NOW GO AND CHECK            MS061986\n         SPACE 2                                               MS061986\n         DROP  R3                                              MS061986\n         DROP  R7                                              MS061986\nRD2501   EQU   *\nRD1442   EQU   *\nRD2520   EQU   *\n         CLI   16(7),X'01'         SEE IF PUNCH ONLY- FOR 2520/1442\n         BE    RDNXTUCB            GET NEXT UCB IF YES\nCR2540   EQU   *\n         TM    SYSTYP,X'40'        SEE IF PCP SYSTEM\n         BO    RDCONTU             BRANCH IF YES\n         TM    3(7),X'08'          SEE IF DEVICE IS ALLOCATED\n         BO    RDCLIPT             BRANCH ID ALLOCATED\nRDOFLINE EQU   *\n         CLI   3(7),X'C0'          SEE IF GOING OFFLINE\n         BNE   RDOFCHK             BRANCH NOT GOING OFFLINE\n         MVC   RDDVOLN+32(3),13(7) GET DEVICE ADRS\nRDDVOLN  WTO   'DEBE WAITING FOR DEVICE XXX TO GO OFFLINE'\nRDSTMR   EQU   *\n         STIMER WAIT,BINTVL=TIME\n         CLI   3(7),X'C0'          SEE IF OFFLINE YET\n         BE    RDSTMR              BRANCH IF NOT OFFLINE\nRDOFCHK  TM    3(7),X'80'          SEE IF ONLINE\n         BZ    RDDVOK              BRANCH IF OFFLINE\n         MVC   RDGNOFF+15(3),13(7) GET DEVICE ADRS\nRDGNOFF  WTO   'DEVICE XXX CHANGED TO OFFLINE STATUS - DEBE'\n         NI    3(7),X'7F'          CHANGE TO OFFLINE\nRDDVOK   EQU   *\n         B     RDCONTU             USE DEVICE\nTIME     DC    A(500)              WAIT FOR 5 SECONDS\n*\nRDDEVNF  EQU   *\n         MVC   RDNOUCB+38(3),READER1 GET ADRS SEARCHED\nRDNOUCB  WTO   'READER UCB NOT FOUND FOR ADRS XXX'\nRDRADSNF WTOR  'PLEASE ENTER READER ADRS - XXX',READER1,3,REPLYECB\n         BAL   11,WAITANS          WAIT REPLY\n         B     RDUPPER             GET READER ADRS\n*\nRDCLIPT  EQU   *\n         MVC   ASGNMSG+22(3),13(7) GET DEVICE ADRS\nASGNMSG WTOR 'DEVICE CUU IS ALLOCATED, REPLY ''W'' TO WAIT, ''C'' TO CAX\n               NCEL OR A NEW DEVICE ADRS ''CUU''',READER1,3,REPLYECB\n         BAL   11,WAITANS          WAIT FOR REPLY\n         OC    READER1,=3X'40'     MAKE UPPER CASE\n         CLI   READER1,C'C'        SEE IF SHOULD CANCEL\n         BE    EOJ                 GO ASK FOR NEXT ROUTINE\n         CLI   READER1,C'W'        SEE IF WAIT\n         BNE   RDRPCS              GO SEARCH UCB'S AGAIN\nRDSTAL   STIMER WAIT,BINTVL=TIME\n         TM    3(7),X'08'          SEE IF ALLOCATED\n         BO    RDOFLINE            BRANCH IF ALLOCATED\n*\nRDCONTU  EQU   *\n         ST    7,INDEBMOD          STORE UCB ADRS IN DEB\n         CLI   19(7),X'03'         SEE IF 1442\n         BE    RDCCW1RT            BRANCH IF 1442\n         CLI   19(7),X'05'         SEE IF 2520\n         BNE   RDCCW2RT            BRANCH TO 2540 CCW\nRDCCW1RT MVC   INCCW(8),RD82CCW    MOVE IN CCW FOR  1442/2520\n         B     RDAMFN              BRANCH\nRDCCW2RT MVC   INCCW(8),RD02CCW    MOVE IN CCW FOR  2540\n*\nRDAMFN   LM    1,11,RDRUCBSV       RESTORE\n         BR    11                  RETURN TO USING ROUTINE\n         SPACE 2\nRD82CCW  CCW   X'82',TDAREA,X'20',80  CCW FOR 1442/2520 READER\nRD02CCW  CCW   X'02',TDAREA,X'20',80  CCW FOR 2540 READER\n         EJECT\n***********************************************************************\n*                                                                     *\n*  THIS IS A COMMON ROUTINE FOR FINDING A CARD PUNCH ADDRESS TO BE    *\n*  USED BY DEBE.  IT WILL FIRST SCAN THE MESSAGE INPUT AREA FOR A     *\n*  PUNCH DEVICE ADDRESS. FAILING THAT IT WILL SCAN THE UCB'S FOR AN   *\n*  UN-ALLOCATED ONLINE CARD READER. IF STILL NOT FOUND IT WILL ASK    *\n*  FOR THE ADDRESS OF A USABLE CARD PUNCH.                            *\n*                                                                     *\n*  LINKAGE TO THIS ROUTINE IS  BAL 11,PCHUCB                          *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nPCHUCB   STM   1,11,RDRUCBSV       SAVE WORK REGISTERS\n         LA    2,ID                GET ADRS OF MSG AREA\n         LA    3,L'ID-5            GET LENGTH OF SEARCH\nPCHUC1   TM    2(2),X'C0'          SEE IF CHR IN FRONTIS ALPHA\n         BO    PCBPAG              BRANCH IF ALPHA\n         TM    6(2),X'C0'          SEE IF CHR IN BACK IS ALPHA\n         BO    PCBPAG              BRANCH IF ALPHA\n         LA    4,3                 GET NUMBER OF CHARACTERS IN ADRS\n         LR    5,2                 GET ADRS OF SEARCH\nPCALP    TM    3(5),X'C0'          SEE IF ALPHAMERIC\n         BNO   PCBPAG              BRANCH IF NOT\n         LA    5,1(5)              BUMP ADRS OF SEARCH\n         BCT   4,PCALP             BRANCH TO LOOK AGAIN\n         MVC   PUNCH1(3),0(2)      GET CARD PUNCH ADRS FROM MSG AREA\nPCUPPER  OC    PUNCH1(3),=3X'40'   MAKE UPPER CASE\n         B     PCHPCS              BRANCH TO CONTINUE PROCESSING\nPCBPAG   LA    2,1(2)              BUMP SEARCH ADRS\n         BCT   3,PCHUC1            GO GET NEXT CARACTERS\n         B     PCRADSNF            ASK FOR PUNCH ADRS\nPCHPCS   EQU   *\n         L     6,16                GET ADRS OF CVT\n         L     6,40(6)             GET ADRS OF UCB ADRS TABLE\n         XC    UCBWORK,UCBWORK     CLEAR WORKAREA FOR UCB SCAN MS061986\n         MVI   DEVCLASS,UCB3UREC   LOOK FOR UNIT RECORD DEVICESMS061986\n         SPACE 1                                               MS061986\nPUCBLOK  EQU   *                                               MS061986\n         L     R2,CVTPTR           GET POINT TO CVT            MS061986\n         USING CVTMAP,R2           ADDRESSABILITY TO CVT       MS061986\n         TM    CVTDCB,X'80'        Q. ARE WE RUNNING UNDER XA? MS061986\n         BO    PUCBLOKX            A. YES WE ARE               MS061986\n         DROP  R2                                              MS061986\n         SPACE 1                                               MS061986\n         LH    7,0(6)              GET UCB ADRS\n         LTR   7,7                 SEE IF GOOD ADRS\n         BZ    PCNXTUCB            BRANCH NO ADRS\n         BM    PCRADSNF      BR END OF TABLE SCAN AGAIN\n         CLI   2(7),X'FF'          SEE IF VALID UCB\n         BNE   PCNXTUCB            GET NEXT UCB\n         CLI   18(7),X'08'         SEE IF UNIT RECORD DEVICE\n         BNE   PCNXTUCB            GET NEXT UCB\nPUCBCHK  EQU   *                                               MS061986\n         CLI   19(7),X'02'         SEE IF 2540 PUNCH\n         BE    PC2540              BRANCH IF 2540 PUNCH\n         CLI   19(7),X'0C'         SEE IF 3525 PUNCH\n         BE    PC2540              BRANCH IF 3525 PUNCH\n         CLI   19(7),X'03'         SEE IF 1442 READ/PUNCH\n         BE    PC1442              BRANCH IF 1442 READ/PUNCH\n         CLI   19(7),X'05'         SEE IF 2520 READ/PUNCH\n         BE    PC2520              BRANCH IF 252O READ/PUNCH\n         B     PCNXTUCB            GET NEXT UCB\n         SPACE 2                                               MS061986\nPUCBLOKX EQU   *                                               MS061986\n         L     R3,CVTPTR           GET CVT ADDRESS             MS061986\n         USING CVTMAP,R3           SETUP ADDRESSABILITY        MS061986\n         LA    R1,UCBWORK          GET ADDRESS OF WORK AREA    MS061986\n         ST    R1,PARMWA           STORE ADDRESS IN PARMLIST   MS061986\n         LA    R1,DEVCLASS         GET ADDRESS OF AREA CONTAIN-MS061986\n*                                  ING DEVICE CLASS TO SEARCH. MS061986\n         ST    R1,PARMDEVT         SAVE IN PARM LIST           MS061986\n         LA    R1,ADDRUCB          ADDRESS OF RETURNED UCB     MS061986\n         ST    R1,PARMUCB          STORE ADDRESS IN PARMLIST   MS061986\n         OI    PARMUCB,X'80'       INDICATE END OF PARMLIST    MS061986\n         SPACE 1                                               MS061986\nPUCBSRCH EQU   *                                               MS061986\n         USING UCBOB,R7            SETUP ADDRESSABILTY TO UCB  MS061986\n         LA    R1,PARMLIST         PUT PARMLIST IN R1          MS061986\n         L     R15,CVTUCBSC        GET SCAN SERVICE ADDRESS    MS061986\n         BALR  R14,R15             GOTO SCAN SERVICE           MS061986\n         LTR   R15,R15             Q. HAS A UCB BEEN RETURNED? MS061986\n         BNZ   PCRADSNF            A. NO, AT END OF DEVICE     MS061986\n*                                     CLASS AND NO MATCH FOUND.MS061986\n         L     R7,ADDRUCB          R2==> UCB ADDRESS THAT THE  MS061986\n*                                        SCAN ROUTINE RETURNED.MS061986\n         B     PUCBCHK             NOW GO AND CHECK            MS061986\n         SPACE 2                                               MS061986\n         DROP  R3                                              MS061986\n         DROP  R7                                              MS061986\nPC2520   EQU   *\nPC1442   EQU   *\n         TM    16(7),X'01'   SEE IF PUNCH ONLY FOR 2520.1442\n         BZ    PCNXTUCB      BR IF NOT PUNCH\nPC2540   EQU   *\n         TM    3(7),X'80'          SEE IF DEVICE IS ONLINE\n         BZ    PCSEASK             GET NEXT UCB\nPCASK    TM    3(7),X'08'          SEE IF DEVICE ALLOCATED\n         BNO   PCCONTU             BRANCH NOT ALLOCATED\n         B     PCCLIPT             BRANCH IF ALLOCATED\nPCNXTUCB LA    6,2(6)              BUMP POINTER TO UCB ADRS TABLE\n         B     PUCBLOK             GO GET NEXT UCB ADRS\nPCSEASK  CLC   PUNCH1(3),13(7)     SEE IF DEVICE ASKED FOR\n         BE    PCASK               DEVICE REQUESTED - IGNORE OFF LINE\n         B     PCNXTUCB            GET NEXT UCB\n         SPACE\nPCRADSNF WTOR  'ENTER PUNCH ADRS - XXX',PUNCH1,3,REPLYECB\n         BAL   11,WAITANS          WAIT REPLY\n         B     PCUPPER             MAKE ADRS UPPER CASE\n         SPACE\nPCCLIPT  EQU   *\n         XC    TDAREA(3),TDAREA    CLEAR INPUT MSG AREA\n         TM    SYSTYP,X'40'        SEE IF PCP SYSTEM\n         BO    PCCONTU             BRANCH IF PCP\n         MVC   PSGNMSG+23(3),13(7) GET DEVICE ADRS\nPSGNMSG  WTOR  'DEVICE XXX IS ALLOCATED, STOP WRITER THEN REPLY ''U'' TX\n               O USE, ''C'' TO CANCEL OR A NEW DEVICE ADRS XXX',TDAREA,X\n               3,REPLYECB\n         BAL   11,WAITANS          WAIT ANSWER\n         OC    TDAREA(3),=3X'40'   MAKE UPPER CASE\n         CLI   TDAREA,C'U'         SEE IF SHOULD USE\n         BE    PCCONTU             BRANCH TO CONTINUE\n         CLC   TDAREA,=C'EOJ'      SEE IF TO END ROUTINE\n         BE    EOJ                 BRANCH TO EOJ\n         MVC   PUNCH1(3),TDAREA    GET NEW ADRS\n         B     PCHPCS              LOOK AT UCBS AGAIN\n         SPACE\nPCCONTU  EQU   *\n         ST    7,OUTDEBMD\n         CLI   19(7),X'03'         SEE IF 1442\n         BE    PCCCWIRT            BRANCH NOT 1442\n         CLI   19(7),X'05'         SEE IF 252O\n         BE    PCCCWIRT            BRANCH NOT 2520\n         B     PC2540CC            BRANCH TO 2540 CCW\nPCCCWIRT MVC   OUTCCW(8),CCW1442   GET 1442/2520 CCW\n         B     PCAMFN              BRANCH AROUND NEXT CCW\nPC2540CC MVC   OUTCCW(8),CCW2540   GET 2540 CCW\nPCAMFN   LM    1,11,RDRUCBSV       RESTORE REGISTERS\n         BR    11                  RETURN\n         SPACE 2\nCCW1442  CCW   X'81',TDAREA,X'20',80  CCW FOR 1442/2520 PUNCH\nCCW2540  CCW   X'41',TDAREA,X'20',80  CCW FOR 2540 PUNCH\n         EJECT\n*  CARD TO PRINTER - 80/80 LIST\n         CNOP  0,4\n         SPACE 1\nCP       EQU   *\n         BAL   11,RDRUCB           GO SET UP CCW,DEB,DEV ADRS FOR RDR\nCP2      EQU   *\n         BAL   11,OPENPRNT   OPEN SYSPRINT IF NOT OPEN\n         BAL   11,SKIPTO1    SKIP TO CHANNEL 1\nCPLOOP   EQU   *\n         BAL   11,IOIN       READ A CARD\n         CLI   INECB,X'7F'   EVERYTHING OK\n         BE    CP1           YES, BRANCH\n         TM    INSTAT+4,X'01'      EOF?\n         BC    1,ASKAGN      YES, END THIS ROUTINE\nRDRERROR WTO   'READER ERROR - EOJ'\n         B     ASKAGN              GET NEXT ROUTINE\nCP1      EQU   *\n         MVC   TDOUTAR(80),TDAREA      CLEAR UPPER PRINT LINE AFTER\n         MVI   TDOUTAR+80,C' '     PUT IN BLANK\n         MVC   TDOUTAR+81(51),TDOUTAR+80  BLANK OUT AREA\n         BAL   11,TDPRINT    PRINT A CARD\n         B     CPLOOP        LOOP\n         EJECT\n*  CARD TO TAPE\n         SPACE 1\nCT       EQU   *\n         BAL   11,RDRUCB           GO SET UP CCW,DEB,DEV ADRS FOR RDR\n*  SET UP TAPE'S DCB AND DEB\n         BAL   10,TPOUTSET   DETERMINE WHICH TAPE UNIT AND SET UP\n         MVC   OUTCCW+8(8),NOOP    MOVE IN NOOP CCW\n         BAL   11,IOOUT            GO PERFORM NOP\n         MVC   OUTCCW+8(8),CTCCW   SET UP WRITE CCW\n         SR    2,2           CLEAR A COUNTER\nCTLOOP   EQU   *\n         BAL   11,IOIN       READ A CARD\n         CLI   INECB,X'7F'         EVERYTHING OK\n         BE    CT1           YES, BRANCH\n         TM    INSTAT+4,X'01'      EOF\n         BC    1,CTEOJ1      YES, WRITE A TAPE MARK\n         B     RDRERROR      READER ERROR, END THIS ROUTINE\nCT1      EQU   *\n         LA    2,1(2)        INCREMENT A COUNTER\n         BAL   11,IOOUT      WRITE TO TAPE\n         CLI   OUTECB,X'7F'        EVERYTHING OK\n         BE    CTLOOP        YES, LOOP\n         SPACE 1\n*  IF OS CAN'T RECOVER FROM THE ERROR, I SURELY WON'T TRY\n         B     TAPERR\nCTEOJ1   EQU   *\n         MVC   COUNT(6),=X'402020202020'     EDIT THE COUNTER\n         CVD   2,TDWK\n         ED    COUNT(6),TDWK+5\n         LA    1,MESSAGE\n         SVC   35      PRINT THE NUMBER OF CARDS THAT WENT TO TAPE\nCTEOJ    EQU   *\n         MVC   OUTCCW+8(8),WTCCW       SET UP WTM CCW\n         OI    OUTCCW+12,X'60'     CHAIN IT TO A NOP\n         MVC   OUTCCW+16(8),=X'0300000020000001'\n         BAL   11,IOOUT      WRITE A TAPE MARK\n         CLI   OUTECB,X'7F'        EVERYTHING OK\n         BNE   TAPERR        NO, BRANCH\n         BAL   10,RUOUT            GO REWIND OUTPUT IF ASKED\n         CLC   ID(2),=C'TT'        SEE IF TAPE TO TAPE\n         BNE   *+8                 BRANCH IF NOT\n         BAL   10,RUIN             GO REWIND INPUT IF ASKED\n         B     ASKAGN\n         SPACE 4\n*   TAPE TO CARD---WILL UNBLOCK AND PUNCH IN MULT OF 80 CHARACTERS\n         SPACE 1\nTC       EQU   *\n         XC    CNTARA,CNTARA       CLEAR FILE COUNTER\n         XC    SEQCNTR,SEQCNTR         CLEAR SEQ COUNTER\n         BAL   11,SEARCH           LOOK FOR CHARACTER\n         DC    C'S'                SEE IF SHOULD SEQUENCE\n         DC    AL1(20)             LENGTH OF SEARCH\n         MVI   SEQ1+1,0            NO OP A BRANCH\n         BE    *+8                 BRANCH IF SEQ\n         MVI   SEQ1+1,X'F0'        SET UP FOR NO SEQ\n         MVI   CNTARA,0            CLEAR FILE COUNTER\n         MVI   SW80,0              RESET SWITCH\n         MVI   SW81,0              RESET SWITCH\n         MVI   SW82,0                   RESET SWITCH\n         BAL   10,TAPINSET         DETERMINE WHICH TAPE UNIT AND SET UP\n         BAL   10,TPFILS           GO SEE HOW MANY FILES\n         BAL   11,PCHUCB           GO GET ADRS OF PUNCH\nTCPCH    EQU   *\n         SPACE\n         MVC   SAVCCW(4),OUTCCW\n         MVC   INCCW+8(8),NOOP     MOVE IN NOOP CCW\n         BAL   11,IOIN             GO PERFORM NOOP\n         MVC   INCCW+8(8),TDINCCW  SET UP READ CCW\nTCLOOP   EQU   *\n         MVC   OUTCCW(4),SAVCCW\n         BAL   11,IOIN       READ A RECORD\n         CLI   INECB,X'7F'         EVERYTHING OK\n         BE    TC1            YES, BRANCH\n         TM    INSTAT+4,X'01'      EOF\n         BC    8,TAPERROR               TAPE ERROR END ROUTINE\n         CNOP  0,4                      ALIGN\n         BAL   10,NXTFL                 GO TO EOF SUBROUTINE\n         DC    A(TCLOOP)                CONTINUE RETURN ADDRESS\nTC1      EQU   *\n         MVI   SW82,0                   RESET SWITCH\n         LH    2,INSTAT+6          GET RESIDUAL COUNT\n         LH    3,TDINCCW+6         GET BEGINNING COUNT\n         SR    3,2                 GET BYTES READ IN\nTC2      EQU   *\n         C     3,=F'80'   SEE IF RESIDUAL CNT IS 80\n         BNL   SEQ1   BRANCH IF AT LEAST 1 MORE CARD TO PUNCH\n         L     2,OUTCCW            GET ADDRESS OF OUTPUT AREA\n         LA    2,0(3,2)            BUMP BY BYES TO BLANK OUT\nTAG1     MVC   0(80,2),=80C' '      BLANK OUT FIELD\nSEQ1     NOP   *+8                 BRANCH IF NO SEQ\n         BAL   10,SEQCRD           GO TO SEQ ROUTINE\n         BAL   11,IOOUT      PUNCH 80 BYTES OF RECORD\n         CLI   OUTECB,X'7F'        EVERYTHING OK\n         BE    CNTDN               GO SEE IF SHOULD PUNCH AGAIN\n         B     PCHERROR      PUNCH ERROR, END ROUTINE\nSAVCCW   DC    F'0'\n*\nCNTDN    EQU   *\n         L     2,OUTCCW            GET ADDRESS OF OUTPUT AREA\n         LA    2,80(2)             BUMP BY 80\n         ST    2,OUTCCW            STORE BUMPED OUTPUT ADDRESS\n         MVC   OUTCCW(1),SAVCCW\n*\n         S     3,=F'80'            SUBTRACT 80 FROM BYTES READ\n         BH    TC2                 BRANCH IF ALL OF RECORD NOT PUNCHED\n         BE    TCLOOP              GO READ NEXT RECORD\n         TS    SW80                SEE IF MSG WRITTEN\n         BNZ   NOTE2               BRANCH IF MSG WRITTEN ONCE\n         WTO   '***CAUTION***--CARD PUNCHED NOT MULT OF 80 CHARACTERS'\nNOTE2    EQU   *\n       TS      SW81                SEE IF SECOND MESSAGE IS PRINTED\n         BNZ   TCLOOP              BRANCH IF MSG WRITTEN ONCE\n         WTO   'LAST WARNING--ANOTHER NON-80 CHARACTER CARD PUNCHED'\n         B     TCLOOP              GO READ NEXT RECORD\n         SPACE 3\n*        ROUTINE FOR SENSING EOF - TC,TP & TD\n*\n*        LINKAGE FOR EOF SUBROUTINE\n*        BAL   10,NXTFL                 BRANCH TO SUBROUTINE\n*        DC    A(LABEL TO CONTINUE PROCESSING)\n*\nNXTFL    EQU   *\n         ST    10,SVRTNR           SAVE REG\n         SR    11,11               CLEAR REG\n         LH    11,CNTARA                GET CNT\n         LA    11,1(11)            ADD ONE\n         STH   11,CNTARA                STORE COUNT\n         CVD   11,TDWK             CONVERT TO DEC\n         UNPK  FICNT(3),TDWK+5(3)       UNPACK FILE CNT\n         OI    FICNT+2,X'F0'       MAKE SIGN A ZONE\n         CNOP  0,4                 ALIGN ON WORD\nMSGFIL   WTO   'OS-DEBE COMPLETED FILE 000'\nFICNT    EQU   *-5                 ADDRESS OF MSG CNT\n         CLC   ID(2),=C'TP'   SEE IF TP\n         BE    TDRCT               BRANCH IF SAME\n         CLC   ID(2),=C'TD'   SEE IF TD\n         BE    TDRCT               BRANCH IF SAME\n         CLC   ID(2),=C'TF'  DOS OS OLP\n         BNE   FICNT1\n         BAL   11,SKIPTO2\n         B     FICNT1\n         SPACE   3\nTDRCT    BAL   11,SPACE1           SPACE\n         BAL   11,SPACE1           SPACE\n         MVC   TDOUTAR+30(26),MSGFIL+8     GET FILE MSG\n         BAL   11,TDPRINT          GO PRINT\n         BAL   11,SKIPTO1          SKIP\nFICNT1   CLC   FILES+5(3),=C'ALL'      SEE IF ALL\n         BNE   NXTFLA              BRANCH AROUND DBL FILE MAR TST\n         TS    SW82                     SET EOF SWITCH\n         BC    4,*+8               SEE IF DOUBLE FILE MARK\n         B     RETNRT                   GET NEXT RECORD\n         BAL   10,RUIN             GO SEE IF SHOULD REWIND/UNLOAD\n         B     ASKAGN              GO GET NEXT ROUTINE ID\n*\nNXTFLA   CLC   CNTARA(2),FILES+6    SEE IF FINISHED\n         BL    RETNRT              BRANCH TO GET NEXT RECORD\n         BAL   10,RUIN             GO SEE IF SHOULD REIND/UNLOAD\n         CLC   ID(2),=C'TC'         SEE IF TAPE TO CARD\n         BE    FEEDCD              GO FEED CARDS\n         B     ASKAGN              BACK TO ROUTINE ID\n*\n*        RETURN ROUTINE\nRETNRT   L     11,SVRTNR           GET RETURN POINTER\n         L     10,0(11)            GET RETURN ADDRESS\n         CLC   ID(2),=C'TF'  OLP TAPES\n         BNE   RETNRT1\n         LA    10,RDTAPE\nRETNRT1  DS    0H\n         BR    10                  RETURN\n*\nFEEDCD   EQU   *\n         MVI   TDAREA,X'40'        GET BLANK\n         MVC   TDAREA+1(79),TDAREA MAKE BLANKS\n         LA    3,80                MAKE COUNT 80\n         STH   3,OUTCCW+6          STORE COUNT\n         BAL   11,IOOUT            FEED BLANK\n         BAL   11,IOOUT            FEED BLANK\n         B     ASKAGN              GET NEXT ROUTINE\n*\nSVRTNR   DC    F'0'                RETURN ADDRESS SAVE AREA\nCNTARA   DC    H'0000'             FILE COUNTER\nSW80     DC    X'00'               MESSAGE SW\nSW81     DC    X'00'               MESSAGE SW\nSW82     DC    X'00'                    FILES SWITCH\n         SPACE 4\n         EJECT\n         CNOP  0,4\n*  PRINT A TAPE\nTP       EQU   *\n*  TP USES THE TD ROUTINE WITHOUT THE HEX-TO-CHARACTER CONVERSION\n         OI    TD3+1,X'F0'         SET SWITCHES IN TD\n         OI    TD6+1,X'F0'\n         SPACE 1\n*  PRINT A TAPE IN HEX UNLESS SWITCHES SET BY TP\n         SPACE 1\nTD       EQU   *\n         MVI   SW82,0         RESET EOF SWITCH\n         BAL   11,OPENPRNT   OPEN SYSPRINT IF NECESSARY\n         BAL   11,SKIPTO1     SKIP TO CHANNEL 1\n         XC    CNTARA,CNTARA       CLEAR FILE COUNTER\n*  SET UP TAPE'S DCB AND DEB\n         BAL   10,TAPINSET         DETERMINE WHICH TAPE UNIT AND SET UP\n         BAL   10,TPFILS           SEE HOW MANY FILES\n         MVC   INCCW+8(8),NOOP     MOVE IN NOOP CCW\n         BAL   11,IOIN             GO PERFORM NOOP\n         MVC   INCCW+8(8),TDINCCW  SET UP READ CCW\n         BAL   11,TDPRINT    PRINT THE HEADING LINE\nTDAGN    BAL   11,SPACE1      SPACE A LINE\n         SP    RECCNT(3),RECCNT(3) CLEAR THE RECORD COUNTER\nTDLOOP   EQU   *\n         BAL   11,IOIN        READ A RECORD\n         CLI   INECB,X'7F'         EVERYTHING OK\n         BE    TD1           YES, BRANCH\n         TM    INSTAT+4,X'01'      EOF\n         BC    1,TDEOJ       YES, GO END ROUTINE\n         B     TAPERROR\n         SPACE 1\n*  IF OS CAN'T RECOVER FROM THE ERROR, I SURELY WON'T TRY\nTD1      EQU   *\n         MVI   SW82,0         RESET EOF SWITCH\n         LH    2,INSTAT+6          GET RESIDUAL COUNT\n         LH    3,TDINCCW+6         GET BEGINING COUNT\n         SR    3,2                 GET BYTES READ IN\nUNFMTD   EQU   *\n         CVD   3,TDWK\n         MVI   TDOUTAR,C' '        CLEAR PRINT LINE\n         MVC   TDOUTAR+1(131),TDOUTAR\n         MVC   TDOUTAR+102(23),RECHDG  SET UP LINE INFORMATION\n         ED    TDOUTAR+119(6),TDWK+5\n         AP    RECCNT(3),COND1(1)      INCREMENT RECORD COUNTER\n         ED    TDOUTAR+105(6),RECCNT\n         LA    2,TDAREA      GET READY FOR HEX CONVERSION\n         LA    5,TDAREA\n         LA    7,80\nTD6      BC    0,TD7         SET TO BRANCH BY TP ROUTINE\n*  R2 POINTS TO THE INPUT AREA\n*  R5 POINTS TO THE OUTPUT AREA\n         L     5,=A(TDAREA2)\n         LA    7,50\n         BAL   14,UNPK       GO CONVERT 50 BYTES TO 100 HEX\nTD7      EQU   *\n         CR    3,7           SHORT LINE TO BE PRINTED\n         BL    TD3           YES, GO DO THE MOVE\n         TM    TD6+1,X'F0'         SEE IF TP\n         BNO   HX                  BRANCH IF NOT TP\n         MVC   TDOUTAR(80),0(5)    DO 80 BYTE MVBE\n         B     TDPR\nHX       EQU   *\n         MVC   TDOUTAR(100),0(5)   ELSE DO 100 BYTE MOVE\nTDPR     EQU   *\n         BAL   11,TDPRINT     PRINT A LINE\n         MVI   TDOUTAR,C' '        CLEAR OUTPUT AREA\n         MVC   TDOUTAR+1(131),TDOUTAR\n         SR    3,7           DECREMENT BLKSIZE\n         BC    12,TD9         BRANCH IF BLOCK FINISHED\n         AR    2,7            ELSE, INCREMENT COUNTERS\n         AR    5,7\n         B     TD6           AND LOOP\nTD3      BC    0,TD4         SET TO BRANCH BY TP ROUTINE\n         LR    11,3          GET REMAINDER OF DATA IN 11\n         AR    11,3          DOUBLE IT BECAUSE IT'S UNPACKED\n         BCTR  11,0          DECREMENT ONE FOR THE MOVE\n         EX    11,MVCOML\n         B     TDPR          GO PRINT SHORT LINE\nTD4      EQU   *\n         BCTR  3,0\n         EX    3,MVCOML\n         B     TDPR           GO PRINT SHORT LINE\nMVCOML   MVC   TDOUTAR(0),0(5)        COMMON MOVE INSTRUCTION\nUNPK     EQU   *             CONVERT 50 BYTES TO 100 BYTES HEX\n         UNPK  0(15,5),0(8,2)\n         UNPK  14(15,5),7(8,2)\n         UNPK  28(15,5),14(8,2)\n         UNPK  42(15,5),21(8,2)\n         UNPK  56(15,5),28(8,2)\n         UNPK  70(15,5),35(8,2)\n         UNPK  84(15,5),42(8,2)\n         UNPK  98(3,5),49(2,2)\n         TR    0(100,5),TDPTABLE-240\n         BR    14\nTD9      EQU   *\n         BAL   11,SPACE1     SPACE A LINE AFTER WHOLE BLOCKED\n         B     TDLOOP\nTDEOJ    EQU   *\n         CNOP  0,4                 ALIGN ON WORD BOUNDRY\n         BAL   10,NXTFL            GO SEE IF MORE FILES\n         DC    A(TDAGN)            RETURN ADDRESS\n         B     ASKAGN\n         EJECT\n***********************************************************************\n*                                                                     *\n*      THIS ROUTINE IS USED TO FORMAT PRINT A TAPE.  THE TAPE TO BE   *\n*      PRINTED MAY BE BLOCKED OR UNBLOCKED.                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CNOP  0,4\nTF       EQU   *\n         MVI   SW82,0              RESET END OF FILE SWITCH\n         NI    OPENSW,0\n         CLOSE (PRINT)\n         MVI   PRINT+36,X'84'   ASA\n         BAL   11,OPENPRNT        OPEN SYSPRINT IF NECESSARY\n         MVI   OPCODE,C'1'   SKIP T  CHAN 1\n         BAL   11,SKIPTO2\n         MVC   INCCW+8(8),TDINCCW  SET UP READ CCW\n         BAL   10,TAPINSET         GET TAPE ADRS AND MODE\n         XC    CNTARA,CNTARA  CLEAR\n         BAL   10,TPFILS           SEE HOW MANY FILES\n*\nRDTAPE   EQU   *\n         BAL   11,IOIN             READ A TAPE RECORD\n         CLI   INECB,X'7F'         WAS AN ERROR ENCOUNTERED\n         BE    TF1                 BRANCH NO ERROR\n         TM    INSTAT+4,X'01'      SEE ID EOF\n         BC    1,TFEOF\n         B     TAPERROR            BRANCH TO ERROR MSG\n         SPACE 1\n*    FIND RECORD LENGTH AND FORMAT IF POSSABLE.\n         SPACE 1\nTF1      EQU   *\n         XC    ADDR,ADDR     CLEAR\n         MVI   TFBYP+1,0     RESET\n         MVI   SW82,0              RESET EOF SWITCH\n         LH    2,INSTAT+6          GET RESIDUAL COUNT\n         LH    3,TDINCCW+6         GET BEGINNING COUNT\n         SR    3,2                 RESULT IS LENGTH OF RECORD\n         SR    4,4                 CLEAR REGISTER\n         SR    5,5                 CLEAR REGISTER\n         LR    5,3                 GET RECORD LENGTH\n         LA    6,133               PUT 133 INTO REG\n         DR    4,6                 DIVIDE BY 133\n         C     4,=F'0'             SEE IF WAS MULT OF 133\n         BE    FORMAT              BRANCH IF MULT OF 133\n         SR    4,4\n         SR    5,5\n         LR    5,3\n         LA    6,134\n         DR    4,6           DOS OLP\n         C     4,=F'0'       MULT OF 134\n         BNE   ONE21\n         LA    1,1\n         ST    1,ADDR\n         BCTR  6,0\n         B     FORMAT\nONE21    DS    0H\n*\n         SR    4,4                 CLEAR REGISTER\n         SR    5,5                 CLEAR REGISTER\n         LR    5,3                 GET RECORD LENGTH\n         LA    6,121               PUT 121 INTO REG\n         DR    4,6                 DIVIDE BY 121\n         C     4,=F'0'             SEE IF WAS MULT OF 121\n         BNE   UNFMTD\nFORMAT   DS    0H\n         LR    7,6           SAVE\n         MVI   TDOUTAR,C' '\n         MVC   TDOUTAR+1(131),TDOUTAR\n         LA    5,TDAREA\n         BCTR  6,0           DECR FOR MOVE\nFMFPUT   DS    0H\n         CLI   0(5),X'00'    HDR\n         BNE   TFENDTST\nTMSG1    MVC   RNO(6),1(5)   REPORT NO\n         MVC   PNO(4),7(5)   PAPER NO\n         XC    TFECB,TFECB   CLEAR\n         MVI   TFID,C' '\n         MVC   TFID+1(39),TFID\n         LA    1,TFMSG\n         SVC   35\n         WAIT  ECB=TFECB\n         OC    TFID(2),=C'  '   UPPER CASE\n         CLC   TFID(2),=C'GO'  PROCEED\n         BE    TFHDR\n         CLC   TFID(2),=C'SF'  SPACE OLP FILE\n         BNE   TMSG1\n          MVI   TFBYP+1,X'F0'  SET BYPASS SW.\n         B     TFHDR\nTFENDTST  DS   0H\n         CLI   0(5),X'FF'    TRAILER\n         BE    TFEOF\nTFBYP    BC    0,TFHDR\n         EX    6,MVCOML\n         BAL   11,TDPRINTA\n         MVI   TDOUTAR,C' '\n         MVC   TDOUTAR+1(131),TDOUTAR\nTFHDR    DS    0H\n         S     3,ADDR\n         SR    3,7           DECR BLKSIZE\n         BC    12,RDTAPE   BR IF BLK FINISHED\n         A     5,ADDR\n         AR    5,7           NXT\n         B     FMFPUT        NXT LINE\nTFEOF    DS    0H\n         MVI   TFBYP+1,0     RESET\n         LH    11,CNTARA\n         LA    11,1(,11)\n         STH   11,CNTARA\n         CVD   11,TDWK\n         UNPK  TFCNT(3),TDWK+5(3)\n         OI    TFCNT+2,X'F0'\n         CNOP  0,4\n         WTO   'OS-DEBE COMPLETED FILE 000'\nTFCNT    EQU   *-5\n         CLC   FILES+5(3),=C'ALL'\n         BNE   FMTA\n         TS    SW82\n         BC    4,*+8\n         B     RDTAPE\nTFEND    BAL   10,RUIN\n         NI    OPENSW,0\n         CLOSE (PRINT)\n         MVI   PRINT+36,X'82'   MACH\n         B     ASKAGN\nFMTA     CLC   CNTARA(2),FILES+6   FINISHED\n         BL    RDTAPE\n         B     TFEND\nTDPRINTA DS    0H\n         PUT   PRINT,TDOUTAR\n         BR    11\n*\nTFMSG    DS    0F\n         DC    AL1(40)\n         DC    AL3(TFID)\n         DC    A(TFECB)\n         DC    AL2(TFLEN)\n         DC    H'0'\nTFMSG0   DC    C'REPORT - '\nRNO      DC    C'XXXXXX'\n         DC    C' PAPER - '\nPNO      DC    C'XXXX'\n         DC    C' REPLY GO WHEN READY'\nTFLEN    EQU   *-TFMSG0+4\nTFECB    DC    F'0'\nADDR     DC    F'0'\nTFID     DC    CL40' '\n         EJECT\n*  TAPE TO TAPE COPY\n         SPACE 1\nTT       EQU   *\n         BAL   10,TAPINSET    DETERMINE WHICH TAPE UNIT AND SET UP\n         BAL   10,TPFILS  GO SEE HOW MANY FILES TO PROCESS\nTTZ      BAL   10,TPOUTSET    DETERMINE WHICH TAPE UNIT AND SET UP\n         CLC INDEBMOD(4),OUTDEBMD    SEE IF THE SAME TAPE FOR IN - OUT\n         BE    STERR              BRANCH IF SAME TAPE\n         MVC   INCCW+8(8),NOOP     MOVE IN NOOP CCW\n         BAL   11,IOIN             GO PERFORM NOOP\n         MVC   OUTCCW+8(8),NOOP    MOVE IN NOOP CCW\n         BAL   11,IOOUT            GO PERFORM NOP\n         MVC   INCCW+8(8),TDINCCW  SET UP READ CCW\n         MVI   EOFSW,X'00'         RESET EOF SWITCH\n         MVI   EOJTT+1,X'00'       NOP EOJ BRANCH\nTTLOOP   EQU   *\n         BAL   11,IOIN        READ A BLOCK\n         CLI   INECB,X'7F'\n         BE    TT1           EVERYTHING OK, BRANCH\n         TM    INSTAT+4,X'01'\n         BNO   TAPERROR            BRANCH IF NOT EOF\n         BAL   10,TTEOF            GO SEE IF MORE FILES\n         B     TTLOOP          GO GET NEXT RECORD\n         SPACE 1\n*  IF OS CAN'T RECOVER FROM THE ERROR, I SURELY WON'T TRY\nTAPERROR EQU   *\n         BAL   10,RUIN             GO SEE IF TO REWIND INPUT\n         CLC   ID(2),=C'TT'        SEE IF TAPE TO TAPE\n         BNE   *+8                 BRANCH IF NOT\n         BAL   10,RUOUT            SEE IF SHOULD REWIND/UNLOAD\n         WTO   'INPUT TAPE ERROR - EOJ'\n         B     ASKAGN\n         SPACE 3\nSTERR  WTO 'SAME TAPE FOR INPUT AND OUTPUT - USE ANOTHER OUTPUT TAPE'\n         B     TTZ                 GET NEW TAPE ADDRESS\n         SPACE 3\nTT1      LH    2,INSTAT+6          GET RESIDUAL COUNT\n         LH    3,TDINCCW+6         GET BEGINNING COUNT\n         SR    3,2           COMPUTE BYTES READ IN\n         STH   3,TTCCWOUT+6        SET UP WRITE CCW\n         MVC   OUTCCW+8(8),TTCCWOUT\n         MVI   EOFSW,X'00'         RESET EOF SWITCH\n         BAL   11,IOOUT      WRITE A BLOCK\n         CLI   OUTECB,X'7F'        EVERYTHING OK\n         BE    TTLOOP        YES, LOOP\n         SPACE 1\n*  IF OS CAN'T RECOVER FROM THE ERROR, I SURELY WON'T TRY\nTAPERR   EQU   *\n         BAL   10,RUOUT            GO SEE IF TO REWIND OUTPUT\n         CLC   ID(2),=C'TT'        SEE IF TAPE TO TAPE\n         BNE   *+8                 BRANCH IF NOT\n         BAL   10,RUIN             SEE IF SHOULD REWIND/UNLOAD\n         WTO   'OUTPUT TAPE ERROR - EOJ'\n         B     ASKAGN\n         EJECT\nRW       EQU   *\n         BAL   10,TPOUTSET         DETERMINE WHICH TAPE UNIT AND SET UP\n         MVC   OUTCCW+8(8),RWCCW   SET UP REWIND CCW\n         BAL   11,IOOUT            EXECUTE THE REWIND\n         B     ASKAGN\n         SPACE 3\nWT       EQU   *\n         BAL   10,TPOUTSET     DETERMINE WHICH TAPE UNIT AND SET UP\n         B     CTEOJ         GO WRITE A TAPE MARK\n       SPACE 3\n*    THIS ROUTINE IS USED TO CHANGE LABELS ON ALL DIRECT ACCESS DEVICES\n*    EXECPT THE 2321.\n*    IT REQUIRES THE DISK PACK BE VARIED OFF LINE AND IS NOT BEING\n*    USED BY THE OPERATING SYSTEM. THIS ROUTINE IS BRANCHED TO WHEN ONE\n*    OF TWO SETS OF ROUTINE ID CHARACTERS ARE ENTERED. (CL OR LA)\n       SPACE 3\nCLIP     EQU   *\n         MVC   ID(2),=C'CL'        MAKE ROUTINE CHACTERS CONSISTANT\n         XC    TDAREA(80),TDAREA   CLEAR I/O AREA\n         SPACE 2\n* THE FOLLOWING CODE IS USED TO SEARCH THE ADDRESS TO BE CLIPPED\n* WHEN A ONE LINE ENTRY IS USED.\n         SPACE 1\nCLIP1    LA    2,ID                GET ADDRESS OF SEARCH\n         LA    3,L'ID-6            GET LENGTH OF SEARCH\nADRCN    TM    2(2),X'C0'          SEE IF ALPHAMERIC\n         BO    BUMA                BRANCH IF ALPHAMERIC\n         TM    6(2),X'C0'          SEE IF ALPHAMERIC\n         BO    BUMA                BRANCH IF ALPHAMERIC\n         LA    4,3                GET NUMBER OF CHARACTERS\n         BAL   11,ALPMRIC         GO SEE IF ALPHAMERIC\n         BNO   BUMA               BRANCH NOT ALPHAMERIC\n         MVC   DISK(3),3(2)        MOVE IN ADDRESS FOR CLIP\n         B     BYCLP              BYPASS MSG\nBUMA     LA    2,1(2)              BUMP ADRS OF SEARCH\n         BCT   3,ADRCN             TRY AGAIN\n         SPACE 2\n         LA    2,ID                GET ADRS OF SEARCH\n         LA    3,L'ID-8            GET LENGTH OD SEARCH\nADRCP    TM    2(2),X'C0'          SEE IF ALPHAMERIC\n         BO    BUMB                BRANCH IF ALPHAMERIC\n         LA    4,5                 GET NUMBER OF CHARACTERS\n         BAL   11,ALPMRIC          GO SEE IF ALPHAMERIC\n         BNO   BUMB                BRANCH IF ALPHAMERIC\n         MVC   TAPE(5),3(2)        MOVE IN ADRS FOR CLIP\n         B     BYCLP               BYPASS MSG\nBUMB     LA    2,1(2)              BUMP SEARCH ADRS\n         BCT   3,ADRCP             TRY AGAIN\n         SPACE 2\n         XC    ID+4(L'ID-5),ID+4   CLEAR PART OF MSG AREA\n WTOR 'DEVICE ADRS TO BE CLIPPED OR EOJ (XXX OR XXXXX)',ID+5,5,REPLYECB\n         BAL   11,WAITANS          WAIT REPLY\n         B     CLIP1               GO FIND ADRS NOW\n         SPACE 2\nBYCLP    OC    DISK(3),=3C' '           MAKE UPPER CASE\n         CLC   DISK(3),=C'EOJ'          SEE IF SHOULD END ROUTINE\n         BE    ASKAGN                   GET NEW ID\n         MVC   D1(3),DISK               GET DISK ADDRESS\n         MVI   DEVCLASS,UCB3DACC        SEARCH FOR DASD UCBS   MS061986\n         BAL   4,UCBLOKUP               GET UCB ADDRESS OF DEVICE\n         LA    11,CLPCLR                LOAD ERROR RETURN ADDRESS\n         CLI   #GOTUCB,X'01'       Q. DID WE FIND UCB ?        MS072987\n         BE    BYCLP1              A. YES WE DID               MS072987\n         B     NODEVICE            A. NO WE DID NOT            MS072987\nBYCLP1   EQU   *                                               MS072987\n         ST    2,OUTDEBMD               STORE UCB ADDRESS IN DEB\n         CLI   18(2),X'20'              SEE IF DIRECT ACCESS\n         BNE   NOTDISK                  BRANCH TO NOT DISK MSG\n         CLI   19(2),X'05'         SEE IF 2321\n         BE    NOTSUP              BRANCH IF 2321\n         MVC   OUTDEVT(1),19(2)    PUT UNIT TYPE INTO DCB\n         OI    OUTDEVT,X'20'        FINISH IT\n         MVC   OUTCCW(32),RDLABL   GET READ LABEL CCWS\n         BAL   11,ENABLE           SEE IF SHLD PRINT ENABLE MSG\n         SPACE 1\n         XC    TDAREA(80),TDAREA   CLEAR I/O AREA\n         BAL   11,IOOUT            READ OLD LABEL\n         CLI   OUTECB,X'7F'        SEE IF SUCCESSFUL\n         BNE   RDDKER              BRANCH IF ERROR\n         SPACE 1\n         BAL   10,OLDMSG           GET AND PRINT OLD LABEL\n         BAL   10,ASKNEW           GO ASK FOR NEW LABEL\n         B     GETNEW              BRANCH TO WRITE LABLE\n         SPACE 1\nOLDMSG   EQU   *\n         MVC   OLDLAB+16(6),TDAREA+4 GET OLD VOL ID TO MSG\n         MVC   OLDLAB+34(10),TDAREA+41 GET OLD OWNER ID\n         CNOP  0,4\nOLDLAB   WTO   'OLD VOL=XXXXXX  OLD OWNER=XXXXXXXXXX'\n         TM    3(2),X'08'          SEE IF DEVICE ALLOCATED\n         BNO   NOTALCT             BRANCH IF NOT ALLOCATED\n         MVC   ALCTDVMG+15(3),13(2) GET DEVICE ADRS\nALCTDVMG WTO   'DEVICE DDD IS ALLOCATED AND WAS NOT CLIPPED'\n         B     RDNEW               BYPASS WRITING VOL AND OWNER INFO\nNOTALCT  EQU   *\n         BR    10                  BACK TO USING ROUTINE\n         SPACE 1\nASKNEW   EQU   *\n         XC    LABL,LABL           CLEAR VOL AND OWNER AREAS\n         MVC   OWNER(10),=10C' '   BLANK THE LABEL AREA\n         WTOR 'ENTER NEW VOL ID AND OWNER ID OR EOJ (VVVVVV,OOOOOOOOOO),\n               ',LABL,18,REPLYECB\n         BAL   11,WAITANS          WAIT REPLY\n         BR    10                  BACK TO USING ROUTINE\nLABL     DC    XL17'00'            STORAGE SPACE FOR VOLAND OWNER INFO\nOWNER    EQU   LABL+7\n         SPACE 1\n         CNOP  0,4\nGETNEW   EQU   *\n         TM    LABL+6,X'40'        SEE IF LABL AND OWNER SEPTED\n         BO    FMTMSG              GO PRINT MSG\n         MVC   TDAREA+4(6),LABL    GET NEW LABEL\n         CLI   OWNER,X'40'         SEE IF OWNER INFO\n         BE    BYIDNW              BRANCH IF NO OWNER INFO\n         MVC   TDAREA+41(10),OWNER MOVE IN OWNER ID\nBYIDNW   EQU   *\n         MVI   OUTCCW+CLPCCW-RDLABL,X'05' CHANGE TO WRITE DATA\n*\n         BAL   11,IOOUT            WRITE NEW LABEL\n         CLI   OUTECB,X'7F'        SEE IF SUCCESSFUL\n         BNE   WRDKER              BRANCH IF ERROR\n*\nRDNEW    EQU   *\n         MVI   OUTCCW+CLPCCW-RDLABL,X'06' CHANGE TO RD DATA\n         XC    TDAREA(80),TDAREA   CLEAR I/O AREA\n         BAL   11,IOOUT            READ NEW LABEL\n         CLI   OUTECB,X'7F'        SEE IF SUCCESSFUL\n         BNE   LABCHK              BRANCH IF CANT READ NEW LABEL\n         BAL   10,NEWMSG           GO PRINT NEW LABEL\n         B     ASKAGN\nFMTMSG   WTO   'NON-ALPHAMERIC CHARACTER MUST SEPARATE VOL AND OWNER'\n         B     ASKNEW              GO ASK FOR INFO AGAIN\n         SPACE 1\nNEWMSG   EQU   *\n         MVC   NLABCK+19(6),TDAREA+4 MOVE IN NEW VOL INFO\n         MVC   NLABCK+37(10),TDAREA+41 MOVE IN NEW OWNER INFO\n         CNOP  0,4\nNLABCK   WTO   'NEW VOL ID=VVVVVV  NEW OWNER=0000000000'\n         BR    10                  BACK TO USING ROUTINE\n*\nCLPCLR   XC    ID+2(L'ID-2),ID+2    CLEAR ID AREA\n         B     CLIP                 BRANCH TO START OF ROUTINE\n*\nRDDKER   WTO   'ERROR READING OLD LABEL'\n         B     ASKAGN\nLABCHK   WTO   'ERROR READING NEW LABEL'\n         B     ASKAGN\nWRDKER   WTO   'ERROR WRITING NEW LABEL'\n         B     ASKAGN\n         SPACE 1\n*        THE FOLLOWING CODE IS FOR THE TAPE LABEL ROUTINE\n         SPACE 1\nNOTDISK  MVC   OUTDEVT(1),19(2)    PUT UNIT TYPE INTO DCB\n         BAL   10,TPOUTSET         SET UP FOR TAPE\n         MVC   OUTCCW+8(8),RWCCW   MOVE IN REWIND CCW\n         SPACE 1\n         BAL   11,IOOUT            GO REWIND TAPE\n         CLI   OUTECB,X'7F'        SEE IF OK\n         BNE   ERRWND              BRANCH IF ERROR\n         SPACE 1\n         BAL   11,SEARCH           SEE IF SHOULD BYPASS OLD LABEL READ\n         DC    C'B'                KEY LETTER FOR SEARCH\n         DC    AL1(20)             LENGTH OF SEARCH\n         BE    BYOLMSG             BRANCH IF FOUND\n         SPACE 1\n         MVC   OUTCCW+8(8),RDLBL   MOVE IN READ CCW\n         BAL   11,IOOUT            GO ATTEMPT TO READ OLD LABEL\n         CLI   OUTECB,X'7F'        SEE IF READ OK\n         BE    LBCK                BRANCH IF READ OK\n         WTO   'COULD NOT READ OLD LABEL - DIFFERENT MODE OR NO LABEL'\n         B     BYOLMSG             BYPASS PRINTING OF LABEL\n         SPACE 1\nLBCK     CLC   TDAREA(3),=C'VOL'   SEE IF LABEL\n         BNE   BYOLMSG             BYPASS PRINTING OF OLD LABEL\n         BAL   11,OLDMSG           GO PRINT OLD LABEL\n         SPACE 1\nBYOLMSG  BAL   10,ASKNEW           GET NEW LABEL\n         MVC   OUTCCW+8(8),RWCCW   MOVE IN REWIND CCW\n         BAL   11,IOOUT            GO REWIND\n         CLI   OUTECB,X'7F'        SEE IF OK\n         BNE   ERRWND              BRANCH IF ERROR ON REWIND\n         SPACE 1\n         XC    TDAREA(80),TDAREA   CLEAR I/O AREA\n         MVC   TDAREA(4),=C'VOL1'  MOVE IN VOL1 INFO\n         MVC   TDAREA+4(6),LABL    MOVE IN LABEL\n         SPACE 1\n         MVC   OUTCCW+8(8),WRLAB   MOVE IN WRITE LABEL CCW\n         BAL   11,IOOUT            GO WRITE TAPE\n         CLI   OUTECB,X'7F'        SEE IF WRITE OK\n         BNE   WRDKER              BRANCH ERROR WRITING NEW LABEL\n         SPACE 1\n         XC    TDAREA(80),TDAREA   CLEAR I/O AREA\n         MVC   OUTCCW+8(8),RDLBL   MOVE IN READ LABEL CCW\n         BAL   11,IOOUT            GO READ NEW LABEL\n         CLI   OUTECB,X'7F'        SEE IF OK\n         BNE   LABCHK              BRANCH TO ERROR MESSAGE\n         BAL   10,NEWMSG           GO PRINT NEW LABEL\n         SPACE 1\n         MVC   OUTCCW(8),WTCCW     MOVE IN TAPE MARK CCW\n         BAL   11,IOOUT            GO WRITE TAPE MARK\n         CLI   OUTECB,X'7F'        SEE IF WRITE OK\n         BE    TMERROR             BRANCH TO ERROR MSG\n         SPACE 1\n         MVC   OUTCCW+8(8),RWUN    MOVE IN REWIND/UNLOAD FOR TAPE\n         BAL   11,IOOUT            GO REWIND/UNLOAD FOR TAPE\n         CLI   OUTECB,X'7F'        SEE IF R/U OK\n         BNE   ASKAGN              GO GET NEW ROUTINE\n WTO 'I/O ERROR ATTEMPTING REWIND/UNLOAD OF TAPE - NEW LABEL OK'\n         B     ASKAGN              GO GET NEW ROUTINE\nERRWND   WTO   'I/O ERROR ATTEMPTING TO REWIND TAPE'\n         B     ASKAGN              GO GET NEW ROUTINE\nTMERROR  WTO   'I/O ERROR ATTEMPTING TO WRITE TAPE MARK'\n         B     ASKAGN              GO GET NEW ROUTINE\nDSKONL   WTO   'THE DEVICE ADRS ENTERED IS ONLINE'\n         B     DSKOFM              BRANCH TO OTHER MSG\nDSKASNG  WTO   'THE ADRS JUST ENTERED IS ASSIGNED BY OS'\nDSKOFM   WTO   '*** DEVICES USED FOR CLIP MUST BE OFFLINE ***'\n         B     CLPCLR              BRANCH BACK TO START OF ROUTINE\nNOTSUP   WTO   'DEVICE ADRS ENTERED IS NOT SUPPORTED FOR CLIPPING'\n         B     ASKAGN              GET NEXT ROUTINE\n        SPACE  5\n*  SUB-ROUTINE FOR REWIND OR REWIND/UNLOAD FOR INPUT TAPE\n*  LINKAGE     BAL 10,RUIN\n*\nRUIN     BAL   11,SEARCH           GO SEE IF SHOULD UNLOAD\n         DC    C'U'                KEY LETTER FOR REWIND/UNLOAD\n         DC    AL1(20)             LENGTH OF SEARCH\n         BNE   RUIN1               BRANCH NO UNLOAD\n         MVC   INCCW(8),RWUN       MOVE IN REWIND & UNLOAD CCW\n         BAL   11,IOIN             GO PERFORM I/O\n         BR    10                  BACK TO USING ROUTINE\nRUIN1    BAL   11,SEARCH           GO SEE IF SHOULD REWIND\n         DC    C'R'                KEY LETTER FOR REWIND\n         DC    AL1(20)             LENGTH OF SEARCH\n         BNE   0(10)               BACK TO USING ROUTINE\n         MVC   INCCW(8),RWCCW      MOVE IN REWIND CCW\n         BAL   11,IOIN             GO PERFORM I/O\n         BR    10                  BACK TO USING ROUTINE\n         SPACE 5\n*   THIS SUB-ROUTINE IS USED TO CHECK THE READY BIT IN THE UCB OF I/O\n*   DEVICES.  WHEN NOT READY, A MESSAGE IS ISSUED TO ENABLE THE DEVICE\n*   WHICH WAS CHECKED.  REGISTER 2 MUST CONTAIN THE ADRS OF THE UCB.\n         SPACE 1\n*   LINKAGE = BAL  11,ENABLE\n         SPACE 1\nENABLE   TM    6(2),X'40'          SEE IF DEVICE IS READY\n         BNO   0(11)               RETURN TO USING ROUTINE\n         MVC   ENMSG+26(3),13(2)   MOVE IN DEVICE TO MESSAGE\n         CNOP  0,4\nENMSG    WTO   '*** ENABLE DEVICE XXX - DEBE'\n         BR    11                  RETURN TO USING ROUTINE\n         SPACE 5\n*   SUB-ROUTINE FOR REWIND OR REWIND/UNLOAD FOR OUTPUT TAPE\n*   LINKAGE    BAL 10,RUOUT\n*\nRUOUT    BAL   11,SEARCH           GO SEE IF SHOULD UNLOAD\n         DC    C'U'                KEY LETTER FOR REWIND/UNLOAD\n         DC    AL1(20)             LENGTH OF SEARCH\n         BNE   RUOUT1              BRANCH NO UNLOAD\n         MVC   OUTCCW(8),RWUN      MOVE IN REWIND & UNLOAD CCW\n         BAL   11,IOOUT            GO PERFORM I/O\n         BR    10                  BACK TO USING ROUTINE\nRUOUT1   BAL   11,SEARCH           GO SEE IF SHOULD REWIND\n         DC    C'R'                KEY LETTER FOR REWIND\n         DC    AL1(20)             LENGTH OF SEARCH\n         BNE   0(10)               BACK TO USING ROUTINE\n         MVC   OUTCCW(8),RWCCW     MOVE IN REWIND CCW\n         BAL   11,IOOUT            GO PERFORM I/O\n         BR    10                  BACK TO USING ROUTINE\n*\n         SPACE 5\n*\n*        REWIND AND UNLOAD ROUTINE\n*\nRU       EQU   *\n         BAL   10,TPOUTSET   DETERMINE WHICH TAPE DRIVE\n         MVC   OUTCCW+8(8),RWUN    SET UP REWIND & UNLOAD CCW\n         BAL   11,IOOUT      EXECUTE THE REWIND & UNLOAD\n         B     ASKAGN\n*\n         SPACE 5\n*        ROUTINE TO WRITE TAPE MARK AND/OR CHECK EOF\n*\n*        ENTERED VIA BAL 10,TTEOF\nTTEOF    EQU   *\n         CLC   FILES+5(3),=C'ALL'     SEE IF ALL\n         BNE   FLCNT     BRANCH AROUND DOUBLE FILE MK TEST\n         TS    EOFSW               SET EOF SWITCH\n         BZ    FLCNT               BRANCH IF NO PREVIOUS EOF\n         MVI   EOJTT+1,X'F0'       SET NOP TO BRANCH FOR EOJ\nFLCNT    EQU   *\n         MVC   OUTCCW+8(8),WTCCW   SET UP WTM CCW\n         OI    OUTCCW+12,X'60'     CHAIN IT TO A NOP\n         MVC   OUTCCW+16(8),=X'0300000020000001'\n         BAL   11,IOOUT            WRITE A TAPE MARK\n         CLI   OUTECB,X'7F'        EVERY THING OK\n         BNE   TAPERR              BRANCH ON ERROR\nEOJTT    NOP   CTEOJ           GO WRITE TAPE MARK AND END ROUTINE\n         CLC   FILES+5(3),=C'ALL'  SEE IF PROCESS ALL\n         BE    0(10)               BACK TO ROUTINE TILL 2 EOF S\nTCEOF    LH    2,FILES+6           GET NUMBER OF FILES\n         BCTR  2,0                 SUBSTRACT 1\n         STH   2,FILES+6           PUT NEW NUMBER BACK\n         CH    2,=H'0000'          SEE IF MORE FILES\n         BH    0(10)               BRANCH IF MORE\n         B     CTEOJ           GO WRITE TAPE MARK FOR EOV\nEOFSW    DC    X'0000'             END OF FILE SWITCH\n         SPACE 4\n*      THIS ROUTINE WILL ASK THE OPERATOR TO SUPPLY AN ADDRESS\n*      FOR THE CARD PUNCH.\n*\n*      ROUTINE ENTRY= BAL 11,PUNCH\n         SPACE 3\nPUNCH    EQU   *\n         CLC   PUNCH1(3),=3X'00'   SEE IF HAVE PUNCH ADDRESS\n         BNE   0(11)               BRANCH IF HAVE ADDRESS\n         WTOR  'CARD PUNCH - XXX',PUNCH1,3,REPLYECB\n         WAITR ECB=REPLYECB     WAIT FOR OPERATOR\n         XC    REPLYECB(4),REPLYECB      CLEAR REPLY ECB\n         OC    PUNCH1(3),=C'   '    MAKE UPPER CASE\n         CLC   PUNCH1(3),=C'EOJ'     SEE IF SHOULD END DEBE\n         BE    ASKAGN              GO GET NEW ID\n         BR    11               BACK TO USING ROUTINE\n         SPACE 4\n*        ROUTINE TO FIND NUMBER OF FILES WANTED\n*\n*        ENTRY IS  BAL 10,TPFILS\n*\nTPFILS   EQU   *\n         XC    FILES(8),FILES      CLEAR FILES ENTRY AREA\n         SPACE 2\n*  THE FOLLOWING CODE IS USED FOR SEARCHING OF FILE COUNT WHEN A\n*  ONE LINE ENTRY IS USED.\n         SPACE 1\n         LA    2,ID                GET ADRS OF SEARCH\n         LA    3,L'ID-5            GET LENGTH OF SEARCH\nCLCALL   TM    2(2),X'C0'          SEE IF ALPHAMERIC\n         BO    BUMP                BRANCH IS ALPHAMERIC\n         TM    6(2),X'C0'          SEE IF ALPHAMERIC\n         BO    BUMP                BRANCH IF ALPHAMERIC\n         LA    4,3                GET NUMBER OF CHARACTERS\n         BAL   11,ALPMRIC         GO SEE IF ALBHAMERIC\n         BNO   BUMP               BRANCH NOT ALPHAMERIC\n         MVC   FILES+5(3),3(2)     MOVE IN NUMBER OF FILES OR ALL\n         B     ALLBPS              BRANCH IF FOUND\nBUMP     LA    2,1(2)              BUMP SEARCH ADRS\n         BCT   3,CLCALL            BUMP CTR\n         SPACE 2\nTPFL WTOR  'HOW MANY FILES (ALL OR UP TO 999)-XXX',FILES+5,3,REPLYECB\n         WAITR ECB=REPLYECB        WAIT FOR OPERATOR\n         XC    REPLYECB(4),REPLYECB      CLEAR REPLY ECB\n         OC    FILES+5(3),=3C' '   MAKE ENTRY UPPER CASE\nALLBPS   CLC   FILES+5(3),=C'ALL' SEE IF ALL FILES ARE TO BE PROCESSED\n         BE    0(10)         GO BACK TO USING ROUTINE IF ALL\n         CLC   FILES+5(3),=C'EOJ'     SEE IF FINISHED WITH ROUTINE\n         BE    ASKAGN              GO GET NEXT ROUTINE\n         TM    FILES+5,C'0'    SEE IF NUMBER\n         BNO   OPMSG   TELL OPERATOR OF THE ERROR\n         TM    FILES+6,C'0'   SEE IF NUMBER\n         BNO   OPMSG   TELL OPERATOR OF THE ERROR\n         TM    FILES+7,C'0'   SEE IF NUMBER\n         BNO   OPMSG   TELL OPERATOR OF THE ERROR\n         PACK  FILES(8),FILES(8)\n         CVB   2,FILES\n         ST    2,FILES+4\n         BR    10                  BACK TO USING ROUTINE\nOPMSG    WTO   'HOW MANY FILES ? - UP TO ''999'' OR ''ALL'''\n         B     TPFL                GO TRY AGAIN\n         EJECT\n*  TEST TO SEE IF PRINTER HAS BEEN OPENED\n         SPACE 1\nOPENPRNT EQU   *\n         TM    OPENSW,X'FF'\n         BC    1,OPENOK\n         OPEN (PRINT,(OUTPUT))\n         OI    OPENSW,X'FF'\nOPENOK   BR    11\nOPENSW   DC    X'0000'\n         SPACE 3\n*  COMMON PRINT ROUTINE\n         SPACE 1\nTDPRINT  EQU   *\n         ST    11,SV11  SAVE REG 11\n         MVI   OPCODE,9            SPACE 1 AND PRINT\n         PUT   PRINT,OPCODE\n         LH    1,C    INCREMENT LINE COUNTER\n         LA    0,1(1)\n         STH   0,C\n         CH    0,CLIMIT  AT END OF PAGE\n         LA    11,*+8\n         BH    SKIPTO1\n         L     11,SV11  RESTORE REG 11\n         BR    11\n         SPACE 1\n*  SKIP PRINTER TO CHANNEL 1\n         SPACE 1\nSKIPTO1  EQU   *\n         MVI   OPCODE,X'8B'        SKIP TO 1\nSKIPTO2  DS    0H\n         MVI   TDOUTAR,C' '  BLANK PRINT LINE\n         MVC   TDOUTAR+1(131),TDOUTAR\n         PUT   PRINT,OPCODE\n         SR    0,0\n         STH   0,C  ZERO LINE COUNTER\n         BR    11\n         SPACE 1\n*  SPACE PRINTER ONE LINE\n         SPACE 1\nSPACE1   EQU   *\n         ST    11,SV11  SAVE REG 11\n         MVI   TDOUTAR,C' '  BLANK PRINT LINE\n         MVC   TDOUTAR+1(131),TDOUTAR\n         MVI   OPCODE,9            SPACE 1 AND PRINT\n         PUT   PRINT,OPCODE\n         LH    1,C      INCREMENT LINE COUNTER\n         LA    0,1(1)\n         STH   0,C\n         CH    0,CLIMIT  END OF PAGE\n         LA    11,*+8  LOAD RETURN ADDRESS IF BRANCHING\n         BH    SKIPTO1  END OF PAGE, BRANCH\n         L     11,SV11  RESTORE REG 11\n         BR    11\n         EJECT\n*  ROUTINE TO CONVERT MM INTO A SET MODE COMMAND\n         SPACE 1\nCONVRTMM EQU   *\n         STM   2,3,SAVEUM    SAVE WORK REGISTERS\n         IC    2,MM+1        GET SECOND BYTE OF MM\n         TM    MM+1,X'F0'    IS IT NUMERIC\n         BC    1,MMMM1       YES, BRANCH\n         AH    2,=H'9'       CONVERT ALPHA TO NUMERIC\nMMMM1    SRDL  2,4           SAVE IT\n         IC    2,MM          GET FIRST BYTE OF MM\n         TM    MM,X'F0'      IS IT NUMERIC\n         BC    1,MMMM2       YES, BRANCH\n         AH    2,=H'9'       CONVERT ALPHA TO NUMERIC\nMMMM2    SLDL  2,4\n         STC   2,MM          PUT MM  BACK IN HEX\n         LM    2,3,SAVEUM    RESTORE REGISTERS\n         BR    14\nSAVEUM   DS    2F\n         EJECT\n***********************************************************************\n*                                                                     *\n*  THIS ROUTINE FINDS A UCB ADDRESS WHEN A DEVICE ADDRESS IS PROVIDED *\n*  IN THE D1 AREA.  IF A UCB IS FOUND FOR THE DEVICE A CC OF ZERO IS  *\n*  RETURNED TO THE USING ROUTINE.                                     *\n*                                                                     *\n***********************************************************************\n*\n*  LINKAGE IS     BAL 4,UCBLOKUP\n*\n*\n         SPACE 1\nUCBLOKUP EQU   *\n         MVI   #GOTUCB,X'00'       MAKE SURE SWITCH IS RESET   MS072987\n         OC    D1(3),=XL3'40'      MAKE UPPER CASE\n         L     2,16                GET CVT ADRS\n         USING CVTMAP,R2           ADDRESABILITY TO CVT        MS061986\n         TM    CVTDCB,X'80'        Q. IS THIS AN MVS/XA SYSTEM MS061986\n         BO    UCBLOKXA            A. YES IT IS                MS061986\n         DROP  R2                                              MS061986\n         L     3,40(2)             GET ADRS TO UCB ADRS TABLE\nUCBSRH1  LH    2,0(3)              GET UCB ADRS\n         LTR   2,2                 SEE IF GOOD ADRS\n         BZ    UCBSRH              BRANCH NO ADDRESS\n         BM    0(4)                BRANCH--- END OF TABLE\n         CLI   2(2),X'FF'          SEE IF UCB\n         BNE   UCBSRH              BRANCH NO UCB\n         CLC   D1(3),13(2)         SEE IF UCB FOR UNIT FOUND\n         BE    0(4)                BRANCH IF FOUND\nUCBSRH   LA    3,2(3)              BUMP TO GET NEXT UCB ADRS\n         B     UCBSRH1             BRANCH NOT END\n         SPACE 3                                               MS061986\nUCBLOKXA EQU   *                                               MS061986\n         L     R3,CVTPTR           GET CVT ADDRESS             MS061986\n         USING CVTMAP,R3           SETUP ADDRESSABILITY        MS061986\n         XC    UCBWORK,UCBWORK     CLEAR WORKAREA              MS061986\n         LA    R1,UCBWORK          GET ADDRESS OF WORK AREA    MS061986\n         ST    R1,PARMWA           STORE ADDRESS IN PARMLIST   MS061986\n         LA    R1,DEVCLASS         GET ADDRESS OF AREA CONTAIN-MS061986\n*                                  ING DEVICE CLASS TO SEARCH. MS061986\n         ST    R1,PARMDEVT         SAVE IN PARM LIST           MS061986\n         LA    R1,ADDRUCB          ADDRESS OF RETURNED UCB     MS061986\n         ST    R1,PARMUCB          STORE ADDRESS IN PARMLIST   MS061986\n         OI    PARMUCB,X'80'       INDICATE END OF PARMLIST    MS061986\n         SPACE 1                                               MS061986\nUCBSRCH  EQU   *                                               MS061986\n         USING UCBOB,R2            SETUP ADDRESSABILTY TO UCB  MS061986\n         LA    R1,PARMLIST         PUT PARMLIST IN R1          MS061986\n         L     R15,CVTUCBSC        GET SCAN SERVICE ADDRESS    MS061986\n         BALR  R14,R15             GOTO SCAN SERVICE           MS061986\n         LTR   R15,R15             Q. HAS A UCB BEEN RETURNED? MS061986\n         BZ    UCBOK               A. YES A UCB HAS BEEN FOUND MS072987\n         MVI   #GOTUCB,X'00'       A. NO A DEVICE NOT FOUND    MS072987\n         BR    R4                  RETURN TO CALLER            MS072987\nUCBOK    EQU   *                                               MS072987\n         MVI   #GOTUCB,X'01'       A. INDICATE DEVICE FOUND    MS072987\n         L     R2,ADDRUCB          R2==> UCB ADDRESS THAT THE  MS061986\n*                                        SCAN ROUTINE RETURNED.MS061986\n         CLC   D1(3),UCBNAME       Q. UNIT ADDRESS CORRECT?    MS061986\n         BE    CKUCBTYP            A. YES. NOW GO SEE IF 3480  MS072987\n         B     UCBSRCH             CONTINUE SEARCHING          MS061986\n         SPACE 2                                               MS061986\nCKUCBTYP EQU   *                                               MS072987\n         TM    UCBTYP,X'78'        Q. IS IT 3480 FULL FUNCTION MS072987\n         BO    SET3480             A. YES IT IS                MS072987\n         TM    UCBTYP,X'33'        Q. IS IT 3480 COMPATABILITY MS072987\n         BO    SET3480             A. YES IT IS                MS072987\n         MVI   #3480,X'00'         A. NO SAY IT IS NOT 3480    MS072987\n         BR    R4                  RETURN TO THE CALLER        MS072987\nSET3480  EQU   *                                               MS072987\n         MVI   #3480,X'01'         A. SAY IT IS A 3480         MS072987\n         BR    R4                  RETURN TO THE CALLER        MS072987\n         DROP  R2                                              MS061986\n         DROP  R3                                              MS061986\n         EJECT\n*  ROUTINE TO ASK FOR THE INPUT TAPE\n         SPACE 1\nTAPINSET EQU   *\n         XC    MM(5),MM            CLEAR AREA\n         SPACE 2\n* THE FOLLOWING CODE IS USED TO SEARCH AN INPUT TAPE ADDRESS\n*  WHEN A ONE LINE ENTRY IS USED.\n         SPACE 1\n         LA    2,ID                GET ADDRS OF SEARCH\n         LA    3,L'ID-7            GET LENGTH OF SEARCH\nTPCPR    TM    2(2),X'C0'          SEE IF ALPHAMERIC\n         BO    BMP                 BRANCH IF ALPHAMERIC\n         TM    8(2),X'C0'          SEE IF ALPHAMERIC\n         BO    BMP                 BRANCH IF ALPHAMERIC\n         LA    4,5                GET NUMBER OF CHARACTERS\n         BAL   11,ALPMRIC         GO SEE IF ALBHAMERIC\n         BNO   BMP                BRANCH NOT ALPHAMERIC\n         ST    2,INFNDAD          STORE WHERE FOUND\n         ST    2,CRNTLOC           STORE LOCATION OF TAPE ADRS\n         MVC   MM(5),3(2)          MOVE IN TAPE ADRS AND MODE\n         BAL   11,BYWAIT           GO TO MODE & USB RTN\n         B     TPINSET             GO SET MODE AND UCB\nBMP      LA    2,1(2)              BUMP SEARCH ADRS\n         BCT   3,TPCPR             SEARCH AGAIN\n         SPACE 2\n         WTOR  'INPUT TAPE - MMXXX',MM,5,REPLYECB\n         BAL   11,WAITAPE    WAIT FOR A REPLY AND SET UP MODE\nTPINSET  LA    11,TAPINSET         GET RETURN ADDRESS FOR MSG ROUTINE\n         CLI   #GOTUCB,X'01'     Q. DID WE FIND UCB ?          MS072987\n         BE    TPINSET1          A. YES WE DID                 MS072987\n         B     NODEVICE          A. NO WE DID NOT              MS072987\nTPINSET1 EQU   *                                               MS072987\n         TM    MM+4,X'BF'          SEE IF INPUT ERROR\n         BZ    INPTEROR            BRANCH IF INPUT ERROR\n         MVC   INTRTCH(1),MM       SET UP TAPE'S DCB\n         MVI   INDEVT,X'81'\n         LA    11,TAPINSET             GET RETURN ADDRESS\n         CLI   18(2),X'80'       IS IT A TAPE (2 POINTS TO UCB)\n         BNE   NTPMSG              BRANCH IF NOT A TAPE\n         TM    SYSTYP,X'40'        SEE IF PCP\n         BO    NCHECK              BRANCH IF PCP\n         TM    3(2),X'08'          IS IT BEING USED\n         BO    ASNGDMG             BRANCH IF BEING USED\n         TM    3(2),X'80'          SEE IF OFFLINE\n         BO    ONLINE              BRANCH IF ONLINE\nNCHECK   EQU   *\n         BAL   11,ENABLE           SEE IF SHOULD PRINT ENABLE MSG\n         ST    2,INDEBMOD          STORE UCB ADDRESS IN DEB\n         CLI   #3480,X'01'         Q. IS IT A 3480 DEVICE?     MS072987\n         BE    INDEB80             A. YES IT IS                MS072987\n         MVC   INDEBMOD(1),MM      PUT SET MODE CMD IN DEB\n         B     SETINIOB                                        MS072987\nINDEB80  EQU   *                                               MS072987\n         MVC   INDEBMOD(1),=X'00'  SET DEB TO X'00' FOR 3480   MS072987\nSETINIOB EQU   *                                               MS072987\n         OI    INIOB,X'40'         SET ON CHAINING\n         MVC   INCCW(1),MM       PUT SET MODE IN CCW\n         MVC   INCCW+1(7),=X'00000060000001'\n         BR    10\nINPTEROR WTO 'FORMAT ERROR - RETYPE LAST ENTRY'\n         B     TAPINSET            GO TRY AGAIN\nNTPMSG   EQU   *\n         WTO 'THE ADDRESS ENTERED IS NOT A TAPE DRIVE'\n         B     CLR                 BRANCH TO TAPE ADRS CLEAR ROUTINE\nASNGDMG  EQU   *\n         WTO 'THE TAPE ADDRESS JUST ENTERED IS ASSIGNED BY THE SYSTEM'\n         B     CLR                 BRANCH TO TAPE ADRS CLEAR ROUTINE\n         SPACE 3\nONLINE   EQU   *\n     WTO   'THE TAPE SPECIFIED IS ONLINE - SHOULD BE OFFLINE FOR DEBE'\n         B     CLR                 BRANCH TO TAPE ADRS CLEAR ROUTINE\n         SPACE 3\n*        BLANK OUT BAD TAPE ADDRESS FOR RETRY\n         SPACE 1\nCLR      L     2,CRNTLOC           GET LOCATION OF TAPE ADDRESS\n         LTR   2,2                 SEE IF DEVICE ADRS ENTERED\n         BZ    0(11)               BRANCH IF NO ADDRESS\n         XC    CRNTLOC,CRNTLOC     CLEAR LOCATION OF TAPE ADRS\n         MVC   3(5,2),=CL5' '      MOVE IN BLANKS\n         BR    11                  BRANCH TO USING ROUTINE\n         SPACE 3\n*  ROUTINE TO ASK FOR THE OUTPUT TAPE\n         SPACE 1\nTPOUTSET EQU   *\n         XC    MM(5),MM            CLEAR AREA\n         SPACE 2\n*  THE FOLLOWING CODE IS USED TO SEARCH AN OUTPUT TAPE ADDRESS WHEN\n*  A ONE LINE ENTRY IS USED\n         SPACE 1\n         LA    2,ID+L'ID-9         GET ADRS OF SEARCH\n         LA    3,L'ID-6            GET LENGTH OF SEARCH\nTPCPAR   TM    2(2),X'C0'          SEE IF ALPHAMERIC\n         BO    BMPIT               BRANCH IF ALPHAMERIC\n         TM    8(2),X'C0'          SEE IF ALPHAMERIC\n         BO    BMPIT               BRANCH IF ALPHAMERIC\n         LA    4,5                GET NUMBER OF CHARACTERS\n         BAL   11,ALPMRIC         GO SEE IF ALBHAMERIC\n         BNO   BMPIT              BRANCH NOT ALPHAMERIC\n         CL    2,INFNDAD          SEE IF SAME ADDRESS\n         BE    NOTTHR             BRANCH IF SAME ADDRESS\n         ST    2,CRNTLOC           STORE LOCATION OF TAPE ADRS\n         MVC   MM(5),3(2)          MOVE IN TAPE ADRS\n         BAL   11,BYWAIT           GO SET UP MODE & UCB\n         B     TPOTSET             BRANCH AROUND CNT\nBMPIT    BCT   2,*+4               SUB 1\n         BCT   3,TPCPAR SEARCH AGAIN\n         SPACE 2\nNOTTHR   WTOR  'OUTPUT TAPE - MMXXX',MM,5,REPLYECB\n         BAL   11,WAITAPE    WAIT FOR REPLY  AND SET UP MM\nTPOTSET  LA    11,TPOUTSET         GET RETURN ADDRESS FOR MSG ROUTINE\n         CLI   #GOTUCB,X'01'     Q. DID WE FIND UCB FOR DEVICE?MS072987\n         BE    TPOTSET1          A. YES WE DID                 MS072987\n         B     NODEVICE          A. NO WE DID NOT              MS072987\nTPOTSET1 EQU   *                                               MS072987\n         TM    MM+4,X'BF'          SEE IF INPUT ERROR\n         BZ    OUTPTERR            BRANCH IF INPUT ERROR\n         MVC   OUTTRTCH(1),MM\n         MVI   OUTDEVT,X'81'\n         LA    11,TPOUTSET             GET RETURN ADDRESS\n         CLI   18(2),X'80'       IS IT A TAPE\n         BNE   NTPMSG              BRANCH IF NOT A TAPE\n         TM    SYSTYP,X'40'        SEE IF PCP\n         BO    NTCHECK             BRANCH IF PCP\n         TM    3(2),X'08'          IS IT BEING USED\n         BO    ASNGDMG             BRANCH IF BEING USED\n         TM    3(2),X'80'          SEE IF OFFLINE\n         BO    ONLINE              BRANCH IF ONLINE\nNTCHECK  EQU   *\n         BAL   11,ENABLE           SEE IF SHOULD PRINT ENABLE MSG\n         ST    2,OUTDEBMD          STORE UCB ADDRESS IN DEB\n         CLI   #3480,X'01'       Q. IS IT A 3480 DEVICE        MS072987\n         BE    OUTDEB80          A. YES IT IS                  MS072987\n         MVC   OUTDEBMD(1),MM\n         B     SETOTIOB                                        MS072987\nOUTDEB80 EQU   *                                               MS072987\n         MVC   OUTDEBMD(1),=X'00' SET DEB MODE TO X'00'        MS072987\nSETOTIOB EQU   *                                               MS072987\n         OI    OUTIOB,X'40'      SET ON CHAINING FLAG\n         MVC   OUTCCW(1),MM      BUILD SET MODE COMMAND\n         MVC   OUTCCW+1(7),=X'00000060000001'\n         BR    10\nOUTPTERR WTO 'FORMAT ERROR - RETYPE LAST ENTRY'\n         B     TPOUTSET            GO ASK FOR OUTPUT TAPE AGAIN\n         SPACE 2\n*  COMMON I/O ROUTINE FOR INPUT\n         SPACE 1\nIOIN     EQU   *\n         XC    INECB(4),INECB\n         EXCP  INIOB\n         WAIT  ECB=INECB\n         NI    INDCB+44,X'3F'\n         BR    11\n         SPACE 1\n*  COMMON WAIT FOR ALL REPLIES\nWAITANS  EQU   *\n         WAIT  ECB=REPLYECB\n         XC    REPLYECB,REPLYECB   CLEAR ECB\n         BR    11\n         SPACE 2\n*  COMMON I/O ROUTINE FOR OUTPUT\n         SPACE 1\nIOOUT    EQU   *\n         XC    OUTECB(4),OUTECB\n         EXCP  OUTIOB\n         WAIT  ECB=OUTECB\n         NI    OUTDCB+44,X'3F'\n         BR    11\n         SPACE 2\n*  ROUTINE TO WAIT ON THE REPLY AND CONVERT THE MM INTO A SET MODE\nWAITAPE  EQU   *\n         WAIT  ECB=REPLYECB\n         XC    REPLYECB(4),REPLYECB\n         OC    MM(5),=C'     '     MAKE ALL CAPS\n         CLC   MM(3),=C'EOJ'\n         BE    ASKAGN\nBYWAIT   MVC   TDOUTAR(5),MM  GET MMXXX FOR PRINTING ON LISTING\n         MVI   TDOUTAR+5,C' '\n         MVC   TDOUTAR+6(126),TDOUTAR+5\n         MVC   TDOUTAR+5(24),=CL24' - MMXXX FOR INPUT TAPE.'\n         MVC   TDOUTAR+50(47),=CL47'*** THIS IS NOT A DATA RECORD FROM X\n               THE TAPE ***'\n         BAL   14,CONVRTMM\n         OI    MM,X'03'            SET MODE COMMAND NOW IN MM\n         MVC   D1(3),XXX\n         MVI   DEVCLASS,UCB3TAPE   SET TO SEARCH TAPE UCB ONLY MS061986\n         BAL   4,UCBLOKUP\n         BR    11\n         EJECT\n*  THIS SUB-ROUTINE IS USED TO CHECK FOR ALPHAMERIC CHARACTERS\n*  IN THE ROUTINE ID AREA.  IF THEY ARE FOUND A CC OF 3\n*  IS RETURNED.      REG 2 = SEARCH AREA   REG 4 = NUMB OF CHARACTERS\n         SPACE 1\n*                   LINKAGE  IS   BAL 11,ALPMRIC\nALPMRIC  LR    5,2                 GET ADRS OF SEARCH\nALPAGN   TM    3(5),X'C0'          SEE IF NOT ALPHA MERIC\n         BNO   0(11)           RETURN WITH NOT CC 3 IF NOT ALPHAMERIC\n         LA    5,1(5)              BUMP ADRS OF SEARCH\n         BCT   4,ALPAGN            BRANCH NOT FINISHED\n         B     0(11)               RETURN WITH CC OF 3 IF ALPHAMERIC\n         SPACE  3\n*\n*\n*  THIS SUB-ROUTINE IS USED TO INFORM THE OPERATOR OF THE\n*  NON-EXISTANCE OF DEVICE ADDRESS ENTERED VIA THE CONSOLE.\n*\n*  LINKAGE-  ROUTINE ENTERED VIA BRANCH, RETURN ADDRESS MUST\n*    BE PROVIDED IN REGISTER 11 PRIOR TO BRANCHING TO SUB-ROUTINE.\n*\nNODEVICE WTO   'UCB NOT FOUND FOR DEVICE ADDRESS ENTERED'\n         B     CLR                 GO CLEAR BAD ADRS\n         SPACE 2\n*  THIS SUB-ROUTINE IS USED TO SEARCH THE ROUTINE ID FIELD FOR THE\n*  NUMBER OF FILES WHICH MUST BE FORWARD OR BACK SPACED.\n*  A CONDITION CODE OF 3 IS PASSED BACK TO THE USING ROUTINE IF A FILE\n*  COUNT IS FOUND. LINKAGE = BAL 10,NBFILS\n         SPACE 2\nNBFILS   XC    FILES(8),FILES      CLEAR FILES ENTRY AREA\n         LA    2,ID                GET ADDRESS OF SEARCH\n         LA    3,L'ID-5            GET LENGTH OF SEARCH\nFLCNTS   TM    2(2),X'C0'          SEE IF ALPHAMERIC\n         BO    BUMPFC              BRANCH IF ALPHAMERIC\n         TM    6(2),X'C0'          SEE IF ALPHAMERIC\n         BO    BUMPFC              BRANCH IF ALPHAMERIC\n         LA    4,3                 GET NUMBER OF CHARACTERS\n         BAL   11,ALPMRIC          GO SEE IF ALPHAMERIC\n         BNO   BUMPFC              BRANCH IF NOT ALPHAMERIC\n         MVC   FILES+5(3),3(2)     MOVE FILE CNT TO CNT AREA\n         BR    10                  RETURN TO USING ROUTINE WITH CC=3\nBUMPFC   LA    2,1(2)              BUMP SEARCH ADDRESS\n         BCT   3,FLCNTS            LOOK AGAIN\n         BR    10                RETURN TO USING ROUTINE WITH NOT CC=3\n         SPACE 2\n         SPACE 5\nAPPEND   BR    14\n         EJECT\n*  SEE THE OS SYSTEM CONTROL BLOCKS MANUAL FOR THE FORMATS OF THE\n*  FOLLOWING DCB'S, DEB'S, ECB'S, AND IOB'S.\n         SPACE 1\n*  DEB FOR INPUT DATA SET\n         SPACE 1\n         CNOP  0,4                      ALIGN\nINIOVEC  EQU   *\n         DC    A(APPEND)\n         DC    A(APPEND)\n         DC    A(APPEND)\n         DC    A(APPEND)\n         DC    A(APPEND)\n         DC    3F'0'\n         DC    X'06000000'\nINDEB    DS    0F\n         DC    F'0'\n         DC    X'04'\n         DC    X'000000'\n         DC    X'C0000000'\n         DC    X'30000000'\n         DC    2F'0'\n         DC    X'0F'\n         DC    AL3(INDCB)\nINEXSC   DC    X'02'\n         DC    AL3(INIOVEC)\nINDEBMOD DC    X'00'\nINDEBUCB DC    X'000000'\nINRESV   DC    X'0000'             RESERVED\nINCYSEX  DC    X'0000'             CYL ADRS OS START OF EXTENT\nINTKSEX  DC    X'0000'             TRK ADRS OF START OF EXTENT\nINCYDEX  DC    X'0000'             CYL ADRS OF END OF EXTENT\nINTRKDX  DC    X'0000'             TRK ADRS OF END OF EXTENT\nINTKEXT  DC    X'0000'             NUMB OF TRKS TO EXTENT\n         SPACE 1                       9\n*  DCB FOR INPUT DATA SET\nINDCB    DS    0F\n         DC    4F'0'\nINTRTCH  EQU   *\nINMODSTK EQU   *\n         DC    X'00'\nINDEVT   DC    X'00'\nINDENS   DC    X'00'\n         DC    X'00'\n         DC    5F'0'\n         DC    H'0'\n         DC    BL2'1101000000001000'\nINDBAD   DC    A(INDEB)\n         DC    X'10000000'\n         DC    5F'0'\n         SPACE 1\n*  DEB FOR OUTPUT DATA SET\n         SPACE 1\nOUTIOVEC EQU   *\n         DC    A(APPEND)\n         DC    A(APPEND)\n         DC    A(APPEND)\n         DC    A(APPEND)\n         DC    A(APPEND)\n         DC    3F'0'\n         DC    X'06000000'\nOUTDEB   DS    0F\n         DC    F'0'\n         DC    X'17000000'\n         DC    X'C0000000'\n         DC    X'30000000'\n         DC    2F'0'\n         DC    X'0F'\n         DC    AL3(OUTDCB)\nOUTEXS   DC    X'02'\n         DC    AL3(OUTIOVEC)\nOUTDEBMD DC    X'00'\nOUTDBUCB DC    X'000000'\nOUTRESV  DC    X'0000'             RESERVED\nOUTCYSEX DC    X'0000'             CYL ADRS OF START OF EXTENT\nOUTTKSEX DC    X'0000'             TRK ADRS OF START OF EXTENT\nOUTCYDEX DC    X'0000'             CYL ADRS OF END OF EXTENT\nOUTTRKDX DC    X'0000'             TRK ADRS OF END OF EXTENT\nOUTTKEXT DC    X'0001'             NUMB OF TRKS TO EXTENT\n         SPACE 2\n*  DCB FOR OUTPUT DEVICE\n         SPACE\n         DS    0F\nOUTDCB   DC    F'0'\n         DC    F'0'\n         DC    F'0'\n         DC    F'0'\nOUTTRTCH EQU   *\nOUTMDSTK EQU   *\n         DC    X'00'\nOUTDEVT  DC    X'00'\nOUTDENS  DC    X'00'\n         DC    X'00'\nOUTBUFNO DC    X'00'\nOUTBUFCB DC    X'000000'\nOUTBUFL  DC    X'0000'\nOUTDSORG DC    X'4000'\nOUTIOBAD DC    A(OUTIOB)\n         DC    X'00'\nOUTEODAD DC    X'000000'\nOUTRECFM DC    X'00'\nOUTEXLST DC    X'000000'\nOUTTIOT  DC    X'0000'\nOUTMACRE DC    X'0000'\nOUTFLGS  DC    X'00'\nOUTDEBAD DC    AL3(OUTDEB)\nOUTFLOGS DC    X'00'\n         DC    X'000000'\nOUTOPTCD DC    X'00'\n         DC    X'000000'\n         DC    F'0'\n         DC    F'0'\n         DC    F'0'\n         DC    F'0'\n         SPACE 1\n         SPACE 1\n*  ECB FOR INPUT DATA SET\n         SPACE 1\nINECB    DC    F'0'\n         SPACE 1\n*  IOB FOR INPUT DATA SET\n         SPACE 1\nINIOB    DS    0F\n         DC    X'4200'\nINSENS   DC    H'0'\n         DC    X'7F'\n         DC    AL3(INECB)\nINSTAT   DC    2F'0'\n         DC    A(INCCW)\n         DC    A(INDCB)\n         DC    F'0'\n         DC    H'1'\n         DC    H'0'\nINDASD   DC    X'00'\nINSEEK   DC    XL7'00'\n         SPACE 1\n*  ECB FOR OUTPUT DATA SET\n         SPACE 1\nOUTECB   DC    F'0'\n         SPACE 1\n*  IOB FOR OUTPUT DATA SET\n         SPACE 1\nOUTIOB   DS    0F\n         DC    X'4200'\nOUTSENS  DC    H'0'\n         DC    X'7F'\n         DC    AL3(OUTECB)\nOUTSTAT  DC    2F'0'\n         DC    A(OUTCCW)\n         DC    A(OUTDCB)\n         DC    XL4'00'\n         DC    H'1'\n         DC    H'0'\nOUTDASD  DC    X'00'\nOUTSEEK  DC    X'00000000000003'        BBCCHHR\n*        IOB FOR PRINTER\n         SPACE\n         DS    0F\nPRTIOB   EQU   *\n         DC    X'0200'\nPRTSNS   DC    H'0'\nECBCD    DC    X'7F'\n         DC    AL3(PRTECB)\nPRTSTAT  DC    2F'0'\n         DC    A(PRTCCW)\n         DC    A(PRINTAPG)\nRPSM     DC    F'0'\nBLC1     DC    F'0'\nPMBBC    DC    F'0'\nCHHR     DC    F'0'\n         SPACE\n*        ECB FOR PRINTER\n         SPACE\nPRTECB   DC    F'0'\n         SPACE\n         SPACE 1\n*  CONSTANTS AND CCW'S      * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nREADER1  DC    3X'00'              ADDRESS AREA FOR CARD READER\nPUNCH1   DC    3X'00'              ADDRESS AREA FOR CARD PUNCH\n         SPACE 3\nTAPE     DC    C'  '               MODE FOR TAPE ADRS\nDISK     DC    C'    '             DISK AND TAPE ADRS\n         SPACE 3\n*  CCW'S FOR OUTPUT DATA SET\n         SPACE 1\nOUTCCW   DS    5D\n*  CCW'S FOR INPUT DATA SET\n         SPACE 1\nINCCW    DS    5D\n         SPACE 3\nFILES    DC    D'0'                STORAGE + WORK AREA\nSFCCW    CCW   X'3F',SFCCW,X'20',1\nBFCCW    CCW   X'2F',SFCCW,X'20',1\nSRCCW    CCW   X'37',BSCCW,X'20',1\nBSCCW    CCW   X'27',BSCCW,X'20',1\nWRLAB    CCW   1,TDAREA,X'20',80   WRITE TAPE LABEL CCW\nCTCCW    CCW   X'41',TDAREA,X'20',80\nRDLBL    CCW   2,TDAREA,X'00',80   READ LABEL CCW\nRWCCW    CCW   7,RWCCW,X'20',1\nTDINCCW  CCW   2,TDAREA,X'20',32767\nTTCCWOUT CCW   1,TDAREA,X'20',32767\nWTCCW    CCW   31,TDAREA,X'20',1\nRWUN     CCW   X'0F',RWUN,X'20',1\nNOOP     CCW   X'03',*,X'20',1           NOOP CCW\nRDLABL   CCW   X'07',OUTSEEK,X'40',6      SEEK\nSHIDE    CCW   X'31',OUTSEEK+2,X'40',5  SID=\nTIC      CCW   X'08',OUTCCW+SHIDE-RDLABL,X'40',1  TIC\nCLPCCW   CCW   X'06',TDAREA,X'00',80   READ OR WRITE DATA\nPRTCCW   CCW   X'03',TDOUTAR,X'00',132   PRINT DATA\n         SPACE 3\nPRINT DCB DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,RECFM=FM,LRECL=133,        X\n               BLKSIZE=133\n         SPACE 3\nPRINTAPG DCB   DDNAME=SYSPRINT,MACRF=E,DSORG=PS,RECFM=FM,              X\n               IOBAD=PRTIOB\n         SPACE 3\nTDWK     DS    D\nSAVEAREA DC    18F'0'\nTDPTABLE DC    C'0123456789ABCDEF'\n         DS    0F\nMESSAGE  DC    AL2(THERE-*)     MESSAGE LENGTH\n         DC    AL2(0)\nCOUNT    DC    C'NUMBER '\n         DC    C'RECORDS PROCESSED'\nTHERE    EQU   *\nD1       DC    C'0'\nD2       DC    C'0'\nD3       DC    C'0'\nID       DC    CL40'00'\nMM       DC    C'00'\nXXX      DC    C'000'\nOF       DC    F'15'\nEOJECB   DC    F'0'                    EOJ ECB\nREPLYECB DC    F'0'\nINFNDAD  DC    F'0'               STORE WHERE INPUT TAPE ADRS FOUND\nCRNTLOC  DC    F'0'                STORAGE AREA FOR LST TAPE ADRS FND\n         SPACE 3\nGETMAIN1 DC    F'0'                ADDADDRESS FROM GETMAIN FOR DEB\nPGMDEB1  DC    F'0'                ADDRESS OF DEB IN PGM\nOLDEB1   DC    F'0'                ADDRESS OF DEB IN PGM FOR NEW DEB\n         SPACE 2\nGETMAIN2 DC    F'0'                ADDRESS FROM GETMAIN FOR DEB\nPGMDEB2  DC    F'0'                ADDRESS OF DEB IN PGM\nOLDEB2   DC    F'0'                ADDRESS OF DEB IN PGM\nBLANK    DC    F'0'                WORD OF ZEROS\nOPCODE   DC    X'00'\nTDOUTAR  DS    CL132\nRECCNT   DC    X'00000F'\nCOND1    DC    X'1F'\nRECHDG   DC    C'REC '\n         DC    X'2020202020'\n         DC    C', LENGTH '\n         DC    X'2020202020'\nSV11     DS    F\nC        DC    H'0'\nCLIMIT   DC    H'58'\nSYSTYP   DC    X'00'               SYSTEM TYPE STORAGE AREA\n*                                  X'10' = MVT\n*                                  X'20' = MFT\n*                                  X'40' = PCP\n*\n         SPACE 3\nPARMLIST DS    3F                  PARMLIST FOR UCB SCANNING   MS061986\n         ORG   PARMLIST                                        MS061986\nPARMWA   DS    F                   ADDRESS OF 100 BYTE WORKAREAMS061986\nPARMDEVT DS    F                   ADDRESS OF DEVICE CLASS     MS061986\nPARMUCB  DS    F                   ADDRESS OF RETURNED UCB     MS061986\n         SPACE 2                                               MS061986\n#GOTUCB  DC    X'00'               SWITCH TO INDICATE UCB FOUNDMS072987\n*                                  X'00' = UCB NOT FOUND       MS072987\n*                                  X'01' = UCB FOUND           MS072987\n#3480    DC    X'00'               SWITCH TO INDICATE IF 3480  MS072987\n*                                  X'00' = NOT 3480            MS072987\n*                                  X'01' = 3480                MS072987\nDEVCLASS DS    CL1                 DEVICE CLASS TO SEARCH FOR  MS061986\nADDRUCB  DS    F                   RETURNED UCB ADDRESS        MS061986\n         DS    0D                                              MS061986\nUCBWORK  DS    CL100               UCB WORKAREA                MS061986\n         LTORG\n         SPACE 3\nTDAREA2  DS    CL101\nTDAREA   DS    132CL250\n         EJECT                                                 MS061986\nR0       EQU   0                                               MS061986\nR1       EQU   1                                               MS061986\nR2       EQU   2                                               MS061986\nR3       EQU   3                                               MS061986\nR4       EQU   4                                               MS061986\nR5       EQU   5                                               MS061986\nR6       EQU   6                                               MS061986\nR7       EQU   7                                               MS061986\nR8       EQU   8                                               MS061986\nR9       EQU   9                                               MS061986\nR10      EQU   10                                              MS061986\nR11      EQU   11                                              MS061986\nR12      EQU   12                                              MS061986\nR13      EQU   13                                              MS061986\nR14      EQU   14                                              MS061986\nR15      EQU   15                                              MS061986\n         DSECT                                                 MS061986\n         IEFUCBOB                                              MS061986\n         EJECT                                                 MS061986\n         CVT DSECT=YES                                         MS061986\n         END   DEBE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DEBEJCL": {"ttr": 1540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x04?\\x00\\x87\\x05O\\x170\\x00\\t\\x00\\t\\x00\\x00\\xe2\\xd6\\xd6\\xd5\\xc7@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-12T00:00:00", "modifydate": "1987-02-23T17:30:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "SOONG"}, "text": "//DEBE PROC IN=TAPEHI,OUT=TAPEHI,P=DEBE\n//DEBE EXEC PGM=&P,PARM='TAPEIN,TAPEOUT',TIME=1440\n//TAPEIN   DD UNIT=&IN,VOL=SER=MVSIN,DISP=(OLD,KEEP),\n//            DSN=MVSIN,\n//            LABEL=(,BLP)\n//TAPEOUT  DD UNIT=&OUT,VOL=SER=MVSOUT,DISP=(NEW,KEEP),\n//            DSN=MVSOUT,\n//            LABEL=(,BLP)\n//SYSPRINT DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MSG2USEO": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x04?\\x00\\x87\\x05O\\x170\\x02\\x14\\x02\\x14\\x00\\x00\\xe2\\xd6\\xd6\\xd5\\xc7@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-12T00:00:00", "modifydate": "1987-02-23T17:30:00", "lines": 532, "newlines": 532, "modlines": 0, "user": "SOONG"}, "text": "MSG2USER TITLE 'INTEL EXIT TO INFORM TSO USERS ENQUED ON A DATASET'\nMSG2USER CSECT\nMSG2USER AMODE 31                 31 BIT ADDRESSING MODE\nMSG2USER RMODE ANY                31 BIT RESIDENCY MODE\n       TITLE 'PROGRAM MAINTANCE DESCRIPTIONS'\n*START PROLOG*********************************************START PROLOG*\n*                                                                     *\n*  LAST MODIFIED   PROGRAMMER           DESCRIPTION                   *\n*     DATE           NAME                                             *\n*                                                                     *\n*   02/23/87       MILTON SOONG    AUTHOR OF THIS PROGRAM.            *\n*                                                                     *\n*END   PROLOG*********************************************END   PROLOG*\n TITLE 'TABLE OF CONTENTS'\n***********************************************************************\n*****                                                             *****\n*****  T A B L E   O F   C O N T E N T S                          *****\n*****                                                             *****\n***********************************************************************\n* SECTION      CONTENTS DESCRIPTION                                   *\n* -------      ------------------------------------------------------ *\n*                                                                     *\n*   1          NARRATIVE DESCRIPTION                                  *\n* 100          PROGRAM ENTRY AND EXIT.                                *\n* 200          SUBROUTINES                                            *\n* 200-010      GET THIS TASK'S ASID                         (GTMYASID)*\n* 200-020      BUILD DSNAME TO SCAN                         (BLDDSN  )*\n* 200-030      BUILD ASID TABLE USING GQSCAN                (BLDASIDT)*\n* 200-040      SEND MESSAGES TO TSO USER                    (SENDMSGS)*\n* 800          CONSTANTS, LITERALS AND LTORG DEFINITIONS.             *\n* 900          DSECT DEFINITIONS.                                     *\n* 900-010      COMMUNICATIONS VECTOR TABLE(CVT) DSECT                 *\n* 900-020      PREFIX SAVE AREA(PSA) DSECT                            *\n* 900-030      ADDRESS SPACE VECTOR TABLE(ASVT) DSECT                 *\n* 900-040      ADDRESS SPACE CONTROL BLOCK(ASCB) DSECT                *\n* 900-050      RESOURCE INFORMATION BLOCK(RIB) DSECT                  *\n* 900-060      WTO USER EXIT PARAMETER LIST DSECT                     *\n* 900-070      TPUT MESSAGE WORK AREA DSECT                           *\n* 900-080      WTO MESSAGE TEXT DSECT                                 *\n* 900-090      DYNAMIC WORK AREA DSECT                                *\n*                                                                     *\n***********************************************************************\n TITLE '***SEC. 1*** - PROGRAM NARRATIVE DESCRIPTION'\n***********************************************************************\n*              P R O G R A M   D E S C R I P T I O N                  *\n***********************************************************************\n*                                                                     *\n* NAME         MSG2USER                                               *\n*                                                                     *\n* ENTRY POINT  MSG2USER                                               *\n*                                                                     *\n* PURPOSE      THE PURPOSE OF THIS EXIT IS TO ISSUE MESSAGES TO TSO   *\n*              USERS WHO ARE ENQUED ON A DATASET CAUSING A BATCH JOB  *\n*              TO WAIT.                                               *\n*                                                                     *\n* OPERATION    THIS WTO EXIT GAINS CONTROL WHENEVER MESSAGE 'IEF863I' *\n*              IS ISSUED ON THE OPERATOR' CONSOLE.  THIS EXIT WILL    *\n*              THEN USE THE DSNAME PASSED IN THE IEF863I MESSAGE AND  *\n*              ISSUE A ''GQSCAN'' FOR ONLY THAT DSNAME.   ''GQSCAN''  *\n*              RETURNS ''RESOURCE INFORMATION BLOCK EXTENSIONS(RIBE)''*\n*              FOR EVERY TSO USER OR BATCH JOB ENQUED ON THIS DSNAME. *\n*              THE EXIT WILL THEN DETERMINE THE JOBNAME OF THE BATCH  *\n*              JOB THAT IS WAITING AND WILL ALSO DETERMINE THE TSO    *\n*              USERS WHO HAVE THE DATASET ENQUED.  THE FOLLOWING      *\n*              MESSAGES WILL BE SENT TO EACH TSO USER ENQUED ON THE   *\n*              DATASET:                                               *\n*               NTL861I FOLLOWING RESERVED DATASET UNAVAILABLE TO JJJ *\n*               NTL863I DSN = DDDDDDDDDD                              *\n*                                                                     *\n*              IF YOU RECEIVE THIS MESSAGE YOU SHOULD FREE THE DATASET*\n*              TO ALLOW THE BATCH JOB TO COMPLETE.                    *\n*                                                                     *\n* RESTRICTIONS THIS EXIT RECEIVES CONTROL IN 31-BIT ADDRESSING MODE   *\n*              RMODE=ANY.  TPUT WHICH IS THE METHOD USED TO SEND THE  *\n*              MESSAGES TO TSO USERS CAN BE ISSUED IN 31-BIT MODE BUT *\n*              IT'S WORKAREA MUST RESIDE BELOW THE LINE.              *\n*                                                                     *\n*              THIS EXIT ROUTINE MUST RESIDE IN AN AUTHORIZED LIBRARY *\n*              AND ON THE ''LNKLST'' CONCATENATION.                   *\n*                                                                     *\n*              THE FOLLOWING ENTRY MUST BE ADDED TO THE ACTIVE        *\n*              ''MPFLSTXX'' MEMBER OF SYS1.PARMLIB':                  *\n*                                                                     *\n*                      IEF863I,SUP(NO),USEREXIT(MSG2USER)             *\n*                                                                     *\n* INPUT        R1   POINTS TO THE ADDRESS OF THE CTXT(WTO TEXT MSG.)  *\n*              R13  POINTS ADDRESS OF STANDARD SAVE AREA              *\n*              R14  RETURN ADDRESS                                    *\n*              R15  ENTRY POINT ADDRESS                               *\n*                                                                     *\n* OUTPUT       THE FOLLOWING MESSAGES IS ISSUED TO THE TSO USER ENQUED*\n*              ON THE DATASET CAUSING JOB TO WAIT:                    *\n*                                                                     *\n*               NTL861I FOLLOWING RESERVED DATASET UNAVAILABLE TO JJJ *\n*               NTL863I DSN = DDDDDDDDDD                              *\n*                                                                     *\n***********************************************************************\n TITLE '***SEC. 100*** - PROGRAM ENTRY AND EXIT'\nMSG2USER CSECT\n***********************************************************************\n*        R E G I S T E R   E Q U A T E S   A N D   U S A G E          *\n***********************************************************************\n         SPACE 2\nR0       EQU   0   PARAMETER REGISTER\nR1       EQU   1   PARAMETER REGISTER OR PARAMETER LIST REGISTER\nR2       EQU   2   USE TO BRANCH AND LINK TO SUBROUTINES\nR3       EQU   3   WORK REGISTER\nR4       EQU   4   WORK REGISTER\nR5       EQU   5   WORK REGISTER\nR6       EQU   6   WORK REGISTER\nR7       EQU   7   WORK REGISTER\nR8       EQU   8   WORK REGISTER\nR9       EQU   9   BASE REGISTER FOR WTO EXIT PARAMETER LIST\nR10      EQU   10  BASE REGISTER FOR OUR DYNAMIC STORAGE AREA.\nR11      EQU   11  RESERVED FOR SECOND BASE REGISTER IF NEEDED.\nR12      EQU   12  $$$$$$$$ B A S E   R E G I S T E R $$$$$$$$\nR13      EQU   13  SAVEAREA REGISTER     (LINKAGE REGISTER)\nR14      EQU   14  RETURN REGISTER       (LINKAGE REGISTER)\nR15      EQU   15  ENTRY POINT REGISTER  (LINKAGE REGISTER)\n         SPACE 1\n         PRINT NOGEN\n         TITLE 'HOUSKEEPING ROUTINE'\n         STM   R14,R12,12(R13)    SAVE CALLER'S REGISTERS\n         BALR R12,R0              ESTABLISH MODULES BASE REGISTER\n         USING *,R12              R12 IS NOW OUR BASE REGISTER\n         L     R9,0(R1)           R9==> WTO EXIT PARAMETER LIST\n         USING CTXT,R9            ESTABLISH ADDRESSABLITY TO IT\n         B     MAINLINE           NOW GO DO YOUR PROCESSING\n         SPACE 2\nALLDONE  EQU   *\n         LM    R14,R12,12(R13)    RESTORE CALLERS REGISTERS\n         BR    R14                CLEAN UP AND RETURN\n         TITLE  'PROGRAM MAIN LINE LOGIC ROUTINE'\nMAINLINE EQU   *\n         SLR   R10,R10            CLEAR R10\n         LA    R3,DYNLEN          R3= LENGTH OF DYNAMIC STORAGE\n         GETMAIN R,LV=(R3)        GET SOME STORAGE\n         LTR   R15,R15            Q. DID WE GET IT?\n         BNZ   ALLDONE            A. NO.  NO SENSE ON CONTINUING\n         LR    R10,R1             ESTABLISH ADDRESSABILITY TO DYNAREA\n         USING DYNAREA,R10\n         SPACE 2\n         BAL   R2,GTMYASID        GET MY ASID\n         BAL   R2,BLDDSN          BUILD DSNAME TO SCAN\n         BAL   R2,BLDASIDT        BUILD ASID TABLE USING GQSCAN\n         BAL   R2,SENDMSGS        SEND MESSAGES TO TSO USERS\n         SPACE 2\nPREDONE  EQU   *\n         LA    R0,DYNLEN          R0= L'(DYNAMIC STORAGE AREA)\n         FREEMAIN R,LV=(0),A=(10) R10==> DYNAMIC WORKAREA TO FREE\n         SPACE 2\n         B     ALLDONE\n TITLE '***SEC. 200*** - SUBROUTINES FOR THIS PROGRAM'\n         SPACE 15\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*      THE FOLLOWING PAGES ARE ALL OUR SUBROUTINES WE USE IN          *\n*      THIS PROGRAM.                                                  *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n TITLE '***SEC. 200-010*** - GET THIS TASKS ASID'\n         DS    0D\n         DC    CL8'GTMYASID'\n*********************************************************************\n*               G T M Y A S I D   S U B R O U T I N E               *\n*-------------------------------------------------------------------*\n*                                                                   *\n* THIS SUBROUTINE WILL EXTRACT THE ASID OF THE CURRENTLY RUNING TASK*\n* THAT IS   W A I T I N G   FOR THE DATASET NAME WHICH IS DISPLAYED *\n* IN THE MESSAGE TEXT: IEF863I DSN = DSNAME.                        *\n*                                                                   *\n* WE DO IT THIS WAY BECAUSE THIS EXIT GETS CONTROL FIRST AND THEN   *\n* THE DISPATCHER GETS CONTROL.  THEREFORE PSAAOLD WILL CONTAIN THE  *\n* THE ASCB OF THE TASK WAITING FOR THE DATASET.                     *\n*                                                                   *\n*********************************************************************\n         SPACE 2\nGTMYASID EQU   *\n         L     R1,PSAAOLD-PSA(0,0)     EXTRACT WAITING TASK'S ASID\n         MVC   ALCMASID,ASCBASID-ASCB(R1)   AND SAVE IT FOR LATER USE\n         SPACE 2\n         BR    R2                 RETURN TO MAINLINE ROUTINE\n TITLE '***SEC. 200-020*** - BUILD DSNAME TO SCAN'\n         DS    0D\n         DC    CL8'BLDDSN'\n*********************************************************************\n*                   B L D D S N   S U B R O U T I N E               *\n*-------------------------------------------------------------------*\n*                                                                   *\n* AT ENTRY TO THIS SUBROUTINE REGISTER 9 POINTS TO THE WTO EXIT     *\n* INPUT PARAMETER LIST.  FROM THIS PARAMETER LIST REGISTER 3 IS     *\n* LOADED WITH THE ADDRESS OF THE MESSAGE ATTRIBUTES.  THEN THE      *\n* ADDRESS OF MESSAGE (IEF863I DSN= XXXX) IS LOADED INTO REGISTER 4. *\n* THE LENGTH OF THE DSNAME IS COMPUTED AND SAVED FOR LATER USE.     *\n* THE DSNAME IS SAVED ALSO FOR LATER USE.                           *\n*                                                                   *\n*********************************************************************\n         SPACE 2\nBLDDSN   EQU   *\n         L     R3,CTXTTXPJ        ESTABLISH ADDRESSABILITY TO\n         USING CTXTATTR,R3        THE MESSAGE ATTRIBUTES.\n         LA    R4,CTXTTMSG        R4===> A(IEF863I DSN= ) TEXT\n         USING MSGTEXT,R4         ESTABLISH ADDRESSABILITY TO IT\n         SPACE 2\n         MVI   ALCDSNM,C' '       CLEAR DSNAME WORKAREA\n         MVC   ALCDSNM+1(L'ALCDSNM-1),ALCDSNM\n         SLR   R5,R5              CLEAR R5\n         SLR   R6,R6              CLEAR R6\n         LH    R5,CTXTTLEN        R5= L'(WTO MESSAGE TEXT)\n         LA    R6,MSGFXLEN        R6= L('FIXED PORTION OF MESSAGE)\n*                                       'IEF863I DSN = '\n         SR    R5,R6              COMPUTE LENGTH OF DSNAME\n         ST    R5,ALCDSNLN        SAVE LENGTH OF DSNAME FOR LATER USE\n         BCTR  R5,0               MINUS 1 FOR EXECUTED MOVE\n         MVC   ALCMVC,SAVDSN      MOVE DESIRED MVC TO DYNAMIC AREA\n         STCM  R5,1,ALCMVC+1      MODIFY LENGTH\n         EX    0,ALCMVC           MVC   ALCDSNM(0),MSGDSN\n         SPACE 2\n         BR    R2                 RETURN TO MAINLINE\n         SPACE 2\nSAVDSN   MVC   ALCDSNM(0),MSGDSN  SAVE THE DSNAME FROM MESSAGE TEXT\n         SPACE 3\n         DROP  R3\n         DROP  R4\n TITLE '***SEC. 200-030*** - BUILD ASID TABLE USING GQSCAN'\n         DS    0D\n         DC    CL8'BLDASIDT'\n*********************************************************************\n*               B L D A S I D T   S U B R O U T I N E               *\n*-------------------------------------------------------------------*\n*                                                                   *\n* THIS SUBROUTINE WILL INVOKE THE 'GQSCAN' MACRO TO SEARCH FOR ALL  *\n* JOBS OR TSO USERS THAT ARE ENQUED TO A DATASET.  THE DATASET NAME *\n* WAS PASSED IN THE WTO INPUT PARAMETER LIST AND SAVED IN AN AREA   *\n* LABELED 'ALCDSNM'. 'GQSCAN' RETURNS RIBES OF EACH TSO USER OR JOB *\n* ENQUED TO THIS DATASET.  THIS SUBROUTINE WILL INSPECT EACH RIBE   *\n* RETURNED AND SAVE THE ASID IN A TABLE.  THIS TABLE WILL BE USED   *\n* BY THE 'SENDMSG' SUBROUTINE TO SEND MESSAGES.  IF THE ASID BELONGS*\n* TO THIS TASK IT WILL NOT BE SAVED IN THE TABLE.  IF THE ASID IS   *\n* WAITING FOR A RESOURCE THEN IT WILL BECOME THE JOBNAME AND HIS    *\n* ASID WILL NOT BE SAVED IN THE TABLE.                              *\n*                                                                   *\n*********************************************************************\n         SPACE 2\nBLDASIDT EQU   *\n         STM   R0,R15,ALCSAVE     SAVE ALL MY REGISTERS\n         SPACE 2\n         LA    R3,ALCSVIDS        R3===> A(TABLE TO HOLD ASIDS)\n         ST    R3,ALCENIDS        SAVE END OF TABLE ADDRESS\n         SPACE 1\n         L     R6,ALCDSNLN        R6= L'(ENQUED DSNAME)\n         LA    R5,ALCDSNM         R5===> A(ENQUEUED DSNAME)\n         L     R0,SCANGM          R0= L'(GQSCAN STORAGE)\n         GETMAIN R,LV=(0)\n         LTR   R15,R15            Q. DID WE GET OUR STORAGE?\n         BNZ   TSOEND             A. NO.  DON'T CONTINUE\n         ST    R1,SCANPTR         A. YES. SAVE ADDRESS OF GETMAIN CORE\n         LR    R7,R1              TELL GQSCAN WHERE THE STORAGE STARTS\n         LA    R13,ALCSAVE2       GIVE GQSCAN A 18 FULLWORD SAVEAREA\n         SPACE 1\n         GQSCAN AREA=((R7),8192),REQLIM=10,SCOPE=ALL,                  X\n               RESNAME=(MAJNAM,(R5),(R6)),MF=(E,GQPARMS)\n         SPACE 1\n         LTR   R15,R15            Q. GQSCAN SUCCESSFUL?\n         BNZ   TSOEND             A. NO. DONT CONTINUE\n         ST    R0,RIBLNGTH        STORE L'RIB AND L'RIBE\n         ST    R1,NUMRIBS         SAVE NUMBER OF RIBS RETURNED\n         LTR   R8,R1              Q. ANY RIBS RETURNED?\n         BZ    TSOEND             A. NO. DONT CONTINUE\n         L     R7,SCANPTR         R7===> A(RIBS RETURNED)\n         USING RIB,R7             ESTABLISH ADDRESSABILITY TO RIB\nRIBLOOP  EQU   *\n         LR    R3,R7\n         AH    R3,RIBLNGTH        R3===> A(RIB VARIABLE SECTION)\n         AH    R3,RIBVLEN         R3===> A(FIRST RIBE) OR RIB EXTENSION\n         USING RIBE,R3            ESTABLISH ADDRESSABILITY TO RIBE\n         L     R1,RIBNRIBE        R1= NUMBER OF RIB EXTENSIONS RETURNED\n         LA    R15,ALCSVIDS       R15===> START OF ASID TABLE\n         LA    R14,ALCSVIDE       R14===> END OF ASID TABLE\nRIBELOOP EQU   *\n         TM    RIBESFLG,RIBESTAT  Q. IS THIS THE OWNER OF THE RESOURCE?\n         BO    RIBOWNER           A. YES HE IS AND HE IS NOT WAITING.\n         MVC   ALCJOBNM,RIBEJBNM  A. NO. THIS GUY IS WAITING FOR DSNAME\n         B     BUMPRIBE              SAVE HIS NAME BUT NOT HIS ASID.\nRIBOWNER EQU   *\n         CLC   ALCMASID,RIBEASID  Q. IS IT THE TASK'S ASID?\n         BE    BUMPRIBE           A. YES. JUST IGNORE IT\n         MVC   0(2,R15),RIBEASID  ELSE KEEP THE ASID\n         LA    R15,2(R15)         BUMP TABLE POINTER\n         CR    R15,R14            Q. IS THE ASID TABLE FULL?\n         BNL   RIBEOUT            A. YES.\nBUMPRIBE EQU   *\n         AH    R3,RIBELENG        POINT TO NEXT RIB EXTENSION\n         BCT   R1,RIBELOOP        AND INSPECT IT.\n         SPACE 1\nBUMPRIB  EQU   *\n         SLR   R4,R4              CLEAR R4 FOR WORK\n         L     R5,RIBNRIBE        NUMBER OF RIBES\nBUMPLOOP EQU   *\n         AH    R4,RIBELENG        ADD LENGTH OF A RIBE\n         BCT   R5,BUMPLOOP        ADD TIMES NUMBER OF RIBES\n         AH    R4,RIBLNGTH        ADD LENGTH OF RIB\n         AH    R4,RIBVLEN         ADD LENGTH OF VARIABLE SECTION\n         AR    R7,R4              R7===> POINTS TO NEXT RIB\n         BCT   R8,RIBLOOP         START WITH NEXT RIB\n         SPACE 1\nRIBEOUT  EQU   *\n         ST    R15,ALCENIDS       SAVE THE END OF TABLE ADDRESS.\n         L     R0,SCANGM          GRAB GQSCAN WORKAREA LENGTH\n         L     R1,SCANPTR         R1===> A(GQSCAN WORKAREA)\n         SPACE 1\n         FREEMAIN R,LV=(0),A=(1)  FREE GQSCAN WORKAREA\n         SPACE 3\n         LM    R0,R15,ALCSAVE     RESTORE REGISTERS\n         BR    R2                 RETURN TO MAINLINE ROUTINE\n         SPACE 3\nTSOEND   EQU   *\n         LM    R0,R15,ALCSAVE     RESTORE REGISTERS\n         B     PREDONE            AND GET OUT OF THIS EXIT.\n TITLE '***SEC. 200-040*** - SEND MESSAGES TO TSO USER'\n         DS    0D\n         DC    CL8'SENDMSGS'\n*********************************************************************\n*               S E N D M S G S   S U B R O U T I N E               *\n*-------------------------------------------------------------------*\n*                                                                   *\n* THIS SUBROUTINE WILL SEND THE FOLLOWING MESSAGES TO ALL TSO USERS *\n* WHO HAVE THE DATASET ENQUED CAUSING A BATCH JOB TO WAIT:          *\n*        NTL861I FOLLOWING RESERVED DATA SET IS UNAVAILABLE TO JJJ  *\n*        NTL863I DSN= DSNAME ENQUED                                 *\n*                                                                   *\n* THIS SUBROUTINE WILL DO A GETMAIN FOR STORAGE BELOW THE LINE.  WE *\n* HAVE TO DO IT THIS WAY BECAUSE THIS EXIT RECEIVES CONTROL IN 31   *\n* BIT ADDRESSING MODE AND CAN RESIDE ABOVE OR BELOW THE LINE.  TPUT *\n* CAN BE ISSUED IN 31 BIT ADDRESSING MODE BUT THE INPUT TO IT MUST  *\n* BE BELOW THE LINE.                                                *\n*                                                                   *\n* TPUT IS THE METHOD USED TO SEND THE MESSAGES TO THE TSO USER.     *\n*                                                                   *\n*********************************************************************\n         SPACE 2\nSENDMSGS EQU   *\n         STM   R0,R15,ALCSAVE     SAVE ALL MY REGISTERS\n         SPACE 2\n         LA    R0,TPUTALEN        R0= L(TPUT WORKAREA LENGTH)\n         GETMAIN R,LV=(0),LOC=BELOW   GET STORAGE BELOW THE LINE\n         LTR   R15,R15            Q. DID WE GET STORAGE?\n         BNZ   SENDEXT            A. NO. DONT CONTINE\n         ST    R1,TPUTPTR         A. YES. SAVE ITS ADDRESS\n         LR    R11,R1             USE R11 AS THE\n         USING TPUTAREA,R11         BASE FOR TPUT WORKAREA.\n         SPACE 1\n********************************************************\n* BUILD TEXT MESSAGES 1 AND 2.  THE MESSAGES ARE BUILT *\n* BUILT IN A GETMAINED AREA BELOW THE LINE BECAUSE THE *\n* TPUT MACRO REQUIRES THAT IT'S INPUT BE IN 24 BIT MODE*\n********************************************************\n         MVC   TPUTTXT1(64),TMSGTXT1 BUILD MESSAGE TEXT 1\n         MVC   TPUTTXT2(57),TMSGTXT2 BUILD MESSAGE TEXT 2\n         MVC   TPUTJBNM,ALCJOBNM  MOVE JOBNAME TO MESSAGE\n         L     R3,ALCDSNLN        R3= L(ENQUED DSNAME)\n         BCTR  R3,0               MINUS 1 FOR EXECUTED MVC\n         MVC   ALCMVC,MVCDSN      MOVE MVC INSTRUCTION TO EX WORK AREA\n         STCM  R3,1,ALCMVC+1      MODIFY MVC LENGTH\n         EX    0,ALCMVC           MVC   TPUTDSN(0),MSGDSN\n         LA    R3,1(R3)           RESTORE ORIGINAL LENGTH VALUE\n         SPACE 2\n         LA    R3,ALCSVIDS        R3===> A(ASID TABLE)\n         L     R4,CVTPTR          R4===> A(CVT)\n         L     R4,CVTASVT-CVTMAP(,R4)  R4===> ASVT\n         SLR   R14,R14\n         SPACE 1\nSENDMSG1 EQU   *\n         C     R3,ALCENIDS        Q. END OF ASID TABLE?\n         BNL   SENDEND            A. YES IT IS.\n         SPACE 1\n         LH    R5,0(R3)           PICKUP ASID TABLE ENTRY\n         BCTR  R5,0               COMPUTE ENTRY IN ASVT\n         SLL   R5,2\n         L     R5,ASVTENTY-ASVT(R5,R4)\n         CLC   ASCBTSB-ASCB(4,R5),=A(0)  Q. IS THIS A TSO ASCB?\n         BE    SENDMSG2                  A. NO.  IT MUST BE BATCH.\n         SPACE 1\n********************************************************\n* SEND MESSAGES TO THE TSO USERS WHO HAVE THE RESOURCE *\n* ENQUED.                                              *\n********************************************************\n         LA    R6,TMSGT1L         R6= L'(TPUT TEXT1)\n         STH   R6,TPUTMSGL        SAVE IT\n         ICM   R0,12,0(3)         ASID OF TSO USER\n         ICM   R0,3,TPUTMSGL      MESSAGE LENGTH OF TEXT 1\n         LA    R1,TPUTTXT1        ADDRESS OF MESSAGE TEXT 1\n         TPUT  (1),(0),R          SEND IT TO THE TSO USER\n         SPACE 1\n         LA    R6,TMSGT2L         R6= L'(TPUT TEXT1)\n         STH   R6,TPUTMSGL        SAVE IT\n         ICM   R0,12,0(3)         ASID OF TSO USER\n         ICM   R0,3,TPUTMSGL      MESSAGE LENGTH OF TEXT 2\n         LA    R1,TPUTTXT2        ADDRESS OF MESSAGE TEXT 2\n         TPUT  (1),(0),R          SEND IT TO THE TSO USER\n         SPACE 1\nSENDMSG2 EQU   *\n         LA    R3,2(R3)           R3===> A(NEXT ASID IN TABLE)\n         B     SENDMSG1           CONTINUE UNTIL END OF ASID TABLE.\n         SPACE 2\nSENDEND  EQU   *\n         L     R11,TPUTPTR        R11===> A(STORAGE TO FREE)\n         LA    R0,TPUTALEN        R0====> STORAGE TO GETMAIN\n         SPACE 1\n         FREEMAIN R,LV=(0),A=(11)\n         SPACE 2\nSENDEXT  EQU   *\n         LM    R0,R15,ALCSAVE     RESTORE ALL REGISTERS\n         BR    R2                 RETURN TO MAINLINE\nMVCDSN   MVC   TPUTDSN(0),ALCDSNM\n TITLE '***SEC. 800*** - CONSTANTS, LITERALS AND LTORG DEFINITIONS'\n         SPACE 2\n         DS    0D\n         DC    CL8'CONSTANTS'\nMAJNAM   DC    CL8'SYSDSN  '      MAJOR RESOURCE NAME FOR GQSCAN\nSCANGM   DC    AL1(000),AL3(16384) GETMAIN SIZE FOR GQSCAN\n         DS    0D\nTMSGTXT1 EQU   *\n         DC    CL08'NTL861I '     MESSAGE ID\n         DC    CL48'FOLLOWING RESERVED DATA SET NAME UNAVAILABLE TO '\n         DC    CL08'        '\nTMSGT1L  EQU   *-TMSGTXT1\n         SPACE 1\nTMSGTXT2 EQU   *\n         DC    CL08'NTL863I '\n         DC    CL05'DSN= '\n         DC    CL44'                                            '\nTMSGT2L  EQU   *-TMSGTXT2\n         SPACE 3\n         PRINT GEN\n         LTORG\n TITLE '***SEC. 900-010*** - COMMUNICATIONS VECTOR TABLE(CVT) DSECT'\n*********************************************************************\n* THIS DSECT IS A MAP THE MVS COMMUNICATIONS VECTOR TABLE WHICH IS  *\n* REFERRED TO AS THE CVT.  IT CONTAINS POINTERS TO MANY OF THE MVS  *\n* CONTROL BLOCKS.                                                   *\n*********************************************************************\n         SPACE 2\nCVTMAP   CVT   LIST=YES,DSECT=YES\n TITLE '***SEC. 900-020*** - PREFIX SAVE AREA DSECT'\nPSA      IHAPSA\n TITLE '***SEC. 900-030 - ADDRES SPACE VECTOR TABLE DSECT'\nASVT     IHAASVT\n TITLE '***SEC. 900-040 - ADDRESS SPACE CONTROL BLOCK DSECT'\nASCB     IHAASCB\n TITLE '***SEC. 900-050 - RESOURCE INFORMATION BLOCK DSECT'\nRIB      ISGRIB\n TITLE '***SEC. 900-060 - WTO USER EXIT PARAMETER LIST DSECT'\n         IEZVX100\n TITLE '***SEC. 900-070 - TSO TPUT MESSAGE WORK AREA DSECT'\n**********************************************************************\n* THIS DSECT IS USED TO ESTABLISH ADDRESSABILITY TO STORAGE OBTAINED *\n* BY A GETMAIN INSTRUCTION.  THIS STORAGE AREA MUST RESIDE BELOW THE *\n* 16 MEG LINE BECAUSE THE TPUT SVC REQUIRES IT TO BE BELOW THE LINE. *\n**********************************************************************\n         SPACE 2\nTPUTAREA DSECT\n         DS    0D\nTPUTTXT1 EQU   *\n         DS    CL08               MESSAGE ID='NTL861I '\n         DS    CL48               MESSAGE TEXT1\nTPUTJBNM DS    CL08               JOBNAME (MAX EIGHT CHARACTERS)\n         SPACE 2\nTPUTTXT2 EQU   *\n         DS    CL08               MESSAGE ID='NTL863I '\n         DS    CL05               MESSAGE TEXT2 PART 1= 'DSN= '\nTPUTDSN  DS    CL44               DSNAME\n         SPACE 2\nTSOASID  DS    H                  TSO USER ASID TO SEND THE MESSAGES TO\nTPUTMSGL DS    H                  LENGTH OF MESSAGE TO TPUT TO USER\nTPUTALEN EQU   ((*-TPUTAREA+7)/8)*8 LENGTH OF TPUT WORK AREAS\n TITLE '***SEC. 900-080 - WTO MESSAGE TEXT DSECT'\n**********************************************************************\n* THIS DSECT IS USED TO ESTABLISH ADDRESSABILITY TO THE WTO MESSAGE  *\n* PASSED TO THIS EXIT AT ENTRY TO THIS EXIT.                         *\n**********************************************************************\n         SPACE 2\nMSGTEXT  DSECT\nMSGID    DS    CL7              MESSAGE ID = 'IEF863I'\n         DS    CL7              ' DSN = '\nMSGFXLEN EQU   *-MSGTEXT        LENGTH OF FIXED PORTION OF MESSAGE\nMSGDSN   DS    CL44             DSNAME. (MAX 44 BYTES)\nMSGDSNL  EQU   *-MSGDSN         MAX LENGTH OF ANY DSNAME\nMSGTEXTL EQU   *-MSGTEXT        MAX LENGTH OF MESSAGE\n TITLE '***SEC. 900-090*** - DYNAMIC STORAGE AREA DSECT'\n*********************************************************************\n* THIS DSECT IS A MAP OF ALL OUR WORKING STORAGE FOR THIS PROGRAM.  *\n* REG. 10 IS THE BASE REGISTER USED.  THIS IS TO MAKE THIS PROGRAM  *\n* RE-ENTRANT.                                                       *\n*       NOTE: THIS STORAGE AREA HAS RMODE=ANY AND WILL PROBABLY     *\n*             RESIDE ABOVE THE LINE.                                *\n*********************************************************************\n         SPACE 2\nDYNAREA  DSECT\n         DS    0D\nALCSAVE  DS    18F                AREA FOR SUBROUTINES TO SAVE REGS.\nALCSAVE2 DS    18F                AREA FOR GQSCAN TO SAVE REGS.\nGQPARMS  GQSCAN AREA=(*-*,8192),REQLIM=10,SCOPE=ALL,                   X\n               RESNAME=(*-*,*-*,0),MF=L\nSCANPTR  DS    A                  A(GQSCAN WORKAREA)\nTPUTPTR  DS    A                  FULLWORD TO SAVE GETMAINED CORE ADDR.\nRIBLNGTH DS    H                  L'RIB(MUST PRECEED RIBELENG)\nRIBELENG DS    H                  L'RIBE(MUST PROCEED RIBLENGTH)\nNUMRIBS  DS    F                  NUMBER OF RIBS RETURNED BY GQSCAN\nALCMASID DS    H                  OUR ASID\nALCJOBNM DS    CL8                JOBNAME OF JOB WAITING FOR RESOURCE\nALCDSNM  DS    CL44               AREA TO SAVE DSNAME WTO TEXT\nALCDSNLN DS    F                  LENGTH OF DSNAME THAT IS ENQUED.\n         SPACE 2\n**********************************************************************\n* NOTE: DO NOT CHANGE THE ORDER OF 'ALCENIDS' 'ALCSVIDS' 'ALCSVIDE'. *\n*       THEY MUST BE IN THAT ORDER.                                  *\n**********************************************************************\nALCMVC   DS    CL6                WORKAREA FOR EXECUTED MOVES\n         DS    0D\nALCENIDS DS    A                  ADDRESS OF THE END OF ASID TABLE\nALCSVIDS DS    128H               ASID TABLE (128 ASIDS)\nALCSVIDE EQU   *                  END OF ASID TABLE\n         SPACE 3\nDYNLEN   EQU   *-DYNAREA          LENGTH OF DYNAMIC STORAGE AREA\n         TITLE 'END OF MSG2USER'\n         END   MSG2USER\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MSG2USER": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x90\\x06\\x7f\\x00\\x90\\x06\\x7f\\x17B\\x01\\x86\\x01\\x85\\x00\\x01\\xc3\\xd4\\xf0\\xf3\\xd4\\xd8\\xd2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1990-03-08T00:00:00", "modifydate": "1990-03-08T17:42:00", "lines": 390, "newlines": 389, "modlines": 1, "user": "CM03MQK"}, "text": "MSG2USER TITLE 'INTEL EXIT TO INFORM TSO USERS ENQUED ON A DATASET'\nMSG2USER CSECT\nMSG2USER AMODE 31                 31 BIT ADDRESSING MODE\nMSG2USER RMODE ANY                31 BIT RESIDENCY MODE\n*   02/23/87       MILTON SOONG    AUTHOR OF THIS PROGRAM.            *\n*   03/08/90       MORRIS KARLIN   REVISED FOR ESA 3.1.0E.        @MK *\n*****  T A B L E   O F   C O N T E N T S                          *****\n* PARAGRAPH    NARRATIVE DESCRIPTION                                  *\n* 100          PROGRAM ENTRY AND EXIT.                                *\n* 200          SUBROUTINES                                            *\n* 200-010      GET THIS TASK'S ASID                         (GTMYASID)*\n* 200-020      BUILD DSNAME TO SCAN                         (BLDDSN  )*\n* 200-030      BUILD ASID TABLE USING GQSCAN                (BLDASIDT)*\n* 200-040      SEND MESSAGES TO TSO USER                    (SENDMSGS)*\n* 800          CONSTANTS, LITERALS AND LTORG DEFINITIONS.             *\n* 900          DSECT DEFINITIONS.                                     *\n* 900-060      WTO USER EXIT PARAMETER LIST DSECT                     *\n* 900-070      TPUT MESSAGE WORK AREA DSECT                           *\n* 900-080      WTO MESSAGE TEXT DSECT                                 *\n* 900-090      DYNAMIC WORK AREA DSECT                                *\n***********************************************************************\n*              P R O G R A M   D E S C R I P T I O N                  *\n* NAME         MSG2USER                                               *\n* ENTRY POINT  MSG2USER                                               *\n* PURPOSE      THE PURPOSE OF THIS EXIT IS TO ISSUE MESSAGES TO TSO   *\n*              USERS WHO ARE ENQUED ON A DATASET CAUSING A BATCH JOB  *\n*              TO WAIT.                                               *\n* OPERATION    THIS WTO EXIT GAINS CONTROL WHENEVER MESSAGE 'IEF863I' *\n*              IS ISSUED ON THE OPERATOR' CONSOLE.  THIS EXIT WILL    *\n*              THEN USE THE DSNAME PASSED IN THE IEF863I MESSAGE AND  *\n*              ISSUE A ''GQSCAN'' FOR ONLY THAT DSNAME.   ''GQSCAN''  *\n*              RETURNS ''RESOURCE INFORMATION BLOCK EXTENSIONS(RIBE)''*\n*              FOR EVERY TSO USER OR BATCH JOB ENQUED ON THIS DSNAME. *\n*              THE EXIT WILL THEN DETERMINE THE JOBNAME OF THE BATCH  *\n*              JOB THAT IS WAITING AND WILL ALSO DETERMINE THE TSO    *\n*              USERS WHO HAVE THE DATASET ENQUED.  THE FOLLOWING      *\n*              MESSAGES WILL BE SENT TO EACH TSO USER ENQUED ON THE   *\n*              DATASET:                                               *\n*               HRA861I FOLLOWING RESERVED DATASET UNAVAILABLE TO JJJ *\n*               HRA863I DSN = DDDDDDDDDD                              *\n*                                                                     *\n*              IF YOU RECEIVE THIS MESSAGE YOU SHOULD FREE THE DATASET*\n*              TO ALLOW THE BATCH JOB TO COMPLETE.                    *\n* RESTRICTIONS THIS EXIT RECEIVES CONTROL IN 31-BIT ADDRESSING MODE   *\n*              RMODE=ANY.  TPUT WHICH IS THE METHOD USED TO SEND THE  *\n*              MESSAGES TO TSO USERS CAN BE ISSUED IN 31-BIT MODE BUT *\n*              IT'S WORKAREA MUST RESIDE BELOW THE LINE.              *\n*                                                                     *\n*              THIS EXIT ROUTINE MUST RESIDE IN AN AUTHORIZED LIBRARY *\n*              AND ON THE ''LNKLST'' CONCATENATION.                   *\n*                                                                     *\n*              THE FOLLOWING ENTRY MUST BE ADDED TO THE ACTIVE        *\n*              ''MPFLSTXX'' MEMBER OF SYS1.PARMLIB':                  *\n*                      IEF863I,SUP(NO),USEREXIT(MSG2USER)             *\n* INPUT        R1   POINTS TO THE ADDRESS OF THE CTXT(WTO TEXT MSG.)  *\n*              R13  POINTS ADDRESS OF STANDARD SAVE AREA              *\n*              R14  RETURN ADDRESS                                    *\n*              R15  ENTRY POINT ADDRESS                               *\n* OUTPUT       THE FOLLOWING MESSAGES IS ISSUED TO THE TSO USER ENQUED*\n*              ON THE DATASET CAUSING JOB TO WAIT:                    *\n*               HRA861I FOLLOWING RESERVED DATASET UNAVAILABLE TO JJJ *\n*               HRA863I DSN = DDDDDDDDDD                              *\n***********************************************************************\nMSG2USER CSECT\nR0       EQU   0   PARAMETER REGISTER\nR1       EQU   1   PARAMETER REGISTER OR PARAMETER LIST REGISTER\nR2       EQU   2   USE TO BRANCH AND LINK TO SUBROUTINES\nR3       EQU   3   WORK REGISTER\nR4       EQU   4   WORK REGISTER\nR5       EQU   5   WORK REGISTER\nR6       EQU   6   WORK REGISTER\nR7       EQU   7   WORK REGISTER\nR8       EQU   8   WORK REGISTER\nR9       EQU   9   BASE REGISTER FOR WTO EXIT PARAMETER LIST\nR10      EQU   10  BASE REGISTER FOR OUR DYNAMIC STORAGE AREA.\nR11      EQU   11  RESERVED FOR SECOND BASE REGISTER IF NEEDED.\nR12      EQU   12  $$$$$$$$ B A S E   R E G I S T E R $$$$$$$$\nR13      EQU   13  SAVEAREA REGISTER     (LINKAGE REGISTER)\nR14      EQU   14  RETURN REGISTER       (LINKAGE REGISTER)\nR15      EQU   15  ENTRY POINT REGISTER  (LINKAGE REGISTER)\n         PRINT NOGEN\n         STM   R14,R12,12(R13)    SAVE CALLER'S REGISTERS\n         BALR R12,R0              ESTABLISH MODULES BASE REGISTER\n         USING *,R12              R12 IS NOW OUR BASE REGISTER\n         L     R9,0(R1)           R9==> WTO EXIT PARAMETER LIST\n         USING CTXT,R9            ESTABLISH ADDRESSABLITY TO IT\n         B     MAINLINE           NOW GO DO YOUR PROCESSING\nALLDONE  EQU   *\n         LM    R14,R12,12(R13)    RESTORE CALLERS REGISTERS\n         BR    R14                CLEAN UP AND RETURN\n         TITLE  'PROGRAM MAIN LINE LOGIC ROUTINE'\nMAINLINE EQU   *\n         SLR   R10,R10            CLEAR R10\n         GETMAIN R,LV=DYNLEN,SP=230    GET STORAGE SP 230        @MK\n         LTR   R15,R15            Q. DID WE GET IT?\n         BNZ   ALLDONE            A. NO.  NO SENSE ON CONTINUING\n         LR    R10,R1             ESTABLISH ADDRESSABILITY TO DYNAREA\n         USING DYNAREA,R10\n         BAL   R2,GTMYASID        GET MY ASID\n         BAL   R2,BLDDSN          BUILD DSNAME TO SCAN\n         BAL   R2,BLDASIDT        BUILD ASID TABLE USING GQSCAN\n         BAL   R2,SENDMSGS        SEND MESSAGES TO TSO USERS\nPREDONE  FREEMAIN R,LV=DYNLEN,A=(10),SP=230 R10==> DYNAMIC WORKAREA\n         B     ALLDONE\n TITLE '***SEC. 200-010*** - GET THIS TASKS ASID'\n*********************************************************************\n*               G T M Y A S I D   S U B R O U T I N E               *\n* THIS SUBROUTINE WILL EXTRACT THE ASID OF THE CURRENTLY RUNING TASK*\n* THAT IS   W A I T I N G   FOR THE DATASET NAME WHICH IS DISPLAYED *\n* IN THE MESSAGE TEXT: IEF863I DSN = DSNAME.                        *\n*                                                                   *\n* WE DO IT THIS WAY BECAUSE THIS EXIT GETS CONTROL FIRST AND THEN   *\n* THE DISPATCHER GETS CONTROL.  THEREFORE PSAAOLD WILL CONTAIN THE  *\n* THE ASCB OF THE TASK WAITING FOR THE DATASET.                     *\n*********************************************************************\nGTMYASID EQU   *\n         L     R1,PSAAOLD-PSA(0,0)     EXTRACT WAITING TASK'S ASID\n         MVC   ALCMASID,ASCBASID-ASCB(R1)   AND SAVE IT FOR LATER USE\n         BR    R2                 RETURN TO MAINLINE ROUTINE\n TITLE '***SEC. 200-020*** - BUILD DSNAME TO SCAN'\n*********************************************************************\n*                   B L D D S N   S U B R O U T I N E               *\n* AT ENTRY TO THIS SUBROUTINE REGISTER 9 POINTS TO THE WTO EXIT     *\n* INPUT PARAMETER LIST.  FROM THIS PARAMETER LIST REGISTER 3 IS     *\n* LOADED WITH THE ADDRESS OF THE MESSAGE ATTRIBUTES.  THEN THE      *\n* ADDRESS OF MESSAGE (IEF863I DSN= XXXX) IS LOADED INTO REGISTER 4. *\n* THE LENGTH OF THE DSNAME IS COMPUTED AND SAVED FOR LATER USE.     *\n* THE DSNAME IS SAVED ALSO FOR LATER USE.                           *\n*********************************************************************\nBLDDSN   EQU   *\n         L     R3,CTXTTXPJ        ESTABLISH ADDRESSABILITY TO\n         USING CTXTATTR,R3        THE MESSAGE ATTRIBUTES.\n         LA    R4,CTXTTMSG        R4===> A(IEF863I DSN= ) TEXT\n         USING MSGTEXT,R4         ESTABLISH ADDRESSABILITY TO IT\n         MVI   ALCDSNM,C' '       CLEAR DSNAME WORKAREA\n         MVC   ALCDSNM+1(L'ALCDSNM-1),ALCDSNM\n         SLR   R5,R5              CLEAR R5\n         SLR   R6,R6              CLEAR R6\n         LH    R5,CTXTTLEN        R5= L'(WTO MESSAGE TEXT)\n         LA    R6,MSGFXLEN        R6= L('FIXED PORTION OF MESSAGE)\n*                                       'IEF863I DSN = '\n         SR    R5,R6              COMPUTE LENGTH OF DSNAME\n         ST    R5,ALCDSNLN        SAVE LENGTH OF DSNAME FOR LATER USE\n         BCTR  R5,0               MINUS 1 FOR EXECUTED MOVE\n         EX    R5,SAVDSN          MOVE MSGDSN TO ALCDSNM\n         BR    R2                 RETURN TO MAINLINE\nSAVDSN   MVC   ALCDSNM(0),MSGDSN  SAVE THE DSNAME FROM MESSAGE TEXT\n         SPACE 3\n         DROP  R3,R4\n TITLE '***SEC. 200-030*** - BUILD ASID TABLE USING GQSCAN'\n*********************************************************************\n*               B L D A S I D T   S U B R O U T I N E               *\n* THIS SUBROUTINE WILL INVOKE THE 'GQSCAN' MACRO TO SEARCH FOR ALL  *\n* JOBS OR TSO USERS THAT ARE ENQUED TO A DATASET.  THE DATASET NAME *\n* WAS PASSED IN THE WTO INPUT PARAMETER LIST AND SAVED IN AN AREA   *\n* LABELED 'ALCDSNM'. 'GQSCAN' RETURNS RIBES OF EACH TSO USER OR JOB *\n* ENQUED TO THIS DATASET.  THIS SUBROUTINE WILL INSPECT EACH RIBE   *\n* RETURNED AND SAVE THE ASID IN A TABLE.  THIS TABLE WILL BE USED   *\n* BY THE 'SENDMSG' SUBROUTINE TO SEND MESSAGES.  IF THE ASID BELONGS*\n* TO THIS TASK IT WILL NOT BE SAVED IN THE TABLE.  IF THE ASID IS   *\n* WAITING FOR A RESOURCE THEN IT WILL BECOME THE JOBNAME AND HIS    *\n* ASID WILL NOT BE SAVED IN THE TABLE.                              *\n*********************************************************************\nBLDASIDT EQU   *\n         STM   R0,R15,ALCSAVE     SAVE ALL MY REGISTERS\n         LA    R3,ALCSVIDS        R3===> A(TABLE TO HOLD ASIDS)\n         ST    R3,ALCENIDS        SAVE END OF TABLE ADDRESS\n         L     R6,ALCDSNLN        R6= L'(ENQUED DSNAME)\n         LA    R5,ALCDSNM         R5===> A(ENQUEUED DSNAME)\n         L     R0,SCANGM          R0= L'(GQSCAN STORAGE)\n         GETMAIN R,LV=(0)                                       @MK\n         LTR   R15,R15            Q. DID WE GET OUR STORAGE?\n         BNZ   TSOEND             A. NO.  DON'T CONTINUE\n         ST    R1,SCANPTR         A. YES. SAVE ADDRESS OF GETMAIN CORE\n         LR    R7,R1              TELL GQSCAN WHERE THE STORAGE STARTS\n         LA    R13,ALCSAVE2       GIVE GQSCAN A 18 FULLWORD SAVEAREA\n         GQSCAN AREA=((R7),8192),REQLIM=10,SCOPE=ALL,                  X\n               RESNAME=(MAJNAM,(R5),(R6)),MF=(E,GQPARMS)\n         LTR   R15,R15            Q. GQSCAN SUCCESSFUL?\n         BNZ   TSOEND             A. NO. DONT CONTINUE\n         ST    R0,RIBLNGTH        STORE L'RIB AND L'RIBE\n         ST    R1,NUMRIBS         SAVE NUMBER OF RIBS RETURNED\n         LTR   R8,R1              Q. ANY RIBS RETURNED?\n         BZ    TSOEND             A. NO. DONT CONTINUE\n         L     R7,SCANPTR         R7===> A(RIBS RETURNED)\n         USING RIB,R7             ESTABLISH ADDRESSABILITY TO RIB\nRIBLOOP  EQU   *\n         LR    R3,R7\n         AH    R3,RIBLNGTH        R3===> A(RIB VARIABLE SECTION)\n         AH    R3,RIBVLEN         R3===> A(FIRST RIBE) OR RIB EXTENSION\n         USING RIBE,R3            ESTABLISH ADDRESSABILITY TO RIBE\n         L     R1,RIBNRIBE        R1= NUMBER OF RIB EXTENSIONS RETURNED\n         LA    R15,ALCSVIDS       R15===> START OF ASID TABLE\n         LA    R14,ALCSVIDE       R14===> END OF ASID TABLE\nRIBELOOP EQU   *\n         TM    RIBESFLG,RIBESTAT  Q. IS THIS THE OWNER OF THE RESOURCE?\n         BO    RIBOWNER           A. YES HE IS AND HE IS NOT WAITING.\n         MVC   ALCJOBNM,RIBEJBNM  A. NO. THIS GUY IS WAITING FOR DSNAME\n         B     BUMPRIBE              SAVE HIS NAME BUT NOT HIS ASID.\nRIBOWNER EQU   *\n         CLC   ALCMASID,RIBEASID  Q. IS IT THE TASK'S ASID?\n         BE    BUMPRIBE           A. YES. JUST IGNORE IT\n         MVC   0(2,R15),RIBEASID  ELSE KEEP THE ASID\n         LA    R15,2(R15)         BUMP TABLE POINTER\n         CR    R15,R14            Q. IS THE ASID TABLE FULL?\n         BNL   RIBEOUT            A. YES.\nBUMPRIBE EQU   *\n         AH    R3,RIBELENG        POINT TO NEXT RIB EXTENSION\n         BCT   R1,RIBELOOP        AND INSPECT IT.\n         SPACE 1\nBUMPRIB  EQU   *\n         SLR   R4,R4              CLEAR R4 FOR WORK\n         L     R5,RIBNRIBE        NUMBER OF RIBES\nBUMPLOOP EQU   *\n         AH    R4,RIBELENG        ADD LENGTH OF A RIBE\n         BCT   R5,BUMPLOOP        ADD TIMES NUMBER OF RIBES\n         AH    R4,RIBLNGTH        ADD LENGTH OF RIB\n         AH    R4,RIBVLEN         ADD LENGTH OF VARIABLE SECTION\n         AR    R7,R4              R7===> POINTS TO NEXT RIB\n         BCT   R8,RIBLOOP         START WITH NEXT RIB\n         SPACE 1\nRIBEOUT  EQU   *\n         ST    R15,ALCENIDS       SAVE THE END OF TABLE ADDRESS.\n         L     R0,SCANGM          GRAB GQSCAN WORKAREA LENGTH & SP\n         L     R1,SCANPTR         R1===> A(GQSCAN WORKAREA)\n         FREEMAIN R,LV=(0),A=(1)  FREE GQSCAN WORKAREA\n         LM    R0,R15,ALCSAVE     RESTORE REGISTERS\n         BR    R2                 RETURN TO MAINLINE ROUTINE\nTSOEND   EQU   *\n         LM    R0,R15,ALCSAVE     RESTORE REGISTERS\n         B     PREDONE            AND GET OUT OF THIS EXIT.\n TITLE '***SEC. 200-040*** - SEND MESSAGES TO TSO USER'\n*********************************************************************\n*               S E N D M S G S   S U B R O U T I N E               *\n* THIS SUBROUTINE WILL SEND THE FOLLOWING MESSAGES TO ALL TSO USERS *\n* WHO HAVE THE DATASET ENQUED CAUSING A BATCH JOB TO WAIT:          *\n*        HRA861I FOLLOWING RESERVED DATA SET IS UNAVAILABLE TO JJJ  *\n*        HRA863I DSN= DSNAME ENQUED                                 *\n* THIS SUBROUTINE WILL DO A GETMAIN FOR STORAGE BELOW THE LINE.  WE *\n* HAVE TO DO IT THIS WAY BECAUSE THIS EXIT RECEIVES CONTROL IN 31   *\n* BIT ADDRESSING MODE AND CAN RESIDE ABOVE OR BELOW THE LINE.  TPUT *\n* CAN BE ISSUED IN 31 BIT ADDRESSING MODE BUT THE INPUT TO IT MUST  *\n* BE BELOW THE LINE.                                                *\n* TPUT IS THE METHOD USED TO SEND THE MESSAGES TO THE TSO USER.     *\n*********************************************************************\nSENDMSGS EQU   *\n         STM   R0,R15,ALCSAVE     SAVE ALL MY REGISTERS\n         GETMAIN R,LV=TPUTALEN,LOC=BELOW,SP=230  GET STORAGE BELOW LINE\n         LTR   R15,R15            Q. DID WE GET STORAGE?\n         BNZ   SENDEXT            A. NO. DONT CONTINE\n         ST    R1,TPUTPTR         A. YES. SAVE ITS ADDRESS\n         LR    R11,R1             USE R11 AS THE\n         USING TPUTAREA,R11         BASE FOR TPUT WORKAREA.\n********************************************************\n* BUILD TEXT MESSAGES 1 AND 2.  THE MESSAGES ARE BUILT *\n* BUILT IN A GETMAINED AREA BELOW THE LINE BECAUSE THE *\n* TPUT MACRO REQUIRES THAT IT'S INPUT BE IN 24 BIT MODE*\n********************************************************\n         MVC   TPUTTXT1(64),TMSGTXT1 BUILD MESSAGE TEXT 1\n         MVC   TPUTTXT2(57),TMSGTXT2 BUILD MESSAGE TEXT 2\n         MVC   TPUTJBNM,ALCJOBNM  MOVE JOBNAME TO MESSAGE\n         L     R3,ALCDSNLN        R3= L(ENQUED DSNAME)\n         BCTR  R3,0               MINUS 1 FOR EXECUTED MVC\n         EX    R3,MVCDSN          MVC   TPUTDSN(0),MSGDSN\n         LA    R3,1(R3)           RESTORE ORIGINAL LENGTH VALUE\n         LA    R3,ALCSVIDS        R3===> A(ASID TABLE)\n         L     R4,CVTPTR          R4===> A(CVT)\n         L     R4,CVTASVT-CVTMAP(,R4)  R4===> ASVT\n         SLR   R14,R14\nSENDMSG1 EQU   *\n         C     R3,ALCENIDS        Q. END OF ASID TABLE?\n         BNL   SENDEND            A. YES IT IS.\n         LH    R5,0(R3)           PICKUP ASID TABLE ENTRY\n         BCTR  R5,0               COMPUTE ENTRY IN ASVT\n         SLL   R5,2\n         L     R5,ASVTENTY-ASVT(R5,R4)\n         CLC   ASCBTSB-ASCB(4,R5),=A(0)  Q. IS THIS A TSO ASCB?\n         BE    SENDMSG2                  A. NO.  IT MUST BE BATCH.\n********************************************************\n* SEND MESSAGES TO THE TSO USERS WHO HAVE THE RESOURCE ENQED.\n********************************************************\n         LA    R6,TMSGT1L         R6= L'(TPUT TEXT1)\n         STH   R6,TPUTMSGL        SAVE IT\n         ICM   R0,12,0(3)         ASID OF TSO USER\n         ICM   R0,3,TPUTMSGL      MESSAGE LENGTH OF TEXT 1\n         LA    R1,TPUTTXT1        ADDRESS OF MESSAGE TEXT 1\n         TPUT  (1),(0),R          SEND IT TO THE TSO USER\n         SPACE 1\n         LA    R6,TMSGT2L         R6= L'(TPUT TEXT1)\n         STH   R6,TPUTMSGL        SAVE IT\n         ICM   R0,12,0(3)         ASID OF TSO USER\n         ICM   R0,3,TPUTMSGL      MESSAGE LENGTH OF TEXT 2\n         LA    R1,TPUTTXT2        ADDRESS OF MESSAGE TEXT 2\n         TPUT  (1),(0),R          SEND IT TO THE TSO USER\nSENDMSG2 LA    R3,2(R3)           R3===> A(NEXT ASID IN TABLE)\n         B     SENDMSG1           CONTINUE UNTIL END OF ASID TABLE.\n         SPACE 1\nSENDEND  L     R11,TPUTPTR        R11===> A(STORAGE TO FREE)\n         FREEMAIN R,LV=TPUTALEN,A=(11),SP=230\nSENDEXT  LM    R0,R15,ALCSAVE     RESTORE ALL REGISTERS\n         BR    R2                 RETURN TO MAINLINE\nMVCDSN   MVC   TPUTDSN(0),ALCDSNM\n TITLE '***SEC. 800*** - CONSTANTS, LITERALS AND LTORG DEFINITIONS'\n         DS    0D\nMAJNAM   DC    CL8'SYSDSN  '      MAJOR RESOURCE NAME FOR GQSCAN\nSCANGM   DC    AL1(230),AL3(16384) GETMAIN SIZE FOR GQSCAN IN SP 230\n         DS    0D\nTMSGTXT1 DC    CL08'HRA861I '     MESSAGE ID\n         DC    CL48'FOLLOWING RESERVED DATA SET NAME UNAVAILABLE TO '\n         DC    CL08'        '\nTMSGT1L  EQU   *-TMSGTXT1\nTMSGTXT2 EQU   *\n         DC    CL08'HRA863I '\n         DC    CL05'DSN= '\n         DC    CL44'                                            '\nTMSGT2L  EQU   *-TMSGTXT2\n         LTORG\n TITLE '***SEC. 900-010*** - COMMUNICATIONS VECTOR TABLE(CVT) DSECT'\n*********************************************************************\n* THIS DSECT IS A MAP THE MVS COMMUNICATIONS VECTOR TABLE WHICH IS  *\n* REFERRED TO AS THE CVT.  IT CONTAINS POINTERS TO MANY OF THE MVS  *\n* CONTROL BLOCKS.                                                   *\n*********************************************************************\n         PRINT NOGEN\nCVTMAP   CVT   LIST=YES,DSECT=YES\nPSA      IHAPSA          ,   PREFIX SAVE AREA\nASVT     IHAASVT         ,  ADDRESS SPACE VECTOR TABLE\nASCB     IHAASCB         ,  ADDRESS SPACE CONTROL BLOCK\nRIB      ISGRIB          ,  RESOURCE INFO BLOCK\n         IEZVX100        ,  WTO USER EXIT PARM LIST\n TITLE '***SEC. 900-070 - TSO TPUT MESSAGE WORK AREA DSECT'\n**********************************************************************\n* THIS DSECT IS USED TO ESTABLISH ADDRESSABILITY TO STORAGE OBTAINED *\n* BY A GETMAIN INSTRUCTION.  THIS STORAGE AREA MUST RESIDE BELOW THE *\n* 16 MEG LINE BECAUSE THE TPUT SVC REQUIRES IT TO BE BELOW THE LINE. *\n**********************************************************************\nTPUTAREA DSECT\n         DS    0D\nTPUTTXT1 EQU   *\n         DS    CL08               MESSAGE ID='HRA861I '\n         DS    CL48               MESSAGE TEXT1\nTPUTJBNM DS    CL08               JOBNAME (MAX EIGHT CHARACTERS)\n         SPACE 2\nTPUTTXT2 DS    CL08               MESSAGE ID='HRA863I '\n         DS    CL05               MESSAGE TEXT2 PART 1= 'DSN= '\nTPUTDSN  DS    CL44               DSNAME\n         SPACE 2\nTSOASID  DS    H                  TSO USER ASID TO SEND THE MESSAGES TO\nTPUTMSGL DS    H                  LENGTH OF MESSAGE TO TPUT TO USER\nTPUTALEN EQU   ((*-TPUTAREA+7)/8)*8 LENGTH OF TPUT WORK AREAS\n TITLE '***SEC. 900-080 - WTO MESSAGE TEXT DSECT'\n**********************************************************************\n* THIS DSECT IS USED TO ESTABLISH ADDRESSABILITY TO THE WTO MESSAGE  *\n* PASSED TO THIS EXIT AT ENTRY TO THIS EXIT.                         *\n**********************************************************************\nMSGTEXT  DSECT\nMSGID    DS    CL14             MESSAGE ID = 'IEF863I DSN = '\nMSGFXLEN EQU   *-MSGTEXT        LENGTH OF FIXED PORTION OF MESSAGE\nMSGDSN   DS    CL44             DSNAME. (MAX 44 BYTES)\nMSGDSNL  EQU   *-MSGDSN         MAX LENGTH OF ANY DSNAME\nMSGTEXTL EQU   *-MSGTEXT        MAX LENGTH OF MESSAGE\n TITLE '***SEC. 900-090*** - DYNAMIC STORAGE AREA DSECT'\n*********************************************************************\n* THIS DSECT IS A MAP OF ALL OUR WORKING STORAGE FOR THIS PROGRAM.  *\n* REG. 10 IS THE BASE REGISTER USED.  THIS IS TO MAKE THIS PROGRAM RENT\n*       NOTE: THIS STORAGE AREA HAS RMODE=ANY AND WILL PROBABLY     *\n*             RESIDE ABOVE THE LINE.                                *\n*********************************************************************\nDYNAREA  DSECT\nALCSAVE  DS    18F                AREA FOR SUBROUTINES TO SAVE REGS.\nALCSAVE2 DS    18F                AREA FOR GQSCAN TO SAVE REGS.\nGQPARMS  GQSCAN AREA=(*-*,8192),REQLIM=10,SCOPE=ALL,                   X\n               RESNAME=(*-*,*-*,0),MF=L\nSCANPTR  DS    A                  A(GQSCAN WORKAREA)\nTPUTPTR  DS    A                  FULLWORD TO SAVE GETMAINED CORE ADDR.\nRIBLNGTH DS    H                  L'RIB(MUST PRECEED RIBELENG)\nRIBELENG DS    H                  L'RIBE(MUST PROCEED RIBLENGTH)\nNUMRIBS  DS    F                  NUMBER OF RIBS RETURNED BY GQSCAN\nALCMASID DS    H                  OUR ASID\nALCJOBNM DS    CL8                JOBNAME OF JOB WAITING FOR RESOURCE\nALCDSNM  DS    CL44               AREA TO SAVE DSNAME WTO TEXT\nALCDSNLN DS    F                  LENGTH OF DSNAME THAT IS ENQUED.\n**********************************************************************\n* NOTE: DO NOT CHANGE THE ORDER OF 'ALCENIDS' 'ALCSVIDS' 'ALCSVIDE'. *\n**********************************************************************\nALCENIDS DS    A                  ADDRESS OF THE END OF ASID TABLE\nALCSVIDS DS    128H               ASID TABLE (128 ASIDS)\nALCSVIDE EQU   *                  END OF ASID TABLE\nDYNLEN   EQU   *-DYNAREA          LENGTH OF DYNAMIC STORAGE AREA\n         END   MSG2USER\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OLDDOC": {"ttr": 1802, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x04?\\x00\\x87\\x05O\\x170\\x00g\\x00g\\x00\\x00\\xe2\\xd6\\xd6\\xd5\\xc7@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-12T00:00:00", "modifydate": "1987-02-23T17:30:00", "lines": 103, "newlines": 103, "modlines": 0, "user": "SOONG"}, "text": "1\n\n THE FOLLOWING IS AN OLD MEMO THAT WE FOUND FOR DEBE DOC AT CBT, I\n  THINK THE CODE MAY HAVE MORE COMANDS THAN WHAT IS DOCUMENTED HERE\n  CHECK THE CODE, ITS PRETTY STRAIGHT FOWARD.\n\n  SUBJECT-   MVS DEBE\n\n  DATE   -   JUNE 21, 1977\n\n  ENCLOSED YOU WILL FIND THE DESCRIPTION OF THE MVS DEBE UTILITY\n  PROGRAM.\n\n  IT SHOULD BE NOTED THAT MVS DEBE OPTIONS SUCH AS TP AND SF REQUEST\n  THAT THE OPERATOR SPECIFY THE NUMBER OF DATA GROUPS (RECORDS, FILES,\n  ETC) TO BE OPERATED UPON. THE NUMBER OF DIGITS IN THE REPLY MUST AGREE\n  WITH THE REPLY FORMAT SPECIFIED BY THE MVS DEBE ROUTINE. FOR EXAMPLE\n  IN A TP (TAPE TO PRINT) OPERATION THE MESSAGE\n\n       'DEBE=NR BLK TO PROCESS OR ALL-XXX'\n\n  WILL BE DISPLAYED TO REQUEST THE NUMBER OF BLOCKS TO BE PRINTED. THE\n  DESIRED REPLY IS 'XXX'-3 CHARACTERS. IF THE REPLY IS OF THE FORM\n\n              R XX,1\n       OR\n              R XX,01\n\n  AN ABEND WILL BE THE RESULT. THE PROPER REPLY SHOULD HAVE BEEN\n  THREE CHARACTERS\n\n              R XX,001\n\n  THIS REPLY WILL RESULT IN PROPER COMPLETION OF THE TP FUNCTION.\n\n1\n   COMMAND                PURPOSE                   COMMENTS\n\n    EJ         END OF JOB\n\n    BF         BACKSPACE FILE             MUST SPECIFY NUMBER OF FILES\n                                          TO BE PROCESSED.\n\n    BS         BACKSPACE BLOCKS(RECORDS)  MUST SPECIFY NUMBER OF RECORDS\n                                          TO BE SKIPPED\n\n    BT         BLOCK CARD IMAGE ON TAPE   MUST SPECIFY BLOCKING FACTOR\n                                          ON CARD TO TAPE\n\n    CC         CARD TO CARD\n\n    CP         CARD TO PRINTER            PRINT CARDS TO SYSOUT\n\n    CT         CARD TO TAPE               PUT CARD IMAGES ONTO TAPE\n\n    DP         DEBLOCK TAPE TO PRINTER    SAME AS TP, BUT PRINTS ONE\n                                          RECORD PER LINE\n\n    HD         DISPLAY TAPE LABEL ON OPERATOR'S CONSOLE\n\n    KC         COUNT CARDS                DISPLAYS CARD COUNT MESSAGE\n                                          TO OPERATOR CONSOLE\n\n    KR         COUNT RECORDS ON A TAPE    DISPLAYS RECORD COUNT MESSAGE\n               FILE                       TO OPERATOR CONSOLE\n\n    RU         REWIND AND UNLOAD A TAPE   CAN BE USED IF MULTIPLE TAPE\n                                          VOLUMES ARE BEING READ/WRITTEN\n                                          FROM ONE DRIVE\n\n    RW         REWIND A TAPE VOLUME       REWINDS TO LOAD POINT. TAPE\n                                          DRIVE REMAINS READY\n\n    SF         FORWARD SPACE A TAPE FILE  MUST KEY IN NUMBER OF FILES\n                                          TO BE SKIPPED. MAY REPLY 'EJ'\n                                          TO EXIT THIS FUNCTION\n\n    SR         FORWARD SPACE TAPE RECORDS MUST KEY IN NUMBER OF RECORDS\n                                          TO BE SKIPPED. MAY REPLY 'EJ'\n                                          TO EXIT THIS FUNCTION\n\n    TC         TAPE TO CARD               PUNCH OUT A TAPE FILE\n\n    TD         PRINT A TAPE FILE (OR      MAY REPLY WITH NUMBER OF\n               RECORDS OF A TAPE) IN      RECORDS TO BE PRINTED OR 'ALL'\n               HEXIDECMIAL FORMAT         TO PRINT ENTIRE FILE.\n\n    TM         WRITE MULTIPLE TAPE MARKS  MUST REPLY WITH NUMBER OF TAPE\n                                          MARKS TO BE WRITTEN\n\n    TP         PRINT A TAPE FILE IN       MAY REPLY WITH NUMBER OF\n               CHARACTER FORMAT           RECORDS TO BE PRINTED OR 'ALL'\n                                          TO PRINT ENTIRE FILE.\n\n    TT         TAPE TO TAPE COPY          MUST REPLY WITH THE FOLLOWING\n                                          (1) # OF BLOCKS TO PROCES\n                                              FROM EACH FILE\n                                          (2) # OF FILES TO PROCESS\n                                              (NUMBER ONLY)\n    WT         WRITE A SINGLE TAPE MARK\n\n    WL         WRITE A TAPE HEADER LABEL\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSO051": {"ttr": 1805, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x04?\\x00\\x87\\x05O\\x170\\x04\\xd0\\x04\\xd0\\x00\\x00\\xe2\\xd6\\xd6\\xd5\\xc7@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-12T00:00:00", "modifydate": "1987-02-23T17:30:00", "lines": 1232, "newlines": 1232, "modlines": 0, "user": "SOONG"}, "text": "GETINFO  TITLE 'GET TSO USER STUFF FROM JCT INTO CLIST VARIABLES-V1M4'  00003**6\n         PRINT OFF    MACROS BE HERE                                    00004**6\n*          DATA SET MODESET    AT LEVEL 002 AS OF 01/15/82              00005**6\n         MACRO                                                          00006**6\n&LABEL   MODESET &KEY=,&MF=,&RET=R14,&MODE=     CHANGE NAME TO MODESET  00007**6\n.*                                                                      00008**6\n.* CHANGE MACRO NAME TO FMODESET TO ALLOW USE OF REAL MODESET           00009**6\n.*                                                                      00010**6\n         LCLC    &PRINT         ******TO ALLOW USE OF MAGIC SVC  KT     00011**6\n&PRINT   SETC    'OFF'                                                  00012**6\n         AIF     ('&MF(1)' EQ 'E').CODE                                 00013**6\n         AIF     ('&KEY' EQ 'ZERO').GOSUP                               00014**6\n         AIF     ('&MODE' EQ 'SUP').GOSUP                               00015**6\n         AIF     ('&KEY' EQ 'NZERO').GOPROB                             00016**6\n         AIF     ('&MODE' EQ 'PROB').GOPROB                             00017**6\n MNOTE 8,'MODESET (NTL) OF &KEY NOT RECOGNIZED'                         00018**6\n         MEXIT                                                          00019**6\n.GOSUP   ANOP                                                           00020**6\n*                                                                       00021**6\n&LABEL   ICM   R0,B'1111',=X'ABCFEDAD'  GET CODE                        00022**6\n         SR    1,1              INDICATE KEY=0                          00023**6\n         SVC   246              DOIT PLEASE                             00024**6\n         AIF   ('&MF' NE 'L').FIN1                                 NTL* 00025**6\n         BR    &RET             RETURN TO MAINLINE                      00026**6\n*                                                                       00027**6\n.FIN1    ANOP  ,                                                   NTL* 00028**6\n         MEXIT                                                          00029**6\n.GOPROB  ANOP                                                           00030**6\n*                                                                       00031**6\n&LABEL   ICM   R0,B'1111',=X'ABCFEDAD'  GET CODE                        00032**6\n         SVC   246                IF YOU PLEASE.....                    00033**6\n         AIF   ('&MF' NE 'L').FIN2                                 NTL* 00034**6\n         BR    &RET             RETURN TO CALLER                        00035**6\n*                                                                       00036**6\n.FIN2    ANOP  ,                                                   NTL* 00037**6\n         MEXIT                                                          00038**6\n.CODE    ANOP                                                           00039**6\n         AIF   ('&MF(1)' NE 'E').OOPS                                   00040**6\n&LABEL   BAL   &RET,&MF(2)      INVOKE ROUTINE                          00041**6\n*                                                                       00042**6\n         MEXIT                                                          00043**6\n.OOPS    ANOP                                                           00044**6\n MNOTE 12,'NTL MODESET MF NOT=L OR (E,ADDR)   MF=&MF'                   00045**6\n         MEND                                                           00046**6\n         MACRO                                                          00047**6\n         REGEQU                                                         00048**6\nR0       EQU   0                                                        00049**6\nR1       EQU   1                                                        00050**6\nR2       EQU   2                                                        00051**6\nR3       EQU   3                                                        00052**6\nR4       EQU   4                                                        00053**6\nR5       EQU   5                                                        00054**6\nR6       EQU   6                                                        00055**6\nR7       EQU   7                                                        00056**6\nR8       EQU   8                                                        00057**6\nR9       EQU   9                                                        00058**6\nR10      EQU   10                                                       00059**6\nR11      EQU   11                                                       00060**6\nR12      EQU   12                                                       00061**6\nR13      EQU   13                                                       00062**6\nR14      EQU   14                                                       00063**6\nR15      EQU   15                                                       00064**6\n         MEND                                                           00065**6\n         MACRO                                                          00066**6\n&LAB     LEAVER &WR=R13,&WL=WORKLEN                                     00067**6\n&LAB     LR    R1,&WR             WORKAREA ADDR FOR FREEMAIN            00068**6\n         LA    R0,&WL             WORKAREA LEN   \"    \"                 00069**6\n         L     R13,4(R13)         GET CALLERS SAVEAREA ADDR             00070**6\n         LR    R11,R15            SAVE RETURN CODE                      00071**6\n         FREEMAIN R,LV=(0),A=(1)                                        00072**6\n         LR    R15,R11            RESTORE RETURN CODE                   00073**6\n         RETURN (14,12),RC=(15)                                         00074**6\n         MEND                                                           00075**6\n         MACRO                                                          00076**6\n&LAB     LEAVENR                                                        00077**6\n&LAB     L     R13,4(R13)         GET CALLERS SAVEAREA ADDR             00078**6\n         RETURN (14,12),RC=(15)                                         00079**6\n         MEND                                                           00080**6\n         MACRO                                                          00081**6\n&LAB     KKPARSE &CPPL=R11,&ANS=ANS,&ECB=ECB,&PCL=PCL,&PPLA=PPLA        00082**6\n*                  DEFAULT OPERANDS :                                   00083**6\n*        KKPARSE &CPPL=R11,&ANS=ANS,&ECB=ECB,&PCL=PCL,&PPLA=PPLA        00084**6\n*                            CPPL IS THE REGISTER CONTAINING THE        00085**6\n*                                 POINTER TO THE COMMAND PROCESSOR      00086**6\n*                                 PARAMETER LIST.                       00087**6\n*                            ANS  IS A FULLWORD WHERE PARSE RETURNS     00088**6\n*                                 THE POINTER TO HIS ANSWER (IKJPARMD). 00089**6\n*                            ECB  IS A FULLWORD.                        00090**6\n*                            PCL  IS THE NAME OF THE PARSE CONTROL      00091**6\n*                                 LIST CSECT (IKJPARM).                 00092**6\n*                            PPLA IS A 7 FULLWORD AREA USED FOR         00093**6\n*                                 THE PARSE PARAMETER LIST.             00094**6\n*                                                                       00095**6\n*        KKPARSE             USES REGS R14,R15,R1,&CPPL REG             00096**6\n*                                                                       00097**6\n         USING CPPL,&CPPL         POINTS TO CPPL (PARM LIST)            00098**6\n*                                                                       00099**6\n&LAB     LA    R1,&PPLA           R1->PPL AREA                          00100**6\n         USING PPL,R1             TELL ASSEMBLER POINTS TO PPL AREA     00101**6\n*                                                                       00102**6\n*                         CONSTRUCT PARSE PARAMETER LIST                00103**6\n*                                           FOR IKJPARS :               00104**6\n*                                                                       00105**6\n         MVC   PPLUPT,CPPLUPT     UPT                                   00106**6\n         MVC   PPLECT,CPPLECT     ECT                                   00107**6\n         LA    R15,&ECB           ECB                                   00108**6\n         ST    R15,PPLECB                                               00109**6\n         L     R15,=V(&PCL.)      PCL                                   00110**6\n         ST    R15,PPLPCL                                               00111**6\n         LA    R15,&ANS           ANS                                   00112**6\n         ST    R15,PPLANS                                               00113**6\n         MVC   PPLCBUF,CPPLCBUF   CBUF                                  00114**6\n         XC    PPLUWA,PPLUWA                                            00115**6\n*                                                                       00116**6\n         DROP  R1                                                       00117**6\n         EJECT                                                          00118**6\n*        CALLTSSR EP=IKJPARS      CALL PARSE:                           00119**6\n         CALLTSSR EP=IKJPARS      CALL PARSE:                           00120**6\n         EJECT                                                          00121**6\n*                                                                       00122**6\n*                        DSECTS NEEDED BY PARSE:                        00123**6\n*                                                                       00124**6\n*CPPL    IKJCPPL                                                        00125**6\nCPPL     IKJCPPL                                                        00126**6\n*PPL     IKJPPL                                                         00127**6\nPPL      IKJPPL                                                         00128**6\n*                                                                       00129**6\nCVTMAP   DSECT                                                          00130**6\n         ORG   CVTMAP+524                                               00131**6\nCVTPARS  DS    F                                                        00132**6\nCVTPTR   EQU   16                                                       00133**6\n*                                                                       00134**6\n*                                                                       00135**6\n&SYSECT  CSECT                                                          00136**6\n         MEND                                                           00137**6\n         MACRO                                                          00138**6\n&LAB1    ENTERR &SA=SAVEAREA,&WA=WORKAREA,&WL=WORKLEN                   00139**6\n&LAB1    START                                                          00140**6\n         SAVE  (14,12),,*         HO-HUM                                00141**6\n         LR    R12,R15            HOPE HE KNOWS WHAT HE'S DOING         00142**6\n         USING &LAB1,R12                                                00143**6\n         LR    R10,R1             SAVE PARM PTR R10->PARM PTR           00144**6\n         LA    R0,&WL             R0=GET LENGTH                         00145**6\n         GETMAIN R,LV=(0)         R1->WORKAREA                          00146**6\n         LR    R11,R13            R11->CALLERS SAVEAREA                 00147**6\n         LR    R13,R1             R13->WORKAREA                         00148**6\n         USING &WA.,R13                                                 00149**6\n         ST    R11,&SA.+4         SAVE HIS SAVEAREA PTR                 00150**6\n         LA    R13,&SA            R13->SAVEAREA (MINE)                  00151**6\n         ST    R13,8(,R11)        MINE IN HIS                           00152**6\n         LR    R11,R1             R11->WORKAREA IN CASE NOT SAME AS R13 00153**6\n*                       WORKAREA ADDR IS STILL R13 FOR                  00154**6\n*                       THE ASSEMBLER - IF DIFFERENT FROM R13           00155**6\n*                       THEN USE: DROP R13 AND USING &WA.,R11           00156**6\n         LR    R1,R10             RESTORE PARM PTR PTR                  00157**6\n         REGEQU                                                         00158**6\n         MEND                                                           00159**6\n         MACRO                                                          00160**6\n&LAB1    ENTERNR &SA=SAVEAREA                                           00161**6\n&LAB1    START                                                          00162**6\n         SAVE  (14,12),,*         HO-HUM                                00163**6\n         LR    R12,R15            HOPE HE KNOWS WHAT HE'S DOING         00164**6\n         USING &LAB1,R12                                                00165**6\n         ST    R13,&SA.+4         SAVE HIS SAVEAREA PTR                 00166**6\n         LR    R11,R13            SAVE THE SAVE POINTER                 00167**6\n         LA    R13,&SA            R13->SAVEAREA (MINE)                  00168**6\n         ST    R13,8(,R11)        MINE IN HIS                           00169**6\n         B     ENTEX                                                    00170**6\n&SA      DS    18F                                                      00171**6\n         REGEQU                                                         00172**6\nENTEX    DS    0H                                                       00173**6\n         MEND                                                           00174**6\n         MACRO                                                          00175**6\n&LAB1    COMMENT &A,&B,&C,&D,&E,&F,&G,&H,&I,&J,&K                       00176**6\n         MEND                                                           00177**6\n         MACRO  ,                                                       00178**6\n&LABEL   STUFFIT &FIELD,&KEYWD,&PDE                                     00179**6\n         GBLB  &TSOER3         TSOE R3 VERSION INSTALLED          NTLR3\n         LCLC   &S                                                      00180**6\n&S       SETC   '&SYSNDX'                                               00181**6\n         SPACE  1                                                       00182**6\n         AIF   (T'&KEYWD EQ 'O').NOCHK                                  00183**6\n&LABEL   TM    &KEYWD+1,X'FF'  WAS FIELD REQUESTED?               NTL1  00184**6\n         BZ    SKPA&S          NO..SPLIT                                00185**6\n         AGO   .FINCHK                                                  00186**6\n.NOCHK   ANOP  ,                                                        00187**6\n&LABEL   L     R7,&PDE         (R7)= ADDR OF PARSE DESCRIPTOR ENTRY     00188**6\n         AGO   .SKP1                                                    00189**6\n.FINCHK  ANOP  ,                                                        00190**6\n         L     R7,&PDE         (R7)= ADDR OF PARSE DESCRIPTOR ENTRY     00191**6\n.SKP1    ANOP  ,                                                        00192**6\n         LH    R6,&PDE+4       (R6)= LENGTH OF ELEMENT                  00193**6\n         AIF   (&TSOER3).SKP4                                     NTLR3\n         BAL   R14,LOCVAR      GO FIND THE CLIST VARIABLE               00194**6\n         LTR   R1,R1           ANY LUCK?                                00195**6\n         BZ    SKPA&S          NO.. SPLIT                               00196**6\n         SPACE 1                                                        00197**6\n.SKP4    ANOP  ,                                                  NTLR3\n         LA    R15,&FIELD      GET ADDR OF FIELD TO STUFF               00198**6\n         LH    R0,=AL2(L'&FIELD)   GET LENGTH OF FIELD TO STUFF   INTEL 00199**6\n         AIF   (&TSOER3).SKP3                                     NTLR3\n         BAL   R14,SETVAR      GO STUFF IT AWAY INTO CLIST VAR          00200**6\n         AGO   .SKP2                                              NTLR3\n.SKP3    ANOP  ,                                                  NTLR3\n         BAL   R14,GET441        GO STUFF IT AWAY INTO CLIST VAR  NTLR3\n.SKP2    ANOP  ,                                                  NTLR3\nSKPA&S   DS    0H                                                       00201**6\n         SPACE 1                                                        00202**6\n         MEND  ,                                                        00203**6\n         MACRO ,                                                    NTL 00204**6\n&LABEL   STUFFITN &NUMB,&KEYWD,&PDE                                 NTL 00205**6\n         SPACE 1                                                    NTL 00206**6\n         LCLA  &L                                                   NTL 00207**6\n&L       SETA  L'&NUMB         GET LENGTH OF NUMBER                 NTL 00208**6\n         SR    R1,R1           CLEAR NUMBER REGISTER                NTL 00209**6\n         AIF   (&L NE 1).NOT1                                       NTL 00210**6\n&LABEL   IC    R1,&NUMB        GET NUMBER (1 BYTE)                  NTL 00211**6\n         AGO   .DOIT                                                NTL 00212**6\n.NOT1    ANOP  ,                                                    NTL 00213**6\n         AIF   (&L NE 2).NOT2                                       NTL 00214**6\n&LABEL   LH    R1,&NUMB        GET NUMBER (HALFWORD)                NTL 00215**6\n         AGO   .DOIT                                                NTL 00216**6\n.NOT2    ANOP  ,                                                    NTL 00217**6\n         AIF   (&L NE 4).NOT4                                       NTL 00218**6\n&LABEL   L     R1,&NUMB        GET NUMBER (FULLWORD)                NTL 00219**6\n         AGO   .DOIT                                                NTL 00220**6\n.NOT4    ANOP  ,                                                    NTL 00221**6\n MNOTE 8,'STUFFITN - LENGTH OF &NUMB IS &L - MUST BE 1,2 OR 4'      NTL 00222**6\n         MEXIT ,                                                    NTL 00223**6\n.DOIT    ANOP  ,                                                    NTL 00224**6\n         BAL   R14,FITINUM                                          NTL 00225**6\n MNOTE '        STUFFIT NUMBER,&KEYWD,&PDE   INVOKE STUFFIT'        NTL 00226**6\n         STUFFIT NUMBER,&KEYWD,&PDE                                 NTL 00227**6\n         MEND  ,                                                    NTL 00228**6\n         PRINT ON   END OF INSTREAM MACROS                              00229**6\n*                                                                       00230**6\n* TSO COMMAND   G E T I N F O                                           00231**6\n*                                                                       00232**6\n*     PURPOSE: STUFF JUNK FROM THE OS JCT/ACF2 JCT INTO CLIST           00233**6\n*              VARIABLES OF YOUR CHOICE.                                00234**6\n*                                                                       00235**6\n*   SYNTAX - (ALL OPERANDS ARE OPTIONAL)                                00236**6\n*                                 LENGTH  DESCRIPTION                   00237**6\n*      GETINFO  PGMRNAME(VAR1) /*  20     PROGRAMMER NAME            */ 00238**6\n*               BIN(VAR2)      /*   4     BIN NUMBER (SECOND ACNT FLD*/ 00239**6\n*               PHONE(VAR3)    /*  12     USER PHONE NUMBER- ACF2    */ 00240**6\n*               DEST(VAR4)     /*   8     DEFAULT SYSOUT DEST        */ 00241**6\n*               JOBCLASS(VAR5) /*   1     ACF2 DFT-SUBC              */ 00242**6\n*               MSGCLASS(VAR6) /*   1     ACF2 DFT-SUBM              */ 00243**6\n*               SYSOUT(VAR7)   /*   1     ACF2 DFT-SOUT              */ 00244**6\n*               PROJECT(VAR8)  /*   4     FIRST 4 CHARS OF ACNT FIELD*/ 00245**6\n*               SRNUM(VAR9)    /*   4     LAST  4 CHARS OF ACNT FIELD*/ 00246**6\n*               JOBNUM(VAR10)  /*   8     JES2 JOB NUMBER            */ 00247**6\n*               LINE(VAR11)    /*   8     LOGON TERMAINAL NAME       */ 00248**6\n*               DAY(VAR12)     /*   9     DAY OF THE WEEK FOR TODAY  */ 00249**6\n*               JDATE(VAR13)   /*   6     JULIAN DATE IN YY.DDD FORM */ 00250**6\n*               DATE(VAR14)    /*  13     DATE IN 'MON. DD, 19YY'    */ 00251**6\n*               ROWS(VAR15)    /*   8     CUR # LINES/SCREEN         */ 00252**6\n*               COLS(VAR16)    /*   8     CUR # CHARS/LINE           */ 00253**6\n*               PROWS(VAR17)   /*   8     PRIMARY # LINES/SCREEN     */ 00254**6\n*               PCOLS(VAR18)   /*   8     PRIMARY # CHARS/LINE       */ 00255**6\n*               AROWS(VAR19)   /*   8     ALTERNATE # LINES/SCREEN   */ 00256**6\n*               ACOLS(VAR20)   /*   8     ALTERNATE # CHARS/LINE     */ 00257**6\n*               ATTR(VAR21)    /*   4    ='YES'-PROGRAM SYMB OK ELSE */ 00258**6\n*                              /*        ='NO' -NO PROGRAM SYMB FEAT.*/ 00259**6\n*               ENVIRON(VAR22) /*   8    ='BATCH', 'TSO' OR 'TONE4'  */ 00260**6\n*               NOCOMPR        /*  KEYWORD- NO TRIM OF TRAILING BLNKS*/ 00261**6\n*                                                                       00262**6\n         GBLB  &TONE4          TONE4 MVS DEPENDENT CODE             NTL 00263**6\n         GBLB  &SP3            SP1.3 VERSION OF JES2              INTEL 00266**6\n         GBLB  &ACF314         ACF2 3.1.4 VERSION INSTALLED       INTEL 00263**6\n         GBLB  &TSOER3         TSOE R3 VERSION INSTALLED          NTLR3\n&TONE4   SETB  0               1=YES, 0=NO                          NTL 00264**6\n&SP3     SETB  0               1=YES, 0=NO                        INTEL 00267**6\n&ACF314  SETB  1               1=YES, 0=NO                        INTEL 00264**6\n&TSOER3  SETB  1               1=YES, 0=NO                        NTLR3\n*                                                                       00262**6\n         AIF   (&ACF314).$SK1001                                  INTEL\n         GBLC  &ACF2JCT    ACF 3.1.3                              INTEL 00268**6\n.$SK1001 ANOP  ,                                                  INTEL 00360**6\n          EJECT  ,                                                  NTL 00269**6\n*                                                                       00262**6\n*                                                                       00262**6\n*   VAR1-VAR22 ARE CLIST VARIABLE NAMES (WITHOUT THE & IN FRONT)    NTL 00270**6\n*   ALL VARIABLES MUST HAVE BEEN INITIALIZED BY A 'SET' STATMENT BEFORE 00271**6\n*   GET INFO IS INVOKED.                                                00272**6\n*                                                                       00273**6\n*   EXAMPLE:   RETURN PROGRAMMER NAME AND PHONE NUMBER:                 00274**6\n*                                                                       00275**6\n*        SET &PHON = &STR(            )                                 00276**6\n*        SET &PRGN = &STR(                    )                         00277**6\n*        GETINFO PGMR(PRGN) PHONE(PHON)                                 00278**6\n*                                                                       00279**6\n*                                                                       00280**6\n* RETURN-CODES : GETINFO RETURNS CODES IN CLIST VAR &LASTCC AS FOLLOWS; 00281**6\n*                                                                       00282**6\n*                       0 - NORMAL COMPLETION                           00283**6\n*              X'20' = 32 - VARIABLE TRUNCATED - TOO SHORT FOR FIELD    00284**6\n*              X'40' = 64 - VARIABLE NOT FOUND                          00285**6\n*              X'80' =128 - NOT RUNNING UNDER CONTROL OF CLIST          00286**6\n*                     256 - PARSE ERROR                                 00287**6\n*              NOTE: VALUES ARE ADDITIVE:                               00288**6\n*                 A RETURN CODE OF 96 =X'60' INDICATES AT LEAST ONE     00289**6\n*                 VARIABLE WAS TRUNCATED, AND ANOTHER WAS NOT FOUND.    00290**6\n*                                                                       00291**6\n*  HISTORY:                                                             00292**6\n*  V1.0    K TRUE     25 JUN 81  - INTEL CORP.                          00293**6\n*      BASED ON 'KOMM' FROM KERMIT KISER OF WASHINTON STATE DP          00294**6\n*            SERVICE CENTER (WDPSC).  STOLEN FROM COMM WERE MACROS      00295**6\n*            AND MANIPULATION OF CLIST VARIABLES ROUTINES.              00296**6\n*                                                                   NTL 00297**6\n*  V1.1   K  TRUE     12 APR 82  - INTEL CORP                       NTL 00298**6\n*      ADDED KEYWORDS:                                              NTL 00299**6\n*            ROWS,COLS,PROWS,PCOLS,AROWS,ACOLS,ATTR,ENVIRON         NTL 00300**6\n*      ADDED TONE4 SUPPORT VIA &TONE4 GBLB VARIABLE.. CODE FOR      NTL 00301**6\n*            EXTRACTION OF TONE4 LINE IS BY BILL WILLIAMS (FROM     NTL 00302**6\n*            TSO043(WHODIS) COMMAND)                                NTL 00303**6\n*      INCLUDED MODESET LOCAL MACRO AS INSTREAM SO MAGIC SVC COULD  NTL 00304**6\n*            BE USED, OR REAL MODESET (AS YOU WISH)                 NTL 00305**6\n*  V1.2  K  TRUE     13 MAR 83   - INTEL CORP                       NTL 00306**6\n*      ADDED &SP3 FLAG FOR SP1.3 JES2...NEW ACF2 CONTROL BLOCKS..   NTL 00307**6\n*  V1.3  B WILLIAMS  08 OCT 84   - INTEL CORP                     INTEL 00306**6\n*      ADDED &ACF314 FLAG FOR ACF2  3.1.5 SUPPORT                 INTEL 00307**6\n*  V1.4  B WILLIAMS  30 OCT 85   - INTEL CORP                     INTEL 00306**6\n*      WITH &ACF314 FLAG SUPPORT JES2 1.3.4 INSTALL               NTL14 00307**6\n*  V1.5  B WILLIAMS  11 DEC 85   - INTEL CORP                     NTL15\n*      MODIFY LOCVAR ROUTINE TO SUPPORT TSOE EXTENSION TABLE.     NTL15\n*  V1.6  B WILLIAMS  27 FEB 86   - INTEL CORP                     NTL16\n*      ADD SPLEVEL SET=1 FOR 370 MACRO EXPANSION (STAX)           NTL16\n*  V3    B WILLIAMS  01 MAR 87   - INTEL CORP                     NTLR3\n*      ADD TSOE R3 EXTENSION TABLE SUPPORT                        NTLR3\n*                                                                   NTL 00308**6\n* ORIGINAL SOURCE WAS:                                              NTL 00309**6\n*          DATA SET CBT934     AT LEVEL 001 AS OF 02/25/79              00310**6\n*    FROM THE CBT MODS TAPE.                                        NTL 00311**6\n*                                                                   NTL 00312**6\n*                                                                   NTL 00313**6\n         EJECT                                                          00314**6\n*.....................................................................* 00315**6\n*        STANDARD COMMAND PROCESSOR LINKAGE                           * 00316**6\n*.....................................................................* 00317**6\n         SPACE                                                          00318**6\nGETINFO  ENTERR                   R13 -> WORKAREA                       00319**6\nGETINFO  AMODE   24           NTL31\nGETINFO  RMODE   24           NTL31\n         SPLEVEL SET=1        NTL31                               NTL16\n*                                 R12 -> GETINFO ADDRESSABILITY         00320**6\n         XC    RETCODE,RETCODE                                          00321**6\n         EJECT                                                          00322**6\n*.....................................................................* 00323**6\n*        PARSE THE INPUT BUFFER                                       * 00324**6\n*.....................................................................* 00325**6\n         SPACE                                                          00326**6\n         LR    R11,R1             SAVE THE PARM POINTER                 00327**6\n*                                 R11 -> CPPL                           00328**6\nDOPARSE  KKPARSE                                                        00329**6\n*                                                                       00330**6\n*                                                                       00331**6\n         DROP  R11                                                      00332**6\nANALR    LTR   R15,R15            RC = 0? PARSE WENT OK?                00333**6\n         BNZ   PARSERR            NO. -> GO TO PARSE ERR                00334**6\n         L     R10,ANS            R10 -> IKJPARMD                       00335**6\n         USING IKJPARMD,R10                                             00336**6\n         EJECT                                                          00337**6\n         AIF   (&ACF314).$SKIP02                                  NTL14\n*.....................................................................* 00338**6\n*        FIND JCT                                                     * 00339**6\n*.....................................................................* 00340**6\n         SPACE 1                                                        00341**6\nJCT      EQU   R11           NEEDED BY $JCT MACRO FOR                   00342**6\n         AIF   (&SP3).$SKIP01                                     NTL14\nBUFDSECT EQU   *                 MAPPING OF THE                         00344**6\nBUFSTART EQU   *+X'58'                GLORIOUS J C T                    00345**6\n         AGO   .$SKP01E                                           INTEL 00346**6\n.$SKIP01 ANOP  ,                SP 1.3 JES2                       INTEL 00347**6\n         #ACFJES2    ,          ESTABLISH OFFSETS TO USE          INTEL 00348**6\n.$SKP01E ANOP  ,                                                  INTEL 00349**6\n         SPACE 1                                                        00350**6\nFINDJCT  $FINDCB ASCB=R2,JCT=R11   FIND THE JCT AND ASCB ADDRESS        00351**6\n         EJECT ,                                                  INTEL 00352**6\n         ST    R2,ADDRASCB         SAVE FOR POSSIBLE LATER USE          00353**6\n         USING JCTSTART,JCT        ESTABLIST ADDRESSABILITY TO JCT      00354**6\n         SPACE 1                                                  INTEL 00355**6\n         AIF   (NOT &SP3).$SKIP02                                 NTL14\n         ICM   R9,15,&ACF2JCT      TEST, GET ACF2 AREA OFFSET     INTEL 00357**6\n         LA    R9,0(JCT,R9)        CALCULATE ADDRESS              INTEL 00358**6\n         USING #ACFJCTX,R9         ADDRESSING                     INTEL 00359**6\n.$SKIP02 ANOP  ,                                                  NTL14\n         AIF   (NOT &ACF314).$SK1003                              NTL14\n         $FINDCB ASCB=R2                                          NTL15\n         ST    R2,ADDRASCB                                        NTL15\n         EJECT ,                                                  NTL15\n         USING ACCVT,R3                ADDRESS ACF CVT            INTEL\n         ACFGACVT R3,NONE=GETOUT      GET CB ADDRESSABILITY       INTEL\n         USING ACUCB,R4               ADDRESS ACF UCB             INTEL\n         ACFGUCB R4,NONE=GETOUT,INLINE=YES,SYS=AOS2 GET ACUCB ADDRESS\n         LR    R11,R15                                            NTL14\n         USING ACFASVT,R11                                        NTL14\n         USING LIDREC,R9               ADDRESS ACF LID            INTEL\n         ICM   R9,15,ACULRECP          GET ACF2 USER LID ADDRESS  INTEL\n         BZ    GETOUT                  PUNT IF NONE               INTEL\n         DROP  R3                     DROP ADDRESSABILITY         INTEL\n         DROP  R4                     DROP ADDRESSABILITY         INTEL\n         AGO   .$SK2002                                           NTL14\n.$SK1003 ANOP  ,                                                  INTEL 00360**6\n         CLC   JCTID,=CL4'JCT'     IS THIS THE REAL JCT?            NTL 00361**6\n         BE    BEGIN               YES.....GO FOR IT                NTL 00362**6\n         OI    RETCODE+2,X'02'     SET RC=512                       NTL 00363**6\n         B     GETOUT              AND SPLIT                        NTL 00364**6\n         EJECT                                                          00365**6\n.$SK2002 ANOP  ,                                                  NTL14\n*.....................................................................* 00366**6\n*        PROCESS THE PARMS                                            * 00367**6\n*.....................................................................* 00368**6\n         SPACE                                                          00369**6\nBEGIN    STUFFIT  LIDNAME,PGMRNAME,PGMRDD                               00370**6\n         AIF   (NOT &ACF314).$SK2003                              NTL14\n         STUFFIT  NTLROOMN,BINNUMB,BINDD                          NTL14\n         AGO   .$SK2004                                           NTL14\n.$SK2003 ANOP  ,                                                  NTL14\n         STUFFIT  JCTROOMN,BINNUMB,BINDD                                00371**6\n.$SK2004 ANOP  ,                                                  NTL14\n         STUFFIT  LIDPHONE,PHONE,PHONDD                                 00372**6\n         EJECT   ,                                                      00373**6\n         STUFFIT  LIDTDRMT,DEST,DESTDD                                  00374**6\n         STUFFIT  LIDTSUBC,JOBCLASS,JOBCDD                              00375**6\n         STUFFIT  LIDTSUBM,MSGCLASS,MSGCDD                              00376**6\n         EJECT   ,                                                      00377**6\n         STUFFIT  LIDTSOUT,SYSOUT,SYSODD                                00378**6\n         STUFFIT  NTLPROJ,PROJECT,PROJDD                                00379**6\n         STUFFIT  NTLSRNUM,SRNUM,SRNUDD                                 00380**6\n         EJECT   ,                                                      00381**6\n         AIF   (NOT &ACF314).$SK2005                              NTL14\n         STUFFIT  ASVJID,JOBNUMB,JOBNDD                           NTL14\n         AGO   .$SK2006                                           NTL14\n.$SK2005 ANOP  ,                                                  NTL14\n         STUFFIT  JCTJOBID,JOBNUMB,JOBNDD                               00382**6\n.$SK2006 ANOP  ,                                                  NTL14\n         BAL      R14,GETLINE#                                          00383**6\n         STUFFIT  LINEAREA,LINE,LINEDD                                  00384**6\n         STUFFIT  VLOGMODE,LOGMODE,LMODDD                           NTL 00385**6\n         EJECT   ,                                                      00386**6\n         STUFFITN TTYPE,TERMTYPE,TTYPDD                             NTL 00387**6\nNOLINE   DS       0H                                                    00388**6\n         TM       DAY+1,X'FF'      WAS DAY OF WEEK REQUESTED            00389**6\n         BZ       NODAY                                                 00390**6\n         BAL      R14,DATERTN                                           00391**6\n         STUFFIT  LEFTDAY,,DAYXDD                                       00392**6\nNODAY    DS       0H                                                    00393**6\n         EJECT                                                          00394**6\n         TM       JDATEV+1,X'FF'   WAS JULIAN DATE REQUESTED?           00395**6\n         BZ       NOJDATE                                               00396**6\n         BAL      R14,DATERTN                                           00397**6\n         STUFFIT  JDATE,,JDATDD                                         00398**6\nNOJDATE  DS       0H                                                    00399**6\n         SPACE                                                          00400**6\n         TM       GDATEV+1,X'FF'  WAS GREGORIAL DATE REQUESTED?         00401**6\n         BZ       NOGDATE                                               00402**6\n         BAL      R14,DATERTN                                           00403**6\n         STUFFIT  CDATE,,DATEDD                                         00404**6\nNOGDATE  DS       0H                                                    00405**6\n*                                                                       00406**6\n         EJECT                                                          00407**6\n*.....................................................................* 00408**6\n*        TERMINAL CHARACTERISTICS                                     * 00409**6\n*.....................................................................* 00410**6\n         SPACE                                                          00411**6\n         MVC      WHERAMI,=CL8'TSO'   INDICATE UNDER TSO            NTL 00412**6\n         L        R1,ADDRASCB         GET ASCB ADDRESS WE SAVED OFF NTL 00413**6\n         CLI      ASCBTSB-ASCB(R1),X'C0' IS THIS TONE4 LAND?        NTL 00414**6\n         BNE      NOTTONE4                                          NTL 00415**6\n         MVC      WHERAMI,=CL8'TONE4' THIS IS TONE                  NTL 00416**6\n         B        STUFFAMI                                          NTL 00417**6\nNOTTONE4 CLC      ASCBTSB-ASCB(,R1),=XL4'00' NO POINTER?            NTL 00418**6\n         BNE      STUFFAMI            SOME POINTER..MUST BE TSO     NTL 00419**6\n         MVC      WHERAMI,=CL8'BATCH' MUST BE BATCH....             NTL 00420**6\nSTUFFAMI STUFFIT  WHERAMI,ENVIRON,ENVDD  PUT ENVIRONMENT AWAY       NTL 00421**6\n         XC       PRMSZE(CLRITL),PRMSZE                             NTL 00422**6\n         GTSIZE   ,  GET CURRENT ROWS/COLS FOR TERMINAL             NTL 00423**6\n         STC      R0,CURROWS     SAVE CURRENT # LINES PER SCREEN    NTL 00424**6\n         STC      R1,CURCOLS     SAVE # CHARS/LINE                  NTL 00425**6\n         LA       R15,PRMSZE                                        NTL 00426**6\n         ST       R15,GTTERM                                        NTL 00427**6\n         LA       R15,ALTSZE                                        NTL 00428**6\n         ST       R15,GTTERM+4                                      NTL 00429**6\n         LA       R15,ATTRIB                                        NTL 00430**6\n         ST       R15,GTTERM+8                                      NTL 00431**6\n         MVI      GTTERM+8,X'80'                                    NTL 00432**6\n         GTTERM   MF=(E,GTTERM)                                     NTL 00433**6\n         STC      R15,GTTERMRC   SAVE OFF RETURN CODE               NTL 00434**6\n         EJECT    ,                                                 NTL 00435**6\n         STUFFITN CURROWS,ROWS,ROWSDD                               NTL 00436**6\n         STUFFITN CURCOLS,COLS,COLSDD                               NTL 00437**6\n         EJECT    ,                                                 NTL 00438**6\n*        OC       GTTERMRC,GTTERMRC   GTTERM WORK OK?               NTL 00439**6\n*        BNZ      GETOUT              NO...CANCEL                   NTL 00440**6\n         STUFFITN PRMROWS,PROWS,PROWSDD                             NTL 00441**6\n         STUFFITN PRMCOLS,PCOLS,PCOLSDD                             NTL 00442**6\n         EJECT    ,                                                 NTL 00443**6\n         STUFFITN ALTROWS,AROWS,AROWSDD                             NTL 00444**6\n         STUFFITN ALTCOLS,ACOLS,ACOLSDD                             NTL 00445**6\n         EJECT    ,                                                 NTL 00446**6\n         MVC      ATTRYORN,=CL4'NO'                                 NTL 00447**6\n         OC       ATTRIB+3(1),ATTRIB+3 CHECK OUT EXTENDED SYMBOLS   NTL 00448**6\n         BZ       STUFFATT                                          NTL 00449**6\n         MVC      ATTRYORN,=CL4'YES'  SET UP EXTENDED ATTRIBUTES    NTL 00450**6\nSTUFFATT STUFFIT  ATTRYORN,ATTR,ATTRDD                              NTL 00451**6\n         SPACE   2                                                      00452**6\n*.....................................................................* 00453**6\n*        EXIT                                                         * 00454**6\n*.....................................................................* 00455**6\n         SPACE                                                          00456**6\nGETOUT   L     R15,RETCODE                                              00457**6\n         LEAVER                   EXIT REENTRANT ROUTINE                00458**6\n         SPACE 2                                                        00459**6\n*                                                                       00460**6\n*       GETINFO SUBROUTINES HERE                                        00461**6\n*                                                                       00462**6\nPARSERR  EQU   *                                                        00463**6\n         OI    RETCODE+2,X'01'    RC=256                                00464**6\n         B     GETOUT                                                   00465**6\n*                                                                       00466**6\n         EJECT                                                          00467**6\n*.....................................................................* 00468**6\n*  SUBROUTINE LOCVAR:                                                 * 00469**6\n*  PURPOSE: LOCATE ADDRESS OF VARABLE IN CLIST TO POKE STUFF INTO.    * 00470**6\n*                                                                     * 00471**6\n*  ENTER WITH :                                                       * 00472**6\n*                                                                     * 00473**6\n*       (R7) = ADDR PARSE VARIABLE ENTRY (LABEL ON IKJIDENT FOR       * 00474**6\n*              SUBFIELD TO BE EXAMINED).                              * 00475**6\n*       (R6) = LENGTH OF VARIABLE TO EXAMINE                          * 00476**6\n*                                                                     * 00477**6\n*       BAL R14,LOCVAR                                                * 00478**6\n*                                                                     * 00479**6\n* ON RETURN:  (R1) = 0   NOT FOUND                                    * 00480**6\n*             (R1) \u00ac=0   (R1) = ADDR OF CLIST VARIABLE ELEMENT        * 00481**6\n*                                                                     * 00482**6\n*   REGISTERS USED:  R3,R4,R5,R6,R7,R8 (RESTORED)                     * 00483**6\n*                    R1                (NOT RESTORED)                 * 00484**6\n*.....................................................................* 00485**6\n         SPACE                                                          00486**6\nLOCVAR   STM   R3,R8,SAVEREGS                                           00487**6\n         L     R5,ECTADDR         R5->ECT                               00488**6\n         L     R5,4(,R5)          R5->IOSRL                             00489**6\n         L     R4,0(,R5)          R4->TOP OF STACK                      00490**6\nCKCLIST  TM    0(R4),X'08'        CLIST ELEMENT?                        00491**6\n         BO    GOTCL              YES->WE HAVE A CLIST                  00492**6\n         S     R4,=F'4'           R4=R4-4 (NEXT ELEMENT DOWN ON STACK)  00493**6\n         C     R4,4(,R5)          R4<BOTTOM OF STACK PTR?               00494**6\n         BNL   CKCLIST            NO ->STILL IN STACK; GO CHECK IT      00495**6\n         OI    RETCODE+3,X'80'    YES->SET RC=128                       00496**6\n         LA    R1,0               NO POINTER FOR THE WICKED             00497**6\n         LM    R3,R8,SAVEREGS     RESTORE REGISTERS                     00498**6\n         BR    R14                EXIT LOCVAR WITH ERROR                00499**6\n         SPACE 1                                                        00500**6\nGOTCL    DS    0H                 R7->VARIABLE NAME                     00501**6\n*                                 R6=VAR LENGTH FOR LENGTH COMPARE      00502**6\n         L     R5,0(,R4)          R5->LSD                               00503**6\n         L     R5,12(,R5)         R5->EXECDATA                          00504**6\n         L     R5,0(,R5)          R5->SNTAB                             00505**6\n         L     R4,8(,R5)          R4==USED TABLE LENGTH                 00506**6\n         LA    R4,0(R4,R5)        R4->END OF TABLE USED                 00507**6\n         LA    R3,12(,R5)         R3->FIRST SNTAB ENTRY                 00508**6\n         LR    R1,R6              R1=R6  VARIABLE NAME LENGTH           00509**6\n         BCTR  R1,R0              R1=R1-1 FOR EXECUTED COMPARE          00510**6\n         EJECT ,                                                        00511**6\nRLOOP    LH    R2,6(,R3)          R2=NAME LENTH                         00512**6\n         CR    R6,R2              SAME LENGTH?                          00513**6\n         BNE   LOOPCHK            NO -> CHECK DONE                      00514**6\n         EX    R1,EXCLC           COMPARE NAMES                         00515**6\n         BE    GOTIT                                                    00516**6\nLOOPCHK  LA    R3,8(R2,R3)        POINT TO NEXT ENTRY                   00517**6\n         CR    R3,R4              DONE?                                 00518**6\n         BL    RLOOP              NO->CONTINUE                          00519**6\n         SPACE 1                                                        00520**6\n         ICM   R5,15,0(R5)        R5-> EXTENSION TABLE ADDRESS    NTL15\n         BZ    RERR               NO-> GO SET ERROR               NTL15\n         L     R4,8(,R5)          R4-> USED TABLE LENGTH          NTL15\n         LA    R4,0(R4,R5)        R4-> END OF TABLE USED          NTL15\n         LA    R3,12(,R5)         R3-> FIRST SNTAB ENTRY          NTL15\n         B     RLOOP              CONTINUE WITH EXTENSION TBL     NTL15\n         SPACE 1                                                  NTL15\nRERR     LA    R1,0               SET NO FOUND AND SPLIT                00521**6\n         OI    RETCODE+3,X'40'    YES->SET RC=64                        00522**6\n         LM    R3,R8,SAVEREGS     RESTORE REGISTERS                     00523**6\n         BR    R14                EXIT LOCVAR WITH ERROR                00524**6\n         SPACE 1                                                        00525**6\nGOTIT    EQU   *                                                        00526**6\n         L     R1,0(,R3)          GET VALUE ADDR                        00527**6\n         LM    R3,R8,SAVEREGS     RESTORE REGISTERS                     00528**6\n         BR    R14                RETURN                                00529**6\n         SPACE 1                                                        00530**6\nEXCLC    CLC   0(0,R7),8(R3)      EXECUTED                              00531**6\n         EJECT                                                          00532**6\n         AIF   (NOT &TSOER3).$NTLR33                              NTLR3\n*...............................................................* NTLR3\n* IKJCT441 ROUTINE                                              * NTLR3\n* GET441 WILL UPDATE OR CREATE CLIST VARIABLE VALUES.  THIS IS  * NTLR3\n*        NEW WITH THE INSTALLATION OF TSOE R3.                  * NTLR3\n*...............................................................* NTLR3\nGET441   STM   R0,R8,SAVE441                                      NTLR3\n         ST    R14,SAVERET                                        NTLR3\n         ST    R7,NAMEPTR                                         NTLR3\n         ST    R6,NAMELEN                                         NTLR3\n         ST    R15,VALUEPTR                                       NTLR3\n         ST    R0,VALUELEN                                        NTLR3\n         L     R15,CVTPTR                                         NTLR3\n         L     R15,CVTTVT(,R15)                                   NTLR3\n         L     R15,TSVTVACC-TSVT(,R15)                            NTLR3\n         LTR   R15,R15                                            NTLR3\n         BNZ   CALL441                                            NTLR3\nLINK441  LINK  EP=IKJCT441,                                       NTLR3X\n               PARAM=(ECODE,                                      NTLR3X\n               NAMEPTR,                                           NTLR3X\n               NAMELEN,                                           NTLR3X\n               VALUEPTR,                                          NTLR3X\n               VALUELEN,                                          NTLR3X\n               TOKEN),                                            NTLR3X\n               VL=1                                               NTLR3\n         B     RET441                                             NTLR3\nCALL441  CALL  (15),                                              NTLR3X\n               (ECODE,                                            NTLR3X\n               NAMEPTR,                                           NTLR3X\n               NAMELEN,                                           NTLR3X\n               VALUEPTR,                                          NTLR3X\n               VALUELEN,                                          NTLR3X\n               TOKEN),                                            NTLR3X\n               VL                                                 NTLR3\nRET441   LTR   R15,R15                                            NTLR3\n         LTR   R15,R15                                            NTLR3\n         BZ    END441                                             NTLR3\n         ST    R15,RETCODE                                        NTLR3\nEND441   LM    R0,R8,SAVE441                                      NTLR3\n         L     R14,SAVERET                                        NTLR3\n         BR    14                                                 NTLR3\n         DS    0D                                                 NTLR3\nNAMELEN  DC    F'0'                                               NTLR3\nVALUELEN DC    F'0'                                               NTLR3\nNAMEPTR  DC    F'0'                                               NTLR3\nVALUEPTR DC    F'0'                                               NTLR3\nTOKEN    DC    F'0'                                               NTLR3\nECODE    DC    A(TSVEUPDT)                                        NTLR3\nSAVERET  DC    F'0'\nSAVE441  DC    9F'0'\n         EJECT                                                    NTLR3\n.$NTLR33 ANOP  ,                                                  NTLR3\n*.....................................................................* 00533**6\n* SUBROUTINE SETVAR:                                                  * 00534**6\n*                                                                     * 00535**6\n* PURPOSE:  MOVE STUFF FROM DESIRED FIELD INTO CLIST VARIABLE FIELD   * 00536**6\n*                                                                     * 00537**6\n* ON ENTRY (R1) = ADDR CLIST VAR POINTER                              * 00538**6\n*          (R15)= ADDRESS OF INPUT FIELD (THE MOVEE...)               * 00539**6\n*          (R0) = LENGTH OF INPUT FIELD (L'MOVEE......)               * 00540**6\n*                                                                     * 00541**6\n*   BAL  R14,SETVAR                                                   * 00542**6\n*                                                                     * 00543**6\n*   ON RETURN:                                                        * 00544**6\n*                                                                     * 00545**6\n*.....................................................................* 00546**6\n         SPACE                                                          00547**6\n*                                                                       00548**6\nSETVAR   DS    0H                 R1->VALUE TABLE ENTRY                 00549**6\n         STM   R2,R4,SAVEREGS                                           00550**6\n         ST    R14,SETVR14        SAVE RETURN ADDRESS             INTEL 00551**6\n         LR    R14,R0             LOAD LENGTH INTO WORK REGISTER  INTEL 00552**6\nROOMCHK  CH    R14,2(,R1)         ROOM FOR INPUT?                 INTEL 00553**6\n         BNH   SM                 YES->MOVE IT.                         00554**6\n         OI    RETCODE+3,X'20'    SET RC=32                             00555**6\n         LH    R14,2(,R1)         NO ->GET HIS LENGTH                   00556**6\nSM       BCTR  R14,0              R14=R14-1 = MACHINE LENGTH            00557**6\n         SPACE 1                                                        00558**6\n         TM    NOCOMPR+1,X'FF'    WAS NO COMPRESS WANTED?               00559**6\n         BNZ   SKIPCPRS           ..DONT DO COMPRESS                    00560**6\nDEBLANK  LA    R2,0(R15,R14)      POINT TO LAST CHARACTER TO MOVE       00561**6\n         CLI   0(R2),C' '         IS THIS ONE A BLANK                   00562**6\n         BNE   SKIPCPRS           NO..FINISHED WITH THIS ONE            00563**6\n         BCT   R14,DEBLANK        LOOP UNTIL DONE                       00564**6\nSKIPCPRS DS    0H                                                       00565**6\n         SPACE 1                                                        00566**6\n         CLI   0(R15),C' '        IS FIRST CHAR A BLANK?                00567**6\n         BE    SETNULL            YEP...SKIP MOVE AND SET LENG=0        00568**6\n         EX    R14,SMOVE          MOVE IT                               00569**6\n         LA    R14,1(,R14)        BUMP REAL COUNT                       00570**6\nUPDTCNT  STH   R14,0(,R1)         AND SAVE COUNT AWAY                   00571**6\n         LM    R2,R4,SAVEREGS                                           00572**6\n         LR    R0,R14             PASS BACK LENGTH USED           INTEL 00573**6\n         L     R14,SETVR14        RESTORE RETURN ADDRESS          INTEL 00574**6\n         BR    R14                                                      00575**6\n         SPACE 1                                                        00576**6\nSETNULL  SR    R14,R14                                                  00577**6\n         B     UPDTCNT                                                  00578**6\n         SPACE 1                                                        00579**6\nSMOVE    MVC   4(0,R1),0(R15)     EXECUTED                              00580**6\n         EJECT                                                          00581**6\n*.....................................................................* 00582**6\n* SUBROUTINE: GETLINE#                                                * 00583**6\n*                                                                     * 00584**6\n* PURPOSE: GET TCAM UCB ADDRESS OR VTAM TERMINAL ID FOR THIS ADDRESS  * 00585**6\n*          SPACE                                                      * 00586**6\n*                                                                     * 00587**6\n* ENTER WITH (ASCBADDR) CONTAINING THE ASCB ADDRESS                   * 00588**6\n*                                                                     * 00589**6\n*      BAL   R14,GETLINE#                                             * 00590**6\n*                                                                     * 00591**6\n* RETURNS WITH 'LINEAREA' FILLED IN                                   * 00592**6\n*                                                                     * 00593**6\n*.....................................................................* 00594**6\n         SPACE                                                          00595**6\nGETLINE# STM   R3,R8,SAVEREGS                                           00596**6\n         ST    R14,GETLR14          SAVE RETURN ADDRESS           INTEL 00597**6\n         MVC   VLOGMODE,BLANKS                                      NTL 00598**6\n         XC    TTYPE,TTYPE                                          NTL 00599**6\n         L     R7,ADDRASCB        RETRIEVE ASCB ADDRESS                 00600**6\n         USING ASCB,R7                                                  00601**6\n         AIF   (NOT &TONE4).$SKP10                                TONE4 00602**6\n*                                                                 TONE4 00603**6\n*     THE FOLLOWING WILL CHECK ASCBTSB IF MARKED BY TONE 4.       TONE4 00604**6\n*     IF ITS A TONE ADDRESS SPACE THEN IT WILL GET THE USER PROC  TONE4 00605**6\n*     FROM THE TIOT AND DROP ADDRESS TO ASCB CSCB, LOCATE THE     TONE4 00606**6\n*     THE TONE CREATED ASCB CSCB FOR THIS USER AND ENSURE         TONE4 00607**6\n*     ADDRESSABILITY. W WILLIAMS - APRIL 82 - INTEL CORP          TONE4 00608**6\n*                                                                 TONE4 00609**6\n         CLI   ASCBTSB,X'C0'      IS IT A TONE ADDRESS SPACE      TONE4 00610**6\n         BNE   NOTONE             NO                              TONE4 00611**6\n         $FINDCB TCB=R5           GET CURRENT TCB                 TONE4 00612**6\n         CLI   TCBUSER(R5),C'T'   MARKED BY ATTACH                TONE4 00613**6\n         BNE   NOTONE             NO....                          TONE4 00614**6\n         L     R5,TCBJSTCB(,R5)   GET JOBSTEP TCB                 TONE4 00615**6\n         CLI   TCBUSER(R5),C'T'   MARKED BY ATTACH                TONE4 00616**6\n         BNE   NOTONE             NO....                          TONE4 00617**6\n         ICM   R5,7,TCBUSER+1(R5) GET TCBUSER                     TONE4 00618**6\n         BNZ   ITSTONE            WE GOT SOMETHING....            TONE4 00619**6\n         B     NOTONE             NO ONE HOME...                  TONE4 00620**6\n         SPACE 2                                                  TONE4 00621**6\n         USING ISCCHAIN,R5        ADDRESS CHAINING BLOCK          TONE4 00622**6\nITSTONE  CLC   ISCTSKID,=CL8'TONE'      IS THIS TPCDATA           TONE4 00623**6\n         BNE   NOTONE                   NO....                    TONE4 00624**6\n         CLC   ISCBLKID,=CL8'TPCDATA'   IS THIS BLOCK TPCDATA     TONE4 00625**6\n         BNE   NOTONE                   NO....                    TONE4 00626**6\n         ICM   R5,7,ISCBLOCK      GET TPCDATA ADDRESS             TONE4 00627**6\n         BZ    NOTONE             NO ONE HOME....                 TONE4 00628**6\n         SPACE 1                                                    NTL 00629**6\n         USING TPCDATA,R5         ADDRESS TPCDATA                 TONE4 00630**6\n         L     R8,TPCASCB         GET TONES ASCB FOR OUR TONE SESSTONE4 00631**6\n         MVC   LINEAREA(8),TPCLTERM  OK... GET LINE FROM TONE     TONE4 00632**6\n         B     LINEFIN                                            TONE4 00633**6\n         SPACE 1                                                  TONE4 00634**6\nTCBUSER  EQU   X'0A8',4          TCBUSER FIELD FROM TCB           TONE4 00635**6\nTCBJSTCB EQU   X'07C',4          TCBJSTCB FIELD FROM TCB          TONE4 00636**6\n         SPACE 1                                                  TONE4 00637**6\nNOTONE   DS    0H                                                 TONE4 00638**6\n.$SKP10  ANOP  ,                                                  TONE4 00639**6\n         L     R7,ASCBTSB         GET ADDRESS OF TSB FOR LINE ADDR      00640**6\n         USING TSB,R7             USE THE ADDRESS                       00641**6\n*                                                                   NTL 00642**6\n* JUST FOR CHUCKLES....SEE IT THIS IS BATCH                         NTL 00643**6\n*                                                                   NTL 00644**6\n         LTR   R7,R7              ANY TSB ADDRESS THERE?            NTL 00645**6\n         BNZ   DOSTAX             YES..CONTINUE                     NTL 00646**6\n         MVC   LINEAREA(8),BLANKS NO LINE HERE                      NTL 00647**6\n         B     LINEFIN                                              NTL 00648**6\n         SPACE 1                                                    NTL 00649**6\nDOSTAX   STAX  MF=(E,DEFER)       HOLD ALL CALLS PLEASE....             00650**6\n         MODESET MF=(E,SUPER)                                           00651**6\n         ST    1,OLDKEY                                                 00652**6\n*\n         TM    TSBFLG5,TSBVTAM    SEE IF THIS IS A TSO/VTAM TSB         00653**6\n         BO    ITSVTAM            YES....GO GET TSB EXTENSION           00654**6\nITSTCAM  UNPK  TCAMUCB(5),TSBLINE(3) UNPACK THE TSO LINE ADDRESS        00655**6\n         NC    TCAMUCB,HEXMASK                                          00656**6\n         TR    TCAMUCB,HEXTAB                                           00657**6\n         MVC   LINEAREA(3),=C'UCB'                                      00658**6\n         MVI   TCAMUCB,C'='       FIX IT UP PRETTY                      00659**6\n         MVI   TCAMUCB+4,C' '                                           00660**6\n         B     FINSUPR                                                  00661**6\n         SPACE 1                                                        00662**6\nITSVTAM  L     R8,TSBEXTNT         GET ADDRESS OF TSB EXTENSION         00663**6\n         USING TSBX,R8             ESTABLISH ADDRESSABILITY TO TSBX     00664**6\n         TM    TSBXFLG1,TSBXWREC   SEE IF TERMINAL AWAITING RECON       00665**6\n         BNO   GETSYM              NO.....GO GET SYMBOLIC NAME          00666**6\n         MVC   LINEAREA(8),DISCON  MOVE IN DISCON'D                     00667**6\n         B     FINSUPR             GO MODESET AND RESTORE OLD KEY       00668**6\nGETSYM   MVC   LINEAREA(8),TSBTRMID MOVE IN TERMINAL SYMBOLIC NAME      00669**6\n         MVC   VLOGMODE,TSBXLMOD   SAVE LOGMODE NAME                NTL 00670**6\n         MVC   TTYPE,TSBXTMTP      SAVE TERMINAL TYPE               NTL 00671**6\n*                                                                       00672**6\n         DROP  R8                                                       00673**6\nFINSUPR  DS    0H                                                       00674**6\n         L     R1,OLDKEY                                                00675**6\n         MODESET MF=(E,PROBLEM)                                         00676**6\n         STAX  MF=(E,RESUME)      OK TO HAVE ATTENTIONS NOW...          00677**6\n*                                                                       00678**6\n         DROP  R7                                                       00679**6\nLINEFIN  LM    R3,R8,SAVEREGS                                           00680**6\n         L     R14,GETLR14          RESTORE RETURN ADDRESS        INTEL 00681**6\n         BR    R14                                                      00682**6\n         EJECT ,                                                        00683**6\n*********************************************************************** 00684**6\n*                                                                       00685**6\n* FORMAT DATE TIME  HEADING FROM SMF30TME/SMF30DTE                      00686**6\n*   R0=TIME IN 100THS OF SECOND SINCE MIDNIGHT                          00687**6\n*   R1=DATE IN 00YYDDDS FORMAT                                          00688**6\n*                                                                       00689**6\n* RETURNS WITH CDAYN(LEN) = DDMONYY (DDD) DAY HH:MM:SS.TH               00690**6\n*                E.G.       07JUL80 (189) MON 13:45:24.56               00691**6\n*                           123456789.123456789.123456789               00692**6\n*                                                                       00693**6\n*********************************************************************** 00694**6\nDATERTN  CLI   JDATE,C'0'   HAVE WE BEEN HERE BEFORE                    00695**6\n         BHR   R14           ALREADY DONE THIS STUFF...KISS OFF         00696**6\n         STM   R14,R3,SAVEREGS                                          00697**6\n         MVC   MONMSK(MVCLEN),XMONMSK  INIT DATE/TIME WORK AREA         00698**6\n         TIME  BIN ,                                                    00699**6\n         ST    R1,DATE                 SAVE DATE FOR LATER              00700**6\n         CVD   R0,WRKD                GET TIME IN DEC 100TH/SEC         00701**6\n         DP    WRKD(8),DEC6000(3) /6000 : REM IS SS.TH                  00702**6\n         DP    WRKD(5),DEC60(2)       /60   : REM IS MM                 00703**6\n         MVC   EDITWORK(L'HHMASK),HHMASK   SETUP MULT EDIT MASK         00704**6\n         ED    EDITWORK(L'HHMASK),WRKD EDIT HH,MM,SS                    00705**6\nFINTIME  MVC   CHH(2),EDITWORK+4      MOVE IN HOURS                     00706**6\n         MVC   CMM(2),EDITWORK+8      MOVE IN MM                        00707**6\n         MVC   CSS(5),EDITWORK+12     MOVE IN SS.TH                     00708**6\n*                                                                       00709**6\n***FORMAT THE DATE INTO THE OUTPUT MSG                                  00710**6\n*                                                                       00711**6\n         MVC   WORKWORD(4),DATE        MOVE DATE TO WORK AREA.          00712**6\n         MVO   WORKWORD+1(3),WORKWORD(2)   MAKE 00YYDDDS INTO 00000YYS. 00713**6\n         UNPK  CYR(2),WORKWORD+2(2)    FORMAT YEAR.                     00714**6\n         XC    WRKD,WRKD                                                00715**6\n         MVC   WRKD+4(4),WORKWORD      CNVT YEAR TO BIN                 00716**6\n         CVB   R0,WRKD                                                  00717**6\n         ST    R0,BINYEAR              AND SAVE                         00718**6\n         TM    BINYEAR+3,X'03'         LEAP YEAR?                       00719**6\n         BNZ   MON1                    NO.                              00720**6\n         MVI   MONMSK+10,29            YES, CORRECT                     00721**6\nMON1     XC    WRKD,WRKD               CNVT DAYS TO BIN                 00722**6\n         MVC   WRKD+6(2),DATE+2                                         00723**6\n         CVB   R3,WRKD                                                  00724**6\n         ST    R3,BINDAYS              SAVE FOR LATER                   00725**6\n         XR    R1,R1                                                    00726**6\n         LA    R15,11                                                   00727**6\nMON2     IC    R1,MONMSK(R15)          COMPUTE MON & DAY                00728**6\n         SR    R3,R1                                                    00729**6\n         BNP   MONOVR                                                   00730**6\n         BCT   R15,MON2                                                 00731**6\n         B     *+6                                                      00732**6\n         EJECT ,                                                        00733**6\nMONOVR   AR    R3,R1                   CORRECT OVERDRAW                 00734**6\n         CVD   R3,WRKD                 FORMAT DAY                       00735**6\n         UNPK  CDAYN(2),WRKD+6(2)                                       00736**6\n         OI    CDAYN+1,X'F0'           FIX UP SIGN                      00737**6\n         MH    R15,=H'3'               GET TABLE OFFSET                 00738**6\n         LA    R15,MONTAB(R15)         AND POINT AT MONTH               00739**6\n         MVC   CMON(3),0(R15)          MOVE IT TO THE MSG               00740**6\n***DAY OF WEEK                                                          00741**6\n         L     R15,BINYEAR                                              00742**6\n         SH    R15,=H'69'                                               00743**6\n         BNP   OUTT                    MUST BE GREATER OR BAD           00744**6\n         XR    R14,R14                 CLEAR DAY REG                    00745**6\n         D     R14,=F'4'                                                00746**6\n         MH    R15,=H'5'                                                00747**6\n         AR    R14,R15                                                  00748**6\n         A     R14,BINDAYS                                              00749**6\n         SRDA  R14,32                                                   00750**6\n         D     R14,=F'7'               MODULO 7 FOR WEEK                00751**6\n         MH    R14,=H'09'                                               00752**6\n         LR    R0,R14                  SAVE THIS FOR LATER              00753**6\n         LA    R14,DAYTAB(R14)         POINT AT TODAY                   00754**6\n         MVC   CDAY(09),0(R14)         INSERT IN MSG                    00755**6\n         LR    R14,R0                                                   00756**6\n         LA    R14,DAYTAB1(R14)        POINT AT TODAY-LEFT JUSTIFIED    00757**6\n         MVC   LEFTDAY,0(R14)          INSERT IN MSG                    00758**6\n***                                                                     00759**6\nMOVEJD   MVC   JDATE-1(7),=X'4020204B202020'                            00760**6\n         ED    JDATE-1(7),DATE+1                                        00761**6\n         MVI   JDATE-1,C'('          RESTORE NICE FORMAT....            00762**6\n         MVC   CJDAY(3),JDATE+3         MOVE DAY TO MESSAGE             00763**6\n*                                                                       00764**6\n*                                                                       00765**6\nDATEFIND LM    R14,R3,SAVEREGS                                          00766**6\n         BR    R14                     RETURN TO MAINLINE               00767**6\n*                                                                       00768**6\nOUTT     MVC   CDAY(9),=CL9'(UNKNOWN)'                                  00769**6\n         B     MOVEJD                                                   00770**6\n         EJECT ,                                                        00771**6\n*...................................................................NTL 00772**6\n*                                                                   NTL 00773**6\n* FITINUM SUBROUTINE - CONVERT BIN NUMBER TO NICE FORMAT            NTL 00774**6\n*                                                                   NTL 00775**6\n* ENTER WITH <R1>  = NUMBER IN BINARY                               NTL 00776**6\n*            BAL   R14,FITINUM                                      NTL 00777**6\n*                                                                   NTL 00778**6\n*                                                                   NTL 00779**6\n*       USES R1,R14,R15                                             NTL 00780**6\n*.................................................................. NTL 00781**6\nFITINUM  CVD   R1,WRKD        CONVERT TO PACKED DECIMAL             NTL 00782**6\nFITINUM1 MVC   EDITWORK(L'NORMAL),NORMAL INITIALIZE THE EDIT FORMAT NTL 00783**6\n         MVC   NUMBER,BLANKS  CLEAR OUT NUMBER                      NTL 00784**6\n         LA    R1,EDITWORK+SIGNORM IN CASE OF ZEROES                NTL 00785**6\n         EDMK  EDITWORK(L'NORMAL),WRKD+2 CONVERT TO EBCDIC          NTL 00786**6\n         ST    R14,FITNR14     SAVE RETURN ADDRESS                INTEL 00787**6\n         LA    R14,EDITWORK+L'NORMAL-1 A(END OF CONVERTED NUMBER)   NTL 00788**6\n         SLR   R14,R1         LENGTH OF THE CONVERTED NUMBER - 1    NTL 00789**6\n         EX    R14,MVNUMBER   PUT THE NUMBER IN THE MSG             NTL 00790**6\n         LA    R15,1(R14,R15) A(NEXT SPOT IN MSG)                   NTL 00791**6\n         L     R14,FITNR14    RESTORE RETURN ADDRESS              INTEL 00792**6\n         BR    R14            RETURN TO OUR CALLER                  NTL 00793**6\n         SPACE 3                                                    NTL 00794**6\nMVNUMBER MVC   NUMBER(0),0(R1) MOVE NUMBER TO 'NUMBER' AREA         NTL 00795**6\n         SPACE 2                                                    NTL 00796**6\nNORMAL   DC    X'402020202020202020202020' EDIT MASK                NTL 00797**6\nSIGNORM  EQU   11             OFFSET TO LAST DIGIT                  NTL 00798**6\n         EJECT ,                                                        00799**6\n*********************************************************************** 00800**6\n*                                                                       00801**6\n*       CONSTANTS FOR DATE ROUTINE USAGE                                00802**6\n*                                                                       00803**6\n*********************************************************************** 00804**6\n         SPACE ,                                                        00805**6\nHHMASK   DC    X'40202021202022212020222120204B2020'                    00806**6\nDEC60    DC    X'060C'                                                  00807**6\nDEC6000  DC    X'06000C'                                                00808**6\nDEC50    DC    X'050C'                                                  00809**6\n*********************************************************************** 00810**6\n* LEAVE FIELDS TOGETHER.. INITIALIZED BY ONE MVC WITH VALUES            00811**6\n*                                                                       00812**6\nXMONMSK  DC    AL1(31,30,31,30,31,31,30,31,30,31,28,31)        )        00813**6\n         DC    CL1' '                                          )        00814**6\n*                                                              )        00815**6\n*                 YY.DDD XXXXXXXXX, MON. DD, 19NN    L  T      )        00816**6\n*                0123456789.123456789.123456789.12   E  O      )        00817**6\n         DC    C' YY.DDD XXXXXXXXX, MON. DD, 19NN)'  A  G      )        00818**6\n         DC    CL3' ',C'  '                          E  E      )        00819**6\n         DC    CL2' ',C':'                           V  T      )        00820**6\n         DC    CL2' ',C':'                           E  H      )        00821**6\n         DC    CL5'SS.TH',C'  '                         E      )        00822**6\n*                                                       R      )        00823**6\nMVCLEN   EQU   *-XMONMSK                                                00824**6\n*                                                                       00825**6\n*********************************************************************** 00826**6\nDAYTAB   DC    CL09'  TUESDAY'                                          00827**6\n         DC    CL09'WEDNESDAY'                                          00828**6\n         DC    CL09' THURSDAY'                                          00829**6\n         DC    CL09'   FRIDAY'                                          00830**6\n         DC    CL09' SATURDAY'                                          00831**6\n         DC    CL09'   SUNDAY'                                          00832**6\n         DC    CL09'   MONDAY'                                          00833**6\nDAYTAB1  DC    CL09'TUESDAY'                                            00834**6\n         DC    CL09'WEDNESDAY'                                          00835**6\n         DC    CL09'THURSDAY'                                           00836**6\n         DC    CL09'FRIDAY'                                             00837**6\n         DC    CL09'SATURDAY'                                           00838**6\n         DC    CL09'SUNDAY'                                             00839**6\n         DC    CL09'MONDAY'                                             00840**6\nMONTAB   DC    C'DECNOVOCTSEPAUGJULJUNMAYAPRMARFEBJAN'                  00841**6\n         SPACE                                                          00842**6\n* OTHER  CONSTANTS                                                    * 00843**6\n         SPACE                                                          00844**6\nHEXMASK  DC    4X'0F'                                                   00845**6\nHEXTAB   DC    C'0123456789ABCDEF'                                      00846**6\nSTARTING DC    CL8'STARTING'                                            00847**6\nDISCON   DC    CL8'DISCON''D'                                           00848**6\nBLANKS   DC    CL24' '       A BLANK LINE......                     NTL 00849**6\n         PRINT OFF                                                      00850**6\n         DS    0F                                                       00851**6\nCODE     DC    X'ABCFEDAD'                                              00852**6\n         PRINT ON                                                       00853**6\n         EJECT                                                          00854**6\n*.....................................................................* 00855**6\n*        LIST FORMS OF MACROS                                         * 00856**6\n*.....................................................................* 00857**6\n         SPACE 2                                                        00858**6\n         DS    0F                                                       00859**6\nDEFER    STAX  DEFER=YES,MF=L            HOLD DEM ATTENTIONS...         00860**6\n         SPACE 2                                                        00861**6\nRESUME   STAX  DEFER=NO,MF=L             RESUME ATTENTION HANDLING..    00862**6\n         SPACE 2                                                        00863**6\nGTTERME  GTTERM ATTRIB=*-*,PRMSZE=*-*,ALTSZE=*-*,MF=L               NTL 00864**6\n         SPACE 2                                                    NTL 00865**6\nSUPER    MODESET KEY=ZERO,MF=L                                      NTL 00866**6\n         SPACE 2                                                    NTL 00867**6\nPROBLEM  MODESET KEY=NZERO,MF=L                                     NTL 00868**6\n         EJECT                                                          00869**6\n*.....................................................................* 00870**6\n*        LITERAL POOL                                                 * 00871**6\n*.....................................................................* 00872**6\n         SPACE                                                          00873**6\n         LTORG                                                          00874**6\n         EJECT                                                          00875**6\n*.....................................................................* 00876**6\n*        DYNAMIC STORAGE AREA -- GETMAINED                            * 00877**6\n*.....................................................................* 00878**6\n         SPACE                                                          00879**6\nWORKAREA DSECT                                                          00880**6\nSAVEAREA DS    18F                                                      00881**6\nSAVEREGS DS    16F                                                      00882**6\nRETCODE  DS    F                                                        00883**6\nSETVR14  DS    F        RETURN REGISTER FOR SETVAR                INTEL 00884**6\nGETLR14  DS    F        RETURN REGISTER FOR GETLINE#              INTEL 00885**6\nFITNR14  DS    F        RETURN REGISTER FOR FITINUM               INTEL 00886**6\n*                                                                       00887**6\nANS      DC    F'0'                                                     00888**6\nECB      DC    F'0'                                                     00889**6\nPPLA     DS    7F                                                       00890**6\nECTADDR  EQU   PPLA+4,4                                                 00891**6\n*                                                                       00892**6\nVLOGMODE DS    CL8                                                  NTL 00893**6\nTTYPE    DS    XL2                                                  NTL 00894**6\nLINEAREA DS    CL8,CL2 PLUS PADDING....                                 00895**6\nTCAMUCB  EQU   LINEAREA+3,8                                             00896**6\nADDRASCB DS    F                                                        00897**6\n*                                                                       00898**6\nOLDKEY   DC    F'0'                                                     00899**6\nLEFTDAY  DC    CL9' '                                                   00900**6\nPRMSZE   DS    0H                                                   NTL 00901**6\nPRMROWS  DS    AL1                                                  NTL 00902**6\nPRMCOLS  DS    AL1                                                  NTL 00903**6\nALTSZE   DS    0H                                                   NTL 00904**6\nALTROWS  DS    AL1                                                  NTL 00905**6\nALTCOLS  DS    AL1                                                  NTL 00906**6\nGTTERMRC DS    X                                                    NTL 00907**6\n         DS    X                                                    NTL 00908**6\nCURROWS  DS    AL1                                                  NTL 00909**6\nCURCOLS  DS    AL1                                                  NTL 00910**6\nATTRIB   DS    F                                                    NTL 00911**6\nCLRITL   EQU   *-PRMSZE   FOR XC CLEAR                              NTL 00912**6\nATTRYORN DS    CL4                                                  NTL 00913**6\nWHERAMI  DS    CL8                                                  NTL 00914**6\nGTTERM   GTTERM ATTRIB=*-*,PRMSZE=*-*,ALTSZE=*-*,MF=L               NTL 00915**6\nGTTERML  EQU   *-GTTERM                                             NTL 00916**6\nWRKD     DC    D'0'                                                     00917**6\nNUMBER   DS    CL8            FINAL PRODUCT OF CONVERT              NTL 00918**6\n         DS    CL8            FOR EXTRA STUFF                       NTL 00919**6\nBINYEAR  DC    F'0'                                                     00920**6\nBINDAYS  DC    F'0'                                                     00921**6\nDATE     DC    F'0'                                                     00922**6\nWORKWORD DC    2F'0'                                                    00923**6\nEDITWORK DC    12H'0'                                                   00924**6\n*********************************************************************** 00925**6\n* LEAVE FIELDS TOGETHER.. INITIALIZED BY ONE MVC WITH VALUES            00926**6\n*                                                                       00927**6\nMONMSK   DC    AL1(31,30,31,30,31,31,30,31,30,31,28,31)        )        00928**6\n         DC    CL1' '                                          )        00929**6\n*                                                              )        00930**6\n*                 YY.DDD XXXXXXXXX, MON. DD, 19NN    L         )        00931**6\n*                0123456789.123456789.123456789.12   E         )        00932**6\nCDATMSG  DC    C' YY.DDD XXXXXXXXX, MON. DD, 19NN)'  A         )        00933**6\nJDATE    EQU   CDATMSG+01,6                          V         )        00934**6\nCDAY     EQU   CDATMSG+08,9                          E         )        00935**6\nCMON     EQU   CDATMSG+19,3                                    )        00936**6\nCDAYN    EQU   CDATMSG+24,2                          T         )        00937**6\nCYR      EQU   CDATMSG+30,2                          O         )        00938**6\nCDATE    EQU   CDATMSG+19,13                                            00939**6\n*                                                    G         )        00940**6\nCJDAY    DC    CL3' ',C') '                          E         )        00941**6\nCHH      DC    CL2' ',C':'                           T         )        00942**6\nCMM      DC    CL2' ',C':'                           H         )        00943**6\nCSS      DC    CL5'SS.TH',C' )'                      E         )        00944**6\n*                                                    R         )        00945**6\n*********************************************************************** 00946**6\nLEN      EQU   *-CDATMSG                                                00947**6\nWORKLEN  EQU   *-WORKAREA                                               00948**6\n         SPACE                                                          00949**6\nGETINFO  CSECT                                                          00950**6\n         EJECT                                                          00951**6\n*.....................................................................* 00952**6\n*        PARSE PARAMETER LIST - KEYWORDS                              * 00953**6\n*.....................................................................* 00954**6\n         SPACE                                                          00955**6\n*                                                                       00956**6\n         PRINT     NOGEN                                                00957**6\nPCL      IKJPARM                                                        00958**6\nPGMRNAME IKJKEYWD                                                       00959**6\n         IKJNAME   'PGMRNAME',SUBFLD=PGMFLD                             00960**6\nBINNUMB  IKJKEYWD                                                       00961**6\n         IKJNAME   'BIN',SUBFLD=BINFLD                                  00962**6\nPHONE    IKJKEYWD                                                       00963**6\n         IKJNAME   'PHONE',SUBFLD=PHONFLD                               00964**6\nDEST     IKJKEYWD                                                       00965**6\n         IKJNAME   'DEST',SUBFLD=DESTFLD                                00966**6\nJOBCLASS IKJKEYWD                                                       00967**6\n         IKJNAME   'JOBCLASS',SUBFLD=JOBCFLD                            00968**6\nMSGCLASS IKJKEYWD                                                       00969**6\n         IKJNAME   'MSGCLASS',SUBFLD=MSGCFLD                            00970**6\nSYSOUT   IKJKEYWD                                                       00971**6\n         IKJNAME   'SYSOUT',SUBFLD=SYSOFLD                              00972**6\nPROJECT  IKJKEYWD                                                       00973**6\n         IKJNAME   'PROJECT',SUBFLD=PROJFLD                             00974**6\nSRNUM    IKJKEYWD                                                       00975**6\n         IKJNAME   'SRNUM',SUBFLD=SRNUFLD                               00976**6\nJOBNUMB  IKJKEYWD                                                       00977**6\n         IKJNAME   'JOBNUMB',SUBFLD=JOBNFLD                             00978**6\nLINE     IKJKEYWD                                                       00979**6\n         IKJNAME   'LINE',SUBFLD=LINEFLD                                00980**6\nDAY      IKJKEYWD                                                       00981**6\n         IKJNAME   'DAY',SUBFLD=DAYXFLD                                 00982**6\nJDATEV   IKJKEYWD                                                       00983**6\n         IKJNAME   'JDATE',SUBFLD=JDATFLD                               00984**6\nGDATEV   IKJKEYWD                                                       00985**6\n         IKJNAME   'DATE',SUBFLD=DATEFLD                                00986**6\nNOCOMPR  IKJKEYWD  ,                                                    00987**6\n         IKJNAME   'NOCOMPR'                                            00988**6\n         EJECT                                                          00989**6\nROWS     IKJKEYWD                                                       00990**6\n         IKJNAME   'ROWS',SUBFLD=ROWSFLD                                00991**6\nCOLS     IKJKEYWD                                                       00992**6\n         IKJNAME   'COLS',SUBFLD=COLSFLD                                00993**6\nPROWS    IKJKEYWD                                                       00994**6\n         IKJNAME   'PROWS',SUBFLD=PROWSFLD                              00995**6\nPCOLS    IKJKEYWD                                                       00996**6\n         IKJNAME   'PCOLS',SUBFLD=PCOLSFLD                              00997**6\nAROWS    IKJKEYWD                                                       00998**6\n         IKJNAME   'AROWS',SUBFLD=AROWSFLD                              00999**6\nACOLS    IKJKEYWD                                                       01000**6\n         IKJNAME   'ACOLS',SUBFLD=ACOLSFLD                              01001**6\nATTR     IKJKEYWD                                                       01002**6\n         IKJNAME   'ATTR',SUBFLD=ATTRFLD                                01003**6\nLOGMODE  IKJKEYWD                                                       01004**6\n         IKJNAME   'LOGMODE',SUBFLD=LMODFLD                             01005**6\nTERMTYPE IKJKEYWD                                                       01006**6\n         IKJNAME   'TERMTYPE',SUBFLD=TTYPFLD                            01007**6\nENVIRON  IKJKEYWD                                                       01008**6\n         IKJNAME   'ENVIRON',SUBFLD=ENVFLD                              01009**6\n         EJECT                                                          01010**6\n*.....................................................................* 01011**6\n*        PARSE PARAMETER LIST - SUBFIELDS                             * 01012**6\n*.....................................................................* 01013**6\n         SPACE                                                          01014**6\nPGMFLD   IKJSUBF                                                        01015**6\nPGMRDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01016**6\nBINFLD   IKJSUBF                                                        01017**6\nBINDD    IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01018**6\nPHONFLD  IKJSUBF                                                        01019**6\nPHONDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01020**6\nDESTFLD  IKJSUBF                                                        01021**6\nDESTDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01022**6\nJOBCFLD  IKJSUBF                                                        01023**6\nJOBCDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01024**6\nMSGCFLD  IKJSUBF                                                        01025**6\nMSGCDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01026**6\nSYSOFLD  IKJSUBF                                                        01027**6\nSYSODD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01028**6\nPROJFLD  IKJSUBF                                                        01029**6\nPROJDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01030**6\nSRNUFLD  IKJSUBF                                                        01031**6\nSRNUDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01032**6\nJOBNFLD  IKJSUBF                                                        01033**6\nJOBNDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01034**6\nLINEFLD  IKJSUBF                                                        01035**6\nLINEDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01036**6\nDAYXFLD  IKJSUBF                                                        01037**6\nDAYXDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01038**6\nJDATFLD  IKJSUBF                                                        01039**6\nJDATDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01040**6\nDATEFLD  IKJSUBF                                                        01041**6\nDATEDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01042**6\n          EJECT   ,                                                 NTL 01043**6\nROWSFLD  IKJSUBF                                                        01044**6\nROWSDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01045**6\nCOLSFLD  IKJSUBF                                                        01046**6\nCOLSDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01047**6\nPROWSFLD IKJSUBF                                                        01048**6\nPROWSDD  IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01049**6\nPCOLSFLD IKJSUBF                                                        01050**6\nPCOLSDD  IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01051**6\nAROWSFLD IKJSUBF                                                        01052**6\nAROWSDD  IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01053**6\nACOLSFLD IKJSUBF                                                        01054**6\nACOLSDD  IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01055**6\nATTRFLD  IKJSUBF                                                        01056**6\nATTRDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01057**6\nLMODFLD  IKJSUBF                                                        01058**6\nLMODDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01059**6\nTTYPFLD  IKJSUBF                                                        01060**6\nTTYPDD   IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01061**6\nENVFLD   IKJSUBF                                                        01062**6\nENVDD    IKJIDENT 'CLIST VARIABLE',PROMPT='CLIST VARIABLE',CHAR         01063**6\n         IKJENDP                                                        01064**6\n         PRINT     GEN                                                  01065**6\n         EJECT                                                          01066**6\n         AIF   (&ACF314).$$SKP9B                                  NTL14\n*.....................................................................* 01067**6\n*        JCT MAPPING MACRO                                            * 01068**6\n*.....................................................................* 01069**6\n         SPACE                                                          01070**6\n         SPACE 2                                                  INTEL 01071**6\n         AIF   (NOT &SP3).$$SKP9                                  NTL14\nTSO051   CSECT   ,                                                INTEL 01073**6\n         $BUFFER   ,                                              INTEL 01074**6\n         #ACFJCTX  ,       ACF2 3.1.3                             INTEL 01075**6\nTSO051   CSECT   ,                                                INTEL 01076**6\n         AGO   .$$SKP9A                                           INTEL 01077**6\n.$$SKP9  ANOP  ,                                                  INTEL 01078**6\n.$$SKP9A ANOP  ,                                                  INTEL 01079**6\n         $JCT  DOC=YES                                                  01080**6\n         SPACE 2                                                        01081**6\n         EJECT                                                          01088**6\n.$$SKP9B ANOP  ,                                                  NTL14\n*.....................................................................* 01089**6\n*       MAPPING MACROS                                                * 01090**6\n*.....................................................................* 01091**6\n         SPACE                                                          01092**6\n         PRINT NOGEN                                              INTEL 01093**6\n         IHAASCB                                                        01094**6\n         IKJTSB   LIST=YES,EXT=YES                                      01095**6\n         AIF   (NOT &TONE4).$SKP99                                TONE4 01096**6\n         TPCDATA  ,                                               TONE4 01097**6\n.$SKP99  ANOP  ,                                                  TONE4 01098**6\n         AIF   (NOT &ACF314).$SK1004                              INTEL 01072**6\n         PRINT NOGEN                                              INTEL 01093**6\n         IHAPSA                                                   INTEL\n         ACFASVT                                                  INTEL\n         ACCVT                                                    INTEL\n         ACUCB                                                    INTEL\n         PRINT     GEN                                            INTEL 01065**6\n         LIDREC                                                   INTEL\n.$SK1004 ANOP  ,                                                  TONE4 01098**6\n*.....................................................................* 01082**6\n*        OVERLAY DEFINITIONS FOR JOB ACCOUNT NUMBER                   * 01083**6\n*.....................................................................* 01084**6\n         SPACE                                                          01085**6\nNTLPROJ  EQU   LIDACCT,4                                                01086**6\nNTLSRNUM EQU   LIDACCT+4,4                                              01087**6\nNTLROOMN EQU   LIDACCT+9,4                                        NTL14\n         AIF   (NOT &TSOER3).$NTLR34                              NTLR3\nCVTPRT   EQU   16                                                 NTLR3\nCVTTVT   EQU   X'9C'                                              NTLR3\n         IKJTSVT                                                  NTLR3\n.$NTLR34 ANOP  ,                                                  NTLR3\n         END ,                                                          01099**6\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT011/FILE011.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT011", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}