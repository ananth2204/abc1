{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012926000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE842.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE842.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x0b'", "DS1TRBAL": "b'h '"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05\\xd1\\x00\\x02\\x05\\xd1\\x00\\x06\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04R\\x00)\\x01\\x11\\x07\\x9f\\x01\\x11\\x07\\x9f!U\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf2@@@'", "ispf": {"version": "04.82", "flags": 0, "createdate": "2011-03-20T00:00:00", "modifydate": "2011-03-20T21:55:29", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-482"}, "text": "REGULAR CBT TAPE - VERSION 482    FILE:  842\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT482.FILE842\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 13 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,403 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   03/20/11    21:55:29    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTES": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x07\\x9f\\x01\\x11\\x07\\x9f!I\\x00j\\x00j\\x00\\x00\\xd9\\xd4\\xc9\\xc8\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-20T00:00:00", "modifydate": "2011-03-20T21:49:00", "lines": 106, "newlines": 106, "modlines": 0, "user": "RMIHAY"}, "text": "I like to have some backup copies of important datasets at DR and\nalso just to have some copies off the system.  I really like the Xmit\nManager utility by Neal Johnston-Ward to view or copy individual\nmembers as required on a pc.  So I wrote this rather simple utility\nto use the transmit (XMIT) facility of TSO to backup up PDS, PDSE,\nand sequential datasets by HLQs.  In order to accomodate Xmit\nManager's not being able to see all members of a PDSE, the utility\ncopies the PDSE to a PDS with the same dataset attributes. (A caveat\nhere is the inability to copy some PDSE load libraries to a PDS, but\nyou probably don't need to view them anyways. If you really want or\nneed a backup copy, you will need to manually create the XMIT\ndataset. If you follow the naming scheme it will be ftp'ed along with\nthe other datasets.)  In addition the tool copies VB datasets to FB\nso you can view them in usable format with Xmit Manager.  It also\ncopies sequential datasets to a common name format, for the ease of\nFTPing.\n\n************\n** UPDATE **\n************\n\nAdded Rexx to perform foreground dataset search and put results into an\nedit panel. This will allow you to delete any datasets from the\nselection that you do not really want. Instructions for use of\nSELCTDSN are :\n\n/****************************************************************/\n/*                   Select Dataset Display                     */\n/*  displays dataset names and basic attributes in edit panel   */\n/*  Usage -                                                     */\n/*  SELCTDSN base-hlq(s) number-additional-levels only-flag     */\n/*  Examples :                                                  */\n/*  1) SELCTDSN sys1.abc                                        */\n/*  display all datasets that start with \"SYS1.ABC.\"            */\n/*  2) SELCTDSN sys1.a* 2                                       */\n/*  display all datasets that start with \"SYS1.A*\" and up to    */\n/*  two additonal levels                                        */\n/*  3) SELCTDSN sys1.a* 2 Y                                     */\n/*  display all datasets that start with \"SYS1.A*\" and with     */\n/*  only two additional levels                                  */\n/*  NOTE-  base-hlq(s) can contain up to 5 levels               */\n/*         wild card character \"*\" can be used                  */\n/*         additional-levels must be blank or 0 through 5       */\n/****************************************************************/\n\n*********************************************************************\nInstallation and usage:\n*********************************************************************\n\nCopy XMITALL, DSLISTB, SELCTDSN, and LMCOPY to a REXX EXEC dataset of\nyour choice and change the dataset name on the SYSEXEC DDs in XMITJOBs\nand XMITALL or they can be left in the current dataset.\n\nIn XMITJOB(s) , of course change the jobcard to your site's\nspecifications and change all occurances of \"IBMUSER\" to your userid.\nChange \"_HLQ_\" has needed.  Instructions for dataset selection are\nfound as comments in XMITJOB1.  Check the \"SYS1.ISPF\" dataset name to\ninsure they match your installations ISPF datasets.  If you have copied\nthe rexx execs to another dataset change the SYSEXEC dsname.\n\nIn XMITALL change all \"JESNODE\" to your JES node name.  Also change\nthe code that builds the job cards and again here change all\noccurances of \"IBMUSER\" to your userid. Change the \"SYS1.ISPF\" dataset\nnames as needed.  If you have copied the rexx execs to another dataset\nchange the SYSEXEC dsname.\n\nNow it's your choice either execute XMITJOB1 for a complete one step\nbatch run or execute SELCTDSN REXX in ISPF and then execute XMITJOB2.\n\nAfter running either one the the XMITJOBs, three datasets are created\nthat will needed to be submitted to create the datasets for FTPing.\nThey are userid.XMITE.JCL, userid.XMITN.JCL and userid.XMITS.JCL.  If\nyou used XMITJOB1, you may want to review the jobs and remove any\nsteps and commands for datasets that you do not wish to copy to your\npc.  A fourth dataset, userid.XMITC.JCL, is an IDCAMS delete of all the\ntemporary files and the XMIT output files.\n\nThe OPEN statement will need to be changed to your host name or ip\naddress in FTPSCRPT.  Change all occurances of \"IBMUSER\" to your tso\nuserid and \"password\" to your password in FTPSCRPT and RENALL.\n\nFor the simplist method to FTP the XMIT files to your pc.  Copy\nFTPSCRPT and RENALL to the directory/folder on you pc where you want\nthe FTPed datasets. Rename RENALL to RENALL.bat.\n\nAfter the first three jobs have completed successfully, open a DOS\nwindow and and change directory (CD) to the directory you copied\nFTPSCRPT and RENALL.  You can then issue the following command:\n\nftp -s:FTPSCRPT\n\nThis will start FTP and run the script file to download the files.\nAfter the downloads are completed, issue the command:\n\nRENALL\n\nThis will remove the quotes from the file names and change the LLQ on\nthe sequential datasets to \"txt\" to ease the viewing/editing on the pc.\n\n*********************************************************************\n\nAny problems, questions, or advice contact me at:\n\nRoger Mihay\nrogermihay@comcast.net or\nrmihay@gmail.com\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE01": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x02\\x01\\x11\\x07\\x9f\\x01\\x11\\x07\\x9f!Q\\x00\\x11\\x00\\x11\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-20T00:00:00", "modifydate": "2011-03-20T21:51:02", "lines": 17, "newlines": 17, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Update to file 842\nFrom:     \"Roger Mihay\" <rmihay@gmail.com>\nDate:     Fri, 18 Mar 2011 10:19:00 -0700\nTo:       <sbgolob@cbttape.org>\n\nHi Sam,\n\nHope all is well with you and your family.\n\nAttached is an updated version of file 842.  I have added the\ncapacity to edit (in ISPF) the selection list to remove any\ndatasets that one may not want to be processed.  If you have any\nquestions please don't hesitate to contact me.\n\nRegards,\nRoger\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE842": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04R\\x00 \\x01\\x11\\x07\\x9f\\x01\\x11\\x07\\x9f!U\\x00\\x14\\x00\\x14\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf2@@@'", "ispf": {"version": "04.82", "flags": 0, "createdate": "2011-03-20T00:00:00", "modifydate": "2011-03-20T21:55:20", "lines": 20, "newlines": 20, "modlines": 0, "user": "CBT-482"}, "text": "//***FILE 842 is from Roger Mihay and contains a way to put a       *   FILE 842\n//*           large number of pds'es or sequential files into TSO   *   FILE 842\n//*           XMIT format and download them to a PC for viewing     *   FILE 842\n//*           with XMIT manager or some similar tool on the PC.     *   FILE 842\n//*                                                                 *   FILE 842\n//*           The bulk processing of the pds'es or sequential       *   FILE 842\n//*           files is done via giving them a similar dataset       *   FILE 842\n//*           prefix.  Or if the datasets already had the same      *   FILE 842\n//*           prefix, you can unload them together.                 *   FILE 842\n//*                                                                 *   FILE 842\n//*     Update:  03/20/2011                                         *   FILE 842\n//*                                                                 *   FILE 842\n//*     Attached is an updated version of file 842.  I have         *   FILE 842\n//*     added the capacity to edit (in ISPF) the selection list     *   FILE 842\n//*     to remove any datasets that one may not want to be          *   FILE 842\n//*     processed.                                                  *   FILE 842\n//*                                                                 *   FILE 842\n//*           email:  rogermihay@comcast.net                        *   FILE 842\n//*                   rmihay@gmail.com                              *   FILE 842\n//*                                                                 *   FILE 842\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DSLISTB": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x105_\\x01\\x105_\\x07V\\x01\\t\\x01\\t\\x00\\x00\\xd9\\xd4\\xc9\\xc8\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-12-21T00:00:00", "modifydate": "2010-12-21T07:56:00", "lines": 265, "newlines": 265, "modlines": 0, "user": "RMIHAY"}, "text": "/*   REXX       */\nADDRESS ISPEXEC\n\"CONTROL ERRORS RETURN\"\nPARSE ARG HLQ PLUSL ONLY\n\"LMDINIT LISTID(\"LSTID\") LEVEL(\"HLQ\")\"\nIF RC <> 0 THEN DO\n  SAY 'LMDINIT ERROR, RC='RC\n  ZISPFRC = RC\n  ADDRESS ISPEXEC \"VPUT (ZISPFRC) SHARED\"\n  EXIT ZISPFRC\nEND\nSEP = '.'\nDSNAME=' '\n/*******************************************************************/\n/**    START OF MAINLINE                                          **/\n/*******************************************************************/\nDO WHILE (RC = 0)\n  \"LMDLIST LISTID(\"LSTID\") OPTION(LIST) DATASET(DSNAME) STATS(YES)\"\n  SELECT\n    WHEN RC = 0 THEN DO\n      TNAME = DSNAME\n      PARSE VAR TNAME LL (SEP) L2 (SEP) L3 (SEP) L4 (SEP) L5 (SEP),\n                      L6 (SEP) L7 (SEP) REST\n      PARSE VAR HLQ HL (SEP) H2 (SEP) H3 (SEP) H4 (SEP) H5 (SEP),\n                    H6 (SEP) ENDH\n      HNAME = TRANSLATE(HLQ,' ','.')\n      HLCNT = WORDS(HNAME)\n      IF HLCNT > 5 & PLUSL <> ' ' THEN DO\n        SAY 'BASE LEVEL GREATER THAN 5 AND EXTRA LEVELS REQUESTED'\n        ZISPFRC = 8\n        ADDRESS ISPEXEC \"VPUT (ZISPFRC) SHARED\"\n        EXIT ZISPFRC\n      END\n      IF PLUSL <> '' THEN DO\n        SELECT\n          WHEN PLUSL = 0 THEN\n            CALL LEVEL0\n          WHEN PLUSL = 1 THEN\n            CALL LEVEL1\n          WHEN PLUSL = 2 THEN\n            CALL LEVEL2\n          WHEN PLUSL = 3 THEN\n            CALL LEVEL3\n          WHEN PLUSL = 4 THEN\n            CALL LEVEL4\n          WHEN PLUSL = 5 THEN\n            CALL LEVEL5\n          OTHERWISE DO\n            SAY 'REQUESTED EXTRA LEVEL PARM MUST BE 0 - 5'\n            ZISPFRC = 8\n            ADDRESS ISPEXEC \"VPUT (ZISPFRC) SHARED\"\n            EXIT ZISPFRC\n          END\n        END\n      END\n      ELSE\n        CALL QUEUEIT\n    END\n    WHEN RC = 8 THEN DO\n      LEAVE\n    END\n    OTHERWISE DO\n      SAY 'LMDLIST LIST ERROR, RC='RC\n      ZISPFRC = RC\n      ADDRESS ISPEXEC \"VPUT (ZISPFRC) SHARED\"\n      EXIT ZISPFRC\n    END\n  END\nEND\n\"LMDLIST LISTID(\"LSTID\") OPTION(FREE)\"\nIF RC <> 0 THEN DO\n  SAY 'LMDLIST FREE ERROR, RC='RC\n  ZISPFRC = RC\n  ADDRESS ISPEXEC \"VPUT (ZISPFRC) SHARED\"\n  EXIT ZISPFRC\nEND\nADDRESS TSO\n\"EXECIO * DISKW OUTFILE (FINIS\"\nZISPFRC = 0\nADDRESS ISPEXEC \"VPUT (ZISPFRC) SHARED\"\nEXIT ZISPFRC\n/***************************************************************/\n/**            CALLED ROUTINES                                **/\n/***************************************************************/\nLEVEL0:                   /* NO ADDITIONAL LEVELS   */\nSELECT\n  WHEN HLCNT = 1 THEN\n    IF L2 = ' ' THEN\n      CALL QUEUEIT\n  WHEN HLCNT = 2 THEN\n    IF L3 = ' ' THEN\n      CALL QUEUEIT\n  WHEN HLCNT = 3 THEN\n    IF L4 = ' ' THEN\n      CALL QUEUEIT\n  WHEN HLCNT = 4 THEN\n    IF L5 = ' ' THEN\n      CALL QUEUEIT\n  WHEN HLCNT = 5 THEN\n    IF L6 = ' ' THEN\n      CALL QUEUEIT\n  OTHERWISE\n    NOP\nEND\nRETURN\n\nLEVEL1:                   /*  1 ADDITIONAL LEVEL    */\nSELECT\n  WHEN HLCNT = 1 THEN\n    IF L3 = ' ' THEN\n      CALL QUEUEIT\n  WHEN HLCNT = 2 THEN\n    IF L4 = ' ' THEN\n      CALL QUEUEIT\n  WHEN HLCNT = 3 THEN\n    IF L5 = ' ' THEN\n      CALL QUEUEIT\n  WHEN HLCNT = 4 THEN\n    IF L6 = ' ' THEN\n      CALL QUEUEIT\n  WHEN HLCNT = 5 THEN\n    IF L7 = ' ' THEN\n      CALL QUEUEIT\n  OTHERWISE\n    NOP\nEND\nRETURN\n\nLEVEL2:                   /*  2 ADDITIONAL LEVELS   */\nSELECT\n  WHEN HLCNT = 1 THEN\n    CALL TESTL4\n  WHEN HLCNT = 2 THEN\n    CALL TESTL5\n  WHEN HLCNT = 3 THEN\n    CALL TESTL6\n  WHEN HLCNT = 4 THEN\n    CALL TESTL7\n  WHEN HLCNT = 5 THEN\n    CALL TESTREST\n  OTHERWISE\n    NOP\nEND\nRETURN\n\nLEVEL3:                   /*  3 ADDITIONAL LEVELS   */\nSELECT\n  WHEN HLCNT = 1 THEN\n    CALL TESTL5\n  WHEN HLCNT = 2 THEN\n    CALL TESTL6\n  WHEN HLCNT = 3 THEN\n    CALL TESTL7\n  WHEN HLCNT = 4 THEN\n    CALL TESTREST\n  OTHERWISE\n    NOP\nEND\nRETURN\n\nLEVEL4:                   /*  4 ADDITIONAL LEVELS   */\nSELECT\n  WHEN HLCNT = 1 THEN\n    CALL TESTL6\n  WHEN HLCNT = 2 THEN\n    CALL TESTL7\n  WHEN HLCNT = 3 THEN\n    CALL TESTREST\n  OTHERWISE\n    NOP\nEND\nRETURN\n\nLEVEL5:                   /*  5 ADDITIONAL LEVELS   */\nSELECT\n  WHEN HLCNT = 1 THEN\n    CALL TESTL7\n  WHEN HLCNT = 2 THEN\n    CALL TESTREST\n  OTHERWISE\n    NOP\nEND\nRETURN\n\nTESTL4:\nIF L4 = ' ' THEN DO\n  IF ONLY = 'Y' THEN DO\n    IF L3 <> ' ' THEN\n      CALL QUEUEIT\n    ELSE\n      NOP\n  END\n  ELSE\n    CALL QUEUEIT\nEND\nRETURN\n\nTESTL5:\nIF L5 = ' ' THEN DO\n  IF ONLY = 'Y' THEN DO\n    IF L4 <> ' ' THEN\n      CALL QUEUEIT\n    ELSE\n      NOP\n  END\n  ELSE\n    CALL QUEUEIT\nEND\nRETURN\n\nTESTL6:\nIF L6 = ' ' THEN DO\n  IF ONLY = 'Y' THEN DO\n    IF L5 <> ' ' THEN\n      CALL QUEUEIT\n    ELSE\n      NOP\n  END\n  ELSE\n    CALL QUEUEIT\nEND\nRETURN\n\nTESTL7:\nIF L7 = ' ' THEN DO\n  IF ONLY = 'Y' THEN DO\n    IF L6 <> ' ' THEN\n      CALL QUEUEIT\n    ELSE\n      NOP\n  END\n  ELSE\n    CALL QUEUEIT\nEND\n\nRETURN\nTESTREST:\nIF REST = ' ' THEN DO\n  IF ONLY = 'Y' THEN DO\n    IF L7 <> ' ' THEN\n      CALL QUEUEIT\n    ELSE\n      NOP\n  END\n  ELSE\n    CALL QUEUEIT\nEND\nRETURN\n\nQUEUEIT:\nLINE = ' '\nDSN = LEFT(DSNAME,45,' ')\nVOL = LEFT(ZDLVOL,7,' ')\nORG = LEFT(ZDLDSORG,5,' ')\nREC = LEFT(ZDLRECFM,4,' ')\nLEN = LEFT(ZDLLRECL,6,' ')\nBLK = LEFT(ZDLBLKSZ,6,' ')\nTYP = LEFT(ZDLDSNTP,7,' ')\nSIZ = LEFT(ZDLSIZE,9,' ')\nSPC = LEFT(ZDLSPACU,10,' ')\nIF VOL <> '*ALIAS' THEN DO\n  LINE = DSN||VOL||ORG||REC||LEN||BLK||TYP||SIZ||SPC\n  QUEUE LINE\nEND\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FTPSCRPT": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x105_\\x01\\x105_\\x07V\\x00\\x16\\x00\\x16\\x00\\x00\\xd9\\xd4\\xc9\\xc8\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-12-21T00:00:00", "modifydate": "2010-12-21T07:56:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "RMIHAY"}, "text": "open (server name or your ip address)\nibmuser\npassword\nprompt n\nmget 'ibmuser.*.SEQ'\nmget 'ibmuser.*.*.SEQ'\nmget 'ibmuser.*.*.*.SEQ'\nmget 'ibmuser.*.*.*.*.SEQ'\nmget 'ibmuser.*.*.*.*.*.SEQ'\nmget 'ibmuser.*.*.*.*.*.*.SEQ'\nmget 'ibmuser.*.*.*.*.*.*.*.SEQ'\nmget 'ibmuser.*.*.*.*.*.*.*.*.SEQ'\nbinary\nmget 'ibmuser.*.XMI'\nmget 'ibmuser.*.*.XMI'\nmget 'ibmuser.*.*.*.XMI'\nmget 'ibmuser.*.*.*.*.XMI'\nmget 'ibmuser.*.*.*.*.*.XMI'\nmget 'ibmuser.*.*.*.*.*.*.XMI'\nmget 'ibmuser.*.*.*.*.*.*.*.XMI'\nmget 'ibmuser.*.*.*.*.*.*.*.*.XMI'\nquit\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LMCOPY": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x105_\\x01\\x105_\\x07V\\x00(\\x00(\\x00\\x00\\xd9\\xd4\\xc9\\xc8\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-12-21T00:00:00", "modifydate": "2010-12-21T07:56:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "RMIHAY"}, "text": "/* REXX  */\n/*TRACE (I)*/\nADDRESS ISPEXEC\n\"LMINIT DATAID(INDD) DDNAME(\"INSET\") ENQ(SHR)\"\nIF RC <> 0 THEN DO             /* TEST FOR CATALOG ENTRIES */\n  SAY \"LMINIT ERROR DD(INSET), RC=\"||RC\n  ZISPFRC = RC\n  ADDRESS ISPEXEC \"VPUT (ZISPFRC) SHARED\"\n  EXIT ZISPFRC                 /* SET ERROR AND EXIT */\nEND\n\"LMINIT DATAID(OUTDD) DDNAME(\"OUTSET\") ENQ(SHR)\"\nIF RC <> 0 THEN DO             /* TEST FOR CATALOG ENTRIES */\n  SAY \"LMINIT ERROR DD(OUTSET), RC=\"||RC\n  ZISPFRC = RC\n  ADDRESS ISPEXEC \"VPUT (ZISPFRC) SHARED\"\n  EXIT ZISPFRC                 /* SET ERROR AND EXIT */\nEND\n\"LMCOPY FROMID(\"INDD\") TODATAID(\"OUTDD\") FROMMEM(*) REPLACE\"\nIF RC <> 0 THEN DO\n  SAY \"LMCOPY FAILED, RC=\"||RC\n  ZISPFRC = RC\n  ADDRESS ISPEXEC \"VPUT (ZISPFRC) SHARED\"\n  EXIT ZISPFRC                 /* SET ERROR AND EXIT */\nEND\nELSE\n  SAY 'COPIED'\n\"LMFREE DATAID(\"INDD\")\"\nIF RC <> 0 THEN DO             /* TEST FOR CATALOG ENTRIES */\n  SAY \"LMFREE ERROR DD(INSET), RC=\"||RC\n  ZISPFRC = RC\n  ADDRESS ISPEXEC \"VPUT (ZISPFRC) SHARED\"\n  EXIT ZISPFRC                 /* SET ERROR AND EXIT */\nEND\n\"LMFREE DATAID(\"OUTDD\")\"\nIF RC <> 0 THEN DO             /* TEST FOR CATALOG ENTRIES */\n  SAY \"LMFREE ERROR DD(OUTSET), RC=\"||RC\n  ZISPFRC = RC\n  ADDRESS ISPEXEC \"VPUT (ZISPFRC) SHARED\"\n  EXIT ZISPFRC                 /* SET ERROR AND EXIT */\nEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RENALL": {"ttr": 534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x105_\\x01\\x105_\\x07V\\x00\\x02\\x00\\x02\\x00\\x00\\xd9\\xd4\\xc9\\xc8\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-12-21T00:00:00", "modifydate": "2010-12-21T07:56:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "RMIHAY"}, "text": "ren \"'ibmuser.*.SEQ'\" \"ibmuser.*.TXT\"\nren \"'ibmuser.*.XMI'\" \"ibmuser.*.XMI\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SELCTDSN": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x07\\x9f\\x01\\x11\\x07\\x9f!I\\x01\\x98\\x01\\x98\\x00\\x00\\xd9\\xd4\\xc9\\xc8\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-20T00:00:00", "modifydate": "2011-03-20T21:49:00", "lines": 408, "newlines": 408, "modlines": 0, "user": "RMIHAY"}, "text": "/*   REXX                                                       */\n/****************************************************************/\n/*                   Select Dataset Display                     */\n/*  displays dataset names and basic attributes in edit panel   */\n/*  Usage -                                                     */\n/*  SELCTDSN base-hlq number-additional-levels only-flag        */\n/*  Examples :                                                  */\n/*  1) SELCTDSN sys1.abc                                        */\n/*  display all datasets that start with \"SYS1.ABC.\"            */\n/*  2) SELCTDSN sys1.a* 2                                       */\n/*  display all datasets that start with \"SYS1.A*\" and up to    */\n/*  two additonal levels                                        */\n/*  3) SELCTDSN sys1.a* 2 Y                                     */\n/*  display all datasets that start with \"SYS1.A*\" and with     */\n/*  only two additional levels                                  */\n/*  NOTE-  base-hlq can contain up to 5 levels                  */\n/*         wild card character \"*\" can be used                  */\n/*         additional-levels must be blank or 0 through 5       */\n/****************************************************************/\n/*trace r */\naddress tso\nparse arg hlq plusl only\nupper hlq only\nhname = translate(hlq,' ','.')\nhlcnt = words(hname)\nif hlcnt > 5 then do\n  say 'Requested base levels exceed 5 - retry with fewer'\n  say 'Press enter to continue'\n  parse pull dumb1\n  exit (12)                      /* set error and exit */\nend\nif plusl > 5 then do\n  say 'Requested extra level parm must be blank or 0-5   Retry'\n  say 'Press enter to continue'\n  parse pull dumb1\n  exit (12)               /* set errror and exit */\nend\ntsoid = sysvar(sysuid)\ndsnlist = \"'\"||tsoid||\".SELCTDSN.LIST'\"\nrc1=listdsi(dsnlist)\nif rc1==0 then do\n  say 'data set 'dsnlist' exists '\nagain:\n  say 'Enter Y to delete and continue or N to exit'\n  parse upper pull ans .\n  select\n    when ans = 'N' then do\n      say 'Aborting SELCTDSN - Press Enter to continue'\n      parse pull dumb1\n      exit 0\n    end\n    when ans = 'Y' then do\n      \"DELETE \"||dsnlist\n      IF rc <> 0 then do\n        say 'DELETE FAILURE  - CONTACT SUPPORT'\n        say 'Press enter to continue'\n        parse pull dumb1\n        exit (12)\n      end\n    end\n    otherwise do\n      signal again\n    end\n  end     /*select  */\nend\ndsno = 'DSNO'\n\"attrib mylist blksize(800) lrecl(80) recfm(f b) dsorg(ps)\"\n\"alloc file(\"dsno\") dsname(\"dsnlist\") reuse\n new space(15,5) tracks catalog using(mylist)\"\n\"free attrlist(mylist)\"\n\naddress ispexec\n\"lminit dataid(\"modataid\") ddname(\"dsno\") enq(shrw)\"\nif rc <> 0 then do\n  say zerrsm\n  say zerrlm\n  say 'Press enter to continue'\n  parse pull dumb1\n  \"free dsname(\"dsnlist\")\"\n  exit (12)\nend\n\"lmopen dataid(\"modataid\") option(output) org(\"orgps\")\"\nif rc <> 0 then do\n  say zerrsm\n  say zerrlm\n  say 'Press enter to continue'\n  parse pull dumb1\n  \"free dsname(\"dsnlist\")\"\n  exit (12)\nend\n\"lmdinit listid(\"lstid\") level(\"hlq\")\"\nif rc <> 0 then do             /* test for catalog entries */\n  say zerrsm\n  say zerrlm\n  say 'Press enter to continue'\n  parse pull dumb1\n  \"free dsname(\"dsnlist\")\"\n  exit (12)                      /* set error and exit */\nend\nsep = '.'\ndsname=' '\n/*******************************************************************/\n/**    start of mainline                                          **/\n/*******************************************************************/\ndo while (rc = 0)\n  \"lmdlist listid(\"lstid\") option(list) dataset(dsname) stats(yes)\"\n  select\n    when rc = 0 then do       /* good catalog entry */\n      tname = dsname\n      parse var tname ll (sep) l2 (sep) l3 (sep) l4 (sep) l5 (sep),\n                l6 (sep) l7 (sep) rest\n      parse var hlq hl (sep) h2 (sep) h3 (sep) h4 (sep) h5 (sep),\n                (sep) endh\n      if plusl <> '' then do        /* check for number of levels */\n        select\n          when plusl = 0 then\n            call level0             /*  as entered */\n          when plusl = 1 then\n            call level1             /*one extra level */\n          when plusl = 2 then\n            call level2             /* two */\n          when plusl = 3 then\n            call level3             /* three */\n          when plusl = 4 then\n            call level4             /* four */\n          when plusl = 5 then\n            call level5             /* five */\n          otherwise\n            nop                    /*should never happen */\n        end\n      end\n      else\n        call queueit                /* call build list */\n    end\n    when rc = 8 then do\n      leave                         /* done */\n    end\n    otherwise do\n      say zerrsm\n      say zerrlm\n      say 'Press enter to continue'\n      parse pull dumb1\n      exit (12)                     /* set error and exit */\n    end\n  end                               /* end select */\nend                                 /* end do     */\n\"lmdlist listid(\"lstid\") option(free)\"\nif rc <> 0 then do                  /* free list test  */\n  say zerrsm\n  say zerrlm\n  say 'Press enter to continue'\n  parse pull dumb1\n  exit (12)                         /* set error and exit */\nend\n\n/*****************************************************************/\n/* Done processing. Close dataset, free dataid, free and catalog */\n/* dataset and finally check to insure ISPF online environment   */\n/*****************************************************************/\naddress ispexec\n\"lmclose dataid(\"modataid\")\"\nif rc <> 0 then do\n  say zerrsm\n  say zerrlm\n  say 'Press enter to continue'\n  parse pull dumb1\n  exit (12)\nend\n\"lmfree dataid(\"modataid\")\"\nif rc <> 0 then do\n  say zerrsm\n  say zerrlm\n  say 'Press enter to continue'\n  parse pull dumb1\n  exit (12)\nend\naddress tso\n\"free dsname(\"dsnlist\") catalog\"\naddress ispexec\nIf Sysvar('SYSISPF')='ACTIVE' then do\n  call EDIT_ISPF\nend\nelse do\n  say 'Must be executed with ISPF active' /*should never occur */\n  say 'Press enter to continue'\n  parse pull dumb1\n  exit (12)                         /* set error and exit */\nend\nsay 'Ending SELCTDSN - press Enter to continue'\nparse pull endit\nexit 0\n/***************************************************************/\n/**            called routines                                **/\n/***************************************************************/\nlevel0:                             /* no extra levels */\nselect\n  when hlcnt = 1 then               /* test the number of entered */\n    if l2 = ' ' then                /* levels, then find the first*/\n      call queueit                  /* blank level in search results */\n  when hlcnt = 2 then\n    if l3 = ' ' then\n      call queueit\n  when hlcnt = 3 then\n    if l4 = ' ' then\n      call queueit\n  when hlcnt = 4 then\n    if l5 = ' ' then\n      call queueit\n  when hlcnt = 5 then\n    if l6 = ' ' then\n      call queueit\n  otherwise\n    nop\nend\nreturn\n\nlevel1:                             /* one extra level requested */\nselect\n  when hlcnt = 1 then\n    if l3 = ' ' then\n      call queueit\n  when hlcnt = 2 then\n    if l4 = ' ' then\n      call queueit\n  when hlcnt = 3 then\n    if l5 = ' ' then\n      call queueit\n  when hlcnt = 4 then\n    if l6 = ' ' then\n      call queueit\n  when hlcnt = 5 then\n    if l7 = ' ' then\n      call queueit\n  otherwise\n    nop\nend\nreturn\n\nlevel2:                             /* two extra levels requested */\nselect\n  when hlcnt = 1 then               /* Call test for next levels  */\n    call testl4\n  when hlcnt = 2 then\n    call testl5\n  when hlcnt = 3 then\n    call testl6\n  when hlcnt = 4 then\n    call testl7\n  when hlcnt = 5 then\n    call testrest\n  otherwise\n    nop\nend\nreturn\n\nlevel3:                             /* three extra levels requested */\nselect\n  when hlcnt = 1 then\n    call testl5\n  when hlcnt = 2 then\n    call testl6\n  when hlcnt = 3 then\n    call testl7\n  when hlcnt = 4 then\n    call testrest\n  otherwise\n    nop\nend\nreturn\n\nlevel4:                             /* four extra levels requested */\nselect\n  when hlcnt = 1 then\n    call testl6\n  when hlcnt = 2 then\n    call testl7\n  when hlcnt = 3 then\n    call testrest\n  otherwise\n    nop\nend\nreturn\n\nlevel5:                             /* five extra levels requested */\nselect\n  when hlcnt = 1 then\n    call testl7\n  when hlcnt = 2 then\n    call testrest\n  otherwise\n    nop\nend\nreturn\n\ntestl4:\nif l4 = ' ' then do                /* Is the next level blank?  */\n  if only = 'Y' then do            /* Is only switch on?        */\n    if l3 <> ' ' then              /* Lower level not blank ?   */\n      call queueit                 /* queue it                  */\n    else\n      nop                          /* else drop it              */\n  end\n  else\n    call queueit\nend\nreturn\n\ntestl5:\nif l5 = ' ' then do\n  if only = 'Y' then do\n    if l4 <> ' ' then\n      call queueit\n    else\n      nop\n  end\n  else\n    call queueit\nend\nreturn\n\ntestl6:\nif l6 = ' ' then do\n  if only = 'Y' then do\n    if l5 <> ' ' then\n      call queueit\n    else\n      nop\n  end\n  else\n    call queueit\nend\nreturn\n\ntestl7:\nif l7 = ' ' then do\n  if only = 'Y' then do\n    if l6 <> ' ' then\n      call queueit\n    else\n      nop\n  end\n  else\n    call queueit\nend\nreturn\n\ntestrest:\nif rest = ' ' then do\n  if only = 'Y' then do\n    if l7 <> ' ' then\n      call queueit\n    else\n      nop\n  end\n  else\n    call queueit\nend\nreturn\n\n/***************************************************************/\n/**    Build output line and write to dataset                 **/\n/***************************************************************/\nqueueit:\nline = ' '\ndsn = left(dsname,45,' ')\nvol = left(zdlvol,7,' ')\norg = left(zdldsorg,5,' ')\nrec = left(zdlrecfm,4,' ')\nlen = left(zdllrecl,6,' ')\nblk = left(zdlblksz,6,' ')\ntyp = left(zdldsntp,7,' ')\nline = dsn || vol || org || rec || len || blk || typ\n\"lmput dataid(\"modataid\") mode(invar) dataloc(line),\n       datalen(80)\"\nif rc <> 0 then do\n  say zerrsm\n  say zerrlm\n  say 'Press enter to continue'\n  parse pull dumb1\n  exit (12)\nend\nreturn\n\n/***************************************************************/\n/**               Display edit panel                          **/\n/***************************************************************/\nEDIT_ISPF:\naddress ispexec\n\"lminit dataid(\"modataid\") dataset(\"dsnlist\") enq(shr)\"\nif rc <> 0 then do\n  say zerrsm\n  say zerrlm\n  say 'Press enter to continue'\n  parse pull dumb1\n  exit (12)\nend\n\n\"edit dataset(\"dsnlist\")\"\nif rc > 4 then do\n  say rc\n  say 'Press enter to continue'\n  parse pull dumb1\n  exit (12)\nend\naddress tso\n\"free dsname(\"dsnlist\")\"\n\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XMITALL": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x07\\x9f\\x01\\x11\\x07\\x9f!I\\x01-\\x01-\\x00\\x00\\xd9\\xd4\\xc9\\xc8\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-20T00:00:00", "modifydate": "2011-03-20T21:49:00", "lines": 301, "newlines": 301, "modlines": 0, "user": "RMIHAY"}, "text": "/*  REXX  */\n/*TRACE R */\n X=0;Z=0;S1=0;S2=0;W=0;V=0;T=0;R=0;S3=0;S4=0;I=0;J=0;L=0;M=0;N=0\n SEP = '.'\n PARSE ARG USER\n Z=Z+1;H.Z=\"//IBMUSERN JOB ACCTING,'PROGRAMMER',CLASS=S,REGION=8M,\"\n Z=Z+1;H.Z=\"//    MSGCLASS=U,NOTIFY=&SYSUID                        \"\n V=V+1;K.V=\"//*****************************************************\"\n V=V+1;K.V=\"//TSOBATCH EXEC PGM=IKJEFT01,DYNAMNBR=200\"\n V=V+1;K.V=\"//SYSTSPRT DD SYSOUT=*\"\n V=V+1;K.V=\"//SYSTSIN  DD *\"\n M=M+1;N.M=\"//*****************************************************\"\n M=M+1;N.M=\"//CLEANUP  EXEC PGM=IDCAMS\"\n M=M+1;N.M=\"//SYSPRINT DD SYSOUT=*\"\n M=M+1;N.M=\"//SYSIN    DD *\"\n\nDSNAME = ' '\nVOLSER = ' '\n\"EXECIO * DISKR DSNLIST ( FINIS STEM D.\"\n/**************************************************************/\n/*                      START OF MAINLINE                     */\n/**************************************************************/\nDO A = 1 TO D.0\n  RECORD = D.A                         /* PARSE OUT DATASET INFO  */\n  DSNAME = SUBSTR(RECORD,1,44)\n  VOLSER = SUBSTR(RECORD,46,6)\n  DSORG  = SUBSTR(RECORD,53,4)\n  RECFM  = SUBSTR(RECORD,58,3)\n  LRECL  = SUBSTR(RECORD,62,5)\n  BLKSZ  = SUBSTR(RECORD,68,5)\n  TYPE   = SUBSTR(RECORD,74,6)\n  SIZE   = SUBSTR(RECORD,82,5)\n  UNIT   = SUBSTR(RECORD,90,10)\n\n  DSN = STRIP(DSNAME,'T')              /* CLEAN UP DSNAME  */\n  PARSE VAR DSN THL (SEP) REST\n  IF USER = THL THEN                   /* BUILD SPECIAL NAME IF NOT */\n    ODSN = DSN                         /* USERID HLQ   */\n  ELSE\n    ODSN = USER || \".@.\" || REST\n\n  L = LENGTH(ODSN)                     /*CHECK LENGTH AND SHORTEN */\n  IF L > 40 THEN DO                    /*IF NECESSARY  */\n    SAY 'DSN TOO LONG - ' ODSN\n    ODSN = SUBSTR(ODSN,1,40)\n    SAY 'CHANGED TO   - ' ODSN\n  END\n\n  SELECT                               /*WHAT IS THE DSORG? */\n    WHEN DSORG = 'PO' THEN DO          /* AND CALL APPROPIATE TASK */\n      CALL BLDPDS\n    END\n    WHEN DSORG = 'PO-E' THEN DO\n      CALL BLDPDSE\n    END\n    WHEN DSORG = 'PS' THEN DO\n      CALL BLDSEQ\n    END\n    OTHERWISE DO\n      QUEUE RECORD\n      IF VOLSER = 'ARCIVE' | VOLSER = 'MIGRAT' THEN\n        SAY 'DATASET MIGRATED - ' DSN\n      ELSE\n        SAY 'REVIEW NEEDS FOR - ' DSN\n      S4=S4+1\n    END\n  END\nEND\n\n \"EXECIO * DISKW DDN (STEM H. \"       /* WRITE OUTPUT DATASETS  */\n \"EXECIO * DISKW DDN (STEM K. \"\n \"EXECIO * DISKW DDN (STEM P. \"       /* PDS - XMIT ONLY  */\n \"EXECIO 0 DISKW DDN (FINIS)\"\n\n \"EXECIO * DISKW DDE (STEM H. \"       /* PDSE AND VB   */\n \"EXECIO * DISKW DDE (STEM O. \"\n \"EXECIO * DISKW DDE (STEM K. \"       /* COPY TO FB PDS AND */\n \"EXECIO * DISKW DDE (STEM Q. \"       /* XMIT               */\n \"EXECIO 0 DISKW DDE (FINIS)\"\n\n \"EXECIO * DISKW DDS (STEM H. \"       /* COPY SEQ TO COMMON NAMES  */\n \"EXECIO * DISKW DDS (STEM J. \"\n \"EXECIO 0 DISKW DDS (FINIS)\"\n\n \"EXECIO * DISKW DDC (STEM H. \"       /* CLEAN UP IDCAMS STMTS  */\n \"EXECIO * DISKW DDC (STEM N. \"\n \"EXECIO 0 DISKW DDC (FINIS)\"\n\n TOT = S1+S2+S3+S4\n SAY '----------------------------------'\n SAY '                                  '\n SAY '       ***  COUNTS  ***           '\n SAY '                                  '\n SAY '----------------------------------'\n SAY 'DATASETS PROCESSED - PDS  = ' S1\n SAY 'DATASETS PROCESSED - PDSE = ' S2\n SAY 'DATASETS PROCESSED - PS   = ' S3\n SAY 'DATASETS TO REVIEW - ???? = ' S4\n SAY '----------------------------------'\n SAY 'TOTAL DATASETS            = ' TOT\n SAY '----------------------------------'\n SAY '                                  '\nEXIT                    /* END OF MAINLINE  */\n\n/**************************************************************/\n/*                      CALLED ROUTINES                       */\n/**************************************************************/\n\nBLDPDS:                                  /*NORMAL PDS  */\n S1 = S1+1\n IF SUBSTR(RECFM,1,1) = 'V' THEN DO  /*VB DATASET NEEDS TO BE FB   */\n   DSNFQ = \"'\"||DSN||\"'\"\n   DSINFO=LISTDSI(DSNFQ DIRECTORY)         /* GET DETAILED PDSE INFO */\n   IF DSINFO == 0 THEN DO\n     CALL BLDSYMS\n     IF US > 0 THEN                    /*CHECK FOR EMPTY DATASET */\n       CALL BLDVJCL\n     ELSE DO\n       SAY 'EMPTY DATASET    - ' DSN\n       S4=S4+1\n     END\n   END\n   ELSE DO\n     SAY 'CHECK ON  - ' DSN\n     S4=S4+1\n   END\n END\n ELSE DO                             /*NORMAL PDS - EASY BUILD     */\n   W=W+1;P.W=\" XMIT DAYTON.\"||USER||\" DSN('\"||DSN||\"')      +\"\n   W=W+1;P.W=\"      OUTDSN('\"||ODSN||\".XMI')\"\n   M=M+1;N.M=\"      DELETE \"||ODSN||\".XMI - \"\n   M=M+1;N.M=\"             NONVSAM PURGE \"\n END\nRETURN\n\nBLDPDSE:                                /* PDSE */\n DSNFQ = \"'\"||DSN||\"'\"\n DSINFO=LISTDSI(DSNFQ DIRECTORY)         /* GET DETAILED PDSE INFO */\n IF DSINFO == 0 & SYSUSED = 'N/A' THEN DO\n   S2 = S2+1\n   CALL BLDSYMS\n   IF UP > 0 THEN DO                 /* CHECK FOR EMPTY DATASET   */\n     IF SUBSTR(RECFM,1,1) = 'V' THEN /*VB DATASET NEEDS TO BE FB   */\n       CALL BLDVJCL\n     ELSE\n       CALL BLDEJCL\n   END\n   ELSE DO\n     SAY 'EMPTY DATASET    - ' DSN\n     S4=S4+1\n   END\n END\n ELSE DO                             /* NEED TO CHECK WHY          */\n   SAY 'CHECK ON  - ' DSN\n   S4=S4+1\n END\nRETURN\n\nBLDSEQ:                                /* SEQUENTIAL DATASET  */\n DSNFQ = \"'\"||DSN||\"'\"\n DSINFO=LISTDSI(DSNFQ)                 /* GET SEQUENTIAL DSN INFO  */\n IF DSINFO == 0 THEN DO\n   S3=S3+1\n   CALL BLDSYMS\n   IF US > 0 THEN                    /* CHECK FOR EMPTY DATASET */\n     CALL BLDSJCL\n   ELSE DO\n     SAY 'EMPTY DATASET    - ' DSN\n     S4=S4+1\n   END\n END\n ELSE DO                               /* NEED TO CHECK WHY    */\n   SAY 'CHECK ON  - ' DSN\n   S4=S4+1\n END\nRETURN\n\nBLDSYMS:                         /* SHORTEN SYMBOLIC NAMES AND  */\n T = RIGHT(A,3,0)                /* MODIFY AS NECESSARY  */\n LR = SYSLRECL\n BL = SYSBLKSIZE\n AL = SYSALLOC\n FM = SYSRECFM\n US = SYSUSED\n UP = SYSUSEDPAGES\n DB = SYSADIRBLK\n PR = SYSPRIMARY\n SC = SYSSECONDS\n IF DB = 'NO_LIM' THEN            /*IS IT A PDSE?               */\n   DB = FORMAT(SYSMEMBERS/3,,0)   /* CALCULATE DIRECTORY BLOCKS */\n EX = SYSEXTENTS\n IF EX > 1 THEN\n   PR = PR + (EX * SC)\n UN = SYSUNITS\n IF UN = 'CYLINDER' THEN\n   UN = 'CYL'\n ELSE\n   IF UN = 'TRACK' THEN\n     UN = 'TRK'\n   ELSE\n     UN = BL\nRETURN\n\n/*****************************************************************/\n/*   BUILD IEBCOPY FOR PDSE TO PDS FOR XMIT SO XMITMNGR CAN READ */\n/*   FINAL OUTPUT                                                */\n/*****************************************************************/\nBLDEJCL:\n X=X+1;O.X=\"//*****************************************************\"\n X=X+1;O.X=\"//DELT\"||T||\"  EXEC PGM=IEFBR14\"\n X=X+1;O.X=\"//DD1      DD DSN=\"||ODSN||\".TMP,\"\n X=X+1;O.X=\"//            DISP=(MOD,DELETE),\"\n X=X+1;O.X=\"//            UNIT=SYSDA,SPACE=(TRK,(1,1))\"\n X=X+1;O.X=\"//COPY\"||T||\"  EXEC PGM=IEBCOPY\"\n X=X+1;O.X=\"//SYSPRINT DD SYSOUT=*\"\n X=X+1;O.X=\"//SYSIN    DD *\"\n X=X+1;O.X=\"   COPY INDD=INDD,OUTDD=OUTDD,LIST=NO\"\n X=X+1;O.X=\"//INDD     DD DISP=SHR,DSN=\"||DSN\n X=X+1;O.X=\"//OUTDD    DD DSN=\"||ODSN||\".TMP,\"\n X=X+1;O.X=\"//            DISP=(,CATLG,DELETE),UNIT=SYSDA,\"\n X=X+1\n O.X=\"//            DCB=(RECFM=\"||FM||\",LRECL=\"||LR||\",BLKSIZE=0),\"\n X=X+1;O.X=\"//            SPACE=(\"||UN||\",(\"||PR||\",\"||SC||\",\"DB\"))\"\n R=R+1;Q.R=\" XMIT DAYTON.\"||USER||\" DSN('\"||ODSN||\".TMP')      +\"\n R=R+1;Q.R=\"      OUTDSN('\"||ODSN||\".XMI')\"\n M=M+1;N.M=\"      DELETE \"||ODSN||\".TMP - \"\n M=M+1;N.M=\"             NONVSAM PURGE\"\n M=M+1;N.M=\"      DELETE \"||ODSN||\".XMI - \"\n M=M+1;N.M=\"             NONVSAM PURGE\"\nRETURN\n\n/*****************************************************************/\n/*   BUILD IEBCOPY FOR VB DATASETS TO FB DATASETS SO XMITMNGR    */\n/*   CAN READ FINAL OUTPUT                                       */\n/*****************************************************************/\nBLDVJCL:\n FM = 'FB'\n UN = 'CYL'\n PR = 10\n SC = 10\n BL = 0\n X=X+1;O.X=\"//*****************************************************\"\n X=X+1;O.X=\"//DELT\"||T||\"  EXEC PGM=IEFBR14\"\n X=X+1;O.X=\"//DD1      DD DSN=\"||ODSN||\".TMP,\"\n X=X+1;O.X=\"//            DISP=(MOD,DELETE),\"\n X=X+1;O.X=\"//            UNIT=SYSDA,SPACE=(TRK,(1,1))\"\n X=X+1;O.X=\"//COPY\"||T||\"  EXEC PGM=IKJEFT01,DYNAMNBR=128\"\n X=X+1;O.X=\"//ISPPLIB  DD DISP=SHR,DSN=SYS1.ISPF.SISPPENU\"\n X=X+1;O.X=\"//ISPSLIB  DD DISP=SHR,DSN=SYS1.ISPF.SISPSLIB\"\n X=X+1;O.X=\"//         DD DISP=SHR,DSN=SYS1.ISPF.SISPSENU\"\n X=X+1;O.X=\"//ISPMLIB  DD DISP=SHR,DSN=SYS1.ISPF.SISPMENU\"\n X=X+1;O.X=\"//ISPPROF  DD DSN=&&PROFILE,\"\n X=X+1;O.X=\"//            DISP=(,DELETE,DELETE),UNIT=SYSDA,\"\n X=X+1;O.X=\"//            SPACE=(TRK,(1,1,1),RLSE),\"\n X=X+1;O.X=\"//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0)\"\n X=X+1;O.X=\"//ISPTLIB  DD DISP=SHR,DSN=SYS1.ISPF.SISPTENU\"\n X=X+1;O.X=\"//ISPLOG   DD SYSOUT=*,\"\n X=X+1;O.X=\"//            DCB=(LRECL=120,BLKSIZE=2400,DSORG=PS)\"\n X=X+1;O.X=\"//ISPLIST  DD SYSOUT=*,\"\n X=X+1;O.X=\"//            DCB=(LRECL=121,BLKSIZE=1210,RECFM=FBA)\"\n X=X+1;O.X=\"//SYSEXEC  DD DISP=SHR,DSN=SYS1.ISPF.SISPEXEC\"\n X=X+1;O.X=\"//SYSPROC  DD DSN=IBMUSER.REXX.EXEC,DISP=SHR\"\n X=X+1;O.X=\"//SYSTSPRT DD SYSOUT=*\"\n X=X+1;O.X=\"//INSET    DD DISP=SHR,DSN=\"||DSN\n X=X+1;O.X=\"//OUTSET   DD DSN=\"||ODSN||\".TMP,\"\n X=X+1;O.X=\"//            DISP=(,CATLG,DELETE),UNIT=SYSDA,\"\n X=X+1;O.X=\"//            DCB=(RECFM=FB,LRECL=\"||LR||\",BLKSIZE=0),\"\n X=X+1;O.X=\"//            SPACE=(\"||UN||\",(\"||PR||\",\"||SC||\",\"DB\"))\"\n X=X+1;O.X=\"//SYSTSIN  DD *\"\n X=X+1;O.X=\" PROFILE PREFIX(IBMUSER)\"\n X=X+1;O.X=\" ISPSTART CMD(%LMCOPY)\"\n R=R+1;Q.R=\" XMIT DAYTON.\"||USER||\" DSN('\"||ODSN||\".TMP')      +\"\n R=R+1;Q.R=\"      OUTDSN('\"||ODSN||\".XMI')\"\n M=M+1;N.M=\"      DELETE \"||ODSN||\".TMP - \"\n M=M+1;N.M=\"             NONVSAM PURGE\"\n M=M+1;N.M=\"      DELETE \"||ODSN||\".XMI - \"\n M=M+1;N.M=\"             NONVSAM PURGE\"\nRETURN\n\n/*****************************************************************/\n/*   BUILD IEBGNER FOR SEQUENTIAL DATASETS, JUST TO MAKE THE     */\n/*   FTP TRANFERS EASIER                                         */\n/*****************************************************************/\nBLDSJCL:\n I=I+1;J.I=\"//*****************************************************\"\n I=I+1;J.I=\"//DELT\"||T||\"  EXEC PGM=IEFBR14\"\n I=I+1;J.I=\"//DD1      DD DSN=\"||ODSN||\".SEQ,\"\n I=I+1;J.I=\"//            DISP=(MOD,DELETE),\"\n I=I+1;J.I=\"//            UNIT=SYSDA,SPACE=(TRK,(1,1))\"\n I=I+1;J.I=\"//GENR\"||T||\"  EXEC PGM=IEBGENER\"\n I=I+1;J.I=\"//SYSPRINT DD SYSOUT=*\"\n I=I+1;J.I=\"//SYSIN    DD DUMMY\"\n I=I+1;J.I=\"//SYSUT1   DD DISP=SHR,DSN=\"||DSN\n I=I+1;J.I=\"//SYSUT2   DD DSN=\"||ODSN||\".SEQ,\"\n I=I+1;J.I=\"//            DISP=(,CATLG,DELETE),UNIT=SYSDA,\"\n I=I+1\n J.I=\"//          DCB=(RECFM=\"||FM||\",LRECL=\"||LR||\",BLKSIZE=\"||BL||\"),\"\n I=I+1;J.I=\"//            SPACE=(\"||UN||\",(\"||PR||\",\"||SC||\"))\"\n M=M+1;N.M=\"      DELETE \"||ODSN||\".SEQ - \"\n M=M+1;N.M=\"             NONVSAM PURGE\"\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XMITJOB": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x105_\\x01\\x105_\\x07V\\x00T\\x00T\\x00\\x00\\xd9\\xd4\\xc9\\xc8\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-12-21T00:00:00", "modifydate": "2010-12-21T07:56:00", "lines": 84, "newlines": 84, "modlines": 0, "user": "RMIHAY"}, "text": "//IBMUSERZ JOB ACCTING,'PROGRAMMER',CLASS=S,REGION=8M,\n//           MSGCLASS=U,NOTIFY=&SYSUID\n//*\n//STEP0010 EXEC PGM=IEFBR14\n//DD1      DD DISP=(MOD,DELETE,DELETE),DSN=IBMUSER.XMITN.JCL,\n//            UNIT=SYSDA,SPACE=(TRK,(1,1))\n//DD2      DD DISP=(MOD,DELETE,DELETE),DSN=IBMUSER.XMITE.JCL,\n//            UNIT=SYSDA,SPACE=(TRK,(1,1))\n//DD3      DD DISP=(MOD,DELETE,DELETE),DSN=IBMUSER.XMITS.JCL,\n//            UNIT=SYSDA,SPACE=(TRK,(1,1))\n//DD4      DD DISP=(MOD,DELETE,DELETE),DSN=IBMUSER.XMITC.JCL,\n//            UNIT=SYSDA,SPACE=(TRK,(1,1))\n//DD5      DD DISP=(MOD,DELETE,DELETE),DSN=IBMUSER.DSN.LIST,\n//            UNIT=SYSDA,SPACE=(TRK,(1,1))\n//*-------------------------------------------------------------------*\n//*                      INVOKE ISPF SERVICES                         *\n//*-------------------------------------------------------------------*\n//STEP0100 EXEC PGM=IKJEFT01,DYNAMNBR=128\n//ISPPLIB  DD DISP=SHR,DSN=SYS1.ISPF.SISPPENU\n//ISPSLIB  DD DISP=SHR,DSN=SYS1.ISPF.SISPSLIB\n//         DD DISP=SHR,DSN=SYS1.ISPF.SISPSENU\n//ISPMLIB  DD DISP=SHR,DSN=SYS1.ISPF.SISPMENU\n//ISPPROF  DD DSN=&&PROFILE,\n//            DISP=(,DELETE,DELETE),UNIT=SYSDA,\n//            SPACE=(TRK,(1,1,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0)\n//ISPTLIB  DD DISP=SHR,DSN=SYS1.ISPF.SISPTENU\n//ISPLOG   DD SYSOUT=*,\n//            DCB=(LRECL=120,BLKSIZE=2400,DSORG=PS,RECFM=FB)\n//ISPLIST  DD SYSOUT=*,\n//            DCB=(LRECL=121,BLKSIZE=1210,RECFM=FBA)\n//OUTFILE  DD DSN=IBMUSER.DSN.LIST,\n//            DISP=(,CATLG,DELETE),\n//            UNIT=SYSDA,SPACE=(TRK,(5,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=132,BLKSIZE=13200)\n//SYSEXEC  DD DISP=SHR,DSN=IBMUSER.XMITDSNS.PDS\n//         DD DISP=SHR,DSN=SYS1.ISPF.SISPEXEC\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN  DD *\n PROFILE PREFIX(IBMUSER)\n ISPSTART CMD(%DSLISTB _HLQ_)\n//*THE DSLISTB COMMAND USAGE:\n//* DSLIST BASE-HLQ(S) #-ADDITIONAL-LEVELS  ONLY-FLAG\n//* EXAMPLES :\n//* 1) DSLISTB SYS1.ABC\n//* RETRIEVE ALL DATASETS THAT START WITH \"SYS1.ABC.\"\n//* 2) DSLISTB SYS1.A* 2\n//* RETRIEVE ALL DATASETS THAT START WITH \"SYS1.A*\" AND UP TO\n//* TWO ADDITIONAL LEVELS\n//* 3) DSLISTB SYS1.A* 2 Y\n//* RETRIEVE ALL DATASETS THAT START WITH \"SYS1.A*\" AND WITH\n//* ONLY TWO ADDITIONAL LEVELS\n//* NOTE-  WILD CARD CHARACTER \"*\" CAN BE USED\n//*        ADDITIONAL LEVEL CAN BE BLANK OR 0 THROUGH 5\n//*\n//*-------------------------------------------------------------------*\n//*                         SIMPLE TSO BATCH                          *\n//*-------------------------------------------------------------------*\n//STEP0200 EXEC PGM=IKJEFT01,DYNAMNBR=128\n//SYSEXEC  DD DISP=SHR,DSN=IBMUSER.XMITDSNS.PDS\n//SYSTSPRT DD SYSOUT=*\n//DSNLIST  DD DISP=(OLD,DELETE,DELETE),DSN=IBMUSER.DSN.LIST\n//DDN      DD DSN=IBMUSER.XMITN.JCL,\n//            DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSDA,SPACE=(TRK,(5,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)\n//DDE      DD DSN=IBMUSER.XMITE.JCL,\n//            DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSDA,SPACE=(TRK,(5,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)\n//DDS      DD DSN=IBMUSER.XMITS.JCL,\n//            DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSDA,SPACE=(TRK,(5,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)\n//DDC      DD DSN=IBMUSER.XMITC.JCL,\n//            DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSDA,SPACE=(TRK,(5,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)\n//SYSTSIN  DD *\n PROFILE PREFIX(IBMUSER)\n %XMITALL IBMUSER\n//*THE XMITALL COMMAND USAGE:\n//* XMITALL USERID - USERID FOR DATASET HLQ\n//*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XMITJOB1": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x07\\x9f\\x01\\x11\\x07\\x9f!I\\x00U\\x00U\\x00\\x00\\xd9\\xd4\\xc9\\xc8\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-20T00:00:00", "modifydate": "2011-03-20T21:49:00", "lines": 85, "newlines": 85, "modlines": 0, "user": "RMIHAY"}, "text": "//IBMUSERZ JOB ACCTING,'PROGRAMMER',CLASS=S,REGION=8M,\n//           MSGCLASS=U,NOTIFY=&SYSUID\n//*\n//STEP0010 EXEC PGM=IEFBR14\n//DD1      DD DISP=(MOD,DELETE,DELETE),DSN=IBMUSER.XMITN.JCL,\n//            UNIT=SYSDA,SPACE=(TRK,(1,1))\n//DD2      DD DISP=(MOD,DELETE,DELETE),DSN=IBMUSER.XMITE.JCL,\n//            UNIT=SYSDA,SPACE=(TRK,(1,1))\n//DD3      DD DISP=(MOD,DELETE,DELETE),DSN=IBMUSER.XMITS.JCL,\n//            UNIT=SYSDA,SPACE=(TRK,(1,1))\n//DD4      DD DISP=(MOD,DELETE,DELETE),DSN=IBMUSER.XMITC.JCL,\n//            UNIT=SYSDA,SPACE=(TRK,(1,1))\n//DD5      DD DISP=(MOD,DELETE,DELETE),DSN=IBMUSER.SELCTDSN.LIST,\n//            UNIT=SYSDA,SPACE=(TRK,(1,1))\n//*-------------------------------------------------------------------*\n//*                      INVOKE ISPF SERVICES                         *\n//*-------------------------------------------------------------------*\n//STEP0100 EXEC PGM=IKJEFT01,DYNAMNBR=128\n//ISPPLIB  DD DISP=SHR,DSN=SYS1.ISPF.SISPPENU\n//ISPSLIB  DD DISP=SHR,DSN=SYS1.ISPF.SISPSLIB\n//         DD DISP=SHR,DSN=SYS1.ISPF.SISPSENU\n//ISPMLIB  DD DISP=SHR,DSN=SYS1.ISPF.SISPMENU\n//ISPPROF  DD DSN=&&PROFILE,\n//            DISP=(,DELETE,DELETE),UNIT=SYSDA,\n//            SPACE=(TRK,(1,1,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0)\n//ISPTLIB  DD DISP=SHR,DSN=SYS1.ISPF.SISPTENU\n//ISPLOG   DD SYSOUT=*,\n//            DCB=(LRECL=120,BLKSIZE=2400,DSORG=PS,RECFM=FB)\n//ISPLIST  DD SYSOUT=*,\n//            DCB=(LRECL=121,BLKSIZE=1210,RECFM=FBA)\n//OUTFILE  DD DSN=IBMUSER.SELCTDSN.LIST,\n//            DISP=(,CATLG,DELETE),\n//            UNIT=SYSDA,SPACE=(TRK,(5,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=132,BLKSIZE=13200)\n//SYSEXEC  DD DISP=SHR,DSN=IBMUSER.XMITDSNS.PDS\n//         DD DISP=SHR,DSN=SYS1.ISPF.SISPEXEC\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN  DD *\n PROFILE PREFIX(IBMUSER)\n ISPSTART CMD(%DSLISTB _HLQ_)\n//*THE DSLISTB COMMAND USAGE:\n//* DSLIST BASE-HLQ(S) #-ADDITIONAL-LEVELS  ONLY-FLAG\n//* EXAMPLES :\n//* 1) DSLISTB SYS1.ABC\n//* RETRIEVE ALL DATASETS THAT START WITH \"SYS1.ABC.\"\n//* 2) DSLISTB SYS1.A* 2\n//* RETRIEVE ALL DATASETS THAT START WITH \"SYS1.A*\" AND UP TO\n//* TWO ADDITIONAL LEVELS\n//* 3) DSLISTB SYS1.A* 2 Y\n//* RETRIEVE ALL DATASETS THAT START WITH \"SYS1.A*\" AND WITH\n//* ONLY TWO ADDITIONAL LEVELS\n//* NOTE-  BASE-HLS(S) CAN HAVE UP TO 5 LEVELS\n//*        WILD CARD CHARACTER \"*\" CAN BE USED\n//*        ADDITIONAL LEVEL MUST BE BLANK OR 0 THROUGH 5\n//*\n//*-------------------------------------------------------------------*\n//*                         SIMPLE TSO BATCH                          *\n//*-------------------------------------------------------------------*\n//STEP0200 EXEC PGM=IKJEFT01,DYNAMNBR=128\n//SYSEXEC  DD DISP=SHR,DSN=IBMUSER.XMITDSNS.PDS\n//SYSTSPRT DD SYSOUT=*\n//DSNLIST  DD DISP=SHR,DSN=IBMUSER.SELCTDSN.LIST\n//DDN      DD DSN=IBMUSER.XMITN.JCL,\n//            DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSDA,SPACE=(TRK,(5,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)\n//DDE      DD DSN=IBMUSER.XMITE.JCL,\n//            DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSDA,SPACE=(TRK,(5,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)\n//DDS      DD DSN=IBMUSER.XMITS.JCL,\n//            DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSDA,SPACE=(TRK,(5,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)\n//DDC      DD DSN=IBMUSER.XMITC.JCL,\n//            DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSDA,SPACE=(TRK,(5,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)\n//SYSTSIN  DD *\n PROFILE PREFIX(IBMUSER)\n %XMITALL IBMUSER\n//*THE XMITALL COMMAND USAGE:\n//* XMITALL USERID - USERID FOR DATASET HLQ\n//*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XMITJOB2": {"ttr": 1034, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x07\\x9f\\x01\\x11\\x07\\x9f!I\\x00)\\x00)\\x00\\x00\\xd9\\xd4\\xc9\\xc8\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-20T00:00:00", "modifydate": "2011-03-20T21:49:00", "lines": 41, "newlines": 41, "modlines": 0, "user": "RMIHAY"}, "text": "//IBMUSERZ JOB ACCTING,'PROGRAMMER',CLASS=S,REGION=8M,\n//           MSGCLASS=U,NOTIFY=&SYSUID\n//*\n//STEP0010 EXEC PGM=IEFBR14\n//DD1      DD DISP=(MOD,DELETE,DELETE),DSN=IBMUSER.XMITN.JCL,\n//            UNIT=SYSDA,SPACE=(TRK,(1,1))\n//DD2      DD DISP=(MOD,DELETE,DELETE),DSN=IBMUSER.XMITE.JCL,\n//            UNIT=SYSDA,SPACE=(TRK,(1,1))\n//DD3      DD DISP=(MOD,DELETE,DELETE),DSN=IBMUSER.XMITS.JCL,\n//            UNIT=SYSDA,SPACE=(TRK,(1,1))\n//DD4      DD DISP=(MOD,DELETE,DELETE),DSN=IBMUSER.XMITC.JCL,\n//            UNIT=SYSDA,SPACE=(TRK,(1,1))\n//*-------------------------------------------------------------------*\n//*                      INVOKE ISPF SERVICES                         *\n//*-------------------------------------------------------------------*\n//STEP0100 EXEC PGM=IKJEFT01,DYNAMNBR=128\n//SYSEXEC  DD DISP=SHR,DSN=IBMUSER.XMITDSNS.PDS\n//SYSTSPRT DD SYSOUT=*\n//DSNLIST  DD DISP=SHR,DSN=IBMUSER.SELCTDSN.LIST\n//DDN      DD DSN=IBMUSER.XMITN.JCL,\n//            DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSDA,SPACE=(TRK,(5,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)\n//DDE      DD DSN=IBMUSER.XMITE.JCL,\n//            DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSDA,SPACE=(TRK,(5,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)\n//DDS      DD DSN=IBMUSER.XMITS.JCL,\n//            DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSDA,SPACE=(TRK,(5,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)\n//DDC      DD DSN=IBMUSER.XMITC.JCL,\n//            DISP=(NEW,CATLG,DELETE),\n//            UNIT=SYSDA,SPACE=(TRK,(5,1),RLSE),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)\n//SYSTSIN  DD *\n PROFILE PREFIX(IBMUSER)\n %XMITALL IBMUSER\n//*THE XMITALL COMMAND USAGE:\n//* XMITALL USERID - USERID FOR DATASET HLQ\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT842/FILE842.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT842", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}