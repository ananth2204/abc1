/*   REXX                                                       */
/****************************************************************/
/*                   Select Dataset Display                     */
/*  displays dataset names and basic attributes in edit panel   */
/*  Usage -                                                     */
/*  SELCTDSN base-hlq number-additional-levels only-flag        */
/*  Examples :                                                  */
/*  1) SELCTDSN sys1.abc                                        */
/*  display all datasets that start with "SYS1.ABC."            */
/*  2) SELCTDSN sys1.a* 2                                       */
/*  display all datasets that start with "SYS1.A*" and up to    */
/*  two additonal levels                                        */
/*  3) SELCTDSN sys1.a* 2 Y                                     */
/*  display all datasets that start with "SYS1.A*" and with     */
/*  only two additional levels                                  */
/*  NOTE-  base-hlq can contain up to 5 levels                  */
/*         wild card character "*" can be used                  */
/*         additional-levels must be blank or 0 through 5       */
/****************************************************************/
/*trace r */
address tso
parse arg hlq plusl only
upper hlq only
hname = translate(hlq,' ','.')
hlcnt = words(hname)
if hlcnt > 5 then do
  say 'Requested base levels exceed 5 - retry with fewer'
  say 'Press enter to continue'
  parse pull dumb1
  exit (12)                      /* set error and exit */
end
if plusl > 5 then do
  say 'Requested extra level parm must be blank or 0-5   Retry'
  say 'Press enter to continue'
  parse pull dumb1
  exit (12)               /* set errror and exit */
end
tsoid = sysvar(sysuid)
dsnlist = "'"||tsoid||".SELCTDSN.LIST'"
rc1=listdsi(dsnlist)
if rc1==0 then do
  say 'data set 'dsnlist' exists '
again:
  say 'Enter Y to delete and continue or N to exit'
  parse upper pull ans .
  select
    when ans = 'N' then do
      say 'Aborting SELCTDSN - Press Enter to continue'
      parse pull dumb1
      exit 0
    end
    when ans = 'Y' then do
      "DELETE "||dsnlist
      IF rc <> 0 then do
        say 'DELETE FAILURE  - CONTACT SUPPORT'
        say 'Press enter to continue'
        parse pull dumb1
        exit (12)
      end
    end
    otherwise do
      signal again
    end
  end     /*select  */
end
dsno = 'DSNO'
"attrib mylist blksize(800) lrecl(80) recfm(f b) dsorg(ps)"
"alloc file("dsno") dsname("dsnlist") reuse
 new space(15,5) tracks catalog using(mylist)"
"free attrlist(mylist)"

address ispexec
"lminit dataid("modataid") ddname("dsno") enq(shrw)"
if rc <> 0 then do
  say zerrsm
  say zerrlm
  say 'Press enter to continue'
  parse pull dumb1
  "free dsname("dsnlist")"
  exit (12)
end
"lmopen dataid("modataid") option(output) org("orgps")"
if rc <> 0 then do
  say zerrsm
  say zerrlm
  say 'Press enter to continue'
  parse pull dumb1
  "free dsname("dsnlist")"
  exit (12)
end
"lmdinit listid("lstid") level("hlq")"
if rc <> 0 then do             /* test for catalog entries */
  say zerrsm
  say zerrlm
  say 'Press enter to continue'
  parse pull dumb1
  "free dsname("dsnlist")"
  exit (12)                      /* set error and exit */
end
sep = '.'
dsname=' '
/*******************************************************************/
/**    start of mainline                                          **/
/*******************************************************************/
do while (rc = 0)
  "lmdlist listid("lstid") option(list) dataset(dsname) stats(yes)"
  select
    when rc = 0 then do       /* good catalog entry */
      tname = dsname
      parse var tname ll (sep) l2 (sep) l3 (sep) l4 (sep) l5 (sep),
                l6 (sep) l7 (sep) rest
      parse var hlq hl (sep) h2 (sep) h3 (sep) h4 (sep) h5 (sep),
                (sep) endh
      if plusl <> '' then do        /* check for number of levels */
        select
          when plusl = 0 then
            call level0             /*  as entered */
          when plusl = 1 then
            call level1             /*one extra level */
          when plusl = 2 then
            call level2             /* two */
          when plusl = 3 then
            call level3             /* three */
          when plusl = 4 then
            call level4             /* four */
          when plusl = 5 then
            call level5             /* five */
          otherwise
            nop                    /*should never happen */
        end
      end
      else
        call queueit                /* call build list */
    end
    when rc = 8 then do
      leave                         /* done */
    end
    otherwise do
      say zerrsm
      say zerrlm
      say 'Press enter to continue'
      parse pull dumb1
      exit (12)                     /* set error and exit */
    end
  end                               /* end select */
end                                 /* end do     */
"lmdlist listid("lstid") option(free)"
if rc <> 0 then do                  /* free list test  */
  say zerrsm
  say zerrlm
  say 'Press enter to continue'
  parse pull dumb1
  exit (12)                         /* set error and exit */
end

/*****************************************************************/
/* Done processing. Close dataset, free dataid, free and catalog */
/* dataset and finally check to insure ISPF online environment   */
/*****************************************************************/
address ispexec
"lmclose dataid("modataid")"
if rc <> 0 then do
  say zerrsm
  say zerrlm
  say 'Press enter to continue'
  parse pull dumb1
  exit (12)
end
"lmfree dataid("modataid")"
if rc <> 0 then do
  say zerrsm
  say zerrlm
  say 'Press enter to continue'
  parse pull dumb1
  exit (12)
end
address tso
"free dsname("dsnlist") catalog"
address ispexec
If Sysvar('SYSISPF')='ACTIVE' then do
  call EDIT_ISPF
end
else do
  say 'Must be executed with ISPF active' /*should never occur */
  say 'Press enter to continue'
  parse pull dumb1
  exit (12)                         /* set error and exit */
end
say 'Ending SELCTDSN - press Enter to continue'
parse pull endit
exit 0
/***************************************************************/
/**            called routines                                **/
/***************************************************************/
level0:                             /* no extra levels */
select
  when hlcnt = 1 then               /* test the number of entered */
    if l2 = ' ' then                /* levels, then find the first*/
      call queueit                  /* blank level in search results */
  when hlcnt = 2 then
    if l3 = ' ' then
      call queueit
  when hlcnt = 3 then
    if l4 = ' ' then
      call queueit
  when hlcnt = 4 then
    if l5 = ' ' then
      call queueit
  when hlcnt = 5 then
    if l6 = ' ' then
      call queueit
  otherwise
    nop
end
return

level1:                             /* one extra level requested */
select
  when hlcnt = 1 then
    if l3 = ' ' then
      call queueit
  when hlcnt = 2 then
    if l4 = ' ' then
      call queueit
  when hlcnt = 3 then
    if l5 = ' ' then
      call queueit
  when hlcnt = 4 then
    if l6 = ' ' then
      call queueit
  when hlcnt = 5 then
    if l7 = ' ' then
      call queueit
  otherwise
    nop
end
return

level2:                             /* two extra levels requested */
select
  when hlcnt = 1 then               /* Call test for next levels  */
    call testl4
  when hlcnt = 2 then
    call testl5
  when hlcnt = 3 then
    call testl6
  when hlcnt = 4 then
    call testl7
  when hlcnt = 5 then
    call testrest
  otherwise
    nop
end
return

level3:                             /* three extra levels requested */
select
  when hlcnt = 1 then
    call testl5
  when hlcnt = 2 then
    call testl6
  when hlcnt = 3 then
    call testl7
  when hlcnt = 4 then
    call testrest
  otherwise
    nop
end
return

level4:                             /* four extra levels requested */
select
  when hlcnt = 1 then
    call testl6
  when hlcnt = 2 then
    call testl7
  when hlcnt = 3 then
    call testrest
  otherwise
    nop
end
return

level5:                             /* five extra levels requested */
select
  when hlcnt = 1 then
    call testl7
  when hlcnt = 2 then
    call testrest
  otherwise
    nop
end
return

testl4:
if l4 = ' ' then do                /* Is the next level blank?  */
  if only = 'Y' then do            /* Is only switch on?        */
    if l3 <> ' ' then              /* Lower level not blank ?   */
      call queueit                 /* queue it                  */
    else
      nop                          /* else drop it              */
  end
  else
    call queueit
end
return

testl5:
if l5 = ' ' then do
  if only = 'Y' then do
    if l4 <> ' ' then
      call queueit
    else
      nop
  end
  else
    call queueit
end
return

testl6:
if l6 = ' ' then do
  if only = 'Y' then do
    if l5 <> ' ' then
      call queueit
    else
      nop
  end
  else
    call queueit
end
return

testl7:
if l7 = ' ' then do
  if only = 'Y' then do
    if l6 <> ' ' then
      call queueit
    else
      nop
  end
  else
    call queueit
end
return

testrest:
if rest = ' ' then do
  if only = 'Y' then do
    if l7 <> ' ' then
      call queueit
    else
      nop
  end
  else
    call queueit
end
return

/***************************************************************/
/**    Build output line and write to dataset                 **/
/***************************************************************/
queueit:
line = ' '
dsn = left(dsname,45,' ')
vol = left(zdlvol,7,' ')
org = left(zdldsorg,5,' ')
rec = left(zdlrecfm,4,' ')
len = left(zdllrecl,6,' ')
blk = left(zdlblksz,6,' ')
typ = left(zdldsntp,7,' ')
line = dsn || vol || org || rec || len || blk || typ
"lmput dataid("modataid") mode(invar) dataloc(line),
       datalen(80)"
if rc <> 0 then do
  say zerrsm
  say zerrlm
  say 'Press enter to continue'
  parse pull dumb1
  exit (12)
end
return

/***************************************************************/
/**               Display edit panel                          **/
/***************************************************************/
EDIT_ISPF:
address ispexec
"lminit dataid("modataid") dataset("dsnlist") enq(shr)"
if rc <> 0 then do
  say zerrsm
  say zerrlm
  say 'Press enter to continue'
  parse pull dumb1
  exit (12)
end

"edit dataset("dsnlist")"
if rc > 4 then do
  say rc
  say 'Press enter to continue'
  parse pull dumb1
  exit (12)
end
address tso
"free dsname("dsnlist")"

return
