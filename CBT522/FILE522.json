{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012248000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE522.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE522.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\t'", "DS1TRBAL": "b'O\\xb0'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03\\xe0\\x00\\x00\\x03\\xe0\\x00\\x03\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x16o\\x01\\x01\\x16o\\x144\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-06-15T00:00:00", "modifydate": "2001-06-15T14:34:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 437    FILE:  522\n\n    ORIGINAL DSNAME:  WCBT.CBT437.FILE522\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    8000    PO\n\n   6 MEMBERS COUNTED; CUMULATIVE SIZE IS 914 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   06/15/01    14:34:15    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x16o\\x01\\x01\\x16o\\x140\\x00\\x1f\\x00\\x1f\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-06-15T00:00:00", "modifydate": "2001-06-15T14:30:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "WSBG"}, "text": "\nThis code is only under preliminary/proof-of-concept testing.\nPlease let me know if anyone finds something that needs changing.\n\nLater...\n\n-----Original Message-----\nFrom: Michael Oujesky [SMTP:oujesky@TICNET.COM]\nSent: Thursday, January 18, 2001 8:26 PM\nSubject:      Re: SMF Subroutine\n\nNo, but I have a stand-alone utility that can take an external\nrecord and put an SMF header on it and issues the call to write\nit to SMF.\n\nInterested?\n\nI've offered it to our applications folks to be able to write\napplications level and business statistics for incorporation\ninto a PDB of application data statistics.\n\n - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n Later...\n\n Anyone have an assembler subroutine, callable by COBOL which\n can write user SMF record.  It could save me some time.\n\n Thanks,\n      Craig Kittendorf\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE522": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x01\\x02_\\x01\\x01\\x16o\\x143\\x00\\n\\x00\\x02\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2001-01-25T00:00:00", "modifydate": "2001-06-15T14:33:00", "lines": 10, "newlines": 2, "modlines": 0, "user": "WSBG"}, "text": "//***FILE 522 is from Michael Oujesky, and contains an Assembler    *   FILE 522\n//*           routine to take any user data, and put an SMF Header  *   FILE 522\n//*           on it, so you can write a User SMF Record.            *   FILE 522\n//*                                                                 *   FILE 522\n//*   email:  Michael Oujesky <oujesky@ticnet.com>                  *   FILE 522\n//*                                                                 *   FILE 522\n//*     This is a stand-alone utility that can take an              *   FILE 522\n//*     external record and put an SMF header on it, and            *   FILE 522\n//*     then it issues the call to write it to SMF.                 *   FILE 522\n//*                                                                 *   FILE 522\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SMFWTMM1": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x00\\x00\\x01\\x01\\x08?\\x01\\x01\\x16/\\tD\\x00v\\x00i\\x00\\x00\\xe2\\xe8\\xe2\\xd4\\xd1\\xd6@@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "2001-03-24T00:00:00", "modifydate": "2001-06-11T09:44:00", "lines": 118, "newlines": 105, "modlines": 0, "user": "SYSMJO"}, "text": "         MACRO\n&NAME    SMFWTMM1\nSMFWTMM1 DSECT\nMJORXLEN DS  BL2'0'   RECORD LENGTH\nMJORXSEG DS  BL2'0'   SEGMENT DESCRIPTOR\nMJORXFLG DC  BL1'0'   STANDARD SMF HEADER FLAG BYTE\nMJORXRRF EQU  X'80'      NEW SMF RECORD FORMAT\n*                          - SUBSYSTEM ID FOLLOWS SYSTEM ID\nMJORXSUT EQU  X'40'      SUBTYPE UTILIZED IF ON\nMJORXV4  EQU  X'10'      MVS/ESA Version 4 IF ON\nMJORXESA EQU  X'08'      MVS/ESA VERSION IF ON\nMJORXVXA EQU  X'04'       MVS/XA VERSION IF ON\nMJORXOS  EQU  X'02'     OPERATING SYSTEM IS OS/VS2 (VS2)\nMJORXBFY EQU  X'01'      BERRYMAN MACHINE           (VS1)\nMJORXRTY DC  BL1'0'   RECORD TYPE\nMJORXTME DC  XL4' '   TIME RECORD WAS MOVED TO SMF BUFFER,\n*                       IN HUNDREDTHS OF A SECOND.\nMJORXDTE DC  PL4'0'   DATE RECORD WAS MOVED TO SMF BUFFER,\n*                       IN THE FORM OcyydddF(WHERE 'F' IS THE SIGN)\nMJORXSID DC  CL4' '   SYSTEM IDENTIFIER\nMJORXSSI DC  CL4' '   SUBSYSTEM IDENTIFIER\nMJORXSTY DC  BL2'00'  RECORD SUBTYPE\n*                       1 - DATA\n*                       2 - RUN STATISTICS\n*\n*        SELF DEFINING SECTION\n*\nMJORXNT  DS  BL2      Number of triplets (4)\n         DS  XL2      Reserved\n*\n*   -----------------------------------------------------------------\n*    Product Section Triplet\n*   -----------------------------------------------------------------\n*\nMJORXPOF DS  BL4      Offset to product section\nMJORXPLN DS  BL2      Length of product section\nMJORXPON DS  BL2      Number of product sections\n*\n*   -----------------------------------------------------------------\n*    Execution Statistics Triplet\n*   -----------------------------------------------------------------\n*\nMJORXSOF DS  BL4      Offset to statistics section\nMJORXSLN DS  BL2      Length of statistics section\nMJORXSON DS  BL2      Number of statistics sections\n*\n*   -----------------------------------------------------------------\n*    Task Identification Section Triplet\n*   -----------------------------------------------------------------\n*\nMJORXIOF DS  BL4      OFFSET TO IDENTIFICATION section\nMJORXILN DC  BL2'0'   LENGTH OF IDENTIFICATION sections\nMJORXION DC  BL2'0'   NUMBER OF IDENTIFICATION sections (always 1)\n*\n*   -----------------------------------------------------------------\n*    User Data Section Triplet\n*   -----------------------------------------------------------------\n*\nMJORXDOF DS  BL4      OFFSET TO user supplied data sections\nMJORXDLN DC  BL2'0'   LENGTH OF user supplied data sections (varies)\nMJORXDON DC  BL2'0'   NUMBER OF user supplied data sections (varies)\n*\n*        Product/Subsystem Section\n*\nMJORXPSS DS  0X\nMJORXRVN DC  CL8'0'   RECORD VERSION\nMJORXRVD DC  CL8'0'   RECORD COMPILE DATE\nMJORXPNM DC  CL8'0'   SUBSYTEM/PRODUCT NAME\nMJORXOWN DC  CL16' '  Product owner\nMJORXNAM DC  CL16' '  Product name.\nMJORXVER DC  CL2' '   Product version\nMJORXREL DC  CL2' '   Product release\nMJORXMOD DC  CL2' '   Product mod level\nMJORXSEQ DC  F'0'     Product sequence number\nMJORXSYN DC  CL8' '   Current System Name Value\n*                       (from SYSNAME Parmlib Option)\nMJORXSYP DC  CL8' '   Sysplex name\nMJORXPSL EQU *-MJORXPSS\n*\n*        Job / Session Identification\n*\nMJORXID  DS  0X\nMJORXJBN DC  CL8' '   JMRJOB   JOB OR SESSION NAME\nMJORXRST DC  XL4'0'   JMRENTRY TIME, IN HUNDREDTHS OF A SECOND\n*                                READER RECOGNIZED THE JOB CARD\nMJORXRSD DC  PL4'0'   JMREDATE  DATE READER RECOGNIZED THE JOB\n*                                CARD FOR THIS JOB, IN THE FORM\n*                                OCYYDDDF (WHERE 'F' IS THE SIGN).\nMJORXJNM DC  CL8' '   SSIB/JCTJOBID JES JOB IDENTIFIER\nMJORXSTN DC  BL2'0'   SCTSNUMB    STEP NUMBER\nMJORXSTM DC  CL8' '   SCTSNAME    STEP NAME          MXG STEPNAME\nMJORXPSN DC  CL8' '   SCTSCLPC    STEP THAT INVOKED THE PROCEDURE,\n*                                   BLANK WHEN STEP IS NOT PART OF A\n*                                   PROCEDURE.       MXG PROCSTEP\nMJORXUSR DC  CL20' '  ACTPRGNM    PROGRAMMERS NAME        @G742PJW\nMJORXUIF DC  CL8' '   JMRUSEID    USER IDENTIFICATION (TAKEN\nMJORXRUD DC  CL8' '   ACEEUSRI    RACF USER ID. 0=RACF NOT ACTIVE\nMJORXIDL EQU *-MJORXID\n*\nMJORXHLN EQU *-SMFWTMM1\nMJORXDAT EQU *\n*\n*        Execution Statistics\n*\nMJORXSTS DS  0X\nMJORXBTM DC  XL4'0'   time processing began\nMJORXBDT DC  PL4'0'   date processing began\nMJORXETM DC  XL4'0'   time processing ended\nMJORXETD DC  PL4'0'   date processing ended\nMJORXCNT DC  BL4'0'   number of user records provided\nMJORXERR DC  BL4'0'   number of errors\nMJORXWRI DC  BL4'0'   number of user records written\nMJORXSMF DC  BL4'0'   number of SMF records written\nMJORXLIM DC  BL4'0'   record limit used\nMJORXPFG DC  BL4'0'   PROCESSING FLAGS\nMJORXTOO EQU X'80'    Too many records provided\nMJORXSTL EQU *-MJORXSTS\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SMFWTM00": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01<\\x00\\x00\\x01\\x01\\x04\\x7f\\x01\\x01\\x16?\\x14G\\x02\\xdb\\x012\\x00\\x00\\xe2\\xe8\\xe2\\xd4\\xd1\\xd6@@@@'", "ispf": {"version": "01.60", "flags": 0, "createdate": "2001-02-16T00:00:00", "modifydate": "2001-06-12T14:47:00", "lines": 731, "newlines": 306, "modlines": 0, "user": "SYSMJO"}, "text": "         TITLE 'SMFWTM00 - WRITE USER DATA TO SMF'\nSMFWTM00 CSECT ,\nSMFWTM00 AMODE 31   24\nSMFWTM00 RMODE 24\n&RECTYPE SETA  251\n         PRINT NOGEN\n*---------------------------------------------------------------------*\n*R0       EQU   0     PARAMETERS\n*R1       EQU   1     PARAMETERS\n*R2       EQU   2\n*R3       EQU   3\n*R4       EQU   4\n*R5       EQU   5     POINTER TO SMF RECORD RDW\n*R6       EQU   6     PASSED PARAMETER (LENGTH, THEN PARM TEXT)\n*R7       EQU   7     PASSED PARAMETER POINTER\n*R8       EQU   8     DATA INSERTION LOCATION\n*R9       EQU   9\n*R10      EQU   10\n*R11      EQU   11\n*R12      EQU   12   BASE REGISTER\n*R13      EQU   13   SAVE AREA POINTER\n*R14      EQU   14   RETURN POINT\n*R15      EQU   15   ENTRY POINT, LINKAGE REGISTER, RETURN CODE\n*---------------------------------------------------------------------*\n*-------------------------------------------------------------------*/\n*                                                                   */\n*  REGISTER USAGE:                                                  */\n*                                                                   */\n*       R12 - BASE 1                                                */\n*-------------------------------------------------------------------*/\n                                                                EJECT\n         USING SMFWTM00,R15\n         SAVE  (14,12),,SMFWTM00\n         B     IDXX\n         DC    C'SMFWTM00'\nVERSION  DC    CL8'V1.0.0 '\nCOMPDATE DC    CL8'&SYSDATC'\n         DC    C' &SYSTIME'\n         DC    C' '\n         DS    0D\nMAINSAVE DC    18F'0'\n                                                                SPACE\nIDXX     DS    0F\n         DROP  R15\n         LR    R12,R15                 SET MY BASE 1\n         USING SMFWTM00,R12\n                                                                SPACE\n         LR    R4,R13                  PTR TO SAVEAREA\n         LA    R13,MAINSAVE            MY AREA\n         ST    R13,8(R4)               CHAIN IN\n         ST    R4,4(R13)               CHAIN BACK\n                                                                SPACE\n         L     R7,0(R1)                PUT PARM IN SAFE REG\n         SR    R6,R6                   CLEAR LENGTH REG\n         LH    R6,0(R7)                GET LENGTH OF PARM\n         LTR   R6,R6                   PARM ZERO?\n         BZ    NOPARM                  YES, GO SET AND QUIT\n*\n* PARM STUFF GOES HERE - TWO BYTES OF LENGTH, THEN TEXT OF PARM\n*\nNOPARM   DS    0H\n                                                                EJECT\n         TIME  BIN\n         ST    R0,BEGTIME\n         ST    R1,BEGDATE\n                                                                SPACE\n         OPEN  (USERDATA,INPUT)\n                                                                SPACE\n         TM    USERDATA+DCBOFLGS-IHADCB,DCBOFOPN SUCCESSFUL OPEN\n         BNO   BADOPEN\n                                                                SPACE\n         LH    R15,USERDATA+DCBLRECL-IHADCB PICK UP MAXIMUM RECORD LEN\n                                                                SPACE\n         C     R15,=AL4(32768-MJORXHLN)  TOO BIG TO FIT?\n         BH    BADLRECL\n                                                                SPACE\n         GETMAIN R,LV=32768,LOC=BELOW\n         LTR  R15,R15\n         BNZ  BADGETM\n                                                                SPACE\n         LR   R5,R1          PICK UP ADDRESS OF STORAGE\n         USING SMFWTMM1,R5\n                                                                EJECT\n         SMFRTEST RECTYPE=&RECTYPE,SUBTYPE=0\n                                                                SPACE\n         ST   R15,SMFRTEST   SAVE RETURNED VALUE\n                                                                SPACE\n         LTR  R15,R15\n         BNZ  BADRTEST\n                                                                EJECT\n         MVC   MJORXSEG,=D'0'\n                                                                SPACE\n         MVI   MJORXFLG,X'D8'\n         MVI   MJORXRTY,&RECTYPE\n                                                                SPACE\n         L     R9,CVTPTR             POINT TO CVT\n         L     R9,CVTSMCA-CVT(0,R9)  POINT TO SMCA\n         LTR   R9,R9\n         BNM   NOTACTIVE\n         MVC   MJORXSID,SMCASID-SMCABASE(R9) INSERT SMF ID\n                                                                SPACE\n         MVC   MJORXSSI,=C'MJO1'\n         MVC   MJORXSTY,=H'1'\n                                                                SPACE\n         MVC   MJORXNT,=H'4'\n         MVC   MJORXNT+2(2),=D'0'  ZERO OUT RESERVED BYTES\n                                                                SPACE\n         MVC   MJORXPOF,=AL4(MJORXPSS-SMFWTMM1)\n         MVC   MJORXPLN,=AL2(MJORXPSL)\n         MVC   MJORXPON,=H'1'      ONLY ONE PRODUCT SECTION\n                                                                SPACE\n         MVC   MJORXSOF,=D'0'      NO EXECUTION STATISTICS\n         MVC   MJORXSLN,=D'0'      NO EXECUTION STATISTICS\n         MVC   MJORXSON,=D'0'      NO EXECUTION STATISTICS\n                                                                SPACE\n         MVC   MJORXIOF,=AL4(MJORXID-SMFWTMM1)\n         MVC   MJORXILN,=AL2(MJORXIDL)\n         MVC   MJORXION,=H'1'      ONLY ONE TASK IDENTIFICATION SECTION\n                                                                SPACE\n         MVC   MJORXDON,=D'0'      NO DATA SECTIONS INSERTED YET\n*        MVC   MJORXDLN,=D'0'      DEFAULT IS VARIABLE LENGTH SECTIONS\n*        TM    USERDATA+DCBRECFM-IHADCB,DCBRECF FIXED LENGTH RECORDS?\n*        BNO   NOTF\n*        MVC   MJORXDLN,USERDATA+DCBLRECL-IHADCB INSERT FIXED REC LEN\n*OTF     EQU   *\n                                                                EJECT\n         MVC   MJORXRVN,VERSION\n         MVC   MJORXRVD,COMPDATE\n         MVC   MJORXPNM,=C'MJOURECS'\n                                                                SPACE\n         L     R9,CVTPTR                  POINT TO CVT\n         MVC   MJORXSYN,CVTSNAME-CVT(R9)  INSERT SYSNAME\n                                                                SPACE\n         L     R9,CVTECVT-CVT(0,R9)       POINT TO ECVT\n         MVC   MJORXOWN,ECVTPOWN-ECVT(R9) PRODUCT OWNER\n         MVC   MJORXNAM,ECVTPNAM-ECVT(R9) PRODUCT NAME\n         MVC   MJORXVER,ECVTPVER-ECVT(R9) PRODUCT VERSION\n         MVC   MJORXREL,ECVTPREL-ECVT(R9) PRODUCT RELEASE\n         MVC   MJORXMOD,ECVTPMOD-ECVT(R9) PRODUCT MODIFICATION LEVEL\n         MVC   MJORXSEQ,ECVTPSEQ-ECVT(R9) PRODUCT SEQUENCE NUMBER\n                                                                SPACE\n         L     R9,ECVTIPA-ECVT(0,R9)      POINT TO IPA\n         MVC   MJORXSYP,IPASXNAM-IPA(R9)  INSERT SYSPLEX NAME\n                                                                SPACE\n         L     R9,PSAAOLD-PSA        POINT TO CURRENT ASCB\n         CLC   ASCBJBNI-ASCB(4,R9),=D'0'  EMPTY\n         BE    TSO\n         L     R15,ASCBJBNI-ASCB(R9) POINT TO JOBNAME\n         MVC   MJORXJBN,0(R15)       INSERT JOBNAME\n                                                                SPACE\n         CLC   MJORXJBN,=D'0'        ZERO?\n         BNE   JOBDONE\n                                                                SPACE\nTSO      EQU   *\n         CLC   ASCBJBNI-ASCB(4,R9),=D'0'  EMPTY\n         BE    TSO\n         L     R15,ASCBJBNS-ASCB(R9) POINT TO TASK NAME\n         MVC   MJORXJBN,0(R15)       INSERT JOBNAME\n                                                                SPACE\nJOBDONE  EQU   *\n                                                                SPACE\n         L     R9,ASCBASSB-ASCB(R9) POINT TO SECONDARY BLOCK\n         L     R9,ASSBJSAB-ASSB(R9) POINT TO JOB SCHEDULER ADDR SPC BLK\n         MVC   JESJOBNO,JSABJBID-JSAB(R9)  INSERT JES JOB NUMBER\n***      MVC   MJORXJBN,JSABJBNM-JSAB(R9) INSERT JOB NAME\n                                                                EJECT\n         IAZXJSAB READ,WORKID=WORKID,JOBID=JOBID,JOBNAME=JOBNAME,      +\n               USERID=USERID,PREFIX=PREFIX,COMPID=COMPID,              +\n               EXECST=EXECST,XCFGPNM=XCFGPNM,JESTAT=JESTAT,            +\n               JSABLVL=JSABLVL\n                                                                EJECT\n         MVC   MJORXJNM,JOBID\n***      MVC   MJORXUIF,USERID\n                                                                SPACE\n         L     R9,PSATOLD-PSA    POINT TO CURRENT TCB\n         L     R9,TCBTCT-TCB(R9) POINT TO SMF TIMING CNTL TBL\n         N     R9,=X'00FFFFFF'\n         L     R9,TCTJMR-SMFTCT(0,R9) POINT TO JOB MANAGEMENT RECORD\n***      MVC   MJORXJBN,JMRJOB-JMR(R9)\n         MVC   MJORXRST(8),JMRENTRY-JMR(R9)\n         MVC   STEPNUM,JMRSTEP-JMR(R9)   JMRSTEP IS ONE BYTE LONG\n         MVC   MJORXUIF,JMRUSEID-JMR(R9)\n                                                                SPACE\n         L     R9,PSATOLD-PSA     POINT TO CURRENT TCB\n         L     R9,TCBJSCB-TCB(R9) POINT TO JOBSTEP CNTL BLK\n         N     R9,=X'00FFFFFF'\n         XC    EPA,EPA            CLEAR WORK AREA\n         MVC   EPA+SWVA-ZB505(3),JSCJCTP-IEZJSCB(R9) INSERT SVA\n         LA    R15,EPA\n         ST    R15,SWEPAPTR\n         SWAREQ FCODE=RL,EPA=SWEPAPTR,MF=(E,SWAPARMS),UNAUTH=YES\n         LTR   R15,R15\n         BNZ   BADSWARQ\n         L     R9,EPA+SWBLKPTR-ZB505\n                                                                SPACE\n***      MVC   MJORXJBN,JCTJNAME-JCT(R9)\n***      MVC   MJORXJNM,JCTJOBID-JCT(R9)\n         MVC   MJORXRUD,JCTUSER-JCT(R9)  7 BYTE USERID FIELD\n                                                                EJECT\n         XC    EPA,EPA            CLEAR WORK AREA\n         MVC   EPA+SWVA-ZB505(3),JCTACTAD-JCT(R9) INSERT SVA\n         LA    R15,EPA\n         ST    R15,SWEPAPTR\n         SWAREQ FCODE=RL,EPA=SWEPAPTR,MF=(E,SWAPARMS),UNAUTH=YES\n         LTR   R15,R15\n         BNZ   BADSWARQ\n         L     R9,EPA+SWBLKPTR-ZB505\n                                                                SPACE\n         MVC   MJORXUSR,ACTPRGNM-IEFAACTB(R9)\n                                                                EJECT\n         L     R9,PSATOLD-PSA     POINT TO CURRENT TCB\n         L     R9,TCBJSCB-TCB(R9) POINT TO JOBSTEP CNTL BLK\n         N     R9,=X'00FFFFFF'\n         XC    EPA,EPA            CLEAR WORK AREA\n         MVC   EPA+SWVA-ZB505(3),JSCSCTP-IEZJSCB(R9) INSERT SVA\n         LA    R15,EPA\n         ST    R15,SWEPAPTR\n         SWAREQ FCODE=RL,EPA=SWEPAPTR,MF=(E,SWAPARMS),UNAUTH=YES\n         LTR   R15,R15\n         BNZ   BADSWARQ\n         L     R9,EPA+SWBLKPTR-ZB505\n                                                                SPACE\n         MVI   MJORXSTN,0\n         MVC   MJORXSTN+1(1),SCTSNUMB-SCT(R9)\n         MVC   MJORXSTM,SCTSCLPC-SCT(R9)     STEPNAME\n         MVC   MJORXPSN,SCTSNAME-SCT(R9)     PROCSTEP\n                                                                SPACE\n         L     R9,PSATOLD-PSA      POINT TO CURRENT TCB\n         L     R9,TCBTIO-TCB(0,R9) POINT TO TASK I/O TABLE\n***      MVC   MJORXSTM,TIOCJSTN-TIOT1(R9)   STEPNAME\n***      MVC   MJORXPSN,TIOCPSTN-TIOT1(R9)   PROCSTEP\n                                                                EJECT\n         LA    R8,MJORXDAT             POINT TO SOURCE LOCATION\n         SLR   R9,R9                   SET LENGTH OF ZERO AND ZERO FILL\n         LA    R8,=XL4'FF000000'\n         L     R9,=XL4'FF000000'\n         LA    R10,MJORXDAT            POINT TO TARGET LOCATION\n         L     R11,=AL4(32768-MJORXHLN) SET TARGET LENGTH\n         MVCL  R10,R8\n                                                                SPACE\n         LA    R8,MJORXDAT             POINT TO SOURCE LOCATION\n         MVC   MJORXDOF,=AL4(MJORXDAT-SMFWTMM1)\n                                                                SPACE\n         MODESET  KEY=ZERO,MODE=SUP\n                                                                EJECT\nLOOP     EQU   *\n         GET   USERDATA\n         LR    R4,R1       SAVE POINTER TO RECORD\n                                                                SPACE\n         L     R15,INPUT      HOW MANY ALREADY DONE?\n         LA    R15,1(0,R15)\n         ST    R15,INPUT      SAVE FOR NEXT  PASS\n         C     R15,LIMIT      HOW'S THAT COMPARE TO THE MAXIMUM?\n         BH    TOOMANY        OOPS, SORRY\n                                                                SPACE\n         BAL   R14,VALIDATE   SEE IS THIS REORD IS REGISTERED\n                                                                SPACE\n         CLC   MJORXDLN,USERDATA+DCBLRECL-IHADCB   SAME AS LAST?\n         BE    INSERT\n         CLC   MJORXDON,=D'0'      NO DATA SECTIONS INSERTED YET?\n         BE    INS1ST              INSERT FIRST DATA SECTION.\n                                                                SPACE\n         BAL   R14,SMFWTM       WRITE LAST DUE TO CHANGE IN SEGMENT LEN\n                                                                SPACE\nINSERT   EQU  *\n         LR   R14,R8          PICK UP INSERT LOCATION\n         SR   R14,R5          COMPUTE BYTES DONE (LESS RECORD ORIGIN)\n         SLR  R15,R15\n         ICM  R15,B'0011',USERDATA+DCBLRECL-IHADCB INSERT INPUT LENGTH\n         AR   R14,R15         COMPUTE BYTES DONE AFTER INSERT\n                                                                SPACE\n         C    R14,=F'32767'   HOW ARE WE AGAINST MAX SMF REC LEN?\n         BL   INS1ST\n                                                                SPACE\n         BAL  R14,SMFWTM      WE'D HAVE EXCEEDED RECORD LENGTH\n                                                                SPACE\nINS1ST   EQU  *\n         SLR  R15,R15\n         ICM  R15,B'0011',USERDATA+DCBLRECL-IHADCB INSERT INPUT LENGTH\n         STCM R15,B'0011',MJORXDLN                 STORE  INPUT LENGTH\n         LR   R9,R15                               SAME OUTPUT LENGTH\n         LR   R14,R4                               SET INPUT LOCATION\n         MVCL R8,R14               INSERT DATA INTO RECORD\n                                                                SPACE\n         L    R15,OUTPUT           PICK UP COUNT OF INSERTED SEGMENTS\n         LA   R15,1(0,R15)\n         ST   R15,OUTPUT           SAVE UP COUNT OF INSERTED SEGMENTS\n                                                                SPACE\n         SLR  R15,R15\n         ICM  R15,B'0011',MJORXDON        INSERT SEGMENT COUNT\n         LA   R15,1(0,R15)                INCREMENT BY ONE\n         STCM R15,B'0011',MJORXDON        SAVE FOR NEXT TIME\n                                                                SPACE\n         B    LOOP                 AND RETURN FOR ANOTHER SECTION\n                                                                EJECT\nTOOMANY  EQU  *\n         WTO   'RECORD LIMIT REACHED, TERMINATING RUN'\n         OI    FLAGS,MJORXTOO   SHOW LIMIT WAS REACHED\nTOOMANYG GET   USERDATA\n         LA    R15,1(0,R15)\n         ST    R15,INPUT      SAVE FOR NEXT  PASS\n         B     TOOMANYG       RUN OUT INPUT DATA, COUNTING RECORDS\n                                                                EJECT\n*        LR   R4,R15\n                                                                SPACE\n*        CVD   R4,DOUBWORD\n                                                              SPACE 1\n*        MVC   WTMWTOL+28(4),RCPAT\n                                                              SPACE 1\n*        ED    WTMWTOL+28(4),DOUBWORD+6\n                                                                SPACE\n*        MVI   WTMWTOL+28,C' '\n                                                                SPACE\n**       CVD   R9,DOUBWORD\n                                                              SPACE 1\n*        MVC   WTMWTOL+14(4),NUMPAT\n                                                              SPACE 1\n*        ED    WTMWTOL+14(4),DOUBWORD+6\n                                                                SPACE\n*        MVI   WTMWTOL+14,C' '\n                                                              SPACE 1\n****     WTO   MF=(E,WTMWTOL)\n                                                              SPACE 3\n*********************************************************************\nEODAD    CLOSE (USERDATA,)\n                                                              SPACE 1\n         CLC   MJORXDON,=D'0'    ANY DATA SEGMENTS TO WRITE?\n         BNE   STATWRIT\n                                                              SPACE 1\n         BAL   R14,SMFWTM\n                                                              SPACE 1\nSTATWRIT TIME  BIN\n         ST    R0,ENDTIME\n         ST    R1,ENDDATE\n                                                              SPACE 1\n         MVC   MJORXSTY,=AL2(2)\n         MVC   MJORXDOF,=D'0'      NO DATA SECTIONS\n                                                              SPACE 1\n         ST    R8,MJORXSOF\n         MVC   0(MJORXSTL,R8),BEGTIME   INSERT STATISTICS SECTION\n         LA    R8,MJORXSTL(0,R8)        POINT PAST DATA\n         MVC   MJORXSLN,=AL2(MJORXSTL)\n         MVC   MJORXSON,=AL2(1)\n                                                              SPACE 1\n         BAL   R14,SMFWTM\n                                                              SPACE 1\nDONE     DS    0D\n         L     R13,4(R13)\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\n         TITLE 'SMFWTM00 - WRITE SMF RECORD'\nSMFWTMRE DC    D'0'\n                                                              SPACE 3\nSMFWTM   EQU   *\n         ST    R14,SMFWTMRE\n                                                                SPACE\n         LR    R15,R8              PICK UP INSERTION POINT\n         SR    R15,R5              LESS ORIGIN OF RECORD GIVES LENGTH\n         STH   R15,MJORXLEN        SET LENGTH OF RECORD\n                                                              SPACE 3\n         STIMER WAIT,DINTVL=DINTVL  LET'S NOT OVERWHELM SMF\n                                                                SPACE\n         TIME  BIN\n         STCM  R0,B'1111',MJORXTME\n         STCM  R1,B'1111',MJORXDTE\n                                                                SPACE\n*BNDS0C1 DC    H'0' FORCE S0C1 ABEND\n         SMFWTM (R5)\n                                                                SPACE\n         LTR  R15,R15\n         BNZ  BADWTM\n                                                                SPACE\n         L    R15,SMF              PICK UP COUNT OF SMF RECORDS WRITTEN\n         LA   R15,1(0,R15)\n         ST   R15,SMF              SAVE UP COUNT OF SMF RECORDS WRITTEN\n                                                                SPACE\n         LA    R8,MJORXDAT             POINT TO SOURCE LOCATION\n         SLR   R9,R9                   SET LENGTH OF ZERO AND ZERO FILL\n         LA    R8,=XL4'FF000000'\n         L     R9,=XL4'FF000000'\n         LA    R10,MJORXDAT            POINT TO TARGET LOCATION\n         L     R11,=AL4(32768-MJORXHLN) SET TARGET LENGTH\n         MVCL  R10,R8\n                                                                SPACE\n         LA    R8,MJORXDAT             POINT TO SOURCE LOCATION\n         MVC   MJORXDOF,=AL4(MJORXDAT-SMFWTMM1)\n         MVC   MJORXDON,=D'0'      NO DATA SECTIONS INSERTED YET\n                                                              SPACE 3\n         L     R14,SMFWTMRE\n         BR    R14\n         TITLE 'SMFWTM00 - VALIDATE RECORD REGISTERED WITH SYSTEM'\n         DS    0D\nVALIDATE ST    R14,VALIDRET\n                                                                SPACE\n         LR    R14,R4            POINT TO RECORD\n                                                                SPACE\n         TM    USERDATA+DCBRECFM-IHADCB,DCBRECF FIXED LENGTH RECORDS?\n         BO    NOTFIXED\n                                                                SPACE\n         LA    R14,4(0,R14)      POINT PAST RDW FOR RECFM=V RECORDS\nNOTFIXED EQU   *\n                                                                SPACE\n         L     R15,LASTLOC       PICK UP LAST LOCATION IN TABLE\n         C     R15,=D'0'         BEEN HERE BEFORE?\n         BNE   SEARCH            NO, THEN CAN'T USE SIMPLE  CHECK\n                                                                SPACE\n         L     R15,=A(REGISTRY)\n                                                                SPACE\nSEARCH   CLC   0(16,R15),0(R14)  REGISTERED WITH US?\n         BE    VALID\n         CLC   0(08,R15),0(R14)  AT LEAST MODULE?\n         BE    KNOWNMOD\n                                                                SPACE\nNEXTREG  LA    R15,16(0,R15)     POINT TO NEXT TABLE ENTRY\n                                                                SPACE\n         CLC   =X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF',0(R15) END OF TBL?\n         BNE   SEARCH\n                                                                EJECT\n         L    R15,INVALID          PICK UP COUNT OF INVALID SEGMENTS\n         LA   R15,1(0,R15)\n         ST   R15,INVALID          SAVE UP COUNT OF INVALID SEGMENTS\n                                                                SPACE\n         CLI   WARNED,C'Y'\n         BE    VALIDONE\n         MVI   WARNED,C'Y'\n                                                                SPACE\n         CLI   KNOWN,C'Y'\n         BE    KNOWNWTO\n                                                                SPACE\nUNKWNWTO EQU   *\n         MVC   UNKWNTXT+27(8),0(R14)\n         MVC   UNKWNTXT+36(8),8(R14)\n                                                                SPACE\n         L     R14,=A(XLATETBL)\n         TR    UNKWNTXT+27(17),0(R14)  ENSURE READIBLE\n                                                                SPACE\n         LA    R2,UNKWNMSG\n         WTO   TEXT=((2)),ROUTCDE=(11),DESC=(7)\n                                                                SPACE\n         B     VALIDONE\n                                                                SPACE 3\nKNOWNWTO EQU   *\n         MVC   KNOWNTXT+25(8),0(R14)\n         MVC   KNOWNTXT+34(8),8(R14)\n                                                                SPACE\n         L     R14,=A(XLATETBL)\n         TR    KNOWNTXT+25(17),0(R14)  ENSURE READIBLE\n                                                                SPACE\n         LA    R2,KNOWNMSG\n         WTO   TEXT=((2)),ROUTCDE=(11),DESC=(7)\n                                                                SPACE\n         B     VALIDONE\n                                                                SPACE 3\nKNOWNMOD MVI   KNOWN,C'Y'\n         B     NEXTREG\n                                                                EJECT\nVALID    ST    R15,LASTLOC  VALIDATED AND LOCATION SAVED FOR NEXT CHECK\n                                                                SPACE\nVALIDONE L     R14,VALIDRET\n         BR    R14\n                                                                SPACE\n         DS    0D\nVALIDRET DC    F'0'\nLASTLOC  DC    F'0'\nKNOWN    DC    C'N'\nWARNED   DC    C'N'\n         DS    0D\nUNKWNMSG DC    AL2(L'UNKWNTXT)\n*                          1         2         3         4         5\n*                012345678901234567890123456789012345678901234567890\nUNKWNTXT DC    C'RECORD(S) NOT REGISTERED - XXXXXXXX XXXXXXX'\n         DS    0D\nKNOWNMSG DC    AL2(L'KNOWNTXT)\n*                          1         2         3         4         5\n*                012345678901234567890123456789012345678901234567890\nKNOWNTXT DC    C'VERSION NOT REGISTERED - XXXXXXXX XXXXXXX'\n                                                                SPACE\n                                                              SPACE 3\n         TITLE 'SMFWTM00 - LITERAL POOL'\n         DROP  R5\n         LTORG\n         TITLE 'SMFWTM00 - ERROR ROUTINES'\n         PRINT NOGEN\nBADRTEST DS    0D\n         LR    R4,R15\n         WTO   'SMFRTEST MACRO FAILED (RECORD NOT BEING WRITTEN?)'\n         ABEND 0005\n                                                                SPACE\nBADOPEN  DS    0D\n         LR    R4,R15\n         WTO   'UNABLE TO OPEN USERDATA FILE'\n         ABEND 0006\n                                                                SPACE\nBADGETM  DS    0D\n         LR    R4,R15\n         WTO   'UNABLE TO OBTAIN WORKING STORAGE'\n         ABEND 0007\n                                                                SPACE\nNOTACTIVE DS   0D\n         LR    R4,R15\n         WTO   'SMF IS NOT ACTIVE IN THIS SYSTEM'\n         ABEND 0008\n                                                                SPACE\nBADWTM    DS   0D\n         LR    R4,R15\n         WTO   'ERROR DURING SMF WRITE REQUEST'\n         ABEND 0009\n                                                                SPACE\nBADLRECL DS    0D\n         LR    R4,R15\n         WTO   'RECORD LENGTH TOO LONG FOR SMF RECORD'\n         ABEND 0010\n                                                                SPACE\nBADSWARQ DS    0D\n         LR    R4,R15\n         WTO   'SWAREQ FAILURE'\n         ABEND 0011\n         TITLE 'SMFWTM00 - WORKAREAS'\n         DS    0D\n         DC    CL8'SMFRTEST'\nSMFRTEST DC    F'0'\n         DS    0D\n                                                              SPACE 2\nDOUBWORD DC    D'0'\nFULLWORD DC    F'0'\nHALFWORD DC    H'0'\n                                                              SPACE 2\nBEGTIME  DC    F'0'   TIME PROCESSING BEGAN\nBEGDATE  DC    F'0'   DATE PROCESSING BEGAN\nENDTIME  DC    F'0'   TIME PROCESSING ENDED\nENDDATE  DC    F'0'   DATE PROCESSING ENDED\nINPUT    DC    F'0'   NUMBER OF USER RECORDS PROVIDED\nINVALID  DC    F'0'   NUMBER OF INVALID/UNREGISTERED RECORDS PROVIDED\nOUTPUT   DC    F'0'   NUMBER OF USER RECORDS WRITTEN\nSMF      DC    F'0'   NUMBER OF SMF  RECORDS WRITTEN\nLIMIT    DC    F'100' MAXIMUM RECORDS THAT CAN BE SENT TO SMF\nFLAGS    DC  BL4'0'   PROCESSING FLAGS\n                                                              SPACE 2\nSNAPDUMP DCB   DDNAME=SNAPDUMP,                                        +\n               DSORG=PS,RECFM=VBA,MACRF=(W),LRECL=125,BLKSIZE=882\nSNAPCNT  DC     F'0'\nSNAPLIST DC    4F'0'\n         DS    0D\nSNAPREGS DC   18F'0'\nUSERDATA DCB   DDNAME=USERDATA,BFTEK=A,DSORG=PS,MACRF=(GL),            +\n               DCBE=USERDCBE,EODAD=EODAD\nUSERDCBE DCBE RMODE31=BUFF\n         TITLE 'SMFWTM00 - SNAP DUMP STUFF'\n                                                                SPACE\n*        OPEN  (SNAPDUMP,OUTPUT)\n*        ST    R5,SNAPLIST\n*        ST    R8,SNAPLIST+4\n*        ST    R12,SNAPLIST+8\n*        MVI   SNAPLIST+8,X'00'\n*        LA    R2,MJO1DATA\n*        ST    R2,SNAPLIST+12\n*        MVI   SNAPLIST+12,X'80'\n*        STM   R0,R15,SNAPREGS\n*        LA    R2,SNAPREGS\n*        ST    R2,SNAPLIST\n*        LA    R2,72(0,R2)\n*        ST    R2,SNAPLIST+4\n*        MVI   SNAPLIST+4,X'80'\n*        L     R2,SNAPCNT\n*        LA    R2,1(0,R2)\n*        ST    R2,SNAPCNT\n*        SNAP  DCB=SNAPDUMP,ID=(2),PDATA=(REGS)\n*        SNAP  DCB=SNAPDUMP,ID=(2),LIST=SNAPLIST\n*        SNAP  DCB=SNAPDUMP,ID=(2),LIST=SNAPLIST,PDATA=(REGS)\n*        CLOSE (SNAPDUMP,)\n         TITLE 'SMFWTM00 - CONSTANTS'\n         DS    0D\n         DC    CL8'DINTVL  '\n*                   H H M M S S H\nDINTVL   DC    XL8'00000000000010'\n                                                              SPACE 2\nNUMPAT   DS   0XL04\n         DC    X'40'                   PAD CHARACTER\n         DC    X'202020'\n*                 N N N\n                                                              SPACE 2\nRCPAT    DS   0XL04\n         DC    X'F1'                   PAD CHARACTER\n         DC    X'202020'\n*                 N N N\n                                                              SPACE 2\nJOBNAME  DC   D'0'\nWORKID   DC   D'0'\nJOBID    DC   D'0'\nUSERID   DC   D'0'\nPREFIX   DC   D'0'\nCOMPID   DC   D'0'\nEXECST   DC   D'0'\nXCFGPNM  DC   D'0'\nJESTAT   DC   D'0'\nJSABLVL  DC   D'0'\nJESJOBNO DC   D'0'\n                                                              SPACE 2\nSTEPNUM  DC   F'0'\n                                                              SPACE 2\n         DS    0D\nSWEPAPTR DS    F\n         DS    0D\nEPA      DC    CL(L'SWAEPAX)' '\n         DS    0D\nQMPA     DS    CL(QMPLEN)\n         DS    0D\nSWAPARMS SWAREQ MF=L\n                                                              SPACE 2\nMJO1LEN  DC    Y(MJO1DATA)\nMJO1DATA EQU   *\n         DROP  R12\n         TITLE 'SMFWTM00 - READIBILITY TRANSLATE TABLE'\n         PRINT DATA\nXLATETBL CSECT\n                                                              SPACE\n DC  CL256' ' PRESET ALL TO BLANKS\n                                                              EJECT\n ORG XLATETBL+C'\u00a2'\n           DC C'\u00a2.<(+|'\n ORG XLATETBL+C'&&'\n           DC C'&&'\n ORG XLATETBL+C'!'\n           DC C'!$*);\u00ac'\n ORG XLATETBL+C'-'\n           DC C'-/'\n ORG XLATETBL+C'\u00a6'\n           DC C'\u00a6,%_>?'\n ORG XLATETBL+C'`'\n           DC C'`:#@''=\"'\n                                                              SPACE\n ORG XLATETBL+C'A'\n           DC C'ABCDEFGHI'\n ORG XLATETBL+C'J'\n           DC C'JKLMNOPQR'\n ORG XLATETBL+C'S'\n           DC C'STUVWXYZ'\n                                                              SPACE\n ORG XLATETBL+C'{'\n           DC C'{ABCDEFGHI'\n ORG XLATETBL+C'}'\n           DC C'}JKLMNOPQR'\n                                                              SPACE\n ORG XLATETBL+C'~'\n           DC C'~'\n                                                              SPACE\n ORG XLATETBL+C'S'\n           DC C'STUVWXYZ'\n                                                              SPACE\n ORG XLATETBL+C'\\'\n           DC C'\\'\n                                                              SPACE\n ORG XLATETBL+C'0'\n           DC C'0123456789'\n                                                              SPACE\n         TITLE 'SMFWTM00 - DATA AREA MAPPINGS'\nREGISTRY CSECT\n                                                              SPACE 2\n DC CL8'XYZ123AA',CL8'0.0.0.1'\n                                                              SPACE 2\n DC X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' END OF TABLE\n         PRINT NODATA\n         TITLE 'SMFWTM00 - DATA AREA MAPPINGS'\n         PRINT GEN\n SMFWTMM1\n                                                                EJECT\n         PUSH PRINT\n         PRINT OFF\n IHAPSA  DSECT=YES,LIST=YES PREFIXED STORAGE AREA\n                                                                EJECT\n CVT     DSECT=YES,LIST=YES COMMUNICATIONS VECTOR TABLE\n                                                                EJECT\n IHAECVT DSECT=YES,LIST=YES COMMUNICATIONS VECTOR TABLE\n                                                                EJECT\n IHAASCB DSECT=YES,LIST=YES ADDRESS SPACE CONTROL BLOCK\n                                                                EJECT\n IKJTCB  DSECT=YES,LIST=YES TASK CONTROL BLOCK\n                                                                EJECT\n IHASTCB LIST=YES  SECONDARY TASK CONTROL BLOCK (TCB)\n                                                                EJECT\n IEZJSCB ,  JOB-STEP CONTROL BLOCK\n                                                                EJECT\nSCT      DSECT\n IEFASCTB , STEP CONTROL TABLE\n                                                                EJECT\n IHAASSB LIST=YES  ADDRESS SPACE SECONDARY BLOCK\n                                                                EJECT\n IEESMCA , SMF CONTROL TABLE\n                                                                EJECT\n IEESMCX , SMF CONTROL TABLE EXTENSION\n                                                                EJECT\n IHAIPA  DSECT=YES,LIST=YES  INITIALIZATION PARAMETER AREA\n                                                                EJECT\nTIOT     DSECT\n         IEFTIOT1 , TASK I/O TABLE\n                                                                EJECT\n IEFTCT   DSECT=YES  SMF TIMING CONTROL TABLE\n                                                                EJECT\n IEFJMR   , JOB MANAGEMENT RECORD\n                                                                EJECT\n IAZJSAB  DSECT=YES,LIST=YES JOB SCHEDULER ADDR SPACE CNTL BLOCK\n                                                                EJECT\nJCT       DSECT\n          IEFAJCTB , OS/390 JOB CONTROL TABLE\n                                                                EJECT\n $HASPEQU , EQUATES FOR JES2\n                                                                EJECT\n*$BUFFER  ,           HASP BUFFER\n                                                                EJECT\n*$JCT     ,            JES2 JOB CONTROL TABLE\n                                                                EJECT\n IEFJESCT TYPE=DSECT,MNTBL=NO  JOB ENTRY SUBSYSTEM COMMUNICATION TABLE\n                                                                EJECT\n IEFZB505 LOCEPAX=YES EPA MAPPING FOR LOCATE MODE SWA\n                                                                EJECT\n IEFZB506 MOVEPAX=YES EPA MAPPING FOR MOVE MODE SWA MANAGER\n                                                                EJECT\n IEFQMIDS , CONSTANTS FOR SWA BLOCK IDS\n                                                                EJECT\n IEFQMNGR , SWA MANAGER PARAMETER AREA\nQMPLEN   EQU    QMPCL-IOPARAMS+L'QMPCL\n                                                                EJECT\n         DCBD    DSORG=PS,DEVD=(DA,TA)\n         POP  PRINT\n                                                                EJECT\n******** COPY SYSVARS\n                                                                EJECT\nSMFWTM00 CSECT\n         DC    C' SMFWTM00 '\n         END   SMFWTM00,(C'OUJESKY',0808,52301)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TESTJCL": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x99\\x00\\x7f\\x01\\x01\\x16?\\x14G\\x00\\x0c\\x00\\x12\\x00\\x00\\xe2\\xe8\\xe2\\xd4\\xd1\\xd6@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-01-07T00:00:00", "modifydate": "2001-06-12T14:47:00", "lines": 12, "newlines": 18, "modlines": 0, "user": "SYSMJO"}, "text": "//TESTDATA EXEC SAS\n//TESTDATA DD   DISP=(NEW,PASS),DSN=&&TESTDATA,\n//         SPACE=(CYL,(1,1)),RECFM=VB,LRECL=200,BLKSIZE=0,DSORG=PS\nDATA _NULL_; FILE TESTDATA;\n     DO _I_ = 1 TO 110;\n     PUT @1 'FMC701A01.1.1.1 ' _I_ Z4. @_I_+25 \"X\" ; END;\n     STOP;\n//SMFWTM00 EXEC PGM=SMFWTM00\n//STEPLIB  DD   DISP=SHR,DSN=??????????????\n//SNAPDUMP DD   SYSOUT=*\n//SYSUDUMP DD   SYSOUT=*\n//USERDATA DD   DISP=OLD,DSN=&&TESTDATA\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT522/FILE522.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT522", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}