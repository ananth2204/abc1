{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012804000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1763580, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE783.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1763580, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1763580, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE783.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x1c\\x0c'", "DS1TRBAL": "b'P8'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05T\\x00\\x02\\x05V\\x00\\x00\\x00\\x1d'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04M\\x00\\x00\\x01\\x08\\x12o\\x01\\x08\\x12o\\x13F\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf7@@@'", "ispf": {"version": "04.77", "flags": 0, "createdate": "2008-05-05T00:00:00", "modifydate": "2008-05-05T13:46:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-477"}, "text": "REGULAR CBT TAPE - VERSION 477    FILE:  783\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT477.FILE783\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 15 MEMBERS COUNTED; CUMULATIVE SIZE IS 16,440 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   05/05/08    13:46:28    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE783": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04M\\x00\\x00\\x01\\x08\\x12o\\x01\\x08\\x12o\\x13F\\x00\\x04\\x00\\x04\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf7@@@'", "ispf": {"version": "04.77", "flags": 0, "createdate": "2008-05-05T00:00:00", "modifydate": "2008-05-05T13:46:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "CBT-477"}, "text": "//***FILE 783 is the PL/I Scientific Subroutine Package for PL/I    *   FILE 783\n//*           (OS) which carries a \"360\" designation, so I think    *   FILE 783\n//*           it is public domain.                                  *   FILE 783\n//*                                                                 *   FILE 783\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FILE01": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00!\\x01\\x06\\x04O\\x01\\x06\\x04O\\x14\\x01)\\x9f)\\x9f\\x00\\x00\\xd7\\xd3\\xf1\\xe2\\xe2\\xd7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-02-13T00:00:00", "modifydate": "2006-02-13T14:01:21", "lines": 10655, "newlines": 10655, "modlines": 0, "user": "PL1SSP"}, "text": " MSCS..                                                                 MSCS  10\n /*********************************************************************/MSCS  20\n /*                                                                   */MSCS  30\n /*      CONVERT THE STORAGE ALLOCATION OF A SYMMETRIC MATRIX         */MSCS  40\n /*      FROM A TWO-DIMENSIONAL ARRAY TO A LINEAR ARRAY               */MSCS  50\n /*                                                                   */MSCS  60\n /*********************************************************************/MSCS  70\n    PROCEDURE(Q,N,EPS,S),.                                              MSCS  80\n    DECLARE                                                             MSCS  90\n         (Q(*,*),EPS,S(*),Q1,Q2,M)                                      MSCS 100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MSCS 110\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MSCS 120\n         (N,I,K,L)BINARY FIXED,                                         MSCS 130\n         ERROR EXTERNAL CHARACTER(1),.                                  MSCS 140\n    ERROR='0',.                        /*PRESET ERROR INDICATOR       */MSCS 150\n    L    =0,.                                                           MSCS 160\n    IF N GT 0                          /*TEST SPECIFIED DIMENSION     */MSCS 170\n    THEN DO I =1 TO N,.                                                 MSCS 180\n              DO K =1 TO I,.                                            MSCS 190\n              L    =L+1,.                                               MSCS 200\n              Q1   =Q(I,K),.           /*REPLACE Q1 BY Q(I,K)         */MSCS 210\n              Q2   =Q(K,I),.           /*REPLACE Q2 BY Q(K,I)         */MSCS 220\n              S(L),M=(Q1+Q2)*0.5,.     /*SET RES. S(L) =(Q1+Q2)/2     */MSCS 230\n              IF ABS(Q1-Q2) GT         /*TEST FOR SYMMETRY OF Q       */MSCS 240\n                   EPS*MAX(1,ABS(M))                                    MSCS 250\n              THEN ERROR='S',.         /*Q IS NOT SYMMETRIC           */MSCS 260\n              END,.                                                     MSCS 270\n         END,.                                                          MSCS 280\n    ELSE ERROR='D',.                   /*ERROR IN SPECIFIED DIMENSION */MSCS 290\n    END,.                              /*END OF PROCEDURE MSCS        */MSCS 300\n MSCG..                                                                 MSCG  10\n /*********************************************************************/MSCG  20\n /*                                                                   */MSCG  30\n /*      CONVERT THE STORAGE ALLOCATION OF A SYMMETRIC MATRIX         */MSCG  40\n /*      FROM A LINEAR ARRAY TO A TWO-DIMENSIONAL ARRAY               */MSCG  50\n /*                                                                   */MSCG  60\n /*********************************************************************/MSCG  70\n    PROCEDURE(S,N,Q),.                                                  MSCG  80\n    DECLARE                                                             MSCG  90\n         (S(*),Q(*,*))                                                  MSCG 100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MSCG 110\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MSCG 120\n         (N,I,K,L)BINARY FIXED,.                                        MSCG 130\n    L    =0,.                                                           MSCG 140\n    IF N GT 0                          /*TEST SPECIFIED DIMENSION     */MSCG 150\n    THEN DO I =1 TO N,.                                                 MSCG 160\n              DO K =1 TO I,.                                            MSCG 170\n              L    =L+1,.                                               MSCG 180\n              Q(I,K),Q(K,I)=S(L),.     /*STORE Q(I,K) AND Q(K,I)      */MSCG 190\n              END,.                                                     MSCG 200\n         END,.                                                          MSCG 210\n    END,.                              /*END OF PROCEDURE MSCG        */MSCG 220\n MAGS..                                                                 MAGS  10\n /*********************************************************************/MAGS  20\n /*                                                                   */MAGS  30\n /*      ADD OR SUBTRACT A SQUARE AND A SYMMETRIC MATRIX              */MAGS  40\n /*                                                                   */MAGS  50\n /*********************************************************************/MAGS  60\n    PROCEDURE(A,B,N,OPT,C),.                                            MAGS  70\n    DECLARE                                                             MAGS  80\n         (A(*,*),B(*),C(*,*),AL,BL)                                     MAGS  90\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MAGS 100\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MAGS 110\n         (N,I,K,L,LI)BINARY FIXED,                                      MAGS 120\n         OPT CHARACTER(1),.                                             MAGS 130\n    IF N GT 0                          /*IS N GREATER THAN ZERO       */MAGS 140\n    THEN DO,.                                                           MAGS 150\n         LI,I =1,.                                                      MAGS 160\n NEXTI..                                                                MAGS 170\n         L    =LI,.                                                     MAGS 180\n         K    =1,.                                                      MAGS 190\n NEXTK..                                                                MAGS 200\n         AL   =A(I,K),.                /*REPLACE AL BY A(I,K)         */MAGS 210\n         BL   =B(L),.                  /*SET BL CORRESPONDING TO AL   */MAGS 220\n         IF K LT I                                                      MAGS 230\n         THEN L    =L+1,.                                               MAGS 240\n         ELSE L    =L+K,.                                               MAGS 250\n         IF OPT='2'                    /*SHOULD A-B BE CALCULATED     */MAGS 260\n         THEN BL   =-BL,.              /*THEN CONVERT SIGN OF BL      */MAGS 270\n         ELSE IF OPT='3'               /*SHOULD B-A BE CALCULATED     */MAGS 280\n         THEN AL   =-AL,.              /*THEN CONVERT SIGN OF AL      */MAGS 290\n         C(I,K)=AL+BL,.                /*SET RESULTANT C(I,K) TO AL+BL*/MAGS 300\n         IF K LT N                                                      MAGS 310\n         THEN DO,.                     /*INCREMENT K                  */MAGS 320\n              K    =K+1,.                                               MAGS 330\n              GO TO NEXTK,.                                             MAGS 340\n              END,.                                                     MAGS 350\n         ELSE IF I LT N                                                 MAGS 360\n         THEN DO,.                     /*INCREMENT I                  */MAGS 370\n              LI   =LI+I,.                                              MAGS 380\n              I    =I+1,.                                               MAGS 390\n              GO TO NEXTI,.                                             MAGS 400\n              END,.                                                     MAGS 410\n         END,.                                                          MAGS 420\n    END,.                              /*END OF PROCEDURE MAGS        */MAGS 430\n MMGG..                                                                 MMGG  10\n /*********************************************************************/MMGG  20\n /*                                                                   */MMGG  30\n /*      MULTIPLY TWO GENERAL MATRICES                                */MMGG  40\n /*                                                                   */MMGG  50\n /*********************************************************************/MMGG  60\n    PROCEDURE(A,B,K,L,M,C),.                                            MMGG  70\n    DECLARE                                                             MMGG  80\n         (A(*,*),B(*,*),C(*,*))                                         MMGG  90\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MMGG 100\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MMGG 110\n         S BINARY FLOAT(53),                                            MMGG 120\n         (K,L,M,I,J,N)                                                  MMGG 130\n         BINARY FIXED,                                                  MMGG 140\n         ERROR EXTERNAL CHARACTER(1),.                                  MMGG 150\n    ERROR='D',.                        /*PRESET ERROR INDICATOR       */MMGG 160\n    IF K GT 0                          /*TEST SPECIFIED DIMENSIONS    */MMGG 170\n    THEN IF L GT 0                                                      MMGG 180\n    THEN IF M GT 0                                                      MMGG 190\n    THEN DO,.                                                           MMGG 200\n         I    =0,.                                                      MMGG 210\n NEXTI..                               /*COMPUTE THE I-TH ROW OF C    */MMGG 220\n         I    =I+1,.                                                    MMGG 230\n         J    =0,.                                                      MMGG 240\n NEXTJ..                               /*COMPUTE THE J-TH ELEMENT     */MMGG 250\n         J    =J+1,.                                                    MMGG 260\n         S    =0,.                                                      MMGG 270\n              DO N =1 TO L,.           /*PERFORM SCALAR PRODUCT       */MMGG 280\n              S    =S+MULTIPLY(A(I,N),                                  MMGG 290\n                   B(N,J),53),.                                         MMGG 300\n              END,.                                                     MMGG 310\n         C(I,J)=S,.                    /*STORE RESULTANT C(I,J)       */MMGG 320\n         IF J LT M                                                      MMGG 330\n         THEN GO TO NEXTJ,.            /*INCREMENT J                  */MMGG 340\n         ELSE IF I LT K                                                 MMGG 350\n         THEN GO TO NEXTI,.            /*INCREMENT I                  */MMGG 360\n         ERROR='0',.                   /*SUCCESSFUL OPERATION         */MMGG 370\n         END,.                                                          MMGG 380\n    END,.                              /*END OF PROCEDURE MMGG        */MMGG 390\n MMSS..                                                                 MMSS  10\n /*********************************************************************/MMSS  20\n /*                                                                   */MMSS  30\n /*      MULTIPLY TWO SYMMETRIC MATRICES STORED IN LINEAR ARRAYS      */MMSS  40\n /*                                                                   */MMSS  50\n /*********************************************************************/MMSS  60\n    PROCEDURE(A,B,N,P),.                                                MMSS  70\n    DECLARE                                                             MMSS  80\n         (A(*),B(*),P(*,*))                                             MMSS  90\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MMSS 100\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MMSS 110\n         S BINARY FLOAT(53),                                            MMSS 120\n         (N,L1,L2,LI,LK,I,K,J)                                          MMSS 130\n         BINARY FIXED,.                                                 MMSS 140\n    IF N GT 0                                                           MMSS 150\n    THEN DO,.                                                           MMSS 160\n         LI,I =1,.                                                      MMSS 170\n NEXTI..                                                                MMSS 180\n         LK,K =1,.                                                      MMSS 190\n NEXTK..                                                                MMSS 200\n         L1   =LI,.                                                     MMSS 210\n         L2   =LK,.                                                     MMSS 220\n         S    =0,.                     /*COMPUTE VECTOR PRODUCT OF TWO*/MMSS 230\n              DO J =1 TO N,.           /*CORRESP. SUBARRAYS OF A AND B*/MMSS 240\n              S    =S+MULTIPLY(A(L1),                                   MMSS 250\n                   B(L2),53),.                                          MMSS 260\n              IF J LT I                                                 MMSS 270\n              THEN L1   =L1+1,.                                         MMSS 280\n              ELSE L1   =L1+J,.                                         MMSS 290\n              IF J LT K                                                 MMSS 300\n              THEN L2   =L2+1,.                                         MMSS 310\n              ELSE L2   =L2+J,.                                         MMSS 320\n              END,.                                                     MMSS 330\n         P(I,K)=S,.                    /*STORE RESULTANT ELEMENT OF P */MMSS 340\n         IF K LT N                                                      MMSS 350\n         THEN DO,.                     /*INCREMENT K                  */MMSS 360\n              LK   =LK+K,.                                              MMSS 370\n              K    =K+1,.                                               MMSS 380\n              GO TO NEXTK,.                                             MMSS 390\n              END,.                                                     MMSS 400\n         ELSE IF I LT N                                                 MMSS 410\n         THEN DO,.                     /*INCREMENT I                  */MMSS 420\n              LI   =LI+I,.                                              MMSS 430\n              I    =I+1,.                                               MMSS 440\n              GO TO NEXTI,.                                             MMSS 450\n              END,.                                                     MMSS 460\n         END,.                                                          MMSS 470\n    END,.                              /*END OF PROCEDURE MMSS        */MMSS 480\n MMGS..                                                                 MMGS  10\n /*********************************************************************/MMGS  20\n /*                                                                   */MMGS  30\n /*      MULTIPLY A GENERAL WITH A SYMMETRIC MATRIX                   */MMGS  40\n /*                                                                   */MMGS  50\n /*********************************************************************/MMGS  60\n    PROCEDURE(G,S,M,N,OPT),.                                            MMGS  70\n    DECLARE                                                             MMGS  80\n         (G(*,*),S(*),H(MAX(N,M)))                                      MMGS  90\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MMGS 100\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MMGS 110\n         T BINARY FLOAT(53),                                            MMGS 120\n         (M,N,MM,NN,I,J,K,L,LI,LJ,RN,CN)                                MMGS 130\n         BINARY FIXED,                                                  MMGS 140\n         (OPT,ERROR EXTERNAL)CHARACTER(1),.                             MMGS 150\n    NN   =N,.                          /*SET NN TO NUMBER OF COLUMNS  */MMGS 160\n    MM   =M,.                          /*SET MM TO NUMBER OF ROWS OF G*/MMGS 170\n    ERROR='D',.                        /*PRESET ERROR INDICATOR       */MMGS 180\n    IF NN GT 0                         /*TEST SPECIFIED DIMENSIONS    */MMGS 190\n    THEN IF MM GT 0                                                     MMGS 200\n    THEN DO,.                                                           MMGS 210\n         IF OPT='2'                                                     MMGS 220\n         THEN DO,.                     /*IN CASE OF MULTIPL. S*G      */MMGS 230\n              NN   =MM,.               /*INTERCHANGE NN AND MM        */MMGS 240\n              MM   =N,.                                                 MMGS 250\n              END,.                                                     MMGS 260\n         K    =0,.                                                      MMGS 270\n NEXTK..                                                                MMGS 280\n         RN,CN,K=K+1,.                                                  MMGS 290\n              DO I =1 TO NN,.          /*REPLACE H(*) BY CURRENT ROW  */MMGS 300\n              IF OPT='2'               /*RESP. COLUMN VECTOR OF G     */MMGS 310\n              THEN RN   =I,.                                            MMGS 320\n              ELSE CN   =I,.                                            MMGS 330\n              H(I) =G(RN,CN),.                                          MMGS 340\n              END,.                                                     MMGS 350\n         LI,I =1,.                                                      MMGS 360\n NEXTI..                               /*FOR CURRENT ROW RESP. COLUMN */MMGS 370\n         L    =LI,.                    /*VECTOR COMPUTE I-TH ELEMENT  */MMGS 380\n         T    =0,.                                                      MMGS 390\n              DO J =1 TO NN,.          /*PERFORM SCALAR PRODUCT       */MMGS 400\n              T    =T+MULTIPLY(H(J),                                    MMGS 410\n                   S(L),53),.                                           MMGS 420\n              IF J LT I                                                 MMGS 430\n              THEN L    =L+1,.                                          MMGS 440\n              ELSE L    =L+J,.                                          MMGS 450\n              END,.                                                     MMGS 460\n         IF OPT='2'                    /*TEST SPECIFIED MULTIPLICATION*/MMGS 470\n         THEN RN   =I,.                                                 MMGS 480\n         ELSE CN   =I,.                                                 MMGS 490\n         G(RN,CN)=T,.                  /*STORE RESULTANT ELEMENT      */MMGS 500\n         LI   =LI+I,.                                                   MMGS 510\n         I    =I+1,.                                                    MMGS 520\n         IF I LE NN                                                     MMGS 530\n         THEN GO TO NEXTI,.            /*INCREMENT I                  */MMGS 540\n         ELSE IF K LT MM                                                MMGS 550\n         THEN GO TO NEXTK,.            /*INCREMENT K                  */MMGS 560\n         ERROR='0',.                   /*SUCCESSFUL OPERATION         */MMGS 570\n         END,.                                                          MMGS 580\n    END,.                              /*END OF PROCEDURE MMGS        */MMGS 590\n MMGT..                                                                 MMGT  10\n /*********************************************************************/MMGT  20\n /*                                                                   */MMGT  30\n /*      MULTIPLY A GENERAL MATRIX WITH ITS TRANSPOSE                 */MMGT  40\n /*                                                                   */MMGT  50\n /*********************************************************************/MMGT  60\n    PROCEDURE(A,M,N,OPT,S),.                                            MMGT  70\n    DECLARE                                                             MMGT  80\n         (A(*,*),S(*))                                                  MMGT  90\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MMGT 100\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MMGT 110\n         T BINARY FLOAT(53),                                            MMGT 120\n         (M,N,I,II,J,JJ,K,L)                                            MMGT 130\n         BINARY FIXED,                                                  MMGT 140\n         (OPT,ERROR EXTERNAL)CHARACTER(1),.                             MMGT 150\n    II   =M,.                                                           MMGT 160\n    JJ   =N,.                                                           MMGT 170\n    ERROR='D',.                        /*PRESET ERROR INDICATOR       */MMGT 180\n    IF II GT 0                         /*TEST SPECIFIED DIMENSIONS    */MMGT 190\n    THEN IF JJ GT 0                                                     MMGT 200\n    THEN DO,.                                                           MMGT 210\n         IF OPT='2'                    /*CHECK SPECIFIED MULTIPLIC.   */MMGT 220\n         THEN DO,.                                                      MMGT 230\n              JJ   =II,.               /*INTERCHANGE II AND JJ IN CASE*/MMGT 240\n              II   =N,.                /*OF PRODUCT TRANSPOSE(A)*A    */MMGT 250\n              END,.                                                     MMGT 260\n         L,I  =1,.                                                      MMGT 270\n NEXTI..                                                                MMGT 280\n         K    =1,.                                                      MMGT 290\n NEXTK..                                                                MMGT 300\n         T    =0,.                                                      MMGT 310\n         IF OPT='2'                    /*CHECK SPECIFIED MULTIPLIC.   */MMGT 320\n         THEN DO J =1 TO JJ,.          /*TRANSPOSE(A)*A IS PERFORMED  */MMGT 330\n              T    =T+MULTIPLY(A(J,I),                                  MMGT 340\n                   A(J,K),53),.                                         MMGT 350\n              END,.                                                     MMGT 360\n         ELSE DO J =1 TO JJ,.          /*A*TRANSPOSE(A) IS PERFORMED  */MMGT 370\n              T    =T+MULTIPLY(A(I,J),                                  MMGT 380\n                   A(K,J),53),.                                         MMGT 390\n              END,.                                                     MMGT 400\n         S(L) =T,.                     /*STORE RESULTANT ELEMENT S(L) */MMGT 410\n         L    =L+1,.                                                    MMGT 420\n         IF K LT I                                                      MMGT 430\n         THEN DO,.                     /*INCREMENT K                  */MMGT 440\n              K    =K+1,.                                               MMGT 450\n              GO TO NEXTK,.                                             MMGT 460\n              END,.                                                     MMGT 470\n         ELSE IF I LT II                                                MMGT 480\n         THEN DO,.                     /*INCREMENT I                  */MMGT 490\n              I    =I+1,.                                               MMGT 500\n              GO TO NEXTI,.                                             MMGT 510\n              END,.                                                     MMGT 520\n         ERROR='0',.                   /*SUCCESSFUL OPERATION         */MMGT 530\n         END,.                                                          MMGT 540\n    END,.                              /*END OF PROCEDURE MMGT        */MMGT 550\n MPRM..                                                                 MPRM  10\n /*********************************************************************/MPRM  20\n /*                                                                   */MPRM  30\n /*      PERMUTE THE ROWS OR, IF OPT = 'C', THE COLUMNS OF A          */MPRM  40\n /*      MATRIX                                                       */MPRM  50\n /*                                                                   */MPRM  60\n /*********************************************************************/MPRM  70\n    PROCEDURE(A,M,N,T,OPT,INV),.                                        MPRM  80\n    DECLARE                                                             MPRM  90\n         (A(*,*),AJ)                                                    MPRM 100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MPRM 110\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MPRM 120\n         (M,N,T(*),IE,TI,I,J,IA,DI,IT)                                  MPRM 130\n         BINARY FIXED,                                                  MPRM 140\n         (OPT,INV,ERROR EXTERNAL)CHARACTER(1),.                         MPRM 150\n    ERROR='D',.                        /*PRESET ERROR INDICATOR       */MPRM 160\n    IF M GT 0                          /*TEST SPECIFIED DIMENSIONS    */MPRM 170\n    THEN IF N GT 0                                                      MPRM 180\n    THEN DO,.                                                           MPRM 190\n         ERROR='0',.                                                    MPRM 200\n         IF OPT='C'                    /*IF COLUMNS SHOULD BE MOVED   */MPRM 210\n         THEN IE   =N,.                /*SET IE TO NUMBER OF COLUMNS  */MPRM 220\n         ELSE IE   =M,.                /*RESP. NUMBER OF ROWS IF NOT  */MPRM 230\n         IT   =IE,.                                                     MPRM 240\n         DI,IA=1,.                                                      MPRM 250\n         IF INV='1'                                                     MPRM 260\n         THEN DO,.                                                      MPRM 270\n              IA   =IE,.                                                MPRM 280\n              IE   =DI,.                                                MPRM 290\n              DI   =-DI,.                                               MPRM 300\n              END,.                                                     MPRM 310\n              DO I =IA TO IE BY DI,.                                    MPRM 320\n              TI   =T(I),.             /*SET TI TO T(I)               */MPRM 330\n              IF TI NE I               /*IS INTERCHANGE STEP NEEDED   */MPRM 340\n              THEN DO,.                                                 MPRM 350\n                   IF TI GT 0          /*IS ELEMENT OF T VALID        */MPRM 360\n                   THEN IF TI LE IT                                     MPRM 370\n                   THEN DO,.                                            MPRM 380\n                        IF OPT='C'     /*CHECK SPECIFIED OPERATION    */MPRM 390\n                                       /*INTERCHANGE COLUMNS I AND TI */MPRM 400\n                        THEN DO J =1 TO M,.                             MPRM 410\n                             AJ   =A(J,I),.                             MPRM 420\n                             A(J,I)=A(J,TI),.                           MPRM 430\n                             A(J,TI)=AJ,.                               MPRM 440\n                             END,.                                      MPRM 450\n                                       /*INTERCHANGE ROWS I AND TI    */MPRM 460\n                        ELSE DO J =1 TO N,.                             MPRM 470\n                             AJ   =A(I,J),.                             MPRM 480\n                             A(I,J)=A(TI,J),.                           MPRM 490\n                             A(TI,J)=AJ,.                               MPRM 500\n                             END,.                                      MPRM 510\n                        GOTO END,.                                      MPRM 520\n                        END,.                                           MPRM 530\n                   ERROR='T',.         /*T CONTAINS INVALID ELEMENTS  */MPRM 540\n END..                                                                  MPRM 550\n                   END,.                                                MPRM 560\n              END,.                                                     MPRM 570\n         END,.                                                          MPRM 580\n    END,.                              /*END OF PROCEDURE MPRM        */MPRM 590\n MTPI..                                                                 MTPI  10\n /*********************************************************************/MTPI  20\n /*                                                                   */MTPI  30\n /*      CALCULATE PERMUTATION VECTOR (OR ITS INVERSE IF INV ='1')    */MTPI  40\n /*      CORRESPONDING TO GIVEN TRANSPOSITION VECTOR                  */MTPI  50\n /*                                                                   */MTPI  60\n /*********************************************************************/MTPI  70\n    PROCEDURE(T,N,INV,P),.                                              MTPI  80\n    DECLARE                                                             MTPI  90\n         (T(*),N,P(*),I,II,PI,TI,LN)                                    MTPI 100\n         BINARY FIXED,                                                  MTPI 110\n         (INV,ERROR EXTERNAL)CHARACTER(1),.                             MTPI 120\n    I    =0,.                                                           MTPI 130\n    II   =1,.                                                           MTPI 140\n    LN   =N,.                                                           MTPI 150\n    IF LN GT 0                         /*TEST SPECIFIED DIMENSION     */MTPI 160\n    THEN DO,.                                                           MTPI 170\n NEXTI..                               /*PRESET PERMUTATION VECTOR    */MTPI 180\n         I    =I+1,.                   /*TO IDENTITY PERMUTATION      */MTPI 190\n         P(I) =I,.                                                      MTPI 200\n         IF I LT N                                                      MTPI 210\n         THEN GO TO NEXTI,.                                             MTPI 220\n         IF INV NE '1'                 /*SHOULD THE INVERSE PERMUTAT. */MTPI 230\n         THEN I    =1,.                /*VECTOR BE GENERATED          */MTPI 240\n         ELSE II   =-II,.                                               MTPI 250\n         ERROR='0',.                   /*PRESET ERROR INDICATOR       */MTPI 260\n REP..                                                                  MTPI 270\n         TI   =T(I),.                  /*REPLACE TI BY T(I)           */MTPI 280\n         IF TI GT 0                    /*IF (I,TI) IS A VALID         */MTPI 290\n         THEN IF TI LE LN              /*TRANSPOSITION THEN           */MTPI 300\n         THEN DO,.                     /*INTERCHANGE P(I) AND P(TI)   */MTPI 310\n              PI   =P(I),.                                              MTPI 320\n              P(I) =P(TI),.                                             MTPI 330\n              P(TI)=PI,.                                                MTPI 340\n         GOTO STEP,.                                                    MTPI 350\n              END,.                                                     MTPI 360\n         ERROR='T',.                   /*MARK INVALID TRANSPOSITION   */MTPI 370\n STEP..                                                                 MTPI 380\n         I    =I+II,.                                                   MTPI 390\n         IF I LE N                     /*HAS I ITS FINAL VALUE        */MTPI 400\n         THEN IF I GE 1                                                 MTPI 410\n         THEN GO TO REP,.                                               MTPI 420\n         END,.                                                          MTPI 430\n    ELSE ERROR='D',.                   /*ERROR IN SPECIFIED DIMENSION */MTPI 440\n    END,.                              /*END OF PROCEDURE MTPI        */MTPI 450\n MPIT..                                                                 MPIT  10\n /*********************************************************************/MPIT  20\n /*                                                                   */MPIT  30\n /*      CALCULATE THE INVERSE PERMUTATION VECTOR OR, IF OPT = 'T',   */MPIT  40\n /*      THE TRANSPOSITION VECTORS OF THE GIVEN AND INVERSE           */MPIT  50\n /*      PERMUTATIONS                                                 */MPIT  60\n /*                                                                   */MPIT  70\n /*********************************************************************/MPIT  80\n    PROCEDURE(P,N,OPT,PI),.                                             MPIT  90\n    DECLARE                                                             MPIT 100\n         (P(*),N,PI(*),LN,J,P1,P2)                                      MPIT 110\n         BINARY FIXED,                                                  MPIT 120\n         (OPT,ERROR EXTERNAL)CHARACTER(1),.                             MPIT 130\n    LN,J =N,.                                                           MPIT 140\n    IF LN GT 0                         /*TEST SPECIFIED DIMENSION     */MPIT 150\n    THEN DO,.                                                           MPIT 160\n REP..                                                                  MPIT 170\n         PI(J)=0,.                     /*PRESET RESULTING VALUES IN   */MPIT 180\n         J    =J-1,.                   /*ORDER TO CHECK PERMUTATION   */MPIT 190\n         IF J GT 0                                                      MPIT 200\n         THEN GO TO REP,.                                               MPIT 210\n         ERROR='P',.                   /*PRESET ERROR INDICATOR       */MPIT 220\n NEXTJ..                                                                MPIT 230\n         J    =J+1,.                                                    MPIT 240\n         P1   =P(J),.                  /*SET P1 TO P(J)               */MPIT 250\n         IF P1 LE LN                   /*FEASIBILITY TEST..           */MPIT 260\n         THEN IF P1 GT 0               /*IS 1 LE P1 LE N, AND IS      */MPIT 270\n         THEN IF PI(P1)=0              /*P1 DIFF. FROM PREVIOUS VALUES*/MPIT 280\n         THEN DO,.                                                      MPIT 290\n              PI(P1)=J,.               /*SET P1-TH ELEMENT OF PI TO J */MPIT 300\n              IF J LT LN               /*HAS J ITS FINAL VALUE        */MPIT 310\n              THEN GO TO NEXTJ,.                                        MPIT 320\n              ERROR='0',.              /*VALID PERMUTATION VECTOR     */MPIT 330\n              IF OPT='T'               /*IF SPECIFIED THEN TRANSPOS.  */MPIT 340\n              THEN DO J =1 TO LN,.     /*VECTORS ARE CALCULATED       */MPIT 350\n                   P1   =P(J),.                                         MPIT 360\n                   P2   =PI(J),.                                        MPIT 370\n                   P(P2)=P1,.                                           MPIT 380\n                   PI(P1)=P2,.                                          MPIT 390\n                   END,.                                                MPIT 400\n              END,.                                                     MPIT 410\n         END,.                                                          MPIT 420\n    ELSE ERROR='D',.                   /*ERROR IN SPECIFIED DIMENSION */MPIT 430\n    END,.                              /*END OF PROCEDURE MPIT        */MPIT 440\n MFG..                                                                  MFG   10\n /*********************************************************************/MFG   20\n /*                                                                   */MFG   30\n /*      FACTORIZE A GENERAL NON-SINGULAR MATRIX A INTO A PRODUCT     */MFG   40\n /*      OF A LOWER TRIANGULAR MATRIX L AND AN UPPER TRIANGULAR       */MFG   50\n /*      MATRIX U OVERWRITTEN ON A, OMITTING UNIT DIAGONAL OF U       */MFG   60\n /*                                                                   */MFG   70\n /*********************************************************************/MFG   80\n    PROCEDURE(A,IPER,N),.                                               MFG   90\n    DECLARE                                                             MFG  100\n         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MFG  110\n         EPS BINARY FLOAT,                                              MFG  120\n         W BINARY FLOAT(53),                                            MFG  130\n         (A(*,*),H,R)                                                   MFG  140\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MFG  150\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MFG  160\n         (IPER(*),I,IND,J,K,L,LN,M,N)                                   MFG  170\n         BINARY FIXED,.                                                 MFG  180\n    LN   =N,.                                                           MFG  190\n    IF LN LE 0                         /*TEST SPECIFIED DIMENSION     */MFG  200\n    THEN DO,.                                                           MFG  210\n         ERROR='P',.                   /*P MEANS WRONG PARAMETER      */MFG  220\n         GO TO RETURN,.                                                 MFG  230\n         END,.                                                          MFG  240\n    ERROR='0',.                        /*PRESET ERROR INDICATOR       */MFG  250\n    EPS  =1.E-7,.                      /*SINGLE PRECISION VERSION  /*S*/MFG  254\n  /*EPS  =1.E-16,.                     /*DOUBLE PRECISION VERSION  /*D*/MFG  255\n                                       /*******************************/MFG  260\n         DO L =1 TO LN,.               /*CALCULATE SCALING FACTORS    */MFG  270\n         R    =0,.                     /*******************************/MFG  280\n              DO J =1 TO LN,.          /*COMPUTE ABSOLUTELY GREATEST  */MFG  290\n              H    =ABS(A(L,J)),.      /*ELEMENT R IN EACH ROW OF A   */MFG  300\n              IF H GT R                                                 MFG  310\n              THEN R    =H,.                                            MFG  320\n              END,.                                                     MFG  330\n         IF R = 0                      /*TEST FOR ZEROS IN ANY ROW    */MFG  340\n         THEN DO,.                                                      MFG  350\n              ERROR='S',.              /*A ROW IN GIVEN MATRIX A      */MFG  360\n              GO TO RETURN,.           /*IS ZERO                      */MFG  370\n              END,.                                                     MFG  380\n                                       /*STORE R IN AN INTEGER VECTOR */MFG  390\n         ELSE UNSPEC(IPER(L))=UNSPEC(R),.                               MFG  400\n         END,.                         /*******************************/MFG  410\n                                       /*GAUSS  ELIMINATION           */MFG  420\n         DO L =1 TO LN,.               /*******************************/MFG  430\n         UNSPEC(M)='1'B,.              /*PRESET M AS SMALLEST INTEGER */MFG  440\n              DO J =L TO LN,.          /*MODIFY COLUMN, SEARCH PIVOT  */MFG  450\n              W,H  =A(J,L),.           /*SAVE ELEMENT                 */MFG  460\n                   DO K =1 TO L-1,.    /*COMPUTE SCALAR PRODUCTS      */MFG  470\n                   W    =W-MULTIPLY(A(J,K),A(K,L),53),.                 MFG  480\n                   END,.                                                MFG  490\n              A(J,L)=W,.               /*UPDATE ELEMENT               */MFG  500\n              W    =ABS(W),.                                            MFG  510\n              UNSPEC(I)=UNSPEC(W),.                                     MFG  520\n              I    =I-IPER(J),.        /*DIFFERENCE OF EXPONENTS      */MFG  530\n              IF I GT M                /*SEARCH FOR LARGEST DIFFERENCE*/MFG  540\n              THEN DO,.                                                 MFG  550\n                   IND  =J,.           /*STORE ROW-INDEX              */MFG  560\n                   M    =I,.                                            MFG  570\n                   R    =H,.           /*SAVE ORIGINAL ELEMENT FOR    */MFG  580\n                   END,.               /*TEST ON LOSS OF SIGNIFICANCE */MFG  590\n              END,.                                                     MFG  600\n         IF IND GT L                   /*IS INTERCHANGE NECESSARY     */MFG  610\n         THEN DO,.                                                      MFG  620\n              IPER(IND)=IPER(L),.      /*RESTORE PERMUTATION VECTOR   */MFG  630\n                   DO J =1 TO LN,.     /*INTERCHANGE ROWS OF MATRIX A */MFG  640\n                   H    =A(L,J),.                                       MFG  650\n                   A(L,J)=A(IND,J),.                                    MFG  660\n                   A(IND,J)=H,.                                         MFG  670\n                   END,.                                                MFG  680\n              END,.                                                     MFG  690\n         IPER(L)=IND,.                 /*STORE ROW NUMBER             */MFG  700\n         H    =A(L,L),.                /*H CONTAINS THE PIVOT         */MFG  710\n         IF ABS(H) LE ABS(EPS*R)       /*TEST PIVOT ELEMENT FOR LOSS  */MFG  720\n         THEN IF H NE 0                /*OF SIGNIFICANCE AND FOR ZERO */MFG  730\n         THEN ERROR='W',.              /*W MEANS WARNING              */MFG  740\n         ELSE IF R = 0                 /*IS ORIGINAL ELEMENT ZERO     */MFG  750\n         THEN DO,.                                                      MFG  760\n              ERROR='S',.              /*CALCULATED PIVOT AND THE     */MFG  770\n              GO TO RETURN,.           /*ORIGINAL ELEMENT ARE ZERO    */MFG  780\n              END,.                                                     MFG  790\n         ELSE DO ,.                    /*CORRECT ZERO PIVOT           */MFG  800\n              H    =EPS*R,.                                             MFG  810\n              ERROR='C',.              /*WARNING AND CORRECTION       */MFG  830\n              END,.                                                     MFG  840\n              DO J =L+1 TO LN,.        /*EXECUTE LOOP OVER L-TH ROW   */MFG  850\n              W    =0,.                                                 MFG  860\n                   DO K =1 TO L-1,.    /*CALCULATE SCALAR PRODUCTS    */MFG  870\n                   W    =W+MULTIPLY(A(L,K),A(K,J),53),.                 MFG  880\n                   END,.                                                MFG  890\n              A(L,J)=(A(L,J)-W)/H,.    /*COMPUTE NEW ELEMENT          */MFG  900\n              END,.                                                     MFG  910\n         END,.                                                          MFG  920\n RETURN..                                                               MFG  930\n    END,.                              /*END OF PROCEDURE MFG         */MFG  940\n MFS..                                                                  MFS   10\n /*********************************************************************/MFS   20\n /*                                                                   */MFS   30\n /*           FACTORIZE SYMMETRIC POSITIVE DEFINITE MATRIX            */MFS   40\n /*                                                                   */MFS   50\n /*********************************************************************/MFS   60\n    PROCEDURE(A,N),.                                                    MFS   70\n    DECLARE                                                             MFS   80\n         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MFS   90\n         EPS BINARY FLOAT,                                              MFS  100\n         SUM BINARY FLOAT(53),                                          MFS  110\n         A(*)                                                           MFS  120\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MFS  130\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MFS  140\n         (IND,IB,K,KL,L,N)                                              MFS  150\n         BINARY FIXED,.                                                 MFS  160\n    IF N LE 0                          /*TEST SPECIFIED DIMENSION     */MFS  170\n    THEN DO,.                                                           MFS  180\n         ERROR='P',.                   /*P MEANS WRONG PARAMETER      */MFS  190\n         GO TO RETURN,.                                                 MFS  200\n         END,.                                                          MFS  210\n    ERROR='0',.                        /*PRESET ERROR INDICATOR       */MFS  220\n    EPS  =1.E-7,.                      /*SINGLE PRECISION VERSION  /*S*/MFS  224\n  /*EPS  =1.E-16,.                     /*DOUBLE PRECISION VERSION  /*D*/MFS  225\n    IND  =0,.                          /*INITIALIZE ROW-LOOP          */MFS  230\n    IB   =1,.                                                           MFS  240\n         DO K =1 TO N,.                /*EXECUTE LOOP OVER ALL ROWS   */MFS  250\n         KL   =0,.                                                      MFS  260\n LOOP..                                /*PERFORM LOOP WITHIN K-TH ROW */MFS  270\n         SUM  =0,.                                                      MFS  280\n              DO L =IB TO IND,.        /*CALCULATE SCALAR PRODUCT     */MFS  290\n              KL   =KL+1,.                                              MFS  300\n              SUM  =SUM+MULTIPLY(A(L),A(KL),53),.                       MFS  310\n              END,.                                                     MFS  320\n         KL   =KL+1,.                                                   MFS  330\n         IND  =IND+1,.                                                  MFS  340\n         SUM  =A(IND)-SUM,.                                             MFS  350\n         IF IND GT KL                  /*IS A(IND) ON DIAGONAL        */MFS  360\n         THEN DO,.                                                      MFS  370\n              A(IND)=SUM/A(KL),.       /*CALCULATE NON-DIAGONAL TERM  */MFS  380\n              GO TO LOOP,.                                              MFS  390\n              END,.                                                     MFS  400\n         IF SUM GT 0                   /*TEST SIGN OF RADICAND        */MFS  410\n         THEN DO,.                     /*POSITIVE RADICAND            */MFS  420\n              IF SUM LE ABS(EPS*A(IND))/*TEST ON LOSS OF SIGNIFICANCE */MFS  430\n              THEN ERROR='W',.         /*W MEANS WARNING              */MFS  440\n              A(IND)=SQRT(SUM),.       /*CALCULATE NEW DIAGONAL TERM  */MFS  450\n              END,.                                                     MFS  460\n         ELSE DO,.                     /*NEGATIVE RADICAND            */MFS  470\n              ERROR='S',.              /*S MEANS MATRIX A IS NOT      */MFS  480\n              GO TO RETURN,.           /*POSITIVE DEFINITE            */MFS  500\n              END,.                                                     MFS  510\n         IB   =IB+K,.                                                   MFS  520\n         END,.                                                          MFS  530\n RETURN..                                                               MFS  540\n    END,.                              /*END OF PROCEDURE MFS         */MFS  550\n MFSB..                                                                 MFSB  10\n /*********************************************************************/MFSB  20\n /*                                                                   */MFSB  30\n /*      FACTORIZE A GIVEN POSITIVE DEFINITE N BY N MATRIX A          */MFSB  40\n /*      WITH SYMMETRIC BAND STRUCTURE (NUD UPPER CODIAGONALS)        */MFSB  50\n /*                                                                   */MFSB  60\n /*********************************************************************/MFSB  70\n    PROCEDURE(A,N,NUD),.                                                MFSB  80\n    DECLARE                                                             MFSB  90\n         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MFSB 100\n         EPS BINARY FLOAT,                                              MFSB 110\n         SUM BINARY FLOAT(53),                                          MFSB 120\n         (A(*,*),PIV)                                                   MFSB 130\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MFSB 140\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MFSB 150\n         (I,ID,J,JEND,K,KK,KEND,                                        MFSB 160\n         LN,LNUD,M,N,NC,NR,NUD)                                         MFSB 170\n         BINARY FIXED,.                                                 MFSB 180\n    LN   =N,.                                                           MFSB 190\n    LNUD =NUD,.                                                         MFSB 200\n    ERROR='P',.                        /*P MEANS WRONG PARAMETER      */MFSB 210\n    IF LNUD LT 0                       /*TEST SPECIFIED NUMBER OF     */MFSB 220\n    THEN GO TO RETURN,.                /*UPPER CODIAGONALS            */MFSB 230\n    EPS  =1.E-7,.                      /* SINGLE PRECISION VERSION /*S*/MFSB 234\n  /*EPS  =1.E-16,.                     /* DOUBLE PRECISION VERSION /*D*/MFSB 235\n    IF LN LE LNUD                      /*TEST SPECIFIED DIMENSION N   */MFSB 240\n    THEN GO TO RETURN,.                                                 MFSB 250\n    NR   =LN-LNUD,.                    /*INITIALIZE PARAMETERS        */MFSB 260\n    NC,JEND=LNUD+1,.                                                    MFSB 270\n         DO I =1 TO LN,.               /*EXECUTE LOOP OVER ALL ROWS   */MFSB 280\n         IF I GT NR                    /*MODIFY JEND AT THE END OF    */MFSB 290\n         THEN JEND =JEND-1,.           /*THE BAND STRUCTURE           */MFSB 300\n         KEND =NC,.                    /*INITIALIZE KEND AND M        */MFSB 310\n         M    =NC-I,.                                                   MFSB 320\n         IF M GT 0                     /*MODIFY KEND AT THE START OF  */MFSB 330\n         THEN KEND =KEND-M,.           /*THE BAND STRUCTURE           */MFSB 340\n              DO J =1 TO JEND,.        /*EXECUTE LOOP OVER I-TH ROW   */MFSB 350\n              ID   =J-1,.              /*CALULATE INCREMENT ID        */MFSB 360\n              KK   =I,.                /*INITIALIZE KK AND SUM        */MFSB 370\n              SUM  =0,.                                                 MFSB 380\n                   DO K =J+1 TO KEND,. /*COMPUTE SCALAR PRODUCT SUM   */MFSB 390\n                   KK   =KK-1,.                                         MFSB 400\n                   SUM  =SUM+MULTIPLY(A(KK,K),A(KK,K-ID),53),.          MFSB 410\n                   END,.                                                MFSB 420\n              SUM  =A(I,J)-SUM,.                                        MFSB 430\n              IF J = 1                 /*IS A(I,J) DIAGONAL ELEMENT   */MFSB 440\n              THEN IF SUM GT 0         /*TEST FOR LOSS OF SIGNIFICANT */MFSB 450\n              THEN DO,.                /*DIGITS AND COMPUTE NEW TERM  */MFSB 460\n                   IF SUM LE ABS(EPS*A(I,J))                            MFSB 470\n                   THEN ERROR='W',.                                     MFSB 480\n                   PIV,A(I,J)=SQRT(SUM),.                               MFSB 490\n                   END,.                                                MFSB 500\n              ELSE DO,.                                                 MFSB 510\n                   ERROR='S',.         /*A IS NOT POSITIVE DEFINITE   */MFSB 520\n                   GO TO RETURN,.                                       MFSB 540\n                   END,.                                                MFSB 550\n              ELSE A(I,J)=SUM/PIV,.    /*MODIFY NON-DIAGONAL ELEMENT  */MFSB 560\n              IF J LE M                                                 MFSB 570\n              THEN KEND =KEND+1,.      /*UPDATE KEND IF NECESSARY     */MFSB 580\n              END,.                                                     MFSB 590\n         END,.                                                          MFSB 600\n    ERROR='0',.                        /*SUCCESSFUL OPERATION         */MFSB 610\n RETURN..                                                               MFSB 620\n    END,.                              /*END OF PROCEDURE MFSB        */MFSB 630\n MFGR..                                                                 MFGR  10\n /*********************************************************************/MFGR  20\n /*                                                                   */MFGR  30\n /*      FOR A GIVEN M BY N MATRIX A THE FOLLOWING CALCULATIONS       */MFGR  40\n /*      ARE PERFORMED                                                */MFGR  50\n /*      (1) DETERMINE RANK AND LINEARLY INDEPENDENT ROWS AND         */MFGR  60\n /*           COLUMNS  (BASIS)                                        */MFGR  70\n /*      (2) FACTORIZE A SUBMATRIX OF MAXIMAL RANK                    */MFGR  80\n /*      (3) EXPRESS NON-BASIC ROWS IN TERMS OF BASIC ONES            */MFGR  90\n /*      (4) EXPRESS BASIC VARIABLES IN TERMS OF FREE ONES            */MFGR 100\n /*                                                                   */MFGR 110\n /*********************************************************************/MFGR 120\n    PROCEDURE(A,M,N,EPS,IRANK,IROW,ICOL),.                              MFGR 130\n    DECLARE                                                             MFGR 140\n         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MFGR 150\n         EPS BINARY FLOAT,                                              MFGR 160\n         SUM BINARY FLOAT(53),                                          MFGR 170\n         (A(*,*),HOLD,PIV,SAVE,TOL,WORK)                                MFGR 180\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MFGR 190\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MFGR 200\n         (ICOL(*),IROW(*),I,IC,IR,                                      MFGR 210\n         IND,IRANK,J,K,LM,LN,M,N)                                       MFGR 220\n         BINARY FIXED,.                                                 MFGR 230\n    LM   =M,.                                                           MFGR 240\n    LN   =N,.                                                           MFGR 250\n    ERROR='P',.                        /*P MEANS WRONG INPUT          */MFGR 260\n    IF LM LT 1                         /*TEST OF DIMENSION M          */MFGR 270\n    THEN GO TO RETURN,.                                                 MFGR 280\n    IF LN LT 1                         /*TEST OF DIMENSION N          */MFGR 290\n    THEN GO TO RETURN,.                                                 MFGR 300\n    ERROR='0',.                        /*PRESET ERROR INDICATOR       */MFGR 310\n                                       /*INIT. COLUMN INDEX VECTOR    */MFGR 320\n    PIV  =0,.                          /*SEARCH FIRST PIVOT ELEMENT   */MFGR 330\n         DO J =1 TO LN,.               /*EXECUTE LOOP OVER COLUMNS    */MFGR 340\n         ICOL(J)=J,.                                                    MFGR 350\n              DO I =1 TO LM,.          /*EXECUTE LOOP OVER ALL ROWS   */MFGR 360\n              HOLD =A(I,J),.                                            MFGR 370\n              IF ABS(HOLD) GT ABS(PIV)                                  MFGR 380\n              THEN DO,.                                                 MFGR 390\n                   PIV  =HOLD,.        /*SAVE VALUE AND INDEX OF THE  */MFGR 400\n                   IR   =I,.           /*ABSOLUTELY GREATEST ELEMENT  */MFGR 410\n                   IC   =J,.                                            MFGR 420\n                   END,.                                                MFGR 430\n              END,.                                                     MFGR 440\n         END,.                                                          MFGR 450\n         DO I =1 TO LM,.               /*INITIALIZE ROW INDEX VECTOR  */MFGR 460\n         IROW(I)=I,.                                                    MFGR 470\n         END,.                                                          MFGR 480\n    TOL  =ABS(EPS*PIV),.               /*SET UP INTERNAL TOLERANCE    */MFGR 490\n    IRANK=0,.                          /*******************************/MFGR 500\n         DO J =1 TO LN,.               /*GAUSS  ELIMINATION           */MFGR 510\n         IF ABS(PIV) LE TOL            /*******************************/MFGR 520\n         THEN GO TO ROW,.              /*PIVOT IS NOT FEASIBLE        */MFGR 530\n         IRANK=J,.                     /*UPDATE RANK                  */MFGR 540\n         IF IR GT IRANK                /*SHOULD ROWS BE INTERCHANGED  */MFGR 550\n         THEN DO,.                                                      MFGR 560\n                   DO I =1 TO LN,.     /*INTERCHANGE ROWS             */MFGR 570\n                   SAVE =A(IRANK,I),.                                   MFGR 580\n                   A(IRANK,I)=A(IR,I),.                                 MFGR 590\n                   A(IR,I)=SAVE,.                                       MFGR 600\n                   END,.                                                MFGR 610\n              IND  =IROW(IR),.         /*UPDATE ROW INDEX VECTOR      */MFGR 620\n              IROW(IR)=IROW(IRANK),.                                    MFGR 630\n              IROW(IRANK)=IND,.                                         MFGR 640\n              END,.                                                     MFGR 650\n         IF IC GT IRANK                /*SHOULD COLUMNS BE INTER-     */MFGR 660\n         THEN DO,.                     /*CHANGED                      */MFGR 670\n                   DO I =1 TO LM,.     /*INTERCHANGE COLUMNS          */MFGR 680\n                   SAVE =A(I,IRANK),.                                   MFGR 690\n                   A(I,IRANK)=A(I,IC),.                                 MFGR 700\n                   A(I,IC)=SAVE,.                                       MFGR 710\n                   END,.                                                MFGR 720\n              IND  =ICOL(IC),.         /*UPDATE COLUMN INDEX VECTOR   */MFGR 730\n              ICOL(IC)=ICOL(IRANK),.                                    MFGR 740\n              ICOL(IRANK)=IND,.                                         MFGR 750\n              END,.                                                     MFGR 760\n         IND  =IRANK+1,.               /*INITIALIZE LOOP FOR TRANS-   */MFGR 770\n         SAVE =PIV,.                   /*FORMING CURRENT SUBMATRIX    */MFGR 780\n         PIV  =0,.                     /*AND SEARCHING NEXT PIVOT     */MFGR 790\n              DO I =IND TO LM,.                                         MFGR 800\n              HOLD,A(I,IRANK)=A(I,IRANK)/SAVE,.                         MFGR 810\n                   DO K =IND TO LN,.                                    MFGR 820\n                   WORK,A(I,K)=A(I,K)-HOLD*A(IRANK,K),.                 MFGR 830\n                                       /*SEARCH NEXT PIVOT ELEMENT    */MFGR 840\n                   IF ABS(WORK) GT ABS(PIV)                             MFGR 850\n                   THEN DO,.                                            MFGR 860\n                        PIV  =WORK,.   /*SAVE VALUE AND INDEX OF THE  */MFGR 870\n                        IR   =I,.      /*ABSOLUTELY GREATEST ELEMENT  */MFGR 880\n                        IC   =K,.                                       MFGR 890\n                        END,.                                           MFGR 900\n                   END,.                                                MFGR 910\n              END,.                                                     MFGR 920\n         END,.                         /*******************************/MFGR 930\n ROW..                                 /*COMPUTE ROW DEPENDENCIES     */MFGR 940\n    IF IRANK= LM                       /*******************************/MFGR 950\n    THEN GO TO HOM,.                   /*ALL ROWS ARE BASIC ONES      */MFGR 960\n         DO J =IRANK-1 TO 1 BY -1,.    /*SET UP MATRIX EXPRESSING     */MFGR 970\n         IR   =J+1,.                   /*ROW DEPENDENCIES             */MFGR 980\n              DO I =IND TO LM,.        /*LOOP FOR NON-BASIC ROWS      */MFGR 990\n              SUM  =0,.                                                 MFGR1000\n                   DO K =IR TO IRANK,. /*CALCULATE SCALAR PRODUCTS    */MFGR1010\n                   SUM  =SUM+MULTIPLY(A(I,K),A(K,J),53),.               MFGR1020\n                   END,.                                                MFGR1030\n              A(I,J)=A(I,J)-SUM,.      /*MODIFY ELEMENT               */MFGR1040\n              END,.                                                     MFGR1050\n         END,.                         /*******************************/MFGR1060\n HOM..                                 /*COMPUTE HOMOGENEOUS SOLUTION */MFGR1070\n    IF IRANK= LN                       /*******************************/MFGR1080\n    THEN GO TO RETURN,.                /*ALL COLUMNS ARE BASIC ONES   */MFGR1090\n                                       /*SET UP MATRIX EXPRESSING     */MFGR1100\n         DO J =IRANK TO 1 BY -1,.      /*BASIC VARIABLES IN TERMS OF  */MFGR1110\n         IR   =J+1,.                   /*FREE PARAMETERS              */MFGR1120\n              DO I =IND TO LN,.        /*LOOP FOR FREE COLUMNS        */MFGR1130\n              SUM  =0,.                                                 MFGR1140\n                   DO K =IR TO IRANK,. /*CALCULATE SCALAR PRODUCTS    */MFGR1150\n                   SUM  =SUM+MULTIPLY(A(J,K),A(K,I),53),.               MFGR1160\n                   END,.                                                MFGR1170\n              A(J,I)=-(A(J,I)+ SUM)/A(J,J),.                            MFGR1180\n              END,.                                                     MFGR1190\n         END,.                                                          MFGR1200\n RETURN..                                                               MFGR1210\n    END,.                              /*END OF PROCEDURE MFGR        */MFGR1220\n MDLS..                                                                 MDLS  10\n /*********************************************************************/MDLS  20\n /*                                                                   */MDLS  30\n /*      FOR AN EQUATION SYSTEM  A*X=R  WITH SYMMETRIC POSITIVE       */MDLS  40\n /*      DEFINITE MATRIX  A=T*TRANSPOSE(T)  CALCULATE OPTIONALLY      */MDLS  50\n /*           SOLUTION X                                              */MDLS  60\n /*           INVERSE(T) * R                                          */MDLS  70\n /*           TRANSPOSE(INVERSE(T)) * R                               */MDLS  80\n /*      FOR GIVEN TRIANGULAR FACTOR T AND RIGHT HAND SIDE MATRIX R   */MDLS  90\n /*                                                                   */MDLS 100\n /*********************************************************************/MDLS 110\n    PROCEDURE(R,M,N,A,OPT),.                                            MDLS 120\n    DECLARE                                                             MDLS 130\n         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MDLS 140\n         (OPT,COPT) CHARACTER(1),      /*OPTION PARAMETER             */MDLS 150\n         SUM BINARY FLOAT(53),                                          MDLS 160\n         (R(*,*),A(*))                                                  MDLS 170\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MDLS 180\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MDLS 190\n         (I,IEND,II,IIA,IID,IIST,IK,                                    MDLS 200\n         IKA,IKD,IKST,J,JEND,K,L,LD,                                    MDLS 210\n         LX,LDX,M,MSTA,MDEL,MX,N)                                       MDLS 220\n         BINARY FIXED,.                                                 MDLS 230\n                                       /*******************************/MDLS 240\n    IID,IKA=1,.                        /*INITIALIZE PARAMETERS FOR    */MDLS 250\n    IKD,IIA=0,.                        /*DIVISION FROM LEFT           */MDLS 260\n    IEND =N,.                          /*******************************/MDLS 270\n    JEND =M-1,.                                                         MDLS 280\n    GO TO BOTH,.                                                        MDLS 290\n MDRS..                                                                 MDLS 300\n /*********************************************************************/MDLS 310\n /*                                                                   */MDLS 320\n /*      FOR AN EQUATION SYSTEM  X*A=R  WITH SYMMETRIC POSITIVE       */MDLS 330\n /*      DEFINITE MATRIX  A=T*TRANSPOSE(T)  CALCULATE OPTIONALLY      */MDLS 340\n /*           SOLUTION X                                              */MDLS 350\n /*           R * TRANSPOSE(INVERSE(T))                               */MDLS 360\n /*           R * INVERSE(T)                                          */MDLS 370\n /*      FOR GIVEN TRIANGULAR FACTOR T AND RIGHT HAND SIDE MATRIX R   */MDLS 380\n /*                                                                   */MDLS 390\n /*********************************************************************/MDLS 400\n    ENTRY(R,M,N,A,OPT),.                                                MDLS 410\n                                       /*******************************/MDLS 420\n    IID,IKA=0,.                        /*INITIALIZE PARAMETERS FOR    */MDLS 430\n    IKD,IIA=1,.                        /*DIVISION FROM RIGHT          */MDLS 440\n    IEND =M,.                          /*******************************/MDLS 450\n    JEND =N-1,.                                                         MDLS 460\n BOTH..                                                                 MDLS 470\n    ERROR='P',.                        /*P MEANS WRONG PARAMETER      */MDLS 480\n    IF IEND LE 0                       /*TEST INPUT DIMENSIONS M AND N*/MDLS 490\n    THEN GO TO RETURN,.                                                 MDLS 500\n    IF JEND LT 0                                                        MDLS 510\n    THEN GO TO RETURN,.                                                 MDLS 520\n    IIST,IKST=1,.                                                       MDLS 530\n    COPT =OPT,.                                                         MDLS 540\n    IF COPT= '2'                       /*TEST SPECIFIED OPERATION     */MDLS 550\n    THEN GO TO NEW,.                                                    MDLS 560\n                                       /*******************************/MDLS 570\n    LX   =0,.                          /*INITIALIZATION FOR  A*X = R  */MDLS 580\n    MSTA,MDEL,MX,LD=1,.                /*AND FOR  X*TRANSPOSE(A) = R  */MDLS 590\n                                       /*******************************/MDLS 600\n MAIN..                                /*EXECUTE DIVISION PROCESS     */MDLS 610\n         DO J =0 TO JEND,.                                              MDLS 620\n         II   =IIST,.                  /*INITIALIZE ADDRESSING VALUES */MDLS 630\n         IK   =IKST,.                                                   MDLS 640\n              DO I =1 TO IEND,.        /*EXECUTE LOOP OVER COLUMNS    */MDLS 650\n              SUM  =0,.                /*OR ROWS OF MATRIX R          */MDLS 660\n              L    =MSTA,.                                              MDLS 670\n              LDX  =LD,.                                                MDLS 680\n                   DO K =1 TO J,.      /*COMPUTE SCALAR PRODUCT SUM   */MDLS 690\n                   SUM  =SUM+MULTIPLY(A(L),R(II,IK),53),.               MDLS 700\n                   L    =L+LDX,.                                        MDLS 710\n                   LDX  =LDX+LX,.      /*UPDATE ADDRESSING PARAMETERS */MDLS 720\n                   II   =II+IID,.                                       MDLS 730\n                   IK   =IK+IKD,.                                       MDLS 740\n                   END,.                                                MDLS 750\n              IF A(L)= 0               /*IS DIAGONAL TERM IN A ZERO   */MDLS 760\n              THEN DO,.                                                 MDLS 770\n                   ERROR='S',.         /*S MEANS ZERO DIAGONAL TERM   */MDLS 780\n                   GO TO RETURN,.      /*IN TRIANGULAR FACTOR A       */MDLS 790\n                   END,.                                                MDLS 800\n                                       /*CALCULATE NEW ELEMENT        */MDLS 810\n              ELSE R(II,IK)=(R(II,IK)-SUM)/A(L),.                       MDLS 820\n              II   =IIST+IIA*I,.                                        MDLS 830\n              IK   =IKST+IKA*I,.       /*UPDATE ADDRESSING PARAMETERS */MDLS 840\n              END,.                                                     MDLS 850\n         MSTA =MSTA+MDEL,.             /*MODIFY START PARAMETERS      */MDLS 860\n         MDEL =MDEL+MX,.                                                MDLS 870\n         END,.                                                          MDLS 880\n    IF COPT NE '1'                     /*TEST END OF OPERATION        */MDLS 890\n    THEN                                                                MDLS 900\n NEW..                                 /*******************************/MDLS 910\n         DO,.                          /*INITIALIZATION FOR  X*A = R  */MDLS 920\n         COPT ='1',.                   /*AND FOR  TRANSPOSE(A)*X = R  */MDLS 930\n         MX   =0,.                     /*******************************/MDLS 940\n         LX   =1,.                                                      MDLS 950\n         MDEL =-1,.                                                     MDLS 960\n         LD   =-JEND,.                                                  MDLS 970\n         MSTA =(JEND+1)*(JEND+2)/2,.                                    MDLS 980\n         IID  =-IID,.                                                   MDLS 990\n         IKD  =-IKD,.                                                   MDLS1000\n         IF IIA= 0                     /*SHOULD DIVISION FROM LEFT    */MDLS1010\n         THEN IIST =M,.                /*BE EXECUTED                  */MDLS1020\n         ELSE IKST =N,.                                                 MDLS1030\n         GO TO MAIN,.                  /*GO TO MAIN PART OF MDLS      */MDLS1040\n         END,.                                                          MDLS1050\n    ERROR='0',.                        /*SUCCESSFUL OPERATION         */MDLS1060\n RETURN..                                                               MDLS1070\n    END,.                              /*END OF PROCEDURE MDLS        */MDLS1080\n MDSB..                                                                 MDSB  10\n /*********************************************************************/MDSB  20\n /*                                                                   */MDSB  30\n /*      FOR AN EQUATION SYSTEM  A*X=R  WITH SYMMETRIC POSITIVE       */MDSB  40\n /*      DEFINITE  BAND  MATRIX   A=TRANSPOSE(T)*T   CALCULATE        */MDSB  50\n /*      OPTIONALLY                                                   */MDSB  60\n /*           SOLUTION X                                              */MDSB  70\n /*           TRANSPOSE(INVERSE(T)) * R                               */MDSB  80\n /*           INVERSE(T) * R                                          */MDSB  90\n /*      FOR GIVEN UPPER BAND FACTOR T AND GENERAL RIGHT HAND         */MDSB 100\n /*      SIDE MATRIX R                                                */MDSB 110\n /*                                                                   */MDSB 120\n /*********************************************************************/MDSB 130\n    PROCEDURE(A,R,N,NUD,M,OPT),.                                        MDSB 140\n    DECLARE                                                             MDSB 150\n         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MDSB 160\n         (OPT,COPT) CHARACTER(1),      /*OPTION PARAMETER             */MDSB 170\n         SUM BINARY FLOAT(53),                                          MDSB 180\n         (A(*,*),R(*,*),H)                                              MDSB 190\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MDSB 200\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MDSB 210\n         (I,ISTA,IEND,INCR,J,K,                                         MDSB 220\n         KEND,KI,KINC,KK,L,LM,                                          MDSB 230\n         LN,LNUD,M,N,NC,NR,NUD)                                         MDSB 240\n         BINARY FIXED,.                                                 MDSB 250\n    LN   =N,.                          /*STORE VARIABLES N, NUD, M,   */MDSB 260\n    LNUD =NUD,.                        /*OPT FROM CALLING SEQUENCE    */MDSB 270\n    LM   =M,.                          /*INTO LOCAL PARAMETERS        */MDSB 280\n    COPT =OPT,.                                                         MDSB 290\n    ERROR='P',.                        /*P MEANS WRONG INPUT          */MDSB 300\n    IF LNUD LT 0                       /*TEST SPECIFIED INPUT PARA-   */MDSB 310\n    THEN GO TO RETURN,.                /*METERS NUD, N, M             */MDSB 320\n    IF LN LE LNUD                                                       MDSB 330\n    THEN GO TO RETURN,.                /*PROCEDURE RETURNS IF AT      */MDSB 340\n    IF LM LT 0                         /*LEAST ONE OF THE PARAMETERS  */MDSB 350\n    THEN GO TO RETURN,.                /*NUD, N, M IS WRONG           */MDSB 360\n                                       /*                             */MDSB 370\n    NC   =LNUD+1,.                     /*NC AND NR ARE MARKS FOR BEGIN*/MDSB 380\n    NR   =LN-LNUD,.                    /*AND END OF THE BAND STRUCTURE*/MDSB 390\n    IF COPT= '2'                       /*SHOULD R BE DIVIDED BY T ONLY*/MDSB 400\n    THEN GO TO UPPER,.                 /*******************************/MDSB 410\n    ISTA,INCR=1,.                      /*INITIALIZATION FOR           */MDSB 420\n    IEND =LN,.                         /*TRANSPOSE(T) * X = R         */MDSB 430\n    KINC =-1,.                         /*******************************/MDSB 440\n MAIN..                                                                 MDSB 450\n         DO I =ISTA TO IEND BY INCR,.  /*EXECUTE LOOP OVER ALL ROWS   */MDSB 460\n         H    =A(I,1),.                /*STORE I-TH DIAGONAL ELEMENT  */MDSB 470\n         IF H = 0                      /*AND TEST IT FOR ZERO         */MDSB 480\n         THEN DO,.                                                      MDSB 490\n              ERROR='S',.              /*S MEANS ANY PIVOT IS ZERO    */MDSB 500\n              GO TO RETURN,.                                            MDSB 510\n              END,.                                                     MDSB 520\n         KEND =NC,.                    /*KEND IS END VALUE OF THE     */MDSB 530\n         IF INCR= 1                    /*INNERMOST DO-COUNTER K       */MDSB 540\n         THEN L    =NC-I,.             /*L IF DIVISION BY TRANSP(T)   */MDSB 550\n         ELSE L    =I-NR,.             /*L IF DIVISION BY MATRIX T    */MDSB 560\n         IF L GT 0                                                      MDSB 570\n         THEN KEND =KEND-L,.           /*MODIFY KEND                  */MDSB 580\n              DO J =1 TO LM,.          /*LOOP OVER THE M COLUMNS OF R */MDSB 590\n              SUM  =R(I,J),.           /*INITIALIZE SUM               */MDSB 600\n              KI,KK=I,.                                                 MDSB 610\n                   DO K =2 TO KEND,.   /*COMPUTE SCALAR PRODUCT SUM   */MDSB 620\n                   KI   =KI+KINC,.                                      MDSB 630\n                   KK   =KK-INCR,.                                      MDSB 640\n                   SUM  =SUM-MULTIPLY(A(KI,K),R(KK,J),53),.             MDSB 650\n                   END,.                                                MDSB 660\n              R(I,J)=SUM/H,.           /*DIVIDE SUM BY DIAGONAL TERM  */MDSB 670\n              END,.                    /*AND STORE IT BACK            */MDSB 680\n         END,.                                                          MDSB 690\n    IF COPT= '1'                       /*TEST END OF OPERATION        */MDSB 700\n    THEN DO,.                                                           MDSB 710\n         ERROR='0',.                   /*SUCCESSFUL DIVISION          */MDSB 720\n         GO TO RETURN,.                                                 MDSB 730\n         END,.                                                          MDSB 740\n UPPER..                               /*******************************/MDSB 750\n    COPT ='1',.                        /*INITIALIZATION FOR  T * X = R*/MDSB 760\n    ISTA =LN,.                         /*******************************/MDSB 770\n    INCR =-1,.                                                          MDSB 780\n    IEND =1,.                                                           MDSB 790\n    KINC =0,.                                                           MDSB 800\n    GO TO MAIN,.                       /*BRANCH TO THE MAIN LOOPS     */MDSB 810\n RETURN..                                                               MDSB 820\n    END,.                              /*END OF PROCEDURE MDSB        */MDSB 830\n MDLG..                                                                 MDLG  10\n /*********************************************************************/MDLG  20\n /*                                                                   */MDLG  30\n /*      FOR AN EQUATION SYSTEM  A*X=R  WITH GENERAL NON-SINGULAR     */MDLG  40\n /*      MATRIX  A=L*U  CALCULATE OPTIONALLY                          */MDLG  50\n /*           SOLUTION X                                              */MDLG  60\n /*           INVERSE(L) * R                                          */MDLG  70\n /*           INVERSE(U) * R                                          */MDLG  80\n /*      FOR GIVEN TRIANGULAR FACTORS L, U AND RIGHT HAND SIDE R      */MDLG  90\n /*                                                                   */MDLG 100\n /*********************************************************************/MDLG 110\n    PROCEDURE(A,R,IPER,N,M,OPT),.                                       MDLG 120\n    DECLARE                                                             MDLG 130\n         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MDLG 140\n         OPT CHARACTER(1),             /*OPTION PARAMETER             */MDLG 150\n         SUM BINARY FLOAT(53),                                          MDLG 160\n         (A(*,*),R(*,*),H)                                              MDLG 170\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MDLG 180\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MDLG 190\n         (IPER(*),I,IS,J,                                               MDLG 200\n         K,LM,LN,M,N)                                                   MDLG 210\n         BINARY FIXED,.                                                 MDLG 220\n    LM   =M,.                                                           MDLG 230\n    LN   =N,.                                                           MDLG 240\n    ERROR='P',.                        /*P MEANS WRONG INPUT          */MDLG 250\n    IF LN LE 0                         /*TEST SPECIFIED PARAMETER N   */MDLG 260\n    THEN GO TO RETURN,.                                                 MDLG 270\n    IF LM LE 0                         /*TEST SPECIFIED PARAMETER M   */MDLG 280\n    THEN GO TO RETURN,.                                                 MDLG 290\n    ERROR='0',.                        /*PRESET ERROR INDICATOR       */MDLG 300\n    IF OPT= '2'                        /*SHOULD R BE DIVIDED BY U ONLY*/MDLG 310\n    THEN GO TO UPPER,.                 /*******************************/MDLG 320\n                                       /*LOOP FOR DIVISION BY LOWER   */MDLG 330\n         DO I =1 TO LN,.               /*TRIANGULAR MATRIX L          */MDLG 340\n         H    =A(I,I),.                /*******************************/MDLG 350\n         IF H = 0                      /*IS ANY DIAGONAL ELEMENT ZERO */MDLG 360\n         THEN DO,.                                                      MDLG 370\n              ERROR='S',.              /*S MEANS ANY PIVOT IS ZERO    */MDLG 380\n              GO TO RETURN,.                                            MDLG 390\n              END,.                    /*FOR PERMUTATION OF ROWS OF   */MDLG 400\n         IS   =IPER(I),.               /*RIGHT HAND SIDE ARRAY R      */MDLG 410\n              DO K =1 TO LM,.          /*LOOP OVER THE M COLUMNS OF R */MDLG 420\n              SUM  =R(IS,K),.          /*INITIALIZE SUM               */MDLG 430\n              R(IS,K)=R(I,K),.         /*RESTORE ROWS OF ARRAY R      */MDLG 440\n                   DO J =1 TO I-1,.    /*COMPUTE SCALAR PRODUCT SUM   */MDLG 450\n                   SUM  =SUM-MULTIPLY(A(I,J),R(J,K),53),.               MDLG 460\n                   END,.                                                MDLG 470\n              R(I,K)=SUM/H,.           /*DIVIDE SUM BY DIAGONAL TERM  */MDLG 480\n              END,.                    /*AND STORE RESULT             */MDLG 490\n         END,.                                                          MDLG 500\n    IF OPT= '1'                        /*TEST END OF OPERATION        */MDLG 510\n    THEN GO TO RETURN,.                /*******************************/MDLG 520\n                                       /*LOOP FOR DIVISION BY UPPER   */MDLG 530\n UPPER..                               /*TRIANGULAR MATIX U           */MDLG 540\n         DO I =LN-1 TO 1 BY -1,.       /*******************************/MDLG 550\n              DO K =1 TO LM,.          /*LOOP OVER THE M COLUMNS OF R */MDLG 560\n              SUM  =R(I,K),.           /*INITIALIZE SUM               */MDLG 570\n                   DO J =I+1 TO LN,.   /*COMPUTE SCALAR PRODUCT SUM   */MDLG 580\n                   SUM  =SUM-MULTIPLY(A(I,J),R(J,K),53),.               MDLG 590\n                   END,.                                                MDLG 600\n              R(I,K)=SUM,.             /*STORE RESULT                 */MDLG 610\n              END,.                                                     MDLG 620\n         END,.                                                          MDLG 630\n RETURN..                                                               MDLG 640\n    END,.                              /*END OF PROCEDURE MDLG        */MDLG 650\n MIG..                                                                  MIG   10\n /*********************************************************************/MIG   20\n /*                                                                   */MIG   30\n /*      INVERT A FACTORIZED GENERAL MATRIX A.                        */MIG   40\n /*      A MUST BE FACTORIZED INTO THE FORM A = L*U, WHERE THE        */MIG   50\n /*      UPPER TRIANGULAR MATRIX U CONTAINS THE UNIT DIAGONAL         */MIG   60\n /*      WHICH IS NOT STORED.                                         */MIG   70\n /*                                                                   */MIG   80\n /*********************************************************************/MIG   90\n    PROCEDURE(A,IPER,N),.                                               MIG  100\n    DECLARE                                                             MIG  110\n         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MIG  120\n         SUM BINARY FLOAT(53),                                          MIG  130\n         (A(*,*),PIV)                                                   MIG  140\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MIG  150\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MIG  160\n         (IPER(*),I,J,K,LN,M,MN,N)                                      MIG  170\n         BINARY FIXED,.                                                 MIG  180\n    LN   =N,.                                                           MIG  190\n    MN   =LN-1,.                                                        MIG  200\n    IF LN LE 0                         /*TEST SPECIFIED PARAMETER N   */MIG  210\n    THEN DO,.                                                           MIG  220\n         ERROR='P',.                   /*P MEANS WRONG INPUT          */MIG  230\n         GO TO RETURN,.                                                 MIG  240\n         END,.                         /*******************************/MIG  250\n                                       /*INVERT LOWER TRIANG. MATRIX L*/MIG  260\n         DO I =0 TO MN,.               /*******************************/MIG  270\n         M    =I+1,.                                                    MIG  280\n         PIV  =A(M,M),.                                                 MIG  290\n         IF PIV= 0                     /*IS ANY DIAGONAL ELEMENT ZERO */MIG  300\n         THEN DO,.                                                      MIG  310\n              ERROR='S',.              /*S MEANS NEXT PIVOT ELEMENT   */MIG  320\n              GO TO RETURN,.           /*IS ZERO                      */MIG  330\n              END,.                                                     MIG  340\n         PIV,A(M,M)=1/PIV,.            /*CALCULATE NEW DIAGONAL TERM  */MIG  350\n              DO J =1 TO I,.           /*EXECUTE LOOP IN M-TH ROW     */MIG  360\n              SUM  =0,.                                                 MIG  370\n                   DO K =J TO I,.      /*COMPUTE SCALAR PRODUCT SUM   */MIG  380\n                   SUM  =SUM+MULTIPLY(A(M,K),A(K,J),53),.               MIG  390\n                   END,.                                                MIG  400\n              A(M,J)=-SUM*PIV,.        /*CALCULATE AND STORE NEW TERM */MIG  410\n              END,.                                                     MIG  420\n         END,.                         /*******************************/MIG  430\n                                       /*INVERT UPPER TRIANG. MATRIX U*/MIG  440\n         DO I =MN TO 1 BY -1,.         /*******************************/MIG  450\n         M    =I+1,.                                                    MIG  460\n              DO J =LN TO M BY -1,.    /*EXECUTE LOOP IN I-TH ROW     */MIG  470\n              SUM  =A(I,J),.                                            MIG  480\n                   DO K =M TO J-1,.    /*COMPUTE SCALAR PRODUCT SUM   */MIG  490\n                   SUM  =SUM+MULTIPLY(A(I,K),A(K,J),53),.               MIG  500\n                   END,.                                                MIG  510\n              A(I,J)=-SUM,.            /*STORE NEW VALUE              */MIG  520\n              END,.                                                     MIG  530\n         END,.                         /*******************************/MIG  540\n                                       /*MULTIPLY  INVERSE(U)*INV(L)  */MIG  550\n         DO I =1 TO MN,.               /*******************************/MIG  560\n         M    =I+1,.                                                    MIG  570\n              DO J =1 TO LN,.          /*EXECUTE LOOP IN I-TH ROW     */MIG  580\n              IF J LE I                                                 MIG  590\n              THEN SUM  =A(I,J),.      /*FOR LOWER TRIANGULAR PART    */MIG  600\n              ELSE DO,.                                                 MIG  610\n                   SUM  =0,.           /*IF ELEMENT A(I,J) BELONGS TO */MIG  620\n                   M    =J,.           /*THE UPPER TRIANGULAR PART OF */MIG  630\n                   END,.               /*MATRIX A                     */MIG  640\n                                       /*COMPUTE SCALAR PRODUCT SUM   */MIG  650\n                   DO K =M TO LN,.     /*OF I-TH ROW WITH J-TH COLUMN */MIG  660\n                   SUM  =SUM+MULTIPLY(A(I,K),A(K,J),53),.               MIG  670\n                   END,.                                                MIG  680\n              A(I,J)=SUM,.             /*STORE RESULT                 */MIG  690\n              END,.                                                     MIG  700\n         END,.                         /*******************************/MIG  710\n                                       /*RE-INTERCHANGE COLUMNS OF A  */MIG  720\n         DO I =MN TO 1 BY -1,.         /*******************************/MIG  730\n         M    =IPER(I),.                                                MIG  740\n         IF M GT I                     /*SHOULD RE-INTERCHANGE BE DONE*/MIG  750\n         THEN DO,.                                                      MIG  760\n                   DO J =1 TO LN,.     /*INTERCHANGE COLUMN I WITH    */MIG  770\n                   PIV  =A(J,I),.      /*COLUMN IPER(I)               */MIG  780\n                   A(J,I)=A(J,M),.                                      MIG  790\n                   A(J,M)=PIV,.                                         MIG  800\n                   END,.                                                MIG  810\n              END,.                                                     MIG  820\n         END,.                                                          MIG  830\n RETURN..                                                               MIG  840\n    END,.                              /*END OF PROCEDURE MIG         */MIG  850\n MIS..                                                                  MIS   10\n /*********************************************************************/MIS   20\n /*                                                                   */MIS   30\n /*            INVERT SYMMETRIC POSITIVE DEFINITE MATRIX              */MIS   40\n /*                                                                   */MIS   50\n /*********************************************************************/MIS   60\n    PROCEDURE(A,N),.                                                    MIS   70\n    DECLARE                                                             MIS   80\n         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MIS   90\n         SUM BINARY FLOAT(53),                                          MIS  100\n         (A(*),PIV)                                                     MIS  110\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MIS  120\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MIS  130\n         (ICOL,IPIV,IROW,J,K,L,LN,M,N)                                  MIS  140\n         BINARY FIXED,.                                                 MIS  150\n                                       /*******************************/MIS  160\n                                       /*INVERT TRIANGULAR MATRIX     */MIS  170\n    LN   =N,.                          /*******************************/MIS  180\n    J    =0,.                                                           MIS  190\n    IF LN LE 0                         /*TEST SPECIFIED PARAMETER N   */MIS  200\n    THEN DO,.                                                           MIS  210\n         ERROR='P',.                   /*P MEANS WRONG INPUT          */MIS  220\n         GO TO RETURN,.                                                 MIS  230\n         END,.                                                          MIS  240\n                                       /*PERFORM LOOP OVER ALL ROWS   */MIS  250\n         DO K =0 TO LN-1,.                                              MIS  260\n         IPIV =0,.                                                      MIS  270\n         J    =J+1,.                                                    MIS  280\n         PIV  =A(J+K),.                                                 MIS  290\n         IF PIV= 0                     /*IS ANY DIAGONAL ELEMENT ZERO */MIS  300\n         THEN DO,.                                                      MIS  310\n              ERROR='S',.              /*S MEANS MATRIX IS NOT        */MIS  320\n              GO TO RETURN,.           /*POSITIVE DEFINITE            */MIS  330\n              END,.                                                     MIS  340\n         PIV,A(J+K)=1/PIV,.                                             MIS  350\n              DO L =1 TO K,.           /*EXECUTE LOOP IN (K+1)-TH ROW */MIS  360\n              SUM  =0,.                                                 MIS  370\n              IROW =J,.                                                 MIS  380\n              ICOL,IPIV=IPIV+L,.                                        MIS  390\n                   DO M =L TO K,.      /*CALCULATE SCALAR PRODUCTS    */MIS  400\n                   SUM  =SUM+MULTIPLY(A(IROW),A(ICOL),53),.             MIS  410\n                   ICOL =ICOL+M,.                                       MIS  420\n                   IROW =IROW+1,.                                       MIS  430\n                   END,.                                                MIS  440\n              A(J) =-SUM*PIV,.         /*CALCULATE NEW ELEMENT        */MIS  450\n              J    =J+1,.                                               MIS  460\n              END,.                                                     MIS  470\n         END,.                         /*******************************/MIS  480\n                                       /*MULTIPLY WITH TRANSPOSE      */MIS  490\n    J    =0,.                          /*******************************/MIS  500\n         DO K =1 TO LN,.               /*PERFORM LOOP OVER ALL ROWS   */MIS  510\n         IROW =K,.                                                      MIS  520\n              DO L =1 TO K,.           /*EXECUTE LOOP WITHIN K-TH ROW */MIS  530\n              SUM  =0,.                                                 MIS  540\n              ICOL,J=J+1,.                                              MIS  550\n              IROW =IROW-1,.                                            MIS  560\n                   DO M =K TO LN,.     /*CALCULATE SCALAR PRODUCTS    */MIS  570\n                   SUM  =SUM+MULTIPLY(A(ICOL),A(ICOL+IROW),53),.        MIS  580\n                   ICOL =ICOL+M,.                                       MIS  590\n                   END,.                                                MIS  600\n              A(J) =SUM,.                                               MIS  610\n              END,.                                                     MIS  620\n         END,.                                                          MIS  630\n RETURN..                                                               MIS  640\n    END,.                              /*END OF PROCEDURE MIS         */MIS  650\n MINV..                                                                 MINV  10\n /*********************************************************************/MINV  20\n /*                                                                   */MINV  30\n /*      TO INVERT A MATRIX                                           */MINV  40\n /*                                                                   */MINV  50\n /*********************************************************************/MINV  60\n    PROCEDURE (A,N,D,CON),.                                             MINV  70\n    DECLARE                                                             MINV  80\n         ERROR EXTERNAL CHARACTER(1),                                   MINV  90\n         (I,J,K,N,L(N),M(N))                                            MINV 100\n         FIXED BINARY,                                                  MINV 110\n         (A(*,*),BIGA,HOLD,D,CON,S)                                     MINV 120\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/MINV 130\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/MINV 140\n /*                                                                   */MINV 150\n    ERROR='0',.                                                         MINV 160\n    IF N LE 0                                                           MINV 170\n    THEN DO,.                                                           MINV 180\n         ERROR='1',.                   /* ORDER OF MATRIX = 0.        */MINV 190\n         GO TO FIN,.                                                    MINV 200\n         END,.                                                          MINV 210\n    IF CON= 0                                                           MINV 220\n    THEN S    =1.0E-5,.                /* SINGLE PRECISION VERSION /*S*/MINV 230\n  /*THEN S    =1.0E-15,.               /* DOUBLE PRECISION VERSION /*D*/MINV 240\n    ELSE S    =CON,.                                                    MINV 250\n    IF N = 1                           /* INVERT A SCALAR             */MINV 260\n    THEN DO,.                                                           MINV 270\n         D    =A(1,1),.                                                 MINV 280\n         IF ABS(D) LE S                                                 MINV 290\n         THEN DO,.                                                      MINV 300\n              ERROR='2',.                                               MINV 310\n              END,.                                                     MINV 320\n         ELSE A(1,1) = 1/D,.                                            MINV 330\n         GO TO FIN,.                                                    MINV 340\n         END,.                                                          MINV 350\n    D    =1.0,.                        /* SEARCH FOR LARGEST ELEMENT  */MINV 360\n         DO K = 1 TO N,.                                                MINV 370\n         L(K) =K,.                                                      MINV 380\n         M(K) =K,.                                                      MINV 390\n         BIGA =A(K,K),.                                                 MINV 400\n              DO I=K TO N,.                                             MINV 410\n                   DO J=K TO N,.                                        MINV 420\n                   IF ABS(BIGA) LT ABS(A(I,J))                          MINV 430\n                   THEN DO,.                                            MINV 440\n                        BIGA =A(I,J),.                                  MINV 450\n                        L(K) =I,.                                       MINV 460\n                        M(K) =J,.                                       MINV 470\n                        END,.                                           MINV 480\n                   END,.                                                MINV 490\n              END,.                                                     MINV 500\n         J    =L(K),.                  /* INTERCHANGE ROWS            */MINV 510\n         IF L(K) GT K                                                   MINV 520\n         THEN DO,.                                                      MINV 530\n                   DO I = 1 TO N,.                                      MINV 540\n                   HOLD =-A(K,I),.                                      MINV 550\n                   A(K,I)=A(J,I),.                                      MINV 560\n                   A(J,I)=HOLD,.                                        MINV 570\n                   END,.                                                MINV 580\n              END,.                                                     MINV 590\n         I    =M(K),.                  /* INTERCHANGE COLUMNS         */MINV 600\n         IF M(K) GT K                                                   MINV 610\n         THEN DO,.                                                      MINV 620\n                   DO J = 1 TO N,.                                      MINV 630\n                   HOLD =-A(J,K),.                                      MINV 640\n                   A(J,K)=A(J,I),.                                      MINV 650\n                   A(J,I)=HOLD,.                                        MINV 660\n                   END,.                                                MINV 670\n              END,.                                                     MINV 680\n         IF ABS(BIGA) LE S                                              MINV 690\n         THEN DO,.                                                      MINV 700\n              D    =0.0,.                                               MINV 710\n              GO TO COMP,.                                              MINV 720\n              END,.                                                     MINV 730\n /*                                                                   */MINV 740\n /*      DIVIDE COLUMNS BY MINUS PIVOT (VALUE OF PIVOT ELEMENT IS     */MINV 750\n /*      CONTAINED IN BIGA)                                           */MINV 760\n              DO I = 1 TO N,.                                           MINV 770\n              IF I NE K                                                 MINV 780\n              THEN A(I,K)=A(I,K)/(-A(K,K)),.                            MINV 790\n              END,.                                                     MINV 800\n              DO I = 1 TO N,.          /* REDUCE MATRIX               */MINV 810\n              IF I NE K                                                 MINV 820\n              THEN DO,.                                                 MINV 830\n                        DO J = 1 TO N,.                                 MINV 840\n                        IF J NE K                                       MINV 850\n                        THEN A(I,J)=A(I,K)*A(K,J)+A(I,J),.              MINV 860\n                        END,.                                           MINV 870\n                   END,.                                                MINV 880\n              END,.                                                     MINV 890\n              DO J = 1 TO N,.                                           MINV 900\n              IF J NE K                /* DIVIDE BY ROW PIVOT         */MINV 910\n              THEN A(K,J)=A(K,J)/A(K,K),.                               MINV 920\n              END,.                                                     MINV 930\n         D    =D*A(K,K),.              /* COMPUTE DETERMINANT         */MINV 940\n COMP..                                                                 MINV 950\n         IF ABS(D) LE S                                                 MINV 960\n         THEN DO,.                                                      MINV 970\n              ERROR='2',.              /* DETERMINANT IS ZERO         */MINV 980\n              GO TO FIN,.                                               MINV 990\n              END,.                                                     MINV1000\n         A(K,K)=1.0/A(K,K),.           /* REPLACE PIVOT BY RECIPROCAL */MINV1010\n         END,.                                                          MINV1020\n /*                                                                   */MINV1030\n /*      FINAL ROW AND COLUMN INTERCHANGE                             */MINV1040\n /*                                                                   */MINV1050\n    K    =N,.                                                           MINV1060\n LOOP..                                                                 MINV1070\n    K    =K-1,.                                                         MINV1080\n    IF K GT 0                                                           MINV1090\n    THEN DO,.                                                           MINV1100\n         I    =L(K),.                                                   MINV1110\n         IF I GT K                                                      MINV1120\n         THEN DO,.                                                      MINV1130\n                   DO J = 1 TO N,.                                      MINV1140\n                   HOLD =A(J,K),.                                       MINV1150\n                   A(J,K)=-A(J,I),.                                     MINV1160\n                   A(J,I)=HOLD,.                                        MINV1170\n                   END,.                                                MINV1180\n              END,.                                                     MINV1190\n         J    =M(K),.                                                   MINV1200\n         IF J GT K                                                      MINV1210\n         THEN DO,.                                                      MINV1220\n                   DO I = 1 TO N,.                                      MINV1230\n                   HOLD =A(K,I),.                                       MINV1240\n                   A(K,I)=-A(J,I),.                                     MINV1250\n                   A(J,I)=HOLD,.                                        MINV1260\n                   END,.                                                MINV1270\n              END,.                                                     MINV1280\n         GO TO LOOP,.                                                   MINV1290\n         END,.                                                          MINV1300\n FIN..                                                                  MINV1310\n    RETURN,.                                                            MINV1320\n    END,.                              /*END OF PROCEDURE MINV        */MINV1330\n MLSQ..                                                                 MLSQ  10\n /*********************************************************************/MLSQ  20\n /*                                                                   */MLSQ  30\n /*      LINEAR LEAST SQUARES PROBLEM SOLVED USING HOUSEHOLDER TRANSF.*/MLSQ  40\n /*                                                                   */MLSQ  50\n /*********************************************************************/MLSQ  60\n    PROCEDURE(A,B,M,N,K),.                                              MLSQ  70\n    DECLARE                                                             MLSQ  80\n         (A(*,*),B(*,*),PIVR,MAXA)                                      MLSQ  90\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MLSQ 100\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MLSQ 110\n         (AUX(N),H,SIG,BETA)                                            MLSQ 120\n         BINARY FLOAT(53),                                              MLSQ 130\n         (TOL,PIV(N))                                                   MLSQ 140\n         BINARY FLOAT,                                                  MLSQ 150\n         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MLSQ 160\n         (I,J,K,L,M,N,PIVI,LM,LN,LK)                                    MLSQ 170\n         BINARY FIXED,.                                                 MLSQ 180\n    LM   =M,.                                                           MLSQ 190\n    LN   =N,.                                                           MLSQ 200\n    LK   =K,.                                                           MLSQ 210\n    SIG  =0,.                                                           MLSQ 220\n    ERROR='D',.                        /*PRESET ERROR INDICATOR       */MLSQ 230\n    IF LM GE LN                        /*IF M LESS THAN N             */MLSQ 240\n    THEN IF LN GE 0                    /*OR IF N NOT POSITIVE         */MLSQ 250\n    THEN IF LK GT 0                    /*OR IF K NOT POSITIVE         */MLSQ 260\n    THEN DO,.                          /*THEN BYPASS OPERATION        */MLSQ 270\n              DO L = 1 TO LN,.         /*CALCULATE SCALARPRODUCTS OF  */MLSQ 280\n              H    =0,.                /*COLUMNS                      */MLSQ 290\n                   DO I = 1 TO LM,.                                     MLSQ 300\n                   H    =H+MULTIPLY(A(I,L),A(I,L),53),.                 MLSQ 310\n                   END,.                                                MLSQ 320\n              IF H GE SIG                                               MLSQ 330\n              THEN DO,.                                                 MLSQ 340\n                   SIG  =H,.           /*SAVE MAXIMAL SCALARPRODUCT   */MLSQ 350\n                   PIVI =L,.           /*SAVE SUBSCRIPT OF PIVOTCOLUMN*/MLSQ 360\n                   END,.                                                MLSQ 370\n              AUX(L),PIV(L)=H,.                                         MLSQ 380\n              END,.                    /*******************************/MLSQ 390\n                                       /*DECOMPOSITION LOOP           */MLSQ 400\n         ERROR='0',.                   /*******************************/MLSQ 410\n              DO L = 1 TO LN,.                                          MLSQ 420\n              TOL  =PIV(PIVI),.        /*ORIGINAL LENGTH OF PIVOTCOL. */MLSQ 430\n              IF PIVI GT L             /*SHOULD COLUMN BE INTERCHANGED*/MLSQ 440\n              THEN DO,.                                                 MLSQ 450\n                   H    =AUX(L),.      /*INTERCHANGE SCALARPRODUCTS   */MLSQ 460\n                   AUX(L)=AUX(PIVI),.                                   MLSQ 470\n                   PIV(PIVI)=PIV(L),.                                   MLSQ 480\n                   AUX(PIVI)=H,.                                        MLSQ 490\n                        DO J=L TO LM,. /*INTERCHANGE LOWER PART OF    */MLSQ 500\n                        PIVR =A(J,L),. /*COLUMNS OF A                 */MLSQ 510\n                        A(J,L)=A(J,PIVI),.                              MLSQ 520\n                        A(J,PIVI)=PIVR,.                                MLSQ 530\n                        END,.                                           MLSQ 540\n                   END,.                                                MLSQ 550\n              IF L GT 1                /*RECALCULATE COLUMN LENGTH    */MLSQ 560\n              THEN DO,.                /*TO AVOID ROUND-OFF PROBLEMS  */MLSQ 570\n                   SIG  =0,.                                            MLSQ 580\n                        DO I = L TO LM,.                                MLSQ 590\n                        SIG  =SIG+MULTIPLY(A(I,L),A(I,L),53),.          MLSQ 600\n                        END,.                                           MLSQ 610\n                   END,.                                                MLSQ 620\n              IF TOL= 0                                                 MLSQ 630\n              THEN DO,.                                                 MLSQ 640\n                   IF ERROR NE 'B'                                      MLSQ 650\n                   THEN IF ERROR NE 'W'                                 MLSQ 660\n                   THEN ERROR='S',.    /*GIVEN A HAS ZERO-COLUMN(S)   */MLSQ 670\n                   ELSE ERROR='B',.                                     MLSQ 680\n                   TOL  =1,.                                            MLSQ 690\n                   END,.                                                MLSQ 700\n              BETA =TOL*1E-10,.        /*SINGLE PRECISION VERSION  /*S*/MLSQ 710\n  /*          BETA =TOL*1E-20,.        /*DOUBLE PRECISION VERSION  /*D*/MLSQ 720\n              IF SIG LE BETA                                            MLSQ 730\n              THEN DO,.                /*INDICATE LOSS OF SIGNIFICANCE*/MLSQ 740\n                   IF ERROR NE 'B'                                      MLSQ 750\n                   THEN IF ERROR NE 'S'                                 MLSQ 760\n                   THEN ERROR='W',.                                     MLSQ 770\n                   ELSE ERROR='B',.                                     MLSQ 780\n                   IF SIG LE 0                                          MLSQ 790\n                   THEN SIG  =BETA,.   /*MODIFY ZERO VALUE            */MLSQ 800\n                   END,.                                                MLSQ 810\n              SIG  =SQRT(SIG),.                                         MLSQ 820\n              H    =A(L,L),.                                            MLSQ 830\n              IF H LT 0                                                 MLSQ 840\n              THEN SIG  =-SIG,.        /*FORCE SIGN(SIG) TO SIGN(H)   */MLSQ 850\n              PIV(L)=PIVI,.            /*SAVE INTERCHANGE INFORMATION */MLSQ 860\n              A(L,L),BETA=H+SIG,.      /*TRANSFORM DIAGONAL ELEMENT   */MLSQ 870\n              AUX(L)=-SIG,.            /*SAVE DIAGONAL ELEMENT        */MLSQ 880\n              BETA =SIG*BETA,.                                          MLSQ 890\n                                       /*TRANSFORM SUBMATRIX OF A     */MLSQ 900\n              PIVR =0,.                                                 MLSQ 910\n                   DO J = L+1 TO LN,.  /*TRANSFORM LOWER PART OF A    */MLSQ 920\n                   H    =0,.           /*COLUMNS L+1 UP TO N ONLY     */MLSQ 930\n                        DO I = L TO LM,.                                MLSQ 940\n                        H    =H+MULTIPLY(A(I,L),A(I,J),53),.            MLSQ 950\n                        END,.                                           MLSQ 960\n                   SIG  =H/BETA,.      /*MODIFY J-TH COLUMN           */MLSQ 970\n                        DO I = LM TO L BY -1,.                          MLSQ 980\n                        H    =A(I,J),.                                  MLSQ 990\n                        A(I,J)=H-A(I,L)*SIG,.                           MLSQ1000\n                        END,.          /*NEXT UPDATE COLUMN LENGTH    */MLSQ1010\n                   H    =A(L,J),.                                       MLSQ1020\n                   AUX(J),H=AUX(J)-H*H,.                                MLSQ1030\n                   IF H GE PIVR        /*SEARCH NEXT PIVOTCOLUMN      */MLSQ1040\n                   THEN DO,.                                            MLSQ1050\n                        PIVR =H,.                                       MLSQ1060\n                        PIVI =J,.                                       MLSQ1070\n                        END,.                                           MLSQ1080\n                   END,.                                                MLSQ1090\n                                       /*TRANSFORM LOWER PART OF      */MLSQ1100\n                   DO J = 1 TO LK,.    /*RIGHT HAND SIDE MATRIX B     */MLSQ1110\n                   H    =0,.                                            MLSQ1120\n                        DO I = L TO LM,.                                MLSQ1130\n                        H    =H+MULTIPLY(A(I,L),B(I,J),53),.            MLSQ1140\n                        END,.                                           MLSQ1150\n                   MAXA =H/BETA,.      /*MODIFY J-TH COLUMN           */MLSQ1160\n                        DO I = L TO LM,.                                MLSQ1170\n                        B(I,J)=B(I,J)-A(I,L)*MAXA,.                     MLSQ1180\n                        END,.                                           MLSQ1190\n                   END,.                                                MLSQ1200\n              END,.                    /*END OF DECOMPOSITION LOOP    */MLSQ1210\n                                       /*******************************/MLSQ1220\n              DO J = LN TO 1 BY -1,.   /*BACKSUBSTITUTION,INTERCHANGE */MLSQ1230\n                   DO I = 1 TO LK,.    /*******************************/MLSQ1240\n                   H    =B(J,I),.                                       MLSQ1250\n                        DO L = J+1 TO LN,.                              MLSQ1260\n                        H    =H-MULTIPLY(A(J,L),B(L,I),53),.            MLSQ1270\n                        END,.                                           MLSQ1280\n                   PIVI =PIV(J),.                                       MLSQ1290\n                   B(J,I)=B(PIVI,I),.                                   MLSQ1300\n                   B(PIVI,I)=H/AUX(J),.                                 MLSQ1310\n                   END,.                                                MLSQ1320\n              END,.                                                     MLSQ1330\n         IF LN LT LM                   /*COMPUTE LEAST SQUARES        */MLSQ1340\n         THEN DO J = 1 TO LK,.         /*IN CASE OF AN OVERDETERMINED */MLSQ1350\n              H    =0,.                /*EQUATION SYSTEM ONLY         */MLSQ1360\n                   DO I = LN+1 TO LM,.                                  MLSQ1370\n                   H    =H+MULTIPLY(B(I,J),B(I,J),53),.                 MLSQ1380\n                   END,.                                                MLSQ1390\n              B(LM,J)=H,.                                               MLSQ1400\n              END,.                                                     MLSQ1410\n         END,.                         /*END OF OPERATION             */MLSQ1420\n    END,.                              /*END OF PROCEDURE MLSQ        */MLSQ1430\n MGB1..                                                                 MGB   10\n /*********************************************************************/MGB   20\n /*                                                                   */MGB   30\n /*      FOR AN EQUATION SYSTEM  A*X=R  WITH BAND MATRIX  A=L*U       */MGB   40\n /*      CALCULATE OPTIONALLY                                         */MGB   50\n /*           UPPER TRIANGULAR FACTOR U AND SOLUTION X,               */MGB   60\n /*           UPPER TRIANGULAR FACTOR U AND INVERSE(L)*R,             */MGB   70\n /*           INVERSE(U)*R FOR GIVEN U,R.                             */MGB   80\n /*                                                                   */MGB   90\n /*********************************************************************/MGB  100\n    PROCEDURE(A,R,N,NLD,NUD,M,EPS,OPT),.                                MGB  110\n    DECLARE                                                             MGB  120\n         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MGB  130\n         (OPT,COPT) CHARACTER(1),                                       MGB  140\n         EPS BINARY FLOAT,                                              MGB  150\n         SUM BINARY FLOAT(53),                                          MGB  160\n         (A(*,*),R(*,*),L(*),SL(N),PIV,W)                               MGB  170\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MGB  180\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MGB  190\n         (IPER(*),I,IBAC,IND,INL,IPIV,                                  MGB  200\n         J,K,KL,LM,LLM,LN,LNLD,LNUD,M,                                  MGB  210\n         N,NB,NLD,NUD)                                                  MGB  220\n         BINARY FIXED,.                                                 MGB  230\n    IND  =1,.                                                           MGB  240\n    GO TO BOTH,.                                                        MGB  250\n MGB2..                                                                 MGB  260\n /*********************************************************************/MGB  270\n /*                                                                   */MGB  280\n /*      FOR AN EQUATION SYSTEM  A*X=R  WITH BAND MATRIX  A=L*U       */MGB  290\n /*      COMPUTE OPTIONALLY                                           */MGB  300\n /*           TRIANGULAR FACTORS L,U  POSSIBLY COMBINED WITH          */MGB  310\n /*           CALCULATION OF X OR INVERSE(L)*R,                       */MGB  320\n /*           INVERSE(L)*R OR INVERSE(A)*R FOR GIVEN L,U,R.           */MGB  330\n /*                                                                   */MGB  340\n /*********************************************************************/MGB  350\n    ENTRY(A,R,L,IPER,N,NLD,NUD,M,EPS,OPT),.                             MGB  360\n    IND  =2,.                                                           MGB  370\n BOTH..                                                                 MGB  380\n    LN   =N,.                          /*STORE VARIABLES N, M, NUD,   */MGB  390\n    LM,LLM=M,.                         /*NLD FROM CALLING SEQUENCE    */MGB  400\n    LNUD =NUD,.                        /*INTO LOCAL PARAMETERS        */MGB  410\n    LNLD =NLD,.                                                         MGB  420\n    ERROR='P',.                        /*P MEANS WRONG INPUT          */MGB  430\n    IF LM LE 0                         /*VALUE M MUST BE POSITIVE     */MGB  440\n    THEN GO TO RETURN,.                                                 MGB  450\n    IF LNLD LT 0                       /*NUMBER OF LOWER CODIAGONALS  */MGB  460\n    THEN GO TO RETURN,.                /*NLD MAY NOT BE NEGATIVE AND  */MGB  470\n    IF LNLD GE LN                      /*EQUAL TO OR GREATER THAN N   */MGB  480\n    THEN GO TO RETURN,.                                                 MGB  490\n    IF LNUD LT 0                       /*NUMBER OF UPPER CODIAGONALS  */MGB  500\n    THEN GO TO RETURN,.                /*NUD MAY NOT BE NEGATIVE AND  */MGB  510\n    IF LNUD GE LN                      /*EQUAL TO OR GREATER THAN N   */MGB  520\n    THEN GO TO RETURN,.                                                 MGB  530\n    ERROR='0',.                        /*PRESET ERROR INDICATOR       */MGB  540\n    NB   =LNUD+LNLD+1,.                /*CALCULATE THE MAXIMUM WIDTH  */MGB  550\n    IF NB GT LN                        /*OF BAND MATRIX               */MGB  560\n    THEN NB   =LN,.                                                     MGB  570\n    IBAC =1,.                          /*IBAC IS AN INDICATOR FOR     */MGB  580\n    KL   =0,.                          /*BACKSUBSTITUTION             */MGB  590\n    COPT =OPT,.                                                         MGB  600\n    IF COPT= 'A'                       /*CALCULATE  INVERSE(L) * R    */MGB  610\n    THEN DO,.                          /*FOR GIVEN  L, U, R           */MGB  620\n         IND  =0,.                                                      MGB  630\n         IBAC =0,.                                                      MGB  640\n         GO TO GAUSS,.                                                  MGB  650\n         END,.                                                          MGB  660\n    IF COPT= 'B'                       /*CALCULATE  INVERSE(U) * R    */MGB  670\n    THEN GO TO BACK,.                  /*FOR GIVEN  U, R              */MGB  680\n    IF COPT= 'C'                                                        MGB  690\n    THEN DO,.                          /*CALCULATE  INVERSE(A) * R    */MGB  700\n         IND  =0,.                     /*FOR GIVEN  L, U, R           */MGB  710\n         GO TO GAUSS,.                                                  MGB  720\n         END,.                                                          MGB  730\n    IF COPT= 'L'                       /*COMPUTE TRIANGULAR FACTOR U  */MGB  740\n    THEN DO,.                          /*AND OPTIONALLY  L  AND       */MGB  750\n         IBAC =0,.                     /*CALCULATE  INVERSE(L) * R    */MGB  760\n         GO TO SCAL,.                  /*FOR GIVEN  A, R              */MGB  770\n         END,.                                                          MGB  780\n    IF COPT= 'F'                       /*COMPUTE TRIANGULAR FACTORS   */MGB  790\n    THEN DO,.                          /*L AND U  FOR GIVEN MATRIX A  */MGB  800\n         IBAC =0,.                                                      MGB  810\n         LLM  =0,.                                                      MGB  820\n         GO TO SCAL,.                                                   MGB  830\n         END,.                         /*COMPUTE TRIANGULAR FACTOR U  */MGB  840\n    IF COPT= 'U'                       /*AND INVERSE(U)*R FOR GIVEN   */MGB  850\n    THEN LLM  =0,.                     /*A, R                         */MGB  860\n                                       /*                             */MGB  870\n SCAL..                                /*CALCULATE SCALING FACTORS    */MGB  880\n                                       /*                             */MGB  890\n    K    =LNUD,.                       /*K IS AN END INDICATOR FOR    */MGB  900\n    INL  =LNLD+LN-NB+1,.               /*EACH ROW OF MATRIX A         */MGB  910\n    IPIV =NB-LNUD,.                                                     MGB  920\n         DO I =1 TO LN,.               /*EXECUTE LOOP OVER ALL ROWS   */MGB  930\n         IF I LE IPIV                                                   MGB  940\n         THEN K    =K+1,.              /*IN I-TH ROW THE ELEMENTS     */MGB  950\n         IF I GT INL                   /*A(I,K+1) TO A(I,NB) ARE      */MGB  960\n         THEN K    =K-1,.              /*FILLED UP WITH ZEROS         */MGB  970\n         PIV  =0,.                                                      MGB  980\n              DO J =1 TO NB,.          /*EXECUTE LOOP OVER I-TH ROW   */MGB  990\n              IF J GT K                                                 MGB 1000\n              THEN A(I,J)=0,.          /*FILL UP WITH ZEROS           */MGB 1010\n              ELSE DO,.                                                 MGB 1020\n                   W    =ABS(A(I,J)),. /*COMPUTE ABSOLUTELY GREATEST  */MGB 1030\n                   IF W GT PIV         /*ELEMENT PIV IN I-TH ROW OF A */MGB 1040\n                   THEN PIV  =W,.                                       MGB 1050\n                   END,.                                                MGB 1060\n              END,.                                                     MGB 1070\n         IF PIV= 0                     /*TEST FOR ZERO-ROW            */MGB 1080\n         THEN DO,.                     /*ALL ELEMENTS IN I-TH ROW OF  */MGB 1090\n              ERROR='S',.              /*GIVEN MATRIX A ARE ZERO      */MGB 1100\n              GO TO RETURN,.                                            MGB 1110\n              END,.                    /*STORE THE RECIPROCAL IN THE  */MGB 1120\n         SL(I)=1/PIV,.                 /*VECTOR SL                    */MGB 1130\n         END,.                         /*******************************/MGB 1140\n GAUSS..                               /*GAUSS ELIMINATION            */MGB 1150\n         DO I =1 TO LN-1,.             /*******************************/MGB 1160\n         INL  =I+LNLD,.                /*INVERSE(L)*R                 */MGB 1170\n         IF INL GT LN                                                   MGB 1180\n         THEN INL  =LN,.                                                MGB 1190\n         IF IND= 0                     /*NO FACTORIZATION             */MGB 1200\n         THEN DO,.                     /*CALCULATE INVERSE(L) * R     */MGB 1210\n              IPIV =IPER(I),.          /*FOR GIVEN L, U, R            */MGB 1220\n              GO TO INTR,.                                              MGB 1230\n              END,.                                                     MGB 1240\n         W    =0,.                     /*INITIALIZE W FOR PIVOTING    */MGB 1250\n              DO J =I TO INL,.                                          MGB 1260\n              PIV  =ABS(A(J,1))*SL(J),./*MULTIPLY ELEMENTS WITH SCALE */MGB 1270\n              IF PIV GT W              /*FACTORS AND SEARCH GREATEST  */MGB 1280\n              THEN DO,.                /*PRODUCT                      */MGB 1290\n                   W    =PIV,.                                          MGB 1300\n                   IPIV =J,.           /*STORE ROW INDEX              */MGB 1310\n                   END,.                                                MGB 1320\n              END,.                                                     MGB 1330\n         IF W LE ABS(EPS)              /*TEST FOR LOSS OF SIGNIFICANCE*/MGB 1340\n         THEN IF W = 0                 /*AND FOR ZERO                 */MGB 1350\n         THEN DO,.                                                      MGB 1360\n              ERROR='S',.              /*NEXT PIVOT IS ZERO POSSIBLY  */MGB 1370\n              GO TO RETURN,.           /*DUE TO LOSS OF SIGNIFICANCE  */MGB 1380\n              END,.                                                     MGB 1390\n         ELSE ERROR='W',.              /*W MEANS WARNING              */MGB 1400\n         PIV  =A(IPIV,1),.             /*PIV CONTAINS THE PIVOT       */MGB 1410\n         IF IND= 2                     /*STORE INFORMATION FOR ROW-   */MGB 1420\n         THEN IPER(I)=IPIV,.           /*PERMUTATIONS                 */MGB 1430\n         IF IPIV= I                    /*IS INTERCHANGE NECESSARY     */MGB 1440\n         THEN GO TO FSUB,.                                              MGB 1450\n         SL(IPIV)=SL(I),.              /*RESTORE SCALING ELEMENTS     */MGB 1460\n              DO J =1 TO NB,.                                           MGB 1470\n              W    =A(I,J),.           /*INTERCHANGE ROWS IN GIVEN    */MGB 1480\n              A(I,J)=A(IPIV,J),.       /*MATRIX A                     */MGB 1490\n              A(IPIV,J)=W,.                                             MGB 1500\n              END,.                                                     MGB 1510\n INTR..                                                                 MGB 1520\n              DO J =1 TO LLM,.         /*INTERCHANGE ROWS IN RIGHT    */MGB 1530\n              W    =R(I,J),.           /*HAND SIDE MATRIX R           */MGB 1540\n              R(I,J)=R(IPIV,J),.                                        MGB 1550\n              R(IPIV,J)=W,.                                             MGB 1560\n              END,.                                                     MGB 1570\n FSUB..                                /*MODIFY OPTIONALLY ROWS IN    */MGB 1580\n              DO J =I+1 TO INL,.       /*MATRIX A AND IN RIGHT HAND   */MGB 1590\n              IF IND= 0                /*SIDE MATRIX R                */MGB 1600\n              THEN DO,.                                                 MGB 1610\n                   KL   =KL+1,.                                         MGB 1620\n                   W    =L(KL),.                                        MGB 1630\n                   GO TO DIVL,.                                         MGB 1640\n                   END,.                                                MGB 1650\n              W    =A(J,1)/PIV,.       /*W IS AN ELEMENT OF THE LOWER */MGB 1660\n              IF IND= 2                /*TRIANGULAR FACTOR L          */MGB 1670\n              THEN DO,.                                                 MGB 1680\n                   KL   =KL+1,.                                         MGB 1690\n                   L(KL)=W,.           /*STORE W INTO L IF REQUESTED  */MGB 1700\n                   END,.                                                MGB 1710\n                   DO K =2 TO NB,.     /*MODIFY AND SHIFT ROWS OF A   */MGB 1720\n                   A(J,K-1)=A(J,K)-W*A(I,K),.                           MGB 1730\n                   END,.                                                MGB 1740\n              A(J,NB)=0,.              /*LAST TERM IS SET TO ZERO     */MGB 1750\n DIVL..                                /*MODIFY ROWS OF R TO COMPUTE  */MGB 1760\n                   DO K =1 TO LLM,.    /*INVERSE(L)*R                 */MGB 1770\n                   R(J,K)=R(J,K)-W*R(I,K),.                             MGB 1780\n                   END,.                                                MGB 1790\n              END,.                                                     MGB 1800\n         END,.                                                          MGB 1810\n    IF IND= 2                                                           MGB 1820\n    THEN IPER(LN)=LN,.                                                  MGB 1830\n    IF IBAC NE 1                                                        MGB 1840\n    THEN GO TO RETURN,.                /*******************************/MGB 1850\n BACK..                                /*BACKSUBSTITUTION             */MGB 1860\n         DO I =LN TO 1 BY -1,.         /*******************************/MGB 1870\n         PIV  =A(I,1),.                                                 MGB 1880\n         IF PIV= 0                     /*TEST FOR ZERO PIVOT          */MGB 1890\n         THEN DO,.                                                      MGB 1900\n              ERROR='S',.              /*PIVOT ELEMENT IS ZERO        */MGB 1910\n              GO TO RETURN,.                                            MGB 1920\n              END,.                                                     MGB 1930\n         INL  =I-1,.                                                    MGB 1940\n              DO J =1 TO LM,.          /*LOOP OVER ALL COLUMNS OF R   */MGB 1950\n              SUM  =R(I,J),.                                            MGB 1960\n                   DO K =2 TO IBAC,.   /*CALCULATE SCALAR PRODUCT     */MGB 1970\n                   SUM  =SUM-MULTIPLY(A(I,K),R(INL+K,J),53),.           MGB 1980\n                   END,.                                                MGB 1990\n              R(I,J)=SUM/PIV,.         /*COMPUTE NEW ELEMENT IN R     */MGB 2000\n              END,.                                                     MGB 2010\n         IF IBAC LT NB                                                  MGB 2020\n         THEN IBAC =IBAC+1,.           /*UPDATE END OF INNERMOST LOOP */MGB 2030\n         END,.                                                          MGB 2040\n RETURN..                                                               MGB 2050\n    END,.                              /*END OF PROCEDURE MGB         */MGB 2060\n MATE..                                                                 MATE  10\n /*********************************************************************/MATE  20\n /*                                                                   */MATE  30\n /*            REDUCE A REAL MATRIX TO HESSENBERG FORM                */MATE  40\n /*                     ELIMINATION TECHNIQUES                        */MATE  50\n /*                                                                   */MATE  60\n /*********************************************************************/MATE  70\n    PROCEDURE(A,N,IP),.                                                 MATE  80\n    DECLARE                                                             MATE  90\n         (A(*,*),C,U,V)                                                 MATE 100\n         BINARY,                                                        MATE 110\n         S                                                              MATE 120\n         BINARY(53),                                                    MATE 130\n         (N,IP(*),K,KP1,K1,M,I,J,N1)                                    MATE 140\n         BINARY FIXED,.                                                 MATE 150\n    IF N LT 3 THEN GO TO EMATE,.                                        MATE 160\n    IP(N)=N,.                                                           MATE 170\n    N1=N-1,.                                                            MATE 180\n         DO K=N1 TO 1 BY -1,.                                           MATE 190\n         KP1=K+1,.                                                      MATE 200\n         K1=K-1,.                                                       MATE 210\n         M=K,.                                                          MATE 220\n         U=ABS(A(KP1,K)),.                                              MATE 230\n              DO I=1 TO K1,.           /*          PIVOTING           */MATE 240\n              V=ABS(A(KP1,I)),.                                         MATE 250\n              IF V GT U                                                 MATE 260\n              THEN DO,.                                                 MATE 270\n                   U=V,.                                                MATE 280\n                   M=I,.                                                MATE 290\n                   END,.                                                MATE 300\n              END,.                                                     MATE 310\n         IP(K)=M,.                                                      MATE 320\n         IF M NE K                                                      MATE 330\n         THEN DO,.                     /*        INTERCHANGES         */MATE 340\n                   DO I=1 TO N,.       /*           COLUMNS           */MATE 350\n                   C=A(I,K),.                                           MATE 360\n                   A(I,K)=A(I,M),.                                      MATE 370\n                   A(I,M)=C,.                                           MATE 380\n                   END,.                                                MATE 390\n                   DO I=1 TO N,.       /*            ROWS             */MATE 400\n                   C=A(K,I),.                                           MATE 410\n                   A(K,I)=A(M,I),.                                      MATE 420\n                   A(M,I)=C,.                                           MATE 430\n                   END,.                                                MATE 440\n              END,.                                                     MATE 450\n         IF A(KP1,K) NE 0                                               MATE 460\n         THEN DO I=1 TO K1,.           /* COEFFICIENTS OF ELIMINATION */MATE 470\n              A(KP1,I)=A(KP1,I)/A(KP1,K),.                              MATE 480\n              END,.                                                     MATE 490\n              DO I=N TO 1 BY -1,.      /*  K-TH ROW OF THE HESSENBERG */MATE 500\n              S=A(K,I),.               /*            MATRIX           */MATE 510\n                   DO J=1 TO K1,.                                       MATE 520\n                   S=S+MULTIPLY(A(KP1,J),A(J,I),53),.                   MATE 530\n                   END,.                                                MATE 540\n                   DO J=MAX(I+1,K) TO N1,.                              MATE 550\n                   S=S-MULTIPLY(A(K,J),A(J+1,I),53),.                   MATE 560\n                   END,.                                                MATE 570\n              A(K,I)=S,.                                                MATE 580\n              END,.                                                     MATE 590\n         END,.                                                          MATE 600\n EMATE..                                                                MATE 610\n    RETURN,.                                                            MATE 620\n    END,.                              /*    END OF PROCEDURE MATE    */MATE 630\n MATU..                                                                 MATU  10\n /*********************************************************************/MATU  20\n /*                                                                   */MATU  30\n /*            REDUCE A REAL MATRIX TO HESSENBERG FORM                */MATU  40\n /*                 HOUSEHOLDER'S TRANSFORMATIONS                     */MATU  50\n /*                                                                   */MATU  60\n /*********************************************************************/MATU  70\n    PROCEDURE (A,N,B),.                                                 MATU  80\n    DECLARE                                                             MATU  90\n         (A(*,*),B(*),EPS,T,C,U) BINARY,                                MATU 100\n         S BINARY(53),                                                  MATU 110\n         (I,J,K,KP1,KP2,N) BINARY FIXED,.                               MATU 120\n    EPS=1.0E-14,.                                                       MATU 130\n    B(1) =0,.                                                           MATU 140\n         DO K=1 TO N-2,.                                                MATU 150\n         KP1  =K+1,.                                                    MATU 160\n         KP2  =KP1+1,.                                                  MATU 170\n         S    =0,.                     /* PREPARE K-TH TRANSFORMATION */MATU 180\n              DO I=KP2 TO N,.                                           MATU 190\n              S=S+MULTIPLY(A(I,K),A(I,K),53),.                          MATU 200\n              END,.                                                     MATU 210\n         T    =A(KP1,K)*A(KP1,K),.                                      MATU 220\n         IF S GT EPS*T                                                  MATU 230\n         THEN DO,.                                                      MATU 240\n         S    =SQRT(S+T),.                                              MATU 250\n              T    =S,.                /*  CHOOSE SIGN FOR STABILITY  */MATU 260\n              IF A(KP1,K) GT 0 THEN T=-T,.                              MATU 270\n              C    =A(KP1,K)-T,.                                        MATU 280\n                   DO J=KP1 TO N,.     /*        ROW OPERATION        */MATU 290\n                   S    =0,.                                            MATU 300\n                        DO I=KP1 TO N,.                                 MATU 310\n                        S=S+MULTIPLY(A(I,J),A(I,K),53),.                MATU 320\n                        END,.                                           MATU 330\n                   U    =A(KP1,J),.                                     MATU 340\n                   A(KP1,J)=S/T,.                                       MATU 350\n                   U    =(A(KP1,J)-U)/C,.                               MATU 360\n                        DO I=KP2 TO N,.                                 MATU 370\n                        A(I,J)=A(I,J)+U*A(I,K),.                        MATU 380\n                        END,.                                           MATU 390\n                   END,.                                                MATU 400\n                   DO J=1 TO N,.       /*      COLUMN OPERATION       */MATU 410\n                   S    =0,.                                            MATU 420\n                        DO I=KP1 TO N,.                                 MATU 430\n                        S=S+MULTIPLY(A(J,I),A(I,K),53),.                MATU 440\n                        END,.                                           MATU 450\n                   U    =A(J,KP1),.                                     MATU 460\n                   A(J,KP1)=S/T,.                                       MATU 470\n                   U    =(A(J,KP1)-U)/C,.                               MATU 480\n                        DO I=KP2 TO N,.                                 MATU 490\n                        A(J,I)=A(J,I)+U*A(I,K),.                        MATU 500\n                        END,.                                           MATU 510\n                   END,.                                                MATU 520\n              B(KP1)=A(KP1,K),.                                         MATU 530\n              A(KP1,K)=T,.             /*  TRANSFORM SUBDIAGONAL TERM */MATU 540\n              END,.                                                     MATU 550\n         ELSE B(KP1)=0,.               /*  BYPASS K-TH TRANSFORMATION */MATU 560\n         END,.                                                          MATU 570\n    RETURN,.                                                            MATU 580\n    END,.                              /*    END OF PROCEDURE MATU    */MATU 590\n MSTU..                                                                 MSTU  10\n /*********************************************************************/MSTU  20\n /*                                                                   */MSTU  30\n /*      REDUCTION OF A SYMMETRIC MATRIX TO SYMMETRIC TRIDIAGONAL FORM*/MSTU  40\n /*                                                                   */MSTU  50\n /*********************************************************************/MSTU  60\n    PROCEDURE (A,N,D,CD),.                                              MSTU  70\n    DECLARE                                                             MSTU  80\n         (A(*),D(*),CD(*),T,EPS) BINARY,                                MSTU  90\n         (N,N2,ICD,MP2,M,MP,J,I,L,LK,K) BINARY FIXED,                   MSTU 100\n         (S,DT) BINARY(53),.                                            MSTU 110\n    N2   =N-2,.                                                         MSTU 120\n    IF N2 LE 0 THEN GO TO EMSTU,.                                       MSTU 130\n    D(1) =A(1),.                                                        MSTU 140\n    EPS  =1.0E-14,.                                                     MSTU 150\n    ICD  =0,.                                                           MSTU 160\n    MP2  =2,.                                                           MSTU 170\n         DO M=1 TO N2,.                /* COMPUTE NEW SUBDIAGONAL TERM*/MSTU 180\n         MP   =MP2,.                                                    MSTU 190\n         MP2  =MP+1,.                                                   MSTU 200\n         ICD  =ICD+MP,.                                                 MSTU 210\n         J    =ICD,.                                                    MSTU 220\n         S    =0,.                                                      MSTU 230\n              DO I=MP2 TO N,.                                           MSTU 240\n              J    =J+I-1,.                                             MSTU 250\n              D(I) =A(J),.                                              MSTU 260\n              S=S+MULTIPLY(D(I),D(I),53),.                              MSTU 270\n              END,.                                                     MSTU 280\n         T    =A(ICD)*A(ICD),.                                          MSTU 290\n         IF S GT T*EPS THEN GO TO TRANS,.                               MSTU 300\n         CD(M)=A(ICD),.                /*    BYPASS TRANSFORMATION    */MSTU 310\n         GO TO BYPASS,.                                                 MSTU 320\n TRANS..                                                                MSTU 330\n         CD(M)=SQRT(S+T),.                                              MSTU 340\n         IF A(ICD) GT 0 THEN CD(M)=-CD(M),.                             MSTU 350\n         D(MP)=A(ICD)-CD(M),.                                           MSTU 360\n         J    =ICD-M,.                                                  MSTU 370\n         DT   =0,.                     /*   COMPUTE VECTORS DEFINING  */MSTU 380\n              DO L=MP TO N,.           /*      THE TRANSFORMATION     */MSTU 390\n              J    =J+L-1,.                                             MSTU 400\n              S    =0,.                                                 MSTU 410\n              LK   =J,.                                                 MSTU 420\n                   DO K=MP TO L,.                                       MSTU 430\n                   LK   =LK+1,.                                         MSTU 440\n                   S=S+MULTIPLY(A(LK),D(K),53),.                        MSTU 450\n                   END,.                                                MSTU 460\n                   DO K=L+1 TO N,.                                      MSTU 470\n                   LK   =LK+K-1,.                                       MSTU 480\n                   S=S+MULTIPLY(A(LK),D(K),53),.                        MSTU 490\n                   END,.                                                MSTU 500\n              DT   =DT+S*D(L),.                                         MSTU 510\n              CD(L)=S,.                                                 MSTU 520\n              END,.                                                     MSTU 530\n         DT   =0.5*DT,.                                                 MSTU 540\n         T    =D(MP)*CD(M),.                                            MSTU 550\n              DO L=MP TO N,.                                            MSTU 560\n              D(L) =D(L)/T,.                                            MSTU 570\n              CD(L)=CD(L)+DT*D(L),.                                     MSTU 580\n              END,.                                                     MSTU 590\n         J    =ICD-M,.                 /*      PERFORM SIMILARITY     */MSTU 600\n              DO K=MP TO N,.                                            MSTU 610\n              J    =J+K-1,.                                             MSTU 620\n              LK   =J,.                                                 MSTU 630\n                   DO L=MP TO K,.                                       MSTU 640\n                   LK   =LK+1,.                                         MSTU 650\n                   S    =A(LK),.                                        MSTU 660\n                   S=S+MULTIPLY(D(L),CD(K),53)+MULTIPLY(D(K),CD(L),53),.MSTU 670\n                   A(LK)=S,.                                            MSTU 680\n                   END,.                                                MSTU 690\n              END,.                                                     MSTU 700\n BYPASS..                                                               MSTU 710\n         D(MP)=A(ICD+1),.                                               MSTU 720\n         END,.                                                          MSTU 730\n    ICD  =ICD+N,.                                                       MSTU 740\n    CD(N)=A(ICD),.                                                      MSTU 750\n    D(N) =A(ICD+1),.                                                    MSTU 760\n         DO J=N-1 TO 2 BY -1,.                                          MSTU 770\n         CD(J)=CD(J-1),.                                                MSTU 780\n         END,.                                                          MSTU 790\n    CD(1)=0,.                                                           MSTU 800\n EMSTU..                                                                MSTU 810\n    RETURN,.                                                            MSTU 820\n    END,.                              /*    END OF PROCEDURE MSTU    */MSTU 830\n MEAT..                                                                 MEAT  10\n /*********************************************************************/MEAT  20\n /*                                                                   */MEAT  30\n /*            EIGENVALUES OF A REAL HESSENBERG MATRIX                */MEAT  40\n /*                                                                   */MEAT  50\n /*********************************************************************/MEAT  60\n    PROCEDURE (A,M,RR,RI,ANA),.                                         MEAT  70\n    DECLARE                                                             MEAT  80\n         ANA(*) BIT(1),                                                 MEAT  90\n         (A(*,*),RR(*),RI(*),PRR(2),PRI(2),PAN(2),R,S,EPS,E6,E7,E12,H,T,MEAT 100\n          U,V,G1,G2,G3,PSI1,PSI2,PHI,ETA) BINARY,                       MEAT 110\n         (I,I1,I2,IP1,IP2,IP3,IT,ITMAX,J,K,N,N1,N2,P,Q,M) BINARY FIXED,.MEAT 120\n    E6   =1.0E-6,.                     /*          CONSTANTS          */MEAT 130\n    E7   =1.0E-7,.                                                      MEAT 140\n    E12  =1.0E-12,.                                                     MEAT 150\n    H    =0.5,.                                                         MEAT 160\n    ITMAX=30,.                                                          MEAT 170\n    N    =M,.                                                           MEAT 180\n BEG..                                 /*        INITIALIZATION       */MEAT 190\n    N1   =N-1,.                                                         MEAT 200\n    IF N1=0 THEN GO TO ONE,.                                            MEAT 210\n    R,S  =0,.                                                           MEAT 220\n         DO I=1,2,.                                                     MEAT 230\n         PAN(I),PRR(I),PRI(I)=0,.                                       MEAT 240\n         END,.                                                          MEAT 250\n    N2   =N1-1,.                                                        MEAT 260\n         DO IT=1 TO ITMAX,.            /*   START LOOP FOR ITERATION  */MEAT 270\n         IF ABS(A(N,N1)) LE E12*ABS(A(N,N)) THEN GO TO ONE,.            MEAT 280\n         T    =A(N1,N1)-A(N,N),.       /*   ROOTS OF THE LOWER MAIN   */MEAT 290\n         U    =T*T,.                   /*    SUBMATRIX OF ORDER TWO   */MEAT 300\n         V    =4*A(N1,N)*A(N,N1),.                                      MEAT 310\n         IF ABS(V) LT U*E7                                              MEAT 320\n         THEN DO,.                                                      MEAT 330\n              RR(N1)=A(N1,N1),.                                         MEAT 340\n              RR(N) =A(N,N),.                                           MEAT 350\n              GO TO ZIM,.                                               MEAT 360\n              END,.                                                     MEAT 370\n         ELSE DO,.                                                      MEAT 380\n              T    =U+V,.                                               MEAT 390\n              IF ABS(T) LT E6*MAX(U,ABS(V)) THEN T=0,.                  MEAT 400\n              U    =(A(N1,N1)+A(N,N))/2,.                               MEAT 410\n              V    =SQRT(ABS(T))/2,.                                    MEAT 420\n              IF T LT 0                                                 MEAT 430\n              THEN DO,.                /*        COMPLEX ROOTS        */MEAT 440\n                   RR(N),RR(N1)=U,.                                     MEAT 450\n                   RI(N)=-V,.                                           MEAT 460\n                   RI(N1)=V,.                                           MEAT 470\n                   END,.                                                MEAT 480\n              ELSE DO,.                /*          REAL ROOTS         */MEAT 490\n                   RR(N)=U+V,.                                          MEAT 500\n                   RR(N1)=U-V,.                                         MEAT 510\n ZIM..                                                                  MEAT 520\n                   RI(N),RI(N1)=0,.                                     MEAT 530\n                   IF ABS(RR(N1)) LT ABS(RR(N))                         MEAT 540\n                   THEN DO,.                                            MEAT 550\n                        T    =RR(N1),.                                  MEAT 560\n                        RR(N1)=RR(N),.                                  MEAT 570\n                        RR(N)=T,.                                       MEAT 580\n                        END,.                                           MEAT 590\n                   END,.                                                MEAT 600\n              END,.                                                     MEAT 610\n         IF N2=0 THEN GO TO TWO,.      /*     TESTS OF CONVERGENCE    */MEAT 620\n         EPS  =E12*(RI(N1)+ABS(RR(N1))),.                               MEAT 630\n         IF ABS(A(N1,N2)) LE EPS THEN GO TO TWO,.                       MEAT 640\n         IF ABS(A(N1,N2)-PAN(1)) LT ABS(A(N1,N2))*E6 THEN GO TO CMP,.   MEAT 650\n         IF ABS(A(N,N1)-PAN(2)) LT ABS(A(N,N1))*E6 THEN GO TO CMP,.     MEAT 660\n         K    =0,.                                                      MEAT 670\n              DO I=1,2,.               /*     DETERMINE THE SHIFT     */MEAT 680\n              J=I+N2,.                                                  MEAT 690\n              IF ABS(RR(J)-PRR(I))+ABS(RI(J)-PRI(I))                    MEAT 700\n                   LT H*(ABS(RR(J))+ABS(RI(J))) THEN K=K+I,.            MEAT 710\n              PRR(I)=RR(J),.                                            MEAT 720\n              PRI(I)=RI(J),.                                            MEAT 730\n              PAN(I)=A(J,J-1),.                                         MEAT 740\n              END,.                                                     MEAT 750\n         IF K=0                                                         MEAT 760\n         THEN R,S  =0,.                                                 MEAT 770\n         ELSE IF K=3                                                    MEAT 780\n              THEN DO,.                                                 MEAT 790\n                   S    =A(N,N)+A(N1,N1),.                              MEAT 800\n                   R    =A(N,N)*A(N1,N1)-A(N1,N)*A(N,N1),.              MEAT 810\n                   END,.                                                MEAT 820\n              ELSE DO,.                                                 MEAT 830\n                   R    =PRR(K)*PRR(K),.                                MEAT 840\n                   S    =PRR(K)+PRR(K),.                                MEAT 850\n                   END,.                                                MEAT 860\n         IF N LT 4                     /*    SEARCH FOR A PARTITION   */MEAT 870\n         THEN P,Q  =1,.                                                 MEAT 880\n         ELSE DO,.                                                      MEAT 890\n                   DO Q=N2 TO 2 BY -1,.                                 MEAT 900\n                   IF ABS(A(Q,Q-1)) LE EPS THEN GO TO FDP,.             MEAT 910\n                   END,.                                                MEAT 920\n              Q    =1,.                                                 MEAT 930\n FDP..                                                                  MEAT 940\n              IF Q LT N2                                                MEAT 950\n              THEN DO P=N2 TO Q+1 BY -1,.                               MEAT 960\n                   IP1  =P+1,.                                          MEAT 970\n                   IF (ABS(A(P,P)+A(IP1,IP1)-S)+ABS(A(IP1+1,IP1)))      MEAT 980\n                        *ABS(A(P,P-1)*A(IP1,P))                         MEAT 990\n                      LT EPS*ABS(A(P,P)*(A(P,P)-S)+A(P,IP1)*A(IP1,P)+R) MEAT1000\n                   THEN GO TO QRT,.                                     MEAT1010\n                   END,.                                                MEAT1020\n              P    =Q,.                                                 MEAT1030\n              END,.                                                     MEAT1040\n QRT..                                                                  MEAT1050\n         DO I=P TO N1,.                /*   START QR TRANSFORMATION   */MEAT1060\n         IP1  =I+1,.                                                    MEAT1070\n         IP2  =IP1+1,.                                                  MEAT1080\n         I1   =I-1,.                                                    MEAT1090\n         IF I=P                                                         MEAT1100\n         THEN DO,.                     /*  INITIALIZE TRANSFORMATION  */MEAT1110\n              G1   =A(I,I)*(A(I,I)-S)+A(I,IP1)*A(IP1,I)+R,.             MEAT1120\n              G2   =A(IP1,I)*(A(IP1,IP1)+A(I,I)-S),.                    MEAT1130\n              G3   =A(IP1,I)* A(IP2,IP1),.                              MEAT1140\n              A(IP2,I)=0,.                                              MEAT1150\n              END,.                                                     MEAT1160\n         ELSE DO,.                                                      MEAT1170\n              G1   =A(I,I1),.                                           MEAT1180\n              G2   =A(IP1,I1),.                                         MEAT1190\n              IF I GT N2                                                MEAT1200\n              THEN G3   =0,.                                            MEAT1210\n              ELSE G3   =A(IP2,I1),.                                    MEAT1220\n              END,.                                                     MEAT1230\n         U    =SQRT(G1*G1+G2*G2+G3*G3),.                                MEAT1240\n         IF U=0                                                         MEAT1250\n         THEN DO,.                                                      MEAT1260\n              PHI  =2,.                                                 MEAT1270\n              PSI1,PSI2=0,.                                             MEAT1280\n              END,.                                                     MEAT1290\n         ELSE DO,.                                                      MEAT1300\n              IF G1 LT 0 THEN U=-U,.                                    MEAT1310\n              T    =G1+U,.                                              MEAT1320\n              PSI1 =G2/T,.                                              MEAT1330\n              PSI2 =G3/T,.                                              MEAT1340\n              PHI  =2/(1+PSI1*PSI1+PSI2*PSI2),.                         MEAT1350\n              END,.                                                     MEAT1360\n         IF I=Q THEN GO TO ROW,.                                        MEAT1370\n         IF I=P THEN A(I,I1)=-A(I,I1),.                                 MEAT1380\n                ELSE A(I,I1)=-U,.                                       MEAT1390\n ROW..                                                                  MEAT1400\n              DO J=I TO N,.            /*        ROW OPERATION        */MEAT1410\n              T    =PSI1*A(IP1,J),.                                     MEAT1420\n              IF I LT N1 THEN T=T+PSI2*A(IP2,J),.                       MEAT1430\n              ETA  =PHI*(T+A(I,J)),.                                    MEAT1440\n              A(I,J)=A(I,J)-ETA,.                                       MEAT1450\n              A(IP1,J)=A(IP1,J)-PSI1*ETA,.                              MEAT1460\n              IF I LT N1 THEN A(IP2,J)=A(IP2,J)-PSI2*ETA,.              MEAT1470\n              END,.                                                     MEAT1480\n         IF I LT N1                    /*       COLUMN OPERATION      */MEAT1490\n         THEN K    =IP2,.                                               MEAT1500\n         ELSE K    =N,.                                                 MEAT1510\n              DO J=Q TO K,.                                             MEAT1520\n              T    =PSI1*A(J,IP1),.                                     MEAT1530\n              IF I LT N1 THEN T=T+PSI2*A(J,IP2),.                       MEAT1540\n              ETA  =PHI*(T+A(J,I)),.                                    MEAT1550\n              A(J,I)=A(J,I)-ETA,.                                       MEAT1560\n              A(J,IP1)=A(J,IP1)-ETA*PSI1,.                              MEAT1570\n              IF I LT N1 THEN A(J,IP2)=A(J,IP2)-ETA*PSI2,.              MEAT1580\n              END,.                                                     MEAT1590\n         IF I LT N2                                                     MEAT1600\n         THEN DO,.                                                      MEAT1610\n              IP3  =IP2+1,.                                             MEAT1620\n              ETA  =PHI*PSI2*A(IP3,IP2),.                               MEAT1630\n              A(IP3,I)=-ETA,.                                           MEAT1640\n              A(IP3,IP1)=-ETA*PSI1,.                                    MEAT1650\n              A(IP3,IP2)=A(IP3,IP2)-ETA*PSI2,.                          MEAT1660\n              END,.                                                     MEAT1670\n         END,.                         /*    END QR TRANSFORMATION    */MEAT1680\n         END,.                         /*    END LOOP OF ITERATION    */MEAT1690\n CMP..                                                                  MEAT1700\n    IF ABS(A(N,N1)) GT ABS(A(N1,N2))                                    MEAT1710\n    THEN                                                                MEAT1720\n TWO..                                                                  MEAT1730\n         DO,.                          /*  TWO EIGENVALUES HAVE BEEN  */MEAT1740\n         ANA(N1)='1'B,.                /*          FOUND              */MEAT1750\n         ANA(N)='0'B,.                                                  MEAT1760\n         N    =N2,.                                                     MEAT1770\n         END,.                                                          MEAT1780\n    ELSE                                                                MEAT1790\n ONE..                                                                  MEAT1800\n         DO,.                          /*ONE EIGENVALUE HAS BEEN FOUND*/MEAT1810\n         ANA(N)='1'B,.                                                  MEAT1820\n         RR(N)  =A(N,N),.                                               MEAT1830\n         RI(N)  =0,.                                                    MEAT1840\n         N    =N1,.                                                     MEAT1850\n         END,.                                                          MEAT1860\n    IF N GT 0 THEN GO TO BEG,.                                          MEAT1870\n    RETURN,.                                                            MEAT1880\n    END,.                              /*    END OF PROCEDURE MEAT    */MEAT1890\n MEST..                                                                 MEST  10\n /*********************************************************************/MEST  20\n /*                                                                   */MEST  30\n /*         EIGENVALUES OF A SYMMETRIC TRIDIAGONAL MATRIX             */MEST  40\n /*                                                                   */MEST  50\n /*********************************************************************/MEST  60\n    PROCEDURE (A,B,M,D,NEIG),.                                          MEST  70\n    DECLARE                                                             MEST  80\n         (MIT,M,N,NEIG,NR,I,K,IT,J,IP) BINARY FIXED,                    MEST  90\n         (C1,C2,CD(N),CDJ,D(*),E7,E10,G,H,P,PD,S,SH,T,U,A(*),B(*))      MEST 100\n         BINARY,.                                                       MEST 110\n    E10  =1.0E-20,.                    /*          CONSTANTS          */MEST 120\n    E7   =1.0E-7,.                                                      MEST 130\n    MIT  =30,.                                                          MEST 140\n    H    =0.5,.                                                         MEST 150\n    N    =M,.                          /*        INITIALIZATION       */MEST 160\n    IF NEIG GE N                                                        MEST 170\n    THEN DO,.                                                           MEST 180\n         NEIG =N,.                                                      MEST 190\n         NR   =N-1,.                                                    MEST 200\n         END,.                                                          MEST 210\n    ELSE NR   =NEIG,.                                                   MEST 220\n    B(1)=0,.                                                            MEST 230\n         DO I=1 TO N,.                                                  MEST 240\n         D(I)=A(I),.                                                    MEST 250\n         CD(I)=B(I)*B(I),.                                              MEST 260\n         END,.                                                          MEST 270\n         DO K=1 TO NR,.                /*   LOOP FOR NR EIGENVALUES   */MEST 280\n         N1   =N-1,.                                                    MEST 290\n         PD   =0,.                                                      MEST 300\n              DO IT=1 TO MIT,.         /*   START LOOP FOR ITERATION  */MEST 310\n              C1   =ABS(D(N)),.                                         MEST 320\n              C2   =C1*C1,.            /*       TEST CONVERGENCE      */MEST 330\n              IF CD(N) LE E10*C2 THEN GO TO DEC,.                       MEST 340\n              S    =ABS(D(N)-PD),.                                      MEST 350\n              IF S LE E7*C1 THEN GO TO DEC,.                            MEST 360\n              IF S GT H*C1             /*  TEST FOR APPLYING A SHIFT  */MEST 370\n              THEN SH   =0,.                                            MEST 380\n              ELSE SH   =D(N),.                                         MEST 390\n              PD   =D(N),.                                              MEST 400\n                   DO J=N1 TO 2 BY -1,./*TEST FOR SPLITTING THE MATRIX*/MEST 410\n                   IF CD(J) LE E10*C2 THEN GO TO SIT,.                  MEST 420\n                   END,.                                                MEST 430\n              J    =1,.                                                 MEST 440\n SIT..                                                                  MEST 450\n              S,U  =0,.                /*INITIALIZE THE TRANSFORMATION*/MEST 460\n              C2   =1,.                                                 MEST 470\n              G    =D(J)-SH,.                                           MEST 480\n              P    =G*G,.                                               MEST 490\n              CDJ  =CD(J),.                                             MEST 500\n                   DO I=J TO N1,.      /*      QR TRANSFORMATION      */MEST 510\n                   IP   =I+1,.                                          MEST 520\n                   T   =P+CD(IP),.                                      MEST 530\n                   CD(I)=S*T,.                                          MEST 540\n                   S    =CD(IP)/T,.                                     MEST 550\n                   C1   =C2,.                                           MEST 560\n                   C2   =P/T,.                                          MEST 570\n                   D(IP)=D(IP)-SH,.                                     MEST 580\n                   U    =S*(G+D(IP)),.                                  MEST 590\n                   D(I) =G+U+SH,.                                       MEST 600\n                   G    =D(IP)-U,.                                      MEST 610\n                   IF C2=0                                              MEST 620\n                   THEN P    =CD(IP)*C1,.                               MEST 630\n                   ELSE P    =G*G/C2,.                                  MEST 640\n                   END,.                                                MEST 650\n              CD(J)=CDJ,.                                               MEST 660\n              CD(N)=S*P,.                                               MEST 670\n              D(N) =G+SH,.                                              MEST 680\n              END,.                    /*    END LOOP FOR ITERATION   */MEST 690\n DEC..                                                                  MEST 700\n         N    =N1,.                    /* DEFLATE ORDER OF THE MATRIX */MEST 710\n         END,.                                                          MEST 720\n    IF NEIG LT M                                                        MEST 730\n    THEN DO,.                                                           MEST 740\n         J=M-NEIG,.                                                     MEST 750\n              DO I=1 TO NEIG,.                                          MEST 760\n              J=J+1,.                                                   MEST 770\n              D(I)=D(J),.                                               MEST 780\n              END,.                                                     MEST 790\n         END,.                                                          MEST 800\n    RETURN,.                                                            MEST 810\n    END,.                              /*    END OF PROCEDURE MEST    */MEST 820\n MEBS..                                                                 MEBS  10\n /*********************************************************************/MEBS  20\n /*                                                                   */MEBS  30\n /*         BOUNDS FOR THE EIGENVALUES OF A SYMMETRIC MATRIX          */MEBS  40\n /*                                                                   */MEBS  50\n /*********************************************************************/MEBS  60\n    PROCEDURE (A,N,B1,B2),.                                             MEBS  70\n    DECLARE                                                             MEBS  80\n         (I,J,K,L,N) BINARY FIXED,                                      MEBS  90\n         (A(*),B1,B2,P,SQ) BINARY,                                      MEBS 100\n         (S,S1,S2) BINARY(53),.                                         MEBS 110\n    J    =2,.                                                           MEBS 120\n    S1   =A(1),.                                                        MEBS 130\n    S2   =0,.                                                           MEBS 140\n    S    =S1*S1,.                                                       MEBS 150\n    I    =1,.                                                           MEBS 160\n         DO K=2 TO N,.                                                  MEBS 170\n         I    =I+K,.                                                    MEBS 180\n         S1   =S1+A(I),.               /*        SUM OF THE ROOTS     */MEBS 190\n         S=S+MULTIPLY(A(I),A(I),53),.                                   MEBS 200\n              DO L=J TO I-1,.                                           MEBS 210\n              S2=S2+MULTIPLY(A(L),A(L),53),.                            MEBS 220\n              END,.                                                     MEBS 230\n         J    =I+1,.                                                    MEBS 240\n         END,.                                                          MEBS 250\n    S2   =2*S2+S,.                     /* SUM OF THE SQUARES OF ROOTS */MEBS 260\n    SQ   =SQRT((N-1)*ABS(N*S2-S1*S1)),./*    ITERATE FROM INFINITY    */MEBS 270\n    P    =(1-N)*S2+S1*S1,.                                              MEBS 280\n    IF S1 LT 0                                                          MEBS 290\n    THEN DO,.                                                           MEBS 300\n         B1   =S1-SQ,.                                                  MEBS 310\n         B2   =P/B1,.                                                   MEBS 320\n         B1   =B1/N,.                                                   MEBS 330\n         END,.                                                          MEBS 340\n    ELSE DO,.                                                           MEBS 350\n         B2   =S1+SQ,.                                                  MEBS 360\n         B1   =P/B2,.                                                   MEBS 370\n         B2   =B2/N,.                                                   MEBS 380\n         END,.                                                          MEBS 390\n    RETURN,.                                                            MEBS 400\n    END,.                              /*    END OF PROCEDURE MEBS    */MEBS 410\n MVST..                                                                 MVST  10\n /*********************************************************************/MVST  20\n /*                                                                   */MVST  30\n /*          EIGENVECTORS OF A SYMMETRIC TRIDIAGONAL MATRIX           */MVST  40\n /*                                                                   */MVST  50\n /*********************************************************************/MVST  60\n    PROCEDURE (D,CD,N,EIG,X),.                                          MVST  70\n    DECLARE                                                             MVST  80\n         (D(*),CD(*),EIG,Y(*),E7,T,EPS,W,                               MVST  90\n          X(N),P(N),Q(N),A(N),R(N),U,V,S,CI,CIP) BINARY,                MVST 100\n         (N,I,IP1,N1,IT,I1) BINARY FIXED,                               MVST 110\n         CH(N) BIT(1),.                                                 MVST 120\n    N1=N-1,.                                                            MVST 130\n    E7=1.0E-7,.                                                         MVST 140\n    T=ABS(D(1)),.                      /*     NORM OF THE MATRIX      */MVST 150\n         DO I=2 TO N,.                                                  MVST 160\n         W=MAX(ABS(D(I)),ABS(CD(I))),.                                  MVST 170\n         IF W GT T THEN T=W,.                                           MVST 180\n         END,.                                                          MVST 190\n    EPS=T*E7,.                                                          MVST 200\n    U=D(1)-EIG,.                                                        MVST 210\n    IF ABS(CD(2)) LT EPS                                                MVST 220\n    THEN V,CIP=EPS,.                                                    MVST 230\n    ELSE V,CIP=CD(2),.                                                  MVST 240\n         DO I=1 TO N1,.                /*     START FACTORIZATION     */MVST 250\n         IP1=I+1,.                                                      MVST 260\n         CI=CIP,.                                                       MVST 270\n         IF I = N1                                                      MVST 280\n         THEN CIP=0,.                                                   MVST 290\n         ELSE IF ABS(CD(IP1+1)) LT EPS                                  MVST 300\n              THEN CIP=EPS,.                                            MVST 310\n              ELSE CIP=CD(IP1+1),.                                      MVST 320\n         IF ABS(CI) GE ABS(U)          /*          PIVOTING           */MVST 330\n         THEN DO,.                     /*         INTERCHANGE         */MVST 340\n              IF U NE 0                                                 MVST 350\n              THEN A(IP1)=U/CI,.                                        MVST 360\n              ELSE IF CI=EPS                                            MVST 370\n                   THEN A(IP1)=1,.                                      MVST 380\n                   ELSE A(IP1)=0,.                                      MVST 390\n              P(I)=CI,.                                                 MVST 400\n              Q(I)=D(IP1)-EIG,.                                         MVST 410\n              R(I)=CIP,.                                                MVST 420\n              U=V-A(IP1)*Q(I),.                                         MVST 430\n              V= -A(IP1)*R(I),.                                         MVST 440\n              CH(IP1)='1'B,.                                            MVST 450\n              END,.                                                     MVST 460\n         ELSE DO,.                     /*       NO INTERCHANGE        */MVST 470\n              A(IP1)=CI/U,.                                             MVST 480\n              P(I)=U,.                                                  MVST 490\n              Q(I)=V,.                                                  MVST 500\n              R(I)=0,.                                                  MVST 510\n              U=D(IP1)-EIG-V*A(IP1),.                                   MVST 520\n              V=CIP,.                                                   MVST 530\n              CH(IP1)='0'B,.                                            MVST 540\n              END,.                                                     MVST 550\n         IF ABS(P(I)) LT EPS THEN P(I)=EPS,.                            MVST 560\n         X(I)=1,.                      /* INITIAL GUESS OF EIGENVECTOR*/MVST 570\n         END,.                                                          MVST 580\n    IF ABS(U) LT EPS THEN U=EPS,.                                       MVST 590\n    P(N)=U,.                           /*      END FACTORIZATION      */MVST 600\n    X(N)=1,.                                                            MVST 610\n         DO IT=1,2,.                   /*   START LOOP FOR ITERATION  */MVST 620\n         IF IT GT 1                                                     MVST 630\n         THEN DO,.                     /*   SOLVE WITH LOWER FACTOR   */MVST 640\n              V=ABS(X(1)),.                                             MVST 650\n                   DO I=2 TO N,.       /*        NORMALIZATION        */MVST 660\n                   U=ABS(X(I)),.                                        MVST 670\n                   IF U GT V THEN V=U,.                                 MVST 680\n                   END,.                                                MVST 690\n              X(1)=X(1)/V,.                                             MVST 700\n                   DO I=2 TO N,.                                        MVST 710\n                   X(I)=X(I)/V,.                                        MVST 720\n                   IF CH(I)                                             MVST 730\n                   THEN DO,.                                            MVST 740\n                        I1=I-1,.                                        MVST 750\n                        U=X(I1),.                                       MVST 760\n                        X(I1)=X(I),.                                    MVST 770\n                        X(I)=U-A(I)*X(I1),.                             MVST 780\n                        END,.                                           MVST 790\n                   ELSE X(I)=X(I)-A(I)*X(I-1),.                         MVST 800\n                   END,.                                                MVST 810\n              END,.                                                     MVST 820\n         X(N)=X(N)/P(N),.              /*   SOLVE WITH UPPER FACTOR   */MVST 830\n         X(N1)=(X(N1)-Q(N1)*X(N))/P(N1),.                               MVST 840\n              DO I=N-2 TO 1 BY -1,.                                     MVST 850\n              X(I)=(X(I)-Q(I)*X(I+1)-R(I)*X(I+2))/P(I),.                MVST 860\n              END,.                                                     MVST 870\n         END,.                         /*    END LOOP OF ITERATION    */MVST 880\n    S=0,.                                                               MVST 890\n         DO I=1 TO N,.                 /*      NORMALIZE SOLUTION     */MVST 900\n         S=S+X(I)*X(I),.                                                MVST 910\n         END,.                                                          MVST 920\n    S=SQRT(S),.                                                         MVST 930\n         DO I=1 TO N,.                                                  MVST 940\n         Y(I)=X(I)/S,.                                                  MVST 950\n         END,.                                                          MVST 960\n    RETURN,.                                                            MVST 970\n    END,.                              /*    END OF PROCEDURE MVST    */MVST 980\n MSDU..                                                                 MSDU  10\n /*********************************************************************/MSDU  20\n /*                                                                   */MSDU  30\n /*      TO COMPUTE EIGENVALUES AND EIGENVECTORS OF A REAL SYMMETRIC  */MSDU  40\n /*      MATRIX                                                       */MSDU  50\n /*                                                                   */MSDU  60\n /*********************************************************************/MSDU  70\n    PROCEDURE (A,R,N,MV),.                                              MSDU  80\n    DECLARE                                                             MSDU  90\n         (I,IND,J,L,M,MV,N)                                             MSDU 100\n         FIXED BINARY,                                                  MSDU 110\n         ERROR EXTERNAL CHARACTER(1),                                   MSDU 120\n         (A(*,*),R(*,*),ANORM,ANRMX,THR,U,Y,SINX,SINX2,COSX,COSX2,SINCS,MSDU 130\n         FN)                                                            MSDU 140\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/MSDU 150\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/MSDU 160\n /*                                                                   */MSDU 170\n    ERROR='0',.                                                         MSDU 180\n    IF N LE 1                          /* THE ORDER OF MATRIX A IS    */MSDU 190\n    THEN DO,.                          /* LESS THAN OR EQUAL TO ONE.  */MSDU 200\n         ERROR='1',.                                                    MSDU 210\n         GO TO FIN,.                                                    MSDU 220\n         END,.                                                          MSDU 230\n    FN   =N,.                                                           MSDU 240\n    IF MV= 0                                                            MSDU 250\n    THEN DO,.                                                           MSDU 260\n              DO I = 1 TO N,.          /* GENERATE IDENTITY MATRIX    */MSDU 270\n                   DO J = 1 TO N,.                                      MSDU 280\n                  R(I,J)=0,.                                            MSDU 290\n                   END,.                                                MSDU 300\n              R(I,I)=1,.                                                MSDU 310\n              END,.                                                     MSDU 320\n         END,.                                                          MSDU 330\n /*                                                                   */MSDU 340\n /*      COMPUTE INITIAL AND FINAL NORM                               */MSDU 350\n /*                                                                   */MSDU 360\n    ANORM=0,.                                                           MSDU 370\n         DO I = 1 TO N-1,.                                              MSDU 380\n              DO J = I+1 TO N,.                                         MSDU 390\n              ANORM=ANORM+A(I,J)*A(I,J),.                               MSDU 400\n              END,.                                                     MSDU 410\n         END,.                                                          MSDU 420\n    IF ANORM LE 0.0                                                     MSDU 430\n    THEN GO TO SORT,.                                                   MSDU 440\n    ANORM=1.414*SQRT(ANORM),.                                           MSDU 450\n    ANRMX=ANORM*1.0E-6/FN,.                                             MSDU 460\n /*                                                                   */MSDU 470\n /*      INITIALIZE INDICATOR AND COMPUTE THRESHOLD, THR              */MSDU 480\n /*                                                                   */MSDU 490\n    IND  =0,.                                                           MSDU 500\n    THR  =ANORM,.                                                       MSDU 510\n S10..                                                                  MSDU 520\n    THR  =THR/FN,.                                                      MSDU 530\n S20..                                                                  MSDU 540\n    L    =1,.                                                           MSDU 550\n S30..                                                                  MSDU 560\n    M    =L+1,.                                                         MSDU 570\n S40..                                                                  MSDU 580\n    IF ABS(A(L,M)) GE THR              /* COMPUTE SIN AND COS         */MSDU 590\n    THEN DO,.                                                           MSDU 600\n         IND  =1,.                                                      MSDU 610\n         U    =0.5*(A(L,L)-A(M,M)),.                                    MSDU 620\n         Y    =-A(L,M)/SQRT(A(L,M)*A(L,M)+U*U),.                        MSDU 630\n         IF U LT 0.0                                                    MSDU 640\n         THEN Y    =-Y,.                                                MSDU 650\n         SINX =Y/SQRT(2.0*(1.0+(SQRT(1.0-Y*Y)))),.                      MSDU 660\n         SINX2=SINX*SINX,.                                              MSDU 670\n         COSX =SQRT(1.0-SINX2),.                                        MSDU 680\n         COSX2=COSX*COSX,.                                              MSDU 690\n         SINCS=SINX*COSX,.                                              MSDU 700\n              DO I = 1 TO N,.          /* ROTATE L AND M COLUMNS      */MSDU 710\n              IF I LT L                                                 MSDU 720\n              THEN DO,.                                                 MSDU 730\n                   IF I LT M                                            MSDU 740\n                   THEN DO,.                                            MSDU 750\n                        U    =A(I,L)*COSX-A(I,M)*SINX,.                 MSDU 760\n                        A(I,M)=A(I,L)*SINX+A(I,M)*COSX,.                MSDU 770\n                        A(I,L)=U,.                                      MSDU 780\n                        END,.                                           MSDU 790\n                   END,.                                                MSDU 800\n              ELSE IF I GT L                                            MSDU 810\n              THEN DO,.                                                 MSDU 820\n                   IF I LT M                                            MSDU 830\n                   THEN DO,.                                            MSDU 840\n                        U    =A(L,I)*COSX-A(I,M)*SINX,.                 MSDU 850\n                        A(I,M)=A(L,I)*SINX+A(I,M)*COSX,.                MSDU 860\n                        END,.                                           MSDU 870\n                   ELSE IF I GT M                                       MSDU 880\n                   THEN DO,.                                            MSDU 890\n                        U    =A(L,I)*COSX-A(M,I)*SINX,.                 MSDU 900\n                        A(M,I)=A(L,I)*SINX+A(M,I)*COSX,.                MSDU 910\n                        END,.                                           MSDU 920\n                   IF I NE M                                            MSDU 930\n                   THEN A(L,I)=U,.                                      MSDU 940\n                   END,.                                                MSDU 950\n              IF MV= 0                                                  MSDU 960\n              THEN DO,.                                                 MSDU 970\n                   U    =R(I,L)*COSX-R(I,M)*SINX,.                      MSDU 980\n                   R(I,M)=R(I,L)*SINX+R(I,M)*COSX,.                     MSDU 990\n                   R(I,L)=U,.                                           MSDU1000\n                   END,.                                                MSDU1010\n              END,.                                                     MSDU1020\n         U    =2.0*A(L,M)*SINCS,.                                       MSDU1030\n         Y    =A(L,L)*COSX2+A(M,M)*SINX2-U,.                            MSDU1040\n         U    =A(L,L)*SINX2+A(M,M)*COSX2+U,.                            MSDU1050\n         A(L,M)=(A(L,L)-A(M,M))*SINCS+A(L,M)*(COSX2-SINX2),.            MSDU1060\n         A(L,L)=Y,.                                                     MSDU1070\n         A(M,M)=U,.                                                     MSDU1080\n         END,.                                                          MSDU1090\n    IF M NE N                          /* TEST FOR M = LAST COLUMN    */MSDU1100\n    THEN DO,.                                                           MSDU1110\n         M    =M+1,.                                                    MSDU1120\n         GO TO S40,.                                                    MSDU1130\n         END,.                                                          MSDU1140\n /*                                                                   */MSDU1150\n /*      TEST FOR L = SECOND FROM LAST COLUMN                         */MSDU1160\n /*                                                                   */MSDU1170\n    IF L NE N-1                                                         MSDU1180\n    THEN DO,.                                                           MSDU1190\n         L    =L+1,.                                                    MSDU1200\n         GO TO S30,.                                                    MSDU1210\n         END,.                                                          MSDU1220\n    IF IND= 1                                                           MSDU1230\n    THEN DO,.                                                           MSDU1240\n         IND  =0,.                                                      MSDU1250\n         GO TO S20,.                                                    MSDU1260\n         END,.                                                          MSDU1270\n /*                                                                   */MSDU1280\n /*      COMPARE THRESHOLD WITH FINAL NORM                            */MSDU1290\n /*                                                                   */MSDU1300\n    IF THR GT ANRMX                                                     MSDU1310\n    THEN GO TO S10,.                                                    MSDU1320\n /*                                                                   */MSDU1330\n /*      SORT EIGENVALUES AND EIGENVECTORS                            */MSDU1340\n /*                                                                   */MSDU1350\n SORT..                                                                 MSDU1360\n         DO I = 1 TO N,.                                                MSDU1370\n              DO J = I TO N,.                                           MSDU1380\n              IF A(I,I) LT A(J,J)                                       MSDU1390\n              THEN DO,.                                                 MSDU1400\n                   U    =A(I,I),.                                       MSDU1410\n                   A(I,I)=A(J,J),.                                      MSDU1420\n                   A(J,J)=U,.                                           MSDU1430\n                   IF MV= 0                                             MSDU1440\n                   THEN DO,.                                            MSDU1450\n                             DO L = 1 TO N,.                            MSDU1460\n                             U    =R(L,I),.                             MSDU1470\n                             R(L,I)=R(L,J),.                            MSDU1480\n                             R(L,J)=U,.                                 MSDU1490\n                             END,.                                      MSDU1500\n                        END,.                                           MSDU1510\n                   END,.                                                MSDU1520\n              END,.                                                     MSDU1530\n         END,.                                                          MSDU1540\n FIN..                                                                  MSDU1550\n    RETURN,.                                                            MSDU1560\n    END,.                              /*END OF PROCEDURE MSDU        */MSDU1570\n MGDU..                                                                 MGDU  10\n /*********************************************************************/MGDU  20\n /*                                                                   */MGDU  30\n /*      TO COMPUTE EIGENVALUES AND EIGENVECTORS OF A REAL NONSYMM-   */MGDU  40\n /*      ETRIC MATRIX OF THE FORM B INVERSE TIMES A.                  */MGDU  50\n /*                                                                   */MGDU  60\n /*********************************************************************/MGDU  70\n    PROCEDURE (M,A,B,XL,X),.                                            MGDU  80\n    DECLARE                                                             MGDU  90\n         (I,J,M,MV,K)                                                   MGDU 100\n         FIXED BINARY,                                                  MGDU 110\n         ERROR EXTERNAL CHARACTER(1),                                   MGDU 120\n         (A(*,*),B(*,*),X(*,*),XL(*),SUMV)                              MGDU 130\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/MGDU 140\n  /*     BINARY FLOAT(53),.            /*DOUBLE PRECISION VERSION  /*D*/MGDU 150\n /*                                                                   */MGDU 160\n /*      COMPUTE EIGENVALUES AND EIGENVECTORS OF B                    */MGDU 170\n /*                                                                   */MGDU 180\n /*      THE MATRIX B IS A REAL SYMMETRIC MATRIX.                     */MGDU 190\n /*                                                                   */MGDU 200\n    MV   =0,.                                                           MGDU 210\n    CALL MSDU (B,X,M,MV),.                                              MGDU 220\n    IF ERROR NE '0'                                                     MGDU 230\n    THEN GO TO FIN,.                                                    MGDU 240\n /*                                                                   */MGDU 250\n /*      FORM RECIPROCALS OF SQUARE ROOT OF EIGENVALUES. THE RESULTS  */MGDU 260\n /*      ARE PREMULTIPLIED BY THE ASSOCIATED EIGENVECTORS.            */MGDU 270\n /*                                                                   */MGDU 280\n         DO I = 1 TO M,.                                                MGDU 290\n         XL(I)=1.0/SQRT(ABS(B(I,I))),.                                  MGDU 300\n              DO J = 1 TO M,.                                           MGDU 310\n              B(J,I)=X(J,I)*XL(I),.                                     MGDU 320\n              END,.                                                     MGDU 330\n         END,.                                                          MGDU 340\n /*                                                                   */MGDU 350\n /*      FORM (B**(-1/2))PRIME * A * (B**(-1/2))                      */MGDU 360\n /*                                                                   */MGDU 370\n         DO I = 1 TO M,.                                                MGDU 380\n              DO J = 1 TO M,.                                           MGDU 390\n              X(I,J)=0.0,.                                              MGDU 400\n                   DO K = 1 TO M,.                                      MGDU 410\n                   X(I,J)=X(I,J)+B(K,I)*A(K,J),.                        MGDU 420\n                   END,.                                                MGDU 430\n              END,.                                                     MGDU 440\n         END,.                                                          MGDU 450\n         DO I = 1 TO M,.                                                MGDU 460\n              DO J = 1 TO M,.                                           MGDU 470\n              A(I,J)=0.0,.                                              MGDU 480\n                   DO K = 1 TO M,.                                      MGDU 490\n                   A(I,J)=A(I,J)+X(I,K)*B(K,J),.                        MGDU 500\n                   END,.                                                MGDU 510\n              END,.                                                     MGDU 520\n         END,.                                                          MGDU 530\n /*                                                                   */MGDU 540\n /*      COMPUTE EIGENVALUES AND EIGENVECTORS OF A                    */MGDU 550\n /*                                                                   */MGDU 560\n    CALL MSDU (A,X,M,MV),.                                              MGDU 570\n         DO I = 1 TO M,.                                                MGDU 580\n         XL(I)=A(I,I),.                                                 MGDU 590\n /*                                                                   */MGDU 600\n /*      COMPUTE THE NORMALIZED EIGENVECTORS                          */MGDU 610\n /*                                                                   */MGDU 620\n              DO J = 1 TO M,.                                           MGDU 630\n              A(I,J)=0.0,.                                              MGDU 640\n                   DO K = 1 TO M,.                                      MGDU 650\n                   A(I,J)=A(I,J)+B(I,K)*X(K,J),.                        MGDU 660\n                   END,.                                                MGDU 670\n              END,.                                                     MGDU 680\n         END,.                                                          MGDU 690\n         DO J = 1 TO M,.                                                MGDU 700\n         SUMV =0.0,.                                                    MGDU 710\n              DO K = 1 TO M,.                                           MGDU 720\n              SUMV =SUMV+A(K,J)*A(K,J),.                                MGDU 730\n              END,.                                                     MGDU 740\n         SUMV =SQRT(SUMV),.                                             MGDU 750\n              DO K = 1 TO M,.                                           MGDU 760\n              X(K,J)=A(K,J)/SUMV,.                                      MGDU 770\n              END,.                                                     MGDU 780\n         END,.                                                          MGDU 790\n FIN..                                                                  MGDU 800\n    RETURN,.                                                            MGDU 810\n    END,.                              /*END OF PROCEDURE MGDU        */MGDU 820\n MVAT..                                                                 MVAT  10\n /*********************************************************************/MVAT  20\n /*                                                                   */MVAT  30\n /*          EIGENVECTORS OF A COMPLEX HESSENBERG MATRIX              */MVAT  40\n /*                                                                   */MVAT  50\n /*********************************************************************/MVAT  60\n    PROCEDURE (A,N,EIG,V),.                                             MVAT  70\n    DECLARE                                                             MVAT  80\n         P(N)                                                           MVAT  90\n         BIT(1),                                                        MVAT 100\n         (E7,U,T,EPS)                                                   MVAT 110\n         BINARY,                                                        MVAT 120\n         (A(*,*),EIG,C,V(*))                                            MVAT 130\n         COMPLEX BINARY,                                                MVAT 140\n         S                                                              MVAT 150\n         COMPLEX BINARY(53),                                            MVAT 160\n         (N,IS(N),I,I1,J,N1,K,K1,KP1,IT)                                MVAT 170\n         BINARY FIXED,.                                                 MVAT 180\n    E7=1.0E-7,.                                                         MVAT 190\n    A(1,1)=A(1,1)-EIG,.                /*   MODIFY DIAGONAL ELEMENTS  */MVAT 200\n    IS(1)=1,.                                                           MVAT 210\n    U=ABS(A(1,1)),.                    /*COMPUTE A NORM OF THE MATRIX */MVAT 220\n         DO I=2 TO N,.                                                  MVAT 230\n         I1=I-1,.                                                       MVAT 240\n         IS(I)=I1,.                                                     MVAT 250\n         A(I,I)=A(I,I)-EIG,.                                            MVAT 260\n         T=ABS(A(1,I)),.                                                MVAT 270\n         IF T GT U THEN U=T,.                                           MVAT 280\n              DO J=I1 TO N,.                                            MVAT 290\n              T=ABS(A(I,J)),.                                           MVAT 300\n              IF T GT U THEN U=T,.                                      MVAT 310\n              END,.                                                     MVAT 320\n         END,.                                                          MVAT 330\n    EPS=U*E7,.                                                          MVAT 340\n    N1=N-1,.                           /*     START FACTORIZATION     */MVAT 350\n    P(1)='0'B,.                                                         MVAT 360\n    IF ABS(A(2,1)) GT ABS(A(1,1))      /*       INITIALIZATION        */MVAT 370\n    THEN DO,.                                                           MVAT 380\n         P(1)='1'B,.                                                    MVAT 390\n              DO I=1 TO N,.                                             MVAT 400\n              C=A(1,I),.                                                MVAT 410\n              A(1,I)=A(2,I),.                                           MVAT 420\n              A(2,I)=C,.                                                MVAT 430\n              END,.                                                     MVAT 440\n         END,.                                                          MVAT 450\n    IF ABS(A(1,1)) LT EPS THEN A(1,1)=EPS,.                             MVAT 460\n    A(2,1)=A(2,1)/A(1,1),.                                              MVAT 470\n         DO K=2 TO N1,.                                                 MVAT 480\n         KP1=K+1,.                                                      MVAT 490\n         K1=K-1,.                                                       MVAT 500\n         S=A(K,K),.                    /*   COMPUTE THE LOWER FACTOR  */MVAT 510\n              DO I=IS(K) TO K1,.                                        MVAT 520\n              S=S-MULTIPLY(A(K,I),A(I,K),53),.                          MVAT 530\n              END,.                                                     MVAT 540\n         A(K,K)=S,.                                                     MVAT 550\n         IF ABS(A(K,K)) LT ABS(A(KP1,K))                                MVAT 560\n         THEN DO,.                     /*          PIVOTING           */MVAT 570\n              P(K)='1'B,.                                               MVAT 580\n                   DO I=K TO N,.                                        MVAT 590\n                   C=A(K,I),.                                           MVAT 600\n                   A(K,I)=A(KP1,I),.                                    MVAT 610\n                   A(KP1,I)=C,.                                         MVAT 620\n                   END,.                                                MVAT 630\n                   DO I=IS(K) TO K1,.                                   MVAT 640\n                   A(KP1,I)=A(K,I),.                                    MVAT 650\n                   END,.                                                MVAT 660\n              I=IS(K),.                                                 MVAT 670\n              IS(K)=IS(KP1),.                                           MVAT 680\n              IS(KP1)=I,.                                               MVAT 690\n              END,.                                                     MVAT 700\n         ELSE DO,.                                                      MVAT 710\n              P(K)='0'B,.                                               MVAT 720\n                   DO J=KP1 TO N,.     /*   COMPUTE THE UPPER FACTOR  */MVAT 730\n                   S=A(K,J),.                                           MVAT 740\n                        DO I=IS(K) TO K1,.                              MVAT 750\n                        S=S-MULTIPLY(A(I,J),A(K,I),53),.                MVAT 760\n                        END,.                                           MVAT 770\n                   A(K,J)=S,.                                           MVAT 780\n                   END,.                                                MVAT 790\n              END,.                                                     MVAT 800\n                                       /*  NORMALIZE THE LOWER FACTOR */MVAT 810\n         IF ABS(A(K,K)) LT EPS THEN A(K,K)=EPS,.                        MVAT 820\n         A(KP1,K)=A(KP1,K)/A(K,K),.                                     MVAT 830\n         END,.                                                          MVAT 840\n    S=A(N,N),.                                                          MVAT 850\n         DO I=IS(N) TO N1,.                                             MVAT 860\n         S=S-MULTIPLY(A(N,I),A(I,N),53),.                               MVAT 870\n         END,.                                                          MVAT 880\n    A(N,N)=S,.                         /*      END FACTORIZATION      */MVAT 890\n    IF ABS(A(N,N)) LT EPS THEN A(N,N)=EPS,.                             MVAT 900\n         DO I=1 TO N,.                 /*      INVERSE ITERATION      */MVAT 910\n         V(I)=1,.                      /*       STARTING VALUE        */MVAT 920\n         END,.                                                          MVAT 930\n         DO IT=1,2,.                                                    MVAT 940\n         K=N,.                                                          MVAT 950\n         IF IT GT 1                                                     MVAT 960\n         THEN DO,.                                                      MVAT 970\n                   DO I=1 TO N1,.      /*        INTERCHANGES         */MVAT 980\n                   IF P(I)                                              MVAT 990\n                   THEN DO,.                                            MVAT1000\n                        I1=I+1,.                                        MVAT1010\n                        C=V(I),.                                        MVAT1020\n                        V(I)=V(I1),.                                    MVAT1030\n                        V(I1)=C,.                                       MVAT1040\n                        END,.                                           MVAT1050\n                   END,.                                                MVAT1060\n                   DO I=2 TO N,.       /*   SOLVE WITH LOWER FACTOR   */MVAT1070\n                        S=V(I),.                                        MVAT1080\n                             DO J=IS(I) TO I-1,.                        MVAT1090\n                             S=S-MULTIPLY(A(I,J),V(J),53),.             MVAT1100\n                             END,.                                      MVAT1110\n                        V(I)=S,.                                        MVAT1120\n                   END,.                                                MVAT1130\n              END,.                                                     MVAT1140\n         V(N)=V(N)/A(N,N),.            /*   SOLVE WITH UPPER FACTOR   */MVAT1150\n         U=ABS(V(N)),.                                                  MVAT1160\n              DO I=N1 TO 1 BY -1,.                                      MVAT1170\n              S=V(I),.                                                  MVAT1180\n                   DO J=I+1 TO N,.                                      MVAT1190\n                   S=S-MULTIPLY(A(I,J),V(J),53),.                       MVAT1200\n                   END,.                                                MVAT1210\n              V(I)=S/A(I,I),.                                           MVAT1220\n              T=ABS(V(I)),.                                             MVAT1230\n              IF T GT U                                                 MVAT1240\n              THEN DO,.                                                 MVAT1250\n                   K=I,.                                                MVAT1260\n                   U=T,.                                                MVAT1270\n                   END,.                                                MVAT1280\n              END,.                                                     MVAT1290\n         C    =V(K),.                                                   MVAT1300\n              DO I=1 TO N,.            /*  NORMALIZE RESULTING VECTOR */MVAT1310\n              V(I) =V(I)/C,.                                            MVAT1320\n              END,.                                                     MVAT1330\n         END,.                         /*  END OF LOOP FOR ITERATION  */MVAT1340\n    RETURN,.                                                            MVAT1350\n    END,.                              /*    END OF PROCEDURE MVAT    */MVAT1360\n MVSU..                                                                 MVSU  10\n /*********************************************************************/MVSU  20\n /*                                                                   */MVSU  30\n /*             BACK TRANSFORMATION OF THE EIGENVECTORS               */MVSU  40\n /*                           SYMMETRIC CASE                          */MVSU  50\n /*                                                                   */MVSU  60\n /*********************************************************************/MVSU  70\n    PROCEDURE (A,N,CD,V),.                                              MVSU  80\n    DECLARE                                                             MVSU  90\n         (A(*),CD(*),V(*),T,C) BINARY,                                  MVSU 100\n         (N,ICD,K,KP1,J,I) BINARY FIXED,                                MVSU 110\n         (S,DP) BINARY(53),.                                            MVSU 120\n    ICD=(N*(N+1))/2-1,.                                                 MVSU 130\n         DO K=N-1 TO 2 BY -1,.                                          MVSU 140\n         KP1=K+1,.                                                      MVSU 150\n         ICD=ICD-KP1,.                                                  MVSU 160\n         C=A(ICD)-CD(K),.                                               MVSU 170\n         IF C NE 0                                                      MVSU 180\n         THEN DO,.                     /*  ORTHOGONAL TRANSFORMATION  */MVSU 190\n              S=0,.                                                     MVSU 200\n                   J=ICD-K+1,.                                          MVSU 210\n                        DO I=K TO N,.                                   MVSU 220\n                        J=J+I-1,.                                       MVSU 230\n                        S=S+MULTIPLY(A(J),V(I),53),.                    MVSU 240\n                        END,.                                           MVSU 250\n                   S=S/CD(K),.                                          MVSU 260\n                   T=(S-V(K))/C,.                                       MVSU 270\n                   V(K)=S,.                                             MVSU 280\n                   J=ICD,.                                              MVSU 290\n                        DO I=KP1 TO N,.                                 MVSU 300\n                        J=J+I-1,.                                       MVSU 310\n                        V(I)=V(I)+T*A(J),.                              MVSU 320\n                        END,.                                           MVSU 330\n              END,.                                                     MVSU 340\n         END,.                                                          MVSU 350\n         S=0,.                         /*          NORMALIZE          */MVSU 360\n              DO I=1 TO N,.                                             MVSU 370\n              DP=V(I),.                                                 MVSU 380\n              S=S+DP*DP,.                                               MVSU 390\n              END,.                                                     MVSU 400\n         S=SQRT(S),.                                                    MVSU 410\n              DO I=1 TO N,.                                             MVSU 420\n              V(I)=V(I)/S,.                                             MVSU 430\n              END,.                                                     MVSU 440\n    RETURN,.                                                            MVSU 450\n    END,.                              /*    END OF PROCEDURE MVSU    */MVSU 460\n MVUB..                                                                 MVUB  10\n /*********************************************************************/MVUB  20\n /*                                                                   */MVUB  30\n /*              BACK TRANSFORMATION OF THE EIGENVECTORS              */MVUB  40\n /*                   HOUSEHOLDER'S TRANSFORMATIONS                   */MVUB  50\n /*                                                                   */MVUB  60\n /*********************************************************************/MVUB  70\n    PROCEDURE (A,N,B,V),.                                               MVUB  80\n    DECLARE                                                             MVUB  90\n         (A(*,*),B(*),T,U) BINARY,                                      MVUB 100\n         (I,K,K1,KP1,N) BINARY FIXED,                                   MVUB 110\n         (V(*),X) COMPLEX BINARY,                                       MVUB 120\n         S COMPLEX BINARY(53),.                                         MVUB 130\n         DO K=N-1 TO 2 BY -1,.                                          MVUB 140\n         IF B(K) NE 0                                                   MVUB 150\n         THEN DO,.                     /*  ORTHOGONAL TRANSFORMATION  */MVUB 160\n              KP1=K+1,.                                                 MVUB 170\n              K1=K-1,.                                                  MVUB 180\n              S=MULTIPLY(B(K),V(K),53),.                                MVUB 190\n                   DO I=KP1 TO N,.                                      MVUB 200\n                   S=S+MULTIPLY(A(I,K1),V(I),53),.                      MVUB 210\n                   END,.                                                MVUB 220\n              S=S/A(K,K1),.                                             MVUB 230\n              X=(S-V(K))/(B(K)-A(K,K1)),.                               MVUB 240\n              V(K)=S,.                                                  MVUB 250\n                   DO I=KP1 TO N,.                                      MVUB 260\n                   V(I)=V(I)+X*A(I,K1),.                                MVUB 270\n                   END,.                                                MVUB 280\n              END,.                                                     MVUB 290\n         END,.                                                          MVUB 300\n    K=1,.                                                               MVUB 310\n    T=ABS(V(1)),.                      /*          NORMALIZE          */MVUB 320\n         DO I=2 TO N,.                                                  MVUB 330\n         U=ABS(V(I)),.                                                  MVUB 340\n         IF U GT T                                                      MVUB 350\n         THEN DO,.                                                      MVUB 360\n              T=U,.                                                     MVUB 370\n              K=I,.                                                     MVUB 380\n              END,.                                                     MVUB 390\n         END,.                                                          MVUB 400\n    X    =V(K),.                                                        MVUB 410\n         DO I=1 TO N,.                                                  MVUB 420\n         V(I) =V(I)/X,.                                                 MVUB 430\n         END,.                                                          MVUB 440\n    RETURN,.                                                            MVUB 450\n    END,.                              /*    END OF PROCEDURE MVUB    */MVUB 460\n MVEB..                                                                 MVEB  10\n /*********************************************************************/MVEB  20\n /*                                                                   */MVEB  30\n /*              BACK TRANSFORMATION OF THE EIGENVECTORS              */MVEB  40\n /*                      ELIMINATION TECHNIQUES                       */MVEB  50\n /*                                                                   */MVEB  60\n /*********************************************************************/MVEB  70\n    PROCEDURE (A,N,IP,V),.                                              MVEB  80\n    DECLARE                                                             MVEB  90\n         (A(*,*),T,U) BINARY,                                           MVEB 100\n         (V(*),C) COMPLEX BINARY,                                       MVEB 110\n         (IP(*),I,K,K1,N) BINARY FIXED,                                 MVEB 120\n         S COMPLEX BINARY(53),.                                         MVEB 130\n         DO K=2 TO N-1,.                                                MVEB 140\n         K1=K+1,.                                                       MVEB 150\n         IF A(K1,K) NE 0                                                MVEB 160\n         THEN DO,.                     /*  ELEMENTARY TRANSFORMATION  */MVEB 170\n              S=V(K),.                                                  MVEB 180\n                   DO I=1 TO K-1,.                                      MVEB 190\n                   S=S-MULTIPLY(A(K1,I),V(I),53),.                      MVEB 200\n                   END,.                                                MVEB 210\n              V(K)=S,.                                                  MVEB 220\n              END,.                                                     MVEB 230\n         END,.                                                          MVEB 240\n         DO K=2 TO N-1,.                                                MVEB 250\n         IF IP(K) NE K                 /*        INTERCHANGES         */MVEB 260\n         THEN DO,.                                                      MVEB 270\n              I=IP(K),.                                                 MVEB 280\n              C=V(K),.                                                  MVEB 290\n              V(K)=V(I),.                                               MVEB 300\n              V(I)=C,.                                                  MVEB 310\n              END,.                                                     MVEB 320\n         END,.                                                          MVEB 330\n    K=1,.                                                               MVEB 340\n    T=ABS(V(1)),.                      /*          NORMALIZE          */MVEB 350\n         DO I=2 TO N,.                                                  MVEB 360\n         U=ABS(V(I)),.                                                  MVEB 370\n         IF U GT T                                                      MVEB 380\n         THEN DO,.                                                      MVEB 390\n              T=U,.                                                     MVEB 400\n              K=I,.                                                     MVEB 410\n              END,.                                                     MVEB 420\n         END,.                                                          MVEB 430\n    C    =V(K),.                                                        MVEB 440\n         DO I=1 TO N,.                                                  MVEB 450\n         V(I) =V(I)/C,.                                                 MVEB 460\n         END,.                                                          MVEB 470\n    RETURN,.                                                            MVEB 480\n    END,.                              /*    END OF PROCEDURE MVEB    */MVEB 490\n POV..                                                                  POV   10\n /*********************************************************************/POV   20\n /*                                                                   */POV   30\n /*      CALCULATE VALUES OF FIRST N ORTHOGONAL POLYNOMIALS           */POV   40\n /*                                                                   */POV   50\n /*********************************************************************/POV   60\n    PROCEDURE(X,N,OPT,Y),.                                              POV   70\n    DECLARE                                                             POV   80\n         (LX,H,H0,H1,H2,FN) BINARY FLOAT(53),                           POV   90\n         (Y(*),X)                                                       POV  100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/POV  110\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/POV  120\n         (N,I) BINARY FIXED,                                            POV  130\n         OPT CHARACTER(1),.                                             POV  140\n    LX   =X,.                                                           POV  150\n    IF N GE 1                          /*BYPASS OPERATION IF N LE 0   */POV  160\n    THEN DO,.                                                           POV  170\n         IF OPT='T'                    /*CHEBYSHEV POLYNOMIALS T(X)   */POV  180\n         THEN H0   =LX,.               /*INIT. STARTING VALUE         */POV  190\n         ELSE DO,.                                                      POV  200\n              FN   =1,.                /*INIT. INTEGER FACTOR TERM    */POV  210\n              H0   =0,.                /*INIT. STARTING VALUE         */POV  220\n              END,.                                                     POV  230\n         Y(1),H1=1,.                   /*STORE AND SAVE FIRST RESULT  */POV  240\n              DO I = 2 TO N,.                                           POV  250\n              H2   =LX*H1,.            /*PERFORM COMMON CALCULATION   */POV  260\n              H    =H2-H0,.                                             POV  270\n              IF OPT NE 'T'            /*CHEBYSHEV POLYNOMIALS T(X)   */POV  280\n              THEN DO,.                                                 POV  290\n                   IF OPT= 'H'         /*HERMITE POLYNOMIALS H(X)     */POV  300\n                   THEN DO,.                                            POV  310\n                        H2   =H2+FN*H0,.                                POV  320\n                        FN   =FN-2,.   /*STEP INTEGER FACTOR          */POV  330\n                        END,.                                           POV  340\n                   ELSE DO,.                                            POV  350\n                        IF OPT= 'L'    /*LAGUERRE POLYNOMIALS L(X)    */POV  360\n                        THEN DO,.                                       POV  370\n                             H2   =H1-(H+H1)/FN,.                       POV  380\n                             H    =H1-H0,.                              POV  390\n                             END,.                                      POV  400\n                        ELSE H2   =H2  /*LEGENDRE POLYNOMIALS P(X)    */POV  410\n                             -H/FN,.                                    POV  420\n                        FN   =FN+1,.   /*STEP INTEGER DENOMINATOR     */POV  430\n                        END,.                                           POV  440\n                   END,.               /*CONTINUE COMMON CALCULATION  */POV  450\n              H0   =H1,.               /*SAVE PRECEDING RESULT VALUE  */POV  460\n              H1,Y(I)=H+H2,.           /*STORE AND SAVE I-TH RESULT   */POV  470\n              END,.                                                     POV  480\n         END,.                                                          POV  490\n    END,.                              /*END OF PROCEDURE POV         */POV  500\n POSV..                                                                 POSV  10\n /*********************************************************************/POSV  20\n /*                                                                   */POSV  30\n /*      EVALUATE N-TERM SERIES EXPANSION IN ORTHOGONAL POLYNOMIALS   */POSV  40\n /*                                                                   */POSV  50\n /*********************************************************************/POSV  60\n    PROCEDURE(X,C,N,OPT,SUM),.                                          POSV  70\n    DECLARE                                                             POSV  80\n         (LX,H,H0,H1,H2,FN) BINARY FLOAT(53),                           POSV  90\n         (X,C(*),SUM)                                                   POSV 100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/POSV 110\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/POSV 120\n         (N,I) BINARY FIXED,                                            POSV 130\n         OPT CHARACTER(1),.                                             POSV 140\n    I    =N,.                                                           POSV 150\n    IF I GE 1                          /*BYPASS OPERATION IF N LE 0   */POSV 160\n    THEN DO,.                                                           POSV 170\n         LX   =X,.                                                      POSV 180\n         IF OPT='L'                    /*LAGUERRE POLYNOMIALS L(X)    */POSV 190\n         THEN LX   =1-LX,.                                              POSV 200\n         H2,H1=0,.                     /*ZERO U(N+1), U(N+2) OR V(N+2)*/POSV 210\n         FN   =I,.                                                      POSV 220\n ITER..                                /*LOOP OVER I = N TO 1 BY -1   */POSV 230\n         IF OPT='T'                    /*CHEBYSHEV POLYNOMIALS T(X)   */POSV 240\n         THEN DO,.                                                      POSV 250\n              H0   =LX*H1,.                                             POSV 260\n              H    =H0-H2+H0,.         /*H = 2*X*U(I+1)-U(I+2)        */POSV 270\n              END,.                                                     POSV 280\n         ELSE DO,.                                                      POSV 290\n              IF OPT='H'               /*HERMITE POLYNOMIALS H(X)     */POSV 300\n              THEN DO,.                                                 POSV 310\n                   H    =LX*H1-FN*H2,.                                  POSV 320\n                   H    =H+H,.         /*H = 2*(X*U(I+1)-I*U(I+2))    */POSV 330\n                   END,.                                                POSV 340\n              ELSE DO,.                /*LAGUERRE OR LEGENDRE POLYNOM.*/POSV 350\n                   H0   =H1,.          /*SAVE U(I+1)                  */POSV 360\n                   H    =H1/FN,.                                        POSV 370\n                   H1   =H1-H,.        /*COMPUTE V(I+1)               */POSV 380\n                   IF OPT='L'          /*LAGUERRE POLYNOMIALS L(X)    */POSV 390\n                   THEN H =H1+LX*H+H1,./*H = 2*V(I+1)+(1-X)*U(I+1)    */POSV 400\n                   ELSE H =LX*(H1+H0),./*LEGENDRE POLYNOMIALS L(X)    */POSV 410\n                        H    =H-H2,.   /*H = X*(V(I+1)+U(I+1))        */POSV 420\n                   END,.               /*FOR BOTH H = H-V(I+2)        */POSV 430\n              FN   =FN-1,.             /*DECREASE INTEGER FACTOR      */POSV 440\n              END,.                                                     POSV 450\n         H2   =H1,.                    /*SAVE U(I+1) RESP. V(I+1)     */POSV 460\n         H1   =H+C(I),.                /*COMP. U(I) = H+C(I)          */POSV 470\n         I    =I-1,.                   /*DECREASE COUNTER I           */POSV 480\n         IF I GT 0                                                      POSV 490\n         THEN GO TO ITER,.             /*END OF LOOP OVER I           */POSV 500\n         IF OPT='T'                                                     POSV 510\n         THEN H1   =H1-H0,.            /*MODIFY U(1) IN CHEBYSHEV CASE*/POSV 520\n         SUM  =H1,.                    /*RETURN VALUE OF SERIES       */POSV 530\n         END,.                                                          POSV 540\n    END,.                              /*END OF PROCEDURE POSV        */POSV 550\n PEC..                                                                  PEC   10\n /*********************************************************************/PEC   20\n /*                                                                   */PEC   30\n /*      POLYNOMIAL ECONOMIZATION OVER THE RANGE (0,A) IF OPT ='S'    */PEC   40\n /*      AND OVER THE RANGE (-A,A) IF OPT ='0'                        */PEC   50\n /*                                                                   */PEC   60\n /*********************************************************************/PEC   70\n    PROCEDURE(C,N,M,TOL,EPS,A,OPT),.                                    PEC   80\n    DECLARE                                                             PEC   90\n         (C(*),A,FV,FX,FM,U,V,W)                                        PEC  100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/PEC  110\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/PEC  120\n         (TOL,EPS)BINARY FLOAT,                                         PEC  130\n         (N,M,NH,NT,JE,I,IC,NOD,JST,IST,J)                              PEC  140\n         BINARY FIXED,                                                  PEC  150\n         LN BINARY FIXED(31),                                           PEC  160\n         (OPT,SW,ERROR EXTERNAL) CHARACTER(1),.                         PEC  170\n    SW   ='E',.                        /*MARK ENTRY ECONOMIZATION     */PEC  180\n    EPS,M = 0,.                                                         PEC  190\n    GO TO COM,.                                                         PEC  200\n PTC..                                                                  PEC  210\n /*********************************************************************/PEC  220\n /*                                                                   */PEC  230\n /*      TRANSFORMATION OF POLYNOMIAL TO AN EXPANSION IN TERMS OF     */PEC  240\n /*      CHEBYSHEV POLYNOMIALS OVER THE RANGE (-A,A) IF OPT='0' AND   */PEC  250\n /*      SHIFTED CHEBYSHEV POLYNOMIALS OVER THE RANGE (0,A) IF OPT='S'*/PEC  260\n /*                                                                   */PEC  270\n /*********************************************************************/PEC  280\n    ENTRY(C,N,A,OPT),.                                                  PEC  290\n    SW   ='T',.                        /*MARK ENTRY TRANSFORMATION    */PEC  300\n COM..                                                                  PEC  310\n    LN   =N,.                                                           PEC  320\n    IF LN LE 0                                                          PEC  330\n    THEN GO TO EXIT,.                  /*GIVEN N IS NOT POSITIVE      */PEC  340\n    IF OPT NE 'S'                                                       PEC  350\n    THEN DO,.                                                           PEC  360\n         FV   =1,.                                                      PEC  370\n         NH   =LN/10B,.                                                 PEC  380\n         JST  =2,.                                                      PEC  390\n         NOD  =LN-NH-NH,.                                               PEC  400\n         END,.                                                          PEC  410\n    ELSE DO,.                                                           PEC  420\n         FV   =0.5,.                                                    PEC  430\n         NH   =LN-1,.                                                   PEC  440\n         JST,NOD=1,.                                                    PEC  450\n         END,.                                                          PEC  460\n    FM,FX=FV*ABS(A),.                                                   PEC  470\n    IF FX=0                                                             PEC  480\n    THEN GO TO EXIT,.                  /*GIVEN A EQUALS ZERO,ERROR='P'*/PEC  490\n    FV   =0.5*FX,.                                                      PEC  500\n    NT   =NH*NH,.                      /*DIMENSION OF ARRAY T         */PEC  510\n         BEGIN,.                                                        PEC  520\n         DECLARE                                                        PEC  530\n              T(NT)                                                     PEC  540\n              BINARY FLOAT,.           /*SINGLE PRECISION VERSION  /*S*/PEC  550\n  /*          BINARY FLOAT(53),.       /*DOUBLE PRECISION VERSION  /*D*/PEC  560\n         ERROR='0',.                                                    PEC  570\n         JE   =0,.                     /*INIT. CALCULATION OF T-ARRAY */PEC  580\n         W    =2,.                                                      PEC  590\n              DO I =1 TO NT BY NH,.                                     PEC  600\n              U,V,T(I)=1,.             /*INSERT ONE IN DIAGONAL       */PEC  610\n              IC   =I,.                                                 PEC  620\n              JE   =JE+NH,.                                             PEC  630\n              I    =I+1,.                                               PEC  640\n                   DO J =I TO JE,.     /*INSERT REMAINING ELEMENTS OF */PEC  650\n                   IF I GT 2           /*SUBROW AND SUBCOLUMN         */PEC  660\n                   THEN W    =T(IC-1),.                                 PEC  670\n                   V,T(J)=V+W,.                                         PEC  680\n                   IC   =IC+NH,.                                        PEC  690\n                   U,T(IC)=U+V,.                                        PEC  700\n                   END,.                                                PEC  710\n              END,.                                                     PEC  720\n              DO I =2 TO LN,.          /*SUBSTITUTION OF VARIABLE     */PEC  730\n              C(I) =C(I)*FX,.                                           PEC  740\n              FX   =FX*FV,.                                             PEC  750\n              END,.                                                     PEC  760\n         IC   =NT,.                    /*INIT. FIRST TELESCOPING STEP */PEC  770\n TELE..                                                                 PEC  780\n         IST  =1,.                                                      PEC  790\n         I    =IC,.                                                     PEC  800\n         IF NOD NE 1                                                    PEC  810\n         THEN IST  =NH,.                                                PEC  820\n         J    =LN,.                                                     PEC  830\n         IF J =0                                                        PEC  840\n         THEN GO TO END,.                                               PEC  850\n         U    =C(LN),.                                                  PEC  860\n         IF SW='E'                                                      PEC  870\n         THEN DO,.                                                      PEC  880\n              W    =EPS+ABS(U),.                                        PEC  890\n              IF W GT ABS(TOL)                                          PEC  900\n              THEN DO,.                                                 PEC  910\n                   M    =LN,.          /*DIMENSION ECONOMIZED POLYNOM.*/PEC  920\n                        DO I =2 TO LN,.                                 PEC  930\n                        C(I) =C(I)/FM,./*BACKSUBSTITUTION OF VARIABLE */PEC  940\n                        FM   =FV*FM,.                                   PEC  950\n                        END,.                                           PEC  960\n                   GO TO END,.                                          PEC  970\n                   END,.                                                PEC  980\n              EPS  =W,.                                                 PEC  990\n              END,.                                                     PEC 1000\n SUBT..                                /*SUBTRACT MULTIPLE OF CHEBY-  */PEC 1010\n         I    =I-IST,.                 /*SHEV POLYNOMIAL              */PEC 1020\n         J    =J-JST,.                                                  PEC 1030\n         IF J GT 1                                                      PEC 1040\n         THEN DO,.                                                      PEC 1050\n              C(J) =C(J)+U*T(I),.                                       PEC 1060\n              U    =-U,.               /*ALTERNATE SIGNS IN T         */PEC 1070\n              GO TO SUBT,.                                              PEC 1080\n              END,.                                                     PEC 1090\n         IF J = 1                                                       PEC 1100\n         THEN C(1) =C(1)+U,.           /*ADJUST CONSTANT TERM         */PEC 1110\n         IF OPT NE 'S'                                                  PEC 1120\n         THEN NOD  =1-NOD,.            /*INIT. NEXT TELESCOPING STEP  */PEC 1130\n         IF NOD=1                                                       PEC 1140\n         THEN IC   =IC-NH-1,.                                           PEC 1150\n         LN   =LN-1,.                                                   PEC 1160\n         GO TO TELE,.                                                   PEC 1170\n         END,.                                                          PEC 1180\n EXIT..                                                                 PEC 1190\n    ERROR='P',.                                                         PEC 1200\n END..                                                                  PEC 1210\n    END,.                              /*END OF PROCEDURE PEC         */PEC 1220\n POST..                                                                 POST  10\n /*********************************************************************/POST  20\n /*                                                                   */POST  30\n /*      TRANSFORM N-TERM SERIES EXPANSION IN ORTHOGONAL POLYNOMIALS  */POST  40\n /*                                                                   */POST  50\n /*********************************************************************/POST  60\n    PROCEDURE(X0,X1,C,N,OPT,POL),.                                      POST  70\n    DECLARE                                                             POST  80\n         (X0,X1,C(*),POL(*),F,FI,AI,BI,CI,U,U1,U2,U3,H(N+N))            POST  90\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/POST 100\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/POST 110\n         (N,I,J,K,KP1) BINARY FIXED,                                    POST 120\n         OPT CHARACTER(1),.                                             POST 130\n    IF N GE 1                          /*BYPASS OPERATION IF N LE 0   */POST 140\n    THEN DO,.                          /*INITIALIZATION               */POST 150\n         AI   =X0+X0,.                 /*INIT. CONSTANT MULTIPLIERS   */POST 160\n         CI   =X1+X1,.                                                  POST 170\n         IF OPT='T'                    /*CHEBYSHEV POLYNOMIALS T(X)   */POST 180\n         THEN BI   =0.5,.              /*MODIFY FIRST CHEB. POLYNOMIAL*/POST 190\n         ELSE DO,.                                                      POST 200\n              BI   =1,.                /*INIT. FIRST ORTH. POLYNOMIAL */POST 210\n              FI   =0,.                /*INIT. INTEGER FACTOR         */POST 220\n              END,.                                                     POST 230\n         H(2) =BI,.                    /*STORE FIRST ORTH. POLYNOMIAL */POST 240\n         H(1) =0,.                     /*INIT. PSEUDO POLYNOMIAL(-1)  */POST 250\n         POL(1)=C(1),.                 /*INIT. RESULTING POLYNOMIAL   */POST 260\n              DO I = 2 TO N,.          /*CALCULATE COEFFICIENT VECTOR */POST 270\n              F    =C(I),.             /*OF I-TH ORTHOGONAL POLYNOM.  */POST 280\n              IF OPT NE 'T'                                             POST 290\n              THEN DO,.                /*MODIFY MULTIPLIERS AI,BI,CI  */POST 300\n                   BI   =FI,.                                           POST 310\n                   FI   =FI+1,.        /*FOR                          */POST 320\n                   IF OPT NE 'H'       /*HERMITE POLYNOMIALS H(X)     */POST 330\n                   THEN DO,.                                            POST 340\n                        BI   =BI/FI,.  /*FOR                          */POST 350\n                        IF OPT='L'     /*LAGUERRE POLYNOMIALS L(X)    */POST 360\n                        THEN DO,.                                       POST 370\n                             AI   =1-X0/FI+BI,.                         POST 380\n                             CI   =-X1/FI,.                             POST 390\n                             END,.     /*FOR                          */POST 400\n                        ELSE DO,.      /*LEGENDRE POLYNOMIALS P(X)    */POST 410\n                             AI   =X0+BI*X0,.                           POST 420\n                             CI   =X1+BI*X1,.                           POST 430\n                             END,.                                      POST 440\n                        END,.                                           POST 450\n                   ELSE BI   =BI+BI,.                                   POST 460\n                   END,.                                                POST 470\n              ELSE IF I = 3            /*READJUST CHEBYSHEV POLYNOMIAL*/POST 480\n              THEN H(1) =1,.                                            POST 490\n              U    =0,.                /*INIT. PSEUDO TERM FOR RECURR.*/POST 500\n              K    =1,.                                                 POST 510\n              KP1  =2,.                                                 POST 520\n                   DO J = 1 TO I-1,.   /*APPLY RECURRENCE RELATION    */POST 530\n                   U1   =H(K),.                                         POST 540\n                   H(K),U2=H(KP1),.                                     POST 550\n                   IF OPT NE 'T'       /*IN CHEBYSHEV CASE            */POST 560\n                   THEN U1   =BI*U1,.  /*BYPASS MULTIPLICATION WITH 1 */POST 570\n                   H(KP1),U3=AI*U2-U1+CI*U,.                            POST 580\n                   U    =U2,.                                           POST 590\n                   POL(J)=POL(J)+F*U3,./*UPDATE POLYNOMIAL VECTOR     */POST 600\n                   K    =KP1+1,.                                        POST 610\n                   KP1  =K+1,.                                          POST 620\n                   END,.                                                POST 630\n              H(K) =0,.                /*INIT. PSEUDO TERM FOR RECURR.*/POST 640\n              U3,H(KP1)=U2*CI,.        /*COMPLETE I-TH ORTH.POLYNOMIAL*/POST 650\n              POL(I)=F*U3,.            /*INIT. I-TH TERM OF POLYNOMIAL*/POST 660\n              END,.                    /*COEFFICIENT VECTOR           */POST 670\n         END,.                                                          POST 680\n    END,.                              /*END OF PROCEDURE POST        */POST 690\n (NOUNDERFLOW)..PRTC..                                                  PRTC  10\n /*********************************************************************/PRTC  20\n /*                                                                   */PRTC  30\n /*      CALCULATE ALL ROOTS OF A COMPLEX POLYNOMIAL                  */PRTC  40\n /*                                                                   */PRTC  50\n /*********************************************************************/PRTC  60\n    PROCEDURE(C,N),.                                                    PRTC  70\n    DECLARE                                                             PRTC  80\n         C(*) COMPLEX                                                   PRTC  90\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/PRTC 100\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/PRTC 110\n         (D(N),B(N),Z,DZ,V,W,U,ZO) COMPLEX                              PRTC 120\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/PRTC 130\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/PRTC 140\n         (N,LN,I,K,KD,J,JE)                                             PRTC 150\n         BINARY FIXED,                                                  PRTC 160\n         (I1,IN DEFINED R,ID DEFINED AW,IR,IR1,IR2)                     PRTC 170\n         BINARY FIXED(31),                                              PRTC 180\n         (AV,AVO,TOL,AZ,AW,R,RD,RKM,ARG,ARGV)                           PRTC 190\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/PRTC 200\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/PRTC 210\n         ERROR EXTERNAL CHARACTER(1),.                                  PRTC 220\n    I1   =1091567616,.                                                  PRTC 230\n    LN   =N,.                          /*NUMBER OF MISSING ROOTS      */PRTC 240\n    Z    =0,.                                                           PRTC 250\n    ERROR='0',.                                                         PRTC 260\n ZERO..                                                                 PRTC 270\n    AVO  =1E75,.                       /*FORCE SHIFT OF ORIGIN        */PRTC 280\n    IF LN LE 0                                                          PRTC 290\n    THEN GO TO EXIT,.                  /*ALL ROOTS CALCULATED         */PRTC 300\n    IF C(LN)=0                                                          PRTC 310\n    THEN DO,.                          /*EXTRACT ZERO ROOT            */PRTC 320\n         LN   =LN-1,.                                                   PRTC 330\n         GO TO ZERO,.                                                   PRTC 340\n         END,.                                                          PRTC 350\n    DZ,Z =CONJG(Z),.                                                    PRTC 360\n         DO I = 1 TO LN,.                                               PRTC 370\n         D(I),B(I)=C(I),.              /*MOVE COEFFICIENT VECTOR      */PRTC 380\n         END,.                                                          PRTC 390\n VALUE..                                                                PRTC 400\n    TOL  =0.2,.                        /*INIT. ROUND OFF BOUND        */PRTC 410\n    AZ   =ABS(Z),.                                                      PRTC 420\n    V    =1,.                                                           PRTC 430\n         DO I = 1 TO LN,.              /*COMP. ROUND-OFF BOUND        */PRTC 440\n         W    =D(I),.                  /*AND POLYNOMIAL VALUE         */PRTC 450\n         V,C(I)=W+V*Z,.                                                 PRTC 460\n         TOL  =ABS(W)+AZ*TOL,.                                          PRTC 470\n         END,.                                                          PRTC 480\n    TOL  =(TOL+4*(TOL-ABS(W)))                                          PRTC 490\n         *1.0E-6,.,.                   /*SINGLE PRECISION VERSION  /*S*/PRTC 500\n  /*     *0.25E-15,.                   /*DOUBLE PRECISION VERSION  /*D*/PRTC 510\n    AV   =ABS(V),.                                                      PRTC 520\n    IF AV= 0 THEN GO TO ROOT,.                                          PRTC 530\n    IF AV LE TOL                                                        PRTC 540\n    THEN IF AV GT AVO                                                   PRTC 550\n    THEN DO,.                          /*STORE CALCULATED ROOT        */PRTC 560\n ROOT..                                                                 PRTC 570\n         C(LN)=Z,.                                                      PRTC 580\n         LN   =LN-1,.                                                   PRTC 590\n         GO TO ZERO,.                                                   PRTC 600\n         END,.                                                          PRTC 610\n    ARGV =ATAN(-IMAG(V),-REAL(V)),.                                     PRTC 620\n    IF AV LT AVO                       /*HAS VALUE DECREASED          */PRTC 630\n    THEN DO,.                                                           PRTC 640\n         R    =AV,.                                                     PRTC 650\n         RD,U =1,.                                                      PRTC 660\n         IR   =(IN-I1)/LN,.                                             PRTC 670\n         KD,JE=LN,.                                                     PRTC 680\n SHIFT..                                                                PRTC 690\n         W    =1,.                                                      PRTC 700\n              DO J=1 TO JE,.           /*SHIFT OF ORIGIN              */PRTC 710\n              B(J),W=B(J)+W*DZ,.                                        PRTC 720\n              END,.                                                     PRTC 730\n         IF LN NE JE                                                    PRTC 740\n         THEN DO,.                                                      PRTC 750\n              AW   =ABS(W),.                                            PRTC 760\n              K    =LN-JE,.                                             PRTC 770\n              IR1  =(IN-ID)/K,.                                         PRTC 780\n              IF IR1 LT IR                                              PRTC 790\n              THEN DO,.                                                 PRTC 800\n                   IR   =IR1,.                                          PRTC 810\n                   RD   =AW,.                                           PRTC 820\n                   U    =W,.                                            PRTC 830\n                   KD   =K,.                                            PRTC 840\n                   END,.                                                PRTC 850\n              END,.                                                     PRTC 860\n         JE   =JE-1,.                                                   PRTC 870\n         IF JE GE 1                                                     PRTC 880\n         THEN GO TO SHIFT,.                                             PRTC 890\n         RKM  =1/FLOAT(KD),.                                            PRTC 900\n         R    =(AV/RD)**RKM,.                                           PRTC 910\n         ARG  =(ARGV-ATAN(IMAG(U),REAL(U)))*RKM,.                       PRTC 920\n         ZO   =Z,.                                                      PRTC 930\n         AVO  =AV,.                                                     PRTC 940\n INCR..                                                                 PRTC 950\n         REAL(DZ)=R*COS(ARG),.                                          PRTC 960\n         IMAG(DZ)=R*SIN(ARG),.                                          PRTC 970\n         Z    =ZO+DZ,.                                                  PRTC 980\n         IF ZO NE Z                                                     PRTC 990\n         THEN GO TO VALUE,.                                             PRTC1000\n         IF AV GT TOL                                                   PRTC1010\n         THEN ERROR='C',.                                               PRTC1020\n         GO TO ROOT,.                                                   PRTC1030\n         END,.                                                          PRTC1040\n    ELSE DO,.                          /*MODIFY STEPSIZE TO DECREASE  */PRTC1050\n         R    =R/2,.                   /*POLYNOMIAL VALUE             */PRTC1060\n         IR2  =(IN-I1)/1000000000B,.                                    PRTC1070\n         KD   =LN,.                                                     PRTC1080\n         U    =1,.                                                      PRTC1090\n         IR   =I1/1000000000B,.                                         PRTC1100\n         K    =0,.                                                      PRTC1110\n              DO J = LN-1 TO 1 BY -1,.                                  PRTC1120\n              K    =K+1,.                                               PRTC1130\n              W    =B(J),.                                              PRTC1140\n              AW   =ABS(W),.                                            PRTC1150\n              IR1  =ID/1000000000B-(LN-K)*IR2,.                         PRTC1160\n              IF IR LT IR1                                              PRTC1170\n              THEN DO,.                                                 PRTC1180\n                   KD   =K,.                                            PRTC1190\n                   U    =W,.                                            PRTC1200\n                   IR   =IR1,.                                          PRTC1210\n                   END,.                                                PRTC1220\n              END,.                                                     PRTC1230\n         ARG  =(ARGV-ATAN(IMAG(U),REAL(U)))/FLOAT(KD),.                 PRTC1240\n         GO TO INCR,.                                                   PRTC1250\n         END,.                                                          PRTC1260\n EXIT..                                                                 PRTC1270\n    END,.                              /*END OF PROCEDURE PRTC        */PRTC1280\n QTFG..                                                                 QTFG  10\n /*********************************************************************/QTFG  20\n /*                                                                   */QTFG  30\n /*      INTEGRATION OF A MONOTONICALLY TABULATED FUNCTION BY         */QTFG  40\n /*      TRAPEZOIDAL RULE                                             */QTFG  50\n /*                                                                   */QTFG  60\n /*********************************************************************/QTFG  70\n    PROCEDURE(X,Y,Z,DIM),.                                              QTFG  80\n    DECLARE                                                             QTFG  90\n         (X(*),Y(*),Z(*),SUM,XO,XN,YO,YN,H,HH)                          QTFG 100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QTFG 110\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/QTFG 120\n         (DIM,I) BINARY FIXED,                                          QTFG 130\n         (ERROR EXTERNAL,SW)CHARACTER(1),.                              QTFG 140\n    SW   ='1',.                                                         QTFG 150\n    XO   =X(1),.                                                        QTFG 160\n    GOTO COM,.                                                          QTFG 170\n QTFE..                                                                 QTFG 180\n /*********************************************************************/QTFG 190\n /*                                                                   */QTFG 200\n /*      INTEGRATION OF AN EQUIDISTANTLY TABULATED FUNCTION BY        */QTFG 210\n /*      TRAPEZOIDAL RULE                                             */QTFG 220\n /*                                                                   */QTFG 230\n /*********************************************************************/QTFG 240\n    ENTRY(H,Y,Z,DIM),.                                                  QTFG 250\n    SW   ='0',.                                                         QTFG 260\n    HH   =0.5*H,.                                                       QTFG 270\n COM..                                                                  QTFG 280\n    ERROR='1',.                        /*PRESET ERROR PARAMETER       */QTFG 290\n    IF DIM GT 0                        /*NO ACTION IN CASE DIM LT 1   */QTFG 300\n    THEN DO,.                                                           QTFG 310\n         ERROR='0',.                                                    QTFG 320\n         SUM  =0,.                                                      QTFG 330\n         YO   =-Y(1),.                                                  QTFG 340\n              DO I=1 TO DIM,.                                           QTFG 350\n              IF SW='1'                                                 QTFG 360\n              THEN DO,.                /*CALCULATE LENGTH OF INTERVAL */QTFG 370\n                   XN   =X(I),.                                         QTFG 380\n                   HH   =0.5*(XN-XO),.                                  QTFG 390\n                   XO   =XN,.                                           QTFG 400\n                   END,.                                                QTFG 410\n              YN   =Y(I),.                                              QTFG 420\n              SUM  =SUM+HH*(YN+YO),.   /*ACCUMULATE INTEGRAL VALUE    */QTFG 430\n              Z(I) =SUM,.                                               QTFG 440\n              YO   =YN,.                                                QTFG 450\n              END,.                                                     QTFG 460\n         END,.                                                          QTFG 470\n    END,.                              /*END OF PROCEDURE QTFG        */QTFG 480\n QSF..                                                                  QSF   10\n /*********************************************************************/QSF   20\n /*                                                                   */QSF   30\n /*      INTEGRATION OF AN EQUIDISTANTLY TABULATED FUNCTION BY        */QSF   40\n /*      SIMPSON'S RULE                                               */QSF   50\n /*                                                                   */QSF   60\n /*********************************************************************/QSF   70\n    PROCEDURE(H,Y,Z,DIM),.                                              QSF   80\n    DECLARE                                                             QSF   90\n         (H,Y(*),Z(*),AUX,SUM1,SUM2,HH,F1,F2)                           QSF  100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QSF  110\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/QSF  120\n         ERROR EXTERNAL CHARACTER(1),                                   QSF  130\n         (I,DIM) BINARY FIXED,.                                         QSF  140\n    ERROR='1',.                        /*PRESET ERROR PARAMETER       */QSF  150\n    IF DIM GE 4                        /*NO ACTION IN CASE DIM LT 4   */QSF  160\n    THEN DO,.                                                           QSF  170\n         ERROR='0',.                                                    QSF  180\n         HH   =H/3,.                                                    QSF  190\n         F1   =Y(1),.                                                   QSF  200\n         F2   =Y(2),.                                                   QSF  210\n         SUM1,Z(1)=0,.                                                  QSF  220\n         SUM2,Z(2)=HH*0.125*(9*F1+     /*COMPUTE Z(2) BY COMBINATION  */QSF  230\n              19*F2-5*Y(3)+Y(4)),.     /*OF SIMPSON'S WITH 3/8-RULE   */QSF  240\n              DO I=3 TO DIM,.                                           QSF  250\n              AUX  =F2+F2,.                                             QSF  260\n              AUX  =AUX+AUX+F1,.                                        QSF  270\n              F1   =F2,.                                                QSF  280\n              F2   =Y(I),.                                              QSF  290\n              AUX  =HH*(AUX+F2),.                                       QSF  300\n              SUM1 =SUM1+AUX,.         /*ACCUMULATE INTEGRAL VALUE    */QSF  310\n              AUX,Z(I)=SUM1,.                                           QSF  320\n              SUM1 =SUM2,.                                              QSF  330\n              SUM2 =AUX,.                                               QSF  340\n              END,.                                                     QSF  350\n         END,.                                                          QSF  360\n    END,.                              /*END OF PROCEDURE QSF         */QSF  370\n QHFG..                                                                 QHFG  10\n /*********************************************************************/QHFG  20\n /*                                                                   */QHFG  30\n /*      INTEGRATION OF A MONOTONICALLY TABULATED FUNCTION WITH       */QHFG  40\n /*      FIRST DERIVATIVE BY A HERMITIAN FORMULA OF FIRST ORDER       */QHFG  50\n /*                                                                   */QHFG  60\n /*********************************************************************/QHFG  70\n    PROCEDURE(X,Y,FDY,Z,DIM),.                                          QHFG  80\n    DECLARE                                                             QHFG  90\n         (X(*),Y(*),Z(*),FDY(*),SDY(*),XO,XN,YO,YN,FDYO,FDYN,SDYO,SDYN, QHFG 100\n         SUM1,SUM2,FACT,H,HH,HHH)                                       QHFG 110\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QHFG 120\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/QHFG 130\n         (I,DIM) BINARY FIXED,                                          QHFG 140\n         (ERROR EXTERNAL,SW)CHARACTER(1),.                              QHFG 150\n    SW   ='1',.                                                         QHFG 160\n    GOTO MONO,.                                                         QHFG 170\n QHSG..                                                                 QHFG 180\n /*********************************************************************/QHFG 190\n /*                                                                   */QHFG 200\n /*      INTEGRATION OF A MONOTONICALLY TABULATED FUNCTION WITH       */QHFG 210\n /*      FIRST AND SECOND DERIVATIVES BY A HERMITIAN FORMULA OF       */QHFG 220\n /*      SECOND ORDER                                                 */QHFG 230\n /*                                                                   */QHFG 240\n /*********************************************************************/QHFG 250\n    ENTRY(X,Y,FDY,SDY,Z,DIM),.                                          QHFG 260\n    SW   ='2',.                                                         QHFG 270\n MONO..                                                                 QHFG 280\n    XO   =X(1),.                                                        QHFG 290\n    GOTO MONEQ,.                                                        QHFG 300\n QHFE..                                                                 QHFG 310\n /*********************************************************************/QHFG 320\n /*                                                                   */QHFG 330\n /*      INTEGRATION OF AN EQUIDISTANTLY TABULATED FUNCTION WITH      */QHFG 340\n /*      FIRST DERIVATIVE BY A HERMITIAN FORMULA OF FIRST ORDER       */QHFG 350\n /*                                                                   */QHFG 360\n /*********************************************************************/QHFG 370\n    ENTRY(H,Y,FDY,Z,DIM),.                                              QHFG 380\n    SW   ='3',.                                                         QHFG 390\n    GOTO EQUI,.                                                         QHFG 400\n QHSE..                                                                 QHFG 410\n /*********************************************************************/QHFG 420\n /*                                                                   */QHFG 430\n /*      INTEGRATION OF AN EQUIDISTANTLY TABULATED FUNCTION WITH      */QHFG 440\n /*      FIRST AND SECOND DERIVATIVES BY A HERMITIAN FORMULA OF       */QHFG 450\n /*      SECOND ORDER                                                 */QHFG 460\n /*                                                                   */QHFG 470\n /*********************************************************************/QHFG 480\n    ENTRY(H,Y,FDY,SDY,Z,DIM),.                                          QHFG 490\n    SW   ='4',.                                                         QHFG 500\n EQUI..                                                                 QHFG 510\n    HH   =0.5*H,.                                                       QHFG 520\n MONEQ..                                                                QHFG 530\n    ERROR='1',.                        /*PRESET ERROR PARAMETER       */QHFG 540\n    FACT =3.333333333333333E-01,.                                       QHFG 550\n    IF DIM GT 0                        /*NO ACTION IN CASE DIM LT 1   */QHFG 560\n    THEN DO,.                                                           QHFG 570\n         ERROR='0',.                                                    QHFG 580\n         IF SW NE '1'                                                   QHFG 590\n         THEN DO,.                                                      QHFG 600\n              IF SW NE '3'                                              QHFG 610\n              THEN DO,.                                                 QHFG 620\n                   FACT =0.4,.                                          QHFG 630\n                   SDYO =-SDY(1),.                                      QHFG 640\n                   END,.                                                QHFG 650\n              END,.                                                     QHFG 660\n         YO   =-Y(1),.                                                  QHFG 670\n         FDYO =FDY(1),.                                                 QHFG 680\n         SUM1,SUM2=0,.                                                  QHFG 690\n              DO I=1 TO DIM,.                                           QHFG 700\n              YN   =Y(I),.                                              QHFG 710\n              FDYN =FDY(I),.                                            QHFG 720\n              IF SW NE '3'                                              QHFG 730\n              THEN DO,.                                                 QHFG 740\n                   IF SW NE '4'        /*SW ='1' OR SW ='2'           */QHFG 750\n                   THEN DO,.           /*FOR NONEQUIDISTANT ARGUMENTS */QHFG 760\n                        XN   =X(I),.   /*COMPUTE LENGTH OF INTERVAL   */QHFG 770\n                        HH   =0.5*(XN-XO),.                             QHFG 780\n                        XO   =XN,.                                      QHFG 790\n                        END,.                                           QHFG 800\n                   IF SW NE '1'        /*SW ='2' OR SW ='4'           */QHFG 810\n                   THEN DO,.                                            QHFG 820\n                        SDYN =SDY(I),.                                  QHFG 830\n                        SUM2 =HH*HH*   /*MODIFY TO SECOND ORDER       */QHFG 840\n                             (SDYO+    /*FORMULA                      */QHFG 850\n                             SDYN)/15,.                                 QHFG 860\n                        SDYO =SDYN,.                                    QHFG 870\n                        END,.                                           QHFG 880\n                   END,.                                                QHFG 890\n              HHH  =HH*FACT,.                                           QHFG 900\n              SUM1 =SUM1+HH*(YO+YN+    /*ACCUMULATE INTEGRAL VALUE    */QHFG 910\n                   HHH*(FDYO-FDYN)+SUM2),.                              QHFG 920\n              Z(I) =SUM1,.                                              QHFG 930\n              YO   =YN,.                                                QHFG 940\n              FDYO =FDYN,.                                              QHFG 950\n              END,.                                                     QHFG 960\n         END,.                                                          QHFG 970\n    END,.                              /*END OF PROCEDURE QHFG        */QHFG 980\n QATR..                                                                 QATR  10\n /*********************************************************************/QATR  20\n /*                                                                   */QATR  30\n /*      INTEGRATION OF A GIVEN FUNCTION BY THE TRAPEZOIDAL RULE      */QATR  40\n /*      TOGETHER WITH ROMBERG'S EXTRAPOLATION METHOD                 */QATR  50\n /*                                                                   */QATR  60\n /*********************************************************************/QATR  70\n    PROCEDURE (XL,XU,EPS,DIM,FCT,Y),.                                   QATR  80\n    DECLARE                                                             QATR  90\n         (XL,XU,EPS,Y,AUX(DIM),H,HH,E,YY,                               QATR 100\n         DELT1,DELT2,P,HD,X,SM,Q,AN,AO)                                 QATR 110\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QATR 120\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/QATR 130\n         ERROR EXTERNAL CHARACTER(1),                                   QATR 140\n         (DIM,JJ,I,J) BINARY FIXED,                                     QATR 150\n         FCT ENTRY                                                      QATR 160\n         (BINARY FLOAT)                /*SINGLE PRECISION VERSION  /*S*/QATR 170\n  /*     (BINARY FLOAT(53))            /*DOUBLE PRECISION VERSION  /*D*/QATR 180\n         RETURNS(BINARY FLOAT),.       /*SINGLE PRECISION VERSION  /*S*/QATR 190\n  /*     RETURNS(BINARY FLOAT(53)),.   /*DOUBLE PRECISION VERSION  /*D*/QATR 200\n    AN,YY,AUX(1)=0.5*(FCT(XL)+FCT(XU)),.                                QATR 210\n    H    =XU-XL,.                                                       QATR 220\n    ERROR='0',.                        /*PRESET ERROR PARAMETER       */QATR 230\n    IF DIM GT 1                                                         QATR 240\n    THEN DO,.                                                           QATR 250\n         IF H =0                                                        QATR 260\n         THEN GOTO YEND,.                                               QATR 270\n         HH   =H,.                     /*NORMAL CASE,DIM GREATER THAN */QATR 280\n         E    =ABS(EPS/H),.            /*1 AND XL NOT EQUAL TO XU     */QATR 290\n         DELT2=0,.                                                      QATR 300\n         P    =1,.                                                      QATR 310\n         JJ   =1,.                                                      QATR 320\n              DO I=2 TO DIM,.                                           QATR 330\n              DELT1=DELT2,.                                             QATR 340\n              HD   =HH,.                                                QATR 350\n              HH   =0.5*HH,.                                            QATR 360\n              P    =0.5*P,.                                             QATR 370\n              X    =XL+HH,.                                             QATR 380\n              SM   =0,.                                                 QATR 390\n                   DO J=1 TO JJ,.      /*REFINE STEPSIZE IN           */QATR 400\n                   SM   =SM+FCT(X),.   /*TRAPEZOIDAL RULE             */QATR 410\n                   X    =X+HD,.                                         QATR 420\n                   END,.                                                QATR 430\n              AN,AO,AUX(I)=0.5*AN+P*SM,.                                QATR 440\n              Q    =1,.                /*APPLY ROMBERG'S EXTRAPOLATION*/QATR 450\n                   DO J=1 TO I-1,.     /*METHOD                       */QATR 460\n                   Q    =4*Q,.                                          QATR 470\n                   AO,AUX(I-J)=AO+(AO-AUX(I-J))/(Q-1),.                 QATR 480\n                   END,.                                                QATR 490\n              DELT2=ABS(YY-AO),.       /*TEST ACCURACY                */QATR 500\n              IF I GE 5                                                 QATR 510\n              THEN DO,.                                                 QATR 520\n                   IF DELT2 GE DELT1                                    QATR 530\n                   THEN DO,.           /*TERMINATE SINCE LAST STEP    */QATR 540\n                        IF DELT1 GT E  /*DID NOT IMPROVE              */QATR 550\n                        THEN ERROR='1',.                                QATR 560\n                        GOTO YEND,.                                     QATR 570\n                        END,.                                           QATR 580\n                   YY   =AO,.                                           QATR 590\n                   IF DELT2 LE E                                        QATR 600\n                   THEN GOTO YEND,.                                     QATR 610\n                   END,.                                                QATR 620\n              ELSE YY   =AO,.                                           QATR 630\n              JJ   =JJ+JJ,.                                             QATR 640\n              END,.                                                     QATR 650\n         END,.                                                          QATR 660\n    ERROR='2',.                                                         QATR 670\n YEND..                                                                 QATR 680\n    Y    =H*YY,.                                                        QATR 690\n    END,.                              /*END OF PROCEDURE QATR        */QATR 700\n QG2..                                                                  QG2   10\n /*********************************************************************/QG2   20\n /*                                                                   */QG2   30\n /*      INTEGRATION OF GIVEN FUNCTION BY 2-POINT GAUSSIAN            */QG2   40\n /*      QUADRATURE FORMULA                                           */QG2   50\n /*                                                                   */QG2   60\n /*********************************************************************/QG2   70\n    PROCEDURE(XL,XU,FCT,Y),.                                            QG2   80\n    DECLARE                                                             QG2   90\n         (XL,XU,Y,A,B)                                                  QG2  100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QG2  110\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QG2  120\n         FCT ENTRY RETURNS                                              QG2  130\n         (BINARY FLOAT),.              /*SINGLE PRECISION VERSION  /*S*/QG2  140\n  /*     (BINARY FLOAT (53)),.         /*DOUBLE PRECISION VERSION  /*D*/QG2  150\n    A    =0.5*(XU+XL),.                                                 QG2  160\n    B    =XU-XL,.                                                       QG2  170\n    Y    =2.886751345948128E-01*B,.                                     QG2  180\n    Y    =0.5*B*(FCT(A+Y)+FCT(A-Y)),.                                   QG2  190\n    END,.                              /*END OF PROCEDURE QG2         */QG2  200\n QG4..                                                                  QG4   10\n /*********************************************************************/QG4   20\n /*                                                                   */QG4   30\n /*      INTEGRATION OF A GIVEN FUNCTION BY 4-POINT GAUSSIAN          */QG4   40\n /*      QUADRATURE FORMULA                                           */QG4   50\n /*                                                                   */QG4   60\n /*********************************************************************/QG4   70\n    PROCEDURE (XL,XU,FCT,Y),.                                           QG4   80\n    DECLARE                                                             QG4   90\n         (XL,XU,Y,A,B,C)                                                QG4  100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QG4  110\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QG4  120\n         FCT ENTRY RETURNS                                              QG4  130\n         (BINARY FLOAT),.              /*SINGLE PRECISION VERSION  /*S*/QG4  140\n  /*     (BINARY FLOAT (53)),.         /*DOUBLE PRECISION VERSION  /*D*/QG4  150\n    A    =0.5*(XU+XL),.                                                 QG4  160\n    B    =XU-XL,.                                                       QG4  170\n    C    =4.305681557970263E-01*B,.                                     QG4  180\n    Y    =1.739274225687269E-01*(FCT(A+C)+FCT(A-C)),.                   QG4  190\n    C    =1.699905217924281E-01*B,.                                     QG4  200\n    Y    =B*(Y+3.260725774312731E-01*(FCT(A+C)+FCT(A-C))),.             QG4  210\n    END,.                              /*END OF PROCEDURE QG4         */QG4  220\n QG8..                                                                  QG8   10\n /*********************************************************************/QG8   20\n /*                                                                   */QG8   30\n /*      INTEGRATION OF A GIVEN FUNCTION BY 8-POINT GAUSSIAN          */QG8   40\n /*      QUADRATURE FORMULA                                           */QG8   50\n /*                                                                   */QG8   60\n /*********************************************************************/QG8   70\n    PROCEDURE(XL,XU,FCT,Y),.                                            QG8   80\n    DECLARE                                                             QG8   90\n         (XL,XU,Y,A,B,C)                                                QG8  100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QG8  110\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QG8  120\n         FCT ENTRY RETURNS                                              QG8  130\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QG8  140\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QG8  150\n         LY BINARY FLOAT (53),                                          QG8  160\n         X( 8) BINARY FLOAT (53) STATIC INITIAL                         QG8  170\n         (4.801449282487681E-01,     5.061426814518813E-02,             QG8  180\n         3.983332387068134E-01,     1.111905172266872E-01,              QG8  190\n         2.627662049581645E-01,     1.568533229389436E-01,              QG8  200\n         9.171732124782490E-02,     1.813418916891810E-01),.            QG8  210\n    A    =0.5*(XU+XL),.                                                 QG8  220\n    B    =XU-XL,.                                                       QG8  230\n    LY   =0,.                                                           QG8  240\n         DO I=1 TO  7 BY 2,.                                            QG8  250\n         C    =X(I)*B,.                                                 QG8  260\n         LY   =LY+X(I+1)*(FCT(A+C)+FCT(A-C)),.                          QG8  270\n         END,.                                                          QG8  280\n    Y    =LY*B,.                                                        QG8  290\n    END,.                              /*END OF PROCEDURE QG8         */QG8  300\n QG16..                                                                 QG16  10\n /*********************************************************************/QG16  20\n /*                                                                   */QG16  30\n /*      INTEGRATION OF A GIVEN FUNCTION BY 16-POINT GAUSSIAN         */QG16  40\n /*      QUADRATURE FORMULA                                           */QG16  50\n /*                                                                   */QG16  60\n /*********************************************************************/QG16  70\n    PROCEDURE(XL,XU,FCT,Y),.                                            QG16  80\n    DECLARE                                                             QG16  90\n         (XL,XU,Y,A,B,C)                                                QG16 100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QG16 110\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QG16 120\n         FCT ENTRY RETURNS                                              QG16 130\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QG16 140\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QG16 150\n         LY BINARY FLOAT (53),                                          QG16 160\n         X(16) BINARY FLOAT (53) STATIC INITIAL                         QG16 170\n         (4.947004674958250E-01,     1.357622970587705E-02,             QG16 180\n         4.722875115366163E-01,     3.112676196932395E-02,              QG16 190\n         4.328156011939159E-01,     4.757925584124639E-02,              QG16 200\n         3.777022041775015E-01,     6.231448562776694E-02,              QG16 210\n         3.089381222013219E-01,     7.479799440828837E-02,              QG16 220\n         2.290083888286137E-01,     8.457825969750127E-02,              QG16 230\n         1.408017753896295E-01,     9.130170752246179E-02,              QG16 240\n         4.750625491881872E-02,     9.472530522753425E-02),.            QG16 250\n    A    =0.5*(XU+XL),.                                                 QG16 260\n    B    =XU-XL,.                                                       QG16 270\n    LY   =0,.                                                           QG16 280\n         DO I=1 TO 15 BY 2,.                                            QG16 290\n         C    =X(I)*B,.                                                 QG16 300\n         LY   =LY+X(I+1)*(FCT(A+C)+FCT(A-C)),.                          QG16 310\n         END,.                                                          QG16 320\n    Y    =LY*B,.                                                        QG16 330\n    END,.                              /*END OF PROCEDURE QG16        */QG16 340\n QG24..                                                                 QG24  10\n /*********************************************************************/QG24  20\n /*                                                                   */QG24  30\n /*      INTEGRATION OF A GIVEN FUNCTION BY 24-POINT GAUSSIAN         */QG24  40\n /*      QUADRATURE FORMULA                                           */QG24  50\n /*                                                                   */QG24  60\n /*********************************************************************/QG24  70\n    PROCEDURE(XL,XU,FCT,Y),.                                            QG24  80\n    DECLARE                                                             QG24  90\n         (XL,XU,Y,A,B,C)                                                QG24 100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QG24 110\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QG24 120\n         FCT ENTRY RETURNS                                              QG24 130\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QG24 140\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QG24 150\n         LY BINARY FLOAT (53),                                          QG24 160\n         X(24) BINARY FLOAT (53) STATIC INITIAL                         QG24 170\n         (4.975936099985107E-01,    6.170614899993600E-03,              QG24 180\n         4.873642779856547E-01,    1.426569431446683E-02,               QG24 190\n         4.691372760013664E-01,    2.213871940870990E-02,               QG24 200\n         4.432077635022005E-01,    2.964929245771839E-02,               QG24 210\n         4.100009929869515E-01,    3.667324070554015E-02,               QG24 220\n         3.700620957892772E-01,    4.309508076597664E-02,               QG24 230\n         3.240468259684878E-01,    4.880932605205694E-02,               QG24 240\n         2.727107356944198E-01,    5.372213505798282E-02,               QG24 250\n         2.168967538130226E-01,    5.775283402686280E-02,               QG24 260\n         1.575213398480817E-01,    6.083523646390170E-02,               QG24 270\n         9.555943373680815E-02,    6.291872817341415E-02,               QG24 280\n         3.202844643130281E-02,    6.396909767337608E-02),.             QG24 290\n    A    =0.5*(XU+XL),.                                                 QG24 300\n    B    =XU-XL,.                                                       QG24 310\n    LY   =0,.                                                           QG24 320\n         DO I=1 TO 23 BY 2,.                                            QG24 330\n         C    =X(I)*B,.                                                 QG24 340\n         LY   =LY+X(I+1)*(FCT(A+C)+FCT(A-C)),.                          QG24 350\n         END,.                                                          QG24 360\n    Y    =LY*B,.                                                        QG24 370\n    END,.                              /*END OF PROCEDURE QG24        */QG24 380\n QG32..                                                                 QG32  10\n /*********************************************************************/QG32  20\n /*                                                                   */QG32  30\n /*      INTEGRATION OF A GIVEN FUNCTION BY 32-POINT GAUSSIAN         */QG32  40\n /*      QUADRATURE FORMULA                                           */QG32  50\n /*                                                                   */QG32  60\n /*********************************************************************/QG32  70\n    PROCEDURE(XL,XU,FCT,Y),.                                            QG32  80\n    DECLARE                                                             QG32  90\n         (XL,XU,Y,A,B,C)                                                QG32 100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QG32 110\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QG32 120\n         FCT ENTRY RETURNS                                              QG32 130\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QG32 140\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QG32 150\n         LY BINARY FLOAT (53),                                          QG32 160\n         X(32) BINARY FLOAT (53) STATIC INITIAL                         QG32 170\n         (4.986319309247408E-01,    3.509305004735048E-03,              QG32 180\n         4.928057557726342E-01,    8.137197365452835E-03,               QG32 190\n         4.823811277937532E-01,    1.269603265463103E-02,               QG32 200\n         4.674530379688698E-01,    1.713693145651072E-02,               QG32 210\n         4.481605778830261E-01,    2.141794901111334E-02,               QG32 220\n         4.246838068662850E-01,    2.549902963118809E-02,               QG32 230\n         3.972418979839712E-01,    2.934204673926777E-02,               QG32 240\n         3.660910593701448E-01,    3.291111138818092E-02,               QG32 250\n         3.315221334651076E-01,    3.617289705442425E-02,               QG32 260\n         2.938578786203812E-01,    3.909694789353515E-02,               QG32 270\n         2.534499544661147E-01,    4.165596211347338E-02,               QG32 280\n         2.106756380653177E-01,    4.382604650220191E-02,               QG32 290\n         1.659343011410638E-01,    4.558693934788194E-02,               QG32 300\n         1.196436811260685E-01,    4.692219954040228E-02,               QG32 310\n         7.223598079139825E-02,    4.781936003963743E-02,               QG32 320\n         2.415383284386916E-02,    4.827004425736390E-02),.             QG32 330\n    A    =0.5*(XU+XL),.                                                 QG32 340\n    B    =XU-XL,.                                                       QG32 350\n    LY   =0,.                                                           QG32 360\n         DO I=1 TO 31 BY 2,.                                            QG32 370\n         C    =X(I)*B,.                                                 QG32 380\n         LY   =LY+X(I+1)*(FCT(A+C)+FCT(A-C)),.                          QG32 390\n         END,.                                                          QG32 400\n    Y    =LY*B,.                                                        QG32 410\n    END,.                              /*END OF PROCEDURE QG32        */QG32 420\n QG48..                                                                 QG48  10\n /*********************************************************************/QG48  20\n /*                                                                   */QG48  30\n /*      INTEGRATION OF A GIVEN FUNCTION BY 48-POINT GAUSSIAN         */QG48  40\n /*      QUADRATURE FORMULA                                           */QG48  50\n /*                                                                   */QG48  60\n /*********************************************************************/QG48  70\n    PROCEDURE(XL,XU,FCT,Y),.                                            QG48  80\n    DECLARE                                                             QG48  90\n         (XL,XU,Y,A,B,C)                                                QG48 100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QG48 110\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QG48 120\n         FCT ENTRY RETURNS                                              QG48 130\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QG48 140\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QG48 150\n         LY BINARY FLOAT (53),.                                         QG48 160\n    DECLARE                                                             QG48 170\n         X(24) BINARY FLOAT(53) STATIC INITIAL (                        QG48 180\n         4.993855036262131E-01,   4.967650861331754E-01,                QG48 190\n         4.920622918614134E-01,   4.852957962731236E-01,                QG48 200\n         4.764938515802154E-01,   4.656933453532772E-01,                QG48 210\n         4.529395683577848E-01,   4.382860101371239E-01,                QG48 220\n         4.217941308121968E-01,   4.035331020147213E-01,                QG48 230\n         3.835795162578702E-01,   3.620170654619073E-01,                QG48 240\n         3.389361898163320E-01,   3.144336983882568E-01,                QG48 250\n         2.886123630419864E-01,   2.615804873611165E-01,                QG48 260\n         2.334514523754792E-01,   2.043432409953584E-01,                QG48 270\n         1.743779431460804E-01,   1.436812436777278E-01,                QG48 280\n         1.123818951973445E-01,   8.061117803444586E-02,                QG48 290\n         4.850234960473135E-02,   1.619008548143468E-02),.              QG48 300\n    DECLARE                                                             QG48 310\n         W(24) BINARY FLOAT(53) STATIC INITIAL (                        QG48 320\n         1.576673026152919E-03,   3.663776950638131E-03,                QG48 330\n         5.738617289617270E-03,   7.789657861471924E-03,                QG48 340\n         9.808080228677764E-03,   1.178538041966219E-02,                QG48 350\n         1.371325485417847E-02,   1.558361391639904E-02,                QG48 360\n         1.738861128238522E-02,   1.912067553291535E-02,                QG48 370\n         2.077254147173237E-02,   2.233728042834714E-02,                QG48 380\n         2.380832924624524E-02,   2.517951777692724E-02,                QG48 390\n         2.644509474259683E-02,   2.759975184999208E-02,                QG48 400\n         2.863864605020161E-02,   2.955741984919782E-02,                QG48 410\n         3.035221958294694E-02,   3.101971157994633E-02,                QG48 420\n         3.155709614312701E-02,   3.196211929232409E-02,                QG48 430\n         3.223308221797504E-02,   3.236884840634196E-02),.              QG48 440\n    A    =0.5*(XU+XL),.                                                 QG48 450\n    B    =XU-XL,.                                                       QG48 460\n    LY   =0,.                                                           QG48 470\n         DO I=1 TO 24,.                                                 QG48 480\n         C    =X(I)*B,.                                                 QG48 490\n         LY   =LY+W(I)*(FCT(A+C)+FCT(A-C)),.                            QG48 500\n         END,.                                                          QG48 510\n    Y    =LY*B,.                                                        QG48 520\n    END,.                              /*END OF PROCEDURE QG48        */QG48 530\n QL2..                                                                  QL2   10\n /*********************************************************************/QL2   20\n /*                                                                   */QL2   30\n /*      INTEGRATION OF A GIVEN FUNCTION BY 2-POINT GAUSSIAN-LAGUERRE */QL2   40\n /*      QUADRATURE FORMULA                                           */QL2   50\n /*                                                                   */QL2   60\n /*********************************************************************/QL2   70\n    PROCEDURE (FCT,Y),.                                                 QL2   80\n    DECLARE                                                             QL2   90\n         FCT ENTRY RETURNS                                              QL2  100\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QL2  110\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QL2  120\n         (X,Y)                                                          QL2  130\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/QL2  140\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/QL2  150\n    X    =3.414213562373095E+00,.                                       QL2  160\n    Y    =1.464466094067262E-01*FCT(X),.                                QL2  170\n    X    =5.857864376269050E-01,.                                       QL2  180\n    Y    =Y+8.535533905932738E-01*FCT(X),.                              QL2  190\n    END,.                              /*END OF PROCEDURE QL2         */QL2  200\n QL4..                                                                  QL4   10\n /*********************************************************************/QL4   20\n /*                                                                   */QL4   30\n /*      INTEGRATION OF A GIVEN FUNCTION BY 4-POINT GAUSSIAN-LAGUERRE */QL4   40\n /*      QUADRATURE FORMULA                                           */QL4   50\n /*                                                                   */QL4   60\n /*********************************************************************/QL4   70\n    PROCEDURE (FCT,Y),.                                                 QL4   80\n    DECLARE                                                             QL4   90\n         FCT ENTRY RETURNS                                              QL4  100\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QL4  110\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QL4  120\n         (X,Y)                                                          QL4  130\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/QL4  140\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/QL4  150\n    X    =9.395070912301133E+00,.                                       QL4  160\n    Y    =5.392947055613275E-04*FCT(X),.                                QL4  170\n    X    =4.536620296921128E+00,.                                       QL4  180\n    Y    =Y+3.888790851500538E-02*FCT(X),.                              QL4  190\n    X    =1.745761101158347E+00,.                                       QL4  200\n    Y    =Y+3.574186924377997E-01*FCT(X),.                              QL4  210\n    X    =3.225476896193923E-01,.                                       QL4  220\n    Y    =Y+6.031541043416336E-01*FCT(X),.                              QL4  230\n    END,.                              /*END OF PROCEDURE QL4         */QL4  240\n QL8..                                                                  QL8   10\n /*********************************************************************/QL8   20\n /*                                                                   */QL8   30\n /*      INTEGRATION OF A GIVEN FUNCTION BY 8-POINT GAUSSIAN-LAGUERRE */QL8   40\n /*      QUADRATURE FORMULA                                           */QL8   50\n /*                                                                   */QL8   60\n /*********************************************************************/QL8   70\n    PROCEDURE (FCT,Y),.                                                 QL8   80\n    DECLARE                                                             QL8   90\n         FCT ENTRY RETURNS                                              QL8  100\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QL8  110\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QL8  120\n         (XX,Y)                                                         QL8  130\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QL8  140\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QL8  150\n         I BINARY FIXED,                                                QL8  160\n         LY BINARY FLOAT (53),                                          QL8  170\n         X(16) BINARY FLOAT (53) STATIC INITIAL                         QL8  180\n         (2.286313173688926E+01,     1.048001174871510E-09,             QL8  190\n         1.574067864127800E+01,     8.485746716272532E-07,              QL8  200\n         1.075851601018100E+01,     9.076508773358213E-05,              QL8  210\n         7.045905402393466E+00,     2.794536235225673E-03,              QL8  220\n         4.266700170287659E+00,     3.334349226121565E-02,              QL8  230\n         2.251086629866131E+00,     1.757949866371718E-01,              QL8  240\n         9.037017767993799E-01,     4.187867808143430E-01,              QL8  250\n         1.702796323051010E-01,     3.691885893416375E-01),.            QL8  260\n    LY   =0,.                                                           QL8  270\n         DO I=1 TO 15 BY 2,.                                            QL8  280\n         XX   =X(I),.                                                   QL8  290\n         LY   =LY+X(I+1)*FCT(XX),.                                      QL8  300\n         END,.                                                          QL8  310\n    Y    =LY,.                                                          QL8  320\n    END,.                              /*END OF PROCEDURE QL8         */QL8  330\n QL12..                                                                 QL12  10\n /*********************************************************************/QL12  20\n /*                                                                   */QL12  30\n /*      INTEGRATION OF A GIVEN FUNCTION BY 12-POINT GAUSSIAN-LAGUERRE*/QL12  40\n /*      QUADRATURE FORMULA                                           */QL12  50\n /*                                                                   */QL12  60\n /*********************************************************************/QL12  70\n    PROCEDURE (FCT,Y),.                                                 QL12  80\n    DECLARE                                                             QL12  90\n         (XX,Y)                                                         QL12 100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QL12 110\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QL12 120\n         FCT ENTRY RETURNS                                              QL12 130\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QL12 140\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QL12 150\n         I BINARY FIXED,                                                QL12 160\n         LY BINARY FLOAT (53),                                          QL12 170\n         X(24) BINARY FLOAT (53) STATIC INITIAL                         QL12 180\n         (3.709912104446692E+01,    8.148077467426242E-16,              QL12 190\n         2.848796725098400E+01,    3.061601635035021E-12,               QL12 200\n         2.215109037939701E+01,    1.342391030515004E-09,               QL12 210\n         1.711685518746226E+01,    1.668493876540910E-07,               QL12 220\n         1.300605499330635E+01,    8.365055856819799E-06,               QL12 230\n         9.621316842456867E+00,    2.032315926629994E-04,               QL12 240\n         6.844525453115177E+00,    2.663973541865316E-03,               QL12 250\n         4.599227639418348E+00,    2.010238115463410E-02,               QL12 260\n         2.833751337743507E+00,    9.044922221168093E-02,               QL12 270\n         1.512610269776419E+00,    2.440820113198776E-01,               QL12 280\n         6.117574845151307E-01,    3.777592758731380E-01,               QL12 290\n         1.157221173580207E-01,    2.647313710554432E-01),.             QL12 300\n    LY   =0,.                                                           QL12 310\n         DO I=1 TO 23 BY 2,.                                            QL12 320\n         XX   =X(I),.                                                   QL12 330\n         LY   =LY+X(I+1)*FCT(XX),.                                      QL12 340\n         END,.                                                          QL12 350\n    Y    =LY,.                                                          QL12 360\n    END,.                              /*END OF PROCEDURE QL12        */QL12 370\n QL16..                                                                 QL16  10\n /*********************************************************************/QL16  20\n /*                                                                   */QL16  30\n /*      INTEGRATION OF A GIVEN FUNCTION BY 16-POINT GAUSSIAN-LAGUERRE*/QL16  40\n /*      QUADRATURE FORMULA                                           */QL16  50\n /*                                                                   */QL16  60\n /*********************************************************************/QL16  70\n    PROCEDURE (FCT,Y),.                                                 QL16  80\n    DECLARE                                                             QL16  90\n         FCT ENTRY RETURNS                                              QL16 100\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QL16 110\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QL16 120\n         (XX,Y)                                                         QL16 130\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QL16 140\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QL16 150\n         I BINARY FIXED,                                                QL16 160\n         LY BINARY FLOAT (53),                                          QL16 170\n         X(32) BINARY FLOAT (53) STATIC INITIAL                         QL16 180\n         (5.170116033954332E+01,     4.161462370372855E-22,             QL16 190\n         4.194045264768833E+01,     5.050473700035513E-18,              QL16 200\n         3.458339870228663E+01,     6.297967002517868E-15,              QL16 210\n         2.857872974288214E+01,     2.127079033224103E-12,              QL16 220\n         2.351590569399191E+01,     2.862350242973882E-10,              QL16 230\n         1.918015685675313E+01,     1.881024841079673E-08,              QL16 240\n         1.544152736878162E+01,     6.828319330871200E-07,              QL16 250\n         1.221422336886616E+01,     1.484458687398130E-05,              QL16 260\n         9.438314336391939E+00,     2.042719153082785E-04,              QL16 270\n         7.070338535048234E+00,     1.849070943526311E-03,              QL16 280\n         5.078018614549768E+00,     1.129990008033945E-02,              QL16 290\n         3.437086633893207E+00,     4.732892869412522E-02,              QL16 300\n         2.129283645098381E+00,     1.362969342963775E-01,              QL16 310\n         1.141057774831227E+00,     2.657957776442142E-01,              QL16 320\n         4.626963289150808E-01,     3.310578549508842E-01,              QL16 330\n         8.764941047892784E-02,     2.061517149578010E-01),.            QL16 340\n    LY   =0,.                                                           QL16 350\n         DO I=1 TO 31 BY 2,.                                            QL16 360\n         XX   =X(I),.                                                   QL16 370\n         LY   =LY+X(I+1)*FCT(XX),.                                      QL16 380\n         END,.                                                          QL16 390\n    Y    =LY,.                                                          QL16 400\n    END,.                              /*END OF PROCEDURE QL16        */QL16 410\n QL24..                                                                 QL24  10\n /*********************************************************************/QL24  20\n /*                                                                   */QL24  30\n /*      INTEGRATION OF A GIVEN FUNCTION BY 24-POINT GAUSSIAN-LAGUERRE*/QL24  40\n /*      QUADRATURE FORMULA                                           */QL24  50\n /*                                                                   */QL24  60\n /*********************************************************************/QL24  70\n    PROCEDURE (FCT,Y),.                                                 QL24  80\n    DECLARE                                                             QL24  90\n         (XX,Y)                                                         QL24 100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QL24 110\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QL24 120\n         FCT ENTRY RETURNS                                              QL24 130\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QL24 140\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QL24 150\n         I BINARY FIXED,                                                QL24 160\n         LY BINARY FLOAT (53),.                                         QL24 170\n    DECLARE                                                             QL24 180\n         X(24) BINARY FLOAT(53) STATIC INITIAL (                        QL24 190\n         8.149827923394889E+01,   6.996224003510503E+01,                QL24 200\n         6.105853144721876E+01,   5.360857454469507E+01,                QL24 210\n         4.715310644515632E+01,   4.145172048487077E+01,                QL24 220\n         3.635840580165162E+01,   3.177604135237472E+01,                QL24 230\n         2.763593717433272E+01,   2.388732984816973E+01,                QL24 240\n         2.049146008261642E+01,   1.741799264650898E+01,                QL24 250\n         1.464273228959667E+01,   1.214610271172977E+01,                QL24 260\n         9.912098015077706E+00,   7.927539247172152E+00,                QL24 270\n         6.181535118736765E+00,   4.665083703467171E+00,                QL24 280\n         3.370774264208998E+00,   2.292562058632190E+00,                QL24 290\n         1.425597590803613E+00,   7.660969055459366E-01,                QL24 300\n         3.112391461984837E-01,   5.901985218150798E-02),.              QL24 310\n    DECLARE                                                             QL24 320\n         W(24) BINARY FLOAT(53) STATIC INITIAL (                        QL24 330\n         5.575345788328357E-35,   4.088301593680658E-30,                QL24 340\n         2.451818845878403E-26,   3.605765864552959E-23,                QL24 350\n         2.010517464555503E-20,   5.350188813010038E-18,                QL24 360\n         7.819800382459448E-16,   6.894181052958086E-14,                QL24 370\n         3.917736515058451E-12,   1.507008226292585E-10,                QL24 380\n         4.072858987550000E-09,   7.960812959133630E-08,                QL24 390\n         1.151315812737280E-06,   1.254472197799333E-05,                QL24 400\n         1.044612146592752E-04,   6.721625640935479E-04,                QL24 410\n         3.369349058478304E-03,   1.322601940512016E-02,                QL24 420\n         4.073247815140865E-02,   9.816627262991889E-02,                QL24 430\n         1.833226889777780E-01,   2.588067072728698E-01,                QL24 440\n         2.587741075174239E-01,   1.428119733347819E-01),.              QL24 450\n    LY   =0,.                                                           QL24 460\n         DO I=1 TO 24,.                                                 QL24 470\n         XX   =X(I),.                                                   QL24 480\n         LY   =LY+W(I)*FCT(XX),.                                        QL24 490\n         END,.                                                          QL24 500\n    Y    =LY,.                                                          QL24 510\n    END,.                              /*END OF PROCEDURE QL24        */QL24 520\n QH2..                                                                  QH2   10\n /*********************************************************************/QH2   20\n /*                                                                   */QH2   30\n /*      INTEGRATION OF A GIVEN FUNCTION BY 2-POINT GAUSSIAN-HERMITE  */QH2   40\n /*      QUADRATURE FORMULA                                           */QH2   50\n /*                                                                   */QH2   60\n /*********************************************************************/QH2   70\n    PROCEDURE (FCT,Y),.                                                 QH2   80\n    DECLARE                                                             QH2   90\n         FCT ENTRY RETURNS                                              QH2  100\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QH2  110\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QH2  120\n         (X,Y,Z)                                                        QH2  130\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/QH2  140\n  /*     BINARY FLOAT(53),.            /*DOUBLE PRECISION VERSION  /*D*/QH2  150\n    X    =7.071067811865475E-01,.                                       QH2  160\n    Z    =-X,.                                                          QH2  170\n    Y    =8.862269254527580E-01*(FCT(X)+FCT(Z)),.                       QH2  180\n    END,.                              /*END OF PROCEDURE QH2         */QH2  190\n QH4..                                                                  QH4   10\n /*********************************************************************/QH4   20\n /*                                                                   */QH4   30\n /*      INTEGRATION OF A GIVEN FUNCTION BY 4-POINT GAUSSIAN-HERMITE  */QH4   40\n /*      QUADRATURE FORMULA                                           */QH4   50\n /*                                                                   */QH4   60\n /*********************************************************************/QH4   70\n    PROCEDURE (FCT,Y),.                                                 QH4   80\n    DECLARE                                                             QH4   90\n         FCT ENTRY RETURNS                                              QH4  100\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QH4  110\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QH4  120\n         W BINARY FLOAT(53),                                            QH4  130\n         (X,Y,Z)                                                        QH4  140\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/QH4  150\n  /*     BINARY FLOAT(53),.            /*DOUBLE PRECISION VERSION  /*D*/QH4  160\n    X    =1.650680123885785E+00,.                                       QH4  170\n    Z    =-X,.                                                          QH4  180\n    W    =8.131283544724518E-02*(FCT(X)+FCT(Z)),.                       QH4  190\n    X    =5.246476232752903E-01,.                                       QH4  200\n    Z    =-X,.                                                          QH4  210\n    Y    =W+8.049140900055128E-01*(FCT(X)+FCT(Z)),.                     QH4  220\n    END,.                              /*END OF PROCEDURE QH4         */QH4  230\n QH8..                                                                  QH8   10\n /*********************************************************************/QH8   20\n /*                                                                   */QH8   30\n /*      INTEGRATION OF A GIVEN FUNCTION BY 8-POINT GAUSSIAN-HERMITE  */QH8   40\n /*      QUADRATURE FORMULA                                           */QH8   50\n /*                                                                   */QH8   60\n /*********************************************************************/QH8   70\n    PROCEDURE (FCT,Y),.                                                 QH8   80\n    DECLARE                                                             QH8   90\n         FCT ENTRY RETURNS                                              QH8  100\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QH8  110\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QH8  120\n         (XX,Y)                                                         QH8  130\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QH8  140\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QH8  150\n         I BINARY FIXED,                                                QH8  160\n         LY BINARY FLOAT (53),                                          QH8  170\n         X( 8) BINARY FLOAT (53) STATIC INITIAL(                        QH8  180\n         2.930637420257244E+00,     1.996040722113676E-04,              QH8  190\n         1.981656756695843E+00,     1.707798300741348E-02,              QH8  200\n         1.157193712446780E+00,     2.078023258148919E-01,              QH8  210\n         3.811869902073221E-01,     6.611470125582413E-01),.            QH8  220\n    LY   =0,.                                                           QH8  230\n         DO I=1 TO  7 BY 2,.                                            QH8  240\n         XX   =X(I),.                                                   QH8  250\n         LY   =LY+X(I+1)*(FCT(XX)+FCT(-XX)),.                           QH8  260\n         END,.                                                          QH8  270\n    Y    =LY,.                                                          QH8  280\n    END,.                              /*END OF PROCEDURE QH8         */QH8  290\n QH16..                                                                 QH16  10\n /*********************************************************************/QH16  20\n /*                                                                   */QH16  30\n /*      INTEGRATION OF A GIVEN FUNCTION BY 16-POINT GAUSSIAN-HERMITE */QH16  40\n /*      QUADRATURE FORMULA                                           */QH16  50\n /*                                                                   */QH16  60\n /*********************************************************************/QH16  70\n    PROCEDURE (FCT,Y),.                                                 QH16  80\n    DECLARE                                                             QH16  90\n         FCT ENTRY RETURNS                                              QH16 100\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QH16 110\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QH16 120\n         (XX,Y)                                                         QH16 130\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QH16 140\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QH16 150\n         I BINARY FIXED,                                                QH16 160\n         LY BINARY FLOAT (53),                                          QH16 170\n         X(16) BINARY FLOAT (53) STATIC INITIAL(                        QH16 180\n         4.688738939305818E+00,     2.654807474011182E-10,              QH16 190\n         3.869447904860123E+00,     2.320980844865211E-07,              QH16 200\n         3.176999161979956E+00,     2.711860092537882E-05,              QH16 210\n         2.546202157847481E+00,     9.322840086241805E-04,              QH16 220\n         1.951787990916254E+00,     1.288031153550997E-02,              QH16 230\n         1.380258539198881E+00,     8.381004139898583E-02,              QH16 240\n         8.229514491446559E-01,     2.806474585285337E-01,              QH16 250\n         2.734810461381525E-01,     5.079294790166137E-01),.            QH16 260\n    LY   =0,.                                                           QH16 270\n         DO I=1 TO 15 BY 2,.                                            QH16 280\n         XX   =X(I),.                                                   QH16 290\n         LY   =LY+X(I+1)*(FCT(XX)+FCT(-XX)),.                           QH16 300\n         END,.                                                          QH16 310\n    Y    =LY,.                                                          QH16 320\n    END,.                              /*END OF PROCEDURE QH16        */QH16 330\n QH24..                                                                 QH24  10\n /*********************************************************************/QH24  20\n /*                                                                   */QH24  30\n /*      INTEGRATION OF A GIVEN FUNCTION BY 24-POINT GAUSSIAN-HERMITE */QH24  40\n /*      QUADRATURE FORMULA                                           */QH24  50\n /*                                                                   */QH24  60\n /*********************************************************************/QH24  70\n    PROCEDURE (FCT,Y),.                                                 QH24  80\n    DECLARE                                                             QH24  90\n         FCT ENTRY RETURNS                                              QH24 100\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QH24 110\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QH24 120\n         (XX,Y)                                                         QH24 130\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QH24 140\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QH24 150\n         I BINARY FIXED,                                                QH24 160\n         LY BINARY FLOAT (53),                                          QH24 170\n         X(24) BINARY FLOAT (53) STATIC INITIAL(                        QH24 180\n         6.015925561425740E+00,    1.664368496489109E-16,               QH24 190\n         5.259382927668044E+00,    6.584620243078170E-13,               QH24 200\n         4.625662756423787E+00,    3.046254269987564E-10,               QH24 210\n         4.053664402448150E+00,    4.018971174941430E-08,               QH24 220\n         3.520006813034525E+00,    2.158245704902334E-06,               QH24 230\n         3.012546137565565E+00,    5.688691636404380E-05,               QH24 240\n         2.523881017011427E+00,    8.236924826884175E-04,               QH24 250\n         2.049003573661699E+00,    7.048355810072671E-03,               QH24 260\n         1.584250010961694E+00,    3.744547050323075E-02,               QH24 270\n         1.126760817611245E+00,    1.277396217845592E-01,               QH24 280\n         6.741711070372122E-01,    2.861795353464430E-01,               QH24 290\n         2.244145474725156E-01,    4.269311638686992E-01),.             QH24 300\n    LY   =0,.                                                           QH24 310\n         DO I=1 TO 23 BY 2,.                                            QH24 320\n         XX   =X(I),.                                                   QH24 330\n         LY   =LY+X(I+1)*(FCT(XX)+FCT(-XX)),.                           QH24 340\n         END,.                                                          QH24 350\n    Y    =LY,.                                                          QH24 360\n    END,.                              /*END OF PROCEDURE QH24        */QH24 370\n QH32..                                                                 QH32  10\n /*********************************************************************/QH32  20\n /*                                                                   */QH32  30\n /*      INTEGRATION OF A GIVEN FUNCTION BY 32-POINT GAUSSIAN-HERMITE */QH32  40\n /*      QUADRATURE FORMULA                                           */QH32  50\n /*                                                                   */QH32  60\n /*********************************************************************/QH32  70\n    PROCEDURE (FCT,Y),.                                                 QH32  80\n    DECLARE                                                             QH32  90\n         FCT ENTRY RETURNS                                              QH32 100\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QH32 110\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QH32 120\n         (XX,Y)                                                         QH32 130\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QH32 140\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QH32 150\n         I BINARY FIXED,                                                QH32 160\n         LY BINARY FLOAT (53),                                          QH32 170\n         X(32) BINARY FLOAT (53) STATIC INITIAL(                        QH32 180\n         7.125813909830728E+00,    7.310676427384162E-23,               QH32 190\n         6.409498149269660E+00,    9.231736536518292E-19,               QH32 200\n         5.812225949515914E+00,    1.197344017092849E-15,               QH32 210\n         5.275550986515880E+00,    4.215010211326448E-13,               QH32 220\n         4.777164503502596E+00,    5.933291463396639E-11,               QH32 230\n         4.305547953351198E+00,    4.098832164770897E-09,               QH32 240\n         3.853755485471445E+00,    1.574167792545594E-07,               QH32 250\n         3.417167492818571E+00,    3.650585129562376E-06,               QH32 260\n         2.992490825002374E+00,    5.416584061819983E-05,               QH32 270\n         2.577249537732317E+00,    5.362683655279720E-04,               QH32 280\n         2.169499183606112E+00,    3.654890326654428E-03,               QH32 290\n         1.767654109463202E+00,    1.755342883157343E-02,               QH32 300\n         1.370376410952872E+00,    6.045813095591261E-02,               QH32 310\n         9.765004635896828E-01,    1.512697340766425E-01,               QH32 320\n         5.849787654359324E-01,    2.774581423025299E-01,               QH32 330\n         1.948407415693993E-01,    3.752383525928024E-01),.             QH32 340\n    LY   =0,.                                                           QH32 350\n         DO I=1 TO 31 BY 2,.                                            QH32 360\n         XX   =X(I),.                                                   QH32 370\n         LY   =LY+X(I+1)*(FCT(XX)+FCT(-XX)),.                           QH32 380\n         END,.                                                          QH32 390\n    Y    =LY,.                                                          QH32 400\n    END,.                              /*END OF PROCEDURE QH32        */QH32 410\n QH48..                                                                 QH48  10\n /*********************************************************************/QH48  20\n /*                                                                   */QH48  30\n /*      INTEGRATION OF A GIVEN FUNCTION BY 48-POINT GAUSSIAN-HERMITE */QH48  40\n /*      QUADRATURE FORMULA                                           */QH48  50\n /*                                                                   */QH48  60\n /*********************************************************************/QH48  70\n    PROCEDURE (FCT,Y),.                                                 QH48  80\n    DECLARE                                                             QH48  90\n         FCT ENTRY RETURNS                                              QH48 100\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QH48 110\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QH48 120\n         (XX,Y)                                                         QH48 130\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QH48 140\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QH48 150\n         I BINARY FIXED,                                                QH48 160\n         LY BINARY FLOAT (53),.                                         QH48 170\n    DECLARE                                                             QH48 180\n         X(24) BINARY FLOAT(53) STATIC INITIAL (                        QH48 190\n         8.975315081931687E+00,   8.310752190704784E+00,                QH48 200\n         7.759295519765775E+00,   7.266046554164350E+00,                QH48 210\n         6.810064578074141E+00,   6.380564096186411E+00,                QH48 220\n         5.971072225013545E+00,   5.577316981223729E+00,                QH48 230\n         5.196287718792365E+00,   4.825757228133209E+00,                QH48 240\n         4.464014546934459E+00,   4.109704603560590E+00,                QH48 250\n         3.761726490228358E+00,   3.419165969363885E+00,                QH48 260\n         3.081248988645106E+00,   2.747308624822383E+00,                QH48 270\n         2.416760904873216E+00,   2.089086660944276E+00,                QH48 280\n         1.763817579895300E+00,   1.440525220137565E+00,                QH48 290\n         1.118812152402157E+00,   7.983046277785622E-01,                QH48 300\n         4.786463375944961E-01,   1.594929358488625E-01),.              QH48 310\n    DECLARE                                                             QH48 320\n         W(24) BINARY FLOAT(53) STATIC INITIAL (                        QH48 330\n         7.935551460773997E-36,   5.984612693313878E-31,                QH48 340\n         3.685036080150670E-27,   5.564577468902285E-24,                QH48 350\n         3.188387323505138E-21,   8.730159601186677E-19,                QH48 360\n         1.315159622658409E-16,   1.197589865479179E-14,                QH48 370\n         7.046932581545889E-13,   2.815296537838169E-11,                QH48 380\n         7.930467495165382E-10,   1.622514135895770E-08,                QH48 390\n         2.468658993669750E-07,   2.847258691734848E-06,                QH48 400\n         2.528599027748489E-05,   1.751504318011728E-04,                QH48 410\n         9.563923198194153E-04,   4.153004911977552E-03,                QH48 420\n         1.444496157498110E-02,   4.047967698460385E-02,                QH48 430\n         9.182229707928518E-02,   1.692044719456411E-01,                QH48 440\n         2.539615426647591E-01,   3.110010303779631E-01),.              QH48 450\n    LY   =0,.                                                           QH48 460\n         DO I=1 TO 24,.                                                 QH48 470\n         XX   =X(I),.                                                   QH48 480\n         LY   =LY+W(I)*(FCT(XX)+FCT(-XX)),.                             QH48 490\n         END,.                                                          QH48 500\n    Y    =LY,.                                                          QH48 510\n    END,.                              /*END OF PROCEDURE QH48        */QH48 520\n QA2..                                                                  QA2   10\n /*********************************************************************/QA2   20\n /*                                                                   */QA2   30\n /*      INTEGRATION OF A GIVEN FUNCTION BY ASSOCIATED 2-POINT        */QA2   40\n /*      GAUSSIAN-LAGUERRE QUADRATURE FORMULA                         */QA2   50\n /*                                                                   */QA2   60\n /*********************************************************************/QA2   70\n    PROCEDURE (FCT,Y),.                                                 QA2   80\n    DECLARE                                                             QA2   90\n         FCT ENTRY RETURNS                                              QA2  100\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QA2  110\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QA2  120\n         (X,Y)                                                          QA2  130\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/QA2  140\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/QA2  150\n    X    =2.724744871391589E+00,.                                       QA2  160\n    Y    =1.626256708944903E-01*FCT(X),.                                QA2  170\n    X    =2.752551286084109E-01,.                                       QA2  180\n    Y    =Y+1.609828180011026E+00*FCT(X),.                              QA2  190\n    END,.                              /*END OF PROCEDURE QA2         */QA2  200\n QA4..                                                                  QA4   10\n /*********************************************************************/QA4   20\n /*                                                                   */QA4   30\n /*      INTEGRATION OF A GIVEN FUNCTION BY ASSOCIATED 4-POINT        */QA4   40\n /*      GAUSSIAN-LAGUERRE QUADRATURE FORMULA                         */QA4   50\n /*                                                                   */QA4   60\n /*********************************************************************/QA4   70\n    PROCEDURE (FCT,Y),.                                                 QA4   80\n    DECLARE                                                             QA4   90\n         FCT ENTRY RETURNS                                              QA4  100\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QA4  110\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QA4  120\n         (X,Y)                                                          QA4  130\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/QA4  140\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/QA4  150\n    X    =8.588635689012034E+00,.                                       QA4  160\n    Y    =3.992081444227352E-04*FCT(X),.                                QA4  170\n    X    =3.926963501358287E+00,.                                       QA4  180\n    Y    =Y+3.415596601482695E-02*FCT(X),.                              QA4  190\n    X    =1.339097288126361E+00,.                                       QA4  200\n    Y    =Y+4.156046516297838E-01*FCT(X),.                              QA4  210\n    X    =1.453035215033171E-01,.                                       QA4  220\n    Y    =Y+1.322294025116483E+00*FCT(X),.                              QA4  230\n    END,.                              /*END OF PROCEDURE QA4         */QA4  240\n QA8..                                                                  QA8   10\n /*********************************************************************/QA8   20\n /*                                                                   */QA8   30\n /*      INTEGRATION OF A GIVEN FUNCTION BY ASSOCIATED 8-POINT        */QA8   40\n /*      GAUSSIAN-LAGUERRE QUADRATURE FORMULA                         */QA8   50\n /*                                                                   */QA8   60\n /*********************************************************************/QA8   70\n    PROCEDURE (FCT,Y),.                                                 QA8   80\n    DECLARE                                                             QA8   90\n         FCT ENTRY RETURNS                                              QA8  100\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QA8  110\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QA8  120\n         (XX,Y)                                                         QA8  130\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QA8  140\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QA8  150\n         LY BINARY FLOAT (53),                                          QA8  160\n         I BINARY FIXED,                                                QA8  170\n         X(16) BINARY FLOAT (53) STATIC INITIAL                         QA8  180\n         (2.198427284096265E+01,     5.309614948022364E-10,             QA8  190\n         1.497262708842639E+01,     4.641961689730421E-07,              QA8  200\n         1.009332367522134E+01,     5.423720185075763E-05,              QA8  210\n         6.483145428627170E+00,     1.864568017248361E-03,              QA8  220\n         3.809476361484907E+00,     2.576062307101995E-02,              QA8  230\n         1.905113635031428E+00,     1.676200827979717E-01,              QA8  240\n         6.772490876492892E-01,     5.612949170570674E-01,              QA8  250\n         7.479188259681827E-02,     1.015858958033227E+00),.            QA8  260\n    LY   =0,.                                                           QA8  270\n         DO I=1 TO 15 BY 2,.                                            QA8  280\n         XX   =X(I),.                                                   QA8  290\n         LY   =LY+X(I+1)*FCT(XX),.                                      QA8  300\n         END,.                                                          QA8  310\n    Y    =LY,.                                                          QA8  320\n    END,.                              /*END OF PROCEDURE QA8         */QA8  330\n QA12..                                                                 QA12  10\n /*********************************************************************/QA12  20\n /*                                                                   */QA12  30\n /*      INTEGRATION OF A GIVEN FUNCTION BY ASSOCIATED 12-POINT       */QA12  40\n /*      GAUSSIAN-LAGUERRE QUADRATURE FORMULA                         */QA12  50\n /*                                                                   */QA12  60\n /*********************************************************************/QA12  70\n    PROCEDURE (FCT,Y),.                                                 QA12  80\n    DECLARE                                                             QA12  90\n         FCT ENTRY RETURNS                                              QA12 100\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QA12 110\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QA12 120\n         (XX,Y)                                                         QA12 130\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QA12 140\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QA12 150\n         LY BINARY FLOAT (53),                                          QA12 160\n         I BINARY FIXED,                                                QA12 170\n         X(24) BINARY FLOAT (53) STATIC INITIAL                         QA12 180\n         (3.619136036061560E+01,    3.328736992978218E-16,              QA12 190\n         2.766110877984609E+01,    1.316924048615634E-12,               QA12 200\n         2.139675593616611E+01,    6.092508539975128E-10,               QA12 210\n         1.643219508767531E+01,    8.037942349882859E-08,               QA12 220\n         1.239044796380947E+01,    4.316491409804667E-06,               QA12 230\n         9.075434230961203E+00,    1.137738327280876E-04,               QA12 240\n         6.369975388030635E+00,    1.647384965376835E-03,               QA12 250\n         4.198415644878413E+00,    1.409671162014534E-02,               QA12 260\n         2.509848097232128E+00,    7.489094100646149E-02,               QA12 270\n         1.269589940103961E+00,    2.554792435691183E-01,               QA12 280\n         4.545066815637803E-01,    5.723590706928860E-01,               QA12 290\n         5.036188911729395E-02,    8.538623277373985E-01),.             QA12 300\n    LY   =0,.                                                           QA12 310\n         DO I=1 TO 23 BY 2,.                                            QA12 320\n         XX   =X(I),.                                                   QA12 330\n         LY   =LY+X(I+1)*FCT(XX),.                                      QA12 340\n         END,.                                                          QA12 350\n    Y    =LY,.                                                          QA12 360\n    END,.                              /*END OF PROCEDURE QA12        */QA12 370\n QA16..                                                                 QA16  10\n /*********************************************************************/QA16  20\n /*                                                                   */QA16  30\n /*      INTEGRATION OF A GIVEN FUNCTION BY ASSOCIATED 16-POINT       */QA16  40\n /*      GAUSSIAN-LAGUERRE QUADRATURE FORMULA                         */QA16  50\n /*                                                                   */QA16  60\n /*********************************************************************/QA16  70\n    PROCEDURE (FCT,Y),.                                                 QA16  80\n    DECLARE                                                             QA16  90\n         FCT ENTRY RETURNS                                              QA16 100\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QA16 110\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QA16 120\n         (XX,Y)                                                         QA16 130\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QA16 140\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QA16 150\n         LY BINARY FLOAT (53),                                          QA16 160\n         I BINARY FIXED,                                                QA16 170\n         X(32) BINARY FLOAT (53) STATIC INITIAL                         QA16 180\n         (5.077722387753708E+01,     1.462135285476832E-22,             QA16 190\n         4.108166652549120E+01,     1.846347307303658E-18,              QA16 200\n         3.378197048822617E+01,     2.394688034185697E-15,              QA16 210\n         2.783143821132868E+01,     8.430020422652895E-13,              QA16 220\n         2.282130069352521E+01,     1.186658292679328E-10,              QA16 230\n         1.853774317860669E+01,     8.197664329541793E-09,              QA16 240\n         1.485143134180125E+01,     3.148335585091188E-07,              QA16 250\n         1.167703367397596E+01,     7.301170259124752E-06,              QA16 260\n         8.955001337723390E+00,     1.083316812363997E-04,              QA16 270\n         6.642215179741444E+00,     1.072536731055944E-03,              QA16 280\n         4.706726707667587E+00,     7.309780653308856E-03,              QA16 290\n         3.124601050702144E+00,     3.510685766314686E-02,              QA16 300\n         1.877931507696074E+00,     1.209162619118252E-01,              QA16 310\n         9.535531553908655E-01,     3.025394681532850E-01,              QA16 320\n         3.422001560109477E-01,     5.549162846050598E-01,              QA16 330\n         3.796291457531345E-02,     7.504767051856048E-01),.            QA16 340\n    LY   =0,.                                                           QA16 350\n         DO I=1 TO 31 BY 2,.                                            QA16 360\n         XX   =X(I),.                                                   QA16 370\n         LY   =LY+X(I+1)*FCT(XX),.                                      QA16 380\n         END,.                                                          QA16 390\n    Y    =LY,.                                                          QA16 400\n    END,.                              /*END OF PROCEDURE QA16        */QA16 410\n QA24..                                                                 QA24  10\n /*********************************************************************/QA24  20\n /*                                                                   */QA24  30\n /*      INTEGRATION OF A GIVEN FUNCTION BY ASSOCIATED 24-POINT       */QA24  40\n /*      GAUSSIAN-LAGUERRE QUADRATURE FORMULA                         */QA24  50\n /*                                                                   */QA24  60\n /*********************************************************************/QA24  70\n    PROCEDURE (FCT,Y),.                                                 QA24  80\n    DECLARE                                                             QA24  90\n         FCT ENTRY RETURNS                                              QA24 100\n         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QA24 110\n  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QA24 120\n         (XX,Y)                                                         QA24 130\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QA24 140\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QA24 150\n         LY BINARY FLOAT (53),                                          QA24 160\n         I BINARY FIXED,.                                               QA24 170\n    DECLARE                                                             QA24 180\n         X(24) BINARY FLOAT(53) STATIC INITIAL (                        QA24 190\n         8.055628081995041E+01,   6.906860197530437E+01,                QA24 200\n         6.020666696305722E+01,   5.279543252728363E+01,                QA24 210\n         4.637697955754013E+01,   4.071159818554311E+01,                QA24 220\n         3.565370351632821E+01,   3.110646470904657E+01,                QA24 230\n         2.700140605647236E+01,   2.328793282487992E+01,                QA24 240\n         1.992742587524246E+01,   1.688967192852711E+01,                QA24 250\n         1.415058618728576E+01,   1.169069592605607E+01,                QA24 260\n         9.494095330026488E+00,   7.547704680023454E+00,                QA24 270\n         5.840733271323608E+00,   4.364283076935306E+00,                QA24 280\n         3.111052455147713E+00,   2.075112909852381E+00,                QA24 290\n         1.251740632362746E+00,   6.372902787326688E-01,                QA24 300\n         2.291023164926243E-01,   2.543799658568936E-02),.              QA24 310\n    DECLARE                                                             QA24 320\n         W(24) BINARY FLOAT(53) STATIC INITIAL (                        QA24 330\n         1.587110292154799E-35,   1.196922538662776E-30,                QA24 340\n         7.370072160301340E-27,   1.112915493780457E-23,                QA24 350\n         6.376774647010277E-21,   1.746031920237335E-18,                QA24 360\n         2.630319245316817E-16,   2.395179730958359E-14,                QA24 370\n         1.409386516309178E-12,   5.630593075676338E-11,                QA24 380\n         1.586093499033076E-09,   3.245028271791540E-08,                QA24 390\n         4.937317987339501E-07,   5.694517383469696E-06,                QA24 400\n         5.057198055496978E-05,   3.503008636023457E-04,                QA24 410\n         1.912784639638831E-03,   8.306009823955105E-03,                QA24 420\n         2.888992314996220E-02,   8.095935396920770E-02,                QA24 430\n         1.836445941585704E-01,   3.384089438912822E-01,                QA24 440\n         5.079230853295182E-01,   6.220020607559262E-01),.              QA24 450\n    LY   =0,.                                                           QA24 460\n         DO I=1 TO 24,.                                                 QA24 470\n         XX   =X(I),.                                                   QA24 480\n         LY   =LY+W(I)*FCT(XX),.                                        QA24 490\n         END,.                                                          QA24 500\n    Y    =LY,.                                                          QA24 510\n    END,.                              /*END OF PROCEDURE QA24        */QA24 520\n DGT3..                                                                 DGT3  10\n /*********************************************************************/DGT3  20\n /*                                                                   */DGT3  30\n /*      DIFFERENTIATE A TABLED FUNCTION USING LAGRANGIAN             */DGT3  40\n /*      INTERPOLATION FORMULA, DEGREE 2                              */DGT3  50\n /*                                                                   */DGT3  60\n /*********************************************************************/DGT3  70\n    PROCEDURE(X,Y,Z,DIM),.                                              DGT3  80\n    DECLARE                                                             DGT3  90\n         (X(*),Y(*),Z(*),XA,XB,XC,                                      DGT3 100\n         XBA,XCB,YA,YB,YC,QBA,QCB)                                      DGT3 110\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/DGT3 120\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/DGT3 130\n         (DIM,I)BINARY FIXED,                                           DGT3 140\n         LERR CHARACTER(1),                                             DGT3 150\n         ERROR EXTERNAL CHARACTER(1),.                                  DGT3 160\n    IF DIM GE 3                        /*TEST SPECIFIED DIMENSION     */DGT3 170\n    THEN DO,.                                                           DGT3 180\n         LERR ='0',.                   /*INIT. LOCAL ERROR INDICATOR  */DGT3 190\n         XB   =X(3),.                                                   DGT3 200\n         YB   =Y(3),.                                                   DGT3 210\n         XC   =X(1),.                                                   DGT3 220\n         YC   =Y(1),.                                                   DGT3 230\n         XCB  =XB-XC,.                                                  DGT3 240\n         IF XCB=0                      /*TEST MONOTONY OF ARGUMENTS   */DGT3 250\n         THEN DO,.                                                      DGT3 260\n              LERR ='1',.              /*NON-MONOTONIC ARGUMENTS      */DGT3 270\n              XCB  =1E-30,.            /*CHANGE XCB TO 10**(-30)      */DGT3 280\n              END,.                                                     DGT3 290\n         QCB  =(YB-YC)/XCB,.           /*COMPUTE DIVIDED DIFFERENCE   */DGT3 300\n              DO I =2 TO DIM,.                                          DGT3 310\n              QBA  =QCB,.              /*SAVE DIVIDED DIFFERENCE      */DGT3 320\n              XBA  =XCB,.              /*REPLACE XBA BY X(I-1)-X(I-2) */DGT3 330\n              XA   =XB,.               /*REPLACE XA  BY X(I-2)        */DGT3 340\n              XB   =XC,.               /*REPLACE XB BY X(I-1)         */DGT3 350\n              XC   =X(I),.             /*SET     XC  TO X(I)          */DGT3 360\n              YA   =YB,.               /*REPLACE YA BY Y(I-2)         */DGT3 370\n              YB   =YC,.               /*REPLACE YB  BY Y(I-1)        */DGT3 380\n              YC   =Y(I),.             /*SET     YC  BY Y(I)          */DGT3 390\n              XCB  =XC-XB,.            /*REPLACE XCB BY X(I)-X(I-1)   */DGT3 400\n              IF XCB*XBA LE 0                                           DGT3 410\n              THEN LERR ='1',.         /*MARK NON-MONOTONIC ARGUMENTS */DGT3 420\n              IF XCB=0                                                  DGT3 430\n              THEN XCB  =1E-30,.       /*CHANGE XCB TO 10**(-30)      */DGT3 440\n              QCB  =(YC-YB)/XCB,.      /*COMPUTE DIVIDED DIFFERENCE   */DGT3 450\n              XA   =XC-XA,.            /*REPLACE XA BY X(I)-X(I-1)    */DGT3 460\n              IF XA=0                                                   DGT3 470\n              THEN XA   =1E-30,.       /*CHANGE XA TO 10**(-30)       */DGT3 480\n              YA   =(YC-YA)/XA,.       /*COMPUTE DIVIDED DIFFERENCE   */DGT3 490\n              Z(I-1)=QBA-YA+QCB,.      /*STORE DERIVATIVE VALUE Z(I-1)*/DGT3 500\n              END,.                                                     DGT3 510\n         Z(DIM)=QCB-QBA+YA,.           /*STORE DERIVATIVE VALUE Z(DIM)*/DGT3 520\n         END,.                                                          DGT3 530\n    ELSE LERR ='2',.                   /*ERROR IN SPECIFIED DIMENSION */DGT3 540\n    ERROR=LERR,.                                                        DGT3 550\n    END,.                              /*END OF PROCEDURE DGT3        */DGT3 560\n DET3..                                                                 DET3  10\n /*********************************************************************/DET3  20\n /*                                                                   */DET3  30\n /*      DIFFERENTIATE AN EQUIDISTANTLY TABLED FUNCTION USING         */DET3  40\n /*      LAGRANGIAN INTERPOLATION FORMULA, DEGREE 2                   */DET3  50\n /*                                                                   */DET3  60\n /*********************************************************************/DET3  70\n    PROCEDURE(H,Y,Z,DIM),.                                              DET3  80\n    DECLARE                                                             DET3  90\n         (H,Y(*),Z(*),YA,YB,YC,HH)                                      DET3 100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/DET3 110\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/DET3 120\n         (DIM,I)BINARY FIXED,                                           DET3 130\n         ERROR EXTERNAL CHARACTER(1),.                                  DET3 140\n    IF DIM GE 3                        /*TEST SPECIFIED DIMENSION     */DET3 150\n    THEN DO,.                                                           DET3 160\n         IF H NE 0                     /*TEST SPECIFIED INCREMENT     */DET3 170\n         THEN DO,.                                                      DET3 180\n              HH   =H+H,.                                               DET3 190\n              YC   =Y(1),.                                              DET3 200\n              YA   =YC-Y(2),.                                           DET3 210\n              YB   =Y(3)+YA+YA+YA,.    /*MODIFICATION  YB = Y(0)      */DET3 220\n                   DO I =2 TO DIM,.                                     DET3 230\n                   YA   =YB,.          /*REPLACE YA BY Y(I-2)         */DET3 240\n                   YB   =YC,.          /*REPLACE YB BY Y(I-1)         */DET3 250\n                   YC   =Y(I),.        /*SET YC TO Y(I)               */DET3 260\n                   Z(I-1)=(YC-YA)/HH,. /*SET Z(I-1) TO (Y(I)-Y(I-2)/2H*/DET3 270\n                   END,.                                                DET3 280\n              YC   =YC-YB,.                                             DET3 290\n              Z(DIM)=(YA-YB+YC         /*Z(DIM)=(Y(DIM-2)-4*Y(DIM-1)  */DET3 300\n                   +YC+YC)/HH,.        /*+3*Y(DIM))2*H                */DET3 310\n              ERROR='0',.              /*SUCCESSFUL OPERATION         */DET3 320\n              END,.                                                     DET3 330\n         ELSE ERROR='1',.              /*ERROR IN SPECIFIED INCREMENT */DET3 340\n         END,.                                                          DET3 350\n    ELSE ERROR='2',.                   /*ERROR IN SPECIFIED DIMENSION */DET3 360\n    END,.                              /*END OF PROCEDURE DET3        */DET3 370\n DET5..                                                                 DET5  10\n /*********************************************************************/DET5  20\n /*                                                                   */DET5  30\n /*      DIFFERENTIATE AN EQUIDISTANTLY TABLED FUNCTION USING         */DET5  40\n /*      LAGRANGIAN INTERPOLATION FORMULA, DEGREE 4                   */DET5  50\n /*                                                                   */DET5  60\n /*********************************************************************/DET5  70\n    PROCEDURE(H,Y,Z,DIM),.                                              DET5  80\n    DECLARE                                                             DET5  90\n         (H,Y(*),Z(*),YA,YB,YC,YD,YE,HH)                                DET5 100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/DET5 110\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/DET5 120\n         (DIM,I)BINARY FIXED,                                           DET5 130\n         ERROR EXTERNAL CHARACTER(1),.                                  DET5 140\n    IF DIM GE 5                        /*TEST SPECIFIED DIMENSION     */DET5 150\n    THEN DO,.                                                           DET5 160\n         IF H NE 0                     /*TEST SPECIFIED INCREMENT     */DET5 170\n         THEN DO,.                                                      DET5 180\n              HH   =12*H,.                                              DET5 190\n              YD   =Y(1),.                                              DET5 200\n              YE   =Y(2),.                                              DET5 210\n              YA   =Y(3)-YE,.                                           DET5 220\n              YB   =Y(4),.                                              DET5 230\n              YC   =Y(5)               /*MODIFICATION  YC = Y(0)      */DET5 240\n                   +5*(YD-YB+YA+YA),.                                   DET5 250\n              YB   =5*(YC-YD+YE-YD-YA) /*MODIFICATION  YB = Y(-1)     */DET5 260\n                   +YB,.                                                DET5 270\n                   DO I =3 TO DIM,.                                     DET5 280\n                   YA   =YB,.          /*REPLACE YA BY Y(I-4)         */DET5 290\n                   YB   =YC,.          /*REPLACE YB BY Y(I-3)         */DET5 300\n                   YC   =YD,.          /*REPLACE YC BY Y(I-2)         */DET5 310\n                   YD   =YE,.          /*REPLACE YD BY Y(I-1)         */DET5 320\n                   YE   =Y(I),.        /*SET YE TO Y(I)               */DET5 330\n                   Z(I-2)=(YA-YE+      /*Z(I-2)=(Y(I-4)-Y(I)+         */DET5 340\n                        (YD-YB)*8)/HH,./*+8*(Y(I-1)-Y(I-3))/12H       */DET5 350\n                   END,.                                                DET5 360\n              YA   =YA-6*(YB-YC                                         DET5 370\n                   +YD-YC+YD-YC),.                                      DET5 380\n              Z(DIM-1)=(YE-YD+YE-YD    /*COMPUTE LAST TWO DERIVATIVE  */DET5 390\n                   +YE-YA)/HH,.        /*VALUES                       */DET5 400\n              Z(DIM)=(YA+YA+YA+YB+YB                                    DET5 410\n                   +YE-6*YC+12*(YE                                      DET5 420\n                   -YD+YE-YC))/HH,.                                     DET5 430\n              ERROR='0',.              /*SUCCESSFUL OPERATION         */DET5 440\n              END,.                                                     DET5 450\n         ELSE ERROR='1',.              /*ERROR IN SPECIFIED INCREMENT */DET5 460\n         END,.                                                          DET5 470\n    ELSE ERROR='2',.                   /*ERROR IN SPECIFIED DIMENSION */DET5 480\n    END,.                              /*END OF PROCEDURE DET5        */DET5 490\n DFEC..                                                                 DFEC  10\n /*********************************************************************/DFEC  20\n /*                                                                   */DFEC  30\n /*      COMPUTE DERIVATIVE VALUE OF A FUNCTION USING EXTRAPOLATION   */DFEC  40\n /*      METHOD ON CENTRAL DIVIDED DIFFERENCES                        */DFEC  50\n /*                                                                   */DFEC  60\n /*********************************************************************/DFEC  70\n    PROCEDURE(X,H,OPT,FCT,Z),.                                          DFEC  80\n    DECLARE                                                             DFEC  90\n         (X,Z,H,HH,HK,V,LZ,H1,                                          DFEC 100\n         DA,DB,DZ,AUX(5))                                               DFEC 110\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/DFEC 120\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/DFEC 130\n         (K,M)BINARY FIXED,                                             DFEC 140\n         FCT ENTRY                                                      DFEC 150\n         (BINARY FLOAT)                /*SINGLE PRECISION VERSION  /*S*/DFEC 160\n  /*     (BINARY FLOAT(53))            /*DOUBLE PRECISION VERSION  /*D*/DFEC 170\n         RETURNS(BINARY FLOAT),        /*SINGLE PRECISION VERSION  /*S*/DFEC 180\n  /*     RETURNS(BINARY FLOAT(53)),    /*DOUBLE PRECISION VERSION  /*D*/DFEC 190\n         (ERROR EXTERNAL,OPT)CHARACTER(1),.                             DFEC 200\n    IF H NE 0                          /*TEST SPECIFIED INTERVAL      */DFEC 210\n    THEN DO,.                                                           DFEC 220\n         HK,H1=ABS(H),.                /*SET H1 TO ABS(H)             */DFEC 230\n         IF OPT NE '0'                 /*SHOULD OPTIMUM STEPSIZE H1   */DFEC 240\n         THEN DO,.                     /*BE GENERATED                 */DFEC 250\n              V    =5E-1,.             /*SINGLE PRECISION VERSION  /*S*/DFEC 260\n  /*          V    =5E-3,.             /*DOUBLE PRECISION VERSION  /*D*/DFEC 270\n              IF HK GT V                                                DFEC 280\n              THEN HK   =V,.           /*SET HK =MIN(V,ABS(H))        */DFEC 290\n              DB   =1,.                                                 DFEC 300\n              DA   =ABS(FCT(X+HK)                                       DFEC 310\n                   -FCT(X-HK))/2,.                                      DFEC 320\n              IF DA GT HK                                               DFEC 330\n              THEN DB   =DA/HK,.       /*SET DB TO MAX(1,ABS(T))      */DFEC 340\n              IF DA LT 1                                                DFEC 350\n              THEN DA   =1,.           /*SET DA TO MAX(1,ABS(Y)       */DFEC 360\n              HK   =V*DA/DB,.                                           DFEC 370\n              IF HK LT H1                                               DFEC 380\n              THEN H1   =HK,.          /*SET H1 TO MIN(V*DA/DB,ABS(H))*/DFEC 390\n              END,.                                                     DFEC 400\n         V    =5,.                                                      DFEC 410\n              DO K =1 TO 5,.                                            DFEC 420\n              HK   =(V/5)*H1,.         /*SET HK TO H1*(6-K)/5         */DFEC 430\n              LZ,AUX(K)=(FCT(X+HK)-    /*SET AUX(K) TO T(0,K)         */DFEC 440\n                   FCT(X-HK))/(HK+HK),.                                 DFEC 450\n              HH   =1/V,.                                               DFEC 460\n              HK   =0,.                                                 DFEC 470\n              DA   =1E30,.                                              DFEC 480\n                   DO M =K-1 TO 1 BY -1,.                               DFEC 490\n                   DB   =DA,.                                           DFEC 500\n                   HK   =HK+HH,.                                        DFEC 510\n                   DZ   =(LZ-AUX(M))/  /*SET DZ TO INCREMENT          */DFEC 520\n                        (HK*(2+HK)),.                                   DFEC 530\n                   DA   =ABS(DZ),.                                      DFEC 540\n                   IF DB LT DA         /*TEST FOR DECR. INCREMENTS    */DFEC 550\n                   THEN GOTO NEWK,.                                     DFEC 560\n                   LZ,AUX(M)=LZ+DZ,.   /*SET Z,AUX(M) TO T(K-M  ,M)   */DFEC 570\n                   END,.                                                DFEC 580\n NEWK..                                                                 DFEC 590\n              V    =V-1,.                                               DFEC 600\n              END,.                                                     DFEC 610\n         Z    =LZ,.                                                     DFEC 620\n         ERROR='0',.                   /*SUCCESSFUL OPERATION         */DFEC 630\n         END,.                                                          DFEC 640\n    ELSE ERROR='1',.                   /*ERROR IN SPECIFIED INTERVAL  */DFEC 650\n    END,.                              /*END OF PROCEDURE DFEC        */DFEC 660\n DFEO..                                                                 DFEO  10\n /*********************************************************************/DFEO  20\n /*                                                                   */DFEO  30\n /*      COMPUTE DERIVATIVE VALUE OF A FUNCTION USING EXTRAPOLATION   */DFEO  40\n /*      METHOD ON ONE-SIDED DIVIDED DIFFERENCES                      */DFEO  50\n /*                                                                   */DFEO  60\n /*********************************************************************/DFEO  70\n    PROCEDURE(X,H,OPT,FCT,Z),.                                          DFEO  80\n    DECLARE                                                             DFEO  90\n         (X,Z,H,HK,HH,V,Y,H1,                                           DFEO 100\n         DA,DB,DZ,AUX(10))                                              DFEO 110\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/DFEO 120\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/DFEO 130\n         (K,M)BINARY FIXED,                                             DFEO 140\n         FCT ENTRY                                                      DFEO 150\n         (BINARY FLOAT)                /*SINGLE PRECISION VERSION  /*S*/DFEO 160\n  /*     (BINARY FLOAT(53))            /*DOUBLE PRECISION VERSION  /*D*/DFEO 170\n         RETURNS(BINARY FLOAT),        /*SINGLE PRECISION VERSION  /*S*/DFEO 180\n  /*     RETURNS(BINARY FLOAT(53)),    /*DOUBLE PRECISION VERSION  /*D*/DFEO 190\n         (ERROR EXTERNAL,OPT)CHARACTER(1),.                             DFEO 200\n    IF H NE 0                          /*TEST SPECIFIED INTERVAL      */DFEO 210\n    THEN DO,.                                                           DFEO 220\n         H1   =H,.                                                      DFEO 230\n         Y    =FCT(X),.                                                 DFEO 240\n         IF OPT NE '0'                 /*SHOULD OPTIMUM STEPSIZE H1   */DFEO 250\n         THEN DO,.                     /*BE GENERATED                 */DFEO 260\n              V    =5E-1,.             /*SINGLE PRECISION VERSION  /*S*/DFEO 270\n  /*          V    =5E-3,.             /*DOUBLE PRECISION VERSION  /*D*/DFEO 280\n              IF H1 LT 0                                                DFEO 290\n              THEN V    =-V,.                                           DFEO 300\n              IF ABS(V) GT ABS(H1)                                      DFEO 310\n              THEN HH   =H1,.          /*SET HH=SIGN(H)*MIN(V,ABS(H)) */DFEO 320\n              ELSE HH   =V,.                                            DFEO 330\n              DB   =ABS((FCT(X+HH)                                      DFEO 340\n                   -Y)/HH),.                                            DFEO 350\n              IF DB LT 1                                                DFEO 360\n              THEN DB   =1,.           /*SET DB TO MAX(1,ABS(T))      */DFEO 370\n              HK   =(V+V)/DB,.                                          DFEO 380\n              IF ABS(Y) GT 1                                            DFEO 390\n              THEN HK   =HK*ABS(Y),.   /*SET HK=2*V*MAX(1,ABS(Y))/DB  */DFEO 400\n              IF ABS(HK) LT ABS(H1)                                     DFEO 410\n              THEN H1   =HK,.          /*SET H1=SIGN(H)*MIN(HK,ABS(H))*/DFEO 420\n              END,.                                                     DFEO 430\n         V    =10,.                                                     DFEO 440\n              DO K =1 TO 10,.                                           DFEO 450\n              HK   =(V/10)*H1,.        /*SET HK TO H1*(11-K)/10       */DFEO 460\n              Z,AUX(K)=(FCT(X+HK)-Y)   /*SET AUX(K) TO T(0,K)         */DFEO 470\n                   /HK,.                                                DFEO 480\n              HH   =1/V,.                                               DFEO 490\n              HK   =0,.                                                 DFEO 500\n              DA   =1E30,.                                              DFEO 510\n                   DO M =K-1 TO 1 BY -1,.                               DFEO 520\n                   HK   =HK+HH,.                                        DFEO 530\n                   DZ   =(Z-AUX(M))                                     DFEO 540\n                        /HK,.          /*SET DZ TO INCREMENT          */DFEO 550\n                   DB   =DA,.                                           DFEO 560\n                   DA   =ABS(DZ),.                                      DFEO 570\n                   IF DB LT DA         /*TEST FOR DECREASING INCREMENT*/DFEO 580\n                   THEN GOTO NEWK,.                                     DFEO 590\n                   Z,AUX(M)=Z+DZ,.     /*SET Z,AUX(M) TO T(K-M,M)     */DFEO 600\n                   END,.                                                DFEO 610\n NEWK..                                                                 DFEO 620\n              V    =V-1,.                                               DFEO 630\n              END,.                                                     DFEO 640\n         ERROR='0',.                   /*SUCCESSFUL OPERATION         */DFEO 650\n         END,.                                                          DFEO 660\n    ELSE ERROR='1',.                   /*ERROR IN SPECIFIED INTERVAL  */DFEO 670\n    END,.                              /*END OF PROCEDURE DFEO        */DFEO 680\n ALIM..                                                                 ALI   10\n /*********************************************************************/ALI   20\n /*                                                                   */ALI   30\n /*      AITKEN SCHEME FOR INTERPOLATION OF FUNCTION VALUE            */ALI   40\n /*      FROM GIVEN MONOTONIC TABLE                                   */ALI   50\n /*                                                                   */ALI   60\n /*********************************************************************/ALI   70\n    PROCEDURE (X,Y,DIM,ORDER,EPS,XVAL,YVAL),.                           ALI   80\n    DECLARE                                                             ALI   90\n         (DIM,I,J,K,N,II,JL,JR,JJL,JJR,DIMS,ORDER)                      ALI  100\n         BINARY FIXED,                                                  ALI  110\n         (X(*),Y(*),ARG(MIN(DIM,ORDER)),VAL(MIN(DIM,ORDER)),XVAL,       ALI  120\n         YVAL,XST,DX,EPS,XS,Z1,Z2,D,DD,VALI,VALI1,A,DIST,DIST1,         ALI  130\n         H,DELT1,DELT2,FACT,ARGI)                                       ALI  140\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/ALI  150\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/ALI  160\n         (ERROR EXTERNAL,SW)                                            ALI  170\n         CHARACTER (1),.                                                ALI  180\n    SW   ='M',.                        /*MONOTONIC ARGUMENTS          */ALI  190\n    J    =1,.                                                           ALI  200\n    D    =1E75,.                                                        ALI  210\n         DO I = 1 TO DIM,.             /*COMPUTE STARTING SUBSCRIPT J */ALI  220\n         DD   =ABS(XVAL-X(I)),.                                         ALI  230\n         IF DD LE D                                                     ALI  240\n         THEN DO,.                                                      ALI  250\n              D    =DD,.                                                ALI  260\n              J    =I,.                                                 ALI  270\n              END,.                                                     ALI  280\n         END,.                                                          ALI  290\n    A,ARG(1)=X(J),.                                                     ALI  300\n    GO TO COM,.                                                         ALI  310\n ALIE..                                                                 ALI  320\n /*********************************************************************/ALI  330\n /*                                                                   */ALI  340\n /*      AITKEN SCHEME FOR INTERPOLATION OF FUNCTION VALUE            */ALI  350\n /*      FROM GIVEN EQUIDISTANT TABLE                                 */ALI  360\n /*                                                                   */ALI  370\n /*********************************************************************/ALI  380\n    ENTRY (XST,DX,Y,DIM,ORDER,EPS,XVAL,YVAL),.                          ALI  390\n    SW   ='E',.                                                         ALI  400\n    Z1   =XST,.                        /*EQUIDISTANT ARGUMENTS        */ALI  410\n    Z2   =DX,.                                                          ALI  420\n    J    =1,.                                                           ALI  430\n    A,ARG(1)=Z1,.                                                       ALI  440\n    IF Z2= 0                                                            ALI  450\n    THEN GO TO COM,.                                                    ALI  460\n    J    =MAX(1,(XVAL-Z1)/Z2+1.5),.    /*COMPUTE STARTING SUBSCRIPT J */ALI  470\n    J    =MIN(DIM,J),.                                                  ALI  480\n    A,ARG(1)=Z1+FLOAT(J-1)*Z2,.                                         ALI  490\n COM..                                                                  ALI  500\n    ERROR='2',.                                                         ALI  510\n    XS   =XVAL,.                                                        ALI  520\n    DIMS =DIM,.                                                         ALI  530\n    N    =MIN(DIMS,ORDER),.                                             ALI  540\n    DELT1,JL,JR=0,.                                                     ALI  550\n    VALI1,VAL(1)=Y(J),.                                                 ALI  560\n    FACT =XS-A,.                                                        ALI  570\n    DIST1=ABS(FACT),.                                                   ALI  580\n    N    =MAX(N,1),.                                                    ALI  590\n         DO I =2 TO N,.                /*TABLE SELECTION              */ALI  600\n         JJR  =J+JR,.                  /*TEST IF SUBSCRIPT IS GREATER */ALI  610\n         IF JJR GE DIMS                /*THAN DIM OR LESS THAN ONE    */ALI  620\n         THEN GO TO LAB2,.                                              ALI  630\n         JJL  =J-JL,.                                                   ALI  640\n         IF JJL LE 1                                                    ALI  650\n         THEN GO TO LAB3,.                                              ALI  660\n         IF SW= 'E'                                                     ALI  670\n         THEN A    =-FACT*Z2,.         /*A=(ARG(I-1)-XVAL)*DX         */ALI  680\n         ELSE A    =ABS(X(JJR+1)-XS)                                    ALI  690\n              -ABS(X(JJL-1)-XS),.                                       ALI  700\n         IF A LE 0                     /*TEST IF THE NEXT STEP IS TO  */ALI  710\n         THEN GO TO LAB3,.             /*THE RIGHT OR TO THE LEFT     */ALI  720\n LAB2..                                /*STEP TO THE LEFT             */ALI  730\n         JL   =JL+1,.                                                   ALI  740\n         K    =J-JL,.                                                   ALI  750\n         GO TO CONT,.                                                   ALI  760\n LAB3..                                /*STEP TO THE RIGHT            */ALI  770\n         JR   =JR+1,.                                                   ALI  780\n         K    =J+JR,.                                                   ALI  790\n CONT..                                                                 ALI  800\n         IF SW= 'E'                                                     ALI  810\n         THEN A    =Z1+FLOAT(K-1)*Z2,.                                  ALI  820\n         ELSE A    =X(K),.                                              ALI  830\n         FACT =XS-A,.                                                   ALI  840\n         IF SW='M'                                                      ALI  850\n         THEN DO,.                                                      ALI  860\n              DIST =ABS(FACT),.                                         ALI  870\n              IF DIST LT DIST1                                          ALI  880\n              THEN GO TO IDENT,.       /*ARGUMENTS NOT MONOTONIC      */ALI  890\n              DIST1=DIST,.                                              ALI  900\n              END,.                                                     ALI  910\n         ARG(I)=A,.                                                     ALI  920\n         VALI,VAL(I)=Y(K),.                                             ALI  930\n              DO II     =1 TO I-1,.    /*COMPUTE VAL(I)               */ALI  940\n              ARGI =ARG(II),.                                           ALI  950\n              H    =ARGI-A,.                                            ALI  960\n              IF H =0                                                   ALI  970\n              THEN GO TO IDENT,.                                        ALI  980\n              VALI =(VAL(II)*FACT-VALI                                  ALI  990\n                   *(XS-ARGI))/H,.                                      ALI 1000\n              END,.                                                     ALI 1010\n         DELT2=ABS(VALI-VALI1),.                                        ALI 1020\n         VALI1,VAL(I)=VALI,.                                            ALI 1030\n         IF I GT 2                                                      ALI 1040\n         THEN DO,.                                                      ALI 1050\n              IF DELT2 LE EPS          /*TEST ON ACCURACY             */ALI 1060\n              THEN GO TO STOP,.                                         ALI 1070\n              IF I GE 5                /*SINGLE PRECISION VERSION  /*S*/ALI 1080\n  /*          IF I GE 8                /*DOUBLE PRECISION VERSION  /*D*/ALI 1090\n              THEN IF DELT2 GE DELT1   /*TEST ON OSCILLATION          */ALI 1100\n              THEN GO TO OSCIL,.                                        ALI 1110\n              END,.                                                     ALI 1120\n         DELT1=DELT2,.                                                  ALI 1130\n         END,.                         /*END OF AITKEN-LOOP           */ALI 1140\n    I    =N,.                                                           ALI 1150\n    GO TO RETURN,.                                                      ALI 1160\n OSCIL..                                                                ALI 1170\n    ERROR='1',.                                                         ALI 1180\n    GO TO IDENT1,.                                                      ALI 1190\n IDENT..                                                                ALI 1200\n    ERROR='3',.                                                         ALI 1210\n IDENT1..                                                               ALI 1220\n    I    =I-1,.                                                         ALI 1230\n    GO TO RETURN,.                                                      ALI 1240\n STOP..                                                                 ALI 1250\n    ERROR='0',.                                                         ALI 1260\n RETURN..                                                               ALI 1270\n    YVAL =VAL(I),.                                                      ALI 1280\n    END,.                              /*END OF PROCEDURE ALI         */ALI 1290\n AHIM..                                                                 AHI   10\n /*********************************************************************/AHI   20\n /*                                                                   */AHI   30\n /*      AITKEN HERMITE SCHEME FOR INTERPOLATION OF FUNCTION VALUE    */AHI   40\n /*      FROM GIVEN MONOTONIC TABLE                                   */AHI   50\n /*                                                                   */AHI   60\n /*********************************************************************/AHI   70\n    PROCEDURE (X,Y,DY,DIM,ORDER,EPS,XVAL,YVAL),.                        AHI   80\n    DECLARE                                                             AHI   90\n         (DIM,DIMS,I,II,J,JJL,JJR,JL,JR,K,N,ORDER)                      AHI  100\n         BINARY FIXED,                                                  AHI  110\n         (X(*),Y(*),DY(*),ARG(MIN(DIM,ORDER)),VAL(2*MIN(DIM,ORDER)),    AHI  120\n         EPS,XVAL,YVAL,XST,DX,A,D,DD,DELT1,DELT2,DIST,DIST1,H,          AHI  130\n         H1,H2,VALI,VALI1,VALJ,VALJ1,XS,Y1,YS,Z1,Z2)                    AHI  140\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/AHI  150\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/AHI  160\n         (ERROR EXTERNAL,SW)                                            AHI  170\n         CHARACTER(1),.                                                 AHI  180\n    SW   ='M',.                        /*MONOTONIC ARGUMENTS          */AHI  190\n    J    =1,.                                                           AHI  200\n    D    =1E75,.                                                        AHI  210\n         DO I = 1 TO DIM,.             /*COMPUTE STARTING SUBSCRIPT J */AHI  220\n         DD   =ABS(XVAL-X(I)),.                                         AHI  230\n         IF DD LE D                                                     AHI  240\n         THEN DO,.                                                      AHI  250\n              D    =DD,.                                                AHI  260\n              J    =I,.                                                 AHI  270\n              END,.                                                     AHI  280\n         END,.                                                          AHI  290\n    ARG(1)=X(J),.                                                       AHI  300\n    GO TO COM,.                                                         AHI  310\n AHIE..                                                                 AHI  320\n /*********************************************************************/AHI  330\n /*                                                                   */AHI  340\n /*      AITKEN HERMITE SCHEME FOR INTERPOLATION OF FUNCTION VALUE    */AHI  350\n /*      FROM GIVEN EQUIDISTANT TABLE                                 */AHI  360\n /*                                                                   */AHI  370\n /*********************************************************************/AHI  380\n    ENTRY (XST,DX,Y,DY,DIM,ORDER,EPS,XVAL,YVAL),.                       AHI  390\n    SW   ='E',.                                                         AHI  400\n    Z1   =XST,.                        /*EQUIDISTANT ARGUMENTS        */AHI  410\n    Z2   =DX,.                                                          AHI  420\n    J    =1,.                                                           AHI  430\n    ARG(1)=Z1,.                                                         AHI  440\n    IF Z2= 0                                                            AHI  450\n    THEN GO TO COM,.                                                    AHI  460\n    J    =MAX(1,(XVAL-Z1)/Z2+1.5),.    /*COMPUTE STARTING SUBSCRIPT J */AHI  470\n    J    =MIN(DIM,J),.                                                  AHI  480\n    ARG(1)=Z1+FLOAT(J-1)*Z2,.                                           AHI  490\n COM..                                                                  AHI  500\n    ERROR='2',.                                                         AHI  510\n    XS   =XVAL,.                                                        AHI  520\n    YS   =YVAL,.                                                        AHI  530\n    DIMS =DIM,.                                                         AHI  540\n    N    =MIN(DIMS,ORDER),.                                             AHI  550\n    JL,JR=0,.                                                           AHI  560\n    VALI,VAL(1)=Y(J),.                                                  AHI  570\n    VALJ,VAL(2)=DY(J),.                                                 AHI  580\n    H2   =XS-ARG(1),.                                                   AHI  590\n    DIST1=ABS(H2),.                                                     AHI  600\n    IF N LE 1                                                           AHI  610\n    THEN DO,.                                                           AHI  620\n         IF N = 1                                                       AHI  630\n         THEN VAL(1)=VAL(I)+VAL(J)*H2,.                                 AHI  640\n         ELSE VAL(1)=YS,.                                               AHI  650\n         GO TO RETURN,.                                                 AHI  660\n         END,.                                                          AHI  670\n         DO I =2 TO N,.                /*TABLE SELECTION              */AHI  680\n         JJR  =J+JR,.                                                   AHI  690\n         IF JJR GE DIMS                                                 AHI  700\n         THEN GO TO LAB2,.                                              AHI  710\n         JJL  =J-JL,.                                                   AHI  720\n         IF JJL LE 1                                                    AHI  730\n         THEN GO TO LAB3,.                                              AHI  740\n         IF SW= 'E'                                                     AHI  750\n         THEN A    =(ARG(I-1)-XS)*Z2,. /*A=(ARG(I-1)-XVAL)*DX         */AHI  760\n         ELSE A    =ABS(X(JJR+1)-XS)                                    AHI  770\n              -ABS(X(JJL-1)-XS),.                                       AHI  780\n         IF A LE 0                                                      AHI  790\n         THEN GO TO LAB3,.                                              AHI  800\n LAB2..                                                                 AHI  810\n         JL   =JL+1,.                  /*STEP TO THE LEFT             */AHI  820\n         K    =J-JL,.                                                   AHI  830\n         GO TO CONT,.                                                   AHI  840\n LAB3..                                                                 AHI  850\n         JR   =JR+1,.                  /*STEP TO THE RIGHT            */AHI  860\n         K    =J+JR,.                                                   AHI  870\n CONT..                                                                 AHI  880\n         IF SW= 'E'                                                     AHI  890\n         THEN A    =Z1+FLOAT(K-1)*Z2,.                                  AHI  900\n         ELSE DO,.                                                      AHI  910\n              A    =X(K),.                                              AHI  920\n              DIST =ABS(XS-A),.                                         AHI  930\n              IF DIST LT DIST1                                          AHI  940\n              THEN GO TO IDENT,.       /*ARGUMENTS NOT MONOTONIC      */AHI  950\n              DIST1=DIST,.                                              AHI  960\n              END,.                                                     AHI  970\n         II   =I+I,.                                                    AHI  980\n         VALJ1=DY(K),.                 /*VAL(2*I)=DY(K)               */AHI  990\n         VALI1=Y(K),.                  /*VAL(2*I-1)=Y(K)              */AHI 1000\n         ARG(I)=A,.                                                     AHI 1010\n         VAL(II-3)=VALI+VALJ*H2,.                                       AHI 1020\n         H1   =H2,.                                                     AHI 1030\n         H2   =XS-A,.                                                   AHI 1040\n         H    =H1-H2,.                                                  AHI 1050\n         IF H = 0                                                       AHI 1060\n         THEN GO TO IDENT,.            /*TWO IDENTICAL ARGUMENTS      */AHI 1070\n         VAL(II-2)=VALI+(VALI1                                          AHI 1080\n              -VALI)*H1/H,.                                             AHI 1090\n         VALI =VALI1,.                                                  AHI 1100\n         VALJ =VALJ1,.                                                  AHI 1110\n         END,.                         /*END OF TABLE SELECTION       */AHI 1120\n    VAL(II-1)=VALI+VALJ*H2,.                                            AHI 1130\n    DELT2=0,.                          /*PREPARE AITKEN-SCHEME        */AHI 1140\n    Y1   =VAL(1),.                                                      AHI 1150\n         DO I = 1 TO N+N-2,.           /*START AITKEN-LOOP            */AHI 1160\n         YS   =Y1,.                                                     AHI 1170\n         DELT1=DELT2,.                                                  AHI 1180\n         H1   =ARG((I+3)/2),.                                           AHI 1190\n         Y1   =VAL(I+1),.                                               AHI 1200\n              DO K = I TO 1 BY -1,.                                     AHI 1210\n              H2   =ARG((K+1)/2),.                                      AHI 1220\n              H    =H2-H1,.                                             AHI 1230\n              IF H = 0                 /*COMPUTE DIAGONALS OF AITKEN- */AHI 1240\n              THEN GO TO IDENT,.       /*SCHEME                       */AHI 1250\n              Y1,VAL(K)=(VAL(K)*(XS-H1)                                 AHI 1260\n                   -Y1*(XS-H2))/H,.                                     AHI 1270\n              END,.                                                     AHI 1280\n         DELT2=ABS(YS-Y1),.            /*TEST ON ACCURACY             */AHI 1290\n         IF DELT2 LE EPS                                                AHI 1300\n         THEN GO TO STOP,.                                              AHI 1310\n         IF I GE 5                     /*SINGLE PRECISION VERSION  /*S*/AHI 1320\n  /*     IF I GE 8                     /*DOUBLE PRECISION VERSION  /*D*/AHI 1330\n         THEN IF DELT2 GE DELT1                                         AHI 1340\n         THEN GO TO OSCIL,.                                             AHI 1350\n         END,.                         /*END OF AITKEN-LOOP           */AHI 1360\n    GO TO RETURN,.                                                      AHI 1370\n OSCIL..                               /*DELT2 STARTS OSCILLATING     */AHI 1380\n    ERROR='1',.                                                         AHI 1390\n    VAL(1)=YS,.                                                         AHI 1400\n    GO TO RETURN,.                                                      AHI 1410\n IDENT..                                                                AHI 1420\n    VAL(1)=YS,.                                                         AHI 1430\n    ERROR='3',.                                                         AHI 1440\n    GO TO RETURN,.                                                      AHI 1450\n STOP..                                                                 AHI 1460\n    ERROR='0',.                                                         AHI 1470\n RETURN..                                                               AHI 1480\n    YVAL =VAL(1),.                                                      AHI 1490\n    END,.                              /*END OF PROCEDURE AHI         */AHI 1500\n ACFM..                                                                 ACFI  10\n /*********************************************************************/ACFI  20\n /*                                                                   */ACFI  30\n /*      CONTINUED FRACTION SCHEME FOR INTERPOLATION OF FUNCTION VALUE*/ACFI  40\n /*      FROM GIVEN MONOTONIC TABLE                                   */ACFI  50\n /*                                                                   */ACFI  60\n /*********************************************************************/ACFI  70\n    PROCEDURE (X,Y,DIM,ORDER,EPS,XVAL,YVAL),.                           ACFI  80\n    DECLARE                                                             ACFI  90\n         (DIM,I,J,K,N,II,III,JL,JR,JJL,JJR,DIMS,ORDER)                  ACFI 100\n         BINARY FIXED,                                                  ACFI 110\n         (X(*),Y(*),ARG(MIN(DIM,ORDER)),VAL(MIN(DIM,ORDER)),XVAL,A1,    ACFI 120\n         YVAL,XST,DX,EPS,XS,Z1,Z2,D,DD,VALI,ARGI,A,DIST,DIST1,H,DELT1,  ACFI 130\n         DELT2,ARGJ,P1,P2,P3,Q1,Q2,Q3,ZS,YS,ARGI1,VALI1,EPS1)           ACFI 140\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/ACFI 150\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/ACFI 160\n         (ERROR EXTERNAL,SW)                                            ACFI 170\n         CHARACTER (1),.                                                ACFI 180\n    SW   ='M',.                        /*MONOTONIC ARGUMENTS          */ACFI 190\n    J    =1,.                                                           ACFI 200\n    D    =1E75,.                                                        ACFI 210\n         DO I = 1 TO DIM,.                                              ACFI 220\n         DD   =ABS(XVAL-X(I)),.                                         ACFI 230\n         IF DD LE D                                                     ACFI 240\n         THEN DO,.                                                      ACFI 250\n              D    =DD,.                                                ACFI 260\n              J    =I,.                                                 ACFI 270\n              END,.                                                     ACFI 280\n         END,.                                                          ACFI 290\n    ARGI,ARG(1)=X(J),.                                                  ACFI 300\n    GO TO COM,.                                                         ACFI 310\n ACFE..                                                                 ACFI 320\n /*********************************************************************/ACFI 330\n /*                                                                   */ACFI 340\n /*      CONTINUED FRACTION SCHEME FOR INTERPOLATION OF FUNCTION VALUE*/ACFI 350\n /*      FROM GIVEN EQUIDISTANT TABLE                                 */ACFI 360\n /*                                                                   */ACFI 370\n /*********************************************************************/ACFI 380\n    ENTRY (XST,DX,Y,DIM,ORDER,EPS,XVAL,YVAL),.                          ACFI 390\n    SW   ='E',.                                                         ACFI 400\n    Z1   =XST,.                                                         ACFI 410\n    Z2   =DX,.                                                          ACFI 420\n    J    =1,.                                                           ACFI 430\n    ARGI,ARG(1)=Z1,.                                                    ACFI 440\n    IF Z2= 0                                                            ACFI 450\n    THEN GO TO COM,.                                                    ACFI 460\n    J    =MAX(1,(XVAL-Z1)/Z2+1.5),.    /*COMPUTE STARTING SUBSCRIPT J */ACFI 470\n    J    =MIN(DIM,J),.                                                  ACFI 480\n    ARGI,ARG(1)=Z1+FLOAT(J-1)*Z2,.                                      ACFI 490\n COM..                                                                  ACFI 500\n    EPS1 =1E-6,.                       /*SINGLE PRECISION VERSION  /*S*/ACFI 510\n  /*EPS1 =1E-13,.                      /*DOUBLE PRECISION VERSION  /*D*/ACFI 520\n    ERROR='2',.                                                         ACFI 530\n    XS   =XVAL,.                                                        ACFI 540\n    DIMS =DIM,.                                                         ACFI 550\n    N    =MIN(DIMS,ORDER),.                                             ACFI 560\n    Q2,DELT2,JL,JR=0,.                                                  ACFI 570\n    P3,YS,VAL(1)=Y(J),.                                                 ACFI 580\n    P2,Q3=1,.                                                           ACFI 590\n    A1   =XS-ARGI,.                                                     ACFI 600\n    DIST1=ABS(A1),.                                                     ACFI 610\n         DO I = 2 TO N,.               /*START TABLE SELECTION        */ACFI 620\n         JJR  =J+JR,.                                                   ACFI 630\n         IF JJR GE DIMS                /*TABLE SELECTION              */ACFI 640\n         THEN GO TO LAB2,.                                              ACFI 650\n         JJL  =J-JL,.                                                   ACFI 660\n         IF JJL LE 1                                                    ACFI 670\n         THEN GO TO LAB3,.                                              ACFI 680\n         IF SW= 'E'                                                     ACFI 690\n         THEN A    =-A1*Z2,.           /*A=(ARG(I-1)-XVAL)*DX         */ACFI 700\n         ELSE A    =ABS(X(JJR+1)                                        ACFI 710\n              -XS)-ABS(X(JJL                                            ACFI 720\n              -1)-XS),.                                                 ACFI 730\n         IF A LE 0                                                      ACFI 740\n         THEN GO TO LAB3,.                                              ACFI 750\n LAB2..                                                                 ACFI 760\n         JL   =JL+1,.                  /*STEP TO THE LEFT             */ACFI 770\n         K    =J-JL,.                                                   ACFI 780\n         GO TO CONT,.                                                   ACFI 790\n LAB3..                                                                 ACFI 800\n         JR   =JR+1,.                  /*STEP TO THE RIGHT            */ACFI 810\n         K    =J+JR,.                                                   ACFI 820\n CONT..                                                                 ACFI 830\n         IF SW= 'E'                                                     ACFI 840\n         THEN A    =Z1+FLOAT(K-1)*Z2,.                                  ACFI 850\n         ELSE A    =X(K),.                                              ACFI 860\n         A1   =XS-A,.                                                   ACFI 870\n         IF SW='M'                                                      ACFI 880\n         THEN DO,.                                                      ACFI 890\n              DIST =ABS(A1),.                                           ACFI 900\n              IF DIST LT DIST1                                          ACFI 910\n              THEN GO TO IDENT,.       /*ARGUMENTS NOT MONOTONIC      */ACFI 920\n              DIST1=DIST,.                                              ACFI 930\n              END,.                                                     ACFI 940\n         ARG(I)=A,.                                                     ACFI 950\n         VAL(I)=Y(K),.                                                  ACFI 960\n         END,.                         /*END OF TABLE SELECTION       */ACFI 970\n    A1   =XS-ARG(1),.                                                   ACFI 980\n         DO I = 2 TO N,.               /*START INTERPOLATION LOOP     */ACFI 990\n         II   =0,.                                                      ACFI1000\n         P1   =P2,.                    /*MOVE PARAMETERS P2,P3,Q2,Q3  */ACFI1010\n         Q1   =Q2,.                                                     ACFI1020\n         P2   =P3,.                                                     ACFI1030\n         Q2   =Q3,.                                                     ACFI1040\n         ZS   =YS,.                                                     ACFI1050\n         DELT1=DELT2,.                                                  ACFI1060\n         ARGI =ARG(I),.                                                 ACFI1070\n         VALI =VAL(I),.                                                 ACFI1080\n INVERT..                              /*COMPUTE INVERTED DIFFERENCES */ACFI1090\n         ARGI1=ARGI,.                                                   ACFI1100\n         VALI1=VALI,.                                                   ACFI1110\n              DO J = 1 TO I-1,.                                         ACFI1120\n              ARGJ =ARG(J),.                                            ACFI1130\n              H    =VALI-VAL(J),.                                       ACFI1140\n              IF ABS(H) LE ABS(VALI)*EPS1                               ACFI1150\n              THEN DO,.                                                 ACFI1160\n                   IF ARGI= ARGJ       /*ERROR RETURNS,IF TWO         */ACFI1170\n                   THEN GO TO IDENT,.  /*IDENTICAL ARGUMENTS EXIST    */ACFI1180\n                   IF J GE I-1                                          ACFI1190\n                   THEN DO,.                                            ACFI1200\n                        II   =II+1,.   /*INTERCHANGE ROW I WITH       */ACFI1210\n                        III  =I+II,.   /*ROW I+II                     */ACFI1220\n                        IF III GT N                                     ACFI1230\n                        THEN GO TO RETURN,.                             ACFI1240\n                        VALI =VAL(III),.                                ACFI1250\n                        VAL(III)=VALI1,.                                ACFI1260\n                        ARGI =ARG(III),.                                ACFI1270\n                        ARG(III)=ARGI1,.                                ACFI1280\n                        GO TO INVERT,.                                  ACFI1290\n                        END,.                                           ACFI1300\n                   VALI =1E75,.        /*VAL(I) = VAL(J), J LT I-1    */ACFI1310\n                   END,.                                                ACFI1320\n              ELSE VALI =(ARGI         /*VAL(I) NE VAL(J)             */ACFI1330\n                   -ARGJ)/H,.                                           ACFI1340\n              END,.                                                     ACFI1350\n         P3   =VALI*P2+A1*P1,.         /*COMPUTE INVERTED DIFFERENCES */ACFI1360\n         Q3   =VALI*Q2+A1*Q1,.         /*BY WALLIS-EULER SCHEME       */ACFI1370\n         VAL(I)=VALI,.                 /*GENERATE NEW VAL(I),ARG(I)   */ACFI1380\n         ARG(I)=ARGI,.                                                  ACFI1390\n         A1   =XS-ARGI,.                                                ACFI1400\n         IF Q3= 0                                                       ACFI1410\n         THEN YS   =1E75,.             /*Q3 = 0                       */ACFI1420\n         ELSE YS   =P3/Q3,.            /*Q3 NE 0                      */ACFI1430\n         DELT2=ABS(ZS-YS),.                                             ACFI1440\n         IF DELT2 LE EPS               /*TEST ON ACCURACY             */ACFI1450\n         THEN GO TO STOP,.                                              ACFI1460\n         IF I GE 8                     /*SINGLE PRECISION VERSION  /*S*/ACFI1470\n  /*     IF I GE 10                    /*DOUBLE PRECISION VERSION  /*D*/ACFI1480\n         THEN IF DELT2 GE DELT1                                         ACFI1490\n         THEN GO TO OSCIL,.                                             ACFI1500\n         END,.                         /*END OF INTERPOLATION LOOP    */ACFI1510\n    GO TO RETURN,.                                                      ACFI1520\n IDENT..                               /*ARG(I) = ARG(J) FOR I NE J   */ACFI1530\n    ERROR='3',.                                                         ACFI1540\n    GO TO RETURN,.                                                      ACFI1550\n OSCIL..                               /*DELT2 STARTS OSCILLATING     */ACFI1560\n    YS   =ZS,.                                                          ACFI1570\n    ERROR='1',.                                                         ACFI1580\n    GO TO RETURN,.                                                      ACFI1590\n STOP..                                                                 ACFI1600\n    ERROR='0',.                                                         ACFI1610\n RETURN..                                                               ACFI1620\n    YVAL =YS,.                                                          ACFI1630\n    END,.                              /*END OF PROCEDURE ACFI        */ACFI1640\n FFT..                                                                  FFT   10\n /*********************************************************************/FFT   20\n /*                                                                   */FFT   30\n /*      FAST  FOURIER  TRANSFORM  FOR ANY ONE-DIMENSIONAL ARRAY      */FFT   40\n /*                                                                   */FFT   50\n /*********************************************************************/FFT   60\n    PROCEDURE(A,M,OPT),.                                                FFT   70\n    DECLARE                                                             FFT   80\n         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */FFT   90\n         (OPT,COPT) CHARACTER(1),                                       FFT  100\n         (DA,DB,DC,DH,DS,RI)                                            FFT  110\n         BINARY FLOAT(53),                                              FFT  120\n         (A(*),S(2**(M-2)+1),AAR,                                       FFT  130\n         AAI,ABR,ABI,AW,CO,SI)                                          FFT  140\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/FFT  150\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/FFT  160\n         (I,ID,IND,IR,IST,                                              FFT  170\n         J,K,L,M,N,NH,NQ)                                               FFT  180\n         BINARY FIXED,.                                                 FFT  190\n    IF M LT 2                          /*TEST SPECIFIED DIMENSION M   */FFT  200\n    THEN DO ,.                                                          FFT  210\n         ERROR='P',.                   /*P MEANS WRONG PARAMETER      */FFT  220\n         GO TO RETURN,.                                                 FFT  230\n         END,.                                                          FFT  240\n    ERROR='0',.                        /*PRESET ERROR INDICATOR       */FFT  250\n    COPT =OPT,.                                                         FFT  260\n    N    =2**M,.                       /*INITIALIZE PARAMETERS        */FFT  270\n    NH   =N/10B,.                                                       FFT  280\n    NQ   =N/100B+2,.                                                    FFT  290\n    L    =NQ+1,.                                                        FFT  300\n    RI   =3.141592653589793E+00/NH,.   /*RI MEANS  2*PI/N             */FFT  310\n    DA,S(1)=0,.                        /*SET SINE FOR 0 AND PI/2      */FFT  320\n    DB,S(NQ-1)=1,.                                                      FFT  330\n    DS,S(2)=SIN(RI),.                                                   FFT  340\n    DC   =COS(RI),.                    /*******************************/FFT  350\n         DO I =3 TO N/1000B+1,.        /*CALCULATE SINE TERMS         */FFT  360\n         RI   =DC*DB,.                 /*BETWEEN  0  AND  PI/2        */FFT  370\n         S(L-I),DH=RI-DA,.             /*******************************/FFT  380\n         DA   =DB,.                                                     FFT  390\n         DB   =RI+DH,.                 /*CALCULATION IS DONE USING    */FFT  400\n         S(I) =DB*DS,.                 /*DOUBLE PRECISION ARITHMETIC  */FFT  410\n         END,.                                                          FFT  420\n    IF COPT= '2'                       /*'2' MEANS CALCULATION OF     */FFT  430\n    THEN GO TO REAL,.                  /*REAL FOURIER SERIES          */FFT  440\n    IF COPT= '3'                       /*'3' MEANS CALCULATION OF     */FFT  450\n    THEN GO TO INV,.                   /*COMPLEX FOURIER SERIES       */FFT  460\n    AW   =1/NH,.                                                        FFT  470\n         DO I =1 TO N,.                /*PREPARE VECTOR A FOR FINITE  */FFT  480\n         A(I) =A(I)*AW,.               /*FOURIER TRANSFORM            */FFT  490\n         END,.                         /*******************************/FFT  500\n INV..                                 /*REORDER INITIAL TERMS A(I)   */FFT  510\n    J    =1,.                          /*BY BIT REVERSAL TECHNIQUE    */FFT  520\n         DO I =1 TO N BY 2,.           /*******************************/FFT  530\n         IF J GT I                     /*IS BIT REVERSAL GREATER THAN */FFT  540\n         THEN DO,.                     /*INIT. BINARY REPRESENTATION  */FFT  550\n              AAR  =A(J),.                                              FFT  560\n              AAI  =A(J+1),.           /*INTERCHANGE A(I) WITH A(J)   */FFT  570\n              A(J) =A(I),.             /*AND  A(I+1)  WITH  A(J+1)    */FFT  580\n              A(J+1)=A(I+1),.                                           FFT  590\n              A(I) =AAR,.                                               FFT  600\n              A(I+1)=AAI,.                                              FFT  610\n              END,.                                                     FFT  620\n         K    =NH,.                                                     FFT  630\n              DO WHILE (J GT K),.      /*UPDATE  J  AND  K            */FFT  640\n              J    =J-K,.                                               FFT  650\n              K    =K/10B,.                                             FFT  660\n              END,.                                                     FFT  670\n         J    =J+K,.                   /*COMPUTE NEW BIT REVERSAL     */FFT  680\n         END,.                                                          FFT  690\n    IR,I =2,.                                                           FFT  700\n    ID   =NH,.                         /*******************************/FFT  710\n CPLX..                                /*COMPLEX FOURIER TRANSFORM    */FFT  720\n                                       /*WITH  N/2  ELEMENTS          */FFT  730\n    IST  =I+I,.                        /*******************************/FFT  740\n    IND  =1,.                                                           FFT  750\n         DO J =1 TO I BY 2,.                                            FFT  760\n         SI   =-S(IND),.               /*STORE SINE VALUES IN SI      */FFT  770\n         IF COPT= '3'                  /*CHANGE SIGN IN CASE OF       */FFT  780\n         THEN SI   =-SI,.              /*FOURIER SERIES               */FFT  790\n         CO   =S(NQ-IND),.             /*STORE COSINE VALUES IN CO    */FFT  800\n         IF J GE IR                                                     FFT  810\n         THEN DO,.                     /*MODIFY INDEX IND OF THE      */FFT  820\n              IND  =IND-ID,.           /*SINE VECTOR S                */FFT  830\n              CO   =-CO,.              /*COS(PI/2+B) = -SIN(B)        */FFT  840\n              END,.                                                     FFT  850\n         ELSE IND  =IND+ID,.                                            FFT  860\n                                       /*EXECUTE TRANSFORMATION-LOOP  */FFT  870\n              DO K =J TO N BY IST,.                                     FFT  880\n              L    =K+I,.                                               FFT  890\n              AAR  =CO*A(L)-SI*A(L+1),.                                 FFT  900\n              AAI  =CO*A(L+1)+SI*A(L),.                                 FFT  910\n              A(L) =A(K)-AAR,.         /*MODIFY AND RESTORE ELEMENTS  */FFT  920\n              A(L+1)=A(K+1)-AAI,.                                       FFT  930\n              A(K) =A(K)+AAR,.                                          FFT  940\n              A(K+1)=A(K+1)+AAI,.                                       FFT  950\n              END,.                                                     FFT  960\n         END,.                                                          FFT  970\n    IR   =I+1,.                        /*UPTATE PARAMETERS            */FFT  980\n    I    =IST,.                                                         FFT  990\n    ID   =ID/10B,.                                                      FFT 1000\n    IF I LE NH                                                          FFT 1010\n    THEN GO TO CPLX,.                  /*END OF OUTER LOOP            */FFT 1020\n    IF COPT= '1'                       /*'1'  AND  '3'  MEAN COMPLEX  */FFT 1030\n    THEN GO TO RETURN,.                /*FOURIER CALCULATIONS         */FFT 1040\n    IF COPT= '3'                                                        FFT 1050\n    THEN GO TO RETURN,.                /*******************************/FFT 1060\n REAL..                                /*REAL VALUES FROM (FOR)       */FFT 1070\n    I    =1,.                          /*COMPLEX FOURIER TRANSFORM    */FFT 1080\n         DO K =3 TO NH-1 BY 2,.        /*******************************/FFT 1090\n         J    =N-K+2,.                                                  FFT 1100\n         AAR  =A(K)  +A(J),.                                            FFT 1110\n         AAI  =A(K+1)-A(J+1),.                                          FFT 1120\n         ABR  =A(K+1)+A(J+1),.                                          FFT 1130\n         ABI  =A(J)  -A(K),.                                            FFT 1140\n         I    =I+1,.                                                    FFT 1150\n         SI   =S(I),.                  /*STORE SINE AND COSINE        */FFT 1160\n         CO   =S(NQ-I),.                                                FFT 1170\n         AW   = ABR*CO+ABI*SI,.                                         FFT 1180\n         ABI  =-ABI*CO+ABR*SI,.                                         FFT 1190\n         A(K) =( AAR+AW )*1E-1B,.                                       FFT 1200\n         A(K+1)=(-AAI+ABI)*1E-1B,.                                      FFT 1210\n         A(J) =( AAR-AW )*1E-1B,.                                       FFT 1220\n         A(J+1)=( AAI+ABI)*1E-1B,.                                      FFT 1230\n         END,.                                                          FFT 1240\n    AW   =A(1),.                                                        FFT 1250\n    IF COPT= '2'                       /*PREPARE  A(1),A(2)  FOR      */FFT 1260\n    THEN DO,.                          /*CALCULATION OF REAL FOURIER  */FFT 1270\n         A(1) =(AW+A(N+1)),.           /*SERIES                       */FFT 1280\n         A(2) =(AW-A(N+1)),.                                            FFT 1290\n         COPT = '3',.                  /*CHANGE INTERNAL OPTION TERM  */FFT 1300\n         GO TO INV,.                                                    FFT 1310\n         END,.                                                          FFT 1320\n    A(1) =(AW+A(2))*1E-1B,.            /*CALCULATE VALUES             */FFT 1330\n    A(N+1)=(AW-A(2))*1E-1B,.           /*A(1),A(2),A(N+1),A(N+2)      */FFT 1340\n    A(2) =0,.                                                           FFT 1350\n    A(N+2)=0,.                                                          FFT 1360\n RETURN..                                                               FFT 1370\n    END,.                              /*END OF PROCEDURE FFT         */FFT 1380\n FFTM..                                                                 FFTM  10\n /*********************************************************************/FFTM  20\n /*                                                                   */FFTM  30\n /*      FAST  FOURIER  TRANSFORM  FOR  MULTI-DIMENSIONAL  ARRAY      */FFTM  40\n /*                                                                   */FFTM  50\n /*********************************************************************/FFTM  60\n    PROCEDURE(A,M,NDIM,OPT),.                                           FFTM  70\n    DECLARE                                                             FFTM  80\n         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */FFTM  90\n         OPT CHARACTER(1),                                              FFTM 100\n         (A(*),PI,RI,RTH,TR,T2R,T2I,                                    FFTM 110\n         T3R,T3I,T4R,T4I,U1R,U1I,U2R,                                   FFTM 120\n         U2I,U3R,U3I,U4R,U4I,WR,WI,                                     FFTM 130\n         W2R,W2I,W3R,W3I)                                               FFTM 140\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/FFTM 150\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/FFTM 160\n         (I,IND,J,JM,K,K2,K3,K4,KDIF,                                   FFTM 170\n         KINC,KM,KMIN,L,LJ,LMAX,M(*),                                   FFTM 180\n         MM,MMAX,N(NDIM),NA,NAD,NB,                                     FFTM 190\n         NBH,NDIM,NIN,NT)                                               FFTM 200\n         BINARY FIXED,.                                                 FFTM 210\n    ERROR='P',.                        /*P MEANS WRONG PARAMETER      */FFTM 220\n    IF NDIM LT 1                       /*TEST NUMBER OF DIMENSIONS    */FFTM 230\n    THEN GO TO RETURN,.                                                 FFTM 240\n    NT   =2,.                                                           FFTM 250\n         DO I =1 TO NDIM,.                                              FFTM 260\n         N(I),K=10B**M(I),.            /*COMPUTE AND TEST DIMENSION   */FFTM 270\n         IF K LT 1                                                      FFTM 280\n         THEN GO TO RETURN,.           /*CALCULATE TOTAL NUMBER OF    */FFTM 290\n         NT   =NT*K,.                  /*ELEMENTS                     */FFTM 300\n         END,.                                                          FFTM 310\n                                       /*COMPUTE  PI  AND  RTH        */FFTM 320\n    PI   =3.141592653589793E+00,.                                       FFTM 330\n    RTH  =7.071067811865475E-01,.      /*RTH MEANS  SQRT(2)/2         */FFTM 340\n    NA   =2,.                          /*******************************/FFTM 350\n         DO IND =NDIM TO 1 BY -1,.     /*LOOP FOR EACH DIMENSION      */FFTM 360\n         NIN  =N(IND),.                /*******************************/FFTM 370\n         NB   =NA*NIN,.                                                 FFTM 380\n         IF NIN= 1                                                      FFTM 390\n         THEN GO TO MULTI,.                                             FFTM 400\n         NBH  =NB/10B,.                                                 FFTM 410\n         J    =1,.                     /*******************************/FFTM 420\n              DO I =1 TO NB BY NA,.    /*BIT REVERSAL TECHNIQUE       */FFTM 430\n              IF J LE I                /*******************************/FFTM 440\n              THEN GO TO MODI,.                                         FFTM 450\n              KM   =I+NA-2,.                                            FFTM 460\n              JM   =J-I,.                                               FFTM 470\n                   DO K =I TO KM BY 2,.                                 FFTM 480\n                        DO L =K TO NT BY NB,.                           FFTM 490\n                        LJ   =L+JM,.                                    FFTM 500\n                        WR   =A(L),.   /*INTERCHANGE A(L) WITH A(LJ)  */FFTM 510\n                        WI   =A(L+1),. /*AND  A(L+1)  WITH  A(LJ+1)   */FFTM 520\n                        A(L) =A(LJ),.                                   FFTM 530\n                        A(L+1)=A(LJ+1),.                                FFTM 540\n                        A(LJ)=WR,.                                      FFTM 550\n                        A(LJ+1)=WI,.                                    FFTM 560\n                        END,.                                           FFTM 570\n                   END,.                                                FFTM 580\n MODI..                                /*MODIFY PARAMETER  J  AND  K  */FFTM 590\n              K    =NBH,.                                               FFTM 600\n                   DO WHILE (J GT K),.                                  FFTM 610\n                   J    =J-K,.                                          FFTM 620\n                   K    =K/10B,.                                        FFTM 630\n                   END,.                                                FFTM 640\n              J    =J+K,.              /*COMPUTE NEW BIT REVERSAL     */FFTM 650\n              END,.                                                     FFTM 660\n         NAD  =NA+NA,.                                                  FFTM 670\n ODD..                                 /*TEST FOR ODD M(IND)          */FFTM 680\n         IF NIN LT 2                                                    FFTM 690\n         THEN GO TO LEN4,.             /*M(IND) IS EVEN,    NIN = 1   */FFTM 700\n         IF NIN= 2                                                      FFTM 710\n         THEN GO TO LEN2,.             /*M(IND) IS ODD,     NIN = 2   */FFTM 720\n         NIN  =NIN/100B,.                                               FFTM 730\n         GO TO ODD,.                   /*******************************/FFTM 740\n LEN2..                                /*TRANSFORM WITH LENGTH 2      */FFTM 750\n              DO I =1 TO NA BY 2,.     /*******************************/FFTM 760\n                   DO K =I TO NT BY NAD,.                               FFTM 770\n                   L    =K+NA,.                                         FFTM 780\n                   WR   =A(L),.                                         FFTM 790\n                   WI   =A(L+1),.                                       FFTM 800\n                   A(L) =A(K)-WR,.     /*MODIFY AND RESTORE ELEMENTS  */FFTM 810\n                   A(L+1)=A(K+1)-WI,.                                   FFTM 820\n                   A(K) =A(K)+WR,.                                      FFTM 830\n                   A(K+1)=A(K+1)+WI,.                                   FFTM 840\n                   END,.                                                FFTM 850\n              END,.                    /*******************************/FFTM 860\n LEN4..                                /*FAST  FOURIER  TRANSFORMS    */FFTM 870\n         MMAX =NA,.                    /*WITH  LENGTH  4              */FFTM 880\n MAIN..                                /*******************************/FFTM 890\n         IF MMAX GE NBH                                                 FFTM 900\n         THEN GO TO MULTI,.                                             FFTM 910\n         MM   =MMAX+MMAX,.                                              FFTM 920\n         LMAX =MAX(NAD,MMAX/10B),.                                      FFTM 930\n              DO I =NA TO LMAX BY NAD,./*EXECUTE LOOP FOR CALCULATION */FFTM 940\n              J    =I,.                /*OF ANGLES FOR SPECIFIC MMAX  */FFTM 950\n              IF MMAX LE NA                                             FFTM 960\n              THEN GO TO INITL,.                                        FFTM 970\n              RI   =-PI*J/MM,.                                          FFTM 980\n              IF OPT='1'                                                FFTM 990\n              THEN RI   =-RI,.         /*CHANGE SIGN FOR CALCULATION  */FFTM1000\n              WR   =COS(RI),.          /*OF FOURIER SERIES            */FFTM1010\n              WI   =SIN(RI),.                                           FFTM1020\n DOUBLE..                                                               FFTM1030\n              W2R  =WR*WR-WI*WI,.      /*COMPUTE COSINE AND SINE      */FFTM1040\n              W2I  =WR*WI*10E+00B,.    /*FOR   2*RI   AND   3*RI      */FFTM1050\n              W3R  =W2R*WR-W2I*WI,.                                     FFTM1060\n              W3I  =W2R*WI+W2I*WR,.                                     FFTM1070\n INITL..                               /*INITIALIZE L AS INDEX FOR    */FFTM1080\n              L    =1,.                /*MULTIDIMENSIONAL CALCULATIONS*/FFTM1090\n STRT..                                                                 FFTM1100\n              IF MMAX= NA              /*COMPUTE START VALUE KMIN FOR */FFTM1110\n              THEN KMIN =L,.           /*TRANSFORMATION LOOP          */FFTM1120\n              ELSE KMIN =L+NIN*J,.                                      FFTM1130\n              KDIF =NIN*MMAX,.                                          FFTM1140\n INCR..                                /*COMPUTE INCREMENT FOR THE    */FFTM1150\n              KINC =KDIF*100B,.        /*TRANSFORMATION LOOP          */FFTM1160\n                   DO K =KMIN TO NT BY KINC,.                           FFTM1170\n                   K2   =K +KDIF,.                                      FFTM1180\n                   K3   =K2+KDIF,.     /*K,K2,K3,K4  ARE PARAMETERS   */FFTM1190\n                   K4   =K3+KDIF,.     /*FOR OPERATION WITH LENGTH 4  */FFTM1200\n                   IF MMAX= NA         /*WITHOUT MULTIPLICATIONS      */FFTM1210\n                   THEN DO,.                                            FFTM1220\n                        U1R  =A(K)   +A(K2),.                           FFTM1230\n                        U1I  =A(K+1) +A(K2+1),.                         FFTM1240\n                        U2R  =A(K3)  +A(K4),.                           FFTM1250\n                        U2I  =A(K3+1)+A(K4+1),.                         FFTM1260\n                        U3R  =A(K)   -A(K2),.                           FFTM1270\n                        U3I  =A(K+1) -A(K2+1),.                         FFTM1280\n                        U4R  =A(K3+1)-A(K4+1),.                         FFTM1290\n                        U4I  =A(K4)  -A(K3),.                           FFTM1300\n                        END,.                                           FFTM1310\n                   ELSE DO,.                                            FFTM1320\n                        T2R  =W2R*A(K2)  -W2I*A(K2+1),.                 FFTM1330\n                        T2I  =W2R*A(K2+1)+W2I*A(K2),.                   FFTM1340\n                        T3R  =WR *A(K3)  -WI *A(K3+1),.                 FFTM1350\n                        T3I  =WR *A(K3+1)+WI *A(K3),.                   FFTM1360\n                        T4R  =W3R*A(K4)  -W3I*A(K4+1),.                 FFTM1370\n                        T4I  =W3R*A(K4+1)+W3I*A(K4),.                   FFTM1380\n                        U1R  =A(K)  +T2R,.                              FFTM1390\n                        U1I  =A(K+1)+T2I,.                              FFTM1400\n                        U2R  =T3R   +T4R,.                              FFTM1410\n                        U2I  =T3I   +T4I,.                              FFTM1420\n                        U3R  =A(K)  -T2R,.                              FFTM1430\n                        U3I  =A(K+1)-T2I,.                              FFTM1440\n                        U4R  =T3I   -T4I,.                              FFTM1450\n                        U4I  =T4R   -T3R,.                              FFTM1460\n                        END,.                                           FFTM1470\n                   IF OPT= '1'         /*IN CASE OF FOURIER SERIES    */FFTM1480\n                   THEN DO,.                                            FFTM1490\n                        U4R  =-U4R,.                                    FFTM1500\n                        U4I  =-U4I,.                                    FFTM1510\n                        END,.                                           FFTM1520\n                   A(K) =U1R+U2R,.     /*COMPUTE AND STORE NEW VALUES */FFTM1530\n                   A(K+1)=U1I+U2I,.                                     FFTM1540\n                   A(K2)=U3R+U4R,.                                      FFTM1550\n                   A(K2+1)=U3I+U4I,.                                    FFTM1560\n                   A(K3)=U1R-U2R,.                                      FFTM1570\n                   A(K3+1)=U1I-U2I,.                                    FFTM1580\n                   A(K4)=U3R-U4R,.                                      FFTM1590\n                   A(K4+1)=U3I-U4I,.                                    FFTM1600\n                   END,.                                                FFTM1610\n              KMIN =L+(KMIN-L)*100B,.  /*UPDATE KMIN, KDIF AND IF NEC-*/FFTM1620\n              KDIF =KINC,.             /*ESSARY REPEAT TRANSFORMATION */FFTM1630\n              IF KDIF LE NBH           /*LOOP IN ORDER TO GET FINAL   */FFTM1640\n              THEN GO TO INCR,.        /*VALUES                       */FFTM1650\n                                       /*                             */FFTM1660\n              L    =L+2,.              /*MODIFY L AND -IF NECESSARY-  */FFTM1670\n              IF L LT NA               /*START ANOTHER TRANSFORM      */FFTM1680\n              THEN GO TO STRT,.                                         FFTM1690\n                                       /*                             */FFTM1700\n              J    =J+LMAX,.           /*MODIFY J AND -IF NECESSARY-  */FFTM1710\n              IF J LE MMAX             /*THE ANGLE                    */FFTM1720\n              THEN DO,.                                                 FFTM1730\n                   TR   =WR,.          /*IF Z = COS(RI) + I*SIN(RI)   */FFTM1740\n                   WR   =(TR+WI)*RTH,. /*THEN Z IS SUBSTITUTED BY     */FFTM1750\n                   WI   =(WI-TR)*RTH,. /*Z  = Z * EXP(-PI/4 * I)      */FFTM1760\n                   IF OPT= '1'                                          FFTM1770\n                   THEN DO,.                                            FFTM1780\n                        TR   =WR,.     /*Z IS SUBSTITUTED BY          */FFTM1790\n                        WR   =-WI,.    /*Z  = Z * EXP(+PI/4 * I)      */FFTM1800\n                        WI   =TR,.                                      FFTM1810\n                        END,.                                           FFTM1820\n                   GO TO DOUBLE,.                                       FFTM1830\n                   END,.                                                FFTM1840\n              END,.                                                     FFTM1850\n         NIN  =3-NIN,.                 /*UPDATE NIN AND DOUBLE MMAX   */FFTM1860\n         MMAX =MM,.                                                     FFTM1870\n         GO TO MAIN,.                                                   FFTM1880\n MULTI..                                                                FFTM1890\n         NA   =NB,.                                                     FFTM1900\n         END,.                                                          FFTM1910\n    ERROR='0',.                        /*SUCCESSFUL FOURIER TRANSFORM */FFTM1920\n RETURN..                                                               FFTM1930\n    END,.                              /*END OF PROCEDURE FFTM        */FFTM1940\n APLL..                                                                 APLL  10\n /*********************************************************************/APLL  20\n /*                                                                   */APLL  30\n /*      SET UP NORMAL EQUATIONS FOR A LINEAR LEAST SQUARES           */APLL  40\n /*      FIT TO A GIVEN DISCRETE FUNCTION                             */APLL  50\n /*                                                                   */APLL  60\n /*********************************************************************/APLL  70\n    PROCEDURE(FCT,N,IP,WORK),.                                          APLL  80\n    DECLARE                                                             APLL  90\n         FCT ENTRY,                                                     APLL 100\n         (WORK(*),P(IP+1),A,WGT)                                        APLL 110\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/APLL 120\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/APLL 130\n         (N,IP,LIP,IP1,I,J,K,L,M)                                       APLL 140\n         BINARY FIXED,                                                  APLL 150\n         ERROR EXTERNAL CHARACTER(1),.                                  APLL 160\n    ERROR='0',.                        /*SUCCESSFUL OPERATION         */APLL 170\n    LIP  =IP,.                                                          APLL 180\n    IP1  =LIP+1,.                                                       APLL 190\n    M    =IP1*(IP1+1)/2,.                                               APLL 200\n         DO I =1 TO M,.                /*INIT. RIGHT HAND SIDE AND    */APLL 210\n         WORK(I)=0,.                   /*COEFFICIENT MATRIX EQUAL ZERO*/APLL 220\n         END,.                                                          APLL 230\n    IF N GT 0                          /*TEST SPECIFIED DIMENSIONS    */APLL 240\n    THEN IF LIP GT 0                                                    APLL 250\n    THEN IF N GT LIP                                                    APLL 260\n    THEN DO I =1 TO N,.                /*FOR I-TH ARGUMENT            */APLL 270\n                                       /*PROVIDE VALUES OF GIVEN FCT.,*/APLL 280\n         CALL FCT(I,N,LIP,P,WGT),.     /*WEIGHT AND FUNDAMENTAL FCT.  */APLL 290\n         IF ERROR NE '0'                                                APLL 300\n         THEN GO TO OUT,.              /*ERROR IN PROCEDURE FCT.      */APLL 310\n         J    =0,.                                                      APLL 320\n              DO K =1 TO IP1,.         /*COMPUTE COEFFICIENT MATRIX   */APLL 330\n              A    =P(K)*WGT,.         /*AND RIGHT HAND SIDE          */APLL 340\n                   DO L =1 TO K,.                                       APLL 350\n                   J    =J+1,.                                          APLL 360\n                   WORK(J)=WORK(J)+P(L)*A,.                             APLL 370\n                   END,.                                                APLL 380\n              END,.                                                     APLL 390\n         END,.                                                          APLL 400\n    ELSE ERROR='D',.                   /*ERROR IN SPECIFIED DIMENSIONS*/APLL 410\n OUT..                                                                  APLL 420\n    END,.                              /*END OF PROCEDURE APLL        */APLL 430\n APC1..                                                                 APC   10\n /*********************************************************************/APC   20\n /*                                                                   */APC   30\n /*      SET UP NORMAL EQUATIONS OF WEIGHTED LEAST SQUARES FIT IN     */APC   40\n /*      TERMS OF CHEBYSHEV POLINOMIALS FOR A GIVEN DESCRETE FUNCTION */APC   50\n /*                                                                   */APC   60\n /*********************************************************************/APC   70\n    PROCEDURE(X,Y,W,N,IP,X0,X1,WORK),.                                  APC   80\n    DECLARE                                                             APC   90\n         (X(*),Y(*),W(*),X0,X1,WORK(*),                                 APC  100\n         A,B,C,TI,FI,SUM)                                               APC  110\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/APC  130\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/APC  120\n         (N,IP,NN,LN,IP1,IPP,EP1,                                       APC  140\n         EP,EPE,I,K,KK,L,LL)                                            APC  150\n         BINARY FIXED,                                                  APC  160\n         (TEST,ERROR EXTERNAL)CHARACTER(1),.                            APC  170\n    TEST ='1',.                        /*WEIGHTS ARE GIVEN            */APC  180\n    GO TO COMMON,.                                                      APC  190\n APC2..                                                                 APC  200\n /*********************************************************************/APC  210\n /*                                                                   */APC  220\n /*      SET UP NORMAL EQUATIONS OF LEAST SQUARES FIT IN TERMS OF     */APC  230\n /*      CHEBYCHEV POLYNOMIALS FOR A GIVEN DISCRETE FUNCTION          */APC  240\n /*                                                                   */APC  250\n /*********************************************************************/APC  260\n    ENTRY(X,Y,N,IP,X0,X1,WORK),.                                        APC  270\n    TEST ='2',.                        /*CONSTANT WEIGHTING ASSUMED   */APC  280\n COMMON..                                                               APC  290\n    LN   =N,.                                                           APC  300\n    NN   =LN+LN,.                                                       APC  310\n    IPP  =IP+IP,.                                                       APC  320\n    IP1  =IP+1,.                                                        APC  330\n    EP   =(IP*IP1)/2,.                                                  APC  340\n    EP1  =EP+1,.                                                        APC  350\n    EPE  =EP+IP1,.                                                      APC  360\n    ERROR='D',.                        /*PRESET ERROR INDICATOR       */APC  370\n    IF LN GT 1                         /*TEST SPECIFIED DIMENSIONS    */APC  380\n    THEN IF IP1 GE 1                                                    APC  390\n    THEN IF LN GE IP1                                                   APC  400\n    THEN DO,.                                                           APC  410\n         A,B  =X(1),.                                                   APC  420\n              DO I =2 TO N,.                                            APC  430\n              C    =X(I),.                                              APC  440\n              IF C LT A                                                 APC  450\n              THEN A    =C,.           /*SET A TO INF(X(I))           */APC  460\n              ELSE IF C GT B                                            APC  470\n              THEN B    =C,.           /*SET B TO SUP(X(I))           */APC  480\n              END,.                                                     APC  490\n         X1   =B-A,.                                                    APC  500\n         IF X1 LE 0                                                     APC  510\n         THEN DO,.                                                      APC  520\n              ERROR='A',.              /*ERROR RETURN FOR             */APC  530\n              GO TO OUT,.              /*DEGENERATE ARGUMENT RANGE    */APC  540\n              END,.                                                     APC  550\n         X0   =-(A+B)/X1,.                                              APC  560\n         X1   =2/X1,.                                                   APC  570\n              DO I =1 TO IPP-1,        /*INIT. RIGHT HAND SIDE AND    */APC  580\n                   EP1 TO EPE-1,.      /*WORKING STORAGE              */APC  590\n              WORK(I)=0,.                                               APC  600\n              END,.                                                     APC  610\n         SUM  =0,.                     /*INIT. SQUARE SUM OF FCT.VAL. */APC  620\n              DO I =1 TO LN,.                                           APC  630\n              TI   =X1*X(I)+X0,.       /*TRANSFORM ARGUMENT TO (-1,1) */APC  640\n              A    =1,.                                                 APC  650\n              IF TEST='1'              /*SHOULD WEIGHTS BE USED, THEN */APC  660\n              THEN A    =W(I),.        /*SET A TO I-TH WEIGHT         */APC  670\n              B    =TI*A,.                                              APC  680\n              FI   =Y(I),.             /*SET FI TO FUNCTION VALUE     */APC  690\n              SUM  =SUM+FI*FI*A,.      /*UPDATE SQUARES SUM           */APC  700\n              FI   =FI+FI,.                                             APC  710\n                   DO L =1 TO IPP-1,.  /*UPDATE RIGHT HAND SIDE AND   */APC  720\n                   C    =A,.           /*WORKING STORAGE              */APC  730\n                   LL   =L,.                                            APC  740\n REP..                                                                  APC  750\n                   WORK(LL)=WORK(LL)+C,.                                APC  760\n                   IF LL LE IP                                          APC  770\n                   THEN DO,.                                            APC  780\n                        LL   =EP+LL,.                                   APC  790\n                        C    =C*FI,.                                    APC  800\n                        GO TO REP,.                                     APC  810\n                        END,.                                           APC  820\n                   C    =TI*B,.                                         APC  830\n                   C    =C-A+C,.                                        APC  840\n                   A    =B,.                                            APC  850\n                   B    =C,.                                            APC  860\n                   END,.                                                APC  870\n              END,.                                                     APC  880\n         LL   =EP1,.                                                    APC  890\n              DO K =IPP TO 2 BY -2,.   /*COMPUTE COEFFICIENT MATRIX   */APC  900\n              L    =1,.                                                 APC  910\n              KK   =K,.                                                 APC  920\n STORE..                                                                APC  930\n              LL   =LL-1,.                                              APC  940\n              KK   =KK-1,.                                              APC  950\n              WORK(LL)=WORK(KK)+WORK(L),.                               APC  960\n              L    =L+1,.                                               APC  970\n              IF KK GT L                                                APC  980\n              THEN GO TO STORE,.                                        APC  990\n              END,.                                                     APC 1000\n         WORK(EPE)=SUM+SUM,.           /*INSERT SQUARE SUM OF FCT.VAL.*/APC 1010\n         ERROR='0',.                   /*SUCCESSFUL OPERATION         */APC 1020\n         END,.                                                          APC 1030\n OUT..                                                                  APC 1040\n    END,.                              /*END OF PROCEDURE APC         */APC 1050\n ASN..                                                                  ASN   10\n /*********************************************************************/ASN   20\n /*                                                                   */ASN   30\n /*      SOLUTION OF NORMAL-EQUATIONS UP TO SPECIFIED ORDER           */ASN   40\n /*      OR PRECISION.                                                */ASN   50\n /*      ALL FITS OF SMALLER ORDER ARE CALCULATED OPTIONALLY.         */ASN   60\n /*                                                                   */ASN   70\n /*********************************************************************/ASN   80\n    PROCEDURE(WORK,IP,IRES,OPT,EPS,ETA),.                               ASN   90\n    DECLARE                                                             ASN  100\n         S BINARY FLOAT(53),                                            ASN  110\n         (WORK(*),EPS,ETA,TOL,TEST,                                     ASN  120\n         AUX(IP),WE,Q,R)                                                ASN  130\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/ASN  140\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/ASN  150\n         (IP,IP1,RS,DG,DDG,L,LL,                                        ASN  160\n         EPE,LLL,DL,IPR,IRES,K,EP,                                      ASN  170\n         I,II,LL1,DLK)                                                  ASN  180\n         BINARY FIXED,                                                  ASN  190\n         (OPT,CHECK,ERROR EXTERNAL)                                     ASN  200\n         CHARACTER(1),.                                                 ASN  210\n    IF ETA NE 0                        /*PRESET ERROR INDICATOR       */ASN  220\n    THEN CHECK='A',.                   /*A= ACCURACY NOT REACHED      */ASN  230\n    ELSE CHECK='0',.                   /*0= SUCCESSFUL OPERATION      */ASN  240\n    IP1  =IP+1,.                                                        ASN  250\n    IF IP1 LE 1                                                         ASN  260\n    THEN DO,.                                                           ASN  270\n         CHECK='D',.                   /*ERROR IN SPECIFIED DIMENSION */ASN  280\n         GO TO OUT,.                                                    ASN  290\n         END,.                                                          ASN  300\n    EP   =IP*IP1/2,.                   /*SET UP ADDRESSING CONSTANTS  */ASN  310\n    EPE  =EP+IP1,.                                                      ASN  320\n    WE   =WORK(EPE),.                                                   ASN  330\n    IF CHECK='A'                       /*SET TEST TO ABSOLUTE VALUE OF*/ASN  340\n    THEN TEST =ABS(ETA*WE),.           /*SPEC. ACCURACY FOR WANTED FIT*/ASN  350\n    IPR,LL=0,.                                                          ASN  360\n    L,LL1=1,.                                                           ASN  370\n                                       /*******************************/ASN  380\n         DO I =1 TO IP,.               /*FACTORIZE GIVEN MATRIX       */ASN  390\n         LL   =LL+I,.                  /*******************************/ASN  400\n         K    =0,.                                                      ASN  410\n ITER..                                /*COMPUTE ELEMENTS OF I-TH ROW */ASN  420\n         S    =0,.                                                      ASN  430\n              DO II=LL1 TO LL-1,.      /*MODIFY ELEMENTS IN I-TH      */ASN  440\n              S    =S+MULTIPLY(        /*ROW BY SCALAR PRODUCT OF     */ASN  450\n                   WORK(II),           /*ELEMENTS OF FACTORIZATION    */ASN  460\n                   WORK(L),53),.       /*IN ROW AND COLUMN CROSSING   */ASN  470\n              L    =L+1,.              /*AT CURRENT ELEMENT           */ASN  480\n              END,.                                                     ASN  490\n         R    =WORK(L),.                                                ASN  500\n         S    =R-S,.                                                    ASN  510\n         IF L =LL                      /*TEST FOR LOSS OF SIGNIFICANCE*/ASN  520\n         THEN DO,.                     /*IN PIVOTAL DIVISOR           */ASN  530\n              IF S LE ABS(EPS*R)                                        ASN  540\n              THEN DO,.                                                 ASN  550\n                   CHECK='P',.         /*MARK LOSS OF SIGNIFICANCE    */ASN  560\n                   GO TO SOL,.         /*BYPASS FURTHER FACTORIZATION */ASN  570\n                   END,.                                                ASN  580\n              Q,S  =SQRT(S),.          /*CALCULATE DIAGONAL ELEMENT   */ASN  590\n              END,.                    /*OF FACTORIZATION             */ASN  600\n         ELSE S    =S/Q,.                                               ASN  610\n         WORK(L)=S,.                   /*STORE FINAL ELEMENT          */ASN  620\n         K    =K+1,.                   /*OF FACTORIZATION             */ASN  630\n         L    =L+K,.                                                    ASN  640\n         IF K+I LE IP1                 /*TEST IF ALL ELEMENTS OF I-TH */ASN  650\n         THEN GO TO ITER,.             /*ROW ARE COMPUTED             */ASN  660\n         LL1,L=LL+1,.                                                   ASN  670\n         WE   =WE-S*S,.                                                 ASN  680\n         IPR  =IPR+1,.                                                  ASN  685\n         AUX(I)=WE,.                   /*STORE SQUARESUM OF RESIDUALS */ASN  690\n         IF CHECK='A'                  /*TEST ON SPECIFIED PRECISION  */ASN  700\n         THEN IF WE LT TEST                                             ASN  710\n         THEN DO,.                                                      ASN  720\n              CHECK='0',.              /*SUCCESSFUL OPERATION         */ASN  730\n              GO TO SOL,.              /*RESP. ETA ACCURACY REACHED   */ASN  740\n              END,.                                                     ASN  750\n         END,.                         /*END OF FACTORIZATION         */ASN  770\n    IF OPT='F'                                                          ASN  780\n    THEN GO TO OUT,.                                                    ASN  790\n    LL   =EPE,.                        /*******************************/ASN  800\n                                       /*COMPUTE LEAST SQUARE FIT(S)  */ASN  810\n SOL..                                 /*******************************/ASN  820\n    RS   =EP+IPR,.                     /*INIT. ADDRESS RIGHT HAND SIDE*/ASN  830\n    DG   =LL-1-IPR,.                   /*INIT. ADDRESS DIAGONAL TERM  */ASN  840\n         DO I =IPR TO 1 BY -1,.                                         ASN  850\n         Q    =WORK(DG),.              /*SET Q TO I-TH DIAGONAL TERM  */ASN  860\n         R    =WORK(RS),.              /*SET R TO I-TH RIGHT HAND SIDE*/ASN  870\n         WORK(RS)=AUX(I),.             /*INSERT I-TH RESIDUAL         */ASN  880\n         RS   =RS-1,.                                                   ASN  890\n         DG   =DG-I,.                                                   ASN  900\n         LL,L =LL-1,.                                                   ASN  910\n         K    =IPR-I,.                                                  ASN  920\n         DL,DLK=IPR,.                                                   ASN  930\n REP..                                 /*CALCULATE THE I-TH ELEMENT   */ASN  940\n         L,LLL=L-DL,.                  /*FOR THE HIGHEST FIT AND      */ASN  950\n         DL,DLK=DL-1,.                 /*OPTIONALLY OF ALL LOWER FITS */ASN  960\n         S    =0,.                                                      ASN  970\n              DO II=L+K TO L+1 BY -1,. /*FORM SCALAR PRODUCTS NEEDED  */ASN  980\n              S    =S+MULTIPLY(        /*WITH BACK SUBSTITUTION       */ASN  990\n                   WORK(LLL),                                           ASN 1000\n                   WORK(II),53),.                                       ASN 1010\n              LLL  =LLL-DLK,.                                           ASN 1020\n              DLK  =DLK-1,.                                             ASN 1030\n              END,.                                                     ASN 1040\n         WORK(L)=(R-S)/Q,.                                              ASN 1050\n         K    =K-1,.                                                    ASN 1060\n         IF OPT='A'                    /*REPEAT IF ALL FITS SHOULD    */ASN 1070\n         THEN IF K GE 0                /*BE CALCULATED                */ASN 1080\n         THEN GO TO REP,.                                               ASN 1090\n         END,.                                                          ASN 1100\n OUT..                                                                  ASN 1110\n    IRES =IPR,.                                                         ASN 1120\n    ERROR=CHECK,.                                                       ASN 1130\n    END,.                              /*END OF PROCEDURE ASN         */ASN 1140\n SG13..                                                                 SG13  10\n /*********************************************************************/SG13  20\n /*                                                                   */SG13  30\n /*      SMOOTH A TABLED FUNCTION USING                               */SG13  40\n /*      A FIRST DEGREE POLYNOMIAL FIT RELEVANT TO THREE POINTS       */SG13  50\n /*                                                                   */SG13  60\n /*********************************************************************/SG13  70\n    PROCEDURE(X,Y,Z,DIM),.                                              SG13  80\n    DECLARE                                                             SG13  90\n         (X(*),Y(*),Z(*),XA,XB,XC,                                      SG13 100\n         YA,YB,YC,YM,TA,TB,TC,XM)                                       SG13 110\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/SG13 120\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/SG13 130\n         (DIM,I)BINARY FIXED,                                           SG13 140\n         SWITCH CHARACTER(1),                                           SG13 150\n         ERROR EXTERNAL CHARACTER(1),.                                  SG13 160\n    SWITCH='G',.                       /*MARK GENERAL ARGUMENTS       */SG13 170\n    GOTO INIT,.                                                         SG13 180\n SE13..                                                                 SG13 190\n /*********************************************************************/SG13 200\n /*                                                                   */SG13 210\n /*      SMOOTH AN EQUIDISTANTLY TABLED FUNCTION USING                */SG13 220\n /*      A FIRST DEGREE POLYNOMIAL FIT RELEVANT TO THREE POINTS       */SG13 230\n /*                                                                   */SG13 240\n /*********************************************************************/SG13 250\n    ENTRY(Y,Z,DIM),.                                                    SG13 260\n    SWITCH='E',.                       /*MARK EQUIDISTANT ARGUMENTS   */SG13 270\n INIT..                                                                 SG13 280\n    IF DIM GE 3                        /*TEST SPECIFIED DIMENSION     */SG13 290\n    THEN DO,.                                                           SG13 300\n         YA   =Y(3),.                  /*MODIFICATION  YA = Y(0)      */SG13 310\n         YB   =Y(1),.                                                   SG13 320\n         IF SWITCH='G'                 /*TEST GENERAL CASE            */SG13 330\n         THEN DO,.                                                      SG13 340\n              XA   =X(3),.             /*MODIFICATION  XA = X(0)      */SG13 350\n              XB   =X(1),.                                              SG13 360\n              END,.                                                     SG13 370\n         ELSE YA   =YB+(YB-YA)/2,.     /*MODIFICATION  YA = Y(0)      */SG13 380\n              DO I = 2 TO DIM,.                                         SG13 390\n              YC   =Y(I),.                                              SG13 400\n              YM   =(YA+YB+YC)/3,.     /*SET YM TO ARITHMETIC MEAN    */SG13 410\n              IF SWITCH='G'            /*TEST GENERAL CASE            */SG13 420\n              THEN DO,.                                                 SG13 430\n                   XC   =X(I),.                                         SG13 440\n                   IF   (XB-XA)*                                        SG13 450\n                        (XC-XB) LE 0                                    SG13 460\n                   THEN ERROR='M',.    /*MARK NON-MONOTONIC TABLE     */SG13 470\n                   XM   =(XA+XB+XC)/3,.                                 SG13 480\n                   TA   =XA-XM,.                                        SG13 490\n                   TB   =XB-XM,.                                        SG13 500\n                   TC   =XC-XM,.                                        SG13 510\n                   XM   =TA*TA+TB*TB+TC*TC,.                            SG13 520\n                   IF XM GT 0                                           SG13 530\n                   THEN XM   =(TA*(YA-YB)+                              SG13 540\n                        TB*(YB-YM)+                                     SG13 550\n                        TC*(YC-YM))/XM,.                                SG13 560\n                   XA   =XB,.                                           SG13 570\n                   XB   =XC,.                                           SG13 580\n                   YM   =XM*TB+YM,.    /*SET YM TO WEIGHTED MEAN      */SG13 590\n                   END,.                                                SG13 600\n              Z(I-1)=YM,.              /*REPLACE Z(I-1) BY YM         */SG13 610\n              YA   =YB,.                                                SG13 620\n              YB   =YC,.                                                SG13 630\n              END,.                                                     SG13 640\n         IF SWITCH='G'                                                  SG13 650\n         THEN Z(DIM)=XM*(TC-TB)+YM,.   /*COMPUTE Z(DIM)  GENERAL CASE */SG13 660\n         ELSE Z(DIM)=YB+(YA-YM)/2,.    /*COMPUTE Z(DIM)  EQUID. CASE  */SG13 670\n         ERROR='0',.                   /*SUCCESSFUL OPERATION         */SG13 680\n         END,.                                                          SG13 690\n    ELSE ERROR='D',.                   /*ERROR IN SPECIFIED DIMENSION */SG13 700\n    END,.                              /*END OF PROCEDURE S13         */SG13 710\n SE15..                                                                 SE15  10\n /*********************************************************************/SE15  20\n /*                                                                   */SE15  30\n /*      SMOOTH AN EQUIDISTANTLY TABLED FUNCTION USING                */SE15  40\n /*      A FIRST DEGREE POLYNOMIAL FIT RELEVANT TO FIVE POINTS        */SE15  50\n /*                                                                   */SE15  60\n /*********************************************************************/SE15  70\n    PROCEDURE(Y,Z,DIM),.                                                SE15  80\n    DECLARE                                                             SE15  90\n         (Y(*),Z(*),YA,YB,YC,YD,YE)                                     SE15 100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/SE15 110\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/SE15 120\n         (DIM,I)BINARY FIXED,                                           SE15 130\n         ERROR EXTERNAL CHARACTER(1),.                                  SE15 140\n    IF DIM GE 5                        /*TEST SPECIFIED DIMENSION     */SE15 150\n    THEN DO,.                                                           SE15 160\n         YA   =Y(4),.                                                   SE15 170\n         YE   =Y(2),.                                                   SE15 180\n         YD   =Y(1),.                                                   SE15 190\n         YC   =YD+(YE-YA)/2,.          /*MODIFICATION, SET YC TO Y(0) */SE15 200\n         YB   =YC-Y(5)+YA,.            /*MODIFICATION, SET YB TO Y(-1)*/SE15 210\n              DO I =3 TO DIM,.                                          SE15 220\n              YA   =YB,.               /*REPLACE YA BY Y(I-4)         */SE15 230\n              YB   =YC,.               /*REPLACE YB BY Y(I-3)         */SE15 240\n              YC   =YD,.               /*REPLAGE YC BY Y(I-2)         */SE15 250\n              YD   =YE,.               /*REPLACE YD BY Y(I-1)         */SE15 260\n              YE   =Y(I),.             /*SET YE TO Y(I)               */SE15 270\n              Z(I-2)=(YA+YB+YC                                          SE15 280\n                   +YD+YE)/5,.         /*SET Y(I-2) TO ARITHMETIC MEAN*/SE15 290\n              END,.                                                     SE15 300\n         YA   =YC+YD+YE+YE,.                                            SE15 310\n         Z(DIM-1),YA=(YA+YA+YD+YB)/10,.                                 SE15 320\n         Z(DIM)=YA+YA-Z(DIM-2),.                                        SE15 330\n         ERROR='0',.                   /*SUCCESSFUL OPERATION         */SE15 340\n         END,.                                                          SE15 350\n    ELSE ERROR='1',.                   /*ERROR IN SPECIFIED DIMENSION */SE15 360\n    END,.                              /*END OF PROCEDURE S15         */SE15 370\n SE35..                                                                 SE35  10\n /*********************************************************************/SE35  20\n /*                                                                   */SE35  30\n /*      SMOOTH AN EQUIDISTANTLY TABLED FUNCTION USING                */SE35  40\n /*      A THIRD DEGREE POLYNOMIAL FIT RELEVANT TO FIVE POINTS        */SE35  50\n /*                                                                   */SE35  60\n /*********************************************************************/SE35  70\n    PROCEDURE(Y,Z,DIM),.                                                SE35  80\n    DECLARE                                                             SE35  90\n         (Y(*),Z(*),YA,YB,YC,                                           SE35 100\n         DA,DB,DAB,DBC)                                                 SE35 110\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/SE35 120\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/SE35 130\n         (DIM,I)BINARY FIXED,                                           SE35 140\n         ERROR EXTERNAL CHARACTER(1),.                                  SE35 150\n    IF DIM GE 5                                                         SE35 160\n    THEN DO,.                                                           SE35 170\n         YA   =Y(4),.                                                   SE35 180\n         YB   =Y(1),.                                                   SE35 190\n         YC   =Y(2),.                                                   SE35 200\n         DBC  =YB-YC+YA-YC+YA-Y(5),.                                    SE35 210\n         DB   =(DBC+DBC                                                 SE35 220\n              +YA+YB+YB)/3-YC,.        /*MODIFICATION  DB =DELTA2(1)  */SE35 230\n         DBC  =DBC/2,.                 /*MODIFICATION  DBC=DELTA3(1/2)*/SE35 240\n              DO I =3 TO DIM,.                                          SE35 250\n              YA   =YB,.               /*REPLAGE YA BY Y(I-2)         */SE35 260\n              YB   =YC,.               /*REPLACE YB BY Y(I-1)         */SE35 270\n              YC   =Y(I),.             /*SET YC TO Y(I)               */SE35 280\n              DA   =DB,.               /*SAVE OLD SECOND DIFFERENCE   */SE35 290\n              DB   =(YA-YB)-(YB-YC),.  /*COMPUTE DELTA2(I-1)          */SE35 300\n              DAB  =DBC,.              /*SAVE OLD THIRD DIFFERENCE    */SE35 310\n              DBC  =DA-DB,.            /*COMPUTE DELTA3(I-3/2)        */SE35 320\n              Z(I-2)=YA                /*SET Z(I-2) TO                */SE35 330\n                   -(DAB-DBC)*6/70,.   /*Y(I-2)-DELTA4(I-2)*6/70      */SE35 340\n              END,.                                                     SE35 350\n         DA   =(DAB-DBC)/35,.                                           SE35 360\n         Z(DIM-1)=YB+DA+DA,.           /*COMPUTE LAST TWO SMOOTHED    */SE35 370\n         Z(DIM)=YC-DA/2,.              /*VALUES                       */SE35 380\n         ERROR='0',.                   /*SUCCESSFUL OPERATION         */SE35 390\n         END,.                                                          SE35 400\n    ELSE ERROR='1',.                   /*ERROR IN SPECIFIED DIMENSION */SE35 410\n    END,.                              /*END OF PROCEDURE S35         */SE35 420\n EXSM..                                                                 EXSM  10\n /*********************************************************************/EXSM  20\n /*                                                                   */EXSM  30\n /*      TO FIND THE TRIPLE EXPONENTIAL SMOOTHED SERIES S OF A GIVEN  */EXSM  40\n /*      SERIES X.                                                    */EXSM  50\n /*                                                                   */EXSM  60\n /*********************************************************************/EXSM  70\n    PROCEDURE (X,NX,AL,A,B,C,S),.                                       EXSM  80\n    DECLARE                                                             EXSM  90\n         (X(*),S(*),AL,A,B,C,BE,ALCUB,BECUB,DIF)                        EXSM 100\n         BINARY FLOAT,                                                  EXSM 110\n         ERROR EXTERNAL CHARACTER(1),                                   EXSM 120\n         (I,NX)                                                         EXSM 130\n         BINARY FIXED,.                                                 EXSM 140\n /*                                                                   */EXSM 150\n    ERROR='0',.                                                         EXSM 160\n /*                                                                   */EXSM 170\n /*      TEST THE VALUE OF ALPHA                                      */EXSM 180\n /*                                                                   */EXSM 190\n    IF AL LE 0 OR AL GE 1                                               EXSM 200\n    THEN DO,.                                                           EXSM 210\n         ERROR='1',.                                                    EXSM 220\n         GO TO FIN,.                                                    EXSM 230\n         END,.                                                          EXSM 240\n    IF NX LT 3                                                          EXSM 250\n    THEN DO,.                                                           EXSM 260\n         ERROR='2',.                                                    EXSM 270\n         GO TO FIN,.                                                    EXSM 280\n         END,.                                                          EXSM 290\n /*      IF A=B=C=0.0, GENERATE INITIAL VALUES OF A, B, AND C         */EXSM 300\n /*                                                                   */EXSM 310\n         IF A = 0.0 AND B = 0.0 AND C = 0.0                             EXSM 320\n    THEN DO,.                                                           EXSM 330\n         C    =X(1)-2.0*X(2)+X(3),.                                     EXSM 340\n         B    =X(2)-X(1)-1.5*C,.                                        EXSM 350\n         A    =X(1)-B-0.5*C,.                                           EXSM 360\n         END,.                                                          EXSM 370\n    BE   =1.0-AL,.                                                      EXSM 380\n    BECUB=BE**3,.                                                       EXSM 390\n    ALCUB=AL**3,.                                                       EXSM 400\n /*                                                                   */EXSM 410\n /*      DO THE FOLLOWING FOR I = 1 TO NX                             */EXSM 420\n /*                                                                   */EXSM 430\n         DO I = 1 TO NX,.                                               EXSM 440\n         S(I) =A+B+0.5*C,.             /* FIND S(I) FOR 1 PERIOD AHEAD*/EXSM 450\n /*                                                                   */EXSM 460\n /*      UPDATE COEFFICIENTS A, B, AND C                              */EXSM 470\n /*                                                                   */EXSM 480\n         DIF  =S(I)-X(I),.                                              EXSM 490\n         A    =X(I)+BECUB*DIF,.                                         EXSM 500\n         B    =B+C-1.5*AL*AL*(2.0-AL)*DIF,.                             EXSM 510\n         C    =C-ALCUB*DIF,.                                            EXSM 520\n         END,.                                                          EXSM 530\n FIN..                                                                  EXSM 540\n    RETURN,.                                                            EXSM 550\n    END,.                              /*END OF PROCEDURE EXSM        */EXSM 560\n FMFP..                                                                 FMFP  10\n /*********************************************************************/FMFP  20\n /*                                                                   */FMFP  30\n /*      FIND A LOCAL MINIMUM OF A FUNCTION OF SEVERAL VARIABLES      */FMFP  40\n /*      BY THE METHOD OF FLETCHER AND POWELL                         */FMFP  50\n /*                                                                   */FMFP  60\n /*********************************************************************/FMFP  70\n    PROCEDURE (FUNCT,N,X,F,G,EST,EPS,LIMIT),.                           FMFP  80\n    DECLARE                                                             FMFP  90\n         (I,J,KOUNT,K,L,LIMIT,N,NS,N2,N3)                               FMFP 100\n         BINARY FIXED,                                                  FMFP 110\n         (X(*),G(*),H(N*(N+7)/2),ALFA,AMBDA,DALFA,DX,DY,GS,GNRM,FS,     FMFP 120\n         EPS,EST,F,FX,FY,H1,H2,HNRM,OLDF,T,W,Z)                         FMFP 130\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/FMFP 140\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/FMFP 150\n         FUNCT                                                          FMFP 160\n         ENTRY,                                                         FMFP 170\n         ERROR EXTERNAL                                                 FMFP 180\n         CHARACTER(1),.                                                 FMFP 190\n    NS   =N,.                                                           FMFP 200\n    N2   =NS+NS,.                                                       FMFP 210\n    N3   =N2+NS,.                                                       FMFP 220\n    CALL FUNCT(X,FS,G),.               /*COMPUTE FUNCTION VALUE       */FMFP 230\n    ERROR='0',.                        /*AND GRADIENT VECTOR          */FMFP 240\n    KOUNT=0,.                                                           FMFP 250\n CONT..                                                                 FMFP 260\n    I    =N3,.                                                          FMFP 270\n         DO J = NS-1 TO 0 BY -1,.      /*GENERATE IDENTITY MATRIX     */FMFP 280\n         K    =I+1,.                                                    FMFP 290\n         H(K) =1,.                                                      FMFP 300\n         I    =K+J,.                                                    FMFP 310\n              DO L = K+1 TO I,.                                         FMFP 320\n              H(L) =0,.                                                 FMFP 330\n              END,.                                                     FMFP 340\n         END,.                                                          FMFP 350\n LOOP..                                /*START ITERATION LOOP         */FMFP 360\n    KOUNT=KOUNT+1,.                                                     FMFP 370\n    OLDF =FS,.                         /*SAVE FUNCTION VALUE,         */FMFP 380\n    DY,HNRM,GNRM=0,.                   /*ARGUMENT VECTOR              */FMFP 390\n         DO J = 1 TO NS,.              /*AND GRADIENT VECTOR          */FMFP 400\n         H(NS+J),GS=G(J),.                                              FMFP 410\n         H(N2+J)=X(J),.                                                 FMFP 420\n         T    =0,.                                                      FMFP 430\n         K    =N3+J,.                                                   FMFP 440\n              DO L = 1 TO NS,.         /*DETERMINE DIRECTION VECTOR   */FMFP 450\n              T    =T-G(L)*H(K),.                                       FMFP 460\n              IF L LT J                                                 FMFP 470\n              THEN K    =K+NS-L,.                                       FMFP 480\n              ELSE K    =K+1,.                                          FMFP 490\n              END,.                                                     FMFP 500\n         H(J) =T,.                                                      FMFP 510\n         HNRM =HNRM+ABS(T),.           /*CALCULATE DIRECTIONAL        */FMFP 520\n         GNRM =GNRM+ABS(GS),.          /*DERIVATIVE AND TESTVALUES    */FMFP 530\n         DY   =DY+T*GS,.               /*FOR DIRECTION VECTOR H       */FMFP 540\n         END,.                         /*AND GRADIENT VECTOR G.       */FMFP 550\n    IF DY LT 0                         /*REPEAT SEARCH IN DIRECTION   */FMFP 560\n    THEN IF HNRM/GNRM GT EPS           /*OF STEEPEST DESCENT IF       */FMFP 570\n    THEN GO TO LAB1,.                  /*DIRECTIONAL DERIVATIVE       */FMFP 580\n    GO TO REST,.                       /*APPEARS NOT NEGATIVE         */FMFP 590\n LAB1..                                /*SEARCH MINIMUM ALONG H       */FMFP 600\n    FY   =FS,.                                                          FMFP 610\n    AMBDA=MIN(1,2*(EST-FS)/DY),.                                        FMFP 620\n    IF AMBDA LE 0                                                       FMFP 630\n    THEN AMBDA=1,.                                                      FMFP 640\n    ALFA =0,.                                                           FMFP 650\n SAVE..                                /*SAVE FUNCTION AND DERIVATIVE */FMFP 660\n    FX   =FY,.                         /*VALUES FOR OLD ARGUMENT      */FMFP 670\n    DX   =DY,.                                                          FMFP 680\n         DO I = 1 TO NS,.              /*STEP ARGUMENT ALONG H        */FMFP 690\n         X(I) =X(I)+AMBDA*H(I),.                                        FMFP 700\n         END,.                                                          FMFP 710\n    CALL FUNCT(X,FS,G),.                                                FMFP 720\n    FY   =FS,.                                                          FMFP 730\n    DY   =0,.                          /*COMPUTE DIRECTIONAL DERIVA-  */FMFP 740\n         DO I = 1 TO NS,.              /*TIVE DY FOR NEW ARGUMENT.    */FMFP 750\n         DY   =DY+G(I)*H(I),.          /*TERMINATE SEARCH, IF DY GE 0 */FMFP 760\n         END,.                         /*IF DY=0,THE MINIMUM IS FOUND */FMFP 770\n    IF FY LT FX                        /*PROVIDED FUNCTION DECREASED  */FMFP 780\n    THEN DO,.                                                           FMFP 790\n         IF DY= 0                                                       FMFP 800\n         THEN GO TO COMP,.                                              FMFP 810\n         IF DY LT 0                    /*TERMINATE SEARCH IF          */FMFP 820\n         THEN DO,.                     /*MINIMUM PASSED               */FMFP 830\n              ALFA,AMBDA=AMBDA+ALFA,.  /*DOUBLE STEPSIZE AND REPEAT   */FMFP 840\n              IF HNRM*AMBDA LE 1E10                                     FMFP 850\n              THEN GO TO SAVE,.                                         FMFP 860\n              ERROR='2',.              /*ARGUMENT OUT OF RANGE        */FMFP 870\n              GO TO RETURN,.                                            FMFP 880\n              END,.                                                     FMFP 890\n         END,.                                                          FMFP 900\n    T    =0,.                                                           FMFP 910\n LAB2..                                                                 FMFP 920\n    IF AMBDA= 0                        /*INTERPOLATE IN NEW INTERVAL  */FMFP 930\n    THEN GO TO COMP,.                  /*COMPUTE ARGUMENT X           */FMFP 940\n    Z    =3*(FX-FY)/AMBDA+DX+DY,.                                       FMFP 950\n    ALFA =MAX(ABS(Z),ABS(DX),ABS(DY)),.                                 FMFP 960\n    DALFA=Z/ALFA,.                                                      FMFP 970\n    DALFA=DALFA*DALFA-DX/ALFA*DY/ALFA,.                                 FMFP 980\n    IF DALFA LT 0                                                       FMFP 990\n    THEN GO TO REST,.                                                   FMFP1000\n    W    =ALFA*SQRT(DALFA),.                                            FMFP1010\n    ALFA =DY-DX+W+W,.                                                   FMFP1020\n    IF ALFA=0                                                           FMFP1030\n    THEN ALFA =(Z+DY-W)/(Z+DX+Z+DY),.                                   FMFP1040\n    ELSE ALFA =(DY-Z+W)/ALFA,.                                          FMFP1050\n    ALFA =ALFA*AMBDA,.                                                  FMFP1060\n    DALFA=T-ALFA,.                                                      FMFP1070\n         DO I = 1 TO NS,.                                               FMFP1080\n         X(I) =X(I)+DALFA*H(I),.                                        FMFP1090\n         END,.                                                          FMFP1100\n    CALL FUNCT(X,FS,G),.                                                FMFP1110\n    IF FS LE FX                                                         FMFP1120\n    THEN IF FS LE FY                                                    FMFP1130\n    THEN GO TO COMP,.                  /*TERMINATE INTERPOLATION      */FMFP1140\n    DALFA=0,.                                                           FMFP1150\n         DO I = 1 TO NS,.                                               FMFP1160\n         DALFA=DALFA+G(I)*H(I),.                                        FMFP1170\n         END,.                                                          FMFP1180\n    IF DALFA LT 0                                                       FMFP1190\n    THEN IF FS LE FX                                                    FMFP1200\n    THEN DO,.                                                           FMFP1210\n         FX   =FS,.                                                     FMFP1220\n         DX   =DALFA,.                                                  FMFP1230\n         T,AMBDA=ALFA,.                                                 FMFP1240\n         GO TO LAB2,.                  /*REPEAT INTERPOLATION         */FMFP1250\n         END,.                                                          FMFP1260\n    FY   =FS,.                                                          FMFP1270\n    DY   =DALFA,.                                                       FMFP1280\n    AMBDA=AMBDA-ALFA,.                                                  FMFP1290\n    T    =0,.                                                           FMFP1300\n    GO TO LAB2,.                       /*REPEAT INTERPOLATION         */FMFP1310\n COMP..                                                                 FMFP1320\n         DO J = 1 TO NS,.              /*COMPUTE DIFFERENCE VECTORS   */FMFP1330\n         K    =NS+J,.                  /*OF ARGUMENT AND GRADIENT     */FMFP1340\n         H(K) =G(J)-H(K),.                                              FMFP1350\n         K    =NS+K,.                                                   FMFP1360\n         H(K) =X(J)-H(K),.                                              FMFP1370\n         END,.                                                          FMFP1380\n    IF OLDF+EPS LT FS                                                   FMFP1390\n    THEN GO TO REST,.                  /*TERMINATE ITERATION          */FMFP1400\n    ERROR='0',.                                                         FMFP1410\n    IF KOUNT GE NS                                                      FMFP1420\n    THEN DO,.                                                           FMFP1430\n         T,Z  =0,.                                                      FMFP1440\n              DO J = 1 TO NS,.                                          FMFP1450\n              W    =H(N2+J),.                                           FMFP1460\n              T    =T+ABS(W),.                                          FMFP1470\n              Z    =Z+H(NS+J)*W,.                                       FMFP1480\n              END,.                                                     FMFP1490\n         IF HNRM LE EPS                                                 FMFP1500\n         THEN IF T LE EPS              /*TERMINATE, IF ARGUMENT DIFF. */FMFP1510\n         THEN GO TO RETURN,.           /*VECTOR AND DIRECTION VECTOR  */FMFP1520\n         END,.                         /*ARE BOTH   LE EPS            */FMFP1530\n    IF KOUNT GE LIMIT                                                   FMFP1540\n    THEN GO TO NCON,.                                                   FMFP1550\n    ALFA =0,.                                                           FMFP1560\n         DO J = 1 TO NS,.                                               FMFP1570\n         W    =0,.                                                      FMFP1580\n         K    =N3+J,.                                                   FMFP1590\n              DO L = 1 TO NS,.                                          FMFP1600\n              W    =W+H(NS+L)*H(K),.                                    FMFP1610\n              IF L LT J                                                 FMFP1620\n              THEN K    =K+NS-L,.                                       FMFP1630\n              ELSE K    =K+1,.                                          FMFP1640\n              END,.                                                     FMFP1650\n         ALFA =ALFA+W*H(NS+J),.                                         FMFP1660\n         H(J) =W,.                                                      FMFP1670\n         END,.                                                          FMFP1680\n    IF Z*ALFA= 0                                                        FMFP1690\n    THEN GO TO CONT,.                                                   FMFP1700\n    K    =N3+1,.                                                        FMFP1710\n         DO L = 1 TO NS,.              /*UPDATE MATRIX H              */FMFP1720\n         H1   =H(N2+L)/Z,.                                              FMFP1730\n         H2   =H(L)/ALFA,.                                              FMFP1740\n              DO J = L TO NS,.                                          FMFP1750\n              H(K) =H(K)+H1*H(N2+J)                                     FMFP1760\n                   -H2*H(J),.                                           FMFP1770\n              K    =K+1,.                                               FMFP1780\n              END,.                                                     FMFP1790\n         END,.                                                          FMFP1800\n    GO TO LOOP,.                       /*END OF ITERATION LOOP        */FMFP1810\n NCON..                                                                 FMFP1820\n    ERROR='1',.                        /*NO CONVERGENCE               */FMFP1830\n    GO TO RETURN,.                                                      FMFP1840\n REST..                                /*RESTORE OLD VAL, ARG         */FMFP1850\n         DO J = 1 TO NS,.                                               FMFP1860\n         X(J) =H(N2+J),.                                                FMFP1870\n         END,.                                                          FMFP1880\n    CALL FUNCT(X,FS,G),.                                                FMFP1890\n    IF GNRM GT EPS                                                      FMFP1900\n    THEN IF ERROR= '3'                                                  FMFP1910\n    THEN GO TO RETURN,.                                                 FMFP1920\n    ELSE DO,.                                                           FMFP1930\n         ERROR='3',.                   /*REPEAT, IF DERIVATIVE GT EPS */FMFP1940\n         GO TO CONT,.                                                   FMFP1950\n         END,.                                                          FMFP1960\n    ERROR='0',.                                                         FMFP1970\n RETURN..                                                               FMFP1980\n    F    =FS,.                                                          FMFP1990\n    END,.                              /*END OF PROCEDURE FMFP        */FMFP2000\n RTF..                                                                  RTF   10\n /*********************************************************************/RTF   20\n /*                                                                   */RTF   30\n /*      CALCULATE ROOT OF GIVEN FUNCTION                             */RTF   40\n /*      IF OPT = '0' BY LINEAR INTERPOLATION (SECANT METHOD)         */RTF   50\n /*      IF OPT = '1' BY QUADRATIC INTERPOLATION (MULLER'S METHOD)    */RTF   60\n /*      IF OPT = '2' BY HYPERBOLIC INTERPOLATION (HALLEY'S METHOD)   */RTF   70\n /*                                                                   */RTF   80\n /*********************************************************************/RTF   90\n    PROCEDURE(X,F,FCT,LIMIT,OPT),.                                      RTF  100\n    DECLARE                                                             RTF  110\n         (ERROR EXTERNAL,INCL,LOPT,OPT)                                 RTF  120\n         CHARACTER(1),                                                  RTF  130\n         (STEP,CT,LIMIT)                                                RTF  140\n         BINARY FIXED,                                                  RTF  150\n         (X,F,T,Y,XX,DX,X1,X2,F1,F2,X10,X20,X21,                        RTF  160\n         F10,F21,FF,XXX,TOL,MI,MA)                                      RTF  170\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/RTF  180\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/RTF  190\n         FCT ENTRY() RETURNS                                            RTF  200\n         (BINARY FLOAT),.              /*SINGLE PRECISION VERSION  /*S*/RTF  210\n  /*     (BINARY FLOAT(53)),.          /*DOUBLE PRECISION VERSION  /*D*/RTF  220\n    STEP =1,.                          /*INIT. ITERATION COUNT        */RTF  230\n    X2   =X,.                                                           RTF  240\n    F,F2 =FCT(X2),.                    /*CALCULATE STARTING VALUE     */RTF  250\n    INCL,ERROR='0',.                                                    RTF  260\n    CT   =0,.                                                           RTF  270\n SEEK..                                /*LOCATE BETTER POINT          */RTF  280\n    F1   =1,.                          /*BY SIMPLE SEARCH PROCESS     */RTF  290\n    LOPT ='S',.                                                         RTF  300\n    MI   =MIN(0.1,ABS(F)),.                                             RTF  310\n    MA   =MAX(1,ABS(X)),.                                               RTF  320\n SEEK2..                                                                RTF  330\n    DX   =MI/F1,.                                                       RTF  340\n    X1   =1,.                                                           RTF  350\n SEEK1..                                                                RTF  360\n    T    =X+DX,.                                                        RTF  370\n    DX   =-DX,.                                                         RTF  380\n TEST..                                                                 RTF  390\n    Y    =FCT(T),.                     /*CALCULATE FUNCTION VALUE     */RTF  400\n    STEP =STEP+1,.                     /*STEP ITERATION COUNT         */RTF  410\n    IF STEP GE LIMIT                                                    RTF  420\n    THEN GO TO EXIT,.                  /*TERMINATE WITH ERROR = 'C'   */RTF  430\n    IF INCL='1'                        /*TEST FOR PREVIOUS SIGN-CHANGE*/RTF  440\n    THEN DO,.                                                           RTF  450\n         IF Y*FF LT 0                                                   RTF  460\n         THEN XXX  =T,.                                                 RTF  470\n         ELSE GO TO SIGN,.                                              RTF  480\n         END,.                                                          RTF  490\n    ELSE DO,.                                                           RTF  500\n         IF Y*F LE 0                   /*TEST FOR SIGN-CHANGE         */RTF  510\n         THEN DO,.                                                      RTF  520\n              INCL ='1',.              /*MARK SIGN CHANGE             */RTF  530\n              XXX  =X,.                                                 RTF  540\n SIGN..                                                                 RTF  550\n              XX   =T,.                                                 RTF  560\n              FF   =Y,.                                                 RTF  570\n              END,.                                                     RTF  580\n         END,.                                                          RTF  590\n    IF ABS(Y) LT ABS(F)                /*TEST FOR IMPROVEMENT         */RTF  600\n    THEN DO,.                                                           RTF  610\n         X    =T,.                                                      RTF  620\n         F    =Y,.                                                      RTF  630\n         GO TO CHECK,.                                                  RTF  640\n         END,.                                                          RTF  650\n    IF INCL='1'                                                         RTF  660\n    THEN GO TO CHECK,.                                                  RTF  670\n    IF LOPT NE 'S'                                                      RTF  680\n    THEN GO TO SEEK,.                                                   RTF  690\n    IF DX LT 0                                                          RTF  700\n    THEN GO TO SEEK1,.                 /*SEEK AT SYMMETRIC POINT      */RTF  710\n    X1   =X1+1,.                                                        RTF  720\n    DX   =DX+DX,.                      /*SEEK FARTHER AWAY            */RTF  730\n    IF X1 LE F1                                                         RTF  740\n    THEN GO TO SEEK1,.                                                  RTF  750\n    F1   =F1+2,.                       /*STEP ODD INTEGER DENOMINATOR */RTF  760\n    GO TO SEEK2,.                                                       RTF  770\n CHECK..                                                                RTF  780\n    TOL  =1E-5*MA,.                    /*SINGLE PRECISION VERSION  /*S*/RTF  790\n  /*TOL  =1E-12*MA,.                   /*DOUBLE PRECISION VERSION  /*D*/RTF  800\n    IF ABS(DX) LE TOL                                                   RTF  810\n    THEN DO,.                                                           RTF  820\n         CT   =CT+1,.                                                   RTF  830\n         IF ABS(Y) GT TOL              /*TERMINATE SUCCESSFULLY IF    */RTF  840\n         THEN IF CT LE 5               /*BOTH ARGUMENT-CHANGE AND     */RTF  850\n         THEN GO TO CONT,.             /*FUNCTION VALUE ARE SMALL     */RTF  860\n         ELSE ERROR='W',.              /*WITH WARNING IF ARGUMENT-    */RTF  870\n         GO TO RETURN,.                /*CHANGE ONLY IS SMALL REPEAT. */RTF  880\n CONT..                                                                 RTF  890\n         END,.                                                          RTF  900\n    ELSE CT   =0,.                                                      RTF  910\n    X20  =T-X1,.                                                        RTF  920\n    X1   =X2,.                         /*SAVE OLD VALUES              */RTF  930\n    F0   =F1,.                                                          RTF  940\n    F1   =F2,.                                                          RTF  950\n    X10  =X21,.                                                         RTF  960\n    F10  =F21,.                                                         RTF  970\n    X2   =T,.                          /*STORE NEW VALUES             */RTF  980\n    F2   =Y,.                                                           RTF  990\n    X21  =X2-X1,.                                                       RTF 1000\n    IF X21= 0                                                           RTF 1010\n    THEN GO TO EXIT,.                                                   RTF 1020\n    F21  =(F2-F1)/X21,.                                                 RTF 1030\n    IF LOPT='1'                                                         RTF 1040\n    THEN DO,.                          /*QUADRATIC INTERPOLATION      */RTF 1050\n         IF X20 NE 0                                                    RTF 1060\n         THEN DO,.                                                      RTF 1070\n              T    =(F21-F10)/X20,.                                     RTF 1080\n              Y    =F21+X21*T,.                                         RTF 1090\n              IF Y NE 0                                                 RTF 1100\n              THEN DO,.                                                 RTF 1110\n                   DX   =F2/Y,.                                         RTF 1120\n                   T    =0.25-DX*T/Y,.                                  RTF 1130\n                   IF T NL 0                                            RTF 1140\n                   THEN DX   =DX/(0.5+SQRT(T)),.                        RTF 1150\n                   GO TO COMP,.                                         RTF 1160\n                   END,.                                                RTF 1170\n              END,.                                                     RTF 1180\n         END,.                                                          RTF 1190\n    IF LOPT='2'                                                         RTF 1200\n    THEN DO,.                          /*HYPERBOLIC INTERPOLATION     */RTF 1210\n         T    =F2-F0*F21/F10,.                                          RTF 1220\n         IF T NE 0                                                      RTF 1230\n         THEN DX   =X20*F2/T,.                                          RTF 1240\n         IF DX NE 0                                                     RTF 1250\n         THEN GO TO COMP,.                                              RTF 1260\n         END,.                                                          RTF 1270\n    IF F21=0                                                            RTF 1280\n    THEN IF INCL='1'                                                    RTF 1290\n    THEN GO TO HALF,.                                                   RTF 1300\n    ELSE GO TO SEEK,.                                                   RTF 1310\n    DX   =F2/F21,.                                                      RTF 1320\n COMP..                                                                 RTF 1330\n    TOL  =MAX(MI,1E-3)*MA,.                                             RTF 1340\n    IF INCL NE '1'                                                      RTF 1350\n    THEN IF ABS(DX) GT TOL                                              RTF 1360\n    THEN IF DX LT 0                                                     RTF 1370\n    THEN DX   =-TOL,.                                                   RTF 1380\n    ELSE DX   =TOL,.                                                    RTF 1390\n    T    =X2-DX,.                                                       RTF 1400\n    IF INCL='1'                                                         RTF 1410\n    THEN IF (XX-T)*(XXX-T) GT 0        /*TEST IF INSIDE INTERVAL      */RTF 1420\n    THEN                                                                RTF 1430\n HALF..                                                                 RTF 1440\n         T    =(XX+XXX)*0.5,.                                           RTF 1450\n    LOPT =OPT,.                                                         RTF 1460\n    GO TO TEST,.                                                        RTF 1470\n EXIT..                                                                 RTF 1480\n    ERROR='C',.                                                         RTF 1490\n RETURN..                                                               RTF 1500\n    END,.                              /*END OF PROCEDURE RTF         */RTF 1510\n RTFD..                                                                 RTFD  10\n /*********************************************************************/RTFD  20\n /*                                                                   */RTFD  30\n /*      CALCULATE ROOT OF GIVEN FUNCTION USING DERIVATIVE VALUES     */RTFD  40\n /*      IF OPT = '0' BY LINEAR INTERPOLATION (NEWTON METHOD)         */RTFD  50\n /*      IF OPT = '1' BY INVERSE QUADRATIC INTERPOLATION              */RTFD  60\n /*      IF OPT = '2' BY HYPERBOLIC INTERPOLATION (HALLEY METHOD)     */RTFD  70\n /*                                                                   */RTFD  80\n /*********************************************************************/RTFD  90\n    PROCEDURE(X,F,DF,FCT,LIMIT,OPT),.                                   RTFD 100\n    DECLARE                                                             RTFD 110\n         (ERROR EXTERNAL,INCL,LOPT,OPT)                                 RTFD 120\n         CHARACTER(1),                                                  RTFD 130\n         (STEP,CT,LIMIT)                                                RTFD 140\n         BINARY FIXED,                                                  RTFD 150\n         (X,F,T,Y,XX,DX,X1,X2,F1,F2,DF1,DF2,DY,DF,TOL,MI,MA,FF,XXX)     RTFD 160\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/RTFD 170\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/RTFD 180\n         FCT ENTRY,.                                                    RTFD 190\n    STEP =1,.                                                           RTFD 200\n    X2   =X,.                                                           RTFD 210\n    CALL FCT(X2,F2,DF2),.              /*CALCULATE STARTING VALUE     */RTFD 220\n    F    =F2,.                                                          RTFD 230\n    DF   =DF2,.                                                         RTFD 240\n    INCL,ERROR='0',.                                                    RTFD 250\n    CT   =0,.                                                           RTFD 260\n    LOPT ='0',.                        /*NO PREVIOUS VALUE AVAILABLE  */RTFD 270\n    GO TO COMP,.                       /*USE NEWTON METHOD            */RTFD 280\n SEEK..                                /*LOCATE BETTER POINT          */RTFD 290\n    F1   =1,.                          /*BY SIMPLE SEARCH PROCESS     */RTFD 300\n    LOPT ='S',.                                                         RTFD 310\n SEEK2..                                                                RTFD 320\n    DX   =MI/F1,.                                                       RTFD 330\n    X1   =1,.                                                           RTFD 340\n SEEK1..                                                                RTFD 350\n    T    =X+DX,.                                                        RTFD 360\n    DX   =-DX,.                                                         RTFD 370\n TEST..                                                                 RTFD 380\n    CALL FCT(T,Y,DY),.                 /*CALCULATE FUNCTION VALUE     */RTFD 390\n    STEP =STEP+1,.                     /*STEP ITERATION COUNT         */RTFD 400\n    IF STEP GE LIMIT                                                    RTFD 410\n    THEN GO TO EXIT,.                  /*TERMINATE WITH ERROR ='C'    */RTFD 420\n    IF INCL='1'                        /*TEST FOR PREVIOUS SIGN-CHANGE*/RTFD 430\n    THEN DO,.                                                           RTFD 440\n         IF Y*FF LT 0                                                   RTFD 450\n         THEN XXX  =T,.                                                 RTFD 460\n         ELSE GO TO SIGN,.                                              RTFD 470\n         END,.                                                          RTFD 480\n    ELSE DO,.                                                           RTFD 490\n         IF Y*F LE 0                   /*TEST FOR SIGN-CHANGE         */RTFD 500\n         THEN DO,.                                                      RTFD 510\n              INCL ='1',.              /*MARK SIGN CHANGE             */RTFD 520\n              XXX  =X,.                                                 RTFD 530\n SIGN..                                                                 RTFD 540\n              XX   =T,.                                                 RTFD 550\n              FF   =Y,.                                                 RTFD 560\n              END,.                                                     RTFD 570\n         END,.                                                          RTFD 580\n    IF ABS(Y) LT ABS(F)                /*TEST FOR IMPROVEMENT         */RTFD 590\n    THEN DO,.                                                           RTFD 600\n         X    =T,.                                                      RTFD 610\n         F    =Y,.                                                      RTFD 620\n         DF   =DY,.                                                     RTFD 630\n         GO TO CHECK,.                                                  RTFD 640\n         END,.                                                          RTFD 650\n    IF INCL='1'                                                         RTFD 660\n    THEN GO TO CHECK,.                                                  RTFD 670\n    IF LOPT NE 'S'                                                      RTFD 680\n    THEN GO TO SEEK,.                                                   RTFD 690\n    IF DX LT 0                                                          RTFD 700\n    THEN GO TO SEEK1,.                 /*SEEK AT SYMMETRIC POINT      */RTFD 710\n    X1   =X1+1,.                                                        RTFD 720\n    DX   =DX+DX,.                      /*SEEK FARTHER AWAY            */RTFD 730\n    IF X1 LE F1                                                         RTFD 740\n    THEN GO TO SEEK1,.                                                  RTFD 750\n    F1   =F1+2,.                       /*STEP ODD INTEGER DENOMINATOR */RTFD 760\n    GO TO SEEK2,.                                                       RTFD 770\n CHECK..                                                                RTFD 780\n    TOL  =1E-5*MA,.                    /*SINGLE PRECISION VERSION  /*S*/RTFD 790\n  /*TOL  =1E-12*MA,.                   /*DOUBLE PRECISION VERSION  /*D*/RTFD 800\n    IF ABS(DX) LE TOL                                                   RTFD 810\n    THEN DO,.                                                           RTFD 820\n         CT   =CT+1,.                                                   RTFD 830\n         IF ABS(Y) GT TOL              /*TERMINATE SUCCESSFULLY IF    */RTFD 840\n         THEN IF CT LE 5               /*BOTH ARGUMENT-CHANGE AND     */RTFD 850\n         THEN GO TO CONT,.             /*FUNCTION VALUE ARE SMALL     */RTFD 860\n         ELSE ERROR='W',.              /*WITH WARNING IF ARGUMENT-    */RTFD 870\n         GO TO RETURN,.                /*CHANGE ONLY IS SMALL REPEAT. */RTFD 880\n CONT..                                                                 RTFD 890\n         END,.                                                          RTFD 900\n    ELSE CT   =0,.                                                      RTFD 910\n    X1   =X2,.                         /*SAVE OLD VALUES              */RTFD 920\n    F1   =F2,.                                                          RTFD 930\n    DF1  =DF2,.                                                         RTFD 940\n    X2   =T,.                          /*STORE NEW VALUES             */RTFD 950\n    F2   =Y,.                                                           RTFD 960\n    DF2  =DY,.                                                          RTFD 970\n    DY   =X2-X1,.                                                       RTFD 980\n    IF DY= 0                                                            RTFD 990\n    THEN GO TO EXIT,.                                                   RTFD1000\n COMP..                                                                 RTFD1010\n    MA   =MAX(1,ABS(X)),.                                               RTFD1020\n    MI   =MIN(0.1,ABS(F)),.                                             RTFD1030\n    IF DF2 NE 0                                                         RTFD1040\n    THEN DO,.                                                           RTFD1050\n         DX   =F2/DF2,.                /*NEWTON METHOD                */RTFD1060\n         IF LOPT NE '0'                                                 RTFD1070\n         THEN DO,.                                                      RTFD1080\n              T    =(F2-F1)/DY,.                                        RTFD1090\n              Y    =DF2-T,.                                             RTFD1100\n              T    =DX*(DF1-T+Y+Y)/(DF2*DY),.                           RTFD1110\n              IF LOPT='1'              /*MODIFICATION..               */RTFD1120\n              THEN DX   =DX*(1+T),.    /*INVERSE QUADRATIC INTERPOLAT.*/RTFD1130\n              IF LOPT='2'              /*MODIFICATION..               */RTFD1140\n              THEN IF T NE 1           /*HYPERBOLIC INTERPOLATION     */RTFD1150\n              THEN DX   =DX/(1-T),.                                     RTFD1160\n              END,.                                                     RTFD1170\n         LOPT =OPT,.                                                    RTFD1180\n         TOL  =MAX(MI,1E-3)*MA,.                                        RTFD1190\n         IF INCL NE '1'                                                 RTFD1200\n         THEN DO,.                                                      RTFD1210\n              IF ABS(DX) GT TOL                                         RTFD1220\n              THEN IF DX LT 0                                           RTFD1230\n              THEN DX   =-TOL,.                                         RTFD1240\n              ELSE DX   = TOL,.                                         RTFD1250\n              END,.                                                     RTFD1260\n         T    =X2-DX,.                                                  RTFD1270\n         IF INCL='1'                                                    RTFD1280\n         THEN IF (XX-T)*(XXX-T) GT 0   /*TEST IF INSIDE INTERVAL      */RTFD1290\n         THEN                                                           RTFD1300\n HALF..                                                                 RTFD1310\n              T    =(XX+XXX)*0.5,.                                      RTFD1320\n         GO TO TEST,.                                                   RTFD1330\n         END,.                                                          RTFD1340\n    ELSE IF INCL='1'                                                    RTFD1350\n    THEN GO TO HALF,.                                                   RTFD1360\n    ELSE GO TO SEEK,.                                                   RTFD1370\n EXIT..                                                                 RTFD1380\n    ERROR='C',.                                                         RTFD1390\n RETURN..                                                               RTFD1400\n    END,.                              /*END OF PROCEDURE RTFD        */RTFD1410\n DERE..                                                                 DERE  10\n /*********************************************************************/DERE  20\n /*                                                                   */DERE  30\n /*      PERFORM ONE INTEGRATION STEP FOR A SYSTEM OF ORDINARY DIF-   */DERE  40\n /*      FERENTIAL EQUATIONS USING RATIONAL EXTRAPOLATION TECHNIQUE   */DERE  50\n /*                                                                   */DERE  60\n /*********************************************************************/DERE  70\n    PROCEDURE(F,N,H,X,Y,EPS),.                                          DERE  80\n    DECLARE                                                             DERE  90\n         F ENTRY,                      /*Y' = F(X,Y) GIVEN ODE-SYSTEM */DERE 100\n         (ERROR EXTERNAL,CONV) CHARACTER(1),                            DERE 110\n         (EPS,YM(N),FMH,SQMH,FMM,SQMI,DSQMI)                            DERE 120\n         BINARY FLOAT,                                                  DERE 130\n         (H,X,Y(*),YI,DY(N),Z(N),DZ(N),LX,YC(N))                        DERE 140\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/DERE 150\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/DERE 160\n         (LH,HA,CI,BI,V,FO(N),FE(N),ZI,CMI,DI,U,                        DERE 170\n         DT(5*N))                      /*SINGLE PRECISION VERSION  /*S*/DERE 180\n  /*     DT(10*N))                     /*DOUBLE PRECISION VERSION  /*D*/DERE 190\n         BINARY FLOAT(53),                                              DERE 200\n         (N,RR,CC,LN,DIAG,HSTEP,M,MM,I,J)                               DERE 210\n         BINARY FIXED,.                                                 DERE 220\n    LN   =N,.                                                           DERE 230\n    ERROR='S',.                        /*MARK ILLEGAL SPECIFICATION   */DERE 240\n    IF LN LE 0                         /*TEST SPECIFIED DIMENSION     */DERE 250\n    THEN GO TO EXIT,.                                                   DERE 260\n    LH   =H,.                          /*INIT. LOCAL STEPSIZE         */DERE 270\n    HSTEP=0,.                          /*INIT. COUNT HALVING STEPSIZE */DERE 280\n    IF LH= 0                           /*TEST SPECIFIED STEPSIZE      */DERE 290\n    THEN GO TO EXIT,.                                                   DERE 300\n    ERROR='0',.                        /*PRESET ERROR INDICATOR       */DERE 310\n    CALL F(X,Y,DY),.                   /*DERIVATIVE FOR INITIAL VALUES*/DERE 320\n    IF ERROR NE '0'                                                     DERE 330\n    THEN GO TO EXIT,.                  /*TERMINATE IF ERROR IN F(X,Y) */DERE 340\n                                       /*                             */DERE 350\n HALF..                                /*START OF ITERATION LOOP      */DERE 360\n    CONV ='H',.                        /*MARK FIRST APPROXIMATION     */DERE 370\n    DIAG =1,.                          /*INIT. DIAGONAL COUNT T-ARRAY */DERE 380\n    FMH  =0,.                          /*INIT. FLOATING EXTRAPOL.COUNT*/DERE 390\n                                       /*START OF EXTRAPOLATION LOOP  */DERE 400\n         DO M = 2 TO 16 BY 2,.         /*SINGLE PRECISION VERSION  /*S*/DERE 410\n  /*     DO M = 2 TO 28 BY 2,.         /*DOUBLE PRECISION VERSION  /*D*/DERE 420\n         FMH  =FMH+1,.                 /*UPDATE EXTRAPOLATION COUNT   */DERE 430\n         HA   =LH/FMH,.                /*CALCULATE INTERVAL SIZE      */DERE 440\n         FMM  =1,.                                                      DERE 450\n              DO MM = 1 TO M,.         /*COMP. DISCRETE APPROXIMATION */DERE 460\n                   DO I = 1 TO LN,.                                     DERE 470\n                   YI   =Y(I),.                                         DERE 480\n                   IF MM= 1            /*MODIFY MID-POINT RULE FOR    */DERE 490\n                   THEN DO,.           /*FIRST INTERVAL               */DERE 500\n                        IF CONV='H'    /*FOR THE VERY FIRST INTERVAL  */DERE 510\n                        THEN DO,.      /*INIT. VALUES FOR CONV. TEST  */DERE 520\n                             YC(I)=YI,.                                 DERE 530\n                             YM(I)=ABS(YI),.                            DERE 540\n                             END,.                                      DERE 550\n                        ZI,FE(I)=.50000000*DY(I),.                      DERE 560\n                        FO(I)=0,.      /*INIT. SUM OF DERIVATIVES     */DERE 570\n                        END,.                                           DERE 580\n                   ELSE DO,.                                            DERE 590\n                        ZI   =FO(I)+DZ(I),.                             DERE 600\n                        FO(I)=FE(I),.  /*UPDATE AND INTERCHANGE SUM OF*/DERE 610\n                        FE(I)=ZI,.     /*ODD/EVEN SPACED DERIVATIVES  */DERE 620\n                        END,.                                           DERE 630\n                   Z(I),YI=HA*ZI+YI,.  /*COMP. APPROXIMATE FUNCTION   */DERE 640\n                   IF YM(I) LT ABS(YI) /*VALUE FOR LOCAL ARGUMENT LX  */DERE 650\n                   THEN YM(I)=ABS(YI),./*STORE MAX ABSOLUTE VALUE     */DERE 660\n                   END,.                                                DERE 670\n              LX   =X+FMM*HA,.         /*COMP. LOCAL ARGUMENT         */DERE 680\n              FMM  =FMM+1,.                                             DERE 690\n              CALL F(LX,Z,DZ),.        /*CALCULATE DERIVATIVE         */DERE 700\n              IF ERROR NE '0'                                           DERE 710\n              THEN GO TO EXIT,.        /*TERMINATE IF ERROR IN F(X,Y) */DERE 720\n              END,.                                                     DERE 730\n         CONV ='0',.                   /*PRESET CONVERGENCE INDICATOR */DERE 740\n         SQMH =FMH*FMH,.               /*SQUARE EXTRAPOLATION COUNT   */DERE 750\n         HA   =HA*0.5,.                                                 DERE 760\n              DO I =1 TO LN,.          /*EXTRAPOLATION ON COMPONENTS  */DERE 770\n              V    =DT(I),.            /*SAVE OLD T-VALUE             */DERE 780\n              ZI,CI,DT(I)=Y(I)+HA*     /*STORE NEW T-VALUE            */DERE 790\n                   (.50000000*DZ(I)+FO(I)+FE(I)),.                      DERE 800\n              SQMI =SQMH,.             /*INIT. VARYING SQUARE NUMBER  */DERE 810\n              DSQMI=FMM,.              /*INIT. VARYING DECREMENT      */DERE 820\n              MM   =I,.                                                 DERE 830\n                   DO J = 2 TO DIAG,.                                   DERE 840\n                   MM   =MM+LN,.                                        DERE 850\n                   DSQMI=DSQMI-2,.     /*STEP ODD INTEGER DECREMENT   */DERE 860\n                   SQMI =SQMI-DSQMI,.  /*COMPUTE NEXT LOWER SQUARE    */DERE 870\n                   BI   =SQMH*V,.                                       DERE 880\n                   CMI  =CI*SQMI,.                                      DERE 890\n                   DI   =BI-CMI,.      /*DENOMINATOR OF CENTRAL ALGOR.*/DERE 900\n                   U    =V,.                                            DERE 910\n                   IF DI NE 0          /*TEST FOR ZERO DENOMINATOR    */DERE 920\n                   THEN DO,.           /*PERFORM RHOMBUS ALGORITHM    */DERE 930\n                        DI   =(CI-V)/DI,.                               DERE 940\n                        U    =CMI*DI,.                                  DERE 950\n                        CI   =BI*DI,.                                   DERE 960\n                        END,.                                           DERE 970\n                   V    =DT(MM),.      /*SAVE OLD T-VALUE-DIFFERENCE  */DERE 980\n                   DT(MM)=U,.          /*STORE NEW T-VALUE-DIFFERENCE */DERE 990\n                   ZI   =ZI+U,.        /*COMP. NEW T-VALUE            */DERE1000\n                   END,.                                                DERE1010\n              YI   =ABS(YC(I)-ZI),.                                     DERE1020\n              IF YI LT ABS(U)          /*SET YI TO                    */DERE1030\n              THEN YI   =ABS(U),.      /*MAX(ABS(U),ABS(YC(I)-ZI))    */DERE1040\n              IF YI GT EPS*YM(I)       /*COMPONENTWISE CONVERGENCETEST*/DERE1050\n              THEN CONV ='1',.         /*NEGATE CONVERGENCE INDICATOR */DERE1060\n              YC(I)=ZI,.               /*STORE NEW COMPARISON VALUE   */DERE1070\n              END,.                                                     DERE1080\n         IF CONV='0'                   /*GLOBAL CONVERGENCE TEST      */DERE1090\n         THEN GO TO END,.                                               DERE1100\n         ELSE IF DIAG LT 5             /*SINGLE PRECISION VERSION  /*S*/DERE1110\n  /*     ELSE IF DIAG LT 10            /*DOUBLE PRECISION VERSION  /*D*/DERE1120\n         THEN DIAG =DIAG+1,.           /*UPDATE DIAGONAL COUNT        */DERE1130\n         END,.                                                          DERE1140\n                                       /*END OF EXTRAPOLATION LOOP    */DERE1150\n    HSTEP=HSTEP+1,.                    /*UPDATE COUNT OF HALVING STEPS*/DERE1160\n    LH   =LH*0.5,.                                                      DERE1170\n    IF HSTEP LE 20                     /*MAXIMALLY 20 ITERATIONS WITH */DERE1180\n    THEN GO TO HALF,.                  /*REDUCED STEPSIZE             */DERE1190\n    ELSE GO TO EXIT,.                  /*TERMINATE IF NO CONVERGENCE  */DERE1200\n                                       /*END OF ITERATION LOOP        */DERE1210\n END..                                 /*SUCCESSFUL END OF OPERATION  */DERE1220\n    X    =X+LH,.                       /*RETURN ARGUMENT              */DERE1230\n    IF DIAG LE 4                       /*SINGLE PRECISION VERSION  /*S*/DERE1240\n  /*IF DIAG LE 7                       /*DOUBLE PRECISION VERSION  /*D*/DERE1250\n    THEN LH   =LH+LH,.                 /*DOUBLE STEPSIZE ESTIMATE     */DERE1260\n    H    =LH,.                         /*RETURN ADJUSTED STEPSIZE     */DERE1270\n         DO I = 1 TO LN,.                                               DERE1280\n         Y(I) =YC(I),.                 /*RETURN EXTRAPOLATED FUNCTION-*/DERE1290\n         END,.                         /*VALUES                       */DERE1300\n EXIT..                                                                 DERE1310\n    END,.                              /*END OF PROCEDURE DERE        */DERE1320\n CEL1..                                                                 CEL   10\n /*********************************************************************/CEL   20\n /*                                                                   */CEL   30\n /*      COMPLETE ELLIPTIC INTEGRAL OF FIRST KIND                     */CEL   40\n /*                                                                   */CEL   50\n /*********************************************************************/CEL   60\n    PROCEDURE(RES,K),.                                                  CEL   70\n    DECLARE                                                             CEL   80\n         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */CEL   90\n         (RES,K,A,B,B1,ARI,AARI,GEO,AA,AN,W)                            CEL  100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/CEL  110\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/CEL  120\n         SWITCH CHARACTER(1),.                                          CEL  130\n    SWITCH='1',.                       /*INIT. CEL1 ENTRY             */CEL  140\n    B1,AN=2,.                                                           CEL  150\n    GO TO COM,.                                                         CEL  160\n CEL2..                                                                 CEL  170\n /*********************************************************************/CEL  180\n /*                                                                   */CEL  190\n /*      GENERALIZED COMPLETE ELLIPTIC INTEGRAL OF SECOND KIND        */CEL  200\n /*                                                                   */CEL  210\n /*********************************************************************/CEL  220\n    ENTRY(RES,K,A,B),.                                                  CEL  230\n    SWITCH='2',.                       /*INIT. CEL2 ENTRY             */CEL  240\n    AA   =A,.                                                           CEL  250\n    AN   =A+B,.                                                         CEL  260\n    B1,W =B+B,.                                                         CEL  270\n COM..                                 /*START COMMON CALCULATION     */CEL  280\n    ERROR='0',.                        /*PRESET ERROR PARAMETER       */CEL  290\n    GEO  =(0.5-K)+0.5,.                /*COMP. GEO = 1-K*K            */CEL  300\n    GEO  =GEO+GEO*K,.                                                   CEL  310\n    IF GEO LE 0                        /*TEST FOR SPECIAL CASES OF K  */CEL  320\n    THEN DO,.                          /*ABS(K) NOT LESS THAN ONE     */CEL  330\n         RES  =1.E75,.                 /*IS INTERPRETED AS IF EQUAL 1 */CEL  340\n         IF B1 LT 0                                                     CEL  350\n         THEN RES  =-RES,.             /*CEL2..NEGATIVE PARAMETER B   */CEL  360\n         IF B1=0                                                        CEL  370\n         THEN RES  =AA,.               /*CEL2..ZERO PARAMETER B       */CEL  380\n         IF GEO NE 0                                                    CEL  390\n         THEN ERROR='1',.                                               CEL  400\n         GO TO RETURN,.                                                 CEL  410\n         END,.                                                          CEL  420\n    ARI  =2,.                          /*PROCESS OF THE ARITHMETIC-   */CEL  430\n ITER..                                /*GEOMETRIC MEAN               */CEL  440\n    GEO  =SQRT(GEO),.                                                   CEL  450\n    GEO  =GEO+GEO,.                                                     CEL  460\n    AARI =ARI,.                                                         CEL  470\n    ARI  =ARI+GEO,.                                                     CEL  480\n    IF SWITCH='2'                                                       CEL  490\n    THEN DO,.                                                           CEL  500\n         W    =W+AA*GEO,.                                               CEL  510\n         W    =W+W,.                                                    CEL  520\n         B1   =W/ARI,.                                                  CEL  530\n         AA   =AN,.                                                     CEL  540\n         END,.                                                          CEL  550\n    B1,AN=AN+B1,.                                                       CEL  560\n    IF GEO/AARI LT .9999               /*SINGLE PRECISION VERSION  /*S*/CEL  570\n  /*IF GEO/AARI LT .999999995          /*DOUBLE PRECISION VERSION  /*D*/CEL  580\n    THEN DO,.                                                           CEL  590\n         GEO  =GEO*AARI,.                                               CEL  600\n         GO TO ITER,.                                                   CEL  610\n         END,.                                                          CEL  620\n    RES  =1.570796326794897E0*AN/ARI,.                                  CEL  630\n RETURN..                                                               CEL  640\n    END,.                              /*END OF PROCEDURE CEL         */CEL  650\n ELI1..                                                                 ELI   10\n /*********************************************************************/ELI   20\n /*                                                                   */ELI   30\n /*      ELLIPTIC INTEGRAL OF FIRST KIND                              */ELI   40\n /*                                                                   */ELI   50\n /*********************************************************************/ELI   60\n    PROCEDURE(RES,ARG,CMOD),.                                           ELI   70\n    DECLARE                                                             ELI   80\n         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */ELI   90\n         (RES,ARG,CMOD,A,B,AN,APIM,PIM,ARI,AARI,GEO,SGEO,ANG,           ELI  100\n         AANG,C,D,P,X,R,AA,AMB)                                         ELI  110\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/ELI  120\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/ELI  130\n         ISI BINARY FIXED,                                              ELI  140\n         SWITCH CHARACTER(1),.                                          ELI  150\n    SWITCH='1',.                       /*INIT. ELI1 ENTRY             */ELI  160\n    R    =1,.                                                           ELI  170\n    GO TO COM,.                                                         ELI  180\n ELI2..                                                                 ELI  190\n /*********************************************************************/ELI  200\n /*                                                                   */ELI  210\n /*      GENERALIZED ELLIPTIC INTEGRAL OF SECOND KIND                 */ELI  220\n /*                                                                   */ELI  230\n /*********************************************************************/ELI  240\n    ENTRY(RES,ARG,CMOD,A,B),.                                           ELI  250\n    SWITCH='2',.                       /*INIT. ELI2 ENTRY             */ELI  260\n    D    =0.5,.                                                         ELI  270\n    C    =0,.                                                           ELI  280\n    AA   =A,.                                                           ELI  290\n    R    =B,.                                                           ELI  300\n    AMB  =AA-R,.                                                        ELI  310\n    AN   =(AA+R)*.5,.                                                   ELI  320\n COM..                                 /*START COMMON CALCULATION     */ELI  330\n    ERROR='0',.                        /*SET ERROR PARAMETER          */ELI  340\n    X    =ARG,.                                                         ELI  350\n    IF X = 0                           /*TEST FOR ZERO ARGUMENT       */ELI  360\n    THEN DO,.                                                           ELI  370\n         GEO  =0,.                                                      ELI  380\n         GO TO RETURN,.                                                 ELI  390\n         END,.                                                          ELI  400\n    GEO  =ABS(CMOD),.                  /*SET UP GEO(0)                */ELI  410\n    IF GEO= 0                          /*TEST FOR MODULUS EQUAL ONE   */ELI  420\n    THEN DO,.                                                           ELI  430\n         AN,ANG=1,.                                                     ELI  440\n         AANG,GEO=SQRT(1+X*X),.                                         ELI  450\n         D    =ABS(X),.                                                 ELI  460\n         GEO  =R*LOG(D+GEO),.                                           ELI  470\n         GO TO TWO,.                                                    ELI  480\n         END,.                                                          ELI  490\n    ARI  =1,.                          /*SET UP ARI(0)                */ELI  500\n    ANG  =ABS(1/X),.                   /*SET UP ANG(0)                */ELI  510\n    PIM  =0,.                          /*INIT. MULTIPLE OF PI         */ELI  520\n    ISI  =0,.                                                           ELI  530\n LOOP..                                /*START CENTRAL LOOP           */ELI  540\n    APIM =PIM,.                        /*COUNTER I STARTS WITH ONE    */ELI  550\n    AARI =ARI,.                        /*SAVE ARI(I-1)                */ELI  560\n    ARI  =ARI+GEO,.                    /*CALCULATE ARI(I)             */ELI  570\n    SGEO =AARI*GEO,.                                                    ELI  580\n    ANG  =ANG-SGEO/ANG,.               /*CALCULATE ANG(I)             */ELI  590\n    SGEO =SQRT(SGEO),.                                                  ELI  600\n    IF ANG=0                           /*INCREASE ANG(I) IF ZERO      */ELI  610\n    THEN ANG  =SGEO*1.E-8,.            /*SINGLE PRECISION VERSION  /*S*/ELI  620\n  /*THEN ANG  =SGEO*1.E-16,.           /*DOUBLE PRECISION VERSION  /*D*/ELI  630\n    IF ANG LT 0                                                         ELI  640\n    THEN DO,.                                                           ELI  650\n         PIM  =3.141592653589793E0+PIM,.                                ELI  660\n         ISI  =ISI+1,.                                                  ELI  670\n         END,.                                                          ELI  680\n    IF SWITCH='2'                                                       ELI  690\n    THEN DO,.                                                           ELI  700\n         R    =AA*GEO+R,.              /*CALCULATE B(I)               */ELI  710\n         AA   =AN,.                    /*SAVE A(I)                    */ELI  720\n         AN   =0.5*(AN+R/ARI),.        /*CALCULATE A(I+1)             */ELI  730\n         AANG =ARI*ARI+ANG*ANG,.                                        ELI  740\n         P    =D/SQRT(AANG),.          /*CALCULATE I-TH TERM OF SUM   */ELI  750\n         IF ISI GE 4                                                    ELI  760\n         THEN ISI  =ISI-4,.                                             ELI  770\n         IF ISI GE 2                   /*CHANGE SIGN IF ANGLE IS IN   */ELI  780\n         THEN P    =-P,.               /*THIRD OR FOURTH QUADRANT     */ELI  790\n         C    =C+P,.                                                    ELI  800\n         D    =D*(AARI-GEO)*0.5/ARI,.                                   ELI  810\n         END,.                                                          ELI  820\n                                       /*TEST FOR CONVERGENCE         */ELI  830\n    IF ABS(AARI-GEO) GT AARI*1E-4      /*SINGLE PRECISION VERSION  /*S*/ELI  840\n  /*IF ABS(AARI-GEO) GT AARI*5E-9      /*DOUBLE PRECISION VERSION  /*D*/ELI  850\n    THEN DO,.                                                           ELI  860\n         GEO  =SGEO+SGEO,.                                              ELI  870\n         PIM  =PIM+APIM,.                                               ELI  880\n         ISI  =ISI+ISI,.                                                ELI  890\n         GO TO LOOP,.                                                   ELI  900\n         END,.                         /*END OF CENTRAL LOOP          */ELI  910\n    GEO  =(ATAN(ARI/ANG)+PIM)/ARI,.                                     ELI  920\n TWO..                                                                  ELI  930\n    IF SWITCH='2'                                                       ELI  940\n    THEN DO,.                                                           ELI  950\n         C    =C+D*ANG/AANG,.                                           ELI  960\n         GEO  =GEO*AN+C*AMB,.                                           ELI  970\n         END,.                                                          ELI  980\n    IF X LT 0                                                           ELI  990\n    THEN GEO  =-GEO,.                                                   ELI 1000\n RETURN..                                                               ELI 1010\n    RES  =GEO,.                                                         ELI 1020\n    END,.                              /*END OF PROCEDURE ELI         */ELI 1030\n JELF..                                                                 JELF  10\n /*********************************************************************/JELF  20\n /*                                                                   */JELF  30\n /*      JACOBIAN ELLIPTIC FUNCTIONS SN, CN, DN                       */JELF  40\n /*                                                                   */JELF  50\n /*********************************************************************/JELF  60\n    PROCEDURE(SN,CN,DN,X,SCK),.                                         JELF  70\n    DECLARE                                                             JELF  80\n         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */JELF  90\n         (SN,CN,DN,X,SCK,CM,Y,LSN,LCN,LDN,K,ARI(12),GEO(12),A,B,C,D)    JELF 100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/JELF 110\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/JELF 120\n         (I,J) BINARY FIXED,.                                           JELF 130\n    ERROR='0',.                                                         JELF 140\n    CM   =SCK,.                                                         JELF 150\n    Y    =X,.                                                           JELF 160\n    IF CM= 0                           /*TEST VALUE OF MODULUS        */JELF 170\n    THEN DO,.                          /*DEGENERATE CASE SCK = 0      */JELF 180\n         LCN,LDN=1/COSH(Y),.                                            JELF 190\n         LSN  =TANH(Y),.                                                JELF 200\n         GO TO RETURN,.                                                 JELF 210\n         END,.                                                          JELF 220\n    IF CM LT 0                                                          JELF 230\n    THEN DO,.                          /*MODULUS TRANSFORMATION       */JELF 240\n         K    =(0.5-CM)+0.5,.                                           JELF 250\n         CM   =-CM/K,.                                                  JELF 260\n         K    =SQRT(K),.                                                JELF 270\n         Y    =K*Y,.                                                    JELF 280\n         END,.                                                          JELF 290\n    C,LDN=1,.                          /*PROCESS OF THE ARITHMETIC-   */JELF 300\n         DO I=1 TO 12,.                /*GEOMETRIC MEAN               */JELF 310\n         ARI(I),LCN=C,.                                                 JELF 320\n         GEO(I),CM=SQRT(CM),.                                           JELF 330\n         C    =.5*(LCN+CM),.                                            JELF 340\n         IF ABS(LCN-CM) LE 1E-4*LCN    /*SINGLE PRECISION VERSION  /*S*/JELF 350\n  /*     IF ABS(LCN-CM) LE 5E-9*LCN    /*DOUBLE PRECISION VERSION  /*D*/JELF 360\n         THEN GO TO CONV,.                                              JELF 370\n         CM   =CM*LCN,.                                                 JELF 380\n         END,.                                                          JELF 390\n CONV..                                /*INIT. INVERSE GAUSS-         */JELF 400\n    Y    =Y*C,.                        /*TRANSFORMATION               */JELF 410\n    LSN,D=SIN(Y),.                                                      JELF 420\n    LCN  =COS(Y),.                                                      JELF 430\n    IF LSN= 0                                                           JELF 440\n    THEN GO TO TEST,.                                                   JELF 450\n    A    =LCN/LSN,.                                                     JELF 460\n    C    =A*C,.                                                         JELF 470\n         DO J =I TO 1 BY -1,.          /*INVERSE GAUSS-TRANSFORMATION */JELF 480\n         B    =ARI(J),.                                                 JELF 490\n         A    =A*C,.                                                    JELF 500\n         C    =LDN*C,.                                                  JELF 510\n         LDN  =(GEO(J)+A)/(B+A),.                                       JELF 520\n         A    =C/B,.                                                    JELF 530\n         END,.                                                          JELF 540\n    LSN  =SQRT(1/(1+C*C)),.                                             JELF 550\n    IF D LT 0                                                           JELF 560\n    THEN LSN  =-LSN,.                                                   JELF 570\n    LCN  =C*LSN,.                                                       JELF 580\n TEST..                                /*INVERSE MODULUS-TRANSFORMAT. */JELF 590\n    IF SCK LT 0                                                         JELF 600\n    THEN DO,.                                                           JELF 610\n         A    =LDN,.                                                    JELF 620\n         LDN  =LCN,.                                                    JELF 630\n         LCN  =A,.                                                      JELF 640\n         LSN  =LSN/K,.                                                  JELF 650\n         END,.                                                          JELF 660\n RETURN..                              /*RETURN RESULT VALUES         */JELF 670\n    SN   =LSN,.                                                         JELF 680\n    CN   =LCN,.                                                         JELF 690\n    DN   =LDN,.                                                         JELF 700\n    END,.                              /*END OF PROCEDURE JELF        */JELF 710\n LGAM..                                                                 LGAM  10\n /*********************************************************************/LGAM  20\n /*                                                                   */LGAM  30\n /*      COMPUTES THE DOUBLE PRECISION NATURAL LOGARITHM OF THE GAMMA */LGAM  40\n /*      FUNCTION OF A GIVEN DOUBLE PRECISION ARGUMENT.               */LGAM  50\n /*                                                                   */LGAM  60\n /*********************************************************************/LGAM  70\n    PROCEDURE (XX,DLNG),.                                               LGAM  80\n    DECLARE                                                             LGAM  90\n         (XX,ZZ,TERM,RZ2,DLNG) FLOAT BINARY (53),                       LGAM 100\n         ERROR EXTERNAL CHARACTER(1),.                                  LGAM 110\n    ERROR='0',.                                                         LGAM 120\n    ZZ   =XX,.                                                          LGAM 130\n    IF XX LE 1.E10                                                      LGAM 140\n    THEN IF XX LE 1.E-09               /* XX IS NEAR 0 OR NEGATIVE    */LGAM 150\n         THEN DO,.                     /* SET ERROR INDICATOR         */LGAM 160\n              ERROR='2',.                                               LGAM 170\n              DLNG =-1.E75,.                                            LGAM 180\n              END,.                                                     LGAM 200\n         ELSE DO,.                     /* XX > 0 AND < OR = TO 1.E+10 */LGAM 210\n              TERM =1.E0,.                                              LGAM 220\n S10..                                                                  LGAM 230\n              IF ZZ LE 18.E0           /* ZZ < OR = 18                */LGAM 240\n              THEN DO,.                /* TRANSLATE ARGUMENT          */LGAM 250\n                   TERM =TERM*ZZ,.                                      LGAM 260\n                   ZZ   =ZZ+1.E0,.                                      LGAM 270\n                   GO TO S10,.                                          LGAM 280\n                   END,.                                                LGAM 290\n              ELSE DO,.                /* CALC. EQUATION 1            */LGAM 300\n                   RZ2  =1.E0/(ZZ*ZZ),.                                 LGAM 310\n                   DLNG =(ZZ-0.5E0)*LOG(ZZ)-ZZ+0.918938533204672E0      LGAM 320\n                         -LOG(TERM)+(1.E0/ZZ)*(.833333333333333E-01     LGAM 330\n                         -(RZ2*(.277777777777777E-02+(RZ2*              LGAM 340\n                         (.793650793650793E-03-(RZ2*                    LGAM 350\n                         (.595238095238095E-03))))))),.                 LGAM 360\n                   END,.                                                LGAM 380\n              END,.                                                     LGAM 390\n    ELSE IF XX LT 1.E70                /* XX > 1.E+10 AND < 1.E+70    */LGAM 400\n         THEN DLNG =ZZ*(LOG(ZZ)-1.E0),./* CALC. EQUATION 2            */LGAM 410\n         ELSE DO,.                     /* XX > OR = 1.E+70            */LGAM 450\n              ERROR='1',.              /* SET ERROR INDICATOR         */LGAM 460\n              DLNG =1.E75,.                                             LGAM 470\n              END,.                                                     LGAM 480\n    RETURN,.                                                            LGAM 500\n    END,.                              /* END OF PROCEDURE LGAM       */LGAM 510\n TALY..                                                                 TALY  10\n /*********************************************************************/TALY  20\n /*                                                                   */TALY  30\n /*      TO CALCULATE TOTAL, MEAN, STANDARD DEVIATION, MINIMUM,       */TALY  40\n /*      MAXIMUM FOR EACH VARIABLE IN A SET (OR A SUBSET) OF OBSER-   */TALY  50\n /*      VATIONS.                                                     */TALY  60\n /*                                                                   */TALY  70\n /*********************************************************************/TALY  80\n    PROCEDURE (A,S,TOTAL,AVER,SD,VMIN,VMAX,NO,NV),.                     TALY  90\n    DECLARE                                                             TALY 100\n         ERROR EXTERNAL CHARACTER (1),                                  TALY 110\n         (I,J,K,NO,NV)                                                  TALY 120\n         FIXED BINARY,                                                  TALY 130\n         (A(*,*),S(*),TOTAL(*),AVER(*),SD(*),VMIN(*),VMAX(*),SCNT,D)    TALY 140\n         FLOAT BINARY,.                                                 TALY 150\n /*                                                                   */TALY 160\n /*      CLEAR OUTPUT VECTORS AND INITIALIZE VMIN,VMAX.               */TALY 170\n /*                                                                   */TALY 180\n    ERROR='0',.                                                         TALY 190\n         DO I=1 TO NV,.                                                 TALY 200\n         TOTAL(I)  =0,.                                                 TALY 210\n         AVER(I)   =0,.                                                 TALY 220\n         SD(I)     =0,.                                                 TALY 230\n         VMIN(I)   =0,.                                                 TALY 240\n         VMAX(I)   =0,.                                                 TALY 250\n         END,.                                                          TALY 260\n    IF NV LE 0 OR NO LE 0              /* NUMBER OF OBSERVATIONS OR   */TALY 270\n    THEN DO,.                          /* THE NUMBER OF VARIABLES LESS*/TALY 280\n         ERROR='1',.                   /* THAN OR EQUAL TO ZERO.      */TALY 290\n         GO TO S50,.                                                    TALY 300\n         END,.                                                          TALY 310\n         DO J = 1 TO NV,.                                               TALY 320\n         TOTAL(J)=0.0,.                                                 TALY 330\n         AVER(J)=0.0,.                                                  TALY 340\n         SD(J)=0.0,.                                                    TALY 350\n         END,.                                                          TALY 360\n         DO J = 1 TO NO,.                                               TALY 370\n         IF S(J) NE 0.0                                                 TALY 380\n         THEN DO,.                                                      TALY 390\n              K    =J,.                                                 TALY 400\n              GO TO S10,.                                               TALY 410\n              END,.                                                     TALY 420\n         END,.                                                          TALY 430\n /*                                                                   */TALY 440\n /*      NO OBSERVATIONS ARE IN SUBSET                                */TALY 450\n /*                                                                   */TALY 460\n    ERROR='2',.                                                         TALY 470\n    GO TO S50,.                                                         TALY 480\n S10..                                                                  TALY 490\n         DO J = 1 TO NV,.                                               TALY 500\n         VMIN(J)=A(K,J),.                                               TALY 510\n         VMAX(J)=VMIN(J),.                                              TALY 520\n         END,.                                                          TALY 530\n    SCNT =0.0,.                        /* TEST SUBSET VECTOR          */TALY 540\n         DO I = K TO NO,.                                               TALY 550\n         IF S(I) NE 0.0                                                 TALY 560\n         THEN DO,.                                                      TALY 570\n              SCNT =SCNT+1.0,.                                          TALY 580\n                   DO J = 1 TO NV,.    /* CALCULATE TOTAL,MAX,MIN     */TALY 590\n                   TOTAL(J)=TOTAL(J)+A(I,J),.                           TALY 600\n                   IF A(I,J) LT VMIN(J)                                 TALY 610\n                   THEN VMIN(J)=A(I,J),.                                TALY 620\n                   IF A(I,J) GT VMAX(J)                                 TALY 630\n                   THEN VMAX(J)=A(I,J),.                                TALY 640\n                   SD(J)=SD(J)+A(I,J)*A(I,J),.                          TALY 650\n                   END,.                                                TALY 660\n              END,.                                                     TALY 670\n         END,.                                                          TALY 680\n /*                                                                   */TALY 690\n /*      CALCULATE MEANS AND STANDARD DEVIATIONS.                     */TALY 700\n /*                                                                   */TALY 710\n         DO J = 1 TO NV,.                                               TALY 720\n         AVER(J)=TOTAL(J)/SCNT,.       /* COMPUTE MEAN                */TALY 730\n         IF SCNT= 1.0                                                   TALY 740\n         THEN DO,.                                                      TALY 750\n              ERROR='3',.              /* SAMPLE SIZE IN SUBSET = 1   */TALY 760\n              SD(J)=0.0,.                                               TALY 770\n              GO TO S20,.                                               TALY 780\n              END,.                                                     TALY 790\n         ELSE DO,.                                                      TALY 800\n              D    =SD(J)-TOTAL(J)*TOTAL(J)/SCNT,.                      TALY 810\n              IF D LE 0.0                                               TALY 820\n              THEN DO,.                                                 TALY 830\n                   ERROR='4',.         /* VARIANCE = 0.0              */TALY 840\n                   SD(J)=0.0,.                                          TALY 850\n                   GO TO S20,.                                          TALY 860\n                   END,.                                                TALY 870\n              ELSE SD(J)=SQRT(D/(SCNT-1.0)),.                           TALY 880\n              END,.                                                     TALY 890\n S20..                                                                  TALY 900\n         END,.                                                          TALY 910\n S50..                                                                  TALY 920\n    RETURN,.                                                            TALY 930\n    END,.                              /*END OF PROCEDURE TALY        */TALY 940\n BOUN..                                                                 BOUN  10\n /*********************************************************************/BOUN  20\n /*                                                                   */BOUN  30\n /*      TO SELECT FROM A SET (OR A SUBSET) OF OBSERVATIONS THE       */BOUN  40\n /*      NUMBER OF OBSERVATIONS UNDER, BETWEEN AND OVER TWO GIVEN     */BOUN  50\n /*      BOUNDS FOR EACH VARIABLE.                                    */BOUN  60\n /*                                                                   */BOUN  70\n /*********************************************************************/BOUN  80\n    PROCEDURE (A,S,BLO,BHI,UNDER,BETW,OVER,NO,NV),.                     BOUN  90\n    DECLARE                                                             BOUN 100\n         (I,J,NO,NV)                                                    BOUN 110\n         FIXED BINARY,                                                  BOUN 120\n         ERROR EXTERNAL CHARACTER(1),                                   BOUN 130\n         (A(*,*),S(*),BLO(*),BHI(*),UNDER(*),BETW(*),OVER(*))           BOUN 140\n         FLOAT BINARY,.                                                 BOUN 150\n /*                                                                   */BOUN 160\n    ERROR='0',.                                                         BOUN 170\n    IF NV LE 0 OR NO LE 0              /* NUMBER OF OBSERVATIONS OR   */BOUN 180\n    THEN DO,.                          /* THE NUMBER OF VARIABLES LESS*/BOUN 190\n         ERROR='1',.                   /* THAN OR EQUAL TO ZERO.      */BOUN 200\n         GO TO FIN,.                                                    BOUN 210\n         END,.                                                          BOUN 220\n         DO J = 1 TO NV,.              /* CLEAR OUTPUT VECTORS        */BOUN 230\n         UNDER(J)=0.0,.                                                 BOUN 240\n         BETW(J)=0.0,.                                                  BOUN 250\n         OVER(J)=0.0,.                                                  BOUN 260\n         END,.                                                          BOUN 270\n         DO J = 1 TO NV,.                                               BOUN 280\n         IF BHI(J) LE BLO(J)           /* LOWER BOUND GREATER THAN    */BOUN 290\n         THEN DO,.                     /* UPPER BOUND.                */BOUN 300\n              ERROR='2',.                                               BOUN 310\n              GO TO FIN,.                                               BOUN 320\n              END,.                                                     BOUN 330\n         END,.                                                          BOUN 340\n         DO I = 1 TO NO,.                                               BOUN 350\n         IF S(I) NE 0.0                /* TEST SUBSET VECTOR          */BOUN 360\n         THEN DO,.                                                      BOUN 370\n /*                                                                   */BOUN 380\n /*      COMPARE OBSERVATIONS WITH BOUNDS                             */BOUN 390\n /*                                                                   */BOUN 400\n                   DO J = 1 TO NV,.                                     BOUN 410\n                   IF A(I,J) GE BLO(J)                                  BOUN 420\n                   THEN DO,.                                            BOUN 430\n                        IF A(I,J) LE BHI(J)                             BOUN 440\n                        THEN BETW(J)=BETW(J)+1.0,.                      BOUN 450\n                        ELSE OVER(J)=OVER(J)+1.0,.                      BOUN 460\n                        END,.                                           BOUN 470\n                   ELSE UNDER(J)=UNDER(J)+1.0,.                         BOUN 480\n                   END,.                                                BOUN 490\n              END,.                                                     BOUN 500\n         END,.                                                          BOUN 510\n FIN..                                                                  BOUN 520\n    RETURN,.                                                            BOUN 530\n    END,.                              /*END OF PROCEDURE BOUN        */BOUN 540\n ABST..                                                                 ABST  10\n /*********************************************************************/ABST  20\n /*                                                                   */ABST  30\n /*      TO TEST MISSING OR ZERO VALUES FOR OBSERVATION MATRIX A.     */ABST  40\n /*                                                                   */ABST  50\n /*********************************************************************/ABST  60\n    PROCEDURE (A,S,NO,NV),.                                             ABST  70\n    DECLARE                                                             ABST  80\n         (I,J,NO,NV)                                                    ABST  90\n         FIXED BINARY,                                                  ABST 100\n         ERROR EXTERNAL CHARACTER(1),                                   ABST 110\n         (A(*,*),S(*)) FLOAT BINARY,.                                   ABST 120\n /*                                                                   */ABST 130\n    ERROR='0',.                                                         ABST 140\n    IF NV LE 0 OR NO LE 0              /* NUMBER OF OBSERVATIONS OR   */ABST 150\n    THEN DO,.                          /* THE NUMBER OF VARIABLES LESS*/ABST 160\n         ERROR='1',.                   /* THAN OR EQUAL TO ZERO.      */ABST 170\n         GO TO FIN,.                                                    ABST 180\n         END,.                                                          ABST 190\n         DO I = 1 TO NO,.                                               ABST 200\n              DO J = 1 TO NV,.                                          ABST 210\n              IF A(I,J)= 0.0                                            ABST 220\n              THEN DO,.                                                 ABST 230\n                   S(I) =0.0,.                                          ABST 240\n                   GO TO S10,.                                          ABST 250\n                   END,.                                                ABST 260\n              END,.                                                     ABST 270\n         S(I) =1.0,.                                                    ABST 280\n S10..                                                                  ABST 290\n         END,.                                                          ABST 300\n FIN..                                                                  ABST 310\n    RETURN,.                                                            ABST 320\n    END,.                              /*END OF PROCEDURE ABST        */ABST 330\n SBST..                                                                 SBST  10\n /*********************************************************************/SBST  20\n /*                                                                   */SBST  30\n /*      TO DERIVE A SUBSET VECTOR INDICATING WHICH OBSERVATIONS IN   */SBST  40\n /*      A SET HAVE SATISFIED CERTAIN CONDITIONS.                     */SBST  50\n /*                                                                   */SBST  60\n /*********************************************************************/SBST  70\n    PROCEDURE (A,C,R,B,S,NO,NV,NC),.                                    SBST  80\n    DECLARE                                                             SBST  90\n         B ENTRY,                                                       SBST 100\n         ERROR EXTERNAL CHARACTER(1),                                   SBST 110\n         (I,ICOL,IGO,J,NC,NO)                                           SBST 120\n         FIXED BINARY,                                                  SBST 130\n         (A(*,*),C(*,*),R(*),S(*),Q,TR)                                 SBST 140\n         BINARY FLOAT,                                                  SBST 150\n         T(6) LABEL,.                                                   SBST 160\n /*                                                                   */SBST 170\n    ERROR='0',.                                                         SBST 180\n         DO I=1 TO NO,.                                                 SBST 190\n         S(I) =0,.                                                      SBST 200\n         END,.                                                          SBST 210\n    IF NO LE 0 OR NV LE 0 OR NC LE 0   /* NUMBER OF OBSERVATIONS,     */SBST 220\n    THEN DO,.                          /* VARIABLES, OR CONDITIONS IS */SBST 230\n         ERROR='1',.                   /* LESS THAN OR EQUAL TO ZERO. */SBST 240\n         GO TO FIN,.                                                    SBST 250\n         END,.                                                          SBST 260\n         DO I = 1 TO NO,.                                               SBST 270\n              DO J = 1 TO NC,.                                          SBST 280\n              R(J) =0.0,.              /* CLEAR R VECTOR              */SBST 290\n /*                                                                   */SBST 300\n /*      LOCATE ELEMENT IN OBSERVATION MATRIX AND RELATION CODE       */SBST 310\n /*                                                                   */SBST 320\n              ICOL =C(1,J),.                                            SBST 330\n              IGO  =C(2,J),.                                            SBST 340\n              IF IGO LT 1 OR IGO GT 6  /* CONDITION VALUE INVALID     */SBST 350\n              THEN DO,.                                                 SBST 360\n                   ERROR='2',.                                          SBST 370\n                   GO TO FIN,.                                          SBST 380\n                   END,.                                                SBST 390\n              IF ICOL LT 1 OR ICOL GT NV                                SBST 400\n              THEN DO,.                                                 SBST 410\n                   ERROR ='3',.        /* INVALID VARIABLE NUMBER     */SBST 420\n                   GO TO FIN,.                                          SBST 430\n                   END,.                                                SBST 440\n              Q    =A(I,ICOL)-C(3,J),. /* FORM R VECTOR               */SBST 450\n              GO TO T(IGO),.                                            SBST 460\n T(1)..                                                                 SBST 470\n              IF Q LT 0.0                                               SBST 480\n              THEN GO TO S10,.                                          SBST 490\n              GO TO S20,.                                               SBST 500\n T(2)..                                                                 SBST 510\n              IF Q LE 0.0                                               SBST 520\n              THEN GO TO S10,.                                          SBST 530\n              GO TO S20,.                                               SBST 540\n T(3)..                                                                 SBST 550\n              IF Q = 0.0                                                SBST 560\n              THEN GO TO S10,.                                          SBST 570\n              GO TO S20,.                                               SBST 580\n T(4)..                                                                 SBST 590\n              IF Q NE 0.0                                               SBST 600\n              THEN GO TO S10,.                                          SBST 610\n              GO TO S20,.                                               SBST 620\n T(5)..                                                                 SBST 630\n              IF Q GE 0.0                                               SBST 640\n              THEN GO TO S10,.                                          SBST 650\n              GO TO S20,.                                               SBST 660\n T(6)..                                                                 SBST 670\n              IF Q LE 0.0                                               SBST 680\n              THEN GO TO S20,.                                          SBST 690\n S10..                                                                  SBST 700\n              R(J) =1.0,.                                               SBST 710\n S20..                                                                  SBST 720\n              END,.                                                     SBST 730\n         CALL B (R,TR),.               /* CALCULATE S VECTOR          */SBST 740\n         S(I) =TR,.                                                     SBST 750\n         END,.                                                          SBST 760\n FIN..                                                                  SBST 770\n    RETURN,.                                                            SBST 780\n    END,.                              /*END OF PROCEDURE SBST        */SBST 790\n TAB1..                                                                 TAB1  10\n /*********************************************************************/TAB1  20\n /*                                                                   */TAB1  30\n /*      TO TABULATE FOR ONE VARIABLE IN AN OBSERVATION MATRIX (OR A  */TAB1  40\n /*      SUBSET), THE FREQUENCY AND PERCENT FREQUENCY OVER GIVEN      */TAB1  50\n /*      CLASS INTERVALS. IN ADDITION, CALCULATE FOR THE SAME VARIABLE*/TAB1  60\n /*      THE TOTAL, MEAN, STANDARD DEVIATION, MINIMUM, AND            */TAB1  70\n /*      MAXIMUM.                                                     */TAB1  80\n /*                                                                   */TAB1  90\n /*********************************************************************/TAB1 100\n    PROCEDURE (A,S,NOVAR,UBO,FREQ,PCT,STATS,NO,NV),.                    TAB1 110\n    DECLARE                                                             TAB1 120\n         ERROR EXTERNAL CHARACTER (1),                                  TAB1 130\n         (I,INN,INTX,J,K,NO,NOVAR,KK)                                   TAB1 140\n         FIXED BINARY,                                                  TAB1 150\n         (A(*,*),S(*),UBO(*),FREQ(*),PCT(*),STATS(*),SCNT,VMIN,VMAX,    TAB1 160\n         SINT,TEMP)                                                     TAB1 170\n         BINARY FLOAT,.                                                 TAB1 180\n /*                                                                   */TAB1 190\n    ERROR='0',.                                                         TAB1 200\n         IF NOVAR LE 0 OR NOVAR GT NV  /* VALUE OF THE VARIABLE TO BE */TAB1 210\n         THEN DO,.                     /* TABULATED IS INVALID        */TAB1 220\n              ERROR='6',.                                               TAB1 230\n              GO TO S50,.                                               TAB1 240\n              END,.                                                     TAB1 250\n    IF NV LE 0 OR NO LE 0                                               TAB1 260\n    THEN DO,.                          /* NUMBER OF OBSERVATIONS OR   */TAB1 270\n         ERROR='1',.                   /* THE NUMBER OF VARIABLES ARE */TAB1 280\n         GO TO S50,.                   /* LESS THAN OR EQUAL TO ZERO. */TAB1 290\n         END,.                                                          TAB1 300\n    INN  =UBO(2),.                     /* CALCULATE INTERVAL SIZE     */TAB1 310\n         DO J = 1 TO INN,.             /* CLEAR OUTPUT VECTORS        */TAB1 320\n         FREQ(J)=0.0,.                                                  TAB1 330\n         PCT(J)=0.0,.                                                   TAB1 340\n         END,.                                                          TAB1 350\n         DO J = 1 TO 5,.                                                TAB1 360\n         STATS(J)=0.0,.                                                 TAB1 370\n         END,.                                                          TAB1 380\n    IF UBO(1) GT UBO(3) OR UBO(2) LE 2.0                                TAB1 390\n    THEN DO,.                          /* INVALID BOUNDS OR THE NUMBER*/TAB1 400\n         ERROR='2',.                   /* OF INTERVALS LESS THAN OR   */TAB1 410\n         GO TO S50,.                   /* EQUAL TO TWO.               */TAB1 420\n         END,.                                                          TAB1 430\n         DO I = 1 TO NO,.              /* CALCULATE MAX AND MIN       */TAB1 440\n         IF S(I) NE 0.0                                                 TAB1 450\n         THEN DO,.                                                      TAB1 460\n              KK   =I,.                                                 TAB1 470\n              VMIN =A(I,NOVAR),.                                        TAB1 480\n              VMAX =VMIN,.                                              TAB1 490\n              GO TO S10,.                                               TAB1 500\n              END,.                                                     TAB1 510\n         END,.                                                          TAB1 520\n    ERROR='3',.                        /* NO OBSERVATION IN SUBSET    */TAB1 530\n    GO TO S50,.                                                         TAB1 540\n S10..                                                                  TAB1 550\n         DO I = KK TO NO,.                                              TAB1 560\n         IF S(I) NE 0.0                                                 TAB1 570\n         THEN DO,.                                                      TAB1 580\n              IF A(I,NOVAR) LT VMIN                                     TAB1 590\n              THEN VMIN =A(I,NOVAR),.                                   TAB1 600\n              IF A(I,NOVAR) GT VMAX                                     TAB1 610\n              THEN VMAX =A(I,NOVAR),.                                   TAB1 620\n              END,.                                                     TAB1 630\n         END,.                                                          TAB1 640\n    STATS(4)=VMIN,.                                                     TAB1 650\n    STATS(5)=VMAX,.                                                     TAB1 660\n    IF UBO(1)= UBO(3)                                                   TAB1 670\n    THEN DO,.                                                           TAB1 680\n         UBO(1)=VMIN,.                                                  TAB1 690\n         UBO(3)=VMAX,.                                                  TAB1 700\n         END,.                                                          TAB1 710\n    SINT =(UBO(3)-UBO(1))/(UBO(2)-2),.                                  TAB1 720\n    SCNT =0.0,.                        /* TEST SUBSET VECTOR          */TAB1 730\n         DO I = KK TO NO,.                                              TAB1 740\n         IF S(I) NE 0.0                                                 TAB1 750\n         THEN DO,.                                                      TAB1 760\n              SCNT =SCNT+1.0,.                                          TAB1 770\n /*                                                                   */TAB1 780\n /*      DEVELOP TOTALS AND FREQUENCIES                               */TAB1 790\n /*                                                                   */TAB1 800\n              STATS(1)=STATS(1)+A(I,NOVAR),.                            TAB1 810\n              STATS(3)=STATS(3)+A(I,NOVAR)**2,.                         TAB1 820\n              TEMP =UBO(1)-SINT,.                                       TAB1 830\n              INTX =INN-1,.                                             TAB1 840\n                   DO J = 1 TO INTX,.                                   TAB1 850\n                   TEMP =TEMP+SINT,.                                    TAB1 860\n                   IF A(I,NOVAR) LT TEMP                                TAB1 870\n                   THEN DO,.                                            TAB1 880\n                        K    =J,.                                       TAB1 890\n                        GO TO S20,.                                     TAB1 900\n                        END,.                                           TAB1 910\n                   END,.                                                TAB1 920\n              IF A(I,NOVAR) GE TEMP                                     TAB1 930\n              THEN DO,.                                                 TAB1 940\n                   FREQ(INN)=FREQ(INN)+1.0,.                            TAB1 950\n                   GO TO S30,.                                          TAB1 960\n                   END,.                                                TAB1 970\n S20..                                                                  TAB1 980\n              FREQ(K)=FREQ(K)+1.0,.                                     TAB1 990\n              END,.                                                     TAB11000\n S30..                                                                  TAB11010\n         END,.                                                          TAB11020\n /*                                                                   */TAB11030\n /*      CALCULATE RELATIVE FREQUENCIES                               */TAB11040\n /*                                                                   */TAB11050\n         DO J = 1 TO INN,.                                              TAB11060\n         PCT(J)=FREQ(J)*100.0/SCNT,.                                    TAB11070\n         END,.                                                          TAB11080\n /*                                                                   */TAB11090\n /*      CALCULATE MEAN AND STANDARD DEVIATION                        */TAB11100\n /*                                                                   */TAB11110\n    STATS(2)=STATS(1)/SCNT,.                                            TAB11120\n    IF SCNT= 1.0                                                        TAB11130\n    THEN DO,.                                                           TAB11140\n         ERROR='4',.                   /* SAMPLE SIZE = 1             */TAB11150\n         STATS(3)=0.0,.                                                 TAB11160\n         GO TO S50,.                                                    TAB11170\n         END,.                                                          TAB11180\n    ELSE DO,.                                                           TAB11190\n         TEMP =STATS(3)-STATS(1)*STATS(1)/SCNT,.                        TAB11200\n         IF TEMP LE 0.0                                                 TAB11210\n         THEN DO,.                                                      TAB11220\n              ERROR='5',.              /* VARIANCE = 0.0              */TAB11230\n              STATS(3)=0.0,.                                            TAB11240\n              GO TO S50,.                                               TAB11250\n              END,.                                                     TAB11260\n         ELSE STATS(3)=SQRT(TEMP/(SCNT-1.0)),.                          TAB11270\n         END,.                                                          TAB11280\n S50..                                                                  TAB11290\n    RETURN,.                                                            TAB11300\n    END,.                              /*END OF PROCEDURE TAB1        */TAB11310\n TAB2..                                                                 TAB2  10\n /*********************************************************************/TAB2  20\n /*                                                                   */TAB2  30\n /*      TO PERFORM A TWO-WAY CLASSIFICATION OF THE FREQUENCY,        */TAB2  40\n /*      PERCENT FREQUENCY, AND OTHER STATISTICS, OVER GIVEN          */TAB2  50\n /*      CLASS INTERVALS, FOR TWO SELECTED VARIABLES IN AN OBSERVATION*/TAB2  60\n /*      MATRIX.                                                      */TAB2  70\n /*                                                                   */TAB2  80\n /*********************************************************************/TAB2  90\n    PROCEDURE (A,S,NOV,UBO,FREQ,PCT,STAT1,STAT2,NO,NV),.                TAB2 100\n    DECLARE                                                             TAB2 110\n         ERROR EXTERNAL CHARACTER (1),                                  TAB2 120\n         (A(*,*),UBO(*,*),FREQ(*,*),PCT(*,*),STAT1(*,*),STAT2(*,*),     TAB2 130\n         S(*),SINT(2),VMIN,VMAX,SCNT,TEMP,TN,TT,TEMP1,TEMP2)            TAB2 140\n         BINARY FLOAT,                                                  TAB2 150\n         (I,INT1,INT2,J,K,KX,L,N,N1,N2,NO,NOV(*),KK)                    TAB2 160\n         FIXED BINARY,.                                                 TAB2 170\n /*                                                                   */TAB2 180\n    ERROR='0',.                                                         TAB2 190\n         DO I=1 TO 2,.                                                  TAB2 200\n         IF NOV(I) LE 0 OR NOV(I) GT NV/* INVALID VALUE OF VARIABLE TO*/TAB2 210\n         THEN DO,.                     /* BE CROSS TABULATED          */TAB2 220\n              ERROR='6',.                                               TAB2 230\n              GO TO S50,.                                               TAB2 240\n              END,.                                                     TAB2 250\n         END,.                                                          TAB2 260\n    IF NV LE 0 OR NO LE 0              /* NUMBER OF OBSERVATIONS OR   */TAB2 270\n    THEN DO,.                          /* THE NUMBER OF VARIABLES ARE */TAB2 280\n         ERROR='1',.                   /* LESS THAN OR EQUAL TO ZERO. */TAB2 290\n         GO TO S50,.                                                    TAB2 300\n         END,.                                                          TAB2 310\n    INT1 =UBO(2,1),.                                                    TAB2 320\n    INT2 =UBO(2,2),.                                                    TAB2 330\n    N1   =NOV(1),.                                                      TAB2 340\n    N2   =NOV(2),.                                                      TAB2 350\n         DO I = 1 TO 2,.                                                TAB2 360\n         IF UBO(1,I) GT UBO(3,I) OR UBO(2,I) LE 2.0                     TAB2 370\n         THEN DO,.                     /* INVALID BOUNDS OR THE NUMBER*/TAB2 380\n              ERROR='2',.              /* OF INTERVALS LESS THAN OR   */TAB2 390\n              GO TO S50,.              /* EQUAL TO TWO.               */TAB2 400\n              END,.                                                     TAB2 410\n         END,.                                                          TAB2 420\n         DO I = 1 TO INT1,.            /* CLEAR OUTPUT VECTORS        */TAB2 430\n              DO J = 1 TO INT2,.                                        TAB2 440\n              PCT(I,J)=0.0,.                                            TAB2 450\n              FREQ(I,J)=0.0,.                                           TAB2 460\n              END,.                                                     TAB2 470\n         END,.                                                          TAB2 480\n         DO I = 1 TO 3,.                                                TAB2 490\n              DO J = 1 TO INT1,.                                        TAB2 500\n              STAT1(I,J)=0.0,.                                          TAB2 510\n              END,.                                                     TAB2 520\n              DO J = 1 TO INT2,.                                        TAB2 530\n              STAT2(I,J)=0.0,.                                          TAB2 540\n              END,.                                                     TAB2 550\n         END,.                                                          TAB2 560\n         DO I = 1 TO 2,.                                                TAB2 570\n         IF UBO(1,I)= UBO(3,I)         /* DETERMINE LIMITS            */TAB2 580\n         THEN DO,.                                                      TAB2 590\n                   DO J = 1 TO NO,.                                     TAB2 600\n                   IF S(J) NE 0.0                                       TAB2 610\n                   THEN DO,.                                            TAB2 620\n                        KK   =J,.                                       TAB2 630\n                        N    =NOV(I),.                                  TAB2 640\n                        VMAX =A(J,N),.                                  TAB2 650\n                        VMIN =VMAX,.                                    TAB2 660\n                        GO TO S10,.                                     TAB2 670\n                        END,.                                           TAB2 680\n                   END,.                                                TAB2 690\n S10..                                                                  TAB2 700\n                   DO J = KK TO NO,.                                    TAB2 710\n                   IF S(J) NE 0.0                                       TAB2 720\n                   THEN DO,.                                            TAB2 730\n                        IF A(J,N) LT VMIN                               TAB2 740\n                        THEN VMIN =A(J,N),.                             TAB2 750\n                        IF A(J,N) GT VMAX                               TAB2 760\n                        THEN VMAX =A(J,N),.                             TAB2 770\n                        END,.                                           TAB2 780\n                   END,.                                                TAB2 790\n              UBO(1,I)=VMIN,.                                           TAB2 800\n              UBO(3,I)=VMAX,.                                           TAB2 810\n              END,.                                                     TAB2 820\n         END,.                                                          TAB2 830\n /*                                                                   */TAB2 840\n /*      CALCULATE INTERVAL SIZE                                      */TAB2 850\n /*                                                                   */TAB2 860\n         DO J = 1 TO 2,.                                                TAB2 870\n         SINT(J)   =(UBO(3,J)-UBO(1,J))/(UBO(2,J)-(2+1E-3)),.           TAB2 880\n         END,.                                                          TAB2 890\n    SCNT =0.0,.                                                         TAB2 900\n         DO J = 1  TO NO,.             /* TEST SUBSET VECTOR          */TAB2 910\n         IF S(J) NE 0.0                                                 TAB2 920\n         THEN DO,.                                                      TAB2 930\n              SCNT =SCNT+1.0,.                                          TAB2 940\n              TEMP1=UBO(1,1)-SINT(1),. /* CALCULATE FREQUENCIES       */TAB2 950\n                   DO L = 1 TO INT1-1,.                                 TAB2 960\n                   TEMP1=TEMP1+SINT(1),.                                TAB2 970\n                   IF A(J,N1) LT TEMP1                                  TAB2 980\n                   THEN DO,.                                            TAB2 990\n                        K    =L,.                                       TAB21000\n                        GO TO S20,.                                     TAB21010\n                        END,.                                           TAB21020\n                   END,.                                                TAB21030\n              K    =INT1,.                                              TAB21040\n S20..                                                                  TAB21050\n              STAT1(1,K)=STAT1(1,K)+A(J,N1),.                           TAB21060\n              STAT1(2,K)=STAT1(2,K)+1.0,.                               TAB21070\n              STAT1(3,K)=STAT1(3,K)+A(J,N1)**2,.                        TAB21080\n              TEMP2=UBO(1,2)-SINT(2),.                                  TAB21090\n                   DO L = 1 TO INT2-1,.                                 TAB21100\n                   TEMP2=TEMP2+SINT(2),.                                TAB21110\n                   IF A(J,N2) LT TEMP2                                  TAB21120\n                   THEN DO,.                                            TAB21130\n                        KX   =L,.                                       TAB21140\n                        GO TO S30,.                                     TAB21150\n                        END,.                                           TAB21160\n                   END,.                                                TAB21170\n              KX   =INT2,.                                              TAB21180\n S30..                                                                  TAB21190\n              FREQ(K,KX)=FREQ(K,KX)+1.0,.                               TAB21200\n              STAT2(1,KX)=STAT2(1,KX)+A(J,N2),.                         TAB21210\n              STAT2(2,KX)=STAT2(2,KX)+1.0,.                             TAB21220\n              STAT2(3,KX)=STAT2(3,KX)+A(J,N2)**2,.                      TAB21230\n              END,.                                                     TAB21240\n         END,.                                                          TAB21250\n    IF SCNT= 0.0                                                        TAB21260\n    THEN DO,.                                                           TAB21270\n         ERROR='3',.                   /* NO OBSERVATIONS IN SUBSET   */TAB21280\n         GO TO S50,.                                                    TAB21290\n         END,.                                                          TAB21300\n /*                                                                   */TAB21310\n /*      CALCULATE PERCENT FREQUENCIES.                               */TAB21320\n /*                                                                   */TAB21330\n         DO I = 1 TO INT1,.                                             TAB21340\n              DO J = 1 TO INT2,.                                        TAB21350\n              PCT(I,J)=FREQ(I,J)*100.0/SCNT,.                           TAB21360\n              END,.                                                     TAB21370\n         END,.                                                          TAB21380\n /*                                                                   */TAB21390\n /*      CALCULATE TOTALS, MEANS, STANDARD DEVIATIONS                 */TAB21400\n /*                                                                   */TAB21410\n         DO J = 1 TO INT1,.                                             TAB21420\n         TN=STAT1(2,J),.                                                TAB21425\n         IF TN LE 1.0E0                                                 TAB21430\n         THEN DO,.                                                      TAB21440\n              ERROR='4',.              /* NUMBER OF OBSERVATIONS IS   */TAB21450\n              STAT1(3,J)=0.0,.         /* LESS THAN OR EQUAL TO 1 IN  */TAB21460\n              STAT1(2,J)=STAT1(1,J),.  /* SOME INTERVAL               */TAB21470\n              END,.                                                     TAB21480\n         ELSE DO,.                                                      TAB21490\n              TT=STAT1(1,J),.                                           TAB21495\n              TEMP=STAT1(3,J)-TT*TT/TN,.                                TAB21500\n              STAT1(2,J)=TT/TN,.                                        TAB21510\n              IF TEMP LE 0.0E0                                          TAB21520\n              THEN DO,.                                                 TAB21530\n                   ERROR='5',.         /* VARIANCE IS 0.0             */TAB21540\n                   STAT1(3,J)=0.0,.                                     TAB21550\n                   END,.                                                TAB21560\n              ELSE STAT1(3,J)=SQRT(TEMP/(TN-1.0E0)),.                   TAB21570\n              END,.                                                     TAB21580\n         END,.                                                          TAB21590\n         DO J = 1 TO INT2,.                                             TAB21600\n         TN=STAT2(2,J),.                                                TAB21610\n         IF TN LE 1.0E0                                                 TAB21620\n         THEN DO,.                                                      TAB21630\n              ERROR='4',.              /* NUMBER OF OBSERVATIONS IS   */TAB21640\n              STAT2(3,J)=0.0,.         /* LESS THAN OR EQUAL TO 1 IN  */TAB21650\n              STAT2(2,J)=STAT2(1,J),.  /* SOME INTERVAL               */TAB21660\n              END,.                                                     TAB21670\n         ELSE DO,.                                                      TAB21680\n              TT=STAT2(1,J),.                                           TAB21685\n              TEMP=STAT2(3,J)-TT*TT/TN,.                                TAB21690\n              STAT2(2,J)=TT/TN,.                                        TAB21700\n              IF TEMP LE 0.0E0                                          TAB21710\n              THEN DO,.                                                 TAB21720\n                   ERROR='5',.         /* VARIANCE = 0.0              */TAB21730\n                   STAT2(3,J)=0.0,.                                     TAB21740\n                   END,.                                                TAB21750\n              ELSE STAT2(3,J)=SQRT(TEMP/(TN-1.0E0)),.                   TAB21760\n              END,.                                                     TAB21770\n         END,.                                                          TAB21780\n S50..                                                                  TAB21790\n    RETURN,.                                                            TAB21800\n    END,.                              /*END OF PROCEDURE TAB2        */TAB21810\n SUBM..                                                                 SUBM  10\n /*********************************************************************/SUBM  20\n /*                                                                   */SUBM  30\n /*      BASED ON VECTOR S DERIVED FROM PROCEDURE SBST OR ABST, THIS  */SUBM  40\n /*      PROCEDURE COPIES FROM A LARGER MATRIX OF OBSERVATION DATA A  */SUBM  50\n /*      SUBSET MATRIX OF THOSE OBSERVATIONS WHICH HAVE SATISFIED     */SUBM  60\n /*      CERTAIN CONDITIONS.                                          */SUBM  70\n /*                                                                   */SUBM  80\n /*********************************************************************/SUBM  90\n    PROCEDURE (A,D,S,NO,NV,N),.                                         SUBM 100\n    DECLARE                                                             SUBM 110\n         (I,N,NO)                                                       SUBM 120\n         FIXED BINARY,                                                  SUBM 130\n         ERROR EXTERNAL CHARACTER(1),                                   SUBM 140\n         (A(*,*),D(*,*),S(*)) FLOAT BINARY,.                            SUBM 150\n /*                                                                   */SUBM 160\n    ERROR='0',.                                                         SUBM 170\n    D    =0,.                                                           SUBM 180\n    N    =0,.                                                           SUBM 190\n    IF NV LE 0 OR NO LE 0              /* NUMBER OF OBSERVATIONS OR   */SUBM 200\n    THEN ERROR='1',.                   /* THE NUMBER OF VARIABLES ARE */SUBM 210\n    ELSE DO,.                          /* LESS THAN OR EQUAL TO ZERO. */SUBM 220\n              DO I = 1 TO NO,.                                          SUBM 230\n              IF S(I) NE 0.0                                            SUBM 240\n              THEN DO,.                                                 SUBM 250\n                   N    =N+1,.                                          SUBM 260\n                        DO J = 1 TO NV,.                                SUBM 270\n                        D(N,J)=A(I,J),.                                 SUBM 280\n                        END,.                                           SUBM 290\n                   END,.                                                SUBM 300\n              END,.                                                     SUBM 310\n         END,.                                                          SUBM 320\n    RETURN,.                                                            SUBM 330\n    END,.                              /*END OF PROCEDURE SUBM        */SUBM 340\n MOMN..                                                                 MOMN  10\n /*********************************************************************/MOMN  20\n /*                                                                   */MOMN  30\n /*      TO FIND THE FIRST FOUR MOMENTS FOR GROUPED DATA ON EQUAL     */MOMN  40\n /*      CLASS INTERVALS.                                             */MOMN  50\n /*                                                                   */MOMN  60\n /*********************************************************************/MOMN  70\n    PROCEDURE (F,UBO,NOP,ANS),.                                         MOMN  80\n    DECLARE                                                             MOMN  90\n         (F(*),UBO(*),ANS(4),T,E,EE)                                    MOMN 100\n         BINARY FLOAT,                                                  MOMN 110\n         ERROR EXTERNAL CHARACTER (1),                                  MOMN 120\n         (I,JUMP,NOP)                                                   MOMN 130\n         FIXED BINARY,                                                  MOMN 140\n         S(5) LABEL,.                                                   MOMN 150\n /*                                                                   */MOMN 160\n    T    =0,.                          /* INITIALIZE                  */MOMN 170\n    ANS  =0,.                                                           MOMN 180\n    ERROR='0',.                                                         MOMN 190\n    IF UBO(2) GT UBO(3) - UBO(1)                                        MOMN 200\n    THEN DO,.                                                           MOMN 210\n         ERROR='2',.                   /* INCORRECT NO. OF INTERVALS  */MOMN 220\n         GO TO S(1),.                  /* FOR THE SPECIFIED BOUNDS    */MOMN 230\n         END,.                                                          MOMN 240\n    IF UBO(1) GT UBO(3) OR UBO(2) LE 0 /* INVALID BOUNDS              */MOMN 250\n    THEN DO,.                                                           MOMN 260\n         ERROR='1',.                                                    MOMN 270\n         GO TO S(1),.                                                   MOMN 280\n         END,.                         /* CALC. NO. OF CLASS INTERVALS*/MOMN 290\n    N    =FLOOR((UBO(3)-UBO(1))/UBO(2)+1.0E-3),.                        MOMN 300\n         DO I = 1 TO N,.               /* CALCULATE TOTAL FREQUENCY   */MOMN 310\n         T    =T+F(I),.                                                 MOMN 320\n         END,.                                                          MOMN 330\n    JUMP =2,.                                                           MOMN 340\n    IF NOP GE 5                                                         MOMN 350\n    THEN DO,.                                                           MOMN 360\n         NOP  =5,.                                                      MOMN 370\n         JUMP =1,.                                                      MOMN 380\n         END,.                                                          MOMN 390\n    E    =UBO(1)-0.5*UBO(2),.                                           MOMN 400\n         DO I = 1 TO N,.               /* FIRST MOMENT                */MOMN 410\n         E    =E + UBO(2),.                                             MOMN 420\n         ANS(1)=ANS(1)+F(I)*E,.                                         MOMN 430\n         END,.                                                          MOMN 440\n    ANS(1)=ANS(1)/T,.                                                   MOMN 450\n    E    =UBO(1)-0.5*UBO(2)-ANS(1),.                                    MOMN 460\n    S(5) =S(2),.                                                        MOMN 470\n    GO TO S(NOP),.                                                      MOMN 480\n S(2)..                                                                 MOMN 490\n    EE   =E,.                                                           MOMN 500\n         DO I = 1 TO N,.               /* SECOND MOMENT               */MOMN 510\n         EE   =EE+UBO(2),.                                              MOMN 520\n         ANS(2)=ANS(2)+F(I)*EE**2,.                                     MOMN 530\n         END,.                                                          MOMN 540\n    ANS(2)=ANS(2)/T,.                                                   MOMN 550\n    IF JUMP= 2                                                          MOMN 560\n    THEN GO TO S(1),.                                                   MOMN 570\n S(3)..                                                                 MOMN 580\n    EE   =E,.                                                           MOMN 590\n         DO I = 1 TO N,.               /* THIRD MOMENT                */MOMN 600\n         EE   =EE+UBO(2),.                                              MOMN 610\n         ANS(3)=ANS(3)+F(I)*EE**3,.                                     MOMN 620\n         END,.                                                          MOMN 630\n    ANS(3)=ANS(3)/T,.                                                   MOMN 640\n    IF JUMP = 2                                                         MOMN 650\n    THEN GO TO S(1),.                                                   MOMN 660\n S(4)..                                                                 MOMN 670\n    EE   =E,.                                                           MOMN 680\n         DO I = 1 TO N,.               /* FOURTH MOMENT               */MOMN 690\n         EE   =EE+UBO(2),.                                              MOMN 700\n         ANS(4)=ANS(4)+F(I)*EE**4,.                                     MOMN 710\n         END,.                                                          MOMN 720\n    ANS(4)=ANS(4)/T,.                                                   MOMN 730\n S(1)..                                                                 MOMN 740\n    RETURN,.                                                            MOMN 750\n    END,.                              /* END PROCEDURE MOMN          */MOMN 760\n TTST..                                                                 TTST  10\n /*********************************************************************/TTST  20\n /*                                                                   */TTST  30\n /*      TO FIND CERTAIN T-STATISTICS ON THE MEANS OF POPULATIONS.    */TTST  40\n /*                                                                   */TTST  50\n /*********************************************************************/TTST  60\n    PROCEDURE (A,NA,B,NB,NOP,NDF,ANS),.                                 TTST  70\n    DECLARE                                                             TTST  80\n         ERROR EXTERNAL CHARACTER (1),                                  TTST  90\n         (A(*),B(*),ANS,AMEAN,BMEAN,FNA,FNB,SA2,SB2,S,A1,A2)            TTST 100\n         FLOAT BINARY,                                                  TTST 110\n         (I,NA,NB,NDF,NOP)                                              TTST 115\n         BINARY FIXED,                                                  TTST 116\n         (T(6)) LABEL,.                                                 TTST 120\n /*                                                                   */TTST 130\n    NDF  ='0',.                        /* INITIALIZATION              */TTST 140\n    ERROR='0',.                                                         TTST 150\n    ANS  =0.0,.                                                         TTST 160\n    IF NOP LT 1 OR NOP GT 4                                             TTST 170\n    THEN DO,.                                                           TTST 180\n         ERROR='1',.                   /* WRONG OPTION CODE           */TTST 190\n         GO TO FIN,.                                                    TTST 200\n         END,.                                                          TTST 210\n    IF NOP=1 AND NA NE 1                                                TTST 220\n    THEN DO,.                          /* NA MUST BE 1 WHEN NOP=1     */TTST 230\n         ERROR='5',.                                                    TTST 240\n         GO TO FIN,.                                                    TTST 250\n         END,.                                                          TTST 260\n    IF NOP=4 AND NB NE NA                                               TTST 270\n    THEN DO,.                          /* NA MUST EQUAL NB WHEN NOP=4 */TTST 280\n         ERROR='6',.                                                    TTST 290\n         GO TO FIN,.                                                    TTST 300\n         END,.                                                          TTST 310\n /*                                                                   */TTST 320\n /*      TEST SAMPLE SIZE                                             */TTST 330\n /*                                                                   */TTST 340\n    IF NA LE 1                                                          TTST 350\n    THEN DO,.                                                           TTST 360\n         IF NOP GT 1                                                    TTST 370\n         THEN DO,.                                                      TTST 380\n              ERROR='2',.              /* FIRST SAMPLE FOR OPTIONS    */TTST 390\n              GO TO FIN,.              /* 2-4 IS 1 OR LESS            */TTST 400\n              END,.                                                     TTST 410\n         END,.                                                          TTST 420\n    IF NB LE 1                                                          TTST 430\n    THEN DO,.                                                           TTST 440\n         ERROR='2',.                   /* SECOND SAMPLE SIZE IS 1 OR  */TTST 450\n         GO TO FIN,.                   /* LESS                        */TTST 460\n         END,.                                                          TTST 470\n    FNA  =NA,.                                                          TTST 480\n    FNB  =NB,.                                                          TTST 490\n    AMEAN=0.0,.                        /* CALCULATE MEAN OF A         */TTST 500\n         DO I = 1 TO NA,.                                               TTST 510\n         AMEAN=AMEAN+A(I),.                                             TTST 520\n         END,.                                                          TTST 530\n    AMEAN=AMEAN/FNA,.                                                   TTST 540\n    BMEAN=0.0,.                        /* CALCULATE MEAN OF B         */TTST 550\n         DO I = 1 TO NB,.                                               TTST 560\n         BMEAN=BMEAN+B(I),.                                             TTST 570\n         END,.                                                          TTST 580\n    BMEAN=BMEAN/FNB,.                                                   TTST 590\n /*                                                                   */TTST 600\n /*      CALCULATE THE VARIANCE OF A                                  */TTST 610\n /*                                                                   */TTST 620\n    IF NOP LT 4 AND NOP GT 1                                            TTST 630\n    THEN DO,.                                                           TTST 640\n         SA2  =0.0,.                                                    TTST 650\n              DO I = 1 TO NA,.                                          TTST 660\n              SA2  =SA2+(A(I)-AMEAN)**2,.                               TTST 670\n              END,.                                                     TTST 680\n         SA2  =SA2/(FNA-1.0),.                                          TTST 690\n         IF SA2 LE 0.0                                                  TTST 700\n         THEN DO,.                                                      TTST 710\n              ERROR='3',.              /* FIRST SAMPLE VARIANCE = 0.0 */TTST 720\n              GO TO FIN,.                                               TTST 730\n              END,.                                                     TTST 740\n         END,.                                                          TTST 750\n    IF NOP LT 4                                                         TTST 760\n    THEN DO,.                                                           TTST 770\n         SB2  =0.0,.                                                    TTST 780\n              DO I = 1 TO NB,.                                          TTST 790\n              SB2  =SB2+(B(I)-BMEAN)**2,.                               TTST 800\n              END,.                                                     TTST 810\n         SB2  =SB2/(FNB-1.0),.                                          TTST 820\n         IF SB2 LE 0.0                                                  TTST 830\n         THEN DO,.                                                      TTST 840\n              ERROR='3',.              /* SECOND SAMPLE VARIANCE = 0.0*/TTST 850\n              GO TO FIN,.                                               TTST 860\n              END,.                                                     TTST 870\n         END,.                                                          TTST 880\n    GO TO T(NOP),.                                                      TTST 890\n T(1)..                                /* OPTION ONE                  */TTST 900\n    ANS  =((BMEAN-AMEAN)/SQRT(SB2))*SQRT(FNB),.                         TTST 910\n    NDF  =NB-1,.                                                        TTST 920\n    GO TO FIN,.                                                         TTST 930\n T(2)..                                /* OPTION TWO                  */TTST 940\n    NDF  =NA+NB-2,.                                                     TTST 950\n    S    =SQRT(((FNA-1.0)*SA2+(FNB-1.0)*SB2)/NDF),.                     TTST 960\n    ANS  =((BMEAN-AMEAN)/S)*(1.0/SQRT(1.0/FNA+1.0/FNB)),.               TTST 970\n    GO TO FIN,.                                                         TTST 980\n T(3)..                                /* OPTION THREE                */TTST 990\n    ANS  =(BMEAN-AMEAN)/SQRT(SA2/FNA+SB2/FNB),.                         TTST1000\n    A1   =(SA2/FNA+SB2/FNB)**2,.                                        TTST1010\n    A2   =(SA2/FNA)**2/(FNA+1.0)+(SB2/FNB)**2/(FNB+1.0),.               TTST1020\n    NDF  =A1/A2-2.0+0.5,.                                               TTST1030\n    GO TO FIN,.                                                         TTST1040\n T(4)..                                /* OPTION FOUR                 */TTST1050\n    A1   =BMEAN-AMEAN,.                                                 TTST1060\n    A2   =0.0,.                                                         TTST1070\n         DO I = 1 TO NB,.                                               TTST1080\n         A2   =A2+(B(I)-A(I)-A1)**2,.                                   TTST1090\n         END,.                                                          TTST1100\n    IF A2 LE 0.0                                                        TTST1110\n    THEN DO,.                                                           TTST1120\n         ERROR='4',.                   /* TWO SAMPLES ARE IDENTICAL   */TTST1130\n         GO TO FIN,.                                                    TTST1140\n         END,.                                                          TTST1150\n    A2   =SQRT(A2/(FNB-1.0)),.                                          TTST1160\n    ANS  =(A1/A2)*SQRT(FNB),.                                           TTST1170\n    NDF  =NB-1,.                                                        TTST1180\n FIN..                                                                  TTST1190\n    RETURN,.                                                            TTST1200\n    END,.                              /*END OF PROCEDURE TTST        */TTST1210\n CORR..                                                                 CORR  10\n /*********************************************************************/CORR  20\n /*                                                                   */CORR  30\n /*      TO COMPUTE MEANS, STANDARD DEVIATIONS, SUMS OF CROSS-PRODUCTS*/CORR  40\n /*      OF DEVIATIONS, AND CORRELATION COEFFICIENTS.                 */CORR  50\n /*                                                                   */CORR  60\n /*********************************************************************/CORR  70\n    PROCEDURE (N,M,IO,X,XBAR,STD,RX,R,B),.                              CORR  80\n    DECLARE                                                             CORR  90\n         ERROR EXTERNAL CHARACTER (1),                                  CORR 100\n         (I,IO,J,K,KK,M,N)                                              CORR 110\n         FIXED BINARY,                                                  CORR 120\n         (X(*,*),D(M),FN,FKK)                                           CORR 130\n         FLOAT BINARY,                                                  CORR 140\n         (R(*,*),RX(*,*),XBAR(*),STD(*),B(*),T(M))                      CORR 150\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/CORR 160\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/CORR 170\n /*                                                                   */CORR 180\n    ERROR='0',.                                                         CORR 190\n    IF N LE 0 OR M LE 0                /* THE NUMBER OF OBSERVATIONS  */CORR 200\n    THEN DO,.                          /* OR THE NUMBER OF VARIABLES  */CORR 210\n         ERROR='1',.                   /* ARE LESS THAN OR EQUAL TO   */CORR 220\n         GO TO FIN,.                   /* ZERO.                       */CORR 230\n         END,.                                                          CORR 240\n    FN   =N,.                          /* INITIALIZATION              */CORR 250\n    T    =0.0,.                                                         CORR 260\n         DO I = 1 TO M,.                                                CORR 270\n         B(I) =0.0,.                                                    CORR 280\n              DO J = 1 TO M,.                                           CORR 290\n              R(I,J)=0.0,.                                              CORR 300\n              END,.                                                     CORR 310\n         END,.                                                          CORR 320\n    IF IO NE 0                                                          CORR 330\n    THEN DO,.                                                           CORR 340\n              DO J = 1 TO M,.          /* DATA IS ALREADY IN CORE     */CORR 350\n                   DO I = 1 TO N,.                                      CORR 360\n                   T(J) =T(J)+X(I,J),.                                  CORR 370\n                   END,.                                                CORR 380\n              XBAR(J)=T(J),.                                            CORR 390\n              T(J) =T(J)/FN,.                                           CORR 400\n              END,.                                                     CORR 410\n              DO I = 1 TO N,.                                           CORR 420\n                   DO J = 1 TO M,.                                      CORR 430\n                   D(J) =X(I,J)-T(J),.                                  CORR 440\n                   B(J) =B(J)+D(J),.                                    CORR 450\n                   END,.                                                CORR 460\n                   DO J = 1 TO M,.                                      CORR 470\n                        DO K = J TO M,.                                 CORR 480\n                        R(J,K)=R(J,K)+D(J)*D(K),.                       CORR 490\n                        END,.                                           CORR 500\n                   END,.                                                CORR 510\n              END,.                                                     CORR 520\n         GO TO CALC,.                                                   CORR 530\n         END,.                                                          CORR 540\n /*                                                                   */CORR 550\n /*      READ OBSERVATIONS AND CALCULATE TEMPORARY MEANS              */CORR 560\n /*                                                                   */CORR 570\n    IF N LT M                                                           CORR 580\n    THEN KK   =N,.                                                      CORR 590\n    ELSE KK   =M,.                                                      CORR 600\n    FKK  =KK,.                                                          CORR 610\n         DO I = 1 TO KK,.                                               CORR 620\n         CALL DAT2 (M,D),.                                              CORR 630\n              DO J = 1 TO M,.                                           CORR 640\n              T(J) =T(J)+D(J),.                                         CORR 650\n              RX(I,J)=D(J),.                                            CORR 660\n              END,.                                                     CORR 670\n         END,.                                                          CORR 680\n         DO J = 1 TO M,.                                                CORR 690\n         XBAR(J)=T(J),.                                                 CORR 700\n         T(J) =T(J)/FKK,.                                               CORR 710\n         END,.                                                          CORR 720\n /*                                                                   */CORR 730\n /*      CALCULATE SUMS OF CROSS-PRODUCTS OF DEVIATIONS FROM          */CORR 740\n /*      TEMPORARY MEANS FOR M OBSERVATIONS.                          */CORR 750\n /*                                                                   */CORR 760\n         DO I = 1 TO KK,.                                               CORR 770\n              DO J = 1 TO M,.                                           CORR 780\n              D(J) =RX(I,J)-T(J),.                                      CORR 790\n              END,.                                                     CORR 800\n              DO J = 1 TO M,.                                           CORR 810\n              B(J) =B(J)+D(J),.                                         CORR 820\n                   DO K = J TO M,.                                      CORR 830\n                   R(J,K)=R(J,K)+D(J)*D(K),.                            CORR 840\n                   END,.                                                CORR 850\n              END,.                                                     CORR 860\n         END,.                                                          CORR 870\n    IF N GT KK                                                          CORR 880\n /*                                                                   */CORR 890\n /*      READ THE REST OF THE OBSERVATIONS ONE AT A TIME, SUM THE     */CORR 900\n /*      OBSERVATIONS, AND CALCULATE SUMS OF CROSS PRODUCTS OF        */CORR 910\n /*      DEVIATIONS FROM TEMPORARY MEANS.                             */CORR 920\n /*                                                                   */CORR 930\n    THEN DO,.                                                           CORR 940\n              DO I = 1 TO N-KK,.                                        CORR 950\n              CALL DAT2 (M,D),.                                         CORR 960\n                   DO J = 1 TO M,.                                      CORR 970\n                   XBAR(J)=XBAR(J)+D(J),.                               CORR 980\n                   D(J) =D(J)-T(J),.                                    CORR 990\n                   B(J) =B(J)+D(J),.                                    CORR1000\n                   END,.                                                CORR1010\n                   DO J = 1 TO M,.                                      CORR1020\n                        DO K = J TO M,.                                 CORR1030\n                        R(J,K)=R(J,K)+D(J)*D(K),.                       CORR1040\n                        END,.                                           CORR1050\n                   END,.                                                CORR1060\n              END,.                                                     CORR1070\n         END,.                                                          CORR1080\n /*                                                                   */CORR1090\n /*      ADJUST SUMS OF CROSS-PRODUCTS OF DEVIATIONS FROM TEMP. MEANS */CORR1100\n /*                                                                   */CORR1110\n CALC..                                                                 CORR1120\n         DO I = 1 TO M,.                                                CORR1130\n         XBAR(I)=XBAR(I)/FN,.          /* CALCULATE MEANS.            */CORR1140\n              DO J = I TO M,.                                           CORR1150\n              RX(I,J)=R(I,J)-B(I)*B(J)/FN,.                             CORR1160\n              RX(J,I)=RX(I,J),.                                         CORR1170\n              END,.                                                     CORR1180\n         STD(I)=SQRT(ABS(RX(I,I))),.                                    CORR1190\n /*                                                                   */CORR1200\n /*    COPY THE DIAGONAL OF THE MATRIX OF SUMS OF CROSS PRODUCTS OF   */CORR1210\n /*    DEVIATIONS FROM THE MEANS.                                     */CORR1220\n /*                                                                   */CORR1230\n         B(I) =RX(I,I),.                                                CORR1240\n         END,.                                                          CORR1250\n /*                                                                   */CORR1260\n /*      COMPUTE CORRELATION COEFFICIENTS                             */CORR1270\n /*                                                                   */CORR1280\n         DO J = 1 TO M,.                                                CORR1290\n              DO K = J TO M,.                                           CORR1300\n              FKK  =STD(J)*STD(K),.                                     CORR1310\n              IF FKK= 0.0                                               CORR1320\n              THEN DO,.                                                 CORR1330\n                   ERROR='2',.         /* SOME VARIANCES ARE ZERO     */CORR1340\n                   R(J,K)=0.0,.                                         CORR1350\n                   END,.                                                CORR1360\n              ELSE R(J,K)=RX(J,K)/FKK,.                                 CORR1370\n              R(K,J)=R(J,K),.                                           CORR1380\n              END,.                                                     CORR1390\n         END,.                                                          CORR1400\n /*                                                                   */CORR1410\n /*      COMPUTE STANDARD DEVIATIONS                                  */CORR1420\n /*                                                                   */CORR1430\n         IF N=1                                                         CORR1440\n         THEN DO,.                                                      CORR1450\n              DO I=1 TO N,.                                             CORR1460\n              STD(I)    =0,.                                            CORR1470\n              END,.                                                     CORR1480\n              GO TO FIN,.                                               CORR1490\n              END,.                                                     CORR1500\n         FN   =SQRT(N-1),.                                              CORR1510\n         DO I = 1 TO M,.                                                CORR1520\n         STD(I)=STD(I)/FN,.                                             CORR1530\n         END,.                                                          CORR1540\n FIN..                                                                  CORR1550\n    RETURN,.                                                            CORR1560\n    END,.                              /*END OF PROCEDURE CORR        */CORR1570\n ORDR..                                                                 ORDR  10\n /*********************************************************************/ORDR  20\n /*                                                                   */ORDR  30\n /*      TO CONSTRUCT FROM A LARGER MATRIX OF CORRELATION COEFFICIENTS*/ORDR  40\n /*      A SUBSET MATRIX OF INTERCORRELATIONS AMONG INDEPENDENT VAR-  */ORDR  50\n /*      IABLES AND A VECTOR OF INTERCORRELATIONS OF INDEPENDENT      */ORDR  60\n /*      VARIABLES WITH DEPENDENT VARIABLE.                           */ORDR  70\n /*                                                                   */ORDR  80\n /*********************************************************************/ORDR  90\n    PROCEDURE (M,R,NDEP,K,ISAVE,RX,RY),.                                ORDR 100\n    DECLARE                                                             ORDR 110\n         (ISAVE(*),I,J,K,L,L1)                                          ORDR 120\n         FIXED BINARY,                                                  ORDR 130\n         ERROR EXTERNAL CHARACTER(1),                                   ORDR 140\n         (R(*,*),RX(K,K),RY(K))                                         ORDR 150\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/ORDR 160\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/ORDR 170\n /*                                                                   */ORDR 180\n /*      COPY INTERCORRELATIONS OF INDEPENDENT VARIABLES WITH         */ORDR 190\n /*      DEPENDENT VARIABLE                                           */ORDR 200\n /*                                                                   */ORDR 210\n    ERROR='0',.                                                         ORDR 220\n    IF M LE 0                          /* THE NUMBER OF VARIABLES IS  */ORDR 230\n    THEN DO,.                          /* LESS THAN OR EQUAL TO ZERO. */ORDR 240\n         ERROR='1',.                                                    ORDR 250\n         GO TO FIN,.                                                    ORDR 260\n         END,.                                                          ORDR 270\n         DO I=1 TO K,.                                                  ORDR 280\n         IF ISAVE(K) = NDEP            /* INVALID K                   */ORDR 290\n         OR ISAVE(K) LE 0                                               ORDR 300\n         OR ISAVE(K) GT M                                               ORDR 310\n         THEN DO,.                                                      ORDR 320\n              ERROR='3',.                                               ORDR 330\n              GO TO FIN,.                                               ORDR 340\n              END,.                                                     ORDR 350\n         END,.                                                          ORDR 360\n    IF NDEP LE 0 OR NDEP GT M          /* INVALID DEPENDENT VARIABLE  */ORDR 370\n    THEN DO,.                                                           ORDR 380\n         ERROR='2',.                                                    ORDR 390\n         GO TO FIN,.                                                    ORDR 400\n         END,.                                                          ORDR 410\n    IF K LE 0 OR K GE M                /*INVALID NUMBER OF INDEPENDENT*/ORDR 420\n    THEN DO,.                          /*        VARIABLES            */ORDR 430\n         ERROR='4',.                                                    ORDR 440\n         GO TO FIN,.                                                    ORDR 450\n         END,.                                                          ORDR 460\n         DO I = 1 TO K,.                                                ORDR 470\n         L1   =ISAVE(I),.                                               ORDR 480\n         RY(I)=R(NDEP,L1),.                                             ORDR 490\n /*                                                                   */ORDR 500\n /*      COPY A SUBSET MATRIX OF INTERCORRELATIONS AMONG INDEPENDENT  */ORDR 510\n /*      VARIABLES                                                    */ORDR 520\n /*                                                                   */ORDR 530\n              DO J = 1 TO K,.                                           ORDR 540\n              L2   =ISAVE(J),.                                          ORDR 550\n              IF L2 LT L1                                               ORDR 560\n              THEN RX(I,J)=RX(J,I),.                                    ORDR 570\n              ELSE RX(I,J)=R(L1,L2),.                                   ORDR 580\n              END,.                                                     ORDR 590\n         END,.                                                          ORDR 600\n /*                                                                   */ORDR 610\n /*      PLACE THE SUBSCRIPT NUMBER OF THE DEPENDENT VARIABLE         */ORDR 620\n /*      IN ISAVE(K+1)                                                */ORDR 630\n /*                                                                   */ORDR 640\n    ISAVE(K+1)=NDEP,.                                                   ORDR 650\n FIN..                                                                  ORDR 660\n    RETURN,.                                                            ORDR 670\n    END,.                              /*END OF PROCEDURE ORDR        */ORDR 680\n MLTR..                                                                 MLTR  10\n /*********************************************************************/MLTR  20\n /*                                                                   */MLTR  30\n /*      TO PERFORM A MULTIPLE LINEAR REGRESSION ANALYSIS FOR A       */MLTR  40\n /*      DEPENDENT VARIABLE AND A SET OF INDEPENDENT VARIABLES.       */MLTR  50\n /*                                                                   */MLTR  60\n /*********************************************************************/MLTR  70\n    PROCEDURE (N,K,XBAR,STD,D,RX,RY,ISAVE,B,SB,T,BETA,ANS),.            MLTR  80\n    DECLARE                                                             MLTR  90\n         ERROR EXTERNAL CHARACTER (1),                                  MLTR 100\n         (I,IO,J,M,MM,MP,MQ,N,N1,ISAVE(*))                              MLTR 110\n         FIXED BINARY,                                                  MLTR 120\n         (XBAR(*),STD(*),D(*),RX(*,*),RY(*),B(*),SB(*),T(*),BETA(*),    MLTR 130\n         ANS(10),RM,BO,SSAR,SSDR,FK,FNN,SY,SSARM,SSDRM,F)               MLTR 140\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/MLTR 150\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/MLTR 160\n /*                                                                   */MLTR 170\n    ERROR='0',.                                                         MLTR 180\n    IF K LE 0 OR N LE K                /* THE NUMBER OF VARIABLES IS  */MLTR 190\n    THEN DO,.                          /* LESS THAN OR EQUAL TO ZERO  */MLTR 200\n         ERROR='1',.                   /* OR THE NO. OF OBSERVATIONS  */MLTR 210\n         GO TO S10,.                   /* IS LESS THAN OR EQUAL TO THE*/MLTR 220\n         END,.                         /* THE NUMBER OF VARIABLES     */MLTR 230\n    MM   =K+1,.                                                         MLTR 240\n    FK   =K,.                                                           MLTR 250\n         DO J = 1 TO K,.                                                MLTR 260\n         BETA(J)=0.0,.                                                  MLTR 270\n         B(J) =0.0,.                                                    MLTR 280\n              DO I = 1 TO K,.                                           MLTR 290\n              BETA(J)=BETA(J)+RY(I)*RX(I,J),.                           MLTR 300\n              END,.                                                     MLTR 310\n         END,.                                                          MLTR 320\n    RM   =0.0,.                                                         MLTR 330\n    BO   =0.0,.                                                         MLTR 340\n    L1   =ISAVE(MM),.                                                   MLTR 350\n /*                                                                   */MLTR 360\n /*      COEFFICIENT OF DETERMINATION                                 */MLTR 370\n /*                                                                   */MLTR 380\n         DO I = 1 TO K,.                                                MLTR 390\n         RM   =RM+BETA(I)*RY(I),.                                       MLTR 400\n /*                                                                   */MLTR 410\n /*      TEST ACCURACY OF THE RESULT                                  */MLTR 420\n /*                                                                   */MLTR 430\n         IF RM LT 0 OR RM GT 1                                          MLTR 440\n         THEN DO,.                                                      MLTR 450\n              ERROR='2',.              /* INVALID MULTIPLE R          */MLTR 460\n              GO TO S10,.                                               MLTR 470\n              END,.                                                     MLTR 480\n         L    =ISAVE(I),.              /* REGRESSION COEFFICIENT      */MLTR 490\n         B(I) =BETA(I)*(STD(L1)/STD(L)),.                               MLTR 500\n         BO   =BO+B(I)*XBAR(L),.       /* INTERCEPT                   */MLTR 510\n         END,.                                                          MLTR 520\n    BO   =XBAR(L1)-BO,.                                                 MLTR 530\n /*                                                                   */MLTR 540\n /*      SUM OF SQUARES ATTRIBUTED TO REGRESSION                      */MLTR 550\n /*                                                                   */MLTR 560\n    SSAR =RM*D(L1),.                                                    MLTR 570\n    IF SSAR GT D(L1)                   /* TEST SUM OF SQUARES REDUCED */MLTR 580\n    THEN DO,.                                                           MLTR 590\n         ERROR='3',.                   /* REDUCED SUM OF SQUARES      */MLTR 600\n         GO TO S10,.                   /* GREATER THAN THE TOTAL      */MLTR 610\n         END,.                         /* SUM OF SQUARES              */MLTR 620\n    RM   =SQRT(ABS(RM)),.              /* MULTIPLE CORRELATION COEFF. */MLTR 630\n /*                                                                   */MLTR 640\n /*      SUM OF SQUARES OF DEVIATIONS FROM REGRESSION                 */MLTR 650\n /*                                                                   */MLTR 660\n    SSDR =D(L1)-SSAR,.                                                  MLTR 670\n    FNN  =N-K-1,.                      /* DEGREES OF FREEDOM          */MLTR 680\n    IF FNN LE 0.0                                                       MLTR 690\n    THEN DO,.                                                           MLTR 700\n         ERROR='1',.                   /* SAMPLE SIZE TOO SMALL       */MLTR 710\n         GO TO S10,.                                                    MLTR 720\n         END,.                                                          MLTR 730\n    SY   =SSDR/FNN,.                   /* VARIANCE OF ESTIMATE        */MLTR 740\n /*                                                                   */MLTR 750\n /*      STANDARD DEVIATIONS OF REGRESSION COEFFICIENTS               */MLTR 760\n /*                                                                   */MLTR 770\n         DO J = 1 TO K,.                                                MLTR 780\n         L    =ISAVE(J),.                                               MLTR 790\n         SB(J)=SQRT(ABS((RX(J,J)/D(L))*SY)),.                           MLTR 800\n         T(J) =B(J)/SB(J),.            /* COMPUTE T-VALUES            */MLTR 810\n         END,.                                                          MLTR 820\n    SY   =SQRT(ABS(SY)),.              /* STANDARD ERROR OF ESTIMATE  */MLTR 830\n    SSARM=SSAR/FK,.                    /* F-VALUE                     */MLTR 840\n    SSDRM=SSDR/FNN,.                                                    MLTR 850\n    F    =SSARM/SSDRM,.                                                 MLTR 860\n    ANS(1)=BO,.                                                         MLTR 870\n    ANS(2)=RM,.                                                         MLTR 880\n    ANS(3)=SY,.                                                         MLTR 890\n    ANS(4)=SSAR,.                                                       MLTR 900\n    ANS(5)=FK,.                                                         MLTR 910\n    ANS(6)=SSARM,.                                                      MLTR 920\n    ANS(7)=SSDR,.                                                       MLTR 930\n    ANS(8)=FNN,.                                                        MLTR 940\n    ANS(9)=SSDRM,.                                                      MLTR 950\n    ANS(10)=F,.                                                         MLTR 960\n S10..                                                                  MLTR 970\n    RETURN,.                                                            MLTR 980\n    END,.                              /*END OF PROCEDURE MLTR        */MLTR 990\n STRG..                                                                 STRG  10\n /*********************************************************************/STRG  20\n /*                                                                   */STRG  30\n /*      TO PERFORM A STEP-WISE MULTIPLE REGRESSION ANALYSIS FOR A    */STRG  40\n /*      DEPENDENT VARIABLE AND A SET OF INDEPENDENT VARIABLES.       */STRG  50\n /*                                                                   */STRG  60\n /*********************************************************************/STRG  70\n    PROCEDURE (M,N,D,XBAR,IDX,PCT,NSTEP,ANS,L,B,STD),.                  STRG  80\n    DECLARE                                                             STRG  90\n         (I,ID,IJ,IK,J,K,KK,M,MK,MX,MY,N,NEW,NFO,NZ,NSTEP(*),IDX(*),    STRG 100\n         L(*),LL(M))                                                    STRG 110\n         FIXED BINARY,                                                  STRG 120\n         (D(*,*),XBAR(*),ANS(*),B(*),STD(*),T(M),S(M),BETA(M),RE)       STRG 130\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/STRG 140\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/STRG 150\n         (PCT,ONM,RD)                                                   STRG 160\n         FLOAT BINARY,                                                  STRG 170\n         (ERROR,NSTOP) EXTERNAL CHARACTER (1),.                         STRG 180\n /*                                                                   */STRG 190\n    ERROR='0',.                        /* INITIALIZATION              */STRG 200\n    IF M LE 1 OR N LE M+1              /* THE NUMBER OF VARIABLES M IS*/STRG 210\n    THEN DO,.                          /* NOT GREATER THAN 1 OR THE   */STRG 220\n         ERROR='1',.                   /* NUMBER OF OBSERVATIONS N IS */STRG 230\n         GO TO S150,.                  /* NOT GREATER THAN M+1        */STRG 240\n         END,.                                                          STRG 250\n    IF PCT GE 1.0                                                       STRG 260\n    THEN DO,.                                                           STRG 270\n         ERROR='4',.                   /* SPECIFIED CONSTANT IS       */STRG 280\n         GO TO S150,.                  /* GREATER THAN OR = 1.0       */STRG 290\n         END,.                                                          STRG 300\n    ONM  =N-1,.                                                         STRG 310\n    NFO  =0,.                                                           STRG 320\n    NSTEP(3)=0,.                                                        STRG 330\n    ANS(3)=0,.                                                          STRG 340\n    ANS(4)=0,.                                                          STRG 350\n    NSTOP='0',.                                                         STRG 360\n /*                                                                   */STRG 370\n /*      FIND DEPENDENT VARIABLE, NUMBER OF VARIABLES TO BE FORCED TO */STRG 380\n /*      ENTER IN THE REGRESSION, AND THE NUMBER OF VARIABLES TO BE   */STRG 390\n /*      DELETED                                                      */STRG 400\n /*                                                                   */STRG 410\n         DO I = 1 TO M,.                                                STRG 420\n         LL(I)=1,.                                                      STRG 430\n         IF IDX(I) LE 0                                                 STRG 440\n         THEN GO TO S10,.                                               STRG 450\n         IF IDX(I) LT 2                                                 STRG 460\n         THEN DO,.                                                      STRG 470\n              NFO  =NFO+1,.                                             STRG 480\n              IDX(NFO)=I,.                                              STRG 490\n              GO TO S10,.                                               STRG 500\n              END,.                                                     STRG 510\n         ELSE IF IDX(I)= 2                                              STRG 520\n         THEN DO,.                                                      STRG 530\n              NSTEP(3)=NSTEP(3)+1,.                                     STRG 540\n              LL(I)=-1,.                                                STRG 550\n              GO TO S10,.                                               STRG 560\n              END,.                                                     STRG 570\n         MY   =I,.                                                      STRG 580\n         NSTEP(1)=MY,.                                                  STRG 590\n         ANS(5)=D(MY,MY),.                                              STRG 600\n S10..                                                                  STRG 610\n         END,.                                                          STRG 620\n    NSTEP(2)=NFO,.                                                      STRG 630\n /*                                                                   */STRG 640\n /*      FIND THE MAXIMUM NUMBER OF STEPS                             */STRG 650\n /*                                                                   */STRG 660\n    MX   =M-NSTEP(3)-1,.                                                STRG 670\n /*                                                                   */STRG 680\n /*      START SELECTION OF VARIABLES                                 */STRG 690\n /*                                                                   */STRG 700\n         DO NZ = 1 TO MX,.                                              STRG 710\n         IF N-NZ-1 LE 0                                                 STRG 720\n         THEN DO,.                                                      STRG 730\n              ERROR='3',.              /* DEGREES OF FREEDOM IS 0     */STRG 740\n              GO TO S150,.                                              STRG 750\n              END,.                                                     STRG 760\n         RD   =0,.                                                      STRG 770\n         IF NZ GT NFO                                                   STRG 780\n /*                                                                   */STRG 790\n /*      SELECT NEXT VARIABLE TO ENTER AMONG FORCED VARIABLES         */STRG 800\n /*                                                                   */STRG 810\n         THEN GO TO S20,.                                               STRG 820\n              DO I = 1 TO NFO,.                                         STRG 830\n              K    =IDX(I),.                                            STRG 840\n              IF LL(K) GT 0                                             STRG 850\n              THEN DO,.                                                 STRG 860\n                   RE   =D(K,MY)**2/D(K,K),.                            STRG 870\n                   IF RD LT RE                                          STRG 880\n                   THEN DO,.                                            STRG 890\n                        RD   =RE,.                                      STRG 900\n                        NEW  =K,.                                       STRG 910\n                        END,.                                           STRG 920\n                   END,.                                                STRG 930\n              END,.                                                     STRG 940\n         GO TO S25,.                                                    STRG 950\n /*                                                                   */STRG 960\n /*      SELECT NEXT VARIABLE TO ENTER AMONG NON-FORCED VARIABLES     */STRG 970\n /*                                                                   */STRG 980\n S20..                                                                  STRG 990\n              DO I = 1 TO M,.                                           STRG1000\n              IF I NE MY                                                STRG1010\n              THEN DO,.                                                 STRG1020\n                   IF LL(I) GT 0                                        STRG1030\n                   THEN DO,.                                            STRG1040\n                        RE   =D(I,MY)**2/D(I,I),.                       STRG1050\n                        IF RD LT RE                                     STRG1060\n                        THEN DO,.                                       STRG1070\n                             RD   =RE,.                                 STRG1080\n                             NEW  =I,.                                  STRG1090\n                             END,.                                      STRG1100\n                        END,.                                           STRG1110\n                   END,.                                                STRG1120\n              END,.                                                     STRG1130\n S25..                                                                  STRG1140\n         IF RD LE 0 OR  ANS(5) LE ANS(3)+RD                             STRG1150\n         THEN DO,.                                                      STRG1160\n              ERROR='2',.              /* NEGATIVE SUM OF SQUARES     */STRG1170\n              GO TO S150,.                                              STRG1180\n              END,.                                                     STRG1190\n         RE   =RD/ANS(5),.                                              STRG1200\n /*                                                                   */STRG1210\n /*      TEST WHETHER THE PROPORTION OF THE SUM OF SQUARES REDUCED BY */STRG1220\n /*      THE LAST VARIABLE ENTERED IS GREATER THAN OR EQUAL TO THE    */STRG1230\n /*      SPECIFIED PROPORTION                                         */STRG1240\n /*                                                                   */STRG1250\n         IF RE LT PCT                                                   STRG1260\n         THEN GO TO S150,.                                              STRG1270\n         LL(NEW)=0,.                   /* IT IS GREATER THAN OR EQUAL */STRG1280\n         L(NZ)=NEW,.                                                    STRG1290\n         ANS(1)=RD,.                                                    STRG1300\n         ANS(2)=RE,.                                                    STRG1310\n         ANS(3)=ANS(3)+RD,.                                             STRG1320\n         ANS(4)=ANS(4)+RE,.                                             STRG1330\n         NSTEP(4)=NZ,.                                                  STRG1340\n         NSTEP(5)=NEW,.                                                 STRG1350\n /*                                                                   */STRG1360\n /*      COMPUTE MULTIPLE CORRELATION, F-VALUE FOR ANALYSIS OF        */STRG1370\n /*      VARIANCE, AND STANDARD ERROR OF ESTIMATE                     */STRG1380\n /*                                                                   */STRG1390\n         ANS(6)=SQRT(ANS(4)),.                                          STRG1400\n         RD   =NZ,.                                                     STRG1410\n         RE   =ONM-RD,.                                                 STRG1420\n         RE   =(ANS(5)-ANS(3))/RE,.                                     STRG1430\n         ANS(7)=(ANS(3)/RD)/RE,.                                        STRG1440\n         ANS(8)=SQRT(RE),.                                              STRG1450\n /*                                                                   */STRG1460\n /*      DIVIDE BY THE PIVOTAL ELEMENT                                */STRG1470\n /*                                                                   */STRG1480\n         RD   =D(NEW,NEW),.                                             STRG1490\n              DO J = 1 TO M,.                                           STRG1500\n              IF LL(J) LT 0                                             STRG1510\n              THEN GO TO S40,.                                          STRG1520\n              ELSE IF LL(J) GT 0                                        STRG1530\n              THEN GO TO S30,.                                          STRG1540\n              IF J = NEW                                                STRG1550\n              THEN DO,.                                                 STRG1560\n                   D(NEW,NEW)=1/RD,.                                    STRG1570\n                   GO TO S40,.                                          STRG1580\n                   END,.                                                STRG1590\n              D(J,J)=D(J,J)+D(NEW,J)**2/RD,.                            STRG1600\n S30..                                                                  STRG1610\n              D(NEW,J)=D(NEW,J)/RD,.                                    STRG1620\n S40..                                                                  STRG1630\n              END,.                                                     STRG1640\n /*                                                                   */STRG1650\n /*      COMPUTE REGRESSION COEFFICIENTS                              */STRG1660\n /*                                                                   */STRG1670\n         B(NZ)=D(NEW,MY),.                                              STRG1680\n         IF NZ GT 1                                                     STRG1690\n         THEN DO,.                                                      STRG1700\n              ID   =NZ-1,.                                              STRG1710\n                   DO J = 1 TO ID,.                                     STRG1720\n                   IJ   =NZ-J,.                                         STRG1730\n                   KK   =L(IJ),.                                        STRG1740\n                   B(IJ)=D(KK,MY),.                                     STRG1750\n                        DO K = 1 TO J,.                                 STRG1760\n                        IK   =NZ-K+1,.                                  STRG1770\n                        MK   =L(IK),.                                   STRG1780\n                        B(IJ)=B(IJ)-D(KK,MK)*B(IK),.                    STRG1790\n                        END,.                                           STRG1800\n                   END,.                                                STRG1810\n              END,.                                                     STRG1820\n         ANS(9)=XBAR(MY),.             /* COMPUTE INTERCEPT           */STRG1830\n              DO I = 1 TO NZ,.                                          STRG1840\n              KK   =L(I),.                                              STRG1850\n              ANS(9)=ANS(9)-B(I)*XBAR(KK),.                             STRG1860\n              S(I) =ANS(8)*SQRT(D(KK,KK)),.                             STRG1870\n              T(I) =B(I)/S(I),.                                         STRG1880\n              BETA(I)=B(I)*STD(KK)/STD(MY),.                            STRG1890\n              END,.                                                     STRG1900\n /*                                                                   */STRG1910\n /*      PERFORM A REDUCTION TO ELIMINATE THE LAST VARIABLE ENTERED   */STRG1920\n /*                                                                   */STRG1930\n              DO I = 1 TO M,.                                           STRG1940\n              IF LL(I) GT 0                                             STRG1950\n              THEN DO,.                                                 STRG1960\n                        DO J = 1 TO M,.                                 STRG1970\n                        IF LL(J) GE 0                                   STRG1980\n                        THEN DO,.                                       STRG1990\n                             IF J NE NEW                                STRG2000\n                             THEN D(I,J)=D(I,J)-D(I,NEW)*D(NEW,J),.     STRG2010\n                             END,.                                      STRG2020\n                        END,.                                           STRG2030\n                   D(I,NEW)=D(I,NEW)/(-RD),.                            STRG2040\n                   END,.                                                STRG2050\n              END,.                                                     STRG2060\n /*                                                                   */STRG2070\n /*      ADJUST STANDARD ERROR OF THE ESTIMATE AND MULTIPLE           */STRG2080\n /*      CORRELATION COEFFICIENT                                      */STRG2090\n /*                                                                   */STRG2100\n         RD   =N-NSTEP(4),.                                             STRG2110\n         RD   =ONM/RD,.                                                 STRG2120\n         ANS(10)=SQRT(1-(1-ANS(6)**2)*RD),.                             STRG2130\n         ANS(11)=ANS(8)*SQRT(RD),.                                      STRG2140\n         CALL SOUT (NSTEP,ANS,L,B,S,T,BETA),.                           STRG2150\n /*                                                                   */STRG2160\n /*      TEST WHETHER THE STEP-WISE REGRESSION WAS TERMINATED         */STRG2170\n /*      IN PROCEDURE SOUT.                                           */STRG2180\n /*                                                                   */STRG2190\n         IF NSTOP GT '0'                                                STRG2200\n         THEN GO TO S150,.                                              STRG2210\n         END,.                                                          STRG2220\n S150..                                                                 STRG2230\n    RETURN,.                                                            STRG2240\n    END,.                              /*END OF PROCEDURE STRG        */STRG2250\n CANC..                                                                 CANC  10\n /*********************************************************************/CANC  20\n /*                                                                   */CANC  30\n /*      TO COMPUTE THE CANONICAL CORRELATIONS BETWEEN TWO SETS OF    */CANC  40\n /*      VARIABLES.                                                   */CANC  50\n /*                                                                   */CANC  60\n /*********************************************************************/CANC  70\n    PROCEDURE (N,MP,MQ,RR,ROOTS,WLAM,CANR,CHISQ,NDF,COEFR,COEFL),.      CANC  80\n    DECLARE                                                             CANC  90\n         ERROR EXTERNAL CHARACTER (1),                                  CANC 100\n         (NDF(*),I,J,K,L,M,MP,MQ,N,N1,IERR)                             CANC 110\n         FIXED BINARY,                                                  CANC 120\n         (RR(*,*),ROOTS(*),WLAM(*),CANR(*),CHISQ(*),COEFR(*,*),         CANC 130\n         COEFL(*,*),DET,BAT,CON)                                        CANC 140\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/CANC 150\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/CANC 160\n /*                                                                   */CANC 170\n /*      CHECK WHETHER THE NUMBER OF LEFT-HAND VARIABLES IS EQUAL TO  */CANC 180\n /*      OR GREATER THAN THAT OF RIGHT-HAND                           */CANC 190\n /*                                                                   */CANC 200\n    ERROR='0',.                                                         CANC 210\n    IERR =0,.                                                           CANC 220\n    IF MP LE 0 OR MQ LE 0              /* THERE ARE NO RIGHT OR LEFT  */CANC 230\n    THEN DO,.                          /* HAND VARIABLES.             */CANC 240\n         ERROR='1',.                                                    CANC 250\n         GO TO FIN,.                                                    CANC 260\n         END,.                                                          CANC 270\n    IF MP LT MQ                                                         CANC 280\n    THEN DO,.                                                           CANC 290\n         M    =MP,.                                                     CANC 300\n         MP   =MQ,.                                                     CANC 310\n         MQ   =M,.                                                      CANC 320\n         ERROR='2',.                                                    CANC 330\n         END,.                                                          CANC 340\n COPY..                                                                 CANC 350\n    BEGIN,.                                                             CANC 360\n    DECLARE                                                             CANC 370\n         (R(MP,MP),T(MP,MQ),A(MQ,MQ),X(MQ,MQ))                          CANC 380\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/CANC 390\n  /*     BINARY FLOAT(53),.            /*DOUBLE PRECISION VERSION  /*D*/CANC 400\n /*                                                                   */CANC 410\n /*      PARTITION INTERCORRELATIONS AMONG LEFT HAND VARIABLES,BETWEEN*/CANC 420\n /*      LEFT AND RIGHT HAND VARIABLES, AND AMONG RIGHT HAND VARIABLES*/CANC 430\n /*                                                                   */CANC 440\n    M    =MP+MQ,.                                                       CANC 450\n    FM   =M+1,.                                                         CANC 460\n    FN   =N,.                                                           CANC 470\n    IF ERROR= '2'                                                       CANC 480\n    THEN DO,.                                                           CANC 490\n         IERR =1,.                                                      CANC 500\n         K    =0,.                     /* CHANGE LEFT AND RIGHT HAND  */CANC 510\n              DO I = MQ+1 TO M,.       /* VARIABLES                   */CANC 520\n              K    =K+1,.                                               CANC 530\n              L    =0,.                                                 CANC 540\n                   DO J = MQ+1 TO M,.                                   CANC 550\n                   L    =L+1,.                                          CANC 560\n                                       /* RR 22 INTO R                */CANC 570\n              R(K,L)=RR(I,J),.                                          CANC 580\n                   END,.                                                CANC 590\n                                       /* RR 21 INTO COEFL            */CANC 600\n                   DO J = 1 TO MQ,.                                     CANC 610\n                   COEFL(K,J)=RR(I,J),.                                 CANC 620\n                   END,.                                                CANC 630\n              END,.                                                     CANC 640\n              DO I = 1 TO MQ,.                                          CANC 650\n                   DO J = 1 TO MQ,.                                     CANC 660\n                                       /* RR 11 INTO COEFR            */CANC 670\n                  COEFR(I,J)=RR(I,J),.                                  CANC 680\n                   END,.                                                CANC 690\n              END,.                                                     CANC 700\n         END,.                                                          CANC 710\n    ELSE DO,.                                                           CANC 720\n              DO I = 1 TO M,.                                           CANC 730\n                   DO J = 1 TO M,.                                      CANC 740\n                   IF I LE MP AND J LE MP                               CANC 750\n                   THEN DO,.                                            CANC 760\n                                       /* RR 11 INTO R                */CANC 770\n                        R(I,J)=RR(I,J),.                                CANC 780\n                        GO TO S10,.                                     CANC 790\n                        END,.                                           CANC 800\n                   IF I LE MP AND J GT MP                               CANC 810\n                   THEN DO,.                                            CANC 820\n                        K    =J-MP,.                                    CANC 830\n                                       /* RR 12 INTO COEFL            */CANC 840\n                        COEFL(I,K)=RR(I,J),.                            CANC 850\n                        GO TO S10,.                                     CANC 860\n                        END,.                                           CANC 870\n                   IF I GT MP AND J GT MP                               CANC 880\n                   THEN DO,.                                            CANC 890\n                        L    =I-MP,.                                    CANC 900\n                        K    =J-MP,.                                    CANC 910\n                                       /* RR 22 INTO COEFR            */CANC 920\n                        COEFR(L,K)=RR(I,J),.                            CANC 930\n                        END,.                                           CANC 940\n S10..                                                                  CANC 950\n                   END,.                                                CANC 960\n              END,.                                                     CANC 970\n /*                                                                   */CANC 980\n /*      SOLVE THE CANONICAL EQUATION                                 */CANC 990\n /*                                                                   */CANC1000\n         CON  =0,.                                                      CANC1010\n         CALL MINV (R,MP,DET,CON),.                                     CANC1020\n         IF ERROR NE '0'                                                CANC1030\n         THEN DO,.                                                      CANC1040\n              ERROR='3',.                                               CANC1050\n              GO TO FIN,.                                               CANC1060\n              END,.                                                     CANC1070\n /*                                                                   */CANC1080\n /*      CALCULATE T = INVERSE OF RR 11 * RR 12                       */CANC1090\n /*                                                                   */CANC1100\n              DO I = 1 TO MP,.                                          CANC1110\n                   DO J = 1 TO MQ,.                                     CANC1120\n                   T(I,J)=0.0,.                                         CANC1130\n                        DO K = 1 TO MP,.                                CANC1140\n                        T(I,J)=T(I,J)+R(I,K)*COEFL(K,J),.               CANC1150\n                        END,.                                           CANC1160\n                   END,.                                                CANC1170\n              END,.                                                     CANC1180\n /*                                                                   */CANC1190\n /*      CALCULATE  A = RR 21 * T                                     */CANC1200\n /*                                                                   */CANC1210\n              DO I = 1 TO MQ,.                                          CANC1220\n                   DO J = 1 TO MQ,.                                     CANC1230\n                   A(I,J)=0.0,.                                         CANC1240\n                        DO K = 1 TO MP,.                                CANC1250\n                        A(I,J)=A(I,J)+COEFL(K,I)*T(K,J),.               CANC1260\n                        END,.                                           CANC1270\n                   END,.                                                CANC1280\n              END,.                                                     CANC1290\n /*                                                                   */CANC1300\n /*      CALCULATE EIGENVALUES WITH ASSOCIATED EIGENVECTORS OF THE    */CANC1310\n /*      INVERSE OF R 22 * A                                          */CANC1320\n /*                                                                   */CANC1330\n         CALL MGDU (MQ,A,COEFR,ROOTS,X),.                               CANC1340\n         IF ERROR NE '0'                                                CANC1350\n         THEN DO,.                                                      CANC1360\n              ERROR='4',.              /* ERROR CONDITION IN ROUTINE  */CANC1370\n              GO TO FIN,.              /* MSDU.                       */CANC1380\n              END,.                                                     CANC1390\n         IF IERR= '1'                                                   CANC1400\n         THEN ERROR='2',.                                               CANC1410\n /*                                                                   */CANC1420\n /*      TEST WHETHER EIGENVALUES ARE GREATER THAN 0.0 BUT LESS THAN  */CANC1430\n /*      1.0                                                          */CANC1440\n /*                                                                   */CANC1450\n              DO I = 1 TO MQ,.                                          CANC1460\n              IF ROOTS(I) LE 0.0 OR ROOTS(I) GE 1.0                     CANC1470\n              THEN DO,.                                                 CANC1480\n                   ERROR='5',.         /* CANONICAL CORRELATION CANNOT*/CANC1490\n                   GO TO FIN,.         /* BE COMPUTED                 */CANC1500\n                   END,.                                                CANC1510\n              END,.                                                     CANC1520\n /*                                                                   */CANC1530\n /*      FOR EACH VALUE OF I = 1,2,...,MQ CALCULATE THE STATISTICS    */CANC1540\n /*      NOTED BELOW.                                                 */CANC1550\n /*                                                                   */CANC1560\n              DO I = 1 TO MQ,.                                          CANC1570\n                                       /* CANONICAL CORRELATION       */CANC1580\n              CANR(I)=SQRT(ROOTS(I)),.                                  CANC1590\n              WLAM(I)=1.0,.                                             CANC1600\n                   DO J = I TO MQ,.                                     CANC1610\n                   WLAM(I)=WLAM(I)*(1.0-ROOTS(J)),.                     CANC1620\n                   END,.                                                CANC1630\n              BAT  =WLAM(I),.          /* CHI-SQUARE                  */CANC1640\n              CHISQ(I)=-(FN-0.5*FM)*LOG(BAT),.                          CANC1650\n /*                                                                   */CANC1660\n /*      CALCULATE DEGREES OF FREEDOM FOR CHI-SQUARE                  */CANC1670\n /*                                                                   */CANC1680\n              N1  =I-1,.                                                CANC1690\n              NDF(I)=(MP-N1)*(MQ-N1),.                                  CANC1700\n /*                                                                   */CANC1710\n /*      I-TH SET OF RIGHT HAND COEFICIENTS                           */CANC1720\n /*                                                                   */CANC1730\n                   DO J = 1 TO MQ,.                                     CANC1740\n                   COEFR(J,I)=X(J,I),.                                  CANC1750\n                   END,.                                                CANC1760\n /*                                                                   */CANC1770\n /*      I-TH SET OF LEFT HAND COEFFICIENTS                           */CANC1780\n /*                                                                   */CANC1790\n                   DO J = 1 TO MP,.                                     CANC1800\n                   DET  =0.0,.                                          CANC1810\n                        DO K = 1 TO MQ,.                                CANC1820\n                        DET  =DET+T(J,K)*COEFR(K,I),.                   CANC1830\n                        END,.                                           CANC1840\n                   COEFL(J,I)=DET/CANR(I),.                             CANC1850\n                   END,.                                                CANC1860\n              END,.                                                     CANC1870\n         END,.                                                          CANC1880\n    END,.                                                               CANC1890\n FIN..                                                                  CANC1900\n    RETURN,.                                                            CANC1910\n    END,.                              /*END OF PROCEDURE CANC        */CANC1920\n AVAR..                                                                 AVAR  10\n /*********************************************************************/AVAR  20\n /*                                                                   */AVAR  30\n /*      TO PERFORM AN ANALYSIS OF VARIANCE FOR A COMPLETE FACTORIAL  */AVAR  40\n /*      DESIGN.                                                      */AVAR  50\n /*                                                                   */AVAR  60\n /*********************************************************************/AVAR  70\n    PROCEDURE (K,LEVEL,N,X,GMEAN,SUMSQ,NDF,SMEAN),.                     AVAR  80\n    DECLARE                                                             AVAR  90\n         ERROR EXTERNAL CHARACTER(1),                                   AVAR 100\n         (LEVEL(*),NDF(*),KOUNT(K),ISTEP(K),LASTS(K),I,INCRE,J,K,L,LAST,AVAR 110\n         LL,N,N1,ND1,ND2,NN,NSIZ)                                       AVAR 120\n         FIXED BINARY,                                                  AVAR 130\n         (X(*),SUMSQ(*),SMEAN(*),FSUM,GMEAN,FN,FN1,FN2)                 AVAR 140\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/AVAR 150\n /*      BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/AVAR 160\n    ERROR='0',.                                                         AVAR 170\n    NSIZ =(2**K)-1,.                                                    AVAR 180\n    IF N LE 0                          /* THERE ARE NO DATA POINTS    */AVAR 190\n    THEN DO,.                                                           AVAR 200\n         ERROR='1',.                                                    AVAR 210\n         GO TO FIN,.                                                    AVAR 220\n         END,.                                                          AVAR 230\n    FN   =N,.                                                           AVAR 240\n    IF K LT 2                                                           AVAR 250\n    THEN DO,.                                                           AVAR 260\n         ERROR='2',.                   /* ONE OR LESS FACTORS         */AVAR 270\n         GO TO FIN,.                                                    AVAR 280\n         END,.                                                          AVAR 290\n         DO I = 1 TO K,.                                                AVAR 300\n         IF LEVEL(I) LT 2                                               AVAR 310\n         THEN DO,.                                                      AVAR 320\n              ERROR='3',.              /* 1 OR MORE LEVELS LESS THEN 2*/AVAR 330\n              GO TO FIN,.                                               AVAR 340\n              END,.                                                     AVAR 350\n         END,.                                                          AVAR 360\n /*                                                                   */AVAR 370\n /*      CALCULATE MULTIPLIERS TO BE USED IN FINDING STORAGE LOCATIONS*/AVAR 380\n /*      FOR INPUT DATA.                                              */AVAR 390\n /*                                                                   */AVAR 400\n    ISTEP(1)=1,.                                                        AVAR 410\n         DO I = 2 TO K,.                                                AVAR 420\n         ISTEP(I)=ISTEP(I-1)*(LEVEL(I-1)+1),.                           AVAR 430\n         END,.                                                          AVAR 440\n         DO I = 1 TO K,.               /* SET LEVEL COUNTER           */AVAR 450\n         KOUNT(I)=LEVEL(I),.                                            AVAR 460\n         END,.                                                          AVAR 470\n    N1   =N,.                                                           AVAR 480\n         DO I = 1 TO N,.               /* PLACE DATA IN PROPER PLACE  */AVAR 490\n         L    =KOUNT(1),.                                               AVAR 500\n              DO J = 2 TO K,.                                           AVAR 510\n              L    =L+ISTEP(J)*(KOUNT(J)-1),.                           AVAR 520\n              END,.                                                     AVAR 530\n         X(L) =X(N1),.                                                  AVAR 540\n         N1   =N1-1,.                                                   AVAR 550\n              DO J = 1 TO K,.                                           AVAR 560\n              IF KOUNT(J) GT 1                                          AVAR 570\n              THEN DO,.                                                 AVAR 580\n                   KOUNT(J)=KOUNT(J)-1,.                                AVAR 590\n                   GO TO S10,.                                          AVAR 600\n                   END,.                                                AVAR 610\n              KOUNT(J)=LEVEL(J),.                                       AVAR 620\n              END,.                                                     AVAR 630\n S10..                                                                  AVAR 640\n         END,.                                                          AVAR 650\n    L    =LEVEL(1),.                   /* CALCULATE LAST DATA POSITION*/AVAR 660\n         DO J = 2 TO K,.                                                AVAR 670\n         L    =L+ISTEP(J)*(LEVEL(J)-1),.                                AVAR 680\n         END,.                                                          AVAR 690\n /*                                                                   */AVAR 700\n /*      CALCULATE THE LAST DATA POSITION OF EACH FACTOR              */AVAR 710\n /*                                                                   */AVAR 720\n    LASTS(1)=L+1,.                                                      AVAR 730\n         DO I = 2 TO K,.                                                AVAR 740\n         LASTS(I)=LASTS(I-1)+ISTEP(I),.                                 AVAR 750\n         END,.                                                          AVAR 760\n         DO I = 1 TO K,.               /* PERFORM OPERATOR CALCULUS   */AVAR 770\n         L    =1,.                                                      AVAR 780\n         LL   =1,.                                                      AVAR 790\n         FSUM =0.0,.                                                    AVAR 800\n         NN   =LEVEL(I),.                                               AVAR 810\n         INCRE=ISTEP(I),.                                               AVAR 820\n         LAST =LASTS(I),.                                               AVAR 830\n S20..                                                                  AVAR 840\n              DO J = 1 TO NN,.         /* SIGMA OPERATION             */AVAR 850\n              FSUM =FSUM+X(L),.                                         AVAR 860\n              L    =L+INCRE,.                                           AVAR 870\n              END,.                                                     AVAR 880\n         X(L) =FSUM,.                                                   AVAR 890\n         FN1  =NN,.                                                     AVAR 900\n              DO J = 1 TO NN,.         /* DELTA OPERATION             */AVAR 910\n              X(LL)=FN1*X(LL)-FSUM,.                                    AVAR 920\n              LL   =LL+INCRE,.                                          AVAR 930\n              END,.                                                     AVAR 940\n         FSUM =0.0,.                                                    AVAR 950\n         IF L LT LAST                                                   AVAR 960\n         THEN DO,.                                                      AVAR 970\n              IF L LE LAST-INCRE                                        AVAR 980\n              THEN DO,.                                                 AVAR 990\n                   L    =L+INCRE,.                                      AVAR1000\n                   LL   =LL+INCRE,.                                     AVAR1010\n                   GO TO S20,.                                          AVAR1020\n                   END,.                                                AVAR1030\n              L    =L+INCRE+1-LAST,.                                    AVAR1040\n              LL   =LL+INCRE+1-LAST,.                                   AVAR1050\n              GO TO S20,.                                               AVAR1060\n              END,.                                                     AVAR1070\n         END,.                                                          AVAR1080\n         DO I = 1 TO NSIZ,.                                             AVAR1090\n         SUMSQ=0.0,.                                                    AVAR1100\n         END,.                                                          AVAR1110\n /*                                                                   */AVAR1120\n /*      SET UP CONTROL FOR MEAN SQUARE OPERATOR                      */AVAR1130\n /*                                                                   */AVAR1140\n    LASTS(1)=LEVEL(1),.                                                 AVAR1150\n    ISTEP(1)=1,.                                                        AVAR1160\n         DO I = 2 TO K,.                                                AVAR1170\n         LASTS(I)=LEVEL(I)+1,.                                          AVAR1180\n         ISTEP(I)=ISTEP(I-1)*2,.                                        AVAR1190\n         END,.                                                          AVAR1200\n    NN   =1,.                                                           AVAR1210\n         DO I = 1 TO K,.                                                AVAR1220\n         KOUNT(I)=0.0,.                                                 AVAR1230\n         END,.                                                          AVAR1240\n S30..                                                                  AVAR1250\n    L    =0,.                                                           AVAR1260\n         DO I = 1 TO K,.                                                AVAR1270\n         IF KOUNT(I) NE LASTS(I)                                        AVAR1280\n         THEN DO,.                                                      AVAR1290\n              IF L LE 0                                                 AVAR1300\n              THEN DO,.                                                 AVAR1310\n                   KOUNT(I)=KOUNT(I)+1,.                                AVAR1320\n                   IF KOUNT(I) LE LEVEL(I)                              AVAR1330\n                   THEN GO TO S40,.                                     AVAR1340\n                   GO TO S50,.                                          AVAR1350\n                   END,.                                                AVAR1360\n              IF KOUNT(I)= LEVEL(I)                                     AVAR1370\n              THEN GO TO S60,.                                          AVAR1380\n S40..                                                                  AVAR1390\n              L    =L+ISTEP(I),.                                        AVAR1400\n              GO TO S60,.                                               AVAR1410\n              END,.                                                     AVAR1420\n S50..                                                                  AVAR1430\n         KOUNT(I)=0,.                                                   AVAR1440\n S60..                                                                  AVAR1450\n         END,.                                                          AVAR1460\n    IF L GT 0                                                           AVAR1470\n    THEN DO,.                                                           AVAR1480\n         SUMSQ(L)=SUMSQ(L)+X(NN)*X(NN),.                                AVAR1490\n         NN   =NN+1,.                                                   AVAR1500\n         GO TO S30,.                                                    AVAR1510\n         END,.                                                          AVAR1520\n    GMEAN=X(NN)/FN,.                   /* CALCULATE MEAN              */AVAR1530\n /*                                                                   */AVAR1540\n /*      CALCULATE FIRST DIVISOR REQUIRED TO FORM SUM OF SQUARES AND  */AVAR1550\n /*      DIVISOR, WHICH IS EQUAL TO DEGREES OF FREEDOM, REQUIRED TO   */AVAR1560\n /*      FORM MEAN SQUARES                                            */AVAR1570\n /*                                                                   */AVAR1580\n    ISTEP=0,.                                                           AVAR1590\n    ISTEP(1)=1,.                                                        AVAR1600\n    NN   =0,.                                                           AVAR1610\n S70..                                                                  AVAR1620\n    ND1  =1,.                                                           AVAR1630\n    ND2  =1,.                                                           AVAR1640\n         DO I = 1 TO K,.                                                AVAR1650\n         IF ISTEP(I) NE 0                                               AVAR1660\n         THEN DO,.                                                      AVAR1670\n              ND1  =ND1*LEVEL(I),.                                      AVAR1680\n              ND2  =ND2*(LEVEL(I)-1),.                                  AVAR1690\n              END,.                                                     AVAR1700\n         END,.                                                          AVAR1710\n    FN1  =N*ND1,.                                                       AVAR1720\n    FN2  =ND2,.                                                         AVAR1730\n    NN   =NN+1,.                                                        AVAR1740\n    SUMSQ(NN)=SUMSQ(NN)/FN1,.                                           AVAR1750\n    SMEAN(NN)=SUMSQ(NN)/FN2,.                                           AVAR1760\n    NDF(NN)=ND2,.                                                       AVAR1770\n    IF NN LT LL                                                         AVAR1780\n    THEN DO,.                                                           AVAR1790\n              DO I = 1 TO K,.                                           AVAR1800\n              IF ISTEP(I) NE 0                                          AVAR1810\n              THEN ISTEP(I)=0,.                                         AVAR1820\n              ELSE DO,.                                                 AVAR1830\n                   ISTEP(I)=1,.                                         AVAR1840\n                   GO TO S70,.                                          AVAR1850\n                   END,.                                                AVAR1860\n              END,.                                                     AVAR1870\n         END,.                                                          AVAR1880\n FIN..                                                                  AVAR1890\n    RETURN,.                                                            AVAR1900\n    END,.                              /*END OF PROCEDURE AVAR        */AVAR1910\n DMTX..                                                                 DMTX  10\n /*********************************************************************/DMTX  20\n /*                                                                   */DMTX  30\n /*      TO COMPUTE MEANS OF VARIABLES IN EACH GROUP AND A POOLED     */DMTX  40\n /*      DISPERSION MATRIX FOR ALL THE GROUPS.                        */DMTX  50\n /*                                                                   */DMTX  60\n /*********************************************************************/DMTX  70\n    PROCEDURE (K,M,N,X,XBAR,D),.                                        DMTX  80\n    DECLARE                                                             DMTX  90\n         ERROR EXTERNAL CHARACTER (1),                                  DMTX 100\n         (N(*),I,J,K,K1,K2,KK,L,M,NN)                                   DMTX 110\n         FIXED BINARY,                                                  DMTX 120\n         (X(*,*),FSUM)                                                  DMTX 130\n         FLOAT BINARY,                                                  DMTX 140\n         (XBAR(*,*),D(*,*),CMEAN(M))                                    DMTX 150\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/DMTX 160\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/DMTX 170\n /*                                                                   */DMTX 180\n    ERROR='0',.                                                         DMTX 190\n    IF M LE 1                          /* THE NUMBER OF VARIABLES IS  */DMTX 200\n    THEN DO,.                          /* LESS THAN OR EQUAL TO ONE.  */DMTX 210\n         ERROR='1',.                                                    DMTX 220\n         GO TO FIN,.                                                    DMTX 230\n         END,.                                                          DMTX 240\n    IF K LE 1 OR K GT M                /* INVALID NUMBER OF GROUPS.   */DMTX 250\n    THEN DO,.                                                           DMTX 260\n         ERROR='2',.                                                    DMTX 270\n         GO TO FIN,.                                                    DMTX 280\n         END,.                                                          DMTX 290\n         DO J = 1 TO K,.                                                DMTX 300\n         IF N(J) LE 0                  /* NO OBSERVATIONS IN AT LEAST */DMTX 310\n         THEN DO,.                     /* ONE OF THE GROUPS           */DMTX 320\n              ERROR='3',.                                               DMTX 330\n              GO TO FIN,.                                               DMTX 340\n              END,.                                                     DMTX 350\n         END,.                                                          DMTX 360\n         DO I = 1 TO M,.                                                DMTX 370\n              DO J = 1 TO K,.                                           DMTX 380\n              XBAR(I,J)=0.0,.                                           DMTX 390\n              END,.                                                     DMTX 400\n         END,.                                                          DMTX 410\n    L    =0,.                                                           DMTX 420\n         DO I = 1 TO K,.                                                DMTX 430\n         NN   =N(I),.                                                   DMTX 440\n         FSUM =NN,.                                                     DMTX 450\n              DO J = 1 TO NN,.                                          DMTX 460\n              L    =L+1,.                                               DMTX 470\n                   DO KK = 1 TO M,.                                     DMTX 480\n                   XBAR(KK,I)=XBAR(KK,I)+X(L,KK),.                      DMTX 490\n                   END,.                                                DMTX 500\n              END,.                                                     DMTX 510\n              DO KK = 1 TO M,.                                          DMTX 520\n              XBAR(KK,I)=XBAR(KK,I)/FSUM,.                              DMTX 530\n              END,.                                                     DMTX 540\n         END,.                                                          DMTX 550\n /*                                                                   */DMTX 560\n /*      COMPUTE THE DISPERSION MATRIX                                */DMTX 570\n /*                                                                   */DMTX 580\n         DO I = 1 TO M,.                                                DMTX 590\n              DO J = 1 TO M,.                                           DMTX 600\n              D(I,J)=0.0,.                                              DMTX 610\n              END,.                                                     DMTX 620\n         END,.                                                          DMTX 630\n    L    =0,.                                                           DMTX 640\n         DO I = 1 TO K,.                                                DMTX 650\n         NN   =N(I),.                                                   DMTX 660\n              DO J = 1 TO NN,.                                          DMTX 670\n              L    =L+1,.                                               DMTX 680\n                   DO KK = 1 TO M,.                                     DMTX 690\n                   CMEAN(KK)=X(L,KK)-XBAR(KK,I),.                       DMTX 700\n                   END,.                                                DMTX 710\n                   DO K1 = 1 TO M,.                                     DMTX 720\n                        DO K2 = K1 TO M,.                               DMTX 730\n                        D(K1,K2)=D(K1,K2)+CMEAN(K1)*CMEAN(K2),.         DMTX 740\n                        END,.                                           DMTX 750\n                   END,.                                                DMTX 760\n              END,.                                                     DMTX 770\n         END,.                                                          DMTX 780\n    L    =0,.                                                           DMTX 790\n         DO KK = 1 TO K,.                                               DMTX 800\n         L    =L+N(KK),.                                                DMTX 810\n         END,.                                                          DMTX 820\n    FSUM =L-K,.                                                         DMTX 830\n         DO I = 1 TO M,.                                                DMTX 840\n              DO J = I TO M,.                                           DMTX 850\n              D(I,J)=D(I,J)/FSUM,.                                      DMTX 860\n              D(J,I)=D(I,J),.                                           DMTX 870\n              END,.                                                     DMTX 880\n         END,.                                                          DMTX 890\n FIN..                                                                  DMTX 900\n    RETURN,.                                                            DMTX 910\n    END,.                              /*END OF PROCEDURE DMTX        */DMTX 920\n DSCR..                                                                 DSCR  10\n /*********************************************************************/DSCR  20\n /*                                                                   */DSCR  30\n /*      TO COMPUTE A SET OF LINEAR FUNCTIONS WHICH SERVE AS INDICES  */DSCR  40\n /*      FOR CLASSIFYING AN INDIVIDUAL INTO ONE OF SEVERAL GROUPS.    */DSCR  50\n /*                                                                   */DSCR  60\n /*********************************************************************/DSCR  70\n    PROCEDURE (K,M,N,X,XBAR,D,CMEAN,V,C,P,LG),.                         DSCR  80\n    DECLARE                                                             DSCR  90\n         (N(*),LG(*),I,J,K,K1,K2,L,LL,M,N1,NN)                          DSCR 100\n         FIXED BINARY,                                                  DSCR 110\n         ERROR EXTERNAL CHARACTER(1),                                   DSCR 120\n         (X(*,*),FN(K))                                                 DSCR 130\n         BINARY FLOAT,                                                  DSCR 140\n         (XBAR(*,*),D(*,*),C(*,*),CMEAN(*),P(*),V,FSUM,PL)              DSCR 150\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/DSCR 160\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/DSCR 170\n /*                                                                   */DSCR 180\n    L    =0,.                                                           DSCR 190\n    ERROR='0',.                                                         DSCR 200\n    IF M LE 1                          /* NUMBER OF VARIABLES LESS    */DSCR 210\n    THEN DO,.                          /* THAN OR EQUAL TO ONE.       */DSCR 220\n         ERROR='1',.                                                    DSCR 230\n         GO TO FIN,.                                                    DSCR 240\n         END,.                                                          DSCR 250\n    IF K LE 1 OR K GT M                /* INVALID NUMBER OF GROUPS.   */DSCR 260\n    THEN DO,.                                                           DSCR 270\n         ERROR='2',.                                                    DSCR 280\n         GO TO FIN,.                                                    DSCR 290\n         END,.                                                          DSCR 300\n         DO I = 1 TO K,.                                                DSCR 310\n         IF N(I) LE 0                  /* NO OBSERVATIONS IN ONE OR   */DSCR 320\n         THEN DO,.                     /* MORE GROUPS.                */DSCR 330\n              ERROR='3',.                                               DSCR 340\n              GO TO FIN,.                                               DSCR 350\n              END,.                                                     DSCR 360\n         END,.                                                          DSCR 370\n         DO I = 1 TO K,.                                                DSCR 380\n         L    =L+N(I),.                                                 DSCR 390\n         END,.                                                          DSCR 400\n    FSUM =L,.                                                           DSCR 410\n         DO I = 1 TO M,.                                                DSCR 420\n         V    =0.0,.                                                    DSCR 430\n              DO J = 1 TO K,.                                           DSCR 440\n              V    =V+N(J)*XBAR(I,J),.                                  DSCR 450\n              END,.                                                     DSCR 460\n         CMEAN(I)=V/FSUM,.                                              DSCR 470\n         END,.                                                          DSCR 480\n /*                                                                   */DSCR 490\n /*      CALCULATE GENERALIZED MAHALANDBIS D SQUARE                   */DSCR 500\n /*                                                                   */DSCR 510\n    V    =0,.                                                           DSCR 520\n         DO I = 1 TO M,.                                                DSCR 530\n              DO J = 1 TO M,.                                           DSCR 540\n              FSUM =0.0,.                                               DSCR 550\n                   DO KK = 1 TO K,.                                     DSCR 560\n                   FSUM =FSUM+N(KK)*(XBAR(I,KK)-CMEAN(I))               DSCR 570\n                        *(XBAR(J,KK)-CMEAN(J)),.                        DSCR 580\n                   END,.                                                DSCR 590\n              V    =V+D(I,J)*FSUM,.                                     DSCR 600\n              END,.                                                     DSCR 610\n         END,.                                                          DSCR 620\n /*                                                                   */DSCR 630\n /*      CALCULATE THE COEFFICIENTS OF DISCRIMINANT FUNCTIONS         */DSCR 640\n /*                                                                   */DSCR 650\n         DO I = 1 TO K,.                                                DSCR 660\n         FSUM =0,.                                                      DSCR 670\n              DO J = 1 TO M,.                                           DSCR 680\n                   DO KK = 1 TO M,.                                     DSCR 690\n                   FSUM =FSUM+D(J,KK)*XBAR(J,I)*XBAR(KK,I),.            DSCR 700\n                   END,.                                                DSCR 710\n              END,.                                                     DSCR 720\n         C(1,I)=-(FSUM/2),.                                             DSCR 730\n              DO J = 1 TO M,.                                           DSCR 740\n              C(J+1,I)=0.0,.                                            DSCR 750\n                   DO KK = 1 TO M,.                                     DSCR 760\n                   C(J+1,I)=C(J+1,I)+D(J,KK)*XBAR(KK,I),.               DSCR 770\n                   END,.                                                DSCR 780\n              END,.                                                     DSCR 790\n         END,.                                                          DSCR 800\n /*                                                                   */DSCR 810\n /*      FOR EACH CASE IN EACH GROUP, CALCULATE.. DISCRIMINANT        */DSCR 820\n /*      FUNCTIONS.                                                   */DSCR 830\n /*                                                                   */DSCR 840\n    N1   =0,.                                                           DSCR 850\n    L    =0,.                                                           DSCR 860\n         DO I = 1 TO K,.                                                DSCR 870\n         NN   =N(I),.                                                   DSCR 880\n              DO J = 1 TO NN,.                                          DSCR 890\n              L    =L+1,.                                               DSCR 900\n                   DO K1 = 1 TO K,.                                     DSCR 910\n                   FN(K1)=C(1,K1),.                                     DSCR 920\n                        DO K2 = 1 TO M,.                                DSCR 930\n                        FN(K1)=FN(K1)+C(K2+1,K1)*X(L,K2),.              DSCR 940\n                        END,.                                           DSCR 950\n                   END,.                                                DSCR 960\n /*                                                                   */DSCR 970\n /*      THE LARGEST DISCRIMINANT FUNCTION                            */DSCR 980\n /*                                                                   */DSCR 990\n              LL  =1,.                                                  DSCR1000\n              FSUM =FN(1),.                                             DSCR1010\n                   DO K1 = 2 TO K,.                                     DSCR1020\n                   IF FSUM LT FN(K1)                                    DSCR1030\n                   THEN DO,.                                            DSCR1040\n                        LL   =K1,.                                      DSCR1050\n                        FSUM =FN(K1),.                                  DSCR1060\n                        END,.                                           DSCR1070\n                   END,.                                                DSCR1080\n /*                                                                   */DSCR1090\n /*      PROBABILITY ASSOCIATED WITH THE LARGEST DISCRIMINANT         */DSCR1100\n /*      FUNCTION.                                                    */DSCR1110\n /*                                                                   */DSCR1120\n              PL  =0,.                                                  DSCR1130\n                   DO KK = 1 TO K,.                                     DSCR1140\n                   PL   =PL+EXP(FN(KK)-FSUM),.                          DSCR1150\n                   END,.                                                DSCR1160\n              N1   =N1+1,.                                              DSCR1170\n              LG(N1)=LL,.                                               DSCR1180\n              P(N1)=1/PL,.                                              DSCR1190\n              END,.                                                     DSCR1200\n         END,.                                                          DSCR1210\n FIN..                                                                  DSCR1220\n    RETURN,.                                                            DSCR1230\n    END,.                              /*END OF PROCEDURE DSCR        */DSCR1240\n TRAC..                                                                 TRAC  10\n /*********************************************************************/TRAC  20\n /*                                                                   */TRAC  30\n /*      TO COMPUTE CUMULATIVE PERCENTAGE OF EIGENVALUES GREATER      */TRAC  40\n /*      THAN OR EQUAL TO A CONSTANT SPECIFIED BY THE USER.           */TRAC  50\n /*                                                                   */TRAC  60\n /*********************************************************************/TRAC  70\n    PROCEDURE (M,R,CON,K,D),.                                           TRAC  80\n    DECLARE                                                             TRAC  90\n         ERROR EXTERNAL CHARACTER (1),                                  TRAC 100\n         (I,J,K,M)                                                      TRAC 110\n         FIXED BINARY,                                                  TRAC 120\n         (R(*,*),D(*),CON)                                              TRAC 130\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/TRAC 140\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/TRAC 150\n /*                                                                   */TRAC 160\n    ERROR='0',.                                                         TRAC 170\n    IF M LE 0                          /* ORDER OF MATRIX IS ZERO.    */TRAC 180\n    THEN DO,.                                                           TRAC 190\n         ERROR='1',.                                                    TRAC 200\n         GO TO S20,.                                                    TRAC 210\n         END,.                                                          TRAC 220\n         DO I = 1 TO M,.                                                TRAC 230\n         D(I) =R(I,I),.                                                 TRAC 240\n         END,.                                                          TRAC 250\n    K    =0,.                                                           TRAC 260\n /*                                                                   */TRAC 270\n /*      TEST WHETHER I-TH EIGENVALUE IS GREATER THAN OR EQUAL TO     */TRAC 280\n /*      THE CONSTANT.                                                */TRAC 290\n /*                                                                   */TRAC 300\n         DO I = 1 TO M,.                                                TRAC 310\n         IF D(I) LT CON                                                 TRAC 320\n         THEN GO TO S10,.                                               TRAC 330\n         K    =K+1,.                                                    TRAC 340\n         D(I) =D(I)/M,.                                                 TRAC 350\n         END,.                                                          TRAC 360\n S10..                                                                  TRAC 370\n    IF K LE 1                                                           TRAC 380\n    THEN DO,.                                                           TRAC 390\n         ERROR='2',.                   /* NOT ENOUGH EIGENVALUES      */TRAC 400\n         GO TO S20,.                   /* ARE RETAINED                */TRAC 410\n         END,.                                                          TRAC 420\n         DO I = 2 TO K,.                                                TRAC 430\n         D(I) =D(I)+D(I-1),.                                            TRAC 440\n         END,.                                                          TRAC 450\n S20..                                                                  TRAC 460\n    RETURN,.                                                            TRAC 470\n    END,.                              /*END OF PROCEDURE TRAC        */TRAC 480\n LOAD..                                                                 LOAD  10\n /*********************************************************************/LOAD  20\n /*                                                                   */LOAD  30\n /*      TO COMPUTE A FACTOR MATRIX (LOADING) FROM EIGENVALUES AND    */LOAD  40\n /*      ASSOCIATED EIGENVECTORS.                                     */LOAD  50\n /*                                                                   */LOAD  60\n /*********************************************************************/LOAD  70\n    PROCEDURE (M,K,R,V),.                                               LOAD  80\n    DECLARE                                                             LOAD  90\n         (I,J,K)                                                        LOAD 100\n         FIXED BINARY,                                                  LOAD 110\n         ERROR EXTERNAL CHARACTER(1),                                   LOAD 120\n         (R(*,*),V(*,*),SQ)                                             LOAD 130\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/LOAD 140\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/LOAD 150\n /*                                                                   */LOAD 160\n    ERROR='0',.                                                         LOAD 170\n    IF K LE 1 OR K GT M                /* INVALID VALUE OF K          */LOAD 180\n    THEN DO,.                                                           LOAD 190\n         ERROR='2',.                                                    LOAD 200\n         GO TO FIN,.                                                    LOAD 210\n         END,.                                                          LOAD 220\n    IF M LE 0                          /* ORDER OF MATRIX IS ZERO     */LOAD 230\n    THEN ERROR='1',.                                                    LOAD 240\n    ELSE DO,.                                                           LOAD 250\n              DO J = 1 TO K,.                                           LOAD 260\n              SQ   =SQRT(R(J,J)),.                                      LOAD 270\n                   DO I = 1 TO M,.                                      LOAD 280\n                   V(I,J)=SQ*V(I,J),.                                   LOAD 290\n                   END,.                                                LOAD 300\n              END,.                                                     LOAD 310\n         END,.                                                          LOAD 320\n FIN..                                                                  LOAD 330\n    RETURN,.                                                            LOAD 340\n    END,.                              /*END OF PROCEDURE LOAD        */LOAD 350\n VRMX..                                                                 VRMX  10\n /*********************************************************************/VRMX  20\n /*                                                                   */VRMX  30\n /*      TO PERFORM ORTHOGONAL ROTATION OF A FACTOR MATRIX.           */VRMX  40\n /*                                                                   */VRMX  50\n /*********************************************************************/VRMX  60\n    PROCEDURE (M,K,A,NC,TV,H,F,D),.                                     VRMX  70\n    DECLARE                                                             VRMX  80\n         (I,II,J,K,K1,LL,M,NC,NV)                                       VRMX  90\n         FIXED BINARY,                                                  VRMX 100\n         ERROR EXTERNAL CHARACTER(1),                                   VRMX 110\n         (A(*,*),TV(*),H(*),F(*),D(*),EPS,TVLT,FN,AA,BB,CC,DD,G,B,U,T,  VRMX 120\n         COS4T,SIN4T,TAN4T,SINP,COSP,CTN4T,COS2T,SIN2T,COST,SINT,CONS)  VRMX 130\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/VRMX 140\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/VRMX 150\n /*                                                                   */VRMX 160\n    EPS  =.00116,.                     /* INITIALIZATION              */VRMX 170\n    TVLT =0,.                                                           VRMX 180\n    LL   =K-1,.                                                         VRMX 190\n    NV   =1,.                                                           VRMX 200\n    NC   =0,.                                                           VRMX 210\n    FN   =M*M,.                                                         VRMX 220\n    CONS =.7071066,.                                                    VRMX 230\n    ERROR='0',.                                                         VRMX 240\n    IF M LE 1                          /* NUMBER OF VARIABLES LESS    */VRMX 250\n    THEN DO,.                          /* THAN OR EQUAL TO ONE.       */VRMX 260\n         ERROR='1',.                                                    VRMX 270\n         GO TO FIN,.                                                    VRMX 280\n         END,.                                                          VRMX 290\n    IF K LE 1 OR K GT M                /* INVALID VALUE OF K          */VRMX 300\n    THEN DO,.                                                           VRMX 310\n         ERROR='2',.                                                    VRMX 320\n         GO TO FIN,.                                                    VRMX 330\n         END,.                                                          VRMX 340\n /*                                                                   */VRMX 350\n /*      CALCULATE ORIGINAL COMMUNALITIES                             */VRMX 360\n /*                                                                   */VRMX 370\n         DO I = 1 TO M,.                                                VRMX 380\n         H(I) =0,.                                                      VRMX 390\n              DO J = 1 TO K,.                                           VRMX 400\n              H(I) =H(I)+A(I,J)*A(I,J),.                                VRMX 410\n              END,.                                                     VRMX 420\n         END,.                                                          VRMX 430\n /*                                                                   */VRMX 440\n /*      CALCULATE NORMALIZED FACTOR MATRIX                           */VRMX 450\n /*                                                                   */VRMX 460\n         DO I = 1 TO M,.                                                VRMX 470\n         H(I) =SQRT(H(I)),.                                             VRMX 480\n              DO J = 1 TO K,.                                           VRMX 490\n              A(I,J)=A(I,J)/H(I),.                                      VRMX 500\n              END,.                                                     VRMX 510\n         END,.                                                          VRMX 520\n    GO TO S20,.                                                         VRMX 530\n /*                                                                   */VRMX 540\n /*      CALCULATE VARIANCE FOR FACTOR MATRIX                         */VRMX 550\n /*                                                                   */VRMX 560\n S10..                                                                  VRMX 570\n    NV   =NV+1,.                                                        VRMX 580\n    TVLT =TV(NV-1),.                                                    VRMX 590\n S20..                                                                  VRMX 600\n    TV(NV)=0,.                                                          VRMX 610\n         DO J = 1 TO K,.                                                VRMX 620\n         AA   =0,.                                                      VRMX 630\n         BB   =0,.                                                      VRMX 640\n              DO I = 1 TO M,.                                           VRMX 650\n              CC   =A(I,J)*A(I,J),.                                     VRMX 660\n              AA   =AA+CC,.                                             VRMX 670\n              BB   =BB+CC*CC,.                                          VRMX 680\n              END,.                                                     VRMX 690\n         TV(NV)=TV(NV)+(M*BB-AA*AA)/FN,.                                VRMX 700\n         END,.                                                          VRMX 710\n    IF NV GE 51                                                         VRMX 720\n    THEN DO,.                          /* NUMBER OF ITERATIONS = 50   */VRMX 730\n         ERROR='3',.                                                    VRMX 740\n         GO TO S80,.                                                    VRMX 750\n         END,.                                                          VRMX 760\n    IF TV(NV)-TVLT LE 1.0E-7           /* PERFORM CONVERGENCE TEST    */VRMX 770\n    THEN DO,.                                                           VRMX 780\n         NC   =NC+1,.                                                   VRMX 790\n         IF NC GT 3                                                     VRMX 800\n         THEN GO TO S80,.                                               VRMX 810\n         END,.                                                          VRMX 820\n /*                                                                   */VRMX 830\n /*      ROTATION OF TWO FACTORS BEGINS                               */VRMX 840\n /*                                                                   */VRMX 850\n         DO J = 1 TO LL,.                                               VRMX 860\n         II   =J+1,.                                                    VRMX 870\n              DO K1 = II TO K,.                                         VRMX 880\n              AA   =0,.                /* CALCULATE NUM AND DEN       */VRMX 890\n              BB   =0,.                                                 VRMX 900\n              CC   =0,.                                                 VRMX 910\n              DD   =0,.                                                 VRMX 920\n                   DO I = 1 TO M,.                                      VRMX 930\n                   U    =(A(I,J)+A(I,K1))*(A(I,J)-A(I,K1)),.            VRMX 940\n                   T    =A(I,J)*A(I,K1)*2,.                             VRMX 950\n                   CC   =CC+(U+T)*(U-T),.                               VRMX 960\n                   DD   =DD+2*U*T,.                                     VRMX 970\n                   AA   =AA+U,.                                         VRMX 980\n                   BB   =BB+T,.                                         VRMX 990\n                   END,.                                                VRMX1000\n              T    =DD-2*AA*BB/M,.                                      VRMX1010\n              B    =CC-(AA*AA-BB*BB)/M,.                                VRMX1020\n              IF T = B                                                  VRMX1030\n              THEN DO,.                                                 VRMX1040\n                   IF T+B LT EPS                                        VRMX1050\n                   THEN GO TO S70,.                                     VRMX1060\n /*                                                                   */VRMX1070\n /*      NUM + DEN IS GREATER THAN OR EQUAL TO THE TOLERANCE FACTOR   */VRMX1080\n /*                                                                   */VRMX1090\n              COS4T=CONS,.                                              VRMX1100\n                   SIN4T=CONS,.                                         VRMX1110\n                   GO TO S40,.                                          VRMX1120\n                   END,.                                                VRMX1130\n              IF T GT B                                                 VRMX1140\n              THEN GO TO S30,.                                          VRMX1150\n              TAN4T=ABS(T)/ABS(B),.    /* NUM IS LESS THAN DEN        */VRMX1160\n              IF TAN4T GE EPS                                           VRMX1170\n              THEN DO,.                                                 VRMX1180\n                   COS4T=1/SQRT(1+TAN4T*TAN4T),.                        VRMX1190\n                   SIN4T=TAN4T*COS4T,.                                  VRMX1200\n                   GO TO S40,.                                          VRMX1210\n                   END,.                                                VRMX1220\n              IF B GE 0                                                 VRMX1230\n              THEN GO TO S70,.                                          VRMX1240\n              SINP =CONS,.                                              VRMX1250\n              COSP =CONS,.                                              VRMX1260\n              GO TO S60,.                                               VRMX1270\n S30..                                                                  VRMX1280\n              CTN4T=ABS(T/B),.         /* NUM IS GREATER THAN DEN     */VRMX1290\n              IF CTN4T GE EPS                                           VRMX1300\n              THEN DO,.                                                 VRMX1310\n                   SIN4T=1/SQRT(1+CTN4T*CTN4T),.                        VRMX1320\n                   COS4T=CTN4T*SIN4T,.                                  VRMX1330\n                   GO TO S40,.                                          VRMX1340\n                   END,.                                                VRMX1350\n              COS4T=0,.                                                 VRMX1360\n              SIN4T=1,.                                                 VRMX1370\n /*                                                                   */VRMX1380\n /*      DETERMINE COS THEAT AND SIN THETA                            */VRMX1390\n /*                                                                   */VRMX1400\n S40..                                                                  VRMX1410\n              COS2T=SQRT((1+COS4T)/2),.                                 VRMX1420\n              SIN2T=SIN4T/(2*COS2T),.                                   VRMX1430\n              COST =SQRT((1+COS2T)/2),.                                 VRMX1440\n              SINT =SIN2T/(2*COST),.                                    VRMX1450\n /*                                                                   */VRMX1460\n /*      DETERMINE COS PHI AND SIN PHI                                */VRMX1470\n /*                                                                   */VRMX1480\n              IF B GT 0                                                 VRMX1490\n              THEN DO,.                                                 VRMX1500\n                   COSP =COST,.                                         VRMX1510\n                   SINP =SINT,.                                         VRMX1520\n                   GO TO S50,.                                          VRMX1530\n                   END,.                                                VRMX1540\n              COSP =CONS*(COST+SINT),.                                  VRMX1550\n              SINP =ABS(CONS*(COST-SINT)),.                             VRMX1560\n S50..                                                                  VRMX1570\n              IF T LE 0                                                 VRMX1580\n              THEN SINP =-SINP,.                                        VRMX1590\n S60..                                                                  VRMX1600\n                   DO I = 1 TO M,.     /* PERFORM ROTATION            */VRMX1610\n                   AA   =A(I,J)*COSP+A(I,K1)*SINP,.                     VRMX1620\n                   A(I,K1)=-A(I,J)*SINP+A(I,K1)*COSP,.                  VRMX1630\n                   A(I,J)=AA,.                                          VRMX1640\n                   END,.                                                VRMX1650\n S70..                                                                  VRMX1660\n              END,.                                                     VRMX1670\n         END,.                                                          VRMX1680\n    GO TO S10,.                                                         VRMX1690\n /*                                                                   */VRMX1700\n /*      DENORMALIZE VARIMAX LOADINGS                                 */VRMX1710\n /*                                                                   */VRMX1720\n S80..                                                                  VRMX1730\n         DO I = 1 TO M,.                                                VRMX1740\n              DO J = 1 TO K,.                                           VRMX1750\n              A(I,J)=A(I,J)*H(I),.                                      VRMX1760\n              END,.                                                     VRMX1770\n         END,.                                                          VRMX1780\n    NC   =NV-1,.                       /* CHECK ON COMMUNALITIES      */VRMX1790\n    H    =H*H,.                                                         VRMX1800\n         DO I = 1 TO M,.                                                VRMX1810\n         F(I) =0,.                                                      VRMX1820\n              DO J = 1 TO K,.                                           VRMX1830\n              F(I) =F(I)+A(I,J)*A(I,J),.                                VRMX1840\n              END,.                                                     VRMX1850\n         D(I) =H(I)-F(I),.                                              VRMX1860\n         END,.                                                          VRMX1870\n FIN..                                                                  VRMX1880\n    RETURN,.                                                            VRMX1890\n    END,.                              /*END OF PROCEDURE VRMX        */VRMX1900\n KLMO..                                                                 KLMO  10\n /*********************************************************************/KLMO  20\n /*                                                                   */KLMO  30\n /*      TESTS THE DIFFERENCE BETWEEN EMPIRICAL AND THEORETICAL       */KLMO  40\n /*      DISTRIBUTIONS USING THE KOLMOGOROV-SMIRNOV TEST              */KLMO  50\n /*                                                                   */KLMO  60\n /*********************************************************************/KLMO  70\n    PROCEDURE(X,N,Z,PROB,IFCOD,U,S),.                                   KLMO  80\n    DECLARE                                                             KLMO  90\n         (X(*),Y,TEMP,PROB,S,U,Z,D,DN,EI,ES,FI,FS)FLOAT BINARY,         KLMO 100\n         (I,J,K,IL,N,IFCOD) FIXED BINARY,                               KLMO 110\n         ERROR EXTERNAL CHARACTER (1),.                                 KLMO 120\n    ERROR='0',.                                                         KLMO 130\n    IF N LT 100                                                         KLMO 140\n    THEN IF N=0                        /* N < 100--SET ERROR IND.     */KLMO 150\n         THEN DO,.                                                      KLMO 160\n              ERROR='4',.                                               KLMO 170\n              GO TO S80,.                                               KLMO 180\n              END,.                                                     KLMO 190\n         ELSE ERROR='3',.                                               KLMO 200\n    K    =1,.                          /* SORT X INTO ASCENDING       */KLMO 210\n         DO I=2 TO N,.                 /* SEQUENCE                    */KLMO 211\n         IF X(I) LT X(K)                                                KLMO 212\n         THEN DO,.                                                      KLMO 213\n              TEMP =X(I),.                                              KLMO 214\n                   DO J=1 TO K,.                                        KLMO 215\n                   L    =I-J,.                                          KLMO 216\n                   IF TEMP GE X(L)                                      KLMO 217\n                   THEN DO,.                                            KLMO 218\n                        X(L+1)    =TEMP,.                               KLMO 219\n                        GO TO S5,.                                      KLMO 220\n                        END,.                                           KLMO 230\n                   ELSE X(L+1)    =X(L),.                               KLMO 240\n                   END,.                                                KLMO 250\n              X(1) =TEMP,.                                              KLMO 260\n S5..                                                                   KLMO 270\n              END,.                                                     KLMO 280\n         K    =I,.                                                      KLMO 290\n         END,.                                                          KLMO 300\n                                       /* COMPUTES MAX. DEV. DN IN    */KLMO 310\n                                       /* ABS. VAL. BETWEEN EMP. AND  */KLMO 320\n                                       /* THEO. FUNCTIONS OVER ALL X  */KLMO 330\n    DN,FS=0.0,.                                                         KLMO 340\n    IL   =1,.                                                           KLMO 350\n S10..                                                                  KLMO 360\n         DO I=IL TO N-1,.                                               KLMO 370\n         J    =I,.                                                      KLMO 380\n         IF X(J) NE X(J+1)                                              KLMO 390\n         THEN GO TO S40,.                                               KLMO 400\n         END,.                                                          KLMO 410\n    J    =N,.                                                           KLMO 450\n S40..                                                                  KLMO 460\n    IL   =J+1,.                                                         KLMO 470\n    FI   =FS,.                                                          KLMO 480\n    FS   =FLOAT(J)/N,.                 /* EMP. DIST. FUNCT. CALCULATED*/KLMO 490\n    IF IFCOD=2                                                          KLMO 500\n    THEN DO,.                                                           KLMO 510\n         IF S LE 0                                                      KLMO 520\n         THEN ERROR='1',.              /* INVALID VALUE OF S          */KLMO 530\n         ELSE DO,.                     /* EXPONENTIAL PDF             */KLMO 590\n              Z    =(X(J)-U)/S+1.0,.                                    KLMO 600\n              IF Z LE 0                                                 KLMO 610\n              THEN                     /* Z < OR = 0                  */KLMO 620\n S60..                                                                  KLMO 630\n                   DO,.                                                 KLMO 640\n                   Y    =0.0,.                                          KLMO 650\n S70..                                                                  KLMO 660\n                   EI   =ABS(Y-FI),.                                    KLMO 670\n                   ES   =ABS(Y-FS),.                                    KLMO 680\n                                       /* COMPUTE MAX. DEV. DN BETWEEN*/KLMO 690\n                                       /* EMP. AND THEO. FUNCTIONS    */KLMO 700\n                   DN   =MAX(DN,EI,ES),.                                KLMO 710\n                   IF IL LE N                                           KLMO 720\n                   THEN GO TO S10,.                                     KLMO 730\n                   ELSE DO,.                                            KLMO 760\n                                       /* CALC. ASYMPTOTIC VALUES     */KLMO 770\n                                       /* USING SMIR                  */KLMO 780\n                        Z    =DN*SQRT(N),.                              KLMO 790\n                        CALL SMIR (Z,PROB),.                            KLMO 800\n                        PROB =1.E0-PROB,.                               KLMO 810\n                        END,.                                           KLMO 830\n                   END,.                                                KLMO 840\n              ELSE DO,.                /* EXPONENTIAL PDF             */KLMO 850\n                   Y=1.-EXP(-Z),.                                       KLMO 860\n                   GO TO S70,.                                          KLMO 870\n                   END,.                                                KLMO 880\n              END,.                                                     KLMO 890\n         END,.                                                          KLMO 900\n    ELSE IF IFCOD LT 2                                                  KLMO 910\n         THEN IF S LE 0                                                 KLMO 920\n              THEN ERROR='1',.         /* INVALID VALUE OF S          */KLMO 930\n              ELSE DO,.                /* NORMAL PDF                  */KLMO 940\n                   Z    =(X(J)-U)/S,.                                   KLMO 950\n                   CALL NDTR(Z,Y,D),.                                   KLMO 960\n                   GO TO S70,.                                          KLMO 970\n                   END,.                                                KLMO 980\n         ELSE IF IFCOD=4                                                KLMO 990\n              THEN IF S LE U                                            KLMO1000\n                   THEN ERROR='1',.    /* INVALID VAL. OF S OR U      */KLMO1010\n                   ELSE IF X(J) LE U   /* UNIFORM PDF                 */KLMO1020\n                        THEN GO TO S60,.                                KLMO1030\n                        ELSE IF X(J) LE S                               KLMO1040\n                             THEN DO,.                                  KLMO1050\n                                  Y    =(X(J)-U)/(S-U),.                KLMO1060\n                                  GO TO S70,.                           KLMO1070\n                                  END,.                                 KLMO1080\n                             ELSE DO,.                                  KLMO1090\n                                  Y    =1.0,.                           KLMO1100\n                                  GO TO S70,.                           KLMO1110\n                                  END,.                                 KLMO1120\n              ELSE IF IFCOD LT 4                                        KLMO1130\n                   THEN IF S=0         /* INVALID VALUE OF S          */KLMO1140\n                        THEN ERROR='1',.                                KLMO1150\n                        ELSE DO,.      /* CAUCHY PDF                  */KLMO1160\n                             Y    =ATAN((X(J)-U)/S)*0.3183099+0.5,.     KLMO1170\n                             GO TO S70,.                                KLMO1180\n                             END,.                                      KLMO1190\n                   ELSE ERROR='2',.    /* USER'S PDF                  */KLMO1200\n S80..                                                                  KLMO1210\n    RETURN,.                                                            KLMO1220\n    END,.                              /*END OF PROCEDURE KLMO        */KLMO1230\n KLM2..                                                                 KLM2  10\n /*********************************************************************/KLM2  20\n /*                                                                   */KLM2  30\n /*      TESTS THE DIFFERENCE BETWEEN TWO SAMPLE DISTRIBUTION         */KLM2  40\n /*      FUNCTIONS USING THE KOLMOGOROV-SMIRNOV TEST.                 */KLM2  50\n /*                                                                   */KLM2  60\n /*********************************************************************/KLM2  70\n    PROCEDURE(X,Y,N,M,Z,PROB),.                                         KLM2  80\n    DECLARE                                                             KLM2  90\n         (X(*),Y(*),TEMP,XM1,XN1,Z,PROB,D) FLOAT BINARY,                KLM2 100\n         (I,J,K,L,M,N) FIXED BINARY,                                    KLM2 110\n         ERROR EXTERNAL CHARACTER(1),.                                  KLM2 120\n    ERROR='0',.                                                         KLM2 130\n    IF N LT 100 OR M LT 100            /* M OR N IS LESS THAN 100     */KLM2 140\n    THEN IF N=0 OR M=0                 /* SET ERROR INDICATOR         */KLM2 150\n         THEN DO,.                                                      KLM2 160\n              ERROR='4',.                                               KLM2 170\n              GO TO S60,.                                               KLM2 180\n              END,.                                                     KLM2 190\n         ELSE ERROR='3',.                                               KLM2 200\n    K    =1,.                          /* SORT X INTO ASCENDING       */KLM2 210\n         DO I=2 TO N,.                 /* SEQUENCE                    */KLM2 211\n         IF X(I) LT X(K)                                                KLM2 212\n         THEN DO,.                                                      KLM2 213\n              TEMP =X(I),.                                              KLM2 214\n                   DO J=1 TO K,.                                        KLM2 215\n                   L    =I-J,.                                          KLM2 216\n                   IF TEMP GE X(L)                                      KLM2 217\n                   THEN DO,.                                            KLM2 218\n                        X(L+1)    =TEMP,.                               KLM2 219\n                        GO TO S5,.                                      KLM2 220\n                        END,.                                           KLM2 221\n                   ELSE X(L+1)    =X(L),.                               KLM2 222\n                   END,.                                                KLM2 223\n              X(1) =TEMP,.                                              KLM2 224\n S5..                                                                   KLM2 225\n              END,.                                                     KLM2 226\n         K    =I,.                                                      KLM2 227\n         END,.                                                          KLM2 228\n    K    =1,.                          /* SORT Y INTO ASCENDING       */KLM2 229\n         DO I=2 TO M,.                 /* SEQUENCE                    */KLM2 230\n         IF Y(I) LT Y(K)                                                KLM2 240\n         THEN DO,.                                                      KLM2 250\n              TEMP =Y(I),.                                              KLM2 260\n                   DO J=1 TO K,.                                        KLM2 270\n                   L    =I-J,.                                          KLM2 280\n                   IF TEMP GE Y(L)                                      KLM2 290\n                   THEN DO,.                                            KLM2 300\n                        Y(L+1)    =TEMP,.                               KLM2 310\n                        GO TO S8,.                                      KLM2 320\n                        END,.                                           KLM2 330\n                   ELSE Y(L+1)    =Y(L),.                               KLM2 340\n                   END,.                                                KLM2 350\n              Y(1) =TEMP,.                                              KLM2 360\n S8..                                                                   KLM2 370\n              END,.                                                     KLM2 380\n         K    =I,.                                                      KLM2 390\n         END,.                                                          KLM2 400\n    XN1  =1/FLOAT(N),.                 /* CALC. D=ABS(FN-GM)          */KLM2 410\n    XM1  =1/FLOAT(M),.                 /* OVER THE SPECTRUM OF X & Y  */KLM2 420\n    D,I,J,K,L =0,.                                                      KLM2 430\n S10..                                                                  KLM2 440\n    IF Y(J+1) GT X(I+1)                                                 KLM2 450\n    THEN DO,.                                                           KLM2 460\n         K=1,.                                                          KLM2 470\n S20..                                                                  KLM2 480\n         I=I+1,.                                                        KLM2 490\n         IF N LE I                                                      KLM2 500\n         THEN DO,.                                                      KLM2 510\n              L=1,.                                                     KLM2 520\n              GO TO S30,.                                               KLM2 530\n              END,.                                                     KLM2 540\n         ELSE IF X(I) GE X(I+1)                                         KLM2 550\n              THEN GO TO S20,.                                          KLM2 560\n              ELSE                                                      KLM2 570\n S30..                                                                  KLM2 580\n                   IF K = 0                                             KLM2 590\n                   THEN                                                 KLM2 600\n S40..                                                                  KLM2 610\n                        DO,.                                            KLM2 620\n                        J=J+1,.                                         KLM2 630\n                        IF J LT M                                       KLM2 640\n                        THEN IF Y(J+1) LE Y(J)                          KLM2 650\n                             THEN GO TO S40,.                           KLM2 660\n                             ELSE GO TO S50,.                           KLM2 670\n                        ELSE L=1,.                                      KLM2 680\n                        END,.                                           KLM2 720\n         END,.                                                          KLM2 740\n    ELSE IF X(I+1) = Y(J+1)                                             KLM2 750\n         THEN DO,.                                                      KLM2 760\n              K=0,.                                                     KLM2 770\n              GO TO S20,.                                               KLM2 780\n              END,.                                                     KLM2 790\n         ELSE GO TO S40,.                                               KLM2 800\n                                       /* CHOOSE THE MAXIMUM          */KLM2 810\n                                       /* DIFFERENCE, D               */KLM2 820\n S50..                                                                  KLM2 830\n    D    =MAX(D,ABS(FLOAT(I)*XN1-FLOAT(J)*XM1)),.                       KLM2 840\n    IF L=0                                                              KLM2 850\n    THEN GO TO S10,.                                                    KLM2 860\n                                       /* CALCULATE THE STATISTIC Z   */KLM2 880\n                                       /* AND Z'S PROBABILITY         */KLM2 890\n    Z    =D*SQRT((FLOAT(N)*FLOAT(M))/(FLOAT(N)+FLOAT(M))),.             KLM2 900\n    CALL SMIR(Z,PROB),.                                                 KLM2 910\n    PROB =1-PROB,.                                                      KLM2 920\n S60..                                                                  KLM2 940\n    RETURN,.                                                            KLM2 950\n    END,.                              /* END OF PROCEDURE KLM2       */KLM2 960\n SMIR..                                                                 SMIR  10\n /*********************************************************************/SMIR  20\n /*                                                                   */SMIR  30\n /*      COMPUTES VALUES OF THE LIMITING DISTRIBUTION FUNCTION FOR THE*/SMIR  40\n /*      KOLMOGOROV-SMIRNOV STATISTIC.                                */SMIR  50\n /*                                                                   */SMIR  60\n /*********************************************************************/SMIR  70\n    PROCEDURE (X,Y),.                                                   SMIR  80\n    DECLARE                                                             SMIR  90\n         (X,Y,Q1,Q2,Q4,Q8) FLOAT BINARY,./*SINGLE PRECISION        /*S*/SMIR 100\n  /*     (X,Y,Q1,Q2,Q4,Q8) FLOAT BINARY (53),./*DOUBLE PRECISION   /*D*/SMIR 110\n    IF X LT 1.0                                                         SMIR 120\n    THEN IF X LE .27                   /* X LESS THAN .27-SET Y       */SMIR 130\n         THEN Y    =0.0,.                                               SMIR 140\n                                       /* CALCULATE L(X)              */SMIR 150\n                                       /* IN RANGE (.27,1)            */SMIR 160\n         ELSE DO,.                                                      SMIR 170\n              Q1   =EXP(-1.233701E0/X**2),.      /* SINGLE PREC.   /*S*/SMIR 180\n  /*          Q1   =EXP(-1.23370050136170E0/X**2),.                     SMIR 190\n                                                 /* DOUBLE PREC.   /*D*/SMIR 200\n              Q2   =Q1*Q1,.                                             SMIR 210\n              Q4   =Q2*Q2,.                                             SMIR 220\n              Q8   =Q4*Q4,.                                             SMIR 230\n              IF Q8-1.0E-25 GE 0                                        SMIR 240\n              THEN Y    =(2.506628E0/X)*Q1*(1.0E0+Q8*(1.0E0+Q8*Q8)),.   SMIR 250\n                                                 /* SINGLE PREC.   /*S*/SMIR 260\n  /*          THEN Y    =(2.506628274631001E0/X)*Q1*(1.0E0+Q8*          SMIR 270\n                         (1.0E0+Q8*Q8)),.        /* DOUBLE PREC.   /*D*/SMIR 280\n              ELSE Y    =(2.506628E0/X)*Q1,.     /* SINGLE PREC.   /*S*/SMIR 290\n  /*          ELSE Y    =(2.506628274631001E0/X)*Q1,.                   SMIR 300\n                                                 /* DOUBLE PREC.   /*D*/SMIR 310\n              END,.                                                     SMIR 320\n    ELSE IF X LT 3.1                                                    SMIR 330\n                                       /* CALCULATE L(X)              */SMIR 340\n         THEN DO,.                     /* IN RANGE (1,3.1)            */SMIR 350\n              Q1   =EXP(-2.0E0*X*X),.                                   SMIR 360\n              Q2   =Q1*Q1,.                                             SMIR 370\n              Q4   =Q2*Q2,.                                             SMIR 380\n              Q8   =Q4*Q4,.                                             SMIR 390\n              Y    =1.0E0-2.0E0*(Q1-Q4+Q8*(Q1-Q8)),.                    SMIR 400\n              END,.                                                     SMIR 410\n         ELSE Y    =1.0,.              /* X > OR = 3.1--SET Y         */SMIR 420\n    RETURN,.                                                            SMIR 430\n    END,.                              /* END OF PROCEDURE SMIR       */SMIR 440\n CHSQ..                                                                 CHSQ  10\n /*********************************************************************/CHSQ  20\n /*                                                                   */CHSQ  30\n /*      TO COMPUTE CHI-SQUARE FROM A CONTINGENCY TABLE.              */CHSQ  40\n /*                                                                   */CHSQ  50\n /*********************************************************************/CHSQ  60\n    PROCEDURE (A,N,M,CS,NDF,P,TP),.                                     CHSQ  70\n    DECLARE                                                             CHSQ  80\n         ERROR EXTERNAL CHARACTER (1),                                  CHSQ  90\n         (A(*,*),CS,GS,TR(N),TC(M),P,TP,E)                              CHSQ 100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/CHSQ 110\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/CHSQ 120\n         (I,ICOUNT,J,M,N,NDF,NA,NB,NC,ND,NAB,NCD,NAC,NBD,NZ)            CHSQ 130\n         FIXED BINARY,                                                  CHSQ 140\n         (WN,F,W,W1,W2,W3,W4) FLOAT BINARY(53),.                        CHSQ 150\n /*                                                                   */CHSQ 160\n    ERROR='0',.                                                         CHSQ 170\n    CS   =0.0,.                                                         CHSQ 180\n    P    =0.0,.                                                         CHSQ 190\n    TP   =0.0,.                                                         CHSQ 200\n    NDF  =(N-1)*(M-1),.                /* FIND DEGREES OF FREEDOM     */CHSQ 210\n    IF N LE 1 OR M LE 1                                                 CHSQ 220\n    THEN DO,.                                                           CHSQ 230\n         ERROR='2',.                   /* DEGREES OF FREEDOM = 0      */CHSQ 240\n         GO TO FIN,.                                                    CHSQ 250\n         END,.                                                          CHSQ 260\n /*                                                                   */CHSQ 270\n         DO I = 1 TO N,.               /* CALCULATE ROW TOTALS        */CHSQ 280\n         TR(I)=0.0,.                                                    CHSQ 290\n              DO J = 1 TO M,.                                           CHSQ 300\n              TR(I)=TR(I)+A(I,J),.                                      CHSQ 310\n              END,.                                                     CHSQ 320\n         IF TR(I) LE 0                                                  CHSQ 330\n         THEN DO,.                     /* SOME ROW TOTAL = ZERO       */CHSQ 340\n              ERROR='3',.                                               CHSQ 350\n              GO TO FIN,.                                               CHSQ 360\n              END,.                                                     CHSQ 370\n         END,.                                                          CHSQ 380\n         DO J = 1 TO M,.               /* CALCULATE COLUMN TOTALS     */CHSQ 390\n         TC(J)=0.0,.                                                    CHSQ 400\n              DO I = 1 TO N,.                                           CHSQ 410\n              TC(J)=TC(J)+A(I,J),.                                      CHSQ 420\n              END,.                                                     CHSQ 430\n         IF TC(J) LE 0                                                  CHSQ 440\n         THEN DO,.                                                      CHSQ 450\n              ERROR='3',.              /* SOME COLUMN TOTAL = ZERO    */CHSQ 460\n              GO TO FIN,.                                               CHSQ 470\n              END,.                                                     CHSQ 480\n         END,.                                                          CHSQ 490\n    GS   =0.0,.                        /* COMPUTE GRAND SUM           */CHSQ 500\n         DO I = 1 TO N,.                                                CHSQ 510\n         GS   =GS+TR(I),.                                               CHSQ 520\n         END,.                                                          CHSQ 530\n /*                                                                   */CHSQ 540\n /*      COMPUTE CHI-SQUARE FOR 2 BY 2 TABLE (SPECIAL CASE)           */CHSQ 550\n /*                                                                   */CHSQ 560\n    IF N = 2 AND M = 2                                                  CHSQ 570\n    THEN DO,.                                                           CHSQ 580\n                   CS   =GS*(ABS(A(1,1)*A(2,2)-A(2,1)*A(1,2))           CHSQ 590\n                         -GS/2.0)**2/(TC(1)*TC(2)*TR(1)*TR(2)),.        CHSQ 600\n         IF GS GT 40.0                                                  CHSQ 610\n         THEN GO TO FIN,.                                               CHSQ 620\n         ELSE DO,.                                                      CHSQ 630\n              IF (TR(1)*TC(1))/GS GE 5.0 AND                            CHSQ 640\n                   (TR(2)*TC(1))/GS GE 5.0 AND                          CHSQ 650\n                   (TR(1)*TC(2))/GS GE 5.0 AND                          CHSQ 660\n                   (TR(2)*TC(2))/GS GE 5.0                              CHSQ 670\n              THEN GO TO FIN,.                                          CHSQ 680\n              ELSE DO,.                                                 CHSQ 690\n                   NA   =A(1,1),.                                       CHSQ 700\n                   NB   =A(1,2),.                                       CHSQ 710\n                   NC   =A(2,1),.                                       CHSQ 720\n                   ND   =A(2,2),.                                       CHSQ 730\n                   K    =1,.                                            CHSQ 740\n /*                                                                   */CHSQ 750\n /*      OBTAIN THE MARGINAL TOTALS AND GRAND TOTAL                   */CHSQ 760\n /*                                                                   */CHSQ 770\n                  NAB  =NA+NB,.                                         CHSQ 780\n                   NCD  =NC+ND,.                                        CHSQ 790\n                   NAC  =NA+NC,.                                        CHSQ 800\n                   NBD  =NB+ND,.                                        CHSQ 810\n                   NZ   =NA+NB+NC+ND,.                                  CHSQ 820\n /*                                                                   */CHSQ 830\n /*      COMPUTE N FACTORIAL                                          */CHSQ 840\n /*                                                                   */CHSQ 850\n                  WN    =1,.                                            CHSQ 860\n                   IF NZ GT 1                                           CHSQ 870\n                   THEN DO,.                                            CHSQ 880\n                             DO I = 2 TO NZ,.                           CHSQ 890\n                             FI   =I,.                                  CHSQ 900\n                             WN   =WN*FI,.                              CHSQ 910\n                             END,.                                      CHSQ 920\n                        END,.                                           CHSQ 930\n /*                                                                   */CHSQ 940\n /*      COMPUTE EXACT PROBABILITY                                    */CHSQ 950\n /*                                                                   */CHSQ 960\n S10..                                                                  CHSQ 970\n                  W1    =1,.                                            CHSQ 980\n                   IF NB GT 0                                           CHSQ 990\n                   THEN DO,.                                            CHSQ1000\n                        J    =NA+1,.                                    CHSQ1010\n                             DO I = J TO NAB,.                          CHSQ1020\n                             FI   =I,.                                  CHSQ1030\n                             W1   =W1*FI,.                              CHSQ1040\n                             END,.                                      CHSQ1050\n                        END,.                                           CHSQ1060\n                   W2   =1.0,.                                          CHSQ1070\n                   IF NC GT 0                                           CHSQ1080\n                   THEN DO,.                                            CHSQ1090\n                        J    =ND+1,.                                    CHSQ1100\n                             DO I = J TO NCD,.                          CHSQ1110\n                             FI   =I,.                                  CHSQ1120\n                             W2   =W2*FI,.                              CHSQ1130\n                             END,.                                      CHSQ1140\n                        END,.                                           CHSQ1150\n                   W3   =1.0,.                                          CHSQ1160\n                   IF NA GT 0                                           CHSQ1170\n                   THEN DO,.                                            CHSQ1180\n                        J    =NC+1,.                                    CHSQ1190\n                             DO I = J TO NAC,.                          CHSQ1200\n                             FI   =I,.                                  CHSQ1210\n                             W3   =W3*FI,.                              CHSQ1220\n                             END,.                                      CHSQ1230\n                        END,.                                           CHSQ1240\n                   W4   =1.0,.                                          CHSQ1250\n                   IF ND GT 0                                           CHSQ1260\n                   THEN DO,.                                            CHSQ1270\n                        J    =NB+1,.                                    CHSQ1280\n                             DO I = J TO NBD,.                          CHSQ1290\n                             FI   =I,.                                  CHSQ1300\n                             W4   =W4*FI,.                              CHSQ1310\n                             END,.                                      CHSQ1320\n                        END,.                                           CHSQ1330\n                   W1   =W1*W2*W3*W4,.                                  CHSQ1340\n                   W    =W1/WN,.                                        CHSQ1350\n                   P    =P+W,.                                          CHSQ1360\n                   IF K GT 1                                            CHSQ1370\n                   THEN TP   =TP+W,.                                    CHSQ1380\n                   K    =K+1,.                                          CHSQ1390\n /*                                                                   */CHSQ1400\n /*      TEST WHETHER FREQUENCY IS ZERO (0)                           */CHSQ1410\n /*                                                                   */CHSQ1420\n                  IF NA LE 0 OR NB LE 0 OR NC LE 0 OR ND LE 0           CHSQ1430\n                   THEN GO TO FIN,.                                     CHSQ1440\n /*                                                                   */CHSQ1450\n /*      ADJUST DATA IN ORDER TO COMPUTE THE PROBABILITY ASSOCIATED   */CHSQ1460\n /*      WITH MORE EXTREME FREQUENCIES (BUT WITH SAME MARGINAL TOTALS)*/CHSQ1470\n /*                                                                   */CHSQ1480\n                  IF NA LE NB                                           CHSQ1490\n                   THEN DO,.                                            CHSQ1500\n                        IF NC LE ND                                     CHSQ1510\n                        THEN DO,.                                       CHSQ1520\n                             IF NA GT NC                                CHSQ1530\n                             THEN GO TO S20,.                           CHSQ1540\n                             END,.                                      CHSQ1550\n                        GO TO S25,.                                     CHSQ1560\n                        END,.                                           CHSQ1570\n                   IF NC GT ND                                          CHSQ1580\n                   THEN DO,.                                            CHSQ1590\n                        IF NB GT ND                                     CHSQ1600\n                        THEN GO TO S25,.                                CHSQ1610\n                        END,.                                           CHSQ1620\n /*                                                                   */CHSQ1630\n /*      MOVE B TO A AND C TO D                                       */CHSQ1640\n /*                                                                   */CHSQ1650\n S20..                                                                  CHSQ1660\n                  NA    =NA+1,.                                         CHSQ1670\n                   NB   =NB-1,.                                         CHSQ1680\n                   NC   =NC-1,.                                         CHSQ1690\n                   ND   =ND+1,.                                         CHSQ1700\n                   GO TO S10,.                                          CHSQ1710\n /*                                                                   */CHSQ1720\n /*      MOVE A TO B AND D TO C                                       */CHSQ1730\n /*                                                                   */CHSQ1740\n S25..                                                                  CHSQ1750\n                  NA    =NA-1,.                                         CHSQ1760\n                   NB   =NB+1,.                                         CHSQ1770\n                   NC   =NC+1,.                                         CHSQ1780\n                   ND   =ND-1,.                                         CHSQ1790\n                   GO TO S10,.                                          CHSQ1800\n                   END,.                                                CHSQ1810\n              END,.                                                     CHSQ1820\n         END,.                         /* END OF TWO BY TWO CASE      */CHSQ1830\n /*                                                                   */CHSQ1840\n /*      COMPUTE CHI SQUARE FOR OTHER CONTINGENCY TABLES              */CHSQ1850\n /*                                                                   */CHSQ1860\n         ICOUNT=0,.                                                     CHSQ1870\n         DO J = 1 TO M,.                                                CHSQ1880\n              DO I = 1 TO N,.                                           CHSQ1890\n              E    =TR(I)*TC(J)/GS,.                                    CHSQ1900\n              IF E LE 5.0                                               CHSQ1910\n              THEN ICOUNT=ICOUNT+1,.                                    CHSQ1920\n              CS   =CS+(A(I,J)-E)*(A(I,J)-E)/E,.                        CHSQ1930\n              END,.                                                     CHSQ1940\n         END,.                                                          CHSQ1950\n    IF ICOUNT GT 0                                                      CHSQ1960\n    THEN ERROR='1',.                   /* SOME EXPECTED VALUES ARE    */CHSQ1970\n /*                                    /* LESS THAN 5.0               */CHSQ1980\n FIN..                                                                  CHSQ1990\n    RETURN,.                                                            CHSQ2000\n    END,.                              /* END OF PROCEDURE CHSQ       */CHSQ2010\n KRNK..                                                                 KRNK  10\n /*********************************************************************/KRNK  20\n /*                                                                   */KRNK  30\n /*      TO TEST CORRELATION BETWEEN TWO VARIABLES BY MEANS OF THE    */KRNK  40\n /*      KENDALL RANK CORRELATION COEFFICIENT.                        */KRNK  50\n /*                                                                   */KRNK  60\n /*********************************************************************/KRNK  70\n    PROCEDURE (A,B,R1,R2,N,TAU,SD,Z,NR),.                               KRNK  80\n    DECLARE                                                             KRNK  90\n         (A(*),B(*),R1(*),R2(*),TAU,SD,Z,RSAVE,SAVER,S,TA,TB,FN1,FN)    KRNK 100\n         FLOAT BINARY,                                                  KRNK 110\n         (I,ISORT,J,KT,N,NR)                                            KRNK 120\n         BINARY FIXED,                                                  KRNK 130\n         ERROR EXTERNAL CHARACTER (1),.                                 KRNK 140\n /*                                                                   */KRNK 150\n    ERROR='0',.                        /* INITIALIZATION              */KRNK 160\n         DO I=1 TO N,.                                                  KRNK 170\n         R1(I)     =0,.                                                 KRNK 180\n         R2(I)     =0,.                                                 KRNK 190\n         END,.                                                          KRNK 200\n    TAU  =0.0,.                                                         KRNK 210\n    SD   =0.0,.                                                         KRNK 220\n    Z    =0.0,.                                                         KRNK 230\n    IF N LE 1                          /* NUMBER OF OBSERVATIONS LESS */KRNK 240\n    THEN DO,.                          /* THAN OR EQUAL TO ONE.       */KRNK 250\n         ERROR='1',.                                                    KRNK 260\n         GO TO FIN,.                                                    KRNK 270\n         END,.                                                          KRNK 280\n    FN   =N,.                                                           KRNK 290\n    FN1  =N*(N-1),.                                                     KRNK 300\n    IF NR= 1                           /* DETERMINE IF DATA IS RANKED */KRNK 310\n    THEN DO,.                                                           KRNK 320\n              DO I = 1 TO N,.                                           KRNK 330\n              R1(I)=A(I),.             /* MOVE RANKED DATA TO R1 R2   */KRNK 340\n              R2(I)=B(I),.                                              KRNK 350\n              END,.                                                     KRNK 360\n         END,.                                                          KRNK 370\n    ELSE DO,.                                                           KRNK 380\n /*                                                                   */KRNK 390\n /*      RANK DATA IN A AND B VECTORS AND ASSIGN TIED OBSERVATIONS    */KRNK 400\n /*      AVERAGE OF TIED RANKS.                                       */KRNK 410\n /*                                                                   */KRNK 420\n         CALL RANK (A,R1,N),.                                           KRNK 430\n         CALL RANK (B,R2,N),.                                           KRNK 440\n         END,.                                                          KRNK 450\n S10..                                                                  KRNK 460\n    ISORT=0,.                                                           KRNK 470\n /*                                                                   */KRNK 480\n /*      SORT RANK VECTORS R1 AND R2 IN SEQUENCE OF VARIABLE A        */KRNK 490\n /*                                                                   */KRNK 500\n         DO I = 2 TO N,.                                                KRNK 510\n         IF R1(I) LT R1(I-1)                                            KRNK 520\n         THEN DO,.                                                      KRNK 530\n              ISORT=ISORT+1,.                                           KRNK 540\n              RSAVE=R1(I),.                                             KRNK 550\n              R1(I)=R1(I-1),.                                           KRNK 560\n              R1(I-1)=RSAVE,.                                           KRNK 570\n              SAVER=R2(I),.                                             KRNK 580\n              R2(I)=R2(I-1),.                                           KRNK 590\n              R2(I-1)=SAVER,.                                           KRNK 600\n              END,.                                                     KRNK 610\n         END,.                                                          KRNK 620\n    IF ISORT NE 0                                                       KRNK 630\n    THEN GO TO S10,.                                                    KRNK 640\n /*                                                                   */KRNK 650\n /*      COMPUTE S ON VARIABLE B. STARTING WITH THE FIRST RANK, ADD 1 */KRNK 660\n /*      TO S FOR EACH LARGER RANK TO ITS RIGHT AND SUBTRACT 1 FOR    */KRNK 670\n /*      EACH SMALLER RANK. REPEAT FOR ALL RANKS.                     */KRNK 680\n /*                                                                   */KRNK 690\n    S    =0,.                                                           KRNK 700\n         DO I = 1 TO N-1,.                                              KRNK 710\n              DO J = I+1 TO N,.                                         KRNK 720\n              IF R2(J) GT R2(I)                                         KRNK 730\n              THEN S    =S+1.0,.                                        KRNK 740\n              ELSE IF R2(J) LT R2(I)                                    KRNK 750\n              THEN S    =S-1.0,.                                        KRNK 760\n              END,.                                                     KRNK 770\n         END,.                                                          KRNK 780\n /*                                                                   */KRNK 790\n /*      COMPUTE TIED SCORE INDEX FOR BOTH VARIABLES                  */KRNK 800\n /*                                                                   */KRNK 810\n    KT   =2,.                                                           KRNK 820\n    CALL TIE (R1,N,KT,TA),.                                             KRNK 830\n    IF ERROR='2'                                                        KRNK 840\n    THEN                                                                KRNK 850\n S20..                                                                  KRNK 860\n         DO,.                          /* ALL RANKS FOR ONE VARIABLE  */KRNK 870\n         ERROR='3',.                   /* ARE EQUAL                   */KRNK 880\n         GO TO FIN,.                                                    KRNK 890\n         END,.                                                          KRNK 900\n    CALL TIE (R2,N,KT,TB),.                                             KRNK 910\n    IF ERROR='2'                                                        KRNK 920\n    THEN GO TO S20,.                                                    KRNK 930\n    IF TA= 0.0 AND TB = 0.0            /* COMPUTE TAU                 */KRNK 940\n    THEN TAU  =S/(0.5*FN1),.                                            KRNK 950\n    ELSE TAU  =S/((SQRT(0.5*FN1-TA))*(SQRT(0.5*FN1-TB))),.              KRNK 960\n /*                                                                   */KRNK 970\n /*      COMPUTE STANDARD DEVIATION AND Z VALUE IF N IS 10 OR GREATER */KRNK 980\n /*                                                                   */KRNK 990\n    IF N GE 10                                                          KRNK1000\n    THEN DO,.                                                           KRNK1010\n         SD   =(SQRT((2.0*(FN+FN+5))/(9.0*FN1))),.                      KRNK1020\n         Z    =TAU/SD,.                                                 KRNK1030\n         END,.                                                          KRNK1040\n    ELSE ERROR='2',.                   /* SAMPLE SIZE LESS THAN 10    */KRNK1050\n FIN..                                                                  KRNK1060\n    RETURN,.                                                            KRNK1070\n    END,.                              /*END OF PROCEDURE KRNK        */KRNK1080\n QTST..                                                                 QTST  10\n /*********************************************************************/QTST  20\n /*                                                                   */QTST  30\n /*      TO TEST WHETHER THREE OR MORE MATCHED GROUPS OF DICHOTOMOUS  */QTST  40\n /*      DATA DIFFER SIGNIFICANTLY BY THE COCHRAN Q-TEST.             */QTST  50\n /*                                                                   */QTST  60\n /*********************************************************************/QTST  70\n    PROCEDURE (A,N,M,Q,NDF),.                                           QTST  80\n    DECLARE                                                             QTST  90\n         ERROR EXTERNAL CHARACTER (1),                                  QTST 100\n         (A(*,*),TR(N),TC(M),Q,RSQ,CSQ,GD,FM)                           QTST 110\n         BINARY FLOAT,                                                  QTST 120\n         (I,J,M,N,NDF)                                                  QTST 130\n         BINARY FIXED,.                                                 QTST 140\n /*                                                                   */QTST 150\n    ERROR='0',.                                                         QTST 160\n    IF M LT 3 OR N LE 1                /* NUMBER OF CASES IN EACH     */QTST 170\n    THEN DO,.                          /* GROUP IS LESS THAN 3 OR     */QTST 180\n         ERROR='1',.                   /* THE NUMBER OF OBSERVATIONS  */QTST 190\n         GO TO FIN,.                   /* IS LESS THAN OR EQUAL TO    */QTST 200\n         END,.                         /* ONE.                        */QTST 210\n    FM   =M,.                                                           QTST 220\n /*                                                                   */QTST 230\n /*      COMPUTE SUM OF SQUARES OF ROW AND COLUMN TOTALS RSQ AND CSQ, */QTST 240\n /*      AND GRAND TOTAL OF ALL ELEMENTS.                             */QTST 250\n /*                                                                   */QTST 260\n         DO I = 1 TO N,.                                                QTST 270\n         TR(I)=0.0,.                                                    QTST 280\n              DO J = 1 TO M,.                                           QTST 290\n              TR(I)=TR(I)+A(I,J),.                                      QTST 300\n              END,.                                                     QTST 310\n         END,.                                                          QTST 320\n         DO J = 1 TO M,.               /* CALCULATE COLUMN SUMS       */QTST 330\n         TC(J)=0.0,.                                                    QTST 340\n              DO I = 1 TO N,.                                           QTST 350\n              TC(J)=TC(J)+A(I,J),.                                      QTST 360\n              END,.                                                     QTST 370\n         END,.                                                          QTST 380\n    Q    =0.0,.                                                         QTST 390\n    NDF  =0.0,.                                                         QTST 400\n    GD   =0.0,.                                                         QTST 410\n    RSQ  =0.0,.                                                         QTST 420\n    CSQ  =0.0,.                                                         QTST 430\n         DO I = 1 TO N,.                                                QTST 440\n         GD   =GD+TR(I),.              /* GRAND TOTAL                 */QTST 450\n         RSQ  =RSQ+TR(I)*TR(I),.       /* SUM OF ROW TOTAL SQUARED    */QTST 460\n         END,.                                                          QTST 470\n         DO J = 1 TO M,.                                                QTST 480\n         CSQ  =CSQ+TC(J)*TC(J),.       /* SUM OF COLUMN TOTAL SQUARED */QTST 490\n         END,.                                                          QTST 500\n    Q    =FM*GD-RSQ,.                                                   QTST 510\n    IF Q LT 1                          /* TEST FOR Q NEAR ZERO        */QTST 520\n    THEN DO,.                                                           QTST 530\n         ERROR='2',.                                                    QTST 540\n         GO TO FIN,.                                                    QTST 550\n         END,.                                                          QTST 560\n /*                                                                   */QTST 570\n /*    COMPUTE COCHRAN Q TEST VALUE.                                  */QTST 580\n /*                                                                   */QTST 590\n    Q    =(FM-1.0)*(FM*CSQ-GD*GD)/(FM*GD-RSQ),.                         QTST 600\n    NDF  =M-1,.                        /* FIND DEGREES OF FREEDOM     */QTST 610\n FIN..                                                                  QTST 620\n    RETURN,.                                                            QTST 630\n    END,.                              /*END OF PROCEDURE QTST        */QTST 640\n RANK..                                                                 RANK  10\n /*********************************************************************/RANK  20\n /*                                                                   */RANK  30\n /*      TO RANK A VECTOR OF VALUES.                                  */RANK  40\n /*                                                                   */RANK  50\n /*********************************************************************/RANK  60\n    PROCEDURE (A,R,N),.                                                 RANK  70\n    DECLARE                                                             RANK  80\n         ERROR EXTERNAL CHARACTER(1),                                   RANK  90\n         (A(*),R(*),EQUAL,P,SMALL,X)                                    RANK 100\n         BINARY FLOAT,                                                  RANK 110\n         (I,J,N)                                                        RANK 120\n         BINARY FIXED,.                                                 RANK 130\n /*                                                                   */RANK 140\n    ERROR='0',.                                                         RANK 150\n         DO I = 1 TO N,.                                                RANK 160\n         R(I) =0.0,.                                                    RANK 170\n         END,.                                                          RANK 180\n    IF N LE 1                                                           RANK 190\n    THEN DO,.                          /* VECTOR LENGTH IS ONE OR LESS*/RANK 200\n         ERROR='1',.                                                    RANK 210\n         GO TO FIN,.                                                    RANK 220\n         END,.                                                          RANK 230\n /*                                                                   */RANK 240\n /*      FIND RANK OF DATA                                            */RANK 250\n /*                                                                   */RANK 260\n         DO I = 1 TO N,.                                                RANK 270\n /*                                                                   */RANK 280\n /*      TEST WHETHER DATA POINT IS ALREADY RANKED                    */RANK 290\n /*                                                                   */RANK 300\n         IF R(I) LE 0                                                   RANK 310\n         THEN DO,.                                                      RANK 320\n              SMALL=0.0,.                                               RANK 330\n              EQUAL=0.0,.                                               RANK 340\n              X    =A(I),.             /* DATA POINT TO BE RANKED     */RANK 350\n                   DO J = 1 TO N,.                                      RANK 360\n                   IF A(J) LT X                                         RANK 370\n /*                                                                   */RANK 380\n /*      COUNT NUMBER OF DATA POINTS WHICH ARE SMALLER                */RANK 390\n /*                                                                   */RANK 400\n                   THEN SMALL=SMALL+1.0,.                               RANK 410\n                   ELSE IF A(J)= X                                      RANK 420\n                   THEN DO,.                                            RANK 430\n /*                                                                   */RANK 440\n /*      COUNT NUMBER OF DATA POINTS WHICH ARE EQUAL                  */RANK 450\n /*                                                                   */RANK 460\n                        EQUAL=EQUAL+1,.                                 RANK 470\n                        R(J) =-1.0,.                                    RANK 480\n                        END,.                                           RANK 490\n                   END,.                                                RANK 500\n              IF EQUAL LE 1.0          /* TEST FOR TIE                */RANK 510\n /*                                                                   */RANK 520\n /*      STORE RANK OF DATA POINT WHERE NO TIE                        */RANK 530\n /*                                                                   */RANK 540\n              THEN R(I) =SMALL+1.0,.                                    RANK 550\n /*                                                                   */RANK 560\n /*      CALCULATE RANK OF TIED DATA POINTS                           */RANK 570\n /*                                                                   */RANK 580\n              ELSE P    =SMALL+(EQUAL+1.0)/2.0,.                        RANK 590\n                   DO J = 1 TO N,.                                      RANK 600\n                   IF R(J)= -1.0                                        RANK 610\n                   THEN R(J) =P,.                                       RANK 620\n                   END,.                                                RANK 630\n              END,.                                                     RANK 640\n         END,.                                                          RANK 650\n FIN..                                                                  RANK 660\n    RETURN,.                                                            RANK 670\n    END,.                              /*END OF PROCEDURE RANK        */RANK 680\n SRNK..                                                                 SRNK  10\n /*********************************************************************/SRNK  20\n /*                                                                   */SRNK  30\n /*      TO TEST CORRELATION BETWEEN TWO VARIABLES BY MEANS OF        */SRNK  40\n /*      SPEARMAN RANK CORRELATION COEFFICIENT.                       */SRNK  50\n /*                                                                   */SRNK  60\n /*********************************************************************/SRNK  70\n    PROCEDURE (A,B,R1,R2,N,RS,T,NDF,NR),.                               SRNK  80\n    DECLARE                                                             SRNK  90\n         (A(*),B(*),R1(*),R2(*),RS,T,D,X,Y,TSA,TSB,FNN)                 SRNK 100\n         BINARY FLOAT,                                                  SRNK 110\n         (KT,N,NDF,NR)                                                  SRNK 120\n         BINARY FIXED,                                                  SRNK 130\n         ERROR EXTERNAL CHARACTER (1),.                                 SRNK 140\n /*                                                                   */SRNK 150\n    FNN  =N*N*N-N,.                                                     SRNK 160\n    NDF  =0,.                                                           SRNK 170\n    T    =0.0,.                                                         SRNK 180\n    RS   =0.0,.                                                         SRNK 190\n    ERROR='0',.                                                         SRNK 200\n         DO I=1 TO N,.                                                  SRNK 210\n         R1(I)     =0,.                                                 SRNK 220\n         R2(I)     =0,.                                                 SRNK 230\n         END,.                                                          SRNK 240\n    IF N LE 1                          /* NUMBER OF OBSERVATIONS IS   */SRNK 250\n    THEN DO,.                          /*LESS THAN OR EQUAL TO ONE.   */SRNK 260\n         ERROR='1',.                                                    SRNK 270\n         GO TO FIN,.                                                    SRNK 280\n         END,.                                                          SRNK 290\n /*                                                                   */SRNK 300\n /*      DETERMINE WHETHER DATA IS RANKED.                            */SRNK 310\n /*                                                                   */SRNK 320\n    IF NR NE 1                                                          SRNK 330\n /*                                                                   */SRNK 340\n /*      RANK DATA IN A AND B VECTORS AND ASSIGN TIED OBSERVATIONS    */SRNK 350\n /*      AVERAGE OF TIED RANKS.                                       */SRNK 360\n /*                                                                   */SRNK 370\n    THEN DO,.                                                           SRNK 380\n         CALL RANK (A,R1,N),.                                           SRNK 390\n         CALL RANK (B,R2,N),.                                           SRNK 400\n         END,.                                                          SRNK 410\n    ELSE DO,.                                                           SRNK 420\n              DO I = 1 TO N,.          /* MOVE RANKED DATA            */SRNK 430\n              R1(I)=A(I),.                                              SRNK 440\n              R2(I)=B(I),.                                              SRNK 450\n              END,.                                                     SRNK 460\n         END,.                                                          SRNK 470\n /*                                                                   */SRNK 480\n /*      COMPUTE SUM OF SQUARES OF RANK DIFFERENCES.                  */SRNK 490\n /*                                                                   */SRNK 500\n    D    =0,.                                                           SRNK 510\n         DO I = 1 TO N,.                                                SRNK 520\n         D    =D+(R1(I)-R2(I))**2,.                                     SRNK 530\n         END,.                                                          SRNK 540\n    KT   =1,.                                                           SRNK 550\n    CALL TIE (R1,N,KT,TSA),.           /* COMPUTE TIED SCORE INDEX    */SRNK 560\n    IF ERROR='2'                       /* ALL RANKS FOR ONE VARIABLE  */SRNK 570\n    THEN                               /* ARE EQUAL                   */SRNK 580\n S10..                                                                  SRNK 590\n         DO,.                          /* ALL RANKS FOR ONE VARIABLE  */SRNK 600\n         ERROR='3',.                   /* ARE EQUAL                   */SRNK 610\n         GO TO FIN,.                                                    SRNK 620\n         END,.                                                          SRNK 630\n    CALL TIE (R2,N,KT,TSB),.                                            SRNK 640\n    IF ERROR='2'                                                        SRNK 650\n    THEN GO TO S10,.                                                    SRNK 660\n /*                                                                   */SRNK 670\n /*      COMPUTE SPEARMAN RANK CORRELATION COEFFICIENT                */SRNK 680\n /*                                                                   */SRNK 690\n    IF TSA NE 0 AND TSB NE 0                                            SRNK 700\n    THEN DO,.                                                           SRNK 710\n         X    =FNN/12.0-TSA,.                                           SRNK 720\n         Y    =X+TSA-TSB,.                                              SRNK 730\n         RS   =(X+Y-D)/(2.0*(SQRT(X*Y))),.                              SRNK 740\n         END,.                                                          SRNK 750\n    ELSE RS   =1.0-6.0*D/FNN,.                                          SRNK 760\n /*                                                                   */SRNK 770\n /*      COMPUTE T AND DEGREES OF FREEDOM IF N IS 10 OR LARGER        */SRNK 780\n /*                                                                   */SRNK 790\n    IF N GE 10                                                          SRNK 800\n    THEN DO,.                                                           SRNK 810\n         T    =RS*SQRT((N-2.0)/(1.0-RS*RS)),.                           SRNK 820\n         NDF  =N-2,.                                                    SRNK 830\n         END,.                                                          SRNK 840\n    ELSE ERROR='2',.                   /* SAMPLE SIZE LESS THAN 10    */SRNK 850\n FIN..                                                                  SRNK 860\n    RETURN,.                                                            SRNK 870\n    END,.                              /*END OF PROCEDURE SRNK        */SRNK 880\n TIE..                                                                  TIE   10\n /*********************************************************************/TIE   20\n /*                                                                   */TIE   30\n /*      TO CALCULATE CORRELATION FACTOR DUE TO TIES.                 */TIE   40\n /*                                                                   */TIE   50\n /*********************************************************************/TIE   60\n    PROCEDURE (R,N,KT,T),.                                              TIE   70\n    DECLARE                                                             TIE   80\n         (R(*),T,X,Y,CT)                                                TIE   90\n         BINARY FLOAT,                                                  TIE  100\n         ERROR EXTERNAL CHARACTER(1),                                   TIE  110\n         (I,IND,KT,N)                                                   TIE  120\n         BINARY FIXED,.                                                 TIE  130\n /*                                                                   */TIE  140\n    ERROR='0',.                                                         TIE  150\n    IF N LE 1                                                           TIE  160\n    THEN DO,.                          /* VECTOR LENGTH IS ONE OR LESS*/TIE  170\n         ERROR='1',.                                                    TIE  180\n         GO TO FIN,.                                                    TIE  190\n         END,.                                                          TIE  200\n    T    =0.0,.                        /* INITIALIZATION              */TIE  210\n    Y    =0.0,.                                                         TIE  220\n S10..                                                                  TIE  230\n    X    =N+1,.                                                         TIE  240\n    IND  =0,.                                                           TIE  250\n         DO I = 1 TO N,.               /* FIND NEXT LARGEST RANK      */TIE  260\n         IF R(I) GT Y AND R(I) LT X                                     TIE  270\n         THEN DO,.                                                      TIE  280\n              X    =R(I),.                                              TIE  290\n              IND  =IND+1,.                                             TIE  300\n              END,.                                                     TIE  310\n         END,.                                                          TIE  320\n /*                                                                   */TIE  330\n /*      IF ALL RANKS HAVE BEEN TESTED RETURN                         */TIE  340\n /*                                                                   */TIE  350\n    IF IND NE 0                                                         TIE  360\n    THEN DO,.                                                           TIE  370\n         Y    =X,.                                                      TIE  380\n         CT   =0.0,.                                                    TIE  390\n              DO I = 1 TO N,.          /* COUNT TIES                  */TIE  400\n              IF R(I)= X                                                TIE  410\n              THEN CT   =CT+1.0,.                                       TIE  420\n              END,.                                                     TIE  430\n         IF CT NE 0.0                                                   TIE  440\n         THEN DO,.                                                      TIE  450\n              IF KT= 1                                                  TIE  460\n              THEN T    =T+(CT*CT*CT-CT)/12.0,.                         TIE  470\n              ELSE T    =T+CT*(CT-1.0)/2.0,.                            TIE  480\n              END,.                                                     TIE  490\n         GO TO S10,.                                                    TIE  500\n         END,.                                                          TIE  510\n FIN..                                                                  TIE  520\n    IF CT=N                            /* ALL RANKS FOR ONE VARIABLE  */TIE  530\n    THEN ERROR='2',.                   /* ARE EQUAL                   */TIE  540\n    RETURN,.                                                            TIE  550\n    END,.                              /*END OF PROCEDURE TIE         */TIE  560\n TWAV..                                                                 TWAV  10\n /*********************************************************************/TWAV  20\n /*                                                                   */TWAV  30\n /*      TO TEST WHETHER A NUMBER OF SAMPLES ARE FROM THE SAME        */TWAV  40\n /*      POPULATION BY THE FRIEDMAN TWO-WAY ANALYSIS OF VARIANCE      */TWAV  50\n /*      TEST.                                                        */TWAV  60\n /*                                                                   */TWAV  70\n /*********************************************************************/TWAV  80\n    PROCEDURE (A,R,N,M,XR,NDF,NR),.                                     TWAV  90\n    DECLARE                                                             TWAV 100\n         ERROR EXTERNAL CHARACTER (1),                                  TWAV 110\n         (A(*,*),R(*,*),WA(M),WB(M),XR,FM,FNM,RTSQ)                     TWAV 120\n         BINARY FLOAT,                                                  TWAV 130\n         (I,NR,N,M,NDF)                                                 TWAV 140\n         BINARY FIXED,.                                                 TWAV 150\n /*                                                                   */TWAV 160\n    ERROR='0',.                                                         TWAV 170\n    XR   =0.0,.                                                         TWAV 180\n    NDF  =0,.                                                           TWAV 190\n    IF M LT 3 OR N LE 1                /* THE NUMBER OF CASES IS LESS */TWAV 200\n    THEN DO,.                          /* THAN 3 OR THE NUMBER OF     */TWAV 210\n         ERROR='1',.                   /* GROUPS IS LESS THAN OR EQUAL*/TWAV 220\n         GO TO FIN,.                   /* TO ONE                      */TWAV 230\n         END,.                                                          TWAV 240\n    FM   =M,.                                                           TWAV 250\n    FNM  =N*(M+1),.                                                     TWAV 260\n    IF NR NE 1                                                          TWAV 270\n    THEN DO,.                                                           TWAV 280\n /*                                                                   */TWAV 290\n /*      RANK DATA IN EACH GROUP AND ASSIGN TIED OBSERVATIONS         */TWAV 300\n /*      AVERAGE OF TIED RANK.                                        */TWAV 310\n /*                                                                   */TWAV 320\n              DO I = 1 TO N,.                                           TWAV 330\n                   DO J = 1 TO M,.                                      TWAV 340\n                   WA(J)=A(I,J),.                                       TWAV 350\n                   END,.                                                TWAV 360\n              CALL RANK (WA,WB,M),.                                     TWAV 370\n                   DO J = 1 TO M,.                                      TWAV 380\n                   R(I,J)=WB(J),.                                       TWAV 390\n                   END,.                                                TWAV 400\n              END,.                                                     TWAV 410\n         END,.                                                          TWAV 420\n    ELSE DO,.                                                           TWAV 430\n              DO I = 1 TO N,.                                           TWAV 440\n                   DO J = 1 TO M,.                                      TWAV 450\n                   R(I,J)=A(I,J),.                                      TWAV 460\n                   END,.                                                TWAV 470\n              END,.                                                     TWAV 480\n         END,.                                                          TWAV 490\n /*                                                                   */TWAV 500\n /*      CALCULATE SUM OF SQUARES OF SUMS OF RANKS                    */TWAV 510\n /*                                                                   */TWAV 520\n    RTSQ =0.0,.                                                         TWAV 530\n         DO I = 1 TO M,.                                                TWAV 540\n         WA(I)=0.0,.                                                    TWAV 550\n              DO J = 1 TO N,.                                           TWAV 560\n              WA(I)=WA(I)+R(J,I),.                                      TWAV 570\n              END,.                                                     TWAV 580\n         RTSQ =RTSQ+WA(I)*WA(I),.                                       TWAV 590\n         END,.                                                          TWAV 600\n /*                                                                   */TWAV 610\n /*      CALCULATE FRIEDMAN TEST VALUE, XR, AND DEGREES OF FREEDOM    */TWAV 620\n /*                                                                   */TWAV 630\n    XR   =(12.0/(FM*FNM))*RTSQ-3.0*FNM,.                                TWAV 640\n    NDF  =M-1,.                                                         TWAV 650\n FIN..                                                                  TWAV 660\n    RETURN,.                                                            TWAV 670\n    END,.                              /*END OF PROCEDURE TWAV        */TWAV 680\n UTST..                                                                 UTST  10\n /*********************************************************************/UTST  20\n /*                                                                   */UTST  30\n /*      TO TEST WHETHER TWO INDEPENDENT GROUPS ARE FROM THE SAME     */UTST  40\n /*      POPULATION BY MEANS OF A MANN-WHITNEY U-TEST.                */UTST  50\n /*                                                                   */UTST  60\n /*********************************************************************/UTST  70\n    PROCEDURE (A,R,N1,N2,U,Z),.                                         UTST  80\n    DECLARE                                                             UTST  90\n         ERROR EXTERNAL CHARACTER (1),                                  UTST 100\n         (A(*),R(*),U,Z,R2,UP,TS,S,FN,FN2,FNX)                          UTST 110\n         BINARY FLOAT,                                                  UTST 120\n         (I,KT,N,N1,N2)                                                 UTST 130\n         BINARY FIXED,.                                                 UTST 140\n /*                                                                   */UTST 150\n    ERROR='0',.                                                         UTST 160\n /*                                                                   */UTST 170\n /*      RANK SCORES FROM BOTH GROUPS TOGETHER IN ASCENDING ORDER,    */UTST 180\n /*      AND ASSIGN TIED OBSERVATIONS AVERAGE OF TIED RANKS           */UTST 190\n /*                                                                   */UTST 200\n    N    =N1+N2,.                                                       UTST 210\n         DO I=1 TO N,.                                                  UTST 220\n         R(I) =0,.                                                      UTST 230\n         END,.                                                          UTST 240\n    U    =0.0,.                                                         UTST 250\n    Z    =0.0,.                                                         UTST 260\n    IF N1 GT N2                                                         UTST 270\n    THEN DO,.                                                           UTST 280\n         ERROR='1',.                   /* N1 IS GREATER THAN N2       */UTST 290\n         GO TO FIN,.                                                    UTST 300\n         END,.                                                          UTST 310\n    IF N LE 2                                                           UTST 320\n    THEN DO,.                          /* COMBINED SAMPLE LESS THAN OR*/UTST 330\n         ERROR='2',.                   /* EQUAL TO TWO.               */UTST 340\n         GO TO FIN,.                                                    UTST 350\n         END,.                                                          UTST 360\n    CALL RANK (A,R,N),.                                                 UTST 370\n    IF N1 LE 1 OR N2 LE 1                                               UTST 380\n    THEN DO,.                                                           UTST 390\n         ERROR='2',.                                                    UTST 400\n         GO TO FIN,.                                                    UTST 410\n         END,.                                                          UTST 420\n    R2   =0.0,.                        /* SUM RANKS IN LARGE GROUP    */UTST 430\n         DO I = N1+1 TO N,.                                             UTST 440\n         R2   =R2+R(I),.                                                UTST 450\n         END,.                                                          UTST 460\n    FNX  =N1*N2,.                                                       UTST 470\n    FN   =N,.                                                           UTST 480\n    FN2  =N2,.                                                          UTST 490\n    UP   =FNX+FN2*((FN2+1.0)/2.0)-R2,. /* CALCULATE U                 */UTST 500\n    U    =FNX-UP,.                                                      UTST 510\n    IF UP LT U                                                          UTST 520\n    THEN U    =UP,.                                                     UTST 530\n    IF N1 GE 10                        /* TEST FOR N1 LESS THAN 10    */UTST 540\n    THEN DO,.                                                           UTST 550\n         KT   =1,.                                                      UTST 560\n         CALL TIE (R,N,KT,TS),.        /* COMPUTE STANDARD DEVIATION  */UTST 570\n         IF ERROR='2'                                                   UTST 580\n         THEN DO,.                     /* ALL RANKS FOR ONE VARIABLE  */UTST 590\n              ERROR='4',.              /* ARE EQUAL                   */UTST 600\n              GO TO FIN,.                                               UTST 610\n              END,.                                                     UTST 620\n         IF TS NE 0                                                     UTST 630\n         THEN S    =SQRT((FNX/(FN*(FN-1.0)))*(((FN*FN*FN-FN)/12.)-TS)),.UTST 640\n         ELSE S    =SQRT(FNX*(FN+1.0)/12.0),.                           UTST 650\n         Z    =(U-FNX*0.5)/S,.                                          UTST 660\n         END,.                                                          UTST 670\n    ELSE ERROR='3',.                   /* NUMBER OF CASES IN THE      */UTST 680\n FIN..                                 /* SMALLER GROUP IS LESS THAN  */UTST 690\n    RETURN,.                           /* TEN                         */UTST 700\n    END,.                              /*END OF PROCEDURE UTST        */UTST 710\n WTST..                                                                 WTST  10\n /*********************************************************************/WTST  20\n /*                                                                   */WTST  30\n /*      TO TEST DEGREE OF ASSOCIATION AMONG A NUMBER OF VARIABLES    */WTST  40\n /*      BY THE KENDALL COEFFICIENT OF CONCORDANCE.                   */WTST  50\n /*                                                                   */WTST  60\n /*********************************************************************/WTST  70\n    PROCEDURE (A,R,N,M,W,CS,NDF,NR),.                                   WTST  80\n    DECLARE                                                             WTST  90\n         ERROR EXTERNAL CHARACTER (1),                                  WTST 100\n         (A(*,*),R(*,*),WA(M),WB(M),W,CS,SM,S,TI,T,FN,FM)               WTST 110\n         BINARY FLOAT,                                                  WTST 120\n         (I,J,KT,M,N,NDF,NR)                                            WTST 130\n         BINARY FIXED,.                                                 WTST 140\n /*                                                                   */WTST 150\n    ERROR='0',.                                                         WTST 160\n         DO I=1 TO N,.                                                  WTST 170\n              DO J=1 TO M,.                                             WTST 180\n              R(I,J)    =0,.                                            WTST 190\n              END,.                                                     WTST 200\n         END,.                                                          WTST 210\n    W    =0.0,.                                                         WTST 220\n    CS   =0.0,.                                                         WTST 230\n    NDF  =0,.                                                           WTST 240\n    IF N LT 3 OR M LT 3                                                 WTST 250\n    THEN DO,.                                                           WTST 260\n         ERROR='1',.                   /* NUMBER OF VARIABLES (N) OR  */WTST 270\n         GO TO FIN,.                   /* NUMBER OF CASES (M) IS LESS */WTST 280\n         END,.                         /* THAN 3                      */WTST 290\n /*                                                                   */WTST 300\n /*      DETERMINE WHETHER DATA IS RANKED. IF IT HAS NOT BEEN DONE    */WTST 310\n /*      RANK DATA FOR ALL VARIABLES ASSIGNING TIED OBSERVATIONS      */WTST 320\n /*      AVERAGE OF TIED RANKS AND COMPUTE CORRECTION FOR TIED SCORES */WTST 330\n /*                                                                   */WTST 340\n    T    =0,.                                                           WTST 350\n    KT   =1,.                                                           WTST 360\n         DO I = 1 TO N,.                                                WTST 370\n         IF NR NE 1                                                     WTST 380\n         THEN DO,.                                                      WTST 390\n                   DO J = 1 TO M,.                                      WTST 400\n                   WA(J)=A(I,J),.                                       WTST 410\n                   END,.                                                WTST 420\n              CALL RANK (WA,WB,M),.                                     WTST 430\n              END,.                                                     WTST 440\n         ELSE DO,.                                                      WTST 450\n                   DO J = 1 TO M,.                                      WTST 460\n                   WB(J)=A(I,J),.                                       WTST 470\n                   END,.                                                WTST 480\n              END,.                                                     WTST 490\n         CALL TIE (WB,M,KT,TI),.                                        WTST 500\n         IF ERROR='2'                                                   WTST 510\n         THEN DO,.                                                      WTST 520\n              ERROR='3',.              /* ALL RANKS FOR ONE VARIABLE  */WTST 530\n              GO TO FIN,.              /* ARE EQUAL                   */WTST 540\n              END,.                                                     WTST 550\n         T    =T+TI,.                                                   WTST 560\n              DO J = 1 TO M,.                                           WTST 570\n              R(I,J)=WB(J),.                                            WTST 580\n              END,.                                                     WTST 590\n         END,.                                                          WTST 600\n    FN   =N,.                                                           WTST 610\n    FM   =M,.                                                           WTST 620\n    SM   =0.0,.                                                         WTST 630\n /*                                                                   */WTST 640\n /*      CALCULATE VECTOR SUMS AND COMPUTE MEANS OF SUMS              */WTST 650\n /*                                                                   */WTST 660\n         DO J = 1 TO M,.                                                WTST 670\n         WA(J)=0.0,.                                                    WTST 680\n              DO I = 1 TO N,.                                           WTST 690\n              WA(J)=WA(J)+R(I,J),.                                      WTST 700\n              END,.                                                     WTST 710\n         SM   =SM+WA(J),.                                               WTST 720\n         END,.                                                          WTST 730\n    SM   =SM/FM,.                                                       WTST 740\n /*                                                                   */WTST 750\n /*      COMPUTE THE SUM OF SQUARES OF DEVIATION                      */WTST 760\n /*                                                                   */WTST 770\n    S    =0,.                                                           WTST 780\n         DO J = 1 TO M,.                                                WTST 790\n         S    =S+(WA(J)-SM)**2,.                                        WTST 800\n         END,.                                                          WTST 810\n    W    =S/(((FN*FN)*(FM*FM*FM-FM)/12.0)-FN*T),.                       WTST 820\n /*                                                                   */WTST 830\n /*      COMPUTE DEGREES OF FREEDOM AND CHI-SQUARE IF M IS OVER 7     */WTST 840\n /*                                                                   */WTST 850\n    IF M GT 7                                                           WTST 860\n    THEN DO,.                                                           WTST 870\n         CS   =FN*(FM-1.0)*W,.                                          WTST 880\n         NDF  =M-1,.                                                    WTST 890\n         END,.                                                          WTST 900\n    ELSE ERROR='2',.                   /* NUMBER OF CASES (M) IS LESS */WTST 910\n /*                                    /* THAN OR EQUAL TO 7          */WTST 920\n FIN..                                                                  WTST 930\n    RETURN,.                                                            WTST 940\n    END,.                              /*END OF PROCEDURE WTST        */WTST 950\n HTES..                                                                 HTES  10\n /*********************************************************************/HTES  20\n /*                                                                   */HTES  30\n /*      TO CALCULATE THE KRUSKAL-WALLIS H-STATISTIC FROM THE RANKS   */HTES  40\n /*      OF OBSERVATIONS WHICH ARE OBTAINED FROM THREE OR MORE INDE-  */HTES  50\n /*      PENDENT SAMPLES.                                             */HTES  60\n /*                                                                   */HTES  70\n /*********************************************************************/HTES  80\n    PROCEDURE (A,R,M,NS,H),.                                            HTES  90\n    DECLARE                                                             HTES 100\n         (A(*),R(*),H,S,SUMR,T,XK,XN)                                   HTES 110\n         BINARY FLOAT,                                                  HTES 120\n         (M(*),I,J,K,L,N,NS)                                            HTES 130\n         BINARY FIXED,                                                  HTES 140\n         ERROR EXTERNAL CHARACTER (1),.                                 HTES 150\n /*                                                                   */HTES 160\n         ERROR='0',.                   /* INITIALIZATION              */HTES 170\n    H    =0.0,.                                                         HTES 180\n    IF NS LT 3                                                          HTES 190\n    THEN ERROR='1',.                   /* SET ERROR INDICATOR         */HTES 200\n    ELSE DO,.                                                           HTES 210\n         N    =0,.                                                      HTES 220\n              DO I = 1 TO NS,.         /* CALCULATE TOTAL NUMBER OF   */HTES 230\n              IF M(I) LE 0             /* CASES IN ALL SAMPLES        */HTES 240\n              THEN DO,.                                                 HTES 250\n                   ERROR='3',.                                          HTES 260\n                   GO TO S10,.                                          HTES 270\n                   END,.                                                HTES 280\n              N    =N+M(I),.                                            HTES 290\n              END,.                                                     HTES 300\n         XN   =N,.                                                      HTES 310\n /*                                                                   */HTES 320\n /*      RANK DATA FROM ALL SAMPLES IN ASCENDING ORDER AND ASSIGN     */HTES 330\n /*      TIED OBSERVATIONS AVERAGE OF TIED RANKS                      */HTES 340\n /*                                                                   */HTES 350\n         CALL RANK (A,R,N),.                                            HTES 360\n /*                                                                   */HTES 370\n         S    =0,.                                                      HTES 380\n         J    =0,.                                                      HTES 390\n              DO I = 1 TO NS,.                                          HTES 400\n              K    =M(I),.                                              HTES 410\n              XK   =K,.                                                 HTES 420\n              SUMR =0.0,.                                               HTES 430\n                   DO L = 1 TO K,.     /* SUM RANKS FOR EACH SAMPLE   */HTES 440\n                   J    =J+1,.                                          HTES 450\n                   SUMR =SUMR+R(J),.                                    HTES 460\n                   END,.                                                HTES 470\n              S    =S+SUMR*SUMR/XK,.                                    HTES 480\n              END,.                                                     HTES 490\n /*                                                                   */HTES 500\n /*      CALCULATE H, UNCORRECTED FOR TIES                            */HTES 510\n /*                                                                   */HTES 520\n         H    =((12.0*S)/(XN*XN+XN))-3.0*(XN+1),.                       HTES 530\n /*                                                                   */HTES 540\n /*      COMPUTE CORRECTION FACTOR FOR TIES                           */HTES 550\n /*                                                                   */HTES 560\n         K    =1,.                                                      HTES 570\n         CALL TIE (R,N,K,T),.                                           HTES 580\n         IF T = 0.0 OR ERROR='2'                                        HTES 590\n         THEN GO TO S10,.                                               HTES 600\n         ELSE DO,.                                                      HTES 610\n              S    =1.0-((12.0*T)/(XN**3-XN)),.                         HTES 620\n /*                                                                   */HTES 630\n /*      CORRECT H FOR TIES                                           */HTES 640\n /*                                                                   */HTES 650\n              H   =H/S,.                                                HTES 660\n              END,.                                                     HTES 670\n         END,.                                                          HTES 680\n S10..                                                                  HTES 690\n    RETURN,.                                                            HTES 700\n    END,.                              /*END OF PROCEDURE HTES        */HTES 710\n NDTR..                                                                 NDTR  10\n /*********************************************************************/NDTR  20\n /*                                                                   */NDTR  30\n /*      COMPUTES Y=P(X)=THE PROBABILITY THAT THE RANDOM VARIABLE U,  */NDTR  40\n /*      DISTRIBUTED NORMALLY (0,1) IS LESS THAN OR EQUAL TO X.  F(X),*/NDTR  50\n /*      THE ORDINATE OF THE NORMAL DENSITY AT X, IS ALSO COMPUTED.   */NDTR  60\n /*                                                                   */NDTR  70\n /*********************************************************************/NDTR  80\n    PROCEDURE (X,P,D),.                                                 NDTR  90\n    DECLARE                                                             NDTR 100\n         (D,T,P,X,AX) FLOAT BINARY,.                                    NDTR 110\n    AX   =ABS(X),.                     /* CALC. PROB. P & DENSITY D   */NDTR 120\n    T    =1.0E0/(1.0E0+.2316419E0*AX),.                                 NDTR 130\n    D    =0.3989423E0*EXP(-X*X/2.0E0),.                                 NDTR 140\n    P    =1.0E0-D*T*((((1.330274E0*T-1.821256E0)*T+1.781478E0)*T-       NDTR 150\n          0.3565638)*T+0.3193815E0),.                                   NDTR 160\n    IF X LT 0                          /* X < 0                       */NDTR 170\n    THEN P=1.0E0-P,.                   /* COMPLEMENT PROB. P          */NDTR 180\n    RETURN,.                                                            NDTR 190\n    END,.                              /* END OF PROCEDURE NDTR       */NDTR 200\n BDTR..                                                                 BDTR  10\n /*********************************************************************/BDTR  20\n /*                                                                   */BDTR  30\n /*      BDTR COMPUTES P(X) = PROBABILITY THAT THE RANDOM VARIABLE    */BDTR  40\n /*      DISTRIBUTED ACCORDING TO THE BETA DISTRIBUTION WITH PARA-    */BDTR  50\n /*      METERS A AND B, IS LESS THAN OR EQUAL TO X. F(A,B,X), THE    */BDTR  60\n /*      ORDINATE OF THE BETA DENSITY AT X, IS ALSO COMPUTED.         */BDTR  70\n /*                                                                   */BDTR  80\n /*********************************************************************/BDTR  90\n    PROCEDURE (X,A,B,P,D),.                                             BDTR 100\n    DECLARE                                                             BDTR 110\n         (XX,DLXX,DL1X,AA,BB,G1,G2,G3,G4,DD,PP,XO,FF,FN,XI,SS,CC,       BDTR 120\n         RR,DLBETA) BINARY(53),                                         BDTR 130\n         (X,A,B,P,D,XS,DF,DUMMY) BINARY,                                BDTR 140\n         ID BINARY FIXED,                                               BDTR 150\n         ERROR EXTERNAL CHARACTER(1),.                                  BDTR 160\n    ERROR='0',.                                                         BDTR 165\n    IF X LT 0  OR X GT 1               /* TEST THE VALUE OF X         */BDTR 170\n    THEN DO,.                                                           BDTR 180\n         ERROR='1',.                                                    BDTR 190\n         GO TO S10,.                                                    BDTR 200\n         END,.                                                          BDTR 210\n    IF A LT .49999  OR B LT .49999     /* TEST THE VALUES OF A AND B  */BDTR 220\n    OR A GT 1E+5    OR B GT 1E+5                                        BDTR 230\n    THEN DO,.                                                           BDTR 240\n         ERROR='2',.                                                    BDTR 250\n S10..                                                                  BDTR 260\n         D,P  =-1E+75,.                                                 BDTR 270\n         GO TO S110,.                                                   BDTR 280\n         END,.                                                          BDTR 290\n    AA   =A,.                          /* COMPUTE LOG(BETA(A,B))      */BDTR 300\n    BB   =B,.                                                           BDTR 310\n    CALL LGAM(AA,G1),.                                                  BDTR 320\n    CALL LGAM(BB,G2),.                                                  BDTR 330\n    CALL LGAM(AA+BB,G3),.                                               BDTR 340\n    DLBETA=G1+G2-G3,.                                                   BDTR 350\n    IF X LE 1E-8                       /* TEST FOR X NEAR 0.0         */BDTR 360\n    THEN DO,.                                                           BDTR 370\n         P    =0,.                                                      BDTR 380\n         IF A LT 1                                                      BDTR 390\n         THEN                                                           BDTR 400\n S20..                                                                  BDTR 410\n              DO,.                                                      BDTR 420\n              D    =1E+75,.                                             BDTR 430\n              GO TO S110,.                                              BDTR 440\n              END,.                                                     BDTR 450\n         ELSE IF A = 1                                                  BDTR 460\n              THEN                                                      BDTR 470\n S30..                                                                  BDTR 480\n                   DO,.                                                 BDTR 490\n                   DD   =-DLBETA,.                                      BDTR 500\n                   IF DD GT -1.68E+2                                    BDTR 510\n                   THEN DO,.                                            BDTR 520\n                        D    =EXP(DD),.                                 BDTR 530\n                        GO TO S110,.                                    BDTR 540\n                        END,.                                           BDTR 550\n                   ELSE GO TO S40,.                                     BDTR 560\n                   END,.                                                BDTR 570\n              ELSE                                                      BDTR 580\n S40..                                                                  BDTR 590\n                   DO,.                                                 BDTR 600\n                   D    =0,.                                            BDTR 610\n                   GO TO S110,.                                         BDTR 620\n                   END,.                                                BDTR 630\n         END,.                                                          BDTR 640\n    IF 1-X LE 1E-8                     /* TEST FOR X NEAR 1.0         */BDTR 650\n    THEN DO,.                                                           BDTR 660\n         P    =1,.                                                      BDTR 670\n         IF B LT 1                                                      BDTR 680\n         THEN GO TO S20,.                                               BDTR 690\n         ELSE IF B=1                                                    BDTR 700\n              THEN GO TO S30,.                                          BDTR 710\n              ELSE GO TO S40,.                                          BDTR 720\n         END,.                                                          BDTR 730\n    XX   =X,.                          /* SET PROGRAM PARAMETERS      */BDTR 740\n    DLXX =LOG(XX),.                                                     BDTR 750\n    DL1X =LOG(1-XX),.                                                   BDTR 760\n    XO   =XX/(1-XX),.                                                   BDTR 770\n    ID   =0,.                                                           BDTR 780\n    DD   =(AA-1)*DLXX+(BB-1)*DL1X-DLBETA,.  /* COMPUTE ORDINATE       */BDTR 790\n    IF DD GT 1.68E+2                                                    BDTR 800\n    THEN DO,.                                                           BDTR 810\n         D    =1E+75,.                                                  BDTR 820\n         GO TO S50,.                                                    BDTR 830\n         END,.                                                          BDTR 840\n    ELSE IF DD LE -1.68E+2                                              BDTR 850\n         THEN DO,.                                                      BDTR 860\n              D    =0,.                                                 BDTR 870\n              GO TO S50,.                                               BDTR 880\n              END,.                                                     BDTR 890\n    D    =EXP(DD),.                                                     BDTR 900\n S50..                                                                  BDTR 910\n    IF ABS(A-1) LE 1E-8                /* A OR B BOTH WITHIN 1E-8 OF 1*/BDTR 920\n    THEN IF ABS(B-1) LE 1E-8                                            BDTR 930\n         THEN DO,.                                                      BDTR 940\n              P    =X,.                                                 BDTR 950\n              GO TO S110,.                                              BDTR 960\n              END,.                                                     BDTR 970\n         ELSE DO,.                                                      BDTR 980\n              PP   =BB*DL1X,.                                           BDTR 990\n              IF PP LE 1.68E+2                                          BDTR1000\n              THEN DO,.                                                 BDTR1010\n                   P    =1,.                                            BDTR1020\n                   GO TO S110,.                                         BDTR1030\n                   END,.                                                BDTR1040\n              ELSE DO,.                                                 BDTR1050\n                   P    =1-EXP(PP),.                                    BDTR1060\n                   GO TO S100,.                                         BDTR1070\n                   END,.                                                BDTR1080\n              END,.                                                     BDTR1090\n    IF ABS(B-1) LE 1E-8                                                 BDTR1100\n    THEN DO,.                                                           BDTR1110\n         PP   =AA*DLXX,.                                                BDTR1120\n         IF PP LE -1.68E+2                                              BDTR1130\n         THEN DO,.                                                      BDTR1140\n              P    =0,.                                                 BDTR1150\n              GO TO S110,.                                              BDTR1160\n              END,.                                                     BDTR1170\n         ELSE DO,.                                                      BDTR1180\n              P    =EXP(PP),.                                           BDTR1190\n              GO TO S100,.                                              BDTR1200\n              END,.                                                     BDTR1210\n         END,.                                                          BDTR1220\n    IF A GT 1000                       /* TEST FOR A OR B GREATER     */BDTR1230\n    THEN DO,.                          /*        THAN 1000            */BDTR1240\n         XS   =2*AA/XO,.                                                BDTR1250\n         DF   =2*BB,.                                                   BDTR1260\n         CALL CDTR(XS,DF,P,DUMMY),.                                     BDTR1270\n         P    =1-P,.                                                    BDTR1280\n         GO TO S110,.                                                   BDTR1290\n         END,.                                                          BDTR1300\n    IF B GT 1000                                                        BDTR1310\n    THEN DO,.                                                           BDTR1320\n         XS   =2*BB*XO,.                                                BDTR1330\n         DF   =2*AA,.                                                   BDTR1340\n         CALL CDTR(XS,DF,P,DUMMY),.                                     BDTR1350\n         GO TO S110,.                                                   BDTR1360\n         END,.                                                          BDTR1370\n    IF X LE .5                         /* SELECT PARAMETERS FOR CON-  */BDTR1380\n    THEN IF AA LE 1                    /* TINUED FRACTION COMPUTATION */BDTR1390\n         THEN DO,.                                                      BDTR1400\n              RR   =AA+1,.                                              BDTR1410\n              GO TO S60,.                                               BDTR1420\n              END,.                                                     BDTR1430\n         ELSE DO,.                                                      BDTR1440\n              RR   =AA,.                                                BDTR1450\n S60..                                                                  BDTR1460\n              DD   =(RR-1)-(RR+BB-1)*XX*EXP(DLXX/5)+2,.                 BDTR1470\n              IF DD LE 0                                                BDTR1480\n              THEN GO TO S70,.                                          BDTR1490\n              ELSE GO TO S80,.                                          BDTR1500\n              END,.                                                     BDTR1510\n    IF BB GT 1                                                          BDTR1520\n    THEN RR=BB,.                                                        BDTR1530\n    ELSE RR=BB+1,.                                                      BDTR1540\n    DD   =(RR-1)-(AA+RR-1)*(1-XX)*EXP(DL1X/5)+2,.                       BDTR1590\n    IF DD LE 0                                                          BDTR1600\n    THEN GO TO S80,.                                                    BDTR1610\n S70..                                                                  BDTR1620\n    ID   =1,.                                                           BDTR1630\n    FF   =DL1X,.                                                        BDTR1640\n    DL1X =DLXX,.                                                        BDTR1650\n    DLXX =FF,.                                                          BDTR1660\n    XO   =1/XO,.                                                        BDTR1670\n    FF   =AA,.                                                          BDTR1680\n    AA   =BB,.                                                          BDTR1690\n    BB   =FF,.                                                          BDTR1700\n    G2   =G1,.                                                          BDTR1710\n S80..                                                                  BDTR1720\n    FF   =0,.                                                           BDTR1730\n    IF AA LE 1                         /* TEST FOR A LESS THAN 1      */BDTR1740\n    THEN DO,.                                                           BDTR1750\n         CALL LGAM(AA+1,G4),.                                           BDTR1760\n         DD   =AA*DLXX+BB*DL1X+G3-G2-G4,.                               BDTR1770\n         IF DD GT -1.68E+2                                              BDTR1780\n         THEN FF=FF+EXP(DD),.                                           BDTR1790\n         AA   =AA+1,.                                                   BDTR1800\n         END,.                                                          BDTR1810\n    FN   =AA+BB-1,.                    /* COMPUTE P USING CONTINUED   */BDTR1820\n    RR   =AA-1,.                       /* FRACTION EXPANSION          */BDTR1830\n    SS   =(((BB-80)*(RR+80))/((RR+2*80-1)*(RR+2*80)))*XO,.              BDTR1840\n         DO XI=79 TO 1 BY -1,.                                          BDTR1850\n         DD   =((XI*(FN+XI))/((RR+2*XI+1)*(RR+2*XI)))*XO,.              BDTR1860\n         CC   =(((BB-XI)*(RR+XI))/((RR+2*XI-1)*(RR+2*XI)))*XO,.         BDTR1870\n         SS   =CC/(1+DD/(1-SS)),.                                       BDTR1880\n         END,.                                                          BDTR1890\n    SS   =1/(1-SS),.                                                    BDTR1900\n    IF SS LE 0                                                          BDTR1910\n    THEN GO TO S90,.                                                    BDTR1920\n    CALL LGAM(AA+BB,G1),.                                               BDTR1930\n    CALL LGAM(AA+1,G4),.                                                BDTR1940\n    PP   =G1-G2-G4+AA*DLXX+(BB-1)*DL1X+LOG(SS),.                        BDTR1950\n    IF PP GT -1.68E+2                                                   BDTR1960\n    THEN PP=EXP(PP)+FF,.                                                BDTR1970\n    ELSE PP=FF,.                                                        BDTR1980\n    IF ID GT 0                                                          BDTR2030\n    THEN PP=1-PP,.                                                      BDTR2040\n    P    =PP,.                                                          BDTR2050\n    IF P LT 0                          /* SET ERROR INDICATOR         */BDTR2060\n    THEN IF ABS(P) GT 1E-7                                              BDTR2070\n         THEN GO TO S90,.                                               BDTR2080\n         ELSE P=0,.                                                     BDTR2090\n    ELSE IF P GT 1                                                      BDTR2130\n         THEN IF ABS(1-P) GT 1E-7                                       BDTR2140\n              THEN                                                      BDTR2150\n S90..                                                                  BDTR2160\n                   DO,.                                                 BDTR2170\n                   ERROR='3',.                                          BDTR2180\n                   P    =+1E+75,.                                       BDTR2190\n                   GO TO S110,.                                         BDTR2200\n                   END,.                                                BDTR2210\n              ELSE P=1,.                                                BDTR2220\n         ELSE                                                           BDTR2260\n S100..                                                                 BDTR2270\n              IF P LE 1E-8                                              BDTR2280\n              THEN P=0,.                                                BDTR2290\n              ELSE IF 1-P LE 1E-8                                       BDTR2330\n                   THEN P=1,.                                           BDTR2340\n S110..                                                                 BDTR2370\n    RETURN,.                                                            BDTR2380\n    END,.                              /* END OF PROCEDURE BDTR       */BDTR2390\n CDTR..                                                                 CDTR  10\n /*********************************************************************/CDTR  20\n /*                                                                   */CDTR  30\n /*      COMPUTES P(X)=PROBABILITY THAT THE RANDOM VARIABLE U,        */CDTR  40\n /*      DISTRIBUTED ACCORDING TO THE CHI-SQUARE DISTRIBUTION WITH G  */CDTR  50\n /*      DEGREES OF FREEDOM, IS LESS THAN OR EQUAL TO X. F(G,X), THE  */CDTR  60\n /*      ORDINATE OF THE CHI-SQUARE DENSITY AT X, IS ALSO COMPUTED    */CDTR  70\n /*                                                                   */CDTR  80\n /*********************************************************************/CDTR  90\n    PROCEDURE(X,G,P,D),.                                                CDTR 100\n    DECLARE                                                             CDTR 110\n         (XX,DLXX,DLX2,GG,G2,DLT3,THETA,THP1,GLG2,DD,T11,SER,CC,X2,XI,  CDTR 120\n         FAC,TLOG,TERM,GTH,A2,A,B,C,DT2,DT3,THPI)                       CDTR 130\n         FLOAT BINARY(53),                                              CDTR 140\n         (I,J,K,I3,IT1)                                                 CDTR 150\n         FIXED BINARY,                                                  CDTR 160\n         ERROR EXTERNAL CHARACTER(1),                                   CDTR 170\n         (X,G,D,SC,P,T1,T2,T3,DUMMY)                                    CDTR 180\n         FLOAT BINARY,.                                                 CDTR 190\n    ERROR='0',.                                                         CDTR 200\n    D,P  =0,.                                                           CDTR 210\n    IF G LT .49999 OR G GT 2.E+5 OR X LT 0                              CDTR 220\n    THEN DO,.                          /* TEST INPUT VALIDITY         */CDTR 230\n         D,P  =-1.E75,.                /* SET ERROR INDICATOR         */CDTR 240\n         ERROR='1',.                                                    CDTR 250\n         END,.                                                          CDTR 260\n    ELSE IF X LE 1.E-8                 /* TEST FOR X NEAR ZERO        */CDTR 270\n         THEN IF G LT 2.0              /* SET P AND D DEPENDING ON    */CDTR 280\n              THEN D=1.E75,.           /* THE PARAMETER G             */CDTR 290\n              ELSE IF G=2.0                                             CDTR 300\n                   THEN D=0.5,.                                         CDTR 310\n                   ELSE,.                                               CDTR 320\n         ELSE IF X GT 1.E6             /* TEST FOR X GT 1.E6          */CDTR 330\n              THEN P=1.0,.             /* SET P AND D                 */CDTR 340\n              ELSE DO,.                /* SET PROGRAM PARAMETERS      */CDTR 350\n                   XX   =PRECISION(X,53),.                              CDTR 360\n                   DLXX =LOG(XX),.                                      CDTR 370\n                   X2   =.5*XX,.                                        CDTR 380\n                   DLX2 =LOG(X2),.                                      CDTR 390\n                   GG   =PRECISION(G,53),.                              CDTR 400\n                   G2   =.5*GG,.                                        CDTR 410\n                   CALL LGAM(G2,GLG2),. /* COMPUTE THE ORDINATE       */CDTR 420\n                   DD   =(G2-1.E0)*DLXX-X2-G2*.693147180559945E0-GLG2,. CDTR 430\n                   IF DD LE 1.68E2                                      CDTR 440\n                   THEN IF (DD+1.68E2) LE 0                             CDTR 450\n                        THEN           /* TEST FOR G GT 1000 AND      */CDTR 460\n S10..                                 /* X GT 2000                   */CDTR 470\n                             IF G LE 1000                               CDTR 480\n                             THEN IF X GT 2000                          CDTR 490\n                                  THEN P=1,.                            CDTR 500\n                                  ELSE DO,. /* COMPUTE THETA          */CDTR 510\n                                       K    =FLOOR(G2),.                CDTR 520\n                                       THETA=G2-FLOAT(K,53),.           CDTR 530\n                                       GO TO S40,.                      CDTR 540\n                                       END,.                            CDTR 550\n                             ELSE DO,. /* WILSON HILFERTY APPROX.     */CDTR 560\n                                  A    =LOG(XX/GG)/3.E0,.               CDTR 570\n                                  A    =EXP(A),.                        CDTR 580\n                                  B    =2.E0/(9.E0*GG),.                CDTR 590\n                                  C,SC =(A-1.E0+B)/SQRT(B),.            CDTR 600\n                                  CALL NDTR(SC,P,DUMMY),.               CDTR 610\n S20..                                                                  CDTR 620\n                                  IF P LT 0                             CDTR 630\n                                  THEN IF ABS(P) GT 1.E-7               CDTR 640\n                                       THEN                             CDTR 650\n S30..                                                                  CDTR 660\n                                            DO,. /* SET ERROR IND.    */CDTR 670\n                                            ERROR='2',.                 CDTR 680\n                                            P    =1.E75,.               CDTR 690\n                                            END,.                       CDTR 700\n                                       ELSE P=0,.                       CDTR 710\n                                  ELSE IF P GT 1.0                      CDTR 720\n                                       THEN IF ABS(1.-P) GT 1.E-7       CDTR 730\n                                            THEN GO TO S30,.            CDTR 740\n                                            ELSE P=1,.                  CDTR 750\n                                       ELSE IF P LE 1.E-8               CDTR 760\n                                            THEN P=0,.                  CDTR 770\n                                            ELSE IF (1-P) LE 1.E-8      CDTR 780\n                                                 THEN P=1,.             CDTR 790\n                                  END,.                                 CDTR 800\n                        ELSE DO,.                                       CDTR 810\n                             DD,D =EXP(DD),.                            CDTR 820\n                             GO TO S10,.                                CDTR 830\n                             END,.                                      CDTR 840\n                   ELSE DO,.                                            CDTR 850\n                        D    =1.E75,.                                   CDTR 860\n                        GO TO S10,.                                     CDTR 870\n                        END,.                                           CDTR 880\n                   END,.                                                CDTR 890\n    GO TO S70,.                                                         CDTR 900\n S40..                                                                  CDTR 910\n    IF THETA LE 1.E-8                                                   CDTR 920\n    THEN THETA=0.E0,.                                                   CDTR 930\n    THP1 =THETA+1.E0,.                                                  CDTR 940\n                                       /* SELECT METHOD FOR FINDING T1*/CDTR 950\n    IF THETA GT 0                      /* FIND THETA FOR THETA GT 0   */CDTR 960\n    THEN IF XX LE 10.E0                /* AND X LE 10                 */CDTR 970\n         THEN DO,.                                                      CDTR 980\n              SER  =X2*(1.E0/THP1-X2/(THP1+1.E0)),.                     CDTR 990\n              J    =1,.                                                 CDTR1000\n              CC   =FLOAT(J,53),.                                       CDTR1010\n                   DO IT1=3 TO 30,.                                     CDTR1020\n                   XI   =FLOAT(IT1,53),.                                CDTR1030\n                   CALL LGAM(XI,FAC),.                                  CDTR1040\n                   TLOG =XI*DLX2-FAC-LOG(XI+THETA),.                    CDTR1050\n                   TERM =EXP(TLOG),.                                    CDTR1060\n                   TERM =SIGN(CC)*ABS(TERM),.                           CDTR1070\n                   SER  =SER+TERM,.                                     CDTR1080\n                   CC   =-CC,.                                          CDTR1090\n                   IF ABS(TERM) LT 1.E-9                                CDTR1100\n                   THEN IF (SER) LE 0                                   CDTR1110\n                        THEN GO TO S30,.                                CDTR1120\n                        ELSE DO,.                                       CDTR1130\n                             CALL LGAM(THP1,GTH),.                      CDTR1140\n                             TLOG =THETA*DLX2+LOG(SER)-GTH,.            CDTR1150\n                             IF (TLOG+1.68E2) LE 0                      CDTR1160\n                             THEN T1   =0,.                             CDTR1170\n                             ELSE T11,T1    =EXP(TLOG),.                CDTR1180\n                             GO TO S60,.                                CDTR1190\n                             END,.                                      CDTR1200\n                   END,.                                                CDTR1210\n              GO TO S30,.                                               CDTR1220\n              END,.                                                     CDTR1230\n         ELSE DO,.                     /* T1 FOR THETA GT 0 AND 10 LT */CDTR1240\n              A2   =0.E0,.             /* X LT 2000                   */CDTR1250\n                   DO I=1 TO 25,.                                       CDTR1260\n                   XI   =FLOAT(I,53),.                                  CDTR1270\n                   CALL LGAM(THP1,GTH),.                                CDTR1280\n                   T11  =-(13.E0*XX)/XI+THP1*LOG(13.E0*XX/XI)-GTH-      CDTR1290\n                        LOG(XI),.                                       CDTR1300\n                   IF (T11+1.68E2) GT 0                                 CDTR1310\n                   THEN DO,.                                            CDTR1320\n                        T11  =EXP(T11),.                                CDTR1330\n                        A2   =A2+T11,.                                  CDTR1340\n                        END,.                                           CDTR1350\n                   END,.                                                CDTR1360\n              A    =1.01282051+THETA/156.E0-XX/312.E0,.                 CDTR1370\n              B    =ABS(A),.                                            CDTR1380\n              C    =-X2+THP1*DLX2+LOG(B)-GTH-3.95124371858142E0,.       CDTR1390\n              IF (C+1.68E2) LE 0                                        CDTR1400\n              THEN DO,.                                                 CDTR1410\n                   C    =0.0,.                                          CDTR1420\n S50..                                                                  CDTR1430\n                   C    =A2+C,.                                         CDTR1440\n                   T11,T1    =1.E0-C,.                                  CDTR1450\n                   END,.                                                CDTR1460\n              ELSE DO,.                                                 CDTR1470\n                   IF A LT 0                                            CDTR1480\n                   THEN C    =-EXP(C),.                                 CDTR1490\n                   ELSE IF A=0                                          CDTR1500\n                        THEN C    =0.E0,.                               CDTR1510\n                        ELSE C    =EXP(C),.                             CDTR1520\n                   GO TO S50,.                                          CDTR1530\n                   END,.                                                CDTR1540\n              END,.                                                     CDTR1550\n    ELSE IF X2 GE 1.68E2               /* COMPUTE T1 FOR THETA = 0    */CDTR1560\n         THEN T1   =1,.                                                 CDTR1570\n         ELSE T11,T1    =1.E0-EXP(-X2),.                                CDTR1580\n S60..                                                                  CDTR1590\n    IF G GE 2                          /* SELECT APPRO. EXP FOR P     */CDTR1600\n    THEN IF G GE 4                     /* CALCULATE FOR G GE 4        */CDTR1610\n         THEN DO,.                     /* AND LE 100                  */CDTR1620\n              DT3  =0.0,.                                               CDTR1630\n                   DO I3=2 TO K,.                                       CDTR1640\n                   THPI =FLOAT(I3,53)+THETA,.                           CDTR1650\n                   CALL LGAM(THPI,GTH),.                                CDTR1660\n                   DLT3 =THPI*DLX2-DLXX-X2-GTH,.                        CDTR1670\n                   IF (DLT3+1.68E2) GT 0                                CDTR1680\n                   THEN DT3  =DT3+EXP(DLT3),.                           CDTR1690\n                   END,.                                                CDTR1700\n              T3   =DT3,.                                               CDTR1710\n              P    =T1-T3-T3,.                                          CDTR1720\n              END,.                                                     CDTR1730\n         ELSE P    =T1,.                                                CDTR1740\n    ELSE DO,.                          /* COMPUTE P FOR 0 LT G LT 2   */CDTR1750\n         CALL LGAM(THP1,GTH),.                                          CDTR1760\n         DT2  =THETA*DLXX-X2-THP1*.693147180559945E0-GTH,.              CDTR1770\n         IF (DT2+1.68E2) LE 0                                           CDTR1780\n         THEN P    =T1,.                                                CDTR1790\n         ELSE DO,.                                                      CDTR1800\n              DT2,T2    =EXP(DT2),.                                     CDTR1810\n              P    =T1+T2+T2,.                                          CDTR1820\n              END,.                                                     CDTR1830\n         END,.                                                          CDTR1840\n    GO TO S20,.                                                         CDTR1850\n S70..                                                                  CDTR1860\n    RETURN,.                                                            CDTR1870\n    END,.                              /* END OF PROCEDURE CDTR       */CDTR1880\n NDTI..                                                                 NDTI  10\n /*********************************************************************/NDTI  20\n /*                                                                   */NDTI  30\n /*      COMPUTES X=P**X(-1)(Y), THE ARGUMENT X SUCH THAT Y=P(X)=THE  */NDTI  40\n /*      PROBABILITY THAT THE RANDOM VARIABLE U, DISTRIBUTED NORMALLY */NDTI  50\n /*      (0,1), IS LESS THAN OR EQUAL TO X.  F(X) THE ORDINATE OF THE */NDTI  60\n /*      NORMAL DENSITY, AT X, IS ALSO COMPUTED.                      */NDTI  70\n /*                                                                   */NDTI  80\n /*********************************************************************/NDTI  90\n    PROCEDURE(P,X,D),.                                                  NDTI 100\n    DECLARE                                                             NDTI 110\n         (P,X,D,T2,T) FLOAT BINARY,                                     NDTI 120\n         ERROR EXTERNAL CHARACTER(1),.                                  NDTI 130\n    ERROR='0',.                                                         NDTI 140\n    X,D  =0,.                                                           NDTI 150\n    IF P LT 0.0                                                         NDTI 160\n    THEN ERROR='1',.                   /* P LT 0--SET ERROR INDICATOR */NDTI 170\n    ELSE IF P = 0.0                                                     NDTI 230\n         THEN X    =-.999999E+74,.     /* P = 0--SET X                */NDTI 240\n         ELSE IF P GT 1.0                                               NDTI 300\n              THEN ERROR='1',.         /* P GT 1--SET ERROR INDICATOR */NDTI 310\n              ELSE IF P = 1.0                                           NDTI 320\n                   THEN X    =.999999E+74,./* P = 1--SET X            */NDTI 330\n                   ELSE DO,.           /* P > 0 AND P < 1             */NDTI 370\n                        D    =P,.                                       NDTI 380\n                        IF D GT 0.5                                     NDTI 390\n                                       /* COMPLEMENT P                */NDTI 400\n                        THEN D    =1.0-D,.                              NDTI 410\n                                       /* CALC. EQUATION 2 IN WRITE UP*/NDTI 420\n                        T2   =-LOG(D),.                                 NDTI 430\n                        T2   =T2+T2,.                                   NDTI 431\n                        T    =SQRT(T2),.                                NDTI 440\n                                       /* CALC. EQUATION 1 IN WRITE UP*/NDTI 450\n                        X    =T-(2.515517+0.802853*T+0.010328*T2)/      NDTI 460\n                              (1.0+1.432788*T+0.189269*T2+0.001308*T    NDTI 470\n                              *T2),.                                    NDTI 480\n                        IF P LE 0.5    /* P < OR = .5                 */NDTI 490\n                        THEN X    =-X,./* NEGATE X                    */NDTI 500\n                                       /* CALCULATE DENSITY           */NDTI 510\n                        D    =0.3989423*EXP(-X*X/2.0),.                 NDTI 520\n                        END,.                                           NDTI 530\n    RETURN,.                                                            NDTI 550\n    END,.                              /* END OF PROCEDURE NDTI       */NDTI 560\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FILE02": {"ttr": 4867, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00'\\x01\\x06\\x04O\\x01\\x06\\x04O\\x14\\x01\\x02'\\x02'\\x00\\x00\\xd7\\xd3\\xf1\\xe2\\xe2\\xd7@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-02-13T00:00:00", "modifydate": "2006-02-13T14:01:27", "lines": 551, "newlines": 551, "modlines": 0, "user": "PL1SSP"}, "text": "//JOBA  JOB 111-1111,'SSP PL/1',MSGLEVEL=1\n//DACR EXEC PL1LFCLG,PARM.PL1L='NOLIST,NOATR,NOXREF,CHAR48'\n//PL1L.SYSIN  DD  *\n DACR..                                                                 DACR  10\n /*********************************************************************/DACR  20\n /*                                                                   */DACR  30\n /*      TO PERFORM DATA SCREENING CALCULATIONS ON A SET OF           */DACR  40\n /*      OBSERVATIONS.                                                */DACR  50\n /*                                                                   */DACR  60\n /*********************************************************************/DACR  70\n    PROCEDURE OPTIONS (MAIN),.                                          DACR  80\n    DECLARE                                                             DACR  90\n         (NO,NS,NN,NNN,NC,I,J,NOVAR,NX,NCOL,L1,L2)                      DACR 100\n         FIXED BINARY,                                                  DACR 110\n         PR1  CHARACTER (6),                                            DACR 120\n         ERROR EXTERNAL CHARACTER(1),                                   DACR 130\n         CH CHARACTER (80),                                             DACR 140\n         (NV,NCARD) EXTERNAL,                                           DACR 150\n         BOOL ENTRY,.                                                   DACR 160\n /*                                                                   */DACR 170\n         ON ENDFILE (SYSIN) GO TO EXIT,.                                DACR 180\n STRT..                                                                 DACR 190\n    GET EDIT (CH) (A(80)),.                                             DACR 200\n    GET STRING (CH) EDIT (PR1,NO,NX,NC,NS,NCARD) (A(6),5 F(5)),.        DACR 210\n /*                                                                   */DACR 220\n /*      PR1.......PROBLEM NUMBER (MAY BE ALPHAMERIC)                 */DACR 230\n /*      NO........NUMBER OF OBSERVATIONS                             */DACR 240\n /*      NX........NUMBER OF VARIABLES                                */DACR 250\n /*      NC........NUMBER OF CONDITIONS                               */DACR 260\n /*      NS........NUMBER OF SELECTIONS                               */DACR 270\n /*      NCARD.....NUMBER OF DATA CARDS PER OBSERVATION               */DACR 280\n /*                                                                   */DACR 290\n         NCARD=NCARD*80,.                                               DACR 300\n ONE..                                                                  DACR 310\n    BEGIN,.                                                             DACR 320\n    DECLARE                                                             DACR 330\n         (A(NO,NX),C(3,NC),UBO(3),S(NO),R(NC),STATS(5),D(NX),DD(3))     DACR 340\n         FLOAT BINARY,.                                                 DACR 350\n /*                                                                   */DACR 360\n /*      IF INPUT DATA IS TO BE SAVED ON A DATA SET, INITIALIZE       */DACR 370\n /*      NV=1. OTHERWISE NV=0.                                        */DACR 380\n /*                                                                   */DACR 390\n    NV   =0,.                                                           DACR 400\n         DO  I = 1 TO NO,.             /* READ IN DATA                */DACR 410\n         CALL DAT1(NX,D),.                                              DACR 420\n              DO J = 1 TO NX,.                                          DACR 430\n              A(I,J)=D(J),.                                             DACR 440\n              END,.                                                     DACR 450\n         END,.                                                          DACR 460\n    NCARD=80,.                                                          DACR 470\n         DO  I = 1 TO NC,.             /* READ IN CONDITIONS          */DACR 480\n         NNN  =3,.                                                      DACR 490\n         CALL DAT1 (NNN,DD),.                                           DACR 500\n              DO J = 1 TO 3,.                                           DACR 510\n              C(J,I)=DD(J),.                                            DACR 520\n              END,.                                                     DACR 530\n         END,.                                                          DACR 540\n    CALL SBST (A,C,R,BOOL,S,NO,NX,NC),.                                 DACR 550\n    PUT EDIT ('DATA SCREENING PROBLEM',PR1) (PAGE,COLUMN(10),A,X(4),A),.DACR 560\n    IF ERROR NE '0'                                                     DACR 570\n    THEN DO,.                                                           DACR 580\n         PUT EDIT ('IN ROUTINE SBST ERROR CODE = ',ERROR)               DACR 590\n              (SKIP(2),COLUMN(10),A,A(1)),.                             DACR 600\n         GO TO FIN,.                                                    DACR 610\n         END,.                                                          DACR 620\n    PUT EDIT ('SUBSET VECTOR') (SKIP(3),COLUMN(10),A,SKIP(3)),.         DACR 630\n    NCOL =CEIL(NO/50),.                                                 DACR 640\n    IF NCOL LE 1                                                        DACR 650\n    THEN PUT EDIT ((I,S(I) DO I= 1 TO NO)) (COLUMN(10),F(6),F(5,1)),.   DACR 660\n    ELSE DO,.                                                           DACR 670\n         L1   =0,.                                                      DACR 680\n              DO I = 1 TO 50,.                                          DACR 690\n              L1   =L1+1,.                                              DACR 700\n              L2   =50*(NCOL-1)+L1,.                                    DACR 710\n              IF L2= NO                                                 DACR 720\n              THEN NCOL =NCOL-1,.                                       DACR 730\n              PUT EDIT ((J,S(J) DO J= L1 TO L2 BY 50)) (SKIP,COLUMN(10) DACR 740\n                   ,(9)(F(6),F(5,1))),.                                 DACR 750\n              END,.                                                     DACR 760\n         END,.                                                          DACR 770\n         DO J = 1 TO NS,.                                               DACR 780\n         GET EDIT (CH) (A(80)),.                                        DACR 790\n         GET STRING (CH) EDIT (NOVAR,(UBO(I) DO I= 1 TO 3))             DACR 800\n              (F(5),3 F(10,0)),.                                        DACR 810\n /*                                                                   */DACR 820\n /*      NOVAR.....NUMBER OF THE VARIABLE TO BE TABULATED             */DACR 830\n /*      UBO(1)....LOWER BOUND                                        */DACR 840\n /*      UBO(2)....NUMBER OF INTERVALS                                */DACR 850\n /*      UBO(3)....UPPER BOUND                                        */DACR 860\n /*                                                                   */DACR 870\n    NN   =UBO(2),.                                                      DACR 880\n TWO..                                                                  DACR 890\n    BEGIN,.                                                             DACR 900\n         DECLARE                                                        DACR 910\n              (FREQ(NN),PCT(NN)) FLOAT BINARY,.                         DACR 920\n         CALL TAB1 (A,S,NOVAR,UBO,FREQ,PCT,STATS,NO,NX),.               DACR 930\n         IF ERROR NE '0'                                                DACR 940\n         THEN PUT EDIT ('IN ROUTINE TAB1 ERROR CODE = ',ERROR)          DACR 950\n              (SKIP(1),COLUMN(10),A,A(1)),.                             DACR 960\n         ELSE DO,.                                                      DACR 970\n              PUT EDIT ('SUMMARY STATISTICS FOR VARIABLE  ',NOVAR)      DACR 980\n              (PAGE,SKIP(4),COLUMN(10),A,F(3)),.                        DACR 990\n              PUT EDIT ('TOTAL =',STATS(1),'AVERAGE =',STATS(2),        DACR1000\n                   'STANDARD DEVIATION =',STATS(3),'MINIMUM =',STATS(4),DACR1010\n                   'MAXIMUM =',STATS(5))                                DACR1020\n                   (SKIP(2),COLUMN(10),5(A,F(9,3),X(2))),.              DACR1030\n              CALL HIST (J,FREQ,NN),.                                   DACR1040\n              END,.                                                     DACR1050\n         END,.                                                          DACR1060\n    END,.                                                               DACR1070\n    PUT EDIT ('END OF CASE') (SKIP(2),COLUMN(10),A),.                   DACR1080\n    END,.                                                               DACR1090\n    GO TO STRT,.                                                        DACR1100\n EXIT..                                                                 DACR1110\n    PUT FILE (SYSPRINT) EDIT ('END OF SAMPLE PROGRAM')                  DACR1120\n         (SKIP(5),COLUMN(10),A),.                                       DACR1130\n FIN..                                                                  DACR1140\n    END,.                              /*END OF PROCEDURE DACR        */DACR1150\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n SBST..                                                                 SBST  10\n /*********************************************************************/SBST  20\n /*                                                                   */SBST  30\n /*      TO DERIVE A SUBSET VECTOR INDICATING WHICH OBSERVATIONS IN   */SBST  40\n /*      A SET HAVE SATISFIED CERTAIN CONDITIONS.                     */SBST  50\n /*                                                                   */SBST  60\n /*********************************************************************/SBST  70\n    PROCEDURE (A,C,R,B,S,NO,NV,NC),.                                    SBST  80\n    DECLARE                                                             SBST  90\n         B ENTRY,                                                       SBST 100\n         ERROR EXTERNAL CHARACTER(1),                                   SBST 110\n         (I,ICOL,IGO,J,NC,NO)                                           SBST 120\n         FIXED BINARY,                                                  SBST 130\n         (A(*,*),C(*,*),R(*),S(*),Q,TR)                                 SBST 140\n         BINARY FLOAT,                                                  SBST 150\n         T(6) LABEL,.                                                   SBST 160\n /*                                                                   */SBST 170\n    ERROR='0',.                                                         SBST 180\n         DO I=1 TO NO,.                                                 SBST 190\n         S(I) =0,.                                                      SBST 200\n         END,.                                                          SBST 210\n    IF NO LE 0 OR NV LE 0 OR NC LE 0   /* NUMBER OF OBSERVATIONS,     */SBST 220\n    THEN DO,.                          /* VARIABLES, OR CONDITIONS IS */SBST 230\n         ERROR='1',.                   /* LESS THAN OR EQUAL TO ZERO. */SBST 240\n         GO TO FIN,.                                                    SBST 250\n         END,.                                                          SBST 260\n         DO I = 1 TO NO,.                                               SBST 270\n              DO J = 1 TO NC,.                                          SBST 280\n              R(J) =0.0,.              /* CLEAR R VECTOR              */SBST 290\n /*                                                                   */SBST 300\n /*      LOCATE ELEMENT IN OBSERVATION MATRIX AND RELATION CODE       */SBST 310\n /*                                                                   */SBST 320\n              ICOL =C(1,J),.                                            SBST 330\n              IGO  =C(2,J),.                                            SBST 340\n              IF IGO LT 1 OR IGO GT 6  /* CONDITION VALUE INVALID     */SBST 350\n              THEN DO,.                                                 SBST 360\n                   ERROR='2',.                                          SBST 370\n                   GO TO FIN,.                                          SBST 380\n                   END,.                                                SBST 390\n              IF ICOL LT 1 OR ICOL GT NV                                SBST 400\n              THEN DO,.                                                 SBST 410\n                   ERROR ='3',.        /* INVALID VARIABLE NUMBER     */SBST 420\n                   GO TO FIN,.                                          SBST 430\n                   END,.                                                SBST 440\n              Q    =A(I,ICOL)-C(3,J),. /* FORM R VECTOR               */SBST 450\n              GO TO T(IGO),.                                            SBST 460\n T(1)..                                                                 SBST 470\n              IF Q LT 0.0                                               SBST 480\n              THEN GO TO S10,.                                          SBST 490\n              GO TO S20,.                                               SBST 500\n T(2)..                                                                 SBST 510\n              IF Q LE 0.0                                               SBST 520\n              THEN GO TO S10,.                                          SBST 530\n              GO TO S20,.                                               SBST 540\n T(3)..                                                                 SBST 550\n              IF Q = 0.0                                                SBST 560\n              THEN GO TO S10,.                                          SBST 570\n              GO TO S20,.                                               SBST 580\n T(4)..                                                                 SBST 590\n              IF Q NE 0.0                                               SBST 600\n              THEN GO TO S10,.                                          SBST 610\n              GO TO S20,.                                               SBST 620\n T(5)..                                                                 SBST 630\n              IF Q GE 0.0                                               SBST 640\n              THEN GO TO S10,.                                          SBST 650\n              GO TO S20,.                                               SBST 660\n T(6)..                                                                 SBST 670\n              IF Q LE 0.0                                               SBST 680\n              THEN GO TO S20,.                                          SBST 690\n S10..                                                                  SBST 700\n              R(J) =1.0,.                                               SBST 710\n S20..                                                                  SBST 720\n              END,.                                                     SBST 730\n         CALL B (R,TR),.               /* CALCULATE S VECTOR          */SBST 740\n         S(I) =TR,.                                                     SBST 750\n         END,.                                                          SBST 760\n FIN..                                                                  SBST 770\n    RETURN,.                                                            SBST 780\n    END,.                              /*END OF PROCEDURE SBST        */SBST 790\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n TAB1..                                                                 TAB1  10\n /*********************************************************************/TAB1  20\n /*                                                                   */TAB1  30\n /*      TO TABULATE FOR ONE VARIABLE IN AN OBSERVATION MATRIX (OR A  */TAB1  40\n /*      SUBSET), THE FREQUENCY AND PERCENT FREQUENCY OVER GIVEN      */TAB1  50\n /*      CLASS INTERVALS. IN ADDITION, CALCULATE FOR THE SAME VARIABLE*/TAB1  60\n /*      THE TOTAL, MEAN, STANDARD DEVIATION, MINIMUM, AND            */TAB1  70\n /*      MAXIMUM.                                                     */TAB1  80\n /*                                                                   */TAB1  90\n /*********************************************************************/TAB1 100\n    PROCEDURE (A,S,NOVAR,UBO,FREQ,PCT,STATS,NO,NV),.                    TAB1 110\n    DECLARE                                                             TAB1 120\n         ERROR EXTERNAL CHARACTER (1),                                  TAB1 130\n         (I,INN,INTX,J,K,NO,NOVAR,KK)                                   TAB1 140\n         FIXED BINARY,                                                  TAB1 150\n         (A(*,*),S(*),UBO(*),FREQ(*),PCT(*),STATS(*),SCNT,VMIN,VMAX,    TAB1 160\n         SINT,TEMP)                                                     TAB1 170\n         BINARY FLOAT,.                                                 TAB1 180\n /*                                                                   */TAB1 190\n    ERROR='0',.                                                         TAB1 200\n         IF NOVAR LE 0 OR NOVAR GT NV  /* VALUE OF THE VARIABLE TO BE */TAB1 210\n         THEN DO,.                     /* TABULATED IS INVALID        */TAB1 220\n              ERROR='6',.                                               TAB1 230\n              GO TO S50,.                                               TAB1 240\n              END,.                                                     TAB1 250\n    IF NV LE 0 OR NO LE 0                                               TAB1 260\n    THEN DO,.                          /* NUMBER OF OBSERVATIONS OR   */TAB1 270\n         ERROR='1',.                   /* THE NUMBER OF VARIABLES ARE */TAB1 280\n         GO TO S50,.                   /* LESS THAN OR EQUAL TO ZERO. */TAB1 290\n         END,.                                                          TAB1 300\n    INN  =UBO(2),.                     /* CALCULATE INTERVAL SIZE     */TAB1 310\n         DO J = 1 TO INN,.             /* CLEAR OUTPUT VECTORS        */TAB1 320\n         FREQ(J)=0.0,.                                                  TAB1 330\n         PCT(J)=0.0,.                                                   TAB1 340\n         END,.                                                          TAB1 350\n         DO J = 1 TO 5,.                                                TAB1 360\n         STATS(J)=0.0,.                                                 TAB1 370\n         END,.                                                          TAB1 380\n    IF UBO(1) GT UBO(3) OR UBO(2) LE 2.0                                TAB1 390\n    THEN DO,.                          /* INVALID BOUNDS OR THE NUMBER*/TAB1 400\n         ERROR='2',.                   /* OF INTERVALS LESS THAN OR   */TAB1 410\n         GO TO S50,.                   /* EQUAL TO TWO.               */TAB1 420\n         END,.                                                          TAB1 430\n         DO I = 1 TO NO,.              /* CALCULATE MAX AND MIN       */TAB1 440\n         IF S(I) NE 0.0                                                 TAB1 450\n         THEN DO,.                                                      TAB1 460\n              KK   =I,.                                                 TAB1 470\n              VMIN =A(I,NOVAR),.                                        TAB1 480\n              VMAX =VMIN,.                                              TAB1 490\n              GO TO S10,.                                               TAB1 500\n              END,.                                                     TAB1 510\n         END,.                                                          TAB1 520\n    ERROR='3',.                        /* NO OBSERVATION IN SUBSET    */TAB1 530\n    GO TO S50,.                                                         TAB1 540\n S10..                                                                  TAB1 550\n         DO I = KK TO NO,.                                              TAB1 560\n         IF S(I) NE 0.0                                                 TAB1 570\n         THEN DO,.                                                      TAB1 580\n              IF A(I,NOVAR) LT VMIN                                     TAB1 590\n              THEN VMIN =A(I,NOVAR),.                                   TAB1 600\n              IF A(I,NOVAR) GT VMAX                                     TAB1 610\n              THEN VMAX =A(I,NOVAR),.                                   TAB1 620\n              END,.                                                     TAB1 630\n         END,.                                                          TAB1 640\n    STATS(4)=VMIN,.                                                     TAB1 650\n    STATS(5)=VMAX,.                                                     TAB1 660\n    IF UBO(1)= UBO(3)                                                   TAB1 670\n    THEN DO,.                                                           TAB1 680\n         UBO(1)=VMIN,.                                                  TAB1 690\n         UBO(3)=VMAX,.                                                  TAB1 700\n         END,.                                                          TAB1 710\n    SINT =(UBO(3)-UBO(1))/(UBO(2)-2),.                                  TAB1 720\n    SCNT =0.0,.                        /* TEST SUBSET VECTOR          */TAB1 730\n         DO I = KK TO NO,.                                              TAB1 740\n         IF S(I) NE 0.0                                                 TAB1 750\n         THEN DO,.                                                      TAB1 760\n              SCNT =SCNT+1.0,.                                          TAB1 770\n /*                                                                   */TAB1 780\n /*      DEVELOP TOTALS AND FREQUENCIES                               */TAB1 790\n /*                                                                   */TAB1 800\n              STATS(1)=STATS(1)+A(I,NOVAR),.                            TAB1 810\n              STATS(3)=STATS(3)+A(I,NOVAR)**2,.                         TAB1 820\n              TEMP =UBO(1)-SINT,.                                       TAB1 830\n              INTX =INN-1,.                                             TAB1 840\n                   DO J = 1 TO INTX,.                                   TAB1 850\n                   TEMP =TEMP+SINT,.                                    TAB1 860\n                   IF A(I,NOVAR) LT TEMP                                TAB1 870\n                   THEN DO,.                                            TAB1 880\n                        K    =J,.                                       TAB1 890\n                        GO TO S20,.                                     TAB1 900\n                        END,.                                           TAB1 910\n                   END,.                                                TAB1 920\n              IF A(I,NOVAR) GE TEMP                                     TAB1 930\n              THEN DO,.                                                 TAB1 940\n                   FREQ(INN)=FREQ(INN)+1.0,.                            TAB1 950\n                   GO TO S30,.                                          TAB1 960\n                   END,.                                                TAB1 970\n S20..                                                                  TAB1 980\n              FREQ(K)=FREQ(K)+1.0,.                                     TAB1 990\n              END,.                                                     TAB11000\n S30..                                                                  TAB11010\n         END,.                                                          TAB11020\n /*                                                                   */TAB11030\n /*      CALCULATE RELATIVE FREQUENCIES                               */TAB11040\n /*                                                                   */TAB11050\n         DO J = 1 TO INN,.                                              TAB11060\n         PCT(J)=FREQ(J)*100.0/SCNT,.                                    TAB11070\n         END,.                                                          TAB11080\n /*                                                                   */TAB11090\n /*      CALCULATE MEAN AND STANDARD DEVIATION                        */TAB11100\n /*                                                                   */TAB11110\n    STATS(2)=STATS(1)/SCNT,.                                            TAB11120\n    IF SCNT= 1.0                                                        TAB11130\n    THEN DO,.                                                           TAB11140\n         ERROR='4',.                   /* SAMPLE SIZE = 1             */TAB11150\n         STATS(3)=0.0,.                                                 TAB11160\n         GO TO S50,.                                                    TAB11170\n         END,.                                                          TAB11180\n    ELSE DO,.                                                           TAB11190\n         TEMP =STATS(3)-STATS(1)*STATS(1)/SCNT,.                        TAB11200\n         IF TEMP LE 0.0                                                 TAB11210\n         THEN DO,.                                                      TAB11220\n              ERROR='5',.              /* VARIANCE = 0.0              */TAB11230\n              STATS(3)=0.0,.                                            TAB11240\n              GO TO S50,.                                               TAB11250\n              END,.                                                     TAB11260\n         ELSE STATS(3)=SQRT(TEMP/(SCNT-1.0)),.                          TAB11270\n         END,.                                                          TAB11280\n S50..                                                                  TAB11290\n    RETURN,.                                                            TAB11300\n    END,.                              /*END OF PROCEDURE TAB1        */TAB11310\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n BOOL..                                                                 BOOL  10\n /*********************************************************************/BOOL  20\n /*                                                                   */BOOL  30\n /*      TO PERFORM A BOOLEAN OPERATION FOR THE PROCEDURE SBST, WHICH */BOOL  40\n /*      IS USED BY THE DATA SCREENING SAMPLE PROGRAM.                */BOOL  50\n /*                                                                   */BOOL  60\n /*********************************************************************/BOOL  70\n    PROCEDURE (R,T),.                                                   BOOL  80\n    DECLARE (R(*),T) FLOAT BINARY,.                                     BOOL  90\n /*    BOOL CHECKS ONLY THE FIRST TWO CONDITIONS OF PROCEDURE SBST    */BOOL 100\n    T    =R(1)*R(2),.                                                   BOOL 110\n    RETURN,.                                                            BOOL 120\n    END,.                              /*END OF PROCEDURE BOOL        */BOOL 130\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n HIST..                                                                 HIST  10\n /*********************************************************************/HIST  20\n /*                                                                   */HIST  30\n /*      TO PLOT A HISTOGRAM OF FREQUENCIES FOR THE DATA SCREENING    */HIST  40\n /*      SAMPLE PROGRAM.                                              */HIST  50\n /*                                                                   */HIST  60\n /*********************************************************************/HIST  70\n    PROCEDURE (NZ,FREQ,IN),.                                            HIST  80\n    DECLARE                                                             HIST  90\n         (I,IN,IX,J,JSCAL,L,MAX,NU,NZ)                                  HIST 100\n         FIXED BINARY,                                                  HIST 110\n         (K,JOUT(IN)) CHARACTER (1),                                    HIST 120\n         (FREQ(*),FMAX,X) FLOAT BINARY,.                                HIST 130\n /*                                                                   */HIST 140\n /*      PRINT TITLE AND FREQUENCY VECTOR                             */HIST 150\n /*                                                                   */HIST 160\n    PUT EDIT ('HISTOGRAM ',NZ) (SKIP(3),COLUMN(57),A,F(3)),.            HIST 170\n    NU   =FLOOR(100/IN),.                                               HIST 180\n    PUT EDIT ('FREQUENCY',(FREQ(I) DO I = 1 TO IN))                     HIST 190\n         (SKIP(2),COLUMN(10),A,(IN)F(NU)),.                             HIST 200\n    PUT EDIT ('---------------------------------------------------',    HIST 210\n         '----------------------------------------------------------')  HIST 220\n         (R(FM1)),.                                                     HIST 230\n FM1..                                                                  HIST 240\n    FORMAT (SKIP,COLUMN(12),A,A),.                                      HIST 250\n    FMAX =0,.                          /* FIND LARGEST FREQUENCY      */HIST 260\n         DO I = 1 TO IN,.                                               HIST 270\n         IF FREQ(I) GT FMAX                                             HIST 280\n         THEN FMAX =FREQ(I),.                                           HIST 290\n         END,.                                                          HIST 300\n    JSCAL=1,.                          /* SCALE IF NECESSARY          */HIST 310\n    IF FMAX GT 50                                                       HIST 320\n    THEN DO,.                                                           HIST 330\n         JSCAL=FLOOR((FMAX+49)/50),.                                    HIST 340\n         PUT EDIT ('EACH','*',' EQUAL ',JSCAL,' POINTS')                HIST 350\n              (SKIP,COLUMN(10),A,A(1),A,F(2),A,SKIP),.                  HIST 360\n         END,.                                                          HIST 370\n    JOUT =' ',.                        /* CLEAR OUTPUT AREA TO BLANKS */HIST 380\n /*                                                                   */HIST 390\n /*      LOCATE FREQUENCIES IN EACH INTERVAL                          */HIST 400\n /*                                                                   */HIST 410\n    MAX  =FLOOR(FMAX/JSCAL),.                                           HIST 420\n         DO I = 1 TO MAX,.                                              HIST 430\n         X    =MAX-(I-1),.                                              HIST 440\n              DO J = 1 TO IN,.                                          HIST 450\n              IF FREQ(J)/JSCAL GE X                                     HIST 460\n              THEN JOUT(J)='*',.                                        HIST 470\n              END,.                                                     HIST 480\n         IX   =X*JSCAL,.                                                HIST 490\n /*                                                                   */HIST 500\n /*      PRINT LINE OF FREQUENCIES                                    */HIST 510\n /*                                                                   */HIST 520\n         PUT EDIT (IX,(JOUT(L) DO L = 1 TO IN)) (SKIP,COLUMN(10),F(5),  HIST 530\n              X(4),(IN)(X(NU-1),A(1))),.                                HIST 540\n         END,.                                                          HIST 550\n         DO I = 1 TO IN,.              /* GENERATE CONSTANTS          */HIST 560\n         FREQ(I)=I,.                                                    HIST 570\n         END,.                                                          HIST 580\n    PUT EDIT ('---------------------------------------------------',    HIST 590\n         '----------------------------------------------------------')  HIST 600\n         (R(FM1)),.                                                     HIST 610\n    PUT EDIT ('INTERVAL ',(FREQ(I) DO I = 1 TO IN))                     HIST 620\n         (SKIP(2),COLUMN(10),A,(IN)F(NU)),.                             HIST 630\n    PUT EDIT ('CLASS') (SKIP,COLUMN(10),A),.                            HIST 640\n    RETURN,.                                                            HIST 650\n    END,.                              /*END OF PROCEDURE HIST        */HIST 660\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n DAT1..                                                                 DAT1  10\n /*********************************************************************/DAT1  20\n /*                                                                   */DAT1  30\n /*      TO READ FLOATING POINT DATA, ONE OBSERVATION AT A TIME.      */DAT1  40\n /*      DATA MAY BE SAVED ON A DATA SET.                             */DAT1  50\n /*                                                                   */DAT1  60\n /*********************************************************************/DAT1  70\n    PROCEDURE (M,D),.                                                   DAT1  80\n    DECLARE                                                             DAT1  90\n         XDATA FILE STREAM ENVIRONMENT (CONSECUTIVE V(2000,200)),       DAT1 100\n         (NCARD,NV) EXTERNAL,                                           DAT1 110\n         CH CHARACTER(NCARD),                                           DAT1 120\n         (I,M,MM) BINARY FIXED,                                         DAT1 130\n         D(*) FLOAT BINARY,.                                            DAT1 140\n /*                                                                   */DAT1 150\n    ON ENDFILE (SYSIN)                                                  DAT1 160\n    GO TO EXIT,.                                                        DAT1 170\n    GET EDIT (CH) (A(NCARD)),.                                          DAT1 180\n    MM   =CEIL(M/7),.                                                   DAT1 190\n    GET STRING (CH) EDIT ((D(I) DO I= 1 TO M))                          DAT1 200\n         ((MM)((7)F(10,0),X(10))),.                                     DAT1 210\n    IF NV= 1                                                            DAT1 220\n    THEN PUT FILE (XDATA) EDIT ((D(I) DO I= 1 TO M)) ((M)F(6,0)),.      DAT1 230\n    REVERT ENDFILE (SYSIN),.                                            DAT1 240\n    RETURN,.                                                            DAT1 250\n EXIT..                                                                 DAT1 260\n    PUT FILE (SYSPRINT) EDIT ('ERROR  INSUFFICIENT DATA')               DAT1 270\n         (SKIP(1),COLUMN(10),A),.                                       DAT1 280\n    STOP,.                                                              DAT1 290\n    END,.                              /*END OF PROCEDURE DAT1        */DAT1 300\n/*\n//GO.SYSIN  DD  *\nSAMPLE  100    4    2    3    1                                               10\n46.       64.       173.      12.                                             20\n24.       72.       170.       8.                                             30\n32.       71.       154.      16.                                             40\n41.       68.       129.      10.                                             50\n50.       65.       192.       9.                                             60\n63.       75.       203.      12.                                             70\n29.       70.       122.      14.                                             80\n28.       64.       136.      13.                                             90\n52.       77.       147.      11.                                            100\n36.       67.       153.      18.                                            110\n31.       68.       165.       9.                                            120\n72.       70.       178.      10.                                            130\n53.       71.       205.      14.                                            140\n21.       65.       219.      12.                                            150\n49.       63.       150.       6.                                            160\n28.       62.       160.      16.                                            170\n53.       72.       161.      13.                                            180\n47.       73.       142.      15.                                            190\n37.       67.       193.      18.                                            200\n64.       68.       156.      14.                                            210\n65.       60.       114.      10.                                            220\n62.       64.       153.      12.                                            230\n19.       68.       225.       9.                                            240\n46.       67.       158.      11.                                            250\n33.       72.       121.       4.                                            260\n37.       65.       132.      13.                                            270\n41.       76.       148.      16.                                            280\n52.       71.       123.      16.                                            290\n29.       68.       128.      14.                                            300\n32.       65.       155.      17.                                            310\n24.       72.       172.      16.                                            320\n56.       73.       163.      10.                                            330\n63.       65.       158.      11.                                            340\n67.       69.       146.       2.                                            350\n58.       66.       171.       9.                                            360\n41.       65.       153.      12.                                            370\n49.       66.       165.      14.                                            380\n52.       72.       172.      16.                                            390\n23.       78.       183.      15.                                            400\n56.       71.       195.      16.                                            410\n52.       68.       118.       7.                                            420\n40.       66.       165.      14.                                            430\n39.       68.       215.      16.                                            440\n23.       71.       154.      12.                                            450\n56.       65.       149.      10.                                            460\n25.       65.       162.      16.                                            470\n37.       68.       152.      16.                                            480\n46.       70.       159.      15.                                            490\n41.       69.       137.      14.                                            500\n62.       71.       163.      12.                                            510\n29.       72.       191.       4.                                            520\n19.       68.       168.      10.                                            530\n46.       63.       158.      16.                                            540\n37.       64.       139.      18.                                            550\n34.       68.       156.      10.                                            560\n64.       67.       153.      12.                                            570\n57.       67.       141.      13.                                            580\n32.       68.       157.      17.                                            590\n29.       70.       183.      15.                                            600\n53.       72.       164.      18.                                            610\n47.       72.       156.      18.                                            620\n56.       73.       160.      16.                                            630\n61.       74.       169.      12.                                            640\n21.       68.       161.      10.                                            650\n25.       76.       178.      11.                                            660\n23.       72.       157.      16.                                            670\n29.       68.       186.      16.                                            680\n39.       70.       159.      14.                                            690\n42.       70.       154.      10.                                            700\n56.       62.       159.      12.                                            710\n63.       70.       177.      12.                                            720\n51.       71.       161.       9.                                            730\n41.       66.       158.      10.                                            740\n33.       69.       158.      16.                                            750\n37.       68.       157.      16.                                            760\n25.       70.       163.      15.                                            770\n63.       68.       159.      12.                                            780\n53.       71.       202.       6.                                            790\n51.       72.       167.      14.                                            800\n47.       73.       164.      14.                                            810\n39.       75.       151.      12.                                            820\n28.       68.       166.      10.                                            830\n64.       69.       156.      16.                                            840\n55.       67.       144.      16.                                            850\n51.       66.       177.      10.                                            860\n46.       65.       157.      12.                                            870\n72.       66.       125.      10.                                            880\n66.       65.       131.      12.                                            890\n28.       74.       149.      18.                                            900\n27.       71.       168.      11.                                            910\n23.       72.       158.      12.                                            920\n23.       72.       163.      12.                                            930\n60.       68.       157.       9.                                            940\n30.       66.       142.      10.                                            950\n39.       67.       162.      16.                                            960\n46.       74.       154.      16.                                            970\n50.       68.       158.      10.                                            980\n61.       66.       161.      14.                                            990\n36.       64.       157.      15.                                           1000\n32.       71.       156.      16.                                           1010\n         1         2        65                                              1020\n         4         6         8                                              1030\n    3   120.       20.      210.                                            1040\n    1    20.        7.       70.                                            1050\n    4    10.       12.       20.                                            1060\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FILE03": {"ttr": 5121, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x001\\x01\\x06\\x04O\\x01\\x06\\x04O\\x14\\x01\\x03\\x00\\x03\\x00\\x00\\x00\\xd7\\xd3\\xf1\\xe2\\xe2\\xd7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-02-13T00:00:00", "modifydate": "2006-02-13T14:01:31", "lines": 768, "newlines": 768, "modlines": 0, "user": "PL1SSP"}, "text": "//JOBB  JOB 111-1111,'SSP PL/1',MSGLEVEL=1\n//REGR EXEC PL1LFCLG,PARM.PL1L='NOLIST,NOATR,NOXREF,CHAR48'\n//PL1L.SYSIN  DD  *\n REGR..                                                                 REGR  10\n /*********************************************************************/REGR  20\n /*                                                                   */REGR  30\n /*      TO READ THE PROBLEM PARAMETER CARD FOR A MULTIPLE REGRESSION,*/REGR  40\n /*      READ SUBSET SELECTION CARDS, CALL THE PROCEDURES TO CALCULATE*/REGR  50\n /*      MEANS, STANDARD DEVIATIONS, SIMPLE AND MULTIPLE CORRELATION  */REGR  60\n /*      COEFFICIENTS, REGRESSION COEFFICIENTS, T-VALUES, BETA COEFF- */REGR  70\n /*      ICIENTS, AND ANALYSIS OF VARIANCE FOR MULTIPLE REGRESSION,   */REGR  80\n /*      AND PRINT THE RESULTS.                                       */REGR  90\n /*                                                                   */REGR 100\n /*********************************************************************/REGR 110\n    PROCEDURE OPTIONS (MAIN),.                                          REGR 120\n    DECLARE                                                             REGR 130\n         (I,II,IO,J,K,L,M,MM,N,NDEP,NRESI,NS,L1,L2) FIXED BINARY,       REGR 140\n         XDATA FILE STREAM ENVIRONMENT (CONSECUTIVE V(2000,200)),       REGR 150\n         (NCARD,NV) EXTERNAL,                                           REGR 160\n         ERROR EXTERNAL CHARACTER (1),                                  REGR 170\n         CH  CHARACTER (80),                                            REGR 180\n         PR1 CHARACTER (6),.                                            REGR 190\n /*                                                                   */REGR 200\n FM1..                                                                  REGR 210\n         FORMAT (A(6),F(5),3 F(2)),.                                    REGR 220\n    ON ENDFILE (SYSIN) GO TO EXIT,.                                     REGR 230\n /*                                                                   */REGR 240\n /*      INPUT DATA IS SAVED IF NV IS SET TO 1                        */REGR 250\n /*                                                                   */REGR 260\n    NV   =1,.                                                           REGR 270\n /*                                                                   */REGR 280\n S100..                                                                 REGR 290\n    GET EDIT (CH) (A(80)),.                                             REGR 300\n    GET STRING (CH) EDIT (PR1,N,M,NS,NCARD) (R(FM1)),.                  REGR 310\n /*                                                                   */REGR 320\n /*      NAME - PROBLEM NUMBER (MAY BE ALPHAMERIC)                    */REGR 330\n /*      N    - NUMBER OF OBSERVATIONS                                */REGR 340\n /*      M    - NUMBER OF VARIABLES                                   */REGR 350\n /*      NS   - NUMBER OF SELECTIONS                                  */REGR 360\n /*      NCARD- NUMBER OF DATA CARDS PER OBSERVATION                  */REGR 370\n /*                                                                   */REGR 380\n    NCARD=NCARD*80,.                                                    REGR 390\n /*                                                                   */REGR 400\n STRT..                                                                 REGR 410\n    BEGIN,.                                                             REGR 420\n FM2..                                                                  REGR 430\n    FORMAT (PAGE,SKIP(4),COLUMN(10),A,A(6),SKIP(2),COLUMN(10),A,A,      REGR 440\n         F(5),SKIP(2),COLUMN(10),A,F(5),SKIP(2),COLUMN(10),A,F(2)),.    REGR 450\n    DECLARE                                                             REGR 460\n         (X(1,1),W(M),RESI)                                             REGR 470\n         FLOAT BINARY,                                                  REGR 480\n         (R(M,M),RX(M,M),XBAR(M),RY(M),D(M),STD(M),ANS(10),FSUM,DET,CON)REGR 490\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/REGR 500\n /*      BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/REGR 510\n /*                                                                   */REGR 520\n    IO   =0,.                                                           REGR 530\n    X    =0,.                                                           REGR 540\n    OPEN FILE (XDATA) OUTPUT,.                                          REGR 550\n    CALL CORR (N,M,IO,X,XBAR,STD,RX,R,D),.                              REGR 560\n    CLOSE FILE (XDATA),.                                                REGR 570\n    IF ERROR NE '0'                                                     REGR 580\n    THEN PUT EDIT ('IN ROUTINE CORR ERROR CODE = ',ERROR)               REGR 590\n         (SKIP(2),COLUMN(10),A,A(1)),.                                  REGR 600\n /*                                                                   */REGR 610\n /*      TEST NUMBER OF SELECTIONS                                    */REGR 620\n /*                                                                   */REGR 630\n    IF NS LE 0                                                          REGR 640\n    THEN DO,.                                                           REGR 650\n         PUT EDIT ('NUMBER OF SELECTIONS NOT SPECIFIED. JOB TERMINATED')REGR 660\n              (SKIP(4),COLUMN(10),A),.                                  REGR 670\n         GO TO S300,.                                                   REGR 680\n         END,.                                                          REGR 690\n         DO I = 1 TO NS,.                                               REGR 700\n         PUT EDIT ('MULTIPLE REGRESSION.....',PR1,'NUMBER OF OBSERVA',  REGR 710\n              'TIONS...',N,'NUMBER OF VARIABLES......',M,               REGR 720\n              'SELECTION.....',I) (R(FM2)),.                            REGR 730\n /*                                                                   */REGR 740\n /*      READ SUBSET SELECTION CARD                                   */REGR 750\n /*                                                                   */REGR 760\n    GET EDIT (CH) (A(80)),.                                             REGR 770\n         GET STRING (CH) EDIT (NRESI,NDEP,K) (3 F(2)),.                 REGR 780\n KRED..                                                                 REGR 790\n    BEGIN,.                                                             REGR 800\n FM3..                                                                  REGR 810\n         FORMAT (SKIP,COLUMN(10),F(4),7 F(14,5)),.                      REGR 820\n FM4..                                                                  REGR 830\n         FORMAT (PAGE,SKIP(4),COLUMN(10),A,A(6),SKIP(2),COLUMN(10),     REGR 840\n              A,F(2)),.                                                 REGR 850\n         DECLARE                                                        REGR 860\n              (RZ(K,K),B(K),SB(K),T(K),BETA(K),RT(K))                   REGR 870\n              BINARY FLOAT,            /*SINGLE PRECISION VERSION  /*S*/REGR 880\n /*           BINARY FLOAT (53),       /*DOUBLE PRECISION VERSION  /*D*/REGR 890\n              (ISAVE(K+1))                                              REGR 900\n              FIXED BINARY,.                                            REGR 910\n /*                                                                   */REGR 920\n         CALL IDT1 (K,ISAVE),.                                          REGR 930\n /*                                                                   */REGR 940\n /*      NRESI - OPTION CODE FOR TABLE OF RESIDUALS                   */REGR 950\n /*                0 IF IT IS NOT DESIRED.                            */REGR 960\n /*                1 IF IT IS DESIRED.                                */REGR 970\n /*      NDEP  - DEPENDENT VARIABLE.                                  */REGR 980\n /*      K     - NUMBER OF INDEPENDENT VARIABLES INCLUDED             */REGR 990\n /*      ISAVE - A VECTOR CONTAINING THE INDEPENDENT VARIABLES        */REGR1000\n /*              INCLUDED                                             */REGR1010\n /*                                                                   */REGR1020\n         CALL ORDR (M,R,NDEP,K,ISAVE,RZ,RT),.                           REGR1030\n         IF ERROR NE '0'                                                REGR1040\n         THEN DO,.                                                      REGR1050\n              PUT EDIT ('IN ROUTINE ORDR ERROR CODE = ',ERROR)          REGR1060\n                   (SKIP(2),COLUMN(10),A,A(1)),.                        REGR1070\n              GO TO S200,.                                              REGR1080\n              END,.                                                     REGR1090\n         CON  =0.0,.                                                    REGR1100\n         CALL MINV(RZ,K,DET,CON),.                                      REGR1110\n /*                                                                   */REGR1120\n /*      TEST SINGULARITY OF THE MATRIX INVERTED                      */REGR1130\n /*                                                                   */REGR1140\n         IF ERROR NE '0'                                                REGR1150\n         THEN DO,.                                                      REGR1160\n              PUT EDIT('IN ROUTINE MINV ERROR = ',ERROR) (SKIP(2),      REGR1170\n                   COLUMN(10),A,A(1)),.                                 REGR1180\n              GO TO S200,.                                              REGR1190\n              END,.                                                     REGR1200\n /*                                                                   */REGR1210\n         CALL MLTR (N,K,XBAR,STD,D,RZ,RT,ISAVE,B,SB,T,BETA,ANS),.       REGR1220\n         IF ERROR NE '0'                                                REGR1230\n         THEN DO,.                                                      REGR1240\n              PUT EDIT ('IN ROUTINE MLTR ERROR CODE = ',ERROR)          REGR1250\n                   (SKIP(2),COLUMN(10),A,A(1)),.                        REGR1260\n              GO TO S200,.                                              REGR1270\n              END,.                                                     REGR1280\n /*                                                                   */REGR1290\n /*      PRINT MEANS, STANDARD DEVIATIONS, INTERCORRELATIONS BETWEEN  */REGR1300\n /*      X AND Y, REGRESSION COEFFICIENTS, STANDARD DEVIATIONS OF     */REGR1310\n /*      REGRESSION COEFFICIENTS, COMPUTED T VALUES, AND BETA         */REGR1320\n /*      COEFFICIENTS.                                                */REGR1330\n /*                                                                   */REGR1340\n         MM   =K+1,.                                                    REGR1350\n         PUT EDIT ('VARIABLE','MEAN','STANDARD','CORRELATION',          REGR1360\n              'REGRESSION','STD. ERROR','COMPUTED','BETA','NO.',        REGR1370\n              'DEVIATION','X VS Y','COEFFICIENT','OF REG.COEFF.',       REGR1380\n              'T VALUE','COEFF.') (SKIP(2),COLUMN(10),A,X(5),A,         REGR1390\n              X(6),A,X(6),A,X(4),A,X(4),A,X(5),A,X(7),A,SKIP,           REGR1400\n              COLUMN(12),A,X(18),A,X(7),A,X(7),A,X(3),A,X(3),A,         REGR1410\n              X(7),A),.                                                 REGR1420\n              DO J = 1 TO K,.                                           REGR1430\n              L    =ISAVE(J),.                                          REGR1440\n              PUT EDIT (L,XBAR(L),STD(L),RT(J),B(J),SB(J),T(J),BETA(J)) REGR1450\n                   (R(FM3)),.                                           REGR1460\n              END,.                                                     REGR1470\n         PUT EDIT ('DEPENDENT') (SKIP(2),COLUMN(10),A),.                REGR1480\n         L    =ISAVE(MM),.                                              REGR1490\n         PUT EDIT (L,XBAR(L),STD(L)) (R(FM3)),.                         REGR1500\n /*                                                                   */REGR1510\n /*      PRINT INTERCEPT, MULTIPLE CORRELATION COEFFICIENT, AND       */REGR1520\n /*      STANDARD ERROR OF ESTIMATE                                   */REGR1530\n /*                                                                   */REGR1540\n         PUT EDIT ('INTERCEPT',ANS(1),'MULTIPLE CORRELATION  ',ANS(2),  REGR1550\n              'STD. ERROR OF ESTIMATE',ANS(3)) (SKIP(3),COLUMN(10),     REGR1560\n              A,X(10),F(16,5),(2)(SKIP(2),COLUMN(10),A,F(13,5))),.      REGR1570\n /*                                                                   */REGR1580\n /*           PRINT ANALYSIS OF VARIANCE FOR THE REGRESSION           */REGR1590\n /*                                                                   */REGR1600\n         PUT EDIT ('ANALYSIS OF VARIANCE FOR THE REGRESSION ',          REGR1610\n              'SOURCE OF VARIATION','DEGREES','SUM OF','MEAN',          REGR1620\n              '  F VALUE','OF FREEDOM','SQUARES','SQUARES')             REGR1630\n              (SKIP(2),COLUMN(31),A,SKIP(2),COLUMN(15),A,X(7),A,        REGR1640\n              X(7),A,X(10),A,X(09),A,SKIP,COLUMN(40),A,X(4),A,          REGR1650\n              X(9),A),.                                                 REGR1660\n         L    =ANS(8),.                                                 REGR1670\n         PUT EDIT ('ATRRIBUTABLE TO REGRESSION   ',K,ANS(4),ANS(6),     REGR1680\n              ANS(10),'DEVIATION FROM REGRESSION    ',L,ANS(7),         REGR1690\n              ANS(9)) (SKIP,COLUMN(10),A,F(6),3 F(16,5),SKIP,           REGR1700\n              COLUMN(10),A,F(6),2 F(16,5)),.                            REGR1710\n         L    =N-1,.                                                    REGR1720\n         FSUM =ANS(4)+ANS(7),.                                          REGR1730\n         PUT EDIT('TOTAL',L,FSUM) (COLUMN(15),A,X(19),F(6),F(16,5)),.   REGR1740\n         IF NRESI LE 0                                                  REGR1750\n         THEN GO TO S200,.                                              REGR1760\n         PUT EDIT ('MULTIPLE REGRESSION.....',PR1,'SELECTION.....',I)   REGR1770\n              (R(FM4)),.                                                REGR1780\n         PUT EDIT ('TABLE OF RESIDUALS','CASE NO.','Y VALUE',           REGR1790\n              'Y ESTIMATE','RESIDUAL') (SKIP,COLUMN(25),A,SKIP(2),      REGR1800\n              COLUMN(10),A,X(5),A,X(5),A,X(6),A),.                      REGR1810\n         MM   =ISAVE(K+1),.                                             REGR1820\n         OPEN FILE (XDATA) INPUT,.                                      REGR1830\n              DO II = 1 TO N,.                                          REGR1840\n              GET FILE (XDATA) EDIT ((W(J) DO J= 1 TO M))               REGR1850\n                   ((M)F(6,0)),.                                        REGR1860\n              FSUM =ANS(1),.                                            REGR1870\n                   DO J = 1 TO K,.                                      REGR1880\n                   L    =ISAVE(J),.                                     REGR1890\n                   FSUM =FSUM+W(L)*B(J),.                               REGR1900\n                   END,.                                                REGR1910\n              RESI =W(MM)-FSUM,.                                        REGR1920\n              PUT EDIT (II,W(MM),FSUM,RESI) (COLUMN(10),F(5),F(15,5),   REGR1930\n                   2 F(14,5)),.                                         REGR1940\n              END,.                                                     REGR1950\n         CLOSE FILE (XDATA),.                                           REGR1960\n S200..                                                                 REGR1970\n         END,.                                                          REGR1980\n    END,.                                                               REGR1990\n    END,.                                                               REGR2000\n    GO TO S100,.                                                        REGR2010\n EXIT..                                                                 REGR2020\n    PUT FILE (SYSPRINT) EDIT ('END OF SAMPLE PROGRAM')                  REGR2030\n         (SKIP(5),COLUMN(10),A),.                                       REGR2040\n S300..                                                                 REGR2050\n    END,.                              /*END OF PROCEDURE REGR        */REGR2060\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n CORR..                                                                 CORR  10\n /*********************************************************************/CORR  20\n /*                                                                   */CORR  30\n /*      TO COMPUTE MEANS, STANDARD DEVIATIONS, SUMS OF CROSS-PRODUCTS*/CORR  40\n /*      OF DEVIATIONS, AND CORRELATION COEFFICIENTS.                 */CORR  50\n /*                                                                   */CORR  60\n /*********************************************************************/CORR  70\n    PROCEDURE (N,M,IO,X,XBAR,STD,RX,R,B),.                              CORR  80\n    DECLARE                                                             CORR  90\n         ERROR EXTERNAL CHARACTER (1),                                  CORR 100\n         (I,IO,J,K,KK,M,N)                                              CORR 110\n         FIXED BINARY,                                                  CORR 120\n         (X(*,*),D(M),FN,FKK)                                           CORR 130\n         FLOAT BINARY,                                                  CORR 140\n         (R(*,*),RX(*,*),XBAR(*),STD(*),B(*),T(M))                      CORR 150\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/CORR 160\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/CORR 170\n /*                                                                   */CORR 180\n    ERROR='0',.                                                         CORR 190\n    IF N LE 0 OR M LE 0                /* THE NUMBER OF OBSERVATIONS  */CORR 200\n    THEN DO,.                          /* OR THE NUMBER OF VARIABLES  */CORR 210\n         ERROR='1',.                   /* ARE LESS THAN OR EQUAL TO   */CORR 220\n         GO TO FIN,.                   /* ZERO.                       */CORR 230\n         END,.                                                          CORR 240\n    FN   =N,.                          /* INITIALIZATION              */CORR 250\n    T    =0.0,.                                                         CORR 260\n         DO I = 1 TO M,.                                                CORR 270\n         B(I) =0.0,.                                                    CORR 280\n              DO J = 1 TO M,.                                           CORR 290\n              R(I,J)=0.0,.                                              CORR 300\n              END,.                                                     CORR 310\n         END,.                                                          CORR 320\n    IF IO NE 0                                                          CORR 330\n    THEN DO,.                                                           CORR 340\n              DO J = 1 TO M,.          /* DATA IS ALREADY IN CORE     */CORR 350\n                   DO I = 1 TO N,.                                      CORR 360\n                   T(J) =T(J)+X(I,J),.                                  CORR 370\n                   END,.                                                CORR 380\n              XBAR(J)=T(J),.                                            CORR 390\n              T(J) =T(J)/FN,.                                           CORR 400\n              END,.                                                     CORR 410\n              DO I = 1 TO N,.                                           CORR 420\n                   DO J = 1 TO M,.                                      CORR 430\n                   D(J) =X(I,J)-T(J),.                                  CORR 440\n                   B(J) =B(J)+D(J),.                                    CORR 450\n                   END,.                                                CORR 460\n                   DO J = 1 TO M,.                                      CORR 470\n                        DO K = J TO M,.                                 CORR 480\n                        R(J,K)=R(J,K)+D(J)*D(K),.                       CORR 490\n                        END,.                                           CORR 500\n                   END,.                                                CORR 510\n              END,.                                                     CORR 520\n         GO TO CALC,.                                                   CORR 530\n         END,.                                                          CORR 540\n /*                                                                   */CORR 550\n /*      READ OBSERVATIONS AND CALCULATE TEMPORARY MEANS              */CORR 560\n /*                                                                   */CORR 570\n    IF N LT M                                                           CORR 580\n    THEN KK   =N,.                                                      CORR 590\n    ELSE KK   =M,.                                                      CORR 600\n    FKK  =KK,.                                                          CORR 610\n         DO I = 1 TO KK,.                                               CORR 620\n         CALL DAT2 (M,D),.                                              CORR 630\n              DO J = 1 TO M,.                                           CORR 640\n              T(J) =T(J)+D(J),.                                         CORR 650\n              RX(I,J)=D(J),.                                            CORR 660\n              END,.                                                     CORR 670\n         END,.                                                          CORR 680\n         DO J = 1 TO M,.                                                CORR 690\n         XBAR(J)=T(J),.                                                 CORR 700\n         T(J) =T(J)/FKK,.                                               CORR 710\n         END,.                                                          CORR 720\n /*                                                                   */CORR 730\n /*      CALCULATE SUMS OF CROSS-PRODUCTS OF DEVIATIONS FROM          */CORR 740\n /*      TEMPORARY MEANS FOR M OBSERVATIONS.                          */CORR 750\n /*                                                                   */CORR 760\n         DO I = 1 TO KK,.                                               CORR 770\n              DO J = 1 TO M,.                                           CORR 780\n              D(J) =RX(I,J)-T(J),.                                      CORR 790\n              END,.                                                     CORR 800\n              DO J = 1 TO M,.                                           CORR 810\n              B(J) =B(J)+D(J),.                                         CORR 820\n                   DO K = J TO M,.                                      CORR 830\n                   R(J,K)=R(J,K)+D(J)*D(K),.                            CORR 840\n                   END,.                                                CORR 850\n              END,.                                                     CORR 860\n         END,.                                                          CORR 870\n    IF N GT KK                                                          CORR 880\n /*                                                                   */CORR 890\n /*      READ THE REST OF THE OBSERVATIONS ONE AT A TIME, SUM THE     */CORR 900\n /*      OBSERVATIONS, AND CALCULATE SUMS OF CROSS PRODUCTS OF        */CORR 910\n /*      DEVIATIONS FROM TEMPORARY MEANS.                             */CORR 920\n /*                                                                   */CORR 930\n    THEN DO,.                                                           CORR 940\n              DO I = 1 TO N-KK,.                                        CORR 950\n              CALL DAT2 (M,D),.                                         CORR 960\n                   DO J = 1 TO M,.                                      CORR 970\n                   XBAR(J)=XBAR(J)+D(J),.                               CORR 980\n                   D(J) =D(J)-T(J),.                                    CORR 990\n                   B(J) =B(J)+D(J),.                                    CORR1000\n                   END,.                                                CORR1010\n                   DO J = 1 TO M,.                                      CORR1020\n                        DO K = J TO M,.                                 CORR1030\n                        R(J,K)=R(J,K)+D(J)*D(K),.                       CORR1040\n                        END,.                                           CORR1050\n                   END,.                                                CORR1060\n              END,.                                                     CORR1070\n         END,.                                                          CORR1080\n /*                                                                   */CORR1090\n /*      ADJUST SUMS OF CROSS-PRODUCTS OF DEVIATIONS FROM TEMP. MEANS */CORR1100\n /*                                                                   */CORR1110\n CALC..                                                                 CORR1120\n         DO I = 1 TO M,.                                                CORR1130\n         XBAR(I)=XBAR(I)/FN,.          /* CALCULATE MEANS.            */CORR1140\n              DO J = I TO M,.                                           CORR1150\n              RX(I,J)=R(I,J)-B(I)*B(J)/FN,.                             CORR1160\n              RX(J,I)=RX(I,J),.                                         CORR1170\n              END,.                                                     CORR1180\n         STD(I)=SQRT(ABS(RX(I,I))),.                                    CORR1190\n /*                                                                   */CORR1200\n /*    COPY THE DIAGONAL OF THE MATRIX OF SUMS OF CROSS PRODUCTS OF   */CORR1210\n /*    DEVIATIONS FROM THE MEANS.                                     */CORR1220\n /*                                                                   */CORR1230\n         B(I) =RX(I,I),.                                                CORR1240\n         END,.                                                          CORR1250\n /*                                                                   */CORR1260\n /*      COMPUTE CORRELATION COEFFICIENTS                             */CORR1270\n /*                                                                   */CORR1280\n         DO J = 1 TO M,.                                                CORR1290\n              DO K = J TO M,.                                           CORR1300\n              FKK  =STD(J)*STD(K),.                                     CORR1310\n              IF FKK= 0.0                                               CORR1320\n              THEN DO,.                                                 CORR1330\n                   ERROR='2',.         /* SOME VARIANCES ARE ZERO     */CORR1340\n                   R(J,K)=0.0,.                                         CORR1350\n                   END,.                                                CORR1360\n              ELSE R(J,K)=RX(J,K)/FKK,.                                 CORR1370\n              R(K,J)=R(J,K),.                                           CORR1380\n              END,.                                                     CORR1390\n         END,.                                                          CORR1400\n /*                                                                   */CORR1410\n /*      COMPUTE STANDARD DEVIATIONS                                  */CORR1420\n /*                                                                   */CORR1430\n         IF N=1                                                         CORR1440\n         THEN DO,.                                                      CORR1450\n              DO I=1 TO N,.                                             CORR1460\n              STD(I)    =0,.                                            CORR1470\n              END,.                                                     CORR1480\n              GO TO FIN,.                                               CORR1490\n              END,.                                                     CORR1500\n         FN   =SQRT(N-1),.                                              CORR1510\n         DO I = 1 TO M,.                                                CORR1520\n         STD(I)=STD(I)/FN,.                                             CORR1530\n         END,.                                                          CORR1540\n FIN..                                                                  CORR1550\n    RETURN,.                                                            CORR1560\n    END,.                              /*END OF PROCEDURE CORR        */CORR1570\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n ORDR..                                                                 ORDR  10\n /*********************************************************************/ORDR  20\n /*                                                                   */ORDR  30\n /*      TO CONSTRUCT FROM A LARGER MATRIX OF CORRELATION COEFFICIENTS*/ORDR  40\n /*      A SUBSET MATRIX OF INTERCORRELATIONS AMONG INDEPENDENT VAR-  */ORDR  50\n /*      IABLES AND A VECTOR OF INTERCORRELATIONS OF INDEPENDENT      */ORDR  60\n /*      VARIABLES WITH DEPENDENT VARIABLE.                           */ORDR  70\n /*                                                                   */ORDR  80\n /*********************************************************************/ORDR  90\n    PROCEDURE (M,R,NDEP,K,ISAVE,RX,RY),.                                ORDR 100\n    DECLARE                                                             ORDR 110\n         (ISAVE(*),I,J,K,L,L1)                                          ORDR 120\n         FIXED BINARY,                                                  ORDR 130\n         ERROR EXTERNAL CHARACTER(1),                                   ORDR 140\n         (R(*,*),RX(K,K),RY(K))                                         ORDR 150\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/ORDR 160\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/ORDR 170\n /*                                                                   */ORDR 180\n /*      COPY INTERCORRELATIONS OF INDEPENDENT VARIABLES WITH         */ORDR 190\n /*      DEPENDENT VARIABLE                                           */ORDR 200\n /*                                                                   */ORDR 210\n    ERROR='0',.                                                         ORDR 220\n    IF M LE 0                          /* THE NUMBER OF VARIABLES IS  */ORDR 230\n    THEN DO,.                          /* LESS THAN OR EQUAL TO ZERO. */ORDR 240\n         ERROR='1',.                                                    ORDR 250\n         GO TO FIN,.                                                    ORDR 260\n         END,.                                                          ORDR 270\n         DO I=1 TO K,.                                                  ORDR 280\n         IF ISAVE(K) = NDEP            /* INVALID K                   */ORDR 290\n         OR ISAVE(K) LE 0                                               ORDR 300\n         OR ISAVE(K) GT M                                               ORDR 310\n         THEN DO,.                                                      ORDR 320\n              ERROR='3',.                                               ORDR 330\n              GO TO FIN,.                                               ORDR 340\n              END,.                                                     ORDR 350\n         END,.                                                          ORDR 360\n    IF NDEP LE 0 OR NDEP GT M          /* INVALID DEPENDENT VARIABLE  */ORDR 370\n    THEN DO,.                                                           ORDR 380\n         ERROR='2',.                                                    ORDR 390\n         GO TO FIN,.                                                    ORDR 400\n         END,.                                                          ORDR 410\n    IF K LE 0 OR K GE M                /*INVALID NUMBER OF INDEPENDENT*/ORDR 420\n    THEN DO,.                          /*        VARIABLES            */ORDR 430\n         ERROR='4',.                                                    ORDR 440\n         GO TO FIN,.                                                    ORDR 450\n         END,.                                                          ORDR 460\n         DO I = 1 TO K,.                                                ORDR 470\n         L1   =ISAVE(I),.                                               ORDR 480\n         RY(I)=R(NDEP,L1),.                                             ORDR 490\n /*                                                                   */ORDR 500\n /*      COPY A SUBSET MATRIX OF INTERCORRELATIONS AMONG INDEPENDENT  */ORDR 510\n /*      VARIABLES                                                    */ORDR 520\n /*                                                                   */ORDR 530\n              DO J = 1 TO K,.                                           ORDR 540\n              L2   =ISAVE(J),.                                          ORDR 550\n              IF L2 LT L1                                               ORDR 560\n              THEN RX(I,J)=RX(J,I),.                                    ORDR 570\n              ELSE RX(I,J)=R(L1,L2),.                                   ORDR 580\n              END,.                                                     ORDR 590\n         END,.                                                          ORDR 600\n /*                                                                   */ORDR 610\n /*      PLACE THE SUBSCRIPT NUMBER OF THE DEPENDENT VARIABLE         */ORDR 620\n /*      IN ISAVE(K+1)                                                */ORDR 630\n /*                                                                   */ORDR 640\n    ISAVE(K+1)=NDEP,.                                                   ORDR 650\n FIN..                                                                  ORDR 660\n    RETURN,.                                                            ORDR 670\n    END,.                              /*END OF PROCEDURE ORDR        */ORDR 680\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n MINV..                                                                 MINV  10\n /*********************************************************************/MINV  20\n /*                                                                   */MINV  30\n /*      TO INVERT A MATRIX                                           */MINV  40\n /*                                                                   */MINV  50\n /*********************************************************************/MINV  60\n    PROCEDURE (A,N,D,CON),.                                             MINV  70\n    DECLARE                                                             MINV  80\n         ERROR EXTERNAL CHARACTER(1),                                   MINV  90\n         (I,J,K,N,L(N),M(N))                                            MINV 100\n         FIXED BINARY,                                                  MINV 110\n         (A(*,*),BIGA,HOLD,D,CON,S)                                     MINV 120\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/MINV 130\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/MINV 140\n /*                                                                   */MINV 150\n    ERROR='0',.                                                         MINV 160\n    IF N LE 0                                                           MINV 170\n    THEN DO,.                                                           MINV 180\n         ERROR='1',.                   /* ORDER OF MATRIX = 0.        */MINV 190\n         GO TO FIN,.                                                    MINV 200\n         END,.                                                          MINV 210\n    IF CON= 0                                                           MINV 220\n    THEN S    =1.0E-5,.                /* SINGLE PRECISION VERSION /*S*/MINV 230\n  /*THEN S    =1.0E-15,.               /* DOUBLE PRECISION VERSION /*D*/MINV 240\n    ELSE S    =CON,.                                                    MINV 250\n    IF N = 1                           /* INVERT A SCALAR             */MINV 260\n    THEN DO,.                                                           MINV 270\n         D    =A(1,1),.                                                 MINV 280\n         IF ABS(D) LE S                                                 MINV 290\n         THEN DO,.                                                      MINV 300\n              ERROR='2',.                                               MINV 310\n              END,.                                                     MINV 320\n         ELSE A(1,1) = 1/D,.                                            MINV 330\n         GO TO FIN,.                                                    MINV 340\n         END,.                                                          MINV 350\n    D    =1.0,.                        /* SEARCH FOR LARGEST ELEMENT  */MINV 360\n         DO K = 1 TO N,.                                                MINV 370\n         L(K) =K,.                                                      MINV 380\n         M(K) =K,.                                                      MINV 390\n         BIGA =A(K,K),.                                                 MINV 400\n              DO I=K TO N,.                                             MINV 410\n                   DO J=K TO N,.                                        MINV 420\n                   IF ABS(BIGA) LT ABS(A(I,J))                          MINV 430\n                   THEN DO,.                                            MINV 440\n                        BIGA =A(I,J),.                                  MINV 450\n                        L(K) =I,.                                       MINV 460\n                        M(K) =J,.                                       MINV 470\n                        END,.                                           MINV 480\n                   END,.                                                MINV 490\n              END,.                                                     MINV 500\n         J    =L(K),.                  /* INTERCHANGE ROWS            */MINV 510\n         IF L(K) GT K                                                   MINV 520\n         THEN DO,.                                                      MINV 530\n                   DO I = 1 TO N,.                                      MINV 540\n                   HOLD =-A(K,I),.                                      MINV 550\n                   A(K,I)=A(J,I),.                                      MINV 560\n                   A(J,I)=HOLD,.                                        MINV 570\n                   END,.                                                MINV 580\n              END,.                                                     MINV 590\n         I    =M(K),.                  /* INTERCHANGE COLUMNS         */MINV 600\n         IF M(K) GT K                                                   MINV 610\n         THEN DO,.                                                      MINV 620\n                   DO J = 1 TO N,.                                      MINV 630\n                   HOLD =-A(J,K),.                                      MINV 640\n                   A(J,K)=A(J,I),.                                      MINV 650\n                   A(J,I)=HOLD,.                                        MINV 660\n                   END,.                                                MINV 670\n              END,.                                                     MINV 680\n         IF ABS(BIGA) LE S                                              MINV 690\n         THEN DO,.                                                      MINV 700\n              D    =0.0,.                                               MINV 710\n              GO TO COMP,.                                              MINV 720\n              END,.                                                     MINV 730\n /*                                                                   */MINV 740\n /*      DIVIDE COLUMNS BY MINUS PIVOT (VALUE OF PIVOT ELEMENT IS     */MINV 750\n /*      CONTAINED IN BIGA)                                           */MINV 760\n              DO I = 1 TO N,.                                           MINV 770\n              IF I NE K                                                 MINV 780\n              THEN A(I,K)=A(I,K)/(-A(K,K)),.                            MINV 790\n              END,.                                                     MINV 800\n              DO I = 1 TO N,.          /* REDUCE MATRIX               */MINV 810\n              IF I NE K                                                 MINV 820\n              THEN DO,.                                                 MINV 830\n                        DO J = 1 TO N,.                                 MINV 840\n                        IF J NE K                                       MINV 850\n                        THEN A(I,J)=A(I,K)*A(K,J)+A(I,J),.              MINV 860\n                        END,.                                           MINV 870\n                   END,.                                                MINV 880\n              END,.                                                     MINV 890\n              DO J = 1 TO N,.                                           MINV 900\n              IF J NE K                /* DIVIDE BY ROW PIVOT         */MINV 910\n              THEN A(K,J)=A(K,J)/A(K,K),.                               MINV 920\n              END,.                                                     MINV 930\n         D    =D*A(K,K),.              /* COMPUTE DETERMINANT         */MINV 940\n COMP..                                                                 MINV 950\n         IF ABS(D) LE S                                                 MINV 960\n         THEN DO,.                                                      MINV 970\n              ERROR='2',.              /* DETERMINANT IS ZERO         */MINV 980\n              GO TO FIN,.                                               MINV 990\n              END,.                                                     MINV1000\n         A(K,K)=1.0/A(K,K),.           /* REPLACE PIVOT BY RECIPROCAL */MINV1010\n         END,.                                                          MINV1020\n /*                                                                   */MINV1030\n /*      FINAL ROW AND COLUMN INTERCHANGE                             */MINV1040\n /*                                                                   */MINV1050\n    K    =N,.                                                           MINV1060\n LOOP..                                                                 MINV1070\n    K    =K-1,.                                                         MINV1080\n    IF K GT 0                                                           MINV1090\n    THEN DO,.                                                           MINV1100\n         I    =L(K),.                                                   MINV1110\n         IF I GT K                                                      MINV1120\n         THEN DO,.                                                      MINV1130\n                   DO J = 1 TO N,.                                      MINV1140\n                   HOLD =A(J,K),.                                       MINV1150\n                   A(J,K)=-A(J,I),.                                     MINV1160\n                   A(J,I)=HOLD,.                                        MINV1170\n                   END,.                                                MINV1180\n              END,.                                                     MINV1190\n         J    =M(K),.                                                   MINV1200\n         IF J GT K                                                      MINV1210\n         THEN DO,.                                                      MINV1220\n                   DO I = 1 TO N,.                                      MINV1230\n                   HOLD =A(K,I),.                                       MINV1240\n                   A(K,I)=-A(J,I),.                                     MINV1250\n                   A(J,I)=HOLD,.                                        MINV1260\n                   END,.                                                MINV1270\n              END,.                                                     MINV1280\n         GO TO LOOP,.                                                   MINV1290\n         END,.                                                          MINV1300\n FIN..                                                                  MINV1310\n    RETURN,.                                                            MINV1320\n    END,.                              /*END OF PROCEDURE MINV        */MINV1330\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n MLTR..                                                                 MLTR  10\n /*********************************************************************/MLTR  20\n /*                                                                   */MLTR  30\n /*      TO PERFORM A MULTIPLE LINEAR REGRESSION ANALYSIS FOR A       */MLTR  40\n /*      DEPENDENT VARIABLE AND A SET OF INDEPENDENT VARIABLES.       */MLTR  50\n /*                                                                   */MLTR  60\n /*********************************************************************/MLTR  70\n    PROCEDURE (N,K,XBAR,STD,D,RX,RY,ISAVE,B,SB,T,BETA,ANS),.            MLTR  80\n    DECLARE                                                             MLTR  90\n         ERROR EXTERNAL CHARACTER (1),                                  MLTR 100\n         (I,IO,J,M,MM,MP,MQ,N,N1,ISAVE(*))                              MLTR 110\n         FIXED BINARY,                                                  MLTR 120\n         (XBAR(*),STD(*),D(*),RX(*,*),RY(*),B(*),SB(*),T(*),BETA(*),    MLTR 130\n         ANS(10),RM,BO,SSAR,SSDR,FK,FNN,SY,SSARM,SSDRM,F)               MLTR 140\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/MLTR 150\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/MLTR 160\n /*                                                                   */MLTR 170\n    ERROR='0',.                                                         MLTR 180\n    IF K LE 0 OR N LE K                /* THE NUMBER OF VARIABLES IS  */MLTR 190\n    THEN DO,.                          /* LESS THAN OR EQUAL TO ZERO  */MLTR 200\n         ERROR='1',.                   /* OR THE NO. OF OBSERVATIONS  */MLTR 210\n         GO TO S10,.                   /* IS LESS THAN OR EQUAL TO THE*/MLTR 220\n         END,.                         /* THE NUMBER OF VARIABLES     */MLTR 230\n    MM   =K+1,.                                                         MLTR 240\n    FK   =K,.                                                           MLTR 250\n         DO J = 1 TO K,.                                                MLTR 260\n         BETA(J)=0.0,.                                                  MLTR 270\n         B(J) =0.0,.                                                    MLTR 280\n              DO I = 1 TO K,.                                           MLTR 290\n              BETA(J)=BETA(J)+RY(I)*RX(I,J),.                           MLTR 300\n              END,.                                                     MLTR 310\n         END,.                                                          MLTR 320\n    RM   =0.0,.                                                         MLTR 330\n    BO   =0.0,.                                                         MLTR 340\n    L1   =ISAVE(MM),.                                                   MLTR 350\n /*                                                                   */MLTR 360\n /*      COEFFICIENT OF DETERMINATION                                 */MLTR 370\n /*                                                                   */MLTR 380\n         DO I = 1 TO K,.                                                MLTR 390\n         RM   =RM+BETA(I)*RY(I),.                                       MLTR 400\n /*                                                                   */MLTR 410\n /*      TEST ACCURACY OF THE RESULT                                  */MLTR 420\n /*                                                                   */MLTR 430\n         IF RM LT 0 OR RM GT 1                                          MLTR 440\n         THEN DO,.                                                      MLTR 450\n              ERROR='2',.              /* INVALID MULTIPLE R          */MLTR 460\n              GO TO S10,.                                               MLTR 470\n              END,.                                                     MLTR 480\n         L    =ISAVE(I),.              /* REGRESSION COEFFICIENT      */MLTR 490\n         B(I) =BETA(I)*(STD(L1)/STD(L)),.                               MLTR 500\n         BO   =BO+B(I)*XBAR(L),.       /* INTERCEPT                   */MLTR 510\n         END,.                                                          MLTR 520\n    BO   =XBAR(L1)-BO,.                                                 MLTR 530\n /*                                                                   */MLTR 540\n /*      SUM OF SQUARES ATTRIBUTED TO REGRESSION                      */MLTR 550\n /*                                                                   */MLTR 560\n    SSAR =RM*D(L1),.                                                    MLTR 570\n    IF SSAR GT D(L1)                   /* TEST SUM OF SQUARES REDUCED */MLTR 580\n    THEN DO,.                                                           MLTR 590\n         ERROR='3',.                   /* REDUCED SUM OF SQUARES      */MLTR 600\n         GO TO S10,.                   /* GREATER THAN THE TOTAL      */MLTR 610\n         END,.                         /* SUM OF SQUARES              */MLTR 620\n    RM   =SQRT(ABS(RM)),.              /* MULTIPLE CORRELATION COEFF. */MLTR 630\n /*                                                                   */MLTR 640\n /*      SUM OF SQUARES OF DEVIATIONS FROM REGRESSION                 */MLTR 650\n /*                                                                   */MLTR 660\n    SSDR =D(L1)-SSAR,.                                                  MLTR 670\n    FNN  =N-K-1,.                      /* DEGREES OF FREEDOM          */MLTR 680\n    IF FNN LE 0.0                                                       MLTR 690\n    THEN DO,.                                                           MLTR 700\n         ERROR='1',.                   /* SAMPLE SIZE TOO SMALL       */MLTR 710\n         GO TO S10,.                                                    MLTR 720\n         END,.                                                          MLTR 730\n    SY   =SSDR/FNN,.                   /* VARIANCE OF ESTIMATE        */MLTR 740\n /*                                                                   */MLTR 750\n /*      STANDARD DEVIATIONS OF REGRESSION COEFFICIENTS               */MLTR 760\n /*                                                                   */MLTR 770\n         DO J = 1 TO K,.                                                MLTR 780\n         L    =ISAVE(J),.                                               MLTR 790\n         SB(J)=SQRT(ABS((RX(J,J)/D(L))*SY)),.                           MLTR 800\n         T(J) =B(J)/SB(J),.            /* COMPUTE T-VALUES            */MLTR 810\n         END,.                                                          MLTR 820\n    SY   =SQRT(ABS(SY)),.              /* STANDARD ERROR OF ESTIMATE  */MLTR 830\n    SSARM=SSAR/FK,.                    /* F-VALUE                     */MLTR 840\n    SSDRM=SSDR/FNN,.                                                    MLTR 850\n    F    =SSARM/SSDRM,.                                                 MLTR 860\n    ANS(1)=BO,.                                                         MLTR 870\n    ANS(2)=RM,.                                                         MLTR 880\n    ANS(3)=SY,.                                                         MLTR 890\n    ANS(4)=SSAR,.                                                       MLTR 900\n    ANS(5)=FK,.                                                         MLTR 910\n    ANS(6)=SSARM,.                                                      MLTR 920\n    ANS(7)=SSDR,.                                                       MLTR 930\n    ANS(8)=FNN,.                                                        MLTR 940\n    ANS(9)=SSDRM,.                                                      MLTR 950\n    ANS(10)=F,.                                                         MLTR 960\n S10..                                                                  MLTR 970\n    RETURN,.                                                            MLTR 980\n    END,.                              /*END OF PROCEDURE MLTR        */MLTR 990\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n DAT2..                                                                 DAT2  10\n /*********************************************************************/DAT2  20\n /*                                                                   */DAT2  30\n /*      TO READ FLOATING POINT DATA, ONE OBSERVATION AT A TIME.      */DAT2  40\n /*      DATA MAY BE SAVED ON A DATA SET.                             */DAT2  50\n /*                                                                   */DAT2  60\n /*********************************************************************/DAT2  70\n    PROCEDURE (M,D),.                                                   DAT2  80\n    DECLARE                                                             DAT2  90\n         XDATA FILE STREAM ENVIRONMENT (CONSECUTIVE V(2000,200)),       DAT2 100\n         (NCARD,NV) EXTERNAL,                                           DAT2 110\n         CH CHARACTER(NCARD),                                           DAT2 120\n         (I,M,MM) FIXED BINARY,                                         DAT2 130\n         D(*) FLOAT BINARY,.                                            DAT2 140\n /*                                                                   */DAT2 150\n    ON ENDFILE (SYSIN)                                                  DAT2 160\n    GO TO EXIT,.                                                        DAT2 170\n    GET EDIT (CH) (A(NCARD)),.                                          DAT2 180\n    MM   =CEIL(M/12),.                                                  DAT2 190\n    GET STRING (CH) EDIT ((D(I) DO I= 1 TO M))                          DAT2 200\n         ((MM)((12)F(6,0),X(8))),.                                      DAT2 210\n    IF NV= 1                                                            DAT2 220\n    THEN PUT FILE (XDATA) EDIT ((D(I) DO I= 1 TO M)) ((M)F(6,0)),.      DAT2 230\n    REVERT ENDFILE (SYSIN),.                                            DAT2 240\n    RETURN,.                                                            DAT2 250\n EXIT..                                                                 DAT2 260\n    PUT FILE (SYSPRINT) EDIT ('ERROR  INSUFFICIENT DATA')               DAT2 270\n         (SKIP(1),COLUMN(10),A),.                                       DAT2 280\n    STOP,.                                                              DAT2 290\n    END,.                              /*END OF PROCEDURE DAT2        */DAT2 300\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n IDT1..                                                                 IDT1  10\n /*********************************************************************/IDT1  20\n /*                                                                   */IDT1  30\n /*      TO READ FIXED POINT DATA.                                    */IDT1  40\n /*                                                                   */IDT1  50\n /*********************************************************************/IDT1  60\n    PROCEDURE (M,IX),.                                                  IDT1  70\n    DECLARE                                                             IDT1  80\n         CH CHARACTER (80),                                             IDT1  90\n         (IX(*),NF,N1,N2,M,I)                                           IDT1 100\n         FIXED BINARY,.                                                 IDT1 110\n    NF   =40,.                                                          IDT1 120\n    N1   =1,.                                                           IDT1 130\n    N2   =NF,.                                                          IDT1 140\n S10..                                                                  IDT1 150\n    IF M LE N2                                                          IDT1 160\n    THEN N2   =M,.                                                      IDT1 170\n    GET EDIT (CH) (A(80)),.                                             IDT1 180\n    GET STRING (CH) EDIT ((IX(I) DO I= N1 TO N2)) ((NF)F(2)),.          IDT1 190\n    N1   =N2+1,.                                                        IDT1 200\n    IF N1 LE M                                                          IDT1 210\n    THEN DO,.                                                           IDT1 220\n         N2   =N2+NF,.                                                  IDT1 230\n         GO TO S10,.                                                    IDT1 240\n         END,.                                                          IDT1 250\n    RETURN,.                                                            IDT1 260\n    END,.                              /*END OF PROCEDURE IDT1        */IDT1 270\n/*\n//GO.XDATA DD UNIT=SYSDA,SPACE=(TRK,(50,20))\n//GO.SYSIN  DD  *\nSAMPLE000300602 1                                                             10\n    29   289   216    85    14     1                                          20\n    30   391   244    92    16     2                                          30\n    30   424   246    90    18     2                                          40\n    30   313   239    91    10     0                                          50\n    35   243   275    95    30     2                                          60\n    35   365   219    95    21     2                                          70\n    43   396   267   100    39     3                                          80\n    43   356   274    79    19     2                                          90\n    44   346   255   126    56     3                                         100\n    44   156   258    95    28     0                                         110\n    44   278   249   110    42     4                                         120\n    44   349   252    88    21     1                                         130\n    44   141   236   129    56     1                                         140\n    44   245   236    97    24     1                                         150\n    45   297   256   111    45     3                                         160\n    45   310   262    94    20     2                                         170\n    45   151   339    96    35     3                                         180\n    45   370   357    88    15     4                                         190\n    45   379   198   147    64     4                                         200\n    45   463   206   105    31     3                                         210\n    45   316   245   132    60     4                                         220\n    45   280   225   108    36     4                                         230\n    44   395   215   101    27     1                                         240\n    49   139   220   136    59     0                                         250\n    49   245   205   113    37     4                                         260\n    49   373   215    88    25     1                                         270\n    51   224   215   118    54     3                                         280\n    51   677   210   116    33     4                                         290\n    51   424   210   140    59     4                                         300\n    51   150   210   105    30     0                                         310\n010605                                                                       320\n0102030405                                                                   330\n010603                                                                       340\n020305                                                                       350\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FILE04": {"ttr": 5380, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01\\x06\\x04O\\x01\\x06\\x04O\\x14\\x01\\x02\\xd4\\x02\\xd4\\x00\\x00\\xd7\\xd3\\xf1\\xe2\\xe2\\xd7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-02-13T00:00:00", "modifydate": "2006-02-13T14:01:37", "lines": 724, "newlines": 724, "modlines": 0, "user": "PL1SSP"}, "text": "//JOBC  JOB 111-1111,'SSP PL/1',MSGLEVEL=1\n//STEP EXEC PL1LFCLG,PARM.PL1L='NOLIST,NOATR,NOXREF,CHAR48'\n//PL1L.SYSIN  DD  *\n STEP..                                                                 STEP  10\n /*********************************************************************/STEP  20\n /*                                                                   */STEP  30\n /*      TO READ THE PROBLEM PARAMETER CARD FOR A STEP-WISE REGRESSION*/STEP  40\n /*      READ SUBSET SELECTION CARD, CALL THE PROCEDURES TO CALCULATE */STEP  50\n /*      MEANS, STANDARD DEVIATIONS, AND THE PROCEDURE THAT PERFORMS  */STEP  60\n /*      STEP-WISE REGRESSION.                                        */STEP  70\n /*                                                                   */STEP  80\n /*********************************************************************/STEP  90\n    PROCEDURE OPTIONS (MAIN),.                                          STEP 100\n    DECLARE                                                             STEP 110\n         XDATA FILE STREAM ENVIRONMENT (CONSECUTIVE V(2000,200)),       STEP 120\n         (I,IO,J,K,KK,M,MM,N,NR,NS,NSEL) FIXED BINARY,                  STEP 130\n         PR1  CHARACTER (6),                                            STEP 140\n         (NCARD,NV) EXTERNAL,                                           STEP 150\n         ERROR EXTERNAL CHARACTER (1),                                  STEP 160\n         CH   CHARACTER (80),.                                          STEP 170\n /*                                                                   */STEP 180\n    ON ENDFILE (SYSIN) GO TO EXIT,.                                     STEP 190\n S100..                                                                 STEP 200\n    GET EDIT (CH) (A(80)),.                                             STEP 210\n    GET STRING (CH) EDIT  (PR1,N,M,NS,PCT,NR,NCARD) (A(6),F(5),2 F(2),  STEP 220\n         F(6,0),F(1),F(2)),.                                            STEP 230\n /*                                                                   */STEP 240\n /*      READ PROBLEM PARAMETER CARD                                  */STEP 250\n /*                                                                   */STEP 260\n /*      PR1 - PROBLEM CODE (MAY BE ALPHAMERIC)                       */STEP 270\n /*      N   - NUMBER OF OBSERVATIONS                                 */STEP 280\n /*      M   - NUMBER OF VARIABLES                                    */STEP 290\n /*      NS  - NUMBER OF SELECTIONS                                   */STEP 300\n /*      PCT - A CONSTANT VALUE OF PROPORTION OF SUM OF SQUARES THAT  */STEP 310\n /*            WILL BE USED TO LIMIT VARIABLES ENTERING IN THE REGRES-*/STEP 320\n /*            SION                                                   */STEP 330\n /*      NR  - OPTION CODE FOR TABLE OF RESIDUALS                     */STEP 340\n /*             0 - IF IT IS NOT DESIRED                              */STEP 350\n /*             1 - IF IT IS DESIRED                                  */STEP 360\n /*      NCARD - NUMBER OF DATA CARDS PER OBSERVATION                 */STEP 370\n /*                                                                   */STEP 380\n    NV   =NR,.                                                          STEP 390\n    NCARD=NCARD*80,.                                                    STEP 400\n /*                                                                   */STEP 410\n    PUT EDIT ('STEP-WISE MULTIPLE REGRESSION.....',PR1)                 STEP 420\n         (PAGE,COLUMN(10),A,A),.                                        STEP 430\n    PUT SKIP(2),.                                                       STEP 440\n    PUT EDIT ('NUMBER OF OBSERVATIONS',N) (R(FM1)),.                    STEP 450\n    PUT EDIT ('NUMBER OF VARIABLES   ',M) (R(FM1)),.                    STEP 460\n    PUT EDIT ('NUMBER OF SELECTIONS  ',NS) (R(FM1)),.                   STEP 470\n FM1..                                                                  STEP 480\n    FORMAT (SKIP(1),COLUMN(10),A,F(5)),.                                STEP 490\n    PUT EDIT ('CONSTANT TO LIMIT VARIABLE',PCT)                         STEP 500\n         (SKIP(2),COLUMN(10),A,F(9,5)),.                                STEP 510\n ONE..                                                                  STEP 520\n    BEGIN,.                                                             STEP 530\n    DECLARE                                                             STEP 540\n         (XBAR(M),STD(M),D(M),B(M),RX(M,M),R(M,M),ANS(11),X(1,1),       STEP 550\n         RESI,YEST)                                                     STEP 560\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/STEP 570\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/STEP 580\n         (IDX(M),L(M),NSTEP(5)) FIXED BINARY,.                          STEP 590\n    IO   =0,.                                                           STEP 600\n    X    =0,.                                                           STEP 610\n    OPEN FILE (XDATA) OUTPUT,.                                          STEP 620\n    CALL CORR (N,M,IO,X,XBAR,STD,RX,R,B),.                              STEP 630\n    CLOSE FILE (XDATA),.                                                STEP 640\n    IF ERROR NE '0'                                                     STEP 650\n    THEN PUT EDIT ('IN ROUTINE CORR ERROR CODE = ',ERROR)               STEP 660\n         (SKIP(2),COLUMN(10),A,A(1)),.                                  STEP 670\n /*                                                                   */STEP 680\n /*      PRINT MEANS AND STANDARD DEVIATION                           */STEP 690\n /*                                                                   */STEP 700\n    PUT EDIT ('VARIABLE','MEAN','STANDARD','NO.','DEVIATION')           STEP 710\n         (SKIP(2),COLUMN(10),A,X(5),A,X(5),A,SKIP,COLUMN(13),A,X(16)    STEP 720\n         ,A),.                                                          STEP 730\n         DO I = 1 TO M,.                                                STEP 740\n         PUT EDIT (I,XBAR(I),STD(I)) (SKIP,COLUMN(13),F(2),F(14,5),     STEP 750\n              F(12,5)),.                                                STEP 760\n         END,.                                                          STEP 770\n /*                                                                   */STEP 780\n /*      PRINT CORRELATION MATRIX                                     */STEP 790\n /*                                                                   */STEP 800\n    PUT EDIT ('CORRELATION MATRIX') (SKIP(2),COLUMN(10),A),.            STEP 810\n         DO I = 1 TO M,.                                                STEP 820\n         PUT EDIT ('ROW',I) (SKIP(2),COLUMN(10),A,F(3)),.               STEP 830\n         PUT EDIT ((R(I,J) DO J= 1 TO M)) (SKIP,COLUMN(10),9 F(12,5)),. STEP 840\n         END,.                                                          STEP 850\n    IF NS LE 0                         /* TEST NUMBER OF SELECTIONS   */STEP 860\n    THEN DO,.                                                           STEP 870\n         PUT EDIT ('NUMBER OF SELECTIONS NOT SPECIFIED')                STEP 880\n              (SKIP(2),COLUMN(10),A),.                                  STEP 890\n         GO TO S200,.                                                   STEP 900\n         END,.                                                          STEP 910\n /*                                                                   */STEP 920\n /*      SAVE THE MATRIX OF SUMS OF CROSS-PRODUCTS OF DEVIATION       */STEP 930\n /*                                                                   */STEP 940\n    R    =RX,.                                                          STEP 950\n    NSEL =1,.                                                           STEP 960\n    GO TO S150,.                                                        STEP 970\n /*                                                                   */STEP 980\n /*      COPY THE MATRIX OF SUMS OF CROSS-PRODUCTS OF DEVIATIONS      */STEP 990\n /*                                                                   */STEP1000\n S145..                                                                 STEP1010\n         RX   =R,.                                                      STEP1020\n S150..                                /* READ A SELECTION CARD       */STEP1030\n    PUT EDIT ('SELECTION.....',NSEL) (SKIP(3),COLUMN(10),A,F(2)),.      STEP1040\n    CALL IDT2 (M,IDX),.                                                 STEP1050\n /*                                                                   */STEP1060\n /*      IN EACH POSITION OF IDX, ONE OF THE FOLLOWING CODES MUST BE  */STEP1070\n /*      SPECIFIED.                                                   */STEP1080\n /*        0 OR BLANK - INDEPENDENT VARIABLE AVAILABLE FOR SELECTION  */STEP1090\n /*        1          - INDEPENDENT VARIABLE TO BE FORCED IN REGRES-  */STEP1100\n /*                     SION                                          */STEP1110\n /*        2          - VARIABLE TO BE DELETED                        */STEP1120\n /*        3          - DEPENDENT VARIABLE                            */STEP1130\n /*                                                                   */STEP1140\n /*      CALL THE PROCEDURE TO PERFORM A STEP-WISE REGRESSION ANALYSIS*/STEP1150\n /*                                                                   */STEP1160\n    CALL STRG (M,N,RX,XBAR,IDX,PCT,NSTEP,ANS,L,B,STD),.                 STEP1170\n    IF ERROR NE '0'                                                     STEP1180\n    THEN PUT EDIT ('IN ROUTINE STRG ERROR CODE = ',ERROR)               STEP1190\n         (SKIP(2),COLUMN(10),A,A(1)),.                                  STEP1200\n /*                                                                   */STEP1210\n /*      FIND WHETHER TO PRINT THE TABLE OF RESIDUALS                 */STEP1220\n /*                                                                   */STEP1230\n    IF NR LE 0                                                          STEP1240\n    THEN GO TO S185,.                                                   STEP1250\n /*                                                                   */STEP1260\n /*      PRINT TABLE OF RESIDUALS                                     */STEP1270\n /*                                                                   */STEP1280\n    PUT EDIT ('STEP-WISE MULTIPLE REGRESSION.....',PR1)                 STEP1290\n         (PAGE,COLUMN(10),A,A),.                                        STEP1300\n    PUT EDIT ('SELECTION.....',NSEL) (SKIP(3),COLUMN(10),A,F(2)),.      STEP1310\n    PUT EDIT ('TABLE OF RESIDUALS','CASE NO.','Y VALUE','Y ESTIMATE',   STEP1320\n         'RESIDUAL')                                                    STEP1330\n         (SKIP(2),COLUMN(26),A,SKIP(2),COLUMN(10),A,X(5),A,X(5),A,      STEP1340\n         X(6),A),.                                                      STEP1350\n    MM   =NSTEP(1),.                                                    STEP1360\n    OPEN FILE (XDATA) INPUT,.                                           STEP1370\n         DO I = 1 TO N,.                                                STEP1380\n         GET FILE (XDATA) EDIT ((D(J) DO J= 1 TO M)) ((M)F(6,0)),.      STEP1390\n         YEST =ANS(9),.                                                 STEP1400\n         K    =NSTEP(4),.                                               STEP1410\n              DO J = 1 TO K,.                                           STEP1420\n              KK   =L(J),.                                              STEP1430\n              YEST =YEST+B(J)*D(KK),.                                   STEP1440\n              END,.                                                     STEP1450\n         RESI =D(MM)-YEST,.                                             STEP1460\n         PUT EDIT (I,D(MM) ,YEST,RESI) (COLUMN(10),F(5),F(15,5),        STEP1470\n              2 F(14,5)),.                                              STEP1480\n         END,.                                                          STEP1490\n    CLOSE FILE (XDATA),.                                                STEP1500\n /*                                                                   */STEP1510\n /*      TEST WHETHER ALL SELECTIONS ARE COMPLETED                    */STEP1520\n /*                                                                   */STEP1530\n S185..                                                                 STEP1540\n    IF NSEL LT NS                                                       STEP1550\n    THEN DO,.                                                           STEP1560\n         NSEL =NSEL+1,.                                                 STEP1570\n         PUT EDIT ('STEP-WISE MULTIPLE REGRESSION.....',PR1)            STEP1580\n              (PAGE,COLUMN(10),A,A),.                                   STEP1590\n         GO TO S145,.                                                   STEP1600\n         END,.                                                          STEP1610\n    END,.                                                               STEP1620\n    GO TO S100,.                                                        STEP1630\n EXIT..                                                                 STEP1640\n    PUT FILE (SYSPRINT) EDIT ('END OF SAMPLE PROGRAM')                  STEP1650\n         (SKIP(5),COLUMN(10),A),.                                       STEP1660\n S200..                                                                 STEP1670\n    END,.                              /*END OF PROCEDURE STEP        */STEP1680\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n CORR..                                                                 CORR  10\n /*********************************************************************/CORR  20\n /*                                                                   */CORR  30\n /*      TO COMPUTE MEANS, STANDARD DEVIATIONS, SUMS OF CROSS-PRODUCTS*/CORR  40\n /*      OF DEVIATIONS, AND CORRELATION COEFFICIENTS.                 */CORR  50\n /*                                                                   */CORR  60\n /*********************************************************************/CORR  70\n    PROCEDURE (N,M,IO,X,XBAR,STD,RX,R,B),.                              CORR  80\n    DECLARE                                                             CORR  90\n         ERROR EXTERNAL CHARACTER (1),                                  CORR 100\n         (I,IO,J,K,KK,M,N)                                              CORR 110\n         FIXED BINARY,                                                  CORR 120\n         (X(*,*),D(M),FN,FKK)                                           CORR 130\n         FLOAT BINARY,                                                  CORR 140\n         (R(*,*),RX(*,*),XBAR(*),STD(*),B(*),T(M))                      CORR 150\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/CORR 160\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/CORR 170\n /*                                                                   */CORR 180\n    ERROR='0',.                                                         CORR 190\n    IF N LE 0 OR M LE 0                /* THE NUMBER OF OBSERVATIONS  */CORR 200\n    THEN DO,.                          /* OR THE NUMBER OF VARIABLES  */CORR 210\n         ERROR='1',.                   /* ARE LESS THAN OR EQUAL TO   */CORR 220\n         GO TO FIN,.                   /* ZERO.                       */CORR 230\n         END,.                                                          CORR 240\n    FN   =N,.                          /* INITIALIZATION              */CORR 250\n    T    =0.0,.                                                         CORR 260\n         DO I = 1 TO M,.                                                CORR 270\n         B(I) =0.0,.                                                    CORR 280\n              DO J = 1 TO M,.                                           CORR 290\n              R(I,J)=0.0,.                                              CORR 300\n              END,.                                                     CORR 310\n         END,.                                                          CORR 320\n    IF IO NE 0                                                          CORR 330\n    THEN DO,.                                                           CORR 340\n              DO J = 1 TO M,.          /* DATA IS ALREADY IN CORE     */CORR 350\n                   DO I = 1 TO N,.                                      CORR 360\n                   T(J) =T(J)+X(I,J),.                                  CORR 370\n                   END,.                                                CORR 380\n              XBAR(J)=T(J),.                                            CORR 390\n              T(J) =T(J)/FN,.                                           CORR 400\n              END,.                                                     CORR 410\n              DO I = 1 TO N,.                                           CORR 420\n                   DO J = 1 TO M,.                                      CORR 430\n                   D(J) =X(I,J)-T(J),.                                  CORR 440\n                   B(J) =B(J)+D(J),.                                    CORR 450\n                   END,.                                                CORR 460\n                   DO J = 1 TO M,.                                      CORR 470\n                        DO K = J TO M,.                                 CORR 480\n                        R(J,K)=R(J,K)+D(J)*D(K),.                       CORR 490\n                        END,.                                           CORR 500\n                   END,.                                                CORR 510\n              END,.                                                     CORR 520\n         GO TO CALC,.                                                   CORR 530\n         END,.                                                          CORR 540\n /*                                                                   */CORR 550\n /*      READ OBSERVATIONS AND CALCULATE TEMPORARY MEANS              */CORR 560\n /*                                                                   */CORR 570\n    IF N LT M                                                           CORR 580\n    THEN KK   =N,.                                                      CORR 590\n    ELSE KK   =M,.                                                      CORR 600\n    FKK  =KK,.                                                          CORR 610\n         DO I = 1 TO KK,.                                               CORR 620\n         CALL DAT2 (M,D),.                                              CORR 630\n              DO J = 1 TO M,.                                           CORR 640\n              T(J) =T(J)+D(J),.                                         CORR 650\n              RX(I,J)=D(J),.                                            CORR 660\n              END,.                                                     CORR 670\n         END,.                                                          CORR 680\n         DO J = 1 TO M,.                                                CORR 690\n         XBAR(J)=T(J),.                                                 CORR 700\n         T(J) =T(J)/FKK,.                                               CORR 710\n         END,.                                                          CORR 720\n /*                                                                   */CORR 730\n /*      CALCULATE SUMS OF CROSS-PRODUCTS OF DEVIATIONS FROM          */CORR 740\n /*      TEMPORARY MEANS FOR M OBSERVATIONS.                          */CORR 750\n /*                                                                   */CORR 760\n         DO I = 1 TO KK,.                                               CORR 770\n              DO J = 1 TO M,.                                           CORR 780\n              D(J) =RX(I,J)-T(J),.                                      CORR 790\n              END,.                                                     CORR 800\n              DO J = 1 TO M,.                                           CORR 810\n              B(J) =B(J)+D(J),.                                         CORR 820\n                   DO K = J TO M,.                                      CORR 830\n                   R(J,K)=R(J,K)+D(J)*D(K),.                            CORR 840\n                   END,.                                                CORR 850\n              END,.                                                     CORR 860\n         END,.                                                          CORR 870\n    IF N GT KK                                                          CORR 880\n /*                                                                   */CORR 890\n /*      READ THE REST OF THE OBSERVATIONS ONE AT A TIME, SUM THE     */CORR 900\n /*      OBSERVATIONS, AND CALCULATE SUMS OF CROSS PRODUCTS OF        */CORR 910\n /*      DEVIATIONS FROM TEMPORARY MEANS.                             */CORR 920\n /*                                                                   */CORR 930\n    THEN DO,.                                                           CORR 940\n              DO I = 1 TO N-KK,.                                        CORR 950\n              CALL DAT2 (M,D),.                                         CORR 960\n                   DO J = 1 TO M,.                                      CORR 970\n                   XBAR(J)=XBAR(J)+D(J),.                               CORR 980\n                   D(J) =D(J)-T(J),.                                    CORR 990\n                   B(J) =B(J)+D(J),.                                    CORR1000\n                   END,.                                                CORR1010\n                   DO J = 1 TO M,.                                      CORR1020\n                        DO K = J TO M,.                                 CORR1030\n                        R(J,K)=R(J,K)+D(J)*D(K),.                       CORR1040\n                        END,.                                           CORR1050\n                   END,.                                                CORR1060\n              END,.                                                     CORR1070\n         END,.                                                          CORR1080\n /*                                                                   */CORR1090\n /*      ADJUST SUMS OF CROSS-PRODUCTS OF DEVIATIONS FROM TEMP. MEANS */CORR1100\n /*                                                                   */CORR1110\n CALC..                                                                 CORR1120\n         DO I = 1 TO M,.                                                CORR1130\n         XBAR(I)=XBAR(I)/FN,.          /* CALCULATE MEANS.            */CORR1140\n              DO J = I TO M,.                                           CORR1150\n              RX(I,J)=R(I,J)-B(I)*B(J)/FN,.                             CORR1160\n              RX(J,I)=RX(I,J),.                                         CORR1170\n              END,.                                                     CORR1180\n         STD(I)=SQRT(ABS(RX(I,I))),.                                    CORR1190\n /*                                                                   */CORR1200\n /*    COPY THE DIAGONAL OF THE MATRIX OF SUMS OF CROSS PRODUCTS OF   */CORR1210\n /*    DEVIATIONS FROM THE MEANS.                                     */CORR1220\n /*                                                                   */CORR1230\n         B(I) =RX(I,I),.                                                CORR1240\n         END,.                                                          CORR1250\n /*                                                                   */CORR1260\n /*      COMPUTE CORRELATION COEFFICIENTS                             */CORR1270\n /*                                                                   */CORR1280\n         DO J = 1 TO M,.                                                CORR1290\n              DO K = J TO M,.                                           CORR1300\n              FKK  =STD(J)*STD(K),.                                     CORR1310\n              IF FKK= 0.0                                               CORR1320\n              THEN DO,.                                                 CORR1330\n                   ERROR='2',.         /* SOME VARIANCES ARE ZERO     */CORR1340\n                   R(J,K)=0.0,.                                         CORR1350\n                   END,.                                                CORR1360\n              ELSE R(J,K)=RX(J,K)/FKK,.                                 CORR1370\n              R(K,J)=R(J,K),.                                           CORR1380\n              END,.                                                     CORR1390\n         END,.                                                          CORR1400\n /*                                                                   */CORR1410\n /*      COMPUTE STANDARD DEVIATIONS                                  */CORR1420\n /*                                                                   */CORR1430\n         IF N=1                                                         CORR1440\n         THEN DO,.                                                      CORR1450\n              DO I=1 TO N,.                                             CORR1460\n              STD(I)    =0,.                                            CORR1470\n              END,.                                                     CORR1480\n              GO TO FIN,.                                               CORR1490\n              END,.                                                     CORR1500\n         FN   =SQRT(N-1),.                                              CORR1510\n         DO I = 1 TO M,.                                                CORR1520\n         STD(I)=STD(I)/FN,.                                             CORR1530\n         END,.                                                          CORR1540\n FIN..                                                                  CORR1550\n    RETURN,.                                                            CORR1560\n    END,.                              /*END OF PROCEDURE CORR        */CORR1570\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n STRG..                                                                 STRG  10\n /*********************************************************************/STRG  20\n /*                                                                   */STRG  30\n /*      TO PERFORM A STEP-WISE MULTIPLE REGRESSION ANALYSIS FOR A    */STRG  40\n /*      DEPENDENT VARIABLE AND A SET OF INDEPENDENT VARIABLES.       */STRG  50\n /*                                                                   */STRG  60\n /*********************************************************************/STRG  70\n    PROCEDURE (M,N,D,XBAR,IDX,PCT,NSTEP,ANS,L,B,STD),.                  STRG  80\n    DECLARE                                                             STRG  90\n         (I,ID,IJ,IK,J,K,KK,M,MK,MX,MY,N,NEW,NFO,NZ,NSTEP(*),IDX(*),    STRG 100\n         L(*),LL(M))                                                    STRG 110\n         FIXED BINARY,                                                  STRG 120\n         (D(*,*),XBAR(*),ANS(*),B(*),STD(*),T(M),S(M),BETA(M),RE)       STRG 130\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/STRG 140\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/STRG 150\n         (PCT,ONM,RD)                                                   STRG 160\n         FLOAT BINARY,                                                  STRG 170\n         (ERROR,NSTOP) EXTERNAL CHARACTER (1),.                         STRG 180\n /*                                                                   */STRG 190\n    ERROR='0',.                        /* INITIALIZATION              */STRG 200\n    IF M LE 1 OR N LE M+1              /* THE NUMBER OF VARIABLES M IS*/STRG 210\n    THEN DO,.                          /* NOT GREATER THAN 1 OR THE   */STRG 220\n         ERROR='1',.                   /* NUMBER OF OBSERVATIONS N IS */STRG 230\n         GO TO S150,.                  /* NOT GREATER THAN M+1        */STRG 240\n         END,.                                                          STRG 250\n    IF PCT GE 1.0                                                       STRG 260\n    THEN DO,.                                                           STRG 270\n         ERROR='4',.                   /* SPECIFIED CONSTANT IS       */STRG 280\n         GO TO S150,.                  /* GREATER THAN OR = 1.0       */STRG 290\n         END,.                                                          STRG 300\n    ONM  =N-1,.                                                         STRG 310\n    NFO  =0,.                                                           STRG 320\n    NSTEP(3)=0,.                                                        STRG 330\n    ANS(3)=0,.                                                          STRG 340\n    ANS(4)=0,.                                                          STRG 350\n    NSTOP='0',.                                                         STRG 360\n /*                                                                   */STRG 370\n /*      FIND DEPENDENT VARIABLE, NUMBER OF VARIABLES TO BE FORCED TO */STRG 380\n /*      ENTER IN THE REGRESSION, AND THE NUMBER OF VARIABLES TO BE   */STRG 390\n /*      DELETED                                                      */STRG 400\n /*                                                                   */STRG 410\n         DO I = 1 TO M,.                                                STRG 420\n         LL(I)=1,.                                                      STRG 430\n         IF IDX(I) LE 0                                                 STRG 440\n         THEN GO TO S10,.                                               STRG 450\n         IF IDX(I) LT 2                                                 STRG 460\n         THEN DO,.                                                      STRG 470\n              NFO  =NFO+1,.                                             STRG 480\n              IDX(NFO)=I,.                                              STRG 490\n              GO TO S10,.                                               STRG 500\n              END,.                                                     STRG 510\n         ELSE IF IDX(I)= 2                                              STRG 520\n         THEN DO,.                                                      STRG 530\n              NSTEP(3)=NSTEP(3)+1,.                                     STRG 540\n              LL(I)=-1,.                                                STRG 550\n              GO TO S10,.                                               STRG 560\n              END,.                                                     STRG 570\n         MY   =I,.                                                      STRG 580\n         NSTEP(1)=MY,.                                                  STRG 590\n         ANS(5)=D(MY,MY),.                                              STRG 600\n S10..                                                                  STRG 610\n         END,.                                                          STRG 620\n    NSTEP(2)=NFO,.                                                      STRG 630\n /*                                                                   */STRG 640\n /*      FIND THE MAXIMUM NUMBER OF STEPS                             */STRG 650\n /*                                                                   */STRG 660\n    MX   =M-NSTEP(3)-1,.                                                STRG 670\n /*                                                                   */STRG 680\n /*      START SELECTION OF VARIABLES                                 */STRG 690\n /*                                                                   */STRG 700\n         DO NZ = 1 TO MX,.                                              STRG 710\n         IF N-NZ-1 LE 0                                                 STRG 720\n         THEN DO,.                                                      STRG 730\n              ERROR='3',.              /* DEGREES OF FREEDOM IS 0     */STRG 740\n              GO TO S150,.                                              STRG 750\n              END,.                                                     STRG 760\n         RD   =0,.                                                      STRG 770\n         IF NZ GT NFO                                                   STRG 780\n /*                                                                   */STRG 790\n /*      SELECT NEXT VARIABLE TO ENTER AMONG FORCED VARIABLES         */STRG 800\n /*                                                                   */STRG 810\n         THEN GO TO S20,.                                               STRG 820\n              DO I = 1 TO NFO,.                                         STRG 830\n              K    =IDX(I),.                                            STRG 840\n              IF LL(K) GT 0                                             STRG 850\n              THEN DO,.                                                 STRG 860\n                   RE   =D(K,MY)**2/D(K,K),.                            STRG 870\n                   IF RD LT RE                                          STRG 880\n                   THEN DO,.                                            STRG 890\n                        RD   =RE,.                                      STRG 900\n                        NEW  =K,.                                       STRG 910\n                        END,.                                           STRG 920\n                   END,.                                                STRG 930\n              END,.                                                     STRG 940\n         GO TO S25,.                                                    STRG 950\n /*                                                                   */STRG 960\n /*      SELECT NEXT VARIABLE TO ENTER AMONG NON-FORCED VARIABLES     */STRG 970\n /*                                                                   */STRG 980\n S20..                                                                  STRG 990\n              DO I = 1 TO M,.                                           STRG1000\n              IF I NE MY                                                STRG1010\n              THEN DO,.                                                 STRG1020\n                   IF LL(I) GT 0                                        STRG1030\n                   THEN DO,.                                            STRG1040\n                        RE   =D(I,MY)**2/D(I,I),.                       STRG1050\n                        IF RD LT RE                                     STRG1060\n                        THEN DO,.                                       STRG1070\n                             RD   =RE,.                                 STRG1080\n                             NEW  =I,.                                  STRG1090\n                             END,.                                      STRG1100\n                        END,.                                           STRG1110\n                   END,.                                                STRG1120\n              END,.                                                     STRG1130\n S25..                                                                  STRG1140\n         IF RD LE 0 OR  ANS(5) LE ANS(3)+RD                             STRG1150\n         THEN DO,.                                                      STRG1160\n              ERROR='2',.              /* NEGATIVE SUM OF SQUARES     */STRG1170\n              GO TO S150,.                                              STRG1180\n              END,.                                                     STRG1190\n         RE   =RD/ANS(5),.                                              STRG1200\n /*                                                                   */STRG1210\n /*      TEST WHETHER THE PROPORTION OF THE SUM OF SQUARES REDUCED BY */STRG1220\n /*      THE LAST VARIABLE ENTERED IS GREATER THAN OR EQUAL TO THE    */STRG1230\n /*      SPECIFIED PROPORTION                                         */STRG1240\n /*                                                                   */STRG1250\n         IF RE LT PCT                                                   STRG1260\n         THEN GO TO S150,.                                              STRG1270\n         LL(NEW)=0,.                   /* IT IS GREATER THAN OR EQUAL */STRG1280\n         L(NZ)=NEW,.                                                    STRG1290\n         ANS(1)=RD,.                                                    STRG1300\n         ANS(2)=RE,.                                                    STRG1310\n         ANS(3)=ANS(3)+RD,.                                             STRG1320\n         ANS(4)=ANS(4)+RE,.                                             STRG1330\n         NSTEP(4)=NZ,.                                                  STRG1340\n         NSTEP(5)=NEW,.                                                 STRG1350\n /*                                                                   */STRG1360\n /*      COMPUTE MULTIPLE CORRELATION, F-VALUE FOR ANALYSIS OF        */STRG1370\n /*      VARIANCE, AND STANDARD ERROR OF ESTIMATE                     */STRG1380\n /*                                                                   */STRG1390\n         ANS(6)=SQRT(ANS(4)),.                                          STRG1400\n         RD   =NZ,.                                                     STRG1410\n         RE   =ONM-RD,.                                                 STRG1420\n         RE   =(ANS(5)-ANS(3))/RE,.                                     STRG1430\n         ANS(7)=(ANS(3)/RD)/RE,.                                        STRG1440\n         ANS(8)=SQRT(RE),.                                              STRG1450\n /*                                                                   */STRG1460\n /*      DIVIDE BY THE PIVOTAL ELEMENT                                */STRG1470\n /*                                                                   */STRG1480\n         RD   =D(NEW,NEW),.                                             STRG1490\n              DO J = 1 TO M,.                                           STRG1500\n              IF LL(J) LT 0                                             STRG1510\n              THEN GO TO S40,.                                          STRG1520\n              ELSE IF LL(J) GT 0                                        STRG1530\n              THEN GO TO S30,.                                          STRG1540\n              IF J = NEW                                                STRG1550\n              THEN DO,.                                                 STRG1560\n                   D(NEW,NEW)=1/RD,.                                    STRG1570\n                   GO TO S40,.                                          STRG1580\n                   END,.                                                STRG1590\n              D(J,J)=D(J,J)+D(NEW,J)**2/RD,.                            STRG1600\n S30..                                                                  STRG1610\n              D(NEW,J)=D(NEW,J)/RD,.                                    STRG1620\n S40..                                                                  STRG1630\n              END,.                                                     STRG1640\n /*                                                                   */STRG1650\n /*      COMPUTE REGRESSION COEFFICIENTS                              */STRG1660\n /*                                                                   */STRG1670\n         B(NZ)=D(NEW,MY),.                                              STRG1680\n         IF NZ GT 1                                                     STRG1690\n         THEN DO,.                                                      STRG1700\n              ID   =NZ-1,.                                              STRG1710\n                   DO J = 1 TO ID,.                                     STRG1720\n                   IJ   =NZ-J,.                                         STRG1730\n                   KK   =L(IJ),.                                        STRG1740\n                   B(IJ)=D(KK,MY),.                                     STRG1750\n                        DO K = 1 TO J,.                                 STRG1760\n                        IK   =NZ-K+1,.                                  STRG1770\n                        MK   =L(IK),.                                   STRG1780\n                        B(IJ)=B(IJ)-D(KK,MK)*B(IK),.                    STRG1790\n                        END,.                                           STRG1800\n                   END,.                                                STRG1810\n              END,.                                                     STRG1820\n         ANS(9)=XBAR(MY),.             /* COMPUTE INTERCEPT           */STRG1830\n              DO I = 1 TO NZ,.                                          STRG1840\n              KK   =L(I),.                                              STRG1850\n              ANS(9)=ANS(9)-B(I)*XBAR(KK),.                             STRG1860\n              S(I) =ANS(8)*SQRT(D(KK,KK)),.                             STRG1870\n              T(I) =B(I)/S(I),.                                         STRG1880\n              BETA(I)=B(I)*STD(KK)/STD(MY),.                            STRG1890\n              END,.                                                     STRG1900\n /*                                                                   */STRG1910\n /*      PERFORM A REDUCTION TO ELIMINATE THE LAST VARIABLE ENTERED   */STRG1920\n /*                                                                   */STRG1930\n              DO I = 1 TO M,.                                           STRG1940\n              IF LL(I) GT 0                                             STRG1950\n              THEN DO,.                                                 STRG1960\n                        DO J = 1 TO M,.                                 STRG1970\n                        IF LL(J) GE 0                                   STRG1980\n                        THEN DO,.                                       STRG1990\n                             IF J NE NEW                                STRG2000\n                             THEN D(I,J)=D(I,J)-D(I,NEW)*D(NEW,J),.     STRG2010\n                             END,.                                      STRG2020\n                        END,.                                           STRG2030\n                   D(I,NEW)=D(I,NEW)/(-RD),.                            STRG2040\n                   END,.                                                STRG2050\n              END,.                                                     STRG2060\n /*                                                                   */STRG2070\n /*      ADJUST STANDARD ERROR OF THE ESTIMATE AND MULTIPLE           */STRG2080\n /*      CORRELATION COEFFICIENT                                      */STRG2090\n /*                                                                   */STRG2100\n         RD   =N-NSTEP(4),.                                             STRG2110\n         RD   =ONM/RD,.                                                 STRG2120\n         ANS(10)=SQRT(1-(1-ANS(6)**2)*RD),.                             STRG2130\n         ANS(11)=ANS(8)*SQRT(RD),.                                      STRG2140\n         CALL SOUT (NSTEP,ANS,L,B,S,T,BETA),.                           STRG2150\n /*                                                                   */STRG2160\n /*      TEST WHETHER THE STEP-WISE REGRESSION WAS TERMINATED         */STRG2170\n /*      IN PROCEDURE SOUT.                                           */STRG2180\n /*                                                                   */STRG2190\n         IF NSTOP GT '0'                                                STRG2200\n         THEN GO TO S150,.                                              STRG2210\n         END,.                                                          STRG2220\n S150..                                                                 STRG2230\n    RETURN,.                                                            STRG2240\n    END,.                              /*END OF PROCEDURE STRG        */STRG2250\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n DAT2..                                                                 DAT2  10\n /*********************************************************************/DAT2  20\n /*                                                                   */DAT2  30\n /*      TO READ FLOATING POINT DATA, ONE OBSERVATION AT A TIME.      */DAT2  40\n /*      DATA MAY BE SAVED ON A DATA SET.                             */DAT2  50\n /*                                                                   */DAT2  60\n /*********************************************************************/DAT2  70\n    PROCEDURE (M,D),.                                                   DAT2  80\n    DECLARE                                                             DAT2  90\n         XDATA FILE STREAM ENVIRONMENT (CONSECUTIVE V(2000,200)),       DAT2 100\n         (NCARD,NV) EXTERNAL,                                           DAT2 110\n         CH CHARACTER(NCARD),                                           DAT2 120\n         (I,M,MM) FIXED BINARY,                                         DAT2 130\n         D(*) FLOAT BINARY,.                                            DAT2 140\n /*                                                                   */DAT2 150\n    ON ENDFILE (SYSIN)                                                  DAT2 160\n    GO TO EXIT,.                                                        DAT2 170\n    GET EDIT (CH) (A(NCARD)),.                                          DAT2 180\n    MM   =CEIL(M/12),.                                                  DAT2 190\n    GET STRING (CH) EDIT ((D(I) DO I= 1 TO M))                          DAT2 200\n         ((MM)((12)F(6,0),X(8))),.                                      DAT2 210\n    IF NV= 1                                                            DAT2 220\n    THEN PUT FILE (XDATA) EDIT ((D(I) DO I= 1 TO M)) ((M)F(6,0)),.      DAT2 230\n    REVERT ENDFILE (SYSIN),.                                            DAT2 240\n    RETURN,.                                                            DAT2 250\n EXIT..                                                                 DAT2 260\n    PUT FILE (SYSPRINT) EDIT ('ERROR  INSUFFICIENT DATA')               DAT2 270\n         (SKIP(1),COLUMN(10),A),.                                       DAT2 280\n    STOP,.                                                              DAT2 290\n    END,.                              /*END OF PROCEDURE DAT2        */DAT2 300\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n IDT2..                                                                 IDT2  10\n /*********************************************************************/IDT2  20\n /*                                                                   */IDT2  30\n /*      TO READ FIXED POINT DATA.                                    */IDT2  40\n /*                                                                   */IDT2  50\n /*********************************************************************/IDT2  60\n    PROCEDURE (M,IX),.                                                  IDT2  70\n    DECLARE                                                             IDT2  80\n         CH CHARACTER (80),                                             IDT2  90\n         (IX(*),NF,N1,N2,M,I)                                           IDT2 100\n         FIXED BINARY,.                                                 IDT2 110\n    NF   =72,.                                                          IDT2 120\n    N1   =1,.                                                           IDT2 130\n    N2   =NF,.                                                          IDT2 140\n S10..                                                                  IDT2 150\n    IF M LE N2                                                          IDT2 160\n    THEN N2   =M,.                                                      IDT2 170\n    GET EDIT (CH) (A(80)),.                                             IDT2 180\n    GET STRING (CH) EDIT ((IX(I) DO I= N1 TO N2)) ((NF)F(1)),.          IDT2 190\n    N1   =N2+1,.                                                        IDT2 200\n    IF N1 LE M                                                          IDT2 210\n    THEN DO,.                                                           IDT2 220\n         N2   =N2+NF,.                                                  IDT2 230\n         GO TO S10,.                                                    IDT2 240\n         END,.                                                          IDT2 250\n    RETURN,.                                                            IDT2 260\n    END,.                              /*END OF PROCEDURE IDT2        */IDT2 270\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n SOUT..                                                                 SOUT  10\n /*********************************************************************/SOUT  20\n /*                                                                   */SOUT  30\n /*      TO PRINT THE RESULTS OF A STEP-WISE MULTIPLE REGRESSION.     */SOUT  40\n /*                                                                   */SOUT  50\n /*********************************************************************/SOUT  60\n    PROCEDURE (NSTEP,ANS,L,B,S,T,BETA),.                                SOUT  70\n    DECLARE                                                             SOUT  80\n         NSTOP EXTERNAL CHARACTER (1),                                  SOUT  90\n         (ANS(*),B(*),S(*),T(*),BETA(*))                                SOUT 100\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/SOUT 110\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/SOUT 120\n         (NSTEP(*),L(*),I,N)                                            SOUT 130\n         FIXED BINARY,.                                                 SOUT 140\n /*                                                                   */SOUT 150\n /*      TEST WHETHER THIS IS THE FIRST STEP                          */SOUT 160\n /*                                                                   */SOUT 170\n    IF NSTEP(4) LE 1                                                    SOUT 180\n    THEN DO,.                                                           SOUT 190\n         PUT EDIT ('DEPENDENT VARIABLE............',NSTEP(1))           SOUT 200\n              (SKIP(2),COLUMN(10),A,F(2)),.                             SOUT 210\n         PUT EDIT ('NUMBER OF VARIABLES FORCED....',NSTEP(2))           SOUT 220\n              (SKIP,COLUMN(10),A,F(2)),.                                SOUT 230\n         PUT EDIT ('NUMBER OF VARIABLES DELETED...',NSTEP(3))           SOUT 240\n              (SKIP,COLUMN(10),A,F(2)),.                                SOUT 250\n         END,.                                                          SOUT 260\n /*                                                                   */SOUT 270\n /*      PRINT THE RESULTS OF A STEP                                  */SOUT 280\n /*                                                                   */SOUT 290\n    PUT EDIT ('STEP',NSTEP(4)) (SKIP(3),COLUMN(10),A,F(3)),.            SOUT 300\n    PUT EDIT ('VARIABLE ENTERED.....',NSTEP(5))                         SOUT 310\n         (SKIP(2),COLUMN(10),A,F(2)),.                                  SOUT 320\n    PUT SKIP(2),.                                                       SOUT 330\n    IF NSTEP(4) LE NSTEP(2)                                             SOUT 340\n    THEN PUT EDIT ('  (FORCED VARIABLE)') (SKIP,COLUMN(10),A),.         SOUT 350\n    PUT EDIT ('SUM OF SQUARES REDUCED IN THIS STEP....',ANS(1))         SOUT 360\n         (R(FM1)),.                                                     SOUT 370\n FM1..                                                                  SOUT 380\n    FORMAT (SKIP(1),COLUMN(10),A,F(13,3)),.                             SOUT 390\n    PUT EDIT ('PROPORTION REDUCED IN THIS STEP........',ANS(2))         SOUT 400\n         (R(FM1)),.                                                     SOUT 410\n    PUT SKIP(2),.                                                       SOUT 420\n    PUT EDIT ('CUMULATIVE SUM OF SQUARES REDUCED......',ANS(3))         SOUT 430\n         (R(FM1)),.                                                     SOUT 440\n    PUT EDIT ('CUMULATIVE PROPORTION REDUCED..........',ANS(4),'  OF',  SOUT 450\n         ANS(5)) (SKIP,COLUMN(10),A,F(13,3),A,F(13,3)),.                SOUT 460\n    PUT EDIT ('FOR',NSTEP(4),' VARIABLES ENTERED')                      SOUT 470\n         (SKIP(2),COLUMN(10),A,F(3),A),.                                SOUT 480\n    PUT EDIT ('MULTIPLE CORRELATION COEFFICIENT...',ANS(6))             SOUT 490\n         (SKIP(1),COLUMN(12),A,F(9,3)),.                                SOUT 500\n    PUT EDIT ('(ADJUSTED FOR D.F.)...........',ANS(10))                 SOUT 510\n         (SKIP(1),COLUMN(17),A,F(9,3)),.                                SOUT 520\n    PUT EDIT ('F-VALUE FOR ANALYSIS OF VARIANCE...',ANS(7))             SOUT 530\n         (SKIP(1),COLUMN(12),A,F(9,3)),.                                SOUT 540\n    PUT EDIT ('STANDARD ERROR OF ESTIMATE.........',ANS(8))             SOUT 550\n         (SKIP(1),COLUMN(12),A,F(9,3)),.                                SOUT 560\n    PUT EDIT ('(ADJUSTED FOR D.F.)...........',ANS(11))                 SOUT 570\n         (SKIP(1),COLUMN(17),A,F(9,3)),.                                SOUT 580\n    PUT EDIT ('VARIABLE','REGRESSION','STD. ERROR OF ','COMPUTED',      SOUT 590\n         'BETA','NUMBER','COEFFICIENT','REG. COEFF.','T-VALUE',         SOUT 600\n         'COEFFICIENT')                                                 SOUT 610\n         (SKIP(2),COLUMN(12),5(A,X(5)),SKIP(1),COLUMN(13),A,X(6),A,     SOUT 620\n         X(4),A,X(8),A,X(6),A),.                                        SOUT 630\n    N    =NSTEP(4),.                                                    SOUT 640\n         DO I = 1 TO N,.                                                SOUT 650\n         PUT EDIT (L(I),B(I),S(I),T(I),BETA(I)) (SKIP(1),COLUMN(14),    SOUT 660\n              F(3),F(18,5),F(16,5),F(14,3),F(14,5)),.                   SOUT 670\n         END,.                                                          SOUT 680\n    PUT EDIT ('INTERCEPT',ANS(9)) (SKIP,COLUMN(12),A,F(14,5)),.         SOUT 690\n    NSTOP='0',.                                                         SOUT 700\n    RETURN,.                                                            SOUT 710\n    END,.                              /*END OF PROCEDURE SOUT        */SOUT 720\n/*\n//GO.XDATA DD UNIT=SYSDA,SPACE=(TRK,(50,20))\n//GO.SYSIN  DD  *\nSAMPLE000300602   0.01 1                                                      10\n    29   289   216    85    14     1                                          20\n    30   391   244    92    16     2                                          30\n    30   424   246    90    18     2                                          40\n    30   313   239    91    10     0                                          50\n    35   243   275    95    30     2                                          60\n    35   365   219    95    21     2                                          70\n    43   396   267   100    39     3                                          80\n    43   356   274    79    19     2                                          90\n    44   346   255   126    56     3                                         100\n    44   156   258    95    28     0                                         110\n    44   278   249   110    42     4                                         120\n    44   349   252    88    21     1                                         130\n    44   141   236   129    56     1                                         140\n    44   245   236    97    24     1                                         150\n    45   297   256   111    45     3                                         160\n    45   310   262    94    20     2                                         170\n    45   151   339    96    35     3                                         180\n    45   370   357    88    15     4                                         190\n    45   379   198   147    64     4                                         200\n    45   463   206   105    31     3                                         210\n    45   316   245   132    60     4                                         220\n    45   280   225   108    36     4                                         230\n    44   395   215   101    27     1                                         240\n    49   139   220   136    59     0                                         250\n    49   245   205   113    37     4                                         260\n    49   373   215    88    25     1                                         270\n    51   224   215   118    54     3                                         280\n    51   677   210   116    33     4                                         290\n    51   424   210   140    59     4                                         300\n    51   150   210   105    30     0                                         310\n000003                                                                       320\n200203                                                                       330\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FILE05": {"ttr": 5638, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00A\\x01\\x06\\x04O\\x01\\x06\\x04O\\x14\\x01\\x03\\x8c\\x03\\x8c\\x00\\x00\\xd7\\xd3\\xf1\\xe2\\xe2\\xd7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-02-13T00:00:00", "modifydate": "2006-02-13T14:01:41", "lines": 908, "newlines": 908, "modlines": 0, "user": "PL1SSP"}, "text": "//JOBD  JOB 111-1111,'SSP PL/1',MSGLEVEL=1\n//CANO EXEC PL1LFCLG,PARM.PL1L='NOLIST,NOATR,NOXREF,CHAR48'\n//PL1L.SYSIN  DD  *\n CANO..                                                                 CANO  10\n /*********************************************************************/CANO  20\n /*                                                                   */CANO  30\n /*      TO READ THE PROBLEM PARAMETER CARD FOR A CANONICAL CORRE-    */CANO  40\n /*      LATION, CALL TWO PROCEDURES TO CALCULATE SIMPLE CORRELATIONS,*/CANO  50\n /*      CANONICAL CORRELATIONS, CHI-SQUARES, DEGREES OF FREEDOM FOR  */CANO  60\n /*      CHI-SQUARES, AND COEFFICIENTS FOR LEFT AND RIGHT HAND        */CANO  70\n /*      VARIABLES, NAMELY CANONICAL VARIATES, AND PRINT THE RESULTS. */CANO  80\n /*                                                                   */CANO  90\n /*********************************************************************/CANO 100\n    PROCEDURE OPTIONS (MAIN),.                                          CANO 110\n    DECLARE                                                             CANO 120\n         (I,IO,J,M,MM,MP,MQ,N,N1)                                       CANO 130\n         FIXED BINARY,                                                  CANO 140\n         CH  CHARACTER (80),                                            CANO 150\n         ERROR EXTERNAL CHARACTER (1),                                  CANO 160\n         (NCARD,NV) EXTERNAL,                                           CANO 170\n         PR  CHARACTER (6),.                                            CANO 180\n /*                                                                   */CANO 190\n    ON ENDFILE (SYSIN) GO TO EXIT,.                                     CANO 200\n S100..                                                                 CANO 210\n    GET EDIT (CH) (A(80)),.                                             CANO 220\n    GET STRING (CH) EDIT (PR,N,MP,MQ,NCARD) (A(6),F(5),3 F(2)),.        CANO 230\n /*                                                                   */CANO 240\n /*      PR.......PROBLEM NUMBER (MAY BE ALPHAMERIC)                  */CANO 250\n /*      N........NUMBER OF OBSERVATIONS                              */CANO 260\n /*      MP.......NUMBER OF LEFT HAND VARIABLES                       */CANO 270\n /*      MQ.......NUMBER OF RIGHT HAND VARIABLES                      */CANO 280\n /*      NCARD....NUMBER OF CARDS PER OBSERVATION                     */CANO 290\n /*                                                                   */CANO 300\n    PUT EDIT ('CANONICAL CORRELATION.....',PR,'NO. OF OBSERVATIONS',N,  CANO 310\n         'NO. OF LEFT HAND VARIABLES',MP,                               CANO 320\n         'NO. OF RIGHT HAND VARIABLES',MQ) (PAGE,COLUMN(10),A,A(6),     CANO 330\n         SKIP(1),COLUMN(12),A,X(8),F(4),SKIP(1),COLUMN(12),A,F(5),      CANO 340\n         SKIP(1),COLUMN(12),A,F(4)),.                                   CANO 350\n    M    =MP+MQ,.                                                       CANO 360\n    NCARD=NCARD*80,.                                                    CANO 370\n    NV   =0,.                                                           CANO 380\n STRT..                                                                 CANO 390\n    BEGIN,.                                                             CANO 400\n    DECLARE                                                             CANO 410\n         (COEFL(MP,MQ),COEFR(MQ,MQ),R(M,M),RX(M,M),CHISQ(MQ),CANR(MQ),  CANO 420\n         STD(M),XBAR(M),X(1,1),B(M),ROOTS(MQ),WLAM(MQ))                 CANO 430\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/CANO 440\n  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/CANO 450\n         NDF(MQ)  FIXED BINARY,.                                        CANO 460\n    IO   =0,.                                                           CANO 470\n    X    =0.0,.                                                         CANO 480\n    CALL CORR (N,M,IO,X,XBAR,STD,RX,R,B),.                              CANO 490\n    IF ERROR NE '0'                                                     CANO 500\n    THEN DO,.                                                           CANO 510\n         PUT EDIT ('IN ROUTINE CORR ERROR CODE = ',ERROR)               CANO 520\n              (SKIP(2),COLUMN(10),A,A(1)),.                             CANO 530\n         GO TO S100,.                                                   CANO 540\n         END,.                                                          CANO 550\n /*                                                                   */CANO 560\n /*      PRINT MEANS, STANDARD DEVIATIONS, AND CORRELATION            */CANO 570\n /*      COEFFICIENTS OF ALL VARIABLES                                */CANO 580\n /*                                                                   */CANO 590\n    PUT EDIT ('MEANS') (R(FM1)),.                                       CANO 600\n FM1..                                                                  CANO 610\n    FORMAT (SKIP(2),COLUMN(10),A),.                                     CANO 620\n    PUT EDIT ((XBAR(I) DO I= 1 TO M)) (R(FM2)),.                        CANO 630\n FM2..                                                                  CANO 640\n    FORMAT (SKIP,COLUMN(10),7 F(15,5)),.                                CANO 650\n    PUT EDIT ('STANDARD DEVIATIONS') (R(FM1)),.                         CANO 660\n    PUT EDIT ((STD(I) DO I= 1 TO M)) (R(FM2)),.                         CANO 670\n    PUT EDIT ('CORRELATION COEFFICIENTS') (SKIP(2),COLUMN(10),A),.      CANO 680\n         DO I = 1 TO M,.                                                CANO 690\n         PUT EDIT ('ROW',I) (SKIP(2),COLUMN(10),A,F(4)),.               CANO 700\n         PUT EDIT ((R(I,J) DO J= 1 TO M)) (SKIP,COLUMN(10),9 F(12,5)),. CANO 710\n         END,.                                                          CANO 720\n    CALL CANC (N,MP,MQ,R,ROOTS,WLAM,CANR,CHISQ,NDF,COEFR,COEFL),.       CANO 730\n    IF ERROR NE '0'                                                     CANO 740\n    THEN DO,.                                                           CANO 750\n         PUT EDIT ('IN ROUTINE CANC ERROR CODE = ',ERROR)               CANO 760\n              (SKIP(2),COLUMN(10),A,A(1)),.                             CANO 770\n         IF ERROR = '1'                                                 CANO 780\n         THEN GO TO S100,.                                              CANO 790\n         END,.                                                          CANO 800\n /*                                                                   */CANO 810\n /*      PRINT EIGENVALUES, CANONICAL CORRELATIONS, LAMBDA,           */CANO 820\n /*      CHI-SQUARES DEGREES OF FREEDOM                               */CANO 830\n /*                                                                   */CANO 840\n    PUT EDIT ('NUMBER OF ','LARGEST','CORRESPONDING','DEGREES',         CANO 850\n         'EIGENVALUES','EIGENVALUE','CANONICAL','LAMBDA',               CANO 860\n         'CHI-SQUARE','OF','REMOVED','REMAINING','CORRELATION',         CANO 870\n         'FREEDOM') (SKIP(4),COLUMN(13),A,X(5),A,X(7),A,X(31),A,        CANO 880\n         SKIP,COLUMN(11),A,X(5),A,X(7),A,X(7),A,X(5),A,X(7),A,          CANO 890\n         SKIP,COLUMN(13),A,X(7),A,X(7),A,X(32),A),.                     CANO 900\n         DO I = 1 TO MQ,.                                               CANO 910\n         N1   =I-1,.                                                    CANO 920\n /*                                                                   */CANO 930\n /*      TEST WHETHER EIGENVALUE IS GREATER THAN ZERO                 */CANO 940\n /*                                                                   */CANO 950\n         MM   =N1,.                                                     CANO 960\n         IF ROOTS(I) GT 0.0                                             CANO 970\n         THEN DO,.                                                      CANO 980\n              PUT EDIT (N1,ROOTS(I),CANR(I),WLAM(I),CHISQ(I),NDF(I))    CANO 990\n                   (SKIP(1),COLUMN(10),F(7),F(19,5),F(16,5),            CANO1000\n                   2 F(14,5),X(5),F(5)),.                               CANO1010\n              MM   =MQ,.                                                CANO1020\n              END,.                                                     CANO1030\n         END,.                                                          CANO1040\n /*                                                                   */CANO1050\n /*      PRINT CANONICAL CORRELATION                                  */CANO1060\n /*                                                                   */CANO1070\n         DO I = 1 TO MM,.                                               CANO1080\n         PUT EDIT ('CANONICAL CORRELATION',CANR(I)) (SKIP(5),COLUMN(10),CANO1090\n              A,F(12,5)),.                                              CANO1100\n         PUT EDIT ('COEFFICIENTS FOR LEFT HAND VARIABLES') (R(FM1)),.   CANO1110\n         PUT EDIT ((COEFL(J,I) DO J= 1 TO MP)) (R(FM2)),.               CANO1120\n         PUT EDIT ('COEFFICIENTS FOR RIGHT HAND VARIABLES') (R(FM1)),.  CANO1130\n         PUT EDIT ((COEFR(J,I) DO J= 1 TO MQ)) (R(FM2)),.               CANO1140\n         END,.                                                          CANO1150\n    END,.                                                               CANO1160\n    GO TO S100,.                                                        CANO1170\n EXIT..                                                                 CANO1180\n    PUT FILE (SYSPRINT) EDIT ('END OF SAMPLE PROGRAM')                  CANO1190\n         (SKIP(5),COLUMN(10),A),.                                       CANO1200\n    END,.                              /*END OF PROCEDURE CANO        */CANO1210\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n CORR..                                                                 CORR  10\n /*********************************************************************/CORR  20\n /*                                                                   */CORR  30\n /*      TO COMPUTE MEANS, STANDARD DEVIATIONS, SUMS OF CROSS-PRODUCTS*/CORR  40\n /*      OF DEVIATIONS, AND CORRELATION COEFFICIENTS.                 */CORR  50\n /*                                                                   */CORR  60\n /*********************************************************************/CORR  70\n    PROCEDURE (N,M,IO,X,XBAR,STD,RX,R,B),.                              CORR  80\n    DECLARE                                                             CORR  90\n         ERROR EXTERNAL CHARACTER (1),                                  CORR 100\n         (I,IO,J,K,KK,M,N)                                              CORR 110\n         FIXED BINARY,                                                  CORR 120\n         (X(*,*),D(M),FN,FKK)                                           CORR 130\n         FLOAT BINARY,                                                  CORR 140\n         (R(*,*),RX(*,*),XBAR(*),STD(*),B(*),T(M))                      CORR 150\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/CORR 160\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/CORR 170\n /*                                                                   */CORR 180\n    ERROR='0',.                                                         CORR 190\n    IF N LE 0 OR M LE 0                /* THE NUMBER OF OBSERVATIONS  */CORR 200\n    THEN DO,.                          /* OR THE NUMBER OF VARIABLES  */CORR 210\n         ERROR='1',.                   /* ARE LESS THAN OR EQUAL TO   */CORR 220\n         GO TO FIN,.                   /* ZERO.                       */CORR 230\n         END,.                                                          CORR 240\n    FN   =N,.                          /* INITIALIZATION              */CORR 250\n    T    =0.0,.                                                         CORR 260\n         DO I = 1 TO M,.                                                CORR 270\n         B(I) =0.0,.                                                    CORR 280\n              DO J = 1 TO M,.                                           CORR 290\n              R(I,J)=0.0,.                                              CORR 300\n              END,.                                                     CORR 310\n         END,.                                                          CORR 320\n    IF IO NE 0                                                          CORR 330\n    THEN DO,.                                                           CORR 340\n              DO J = 1 TO M,.          /* DATA IS ALREADY IN CORE     */CORR 350\n                   DO I = 1 TO N,.                                      CORR 360\n                   T(J) =T(J)+X(I,J),.                                  CORR 370\n                   END,.                                                CORR 380\n              XBAR(J)=T(J),.                                            CORR 390\n              T(J) =T(J)/FN,.                                           CORR 400\n              END,.                                                     CORR 410\n              DO I = 1 TO N,.                                           CORR 420\n                   DO J = 1 TO M,.                                      CORR 430\n                   D(J) =X(I,J)-T(J),.                                  CORR 440\n                   B(J) =B(J)+D(J),.                                    CORR 450\n                   END,.                                                CORR 460\n                   DO J = 1 TO M,.                                      CORR 470\n                        DO K = J TO M,.                                 CORR 480\n                        R(J,K)=R(J,K)+D(J)*D(K),.                       CORR 490\n                        END,.                                           CORR 500\n                   END,.                                                CORR 510\n              END,.                                                     CORR 520\n         GO TO CALC,.                                                   CORR 530\n         END,.                                                          CORR 540\n /*                                                                   */CORR 550\n /*      READ OBSERVATIONS AND CALCULATE TEMPORARY MEANS              */CORR 560\n /*                                                                   */CORR 570\n    IF N LT M                                                           CORR 580\n    THEN KK   =N,.                                                      CORR 590\n    ELSE KK   =M,.                                                      CORR 600\n    FKK  =KK,.                                                          CORR 610\n         DO I = 1 TO KK,.                                               CORR 620\n         CALL DAT2 (M,D),.                                              CORR 630\n              DO J = 1 TO M,.                                           CORR 640\n              T(J) =T(J)+D(J),.                                         CORR 650\n              RX(I,J)=D(J),.                                            CORR 660\n              END,.                                                     CORR 670\n         END,.                                                          CORR 680\n         DO J = 1 TO M,.                                                CORR 690\n         XBAR(J)=T(J),.                                                 CORR 700\n         T(J) =T(J)/FKK,.                                               CORR 710\n         END,.                                                          CORR 720\n /*                                                                   */CORR 730\n /*      CALCULATE SUMS OF CROSS-PRODUCTS OF DEVIATIONS FROM          */CORR 740\n /*      TEMPORARY MEANS FOR M OBSERVATIONS.                          */CORR 750\n /*                                                                   */CORR 760\n         DO I = 1 TO KK,.                                               CORR 770\n              DO J = 1 TO M,.                                           CORR 780\n              D(J) =RX(I,J)-T(J),.                                      CORR 790\n              END,.                                                     CORR 800\n              DO J = 1 TO M,.                                           CORR 810\n              B(J) =B(J)+D(J),.                                         CORR 820\n                   DO K = J TO M,.                                      CORR 830\n                   R(J,K)=R(J,K)+D(J)*D(K),.                            CORR 840\n                   END,.                                                CORR 850\n              END,.                                                     CORR 860\n         END,.                                                          CORR 870\n    IF N GT KK                                                          CORR 880\n /*                                                                   */CORR 890\n /*      READ THE REST OF THE OBSERVATIONS ONE AT A TIME, SUM THE     */CORR 900\n /*      OBSERVATIONS, AND CALCULATE SUMS OF CROSS PRODUCTS OF        */CORR 910\n /*      DEVIATIONS FROM TEMPORARY MEANS.                             */CORR 920\n /*                                                                   */CORR 930\n    THEN DO,.                                                           CORR 940\n              DO I = 1 TO N-KK,.                                        CORR 950\n              CALL DAT2 (M,D),.                                         CORR 960\n                   DO J = 1 TO M,.                                      CORR 970\n                   XBAR(J)=XBAR(J)+D(J),.                               CORR 980\n                   D(J) =D(J)-T(J),.                                    CORR 990\n                   B(J) =B(J)+D(J),.                                    CORR1000\n                   END,.                                                CORR1010\n                   DO J = 1 TO M,.                                      CORR1020\n                        DO K = J TO M,.                                 CORR1030\n                        R(J,K)=R(J,K)+D(J)*D(K),.                       CORR1040\n                        END,.                                           CORR1050\n                   END,.                                                CORR1060\n              END,.                                                     CORR1070\n         END,.                                                          CORR1080\n /*                                                                   */CORR1090\n /*      ADJUST SUMS OF CROSS-PRODUCTS OF DEVIATIONS FROM TEMP. MEANS */CORR1100\n /*                                                                   */CORR1110\n CALC..                                                                 CORR1120\n         DO I = 1 TO M,.                                                CORR1130\n         XBAR(I)=XBAR(I)/FN,.          /* CALCULATE MEANS.            */CORR1140\n              DO J = I TO M,.                                           CORR1150\n              RX(I,J)=R(I,J)-B(I)*B(J)/FN,.                             CORR1160\n              RX(J,I)=RX(I,J),.                                         CORR1170\n              END,.                                                     CORR1180\n         STD(I)=SQRT(ABS(RX(I,I))),.                                    CORR1190\n /*                                                                   */CORR1200\n /*    COPY THE DIAGONAL OF THE MATRIX OF SUMS OF CROSS PRODUCTS OF   */CORR1210\n /*    DEVIATIONS FROM THE MEANS.                                     */CORR1220\n /*                                                                   */CORR1230\n         B(I) =RX(I,I),.                                                CORR1240\n         END,.                                                          CORR1250\n /*                                                                   */CORR1260\n /*      COMPUTE CORRELATION COEFFICIENTS                             */CORR1270\n /*                                                                   */CORR1280\n         DO J = 1 TO M,.                                                CORR1290\n              DO K = J TO M,.                                           CORR1300\n              FKK  =STD(J)*STD(K),.                                     CORR1310\n              IF FKK= 0.0                                               CORR1320\n              THEN DO,.                                                 CORR1330\n                   ERROR='2',.         /* SOME VARIANCES ARE ZERO     */CORR1340\n                   R(J,K)=0.0,.                                         CORR1350\n                   END,.                                                CORR1360\n              ELSE R(J,K)=RX(J,K)/FKK,.                                 CORR1370\n              R(K,J)=R(J,K),.                                           CORR1380\n              END,.                                                     CORR1390\n         END,.                                                          CORR1400\n /*                                                                   */CORR1410\n /*      COMPUTE STANDARD DEVIATIONS                                  */CORR1420\n /*                                                                   */CORR1430\n         IF N=1                                                         CORR1440\n         THEN DO,.                                                      CORR1450\n              DO I=1 TO N,.                                             CORR1460\n              STD(I)    =0,.                                            CORR1470\n              END,.                                                     CORR1480\n              GO TO FIN,.                                               CORR1490\n              END,.                                                     CORR1500\n         FN   =SQRT(N-1),.                                              CORR1510\n         DO I = 1 TO M,.                                                CORR1520\n         STD(I)=STD(I)/FN,.                                             CORR1530\n         END,.                                                          CORR1540\n FIN..                                                                  CORR1550\n    RETURN,.                                                            CORR1560\n    END,.                              /*END OF PROCEDURE CORR        */CORR1570\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n CANC..                                                                 CANC  10\n /*********************************************************************/CANC  20\n /*                                                                   */CANC  30\n /*      TO COMPUTE THE CANONICAL CORRELATIONS BETWEEN TWO SETS OF    */CANC  40\n /*      VARIABLES.                                                   */CANC  50\n /*                                                                   */CANC  60\n /*********************************************************************/CANC  70\n    PROCEDURE (N,MP,MQ,RR,ROOTS,WLAM,CANR,CHISQ,NDF,COEFR,COEFL),.      CANC  80\n    DECLARE                                                             CANC  90\n         ERROR EXTERNAL CHARACTER (1),                                  CANC 100\n         (NDF(*),I,J,K,L,M,MP,MQ,N,N1,IERR)                             CANC 110\n         FIXED BINARY,                                                  CANC 120\n         (RR(*,*),ROOTS(*),WLAM(*),CANR(*),CHISQ(*),COEFR(*,*),         CANC 130\n         COEFL(*,*),DET,BAT,CON)                                        CANC 140\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/CANC 150\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/CANC 160\n /*                                                                   */CANC 170\n /*      CHECK WHETHER THE NUMBER OF LEFT-HAND VARIABLES IS EQUAL TO  */CANC 180\n /*      OR GREATER THAN THAT OF RIGHT-HAND                           */CANC 190\n /*                                                                   */CANC 200\n    ERROR='0',.                                                         CANC 210\n    IERR =0,.                                                           CANC 220\n    IF MP LE 0 OR MQ LE 0              /* THERE ARE NO RIGHT OR LEFT  */CANC 230\n    THEN DO,.                          /* HAND VARIABLES.             */CANC 240\n         ERROR='1',.                                                    CANC 250\n         GO TO FIN,.                                                    CANC 260\n         END,.                                                          CANC 270\n    IF MP LT MQ                                                         CANC 280\n    THEN DO,.                                                           CANC 290\n         M    =MP,.                                                     CANC 300\n         MP   =MQ,.                                                     CANC 310\n         MQ   =M,.                                                      CANC 320\n         ERROR='2',.                                                    CANC 330\n         END,.                                                          CANC 340\n COPY..                                                                 CANC 350\n    BEGIN,.                                                             CANC 360\n    DECLARE                                                             CANC 370\n         (R(MP,MP),T(MP,MQ),A(MQ,MQ),X(MQ,MQ))                          CANC 380\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/CANC 390\n  /*     BINARY FLOAT(53),.            /*DOUBLE PRECISION VERSION  /*D*/CANC 400\n /*                                                                   */CANC 410\n /*      PARTITION INTERCORRELATIONS AMONG LEFT HAND VARIABLES,BETWEEN*/CANC 420\n /*      LEFT AND RIGHT HAND VARIABLES, AND AMONG RIGHT HAND VARIABLES*/CANC 430\n /*                                                                   */CANC 440\n    M    =MP+MQ,.                                                       CANC 450\n    FM   =M+1,.                                                         CANC 460\n    FN   =N,.                                                           CANC 470\n    IF ERROR= '2'                                                       CANC 480\n    THEN DO,.                                                           CANC 490\n         IERR =1,.                                                      CANC 500\n         K    =0,.                     /* CHANGE LEFT AND RIGHT HAND  */CANC 510\n              DO I = MQ+1 TO M,.       /* VARIABLES                   */CANC 520\n              K    =K+1,.                                               CANC 530\n              L    =0,.                                                 CANC 540\n                   DO J = MQ+1 TO M,.                                   CANC 550\n                   L    =L+1,.                                          CANC 560\n                                       /* RR 22 INTO R                */CANC 570\n              R(K,L)=RR(I,J),.                                          CANC 580\n                   END,.                                                CANC 590\n                                       /* RR 21 INTO COEFL            */CANC 600\n                   DO J = 1 TO MQ,.                                     CANC 610\n                   COEFL(K,J)=RR(I,J),.                                 CANC 620\n                   END,.                                                CANC 630\n              END,.                                                     CANC 640\n              DO I = 1 TO MQ,.                                          CANC 650\n                   DO J = 1 TO MQ,.                                     CANC 660\n                                       /* RR 11 INTO COEFR            */CANC 670\n                  COEFR(I,J)=RR(I,J),.                                  CANC 680\n                   END,.                                                CANC 690\n              END,.                                                     CANC 700\n         END,.                                                          CANC 710\n    ELSE DO,.                                                           CANC 720\n              DO I = 1 TO M,.                                           CANC 730\n                   DO J = 1 TO M,.                                      CANC 740\n                   IF I LE MP AND J LE MP                               CANC 750\n                   THEN DO,.                                            CANC 760\n                                       /* RR 11 INTO R                */CANC 770\n                        R(I,J)=RR(I,J),.                                CANC 780\n                        GO TO S10,.                                     CANC 790\n                        END,.                                           CANC 800\n                   IF I LE MP AND J GT MP                               CANC 810\n                   THEN DO,.                                            CANC 820\n                        K    =J-MP,.                                    CANC 830\n                                       /* RR 12 INTO COEFL            */CANC 840\n                        COEFL(I,K)=RR(I,J),.                            CANC 850\n                        GO TO S10,.                                     CANC 860\n                        END,.                                           CANC 870\n                   IF I GT MP AND J GT MP                               CANC 880\n                   THEN DO,.                                            CANC 890\n                        L    =I-MP,.                                    CANC 900\n                        K    =J-MP,.                                    CANC 910\n                                       /* RR 22 INTO COEFR            */CANC 920\n                        COEFR(L,K)=RR(I,J),.                            CANC 930\n                        END,.                                           CANC 940\n S10..                                                                  CANC 950\n                   END,.                                                CANC 960\n              END,.                                                     CANC 970\n /*                                                                   */CANC 980\n /*      SOLVE THE CANONICAL EQUATION                                 */CANC 990\n /*                                                                   */CANC1000\n         CON  =0,.                                                      CANC1010\n         CALL MINV (R,MP,DET,CON),.                                     CANC1020\n         IF ERROR NE '0'                                                CANC1030\n         THEN DO,.                                                      CANC1040\n              ERROR='3',.                                               CANC1050\n              GO TO FIN,.                                               CANC1060\n              END,.                                                     CANC1070\n /*                                                                   */CANC1080\n /*      CALCULATE T = INVERSE OF RR 11 * RR 12                       */CANC1090\n /*                                                                   */CANC1100\n              DO I = 1 TO MP,.                                          CANC1110\n                   DO J = 1 TO MQ,.                                     CANC1120\n                   T(I,J)=0.0,.                                         CANC1130\n                        DO K = 1 TO MP,.                                CANC1140\n                        T(I,J)=T(I,J)+R(I,K)*COEFL(K,J),.               CANC1150\n                        END,.                                           CANC1160\n                   END,.                                                CANC1170\n              END,.                                                     CANC1180\n /*                                                                   */CANC1190\n /*      CALCULATE  A = RR 21 * T                                     */CANC1200\n /*                                                                   */CANC1210\n              DO I = 1 TO MQ,.                                          CANC1220\n                   DO J = 1 TO MQ,.                                     CANC1230\n                   A(I,J)=0.0,.                                         CANC1240\n                        DO K = 1 TO MP,.                                CANC1250\n                        A(I,J)=A(I,J)+COEFL(K,I)*T(K,J),.               CANC1260\n                        END,.                                           CANC1270\n                   END,.                                                CANC1280\n              END,.                                                     CANC1290\n /*                                                                   */CANC1300\n /*      CALCULATE EIGENVALUES WITH ASSOCIATED EIGENVECTORS OF THE    */CANC1310\n /*      INVERSE OF R 22 * A                                          */CANC1320\n /*                                                                   */CANC1330\n         CALL MGDU (MQ,A,COEFR,ROOTS,X),.                               CANC1340\n         IF ERROR NE '0'                                                CANC1350\n         THEN DO,.                                                      CANC1360\n              ERROR='4',.              /* ERROR CONDITION IN ROUTINE  */CANC1370\n              GO TO FIN,.              /* MSDU.                       */CANC1380\n              END,.                                                     CANC1390\n         IF IERR= '1'                                                   CANC1400\n         THEN ERROR='2',.                                               CANC1410\n /*                                                                   */CANC1420\n /*      TEST WHETHER EIGENVALUES ARE GREATER THAN 0.0 BUT LESS THAN  */CANC1430\n /*      1.0                                                          */CANC1440\n /*                                                                   */CANC1450\n              DO I = 1 TO MQ,.                                          CANC1460\n              IF ROOTS(I) LE 0.0 OR ROOTS(I) GE 1.0                     CANC1470\n              THEN DO,.                                                 CANC1480\n                   ERROR='5',.         /* CANONICAL CORRELATION CANNOT*/CANC1490\n                   GO TO FIN,.         /* BE COMPUTED                 */CANC1500\n                   END,.                                                CANC1510\n              END,.                                                     CANC1520\n /*                                                                   */CANC1530\n /*      FOR EACH VALUE OF I = 1,2,...,MQ CALCULATE THE STATISTICS    */CANC1540\n /*      NOTED BELOW.                                                 */CANC1550\n /*                                                                   */CANC1560\n              DO I = 1 TO MQ,.                                          CANC1570\n                                       /* CANONICAL CORRELATION       */CANC1580\n              CANR(I)=SQRT(ROOTS(I)),.                                  CANC1590\n              WLAM(I)=1.0,.                                             CANC1600\n                   DO J = I TO MQ,.                                     CANC1610\n                   WLAM(I)=WLAM(I)*(1.0-ROOTS(J)),.                     CANC1620\n                   END,.                                                CANC1630\n              BAT  =WLAM(I),.          /* CHI-SQUARE                  */CANC1640\n              CHISQ(I)=-(FN-0.5*FM)*LOG(BAT),.                          CANC1650\n /*                                                                   */CANC1660\n /*      CALCULATE DEGREES OF FREEDOM FOR CHI-SQUARE                  */CANC1670\n /*                                                                   */CANC1680\n              N1  =I-1,.                                                CANC1690\n              NDF(I)=(MP-N1)*(MQ-N1),.                                  CANC1700\n /*                                                                   */CANC1710\n /*      I-TH SET OF RIGHT HAND COEFICIENTS                           */CANC1720\n /*                                                                   */CANC1730\n                   DO J = 1 TO MQ,.                                     CANC1740\n                   COEFR(J,I)=X(J,I),.                                  CANC1750\n                   END,.                                                CANC1760\n /*                                                                   */CANC1770\n /*      I-TH SET OF LEFT HAND COEFFICIENTS                           */CANC1780\n /*                                                                   */CANC1790\n                   DO J = 1 TO MP,.                                     CANC1800\n                   DET  =0.0,.                                          CANC1810\n                        DO K = 1 TO MQ,.                                CANC1820\n                        DET  =DET+T(J,K)*COEFR(K,I),.                   CANC1830\n                        END,.                                           CANC1840\n                   COEFL(J,I)=DET/CANR(I),.                             CANC1850\n                   END,.                                                CANC1860\n              END,.                                                     CANC1870\n         END,.                                                          CANC1880\n    END,.                                                               CANC1890\n FIN..                                                                  CANC1900\n    RETURN,.                                                            CANC1910\n    END,.                              /*END OF PROCEDURE CANC        */CANC1920\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n MINV..                                                                 MINV  10\n /*********************************************************************/MINV  20\n /*                                                                   */MINV  30\n /*      TO INVERT A MATRIX                                           */MINV  40\n /*                                                                   */MINV  50\n /*********************************************************************/MINV  60\n    PROCEDURE (A,N,D,CON),.                                             MINV  70\n    DECLARE                                                             MINV  80\n         ERROR EXTERNAL CHARACTER(1),                                   MINV  90\n         (I,J,K,N,L(N),M(N))                                            MINV 100\n         FIXED BINARY,                                                  MINV 110\n         (A(*,*),BIGA,HOLD,D,CON,S)                                     MINV 120\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/MINV 130\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/MINV 140\n /*                                                                   */MINV 150\n    ERROR='0',.                                                         MINV 160\n    IF N LE 0                                                           MINV 170\n    THEN DO,.                                                           MINV 180\n         ERROR='1',.                   /* ORDER OF MATRIX = 0.        */MINV 190\n         GO TO FIN,.                                                    MINV 200\n         END,.                                                          MINV 210\n    IF CON= 0                                                           MINV 220\n    THEN S    =1.0E-5,.                /* SINGLE PRECISION VERSION /*S*/MINV 230\n  /*THEN S    =1.0E-15,.               /* DOUBLE PRECISION VERSION /*D*/MINV 240\n    ELSE S    =CON,.                                                    MINV 250\n    IF N = 1                           /* INVERT A SCALAR             */MINV 260\n    THEN DO,.                                                           MINV 270\n         D    =A(1,1),.                                                 MINV 280\n         IF ABS(D) LE S                                                 MINV 290\n         THEN DO,.                                                      MINV 300\n              ERROR='2',.                                               MINV 310\n              END,.                                                     MINV 320\n         ELSE A(1,1) = 1/D,.                                            MINV 330\n         GO TO FIN,.                                                    MINV 340\n         END,.                                                          MINV 350\n    D    =1.0,.                        /* SEARCH FOR LARGEST ELEMENT  */MINV 360\n         DO K = 1 TO N,.                                                MINV 370\n         L(K) =K,.                                                      MINV 380\n         M(K) =K,.                                                      MINV 390\n         BIGA =A(K,K),.                                                 MINV 400\n              DO I=K TO N,.                                             MINV 410\n                   DO J=K TO N,.                                        MINV 420\n                   IF ABS(BIGA) LT ABS(A(I,J))                          MINV 430\n                   THEN DO,.                                            MINV 440\n                        BIGA =A(I,J),.                                  MINV 450\n                        L(K) =I,.                                       MINV 460\n                        M(K) =J,.                                       MINV 470\n                        END,.                                           MINV 480\n                   END,.                                                MINV 490\n              END,.                                                     MINV 500\n         J    =L(K),.                  /* INTERCHANGE ROWS            */MINV 510\n         IF L(K) GT K                                                   MINV 520\n         THEN DO,.                                                      MINV 530\n                   DO I = 1 TO N,.                                      MINV 540\n                   HOLD =-A(K,I),.                                      MINV 550\n                   A(K,I)=A(J,I),.                                      MINV 560\n                   A(J,I)=HOLD,.                                        MINV 570\n                   END,.                                                MINV 580\n              END,.                                                     MINV 590\n         I    =M(K),.                  /* INTERCHANGE COLUMNS         */MINV 600\n         IF M(K) GT K                                                   MINV 610\n         THEN DO,.                                                      MINV 620\n                   DO J = 1 TO N,.                                      MINV 630\n                   HOLD =-A(J,K),.                                      MINV 640\n                   A(J,K)=A(J,I),.                                      MINV 650\n                   A(J,I)=HOLD,.                                        MINV 660\n                   END,.                                                MINV 670\n              END,.                                                     MINV 680\n         IF ABS(BIGA) LE S                                              MINV 690\n         THEN DO,.                                                      MINV 700\n              D    =0.0,.                                               MINV 710\n              GO TO COMP,.                                              MINV 720\n              END,.                                                     MINV 730\n /*                                                                   */MINV 740\n /*      DIVIDE COLUMNS BY MINUS PIVOT (VALUE OF PIVOT ELEMENT IS     */MINV 750\n /*      CONTAINED IN BIGA)                                           */MINV 760\n              DO I = 1 TO N,.                                           MINV 770\n              IF I NE K                                                 MINV 780\n              THEN A(I,K)=A(I,K)/(-A(K,K)),.                            MINV 790\n              END,.                                                     MINV 800\n              DO I = 1 TO N,.          /* REDUCE MATRIX               */MINV 810\n              IF I NE K                                                 MINV 820\n              THEN DO,.                                                 MINV 830\n                        DO J = 1 TO N,.                                 MINV 840\n                        IF J NE K                                       MINV 850\n                        THEN A(I,J)=A(I,K)*A(K,J)+A(I,J),.              MINV 860\n                        END,.                                           MINV 870\n                   END,.                                                MINV 880\n              END,.                                                     MINV 890\n              DO J = 1 TO N,.                                           MINV 900\n              IF J NE K                /* DIVIDE BY ROW PIVOT         */MINV 910\n              THEN A(K,J)=A(K,J)/A(K,K),.                               MINV 920\n              END,.                                                     MINV 930\n         D    =D*A(K,K),.              /* COMPUTE DETERMINANT         */MINV 940\n COMP..                                                                 MINV 950\n         IF ABS(D) LE S                                                 MINV 960\n         THEN DO,.                                                      MINV 970\n              ERROR='2',.              /* DETERMINANT IS ZERO         */MINV 980\n              GO TO FIN,.                                               MINV 990\n              END,.                                                     MINV1000\n         A(K,K)=1.0/A(K,K),.           /* REPLACE PIVOT BY RECIPROCAL */MINV1010\n         END,.                                                          MINV1020\n /*                                                                   */MINV1030\n /*      FINAL ROW AND COLUMN INTERCHANGE                             */MINV1040\n /*                                                                   */MINV1050\n    K    =N,.                                                           MINV1060\n LOOP..                                                                 MINV1070\n    K    =K-1,.                                                         MINV1080\n    IF K GT 0                                                           MINV1090\n    THEN DO,.                                                           MINV1100\n         I    =L(K),.                                                   MINV1110\n         IF I GT K                                                      MINV1120\n         THEN DO,.                                                      MINV1130\n                   DO J = 1 TO N,.                                      MINV1140\n                   HOLD =A(J,K),.                                       MINV1150\n                   A(J,K)=-A(J,I),.                                     MINV1160\n                   A(J,I)=HOLD,.                                        MINV1170\n                   END,.                                                MINV1180\n              END,.                                                     MINV1190\n         J    =M(K),.                                                   MINV1200\n         IF J GT K                                                      MINV1210\n         THEN DO,.                                                      MINV1220\n                   DO I = 1 TO N,.                                      MINV1230\n                   HOLD =A(K,I),.                                       MINV1240\n                   A(K,I)=-A(J,I),.                                     MINV1250\n                   A(J,I)=HOLD,.                                        MINV1260\n                   END,.                                                MINV1270\n              END,.                                                     MINV1280\n         GO TO LOOP,.                                                   MINV1290\n         END,.                                                          MINV1300\n FIN..                                                                  MINV1310\n    RETURN,.                                                            MINV1320\n    END,.                              /*END OF PROCEDURE MINV        */MINV1330\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n MGDU..                                                                 MGDU  10\n /*********************************************************************/MGDU  20\n /*                                                                   */MGDU  30\n /*      TO COMPUTE EIGENVALUES AND EIGENVECTORS OF A REAL NONSYMM-   */MGDU  40\n /*      ETRIC MATRIX OF THE FORM B INVERSE TIMES A.                  */MGDU  50\n /*                                                                   */MGDU  60\n /*********************************************************************/MGDU  70\n    PROCEDURE (M,A,B,XL,X),.                                            MGDU  80\n    DECLARE                                                             MGDU  90\n         (I,J,M,MV,K)                                                   MGDU 100\n         FIXED BINARY,                                                  MGDU 110\n         ERROR EXTERNAL CHARACTER(1),                                   MGDU 120\n         (A(*,*),B(*,*),X(*,*),XL(*),SUMV)                              MGDU 130\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/MGDU 140\n  /*     BINARY FLOAT(53),.            /*DOUBLE PRECISION VERSION  /*D*/MGDU 150\n /*                                                                   */MGDU 160\n /*      COMPUTE EIGENVALUES AND EIGENVECTORS OF B                    */MGDU 170\n /*                                                                   */MGDU 180\n /*      THE MATRIX B IS A REAL SYMMETRIC MATRIX.                     */MGDU 190\n /*                                                                   */MGDU 200\n    MV   =0,.                                                           MGDU 210\n    CALL MSDU (B,X,M,MV),.                                              MGDU 220\n    IF ERROR NE '0'                                                     MGDU 230\n    THEN GO TO FIN,.                                                    MGDU 240\n /*                                                                   */MGDU 250\n /*      FORM RECIPROCALS OF SQUARE ROOT OF EIGENVALUES. THE RESULTS  */MGDU 260\n /*      ARE PREMULTIPLIED BY THE ASSOCIATED EIGENVECTORS.            */MGDU 270\n /*                                                                   */MGDU 280\n         DO I = 1 TO M,.                                                MGDU 290\n         XL(I)=1.0/SQRT(ABS(B(I,I))),.                                  MGDU 300\n              DO J = 1 TO M,.                                           MGDU 310\n              B(J,I)=X(J,I)*XL(I),.                                     MGDU 320\n              END,.                                                     MGDU 330\n         END,.                                                          MGDU 340\n /*                                                                   */MGDU 350\n /*      FORM (B**(-1/2))PRIME * A * (B**(-1/2))                      */MGDU 360\n /*                                                                   */MGDU 370\n         DO I = 1 TO M,.                                                MGDU 380\n              DO J = 1 TO M,.                                           MGDU 390\n              X(I,J)=0.0,.                                              MGDU 400\n                   DO K = 1 TO M,.                                      MGDU 410\n                   X(I,J)=X(I,J)+B(K,I)*A(K,J),.                        MGDU 420\n                   END,.                                                MGDU 430\n              END,.                                                     MGDU 440\n         END,.                                                          MGDU 450\n         DO I = 1 TO M,.                                                MGDU 460\n              DO J = 1 TO M,.                                           MGDU 470\n              A(I,J)=0.0,.                                              MGDU 480\n                   DO K = 1 TO M,.                                      MGDU 490\n                   A(I,J)=A(I,J)+X(I,K)*B(K,J),.                        MGDU 500\n                   END,.                                                MGDU 510\n              END,.                                                     MGDU 520\n         END,.                                                          MGDU 530\n /*                                                                   */MGDU 540\n /*      COMPUTE EIGENVALUES AND EIGENVECTORS OF A                    */MGDU 550\n /*                                                                   */MGDU 560\n    CALL MSDU (A,X,M,MV),.                                              MGDU 570\n         DO I = 1 TO M,.                                                MGDU 580\n         XL(I)=A(I,I),.                                                 MGDU 590\n /*                                                                   */MGDU 600\n /*      COMPUTE THE NORMALIZED EIGENVECTORS                          */MGDU 610\n /*                                                                   */MGDU 620\n              DO J = 1 TO M,.                                           MGDU 630\n              A(I,J)=0.0,.                                              MGDU 640\n                   DO K = 1 TO M,.                                      MGDU 650\n                   A(I,J)=A(I,J)+B(I,K)*X(K,J),.                        MGDU 660\n                   END,.                                                MGDU 670\n              END,.                                                     MGDU 680\n         END,.                                                          MGDU 690\n         DO J = 1 TO M,.                                                MGDU 700\n         SUMV =0.0,.                                                    MGDU 710\n              DO K = 1 TO M,.                                           MGDU 720\n              SUMV =SUMV+A(K,J)*A(K,J),.                                MGDU 730\n              END,.                                                     MGDU 740\n         SUMV =SQRT(SUMV),.                                             MGDU 750\n              DO K = 1 TO M,.                                           MGDU 760\n              X(K,J)=A(K,J)/SUMV,.                                      MGDU 770\n              END,.                                                     MGDU 780\n         END,.                                                          MGDU 790\n FIN..                                                                  MGDU 800\n    RETURN,.                                                            MGDU 810\n    END,.                              /*END OF PROCEDURE MGDU        */MGDU 820\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n MSDU..                                                                 MSDU  10\n /*********************************************************************/MSDU  20\n /*                                                                   */MSDU  30\n /*      TO COMPUTE EIGENVALUES AND EIGENVECTORS OF A REAL SYMMETRIC  */MSDU  40\n /*      MATRIX                                                       */MSDU  50\n /*                                                                   */MSDU  60\n /*********************************************************************/MSDU  70\n    PROCEDURE (A,R,N,MV),.                                              MSDU  80\n    DECLARE                                                             MSDU  90\n         (I,IND,J,L,M,MV,N)                                             MSDU 100\n         FIXED BINARY,                                                  MSDU 110\n         ERROR EXTERNAL CHARACTER(1),                                   MSDU 120\n         (A(*,*),R(*,*),ANORM,ANRMX,THR,U,Y,SINX,SINX2,COSX,COSX2,SINCS,MSDU 130\n         FN)                                                            MSDU 140\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/MSDU 150\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/MSDU 160\n /*                                                                   */MSDU 170\n    ERROR='0',.                                                         MSDU 180\n    IF N LE 1                          /* THE ORDER OF MATRIX A IS    */MSDU 190\n    THEN DO,.                          /* LESS THAN OR EQUAL TO ONE.  */MSDU 200\n         ERROR='1',.                                                    MSDU 210\n         GO TO FIN,.                                                    MSDU 220\n         END,.                                                          MSDU 230\n    FN   =N,.                                                           MSDU 240\n    IF MV= 0                                                            MSDU 250\n    THEN DO,.                                                           MSDU 260\n              DO I = 1 TO N,.          /* GENERATE IDENTITY MATRIX    */MSDU 270\n                   DO J = 1 TO N,.                                      MSDU 280\n                  R(I,J)=0,.                                            MSDU 290\n                   END,.                                                MSDU 300\n              R(I,I)=1,.                                                MSDU 310\n              END,.                                                     MSDU 320\n         END,.                                                          MSDU 330\n /*                                                                   */MSDU 340\n /*      COMPUTE INITIAL AND FINAL NORM                               */MSDU 350\n /*                                                                   */MSDU 360\n    ANORM=0,.                                                           MSDU 370\n         DO I = 1 TO N-1,.                                              MSDU 380\n              DO J = I+1 TO N,.                                         MSDU 390\n              ANORM=ANORM+A(I,J)*A(I,J),.                               MSDU 400\n              END,.                                                     MSDU 410\n         END,.                                                          MSDU 420\n    IF ANORM LE 0.0                                                     MSDU 430\n    THEN GO TO SORT,.                                                   MSDU 440\n    ANORM=1.414*SQRT(ANORM),.                                           MSDU 450\n    ANRMX=ANORM*1.0E-6/FN,.                                             MSDU 460\n /*                                                                   */MSDU 470\n /*      INITIALIZE INDICATOR AND COMPUTE THRESHOLD, THR              */MSDU 480\n /*                                                                   */MSDU 490\n    IND  =0,.                                                           MSDU 500\n    THR  =ANORM,.                                                       MSDU 510\n S10..                                                                  MSDU 520\n    THR  =THR/FN,.                                                      MSDU 530\n S20..                                                                  MSDU 540\n    L    =1,.                                                           MSDU 550\n S30..                                                                  MSDU 560\n    M    =L+1,.                                                         MSDU 570\n S40..                                                                  MSDU 580\n    IF ABS(A(L,M)) GE THR              /* COMPUTE SIN AND COS         */MSDU 590\n    THEN DO,.                                                           MSDU 600\n         IND  =1,.                                                      MSDU 610\n         U    =0.5*(A(L,L)-A(M,M)),.                                    MSDU 620\n         Y    =-A(L,M)/SQRT(A(L,M)*A(L,M)+U*U),.                        MSDU 630\n         IF U LT 0.0                                                    MSDU 640\n         THEN Y    =-Y,.                                                MSDU 650\n         SINX =Y/SQRT(2.0*(1.0+(SQRT(1.0-Y*Y)))),.                      MSDU 660\n         SINX2=SINX*SINX,.                                              MSDU 670\n         COSX =SQRT(1.0-SINX2),.                                        MSDU 680\n         COSX2=COSX*COSX,.                                              MSDU 690\n         SINCS=SINX*COSX,.                                              MSDU 700\n              DO I = 1 TO N,.          /* ROTATE L AND M COLUMNS      */MSDU 710\n              IF I LT L                                                 MSDU 720\n              THEN DO,.                                                 MSDU 730\n                   IF I LT M                                            MSDU 740\n                   THEN DO,.                                            MSDU 750\n                        U    =A(I,L)*COSX-A(I,M)*SINX,.                 MSDU 760\n                        A(I,M)=A(I,L)*SINX+A(I,M)*COSX,.                MSDU 770\n                        A(I,L)=U,.                                      MSDU 780\n                        END,.                                           MSDU 790\n                   END,.                                                MSDU 800\n              ELSE IF I GT L                                            MSDU 810\n              THEN DO,.                                                 MSDU 820\n                   IF I LT M                                            MSDU 830\n                   THEN DO,.                                            MSDU 840\n                        U    =A(L,I)*COSX-A(I,M)*SINX,.                 MSDU 850\n                        A(I,M)=A(L,I)*SINX+A(I,M)*COSX,.                MSDU 860\n                        END,.                                           MSDU 870\n                   ELSE IF I GT M                                       MSDU 880\n                   THEN DO,.                                            MSDU 890\n                        U    =A(L,I)*COSX-A(M,I)*SINX,.                 MSDU 900\n                        A(M,I)=A(L,I)*SINX+A(M,I)*COSX,.                MSDU 910\n                        END,.                                           MSDU 920\n                   IF I NE M                                            MSDU 930\n                   THEN A(L,I)=U,.                                      MSDU 940\n                   END,.                                                MSDU 950\n              IF MV= 0                                                  MSDU 960\n              THEN DO,.                                                 MSDU 970\n                   U    =R(I,L)*COSX-R(I,M)*SINX,.                      MSDU 980\n                   R(I,M)=R(I,L)*SINX+R(I,M)*COSX,.                     MSDU 990\n                   R(I,L)=U,.                                           MSDU1000\n                   END,.                                                MSDU1010\n              END,.                                                     MSDU1020\n         U    =2.0*A(L,M)*SINCS,.                                       MSDU1030\n         Y    =A(L,L)*COSX2+A(M,M)*SINX2-U,.                            MSDU1040\n         U    =A(L,L)*SINX2+A(M,M)*COSX2+U,.                            MSDU1050\n         A(L,M)=(A(L,L)-A(M,M))*SINCS+A(L,M)*(COSX2-SINX2),.            MSDU1060\n         A(L,L)=Y,.                                                     MSDU1070\n         A(M,M)=U,.                                                     MSDU1080\n         END,.                                                          MSDU1090\n    IF M NE N                          /* TEST FOR M = LAST COLUMN    */MSDU1100\n    THEN DO,.                                                           MSDU1110\n         M    =M+1,.                                                    MSDU1120\n         GO TO S40,.                                                    MSDU1130\n         END,.                                                          MSDU1140\n /*                                                                   */MSDU1150\n /*      TEST FOR L = SECOND FROM LAST COLUMN                         */MSDU1160\n /*                                                                   */MSDU1170\n    IF L NE N-1                                                         MSDU1180\n    THEN DO,.                                                           MSDU1190\n         L    =L+1,.                                                    MSDU1200\n         GO TO S30,.                                                    MSDU1210\n         END,.                                                          MSDU1220\n    IF IND= 1                                                           MSDU1230\n    THEN DO,.                                                           MSDU1240\n         IND  =0,.                                                      MSDU1250\n         GO TO S20,.                                                    MSDU1260\n         END,.                                                          MSDU1270\n /*                                                                   */MSDU1280\n /*      COMPARE THRESHOLD WITH FINAL NORM                            */MSDU1290\n /*                                                                   */MSDU1300\n    IF THR GT ANRMX                                                     MSDU1310\n    THEN GO TO S10,.                                                    MSDU1320\n /*                                                                   */MSDU1330\n /*      SORT EIGENVALUES AND EIGENVECTORS                            */MSDU1340\n /*                                                                   */MSDU1350\n SORT..                                                                 MSDU1360\n         DO I = 1 TO N,.                                                MSDU1370\n              DO J = I TO N,.                                           MSDU1380\n              IF A(I,I) LT A(J,J)                                       MSDU1390\n              THEN DO,.                                                 MSDU1400\n                   U    =A(I,I),.                                       MSDU1410\n                   A(I,I)=A(J,J),.                                      MSDU1420\n                   A(J,J)=U,.                                           MSDU1430\n                   IF MV= 0                                             MSDU1440\n                   THEN DO,.                                            MSDU1450\n                             DO L = 1 TO N,.                            MSDU1460\n                             U    =R(L,I),.                             MSDU1470\n                             R(L,I)=R(L,J),.                            MSDU1480\n                             R(L,J)=U,.                                 MSDU1490\n                             END,.                                      MSDU1500\n                        END,.                                           MSDU1510\n                   END,.                                                MSDU1520\n              END,.                                                     MSDU1530\n         END,.                                                          MSDU1540\n FIN..                                                                  MSDU1550\n    RETURN,.                                                            MSDU1560\n    END,.                              /*END OF PROCEDURE MSDU        */MSDU1570\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n DAT2..                                                                 DAT2  10\n /*********************************************************************/DAT2  20\n /*                                                                   */DAT2  30\n /*      TO READ FLOATING POINT DATA, ONE OBSERVATION AT A TIME.      */DAT2  40\n /*      DATA MAY BE SAVED ON A DATA SET.                             */DAT2  50\n /*                                                                   */DAT2  60\n /*********************************************************************/DAT2  70\n    PROCEDURE (M,D),.                                                   DAT2  80\n    DECLARE                                                             DAT2  90\n         XDATA FILE STREAM ENVIRONMENT (CONSECUTIVE V(2000,200)),       DAT2 100\n         (NCARD,NV) EXTERNAL,                                           DAT2 110\n         CH CHARACTER(NCARD),                                           DAT2 120\n         (I,M,MM) FIXED BINARY,                                         DAT2 130\n         D(*) FLOAT BINARY,.                                            DAT2 140\n /*                                                                   */DAT2 150\n    ON ENDFILE (SYSIN)                                                  DAT2 160\n    GO TO EXIT,.                                                        DAT2 170\n    GET EDIT (CH) (A(NCARD)),.                                          DAT2 180\n    MM   =CEIL(M/12),.                                                  DAT2 190\n    GET STRING (CH) EDIT ((D(I) DO I= 1 TO M))                          DAT2 200\n         ((MM)((12)F(6,0),X(8))),.                                      DAT2 210\n    IF NV= 1                                                            DAT2 220\n    THEN PUT FILE (XDATA) EDIT ((D(I) DO I= 1 TO M)) ((M)F(6,0)),.      DAT2 230\n    REVERT ENDFILE (SYSIN),.                                            DAT2 240\n    RETURN,.                                                            DAT2 250\n EXIT..                                                                 DAT2 260\n    PUT FILE (SYSPRINT) EDIT ('ERROR  INSUFFICIENT DATA')               DAT2 270\n         (SKIP(1),COLUMN(10),A),.                                       DAT2 280\n    STOP,.                                                              DAT2 290\n    END,.                              /*END OF PROCEDURE DAT2        */DAT2 300\n/*\n//GO.SYSIN DD *\nSAMPLE00023040301                                                             10\n   191   155    65    19   179   145    70                                    20\n   195   149    70    20   201   152    69                                    30\n   181   148    71    19   185   149    75                                    40\n   183   153    82    18   188   149    86                                    50\n   176   144    67    18   171   142    71                                    60\n   208   157    81    22   192   152    77                                    70\n   189   150    75    21   190   149    72                                    80\n   197   159    90    20   189   152    82                                    90\n   188   152    76    19   197   159    84                                   100\n   192   150    78    20   187   151    72                                   110\n   179   158    99    18   186   148    89                                   120\n   183   147    65    18   174   147    70                                   130\n   174   150    71    19   185   152    65                                   140\n   190   159    91    19   195   157    99                                   150\n   188   151    98    20   187   158    87                                   160\n   163   137    59    18   161   130    63                                   170\n   195   155    85    20   183   158    81                                   180\n   196   153    80    21   173   148    74                                   190\n   181   145    77    20   182   146    70                                   200\n   175   140    70    19   165   137    81                                   210\n   192   154    69    20   185   152    63                                   220\n   174   143    79    20   178   147    73                                   230\n   176   139    70    20   176   143    69                                   240\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FILE06": {"ttr": 5898, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00F\\x01\\x06\\x04O\\x01\\x06\\x04O\\x14\\x01\\x01j\\x01j\\x00\\x00\\xd7\\xd3\\xf1\\xe2\\xe2\\xd7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-02-13T00:00:00", "modifydate": "2006-02-13T14:01:46", "lines": 362, "newlines": 362, "modlines": 0, "user": "PL1SSP"}, "text": "//JOBE  JOB 111-1111,'SSP PL/1',MSGLEVEL=1\n//ANOV EXEC PL1LFCLG,PARM.PL1L='NOLIST,NOATR,NOXREF,CHAR48'\n//PL1L.SYSIN  DD  *\n ANOV..                                                                 ANOV  10\n /*********************************************************************/ANOV  20\n /*                                                                   */ANOV  30\n /*      TO READ THE PROBLEM PARAMETER CARD FOR ANALYSIS OF VARIANCE, */ANOV  40\n /*      CALL THE PROCEDURES FOR THE CALCULATION OF SUMS OF SQUARES,  */ANOV  50\n /*      DEGREES OF FREEDOM AND MEAN SQUARE, AND PRINT FACTOR LEVELS, */ANOV  60\n /*      GRAND MEAN AND ANALYSIS OF VARIANCE TABLE.                   */ANOV  70\n /*                                                                   */ANOV  80\n /*********************************************************************/ANOV  90\n    PROCEDURE OPTIONS (MAIN),.                                          ANOV 100\n    DECLARE                                                             ANOV 110\n         (I,J,K,L,M,MM,N)                                               ANOV 120\n         FIXED BINARY,                                                  ANOV 130\n         ERROR EXTERNAL CHARACTER(1),                                   ANOV 140\n         PR1 CHARACTER (6),                                             ANOV 150\n         CH  CHARACTER (80),.                                           ANOV 160\n /*                                                                   */ANOV 170\n    ON ENDFILE (SYSIN) GO TO EXIT,.                                     ANOV 180\n S100..                                                                 ANOV 190\n    GET EDIT (CH) (A(80)),.                                             ANOV 200\n    GET STRING (CH) EDIT (PR1,K) (A(6),F(2)),.                          ANOV 210\n /*                                                                   */ANOV 220\n /*      PR1....PROBLEM NUMBER (MAY BE ALPHAMERIC)                    */ANOV 230\n /*      K......NUMBER OF FACTORS                                     */ANOV 240\n /*                                                                   */ANOV 250\n    N    =(2**K)-1,.                                                    ANOV 260\n ONE..                                                                  ANOV 270\n    BEGIN,.                                                             ANOV 280\n    DECLARE                                                             ANOV 290\n         (SUMSQ(N),SMEAN(N),GMEAN,SUN)                                  ANOV 300\n         FLOAT BINARY,                 /*SINGLE PRECISION VERSION  /*S*/ANOV 310\n  /*     FLOAT BINARY (53),.           /*DOUBLE PRECISION VERSION  /*D*/ANOV 320\n         (LEVEL(K),NDF(N),ISTEP(K)) BINARY FIXED,                       ANOV 330\n         (HEAD(K),FMT(K)) CHARACTER (1),.                               ANOV 340\n    GET EDIT (CH) (A(80)),.                                             ANOV 350\n    GET STRING (CH) EDIT ((HEAD(I),LEVEL(I) DO I= 1 TO K))              ANOV 360\n         (14(A(1),F(4))),.                                              ANOV 370\n /*                                                                   */ANOV 380\n /*      HEAD...FACTOR LEVELS                                         */ANOV 390\n /*      LEVEL..LEVELS OF FACTORS                                     */ANOV 400\n /*                                                                   */ANOV 410\n    PUT EDIT ('ANALYSIS OF VARIANCE.....',PR1,'LEVELS OF FACTORS')      ANOV 420\n         (PAGE,SKIP(4),COLUMN(10),A,A(6),SKIP(4),COLUMN(10),A),.        ANOV 430\n    PUT EDIT ((HEAD(I),LEVEL(I) DO I= 1 TO K))                          ANOV 440\n         (SKIP,COLUMN(13),A(1),X(7),F(4)),.                             ANOV 450\n    M    = PROD (LEVEL),.                                               ANOV 460\n    MM   = PROD (LEVEL+1),.                                             ANOV 470\n TWO..                                                                  ANOV 480\n    BEGIN,.                                                             ANOV 490\n    DECLARE                                                             ANOV 500\n         X(MM)                                                          ANOV 510\n         FLOAT BINARY,.                /*SINGLE PRECISION VERSION  /*S*/ANOV 520\n  /*     FLOAT BINARY (53),.           /*DOUBLE PRECISION VERSION  /*D*/ANOV 530\n    X    =0,.                                                           ANOV 540\n /*                                                                   */ANOV 550\n /*      READ IN ALL INPUT DATA                                       */ANOV 560\n /*                                                                   */ANOV 570\n    CALL DAT3 (M,X),.                                                   ANOV 580\n    CALL AVAR (K,LEVEL,M,X,GMEAN,SUMSQ,NDF,SMEAN),.                     ANOV 590\n    IF ERROR NE '0'                                                     ANOV 600\n    THEN DO,.                                                           ANOV 610\n         PUT EDIT ('IN ROUTINE AVAR ERROR CODE = ',ERROR) (SKIP(2),     ANOV 620\n              COLUMN(10),A,A(1)),.                                      ANOV 630\n         GO TO S100,.                                                   ANOV 640\n         END,.                                                          ANOV 650\n /*                                                                   */ANOV 660\n /*      PRINT THE GRAND MEAN                                         */ANOV 670\n /*                                                                   */ANOV 680\n    PUT EDIT ('GRAND MEAN',GMEAN) (SKIP(6),COLUMN(10),A,F(20,5)),.      ANOV 690\n /*                                                                   */ANOV 700\n /*      PRINT ANALYSIS OF VARIANCE TABLE                             */ANOV 710\n /*                                                                   */ANOV 720\n    PUT EDIT ('SOURCE OF' ,'SUMS OF','DEGREES OF','MEAN',               ANOV 730\n         'VARIATION','SQUARES','FREEDOM','SQUARES')                     ANOV 740\n         (SKIP(6),COLUMN(10),A,X(18),A,X(10),A,X(9),A,SKIP,             ANOV 750\n         COLUMN(10),A,X(18),A,X(11),A,X(10),A),.                        ANOV 760\n    PUT SKIP(2),.                                                       ANOV 770\n    ISTEP= 0,.                         /* INITIALIZE FOR PRINT OUT    */ANOV 780\n    ISTEP(1)= 1,.                                                       ANOV 790\n         DO I = 1 TO N,.                                                ANOV 800\n         L    = 0,.                                                     ANOV 810\n              DO J = 1 TO K,.                                           ANOV 820\n              FMT(J)=' ',.                                              ANOV 830\n              IF ISTEP(J) NE 0                                          ANOV 840\n              THEN DO,.                                                 ANOV 850\n                   L    =L+1,.                                          ANOV 860\n                   FMT(L)=HEAD(J),.                                     ANOV 870\n                   END,.                                                ANOV 880\n              END,.                                                     ANOV 890\n         PUT EDIT ((FMT(L) DO L= 1 TO K),SUMSQ(I),NDF(I),SMEAN(I))      ANOV 900\n              (SKIP,COLUMN(10),(K)A(1),COLUMN(23),F(20,5),X(10),        ANOV 910\n              F(6),F(20,5)),.                                           ANOV 920\n         IF I LT N                                                      ANOV 930\n         THEN DO,.                                                      ANOV 940\n                   DO J = 1 TO K,.                                      ANOV 950\n                   IF ISTEP(J)= 0                                       ANOV 960\n                   THEN DO,.                                            ANOV 970\n                        ISTEP(J)=1,.                                    ANOV 980\n                        GO TO S160,.                                    ANOV 990\n                        END,.                                           ANOV1000\n                   ISTEP(J)=0,.                                         ANOV1010\n                   END,.                                                ANOV1020\n              END,.                                                     ANOV1030\n S160..                                                                 ANOV1040\n         END,.                                                          ANOV1050\n    M    =M-1,.                                                         ANOV1060\n    SUN  =SUM(SUMSQ),.                                                  ANOV1070\n    PUT EDIT ('TOTAL',SUN,M) (SKIP(2),COLUMN(10),A,X(10),F(18,5),       ANOV1080\n         X(10),F(6)),.                                                  ANOV1090\n    END,.                                                               ANOV1100\n    END,.                                                               ANOV1110\n    GO TO S100,.                                                        ANOV1120\n EXIT..                                                                 ANOV1130\n    PUT FILE (SYSPRINT) EDIT ('END OF SAMPLE PROGRAM')                  ANOV1140\n         (SKIP(5),COLUMN(10),A),.                                       ANOV1150\n    END,.                              /*END OF PROCEDURE ANOV        */ANOV1160\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n AVAR..                                                                 AVAR  10\n /*********************************************************************/AVAR  20\n /*                                                                   */AVAR  30\n /*      TO PERFORM AN ANALYSIS OF VARIANCE FOR A COMPLETE FACTORIAL  */AVAR  40\n /*      DESIGN.                                                      */AVAR  50\n /*                                                                   */AVAR  60\n /*********************************************************************/AVAR  70\n    PROCEDURE (K,LEVEL,N,X,GMEAN,SUMSQ,NDF,SMEAN),.                     AVAR  80\n    DECLARE                                                             AVAR  90\n         ERROR EXTERNAL CHARACTER(1),                                   AVAR 100\n         (LEVEL(*),NDF(*),KOUNT(K),ISTEP(K),LASTS(K),I,INCRE,J,K,L,LAST,AVAR 110\n         LL,N,N1,ND1,ND2,NN,NSIZ)                                       AVAR 120\n         FIXED BINARY,                                                  AVAR 130\n         (X(*),SUMSQ(*),SMEAN(*),FSUM,GMEAN,FN,FN1,FN2)                 AVAR 140\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/AVAR 150\n /*      BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/AVAR 160\n    ERROR='0',.                                                         AVAR 170\n    NSIZ =(2**K)-1,.                                                    AVAR 180\n    IF N LE 0                          /* THERE ARE NO DATA POINTS    */AVAR 190\n    THEN DO,.                                                           AVAR 200\n         ERROR='1',.                                                    AVAR 210\n         GO TO FIN,.                                                    AVAR 220\n         END,.                                                          AVAR 230\n    FN   =N,.                                                           AVAR 240\n    IF K LT 2                                                           AVAR 250\n    THEN DO,.                                                           AVAR 260\n         ERROR='2',.                   /* ONE OR LESS FACTORS         */AVAR 270\n         GO TO FIN,.                                                    AVAR 280\n         END,.                                                          AVAR 290\n         DO I = 1 TO K,.                                                AVAR 300\n         IF LEVEL(I) LT 2                                               AVAR 310\n         THEN DO,.                                                      AVAR 320\n              ERROR='3',.              /* 1 OR MORE LEVELS LESS THEN 2*/AVAR 330\n              GO TO FIN,.                                               AVAR 340\n              END,.                                                     AVAR 350\n         END,.                                                          AVAR 360\n /*                                                                   */AVAR 370\n /*      CALCULATE MULTIPLIERS TO BE USED IN FINDING STORAGE LOCATIONS*/AVAR 380\n /*      FOR INPUT DATA.                                              */AVAR 390\n /*                                                                   */AVAR 400\n    ISTEP(1)=1,.                                                        AVAR 410\n         DO I = 2 TO K,.                                                AVAR 420\n         ISTEP(I)=ISTEP(I-1)*(LEVEL(I-1)+1),.                           AVAR 430\n         END,.                                                          AVAR 440\n         DO I = 1 TO K,.               /* SET LEVEL COUNTER           */AVAR 450\n         KOUNT(I)=LEVEL(I),.                                            AVAR 460\n         END,.                                                          AVAR 470\n    N1   =N,.                                                           AVAR 480\n         DO I = 1 TO N,.               /* PLACE DATA IN PROPER PLACE  */AVAR 490\n         L    =KOUNT(1),.                                               AVAR 500\n              DO J = 2 TO K,.                                           AVAR 510\n              L    =L+ISTEP(J)*(KOUNT(J)-1),.                           AVAR 520\n              END,.                                                     AVAR 530\n         X(L) =X(N1),.                                                  AVAR 540\n         N1   =N1-1,.                                                   AVAR 550\n              DO J = 1 TO K,.                                           AVAR 560\n              IF KOUNT(J) GT 1                                          AVAR 570\n              THEN DO,.                                                 AVAR 580\n                   KOUNT(J)=KOUNT(J)-1,.                                AVAR 590\n                   GO TO S10,.                                          AVAR 600\n                   END,.                                                AVAR 610\n              KOUNT(J)=LEVEL(J),.                                       AVAR 620\n              END,.                                                     AVAR 630\n S10..                                                                  AVAR 640\n         END,.                                                          AVAR 650\n    L    =LEVEL(1),.                   /* CALCULATE LAST DATA POSITION*/AVAR 660\n         DO J = 2 TO K,.                                                AVAR 670\n         L    =L+ISTEP(J)*(LEVEL(J)-1),.                                AVAR 680\n         END,.                                                          AVAR 690\n /*                                                                   */AVAR 700\n /*      CALCULATE THE LAST DATA POSITION OF EACH FACTOR              */AVAR 710\n /*                                                                   */AVAR 720\n    LASTS(1)=L+1,.                                                      AVAR 730\n         DO I = 2 TO K,.                                                AVAR 740\n         LASTS(I)=LASTS(I-1)+ISTEP(I),.                                 AVAR 750\n         END,.                                                          AVAR 760\n         DO I = 1 TO K,.               /* PERFORM OPERATOR CALCULUS   */AVAR 770\n         L    =1,.                                                      AVAR 780\n         LL   =1,.                                                      AVAR 790\n         FSUM =0.0,.                                                    AVAR 800\n         NN   =LEVEL(I),.                                               AVAR 810\n         INCRE=ISTEP(I),.                                               AVAR 820\n         LAST =LASTS(I),.                                               AVAR 830\n S20..                                                                  AVAR 840\n              DO J = 1 TO NN,.         /* SIGMA OPERATION             */AVAR 850\n              FSUM =FSUM+X(L),.                                         AVAR 860\n              L    =L+INCRE,.                                           AVAR 870\n              END,.                                                     AVAR 880\n         X(L) =FSUM,.                                                   AVAR 890\n         FN1  =NN,.                                                     AVAR 900\n              DO J = 1 TO NN,.         /* DELTA OPERATION             */AVAR 910\n              X(LL)=FN1*X(LL)-FSUM,.                                    AVAR 920\n              LL   =LL+INCRE,.                                          AVAR 930\n              END,.                                                     AVAR 940\n         FSUM =0.0,.                                                    AVAR 950\n         IF L LT LAST                                                   AVAR 960\n         THEN DO,.                                                      AVAR 970\n              IF L LE LAST-INCRE                                        AVAR 980\n              THEN DO,.                                                 AVAR 990\n                   L    =L+INCRE,.                                      AVAR1000\n                   LL   =LL+INCRE,.                                     AVAR1010\n                   GO TO S20,.                                          AVAR1020\n                   END,.                                                AVAR1030\n              L    =L+INCRE+1-LAST,.                                    AVAR1040\n              LL   =LL+INCRE+1-LAST,.                                   AVAR1050\n              GO TO S20,.                                               AVAR1060\n              END,.                                                     AVAR1070\n         END,.                                                          AVAR1080\n         DO I = 1 TO NSIZ,.                                             AVAR1090\n         SUMSQ=0.0,.                                                    AVAR1100\n         END,.                                                          AVAR1110\n /*                                                                   */AVAR1120\n /*      SET UP CONTROL FOR MEAN SQUARE OPERATOR                      */AVAR1130\n /*                                                                   */AVAR1140\n    LASTS(1)=LEVEL(1),.                                                 AVAR1150\n    ISTEP(1)=1,.                                                        AVAR1160\n         DO I = 2 TO K,.                                                AVAR1170\n         LASTS(I)=LEVEL(I)+1,.                                          AVAR1180\n         ISTEP(I)=ISTEP(I-1)*2,.                                        AVAR1190\n         END,.                                                          AVAR1200\n    NN   =1,.                                                           AVAR1210\n         DO I = 1 TO K,.                                                AVAR1220\n         KOUNT(I)=0.0,.                                                 AVAR1230\n         END,.                                                          AVAR1240\n S30..                                                                  AVAR1250\n    L    =0,.                                                           AVAR1260\n         DO I = 1 TO K,.                                                AVAR1270\n         IF KOUNT(I) NE LASTS(I)                                        AVAR1280\n         THEN DO,.                                                      AVAR1290\n              IF L LE 0                                                 AVAR1300\n              THEN DO,.                                                 AVAR1310\n                   KOUNT(I)=KOUNT(I)+1,.                                AVAR1320\n                   IF KOUNT(I) LE LEVEL(I)                              AVAR1330\n                   THEN GO TO S40,.                                     AVAR1340\n                   GO TO S50,.                                          AVAR1350\n                   END,.                                                AVAR1360\n              IF KOUNT(I)= LEVEL(I)                                     AVAR1370\n              THEN GO TO S60,.                                          AVAR1380\n S40..                                                                  AVAR1390\n              L    =L+ISTEP(I),.                                        AVAR1400\n              GO TO S60,.                                               AVAR1410\n              END,.                                                     AVAR1420\n S50..                                                                  AVAR1430\n         KOUNT(I)=0,.                                                   AVAR1440\n S60..                                                                  AVAR1450\n         END,.                                                          AVAR1460\n    IF L GT 0                                                           AVAR1470\n    THEN DO,.                                                           AVAR1480\n         SUMSQ(L)=SUMSQ(L)+X(NN)*X(NN),.                                AVAR1490\n         NN   =NN+1,.                                                   AVAR1500\n         GO TO S30,.                                                    AVAR1510\n         END,.                                                          AVAR1520\n    GMEAN=X(NN)/FN,.                   /* CALCULATE MEAN              */AVAR1530\n /*                                                                   */AVAR1540\n /*      CALCULATE FIRST DIVISOR REQUIRED TO FORM SUM OF SQUARES AND  */AVAR1550\n /*      DIVISOR, WHICH IS EQUAL TO DEGREES OF FREEDOM, REQUIRED TO   */AVAR1560\n /*      FORM MEAN SQUARES                                            */AVAR1570\n /*                                                                   */AVAR1580\n    ISTEP=0,.                                                           AVAR1590\n    ISTEP(1)=1,.                                                        AVAR1600\n    NN   =0,.                                                           AVAR1610\n S70..                                                                  AVAR1620\n    ND1  =1,.                                                           AVAR1630\n    ND2  =1,.                                                           AVAR1640\n         DO I = 1 TO K,.                                                AVAR1650\n         IF ISTEP(I) NE 0                                               AVAR1660\n         THEN DO,.                                                      AVAR1670\n              ND1  =ND1*LEVEL(I),.                                      AVAR1680\n              ND2  =ND2*(LEVEL(I)-1),.                                  AVAR1690\n              END,.                                                     AVAR1700\n         END,.                                                          AVAR1710\n    FN1  =N*ND1,.                                                       AVAR1720\n    FN2  =ND2,.                                                         AVAR1730\n    NN   =NN+1,.                                                        AVAR1740\n    SUMSQ(NN)=SUMSQ(NN)/FN1,.                                           AVAR1750\n    SMEAN(NN)=SUMSQ(NN)/FN2,.                                           AVAR1760\n    NDF(NN)=ND2,.                                                       AVAR1770\n    IF NN LT LL                                                         AVAR1780\n    THEN DO,.                                                           AVAR1790\n              DO I = 1 TO K,.                                           AVAR1800\n              IF ISTEP(I) NE 0                                          AVAR1810\n              THEN ISTEP(I)=0,.                                         AVAR1820\n              ELSE DO,.                                                 AVAR1830\n                   ISTEP(I)=1,.                                         AVAR1840\n                   GO TO S70,.                                          AVAR1850\n                   END,.                                                AVAR1860\n              END,.                                                     AVAR1870\n         END,.                                                          AVAR1880\n FIN..                                                                  AVAR1890\n    RETURN,.                                                            AVAR1900\n    END,.                              /*END OF PROCEDURE AVAR        */AVAR1910\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n DAT3..                                                                 DAT3  10\n /*********************************************************************/DAT3  20\n /*                                                                   */DAT3  30\n /*      TO READ A VECTOR OF FLOATING POINT DATA.                     */DAT3  40\n /*                                                                   */DAT3  50\n /*********************************************************************/DAT3  60\n    PROCEDURE (M,D),.                                                   DAT3  70\n    DECLARE                                                             DAT3  80\n         CH CHARACTER(80),                                              DAT3  90\n         (I,M,N,N1,N2)                                                  DAT3 100\n         FIXED BINARY,                                                  DAT3 110\n         D(M) FLOAT BINARY,.                                            DAT3 120\n /*                                                                   */DAT3 130\n /*      N EQUAL THE NUMBER OF DATA POINTS PER 80 COLUMNS OF A DATA   */DAT3 140\n /*      CARD.                                                        */DAT3 150\n /*                                                                   */DAT3 160\n    ON ENDFILE (SYSIN)                                                  DAT3 170\n    GO TO EXIT,.                                                        DAT3 180\n    N    =12,.                                                          DAT3 190\n    N1   =1,.                                                           DAT3 200\n    N2   =N,.                                                           DAT3 210\n S10..                                                                  DAT3 220\n    IF M LE N2                                                          DAT3 230\n    THEN N2   =M,.                                                      DAT3 240\n    GET EDIT (CH) (A(80)),.                                             DAT3 250\n    GET STRING (CH) EDIT ((D(I) DO I= N1 TO N2)) ((N)F(6,0)),.          DAT3 260\n    N1   =N2+1,.                                                        DAT3 270\n    IF N1 LE M                                                          DAT3 280\n    THEN DO,.                                                           DAT3 290\n         N2   =N2+N,.                                                   DAT3 300\n         GO TO S10,.                                                    DAT3 310\n         END,.                                                          DAT3 320\n    REVERT ENDFILE (SYSIN),.                                            DAT3 330\n    RETURN,.                                                            DAT3 340\n EXIT..                                                                 DAT3 350\n    PUT FILE (SYSPRINT) EDIT ('ERROR  INSUFFICIENT DATA')               DAT3 360\n         (SKIP(1),COLUMN(10),A),.                                       DAT3 370\n    STOP,.                                                              DAT3 380\n    END,.                              /*END OF PROCEDURE DAT3        */DAT3 390\n/*\n//GO.SYSIN  DD  *\nSAMPLE 4                                                                      10\nA   4B   3C   3R   2                                                          20\n     3    10     9     8    24     8     9     3     2     8     9     8      30\n     4    12     3     9    22     7    16     2     2     2     7     2      40\n     5    10     5     8    23     9    17     3     2     8     6     3      50\n     2    14     9    13    29    16    11     3     2     7     5     3      60\n     7    11     5     8    28    18    10     6     6     6     5     9      70\n     9    10    27     8    28    16    11     7     8     9     8    15      80\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FILE07": {"ttr": 6151, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00P\\x01\\x06\\x04O\\x01\\x06\\x04O\\x14\\x01\\x02J\\x02J\\x00\\x00\\xd7\\xd3\\xf1\\xe2\\xe2\\xd7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-02-13T00:00:00", "modifydate": "2006-02-13T14:01:50", "lines": 586, "newlines": 586, "modlines": 0, "user": "PL1SSP"}, "text": "//JOBF  JOB 111-1111,'SSP PL/1',MSGLEVEL=1\n//MDSC EXEC PL1LFCLG,PARM.PL1L='NOLIST,NOATR,NOXREF,CHAR48'\n//PL1L.SYSIN  DD  *\n MDSC..                                                                 MDSC  10\n /*********************************************************************/MDSC  20\n /*                                                                   */MDSC  30\n /*      TO READ THE PROBLEM PARAMETER CARD AND DATA FOR DISCRIMINANT */MDSC  40\n /*      ANALYSIS, CALL THE PROCEDURES TO CALCULATE VARIABLE MEANS IN */MDSC  50\n /*      EACH GROUP, POOLED DISPERSION MATRIX, COMMON COEFFICIENTS OF */MDSC  60\n /*      DISCRIMINANT FUNCTIONS AND PROBABILITY ASSOCIATED WITH LARG- */MDSC  70\n /*      EST DISCRIMINANT FUNCTION OF EACH CASE IN EACH GROUP, AND    */MDSC  80\n /*      PRINT THE RESULTS.                                           */MDSC  90\n /*                                                                   */MDSC 100\n /*********************************************************************/MDSC 110\n    PROCEDURE OPTIONS (MAIN),.                                          MDSC 120\n    DECLARE                                                             MDSC 130\n         (I,J,K,L,M,N1,N2,NN)                                           MDSC 140\n         FIXED BINARY,                                                  MDSC 150\n         PR1 CHARACTER (6),                                             MDSC 160\n         ERROR EXTERNAL CHARACTER (1),                                  MDSC 170\n         (NCARD,NV) EXTERNAL,                                           MDSC 180\n         CH  CHARACTER (80),.                                           MDSC 190\n /*                                                                   */MDSC 200\n    ON ENDFILE (SYSIN) GO TO EXIT,.                                     MDSC 210\n S100..                                                                 MDSC 220\n    GET EDIT (CH) (A(80)),.                                             MDSC 230\n    GET STRING (CH) EDIT (PR1,K,M,NCARD) (A(6),3 F(2)),.                MDSC 240\n /*                                                                   */MDSC 250\n /*      PR1......PROBLEM NUMBER (MAY BE ALPHAMERIC)                  */MDSC 260\n /*      K........NUMBER OF GROUPS                                    */MDSC 270\n /*      M........NUMBER OF VARIABLES                                 */MDSC 280\n /*      NCARD....NUMBER OF CARDS PER OBSERVATION                     */MDSC 290\n /*                                                                   */MDSC 300\n    NCARD=NCARD*80,.                                                    MDSC 310\n    NV   =0,.                                                           MDSC 320\n ONE..                                                                  MDSC 330\n    BEGIN,.                                                             MDSC 340\n    DECLARE                                                             MDSC 350\n         N(K)  FIXED BINARY,                                            MDSC 360\n         (XBAR(M,K),C(M+1,K),D(M,M),CMEAN(M),DET,V,CON)                 MDSC 370\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/MDSC 380\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/MDSC 390\n /*                                                                   */MDSC 400\n /*      READ SAMPLE SIZE OF EACH GROUP                               */MDSC 410\n /*                                                                   */MDSC 420\n    GET EDIT (CH) (A(80)),.                                             MDSC 430\n    GET STRING (CH) EDIT ((N(I) DO I= 1 TO K))                          MDSC 440\n         (25 F(3)),.                                                    MDSC 450\n    NN   =SUM (N),.                                                     MDSC 460\n TWO..                                                                  MDSC 470\n    BEGIN,.                                                             MDSC 480\n    DECLARE                                                             MDSC 490\n         LG(NN)  FIXED BINARY,                                          MDSC 500\n         X(NN,M) FLOAT BINARY,                                          MDSC 510\n         P(NN)                                                          MDSC 520\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/MDSC 530\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/MDSC 540\n    PUT EDIT ('DISCRIMINANT ANALYSIS.....',PR1, '  NUMBER OF GROUPS',K, MDSC 550\n         '  NUMBER OF VARIABLES',M,'  SAMPLE SIZES..','GROUP')          MDSC 560\n         (PAGE,SKIP(4),COLUMN(10),A,A,SKIP(2),COLUMN(10),A,X(7),F(3),   MDSC 570\n         SKIP(1),COLUMN(10),A,F(7),SKIP(1),COLUMN(10),A,SKIP(1),        MDSC 580\n         COLUMN(22),A),.                                                MDSC 590\n    PUT EDIT ((I,N(I) DO I= 1 TO K)) (SKIP(1),COLUMN(22),F(3),X(8),     MDSC 600\n         F(4)),.                                                        MDSC 610\n    PUT EDIT ('  ') (SKIP(2),A),.                                       MDSC 620\n /*                                                                   */MDSC 630\n /*      READ IN DATA. IN THE MANNER EQUIVALENT TO A 3-DIMENSIONAL    */MDSC 640\n /*      ARRAY X(1,1,1),X(2,1,1),X(3,1,1),ETC. THE FIRST SUBSCRIPT    */MDSC 650\n /*      IS THE CASE NUMBER,THE SECOND SUBSCRIPT IS THE VARIABLE      */MDSC 660\n /*      NUMBER AND THE THIRD SUBSCRIPT IS THE GROUP NUMBER           */MDSC 670\n /*                                                                   */MDSC 680\n         DO I = 1 TO NN,.                                               MDSC 690\n         CALL DAT2 (M,CMEAN),.                                          MDSC 700\n              DO J = 1 TO M,.                                           MDSC 710\n              X(I,J)=CMEAN(J),.                                         MDSC 720\n              END,.                                                     MDSC 730\n         END,.                                                          MDSC 740\n    CALL DMTX (K,M,N,X,XBAR,D),.                                        MDSC 750\n    IF ERROR NE '0'                                                     MDSC 760\n    THEN DO,.                                                           MDSC 770\n         PUT EDIT ('IN ROUTINE DMTX ERROR CODE = ',ERROR)               MDSC 780\n              (SKIP(2),COLUMN(10),A,A(1)),.                             MDSC 790\n         GO TO FIN,.                                                    MDSC 800\n         END,.                                                          MDSC 810\n /*                                                                   */MDSC 820\n /*      PRINT MEANS AND POOLED DISPERSION MATRIX                     */MDSC 830\n /*                                                                   */MDSC 840\n         DO I = 1 TO K,.                                                MDSC 850\n         PUT EDIT ('GROUP',I,'MEANS') (SKIP(2),COLUMN(11),A,F(3),X(2),  MDSC 860\n              A),.                                                      MDSC 870\n         PUT EDIT ((XBAR(J,I) DO J= 1 TO M)) (SKIP(1),COLUMN(10),       MDSC 880\n              (6)F(15,5)),.                                             MDSC 890\n         END,.                                                          MDSC 900\n    PUT EDIT ('POOLED DISPERSION MATRIX') (SKIP(3),COLUMN(10),A),.      MDSC 910\n         DO I = 1 TO M,.                                                MDSC 920\n         PUT EDIT ('ROW',I) (SKIP(2),COLUMN(10),A,F(3)),.               MDSC 930\n         PUT EDIT ((D(I,J) DO J= 1 TO M)) (SKIP,COLUMN(10),6 F(15,5)),. MDSC 940\n         END,.                                                          MDSC 950\n    CON  =0,.                                                           MDSC 960\n    CALL MINV (D,M,DET,CON),.                                           MDSC 970\n    IF ERROR NE '0'                                                     MDSC 980\n    THEN DO,.                                                           MDSC 990\n         PUT EDIT ('IN ROUTINE MINV ERROR CODE = ',ERROR) (SKIP(2),     MDSC1000\n              COLUMN(10),A,A(1)),.                                      MDSC1010\n         GO TO CONT,.                                                   MDSC1020\n         END,.                                                          MDSC1030\n    CALL DSCR (K,M,N,X,XBAR,D,CMEAN,V,C,P,LG),.                         MDSC1040\n    IF ERROR NE '0'                                                     MDSC1050\n    THEN DO,.                                                           MDSC1060\n         PUT EDIT ('IN ROUTINE DSCR ERROR CODE = ',ERROR)               MDSC1070\n              (SKIP(2),COLUMN(10),A,A(1)),.                             MDSC1080\n         GO TO S100,.                                                   MDSC1090\n         END,.                                                          MDSC1100\n /*                                                                   */MDSC1110\n /*      PRINT THE COMMON MEANS.                                      */MDSC1120\n /*                                                                   */MDSC1130\n    PUT EDIT ('COMMON MEANS') (SKIP(4),COLUMN(10),A),.                  MDSC1140\n    PUT EDIT ((CMEAN(I) DO I= 1 TO M)) (SKIP,COLUMN(10),(6)F(15,5)),.   MDSC1150\n /*                                                                   */MDSC1160\n /*      PRINT GENERALIZED MAHALANOBIS D-SQUARE                       */MDSC1170\n /*                                                                   */MDSC1180\n    PUT EDIT ('GENERALIZED MAHALANOBIS D-SQUARE',V)                     MDSC1190\n         (SKIP(4),COLUMN(10),A,F(15,5),SKIP(2)),.                       MDSC1200\n /*                                                                   */MDSC1210\n /*      PRINT CONSTANTS AND COEFFICIENTS OF DISCRIMINANT FUNCTIONS   */MDSC1220\n /*                                                                   */MDSC1230\n         DO I = 1 TO K,.                                                MDSC1240\n         PUT EDIT ('DISCRIMINANT FUNCTION',I,'CONSTANT   *',            MDSC1250\n              'COEFFICIENTS') (SKIP(2),COLUMN(10),A,F(3),SKIP(2),       MDSC1260\n              COLUMN(16),A,X(3),A),.                                    MDSC1270\n         PUT EDIT (C(1,I),'   *   ') (SKIP(2),COLUMN(10),F(14,5),A),.   MDSC1280\n         PUT EDIT ((C(J,I) DO J= 2 TO M+1)) (SKIP,COLUMN(32),           MDSC1290\n              (6)F(14,5)),.                                             MDSC1300\n         END,.                                                          MDSC1310\n /*                                                                   */MDSC1320\n /*      PRINT EVALUATION OF CLASSIFICATION FUNCTIONS OF EACH         */MDSC1330\n /*      OBSERVATION.                                                 */MDSC1340\n /*                                                                   */MDSC1350\n    PUT EDIT ('EVALUATION OF CLASSIFICATION FUNCTIONS FOR EACH',        MDSC1360\n         ' OBSERVATION') (SKIP(4),COLUMN(10),A,A),.                     MDSC1370\n    N1   =1,.                                                           MDSC1380\n    N2   =N(1),.                                                        MDSC1390\n         DO I = 1 TO K,.                                                MDSC1400\n         PUT EDIT ('GROUP',I,'PROBABILITY ASSOCIATED WITH','LARGEST',   MDSC1410\n              ' OBSERVATION','LARGEST DISCRIMINANT FUNCTION',           MDSC1420\n              'FUNCTION NO.')                                           MDSC1430\n              (SKIP(2),COLUMN(10),A,F(3),SKIP,COLUMN(28),A,X(11),A,     MDSC1440\n              SKIP,COLUMN(10),A,X(5),A,X(8),A),.                        MDSC1450\n         L    =0,.                                                      MDSC1460\n              DO J = N1 TO N2,.                                         MDSC1470\n              L    =L+1,.                                               MDSC1480\n              PUT EDIT (L,P(J),LG(J)) (SKIP,COLUMN(10),F(6),X(20),F(8,5)MDSC1490\n                   ,X(20),F(6)),.                                       MDSC1500\n              END,.                                                     MDSC1510\n         IF I = K                                                       MDSC1520\n         THEN GO TO CONT,.                                              MDSC1530\n         N1   =N1+N(I),.                                                MDSC1540\n         N2   =N2+N(I+1),.                                              MDSC1550\n         END,.                                                          MDSC1560\n CONT..                                                                 MDSC1570\n    END,.                                                               MDSC1580\n    END,.                                                               MDSC1590\n    GO TO S100,.                                                        MDSC1600\n EXIT..                                                                 MDSC1610\n    PUT FILE (SYSPRINT) EDIT ('END OF SAMPLE PROGRAM')                  MDSC1620\n         (SKIP(5),COLUMN(10),A),.                                       MDSC1630\n FIN..                                                                  MDSC1640\n    END,.                              /*END OF PROCEDURE MDSC        */MDSC1650\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n DMTX..                                                                 DMTX  10\n /*********************************************************************/DMTX  20\n /*                                                                   */DMTX  30\n /*      TO COMPUTE MEANS OF VARIABLES IN EACH GROUP AND A POOLED     */DMTX  40\n /*      DISPERSION MATRIX FOR ALL THE GROUPS.                        */DMTX  50\n /*                                                                   */DMTX  60\n /*********************************************************************/DMTX  70\n    PROCEDURE (K,M,N,X,XBAR,D),.                                        DMTX  80\n    DECLARE                                                             DMTX  90\n         ERROR EXTERNAL CHARACTER (1),                                  DMTX 100\n         (N(*),I,J,K,K1,K2,KK,L,M,NN)                                   DMTX 110\n         FIXED BINARY,                                                  DMTX 120\n         (X(*,*),FSUM)                                                  DMTX 130\n         FLOAT BINARY,                                                  DMTX 140\n         (XBAR(*,*),D(*,*),CMEAN(M))                                    DMTX 150\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/DMTX 160\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/DMTX 170\n /*                                                                   */DMTX 180\n    ERROR='0',.                                                         DMTX 190\n    IF M LE 1                          /* THE NUMBER OF VARIABLES IS  */DMTX 200\n    THEN DO,.                          /* LESS THAN OR EQUAL TO ONE.  */DMTX 210\n         ERROR='1',.                                                    DMTX 220\n         GO TO FIN,.                                                    DMTX 230\n         END,.                                                          DMTX 240\n    IF K LE 1 OR K GT M                /* INVALID NUMBER OF GROUPS.   */DMTX 250\n    THEN DO,.                                                           DMTX 260\n         ERROR='2',.                                                    DMTX 270\n         GO TO FIN,.                                                    DMTX 280\n         END,.                                                          DMTX 290\n         DO J = 1 TO K,.                                                DMTX 300\n         IF N(J) LE 0                  /* NO OBSERVATIONS IN AT LEAST */DMTX 310\n         THEN DO,.                     /* ONE OF THE GROUPS           */DMTX 320\n              ERROR='3',.                                               DMTX 330\n              GO TO FIN,.                                               DMTX 340\n              END,.                                                     DMTX 350\n         END,.                                                          DMTX 360\n         DO I = 1 TO M,.                                                DMTX 370\n              DO J = 1 TO K,.                                           DMTX 380\n              XBAR(I,J)=0.0,.                                           DMTX 390\n              END,.                                                     DMTX 400\n         END,.                                                          DMTX 410\n    L    =0,.                                                           DMTX 420\n         DO I = 1 TO K,.                                                DMTX 430\n         NN   =N(I),.                                                   DMTX 440\n         FSUM =NN,.                                                     DMTX 450\n              DO J = 1 TO NN,.                                          DMTX 460\n              L    =L+1,.                                               DMTX 470\n                   DO KK = 1 TO M,.                                     DMTX 480\n                   XBAR(KK,I)=XBAR(KK,I)+X(L,KK),.                      DMTX 490\n                   END,.                                                DMTX 500\n              END,.                                                     DMTX 510\n              DO KK = 1 TO M,.                                          DMTX 520\n              XBAR(KK,I)=XBAR(KK,I)/FSUM,.                              DMTX 530\n              END,.                                                     DMTX 540\n         END,.                                                          DMTX 550\n /*                                                                   */DMTX 560\n /*      COMPUTE THE DISPERSION MATRIX                                */DMTX 570\n /*                                                                   */DMTX 580\n         DO I = 1 TO M,.                                                DMTX 590\n              DO J = 1 TO M,.                                           DMTX 600\n              D(I,J)=0.0,.                                              DMTX 610\n              END,.                                                     DMTX 620\n         END,.                                                          DMTX 630\n    L    =0,.                                                           DMTX 640\n         DO I = 1 TO K,.                                                DMTX 650\n         NN   =N(I),.                                                   DMTX 660\n              DO J = 1 TO NN,.                                          DMTX 670\n              L    =L+1,.                                               DMTX 680\n                   DO KK = 1 TO M,.                                     DMTX 690\n                   CMEAN(KK)=X(L,KK)-XBAR(KK,I),.                       DMTX 700\n                   END,.                                                DMTX 710\n                   DO K1 = 1 TO M,.                                     DMTX 720\n                        DO K2 = K1 TO M,.                               DMTX 730\n                        D(K1,K2)=D(K1,K2)+CMEAN(K1)*CMEAN(K2),.         DMTX 740\n                        END,.                                           DMTX 750\n                   END,.                                                DMTX 760\n              END,.                                                     DMTX 770\n         END,.                                                          DMTX 780\n    L    =0,.                                                           DMTX 790\n         DO KK = 1 TO K,.                                               DMTX 800\n         L    =L+N(KK),.                                                DMTX 810\n         END,.                                                          DMTX 820\n    FSUM =L-K,.                                                         DMTX 830\n         DO I = 1 TO M,.                                                DMTX 840\n              DO J = I TO M,.                                           DMTX 850\n              D(I,J)=D(I,J)/FSUM,.                                      DMTX 860\n              D(J,I)=D(I,J),.                                           DMTX 870\n              END,.                                                     DMTX 880\n         END,.                                                          DMTX 890\n FIN..                                                                  DMTX 900\n    RETURN,.                                                            DMTX 910\n    END,.                              /*END OF PROCEDURE DMTX        */DMTX 920\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n MINV..                                                                 MINV  10\n /*********************************************************************/MINV  20\n /*                                                                   */MINV  30\n /*      TO INVERT A MATRIX                                           */MINV  40\n /*                                                                   */MINV  50\n /*********************************************************************/MINV  60\n    PROCEDURE (A,N,D,CON),.                                             MINV  70\n    DECLARE                                                             MINV  80\n         ERROR EXTERNAL CHARACTER(1),                                   MINV  90\n         (I,J,K,N,L(N),M(N))                                            MINV 100\n         FIXED BINARY,                                                  MINV 110\n         (A(*,*),BIGA,HOLD,D,CON,S)                                     MINV 120\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/MINV 130\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/MINV 140\n /*                                                                   */MINV 150\n    ERROR='0',.                                                         MINV 160\n    IF N LE 0                                                           MINV 170\n    THEN DO,.                                                           MINV 180\n         ERROR='1',.                   /* ORDER OF MATRIX = 0.        */MINV 190\n         GO TO FIN,.                                                    MINV 200\n         END,.                                                          MINV 210\n    IF CON= 0                                                           MINV 220\n    THEN S    =1.0E-5,.                /* SINGLE PRECISION VERSION /*S*/MINV 230\n  /*THEN S    =1.0E-15,.               /* DOUBLE PRECISION VERSION /*D*/MINV 240\n    ELSE S    =CON,.                                                    MINV 250\n    IF N = 1                           /* INVERT A SCALAR             */MINV 260\n    THEN DO,.                                                           MINV 270\n         D    =A(1,1),.                                                 MINV 280\n         IF ABS(D) LE S                                                 MINV 290\n         THEN DO,.                                                      MINV 300\n              ERROR='2',.                                               MINV 310\n              END,.                                                     MINV 320\n         ELSE A(1,1) = 1/D,.                                            MINV 330\n         GO TO FIN,.                                                    MINV 340\n         END,.                                                          MINV 350\n    D    =1.0,.                        /* SEARCH FOR LARGEST ELEMENT  */MINV 360\n         DO K = 1 TO N,.                                                MINV 370\n         L(K) =K,.                                                      MINV 380\n         M(K) =K,.                                                      MINV 390\n         BIGA =A(K,K),.                                                 MINV 400\n              DO I=K TO N,.                                             MINV 410\n                   DO J=K TO N,.                                        MINV 420\n                   IF ABS(BIGA) LT ABS(A(I,J))                          MINV 430\n                   THEN DO,.                                            MINV 440\n                        BIGA =A(I,J),.                                  MINV 450\n                        L(K) =I,.                                       MINV 460\n                        M(K) =J,.                                       MINV 470\n                        END,.                                           MINV 480\n                   END,.                                                MINV 490\n              END,.                                                     MINV 500\n         J    =L(K),.                  /* INTERCHANGE ROWS            */MINV 510\n         IF L(K) GT K                                                   MINV 520\n         THEN DO,.                                                      MINV 530\n                   DO I = 1 TO N,.                                      MINV 540\n                   HOLD =-A(K,I),.                                      MINV 550\n                   A(K,I)=A(J,I),.                                      MINV 560\n                   A(J,I)=HOLD,.                                        MINV 570\n                   END,.                                                MINV 580\n              END,.                                                     MINV 590\n         I    =M(K),.                  /* INTERCHANGE COLUMNS         */MINV 600\n         IF M(K) GT K                                                   MINV 610\n         THEN DO,.                                                      MINV 620\n                   DO J = 1 TO N,.                                      MINV 630\n                   HOLD =-A(J,K),.                                      MINV 640\n                   A(J,K)=A(J,I),.                                      MINV 650\n                   A(J,I)=HOLD,.                                        MINV 660\n                   END,.                                                MINV 670\n              END,.                                                     MINV 680\n         IF ABS(BIGA) LE S                                              MINV 690\n         THEN DO,.                                                      MINV 700\n              D    =0.0,.                                               MINV 710\n              GO TO COMP,.                                              MINV 720\n              END,.                                                     MINV 730\n /*                                                                   */MINV 740\n /*      DIVIDE COLUMNS BY MINUS PIVOT (VALUE OF PIVOT ELEMENT IS     */MINV 750\n /*      CONTAINED IN BIGA)                                           */MINV 760\n              DO I = 1 TO N,.                                           MINV 770\n              IF I NE K                                                 MINV 780\n              THEN A(I,K)=A(I,K)/(-A(K,K)),.                            MINV 790\n              END,.                                                     MINV 800\n              DO I = 1 TO N,.          /* REDUCE MATRIX               */MINV 810\n              IF I NE K                                                 MINV 820\n              THEN DO,.                                                 MINV 830\n                        DO J = 1 TO N,.                                 MINV 840\n                        IF J NE K                                       MINV 850\n                        THEN A(I,J)=A(I,K)*A(K,J)+A(I,J),.              MINV 860\n                        END,.                                           MINV 870\n                   END,.                                                MINV 880\n              END,.                                                     MINV 890\n              DO J = 1 TO N,.                                           MINV 900\n              IF J NE K                /* DIVIDE BY ROW PIVOT         */MINV 910\n              THEN A(K,J)=A(K,J)/A(K,K),.                               MINV 920\n              END,.                                                     MINV 930\n         D    =D*A(K,K),.              /* COMPUTE DETERMINANT         */MINV 940\n COMP..                                                                 MINV 950\n         IF ABS(D) LE S                                                 MINV 960\n         THEN DO,.                                                      MINV 970\n              ERROR='2',.              /* DETERMINANT IS ZERO         */MINV 980\n              GO TO FIN,.                                               MINV 990\n              END,.                                                     MINV1000\n         A(K,K)=1.0/A(K,K),.           /* REPLACE PIVOT BY RECIPROCAL */MINV1010\n         END,.                                                          MINV1020\n /*                                                                   */MINV1030\n /*      FINAL ROW AND COLUMN INTERCHANGE                             */MINV1040\n /*                                                                   */MINV1050\n    K    =N,.                                                           MINV1060\n LOOP..                                                                 MINV1070\n    K    =K-1,.                                                         MINV1080\n    IF K GT 0                                                           MINV1090\n    THEN DO,.                                                           MINV1100\n         I    =L(K),.                                                   MINV1110\n         IF I GT K                                                      MINV1120\n         THEN DO,.                                                      MINV1130\n                   DO J = 1 TO N,.                                      MINV1140\n                   HOLD =A(J,K),.                                       MINV1150\n                   A(J,K)=-A(J,I),.                                     MINV1160\n                   A(J,I)=HOLD,.                                        MINV1170\n                   END,.                                                MINV1180\n              END,.                                                     MINV1190\n         J    =M(K),.                                                   MINV1200\n         IF J GT K                                                      MINV1210\n         THEN DO,.                                                      MINV1220\n                   DO I = 1 TO N,.                                      MINV1230\n                   HOLD =A(K,I),.                                       MINV1240\n                   A(K,I)=-A(J,I),.                                     MINV1250\n                   A(J,I)=HOLD,.                                        MINV1260\n                   END,.                                                MINV1270\n              END,.                                                     MINV1280\n         GO TO LOOP,.                                                   MINV1290\n         END,.                                                          MINV1300\n FIN..                                                                  MINV1310\n    RETURN,.                                                            MINV1320\n    END,.                              /*END OF PROCEDURE MINV        */MINV1330\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n DSCR..                                                                 DSCR  10\n /*********************************************************************/DSCR  20\n /*                                                                   */DSCR  30\n /*      TO COMPUTE A SET OF LINEAR FUNCTIONS WHICH SERVE AS INDICES  */DSCR  40\n /*      FOR CLASSIFYING AN INDIVIDUAL INTO ONE OF SEVERAL GROUPS.    */DSCR  50\n /*                                                                   */DSCR  60\n /*********************************************************************/DSCR  70\n    PROCEDURE (K,M,N,X,XBAR,D,CMEAN,V,C,P,LG),.                         DSCR  80\n    DECLARE                                                             DSCR  90\n         (N(*),LG(*),I,J,K,K1,K2,L,LL,M,N1,NN)                          DSCR 100\n         FIXED BINARY,                                                  DSCR 110\n         ERROR EXTERNAL CHARACTER(1),                                   DSCR 120\n         (X(*,*),FN(K))                                                 DSCR 130\n         BINARY FLOAT,                                                  DSCR 140\n         (XBAR(*,*),D(*,*),C(*,*),CMEAN(*),P(*),V,FSUM,PL)              DSCR 150\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/DSCR 160\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/DSCR 170\n /*                                                                   */DSCR 180\n    L    =0,.                                                           DSCR 190\n    ERROR='0',.                                                         DSCR 200\n    IF M LE 1                          /* NUMBER OF VARIABLES LESS    */DSCR 210\n    THEN DO,.                          /* THAN OR EQUAL TO ONE.       */DSCR 220\n         ERROR='1',.                                                    DSCR 230\n         GO TO FIN,.                                                    DSCR 240\n         END,.                                                          DSCR 250\n    IF K LE 1 OR K GT M                /* INVALID NUMBER OF GROUPS.   */DSCR 260\n    THEN DO,.                                                           DSCR 270\n         ERROR='2',.                                                    DSCR 280\n         GO TO FIN,.                                                    DSCR 290\n         END,.                                                          DSCR 300\n         DO I = 1 TO K,.                                                DSCR 310\n         IF N(I) LE 0                  /* NO OBSERVATIONS IN ONE OR   */DSCR 320\n         THEN DO,.                     /* MORE GROUPS.                */DSCR 330\n              ERROR='3',.                                               DSCR 340\n              GO TO FIN,.                                               DSCR 350\n              END,.                                                     DSCR 360\n         END,.                                                          DSCR 370\n         DO I = 1 TO K,.                                                DSCR 380\n         L    =L+N(I),.                                                 DSCR 390\n         END,.                                                          DSCR 400\n    FSUM =L,.                                                           DSCR 410\n         DO I = 1 TO M,.                                                DSCR 420\n         V    =0.0,.                                                    DSCR 430\n              DO J = 1 TO K,.                                           DSCR 440\n              V    =V+N(J)*XBAR(I,J),.                                  DSCR 450\n              END,.                                                     DSCR 460\n         CMEAN(I)=V/FSUM,.                                              DSCR 470\n         END,.                                                          DSCR 480\n /*                                                                   */DSCR 490\n /*      CALCULATE GENERALIZED MAHALANDBIS D SQUARE                   */DSCR 500\n /*                                                                   */DSCR 510\n    V    =0,.                                                           DSCR 520\n         DO I = 1 TO M,.                                                DSCR 530\n              DO J = 1 TO M,.                                           DSCR 540\n              FSUM =0.0,.                                               DSCR 550\n                   DO KK = 1 TO K,.                                     DSCR 560\n                   FSUM =FSUM+N(KK)*(XBAR(I,KK)-CMEAN(I))               DSCR 570\n                        *(XBAR(J,KK)-CMEAN(J)),.                        DSCR 580\n                   END,.                                                DSCR 590\n              V    =V+D(I,J)*FSUM,.                                     DSCR 600\n              END,.                                                     DSCR 610\n         END,.                                                          DSCR 620\n /*                                                                   */DSCR 630\n /*      CALCULATE THE COEFFICIENTS OF DISCRIMINANT FUNCTIONS         */DSCR 640\n /*                                                                   */DSCR 650\n         DO I = 1 TO K,.                                                DSCR 660\n         FSUM =0,.                                                      DSCR 670\n              DO J = 1 TO M,.                                           DSCR 680\n                   DO KK = 1 TO M,.                                     DSCR 690\n                   FSUM =FSUM+D(J,KK)*XBAR(J,I)*XBAR(KK,I),.            DSCR 700\n                   END,.                                                DSCR 710\n              END,.                                                     DSCR 720\n         C(1,I)=-(FSUM/2),.                                             DSCR 730\n              DO J = 1 TO M,.                                           DSCR 740\n              C(J+1,I)=0.0,.                                            DSCR 750\n                   DO KK = 1 TO M,.                                     DSCR 760\n                   C(J+1,I)=C(J+1,I)+D(J,KK)*XBAR(KK,I),.               DSCR 770\n                   END,.                                                DSCR 780\n              END,.                                                     DSCR 790\n         END,.                                                          DSCR 800\n /*                                                                   */DSCR 810\n /*      FOR EACH CASE IN EACH GROUP, CALCULATE.. DISCRIMINANT        */DSCR 820\n /*      FUNCTIONS.                                                   */DSCR 830\n /*                                                                   */DSCR 840\n    N1   =0,.                                                           DSCR 850\n    L    =0,.                                                           DSCR 860\n         DO I = 1 TO K,.                                                DSCR 870\n         NN   =N(I),.                                                   DSCR 880\n              DO J = 1 TO NN,.                                          DSCR 890\n              L    =L+1,.                                               DSCR 900\n                   DO K1 = 1 TO K,.                                     DSCR 910\n                   FN(K1)=C(1,K1),.                                     DSCR 920\n                        DO K2 = 1 TO M,.                                DSCR 930\n                        FN(K1)=FN(K1)+C(K2+1,K1)*X(L,K2),.              DSCR 940\n                        END,.                                           DSCR 950\n                   END,.                                                DSCR 960\n /*                                                                   */DSCR 970\n /*      THE LARGEST DISCRIMINANT FUNCTION                            */DSCR 980\n /*                                                                   */DSCR 990\n              LL  =1,.                                                  DSCR1000\n              FSUM =FN(1),.                                             DSCR1010\n                   DO K1 = 2 TO K,.                                     DSCR1020\n                   IF FSUM LT FN(K1)                                    DSCR1030\n                   THEN DO,.                                            DSCR1040\n                        LL   =K1,.                                      DSCR1050\n                        FSUM =FN(K1),.                                  DSCR1060\n                        END,.                                           DSCR1070\n                   END,.                                                DSCR1080\n /*                                                                   */DSCR1090\n /*      PROBABILITY ASSOCIATED WITH THE LARGEST DISCRIMINANT         */DSCR1100\n /*      FUNCTION.                                                    */DSCR1110\n /*                                                                   */DSCR1120\n              PL  =0,.                                                  DSCR1130\n                   DO KK = 1 TO K,.                                     DSCR1140\n                   PL   =PL+EXP(FN(KK)-FSUM),.                          DSCR1150\n                   END,.                                                DSCR1160\n              N1   =N1+1,.                                              DSCR1170\n              LG(N1)=LL,.                                               DSCR1180\n              P(N1)=1/PL,.                                              DSCR1190\n              END,.                                                     DSCR1200\n         END,.                                                          DSCR1210\n FIN..                                                                  DSCR1220\n    RETURN,.                                                            DSCR1230\n    END,.                              /*END OF PROCEDURE DSCR        */DSCR1240\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n DAT2..                                                                 DAT2  10\n /*********************************************************************/DAT2  20\n /*                                                                   */DAT2  30\n /*      TO READ FLOATING POINT DATA, ONE OBSERVATION AT A TIME.      */DAT2  40\n /*      DATA MAY BE SAVED ON A DATA SET.                             */DAT2  50\n /*                                                                   */DAT2  60\n /*********************************************************************/DAT2  70\n    PROCEDURE (M,D),.                                                   DAT2  80\n    DECLARE                                                             DAT2  90\n         XDATA FILE STREAM ENVIRONMENT (CONSECUTIVE V(2000,200)),       DAT2 100\n         (NCARD,NV) EXTERNAL,                                           DAT2 110\n         CH CHARACTER(NCARD),                                           DAT2 120\n         (I,M,MM) FIXED BINARY,                                         DAT2 130\n         D(*) FLOAT BINARY,.                                            DAT2 140\n /*                                                                   */DAT2 150\n    ON ENDFILE (SYSIN)                                                  DAT2 160\n    GO TO EXIT,.                                                        DAT2 170\n    GET EDIT (CH) (A(NCARD)),.                                          DAT2 180\n    MM   =CEIL(M/12),.                                                  DAT2 190\n    GET STRING (CH) EDIT ((D(I) DO I= 1 TO M))                          DAT2 200\n         ((MM)((12)F(6,0),X(8))),.                                      DAT2 210\n    IF NV= 1                                                            DAT2 220\n    THEN PUT FILE (XDATA) EDIT ((D(I) DO I= 1 TO M)) ((M)F(6,0)),.      DAT2 230\n    REVERT ENDFILE (SYSIN),.                                            DAT2 240\n    RETURN,.                                                            DAT2 250\n EXIT..                                                                 DAT2 260\n    PUT FILE (SYSPRINT) EDIT ('ERROR  INSUFFICIENT DATA')               DAT2 270\n         (SKIP(1),COLUMN(10),A),.                                       DAT2 280\n    STOP,.                                                              DAT2 290\n    END,.                              /*END OF PROCEDURE DAT2        */DAT2 300\n/*\n//GO.SYSIN  DD  *\nSAMPLE 4 6 1                                                                  10\n  8  7  7  8                                                                  20\n     3    10     9     8    24     8                                          30\n     4    12     3     8    22     7                                          40\n     9     3     2     8     9     8                                          50\n    16     2     2     2     7     2                                          60\n     5    10     5     8    23     9                                          70\n    17     3     2     8     6     3                                          80\n     2    10     9     8    29    16                                          90\n     7    10     5     8    28    18                                         100\n     9    10    27     8    28    16                                         110\n    11     7     8     9     8    15                                         120\n     8    10     2     8    27    16                                         130\n     1     6     8    14    14    13                                         140\n     7     8     9     6    18     2                                         150\n     7     9     8     2    19     9                                         160\n     7    10     5     8    27    17                                         170\n     3    11     9    15    20    10                                         180\n     9     4    10     7     9     9                                         190\n     4    13    10     7    21    15                                         200\n     8     5    16    16    16     7                                         210\n     6     9    10     5    23    11                                         220\n     8    10     5     8    27    16                                         230\n    17     3     2     7     6     3                                         240\n     3    10     8     8    23     8                                         250\n     4    12     3     8    23     7                                         260\n     9     3     2     8    21     7                                         270\n    15     2     2     2     7     2                                         280\n     9    10    26     8    27    16                                         290\n     8     9     2     8    26    16                                         300\n     7     8     6     9    18     2                                         310\n     7    10     5     8    26    16                                         320\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FILE08": {"ttr": 6407, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00U\\x01\\x06\\x04O\\x01\\x06\\x04O\\x14\\x01\\x03'\\x03'\\x00\\x00\\xd7\\xd3\\xf1\\xe2\\xe2\\xd7@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-02-13T00:00:00", "modifydate": "2006-02-13T14:01:55", "lines": 807, "newlines": 807, "modlines": 0, "user": "PL1SSP"}, "text": "//JOBG  JOB 111-1111,'SSP PL/1',MSGLEVEL=1\n//FACT EXEC PL1LFCLG,PARM.PL1L='NOLIST,NOATR,NOXREF,CHAR48'\n//PL1L.SYSIN  DD  *\n FACT..                                                                 FACT  10\n /*********************************************************************/FACT  20\n /*                                                                   */FACT  30\n /*      TO READ THE PROBLEM PARAMETER CARD, CALL FIVE PROCEDURES TO  */FACT  40\n /*      PERFORM A PRINCIPAL COMPONENT SOLUTION AND THE VARIMAX ROTA- */FACT  50\n /*      TION OF A FACTOR MATRIX, AND PRINT THE RESULTS.              */FACT  60\n /*                                                                   */FACT  70\n /*********************************************************************/FACT  80\n    PROCEDURE OPTIONS (MAIN),.                                          FACT  90\n    DECLARE                                                             FACT 100\n         (I,IO,J,K,M,MV,N,NC,NW)                                        FACT 110\n         FIXED BINARY,                                                  FACT 120\n         ERROR EXTERNAL CHARACTER(1),                                   FACT 130\n         (NV,NCARD) EXTERNAL,                                           FACT 140\n         CON                                                            FACT 150\n         FLOAT BINARY,                                                  FACT 160\n         PR1 CHARACTER (6),                                             FACT 170\n         CH  CHARACTER (80),.                                           FACT 180\n /*                                                                   */FACT 190\n    ON ENDFILE (SYSIN) GO TO EXIT,.                                     FACT 200\n S100..                                                                 FACT 210\n    GET EDIT (CH) (A(80)),.                                             FACT 220\n    GET STRING (CH) EDIT (PR1,N,M,CON,NCARD) (A(6),F(5),F(2),F(6,0),    FACT 230\n         F(2)),.                                                        FACT 240\n /*                                                                   */FACT 250\n /*      PR1........PROBLEM NUMBER (MAY BE ALPHAMERIC )               */FACT 260\n /*      N..........NUMBER OF CASES                                   */FACT 270\n /*      M..........NUMBER OF VARIABLES                               */FACT 280\n /*      CON........CONSTANT USED TO DECIDE HOW MANY EIGENVALUES      */FACT 290\n /*                 TO RETAIN                                         */FACT 300\n /*      NCARD......NUMBER OF DATA CARDS PER OBSERVATION              */FACT 310\n /*                                                                   */FACT 320\n    NCARD=NCARD*80,.                                                    FACT 330\n ONE..                                                                  FACT 340\n    BEGIN,.                                                             FACT 350\n    DECLARE                                                             FACT 360\n         (R(M,M),V(M,M),B(M),D(M),S(M),T(M),XBAR(M),TV(51),X(1,1))      FACT 370\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/FACT 380\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/FACT 390\n    PUT EDIT ('PRINCIPAL COMPONENT ANALYSIS.....',PR1, 'NO. OF CASES',  FACT 400\n         N,'NO. OF VARIABLES',M)                                        FACT 410\n         (PAGE,SKIP(4),COLUMN(10),A,A,SKIP(2),COLUMN(13),A,X(4),F(6)    FACT 420\n         ,SKIP(1),COLUMN(13),A,F(6),SKIP),.                             FACT 430\n    IO   =0,.                                                           FACT 440\n    X    =0,.                                                           FACT 450\n    NV   =0,.                                                           FACT 460\n    CALL CORR (N,M,IO,X,XBAR,S,V,R,D),.                                 FACT 470\n    IF ERROR NE '0'                                                     FACT 480\n    THEN DO,.                                                           FACT 490\n         PUT EDIT ('IN ROUTINE CORR ERROR CODE = ',ERROR)               FACT 500\n              (SKIP(2),COLUMN(10),A,A(1)),.                             FACT 510\n         GO TO S100,.                                                   FACT 520\n         END,.                                                          FACT 530\n    PUT EDIT ('MEANS') (SKIP(2),COLUMN(10),A),.                         FACT 540\n    PUT EDIT ((XBAR(J) DO J= 1 TO M)) (SKIP,COLUMN(10),(7)F(15,5)),.    FACT 550\n /*                                                                   */FACT 560\n /*      PRINT MEANS AND STANDARD DEVIATIONS                          */FACT 570\n /*                                                                   */FACT 580\n    PUT EDIT ('STANDARD DEVIATIONS') (SKIP(2),COLUMN(10),A),.           FACT 590\n    PUT EDIT ((S(J) DO J= 1 TO M)) (SKIP,COLUMN(10),(7)F(15,5)),.       FACT 600\n /*                                                                   */FACT 610\n /*      PRINT CORRELATION COEFFICIENTS                               */FACT 620\n /*                                                                   */FACT 630\n    PUT EDIT ('CORRELATION COEFFICIENTS') (SKIP(2),COLUMN(10),A),.      FACT 640\n         DO I = 1 TO M,.                                                FACT 650\n         PUT EDIT ('ROW',I) (SKIP(2),COLUMN(10),A,F(3)),.               FACT 660\n         PUT EDIT ((R(I,J) DO J= 1 TO M)) (SKIP,COLUMN(10),9 F(12,5)),. FACT 670\n         END,.                                                          FACT 680\n    MV   =0,.                                                           FACT 690\n    CALL MSDU (R,V,M,MV),.                                              FACT 700\n    IF ERROR NE '0'                                                     FACT 710\n    THEN DO,.                                                           FACT 720\n         PUT EDIT ('IN ROUTINE MSDU ERROR CODE ',ERROR)                 FACT 730\n              (SKIP(2),COLUMN(10),A,A(1)),.                             FACT 740\n         GO TO S100,.                                                   FACT 750\n         END,.                                                          FACT 760\n    CALL TRAC (M,R,CON,K,D),.                                           FACT 770\n    IF ERROR NE '0'                                                     FACT 780\n    THEN DO,.                                                           FACT 790\n         PUT EDIT ('IN ROUTINE TRAC ERROR CODE = ',ERROR)               FACT 800\n              (SKIP(2),COLUMN(10),A,A(1)),.                             FACT 810\n         GO TO S100,.                                                   FACT 820\n         END,.                                                          FACT 830\n         DO I = 1 TO K,.               /* PRINT EIGENVALUES           */FACT 840\n         S(I) =R(I,I),.                                                 FACT 850\n         END,.                                                          FACT 860\n    PUT EDIT ('EIGENVALUES') (SKIP(3),COLUMN(10),A),.                   FACT 870\n    PUT EDIT ((S(J) DO J= 1 TO K)) (SKIP,COLUMN(10),9 F(12,5)),.        FACT 880\n /*                                                                   */FACT 890\n /*      PRINT CUMULATIVE PERCENTAGE OF EIGENVALUES                   */FACT 900\n /*                                                                   */FACT 910\n    PUT EDIT ('CUMULATIVE PERCENTAGE OF EIGENVALUES')                   FACT 920\n         (SKIP(2),COLUMN(10),A),.                                       FACT 930\n    PUT EDIT ((D(J) DO J= 1 TO K)) (SKIP,COLUMN(10),9 F(12,5)),.        FACT 940\n /*                                                                   */FACT 950\n /*      PRINT EIGENVECTORS AND FACTOR MATRIX                         */FACT 960\n /*                                                                   */FACT 970\n    PUT EDIT ('EIGENVECTORS') (SKIP(3),COLUMN(10),A),.                  FACT 980\n         DO J = 1 TO K,.                                                FACT 990\n         PUT EDIT ('VECTOR',J) (SKIP(2),COLUMN(10),A,F(3)),.            FACT1000\n         PUT EDIT ((V(I,J) DO I= 1 TO M)) (SKIP,COLUMN(10),9 F(12,5)),. FACT1010\n         END,.                                                          FACT1020\n    PUT EDIT ('FACTOR MATRIX (',K,' FACTORS)')                          FACT1030\n         (SKIP(3),COLUMN(10),A,F(3),A),.                                FACT1040\n    CALL LOAD (M,K,R,V),.                                               FACT1050\n    IF ERROR NE '0'                                                     FACT1060\n    THEN DO,.                                                           FACT1070\n         PUT EDIT ('IN ROUTINE LOAD ERROR CODE = ',ERROR)               FACT1080\n              (SKIP(2),COLUMN(10),A,A(1)),.                             FACT1090\n         GO TO S100,.                                                   FACT1100\n         END,.                                                          FACT1110\n         DO I = 1 TO M,.                                                FACT1120\n         PUT EDIT ('VARIABLE',I) (SKIP(2),COLUMN(10),A,F(3)),.          FACT1130\n         PUT EDIT ((V(I,J) DO J= 1 TO K)) (SKIP,COLUMN(10),9 F(12,5)),. FACT1140\n         END,.                                                          FACT1150\n    CALL VRMX (M,K,V,NC,TV,B,T,D),.                                     FACT1160\n    IF ERROR NE '0'                                                     FACT1170\n    THEN DO,.                                                           FACT1180\n         PUT EDIT ('IN ROUTINE VRMX ERROR CODE = ',ERROR)               FACT1190\n              (SKIP(2),COLUMN(10),A,A(1)),.                             FACT1200\n         GO TO S100,.                                                   FACT1210\n         END,.                                                          FACT1220\n    NW   =NC+1,.                       /* PRINT VARIANCES             */FACT1230\n    PUT EDIT ('ITERATION','VARIANCES','  CYCLE') (SKIP(3),COLUMN(10),A, FACT1240\n         X(7),A,SKIP,COLUMN(10),A),.                                    FACT1250\n         DO I = 1 TO NW,.                                               FACT1260\n         NC   =I-1,.                                                    FACT1270\n         PUT EDIT (NC,TV(I)) (SKIP,COLUMN(10),F(5),F(20,6)),.           FACT1280\n         END,.                                                          FACT1290\n /*                                                                   */FACT1300\n /*      PRINT ROTATED FACTOR MATRIX                                  */FACT1310\n /*                                                                   */FACT1320\n    PUT EDIT ('ROTATED FACTOR MATRIX (',K,' FACTORS)')                  FACT1330\n         (SKIP(3),COLUMN(10),A,F(3),A),.                                FACT1340\n         DO I = 1 TO M,.                                                FACT1350\n         PUT EDIT ('VARIABLE',I) (SKIP(2),COLUMN(10),A,F(3)),.          FACT1360\n         PUT EDIT ((V(I,J) DO J= 1 TO K)) (SKIP,COLUMN(10),9 F(12,5)),. FACT1370\n         END,.                                                          FACT1380\n /*                                                                   */FACT1390\n /*      PRINT COMMUNALITIES                                          */FACT1400\n /*                                                                   */FACT1410\n    PUT EDIT ('CHECK ON COMMUNALITIES','VARIABLE','ORIGINAL','FINAL',   FACT1420\n         'DIFFERENCE') (SKIP(3),COLUMN(10),A,SKIP(2),COLUMN(10),A,      FACT1430\n         X(7),A,X(12),A,X(10),A),.                                      FACT1440\n         DO I = 1 TO M,.                                                FACT1450\n         PUT EDIT (I,B(I),T(I),D(I)) (SKIP,COLUMN(10),F(5),3 F(18,5)),. FACT1460\n         END,.                                                          FACT1470\n S200..                                                                 FACT1480\n    END,.                                                               FACT1490\n    GO TO S100,.                                                        FACT1500\n EXIT..                                                                 FACT1510\n    PUT FILE (SYSPRINT) EDIT ('END OF SAMPLE PROGRAM')                  FACT1520\n         (SKIP(5),COLUMN(10),A),.                                       FACT1530\n    END,.                              /*END OF PROCEDURE FACT        */FACT1540\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n CORR..                                                                 CORR  10\n /*********************************************************************/CORR  20\n /*                                                                   */CORR  30\n /*      TO COMPUTE MEANS, STANDARD DEVIATIONS, SUMS OF CROSS-PRODUCTS*/CORR  40\n /*      OF DEVIATIONS, AND CORRELATION COEFFICIENTS.                 */CORR  50\n /*                                                                   */CORR  60\n /*********************************************************************/CORR  70\n    PROCEDURE (N,M,IO,X,XBAR,STD,RX,R,B),.                              CORR  80\n    DECLARE                                                             CORR  90\n         ERROR EXTERNAL CHARACTER (1),                                  CORR 100\n         (I,IO,J,K,KK,M,N)                                              CORR 110\n         FIXED BINARY,                                                  CORR 120\n         (X(*,*),D(M),FN,FKK)                                           CORR 130\n         FLOAT BINARY,                                                  CORR 140\n         (R(*,*),RX(*,*),XBAR(*),STD(*),B(*),T(M))                      CORR 150\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/CORR 160\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/CORR 170\n /*                                                                   */CORR 180\n    ERROR='0',.                                                         CORR 190\n    IF N LE 0 OR M LE 0                /* THE NUMBER OF OBSERVATIONS  */CORR 200\n    THEN DO,.                          /* OR THE NUMBER OF VARIABLES  */CORR 210\n         ERROR='1',.                   /* ARE LESS THAN OR EQUAL TO   */CORR 220\n         GO TO FIN,.                   /* ZERO.                       */CORR 230\n         END,.                                                          CORR 240\n    FN   =N,.                          /* INITIALIZATION              */CORR 250\n    T    =0.0,.                                                         CORR 260\n         DO I = 1 TO M,.                                                CORR 270\n         B(I) =0.0,.                                                    CORR 280\n              DO J = 1 TO M,.                                           CORR 290\n              R(I,J)=0.0,.                                              CORR 300\n              END,.                                                     CORR 310\n         END,.                                                          CORR 320\n    IF IO NE 0                                                          CORR 330\n    THEN DO,.                                                           CORR 340\n              DO J = 1 TO M,.          /* DATA IS ALREADY IN CORE     */CORR 350\n                   DO I = 1 TO N,.                                      CORR 360\n                   T(J) =T(J)+X(I,J),.                                  CORR 370\n                   END,.                                                CORR 380\n              XBAR(J)=T(J),.                                            CORR 390\n              T(J) =T(J)/FN,.                                           CORR 400\n              END,.                                                     CORR 410\n              DO I = 1 TO N,.                                           CORR 420\n                   DO J = 1 TO M,.                                      CORR 430\n                   D(J) =X(I,J)-T(J),.                                  CORR 440\n                   B(J) =B(J)+D(J),.                                    CORR 450\n                   END,.                                                CORR 460\n                   DO J = 1 TO M,.                                      CORR 470\n                        DO K = J TO M,.                                 CORR 480\n                        R(J,K)=R(J,K)+D(J)*D(K),.                       CORR 490\n                        END,.                                           CORR 500\n                   END,.                                                CORR 510\n              END,.                                                     CORR 520\n         GO TO CALC,.                                                   CORR 530\n         END,.                                                          CORR 540\n /*                                                                   */CORR 550\n /*      READ OBSERVATIONS AND CALCULATE TEMPORARY MEANS              */CORR 560\n /*                                                                   */CORR 570\n    IF N LT M                                                           CORR 580\n    THEN KK   =N,.                                                      CORR 590\n    ELSE KK   =M,.                                                      CORR 600\n    FKK  =KK,.                                                          CORR 610\n         DO I = 1 TO KK,.                                               CORR 620\n         CALL DAT2 (M,D),.                                              CORR 630\n              DO J = 1 TO M,.                                           CORR 640\n              T(J) =T(J)+D(J),.                                         CORR 650\n              RX(I,J)=D(J),.                                            CORR 660\n              END,.                                                     CORR 670\n         END,.                                                          CORR 680\n         DO J = 1 TO M,.                                                CORR 690\n         XBAR(J)=T(J),.                                                 CORR 700\n         T(J) =T(J)/FKK,.                                               CORR 710\n         END,.                                                          CORR 720\n /*                                                                   */CORR 730\n /*      CALCULATE SUMS OF CROSS-PRODUCTS OF DEVIATIONS FROM          */CORR 740\n /*      TEMPORARY MEANS FOR M OBSERVATIONS.                          */CORR 750\n /*                                                                   */CORR 760\n         DO I = 1 TO KK,.                                               CORR 770\n              DO J = 1 TO M,.                                           CORR 780\n              D(J) =RX(I,J)-T(J),.                                      CORR 790\n              END,.                                                     CORR 800\n              DO J = 1 TO M,.                                           CORR 810\n              B(J) =B(J)+D(J),.                                         CORR 820\n                   DO K = J TO M,.                                      CORR 830\n                   R(J,K)=R(J,K)+D(J)*D(K),.                            CORR 840\n                   END,.                                                CORR 850\n              END,.                                                     CORR 860\n         END,.                                                          CORR 870\n    IF N GT KK                                                          CORR 880\n /*                                                                   */CORR 890\n /*      READ THE REST OF THE OBSERVATIONS ONE AT A TIME, SUM THE     */CORR 900\n /*      OBSERVATIONS, AND CALCULATE SUMS OF CROSS PRODUCTS OF        */CORR 910\n /*      DEVIATIONS FROM TEMPORARY MEANS.                             */CORR 920\n /*                                                                   */CORR 930\n    THEN DO,.                                                           CORR 940\n              DO I = 1 TO N-KK,.                                        CORR 950\n              CALL DAT2 (M,D),.                                         CORR 960\n                   DO J = 1 TO M,.                                      CORR 970\n                   XBAR(J)=XBAR(J)+D(J),.                               CORR 980\n                   D(J) =D(J)-T(J),.                                    CORR 990\n                   B(J) =B(J)+D(J),.                                    CORR1000\n                   END,.                                                CORR1010\n                   DO J = 1 TO M,.                                      CORR1020\n                        DO K = J TO M,.                                 CORR1030\n                        R(J,K)=R(J,K)+D(J)*D(K),.                       CORR1040\n                        END,.                                           CORR1050\n                   END,.                                                CORR1060\n              END,.                                                     CORR1070\n         END,.                                                          CORR1080\n /*                                                                   */CORR1090\n /*      ADJUST SUMS OF CROSS-PRODUCTS OF DEVIATIONS FROM TEMP. MEANS */CORR1100\n /*                                                                   */CORR1110\n CALC..                                                                 CORR1120\n         DO I = 1 TO M,.                                                CORR1130\n         XBAR(I)=XBAR(I)/FN,.          /* CALCULATE MEANS.            */CORR1140\n              DO J = I TO M,.                                           CORR1150\n              RX(I,J)=R(I,J)-B(I)*B(J)/FN,.                             CORR1160\n              RX(J,I)=RX(I,J),.                                         CORR1170\n              END,.                                                     CORR1180\n         STD(I)=SQRT(ABS(RX(I,I))),.                                    CORR1190\n /*                                                                   */CORR1200\n /*    COPY THE DIAGONAL OF THE MATRIX OF SUMS OF CROSS PRODUCTS OF   */CORR1210\n /*    DEVIATIONS FROM THE MEANS.                                     */CORR1220\n /*                                                                   */CORR1230\n         B(I) =RX(I,I),.                                                CORR1240\n         END,.                                                          CORR1250\n /*                                                                   */CORR1260\n /*      COMPUTE CORRELATION COEFFICIENTS                             */CORR1270\n /*                                                                   */CORR1280\n         DO J = 1 TO M,.                                                CORR1290\n              DO K = J TO M,.                                           CORR1300\n              FKK  =STD(J)*STD(K),.                                     CORR1310\n              IF FKK= 0.0                                               CORR1320\n              THEN DO,.                                                 CORR1330\n                   ERROR='2',.         /* SOME VARIANCES ARE ZERO     */CORR1340\n                   R(J,K)=0.0,.                                         CORR1350\n                   END,.                                                CORR1360\n              ELSE R(J,K)=RX(J,K)/FKK,.                                 CORR1370\n              R(K,J)=R(J,K),.                                           CORR1380\n              END,.                                                     CORR1390\n         END,.                                                          CORR1400\n /*                                                                   */CORR1410\n /*      COMPUTE STANDARD DEVIATIONS                                  */CORR1420\n /*                                                                   */CORR1430\n         IF N=1                                                         CORR1440\n         THEN DO,.                                                      CORR1450\n              DO I=1 TO N,.                                             CORR1460\n              STD(I)    =0,.                                            CORR1470\n              END,.                                                     CORR1480\n              GO TO FIN,.                                               CORR1490\n              END,.                                                     CORR1500\n         FN   =SQRT(N-1),.                                              CORR1510\n         DO I = 1 TO M,.                                                CORR1520\n         STD(I)=STD(I)/FN,.                                             CORR1530\n         END,.                                                          CORR1540\n FIN..                                                                  CORR1550\n    RETURN,.                                                            CORR1560\n    END,.                              /*END OF PROCEDURE CORR        */CORR1570\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n MSDU..                                                                 MSDU  10\n /*********************************************************************/MSDU  20\n /*                                                                   */MSDU  30\n /*      TO COMPUTE EIGENVALUES AND EIGENVECTORS OF A REAL SYMMETRIC  */MSDU  40\n /*      MATRIX                                                       */MSDU  50\n /*                                                                   */MSDU  60\n /*********************************************************************/MSDU  70\n    PROCEDURE (A,R,N,MV),.                                              MSDU  80\n    DECLARE                                                             MSDU  90\n         (I,IND,J,L,M,MV,N)                                             MSDU 100\n         FIXED BINARY,                                                  MSDU 110\n         ERROR EXTERNAL CHARACTER(1),                                   MSDU 120\n         (A(*,*),R(*,*),ANORM,ANRMX,THR,U,Y,SINX,SINX2,COSX,COSX2,SINCS,MSDU 130\n         FN)                                                            MSDU 140\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/MSDU 150\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/MSDU 160\n /*                                                                   */MSDU 170\n    ERROR='0',.                                                         MSDU 180\n    IF N LE 1                          /* THE ORDER OF MATRIX A IS    */MSDU 190\n    THEN DO,.                          /* LESS THAN OR EQUAL TO ONE.  */MSDU 200\n         ERROR='1',.                                                    MSDU 210\n         GO TO FIN,.                                                    MSDU 220\n         END,.                                                          MSDU 230\n    FN   =N,.                                                           MSDU 240\n    IF MV= 0                                                            MSDU 250\n    THEN DO,.                                                           MSDU 260\n              DO I = 1 TO N,.          /* GENERATE IDENTITY MATRIX    */MSDU 270\n                   DO J = 1 TO N,.                                      MSDU 280\n                  R(I,J)=0,.                                            MSDU 290\n                   END,.                                                MSDU 300\n              R(I,I)=1,.                                                MSDU 310\n              END,.                                                     MSDU 320\n         END,.                                                          MSDU 330\n /*                                                                   */MSDU 340\n /*      COMPUTE INITIAL AND FINAL NORM                               */MSDU 350\n /*                                                                   */MSDU 360\n    ANORM=0,.                                                           MSDU 370\n         DO I = 1 TO N-1,.                                              MSDU 380\n              DO J = I+1 TO N,.                                         MSDU 390\n              ANORM=ANORM+A(I,J)*A(I,J),.                               MSDU 400\n              END,.                                                     MSDU 410\n         END,.                                                          MSDU 420\n    IF ANORM LE 0.0                                                     MSDU 430\n    THEN GO TO SORT,.                                                   MSDU 440\n    ANORM=1.414*SQRT(ANORM),.                                           MSDU 450\n    ANRMX=ANORM*1.0E-6/FN,.                                             MSDU 460\n /*                                                                   */MSDU 470\n /*      INITIALIZE INDICATOR AND COMPUTE THRESHOLD, THR              */MSDU 480\n /*                                                                   */MSDU 490\n    IND  =0,.                                                           MSDU 500\n    THR  =ANORM,.                                                       MSDU 510\n S10..                                                                  MSDU 520\n    THR  =THR/FN,.                                                      MSDU 530\n S20..                                                                  MSDU 540\n    L    =1,.                                                           MSDU 550\n S30..                                                                  MSDU 560\n    M    =L+1,.                                                         MSDU 570\n S40..                                                                  MSDU 580\n    IF ABS(A(L,M)) GE THR              /* COMPUTE SIN AND COS         */MSDU 590\n    THEN DO,.                                                           MSDU 600\n         IND  =1,.                                                      MSDU 610\n         U    =0.5*(A(L,L)-A(M,M)),.                                    MSDU 620\n         Y    =-A(L,M)/SQRT(A(L,M)*A(L,M)+U*U),.                        MSDU 630\n         IF U LT 0.0                                                    MSDU 640\n         THEN Y    =-Y,.                                                MSDU 650\n         SINX =Y/SQRT(2.0*(1.0+(SQRT(1.0-Y*Y)))),.                      MSDU 660\n         SINX2=SINX*SINX,.                                              MSDU 670\n         COSX =SQRT(1.0-SINX2),.                                        MSDU 680\n         COSX2=COSX*COSX,.                                              MSDU 690\n         SINCS=SINX*COSX,.                                              MSDU 700\n              DO I = 1 TO N,.          /* ROTATE L AND M COLUMNS      */MSDU 710\n              IF I LT L                                                 MSDU 720\n              THEN DO,.                                                 MSDU 730\n                   IF I LT M                                            MSDU 740\n                   THEN DO,.                                            MSDU 750\n                        U    =A(I,L)*COSX-A(I,M)*SINX,.                 MSDU 760\n                        A(I,M)=A(I,L)*SINX+A(I,M)*COSX,.                MSDU 770\n                        A(I,L)=U,.                                      MSDU 780\n                        END,.                                           MSDU 790\n                   END,.                                                MSDU 800\n              ELSE IF I GT L                                            MSDU 810\n              THEN DO,.                                                 MSDU 820\n                   IF I LT M                                            MSDU 830\n                   THEN DO,.                                            MSDU 840\n                        U    =A(L,I)*COSX-A(I,M)*SINX,.                 MSDU 850\n                        A(I,M)=A(L,I)*SINX+A(I,M)*COSX,.                MSDU 860\n                        END,.                                           MSDU 870\n                   ELSE IF I GT M                                       MSDU 880\n                   THEN DO,.                                            MSDU 890\n                        U    =A(L,I)*COSX-A(M,I)*SINX,.                 MSDU 900\n                        A(M,I)=A(L,I)*SINX+A(M,I)*COSX,.                MSDU 910\n                        END,.                                           MSDU 920\n                   IF I NE M                                            MSDU 930\n                   THEN A(L,I)=U,.                                      MSDU 940\n                   END,.                                                MSDU 950\n              IF MV= 0                                                  MSDU 960\n              THEN DO,.                                                 MSDU 970\n                   U    =R(I,L)*COSX-R(I,M)*SINX,.                      MSDU 980\n                   R(I,M)=R(I,L)*SINX+R(I,M)*COSX,.                     MSDU 990\n                   R(I,L)=U,.                                           MSDU1000\n                   END,.                                                MSDU1010\n              END,.                                                     MSDU1020\n         U    =2.0*A(L,M)*SINCS,.                                       MSDU1030\n         Y    =A(L,L)*COSX2+A(M,M)*SINX2-U,.                            MSDU1040\n         U    =A(L,L)*SINX2+A(M,M)*COSX2+U,.                            MSDU1050\n         A(L,M)=(A(L,L)-A(M,M))*SINCS+A(L,M)*(COSX2-SINX2),.            MSDU1060\n         A(L,L)=Y,.                                                     MSDU1070\n         A(M,M)=U,.                                                     MSDU1080\n         END,.                                                          MSDU1090\n    IF M NE N                          /* TEST FOR M = LAST COLUMN    */MSDU1100\n    THEN DO,.                                                           MSDU1110\n         M    =M+1,.                                                    MSDU1120\n         GO TO S40,.                                                    MSDU1130\n         END,.                                                          MSDU1140\n /*                                                                   */MSDU1150\n /*      TEST FOR L = SECOND FROM LAST COLUMN                         */MSDU1160\n /*                                                                   */MSDU1170\n    IF L NE N-1                                                         MSDU1180\n    THEN DO,.                                                           MSDU1190\n         L    =L+1,.                                                    MSDU1200\n         GO TO S30,.                                                    MSDU1210\n         END,.                                                          MSDU1220\n    IF IND= 1                                                           MSDU1230\n    THEN DO,.                                                           MSDU1240\n         IND  =0,.                                                      MSDU1250\n         GO TO S20,.                                                    MSDU1260\n         END,.                                                          MSDU1270\n /*                                                                   */MSDU1280\n /*      COMPARE THRESHOLD WITH FINAL NORM                            */MSDU1290\n /*                                                                   */MSDU1300\n    IF THR GT ANRMX                                                     MSDU1310\n    THEN GO TO S10,.                                                    MSDU1320\n /*                                                                   */MSDU1330\n /*      SORT EIGENVALUES AND EIGENVECTORS                            */MSDU1340\n /*                                                                   */MSDU1350\n SORT..                                                                 MSDU1360\n         DO I = 1 TO N,.                                                MSDU1370\n              DO J = I TO N,.                                           MSDU1380\n              IF A(I,I) LT A(J,J)                                       MSDU1390\n              THEN DO,.                                                 MSDU1400\n                   U    =A(I,I),.                                       MSDU1410\n                   A(I,I)=A(J,J),.                                      MSDU1420\n                   A(J,J)=U,.                                           MSDU1430\n                   IF MV= 0                                             MSDU1440\n                   THEN DO,.                                            MSDU1450\n                             DO L = 1 TO N,.                            MSDU1460\n                             U    =R(L,I),.                             MSDU1470\n                             R(L,I)=R(L,J),.                            MSDU1480\n                             R(L,J)=U,.                                 MSDU1490\n                             END,.                                      MSDU1500\n                        END,.                                           MSDU1510\n                   END,.                                                MSDU1520\n              END,.                                                     MSDU1530\n         END,.                                                          MSDU1540\n FIN..                                                                  MSDU1550\n    RETURN,.                                                            MSDU1560\n    END,.                              /*END OF PROCEDURE MSDU        */MSDU1570\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n TRAC..                                                                 TRAC  10\n /*********************************************************************/TRAC  20\n /*                                                                   */TRAC  30\n /*      TO COMPUTE CUMULATIVE PERCENTAGE OF EIGENVALUES GREATER      */TRAC  40\n /*      THAN OR EQUAL TO A CONSTANT SPECIFIED BY THE USER.           */TRAC  50\n /*                                                                   */TRAC  60\n /*********************************************************************/TRAC  70\n    PROCEDURE (M,R,CON,K,D),.                                           TRAC  80\n    DECLARE                                                             TRAC  90\n         ERROR EXTERNAL CHARACTER (1),                                  TRAC 100\n         (I,J,K,M)                                                      TRAC 110\n         FIXED BINARY,                                                  TRAC 120\n         (R(*,*),D(*),CON)                                              TRAC 130\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/TRAC 140\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/TRAC 150\n /*                                                                   */TRAC 160\n    ERROR='0',.                                                         TRAC 170\n    IF M LE 0                          /* ORDER OF MATRIX IS ZERO.    */TRAC 180\n    THEN DO,.                                                           TRAC 190\n         ERROR='1',.                                                    TRAC 200\n         GO TO S20,.                                                    TRAC 210\n         END,.                                                          TRAC 220\n         DO I = 1 TO M,.                                                TRAC 230\n         D(I) =R(I,I),.                                                 TRAC 240\n         END,.                                                          TRAC 250\n    K    =0,.                                                           TRAC 260\n /*                                                                   */TRAC 270\n /*      TEST WHETHER I-TH EIGENVALUE IS GREATER THAN OR EQUAL TO     */TRAC 280\n /*      THE CONSTANT.                                                */TRAC 290\n /*                                                                   */TRAC 300\n         DO I = 1 TO M,.                                                TRAC 310\n         IF D(I) LT CON                                                 TRAC 320\n         THEN GO TO S10,.                                               TRAC 330\n         K    =K+1,.                                                    TRAC 340\n         D(I) =D(I)/M,.                                                 TRAC 350\n         END,.                                                          TRAC 360\n S10..                                                                  TRAC 370\n    IF K LE 1                                                           TRAC 380\n    THEN DO,.                                                           TRAC 390\n         ERROR='2',.                   /* NOT ENOUGH EIGENVALUES      */TRAC 400\n         GO TO S20,.                   /* ARE RETAINED                */TRAC 410\n         END,.                                                          TRAC 420\n         DO I = 2 TO K,.                                                TRAC 430\n         D(I) =D(I)+D(I-1),.                                            TRAC 440\n         END,.                                                          TRAC 450\n S20..                                                                  TRAC 460\n    RETURN,.                                                            TRAC 470\n    END,.                              /*END OF PROCEDURE TRAC        */TRAC 480\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n LOAD..                                                                 LOAD  10\n /*********************************************************************/LOAD  20\n /*                                                                   */LOAD  30\n /*      TO COMPUTE A FACTOR MATRIX (LOADING) FROM EIGENVALUES AND    */LOAD  40\n /*      ASSOCIATED EIGENVECTORS.                                     */LOAD  50\n /*                                                                   */LOAD  60\n /*********************************************************************/LOAD  70\n    PROCEDURE (M,K,R,V),.                                               LOAD  80\n    DECLARE                                                             LOAD  90\n         (I,J,K)                                                        LOAD 100\n         FIXED BINARY,                                                  LOAD 110\n         ERROR EXTERNAL CHARACTER(1),                                   LOAD 120\n         (R(*,*),V(*,*),SQ)                                             LOAD 130\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/LOAD 140\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/LOAD 150\n /*                                                                   */LOAD 160\n    ERROR='0',.                                                         LOAD 170\n    IF K LE 1 OR K GT M                /* INVALID VALUE OF K          */LOAD 180\n    THEN DO,.                                                           LOAD 190\n         ERROR='2',.                                                    LOAD 200\n         GO TO FIN,.                                                    LOAD 210\n         END,.                                                          LOAD 220\n    IF M LE 0                          /* ORDER OF MATRIX IS ZERO     */LOAD 230\n    THEN ERROR='1',.                                                    LOAD 240\n    ELSE DO,.                                                           LOAD 250\n              DO J = 1 TO K,.                                           LOAD 260\n              SQ   =SQRT(R(J,J)),.                                      LOAD 270\n                   DO I = 1 TO M,.                                      LOAD 280\n                   V(I,J)=SQ*V(I,J),.                                   LOAD 290\n                   END,.                                                LOAD 300\n              END,.                                                     LOAD 310\n         END,.                                                          LOAD 320\n FIN..                                                                  LOAD 330\n    RETURN,.                                                            LOAD 340\n    END,.                              /*END OF PROCEDURE LOAD        */LOAD 350\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n VRMX..                                                                 VRMX  10\n /*********************************************************************/VRMX  20\n /*                                                                   */VRMX  30\n /*      TO PERFORM ORTHOGONAL ROTATION OF A FACTOR MATRIX.           */VRMX  40\n /*                                                                   */VRMX  50\n /*********************************************************************/VRMX  60\n    PROCEDURE (M,K,A,NC,TV,H,F,D),.                                     VRMX  70\n    DECLARE                                                             VRMX  80\n         (I,II,J,K,K1,LL,M,NC,NV)                                       VRMX  90\n         FIXED BINARY,                                                  VRMX 100\n         ERROR EXTERNAL CHARACTER(1),                                   VRMX 110\n         (A(*,*),TV(*),H(*),F(*),D(*),EPS,TVLT,FN,AA,BB,CC,DD,G,B,U,T,  VRMX 120\n         COS4T,SIN4T,TAN4T,SINP,COSP,CTN4T,COS2T,SIN2T,COST,SINT,CONS)  VRMX 130\n         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/VRMX 140\n  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/VRMX 150\n /*                                                                   */VRMX 160\n    EPS  =.00116,.                     /* INITIALIZATION              */VRMX 170\n    TVLT =0,.                                                           VRMX 180\n    LL   =K-1,.                                                         VRMX 190\n    NV   =1,.                                                           VRMX 200\n    NC   =0,.                                                           VRMX 210\n    FN   =M*M,.                                                         VRMX 220\n    CONS =.7071066,.                                                    VRMX 230\n    ERROR='0',.                                                         VRMX 240\n    IF M LE 1                          /* NUMBER OF VARIABLES LESS    */VRMX 250\n    THEN DO,.                          /* THAN OR EQUAL TO ONE.       */VRMX 260\n         ERROR='1',.                                                    VRMX 270\n         GO TO FIN,.                                                    VRMX 280\n         END,.                                                          VRMX 290\n    IF K LE 1 OR K GT M                /* INVALID VALUE OF K          */VRMX 300\n    THEN DO,.                                                           VRMX 310\n         ERROR='2',.                                                    VRMX 320\n         GO TO FIN,.                                                    VRMX 330\n         END,.                                                          VRMX 340\n /*                                                                   */VRMX 350\n /*      CALCULATE ORIGINAL COMMUNALITIES                             */VRMX 360\n /*                                                                   */VRMX 370\n         DO I = 1 TO M,.                                                VRMX 380\n         H(I) =0,.                                                      VRMX 390\n              DO J = 1 TO K,.                                           VRMX 400\n              H(I) =H(I)+A(I,J)*A(I,J),.                                VRMX 410\n              END,.                                                     VRMX 420\n         END,.                                                          VRMX 430\n /*                                                                   */VRMX 440\n /*      CALCULATE NORMALIZED FACTOR MATRIX                           */VRMX 450\n /*                                                                   */VRMX 460\n         DO I = 1 TO M,.                                                VRMX 470\n         H(I) =SQRT(H(I)),.                                             VRMX 480\n              DO J = 1 TO K,.                                           VRMX 490\n              A(I,J)=A(I,J)/H(I),.                                      VRMX 500\n              END,.                                                     VRMX 510\n         END,.                                                          VRMX 520\n    GO TO S20,.                                                         VRMX 530\n /*                                                                   */VRMX 540\n /*      CALCULATE VARIANCE FOR FACTOR MATRIX                         */VRMX 550\n /*                                                                   */VRMX 560\n S10..                                                                  VRMX 570\n    NV   =NV+1,.                                                        VRMX 580\n    TVLT =TV(NV-1),.                                                    VRMX 590\n S20..                                                                  VRMX 600\n    TV(NV)=0,.                                                          VRMX 610\n         DO J = 1 TO K,.                                                VRMX 620\n         AA   =0,.                                                      VRMX 630\n         BB   =0,.                                                      VRMX 640\n              DO I = 1 TO M,.                                           VRMX 650\n              CC   =A(I,J)*A(I,J),.                                     VRMX 660\n              AA   =AA+CC,.                                             VRMX 670\n              BB   =BB+CC*CC,.                                          VRMX 680\n              END,.                                                     VRMX 690\n         TV(NV)=TV(NV)+(M*BB-AA*AA)/FN,.                                VRMX 700\n         END,.                                                          VRMX 710\n    IF NV GE 51                                                         VRMX 720\n    THEN DO,.                          /* NUMBER OF ITERATIONS = 50   */VRMX 730\n         ERROR='3',.                                                    VRMX 740\n         GO TO S80,.                                                    VRMX 750\n         END,.                                                          VRMX 760\n    IF TV(NV)-TVLT LE 1.0E-7           /* PERFORM CONVERGENCE TEST    */VRMX 770\n    THEN DO,.                                                           VRMX 780\n         NC   =NC+1,.                                                   VRMX 790\n         IF NC GT 3                                                     VRMX 800\n         THEN GO TO S80,.                                               VRMX 810\n         END,.                                                          VRMX 820\n /*                                                                   */VRMX 830\n /*      ROTATION OF TWO FACTORS BEGINS                               */VRMX 840\n /*                                                                   */VRMX 850\n         DO J = 1 TO LL,.                                               VRMX 860\n         II   =J+1,.                                                    VRMX 870\n              DO K1 = II TO K,.                                         VRMX 880\n              AA   =0,.                /* CALCULATE NUM AND DEN       */VRMX 890\n              BB   =0,.                                                 VRMX 900\n              CC   =0,.                                                 VRMX 910\n              DD   =0,.                                                 VRMX 920\n                   DO I = 1 TO M,.                                      VRMX 930\n                   U    =(A(I,J)+A(I,K1))*(A(I,J)-A(I,K1)),.            VRMX 940\n                   T    =A(I,J)*A(I,K1)*2,.                             VRMX 950\n                   CC   =CC+(U+T)*(U-T),.                               VRMX 960\n                   DD   =DD+2*U*T,.                                     VRMX 970\n                   AA   =AA+U,.                                         VRMX 980\n                   BB   =BB+T,.                                         VRMX 990\n                   END,.                                                VRMX1000\n              T    =DD-2*AA*BB/M,.                                      VRMX1010\n              B    =CC-(AA*AA-BB*BB)/M,.                                VRMX1020\n              IF T = B                                                  VRMX1030\n              THEN DO,.                                                 VRMX1040\n                   IF T+B LT EPS                                        VRMX1050\n                   THEN GO TO S70,.                                     VRMX1060\n /*                                                                   */VRMX1070\n /*      NUM + DEN IS GREATER THAN OR EQUAL TO THE TOLERANCE FACTOR   */VRMX1080\n /*                                                                   */VRMX1090\n              COS4T=CONS,.                                              VRMX1100\n                   SIN4T=CONS,.                                         VRMX1110\n                   GO TO S40,.                                          VRMX1120\n                   END,.                                                VRMX1130\n              IF T GT B                                                 VRMX1140\n              THEN GO TO S30,.                                          VRMX1150\n              TAN4T=ABS(T)/ABS(B),.    /* NUM IS LESS THAN DEN        */VRMX1160\n              IF TAN4T GE EPS                                           VRMX1170\n              THEN DO,.                                                 VRMX1180\n                   COS4T=1/SQRT(1+TAN4T*TAN4T),.                        VRMX1190\n                   SIN4T=TAN4T*COS4T,.                                  VRMX1200\n                   GO TO S40,.                                          VRMX1210\n                   END,.                                                VRMX1220\n              IF B GE 0                                                 VRMX1230\n              THEN GO TO S70,.                                          VRMX1240\n              SINP =CONS,.                                              VRMX1250\n              COSP =CONS,.                                              VRMX1260\n              GO TO S60,.                                               VRMX1270\n S30..                                                                  VRMX1280\n              CTN4T=ABS(T/B),.         /* NUM IS GREATER THAN DEN     */VRMX1290\n              IF CTN4T GE EPS                                           VRMX1300\n              THEN DO,.                                                 VRMX1310\n                   SIN4T=1/SQRT(1+CTN4T*CTN4T),.                        VRMX1320\n                   COS4T=CTN4T*SIN4T,.                                  VRMX1330\n                   GO TO S40,.                                          VRMX1340\n                   END,.                                                VRMX1350\n              COS4T=0,.                                                 VRMX1360\n              SIN4T=1,.                                                 VRMX1370\n /*                                                                   */VRMX1380\n /*      DETERMINE COS THEAT AND SIN THETA                            */VRMX1390\n /*                                                                   */VRMX1400\n S40..                                                                  VRMX1410\n              COS2T=SQRT((1+COS4T)/2),.                                 VRMX1420\n              SIN2T=SIN4T/(2*COS2T),.                                   VRMX1430\n              COST =SQRT((1+COS2T)/2),.                                 VRMX1440\n              SINT =SIN2T/(2*COST),.                                    VRMX1450\n /*                                                                   */VRMX1460\n /*      DETERMINE COS PHI AND SIN PHI                                */VRMX1470\n /*                                                                   */VRMX1480\n              IF B GT 0                                                 VRMX1490\n              THEN DO,.                                                 VRMX1500\n                   COSP =COST,.                                         VRMX1510\n                   SINP =SINT,.                                         VRMX1520\n                   GO TO S50,.                                          VRMX1530\n                   END,.                                                VRMX1540\n              COSP =CONS*(COST+SINT),.                                  VRMX1550\n              SINP =ABS(CONS*(COST-SINT)),.                             VRMX1560\n S50..                                                                  VRMX1570\n              IF T LE 0                                                 VRMX1580\n              THEN SINP =-SINP,.                                        VRMX1590\n S60..                                                                  VRMX1600\n                   DO I = 1 TO M,.     /* PERFORM ROTATION            */VRMX1610\n                   AA   =A(I,J)*COSP+A(I,K1)*SINP,.                     VRMX1620\n                   A(I,K1)=-A(I,J)*SINP+A(I,K1)*COSP,.                  VRMX1630\n                   A(I,J)=AA,.                                          VRMX1640\n                   END,.                                                VRMX1650\n S70..                                                                  VRMX1660\n              END,.                                                     VRMX1670\n         END,.                                                          VRMX1680\n    GO TO S10,.                                                         VRMX1690\n /*                                                                   */VRMX1700\n /*      DENORMALIZE VARIMAX LOADINGS                                 */VRMX1710\n /*                                                                   */VRMX1720\n S80..                                                                  VRMX1730\n         DO I = 1 TO M,.                                                VRMX1740\n              DO J = 1 TO K,.                                           VRMX1750\n              A(I,J)=A(I,J)*H(I),.                                      VRMX1760\n              END,.                                                     VRMX1770\n         END,.                                                          VRMX1780\n    NC   =NV-1,.                       /* CHECK ON COMMUNALITIES      */VRMX1790\n    H    =H*H,.                                                         VRMX1800\n         DO I = 1 TO M,.                                                VRMX1810\n         F(I) =0,.                                                      VRMX1820\n              DO J = 1 TO K,.                                           VRMX1830\n              F(I) =F(I)+A(I,J)*A(I,J),.                                VRMX1840\n              END,.                                                     VRMX1850\n         D(I) =H(I)-F(I),.                                              VRMX1860\n         END,.                                                          VRMX1870\n FIN..                                                                  VRMX1880\n    RETURN,.                                                            VRMX1890\n    END,.                              /*END OF PROCEDURE VRMX        */VRMX1900\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n DAT2..                                                                 DAT2  10\n /*********************************************************************/DAT2  20\n /*                                                                   */DAT2  30\n /*      TO READ FLOATING POINT DATA, ONE OBSERVATION AT A TIME.      */DAT2  40\n /*      DATA MAY BE SAVED ON A DATA SET.                             */DAT2  50\n /*                                                                   */DAT2  60\n /*********************************************************************/DAT2  70\n    PROCEDURE (M,D),.                                                   DAT2  80\n    DECLARE                                                             DAT2  90\n         XDATA FILE STREAM ENVIRONMENT (CONSECUTIVE V(2000,200)),       DAT2 100\n         (NCARD,NV) EXTERNAL,                                           DAT2 110\n         CH CHARACTER(NCARD),                                           DAT2 120\n         (I,M,MM) FIXED BINARY,                                         DAT2 130\n         D(*) FLOAT BINARY,.                                            DAT2 140\n /*                                                                   */DAT2 150\n    ON ENDFILE (SYSIN)                                                  DAT2 160\n    GO TO EXIT,.                                                        DAT2 170\n    GET EDIT (CH) (A(NCARD)),.                                          DAT2 180\n    MM   =CEIL(M/12),.                                                  DAT2 190\n    GET STRING (CH) EDIT ((D(I) DO I= 1 TO M))                          DAT2 200\n         ((MM)((12)F(6,0),X(8))),.                                      DAT2 210\n    IF NV= 1                                                            DAT2 220\n    THEN PUT FILE (XDATA) EDIT ((D(I) DO I= 1 TO M)) ((M)F(6,0)),.      DAT2 230\n    REVERT ENDFILE (SYSIN),.                                            DAT2 240\n    RETURN,.                                                            DAT2 250\n EXIT..                                                                 DAT2 260\n    PUT FILE (SYSPRINT) EDIT ('ERROR  INSUFFICIENT DATA')               DAT2 270\n         (SKIP(1),COLUMN(10),A),.                                       DAT2 280\n    STOP,.                                                              DAT2 290\n    END,.                              /*END OF PROCEDURE DAT2        */DAT2 300\n/*\n//GO.SYSIN  DD  *\nSAMPLE00023090001.0 1                                                         10\n     7     7     9     7    15    36    60    15    24                        20\n    13    18    25    15    13    35    61    18    30                        30\n     9    18    24    23    12    43    62    14    31                        40\n     7    13    25    36    11    12    63    26    32                        50\n     6     8    20     7    15    46    18    28    15                        60\n    10    12    30    11    10    42    27    12    17                        70\n     7     6    11     7    15    35    60    20    25                        80\n    16    19    25    16    13    30    64    20    30                        90\n     9    22    26    24    13    40    66    15    32                       100\n     8    15    26    30    13    10    66    25    34                       110\n     8    10    20     8    17    40    20    30    18                       120\n     9    12    28    11     8    45    30    15    19                       130\n    11    17    21    30    10    45    60    17    30                       140\n     9    16    26    27    14    31    59    19    17                       150\n    10    15    24    18    12    29    48    18    26                       160\n    11    11    30    19    19    26    57    20    30                       170\n    16     9    16    20    18    31    60    21    17                       180\n     9     8    19    14    16    33    67     9    19                       190\n     7    18    22     9    15    37    62    11    20                       200\n     8    11    23    18     9    36    61    22    24                       210\n     6     6    27    23     7    40    55    24    31                       220\n    10     9    26    26    10    37    57    27    29                       230\n     8    10    26    15    11    42    59    20    28                       240\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FILE09": {"ttr": 6666, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00Y\\x01\\x06\\x04O\\x01\\x06\\x04O\\x14\\x01\\x02r\\x02r\\x00\\x00\\xd7\\xd3\\xf1\\xe2\\xe2\\xd7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-02-13T00:00:00", "modifydate": "2006-02-13T14:01:59", "lines": 626, "newlines": 626, "modlines": 0, "user": "PL1SSP"}, "text": "//JOBH  JOB 111-1111,'SSP PL/1',MSGLEVEL=1\n//KOLM EXEC PL1LFCLG,PARM.PL1L='NOLIST,NOATR,NOXREF,CHAR48'\n//PL1L.SYSIN  DD  *\n KOLM..                                                                 KOLM  10\n /*********************************************************************/KOLM  20\n /*                                                                   */KOLM  30\n /* THE PURPOSE OF THIS ROUTINE IS TO:                                */KOLM  40\n /*      (1) READ THE CONTROL CARD FOR A ONE OR TWO SAMPLE TEST.      */KOLM  50\n /*      (2) READ THE SAMPLE DATA AND DETERMINE THE SAMPLE SIZES.     */KOLM  60\n /*      (3) CALL SMIR, KLMO, AND KLM2 FOR CALCULATION OF             */KOLM  70\n /*          PROBABILITIES.                                           */KOLM  80\n /*      (4) PRINT RESULTS.                                           */KOLM  90\n /*                                                                   */KOLM 100\n /*********************************************************************/KOLM 110\n    PROCEDURE OPTIONS (MAIN),.                                          KOLM 120\n    DECLARE                                                             KOLM 130\n         (DASH,DAS2) CHARACTER (4),                                     KOLM 140\n         (I,J,K,L,M,N,IS,IR,IO,IFL,E) FIXED BINARY,                     KOLM 150\n         (DIST(5,3),D(12),X(501),Y(501),P,Z,S2) FLOAT BINARY,           KOLM 160\n         TITLE CHARACTER (20),                                          KOLM 170\n         TIT1(5) CHARACTER (16),                                        KOLM 180\n         IES CHARACTER (1),                                             KOLM 190\n         ERROR EXTERNAL CHARACTER (1),.                                 KOLM 200\n    ON ENDFILE(SYSIN) GO TO S200,.                                      KOLM 210\n    SW   =0,.                                                           KOLM 220\n    IFL  =0,.                                                           KOLM 230\n    DASH ='----',.                     /* INITIALIZE NAMES            */KOLM 240\n    TIT1(1)   ='     NORMAL     ',.    /* AND JOB CONTROL CARD        */KOLM 250\n    TIT1(2)   ='  EXPONENTIAL   ',.                                     KOLM 260\n    TIT1(3)   ='     CAUCHY     ',.                                     KOLM 270\n    TIT1(4)   ='    UNIFORM     ',.                                     KOLM 280\n    TIT1(5)   =' USER-SPECIFIED ',.                                     KOLM 290\n S10..                                                                  KOLM 300\n    GET EDIT(DAS2,E)(A(4),X(75),F(1)),.                                 KOLM 310\n    IF DASH=DAS2                                                        KOLM 320\n    THEN                               /* READ TITLE AND              */KOLM 330\n S20..                                 /* PROGRAM PARAMETERS          */KOLM 340\n         DO,.                                                           KOLM 350\n         GET EDIT(TITLE,IS,IR,IO,DIST(*,*),E)(A(20),3 F(1),5(F(1),2 F(5)KOLM 360\n             ),X(1),F(1)),.                                             KOLM 370\n         IES  ='0',.                                                    KOLM 380\n         PUT EDIT (TITLE)(A(20)) PAGE,.                                 KOLM 390\n         PUT EDIT (' A',IS,' SAMPLE TEST WAS REQUESTED.')(SKIP(3),A(2), KOLM 400\n             F(2),A(27)),.                                              KOLM 410\n         IF SW=0 AND IS=2 AND IR=1                                      KOLM 420\n         THEN DO,.                                                      KOLM 430\n              PUT EDIT(' FIRST JOB REQUIRES PREVIOUS DATA FOR A TWO SAM'KOLM 440\n                  ,'PLE TEST.')(SKIP(3),A(47),A(9)),.                   KOLM 450\n              SW   =1,.                                                 KOLM 460\n              GO TO S40,.                                               KOLM 470\n              END,.                                                     KOLM 480\n         SW   =1,.                                                      KOLM 490\n         IF IR=0                       /* NO. OF SAMPLES DECISION     */KOLM 500\n         THEN IF IS GE 1                                                KOLM 510\n              THEN GO TO S140,.                                         KOLM 520\n              ELSE                     /* NO. OF SAMPLES WRONG        */KOLM 530\n S30..                                                                  KOLM 540\n                   DO,.                                                 KOLM 550\n                   PUT EDIT(' CC.21 OF THE PROGRAM CONTROL CARD IS INCO'KOLM 560\n                       ,'RRECT.  JOB IGNORED.')(SKIP(3),A(42),A(20)),.  KOLM 570\n S40..                                                                  KOLM 580\n                   GET EDIT(DAS2,E)(A(4),X(75),F(1)),.                  KOLM 590\n                   IF DASH=DAS2                                         KOLM 600\n                   THEN DO,.                                            KOLM 610\n                        IFL  =1,.                                       KOLM 620\n                        GO TO S20,.                                     KOLM 630\n                        END,.                                           KOLM 640\n                   ELSE GO TO S40,.                                     KOLM 650\n                   END,.                                                KOLM 660\n         ELSE IF IFL NE 0                                               KOLM 670\n              THEN DO,.                /* ERROR IN PREVIOUS JOB       */KOLM 680\n                   PUT EDIT(' THIS JOB CALLS FOR THE USE OF A PREVIOUSL'KOLM 690\n                       ,'Y READ SAMPLE, AND THE PREVIOUS JOB WAS IGNORE'KOLM 700\n                       ,'D BECAUSE OF ERRORS.','JOB IGNORED.')(SKIP(3), KOLM 710\n                       A(42),A(46),A(20),SKIP,A(13)),.                  KOLM 720\n                   GO TO S40,.                                          KOLM 730\n                   END,.                                                KOLM 740\n              ELSE GO TO S180,.                                         KOLM 750\n         END,.                                                          KOLM 760\n    ELSE DO,.                                                           KOLM 770\n         PUT EDIT(' FIRST CARD IN JOB DECK (JOB CONTROL CARD) IS INCORR'KOLM 780\n             ,'ECT.')(SKIP(3),A(52),A(4)),.                             KOLM 790\n         GO TO S40,.                                                    KOLM 800\n         END,.                                                          KOLM 810\n S50..                                                                  KOLM 820\n    IF IS=2                                                             KOLM 830\n    THEN GO TO S180,.                                                   KOLM 840\n    ELSE IF IS GT 2                                                     KOLM 850\n         THEN GO TO S30,.                                               KOLM 860\n         ELSE GO TO S65,.                                               KOLM 870\n S60..                                                                  KOLM 880\n    IF IS LE 1                         /* ONE SAMPLE TEST USING ALL   */KOLM 890\n    THEN DO,.                          /* DISTRIBUTIONS REQUESTED     */KOLM 900\n S65..                                                                  KOLM 910\n         DO I=1 TO 5,.                                                  KOLM 920\n         IF DIST(I,1) NE 0                                              KOLM 930\n         THEN GO TO S70,.                                               KOLM 940\n         END,.                                                          KOLM 950\n         PUT EDIT(' NO PDF COMPARISON IS ASKED FOR.')(SKIP(3),A(32)),.  KOLM 960\n S70..                                                                  KOLM 970\n         DO I=1 TO 5 ,.                                                 KOLM 980\n         IF DIST(I,1) = 1                                               KOLM 990\n         THEN CALL KLMO(X,N,Z,P,I,DIST(I,2),DIST(I,3)),.                KOLM1000\n         IF ERROR='0' OR ERROR='3'                                      KOLM1010\n         THEN                                                           KOLM1020\n              DO,.                     /* OUTPUT RESULTS              */KOLM1030\n              PUT EDIT(' THE HYPOTHESIS THAT THE SAMPLE IS FROM A(N)   'KOLM1040\n                  ,TIT1(I),' DISTRIBUTION' )(SKIP(3),A(47),A(16),A(13)) KOLM1050\n                  ,.                                                    KOLM1060\n              IF I LT 3                /* PREPARE OUTPUT              */KOLM1070\n              THEN DO,.                                                 KOLM1080\n                   S2   =DIST(I,3)**2,.                                 KOLM1090\n                   PUT EDIT(' WITH MEAN',DIST(I,2),' AND VARIANCE',S2)  KOLM1100\n                       (SKIP,A(10),F(13,4),A(13),F(13,4)),.             KOLM1110\n                   GO TO S80,.                                          KOLM1120\n                   END,.                                                KOLM1130\n              ELSE IF I=3                                               KOLM1140\n                   THEN DO,.                                            KOLM1150\n                        S2   =DIST(I,2)-DIST(I,3),.                     KOLM1160\n                        PUT EDIT(' WITH MEAN',DIST(I,2),' AND FIRST ',  KOLM1170\n                            'QUARTILE',S2)(SKIP,A(10),F(13,4),A(11),    KOLM1180\n                            A(8),F(13,4)),.                             KOLM1190\n                        GO TO S80,.                                     KOLM1200\n                        END,.                                           KOLM1210\n                   ELSE IF I LE 4                                       KOLM1220\n                        THEN DO,.                                       KOLM1230\n                             PUT EDIT(' IN THE INTERVAL',DIST(I,2),' TO'KOLM1240\n                                 ,DIST(I,3),' INCLUSIVE')(SKIP,A(16),   KOLM1250\n                                 F(13,4),A(3),F(13,4),A(10)),.          KOLM1260\n S80..                                                                  KOLM1270\n                             PUT EDIT(' CAN BE REJECTED WITH PROBABILIT'KOLM1280\n                                 ,'Y',P,' OF BEING INCORRECT.  THE STAT'KOLM1290\n                                 ,'ISTIC Z',' IS',Z,' FOR THIS SAMPLE.')KOLM1300\n                                 (SKIP,A(32),A(1),F(6,3),A(30),A(7),SKIPKOLM1310\n                                 ,A(3),E(12,4),A(17)),.                 KOLM1320\n                             END,.                                      KOLM1330\n                        GO TO S90,.                                     KOLM1340\n              END,.                                                     KOLM1350\n         ELSE IES  =ERROR,.                                             KOLM1360\n S90..                                                                  KOLM1370\n         END,.                                                          KOLM1380\n         END,.                                                          KOLM1390\n    ELSE GO TO S110,.                                                   KOLM1400\n    IF IO NE 0                         /* OUTPUT SAMPLE ONE DECISION  */KOLM1410\n    THEN DO,.                                                           KOLM1420\n         PUT EDIT (' SORTED SAMPLE ONE FOLLOWS')(SKIP(3),A(26)),.       KOLM1430\n         PUT EDIT ((X(J) DO J=1 TO N))(SKIP,10 (F(10,3))),.             KOLM1440\n         END,.                                                          KOLM1450\n    IF IES    ='0'                                                      KOLM1460\n    THEN                                                                KOLM1470\n S100..                                                                 KOLM1480\n         DO,.                                                           KOLM1490\n         IFL  =0,.                                                      KOLM1500\n         PUT EDIT ('   THE JOB WITH TITLE',TITLE,' WAS COMPLETED.')     KOLM1510\n             (SKIP(3),A(22),A(18),A(15)),.                              KOLM1520\n         IF ERROR='3'                                                   KOLM1530\n         THEN PUT EDIT ('NOTE THE REMARKS CONCERNING ASYMPTOTIC RESULTS'KOLM1540\n              ,' AND SAMPLE SIZE IN SUBROUTINE SMIR.')(SKIP(3),A(46),   KOLM1550\n              A(36)),.                                                  KOLM1560\n         GO TO S10,.                                                    KOLM1570\n         END,.                                                          KOLM1580\n    ELSE DO,.                                                           KOLM1590\n         PUT EDIT(' AT LEAST ONE (S) ENTRY PARAMETER FOR THE SUBROUTINE'KOLM1600\n             ,' KLMO WAS INCORRECT. ',' TEST FOR THE ASSOCIATED CONTINU'KOLM1610\n             ,'OUS PDF WAS IGNORED.')(SKIP(3),A(52),A(21),SKIP,A(32),   KOLM1620\n             A(20)),.                                                   KOLM1630\n         GO TO S100,.                                                   KOLM1640\n         END,.                                                          KOLM1650\n S110..                                                                 KOLM1660\n    CALL KLM2(X,Y,N,M,Z,P),.           /* TWO SAMPLE TEST             */KOLM1670\n    IF IO=0                            /* OUTPUT SAMPLES DECISION     */KOLM1680\n    THEN                                                                KOLM1690\n S120..                                                                 KOLM1700\n         DO,.                                                           KOLM1710\n         PUT EDIT(' THE HYPOTHESIS THAT THE TWO SAMPLES ARE FROM THE ', KOLM1720\n             ' SAME POPULATION CAN BE REJECTED WITH (ASYMPTOTIC)',      KOLM1730\n             ' PROBABILITY OF BEING INCORRECT OF',P,'. THE STATISTIC Z 'KOLM1740\n             ,'IS ',Z,' FOR THESE SAMPLES.')(SKIP(3),A(50),A(50),SKIP,  KOLM1750\n             A(34),F(6,3),A(18),A(3),E(12,4),A(19)),.                   KOLM1760\n         GO TO S100,.                                                   KOLM1770\n         END,.                                                          KOLM1780\n    ELSE                                                                KOLM1790\n S130..                                                                 KOLM1800\n         DO,.                                                           KOLM1810\n         PUT EDIT (' SORTED SAMPLE ONE AS FOLLOWS')(SKIP(3),A(29)),.    KOLM1820\n         PUT EDIT ((X(J) DO J=1 TO N))(SKIP,10 F(10,3)),.               KOLM1830\n         PUT EDIT (' SORTED SAMPLE TWO AS FOLLOWS')(SKIP(3),A(29)),.    KOLM1840\n         PUT EDIT ((Y(J) DO J=1 TO M))(SKIP,10 F(10,3)),.               KOLM1850\n         GO TO S120,.                                                   KOLM1860\n         END,.                                                          KOLM1870\n S140..                                                                 KOLM1880\n    N    =0,.                          /* READ FIRST SAMPLE           */KOLM1890\n         DO I=1 TO 50,.                                                 KOLM1900\n         GET EDIT((D(K) DO K=1 TO 12),E)(12 F(6),X(7),F(1)),.           KOLM1910\n              DO J=1 TO 12,.                                            KOLM1920\n              IF D(J) = 999999.0       /* CHECK FOR END OF SAMPLE     */KOLM1930\n              THEN GO TO S170,.                                         KOLM1940\n              N    =N+1,.                                               KOLM1950\n              IF N GE 501              /* MAXIMUM SAMPLE SIZE         */KOLM1960\n              THEN                                                      KOLM1970\n S150..                                                                 KOLM1980\n                   DO,.                                                 KOLM1990\n                   PUT EDIT (' SAMPLE SIZE IS TOO LARGE.  JOB IGNORED.')KOLM2000\n                       (SKIP(3),A(43)),.                                KOLM2010\n                   GO TO S40,.                                          KOLM2020\n                   END,.                                                KOLM2030\n              X(N) =D(J),.             /* PLACE SAMPLE IN X           */KOLM2040\n              END,.                                                     KOLM2050\n         END,.                                                          KOLM2060\n S170..                                                                 KOLM2070\n    PUT EDIT(' THE SIZE OF SAMPLE 1 IS',N,'.')(SKIP(3),A(24),F(4),A(1)) KOLM2080\n        ,.                                                              KOLM2090\n    GO TO S50,.                                                         KOLM2100\n S180..                                                                 KOLM2110\n    M    =0,.                          /* READ SECOND SAMPLE          */KOLM2120\n         DO I=1 TO 50,.                                                 KOLM2130\n         GET EDIT((D(K) DO K=1 TO 12),E)(12 F(6),X(7),F(1)),.           KOLM2140\n              DO J=1 TO 12,.                                            KOLM2150\n              IF D(J)=999999.0         /* CHECK FOR END OF SAMPLE     */KOLM2160\n              THEN GO TO S190,.                                         KOLM2170\n              M    =M+1,.                                               KOLM2180\n              IF M GE 501              /* MAX SIZE OF SAMPLE          */KOLM2190\n              THEN DO,.                                                 KOLM2200\n                   PUT EDIT(' SAMPLE SIZE IS TOO LARGE.  JOB IGNORED.') KOLM2210\n                       (SKIP(3),A(43)),.                                KOLM2220\n                       GO TO S40,.                                      KOLM2230\n                       END,.                                            KOLM2240\n              Y(M) =D(J),.             /* PLACE SAMPLE IN Y           */KOLM2250\n              END,.                                                     KOLM2260\n         END,.                                                          KOLM2270\n S190..                                                                 KOLM2280\n    PUT EDIT(' THE SIZE OF SAMPLE 2 IS',M,'.')(SKIP(3),A(24),F(4),A(1)) KOLM2290\n         ,.                                                             KOLM2300\n    GO TO S60,.                                                         KOLM2310\n S200..                                                                 KOLM2320\n    PUT FILE (SYSPRINT) EDIT ('END OF SAMPLE PROGRAM')                  KOLM2330\n         (SKIP(2),COLUMN(10),A),.                                       KOLM2340\n    END,.                              /* END OF PROCEDURE KOLM       */KOLM2350\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n KLMO..                                                                 KLMO  10\n /*********************************************************************/KLMO  20\n /*                                                                   */KLMO  30\n /*      TESTS THE DIFFERENCE BETWEEN EMPIRICAL AND THEORETICAL       */KLMO  40\n /*      DISTRIBUTIONS USING THE KOLMOGOROV-SMIRNOV TEST              */KLMO  50\n /*                                                                   */KLMO  60\n /*********************************************************************/KLMO  70\n    PROCEDURE(X,N,Z,PROB,IFCOD,U,S),.                                   KLMO  80\n    DECLARE                                                             KLMO  90\n         (X(*),Y,TEMP,PROB,S,U,Z,D,DN,EI,ES,FI,FS)FLOAT BINARY,         KLMO 100\n         (I,J,K,IL,N,IFCOD) FIXED BINARY,                               KLMO 110\n         ERROR EXTERNAL CHARACTER (1),.                                 KLMO 120\n    ERROR='0',.                                                         KLMO 130\n    IF N LT 100                                                         KLMO 140\n    THEN IF N=0                        /* N < 100--SET ERROR IND.     */KLMO 150\n         THEN DO,.                                                      KLMO 160\n              ERROR='4',.                                               KLMO 170\n              GO TO S80,.                                               KLMO 180\n              END,.                                                     KLMO 190\n         ELSE ERROR='3',.                                               KLMO 200\n    K    =1,.                          /* SORT X INTO ASCENDING       */KLMO 210\n         DO I=2 TO N,.                 /* SEQUENCE                    */KLMO 211\n         IF X(I) LT X(K)                                                KLMO 212\n         THEN DO,.                                                      KLMO 213\n              TEMP =X(I),.                                              KLMO 214\n                   DO J=1 TO K,.                                        KLMO 215\n                   L    =I-J,.                                          KLMO 216\n                   IF TEMP GE X(L)                                      KLMO 217\n                   THEN DO,.                                            KLMO 218\n                        X(L+1)    =TEMP,.                               KLMO 219\n                        GO TO S5,.                                      KLMO 220\n                        END,.                                           KLMO 230\n                   ELSE X(L+1)    =X(L),.                               KLMO 240\n                   END,.                                                KLMO 250\n              X(1) =TEMP,.                                              KLMO 260\n S5..                                                                   KLMO 270\n              END,.                                                     KLMO 280\n         K    =I,.                                                      KLMO 290\n         END,.                                                          KLMO 300\n                                       /* COMPUTES MAX. DEV. DN IN    */KLMO 310\n                                       /* ABS. VAL. BETWEEN EMP. AND  */KLMO 320\n                                       /* THEO. FUNCTIONS OVER ALL X  */KLMO 330\n    DN,FS=0.0,.                                                         KLMO 340\n    IL   =1,.                                                           KLMO 350\n S10..                                                                  KLMO 360\n         DO I=IL TO N-1,.                                               KLMO 370\n         J    =I,.                                                      KLMO 380\n         IF X(J) NE X(J+1)                                              KLMO 390\n         THEN GO TO S40,.                                               KLMO 400\n         END,.                                                          KLMO 410\n    J    =N,.                                                           KLMO 450\n S40..                                                                  KLMO 460\n    IL   =J+1,.                                                         KLMO 470\n    FI   =FS,.                                                          KLMO 480\n    FS   =FLOAT(J)/N,.                 /* EMP. DIST. FUNCT. CALCULATED*/KLMO 490\n    IF IFCOD=2                                                          KLMO 500\n    THEN DO,.                                                           KLMO 510\n         IF S LE 0                                                      KLMO 520\n         THEN ERROR='1',.              /* INVALID VALUE OF S          */KLMO 530\n         ELSE DO,.                     /* EXPONENTIAL PDF             */KLMO 590\n              Z    =(X(J)-U)/S+1.0,.                                    KLMO 600\n              IF Z LE 0                                                 KLMO 610\n              THEN                     /* Z < OR = 0                  */KLMO 620\n S60..                                                                  KLMO 630\n                   DO,.                                                 KLMO 640\n                   Y    =0.0,.                                          KLMO 650\n S70..                                                                  KLMO 660\n                   EI   =ABS(Y-FI),.                                    KLMO 670\n                   ES   =ABS(Y-FS),.                                    KLMO 680\n                                       /* COMPUTE MAX. DEV. DN BETWEEN*/KLMO 690\n                                       /* EMP. AND THEO. FUNCTIONS    */KLMO 700\n                   DN   =MAX(DN,EI,ES),.                                KLMO 710\n                   IF IL LE N                                           KLMO 720\n                   THEN GO TO S10,.                                     KLMO 730\n                   ELSE DO,.                                            KLMO 760\n                                       /* CALC. ASYMPTOTIC VALUES     */KLMO 770\n                                       /* USING SMIR                  */KLMO 780\n                        Z    =DN*SQRT(N),.                              KLMO 790\n                        CALL SMIR (Z,PROB),.                            KLMO 800\n                        PROB =1.E0-PROB,.                               KLMO 810\n                        END,.                                           KLMO 830\n                   END,.                                                KLMO 840\n              ELSE DO,.                /* EXPONENTIAL PDF             */KLMO 850\n                   Y=1.-EXP(-Z),.                                       KLMO 860\n                   GO TO S70,.                                          KLMO 870\n                   END,.                                                KLMO 880\n              END,.                                                     KLMO 890\n         END,.                                                          KLMO 900\n    ELSE IF IFCOD LT 2                                                  KLMO 910\n         THEN IF S LE 0                                                 KLMO 920\n              THEN ERROR='1',.         /* INVALID VALUE OF S          */KLMO 930\n              ELSE DO,.                /* NORMAL PDF                  */KLMO 940\n                   Z    =(X(J)-U)/S,.                                   KLMO 950\n                   CALL NDTR(Z,Y,D),.                                   KLMO 960\n                   GO TO S70,.                                          KLMO 970\n                   END,.                                                KLMO 980\n         ELSE IF IFCOD=4                                                KLMO 990\n              THEN IF S LE U                                            KLMO1000\n                   THEN ERROR='1',.    /* INVALID VAL. OF S OR U      */KLMO1010\n                   ELSE IF X(J) LE U   /* UNIFORM PDF                 */KLMO1020\n                        THEN GO TO S60,.                                KLMO1030\n                        ELSE IF X(J) LE S                               KLMO1040\n                             THEN DO,.                                  KLMO1050\n                                  Y    =(X(J)-U)/(S-U),.                KLMO1060\n                                  GO TO S70,.                           KLMO1070\n                                  END,.                                 KLMO1080\n                             ELSE DO,.                                  KLMO1090\n                                  Y    =1.0,.                           KLMO1100\n                                  GO TO S70,.                           KLMO1110\n                                  END,.                                 KLMO1120\n              ELSE IF IFCOD LT 4                                        KLMO1130\n                   THEN IF S=0         /* INVALID VALUE OF S          */KLMO1140\n                        THEN ERROR='1',.                                KLMO1150\n                        ELSE DO,.      /* CAUCHY PDF                  */KLMO1160\n                             Y    =ATAN((X(J)-U)/S)*0.3183099+0.5,.     KLMO1170\n                             GO TO S70,.                                KLMO1180\n                             END,.                                      KLMO1190\n                   ELSE ERROR='2',.    /* USER'S PDF                  */KLMO1200\n S80..                                                                  KLMO1210\n    RETURN,.                                                            KLMO1220\n    END,.                              /*END OF PROCEDURE KLMO        */KLMO1230\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n KLM2..                                                                 KLM2  10\n /*********************************************************************/KLM2  20\n /*                                                                   */KLM2  30\n /*      TESTS THE DIFFERENCE BETWEEN TWO SAMPLE DISTRIBUTION         */KLM2  40\n /*      FUNCTIONS USING THE KOLMOGOROV-SMIRNOV TEST.                 */KLM2  50\n /*                                                                   */KLM2  60\n /*********************************************************************/KLM2  70\n    PROCEDURE(X,Y,N,M,Z,PROB),.                                         KLM2  80\n    DECLARE                                                             KLM2  90\n         (X(*),Y(*),TEMP,XM1,XN1,Z,PROB,D) FLOAT BINARY,                KLM2 100\n         (I,J,K,L,M,N) FIXED BINARY,                                    KLM2 110\n         ERROR EXTERNAL CHARACTER(1),.                                  KLM2 120\n    ERROR='0',.                                                         KLM2 130\n    IF N LT 100 OR M LT 100            /* M OR N IS LESS THAN 100     */KLM2 140\n    THEN IF N=0 OR M=0                 /* SET ERROR INDICATOR         */KLM2 150\n         THEN DO,.                                                      KLM2 160\n              ERROR='4',.                                               KLM2 170\n              GO TO S60,.                                               KLM2 180\n              END,.                                                     KLM2 190\n         ELSE ERROR='3',.                                               KLM2 200\n    K    =1,.                          /* SORT X INTO ASCENDING       */KLM2 210\n         DO I=2 TO N,.                 /* SEQUENCE                    */KLM2 211\n         IF X(I) LT X(K)                                                KLM2 212\n         THEN DO,.                                                      KLM2 213\n              TEMP =X(I),.                                              KLM2 214\n                   DO J=1 TO K,.                                        KLM2 215\n                   L    =I-J,.                                          KLM2 216\n                   IF TEMP GE X(L)                                      KLM2 217\n                   THEN DO,.                                            KLM2 218\n                        X(L+1)    =TEMP,.                               KLM2 219\n                        GO TO S5,.                                      KLM2 220\n                        END,.                                           KLM2 221\n                   ELSE X(L+1)    =X(L),.                               KLM2 222\n                   END,.                                                KLM2 223\n              X(1) =TEMP,.                                              KLM2 224\n S5..                                                                   KLM2 225\n              END,.                                                     KLM2 226\n         K    =I,.                                                      KLM2 227\n         END,.                                                          KLM2 228\n    K    =1,.                          /* SORT Y INTO ASCENDING       */KLM2 229\n         DO I=2 TO M,.                 /* SEQUENCE                    */KLM2 230\n         IF Y(I) LT Y(K)                                                KLM2 240\n         THEN DO,.                                                      KLM2 250\n              TEMP =Y(I),.                                              KLM2 260\n                   DO J=1 TO K,.                                        KLM2 270\n                   L    =I-J,.                                          KLM2 280\n                   IF TEMP GE Y(L)                                      KLM2 290\n                   THEN DO,.                                            KLM2 300\n                        Y(L+1)    =TEMP,.                               KLM2 310\n                        GO TO S8,.                                      KLM2 320\n                        END,.                                           KLM2 330\n                   ELSE Y(L+1)    =Y(L),.                               KLM2 340\n                   END,.                                                KLM2 350\n              Y(1) =TEMP,.                                              KLM2 360\n S8..                                                                   KLM2 370\n              END,.                                                     KLM2 380\n         K    =I,.                                                      KLM2 390\n         END,.                                                          KLM2 400\n    XN1  =1/FLOAT(N),.                 /* CALC. D=ABS(FN-GM)          */KLM2 410\n    XM1  =1/FLOAT(M),.                 /* OVER THE SPECTRUM OF X & Y  */KLM2 420\n    D,I,J,K,L =0,.                                                      KLM2 430\n S10..                                                                  KLM2 440\n    IF Y(J+1) GT X(I+1)                                                 KLM2 450\n    THEN DO,.                                                           KLM2 460\n         K=1,.                                                          KLM2 470\n S20..                                                                  KLM2 480\n         I=I+1,.                                                        KLM2 490\n         IF N LE I                                                      KLM2 500\n         THEN DO,.                                                      KLM2 510\n              L=1,.                                                     KLM2 520\n              GO TO S30,.                                               KLM2 530\n              END,.                                                     KLM2 540\n         ELSE IF X(I) GE X(I+1)                                         KLM2 550\n              THEN GO TO S20,.                                          KLM2 560\n              ELSE                                                      KLM2 570\n S30..                                                                  KLM2 580\n                   IF K = 0                                             KLM2 590\n                   THEN                                                 KLM2 600\n S40..                                                                  KLM2 610\n                        DO,.                                            KLM2 620\n                        J=J+1,.                                         KLM2 630\n                        IF J LT M                                       KLM2 640\n                        THEN IF Y(J+1) LE Y(J)                          KLM2 650\n                             THEN GO TO S40,.                           KLM2 660\n                             ELSE GO TO S50,.                           KLM2 670\n                        ELSE L=1,.                                      KLM2 680\n                        END,.                                           KLM2 720\n         END,.                                                          KLM2 740\n    ELSE IF X(I+1) = Y(J+1)                                             KLM2 750\n         THEN DO,.                                                      KLM2 760\n              K=0,.                                                     KLM2 770\n              GO TO S20,.                                               KLM2 780\n              END,.                                                     KLM2 790\n         ELSE GO TO S40,.                                               KLM2 800\n                                       /* CHOOSE THE MAXIMUM          */KLM2 810\n                                       /* DIFFERENCE, D               */KLM2 820\n S50..                                                                  KLM2 830\n    D    =MAX(D,ABS(FLOAT(I)*XN1-FLOAT(J)*XM1)),.                       KLM2 840\n    IF L=0                                                              KLM2 850\n    THEN GO TO S10,.                                                    KLM2 860\n                                       /* CALCULATE THE STATISTIC Z   */KLM2 880\n                                       /* AND Z'S PROBABILITY         */KLM2 890\n    Z    =D*SQRT((FLOAT(N)*FLOAT(M))/(FLOAT(N)+FLOAT(M))),.             KLM2 900\n    CALL SMIR(Z,PROB),.                                                 KLM2 910\n    PROB =1-PROB,.                                                      KLM2 920\n S60..                                                                  KLM2 940\n    RETURN,.                                                            KLM2 950\n    END,.                              /* END OF PROCEDURE KLM2       */KLM2 960\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n SMIR..                                                                 SMIR  10\n /*********************************************************************/SMIR  20\n /*                                                                   */SMIR  30\n /*      COMPUTES VALUES OF THE LIMITING DISTRIBUTION FUNCTION FOR THE*/SMIR  40\n /*      KOLMOGOROV-SMIRNOV STATISTIC.                                */SMIR  50\n /*                                                                   */SMIR  60\n /*********************************************************************/SMIR  70\n    PROCEDURE (X,Y),.                                                   SMIR  80\n    DECLARE                                                             SMIR  90\n         (X,Y,Q1,Q2,Q4,Q8) FLOAT BINARY,./*SINGLE PRECISION        /*S*/SMIR 100\n  /*     (X,Y,Q1,Q2,Q4,Q8) FLOAT BINARY (53),./*DOUBLE PRECISION   /*D*/SMIR 110\n    IF X LT 1.0                                                         SMIR 120\n    THEN IF X LE .27                   /* X LESS THAN .27-SET Y       */SMIR 130\n         THEN Y    =0.0,.                                               SMIR 140\n                                       /* CALCULATE L(X)              */SMIR 150\n                                       /* IN RANGE (.27,1)            */SMIR 160\n         ELSE DO,.                                                      SMIR 170\n              Q1   =EXP(-1.233701E0/X**2),.      /* SINGLE PREC.   /*S*/SMIR 180\n  /*          Q1   =EXP(-1.23370050136170E0/X**2),.                     SMIR 190\n                                                 /* DOUBLE PREC.   /*D*/SMIR 200\n              Q2   =Q1*Q1,.                                             SMIR 210\n              Q4   =Q2*Q2,.                                             SMIR 220\n              Q8   =Q4*Q4,.                                             SMIR 230\n              IF Q8-1.0E-25 GE 0                                        SMIR 240\n              THEN Y    =(2.506628E0/X)*Q1*(1.0E0+Q8*(1.0E0+Q8*Q8)),.   SMIR 250\n                                                 /* SINGLE PREC.   /*S*/SMIR 260\n  /*          THEN Y    =(2.506628274631001E0/X)*Q1*(1.0E0+Q8*          SMIR 270\n                         (1.0E0+Q8*Q8)),.        /* DOUBLE PREC.   /*D*/SMIR 280\n              ELSE Y    =(2.506628E0/X)*Q1,.     /* SINGLE PREC.   /*S*/SMIR 290\n  /*          ELSE Y    =(2.506628274631001E0/X)*Q1,.                   SMIR 300\n                                                 /* DOUBLE PREC.   /*D*/SMIR 310\n              END,.                                                     SMIR 320\n    ELSE IF X LT 3.1                                                    SMIR 330\n                                       /* CALCULATE L(X)              */SMIR 340\n         THEN DO,.                     /* IN RANGE (1,3.1)            */SMIR 350\n              Q1   =EXP(-2.0E0*X*X),.                                   SMIR 360\n              Q2   =Q1*Q1,.                                             SMIR 370\n              Q4   =Q2*Q2,.                                             SMIR 380\n              Q8   =Q4*Q4,.                                             SMIR 390\n              Y    =1.0E0-2.0E0*(Q1-Q4+Q8*(Q1-Q8)),.                    SMIR 400\n              END,.                                                     SMIR 410\n         ELSE Y    =1.0,.              /* X > OR = 3.1--SET Y         */SMIR 420\n    RETURN,.                                                            SMIR 430\n    END,.                              /* END OF PROCEDURE SMIR       */SMIR 440\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n NDTR..                                                                 NDTR  10\n /*********************************************************************/NDTR  20\n /*                                                                   */NDTR  30\n /*      COMPUTES Y=P(X)=THE PROBABILITY THAT THE RANDOM VARIABLE U,  */NDTR  40\n /*      DISTRIBUTED NORMALLY (0,1) IS LESS THAN OR EQUAL TO X.  F(X),*/NDTR  50\n /*      THE ORDINATE OF THE NORMAL DENSITY AT X, IS ALSO COMPUTED.   */NDTR  60\n /*                                                                   */NDTR  70\n /*********************************************************************/NDTR  80\n    PROCEDURE (X,P,D),.                                                 NDTR  90\n    DECLARE                                                             NDTR 100\n         (D,T,P,X,AX) FLOAT BINARY,.                                    NDTR 110\n    AX   =ABS(X),.                     /* CALC. PROB. P & DENSITY D   */NDTR 120\n    T    =1.0E0/(1.0E0+.2316419E0*AX),.                                 NDTR 130\n    D    =0.3989423E0*EXP(-X*X/2.0E0),.                                 NDTR 140\n    P    =1.0E0-D*T*((((1.330274E0*T-1.821256E0)*T+1.781478E0)*T-       NDTR 150\n          0.3565638)*T+0.3193815E0),.                                   NDTR 160\n    IF X LT 0                          /* X < 0                       */NDTR 170\n    THEN P=1.0E0-P,.                   /* COMPLEMENT PROB. P          */NDTR 180\n    RETURN,.                                                            NDTR 190\n    END,.                              /* END OF PROCEDURE NDTR       */NDTR 200\n/*\n//GO.SYSIN  DD  *\n----                                                                          10\nUNIFORM TEST        1001000.5000.51000.5000011000.50000110000000001           20\n 0.377 0.260 0.172 0.688 0.581 0.290 0.514 0.472 0.204 0.976 0.018 0.326      30\n 0.795 0.837 0.870 0.686 0.288 0.555 0.737 0.427 0.931 0.745 0.092 0.843      40\n 0.231 0.806 0.753 0.263 0.804 0.458 0.508 0.928 0.994 0.608 0.702 0.743      50\n 0.005 0.951 0.664 0.425 0.570 0.596 0.444 0.302 0.817 0.183 0.746 0.833      60\n 0.282 0.201 0.662 0.167 0.043 0.750 0.117 0.953 0.665 0.411 0.477 0.164      70\n 0.692 0.683 0.867 0.054 0.518 0.624 0.083 0.882 0.540 0.301 0.953 0.006      80\n 0.458 0.694 0.041 0.995 0.604 0.666 0.561 0.367 0.156 0.630 0.377 0.589      90\n 0.139 0.536 0.963 0.956 0.068 0.801 0.199 0.985 0.113 0.816 0.880 0.931     100\n 0.670 0.640 0.805 0.073 0.196 0.516 0.336 0.371 0.197 0.843 0.288 0.139     110\n 0.242 0.200 0.025 0.349 0.870 0.080 0.652 0.190 0.275 0.939 0.161 0.514     120\n 0.636 0.190 0.416 0.786 0.973 0.767 0.845 0.168 0.400 0.888 0.726 0.365     130\n 0.652 0.632 0.923 0.844 0.761 0.969 0.965 0.073 0.751 0.851 0.340 0.383     140\n 0.243 0.008 0.860 0.093 0.816 0.058 0.006 0.515 0.033 0.565 0.093 0.470     150\n 0.982 0.666 0.154 0.933 0.215 0.890 0.409 0.441 0.963 0.810 0.195 0.876     160\n 0.501 0.123 0.228 0.264 0.531 0.810 0.083 0.202 0.469 0.996 0.752 0.545     170\n 0.503 0.117 0.170 0.972 0.298 0.042 0.574 0.065 0.225 0.766 0.570 0.520     180\n 0.996 0.292 0.790 0.111 0.556 0.337 0.012 0.042 0.143 0.482 0.607 0.302     190\n 0.353 0.397 0.206 0.662 0.119 0.754 0.450 0.918 0.453 0.463 0.699 0.022     200\n 0.842 0.859 0.577 0.725 0.163 0.450 0.232 0.349 0.000 0.864 0.181 0.311     210\n 0.236 0.622 0.607 0.042 0.787 0.348 0.006 0.904 0.365 0.053 0.037 0.745     220\n 0.136 0.113 0.455 0.708 0.158 0.572 0.012 0.928 0.455 0.381 0.193 0.728     230\n 0.629 0.220 0.657 0.962 0.860 0.501 0.268 0.098 0.181 0.203 0.588 0.701     240\n 0.909 0.148 0.708 0.909 0.088 0.345 0.277 0.556 0.840 0.033 0.639 0.539     250\n 0.482 0.041 0.907 0.077 0.299 0.097 0.892 0.478 0.835 0.707 0.733 0.029     260\n 0.581 0.224 0.112 0.659 0.945 0.741 0.940 0.969 0.360 0.434 0.365 0.285     270\n 0.422 0.967 0.005 0.328 0.924 0.595 0.253 0.157 0.668 0.594 0.554 0.984     280\n 0.913 0.622 0.516 0.502 0.364 0.667 0.724 0.344 0.546 0.178 0.151 0.302     290\n 0.457 0.021 0.019 0.923 0.365 0.882 0.010 0.121 0.637 0.734 0.671 0.416     300\n 0.459 0.009 0.919 0.434 0.331 0.079 0.500 0.284 0.209 0.694 0.283 0.454     310\n 0.178 0.978 0.272 0.827 0.512 0.634 0.195 0.462 0.019 0.956 0.560 0.761     320\n 0.524 0.294 0.047 0.634 0.382 0.591 0.103 0.303 0.889 0.607 0.638 0.367     330\n 0.463 0.471 0.664 0.742 0.476 0.178 0.785 0.113 0.610 0.646 0.390 0.520     340\n 0.611 0.988 0.431 0.699 0.312 0.580 0.672 0.810 0.814 0.597 0.256 0.164     350\n 0.679 0.603 0.504 0.595 0.033 0.846 0.783 0.079 0.430 0.868 0.343 0.244     360\n 0.376 0.062 0.990 0.381 0.371 0.801 0.467 0.592 0.348 0.759 0.422 0.697     370\n 0.388 0.055 0.836 0.518 0.585 0.842 0.793 0.177 0.926 0.964 0.450 0.022     380\n 0.085 0.311 0.102 0.816 0.973 0.494 0.208 0.803 0.948 0.462 0.242 0.287     390\n 0.546 0.698 0.269 0.339 0.607 0.594 0.102 0.266 0.677 0.668 0.913 0.462     400\n 0.562 0.207 0.188 0.264 0.895 0.991 0.893 0.442 0.615 0.709 0.722 0.950     410\n 0.208 0.696 0.304 0.557 0.605 0.617 0.256 0.984 0.595 0.715 0.936 0.178     420\n 0.141 0.153 0.654 0.544 0.376 0.363 0.793 0.492 0.812 0.447 0.376 0.231     430\n 0.644 0.263 0.785 0.341 0.982 0.829999999                                   440\n----                                                                         450\nUNIFORM-GAUSS TEST  211                                                      460\n-0.283 0.916 0.776 0.690 0.910 0.506 0.816 0.348 0.659-0.301 0.630-0.397     470\n 0.515 0.227 1.253 0.421 0.499 0.288 1.189-0.264 0.099 0.051 0.411 0.951     480\n 0.273 0.154 0.861 0.937 0.446 0.702 1.451 0.035 0.515 0.770 0.559 1.053     490\n-1.157 0.902 0.533 1.270 0.761 1.110 1.190 0.433 0.573 0.374 1.317 1.255     500\n 0.547 1.145 0.667-0.077 0.422-0.159-0.037 0.088 0.406 0.849 0.898 0.372     510\n-0.324 0.025 0.632 0.365 0.375 0.694-0.206 0.126-0.381 1.149 0.983 1.184     520\n-0.011 0.653 0.266 1.035 0.536 0.936 1.177 1.644 0.782 0.198 0.222 0.445     530\n 0.714 0.607 0.374 0.341 0.790 0.302 1.075 0.204 0.436 0.887 0.234 0.874     540\n 0.048 0.938 0.733-0.340-0.012 0.497 0.418 0.840 0.091 0.578 0.606-0.340     550\n 0.656 0.660 0.584 0.837 0.454 0.695 0.606 0.053-0.276 1.600 1.394-0.038     560\n 1.173 0.762 0.642 0.185-0.023 0.037 0.508 0.313-0.718-0.249 0.124-0.096     570\n-0.299 0.196 1.086 0.487 0.317 0.635 0.462 0.559 0.181 1.799 0.287 0.583     580\n 0.313 0.387 1.067 0.996 0.702 0.068-0.227 0.198 0.305-0.021 0.849 1.063     590\n 1.049 0.226-0.297 0.930 0.828 0.884 1.217-0.391 0.007-0.004 1.238 0.376     600\n 0.418 1.075 0.083-0.020 0.362 0.601 0.037 0.634 0.109 0.524 1.356 1.024     610\n-0.602 0.763 1.261 0.302-0.063 0.704 0.446-0.410 0.401 0.704 1.070-0.023     620\n-0.064 1.087-0.737-0.476 1.156 0.648 0.624 0.257 0.643 0.147 0.719 0.174     630\n-0.552-0.183 0.583 0.740 0.592-0.144 0.222 0.388 0.563 0.933 1.108 1.022     640\n 0.818 0.686 0.683 0.514 0.284-0.280 0.358 1.203-0.643 0.110 0.012 0.399     650\n 0.899 0.400 0.994 0.880 0.743 0.102 1.120 0.391 0.191 0.196 1.176 0.149     660\n 0.512 1.132 0.916 0.838 0.445 1.330 0.563 0.610 0.699 0.675 0.310 0.586     670\n 0.448-0.475 0.317 0.858 0.839-0.297 0.214 0.985 0.484 1.004 1.598 0.494     680\n 0.467 1.188 0.536 0.381 1.339-0.011 0.064 0.113 0.619 0.604 0.687 0.622     690\n 0.297 0.203 0.378 1.313 0.829 0.422 0.078 0.057 0.143 0.868-0.302 0.693     700\n 0.633 1.116 0.118-0.469 0.663 0.708 0.685 0.850 0.566 0.657 1.217 0.394     710\n 0.643-0.055-0.000 0.881 1.163 0.520 0.787 1.493 1.366 0.801 0.301 1.384     720\n-0.541 1.176 0.236 0.675 1.119 1.000 0.250 0.457-0.010 0.098 0.975 0.288     730\n 0.686 0.764 0.007 0.697 0.789 0.259 0.414 0.680 0.852 0.315 0.231 0.203     740\n 1.394 0.131 0.963 0.699 0.404-0.124 0.583 0.071 1.838-0.313-0.467 0.191     750\n 0.125 1.670 0.224 0.400 0.658 0.900 1.034 0.005 0.801 0.920-0.188 0.786     760\n 0.387 1.243 0.875 0.989 0.718-0.152 0.009 1.329 0.562 0.687 0.968 0.490     770\n 0.160 0.177-0.025 1.125 0.217 1.206 1.221-0.145-0.088 0.629-0.131 0.272     780\n 0.388 0.772 1.046-0.067 0.760 0.428 0.852 0.867 0.610 0.359 1.352 0.571     790\n-0.011-0.205 1.084 0.009 0.917 0.438 1.050 0.616 0.884 0.954-0.275 1.295     800\n 0.346-1.018 1.049 0.417 1.230 1.127 1.435 0.823-0.069 0.464 1.261-0.179     810\n 0.812 0.537 0.875 0.190 0.707 0.857 0.094 0.176 0.916 0.406 0.204 0.494     820\n 1.709 0.133 0.460 0.828-0.174 0.457 0.584 0.832-0.026 1.265-0.232-0.373     830\n-0.172 0.913 0.673 0.303 0.035 1.226-0.072 0.920 1.207-0.003 0.632 0.004     840\n 0.951 0.307 0.798 1.479 0.196 1.058 0.873 0.060 0.524 0.501 0.373 0.954     850\n-0.072 0.988 0.351 0.053 0.248 0.430-0.379 0.533 0.688 0.524 0.447 1.376     860\n-0.263-0.064 0.301 1.486 0.351 0.806-0.374 0.735 0.958-0.262 0.332 0.963     870\n999999                                                                       880\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FILE10": {"ttr": 6922, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x01\\x06\\x04O\\x01\\x06\\x04O\\x14\\x02\\x00\\xb1\\x00\\xb1\\x00\\x00\\xd7\\xd3\\xf1\\xe2\\xe2\\xd7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-02-13T00:00:00", "modifydate": "2006-02-13T14:02:05", "lines": 177, "newlines": 177, "modlines": 0, "user": "PL1SSP"}, "text": "//JOBI  JOB 111-1111,'SSP PL/1',MSGLEVEL=1\n//EXPN EXEC PL1LFCLG,PARM.PL1L='NOLIST,NOATR,NOXREF,CHAR48'\n//PL1L.SYSIN  DD  *\n EXPN..                                                                 EXPN  10\n /*********************************************************************/EXPN  20\n /*                                                                   */EXPN  30\n /*      TO READ THE PROBLEM PARAMETER CARD AND A TIME SERIES, CALL   */EXPN  40\n /*      THE PROCEDURE EXSM TO SMOOTH THE TIME SERIES, AND PRINT THE  */EXPN  50\n /*      RESULT.                                                      */EXPN  60\n /*                                                                   */EXPN  70\n /*********************************************************************/EXPN  80\n    PROCEDURE OPTIONS (MAIN),.                                          EXPN  90\n    DECLARE                                                             EXPN 100\n         (A,B,C,AL) FLOAT BINARY,                                       EXPN 110\n         (I,NX)                                                         EXPN 120\n         FIXED BINARY,                                                  EXPN 130\n         ERROR EXTERNAL CHARACTER(1),                                   EXPN 140\n         CH  CHARACTER (80),                                            EXPN 150\n         PR1 CHARACTER (6),.                                            EXPN 160\n /*                                                                   */EXPN 170\n    ON ENDFILE (SYSIN) GO TO EXIT,.                                     EXPN 180\n S100..                                                                 EXPN 190\n    GET EDIT (CH) (A(80)),.            /* READ PROBLEM PARAMETER CARD */EXPN 200\n    GET STRING (CH) EDIT (PR1,NX,AL,A,B,C)                              EXPN 210\n         (A(6),F(4),F(5,0),3 F(10,0)),.                                 EXPN 220\n /*                                                                   */EXPN 230\n /*      PR1.....PROBLEM NUMBER (MAY BE ALPHAMERIC)                   */EXPN 240\n /*      NX......NUMBER OF DATA POINTS IN TIME SERIES                 */EXPN 250\n /*      AL......SMOOTHING CONSTANT                                   */EXPN 260\n /*      A,B,C...COEFFICIENTS OF THE PREDICTION EQUATION              */EXPN 270\n /*                                                                   */EXPN 280\n    PUT EDIT ('TRIPLE EXPONENTIAL SMOOTHING.....',PR1) (PAGE,SKIP(4),   EXPN 290\n         COLUMN(10),A,A),.                                              EXPN 300\n    PUT EDIT ('NUMBER OF DATA POINTS',NX) (SKIP(2),COLUMN(10),A,F(6)),. EXPN 310\n    PUT EDIT ('SMOOTHING CONSTANT',AL) (SKIP,COLUMN(10),A,F(9,3)),.     EXPN 320\n /*                                                                   */EXPN 330\n /*      PRINT ORIGINAL COEFFICIENTS                                  */EXPN 340\n /*                                                                   */EXPN 350\n    PUT EDIT ('COEFFICIENTS','A','B','C') (SKIP(2),COLUMN(10),A,X(9),A, EXPN 360\n         X(14),A,X(14),A),.                                             EXPN 370\n    PUT EDIT ('ORIGINAL',A,B,C) (SKIP(2),COLUMN(10),A,F(19,5),          EXPN 380\n         2 F(15,5)),.                                                   EXPN 390\n ONE..                                                                  EXPN 400\n    BEGIN,.                                                             EXPN 410\n    DECLARE                                                             EXPN 420\n         (X(NX),S(NX)) FLOAT BINARY,.                                   EXPN 430\n    CALL DAT3 (NX,X),.                 /* READ TIME SERIES DATA       */EXPN 440\n    CALL EXSM (X,NX,AL,A,B,C,S),.                                       EXPN 450\n    IF ERROR NE '0'                                                     EXPN 460\n    THEN DO,.                                                           EXPN 470\n         PUT EDIT ('IN ROUTINE EXSM ERROR CODE = ',ERROR)               EXPN 480\n              (SKIP(2),COLUMN(10),A,A(1)),.                             EXPN 490\n         GO TO S100,.                                                   EXPN 500\n         END,.                                                          EXPN 510\n /*                                                                   */EXPN 520\n /*      PRINT UPDATED COEFFICIENTS                                   */EXPN 530\n /*                                                                   */EXPN 540\n    PUT EDIT ('UPDATE',A,B,C) (SKIP(2),COLUMN(10),A,F(20,5),            EXPN 550\n         2 F(15,5)),.                                                   EXPN 560\n /*                                                                   */EXPN 570\n /*      PRINT INPUT AND SMOOTHED DATA                                */EXPN 580\n /*                                                                   */EXPN 590\n    PUT EDIT ('SMOOTHED DATA','INPUT DATA','(FORECAST)')                EXPN 600\n         (SKIP(3),COLUMN(39),A,SKIP,COLUMN(17),A,X(13),A),.             EXPN 610\n    PUT EDIT ((X(I),S(I) DO I= 1 TO NX)) (SKIP,COLUMN(10),F(17,5),      EXPN 620\n         X(8),F(15,5)),.                                                EXPN 630\n    END,.                                                               EXPN 640\n    GO TO S100,.                                                        EXPN 650\n EXIT..                                                                 EXPN 660\n    PUT FILE (SYSPRINT) EDIT ('END OF SAMPLE PROGRAM')                  EXPN 670\n         (SKIP(5),COLUMN(10),A),.                                       EXPN 680\n    END,.                              /*END OF PROCEDURE EXPN        */EXPN 690\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n EXSM..                                                                 EXSM  10\n /*********************************************************************/EXSM  20\n /*                                                                   */EXSM  30\n /*      TO FIND THE TRIPLE EXPONENTIAL SMOOTHED SERIES S OF A GIVEN  */EXSM  40\n /*      SERIES X.                                                    */EXSM  50\n /*                                                                   */EXSM  60\n /*********************************************************************/EXSM  70\n    PROCEDURE (X,NX,AL,A,B,C,S),.                                       EXSM  80\n    DECLARE                                                             EXSM  90\n         (X(*),S(*),AL,A,B,C,BE,ALCUB,BECUB,DIF)                        EXSM 100\n         BINARY FLOAT,                                                  EXSM 110\n         ERROR EXTERNAL CHARACTER(1),                                   EXSM 120\n         (I,NX)                                                         EXSM 130\n         BINARY FIXED,.                                                 EXSM 140\n /*                                                                   */EXSM 150\n    ERROR='0',.                                                         EXSM 160\n /*                                                                   */EXSM 170\n /*      TEST THE VALUE OF ALPHA                                      */EXSM 180\n /*                                                                   */EXSM 190\n    IF AL LE 0 OR AL GE 1                                               EXSM 200\n    THEN DO,.                                                           EXSM 210\n         ERROR='1',.                                                    EXSM 220\n         GO TO FIN,.                                                    EXSM 230\n         END,.                                                          EXSM 240\n    IF NX LT 3                                                          EXSM 250\n    THEN DO,.                                                           EXSM 260\n         ERROR='2',.                                                    EXSM 270\n         GO TO FIN,.                                                    EXSM 280\n         END,.                                                          EXSM 290\n /*      IF A=B=C=0.0, GENERATE INITIAL VALUES OF A, B, AND C         */EXSM 300\n /*                                                                   */EXSM 310\n         IF A = 0.0 AND B = 0.0 AND C = 0.0                             EXSM 320\n    THEN DO,.                                                           EXSM 330\n         C    =X(1)-2.0*X(2)+X(3),.                                     EXSM 340\n         B    =X(2)-X(1)-1.5*C,.                                        EXSM 350\n         A    =X(1)-B-0.5*C,.                                           EXSM 360\n         END,.                                                          EXSM 370\n    BE   =1.0-AL,.                                                      EXSM 380\n    BECUB=BE**3,.                                                       EXSM 390\n    ALCUB=AL**3,.                                                       EXSM 400\n /*                                                                   */EXSM 410\n /*      DO THE FOLLOWING FOR I = 1 TO NX                             */EXSM 420\n /*                                                                   */EXSM 430\n         DO I = 1 TO NX,.                                               EXSM 440\n         S(I) =A+B+0.5*C,.             /* FIND S(I) FOR 1 PERIOD AHEAD*/EXSM 450\n /*                                                                   */EXSM 460\n /*      UPDATE COEFFICIENTS A, B, AND C                              */EXSM 470\n /*                                                                   */EXSM 480\n         DIF  =S(I)-X(I),.                                              EXSM 490\n         A    =X(I)+BECUB*DIF,.                                         EXSM 500\n         B    =B+C-1.5*AL*AL*(2.0-AL)*DIF,.                             EXSM 510\n         C    =C-ALCUB*DIF,.                                            EXSM 520\n         END,.                                                          EXSM 530\n FIN..                                                                  EXSM 540\n    RETURN,.                                                            EXSM 550\n    END,.                              /*END OF PROCEDURE EXSM        */EXSM 560\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n DAT3..                                                                 DAT3  10\n /*********************************************************************/DAT3  20\n /*                                                                   */DAT3  30\n /*      TO READ A VECTOR OF FLOATING POINT DATA.                     */DAT3  40\n /*                                                                   */DAT3  50\n /*********************************************************************/DAT3  60\n    PROCEDURE (M,D),.                                                   DAT3  70\n    DECLARE                                                             DAT3  80\n         CH CHARACTER(80),                                              DAT3  90\n         (I,M,N,N1,N2)                                                  DAT3 100\n         FIXED BINARY,                                                  DAT3 110\n         D(M) FLOAT BINARY,.                                            DAT3 120\n /*                                                                   */DAT3 130\n /*      N EQUAL THE NUMBER OF DATA POINTS PER 80 COLUMNS OF A DATA   */DAT3 140\n /*      CARD.                                                        */DAT3 150\n /*                                                                   */DAT3 160\n    ON ENDFILE (SYSIN)                                                  DAT3 170\n    GO TO EXIT,.                                                        DAT3 180\n    N    =12,.                                                          DAT3 190\n    N1   =1,.                                                           DAT3 200\n    N2   =N,.                                                           DAT3 210\n S10..                                                                  DAT3 220\n    IF M LE N2                                                          DAT3 230\n    THEN N2   =M,.                                                      DAT3 240\n    GET EDIT (CH) (A(80)),.                                             DAT3 250\n    GET STRING (CH) EDIT ((D(I) DO I= N1 TO N2)) ((N)F(6,0)),.          DAT3 260\n    N1   =N2+1,.                                                        DAT3 270\n    IF N1 LE M                                                          DAT3 280\n    THEN DO,.                                                           DAT3 290\n         N2   =N2+N,.                                                   DAT3 300\n         GO TO S10,.                                                    DAT3 310\n         END,.                                                          DAT3 320\n    REVERT ENDFILE (SYSIN),.                                            DAT3 330\n    RETURN,.                                                            DAT3 340\n EXIT..                                                                 DAT3 350\n    PUT FILE (SYSPRINT) EDIT ('ERROR  INSUFFICIENT DATA')               DAT3 360\n         (SKIP(1),COLUMN(10),A),.                                       DAT3 370\n    STOP,.                                                              DAT3 380\n    END,.                              /*END OF PROCEDURE DAT3        */DAT3 390\n/*\n//GO.SYSIN  DD  *\nSAMPLE  38   .1       0.0       0.0       0.0                                 10\n   430   426   422   419   414   413   412   409   411   417   422   430      20\n   438   441   447   455   461   453   448   449   454   463   470   472      30\n   476   481   483   487   491   492   485   486   482   479   479   476      40\n   472   470                                                                  50\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FILE11": {"ttr": 7172, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x10\\x01\\x06\\x04O\\x01\\x06\\x04O\\x14\\x02\\x01\\x02\\x01\\x02\\x00\\x00\\xd7\\xd3\\xf1\\xe2\\xe2\\xd7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-02-13T00:00:00", "modifydate": "2006-02-13T14:02:10", "lines": 258, "newlines": 258, "modlines": 0, "user": "PL1SSP"}, "text": "//JOBJ  JOB 111-1111,'SSP PL/1',MSGLEVEL=1\n//COST EXEC PL1LFCLG,PARM.PL1L='NOLIST,NOATR,NOXREF,CHAR48'\n//PL1L.SYSIN  DD  *\n COST..                                                                 COST  10\n /*********************************************************************/COST  20\n /*                                                                   */COST  30\n /*                     ALLOCATION OF OVERHEAD COSTS                  */COST  40\n /*                                                                   */COST  50\n /*********************************************************************/COST  60\n    PROCEDURE OPTIONS(MAIN),.                                           COST  70\n    DECLARE                                                             COST  80\n         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */COST  90\n         (CNR,CHNR) CHARACTER(10),                                      COST 100\n         CH CHARACTER(1),                                               COST 110\n         (I,IND,K,L,M,N)                                                COST 130\n         BINARY FIXED,.                                                 COST 140\n    ON ENDFILE (SYSIN) GO TO BACK,.                                     COST 150\n START..                                                                COST 160\n    GET EDIT                                                            COST 180\n         (CNR,N,M,CH)                  /*READ NUMBER OF COLUMNS, ROWS */COST 190\n         (A(10),F(5),F(5),X(59),A(1)),.                                 COST 200\n    PUT EDIT                           /*WRITE HEADING                */COST 210\n         ('********************************************',               COST 220\n         '*                                          *',                COST 230\n         '*       ALLOCATION OF OVERHEAD COSTS       *',                COST 240\n         '*                                          *',                COST 250\n         '********************************************')                COST 260\n         (PAGE,SKIP(2),(5)(X(30),A,SKIP)),.                             COST 270\n    PUT EDIT                                                            COST 280\n         ('PROBLEM =',CNR,'NUMBER OF AUXILIARY  DEPARTMENTS =',N,       COST 290\n         'NUMBER OF PRODUCTIVE DEPARTMENTS =',M)                        COST 300\n         (SKIP(2),X(30),A,A,(2)(SKIP(2),X(30),A,F(5))),.                COST 310\n         BEGIN,.                                                        COST 320\n         DECLARE                                                        COST 330\n              (R(N,N),S(N,1),                                           COST 340\n              W(N) DEFINED S(1SUB,1))                                   COST 350\n              BINARY FLOAT,            /*SINGLE PRECISION VERSION  /*S*/COST 360\n  /*          BINARY FLOAT(53),        /*DOUBLE PRECISION VERSION  /*D*/COST 370\n              IPER(N)                                                   COST 380\n              BINARY FIXED,.                                            COST 390\n         IND  =1,.                     /*CALCULATE VALUES FOR INPUT   */COST 400\n         L    =N,.                     /*FORMAT LIST                  */COST 410\n              DO WHILE (L GT 6),.                                       COST 420\n              L    =L-6,.                                               COST 430\n              IND  =IND+1,.            /*IND MEANS THE NUMBER OF CARDS*/COST 440\n              END,.                    /*FOR ONE ROW OF R             */COST 450\n         L    =(6-L)*10,.              /*L SPECIFIES HORIZONT. SPACING*/COST 460\n              DO I =1 TO N,.           /*EXECUTE LOOP OVER ROWS OF R  */COST 470\n              GET EDIT                 /*READ I-TH ROW OF MATRIX R    */COST 480\n                   (CHNR,W)                                             COST 490\n                   (A(10),(IND)((6)F(10,8),X(20))),.                    COST 500\n              GET EDIT                 /*HORIZONTAL SPACING           */COST 510\n                   (CNR)                                                COST 520\n                   (X(L),A(10)),.                                       COST 530\n              W(I) =W(I)-1,.           /*COMPUTE  TRANSPOSED (U-R) ,  */COST 540\n              R(*,I)=-W,.              /*WHERE U MEANS UNIT MATRIX    */COST 550\n              END,.                                                     COST 560\n         CALL MFG(R,IPER,N),.          /* CALL FACTORIZATION PROCEDURE*/COST 570\n         PUT EDIT                      /*WRITE ERROR INDICATOR OF MFG */COST 580\n              ('RESULTANT ERROR INDICATOR WITHIN PROCEDURE MFG',        COST 590\n              'ERROR =',ERROR)(SKIP(3),X(10),A,X(10),A,A),.             COST 600\n              DO I =1 TO M,.           /*EXECUTE LOOP OVER ROWS OF S  */COST 610\n              GET EDIT                 /*READ ANY ROW OF MATRIX S     */COST 620\n                   (CHNR,W)                                             COST 630\n                   (A(10),(IND)((6)F(10,8),X(20))),.                    COST 640\n              GET EDIT                                                  COST 650\n                   (CNR)                                                COST 660\n                   (X(L),A(10)),.                                       COST 670\n              IF ERROR NE 'S'                                           COST 680\n              THEN DO,.                /*PERFORM MATRIX DIVISION      */COST 690\n                   CALL MDLG(R,S,IPER,N,1B,'0'),.                       COST 700\n                   PUT EDIT            /*WRITE ALLOCATION ROW         */COST 710\n                        (CHNR,W)                                        COST 720\n                        (SKIP(2),X(3),A,X(5),(IND)((6)E(17,8),X(18))),. COST 730\n                   END,.                                                COST 740\n              END,.                                                     COST 750\n         END,.                                                          COST 760\n    GO TO START,.                                                       COST 770\n BACK..                                                                 COST 780\n    PUT FILE (SYSPRINT) EDIT ('END OF SAMPLE PROGRAM')                  COST 790\n         (SKIP(5),COLUMN(10),A),.                                       COST 800\n    END,.                              /*END OF PROCEDURE COST        */COST 810\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n MFG..                                                                  MFG   10\n /*********************************************************************/MFG   20\n /*                                                                   */MFG   30\n /*      FACTORIZE A GENERAL NON-SINGULAR MATRIX A INTO A PRODUCT     */MFG   40\n /*      OF A LOWER TRIANGULAR MATRIX L AND AN UPPER TRIANGULAR       */MFG   50\n /*      MATRIX U OVERWRITTEN ON A, OMITTING UNIT DIAGONAL OF U       */MFG   60\n /*                                                                   */MFG   70\n /*********************************************************************/MFG   80\n    PROCEDURE(A,IPER,N),.                                               MFG   90\n    DECLARE                                                             MFG  100\n         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MFG  110\n         EPS BINARY FLOAT,                                              MFG  120\n         W BINARY FLOAT(53),                                            MFG  130\n         (A(*,*),H,R)                                                   MFG  140\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MFG  150\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MFG  160\n         (IPER(*),I,IND,J,K,L,LN,M,N)                                   MFG  170\n         BINARY FIXED,.                                                 MFG  180\n    LN   =N,.                                                           MFG  190\n    IF LN LE 0                         /*TEST SPECIFIED DIMENSION     */MFG  200\n    THEN DO,.                                                           MFG  210\n         ERROR='P',.                   /*P MEANS WRONG PARAMETER      */MFG  220\n         GO TO RETURN,.                                                 MFG  230\n         END,.                                                          MFG  240\n    ERROR='0',.                        /*PRESET ERROR INDICATOR       */MFG  250\n    EPS  =1.E-7,.                      /*SINGLE PRECISION VERSION  /*S*/MFG  254\n  /*EPS  =1.E-16,.                     /*DOUBLE PRECISION VERSION  /*D*/MFG  255\n                                       /*******************************/MFG  260\n         DO L =1 TO LN,.               /*CALCULATE SCALING FACTORS    */MFG  270\n         R    =0,.                     /*******************************/MFG  280\n              DO J =1 TO LN,.          /*COMPUTE ABSOLUTELY GREATEST  */MFG  290\n              H    =ABS(A(L,J)),.      /*ELEMENT R IN EACH ROW OF A   */MFG  300\n              IF H GT R                                                 MFG  310\n              THEN R    =H,.                                            MFG  320\n              END,.                                                     MFG  330\n         IF R = 0                      /*TEST FOR ZEROS IN ANY ROW    */MFG  340\n         THEN DO,.                                                      MFG  350\n              ERROR='S',.              /*A ROW IN GIVEN MATRIX A      */MFG  360\n              GO TO RETURN,.           /*IS ZERO                      */MFG  370\n              END,.                                                     MFG  380\n                                       /*STORE R IN AN INTEGER VECTOR */MFG  390\n         ELSE UNSPEC(IPER(L))=UNSPEC(R),.                               MFG  400\n         END,.                         /*******************************/MFG  410\n                                       /*GAUSS  ELIMINATION           */MFG  420\n         DO L =1 TO LN,.               /*******************************/MFG  430\n         UNSPEC(M)='1'B,.              /*PRESET M AS SMALLEST INTEGER */MFG  440\n              DO J =L TO LN,.          /*MODIFY COLUMN, SEARCH PIVOT  */MFG  450\n              W,H  =A(J,L),.           /*SAVE ELEMENT                 */MFG  460\n                   DO K =1 TO L-1,.    /*COMPUTE SCALAR PRODUCTS      */MFG  470\n                   W    =W-MULTIPLY(A(J,K),A(K,L),53),.                 MFG  480\n                   END,.                                                MFG  490\n              A(J,L)=W,.               /*UPDATE ELEMENT               */MFG  500\n              W    =ABS(W),.                                            MFG  510\n              UNSPEC(I)=UNSPEC(W),.                                     MFG  520\n              I    =I-IPER(J),.        /*DIFFERENCE OF EXPONENTS      */MFG  530\n              IF I GT M                /*SEARCH FOR LARGEST DIFFERENCE*/MFG  540\n              THEN DO,.                                                 MFG  550\n                   IND  =J,.           /*STORE ROW-INDEX              */MFG  560\n                   M    =I,.                                            MFG  570\n                   R    =H,.           /*SAVE ORIGINAL ELEMENT FOR    */MFG  580\n                   END,.               /*TEST ON LOSS OF SIGNIFICANCE */MFG  590\n              END,.                                                     MFG  600\n         IF IND GT L                   /*IS INTERCHANGE NECESSARY     */MFG  610\n         THEN DO,.                                                      MFG  620\n              IPER(IND)=IPER(L),.      /*RESTORE PERMUTATION VECTOR   */MFG  630\n                   DO J =1 TO LN,.     /*INTERCHANGE ROWS OF MATRIX A */MFG  640\n                   H    =A(L,J),.                                       MFG  650\n                   A(L,J)=A(IND,J),.                                    MFG  660\n                   A(IND,J)=H,.                                         MFG  670\n                   END,.                                                MFG  680\n              END,.                                                     MFG  690\n         IPER(L)=IND,.                 /*STORE ROW NUMBER             */MFG  700\n         H    =A(L,L),.                /*H CONTAINS THE PIVOT         */MFG  710\n         IF ABS(H) LE ABS(EPS*R)       /*TEST PIVOT ELEMENT FOR LOSS  */MFG  720\n         THEN IF H NE 0                /*OF SIGNIFICANCE AND FOR ZERO */MFG  730\n         THEN ERROR='W',.              /*W MEANS WARNING              */MFG  740\n         ELSE IF R = 0                 /*IS ORIGINAL ELEMENT ZERO     */MFG  750\n         THEN DO,.                                                      MFG  760\n              ERROR='S',.              /*CALCULATED PIVOT AND THE     */MFG  770\n              GO TO RETURN,.           /*ORIGINAL ELEMENT ARE ZERO    */MFG  780\n              END,.                                                     MFG  790\n         ELSE DO ,.                    /*CORRECT ZERO PIVOT           */MFG  800\n              H    =EPS*R,.                                             MFG  810\n              ERROR='C',.              /*WARNING AND CORRECTION       */MFG  830\n              END,.                                                     MFG  840\n              DO J =L+1 TO LN,.        /*EXECUTE LOOP OVER L-TH ROW   */MFG  850\n              W    =0,.                                                 MFG  860\n                   DO K =1 TO L-1,.    /*CALCULATE SCALAR PRODUCTS    */MFG  870\n                   W    =W+MULTIPLY(A(L,K),A(K,J),53),.                 MFG  880\n                   END,.                                                MFG  890\n              A(L,J)=(A(L,J)-W)/H,.    /*COMPUTE NEW ELEMENT          */MFG  900\n              END,.                                                     MFG  910\n         END,.                                                          MFG  920\n RETURN..                                                               MFG  930\n    END,.                              /*END OF PROCEDURE MFG         */MFG  940\n*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');\n MDLG..                                                                 MDLG  10\n /*********************************************************************/MDLG  20\n /*                                                                   */MDLG  30\n /*      FOR AN EQUATION SYSTEM  A*X=R  WITH GENERAL NON-SINGULAR     */MDLG  40\n /*      MATRIX  A=L*U  CALCULATE OPTIONALLY                          */MDLG  50\n /*           SOLUTION X                                              */MDLG  60\n /*           INVERSE(L) * R                                          */MDLG  70\n /*           INVERSE(U) * R                                          */MDLG  80\n /*      FOR GIVEN TRIANGULAR FACTORS L, U AND RIGHT HAND SIDE R      */MDLG  90\n /*                                                                   */MDLG 100\n /*********************************************************************/MDLG 110\n    PROCEDURE(A,R,IPER,N,M,OPT),.                                       MDLG 120\n    DECLARE                                                             MDLG 130\n         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MDLG 140\n         OPT CHARACTER(1),             /*OPTION PARAMETER             */MDLG 150\n         SUM BINARY FLOAT(53),                                          MDLG 160\n         (A(*,*),R(*,*),H)                                              MDLG 170\n         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MDLG 180\n  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MDLG 190\n         (IPER(*),I,IS,J,                                               MDLG 200\n         K,LM,LN,M,N)                                                   MDLG 210\n         BINARY FIXED,.                                                 MDLG 220\n    LM   =M,.                                                           MDLG 230\n    LN   =N,.                                                           MDLG 240\n    ERROR='P',.                        /*P MEANS WRONG INPUT          */MDLG 250\n    IF LN LE 0                         /*TEST SPECIFIED PARAMETER N   */MDLG 260\n    THEN GO TO RETURN,.                                                 MDLG 270\n    IF LM LE 0                         /*TEST SPECIFIED PARAMETER M   */MDLG 280\n    THEN GO TO RETURN,.                                                 MDLG 290\n    ERROR='0',.                        /*PRESET ERROR INDICATOR       */MDLG 300\n    IF OPT= '2'                        /*SHOULD R BE DIVIDED BY U ONLY*/MDLG 310\n    THEN GO TO UPPER,.                 /*******************************/MDLG 320\n                                       /*LOOP FOR DIVISION BY LOWER   */MDLG 330\n         DO I =1 TO LN,.               /*TRIANGULAR MATRIX L          */MDLG 340\n         H    =A(I,I),.                /*******************************/MDLG 350\n         IF H = 0                      /*IS ANY DIAGONAL ELEMENT ZERO */MDLG 360\n         THEN DO,.                                                      MDLG 370\n              ERROR='S',.              /*S MEANS ANY PIVOT IS ZERO    */MDLG 380\n              GO TO RETURN,.                                            MDLG 390\n              END,.                    /*FOR PERMUTATION OF ROWS OF   */MDLG 400\n         IS   =IPER(I),.               /*RIGHT HAND SIDE ARRAY R      */MDLG 410\n              DO K =1 TO LM,.          /*LOOP OVER THE M COLUMNS OF R */MDLG 420\n              SUM  =R(IS,K),.          /*INITIALIZE SUM               */MDLG 430\n              R(IS,K)=R(I,K),.         /*RESTORE ROWS OF ARRAY R      */MDLG 440\n                   DO J =1 TO I-1,.    /*COMPUTE SCALAR PRODUCT SUM   */MDLG 450\n                   SUM  =SUM-MULTIPLY(A(I,J),R(J,K),53),.               MDLG 460\n                   END,.                                                MDLG 470\n              R(I,K)=SUM/H,.           /*DIVIDE SUM BY DIAGONAL TERM  */MDLG 480\n              END,.                    /*AND STORE RESULT             */MDLG 490\n         END,.                                                          MDLG 500\n    IF OPT= '1'                        /*TEST END OF OPERATION        */MDLG 510\n    THEN GO TO RETURN,.                /*******************************/MDLG 520\n                                       /*LOOP FOR DIVISION BY UPPER   */MDLG 530\n UPPER..                               /*TRIANGULAR MATIX U           */MDLG 540\n         DO I =LN-1 TO 1 BY -1,.       /*******************************/MDLG 550\n              DO K =1 TO LM,.          /*LOOP OVER THE M COLUMNS OF R */MDLG 560\n              SUM  =R(I,K),.           /*INITIALIZE SUM               */MDLG 570\n                   DO J =I+1 TO LN,.   /*COMPUTE SCALAR PRODUCT SUM   */MDLG 580\n                   SUM  =SUM-MULTIPLY(A(I,J),R(J,K),53),.               MDLG 590\n                   END,.                                                MDLG 600\n              R(I,K)=SUM,.             /*STORE RESULT                 */MDLG 610\n              END,.                                                     MDLG 620\n         END,.                                                          MDLG 630\n RETURN..                                                               MDLG 640\n    END,.                              /*END OF PROCEDURE MDLG        */MDLG 650\n/*\n//GO.SYSIN  DD  *\n HILBERT      6    4                                                          10\nAA01      0.341417430.247540110.207916310.185625310.171199560.16104686        20\nAA02      0.170708710.165026720.155937250.148500200.142666220.13804018        30\nAA03      0.113805770.123770050.124749770.123750150.122285360.12078517        40\nAA04      0.085354320.099016010.103958120.106071590.106999690.10736459        50\nAA05      0.068283430.082513330.089106970.092812650.095110830.09662812        60\nAA06      0.056902890.070725730.077968590.082500100.085599720.08784371        70\nAA01      0.048773910.061885020.069305410.074250100.077817910.08052343        80\nAA02      0.042677180.055008910.062374890.067500050.071333110.07432931        90\nAA03      0.037935260.049508000.056704450.061875090.065845960.06902003       100\nAA04      0.034141730.045007280.051979080.057115480.061142670.06441873       110\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FILE12": {"ttr": 7177, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00'\\x01\\x06\\x04O\\x01\\x06\\x04O\\x14\\x02\\x00\\x01\\x00\\x01\\x00\\x00\\xd7\\xd3\\xf1\\xe2\\xe2\\xd7@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-02-13T00:00:00", "modifydate": "2006-02-13T14:02:27", "lines": 1, "newlines": 1, "modlines": 0, "user": "PL1SSP"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "FILE13": {"ttr": 7179, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x001\\x01\\x06\\x04O\\x01\\x06\\x04O\\x14\\x02\\x00\\x01\\x00\\x01\\x00\\x00\\xd7\\xd3\\xf1\\xe2\\xe2\\xd7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-02-13T00:00:00", "modifydate": "2006-02-13T14:02:31", "lines": 1, "newlines": 1, "modlines": 0, "user": "PL1SSP"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT783/FILE783.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT783", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}