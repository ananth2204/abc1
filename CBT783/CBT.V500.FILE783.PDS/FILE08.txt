//JOBG  JOB 111-1111,'SSP PL/1',MSGLEVEL=1
//FACT EXEC PL1LFCLG,PARM.PL1L='NOLIST,NOATR,NOXREF,CHAR48'
//PL1L.SYSIN  DD  *
 FACT..                                                                 FACT  10
 /*********************************************************************/FACT  20
 /*                                                                   */FACT  30
 /*      TO READ THE PROBLEM PARAMETER CARD, CALL FIVE PROCEDURES TO  */FACT  40
 /*      PERFORM A PRINCIPAL COMPONENT SOLUTION AND THE VARIMAX ROTA- */FACT  50
 /*      TION OF A FACTOR MATRIX, AND PRINT THE RESULTS.              */FACT  60
 /*                                                                   */FACT  70
 /*********************************************************************/FACT  80
    PROCEDURE OPTIONS (MAIN),.                                          FACT  90
    DECLARE                                                             FACT 100
         (I,IO,J,K,M,MV,N,NC,NW)                                        FACT 110
         FIXED BINARY,                                                  FACT 120
         ERROR EXTERNAL CHARACTER(1),                                   FACT 130
         (NV,NCARD) EXTERNAL,                                           FACT 140
         CON                                                            FACT 150
         FLOAT BINARY,                                                  FACT 160
         PR1 CHARACTER (6),                                             FACT 170
         CH  CHARACTER (80),.                                           FACT 180
 /*                                                                   */FACT 190
    ON ENDFILE (SYSIN) GO TO EXIT,.                                     FACT 200
 S100..                                                                 FACT 210
    GET EDIT (CH) (A(80)),.                                             FACT 220
    GET STRING (CH) EDIT (PR1,N,M,CON,NCARD) (A(6),F(5),F(2),F(6,0),    FACT 230
         F(2)),.                                                        FACT 240
 /*                                                                   */FACT 250
 /*      PR1........PROBLEM NUMBER (MAY BE ALPHAMERIC )               */FACT 260
 /*      N..........NUMBER OF CASES                                   */FACT 270
 /*      M..........NUMBER OF VARIABLES                               */FACT 280
 /*      CON........CONSTANT USED TO DECIDE HOW MANY EIGENVALUES      */FACT 290
 /*                 TO RETAIN                                         */FACT 300
 /*      NCARD......NUMBER OF DATA CARDS PER OBSERVATION              */FACT 310
 /*                                                                   */FACT 320
    NCARD=NCARD*80,.                                                    FACT 330
 ONE..                                                                  FACT 340
    BEGIN,.                                                             FACT 350
    DECLARE                                                             FACT 360
         (R(M,M),V(M,M),B(M),D(M),S(M),T(M),XBAR(M),TV(51),X(1,1))      FACT 370
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/FACT 380
  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/FACT 390
    PUT EDIT ('PRINCIPAL COMPONENT ANALYSIS.....',PR1, 'NO. OF CASES',  FACT 400
         N,'NO. OF VARIABLES',M)                                        FACT 410
         (PAGE,SKIP(4),COLUMN(10),A,A,SKIP(2),COLUMN(13),A,X(4),F(6)    FACT 420
         ,SKIP(1),COLUMN(13),A,F(6),SKIP),.                             FACT 430
    IO   =0,.                                                           FACT 440
    X    =0,.                                                           FACT 450
    NV   =0,.                                                           FACT 460
    CALL CORR (N,M,IO,X,XBAR,S,V,R,D),.                                 FACT 470
    IF ERROR NE '0'                                                     FACT 480
    THEN DO,.                                                           FACT 490
         PUT EDIT ('IN ROUTINE CORR ERROR CODE = ',ERROR)               FACT 500
              (SKIP(2),COLUMN(10),A,A(1)),.                             FACT 510
         GO TO S100,.                                                   FACT 520
         END,.                                                          FACT 530
    PUT EDIT ('MEANS') (SKIP(2),COLUMN(10),A),.                         FACT 540
    PUT EDIT ((XBAR(J) DO J= 1 TO M)) (SKIP,COLUMN(10),(7)F(15,5)),.    FACT 550
 /*                                                                   */FACT 560
 /*      PRINT MEANS AND STANDARD DEVIATIONS                          */FACT 570
 /*                                                                   */FACT 580
    PUT EDIT ('STANDARD DEVIATIONS') (SKIP(2),COLUMN(10),A),.           FACT 590
    PUT EDIT ((S(J) DO J= 1 TO M)) (SKIP,COLUMN(10),(7)F(15,5)),.       FACT 600
 /*                                                                   */FACT 610
 /*      PRINT CORRELATION COEFFICIENTS                               */FACT 620
 /*                                                                   */FACT 630
    PUT EDIT ('CORRELATION COEFFICIENTS') (SKIP(2),COLUMN(10),A),.      FACT 640
         DO I = 1 TO M,.                                                FACT 650
         PUT EDIT ('ROW',I) (SKIP(2),COLUMN(10),A,F(3)),.               FACT 660
         PUT EDIT ((R(I,J) DO J= 1 TO M)) (SKIP,COLUMN(10),9 F(12,5)),. FACT 670
         END,.                                                          FACT 680
    MV   =0,.                                                           FACT 690
    CALL MSDU (R,V,M,MV),.                                              FACT 700
    IF ERROR NE '0'                                                     FACT 710
    THEN DO,.                                                           FACT 720
         PUT EDIT ('IN ROUTINE MSDU ERROR CODE ',ERROR)                 FACT 730
              (SKIP(2),COLUMN(10),A,A(1)),.                             FACT 740
         GO TO S100,.                                                   FACT 750
         END,.                                                          FACT 760
    CALL TRAC (M,R,CON,K,D),.                                           FACT 770
    IF ERROR NE '0'                                                     FACT 780
    THEN DO,.                                                           FACT 790
         PUT EDIT ('IN ROUTINE TRAC ERROR CODE = ',ERROR)               FACT 800
              (SKIP(2),COLUMN(10),A,A(1)),.                             FACT 810
         GO TO S100,.                                                   FACT 820
         END,.                                                          FACT 830
         DO I = 1 TO K,.               /* PRINT EIGENVALUES           */FACT 840
         S(I) =R(I,I),.                                                 FACT 850
         END,.                                                          FACT 860
    PUT EDIT ('EIGENVALUES') (SKIP(3),COLUMN(10),A),.                   FACT 870
    PUT EDIT ((S(J) DO J= 1 TO K)) (SKIP,COLUMN(10),9 F(12,5)),.        FACT 880
 /*                                                                   */FACT 890
 /*      PRINT CUMULATIVE PERCENTAGE OF EIGENVALUES                   */FACT 900
 /*                                                                   */FACT 910
    PUT EDIT ('CUMULATIVE PERCENTAGE OF EIGENVALUES')                   FACT 920
         (SKIP(2),COLUMN(10),A),.                                       FACT 930
    PUT EDIT ((D(J) DO J= 1 TO K)) (SKIP,COLUMN(10),9 F(12,5)),.        FACT 940
 /*                                                                   */FACT 950
 /*      PRINT EIGENVECTORS AND FACTOR MATRIX                         */FACT 960
 /*                                                                   */FACT 970
    PUT EDIT ('EIGENVECTORS') (SKIP(3),COLUMN(10),A),.                  FACT 980
         DO J = 1 TO K,.                                                FACT 990
         PUT EDIT ('VECTOR',J) (SKIP(2),COLUMN(10),A,F(3)),.            FACT1000
         PUT EDIT ((V(I,J) DO I= 1 TO M)) (SKIP,COLUMN(10),9 F(12,5)),. FACT1010
         END,.                                                          FACT1020
    PUT EDIT ('FACTOR MATRIX (',K,' FACTORS)')                          FACT1030
         (SKIP(3),COLUMN(10),A,F(3),A),.                                FACT1040
    CALL LOAD (M,K,R,V),.                                               FACT1050
    IF ERROR NE '0'                                                     FACT1060
    THEN DO,.                                                           FACT1070
         PUT EDIT ('IN ROUTINE LOAD ERROR CODE = ',ERROR)               FACT1080
              (SKIP(2),COLUMN(10),A,A(1)),.                             FACT1090
         GO TO S100,.                                                   FACT1100
         END,.                                                          FACT1110
         DO I = 1 TO M,.                                                FACT1120
         PUT EDIT ('VARIABLE',I) (SKIP(2),COLUMN(10),A,F(3)),.          FACT1130
         PUT EDIT ((V(I,J) DO J= 1 TO K)) (SKIP,COLUMN(10),9 F(12,5)),. FACT1140
         END,.                                                          FACT1150
    CALL VRMX (M,K,V,NC,TV,B,T,D),.                                     FACT1160
    IF ERROR NE '0'                                                     FACT1170
    THEN DO,.                                                           FACT1180
         PUT EDIT ('IN ROUTINE VRMX ERROR CODE = ',ERROR)               FACT1190
              (SKIP(2),COLUMN(10),A,A(1)),.                             FACT1200
         GO TO S100,.                                                   FACT1210
         END,.                                                          FACT1220
    NW   =NC+1,.                       /* PRINT VARIANCES             */FACT1230
    PUT EDIT ('ITERATION','VARIANCES','  CYCLE') (SKIP(3),COLUMN(10),A, FACT1240
         X(7),A,SKIP,COLUMN(10),A),.                                    FACT1250
         DO I = 1 TO NW,.                                               FACT1260
         NC   =I-1,.                                                    FACT1270
         PUT EDIT (NC,TV(I)) (SKIP,COLUMN(10),F(5),F(20,6)),.           FACT1280
         END,.                                                          FACT1290
 /*                                                                   */FACT1300
 /*      PRINT ROTATED FACTOR MATRIX                                  */FACT1310
 /*                                                                   */FACT1320
    PUT EDIT ('ROTATED FACTOR MATRIX (',K,' FACTORS)')                  FACT1330
         (SKIP(3),COLUMN(10),A,F(3),A),.                                FACT1340
         DO I = 1 TO M,.                                                FACT1350
         PUT EDIT ('VARIABLE',I) (SKIP(2),COLUMN(10),A,F(3)),.          FACT1360
         PUT EDIT ((V(I,J) DO J= 1 TO K)) (SKIP,COLUMN(10),9 F(12,5)),. FACT1370
         END,.                                                          FACT1380
 /*                                                                   */FACT1390
 /*      PRINT COMMUNALITIES                                          */FACT1400
 /*                                                                   */FACT1410
    PUT EDIT ('CHECK ON COMMUNALITIES','VARIABLE','ORIGINAL','FINAL',   FACT1420
         'DIFFERENCE') (SKIP(3),COLUMN(10),A,SKIP(2),COLUMN(10),A,      FACT1430
         X(7),A,X(12),A,X(10),A),.                                      FACT1440
         DO I = 1 TO M,.                                                FACT1450
         PUT EDIT (I,B(I),T(I),D(I)) (SKIP,COLUMN(10),F(5),3 F(18,5)),. FACT1460
         END,.                                                          FACT1470
 S200..                                                                 FACT1480
    END,.                                                               FACT1490
    GO TO S100,.                                                        FACT1500
 EXIT..                                                                 FACT1510
    PUT FILE (SYSPRINT) EDIT ('END OF SAMPLE PROGRAM')                  FACT1520
         (SKIP(5),COLUMN(10),A),.                                       FACT1530
    END,.                              /*END OF PROCEDURE FACT        */FACT1540
*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');
 CORR..                                                                 CORR  10
 /*********************************************************************/CORR  20
 /*                                                                   */CORR  30
 /*      TO COMPUTE MEANS, STANDARD DEVIATIONS, SUMS OF CROSS-PRODUCTS*/CORR  40
 /*      OF DEVIATIONS, AND CORRELATION COEFFICIENTS.                 */CORR  50
 /*                                                                   */CORR  60
 /*********************************************************************/CORR  70
    PROCEDURE (N,M,IO,X,XBAR,STD,RX,R,B),.                              CORR  80
    DECLARE                                                             CORR  90
         ERROR EXTERNAL CHARACTER (1),                                  CORR 100
         (I,IO,J,K,KK,M,N)                                              CORR 110
         FIXED BINARY,                                                  CORR 120
         (X(*,*),D(M),FN,FKK)                                           CORR 130
         FLOAT BINARY,                                                  CORR 140
         (R(*,*),RX(*,*),XBAR(*),STD(*),B(*),T(M))                      CORR 150
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/CORR 160
  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/CORR 170
 /*                                                                   */CORR 180
    ERROR='0',.                                                         CORR 190
    IF N LE 0 OR M LE 0                /* THE NUMBER OF OBSERVATIONS  */CORR 200
    THEN DO,.                          /* OR THE NUMBER OF VARIABLES  */CORR 210
         ERROR='1',.                   /* ARE LESS THAN OR EQUAL TO   */CORR 220
         GO TO FIN,.                   /* ZERO.                       */CORR 230
         END,.                                                          CORR 240
    FN   =N,.                          /* INITIALIZATION              */CORR 250
    T    =0.0,.                                                         CORR 260
         DO I = 1 TO M,.                                                CORR 270
         B(I) =0.0,.                                                    CORR 280
              DO J = 1 TO M,.                                           CORR 290
              R(I,J)=0.0,.                                              CORR 300
              END,.                                                     CORR 310
         END,.                                                          CORR 320
    IF IO NE 0                                                          CORR 330
    THEN DO,.                                                           CORR 340
              DO J = 1 TO M,.          /* DATA IS ALREADY IN CORE     */CORR 350
                   DO I = 1 TO N,.                                      CORR 360
                   T(J) =T(J)+X(I,J),.                                  CORR 370
                   END,.                                                CORR 380
              XBAR(J)=T(J),.                                            CORR 390
              T(J) =T(J)/FN,.                                           CORR 400
              END,.                                                     CORR 410
              DO I = 1 TO N,.                                           CORR 420
                   DO J = 1 TO M,.                                      CORR 430
                   D(J) =X(I,J)-T(J),.                                  CORR 440
                   B(J) =B(J)+D(J),.                                    CORR 450
                   END,.                                                CORR 460
                   DO J = 1 TO M,.                                      CORR 470
                        DO K = J TO M,.                                 CORR 480
                        R(J,K)=R(J,K)+D(J)*D(K),.                       CORR 490
                        END,.                                           CORR 500
                   END,.                                                CORR 510
              END,.                                                     CORR 520
         GO TO CALC,.                                                   CORR 530
         END,.                                                          CORR 540
 /*                                                                   */CORR 550
 /*      READ OBSERVATIONS AND CALCULATE TEMPORARY MEANS              */CORR 560
 /*                                                                   */CORR 570
    IF N LT M                                                           CORR 580
    THEN KK   =N,.                                                      CORR 590
    ELSE KK   =M,.                                                      CORR 600
    FKK  =KK,.                                                          CORR 610
         DO I = 1 TO KK,.                                               CORR 620
         CALL DAT2 (M,D),.                                              CORR 630
              DO J = 1 TO M,.                                           CORR 640
              T(J) =T(J)+D(J),.                                         CORR 650
              RX(I,J)=D(J),.                                            CORR 660
              END,.                                                     CORR 670
         END,.                                                          CORR 680
         DO J = 1 TO M,.                                                CORR 690
         XBAR(J)=T(J),.                                                 CORR 700
         T(J) =T(J)/FKK,.                                               CORR 710
         END,.                                                          CORR 720
 /*                                                                   */CORR 730
 /*      CALCULATE SUMS OF CROSS-PRODUCTS OF DEVIATIONS FROM          */CORR 740
 /*      TEMPORARY MEANS FOR M OBSERVATIONS.                          */CORR 750
 /*                                                                   */CORR 760
         DO I = 1 TO KK,.                                               CORR 770
              DO J = 1 TO M,.                                           CORR 780
              D(J) =RX(I,J)-T(J),.                                      CORR 790
              END,.                                                     CORR 800
              DO J = 1 TO M,.                                           CORR 810
              B(J) =B(J)+D(J),.                                         CORR 820
                   DO K = J TO M,.                                      CORR 830
                   R(J,K)=R(J,K)+D(J)*D(K),.                            CORR 840
                   END,.                                                CORR 850
              END,.                                                     CORR 860
         END,.                                                          CORR 870
    IF N GT KK                                                          CORR 880
 /*                                                                   */CORR 890
 /*      READ THE REST OF THE OBSERVATIONS ONE AT A TIME, SUM THE     */CORR 900
 /*      OBSERVATIONS, AND CALCULATE SUMS OF CROSS PRODUCTS OF        */CORR 910
 /*      DEVIATIONS FROM TEMPORARY MEANS.                             */CORR 920
 /*                                                                   */CORR 930
    THEN DO,.                                                           CORR 940
              DO I = 1 TO N-KK,.                                        CORR 950
              CALL DAT2 (M,D),.                                         CORR 960
                   DO J = 1 TO M,.                                      CORR 970
                   XBAR(J)=XBAR(J)+D(J),.                               CORR 980
                   D(J) =D(J)-T(J),.                                    CORR 990
                   B(J) =B(J)+D(J),.                                    CORR1000
                   END,.                                                CORR1010
                   DO J = 1 TO M,.                                      CORR1020
                        DO K = J TO M,.                                 CORR1030
                        R(J,K)=R(J,K)+D(J)*D(K),.                       CORR1040
                        END,.                                           CORR1050
                   END,.                                                CORR1060
              END,.                                                     CORR1070
         END,.                                                          CORR1080
 /*                                                                   */CORR1090
 /*      ADJUST SUMS OF CROSS-PRODUCTS OF DEVIATIONS FROM TEMP. MEANS */CORR1100
 /*                                                                   */CORR1110
 CALC..                                                                 CORR1120
         DO I = 1 TO M,.                                                CORR1130
         XBAR(I)=XBAR(I)/FN,.          /* CALCULATE MEANS.            */CORR1140
              DO J = I TO M,.                                           CORR1150
              RX(I,J)=R(I,J)-B(I)*B(J)/FN,.                             CORR1160
              RX(J,I)=RX(I,J),.                                         CORR1170
              END,.                                                     CORR1180
         STD(I)=SQRT(ABS(RX(I,I))),.                                    CORR1190
 /*                                                                   */CORR1200
 /*    COPY THE DIAGONAL OF THE MATRIX OF SUMS OF CROSS PRODUCTS OF   */CORR1210
 /*    DEVIATIONS FROM THE MEANS.                                     */CORR1220
 /*                                                                   */CORR1230
         B(I) =RX(I,I),.                                                CORR1240
         END,.                                                          CORR1250
 /*                                                                   */CORR1260
 /*      COMPUTE CORRELATION COEFFICIENTS                             */CORR1270
 /*                                                                   */CORR1280
         DO J = 1 TO M,.                                                CORR1290
              DO K = J TO M,.                                           CORR1300
              FKK  =STD(J)*STD(K),.                                     CORR1310
              IF FKK= 0.0                                               CORR1320
              THEN DO,.                                                 CORR1330
                   ERROR='2',.         /* SOME VARIANCES ARE ZERO     */CORR1340
                   R(J,K)=0.0,.                                         CORR1350
                   END,.                                                CORR1360
              ELSE R(J,K)=RX(J,K)/FKK,.                                 CORR1370
              R(K,J)=R(J,K),.                                           CORR1380
              END,.                                                     CORR1390
         END,.                                                          CORR1400
 /*                                                                   */CORR1410
 /*      COMPUTE STANDARD DEVIATIONS                                  */CORR1420
 /*                                                                   */CORR1430
         IF N=1                                                         CORR1440
         THEN DO,.                                                      CORR1450
              DO I=1 TO N,.                                             CORR1460
              STD(I)    =0,.                                            CORR1470
              END,.                                                     CORR1480
              GO TO FIN,.                                               CORR1490
              END,.                                                     CORR1500
         FN   =SQRT(N-1),.                                              CORR1510
         DO I = 1 TO M,.                                                CORR1520
         STD(I)=STD(I)/FN,.                                             CORR1530
         END,.                                                          CORR1540
 FIN..                                                                  CORR1550
    RETURN,.                                                            CORR1560
    END,.                              /*END OF PROCEDURE CORR        */CORR1570
*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');
 MSDU..                                                                 MSDU  10
 /*********************************************************************/MSDU  20
 /*                                                                   */MSDU  30
 /*      TO COMPUTE EIGENVALUES AND EIGENVECTORS OF A REAL SYMMETRIC  */MSDU  40
 /*      MATRIX                                                       */MSDU  50
 /*                                                                   */MSDU  60
 /*********************************************************************/MSDU  70
    PROCEDURE (A,R,N,MV),.                                              MSDU  80
    DECLARE                                                             MSDU  90
         (I,IND,J,L,M,MV,N)                                             MSDU 100
         FIXED BINARY,                                                  MSDU 110
         ERROR EXTERNAL CHARACTER(1),                                   MSDU 120
         (A(*,*),R(*,*),ANORM,ANRMX,THR,U,Y,SINX,SINX2,COSX,COSX2,SINCS,MSDU 130
         FN)                                                            MSDU 140
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/MSDU 150
  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/MSDU 160
 /*                                                                   */MSDU 170
    ERROR='0',.                                                         MSDU 180
    IF N LE 1                          /* THE ORDER OF MATRIX A IS    */MSDU 190
    THEN DO,.                          /* LESS THAN OR EQUAL TO ONE.  */MSDU 200
         ERROR='1',.                                                    MSDU 210
         GO TO FIN,.                                                    MSDU 220
         END,.                                                          MSDU 230
    FN   =N,.                                                           MSDU 240
    IF MV= 0                                                            MSDU 250
    THEN DO,.                                                           MSDU 260
              DO I = 1 TO N,.          /* GENERATE IDENTITY MATRIX    */MSDU 270
                   DO J = 1 TO N,.                                      MSDU 280
                  R(I,J)=0,.                                            MSDU 290
                   END,.                                                MSDU 300
              R(I,I)=1,.                                                MSDU 310
              END,.                                                     MSDU 320
         END,.                                                          MSDU 330
 /*                                                                   */MSDU 340
 /*      COMPUTE INITIAL AND FINAL NORM                               */MSDU 350
 /*                                                                   */MSDU 360
    ANORM=0,.                                                           MSDU 370
         DO I = 1 TO N-1,.                                              MSDU 380
              DO J = I+1 TO N,.                                         MSDU 390
              ANORM=ANORM+A(I,J)*A(I,J),.                               MSDU 400
              END,.                                                     MSDU 410
         END,.                                                          MSDU 420
    IF ANORM LE 0.0                                                     MSDU 430
    THEN GO TO SORT,.                                                   MSDU 440
    ANORM=1.414*SQRT(ANORM),.                                           MSDU 450
    ANRMX=ANORM*1.0E-6/FN,.                                             MSDU 460
 /*                                                                   */MSDU 470
 /*      INITIALIZE INDICATOR AND COMPUTE THRESHOLD, THR              */MSDU 480
 /*                                                                   */MSDU 490
    IND  =0,.                                                           MSDU 500
    THR  =ANORM,.                                                       MSDU 510
 S10..                                                                  MSDU 520
    THR  =THR/FN,.                                                      MSDU 530
 S20..                                                                  MSDU 540
    L    =1,.                                                           MSDU 550
 S30..                                                                  MSDU 560
    M    =L+1,.                                                         MSDU 570
 S40..                                                                  MSDU 580
    IF ABS(A(L,M)) GE THR              /* COMPUTE SIN AND COS         */MSDU 590
    THEN DO,.                                                           MSDU 600
         IND  =1,.                                                      MSDU 610
         U    =0.5*(A(L,L)-A(M,M)),.                                    MSDU 620
         Y    =-A(L,M)/SQRT(A(L,M)*A(L,M)+U*U),.                        MSDU 630
         IF U LT 0.0                                                    MSDU 640
         THEN Y    =-Y,.                                                MSDU 650
         SINX =Y/SQRT(2.0*(1.0+(SQRT(1.0-Y*Y)))),.                      MSDU 660
         SINX2=SINX*SINX,.                                              MSDU 670
         COSX =SQRT(1.0-SINX2),.                                        MSDU 680
         COSX2=COSX*COSX,.                                              MSDU 690
         SINCS=SINX*COSX,.                                              MSDU 700
              DO I = 1 TO N,.          /* ROTATE L AND M COLUMNS      */MSDU 710
              IF I LT L                                                 MSDU 720
              THEN DO,.                                                 MSDU 730
                   IF I LT M                                            MSDU 740
                   THEN DO,.                                            MSDU 750
                        U    =A(I,L)*COSX-A(I,M)*SINX,.                 MSDU 760
                        A(I,M)=A(I,L)*SINX+A(I,M)*COSX,.                MSDU 770
                        A(I,L)=U,.                                      MSDU 780
                        END,.                                           MSDU 790
                   END,.                                                MSDU 800
              ELSE IF I GT L                                            MSDU 810
              THEN DO,.                                                 MSDU 820
                   IF I LT M                                            MSDU 830
                   THEN DO,.                                            MSDU 840
                        U    =A(L,I)*COSX-A(I,M)*SINX,.                 MSDU 850
                        A(I,M)=A(L,I)*SINX+A(I,M)*COSX,.                MSDU 860
                        END,.                                           MSDU 870
                   ELSE IF I GT M                                       MSDU 880
                   THEN DO,.                                            MSDU 890
                        U    =A(L,I)*COSX-A(M,I)*SINX,.                 MSDU 900
                        A(M,I)=A(L,I)*SINX+A(M,I)*COSX,.                MSDU 910
                        END,.                                           MSDU 920
                   IF I NE M                                            MSDU 930
                   THEN A(L,I)=U,.                                      MSDU 940
                   END,.                                                MSDU 950
              IF MV= 0                                                  MSDU 960
              THEN DO,.                                                 MSDU 970
                   U    =R(I,L)*COSX-R(I,M)*SINX,.                      MSDU 980
                   R(I,M)=R(I,L)*SINX+R(I,M)*COSX,.                     MSDU 990
                   R(I,L)=U,.                                           MSDU1000
                   END,.                                                MSDU1010
              END,.                                                     MSDU1020
         U    =2.0*A(L,M)*SINCS,.                                       MSDU1030
         Y    =A(L,L)*COSX2+A(M,M)*SINX2-U,.                            MSDU1040
         U    =A(L,L)*SINX2+A(M,M)*COSX2+U,.                            MSDU1050
         A(L,M)=(A(L,L)-A(M,M))*SINCS+A(L,M)*(COSX2-SINX2),.            MSDU1060
         A(L,L)=Y,.                                                     MSDU1070
         A(M,M)=U,.                                                     MSDU1080
         END,.                                                          MSDU1090
    IF M NE N                          /* TEST FOR M = LAST COLUMN    */MSDU1100
    THEN DO,.                                                           MSDU1110
         M    =M+1,.                                                    MSDU1120
         GO TO S40,.                                                    MSDU1130
         END,.                                                          MSDU1140
 /*                                                                   */MSDU1150
 /*      TEST FOR L = SECOND FROM LAST COLUMN                         */MSDU1160
 /*                                                                   */MSDU1170
    IF L NE N-1                                                         MSDU1180
    THEN DO,.                                                           MSDU1190
         L    =L+1,.                                                    MSDU1200
         GO TO S30,.                                                    MSDU1210
         END,.                                                          MSDU1220
    IF IND= 1                                                           MSDU1230
    THEN DO,.                                                           MSDU1240
         IND  =0,.                                                      MSDU1250
         GO TO S20,.                                                    MSDU1260
         END,.                                                          MSDU1270
 /*                                                                   */MSDU1280
 /*      COMPARE THRESHOLD WITH FINAL NORM                            */MSDU1290
 /*                                                                   */MSDU1300
    IF THR GT ANRMX                                                     MSDU1310
    THEN GO TO S10,.                                                    MSDU1320
 /*                                                                   */MSDU1330
 /*      SORT EIGENVALUES AND EIGENVECTORS                            */MSDU1340
 /*                                                                   */MSDU1350
 SORT..                                                                 MSDU1360
         DO I = 1 TO N,.                                                MSDU1370
              DO J = I TO N,.                                           MSDU1380
              IF A(I,I) LT A(J,J)                                       MSDU1390
              THEN DO,.                                                 MSDU1400
                   U    =A(I,I),.                                       MSDU1410
                   A(I,I)=A(J,J),.                                      MSDU1420
                   A(J,J)=U,.                                           MSDU1430
                   IF MV= 0                                             MSDU1440
                   THEN DO,.                                            MSDU1450
                             DO L = 1 TO N,.                            MSDU1460
                             U    =R(L,I),.                             MSDU1470
                             R(L,I)=R(L,J),.                            MSDU1480
                             R(L,J)=U,.                                 MSDU1490
                             END,.                                      MSDU1500
                        END,.                                           MSDU1510
                   END,.                                                MSDU1520
              END,.                                                     MSDU1530
         END,.                                                          MSDU1540
 FIN..                                                                  MSDU1550
    RETURN,.                                                            MSDU1560
    END,.                              /*END OF PROCEDURE MSDU        */MSDU1570
*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');
 TRAC..                                                                 TRAC  10
 /*********************************************************************/TRAC  20
 /*                                                                   */TRAC  30
 /*      TO COMPUTE CUMULATIVE PERCENTAGE OF EIGENVALUES GREATER      */TRAC  40
 /*      THAN OR EQUAL TO A CONSTANT SPECIFIED BY THE USER.           */TRAC  50
 /*                                                                   */TRAC  60
 /*********************************************************************/TRAC  70
    PROCEDURE (M,R,CON,K,D),.                                           TRAC  80
    DECLARE                                                             TRAC  90
         ERROR EXTERNAL CHARACTER (1),                                  TRAC 100
         (I,J,K,M)                                                      TRAC 110
         FIXED BINARY,                                                  TRAC 120
         (R(*,*),D(*),CON)                                              TRAC 130
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/TRAC 140
  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/TRAC 150
 /*                                                                   */TRAC 160
    ERROR='0',.                                                         TRAC 170
    IF M LE 0                          /* ORDER OF MATRIX IS ZERO.    */TRAC 180
    THEN DO,.                                                           TRAC 190
         ERROR='1',.                                                    TRAC 200
         GO TO S20,.                                                    TRAC 210
         END,.                                                          TRAC 220
         DO I = 1 TO M,.                                                TRAC 230
         D(I) =R(I,I),.                                                 TRAC 240
         END,.                                                          TRAC 250
    K    =0,.                                                           TRAC 260
 /*                                                                   */TRAC 270
 /*      TEST WHETHER I-TH EIGENVALUE IS GREATER THAN OR EQUAL TO     */TRAC 280
 /*      THE CONSTANT.                                                */TRAC 290
 /*                                                                   */TRAC 300
         DO I = 1 TO M,.                                                TRAC 310
         IF D(I) LT CON                                                 TRAC 320
         THEN GO TO S10,.                                               TRAC 330
         K    =K+1,.                                                    TRAC 340
         D(I) =D(I)/M,.                                                 TRAC 350
         END,.                                                          TRAC 360
 S10..                                                                  TRAC 370
    IF K LE 1                                                           TRAC 380
    THEN DO,.                                                           TRAC 390
         ERROR='2',.                   /* NOT ENOUGH EIGENVALUES      */TRAC 400
         GO TO S20,.                   /* ARE RETAINED                */TRAC 410
         END,.                                                          TRAC 420
         DO I = 2 TO K,.                                                TRAC 430
         D(I) =D(I)+D(I-1),.                                            TRAC 440
         END,.                                                          TRAC 450
 S20..                                                                  TRAC 460
    RETURN,.                                                            TRAC 470
    END,.                              /*END OF PROCEDURE TRAC        */TRAC 480
*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');
 LOAD..                                                                 LOAD  10
 /*********************************************************************/LOAD  20
 /*                                                                   */LOAD  30
 /*      TO COMPUTE A FACTOR MATRIX (LOADING) FROM EIGENVALUES AND    */LOAD  40
 /*      ASSOCIATED EIGENVECTORS.                                     */LOAD  50
 /*                                                                   */LOAD  60
 /*********************************************************************/LOAD  70
    PROCEDURE (M,K,R,V),.                                               LOAD  80
    DECLARE                                                             LOAD  90
         (I,J,K)                                                        LOAD 100
         FIXED BINARY,                                                  LOAD 110
         ERROR EXTERNAL CHARACTER(1),                                   LOAD 120
         (R(*,*),V(*,*),SQ)                                             LOAD 130
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/LOAD 140
  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/LOAD 150
 /*                                                                   */LOAD 160
    ERROR='0',.                                                         LOAD 170
    IF K LE 1 OR K GT M                /* INVALID VALUE OF K          */LOAD 180
    THEN DO,.                                                           LOAD 190
         ERROR='2',.                                                    LOAD 200
         GO TO FIN,.                                                    LOAD 210
         END,.                                                          LOAD 220
    IF M LE 0                          /* ORDER OF MATRIX IS ZERO     */LOAD 230
    THEN ERROR='1',.                                                    LOAD 240
    ELSE DO,.                                                           LOAD 250
              DO J = 1 TO K,.                                           LOAD 260
              SQ   =SQRT(R(J,J)),.                                      LOAD 270
                   DO I = 1 TO M,.                                      LOAD 280
                   V(I,J)=SQ*V(I,J),.                                   LOAD 290
                   END,.                                                LOAD 300
              END,.                                                     LOAD 310
         END,.                                                          LOAD 320
 FIN..                                                                  LOAD 330
    RETURN,.                                                            LOAD 340
    END,.                              /*END OF PROCEDURE LOAD        */LOAD 350
*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');
 VRMX..                                                                 VRMX  10
 /*********************************************************************/VRMX  20
 /*                                                                   */VRMX  30
 /*      TO PERFORM ORTHOGONAL ROTATION OF A FACTOR MATRIX.           */VRMX  40
 /*                                                                   */VRMX  50
 /*********************************************************************/VRMX  60
    PROCEDURE (M,K,A,NC,TV,H,F,D),.                                     VRMX  70
    DECLARE                                                             VRMX  80
         (I,II,J,K,K1,LL,M,NC,NV)                                       VRMX  90
         FIXED BINARY,                                                  VRMX 100
         ERROR EXTERNAL CHARACTER(1),                                   VRMX 110
         (A(*,*),TV(*),H(*),F(*),D(*),EPS,TVLT,FN,AA,BB,CC,DD,G,B,U,T,  VRMX 120
         COS4T,SIN4T,TAN4T,SINP,COSP,CTN4T,COS2T,SIN2T,COST,SINT,CONS)  VRMX 130
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/VRMX 140
  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/VRMX 150
 /*                                                                   */VRMX 160
    EPS  =.00116,.                     /* INITIALIZATION              */VRMX 170
    TVLT =0,.                                                           VRMX 180
    LL   =K-1,.                                                         VRMX 190
    NV   =1,.                                                           VRMX 200
    NC   =0,.                                                           VRMX 210
    FN   =M*M,.                                                         VRMX 220
    CONS =.7071066,.                                                    VRMX 230
    ERROR='0',.                                                         VRMX 240
    IF M LE 1                          /* NUMBER OF VARIABLES LESS    */VRMX 250
    THEN DO,.                          /* THAN OR EQUAL TO ONE.       */VRMX 260
         ERROR='1',.                                                    VRMX 270
         GO TO FIN,.                                                    VRMX 280
         END,.                                                          VRMX 290
    IF K LE 1 OR K GT M                /* INVALID VALUE OF K          */VRMX 300
    THEN DO,.                                                           VRMX 310
         ERROR='2',.                                                    VRMX 320
         GO TO FIN,.                                                    VRMX 330
         END,.                                                          VRMX 340
 /*                                                                   */VRMX 350
 /*      CALCULATE ORIGINAL COMMUNALITIES                             */VRMX 360
 /*                                                                   */VRMX 370
         DO I = 1 TO M,.                                                VRMX 380
         H(I) =0,.                                                      VRMX 390
              DO J = 1 TO K,.                                           VRMX 400
              H(I) =H(I)+A(I,J)*A(I,J),.                                VRMX 410
              END,.                                                     VRMX 420
         END,.                                                          VRMX 430
 /*                                                                   */VRMX 440
 /*      CALCULATE NORMALIZED FACTOR MATRIX                           */VRMX 450
 /*                                                                   */VRMX 460
         DO I = 1 TO M,.                                                VRMX 470
         H(I) =SQRT(H(I)),.                                             VRMX 480
              DO J = 1 TO K,.                                           VRMX 490
              A(I,J)=A(I,J)/H(I),.                                      VRMX 500
              END,.                                                     VRMX 510
         END,.                                                          VRMX 520
    GO TO S20,.                                                         VRMX 530
 /*                                                                   */VRMX 540
 /*      CALCULATE VARIANCE FOR FACTOR MATRIX                         */VRMX 550
 /*                                                                   */VRMX 560
 S10..                                                                  VRMX 570
    NV   =NV+1,.                                                        VRMX 580
    TVLT =TV(NV-1),.                                                    VRMX 590
 S20..                                                                  VRMX 600
    TV(NV)=0,.                                                          VRMX 610
         DO J = 1 TO K,.                                                VRMX 620
         AA   =0,.                                                      VRMX 630
         BB   =0,.                                                      VRMX 640
              DO I = 1 TO M,.                                           VRMX 650
              CC   =A(I,J)*A(I,J),.                                     VRMX 660
              AA   =AA+CC,.                                             VRMX 670
              BB   =BB+CC*CC,.                                          VRMX 680
              END,.                                                     VRMX 690
         TV(NV)=TV(NV)+(M*BB-AA*AA)/FN,.                                VRMX 700
         END,.                                                          VRMX 710
    IF NV GE 51                                                         VRMX 720
    THEN DO,.                          /* NUMBER OF ITERATIONS = 50   */VRMX 730
         ERROR='3',.                                                    VRMX 740
         GO TO S80,.                                                    VRMX 750
         END,.                                                          VRMX 760
    IF TV(NV)-TVLT LE 1.0E-7           /* PERFORM CONVERGENCE TEST    */VRMX 770
    THEN DO,.                                                           VRMX 780
         NC   =NC+1,.                                                   VRMX 790
         IF NC GT 3                                                     VRMX 800
         THEN GO TO S80,.                                               VRMX 810
         END,.                                                          VRMX 820
 /*                                                                   */VRMX 830
 /*      ROTATION OF TWO FACTORS BEGINS                               */VRMX 840
 /*                                                                   */VRMX 850
         DO J = 1 TO LL,.                                               VRMX 860
         II   =J+1,.                                                    VRMX 870
              DO K1 = II TO K,.                                         VRMX 880
              AA   =0,.                /* CALCULATE NUM AND DEN       */VRMX 890
              BB   =0,.                                                 VRMX 900
              CC   =0,.                                                 VRMX 910
              DD   =0,.                                                 VRMX 920
                   DO I = 1 TO M,.                                      VRMX 930
                   U    =(A(I,J)+A(I,K1))*(A(I,J)-A(I,K1)),.            VRMX 940
                   T    =A(I,J)*A(I,K1)*2,.                             VRMX 950
                   CC   =CC+(U+T)*(U-T),.                               VRMX 960
                   DD   =DD+2*U*T,.                                     VRMX 970
                   AA   =AA+U,.                                         VRMX 980
                   BB   =BB+T,.                                         VRMX 990
                   END,.                                                VRMX1000
              T    =DD-2*AA*BB/M,.                                      VRMX1010
              B    =CC-(AA*AA-BB*BB)/M,.                                VRMX1020
              IF T = B                                                  VRMX1030
              THEN DO,.                                                 VRMX1040
                   IF T+B LT EPS                                        VRMX1050
                   THEN GO TO S70,.                                     VRMX1060
 /*                                                                   */VRMX1070
 /*      NUM + DEN IS GREATER THAN OR EQUAL TO THE TOLERANCE FACTOR   */VRMX1080
 /*                                                                   */VRMX1090
              COS4T=CONS,.                                              VRMX1100
                   SIN4T=CONS,.                                         VRMX1110
                   GO TO S40,.                                          VRMX1120
                   END,.                                                VRMX1130
              IF T GT B                                                 VRMX1140
              THEN GO TO S30,.                                          VRMX1150
              TAN4T=ABS(T)/ABS(B),.    /* NUM IS LESS THAN DEN        */VRMX1160
              IF TAN4T GE EPS                                           VRMX1170
              THEN DO,.                                                 VRMX1180
                   COS4T=1/SQRT(1+TAN4T*TAN4T),.                        VRMX1190
                   SIN4T=TAN4T*COS4T,.                                  VRMX1200
                   GO TO S40,.                                          VRMX1210
                   END,.                                                VRMX1220
              IF B GE 0                                                 VRMX1230
              THEN GO TO S70,.                                          VRMX1240
              SINP =CONS,.                                              VRMX1250
              COSP =CONS,.                                              VRMX1260
              GO TO S60,.                                               VRMX1270
 S30..                                                                  VRMX1280
              CTN4T=ABS(T/B),.         /* NUM IS GREATER THAN DEN     */VRMX1290
              IF CTN4T GE EPS                                           VRMX1300
              THEN DO,.                                                 VRMX1310
                   SIN4T=1/SQRT(1+CTN4T*CTN4T),.                        VRMX1320
                   COS4T=CTN4T*SIN4T,.                                  VRMX1330
                   GO TO S40,.                                          VRMX1340
                   END,.                                                VRMX1350
              COS4T=0,.                                                 VRMX1360
              SIN4T=1,.                                                 VRMX1370
 /*                                                                   */VRMX1380
 /*      DETERMINE COS THEAT AND SIN THETA                            */VRMX1390
 /*                                                                   */VRMX1400
 S40..                                                                  VRMX1410
              COS2T=SQRT((1+COS4T)/2),.                                 VRMX1420
              SIN2T=SIN4T/(2*COS2T),.                                   VRMX1430
              COST =SQRT((1+COS2T)/2),.                                 VRMX1440
              SINT =SIN2T/(2*COST),.                                    VRMX1450
 /*                                                                   */VRMX1460
 /*      DETERMINE COS PHI AND SIN PHI                                */VRMX1470
 /*                                                                   */VRMX1480
              IF B GT 0                                                 VRMX1490
              THEN DO,.                                                 VRMX1500
                   COSP =COST,.                                         VRMX1510
                   SINP =SINT,.                                         VRMX1520
                   GO TO S50,.                                          VRMX1530
                   END,.                                                VRMX1540
              COSP =CONS*(COST+SINT),.                                  VRMX1550
              SINP =ABS(CONS*(COST-SINT)),.                             VRMX1560
 S50..                                                                  VRMX1570
              IF T LE 0                                                 VRMX1580
              THEN SINP =-SINP,.                                        VRMX1590
 S60..                                                                  VRMX1600
                   DO I = 1 TO M,.     /* PERFORM ROTATION            */VRMX1610
                   AA   =A(I,J)*COSP+A(I,K1)*SINP,.                     VRMX1620
                   A(I,K1)=-A(I,J)*SINP+A(I,K1)*COSP,.                  VRMX1630
                   A(I,J)=AA,.                                          VRMX1640
                   END,.                                                VRMX1650
 S70..                                                                  VRMX1660
              END,.                                                     VRMX1670
         END,.                                                          VRMX1680
    GO TO S10,.                                                         VRMX1690
 /*                                                                   */VRMX1700
 /*      DENORMALIZE VARIMAX LOADINGS                                 */VRMX1710
 /*                                                                   */VRMX1720
 S80..                                                                  VRMX1730
         DO I = 1 TO M,.                                                VRMX1740
              DO J = 1 TO K,.                                           VRMX1750
              A(I,J)=A(I,J)*H(I),.                                      VRMX1760
              END,.                                                     VRMX1770
         END,.                                                          VRMX1780
    NC   =NV-1,.                       /* CHECK ON COMMUNALITIES      */VRMX1790
    H    =H*H,.                                                         VRMX1800
         DO I = 1 TO M,.                                                VRMX1810
         F(I) =0,.                                                      VRMX1820
              DO J = 1 TO K,.                                           VRMX1830
              F(I) =F(I)+A(I,J)*A(I,J),.                                VRMX1840
              END,.                                                     VRMX1850
         D(I) =H(I)-F(I),.                                              VRMX1860
         END,.                                                          VRMX1870
 FIN..                                                                  VRMX1880
    RETURN,.                                                            VRMX1890
    END,.                              /*END OF PROCEDURE VRMX        */VRMX1900
*PROCESS('CHAR48,NOLIST,NOATR,NOXREF');
 DAT2..                                                                 DAT2  10
 /*********************************************************************/DAT2  20
 /*                                                                   */DAT2  30
 /*      TO READ FLOATING POINT DATA, ONE OBSERVATION AT A TIME.      */DAT2  40
 /*      DATA MAY BE SAVED ON A DATA SET.                             */DAT2  50
 /*                                                                   */DAT2  60
 /*********************************************************************/DAT2  70
    PROCEDURE (M,D),.                                                   DAT2  80
    DECLARE                                                             DAT2  90
         XDATA FILE STREAM ENVIRONMENT (CONSECUTIVE V(2000,200)),       DAT2 100
         (NCARD,NV) EXTERNAL,                                           DAT2 110
         CH CHARACTER(NCARD),                                           DAT2 120
         (I,M,MM) FIXED BINARY,                                         DAT2 130
         D(*) FLOAT BINARY,.                                            DAT2 140
 /*                                                                   */DAT2 150
    ON ENDFILE (SYSIN)                                                  DAT2 160
    GO TO EXIT,.                                                        DAT2 170
    GET EDIT (CH) (A(NCARD)),.                                          DAT2 180
    MM   =CEIL(M/12),.                                                  DAT2 190
    GET STRING (CH) EDIT ((D(I) DO I= 1 TO M))                          DAT2 200
         ((MM)((12)F(6,0),X(8))),.                                      DAT2 210
    IF NV= 1                                                            DAT2 220
    THEN PUT FILE (XDATA) EDIT ((D(I) DO I= 1 TO M)) ((M)F(6,0)),.      DAT2 230
    REVERT ENDFILE (SYSIN),.                                            DAT2 240
    RETURN,.                                                            DAT2 250
 EXIT..                                                                 DAT2 260
    PUT FILE (SYSPRINT) EDIT ('ERROR  INSUFFICIENT DATA')               DAT2 270
         (SKIP(1),COLUMN(10),A),.                                       DAT2 280
    STOP,.                                                              DAT2 290
    END,.                              /*END OF PROCEDURE DAT2        */DAT2 300
/*
//GO.SYSIN  DD  *
SAMPLE00023090001.0 1                                                         10
     7     7     9     7    15    36    60    15    24                        20
    13    18    25    15    13    35    61    18    30                        30
     9    18    24    23    12    43    62    14    31                        40
     7    13    25    36    11    12    63    26    32                        50
     6     8    20     7    15    46    18    28    15                        60
    10    12    30    11    10    42    27    12    17                        70
     7     6    11     7    15    35    60    20    25                        80
    16    19    25    16    13    30    64    20    30                        90
     9    22    26    24    13    40    66    15    32                       100
     8    15    26    30    13    10    66    25    34                       110
     8    10    20     8    17    40    20    30    18                       120
     9    12    28    11     8    45    30    15    19                       130
    11    17    21    30    10    45    60    17    30                       140
     9    16    26    27    14    31    59    19    17                       150
    10    15    24    18    12    29    48    18    26                       160
    11    11    30    19    19    26    57    20    30                       170
    16     9    16    20    18    31    60    21    17                       180
     9     8    19    14    16    33    67     9    19                       190
     7    18    22     9    15    37    62    11    20                       200
     8    11    23    18     9    36    61    22    24                       210
     6     6    27    23     7    40    55    24    31                       220
    10     9    26    26    10    37    57    27    29                       230
     8    10    26    15    11    42    59    20    28                       240
/*
