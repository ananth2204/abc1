 MSCS..                                                                 MSCS  10
 /*********************************************************************/MSCS  20
 /*                                                                   */MSCS  30
 /*      CONVERT THE STORAGE ALLOCATION OF A SYMMETRIC MATRIX         */MSCS  40
 /*      FROM A TWO-DIMENSIONAL ARRAY TO A LINEAR ARRAY               */MSCS  50
 /*                                                                   */MSCS  60
 /*********************************************************************/MSCS  70
    PROCEDURE(Q,N,EPS,S),.                                              MSCS  80
    DECLARE                                                             MSCS  90
         (Q(*,*),EPS,S(*),Q1,Q2,M)                                      MSCS 100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MSCS 110
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MSCS 120
         (N,I,K,L)BINARY FIXED,                                         MSCS 130
         ERROR EXTERNAL CHARACTER(1),.                                  MSCS 140
    ERROR='0',.                        /*PRESET ERROR INDICATOR       */MSCS 150
    L    =0,.                                                           MSCS 160
    IF N GT 0                          /*TEST SPECIFIED DIMENSION     */MSCS 170
    THEN DO I =1 TO N,.                                                 MSCS 180
              DO K =1 TO I,.                                            MSCS 190
              L    =L+1,.                                               MSCS 200
              Q1   =Q(I,K),.           /*REPLACE Q1 BY Q(I,K)         */MSCS 210
              Q2   =Q(K,I),.           /*REPLACE Q2 BY Q(K,I)         */MSCS 220
              S(L),M=(Q1+Q2)*0.5,.     /*SET RES. S(L) =(Q1+Q2)/2     */MSCS 230
              IF ABS(Q1-Q2) GT         /*TEST FOR SYMMETRY OF Q       */MSCS 240
                   EPS*MAX(1,ABS(M))                                    MSCS 250
              THEN ERROR='S',.         /*Q IS NOT SYMMETRIC           */MSCS 260
              END,.                                                     MSCS 270
         END,.                                                          MSCS 280
    ELSE ERROR='D',.                   /*ERROR IN SPECIFIED DIMENSION */MSCS 290
    END,.                              /*END OF PROCEDURE MSCS        */MSCS 300
 MSCG..                                                                 MSCG  10
 /*********************************************************************/MSCG  20
 /*                                                                   */MSCG  30
 /*      CONVERT THE STORAGE ALLOCATION OF A SYMMETRIC MATRIX         */MSCG  40
 /*      FROM A LINEAR ARRAY TO A TWO-DIMENSIONAL ARRAY               */MSCG  50
 /*                                                                   */MSCG  60
 /*********************************************************************/MSCG  70
    PROCEDURE(S,N,Q),.                                                  MSCG  80
    DECLARE                                                             MSCG  90
         (S(*),Q(*,*))                                                  MSCG 100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MSCG 110
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MSCG 120
         (N,I,K,L)BINARY FIXED,.                                        MSCG 130
    L    =0,.                                                           MSCG 140
    IF N GT 0                          /*TEST SPECIFIED DIMENSION     */MSCG 150
    THEN DO I =1 TO N,.                                                 MSCG 160
              DO K =1 TO I,.                                            MSCG 170
              L    =L+1,.                                               MSCG 180
              Q(I,K),Q(K,I)=S(L),.     /*STORE Q(I,K) AND Q(K,I)      */MSCG 190
              END,.                                                     MSCG 200
         END,.                                                          MSCG 210
    END,.                              /*END OF PROCEDURE MSCG        */MSCG 220
 MAGS..                                                                 MAGS  10
 /*********************************************************************/MAGS  20
 /*                                                                   */MAGS  30
 /*      ADD OR SUBTRACT A SQUARE AND A SYMMETRIC MATRIX              */MAGS  40
 /*                                                                   */MAGS  50
 /*********************************************************************/MAGS  60
    PROCEDURE(A,B,N,OPT,C),.                                            MAGS  70
    DECLARE                                                             MAGS  80
         (A(*,*),B(*),C(*,*),AL,BL)                                     MAGS  90
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MAGS 100
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MAGS 110
         (N,I,K,L,LI)BINARY FIXED,                                      MAGS 120
         OPT CHARACTER(1),.                                             MAGS 130
    IF N GT 0                          /*IS N GREATER THAN ZERO       */MAGS 140
    THEN DO,.                                                           MAGS 150
         LI,I =1,.                                                      MAGS 160
 NEXTI..                                                                MAGS 170
         L    =LI,.                                                     MAGS 180
         K    =1,.                                                      MAGS 190
 NEXTK..                                                                MAGS 200
         AL   =A(I,K),.                /*REPLACE AL BY A(I,K)         */MAGS 210
         BL   =B(L),.                  /*SET BL CORRESPONDING TO AL   */MAGS 220
         IF K LT I                                                      MAGS 230
         THEN L    =L+1,.                                               MAGS 240
         ELSE L    =L+K,.                                               MAGS 250
         IF OPT='2'                    /*SHOULD A-B BE CALCULATED     */MAGS 260
         THEN BL   =-BL,.              /*THEN CONVERT SIGN OF BL      */MAGS 270
         ELSE IF OPT='3'               /*SHOULD B-A BE CALCULATED     */MAGS 280
         THEN AL   =-AL,.              /*THEN CONVERT SIGN OF AL      */MAGS 290
         C(I,K)=AL+BL,.                /*SET RESULTANT C(I,K) TO AL+BL*/MAGS 300
         IF K LT N                                                      MAGS 310
         THEN DO,.                     /*INCREMENT K                  */MAGS 320
              K    =K+1,.                                               MAGS 330
              GO TO NEXTK,.                                             MAGS 340
              END,.                                                     MAGS 350
         ELSE IF I LT N                                                 MAGS 360
         THEN DO,.                     /*INCREMENT I                  */MAGS 370
              LI   =LI+I,.                                              MAGS 380
              I    =I+1,.                                               MAGS 390
              GO TO NEXTI,.                                             MAGS 400
              END,.                                                     MAGS 410
         END,.                                                          MAGS 420
    END,.                              /*END OF PROCEDURE MAGS        */MAGS 430
 MMGG..                                                                 MMGG  10
 /*********************************************************************/MMGG  20
 /*                                                                   */MMGG  30
 /*      MULTIPLY TWO GENERAL MATRICES                                */MMGG  40
 /*                                                                   */MMGG  50
 /*********************************************************************/MMGG  60
    PROCEDURE(A,B,K,L,M,C),.                                            MMGG  70
    DECLARE                                                             MMGG  80
         (A(*,*),B(*,*),C(*,*))                                         MMGG  90
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MMGG 100
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MMGG 110
         S BINARY FLOAT(53),                                            MMGG 120
         (K,L,M,I,J,N)                                                  MMGG 130
         BINARY FIXED,                                                  MMGG 140
         ERROR EXTERNAL CHARACTER(1),.                                  MMGG 150
    ERROR='D',.                        /*PRESET ERROR INDICATOR       */MMGG 160
    IF K GT 0                          /*TEST SPECIFIED DIMENSIONS    */MMGG 170
    THEN IF L GT 0                                                      MMGG 180
    THEN IF M GT 0                                                      MMGG 190
    THEN DO,.                                                           MMGG 200
         I    =0,.                                                      MMGG 210
 NEXTI..                               /*COMPUTE THE I-TH ROW OF C    */MMGG 220
         I    =I+1,.                                                    MMGG 230
         J    =0,.                                                      MMGG 240
 NEXTJ..                               /*COMPUTE THE J-TH ELEMENT     */MMGG 250
         J    =J+1,.                                                    MMGG 260
         S    =0,.                                                      MMGG 270
              DO N =1 TO L,.           /*PERFORM SCALAR PRODUCT       */MMGG 280
              S    =S+MULTIPLY(A(I,N),                                  MMGG 290
                   B(N,J),53),.                                         MMGG 300
              END,.                                                     MMGG 310
         C(I,J)=S,.                    /*STORE RESULTANT C(I,J)       */MMGG 320
         IF J LT M                                                      MMGG 330
         THEN GO TO NEXTJ,.            /*INCREMENT J                  */MMGG 340
         ELSE IF I LT K                                                 MMGG 350
         THEN GO TO NEXTI,.            /*INCREMENT I                  */MMGG 360
         ERROR='0',.                   /*SUCCESSFUL OPERATION         */MMGG 370
         END,.                                                          MMGG 380
    END,.                              /*END OF PROCEDURE MMGG        */MMGG 390
 MMSS..                                                                 MMSS  10
 /*********************************************************************/MMSS  20
 /*                                                                   */MMSS  30
 /*      MULTIPLY TWO SYMMETRIC MATRICES STORED IN LINEAR ARRAYS      */MMSS  40
 /*                                                                   */MMSS  50
 /*********************************************************************/MMSS  60
    PROCEDURE(A,B,N,P),.                                                MMSS  70
    DECLARE                                                             MMSS  80
         (A(*),B(*),P(*,*))                                             MMSS  90
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MMSS 100
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MMSS 110
         S BINARY FLOAT(53),                                            MMSS 120
         (N,L1,L2,LI,LK,I,K,J)                                          MMSS 130
         BINARY FIXED,.                                                 MMSS 140
    IF N GT 0                                                           MMSS 150
    THEN DO,.                                                           MMSS 160
         LI,I =1,.                                                      MMSS 170
 NEXTI..                                                                MMSS 180
         LK,K =1,.                                                      MMSS 190
 NEXTK..                                                                MMSS 200
         L1   =LI,.                                                     MMSS 210
         L2   =LK,.                                                     MMSS 220
         S    =0,.                     /*COMPUTE VECTOR PRODUCT OF TWO*/MMSS 230
              DO J =1 TO N,.           /*CORRESP. SUBARRAYS OF A AND B*/MMSS 240
              S    =S+MULTIPLY(A(L1),                                   MMSS 250
                   B(L2),53),.                                          MMSS 260
              IF J LT I                                                 MMSS 270
              THEN L1   =L1+1,.                                         MMSS 280
              ELSE L1   =L1+J,.                                         MMSS 290
              IF J LT K                                                 MMSS 300
              THEN L2   =L2+1,.                                         MMSS 310
              ELSE L2   =L2+J,.                                         MMSS 320
              END,.                                                     MMSS 330
         P(I,K)=S,.                    /*STORE RESULTANT ELEMENT OF P */MMSS 340
         IF K LT N                                                      MMSS 350
         THEN DO,.                     /*INCREMENT K                  */MMSS 360
              LK   =LK+K,.                                              MMSS 370
              K    =K+1,.                                               MMSS 380
              GO TO NEXTK,.                                             MMSS 390
              END,.                                                     MMSS 400
         ELSE IF I LT N                                                 MMSS 410
         THEN DO,.                     /*INCREMENT I                  */MMSS 420
              LI   =LI+I,.                                              MMSS 430
              I    =I+1,.                                               MMSS 440
              GO TO NEXTI,.                                             MMSS 450
              END,.                                                     MMSS 460
         END,.                                                          MMSS 470
    END,.                              /*END OF PROCEDURE MMSS        */MMSS 480
 MMGS..                                                                 MMGS  10
 /*********************************************************************/MMGS  20
 /*                                                                   */MMGS  30
 /*      MULTIPLY A GENERAL WITH A SYMMETRIC MATRIX                   */MMGS  40
 /*                                                                   */MMGS  50
 /*********************************************************************/MMGS  60
    PROCEDURE(G,S,M,N,OPT),.                                            MMGS  70
    DECLARE                                                             MMGS  80
         (G(*,*),S(*),H(MAX(N,M)))                                      MMGS  90
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MMGS 100
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MMGS 110
         T BINARY FLOAT(53),                                            MMGS 120
         (M,N,MM,NN,I,J,K,L,LI,LJ,RN,CN)                                MMGS 130
         BINARY FIXED,                                                  MMGS 140
         (OPT,ERROR EXTERNAL)CHARACTER(1),.                             MMGS 150
    NN   =N,.                          /*SET NN TO NUMBER OF COLUMNS  */MMGS 160
    MM   =M,.                          /*SET MM TO NUMBER OF ROWS OF G*/MMGS 170
    ERROR='D',.                        /*PRESET ERROR INDICATOR       */MMGS 180
    IF NN GT 0                         /*TEST SPECIFIED DIMENSIONS    */MMGS 190
    THEN IF MM GT 0                                                     MMGS 200
    THEN DO,.                                                           MMGS 210
         IF OPT='2'                                                     MMGS 220
         THEN DO,.                     /*IN CASE OF MULTIPL. S*G      */MMGS 230
              NN   =MM,.               /*INTERCHANGE NN AND MM        */MMGS 240
              MM   =N,.                                                 MMGS 250
              END,.                                                     MMGS 260
         K    =0,.                                                      MMGS 270
 NEXTK..                                                                MMGS 280
         RN,CN,K=K+1,.                                                  MMGS 290
              DO I =1 TO NN,.          /*REPLACE H(*) BY CURRENT ROW  */MMGS 300
              IF OPT='2'               /*RESP. COLUMN VECTOR OF G     */MMGS 310
              THEN RN   =I,.                                            MMGS 320
              ELSE CN   =I,.                                            MMGS 330
              H(I) =G(RN,CN),.                                          MMGS 340
              END,.                                                     MMGS 350
         LI,I =1,.                                                      MMGS 360
 NEXTI..                               /*FOR CURRENT ROW RESP. COLUMN */MMGS 370
         L    =LI,.                    /*VECTOR COMPUTE I-TH ELEMENT  */MMGS 380
         T    =0,.                                                      MMGS 390
              DO J =1 TO NN,.          /*PERFORM SCALAR PRODUCT       */MMGS 400
              T    =T+MULTIPLY(H(J),                                    MMGS 410
                   S(L),53),.                                           MMGS 420
              IF J LT I                                                 MMGS 430
              THEN L    =L+1,.                                          MMGS 440
              ELSE L    =L+J,.                                          MMGS 450
              END,.                                                     MMGS 460
         IF OPT='2'                    /*TEST SPECIFIED MULTIPLICATION*/MMGS 470
         THEN RN   =I,.                                                 MMGS 480
         ELSE CN   =I,.                                                 MMGS 490
         G(RN,CN)=T,.                  /*STORE RESULTANT ELEMENT      */MMGS 500
         LI   =LI+I,.                                                   MMGS 510
         I    =I+1,.                                                    MMGS 520
         IF I LE NN                                                     MMGS 530
         THEN GO TO NEXTI,.            /*INCREMENT I                  */MMGS 540
         ELSE IF K LT MM                                                MMGS 550
         THEN GO TO NEXTK,.            /*INCREMENT K                  */MMGS 560
         ERROR='0',.                   /*SUCCESSFUL OPERATION         */MMGS 570
         END,.                                                          MMGS 580
    END,.                              /*END OF PROCEDURE MMGS        */MMGS 590
 MMGT..                                                                 MMGT  10
 /*********************************************************************/MMGT  20
 /*                                                                   */MMGT  30
 /*      MULTIPLY A GENERAL MATRIX WITH ITS TRANSPOSE                 */MMGT  40
 /*                                                                   */MMGT  50
 /*********************************************************************/MMGT  60
    PROCEDURE(A,M,N,OPT,S),.                                            MMGT  70
    DECLARE                                                             MMGT  80
         (A(*,*),S(*))                                                  MMGT  90
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MMGT 100
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MMGT 110
         T BINARY FLOAT(53),                                            MMGT 120
         (M,N,I,II,J,JJ,K,L)                                            MMGT 130
         BINARY FIXED,                                                  MMGT 140
         (OPT,ERROR EXTERNAL)CHARACTER(1),.                             MMGT 150
    II   =M,.                                                           MMGT 160
    JJ   =N,.                                                           MMGT 170
    ERROR='D',.                        /*PRESET ERROR INDICATOR       */MMGT 180
    IF II GT 0                         /*TEST SPECIFIED DIMENSIONS    */MMGT 190
    THEN IF JJ GT 0                                                     MMGT 200
    THEN DO,.                                                           MMGT 210
         IF OPT='2'                    /*CHECK SPECIFIED MULTIPLIC.   */MMGT 220
         THEN DO,.                                                      MMGT 230
              JJ   =II,.               /*INTERCHANGE II AND JJ IN CASE*/MMGT 240
              II   =N,.                /*OF PRODUCT TRANSPOSE(A)*A    */MMGT 250
              END,.                                                     MMGT 260
         L,I  =1,.                                                      MMGT 270
 NEXTI..                                                                MMGT 280
         K    =1,.                                                      MMGT 290
 NEXTK..                                                                MMGT 300
         T    =0,.                                                      MMGT 310
         IF OPT='2'                    /*CHECK SPECIFIED MULTIPLIC.   */MMGT 320
         THEN DO J =1 TO JJ,.          /*TRANSPOSE(A)*A IS PERFORMED  */MMGT 330
              T    =T+MULTIPLY(A(J,I),                                  MMGT 340
                   A(J,K),53),.                                         MMGT 350
              END,.                                                     MMGT 360
         ELSE DO J =1 TO JJ,.          /*A*TRANSPOSE(A) IS PERFORMED  */MMGT 370
              T    =T+MULTIPLY(A(I,J),                                  MMGT 380
                   A(K,J),53),.                                         MMGT 390
              END,.                                                     MMGT 400
         S(L) =T,.                     /*STORE RESULTANT ELEMENT S(L) */MMGT 410
         L    =L+1,.                                                    MMGT 420
         IF K LT I                                                      MMGT 430
         THEN DO,.                     /*INCREMENT K                  */MMGT 440
              K    =K+1,.                                               MMGT 450
              GO TO NEXTK,.                                             MMGT 460
              END,.                                                     MMGT 470
         ELSE IF I LT II                                                MMGT 480
         THEN DO,.                     /*INCREMENT I                  */MMGT 490
              I    =I+1,.                                               MMGT 500
              GO TO NEXTI,.                                             MMGT 510
              END,.                                                     MMGT 520
         ERROR='0',.                   /*SUCCESSFUL OPERATION         */MMGT 530
         END,.                                                          MMGT 540
    END,.                              /*END OF PROCEDURE MMGT        */MMGT 550
 MPRM..                                                                 MPRM  10
 /*********************************************************************/MPRM  20
 /*                                                                   */MPRM  30
 /*      PERMUTE THE ROWS OR, IF OPT = 'C', THE COLUMNS OF A          */MPRM  40
 /*      MATRIX                                                       */MPRM  50
 /*                                                                   */MPRM  60
 /*********************************************************************/MPRM  70
    PROCEDURE(A,M,N,T,OPT,INV),.                                        MPRM  80
    DECLARE                                                             MPRM  90
         (A(*,*),AJ)                                                    MPRM 100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MPRM 110
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MPRM 120
         (M,N,T(*),IE,TI,I,J,IA,DI,IT)                                  MPRM 130
         BINARY FIXED,                                                  MPRM 140
         (OPT,INV,ERROR EXTERNAL)CHARACTER(1),.                         MPRM 150
    ERROR='D',.                        /*PRESET ERROR INDICATOR       */MPRM 160
    IF M GT 0                          /*TEST SPECIFIED DIMENSIONS    */MPRM 170
    THEN IF N GT 0                                                      MPRM 180
    THEN DO,.                                                           MPRM 190
         ERROR='0',.                                                    MPRM 200
         IF OPT='C'                    /*IF COLUMNS SHOULD BE MOVED   */MPRM 210
         THEN IE   =N,.                /*SET IE TO NUMBER OF COLUMNS  */MPRM 220
         ELSE IE   =M,.                /*RESP. NUMBER OF ROWS IF NOT  */MPRM 230
         IT   =IE,.                                                     MPRM 240
         DI,IA=1,.                                                      MPRM 250
         IF INV='1'                                                     MPRM 260
         THEN DO,.                                                      MPRM 270
              IA   =IE,.                                                MPRM 280
              IE   =DI,.                                                MPRM 290
              DI   =-DI,.                                               MPRM 300
              END,.                                                     MPRM 310
              DO I =IA TO IE BY DI,.                                    MPRM 320
              TI   =T(I),.             /*SET TI TO T(I)               */MPRM 330
              IF TI NE I               /*IS INTERCHANGE STEP NEEDED   */MPRM 340
              THEN DO,.                                                 MPRM 350
                   IF TI GT 0          /*IS ELEMENT OF T VALID        */MPRM 360
                   THEN IF TI LE IT                                     MPRM 370
                   THEN DO,.                                            MPRM 380
                        IF OPT='C'     /*CHECK SPECIFIED OPERATION    */MPRM 390
                                       /*INTERCHANGE COLUMNS I AND TI */MPRM 400
                        THEN DO J =1 TO M,.                             MPRM 410
                             AJ   =A(J,I),.                             MPRM 420
                             A(J,I)=A(J,TI),.                           MPRM 430
                             A(J,TI)=AJ,.                               MPRM 440
                             END,.                                      MPRM 450
                                       /*INTERCHANGE ROWS I AND TI    */MPRM 460
                        ELSE DO J =1 TO N,.                             MPRM 470
                             AJ   =A(I,J),.                             MPRM 480
                             A(I,J)=A(TI,J),.                           MPRM 490
                             A(TI,J)=AJ,.                               MPRM 500
                             END,.                                      MPRM 510
                        GOTO END,.                                      MPRM 520
                        END,.                                           MPRM 530
                   ERROR='T',.         /*T CONTAINS INVALID ELEMENTS  */MPRM 540
 END..                                                                  MPRM 550
                   END,.                                                MPRM 560
              END,.                                                     MPRM 570
         END,.                                                          MPRM 580
    END,.                              /*END OF PROCEDURE MPRM        */MPRM 590
 MTPI..                                                                 MTPI  10
 /*********************************************************************/MTPI  20
 /*                                                                   */MTPI  30
 /*      CALCULATE PERMUTATION VECTOR (OR ITS INVERSE IF INV ='1')    */MTPI  40
 /*      CORRESPONDING TO GIVEN TRANSPOSITION VECTOR                  */MTPI  50
 /*                                                                   */MTPI  60
 /*********************************************************************/MTPI  70
    PROCEDURE(T,N,INV,P),.                                              MTPI  80
    DECLARE                                                             MTPI  90
         (T(*),N,P(*),I,II,PI,TI,LN)                                    MTPI 100
         BINARY FIXED,                                                  MTPI 110
         (INV,ERROR EXTERNAL)CHARACTER(1),.                             MTPI 120
    I    =0,.                                                           MTPI 130
    II   =1,.                                                           MTPI 140
    LN   =N,.                                                           MTPI 150
    IF LN GT 0                         /*TEST SPECIFIED DIMENSION     */MTPI 160
    THEN DO,.                                                           MTPI 170
 NEXTI..                               /*PRESET PERMUTATION VECTOR    */MTPI 180
         I    =I+1,.                   /*TO IDENTITY PERMUTATION      */MTPI 190
         P(I) =I,.                                                      MTPI 200
         IF I LT N                                                      MTPI 210
         THEN GO TO NEXTI,.                                             MTPI 220
         IF INV NE '1'                 /*SHOULD THE INVERSE PERMUTAT. */MTPI 230
         THEN I    =1,.                /*VECTOR BE GENERATED          */MTPI 240
         ELSE II   =-II,.                                               MTPI 250
         ERROR='0',.                   /*PRESET ERROR INDICATOR       */MTPI 260
 REP..                                                                  MTPI 270
         TI   =T(I),.                  /*REPLACE TI BY T(I)           */MTPI 280
         IF TI GT 0                    /*IF (I,TI) IS A VALID         */MTPI 290
         THEN IF TI LE LN              /*TRANSPOSITION THEN           */MTPI 300
         THEN DO,.                     /*INTERCHANGE P(I) AND P(TI)   */MTPI 310
              PI   =P(I),.                                              MTPI 320
              P(I) =P(TI),.                                             MTPI 330
              P(TI)=PI,.                                                MTPI 340
         GOTO STEP,.                                                    MTPI 350
              END,.                                                     MTPI 360
         ERROR='T',.                   /*MARK INVALID TRANSPOSITION   */MTPI 370
 STEP..                                                                 MTPI 380
         I    =I+II,.                                                   MTPI 390
         IF I LE N                     /*HAS I ITS FINAL VALUE        */MTPI 400
         THEN IF I GE 1                                                 MTPI 410
         THEN GO TO REP,.                                               MTPI 420
         END,.                                                          MTPI 430
    ELSE ERROR='D',.                   /*ERROR IN SPECIFIED DIMENSION */MTPI 440
    END,.                              /*END OF PROCEDURE MTPI        */MTPI 450
 MPIT..                                                                 MPIT  10
 /*********************************************************************/MPIT  20
 /*                                                                   */MPIT  30
 /*      CALCULATE THE INVERSE PERMUTATION VECTOR OR, IF OPT = 'T',   */MPIT  40
 /*      THE TRANSPOSITION VECTORS OF THE GIVEN AND INVERSE           */MPIT  50
 /*      PERMUTATIONS                                                 */MPIT  60
 /*                                                                   */MPIT  70
 /*********************************************************************/MPIT  80
    PROCEDURE(P,N,OPT,PI),.                                             MPIT  90
    DECLARE                                                             MPIT 100
         (P(*),N,PI(*),LN,J,P1,P2)                                      MPIT 110
         BINARY FIXED,                                                  MPIT 120
         (OPT,ERROR EXTERNAL)CHARACTER(1),.                             MPIT 130
    LN,J =N,.                                                           MPIT 140
    IF LN GT 0                         /*TEST SPECIFIED DIMENSION     */MPIT 150
    THEN DO,.                                                           MPIT 160
 REP..                                                                  MPIT 170
         PI(J)=0,.                     /*PRESET RESULTING VALUES IN   */MPIT 180
         J    =J-1,.                   /*ORDER TO CHECK PERMUTATION   */MPIT 190
         IF J GT 0                                                      MPIT 200
         THEN GO TO REP,.                                               MPIT 210
         ERROR='P',.                   /*PRESET ERROR INDICATOR       */MPIT 220
 NEXTJ..                                                                MPIT 230
         J    =J+1,.                                                    MPIT 240
         P1   =P(J),.                  /*SET P1 TO P(J)               */MPIT 250
         IF P1 LE LN                   /*FEASIBILITY TEST..           */MPIT 260
         THEN IF P1 GT 0               /*IS 1 LE P1 LE N, AND IS      */MPIT 270
         THEN IF PI(P1)=0              /*P1 DIFF. FROM PREVIOUS VALUES*/MPIT 280
         THEN DO,.                                                      MPIT 290
              PI(P1)=J,.               /*SET P1-TH ELEMENT OF PI TO J */MPIT 300
              IF J LT LN               /*HAS J ITS FINAL VALUE        */MPIT 310
              THEN GO TO NEXTJ,.                                        MPIT 320
              ERROR='0',.              /*VALID PERMUTATION VECTOR     */MPIT 330
              IF OPT='T'               /*IF SPECIFIED THEN TRANSPOS.  */MPIT 340
              THEN DO J =1 TO LN,.     /*VECTORS ARE CALCULATED       */MPIT 350
                   P1   =P(J),.                                         MPIT 360
                   P2   =PI(J),.                                        MPIT 370
                   P(P2)=P1,.                                           MPIT 380
                   PI(P1)=P2,.                                          MPIT 390
                   END,.                                                MPIT 400
              END,.                                                     MPIT 410
         END,.                                                          MPIT 420
    ELSE ERROR='D',.                   /*ERROR IN SPECIFIED DIMENSION */MPIT 430
    END,.                              /*END OF PROCEDURE MPIT        */MPIT 440
 MFG..                                                                  MFG   10
 /*********************************************************************/MFG   20
 /*                                                                   */MFG   30
 /*      FACTORIZE A GENERAL NON-SINGULAR MATRIX A INTO A PRODUCT     */MFG   40
 /*      OF A LOWER TRIANGULAR MATRIX L AND AN UPPER TRIANGULAR       */MFG   50
 /*      MATRIX U OVERWRITTEN ON A, OMITTING UNIT DIAGONAL OF U       */MFG   60
 /*                                                                   */MFG   70
 /*********************************************************************/MFG   80
    PROCEDURE(A,IPER,N),.                                               MFG   90
    DECLARE                                                             MFG  100
         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MFG  110
         EPS BINARY FLOAT,                                              MFG  120
         W BINARY FLOAT(53),                                            MFG  130
         (A(*,*),H,R)                                                   MFG  140
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MFG  150
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MFG  160
         (IPER(*),I,IND,J,K,L,LN,M,N)                                   MFG  170
         BINARY FIXED,.                                                 MFG  180
    LN   =N,.                                                           MFG  190
    IF LN LE 0                         /*TEST SPECIFIED DIMENSION     */MFG  200
    THEN DO,.                                                           MFG  210
         ERROR='P',.                   /*P MEANS WRONG PARAMETER      */MFG  220
         GO TO RETURN,.                                                 MFG  230
         END,.                                                          MFG  240
    ERROR='0',.                        /*PRESET ERROR INDICATOR       */MFG  250
    EPS  =1.E-7,.                      /*SINGLE PRECISION VERSION  /*S*/MFG  254
  /*EPS  =1.E-16,.                     /*DOUBLE PRECISION VERSION  /*D*/MFG  255
                                       /*******************************/MFG  260
         DO L =1 TO LN,.               /*CALCULATE SCALING FACTORS    */MFG  270
         R    =0,.                     /*******************************/MFG  280
              DO J =1 TO LN,.          /*COMPUTE ABSOLUTELY GREATEST  */MFG  290
              H    =ABS(A(L,J)),.      /*ELEMENT R IN EACH ROW OF A   */MFG  300
              IF H GT R                                                 MFG  310
              THEN R    =H,.                                            MFG  320
              END,.                                                     MFG  330
         IF R = 0                      /*TEST FOR ZEROS IN ANY ROW    */MFG  340
         THEN DO,.                                                      MFG  350
              ERROR='S',.              /*A ROW IN GIVEN MATRIX A      */MFG  360
              GO TO RETURN,.           /*IS ZERO                      */MFG  370
              END,.                                                     MFG  380
                                       /*STORE R IN AN INTEGER VECTOR */MFG  390
         ELSE UNSPEC(IPER(L))=UNSPEC(R),.                               MFG  400
         END,.                         /*******************************/MFG  410
                                       /*GAUSS  ELIMINATION           */MFG  420
         DO L =1 TO LN,.               /*******************************/MFG  430
         UNSPEC(M)='1'B,.              /*PRESET M AS SMALLEST INTEGER */MFG  440
              DO J =L TO LN,.          /*MODIFY COLUMN, SEARCH PIVOT  */MFG  450
              W,H  =A(J,L),.           /*SAVE ELEMENT                 */MFG  460
                   DO K =1 TO L-1,.    /*COMPUTE SCALAR PRODUCTS      */MFG  470
                   W    =W-MULTIPLY(A(J,K),A(K,L),53),.                 MFG  480
                   END,.                                                MFG  490
              A(J,L)=W,.               /*UPDATE ELEMENT               */MFG  500
              W    =ABS(W),.                                            MFG  510
              UNSPEC(I)=UNSPEC(W),.                                     MFG  520
              I    =I-IPER(J),.        /*DIFFERENCE OF EXPONENTS      */MFG  530
              IF I GT M                /*SEARCH FOR LARGEST DIFFERENCE*/MFG  540
              THEN DO,.                                                 MFG  550
                   IND  =J,.           /*STORE ROW-INDEX              */MFG  560
                   M    =I,.                                            MFG  570
                   R    =H,.           /*SAVE ORIGINAL ELEMENT FOR    */MFG  580
                   END,.               /*TEST ON LOSS OF SIGNIFICANCE */MFG  590
              END,.                                                     MFG  600
         IF IND GT L                   /*IS INTERCHANGE NECESSARY     */MFG  610
         THEN DO,.                                                      MFG  620
              IPER(IND)=IPER(L),.      /*RESTORE PERMUTATION VECTOR   */MFG  630
                   DO J =1 TO LN,.     /*INTERCHANGE ROWS OF MATRIX A */MFG  640
                   H    =A(L,J),.                                       MFG  650
                   A(L,J)=A(IND,J),.                                    MFG  660
                   A(IND,J)=H,.                                         MFG  670
                   END,.                                                MFG  680
              END,.                                                     MFG  690
         IPER(L)=IND,.                 /*STORE ROW NUMBER             */MFG  700
         H    =A(L,L),.                /*H CONTAINS THE PIVOT         */MFG  710
         IF ABS(H) LE ABS(EPS*R)       /*TEST PIVOT ELEMENT FOR LOSS  */MFG  720
         THEN IF H NE 0                /*OF SIGNIFICANCE AND FOR ZERO */MFG  730
         THEN ERROR='W',.              /*W MEANS WARNING              */MFG  740
         ELSE IF R = 0                 /*IS ORIGINAL ELEMENT ZERO     */MFG  750
         THEN DO,.                                                      MFG  760
              ERROR='S',.              /*CALCULATED PIVOT AND THE     */MFG  770
              GO TO RETURN,.           /*ORIGINAL ELEMENT ARE ZERO    */MFG  780
              END,.                                                     MFG  790
         ELSE DO ,.                    /*CORRECT ZERO PIVOT           */MFG  800
              H    =EPS*R,.                                             MFG  810
              ERROR='C',.              /*WARNING AND CORRECTION       */MFG  830
              END,.                                                     MFG  840
              DO J =L+1 TO LN,.        /*EXECUTE LOOP OVER L-TH ROW   */MFG  850
              W    =0,.                                                 MFG  860
                   DO K =1 TO L-1,.    /*CALCULATE SCALAR PRODUCTS    */MFG  870
                   W    =W+MULTIPLY(A(L,K),A(K,J),53),.                 MFG  880
                   END,.                                                MFG  890
              A(L,J)=(A(L,J)-W)/H,.    /*COMPUTE NEW ELEMENT          */MFG  900
              END,.                                                     MFG  910
         END,.                                                          MFG  920
 RETURN..                                                               MFG  930
    END,.                              /*END OF PROCEDURE MFG         */MFG  940
 MFS..                                                                  MFS   10
 /*********************************************************************/MFS   20
 /*                                                                   */MFS   30
 /*           FACTORIZE SYMMETRIC POSITIVE DEFINITE MATRIX            */MFS   40
 /*                                                                   */MFS   50
 /*********************************************************************/MFS   60
    PROCEDURE(A,N),.                                                    MFS   70
    DECLARE                                                             MFS   80
         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MFS   90
         EPS BINARY FLOAT,                                              MFS  100
         SUM BINARY FLOAT(53),                                          MFS  110
         A(*)                                                           MFS  120
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MFS  130
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MFS  140
         (IND,IB,K,KL,L,N)                                              MFS  150
         BINARY FIXED,.                                                 MFS  160
    IF N LE 0                          /*TEST SPECIFIED DIMENSION     */MFS  170
    THEN DO,.                                                           MFS  180
         ERROR='P',.                   /*P MEANS WRONG PARAMETER      */MFS  190
         GO TO RETURN,.                                                 MFS  200
         END,.                                                          MFS  210
    ERROR='0',.                        /*PRESET ERROR INDICATOR       */MFS  220
    EPS  =1.E-7,.                      /*SINGLE PRECISION VERSION  /*S*/MFS  224
  /*EPS  =1.E-16,.                     /*DOUBLE PRECISION VERSION  /*D*/MFS  225
    IND  =0,.                          /*INITIALIZE ROW-LOOP          */MFS  230
    IB   =1,.                                                           MFS  240
         DO K =1 TO N,.                /*EXECUTE LOOP OVER ALL ROWS   */MFS  250
         KL   =0,.                                                      MFS  260
 LOOP..                                /*PERFORM LOOP WITHIN K-TH ROW */MFS  270
         SUM  =0,.                                                      MFS  280
              DO L =IB TO IND,.        /*CALCULATE SCALAR PRODUCT     */MFS  290
              KL   =KL+1,.                                              MFS  300
              SUM  =SUM+MULTIPLY(A(L),A(KL),53),.                       MFS  310
              END,.                                                     MFS  320
         KL   =KL+1,.                                                   MFS  330
         IND  =IND+1,.                                                  MFS  340
         SUM  =A(IND)-SUM,.                                             MFS  350
         IF IND GT KL                  /*IS A(IND) ON DIAGONAL        */MFS  360
         THEN DO,.                                                      MFS  370
              A(IND)=SUM/A(KL),.       /*CALCULATE NON-DIAGONAL TERM  */MFS  380
              GO TO LOOP,.                                              MFS  390
              END,.                                                     MFS  400
         IF SUM GT 0                   /*TEST SIGN OF RADICAND        */MFS  410
         THEN DO,.                     /*POSITIVE RADICAND            */MFS  420
              IF SUM LE ABS(EPS*A(IND))/*TEST ON LOSS OF SIGNIFICANCE */MFS  430
              THEN ERROR='W',.         /*W MEANS WARNING              */MFS  440
              A(IND)=SQRT(SUM),.       /*CALCULATE NEW DIAGONAL TERM  */MFS  450
              END,.                                                     MFS  460
         ELSE DO,.                     /*NEGATIVE RADICAND            */MFS  470
              ERROR='S',.              /*S MEANS MATRIX A IS NOT      */MFS  480
              GO TO RETURN,.           /*POSITIVE DEFINITE            */MFS  500
              END,.                                                     MFS  510
         IB   =IB+K,.                                                   MFS  520
         END,.                                                          MFS  530
 RETURN..                                                               MFS  540
    END,.                              /*END OF PROCEDURE MFS         */MFS  550
 MFSB..                                                                 MFSB  10
 /*********************************************************************/MFSB  20
 /*                                                                   */MFSB  30
 /*      FACTORIZE A GIVEN POSITIVE DEFINITE N BY N MATRIX A          */MFSB  40
 /*      WITH SYMMETRIC BAND STRUCTURE (NUD UPPER CODIAGONALS)        */MFSB  50
 /*                                                                   */MFSB  60
 /*********************************************************************/MFSB  70
    PROCEDURE(A,N,NUD),.                                                MFSB  80
    DECLARE                                                             MFSB  90
         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MFSB 100
         EPS BINARY FLOAT,                                              MFSB 110
         SUM BINARY FLOAT(53),                                          MFSB 120
         (A(*,*),PIV)                                                   MFSB 130
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MFSB 140
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MFSB 150
         (I,ID,J,JEND,K,KK,KEND,                                        MFSB 160
         LN,LNUD,M,N,NC,NR,NUD)                                         MFSB 170
         BINARY FIXED,.                                                 MFSB 180
    LN   =N,.                                                           MFSB 190
    LNUD =NUD,.                                                         MFSB 200
    ERROR='P',.                        /*P MEANS WRONG PARAMETER      */MFSB 210
    IF LNUD LT 0                       /*TEST SPECIFIED NUMBER OF     */MFSB 220
    THEN GO TO RETURN,.                /*UPPER CODIAGONALS            */MFSB 230
    EPS  =1.E-7,.                      /* SINGLE PRECISION VERSION /*S*/MFSB 234
  /*EPS  =1.E-16,.                     /* DOUBLE PRECISION VERSION /*D*/MFSB 235
    IF LN LE LNUD                      /*TEST SPECIFIED DIMENSION N   */MFSB 240
    THEN GO TO RETURN,.                                                 MFSB 250
    NR   =LN-LNUD,.                    /*INITIALIZE PARAMETERS        */MFSB 260
    NC,JEND=LNUD+1,.                                                    MFSB 270
         DO I =1 TO LN,.               /*EXECUTE LOOP OVER ALL ROWS   */MFSB 280
         IF I GT NR                    /*MODIFY JEND AT THE END OF    */MFSB 290
         THEN JEND =JEND-1,.           /*THE BAND STRUCTURE           */MFSB 300
         KEND =NC,.                    /*INITIALIZE KEND AND M        */MFSB 310
         M    =NC-I,.                                                   MFSB 320
         IF M GT 0                     /*MODIFY KEND AT THE START OF  */MFSB 330
         THEN KEND =KEND-M,.           /*THE BAND STRUCTURE           */MFSB 340
              DO J =1 TO JEND,.        /*EXECUTE LOOP OVER I-TH ROW   */MFSB 350
              ID   =J-1,.              /*CALULATE INCREMENT ID        */MFSB 360
              KK   =I,.                /*INITIALIZE KK AND SUM        */MFSB 370
              SUM  =0,.                                                 MFSB 380
                   DO K =J+1 TO KEND,. /*COMPUTE SCALAR PRODUCT SUM   */MFSB 390
                   KK   =KK-1,.                                         MFSB 400
                   SUM  =SUM+MULTIPLY(A(KK,K),A(KK,K-ID),53),.          MFSB 410
                   END,.                                                MFSB 420
              SUM  =A(I,J)-SUM,.                                        MFSB 430
              IF J = 1                 /*IS A(I,J) DIAGONAL ELEMENT   */MFSB 440
              THEN IF SUM GT 0         /*TEST FOR LOSS OF SIGNIFICANT */MFSB 450
              THEN DO,.                /*DIGITS AND COMPUTE NEW TERM  */MFSB 460
                   IF SUM LE ABS(EPS*A(I,J))                            MFSB 470
                   THEN ERROR='W',.                                     MFSB 480
                   PIV,A(I,J)=SQRT(SUM),.                               MFSB 490
                   END,.                                                MFSB 500
              ELSE DO,.                                                 MFSB 510
                   ERROR='S',.         /*A IS NOT POSITIVE DEFINITE   */MFSB 520
                   GO TO RETURN,.                                       MFSB 540
                   END,.                                                MFSB 550
              ELSE A(I,J)=SUM/PIV,.    /*MODIFY NON-DIAGONAL ELEMENT  */MFSB 560
              IF J LE M                                                 MFSB 570
              THEN KEND =KEND+1,.      /*UPDATE KEND IF NECESSARY     */MFSB 580
              END,.                                                     MFSB 590
         END,.                                                          MFSB 600
    ERROR='0',.                        /*SUCCESSFUL OPERATION         */MFSB 610
 RETURN..                                                               MFSB 620
    END,.                              /*END OF PROCEDURE MFSB        */MFSB 630
 MFGR..                                                                 MFGR  10
 /*********************************************************************/MFGR  20
 /*                                                                   */MFGR  30
 /*      FOR A GIVEN M BY N MATRIX A THE FOLLOWING CALCULATIONS       */MFGR  40
 /*      ARE PERFORMED                                                */MFGR  50
 /*      (1) DETERMINE RANK AND LINEARLY INDEPENDENT ROWS AND         */MFGR  60
 /*           COLUMNS  (BASIS)                                        */MFGR  70
 /*      (2) FACTORIZE A SUBMATRIX OF MAXIMAL RANK                    */MFGR  80
 /*      (3) EXPRESS NON-BASIC ROWS IN TERMS OF BASIC ONES            */MFGR  90
 /*      (4) EXPRESS BASIC VARIABLES IN TERMS OF FREE ONES            */MFGR 100
 /*                                                                   */MFGR 110
 /*********************************************************************/MFGR 120
    PROCEDURE(A,M,N,EPS,IRANK,IROW,ICOL),.                              MFGR 130
    DECLARE                                                             MFGR 140
         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MFGR 150
         EPS BINARY FLOAT,                                              MFGR 160
         SUM BINARY FLOAT(53),                                          MFGR 170
         (A(*,*),HOLD,PIV,SAVE,TOL,WORK)                                MFGR 180
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MFGR 190
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MFGR 200
         (ICOL(*),IROW(*),I,IC,IR,                                      MFGR 210
         IND,IRANK,J,K,LM,LN,M,N)                                       MFGR 220
         BINARY FIXED,.                                                 MFGR 230
    LM   =M,.                                                           MFGR 240
    LN   =N,.                                                           MFGR 250
    ERROR='P',.                        /*P MEANS WRONG INPUT          */MFGR 260
    IF LM LT 1                         /*TEST OF DIMENSION M          */MFGR 270
    THEN GO TO RETURN,.                                                 MFGR 280
    IF LN LT 1                         /*TEST OF DIMENSION N          */MFGR 290
    THEN GO TO RETURN,.                                                 MFGR 300
    ERROR='0',.                        /*PRESET ERROR INDICATOR       */MFGR 310
                                       /*INIT. COLUMN INDEX VECTOR    */MFGR 320
    PIV  =0,.                          /*SEARCH FIRST PIVOT ELEMENT   */MFGR 330
         DO J =1 TO LN,.               /*EXECUTE LOOP OVER COLUMNS    */MFGR 340
         ICOL(J)=J,.                                                    MFGR 350
              DO I =1 TO LM,.          /*EXECUTE LOOP OVER ALL ROWS   */MFGR 360
              HOLD =A(I,J),.                                            MFGR 370
              IF ABS(HOLD) GT ABS(PIV)                                  MFGR 380
              THEN DO,.                                                 MFGR 390
                   PIV  =HOLD,.        /*SAVE VALUE AND INDEX OF THE  */MFGR 400
                   IR   =I,.           /*ABSOLUTELY GREATEST ELEMENT  */MFGR 410
                   IC   =J,.                                            MFGR 420
                   END,.                                                MFGR 430
              END,.                                                     MFGR 440
         END,.                                                          MFGR 450
         DO I =1 TO LM,.               /*INITIALIZE ROW INDEX VECTOR  */MFGR 460
         IROW(I)=I,.                                                    MFGR 470
         END,.                                                          MFGR 480
    TOL  =ABS(EPS*PIV),.               /*SET UP INTERNAL TOLERANCE    */MFGR 490
    IRANK=0,.                          /*******************************/MFGR 500
         DO J =1 TO LN,.               /*GAUSS  ELIMINATION           */MFGR 510
         IF ABS(PIV) LE TOL            /*******************************/MFGR 520
         THEN GO TO ROW,.              /*PIVOT IS NOT FEASIBLE        */MFGR 530
         IRANK=J,.                     /*UPDATE RANK                  */MFGR 540
         IF IR GT IRANK                /*SHOULD ROWS BE INTERCHANGED  */MFGR 550
         THEN DO,.                                                      MFGR 560
                   DO I =1 TO LN,.     /*INTERCHANGE ROWS             */MFGR 570
                   SAVE =A(IRANK,I),.                                   MFGR 580
                   A(IRANK,I)=A(IR,I),.                                 MFGR 590
                   A(IR,I)=SAVE,.                                       MFGR 600
                   END,.                                                MFGR 610
              IND  =IROW(IR),.         /*UPDATE ROW INDEX VECTOR      */MFGR 620
              IROW(IR)=IROW(IRANK),.                                    MFGR 630
              IROW(IRANK)=IND,.                                         MFGR 640
              END,.                                                     MFGR 650
         IF IC GT IRANK                /*SHOULD COLUMNS BE INTER-     */MFGR 660
         THEN DO,.                     /*CHANGED                      */MFGR 670
                   DO I =1 TO LM,.     /*INTERCHANGE COLUMNS          */MFGR 680
                   SAVE =A(I,IRANK),.                                   MFGR 690
                   A(I,IRANK)=A(I,IC),.                                 MFGR 700
                   A(I,IC)=SAVE,.                                       MFGR 710
                   END,.                                                MFGR 720
              IND  =ICOL(IC),.         /*UPDATE COLUMN INDEX VECTOR   */MFGR 730
              ICOL(IC)=ICOL(IRANK),.                                    MFGR 740
              ICOL(IRANK)=IND,.                                         MFGR 750
              END,.                                                     MFGR 760
         IND  =IRANK+1,.               /*INITIALIZE LOOP FOR TRANS-   */MFGR 770
         SAVE =PIV,.                   /*FORMING CURRENT SUBMATRIX    */MFGR 780
         PIV  =0,.                     /*AND SEARCHING NEXT PIVOT     */MFGR 790
              DO I =IND TO LM,.                                         MFGR 800
              HOLD,A(I,IRANK)=A(I,IRANK)/SAVE,.                         MFGR 810
                   DO K =IND TO LN,.                                    MFGR 820
                   WORK,A(I,K)=A(I,K)-HOLD*A(IRANK,K),.                 MFGR 830
                                       /*SEARCH NEXT PIVOT ELEMENT    */MFGR 840
                   IF ABS(WORK) GT ABS(PIV)                             MFGR 850
                   THEN DO,.                                            MFGR 860
                        PIV  =WORK,.   /*SAVE VALUE AND INDEX OF THE  */MFGR 870
                        IR   =I,.      /*ABSOLUTELY GREATEST ELEMENT  */MFGR 880
                        IC   =K,.                                       MFGR 890
                        END,.                                           MFGR 900
                   END,.                                                MFGR 910
              END,.                                                     MFGR 920
         END,.                         /*******************************/MFGR 930
 ROW..                                 /*COMPUTE ROW DEPENDENCIES     */MFGR 940
    IF IRANK= LM                       /*******************************/MFGR 950
    THEN GO TO HOM,.                   /*ALL ROWS ARE BASIC ONES      */MFGR 960
         DO J =IRANK-1 TO 1 BY -1,.    /*SET UP MATRIX EXPRESSING     */MFGR 970
         IR   =J+1,.                   /*ROW DEPENDENCIES             */MFGR 980
              DO I =IND TO LM,.        /*LOOP FOR NON-BASIC ROWS      */MFGR 990
              SUM  =0,.                                                 MFGR1000
                   DO K =IR TO IRANK,. /*CALCULATE SCALAR PRODUCTS    */MFGR1010
                   SUM  =SUM+MULTIPLY(A(I,K),A(K,J),53),.               MFGR1020
                   END,.                                                MFGR1030
              A(I,J)=A(I,J)-SUM,.      /*MODIFY ELEMENT               */MFGR1040
              END,.                                                     MFGR1050
         END,.                         /*******************************/MFGR1060
 HOM..                                 /*COMPUTE HOMOGENEOUS SOLUTION */MFGR1070
    IF IRANK= LN                       /*******************************/MFGR1080
    THEN GO TO RETURN,.                /*ALL COLUMNS ARE BASIC ONES   */MFGR1090
                                       /*SET UP MATRIX EXPRESSING     */MFGR1100
         DO J =IRANK TO 1 BY -1,.      /*BASIC VARIABLES IN TERMS OF  */MFGR1110
         IR   =J+1,.                   /*FREE PARAMETERS              */MFGR1120
              DO I =IND TO LN,.        /*LOOP FOR FREE COLUMNS        */MFGR1130
              SUM  =0,.                                                 MFGR1140
                   DO K =IR TO IRANK,. /*CALCULATE SCALAR PRODUCTS    */MFGR1150
                   SUM  =SUM+MULTIPLY(A(J,K),A(K,I),53),.               MFGR1160
                   END,.                                                MFGR1170
              A(J,I)=-(A(J,I)+ SUM)/A(J,J),.                            MFGR1180
              END,.                                                     MFGR1190
         END,.                                                          MFGR1200
 RETURN..                                                               MFGR1210
    END,.                              /*END OF PROCEDURE MFGR        */MFGR1220
 MDLS..                                                                 MDLS  10
 /*********************************************************************/MDLS  20
 /*                                                                   */MDLS  30
 /*      FOR AN EQUATION SYSTEM  A*X=R  WITH SYMMETRIC POSITIVE       */MDLS  40
 /*      DEFINITE MATRIX  A=T*TRANSPOSE(T)  CALCULATE OPTIONALLY      */MDLS  50
 /*           SOLUTION X                                              */MDLS  60
 /*           INVERSE(T) * R                                          */MDLS  70
 /*           TRANSPOSE(INVERSE(T)) * R                               */MDLS  80
 /*      FOR GIVEN TRIANGULAR FACTOR T AND RIGHT HAND SIDE MATRIX R   */MDLS  90
 /*                                                                   */MDLS 100
 /*********************************************************************/MDLS 110
    PROCEDURE(R,M,N,A,OPT),.                                            MDLS 120
    DECLARE                                                             MDLS 130
         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MDLS 140
         (OPT,COPT) CHARACTER(1),      /*OPTION PARAMETER             */MDLS 150
         SUM BINARY FLOAT(53),                                          MDLS 160
         (R(*,*),A(*))                                                  MDLS 170
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MDLS 180
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MDLS 190
         (I,IEND,II,IIA,IID,IIST,IK,                                    MDLS 200
         IKA,IKD,IKST,J,JEND,K,L,LD,                                    MDLS 210
         LX,LDX,M,MSTA,MDEL,MX,N)                                       MDLS 220
         BINARY FIXED,.                                                 MDLS 230
                                       /*******************************/MDLS 240
    IID,IKA=1,.                        /*INITIALIZE PARAMETERS FOR    */MDLS 250
    IKD,IIA=0,.                        /*DIVISION FROM LEFT           */MDLS 260
    IEND =N,.                          /*******************************/MDLS 270
    JEND =M-1,.                                                         MDLS 280
    GO TO BOTH,.                                                        MDLS 290
 MDRS..                                                                 MDLS 300
 /*********************************************************************/MDLS 310
 /*                                                                   */MDLS 320
 /*      FOR AN EQUATION SYSTEM  X*A=R  WITH SYMMETRIC POSITIVE       */MDLS 330
 /*      DEFINITE MATRIX  A=T*TRANSPOSE(T)  CALCULATE OPTIONALLY      */MDLS 340
 /*           SOLUTION X                                              */MDLS 350
 /*           R * TRANSPOSE(INVERSE(T))                               */MDLS 360
 /*           R * INVERSE(T)                                          */MDLS 370
 /*      FOR GIVEN TRIANGULAR FACTOR T AND RIGHT HAND SIDE MATRIX R   */MDLS 380
 /*                                                                   */MDLS 390
 /*********************************************************************/MDLS 400
    ENTRY(R,M,N,A,OPT),.                                                MDLS 410
                                       /*******************************/MDLS 420
    IID,IKA=0,.                        /*INITIALIZE PARAMETERS FOR    */MDLS 430
    IKD,IIA=1,.                        /*DIVISION FROM RIGHT          */MDLS 440
    IEND =M,.                          /*******************************/MDLS 450
    JEND =N-1,.                                                         MDLS 460
 BOTH..                                                                 MDLS 470
    ERROR='P',.                        /*P MEANS WRONG PARAMETER      */MDLS 480
    IF IEND LE 0                       /*TEST INPUT DIMENSIONS M AND N*/MDLS 490
    THEN GO TO RETURN,.                                                 MDLS 500
    IF JEND LT 0                                                        MDLS 510
    THEN GO TO RETURN,.                                                 MDLS 520
    IIST,IKST=1,.                                                       MDLS 530
    COPT =OPT,.                                                         MDLS 540
    IF COPT= '2'                       /*TEST SPECIFIED OPERATION     */MDLS 550
    THEN GO TO NEW,.                                                    MDLS 560
                                       /*******************************/MDLS 570
    LX   =0,.                          /*INITIALIZATION FOR  A*X = R  */MDLS 580
    MSTA,MDEL,MX,LD=1,.                /*AND FOR  X*TRANSPOSE(A) = R  */MDLS 590
                                       /*******************************/MDLS 600
 MAIN..                                /*EXECUTE DIVISION PROCESS     */MDLS 610
         DO J =0 TO JEND,.                                              MDLS 620
         II   =IIST,.                  /*INITIALIZE ADDRESSING VALUES */MDLS 630
         IK   =IKST,.                                                   MDLS 640
              DO I =1 TO IEND,.        /*EXECUTE LOOP OVER COLUMNS    */MDLS 650
              SUM  =0,.                /*OR ROWS OF MATRIX R          */MDLS 660
              L    =MSTA,.                                              MDLS 670
              LDX  =LD,.                                                MDLS 680
                   DO K =1 TO J,.      /*COMPUTE SCALAR PRODUCT SUM   */MDLS 690
                   SUM  =SUM+MULTIPLY(A(L),R(II,IK),53),.               MDLS 700
                   L    =L+LDX,.                                        MDLS 710
                   LDX  =LDX+LX,.      /*UPDATE ADDRESSING PARAMETERS */MDLS 720
                   II   =II+IID,.                                       MDLS 730
                   IK   =IK+IKD,.                                       MDLS 740
                   END,.                                                MDLS 750
              IF A(L)= 0               /*IS DIAGONAL TERM IN A ZERO   */MDLS 760
              THEN DO,.                                                 MDLS 770
                   ERROR='S',.         /*S MEANS ZERO DIAGONAL TERM   */MDLS 780
                   GO TO RETURN,.      /*IN TRIANGULAR FACTOR A       */MDLS 790
                   END,.                                                MDLS 800
                                       /*CALCULATE NEW ELEMENT        */MDLS 810
              ELSE R(II,IK)=(R(II,IK)-SUM)/A(L),.                       MDLS 820
              II   =IIST+IIA*I,.                                        MDLS 830
              IK   =IKST+IKA*I,.       /*UPDATE ADDRESSING PARAMETERS */MDLS 840
              END,.                                                     MDLS 850
         MSTA =MSTA+MDEL,.             /*MODIFY START PARAMETERS      */MDLS 860
         MDEL =MDEL+MX,.                                                MDLS 870
         END,.                                                          MDLS 880
    IF COPT NE '1'                     /*TEST END OF OPERATION        */MDLS 890
    THEN                                                                MDLS 900
 NEW..                                 /*******************************/MDLS 910
         DO,.                          /*INITIALIZATION FOR  X*A = R  */MDLS 920
         COPT ='1',.                   /*AND FOR  TRANSPOSE(A)*X = R  */MDLS 930
         MX   =0,.                     /*******************************/MDLS 940
         LX   =1,.                                                      MDLS 950
         MDEL =-1,.                                                     MDLS 960
         LD   =-JEND,.                                                  MDLS 970
         MSTA =(JEND+1)*(JEND+2)/2,.                                    MDLS 980
         IID  =-IID,.                                                   MDLS 990
         IKD  =-IKD,.                                                   MDLS1000
         IF IIA= 0                     /*SHOULD DIVISION FROM LEFT    */MDLS1010
         THEN IIST =M,.                /*BE EXECUTED                  */MDLS1020
         ELSE IKST =N,.                                                 MDLS1030
         GO TO MAIN,.                  /*GO TO MAIN PART OF MDLS      */MDLS1040
         END,.                                                          MDLS1050
    ERROR='0',.                        /*SUCCESSFUL OPERATION         */MDLS1060
 RETURN..                                                               MDLS1070
    END,.                              /*END OF PROCEDURE MDLS        */MDLS1080
 MDSB..                                                                 MDSB  10
 /*********************************************************************/MDSB  20
 /*                                                                   */MDSB  30
 /*      FOR AN EQUATION SYSTEM  A*X=R  WITH SYMMETRIC POSITIVE       */MDSB  40
 /*      DEFINITE  BAND  MATRIX   A=TRANSPOSE(T)*T   CALCULATE        */MDSB  50
 /*      OPTIONALLY                                                   */MDSB  60
 /*           SOLUTION X                                              */MDSB  70
 /*           TRANSPOSE(INVERSE(T)) * R                               */MDSB  80
 /*           INVERSE(T) * R                                          */MDSB  90
 /*      FOR GIVEN UPPER BAND FACTOR T AND GENERAL RIGHT HAND         */MDSB 100
 /*      SIDE MATRIX R                                                */MDSB 110
 /*                                                                   */MDSB 120
 /*********************************************************************/MDSB 130
    PROCEDURE(A,R,N,NUD,M,OPT),.                                        MDSB 140
    DECLARE                                                             MDSB 150
         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MDSB 160
         (OPT,COPT) CHARACTER(1),      /*OPTION PARAMETER             */MDSB 170
         SUM BINARY FLOAT(53),                                          MDSB 180
         (A(*,*),R(*,*),H)                                              MDSB 190
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MDSB 200
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MDSB 210
         (I,ISTA,IEND,INCR,J,K,                                         MDSB 220
         KEND,KI,KINC,KK,L,LM,                                          MDSB 230
         LN,LNUD,M,N,NC,NR,NUD)                                         MDSB 240
         BINARY FIXED,.                                                 MDSB 250
    LN   =N,.                          /*STORE VARIABLES N, NUD, M,   */MDSB 260
    LNUD =NUD,.                        /*OPT FROM CALLING SEQUENCE    */MDSB 270
    LM   =M,.                          /*INTO LOCAL PARAMETERS        */MDSB 280
    COPT =OPT,.                                                         MDSB 290
    ERROR='P',.                        /*P MEANS WRONG INPUT          */MDSB 300
    IF LNUD LT 0                       /*TEST SPECIFIED INPUT PARA-   */MDSB 310
    THEN GO TO RETURN,.                /*METERS NUD, N, M             */MDSB 320
    IF LN LE LNUD                                                       MDSB 330
    THEN GO TO RETURN,.                /*PROCEDURE RETURNS IF AT      */MDSB 340
    IF LM LT 0                         /*LEAST ONE OF THE PARAMETERS  */MDSB 350
    THEN GO TO RETURN,.                /*NUD, N, M IS WRONG           */MDSB 360
                                       /*                             */MDSB 370
    NC   =LNUD+1,.                     /*NC AND NR ARE MARKS FOR BEGIN*/MDSB 380
    NR   =LN-LNUD,.                    /*AND END OF THE BAND STRUCTURE*/MDSB 390
    IF COPT= '2'                       /*SHOULD R BE DIVIDED BY T ONLY*/MDSB 400
    THEN GO TO UPPER,.                 /*******************************/MDSB 410
    ISTA,INCR=1,.                      /*INITIALIZATION FOR           */MDSB 420
    IEND =LN,.                         /*TRANSPOSE(T) * X = R         */MDSB 430
    KINC =-1,.                         /*******************************/MDSB 440
 MAIN..                                                                 MDSB 450
         DO I =ISTA TO IEND BY INCR,.  /*EXECUTE LOOP OVER ALL ROWS   */MDSB 460
         H    =A(I,1),.                /*STORE I-TH DIAGONAL ELEMENT  */MDSB 470
         IF H = 0                      /*AND TEST IT FOR ZERO         */MDSB 480
         THEN DO,.                                                      MDSB 490
              ERROR='S',.              /*S MEANS ANY PIVOT IS ZERO    */MDSB 500
              GO TO RETURN,.                                            MDSB 510
              END,.                                                     MDSB 520
         KEND =NC,.                    /*KEND IS END VALUE OF THE     */MDSB 530
         IF INCR= 1                    /*INNERMOST DO-COUNTER K       */MDSB 540
         THEN L    =NC-I,.             /*L IF DIVISION BY TRANSP(T)   */MDSB 550
         ELSE L    =I-NR,.             /*L IF DIVISION BY MATRIX T    */MDSB 560
         IF L GT 0                                                      MDSB 570
         THEN KEND =KEND-L,.           /*MODIFY KEND                  */MDSB 580
              DO J =1 TO LM,.          /*LOOP OVER THE M COLUMNS OF R */MDSB 590
              SUM  =R(I,J),.           /*INITIALIZE SUM               */MDSB 600
              KI,KK=I,.                                                 MDSB 610
                   DO K =2 TO KEND,.   /*COMPUTE SCALAR PRODUCT SUM   */MDSB 620
                   KI   =KI+KINC,.                                      MDSB 630
                   KK   =KK-INCR,.                                      MDSB 640
                   SUM  =SUM-MULTIPLY(A(KI,K),R(KK,J),53),.             MDSB 650
                   END,.                                                MDSB 660
              R(I,J)=SUM/H,.           /*DIVIDE SUM BY DIAGONAL TERM  */MDSB 670
              END,.                    /*AND STORE IT BACK            */MDSB 680
         END,.                                                          MDSB 690
    IF COPT= '1'                       /*TEST END OF OPERATION        */MDSB 700
    THEN DO,.                                                           MDSB 710
         ERROR='0',.                   /*SUCCESSFUL DIVISION          */MDSB 720
         GO TO RETURN,.                                                 MDSB 730
         END,.                                                          MDSB 740
 UPPER..                               /*******************************/MDSB 750
    COPT ='1',.                        /*INITIALIZATION FOR  T * X = R*/MDSB 760
    ISTA =LN,.                         /*******************************/MDSB 770
    INCR =-1,.                                                          MDSB 780
    IEND =1,.                                                           MDSB 790
    KINC =0,.                                                           MDSB 800
    GO TO MAIN,.                       /*BRANCH TO THE MAIN LOOPS     */MDSB 810
 RETURN..                                                               MDSB 820
    END,.                              /*END OF PROCEDURE MDSB        */MDSB 830
 MDLG..                                                                 MDLG  10
 /*********************************************************************/MDLG  20
 /*                                                                   */MDLG  30
 /*      FOR AN EQUATION SYSTEM  A*X=R  WITH GENERAL NON-SINGULAR     */MDLG  40
 /*      MATRIX  A=L*U  CALCULATE OPTIONALLY                          */MDLG  50
 /*           SOLUTION X                                              */MDLG  60
 /*           INVERSE(L) * R                                          */MDLG  70
 /*           INVERSE(U) * R                                          */MDLG  80
 /*      FOR GIVEN TRIANGULAR FACTORS L, U AND RIGHT HAND SIDE R      */MDLG  90
 /*                                                                   */MDLG 100
 /*********************************************************************/MDLG 110
    PROCEDURE(A,R,IPER,N,M,OPT),.                                       MDLG 120
    DECLARE                                                             MDLG 130
         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MDLG 140
         OPT CHARACTER(1),             /*OPTION PARAMETER             */MDLG 150
         SUM BINARY FLOAT(53),                                          MDLG 160
         (A(*,*),R(*,*),H)                                              MDLG 170
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MDLG 180
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MDLG 190
         (IPER(*),I,IS,J,                                               MDLG 200
         K,LM,LN,M,N)                                                   MDLG 210
         BINARY FIXED,.                                                 MDLG 220
    LM   =M,.                                                           MDLG 230
    LN   =N,.                                                           MDLG 240
    ERROR='P',.                        /*P MEANS WRONG INPUT          */MDLG 250
    IF LN LE 0                         /*TEST SPECIFIED PARAMETER N   */MDLG 260
    THEN GO TO RETURN,.                                                 MDLG 270
    IF LM LE 0                         /*TEST SPECIFIED PARAMETER M   */MDLG 280
    THEN GO TO RETURN,.                                                 MDLG 290
    ERROR='0',.                        /*PRESET ERROR INDICATOR       */MDLG 300
    IF OPT= '2'                        /*SHOULD R BE DIVIDED BY U ONLY*/MDLG 310
    THEN GO TO UPPER,.                 /*******************************/MDLG 320
                                       /*LOOP FOR DIVISION BY LOWER   */MDLG 330
         DO I =1 TO LN,.               /*TRIANGULAR MATRIX L          */MDLG 340
         H    =A(I,I),.                /*******************************/MDLG 350
         IF H = 0                      /*IS ANY DIAGONAL ELEMENT ZERO */MDLG 360
         THEN DO,.                                                      MDLG 370
              ERROR='S',.              /*S MEANS ANY PIVOT IS ZERO    */MDLG 380
              GO TO RETURN,.                                            MDLG 390
              END,.                    /*FOR PERMUTATION OF ROWS OF   */MDLG 400
         IS   =IPER(I),.               /*RIGHT HAND SIDE ARRAY R      */MDLG 410
              DO K =1 TO LM,.          /*LOOP OVER THE M COLUMNS OF R */MDLG 420
              SUM  =R(IS,K),.          /*INITIALIZE SUM               */MDLG 430
              R(IS,K)=R(I,K),.         /*RESTORE ROWS OF ARRAY R      */MDLG 440
                   DO J =1 TO I-1,.    /*COMPUTE SCALAR PRODUCT SUM   */MDLG 450
                   SUM  =SUM-MULTIPLY(A(I,J),R(J,K),53),.               MDLG 460
                   END,.                                                MDLG 470
              R(I,K)=SUM/H,.           /*DIVIDE SUM BY DIAGONAL TERM  */MDLG 480
              END,.                    /*AND STORE RESULT             */MDLG 490
         END,.                                                          MDLG 500
    IF OPT= '1'                        /*TEST END OF OPERATION        */MDLG 510
    THEN GO TO RETURN,.                /*******************************/MDLG 520
                                       /*LOOP FOR DIVISION BY UPPER   */MDLG 530
 UPPER..                               /*TRIANGULAR MATIX U           */MDLG 540
         DO I =LN-1 TO 1 BY -1,.       /*******************************/MDLG 550
              DO K =1 TO LM,.          /*LOOP OVER THE M COLUMNS OF R */MDLG 560
              SUM  =R(I,K),.           /*INITIALIZE SUM               */MDLG 570
                   DO J =I+1 TO LN,.   /*COMPUTE SCALAR PRODUCT SUM   */MDLG 580
                   SUM  =SUM-MULTIPLY(A(I,J),R(J,K),53),.               MDLG 590
                   END,.                                                MDLG 600
              R(I,K)=SUM,.             /*STORE RESULT                 */MDLG 610
              END,.                                                     MDLG 620
         END,.                                                          MDLG 630
 RETURN..                                                               MDLG 640
    END,.                              /*END OF PROCEDURE MDLG        */MDLG 650
 MIG..                                                                  MIG   10
 /*********************************************************************/MIG   20
 /*                                                                   */MIG   30
 /*      INVERT A FACTORIZED GENERAL MATRIX A.                        */MIG   40
 /*      A MUST BE FACTORIZED INTO THE FORM A = L*U, WHERE THE        */MIG   50
 /*      UPPER TRIANGULAR MATRIX U CONTAINS THE UNIT DIAGONAL         */MIG   60
 /*      WHICH IS NOT STORED.                                         */MIG   70
 /*                                                                   */MIG   80
 /*********************************************************************/MIG   90
    PROCEDURE(A,IPER,N),.                                               MIG  100
    DECLARE                                                             MIG  110
         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MIG  120
         SUM BINARY FLOAT(53),                                          MIG  130
         (A(*,*),PIV)                                                   MIG  140
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MIG  150
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MIG  160
         (IPER(*),I,J,K,LN,M,MN,N)                                      MIG  170
         BINARY FIXED,.                                                 MIG  180
    LN   =N,.                                                           MIG  190
    MN   =LN-1,.                                                        MIG  200
    IF LN LE 0                         /*TEST SPECIFIED PARAMETER N   */MIG  210
    THEN DO,.                                                           MIG  220
         ERROR='P',.                   /*P MEANS WRONG INPUT          */MIG  230
         GO TO RETURN,.                                                 MIG  240
         END,.                         /*******************************/MIG  250
                                       /*INVERT LOWER TRIANG. MATRIX L*/MIG  260
         DO I =0 TO MN,.               /*******************************/MIG  270
         M    =I+1,.                                                    MIG  280
         PIV  =A(M,M),.                                                 MIG  290
         IF PIV= 0                     /*IS ANY DIAGONAL ELEMENT ZERO */MIG  300
         THEN DO,.                                                      MIG  310
              ERROR='S',.              /*S MEANS NEXT PIVOT ELEMENT   */MIG  320
              GO TO RETURN,.           /*IS ZERO                      */MIG  330
              END,.                                                     MIG  340
         PIV,A(M,M)=1/PIV,.            /*CALCULATE NEW DIAGONAL TERM  */MIG  350
              DO J =1 TO I,.           /*EXECUTE LOOP IN M-TH ROW     */MIG  360
              SUM  =0,.                                                 MIG  370
                   DO K =J TO I,.      /*COMPUTE SCALAR PRODUCT SUM   */MIG  380
                   SUM  =SUM+MULTIPLY(A(M,K),A(K,J),53),.               MIG  390
                   END,.                                                MIG  400
              A(M,J)=-SUM*PIV,.        /*CALCULATE AND STORE NEW TERM */MIG  410
              END,.                                                     MIG  420
         END,.                         /*******************************/MIG  430
                                       /*INVERT UPPER TRIANG. MATRIX U*/MIG  440
         DO I =MN TO 1 BY -1,.         /*******************************/MIG  450
         M    =I+1,.                                                    MIG  460
              DO J =LN TO M BY -1,.    /*EXECUTE LOOP IN I-TH ROW     */MIG  470
              SUM  =A(I,J),.                                            MIG  480
                   DO K =M TO J-1,.    /*COMPUTE SCALAR PRODUCT SUM   */MIG  490
                   SUM  =SUM+MULTIPLY(A(I,K),A(K,J),53),.               MIG  500
                   END,.                                                MIG  510
              A(I,J)=-SUM,.            /*STORE NEW VALUE              */MIG  520
              END,.                                                     MIG  530
         END,.                         /*******************************/MIG  540
                                       /*MULTIPLY  INVERSE(U)*INV(L)  */MIG  550
         DO I =1 TO MN,.               /*******************************/MIG  560
         M    =I+1,.                                                    MIG  570
              DO J =1 TO LN,.          /*EXECUTE LOOP IN I-TH ROW     */MIG  580
              IF J LE I                                                 MIG  590
              THEN SUM  =A(I,J),.      /*FOR LOWER TRIANGULAR PART    */MIG  600
              ELSE DO,.                                                 MIG  610
                   SUM  =0,.           /*IF ELEMENT A(I,J) BELONGS TO */MIG  620
                   M    =J,.           /*THE UPPER TRIANGULAR PART OF */MIG  630
                   END,.               /*MATRIX A                     */MIG  640
                                       /*COMPUTE SCALAR PRODUCT SUM   */MIG  650
                   DO K =M TO LN,.     /*OF I-TH ROW WITH J-TH COLUMN */MIG  660
                   SUM  =SUM+MULTIPLY(A(I,K),A(K,J),53),.               MIG  670
                   END,.                                                MIG  680
              A(I,J)=SUM,.             /*STORE RESULT                 */MIG  690
              END,.                                                     MIG  700
         END,.                         /*******************************/MIG  710
                                       /*RE-INTERCHANGE COLUMNS OF A  */MIG  720
         DO I =MN TO 1 BY -1,.         /*******************************/MIG  730
         M    =IPER(I),.                                                MIG  740
         IF M GT I                     /*SHOULD RE-INTERCHANGE BE DONE*/MIG  750
         THEN DO,.                                                      MIG  760
                   DO J =1 TO LN,.     /*INTERCHANGE COLUMN I WITH    */MIG  770
                   PIV  =A(J,I),.      /*COLUMN IPER(I)               */MIG  780
                   A(J,I)=A(J,M),.                                      MIG  790
                   A(J,M)=PIV,.                                         MIG  800
                   END,.                                                MIG  810
              END,.                                                     MIG  820
         END,.                                                          MIG  830
 RETURN..                                                               MIG  840
    END,.                              /*END OF PROCEDURE MIG         */MIG  850
 MIS..                                                                  MIS   10
 /*********************************************************************/MIS   20
 /*                                                                   */MIS   30
 /*            INVERT SYMMETRIC POSITIVE DEFINITE MATRIX              */MIS   40
 /*                                                                   */MIS   50
 /*********************************************************************/MIS   60
    PROCEDURE(A,N),.                                                    MIS   70
    DECLARE                                                             MIS   80
         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MIS   90
         SUM BINARY FLOAT(53),                                          MIS  100
         (A(*),PIV)                                                     MIS  110
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MIS  120
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MIS  130
         (ICOL,IPIV,IROW,J,K,L,LN,M,N)                                  MIS  140
         BINARY FIXED,.                                                 MIS  150
                                       /*******************************/MIS  160
                                       /*INVERT TRIANGULAR MATRIX     */MIS  170
    LN   =N,.                          /*******************************/MIS  180
    J    =0,.                                                           MIS  190
    IF LN LE 0                         /*TEST SPECIFIED PARAMETER N   */MIS  200
    THEN DO,.                                                           MIS  210
         ERROR='P',.                   /*P MEANS WRONG INPUT          */MIS  220
         GO TO RETURN,.                                                 MIS  230
         END,.                                                          MIS  240
                                       /*PERFORM LOOP OVER ALL ROWS   */MIS  250
         DO K =0 TO LN-1,.                                              MIS  260
         IPIV =0,.                                                      MIS  270
         J    =J+1,.                                                    MIS  280
         PIV  =A(J+K),.                                                 MIS  290
         IF PIV= 0                     /*IS ANY DIAGONAL ELEMENT ZERO */MIS  300
         THEN DO,.                                                      MIS  310
              ERROR='S',.              /*S MEANS MATRIX IS NOT        */MIS  320
              GO TO RETURN,.           /*POSITIVE DEFINITE            */MIS  330
              END,.                                                     MIS  340
         PIV,A(J+K)=1/PIV,.                                             MIS  350
              DO L =1 TO K,.           /*EXECUTE LOOP IN (K+1)-TH ROW */MIS  360
              SUM  =0,.                                                 MIS  370
              IROW =J,.                                                 MIS  380
              ICOL,IPIV=IPIV+L,.                                        MIS  390
                   DO M =L TO K,.      /*CALCULATE SCALAR PRODUCTS    */MIS  400
                   SUM  =SUM+MULTIPLY(A(IROW),A(ICOL),53),.             MIS  410
                   ICOL =ICOL+M,.                                       MIS  420
                   IROW =IROW+1,.                                       MIS  430
                   END,.                                                MIS  440
              A(J) =-SUM*PIV,.         /*CALCULATE NEW ELEMENT        */MIS  450
              J    =J+1,.                                               MIS  460
              END,.                                                     MIS  470
         END,.                         /*******************************/MIS  480
                                       /*MULTIPLY WITH TRANSPOSE      */MIS  490
    J    =0,.                          /*******************************/MIS  500
         DO K =1 TO LN,.               /*PERFORM LOOP OVER ALL ROWS   */MIS  510
         IROW =K,.                                                      MIS  520
              DO L =1 TO K,.           /*EXECUTE LOOP WITHIN K-TH ROW */MIS  530
              SUM  =0,.                                                 MIS  540
              ICOL,J=J+1,.                                              MIS  550
              IROW =IROW-1,.                                            MIS  560
                   DO M =K TO LN,.     /*CALCULATE SCALAR PRODUCTS    */MIS  570
                   SUM  =SUM+MULTIPLY(A(ICOL),A(ICOL+IROW),53),.        MIS  580
                   ICOL =ICOL+M,.                                       MIS  590
                   END,.                                                MIS  600
              A(J) =SUM,.                                               MIS  610
              END,.                                                     MIS  620
         END,.                                                          MIS  630
 RETURN..                                                               MIS  640
    END,.                              /*END OF PROCEDURE MIS         */MIS  650
 MINV..                                                                 MINV  10
 /*********************************************************************/MINV  20
 /*                                                                   */MINV  30
 /*      TO INVERT A MATRIX                                           */MINV  40
 /*                                                                   */MINV  50
 /*********************************************************************/MINV  60
    PROCEDURE (A,N,D,CON),.                                             MINV  70
    DECLARE                                                             MINV  80
         ERROR EXTERNAL CHARACTER(1),                                   MINV  90
         (I,J,K,N,L(N),M(N))                                            MINV 100
         FIXED BINARY,                                                  MINV 110
         (A(*,*),BIGA,HOLD,D,CON,S)                                     MINV 120
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/MINV 130
  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/MINV 140
 /*                                                                   */MINV 150
    ERROR='0',.                                                         MINV 160
    IF N LE 0                                                           MINV 170
    THEN DO,.                                                           MINV 180
         ERROR='1',.                   /* ORDER OF MATRIX = 0.        */MINV 190
         GO TO FIN,.                                                    MINV 200
         END,.                                                          MINV 210
    IF CON= 0                                                           MINV 220
    THEN S    =1.0E-5,.                /* SINGLE PRECISION VERSION /*S*/MINV 230
  /*THEN S    =1.0E-15,.               /* DOUBLE PRECISION VERSION /*D*/MINV 240
    ELSE S    =CON,.                                                    MINV 250
    IF N = 1                           /* INVERT A SCALAR             */MINV 260
    THEN DO,.                                                           MINV 270
         D    =A(1,1),.                                                 MINV 280
         IF ABS(D) LE S                                                 MINV 290
         THEN DO,.                                                      MINV 300
              ERROR='2',.                                               MINV 310
              END,.                                                     MINV 320
         ELSE A(1,1) = 1/D,.                                            MINV 330
         GO TO FIN,.                                                    MINV 340
         END,.                                                          MINV 350
    D    =1.0,.                        /* SEARCH FOR LARGEST ELEMENT  */MINV 360
         DO K = 1 TO N,.                                                MINV 370
         L(K) =K,.                                                      MINV 380
         M(K) =K,.                                                      MINV 390
         BIGA =A(K,K),.                                                 MINV 400
              DO I=K TO N,.                                             MINV 410
                   DO J=K TO N,.                                        MINV 420
                   IF ABS(BIGA) LT ABS(A(I,J))                          MINV 430
                   THEN DO,.                                            MINV 440
                        BIGA =A(I,J),.                                  MINV 450
                        L(K) =I,.                                       MINV 460
                        M(K) =J,.                                       MINV 470
                        END,.                                           MINV 480
                   END,.                                                MINV 490
              END,.                                                     MINV 500
         J    =L(K),.                  /* INTERCHANGE ROWS            */MINV 510
         IF L(K) GT K                                                   MINV 520
         THEN DO,.                                                      MINV 530
                   DO I = 1 TO N,.                                      MINV 540
                   HOLD =-A(K,I),.                                      MINV 550
                   A(K,I)=A(J,I),.                                      MINV 560
                   A(J,I)=HOLD,.                                        MINV 570
                   END,.                                                MINV 580
              END,.                                                     MINV 590
         I    =M(K),.                  /* INTERCHANGE COLUMNS         */MINV 600
         IF M(K) GT K                                                   MINV 610
         THEN DO,.                                                      MINV 620
                   DO J = 1 TO N,.                                      MINV 630
                   HOLD =-A(J,K),.                                      MINV 640
                   A(J,K)=A(J,I),.                                      MINV 650
                   A(J,I)=HOLD,.                                        MINV 660
                   END,.                                                MINV 670
              END,.                                                     MINV 680
         IF ABS(BIGA) LE S                                              MINV 690
         THEN DO,.                                                      MINV 700
              D    =0.0,.                                               MINV 710
              GO TO COMP,.                                              MINV 720
              END,.                                                     MINV 730
 /*                                                                   */MINV 740
 /*      DIVIDE COLUMNS BY MINUS PIVOT (VALUE OF PIVOT ELEMENT IS     */MINV 750
 /*      CONTAINED IN BIGA)                                           */MINV 760
              DO I = 1 TO N,.                                           MINV 770
              IF I NE K                                                 MINV 780
              THEN A(I,K)=A(I,K)/(-A(K,K)),.                            MINV 790
              END,.                                                     MINV 800
              DO I = 1 TO N,.          /* REDUCE MATRIX               */MINV 810
              IF I NE K                                                 MINV 820
              THEN DO,.                                                 MINV 830
                        DO J = 1 TO N,.                                 MINV 840
                        IF J NE K                                       MINV 850
                        THEN A(I,J)=A(I,K)*A(K,J)+A(I,J),.              MINV 860
                        END,.                                           MINV 870
                   END,.                                                MINV 880
              END,.                                                     MINV 890
              DO J = 1 TO N,.                                           MINV 900
              IF J NE K                /* DIVIDE BY ROW PIVOT         */MINV 910
              THEN A(K,J)=A(K,J)/A(K,K),.                               MINV 920
              END,.                                                     MINV 930
         D    =D*A(K,K),.              /* COMPUTE DETERMINANT         */MINV 940
 COMP..                                                                 MINV 950
         IF ABS(D) LE S                                                 MINV 960
         THEN DO,.                                                      MINV 970
              ERROR='2',.              /* DETERMINANT IS ZERO         */MINV 980
              GO TO FIN,.                                               MINV 990
              END,.                                                     MINV1000
         A(K,K)=1.0/A(K,K),.           /* REPLACE PIVOT BY RECIPROCAL */MINV1010
         END,.                                                          MINV1020
 /*                                                                   */MINV1030
 /*      FINAL ROW AND COLUMN INTERCHANGE                             */MINV1040
 /*                                                                   */MINV1050
    K    =N,.                                                           MINV1060
 LOOP..                                                                 MINV1070
    K    =K-1,.                                                         MINV1080
    IF K GT 0                                                           MINV1090
    THEN DO,.                                                           MINV1100
         I    =L(K),.                                                   MINV1110
         IF I GT K                                                      MINV1120
         THEN DO,.                                                      MINV1130
                   DO J = 1 TO N,.                                      MINV1140
                   HOLD =A(J,K),.                                       MINV1150
                   A(J,K)=-A(J,I),.                                     MINV1160
                   A(J,I)=HOLD,.                                        MINV1170
                   END,.                                                MINV1180
              END,.                                                     MINV1190
         J    =M(K),.                                                   MINV1200
         IF J GT K                                                      MINV1210
         THEN DO,.                                                      MINV1220
                   DO I = 1 TO N,.                                      MINV1230
                   HOLD =A(K,I),.                                       MINV1240
                   A(K,I)=-A(J,I),.                                     MINV1250
                   A(J,I)=HOLD,.                                        MINV1260
                   END,.                                                MINV1270
              END,.                                                     MINV1280
         GO TO LOOP,.                                                   MINV1290
         END,.                                                          MINV1300
 FIN..                                                                  MINV1310
    RETURN,.                                                            MINV1320
    END,.                              /*END OF PROCEDURE MINV        */MINV1330
 MLSQ..                                                                 MLSQ  10
 /*********************************************************************/MLSQ  20
 /*                                                                   */MLSQ  30
 /*      LINEAR LEAST SQUARES PROBLEM SOLVED USING HOUSEHOLDER TRANSF.*/MLSQ  40
 /*                                                                   */MLSQ  50
 /*********************************************************************/MLSQ  60
    PROCEDURE(A,B,M,N,K),.                                              MLSQ  70
    DECLARE                                                             MLSQ  80
         (A(*,*),B(*,*),PIVR,MAXA)                                      MLSQ  90
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MLSQ 100
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MLSQ 110
         (AUX(N),H,SIG,BETA)                                            MLSQ 120
         BINARY FLOAT(53),                                              MLSQ 130
         (TOL,PIV(N))                                                   MLSQ 140
         BINARY FLOAT,                                                  MLSQ 150
         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MLSQ 160
         (I,J,K,L,M,N,PIVI,LM,LN,LK)                                    MLSQ 170
         BINARY FIXED,.                                                 MLSQ 180
    LM   =M,.                                                           MLSQ 190
    LN   =N,.                                                           MLSQ 200
    LK   =K,.                                                           MLSQ 210
    SIG  =0,.                                                           MLSQ 220
    ERROR='D',.                        /*PRESET ERROR INDICATOR       */MLSQ 230
    IF LM GE LN                        /*IF M LESS THAN N             */MLSQ 240
    THEN IF LN GE 0                    /*OR IF N NOT POSITIVE         */MLSQ 250
    THEN IF LK GT 0                    /*OR IF K NOT POSITIVE         */MLSQ 260
    THEN DO,.                          /*THEN BYPASS OPERATION        */MLSQ 270
              DO L = 1 TO LN,.         /*CALCULATE SCALARPRODUCTS OF  */MLSQ 280
              H    =0,.                /*COLUMNS                      */MLSQ 290
                   DO I = 1 TO LM,.                                     MLSQ 300
                   H    =H+MULTIPLY(A(I,L),A(I,L),53),.                 MLSQ 310
                   END,.                                                MLSQ 320
              IF H GE SIG                                               MLSQ 330
              THEN DO,.                                                 MLSQ 340
                   SIG  =H,.           /*SAVE MAXIMAL SCALARPRODUCT   */MLSQ 350
                   PIVI =L,.           /*SAVE SUBSCRIPT OF PIVOTCOLUMN*/MLSQ 360
                   END,.                                                MLSQ 370
              AUX(L),PIV(L)=H,.                                         MLSQ 380
              END,.                    /*******************************/MLSQ 390
                                       /*DECOMPOSITION LOOP           */MLSQ 400
         ERROR='0',.                   /*******************************/MLSQ 410
              DO L = 1 TO LN,.                                          MLSQ 420
              TOL  =PIV(PIVI),.        /*ORIGINAL LENGTH OF PIVOTCOL. */MLSQ 430
              IF PIVI GT L             /*SHOULD COLUMN BE INTERCHANGED*/MLSQ 440
              THEN DO,.                                                 MLSQ 450
                   H    =AUX(L),.      /*INTERCHANGE SCALARPRODUCTS   */MLSQ 460
                   AUX(L)=AUX(PIVI),.                                   MLSQ 470
                   PIV(PIVI)=PIV(L),.                                   MLSQ 480
                   AUX(PIVI)=H,.                                        MLSQ 490
                        DO J=L TO LM,. /*INTERCHANGE LOWER PART OF    */MLSQ 500
                        PIVR =A(J,L),. /*COLUMNS OF A                 */MLSQ 510
                        A(J,L)=A(J,PIVI),.                              MLSQ 520
                        A(J,PIVI)=PIVR,.                                MLSQ 530
                        END,.                                           MLSQ 540
                   END,.                                                MLSQ 550
              IF L GT 1                /*RECALCULATE COLUMN LENGTH    */MLSQ 560
              THEN DO,.                /*TO AVOID ROUND-OFF PROBLEMS  */MLSQ 570
                   SIG  =0,.                                            MLSQ 580
                        DO I = L TO LM,.                                MLSQ 590
                        SIG  =SIG+MULTIPLY(A(I,L),A(I,L),53),.          MLSQ 600
                        END,.                                           MLSQ 610
                   END,.                                                MLSQ 620
              IF TOL= 0                                                 MLSQ 630
              THEN DO,.                                                 MLSQ 640
                   IF ERROR NE 'B'                                      MLSQ 650
                   THEN IF ERROR NE 'W'                                 MLSQ 660
                   THEN ERROR='S',.    /*GIVEN A HAS ZERO-COLUMN(S)   */MLSQ 670
                   ELSE ERROR='B',.                                     MLSQ 680
                   TOL  =1,.                                            MLSQ 690
                   END,.                                                MLSQ 700
              BETA =TOL*1E-10,.        /*SINGLE PRECISION VERSION  /*S*/MLSQ 710
  /*          BETA =TOL*1E-20,.        /*DOUBLE PRECISION VERSION  /*D*/MLSQ 720
              IF SIG LE BETA                                            MLSQ 730
              THEN DO,.                /*INDICATE LOSS OF SIGNIFICANCE*/MLSQ 740
                   IF ERROR NE 'B'                                      MLSQ 750
                   THEN IF ERROR NE 'S'                                 MLSQ 760
                   THEN ERROR='W',.                                     MLSQ 770
                   ELSE ERROR='B',.                                     MLSQ 780
                   IF SIG LE 0                                          MLSQ 790
                   THEN SIG  =BETA,.   /*MODIFY ZERO VALUE            */MLSQ 800
                   END,.                                                MLSQ 810
              SIG  =SQRT(SIG),.                                         MLSQ 820
              H    =A(L,L),.                                            MLSQ 830
              IF H LT 0                                                 MLSQ 840
              THEN SIG  =-SIG,.        /*FORCE SIGN(SIG) TO SIGN(H)   */MLSQ 850
              PIV(L)=PIVI,.            /*SAVE INTERCHANGE INFORMATION */MLSQ 860
              A(L,L),BETA=H+SIG,.      /*TRANSFORM DIAGONAL ELEMENT   */MLSQ 870
              AUX(L)=-SIG,.            /*SAVE DIAGONAL ELEMENT        */MLSQ 880
              BETA =SIG*BETA,.                                          MLSQ 890
                                       /*TRANSFORM SUBMATRIX OF A     */MLSQ 900
              PIVR =0,.                                                 MLSQ 910
                   DO J = L+1 TO LN,.  /*TRANSFORM LOWER PART OF A    */MLSQ 920
                   H    =0,.           /*COLUMNS L+1 UP TO N ONLY     */MLSQ 930
                        DO I = L TO LM,.                                MLSQ 940
                        H    =H+MULTIPLY(A(I,L),A(I,J),53),.            MLSQ 950
                        END,.                                           MLSQ 960
                   SIG  =H/BETA,.      /*MODIFY J-TH COLUMN           */MLSQ 970
                        DO I = LM TO L BY -1,.                          MLSQ 980
                        H    =A(I,J),.                                  MLSQ 990
                        A(I,J)=H-A(I,L)*SIG,.                           MLSQ1000
                        END,.          /*NEXT UPDATE COLUMN LENGTH    */MLSQ1010
                   H    =A(L,J),.                                       MLSQ1020
                   AUX(J),H=AUX(J)-H*H,.                                MLSQ1030
                   IF H GE PIVR        /*SEARCH NEXT PIVOTCOLUMN      */MLSQ1040
                   THEN DO,.                                            MLSQ1050
                        PIVR =H,.                                       MLSQ1060
                        PIVI =J,.                                       MLSQ1070
                        END,.                                           MLSQ1080
                   END,.                                                MLSQ1090
                                       /*TRANSFORM LOWER PART OF      */MLSQ1100
                   DO J = 1 TO LK,.    /*RIGHT HAND SIDE MATRIX B     */MLSQ1110
                   H    =0,.                                            MLSQ1120
                        DO I = L TO LM,.                                MLSQ1130
                        H    =H+MULTIPLY(A(I,L),B(I,J),53),.            MLSQ1140
                        END,.                                           MLSQ1150
                   MAXA =H/BETA,.      /*MODIFY J-TH COLUMN           */MLSQ1160
                        DO I = L TO LM,.                                MLSQ1170
                        B(I,J)=B(I,J)-A(I,L)*MAXA,.                     MLSQ1180
                        END,.                                           MLSQ1190
                   END,.                                                MLSQ1200
              END,.                    /*END OF DECOMPOSITION LOOP    */MLSQ1210
                                       /*******************************/MLSQ1220
              DO J = LN TO 1 BY -1,.   /*BACKSUBSTITUTION,INTERCHANGE */MLSQ1230
                   DO I = 1 TO LK,.    /*******************************/MLSQ1240
                   H    =B(J,I),.                                       MLSQ1250
                        DO L = J+1 TO LN,.                              MLSQ1260
                        H    =H-MULTIPLY(A(J,L),B(L,I),53),.            MLSQ1270
                        END,.                                           MLSQ1280
                   PIVI =PIV(J),.                                       MLSQ1290
                   B(J,I)=B(PIVI,I),.                                   MLSQ1300
                   B(PIVI,I)=H/AUX(J),.                                 MLSQ1310
                   END,.                                                MLSQ1320
              END,.                                                     MLSQ1330
         IF LN LT LM                   /*COMPUTE LEAST SQUARES        */MLSQ1340
         THEN DO J = 1 TO LK,.         /*IN CASE OF AN OVERDETERMINED */MLSQ1350
              H    =0,.                /*EQUATION SYSTEM ONLY         */MLSQ1360
                   DO I = LN+1 TO LM,.                                  MLSQ1370
                   H    =H+MULTIPLY(B(I,J),B(I,J),53),.                 MLSQ1380
                   END,.                                                MLSQ1390
              B(LM,J)=H,.                                               MLSQ1400
              END,.                                                     MLSQ1410
         END,.                         /*END OF OPERATION             */MLSQ1420
    END,.                              /*END OF PROCEDURE MLSQ        */MLSQ1430
 MGB1..                                                                 MGB   10
 /*********************************************************************/MGB   20
 /*                                                                   */MGB   30
 /*      FOR AN EQUATION SYSTEM  A*X=R  WITH BAND MATRIX  A=L*U       */MGB   40
 /*      CALCULATE OPTIONALLY                                         */MGB   50
 /*           UPPER TRIANGULAR FACTOR U AND SOLUTION X,               */MGB   60
 /*           UPPER TRIANGULAR FACTOR U AND INVERSE(L)*R,             */MGB   70
 /*           INVERSE(U)*R FOR GIVEN U,R.                             */MGB   80
 /*                                                                   */MGB   90
 /*********************************************************************/MGB  100
    PROCEDURE(A,R,N,NLD,NUD,M,EPS,OPT),.                                MGB  110
    DECLARE                                                             MGB  120
         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */MGB  130
         (OPT,COPT) CHARACTER(1),                                       MGB  140
         EPS BINARY FLOAT,                                              MGB  150
         SUM BINARY FLOAT(53),                                          MGB  160
         (A(*,*),R(*,*),L(*),SL(N),PIV,W)                               MGB  170
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/MGB  180
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/MGB  190
         (IPER(*),I,IBAC,IND,INL,IPIV,                                  MGB  200
         J,K,KL,LM,LLM,LN,LNLD,LNUD,M,                                  MGB  210
         N,NB,NLD,NUD)                                                  MGB  220
         BINARY FIXED,.                                                 MGB  230
    IND  =1,.                                                           MGB  240
    GO TO BOTH,.                                                        MGB  250
 MGB2..                                                                 MGB  260
 /*********************************************************************/MGB  270
 /*                                                                   */MGB  280
 /*      FOR AN EQUATION SYSTEM  A*X=R  WITH BAND MATRIX  A=L*U       */MGB  290
 /*      COMPUTE OPTIONALLY                                           */MGB  300
 /*           TRIANGULAR FACTORS L,U  POSSIBLY COMBINED WITH          */MGB  310
 /*           CALCULATION OF X OR INVERSE(L)*R,                       */MGB  320
 /*           INVERSE(L)*R OR INVERSE(A)*R FOR GIVEN L,U,R.           */MGB  330
 /*                                                                   */MGB  340
 /*********************************************************************/MGB  350
    ENTRY(A,R,L,IPER,N,NLD,NUD,M,EPS,OPT),.                             MGB  360
    IND  =2,.                                                           MGB  370
 BOTH..                                                                 MGB  380
    LN   =N,.                          /*STORE VARIABLES N, M, NUD,   */MGB  390
    LM,LLM=M,.                         /*NLD FROM CALLING SEQUENCE    */MGB  400
    LNUD =NUD,.                        /*INTO LOCAL PARAMETERS        */MGB  410
    LNLD =NLD,.                                                         MGB  420
    ERROR='P',.                        /*P MEANS WRONG INPUT          */MGB  430
    IF LM LE 0                         /*VALUE M MUST BE POSITIVE     */MGB  440
    THEN GO TO RETURN,.                                                 MGB  450
    IF LNLD LT 0                       /*NUMBER OF LOWER CODIAGONALS  */MGB  460
    THEN GO TO RETURN,.                /*NLD MAY NOT BE NEGATIVE AND  */MGB  470
    IF LNLD GE LN                      /*EQUAL TO OR GREATER THAN N   */MGB  480
    THEN GO TO RETURN,.                                                 MGB  490
    IF LNUD LT 0                       /*NUMBER OF UPPER CODIAGONALS  */MGB  500
    THEN GO TO RETURN,.                /*NUD MAY NOT BE NEGATIVE AND  */MGB  510
    IF LNUD GE LN                      /*EQUAL TO OR GREATER THAN N   */MGB  520
    THEN GO TO RETURN,.                                                 MGB  530
    ERROR='0',.                        /*PRESET ERROR INDICATOR       */MGB  540
    NB   =LNUD+LNLD+1,.                /*CALCULATE THE MAXIMUM WIDTH  */MGB  550
    IF NB GT LN                        /*OF BAND MATRIX               */MGB  560
    THEN NB   =LN,.                                                     MGB  570
    IBAC =1,.                          /*IBAC IS AN INDICATOR FOR     */MGB  580
    KL   =0,.                          /*BACKSUBSTITUTION             */MGB  590
    COPT =OPT,.                                                         MGB  600
    IF COPT= 'A'                       /*CALCULATE  INVERSE(L) * R    */MGB  610
    THEN DO,.                          /*FOR GIVEN  L, U, R           */MGB  620
         IND  =0,.                                                      MGB  630
         IBAC =0,.                                                      MGB  640
         GO TO GAUSS,.                                                  MGB  650
         END,.                                                          MGB  660
    IF COPT= 'B'                       /*CALCULATE  INVERSE(U) * R    */MGB  670
    THEN GO TO BACK,.                  /*FOR GIVEN  U, R              */MGB  680
    IF COPT= 'C'                                                        MGB  690
    THEN DO,.                          /*CALCULATE  INVERSE(A) * R    */MGB  700
         IND  =0,.                     /*FOR GIVEN  L, U, R           */MGB  710
         GO TO GAUSS,.                                                  MGB  720
         END,.                                                          MGB  730
    IF COPT= 'L'                       /*COMPUTE TRIANGULAR FACTOR U  */MGB  740
    THEN DO,.                          /*AND OPTIONALLY  L  AND       */MGB  750
         IBAC =0,.                     /*CALCULATE  INVERSE(L) * R    */MGB  760
         GO TO SCAL,.                  /*FOR GIVEN  A, R              */MGB  770
         END,.                                                          MGB  780
    IF COPT= 'F'                       /*COMPUTE TRIANGULAR FACTORS   */MGB  790
    THEN DO,.                          /*L AND U  FOR GIVEN MATRIX A  */MGB  800
         IBAC =0,.                                                      MGB  810
         LLM  =0,.                                                      MGB  820
         GO TO SCAL,.                                                   MGB  830
         END,.                         /*COMPUTE TRIANGULAR FACTOR U  */MGB  840
    IF COPT= 'U'                       /*AND INVERSE(U)*R FOR GIVEN   */MGB  850
    THEN LLM  =0,.                     /*A, R                         */MGB  860
                                       /*                             */MGB  870
 SCAL..                                /*CALCULATE SCALING FACTORS    */MGB  880
                                       /*                             */MGB  890
    K    =LNUD,.                       /*K IS AN END INDICATOR FOR    */MGB  900
    INL  =LNLD+LN-NB+1,.               /*EACH ROW OF MATRIX A         */MGB  910
    IPIV =NB-LNUD,.                                                     MGB  920
         DO I =1 TO LN,.               /*EXECUTE LOOP OVER ALL ROWS   */MGB  930
         IF I LE IPIV                                                   MGB  940
         THEN K    =K+1,.              /*IN I-TH ROW THE ELEMENTS     */MGB  950
         IF I GT INL                   /*A(I,K+1) TO A(I,NB) ARE      */MGB  960
         THEN K    =K-1,.              /*FILLED UP WITH ZEROS         */MGB  970
         PIV  =0,.                                                      MGB  980
              DO J =1 TO NB,.          /*EXECUTE LOOP OVER I-TH ROW   */MGB  990
              IF J GT K                                                 MGB 1000
              THEN A(I,J)=0,.          /*FILL UP WITH ZEROS           */MGB 1010
              ELSE DO,.                                                 MGB 1020
                   W    =ABS(A(I,J)),. /*COMPUTE ABSOLUTELY GREATEST  */MGB 1030
                   IF W GT PIV         /*ELEMENT PIV IN I-TH ROW OF A */MGB 1040
                   THEN PIV  =W,.                                       MGB 1050
                   END,.                                                MGB 1060
              END,.                                                     MGB 1070
         IF PIV= 0                     /*TEST FOR ZERO-ROW            */MGB 1080
         THEN DO,.                     /*ALL ELEMENTS IN I-TH ROW OF  */MGB 1090
              ERROR='S',.              /*GIVEN MATRIX A ARE ZERO      */MGB 1100
              GO TO RETURN,.                                            MGB 1110
              END,.                    /*STORE THE RECIPROCAL IN THE  */MGB 1120
         SL(I)=1/PIV,.                 /*VECTOR SL                    */MGB 1130
         END,.                         /*******************************/MGB 1140
 GAUSS..                               /*GAUSS ELIMINATION            */MGB 1150
         DO I =1 TO LN-1,.             /*******************************/MGB 1160
         INL  =I+LNLD,.                /*INVERSE(L)*R                 */MGB 1170
         IF INL GT LN                                                   MGB 1180
         THEN INL  =LN,.                                                MGB 1190
         IF IND= 0                     /*NO FACTORIZATION             */MGB 1200
         THEN DO,.                     /*CALCULATE INVERSE(L) * R     */MGB 1210
              IPIV =IPER(I),.          /*FOR GIVEN L, U, R            */MGB 1220
              GO TO INTR,.                                              MGB 1230
              END,.                                                     MGB 1240
         W    =0,.                     /*INITIALIZE W FOR PIVOTING    */MGB 1250
              DO J =I TO INL,.                                          MGB 1260
              PIV  =ABS(A(J,1))*SL(J),./*MULTIPLY ELEMENTS WITH SCALE */MGB 1270
              IF PIV GT W              /*FACTORS AND SEARCH GREATEST  */MGB 1280
              THEN DO,.                /*PRODUCT                      */MGB 1290
                   W    =PIV,.                                          MGB 1300
                   IPIV =J,.           /*STORE ROW INDEX              */MGB 1310
                   END,.                                                MGB 1320
              END,.                                                     MGB 1330
         IF W LE ABS(EPS)              /*TEST FOR LOSS OF SIGNIFICANCE*/MGB 1340
         THEN IF W = 0                 /*AND FOR ZERO                 */MGB 1350
         THEN DO,.                                                      MGB 1360
              ERROR='S',.              /*NEXT PIVOT IS ZERO POSSIBLY  */MGB 1370
              GO TO RETURN,.           /*DUE TO LOSS OF SIGNIFICANCE  */MGB 1380
              END,.                                                     MGB 1390
         ELSE ERROR='W',.              /*W MEANS WARNING              */MGB 1400
         PIV  =A(IPIV,1),.             /*PIV CONTAINS THE PIVOT       */MGB 1410
         IF IND= 2                     /*STORE INFORMATION FOR ROW-   */MGB 1420
         THEN IPER(I)=IPIV,.           /*PERMUTATIONS                 */MGB 1430
         IF IPIV= I                    /*IS INTERCHANGE NECESSARY     */MGB 1440
         THEN GO TO FSUB,.                                              MGB 1450
         SL(IPIV)=SL(I),.              /*RESTORE SCALING ELEMENTS     */MGB 1460
              DO J =1 TO NB,.                                           MGB 1470
              W    =A(I,J),.           /*INTERCHANGE ROWS IN GIVEN    */MGB 1480
              A(I,J)=A(IPIV,J),.       /*MATRIX A                     */MGB 1490
              A(IPIV,J)=W,.                                             MGB 1500
              END,.                                                     MGB 1510
 INTR..                                                                 MGB 1520
              DO J =1 TO LLM,.         /*INTERCHANGE ROWS IN RIGHT    */MGB 1530
              W    =R(I,J),.           /*HAND SIDE MATRIX R           */MGB 1540
              R(I,J)=R(IPIV,J),.                                        MGB 1550
              R(IPIV,J)=W,.                                             MGB 1560
              END,.                                                     MGB 1570
 FSUB..                                /*MODIFY OPTIONALLY ROWS IN    */MGB 1580
              DO J =I+1 TO INL,.       /*MATRIX A AND IN RIGHT HAND   */MGB 1590
              IF IND= 0                /*SIDE MATRIX R                */MGB 1600
              THEN DO,.                                                 MGB 1610
                   KL   =KL+1,.                                         MGB 1620
                   W    =L(KL),.                                        MGB 1630
                   GO TO DIVL,.                                         MGB 1640
                   END,.                                                MGB 1650
              W    =A(J,1)/PIV,.       /*W IS AN ELEMENT OF THE LOWER */MGB 1660
              IF IND= 2                /*TRIANGULAR FACTOR L          */MGB 1670
              THEN DO,.                                                 MGB 1680
                   KL   =KL+1,.                                         MGB 1690
                   L(KL)=W,.           /*STORE W INTO L IF REQUESTED  */MGB 1700
                   END,.                                                MGB 1710
                   DO K =2 TO NB,.     /*MODIFY AND SHIFT ROWS OF A   */MGB 1720
                   A(J,K-1)=A(J,K)-W*A(I,K),.                           MGB 1730
                   END,.                                                MGB 1740
              A(J,NB)=0,.              /*LAST TERM IS SET TO ZERO     */MGB 1750
 DIVL..                                /*MODIFY ROWS OF R TO COMPUTE  */MGB 1760
                   DO K =1 TO LLM,.    /*INVERSE(L)*R                 */MGB 1770
                   R(J,K)=R(J,K)-W*R(I,K),.                             MGB 1780
                   END,.                                                MGB 1790
              END,.                                                     MGB 1800
         END,.                                                          MGB 1810
    IF IND= 2                                                           MGB 1820
    THEN IPER(LN)=LN,.                                                  MGB 1830
    IF IBAC NE 1                                                        MGB 1840
    THEN GO TO RETURN,.                /*******************************/MGB 1850
 BACK..                                /*BACKSUBSTITUTION             */MGB 1860
         DO I =LN TO 1 BY -1,.         /*******************************/MGB 1870
         PIV  =A(I,1),.                                                 MGB 1880
         IF PIV= 0                     /*TEST FOR ZERO PIVOT          */MGB 1890
         THEN DO,.                                                      MGB 1900
              ERROR='S',.              /*PIVOT ELEMENT IS ZERO        */MGB 1910
              GO TO RETURN,.                                            MGB 1920
              END,.                                                     MGB 1930
         INL  =I-1,.                                                    MGB 1940
              DO J =1 TO LM,.          /*LOOP OVER ALL COLUMNS OF R   */MGB 1950
              SUM  =R(I,J),.                                            MGB 1960
                   DO K =2 TO IBAC,.   /*CALCULATE SCALAR PRODUCT     */MGB 1970
                   SUM  =SUM-MULTIPLY(A(I,K),R(INL+K,J),53),.           MGB 1980
                   END,.                                                MGB 1990
              R(I,J)=SUM/PIV,.         /*COMPUTE NEW ELEMENT IN R     */MGB 2000
              END,.                                                     MGB 2010
         IF IBAC LT NB                                                  MGB 2020
         THEN IBAC =IBAC+1,.           /*UPDATE END OF INNERMOST LOOP */MGB 2030
         END,.                                                          MGB 2040
 RETURN..                                                               MGB 2050
    END,.                              /*END OF PROCEDURE MGB         */MGB 2060
 MATE..                                                                 MATE  10
 /*********************************************************************/MATE  20
 /*                                                                   */MATE  30
 /*            REDUCE A REAL MATRIX TO HESSENBERG FORM                */MATE  40
 /*                     ELIMINATION TECHNIQUES                        */MATE  50
 /*                                                                   */MATE  60
 /*********************************************************************/MATE  70
    PROCEDURE(A,N,IP),.                                                 MATE  80
    DECLARE                                                             MATE  90
         (A(*,*),C,U,V)                                                 MATE 100
         BINARY,                                                        MATE 110
         S                                                              MATE 120
         BINARY(53),                                                    MATE 130
         (N,IP(*),K,KP1,K1,M,I,J,N1)                                    MATE 140
         BINARY FIXED,.                                                 MATE 150
    IF N LT 3 THEN GO TO EMATE,.                                        MATE 160
    IP(N)=N,.                                                           MATE 170
    N1=N-1,.                                                            MATE 180
         DO K=N1 TO 1 BY -1,.                                           MATE 190
         KP1=K+1,.                                                      MATE 200
         K1=K-1,.                                                       MATE 210
         M=K,.                                                          MATE 220
         U=ABS(A(KP1,K)),.                                              MATE 230
              DO I=1 TO K1,.           /*          PIVOTING           */MATE 240
              V=ABS(A(KP1,I)),.                                         MATE 250
              IF V GT U                                                 MATE 260
              THEN DO,.                                                 MATE 270
                   U=V,.                                                MATE 280
                   M=I,.                                                MATE 290
                   END,.                                                MATE 300
              END,.                                                     MATE 310
         IP(K)=M,.                                                      MATE 320
         IF M NE K                                                      MATE 330
         THEN DO,.                     /*        INTERCHANGES         */MATE 340
                   DO I=1 TO N,.       /*           COLUMNS           */MATE 350
                   C=A(I,K),.                                           MATE 360
                   A(I,K)=A(I,M),.                                      MATE 370
                   A(I,M)=C,.                                           MATE 380
                   END,.                                                MATE 390
                   DO I=1 TO N,.       /*            ROWS             */MATE 400
                   C=A(K,I),.                                           MATE 410
                   A(K,I)=A(M,I),.                                      MATE 420
                   A(M,I)=C,.                                           MATE 430
                   END,.                                                MATE 440
              END,.                                                     MATE 450
         IF A(KP1,K) NE 0                                               MATE 460
         THEN DO I=1 TO K1,.           /* COEFFICIENTS OF ELIMINATION */MATE 470
              A(KP1,I)=A(KP1,I)/A(KP1,K),.                              MATE 480
              END,.                                                     MATE 490
              DO I=N TO 1 BY -1,.      /*  K-TH ROW OF THE HESSENBERG */MATE 500
              S=A(K,I),.               /*            MATRIX           */MATE 510
                   DO J=1 TO K1,.                                       MATE 520
                   S=S+MULTIPLY(A(KP1,J),A(J,I),53),.                   MATE 530
                   END,.                                                MATE 540
                   DO J=MAX(I+1,K) TO N1,.                              MATE 550
                   S=S-MULTIPLY(A(K,J),A(J+1,I),53),.                   MATE 560
                   END,.                                                MATE 570
              A(K,I)=S,.                                                MATE 580
              END,.                                                     MATE 590
         END,.                                                          MATE 600
 EMATE..                                                                MATE 610
    RETURN,.                                                            MATE 620
    END,.                              /*    END OF PROCEDURE MATE    */MATE 630
 MATU..                                                                 MATU  10
 /*********************************************************************/MATU  20
 /*                                                                   */MATU  30
 /*            REDUCE A REAL MATRIX TO HESSENBERG FORM                */MATU  40
 /*                 HOUSEHOLDER'S TRANSFORMATIONS                     */MATU  50
 /*                                                                   */MATU  60
 /*********************************************************************/MATU  70
    PROCEDURE (A,N,B),.                                                 MATU  80
    DECLARE                                                             MATU  90
         (A(*,*),B(*),EPS,T,C,U) BINARY,                                MATU 100
         S BINARY(53),                                                  MATU 110
         (I,J,K,KP1,KP2,N) BINARY FIXED,.                               MATU 120
    EPS=1.0E-14,.                                                       MATU 130
    B(1) =0,.                                                           MATU 140
         DO K=1 TO N-2,.                                                MATU 150
         KP1  =K+1,.                                                    MATU 160
         KP2  =KP1+1,.                                                  MATU 170
         S    =0,.                     /* PREPARE K-TH TRANSFORMATION */MATU 180
              DO I=KP2 TO N,.                                           MATU 190
              S=S+MULTIPLY(A(I,K),A(I,K),53),.                          MATU 200
              END,.                                                     MATU 210
         T    =A(KP1,K)*A(KP1,K),.                                      MATU 220
         IF S GT EPS*T                                                  MATU 230
         THEN DO,.                                                      MATU 240
         S    =SQRT(S+T),.                                              MATU 250
              T    =S,.                /*  CHOOSE SIGN FOR STABILITY  */MATU 260
              IF A(KP1,K) GT 0 THEN T=-T,.                              MATU 270
              C    =A(KP1,K)-T,.                                        MATU 280
                   DO J=KP1 TO N,.     /*        ROW OPERATION        */MATU 290
                   S    =0,.                                            MATU 300
                        DO I=KP1 TO N,.                                 MATU 310
                        S=S+MULTIPLY(A(I,J),A(I,K),53),.                MATU 320
                        END,.                                           MATU 330
                   U    =A(KP1,J),.                                     MATU 340
                   A(KP1,J)=S/T,.                                       MATU 350
                   U    =(A(KP1,J)-U)/C,.                               MATU 360
                        DO I=KP2 TO N,.                                 MATU 370
                        A(I,J)=A(I,J)+U*A(I,K),.                        MATU 380
                        END,.                                           MATU 390
                   END,.                                                MATU 400
                   DO J=1 TO N,.       /*      COLUMN OPERATION       */MATU 410
                   S    =0,.                                            MATU 420
                        DO I=KP1 TO N,.                                 MATU 430
                        S=S+MULTIPLY(A(J,I),A(I,K),53),.                MATU 440
                        END,.                                           MATU 450
                   U    =A(J,KP1),.                                     MATU 460
                   A(J,KP1)=S/T,.                                       MATU 470
                   U    =(A(J,KP1)-U)/C,.                               MATU 480
                        DO I=KP2 TO N,.                                 MATU 490
                        A(J,I)=A(J,I)+U*A(I,K),.                        MATU 500
                        END,.                                           MATU 510
                   END,.                                                MATU 520
              B(KP1)=A(KP1,K),.                                         MATU 530
              A(KP1,K)=T,.             /*  TRANSFORM SUBDIAGONAL TERM */MATU 540
              END,.                                                     MATU 550
         ELSE B(KP1)=0,.               /*  BYPASS K-TH TRANSFORMATION */MATU 560
         END,.                                                          MATU 570
    RETURN,.                                                            MATU 580
    END,.                              /*    END OF PROCEDURE MATU    */MATU 590
 MSTU..                                                                 MSTU  10
 /*********************************************************************/MSTU  20
 /*                                                                   */MSTU  30
 /*      REDUCTION OF A SYMMETRIC MATRIX TO SYMMETRIC TRIDIAGONAL FORM*/MSTU  40
 /*                                                                   */MSTU  50
 /*********************************************************************/MSTU  60
    PROCEDURE (A,N,D,CD),.                                              MSTU  70
    DECLARE                                                             MSTU  80
         (A(*),D(*),CD(*),T,EPS) BINARY,                                MSTU  90
         (N,N2,ICD,MP2,M,MP,J,I,L,LK,K) BINARY FIXED,                   MSTU 100
         (S,DT) BINARY(53),.                                            MSTU 110
    N2   =N-2,.                                                         MSTU 120
    IF N2 LE 0 THEN GO TO EMSTU,.                                       MSTU 130
    D(1) =A(1),.                                                        MSTU 140
    EPS  =1.0E-14,.                                                     MSTU 150
    ICD  =0,.                                                           MSTU 160
    MP2  =2,.                                                           MSTU 170
         DO M=1 TO N2,.                /* COMPUTE NEW SUBDIAGONAL TERM*/MSTU 180
         MP   =MP2,.                                                    MSTU 190
         MP2  =MP+1,.                                                   MSTU 200
         ICD  =ICD+MP,.                                                 MSTU 210
         J    =ICD,.                                                    MSTU 220
         S    =0,.                                                      MSTU 230
              DO I=MP2 TO N,.                                           MSTU 240
              J    =J+I-1,.                                             MSTU 250
              D(I) =A(J),.                                              MSTU 260
              S=S+MULTIPLY(D(I),D(I),53),.                              MSTU 270
              END,.                                                     MSTU 280
         T    =A(ICD)*A(ICD),.                                          MSTU 290
         IF S GT T*EPS THEN GO TO TRANS,.                               MSTU 300
         CD(M)=A(ICD),.                /*    BYPASS TRANSFORMATION    */MSTU 310
         GO TO BYPASS,.                                                 MSTU 320
 TRANS..                                                                MSTU 330
         CD(M)=SQRT(S+T),.                                              MSTU 340
         IF A(ICD) GT 0 THEN CD(M)=-CD(M),.                             MSTU 350
         D(MP)=A(ICD)-CD(M),.                                           MSTU 360
         J    =ICD-M,.                                                  MSTU 370
         DT   =0,.                     /*   COMPUTE VECTORS DEFINING  */MSTU 380
              DO L=MP TO N,.           /*      THE TRANSFORMATION     */MSTU 390
              J    =J+L-1,.                                             MSTU 400
              S    =0,.                                                 MSTU 410
              LK   =J,.                                                 MSTU 420
                   DO K=MP TO L,.                                       MSTU 430
                   LK   =LK+1,.                                         MSTU 440
                   S=S+MULTIPLY(A(LK),D(K),53),.                        MSTU 450
                   END,.                                                MSTU 460
                   DO K=L+1 TO N,.                                      MSTU 470
                   LK   =LK+K-1,.                                       MSTU 480
                   S=S+MULTIPLY(A(LK),D(K),53),.                        MSTU 490
                   END,.                                                MSTU 500
              DT   =DT+S*D(L),.                                         MSTU 510
              CD(L)=S,.                                                 MSTU 520
              END,.                                                     MSTU 530
         DT   =0.5*DT,.                                                 MSTU 540
         T    =D(MP)*CD(M),.                                            MSTU 550
              DO L=MP TO N,.                                            MSTU 560
              D(L) =D(L)/T,.                                            MSTU 570
              CD(L)=CD(L)+DT*D(L),.                                     MSTU 580
              END,.                                                     MSTU 590
         J    =ICD-M,.                 /*      PERFORM SIMILARITY     */MSTU 600
              DO K=MP TO N,.                                            MSTU 610
              J    =J+K-1,.                                             MSTU 620
              LK   =J,.                                                 MSTU 630
                   DO L=MP TO K,.                                       MSTU 640
                   LK   =LK+1,.                                         MSTU 650
                   S    =A(LK),.                                        MSTU 660
                   S=S+MULTIPLY(D(L),CD(K),53)+MULTIPLY(D(K),CD(L),53),.MSTU 670
                   A(LK)=S,.                                            MSTU 680
                   END,.                                                MSTU 690
              END,.                                                     MSTU 700
 BYPASS..                                                               MSTU 710
         D(MP)=A(ICD+1),.                                               MSTU 720
         END,.                                                          MSTU 730
    ICD  =ICD+N,.                                                       MSTU 740
    CD(N)=A(ICD),.                                                      MSTU 750
    D(N) =A(ICD+1),.                                                    MSTU 760
         DO J=N-1 TO 2 BY -1,.                                          MSTU 770
         CD(J)=CD(J-1),.                                                MSTU 780
         END,.                                                          MSTU 790
    CD(1)=0,.                                                           MSTU 800
 EMSTU..                                                                MSTU 810
    RETURN,.                                                            MSTU 820
    END,.                              /*    END OF PROCEDURE MSTU    */MSTU 830
 MEAT..                                                                 MEAT  10
 /*********************************************************************/MEAT  20
 /*                                                                   */MEAT  30
 /*            EIGENVALUES OF A REAL HESSENBERG MATRIX                */MEAT  40
 /*                                                                   */MEAT  50
 /*********************************************************************/MEAT  60
    PROCEDURE (A,M,RR,RI,ANA),.                                         MEAT  70
    DECLARE                                                             MEAT  80
         ANA(*) BIT(1),                                                 MEAT  90
         (A(*,*),RR(*),RI(*),PRR(2),PRI(2),PAN(2),R,S,EPS,E6,E7,E12,H,T,MEAT 100
          U,V,G1,G2,G3,PSI1,PSI2,PHI,ETA) BINARY,                       MEAT 110
         (I,I1,I2,IP1,IP2,IP3,IT,ITMAX,J,K,N,N1,N2,P,Q,M) BINARY FIXED,.MEAT 120
    E6   =1.0E-6,.                     /*          CONSTANTS          */MEAT 130
    E7   =1.0E-7,.                                                      MEAT 140
    E12  =1.0E-12,.                                                     MEAT 150
    H    =0.5,.                                                         MEAT 160
    ITMAX=30,.                                                          MEAT 170
    N    =M,.                                                           MEAT 180
 BEG..                                 /*        INITIALIZATION       */MEAT 190
    N1   =N-1,.                                                         MEAT 200
    IF N1=0 THEN GO TO ONE,.                                            MEAT 210
    R,S  =0,.                                                           MEAT 220
         DO I=1,2,.                                                     MEAT 230
         PAN(I),PRR(I),PRI(I)=0,.                                       MEAT 240
         END,.                                                          MEAT 250
    N2   =N1-1,.                                                        MEAT 260
         DO IT=1 TO ITMAX,.            /*   START LOOP FOR ITERATION  */MEAT 270
         IF ABS(A(N,N1)) LE E12*ABS(A(N,N)) THEN GO TO ONE,.            MEAT 280
         T    =A(N1,N1)-A(N,N),.       /*   ROOTS OF THE LOWER MAIN   */MEAT 290
         U    =T*T,.                   /*    SUBMATRIX OF ORDER TWO   */MEAT 300
         V    =4*A(N1,N)*A(N,N1),.                                      MEAT 310
         IF ABS(V) LT U*E7                                              MEAT 320
         THEN DO,.                                                      MEAT 330
              RR(N1)=A(N1,N1),.                                         MEAT 340
              RR(N) =A(N,N),.                                           MEAT 350
              GO TO ZIM,.                                               MEAT 360
              END,.                                                     MEAT 370
         ELSE DO,.                                                      MEAT 380
              T    =U+V,.                                               MEAT 390
              IF ABS(T) LT E6*MAX(U,ABS(V)) THEN T=0,.                  MEAT 400
              U    =(A(N1,N1)+A(N,N))/2,.                               MEAT 410
              V    =SQRT(ABS(T))/2,.                                    MEAT 420
              IF T LT 0                                                 MEAT 430
              THEN DO,.                /*        COMPLEX ROOTS        */MEAT 440
                   RR(N),RR(N1)=U,.                                     MEAT 450
                   RI(N)=-V,.                                           MEAT 460
                   RI(N1)=V,.                                           MEAT 470
                   END,.                                                MEAT 480
              ELSE DO,.                /*          REAL ROOTS         */MEAT 490
                   RR(N)=U+V,.                                          MEAT 500
                   RR(N1)=U-V,.                                         MEAT 510
 ZIM..                                                                  MEAT 520
                   RI(N),RI(N1)=0,.                                     MEAT 530
                   IF ABS(RR(N1)) LT ABS(RR(N))                         MEAT 540
                   THEN DO,.                                            MEAT 550
                        T    =RR(N1),.                                  MEAT 560
                        RR(N1)=RR(N),.                                  MEAT 570
                        RR(N)=T,.                                       MEAT 580
                        END,.                                           MEAT 590
                   END,.                                                MEAT 600
              END,.                                                     MEAT 610
         IF N2=0 THEN GO TO TWO,.      /*     TESTS OF CONVERGENCE    */MEAT 620
         EPS  =E12*(RI(N1)+ABS(RR(N1))),.                               MEAT 630
         IF ABS(A(N1,N2)) LE EPS THEN GO TO TWO,.                       MEAT 640
         IF ABS(A(N1,N2)-PAN(1)) LT ABS(A(N1,N2))*E6 THEN GO TO CMP,.   MEAT 650
         IF ABS(A(N,N1)-PAN(2)) LT ABS(A(N,N1))*E6 THEN GO TO CMP,.     MEAT 660
         K    =0,.                                                      MEAT 670
              DO I=1,2,.               /*     DETERMINE THE SHIFT     */MEAT 680
              J=I+N2,.                                                  MEAT 690
              IF ABS(RR(J)-PRR(I))+ABS(RI(J)-PRI(I))                    MEAT 700
                   LT H*(ABS(RR(J))+ABS(RI(J))) THEN K=K+I,.            MEAT 710
              PRR(I)=RR(J),.                                            MEAT 720
              PRI(I)=RI(J),.                                            MEAT 730
              PAN(I)=A(J,J-1),.                                         MEAT 740
              END,.                                                     MEAT 750
         IF K=0                                                         MEAT 760
         THEN R,S  =0,.                                                 MEAT 770
         ELSE IF K=3                                                    MEAT 780
              THEN DO,.                                                 MEAT 790
                   S    =A(N,N)+A(N1,N1),.                              MEAT 800
                   R    =A(N,N)*A(N1,N1)-A(N1,N)*A(N,N1),.              MEAT 810
                   END,.                                                MEAT 820
              ELSE DO,.                                                 MEAT 830
                   R    =PRR(K)*PRR(K),.                                MEAT 840
                   S    =PRR(K)+PRR(K),.                                MEAT 850
                   END,.                                                MEAT 860
         IF N LT 4                     /*    SEARCH FOR A PARTITION   */MEAT 870
         THEN P,Q  =1,.                                                 MEAT 880
         ELSE DO,.                                                      MEAT 890
                   DO Q=N2 TO 2 BY -1,.                                 MEAT 900
                   IF ABS(A(Q,Q-1)) LE EPS THEN GO TO FDP,.             MEAT 910
                   END,.                                                MEAT 920
              Q    =1,.                                                 MEAT 930
 FDP..                                                                  MEAT 940
              IF Q LT N2                                                MEAT 950
              THEN DO P=N2 TO Q+1 BY -1,.                               MEAT 960
                   IP1  =P+1,.                                          MEAT 970
                   IF (ABS(A(P,P)+A(IP1,IP1)-S)+ABS(A(IP1+1,IP1)))      MEAT 980
                        *ABS(A(P,P-1)*A(IP1,P))                         MEAT 990
                      LT EPS*ABS(A(P,P)*(A(P,P)-S)+A(P,IP1)*A(IP1,P)+R) MEAT1000
                   THEN GO TO QRT,.                                     MEAT1010
                   END,.                                                MEAT1020
              P    =Q,.                                                 MEAT1030
              END,.                                                     MEAT1040
 QRT..                                                                  MEAT1050
         DO I=P TO N1,.                /*   START QR TRANSFORMATION   */MEAT1060
         IP1  =I+1,.                                                    MEAT1070
         IP2  =IP1+1,.                                                  MEAT1080
         I1   =I-1,.                                                    MEAT1090
         IF I=P                                                         MEAT1100
         THEN DO,.                     /*  INITIALIZE TRANSFORMATION  */MEAT1110
              G1   =A(I,I)*(A(I,I)-S)+A(I,IP1)*A(IP1,I)+R,.             MEAT1120
              G2   =A(IP1,I)*(A(IP1,IP1)+A(I,I)-S),.                    MEAT1130
              G3   =A(IP1,I)* A(IP2,IP1),.                              MEAT1140
              A(IP2,I)=0,.                                              MEAT1150
              END,.                                                     MEAT1160
         ELSE DO,.                                                      MEAT1170
              G1   =A(I,I1),.                                           MEAT1180
              G2   =A(IP1,I1),.                                         MEAT1190
              IF I GT N2                                                MEAT1200
              THEN G3   =0,.                                            MEAT1210
              ELSE G3   =A(IP2,I1),.                                    MEAT1220
              END,.                                                     MEAT1230
         U    =SQRT(G1*G1+G2*G2+G3*G3),.                                MEAT1240
         IF U=0                                                         MEAT1250
         THEN DO,.                                                      MEAT1260
              PHI  =2,.                                                 MEAT1270
              PSI1,PSI2=0,.                                             MEAT1280
              END,.                                                     MEAT1290
         ELSE DO,.                                                      MEAT1300
              IF G1 LT 0 THEN U=-U,.                                    MEAT1310
              T    =G1+U,.                                              MEAT1320
              PSI1 =G2/T,.                                              MEAT1330
              PSI2 =G3/T,.                                              MEAT1340
              PHI  =2/(1+PSI1*PSI1+PSI2*PSI2),.                         MEAT1350
              END,.                                                     MEAT1360
         IF I=Q THEN GO TO ROW,.                                        MEAT1370
         IF I=P THEN A(I,I1)=-A(I,I1),.                                 MEAT1380
                ELSE A(I,I1)=-U,.                                       MEAT1390
 ROW..                                                                  MEAT1400
              DO J=I TO N,.            /*        ROW OPERATION        */MEAT1410
              T    =PSI1*A(IP1,J),.                                     MEAT1420
              IF I LT N1 THEN T=T+PSI2*A(IP2,J),.                       MEAT1430
              ETA  =PHI*(T+A(I,J)),.                                    MEAT1440
              A(I,J)=A(I,J)-ETA,.                                       MEAT1450
              A(IP1,J)=A(IP1,J)-PSI1*ETA,.                              MEAT1460
              IF I LT N1 THEN A(IP2,J)=A(IP2,J)-PSI2*ETA,.              MEAT1470
              END,.                                                     MEAT1480
         IF I LT N1                    /*       COLUMN OPERATION      */MEAT1490
         THEN K    =IP2,.                                               MEAT1500
         ELSE K    =N,.                                                 MEAT1510
              DO J=Q TO K,.                                             MEAT1520
              T    =PSI1*A(J,IP1),.                                     MEAT1530
              IF I LT N1 THEN T=T+PSI2*A(J,IP2),.                       MEAT1540
              ETA  =PHI*(T+A(J,I)),.                                    MEAT1550
              A(J,I)=A(J,I)-ETA,.                                       MEAT1560
              A(J,IP1)=A(J,IP1)-ETA*PSI1,.                              MEAT1570
              IF I LT N1 THEN A(J,IP2)=A(J,IP2)-ETA*PSI2,.              MEAT1580
              END,.                                                     MEAT1590
         IF I LT N2                                                     MEAT1600
         THEN DO,.                                                      MEAT1610
              IP3  =IP2+1,.                                             MEAT1620
              ETA  =PHI*PSI2*A(IP3,IP2),.                               MEAT1630
              A(IP3,I)=-ETA,.                                           MEAT1640
              A(IP3,IP1)=-ETA*PSI1,.                                    MEAT1650
              A(IP3,IP2)=A(IP3,IP2)-ETA*PSI2,.                          MEAT1660
              END,.                                                     MEAT1670
         END,.                         /*    END QR TRANSFORMATION    */MEAT1680
         END,.                         /*    END LOOP OF ITERATION    */MEAT1690
 CMP..                                                                  MEAT1700
    IF ABS(A(N,N1)) GT ABS(A(N1,N2))                                    MEAT1710
    THEN                                                                MEAT1720
 TWO..                                                                  MEAT1730
         DO,.                          /*  TWO EIGENVALUES HAVE BEEN  */MEAT1740
         ANA(N1)='1'B,.                /*          FOUND              */MEAT1750
         ANA(N)='0'B,.                                                  MEAT1760
         N    =N2,.                                                     MEAT1770
         END,.                                                          MEAT1780
    ELSE                                                                MEAT1790
 ONE..                                                                  MEAT1800
         DO,.                          /*ONE EIGENVALUE HAS BEEN FOUND*/MEAT1810
         ANA(N)='1'B,.                                                  MEAT1820
         RR(N)  =A(N,N),.                                               MEAT1830
         RI(N)  =0,.                                                    MEAT1840
         N    =N1,.                                                     MEAT1850
         END,.                                                          MEAT1860
    IF N GT 0 THEN GO TO BEG,.                                          MEAT1870
    RETURN,.                                                            MEAT1880
    END,.                              /*    END OF PROCEDURE MEAT    */MEAT1890
 MEST..                                                                 MEST  10
 /*********************************************************************/MEST  20
 /*                                                                   */MEST  30
 /*         EIGENVALUES OF A SYMMETRIC TRIDIAGONAL MATRIX             */MEST  40
 /*                                                                   */MEST  50
 /*********************************************************************/MEST  60
    PROCEDURE (A,B,M,D,NEIG),.                                          MEST  70
    DECLARE                                                             MEST  80
         (MIT,M,N,NEIG,NR,I,K,IT,J,IP) BINARY FIXED,                    MEST  90
         (C1,C2,CD(N),CDJ,D(*),E7,E10,G,H,P,PD,S,SH,T,U,A(*),B(*))      MEST 100
         BINARY,.                                                       MEST 110
    E10  =1.0E-20,.                    /*          CONSTANTS          */MEST 120
    E7   =1.0E-7,.                                                      MEST 130
    MIT  =30,.                                                          MEST 140
    H    =0.5,.                                                         MEST 150
    N    =M,.                          /*        INITIALIZATION       */MEST 160
    IF NEIG GE N                                                        MEST 170
    THEN DO,.                                                           MEST 180
         NEIG =N,.                                                      MEST 190
         NR   =N-1,.                                                    MEST 200
         END,.                                                          MEST 210
    ELSE NR   =NEIG,.                                                   MEST 220
    B(1)=0,.                                                            MEST 230
         DO I=1 TO N,.                                                  MEST 240
         D(I)=A(I),.                                                    MEST 250
         CD(I)=B(I)*B(I),.                                              MEST 260
         END,.                                                          MEST 270
         DO K=1 TO NR,.                /*   LOOP FOR NR EIGENVALUES   */MEST 280
         N1   =N-1,.                                                    MEST 290
         PD   =0,.                                                      MEST 300
              DO IT=1 TO MIT,.         /*   START LOOP FOR ITERATION  */MEST 310
              C1   =ABS(D(N)),.                                         MEST 320
              C2   =C1*C1,.            /*       TEST CONVERGENCE      */MEST 330
              IF CD(N) LE E10*C2 THEN GO TO DEC,.                       MEST 340
              S    =ABS(D(N)-PD),.                                      MEST 350
              IF S LE E7*C1 THEN GO TO DEC,.                            MEST 360
              IF S GT H*C1             /*  TEST FOR APPLYING A SHIFT  */MEST 370
              THEN SH   =0,.                                            MEST 380
              ELSE SH   =D(N),.                                         MEST 390
              PD   =D(N),.                                              MEST 400
                   DO J=N1 TO 2 BY -1,./*TEST FOR SPLITTING THE MATRIX*/MEST 410
                   IF CD(J) LE E10*C2 THEN GO TO SIT,.                  MEST 420
                   END,.                                                MEST 430
              J    =1,.                                                 MEST 440
 SIT..                                                                  MEST 450
              S,U  =0,.                /*INITIALIZE THE TRANSFORMATION*/MEST 460
              C2   =1,.                                                 MEST 470
              G    =D(J)-SH,.                                           MEST 480
              P    =G*G,.                                               MEST 490
              CDJ  =CD(J),.                                             MEST 500
                   DO I=J TO N1,.      /*      QR TRANSFORMATION      */MEST 510
                   IP   =I+1,.                                          MEST 520
                   T   =P+CD(IP),.                                      MEST 530
                   CD(I)=S*T,.                                          MEST 540
                   S    =CD(IP)/T,.                                     MEST 550
                   C1   =C2,.                                           MEST 560
                   C2   =P/T,.                                          MEST 570
                   D(IP)=D(IP)-SH,.                                     MEST 580
                   U    =S*(G+D(IP)),.                                  MEST 590
                   D(I) =G+U+SH,.                                       MEST 600
                   G    =D(IP)-U,.                                      MEST 610
                   IF C2=0                                              MEST 620
                   THEN P    =CD(IP)*C1,.                               MEST 630
                   ELSE P    =G*G/C2,.                                  MEST 640
                   END,.                                                MEST 650
              CD(J)=CDJ,.                                               MEST 660
              CD(N)=S*P,.                                               MEST 670
              D(N) =G+SH,.                                              MEST 680
              END,.                    /*    END LOOP FOR ITERATION   */MEST 690
 DEC..                                                                  MEST 700
         N    =N1,.                    /* DEFLATE ORDER OF THE MATRIX */MEST 710
         END,.                                                          MEST 720
    IF NEIG LT M                                                        MEST 730
    THEN DO,.                                                           MEST 740
         J=M-NEIG,.                                                     MEST 750
              DO I=1 TO NEIG,.                                          MEST 760
              J=J+1,.                                                   MEST 770
              D(I)=D(J),.                                               MEST 780
              END,.                                                     MEST 790
         END,.                                                          MEST 800
    RETURN,.                                                            MEST 810
    END,.                              /*    END OF PROCEDURE MEST    */MEST 820
 MEBS..                                                                 MEBS  10
 /*********************************************************************/MEBS  20
 /*                                                                   */MEBS  30
 /*         BOUNDS FOR THE EIGENVALUES OF A SYMMETRIC MATRIX          */MEBS  40
 /*                                                                   */MEBS  50
 /*********************************************************************/MEBS  60
    PROCEDURE (A,N,B1,B2),.                                             MEBS  70
    DECLARE                                                             MEBS  80
         (I,J,K,L,N) BINARY FIXED,                                      MEBS  90
         (A(*),B1,B2,P,SQ) BINARY,                                      MEBS 100
         (S,S1,S2) BINARY(53),.                                         MEBS 110
    J    =2,.                                                           MEBS 120
    S1   =A(1),.                                                        MEBS 130
    S2   =0,.                                                           MEBS 140
    S    =S1*S1,.                                                       MEBS 150
    I    =1,.                                                           MEBS 160
         DO K=2 TO N,.                                                  MEBS 170
         I    =I+K,.                                                    MEBS 180
         S1   =S1+A(I),.               /*        SUM OF THE ROOTS     */MEBS 190
         S=S+MULTIPLY(A(I),A(I),53),.                                   MEBS 200
              DO L=J TO I-1,.                                           MEBS 210
              S2=S2+MULTIPLY(A(L),A(L),53),.                            MEBS 220
              END,.                                                     MEBS 230
         J    =I+1,.                                                    MEBS 240
         END,.                                                          MEBS 250
    S2   =2*S2+S,.                     /* SUM OF THE SQUARES OF ROOTS */MEBS 260
    SQ   =SQRT((N-1)*ABS(N*S2-S1*S1)),./*    ITERATE FROM INFINITY    */MEBS 270
    P    =(1-N)*S2+S1*S1,.                                              MEBS 280
    IF S1 LT 0                                                          MEBS 290
    THEN DO,.                                                           MEBS 300
         B1   =S1-SQ,.                                                  MEBS 310
         B2   =P/B1,.                                                   MEBS 320
         B1   =B1/N,.                                                   MEBS 330
         END,.                                                          MEBS 340
    ELSE DO,.                                                           MEBS 350
         B2   =S1+SQ,.                                                  MEBS 360
         B1   =P/B2,.                                                   MEBS 370
         B2   =B2/N,.                                                   MEBS 380
         END,.                                                          MEBS 390
    RETURN,.                                                            MEBS 400
    END,.                              /*    END OF PROCEDURE MEBS    */MEBS 410
 MVST..                                                                 MVST  10
 /*********************************************************************/MVST  20
 /*                                                                   */MVST  30
 /*          EIGENVECTORS OF A SYMMETRIC TRIDIAGONAL MATRIX           */MVST  40
 /*                                                                   */MVST  50
 /*********************************************************************/MVST  60
    PROCEDURE (D,CD,N,EIG,X),.                                          MVST  70
    DECLARE                                                             MVST  80
         (D(*),CD(*),EIG,Y(*),E7,T,EPS,W,                               MVST  90
          X(N),P(N),Q(N),A(N),R(N),U,V,S,CI,CIP) BINARY,                MVST 100
         (N,I,IP1,N1,IT,I1) BINARY FIXED,                               MVST 110
         CH(N) BIT(1),.                                                 MVST 120
    N1=N-1,.                                                            MVST 130
    E7=1.0E-7,.                                                         MVST 140
    T=ABS(D(1)),.                      /*     NORM OF THE MATRIX      */MVST 150
         DO I=2 TO N,.                                                  MVST 160
         W=MAX(ABS(D(I)),ABS(CD(I))),.                                  MVST 170
         IF W GT T THEN T=W,.                                           MVST 180
         END,.                                                          MVST 190
    EPS=T*E7,.                                                          MVST 200
    U=D(1)-EIG,.                                                        MVST 210
    IF ABS(CD(2)) LT EPS                                                MVST 220
    THEN V,CIP=EPS,.                                                    MVST 230
    ELSE V,CIP=CD(2),.                                                  MVST 240
         DO I=1 TO N1,.                /*     START FACTORIZATION     */MVST 250
         IP1=I+1,.                                                      MVST 260
         CI=CIP,.                                                       MVST 270
         IF I = N1                                                      MVST 280
         THEN CIP=0,.                                                   MVST 290
         ELSE IF ABS(CD(IP1+1)) LT EPS                                  MVST 300
              THEN CIP=EPS,.                                            MVST 310
              ELSE CIP=CD(IP1+1),.                                      MVST 320
         IF ABS(CI) GE ABS(U)          /*          PIVOTING           */MVST 330
         THEN DO,.                     /*         INTERCHANGE         */MVST 340
              IF U NE 0                                                 MVST 350
              THEN A(IP1)=U/CI,.                                        MVST 360
              ELSE IF CI=EPS                                            MVST 370
                   THEN A(IP1)=1,.                                      MVST 380
                   ELSE A(IP1)=0,.                                      MVST 390
              P(I)=CI,.                                                 MVST 400
              Q(I)=D(IP1)-EIG,.                                         MVST 410
              R(I)=CIP,.                                                MVST 420
              U=V-A(IP1)*Q(I),.                                         MVST 430
              V= -A(IP1)*R(I),.                                         MVST 440
              CH(IP1)='1'B,.                                            MVST 450
              END,.                                                     MVST 460
         ELSE DO,.                     /*       NO INTERCHANGE        */MVST 470
              A(IP1)=CI/U,.                                             MVST 480
              P(I)=U,.                                                  MVST 490
              Q(I)=V,.                                                  MVST 500
              R(I)=0,.                                                  MVST 510
              U=D(IP1)-EIG-V*A(IP1),.                                   MVST 520
              V=CIP,.                                                   MVST 530
              CH(IP1)='0'B,.                                            MVST 540
              END,.                                                     MVST 550
         IF ABS(P(I)) LT EPS THEN P(I)=EPS,.                            MVST 560
         X(I)=1,.                      /* INITIAL GUESS OF EIGENVECTOR*/MVST 570
         END,.                                                          MVST 580
    IF ABS(U) LT EPS THEN U=EPS,.                                       MVST 590
    P(N)=U,.                           /*      END FACTORIZATION      */MVST 600
    X(N)=1,.                                                            MVST 610
         DO IT=1,2,.                   /*   START LOOP FOR ITERATION  */MVST 620
         IF IT GT 1                                                     MVST 630
         THEN DO,.                     /*   SOLVE WITH LOWER FACTOR   */MVST 640
              V=ABS(X(1)),.                                             MVST 650
                   DO I=2 TO N,.       /*        NORMALIZATION        */MVST 660
                   U=ABS(X(I)),.                                        MVST 670
                   IF U GT V THEN V=U,.                                 MVST 680
                   END,.                                                MVST 690
              X(1)=X(1)/V,.                                             MVST 700
                   DO I=2 TO N,.                                        MVST 710
                   X(I)=X(I)/V,.                                        MVST 720
                   IF CH(I)                                             MVST 730
                   THEN DO,.                                            MVST 740
                        I1=I-1,.                                        MVST 750
                        U=X(I1),.                                       MVST 760
                        X(I1)=X(I),.                                    MVST 770
                        X(I)=U-A(I)*X(I1),.                             MVST 780
                        END,.                                           MVST 790
                   ELSE X(I)=X(I)-A(I)*X(I-1),.                         MVST 800
                   END,.                                                MVST 810
              END,.                                                     MVST 820
         X(N)=X(N)/P(N),.              /*   SOLVE WITH UPPER FACTOR   */MVST 830
         X(N1)=(X(N1)-Q(N1)*X(N))/P(N1),.                               MVST 840
              DO I=N-2 TO 1 BY -1,.                                     MVST 850
              X(I)=(X(I)-Q(I)*X(I+1)-R(I)*X(I+2))/P(I),.                MVST 860
              END,.                                                     MVST 870
         END,.                         /*    END LOOP OF ITERATION    */MVST 880
    S=0,.                                                               MVST 890
         DO I=1 TO N,.                 /*      NORMALIZE SOLUTION     */MVST 900
         S=S+X(I)*X(I),.                                                MVST 910
         END,.                                                          MVST 920
    S=SQRT(S),.                                                         MVST 930
         DO I=1 TO N,.                                                  MVST 940
         Y(I)=X(I)/S,.                                                  MVST 950
         END,.                                                          MVST 960
    RETURN,.                                                            MVST 970
    END,.                              /*    END OF PROCEDURE MVST    */MVST 980
 MSDU..                                                                 MSDU  10
 /*********************************************************************/MSDU  20
 /*                                                                   */MSDU  30
 /*      TO COMPUTE EIGENVALUES AND EIGENVECTORS OF A REAL SYMMETRIC  */MSDU  40
 /*      MATRIX                                                       */MSDU  50
 /*                                                                   */MSDU  60
 /*********************************************************************/MSDU  70
    PROCEDURE (A,R,N,MV),.                                              MSDU  80
    DECLARE                                                             MSDU  90
         (I,IND,J,L,M,MV,N)                                             MSDU 100
         FIXED BINARY,                                                  MSDU 110
         ERROR EXTERNAL CHARACTER(1),                                   MSDU 120
         (A(*,*),R(*,*),ANORM,ANRMX,THR,U,Y,SINX,SINX2,COSX,COSX2,SINCS,MSDU 130
         FN)                                                            MSDU 140
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/MSDU 150
  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/MSDU 160
 /*                                                                   */MSDU 170
    ERROR='0',.                                                         MSDU 180
    IF N LE 1                          /* THE ORDER OF MATRIX A IS    */MSDU 190
    THEN DO,.                          /* LESS THAN OR EQUAL TO ONE.  */MSDU 200
         ERROR='1',.                                                    MSDU 210
         GO TO FIN,.                                                    MSDU 220
         END,.                                                          MSDU 230
    FN   =N,.                                                           MSDU 240
    IF MV= 0                                                            MSDU 250
    THEN DO,.                                                           MSDU 260
              DO I = 1 TO N,.          /* GENERATE IDENTITY MATRIX    */MSDU 270
                   DO J = 1 TO N,.                                      MSDU 280
                  R(I,J)=0,.                                            MSDU 290
                   END,.                                                MSDU 300
              R(I,I)=1,.                                                MSDU 310
              END,.                                                     MSDU 320
         END,.                                                          MSDU 330
 /*                                                                   */MSDU 340
 /*      COMPUTE INITIAL AND FINAL NORM                               */MSDU 350
 /*                                                                   */MSDU 360
    ANORM=0,.                                                           MSDU 370
         DO I = 1 TO N-1,.                                              MSDU 380
              DO J = I+1 TO N,.                                         MSDU 390
              ANORM=ANORM+A(I,J)*A(I,J),.                               MSDU 400
              END,.                                                     MSDU 410
         END,.                                                          MSDU 420
    IF ANORM LE 0.0                                                     MSDU 430
    THEN GO TO SORT,.                                                   MSDU 440
    ANORM=1.414*SQRT(ANORM),.                                           MSDU 450
    ANRMX=ANORM*1.0E-6/FN,.                                             MSDU 460
 /*                                                                   */MSDU 470
 /*      INITIALIZE INDICATOR AND COMPUTE THRESHOLD, THR              */MSDU 480
 /*                                                                   */MSDU 490
    IND  =0,.                                                           MSDU 500
    THR  =ANORM,.                                                       MSDU 510
 S10..                                                                  MSDU 520
    THR  =THR/FN,.                                                      MSDU 530
 S20..                                                                  MSDU 540
    L    =1,.                                                           MSDU 550
 S30..                                                                  MSDU 560
    M    =L+1,.                                                         MSDU 570
 S40..                                                                  MSDU 580
    IF ABS(A(L,M)) GE THR              /* COMPUTE SIN AND COS         */MSDU 590
    THEN DO,.                                                           MSDU 600
         IND  =1,.                                                      MSDU 610
         U    =0.5*(A(L,L)-A(M,M)),.                                    MSDU 620
         Y    =-A(L,M)/SQRT(A(L,M)*A(L,M)+U*U),.                        MSDU 630
         IF U LT 0.0                                                    MSDU 640
         THEN Y    =-Y,.                                                MSDU 650
         SINX =Y/SQRT(2.0*(1.0+(SQRT(1.0-Y*Y)))),.                      MSDU 660
         SINX2=SINX*SINX,.                                              MSDU 670
         COSX =SQRT(1.0-SINX2),.                                        MSDU 680
         COSX2=COSX*COSX,.                                              MSDU 690
         SINCS=SINX*COSX,.                                              MSDU 700
              DO I = 1 TO N,.          /* ROTATE L AND M COLUMNS      */MSDU 710
              IF I LT L                                                 MSDU 720
              THEN DO,.                                                 MSDU 730
                   IF I LT M                                            MSDU 740
                   THEN DO,.                                            MSDU 750
                        U    =A(I,L)*COSX-A(I,M)*SINX,.                 MSDU 760
                        A(I,M)=A(I,L)*SINX+A(I,M)*COSX,.                MSDU 770
                        A(I,L)=U,.                                      MSDU 780
                        END,.                                           MSDU 790
                   END,.                                                MSDU 800
              ELSE IF I GT L                                            MSDU 810
              THEN DO,.                                                 MSDU 820
                   IF I LT M                                            MSDU 830
                   THEN DO,.                                            MSDU 840
                        U    =A(L,I)*COSX-A(I,M)*SINX,.                 MSDU 850
                        A(I,M)=A(L,I)*SINX+A(I,M)*COSX,.                MSDU 860
                        END,.                                           MSDU 870
                   ELSE IF I GT M                                       MSDU 880
                   THEN DO,.                                            MSDU 890
                        U    =A(L,I)*COSX-A(M,I)*SINX,.                 MSDU 900
                        A(M,I)=A(L,I)*SINX+A(M,I)*COSX,.                MSDU 910
                        END,.                                           MSDU 920
                   IF I NE M                                            MSDU 930
                   THEN A(L,I)=U,.                                      MSDU 940
                   END,.                                                MSDU 950
              IF MV= 0                                                  MSDU 960
              THEN DO,.                                                 MSDU 970
                   U    =R(I,L)*COSX-R(I,M)*SINX,.                      MSDU 980
                   R(I,M)=R(I,L)*SINX+R(I,M)*COSX,.                     MSDU 990
                   R(I,L)=U,.                                           MSDU1000
                   END,.                                                MSDU1010
              END,.                                                     MSDU1020
         U    =2.0*A(L,M)*SINCS,.                                       MSDU1030
         Y    =A(L,L)*COSX2+A(M,M)*SINX2-U,.                            MSDU1040
         U    =A(L,L)*SINX2+A(M,M)*COSX2+U,.                            MSDU1050
         A(L,M)=(A(L,L)-A(M,M))*SINCS+A(L,M)*(COSX2-SINX2),.            MSDU1060
         A(L,L)=Y,.                                                     MSDU1070
         A(M,M)=U,.                                                     MSDU1080
         END,.                                                          MSDU1090
    IF M NE N                          /* TEST FOR M = LAST COLUMN    */MSDU1100
    THEN DO,.                                                           MSDU1110
         M    =M+1,.                                                    MSDU1120
         GO TO S40,.                                                    MSDU1130
         END,.                                                          MSDU1140
 /*                                                                   */MSDU1150
 /*      TEST FOR L = SECOND FROM LAST COLUMN                         */MSDU1160
 /*                                                                   */MSDU1170
    IF L NE N-1                                                         MSDU1180
    THEN DO,.                                                           MSDU1190
         L    =L+1,.                                                    MSDU1200
         GO TO S30,.                                                    MSDU1210
         END,.                                                          MSDU1220
    IF IND= 1                                                           MSDU1230
    THEN DO,.                                                           MSDU1240
         IND  =0,.                                                      MSDU1250
         GO TO S20,.                                                    MSDU1260
         END,.                                                          MSDU1270
 /*                                                                   */MSDU1280
 /*      COMPARE THRESHOLD WITH FINAL NORM                            */MSDU1290
 /*                                                                   */MSDU1300
    IF THR GT ANRMX                                                     MSDU1310
    THEN GO TO S10,.                                                    MSDU1320
 /*                                                                   */MSDU1330
 /*      SORT EIGENVALUES AND EIGENVECTORS                            */MSDU1340
 /*                                                                   */MSDU1350
 SORT..                                                                 MSDU1360
         DO I = 1 TO N,.                                                MSDU1370
              DO J = I TO N,.                                           MSDU1380
              IF A(I,I) LT A(J,J)                                       MSDU1390
              THEN DO,.                                                 MSDU1400
                   U    =A(I,I),.                                       MSDU1410
                   A(I,I)=A(J,J),.                                      MSDU1420
                   A(J,J)=U,.                                           MSDU1430
                   IF MV= 0                                             MSDU1440
                   THEN DO,.                                            MSDU1450
                             DO L = 1 TO N,.                            MSDU1460
                             U    =R(L,I),.                             MSDU1470
                             R(L,I)=R(L,J),.                            MSDU1480
                             R(L,J)=U,.                                 MSDU1490
                             END,.                                      MSDU1500
                        END,.                                           MSDU1510
                   END,.                                                MSDU1520
              END,.                                                     MSDU1530
         END,.                                                          MSDU1540
 FIN..                                                                  MSDU1550
    RETURN,.                                                            MSDU1560
    END,.                              /*END OF PROCEDURE MSDU        */MSDU1570
 MGDU..                                                                 MGDU  10
 /*********************************************************************/MGDU  20
 /*                                                                   */MGDU  30
 /*      TO COMPUTE EIGENVALUES AND EIGENVECTORS OF A REAL NONSYMM-   */MGDU  40
 /*      ETRIC MATRIX OF THE FORM B INVERSE TIMES A.                  */MGDU  50
 /*                                                                   */MGDU  60
 /*********************************************************************/MGDU  70
    PROCEDURE (M,A,B,XL,X),.                                            MGDU  80
    DECLARE                                                             MGDU  90
         (I,J,M,MV,K)                                                   MGDU 100
         FIXED BINARY,                                                  MGDU 110
         ERROR EXTERNAL CHARACTER(1),                                   MGDU 120
         (A(*,*),B(*,*),X(*,*),XL(*),SUMV)                              MGDU 130
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/MGDU 140
  /*     BINARY FLOAT(53),.            /*DOUBLE PRECISION VERSION  /*D*/MGDU 150
 /*                                                                   */MGDU 160
 /*      COMPUTE EIGENVALUES AND EIGENVECTORS OF B                    */MGDU 170
 /*                                                                   */MGDU 180
 /*      THE MATRIX B IS A REAL SYMMETRIC MATRIX.                     */MGDU 190
 /*                                                                   */MGDU 200
    MV   =0,.                                                           MGDU 210
    CALL MSDU (B,X,M,MV),.                                              MGDU 220
    IF ERROR NE '0'                                                     MGDU 230
    THEN GO TO FIN,.                                                    MGDU 240
 /*                                                                   */MGDU 250
 /*      FORM RECIPROCALS OF SQUARE ROOT OF EIGENVALUES. THE RESULTS  */MGDU 260
 /*      ARE PREMULTIPLIED BY THE ASSOCIATED EIGENVECTORS.            */MGDU 270
 /*                                                                   */MGDU 280
         DO I = 1 TO M,.                                                MGDU 290
         XL(I)=1.0/SQRT(ABS(B(I,I))),.                                  MGDU 300
              DO J = 1 TO M,.                                           MGDU 310
              B(J,I)=X(J,I)*XL(I),.                                     MGDU 320
              END,.                                                     MGDU 330
         END,.                                                          MGDU 340
 /*                                                                   */MGDU 350
 /*      FORM (B**(-1/2))PRIME * A * (B**(-1/2))                      */MGDU 360
 /*                                                                   */MGDU 370
         DO I = 1 TO M,.                                                MGDU 380
              DO J = 1 TO M,.                                           MGDU 390
              X(I,J)=0.0,.                                              MGDU 400
                   DO K = 1 TO M,.                                      MGDU 410
                   X(I,J)=X(I,J)+B(K,I)*A(K,J),.                        MGDU 420
                   END,.                                                MGDU 430
              END,.                                                     MGDU 440
         END,.                                                          MGDU 450
         DO I = 1 TO M,.                                                MGDU 460
              DO J = 1 TO M,.                                           MGDU 470
              A(I,J)=0.0,.                                              MGDU 480
                   DO K = 1 TO M,.                                      MGDU 490
                   A(I,J)=A(I,J)+X(I,K)*B(K,J),.                        MGDU 500
                   END,.                                                MGDU 510
              END,.                                                     MGDU 520
         END,.                                                          MGDU 530
 /*                                                                   */MGDU 540
 /*      COMPUTE EIGENVALUES AND EIGENVECTORS OF A                    */MGDU 550
 /*                                                                   */MGDU 560
    CALL MSDU (A,X,M,MV),.                                              MGDU 570
         DO I = 1 TO M,.                                                MGDU 580
         XL(I)=A(I,I),.                                                 MGDU 590
 /*                                                                   */MGDU 600
 /*      COMPUTE THE NORMALIZED EIGENVECTORS                          */MGDU 610
 /*                                                                   */MGDU 620
              DO J = 1 TO M,.                                           MGDU 630
              A(I,J)=0.0,.                                              MGDU 640
                   DO K = 1 TO M,.                                      MGDU 650
                   A(I,J)=A(I,J)+B(I,K)*X(K,J),.                        MGDU 660
                   END,.                                                MGDU 670
              END,.                                                     MGDU 680
         END,.                                                          MGDU 690
         DO J = 1 TO M,.                                                MGDU 700
         SUMV =0.0,.                                                    MGDU 710
              DO K = 1 TO M,.                                           MGDU 720
              SUMV =SUMV+A(K,J)*A(K,J),.                                MGDU 730
              END,.                                                     MGDU 740
         SUMV =SQRT(SUMV),.                                             MGDU 750
              DO K = 1 TO M,.                                           MGDU 760
              X(K,J)=A(K,J)/SUMV,.                                      MGDU 770
              END,.                                                     MGDU 780
         END,.                                                          MGDU 790
 FIN..                                                                  MGDU 800
    RETURN,.                                                            MGDU 810
    END,.                              /*END OF PROCEDURE MGDU        */MGDU 820
 MVAT..                                                                 MVAT  10
 /*********************************************************************/MVAT  20
 /*                                                                   */MVAT  30
 /*          EIGENVECTORS OF A COMPLEX HESSENBERG MATRIX              */MVAT  40
 /*                                                                   */MVAT  50
 /*********************************************************************/MVAT  60
    PROCEDURE (A,N,EIG,V),.                                             MVAT  70
    DECLARE                                                             MVAT  80
         P(N)                                                           MVAT  90
         BIT(1),                                                        MVAT 100
         (E7,U,T,EPS)                                                   MVAT 110
         BINARY,                                                        MVAT 120
         (A(*,*),EIG,C,V(*))                                            MVAT 130
         COMPLEX BINARY,                                                MVAT 140
         S                                                              MVAT 150
         COMPLEX BINARY(53),                                            MVAT 160
         (N,IS(N),I,I1,J,N1,K,K1,KP1,IT)                                MVAT 170
         BINARY FIXED,.                                                 MVAT 180
    E7=1.0E-7,.                                                         MVAT 190
    A(1,1)=A(1,1)-EIG,.                /*   MODIFY DIAGONAL ELEMENTS  */MVAT 200
    IS(1)=1,.                                                           MVAT 210
    U=ABS(A(1,1)),.                    /*COMPUTE A NORM OF THE MATRIX */MVAT 220
         DO I=2 TO N,.                                                  MVAT 230
         I1=I-1,.                                                       MVAT 240
         IS(I)=I1,.                                                     MVAT 250
         A(I,I)=A(I,I)-EIG,.                                            MVAT 260
         T=ABS(A(1,I)),.                                                MVAT 270
         IF T GT U THEN U=T,.                                           MVAT 280
              DO J=I1 TO N,.                                            MVAT 290
              T=ABS(A(I,J)),.                                           MVAT 300
              IF T GT U THEN U=T,.                                      MVAT 310
              END,.                                                     MVAT 320
         END,.                                                          MVAT 330
    EPS=U*E7,.                                                          MVAT 340
    N1=N-1,.                           /*     START FACTORIZATION     */MVAT 350
    P(1)='0'B,.                                                         MVAT 360
    IF ABS(A(2,1)) GT ABS(A(1,1))      /*       INITIALIZATION        */MVAT 370
    THEN DO,.                                                           MVAT 380
         P(1)='1'B,.                                                    MVAT 390
              DO I=1 TO N,.                                             MVAT 400
              C=A(1,I),.                                                MVAT 410
              A(1,I)=A(2,I),.                                           MVAT 420
              A(2,I)=C,.                                                MVAT 430
              END,.                                                     MVAT 440
         END,.                                                          MVAT 450
    IF ABS(A(1,1)) LT EPS THEN A(1,1)=EPS,.                             MVAT 460
    A(2,1)=A(2,1)/A(1,1),.                                              MVAT 470
         DO K=2 TO N1,.                                                 MVAT 480
         KP1=K+1,.                                                      MVAT 490
         K1=K-1,.                                                       MVAT 500
         S=A(K,K),.                    /*   COMPUTE THE LOWER FACTOR  */MVAT 510
              DO I=IS(K) TO K1,.                                        MVAT 520
              S=S-MULTIPLY(A(K,I),A(I,K),53),.                          MVAT 530
              END,.                                                     MVAT 540
         A(K,K)=S,.                                                     MVAT 550
         IF ABS(A(K,K)) LT ABS(A(KP1,K))                                MVAT 560
         THEN DO,.                     /*          PIVOTING           */MVAT 570
              P(K)='1'B,.                                               MVAT 580
                   DO I=K TO N,.                                        MVAT 590
                   C=A(K,I),.                                           MVAT 600
                   A(K,I)=A(KP1,I),.                                    MVAT 610
                   A(KP1,I)=C,.                                         MVAT 620
                   END,.                                                MVAT 630
                   DO I=IS(K) TO K1,.                                   MVAT 640
                   A(KP1,I)=A(K,I),.                                    MVAT 650
                   END,.                                                MVAT 660
              I=IS(K),.                                                 MVAT 670
              IS(K)=IS(KP1),.                                           MVAT 680
              IS(KP1)=I,.                                               MVAT 690
              END,.                                                     MVAT 700
         ELSE DO,.                                                      MVAT 710
              P(K)='0'B,.                                               MVAT 720
                   DO J=KP1 TO N,.     /*   COMPUTE THE UPPER FACTOR  */MVAT 730
                   S=A(K,J),.                                           MVAT 740
                        DO I=IS(K) TO K1,.                              MVAT 750
                        S=S-MULTIPLY(A(I,J),A(K,I),53),.                MVAT 760
                        END,.                                           MVAT 770
                   A(K,J)=S,.                                           MVAT 780
                   END,.                                                MVAT 790
              END,.                                                     MVAT 800
                                       /*  NORMALIZE THE LOWER FACTOR */MVAT 810
         IF ABS(A(K,K)) LT EPS THEN A(K,K)=EPS,.                        MVAT 820
         A(KP1,K)=A(KP1,K)/A(K,K),.                                     MVAT 830
         END,.                                                          MVAT 840
    S=A(N,N),.                                                          MVAT 850
         DO I=IS(N) TO N1,.                                             MVAT 860
         S=S-MULTIPLY(A(N,I),A(I,N),53),.                               MVAT 870
         END,.                                                          MVAT 880
    A(N,N)=S,.                         /*      END FACTORIZATION      */MVAT 890
    IF ABS(A(N,N)) LT EPS THEN A(N,N)=EPS,.                             MVAT 900
         DO I=1 TO N,.                 /*      INVERSE ITERATION      */MVAT 910
         V(I)=1,.                      /*       STARTING VALUE        */MVAT 920
         END,.                                                          MVAT 930
         DO IT=1,2,.                                                    MVAT 940
         K=N,.                                                          MVAT 950
         IF IT GT 1                                                     MVAT 960
         THEN DO,.                                                      MVAT 970
                   DO I=1 TO N1,.      /*        INTERCHANGES         */MVAT 980
                   IF P(I)                                              MVAT 990
                   THEN DO,.                                            MVAT1000
                        I1=I+1,.                                        MVAT1010
                        C=V(I),.                                        MVAT1020
                        V(I)=V(I1),.                                    MVAT1030
                        V(I1)=C,.                                       MVAT1040
                        END,.                                           MVAT1050
                   END,.                                                MVAT1060
                   DO I=2 TO N,.       /*   SOLVE WITH LOWER FACTOR   */MVAT1070
                        S=V(I),.                                        MVAT1080
                             DO J=IS(I) TO I-1,.                        MVAT1090
                             S=S-MULTIPLY(A(I,J),V(J),53),.             MVAT1100
                             END,.                                      MVAT1110
                        V(I)=S,.                                        MVAT1120
                   END,.                                                MVAT1130
              END,.                                                     MVAT1140
         V(N)=V(N)/A(N,N),.            /*   SOLVE WITH UPPER FACTOR   */MVAT1150
         U=ABS(V(N)),.                                                  MVAT1160
              DO I=N1 TO 1 BY -1,.                                      MVAT1170
              S=V(I),.                                                  MVAT1180
                   DO J=I+1 TO N,.                                      MVAT1190
                   S=S-MULTIPLY(A(I,J),V(J),53),.                       MVAT1200
                   END,.                                                MVAT1210
              V(I)=S/A(I,I),.                                           MVAT1220
              T=ABS(V(I)),.                                             MVAT1230
              IF T GT U                                                 MVAT1240
              THEN DO,.                                                 MVAT1250
                   K=I,.                                                MVAT1260
                   U=T,.                                                MVAT1270
                   END,.                                                MVAT1280
              END,.                                                     MVAT1290
         C    =V(K),.                                                   MVAT1300
              DO I=1 TO N,.            /*  NORMALIZE RESULTING VECTOR */MVAT1310
              V(I) =V(I)/C,.                                            MVAT1320
              END,.                                                     MVAT1330
         END,.                         /*  END OF LOOP FOR ITERATION  */MVAT1340
    RETURN,.                                                            MVAT1350
    END,.                              /*    END OF PROCEDURE MVAT    */MVAT1360
 MVSU..                                                                 MVSU  10
 /*********************************************************************/MVSU  20
 /*                                                                   */MVSU  30
 /*             BACK TRANSFORMATION OF THE EIGENVECTORS               */MVSU  40
 /*                           SYMMETRIC CASE                          */MVSU  50
 /*                                                                   */MVSU  60
 /*********************************************************************/MVSU  70
    PROCEDURE (A,N,CD,V),.                                              MVSU  80
    DECLARE                                                             MVSU  90
         (A(*),CD(*),V(*),T,C) BINARY,                                  MVSU 100
         (N,ICD,K,KP1,J,I) BINARY FIXED,                                MVSU 110
         (S,DP) BINARY(53),.                                            MVSU 120
    ICD=(N*(N+1))/2-1,.                                                 MVSU 130
         DO K=N-1 TO 2 BY -1,.                                          MVSU 140
         KP1=K+1,.                                                      MVSU 150
         ICD=ICD-KP1,.                                                  MVSU 160
         C=A(ICD)-CD(K),.                                               MVSU 170
         IF C NE 0                                                      MVSU 180
         THEN DO,.                     /*  ORTHOGONAL TRANSFORMATION  */MVSU 190
              S=0,.                                                     MVSU 200
                   J=ICD-K+1,.                                          MVSU 210
                        DO I=K TO N,.                                   MVSU 220
                        J=J+I-1,.                                       MVSU 230
                        S=S+MULTIPLY(A(J),V(I),53),.                    MVSU 240
                        END,.                                           MVSU 250
                   S=S/CD(K),.                                          MVSU 260
                   T=(S-V(K))/C,.                                       MVSU 270
                   V(K)=S,.                                             MVSU 280
                   J=ICD,.                                              MVSU 290
                        DO I=KP1 TO N,.                                 MVSU 300
                        J=J+I-1,.                                       MVSU 310
                        V(I)=V(I)+T*A(J),.                              MVSU 320
                        END,.                                           MVSU 330
              END,.                                                     MVSU 340
         END,.                                                          MVSU 350
         S=0,.                         /*          NORMALIZE          */MVSU 360
              DO I=1 TO N,.                                             MVSU 370
              DP=V(I),.                                                 MVSU 380
              S=S+DP*DP,.                                               MVSU 390
              END,.                                                     MVSU 400
         S=SQRT(S),.                                                    MVSU 410
              DO I=1 TO N,.                                             MVSU 420
              V(I)=V(I)/S,.                                             MVSU 430
              END,.                                                     MVSU 440
    RETURN,.                                                            MVSU 450
    END,.                              /*    END OF PROCEDURE MVSU    */MVSU 460
 MVUB..                                                                 MVUB  10
 /*********************************************************************/MVUB  20
 /*                                                                   */MVUB  30
 /*              BACK TRANSFORMATION OF THE EIGENVECTORS              */MVUB  40
 /*                   HOUSEHOLDER'S TRANSFORMATIONS                   */MVUB  50
 /*                                                                   */MVUB  60
 /*********************************************************************/MVUB  70
    PROCEDURE (A,N,B,V),.                                               MVUB  80
    DECLARE                                                             MVUB  90
         (A(*,*),B(*),T,U) BINARY,                                      MVUB 100
         (I,K,K1,KP1,N) BINARY FIXED,                                   MVUB 110
         (V(*),X) COMPLEX BINARY,                                       MVUB 120
         S COMPLEX BINARY(53),.                                         MVUB 130
         DO K=N-1 TO 2 BY -1,.                                          MVUB 140
         IF B(K) NE 0                                                   MVUB 150
         THEN DO,.                     /*  ORTHOGONAL TRANSFORMATION  */MVUB 160
              KP1=K+1,.                                                 MVUB 170
              K1=K-1,.                                                  MVUB 180
              S=MULTIPLY(B(K),V(K),53),.                                MVUB 190
                   DO I=KP1 TO N,.                                      MVUB 200
                   S=S+MULTIPLY(A(I,K1),V(I),53),.                      MVUB 210
                   END,.                                                MVUB 220
              S=S/A(K,K1),.                                             MVUB 230
              X=(S-V(K))/(B(K)-A(K,K1)),.                               MVUB 240
              V(K)=S,.                                                  MVUB 250
                   DO I=KP1 TO N,.                                      MVUB 260
                   V(I)=V(I)+X*A(I,K1),.                                MVUB 270
                   END,.                                                MVUB 280
              END,.                                                     MVUB 290
         END,.                                                          MVUB 300
    K=1,.                                                               MVUB 310
    T=ABS(V(1)),.                      /*          NORMALIZE          */MVUB 320
         DO I=2 TO N,.                                                  MVUB 330
         U=ABS(V(I)),.                                                  MVUB 340
         IF U GT T                                                      MVUB 350
         THEN DO,.                                                      MVUB 360
              T=U,.                                                     MVUB 370
              K=I,.                                                     MVUB 380
              END,.                                                     MVUB 390
         END,.                                                          MVUB 400
    X    =V(K),.                                                        MVUB 410
         DO I=1 TO N,.                                                  MVUB 420
         V(I) =V(I)/X,.                                                 MVUB 430
         END,.                                                          MVUB 440
    RETURN,.                                                            MVUB 450
    END,.                              /*    END OF PROCEDURE MVUB    */MVUB 460
 MVEB..                                                                 MVEB  10
 /*********************************************************************/MVEB  20
 /*                                                                   */MVEB  30
 /*              BACK TRANSFORMATION OF THE EIGENVECTORS              */MVEB  40
 /*                      ELIMINATION TECHNIQUES                       */MVEB  50
 /*                                                                   */MVEB  60
 /*********************************************************************/MVEB  70
    PROCEDURE (A,N,IP,V),.                                              MVEB  80
    DECLARE                                                             MVEB  90
         (A(*,*),T,U) BINARY,                                           MVEB 100
         (V(*),C) COMPLEX BINARY,                                       MVEB 110
         (IP(*),I,K,K1,N) BINARY FIXED,                                 MVEB 120
         S COMPLEX BINARY(53),.                                         MVEB 130
         DO K=2 TO N-1,.                                                MVEB 140
         K1=K+1,.                                                       MVEB 150
         IF A(K1,K) NE 0                                                MVEB 160
         THEN DO,.                     /*  ELEMENTARY TRANSFORMATION  */MVEB 170
              S=V(K),.                                                  MVEB 180
                   DO I=1 TO K-1,.                                      MVEB 190
                   S=S-MULTIPLY(A(K1,I),V(I),53),.                      MVEB 200
                   END,.                                                MVEB 210
              V(K)=S,.                                                  MVEB 220
              END,.                                                     MVEB 230
         END,.                                                          MVEB 240
         DO K=2 TO N-1,.                                                MVEB 250
         IF IP(K) NE K                 /*        INTERCHANGES         */MVEB 260
         THEN DO,.                                                      MVEB 270
              I=IP(K),.                                                 MVEB 280
              C=V(K),.                                                  MVEB 290
              V(K)=V(I),.                                               MVEB 300
              V(I)=C,.                                                  MVEB 310
              END,.                                                     MVEB 320
         END,.                                                          MVEB 330
    K=1,.                                                               MVEB 340
    T=ABS(V(1)),.                      /*          NORMALIZE          */MVEB 350
         DO I=2 TO N,.                                                  MVEB 360
         U=ABS(V(I)),.                                                  MVEB 370
         IF U GT T                                                      MVEB 380
         THEN DO,.                                                      MVEB 390
              T=U,.                                                     MVEB 400
              K=I,.                                                     MVEB 410
              END,.                                                     MVEB 420
         END,.                                                          MVEB 430
    C    =V(K),.                                                        MVEB 440
         DO I=1 TO N,.                                                  MVEB 450
         V(I) =V(I)/C,.                                                 MVEB 460
         END,.                                                          MVEB 470
    RETURN,.                                                            MVEB 480
    END,.                              /*    END OF PROCEDURE MVEB    */MVEB 490
 POV..                                                                  POV   10
 /*********************************************************************/POV   20
 /*                                                                   */POV   30
 /*      CALCULATE VALUES OF FIRST N ORTHOGONAL POLYNOMIALS           */POV   40
 /*                                                                   */POV   50
 /*********************************************************************/POV   60
    PROCEDURE(X,N,OPT,Y),.                                              POV   70
    DECLARE                                                             POV   80
         (LX,H,H0,H1,H2,FN) BINARY FLOAT(53),                           POV   90
         (Y(*),X)                                                       POV  100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/POV  110
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/POV  120
         (N,I) BINARY FIXED,                                            POV  130
         OPT CHARACTER(1),.                                             POV  140
    LX   =X,.                                                           POV  150
    IF N GE 1                          /*BYPASS OPERATION IF N LE 0   */POV  160
    THEN DO,.                                                           POV  170
         IF OPT='T'                    /*CHEBYSHEV POLYNOMIALS T(X)   */POV  180
         THEN H0   =LX,.               /*INIT. STARTING VALUE         */POV  190
         ELSE DO,.                                                      POV  200
              FN   =1,.                /*INIT. INTEGER FACTOR TERM    */POV  210
              H0   =0,.                /*INIT. STARTING VALUE         */POV  220
              END,.                                                     POV  230
         Y(1),H1=1,.                   /*STORE AND SAVE FIRST RESULT  */POV  240
              DO I = 2 TO N,.                                           POV  250
              H2   =LX*H1,.            /*PERFORM COMMON CALCULATION   */POV  260
              H    =H2-H0,.                                             POV  270
              IF OPT NE 'T'            /*CHEBYSHEV POLYNOMIALS T(X)   */POV  280
              THEN DO,.                                                 POV  290
                   IF OPT= 'H'         /*HERMITE POLYNOMIALS H(X)     */POV  300
                   THEN DO,.                                            POV  310
                        H2   =H2+FN*H0,.                                POV  320
                        FN   =FN-2,.   /*STEP INTEGER FACTOR          */POV  330
                        END,.                                           POV  340
                   ELSE DO,.                                            POV  350
                        IF OPT= 'L'    /*LAGUERRE POLYNOMIALS L(X)    */POV  360
                        THEN DO,.                                       POV  370
                             H2   =H1-(H+H1)/FN,.                       POV  380
                             H    =H1-H0,.                              POV  390
                             END,.                                      POV  400
                        ELSE H2   =H2  /*LEGENDRE POLYNOMIALS P(X)    */POV  410
                             -H/FN,.                                    POV  420
                        FN   =FN+1,.   /*STEP INTEGER DENOMINATOR     */POV  430
                        END,.                                           POV  440
                   END,.               /*CONTINUE COMMON CALCULATION  */POV  450
              H0   =H1,.               /*SAVE PRECEDING RESULT VALUE  */POV  460
              H1,Y(I)=H+H2,.           /*STORE AND SAVE I-TH RESULT   */POV  470
              END,.                                                     POV  480
         END,.                                                          POV  490
    END,.                              /*END OF PROCEDURE POV         */POV  500
 POSV..                                                                 POSV  10
 /*********************************************************************/POSV  20
 /*                                                                   */POSV  30
 /*      EVALUATE N-TERM SERIES EXPANSION IN ORTHOGONAL POLYNOMIALS   */POSV  40
 /*                                                                   */POSV  50
 /*********************************************************************/POSV  60
    PROCEDURE(X,C,N,OPT,SUM),.                                          POSV  70
    DECLARE                                                             POSV  80
         (LX,H,H0,H1,H2,FN) BINARY FLOAT(53),                           POSV  90
         (X,C(*),SUM)                                                   POSV 100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/POSV 110
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/POSV 120
         (N,I) BINARY FIXED,                                            POSV 130
         OPT CHARACTER(1),.                                             POSV 140
    I    =N,.                                                           POSV 150
    IF I GE 1                          /*BYPASS OPERATION IF N LE 0   */POSV 160
    THEN DO,.                                                           POSV 170
         LX   =X,.                                                      POSV 180
         IF OPT='L'                    /*LAGUERRE POLYNOMIALS L(X)    */POSV 190
         THEN LX   =1-LX,.                                              POSV 200
         H2,H1=0,.                     /*ZERO U(N+1), U(N+2) OR V(N+2)*/POSV 210
         FN   =I,.                                                      POSV 220
 ITER..                                /*LOOP OVER I = N TO 1 BY -1   */POSV 230
         IF OPT='T'                    /*CHEBYSHEV POLYNOMIALS T(X)   */POSV 240
         THEN DO,.                                                      POSV 250
              H0   =LX*H1,.                                             POSV 260
              H    =H0-H2+H0,.         /*H = 2*X*U(I+1)-U(I+2)        */POSV 270
              END,.                                                     POSV 280
         ELSE DO,.                                                      POSV 290
              IF OPT='H'               /*HERMITE POLYNOMIALS H(X)     */POSV 300
              THEN DO,.                                                 POSV 310
                   H    =LX*H1-FN*H2,.                                  POSV 320
                   H    =H+H,.         /*H = 2*(X*U(I+1)-I*U(I+2))    */POSV 330
                   END,.                                                POSV 340
              ELSE DO,.                /*LAGUERRE OR LEGENDRE POLYNOM.*/POSV 350
                   H0   =H1,.          /*SAVE U(I+1)                  */POSV 360
                   H    =H1/FN,.                                        POSV 370
                   H1   =H1-H,.        /*COMPUTE V(I+1)               */POSV 380
                   IF OPT='L'          /*LAGUERRE POLYNOMIALS L(X)    */POSV 390
                   THEN H =H1+LX*H+H1,./*H = 2*V(I+1)+(1-X)*U(I+1)    */POSV 400
                   ELSE H =LX*(H1+H0),./*LEGENDRE POLYNOMIALS L(X)    */POSV 410
                        H    =H-H2,.   /*H = X*(V(I+1)+U(I+1))        */POSV 420
                   END,.               /*FOR BOTH H = H-V(I+2)        */POSV 430
              FN   =FN-1,.             /*DECREASE INTEGER FACTOR      */POSV 440
              END,.                                                     POSV 450
         H2   =H1,.                    /*SAVE U(I+1) RESP. V(I+1)     */POSV 460
         H1   =H+C(I),.                /*COMP. U(I) = H+C(I)          */POSV 470
         I    =I-1,.                   /*DECREASE COUNTER I           */POSV 480
         IF I GT 0                                                      POSV 490
         THEN GO TO ITER,.             /*END OF LOOP OVER I           */POSV 500
         IF OPT='T'                                                     POSV 510
         THEN H1   =H1-H0,.            /*MODIFY U(1) IN CHEBYSHEV CASE*/POSV 520
         SUM  =H1,.                    /*RETURN VALUE OF SERIES       */POSV 530
         END,.                                                          POSV 540
    END,.                              /*END OF PROCEDURE POSV        */POSV 550
 PEC..                                                                  PEC   10
 /*********************************************************************/PEC   20
 /*                                                                   */PEC   30
 /*      POLYNOMIAL ECONOMIZATION OVER THE RANGE (0,A) IF OPT ='S'    */PEC   40
 /*      AND OVER THE RANGE (-A,A) IF OPT ='0'                        */PEC   50
 /*                                                                   */PEC   60
 /*********************************************************************/PEC   70
    PROCEDURE(C,N,M,TOL,EPS,A,OPT),.                                    PEC   80
    DECLARE                                                             PEC   90
         (C(*),A,FV,FX,FM,U,V,W)                                        PEC  100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/PEC  110
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/PEC  120
         (TOL,EPS)BINARY FLOAT,                                         PEC  130
         (N,M,NH,NT,JE,I,IC,NOD,JST,IST,J)                              PEC  140
         BINARY FIXED,                                                  PEC  150
         LN BINARY FIXED(31),                                           PEC  160
         (OPT,SW,ERROR EXTERNAL) CHARACTER(1),.                         PEC  170
    SW   ='E',.                        /*MARK ENTRY ECONOMIZATION     */PEC  180
    EPS,M = 0,.                                                         PEC  190
    GO TO COM,.                                                         PEC  200
 PTC..                                                                  PEC  210
 /*********************************************************************/PEC  220
 /*                                                                   */PEC  230
 /*      TRANSFORMATION OF POLYNOMIAL TO AN EXPANSION IN TERMS OF     */PEC  240
 /*      CHEBYSHEV POLYNOMIALS OVER THE RANGE (-A,A) IF OPT='0' AND   */PEC  250
 /*      SHIFTED CHEBYSHEV POLYNOMIALS OVER THE RANGE (0,A) IF OPT='S'*/PEC  260
 /*                                                                   */PEC  270
 /*********************************************************************/PEC  280
    ENTRY(C,N,A,OPT),.                                                  PEC  290
    SW   ='T',.                        /*MARK ENTRY TRANSFORMATION    */PEC  300
 COM..                                                                  PEC  310
    LN   =N,.                                                           PEC  320
    IF LN LE 0                                                          PEC  330
    THEN GO TO EXIT,.                  /*GIVEN N IS NOT POSITIVE      */PEC  340
    IF OPT NE 'S'                                                       PEC  350
    THEN DO,.                                                           PEC  360
         FV   =1,.                                                      PEC  370
         NH   =LN/10B,.                                                 PEC  380
         JST  =2,.                                                      PEC  390
         NOD  =LN-NH-NH,.                                               PEC  400
         END,.                                                          PEC  410
    ELSE DO,.                                                           PEC  420
         FV   =0.5,.                                                    PEC  430
         NH   =LN-1,.                                                   PEC  440
         JST,NOD=1,.                                                    PEC  450
         END,.                                                          PEC  460
    FM,FX=FV*ABS(A),.                                                   PEC  470
    IF FX=0                                                             PEC  480
    THEN GO TO EXIT,.                  /*GIVEN A EQUALS ZERO,ERROR='P'*/PEC  490
    FV   =0.5*FX,.                                                      PEC  500
    NT   =NH*NH,.                      /*DIMENSION OF ARRAY T         */PEC  510
         BEGIN,.                                                        PEC  520
         DECLARE                                                        PEC  530
              T(NT)                                                     PEC  540
              BINARY FLOAT,.           /*SINGLE PRECISION VERSION  /*S*/PEC  550
  /*          BINARY FLOAT(53),.       /*DOUBLE PRECISION VERSION  /*D*/PEC  560
         ERROR='0',.                                                    PEC  570
         JE   =0,.                     /*INIT. CALCULATION OF T-ARRAY */PEC  580
         W    =2,.                                                      PEC  590
              DO I =1 TO NT BY NH,.                                     PEC  600
              U,V,T(I)=1,.             /*INSERT ONE IN DIAGONAL       */PEC  610
              IC   =I,.                                                 PEC  620
              JE   =JE+NH,.                                             PEC  630
              I    =I+1,.                                               PEC  640
                   DO J =I TO JE,.     /*INSERT REMAINING ELEMENTS OF */PEC  650
                   IF I GT 2           /*SUBROW AND SUBCOLUMN         */PEC  660
                   THEN W    =T(IC-1),.                                 PEC  670
                   V,T(J)=V+W,.                                         PEC  680
                   IC   =IC+NH,.                                        PEC  690
                   U,T(IC)=U+V,.                                        PEC  700
                   END,.                                                PEC  710
              END,.                                                     PEC  720
              DO I =2 TO LN,.          /*SUBSTITUTION OF VARIABLE     */PEC  730
              C(I) =C(I)*FX,.                                           PEC  740
              FX   =FX*FV,.                                             PEC  750
              END,.                                                     PEC  760
         IC   =NT,.                    /*INIT. FIRST TELESCOPING STEP */PEC  770
 TELE..                                                                 PEC  780
         IST  =1,.                                                      PEC  790
         I    =IC,.                                                     PEC  800
         IF NOD NE 1                                                    PEC  810
         THEN IST  =NH,.                                                PEC  820
         J    =LN,.                                                     PEC  830
         IF J =0                                                        PEC  840
         THEN GO TO END,.                                               PEC  850
         U    =C(LN),.                                                  PEC  860
         IF SW='E'                                                      PEC  870
         THEN DO,.                                                      PEC  880
              W    =EPS+ABS(U),.                                        PEC  890
              IF W GT ABS(TOL)                                          PEC  900
              THEN DO,.                                                 PEC  910
                   M    =LN,.          /*DIMENSION ECONOMIZED POLYNOM.*/PEC  920
                        DO I =2 TO LN,.                                 PEC  930
                        C(I) =C(I)/FM,./*BACKSUBSTITUTION OF VARIABLE */PEC  940
                        FM   =FV*FM,.                                   PEC  950
                        END,.                                           PEC  960
                   GO TO END,.                                          PEC  970
                   END,.                                                PEC  980
              EPS  =W,.                                                 PEC  990
              END,.                                                     PEC 1000
 SUBT..                                /*SUBTRACT MULTIPLE OF CHEBY-  */PEC 1010
         I    =I-IST,.                 /*SHEV POLYNOMIAL              */PEC 1020
         J    =J-JST,.                                                  PEC 1030
         IF J GT 1                                                      PEC 1040
         THEN DO,.                                                      PEC 1050
              C(J) =C(J)+U*T(I),.                                       PEC 1060
              U    =-U,.               /*ALTERNATE SIGNS IN T         */PEC 1070
              GO TO SUBT,.                                              PEC 1080
              END,.                                                     PEC 1090
         IF J = 1                                                       PEC 1100
         THEN C(1) =C(1)+U,.           /*ADJUST CONSTANT TERM         */PEC 1110
         IF OPT NE 'S'                                                  PEC 1120
         THEN NOD  =1-NOD,.            /*INIT. NEXT TELESCOPING STEP  */PEC 1130
         IF NOD=1                                                       PEC 1140
         THEN IC   =IC-NH-1,.                                           PEC 1150
         LN   =LN-1,.                                                   PEC 1160
         GO TO TELE,.                                                   PEC 1170
         END,.                                                          PEC 1180
 EXIT..                                                                 PEC 1190
    ERROR='P',.                                                         PEC 1200
 END..                                                                  PEC 1210
    END,.                              /*END OF PROCEDURE PEC         */PEC 1220
 POST..                                                                 POST  10
 /*********************************************************************/POST  20
 /*                                                                   */POST  30
 /*      TRANSFORM N-TERM SERIES EXPANSION IN ORTHOGONAL POLYNOMIALS  */POST  40
 /*                                                                   */POST  50
 /*********************************************************************/POST  60
    PROCEDURE(X0,X1,C,N,OPT,POL),.                                      POST  70
    DECLARE                                                             POST  80
         (X0,X1,C(*),POL(*),F,FI,AI,BI,CI,U,U1,U2,U3,H(N+N))            POST  90
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/POST 100
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/POST 110
         (N,I,J,K,KP1) BINARY FIXED,                                    POST 120
         OPT CHARACTER(1),.                                             POST 130
    IF N GE 1                          /*BYPASS OPERATION IF N LE 0   */POST 140
    THEN DO,.                          /*INITIALIZATION               */POST 150
         AI   =X0+X0,.                 /*INIT. CONSTANT MULTIPLIERS   */POST 160
         CI   =X1+X1,.                                                  POST 170
         IF OPT='T'                    /*CHEBYSHEV POLYNOMIALS T(X)   */POST 180
         THEN BI   =0.5,.              /*MODIFY FIRST CHEB. POLYNOMIAL*/POST 190
         ELSE DO,.                                                      POST 200
              BI   =1,.                /*INIT. FIRST ORTH. POLYNOMIAL */POST 210
              FI   =0,.                /*INIT. INTEGER FACTOR         */POST 220
              END,.                                                     POST 230
         H(2) =BI,.                    /*STORE FIRST ORTH. POLYNOMIAL */POST 240
         H(1) =0,.                     /*INIT. PSEUDO POLYNOMIAL(-1)  */POST 250
         POL(1)=C(1),.                 /*INIT. RESULTING POLYNOMIAL   */POST 260
              DO I = 2 TO N,.          /*CALCULATE COEFFICIENT VECTOR */POST 270
              F    =C(I),.             /*OF I-TH ORTHOGONAL POLYNOM.  */POST 280
              IF OPT NE 'T'                                             POST 290
              THEN DO,.                /*MODIFY MULTIPLIERS AI,BI,CI  */POST 300
                   BI   =FI,.                                           POST 310
                   FI   =FI+1,.        /*FOR                          */POST 320
                   IF OPT NE 'H'       /*HERMITE POLYNOMIALS H(X)     */POST 330
                   THEN DO,.                                            POST 340
                        BI   =BI/FI,.  /*FOR                          */POST 350
                        IF OPT='L'     /*LAGUERRE POLYNOMIALS L(X)    */POST 360
                        THEN DO,.                                       POST 370
                             AI   =1-X0/FI+BI,.                         POST 380
                             CI   =-X1/FI,.                             POST 390
                             END,.     /*FOR                          */POST 400
                        ELSE DO,.      /*LEGENDRE POLYNOMIALS P(X)    */POST 410
                             AI   =X0+BI*X0,.                           POST 420
                             CI   =X1+BI*X1,.                           POST 430
                             END,.                                      POST 440
                        END,.                                           POST 450
                   ELSE BI   =BI+BI,.                                   POST 460
                   END,.                                                POST 470
              ELSE IF I = 3            /*READJUST CHEBYSHEV POLYNOMIAL*/POST 480
              THEN H(1) =1,.                                            POST 490
              U    =0,.                /*INIT. PSEUDO TERM FOR RECURR.*/POST 500
              K    =1,.                                                 POST 510
              KP1  =2,.                                                 POST 520
                   DO J = 1 TO I-1,.   /*APPLY RECURRENCE RELATION    */POST 530
                   U1   =H(K),.                                         POST 540
                   H(K),U2=H(KP1),.                                     POST 550
                   IF OPT NE 'T'       /*IN CHEBYSHEV CASE            */POST 560
                   THEN U1   =BI*U1,.  /*BYPASS MULTIPLICATION WITH 1 */POST 570
                   H(KP1),U3=AI*U2-U1+CI*U,.                            POST 580
                   U    =U2,.                                           POST 590
                   POL(J)=POL(J)+F*U3,./*UPDATE POLYNOMIAL VECTOR     */POST 600
                   K    =KP1+1,.                                        POST 610
                   KP1  =K+1,.                                          POST 620
                   END,.                                                POST 630
              H(K) =0,.                /*INIT. PSEUDO TERM FOR RECURR.*/POST 640
              U3,H(KP1)=U2*CI,.        /*COMPLETE I-TH ORTH.POLYNOMIAL*/POST 650
              POL(I)=F*U3,.            /*INIT. I-TH TERM OF POLYNOMIAL*/POST 660
              END,.                    /*COEFFICIENT VECTOR           */POST 670
         END,.                                                          POST 680
    END,.                              /*END OF PROCEDURE POST        */POST 690
 (NOUNDERFLOW)..PRTC..                                                  PRTC  10
 /*********************************************************************/PRTC  20
 /*                                                                   */PRTC  30
 /*      CALCULATE ALL ROOTS OF A COMPLEX POLYNOMIAL                  */PRTC  40
 /*                                                                   */PRTC  50
 /*********************************************************************/PRTC  60
    PROCEDURE(C,N),.                                                    PRTC  70
    DECLARE                                                             PRTC  80
         C(*) COMPLEX                                                   PRTC  90
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/PRTC 100
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/PRTC 110
         (D(N),B(N),Z,DZ,V,W,U,ZO) COMPLEX                              PRTC 120
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/PRTC 130
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/PRTC 140
         (N,LN,I,K,KD,J,JE)                                             PRTC 150
         BINARY FIXED,                                                  PRTC 160
         (I1,IN DEFINED R,ID DEFINED AW,IR,IR1,IR2)                     PRTC 170
         BINARY FIXED(31),                                              PRTC 180
         (AV,AVO,TOL,AZ,AW,R,RD,RKM,ARG,ARGV)                           PRTC 190
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/PRTC 200
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/PRTC 210
         ERROR EXTERNAL CHARACTER(1),.                                  PRTC 220
    I1   =1091567616,.                                                  PRTC 230
    LN   =N,.                          /*NUMBER OF MISSING ROOTS      */PRTC 240
    Z    =0,.                                                           PRTC 250
    ERROR='0',.                                                         PRTC 260
 ZERO..                                                                 PRTC 270
    AVO  =1E75,.                       /*FORCE SHIFT OF ORIGIN        */PRTC 280
    IF LN LE 0                                                          PRTC 290
    THEN GO TO EXIT,.                  /*ALL ROOTS CALCULATED         */PRTC 300
    IF C(LN)=0                                                          PRTC 310
    THEN DO,.                          /*EXTRACT ZERO ROOT            */PRTC 320
         LN   =LN-1,.                                                   PRTC 330
         GO TO ZERO,.                                                   PRTC 340
         END,.                                                          PRTC 350
    DZ,Z =CONJG(Z),.                                                    PRTC 360
         DO I = 1 TO LN,.                                               PRTC 370
         D(I),B(I)=C(I),.              /*MOVE COEFFICIENT VECTOR      */PRTC 380
         END,.                                                          PRTC 390
 VALUE..                                                                PRTC 400
    TOL  =0.2,.                        /*INIT. ROUND OFF BOUND        */PRTC 410
    AZ   =ABS(Z),.                                                      PRTC 420
    V    =1,.                                                           PRTC 430
         DO I = 1 TO LN,.              /*COMP. ROUND-OFF BOUND        */PRTC 440
         W    =D(I),.                  /*AND POLYNOMIAL VALUE         */PRTC 450
         V,C(I)=W+V*Z,.                                                 PRTC 460
         TOL  =ABS(W)+AZ*TOL,.                                          PRTC 470
         END,.                                                          PRTC 480
    TOL  =(TOL+4*(TOL-ABS(W)))                                          PRTC 490
         *1.0E-6,.,.                   /*SINGLE PRECISION VERSION  /*S*/PRTC 500
  /*     *0.25E-15,.                   /*DOUBLE PRECISION VERSION  /*D*/PRTC 510
    AV   =ABS(V),.                                                      PRTC 520
    IF AV= 0 THEN GO TO ROOT,.                                          PRTC 530
    IF AV LE TOL                                                        PRTC 540
    THEN IF AV GT AVO                                                   PRTC 550
    THEN DO,.                          /*STORE CALCULATED ROOT        */PRTC 560
 ROOT..                                                                 PRTC 570
         C(LN)=Z,.                                                      PRTC 580
         LN   =LN-1,.                                                   PRTC 590
         GO TO ZERO,.                                                   PRTC 600
         END,.                                                          PRTC 610
    ARGV =ATAN(-IMAG(V),-REAL(V)),.                                     PRTC 620
    IF AV LT AVO                       /*HAS VALUE DECREASED          */PRTC 630
    THEN DO,.                                                           PRTC 640
         R    =AV,.                                                     PRTC 650
         RD,U =1,.                                                      PRTC 660
         IR   =(IN-I1)/LN,.                                             PRTC 670
         KD,JE=LN,.                                                     PRTC 680
 SHIFT..                                                                PRTC 690
         W    =1,.                                                      PRTC 700
              DO J=1 TO JE,.           /*SHIFT OF ORIGIN              */PRTC 710
              B(J),W=B(J)+W*DZ,.                                        PRTC 720
              END,.                                                     PRTC 730
         IF LN NE JE                                                    PRTC 740
         THEN DO,.                                                      PRTC 750
              AW   =ABS(W),.                                            PRTC 760
              K    =LN-JE,.                                             PRTC 770
              IR1  =(IN-ID)/K,.                                         PRTC 780
              IF IR1 LT IR                                              PRTC 790
              THEN DO,.                                                 PRTC 800
                   IR   =IR1,.                                          PRTC 810
                   RD   =AW,.                                           PRTC 820
                   U    =W,.                                            PRTC 830
                   KD   =K,.                                            PRTC 840
                   END,.                                                PRTC 850
              END,.                                                     PRTC 860
         JE   =JE-1,.                                                   PRTC 870
         IF JE GE 1                                                     PRTC 880
         THEN GO TO SHIFT,.                                             PRTC 890
         RKM  =1/FLOAT(KD),.                                            PRTC 900
         R    =(AV/RD)**RKM,.                                           PRTC 910
         ARG  =(ARGV-ATAN(IMAG(U),REAL(U)))*RKM,.                       PRTC 920
         ZO   =Z,.                                                      PRTC 930
         AVO  =AV,.                                                     PRTC 940
 INCR..                                                                 PRTC 950
         REAL(DZ)=R*COS(ARG),.                                          PRTC 960
         IMAG(DZ)=R*SIN(ARG),.                                          PRTC 970
         Z    =ZO+DZ,.                                                  PRTC 980
         IF ZO NE Z                                                     PRTC 990
         THEN GO TO VALUE,.                                             PRTC1000
         IF AV GT TOL                                                   PRTC1010
         THEN ERROR='C',.                                               PRTC1020
         GO TO ROOT,.                                                   PRTC1030
         END,.                                                          PRTC1040
    ELSE DO,.                          /*MODIFY STEPSIZE TO DECREASE  */PRTC1050
         R    =R/2,.                   /*POLYNOMIAL VALUE             */PRTC1060
         IR2  =(IN-I1)/1000000000B,.                                    PRTC1070
         KD   =LN,.                                                     PRTC1080
         U    =1,.                                                      PRTC1090
         IR   =I1/1000000000B,.                                         PRTC1100
         K    =0,.                                                      PRTC1110
              DO J = LN-1 TO 1 BY -1,.                                  PRTC1120
              K    =K+1,.                                               PRTC1130
              W    =B(J),.                                              PRTC1140
              AW   =ABS(W),.                                            PRTC1150
              IR1  =ID/1000000000B-(LN-K)*IR2,.                         PRTC1160
              IF IR LT IR1                                              PRTC1170
              THEN DO,.                                                 PRTC1180
                   KD   =K,.                                            PRTC1190
                   U    =W,.                                            PRTC1200
                   IR   =IR1,.                                          PRTC1210
                   END,.                                                PRTC1220
              END,.                                                     PRTC1230
         ARG  =(ARGV-ATAN(IMAG(U),REAL(U)))/FLOAT(KD),.                 PRTC1240
         GO TO INCR,.                                                   PRTC1250
         END,.                                                          PRTC1260
 EXIT..                                                                 PRTC1270
    END,.                              /*END OF PROCEDURE PRTC        */PRTC1280
 QTFG..                                                                 QTFG  10
 /*********************************************************************/QTFG  20
 /*                                                                   */QTFG  30
 /*      INTEGRATION OF A MONOTONICALLY TABULATED FUNCTION BY         */QTFG  40
 /*      TRAPEZOIDAL RULE                                             */QTFG  50
 /*                                                                   */QTFG  60
 /*********************************************************************/QTFG  70
    PROCEDURE(X,Y,Z,DIM),.                                              QTFG  80
    DECLARE                                                             QTFG  90
         (X(*),Y(*),Z(*),SUM,XO,XN,YO,YN,H,HH)                          QTFG 100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QTFG 110
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/QTFG 120
         (DIM,I) BINARY FIXED,                                          QTFG 130
         (ERROR EXTERNAL,SW)CHARACTER(1),.                              QTFG 140
    SW   ='1',.                                                         QTFG 150
    XO   =X(1),.                                                        QTFG 160
    GOTO COM,.                                                          QTFG 170
 QTFE..                                                                 QTFG 180
 /*********************************************************************/QTFG 190
 /*                                                                   */QTFG 200
 /*      INTEGRATION OF AN EQUIDISTANTLY TABULATED FUNCTION BY        */QTFG 210
 /*      TRAPEZOIDAL RULE                                             */QTFG 220
 /*                                                                   */QTFG 230
 /*********************************************************************/QTFG 240
    ENTRY(H,Y,Z,DIM),.                                                  QTFG 250
    SW   ='0',.                                                         QTFG 260
    HH   =0.5*H,.                                                       QTFG 270
 COM..                                                                  QTFG 280
    ERROR='1',.                        /*PRESET ERROR PARAMETER       */QTFG 290
    IF DIM GT 0                        /*NO ACTION IN CASE DIM LT 1   */QTFG 300
    THEN DO,.                                                           QTFG 310
         ERROR='0',.                                                    QTFG 320
         SUM  =0,.                                                      QTFG 330
         YO   =-Y(1),.                                                  QTFG 340
              DO I=1 TO DIM,.                                           QTFG 350
              IF SW='1'                                                 QTFG 360
              THEN DO,.                /*CALCULATE LENGTH OF INTERVAL */QTFG 370
                   XN   =X(I),.                                         QTFG 380
                   HH   =0.5*(XN-XO),.                                  QTFG 390
                   XO   =XN,.                                           QTFG 400
                   END,.                                                QTFG 410
              YN   =Y(I),.                                              QTFG 420
              SUM  =SUM+HH*(YN+YO),.   /*ACCUMULATE INTEGRAL VALUE    */QTFG 430
              Z(I) =SUM,.                                               QTFG 440
              YO   =YN,.                                                QTFG 450
              END,.                                                     QTFG 460
         END,.                                                          QTFG 470
    END,.                              /*END OF PROCEDURE QTFG        */QTFG 480
 QSF..                                                                  QSF   10
 /*********************************************************************/QSF   20
 /*                                                                   */QSF   30
 /*      INTEGRATION OF AN EQUIDISTANTLY TABULATED FUNCTION BY        */QSF   40
 /*      SIMPSON'S RULE                                               */QSF   50
 /*                                                                   */QSF   60
 /*********************************************************************/QSF   70
    PROCEDURE(H,Y,Z,DIM),.                                              QSF   80
    DECLARE                                                             QSF   90
         (H,Y(*),Z(*),AUX,SUM1,SUM2,HH,F1,F2)                           QSF  100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QSF  110
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/QSF  120
         ERROR EXTERNAL CHARACTER(1),                                   QSF  130
         (I,DIM) BINARY FIXED,.                                         QSF  140
    ERROR='1',.                        /*PRESET ERROR PARAMETER       */QSF  150
    IF DIM GE 4                        /*NO ACTION IN CASE DIM LT 4   */QSF  160
    THEN DO,.                                                           QSF  170
         ERROR='0',.                                                    QSF  180
         HH   =H/3,.                                                    QSF  190
         F1   =Y(1),.                                                   QSF  200
         F2   =Y(2),.                                                   QSF  210
         SUM1,Z(1)=0,.                                                  QSF  220
         SUM2,Z(2)=HH*0.125*(9*F1+     /*COMPUTE Z(2) BY COMBINATION  */QSF  230
              19*F2-5*Y(3)+Y(4)),.     /*OF SIMPSON'S WITH 3/8-RULE   */QSF  240
              DO I=3 TO DIM,.                                           QSF  250
              AUX  =F2+F2,.                                             QSF  260
              AUX  =AUX+AUX+F1,.                                        QSF  270
              F1   =F2,.                                                QSF  280
              F2   =Y(I),.                                              QSF  290
              AUX  =HH*(AUX+F2),.                                       QSF  300
              SUM1 =SUM1+AUX,.         /*ACCUMULATE INTEGRAL VALUE    */QSF  310
              AUX,Z(I)=SUM1,.                                           QSF  320
              SUM1 =SUM2,.                                              QSF  330
              SUM2 =AUX,.                                               QSF  340
              END,.                                                     QSF  350
         END,.                                                          QSF  360
    END,.                              /*END OF PROCEDURE QSF         */QSF  370
 QHFG..                                                                 QHFG  10
 /*********************************************************************/QHFG  20
 /*                                                                   */QHFG  30
 /*      INTEGRATION OF A MONOTONICALLY TABULATED FUNCTION WITH       */QHFG  40
 /*      FIRST DERIVATIVE BY A HERMITIAN FORMULA OF FIRST ORDER       */QHFG  50
 /*                                                                   */QHFG  60
 /*********************************************************************/QHFG  70
    PROCEDURE(X,Y,FDY,Z,DIM),.                                          QHFG  80
    DECLARE                                                             QHFG  90
         (X(*),Y(*),Z(*),FDY(*),SDY(*),XO,XN,YO,YN,FDYO,FDYN,SDYO,SDYN, QHFG 100
         SUM1,SUM2,FACT,H,HH,HHH)                                       QHFG 110
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QHFG 120
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/QHFG 130
         (I,DIM) BINARY FIXED,                                          QHFG 140
         (ERROR EXTERNAL,SW)CHARACTER(1),.                              QHFG 150
    SW   ='1',.                                                         QHFG 160
    GOTO MONO,.                                                         QHFG 170
 QHSG..                                                                 QHFG 180
 /*********************************************************************/QHFG 190
 /*                                                                   */QHFG 200
 /*      INTEGRATION OF A MONOTONICALLY TABULATED FUNCTION WITH       */QHFG 210
 /*      FIRST AND SECOND DERIVATIVES BY A HERMITIAN FORMULA OF       */QHFG 220
 /*      SECOND ORDER                                                 */QHFG 230
 /*                                                                   */QHFG 240
 /*********************************************************************/QHFG 250
    ENTRY(X,Y,FDY,SDY,Z,DIM),.                                          QHFG 260
    SW   ='2',.                                                         QHFG 270
 MONO..                                                                 QHFG 280
    XO   =X(1),.                                                        QHFG 290
    GOTO MONEQ,.                                                        QHFG 300
 QHFE..                                                                 QHFG 310
 /*********************************************************************/QHFG 320
 /*                                                                   */QHFG 330
 /*      INTEGRATION OF AN EQUIDISTANTLY TABULATED FUNCTION WITH      */QHFG 340
 /*      FIRST DERIVATIVE BY A HERMITIAN FORMULA OF FIRST ORDER       */QHFG 350
 /*                                                                   */QHFG 360
 /*********************************************************************/QHFG 370
    ENTRY(H,Y,FDY,Z,DIM),.                                              QHFG 380
    SW   ='3',.                                                         QHFG 390
    GOTO EQUI,.                                                         QHFG 400
 QHSE..                                                                 QHFG 410
 /*********************************************************************/QHFG 420
 /*                                                                   */QHFG 430
 /*      INTEGRATION OF AN EQUIDISTANTLY TABULATED FUNCTION WITH      */QHFG 440
 /*      FIRST AND SECOND DERIVATIVES BY A HERMITIAN FORMULA OF       */QHFG 450
 /*      SECOND ORDER                                                 */QHFG 460
 /*                                                                   */QHFG 470
 /*********************************************************************/QHFG 480
    ENTRY(H,Y,FDY,SDY,Z,DIM),.                                          QHFG 490
    SW   ='4',.                                                         QHFG 500
 EQUI..                                                                 QHFG 510
    HH   =0.5*H,.                                                       QHFG 520
 MONEQ..                                                                QHFG 530
    ERROR='1',.                        /*PRESET ERROR PARAMETER       */QHFG 540
    FACT =3.333333333333333E-01,.                                       QHFG 550
    IF DIM GT 0                        /*NO ACTION IN CASE DIM LT 1   */QHFG 560
    THEN DO,.                                                           QHFG 570
         ERROR='0',.                                                    QHFG 580
         IF SW NE '1'                                                   QHFG 590
         THEN DO,.                                                      QHFG 600
              IF SW NE '3'                                              QHFG 610
              THEN DO,.                                                 QHFG 620
                   FACT =0.4,.                                          QHFG 630
                   SDYO =-SDY(1),.                                      QHFG 640
                   END,.                                                QHFG 650
              END,.                                                     QHFG 660
         YO   =-Y(1),.                                                  QHFG 670
         FDYO =FDY(1),.                                                 QHFG 680
         SUM1,SUM2=0,.                                                  QHFG 690
              DO I=1 TO DIM,.                                           QHFG 700
              YN   =Y(I),.                                              QHFG 710
              FDYN =FDY(I),.                                            QHFG 720
              IF SW NE '3'                                              QHFG 730
              THEN DO,.                                                 QHFG 740
                   IF SW NE '4'        /*SW ='1' OR SW ='2'           */QHFG 750
                   THEN DO,.           /*FOR NONEQUIDISTANT ARGUMENTS */QHFG 760
                        XN   =X(I),.   /*COMPUTE LENGTH OF INTERVAL   */QHFG 770
                        HH   =0.5*(XN-XO),.                             QHFG 780
                        XO   =XN,.                                      QHFG 790
                        END,.                                           QHFG 800
                   IF SW NE '1'        /*SW ='2' OR SW ='4'           */QHFG 810
                   THEN DO,.                                            QHFG 820
                        SDYN =SDY(I),.                                  QHFG 830
                        SUM2 =HH*HH*   /*MODIFY TO SECOND ORDER       */QHFG 840
                             (SDYO+    /*FORMULA                      */QHFG 850
                             SDYN)/15,.                                 QHFG 860
                        SDYO =SDYN,.                                    QHFG 870
                        END,.                                           QHFG 880
                   END,.                                                QHFG 890
              HHH  =HH*FACT,.                                           QHFG 900
              SUM1 =SUM1+HH*(YO+YN+    /*ACCUMULATE INTEGRAL VALUE    */QHFG 910
                   HHH*(FDYO-FDYN)+SUM2),.                              QHFG 920
              Z(I) =SUM1,.                                              QHFG 930
              YO   =YN,.                                                QHFG 940
              FDYO =FDYN,.                                              QHFG 950
              END,.                                                     QHFG 960
         END,.                                                          QHFG 970
    END,.                              /*END OF PROCEDURE QHFG        */QHFG 980
 QATR..                                                                 QATR  10
 /*********************************************************************/QATR  20
 /*                                                                   */QATR  30
 /*      INTEGRATION OF A GIVEN FUNCTION BY THE TRAPEZOIDAL RULE      */QATR  40
 /*      TOGETHER WITH ROMBERG'S EXTRAPOLATION METHOD                 */QATR  50
 /*                                                                   */QATR  60
 /*********************************************************************/QATR  70
    PROCEDURE (XL,XU,EPS,DIM,FCT,Y),.                                   QATR  80
    DECLARE                                                             QATR  90
         (XL,XU,EPS,Y,AUX(DIM),H,HH,E,YY,                               QATR 100
         DELT1,DELT2,P,HD,X,SM,Q,AN,AO)                                 QATR 110
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QATR 120
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/QATR 130
         ERROR EXTERNAL CHARACTER(1),                                   QATR 140
         (DIM,JJ,I,J) BINARY FIXED,                                     QATR 150
         FCT ENTRY                                                      QATR 160
         (BINARY FLOAT)                /*SINGLE PRECISION VERSION  /*S*/QATR 170
  /*     (BINARY FLOAT(53))            /*DOUBLE PRECISION VERSION  /*D*/QATR 180
         RETURNS(BINARY FLOAT),.       /*SINGLE PRECISION VERSION  /*S*/QATR 190
  /*     RETURNS(BINARY FLOAT(53)),.   /*DOUBLE PRECISION VERSION  /*D*/QATR 200
    AN,YY,AUX(1)=0.5*(FCT(XL)+FCT(XU)),.                                QATR 210
    H    =XU-XL,.                                                       QATR 220
    ERROR='0',.                        /*PRESET ERROR PARAMETER       */QATR 230
    IF DIM GT 1                                                         QATR 240
    THEN DO,.                                                           QATR 250
         IF H =0                                                        QATR 260
         THEN GOTO YEND,.                                               QATR 270
         HH   =H,.                     /*NORMAL CASE,DIM GREATER THAN */QATR 280
         E    =ABS(EPS/H),.            /*1 AND XL NOT EQUAL TO XU     */QATR 290
         DELT2=0,.                                                      QATR 300
         P    =1,.                                                      QATR 310
         JJ   =1,.                                                      QATR 320
              DO I=2 TO DIM,.                                           QATR 330
              DELT1=DELT2,.                                             QATR 340
              HD   =HH,.                                                QATR 350
              HH   =0.5*HH,.                                            QATR 360
              P    =0.5*P,.                                             QATR 370
              X    =XL+HH,.                                             QATR 380
              SM   =0,.                                                 QATR 390
                   DO J=1 TO JJ,.      /*REFINE STEPSIZE IN           */QATR 400
                   SM   =SM+FCT(X),.   /*TRAPEZOIDAL RULE             */QATR 410
                   X    =X+HD,.                                         QATR 420
                   END,.                                                QATR 430
              AN,AO,AUX(I)=0.5*AN+P*SM,.                                QATR 440
              Q    =1,.                /*APPLY ROMBERG'S EXTRAPOLATION*/QATR 450
                   DO J=1 TO I-1,.     /*METHOD                       */QATR 460
                   Q    =4*Q,.                                          QATR 470
                   AO,AUX(I-J)=AO+(AO-AUX(I-J))/(Q-1),.                 QATR 480
                   END,.                                                QATR 490
              DELT2=ABS(YY-AO),.       /*TEST ACCURACY                */QATR 500
              IF I GE 5                                                 QATR 510
              THEN DO,.                                                 QATR 520
                   IF DELT2 GE DELT1                                    QATR 530
                   THEN DO,.           /*TERMINATE SINCE LAST STEP    */QATR 540
                        IF DELT1 GT E  /*DID NOT IMPROVE              */QATR 550
                        THEN ERROR='1',.                                QATR 560
                        GOTO YEND,.                                     QATR 570
                        END,.                                           QATR 580
                   YY   =AO,.                                           QATR 590
                   IF DELT2 LE E                                        QATR 600
                   THEN GOTO YEND,.                                     QATR 610
                   END,.                                                QATR 620
              ELSE YY   =AO,.                                           QATR 630
              JJ   =JJ+JJ,.                                             QATR 640
              END,.                                                     QATR 650
         END,.                                                          QATR 660
    ERROR='2',.                                                         QATR 670
 YEND..                                                                 QATR 680
    Y    =H*YY,.                                                        QATR 690
    END,.                              /*END OF PROCEDURE QATR        */QATR 700
 QG2..                                                                  QG2   10
 /*********************************************************************/QG2   20
 /*                                                                   */QG2   30
 /*      INTEGRATION OF GIVEN FUNCTION BY 2-POINT GAUSSIAN            */QG2   40
 /*      QUADRATURE FORMULA                                           */QG2   50
 /*                                                                   */QG2   60
 /*********************************************************************/QG2   70
    PROCEDURE(XL,XU,FCT,Y),.                                            QG2   80
    DECLARE                                                             QG2   90
         (XL,XU,Y,A,B)                                                  QG2  100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QG2  110
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QG2  120
         FCT ENTRY RETURNS                                              QG2  130
         (BINARY FLOAT),.              /*SINGLE PRECISION VERSION  /*S*/QG2  140
  /*     (BINARY FLOAT (53)),.         /*DOUBLE PRECISION VERSION  /*D*/QG2  150
    A    =0.5*(XU+XL),.                                                 QG2  160
    B    =XU-XL,.                                                       QG2  170
    Y    =2.886751345948128E-01*B,.                                     QG2  180
    Y    =0.5*B*(FCT(A+Y)+FCT(A-Y)),.                                   QG2  190
    END,.                              /*END OF PROCEDURE QG2         */QG2  200
 QG4..                                                                  QG4   10
 /*********************************************************************/QG4   20
 /*                                                                   */QG4   30
 /*      INTEGRATION OF A GIVEN FUNCTION BY 4-POINT GAUSSIAN          */QG4   40
 /*      QUADRATURE FORMULA                                           */QG4   50
 /*                                                                   */QG4   60
 /*********************************************************************/QG4   70
    PROCEDURE (XL,XU,FCT,Y),.                                           QG4   80
    DECLARE                                                             QG4   90
         (XL,XU,Y,A,B,C)                                                QG4  100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QG4  110
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QG4  120
         FCT ENTRY RETURNS                                              QG4  130
         (BINARY FLOAT),.              /*SINGLE PRECISION VERSION  /*S*/QG4  140
  /*     (BINARY FLOAT (53)),.         /*DOUBLE PRECISION VERSION  /*D*/QG4  150
    A    =0.5*(XU+XL),.                                                 QG4  160
    B    =XU-XL,.                                                       QG4  170
    C    =4.305681557970263E-01*B,.                                     QG4  180
    Y    =1.739274225687269E-01*(FCT(A+C)+FCT(A-C)),.                   QG4  190
    C    =1.699905217924281E-01*B,.                                     QG4  200
    Y    =B*(Y+3.260725774312731E-01*(FCT(A+C)+FCT(A-C))),.             QG4  210
    END,.                              /*END OF PROCEDURE QG4         */QG4  220
 QG8..                                                                  QG8   10
 /*********************************************************************/QG8   20
 /*                                                                   */QG8   30
 /*      INTEGRATION OF A GIVEN FUNCTION BY 8-POINT GAUSSIAN          */QG8   40
 /*      QUADRATURE FORMULA                                           */QG8   50
 /*                                                                   */QG8   60
 /*********************************************************************/QG8   70
    PROCEDURE(XL,XU,FCT,Y),.                                            QG8   80
    DECLARE                                                             QG8   90
         (XL,XU,Y,A,B,C)                                                QG8  100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QG8  110
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QG8  120
         FCT ENTRY RETURNS                                              QG8  130
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QG8  140
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QG8  150
         LY BINARY FLOAT (53),                                          QG8  160
         X( 8) BINARY FLOAT (53) STATIC INITIAL                         QG8  170
         (4.801449282487681E-01,     5.061426814518813E-02,             QG8  180
         3.983332387068134E-01,     1.111905172266872E-01,              QG8  190
         2.627662049581645E-01,     1.568533229389436E-01,              QG8  200
         9.171732124782490E-02,     1.813418916891810E-01),.            QG8  210
    A    =0.5*(XU+XL),.                                                 QG8  220
    B    =XU-XL,.                                                       QG8  230
    LY   =0,.                                                           QG8  240
         DO I=1 TO  7 BY 2,.                                            QG8  250
         C    =X(I)*B,.                                                 QG8  260
         LY   =LY+X(I+1)*(FCT(A+C)+FCT(A-C)),.                          QG8  270
         END,.                                                          QG8  280
    Y    =LY*B,.                                                        QG8  290
    END,.                              /*END OF PROCEDURE QG8         */QG8  300
 QG16..                                                                 QG16  10
 /*********************************************************************/QG16  20
 /*                                                                   */QG16  30
 /*      INTEGRATION OF A GIVEN FUNCTION BY 16-POINT GAUSSIAN         */QG16  40
 /*      QUADRATURE FORMULA                                           */QG16  50
 /*                                                                   */QG16  60
 /*********************************************************************/QG16  70
    PROCEDURE(XL,XU,FCT,Y),.                                            QG16  80
    DECLARE                                                             QG16  90
         (XL,XU,Y,A,B,C)                                                QG16 100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QG16 110
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QG16 120
         FCT ENTRY RETURNS                                              QG16 130
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QG16 140
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QG16 150
         LY BINARY FLOAT (53),                                          QG16 160
         X(16) BINARY FLOAT (53) STATIC INITIAL                         QG16 170
         (4.947004674958250E-01,     1.357622970587705E-02,             QG16 180
         4.722875115366163E-01,     3.112676196932395E-02,              QG16 190
         4.328156011939159E-01,     4.757925584124639E-02,              QG16 200
         3.777022041775015E-01,     6.231448562776694E-02,              QG16 210
         3.089381222013219E-01,     7.479799440828837E-02,              QG16 220
         2.290083888286137E-01,     8.457825969750127E-02,              QG16 230
         1.408017753896295E-01,     9.130170752246179E-02,              QG16 240
         4.750625491881872E-02,     9.472530522753425E-02),.            QG16 250
    A    =0.5*(XU+XL),.                                                 QG16 260
    B    =XU-XL,.                                                       QG16 270
    LY   =0,.                                                           QG16 280
         DO I=1 TO 15 BY 2,.                                            QG16 290
         C    =X(I)*B,.                                                 QG16 300
         LY   =LY+X(I+1)*(FCT(A+C)+FCT(A-C)),.                          QG16 310
         END,.                                                          QG16 320
    Y    =LY*B,.                                                        QG16 330
    END,.                              /*END OF PROCEDURE QG16        */QG16 340
 QG24..                                                                 QG24  10
 /*********************************************************************/QG24  20
 /*                                                                   */QG24  30
 /*      INTEGRATION OF A GIVEN FUNCTION BY 24-POINT GAUSSIAN         */QG24  40
 /*      QUADRATURE FORMULA                                           */QG24  50
 /*                                                                   */QG24  60
 /*********************************************************************/QG24  70
    PROCEDURE(XL,XU,FCT,Y),.                                            QG24  80
    DECLARE                                                             QG24  90
         (XL,XU,Y,A,B,C)                                                QG24 100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QG24 110
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QG24 120
         FCT ENTRY RETURNS                                              QG24 130
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QG24 140
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QG24 150
         LY BINARY FLOAT (53),                                          QG24 160
         X(24) BINARY FLOAT (53) STATIC INITIAL                         QG24 170
         (4.975936099985107E-01,    6.170614899993600E-03,              QG24 180
         4.873642779856547E-01,    1.426569431446683E-02,               QG24 190
         4.691372760013664E-01,    2.213871940870990E-02,               QG24 200
         4.432077635022005E-01,    2.964929245771839E-02,               QG24 210
         4.100009929869515E-01,    3.667324070554015E-02,               QG24 220
         3.700620957892772E-01,    4.309508076597664E-02,               QG24 230
         3.240468259684878E-01,    4.880932605205694E-02,               QG24 240
         2.727107356944198E-01,    5.372213505798282E-02,               QG24 250
         2.168967538130226E-01,    5.775283402686280E-02,               QG24 260
         1.575213398480817E-01,    6.083523646390170E-02,               QG24 270
         9.555943373680815E-02,    6.291872817341415E-02,               QG24 280
         3.202844643130281E-02,    6.396909767337608E-02),.             QG24 290
    A    =0.5*(XU+XL),.                                                 QG24 300
    B    =XU-XL,.                                                       QG24 310
    LY   =0,.                                                           QG24 320
         DO I=1 TO 23 BY 2,.                                            QG24 330
         C    =X(I)*B,.                                                 QG24 340
         LY   =LY+X(I+1)*(FCT(A+C)+FCT(A-C)),.                          QG24 350
         END,.                                                          QG24 360
    Y    =LY*B,.                                                        QG24 370
    END,.                              /*END OF PROCEDURE QG24        */QG24 380
 QG32..                                                                 QG32  10
 /*********************************************************************/QG32  20
 /*                                                                   */QG32  30
 /*      INTEGRATION OF A GIVEN FUNCTION BY 32-POINT GAUSSIAN         */QG32  40
 /*      QUADRATURE FORMULA                                           */QG32  50
 /*                                                                   */QG32  60
 /*********************************************************************/QG32  70
    PROCEDURE(XL,XU,FCT,Y),.                                            QG32  80
    DECLARE                                                             QG32  90
         (XL,XU,Y,A,B,C)                                                QG32 100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QG32 110
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QG32 120
         FCT ENTRY RETURNS                                              QG32 130
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QG32 140
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QG32 150
         LY BINARY FLOAT (53),                                          QG32 160
         X(32) BINARY FLOAT (53) STATIC INITIAL                         QG32 170
         (4.986319309247408E-01,    3.509305004735048E-03,              QG32 180
         4.928057557726342E-01,    8.137197365452835E-03,               QG32 190
         4.823811277937532E-01,    1.269603265463103E-02,               QG32 200
         4.674530379688698E-01,    1.713693145651072E-02,               QG32 210
         4.481605778830261E-01,    2.141794901111334E-02,               QG32 220
         4.246838068662850E-01,    2.549902963118809E-02,               QG32 230
         3.972418979839712E-01,    2.934204673926777E-02,               QG32 240
         3.660910593701448E-01,    3.291111138818092E-02,               QG32 250
         3.315221334651076E-01,    3.617289705442425E-02,               QG32 260
         2.938578786203812E-01,    3.909694789353515E-02,               QG32 270
         2.534499544661147E-01,    4.165596211347338E-02,               QG32 280
         2.106756380653177E-01,    4.382604650220191E-02,               QG32 290
         1.659343011410638E-01,    4.558693934788194E-02,               QG32 300
         1.196436811260685E-01,    4.692219954040228E-02,               QG32 310
         7.223598079139825E-02,    4.781936003963743E-02,               QG32 320
         2.415383284386916E-02,    4.827004425736390E-02),.             QG32 330
    A    =0.5*(XU+XL),.                                                 QG32 340
    B    =XU-XL,.                                                       QG32 350
    LY   =0,.                                                           QG32 360
         DO I=1 TO 31 BY 2,.                                            QG32 370
         C    =X(I)*B,.                                                 QG32 380
         LY   =LY+X(I+1)*(FCT(A+C)+FCT(A-C)),.                          QG32 390
         END,.                                                          QG32 400
    Y    =LY*B,.                                                        QG32 410
    END,.                              /*END OF PROCEDURE QG32        */QG32 420
 QG48..                                                                 QG48  10
 /*********************************************************************/QG48  20
 /*                                                                   */QG48  30
 /*      INTEGRATION OF A GIVEN FUNCTION BY 48-POINT GAUSSIAN         */QG48  40
 /*      QUADRATURE FORMULA                                           */QG48  50
 /*                                                                   */QG48  60
 /*********************************************************************/QG48  70
    PROCEDURE(XL,XU,FCT,Y),.                                            QG48  80
    DECLARE                                                             QG48  90
         (XL,XU,Y,A,B,C)                                                QG48 100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QG48 110
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QG48 120
         FCT ENTRY RETURNS                                              QG48 130
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QG48 140
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QG48 150
         LY BINARY FLOAT (53),.                                         QG48 160
    DECLARE                                                             QG48 170
         X(24) BINARY FLOAT(53) STATIC INITIAL (                        QG48 180
         4.993855036262131E-01,   4.967650861331754E-01,                QG48 190
         4.920622918614134E-01,   4.852957962731236E-01,                QG48 200
         4.764938515802154E-01,   4.656933453532772E-01,                QG48 210
         4.529395683577848E-01,   4.382860101371239E-01,                QG48 220
         4.217941308121968E-01,   4.035331020147213E-01,                QG48 230
         3.835795162578702E-01,   3.620170654619073E-01,                QG48 240
         3.389361898163320E-01,   3.144336983882568E-01,                QG48 250
         2.886123630419864E-01,   2.615804873611165E-01,                QG48 260
         2.334514523754792E-01,   2.043432409953584E-01,                QG48 270
         1.743779431460804E-01,   1.436812436777278E-01,                QG48 280
         1.123818951973445E-01,   8.061117803444586E-02,                QG48 290
         4.850234960473135E-02,   1.619008548143468E-02),.              QG48 300
    DECLARE                                                             QG48 310
         W(24) BINARY FLOAT(53) STATIC INITIAL (                        QG48 320
         1.576673026152919E-03,   3.663776950638131E-03,                QG48 330
         5.738617289617270E-03,   7.789657861471924E-03,                QG48 340
         9.808080228677764E-03,   1.178538041966219E-02,                QG48 350
         1.371325485417847E-02,   1.558361391639904E-02,                QG48 360
         1.738861128238522E-02,   1.912067553291535E-02,                QG48 370
         2.077254147173237E-02,   2.233728042834714E-02,                QG48 380
         2.380832924624524E-02,   2.517951777692724E-02,                QG48 390
         2.644509474259683E-02,   2.759975184999208E-02,                QG48 400
         2.863864605020161E-02,   2.955741984919782E-02,                QG48 410
         3.035221958294694E-02,   3.101971157994633E-02,                QG48 420
         3.155709614312701E-02,   3.196211929232409E-02,                QG48 430
         3.223308221797504E-02,   3.236884840634196E-02),.              QG48 440
    A    =0.5*(XU+XL),.                                                 QG48 450
    B    =XU-XL,.                                                       QG48 460
    LY   =0,.                                                           QG48 470
         DO I=1 TO 24,.                                                 QG48 480
         C    =X(I)*B,.                                                 QG48 490
         LY   =LY+W(I)*(FCT(A+C)+FCT(A-C)),.                            QG48 500
         END,.                                                          QG48 510
    Y    =LY*B,.                                                        QG48 520
    END,.                              /*END OF PROCEDURE QG48        */QG48 530
 QL2..                                                                  QL2   10
 /*********************************************************************/QL2   20
 /*                                                                   */QL2   30
 /*      INTEGRATION OF A GIVEN FUNCTION BY 2-POINT GAUSSIAN-LAGUERRE */QL2   40
 /*      QUADRATURE FORMULA                                           */QL2   50
 /*                                                                   */QL2   60
 /*********************************************************************/QL2   70
    PROCEDURE (FCT,Y),.                                                 QL2   80
    DECLARE                                                             QL2   90
         FCT ENTRY RETURNS                                              QL2  100
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QL2  110
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QL2  120
         (X,Y)                                                          QL2  130
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/QL2  140
  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/QL2  150
    X    =3.414213562373095E+00,.                                       QL2  160
    Y    =1.464466094067262E-01*FCT(X),.                                QL2  170
    X    =5.857864376269050E-01,.                                       QL2  180
    Y    =Y+8.535533905932738E-01*FCT(X),.                              QL2  190
    END,.                              /*END OF PROCEDURE QL2         */QL2  200
 QL4..                                                                  QL4   10
 /*********************************************************************/QL4   20
 /*                                                                   */QL4   30
 /*      INTEGRATION OF A GIVEN FUNCTION BY 4-POINT GAUSSIAN-LAGUERRE */QL4   40
 /*      QUADRATURE FORMULA                                           */QL4   50
 /*                                                                   */QL4   60
 /*********************************************************************/QL4   70
    PROCEDURE (FCT,Y),.                                                 QL4   80
    DECLARE                                                             QL4   90
         FCT ENTRY RETURNS                                              QL4  100
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QL4  110
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QL4  120
         (X,Y)                                                          QL4  130
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/QL4  140
  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/QL4  150
    X    =9.395070912301133E+00,.                                       QL4  160
    Y    =5.392947055613275E-04*FCT(X),.                                QL4  170
    X    =4.536620296921128E+00,.                                       QL4  180
    Y    =Y+3.888790851500538E-02*FCT(X),.                              QL4  190
    X    =1.745761101158347E+00,.                                       QL4  200
    Y    =Y+3.574186924377997E-01*FCT(X),.                              QL4  210
    X    =3.225476896193923E-01,.                                       QL4  220
    Y    =Y+6.031541043416336E-01*FCT(X),.                              QL4  230
    END,.                              /*END OF PROCEDURE QL4         */QL4  240
 QL8..                                                                  QL8   10
 /*********************************************************************/QL8   20
 /*                                                                   */QL8   30
 /*      INTEGRATION OF A GIVEN FUNCTION BY 8-POINT GAUSSIAN-LAGUERRE */QL8   40
 /*      QUADRATURE FORMULA                                           */QL8   50
 /*                                                                   */QL8   60
 /*********************************************************************/QL8   70
    PROCEDURE (FCT,Y),.                                                 QL8   80
    DECLARE                                                             QL8   90
         FCT ENTRY RETURNS                                              QL8  100
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QL8  110
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QL8  120
         (XX,Y)                                                         QL8  130
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QL8  140
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QL8  150
         I BINARY FIXED,                                                QL8  160
         LY BINARY FLOAT (53),                                          QL8  170
         X(16) BINARY FLOAT (53) STATIC INITIAL                         QL8  180
         (2.286313173688926E+01,     1.048001174871510E-09,             QL8  190
         1.574067864127800E+01,     8.485746716272532E-07,              QL8  200
         1.075851601018100E+01,     9.076508773358213E-05,              QL8  210
         7.045905402393466E+00,     2.794536235225673E-03,              QL8  220
         4.266700170287659E+00,     3.334349226121565E-02,              QL8  230
         2.251086629866131E+00,     1.757949866371718E-01,              QL8  240
         9.037017767993799E-01,     4.187867808143430E-01,              QL8  250
         1.702796323051010E-01,     3.691885893416375E-01),.            QL8  260
    LY   =0,.                                                           QL8  270
         DO I=1 TO 15 BY 2,.                                            QL8  280
         XX   =X(I),.                                                   QL8  290
         LY   =LY+X(I+1)*FCT(XX),.                                      QL8  300
         END,.                                                          QL8  310
    Y    =LY,.                                                          QL8  320
    END,.                              /*END OF PROCEDURE QL8         */QL8  330
 QL12..                                                                 QL12  10
 /*********************************************************************/QL12  20
 /*                                                                   */QL12  30
 /*      INTEGRATION OF A GIVEN FUNCTION BY 12-POINT GAUSSIAN-LAGUERRE*/QL12  40
 /*      QUADRATURE FORMULA                                           */QL12  50
 /*                                                                   */QL12  60
 /*********************************************************************/QL12  70
    PROCEDURE (FCT,Y),.                                                 QL12  80
    DECLARE                                                             QL12  90
         (XX,Y)                                                         QL12 100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QL12 110
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QL12 120
         FCT ENTRY RETURNS                                              QL12 130
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QL12 140
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QL12 150
         I BINARY FIXED,                                                QL12 160
         LY BINARY FLOAT (53),                                          QL12 170
         X(24) BINARY FLOAT (53) STATIC INITIAL                         QL12 180
         (3.709912104446692E+01,    8.148077467426242E-16,              QL12 190
         2.848796725098400E+01,    3.061601635035021E-12,               QL12 200
         2.215109037939701E+01,    1.342391030515004E-09,               QL12 210
         1.711685518746226E+01,    1.668493876540910E-07,               QL12 220
         1.300605499330635E+01,    8.365055856819799E-06,               QL12 230
         9.621316842456867E+00,    2.032315926629994E-04,               QL12 240
         6.844525453115177E+00,    2.663973541865316E-03,               QL12 250
         4.599227639418348E+00,    2.010238115463410E-02,               QL12 260
         2.833751337743507E+00,    9.044922221168093E-02,               QL12 270
         1.512610269776419E+00,    2.440820113198776E-01,               QL12 280
         6.117574845151307E-01,    3.777592758731380E-01,               QL12 290
         1.157221173580207E-01,    2.647313710554432E-01),.             QL12 300
    LY   =0,.                                                           QL12 310
         DO I=1 TO 23 BY 2,.                                            QL12 320
         XX   =X(I),.                                                   QL12 330
         LY   =LY+X(I+1)*FCT(XX),.                                      QL12 340
         END,.                                                          QL12 350
    Y    =LY,.                                                          QL12 360
    END,.                              /*END OF PROCEDURE QL12        */QL12 370
 QL16..                                                                 QL16  10
 /*********************************************************************/QL16  20
 /*                                                                   */QL16  30
 /*      INTEGRATION OF A GIVEN FUNCTION BY 16-POINT GAUSSIAN-LAGUERRE*/QL16  40
 /*      QUADRATURE FORMULA                                           */QL16  50
 /*                                                                   */QL16  60
 /*********************************************************************/QL16  70
    PROCEDURE (FCT,Y),.                                                 QL16  80
    DECLARE                                                             QL16  90
         FCT ENTRY RETURNS                                              QL16 100
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QL16 110
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QL16 120
         (XX,Y)                                                         QL16 130
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QL16 140
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QL16 150
         I BINARY FIXED,                                                QL16 160
         LY BINARY FLOAT (53),                                          QL16 170
         X(32) BINARY FLOAT (53) STATIC INITIAL                         QL16 180
         (5.170116033954332E+01,     4.161462370372855E-22,             QL16 190
         4.194045264768833E+01,     5.050473700035513E-18,              QL16 200
         3.458339870228663E+01,     6.297967002517868E-15,              QL16 210
         2.857872974288214E+01,     2.127079033224103E-12,              QL16 220
         2.351590569399191E+01,     2.862350242973882E-10,              QL16 230
         1.918015685675313E+01,     1.881024841079673E-08,              QL16 240
         1.544152736878162E+01,     6.828319330871200E-07,              QL16 250
         1.221422336886616E+01,     1.484458687398130E-05,              QL16 260
         9.438314336391939E+00,     2.042719153082785E-04,              QL16 270
         7.070338535048234E+00,     1.849070943526311E-03,              QL16 280
         5.078018614549768E+00,     1.129990008033945E-02,              QL16 290
         3.437086633893207E+00,     4.732892869412522E-02,              QL16 300
         2.129283645098381E+00,     1.362969342963775E-01,              QL16 310
         1.141057774831227E+00,     2.657957776442142E-01,              QL16 320
         4.626963289150808E-01,     3.310578549508842E-01,              QL16 330
         8.764941047892784E-02,     2.061517149578010E-01),.            QL16 340
    LY   =0,.                                                           QL16 350
         DO I=1 TO 31 BY 2,.                                            QL16 360
         XX   =X(I),.                                                   QL16 370
         LY   =LY+X(I+1)*FCT(XX),.                                      QL16 380
         END,.                                                          QL16 390
    Y    =LY,.                                                          QL16 400
    END,.                              /*END OF PROCEDURE QL16        */QL16 410
 QL24..                                                                 QL24  10
 /*********************************************************************/QL24  20
 /*                                                                   */QL24  30
 /*      INTEGRATION OF A GIVEN FUNCTION BY 24-POINT GAUSSIAN-LAGUERRE*/QL24  40
 /*      QUADRATURE FORMULA                                           */QL24  50
 /*                                                                   */QL24  60
 /*********************************************************************/QL24  70
    PROCEDURE (FCT,Y),.                                                 QL24  80
    DECLARE                                                             QL24  90
         (XX,Y)                                                         QL24 100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QL24 110
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QL24 120
         FCT ENTRY RETURNS                                              QL24 130
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QL24 140
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QL24 150
         I BINARY FIXED,                                                QL24 160
         LY BINARY FLOAT (53),.                                         QL24 170
    DECLARE                                                             QL24 180
         X(24) BINARY FLOAT(53) STATIC INITIAL (                        QL24 190
         8.149827923394889E+01,   6.996224003510503E+01,                QL24 200
         6.105853144721876E+01,   5.360857454469507E+01,                QL24 210
         4.715310644515632E+01,   4.145172048487077E+01,                QL24 220
         3.635840580165162E+01,   3.177604135237472E+01,                QL24 230
         2.763593717433272E+01,   2.388732984816973E+01,                QL24 240
         2.049146008261642E+01,   1.741799264650898E+01,                QL24 250
         1.464273228959667E+01,   1.214610271172977E+01,                QL24 260
         9.912098015077706E+00,   7.927539247172152E+00,                QL24 270
         6.181535118736765E+00,   4.665083703467171E+00,                QL24 280
         3.370774264208998E+00,   2.292562058632190E+00,                QL24 290
         1.425597590803613E+00,   7.660969055459366E-01,                QL24 300
         3.112391461984837E-01,   5.901985218150798E-02),.              QL24 310
    DECLARE                                                             QL24 320
         W(24) BINARY FLOAT(53) STATIC INITIAL (                        QL24 330
         5.575345788328357E-35,   4.088301593680658E-30,                QL24 340
         2.451818845878403E-26,   3.605765864552959E-23,                QL24 350
         2.010517464555503E-20,   5.350188813010038E-18,                QL24 360
         7.819800382459448E-16,   6.894181052958086E-14,                QL24 370
         3.917736515058451E-12,   1.507008226292585E-10,                QL24 380
         4.072858987550000E-09,   7.960812959133630E-08,                QL24 390
         1.151315812737280E-06,   1.254472197799333E-05,                QL24 400
         1.044612146592752E-04,   6.721625640935479E-04,                QL24 410
         3.369349058478304E-03,   1.322601940512016E-02,                QL24 420
         4.073247815140865E-02,   9.816627262991889E-02,                QL24 430
         1.833226889777780E-01,   2.588067072728698E-01,                QL24 440
         2.587741075174239E-01,   1.428119733347819E-01),.              QL24 450
    LY   =0,.                                                           QL24 460
         DO I=1 TO 24,.                                                 QL24 470
         XX   =X(I),.                                                   QL24 480
         LY   =LY+W(I)*FCT(XX),.                                        QL24 490
         END,.                                                          QL24 500
    Y    =LY,.                                                          QL24 510
    END,.                              /*END OF PROCEDURE QL24        */QL24 520
 QH2..                                                                  QH2   10
 /*********************************************************************/QH2   20
 /*                                                                   */QH2   30
 /*      INTEGRATION OF A GIVEN FUNCTION BY 2-POINT GAUSSIAN-HERMITE  */QH2   40
 /*      QUADRATURE FORMULA                                           */QH2   50
 /*                                                                   */QH2   60
 /*********************************************************************/QH2   70
    PROCEDURE (FCT,Y),.                                                 QH2   80
    DECLARE                                                             QH2   90
         FCT ENTRY RETURNS                                              QH2  100
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QH2  110
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QH2  120
         (X,Y,Z)                                                        QH2  130
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/QH2  140
  /*     BINARY FLOAT(53),.            /*DOUBLE PRECISION VERSION  /*D*/QH2  150
    X    =7.071067811865475E-01,.                                       QH2  160
    Z    =-X,.                                                          QH2  170
    Y    =8.862269254527580E-01*(FCT(X)+FCT(Z)),.                       QH2  180
    END,.                              /*END OF PROCEDURE QH2         */QH2  190
 QH4..                                                                  QH4   10
 /*********************************************************************/QH4   20
 /*                                                                   */QH4   30
 /*      INTEGRATION OF A GIVEN FUNCTION BY 4-POINT GAUSSIAN-HERMITE  */QH4   40
 /*      QUADRATURE FORMULA                                           */QH4   50
 /*                                                                   */QH4   60
 /*********************************************************************/QH4   70
    PROCEDURE (FCT,Y),.                                                 QH4   80
    DECLARE                                                             QH4   90
         FCT ENTRY RETURNS                                              QH4  100
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QH4  110
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QH4  120
         W BINARY FLOAT(53),                                            QH4  130
         (X,Y,Z)                                                        QH4  140
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/QH4  150
  /*     BINARY FLOAT(53),.            /*DOUBLE PRECISION VERSION  /*D*/QH4  160
    X    =1.650680123885785E+00,.                                       QH4  170
    Z    =-X,.                                                          QH4  180
    W    =8.131283544724518E-02*(FCT(X)+FCT(Z)),.                       QH4  190
    X    =5.246476232752903E-01,.                                       QH4  200
    Z    =-X,.                                                          QH4  210
    Y    =W+8.049140900055128E-01*(FCT(X)+FCT(Z)),.                     QH4  220
    END,.                              /*END OF PROCEDURE QH4         */QH4  230
 QH8..                                                                  QH8   10
 /*********************************************************************/QH8   20
 /*                                                                   */QH8   30
 /*      INTEGRATION OF A GIVEN FUNCTION BY 8-POINT GAUSSIAN-HERMITE  */QH8   40
 /*      QUADRATURE FORMULA                                           */QH8   50
 /*                                                                   */QH8   60
 /*********************************************************************/QH8   70
    PROCEDURE (FCT,Y),.                                                 QH8   80
    DECLARE                                                             QH8   90
         FCT ENTRY RETURNS                                              QH8  100
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QH8  110
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QH8  120
         (XX,Y)                                                         QH8  130
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QH8  140
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QH8  150
         I BINARY FIXED,                                                QH8  160
         LY BINARY FLOAT (53),                                          QH8  170
         X( 8) BINARY FLOAT (53) STATIC INITIAL(                        QH8  180
         2.930637420257244E+00,     1.996040722113676E-04,              QH8  190
         1.981656756695843E+00,     1.707798300741348E-02,              QH8  200
         1.157193712446780E+00,     2.078023258148919E-01,              QH8  210
         3.811869902073221E-01,     6.611470125582413E-01),.            QH8  220
    LY   =0,.                                                           QH8  230
         DO I=1 TO  7 BY 2,.                                            QH8  240
         XX   =X(I),.                                                   QH8  250
         LY   =LY+X(I+1)*(FCT(XX)+FCT(-XX)),.                           QH8  260
         END,.                                                          QH8  270
    Y    =LY,.                                                          QH8  280
    END,.                              /*END OF PROCEDURE QH8         */QH8  290
 QH16..                                                                 QH16  10
 /*********************************************************************/QH16  20
 /*                                                                   */QH16  30
 /*      INTEGRATION OF A GIVEN FUNCTION BY 16-POINT GAUSSIAN-HERMITE */QH16  40
 /*      QUADRATURE FORMULA                                           */QH16  50
 /*                                                                   */QH16  60
 /*********************************************************************/QH16  70
    PROCEDURE (FCT,Y),.                                                 QH16  80
    DECLARE                                                             QH16  90
         FCT ENTRY RETURNS                                              QH16 100
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QH16 110
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QH16 120
         (XX,Y)                                                         QH16 130
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QH16 140
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QH16 150
         I BINARY FIXED,                                                QH16 160
         LY BINARY FLOAT (53),                                          QH16 170
         X(16) BINARY FLOAT (53) STATIC INITIAL(                        QH16 180
         4.688738939305818E+00,     2.654807474011182E-10,              QH16 190
         3.869447904860123E+00,     2.320980844865211E-07,              QH16 200
         3.176999161979956E+00,     2.711860092537882E-05,              QH16 210
         2.546202157847481E+00,     9.322840086241805E-04,              QH16 220
         1.951787990916254E+00,     1.288031153550997E-02,              QH16 230
         1.380258539198881E+00,     8.381004139898583E-02,              QH16 240
         8.229514491446559E-01,     2.806474585285337E-01,              QH16 250
         2.734810461381525E-01,     5.079294790166137E-01),.            QH16 260
    LY   =0,.                                                           QH16 270
         DO I=1 TO 15 BY 2,.                                            QH16 280
         XX   =X(I),.                                                   QH16 290
         LY   =LY+X(I+1)*(FCT(XX)+FCT(-XX)),.                           QH16 300
         END,.                                                          QH16 310
    Y    =LY,.                                                          QH16 320
    END,.                              /*END OF PROCEDURE QH16        */QH16 330
 QH24..                                                                 QH24  10
 /*********************************************************************/QH24  20
 /*                                                                   */QH24  30
 /*      INTEGRATION OF A GIVEN FUNCTION BY 24-POINT GAUSSIAN-HERMITE */QH24  40
 /*      QUADRATURE FORMULA                                           */QH24  50
 /*                                                                   */QH24  60
 /*********************************************************************/QH24  70
    PROCEDURE (FCT,Y),.                                                 QH24  80
    DECLARE                                                             QH24  90
         FCT ENTRY RETURNS                                              QH24 100
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QH24 110
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QH24 120
         (XX,Y)                                                         QH24 130
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QH24 140
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QH24 150
         I BINARY FIXED,                                                QH24 160
         LY BINARY FLOAT (53),                                          QH24 170
         X(24) BINARY FLOAT (53) STATIC INITIAL(                        QH24 180
         6.015925561425740E+00,    1.664368496489109E-16,               QH24 190
         5.259382927668044E+00,    6.584620243078170E-13,               QH24 200
         4.625662756423787E+00,    3.046254269987564E-10,               QH24 210
         4.053664402448150E+00,    4.018971174941430E-08,               QH24 220
         3.520006813034525E+00,    2.158245704902334E-06,               QH24 230
         3.012546137565565E+00,    5.688691636404380E-05,               QH24 240
         2.523881017011427E+00,    8.236924826884175E-04,               QH24 250
         2.049003573661699E+00,    7.048355810072671E-03,               QH24 260
         1.584250010961694E+00,    3.744547050323075E-02,               QH24 270
         1.126760817611245E+00,    1.277396217845592E-01,               QH24 280
         6.741711070372122E-01,    2.861795353464430E-01,               QH24 290
         2.244145474725156E-01,    4.269311638686992E-01),.             QH24 300
    LY   =0,.                                                           QH24 310
         DO I=1 TO 23 BY 2,.                                            QH24 320
         XX   =X(I),.                                                   QH24 330
         LY   =LY+X(I+1)*(FCT(XX)+FCT(-XX)),.                           QH24 340
         END,.                                                          QH24 350
    Y    =LY,.                                                          QH24 360
    END,.                              /*END OF PROCEDURE QH24        */QH24 370
 QH32..                                                                 QH32  10
 /*********************************************************************/QH32  20
 /*                                                                   */QH32  30
 /*      INTEGRATION OF A GIVEN FUNCTION BY 32-POINT GAUSSIAN-HERMITE */QH32  40
 /*      QUADRATURE FORMULA                                           */QH32  50
 /*                                                                   */QH32  60
 /*********************************************************************/QH32  70
    PROCEDURE (FCT,Y),.                                                 QH32  80
    DECLARE                                                             QH32  90
         FCT ENTRY RETURNS                                              QH32 100
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QH32 110
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QH32 120
         (XX,Y)                                                         QH32 130
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QH32 140
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QH32 150
         I BINARY FIXED,                                                QH32 160
         LY BINARY FLOAT (53),                                          QH32 170
         X(32) BINARY FLOAT (53) STATIC INITIAL(                        QH32 180
         7.125813909830728E+00,    7.310676427384162E-23,               QH32 190
         6.409498149269660E+00,    9.231736536518292E-19,               QH32 200
         5.812225949515914E+00,    1.197344017092849E-15,               QH32 210
         5.275550986515880E+00,    4.215010211326448E-13,               QH32 220
         4.777164503502596E+00,    5.933291463396639E-11,               QH32 230
         4.305547953351198E+00,    4.098832164770897E-09,               QH32 240
         3.853755485471445E+00,    1.574167792545594E-07,               QH32 250
         3.417167492818571E+00,    3.650585129562376E-06,               QH32 260
         2.992490825002374E+00,    5.416584061819983E-05,               QH32 270
         2.577249537732317E+00,    5.362683655279720E-04,               QH32 280
         2.169499183606112E+00,    3.654890326654428E-03,               QH32 290
         1.767654109463202E+00,    1.755342883157343E-02,               QH32 300
         1.370376410952872E+00,    6.045813095591261E-02,               QH32 310
         9.765004635896828E-01,    1.512697340766425E-01,               QH32 320
         5.849787654359324E-01,    2.774581423025299E-01,               QH32 330
         1.948407415693993E-01,    3.752383525928024E-01),.             QH32 340
    LY   =0,.                                                           QH32 350
         DO I=1 TO 31 BY 2,.                                            QH32 360
         XX   =X(I),.                                                   QH32 370
         LY   =LY+X(I+1)*(FCT(XX)+FCT(-XX)),.                           QH32 380
         END,.                                                          QH32 390
    Y    =LY,.                                                          QH32 400
    END,.                              /*END OF PROCEDURE QH32        */QH32 410
 QH48..                                                                 QH48  10
 /*********************************************************************/QH48  20
 /*                                                                   */QH48  30
 /*      INTEGRATION OF A GIVEN FUNCTION BY 48-POINT GAUSSIAN-HERMITE */QH48  40
 /*      QUADRATURE FORMULA                                           */QH48  50
 /*                                                                   */QH48  60
 /*********************************************************************/QH48  70
    PROCEDURE (FCT,Y),.                                                 QH48  80
    DECLARE                                                             QH48  90
         FCT ENTRY RETURNS                                              QH48 100
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QH48 110
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QH48 120
         (XX,Y)                                                         QH48 130
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QH48 140
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QH48 150
         I BINARY FIXED,                                                QH48 160
         LY BINARY FLOAT (53),.                                         QH48 170
    DECLARE                                                             QH48 180
         X(24) BINARY FLOAT(53) STATIC INITIAL (                        QH48 190
         8.975315081931687E+00,   8.310752190704784E+00,                QH48 200
         7.759295519765775E+00,   7.266046554164350E+00,                QH48 210
         6.810064578074141E+00,   6.380564096186411E+00,                QH48 220
         5.971072225013545E+00,   5.577316981223729E+00,                QH48 230
         5.196287718792365E+00,   4.825757228133209E+00,                QH48 240
         4.464014546934459E+00,   4.109704603560590E+00,                QH48 250
         3.761726490228358E+00,   3.419165969363885E+00,                QH48 260
         3.081248988645106E+00,   2.747308624822383E+00,                QH48 270
         2.416760904873216E+00,   2.089086660944276E+00,                QH48 280
         1.763817579895300E+00,   1.440525220137565E+00,                QH48 290
         1.118812152402157E+00,   7.983046277785622E-01,                QH48 300
         4.786463375944961E-01,   1.594929358488625E-01),.              QH48 310
    DECLARE                                                             QH48 320
         W(24) BINARY FLOAT(53) STATIC INITIAL (                        QH48 330
         7.935551460773997E-36,   5.984612693313878E-31,                QH48 340
         3.685036080150670E-27,   5.564577468902285E-24,                QH48 350
         3.188387323505138E-21,   8.730159601186677E-19,                QH48 360
         1.315159622658409E-16,   1.197589865479179E-14,                QH48 370
         7.046932581545889E-13,   2.815296537838169E-11,                QH48 380
         7.930467495165382E-10,   1.622514135895770E-08,                QH48 390
         2.468658993669750E-07,   2.847258691734848E-06,                QH48 400
         2.528599027748489E-05,   1.751504318011728E-04,                QH48 410
         9.563923198194153E-04,   4.153004911977552E-03,                QH48 420
         1.444496157498110E-02,   4.047967698460385E-02,                QH48 430
         9.182229707928518E-02,   1.692044719456411E-01,                QH48 440
         2.539615426647591E-01,   3.110010303779631E-01),.              QH48 450
    LY   =0,.                                                           QH48 460
         DO I=1 TO 24,.                                                 QH48 470
         XX   =X(I),.                                                   QH48 480
         LY   =LY+W(I)*(FCT(XX)+FCT(-XX)),.                             QH48 490
         END,.                                                          QH48 500
    Y    =LY,.                                                          QH48 510
    END,.                              /*END OF PROCEDURE QH48        */QH48 520
 QA2..                                                                  QA2   10
 /*********************************************************************/QA2   20
 /*                                                                   */QA2   30
 /*      INTEGRATION OF A GIVEN FUNCTION BY ASSOCIATED 2-POINT        */QA2   40
 /*      GAUSSIAN-LAGUERRE QUADRATURE FORMULA                         */QA2   50
 /*                                                                   */QA2   60
 /*********************************************************************/QA2   70
    PROCEDURE (FCT,Y),.                                                 QA2   80
    DECLARE                                                             QA2   90
         FCT ENTRY RETURNS                                              QA2  100
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QA2  110
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QA2  120
         (X,Y)                                                          QA2  130
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/QA2  140
  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/QA2  150
    X    =2.724744871391589E+00,.                                       QA2  160
    Y    =1.626256708944903E-01*FCT(X),.                                QA2  170
    X    =2.752551286084109E-01,.                                       QA2  180
    Y    =Y+1.609828180011026E+00*FCT(X),.                              QA2  190
    END,.                              /*END OF PROCEDURE QA2         */QA2  200
 QA4..                                                                  QA4   10
 /*********************************************************************/QA4   20
 /*                                                                   */QA4   30
 /*      INTEGRATION OF A GIVEN FUNCTION BY ASSOCIATED 4-POINT        */QA4   40
 /*      GAUSSIAN-LAGUERRE QUADRATURE FORMULA                         */QA4   50
 /*                                                                   */QA4   60
 /*********************************************************************/QA4   70
    PROCEDURE (FCT,Y),.                                                 QA4   80
    DECLARE                                                             QA4   90
         FCT ENTRY RETURNS                                              QA4  100
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QA4  110
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QA4  120
         (X,Y)                                                          QA4  130
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/QA4  140
  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/QA4  150
    X    =8.588635689012034E+00,.                                       QA4  160
    Y    =3.992081444227352E-04*FCT(X),.                                QA4  170
    X    =3.926963501358287E+00,.                                       QA4  180
    Y    =Y+3.415596601482695E-02*FCT(X),.                              QA4  190
    X    =1.339097288126361E+00,.                                       QA4  200
    Y    =Y+4.156046516297838E-01*FCT(X),.                              QA4  210
    X    =1.453035215033171E-01,.                                       QA4  220
    Y    =Y+1.322294025116483E+00*FCT(X),.                              QA4  230
    END,.                              /*END OF PROCEDURE QA4         */QA4  240
 QA8..                                                                  QA8   10
 /*********************************************************************/QA8   20
 /*                                                                   */QA8   30
 /*      INTEGRATION OF A GIVEN FUNCTION BY ASSOCIATED 8-POINT        */QA8   40
 /*      GAUSSIAN-LAGUERRE QUADRATURE FORMULA                         */QA8   50
 /*                                                                   */QA8   60
 /*********************************************************************/QA8   70
    PROCEDURE (FCT,Y),.                                                 QA8   80
    DECLARE                                                             QA8   90
         FCT ENTRY RETURNS                                              QA8  100
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QA8  110
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QA8  120
         (XX,Y)                                                         QA8  130
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QA8  140
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QA8  150
         LY BINARY FLOAT (53),                                          QA8  160
         I BINARY FIXED,                                                QA8  170
         X(16) BINARY FLOAT (53) STATIC INITIAL                         QA8  180
         (2.198427284096265E+01,     5.309614948022364E-10,             QA8  190
         1.497262708842639E+01,     4.641961689730421E-07,              QA8  200
         1.009332367522134E+01,     5.423720185075763E-05,              QA8  210
         6.483145428627170E+00,     1.864568017248361E-03,              QA8  220
         3.809476361484907E+00,     2.576062307101995E-02,              QA8  230
         1.905113635031428E+00,     1.676200827979717E-01,              QA8  240
         6.772490876492892E-01,     5.612949170570674E-01,              QA8  250
         7.479188259681827E-02,     1.015858958033227E+00),.            QA8  260
    LY   =0,.                                                           QA8  270
         DO I=1 TO 15 BY 2,.                                            QA8  280
         XX   =X(I),.                                                   QA8  290
         LY   =LY+X(I+1)*FCT(XX),.                                      QA8  300
         END,.                                                          QA8  310
    Y    =LY,.                                                          QA8  320
    END,.                              /*END OF PROCEDURE QA8         */QA8  330
 QA12..                                                                 QA12  10
 /*********************************************************************/QA12  20
 /*                                                                   */QA12  30
 /*      INTEGRATION OF A GIVEN FUNCTION BY ASSOCIATED 12-POINT       */QA12  40
 /*      GAUSSIAN-LAGUERRE QUADRATURE FORMULA                         */QA12  50
 /*                                                                   */QA12  60
 /*********************************************************************/QA12  70
    PROCEDURE (FCT,Y),.                                                 QA12  80
    DECLARE                                                             QA12  90
         FCT ENTRY RETURNS                                              QA12 100
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QA12 110
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QA12 120
         (XX,Y)                                                         QA12 130
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QA12 140
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QA12 150
         LY BINARY FLOAT (53),                                          QA12 160
         I BINARY FIXED,                                                QA12 170
         X(24) BINARY FLOAT (53) STATIC INITIAL                         QA12 180
         (3.619136036061560E+01,    3.328736992978218E-16,              QA12 190
         2.766110877984609E+01,    1.316924048615634E-12,               QA12 200
         2.139675593616611E+01,    6.092508539975128E-10,               QA12 210
         1.643219508767531E+01,    8.037942349882859E-08,               QA12 220
         1.239044796380947E+01,    4.316491409804667E-06,               QA12 230
         9.075434230961203E+00,    1.137738327280876E-04,               QA12 240
         6.369975388030635E+00,    1.647384965376835E-03,               QA12 250
         4.198415644878413E+00,    1.409671162014534E-02,               QA12 260
         2.509848097232128E+00,    7.489094100646149E-02,               QA12 270
         1.269589940103961E+00,    2.554792435691183E-01,               QA12 280
         4.545066815637803E-01,    5.723590706928860E-01,               QA12 290
         5.036188911729395E-02,    8.538623277373985E-01),.             QA12 300
    LY   =0,.                                                           QA12 310
         DO I=1 TO 23 BY 2,.                                            QA12 320
         XX   =X(I),.                                                   QA12 330
         LY   =LY+X(I+1)*FCT(XX),.                                      QA12 340
         END,.                                                          QA12 350
    Y    =LY,.                                                          QA12 360
    END,.                              /*END OF PROCEDURE QA12        */QA12 370
 QA16..                                                                 QA16  10
 /*********************************************************************/QA16  20
 /*                                                                   */QA16  30
 /*      INTEGRATION OF A GIVEN FUNCTION BY ASSOCIATED 16-POINT       */QA16  40
 /*      GAUSSIAN-LAGUERRE QUADRATURE FORMULA                         */QA16  50
 /*                                                                   */QA16  60
 /*********************************************************************/QA16  70
    PROCEDURE (FCT,Y),.                                                 QA16  80
    DECLARE                                                             QA16  90
         FCT ENTRY RETURNS                                              QA16 100
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QA16 110
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QA16 120
         (XX,Y)                                                         QA16 130
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QA16 140
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QA16 150
         LY BINARY FLOAT (53),                                          QA16 160
         I BINARY FIXED,                                                QA16 170
         X(32) BINARY FLOAT (53) STATIC INITIAL                         QA16 180
         (5.077722387753708E+01,     1.462135285476832E-22,             QA16 190
         4.108166652549120E+01,     1.846347307303658E-18,              QA16 200
         3.378197048822617E+01,     2.394688034185697E-15,              QA16 210
         2.783143821132868E+01,     8.430020422652895E-13,              QA16 220
         2.282130069352521E+01,     1.186658292679328E-10,              QA16 230
         1.853774317860669E+01,     8.197664329541793E-09,              QA16 240
         1.485143134180125E+01,     3.148335585091188E-07,              QA16 250
         1.167703367397596E+01,     7.301170259124752E-06,              QA16 260
         8.955001337723390E+00,     1.083316812363997E-04,              QA16 270
         6.642215179741444E+00,     1.072536731055944E-03,              QA16 280
         4.706726707667587E+00,     7.309780653308856E-03,              QA16 290
         3.124601050702144E+00,     3.510685766314686E-02,              QA16 300
         1.877931507696074E+00,     1.209162619118252E-01,              QA16 310
         9.535531553908655E-01,     3.025394681532850E-01,              QA16 320
         3.422001560109477E-01,     5.549162846050598E-01,              QA16 330
         3.796291457531345E-02,     7.504767051856048E-01),.            QA16 340
    LY   =0,.                                                           QA16 350
         DO I=1 TO 31 BY 2,.                                            QA16 360
         XX   =X(I),.                                                   QA16 370
         LY   =LY+X(I+1)*FCT(XX),.                                      QA16 380
         END,.                                                          QA16 390
    Y    =LY,.                                                          QA16 400
    END,.                              /*END OF PROCEDURE QA16        */QA16 410
 QA24..                                                                 QA24  10
 /*********************************************************************/QA24  20
 /*                                                                   */QA24  30
 /*      INTEGRATION OF A GIVEN FUNCTION BY ASSOCIATED 24-POINT       */QA24  40
 /*      GAUSSIAN-LAGUERRE QUADRATURE FORMULA                         */QA24  50
 /*                                                                   */QA24  60
 /*********************************************************************/QA24  70
    PROCEDURE (FCT,Y),.                                                 QA24  80
    DECLARE                                                             QA24  90
         FCT ENTRY RETURNS                                              QA24 100
         (BINARY FLOAT),               /*SINGLE PRECISION VERSION  /*S*/QA24 110
  /*     (BINARY FLOAT (53)),          /*DOUBLE PRECISION VERSION  /*D*/QA24 120
         (XX,Y)                                                         QA24 130
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/QA24 140
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/QA24 150
         LY BINARY FLOAT (53),                                          QA24 160
         I BINARY FIXED,.                                               QA24 170
    DECLARE                                                             QA24 180
         X(24) BINARY FLOAT(53) STATIC INITIAL (                        QA24 190
         8.055628081995041E+01,   6.906860197530437E+01,                QA24 200
         6.020666696305722E+01,   5.279543252728363E+01,                QA24 210
         4.637697955754013E+01,   4.071159818554311E+01,                QA24 220
         3.565370351632821E+01,   3.110646470904657E+01,                QA24 230
         2.700140605647236E+01,   2.328793282487992E+01,                QA24 240
         1.992742587524246E+01,   1.688967192852711E+01,                QA24 250
         1.415058618728576E+01,   1.169069592605607E+01,                QA24 260
         9.494095330026488E+00,   7.547704680023454E+00,                QA24 270
         5.840733271323608E+00,   4.364283076935306E+00,                QA24 280
         3.111052455147713E+00,   2.075112909852381E+00,                QA24 290
         1.251740632362746E+00,   6.372902787326688E-01,                QA24 300
         2.291023164926243E-01,   2.543799658568936E-02),.              QA24 310
    DECLARE                                                             QA24 320
         W(24) BINARY FLOAT(53) STATIC INITIAL (                        QA24 330
         1.587110292154799E-35,   1.196922538662776E-30,                QA24 340
         7.370072160301340E-27,   1.112915493780457E-23,                QA24 350
         6.376774647010277E-21,   1.746031920237335E-18,                QA24 360
         2.630319245316817E-16,   2.395179730958359E-14,                QA24 370
         1.409386516309178E-12,   5.630593075676338E-11,                QA24 380
         1.586093499033076E-09,   3.245028271791540E-08,                QA24 390
         4.937317987339501E-07,   5.694517383469696E-06,                QA24 400
         5.057198055496978E-05,   3.503008636023457E-04,                QA24 410
         1.912784639638831E-03,   8.306009823955105E-03,                QA24 420
         2.888992314996220E-02,   8.095935396920770E-02,                QA24 430
         1.836445941585704E-01,   3.384089438912822E-01,                QA24 440
         5.079230853295182E-01,   6.220020607559262E-01),.              QA24 450
    LY   =0,.                                                           QA24 460
         DO I=1 TO 24,.                                                 QA24 470
         XX   =X(I),.                                                   QA24 480
         LY   =LY+W(I)*FCT(XX),.                                        QA24 490
         END,.                                                          QA24 500
    Y    =LY,.                                                          QA24 510
    END,.                              /*END OF PROCEDURE QA24        */QA24 520
 DGT3..                                                                 DGT3  10
 /*********************************************************************/DGT3  20
 /*                                                                   */DGT3  30
 /*      DIFFERENTIATE A TABLED FUNCTION USING LAGRANGIAN             */DGT3  40
 /*      INTERPOLATION FORMULA, DEGREE 2                              */DGT3  50
 /*                                                                   */DGT3  60
 /*********************************************************************/DGT3  70
    PROCEDURE(X,Y,Z,DIM),.                                              DGT3  80
    DECLARE                                                             DGT3  90
         (X(*),Y(*),Z(*),XA,XB,XC,                                      DGT3 100
         XBA,XCB,YA,YB,YC,QBA,QCB)                                      DGT3 110
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/DGT3 120
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/DGT3 130
         (DIM,I)BINARY FIXED,                                           DGT3 140
         LERR CHARACTER(1),                                             DGT3 150
         ERROR EXTERNAL CHARACTER(1),.                                  DGT3 160
    IF DIM GE 3                        /*TEST SPECIFIED DIMENSION     */DGT3 170
    THEN DO,.                                                           DGT3 180
         LERR ='0',.                   /*INIT. LOCAL ERROR INDICATOR  */DGT3 190
         XB   =X(3),.                                                   DGT3 200
         YB   =Y(3),.                                                   DGT3 210
         XC   =X(1),.                                                   DGT3 220
         YC   =Y(1),.                                                   DGT3 230
         XCB  =XB-XC,.                                                  DGT3 240
         IF XCB=0                      /*TEST MONOTONY OF ARGUMENTS   */DGT3 250
         THEN DO,.                                                      DGT3 260
              LERR ='1',.              /*NON-MONOTONIC ARGUMENTS      */DGT3 270
              XCB  =1E-30,.            /*CHANGE XCB TO 10**(-30)      */DGT3 280
              END,.                                                     DGT3 290
         QCB  =(YB-YC)/XCB,.           /*COMPUTE DIVIDED DIFFERENCE   */DGT3 300
              DO I =2 TO DIM,.                                          DGT3 310
              QBA  =QCB,.              /*SAVE DIVIDED DIFFERENCE      */DGT3 320
              XBA  =XCB,.              /*REPLACE XBA BY X(I-1)-X(I-2) */DGT3 330
              XA   =XB,.               /*REPLACE XA  BY X(I-2)        */DGT3 340
              XB   =XC,.               /*REPLACE XB BY X(I-1)         */DGT3 350
              XC   =X(I),.             /*SET     XC  TO X(I)          */DGT3 360
              YA   =YB,.               /*REPLACE YA BY Y(I-2)         */DGT3 370
              YB   =YC,.               /*REPLACE YB  BY Y(I-1)        */DGT3 380
              YC   =Y(I),.             /*SET     YC  BY Y(I)          */DGT3 390
              XCB  =XC-XB,.            /*REPLACE XCB BY X(I)-X(I-1)   */DGT3 400
              IF XCB*XBA LE 0                                           DGT3 410
              THEN LERR ='1',.         /*MARK NON-MONOTONIC ARGUMENTS */DGT3 420
              IF XCB=0                                                  DGT3 430
              THEN XCB  =1E-30,.       /*CHANGE XCB TO 10**(-30)      */DGT3 440
              QCB  =(YC-YB)/XCB,.      /*COMPUTE DIVIDED DIFFERENCE   */DGT3 450
              XA   =XC-XA,.            /*REPLACE XA BY X(I)-X(I-1)    */DGT3 460
              IF XA=0                                                   DGT3 470
              THEN XA   =1E-30,.       /*CHANGE XA TO 10**(-30)       */DGT3 480
              YA   =(YC-YA)/XA,.       /*COMPUTE DIVIDED DIFFERENCE   */DGT3 490
              Z(I-1)=QBA-YA+QCB,.      /*STORE DERIVATIVE VALUE Z(I-1)*/DGT3 500
              END,.                                                     DGT3 510
         Z(DIM)=QCB-QBA+YA,.           /*STORE DERIVATIVE VALUE Z(DIM)*/DGT3 520
         END,.                                                          DGT3 530
    ELSE LERR ='2',.                   /*ERROR IN SPECIFIED DIMENSION */DGT3 540
    ERROR=LERR,.                                                        DGT3 550
    END,.                              /*END OF PROCEDURE DGT3        */DGT3 560
 DET3..                                                                 DET3  10
 /*********************************************************************/DET3  20
 /*                                                                   */DET3  30
 /*      DIFFERENTIATE AN EQUIDISTANTLY TABLED FUNCTION USING         */DET3  40
 /*      LAGRANGIAN INTERPOLATION FORMULA, DEGREE 2                   */DET3  50
 /*                                                                   */DET3  60
 /*********************************************************************/DET3  70
    PROCEDURE(H,Y,Z,DIM),.                                              DET3  80
    DECLARE                                                             DET3  90
         (H,Y(*),Z(*),YA,YB,YC,HH)                                      DET3 100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/DET3 110
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/DET3 120
         (DIM,I)BINARY FIXED,                                           DET3 130
         ERROR EXTERNAL CHARACTER(1),.                                  DET3 140
    IF DIM GE 3                        /*TEST SPECIFIED DIMENSION     */DET3 150
    THEN DO,.                                                           DET3 160
         IF H NE 0                     /*TEST SPECIFIED INCREMENT     */DET3 170
         THEN DO,.                                                      DET3 180
              HH   =H+H,.                                               DET3 190
              YC   =Y(1),.                                              DET3 200
              YA   =YC-Y(2),.                                           DET3 210
              YB   =Y(3)+YA+YA+YA,.    /*MODIFICATION  YB = Y(0)      */DET3 220
                   DO I =2 TO DIM,.                                     DET3 230
                   YA   =YB,.          /*REPLACE YA BY Y(I-2)         */DET3 240
                   YB   =YC,.          /*REPLACE YB BY Y(I-1)         */DET3 250
                   YC   =Y(I),.        /*SET YC TO Y(I)               */DET3 260
                   Z(I-1)=(YC-YA)/HH,. /*SET Z(I-1) TO (Y(I)-Y(I-2)/2H*/DET3 270
                   END,.                                                DET3 280
              YC   =YC-YB,.                                             DET3 290
              Z(DIM)=(YA-YB+YC         /*Z(DIM)=(Y(DIM-2)-4*Y(DIM-1)  */DET3 300
                   +YC+YC)/HH,.        /*+3*Y(DIM))2*H                */DET3 310
              ERROR='0',.              /*SUCCESSFUL OPERATION         */DET3 320
              END,.                                                     DET3 330
         ELSE ERROR='1',.              /*ERROR IN SPECIFIED INCREMENT */DET3 340
         END,.                                                          DET3 350
    ELSE ERROR='2',.                   /*ERROR IN SPECIFIED DIMENSION */DET3 360
    END,.                              /*END OF PROCEDURE DET3        */DET3 370
 DET5..                                                                 DET5  10
 /*********************************************************************/DET5  20
 /*                                                                   */DET5  30
 /*      DIFFERENTIATE AN EQUIDISTANTLY TABLED FUNCTION USING         */DET5  40
 /*      LAGRANGIAN INTERPOLATION FORMULA, DEGREE 4                   */DET5  50
 /*                                                                   */DET5  60
 /*********************************************************************/DET5  70
    PROCEDURE(H,Y,Z,DIM),.                                              DET5  80
    DECLARE                                                             DET5  90
         (H,Y(*),Z(*),YA,YB,YC,YD,YE,HH)                                DET5 100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/DET5 110
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/DET5 120
         (DIM,I)BINARY FIXED,                                           DET5 130
         ERROR EXTERNAL CHARACTER(1),.                                  DET5 140
    IF DIM GE 5                        /*TEST SPECIFIED DIMENSION     */DET5 150
    THEN DO,.                                                           DET5 160
         IF H NE 0                     /*TEST SPECIFIED INCREMENT     */DET5 170
         THEN DO,.                                                      DET5 180
              HH   =12*H,.                                              DET5 190
              YD   =Y(1),.                                              DET5 200
              YE   =Y(2),.                                              DET5 210
              YA   =Y(3)-YE,.                                           DET5 220
              YB   =Y(4),.                                              DET5 230
              YC   =Y(5)               /*MODIFICATION  YC = Y(0)      */DET5 240
                   +5*(YD-YB+YA+YA),.                                   DET5 250
              YB   =5*(YC-YD+YE-YD-YA) /*MODIFICATION  YB = Y(-1)     */DET5 260
                   +YB,.                                                DET5 270
                   DO I =3 TO DIM,.                                     DET5 280
                   YA   =YB,.          /*REPLACE YA BY Y(I-4)         */DET5 290
                   YB   =YC,.          /*REPLACE YB BY Y(I-3)         */DET5 300
                   YC   =YD,.          /*REPLACE YC BY Y(I-2)         */DET5 310
                   YD   =YE,.          /*REPLACE YD BY Y(I-1)         */DET5 320
                   YE   =Y(I),.        /*SET YE TO Y(I)               */DET5 330
                   Z(I-2)=(YA-YE+      /*Z(I-2)=(Y(I-4)-Y(I)+         */DET5 340
                        (YD-YB)*8)/HH,./*+8*(Y(I-1)-Y(I-3))/12H       */DET5 350
                   END,.                                                DET5 360
              YA   =YA-6*(YB-YC                                         DET5 370
                   +YD-YC+YD-YC),.                                      DET5 380
              Z(DIM-1)=(YE-YD+YE-YD    /*COMPUTE LAST TWO DERIVATIVE  */DET5 390
                   +YE-YA)/HH,.        /*VALUES                       */DET5 400
              Z(DIM)=(YA+YA+YA+YB+YB                                    DET5 410
                   +YE-6*YC+12*(YE                                      DET5 420
                   -YD+YE-YC))/HH,.                                     DET5 430
              ERROR='0',.              /*SUCCESSFUL OPERATION         */DET5 440
              END,.                                                     DET5 450
         ELSE ERROR='1',.              /*ERROR IN SPECIFIED INCREMENT */DET5 460
         END,.                                                          DET5 470
    ELSE ERROR='2',.                   /*ERROR IN SPECIFIED DIMENSION */DET5 480
    END,.                              /*END OF PROCEDURE DET5        */DET5 490
 DFEC..                                                                 DFEC  10
 /*********************************************************************/DFEC  20
 /*                                                                   */DFEC  30
 /*      COMPUTE DERIVATIVE VALUE OF A FUNCTION USING EXTRAPOLATION   */DFEC  40
 /*      METHOD ON CENTRAL DIVIDED DIFFERENCES                        */DFEC  50
 /*                                                                   */DFEC  60
 /*********************************************************************/DFEC  70
    PROCEDURE(X,H,OPT,FCT,Z),.                                          DFEC  80
    DECLARE                                                             DFEC  90
         (X,Z,H,HH,HK,V,LZ,H1,                                          DFEC 100
         DA,DB,DZ,AUX(5))                                               DFEC 110
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/DFEC 120
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/DFEC 130
         (K,M)BINARY FIXED,                                             DFEC 140
         FCT ENTRY                                                      DFEC 150
         (BINARY FLOAT)                /*SINGLE PRECISION VERSION  /*S*/DFEC 160
  /*     (BINARY FLOAT(53))            /*DOUBLE PRECISION VERSION  /*D*/DFEC 170
         RETURNS(BINARY FLOAT),        /*SINGLE PRECISION VERSION  /*S*/DFEC 180
  /*     RETURNS(BINARY FLOAT(53)),    /*DOUBLE PRECISION VERSION  /*D*/DFEC 190
         (ERROR EXTERNAL,OPT)CHARACTER(1),.                             DFEC 200
    IF H NE 0                          /*TEST SPECIFIED INTERVAL      */DFEC 210
    THEN DO,.                                                           DFEC 220
         HK,H1=ABS(H),.                /*SET H1 TO ABS(H)             */DFEC 230
         IF OPT NE '0'                 /*SHOULD OPTIMUM STEPSIZE H1   */DFEC 240
         THEN DO,.                     /*BE GENERATED                 */DFEC 250
              V    =5E-1,.             /*SINGLE PRECISION VERSION  /*S*/DFEC 260
  /*          V    =5E-3,.             /*DOUBLE PRECISION VERSION  /*D*/DFEC 270
              IF HK GT V                                                DFEC 280
              THEN HK   =V,.           /*SET HK =MIN(V,ABS(H))        */DFEC 290
              DB   =1,.                                                 DFEC 300
              DA   =ABS(FCT(X+HK)                                       DFEC 310
                   -FCT(X-HK))/2,.                                      DFEC 320
              IF DA GT HK                                               DFEC 330
              THEN DB   =DA/HK,.       /*SET DB TO MAX(1,ABS(T))      */DFEC 340
              IF DA LT 1                                                DFEC 350
              THEN DA   =1,.           /*SET DA TO MAX(1,ABS(Y)       */DFEC 360
              HK   =V*DA/DB,.                                           DFEC 370
              IF HK LT H1                                               DFEC 380
              THEN H1   =HK,.          /*SET H1 TO MIN(V*DA/DB,ABS(H))*/DFEC 390
              END,.                                                     DFEC 400
         V    =5,.                                                      DFEC 410
              DO K =1 TO 5,.                                            DFEC 420
              HK   =(V/5)*H1,.         /*SET HK TO H1*(6-K)/5         */DFEC 430
              LZ,AUX(K)=(FCT(X+HK)-    /*SET AUX(K) TO T(0,K)         */DFEC 440
                   FCT(X-HK))/(HK+HK),.                                 DFEC 450
              HH   =1/V,.                                               DFEC 460
              HK   =0,.                                                 DFEC 470
              DA   =1E30,.                                              DFEC 480
                   DO M =K-1 TO 1 BY -1,.                               DFEC 490
                   DB   =DA,.                                           DFEC 500
                   HK   =HK+HH,.                                        DFEC 510
                   DZ   =(LZ-AUX(M))/  /*SET DZ TO INCREMENT          */DFEC 520
                        (HK*(2+HK)),.                                   DFEC 530
                   DA   =ABS(DZ),.                                      DFEC 540
                   IF DB LT DA         /*TEST FOR DECR. INCREMENTS    */DFEC 550
                   THEN GOTO NEWK,.                                     DFEC 560
                   LZ,AUX(M)=LZ+DZ,.   /*SET Z,AUX(M) TO T(K-M  ,M)   */DFEC 570
                   END,.                                                DFEC 580
 NEWK..                                                                 DFEC 590
              V    =V-1,.                                               DFEC 600
              END,.                                                     DFEC 610
         Z    =LZ,.                                                     DFEC 620
         ERROR='0',.                   /*SUCCESSFUL OPERATION         */DFEC 630
         END,.                                                          DFEC 640
    ELSE ERROR='1',.                   /*ERROR IN SPECIFIED INTERVAL  */DFEC 650
    END,.                              /*END OF PROCEDURE DFEC        */DFEC 660
 DFEO..                                                                 DFEO  10
 /*********************************************************************/DFEO  20
 /*                                                                   */DFEO  30
 /*      COMPUTE DERIVATIVE VALUE OF A FUNCTION USING EXTRAPOLATION   */DFEO  40
 /*      METHOD ON ONE-SIDED DIVIDED DIFFERENCES                      */DFEO  50
 /*                                                                   */DFEO  60
 /*********************************************************************/DFEO  70
    PROCEDURE(X,H,OPT,FCT,Z),.                                          DFEO  80
    DECLARE                                                             DFEO  90
         (X,Z,H,HK,HH,V,Y,H1,                                           DFEO 100
         DA,DB,DZ,AUX(10))                                              DFEO 110
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/DFEO 120
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/DFEO 130
         (K,M)BINARY FIXED,                                             DFEO 140
         FCT ENTRY                                                      DFEO 150
         (BINARY FLOAT)                /*SINGLE PRECISION VERSION  /*S*/DFEO 160
  /*     (BINARY FLOAT(53))            /*DOUBLE PRECISION VERSION  /*D*/DFEO 170
         RETURNS(BINARY FLOAT),        /*SINGLE PRECISION VERSION  /*S*/DFEO 180
  /*     RETURNS(BINARY FLOAT(53)),    /*DOUBLE PRECISION VERSION  /*D*/DFEO 190
         (ERROR EXTERNAL,OPT)CHARACTER(1),.                             DFEO 200
    IF H NE 0                          /*TEST SPECIFIED INTERVAL      */DFEO 210
    THEN DO,.                                                           DFEO 220
         H1   =H,.                                                      DFEO 230
         Y    =FCT(X),.                                                 DFEO 240
         IF OPT NE '0'                 /*SHOULD OPTIMUM STEPSIZE H1   */DFEO 250
         THEN DO,.                     /*BE GENERATED                 */DFEO 260
              V    =5E-1,.             /*SINGLE PRECISION VERSION  /*S*/DFEO 270
  /*          V    =5E-3,.             /*DOUBLE PRECISION VERSION  /*D*/DFEO 280
              IF H1 LT 0                                                DFEO 290
              THEN V    =-V,.                                           DFEO 300
              IF ABS(V) GT ABS(H1)                                      DFEO 310
              THEN HH   =H1,.          /*SET HH=SIGN(H)*MIN(V,ABS(H)) */DFEO 320
              ELSE HH   =V,.                                            DFEO 330
              DB   =ABS((FCT(X+HH)                                      DFEO 340
                   -Y)/HH),.                                            DFEO 350
              IF DB LT 1                                                DFEO 360
              THEN DB   =1,.           /*SET DB TO MAX(1,ABS(T))      */DFEO 370
              HK   =(V+V)/DB,.                                          DFEO 380
              IF ABS(Y) GT 1                                            DFEO 390
              THEN HK   =HK*ABS(Y),.   /*SET HK=2*V*MAX(1,ABS(Y))/DB  */DFEO 400
              IF ABS(HK) LT ABS(H1)                                     DFEO 410
              THEN H1   =HK,.          /*SET H1=SIGN(H)*MIN(HK,ABS(H))*/DFEO 420
              END,.                                                     DFEO 430
         V    =10,.                                                     DFEO 440
              DO K =1 TO 10,.                                           DFEO 450
              HK   =(V/10)*H1,.        /*SET HK TO H1*(11-K)/10       */DFEO 460
              Z,AUX(K)=(FCT(X+HK)-Y)   /*SET AUX(K) TO T(0,K)         */DFEO 470
                   /HK,.                                                DFEO 480
              HH   =1/V,.                                               DFEO 490
              HK   =0,.                                                 DFEO 500
              DA   =1E30,.                                              DFEO 510
                   DO M =K-1 TO 1 BY -1,.                               DFEO 520
                   HK   =HK+HH,.                                        DFEO 530
                   DZ   =(Z-AUX(M))                                     DFEO 540
                        /HK,.          /*SET DZ TO INCREMENT          */DFEO 550
                   DB   =DA,.                                           DFEO 560
                   DA   =ABS(DZ),.                                      DFEO 570
                   IF DB LT DA         /*TEST FOR DECREASING INCREMENT*/DFEO 580
                   THEN GOTO NEWK,.                                     DFEO 590
                   Z,AUX(M)=Z+DZ,.     /*SET Z,AUX(M) TO T(K-M,M)     */DFEO 600
                   END,.                                                DFEO 610
 NEWK..                                                                 DFEO 620
              V    =V-1,.                                               DFEO 630
              END,.                                                     DFEO 640
         ERROR='0',.                   /*SUCCESSFUL OPERATION         */DFEO 650
         END,.                                                          DFEO 660
    ELSE ERROR='1',.                   /*ERROR IN SPECIFIED INTERVAL  */DFEO 670
    END,.                              /*END OF PROCEDURE DFEO        */DFEO 680
 ALIM..                                                                 ALI   10
 /*********************************************************************/ALI   20
 /*                                                                   */ALI   30
 /*      AITKEN SCHEME FOR INTERPOLATION OF FUNCTION VALUE            */ALI   40
 /*      FROM GIVEN MONOTONIC TABLE                                   */ALI   50
 /*                                                                   */ALI   60
 /*********************************************************************/ALI   70
    PROCEDURE (X,Y,DIM,ORDER,EPS,XVAL,YVAL),.                           ALI   80
    DECLARE                                                             ALI   90
         (DIM,I,J,K,N,II,JL,JR,JJL,JJR,DIMS,ORDER)                      ALI  100
         BINARY FIXED,                                                  ALI  110
         (X(*),Y(*),ARG(MIN(DIM,ORDER)),VAL(MIN(DIM,ORDER)),XVAL,       ALI  120
         YVAL,XST,DX,EPS,XS,Z1,Z2,D,DD,VALI,VALI1,A,DIST,DIST1,         ALI  130
         H,DELT1,DELT2,FACT,ARGI)                                       ALI  140
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/ALI  150
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/ALI  160
         (ERROR EXTERNAL,SW)                                            ALI  170
         CHARACTER (1),.                                                ALI  180
    SW   ='M',.                        /*MONOTONIC ARGUMENTS          */ALI  190
    J    =1,.                                                           ALI  200
    D    =1E75,.                                                        ALI  210
         DO I = 1 TO DIM,.             /*COMPUTE STARTING SUBSCRIPT J */ALI  220
         DD   =ABS(XVAL-X(I)),.                                         ALI  230
         IF DD LE D                                                     ALI  240
         THEN DO,.                                                      ALI  250
              D    =DD,.                                                ALI  260
              J    =I,.                                                 ALI  270
              END,.                                                     ALI  280
         END,.                                                          ALI  290
    A,ARG(1)=X(J),.                                                     ALI  300
    GO TO COM,.                                                         ALI  310
 ALIE..                                                                 ALI  320
 /*********************************************************************/ALI  330
 /*                                                                   */ALI  340
 /*      AITKEN SCHEME FOR INTERPOLATION OF FUNCTION VALUE            */ALI  350
 /*      FROM GIVEN EQUIDISTANT TABLE                                 */ALI  360
 /*                                                                   */ALI  370
 /*********************************************************************/ALI  380
    ENTRY (XST,DX,Y,DIM,ORDER,EPS,XVAL,YVAL),.                          ALI  390
    SW   ='E',.                                                         ALI  400
    Z1   =XST,.                        /*EQUIDISTANT ARGUMENTS        */ALI  410
    Z2   =DX,.                                                          ALI  420
    J    =1,.                                                           ALI  430
    A,ARG(1)=Z1,.                                                       ALI  440
    IF Z2= 0                                                            ALI  450
    THEN GO TO COM,.                                                    ALI  460
    J    =MAX(1,(XVAL-Z1)/Z2+1.5),.    /*COMPUTE STARTING SUBSCRIPT J */ALI  470
    J    =MIN(DIM,J),.                                                  ALI  480
    A,ARG(1)=Z1+FLOAT(J-1)*Z2,.                                         ALI  490
 COM..                                                                  ALI  500
    ERROR='2',.                                                         ALI  510
    XS   =XVAL,.                                                        ALI  520
    DIMS =DIM,.                                                         ALI  530
    N    =MIN(DIMS,ORDER),.                                             ALI  540
    DELT1,JL,JR=0,.                                                     ALI  550
    VALI1,VAL(1)=Y(J),.                                                 ALI  560
    FACT =XS-A,.                                                        ALI  570
    DIST1=ABS(FACT),.                                                   ALI  580
    N    =MAX(N,1),.                                                    ALI  590
         DO I =2 TO N,.                /*TABLE SELECTION              */ALI  600
         JJR  =J+JR,.                  /*TEST IF SUBSCRIPT IS GREATER */ALI  610
         IF JJR GE DIMS                /*THAN DIM OR LESS THAN ONE    */ALI  620
         THEN GO TO LAB2,.                                              ALI  630
         JJL  =J-JL,.                                                   ALI  640
         IF JJL LE 1                                                    ALI  650
         THEN GO TO LAB3,.                                              ALI  660
         IF SW= 'E'                                                     ALI  670
         THEN A    =-FACT*Z2,.         /*A=(ARG(I-1)-XVAL)*DX         */ALI  680
         ELSE A    =ABS(X(JJR+1)-XS)                                    ALI  690
              -ABS(X(JJL-1)-XS),.                                       ALI  700
         IF A LE 0                     /*TEST IF THE NEXT STEP IS TO  */ALI  710
         THEN GO TO LAB3,.             /*THE RIGHT OR TO THE LEFT     */ALI  720
 LAB2..                                /*STEP TO THE LEFT             */ALI  730
         JL   =JL+1,.                                                   ALI  740
         K    =J-JL,.                                                   ALI  750
         GO TO CONT,.                                                   ALI  760
 LAB3..                                /*STEP TO THE RIGHT            */ALI  770
         JR   =JR+1,.                                                   ALI  780
         K    =J+JR,.                                                   ALI  790
 CONT..                                                                 ALI  800
         IF SW= 'E'                                                     ALI  810
         THEN A    =Z1+FLOAT(K-1)*Z2,.                                  ALI  820
         ELSE A    =X(K),.                                              ALI  830
         FACT =XS-A,.                                                   ALI  840
         IF SW='M'                                                      ALI  850
         THEN DO,.                                                      ALI  860
              DIST =ABS(FACT),.                                         ALI  870
              IF DIST LT DIST1                                          ALI  880
              THEN GO TO IDENT,.       /*ARGUMENTS NOT MONOTONIC      */ALI  890
              DIST1=DIST,.                                              ALI  900
              END,.                                                     ALI  910
         ARG(I)=A,.                                                     ALI  920
         VALI,VAL(I)=Y(K),.                                             ALI  930
              DO II     =1 TO I-1,.    /*COMPUTE VAL(I)               */ALI  940
              ARGI =ARG(II),.                                           ALI  950
              H    =ARGI-A,.                                            ALI  960
              IF H =0                                                   ALI  970
              THEN GO TO IDENT,.                                        ALI  980
              VALI =(VAL(II)*FACT-VALI                                  ALI  990
                   *(XS-ARGI))/H,.                                      ALI 1000
              END,.                                                     ALI 1010
         DELT2=ABS(VALI-VALI1),.                                        ALI 1020
         VALI1,VAL(I)=VALI,.                                            ALI 1030
         IF I GT 2                                                      ALI 1040
         THEN DO,.                                                      ALI 1050
              IF DELT2 LE EPS          /*TEST ON ACCURACY             */ALI 1060
              THEN GO TO STOP,.                                         ALI 1070
              IF I GE 5                /*SINGLE PRECISION VERSION  /*S*/ALI 1080
  /*          IF I GE 8                /*DOUBLE PRECISION VERSION  /*D*/ALI 1090
              THEN IF DELT2 GE DELT1   /*TEST ON OSCILLATION          */ALI 1100
              THEN GO TO OSCIL,.                                        ALI 1110
              END,.                                                     ALI 1120
         DELT1=DELT2,.                                                  ALI 1130
         END,.                         /*END OF AITKEN-LOOP           */ALI 1140
    I    =N,.                                                           ALI 1150
    GO TO RETURN,.                                                      ALI 1160
 OSCIL..                                                                ALI 1170
    ERROR='1',.                                                         ALI 1180
    GO TO IDENT1,.                                                      ALI 1190
 IDENT..                                                                ALI 1200
    ERROR='3',.                                                         ALI 1210
 IDENT1..                                                               ALI 1220
    I    =I-1,.                                                         ALI 1230
    GO TO RETURN,.                                                      ALI 1240
 STOP..                                                                 ALI 1250
    ERROR='0',.                                                         ALI 1260
 RETURN..                                                               ALI 1270
    YVAL =VAL(I),.                                                      ALI 1280
    END,.                              /*END OF PROCEDURE ALI         */ALI 1290
 AHIM..                                                                 AHI   10
 /*********************************************************************/AHI   20
 /*                                                                   */AHI   30
 /*      AITKEN HERMITE SCHEME FOR INTERPOLATION OF FUNCTION VALUE    */AHI   40
 /*      FROM GIVEN MONOTONIC TABLE                                   */AHI   50
 /*                                                                   */AHI   60
 /*********************************************************************/AHI   70
    PROCEDURE (X,Y,DY,DIM,ORDER,EPS,XVAL,YVAL),.                        AHI   80
    DECLARE                                                             AHI   90
         (DIM,DIMS,I,II,J,JJL,JJR,JL,JR,K,N,ORDER)                      AHI  100
         BINARY FIXED,                                                  AHI  110
         (X(*),Y(*),DY(*),ARG(MIN(DIM,ORDER)),VAL(2*MIN(DIM,ORDER)),    AHI  120
         EPS,XVAL,YVAL,XST,DX,A,D,DD,DELT1,DELT2,DIST,DIST1,H,          AHI  130
         H1,H2,VALI,VALI1,VALJ,VALJ1,XS,Y1,YS,Z1,Z2)                    AHI  140
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/AHI  150
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/AHI  160
         (ERROR EXTERNAL,SW)                                            AHI  170
         CHARACTER(1),.                                                 AHI  180
    SW   ='M',.                        /*MONOTONIC ARGUMENTS          */AHI  190
    J    =1,.                                                           AHI  200
    D    =1E75,.                                                        AHI  210
         DO I = 1 TO DIM,.             /*COMPUTE STARTING SUBSCRIPT J */AHI  220
         DD   =ABS(XVAL-X(I)),.                                         AHI  230
         IF DD LE D                                                     AHI  240
         THEN DO,.                                                      AHI  250
              D    =DD,.                                                AHI  260
              J    =I,.                                                 AHI  270
              END,.                                                     AHI  280
         END,.                                                          AHI  290
    ARG(1)=X(J),.                                                       AHI  300
    GO TO COM,.                                                         AHI  310
 AHIE..                                                                 AHI  320
 /*********************************************************************/AHI  330
 /*                                                                   */AHI  340
 /*      AITKEN HERMITE SCHEME FOR INTERPOLATION OF FUNCTION VALUE    */AHI  350
 /*      FROM GIVEN EQUIDISTANT TABLE                                 */AHI  360
 /*                                                                   */AHI  370
 /*********************************************************************/AHI  380
    ENTRY (XST,DX,Y,DY,DIM,ORDER,EPS,XVAL,YVAL),.                       AHI  390
    SW   ='E',.                                                         AHI  400
    Z1   =XST,.                        /*EQUIDISTANT ARGUMENTS        */AHI  410
    Z2   =DX,.                                                          AHI  420
    J    =1,.                                                           AHI  430
    ARG(1)=Z1,.                                                         AHI  440
    IF Z2= 0                                                            AHI  450
    THEN GO TO COM,.                                                    AHI  460
    J    =MAX(1,(XVAL-Z1)/Z2+1.5),.    /*COMPUTE STARTING SUBSCRIPT J */AHI  470
    J    =MIN(DIM,J),.                                                  AHI  480
    ARG(1)=Z1+FLOAT(J-1)*Z2,.                                           AHI  490
 COM..                                                                  AHI  500
    ERROR='2',.                                                         AHI  510
    XS   =XVAL,.                                                        AHI  520
    YS   =YVAL,.                                                        AHI  530
    DIMS =DIM,.                                                         AHI  540
    N    =MIN(DIMS,ORDER),.                                             AHI  550
    JL,JR=0,.                                                           AHI  560
    VALI,VAL(1)=Y(J),.                                                  AHI  570
    VALJ,VAL(2)=DY(J),.                                                 AHI  580
    H2   =XS-ARG(1),.                                                   AHI  590
    DIST1=ABS(H2),.                                                     AHI  600
    IF N LE 1                                                           AHI  610
    THEN DO,.                                                           AHI  620
         IF N = 1                                                       AHI  630
         THEN VAL(1)=VAL(I)+VAL(J)*H2,.                                 AHI  640
         ELSE VAL(1)=YS,.                                               AHI  650
         GO TO RETURN,.                                                 AHI  660
         END,.                                                          AHI  670
         DO I =2 TO N,.                /*TABLE SELECTION              */AHI  680
         JJR  =J+JR,.                                                   AHI  690
         IF JJR GE DIMS                                                 AHI  700
         THEN GO TO LAB2,.                                              AHI  710
         JJL  =J-JL,.                                                   AHI  720
         IF JJL LE 1                                                    AHI  730
         THEN GO TO LAB3,.                                              AHI  740
         IF SW= 'E'                                                     AHI  750
         THEN A    =(ARG(I-1)-XS)*Z2,. /*A=(ARG(I-1)-XVAL)*DX         */AHI  760
         ELSE A    =ABS(X(JJR+1)-XS)                                    AHI  770
              -ABS(X(JJL-1)-XS),.                                       AHI  780
         IF A LE 0                                                      AHI  790
         THEN GO TO LAB3,.                                              AHI  800
 LAB2..                                                                 AHI  810
         JL   =JL+1,.                  /*STEP TO THE LEFT             */AHI  820
         K    =J-JL,.                                                   AHI  830
         GO TO CONT,.                                                   AHI  840
 LAB3..                                                                 AHI  850
         JR   =JR+1,.                  /*STEP TO THE RIGHT            */AHI  860
         K    =J+JR,.                                                   AHI  870
 CONT..                                                                 AHI  880
         IF SW= 'E'                                                     AHI  890
         THEN A    =Z1+FLOAT(K-1)*Z2,.                                  AHI  900
         ELSE DO,.                                                      AHI  910
              A    =X(K),.                                              AHI  920
              DIST =ABS(XS-A),.                                         AHI  930
              IF DIST LT DIST1                                          AHI  940
              THEN GO TO IDENT,.       /*ARGUMENTS NOT MONOTONIC      */AHI  950
              DIST1=DIST,.                                              AHI  960
              END,.                                                     AHI  970
         II   =I+I,.                                                    AHI  980
         VALJ1=DY(K),.                 /*VAL(2*I)=DY(K)               */AHI  990
         VALI1=Y(K),.                  /*VAL(2*I-1)=Y(K)              */AHI 1000
         ARG(I)=A,.                                                     AHI 1010
         VAL(II-3)=VALI+VALJ*H2,.                                       AHI 1020
         H1   =H2,.                                                     AHI 1030
         H2   =XS-A,.                                                   AHI 1040
         H    =H1-H2,.                                                  AHI 1050
         IF H = 0                                                       AHI 1060
         THEN GO TO IDENT,.            /*TWO IDENTICAL ARGUMENTS      */AHI 1070
         VAL(II-2)=VALI+(VALI1                                          AHI 1080
              -VALI)*H1/H,.                                             AHI 1090
         VALI =VALI1,.                                                  AHI 1100
         VALJ =VALJ1,.                                                  AHI 1110
         END,.                         /*END OF TABLE SELECTION       */AHI 1120
    VAL(II-1)=VALI+VALJ*H2,.                                            AHI 1130
    DELT2=0,.                          /*PREPARE AITKEN-SCHEME        */AHI 1140
    Y1   =VAL(1),.                                                      AHI 1150
         DO I = 1 TO N+N-2,.           /*START AITKEN-LOOP            */AHI 1160
         YS   =Y1,.                                                     AHI 1170
         DELT1=DELT2,.                                                  AHI 1180
         H1   =ARG((I+3)/2),.                                           AHI 1190
         Y1   =VAL(I+1),.                                               AHI 1200
              DO K = I TO 1 BY -1,.                                     AHI 1210
              H2   =ARG((K+1)/2),.                                      AHI 1220
              H    =H2-H1,.                                             AHI 1230
              IF H = 0                 /*COMPUTE DIAGONALS OF AITKEN- */AHI 1240
              THEN GO TO IDENT,.       /*SCHEME                       */AHI 1250
              Y1,VAL(K)=(VAL(K)*(XS-H1)                                 AHI 1260
                   -Y1*(XS-H2))/H,.                                     AHI 1270
              END,.                                                     AHI 1280
         DELT2=ABS(YS-Y1),.            /*TEST ON ACCURACY             */AHI 1290
         IF DELT2 LE EPS                                                AHI 1300
         THEN GO TO STOP,.                                              AHI 1310
         IF I GE 5                     /*SINGLE PRECISION VERSION  /*S*/AHI 1320
  /*     IF I GE 8                     /*DOUBLE PRECISION VERSION  /*D*/AHI 1330
         THEN IF DELT2 GE DELT1                                         AHI 1340
         THEN GO TO OSCIL,.                                             AHI 1350
         END,.                         /*END OF AITKEN-LOOP           */AHI 1360
    GO TO RETURN,.                                                      AHI 1370
 OSCIL..                               /*DELT2 STARTS OSCILLATING     */AHI 1380
    ERROR='1',.                                                         AHI 1390
    VAL(1)=YS,.                                                         AHI 1400
    GO TO RETURN,.                                                      AHI 1410
 IDENT..                                                                AHI 1420
    VAL(1)=YS,.                                                         AHI 1430
    ERROR='3',.                                                         AHI 1440
    GO TO RETURN,.                                                      AHI 1450
 STOP..                                                                 AHI 1460
    ERROR='0',.                                                         AHI 1470
 RETURN..                                                               AHI 1480
    YVAL =VAL(1),.                                                      AHI 1490
    END,.                              /*END OF PROCEDURE AHI         */AHI 1500
 ACFM..                                                                 ACFI  10
 /*********************************************************************/ACFI  20
 /*                                                                   */ACFI  30
 /*      CONTINUED FRACTION SCHEME FOR INTERPOLATION OF FUNCTION VALUE*/ACFI  40
 /*      FROM GIVEN MONOTONIC TABLE                                   */ACFI  50
 /*                                                                   */ACFI  60
 /*********************************************************************/ACFI  70
    PROCEDURE (X,Y,DIM,ORDER,EPS,XVAL,YVAL),.                           ACFI  80
    DECLARE                                                             ACFI  90
         (DIM,I,J,K,N,II,III,JL,JR,JJL,JJR,DIMS,ORDER)                  ACFI 100
         BINARY FIXED,                                                  ACFI 110
         (X(*),Y(*),ARG(MIN(DIM,ORDER)),VAL(MIN(DIM,ORDER)),XVAL,A1,    ACFI 120
         YVAL,XST,DX,EPS,XS,Z1,Z2,D,DD,VALI,ARGI,A,DIST,DIST1,H,DELT1,  ACFI 130
         DELT2,ARGJ,P1,P2,P3,Q1,Q2,Q3,ZS,YS,ARGI1,VALI1,EPS1)           ACFI 140
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/ACFI 150
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/ACFI 160
         (ERROR EXTERNAL,SW)                                            ACFI 170
         CHARACTER (1),.                                                ACFI 180
    SW   ='M',.                        /*MONOTONIC ARGUMENTS          */ACFI 190
    J    =1,.                                                           ACFI 200
    D    =1E75,.                                                        ACFI 210
         DO I = 1 TO DIM,.                                              ACFI 220
         DD   =ABS(XVAL-X(I)),.                                         ACFI 230
         IF DD LE D                                                     ACFI 240
         THEN DO,.                                                      ACFI 250
              D    =DD,.                                                ACFI 260
              J    =I,.                                                 ACFI 270
              END,.                                                     ACFI 280
         END,.                                                          ACFI 290
    ARGI,ARG(1)=X(J),.                                                  ACFI 300
    GO TO COM,.                                                         ACFI 310
 ACFE..                                                                 ACFI 320
 /*********************************************************************/ACFI 330
 /*                                                                   */ACFI 340
 /*      CONTINUED FRACTION SCHEME FOR INTERPOLATION OF FUNCTION VALUE*/ACFI 350
 /*      FROM GIVEN EQUIDISTANT TABLE                                 */ACFI 360
 /*                                                                   */ACFI 370
 /*********************************************************************/ACFI 380
    ENTRY (XST,DX,Y,DIM,ORDER,EPS,XVAL,YVAL),.                          ACFI 390
    SW   ='E',.                                                         ACFI 400
    Z1   =XST,.                                                         ACFI 410
    Z2   =DX,.                                                          ACFI 420
    J    =1,.                                                           ACFI 430
    ARGI,ARG(1)=Z1,.                                                    ACFI 440
    IF Z2= 0                                                            ACFI 450
    THEN GO TO COM,.                                                    ACFI 460
    J    =MAX(1,(XVAL-Z1)/Z2+1.5),.    /*COMPUTE STARTING SUBSCRIPT J */ACFI 470
    J    =MIN(DIM,J),.                                                  ACFI 480
    ARGI,ARG(1)=Z1+FLOAT(J-1)*Z2,.                                      ACFI 490
 COM..                                                                  ACFI 500
    EPS1 =1E-6,.                       /*SINGLE PRECISION VERSION  /*S*/ACFI 510
  /*EPS1 =1E-13,.                      /*DOUBLE PRECISION VERSION  /*D*/ACFI 520
    ERROR='2',.                                                         ACFI 530
    XS   =XVAL,.                                                        ACFI 540
    DIMS =DIM,.                                                         ACFI 550
    N    =MIN(DIMS,ORDER),.                                             ACFI 560
    Q2,DELT2,JL,JR=0,.                                                  ACFI 570
    P3,YS,VAL(1)=Y(J),.                                                 ACFI 580
    P2,Q3=1,.                                                           ACFI 590
    A1   =XS-ARGI,.                                                     ACFI 600
    DIST1=ABS(A1),.                                                     ACFI 610
         DO I = 2 TO N,.               /*START TABLE SELECTION        */ACFI 620
         JJR  =J+JR,.                                                   ACFI 630
         IF JJR GE DIMS                /*TABLE SELECTION              */ACFI 640
         THEN GO TO LAB2,.                                              ACFI 650
         JJL  =J-JL,.                                                   ACFI 660
         IF JJL LE 1                                                    ACFI 670
         THEN GO TO LAB3,.                                              ACFI 680
         IF SW= 'E'                                                     ACFI 690
         THEN A    =-A1*Z2,.           /*A=(ARG(I-1)-XVAL)*DX         */ACFI 700
         ELSE A    =ABS(X(JJR+1)                                        ACFI 710
              -XS)-ABS(X(JJL                                            ACFI 720
              -1)-XS),.                                                 ACFI 730
         IF A LE 0                                                      ACFI 740
         THEN GO TO LAB3,.                                              ACFI 750
 LAB2..                                                                 ACFI 760
         JL   =JL+1,.                  /*STEP TO THE LEFT             */ACFI 770
         K    =J-JL,.                                                   ACFI 780
         GO TO CONT,.                                                   ACFI 790
 LAB3..                                                                 ACFI 800
         JR   =JR+1,.                  /*STEP TO THE RIGHT            */ACFI 810
         K    =J+JR,.                                                   ACFI 820
 CONT..                                                                 ACFI 830
         IF SW= 'E'                                                     ACFI 840
         THEN A    =Z1+FLOAT(K-1)*Z2,.                                  ACFI 850
         ELSE A    =X(K),.                                              ACFI 860
         A1   =XS-A,.                                                   ACFI 870
         IF SW='M'                                                      ACFI 880
         THEN DO,.                                                      ACFI 890
              DIST =ABS(A1),.                                           ACFI 900
              IF DIST LT DIST1                                          ACFI 910
              THEN GO TO IDENT,.       /*ARGUMENTS NOT MONOTONIC      */ACFI 920
              DIST1=DIST,.                                              ACFI 930
              END,.                                                     ACFI 940
         ARG(I)=A,.                                                     ACFI 950
         VAL(I)=Y(K),.                                                  ACFI 960
         END,.                         /*END OF TABLE SELECTION       */ACFI 970
    A1   =XS-ARG(1),.                                                   ACFI 980
         DO I = 2 TO N,.               /*START INTERPOLATION LOOP     */ACFI 990
         II   =0,.                                                      ACFI1000
         P1   =P2,.                    /*MOVE PARAMETERS P2,P3,Q2,Q3  */ACFI1010
         Q1   =Q2,.                                                     ACFI1020
         P2   =P3,.                                                     ACFI1030
         Q2   =Q3,.                                                     ACFI1040
         ZS   =YS,.                                                     ACFI1050
         DELT1=DELT2,.                                                  ACFI1060
         ARGI =ARG(I),.                                                 ACFI1070
         VALI =VAL(I),.                                                 ACFI1080
 INVERT..                              /*COMPUTE INVERTED DIFFERENCES */ACFI1090
         ARGI1=ARGI,.                                                   ACFI1100
         VALI1=VALI,.                                                   ACFI1110
              DO J = 1 TO I-1,.                                         ACFI1120
              ARGJ =ARG(J),.                                            ACFI1130
              H    =VALI-VAL(J),.                                       ACFI1140
              IF ABS(H) LE ABS(VALI)*EPS1                               ACFI1150
              THEN DO,.                                                 ACFI1160
                   IF ARGI= ARGJ       /*ERROR RETURNS,IF TWO         */ACFI1170
                   THEN GO TO IDENT,.  /*IDENTICAL ARGUMENTS EXIST    */ACFI1180
                   IF J GE I-1                                          ACFI1190
                   THEN DO,.                                            ACFI1200
                        II   =II+1,.   /*INTERCHANGE ROW I WITH       */ACFI1210
                        III  =I+II,.   /*ROW I+II                     */ACFI1220
                        IF III GT N                                     ACFI1230
                        THEN GO TO RETURN,.                             ACFI1240
                        VALI =VAL(III),.                                ACFI1250
                        VAL(III)=VALI1,.                                ACFI1260
                        ARGI =ARG(III),.                                ACFI1270
                        ARG(III)=ARGI1,.                                ACFI1280
                        GO TO INVERT,.                                  ACFI1290
                        END,.                                           ACFI1300
                   VALI =1E75,.        /*VAL(I) = VAL(J), J LT I-1    */ACFI1310
                   END,.                                                ACFI1320
              ELSE VALI =(ARGI         /*VAL(I) NE VAL(J)             */ACFI1330
                   -ARGJ)/H,.                                           ACFI1340
              END,.                                                     ACFI1350
         P3   =VALI*P2+A1*P1,.         /*COMPUTE INVERTED DIFFERENCES */ACFI1360
         Q3   =VALI*Q2+A1*Q1,.         /*BY WALLIS-EULER SCHEME       */ACFI1370
         VAL(I)=VALI,.                 /*GENERATE NEW VAL(I),ARG(I)   */ACFI1380
         ARG(I)=ARGI,.                                                  ACFI1390
         A1   =XS-ARGI,.                                                ACFI1400
         IF Q3= 0                                                       ACFI1410
         THEN YS   =1E75,.             /*Q3 = 0                       */ACFI1420
         ELSE YS   =P3/Q3,.            /*Q3 NE 0                      */ACFI1430
         DELT2=ABS(ZS-YS),.                                             ACFI1440
         IF DELT2 LE EPS               /*TEST ON ACCURACY             */ACFI1450
         THEN GO TO STOP,.                                              ACFI1460
         IF I GE 8                     /*SINGLE PRECISION VERSION  /*S*/ACFI1470
  /*     IF I GE 10                    /*DOUBLE PRECISION VERSION  /*D*/ACFI1480
         THEN IF DELT2 GE DELT1                                         ACFI1490
         THEN GO TO OSCIL,.                                             ACFI1500
         END,.                         /*END OF INTERPOLATION LOOP    */ACFI1510
    GO TO RETURN,.                                                      ACFI1520
 IDENT..                               /*ARG(I) = ARG(J) FOR I NE J   */ACFI1530
    ERROR='3',.                                                         ACFI1540
    GO TO RETURN,.                                                      ACFI1550
 OSCIL..                               /*DELT2 STARTS OSCILLATING     */ACFI1560
    YS   =ZS,.                                                          ACFI1570
    ERROR='1',.                                                         ACFI1580
    GO TO RETURN,.                                                      ACFI1590
 STOP..                                                                 ACFI1600
    ERROR='0',.                                                         ACFI1610
 RETURN..                                                               ACFI1620
    YVAL =YS,.                                                          ACFI1630
    END,.                              /*END OF PROCEDURE ACFI        */ACFI1640
 FFT..                                                                  FFT   10
 /*********************************************************************/FFT   20
 /*                                                                   */FFT   30
 /*      FAST  FOURIER  TRANSFORM  FOR ANY ONE-DIMENSIONAL ARRAY      */FFT   40
 /*                                                                   */FFT   50
 /*********************************************************************/FFT   60
    PROCEDURE(A,M,OPT),.                                                FFT   70
    DECLARE                                                             FFT   80
         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */FFT   90
         (OPT,COPT) CHARACTER(1),                                       FFT  100
         (DA,DB,DC,DH,DS,RI)                                            FFT  110
         BINARY FLOAT(53),                                              FFT  120
         (A(*),S(2**(M-2)+1),AAR,                                       FFT  130
         AAI,ABR,ABI,AW,CO,SI)                                          FFT  140
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/FFT  150
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/FFT  160
         (I,ID,IND,IR,IST,                                              FFT  170
         J,K,L,M,N,NH,NQ)                                               FFT  180
         BINARY FIXED,.                                                 FFT  190
    IF M LT 2                          /*TEST SPECIFIED DIMENSION M   */FFT  200
    THEN DO ,.                                                          FFT  210
         ERROR='P',.                   /*P MEANS WRONG PARAMETER      */FFT  220
         GO TO RETURN,.                                                 FFT  230
         END,.                                                          FFT  240
    ERROR='0',.                        /*PRESET ERROR INDICATOR       */FFT  250
    COPT =OPT,.                                                         FFT  260
    N    =2**M,.                       /*INITIALIZE PARAMETERS        */FFT  270
    NH   =N/10B,.                                                       FFT  280
    NQ   =N/100B+2,.                                                    FFT  290
    L    =NQ+1,.                                                        FFT  300
    RI   =3.141592653589793E+00/NH,.   /*RI MEANS  2*PI/N             */FFT  310
    DA,S(1)=0,.                        /*SET SINE FOR 0 AND PI/2      */FFT  320
    DB,S(NQ-1)=1,.                                                      FFT  330
    DS,S(2)=SIN(RI),.                                                   FFT  340
    DC   =COS(RI),.                    /*******************************/FFT  350
         DO I =3 TO N/1000B+1,.        /*CALCULATE SINE TERMS         */FFT  360
         RI   =DC*DB,.                 /*BETWEEN  0  AND  PI/2        */FFT  370
         S(L-I),DH=RI-DA,.             /*******************************/FFT  380
         DA   =DB,.                                                     FFT  390
         DB   =RI+DH,.                 /*CALCULATION IS DONE USING    */FFT  400
         S(I) =DB*DS,.                 /*DOUBLE PRECISION ARITHMETIC  */FFT  410
         END,.                                                          FFT  420
    IF COPT= '2'                       /*'2' MEANS CALCULATION OF     */FFT  430
    THEN GO TO REAL,.                  /*REAL FOURIER SERIES          */FFT  440
    IF COPT= '3'                       /*'3' MEANS CALCULATION OF     */FFT  450
    THEN GO TO INV,.                   /*COMPLEX FOURIER SERIES       */FFT  460
    AW   =1/NH,.                                                        FFT  470
         DO I =1 TO N,.                /*PREPARE VECTOR A FOR FINITE  */FFT  480
         A(I) =A(I)*AW,.               /*FOURIER TRANSFORM            */FFT  490
         END,.                         /*******************************/FFT  500
 INV..                                 /*REORDER INITIAL TERMS A(I)   */FFT  510
    J    =1,.                          /*BY BIT REVERSAL TECHNIQUE    */FFT  520
         DO I =1 TO N BY 2,.           /*******************************/FFT  530
         IF J GT I                     /*IS BIT REVERSAL GREATER THAN */FFT  540
         THEN DO,.                     /*INIT. BINARY REPRESENTATION  */FFT  550
              AAR  =A(J),.                                              FFT  560
              AAI  =A(J+1),.           /*INTERCHANGE A(I) WITH A(J)   */FFT  570
              A(J) =A(I),.             /*AND  A(I+1)  WITH  A(J+1)    */FFT  580
              A(J+1)=A(I+1),.                                           FFT  590
              A(I) =AAR,.                                               FFT  600
              A(I+1)=AAI,.                                              FFT  610
              END,.                                                     FFT  620
         K    =NH,.                                                     FFT  630
              DO WHILE (J GT K),.      /*UPDATE  J  AND  K            */FFT  640
              J    =J-K,.                                               FFT  650
              K    =K/10B,.                                             FFT  660
              END,.                                                     FFT  670
         J    =J+K,.                   /*COMPUTE NEW BIT REVERSAL     */FFT  680
         END,.                                                          FFT  690
    IR,I =2,.                                                           FFT  700
    ID   =NH,.                         /*******************************/FFT  710
 CPLX..                                /*COMPLEX FOURIER TRANSFORM    */FFT  720
                                       /*WITH  N/2  ELEMENTS          */FFT  730
    IST  =I+I,.                        /*******************************/FFT  740
    IND  =1,.                                                           FFT  750
         DO J =1 TO I BY 2,.                                            FFT  760
         SI   =-S(IND),.               /*STORE SINE VALUES IN SI      */FFT  770
         IF COPT= '3'                  /*CHANGE SIGN IN CASE OF       */FFT  780
         THEN SI   =-SI,.              /*FOURIER SERIES               */FFT  790
         CO   =S(NQ-IND),.             /*STORE COSINE VALUES IN CO    */FFT  800
         IF J GE IR                                                     FFT  810
         THEN DO,.                     /*MODIFY INDEX IND OF THE      */FFT  820
              IND  =IND-ID,.           /*SINE VECTOR S                */FFT  830
              CO   =-CO,.              /*COS(PI/2+B) = -SIN(B)        */FFT  840
              END,.                                                     FFT  850
         ELSE IND  =IND+ID,.                                            FFT  860
                                       /*EXECUTE TRANSFORMATION-LOOP  */FFT  870
              DO K =J TO N BY IST,.                                     FFT  880
              L    =K+I,.                                               FFT  890
              AAR  =CO*A(L)-SI*A(L+1),.                                 FFT  900
              AAI  =CO*A(L+1)+SI*A(L),.                                 FFT  910
              A(L) =A(K)-AAR,.         /*MODIFY AND RESTORE ELEMENTS  */FFT  920
              A(L+1)=A(K+1)-AAI,.                                       FFT  930
              A(K) =A(K)+AAR,.                                          FFT  940
              A(K+1)=A(K+1)+AAI,.                                       FFT  950
              END,.                                                     FFT  960
         END,.                                                          FFT  970
    IR   =I+1,.                        /*UPTATE PARAMETERS            */FFT  980
    I    =IST,.                                                         FFT  990
    ID   =ID/10B,.                                                      FFT 1000
    IF I LE NH                                                          FFT 1010
    THEN GO TO CPLX,.                  /*END OF OUTER LOOP            */FFT 1020
    IF COPT= '1'                       /*'1'  AND  '3'  MEAN COMPLEX  */FFT 1030
    THEN GO TO RETURN,.                /*FOURIER CALCULATIONS         */FFT 1040
    IF COPT= '3'                                                        FFT 1050
    THEN GO TO RETURN,.                /*******************************/FFT 1060
 REAL..                                /*REAL VALUES FROM (FOR)       */FFT 1070
    I    =1,.                          /*COMPLEX FOURIER TRANSFORM    */FFT 1080
         DO K =3 TO NH-1 BY 2,.        /*******************************/FFT 1090
         J    =N-K+2,.                                                  FFT 1100
         AAR  =A(K)  +A(J),.                                            FFT 1110
         AAI  =A(K+1)-A(J+1),.                                          FFT 1120
         ABR  =A(K+1)+A(J+1),.                                          FFT 1130
         ABI  =A(J)  -A(K),.                                            FFT 1140
         I    =I+1,.                                                    FFT 1150
         SI   =S(I),.                  /*STORE SINE AND COSINE        */FFT 1160
         CO   =S(NQ-I),.                                                FFT 1170
         AW   = ABR*CO+ABI*SI,.                                         FFT 1180
         ABI  =-ABI*CO+ABR*SI,.                                         FFT 1190
         A(K) =( AAR+AW )*1E-1B,.                                       FFT 1200
         A(K+1)=(-AAI+ABI)*1E-1B,.                                      FFT 1210
         A(J) =( AAR-AW )*1E-1B,.                                       FFT 1220
         A(J+1)=( AAI+ABI)*1E-1B,.                                      FFT 1230
         END,.                                                          FFT 1240
    AW   =A(1),.                                                        FFT 1250
    IF COPT= '2'                       /*PREPARE  A(1),A(2)  FOR      */FFT 1260
    THEN DO,.                          /*CALCULATION OF REAL FOURIER  */FFT 1270
         A(1) =(AW+A(N+1)),.           /*SERIES                       */FFT 1280
         A(2) =(AW-A(N+1)),.                                            FFT 1290
         COPT = '3',.                  /*CHANGE INTERNAL OPTION TERM  */FFT 1300
         GO TO INV,.                                                    FFT 1310
         END,.                                                          FFT 1320
    A(1) =(AW+A(2))*1E-1B,.            /*CALCULATE VALUES             */FFT 1330
    A(N+1)=(AW-A(2))*1E-1B,.           /*A(1),A(2),A(N+1),A(N+2)      */FFT 1340
    A(2) =0,.                                                           FFT 1350
    A(N+2)=0,.                                                          FFT 1360
 RETURN..                                                               FFT 1370
    END,.                              /*END OF PROCEDURE FFT         */FFT 1380
 FFTM..                                                                 FFTM  10
 /*********************************************************************/FFTM  20
 /*                                                                   */FFTM  30
 /*      FAST  FOURIER  TRANSFORM  FOR  MULTI-DIMENSIONAL  ARRAY      */FFTM  40
 /*                                                                   */FFTM  50
 /*********************************************************************/FFTM  60
    PROCEDURE(A,M,NDIM,OPT),.                                           FFTM  70
    DECLARE                                                             FFTM  80
         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */FFTM  90
         OPT CHARACTER(1),                                              FFTM 100
         (A(*),PI,RI,RTH,TR,T2R,T2I,                                    FFTM 110
         T3R,T3I,T4R,T4I,U1R,U1I,U2R,                                   FFTM 120
         U2I,U3R,U3I,U4R,U4I,WR,WI,                                     FFTM 130
         W2R,W2I,W3R,W3I)                                               FFTM 140
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/FFTM 150
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/FFTM 160
         (I,IND,J,JM,K,K2,K3,K4,KDIF,                                   FFTM 170
         KINC,KM,KMIN,L,LJ,LMAX,M(*),                                   FFTM 180
         MM,MMAX,N(NDIM),NA,NAD,NB,                                     FFTM 190
         NBH,NDIM,NIN,NT)                                               FFTM 200
         BINARY FIXED,.                                                 FFTM 210
    ERROR='P',.                        /*P MEANS WRONG PARAMETER      */FFTM 220
    IF NDIM LT 1                       /*TEST NUMBER OF DIMENSIONS    */FFTM 230
    THEN GO TO RETURN,.                                                 FFTM 240
    NT   =2,.                                                           FFTM 250
         DO I =1 TO NDIM,.                                              FFTM 260
         N(I),K=10B**M(I),.            /*COMPUTE AND TEST DIMENSION   */FFTM 270
         IF K LT 1                                                      FFTM 280
         THEN GO TO RETURN,.           /*CALCULATE TOTAL NUMBER OF    */FFTM 290
         NT   =NT*K,.                  /*ELEMENTS                     */FFTM 300
         END,.                                                          FFTM 310
                                       /*COMPUTE  PI  AND  RTH        */FFTM 320
    PI   =3.141592653589793E+00,.                                       FFTM 330
    RTH  =7.071067811865475E-01,.      /*RTH MEANS  SQRT(2)/2         */FFTM 340
    NA   =2,.                          /*******************************/FFTM 350
         DO IND =NDIM TO 1 BY -1,.     /*LOOP FOR EACH DIMENSION      */FFTM 360
         NIN  =N(IND),.                /*******************************/FFTM 370
         NB   =NA*NIN,.                                                 FFTM 380
         IF NIN= 1                                                      FFTM 390
         THEN GO TO MULTI,.                                             FFTM 400
         NBH  =NB/10B,.                                                 FFTM 410
         J    =1,.                     /*******************************/FFTM 420
              DO I =1 TO NB BY NA,.    /*BIT REVERSAL TECHNIQUE       */FFTM 430
              IF J LE I                /*******************************/FFTM 440
              THEN GO TO MODI,.                                         FFTM 450
              KM   =I+NA-2,.                                            FFTM 460
              JM   =J-I,.                                               FFTM 470
                   DO K =I TO KM BY 2,.                                 FFTM 480
                        DO L =K TO NT BY NB,.                           FFTM 490
                        LJ   =L+JM,.                                    FFTM 500
                        WR   =A(L),.   /*INTERCHANGE A(L) WITH A(LJ)  */FFTM 510
                        WI   =A(L+1),. /*AND  A(L+1)  WITH  A(LJ+1)   */FFTM 520
                        A(L) =A(LJ),.                                   FFTM 530
                        A(L+1)=A(LJ+1),.                                FFTM 540
                        A(LJ)=WR,.                                      FFTM 550
                        A(LJ+1)=WI,.                                    FFTM 560
                        END,.                                           FFTM 570
                   END,.                                                FFTM 580
 MODI..                                /*MODIFY PARAMETER  J  AND  K  */FFTM 590
              K    =NBH,.                                               FFTM 600
                   DO WHILE (J GT K),.                                  FFTM 610
                   J    =J-K,.                                          FFTM 620
                   K    =K/10B,.                                        FFTM 630
                   END,.                                                FFTM 640
              J    =J+K,.              /*COMPUTE NEW BIT REVERSAL     */FFTM 650
              END,.                                                     FFTM 660
         NAD  =NA+NA,.                                                  FFTM 670
 ODD..                                 /*TEST FOR ODD M(IND)          */FFTM 680
         IF NIN LT 2                                                    FFTM 690
         THEN GO TO LEN4,.             /*M(IND) IS EVEN,    NIN = 1   */FFTM 700
         IF NIN= 2                                                      FFTM 710
         THEN GO TO LEN2,.             /*M(IND) IS ODD,     NIN = 2   */FFTM 720
         NIN  =NIN/100B,.                                               FFTM 730
         GO TO ODD,.                   /*******************************/FFTM 740
 LEN2..                                /*TRANSFORM WITH LENGTH 2      */FFTM 750
              DO I =1 TO NA BY 2,.     /*******************************/FFTM 760
                   DO K =I TO NT BY NAD,.                               FFTM 770
                   L    =K+NA,.                                         FFTM 780
                   WR   =A(L),.                                         FFTM 790
                   WI   =A(L+1),.                                       FFTM 800
                   A(L) =A(K)-WR,.     /*MODIFY AND RESTORE ELEMENTS  */FFTM 810
                   A(L+1)=A(K+1)-WI,.                                   FFTM 820
                   A(K) =A(K)+WR,.                                      FFTM 830
                   A(K+1)=A(K+1)+WI,.                                   FFTM 840
                   END,.                                                FFTM 850
              END,.                    /*******************************/FFTM 860
 LEN4..                                /*FAST  FOURIER  TRANSFORMS    */FFTM 870
         MMAX =NA,.                    /*WITH  LENGTH  4              */FFTM 880
 MAIN..                                /*******************************/FFTM 890
         IF MMAX GE NBH                                                 FFTM 900
         THEN GO TO MULTI,.                                             FFTM 910
         MM   =MMAX+MMAX,.                                              FFTM 920
         LMAX =MAX(NAD,MMAX/10B),.                                      FFTM 930
              DO I =NA TO LMAX BY NAD,./*EXECUTE LOOP FOR CALCULATION */FFTM 940
              J    =I,.                /*OF ANGLES FOR SPECIFIC MMAX  */FFTM 950
              IF MMAX LE NA                                             FFTM 960
              THEN GO TO INITL,.                                        FFTM 970
              RI   =-PI*J/MM,.                                          FFTM 980
              IF OPT='1'                                                FFTM 990
              THEN RI   =-RI,.         /*CHANGE SIGN FOR CALCULATION  */FFTM1000
              WR   =COS(RI),.          /*OF FOURIER SERIES            */FFTM1010
              WI   =SIN(RI),.                                           FFTM1020
 DOUBLE..                                                               FFTM1030
              W2R  =WR*WR-WI*WI,.      /*COMPUTE COSINE AND SINE      */FFTM1040
              W2I  =WR*WI*10E+00B,.    /*FOR   2*RI   AND   3*RI      */FFTM1050
              W3R  =W2R*WR-W2I*WI,.                                     FFTM1060
              W3I  =W2R*WI+W2I*WR,.                                     FFTM1070
 INITL..                               /*INITIALIZE L AS INDEX FOR    */FFTM1080
              L    =1,.                /*MULTIDIMENSIONAL CALCULATIONS*/FFTM1090
 STRT..                                                                 FFTM1100
              IF MMAX= NA              /*COMPUTE START VALUE KMIN FOR */FFTM1110
              THEN KMIN =L,.           /*TRANSFORMATION LOOP          */FFTM1120
              ELSE KMIN =L+NIN*J,.                                      FFTM1130
              KDIF =NIN*MMAX,.                                          FFTM1140
 INCR..                                /*COMPUTE INCREMENT FOR THE    */FFTM1150
              KINC =KDIF*100B,.        /*TRANSFORMATION LOOP          */FFTM1160
                   DO K =KMIN TO NT BY KINC,.                           FFTM1170
                   K2   =K +KDIF,.                                      FFTM1180
                   K3   =K2+KDIF,.     /*K,K2,K3,K4  ARE PARAMETERS   */FFTM1190
                   K4   =K3+KDIF,.     /*FOR OPERATION WITH LENGTH 4  */FFTM1200
                   IF MMAX= NA         /*WITHOUT MULTIPLICATIONS      */FFTM1210
                   THEN DO,.                                            FFTM1220
                        U1R  =A(K)   +A(K2),.                           FFTM1230
                        U1I  =A(K+1) +A(K2+1),.                         FFTM1240
                        U2R  =A(K3)  +A(K4),.                           FFTM1250
                        U2I  =A(K3+1)+A(K4+1),.                         FFTM1260
                        U3R  =A(K)   -A(K2),.                           FFTM1270
                        U3I  =A(K+1) -A(K2+1),.                         FFTM1280
                        U4R  =A(K3+1)-A(K4+1),.                         FFTM1290
                        U4I  =A(K4)  -A(K3),.                           FFTM1300
                        END,.                                           FFTM1310
                   ELSE DO,.                                            FFTM1320
                        T2R  =W2R*A(K2)  -W2I*A(K2+1),.                 FFTM1330
                        T2I  =W2R*A(K2+1)+W2I*A(K2),.                   FFTM1340
                        T3R  =WR *A(K3)  -WI *A(K3+1),.                 FFTM1350
                        T3I  =WR *A(K3+1)+WI *A(K3),.                   FFTM1360
                        T4R  =W3R*A(K4)  -W3I*A(K4+1),.                 FFTM1370
                        T4I  =W3R*A(K4+1)+W3I*A(K4),.                   FFTM1380
                        U1R  =A(K)  +T2R,.                              FFTM1390
                        U1I  =A(K+1)+T2I,.                              FFTM1400
                        U2R  =T3R   +T4R,.                              FFTM1410
                        U2I  =T3I   +T4I,.                              FFTM1420
                        U3R  =A(K)  -T2R,.                              FFTM1430
                        U3I  =A(K+1)-T2I,.                              FFTM1440
                        U4R  =T3I   -T4I,.                              FFTM1450
                        U4I  =T4R   -T3R,.                              FFTM1460
                        END,.                                           FFTM1470
                   IF OPT= '1'         /*IN CASE OF FOURIER SERIES    */FFTM1480
                   THEN DO,.                                            FFTM1490
                        U4R  =-U4R,.                                    FFTM1500
                        U4I  =-U4I,.                                    FFTM1510
                        END,.                                           FFTM1520
                   A(K) =U1R+U2R,.     /*COMPUTE AND STORE NEW VALUES */FFTM1530
                   A(K+1)=U1I+U2I,.                                     FFTM1540
                   A(K2)=U3R+U4R,.                                      FFTM1550
                   A(K2+1)=U3I+U4I,.                                    FFTM1560
                   A(K3)=U1R-U2R,.                                      FFTM1570
                   A(K3+1)=U1I-U2I,.                                    FFTM1580
                   A(K4)=U3R-U4R,.                                      FFTM1590
                   A(K4+1)=U3I-U4I,.                                    FFTM1600
                   END,.                                                FFTM1610
              KMIN =L+(KMIN-L)*100B,.  /*UPDATE KMIN, KDIF AND IF NEC-*/FFTM1620
              KDIF =KINC,.             /*ESSARY REPEAT TRANSFORMATION */FFTM1630
              IF KDIF LE NBH           /*LOOP IN ORDER TO GET FINAL   */FFTM1640
              THEN GO TO INCR,.        /*VALUES                       */FFTM1650
                                       /*                             */FFTM1660
              L    =L+2,.              /*MODIFY L AND -IF NECESSARY-  */FFTM1670
              IF L LT NA               /*START ANOTHER TRANSFORM      */FFTM1680
              THEN GO TO STRT,.                                         FFTM1690
                                       /*                             */FFTM1700
              J    =J+LMAX,.           /*MODIFY J AND -IF NECESSARY-  */FFTM1710
              IF J LE MMAX             /*THE ANGLE                    */FFTM1720
              THEN DO,.                                                 FFTM1730
                   TR   =WR,.          /*IF Z = COS(RI) + I*SIN(RI)   */FFTM1740
                   WR   =(TR+WI)*RTH,. /*THEN Z IS SUBSTITUTED BY     */FFTM1750
                   WI   =(WI-TR)*RTH,. /*Z  = Z * EXP(-PI/4 * I)      */FFTM1760
                   IF OPT= '1'                                          FFTM1770
                   THEN DO,.                                            FFTM1780
                        TR   =WR,.     /*Z IS SUBSTITUTED BY          */FFTM1790
                        WR   =-WI,.    /*Z  = Z * EXP(+PI/4 * I)      */FFTM1800
                        WI   =TR,.                                      FFTM1810
                        END,.                                           FFTM1820
                   GO TO DOUBLE,.                                       FFTM1830
                   END,.                                                FFTM1840
              END,.                                                     FFTM1850
         NIN  =3-NIN,.                 /*UPDATE NIN AND DOUBLE MMAX   */FFTM1860
         MMAX =MM,.                                                     FFTM1870
         GO TO MAIN,.                                                   FFTM1880
 MULTI..                                                                FFTM1890
         NA   =NB,.                                                     FFTM1900
         END,.                                                          FFTM1910
    ERROR='0',.                        /*SUCCESSFUL FOURIER TRANSFORM */FFTM1920
 RETURN..                                                               FFTM1930
    END,.                              /*END OF PROCEDURE FFTM        */FFTM1940
 APLL..                                                                 APLL  10
 /*********************************************************************/APLL  20
 /*                                                                   */APLL  30
 /*      SET UP NORMAL EQUATIONS FOR A LINEAR LEAST SQUARES           */APLL  40
 /*      FIT TO A GIVEN DISCRETE FUNCTION                             */APLL  50
 /*                                                                   */APLL  60
 /*********************************************************************/APLL  70
    PROCEDURE(FCT,N,IP,WORK),.                                          APLL  80
    DECLARE                                                             APLL  90
         FCT ENTRY,                                                     APLL 100
         (WORK(*),P(IP+1),A,WGT)                                        APLL 110
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/APLL 120
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/APLL 130
         (N,IP,LIP,IP1,I,J,K,L,M)                                       APLL 140
         BINARY FIXED,                                                  APLL 150
         ERROR EXTERNAL CHARACTER(1),.                                  APLL 160
    ERROR='0',.                        /*SUCCESSFUL OPERATION         */APLL 170
    LIP  =IP,.                                                          APLL 180
    IP1  =LIP+1,.                                                       APLL 190
    M    =IP1*(IP1+1)/2,.                                               APLL 200
         DO I =1 TO M,.                /*INIT. RIGHT HAND SIDE AND    */APLL 210
         WORK(I)=0,.                   /*COEFFICIENT MATRIX EQUAL ZERO*/APLL 220
         END,.                                                          APLL 230
    IF N GT 0                          /*TEST SPECIFIED DIMENSIONS    */APLL 240
    THEN IF LIP GT 0                                                    APLL 250
    THEN IF N GT LIP                                                    APLL 260
    THEN DO I =1 TO N,.                /*FOR I-TH ARGUMENT            */APLL 270
                                       /*PROVIDE VALUES OF GIVEN FCT.,*/APLL 280
         CALL FCT(I,N,LIP,P,WGT),.     /*WEIGHT AND FUNDAMENTAL FCT.  */APLL 290
         IF ERROR NE '0'                                                APLL 300
         THEN GO TO OUT,.              /*ERROR IN PROCEDURE FCT.      */APLL 310
         J    =0,.                                                      APLL 320
              DO K =1 TO IP1,.         /*COMPUTE COEFFICIENT MATRIX   */APLL 330
              A    =P(K)*WGT,.         /*AND RIGHT HAND SIDE          */APLL 340
                   DO L =1 TO K,.                                       APLL 350
                   J    =J+1,.                                          APLL 360
                   WORK(J)=WORK(J)+P(L)*A,.                             APLL 370
                   END,.                                                APLL 380
              END,.                                                     APLL 390
         END,.                                                          APLL 400
    ELSE ERROR='D',.                   /*ERROR IN SPECIFIED DIMENSIONS*/APLL 410
 OUT..                                                                  APLL 420
    END,.                              /*END OF PROCEDURE APLL        */APLL 430
 APC1..                                                                 APC   10
 /*********************************************************************/APC   20
 /*                                                                   */APC   30
 /*      SET UP NORMAL EQUATIONS OF WEIGHTED LEAST SQUARES FIT IN     */APC   40
 /*      TERMS OF CHEBYSHEV POLINOMIALS FOR A GIVEN DESCRETE FUNCTION */APC   50
 /*                                                                   */APC   60
 /*********************************************************************/APC   70
    PROCEDURE(X,Y,W,N,IP,X0,X1,WORK),.                                  APC   80
    DECLARE                                                             APC   90
         (X(*),Y(*),W(*),X0,X1,WORK(*),                                 APC  100
         A,B,C,TI,FI,SUM)                                               APC  110
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/APC  130
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/APC  120
         (N,IP,NN,LN,IP1,IPP,EP1,                                       APC  140
         EP,EPE,I,K,KK,L,LL)                                            APC  150
         BINARY FIXED,                                                  APC  160
         (TEST,ERROR EXTERNAL)CHARACTER(1),.                            APC  170
    TEST ='1',.                        /*WEIGHTS ARE GIVEN            */APC  180
    GO TO COMMON,.                                                      APC  190
 APC2..                                                                 APC  200
 /*********************************************************************/APC  210
 /*                                                                   */APC  220
 /*      SET UP NORMAL EQUATIONS OF LEAST SQUARES FIT IN TERMS OF     */APC  230
 /*      CHEBYCHEV POLYNOMIALS FOR A GIVEN DISCRETE FUNCTION          */APC  240
 /*                                                                   */APC  250
 /*********************************************************************/APC  260
    ENTRY(X,Y,N,IP,X0,X1,WORK),.                                        APC  270
    TEST ='2',.                        /*CONSTANT WEIGHTING ASSUMED   */APC  280
 COMMON..                                                               APC  290
    LN   =N,.                                                           APC  300
    NN   =LN+LN,.                                                       APC  310
    IPP  =IP+IP,.                                                       APC  320
    IP1  =IP+1,.                                                        APC  330
    EP   =(IP*IP1)/2,.                                                  APC  340
    EP1  =EP+1,.                                                        APC  350
    EPE  =EP+IP1,.                                                      APC  360
    ERROR='D',.                        /*PRESET ERROR INDICATOR       */APC  370
    IF LN GT 1                         /*TEST SPECIFIED DIMENSIONS    */APC  380
    THEN IF IP1 GE 1                                                    APC  390
    THEN IF LN GE IP1                                                   APC  400
    THEN DO,.                                                           APC  410
         A,B  =X(1),.                                                   APC  420
              DO I =2 TO N,.                                            APC  430
              C    =X(I),.                                              APC  440
              IF C LT A                                                 APC  450
              THEN A    =C,.           /*SET A TO INF(X(I))           */APC  460
              ELSE IF C GT B                                            APC  470
              THEN B    =C,.           /*SET B TO SUP(X(I))           */APC  480
              END,.                                                     APC  490
         X1   =B-A,.                                                    APC  500
         IF X1 LE 0                                                     APC  510
         THEN DO,.                                                      APC  520
              ERROR='A',.              /*ERROR RETURN FOR             */APC  530
              GO TO OUT,.              /*DEGENERATE ARGUMENT RANGE    */APC  540
              END,.                                                     APC  550
         X0   =-(A+B)/X1,.                                              APC  560
         X1   =2/X1,.                                                   APC  570
              DO I =1 TO IPP-1,        /*INIT. RIGHT HAND SIDE AND    */APC  580
                   EP1 TO EPE-1,.      /*WORKING STORAGE              */APC  590
              WORK(I)=0,.                                               APC  600
              END,.                                                     APC  610
         SUM  =0,.                     /*INIT. SQUARE SUM OF FCT.VAL. */APC  620
              DO I =1 TO LN,.                                           APC  630
              TI   =X1*X(I)+X0,.       /*TRANSFORM ARGUMENT TO (-1,1) */APC  640
              A    =1,.                                                 APC  650
              IF TEST='1'              /*SHOULD WEIGHTS BE USED, THEN */APC  660
              THEN A    =W(I),.        /*SET A TO I-TH WEIGHT         */APC  670
              B    =TI*A,.                                              APC  680
              FI   =Y(I),.             /*SET FI TO FUNCTION VALUE     */APC  690
              SUM  =SUM+FI*FI*A,.      /*UPDATE SQUARES SUM           */APC  700
              FI   =FI+FI,.                                             APC  710
                   DO L =1 TO IPP-1,.  /*UPDATE RIGHT HAND SIDE AND   */APC  720
                   C    =A,.           /*WORKING STORAGE              */APC  730
                   LL   =L,.                                            APC  740
 REP..                                                                  APC  750
                   WORK(LL)=WORK(LL)+C,.                                APC  760
                   IF LL LE IP                                          APC  770
                   THEN DO,.                                            APC  780
                        LL   =EP+LL,.                                   APC  790
                        C    =C*FI,.                                    APC  800
                        GO TO REP,.                                     APC  810
                        END,.                                           APC  820
                   C    =TI*B,.                                         APC  830
                   C    =C-A+C,.                                        APC  840
                   A    =B,.                                            APC  850
                   B    =C,.                                            APC  860
                   END,.                                                APC  870
              END,.                                                     APC  880
         LL   =EP1,.                                                    APC  890
              DO K =IPP TO 2 BY -2,.   /*COMPUTE COEFFICIENT MATRIX   */APC  900
              L    =1,.                                                 APC  910
              KK   =K,.                                                 APC  920
 STORE..                                                                APC  930
              LL   =LL-1,.                                              APC  940
              KK   =KK-1,.                                              APC  950
              WORK(LL)=WORK(KK)+WORK(L),.                               APC  960
              L    =L+1,.                                               APC  970
              IF KK GT L                                                APC  980
              THEN GO TO STORE,.                                        APC  990
              END,.                                                     APC 1000
         WORK(EPE)=SUM+SUM,.           /*INSERT SQUARE SUM OF FCT.VAL.*/APC 1010
         ERROR='0',.                   /*SUCCESSFUL OPERATION         */APC 1020
         END,.                                                          APC 1030
 OUT..                                                                  APC 1040
    END,.                              /*END OF PROCEDURE APC         */APC 1050
 ASN..                                                                  ASN   10
 /*********************************************************************/ASN   20
 /*                                                                   */ASN   30
 /*      SOLUTION OF NORMAL-EQUATIONS UP TO SPECIFIED ORDER           */ASN   40
 /*      OR PRECISION.                                                */ASN   50
 /*      ALL FITS OF SMALLER ORDER ARE CALCULATED OPTIONALLY.         */ASN   60
 /*                                                                   */ASN   70
 /*********************************************************************/ASN   80
    PROCEDURE(WORK,IP,IRES,OPT,EPS,ETA),.                               ASN   90
    DECLARE                                                             ASN  100
         S BINARY FLOAT(53),                                            ASN  110
         (WORK(*),EPS,ETA,TOL,TEST,                                     ASN  120
         AUX(IP),WE,Q,R)                                                ASN  130
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/ASN  140
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/ASN  150
         (IP,IP1,RS,DG,DDG,L,LL,                                        ASN  160
         EPE,LLL,DL,IPR,IRES,K,EP,                                      ASN  170
         I,II,LL1,DLK)                                                  ASN  180
         BINARY FIXED,                                                  ASN  190
         (OPT,CHECK,ERROR EXTERNAL)                                     ASN  200
         CHARACTER(1),.                                                 ASN  210
    IF ETA NE 0                        /*PRESET ERROR INDICATOR       */ASN  220
    THEN CHECK='A',.                   /*A= ACCURACY NOT REACHED      */ASN  230
    ELSE CHECK='0',.                   /*0= SUCCESSFUL OPERATION      */ASN  240
    IP1  =IP+1,.                                                        ASN  250
    IF IP1 LE 1                                                         ASN  260
    THEN DO,.                                                           ASN  270
         CHECK='D',.                   /*ERROR IN SPECIFIED DIMENSION */ASN  280
         GO TO OUT,.                                                    ASN  290
         END,.                                                          ASN  300
    EP   =IP*IP1/2,.                   /*SET UP ADDRESSING CONSTANTS  */ASN  310
    EPE  =EP+IP1,.                                                      ASN  320
    WE   =WORK(EPE),.                                                   ASN  330
    IF CHECK='A'                       /*SET TEST TO ABSOLUTE VALUE OF*/ASN  340
    THEN TEST =ABS(ETA*WE),.           /*SPEC. ACCURACY FOR WANTED FIT*/ASN  350
    IPR,LL=0,.                                                          ASN  360
    L,LL1=1,.                                                           ASN  370
                                       /*******************************/ASN  380
         DO I =1 TO IP,.               /*FACTORIZE GIVEN MATRIX       */ASN  390
         LL   =LL+I,.                  /*******************************/ASN  400
         K    =0,.                                                      ASN  410
 ITER..                                /*COMPUTE ELEMENTS OF I-TH ROW */ASN  420
         S    =0,.                                                      ASN  430
              DO II=LL1 TO LL-1,.      /*MODIFY ELEMENTS IN I-TH      */ASN  440
              S    =S+MULTIPLY(        /*ROW BY SCALAR PRODUCT OF     */ASN  450
                   WORK(II),           /*ELEMENTS OF FACTORIZATION    */ASN  460
                   WORK(L),53),.       /*IN ROW AND COLUMN CROSSING   */ASN  470
              L    =L+1,.              /*AT CURRENT ELEMENT           */ASN  480
              END,.                                                     ASN  490
         R    =WORK(L),.                                                ASN  500
         S    =R-S,.                                                    ASN  510
         IF L =LL                      /*TEST FOR LOSS OF SIGNIFICANCE*/ASN  520
         THEN DO,.                     /*IN PIVOTAL DIVISOR           */ASN  530
              IF S LE ABS(EPS*R)                                        ASN  540
              THEN DO,.                                                 ASN  550
                   CHECK='P',.         /*MARK LOSS OF SIGNIFICANCE    */ASN  560
                   GO TO SOL,.         /*BYPASS FURTHER FACTORIZATION */ASN  570
                   END,.                                                ASN  580
              Q,S  =SQRT(S),.          /*CALCULATE DIAGONAL ELEMENT   */ASN  590
              END,.                    /*OF FACTORIZATION             */ASN  600
         ELSE S    =S/Q,.                                               ASN  610
         WORK(L)=S,.                   /*STORE FINAL ELEMENT          */ASN  620
         K    =K+1,.                   /*OF FACTORIZATION             */ASN  630
         L    =L+K,.                                                    ASN  640
         IF K+I LE IP1                 /*TEST IF ALL ELEMENTS OF I-TH */ASN  650
         THEN GO TO ITER,.             /*ROW ARE COMPUTED             */ASN  660
         LL1,L=LL+1,.                                                   ASN  670
         WE   =WE-S*S,.                                                 ASN  680
         IPR  =IPR+1,.                                                  ASN  685
         AUX(I)=WE,.                   /*STORE SQUARESUM OF RESIDUALS */ASN  690
         IF CHECK='A'                  /*TEST ON SPECIFIED PRECISION  */ASN  700
         THEN IF WE LT TEST                                             ASN  710
         THEN DO,.                                                      ASN  720
              CHECK='0',.              /*SUCCESSFUL OPERATION         */ASN  730
              GO TO SOL,.              /*RESP. ETA ACCURACY REACHED   */ASN  740
              END,.                                                     ASN  750
         END,.                         /*END OF FACTORIZATION         */ASN  770
    IF OPT='F'                                                          ASN  780
    THEN GO TO OUT,.                                                    ASN  790
    LL   =EPE,.                        /*******************************/ASN  800
                                       /*COMPUTE LEAST SQUARE FIT(S)  */ASN  810
 SOL..                                 /*******************************/ASN  820
    RS   =EP+IPR,.                     /*INIT. ADDRESS RIGHT HAND SIDE*/ASN  830
    DG   =LL-1-IPR,.                   /*INIT. ADDRESS DIAGONAL TERM  */ASN  840
         DO I =IPR TO 1 BY -1,.                                         ASN  850
         Q    =WORK(DG),.              /*SET Q TO I-TH DIAGONAL TERM  */ASN  860
         R    =WORK(RS),.              /*SET R TO I-TH RIGHT HAND SIDE*/ASN  870
         WORK(RS)=AUX(I),.             /*INSERT I-TH RESIDUAL         */ASN  880
         RS   =RS-1,.                                                   ASN  890
         DG   =DG-I,.                                                   ASN  900
         LL,L =LL-1,.                                                   ASN  910
         K    =IPR-I,.                                                  ASN  920
         DL,DLK=IPR,.                                                   ASN  930
 REP..                                 /*CALCULATE THE I-TH ELEMENT   */ASN  940
         L,LLL=L-DL,.                  /*FOR THE HIGHEST FIT AND      */ASN  950
         DL,DLK=DL-1,.                 /*OPTIONALLY OF ALL LOWER FITS */ASN  960
         S    =0,.                                                      ASN  970
              DO II=L+K TO L+1 BY -1,. /*FORM SCALAR PRODUCTS NEEDED  */ASN  980
              S    =S+MULTIPLY(        /*WITH BACK SUBSTITUTION       */ASN  990
                   WORK(LLL),                                           ASN 1000
                   WORK(II),53),.                                       ASN 1010
              LLL  =LLL-DLK,.                                           ASN 1020
              DLK  =DLK-1,.                                             ASN 1030
              END,.                                                     ASN 1040
         WORK(L)=(R-S)/Q,.                                              ASN 1050
         K    =K-1,.                                                    ASN 1060
         IF OPT='A'                    /*REPEAT IF ALL FITS SHOULD    */ASN 1070
         THEN IF K GE 0                /*BE CALCULATED                */ASN 1080
         THEN GO TO REP,.                                               ASN 1090
         END,.                                                          ASN 1100
 OUT..                                                                  ASN 1110
    IRES =IPR,.                                                         ASN 1120
    ERROR=CHECK,.                                                       ASN 1130
    END,.                              /*END OF PROCEDURE ASN         */ASN 1140
 SG13..                                                                 SG13  10
 /*********************************************************************/SG13  20
 /*                                                                   */SG13  30
 /*      SMOOTH A TABLED FUNCTION USING                               */SG13  40
 /*      A FIRST DEGREE POLYNOMIAL FIT RELEVANT TO THREE POINTS       */SG13  50
 /*                                                                   */SG13  60
 /*********************************************************************/SG13  70
    PROCEDURE(X,Y,Z,DIM),.                                              SG13  80
    DECLARE                                                             SG13  90
         (X(*),Y(*),Z(*),XA,XB,XC,                                      SG13 100
         YA,YB,YC,YM,TA,TB,TC,XM)                                       SG13 110
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/SG13 120
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/SG13 130
         (DIM,I)BINARY FIXED,                                           SG13 140
         SWITCH CHARACTER(1),                                           SG13 150
         ERROR EXTERNAL CHARACTER(1),.                                  SG13 160
    SWITCH='G',.                       /*MARK GENERAL ARGUMENTS       */SG13 170
    GOTO INIT,.                                                         SG13 180
 SE13..                                                                 SG13 190
 /*********************************************************************/SG13 200
 /*                                                                   */SG13 210
 /*      SMOOTH AN EQUIDISTANTLY TABLED FUNCTION USING                */SG13 220
 /*      A FIRST DEGREE POLYNOMIAL FIT RELEVANT TO THREE POINTS       */SG13 230
 /*                                                                   */SG13 240
 /*********************************************************************/SG13 250
    ENTRY(Y,Z,DIM),.                                                    SG13 260
    SWITCH='E',.                       /*MARK EQUIDISTANT ARGUMENTS   */SG13 270
 INIT..                                                                 SG13 280
    IF DIM GE 3                        /*TEST SPECIFIED DIMENSION     */SG13 290
    THEN DO,.                                                           SG13 300
         YA   =Y(3),.                  /*MODIFICATION  YA = Y(0)      */SG13 310
         YB   =Y(1),.                                                   SG13 320
         IF SWITCH='G'                 /*TEST GENERAL CASE            */SG13 330
         THEN DO,.                                                      SG13 340
              XA   =X(3),.             /*MODIFICATION  XA = X(0)      */SG13 350
              XB   =X(1),.                                              SG13 360
              END,.                                                     SG13 370
         ELSE YA   =YB+(YB-YA)/2,.     /*MODIFICATION  YA = Y(0)      */SG13 380
              DO I = 2 TO DIM,.                                         SG13 390
              YC   =Y(I),.                                              SG13 400
              YM   =(YA+YB+YC)/3,.     /*SET YM TO ARITHMETIC MEAN    */SG13 410
              IF SWITCH='G'            /*TEST GENERAL CASE            */SG13 420
              THEN DO,.                                                 SG13 430
                   XC   =X(I),.                                         SG13 440
                   IF   (XB-XA)*                                        SG13 450
                        (XC-XB) LE 0                                    SG13 460
                   THEN ERROR='M',.    /*MARK NON-MONOTONIC TABLE     */SG13 470
                   XM   =(XA+XB+XC)/3,.                                 SG13 480
                   TA   =XA-XM,.                                        SG13 490
                   TB   =XB-XM,.                                        SG13 500
                   TC   =XC-XM,.                                        SG13 510
                   XM   =TA*TA+TB*TB+TC*TC,.                            SG13 520
                   IF XM GT 0                                           SG13 530
                   THEN XM   =(TA*(YA-YB)+                              SG13 540
                        TB*(YB-YM)+                                     SG13 550
                        TC*(YC-YM))/XM,.                                SG13 560
                   XA   =XB,.                                           SG13 570
                   XB   =XC,.                                           SG13 580
                   YM   =XM*TB+YM,.    /*SET YM TO WEIGHTED MEAN      */SG13 590
                   END,.                                                SG13 600
              Z(I-1)=YM,.              /*REPLACE Z(I-1) BY YM         */SG13 610
              YA   =YB,.                                                SG13 620
              YB   =YC,.                                                SG13 630
              END,.                                                     SG13 640
         IF SWITCH='G'                                                  SG13 650
         THEN Z(DIM)=XM*(TC-TB)+YM,.   /*COMPUTE Z(DIM)  GENERAL CASE */SG13 660
         ELSE Z(DIM)=YB+(YA-YM)/2,.    /*COMPUTE Z(DIM)  EQUID. CASE  */SG13 670
         ERROR='0',.                   /*SUCCESSFUL OPERATION         */SG13 680
         END,.                                                          SG13 690
    ELSE ERROR='D',.                   /*ERROR IN SPECIFIED DIMENSION */SG13 700
    END,.                              /*END OF PROCEDURE S13         */SG13 710
 SE15..                                                                 SE15  10
 /*********************************************************************/SE15  20
 /*                                                                   */SE15  30
 /*      SMOOTH AN EQUIDISTANTLY TABLED FUNCTION USING                */SE15  40
 /*      A FIRST DEGREE POLYNOMIAL FIT RELEVANT TO FIVE POINTS        */SE15  50
 /*                                                                   */SE15  60
 /*********************************************************************/SE15  70
    PROCEDURE(Y,Z,DIM),.                                                SE15  80
    DECLARE                                                             SE15  90
         (Y(*),Z(*),YA,YB,YC,YD,YE)                                     SE15 100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/SE15 110
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/SE15 120
         (DIM,I)BINARY FIXED,                                           SE15 130
         ERROR EXTERNAL CHARACTER(1),.                                  SE15 140
    IF DIM GE 5                        /*TEST SPECIFIED DIMENSION     */SE15 150
    THEN DO,.                                                           SE15 160
         YA   =Y(4),.                                                   SE15 170
         YE   =Y(2),.                                                   SE15 180
         YD   =Y(1),.                                                   SE15 190
         YC   =YD+(YE-YA)/2,.          /*MODIFICATION, SET YC TO Y(0) */SE15 200
         YB   =YC-Y(5)+YA,.            /*MODIFICATION, SET YB TO Y(-1)*/SE15 210
              DO I =3 TO DIM,.                                          SE15 220
              YA   =YB,.               /*REPLACE YA BY Y(I-4)         */SE15 230
              YB   =YC,.               /*REPLACE YB BY Y(I-3)         */SE15 240
              YC   =YD,.               /*REPLAGE YC BY Y(I-2)         */SE15 250
              YD   =YE,.               /*REPLACE YD BY Y(I-1)         */SE15 260
              YE   =Y(I),.             /*SET YE TO Y(I)               */SE15 270
              Z(I-2)=(YA+YB+YC                                          SE15 280
                   +YD+YE)/5,.         /*SET Y(I-2) TO ARITHMETIC MEAN*/SE15 290
              END,.                                                     SE15 300
         YA   =YC+YD+YE+YE,.                                            SE15 310
         Z(DIM-1),YA=(YA+YA+YD+YB)/10,.                                 SE15 320
         Z(DIM)=YA+YA-Z(DIM-2),.                                        SE15 330
         ERROR='0',.                   /*SUCCESSFUL OPERATION         */SE15 340
         END,.                                                          SE15 350
    ELSE ERROR='1',.                   /*ERROR IN SPECIFIED DIMENSION */SE15 360
    END,.                              /*END OF PROCEDURE S15         */SE15 370
 SE35..                                                                 SE35  10
 /*********************************************************************/SE35  20
 /*                                                                   */SE35  30
 /*      SMOOTH AN EQUIDISTANTLY TABLED FUNCTION USING                */SE35  40
 /*      A THIRD DEGREE POLYNOMIAL FIT RELEVANT TO FIVE POINTS        */SE35  50
 /*                                                                   */SE35  60
 /*********************************************************************/SE35  70
    PROCEDURE(Y,Z,DIM),.                                                SE35  80
    DECLARE                                                             SE35  90
         (Y(*),Z(*),YA,YB,YC,                                           SE35 100
         DA,DB,DAB,DBC)                                                 SE35 110
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/SE35 120
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/SE35 130
         (DIM,I)BINARY FIXED,                                           SE35 140
         ERROR EXTERNAL CHARACTER(1),.                                  SE35 150
    IF DIM GE 5                                                         SE35 160
    THEN DO,.                                                           SE35 170
         YA   =Y(4),.                                                   SE35 180
         YB   =Y(1),.                                                   SE35 190
         YC   =Y(2),.                                                   SE35 200
         DBC  =YB-YC+YA-YC+YA-Y(5),.                                    SE35 210
         DB   =(DBC+DBC                                                 SE35 220
              +YA+YB+YB)/3-YC,.        /*MODIFICATION  DB =DELTA2(1)  */SE35 230
         DBC  =DBC/2,.                 /*MODIFICATION  DBC=DELTA3(1/2)*/SE35 240
              DO I =3 TO DIM,.                                          SE35 250
              YA   =YB,.               /*REPLAGE YA BY Y(I-2)         */SE35 260
              YB   =YC,.               /*REPLACE YB BY Y(I-1)         */SE35 270
              YC   =Y(I),.             /*SET YC TO Y(I)               */SE35 280
              DA   =DB,.               /*SAVE OLD SECOND DIFFERENCE   */SE35 290
              DB   =(YA-YB)-(YB-YC),.  /*COMPUTE DELTA2(I-1)          */SE35 300
              DAB  =DBC,.              /*SAVE OLD THIRD DIFFERENCE    */SE35 310
              DBC  =DA-DB,.            /*COMPUTE DELTA3(I-3/2)        */SE35 320
              Z(I-2)=YA                /*SET Z(I-2) TO                */SE35 330
                   -(DAB-DBC)*6/70,.   /*Y(I-2)-DELTA4(I-2)*6/70      */SE35 340
              END,.                                                     SE35 350
         DA   =(DAB-DBC)/35,.                                           SE35 360
         Z(DIM-1)=YB+DA+DA,.           /*COMPUTE LAST TWO SMOOTHED    */SE35 370
         Z(DIM)=YC-DA/2,.              /*VALUES                       */SE35 380
         ERROR='0',.                   /*SUCCESSFUL OPERATION         */SE35 390
         END,.                                                          SE35 400
    ELSE ERROR='1',.                   /*ERROR IN SPECIFIED DIMENSION */SE35 410
    END,.                              /*END OF PROCEDURE S35         */SE35 420
 EXSM..                                                                 EXSM  10
 /*********************************************************************/EXSM  20
 /*                                                                   */EXSM  30
 /*      TO FIND THE TRIPLE EXPONENTIAL SMOOTHED SERIES S OF A GIVEN  */EXSM  40
 /*      SERIES X.                                                    */EXSM  50
 /*                                                                   */EXSM  60
 /*********************************************************************/EXSM  70
    PROCEDURE (X,NX,AL,A,B,C,S),.                                       EXSM  80
    DECLARE                                                             EXSM  90
         (X(*),S(*),AL,A,B,C,BE,ALCUB,BECUB,DIF)                        EXSM 100
         BINARY FLOAT,                                                  EXSM 110
         ERROR EXTERNAL CHARACTER(1),                                   EXSM 120
         (I,NX)                                                         EXSM 130
         BINARY FIXED,.                                                 EXSM 140
 /*                                                                   */EXSM 150
    ERROR='0',.                                                         EXSM 160
 /*                                                                   */EXSM 170
 /*      TEST THE VALUE OF ALPHA                                      */EXSM 180
 /*                                                                   */EXSM 190
    IF AL LE 0 OR AL GE 1                                               EXSM 200
    THEN DO,.                                                           EXSM 210
         ERROR='1',.                                                    EXSM 220
         GO TO FIN,.                                                    EXSM 230
         END,.                                                          EXSM 240
    IF NX LT 3                                                          EXSM 250
    THEN DO,.                                                           EXSM 260
         ERROR='2',.                                                    EXSM 270
         GO TO FIN,.                                                    EXSM 280
         END,.                                                          EXSM 290
 /*      IF A=B=C=0.0, GENERATE INITIAL VALUES OF A, B, AND C         */EXSM 300
 /*                                                                   */EXSM 310
         IF A = 0.0 AND B = 0.0 AND C = 0.0                             EXSM 320
    THEN DO,.                                                           EXSM 330
         C    =X(1)-2.0*X(2)+X(3),.                                     EXSM 340
         B    =X(2)-X(1)-1.5*C,.                                        EXSM 350
         A    =X(1)-B-0.5*C,.                                           EXSM 360
         END,.                                                          EXSM 370
    BE   =1.0-AL,.                                                      EXSM 380
    BECUB=BE**3,.                                                       EXSM 390
    ALCUB=AL**3,.                                                       EXSM 400
 /*                                                                   */EXSM 410
 /*      DO THE FOLLOWING FOR I = 1 TO NX                             */EXSM 420
 /*                                                                   */EXSM 430
         DO I = 1 TO NX,.                                               EXSM 440
         S(I) =A+B+0.5*C,.             /* FIND S(I) FOR 1 PERIOD AHEAD*/EXSM 450
 /*                                                                   */EXSM 460
 /*      UPDATE COEFFICIENTS A, B, AND C                              */EXSM 470
 /*                                                                   */EXSM 480
         DIF  =S(I)-X(I),.                                              EXSM 490
         A    =X(I)+BECUB*DIF,.                                         EXSM 500
         B    =B+C-1.5*AL*AL*(2.0-AL)*DIF,.                             EXSM 510
         C    =C-ALCUB*DIF,.                                            EXSM 520
         END,.                                                          EXSM 530
 FIN..                                                                  EXSM 540
    RETURN,.                                                            EXSM 550
    END,.                              /*END OF PROCEDURE EXSM        */EXSM 560
 FMFP..                                                                 FMFP  10
 /*********************************************************************/FMFP  20
 /*                                                                   */FMFP  30
 /*      FIND A LOCAL MINIMUM OF A FUNCTION OF SEVERAL VARIABLES      */FMFP  40
 /*      BY THE METHOD OF FLETCHER AND POWELL                         */FMFP  50
 /*                                                                   */FMFP  60
 /*********************************************************************/FMFP  70
    PROCEDURE (FUNCT,N,X,F,G,EST,EPS,LIMIT),.                           FMFP  80
    DECLARE                                                             FMFP  90
         (I,J,KOUNT,K,L,LIMIT,N,NS,N2,N3)                               FMFP 100
         BINARY FIXED,                                                  FMFP 110
         (X(*),G(*),H(N*(N+7)/2),ALFA,AMBDA,DALFA,DX,DY,GS,GNRM,FS,     FMFP 120
         EPS,EST,F,FX,FY,H1,H2,HNRM,OLDF,T,W,Z)                         FMFP 130
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/FMFP 140
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/FMFP 150
         FUNCT                                                          FMFP 160
         ENTRY,                                                         FMFP 170
         ERROR EXTERNAL                                                 FMFP 180
         CHARACTER(1),.                                                 FMFP 190
    NS   =N,.                                                           FMFP 200
    N2   =NS+NS,.                                                       FMFP 210
    N3   =N2+NS,.                                                       FMFP 220
    CALL FUNCT(X,FS,G),.               /*COMPUTE FUNCTION VALUE       */FMFP 230
    ERROR='0',.                        /*AND GRADIENT VECTOR          */FMFP 240
    KOUNT=0,.                                                           FMFP 250
 CONT..                                                                 FMFP 260
    I    =N3,.                                                          FMFP 270
         DO J = NS-1 TO 0 BY -1,.      /*GENERATE IDENTITY MATRIX     */FMFP 280
         K    =I+1,.                                                    FMFP 290
         H(K) =1,.                                                      FMFP 300
         I    =K+J,.                                                    FMFP 310
              DO L = K+1 TO I,.                                         FMFP 320
              H(L) =0,.                                                 FMFP 330
              END,.                                                     FMFP 340
         END,.                                                          FMFP 350
 LOOP..                                /*START ITERATION LOOP         */FMFP 360
    KOUNT=KOUNT+1,.                                                     FMFP 370
    OLDF =FS,.                         /*SAVE FUNCTION VALUE,         */FMFP 380
    DY,HNRM,GNRM=0,.                   /*ARGUMENT VECTOR              */FMFP 390
         DO J = 1 TO NS,.              /*AND GRADIENT VECTOR          */FMFP 400
         H(NS+J),GS=G(J),.                                              FMFP 410
         H(N2+J)=X(J),.                                                 FMFP 420
         T    =0,.                                                      FMFP 430
         K    =N3+J,.                                                   FMFP 440
              DO L = 1 TO NS,.         /*DETERMINE DIRECTION VECTOR   */FMFP 450
              T    =T-G(L)*H(K),.                                       FMFP 460
              IF L LT J                                                 FMFP 470
              THEN K    =K+NS-L,.                                       FMFP 480
              ELSE K    =K+1,.                                          FMFP 490
              END,.                                                     FMFP 500
         H(J) =T,.                                                      FMFP 510
         HNRM =HNRM+ABS(T),.           /*CALCULATE DIRECTIONAL        */FMFP 520
         GNRM =GNRM+ABS(GS),.          /*DERIVATIVE AND TESTVALUES    */FMFP 530
         DY   =DY+T*GS,.               /*FOR DIRECTION VECTOR H       */FMFP 540
         END,.                         /*AND GRADIENT VECTOR G.       */FMFP 550
    IF DY LT 0                         /*REPEAT SEARCH IN DIRECTION   */FMFP 560
    THEN IF HNRM/GNRM GT EPS           /*OF STEEPEST DESCENT IF       */FMFP 570
    THEN GO TO LAB1,.                  /*DIRECTIONAL DERIVATIVE       */FMFP 580
    GO TO REST,.                       /*APPEARS NOT NEGATIVE         */FMFP 590
 LAB1..                                /*SEARCH MINIMUM ALONG H       */FMFP 600
    FY   =FS,.                                                          FMFP 610
    AMBDA=MIN(1,2*(EST-FS)/DY),.                                        FMFP 620
    IF AMBDA LE 0                                                       FMFP 630
    THEN AMBDA=1,.                                                      FMFP 640
    ALFA =0,.                                                           FMFP 650
 SAVE..                                /*SAVE FUNCTION AND DERIVATIVE */FMFP 660
    FX   =FY,.                         /*VALUES FOR OLD ARGUMENT      */FMFP 670
    DX   =DY,.                                                          FMFP 680
         DO I = 1 TO NS,.              /*STEP ARGUMENT ALONG H        */FMFP 690
         X(I) =X(I)+AMBDA*H(I),.                                        FMFP 700
         END,.                                                          FMFP 710
    CALL FUNCT(X,FS,G),.                                                FMFP 720
    FY   =FS,.                                                          FMFP 730
    DY   =0,.                          /*COMPUTE DIRECTIONAL DERIVA-  */FMFP 740
         DO I = 1 TO NS,.              /*TIVE DY FOR NEW ARGUMENT.    */FMFP 750
         DY   =DY+G(I)*H(I),.          /*TERMINATE SEARCH, IF DY GE 0 */FMFP 760
         END,.                         /*IF DY=0,THE MINIMUM IS FOUND */FMFP 770
    IF FY LT FX                        /*PROVIDED FUNCTION DECREASED  */FMFP 780
    THEN DO,.                                                           FMFP 790
         IF DY= 0                                                       FMFP 800
         THEN GO TO COMP,.                                              FMFP 810
         IF DY LT 0                    /*TERMINATE SEARCH IF          */FMFP 820
         THEN DO,.                     /*MINIMUM PASSED               */FMFP 830
              ALFA,AMBDA=AMBDA+ALFA,.  /*DOUBLE STEPSIZE AND REPEAT   */FMFP 840
              IF HNRM*AMBDA LE 1E10                                     FMFP 850
              THEN GO TO SAVE,.                                         FMFP 860
              ERROR='2',.              /*ARGUMENT OUT OF RANGE        */FMFP 870
              GO TO RETURN,.                                            FMFP 880
              END,.                                                     FMFP 890
         END,.                                                          FMFP 900
    T    =0,.                                                           FMFP 910
 LAB2..                                                                 FMFP 920
    IF AMBDA= 0                        /*INTERPOLATE IN NEW INTERVAL  */FMFP 930
    THEN GO TO COMP,.                  /*COMPUTE ARGUMENT X           */FMFP 940
    Z    =3*(FX-FY)/AMBDA+DX+DY,.                                       FMFP 950
    ALFA =MAX(ABS(Z),ABS(DX),ABS(DY)),.                                 FMFP 960
    DALFA=Z/ALFA,.                                                      FMFP 970
    DALFA=DALFA*DALFA-DX/ALFA*DY/ALFA,.                                 FMFP 980
    IF DALFA LT 0                                                       FMFP 990
    THEN GO TO REST,.                                                   FMFP1000
    W    =ALFA*SQRT(DALFA),.                                            FMFP1010
    ALFA =DY-DX+W+W,.                                                   FMFP1020
    IF ALFA=0                                                           FMFP1030
    THEN ALFA =(Z+DY-W)/(Z+DX+Z+DY),.                                   FMFP1040
    ELSE ALFA =(DY-Z+W)/ALFA,.                                          FMFP1050
    ALFA =ALFA*AMBDA,.                                                  FMFP1060
    DALFA=T-ALFA,.                                                      FMFP1070
         DO I = 1 TO NS,.                                               FMFP1080
         X(I) =X(I)+DALFA*H(I),.                                        FMFP1090
         END,.                                                          FMFP1100
    CALL FUNCT(X,FS,G),.                                                FMFP1110
    IF FS LE FX                                                         FMFP1120
    THEN IF FS LE FY                                                    FMFP1130
    THEN GO TO COMP,.                  /*TERMINATE INTERPOLATION      */FMFP1140
    DALFA=0,.                                                           FMFP1150
         DO I = 1 TO NS,.                                               FMFP1160
         DALFA=DALFA+G(I)*H(I),.                                        FMFP1170
         END,.                                                          FMFP1180
    IF DALFA LT 0                                                       FMFP1190
    THEN IF FS LE FX                                                    FMFP1200
    THEN DO,.                                                           FMFP1210
         FX   =FS,.                                                     FMFP1220
         DX   =DALFA,.                                                  FMFP1230
         T,AMBDA=ALFA,.                                                 FMFP1240
         GO TO LAB2,.                  /*REPEAT INTERPOLATION         */FMFP1250
         END,.                                                          FMFP1260
    FY   =FS,.                                                          FMFP1270
    DY   =DALFA,.                                                       FMFP1280
    AMBDA=AMBDA-ALFA,.                                                  FMFP1290
    T    =0,.                                                           FMFP1300
    GO TO LAB2,.                       /*REPEAT INTERPOLATION         */FMFP1310
 COMP..                                                                 FMFP1320
         DO J = 1 TO NS,.              /*COMPUTE DIFFERENCE VECTORS   */FMFP1330
         K    =NS+J,.                  /*OF ARGUMENT AND GRADIENT     */FMFP1340
         H(K) =G(J)-H(K),.                                              FMFP1350
         K    =NS+K,.                                                   FMFP1360
         H(K) =X(J)-H(K),.                                              FMFP1370
         END,.                                                          FMFP1380
    IF OLDF+EPS LT FS                                                   FMFP1390
    THEN GO TO REST,.                  /*TERMINATE ITERATION          */FMFP1400
    ERROR='0',.                                                         FMFP1410
    IF KOUNT GE NS                                                      FMFP1420
    THEN DO,.                                                           FMFP1430
         T,Z  =0,.                                                      FMFP1440
              DO J = 1 TO NS,.                                          FMFP1450
              W    =H(N2+J),.                                           FMFP1460
              T    =T+ABS(W),.                                          FMFP1470
              Z    =Z+H(NS+J)*W,.                                       FMFP1480
              END,.                                                     FMFP1490
         IF HNRM LE EPS                                                 FMFP1500
         THEN IF T LE EPS              /*TERMINATE, IF ARGUMENT DIFF. */FMFP1510
         THEN GO TO RETURN,.           /*VECTOR AND DIRECTION VECTOR  */FMFP1520
         END,.                         /*ARE BOTH   LE EPS            */FMFP1530
    IF KOUNT GE LIMIT                                                   FMFP1540
    THEN GO TO NCON,.                                                   FMFP1550
    ALFA =0,.                                                           FMFP1560
         DO J = 1 TO NS,.                                               FMFP1570
         W    =0,.                                                      FMFP1580
         K    =N3+J,.                                                   FMFP1590
              DO L = 1 TO NS,.                                          FMFP1600
              W    =W+H(NS+L)*H(K),.                                    FMFP1610
              IF L LT J                                                 FMFP1620
              THEN K    =K+NS-L,.                                       FMFP1630
              ELSE K    =K+1,.                                          FMFP1640
              END,.                                                     FMFP1650
         ALFA =ALFA+W*H(NS+J),.                                         FMFP1660
         H(J) =W,.                                                      FMFP1670
         END,.                                                          FMFP1680
    IF Z*ALFA= 0                                                        FMFP1690
    THEN GO TO CONT,.                                                   FMFP1700
    K    =N3+1,.                                                        FMFP1710
         DO L = 1 TO NS,.              /*UPDATE MATRIX H              */FMFP1720
         H1   =H(N2+L)/Z,.                                              FMFP1730
         H2   =H(L)/ALFA,.                                              FMFP1740
              DO J = L TO NS,.                                          FMFP1750
              H(K) =H(K)+H1*H(N2+J)                                     FMFP1760
                   -H2*H(J),.                                           FMFP1770
              K    =K+1,.                                               FMFP1780
              END,.                                                     FMFP1790
         END,.                                                          FMFP1800
    GO TO LOOP,.                       /*END OF ITERATION LOOP        */FMFP1810
 NCON..                                                                 FMFP1820
    ERROR='1',.                        /*NO CONVERGENCE               */FMFP1830
    GO TO RETURN,.                                                      FMFP1840
 REST..                                /*RESTORE OLD VAL, ARG         */FMFP1850
         DO J = 1 TO NS,.                                               FMFP1860
         X(J) =H(N2+J),.                                                FMFP1870
         END,.                                                          FMFP1880
    CALL FUNCT(X,FS,G),.                                                FMFP1890
    IF GNRM GT EPS                                                      FMFP1900
    THEN IF ERROR= '3'                                                  FMFP1910
    THEN GO TO RETURN,.                                                 FMFP1920
    ELSE DO,.                                                           FMFP1930
         ERROR='3',.                   /*REPEAT, IF DERIVATIVE GT EPS */FMFP1940
         GO TO CONT,.                                                   FMFP1950
         END,.                                                          FMFP1960
    ERROR='0',.                                                         FMFP1970
 RETURN..                                                               FMFP1980
    F    =FS,.                                                          FMFP1990
    END,.                              /*END OF PROCEDURE FMFP        */FMFP2000
 RTF..                                                                  RTF   10
 /*********************************************************************/RTF   20
 /*                                                                   */RTF   30
 /*      CALCULATE ROOT OF GIVEN FUNCTION                             */RTF   40
 /*      IF OPT = '0' BY LINEAR INTERPOLATION (SECANT METHOD)         */RTF   50
 /*      IF OPT = '1' BY QUADRATIC INTERPOLATION (MULLER'S METHOD)    */RTF   60
 /*      IF OPT = '2' BY HYPERBOLIC INTERPOLATION (HALLEY'S METHOD)   */RTF   70
 /*                                                                   */RTF   80
 /*********************************************************************/RTF   90
    PROCEDURE(X,F,FCT,LIMIT,OPT),.                                      RTF  100
    DECLARE                                                             RTF  110
         (ERROR EXTERNAL,INCL,LOPT,OPT)                                 RTF  120
         CHARACTER(1),                                                  RTF  130
         (STEP,CT,LIMIT)                                                RTF  140
         BINARY FIXED,                                                  RTF  150
         (X,F,T,Y,XX,DX,X1,X2,F1,F2,X10,X20,X21,                        RTF  160
         F10,F21,FF,XXX,TOL,MI,MA)                                      RTF  170
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/RTF  180
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/RTF  190
         FCT ENTRY() RETURNS                                            RTF  200
         (BINARY FLOAT),.              /*SINGLE PRECISION VERSION  /*S*/RTF  210
  /*     (BINARY FLOAT(53)),.          /*DOUBLE PRECISION VERSION  /*D*/RTF  220
    STEP =1,.                          /*INIT. ITERATION COUNT        */RTF  230
    X2   =X,.                                                           RTF  240
    F,F2 =FCT(X2),.                    /*CALCULATE STARTING VALUE     */RTF  250
    INCL,ERROR='0',.                                                    RTF  260
    CT   =0,.                                                           RTF  270
 SEEK..                                /*LOCATE BETTER POINT          */RTF  280
    F1   =1,.                          /*BY SIMPLE SEARCH PROCESS     */RTF  290
    LOPT ='S',.                                                         RTF  300
    MI   =MIN(0.1,ABS(F)),.                                             RTF  310
    MA   =MAX(1,ABS(X)),.                                               RTF  320
 SEEK2..                                                                RTF  330
    DX   =MI/F1,.                                                       RTF  340
    X1   =1,.                                                           RTF  350
 SEEK1..                                                                RTF  360
    T    =X+DX,.                                                        RTF  370
    DX   =-DX,.                                                         RTF  380
 TEST..                                                                 RTF  390
    Y    =FCT(T),.                     /*CALCULATE FUNCTION VALUE     */RTF  400
    STEP =STEP+1,.                     /*STEP ITERATION COUNT         */RTF  410
    IF STEP GE LIMIT                                                    RTF  420
    THEN GO TO EXIT,.                  /*TERMINATE WITH ERROR = 'C'   */RTF  430
    IF INCL='1'                        /*TEST FOR PREVIOUS SIGN-CHANGE*/RTF  440
    THEN DO,.                                                           RTF  450
         IF Y*FF LT 0                                                   RTF  460
         THEN XXX  =T,.                                                 RTF  470
         ELSE GO TO SIGN,.                                              RTF  480
         END,.                                                          RTF  490
    ELSE DO,.                                                           RTF  500
         IF Y*F LE 0                   /*TEST FOR SIGN-CHANGE         */RTF  510
         THEN DO,.                                                      RTF  520
              INCL ='1',.              /*MARK SIGN CHANGE             */RTF  530
              XXX  =X,.                                                 RTF  540
 SIGN..                                                                 RTF  550
              XX   =T,.                                                 RTF  560
              FF   =Y,.                                                 RTF  570
              END,.                                                     RTF  580
         END,.                                                          RTF  590
    IF ABS(Y) LT ABS(F)                /*TEST FOR IMPROVEMENT         */RTF  600
    THEN DO,.                                                           RTF  610
         X    =T,.                                                      RTF  620
         F    =Y,.                                                      RTF  630
         GO TO CHECK,.                                                  RTF  640
         END,.                                                          RTF  650
    IF INCL='1'                                                         RTF  660
    THEN GO TO CHECK,.                                                  RTF  670
    IF LOPT NE 'S'                                                      RTF  680
    THEN GO TO SEEK,.                                                   RTF  690
    IF DX LT 0                                                          RTF  700
    THEN GO TO SEEK1,.                 /*SEEK AT SYMMETRIC POINT      */RTF  710
    X1   =X1+1,.                                                        RTF  720
    DX   =DX+DX,.                      /*SEEK FARTHER AWAY            */RTF  730
    IF X1 LE F1                                                         RTF  740
    THEN GO TO SEEK1,.                                                  RTF  750
    F1   =F1+2,.                       /*STEP ODD INTEGER DENOMINATOR */RTF  760
    GO TO SEEK2,.                                                       RTF  770
 CHECK..                                                                RTF  780
    TOL  =1E-5*MA,.                    /*SINGLE PRECISION VERSION  /*S*/RTF  790
  /*TOL  =1E-12*MA,.                   /*DOUBLE PRECISION VERSION  /*D*/RTF  800
    IF ABS(DX) LE TOL                                                   RTF  810
    THEN DO,.                                                           RTF  820
         CT   =CT+1,.                                                   RTF  830
         IF ABS(Y) GT TOL              /*TERMINATE SUCCESSFULLY IF    */RTF  840
         THEN IF CT LE 5               /*BOTH ARGUMENT-CHANGE AND     */RTF  850
         THEN GO TO CONT,.             /*FUNCTION VALUE ARE SMALL     */RTF  860
         ELSE ERROR='W',.              /*WITH WARNING IF ARGUMENT-    */RTF  870
         GO TO RETURN,.                /*CHANGE ONLY IS SMALL REPEAT. */RTF  880
 CONT..                                                                 RTF  890
         END,.                                                          RTF  900
    ELSE CT   =0,.                                                      RTF  910
    X20  =T-X1,.                                                        RTF  920
    X1   =X2,.                         /*SAVE OLD VALUES              */RTF  930
    F0   =F1,.                                                          RTF  940
    F1   =F2,.                                                          RTF  950
    X10  =X21,.                                                         RTF  960
    F10  =F21,.                                                         RTF  970
    X2   =T,.                          /*STORE NEW VALUES             */RTF  980
    F2   =Y,.                                                           RTF  990
    X21  =X2-X1,.                                                       RTF 1000
    IF X21= 0                                                           RTF 1010
    THEN GO TO EXIT,.                                                   RTF 1020
    F21  =(F2-F1)/X21,.                                                 RTF 1030
    IF LOPT='1'                                                         RTF 1040
    THEN DO,.                          /*QUADRATIC INTERPOLATION      */RTF 1050
         IF X20 NE 0                                                    RTF 1060
         THEN DO,.                                                      RTF 1070
              T    =(F21-F10)/X20,.                                     RTF 1080
              Y    =F21+X21*T,.                                         RTF 1090
              IF Y NE 0                                                 RTF 1100
              THEN DO,.                                                 RTF 1110
                   DX   =F2/Y,.                                         RTF 1120
                   T    =0.25-DX*T/Y,.                                  RTF 1130
                   IF T NL 0                                            RTF 1140
                   THEN DX   =DX/(0.5+SQRT(T)),.                        RTF 1150
                   GO TO COMP,.                                         RTF 1160
                   END,.                                                RTF 1170
              END,.                                                     RTF 1180
         END,.                                                          RTF 1190
    IF LOPT='2'                                                         RTF 1200
    THEN DO,.                          /*HYPERBOLIC INTERPOLATION     */RTF 1210
         T    =F2-F0*F21/F10,.                                          RTF 1220
         IF T NE 0                                                      RTF 1230
         THEN DX   =X20*F2/T,.                                          RTF 1240
         IF DX NE 0                                                     RTF 1250
         THEN GO TO COMP,.                                              RTF 1260
         END,.                                                          RTF 1270
    IF F21=0                                                            RTF 1280
    THEN IF INCL='1'                                                    RTF 1290
    THEN GO TO HALF,.                                                   RTF 1300
    ELSE GO TO SEEK,.                                                   RTF 1310
    DX   =F2/F21,.                                                      RTF 1320
 COMP..                                                                 RTF 1330
    TOL  =MAX(MI,1E-3)*MA,.                                             RTF 1340
    IF INCL NE '1'                                                      RTF 1350
    THEN IF ABS(DX) GT TOL                                              RTF 1360
    THEN IF DX LT 0                                                     RTF 1370
    THEN DX   =-TOL,.                                                   RTF 1380
    ELSE DX   =TOL,.                                                    RTF 1390
    T    =X2-DX,.                                                       RTF 1400
    IF INCL='1'                                                         RTF 1410
    THEN IF (XX-T)*(XXX-T) GT 0        /*TEST IF INSIDE INTERVAL      */RTF 1420
    THEN                                                                RTF 1430
 HALF..                                                                 RTF 1440
         T    =(XX+XXX)*0.5,.                                           RTF 1450
    LOPT =OPT,.                                                         RTF 1460
    GO TO TEST,.                                                        RTF 1470
 EXIT..                                                                 RTF 1480
    ERROR='C',.                                                         RTF 1490
 RETURN..                                                               RTF 1500
    END,.                              /*END OF PROCEDURE RTF         */RTF 1510
 RTFD..                                                                 RTFD  10
 /*********************************************************************/RTFD  20
 /*                                                                   */RTFD  30
 /*      CALCULATE ROOT OF GIVEN FUNCTION USING DERIVATIVE VALUES     */RTFD  40
 /*      IF OPT = '0' BY LINEAR INTERPOLATION (NEWTON METHOD)         */RTFD  50
 /*      IF OPT = '1' BY INVERSE QUADRATIC INTERPOLATION              */RTFD  60
 /*      IF OPT = '2' BY HYPERBOLIC INTERPOLATION (HALLEY METHOD)     */RTFD  70
 /*                                                                   */RTFD  80
 /*********************************************************************/RTFD  90
    PROCEDURE(X,F,DF,FCT,LIMIT,OPT),.                                   RTFD 100
    DECLARE                                                             RTFD 110
         (ERROR EXTERNAL,INCL,LOPT,OPT)                                 RTFD 120
         CHARACTER(1),                                                  RTFD 130
         (STEP,CT,LIMIT)                                                RTFD 140
         BINARY FIXED,                                                  RTFD 150
         (X,F,T,Y,XX,DX,X1,X2,F1,F2,DF1,DF2,DY,DF,TOL,MI,MA,FF,XXX)     RTFD 160
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/RTFD 170
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/RTFD 180
         FCT ENTRY,.                                                    RTFD 190
    STEP =1,.                                                           RTFD 200
    X2   =X,.                                                           RTFD 210
    CALL FCT(X2,F2,DF2),.              /*CALCULATE STARTING VALUE     */RTFD 220
    F    =F2,.                                                          RTFD 230
    DF   =DF2,.                                                         RTFD 240
    INCL,ERROR='0',.                                                    RTFD 250
    CT   =0,.                                                           RTFD 260
    LOPT ='0',.                        /*NO PREVIOUS VALUE AVAILABLE  */RTFD 270
    GO TO COMP,.                       /*USE NEWTON METHOD            */RTFD 280
 SEEK..                                /*LOCATE BETTER POINT          */RTFD 290
    F1   =1,.                          /*BY SIMPLE SEARCH PROCESS     */RTFD 300
    LOPT ='S',.                                                         RTFD 310
 SEEK2..                                                                RTFD 320
    DX   =MI/F1,.                                                       RTFD 330
    X1   =1,.                                                           RTFD 340
 SEEK1..                                                                RTFD 350
    T    =X+DX,.                                                        RTFD 360
    DX   =-DX,.                                                         RTFD 370
 TEST..                                                                 RTFD 380
    CALL FCT(T,Y,DY),.                 /*CALCULATE FUNCTION VALUE     */RTFD 390
    STEP =STEP+1,.                     /*STEP ITERATION COUNT         */RTFD 400
    IF STEP GE LIMIT                                                    RTFD 410
    THEN GO TO EXIT,.                  /*TERMINATE WITH ERROR ='C'    */RTFD 420
    IF INCL='1'                        /*TEST FOR PREVIOUS SIGN-CHANGE*/RTFD 430
    THEN DO,.                                                           RTFD 440
         IF Y*FF LT 0                                                   RTFD 450
         THEN XXX  =T,.                                                 RTFD 460
         ELSE GO TO SIGN,.                                              RTFD 470
         END,.                                                          RTFD 480
    ELSE DO,.                                                           RTFD 490
         IF Y*F LE 0                   /*TEST FOR SIGN-CHANGE         */RTFD 500
         THEN DO,.                                                      RTFD 510
              INCL ='1',.              /*MARK SIGN CHANGE             */RTFD 520
              XXX  =X,.                                                 RTFD 530
 SIGN..                                                                 RTFD 540
              XX   =T,.                                                 RTFD 550
              FF   =Y,.                                                 RTFD 560
              END,.                                                     RTFD 570
         END,.                                                          RTFD 580
    IF ABS(Y) LT ABS(F)                /*TEST FOR IMPROVEMENT         */RTFD 590
    THEN DO,.                                                           RTFD 600
         X    =T,.                                                      RTFD 610
         F    =Y,.                                                      RTFD 620
         DF   =DY,.                                                     RTFD 630
         GO TO CHECK,.                                                  RTFD 640
         END,.                                                          RTFD 650
    IF INCL='1'                                                         RTFD 660
    THEN GO TO CHECK,.                                                  RTFD 670
    IF LOPT NE 'S'                                                      RTFD 680
    THEN GO TO SEEK,.                                                   RTFD 690
    IF DX LT 0                                                          RTFD 700
    THEN GO TO SEEK1,.                 /*SEEK AT SYMMETRIC POINT      */RTFD 710
    X1   =X1+1,.                                                        RTFD 720
    DX   =DX+DX,.                      /*SEEK FARTHER AWAY            */RTFD 730
    IF X1 LE F1                                                         RTFD 740
    THEN GO TO SEEK1,.                                                  RTFD 750
    F1   =F1+2,.                       /*STEP ODD INTEGER DENOMINATOR */RTFD 760
    GO TO SEEK2,.                                                       RTFD 770
 CHECK..                                                                RTFD 780
    TOL  =1E-5*MA,.                    /*SINGLE PRECISION VERSION  /*S*/RTFD 790
  /*TOL  =1E-12*MA,.                   /*DOUBLE PRECISION VERSION  /*D*/RTFD 800
    IF ABS(DX) LE TOL                                                   RTFD 810
    THEN DO,.                                                           RTFD 820
         CT   =CT+1,.                                                   RTFD 830
         IF ABS(Y) GT TOL              /*TERMINATE SUCCESSFULLY IF    */RTFD 840
         THEN IF CT LE 5               /*BOTH ARGUMENT-CHANGE AND     */RTFD 850
         THEN GO TO CONT,.             /*FUNCTION VALUE ARE SMALL     */RTFD 860
         ELSE ERROR='W',.              /*WITH WARNING IF ARGUMENT-    */RTFD 870
         GO TO RETURN,.                /*CHANGE ONLY IS SMALL REPEAT. */RTFD 880
 CONT..                                                                 RTFD 890
         END,.                                                          RTFD 900
    ELSE CT   =0,.                                                      RTFD 910
    X1   =X2,.                         /*SAVE OLD VALUES              */RTFD 920
    F1   =F2,.                                                          RTFD 930
    DF1  =DF2,.                                                         RTFD 940
    X2   =T,.                          /*STORE NEW VALUES             */RTFD 950
    F2   =Y,.                                                           RTFD 960
    DF2  =DY,.                                                          RTFD 970
    DY   =X2-X1,.                                                       RTFD 980
    IF DY= 0                                                            RTFD 990
    THEN GO TO EXIT,.                                                   RTFD1000
 COMP..                                                                 RTFD1010
    MA   =MAX(1,ABS(X)),.                                               RTFD1020
    MI   =MIN(0.1,ABS(F)),.                                             RTFD1030
    IF DF2 NE 0                                                         RTFD1040
    THEN DO,.                                                           RTFD1050
         DX   =F2/DF2,.                /*NEWTON METHOD                */RTFD1060
         IF LOPT NE '0'                                                 RTFD1070
         THEN DO,.                                                      RTFD1080
              T    =(F2-F1)/DY,.                                        RTFD1090
              Y    =DF2-T,.                                             RTFD1100
              T    =DX*(DF1-T+Y+Y)/(DF2*DY),.                           RTFD1110
              IF LOPT='1'              /*MODIFICATION..               */RTFD1120
              THEN DX   =DX*(1+T),.    /*INVERSE QUADRATIC INTERPOLAT.*/RTFD1130
              IF LOPT='2'              /*MODIFICATION..               */RTFD1140
              THEN IF T NE 1           /*HYPERBOLIC INTERPOLATION     */RTFD1150
              THEN DX   =DX/(1-T),.                                     RTFD1160
              END,.                                                     RTFD1170
         LOPT =OPT,.                                                    RTFD1180
         TOL  =MAX(MI,1E-3)*MA,.                                        RTFD1190
         IF INCL NE '1'                                                 RTFD1200
         THEN DO,.                                                      RTFD1210
              IF ABS(DX) GT TOL                                         RTFD1220
              THEN IF DX LT 0                                           RTFD1230
              THEN DX   =-TOL,.                                         RTFD1240
              ELSE DX   = TOL,.                                         RTFD1250
              END,.                                                     RTFD1260
         T    =X2-DX,.                                                  RTFD1270
         IF INCL='1'                                                    RTFD1280
         THEN IF (XX-T)*(XXX-T) GT 0   /*TEST IF INSIDE INTERVAL      */RTFD1290
         THEN                                                           RTFD1300
 HALF..                                                                 RTFD1310
              T    =(XX+XXX)*0.5,.                                      RTFD1320
         GO TO TEST,.                                                   RTFD1330
         END,.                                                          RTFD1340
    ELSE IF INCL='1'                                                    RTFD1350
    THEN GO TO HALF,.                                                   RTFD1360
    ELSE GO TO SEEK,.                                                   RTFD1370
 EXIT..                                                                 RTFD1380
    ERROR='C',.                                                         RTFD1390
 RETURN..                                                               RTFD1400
    END,.                              /*END OF PROCEDURE RTFD        */RTFD1410
 DERE..                                                                 DERE  10
 /*********************************************************************/DERE  20
 /*                                                                   */DERE  30
 /*      PERFORM ONE INTEGRATION STEP FOR A SYSTEM OF ORDINARY DIF-   */DERE  40
 /*      FERENTIAL EQUATIONS USING RATIONAL EXTRAPOLATION TECHNIQUE   */DERE  50
 /*                                                                   */DERE  60
 /*********************************************************************/DERE  70
    PROCEDURE(F,N,H,X,Y,EPS),.                                          DERE  80
    DECLARE                                                             DERE  90
         F ENTRY,                      /*Y' = F(X,Y) GIVEN ODE-SYSTEM */DERE 100
         (ERROR EXTERNAL,CONV) CHARACTER(1),                            DERE 110
         (EPS,YM(N),FMH,SQMH,FMM,SQMI,DSQMI)                            DERE 120
         BINARY FLOAT,                                                  DERE 130
         (H,X,Y(*),YI,DY(N),Z(N),DZ(N),LX,YC(N))                        DERE 140
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/DERE 150
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/DERE 160
         (LH,HA,CI,BI,V,FO(N),FE(N),ZI,CMI,DI,U,                        DERE 170
         DT(5*N))                      /*SINGLE PRECISION VERSION  /*S*/DERE 180
  /*     DT(10*N))                     /*DOUBLE PRECISION VERSION  /*D*/DERE 190
         BINARY FLOAT(53),                                              DERE 200
         (N,RR,CC,LN,DIAG,HSTEP,M,MM,I,J)                               DERE 210
         BINARY FIXED,.                                                 DERE 220
    LN   =N,.                                                           DERE 230
    ERROR='S',.                        /*MARK ILLEGAL SPECIFICATION   */DERE 240
    IF LN LE 0                         /*TEST SPECIFIED DIMENSION     */DERE 250
    THEN GO TO EXIT,.                                                   DERE 260
    LH   =H,.                          /*INIT. LOCAL STEPSIZE         */DERE 270
    HSTEP=0,.                          /*INIT. COUNT HALVING STEPSIZE */DERE 280
    IF LH= 0                           /*TEST SPECIFIED STEPSIZE      */DERE 290
    THEN GO TO EXIT,.                                                   DERE 300
    ERROR='0',.                        /*PRESET ERROR INDICATOR       */DERE 310
    CALL F(X,Y,DY),.                   /*DERIVATIVE FOR INITIAL VALUES*/DERE 320
    IF ERROR NE '0'                                                     DERE 330
    THEN GO TO EXIT,.                  /*TERMINATE IF ERROR IN F(X,Y) */DERE 340
                                       /*                             */DERE 350
 HALF..                                /*START OF ITERATION LOOP      */DERE 360
    CONV ='H',.                        /*MARK FIRST APPROXIMATION     */DERE 370
    DIAG =1,.                          /*INIT. DIAGONAL COUNT T-ARRAY */DERE 380
    FMH  =0,.                          /*INIT. FLOATING EXTRAPOL.COUNT*/DERE 390
                                       /*START OF EXTRAPOLATION LOOP  */DERE 400
         DO M = 2 TO 16 BY 2,.         /*SINGLE PRECISION VERSION  /*S*/DERE 410
  /*     DO M = 2 TO 28 BY 2,.         /*DOUBLE PRECISION VERSION  /*D*/DERE 420
         FMH  =FMH+1,.                 /*UPDATE EXTRAPOLATION COUNT   */DERE 430
         HA   =LH/FMH,.                /*CALCULATE INTERVAL SIZE      */DERE 440
         FMM  =1,.                                                      DERE 450
              DO MM = 1 TO M,.         /*COMP. DISCRETE APPROXIMATION */DERE 460
                   DO I = 1 TO LN,.                                     DERE 470
                   YI   =Y(I),.                                         DERE 480
                   IF MM= 1            /*MODIFY MID-POINT RULE FOR    */DERE 490
                   THEN DO,.           /*FIRST INTERVAL               */DERE 500
                        IF CONV='H'    /*FOR THE VERY FIRST INTERVAL  */DERE 510
                        THEN DO,.      /*INIT. VALUES FOR CONV. TEST  */DERE 520
                             YC(I)=YI,.                                 DERE 530
                             YM(I)=ABS(YI),.                            DERE 540
                             END,.                                      DERE 550
                        ZI,FE(I)=.50000000*DY(I),.                      DERE 560
                        FO(I)=0,.      /*INIT. SUM OF DERIVATIVES     */DERE 570
                        END,.                                           DERE 580
                   ELSE DO,.                                            DERE 590
                        ZI   =FO(I)+DZ(I),.                             DERE 600
                        FO(I)=FE(I),.  /*UPDATE AND INTERCHANGE SUM OF*/DERE 610
                        FE(I)=ZI,.     /*ODD/EVEN SPACED DERIVATIVES  */DERE 620
                        END,.                                           DERE 630
                   Z(I),YI=HA*ZI+YI,.  /*COMP. APPROXIMATE FUNCTION   */DERE 640
                   IF YM(I) LT ABS(YI) /*VALUE FOR LOCAL ARGUMENT LX  */DERE 650
                   THEN YM(I)=ABS(YI),./*STORE MAX ABSOLUTE VALUE     */DERE 660
                   END,.                                                DERE 670
              LX   =X+FMM*HA,.         /*COMP. LOCAL ARGUMENT         */DERE 680
              FMM  =FMM+1,.                                             DERE 690
              CALL F(LX,Z,DZ),.        /*CALCULATE DERIVATIVE         */DERE 700
              IF ERROR NE '0'                                           DERE 710
              THEN GO TO EXIT,.        /*TERMINATE IF ERROR IN F(X,Y) */DERE 720
              END,.                                                     DERE 730
         CONV ='0',.                   /*PRESET CONVERGENCE INDICATOR */DERE 740
         SQMH =FMH*FMH,.               /*SQUARE EXTRAPOLATION COUNT   */DERE 750
         HA   =HA*0.5,.                                                 DERE 760
              DO I =1 TO LN,.          /*EXTRAPOLATION ON COMPONENTS  */DERE 770
              V    =DT(I),.            /*SAVE OLD T-VALUE             */DERE 780
              ZI,CI,DT(I)=Y(I)+HA*     /*STORE NEW T-VALUE            */DERE 790
                   (.50000000*DZ(I)+FO(I)+FE(I)),.                      DERE 800
              SQMI =SQMH,.             /*INIT. VARYING SQUARE NUMBER  */DERE 810
              DSQMI=FMM,.              /*INIT. VARYING DECREMENT      */DERE 820
              MM   =I,.                                                 DERE 830
                   DO J = 2 TO DIAG,.                                   DERE 840
                   MM   =MM+LN,.                                        DERE 850
                   DSQMI=DSQMI-2,.     /*STEP ODD INTEGER DECREMENT   */DERE 860
                   SQMI =SQMI-DSQMI,.  /*COMPUTE NEXT LOWER SQUARE    */DERE 870
                   BI   =SQMH*V,.                                       DERE 880
                   CMI  =CI*SQMI,.                                      DERE 890
                   DI   =BI-CMI,.      /*DENOMINATOR OF CENTRAL ALGOR.*/DERE 900
                   U    =V,.                                            DERE 910
                   IF DI NE 0          /*TEST FOR ZERO DENOMINATOR    */DERE 920
                   THEN DO,.           /*PERFORM RHOMBUS ALGORITHM    */DERE 930
                        DI   =(CI-V)/DI,.                               DERE 940
                        U    =CMI*DI,.                                  DERE 950
                        CI   =BI*DI,.                                   DERE 960
                        END,.                                           DERE 970
                   V    =DT(MM),.      /*SAVE OLD T-VALUE-DIFFERENCE  */DERE 980
                   DT(MM)=U,.          /*STORE NEW T-VALUE-DIFFERENCE */DERE 990
                   ZI   =ZI+U,.        /*COMP. NEW T-VALUE            */DERE1000
                   END,.                                                DERE1010
              YI   =ABS(YC(I)-ZI),.                                     DERE1020
              IF YI LT ABS(U)          /*SET YI TO                    */DERE1030
              THEN YI   =ABS(U),.      /*MAX(ABS(U),ABS(YC(I)-ZI))    */DERE1040
              IF YI GT EPS*YM(I)       /*COMPONENTWISE CONVERGENCETEST*/DERE1050
              THEN CONV ='1',.         /*NEGATE CONVERGENCE INDICATOR */DERE1060
              YC(I)=ZI,.               /*STORE NEW COMPARISON VALUE   */DERE1070
              END,.                                                     DERE1080
         IF CONV='0'                   /*GLOBAL CONVERGENCE TEST      */DERE1090
         THEN GO TO END,.                                               DERE1100
         ELSE IF DIAG LT 5             /*SINGLE PRECISION VERSION  /*S*/DERE1110
  /*     ELSE IF DIAG LT 10            /*DOUBLE PRECISION VERSION  /*D*/DERE1120
         THEN DIAG =DIAG+1,.           /*UPDATE DIAGONAL COUNT        */DERE1130
         END,.                                                          DERE1140
                                       /*END OF EXTRAPOLATION LOOP    */DERE1150
    HSTEP=HSTEP+1,.                    /*UPDATE COUNT OF HALVING STEPS*/DERE1160
    LH   =LH*0.5,.                                                      DERE1170
    IF HSTEP LE 20                     /*MAXIMALLY 20 ITERATIONS WITH */DERE1180
    THEN GO TO HALF,.                  /*REDUCED STEPSIZE             */DERE1190
    ELSE GO TO EXIT,.                  /*TERMINATE IF NO CONVERGENCE  */DERE1200
                                       /*END OF ITERATION LOOP        */DERE1210
 END..                                 /*SUCCESSFUL END OF OPERATION  */DERE1220
    X    =X+LH,.                       /*RETURN ARGUMENT              */DERE1230
    IF DIAG LE 4                       /*SINGLE PRECISION VERSION  /*S*/DERE1240
  /*IF DIAG LE 7                       /*DOUBLE PRECISION VERSION  /*D*/DERE1250
    THEN LH   =LH+LH,.                 /*DOUBLE STEPSIZE ESTIMATE     */DERE1260
    H    =LH,.                         /*RETURN ADJUSTED STEPSIZE     */DERE1270
         DO I = 1 TO LN,.                                               DERE1280
         Y(I) =YC(I),.                 /*RETURN EXTRAPOLATED FUNCTION-*/DERE1290
         END,.                         /*VALUES                       */DERE1300
 EXIT..                                                                 DERE1310
    END,.                              /*END OF PROCEDURE DERE        */DERE1320
 CEL1..                                                                 CEL   10
 /*********************************************************************/CEL   20
 /*                                                                   */CEL   30
 /*      COMPLETE ELLIPTIC INTEGRAL OF FIRST KIND                     */CEL   40
 /*                                                                   */CEL   50
 /*********************************************************************/CEL   60
    PROCEDURE(RES,K),.                                                  CEL   70
    DECLARE                                                             CEL   80
         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */CEL   90
         (RES,K,A,B,B1,ARI,AARI,GEO,AA,AN,W)                            CEL  100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/CEL  110
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/CEL  120
         SWITCH CHARACTER(1),.                                          CEL  130
    SWITCH='1',.                       /*INIT. CEL1 ENTRY             */CEL  140
    B1,AN=2,.                                                           CEL  150
    GO TO COM,.                                                         CEL  160
 CEL2..                                                                 CEL  170
 /*********************************************************************/CEL  180
 /*                                                                   */CEL  190
 /*      GENERALIZED COMPLETE ELLIPTIC INTEGRAL OF SECOND KIND        */CEL  200
 /*                                                                   */CEL  210
 /*********************************************************************/CEL  220
    ENTRY(RES,K,A,B),.                                                  CEL  230
    SWITCH='2',.                       /*INIT. CEL2 ENTRY             */CEL  240
    AA   =A,.                                                           CEL  250
    AN   =A+B,.                                                         CEL  260
    B1,W =B+B,.                                                         CEL  270
 COM..                                 /*START COMMON CALCULATION     */CEL  280
    ERROR='0',.                        /*PRESET ERROR PARAMETER       */CEL  290
    GEO  =(0.5-K)+0.5,.                /*COMP. GEO = 1-K*K            */CEL  300
    GEO  =GEO+GEO*K,.                                                   CEL  310
    IF GEO LE 0                        /*TEST FOR SPECIAL CASES OF K  */CEL  320
    THEN DO,.                          /*ABS(K) NOT LESS THAN ONE     */CEL  330
         RES  =1.E75,.                 /*IS INTERPRETED AS IF EQUAL 1 */CEL  340
         IF B1 LT 0                                                     CEL  350
         THEN RES  =-RES,.             /*CEL2..NEGATIVE PARAMETER B   */CEL  360
         IF B1=0                                                        CEL  370
         THEN RES  =AA,.               /*CEL2..ZERO PARAMETER B       */CEL  380
         IF GEO NE 0                                                    CEL  390
         THEN ERROR='1',.                                               CEL  400
         GO TO RETURN,.                                                 CEL  410
         END,.                                                          CEL  420
    ARI  =2,.                          /*PROCESS OF THE ARITHMETIC-   */CEL  430
 ITER..                                /*GEOMETRIC MEAN               */CEL  440
    GEO  =SQRT(GEO),.                                                   CEL  450
    GEO  =GEO+GEO,.                                                     CEL  460
    AARI =ARI,.                                                         CEL  470
    ARI  =ARI+GEO,.                                                     CEL  480
    IF SWITCH='2'                                                       CEL  490
    THEN DO,.                                                           CEL  500
         W    =W+AA*GEO,.                                               CEL  510
         W    =W+W,.                                                    CEL  520
         B1   =W/ARI,.                                                  CEL  530
         AA   =AN,.                                                     CEL  540
         END,.                                                          CEL  550
    B1,AN=AN+B1,.                                                       CEL  560
    IF GEO/AARI LT .9999               /*SINGLE PRECISION VERSION  /*S*/CEL  570
  /*IF GEO/AARI LT .999999995          /*DOUBLE PRECISION VERSION  /*D*/CEL  580
    THEN DO,.                                                           CEL  590
         GEO  =GEO*AARI,.                                               CEL  600
         GO TO ITER,.                                                   CEL  610
         END,.                                                          CEL  620
    RES  =1.570796326794897E0*AN/ARI,.                                  CEL  630
 RETURN..                                                               CEL  640
    END,.                              /*END OF PROCEDURE CEL         */CEL  650
 ELI1..                                                                 ELI   10
 /*********************************************************************/ELI   20
 /*                                                                   */ELI   30
 /*      ELLIPTIC INTEGRAL OF FIRST KIND                              */ELI   40
 /*                                                                   */ELI   50
 /*********************************************************************/ELI   60
    PROCEDURE(RES,ARG,CMOD),.                                           ELI   70
    DECLARE                                                             ELI   80
         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */ELI   90
         (RES,ARG,CMOD,A,B,AN,APIM,PIM,ARI,AARI,GEO,SGEO,ANG,           ELI  100
         AANG,C,D,P,X,R,AA,AMB)                                         ELI  110
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/ELI  120
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/ELI  130
         ISI BINARY FIXED,                                              ELI  140
         SWITCH CHARACTER(1),.                                          ELI  150
    SWITCH='1',.                       /*INIT. ELI1 ENTRY             */ELI  160
    R    =1,.                                                           ELI  170
    GO TO COM,.                                                         ELI  180
 ELI2..                                                                 ELI  190
 /*********************************************************************/ELI  200
 /*                                                                   */ELI  210
 /*      GENERALIZED ELLIPTIC INTEGRAL OF SECOND KIND                 */ELI  220
 /*                                                                   */ELI  230
 /*********************************************************************/ELI  240
    ENTRY(RES,ARG,CMOD,A,B),.                                           ELI  250
    SWITCH='2',.                       /*INIT. ELI2 ENTRY             */ELI  260
    D    =0.5,.                                                         ELI  270
    C    =0,.                                                           ELI  280
    AA   =A,.                                                           ELI  290
    R    =B,.                                                           ELI  300
    AMB  =AA-R,.                                                        ELI  310
    AN   =(AA+R)*.5,.                                                   ELI  320
 COM..                                 /*START COMMON CALCULATION     */ELI  330
    ERROR='0',.                        /*SET ERROR PARAMETER          */ELI  340
    X    =ARG,.                                                         ELI  350
    IF X = 0                           /*TEST FOR ZERO ARGUMENT       */ELI  360
    THEN DO,.                                                           ELI  370
         GEO  =0,.                                                      ELI  380
         GO TO RETURN,.                                                 ELI  390
         END,.                                                          ELI  400
    GEO  =ABS(CMOD),.                  /*SET UP GEO(0)                */ELI  410
    IF GEO= 0                          /*TEST FOR MODULUS EQUAL ONE   */ELI  420
    THEN DO,.                                                           ELI  430
         AN,ANG=1,.                                                     ELI  440
         AANG,GEO=SQRT(1+X*X),.                                         ELI  450
         D    =ABS(X),.                                                 ELI  460
         GEO  =R*LOG(D+GEO),.                                           ELI  470
         GO TO TWO,.                                                    ELI  480
         END,.                                                          ELI  490
    ARI  =1,.                          /*SET UP ARI(0)                */ELI  500
    ANG  =ABS(1/X),.                   /*SET UP ANG(0)                */ELI  510
    PIM  =0,.                          /*INIT. MULTIPLE OF PI         */ELI  520
    ISI  =0,.                                                           ELI  530
 LOOP..                                /*START CENTRAL LOOP           */ELI  540
    APIM =PIM,.                        /*COUNTER I STARTS WITH ONE    */ELI  550
    AARI =ARI,.                        /*SAVE ARI(I-1)                */ELI  560
    ARI  =ARI+GEO,.                    /*CALCULATE ARI(I)             */ELI  570
    SGEO =AARI*GEO,.                                                    ELI  580
    ANG  =ANG-SGEO/ANG,.               /*CALCULATE ANG(I)             */ELI  590
    SGEO =SQRT(SGEO),.                                                  ELI  600
    IF ANG=0                           /*INCREASE ANG(I) IF ZERO      */ELI  610
    THEN ANG  =SGEO*1.E-8,.            /*SINGLE PRECISION VERSION  /*S*/ELI  620
  /*THEN ANG  =SGEO*1.E-16,.           /*DOUBLE PRECISION VERSION  /*D*/ELI  630
    IF ANG LT 0                                                         ELI  640
    THEN DO,.                                                           ELI  650
         PIM  =3.141592653589793E0+PIM,.                                ELI  660
         ISI  =ISI+1,.                                                  ELI  670
         END,.                                                          ELI  680
    IF SWITCH='2'                                                       ELI  690
    THEN DO,.                                                           ELI  700
         R    =AA*GEO+R,.              /*CALCULATE B(I)               */ELI  710
         AA   =AN,.                    /*SAVE A(I)                    */ELI  720
         AN   =0.5*(AN+R/ARI),.        /*CALCULATE A(I+1)             */ELI  730
         AANG =ARI*ARI+ANG*ANG,.                                        ELI  740
         P    =D/SQRT(AANG),.          /*CALCULATE I-TH TERM OF SUM   */ELI  750
         IF ISI GE 4                                                    ELI  760
         THEN ISI  =ISI-4,.                                             ELI  770
         IF ISI GE 2                   /*CHANGE SIGN IF ANGLE IS IN   */ELI  780
         THEN P    =-P,.               /*THIRD OR FOURTH QUADRANT     */ELI  790
         C    =C+P,.                                                    ELI  800
         D    =D*(AARI-GEO)*0.5/ARI,.                                   ELI  810
         END,.                                                          ELI  820
                                       /*TEST FOR CONVERGENCE         */ELI  830
    IF ABS(AARI-GEO) GT AARI*1E-4      /*SINGLE PRECISION VERSION  /*S*/ELI  840
  /*IF ABS(AARI-GEO) GT AARI*5E-9      /*DOUBLE PRECISION VERSION  /*D*/ELI  850
    THEN DO,.                                                           ELI  860
         GEO  =SGEO+SGEO,.                                              ELI  870
         PIM  =PIM+APIM,.                                               ELI  880
         ISI  =ISI+ISI,.                                                ELI  890
         GO TO LOOP,.                                                   ELI  900
         END,.                         /*END OF CENTRAL LOOP          */ELI  910
    GEO  =(ATAN(ARI/ANG)+PIM)/ARI,.                                     ELI  920
 TWO..                                                                  ELI  930
    IF SWITCH='2'                                                       ELI  940
    THEN DO,.                                                           ELI  950
         C    =C+D*ANG/AANG,.                                           ELI  960
         GEO  =GEO*AN+C*AMB,.                                           ELI  970
         END,.                                                          ELI  980
    IF X LT 0                                                           ELI  990
    THEN GEO  =-GEO,.                                                   ELI 1000
 RETURN..                                                               ELI 1010
    RES  =GEO,.                                                         ELI 1020
    END,.                              /*END OF PROCEDURE ELI         */ELI 1030
 JELF..                                                                 JELF  10
 /*********************************************************************/JELF  20
 /*                                                                   */JELF  30
 /*      JACOBIAN ELLIPTIC FUNCTIONS SN, CN, DN                       */JELF  40
 /*                                                                   */JELF  50
 /*********************************************************************/JELF  60
    PROCEDURE(SN,CN,DN,X,SCK),.                                         JELF  70
    DECLARE                                                             JELF  80
         ERROR EXTERNAL CHARACTER(1),  /*EXTERNAL ERROR INDICATOR     */JELF  90
         (SN,CN,DN,X,SCK,CM,Y,LSN,LCN,LDN,K,ARI(12),GEO(12),A,B,C,D)    JELF 100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/JELF 110
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/JELF 120
         (I,J) BINARY FIXED,.                                           JELF 130
    ERROR='0',.                                                         JELF 140
    CM   =SCK,.                                                         JELF 150
    Y    =X,.                                                           JELF 160
    IF CM= 0                           /*TEST VALUE OF MODULUS        */JELF 170
    THEN DO,.                          /*DEGENERATE CASE SCK = 0      */JELF 180
         LCN,LDN=1/COSH(Y),.                                            JELF 190
         LSN  =TANH(Y),.                                                JELF 200
         GO TO RETURN,.                                                 JELF 210
         END,.                                                          JELF 220
    IF CM LT 0                                                          JELF 230
    THEN DO,.                          /*MODULUS TRANSFORMATION       */JELF 240
         K    =(0.5-CM)+0.5,.                                           JELF 250
         CM   =-CM/K,.                                                  JELF 260
         K    =SQRT(K),.                                                JELF 270
         Y    =K*Y,.                                                    JELF 280
         END,.                                                          JELF 290
    C,LDN=1,.                          /*PROCESS OF THE ARITHMETIC-   */JELF 300
         DO I=1 TO 12,.                /*GEOMETRIC MEAN               */JELF 310
         ARI(I),LCN=C,.                                                 JELF 320
         GEO(I),CM=SQRT(CM),.                                           JELF 330
         C    =.5*(LCN+CM),.                                            JELF 340
         IF ABS(LCN-CM) LE 1E-4*LCN    /*SINGLE PRECISION VERSION  /*S*/JELF 350
  /*     IF ABS(LCN-CM) LE 5E-9*LCN    /*DOUBLE PRECISION VERSION  /*D*/JELF 360
         THEN GO TO CONV,.                                              JELF 370
         CM   =CM*LCN,.                                                 JELF 380
         END,.                                                          JELF 390
 CONV..                                /*INIT. INVERSE GAUSS-         */JELF 400
    Y    =Y*C,.                        /*TRANSFORMATION               */JELF 410
    LSN,D=SIN(Y),.                                                      JELF 420
    LCN  =COS(Y),.                                                      JELF 430
    IF LSN= 0                                                           JELF 440
    THEN GO TO TEST,.                                                   JELF 450
    A    =LCN/LSN,.                                                     JELF 460
    C    =A*C,.                                                         JELF 470
         DO J =I TO 1 BY -1,.          /*INVERSE GAUSS-TRANSFORMATION */JELF 480
         B    =ARI(J),.                                                 JELF 490
         A    =A*C,.                                                    JELF 500
         C    =LDN*C,.                                                  JELF 510
         LDN  =(GEO(J)+A)/(B+A),.                                       JELF 520
         A    =C/B,.                                                    JELF 530
         END,.                                                          JELF 540
    LSN  =SQRT(1/(1+C*C)),.                                             JELF 550
    IF D LT 0                                                           JELF 560
    THEN LSN  =-LSN,.                                                   JELF 570
    LCN  =C*LSN,.                                                       JELF 580
 TEST..                                /*INVERSE MODULUS-TRANSFORMAT. */JELF 590
    IF SCK LT 0                                                         JELF 600
    THEN DO,.                                                           JELF 610
         A    =LDN,.                                                    JELF 620
         LDN  =LCN,.                                                    JELF 630
         LCN  =A,.                                                      JELF 640
         LSN  =LSN/K,.                                                  JELF 650
         END,.                                                          JELF 660
 RETURN..                              /*RETURN RESULT VALUES         */JELF 670
    SN   =LSN,.                                                         JELF 680
    CN   =LCN,.                                                         JELF 690
    DN   =LDN,.                                                         JELF 700
    END,.                              /*END OF PROCEDURE JELF        */JELF 710
 LGAM..                                                                 LGAM  10
 /*********************************************************************/LGAM  20
 /*                                                                   */LGAM  30
 /*      COMPUTES THE DOUBLE PRECISION NATURAL LOGARITHM OF THE GAMMA */LGAM  40
 /*      FUNCTION OF A GIVEN DOUBLE PRECISION ARGUMENT.               */LGAM  50
 /*                                                                   */LGAM  60
 /*********************************************************************/LGAM  70
    PROCEDURE (XX,DLNG),.                                               LGAM  80
    DECLARE                                                             LGAM  90
         (XX,ZZ,TERM,RZ2,DLNG) FLOAT BINARY (53),                       LGAM 100
         ERROR EXTERNAL CHARACTER(1),.                                  LGAM 110
    ERROR='0',.                                                         LGAM 120
    ZZ   =XX,.                                                          LGAM 130
    IF XX LE 1.E10                                                      LGAM 140
    THEN IF XX LE 1.E-09               /* XX IS NEAR 0 OR NEGATIVE    */LGAM 150
         THEN DO,.                     /* SET ERROR INDICATOR         */LGAM 160
              ERROR='2',.                                               LGAM 170
              DLNG =-1.E75,.                                            LGAM 180
              END,.                                                     LGAM 200
         ELSE DO,.                     /* XX > 0 AND < OR = TO 1.E+10 */LGAM 210
              TERM =1.E0,.                                              LGAM 220
 S10..                                                                  LGAM 230
              IF ZZ LE 18.E0           /* ZZ < OR = 18                */LGAM 240
              THEN DO,.                /* TRANSLATE ARGUMENT          */LGAM 250
                   TERM =TERM*ZZ,.                                      LGAM 260
                   ZZ   =ZZ+1.E0,.                                      LGAM 270
                   GO TO S10,.                                          LGAM 280
                   END,.                                                LGAM 290
              ELSE DO,.                /* CALC. EQUATION 1            */LGAM 300
                   RZ2  =1.E0/(ZZ*ZZ),.                                 LGAM 310
                   DLNG =(ZZ-0.5E0)*LOG(ZZ)-ZZ+0.918938533204672E0      LGAM 320
                         -LOG(TERM)+(1.E0/ZZ)*(.833333333333333E-01     LGAM 330
                         -(RZ2*(.277777777777777E-02+(RZ2*              LGAM 340
                         (.793650793650793E-03-(RZ2*                    LGAM 350
                         (.595238095238095E-03))))))),.                 LGAM 360
                   END,.                                                LGAM 380
              END,.                                                     LGAM 390
    ELSE IF XX LT 1.E70                /* XX > 1.E+10 AND < 1.E+70    */LGAM 400
         THEN DLNG =ZZ*(LOG(ZZ)-1.E0),./* CALC. EQUATION 2            */LGAM 410
         ELSE DO,.                     /* XX > OR = 1.E+70            */LGAM 450
              ERROR='1',.              /* SET ERROR INDICATOR         */LGAM 460
              DLNG =1.E75,.                                             LGAM 470
              END,.                                                     LGAM 480
    RETURN,.                                                            LGAM 500
    END,.                              /* END OF PROCEDURE LGAM       */LGAM 510
 TALY..                                                                 TALY  10
 /*********************************************************************/TALY  20
 /*                                                                   */TALY  30
 /*      TO CALCULATE TOTAL, MEAN, STANDARD DEVIATION, MINIMUM,       */TALY  40
 /*      MAXIMUM FOR EACH VARIABLE IN A SET (OR A SUBSET) OF OBSER-   */TALY  50
 /*      VATIONS.                                                     */TALY  60
 /*                                                                   */TALY  70
 /*********************************************************************/TALY  80
    PROCEDURE (A,S,TOTAL,AVER,SD,VMIN,VMAX,NO,NV),.                     TALY  90
    DECLARE                                                             TALY 100
         ERROR EXTERNAL CHARACTER (1),                                  TALY 110
         (I,J,K,NO,NV)                                                  TALY 120
         FIXED BINARY,                                                  TALY 130
         (A(*,*),S(*),TOTAL(*),AVER(*),SD(*),VMIN(*),VMAX(*),SCNT,D)    TALY 140
         FLOAT BINARY,.                                                 TALY 150
 /*                                                                   */TALY 160
 /*      CLEAR OUTPUT VECTORS AND INITIALIZE VMIN,VMAX.               */TALY 170
 /*                                                                   */TALY 180
    ERROR='0',.                                                         TALY 190
         DO I=1 TO NV,.                                                 TALY 200
         TOTAL(I)  =0,.                                                 TALY 210
         AVER(I)   =0,.                                                 TALY 220
         SD(I)     =0,.                                                 TALY 230
         VMIN(I)   =0,.                                                 TALY 240
         VMAX(I)   =0,.                                                 TALY 250
         END,.                                                          TALY 260
    IF NV LE 0 OR NO LE 0              /* NUMBER OF OBSERVATIONS OR   */TALY 270
    THEN DO,.                          /* THE NUMBER OF VARIABLES LESS*/TALY 280
         ERROR='1',.                   /* THAN OR EQUAL TO ZERO.      */TALY 290
         GO TO S50,.                                                    TALY 300
         END,.                                                          TALY 310
         DO J = 1 TO NV,.                                               TALY 320
         TOTAL(J)=0.0,.                                                 TALY 330
         AVER(J)=0.0,.                                                  TALY 340
         SD(J)=0.0,.                                                    TALY 350
         END,.                                                          TALY 360
         DO J = 1 TO NO,.                                               TALY 370
         IF S(J) NE 0.0                                                 TALY 380
         THEN DO,.                                                      TALY 390
              K    =J,.                                                 TALY 400
              GO TO S10,.                                               TALY 410
              END,.                                                     TALY 420
         END,.                                                          TALY 430
 /*                                                                   */TALY 440
 /*      NO OBSERVATIONS ARE IN SUBSET                                */TALY 450
 /*                                                                   */TALY 460
    ERROR='2',.                                                         TALY 470
    GO TO S50,.                                                         TALY 480
 S10..                                                                  TALY 490
         DO J = 1 TO NV,.                                               TALY 500
         VMIN(J)=A(K,J),.                                               TALY 510
         VMAX(J)=VMIN(J),.                                              TALY 520
         END,.                                                          TALY 530
    SCNT =0.0,.                        /* TEST SUBSET VECTOR          */TALY 540
         DO I = K TO NO,.                                               TALY 550
         IF S(I) NE 0.0                                                 TALY 560
         THEN DO,.                                                      TALY 570
              SCNT =SCNT+1.0,.                                          TALY 580
                   DO J = 1 TO NV,.    /* CALCULATE TOTAL,MAX,MIN     */TALY 590
                   TOTAL(J)=TOTAL(J)+A(I,J),.                           TALY 600
                   IF A(I,J) LT VMIN(J)                                 TALY 610
                   THEN VMIN(J)=A(I,J),.                                TALY 620
                   IF A(I,J) GT VMAX(J)                                 TALY 630
                   THEN VMAX(J)=A(I,J),.                                TALY 640
                   SD(J)=SD(J)+A(I,J)*A(I,J),.                          TALY 650
                   END,.                                                TALY 660
              END,.                                                     TALY 670
         END,.                                                          TALY 680
 /*                                                                   */TALY 690
 /*      CALCULATE MEANS AND STANDARD DEVIATIONS.                     */TALY 700
 /*                                                                   */TALY 710
         DO J = 1 TO NV,.                                               TALY 720
         AVER(J)=TOTAL(J)/SCNT,.       /* COMPUTE MEAN                */TALY 730
         IF SCNT= 1.0                                                   TALY 740
         THEN DO,.                                                      TALY 750
              ERROR='3',.              /* SAMPLE SIZE IN SUBSET = 1   */TALY 760
              SD(J)=0.0,.                                               TALY 770
              GO TO S20,.                                               TALY 780
              END,.                                                     TALY 790
         ELSE DO,.                                                      TALY 800
              D    =SD(J)-TOTAL(J)*TOTAL(J)/SCNT,.                      TALY 810
              IF D LE 0.0                                               TALY 820
              THEN DO,.                                                 TALY 830
                   ERROR='4',.         /* VARIANCE = 0.0              */TALY 840
                   SD(J)=0.0,.                                          TALY 850
                   GO TO S20,.                                          TALY 860
                   END,.                                                TALY 870
              ELSE SD(J)=SQRT(D/(SCNT-1.0)),.                           TALY 880
              END,.                                                     TALY 890
 S20..                                                                  TALY 900
         END,.                                                          TALY 910
 S50..                                                                  TALY 920
    RETURN,.                                                            TALY 930
    END,.                              /*END OF PROCEDURE TALY        */TALY 940
 BOUN..                                                                 BOUN  10
 /*********************************************************************/BOUN  20
 /*                                                                   */BOUN  30
 /*      TO SELECT FROM A SET (OR A SUBSET) OF OBSERVATIONS THE       */BOUN  40
 /*      NUMBER OF OBSERVATIONS UNDER, BETWEEN AND OVER TWO GIVEN     */BOUN  50
 /*      BOUNDS FOR EACH VARIABLE.                                    */BOUN  60
 /*                                                                   */BOUN  70
 /*********************************************************************/BOUN  80
    PROCEDURE (A,S,BLO,BHI,UNDER,BETW,OVER,NO,NV),.                     BOUN  90
    DECLARE                                                             BOUN 100
         (I,J,NO,NV)                                                    BOUN 110
         FIXED BINARY,                                                  BOUN 120
         ERROR EXTERNAL CHARACTER(1),                                   BOUN 130
         (A(*,*),S(*),BLO(*),BHI(*),UNDER(*),BETW(*),OVER(*))           BOUN 140
         FLOAT BINARY,.                                                 BOUN 150
 /*                                                                   */BOUN 160
    ERROR='0',.                                                         BOUN 170
    IF NV LE 0 OR NO LE 0              /* NUMBER OF OBSERVATIONS OR   */BOUN 180
    THEN DO,.                          /* THE NUMBER OF VARIABLES LESS*/BOUN 190
         ERROR='1',.                   /* THAN OR EQUAL TO ZERO.      */BOUN 200
         GO TO FIN,.                                                    BOUN 210
         END,.                                                          BOUN 220
         DO J = 1 TO NV,.              /* CLEAR OUTPUT VECTORS        */BOUN 230
         UNDER(J)=0.0,.                                                 BOUN 240
         BETW(J)=0.0,.                                                  BOUN 250
         OVER(J)=0.0,.                                                  BOUN 260
         END,.                                                          BOUN 270
         DO J = 1 TO NV,.                                               BOUN 280
         IF BHI(J) LE BLO(J)           /* LOWER BOUND GREATER THAN    */BOUN 290
         THEN DO,.                     /* UPPER BOUND.                */BOUN 300
              ERROR='2',.                                               BOUN 310
              GO TO FIN,.                                               BOUN 320
              END,.                                                     BOUN 330
         END,.                                                          BOUN 340
         DO I = 1 TO NO,.                                               BOUN 350
         IF S(I) NE 0.0                /* TEST SUBSET VECTOR          */BOUN 360
         THEN DO,.                                                      BOUN 370
 /*                                                                   */BOUN 380
 /*      COMPARE OBSERVATIONS WITH BOUNDS                             */BOUN 390
 /*                                                                   */BOUN 400
                   DO J = 1 TO NV,.                                     BOUN 410
                   IF A(I,J) GE BLO(J)                                  BOUN 420
                   THEN DO,.                                            BOUN 430
                        IF A(I,J) LE BHI(J)                             BOUN 440
                        THEN BETW(J)=BETW(J)+1.0,.                      BOUN 450
                        ELSE OVER(J)=OVER(J)+1.0,.                      BOUN 460
                        END,.                                           BOUN 470
                   ELSE UNDER(J)=UNDER(J)+1.0,.                         BOUN 480
                   END,.                                                BOUN 490
              END,.                                                     BOUN 500
         END,.                                                          BOUN 510
 FIN..                                                                  BOUN 520
    RETURN,.                                                            BOUN 530
    END,.                              /*END OF PROCEDURE BOUN        */BOUN 540
 ABST..                                                                 ABST  10
 /*********************************************************************/ABST  20
 /*                                                                   */ABST  30
 /*      TO TEST MISSING OR ZERO VALUES FOR OBSERVATION MATRIX A.     */ABST  40
 /*                                                                   */ABST  50
 /*********************************************************************/ABST  60
    PROCEDURE (A,S,NO,NV),.                                             ABST  70
    DECLARE                                                             ABST  80
         (I,J,NO,NV)                                                    ABST  90
         FIXED BINARY,                                                  ABST 100
         ERROR EXTERNAL CHARACTER(1),                                   ABST 110
         (A(*,*),S(*)) FLOAT BINARY,.                                   ABST 120
 /*                                                                   */ABST 130
    ERROR='0',.                                                         ABST 140
    IF NV LE 0 OR NO LE 0              /* NUMBER OF OBSERVATIONS OR   */ABST 150
    THEN DO,.                          /* THE NUMBER OF VARIABLES LESS*/ABST 160
         ERROR='1',.                   /* THAN OR EQUAL TO ZERO.      */ABST 170
         GO TO FIN,.                                                    ABST 180
         END,.                                                          ABST 190
         DO I = 1 TO NO,.                                               ABST 200
              DO J = 1 TO NV,.                                          ABST 210
              IF A(I,J)= 0.0                                            ABST 220
              THEN DO,.                                                 ABST 230
                   S(I) =0.0,.                                          ABST 240
                   GO TO S10,.                                          ABST 250
                   END,.                                                ABST 260
              END,.                                                     ABST 270
         S(I) =1.0,.                                                    ABST 280
 S10..                                                                  ABST 290
         END,.                                                          ABST 300
 FIN..                                                                  ABST 310
    RETURN,.                                                            ABST 320
    END,.                              /*END OF PROCEDURE ABST        */ABST 330
 SBST..                                                                 SBST  10
 /*********************************************************************/SBST  20
 /*                                                                   */SBST  30
 /*      TO DERIVE A SUBSET VECTOR INDICATING WHICH OBSERVATIONS IN   */SBST  40
 /*      A SET HAVE SATISFIED CERTAIN CONDITIONS.                     */SBST  50
 /*                                                                   */SBST  60
 /*********************************************************************/SBST  70
    PROCEDURE (A,C,R,B,S,NO,NV,NC),.                                    SBST  80
    DECLARE                                                             SBST  90
         B ENTRY,                                                       SBST 100
         ERROR EXTERNAL CHARACTER(1),                                   SBST 110
         (I,ICOL,IGO,J,NC,NO)                                           SBST 120
         FIXED BINARY,                                                  SBST 130
         (A(*,*),C(*,*),R(*),S(*),Q,TR)                                 SBST 140
         BINARY FLOAT,                                                  SBST 150
         T(6) LABEL,.                                                   SBST 160
 /*                                                                   */SBST 170
    ERROR='0',.                                                         SBST 180
         DO I=1 TO NO,.                                                 SBST 190
         S(I) =0,.                                                      SBST 200
         END,.                                                          SBST 210
    IF NO LE 0 OR NV LE 0 OR NC LE 0   /* NUMBER OF OBSERVATIONS,     */SBST 220
    THEN DO,.                          /* VARIABLES, OR CONDITIONS IS */SBST 230
         ERROR='1',.                   /* LESS THAN OR EQUAL TO ZERO. */SBST 240
         GO TO FIN,.                                                    SBST 250
         END,.                                                          SBST 260
         DO I = 1 TO NO,.                                               SBST 270
              DO J = 1 TO NC,.                                          SBST 280
              R(J) =0.0,.              /* CLEAR R VECTOR              */SBST 290
 /*                                                                   */SBST 300
 /*      LOCATE ELEMENT IN OBSERVATION MATRIX AND RELATION CODE       */SBST 310
 /*                                                                   */SBST 320
              ICOL =C(1,J),.                                            SBST 330
              IGO  =C(2,J),.                                            SBST 340
              IF IGO LT 1 OR IGO GT 6  /* CONDITION VALUE INVALID     */SBST 350
              THEN DO,.                                                 SBST 360
                   ERROR='2',.                                          SBST 370
                   GO TO FIN,.                                          SBST 380
                   END,.                                                SBST 390
              IF ICOL LT 1 OR ICOL GT NV                                SBST 400
              THEN DO,.                                                 SBST 410
                   ERROR ='3',.        /* INVALID VARIABLE NUMBER     */SBST 420
                   GO TO FIN,.                                          SBST 430
                   END,.                                                SBST 440
              Q    =A(I,ICOL)-C(3,J),. /* FORM R VECTOR               */SBST 450
              GO TO T(IGO),.                                            SBST 460
 T(1)..                                                                 SBST 470
              IF Q LT 0.0                                               SBST 480
              THEN GO TO S10,.                                          SBST 490
              GO TO S20,.                                               SBST 500
 T(2)..                                                                 SBST 510
              IF Q LE 0.0                                               SBST 520
              THEN GO TO S10,.                                          SBST 530
              GO TO S20,.                                               SBST 540
 T(3)..                                                                 SBST 550
              IF Q = 0.0                                                SBST 560
              THEN GO TO S10,.                                          SBST 570
              GO TO S20,.                                               SBST 580
 T(4)..                                                                 SBST 590
              IF Q NE 0.0                                               SBST 600
              THEN GO TO S10,.                                          SBST 610
              GO TO S20,.                                               SBST 620
 T(5)..                                                                 SBST 630
              IF Q GE 0.0                                               SBST 640
              THEN GO TO S10,.                                          SBST 650
              GO TO S20,.                                               SBST 660
 T(6)..                                                                 SBST 670
              IF Q LE 0.0                                               SBST 680
              THEN GO TO S20,.                                          SBST 690
 S10..                                                                  SBST 700
              R(J) =1.0,.                                               SBST 710
 S20..                                                                  SBST 720
              END,.                                                     SBST 730
         CALL B (R,TR),.               /* CALCULATE S VECTOR          */SBST 740
         S(I) =TR,.                                                     SBST 750
         END,.                                                          SBST 760
 FIN..                                                                  SBST 770
    RETURN,.                                                            SBST 780
    END,.                              /*END OF PROCEDURE SBST        */SBST 790
 TAB1..                                                                 TAB1  10
 /*********************************************************************/TAB1  20
 /*                                                                   */TAB1  30
 /*      TO TABULATE FOR ONE VARIABLE IN AN OBSERVATION MATRIX (OR A  */TAB1  40
 /*      SUBSET), THE FREQUENCY AND PERCENT FREQUENCY OVER GIVEN      */TAB1  50
 /*      CLASS INTERVALS. IN ADDITION, CALCULATE FOR THE SAME VARIABLE*/TAB1  60
 /*      THE TOTAL, MEAN, STANDARD DEVIATION, MINIMUM, AND            */TAB1  70
 /*      MAXIMUM.                                                     */TAB1  80
 /*                                                                   */TAB1  90
 /*********************************************************************/TAB1 100
    PROCEDURE (A,S,NOVAR,UBO,FREQ,PCT,STATS,NO,NV),.                    TAB1 110
    DECLARE                                                             TAB1 120
         ERROR EXTERNAL CHARACTER (1),                                  TAB1 130
         (I,INN,INTX,J,K,NO,NOVAR,KK)                                   TAB1 140
         FIXED BINARY,                                                  TAB1 150
         (A(*,*),S(*),UBO(*),FREQ(*),PCT(*),STATS(*),SCNT,VMIN,VMAX,    TAB1 160
         SINT,TEMP)                                                     TAB1 170
         BINARY FLOAT,.                                                 TAB1 180
 /*                                                                   */TAB1 190
    ERROR='0',.                                                         TAB1 200
         IF NOVAR LE 0 OR NOVAR GT NV  /* VALUE OF THE VARIABLE TO BE */TAB1 210
         THEN DO,.                     /* TABULATED IS INVALID        */TAB1 220
              ERROR='6',.                                               TAB1 230
              GO TO S50,.                                               TAB1 240
              END,.                                                     TAB1 250
    IF NV LE 0 OR NO LE 0                                               TAB1 260
    THEN DO,.                          /* NUMBER OF OBSERVATIONS OR   */TAB1 270
         ERROR='1',.                   /* THE NUMBER OF VARIABLES ARE */TAB1 280
         GO TO S50,.                   /* LESS THAN OR EQUAL TO ZERO. */TAB1 290
         END,.                                                          TAB1 300
    INN  =UBO(2),.                     /* CALCULATE INTERVAL SIZE     */TAB1 310
         DO J = 1 TO INN,.             /* CLEAR OUTPUT VECTORS        */TAB1 320
         FREQ(J)=0.0,.                                                  TAB1 330
         PCT(J)=0.0,.                                                   TAB1 340
         END,.                                                          TAB1 350
         DO J = 1 TO 5,.                                                TAB1 360
         STATS(J)=0.0,.                                                 TAB1 370
         END,.                                                          TAB1 380
    IF UBO(1) GT UBO(3) OR UBO(2) LE 2.0                                TAB1 390
    THEN DO,.                          /* INVALID BOUNDS OR THE NUMBER*/TAB1 400
         ERROR='2',.                   /* OF INTERVALS LESS THAN OR   */TAB1 410
         GO TO S50,.                   /* EQUAL TO TWO.               */TAB1 420
         END,.                                                          TAB1 430
         DO I = 1 TO NO,.              /* CALCULATE MAX AND MIN       */TAB1 440
         IF S(I) NE 0.0                                                 TAB1 450
         THEN DO,.                                                      TAB1 460
              KK   =I,.                                                 TAB1 470
              VMIN =A(I,NOVAR),.                                        TAB1 480
              VMAX =VMIN,.                                              TAB1 490
              GO TO S10,.                                               TAB1 500
              END,.                                                     TAB1 510
         END,.                                                          TAB1 520
    ERROR='3',.                        /* NO OBSERVATION IN SUBSET    */TAB1 530
    GO TO S50,.                                                         TAB1 540
 S10..                                                                  TAB1 550
         DO I = KK TO NO,.                                              TAB1 560
         IF S(I) NE 0.0                                                 TAB1 570
         THEN DO,.                                                      TAB1 580
              IF A(I,NOVAR) LT VMIN                                     TAB1 590
              THEN VMIN =A(I,NOVAR),.                                   TAB1 600
              IF A(I,NOVAR) GT VMAX                                     TAB1 610
              THEN VMAX =A(I,NOVAR),.                                   TAB1 620
              END,.                                                     TAB1 630
         END,.                                                          TAB1 640
    STATS(4)=VMIN,.                                                     TAB1 650
    STATS(5)=VMAX,.                                                     TAB1 660
    IF UBO(1)= UBO(3)                                                   TAB1 670
    THEN DO,.                                                           TAB1 680
         UBO(1)=VMIN,.                                                  TAB1 690
         UBO(3)=VMAX,.                                                  TAB1 700
         END,.                                                          TAB1 710
    SINT =(UBO(3)-UBO(1))/(UBO(2)-2),.                                  TAB1 720
    SCNT =0.0,.                        /* TEST SUBSET VECTOR          */TAB1 730
         DO I = KK TO NO,.                                              TAB1 740
         IF S(I) NE 0.0                                                 TAB1 750
         THEN DO,.                                                      TAB1 760
              SCNT =SCNT+1.0,.                                          TAB1 770
 /*                                                                   */TAB1 780
 /*      DEVELOP TOTALS AND FREQUENCIES                               */TAB1 790
 /*                                                                   */TAB1 800
              STATS(1)=STATS(1)+A(I,NOVAR),.                            TAB1 810
              STATS(3)=STATS(3)+A(I,NOVAR)**2,.                         TAB1 820
              TEMP =UBO(1)-SINT,.                                       TAB1 830
              INTX =INN-1,.                                             TAB1 840
                   DO J = 1 TO INTX,.                                   TAB1 850
                   TEMP =TEMP+SINT,.                                    TAB1 860
                   IF A(I,NOVAR) LT TEMP                                TAB1 870
                   THEN DO,.                                            TAB1 880
                        K    =J,.                                       TAB1 890
                        GO TO S20,.                                     TAB1 900
                        END,.                                           TAB1 910
                   END,.                                                TAB1 920
              IF A(I,NOVAR) GE TEMP                                     TAB1 930
              THEN DO,.                                                 TAB1 940
                   FREQ(INN)=FREQ(INN)+1.0,.                            TAB1 950
                   GO TO S30,.                                          TAB1 960
                   END,.                                                TAB1 970
 S20..                                                                  TAB1 980
              FREQ(K)=FREQ(K)+1.0,.                                     TAB1 990
              END,.                                                     TAB11000
 S30..                                                                  TAB11010
         END,.                                                          TAB11020
 /*                                                                   */TAB11030
 /*      CALCULATE RELATIVE FREQUENCIES                               */TAB11040
 /*                                                                   */TAB11050
         DO J = 1 TO INN,.                                              TAB11060
         PCT(J)=FREQ(J)*100.0/SCNT,.                                    TAB11070
         END,.                                                          TAB11080
 /*                                                                   */TAB11090
 /*      CALCULATE MEAN AND STANDARD DEVIATION                        */TAB11100
 /*                                                                   */TAB11110
    STATS(2)=STATS(1)/SCNT,.                                            TAB11120
    IF SCNT= 1.0                                                        TAB11130
    THEN DO,.                                                           TAB11140
         ERROR='4',.                   /* SAMPLE SIZE = 1             */TAB11150
         STATS(3)=0.0,.                                                 TAB11160
         GO TO S50,.                                                    TAB11170
         END,.                                                          TAB11180
    ELSE DO,.                                                           TAB11190
         TEMP =STATS(3)-STATS(1)*STATS(1)/SCNT,.                        TAB11200
         IF TEMP LE 0.0                                                 TAB11210
         THEN DO,.                                                      TAB11220
              ERROR='5',.              /* VARIANCE = 0.0              */TAB11230
              STATS(3)=0.0,.                                            TAB11240
              GO TO S50,.                                               TAB11250
              END,.                                                     TAB11260
         ELSE STATS(3)=SQRT(TEMP/(SCNT-1.0)),.                          TAB11270
         END,.                                                          TAB11280
 S50..                                                                  TAB11290
    RETURN,.                                                            TAB11300
    END,.                              /*END OF PROCEDURE TAB1        */TAB11310
 TAB2..                                                                 TAB2  10
 /*********************************************************************/TAB2  20
 /*                                                                   */TAB2  30
 /*      TO PERFORM A TWO-WAY CLASSIFICATION OF THE FREQUENCY,        */TAB2  40
 /*      PERCENT FREQUENCY, AND OTHER STATISTICS, OVER GIVEN          */TAB2  50
 /*      CLASS INTERVALS, FOR TWO SELECTED VARIABLES IN AN OBSERVATION*/TAB2  60
 /*      MATRIX.                                                      */TAB2  70
 /*                                                                   */TAB2  80
 /*********************************************************************/TAB2  90
    PROCEDURE (A,S,NOV,UBO,FREQ,PCT,STAT1,STAT2,NO,NV),.                TAB2 100
    DECLARE                                                             TAB2 110
         ERROR EXTERNAL CHARACTER (1),                                  TAB2 120
         (A(*,*),UBO(*,*),FREQ(*,*),PCT(*,*),STAT1(*,*),STAT2(*,*),     TAB2 130
         S(*),SINT(2),VMIN,VMAX,SCNT,TEMP,TN,TT,TEMP1,TEMP2)            TAB2 140
         BINARY FLOAT,                                                  TAB2 150
         (I,INT1,INT2,J,K,KX,L,N,N1,N2,NO,NOV(*),KK)                    TAB2 160
         FIXED BINARY,.                                                 TAB2 170
 /*                                                                   */TAB2 180
    ERROR='0',.                                                         TAB2 190
         DO I=1 TO 2,.                                                  TAB2 200
         IF NOV(I) LE 0 OR NOV(I) GT NV/* INVALID VALUE OF VARIABLE TO*/TAB2 210
         THEN DO,.                     /* BE CROSS TABULATED          */TAB2 220
              ERROR='6',.                                               TAB2 230
              GO TO S50,.                                               TAB2 240
              END,.                                                     TAB2 250
         END,.                                                          TAB2 260
    IF NV LE 0 OR NO LE 0              /* NUMBER OF OBSERVATIONS OR   */TAB2 270
    THEN DO,.                          /* THE NUMBER OF VARIABLES ARE */TAB2 280
         ERROR='1',.                   /* LESS THAN OR EQUAL TO ZERO. */TAB2 290
         GO TO S50,.                                                    TAB2 300
         END,.                                                          TAB2 310
    INT1 =UBO(2,1),.                                                    TAB2 320
    INT2 =UBO(2,2),.                                                    TAB2 330
    N1   =NOV(1),.                                                      TAB2 340
    N2   =NOV(2),.                                                      TAB2 350
         DO I = 1 TO 2,.                                                TAB2 360
         IF UBO(1,I) GT UBO(3,I) OR UBO(2,I) LE 2.0                     TAB2 370
         THEN DO,.                     /* INVALID BOUNDS OR THE NUMBER*/TAB2 380
              ERROR='2',.              /* OF INTERVALS LESS THAN OR   */TAB2 390
              GO TO S50,.              /* EQUAL TO TWO.               */TAB2 400
              END,.                                                     TAB2 410
         END,.                                                          TAB2 420
         DO I = 1 TO INT1,.            /* CLEAR OUTPUT VECTORS        */TAB2 430
              DO J = 1 TO INT2,.                                        TAB2 440
              PCT(I,J)=0.0,.                                            TAB2 450
              FREQ(I,J)=0.0,.                                           TAB2 460
              END,.                                                     TAB2 470
         END,.                                                          TAB2 480
         DO I = 1 TO 3,.                                                TAB2 490
              DO J = 1 TO INT1,.                                        TAB2 500
              STAT1(I,J)=0.0,.                                          TAB2 510
              END,.                                                     TAB2 520
              DO J = 1 TO INT2,.                                        TAB2 530
              STAT2(I,J)=0.0,.                                          TAB2 540
              END,.                                                     TAB2 550
         END,.                                                          TAB2 560
         DO I = 1 TO 2,.                                                TAB2 570
         IF UBO(1,I)= UBO(3,I)         /* DETERMINE LIMITS            */TAB2 580
         THEN DO,.                                                      TAB2 590
                   DO J = 1 TO NO,.                                     TAB2 600
                   IF S(J) NE 0.0                                       TAB2 610
                   THEN DO,.                                            TAB2 620
                        KK   =J,.                                       TAB2 630
                        N    =NOV(I),.                                  TAB2 640
                        VMAX =A(J,N),.                                  TAB2 650
                        VMIN =VMAX,.                                    TAB2 660
                        GO TO S10,.                                     TAB2 670
                        END,.                                           TAB2 680
                   END,.                                                TAB2 690
 S10..                                                                  TAB2 700
                   DO J = KK TO NO,.                                    TAB2 710
                   IF S(J) NE 0.0                                       TAB2 720
                   THEN DO,.                                            TAB2 730
                        IF A(J,N) LT VMIN                               TAB2 740
                        THEN VMIN =A(J,N),.                             TAB2 750
                        IF A(J,N) GT VMAX                               TAB2 760
                        THEN VMAX =A(J,N),.                             TAB2 770
                        END,.                                           TAB2 780
                   END,.                                                TAB2 790
              UBO(1,I)=VMIN,.                                           TAB2 800
              UBO(3,I)=VMAX,.                                           TAB2 810
              END,.                                                     TAB2 820
         END,.                                                          TAB2 830
 /*                                                                   */TAB2 840
 /*      CALCULATE INTERVAL SIZE                                      */TAB2 850
 /*                                                                   */TAB2 860
         DO J = 1 TO 2,.                                                TAB2 870
         SINT(J)   =(UBO(3,J)-UBO(1,J))/(UBO(2,J)-(2+1E-3)),.           TAB2 880
         END,.                                                          TAB2 890
    SCNT =0.0,.                                                         TAB2 900
         DO J = 1  TO NO,.             /* TEST SUBSET VECTOR          */TAB2 910
         IF S(J) NE 0.0                                                 TAB2 920
         THEN DO,.                                                      TAB2 930
              SCNT =SCNT+1.0,.                                          TAB2 940
              TEMP1=UBO(1,1)-SINT(1),. /* CALCULATE FREQUENCIES       */TAB2 950
                   DO L = 1 TO INT1-1,.                                 TAB2 960
                   TEMP1=TEMP1+SINT(1),.                                TAB2 970
                   IF A(J,N1) LT TEMP1                                  TAB2 980
                   THEN DO,.                                            TAB2 990
                        K    =L,.                                       TAB21000
                        GO TO S20,.                                     TAB21010
                        END,.                                           TAB21020
                   END,.                                                TAB21030
              K    =INT1,.                                              TAB21040
 S20..                                                                  TAB21050
              STAT1(1,K)=STAT1(1,K)+A(J,N1),.                           TAB21060
              STAT1(2,K)=STAT1(2,K)+1.0,.                               TAB21070
              STAT1(3,K)=STAT1(3,K)+A(J,N1)**2,.                        TAB21080
              TEMP2=UBO(1,2)-SINT(2),.                                  TAB21090
                   DO L = 1 TO INT2-1,.                                 TAB21100
                   TEMP2=TEMP2+SINT(2),.                                TAB21110
                   IF A(J,N2) LT TEMP2                                  TAB21120
                   THEN DO,.                                            TAB21130
                        KX   =L,.                                       TAB21140
                        GO TO S30,.                                     TAB21150
                        END,.                                           TAB21160
                   END,.                                                TAB21170
              KX   =INT2,.                                              TAB21180
 S30..                                                                  TAB21190
              FREQ(K,KX)=FREQ(K,KX)+1.0,.                               TAB21200
              STAT2(1,KX)=STAT2(1,KX)+A(J,N2),.                         TAB21210
              STAT2(2,KX)=STAT2(2,KX)+1.0,.                             TAB21220
              STAT2(3,KX)=STAT2(3,KX)+A(J,N2)**2,.                      TAB21230
              END,.                                                     TAB21240
         END,.                                                          TAB21250
    IF SCNT= 0.0                                                        TAB21260
    THEN DO,.                                                           TAB21270
         ERROR='3',.                   /* NO OBSERVATIONS IN SUBSET   */TAB21280
         GO TO S50,.                                                    TAB21290
         END,.                                                          TAB21300
 /*                                                                   */TAB21310
 /*      CALCULATE PERCENT FREQUENCIES.                               */TAB21320
 /*                                                                   */TAB21330
         DO I = 1 TO INT1,.                                             TAB21340
              DO J = 1 TO INT2,.                                        TAB21350
              PCT(I,J)=FREQ(I,J)*100.0/SCNT,.                           TAB21360
              END,.                                                     TAB21370
         END,.                                                          TAB21380
 /*                                                                   */TAB21390
 /*      CALCULATE TOTALS, MEANS, STANDARD DEVIATIONS                 */TAB21400
 /*                                                                   */TAB21410
         DO J = 1 TO INT1,.                                             TAB21420
         TN=STAT1(2,J),.                                                TAB21425
         IF TN LE 1.0E0                                                 TAB21430
         THEN DO,.                                                      TAB21440
              ERROR='4',.              /* NUMBER OF OBSERVATIONS IS   */TAB21450
              STAT1(3,J)=0.0,.         /* LESS THAN OR EQUAL TO 1 IN  */TAB21460
              STAT1(2,J)=STAT1(1,J),.  /* SOME INTERVAL               */TAB21470
              END,.                                                     TAB21480
         ELSE DO,.                                                      TAB21490
              TT=STAT1(1,J),.                                           TAB21495
              TEMP=STAT1(3,J)-TT*TT/TN,.                                TAB21500
              STAT1(2,J)=TT/TN,.                                        TAB21510
              IF TEMP LE 0.0E0                                          TAB21520
              THEN DO,.                                                 TAB21530
                   ERROR='5',.         /* VARIANCE IS 0.0             */TAB21540
                   STAT1(3,J)=0.0,.                                     TAB21550
                   END,.                                                TAB21560
              ELSE STAT1(3,J)=SQRT(TEMP/(TN-1.0E0)),.                   TAB21570
              END,.                                                     TAB21580
         END,.                                                          TAB21590
         DO J = 1 TO INT2,.                                             TAB21600
         TN=STAT2(2,J),.                                                TAB21610
         IF TN LE 1.0E0                                                 TAB21620
         THEN DO,.                                                      TAB21630
              ERROR='4',.              /* NUMBER OF OBSERVATIONS IS   */TAB21640
              STAT2(3,J)=0.0,.         /* LESS THAN OR EQUAL TO 1 IN  */TAB21650
              STAT2(2,J)=STAT2(1,J),.  /* SOME INTERVAL               */TAB21660
              END,.                                                     TAB21670
         ELSE DO,.                                                      TAB21680
              TT=STAT2(1,J),.                                           TAB21685
              TEMP=STAT2(3,J)-TT*TT/TN,.                                TAB21690
              STAT2(2,J)=TT/TN,.                                        TAB21700
              IF TEMP LE 0.0E0                                          TAB21710
              THEN DO,.                                                 TAB21720
                   ERROR='5',.         /* VARIANCE = 0.0              */TAB21730
                   STAT2(3,J)=0.0,.                                     TAB21740
                   END,.                                                TAB21750
              ELSE STAT2(3,J)=SQRT(TEMP/(TN-1.0E0)),.                   TAB21760
              END,.                                                     TAB21770
         END,.                                                          TAB21780
 S50..                                                                  TAB21790
    RETURN,.                                                            TAB21800
    END,.                              /*END OF PROCEDURE TAB2        */TAB21810
 SUBM..                                                                 SUBM  10
 /*********************************************************************/SUBM  20
 /*                                                                   */SUBM  30
 /*      BASED ON VECTOR S DERIVED FROM PROCEDURE SBST OR ABST, THIS  */SUBM  40
 /*      PROCEDURE COPIES FROM A LARGER MATRIX OF OBSERVATION DATA A  */SUBM  50
 /*      SUBSET MATRIX OF THOSE OBSERVATIONS WHICH HAVE SATISFIED     */SUBM  60
 /*      CERTAIN CONDITIONS.                                          */SUBM  70
 /*                                                                   */SUBM  80
 /*********************************************************************/SUBM  90
    PROCEDURE (A,D,S,NO,NV,N),.                                         SUBM 100
    DECLARE                                                             SUBM 110
         (I,N,NO)                                                       SUBM 120
         FIXED BINARY,                                                  SUBM 130
         ERROR EXTERNAL CHARACTER(1),                                   SUBM 140
         (A(*,*),D(*,*),S(*)) FLOAT BINARY,.                            SUBM 150
 /*                                                                   */SUBM 160
    ERROR='0',.                                                         SUBM 170
    D    =0,.                                                           SUBM 180
    N    =0,.                                                           SUBM 190
    IF NV LE 0 OR NO LE 0              /* NUMBER OF OBSERVATIONS OR   */SUBM 200
    THEN ERROR='1',.                   /* THE NUMBER OF VARIABLES ARE */SUBM 210
    ELSE DO,.                          /* LESS THAN OR EQUAL TO ZERO. */SUBM 220
              DO I = 1 TO NO,.                                          SUBM 230
              IF S(I) NE 0.0                                            SUBM 240
              THEN DO,.                                                 SUBM 250
                   N    =N+1,.                                          SUBM 260
                        DO J = 1 TO NV,.                                SUBM 270
                        D(N,J)=A(I,J),.                                 SUBM 280
                        END,.                                           SUBM 290
                   END,.                                                SUBM 300
              END,.                                                     SUBM 310
         END,.                                                          SUBM 320
    RETURN,.                                                            SUBM 330
    END,.                              /*END OF PROCEDURE SUBM        */SUBM 340
 MOMN..                                                                 MOMN  10
 /*********************************************************************/MOMN  20
 /*                                                                   */MOMN  30
 /*      TO FIND THE FIRST FOUR MOMENTS FOR GROUPED DATA ON EQUAL     */MOMN  40
 /*      CLASS INTERVALS.                                             */MOMN  50
 /*                                                                   */MOMN  60
 /*********************************************************************/MOMN  70
    PROCEDURE (F,UBO,NOP,ANS),.                                         MOMN  80
    DECLARE                                                             MOMN  90
         (F(*),UBO(*),ANS(4),T,E,EE)                                    MOMN 100
         BINARY FLOAT,                                                  MOMN 110
         ERROR EXTERNAL CHARACTER (1),                                  MOMN 120
         (I,JUMP,NOP)                                                   MOMN 130
         FIXED BINARY,                                                  MOMN 140
         S(5) LABEL,.                                                   MOMN 150
 /*                                                                   */MOMN 160
    T    =0,.                          /* INITIALIZE                  */MOMN 170
    ANS  =0,.                                                           MOMN 180
    ERROR='0',.                                                         MOMN 190
    IF UBO(2) GT UBO(3) - UBO(1)                                        MOMN 200
    THEN DO,.                                                           MOMN 210
         ERROR='2',.                   /* INCORRECT NO. OF INTERVALS  */MOMN 220
         GO TO S(1),.                  /* FOR THE SPECIFIED BOUNDS    */MOMN 230
         END,.                                                          MOMN 240
    IF UBO(1) GT UBO(3) OR UBO(2) LE 0 /* INVALID BOUNDS              */MOMN 250
    THEN DO,.                                                           MOMN 260
         ERROR='1',.                                                    MOMN 270
         GO TO S(1),.                                                   MOMN 280
         END,.                         /* CALC. NO. OF CLASS INTERVALS*/MOMN 290
    N    =FLOOR((UBO(3)-UBO(1))/UBO(2)+1.0E-3),.                        MOMN 300
         DO I = 1 TO N,.               /* CALCULATE TOTAL FREQUENCY   */MOMN 310
         T    =T+F(I),.                                                 MOMN 320
         END,.                                                          MOMN 330
    JUMP =2,.                                                           MOMN 340
    IF NOP GE 5                                                         MOMN 350
    THEN DO,.                                                           MOMN 360
         NOP  =5,.                                                      MOMN 370
         JUMP =1,.                                                      MOMN 380
         END,.                                                          MOMN 390
    E    =UBO(1)-0.5*UBO(2),.                                           MOMN 400
         DO I = 1 TO N,.               /* FIRST MOMENT                */MOMN 410
         E    =E + UBO(2),.                                             MOMN 420
         ANS(1)=ANS(1)+F(I)*E,.                                         MOMN 430
         END,.                                                          MOMN 440
    ANS(1)=ANS(1)/T,.                                                   MOMN 450
    E    =UBO(1)-0.5*UBO(2)-ANS(1),.                                    MOMN 460
    S(5) =S(2),.                                                        MOMN 470
    GO TO S(NOP),.                                                      MOMN 480
 S(2)..                                                                 MOMN 490
    EE   =E,.                                                           MOMN 500
         DO I = 1 TO N,.               /* SECOND MOMENT               */MOMN 510
         EE   =EE+UBO(2),.                                              MOMN 520
         ANS(2)=ANS(2)+F(I)*EE**2,.                                     MOMN 530
         END,.                                                          MOMN 540
    ANS(2)=ANS(2)/T,.                                                   MOMN 550
    IF JUMP= 2                                                          MOMN 560
    THEN GO TO S(1),.                                                   MOMN 570
 S(3)..                                                                 MOMN 580
    EE   =E,.                                                           MOMN 590
         DO I = 1 TO N,.               /* THIRD MOMENT                */MOMN 600
         EE   =EE+UBO(2),.                                              MOMN 610
         ANS(3)=ANS(3)+F(I)*EE**3,.                                     MOMN 620
         END,.                                                          MOMN 630
    ANS(3)=ANS(3)/T,.                                                   MOMN 640
    IF JUMP = 2                                                         MOMN 650
    THEN GO TO S(1),.                                                   MOMN 660
 S(4)..                                                                 MOMN 670
    EE   =E,.                                                           MOMN 680
         DO I = 1 TO N,.               /* FOURTH MOMENT               */MOMN 690
         EE   =EE+UBO(2),.                                              MOMN 700
         ANS(4)=ANS(4)+F(I)*EE**4,.                                     MOMN 710
         END,.                                                          MOMN 720
    ANS(4)=ANS(4)/T,.                                                   MOMN 730
 S(1)..                                                                 MOMN 740
    RETURN,.                                                            MOMN 750
    END,.                              /* END PROCEDURE MOMN          */MOMN 760
 TTST..                                                                 TTST  10
 /*********************************************************************/TTST  20
 /*                                                                   */TTST  30
 /*      TO FIND CERTAIN T-STATISTICS ON THE MEANS OF POPULATIONS.    */TTST  40
 /*                                                                   */TTST  50
 /*********************************************************************/TTST  60
    PROCEDURE (A,NA,B,NB,NOP,NDF,ANS),.                                 TTST  70
    DECLARE                                                             TTST  80
         ERROR EXTERNAL CHARACTER (1),                                  TTST  90
         (A(*),B(*),ANS,AMEAN,BMEAN,FNA,FNB,SA2,SB2,S,A1,A2)            TTST 100
         FLOAT BINARY,                                                  TTST 110
         (I,NA,NB,NDF,NOP)                                              TTST 115
         BINARY FIXED,                                                  TTST 116
         (T(6)) LABEL,.                                                 TTST 120
 /*                                                                   */TTST 130
    NDF  ='0',.                        /* INITIALIZATION              */TTST 140
    ERROR='0',.                                                         TTST 150
    ANS  =0.0,.                                                         TTST 160
    IF NOP LT 1 OR NOP GT 4                                             TTST 170
    THEN DO,.                                                           TTST 180
         ERROR='1',.                   /* WRONG OPTION CODE           */TTST 190
         GO TO FIN,.                                                    TTST 200
         END,.                                                          TTST 210
    IF NOP=1 AND NA NE 1                                                TTST 220
    THEN DO,.                          /* NA MUST BE 1 WHEN NOP=1     */TTST 230
         ERROR='5',.                                                    TTST 240
         GO TO FIN,.                                                    TTST 250
         END,.                                                          TTST 260
    IF NOP=4 AND NB NE NA                                               TTST 270
    THEN DO,.                          /* NA MUST EQUAL NB WHEN NOP=4 */TTST 280
         ERROR='6',.                                                    TTST 290
         GO TO FIN,.                                                    TTST 300
         END,.                                                          TTST 310
 /*                                                                   */TTST 320
 /*      TEST SAMPLE SIZE                                             */TTST 330
 /*                                                                   */TTST 340
    IF NA LE 1                                                          TTST 350
    THEN DO,.                                                           TTST 360
         IF NOP GT 1                                                    TTST 370
         THEN DO,.                                                      TTST 380
              ERROR='2',.              /* FIRST SAMPLE FOR OPTIONS    */TTST 390
              GO TO FIN,.              /* 2-4 IS 1 OR LESS            */TTST 400
              END,.                                                     TTST 410
         END,.                                                          TTST 420
    IF NB LE 1                                                          TTST 430
    THEN DO,.                                                           TTST 440
         ERROR='2',.                   /* SECOND SAMPLE SIZE IS 1 OR  */TTST 450
         GO TO FIN,.                   /* LESS                        */TTST 460
         END,.                                                          TTST 470
    FNA  =NA,.                                                          TTST 480
    FNB  =NB,.                                                          TTST 490
    AMEAN=0.0,.                        /* CALCULATE MEAN OF A         */TTST 500
         DO I = 1 TO NA,.                                               TTST 510
         AMEAN=AMEAN+A(I),.                                             TTST 520
         END,.                                                          TTST 530
    AMEAN=AMEAN/FNA,.                                                   TTST 540
    BMEAN=0.0,.                        /* CALCULATE MEAN OF B         */TTST 550
         DO I = 1 TO NB,.                                               TTST 560
         BMEAN=BMEAN+B(I),.                                             TTST 570
         END,.                                                          TTST 580
    BMEAN=BMEAN/FNB,.                                                   TTST 590
 /*                                                                   */TTST 600
 /*      CALCULATE THE VARIANCE OF A                                  */TTST 610
 /*                                                                   */TTST 620
    IF NOP LT 4 AND NOP GT 1                                            TTST 630
    THEN DO,.                                                           TTST 640
         SA2  =0.0,.                                                    TTST 650
              DO I = 1 TO NA,.                                          TTST 660
              SA2  =SA2+(A(I)-AMEAN)**2,.                               TTST 670
              END,.                                                     TTST 680
         SA2  =SA2/(FNA-1.0),.                                          TTST 690
         IF SA2 LE 0.0                                                  TTST 700
         THEN DO,.                                                      TTST 710
              ERROR='3',.              /* FIRST SAMPLE VARIANCE = 0.0 */TTST 720
              GO TO FIN,.                                               TTST 730
              END,.                                                     TTST 740
         END,.                                                          TTST 750
    IF NOP LT 4                                                         TTST 760
    THEN DO,.                                                           TTST 770
         SB2  =0.0,.                                                    TTST 780
              DO I = 1 TO NB,.                                          TTST 790
              SB2  =SB2+(B(I)-BMEAN)**2,.                               TTST 800
              END,.                                                     TTST 810
         SB2  =SB2/(FNB-1.0),.                                          TTST 820
         IF SB2 LE 0.0                                                  TTST 830
         THEN DO,.                                                      TTST 840
              ERROR='3',.              /* SECOND SAMPLE VARIANCE = 0.0*/TTST 850
              GO TO FIN,.                                               TTST 860
              END,.                                                     TTST 870
         END,.                                                          TTST 880
    GO TO T(NOP),.                                                      TTST 890
 T(1)..                                /* OPTION ONE                  */TTST 900
    ANS  =((BMEAN-AMEAN)/SQRT(SB2))*SQRT(FNB),.                         TTST 910
    NDF  =NB-1,.                                                        TTST 920
    GO TO FIN,.                                                         TTST 930
 T(2)..                                /* OPTION TWO                  */TTST 940
    NDF  =NA+NB-2,.                                                     TTST 950
    S    =SQRT(((FNA-1.0)*SA2+(FNB-1.0)*SB2)/NDF),.                     TTST 960
    ANS  =((BMEAN-AMEAN)/S)*(1.0/SQRT(1.0/FNA+1.0/FNB)),.               TTST 970
    GO TO FIN,.                                                         TTST 980
 T(3)..                                /* OPTION THREE                */TTST 990
    ANS  =(BMEAN-AMEAN)/SQRT(SA2/FNA+SB2/FNB),.                         TTST1000
    A1   =(SA2/FNA+SB2/FNB)**2,.                                        TTST1010
    A2   =(SA2/FNA)**2/(FNA+1.0)+(SB2/FNB)**2/(FNB+1.0),.               TTST1020
    NDF  =A1/A2-2.0+0.5,.                                               TTST1030
    GO TO FIN,.                                                         TTST1040
 T(4)..                                /* OPTION FOUR                 */TTST1050
    A1   =BMEAN-AMEAN,.                                                 TTST1060
    A2   =0.0,.                                                         TTST1070
         DO I = 1 TO NB,.                                               TTST1080
         A2   =A2+(B(I)-A(I)-A1)**2,.                                   TTST1090
         END,.                                                          TTST1100
    IF A2 LE 0.0                                                        TTST1110
    THEN DO,.                                                           TTST1120
         ERROR='4',.                   /* TWO SAMPLES ARE IDENTICAL   */TTST1130
         GO TO FIN,.                                                    TTST1140
         END,.                                                          TTST1150
    A2   =SQRT(A2/(FNB-1.0)),.                                          TTST1160
    ANS  =(A1/A2)*SQRT(FNB),.                                           TTST1170
    NDF  =NB-1,.                                                        TTST1180
 FIN..                                                                  TTST1190
    RETURN,.                                                            TTST1200
    END,.                              /*END OF PROCEDURE TTST        */TTST1210
 CORR..                                                                 CORR  10
 /*********************************************************************/CORR  20
 /*                                                                   */CORR  30
 /*      TO COMPUTE MEANS, STANDARD DEVIATIONS, SUMS OF CROSS-PRODUCTS*/CORR  40
 /*      OF DEVIATIONS, AND CORRELATION COEFFICIENTS.                 */CORR  50
 /*                                                                   */CORR  60
 /*********************************************************************/CORR  70
    PROCEDURE (N,M,IO,X,XBAR,STD,RX,R,B),.                              CORR  80
    DECLARE                                                             CORR  90
         ERROR EXTERNAL CHARACTER (1),                                  CORR 100
         (I,IO,J,K,KK,M,N)                                              CORR 110
         FIXED BINARY,                                                  CORR 120
         (X(*,*),D(M),FN,FKK)                                           CORR 130
         FLOAT BINARY,                                                  CORR 140
         (R(*,*),RX(*,*),XBAR(*),STD(*),B(*),T(M))                      CORR 150
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/CORR 160
  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/CORR 170
 /*                                                                   */CORR 180
    ERROR='0',.                                                         CORR 190
    IF N LE 0 OR M LE 0                /* THE NUMBER OF OBSERVATIONS  */CORR 200
    THEN DO,.                          /* OR THE NUMBER OF VARIABLES  */CORR 210
         ERROR='1',.                   /* ARE LESS THAN OR EQUAL TO   */CORR 220
         GO TO FIN,.                   /* ZERO.                       */CORR 230
         END,.                                                          CORR 240
    FN   =N,.                          /* INITIALIZATION              */CORR 250
    T    =0.0,.                                                         CORR 260
         DO I = 1 TO M,.                                                CORR 270
         B(I) =0.0,.                                                    CORR 280
              DO J = 1 TO M,.                                           CORR 290
              R(I,J)=0.0,.                                              CORR 300
              END,.                                                     CORR 310
         END,.                                                          CORR 320
    IF IO NE 0                                                          CORR 330
    THEN DO,.                                                           CORR 340
              DO J = 1 TO M,.          /* DATA IS ALREADY IN CORE     */CORR 350
                   DO I = 1 TO N,.                                      CORR 360
                   T(J) =T(J)+X(I,J),.                                  CORR 370
                   END,.                                                CORR 380
              XBAR(J)=T(J),.                                            CORR 390
              T(J) =T(J)/FN,.                                           CORR 400
              END,.                                                     CORR 410
              DO I = 1 TO N,.                                           CORR 420
                   DO J = 1 TO M,.                                      CORR 430
                   D(J) =X(I,J)-T(J),.                                  CORR 440
                   B(J) =B(J)+D(J),.                                    CORR 450
                   END,.                                                CORR 460
                   DO J = 1 TO M,.                                      CORR 470
                        DO K = J TO M,.                                 CORR 480
                        R(J,K)=R(J,K)+D(J)*D(K),.                       CORR 490
                        END,.                                           CORR 500
                   END,.                                                CORR 510
              END,.                                                     CORR 520
         GO TO CALC,.                                                   CORR 530
         END,.                                                          CORR 540
 /*                                                                   */CORR 550
 /*      READ OBSERVATIONS AND CALCULATE TEMPORARY MEANS              */CORR 560
 /*                                                                   */CORR 570
    IF N LT M                                                           CORR 580
    THEN KK   =N,.                                                      CORR 590
    ELSE KK   =M,.                                                      CORR 600
    FKK  =KK,.                                                          CORR 610
         DO I = 1 TO KK,.                                               CORR 620
         CALL DAT2 (M,D),.                                              CORR 630
              DO J = 1 TO M,.                                           CORR 640
              T(J) =T(J)+D(J),.                                         CORR 650
              RX(I,J)=D(J),.                                            CORR 660
              END,.                                                     CORR 670
         END,.                                                          CORR 680
         DO J = 1 TO M,.                                                CORR 690
         XBAR(J)=T(J),.                                                 CORR 700
         T(J) =T(J)/FKK,.                                               CORR 710
         END,.                                                          CORR 720
 /*                                                                   */CORR 730
 /*      CALCULATE SUMS OF CROSS-PRODUCTS OF DEVIATIONS FROM          */CORR 740
 /*      TEMPORARY MEANS FOR M OBSERVATIONS.                          */CORR 750
 /*                                                                   */CORR 760
         DO I = 1 TO KK,.                                               CORR 770
              DO J = 1 TO M,.                                           CORR 780
              D(J) =RX(I,J)-T(J),.                                      CORR 790
              END,.                                                     CORR 800
              DO J = 1 TO M,.                                           CORR 810
              B(J) =B(J)+D(J),.                                         CORR 820
                   DO K = J TO M,.                                      CORR 830
                   R(J,K)=R(J,K)+D(J)*D(K),.                            CORR 840
                   END,.                                                CORR 850
              END,.                                                     CORR 860
         END,.                                                          CORR 870
    IF N GT KK                                                          CORR 880
 /*                                                                   */CORR 890
 /*      READ THE REST OF THE OBSERVATIONS ONE AT A TIME, SUM THE     */CORR 900
 /*      OBSERVATIONS, AND CALCULATE SUMS OF CROSS PRODUCTS OF        */CORR 910
 /*      DEVIATIONS FROM TEMPORARY MEANS.                             */CORR 920
 /*                                                                   */CORR 930
    THEN DO,.                                                           CORR 940
              DO I = 1 TO N-KK,.                                        CORR 950
              CALL DAT2 (M,D),.                                         CORR 960
                   DO J = 1 TO M,.                                      CORR 970
                   XBAR(J)=XBAR(J)+D(J),.                               CORR 980
                   D(J) =D(J)-T(J),.                                    CORR 990
                   B(J) =B(J)+D(J),.                                    CORR1000
                   END,.                                                CORR1010
                   DO J = 1 TO M,.                                      CORR1020
                        DO K = J TO M,.                                 CORR1030
                        R(J,K)=R(J,K)+D(J)*D(K),.                       CORR1040
                        END,.                                           CORR1050
                   END,.                                                CORR1060
              END,.                                                     CORR1070
         END,.                                                          CORR1080
 /*                                                                   */CORR1090
 /*      ADJUST SUMS OF CROSS-PRODUCTS OF DEVIATIONS FROM TEMP. MEANS */CORR1100
 /*                                                                   */CORR1110
 CALC..                                                                 CORR1120
         DO I = 1 TO M,.                                                CORR1130
         XBAR(I)=XBAR(I)/FN,.          /* CALCULATE MEANS.            */CORR1140
              DO J = I TO M,.                                           CORR1150
              RX(I,J)=R(I,J)-B(I)*B(J)/FN,.                             CORR1160
              RX(J,I)=RX(I,J),.                                         CORR1170
              END,.                                                     CORR1180
         STD(I)=SQRT(ABS(RX(I,I))),.                                    CORR1190
 /*                                                                   */CORR1200
 /*    COPY THE DIAGONAL OF THE MATRIX OF SUMS OF CROSS PRODUCTS OF   */CORR1210
 /*    DEVIATIONS FROM THE MEANS.                                     */CORR1220
 /*                                                                   */CORR1230
         B(I) =RX(I,I),.                                                CORR1240
         END,.                                                          CORR1250
 /*                                                                   */CORR1260
 /*      COMPUTE CORRELATION COEFFICIENTS                             */CORR1270
 /*                                                                   */CORR1280
         DO J = 1 TO M,.                                                CORR1290
              DO K = J TO M,.                                           CORR1300
              FKK  =STD(J)*STD(K),.                                     CORR1310
              IF FKK= 0.0                                               CORR1320
              THEN DO,.                                                 CORR1330
                   ERROR='2',.         /* SOME VARIANCES ARE ZERO     */CORR1340
                   R(J,K)=0.0,.                                         CORR1350
                   END,.                                                CORR1360
              ELSE R(J,K)=RX(J,K)/FKK,.                                 CORR1370
              R(K,J)=R(J,K),.                                           CORR1380
              END,.                                                     CORR1390
         END,.                                                          CORR1400
 /*                                                                   */CORR1410
 /*      COMPUTE STANDARD DEVIATIONS                                  */CORR1420
 /*                                                                   */CORR1430
         IF N=1                                                         CORR1440
         THEN DO,.                                                      CORR1450
              DO I=1 TO N,.                                             CORR1460
              STD(I)    =0,.                                            CORR1470
              END,.                                                     CORR1480
              GO TO FIN,.                                               CORR1490
              END,.                                                     CORR1500
         FN   =SQRT(N-1),.                                              CORR1510
         DO I = 1 TO M,.                                                CORR1520
         STD(I)=STD(I)/FN,.                                             CORR1530
         END,.                                                          CORR1540
 FIN..                                                                  CORR1550
    RETURN,.                                                            CORR1560
    END,.                              /*END OF PROCEDURE CORR        */CORR1570
 ORDR..                                                                 ORDR  10
 /*********************************************************************/ORDR  20
 /*                                                                   */ORDR  30
 /*      TO CONSTRUCT FROM A LARGER MATRIX OF CORRELATION COEFFICIENTS*/ORDR  40
 /*      A SUBSET MATRIX OF INTERCORRELATIONS AMONG INDEPENDENT VAR-  */ORDR  50
 /*      IABLES AND A VECTOR OF INTERCORRELATIONS OF INDEPENDENT      */ORDR  60
 /*      VARIABLES WITH DEPENDENT VARIABLE.                           */ORDR  70
 /*                                                                   */ORDR  80
 /*********************************************************************/ORDR  90
    PROCEDURE (M,R,NDEP,K,ISAVE,RX,RY),.                                ORDR 100
    DECLARE                                                             ORDR 110
         (ISAVE(*),I,J,K,L,L1)                                          ORDR 120
         FIXED BINARY,                                                  ORDR 130
         ERROR EXTERNAL CHARACTER(1),                                   ORDR 140
         (R(*,*),RX(K,K),RY(K))                                         ORDR 150
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/ORDR 160
  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/ORDR 170
 /*                                                                   */ORDR 180
 /*      COPY INTERCORRELATIONS OF INDEPENDENT VARIABLES WITH         */ORDR 190
 /*      DEPENDENT VARIABLE                                           */ORDR 200
 /*                                                                   */ORDR 210
    ERROR='0',.                                                         ORDR 220
    IF M LE 0                          /* THE NUMBER OF VARIABLES IS  */ORDR 230
    THEN DO,.                          /* LESS THAN OR EQUAL TO ZERO. */ORDR 240
         ERROR='1',.                                                    ORDR 250
         GO TO FIN,.                                                    ORDR 260
         END,.                                                          ORDR 270
         DO I=1 TO K,.                                                  ORDR 280
         IF ISAVE(K) = NDEP            /* INVALID K                   */ORDR 290
         OR ISAVE(K) LE 0                                               ORDR 300
         OR ISAVE(K) GT M                                               ORDR 310
         THEN DO,.                                                      ORDR 320
              ERROR='3',.                                               ORDR 330
              GO TO FIN,.                                               ORDR 340
              END,.                                                     ORDR 350
         END,.                                                          ORDR 360
    IF NDEP LE 0 OR NDEP GT M          /* INVALID DEPENDENT VARIABLE  */ORDR 370
    THEN DO,.                                                           ORDR 380
         ERROR='2',.                                                    ORDR 390
         GO TO FIN,.                                                    ORDR 400
         END,.                                                          ORDR 410
    IF K LE 0 OR K GE M                /*INVALID NUMBER OF INDEPENDENT*/ORDR 420
    THEN DO,.                          /*        VARIABLES            */ORDR 430
         ERROR='4',.                                                    ORDR 440
         GO TO FIN,.                                                    ORDR 450
         END,.                                                          ORDR 460
         DO I = 1 TO K,.                                                ORDR 470
         L1   =ISAVE(I),.                                               ORDR 480
         RY(I)=R(NDEP,L1),.                                             ORDR 490
 /*                                                                   */ORDR 500
 /*      COPY A SUBSET MATRIX OF INTERCORRELATIONS AMONG INDEPENDENT  */ORDR 510
 /*      VARIABLES                                                    */ORDR 520
 /*                                                                   */ORDR 530
              DO J = 1 TO K,.                                           ORDR 540
              L2   =ISAVE(J),.                                          ORDR 550
              IF L2 LT L1                                               ORDR 560
              THEN RX(I,J)=RX(J,I),.                                    ORDR 570
              ELSE RX(I,J)=R(L1,L2),.                                   ORDR 580
              END,.                                                     ORDR 590
         END,.                                                          ORDR 600
 /*                                                                   */ORDR 610
 /*      PLACE THE SUBSCRIPT NUMBER OF THE DEPENDENT VARIABLE         */ORDR 620
 /*      IN ISAVE(K+1)                                                */ORDR 630
 /*                                                                   */ORDR 640
    ISAVE(K+1)=NDEP,.                                                   ORDR 650
 FIN..                                                                  ORDR 660
    RETURN,.                                                            ORDR 670
    END,.                              /*END OF PROCEDURE ORDR        */ORDR 680
 MLTR..                                                                 MLTR  10
 /*********************************************************************/MLTR  20
 /*                                                                   */MLTR  30
 /*      TO PERFORM A MULTIPLE LINEAR REGRESSION ANALYSIS FOR A       */MLTR  40
 /*      DEPENDENT VARIABLE AND A SET OF INDEPENDENT VARIABLES.       */MLTR  50
 /*                                                                   */MLTR  60
 /*********************************************************************/MLTR  70
    PROCEDURE (N,K,XBAR,STD,D,RX,RY,ISAVE,B,SB,T,BETA,ANS),.            MLTR  80
    DECLARE                                                             MLTR  90
         ERROR EXTERNAL CHARACTER (1),                                  MLTR 100
         (I,IO,J,M,MM,MP,MQ,N,N1,ISAVE(*))                              MLTR 110
         FIXED BINARY,                                                  MLTR 120
         (XBAR(*),STD(*),D(*),RX(*,*),RY(*),B(*),SB(*),T(*),BETA(*),    MLTR 130
         ANS(10),RM,BO,SSAR,SSDR,FK,FNN,SY,SSARM,SSDRM,F)               MLTR 140
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/MLTR 150
  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/MLTR 160
 /*                                                                   */MLTR 170
    ERROR='0',.                                                         MLTR 180
    IF K LE 0 OR N LE K                /* THE NUMBER OF VARIABLES IS  */MLTR 190
    THEN DO,.                          /* LESS THAN OR EQUAL TO ZERO  */MLTR 200
         ERROR='1',.                   /* OR THE NO. OF OBSERVATIONS  */MLTR 210
         GO TO S10,.                   /* IS LESS THAN OR EQUAL TO THE*/MLTR 220
         END,.                         /* THE NUMBER OF VARIABLES     */MLTR 230
    MM   =K+1,.                                                         MLTR 240
    FK   =K,.                                                           MLTR 250
         DO J = 1 TO K,.                                                MLTR 260
         BETA(J)=0.0,.                                                  MLTR 270
         B(J) =0.0,.                                                    MLTR 280
              DO I = 1 TO K,.                                           MLTR 290
              BETA(J)=BETA(J)+RY(I)*RX(I,J),.                           MLTR 300
              END,.                                                     MLTR 310
         END,.                                                          MLTR 320
    RM   =0.0,.                                                         MLTR 330
    BO   =0.0,.                                                         MLTR 340
    L1   =ISAVE(MM),.                                                   MLTR 350
 /*                                                                   */MLTR 360
 /*      COEFFICIENT OF DETERMINATION                                 */MLTR 370
 /*                                                                   */MLTR 380
         DO I = 1 TO K,.                                                MLTR 390
         RM   =RM+BETA(I)*RY(I),.                                       MLTR 400
 /*                                                                   */MLTR 410
 /*      TEST ACCURACY OF THE RESULT                                  */MLTR 420
 /*                                                                   */MLTR 430
         IF RM LT 0 OR RM GT 1                                          MLTR 440
         THEN DO,.                                                      MLTR 450
              ERROR='2',.              /* INVALID MULTIPLE R          */MLTR 460
              GO TO S10,.                                               MLTR 470
              END,.                                                     MLTR 480
         L    =ISAVE(I),.              /* REGRESSION COEFFICIENT      */MLTR 490
         B(I) =BETA(I)*(STD(L1)/STD(L)),.                               MLTR 500
         BO   =BO+B(I)*XBAR(L),.       /* INTERCEPT                   */MLTR 510
         END,.                                                          MLTR 520
    BO   =XBAR(L1)-BO,.                                                 MLTR 530
 /*                                                                   */MLTR 540
 /*      SUM OF SQUARES ATTRIBUTED TO REGRESSION                      */MLTR 550
 /*                                                                   */MLTR 560
    SSAR =RM*D(L1),.                                                    MLTR 570
    IF SSAR GT D(L1)                   /* TEST SUM OF SQUARES REDUCED */MLTR 580
    THEN DO,.                                                           MLTR 590
         ERROR='3',.                   /* REDUCED SUM OF SQUARES      */MLTR 600
         GO TO S10,.                   /* GREATER THAN THE TOTAL      */MLTR 610
         END,.                         /* SUM OF SQUARES              */MLTR 620
    RM   =SQRT(ABS(RM)),.              /* MULTIPLE CORRELATION COEFF. */MLTR 630
 /*                                                                   */MLTR 640
 /*      SUM OF SQUARES OF DEVIATIONS FROM REGRESSION                 */MLTR 650
 /*                                                                   */MLTR 660
    SSDR =D(L1)-SSAR,.                                                  MLTR 670
    FNN  =N-K-1,.                      /* DEGREES OF FREEDOM          */MLTR 680
    IF FNN LE 0.0                                                       MLTR 690
    THEN DO,.                                                           MLTR 700
         ERROR='1',.                   /* SAMPLE SIZE TOO SMALL       */MLTR 710
         GO TO S10,.                                                    MLTR 720
         END,.                                                          MLTR 730
    SY   =SSDR/FNN,.                   /* VARIANCE OF ESTIMATE        */MLTR 740
 /*                                                                   */MLTR 750
 /*      STANDARD DEVIATIONS OF REGRESSION COEFFICIENTS               */MLTR 760
 /*                                                                   */MLTR 770
         DO J = 1 TO K,.                                                MLTR 780
         L    =ISAVE(J),.                                               MLTR 790
         SB(J)=SQRT(ABS((RX(J,J)/D(L))*SY)),.                           MLTR 800
         T(J) =B(J)/SB(J),.            /* COMPUTE T-VALUES            */MLTR 810
         END,.                                                          MLTR 820
    SY   =SQRT(ABS(SY)),.              /* STANDARD ERROR OF ESTIMATE  */MLTR 830
    SSARM=SSAR/FK,.                    /* F-VALUE                     */MLTR 840
    SSDRM=SSDR/FNN,.                                                    MLTR 850
    F    =SSARM/SSDRM,.                                                 MLTR 860
    ANS(1)=BO,.                                                         MLTR 870
    ANS(2)=RM,.                                                         MLTR 880
    ANS(3)=SY,.                                                         MLTR 890
    ANS(4)=SSAR,.                                                       MLTR 900
    ANS(5)=FK,.                                                         MLTR 910
    ANS(6)=SSARM,.                                                      MLTR 920
    ANS(7)=SSDR,.                                                       MLTR 930
    ANS(8)=FNN,.                                                        MLTR 940
    ANS(9)=SSDRM,.                                                      MLTR 950
    ANS(10)=F,.                                                         MLTR 960
 S10..                                                                  MLTR 970
    RETURN,.                                                            MLTR 980
    END,.                              /*END OF PROCEDURE MLTR        */MLTR 990
 STRG..                                                                 STRG  10
 /*********************************************************************/STRG  20
 /*                                                                   */STRG  30
 /*      TO PERFORM A STEP-WISE MULTIPLE REGRESSION ANALYSIS FOR A    */STRG  40
 /*      DEPENDENT VARIABLE AND A SET OF INDEPENDENT VARIABLES.       */STRG  50
 /*                                                                   */STRG  60
 /*********************************************************************/STRG  70
    PROCEDURE (M,N,D,XBAR,IDX,PCT,NSTEP,ANS,L,B,STD),.                  STRG  80
    DECLARE                                                             STRG  90
         (I,ID,IJ,IK,J,K,KK,M,MK,MX,MY,N,NEW,NFO,NZ,NSTEP(*),IDX(*),    STRG 100
         L(*),LL(M))                                                    STRG 110
         FIXED BINARY,                                                  STRG 120
         (D(*,*),XBAR(*),ANS(*),B(*),STD(*),T(M),S(M),BETA(M),RE)       STRG 130
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/STRG 140
  /*     BINARY FLOAT (53),            /*DOUBLE PRECISION VERSION  /*D*/STRG 150
         (PCT,ONM,RD)                                                   STRG 160
         FLOAT BINARY,                                                  STRG 170
         (ERROR,NSTOP) EXTERNAL CHARACTER (1),.                         STRG 180
 /*                                                                   */STRG 190
    ERROR='0',.                        /* INITIALIZATION              */STRG 200
    IF M LE 1 OR N LE M+1              /* THE NUMBER OF VARIABLES M IS*/STRG 210
    THEN DO,.                          /* NOT GREATER THAN 1 OR THE   */STRG 220
         ERROR='1',.                   /* NUMBER OF OBSERVATIONS N IS */STRG 230
         GO TO S150,.                  /* NOT GREATER THAN M+1        */STRG 240
         END,.                                                          STRG 250
    IF PCT GE 1.0                                                       STRG 260
    THEN DO,.                                                           STRG 270
         ERROR='4',.                   /* SPECIFIED CONSTANT IS       */STRG 280
         GO TO S150,.                  /* GREATER THAN OR = 1.0       */STRG 290
         END,.                                                          STRG 300
    ONM  =N-1,.                                                         STRG 310
    NFO  =0,.                                                           STRG 320
    NSTEP(3)=0,.                                                        STRG 330
    ANS(3)=0,.                                                          STRG 340
    ANS(4)=0,.                                                          STRG 350
    NSTOP='0',.                                                         STRG 360
 /*                                                                   */STRG 370
 /*      FIND DEPENDENT VARIABLE, NUMBER OF VARIABLES TO BE FORCED TO */STRG 380
 /*      ENTER IN THE REGRESSION, AND THE NUMBER OF VARIABLES TO BE   */STRG 390
 /*      DELETED                                                      */STRG 400
 /*                                                                   */STRG 410
         DO I = 1 TO M,.                                                STRG 420
         LL(I)=1,.                                                      STRG 430
         IF IDX(I) LE 0                                                 STRG 440
         THEN GO TO S10,.                                               STRG 450
         IF IDX(I) LT 2                                                 STRG 460
         THEN DO,.                                                      STRG 470
              NFO  =NFO+1,.                                             STRG 480
              IDX(NFO)=I,.                                              STRG 490
              GO TO S10,.                                               STRG 500
              END,.                                                     STRG 510
         ELSE IF IDX(I)= 2                                              STRG 520
         THEN DO,.                                                      STRG 530
              NSTEP(3)=NSTEP(3)+1,.                                     STRG 540
              LL(I)=-1,.                                                STRG 550
              GO TO S10,.                                               STRG 560
              END,.                                                     STRG 570
         MY   =I,.                                                      STRG 580
         NSTEP(1)=MY,.                                                  STRG 590
         ANS(5)=D(MY,MY),.                                              STRG 600
 S10..                                                                  STRG 610
         END,.                                                          STRG 620
    NSTEP(2)=NFO,.                                                      STRG 630
 /*                                                                   */STRG 640
 /*      FIND THE MAXIMUM NUMBER OF STEPS                             */STRG 650
 /*                                                                   */STRG 660
    MX   =M-NSTEP(3)-1,.                                                STRG 670
 /*                                                                   */STRG 680
 /*      START SELECTION OF VARIABLES                                 */STRG 690
 /*                                                                   */STRG 700
         DO NZ = 1 TO MX,.                                              STRG 710
         IF N-NZ-1 LE 0                                                 STRG 720
         THEN DO,.                                                      STRG 730
              ERROR='3',.              /* DEGREES OF FREEDOM IS 0     */STRG 740
              GO TO S150,.                                              STRG 750
              END,.                                                     STRG 760
         RD   =0,.                                                      STRG 770
         IF NZ GT NFO                                                   STRG 780
 /*                                                                   */STRG 790
 /*      SELECT NEXT VARIABLE TO ENTER AMONG FORCED VARIABLES         */STRG 800
 /*                                                                   */STRG 810
         THEN GO TO S20,.                                               STRG 820
              DO I = 1 TO NFO,.                                         STRG 830
              K    =IDX(I),.                                            STRG 840
              IF LL(K) GT 0                                             STRG 850
              THEN DO,.                                                 STRG 860
                   RE   =D(K,MY)**2/D(K,K),.                            STRG 870
                   IF RD LT RE                                          STRG 880
                   THEN DO,.                                            STRG 890
                        RD   =RE,.                                      STRG 900
                        NEW  =K,.                                       STRG 910
                        END,.                                           STRG 920
                   END,.                                                STRG 930
              END,.                                                     STRG 940
         GO TO S25,.                                                    STRG 950
 /*                                                                   */STRG 960
 /*      SELECT NEXT VARIABLE TO ENTER AMONG NON-FORCED VARIABLES     */STRG 970
 /*                                                                   */STRG 980
 S20..                                                                  STRG 990
              DO I = 1 TO M,.                                           STRG1000
              IF I NE MY                                                STRG1010
              THEN DO,.                                                 STRG1020
                   IF LL(I) GT 0                                        STRG1030
                   THEN DO,.                                            STRG1040
                        RE   =D(I,MY)**2/D(I,I),.                       STRG1050
                        IF RD LT RE                                     STRG1060
                        THEN DO,.                                       STRG1070
                             RD   =RE,.                                 STRG1080
                             NEW  =I,.                                  STRG1090
                             END,.                                      STRG1100
                        END,.                                           STRG1110
                   END,.                                                STRG1120
              END,.                                                     STRG1130
 S25..                                                                  STRG1140
         IF RD LE 0 OR  ANS(5) LE ANS(3)+RD                             STRG1150
         THEN DO,.                                                      STRG1160
              ERROR='2',.              /* NEGATIVE SUM OF SQUARES     */STRG1170
              GO TO S150,.                                              STRG1180
              END,.                                                     STRG1190
         RE   =RD/ANS(5),.                                              STRG1200
 /*                                                                   */STRG1210
 /*      TEST WHETHER THE PROPORTION OF THE SUM OF SQUARES REDUCED BY */STRG1220
 /*      THE LAST VARIABLE ENTERED IS GREATER THAN OR EQUAL TO THE    */STRG1230
 /*      SPECIFIED PROPORTION                                         */STRG1240
 /*                                                                   */STRG1250
         IF RE LT PCT                                                   STRG1260
         THEN GO TO S150,.                                              STRG1270
         LL(NEW)=0,.                   /* IT IS GREATER THAN OR EQUAL */STRG1280
         L(NZ)=NEW,.                                                    STRG1290
         ANS(1)=RD,.                                                    STRG1300
         ANS(2)=RE,.                                                    STRG1310
         ANS(3)=ANS(3)+RD,.                                             STRG1320
         ANS(4)=ANS(4)+RE,.                                             STRG1330
         NSTEP(4)=NZ,.                                                  STRG1340
         NSTEP(5)=NEW,.                                                 STRG1350
 /*                                                                   */STRG1360
 /*      COMPUTE MULTIPLE CORRELATION, F-VALUE FOR ANALYSIS OF        */STRG1370
 /*      VARIANCE, AND STANDARD ERROR OF ESTIMATE                     */STRG1380
 /*                                                                   */STRG1390
         ANS(6)=SQRT(ANS(4)),.                                          STRG1400
         RD   =NZ,.                                                     STRG1410
         RE   =ONM-RD,.                                                 STRG1420
         RE   =(ANS(5)-ANS(3))/RE,.                                     STRG1430
         ANS(7)=(ANS(3)/RD)/RE,.                                        STRG1440
         ANS(8)=SQRT(RE),.                                              STRG1450
 /*                                                                   */STRG1460
 /*      DIVIDE BY THE PIVOTAL ELEMENT                                */STRG1470
 /*                                                                   */STRG1480
         RD   =D(NEW,NEW),.                                             STRG1490
              DO J = 1 TO M,.                                           STRG1500
              IF LL(J) LT 0                                             STRG1510
              THEN GO TO S40,.                                          STRG1520
              ELSE IF LL(J) GT 0                                        STRG1530
              THEN GO TO S30,.                                          STRG1540
              IF J = NEW                                                STRG1550
              THEN DO,.                                                 STRG1560
                   D(NEW,NEW)=1/RD,.                                    STRG1570
                   GO TO S40,.                                          STRG1580
                   END,.                                                STRG1590
              D(J,J)=D(J,J)+D(NEW,J)**2/RD,.                            STRG1600
 S30..                                                                  STRG1610
              D(NEW,J)=D(NEW,J)/RD,.                                    STRG1620
 S40..                                                                  STRG1630
              END,.                                                     STRG1640
 /*                                                                   */STRG1650
 /*      COMPUTE REGRESSION COEFFICIENTS                              */STRG1660
 /*                                                                   */STRG1670
         B(NZ)=D(NEW,MY),.                                              STRG1680
         IF NZ GT 1                                                     STRG1690
         THEN DO,.                                                      STRG1700
              ID   =NZ-1,.                                              STRG1710
                   DO J = 1 TO ID,.                                     STRG1720
                   IJ   =NZ-J,.                                         STRG1730
                   KK   =L(IJ),.                                        STRG1740
                   B(IJ)=D(KK,MY),.                                     STRG1750
                        DO K = 1 TO J,.                                 STRG1760
                        IK   =NZ-K+1,.                                  STRG1770
                        MK   =L(IK),.                                   STRG1780
                        B(IJ)=B(IJ)-D(KK,MK)*B(IK),.                    STRG1790
                        END,.                                           STRG1800
                   END,.                                                STRG1810
              END,.                                                     STRG1820
         ANS(9)=XBAR(MY),.             /* COMPUTE INTERCEPT           */STRG1830
              DO I = 1 TO NZ,.                                          STRG1840
              KK   =L(I),.                                              STRG1850
              ANS(9)=ANS(9)-B(I)*XBAR(KK),.                             STRG1860
              S(I) =ANS(8)*SQRT(D(KK,KK)),.                             STRG1870
              T(I) =B(I)/S(I),.                                         STRG1880
              BETA(I)=B(I)*STD(KK)/STD(MY),.                            STRG1890
              END,.                                                     STRG1900
 /*                                                                   */STRG1910
 /*      PERFORM A REDUCTION TO ELIMINATE THE LAST VARIABLE ENTERED   */STRG1920
 /*                                                                   */STRG1930
              DO I = 1 TO M,.                                           STRG1940
              IF LL(I) GT 0                                             STRG1950
              THEN DO,.                                                 STRG1960
                        DO J = 1 TO M,.                                 STRG1970
                        IF LL(J) GE 0                                   STRG1980
                        THEN DO,.                                       STRG1990
                             IF J NE NEW                                STRG2000
                             THEN D(I,J)=D(I,J)-D(I,NEW)*D(NEW,J),.     STRG2010
                             END,.                                      STRG2020
                        END,.                                           STRG2030
                   D(I,NEW)=D(I,NEW)/(-RD),.                            STRG2040
                   END,.                                                STRG2050
              END,.                                                     STRG2060
 /*                                                                   */STRG2070
 /*      ADJUST STANDARD ERROR OF THE ESTIMATE AND MULTIPLE           */STRG2080
 /*      CORRELATION COEFFICIENT                                      */STRG2090
 /*                                                                   */STRG2100
         RD   =N-NSTEP(4),.                                             STRG2110
         RD   =ONM/RD,.                                                 STRG2120
         ANS(10)=SQRT(1-(1-ANS(6)**2)*RD),.                             STRG2130
         ANS(11)=ANS(8)*SQRT(RD),.                                      STRG2140
         CALL SOUT (NSTEP,ANS,L,B,S,T,BETA),.                           STRG2150
 /*                                                                   */STRG2160
 /*      TEST WHETHER THE STEP-WISE REGRESSION WAS TERMINATED         */STRG2170
 /*      IN PROCEDURE SOUT.                                           */STRG2180
 /*                                                                   */STRG2190
         IF NSTOP GT '0'                                                STRG2200
         THEN GO TO S150,.                                              STRG2210
         END,.                                                          STRG2220
 S150..                                                                 STRG2230
    RETURN,.                                                            STRG2240
    END,.                              /*END OF PROCEDURE STRG        */STRG2250
 CANC..                                                                 CANC  10
 /*********************************************************************/CANC  20
 /*                                                                   */CANC  30
 /*      TO COMPUTE THE CANONICAL CORRELATIONS BETWEEN TWO SETS OF    */CANC  40
 /*      VARIABLES.                                                   */CANC  50
 /*                                                                   */CANC  60
 /*********************************************************************/CANC  70
    PROCEDURE (N,MP,MQ,RR,ROOTS,WLAM,CANR,CHISQ,NDF,COEFR,COEFL),.      CANC  80
    DECLARE                                                             CANC  90
         ERROR EXTERNAL CHARACTER (1),                                  CANC 100
         (NDF(*),I,J,K,L,M,MP,MQ,N,N1,IERR)                             CANC 110
         FIXED BINARY,                                                  CANC 120
         (RR(*,*),ROOTS(*),WLAM(*),CANR(*),CHISQ(*),COEFR(*,*),         CANC 130
         COEFL(*,*),DET,BAT,CON)                                        CANC 140
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/CANC 150
  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/CANC 160
 /*                                                                   */CANC 170
 /*      CHECK WHETHER THE NUMBER OF LEFT-HAND VARIABLES IS EQUAL TO  */CANC 180
 /*      OR GREATER THAN THAT OF RIGHT-HAND                           */CANC 190
 /*                                                                   */CANC 200
    ERROR='0',.                                                         CANC 210
    IERR =0,.                                                           CANC 220
    IF MP LE 0 OR MQ LE 0              /* THERE ARE NO RIGHT OR LEFT  */CANC 230
    THEN DO,.                          /* HAND VARIABLES.             */CANC 240
         ERROR='1',.                                                    CANC 250
         GO TO FIN,.                                                    CANC 260
         END,.                                                          CANC 270
    IF MP LT MQ                                                         CANC 280
    THEN DO,.                                                           CANC 290
         M    =MP,.                                                     CANC 300
         MP   =MQ,.                                                     CANC 310
         MQ   =M,.                                                      CANC 320
         ERROR='2',.                                                    CANC 330
         END,.                                                          CANC 340
 COPY..                                                                 CANC 350
    BEGIN,.                                                             CANC 360
    DECLARE                                                             CANC 370
         (R(MP,MP),T(MP,MQ),A(MQ,MQ),X(MQ,MQ))                          CANC 380
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/CANC 390
  /*     BINARY FLOAT(53),.            /*DOUBLE PRECISION VERSION  /*D*/CANC 400
 /*                                                                   */CANC 410
 /*      PARTITION INTERCORRELATIONS AMONG LEFT HAND VARIABLES,BETWEEN*/CANC 420
 /*      LEFT AND RIGHT HAND VARIABLES, AND AMONG RIGHT HAND VARIABLES*/CANC 430
 /*                                                                   */CANC 440
    M    =MP+MQ,.                                                       CANC 450
    FM   =M+1,.                                                         CANC 460
    FN   =N,.                                                           CANC 470
    IF ERROR= '2'                                                       CANC 480
    THEN DO,.                                                           CANC 490
         IERR =1,.                                                      CANC 500
         K    =0,.                     /* CHANGE LEFT AND RIGHT HAND  */CANC 510
              DO I = MQ+1 TO M,.       /* VARIABLES                   */CANC 520
              K    =K+1,.                                               CANC 530
              L    =0,.                                                 CANC 540
                   DO J = MQ+1 TO M,.                                   CANC 550
                   L    =L+1,.                                          CANC 560
                                       /* RR 22 INTO R                */CANC 570
              R(K,L)=RR(I,J),.                                          CANC 580
                   END,.                                                CANC 590
                                       /* RR 21 INTO COEFL            */CANC 600
                   DO J = 1 TO MQ,.                                     CANC 610
                   COEFL(K,J)=RR(I,J),.                                 CANC 620
                   END,.                                                CANC 630
              END,.                                                     CANC 640
              DO I = 1 TO MQ,.                                          CANC 650
                   DO J = 1 TO MQ,.                                     CANC 660
                                       /* RR 11 INTO COEFR            */CANC 670
                  COEFR(I,J)=RR(I,J),.                                  CANC 680
                   END,.                                                CANC 690
              END,.                                                     CANC 700
         END,.                                                          CANC 710
    ELSE DO,.                                                           CANC 720
              DO I = 1 TO M,.                                           CANC 730
                   DO J = 1 TO M,.                                      CANC 740
                   IF I LE MP AND J LE MP                               CANC 750
                   THEN DO,.                                            CANC 760
                                       /* RR 11 INTO R                */CANC 770
                        R(I,J)=RR(I,J),.                                CANC 780
                        GO TO S10,.                                     CANC 790
                        END,.                                           CANC 800
                   IF I LE MP AND J GT MP                               CANC 810
                   THEN DO,.                                            CANC 820
                        K    =J-MP,.                                    CANC 830
                                       /* RR 12 INTO COEFL            */CANC 840
                        COEFL(I,K)=RR(I,J),.                            CANC 850
                        GO TO S10,.                                     CANC 860
                        END,.                                           CANC 870
                   IF I GT MP AND J GT MP                               CANC 880
                   THEN DO,.                                            CANC 890
                        L    =I-MP,.                                    CANC 900
                        K    =J-MP,.                                    CANC 910
                                       /* RR 22 INTO COEFR            */CANC 920
                        COEFR(L,K)=RR(I,J),.                            CANC 930
                        END,.                                           CANC 940
 S10..                                                                  CANC 950
                   END,.                                                CANC 960
              END,.                                                     CANC 970
 /*                                                                   */CANC 980
 /*      SOLVE THE CANONICAL EQUATION                                 */CANC 990
 /*                                                                   */CANC1000
         CON  =0,.                                                      CANC1010
         CALL MINV (R,MP,DET,CON),.                                     CANC1020
         IF ERROR NE '0'                                                CANC1030
         THEN DO,.                                                      CANC1040
              ERROR='3',.                                               CANC1050
              GO TO FIN,.                                               CANC1060
              END,.                                                     CANC1070
 /*                                                                   */CANC1080
 /*      CALCULATE T = INVERSE OF RR 11 * RR 12                       */CANC1090
 /*                                                                   */CANC1100
              DO I = 1 TO MP,.                                          CANC1110
                   DO J = 1 TO MQ,.                                     CANC1120
                   T(I,J)=0.0,.                                         CANC1130
                        DO K = 1 TO MP,.                                CANC1140
                        T(I,J)=T(I,J)+R(I,K)*COEFL(K,J),.               CANC1150
                        END,.                                           CANC1160
                   END,.                                                CANC1170
              END,.                                                     CANC1180
 /*                                                                   */CANC1190
 /*      CALCULATE  A = RR 21 * T                                     */CANC1200
 /*                                                                   */CANC1210
              DO I = 1 TO MQ,.                                          CANC1220
                   DO J = 1 TO MQ,.                                     CANC1230
                   A(I,J)=0.0,.                                         CANC1240
                        DO K = 1 TO MP,.                                CANC1250
                        A(I,J)=A(I,J)+COEFL(K,I)*T(K,J),.               CANC1260
                        END,.                                           CANC1270
                   END,.                                                CANC1280
              END,.                                                     CANC1290
 /*                                                                   */CANC1300
 /*      CALCULATE EIGENVALUES WITH ASSOCIATED EIGENVECTORS OF THE    */CANC1310
 /*      INVERSE OF R 22 * A                                          */CANC1320
 /*                                                                   */CANC1330
         CALL MGDU (MQ,A,COEFR,ROOTS,X),.                               CANC1340
         IF ERROR NE '0'                                                CANC1350
         THEN DO,.                                                      CANC1360
              ERROR='4',.              /* ERROR CONDITION IN ROUTINE  */CANC1370
              GO TO FIN,.              /* MSDU.                       */CANC1380
              END,.                                                     CANC1390
         IF IERR= '1'                                                   CANC1400
         THEN ERROR='2',.                                               CANC1410
 /*                                                                   */CANC1420
 /*      TEST WHETHER EIGENVALUES ARE GREATER THAN 0.0 BUT LESS THAN  */CANC1430
 /*      1.0                                                          */CANC1440
 /*                                                                   */CANC1450
              DO I = 1 TO MQ,.                                          CANC1460
              IF ROOTS(I) LE 0.0 OR ROOTS(I) GE 1.0                     CANC1470
              THEN DO,.                                                 CANC1480
                   ERROR='5',.         /* CANONICAL CORRELATION CANNOT*/CANC1490
                   GO TO FIN,.         /* BE COMPUTED                 */CANC1500
                   END,.                                                CANC1510
              END,.                                                     CANC1520
 /*                                                                   */CANC1530
 /*      FOR EACH VALUE OF I = 1,2,...,MQ CALCULATE THE STATISTICS    */CANC1540
 /*      NOTED BELOW.                                                 */CANC1550
 /*                                                                   */CANC1560
              DO I = 1 TO MQ,.                                          CANC1570
                                       /* CANONICAL CORRELATION       */CANC1580
              CANR(I)=SQRT(ROOTS(I)),.                                  CANC1590
              WLAM(I)=1.0,.                                             CANC1600
                   DO J = I TO MQ,.                                     CANC1610
                   WLAM(I)=WLAM(I)*(1.0-ROOTS(J)),.                     CANC1620
                   END,.                                                CANC1630
              BAT  =WLAM(I),.          /* CHI-SQUARE                  */CANC1640
              CHISQ(I)=-(FN-0.5*FM)*LOG(BAT),.                          CANC1650
 /*                                                                   */CANC1660
 /*      CALCULATE DEGREES OF FREEDOM FOR CHI-SQUARE                  */CANC1670
 /*                                                                   */CANC1680
              N1  =I-1,.                                                CANC1690
              NDF(I)=(MP-N1)*(MQ-N1),.                                  CANC1700
 /*                                                                   */CANC1710
 /*      I-TH SET OF RIGHT HAND COEFICIENTS                           */CANC1720
 /*                                                                   */CANC1730
                   DO J = 1 TO MQ,.                                     CANC1740
                   COEFR(J,I)=X(J,I),.                                  CANC1750
                   END,.                                                CANC1760
 /*                                                                   */CANC1770
 /*      I-TH SET OF LEFT HAND COEFFICIENTS                           */CANC1780
 /*                                                                   */CANC1790
                   DO J = 1 TO MP,.                                     CANC1800
                   DET  =0.0,.                                          CANC1810
                        DO K = 1 TO MQ,.                                CANC1820
                        DET  =DET+T(J,K)*COEFR(K,I),.                   CANC1830
                        END,.                                           CANC1840
                   COEFL(J,I)=DET/CANR(I),.                             CANC1850
                   END,.                                                CANC1860
              END,.                                                     CANC1870
         END,.                                                          CANC1880
    END,.                                                               CANC1890
 FIN..                                                                  CANC1900
    RETURN,.                                                            CANC1910
    END,.                              /*END OF PROCEDURE CANC        */CANC1920
 AVAR..                                                                 AVAR  10
 /*********************************************************************/AVAR  20
 /*                                                                   */AVAR  30
 /*      TO PERFORM AN ANALYSIS OF VARIANCE FOR A COMPLETE FACTORIAL  */AVAR  40
 /*      DESIGN.                                                      */AVAR  50
 /*                                                                   */AVAR  60
 /*********************************************************************/AVAR  70
    PROCEDURE (K,LEVEL,N,X,GMEAN,SUMSQ,NDF,SMEAN),.                     AVAR  80
    DECLARE                                                             AVAR  90
         ERROR EXTERNAL CHARACTER(1),                                   AVAR 100
         (LEVEL(*),NDF(*),KOUNT(K),ISTEP(K),LASTS(K),I,INCRE,J,K,L,LAST,AVAR 110
         LL,N,N1,ND1,ND2,NN,NSIZ)                                       AVAR 120
         FIXED BINARY,                                                  AVAR 130
         (X(*),SUMSQ(*),SMEAN(*),FSUM,GMEAN,FN,FN1,FN2)                 AVAR 140
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/AVAR 150
 /*      BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/AVAR 160
    ERROR='0',.                                                         AVAR 170
    NSIZ =(2**K)-1,.                                                    AVAR 180
    IF N LE 0                          /* THERE ARE NO DATA POINTS    */AVAR 190
    THEN DO,.                                                           AVAR 200
         ERROR='1',.                                                    AVAR 210
         GO TO FIN,.                                                    AVAR 220
         END,.                                                          AVAR 230
    FN   =N,.                                                           AVAR 240
    IF K LT 2                                                           AVAR 250
    THEN DO,.                                                           AVAR 260
         ERROR='2',.                   /* ONE OR LESS FACTORS         */AVAR 270
         GO TO FIN,.                                                    AVAR 280
         END,.                                                          AVAR 290
         DO I = 1 TO K,.                                                AVAR 300
         IF LEVEL(I) LT 2                                               AVAR 310
         THEN DO,.                                                      AVAR 320
              ERROR='3',.              /* 1 OR MORE LEVELS LESS THEN 2*/AVAR 330
              GO TO FIN,.                                               AVAR 340
              END,.                                                     AVAR 350
         END,.                                                          AVAR 360
 /*                                                                   */AVAR 370
 /*      CALCULATE MULTIPLIERS TO BE USED IN FINDING STORAGE LOCATIONS*/AVAR 380
 /*      FOR INPUT DATA.                                              */AVAR 390
 /*                                                                   */AVAR 400
    ISTEP(1)=1,.                                                        AVAR 410
         DO I = 2 TO K,.                                                AVAR 420
         ISTEP(I)=ISTEP(I-1)*(LEVEL(I-1)+1),.                           AVAR 430
         END,.                                                          AVAR 440
         DO I = 1 TO K,.               /* SET LEVEL COUNTER           */AVAR 450
         KOUNT(I)=LEVEL(I),.                                            AVAR 460
         END,.                                                          AVAR 470
    N1   =N,.                                                           AVAR 480
         DO I = 1 TO N,.               /* PLACE DATA IN PROPER PLACE  */AVAR 490
         L    =KOUNT(1),.                                               AVAR 500
              DO J = 2 TO K,.                                           AVAR 510
              L    =L+ISTEP(J)*(KOUNT(J)-1),.                           AVAR 520
              END,.                                                     AVAR 530
         X(L) =X(N1),.                                                  AVAR 540
         N1   =N1-1,.                                                   AVAR 550
              DO J = 1 TO K,.                                           AVAR 560
              IF KOUNT(J) GT 1                                          AVAR 570
              THEN DO,.                                                 AVAR 580
                   KOUNT(J)=KOUNT(J)-1,.                                AVAR 590
                   GO TO S10,.                                          AVAR 600
                   END,.                                                AVAR 610
              KOUNT(J)=LEVEL(J),.                                       AVAR 620
              END,.                                                     AVAR 630
 S10..                                                                  AVAR 640
         END,.                                                          AVAR 650
    L    =LEVEL(1),.                   /* CALCULATE LAST DATA POSITION*/AVAR 660
         DO J = 2 TO K,.                                                AVAR 670
         L    =L+ISTEP(J)*(LEVEL(J)-1),.                                AVAR 680
         END,.                                                          AVAR 690
 /*                                                                   */AVAR 700
 /*      CALCULATE THE LAST DATA POSITION OF EACH FACTOR              */AVAR 710
 /*                                                                   */AVAR 720
    LASTS(1)=L+1,.                                                      AVAR 730
         DO I = 2 TO K,.                                                AVAR 740
         LASTS(I)=LASTS(I-1)+ISTEP(I),.                                 AVAR 750
         END,.                                                          AVAR 760
         DO I = 1 TO K,.               /* PERFORM OPERATOR CALCULUS   */AVAR 770
         L    =1,.                                                      AVAR 780
         LL   =1,.                                                      AVAR 790
         FSUM =0.0,.                                                    AVAR 800
         NN   =LEVEL(I),.                                               AVAR 810
         INCRE=ISTEP(I),.                                               AVAR 820
         LAST =LASTS(I),.                                               AVAR 830
 S20..                                                                  AVAR 840
              DO J = 1 TO NN,.         /* SIGMA OPERATION             */AVAR 850
              FSUM =FSUM+X(L),.                                         AVAR 860
              L    =L+INCRE,.                                           AVAR 870
              END,.                                                     AVAR 880
         X(L) =FSUM,.                                                   AVAR 890
         FN1  =NN,.                                                     AVAR 900
              DO J = 1 TO NN,.         /* DELTA OPERATION             */AVAR 910
              X(LL)=FN1*X(LL)-FSUM,.                                    AVAR 920
              LL   =LL+INCRE,.                                          AVAR 930
              END,.                                                     AVAR 940
         FSUM =0.0,.                                                    AVAR 950
         IF L LT LAST                                                   AVAR 960
         THEN DO,.                                                      AVAR 970
              IF L LE LAST-INCRE                                        AVAR 980
              THEN DO,.                                                 AVAR 990
                   L    =L+INCRE,.                                      AVAR1000
                   LL   =LL+INCRE,.                                     AVAR1010
                   GO TO S20,.                                          AVAR1020
                   END,.                                                AVAR1030
              L    =L+INCRE+1-LAST,.                                    AVAR1040
              LL   =LL+INCRE+1-LAST,.                                   AVAR1050
              GO TO S20,.                                               AVAR1060
              END,.                                                     AVAR1070
         END,.                                                          AVAR1080
         DO I = 1 TO NSIZ,.                                             AVAR1090
         SUMSQ=0.0,.                                                    AVAR1100
         END,.                                                          AVAR1110
 /*                                                                   */AVAR1120
 /*      SET UP CONTROL FOR MEAN SQUARE OPERATOR                      */AVAR1130
 /*                                                                   */AVAR1140
    LASTS(1)=LEVEL(1),.                                                 AVAR1150
    ISTEP(1)=1,.                                                        AVAR1160
         DO I = 2 TO K,.                                                AVAR1170
         LASTS(I)=LEVEL(I)+1,.                                          AVAR1180
         ISTEP(I)=ISTEP(I-1)*2,.                                        AVAR1190
         END,.                                                          AVAR1200
    NN   =1,.                                                           AVAR1210
         DO I = 1 TO K,.                                                AVAR1220
         KOUNT(I)=0.0,.                                                 AVAR1230
         END,.                                                          AVAR1240
 S30..                                                                  AVAR1250
    L    =0,.                                                           AVAR1260
         DO I = 1 TO K,.                                                AVAR1270
         IF KOUNT(I) NE LASTS(I)                                        AVAR1280
         THEN DO,.                                                      AVAR1290
              IF L LE 0                                                 AVAR1300
              THEN DO,.                                                 AVAR1310
                   KOUNT(I)=KOUNT(I)+1,.                                AVAR1320
                   IF KOUNT(I) LE LEVEL(I)                              AVAR1330
                   THEN GO TO S40,.                                     AVAR1340
                   GO TO S50,.                                          AVAR1350
                   END,.                                                AVAR1360
              IF KOUNT(I)= LEVEL(I)                                     AVAR1370
              THEN GO TO S60,.                                          AVAR1380
 S40..                                                                  AVAR1390
              L    =L+ISTEP(I),.                                        AVAR1400
              GO TO S60,.                                               AVAR1410
              END,.                                                     AVAR1420
 S50..                                                                  AVAR1430
         KOUNT(I)=0,.                                                   AVAR1440
 S60..                                                                  AVAR1450
         END,.                                                          AVAR1460
    IF L GT 0                                                           AVAR1470
    THEN DO,.                                                           AVAR1480
         SUMSQ(L)=SUMSQ(L)+X(NN)*X(NN),.                                AVAR1490
         NN   =NN+1,.                                                   AVAR1500
         GO TO S30,.                                                    AVAR1510
         END,.                                                          AVAR1520
    GMEAN=X(NN)/FN,.                   /* CALCULATE MEAN              */AVAR1530
 /*                                                                   */AVAR1540
 /*      CALCULATE FIRST DIVISOR REQUIRED TO FORM SUM OF SQUARES AND  */AVAR1550
 /*      DIVISOR, WHICH IS EQUAL TO DEGREES OF FREEDOM, REQUIRED TO   */AVAR1560
 /*      FORM MEAN SQUARES                                            */AVAR1570
 /*                                                                   */AVAR1580
    ISTEP=0,.                                                           AVAR1590
    ISTEP(1)=1,.                                                        AVAR1600
    NN   =0,.                                                           AVAR1610
 S70..                                                                  AVAR1620
    ND1  =1,.                                                           AVAR1630
    ND2  =1,.                                                           AVAR1640
         DO I = 1 TO K,.                                                AVAR1650
         IF ISTEP(I) NE 0                                               AVAR1660
         THEN DO,.                                                      AVAR1670
              ND1  =ND1*LEVEL(I),.                                      AVAR1680
              ND2  =ND2*(LEVEL(I)-1),.                                  AVAR1690
              END,.                                                     AVAR1700
         END,.                                                          AVAR1710
    FN1  =N*ND1,.                                                       AVAR1720
    FN2  =ND2,.                                                         AVAR1730
    NN   =NN+1,.                                                        AVAR1740
    SUMSQ(NN)=SUMSQ(NN)/FN1,.                                           AVAR1750
    SMEAN(NN)=SUMSQ(NN)/FN2,.                                           AVAR1760
    NDF(NN)=ND2,.                                                       AVAR1770
    IF NN LT LL                                                         AVAR1780
    THEN DO,.                                                           AVAR1790
              DO I = 1 TO K,.                                           AVAR1800
              IF ISTEP(I) NE 0                                          AVAR1810
              THEN ISTEP(I)=0,.                                         AVAR1820
              ELSE DO,.                                                 AVAR1830
                   ISTEP(I)=1,.                                         AVAR1840
                   GO TO S70,.                                          AVAR1850
                   END,.                                                AVAR1860
              END,.                                                     AVAR1870
         END,.                                                          AVAR1880
 FIN..                                                                  AVAR1890
    RETURN,.                                                            AVAR1900
    END,.                              /*END OF PROCEDURE AVAR        */AVAR1910
 DMTX..                                                                 DMTX  10
 /*********************************************************************/DMTX  20
 /*                                                                   */DMTX  30
 /*      TO COMPUTE MEANS OF VARIABLES IN EACH GROUP AND A POOLED     */DMTX  40
 /*      DISPERSION MATRIX FOR ALL THE GROUPS.                        */DMTX  50
 /*                                                                   */DMTX  60
 /*********************************************************************/DMTX  70
    PROCEDURE (K,M,N,X,XBAR,D),.                                        DMTX  80
    DECLARE                                                             DMTX  90
         ERROR EXTERNAL CHARACTER (1),                                  DMTX 100
         (N(*),I,J,K,K1,K2,KK,L,M,NN)                                   DMTX 110
         FIXED BINARY,                                                  DMTX 120
         (X(*,*),FSUM)                                                  DMTX 130
         FLOAT BINARY,                                                  DMTX 140
         (XBAR(*,*),D(*,*),CMEAN(M))                                    DMTX 150
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/DMTX 160
  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/DMTX 170
 /*                                                                   */DMTX 180
    ERROR='0',.                                                         DMTX 190
    IF M LE 1                          /* THE NUMBER OF VARIABLES IS  */DMTX 200
    THEN DO,.                          /* LESS THAN OR EQUAL TO ONE.  */DMTX 210
         ERROR='1',.                                                    DMTX 220
         GO TO FIN,.                                                    DMTX 230
         END,.                                                          DMTX 240
    IF K LE 1 OR K GT M                /* INVALID NUMBER OF GROUPS.   */DMTX 250
    THEN DO,.                                                           DMTX 260
         ERROR='2',.                                                    DMTX 270
         GO TO FIN,.                                                    DMTX 280
         END,.                                                          DMTX 290
         DO J = 1 TO K,.                                                DMTX 300
         IF N(J) LE 0                  /* NO OBSERVATIONS IN AT LEAST */DMTX 310
         THEN DO,.                     /* ONE OF THE GROUPS           */DMTX 320
              ERROR='3',.                                               DMTX 330
              GO TO FIN,.                                               DMTX 340
              END,.                                                     DMTX 350
         END,.                                                          DMTX 360
         DO I = 1 TO M,.                                                DMTX 370
              DO J = 1 TO K,.                                           DMTX 380
              XBAR(I,J)=0.0,.                                           DMTX 390
              END,.                                                     DMTX 400
         END,.                                                          DMTX 410
    L    =0,.                                                           DMTX 420
         DO I = 1 TO K,.                                                DMTX 430
         NN   =N(I),.                                                   DMTX 440
         FSUM =NN,.                                                     DMTX 450
              DO J = 1 TO NN,.                                          DMTX 460
              L    =L+1,.                                               DMTX 470
                   DO KK = 1 TO M,.                                     DMTX 480
                   XBAR(KK,I)=XBAR(KK,I)+X(L,KK),.                      DMTX 490
                   END,.                                                DMTX 500
              END,.                                                     DMTX 510
              DO KK = 1 TO M,.                                          DMTX 520
              XBAR(KK,I)=XBAR(KK,I)/FSUM,.                              DMTX 530
              END,.                                                     DMTX 540
         END,.                                                          DMTX 550
 /*                                                                   */DMTX 560
 /*      COMPUTE THE DISPERSION MATRIX                                */DMTX 570
 /*                                                                   */DMTX 580
         DO I = 1 TO M,.                                                DMTX 590
              DO J = 1 TO M,.                                           DMTX 600
              D(I,J)=0.0,.                                              DMTX 610
              END,.                                                     DMTX 620
         END,.                                                          DMTX 630
    L    =0,.                                                           DMTX 640
         DO I = 1 TO K,.                                                DMTX 650
         NN   =N(I),.                                                   DMTX 660
              DO J = 1 TO NN,.                                          DMTX 670
              L    =L+1,.                                               DMTX 680
                   DO KK = 1 TO M,.                                     DMTX 690
                   CMEAN(KK)=X(L,KK)-XBAR(KK,I),.                       DMTX 700
                   END,.                                                DMTX 710
                   DO K1 = 1 TO M,.                                     DMTX 720
                        DO K2 = K1 TO M,.                               DMTX 730
                        D(K1,K2)=D(K1,K2)+CMEAN(K1)*CMEAN(K2),.         DMTX 740
                        END,.                                           DMTX 750
                   END,.                                                DMTX 760
              END,.                                                     DMTX 770
         END,.                                                          DMTX 780
    L    =0,.                                                           DMTX 790
         DO KK = 1 TO K,.                                               DMTX 800
         L    =L+N(KK),.                                                DMTX 810
         END,.                                                          DMTX 820
    FSUM =L-K,.                                                         DMTX 830
         DO I = 1 TO M,.                                                DMTX 840
              DO J = I TO M,.                                           DMTX 850
              D(I,J)=D(I,J)/FSUM,.                                      DMTX 860
              D(J,I)=D(I,J),.                                           DMTX 870
              END,.                                                     DMTX 880
         END,.                                                          DMTX 890
 FIN..                                                                  DMTX 900
    RETURN,.                                                            DMTX 910
    END,.                              /*END OF PROCEDURE DMTX        */DMTX 920
 DSCR..                                                                 DSCR  10
 /*********************************************************************/DSCR  20
 /*                                                                   */DSCR  30
 /*      TO COMPUTE A SET OF LINEAR FUNCTIONS WHICH SERVE AS INDICES  */DSCR  40
 /*      FOR CLASSIFYING AN INDIVIDUAL INTO ONE OF SEVERAL GROUPS.    */DSCR  50
 /*                                                                   */DSCR  60
 /*********************************************************************/DSCR  70
    PROCEDURE (K,M,N,X,XBAR,D,CMEAN,V,C,P,LG),.                         DSCR  80
    DECLARE                                                             DSCR  90
         (N(*),LG(*),I,J,K,K1,K2,L,LL,M,N1,NN)                          DSCR 100
         FIXED BINARY,                                                  DSCR 110
         ERROR EXTERNAL CHARACTER(1),                                   DSCR 120
         (X(*,*),FN(K))                                                 DSCR 130
         BINARY FLOAT,                                                  DSCR 140
         (XBAR(*,*),D(*,*),C(*,*),CMEAN(*),P(*),V,FSUM,PL)              DSCR 150
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/DSCR 160
  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/DSCR 170
 /*                                                                   */DSCR 180
    L    =0,.                                                           DSCR 190
    ERROR='0',.                                                         DSCR 200
    IF M LE 1                          /* NUMBER OF VARIABLES LESS    */DSCR 210
    THEN DO,.                          /* THAN OR EQUAL TO ONE.       */DSCR 220
         ERROR='1',.                                                    DSCR 230
         GO TO FIN,.                                                    DSCR 240
         END,.                                                          DSCR 250
    IF K LE 1 OR K GT M                /* INVALID NUMBER OF GROUPS.   */DSCR 260
    THEN DO,.                                                           DSCR 270
         ERROR='2',.                                                    DSCR 280
         GO TO FIN,.                                                    DSCR 290
         END,.                                                          DSCR 300
         DO I = 1 TO K,.                                                DSCR 310
         IF N(I) LE 0                  /* NO OBSERVATIONS IN ONE OR   */DSCR 320
         THEN DO,.                     /* MORE GROUPS.                */DSCR 330
              ERROR='3',.                                               DSCR 340
              GO TO FIN,.                                               DSCR 350
              END,.                                                     DSCR 360
         END,.                                                          DSCR 370
         DO I = 1 TO K,.                                                DSCR 380
         L    =L+N(I),.                                                 DSCR 390
         END,.                                                          DSCR 400
    FSUM =L,.                                                           DSCR 410
         DO I = 1 TO M,.                                                DSCR 420
         V    =0.0,.                                                    DSCR 430
              DO J = 1 TO K,.                                           DSCR 440
              V    =V+N(J)*XBAR(I,J),.                                  DSCR 450
              END,.                                                     DSCR 460
         CMEAN(I)=V/FSUM,.                                              DSCR 470
         END,.                                                          DSCR 480
 /*                                                                   */DSCR 490
 /*      CALCULATE GENERALIZED MAHALANDBIS D SQUARE                   */DSCR 500
 /*                                                                   */DSCR 510
    V    =0,.                                                           DSCR 520
         DO I = 1 TO M,.                                                DSCR 530
              DO J = 1 TO M,.                                           DSCR 540
              FSUM =0.0,.                                               DSCR 550
                   DO KK = 1 TO K,.                                     DSCR 560
                   FSUM =FSUM+N(KK)*(XBAR(I,KK)-CMEAN(I))               DSCR 570
                        *(XBAR(J,KK)-CMEAN(J)),.                        DSCR 580
                   END,.                                                DSCR 590
              V    =V+D(I,J)*FSUM,.                                     DSCR 600
              END,.                                                     DSCR 610
         END,.                                                          DSCR 620
 /*                                                                   */DSCR 630
 /*      CALCULATE THE COEFFICIENTS OF DISCRIMINANT FUNCTIONS         */DSCR 640
 /*                                                                   */DSCR 650
         DO I = 1 TO K,.                                                DSCR 660
         FSUM =0,.                                                      DSCR 670
              DO J = 1 TO M,.                                           DSCR 680
                   DO KK = 1 TO M,.                                     DSCR 690
                   FSUM =FSUM+D(J,KK)*XBAR(J,I)*XBAR(KK,I),.            DSCR 700
                   END,.                                                DSCR 710
              END,.                                                     DSCR 720
         C(1,I)=-(FSUM/2),.                                             DSCR 730
              DO J = 1 TO M,.                                           DSCR 740
              C(J+1,I)=0.0,.                                            DSCR 750
                   DO KK = 1 TO M,.                                     DSCR 760
                   C(J+1,I)=C(J+1,I)+D(J,KK)*XBAR(KK,I),.               DSCR 770
                   END,.                                                DSCR 780
              END,.                                                     DSCR 790
         END,.                                                          DSCR 800
 /*                                                                   */DSCR 810
 /*      FOR EACH CASE IN EACH GROUP, CALCULATE.. DISCRIMINANT        */DSCR 820
 /*      FUNCTIONS.                                                   */DSCR 830
 /*                                                                   */DSCR 840
    N1   =0,.                                                           DSCR 850
    L    =0,.                                                           DSCR 860
         DO I = 1 TO K,.                                                DSCR 870
         NN   =N(I),.                                                   DSCR 880
              DO J = 1 TO NN,.                                          DSCR 890
              L    =L+1,.                                               DSCR 900
                   DO K1 = 1 TO K,.                                     DSCR 910
                   FN(K1)=C(1,K1),.                                     DSCR 920
                        DO K2 = 1 TO M,.                                DSCR 930
                        FN(K1)=FN(K1)+C(K2+1,K1)*X(L,K2),.              DSCR 940
                        END,.                                           DSCR 950
                   END,.                                                DSCR 960
 /*                                                                   */DSCR 970
 /*      THE LARGEST DISCRIMINANT FUNCTION                            */DSCR 980
 /*                                                                   */DSCR 990
              LL  =1,.                                                  DSCR1000
              FSUM =FN(1),.                                             DSCR1010
                   DO K1 = 2 TO K,.                                     DSCR1020
                   IF FSUM LT FN(K1)                                    DSCR1030
                   THEN DO,.                                            DSCR1040
                        LL   =K1,.                                      DSCR1050
                        FSUM =FN(K1),.                                  DSCR1060
                        END,.                                           DSCR1070
                   END,.                                                DSCR1080
 /*                                                                   */DSCR1090
 /*      PROBABILITY ASSOCIATED WITH THE LARGEST DISCRIMINANT         */DSCR1100
 /*      FUNCTION.                                                    */DSCR1110
 /*                                                                   */DSCR1120
              PL  =0,.                                                  DSCR1130
                   DO KK = 1 TO K,.                                     DSCR1140
                   PL   =PL+EXP(FN(KK)-FSUM),.                          DSCR1150
                   END,.                                                DSCR1160
              N1   =N1+1,.                                              DSCR1170
              LG(N1)=LL,.                                               DSCR1180
              P(N1)=1/PL,.                                              DSCR1190
              END,.                                                     DSCR1200
         END,.                                                          DSCR1210
 FIN..                                                                  DSCR1220
    RETURN,.                                                            DSCR1230
    END,.                              /*END OF PROCEDURE DSCR        */DSCR1240
 TRAC..                                                                 TRAC  10
 /*********************************************************************/TRAC  20
 /*                                                                   */TRAC  30
 /*      TO COMPUTE CUMULATIVE PERCENTAGE OF EIGENVALUES GREATER      */TRAC  40
 /*      THAN OR EQUAL TO A CONSTANT SPECIFIED BY THE USER.           */TRAC  50
 /*                                                                   */TRAC  60
 /*********************************************************************/TRAC  70
    PROCEDURE (M,R,CON,K,D),.                                           TRAC  80
    DECLARE                                                             TRAC  90
         ERROR EXTERNAL CHARACTER (1),                                  TRAC 100
         (I,J,K,M)                                                      TRAC 110
         FIXED BINARY,                                                  TRAC 120
         (R(*,*),D(*),CON)                                              TRAC 130
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/TRAC 140
  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/TRAC 150
 /*                                                                   */TRAC 160
    ERROR='0',.                                                         TRAC 170
    IF M LE 0                          /* ORDER OF MATRIX IS ZERO.    */TRAC 180
    THEN DO,.                                                           TRAC 190
         ERROR='1',.                                                    TRAC 200
         GO TO S20,.                                                    TRAC 210
         END,.                                                          TRAC 220
         DO I = 1 TO M,.                                                TRAC 230
         D(I) =R(I,I),.                                                 TRAC 240
         END,.                                                          TRAC 250
    K    =0,.                                                           TRAC 260
 /*                                                                   */TRAC 270
 /*      TEST WHETHER I-TH EIGENVALUE IS GREATER THAN OR EQUAL TO     */TRAC 280
 /*      THE CONSTANT.                                                */TRAC 290
 /*                                                                   */TRAC 300
         DO I = 1 TO M,.                                                TRAC 310
         IF D(I) LT CON                                                 TRAC 320
         THEN GO TO S10,.                                               TRAC 330
         K    =K+1,.                                                    TRAC 340
         D(I) =D(I)/M,.                                                 TRAC 350
         END,.                                                          TRAC 360
 S10..                                                                  TRAC 370
    IF K LE 1                                                           TRAC 380
    THEN DO,.                                                           TRAC 390
         ERROR='2',.                   /* NOT ENOUGH EIGENVALUES      */TRAC 400
         GO TO S20,.                   /* ARE RETAINED                */TRAC 410
         END,.                                                          TRAC 420
         DO I = 2 TO K,.                                                TRAC 430
         D(I) =D(I)+D(I-1),.                                            TRAC 440
         END,.                                                          TRAC 450
 S20..                                                                  TRAC 460
    RETURN,.                                                            TRAC 470
    END,.                              /*END OF PROCEDURE TRAC        */TRAC 480
 LOAD..                                                                 LOAD  10
 /*********************************************************************/LOAD  20
 /*                                                                   */LOAD  30
 /*      TO COMPUTE A FACTOR MATRIX (LOADING) FROM EIGENVALUES AND    */LOAD  40
 /*      ASSOCIATED EIGENVECTORS.                                     */LOAD  50
 /*                                                                   */LOAD  60
 /*********************************************************************/LOAD  70
    PROCEDURE (M,K,R,V),.                                               LOAD  80
    DECLARE                                                             LOAD  90
         (I,J,K)                                                        LOAD 100
         FIXED BINARY,                                                  LOAD 110
         ERROR EXTERNAL CHARACTER(1),                                   LOAD 120
         (R(*,*),V(*,*),SQ)                                             LOAD 130
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/LOAD 140
  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/LOAD 150
 /*                                                                   */LOAD 160
    ERROR='0',.                                                         LOAD 170
    IF K LE 1 OR K GT M                /* INVALID VALUE OF K          */LOAD 180
    THEN DO,.                                                           LOAD 190
         ERROR='2',.                                                    LOAD 200
         GO TO FIN,.                                                    LOAD 210
         END,.                                                          LOAD 220
    IF M LE 0                          /* ORDER OF MATRIX IS ZERO     */LOAD 230
    THEN ERROR='1',.                                                    LOAD 240
    ELSE DO,.                                                           LOAD 250
              DO J = 1 TO K,.                                           LOAD 260
              SQ   =SQRT(R(J,J)),.                                      LOAD 270
                   DO I = 1 TO M,.                                      LOAD 280
                   V(I,J)=SQ*V(I,J),.                                   LOAD 290
                   END,.                                                LOAD 300
              END,.                                                     LOAD 310
         END,.                                                          LOAD 320
 FIN..                                                                  LOAD 330
    RETURN,.                                                            LOAD 340
    END,.                              /*END OF PROCEDURE LOAD        */LOAD 350
 VRMX..                                                                 VRMX  10
 /*********************************************************************/VRMX  20
 /*                                                                   */VRMX  30
 /*      TO PERFORM ORTHOGONAL ROTATION OF A FACTOR MATRIX.           */VRMX  40
 /*                                                                   */VRMX  50
 /*********************************************************************/VRMX  60
    PROCEDURE (M,K,A,NC,TV,H,F,D),.                                     VRMX  70
    DECLARE                                                             VRMX  80
         (I,II,J,K,K1,LL,M,NC,NV)                                       VRMX  90
         FIXED BINARY,                                                  VRMX 100
         ERROR EXTERNAL CHARACTER(1),                                   VRMX 110
         (A(*,*),TV(*),H(*),F(*),D(*),EPS,TVLT,FN,AA,BB,CC,DD,G,B,U,T,  VRMX 120
         COS4T,SIN4T,TAN4T,SINP,COSP,CTN4T,COS2T,SIN2T,COST,SINT,CONS)  VRMX 130
         BINARY FLOAT,.                /*SINGLE PRECISION VERSION  /*S*/VRMX 140
  /*     BINARY FLOAT (53),.           /*DOUBLE PRECISION VERSION  /*D*/VRMX 150
 /*                                                                   */VRMX 160
    EPS  =.00116,.                     /* INITIALIZATION              */VRMX 170
    TVLT =0,.                                                           VRMX 180
    LL   =K-1,.                                                         VRMX 190
    NV   =1,.                                                           VRMX 200
    NC   =0,.                                                           VRMX 210
    FN   =M*M,.                                                         VRMX 220
    CONS =.7071066,.                                                    VRMX 230
    ERROR='0',.                                                         VRMX 240
    IF M LE 1                          /* NUMBER OF VARIABLES LESS    */VRMX 250
    THEN DO,.                          /* THAN OR EQUAL TO ONE.       */VRMX 260
         ERROR='1',.                                                    VRMX 270
         GO TO FIN,.                                                    VRMX 280
         END,.                                                          VRMX 290
    IF K LE 1 OR K GT M                /* INVALID VALUE OF K          */VRMX 300
    THEN DO,.                                                           VRMX 310
         ERROR='2',.                                                    VRMX 320
         GO TO FIN,.                                                    VRMX 330
         END,.                                                          VRMX 340
 /*                                                                   */VRMX 350
 /*      CALCULATE ORIGINAL COMMUNALITIES                             */VRMX 360
 /*                                                                   */VRMX 370
         DO I = 1 TO M,.                                                VRMX 380
         H(I) =0,.                                                      VRMX 390
              DO J = 1 TO K,.                                           VRMX 400
              H(I) =H(I)+A(I,J)*A(I,J),.                                VRMX 410
              END,.                                                     VRMX 420
         END,.                                                          VRMX 430
 /*                                                                   */VRMX 440
 /*      CALCULATE NORMALIZED FACTOR MATRIX                           */VRMX 450
 /*                                                                   */VRMX 460
         DO I = 1 TO M,.                                                VRMX 470
         H(I) =SQRT(H(I)),.                                             VRMX 480
              DO J = 1 TO K,.                                           VRMX 490
              A(I,J)=A(I,J)/H(I),.                                      VRMX 500
              END,.                                                     VRMX 510
         END,.                                                          VRMX 520
    GO TO S20,.                                                         VRMX 530
 /*                                                                   */VRMX 540
 /*      CALCULATE VARIANCE FOR FACTOR MATRIX                         */VRMX 550
 /*                                                                   */VRMX 560
 S10..                                                                  VRMX 570
    NV   =NV+1,.                                                        VRMX 580
    TVLT =TV(NV-1),.                                                    VRMX 590
 S20..                                                                  VRMX 600
    TV(NV)=0,.                                                          VRMX 610
         DO J = 1 TO K,.                                                VRMX 620
         AA   =0,.                                                      VRMX 630
         BB   =0,.                                                      VRMX 640
              DO I = 1 TO M,.                                           VRMX 650
              CC   =A(I,J)*A(I,J),.                                     VRMX 660
              AA   =AA+CC,.                                             VRMX 670
              BB   =BB+CC*CC,.                                          VRMX 680
              END,.                                                     VRMX 690
         TV(NV)=TV(NV)+(M*BB-AA*AA)/FN,.                                VRMX 700
         END,.                                                          VRMX 710
    IF NV GE 51                                                         VRMX 720
    THEN DO,.                          /* NUMBER OF ITERATIONS = 50   */VRMX 730
         ERROR='3',.                                                    VRMX 740
         GO TO S80,.                                                    VRMX 750
         END,.                                                          VRMX 760
    IF TV(NV)-TVLT LE 1.0E-7           /* PERFORM CONVERGENCE TEST    */VRMX 770
    THEN DO,.                                                           VRMX 780
         NC   =NC+1,.                                                   VRMX 790
         IF NC GT 3                                                     VRMX 800
         THEN GO TO S80,.                                               VRMX 810
         END,.                                                          VRMX 820
 /*                                                                   */VRMX 830
 /*      ROTATION OF TWO FACTORS BEGINS                               */VRMX 840
 /*                                                                   */VRMX 850
         DO J = 1 TO LL,.                                               VRMX 860
         II   =J+1,.                                                    VRMX 870
              DO K1 = II TO K,.                                         VRMX 880
              AA   =0,.                /* CALCULATE NUM AND DEN       */VRMX 890
              BB   =0,.                                                 VRMX 900
              CC   =0,.                                                 VRMX 910
              DD   =0,.                                                 VRMX 920
                   DO I = 1 TO M,.                                      VRMX 930
                   U    =(A(I,J)+A(I,K1))*(A(I,J)-A(I,K1)),.            VRMX 940
                   T    =A(I,J)*A(I,K1)*2,.                             VRMX 950
                   CC   =CC+(U+T)*(U-T),.                               VRMX 960
                   DD   =DD+2*U*T,.                                     VRMX 970
                   AA   =AA+U,.                                         VRMX 980
                   BB   =BB+T,.                                         VRMX 990
                   END,.                                                VRMX1000
              T    =DD-2*AA*BB/M,.                                      VRMX1010
              B    =CC-(AA*AA-BB*BB)/M,.                                VRMX1020
              IF T = B                                                  VRMX1030
              THEN DO,.                                                 VRMX1040
                   IF T+B LT EPS                                        VRMX1050
                   THEN GO TO S70,.                                     VRMX1060
 /*                                                                   */VRMX1070
 /*      NUM + DEN IS GREATER THAN OR EQUAL TO THE TOLERANCE FACTOR   */VRMX1080
 /*                                                                   */VRMX1090
              COS4T=CONS,.                                              VRMX1100
                   SIN4T=CONS,.                                         VRMX1110
                   GO TO S40,.                                          VRMX1120
                   END,.                                                VRMX1130
              IF T GT B                                                 VRMX1140
              THEN GO TO S30,.                                          VRMX1150
              TAN4T=ABS(T)/ABS(B),.    /* NUM IS LESS THAN DEN        */VRMX1160
              IF TAN4T GE EPS                                           VRMX1170
              THEN DO,.                                                 VRMX1180
                   COS4T=1/SQRT(1+TAN4T*TAN4T),.                        VRMX1190
                   SIN4T=TAN4T*COS4T,.                                  VRMX1200
                   GO TO S40,.                                          VRMX1210
                   END,.                                                VRMX1220
              IF B GE 0                                                 VRMX1230
              THEN GO TO S70,.                                          VRMX1240
              SINP =CONS,.                                              VRMX1250
              COSP =CONS,.                                              VRMX1260
              GO TO S60,.                                               VRMX1270
 S30..                                                                  VRMX1280
              CTN4T=ABS(T/B),.         /* NUM IS GREATER THAN DEN     */VRMX1290
              IF CTN4T GE EPS                                           VRMX1300
              THEN DO,.                                                 VRMX1310
                   SIN4T=1/SQRT(1+CTN4T*CTN4T),.                        VRMX1320
                   COS4T=CTN4T*SIN4T,.                                  VRMX1330
                   GO TO S40,.                                          VRMX1340
                   END,.                                                VRMX1350
              COS4T=0,.                                                 VRMX1360
              SIN4T=1,.                                                 VRMX1370
 /*                                                                   */VRMX1380
 /*      DETERMINE COS THEAT AND SIN THETA                            */VRMX1390
 /*                                                                   */VRMX1400
 S40..                                                                  VRMX1410
              COS2T=SQRT((1+COS4T)/2),.                                 VRMX1420
              SIN2T=SIN4T/(2*COS2T),.                                   VRMX1430
              COST =SQRT((1+COS2T)/2),.                                 VRMX1440
              SINT =SIN2T/(2*COST),.                                    VRMX1450
 /*                                                                   */VRMX1460
 /*      DETERMINE COS PHI AND SIN PHI                                */VRMX1470
 /*                                                                   */VRMX1480
              IF B GT 0                                                 VRMX1490
              THEN DO,.                                                 VRMX1500
                   COSP =COST,.                                         VRMX1510
                   SINP =SINT,.                                         VRMX1520
                   GO TO S50,.                                          VRMX1530
                   END,.                                                VRMX1540
              COSP =CONS*(COST+SINT),.                                  VRMX1550
              SINP =ABS(CONS*(COST-SINT)),.                             VRMX1560
 S50..                                                                  VRMX1570
              IF T LE 0                                                 VRMX1580
              THEN SINP =-SINP,.                                        VRMX1590
 S60..                                                                  VRMX1600
                   DO I = 1 TO M,.     /* PERFORM ROTATION            */VRMX1610
                   AA   =A(I,J)*COSP+A(I,K1)*SINP,.                     VRMX1620
                   A(I,K1)=-A(I,J)*SINP+A(I,K1)*COSP,.                  VRMX1630
                   A(I,J)=AA,.                                          VRMX1640
                   END,.                                                VRMX1650
 S70..                                                                  VRMX1660
              END,.                                                     VRMX1670
         END,.                                                          VRMX1680
    GO TO S10,.                                                         VRMX1690
 /*                                                                   */VRMX1700
 /*      DENORMALIZE VARIMAX LOADINGS                                 */VRMX1710
 /*                                                                   */VRMX1720
 S80..                                                                  VRMX1730
         DO I = 1 TO M,.                                                VRMX1740
              DO J = 1 TO K,.                                           VRMX1750
              A(I,J)=A(I,J)*H(I),.                                      VRMX1760
              END,.                                                     VRMX1770
         END,.                                                          VRMX1780
    NC   =NV-1,.                       /* CHECK ON COMMUNALITIES      */VRMX1790
    H    =H*H,.                                                         VRMX1800
         DO I = 1 TO M,.                                                VRMX1810
         F(I) =0,.                                                      VRMX1820
              DO J = 1 TO K,.                                           VRMX1830
              F(I) =F(I)+A(I,J)*A(I,J),.                                VRMX1840
              END,.                                                     VRMX1850
         D(I) =H(I)-F(I),.                                              VRMX1860
         END,.                                                          VRMX1870
 FIN..                                                                  VRMX1880
    RETURN,.                                                            VRMX1890
    END,.                              /*END OF PROCEDURE VRMX        */VRMX1900
 KLMO..                                                                 KLMO  10
 /*********************************************************************/KLMO  20
 /*                                                                   */KLMO  30
 /*      TESTS THE DIFFERENCE BETWEEN EMPIRICAL AND THEORETICAL       */KLMO  40
 /*      DISTRIBUTIONS USING THE KOLMOGOROV-SMIRNOV TEST              */KLMO  50
 /*                                                                   */KLMO  60
 /*********************************************************************/KLMO  70
    PROCEDURE(X,N,Z,PROB,IFCOD,U,S),.                                   KLMO  80
    DECLARE                                                             KLMO  90
         (X(*),Y,TEMP,PROB,S,U,Z,D,DN,EI,ES,FI,FS)FLOAT BINARY,         KLMO 100
         (I,J,K,IL,N,IFCOD) FIXED BINARY,                               KLMO 110
         ERROR EXTERNAL CHARACTER (1),.                                 KLMO 120
    ERROR='0',.                                                         KLMO 130
    IF N LT 100                                                         KLMO 140
    THEN IF N=0                        /* N < 100--SET ERROR IND.     */KLMO 150
         THEN DO,.                                                      KLMO 160
              ERROR='4',.                                               KLMO 170
              GO TO S80,.                                               KLMO 180
              END,.                                                     KLMO 190
         ELSE ERROR='3',.                                               KLMO 200
    K    =1,.                          /* SORT X INTO ASCENDING       */KLMO 210
         DO I=2 TO N,.                 /* SEQUENCE                    */KLMO 211
         IF X(I) LT X(K)                                                KLMO 212
         THEN DO,.                                                      KLMO 213
              TEMP =X(I),.                                              KLMO 214
                   DO J=1 TO K,.                                        KLMO 215
                   L    =I-J,.                                          KLMO 216
                   IF TEMP GE X(L)                                      KLMO 217
                   THEN DO,.                                            KLMO 218
                        X(L+1)    =TEMP,.                               KLMO 219
                        GO TO S5,.                                      KLMO 220
                        END,.                                           KLMO 230
                   ELSE X(L+1)    =X(L),.                               KLMO 240
                   END,.                                                KLMO 250
              X(1) =TEMP,.                                              KLMO 260
 S5..                                                                   KLMO 270
              END,.                                                     KLMO 280
         K    =I,.                                                      KLMO 290
         END,.                                                          KLMO 300
                                       /* COMPUTES MAX. DEV. DN IN    */KLMO 310
                                       /* ABS. VAL. BETWEEN EMP. AND  */KLMO 320
                                       /* THEO. FUNCTIONS OVER ALL X  */KLMO 330
    DN,FS=0.0,.                                                         KLMO 340
    IL   =1,.                                                           KLMO 350
 S10..                                                                  KLMO 360
         DO I=IL TO N-1,.                                               KLMO 370
         J    =I,.                                                      KLMO 380
         IF X(J) NE X(J+1)                                              KLMO 390
         THEN GO TO S40,.                                               KLMO 400
         END,.                                                          KLMO 410
    J    =N,.                                                           KLMO 450
 S40..                                                                  KLMO 460
    IL   =J+1,.                                                         KLMO 470
    FI   =FS,.                                                          KLMO 480
    FS   =FLOAT(J)/N,.                 /* EMP. DIST. FUNCT. CALCULATED*/KLMO 490
    IF IFCOD=2                                                          KLMO 500
    THEN DO,.                                                           KLMO 510
         IF S LE 0                                                      KLMO 520
         THEN ERROR='1',.              /* INVALID VALUE OF S          */KLMO 530
         ELSE DO,.                     /* EXPONENTIAL PDF             */KLMO 590
              Z    =(X(J)-U)/S+1.0,.                                    KLMO 600
              IF Z LE 0                                                 KLMO 610
              THEN                     /* Z < OR = 0                  */KLMO 620
 S60..                                                                  KLMO 630
                   DO,.                                                 KLMO 640
                   Y    =0.0,.                                          KLMO 650
 S70..                                                                  KLMO 660
                   EI   =ABS(Y-FI),.                                    KLMO 670
                   ES   =ABS(Y-FS),.                                    KLMO 680
                                       /* COMPUTE MAX. DEV. DN BETWEEN*/KLMO 690
                                       /* EMP. AND THEO. FUNCTIONS    */KLMO 700
                   DN   =MAX(DN,EI,ES),.                                KLMO 710
                   IF IL LE N                                           KLMO 720
                   THEN GO TO S10,.                                     KLMO 730
                   ELSE DO,.                                            KLMO 760
                                       /* CALC. ASYMPTOTIC VALUES     */KLMO 770
                                       /* USING SMIR                  */KLMO 780
                        Z    =DN*SQRT(N),.                              KLMO 790
                        CALL SMIR (Z,PROB),.                            KLMO 800
                        PROB =1.E0-PROB,.                               KLMO 810
                        END,.                                           KLMO 830
                   END,.                                                KLMO 840
              ELSE DO,.                /* EXPONENTIAL PDF             */KLMO 850
                   Y=1.-EXP(-Z),.                                       KLMO 860
                   GO TO S70,.                                          KLMO 870
                   END,.                                                KLMO 880
              END,.                                                     KLMO 890
         END,.                                                          KLMO 900
    ELSE IF IFCOD LT 2                                                  KLMO 910
         THEN IF S LE 0                                                 KLMO 920
              THEN ERROR='1',.         /* INVALID VALUE OF S          */KLMO 930
              ELSE DO,.                /* NORMAL PDF                  */KLMO 940
                   Z    =(X(J)-U)/S,.                                   KLMO 950
                   CALL NDTR(Z,Y,D),.                                   KLMO 960
                   GO TO S70,.                                          KLMO 970
                   END,.                                                KLMO 980
         ELSE IF IFCOD=4                                                KLMO 990
              THEN IF S LE U                                            KLMO1000
                   THEN ERROR='1',.    /* INVALID VAL. OF S OR U      */KLMO1010
                   ELSE IF X(J) LE U   /* UNIFORM PDF                 */KLMO1020
                        THEN GO TO S60,.                                KLMO1030
                        ELSE IF X(J) LE S                               KLMO1040
                             THEN DO,.                                  KLMO1050
                                  Y    =(X(J)-U)/(S-U),.                KLMO1060
                                  GO TO S70,.                           KLMO1070
                                  END,.                                 KLMO1080
                             ELSE DO,.                                  KLMO1090
                                  Y    =1.0,.                           KLMO1100
                                  GO TO S70,.                           KLMO1110
                                  END,.                                 KLMO1120
              ELSE IF IFCOD LT 4                                        KLMO1130
                   THEN IF S=0         /* INVALID VALUE OF S          */KLMO1140
                        THEN ERROR='1',.                                KLMO1150
                        ELSE DO,.      /* CAUCHY PDF                  */KLMO1160
                             Y    =ATAN((X(J)-U)/S)*0.3183099+0.5,.     KLMO1170
                             GO TO S70,.                                KLMO1180
                             END,.                                      KLMO1190
                   ELSE ERROR='2',.    /* USER'S PDF                  */KLMO1200
 S80..                                                                  KLMO1210
    RETURN,.                                                            KLMO1220
    END,.                              /*END OF PROCEDURE KLMO        */KLMO1230
 KLM2..                                                                 KLM2  10
 /*********************************************************************/KLM2  20
 /*                                                                   */KLM2  30
 /*      TESTS THE DIFFERENCE BETWEEN TWO SAMPLE DISTRIBUTION         */KLM2  40
 /*      FUNCTIONS USING THE KOLMOGOROV-SMIRNOV TEST.                 */KLM2  50
 /*                                                                   */KLM2  60
 /*********************************************************************/KLM2  70
    PROCEDURE(X,Y,N,M,Z,PROB),.                                         KLM2  80
    DECLARE                                                             KLM2  90
         (X(*),Y(*),TEMP,XM1,XN1,Z,PROB,D) FLOAT BINARY,                KLM2 100
         (I,J,K,L,M,N) FIXED BINARY,                                    KLM2 110
         ERROR EXTERNAL CHARACTER(1),.                                  KLM2 120
    ERROR='0',.                                                         KLM2 130
    IF N LT 100 OR M LT 100            /* M OR N IS LESS THAN 100     */KLM2 140
    THEN IF N=0 OR M=0                 /* SET ERROR INDICATOR         */KLM2 150
         THEN DO,.                                                      KLM2 160
              ERROR='4',.                                               KLM2 170
              GO TO S60,.                                               KLM2 180
              END,.                                                     KLM2 190
         ELSE ERROR='3',.                                               KLM2 200
    K    =1,.                          /* SORT X INTO ASCENDING       */KLM2 210
         DO I=2 TO N,.                 /* SEQUENCE                    */KLM2 211
         IF X(I) LT X(K)                                                KLM2 212
         THEN DO,.                                                      KLM2 213
              TEMP =X(I),.                                              KLM2 214
                   DO J=1 TO K,.                                        KLM2 215
                   L    =I-J,.                                          KLM2 216
                   IF TEMP GE X(L)                                      KLM2 217
                   THEN DO,.                                            KLM2 218
                        X(L+1)    =TEMP,.                               KLM2 219
                        GO TO S5,.                                      KLM2 220
                        END,.                                           KLM2 221
                   ELSE X(L+1)    =X(L),.                               KLM2 222
                   END,.                                                KLM2 223
              X(1) =TEMP,.                                              KLM2 224
 S5..                                                                   KLM2 225
              END,.                                                     KLM2 226
         K    =I,.                                                      KLM2 227
         END,.                                                          KLM2 228
    K    =1,.                          /* SORT Y INTO ASCENDING       */KLM2 229
         DO I=2 TO M,.                 /* SEQUENCE                    */KLM2 230
         IF Y(I) LT Y(K)                                                KLM2 240
         THEN DO,.                                                      KLM2 250
              TEMP =Y(I),.                                              KLM2 260
                   DO J=1 TO K,.                                        KLM2 270
                   L    =I-J,.                                          KLM2 280
                   IF TEMP GE Y(L)                                      KLM2 290
                   THEN DO,.                                            KLM2 300
                        Y(L+1)    =TEMP,.                               KLM2 310
                        GO TO S8,.                                      KLM2 320
                        END,.                                           KLM2 330
                   ELSE Y(L+1)    =Y(L),.                               KLM2 340
                   END,.                                                KLM2 350
              Y(1) =TEMP,.                                              KLM2 360
 S8..                                                                   KLM2 370
              END,.                                                     KLM2 380
         K    =I,.                                                      KLM2 390
         END,.                                                          KLM2 400
    XN1  =1/FLOAT(N),.                 /* CALC. D=ABS(FN-GM)          */KLM2 410
    XM1  =1/FLOAT(M),.                 /* OVER THE SPECTRUM OF X & Y  */KLM2 420
    D,I,J,K,L =0,.                                                      KLM2 430
 S10..                                                                  KLM2 440
    IF Y(J+1) GT X(I+1)                                                 KLM2 450
    THEN DO,.                                                           KLM2 460
         K=1,.                                                          KLM2 470
 S20..                                                                  KLM2 480
         I=I+1,.                                                        KLM2 490
         IF N LE I                                                      KLM2 500
         THEN DO,.                                                      KLM2 510
              L=1,.                                                     KLM2 520
              GO TO S30,.                                               KLM2 530
              END,.                                                     KLM2 540
         ELSE IF X(I) GE X(I+1)                                         KLM2 550
              THEN GO TO S20,.                                          KLM2 560
              ELSE                                                      KLM2 570
 S30..                                                                  KLM2 580
                   IF K = 0                                             KLM2 590
                   THEN                                                 KLM2 600
 S40..                                                                  KLM2 610
                        DO,.                                            KLM2 620
                        J=J+1,.                                         KLM2 630
                        IF J LT M                                       KLM2 640
                        THEN IF Y(J+1) LE Y(J)                          KLM2 650
                             THEN GO TO S40,.                           KLM2 660
                             ELSE GO TO S50,.                           KLM2 670
                        ELSE L=1,.                                      KLM2 680
                        END,.                                           KLM2 720
         END,.                                                          KLM2 740
    ELSE IF X(I+1) = Y(J+1)                                             KLM2 750
         THEN DO,.                                                      KLM2 760
              K=0,.                                                     KLM2 770
              GO TO S20,.                                               KLM2 780
              END,.                                                     KLM2 790
         ELSE GO TO S40,.                                               KLM2 800
                                       /* CHOOSE THE MAXIMUM          */KLM2 810
                                       /* DIFFERENCE, D               */KLM2 820
 S50..                                                                  KLM2 830
    D    =MAX(D,ABS(FLOAT(I)*XN1-FLOAT(J)*XM1)),.                       KLM2 840
    IF L=0                                                              KLM2 850
    THEN GO TO S10,.                                                    KLM2 860
                                       /* CALCULATE THE STATISTIC Z   */KLM2 880
                                       /* AND Z'S PROBABILITY         */KLM2 890
    Z    =D*SQRT((FLOAT(N)*FLOAT(M))/(FLOAT(N)+FLOAT(M))),.             KLM2 900
    CALL SMIR(Z,PROB),.                                                 KLM2 910
    PROB =1-PROB,.                                                      KLM2 920
 S60..                                                                  KLM2 940
    RETURN,.                                                            KLM2 950
    END,.                              /* END OF PROCEDURE KLM2       */KLM2 960
 SMIR..                                                                 SMIR  10
 /*********************************************************************/SMIR  20
 /*                                                                   */SMIR  30
 /*      COMPUTES VALUES OF THE LIMITING DISTRIBUTION FUNCTION FOR THE*/SMIR  40
 /*      KOLMOGOROV-SMIRNOV STATISTIC.                                */SMIR  50
 /*                                                                   */SMIR  60
 /*********************************************************************/SMIR  70
    PROCEDURE (X,Y),.                                                   SMIR  80
    DECLARE                                                             SMIR  90
         (X,Y,Q1,Q2,Q4,Q8) FLOAT BINARY,./*SINGLE PRECISION        /*S*/SMIR 100
  /*     (X,Y,Q1,Q2,Q4,Q8) FLOAT BINARY (53),./*DOUBLE PRECISION   /*D*/SMIR 110
    IF X LT 1.0                                                         SMIR 120
    THEN IF X LE .27                   /* X LESS THAN .27-SET Y       */SMIR 130
         THEN Y    =0.0,.                                               SMIR 140
                                       /* CALCULATE L(X)              */SMIR 150
                                       /* IN RANGE (.27,1)            */SMIR 160
         ELSE DO,.                                                      SMIR 170
              Q1   =EXP(-1.233701E0/X**2),.      /* SINGLE PREC.   /*S*/SMIR 180
  /*          Q1   =EXP(-1.23370050136170E0/X**2),.                     SMIR 190
                                                 /* DOUBLE PREC.   /*D*/SMIR 200
              Q2   =Q1*Q1,.                                             SMIR 210
              Q4   =Q2*Q2,.                                             SMIR 220
              Q8   =Q4*Q4,.                                             SMIR 230
              IF Q8-1.0E-25 GE 0                                        SMIR 240
              THEN Y    =(2.506628E0/X)*Q1*(1.0E0+Q8*(1.0E0+Q8*Q8)),.   SMIR 250
                                                 /* SINGLE PREC.   /*S*/SMIR 260
  /*          THEN Y    =(2.506628274631001E0/X)*Q1*(1.0E0+Q8*          SMIR 270
                         (1.0E0+Q8*Q8)),.        /* DOUBLE PREC.   /*D*/SMIR 280
              ELSE Y    =(2.506628E0/X)*Q1,.     /* SINGLE PREC.   /*S*/SMIR 290
  /*          ELSE Y    =(2.506628274631001E0/X)*Q1,.                   SMIR 300
                                                 /* DOUBLE PREC.   /*D*/SMIR 310
              END,.                                                     SMIR 320
    ELSE IF X LT 3.1                                                    SMIR 330
                                       /* CALCULATE L(X)              */SMIR 340
         THEN DO,.                     /* IN RANGE (1,3.1)            */SMIR 350
              Q1   =EXP(-2.0E0*X*X),.                                   SMIR 360
              Q2   =Q1*Q1,.                                             SMIR 370
              Q4   =Q2*Q2,.                                             SMIR 380
              Q8   =Q4*Q4,.                                             SMIR 390
              Y    =1.0E0-2.0E0*(Q1-Q4+Q8*(Q1-Q8)),.                    SMIR 400
              END,.                                                     SMIR 410
         ELSE Y    =1.0,.              /* X > OR = 3.1--SET Y         */SMIR 420
    RETURN,.                                                            SMIR 430
    END,.                              /* END OF PROCEDURE SMIR       */SMIR 440
 CHSQ..                                                                 CHSQ  10
 /*********************************************************************/CHSQ  20
 /*                                                                   */CHSQ  30
 /*      TO COMPUTE CHI-SQUARE FROM A CONTINGENCY TABLE.              */CHSQ  40
 /*                                                                   */CHSQ  50
 /*********************************************************************/CHSQ  60
    PROCEDURE (A,N,M,CS,NDF,P,TP),.                                     CHSQ  70
    DECLARE                                                             CHSQ  80
         ERROR EXTERNAL CHARACTER (1),                                  CHSQ  90
         (A(*,*),CS,GS,TR(N),TC(M),P,TP,E)                              CHSQ 100
         BINARY FLOAT,                 /*SINGLE PRECISION VERSION  /*S*/CHSQ 110
  /*     BINARY FLOAT(53),             /*DOUBLE PRECISION VERSION  /*D*/CHSQ 120
         (I,ICOUNT,J,M,N,NDF,NA,NB,NC,ND,NAB,NCD,NAC,NBD,NZ)            CHSQ 130
         FIXED BINARY,                                                  CHSQ 140
         (WN,F,W,W1,W2,W3,W4) FLOAT BINARY(53),.                        CHSQ 150
 /*                                                                   */CHSQ 160
    ERROR='0',.                                                         CHSQ 170
    CS   =0.0,.                                                         CHSQ 180
    P    =0.0,.                                                         CHSQ 190
    TP   =0.0,.                                                         CHSQ 200
    NDF  =(N-1)*(M-1),.                /* FIND DEGREES OF FREEDOM     */CHSQ 210
    IF N LE 1 OR M LE 1                                                 CHSQ 220
    THEN DO,.                                                           CHSQ 230
         ERROR='2',.                   /* DEGREES OF FREEDOM = 0      */CHSQ 240
         GO TO FIN,.                                                    CHSQ 250
         END,.                                                          CHSQ 260
 /*                                                                   */CHSQ 270
         DO I = 1 TO N,.               /* CALCULATE ROW TOTALS        */CHSQ 280
         TR(I)=0.0,.                                                    CHSQ 290
              DO J = 1 TO M,.                                           CHSQ 300
              TR(I)=TR(I)+A(I,J),.                                      CHSQ 310
              END,.                                                     CHSQ 320
         IF TR(I) LE 0                                                  CHSQ 330
         THEN DO,.                     /* SOME ROW TOTAL = ZERO       */CHSQ 340
              ERROR='3',.                                               CHSQ 350
              GO TO FIN,.                                               CHSQ 360
              END,.                                                     CHSQ 370
         END,.                                                          CHSQ 380
         DO J = 1 TO M,.               /* CALCULATE COLUMN TOTALS     */CHSQ 390
         TC(J)=0.0,.                                                    CHSQ 400
              DO I = 1 TO N,.                                           CHSQ 410
              TC(J)=TC(J)+A(I,J),.                                      CHSQ 420
              END,.                                                     CHSQ 430
         IF TC(J) LE 0                                                  CHSQ 440
         THEN DO,.                                                      CHSQ 450
              ERROR='3',.              /* SOME COLUMN TOTAL = ZERO    */CHSQ 460
              GO TO FIN,.                                               CHSQ 470
              END,.                                                     CHSQ 480
         END,.                                                          CHSQ 490
    GS   =0.0,.                        /* COMPUTE GRAND SUM           */CHSQ 500
         DO I = 1 TO N,.                                                CHSQ 510
         GS   =GS+TR(I),.                                               CHSQ 520
         END,.                                                          CHSQ 530
 /*                                                                   */CHSQ 540
 /*      COMPUTE CHI-SQUARE FOR 2 BY 2 TABLE (SPECIAL CASE)           */CHSQ 550
 /*                                                                   */CHSQ 560
    IF N = 2 AND M = 2                                                  CHSQ 570
    THEN DO,.                                                           CHSQ 580
                   CS   =GS*(ABS(A(1,1)*A(2,2)-A(2,1)*A(1,2))           CHSQ 590
                         -GS/2.0)**2/(TC(1)*TC(2)*TR(1)*TR(2)),.        CHSQ 600
         IF GS GT 40.0                                                  CHSQ 610
         THEN GO TO FIN,.                                               CHSQ 620
         ELSE DO,.                                                      CHSQ 630
              IF (TR(1)*TC(1))/GS GE 5.0 AND                            CHSQ 640
                   (TR(2)*TC(1))/GS GE 5.0 AND                          CHSQ 650
                   (TR(1)*TC(2))/GS GE 5.0 AND                          CHSQ 660
                   (TR(2)*TC(2))/GS GE 5.0                              CHSQ 670
              THEN GO TO FIN,.                                          CHSQ 680
              ELSE DO,.                                                 CHSQ 690
                   NA   =A(1,1),.                                       CHSQ 700
                   NB   =A(1,2),.                                       CHSQ 710
                   NC   =A(2,1),.                                       CHSQ 720
                   ND   =A(2,2),.                                       CHSQ 730
                   K    =1,.                                            CHSQ 740
 /*                                                                   */CHSQ 750
 /*      OBTAIN THE MARGINAL TOTALS AND GRAND TOTAL                   */CHSQ 760
 /*                                                                   */CHSQ 770
                  NAB  =NA+NB,.                                         CHSQ 780
                   NCD  =NC+ND,.                                        CHSQ 790
                   NAC  =NA+NC,.                                        CHSQ 800
                   NBD  =NB+ND,.                                        CHSQ 810
                   NZ   =NA+NB+NC+ND,.                                  CHSQ 820
 /*                                                                   */CHSQ 830
 /*      COMPUTE N FACTORIAL                                          */CHSQ 840
 /*                                                                   */CHSQ 850
                  WN    =1,.                                            CHSQ 860
                   IF NZ GT 1                                           CHSQ 870
                   THEN DO,.                                            CHSQ 880
                             DO I = 2 TO NZ,.                           CHSQ 890
                             FI   =I,.                                  CHSQ 900
                             WN   =WN*FI,.                              CHSQ 910
                             END,.                                      CHSQ 920
                        END,.                                           CHSQ 930
 /*                                                                   */CHSQ 940
 /*      COMPUTE EXACT PROBABILITY                                    */CHSQ 950
 /*                                                                   */CHSQ 960
 S10..                                                                  CHSQ 970
                  W1    =1,.                                            CHSQ 980
                   IF NB GT 0                                           CHSQ 990
                   THEN DO,.                                            CHSQ1000
                        J    =NA+1,.                                    CHSQ1010
                             DO I = J TO NAB,.                          CHSQ1020
                             FI   =I,.                                  CHSQ1030
                             W1   =W1*FI,.                              CHSQ1040
                             END,.                                      CHSQ1050
                        END,.                                           CHSQ1060
                   W2   =1.0,.                                          CHSQ1070
                   IF NC GT 0                                           CHSQ1080
                   THEN DO,.                                            CHSQ1090
                        J    =ND+1,.                                    CHSQ1100
                             DO I = J TO NCD,.                          CHSQ1110
                             FI   =I,.                                  CHSQ1120
                             W2   =W2*FI,.                              CHSQ1130
                             END,.                                      CHSQ1140
                        END,.                                           CHSQ1150
                   W3   =1.0,.                                          CHSQ1160
                   IF NA GT 0                                           CHSQ1170
                   THEN DO,.                                            CHSQ1180
                        J    =NC+1,.                                    CHSQ1190
                             DO I = J TO NAC,.                          CHSQ1200
                             FI   =I,.                                  CHSQ1210
                             W3   =W3*FI,.                              CHSQ1220
                             END,.                                      CHSQ1230
                        END,.                                           CHSQ1240
                   W4   =1.0,.                                          CHSQ1250
                   IF ND GT 0                                           CHSQ1260
                   THEN DO,.                                            CHSQ1270
                        J    =NB+1,.                                    CHSQ1280
                             DO I = J TO NBD,.                          CHSQ1290
                             FI   =I,.                                  CHSQ1300
                             W4   =W4*FI,.                              CHSQ1310
                             END,.                                      CHSQ1320
                        END,.                                           CHSQ1330
                   W1   =W1*W2*W3*W4,.                                  CHSQ1340
                   W    =W1/WN,.                                        CHSQ1350
                   P    =P+W,.                                          CHSQ1360
                   IF K GT 1                                            CHSQ1370
                   THEN TP   =TP+W,.                                    CHSQ1380
                   K    =K+1,.                                          CHSQ1390
 /*                                                                   */CHSQ1400
 /*      TEST WHETHER FREQUENCY IS ZERO (0)                           */CHSQ1410
 /*                                                                   */CHSQ1420
                  IF NA LE 0 OR NB LE 0 OR NC LE 0 OR ND LE 0           CHSQ1430
                   THEN GO TO FIN,.                                     CHSQ1440
 /*                                                                   */CHSQ1450
 /*      ADJUST DATA IN ORDER TO COMPUTE THE PROBABILITY ASSOCIATED   */CHSQ1460
 /*      WITH MORE EXTREME FREQUENCIES (BUT WITH SAME MARGINAL TOTALS)*/CHSQ1470
 /*                                                                   */CHSQ1480
                  IF NA LE NB                                           CHSQ1490
                   THEN DO,.                                            CHSQ1500
                        IF NC LE ND                                     CHSQ1510
                        THEN DO,.                                       CHSQ1520
                             IF NA GT NC                                CHSQ1530
                             THEN GO TO S20,.                           CHSQ1540
                             END,.                                      CHSQ1550
                        GO TO S25,.                                     CHSQ1560
                        END,.                                           CHSQ1570
                   IF NC GT ND                                          CHSQ1580
                   THEN DO,.                                            CHSQ1590
                        IF NB GT ND                                     CHSQ1600
                        THEN GO TO S25,.                                CHSQ1610
                        END,.                                           CHSQ1620
 /*                                                                   */CHSQ1630
 /*      MOVE B TO A AND C TO D                                       */CHSQ1640
 /*                                                                   */CHSQ1650
 S20..                                                                  CHSQ1660
                  NA    =NA+1,.                                         CHSQ1670
                   NB   =NB-1,.                                         CHSQ1680
                   NC   =NC-1,.                                         CHSQ1690
                   ND   =ND+1,.                                         CHSQ1700
                   GO TO S10,.                                          CHSQ1710
 /*                                                                   */CHSQ1720
 /*      MOVE A TO B AND D TO C                                       */CHSQ1730
 /*                                                                   */CHSQ1740
 S25..                                                                  CHSQ1750
                  NA    =NA-1,.                                         CHSQ1760
                   NB   =NB+1,.                                         CHSQ1770
                   NC   =NC+1,.                                         CHSQ1780
                   ND   =ND-1,.                                         CHSQ1790
                   GO TO S10,.                                          CHSQ1800
                   END,.                                                CHSQ1810
              END,.                                                     CHSQ1820
         END,.                         /* END OF TWO BY TWO CASE      */CHSQ1830
 /*                                                                   */CHSQ1840
 /*      COMPUTE CHI SQUARE FOR OTHER CONTINGENCY TABLES              */CHSQ1850
 /*                                                                   */CHSQ1860
         ICOUNT=0,.                                                     CHSQ1870
         DO J = 1 TO M,.                                                CHSQ1880
              DO I = 1 TO N,.                                           CHSQ1890
              E    =TR(I)*TC(J)/GS,.                                    CHSQ1900
              IF E LE 5.0                                               CHSQ1910
              THEN ICOUNT=ICOUNT+1,.                                    CHSQ1920
              CS   =CS+(A(I,J)-E)*(A(I,J)-E)/E,.                        CHSQ1930
              END,.                                                     CHSQ1940
         END,.                                                          CHSQ1950
    IF ICOUNT GT 0                                                      CHSQ1960
    THEN ERROR='1',.                   /* SOME EXPECTED VALUES ARE    */CHSQ1970
 /*                                    /* LESS THAN 5.0               */CHSQ1980
 FIN..                                                                  CHSQ1990
    RETURN,.                                                            CHSQ2000
    END,.                              /* END OF PROCEDURE CHSQ       */CHSQ2010
 KRNK..                                                                 KRNK  10
 /*********************************************************************/KRNK  20
 /*                                                                   */KRNK  30
 /*      TO TEST CORRELATION BETWEEN TWO VARIABLES BY MEANS OF THE    */KRNK  40
 /*      KENDALL RANK CORRELATION COEFFICIENT.                        */KRNK  50
 /*                                                                   */KRNK  60
 /*********************************************************************/KRNK  70
    PROCEDURE (A,B,R1,R2,N,TAU,SD,Z,NR),.                               KRNK  80
    DECLARE                                                             KRNK  90
         (A(*),B(*),R1(*),R2(*),TAU,SD,Z,RSAVE,SAVER,S,TA,TB,FN1,FN)    KRNK 100
         FLOAT BINARY,                                                  KRNK 110
         (I,ISORT,J,KT,N,NR)                                            KRNK 120
         BINARY FIXED,                                                  KRNK 130
         ERROR EXTERNAL CHARACTER (1),.                                 KRNK 140
 /*                                                                   */KRNK 150
    ERROR='0',.                        /* INITIALIZATION              */KRNK 160
         DO I=1 TO N,.                                                  KRNK 170
         R1(I)     =0,.                                                 KRNK 180
         R2(I)     =0,.                                                 KRNK 190
         END,.                                                          KRNK 200
    TAU  =0.0,.                                                         KRNK 210
    SD   =0.0,.                                                         KRNK 220
    Z    =0.0,.                                                         KRNK 230
    IF N LE 1                          /* NUMBER OF OBSERVATIONS LESS */KRNK 240
    THEN DO,.                          /* THAN OR EQUAL TO ONE.       */KRNK 250
         ERROR='1',.                                                    KRNK 260
         GO TO FIN,.                                                    KRNK 270
         END,.                                                          KRNK 280
    FN   =N,.                                                           KRNK 290
    FN1  =N*(N-1),.                                                     KRNK 300
    IF NR= 1                           /* DETERMINE IF DATA IS RANKED */KRNK 310
    THEN DO,.                                                           KRNK 320
              DO I = 1 TO N,.                                           KRNK 330
              R1(I)=A(I),.             /* MOVE RANKED DATA TO R1 R2   */KRNK 340
              R2(I)=B(I),.                                              KRNK 350
              END,.                                                     KRNK 360
         END,.                                                          KRNK 370
    ELSE DO,.                                                           KRNK 380
 /*                                                                   */KRNK 390
 /*      RANK DATA IN A AND B VECTORS AND ASSIGN TIED OBSERVATIONS    */KRNK 400
 /*      AVERAGE OF TIED RANKS.                                       */KRNK 410
 /*                                                                   */KRNK 420
         CALL RANK (A,R1,N),.                                           KRNK 430
         CALL RANK (B,R2,N),.                                           KRNK 440
         END,.                                                          KRNK 450
 S10..                                                                  KRNK 460
    ISORT=0,.                                                           KRNK 470
 /*                                                                   */KRNK 480
 /*      SORT RANK VECTORS R1 AND R2 IN SEQUENCE OF VARIABLE A        */KRNK 490
 /*                                                                   */KRNK 500
         DO I = 2 TO N,.                                                KRNK 510
         IF R1(I) LT R1(I-1)                                            KRNK 520
         THEN DO,.                                                      KRNK 530
              ISORT=ISORT+1,.                                           KRNK 540
              RSAVE=R1(I),.                                             KRNK 550
              R1(I)=R1(I-1),.                                           KRNK 560
              R1(I-1)=RSAVE,.                                           KRNK 570
              SAVER=R2(I),.                                             KRNK 580
              R2(I)=R2(I-1),.                                           KRNK 590
              R2(I-1)=SAVER,.                                           KRNK 600
              END,.                                                     KRNK 610
         END,.                                                          KRNK 620
    IF ISORT NE 0                                                       KRNK 630
    THEN GO TO S10,.                                                    KRNK 640
 /*                                                                   */KRNK 650
 /*      COMPUTE S ON VARIABLE B. STARTING WITH THE FIRST RANK, ADD 1 */KRNK 660
 /*      TO S FOR EACH LARGER RANK TO ITS RIGHT AND SUBTRACT 1 FOR    */KRNK 670
 /*      EACH SMALLER RANK. REPEAT FOR ALL RANKS.                     */KRNK 680
 /*                                                                   */KRNK 690
    S    =0,.                                                           KRNK 700
         DO I = 1 TO N-1,.                                              KRNK 710
              DO J = I+1 TO N,.                                         KRNK 720
              IF R2(J) GT R2(I)                                         KRNK 730
              THEN S    =S+1.0,.                                        KRNK 740
              ELSE IF R2(J) LT R2(I)                                    KRNK 750
              THEN S    =S-1.0,.                                        KRNK 760
              END,.                                                     KRNK 770
         END,.                                                          KRNK 780
 /*                                                                   */KRNK 790
 /*      COMPUTE TIED SCORE INDEX FOR BOTH VARIABLES                  */KRNK 800
 /*                                                                   */KRNK 810
    KT   =2,.                                                           KRNK 820
    CALL TIE (R1,N,KT,TA),.                                             KRNK 830
    IF ERROR='2'                                                        KRNK 840
    THEN                                                                KRNK 850
 S20..                                                                  KRNK 860
         DO,.                          /* ALL RANKS FOR ONE VARIABLE  */KRNK 870
         ERROR='3',.                   /* ARE EQUAL                   */KRNK 880
         GO TO FIN,.                                                    KRNK 890
         END,.                                                          KRNK 900
    CALL TIE (R2,N,KT,TB),.                                             KRNK 910
    IF ERROR='2'                                                        KRNK 920
    THEN GO TO S20,.                                                    KRNK 930
    IF TA= 0.0 AND TB = 0.0            /* COMPUTE TAU                 */KRNK 940
    THEN TAU  =S/(0.5*FN1),.                                            KRNK 950
    ELSE TAU  =S/((SQRT(0.5*FN1-TA))*(SQRT(0.5*FN1-TB))),.              KRNK 960
 /*                                                                   */KRNK 970
 /*      COMPUTE STANDARD DEVIATION AND Z VALUE IF N IS 10 OR GREATER */KRNK 980
 /*                                                                   */KRNK 990
    IF N GE 10                                                          KRNK1000
    THEN DO,.                                                           KRNK1010
         SD   =(SQRT((2.0*(FN+FN+5))/(9.0*FN1))),.                      KRNK1020
         Z    =TAU/SD,.                                                 KRNK1030
         END,.                                                          KRNK1040
    ELSE ERROR='2',.                   /* SAMPLE SIZE LESS THAN 10    */KRNK1050
 FIN..                                                                  KRNK1060
    RETURN,.                                                            KRNK1070
    END,.                              /*END OF PROCEDURE KRNK        */KRNK1080
 QTST..                                                                 QTST  10
 /*********************************************************************/QTST  20
 /*                                                                   */QTST  30
 /*      TO TEST WHETHER THREE OR MORE MATCHED GROUPS OF DICHOTOMOUS  */QTST  40
 /*      DATA DIFFER SIGNIFICANTLY BY THE COCHRAN Q-TEST.             */QTST  50
 /*                                                                   */QTST  60
 /*********************************************************************/QTST  70
    PROCEDURE (A,N,M,Q,NDF),.                                           QTST  80
    DECLARE                                                             QTST  90
         ERROR EXTERNAL CHARACTER (1),                                  QTST 100
         (A(*,*),TR(N),TC(M),Q,RSQ,CSQ,GD,FM)                           QTST 110
         BINARY FLOAT,                                                  QTST 120
         (I,J,M,N,NDF)                                                  QTST 130
         BINARY FIXED,.                                                 QTST 140
 /*                                                                   */QTST 150
    ERROR='0',.                                                         QTST 160
    IF M LT 3 OR N LE 1                /* NUMBER OF CASES IN EACH     */QTST 170
    THEN DO,.                          /* GROUP IS LESS THAN 3 OR     */QTST 180
         ERROR='1',.                   /* THE NUMBER OF OBSERVATIONS  */QTST 190
         GO TO FIN,.                   /* IS LESS THAN OR EQUAL TO    */QTST 200
         END,.                         /* ONE.                        */QTST 210
    FM   =M,.                                                           QTST 220
 /*                                                                   */QTST 230
 /*      COMPUTE SUM OF SQUARES OF ROW AND COLUMN TOTALS RSQ AND CSQ, */QTST 240
 /*      AND GRAND TOTAL OF ALL ELEMENTS.                             */QTST 250
 /*                                                                   */QTST 260
         DO I = 1 TO N,.                                                QTST 270
         TR(I)=0.0,.                                                    QTST 280
              DO J = 1 TO M,.                                           QTST 290
              TR(I)=TR(I)+A(I,J),.                                      QTST 300
              END,.                                                     QTST 310
         END,.                                                          QTST 320
         DO J = 1 TO M,.               /* CALCULATE COLUMN SUMS       */QTST 330
         TC(J)=0.0,.                                                    QTST 340
              DO I = 1 TO N,.                                           QTST 350
              TC(J)=TC(J)+A(I,J),.                                      QTST 360
              END,.                                                     QTST 370
         END,.                                                          QTST 380
    Q    =0.0,.                                                         QTST 390
    NDF  =0.0,.                                                         QTST 400
    GD   =0.0,.                                                         QTST 410
    RSQ  =0.0,.                                                         QTST 420
    CSQ  =0.0,.                                                         QTST 430
         DO I = 1 TO N,.                                                QTST 440
         GD   =GD+TR(I),.              /* GRAND TOTAL                 */QTST 450
         RSQ  =RSQ+TR(I)*TR(I),.       /* SUM OF ROW TOTAL SQUARED    */QTST 460
         END,.                                                          QTST 470
         DO J = 1 TO M,.                                                QTST 480
         CSQ  =CSQ+TC(J)*TC(J),.       /* SUM OF COLUMN TOTAL SQUARED */QTST 490
         END,.                                                          QTST 500
    Q    =FM*GD-RSQ,.                                                   QTST 510
    IF Q LT 1                          /* TEST FOR Q NEAR ZERO        */QTST 520
    THEN DO,.                                                           QTST 530
         ERROR='2',.                                                    QTST 540
         GO TO FIN,.                                                    QTST 550
         END,.                                                          QTST 560
 /*                                                                   */QTST 570
 /*    COMPUTE COCHRAN Q TEST VALUE.                                  */QTST 580
 /*                                                                   */QTST 590
    Q    =(FM-1.0)*(FM*CSQ-GD*GD)/(FM*GD-RSQ),.                         QTST 600
    NDF  =M-1,.                        /* FIND DEGREES OF FREEDOM     */QTST 610
 FIN..                                                                  QTST 620
    RETURN,.                                                            QTST 630
    END,.                              /*END OF PROCEDURE QTST        */QTST 640
 RANK..                                                                 RANK  10
 /*********************************************************************/RANK  20
 /*                                                                   */RANK  30
 /*      TO RANK A VECTOR OF VALUES.                                  */RANK  40
 /*                                                                   */RANK  50
 /*********************************************************************/RANK  60
    PROCEDURE (A,R,N),.                                                 RANK  70
    DECLARE                                                             RANK  80
         ERROR EXTERNAL CHARACTER(1),                                   RANK  90
         (A(*),R(*),EQUAL,P,SMALL,X)                                    RANK 100
         BINARY FLOAT,                                                  RANK 110
         (I,J,N)                                                        RANK 120
         BINARY FIXED,.                                                 RANK 130
 /*                                                                   */RANK 140
    ERROR='0',.                                                         RANK 150
         DO I = 1 TO N,.                                                RANK 160
         R(I) =0.0,.                                                    RANK 170
         END,.                                                          RANK 180
    IF N LE 1                                                           RANK 190
    THEN DO,.                          /* VECTOR LENGTH IS ONE OR LESS*/RANK 200
         ERROR='1',.                                                    RANK 210
         GO TO FIN,.                                                    RANK 220
         END,.                                                          RANK 230
 /*                                                                   */RANK 240
 /*      FIND RANK OF DATA                                            */RANK 250
 /*                                                                   */RANK 260
         DO I = 1 TO N,.                                                RANK 270
 /*                                                                   */RANK 280
 /*      TEST WHETHER DATA POINT IS ALREADY RANKED                    */RANK 290
 /*                                                                   */RANK 300
         IF R(I) LE 0                                                   RANK 310
         THEN DO,.                                                      RANK 320
              SMALL=0.0,.                                               RANK 330
              EQUAL=0.0,.                                               RANK 340
              X    =A(I),.             /* DATA POINT TO BE RANKED     */RANK 350
                   DO J = 1 TO N,.                                      RANK 360
                   IF A(J) LT X                                         RANK 370
 /*                                                                   */RANK 380
 /*      COUNT NUMBER OF DATA POINTS WHICH ARE SMALLER                */RANK 390
 /*                                                                   */RANK 400
                   THEN SMALL=SMALL+1.0,.                               RANK 410
                   ELSE IF A(J)= X                                      RANK 420
                   THEN DO,.                                            RANK 430
 /*                                                                   */RANK 440
 /*      COUNT NUMBER OF DATA POINTS WHICH ARE EQUAL                  */RANK 450
 /*                                                                   */RANK 460
                        EQUAL=EQUAL+1,.                                 RANK 470
                        R(J) =-1.0,.                                    RANK 480
                        END,.                                           RANK 490
                   END,.                                                RANK 500
              IF EQUAL LE 1.0          /* TEST FOR TIE                */RANK 510
 /*                                                                   */RANK 520
 /*      STORE RANK OF DATA POINT WHERE NO TIE                        */RANK 530
 /*                                                                   */RANK 540
              THEN R(I) =SMALL+1.0,.                                    RANK 550
 /*                                                                   */RANK 560
 /*      CALCULATE RANK OF TIED DATA POINTS                           */RANK 570
 /*                                                                   */RANK 580
              ELSE P    =SMALL+(EQUAL+1.0)/2.0,.                        RANK 590
                   DO J = 1 TO N,.                                      RANK 600
                   IF R(J)= -1.0                                        RANK 610
                   THEN R(J) =P,.                                       RANK 620
                   END,.                                                RANK 630
              END,.                                                     RANK 640
         END,.                                                          RANK 650
 FIN..                                                                  RANK 660
    RETURN,.                                                            RANK 670
    END,.                              /*END OF PROCEDURE RANK        */RANK 680
 SRNK..                                                                 SRNK  10
 /*********************************************************************/SRNK  20
 /*                                                                   */SRNK  30
 /*      TO TEST CORRELATION BETWEEN TWO VARIABLES BY MEANS OF        */SRNK  40
 /*      SPEARMAN RANK CORRELATION COEFFICIENT.                       */SRNK  50
 /*                                                                   */SRNK  60
 /*********************************************************************/SRNK  70
    PROCEDURE (A,B,R1,R2,N,RS,T,NDF,NR),.                               SRNK  80
    DECLARE                                                             SRNK  90
         (A(*),B(*),R1(*),R2(*),RS,T,D,X,Y,TSA,TSB,FNN)                 SRNK 100
         BINARY FLOAT,                                                  SRNK 110
         (KT,N,NDF,NR)                                                  SRNK 120
         BINARY FIXED,                                                  SRNK 130
         ERROR EXTERNAL CHARACTER (1),.                                 SRNK 140
 /*                                                                   */SRNK 150
    FNN  =N*N*N-N,.                                                     SRNK 160
    NDF  =0,.                                                           SRNK 170
    T    =0.0,.                                                         SRNK 180
    RS   =0.0,.                                                         SRNK 190
    ERROR='0',.                                                         SRNK 200
         DO I=1 TO N,.                                                  SRNK 210
         R1(I)     =0,.                                                 SRNK 220
         R2(I)     =0,.                                                 SRNK 230
         END,.                                                          SRNK 240
    IF N LE 1                          /* NUMBER OF OBSERVATIONS IS   */SRNK 250
    THEN DO,.                          /*LESS THAN OR EQUAL TO ONE.   */SRNK 260
         ERROR='1',.                                                    SRNK 270
         GO TO FIN,.                                                    SRNK 280
         END,.                                                          SRNK 290
 /*                                                                   */SRNK 300
 /*      DETERMINE WHETHER DATA IS RANKED.                            */SRNK 310
 /*                                                                   */SRNK 320
    IF NR NE 1                                                          SRNK 330
 /*                                                                   */SRNK 340
 /*      RANK DATA IN A AND B VECTORS AND ASSIGN TIED OBSERVATIONS    */SRNK 350
 /*      AVERAGE OF TIED RANKS.                                       */SRNK 360
 /*                                                                   */SRNK 370
    THEN DO,.                                                           SRNK 380
         CALL RANK (A,R1,N),.                                           SRNK 390
         CALL RANK (B,R2,N),.                                           SRNK 400
         END,.                                                          SRNK 410
    ELSE DO,.                                                           SRNK 420
              DO I = 1 TO N,.          /* MOVE RANKED DATA            */SRNK 430
              R1(I)=A(I),.                                              SRNK 440
              R2(I)=B(I),.                                              SRNK 450
              END,.                                                     SRNK 460
         END,.                                                          SRNK 470
 /*                                                                   */SRNK 480
 /*      COMPUTE SUM OF SQUARES OF RANK DIFFERENCES.                  */SRNK 490
 /*                                                                   */SRNK 500
    D    =0,.                                                           SRNK 510
         DO I = 1 TO N,.                                                SRNK 520
         D    =D+(R1(I)-R2(I))**2,.                                     SRNK 530
         END,.                                                          SRNK 540
    KT   =1,.                                                           SRNK 550
    CALL TIE (R1,N,KT,TSA),.           /* COMPUTE TIED SCORE INDEX    */SRNK 560
    IF ERROR='2'                       /* ALL RANKS FOR ONE VARIABLE  */SRNK 570
    THEN                               /* ARE EQUAL                   */SRNK 580
 S10..                                                                  SRNK 590
         DO,.                          /* ALL RANKS FOR ONE VARIABLE  */SRNK 600
         ERROR='3',.                   /* ARE EQUAL                   */SRNK 610
         GO TO FIN,.                                                    SRNK 620
         END,.                                                          SRNK 630
    CALL TIE (R2,N,KT,TSB),.                                            SRNK 640
    IF ERROR='2'                                                        SRNK 650
    THEN GO TO S10,.                                                    SRNK 660
 /*                                                                   */SRNK 670
 /*      COMPUTE SPEARMAN RANK CORRELATION COEFFICIENT                */SRNK 680
 /*                                                                   */SRNK 690
    IF TSA NE 0 AND TSB NE 0                                            SRNK 700
    THEN DO,.                                                           SRNK 710
         X    =FNN/12.0-TSA,.                                           SRNK 720
         Y    =X+TSA-TSB,.                                              SRNK 730
         RS   =(X+Y-D)/(2.0*(SQRT(X*Y))),.                              SRNK 740
         END,.                                                          SRNK 750
    ELSE RS   =1.0-6.0*D/FNN,.                                          SRNK 760
 /*                                                                   */SRNK 770
 /*      COMPUTE T AND DEGREES OF FREEDOM IF N IS 10 OR LARGER        */SRNK 780
 /*                                                                   */SRNK 790
    IF N GE 10                                                          SRNK 800
    THEN DO,.                                                           SRNK 810
         T    =RS*SQRT((N-2.0)/(1.0-RS*RS)),.                           SRNK 820
         NDF  =N-2,.                                                    SRNK 830
         END,.                                                          SRNK 840
    ELSE ERROR='2',.                   /* SAMPLE SIZE LESS THAN 10    */SRNK 850
 FIN..                                                                  SRNK 860
    RETURN,.                                                            SRNK 870
    END,.                              /*END OF PROCEDURE SRNK        */SRNK 880
 TIE..                                                                  TIE   10
 /*********************************************************************/TIE   20
 /*                                                                   */TIE   30
 /*      TO CALCULATE CORRELATION FACTOR DUE TO TIES.                 */TIE   40
 /*                                                                   */TIE   50
 /*********************************************************************/TIE   60
    PROCEDURE (R,N,KT,T),.                                              TIE   70
    DECLARE                                                             TIE   80
         (R(*),T,X,Y,CT)                                                TIE   90
         BINARY FLOAT,                                                  TIE  100
         ERROR EXTERNAL CHARACTER(1),                                   TIE  110
         (I,IND,KT,N)                                                   TIE  120
         BINARY FIXED,.                                                 TIE  130
 /*                                                                   */TIE  140
    ERROR='0',.                                                         TIE  150
    IF N LE 1                                                           TIE  160
    THEN DO,.                          /* VECTOR LENGTH IS ONE OR LESS*/TIE  170
         ERROR='1',.                                                    TIE  180
         GO TO FIN,.                                                    TIE  190
         END,.                                                          TIE  200
    T    =0.0,.                        /* INITIALIZATION              */TIE  210
    Y    =0.0,.                                                         TIE  220
 S10..                                                                  TIE  230
    X    =N+1,.                                                         TIE  240
    IND  =0,.                                                           TIE  250
         DO I = 1 TO N,.               /* FIND NEXT LARGEST RANK      */TIE  260
         IF R(I) GT Y AND R(I) LT X                                     TIE  270
         THEN DO,.                                                      TIE  280
              X    =R(I),.                                              TIE  290
              IND  =IND+1,.                                             TIE  300
              END,.                                                     TIE  310
         END,.                                                          TIE  320
 /*                                                                   */TIE  330
 /*      IF ALL RANKS HAVE BEEN TESTED RETURN                         */TIE  340
 /*                                                                   */TIE  350
    IF IND NE 0                                                         TIE  360
    THEN DO,.                                                           TIE  370
         Y    =X,.                                                      TIE  380
         CT   =0.0,.                                                    TIE  390
              DO I = 1 TO N,.          /* COUNT TIES                  */TIE  400
              IF R(I)= X                                                TIE  410
              THEN CT   =CT+1.0,.                                       TIE  420
              END,.                                                     TIE  430
         IF CT NE 0.0                                                   TIE  440
         THEN DO,.                                                      TIE  450
              IF KT= 1                                                  TIE  460
              THEN T    =T+(CT*CT*CT-CT)/12.0,.                         TIE  470
              ELSE T    =T+CT*(CT-1.0)/2.0,.                            TIE  480
              END,.                                                     TIE  490
         GO TO S10,.                                                    TIE  500
         END,.                                                          TIE  510
 FIN..                                                                  TIE  520
    IF CT=N                            /* ALL RANKS FOR ONE VARIABLE  */TIE  530
    THEN ERROR='2',.                   /* ARE EQUAL                   */TIE  540
    RETURN,.                                                            TIE  550
    END,.                              /*END OF PROCEDURE TIE         */TIE  560
 TWAV..                                                                 TWAV  10
 /*********************************************************************/TWAV  20
 /*                                                                   */TWAV  30
 /*      TO TEST WHETHER A NUMBER OF SAMPLES ARE FROM THE SAME        */TWAV  40
 /*      POPULATION BY THE FRIEDMAN TWO-WAY ANALYSIS OF VARIANCE      */TWAV  50
 /*      TEST.                                                        */TWAV  60
 /*                                                                   */TWAV  70
 /*********************************************************************/TWAV  80
    PROCEDURE (A,R,N,M,XR,NDF,NR),.                                     TWAV  90
    DECLARE                                                             TWAV 100
         ERROR EXTERNAL CHARACTER (1),                                  TWAV 110
         (A(*,*),R(*,*),WA(M),WB(M),XR,FM,FNM,RTSQ)                     TWAV 120
         BINARY FLOAT,                                                  TWAV 130
         (I,NR,N,M,NDF)                                                 TWAV 140
         BINARY FIXED,.                                                 TWAV 150
 /*                                                                   */TWAV 160
    ERROR='0',.                                                         TWAV 170
    XR   =0.0,.                                                         TWAV 180
    NDF  =0,.                                                           TWAV 190
    IF M LT 3 OR N LE 1                /* THE NUMBER OF CASES IS LESS */TWAV 200
    THEN DO,.                          /* THAN 3 OR THE NUMBER OF     */TWAV 210
         ERROR='1',.                   /* GROUPS IS LESS THAN OR EQUAL*/TWAV 220
         GO TO FIN,.                   /* TO ONE                      */TWAV 230
         END,.                                                          TWAV 240
    FM   =M,.                                                           TWAV 250
    FNM  =N*(M+1),.                                                     TWAV 260
    IF NR NE 1                                                          TWAV 270
    THEN DO,.                                                           TWAV 280
 /*                                                                   */TWAV 290
 /*      RANK DATA IN EACH GROUP AND ASSIGN TIED OBSERVATIONS         */TWAV 300
 /*      AVERAGE OF TIED RANK.                                        */TWAV 310
 /*                                                                   */TWAV 320
              DO I = 1 TO N,.                                           TWAV 330
                   DO J = 1 TO M,.                                      TWAV 340
                   WA(J)=A(I,J),.                                       TWAV 350
                   END,.                                                TWAV 360
              CALL RANK (WA,WB,M),.                                     TWAV 370
                   DO J = 1 TO M,.                                      TWAV 380
                   R(I,J)=WB(J),.                                       TWAV 390
                   END,.                                                TWAV 400
              END,.                                                     TWAV 410
         END,.                                                          TWAV 420
    ELSE DO,.                                                           TWAV 430
              DO I = 1 TO N,.                                           TWAV 440
                   DO J = 1 TO M,.                                      TWAV 450
                   R(I,J)=A(I,J),.                                      TWAV 460
                   END,.                                                TWAV 470
              END,.                                                     TWAV 480
         END,.                                                          TWAV 490
 /*                                                                   */TWAV 500
 /*      CALCULATE SUM OF SQUARES OF SUMS OF RANKS                    */TWAV 510
 /*                                                                   */TWAV 520
    RTSQ =0.0,.                                                         TWAV 530
         DO I = 1 TO M,.                                                TWAV 540
         WA(I)=0.0,.                                                    TWAV 550
              DO J = 1 TO N,.                                           TWAV 560
              WA(I)=WA(I)+R(J,I),.                                      TWAV 570
              END,.                                                     TWAV 580
         RTSQ =RTSQ+WA(I)*WA(I),.                                       TWAV 590
         END,.                                                          TWAV 600
 /*                                                                   */TWAV 610
 /*      CALCULATE FRIEDMAN TEST VALUE, XR, AND DEGREES OF FREEDOM    */TWAV 620
 /*                                                                   */TWAV 630
    XR   =(12.0/(FM*FNM))*RTSQ-3.0*FNM,.                                TWAV 640
    NDF  =M-1,.                                                         TWAV 650
 FIN..                                                                  TWAV 660
    RETURN,.                                                            TWAV 670
    END,.                              /*END OF PROCEDURE TWAV        */TWAV 680
 UTST..                                                                 UTST  10
 /*********************************************************************/UTST  20
 /*                                                                   */UTST  30
 /*      TO TEST WHETHER TWO INDEPENDENT GROUPS ARE FROM THE SAME     */UTST  40
 /*      POPULATION BY MEANS OF A MANN-WHITNEY U-TEST.                */UTST  50
 /*                                                                   */UTST  60
 /*********************************************************************/UTST  70
    PROCEDURE (A,R,N1,N2,U,Z),.                                         UTST  80
    DECLARE                                                             UTST  90
         ERROR EXTERNAL CHARACTER (1),                                  UTST 100
         (A(*),R(*),U,Z,R2,UP,TS,S,FN,FN2,FNX)                          UTST 110
         BINARY FLOAT,                                                  UTST 120
         (I,KT,N,N1,N2)                                                 UTST 130
         BINARY FIXED,.                                                 UTST 140
 /*                                                                   */UTST 150
    ERROR='0',.                                                         UTST 160
 /*                                                                   */UTST 170
 /*      RANK SCORES FROM BOTH GROUPS TOGETHER IN ASCENDING ORDER,    */UTST 180
 /*      AND ASSIGN TIED OBSERVATIONS AVERAGE OF TIED RANKS           */UTST 190
 /*                                                                   */UTST 200
    N    =N1+N2,.                                                       UTST 210
         DO I=1 TO N,.                                                  UTST 220
         R(I) =0,.                                                      UTST 230
         END,.                                                          UTST 240
    U    =0.0,.                                                         UTST 250
    Z    =0.0,.                                                         UTST 260
    IF N1 GT N2                                                         UTST 270
    THEN DO,.                                                           UTST 280
         ERROR='1',.                   /* N1 IS GREATER THAN N2       */UTST 290
         GO TO FIN,.                                                    UTST 300
         END,.                                                          UTST 310
    IF N LE 2                                                           UTST 320
    THEN DO,.                          /* COMBINED SAMPLE LESS THAN OR*/UTST 330
         ERROR='2',.                   /* EQUAL TO TWO.               */UTST 340
         GO TO FIN,.                                                    UTST 350
         END,.                                                          UTST 360
    CALL RANK (A,R,N),.                                                 UTST 370
    IF N1 LE 1 OR N2 LE 1                                               UTST 380
    THEN DO,.                                                           UTST 390
         ERROR='2',.                                                    UTST 400
         GO TO FIN,.                                                    UTST 410
         END,.                                                          UTST 420
    R2   =0.0,.                        /* SUM RANKS IN LARGE GROUP    */UTST 430
         DO I = N1+1 TO N,.                                             UTST 440
         R2   =R2+R(I),.                                                UTST 450
         END,.                                                          UTST 460
    FNX  =N1*N2,.                                                       UTST 470
    FN   =N,.                                                           UTST 480
    FN2  =N2,.                                                          UTST 490
    UP   =FNX+FN2*((FN2+1.0)/2.0)-R2,. /* CALCULATE U                 */UTST 500
    U    =FNX-UP,.                                                      UTST 510
    IF UP LT U                                                          UTST 520
    THEN U    =UP,.                                                     UTST 530
    IF N1 GE 10                        /* TEST FOR N1 LESS THAN 10    */UTST 540
    THEN DO,.                                                           UTST 550
         KT   =1,.                                                      UTST 560
         CALL TIE (R,N,KT,TS),.        /* COMPUTE STANDARD DEVIATION  */UTST 570
         IF ERROR='2'                                                   UTST 580
         THEN DO,.                     /* ALL RANKS FOR ONE VARIABLE  */UTST 590
              ERROR='4',.              /* ARE EQUAL                   */UTST 600
              GO TO FIN,.                                               UTST 610
              END,.                                                     UTST 620
         IF TS NE 0                                                     UTST 630
         THEN S    =SQRT((FNX/(FN*(FN-1.0)))*(((FN*FN*FN-FN)/12.)-TS)),.UTST 640
         ELSE S    =SQRT(FNX*(FN+1.0)/12.0),.                           UTST 650
         Z    =(U-FNX*0.5)/S,.                                          UTST 660
         END,.                                                          UTST 670
    ELSE ERROR='3',.                   /* NUMBER OF CASES IN THE      */UTST 680
 FIN..                                 /* SMALLER GROUP IS LESS THAN  */UTST 690
    RETURN,.                           /* TEN                         */UTST 700
    END,.                              /*END OF PROCEDURE UTST        */UTST 710
 WTST..                                                                 WTST  10
 /*********************************************************************/WTST  20
 /*                                                                   */WTST  30
 /*      TO TEST DEGREE OF ASSOCIATION AMONG A NUMBER OF VARIABLES    */WTST  40
 /*      BY THE KENDALL COEFFICIENT OF CONCORDANCE.                   */WTST  50
 /*                                                                   */WTST  60
 /*********************************************************************/WTST  70
    PROCEDURE (A,R,N,M,W,CS,NDF,NR),.                                   WTST  80
    DECLARE                                                             WTST  90
         ERROR EXTERNAL CHARACTER (1),                                  WTST 100
         (A(*,*),R(*,*),WA(M),WB(M),W,CS,SM,S,TI,T,FN,FM)               WTST 110
         BINARY FLOAT,                                                  WTST 120
         (I,J,KT,M,N,NDF,NR)                                            WTST 130
         BINARY FIXED,.                                                 WTST 140
 /*                                                                   */WTST 150
    ERROR='0',.                                                         WTST 160
         DO I=1 TO N,.                                                  WTST 170
              DO J=1 TO M,.                                             WTST 180
              R(I,J)    =0,.                                            WTST 190
              END,.                                                     WTST 200
         END,.                                                          WTST 210
    W    =0.0,.                                                         WTST 220
    CS   =0.0,.                                                         WTST 230
    NDF  =0,.                                                           WTST 240
    IF N LT 3 OR M LT 3                                                 WTST 250
    THEN DO,.                                                           WTST 260
         ERROR='1',.                   /* NUMBER OF VARIABLES (N) OR  */WTST 270
         GO TO FIN,.                   /* NUMBER OF CASES (M) IS LESS */WTST 280
         END,.                         /* THAN 3                      */WTST 290
 /*                                                                   */WTST 300
 /*      DETERMINE WHETHER DATA IS RANKED. IF IT HAS NOT BEEN DONE    */WTST 310
 /*      RANK DATA FOR ALL VARIABLES ASSIGNING TIED OBSERVATIONS      */WTST 320
 /*      AVERAGE OF TIED RANKS AND COMPUTE CORRECTION FOR TIED SCORES */WTST 330
 /*                                                                   */WTST 340
    T    =0,.                                                           WTST 350
    KT   =1,.                                                           WTST 360
         DO I = 1 TO N,.                                                WTST 370
         IF NR NE 1                                                     WTST 380
         THEN DO,.                                                      WTST 390
                   DO J = 1 TO M,.                                      WTST 400
                   WA(J)=A(I,J),.                                       WTST 410
                   END,.                                                WTST 420
              CALL RANK (WA,WB,M),.                                     WTST 430
              END,.                                                     WTST 440
         ELSE DO,.                                                      WTST 450
                   DO J = 1 TO M,.                                      WTST 460
                   WB(J)=A(I,J),.                                       WTST 470
                   END,.                                                WTST 480
              END,.                                                     WTST 490
         CALL TIE (WB,M,KT,TI),.                                        WTST 500
         IF ERROR='2'                                                   WTST 510
         THEN DO,.                                                      WTST 520
              ERROR='3',.              /* ALL RANKS FOR ONE VARIABLE  */WTST 530
              GO TO FIN,.              /* ARE EQUAL                   */WTST 540
              END,.                                                     WTST 550
         T    =T+TI,.                                                   WTST 560
              DO J = 1 TO M,.                                           WTST 570
              R(I,J)=WB(J),.                                            WTST 580
              END,.                                                     WTST 590
         END,.                                                          WTST 600
    FN   =N,.                                                           WTST 610
    FM   =M,.                                                           WTST 620
    SM   =0.0,.                                                         WTST 630
 /*                                                                   */WTST 640
 /*      CALCULATE VECTOR SUMS AND COMPUTE MEANS OF SUMS              */WTST 650
 /*                                                                   */WTST 660
         DO J = 1 TO M,.                                                WTST 670
         WA(J)=0.0,.                                                    WTST 680
              DO I = 1 TO N,.                                           WTST 690
              WA(J)=WA(J)+R(I,J),.                                      WTST 700
              END,.                                                     WTST 710
         SM   =SM+WA(J),.                                               WTST 720
         END,.                                                          WTST 730
    SM   =SM/FM,.                                                       WTST 740
 /*                                                                   */WTST 750
 /*      COMPUTE THE SUM OF SQUARES OF DEVIATION                      */WTST 760
 /*                                                                   */WTST 770
    S    =0,.                                                           WTST 780
         DO J = 1 TO M,.                                                WTST 790
         S    =S+(WA(J)-SM)**2,.                                        WTST 800
         END,.                                                          WTST 810
    W    =S/(((FN*FN)*(FM*FM*FM-FM)/12.0)-FN*T),.                       WTST 820
 /*                                                                   */WTST 830
 /*      COMPUTE DEGREES OF FREEDOM AND CHI-SQUARE IF M IS OVER 7     */WTST 840
 /*                                                                   */WTST 850
    IF M GT 7                                                           WTST 860
    THEN DO,.                                                           WTST 870
         CS   =FN*(FM-1.0)*W,.                                          WTST 880
         NDF  =M-1,.                                                    WTST 890
         END,.                                                          WTST 900
    ELSE ERROR='2',.                   /* NUMBER OF CASES (M) IS LESS */WTST 910
 /*                                    /* THAN OR EQUAL TO 7          */WTST 920
 FIN..                                                                  WTST 930
    RETURN,.                                                            WTST 940
    END,.                              /*END OF PROCEDURE WTST        */WTST 950
 HTES..                                                                 HTES  10
 /*********************************************************************/HTES  20
 /*                                                                   */HTES  30
 /*      TO CALCULATE THE KRUSKAL-WALLIS H-STATISTIC FROM THE RANKS   */HTES  40
 /*      OF OBSERVATIONS WHICH ARE OBTAINED FROM THREE OR MORE INDE-  */HTES  50
 /*      PENDENT SAMPLES.                                             */HTES  60
 /*                                                                   */HTES  70
 /*********************************************************************/HTES  80
    PROCEDURE (A,R,M,NS,H),.                                            HTES  90
    DECLARE                                                             HTES 100
         (A(*),R(*),H,S,SUMR,T,XK,XN)                                   HTES 110
         BINARY FLOAT,                                                  HTES 120
         (M(*),I,J,K,L,N,NS)                                            HTES 130
         BINARY FIXED,                                                  HTES 140
         ERROR EXTERNAL CHARACTER (1),.                                 HTES 150
 /*                                                                   */HTES 160
         ERROR='0',.                   /* INITIALIZATION              */HTES 170
    H    =0.0,.                                                         HTES 180
    IF NS LT 3                                                          HTES 190
    THEN ERROR='1',.                   /* SET ERROR INDICATOR         */HTES 200
    ELSE DO,.                                                           HTES 210
         N    =0,.                                                      HTES 220
              DO I = 1 TO NS,.         /* CALCULATE TOTAL NUMBER OF   */HTES 230
              IF M(I) LE 0             /* CASES IN ALL SAMPLES        */HTES 240
              THEN DO,.                                                 HTES 250
                   ERROR='3',.                                          HTES 260
                   GO TO S10,.                                          HTES 270
                   END,.                                                HTES 280
              N    =N+M(I),.                                            HTES 290
              END,.                                                     HTES 300
         XN   =N,.                                                      HTES 310
 /*                                                                   */HTES 320
 /*      RANK DATA FROM ALL SAMPLES IN ASCENDING ORDER AND ASSIGN     */HTES 330
 /*      TIED OBSERVATIONS AVERAGE OF TIED RANKS                      */HTES 340
 /*                                                                   */HTES 350
         CALL RANK (A,R,N),.                                            HTES 360
 /*                                                                   */HTES 370
         S    =0,.                                                      HTES 380
         J    =0,.                                                      HTES 390
              DO I = 1 TO NS,.                                          HTES 400
              K    =M(I),.                                              HTES 410
              XK   =K,.                                                 HTES 420
              SUMR =0.0,.                                               HTES 430
                   DO L = 1 TO K,.     /* SUM RANKS FOR EACH SAMPLE   */HTES 440
                   J    =J+1,.                                          HTES 450
                   SUMR =SUMR+R(J),.                                    HTES 460
                   END,.                                                HTES 470
              S    =S+SUMR*SUMR/XK,.                                    HTES 480
              END,.                                                     HTES 490
 /*                                                                   */HTES 500
 /*      CALCULATE H, UNCORRECTED FOR TIES                            */HTES 510
 /*                                                                   */HTES 520
         H    =((12.0*S)/(XN*XN+XN))-3.0*(XN+1),.                       HTES 530
 /*                                                                   */HTES 540
 /*      COMPUTE CORRECTION FACTOR FOR TIES                           */HTES 550
 /*                                                                   */HTES 560
         K    =1,.                                                      HTES 570
         CALL TIE (R,N,K,T),.                                           HTES 580
         IF T = 0.0 OR ERROR='2'                                        HTES 590
         THEN GO TO S10,.                                               HTES 600
         ELSE DO,.                                                      HTES 610
              S    =1.0-((12.0*T)/(XN**3-XN)),.                         HTES 620
 /*                                                                   */HTES 630
 /*      CORRECT H FOR TIES                                           */HTES 640
 /*                                                                   */HTES 650
              H   =H/S,.                                                HTES 660
              END,.                                                     HTES 670
         END,.                                                          HTES 680
 S10..                                                                  HTES 690
    RETURN,.                                                            HTES 700
    END,.                              /*END OF PROCEDURE HTES        */HTES 710
 NDTR..                                                                 NDTR  10
 /*********************************************************************/NDTR  20
 /*                                                                   */NDTR  30
 /*      COMPUTES Y=P(X)=THE PROBABILITY THAT THE RANDOM VARIABLE U,  */NDTR  40
 /*      DISTRIBUTED NORMALLY (0,1) IS LESS THAN OR EQUAL TO X.  F(X),*/NDTR  50
 /*      THE ORDINATE OF THE NORMAL DENSITY AT X, IS ALSO COMPUTED.   */NDTR  60
 /*                                                                   */NDTR  70
 /*********************************************************************/NDTR  80
    PROCEDURE (X,P,D),.                                                 NDTR  90
    DECLARE                                                             NDTR 100
         (D,T,P,X,AX) FLOAT BINARY,.                                    NDTR 110
    AX   =ABS(X),.                     /* CALC. PROB. P & DENSITY D   */NDTR 120
    T    =1.0E0/(1.0E0+.2316419E0*AX),.                                 NDTR 130
    D    =0.3989423E0*EXP(-X*X/2.0E0),.                                 NDTR 140
    P    =1.0E0-D*T*((((1.330274E0*T-1.821256E0)*T+1.781478E0)*T-       NDTR 150
          0.3565638)*T+0.3193815E0),.                                   NDTR 160
    IF X LT 0                          /* X < 0                       */NDTR 170
    THEN P=1.0E0-P,.                   /* COMPLEMENT PROB. P          */NDTR 180
    RETURN,.                                                            NDTR 190
    END,.                              /* END OF PROCEDURE NDTR       */NDTR 200
 BDTR..                                                                 BDTR  10
 /*********************************************************************/BDTR  20
 /*                                                                   */BDTR  30
 /*      BDTR COMPUTES P(X) = PROBABILITY THAT THE RANDOM VARIABLE    */BDTR  40
 /*      DISTRIBUTED ACCORDING TO THE BETA DISTRIBUTION WITH PARA-    */BDTR  50
 /*      METERS A AND B, IS LESS THAN OR EQUAL TO X. F(A,B,X), THE    */BDTR  60
 /*      ORDINATE OF THE BETA DENSITY AT X, IS ALSO COMPUTED.         */BDTR  70
 /*                                                                   */BDTR  80
 /*********************************************************************/BDTR  90
    PROCEDURE (X,A,B,P,D),.                                             BDTR 100
    DECLARE                                                             BDTR 110
         (XX,DLXX,DL1X,AA,BB,G1,G2,G3,G4,DD,PP,XO,FF,FN,XI,SS,CC,       BDTR 120
         RR,DLBETA) BINARY(53),                                         BDTR 130
         (X,A,B,P,D,XS,DF,DUMMY) BINARY,                                BDTR 140
         ID BINARY FIXED,                                               BDTR 150
         ERROR EXTERNAL CHARACTER(1),.                                  BDTR 160
    ERROR='0',.                                                         BDTR 165
    IF X LT 0  OR X GT 1               /* TEST THE VALUE OF X         */BDTR 170
    THEN DO,.                                                           BDTR 180
         ERROR='1',.                                                    BDTR 190
         GO TO S10,.                                                    BDTR 200
         END,.                                                          BDTR 210
    IF A LT .49999  OR B LT .49999     /* TEST THE VALUES OF A AND B  */BDTR 220
    OR A GT 1E+5    OR B GT 1E+5                                        BDTR 230
    THEN DO,.                                                           BDTR 240
         ERROR='2',.                                                    BDTR 250
 S10..                                                                  BDTR 260
         D,P  =-1E+75,.                                                 BDTR 270
         GO TO S110,.                                                   BDTR 280
         END,.                                                          BDTR 290
    AA   =A,.                          /* COMPUTE LOG(BETA(A,B))      */BDTR 300
    BB   =B,.                                                           BDTR 310
    CALL LGAM(AA,G1),.                                                  BDTR 320
    CALL LGAM(BB,G2),.                                                  BDTR 330
    CALL LGAM(AA+BB,G3),.                                               BDTR 340
    DLBETA=G1+G2-G3,.                                                   BDTR 350
    IF X LE 1E-8                       /* TEST FOR X NEAR 0.0         */BDTR 360
    THEN DO,.                                                           BDTR 370
         P    =0,.                                                      BDTR 380
         IF A LT 1                                                      BDTR 390
         THEN                                                           BDTR 400
 S20..                                                                  BDTR 410
              DO,.                                                      BDTR 420
              D    =1E+75,.                                             BDTR 430
              GO TO S110,.                                              BDTR 440
              END,.                                                     BDTR 450
         ELSE IF A = 1                                                  BDTR 460
              THEN                                                      BDTR 470
 S30..                                                                  BDTR 480
                   DO,.                                                 BDTR 490
                   DD   =-DLBETA,.                                      BDTR 500
                   IF DD GT -1.68E+2                                    BDTR 510
                   THEN DO,.                                            BDTR 520
                        D    =EXP(DD),.                                 BDTR 530
                        GO TO S110,.                                    BDTR 540
                        END,.                                           BDTR 550
                   ELSE GO TO S40,.                                     BDTR 560
                   END,.                                                BDTR 570
              ELSE                                                      BDTR 580
 S40..                                                                  BDTR 590
                   DO,.                                                 BDTR 600
                   D    =0,.                                            BDTR 610
                   GO TO S110,.                                         BDTR 620
                   END,.                                                BDTR 630
         END,.                                                          BDTR 640
    IF 1-X LE 1E-8                     /* TEST FOR X NEAR 1.0         */BDTR 650
    THEN DO,.                                                           BDTR 660
         P    =1,.                                                      BDTR 670
         IF B LT 1                                                      BDTR 680
         THEN GO TO S20,.                                               BDTR 690
         ELSE IF B=1                                                    BDTR 700
              THEN GO TO S30,.                                          BDTR 710
              ELSE GO TO S40,.                                          BDTR 720
         END,.                                                          BDTR 730
    XX   =X,.                          /* SET PROGRAM PARAMETERS      */BDTR 740
    DLXX =LOG(XX),.                                                     BDTR 750
    DL1X =LOG(1-XX),.                                                   BDTR 760
    XO   =XX/(1-XX),.                                                   BDTR 770
    ID   =0,.                                                           BDTR 780
    DD   =(AA-1)*DLXX+(BB-1)*DL1X-DLBETA,.  /* COMPUTE ORDINATE       */BDTR 790
    IF DD GT 1.68E+2                                                    BDTR 800
    THEN DO,.                                                           BDTR 810
         D    =1E+75,.                                                  BDTR 820
         GO TO S50,.                                                    BDTR 830
         END,.                                                          BDTR 840
    ELSE IF DD LE -1.68E+2                                              BDTR 850
         THEN DO,.                                                      BDTR 860
              D    =0,.                                                 BDTR 870
              GO TO S50,.                                               BDTR 880
              END,.                                                     BDTR 890
    D    =EXP(DD),.                                                     BDTR 900
 S50..                                                                  BDTR 910
    IF ABS(A-1) LE 1E-8                /* A OR B BOTH WITHIN 1E-8 OF 1*/BDTR 920
    THEN IF ABS(B-1) LE 1E-8                                            BDTR 930
         THEN DO,.                                                      BDTR 940
              P    =X,.                                                 BDTR 950
              GO TO S110,.                                              BDTR 960
              END,.                                                     BDTR 970
         ELSE DO,.                                                      BDTR 980
              PP   =BB*DL1X,.                                           BDTR 990
              IF PP LE 1.68E+2                                          BDTR1000
              THEN DO,.                                                 BDTR1010
                   P    =1,.                                            BDTR1020
                   GO TO S110,.                                         BDTR1030
                   END,.                                                BDTR1040
              ELSE DO,.                                                 BDTR1050
                   P    =1-EXP(PP),.                                    BDTR1060
                   GO TO S100,.                                         BDTR1070
                   END,.                                                BDTR1080
              END,.                                                     BDTR1090
    IF ABS(B-1) LE 1E-8                                                 BDTR1100
    THEN DO,.                                                           BDTR1110
         PP   =AA*DLXX,.                                                BDTR1120
         IF PP LE -1.68E+2                                              BDTR1130
         THEN DO,.                                                      BDTR1140
              P    =0,.                                                 BDTR1150
              GO TO S110,.                                              BDTR1160
              END,.                                                     BDTR1170
         ELSE DO,.                                                      BDTR1180
              P    =EXP(PP),.                                           BDTR1190
              GO TO S100,.                                              BDTR1200
              END,.                                                     BDTR1210
         END,.                                                          BDTR1220
    IF A GT 1000                       /* TEST FOR A OR B GREATER     */BDTR1230
    THEN DO,.                          /*        THAN 1000            */BDTR1240
         XS   =2*AA/XO,.                                                BDTR1250
         DF   =2*BB,.                                                   BDTR1260
         CALL CDTR(XS,DF,P,DUMMY),.                                     BDTR1270
         P    =1-P,.                                                    BDTR1280
         GO TO S110,.                                                   BDTR1290
         END,.                                                          BDTR1300
    IF B GT 1000                                                        BDTR1310
    THEN DO,.                                                           BDTR1320
         XS   =2*BB*XO,.                                                BDTR1330
         DF   =2*AA,.                                                   BDTR1340
         CALL CDTR(XS,DF,P,DUMMY),.                                     BDTR1350
         GO TO S110,.                                                   BDTR1360
         END,.                                                          BDTR1370
    IF X LE .5                         /* SELECT PARAMETERS FOR CON-  */BDTR1380
    THEN IF AA LE 1                    /* TINUED FRACTION COMPUTATION */BDTR1390
         THEN DO,.                                                      BDTR1400
              RR   =AA+1,.                                              BDTR1410
              GO TO S60,.                                               BDTR1420
              END,.                                                     BDTR1430
         ELSE DO,.                                                      BDTR1440
              RR   =AA,.                                                BDTR1450
 S60..                                                                  BDTR1460
              DD   =(RR-1)-(RR+BB-1)*XX*EXP(DLXX/5)+2,.                 BDTR1470
              IF DD LE 0                                                BDTR1480
              THEN GO TO S70,.                                          BDTR1490
              ELSE GO TO S80,.                                          BDTR1500
              END,.                                                     BDTR1510
    IF BB GT 1                                                          BDTR1520
    THEN RR=BB,.                                                        BDTR1530
    ELSE RR=BB+1,.                                                      BDTR1540
    DD   =(RR-1)-(AA+RR-1)*(1-XX)*EXP(DL1X/5)+2,.                       BDTR1590
    IF DD LE 0                                                          BDTR1600
    THEN GO TO S80,.                                                    BDTR1610
 S70..                                                                  BDTR1620
    ID   =1,.                                                           BDTR1630
    FF   =DL1X,.                                                        BDTR1640
    DL1X =DLXX,.                                                        BDTR1650
    DLXX =FF,.                                                          BDTR1660
    XO   =1/XO,.                                                        BDTR1670
    FF   =AA,.                                                          BDTR1680
    AA   =BB,.                                                          BDTR1690
    BB   =FF,.                                                          BDTR1700
    G2   =G1,.                                                          BDTR1710
 S80..                                                                  BDTR1720
    FF   =0,.                                                           BDTR1730
    IF AA LE 1                         /* TEST FOR A LESS THAN 1      */BDTR1740
    THEN DO,.                                                           BDTR1750
         CALL LGAM(AA+1,G4),.                                           BDTR1760
         DD   =AA*DLXX+BB*DL1X+G3-G2-G4,.                               BDTR1770
         IF DD GT -1.68E+2                                              BDTR1780
         THEN FF=FF+EXP(DD),.                                           BDTR1790
         AA   =AA+1,.                                                   BDTR1800
         END,.                                                          BDTR1810
    FN   =AA+BB-1,.                    /* COMPUTE P USING CONTINUED   */BDTR1820
    RR   =AA-1,.                       /* FRACTION EXPANSION          */BDTR1830
    SS   =(((BB-80)*(RR+80))/((RR+2*80-1)*(RR+2*80)))*XO,.              BDTR1840
         DO XI=79 TO 1 BY -1,.                                          BDTR1850
         DD   =((XI*(FN+XI))/((RR+2*XI+1)*(RR+2*XI)))*XO,.              BDTR1860
         CC   =(((BB-XI)*(RR+XI))/((RR+2*XI-1)*(RR+2*XI)))*XO,.         BDTR1870
         SS   =CC/(1+DD/(1-SS)),.                                       BDTR1880
         END,.                                                          BDTR1890
    SS   =1/(1-SS),.                                                    BDTR1900
    IF SS LE 0                                                          BDTR1910
    THEN GO TO S90,.                                                    BDTR1920
    CALL LGAM(AA+BB,G1),.                                               BDTR1930
    CALL LGAM(AA+1,G4),.                                                BDTR1940
    PP   =G1-G2-G4+AA*DLXX+(BB-1)*DL1X+LOG(SS),.                        BDTR1950
    IF PP GT -1.68E+2                                                   BDTR1960
    THEN PP=EXP(PP)+FF,.                                                BDTR1970
    ELSE PP=FF,.                                                        BDTR1980
    IF ID GT 0                                                          BDTR2030
    THEN PP=1-PP,.                                                      BDTR2040
    P    =PP,.                                                          BDTR2050
    IF P LT 0                          /* SET ERROR INDICATOR         */BDTR2060
    THEN IF ABS(P) GT 1E-7                                              BDTR2070
         THEN GO TO S90,.                                               BDTR2080
         ELSE P=0,.                                                     BDTR2090
    ELSE IF P GT 1                                                      BDTR2130
         THEN IF ABS(1-P) GT 1E-7                                       BDTR2140
              THEN                                                      BDTR2150
 S90..                                                                  BDTR2160
                   DO,.                                                 BDTR2170
                   ERROR='3',.                                          BDTR2180
                   P    =+1E+75,.                                       BDTR2190
                   GO TO S110,.                                         BDTR2200
                   END,.                                                BDTR2210
              ELSE P=1,.                                                BDTR2220
         ELSE                                                           BDTR2260
 S100..                                                                 BDTR2270
              IF P LE 1E-8                                              BDTR2280
              THEN P=0,.                                                BDTR2290
              ELSE IF 1-P LE 1E-8                                       BDTR2330
                   THEN P=1,.                                           BDTR2340
 S110..                                                                 BDTR2370
    RETURN,.                                                            BDTR2380
    END,.                              /* END OF PROCEDURE BDTR       */BDTR2390
 CDTR..                                                                 CDTR  10
 /*********************************************************************/CDTR  20
 /*                                                                   */CDTR  30
 /*      COMPUTES P(X)=PROBABILITY THAT THE RANDOM VARIABLE U,        */CDTR  40
 /*      DISTRIBUTED ACCORDING TO THE CHI-SQUARE DISTRIBUTION WITH G  */CDTR  50
 /*      DEGREES OF FREEDOM, IS LESS THAN OR EQUAL TO X. F(G,X), THE  */CDTR  60
 /*      ORDINATE OF THE CHI-SQUARE DENSITY AT X, IS ALSO COMPUTED    */CDTR  70
 /*                                                                   */CDTR  80
 /*********************************************************************/CDTR  90
    PROCEDURE(X,G,P,D),.                                                CDTR 100
    DECLARE                                                             CDTR 110
         (XX,DLXX,DLX2,GG,G2,DLT3,THETA,THP1,GLG2,DD,T11,SER,CC,X2,XI,  CDTR 120
         FAC,TLOG,TERM,GTH,A2,A,B,C,DT2,DT3,THPI)                       CDTR 130
         FLOAT BINARY(53),                                              CDTR 140
         (I,J,K,I3,IT1)                                                 CDTR 150
         FIXED BINARY,                                                  CDTR 160
         ERROR EXTERNAL CHARACTER(1),                                   CDTR 170
         (X,G,D,SC,P,T1,T2,T3,DUMMY)                                    CDTR 180
         FLOAT BINARY,.                                                 CDTR 190
    ERROR='0',.                                                         CDTR 200
    D,P  =0,.                                                           CDTR 210
    IF G LT .49999 OR G GT 2.E+5 OR X LT 0                              CDTR 220
    THEN DO,.                          /* TEST INPUT VALIDITY         */CDTR 230
         D,P  =-1.E75,.                /* SET ERROR INDICATOR         */CDTR 240
         ERROR='1',.                                                    CDTR 250
         END,.                                                          CDTR 260
    ELSE IF X LE 1.E-8                 /* TEST FOR X NEAR ZERO        */CDTR 270
         THEN IF G LT 2.0              /* SET P AND D DEPENDING ON    */CDTR 280
              THEN D=1.E75,.           /* THE PARAMETER G             */CDTR 290
              ELSE IF G=2.0                                             CDTR 300
                   THEN D=0.5,.                                         CDTR 310
                   ELSE,.                                               CDTR 320
         ELSE IF X GT 1.E6             /* TEST FOR X GT 1.E6          */CDTR 330
              THEN P=1.0,.             /* SET P AND D                 */CDTR 340
              ELSE DO,.                /* SET PROGRAM PARAMETERS      */CDTR 350
                   XX   =PRECISION(X,53),.                              CDTR 360
                   DLXX =LOG(XX),.                                      CDTR 370
                   X2   =.5*XX,.                                        CDTR 380
                   DLX2 =LOG(X2),.                                      CDTR 390
                   GG   =PRECISION(G,53),.                              CDTR 400
                   G2   =.5*GG,.                                        CDTR 410
                   CALL LGAM(G2,GLG2),. /* COMPUTE THE ORDINATE       */CDTR 420
                   DD   =(G2-1.E0)*DLXX-X2-G2*.693147180559945E0-GLG2,. CDTR 430
                   IF DD LE 1.68E2                                      CDTR 440
                   THEN IF (DD+1.68E2) LE 0                             CDTR 450
                        THEN           /* TEST FOR G GT 1000 AND      */CDTR 460
 S10..                                 /* X GT 2000                   */CDTR 470
                             IF G LE 1000                               CDTR 480
                             THEN IF X GT 2000                          CDTR 490
                                  THEN P=1,.                            CDTR 500
                                  ELSE DO,. /* COMPUTE THETA          */CDTR 510
                                       K    =FLOOR(G2),.                CDTR 520
                                       THETA=G2-FLOAT(K,53),.           CDTR 530
                                       GO TO S40,.                      CDTR 540
                                       END,.                            CDTR 550
                             ELSE DO,. /* WILSON HILFERTY APPROX.     */CDTR 560
                                  A    =LOG(XX/GG)/3.E0,.               CDTR 570
                                  A    =EXP(A),.                        CDTR 580
                                  B    =2.E0/(9.E0*GG),.                CDTR 590
                                  C,SC =(A-1.E0+B)/SQRT(B),.            CDTR 600
                                  CALL NDTR(SC,P,DUMMY),.               CDTR 610
 S20..                                                                  CDTR 620
                                  IF P LT 0                             CDTR 630
                                  THEN IF ABS(P) GT 1.E-7               CDTR 640
                                       THEN                             CDTR 650
 S30..                                                                  CDTR 660
                                            DO,. /* SET ERROR IND.    */CDTR 670
                                            ERROR='2',.                 CDTR 680
                                            P    =1.E75,.               CDTR 690
                                            END,.                       CDTR 700
                                       ELSE P=0,.                       CDTR 710
                                  ELSE IF P GT 1.0                      CDTR 720
                                       THEN IF ABS(1.-P) GT 1.E-7       CDTR 730
                                            THEN GO TO S30,.            CDTR 740
                                            ELSE P=1,.                  CDTR 750
                                       ELSE IF P LE 1.E-8               CDTR 760
                                            THEN P=0,.                  CDTR 770
                                            ELSE IF (1-P) LE 1.E-8      CDTR 780
                                                 THEN P=1,.             CDTR 790
                                  END,.                                 CDTR 800
                        ELSE DO,.                                       CDTR 810
                             DD,D =EXP(DD),.                            CDTR 820
                             GO TO S10,.                                CDTR 830
                             END,.                                      CDTR 840
                   ELSE DO,.                                            CDTR 850
                        D    =1.E75,.                                   CDTR 860
                        GO TO S10,.                                     CDTR 870
                        END,.                                           CDTR 880
                   END,.                                                CDTR 890
    GO TO S70,.                                                         CDTR 900
 S40..                                                                  CDTR 910
    IF THETA LE 1.E-8                                                   CDTR 920
    THEN THETA=0.E0,.                                                   CDTR 930
    THP1 =THETA+1.E0,.                                                  CDTR 940
                                       /* SELECT METHOD FOR FINDING T1*/CDTR 950
    IF THETA GT 0                      /* FIND THETA FOR THETA GT 0   */CDTR 960
    THEN IF XX LE 10.E0                /* AND X LE 10                 */CDTR 970
         THEN DO,.                                                      CDTR 980
              SER  =X2*(1.E0/THP1-X2/(THP1+1.E0)),.                     CDTR 990
              J    =1,.                                                 CDTR1000
              CC   =FLOAT(J,53),.                                       CDTR1010
                   DO IT1=3 TO 30,.                                     CDTR1020
                   XI   =FLOAT(IT1,53),.                                CDTR1030
                   CALL LGAM(XI,FAC),.                                  CDTR1040
                   TLOG =XI*DLX2-FAC-LOG(XI+THETA),.                    CDTR1050
                   TERM =EXP(TLOG),.                                    CDTR1060
                   TERM =SIGN(CC)*ABS(TERM),.                           CDTR1070
                   SER  =SER+TERM,.                                     CDTR1080
                   CC   =-CC,.                                          CDTR1090
                   IF ABS(TERM) LT 1.E-9                                CDTR1100
                   THEN IF (SER) LE 0                                   CDTR1110
                        THEN GO TO S30,.                                CDTR1120
                        ELSE DO,.                                       CDTR1130
                             CALL LGAM(THP1,GTH),.                      CDTR1140
                             TLOG =THETA*DLX2+LOG(SER)-GTH,.            CDTR1150
                             IF (TLOG+1.68E2) LE 0                      CDTR1160
                             THEN T1   =0,.                             CDTR1170
                             ELSE T11,T1    =EXP(TLOG),.                CDTR1180
                             GO TO S60,.                                CDTR1190
                             END,.                                      CDTR1200
                   END,.                                                CDTR1210
              GO TO S30,.                                               CDTR1220
              END,.                                                     CDTR1230
         ELSE DO,.                     /* T1 FOR THETA GT 0 AND 10 LT */CDTR1240
              A2   =0.E0,.             /* X LT 2000                   */CDTR1250
                   DO I=1 TO 25,.                                       CDTR1260
                   XI   =FLOAT(I,53),.                                  CDTR1270
                   CALL LGAM(THP1,GTH),.                                CDTR1280
                   T11  =-(13.E0*XX)/XI+THP1*LOG(13.E0*XX/XI)-GTH-      CDTR1290
                        LOG(XI),.                                       CDTR1300
                   IF (T11+1.68E2) GT 0                                 CDTR1310
                   THEN DO,.                                            CDTR1320
                        T11  =EXP(T11),.                                CDTR1330
                        A2   =A2+T11,.                                  CDTR1340
                        END,.                                           CDTR1350
                   END,.                                                CDTR1360
              A    =1.01282051+THETA/156.E0-XX/312.E0,.                 CDTR1370
              B    =ABS(A),.                                            CDTR1380
              C    =-X2+THP1*DLX2+LOG(B)-GTH-3.95124371858142E0,.       CDTR1390
              IF (C+1.68E2) LE 0                                        CDTR1400
              THEN DO,.                                                 CDTR1410
                   C    =0.0,.                                          CDTR1420
 S50..                                                                  CDTR1430
                   C    =A2+C,.                                         CDTR1440
                   T11,T1    =1.E0-C,.                                  CDTR1450
                   END,.                                                CDTR1460
              ELSE DO,.                                                 CDTR1470
                   IF A LT 0                                            CDTR1480
                   THEN C    =-EXP(C),.                                 CDTR1490
                   ELSE IF A=0                                          CDTR1500
                        THEN C    =0.E0,.                               CDTR1510
                        ELSE C    =EXP(C),.                             CDTR1520
                   GO TO S50,.                                          CDTR1530
                   END,.                                                CDTR1540
              END,.                                                     CDTR1550
    ELSE IF X2 GE 1.68E2               /* COMPUTE T1 FOR THETA = 0    */CDTR1560
         THEN T1   =1,.                                                 CDTR1570
         ELSE T11,T1    =1.E0-EXP(-X2),.                                CDTR1580
 S60..                                                                  CDTR1590
    IF G GE 2                          /* SELECT APPRO. EXP FOR P     */CDTR1600
    THEN IF G GE 4                     /* CALCULATE FOR G GE 4        */CDTR1610
         THEN DO,.                     /* AND LE 100                  */CDTR1620
              DT3  =0.0,.                                               CDTR1630
                   DO I3=2 TO K,.                                       CDTR1640
                   THPI =FLOAT(I3,53)+THETA,.                           CDTR1650
                   CALL LGAM(THPI,GTH),.                                CDTR1660
                   DLT3 =THPI*DLX2-DLXX-X2-GTH,.                        CDTR1670
                   IF (DLT3+1.68E2) GT 0                                CDTR1680
                   THEN DT3  =DT3+EXP(DLT3),.                           CDTR1690
                   END,.                                                CDTR1700
              T3   =DT3,.                                               CDTR1710
              P    =T1-T3-T3,.                                          CDTR1720
              END,.                                                     CDTR1730
         ELSE P    =T1,.                                                CDTR1740
    ELSE DO,.                          /* COMPUTE P FOR 0 LT G LT 2   */CDTR1750
         CALL LGAM(THP1,GTH),.                                          CDTR1760
         DT2  =THETA*DLXX-X2-THP1*.693147180559945E0-GTH,.              CDTR1770
         IF (DT2+1.68E2) LE 0                                           CDTR1780
         THEN P    =T1,.                                                CDTR1790
         ELSE DO,.                                                      CDTR1800
              DT2,T2    =EXP(DT2),.                                     CDTR1810
              P    =T1+T2+T2,.                                          CDTR1820
              END,.                                                     CDTR1830
         END,.                                                          CDTR1840
    GO TO S20,.                                                         CDTR1850
 S70..                                                                  CDTR1860
    RETURN,.                                                            CDTR1870
    END,.                              /* END OF PROCEDURE CDTR       */CDTR1880
 NDTI..                                                                 NDTI  10
 /*********************************************************************/NDTI  20
 /*                                                                   */NDTI  30
 /*      COMPUTES X=P**X(-1)(Y), THE ARGUMENT X SUCH THAT Y=P(X)=THE  */NDTI  40
 /*      PROBABILITY THAT THE RANDOM VARIABLE U, DISTRIBUTED NORMALLY */NDTI  50
 /*      (0,1), IS LESS THAN OR EQUAL TO X.  F(X) THE ORDINATE OF THE */NDTI  60
 /*      NORMAL DENSITY, AT X, IS ALSO COMPUTED.                      */NDTI  70
 /*                                                                   */NDTI  80
 /*********************************************************************/NDTI  90
    PROCEDURE(P,X,D),.                                                  NDTI 100
    DECLARE                                                             NDTI 110
         (P,X,D,T2,T) FLOAT BINARY,                                     NDTI 120
         ERROR EXTERNAL CHARACTER(1),.                                  NDTI 130
    ERROR='0',.                                                         NDTI 140
    X,D  =0,.                                                           NDTI 150
    IF P LT 0.0                                                         NDTI 160
    THEN ERROR='1',.                   /* P LT 0--SET ERROR INDICATOR */NDTI 170
    ELSE IF P = 0.0                                                     NDTI 230
         THEN X    =-.999999E+74,.     /* P = 0--SET X                */NDTI 240
         ELSE IF P GT 1.0                                               NDTI 300
              THEN ERROR='1',.         /* P GT 1--SET ERROR INDICATOR */NDTI 310
              ELSE IF P = 1.0                                           NDTI 320
                   THEN X    =.999999E+74,./* P = 1--SET X            */NDTI 330
                   ELSE DO,.           /* P > 0 AND P < 1             */NDTI 370
                        D    =P,.                                       NDTI 380
                        IF D GT 0.5                                     NDTI 390
                                       /* COMPLEMENT P                */NDTI 400
                        THEN D    =1.0-D,.                              NDTI 410
                                       /* CALC. EQUATION 2 IN WRITE UP*/NDTI 420
                        T2   =-LOG(D),.                                 NDTI 430
                        T2   =T2+T2,.                                   NDTI 431
                        T    =SQRT(T2),.                                NDTI 440
                                       /* CALC. EQUATION 1 IN WRITE UP*/NDTI 450
                        X    =T-(2.515517+0.802853*T+0.010328*T2)/      NDTI 460
                              (1.0+1.432788*T+0.189269*T2+0.001308*T    NDTI 470
                              *T2),.                                    NDTI 480
                        IF P LE 0.5    /* P < OR = .5                 */NDTI 490
                        THEN X    =-X,./* NEGATE X                    */NDTI 500
                                       /* CALCULATE DENSITY           */NDTI 510
                        D    =0.3989423*EXP(-X*X/2.0),.                 NDTI 520
                        END,.                                           NDTI 530
    RETURN,.                                                            NDTI 550
    END,.                              /* END OF PROCEDURE NDTI       */NDTI 560
