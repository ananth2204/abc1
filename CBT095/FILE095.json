{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011226000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1469650, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 39, "INMDSNAM": "CBT.V500.FILE095.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1469650, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1469650, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE095.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x1a\\r'", "DS1TRBAL": "b'\\x86\\xf0'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00\\xa7\\x00\\x0e\\x00\\xa9\\x00\\n\\x00\\x1b'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$$LIST": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\xca\\x00\\xa6\\x00\\x00\\xd4\\xc5\\xd4\\xd3\\xc9\\xe2\\xe3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 202, "newlines": 166, "modlines": 0, "user": "MEMLIST"}, "text": "$$$$LIST        05.04    90/10/25  90/10/25 23:00   166   166   MEMLIST\n$$$$UPDT        05.04    90/10/25  90/10/25 23:00    96    96   SPCLIST\n$$$READ         05.04    90/10/25  90/10/25 23:00    30    30   README\n$BASIC          05.04    90/10/25  90/10/25 23:00    26    26   README\n$CHANGES        05.04    90/10/25  90/10/25 23:00    43    43   README\n$DESCRPT        05.04    90/10/25  90/10/25 23:00    71    71   README\n$DOC            05.04    90/10/25  90/10/25 23:00     9     9   README\n$EXAMPLE        05.04    90/10/25  90/10/25 23:00    29    29   README\n$SAMPJCL        05.04    90/10/25  90/10/25 23:00   204   204   README\n$SETUP          05.04    90/10/25  90/10/25 23:00    38    38   README\n$SHARE          05.04    90/10/25  90/10/25 23:00    33    33   README\n#ASMBOX         05.04    90/10/25  90/10/25 23:00    27    27   PANEL\n#B              05.04    90/10/25  90/10/25 23:00    16    16   PANEL\n#BIG            05.04    90/10/25  90/10/25 23:00    25    25   PANEL\n#BIGS           05.04    90/10/25  90/10/25 23:00    25    25   PANEL\n#BLDCOPY        05.04    90/10/25  90/10/25 23:00    22    22   PANEL\n#BRODPNL        05.04    90/10/25  90/10/25 23:00    26    26   PANEL\n#CENTER         05.04    90/10/25  90/10/25 23:00    23    23   PANEL\n#CHGALL         05.04    90/10/25  90/10/25 23:00    16    16   PANEL\n#CLISTBO        05.04    90/10/25  90/10/25 23:00    24    24   PANEL\n#CLONE          05.04    90/10/25  90/10/25 23:00    25    25   PANEL\n#COBBOX         05.04    90/10/25  90/10/25 23:00    24    24   PANEL\n#COMMENT        05.04    90/10/25  90/10/25 23:00    16    16   PANEL\n#COMPRES        05.04    90/10/25  90/10/25 23:00    15    15   PANEL\n#CONLY          05.04    90/10/25  90/10/25 23:00    26    26   PANEL\n#CONT           05.04    90/10/25  90/10/25 23:00    16    16   PANEL\n#CONTROL        05.04    90/10/25  90/10/25 23:00    25    25   PANEL\n#CUT            05.04    90/10/25  90/10/25 23:00    22    22   PANEL\n#CUTTO          05.04    90/10/25  90/10/25 23:00    17    17   PANEL\n#D              05.04    90/10/25  90/10/25 23:00    16    16   PANEL\n#DELCUT         05.04    90/10/25  90/10/25 23:00    15    15   PANEL\n#DELDUPS        05.04    90/10/25  90/10/25 23:00    17    17   PANEL\n#DSIGENP        05.04    90/10/25  90/10/25 23:00    16    16   PANEL\n#DSIGENS        05.04    90/10/25  90/10/25 23:00    16    16   PANEL\n#E              05.04    90/10/25  90/10/25 23:00    16    16   PANEL\n#EXIT           05.04    90/10/25  90/10/25 23:00    25    25   PANEL\n#FC             05.04    90/10/25  90/10/25 23:00    28    28   PANEL\n#FIXJCL         05.04    90/10/25  90/10/25 23:00    16    16   PANEL\n#FMEMD00        05.04    90/10/25  90/10/25 23:00    42    42   PANEL\n#FMEMD01        05.04    90/10/25  90/10/25 23:00    40    40   PANEL\n#FMEMD02        05.04    90/10/25  90/10/25 23:00    98    98   PANEL\n#INIT           05.04    90/10/25  90/10/25 23:00    16    16   PANEL\n#INITIAL        05.04    90/10/25  90/10/25 23:00    25    25   PANEL\n#ISPUCMB        05.04    90/10/25  90/10/25 23:00    13    13   PANEL\n#JC             05.04    90/10/25  90/10/25 23:00     7     7   PANEL\n#JCLBOX         05.04    90/10/25  90/10/25 23:00    25    25   PANEL\n#JC2            05.04    90/10/25  90/10/25 23:00    16    16   PANEL\n#LCASE          05.04    90/10/25  90/10/25 23:00    16    16   PANEL\n#LJUST          05.04    90/10/25  90/10/25 23:00    24    24   PANEL\n#MACHELP        05.04    90/10/25  90/10/25 23:00    23    23   PANEL\n#MACLIST        05.04    90/10/25  90/10/25 23:00    15    15   PANEL\n#MEMLIST        05.04    90/10/25  90/10/25 23:00    16    16   PANEL\n#MODEL          05.04    90/10/25  90/10/25 23:00    16    16   PANEL\n#MOVECOL        05.04    90/10/25  90/10/25 23:00    14    14   PANEL\n#MSTATS         05.04    90/10/25  90/10/25 23:00    19    19   PANEL\n#NEWLINE        05.04    90/10/25  90/10/25 23:00    26    26   PANEL\n#ONLY           05.04    90/10/25  90/10/25 23:00    16    16   PANEL\n#PASTE          05.04    90/10/25  90/10/25 23:00    19    19   PANEL\n#PBOX           05.04    90/10/25  90/10/25 23:00    16    16   PANEL\n#PFCAN          05.04    90/10/25  90/10/25 23:00    16    16   PANEL\n#PFSET          05.04    90/10/25  90/10/25 23:00    15    15   PANEL\n#PRTIT          05.04    90/10/25  90/10/25 23:00    21    21   PANEL\n#QCREATE        05.04    90/10/25  90/10/25 23:00    14    14   PANEL\n#QREP           05.04    90/10/25  90/10/25 23:00    14    14   PANEL\n#RCOLDEL        05.04    90/10/25  90/10/25 23:00    17    17   PANEL\n#RCOLS          05.04    90/10/25  90/10/25 23:00    19    19   PANEL\n#REPOTHE        05.04    90/10/25  90/10/25 23:00    14    14   PANEL\n#RJUST          05.04    90/10/25  90/10/25 23:00    24    24   PANEL\n#RNAME          05.04    90/10/25  90/10/25 23:00    12    12   PANEL\n#S              05.04    90/10/25  90/10/25 23:00    20    20   PANEL\n#SEPLINE        05.04    90/10/25  90/10/25 23:00    25    25   PANEL\n#SHOWCT2        05.04    90/10/25  90/10/25 23:00    23    23   PANEL\n#SHOWCUT        05.04    90/10/25  90/10/25 23:00    17    17   PANEL\n#SHOWDCB        05.04    90/10/25  90/10/25 23:00    16    16   PANEL\n#SHOWFLO        05.04    90/10/25  90/10/25 23:00    12    12   PANEL\n#SHOWMAC        05.04    90/10/25  90/10/25 23:00    12    12   PANEL\n#SLINE          05.04    90/10/25  90/10/25 23:00    22    22   PANEL\n#SORTDUP        05.04    90/10/25  90/10/25 23:00    16    16   PANEL\n#ST             05.04    90/10/25  90/10/25 23:00    25    25   PANEL\n#STAMP          05.04    90/10/25  90/10/25 23:00    21    21   PANEL\n#ST2            05.04    90/10/25  90/10/25 23:00    24    24   PANEL\n#ST3            05.04    90/10/25  90/10/25 23:00    24    24   PANEL\n#ST4            05.04    90/10/25  90/10/25 23:00    24    24   PANEL\n#ST5            05.04    90/10/25  90/10/25 23:00    22    22   PANEL\n#SUM            05.04    90/10/25  90/10/25 23:00    25    25   PANEL\n#SUPERT         05.04    90/10/25  90/10/25 23:00     0     0   PANEL\n#T              05.04    90/10/25  90/10/25 23:00    19    19   PANEL\n#TJ             05.04    90/10/25  90/10/25 23:00    25    25   PANEL\n#TYPE           05.04    90/10/25  90/10/25 23:00    25    25   PANEL\n#UCASE          05.04    90/10/25  90/10/25 23:00    21    21   PANEL\n#UNSEP          05.04    90/10/25  90/10/25 23:00    26    26   PANEL\n#XCOPY          05.04    90/10/25  90/10/25 23:00    15    15   PANEL\n#XSEND          05.04    90/10/25  90/10/25 23:00    20    20   PANEL\nADDCMDS         05.04    90/10/25  90/10/25 23:00    77    77   CLIST\nASMBOX          05.04    90/10/25  90/10/25 23:00    51    51   EDITMAC\nB               05.04    90/10/25  90/10/25 23:00     5     5   EDITMAC\nBIG             05.04    90/10/25  90/10/25 23:00   536   536   EDITMAC\nBIGS            05.04    90/10/25  90/10/25 23:00   536   536   EDITMAC\nBLDCOPY         05.04    90/10/25  90/10/25 23:00    63    63   EDITMAC\nBRODMAC         05.04    90/10/25  90/10/25 23:00    14    14   EDITMAC\nBRODMACD        05.04    90/10/25  90/10/25 23:00    15    15   EDITMAC\nBRODMACI        05.04    90/10/25  90/10/25 23:00    16    16   EDITMAC\nBRODMACR        05.04    90/10/25  90/10/25 23:00     8     8   EDITMAC\nBRODMACU        05.04    90/10/25  90/10/25 23:00    12    12   EDITMAC\nBRODREST        05.04    90/10/25  90/10/25 23:00    14    14   EDITMAC\nBRODUPDR        05.04    90/10/25  90/10/25 23:00     4     4   EDITMAC\nBRODUPDT        05.04    90/10/25  90/10/25 23:00    81    81   EDITMAC\nCENTER          05.04    90/10/25  90/10/25 23:00    55    55   EDITMAC\nCHGALL          05.04    90/10/25  90/10/25 23:00    17    17   EDITMAC\nCLISTBOX        05.04    90/10/25  90/10/25 23:00    54    54   EDITMAC\nCLONE           05.04    90/10/25  90/10/25 23:00    22    22   CLIST\nCLONEP          05.04    90/10/25  90/10/25 23:00   208   208   EDITMAC\nCLONES          05.04    90/10/25  90/10/25 23:00   156   156   EDITMAC\nCMDS            05.04    90/10/25  90/10/25 23:00    31    31   EDITMAC\nCMDUPDT1        05.04    90/10/25  90/10/25 23:00   223   223   EDITMAC\nCOBBOX          05.04    90/10/25  90/10/25 23:00    61    61   COBLSRC\nCOBLCAS         05.04    90/10/25  90/10/25 23:00    68    68   COBLSRC\nCOBSEPL         05.04    90/10/25  90/10/25 23:00    45    45   COBLSRC\nCOBUCAS         05.04    90/10/25  90/10/25 23:00    66    66   COBLSRC\nCOMMENTS        05.04    90/10/25  90/10/25 23:00    21    21   EDITMAC\nCOMPRESS        05.04    90/10/25  90/10/25 23:00    71    71   EDITMAC\nCONLY           05.04    90/10/25  90/10/25 23:00    90    90   EDITMAC\nCONT            05.04    90/10/25  90/10/25 23:00    50    50   EDITMAC\nCONTROL         05.04    90/10/25  90/10/25 23:00    35    35   EDITMAC\nCUSTBOX         05.04    90/10/25  90/10/25 23:00    31    31   EDITMAC\nCUT             05.04    90/10/25  90/10/25 23:00   121   121   EDITMAC\nCUTTO           05.04    90/10/25  90/10/25 23:00    61    61   EDITMAC\nD               05.04    90/10/25  90/10/25 23:00    54    54   EDITMAC\nDELCUT          05.04    90/10/25  90/10/25 23:00    45    45   EDITMAC\nDELC2           05.04    90/10/25  90/10/25 23:00    40    40   EDITMAC\nDELDUPS         05.04    90/10/25  90/10/25 23:00   100   100   EDITMAC\nDSIGENP         05.04    90/10/25  90/10/25 23:00   204   204   EDITMAC\nDSIGENS         05.04    90/10/25  90/10/25 23:00   175   175   EDITMAC\nE               05.04    90/10/25  90/10/25 23:00     6     6   EDITMAC\nEDITPDS         05.04    90/10/25  90/10/25 23:00    76    76   CLIST\nEMACS           05.04    90/10/25  90/10/25 23:00    71    71   EDITMAC\nEXIT            05.04    90/10/25  90/10/25 23:00     2     2   EDITMAC\nFC              05.04    90/10/25  90/10/25 23:00    11    11   EDITMAC\nFIXJCL          05.04    90/10/25  90/10/25 23:00   132   132   EDITMAC\nHEADING         05.04    90/10/25  90/10/25 23:00   224   224   EDITMAC\nINIT            05.04    90/10/25  90/10/25 23:00    12    12   EDITMAC\nINITIAL         05.04    90/10/25  90/10/25 23:00   138   138   EDITMAC\nISPUCMB         05.04    90/10/25  90/10/25 23:00    13    13   EDITMAC\nJC              05.04    90/10/25  90/10/25 23:00    24    24   EDITMAC\nJCLBOX          05.04    90/10/25  90/10/25 23:00    54    54   EDITMAC\nJOBCARD         05.04    90/10/25  90/10/25 23:00    61    61   EDITMAC\nLCASE           05.04    90/10/25  90/10/25 23:00     1     1   EDITMAC\nLCASEC          05.04    90/10/25  90/10/25 23:00    61    61   EDITMAC\nLJUST           05.04    90/10/25  90/10/25 23:00    55    55   EDITMAC\nMACHELP         05.04    90/10/25  90/10/25 23:00     4     4   EDITMAC\nMACLIST         05.04    90/10/25  90/10/25 23:00    77    77   EDITMAC\nMEMLIST         05.04    90/10/25  90/10/25 23:00    64    64   EDITMAC\nMERGE           05.04    90/10/25  90/10/25 23:00   158   158   EDITMAC\nMOVECOLS        05.04    90/10/25  90/10/25 23:00    55    55   EDITMAC\nMRCLEAN         05.04    90/10/25  90/10/25 23:00    21    21   EDITMAC\nMSTATS          05.04    90/10/25  90/10/25 23:00    80    80   EDITMAC\nONLY            05.04    90/10/25  90/10/25 23:00    35    35   EDITMAC\nOTHER           05.04    90/10/25  90/10/25 23:00     4     4   EDITMAC\nPARA            05.04    90/10/25  90/10/25 23:00   918   918   EDITMAC\nPARADOC         05.04    90/10/25  90/10/25 23:00   327   327   HELP\nPASTE           05.04    90/10/25  90/10/25 23:00   139   139   EDITMAC\nPBOX            05.04    90/10/25  90/10/25 23:00    28    28   EDITMAC\nPFCAN           05.04    90/10/25  90/10/25 23:00    55    55   EDITMAC\nPFSET           05.04    90/10/25  90/10/25 23:00    58    58   EDITMAC\nPRTIT           05.04    90/10/25  90/10/25 23:00    40    40   EDITMAC\nQCREATE         05.04    90/10/25  90/10/25 23:00     6     6   EDITMAC\nQREP            05.04    90/10/25  90/10/25 23:00    20    20   EDITMAC\nRCOLDEL         05.04    90/10/25  90/10/25 23:00    11    11   EDITMAC\nRCOLS           05.04    90/10/25  90/10/25 23:00    58    58   EDITMAC\nREPOTHER        05.04    90/10/25  90/10/25 23:00     7     7   EDITMAC\nRJUST           05.04    90/10/25  90/10/25 23:00    56    56   EDITMAC\nRNAME           05.04    90/10/25  90/10/25 23:00    65    65   EDITMAC\nS               05.04    90/10/25  90/10/25 23:00     6     6   EDITMAC\nSBOX            05.04    90/10/25  90/10/25 23:00    32    32   EDITMAC\nSCUT2           05.04    90/10/25  90/10/25 23:00    49    49   EDITMAC\nSEPLINE         05.04    90/10/25  90/10/25 23:00     1     1   EDITMAC\nSHOWCUT         05.04    90/10/25  90/10/25 23:00    49    49   EDITMAC\nSHOWCUT2        05.04    90/10/25  90/10/25 23:00    49    49   EDITMAC\nSHOWDCB         05.04    90/10/25  90/10/25 23:00    26    26   EDITMAC\nSHOWFLOW        05.04    90/10/25  90/10/25 23:00    37    37   EDITMAC\nSHOWMACS        05.04    90/10/25  90/10/25 23:00    46    46   EDITMAC\nSLINE           05.04    90/10/25  90/10/25 23:00    47    47   EDITMAC\nSORTDUPS        05.04    90/10/25  90/10/25 23:00   149   149   EDITMAC\nST              05.04    90/10/25  90/10/25 23:00   609   609   EDITMAC\nSTAMP           05.04    90/10/25  90/10/25 23:00    57    57   EDITMAC\nSTEDITY         05.04    90/10/25  90/10/25 23:00   208   208   EDITMAC\nSTEDIT2         05.04    90/10/25  90/10/25 23:00   210   210   EDITMAC\nSUM             05.04    90/10/25  90/10/25 23:00   231   231   EDITMAC\nT               05.04    90/10/25  90/10/25 23:00     9     9   EDITMAC\nTABLBLD         05.04    90/10/25  90/10/25 23:00    45    45   EDITMAC\nTEXTJOIN        05.04    90/10/25  90/10/25 23:00    28    28   EDITMAC\nTJ              05.04    90/10/25  90/10/25 23:00    28    28   EDITMAC\nTYPE            05.04    90/10/25  90/10/25 23:00   514   514   EDITMAC\nTYPESET         05.04    90/10/25  90/10/25 23:00     3     3   EDITMAC\nUCASE           05.04    90/10/25  90/10/25 23:00     1     1   EDITMAC\nUCASEC          05.04    90/10/25  90/10/25 23:00    63    63   EDITMAC\nUNSEP           05.04    90/10/25  90/10/25 23:00     9     9   EDITMAC\nWHEREMEM        05.04    90/10/25  90/10/25 23:00    17    17   CLIST\nWHERMEM2        05.04    90/10/25  90/10/25 23:00    17    17   EDITMAC\nWIPEIT          05.04    90/10/25  90/10/25 23:00    11    11   EDITMAC\nXCOPY           05.04    90/10/25  90/10/25 23:00    60    60   EDITMAC\nXSEND           05.04    90/10/25  90/10/25 23:00    52    52   EDITMAC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$$UPDT": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00`\\x00`\\x00\\x00\\xe2\\xd7\\xc3\\xd3\\xc9\\xe2\\xe3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 96, "newlines": 96, "modlines": 0, "user": "SPCLIST"}, "text": "/**********************************************************************\n/*                                                                    *\n/*                W   W  AAA  RRRR  N   N  III  N   N  GGGG           *\n/*                W   W A   A R   R NN  N   I   NN  N G               *\n/*                W W W AAAAA RRRR  N N N   I   N N N G  GG           *\n/*                WW WW A   A R  R  N  NN   I   N  NN G   G           *\n/*                W   W A   A R   R N   N  III  N   N  GGGG           *\n/*                                                                    *\n/*     THIS MACRO WILL UPDATE DIRECTORY INFORMATION FOR THIS PDS.     *\n/*     IT SHOULD BE USED AND THEN DELETED.                            *\n/**********************************************************************\n ISREDIT MACRO (FROM,TO)\n ISREDIT (WORKDSN) = DATASET\n SET &Z9 = Z9999999\n IF &FROM = ? THEN DO\n ISPEXEC DISPLAY PANEL(MEMLIST)\n EXIT\n END\n IF &FROM \u00ac= THEN SET &RT = &STR(RANGE &FROM TO &TO)\n IF &TO = THEN SET &TO = &Z9\n SET &TARGET1 = &FROM\n SET T1 = &LENGTH(&TARGET1)\n IF &FROM =  THEN SET &T1 = 8\n SET &TARGET2 = &TO\n SET T2 = &LENGTH(&TARGET2)\nSET  PDSDSN = &WORKDSN\n\n\n  SET &Y = &SUBSTR(7:8,&STR(&SYSDATE)\n  SET &M = &SUBSTR(1:2,&STR(&SYSDATE)\n  SET &D = &SUBSTR(4:5,&STR(&SYSDATE)\n  IF &LENGTH(&STR(&M)) = 1 THEN SET &M = &STR(&STR(0)&M)\n  IF &LENGTH(&STR(&D)) = 1 THEN SET &M = &STR(&STR(0)&D)\n/* INITIALIZE DATASET */\nISPEXEC  LMINIT DATAID(PDSID) DATASET('&PDSDSN') +\n                ENQ(SHRW)                        +\n                ORG(PDSORG)\nSET LMRC = &LASTCC\nIF &LMRC \u00ac= 0 THEN +\n   DO\n      WRITE LMINIT FAILED - RETURN CODE &LMRC\n      WRITE DATA SET IS NOT ALLOCATED OR NOT PARTITIONED\n      EXIT CODE(8)\n   END\n\nWRITE STATS FOR  '&WORKDSN' BEING UPDATED\n/* OPEN DATA SET */\nISPEXEC LMOPEN DATAID(&PDSID) OPTION(INPUT)\nSET LMRC = &LASTCC\n\n/* CALL EDIT WITH EACH MEMBER OF THE DATA SET AND SPECIFY THE */\n/* INITIAL EDIT MACRO.                                        */\nDO WHILE (&LMRC = 0)\n  /* BUILD MEMBER LIST AND RETURN NEXT MEMBER */\n  ISPEXEC LMMLIST DATAID(&PDSID) -\n        OPTION(LIST) MEMBER(MEMBER) -\n        STATS(YES)\nSET &LMRC = &LASTCC\nSET &NUM = &NUM +1\n SET &ZLMNORC  = &ZLINORC\n IF &SUBSTR(1:1,&MEMBER) \u00ac= &STR(#) THEN SET &ID = EDITMAC\n IF &SUBSTR(1:1,&MEMBER) = &STR($) THEN SET &ID = README\n IF &SUBSTR(1:3,&MEMBER) = &STR(COB) THEN SET &ID = COBLSRC\n IF &SUBSTR(1:1,&STR(&MEMBER)) = &STR(#) THEN SET &ID = PANEL\n IF &STR(&MEMBER) = CLONE THEN SET &ID = CLIST\n IF &STR(&MEMBER) = EDITPDS THEN SET &ID = CLIST\n IF &STR(&MEMBER) = WHEREMEM THEN SET &ID = CLIST\n IF &STR(&MEMBER) = ADDCMDS THEN SET &ID = CLIST\n IF &STR(&MEMBER) = PARADOC THEN SET &ID = HELP\n IF &STR(&MEMBER) = $$$$LIST THEN SET &ID = MEMLIST\n IF &STR(&MEMBER) = $$$$UPDT THEN SET &ID = SPCLIST\n  ISPEXEC  LMMSTATS DATAID(&PDSID)   MEMBER(&MEMBER) VERSION(5) +\n                    CURSIZE(&ZLMNORC) INITSIZE(&ZLMNORC) +\n                    CREATED(&Y/&M/&D) MODDATE(&Y/&M/&D) +\n                    MODTIME(23:00) MODLEVEL(0)  MODRECS(0) USER(&ID)\n  IF &LMRC = 0 THEN /* NOT END OF MEMBER LIST */ +\n     DO\n     IF &SUBSTR(1:&T1,&MEMBER) GE &TARGET1 AND +\n      &SUBSTR(1:&T2,&MEMBER) LE &TARGET2  THEN DO\n       END\n     END\n END\n WRITE\n WRITE\n WRITE\n WRITE\nWRITE  &NUM MEMBER STATS CHANGED\n/* FREE MEMBER LIST */\nISPEXEC LMMLIST DATAID(&PDSID) OPTION(FREE)\n/* CLOSE DATA SET */\nISPEXEC LMCLOSE DATAID(&PDSID)\n/* FREE DATA ID */\nISPEXEC LMFREE  DATAID(&PDSID)\n\nISREDIT END\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$READ": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1f\\x00\\x1e\\x00\\x00\\xd9\\xc5\\xc1\\xc4\\xd4\\xc5@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 31, "newlines": 30, "modlines": 0, "user": "README"}, "text": "    ELECTRONIC DATA  SYSTEMS  OR  ENRON  CORP  IN  NO  WAY ASSUMES ANY\n    RESPONSIBILITY FOR THE USE OF ANY  PART OF THIS CODE.  HOWEVER, IF\n    YOU HAVE ANY QUESTIONS, FEEL FREE TO CALL.\n\n\n               PAUL G. DAVIS PHONE (713) 658-3493\n               ELECTRONIC DATA SYSTEMS\n               1301 FANNIN 8TH FLOOR ROOM L22\n               HOUSTON, TEXAS 77002\n\n    I WILL MAINTAIN ALL THE  MACROS  SHIPPED  WITH THIS TAPE AS BEST I\n    CAN.  I ENCOURAGE ANYONE WHO HAS  EDIT MACROS THAT ARE NOT ON THIS\n    FILE,OR ONE THAT WORKS BETTER  TO  SEND  THEM TO ME.  I WILL TEST,\n    DOCUMENT, AND I WILL PUT THE BEST ONES ON THE TAPE, AND RETURN THE\n    SUBMITTED TAPE WITH A NEW  COPY  OF  ALL  THE LATEST MACROS ON THE\n    FILE.\n\n    MY GOAL IS TO STOP REINVENTING THE WHEEL, BUT STILL USE THE LATEST\n    TECHNOLOGY POSSIBLE TO DO THE JOB.\n\n    THE MACROS ON THIS  FILE  ARE  ONLY  A  PARTIAL  LISTING OF WHAT I\n    HAVE.  THE ON ON THIS TAPE  ARE  GENERAL PURPOSE, AND THE OTHERS I\n    HAVE TEND TO BE  SPECIAL  PURPOSE  (OR INSTALLATION SENSETIVE).  I\n    WILL  GLADLY  PROVIDE  THE  NON  SENSETIVE  MACROS  TO  ANYONE WHO\n    CONTRIBUTES TO THE FILE BUT I DON'T WANT TO CLUTTER UP THE CBTMODS\n    TAPE WITH MACROS THAT MAY NOT BE OF INTEREST TO OTHERS.\n\n    HELP CAN BE OBTAINED  FOR  MOST  ALL  EDIT  MACROS IN THIS FILE BY\n    TYPING THE MACRO NAME  FOLLOWED  BY  A  QUESTION MARK:  CUT ?  THE\n    PANELS FOR THE MACRO MUST BE  IN THE ISPPLIB CONCATENATION FOR THE\n    HELP FUNCTION TO WORK.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$BASIC": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1c\\x00\\x1a\\x00\\x00\\xd9\\xc5\\xc1\\xc4\\xd4\\xc5@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 28, "newlines": 26, "modlines": 0, "user": "README"}, "text": "    WHAT IS AN EDIT MACRO?   IT  IS  A  SET OF INSTRUCTIONS TO PERFORM\n    SOME TASK WHILE IN EDIT.   SOUNDS  SIMPLE  DOESN'T IT?  TO BE VERY\n    TRUTHFUL EDIT MACROS CAN BE  SIMPLE  OR  THEY CAN BE VERY COMPLEX.\n    THEY CAN BE WRITTEN IN A  VARIETY OF LANGUAGES, CLIST, REXX, PL/1,\n    COBOL AND ALC TO MENTION THE MOST POPULAR.\n\n    HOW ARE EDIT MACROS USED?  TO START  WITH YOU MUST BE IN AN ACTIVE\n    EDIT SESSION.  NEXT YOU  MUST  HAVE  A  WAY  OF ACCESSING THE EDIT\n    MACROS YOU WANT TO  USE.   FOR  CLIST'S  AND REXX EDIT MACROS THEY  OC\n    SHOULD BE IN A  SYSPROC  LIBRARY.   COMPILED  OR ASSEMBLED MODULES\n    SHOULD BE IN THE LINKLIST  OR  IN  THE  ISPLLIB LIBRARY.  TO USE A\n    CLIST OR REXX MODULE, SIMPLY  TYPE  THE  MACRO NAME ON THE COMMAND\n    LINE OF  THE  EDIT  PANEL  FOLLOWED  BY  ANY  PARAMETERS NEEDED BY\n    MACRO.  IF RANGE OR DESTINATION  PARAMETERS ARE NEEDED ENTER THOSE\n    IN THE PROPER PLACE.  COMPILED MACROS NEED A LITTLE MORE ATTENTION\n    TO WORK PROPERLY.  TO  USE  A  COMPILED  MACRO FOR THE FIRST TIME,\n    PRECEDE IT WITH AN  EXCLAMATION  MARK  \"!\".  !ASMMAC WOULD EXECUTE\n    THE COMPILED MACRO NAMED  ASMMAC  FOR  THE  FIRST TIME.  AFTER THE\n    INITIAL USE, THE MACRO NAME  IS  ONLY NEEDED.  COMPILED MACROS CAN\n    ALSO BE DEFINED IN A SPECIAL  MACRO CALLED INITIAL MACRO.  IF THEY\n    ARE DEFINED IN  THE  INITIAL  MACRO  THE  EXCLAMATION  MARK IS NOT\n    NEEDED.\n\n    THE INITIAL MACRO CAN  BE  VERY  IMPORTANT WHEN USING EDIT MACROS.\n    IF THE  MACRO  NAME  CONFLICTS  WITH  OTHER  SYSTEM  COMMANDS, THE\n    INITIAL MACRO CAN BE  USED  TO  DETERMINE  WHICH COMMAND SHOULD BE\n    USED.  SC34-4121-00 EDIT AND EDIT  MACROS OUTLINES THE USE OF EDIT\n    MACROS AND PROVIDES INFORMATION ON EDIT MACRO COMMANDS.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$CHANGES": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x8d\\x00+\\x00\\x00\\xd9\\xc5\\xc1\\xc4\\xd4\\xc5@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 141, "newlines": 43, "modlines": 0, "user": "README"}, "text": "\n             RRRR  EEEEE L     EEEEE  AAA   SSSS EEEEE       55555\n             R   R E     L     E     A   A S     E           5\n             RRRR  EEEE  L     EEEE  AAAAA  SSS  EEEE        5555\n             R  R  E     L     E     A   A     S E               5\n             R   R EEEEE LLLLL EEEEE A   A SSSS  EEEEE       5555\n\n--------------------------------------------------------------------------------\nCENTER   10/25/90 MODIFIED.         LEFT AND RIGHT BOUNDRIES  MAY NOW BE\n                                    PASSED FROM COMMAND LINE.\n--------------------------------------------------------------------------------\nTEXTJOIN 08/01/90 ADDED TO FILE.    JOIN 2 LINES OF TEXT AT CURSOR. NICE\n                                    AFTER A TEXTSPLIT COMMAND.\n--------------------------------------------------------------------------------\nGENERAL  07/30/90 CHANGES.          ALL REFERENCES  TO  3380  CHANGED TO\n                                    SYSDA.\n--------------------------------------------------------------------------------\nGENERAL  07/30/90 CHANGES.          VARIOUS PANELS AND ERRORS CORRECTED.\n--------------------------------------------------------------------------------\nWHERMEM2 07/30/90 REMOVED.          WHEREMEM REPLACED  THIS  MODULE WITH\n                                    ALL FUNCTIONS OF BOTH MEMBERS.\n--------------------------------------------------------------------------------\nISPUCMB  07/30/90 ADDED TO FILE.    ISPUCMB  IS  A  ISPF  STANDARD PANEL\n                                    THAT HAS BEEN  MODIFIED  TO VPUT THE\n                                    VALUE OF CMDIN  TO THE PROFILE.  THE\n                                    ADDCMDS   CLIST   VGETS   CMDIN   TO\n                                    DETERMINE  IF  UPDATES   ARE  TO  BE\n                                    NEGATED.\n--------------------------------------------------------------------------------\nXSEND    07/25/90 ADDED TO FILE.    TRANSMIT CURRENT DATASET  TO ANOTHER\n                                    USER. DATA NEED NOT BE SAVED.\n--------------------------------------------------------------------------------\nDELDUPS  05/21/90 ADDED TO FILE.    A SORT AND DELETE DUPE(S) MACRO THAT\n                                    ONLY DELETES AND SORTS.\n--------------------------------------------------------------------------------\nSORTDUPS 05/21/90 MODIFIED.         CORRECTED PROBLEM WITH DELETING  TO\n                                    MANY RECORDS.\n--------------------------------------------------------------------------------\nCUT      12/21/89 MODIFIED.         SHOW AND DELETE  FUNCTIONS ADDED TO\n                                    MACRO.\n--------------------------------------------------------------------------------\nDELC2    12/21/89 ADDED TO FILE     DELETE CUT LEVELS FROM THE CUT MACRO\n                                    THIS MACRO CALLED BY THE CUT MACRO.\n--------------------------------------------------------------------------------\nSCUT2    12/21/89 ADDED TO FILE     SHOW CUT LEVELS FROM THE CUT MACRO.\n                                    THIS MACRO CALLED BY THE CUT MACRO.\n--------------------------------------------------------------------------------\nBRODUPDT 10/18/89 ADDED TO FILE     UPDATE  AND  MAINTAIN  THE BRODCAST\n                                    DATASET.  CHANGE,  EDIT, AND FORMAT\n                                    BRODCAST MESSAGES.\n--------------------------------------------------------------------------------\n$$$$LIST 09/11/89 ADDED TO FILE     PDS STATS  BEFORE  UNLOADED  USE TO\n                                    COMPARE WHAT YOU  GET OFF THE TAPE.\n--------------------------------------------------------------------------------\n$$$$UPDT 09/11/89 ADDED TO FILE     UPDATE STATISTICS FOR THIS PDS. USE\n                                    IT ONCE AND THEN DELETE IT.\n--------------------------------------------------------------------------------\nPRTIT    09/08/89 ADDED TO FILE.    VPSPRINT CURRENT   DATASET  WITHOUT\n                                    SAVING   IT.     DSPRINT   CAN   BE\n                                    SUBSTITUTED  FOR  VPSPRINT  WITHOUT\n                                    MUCH TROUBLE.\n--------------------------------------------------------------------------------\nPARA     09/08/89 ADDED TO FILE.    WORD PROCESSING POWER FOR ISPF EDIT\n                                    RIGHT, LEFT JUSTIFY, CENTER, FORMAT\n                                    PROPORTIONAL SPACING, AND MUCH MORE\n--------------------------------------------------------------------------------\nFC       09/08/89 ADDED TO FILE.    FIND PENDING LINE COMMANDS QUICKLY.\n                                    NO MORE ENDLESS  SCROLLING TO  FIND\n                                    PENDING COMMANDS BEFORE EXITING.\n--------------------------------------------------------------------------------\nMOVECOLS 09/08/89 ADDED TO FILE.    MOVE COLUMNS OF DATA WITHIN DATASET\n--------------------------------------------------------------------------------\nJC       04/17/89 MODIFIED.         JC JC2 AND JC3 COMBINED INTO JC\n--------------------------------------------------------------------------------\nSHOWMACS 04/17/89 MODIFIED.         SCROLLING  FORWARD  AND  BACK ADDED\n                                    END KEY SUPPORT ADDED.\n--------------------------------------------------------------------------------\nWHEREMEM 04/17/89 MODIFIED.         NOW DETERMINES BLOCKSIZE OF VARIOUS\n                                    DATASETS IN CONCATENATION TO AID IN\n                                    DEBUGGING.  EDIT,  BROWSE,  AND PDS\n                                    SUBCOMMANDS ADDED.\n--------------------------------------------------------------------------------\nCONTROL  04/17/89 ADDED TO FILE.   INSERT CONTROL STATEMENTS IN CLIST\n--------------------------------------------------------------------------------\nNEWLINES 04/17/89 ADDED TO FILE.   INSERT  NEWLINE(S)   WHERE  NEED  IN\n                                   CURRENT EDIT TEXT\n--------------------------------------------------------------------------------\nADDCMDS  02/15/89 MODIFIED.        ADDED VAIRBLE  \"CMD\"   FOR DIFFERENT\n                                   TABLE  MEMBERS.    ADDCMDS  CMD(ISF)\n                                   WOULD UPDATE ISFCMDS.   TABLE IS NOW\n                                   SORTED PRIOR  TO  REPLACING. ISPCMDS\n                                   IS THE DEFAULT MEMBER.\n--------------------------------------------------------------------------------\n             RRRR  EEEEE L     EEEEE  AAA   SSSS EEEEE       4  4\n             R   R E     L     E     A   A S     E           4  4\n             RRRR  EEEE  L     EEEE  AAAAA  SSS  EEEE        44444\n             R  R  E     L     E     A   A     S E              4\n             R   R EEEEE LLLLL EEEEE A   A SSSS  EEEEE          4\n--------------------------------------------------------------------------------\nWHEREMEM 02/10/89 ADDED TO FILE.   FIND A MEMBER IN  A CONCATENATION OF\n                                   DD'S.  VERY  USEFUL  IN DETERMINING\n                                   THE ORIGIN OF A MEMBER.\n--------------------------------------------------------------------------------\nCLONE    11/11/88 MODIFIED.        MODIFIED TO ACCEPT VOLSER\n--------------------------------------------------------------------------------\nCUSTBOX  11/11/88 ADDED TO FILE.   DRAW A  CUSTOMIZED  IN  YOUR DATASET\n                                   SPECIFYING LENGTH & WIDTH\n--------------------------------------------------------------------------------\nCLISTBOX 11/11/88 ADDED TO FILE.   COMMENT  OUT  CLIST  CODE  LINES  BY\n                                   BOXING THEM IN.  ' &\n--------------------------------------------------------------------------------\nASMBOX   11/11/88 ADDED TO FILE.   COMMENT OUT ASM CODE LINES BY\n                                   BOXING THEM IN.\n--------------------------------------------------------------------------------\nCOBBOX   11/11/88 ADDED TO FILE.   COMMENT OUT COBOL CODE LINES BY\n                                   BOXING THEM IN.\n--------------------------------------------------------------------------------\nJCLBOX   11/11/88 ADDED TO FILE.   COMMENT OUT JCL LINES BY BOXING\n                                   THEM IN.\n--------------------------------------------------------------------------------\nCONLY    11/11/88 ADDED TO FILE.   CHANGE ONLY TARGET AND SHOW CHANGES\n                                   SOME CHANGE PARAMETERS SUPPORTED\n--------------------------------------------------------------------------------\nADDCMDS  11/10/88 ADDED TO FILE.   ADD COMMANDS TO ISPF CMD TABLE THE\n                                   EASY WAY.\n--------------------------------------------------------------------------------\nWHERMEM  11/10/88 ADDED TO FILE.   FIND A MEMBER IN A CONCATENATION OF\n                                   DD'S. VERY USEFUL IN DETERMINING\n                                   THE ORIGIN OF A MEMBER.\n--------------------------------------------------------------------------------\nSUPRTYPE 10/18/88 ADDED TO FILE.   BLOCK LETTERS MADE EASY. JUST TYPE\n                                   THEM ON THE COMMAND LINE.\n--------------------------------------------------------------------------------\nST       SHORT NAME FOR SUPRTYPE   BLOCK LETTERS MADE EASY\n--------------------------------------------------------------------------------\nCUTTO    09/23/88 ADDED TO FILE.   \"CUT\" DATA \"TO\" A DATASET.\n------------------------------------------------------------------------\nJC3      09/22/88 ADDED TO FILE.   GOOD OLD JC MACRO WITH A NEW TWIST\n------------------------------------------------------------------------\n$SAMPJCL 09/22/88 CORRECTED ERROR. REFER BACKS NOW CORRECT.\n------------------------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$DESCRPT": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00Y\\x00G\\x00\\x00\\xd9\\xc5\\xc1\\xc4\\xd4\\xc5@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 89, "newlines": 71, "modlines": 0, "user": "README"}, "text": "ADDCMDS   CLIST TO ADD ASSIST IN ADDING COMMANDS TO ISPF COMMAND TABLE\nASMBOX    DRAW A BOX AROUND ASSEMBLY CODE LINES (COMMENT THEM OUT)\nB         BROWSE A MEMBER IN SAME PDS WHEN IN EDIT\nBIG       CREATE BIG LETTERS IN YOUR TEXT\nBIGS      CREATE BIG SLANTED LETTERS IN YOUR TEXT\nBLDCOPY   BUILD IEBCOPY SYSIN STATEMENTS TO COPY MEMBER OF A PDS\nBRODUPDT  NEATLY UPDATE SYS1.BRODCAST MESSAGES\nCENTER    CENTER TEXT IN YOUR TEXT\nCHGALL    QUICK CHANGE ALL COMMAND\nCLISTBOX  DRAW A BOX AROUND CLIST LINES (COMMENT THEM OUT)\nCLONE     CLIST TO INVOKE CLONES AND CLONEP FROM ISPF (3.4 ALSO)\nCLONEP    BUILD JCL TO CLONE A PDS\nCLONES    BUILD JCL TO CLONE A SEQUENTIAL FILE\nCMDS      DISPLAY COMMAND TABLE ENTRIES\nCMDUPDT1  EDIT MACRO CALLED BY ADDCMDS CLIST\nCOBBOX    DRAW A BOX AROUND COBOL CODE LINES (COMMENT THEM OUT)\nCOMMENTS  FIND ALL THE COMMENTS IN YOUR DATASET\nCOMPRESS  COMPRESS CURRENT PDS IN PLACE\nCONLY     CHANGE \"ONLY\" COMMAND WITH SUB PARAMETERS\nCONT      PUT CONTINUATION CHARACTER IN COL 72\nCUSTBOX   DRAW A CUSTOM BOX TO SPECIFICATION LENGTH X WIDTH IN YOUR CODE\nCUT       CUT TEXT LINES FROM DATASET TO BE PASTED LATER\nCUTTO     CUT TEXT LINES FROM DATASET TO ANOTHER DATASET\nD         DELETE A MEMBER OF THE CURRENT PDS\nDELCUT    REMOVE A LEVEL OF CUT FROM PROFILE\nDELUPS    SORT CURRENT FILE AND DELETE DUPLICATE RECORDS\nDSIGENP   CREATE IEBCOPY JCL FOR A PDS\nDSIGENS   CREATE IEBGENER JCL FOR A SEQUENTIAL DATASET\nE         EDIT ANOTHER MEMBER OF THE CURRENT PDS\nEDITPDS   CLIST: PERFORM A COMMAND ON ALL MEMBERS OF A CLIST\nEMACS     LIST TABLE SHOWING EDIT MACRO DESCRIPTIONS\nFC        FIND PENDING LINE COMMANDS\nFIXJCL    TIDY UP YOUR JCL\nINIT      INITIAL MACRO FOR EDIT MACRO PURPOSES\nINITIAL   INITIALIZE DATASET HEADERS FILL IN THE BLANK INFO\nJC        CREATE A JOBCARD\nJCLBOX    DRAW A BOX AROUND JCL LINES (COMMENT THEM OUT)\nJOBCARD   CREATE A JOBCARD\nLCASE     CHANGE ENTIRE DATASET TO LOWER CASE\nLCASEC    CLIST MACRO TO CONVERT A DATASET TO LOWER CASE\nLJUST     CHANGE AN ENTIRE DATASET TO UPPER CASE\nMACHELP   GET HELP FOR INDIVIDUAL MACROS\nMACLIST   DISPLAY A TABLE OF CURRENT ISPF EDIT MACROS\nMEMLIST   SHOW THE MEMBERS IN THE CURRENT PDS\nMOVECOLS  MOVE COLUMNS OF DATA WITHIN DATASET\nMRCLEAN   WIPE THE DATA OUT OF MEMBER BUT PRESERVE THE BLANK LINES\nMSTATS    PROVIDE ISPF STATS ON MEMBER WITHOUT LEAVING EDIT\nONLY      FIND ONLY THE DATA WANTED\nOTHER     SAMPLE MACRO TO USE WITH PFSET (CHANGE TO SUIT NEEDS)\nPARA      WORD PROCESSING POWER FOR ISPF EDIT\nPARADOC   DOCUMENTATION FOR PARA MACRO\nPASTE     PASTE DATASET LINE THAT WERE CUT EARLIER\nPBOX      DRAW A FLOWCHART BOX\nPFCAN     RESET PFKEYS BACK TO NORMAL\nPFSET     SET PFKEYS TO SPECIAL PURPOSE\nPRTIT     VPSPRINT CURRENT DATASET\nQCREATE   QUICK CREATE TO CURRENT DATASET\nQREP      QUICK REPLACE TO CURRENT DATASET\nRCOLDEL   DEL RULE LINES\nRCOLS     FANCY RULE\nREPOTHER  QUICK REPLACE TO OTHER DATASET\nRJUST     RIGHT JUSTIFY TEXT\nRNAME     RENAME A MEMBER WHILE IN EDIT\nS         EDIT A MEMBER OF CURRENT PDS\nSEPLINE   ADD SEPARATION LINES IN YOUR TEXT\nSHOWCUT   SHOW TEXT PREVIOUSLY CUT\nSHOWCUT2  SHOW ONE LINE OF EACH CUT LEVEL\nSHOWDCB   SHOW CURRENT DATASET DCB\nSHOWFLOW  SHOW THE LOGIC FLOW OF CLIST OR PL/1 PROGRAM\nSHOWMACS  SEE HELP FOR ALL EDITMACS ONE AT A TIME\nSLINE     PLACE A SINGLE SEPARATION LINE WHERE NEEDED IN TEXT\nSORTDUPS  SORT CURRENT EDIT DATASET AND FIND DUPES\nST        SUPERTYPE, TYPE A STRING OF BLOCK LETTERS NICE....\nSTAMP     STAMP DATA INTO YOUR TEXT\nSTEDIT2   EDIT MACRO CALLED BY WHEREMEM\nSUM       SUM COLUMNS OF NUMBERS\nT         WHAT TIME IS IT\nTABLBLD   CLIST: CREATE ISPF TABLE FROM $DESCRPT MEMBER USED BY EMACS\nTEXTJOIN  JOIN TWO LINES OF TEXT AT CURSOR\nTJ        ALIAS FOR TEXTJOIN\nTYPE      TYPE BLOCK CHARACTERS WITH EASE AND AUTO SPACING\nTYPESET   EDIT MACRO TO USE WITH PFSET TO SET UP FOR \"TYPE\"\nUCASE     CHANGE ENTIRE TEXT TO UPPER CASE\nUCASEC    CLIST MACRO TO CONVERT A DATASET TO UPPER CASE\nUNSEP     REMOVE SEPARATION LINES CREATED BY SEPLINE\nWHEREMEM  CLIST: SHOW OCCURRENCE OF MEMBER IN DD CONCATENATION -- USEFUL\nWIPEIT    ERASE ALL LINES IN DATASET BUT MAINTAIN BLANK LINES\nXCOPY     COPY A DATASET OTHER THAN THE PDS YOU ARE WORKING IN\nXSEND     TRANSMIT CURRENT DATASET TO ANOTHER USER\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$DOC": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\t\\x00\\t\\x00\\x00\\xd9\\xc5\\xc1\\xc4\\xd4\\xc5@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "README"}, "text": "$BASIC        BASIC INSTRUCTIONS FOR USE OF EDIT MACROS\n$CHANGES      CHANGES AND MODIFICATIONS TO MEMBERS\n$DESCRPT      DESCRIPTION OF MACROS\n$DOC          THIS MEMBER\n$SAMPJCL      JCL TO COPY NEEDED MODULES AND COMPILE LOAD MODULES\n$SETUP        SET UP FOR EDIT MACRO USE\nCOBLCAS       COBOL SOURCE FOR LCASE (LOWER CASE) EDIT MACRO\nCOBSEPL       COBOL SOURCE FOR SEPLINE EDIT MACRO\nCOBUCAS       COBOL SOURCE FOR UCASE (UPPER CASE) EDIT MACRO\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$EXAMPLE": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1d\\x00\\x1d\\x00\\x00\\xd9\\xc5\\xc1\\xc4\\xd4\\xc5@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 29, "newlines": 29, "modlines": 0, "user": "README"}, "text": "EXAMPLES OF ISPF LM SERVICES CAN BE FOUND IN THE FOLLOWING MACROS:\nSERVICE     MACRO\n--------    --------\nLMCLOSE     BLDCOPY\nLMCLOSE     EDITPDS\nLMCLOSE     MEMLIST\nLMCLOSE     MSTATS\nLMFREE      BLDCOPY\nLMFREE      EDITPDS\nLMFREE      MEMLIST\nLMFREE      MSTATS\nLMINIT      BLDCOPY\nLMINIT      D\nLMINIT      EDITPDS\nLMINIT      MEMLIST\nLMINIT      MSTATS\nLMINIT      RNAME\nLMMDEL      D\nLMMDEL      XCOPY\nLMMFIND     MSTATS\nLMMLIST     MSTATS\nLMMREN      RNAME\nLMOPEN      BLDCOPY\nLMOPEN      D\nLMOPEN      EDITPDS\nLMOPEN      MEMLIST\nLMOPEN      MSTATS\nLMOPEN      RNAME\nLMOPEN      XCOPY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$SAMPJCL": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x01/\\x00\\xcc\\x00\\x00\\xd9\\xc5\\xc1\\xc4\\xd4\\xc5@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 303, "newlines": 204, "modlines": 0, "user": "README"}, "text": "//COPYMACS  EXEC PGM=IEBCOPY\n//SYSPRINT  DD   SYSOUT=*\n//INMACS    DD   DISP=SHR,DSN=CBTMODS.FILE095.PDS, <=== MODIFY\n//OUTMACS   DD   DISP=(,CATLG),UNIT=SYSDA,DSN=YOUR.ISPCLIB, <=== MODIFY\n//          SPACE=(TRK,(15,5,10),RLSE),\n//          DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=6160)\n//SYSUT3    DD   UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSUT4    DD   UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSIN     DD   *\n  COPY INDD=INMACS,OUTDD=OUTMACS\n    S M=ADDCMDS\n    S M=ASMBOX\n    S M=B\n    S M=BIG\n    S M=BIGS\n    S M=BLDCOPY\n    S M=BRODMAC\n    S M=BRODMACD\n    S M=BRODMACI\n    S M=BRODMACR\n    S M=BRODMACU\n    S M=BRODREST\n    S M=BRODUPDR\n    S M=BRODUPDT\n    S M=CENTER\n    S M=CHGALL\n    S M=CLISTBOX\n    S M=CLONE\n    S M=CLONEP\n    S M=CLONES\n    S M=CMDS\n    S M=CMDUPDT1\n    S M=COBBOX\n    S M=COBLCAS\n    S M=COBSEPL\n    S M=COBUCAS\n    S M=COMMENTS\n    S M=COMPRESS\n    S M=CONLY\n    S M=CONT\n    S M=CUSTBOX\n    S M=CUT\n    S M=CUTTO\n    S M=D\n    S M=DELCUT\n    S M=DELC2\n    S M=DELDUPS\n    S M=DSIGENP\n    S M=DSIGENS\n    S M=E\n    S M=EDITPDS\n    S M=EMACS\n    S M=EXIT\n    S M=FC\n    S M=FIXJCL\n    S M=INIT\n    S M=INITIAL\n    S M=JC\n    S M=JCLBOX\n    S M=JOBCARD\n    S M=LCASE\n    S M=LCASEC\n    S M=LJUST\n    S M=MACHELP\n    S M=MACLIST\n    S M=MEMLIST\n    S M=MERGE\n    S M=MOVECOLS\n    S M=MRCLEAN\n    S M=MSTATS\n    S M=ONLY\n    S M=OTHER\n    S M=PARA\n    S M=PARADOC\n    S M=PASTE\n    S M=PBOX\n    S M=PFCAN\n    S M=PFSET\n    S M=PRTIT\n    S M=QCREATE\n    S M=QREP\n    S M=RCOLDEL\n    S M=RCOLS\n    S M=REPOTHER\n    S M=RJUST\n    S M=RNAME\n    S M=S\n    S M=SBOX\n    S M=SCUT2\n    S M=SEPLINE\n    S M=SHOWCUT\n    S M=SHOWCUT2\n    S M=SHOWDCB\n    S M=SHOWFLOW\n    S M=SHOWMACS\n    S M=SLINE\n    S M=SORTDUPS\n    S M=ST\n    S M=STAMP\n    S M=STEDITY\n    S M=STEDIT2\n    S M=SUM\n    S M=T\n    S M=TABLBLD\n    S M=TEXTJOIN\n    S M=TJ\n    S M=TYPE\n    S M=TYPESET\n    S M=UCASE\n    S M=UCASEC\n    S M=UNSEP\n    S M=WHEREMEM\n    S M=WHERMEM2\n    S M=WIPEIT\n    S M=XCOPY\n    S M=XSEND\n/*\n//COPYPNLS  EXEC PGM=IEBCOPY\n//SYSPRINT  DD   SYSOUT=*\n//INPNLS    DD   DISP=SHR,DSN=CBTMOD.FILE095.PDS, <=== MODIFY\n//OUTPNLS   DD   DISP=(,CATLG),UNIT=SYSDA,DSN=YOUR.ISPPLIB, <=== MODIFY\n//          SPACE=(TRK,(25,5,20),RLSE),\n//          DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=6160)\n//SYSUT3    DD   UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSUT4    DD   UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSIN     DD   *\n  COPY INDD=INPNLS,OUTDD=OUTPNLS\n    S M=((#ASMBOX,ASMBOX,R))\n    S M=((#B,B,R))\n    S M=((#BIG,BIG,R))\n    S M=((#BIGS,BIGS,R))\n    S M=((#BLDCOPY,BLDCOPY,R))\n    S M=((#BRODPNL,BRODPNL,R))\n    S M=((#CENTER,CENTER,R))\n    S M=((#CHGALL,CHGALL,R))\n    S M=((#CLISTBO,CLISTBOX,R))\n    S M=((#CLONE,CLONE,R))\n    S M=((#COBBOX,COBBOX,R))\n    S M=((#COMMENT,COMMENTS,R))\n    S M=((#COMPRES,COMPRESS,R))\n    S M=((#CONLY,CONLY,R))\n    S M=((#CONT,CONT,R))\n    S M=((#CONTROL,CONTROL,R))\n    S M=((#CUT,CUT,R))\n    S M=((#CUTTO,CUTTO,R))\n    S M=((#D,D,R))\n    S M=((#DELCUT,DELCUT,R))\n    S M=((#DELDUPS,DELDUPS,R))\n    S M=((#DSIGENP,DSIGENP,R))\n    S M=((#DSIGENS,DSIGENS,R))\n    S M=((#E,E,R))\n    S M=((#EXIT,EXIT,R))\n    S M=((#FC,FC,R))\n    S M=((#FIXJCL,FIXJCL,R))\n    S M=((#FMEMD00,FMEMD00,R))\n    S M=((#FMEMD01,FMEMD01,R))\n    S M=((#FMEMD02,FMEMD02,R))\n    S M=((#INIT,INIT,R))\n    S M=((#INITIAL,INITIAL,R))\n    S M=((#JC,JC,R))\n    S M=((#JCLBOX,JCLBOX,R))\n    S M=((#LCASE,LCASE,R))\n    S M=((#LJUST,LJUST,R))\n    S M=((#MACHELP,MACHELP,R))\n    S M=((#MACLIST,MACLIST,R))\n    S M=((#MEMLIST,MEMLIST,R))\n    S M=((#MOVECOL,MOVECOLS,R))\n    S M=((#MSTATS,MSTATS,R))\n    S M=((#NEWLINE,NEWLINES,R))\n    S M=((#ONLY,ONLY,R))\n    S M=((#PASTE,PASTE,R))\n    S M=((#PBOX,PBOX,R))\n    S M=((#PFCAN,PFCAN,R))\n    S M=((#PFSET,PFSET,R))\n    S M=((#PRTIT,PRTIT,R))\n    S M=((#QCREATE,QCREATE,R))\n    S M=((#QREP,QREP,R))\n    S M=((#RCOLDEL,RCOLDEL,R))\n    S M=((#RCOLS,RCOLS,R))\n    S M=((#REPOTHE,REPOTHER,R))\n    S M=((#RJUST,RJUST,R))\n    S M=((#RNAME,RNAME,R))\n    S M=((#S,S,R))\n    S M=((#SEPLINE,SEPLINE,R))\n    S M=((#SHOWCT2,SHOWCUT2,R))\n    S M=((#SHOWCUT,SHOWCUT,R))\n    S M=((#SHOWDCB,SHOWDCB,R))\n    S M=((#SHOWFLO,SHOWFLOW,R))\n    S M=((#SHOWMAC,SHOWMACS,R))\n    S M=((#SLINE,SLINE,R))\n    S M=((#SORTDUP,SORTDUPS,R))\n    S M=((#STAMP,STAMP,R))\n    S M=((#ST,ST,R))\n    S M=((#ST2,ST2,R))\n    S M=((#ST3,ST3,R))\n    S M=((#ST4,ST4,R))\n    S M=((#ST5,ST5,R))\n    S M=((#SUM,SUM,R))\n    S M=((#SUPERT,SUPERT,R))\n    S M=((#T,T,R))\n    S M=((#TJ,TEXTJOIN,R))\n    S M=((#TYPE,TYPE,R))\n    S M=((#UCASE,UCASE,R))\n    S M=((#UNSEP,UNSEP,R))\n    S M=((#XCOPY,XCOPY,R))\n    S M=((#XSEND,XSEND,R))\n/*\n//COPYHELP  EXEC PGM=IEBCOPY\n//SYSPRINT  DD   SYSOUT=*\n//INHELP    DD   DISP=SHR,DSN=CBTMOD.FILE095.PDS, <=== MODIFY\n//OUTHELP   DD   DISP=(,CATLG),UNIT=SYSDA,DSN=YOUR.HELP, <=== MODIFY\n//          SPACE=(TRK,(25,5,20),RLSE),\n//          DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=6160)\n//SYSUT3    DD   UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSUT4    DD   UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSIN     DD   *\n  COPY INDD=INHELP,OUTDD=OUTHELP\n    S M=((PARADOC,PARA,R))\n//   REMOVE THIS LINE TO DO COBOL COMPILES\n//COBSEPL   EXEC PGM=IGYCRCTL,REGION=512K,\n//         PARM=('NOADV,MAP,NONUM,OBJ,OFF,NORENT,NORES,NOSEQ,QUOTES,X',\n//          'NOTEST')\n//STEPLIB   DD   DSN=SYS2.VSCOB2.V1R2M0.COB2COMP,DISP=SHR <== MODIFY\n//SYSPRINT  DD   SYSOUT=(*)\n//SYSLIB    DD   DSN=COB.COPYLIB,DISP=SHR\n//SYSUT1    DD   DSN=&SYSUT1,UNIT=TEST,SPACE=(CYL,(1,2),RLSE)\n//SYSUT2    DD   DSN=&SYSUT2,UNIT=TEST,SPACE=(CYL,(1,2),RLSE)\n//SYSUT3    DD   DSN=&SYSUT3,UNIT=TEST,SPACE=(CYL,(1,2),RLSE)\n//SYSUT4    DD   DSN=&SYSUT4,UNIT=TEST,SPACE=(CYL,(1,2),RLSE)\n//SYSUT5    DD   DSN=&SYSUT5,UNIT=TEST,SPACE=(CYL,(1,2),RLSE)\n//SYSLIN    DD   DISP=(NEW,PASS),UNIT=TEST,\n//          SPACE=(CYL,(1,2),RLSE),\n//          DSN=&TEMP3\n//SYSIN     DD   DSN=CBTMOD.FILEXXX.PDS(COBSEPL),DISP=SHR <== MODIFY\n//*\n//LKED      EXEC PGM=IEWL,COND=(5,LT,COB),\n//          PARM='LIST,LET,XREF,MAP,AC=1'\n//SYSABOUT  DD   SYSOUT=*\n//SYSDBOUT  DD   SYSOUT=*\n//SYSPRINT  DD   SYSOUT=(*)\n//SYSLIN    DD   DSN=&TEMP3,DISP=(OLD,DELETE)\n//SYSLMOD   DD   DSN=YOUR.ISPLLIB(SEPLIN),DISP=SHR <== MODIFY\n//SYSUT1    DD   UNIT=(SYSDA,SEP=(SYSLIN,SYSLMOD)),\n//          SPACE=(1024,(50,20))\n//SYSLIB    DD   DSN=SYS2.VSCOB2.V1R2M0.COB2LIB,DISP=SHR\n//          DD   DSN=YOUR.ISPLLIB,DISP=SHR <== MODIFY LIB WITH ISPLINK\n//          DD   DSN=SYS1.MACLIB,DISP=SHR\n//COBUCASE  EXEC PGM=IGYCRCTL,REGION=512K,\n//         PARM=('NOADV,MAP,NONUM,OBJ,OFF,NORENT,NORES,NOSEQ,QUOTES,X',\n//          'NOTEST')\n//STEPLIB   DD   DSN=SYS2.VSCOB2.V1R2M0.COB2COMP,DISP=SHR <== MODIFY\n//SYSPRINT  DD   SYSOUT=(*)\n//SYSLIB    DD   DSN=COB.COPYLIB,DISP=SHR  <== MODIFY\n//SYSUT1    DD   DSN=&SYSUT1,UNIT=TEST,SPACE=(CYL,(1,2),RLSE)\n//SYSUT2    DD   DSN=&SYSUT2,UNIT=TEST,SPACE=(CYL,(1,2),RLSE)\n//SYSUT3    DD   DSN=&SYSUT3,UNIT=TEST,SPACE=(CYL,(1,2),RLSE)\n//SYSUT4    DD   DSN=&SYSUT4,UNIT=TEST,SPACE=(CYL,(1,2),RLSE)\n//SYSUT5    DD   DSN=&SYSUT5,UNIT=TEST,SPACE=(CYL,(1,2),RLSE)\n//SYSLIN    DD   DISP=(NEW,PASS),UNIT=TEST,\n//          SPACE=(CYL,(1,2),RLSE),\n//          DSN=&TEMP3\n//SYSIN     DD   DSN=CBTMOD.FILEXXX.PDS(COBUCAS),DISP=SHR <== MODIFY\n//*\n//LKED      EXEC PGM=IEWL,COND=(5,LT,COBUCASE),\n//          PARM='LIST,LET,XREF,MAP,AC=1'\n//SYSABOUT  DD   SYSOUT=*\n//SYSDBOUT  DD   SYSOUT=*\n//SYSPRINT  DD   SYSOUT=(*)\n//SYSLIN    DD   DSN=&TEMP3,DISP=(OLD,DELETE)\n//SYSLMOD   DD   DSN=YOUR.ISPLLIB(UCAS),DISP=SHR <== MODIFY\n//SYSUT1    DD   UNIT=(SYSDA,SEP=(SYSLIN,SYSLMOD)),\n//          SPACE=(1024,(50,20))\n//SYSLIB    DD   DSN=SYS2.VSCOB2.V1R2M0.COB2LIB,DISP=SHR\n//          DD   DSN=YOUR.ISPLLIB,DISP=SHR <== MODIFY LIB WITH ISPLINK\n//          DD   DSN=SYS1.MACLIB,DISP=SHR\n//COBULASE  EXEC PGM=IGYCRCTL,REGION=512K,\n//         PARM=('NOADV,MAP,NONUM,OBJ,OFF,NORENT,NORES,NOSEQ,QUOTES,X',\n//          'NOTEST')\n//STEPLIB   DD   DSN=SYS2.VSCOB2.V1R2M0.COB2COMP,DISP=SHR <== MODIFY\n//SYSPRINT  DD   SYSOUT=(*)\n//SYSLIB    DD   DSN=COB.COPYLIB,DISP=SHR  <== MODIFY\n//SYSUT1    DD   DSN=&SYSUT1,UNIT=TEST,SPACE=(CYL,(1,2),RLSE)\n//SYSUT2    DD   DSN=&SYSUT2,UNIT=TEST,SPACE=(CYL,(1,2),RLSE)\n//SYSUT3    DD   DSN=&SYSUT3,UNIT=TEST,SPACE=(CYL,(1,2),RLSE)\n//SYSUT4    DD   DSN=&SYSUT4,UNIT=TEST,SPACE=(CYL,(1,2),RLSE)\n//SYSUT5    DD   DSN=&SYSUT5,UNIT=TEST,SPACE=(CYL,(1,2),RLSE)\n//SYSLIN    DD   DISP=(NEW,PASS),UNIT=TEST,\n//          SPACE=(CYL,(1,2),RLSE),\n//          DSN=&TEMP3\n//SYSIN     DD   DSN=CBTMOD.FILEXXX.PDS(COBLCAS),DISP=SHR <== MODIFY\n//*\n//LKED      EXEC PGM=IEWL,COND=(5,LT,COBLCASE),\n//          PARM='LIST,LET,XREF,MAP,AC=1'\n//SYSABOUT  DD   SYSOUT=*\n//SYSDBOUT  DD   SYSOUT=*\n//SYSPRINT  DD   SYSOUT=(*)\n//SYSLIN    DD   DSN=&TEMP3,DISP=(OLD,DELETE)\n//SYSLMOD   DD   DSN=YOUR.ISPLLIB(LCAS),DISP=SHR <== MODIFY\n//SYSUT1    DD   UNIT=(SYSDA,SEP=(SYSLIN,SYSLMOD)),\n//          SPACE=(1024,(50,20))\n//SYSLIB    DD   DSN=SYS2.VSCOB2.V1R2M0.COB2LIB,DISP=SHR\n//          DD   DSN=YOUR.ISPLLIB,DISP=SHR <== MODIFY LIB WITH ISPLINK\n//          DD   DSN=SYS1.MACLIB,DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$SETUP": {"ttr": 782, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1e\\x00&\\x00\\x00\\xd9\\xc5\\xc1\\xc4\\xd4\\xc5@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 30, "newlines": 38, "modlines": 0, "user": "README"}, "text": "             SETTING UP FOR USING EDIT MACROS IN THIS FILE\n\n    THESE MACROS ARE A COLLECTION  OF  VARIOUS EDIT MACROS THAT MAY BE  T\n    SOMEWHAT USEFUL  AT  YOUR  INSTALLATION.   SOME  OF  THEM  ARE  MY\n    ORIGINAL, AND OTHERS ARE FROM OTHER SHARE USERS.  ALL OF THEM WORK\n    AT THIS SITE.  SOME MAY WILL  NEED  TO BE MODIFIED TO WORK AT YOUR\n    SITE.  TO USE THEM YOU  WILL  NEED  TO  HAVE ISPF 2.2 OR LATER AND\n    TSO/E REL 3 OR LATER.  THIS SITE HAS ISPF 2.3 AND TSO/E REL 4.\n\n    TO EASE THE BURDEN  ON  THE  CBTMOD  TAPE  I HAVE COMBINED ALL THE\n    MACROS, PANELS, SOURCE,  JCL,  AND  INSTRUCTIONS  INTO ONE PDS.  I\n    HAVE PROVIDED SOME SAMPLE JCL TO UNLOAD THE PANELS AND MACROS INTO\n    THE PROPER PDS'S WITH NAMES  THAT THE MACROS EXPECT.  SAMPLE COBOL\n    JCL IS PROVIDED IN  THE  JOBSTREAM  TO  COMPILE  AND LINK THE LOAD\n    MODULES NEEDED.\n\n    EXAMINE  THE  MEMBER  $SAMPJCL   AND   MODIFY   IT  TO  MEET  YOUR  NG\n    INSTALLATION NAMING  STANDARDS  AND  PROPER  COMPILE  JCL.   ADD A\n    JOBCARD AND SUBMIT THE JCL.  YOU  ARE NOW READY TO USE THE MACROS.\n\n    NOTE.....  DUE TO  THE  POSSIBILITY  OF  THESE  MACROS HAVING LIKE\n    NAMES WITH OTHER CLISTS  AND  MODULES  AT YOUR INSTALLATION PLEASE\n    REVIEW THEM BEFORE SUBMITTING THE JCL  TO MAKE SURE YOU DON'T WIPE\n    OUT YOUR OWN VALUABLE CLISTS OR LOAD MODULES.\n\n    AS AN AID THE TABLBLD CLIST IN THIS DATA SET WILL BUILD A TABLE OF\n    THE EDIT MACROS AND CLISTS.  THIS TABLE CAN BE DISPLAYED USING THE\n    EMACS MACRO OR CLIST.  THIS CLIST  MUST BE EDITED TO POINT TO THIS\n    DATA SET SO THE $DESCRPT MEMBER MAY BE FOUND.\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$SHARE": {"ttr": 784, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00$\\x00!\\x00\\x00\\xd9\\xc5\\xc1\\xc4\\xd4\\xc5@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 36, "newlines": 33, "modlines": 0, "user": "README"}, "text": "\n                          SSSS H   H  AAA  RRRR  EEEEE\n                         S     H   H A   A R   R E\n                          SSS  HHHHH AAAAA RRRR  EEEE\n                             S H   H A   A R  R  E\n                         SSSS  H   H A   A R   R EEEEE\n\n\n    TO ALL WHO FIND THESE  MACROS  USEFUL  AND ARE INTERESTED IN OTHER\n    MACROS, YOU ARE READING THE  RIGHT MEMBER.  THESE MACROS COME FROM\n    VARIOUS SOURCES ACROSS THE COUNTRY.  I WILL CONTINUE TO CONTRIBUTE\n    AN UPDATED MACRO DATA  SET  TO  THE  CBTMODS  TAPE, WITH AN UPDATE\n    ABOUT EVERY  3  MONTHS.   FOR  THOSE  OF  YOU  WHO  WOULD  LIKE TO\n    CONTRIBUTE MACROS TO THE  FILE,  PLEASE  DO.  I WILL EVALUATE EACH\n    NEW MACRO I RECEIVE AND  PLACE  THE  ONES  I FIND USEFUL OR HAVE A\n    UNIQUE WAY OF DOING THINGS ON THE FILE.  FULL CREDIT WILL BE GIVEN\n    TO THE CONTRIBITOR IF DESIRED.\n\n    I HAVE A COLLECTION OF  SPECIAL  PURPOSE  MACROS  THAT I USE IN MY\n    DAILY JOB.  MOST OF THESE ARE NOT TOO USEFUL FOR MOST OTHER FOLKS,\n    BUT  SOME  OF  TECHNIQUES   CAN   BE   USED   IN  YOUR  OWN  MACRO\n    DEVELOPEMENT.  IN ANY  EVENT  I  WILL  SEND  THEM  TO  ANY ONE WHO\n    REQUESTS.\n\n    TO REQUEST AN  UPDATED  COPY  OF  THE  MASTER  MACRO FILE (UPDATED\n    DAILY), AND OR A COPY  OF  MY  SPECIAL  PURPOSE MACROS SEND A MINI\n    REEL OF TAPE  OR  CARTRIDGE  TO  THE  ADDRESS  BELOW.  IF YOU HAVE\n    MACROS TO CONTRIBUTE PUT THEM ON  THE  TAPE.  IF YOU DON'T CARE TO\n    CONTRIBUTE PLEASE  SEND  ENOUGH  RETURN  POSTAGE  ($2.40)  CASH OR\n    STAMPS.  IF YOU CONTRIBUTE MACROS  I  WILL SEND THE UPDATE FREE (I\n    WILL PAY THE POSTAGE).  TURN AROUND TIME SO FAR IS ABOUT 2 DAYS IN\n    HOUSE.  I DO MOST OF THE  WORK  ON THESE MACROS AND SHIPPING TAPES\n    AFTER  HOURS.   SINCE   I   AM   A   SYSTEMS  PROGRAMMER  WHO  HAS\n    RESPONSIBILITIES TO MY COMPANY SYSTEM,  ALL SHIPMENTS OF TAPE WILL\n    BE AS TIME PERMITS.\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#ASMBOX": {"ttr": 786, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1b\\x00\\x1b\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  -------------------- ASMBOX MACRO -------------------------   TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%ASMBOX+MACRO IS USED TO%\"BOX\"+DESIGNATED ASM LINES MAKING  THEM\n+COMMENTS. IT CAN BE USED FOR COMMENTS OR TO NOP CODE LINES.\n+USE:\n+ON THE COMMAND LINE TYPE IN%ASMBOX+AND USE THE CC OR CN RANGE COMMANDS\n+TO INDICATE THE LINES THAT YOU WANT%\"BOXED\".\n+\n%COMMAND ===> ASMBOX\n+******************************** TOP OF DATA **********************************\n 000010    LABEL      EQU *\n 000020               MVC  DATAHOLD,DATA\n%CC+030               CLC  DATAHOLD,DATACOMP\n%CC+040               BNE  NOGOOD\n 000050               LA   R9,DATAHOLD\n ******************************** TOP OF DATA **********************************\n 000010    LABEL      EQU *\n 000020               MVC  DATAHOLD,DATA\n 000030    *********************************************************************\n 000040    *            CLC  DATAHOLD,DATACOMP                                 *\n 000050    *            BNE  NOGOOD                                            *\n 000060    *********************************************************************\n 000070               LA   R9,DATAHOLD\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#B": {"ttr": 788, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x15\\x00\\x10\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 21, "newlines": 16, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ B         MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%B+MACRO IS USED TO BROWSE ANOTHER MEMBER OF THE CURRENT PDS BEING\n+EDITED (THE MEMBER BEING EDITED MAY ALSO BE BROWSED)\n+\n+USE:\n+TYPE%B+ON THE COMMAND LINE FOLLOWED BY THE MEMBER NAME TO BE BROWSED\n+\n%COMMAND ===> B JCL1\n+RESULT:\n%BROWSE -- CURRENT.DATASET(JCL1)\n+***************************** TOP OF DATA *************************************\n //H562813K JOB  (AD01,E009),'DAVIS-E009-3357EB',                        0001003\n //   MSGCLASS=X,REGION=2048K,                                           0002003\n //   CLASS=A,                                                           0002103\n //   NOTIFY=H562813                                                     0002203\n //STEP4  EXEC PGM=IEBCOPY,TIME=1440                                     0029003\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#BIG": {"ttr": 1026, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1b\\x00\\x19\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 27, "newlines": 25, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  --------------------- BIG  MACRO ---------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%BIG+MACRO IS USED TO CREATE BLOCK CHARACTERS IN TEXT.\n+\n+USE:\n+TYPE%BIG+ON THE COMMAND LINE FOLLOWED BY A CHARACTER (A-Z 0-9) THEN PLACE\n+THE CURSOR IN THE TEXT WHERE YOU WANT THE BLOCK CHARACTER PRESS ENTER.\n+\n%COMMAND ===> BIG A\n+***************************** TOP OF DATA *************************************\n+000001  DATA LINE 1 % -+ <== CURSOR\n+\n+RESULT:\n+\n+000001  DATA LINE 1     AAAAAAAAAA\n+000002  DATA LINE 2    AAAAAAAAAAAA\n+000003  DATA LINE 3    AA        AA\n+000004  DATA LINE 4    AA        AA\n+000005  DATA LINE 5    AA        AA\n+000006  DATA LINE 6    AAAAAAAAAAAA\n+000007  DATA LINE 7    AAAAAAAAAAAA\n+000008  DATA LINE 8    AA        AA\n+000009  DATA LINE 9    AA        AA\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#BIGS": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1b\\x00\\x19\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 27, "newlines": 25, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  --------------------- BIGS MACRO ---------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%BIGS+MACRO IS USED TO CREATE SLANTED BLOCK CHARACTERS IN TEXT.\n+\n+USE:\n+TYPE%BIGS+ON THE COMMAND LINE FOLLOWED BY A CHARACTER (A-Z 0-9) THEN PLACE\n+THE CURSOR IN THE TEXT WHERE YOU WANT THE BLOCK CHARACTER PRESS ENTER.\n+\n%COMMAND ===> BIGS A\n+***************************** TOP OF DATA *************************************\n+000001  DATA LINE 1 % -+ <== CURSOR\n+\n+RESULT:\n+\n+000001  DATA LINE 1                AAAAAAAAAA\n+000002  DATA LINE 2              AAAAAAAAAAAA\n+000003  DATA LINE 3             AA        AA\n+000004  DATA LINE 4            AA        AA\n+000005  DATA LINE 5           AA        AA\n+000006  DATA LINE 6          AAAAAAAAAAAA\n+000007  DATA LINE 7         AAAAAAAAAAAA\n+000008  DATA LINE 8        AA        AA\n+000009  DATA LINE 9       AA        AA\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#BLDCOPY": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1b\\x00\\x16\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 27, "newlines": 22, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  -------------------- BLDCOPY MACRO -------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%BLDCOPY+MACRO IS USED TO CREATE AN IEBCOPY SELECTION LIST.\n+\n+USE:\n+ONTE COMMAND LINE TYPE IN%BLDCOPY+AND THE NAME OF THE PDS WHICH IS TO\n+TO BE COPIED.  PLACE A \"A\" OR \"B\" ON THE LINE NUMBER WHERE YOU WANT THEE\n+LIST INSERTED PRESS ENTER.\n+\n%COMMAND ===> BLDCOPY  MY.PDS\n+***************************** TOP OF DATA *************************************\n+000130  //SYSIN DD *\n+A00140  COPY INDD=IN1,OUTDD=OUT1\n+\n+RESULT:\n+***************************** TOP OF DATA *************************************\n+000130  //SYSIN DD *\n+000140  COPY INDD=IN1,OUTDD=OUT1\n+000150     S M=CENTER\n+000160     S M=CUT\n+000170     S M=JC\n+000180     S M=LJUST\n+000190     S M=PASTE\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#BRODPNL": {"ttr": 1032, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1a\\x00\\x1a\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "PANEL"}, "text": ")BODY EXPAND(!!)\n%!-!  BRODCAST UPDATE PANEL  !-!\n%COMMAND ===>_ZCMD                                                             %\n%\n+     THIS PANEL WILL ENABLE YOU TO UPDATE THE BRODCAST DATASET IN AN\n+     ACCURATE EASY MANNER.  YOU MUST HAVE%OPERATOR+PRIVILEGES IN ORDER\n+     TO UPDATE THE BRODCAST DATASET.\n%\n%       1. DELETE CURRENT BRODCAST MESSAGES\n%\n%       2. EDIT/REPLACE CURRENT BRODCAST MESSAGES\n%\n%       3. IMPORT BRODCAST MESSAGES FROM ANOTHER DATASET\n%\n%       4. VIEW CURRENT BRODCAST MESSAGES\n%\n%       5. RESTORE LAST DELETED MESSAGES FROM BACKUP\n%\n%       X. EXIT FROM BRODCAST UPDATE\n%\n%       SELECT FROM ABOVE LIST ====>_CH\n)INIT\n.CURSOR = CH\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#CENTER": {"ttr": 1034, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1a\\x00\\x1a\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  -------------------- CENTER MACRO  -------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%CENTER+MACRO IS USED TO CENTER TEXT WITHIN A DATASET.\n+USE:\n+FIRST ON THE LINE NUMBERS OF THE DATA  SET  INDICATE A RANGE OF THE LINES TO BE\n+\"CENTERED\"  , \"CC\"  TO \"CC\"  OR \"CNN\"   (NN BENG NUMBERS).  THEN ON THE COMMAND\n+LINE TYPE IN CENTER.  (SCROLLING  IS  NOT  ALLOWED AFTER TYPING IN CENTER UNTIL\n+THE CENTER COMMAND IS COMPLETE).   ADDITIONAL  PARAMETERS OF LEFT AND RIGHT MAY\n+BE ENTERED TO LIMIT THE COLUMNS IN  WHICH  TO CENTER.  IF LEFT IS ENTERED RIGHT\n+MUST ALSO BE ENTERED OR THE RIGHT BOUNDS WILL BE THE DEFAULT.\n+\n%COMMAND ===> CENTER {LEFT RIGHT}\n+***************************** TOP OF DATA *************************************\n+000001  DATA LINE 1\n+CC0002  DATA LINE 2\n+CC0003  DATA LINE 3\n+\n+RESULT:\n+\n+000001  DATA LINE 1\n+000002                              DATA LINE 2\n+000003                              DATA LINE 3\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#CHGALL": {"ttr": 1036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x14\\x00\\x10\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 20, "newlines": 16, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ CHGALL    MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%CHGALL+MACRO IS USED TO CHANGE ALL PARM1 TO PARM2\n+\n+USE:\n+TYPE%CHGALL+ON THE COMMAND LINE AND PARM1 AND PARM2\n+\n%COMMAND ===> CHGALL  A  B\n+***************************** TOP OF DATA *************************************\n+000001  DATA LINE 1\n+000002  CALL LINE 1\n+\n+RESULT:\n+***************************** TOP OF DATA *************************************\n+000001  DBTB LINE 1\n+000002  CBLL LINE 1\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#CLISTBO": {"ttr": 1038, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1a\\x00\\x18\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 26, "newlines": 24, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  -------------------- CLISTBOX MACRO ------------------------- TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%CLISTBOX+MACRO IS USED TO%\"BOX\"+DESIGNATED CLIST LINES MAKING  THEM\n+COMMENTS. IT CAN BE USED FOR COMMENTS OR TO NOP CODE LINES.\n+USE:\n+ON THE COMMAND LINE TYPE IN%CLISTBOX+AND USE THE CC OR CN RANGE COMMANDS\n+TO INDICATE THE LINES THAT YOU WANT%\"BOXED\".\n+\n%COMMAND ===> CLISTBOX\n+***************************** TOP OF DATA *************************************\n+000010     SET TYPE = COMMAND\n+CC0020    CONTROL MSG LIST CONLIST SYMLIST\n+CC0030    WRITE SET UP DONE\n+000040    WRITE PROCESS TERMINATING\n%RESULT:\n+***************************** TOP OF DATA *************************************\n+000010     SET TYPE = COMMAND\n+000020/**********************************************************************\n+000030/*  CONTROL MSG LIST CONLIST SYMLIST                                  *\n+000040/*  WRITE SET UP DONE                                                 *\n+000050/**********************************************************************\n+000060    WRITE PROCESS TERMINATING\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#CLONE": {"ttr": 1040, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1a\\x00\\x19\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 26, "newlines": 25, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ CLONE     CLIST  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%CLONE+CLIST IS USED TO CREATE IEBCOPY JCL TO COPY A PDS OR\n+SEQUENTIAL FILE AND CREATE AN IDENTICAL ONE.\n+USE:\n+TYPE%TSO CLONE+ON A COMMAND LINE AND THE DATASET NAME TO BE CLONED.\n%COMMAND ===> TSO CLONE THIS.DATA.SET\n+A**************************** TOP OF DATA *************************************\n RESULT:\n+***************************** TOP OF DATA *************************************\n+//H562813N JOB  (AD01,E009),'DAVIS-E009-3357EB',\n+//   MSGCLASS=X,REGION=2048K,CLASS=A,NOTIFY=&ZUSER\n+//COPY      EXEC PGM=IEBCOPY\n+//SYSPRINT  DD SYSOUT=*\n+//IN1       DD DISP=SHR,DSN=THIS.DATA.SET\n+//OUTDD     DD DISP=(,CATLG),UNIT=SYSDA,\n+//          SPACE=(CYL,(1,2,100),RLSE),DSN= <== MODIFY\n+//          DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=6160)\n+//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(2,2))\n+//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(2,2))\n+//SYSIN     DD *\n   COPY INDD=((IN1,R)),OUTDD=OUTDD\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#COBBOX": {"ttr": 1042, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1a\\x00\\x18\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 26, "newlines": 24, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  -------------------- COBBOX MACRO -------------------------   TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%COBBOX+MACRO IS USED TO%\"BOX\"+DESIGNATED JCL LINES MAKING THEM\n+COMMENTS.  JUST TYPE COMMENTS WHERE YOU WANT THEN BOX THEM.\n+USE:\n+ON THE COMMAND LINE TYPE IN%COBBOX+AND USE THE CC OR CN RANGE COMMANDS\n+TO INDICATE THE LINES THAT YOU WANT%\"BOXED\".\n+\n%COMMAND ===> COBBOX\n+***************************** TOP OF DATA *************************************\n+CC0450      FILE1 IS INPUT TO THE ACCOUNT PROCESS\n+CC0450      OUTPUT FROM THIS PROCESS IS WRITTEN TO THE AO0006P FILE\n+000460 FD  FILE1\n+000470     LABEL RECORDS STANDARD\n%RESULT:\n+***************************** TOP OF DATA *************************************\n+000450************************************************************************\n+000460*     FILE1 IS INPUT TO THE ACCOUNT PROCESS                            *\n+CC0470*     OUTPUT FROM THIS PROCESS IS WRITTEN TO THE AO0006P FILE          *\n+000480************************************************************************\n+000490 FD  FILE1\n+000500     LABEL RECORDS STANDARD\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#COMMENT": {"ttr": 1044, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x15\\x00\\x10\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 21, "newlines": 16, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ COMMENTS  MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%COMMENTS+MACRO IS USED TO FIND ALL THE COMMENTS IN CLISTS\n+\n+USE:\n+TYPE%COMMENTS+ON THE COMMAND LINE\n+\n%COMMAND ===> COMMENTS\n+***************************** TOP OF DATA *************************************\n+000010  DATA LINE 10\n+000011            /* COMMENTS */\n+000012  DATA LINE 12\n+RESULT:\n+***************************** TOP OF DATA *************************************\n% - - - - - - - - - - - - - - - - - - - - - - - - - - - 10 LINE(S) NOT DISPLAYED\n+000011             /* COMMENTS */\n% - - - - - - - - - - - - - - - - - - - - - - - - - - - 99 LINE(S) NOT DISPLAYED\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#COMPRES": {"ttr": 1046, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x11\\x00\\x0f\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 17, "newlines": 15, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ COMPRESS  MACRO  --------------------------TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%COMPRESS+MACRO IS USED TO COMPRESS CURRENT PDS IN PLACE.\n+\n+USE:\n+TYPE%COMPRESS+ON THE COMMAND LINE.\n+IF COND CODE IS OTHER THAN 0 TYPE IN HELP FOR ADDITIONAL INFORMATION.\n+\n%COMMAND ===> COMPRESS\n+***************************** TOP OF DATA *************************************\n%RESULT:\n%COMMAND ===>                                             %COMPRESS COND CODE 0\n+***************************** TOP OF DATA *************************************\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#CONLY": {"ttr": 1048, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1b\\x00\\x1a\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 27, "newlines": 26, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ CONLY     MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+\n%SYNTAX:+THIS EDIT MACRO USES MOST OF THE PARAMETERS OF THE ISPF EDIT CHANGE\n          COMMAND.\n\n         %CONLY STRING-1 STRING-2 (RANGE-1 (RANGE-2)) (CHARS) (COL-1 (COL-2))\n                                                      (PREFIX)\n                                                      (SUFFIX)\n                                                      (WORD)\n\n+\n%USE:   +CONLY PERFORMS THE REQUESTED CHANGE AND THEN DISPLAYS ONLY THOSE LINES\n          WHICH HAVE BEEN CHANGED.\n+\n%NOTE:  +FOR CASE SENSITIVE CHANGES, USE THE CHARACTER NOTATION%C'AABB'+IN THE\n          STRING-1 PARAMETER.\n+\n        +THE CHANGE COMMAND KEYWORDS ALL, FIRST, LAST, NEXT, NX, PREV, AND X%ARE\n          NOT SUPPORTED.\n+\n+\n)INIT\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#CONT": {"ttr": 1050, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x18\\x00\\x10\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 24, "newlines": 16, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ CONT      MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%CONT+MACRO IS USED TO PLACE A CONTINUATION CHARACTER IN COLUMN 72\n+OF THE DATASET.\n+USE:\n+TYPE%CONT+ON THE COMMAND LINE AND MARK THE RANGE OF CONTINUATION WITH\n+THE \"C\" RANGE COMMAND ON THE LINE NUMBERS.\n+\n%COMMAND ===> CONT\n+***************************** TOP OF DATA *************************************\n+CC0001           MYMAC PARM1,\n+000002             PARM2,\n+CC0003             PARM3,\n+000004             LASTPARM\n+RESULT:\n+***************************** TOP OF DATA *************************************\n+000001           MYMAC PARM1,                                                 X\n+000002             PARM2,                                                     X\n+000003             PARM3,                                                     X\n+000004             LASTPARM\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#CONTROL": {"ttr": 1052, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x19\\x00\\x19\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  -------------------- CONTROL MACRO  ------------------------- TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%CONTROL+MACRO IS USED TO INSERT CONTROL STATEMENTS IN CLISTS. THE\n+OPTIONAL PARM%OFF+WILL INSERT A CLIST STATEMENT TO TURN OFF PREVIOUSLY\n+SET CONTROL.  THE CONTROL CLIST CAN BE USED FOR DEBUGGING SELECT LINES\n+OF A PROBLEM CLIST.\n+USE:\n+ON THE COMMAND LINE TYPE IN%CONTROL+AND USE THE A OR B RANGE  COMMAND\n+TO INDICATE WHERE THE CONTROL STATEMENT IS TO BE INSERTED\n+\n%COMMAND ===> CONTROL {OFF}\n+***************************** TOP OF DATA *************************************\n%A+0010     SET TYPE = COMMAND\n+000020    WRITE SET UP DONE\n+000030    WRITE PROCESS TERMINATING\n%RESULT:\n+***************************** TOP OF DATA *************************************\n+000010     SET TYPE = COMMAND\n+000020    CONTROL MSG LIST CONLIST SYMLIST\n+000030    WRITE SET UP DONE\n+000040    WRITE PROCESS TERMINATING\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#CUT": {"ttr": 1054, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x15\\x00\\x16\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 21, "newlines": 22, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  --------------- CUT MACRO INFORMATION ------------------      TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n      ISPF/PDF EDIT MACRO TO WRITE LINES FROM A FILE TO THE USER\n      PROFILE POOL FOR LATER INCLUSION BY THE%PASTE+MACRO.\n      TO USE:\n       ENTER CUT ON THE COMMAND LINE AND USE THE%C+OR%M+LINE COMMANDS\n       (IN ANY FORM) TO SELECT THE LINES TO BE CUT.\n\n       IF THE%M+LINE COMMAND IS USED, THE LINES WILL BE%DELETED+.\n\n       A LEVEL NUMBER MAY BE USED TO SEPARATE DIFFERENT LEVELS OF\n       A CUT.  THIS WAY YOU CAN MAKE MANY CUTS BEFORE YOU PASTE.\n       IF NO LEVEL NUMBER IS USED LEVEL 1 IS USED AND ANYTHING\n       IN LEVEL 1 WILL BE OVERLAYED.\n\n       CUT%3+(OR ANY NUMBER) WILL CUT THE INDICATED LINE INTO LEVEL%3+\n       (OR LEVEL INDICATED) AND CAN BE PASTED USING THE LEVEL NUMBER.\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#CUTTO": {"ttr": 1056, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x13\\x00\\x11\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 19, "newlines": 17, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ CUTTO     MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%CUTTO+MACRO IS USED TO CREATE/REPLACE     A DATASET OR PDS MEMBER\n+OTHER THAN THE CURRENT PDS BEING EDITED.  USE A RANGE COMMAND\n+TO INDICATE THE RANGE OF LINES TO BE CUT (C,CC,M,MM,CNN,M99)\n+CUTTO COPIES THE ENTIRE MEMBER IN EDIT AT THE TIME, RANGE\n+COMMANDS ARE NOT NEEDED, AND NO OTHER PANELS ARE NEEDED TO IDENTIFY\n+THE TARGET DATASET.\n+\n+USE:\n+TYPE%CUTTO+ON THE COMMAND LINE FOLLOWED BY THE TARGET NAME\n+TO CREATE/REPLACE.\n+\n%COMMAND ===> CUTTO 'THE.TARGET.DATASET'\n+***************************** TOP OF DATA *************************************\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#D": {"ttr": 1058, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\r\\x00\\x10\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 13, "newlines": 16, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ D         MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%D+MACRO IS USED TO DELETE A MEMBER OF THE CURRENT PDS.  YOU WILL BE\n+PROMPTED TO INSURE YOU REALLY WANT TO DELETE THE MEMBER.\n+USE:\n+TYPE%D+ON THE COMMAND LINE FOLLOWED BY THE MEMBER NAME\n+\n%COMMAND ===> D MEMBER\n+***************************** TOP OF DATA *************************************\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#DELCUT": {"ttr": 1060, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x11\\x00\\x0f\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 17, "newlines": 15, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ DELCUT    MACRO  --------------------------TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%DELCUT+MACRO IS USED DELETE CUT DATA IN THE VARIOUS LEVELS OF CUT.\n+\n+USE:\n+TYPE%DELCUT+ON THE COMMAND LINE AND AN OPTIONAL LEVEL NUMBER.\n+DEFAULT LEVEL IS 1\n+\n%COMMAND ===> DELCUT 2\n+***************************** TOP OF DATA *************************************\n%RESULT:\n%COMMAND ===>                                              %CUT LEVEL 2 DELETED\n+***************************** TOP OF DATA *************************************\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#DELDUPS": {"ttr": 1282, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x14\\x00\\x11\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 20, "newlines": 17, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ DELDUPS  MACRO  ------------------------   TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n    +THE%DELDUPS+MACRO IS USED TO SORT THE CURRENT DATASET AND DELETE DELETE\n    +THE DUPLICATE RECORDS.  %DELDUPS +DEFAULTS  TO  THE  BOUNDS SETTINGS OF\n    +DATASET.  MATCHES ON SUBFIELDS OF THE RECORDS CAN BE MADE BY INDICATING\n    +THE STARTING AND ENDING  COLUMNS WHEN  ENTERING  THE DELDUPS MACRO.  TO\n    +UNDO THE RESULTS OF THE  DELDUPS  MACRO CANCEL THE EDIT SESSION WITHOUT\n    +SAVING.\n    +\n    +IF NO STARTING AND ENDING COLUMNS ARE SPECIFIED THE SORT DEFAULTS TO THE\n    +BOUNDS SETTING.\n    +\n    +PARAMETERS ARE POSITIONAL AND OPTIONAL\n    +\n%COMMAND ===> DELDUPS   {STARTCOL} {ENDCOL} {DEBUG}\n+***************************** TOP OF DATA *************************************\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#DSIGENP": {"ttr": 1284, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1a\\x00\\x10\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 26, "newlines": 16, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ DSIGENP   MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%DSIGENP+MACRO IS USED TO CREATE IEBCOPY JCL TO COPY A PDS AND\n+CREATE AN IDENTICAL ONE.\n+USE:\n+TYPE%DSIGENP+ON THE COMMAND LINE AND THE DATASET NAME TO BE COPIED.\n+PLACE AN \"A\" OR \"B\" ON THE LINE NUMBER AT THE DESIRED DESTINATION.\n%COMMAND ===> DSIGENP THIS.DATA.SET\n+A**************************** TOP OF DATA *************************************\n RESULT:\n+***************************** TOP OF DATA *************************************\n+000001 //COPY    EXEC PGM=IEBCOPY\n+000002 //SYSPRINT DD SYSOUT=*\n+000003 //IN1      DD DISP=SHR,DSN=THIS.DATA.SET\n+000004 //OUTDD    DD DISP=(,CATLG),UNIT=SYSDA,DSN=\n+000005 //         SPACE=(TRK,(15,5,20),RLSE),\n+000006 //       DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=6160)\n+000007 //SYSUT3 DD UNIT=SYSDA,SPACE=(CYL,(2,2))\n+000008 //SYSUT4 DD UNIT=SYSDA,SPACE=(CYL,(2,2))\n+000009 //SYSIN DD *\n+000010   COPY INDD=((IN1,R)),OUTDD=OUTDD\n+000011 /*\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#DSIGENS": {"ttr": 1286, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x16\\x00\\x10\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 22, "newlines": 16, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ DSIGENS   MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%DSIGENS+MACRO IS USED TO CREATE IEBGENER JCL TO COPY A SEQUENTIAL\n+DATASERT AND CREATE AN IDENTICAL ONE.\n+USE:\n+TYPE%DSIGENS+ON THE COMMAND LINE AND THE DATASET NAME TO BE COPIED.\n+PLACE AN \"A\" OR \"B\" ON THE LINE NUMBER AT THE DESIRED DESTINATION.\n%COMMAND ===> DSIGENS ANY.SEQ.DATASET\n+A**************************** TOP OF DATA *************************************\n RESULT:\n+***************************** TOP OF DATA *************************************\n+000001 //GENR    EXEC PGM=IEBGENER\n+000002 //SYSPRINT DD SYSOUT=*\n+000003 //SYSUT1   DD DISP=SHR,DSN=ANY.SEQ.DATASET\n+000004 //SYSUT2   DD DISP=(,CATLG),UNIT=SYSDA,DSN=\n+000005 //         SPACE=(CYL,(20,10),RLSE),\n+000006 //       DCB=(DSORG=PS,RECFM=FBA,LRECL=150,BLKSIZE=1500)\n+000007 //SYSIN DD DUMMY\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#E": {"ttr": 1288, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x16\\x00\\x10\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 22, "newlines": 16, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ E         MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%E+MACRO IS USED TO EDIT ANOTHER MEMBER OF THE CURRENT PDS BEING\n+EDITED (THE MEMBER BEING EDITED MAY NOT BE EDITED WITH THIS COMMAND)\n+\n+USE:\n+TYPE%E+ON THE COMMAND LINE FOLLOWED BY THE MEMBER NAME TO EDIT\n+\n%COMMAND ===> E JCL1\n+***************************** TOP OF DATA *************************************\n+RESULT:\n%EDIT -- CURRENT.DATASET(JCL1)\n+***************************** TOP OF DATA *************************************\n //H562813K JOB  (AD01,E009),'DAVIS-E009-3357EB',                        0001003\n //   MSGCLASS=X,REGION=2048K,                                           0002003\n //   CLASS=A,                                                           0002103\n //   NOTIFY=H562813                                                     0002203\n //STEP4  EXEC PGM=IEBCOPY,TIME=1440                                     0029003\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#EXIT": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1b\\x00\\x19\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 27, "newlines": 25, "modlines": 0, "user": "PANEL"}, "text": "%TTTTTTTTTTTT  HH        HH    AAAAAAAAAA    TTTTTTTTTTTT    ''   SSSSSSSSSS\n%TTTTTTTTTTTT  HH        HH   AAAAAAAAAAAA   TTTTTTTTTTTT   ''   SSSSSSSSSSSS\n%     TT       HH        HH   AA        AA        TT       ''    SS        SS\n%     TT       HH        HH   AA        AA        TT             SS\n%     TT       HH        HH   AA        AA        TT             SSS\n%     TT       HHHHHHHHHHHH   AAAAAAAAAAAA        TT              SSSSSSSSS\n%     TT       HHHHHHHHHHHH   AAAAAAAAAAAA        TT               SSSSSSSSS\n%     TT       HH        HH   AA        AA        TT                      SSS\n%     TT       HH        HH   AA        AA        TT                       SS\n%     TT       HH        HH   AA        AA        TT             SS        SS\n%     TT       HH        HH   AA        AA        TT             SSSSSSSSSSSS\n%     TT       HH        HH   AA        AA        TT              SSSSSSSSSS\n%                  AAAAAAAAAA    LL             LL\n%                 AAAAAAAAAAAA   LL             LL\n%                 AA        AA   LL             LL\n%                 AA        AA   LL             LL\n%                 AA        AA   LL             LL\n%                 AAAAAAAAAAAA   LL             LL\n%                 AAAAAAAAAAAA   LL             LL\n%                 AA        AA   LL             LL\n%                 AA        AA   LL             LL\n%                 AA        AA   LL             LL\n%                 AA        AA   LLLLLLLLLLLL   LLLLLLLLLLLL\n%                 AA        AA   LLLLLLLLLLLL   LLLLLLLLLLLL\n)PROC\n&KEY = PF03\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#FC": {"ttr": 1292, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1c\\x00\\x1c\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "PANEL"}, "text": ")ATTR DEFAULT(%+_)\n)BODY EXPAND(##)\n%EDITMAC #-# FC MACRO #-# TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%FC+MACRO IS USED TO FIND PENDING EDIT LINE COMMANDS.\n+\n+USE:\n+TYPE%FC+ON THE COMMAND LINE\n+\n%EDIT -- CURRENT.DATASET(JCL1)                              MOVE/COPY IS PENDING\n%COMMAND ===> FC\n+***************************** TOP OF DATA *************************************\n+000001 //H562813K JOB  (AD01,E009),'DAVIS-E009-3357EB',\n 000002 //   MSGCLASS=X,REGION=2048K,\n 000003 //   CLASS=A,\n 000004 //   NOTIFY=H562813\n%RESULT:\n%EDIT -- CURRENT.DATASET(JCL1)\n%COMMAND ===>\n+***************************** TOP OF DATA *************************************\n%C+     //STEP4  EXEC PGM=IEBCOPY,TIME=1440\n 000044 //DISPDD  DD SYSOUT=A\n 000045 //COPYDD  DD SYSOUT=A\n 000046 //SYSIN   DD *\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#FIXJCL": {"ttr": 1294, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1b\\x00\\x10\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 27, "newlines": 16, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ FIXJCL    MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%FIXJCL+MACRO IS USED TO TIDY UP JCL.  THIS MEMBER SHOULD BE EDITED\n+AND ADJUSTED FOR YOUR INSTALLATION STANDARDS.\n+\n+USE:\n+TYPE%FIXJCL+ON THE COMMAND LINE\n+\n%COMMAND ===> FIXJCL\n+***************************** TOP OF DATA *************************************\n//H562813K  JOB  (AD01,E009),'DAVIS-E009-3357EB',   %BEFORE+\n//       MSGCLASS=X,REGION=2048K,\n//          CLASS=A,\n//     NOTIFY=H562813\n//STEP EXEC PGM=IEFBR14\n//DD1    DD   DSN=SYS2.GDDM.PQUEUE,DISP=OLD\n+***************************** TOP OF DATA *************************************\n//H562813K  JOB  (AD01,E009),'DAVIS-E009-3357EB',   %AFTER+\n//          MSGCLASS=X,REGION=2048K,\n//          CLASS=A,\n//          NOTIFY=H562813\n//STEP      EXEC PGM=IEFBR14\n//DD1       DD   DSN=SYS2.GDDM.PQUEUE,DISP=OLD\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#FMEMD00": {"ttr": 1296, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00(\\x00*\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 40, "newlines": 42, "modlines": 0, "user": "PANEL"}, "text": ")ATTR\n \u00ac TYPE(INPUT) INTENS(NON)\n \u00a2 TYPE(OUTPUT) INTENS(HIGH)\n)BODY\n+-------------------%  EDS FIND OCCURRENCE OF MEMBER PANEL +--------------------\n%COMMAND ===>_ZCMD\n%       % SEARCHING  DDNAME \u00a2TARGETDD    +USERID -%&ZUSER    +TIME   -%&ZTIME\n        +\n+SEARCH FOR MEMBER %===>_MEM     + TYPE OF SEARCH %==>_SEARCH +(%FIRST+ /%ALL+)\n        +\n        +   \u00a2FMEM1 +DSN 01===>_DSN1\n        +   \u00a2FMEM2 +DSN 02===>_DSN2\n        +   \u00a2FMEM3 +DSN 03===>_DSN3\n        +   \u00a2FMEM4 +DSN 04===>_DSN4\n        +   \u00a2FMEM5 +DSN 05===>_DSN5\n        +   \u00a2FMEM6 +DSN 06===>_DSN6\n        +   \u00a2FMEM7 +DSN 07===>_DSN7\n        +   \u00a2FMEM8 +DSN 08===>_DSN8\n        +   \u00a2FMEM9 +DSN 09===>_DSN9\n        +   \u00a2FMEM10+DSN 10===>_DSN10\n        +   \u00a2FMEM11+DSN 11===>_DSN11\n        +   \u00a2FMEM12+DSN 12===>_DSN12\n%\n+PRESS%END KEY+TO RETURN\n)INIT\n)PROC\n VER(&MEM,NB)\n VER(&SEARCH,LIST,FIRST,ALL)\n VER(&DSN1,NB)\n VER(&DSN2,DSNAME)\n VER(&DSN3,DSNAME)\n VER(&DSN4,DSNAME)\n VER(&DSN5,DSNAME)\n VER(&DSN6,DSNAME)\n VER(&DSN7,DSNAME)\n VER(&DSN8,DSNAME)\n VER(&DSN9,DSNAME)\n VER(&DSN10,DSNAME)\n VPUT SEARCH PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#FMEMD01": {"ttr": 1298, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00a\\x00(\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 97, "newlines": 40, "modlines": 0, "user": "PANEL"}, "text": ")ATTR\n \u00ac TYPE(INPUT) INTENS(LOW)\n \u00a2 TYPE(OUTPUT) INTENS(HIGH)\n)BODY\n+-------------------% EDS FIND OCCURRENCE OF MEMBER PANEL +------------ --------\n%COMMAND ===>_ZCMD\n%       % SEARCHING  DDNAME \u00a2TARGETDD    +USERID -%&ZUSER    +TIME   -%&ZTIME\n        +\n+SEARCH FOR MEMBER %===>_MEM     + TYPE OF SEARCH %==>_SEARCH +(%FIRST+ /%ALL+)\n        +\nCMD:   ( EDIT, BROWSE)\n+\n\u00acCM1    +   \u00a2FMEM1 +DSN 01===>_DSN1\n\u00acCM2    +   \u00a2FMEM2 +DSN 02===>_DSN2\n\u00acCM3    +   \u00a2FMEM3 +DSN 03===>_DSN3\n\u00acCM4    +   \u00a2FMEM4 +DSN 04===>_DSN4\n\u00acCM5    +   \u00a2FMEM5 +DSN 05===>_DSN5\n\u00acCM6    +   \u00a2FMEM6 +DSN 06===>_DSN6\n\u00acCM7    +   \u00a2FMEM7 +DSN 07===>_DSN7\n\u00acCM8    +   \u00a2FMEM8 +DSN 08===>_DSN8\n\u00acCM9    +   \u00a2FMEM9 +DSN 09===>_DSN9\n\u00acCM10   +   \u00a2FMEM10+DSN 10===>_DSN10\n\u00acCM11   +   \u00a2FMEM11+DSN 11===>_DSN11\n\u00acCM12   +   \u00a2FMEM12+DSN 12===>_DSN12\n%\n+PRESS%END KEY+TO RETURN\n)INIT\n  &CM1  = ' '\n  &CM2  = ' '\n  &CM3  = ' '\n  &CM4  = ' '\n  &CM5  = ' '\n  &CM6  = ' '\n  &CM7  = ' '\n  &CM8  = ' '\n  &CM9  = ' '\n  &CM10 = ' '\n  &CM11 = ' '\n  &CM12 = ' '\n  &WKDSN = ' '\n  &WKCMD = ' '\n  &HAVECMD = ' '\n)PROC\n VER(&SEARCH,LIST,FIRST,ALL)\n VER(&DSN1,NB)\n IF (&CM1  \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN1\n    &WKCMD = &CM1\n IF (&CM2  \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN2\n    &WKCMD = &CM2\n IF (&CM3  \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN3\n    &WKCMD = &CM3\n IF (&CM4  \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN4\n    &WKCMD = &CM4\n IF (&CM5  \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN5\n    &WKCMD = &CM5\n IF (&CM6  \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN6\n    &WKCMD = &CM6\n IF (&CM7  \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN7\n    &WKCMD = &CM7\n IF (&CM8  \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN8\n    &WKCMD = &CM8\n IF (&CM9  \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN9\n    &WKCMD = &CM9\n IF (&CM10 \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN10\n    &WKCMD = &CM10\n IF (&CM11 \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN11\n    &WKCMD = &CM11\n IF (&CM12 \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN12\n    &WKCMD = &CM12\n IF (&HAVECMD = ' ')\n    VER(&MEM,NB)\n VPUT (SEARCH,HAVECMD,WKDSN,WKCMD) PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#FMEMD02": {"ttr": 1301, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00a\\x00b\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 97, "newlines": 98, "modlines": 0, "user": "PANEL"}, "text": ")ATTR\n \u00ac TYPE(INPUT) INTENS(LOW)\n \u00a2 TYPE(OUTPUT) INTENS(HIGH)\n)BODY\n+-------------------% EDS FIND OCCURRENCE OF MEMBER PANEL +------------ --------\n%COMMAND ===>_ZCMD\n%       % SEARCHING  DDNAME \u00a2TARGETDD    +USERID -%&ZUSER    +TIME   -%&ZTIME\n        +\n+SEARCH FOR MEMBER %===>_MEM     + TYPE OF SEARCH %==>_SEARCH +(%FIRST+ /%ALL+)\n        +\nCMD:   (EDIT, BROWSE)\n+              DSN #                                               BLOCKSIZE\n\u00acCM1    + \u00a2FM1 +01===>_DSN1                                       _BS1\n\u00acCM2    + \u00a2FM2 +02===>_DSN2                                       _BS2\n\u00acCM3    + \u00a2FM3 +03===>_DSN3                                       _BS3\n\u00acCM4    + \u00a2FM4 +04===>_DSN4                                       _BS4\n\u00acCM5    + \u00a2FM5 +05===>_DSN5                                       _BS5\n\u00acCM6    + \u00a2FM6 +06===>_DSN6                                       _BS6\n\u00acCM7    + \u00a2FM7 +07===>_DSN7                                       _BS7\n\u00acCM8    + \u00a2FM8 +08===>_DSN8                                       _BS8\n\u00acCM9    + \u00a2FM9 +09===>_DSN9                                       _BS9\n\u00acCM10   + \u00a2FM10+10===>_DSN10                                      _BS10\n\u00acCM11   + \u00a2FM11+11===>_DSN11                                      _BS11\n\u00acCM12   + \u00a2FM12+12===>_DSN12                                      _BS12\n%\n+PRESS%END KEY+TO RETURN\n)INIT\n  &CM1  = ' '\n  &CM2  = ' '\n  &CM3  = ' '\n  &CM4  = ' '\n  &CM5  = ' '\n  &CM6  = ' '\n  &CM7  = ' '\n  &CM8  = ' '\n  &CM9  = ' '\n  &CM10 = ' '\n  &CM11 = ' '\n  &CM12 = ' '\n  &WKDSN = ' '\n  &WKCMD = ' '\n  &HAVECMD = ' '\n)PROC\n VER(&SEARCH,LIST,FIRST,ALL)\n VER(&DSN1,NB)\n IF (&CM1  \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN1\n    &WKCMD = &CM1\n IF (&CM2  \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN2\n    &WKCMD = &CM2\n IF (&CM3  \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN3\n    &WKCMD = &CM3\n IF (&CM4  \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN4\n    &WKCMD = &CM4\n IF (&CM5  \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN5\n    &WKCMD = &CM5\n IF (&CM6  \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN6\n    &WKCMD = &CM6\n IF (&CM7  \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN7\n    &WKCMD = &CM7\n IF (&CM8  \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN8\n    &WKCMD = &CM8\n IF (&CM9  \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN9\n    &WKCMD = &CM9\n IF (&CM10 \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN10\n    &WKCMD = &CM10\n IF (&CM11 \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN11\n    &WKCMD = &CM11\n IF (&CM12 \u00ac= ' ')\n    &HAVECMD = YES\n    &WKDSN = &DSN12\n    &WKCMD = &CM12\n IF (&HAVECMD = ' ')\n    VER(&MEM,NB)\n VPUT (SEARCH,HAVECMD,WKDSN,WKCMD) PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#INIT": {"ttr": 1304, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1b\\x00\\x10\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 27, "newlines": 16, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ INIT      MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%INIT+MACRO IS USED TO SET UP DEFAULT (INITIAL) PARAMETERS FOR\n+YOUR EDIT SESSION\n+TYPE%INIT+IN%INITIAL MACRO+FIELD OF THE PRIMARY EDIT PANEL\n%------------------------- -  EDIT - ENTRY PANEL  ------------------------------\n%COMMAND ===>_xCMD                                                             +\n%\n+ISPF LIBRARY:\n+   PROJECT%===>_PRJ1    +\n+   GROUP  %===>_LIB1    % ===>_LIB2    % ===>_LIB3    % ===>_LIB4    +\n+   TYPE   %===>_TYP1    +\n+   MEMBER %===>_MEM     +       (BLANK OR PATTERN FOR MEMBER SELECTION LIST)\n+\n+OTHER PARTITIONED OR SEQUENTIAL DATA SET:\n+   DATA SET NAME %===>_DSN\n+   VOLUME SERIAL %===>_VOL   +  (IF NOT CATALOGED)\n+\n+DATA SET PASSWORD%===>_PSWD    +(IF PASSWORD PROTECTED)\n+\n+PROFILE NAME     %===>_PROF    +(BLANK DEFAULTS TO DATA SET TYPE)\n+\n+INITIAL MACRO    %===> INIT    +LOCK      %===>_s    + (YES, NO OR NEVER)\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#INITIAL": {"ttr": 1306, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1b\\x00\\x19\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 27, "newlines": 25, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ INITIAL   MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%INITIAL+MACRO IS USED TO INITIALIZE CERTAIN DATASET TYPES WITH\n+BASIC FILL IN THE BLANK INFORMATION.\n+USE:\n+TYPE%INITIAL+ON THE COMMAND LINE\n%EDIT -- H562813.PVTLIB.TEXT(NEWMEM)\n%COMMAND ===>_RCMD                                                             +\n+***************************** TOP OF DATA *************************************\n%......\n+***************************** TOP OF DATA *************************************\n%RESULT:\n%EDIT -- H562813.PVTLIB.TEXT(NEWMEM)\n%COMMAND ===>_SCMD                                                             +\n+***************************** TOP OF DATA *************************************\n+000001 1   ENRON CORP\n+000002     P.O. BOX 1188\n+000003     1400 SMITH\n+000004     HOUSTON, TEXAS 77251-1188\n+000005     MEMORANDUM\n+000006 -           TO:\n+000007 0         FROM:  PAUL G. DAVIS\n+000008 0         DATE:  SEPTEMBER 06, 1988\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#ISPUCMB": {"ttr": 1308, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\r\\x00\\r\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "PANEL"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "#JC": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1b\\x00\\x07\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 27, "newlines": 7, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  --------------- JOBCARD (JC) MACRO  --------------------      TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE %JOBCARD (JC)+MACRO IS USED TO COPY A JOB CARD FROM THE USERS\n+ISPF PROFILE.  UNDER ISPF OPTION 0.2 THE JOB CARD(S) AT THE BOTTOM\n+OF THE PANEL WILL BE COPIED WHEN THE%JOBCARD (JC)+MACRO IS ISSUED.\n+THE JOBCARD CAN BE UPDATED USING THE ISPF OPTION 0.2, AND IT SHOULD\n+BE CHANGED TO REFLECT A VALID JOBCARD FOR THE USER.\n+\n+USE:\n+ON THE COMMAND LINE TYPE IN JC OR JOBCARD.  THE JOBCARD WILL THEN BE\n+INSERTED AT THE TOP OF THE DATASET.  IF THE JOBCARD IS DESIRED SOMEWHERE\n+OTHER THAN THE TOP OF THE DATA SET, TYPE IN \"A\" FOR AFTER OR \"B\" FOR BEFORE\n+ON THE LINE NUMBER AT THE POINT IN THE DATASET YOU WANT THE JOBCARD :\n+\n%COMMAND ===> JC\n+***************************** TOP OF DATA *************************************\n+000001  DATA LINE 1\n+000002  DATA LINE 2\n+A00003  DATA LINE 3\n+000004  DATA LINE 4\n+\n+IN THIS CASE THE JOB CARD WOULD BE INSERTED AFTER LINE 3.\n+\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#JCLBOX": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1a\\x00\\x19\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 26, "newlines": 25, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  -------------------- JCLBOX MACRO -------------------------   TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%JCLBOX+MACRO IS USED TO%\"BOX\"+DESIGNATED JCL LINES MAKING THEM\n+COMMENTS\n+USE:\n+ON THE COMMAND LINE TYPE IN%JCLBOX+AND USE THE CC OR CN RANGE COMMANDS\n+TO INDICATE THE LINES THAT YOU WANT%\"BOXED\".\n+\n%COMMAND ===> JCLBOX\n+***************************** TOP OF DATA *************************************\n+00010 //SYSOUT    DD SYSOUT=*\n+00020 //DELETE    EXEC PGM=IEFBR14\n+00030 //          DD DSN=UNWANTED.DATASET,DISP=(OLD,DELETE,DELETE)\n+00040 //STEP5     EXEC PGM=KEEPON\n%RESULT:\n+***************************** TOP OF DATA *************************************\n+00010 //SYSOUT    DD SYSOUT=*\n+00020 //**********************************************************************\n+00030 //*DELETE    EXEC PGM=IEFBR14                                          *\n+00040 //*          DD DSN=UNWANTED.DATASET,DISP=(OLD,DELETE,DELETE)          *\n+00050 //**********************************************************************\n+00060 //STEP5     EXEC PGM=KEEPON\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#JC2": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x16\\x00\\x10\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 22, "newlines": 16, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ JC2       MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%JC2+MACRO IS USED TO CREATE A JOBCARD WITH DATASET INFO IN IT\n+ON THE 0.2 OPTION JOBCARD TYPE IN (AMPERSAND)THIS.  \"THIS\" WILL BE\n+REPLACED BY THE DATASET NAME.\n+TYPE%JC2+ON THE COMMAND LINE AND INDICATE WHERE TO PLACE THE JOB CARD\n+WITH AN \"A\" OR \"B\".\n+\n%COMMAND ===> JC2\n+A**************************** TOP OF DATA *************************************\n+000001  DATA LINE 1\n+\n+RESULT:\n+\n+***************************** TOP OF DATA *************************************\n%//H562813N JOB  (AD01,E009),'DAVIS-E009-3357EB',\n%//   MSGCLASS=X,REGION=2048K,\n%//   CLASS=A,\n%//   NOTIFY=H562813       H562813.PVTLIB.SHIPPNLS(JC2)\n+000001  DATA LINE 1\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#LCASE": {"ttr": 1543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x17\\x00\\x10\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 23, "newlines": 16, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ LCASE     MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%LCASE+MACRO IS USED TO CONVERT THE ENTIRE DATASET TO LOWERCASE.\n+\n+USE:\n+TYPE%LCASE+ON THE COMMAND LINE\n+\n%COMMAND ===> LCASE A\n+***************************** TOP OF DATA *************************************\n+000001  DATA LINE 1\n+000002  DATA LINE 2\n+000003  DATA LINE 3\n+000004  DATA LINE 4\n+RESULT:\n+***************************** TOP OF DATA *************************************\n+000001  data line 1\n+000002  data line 2\n+000003  data line 3\n+000004  data line 4\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#LJUST": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1b\\x00\\x18\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 27, "newlines": 24, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  -------------------- LJUST  MACRO  -------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%LJUST+MACRO IS USED TO LEFT JUSTIFY TEXT WITHIN A DATA SET.\n+\n+USE:\n+FIRST ON THE LINE NUMBERS OF THE DATA SET INDICATE A RANGE OF THE LINES\n+TO BE \"JUSTIFIED\" , \"CC\" TO \"CC\" OR \"CNN\" (NN BEING NUMBERS).  THEN ON\n+THE COMMAND LINE TYPE IN LJUST. (SCROLLING IS NOT ALLOWED AFTER TYPING\n+IN LJUST UNTIL THE LJUST COMMAND IS COMPLETE).\n+\n%COMMAND ===> LJUST\n+***************************** TOP OF DATA *************************************\n%=BNDS> <                                                            >\n+000001          DATA LINE 1\n+CC0002               DATA LINE 2\n+CC0003                  DATA LINE 3\n+\n+RESULT:\n+***************************** TOP OF DATA *************************************\n%=BNDS> <                                                            >\n+000001          DATA LINE 1\n+000002 DATA LINE 2\n+000003 DATA LINE 3\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#MACHELP": {"ttr": 1547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x19\\x00\\x17\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 25, "newlines": 23, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ MACHELP   MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%MACHELP+MACRO IS USED TO SHOW THE HELP PANEL FOR AN INDIVIDUAL MACRO\n+WHEN NEEDED.\n+\n+USE:\n+TYPE%MACHELP+ON THE COMMAND LINE FOLLOWED BY THE MACRO FOR WHICH HELP\n+IS DESIRED\n+\n%COMMAND ===> MACHELP MACHELP\n+***************************** TOP OF DATA *************************************\n+RESULT:\n%EDITMAC  ------------------ MACHELP   MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_QCMD                                                             +\n+\n+THE%MACHELP+MACRO IS USED TO SHOW THE HELP PANEL FOR AN INDIVIDUAL MACRO\n+WHEN NEEDED.\n+\n+USE:\n+TYPE%MACHELP+ON THE COMMAND LINE FOLLOWED BY THE MACRO FOR WHICH HELP\n+IS DESIRED\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#MACLIST": {"ttr": 1549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x11\\x00\\x0f\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 17, "newlines": 15, "modlines": 0, "user": "PANEL"}, "text": ")ATTR\n @ TYPE(OUTPUT) INTENS(LOW)\n)BODY\n%----ISPF EDIT MACROS AVAILABLE ON THE CURRENT OPERATING SYSTEM ----------------\n%COMMAND INPUT ===>_ZCMD                                      %SCROLL ===>_SCRL+\n+*******************************************************************************\n)MODEL\n_Z @Z        @Z\n+-------------------------------------------------------------------------------\n)INIT\n .HELP=UTMTUT\n &VARS='(OPTN MACNAME MACDESC)'\n &ZCMD=''\n &SCRL=CSR\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#MEMLIST": {"ttr": 1551, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x13\\x00\\x10\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 19, "newlines": 16, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ MEMLIST   MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%MEMLIST+MACRO IS USED TO LIST THE M,EMBERS OF THE CURRENT PDS BEING\n+EDITED TO THE SCREEN.  A RANGE  MAY BE USED (MEMLIST A L) WOULD LIST\n+ALL MEMBERS STARTING WITH \"A\" TO INCLUDE ALL MEMBERS STARTING WITH \"L\".\n+THE RANGE MAY INCLUDE UP TO EIGHT CHARACTERS ON BOTH ENDS (MEMLIST  ABC BEFO)\n+USE:\n+TYPE%MEMLIST+ON THE COMMAND LINE\n+\n%COMMAND ===> MEMLIST\n+RESULT:\n%LIST OF CURRENT MEMBERS OF:'THIS.PDS'\n%APPLY      APPLYCK   BROWSEIT   LISTPDS1   LISTPDS2   LOOK\n+\n%END OF SELECTED MEMBER LIST\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#MODEL": {"ttr": 1553, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x12\\x00\\x10\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 18, "newlines": 16, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ XXXXXXXX  MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%XXXXXXXX+MACRO IS USED TO\n+\n+USE:\n+TYPE%XXXXXXXX+ON THE COMMAND LINE\n+\n%COMMAND ===> XXXXXXXX A\n+***************************** TOP OF DATA *************************************\n+000001  DATA LINE 1\n+\n+RESULT:\n+\n+000001  DATA LINE 1\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#MOVECOL": {"ttr": 1555, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x0e\\x00\\x0e\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "PANEL"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "#MSTATS": {"ttr": 1557, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x15\\x00\\x13\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 21, "newlines": 19, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ MSTATS    MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%MSTATS+MACRO IS USED TO DISPLAY MEMBER STATISTICS IN THE DATASET\n+BEING EDITED.\n+\n+USE:\n+TYPE%MSTATS+ON THE COMMAND LINE AND USE THE \"A\" OR \"B\" RANGE COMMAND TO\n+INDICATE THE DESTINATION.\n+\n%COMMAND ===> MSTATS\n+A**************************** TOP OF DATA *************************************\n+000010  DATA LINE 1\n%RESULT:\n+***************************** TOP OF DATA *************************************\n+000010% NAME             VV.MM  CREATED     CHANGED     SIZE INIT   MOD   ID +\n+000020%THISMEM           01.00 88/08/31 88/08/31 22:08    19   19     0  &ZUSER\n+000030  DATA LINE 1\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#NEWLINE": {"ttr": 1559, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1a\\x00\\x1a\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ NEWLINES  MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%NEWLINES+MACRO IS USED TO PLACE A NEW LINE(S) IN THE DATASET BEING\n+EDITED AT THE POINT DESIGINATED BY THE \"A\" OR \"B\" RANGE COMMAND.\n+\n+USE:\n+TYPE%NEWLINES+ON THE COMMAND LINE FOLLOWED BY THE AMOUNT OF NEW LINES\nTO INSERT AND THEN PLACE AN \"A \" OR \"B\" ON THE TARGET LINE NUMBER.\n+\n%COMMAND ===> NEWLINES 2\n+***************************** TOP OF DATA *************************************\n+000001  1I1JLK1LLS899--SA22PP;;777SSKLL';'244677822--099896654412233KK2\n%A+0002  1I1JLK1000899--SA2222;;7RRSSKLL';'987677822--099896654412233KK2\n+000003  1R1JRKRLLS879--S822PP;;447SSWLL';'244677822--099896654412233KK2\n+\n%RESULT:\n+***************************** TOP OF DATA *************************************\n+000001  1I1JLK1LLS899--SA22PP;;777SSKLL';'244677822--099896654412233KK2\n+000002  1I1JLK1000899--SA2222;;7RRSSKLL';'987677822--099896654412233KK2\n+000003\n+000004\n+000005  1R1JRKRLLS879--S822PP;;447SSWLL';'244677822--099896654412233KK2\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#ONLY": {"ttr": 1561, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1a\\x00\\x10\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 26, "newlines": 16, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------  ONLY MACRO  ------------------------      TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE %ONLY+MACRO IS USED TO FIND \"ONLY\" THE DATA INDICATED IN THE PARM.\n+WHEN \"ONLY PARM\" IS ISSUED ALL DATA LINES IN THE DATA SET ARE EXCLUDED\n+AND THE \"PARM\" IS SEARCHED FOR.  IF \"PARM\" IS FOUND ONLY THE LINES\n+CONTAINING PARM ARE LISTED.\n+\n+USE:\n+ON THE COMMAND LINE TYPE IN ONLY AND A PARM:\n+\n%COMMAND ===> ONLY DAY                                                         +\n+\n+RESULT: ALL LINES IN THE DATA CONTAINING \"DAY\" WOULD BE LISTED.\n+\n+***************************** TOP OF DATA *************************************\n% - - - - - - - - - - - - - - - - - - - - - - - - - - - 15 LINE(S) NOT DISPLAYED\n+000160  TODAY IS IMPORTANT\n% - - - - - - - - - - - - - - - - - - - - - - - - - - -  5 LINE(S) NOT DISPLAYED\n+000210  WE FOUND IT YESTERDAY\n% - - - - - - - - - - - - - - - - - - - - - - - - - - - 22 LINE(S) NOT DISPLAYED\n+000440  ON THE LAST DAY OF THE WEEK.\n% - - - - - - - - - - - - - - - - - - - - - - - - - - - 99 LINE(S) NOT DISPLAYED\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#PASTE": {"ttr": 1563, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x14\\x00\\x13\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 20, "newlines": 19, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  --------------- PASTE MACRO INFORMATION ------------------    TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+\n      ISPF/PDF EDIT MACRO TO WRITE LINES FROM THE USER PROFILE POOL\n      INTO THE CURRENT FILE. THIS MACRO IS USED IN CONJUNCTION WITH\n      THE CUT MACRO.\n\n      TO RUN:\n       ENTER PASTE ON THE COMMAND LINE AND USE THE%A+OR%B+LINE\n       COMMAND TO SPECIFY WHERE THE LINES ARE TO BE PASTED.\n\n\n       A LEVEL NUMBER MAY BE USED TO SEPARATE DIFFERENT LEVELS OF\n       A CUT.\n       IF NO LEVEL NUMBER IS FOUND LEVEL%1+IS USED.\n\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#PBOX": {"ttr": 1565, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1b\\x00\\x10\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 27, "newlines": 16, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ PBOX      MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%PBOX+MACRO IS USED TO DRAW A FLOWCHART TYPE BOX IN THE DATASET TEXT\n+WHERE THE CURSOR IS PLACED\n+USE:\n+TYPE%PBOX+ON THE COMMAND LINE AND MOVE THE CURSOR TO THE DESIRED PLACE\n+IN THE TEXT\n\n%COMMAND ===> PBOX\n+***************************** TOP OF DATA *************************************\n+000001\n+000002                                  %-+ S=== CURSOR\n RESULT:\n+***************************** TOP OF DATA *************************************\n+000001\n+000002                                   -----------\n+000003                                   |         |\n+000004                                   |         |\n+000005                                   |         |\n+000006                                   -----------\n+000007                                        |\n+000008\n+000009\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#PFCAN": {"ttr": 1567, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\r\\x00\\x10\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 13, "newlines": 16, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ PFCAN     MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%PFCAN+MACRO IS USED TO CANCEL PFKEYS SETUP BY PFSET MACRO\n+\n+USE:\n+TYPE%PFCAN+ON THE COMMAND LINE\n+\n%COMMAND ===> PFCAN\n+***************************** TOP OF DATA *************************************\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#PFSET": {"ttr": 1569, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x11\\x00\\x0f\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 17, "newlines": 15, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ PFSET     MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%PFSET+MACRO IS USED TO SET UP PFKEYS FOR SPECIAL USES.\n+AN OPTIONAL PARM CAN POINT TO A SPECIAL EDITMACRO TO SET THE VALUE FOR\n+APPLICATIONS OFTEN USING SPECIAL PFKEYS.  THE MACRO CONTAINS A HARD\n+CODED SET OF PFK10 = PBOX.  THIS MAY BE REMOVED, AND SHOULD AFTER\n+TRYING IT.  READ THE COMMENTS INSIDE THE PFSET MACRO FOR MORE HELP.\n+\n+USE:\n+TYPE%PFSET+ON THE COMMAND LINE\n+\n%COMMAND ===> PFSET\n+***************************** TOP OF DATA *************************************\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#PRTIT": {"ttr": 1571, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x17\\x00\\x15\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 23, "newlines": 21, "modlines": 0, "user": "PANEL"}, "text": "EDITMAC ---------------------- PRTIT     MACRO -------------------------TUTORIAL\n+\n+     THE PRTIT MACRO WILL INVOKE VPSPRINT TO PRINT THE DATASET YOU ARE\n+     EDITING.\n+\n+\n%USE:\n+\n+           ENTER%PRTIT+ ON  THE  EDIT  COMMAND  LINE  WHEN YOU HAVE\n+           COMPLETED EDITING THE  DATASET.   YOU  CAN  SUPPLY UP TO\n+           FOUR (4) FURTHER VPSPRINT OPTIONS. THE FIST OPTION MUST\n+           BE THE TARGET PRINTER.\n+\n+           ALL VPSPRINT SUBCOMMANDS ARE SUPPORTED, BUT ONLY 4.\n+\n+\n%EXAMPLE:+\n+\n+ COMMAND ===> PRTIT PRT2 FCB(P301) NOHEADER ASC\n+\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#QCREATE": {"ttr": 1573, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x10\\x00\\x0e\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 16, "newlines": 14, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ QCREATE   MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%QCREATE+MACRO IS USED TO CREATE A MEMBER WITHIN THE CURRENT PDS.\n+QCREATE COPIES THE ENTIRE MEMBER IN EDIT AT THE TIME, RANGE\n+COMMANDS ARE NOT NEEDED (THUS THE QUICK).\n+\n+USE:\n+TYPE%QCREATE+ON THE COMMAND LINE FOLLOWED BY THE MEMBER NAME\n+TO CREATE.\n+\n%COMMAND ===> QCREATE NEWMEMBR\n+***************************** TOP OF DATA *************************************\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#QREP": {"ttr": 1794, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x10\\x00\\x0e\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 16, "newlines": 14, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ QREP      MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%QREP+MACRO IS USED TO REPLACE (OR CREATE) A MEMBER WITHIN THE\n+CURRENT PDS.  QREP COPIES THE ENTIRE MEMBER IN EDIT AT THE TIME, RANGE\n+COMMANDS ARE NOT NEEDED (THUS THE QUICK).\n+\n+USE:\n+TYPE%QREP+ON THE COMMAND LINE FOLLOWED BY THE MEMBER NAME\n+TO (REPLACE/CREATE)\n+\n%COMMAND ===> QREP NEWMEMBR\n+***************************** TOP OF DATA *************************************\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#RCOLDEL": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x13\\x00\\x11\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 19, "newlines": 17, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ RCOLDEL   MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%RCOLDEL+MACRO IS USED TO DELETE ALL LINES CREATED BY RCOLS MACRO.\n+\n+USE:\n+TYPE%RCOLDEL+ON THE COMMAND LINE.\n+\n%COMMAND ===> RCOLDEL\n+***************************** TOP OF DATA *************************************\n%000001 ----0----1----1----2----2----3----3----4----4----5----5----6-----6----7-\n%000002 ----5----0----5----0----5----0----5----0----5----0----5----0-----5----0-\n+        DATA LINE 1\n%RESULT:\n+***************************** TOP OF DATA *************************************\n+        DATA LINE 1\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#RCOLS": {"ttr": 1798, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x15\\x00\\x13\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 21, "newlines": 19, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ RCOLS     MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%RCOLS+MACRO IS USED TO PLACE A MORE READABLE RULE IN THE DATASET\n+BEING EDITED  (IT IS NOT AUTOMATICALLY REMOVED WHEN YOU EXIT)\n+\n+USE:\n+TYPE%RCOLS+ON THE COMMAND LINE AND USE THE \"A\" OR \"B\" RANGE COMMAND TO\n+INDICATE THE DESTINATION. LINES NEED TO BE DELETED WHEN NOT NEEDED.\n+USE RCOLDEL MACRO.\n%COMMAND ===> RCOLS\n+A**************************** TOP OF DATA *************************************\n+        DATA LINE 1\n%RESULT:\n+***************************** TOP OF DATA *************************************\n%000001 ----0----1----1----2----2----3----3----4----4----5----5----6-----6----7-\n%000002 ----5----0----5----0----5----0----5----0----5----0----5----0-----5----0-\n+        DATA LINE 1\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#REPOTHE": {"ttr": 1800, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x15\\x00\\x0e\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 21, "newlines": 14, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ REPOTHER  MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%REPOTHER+MACRO IS USED TO CREATE/REPLACE  A DATASET OR PDS MEMBER\n+OTHER THAN THE CURRENT PDS BEING EDITED. REPOTHER MUST BE USED FROM\n+WITHIN A PDS.\n%RESTRICTION: THE IBM \"COPY\" MODULE (IKJEBCY1) MUST BE IN THE LINKLIST\n%FOR REPOTHER TO WORK.\n+REPOTHER COPIES THE ENTIRE MEMBER IN EDIT AT THE TIME, RANGE\n+COMMANDS ARE NOT NEEDED, AND NO OTHER PANELS ARE NEEDED TO IDENTIFY\n+THE TARGET DATASET.\n+\n+USE:\n+TYPE%REPOTHER+ON THE COMMAND LINE FOLLOWED BY THE TARGET NAME\n+TO CREATE/REPLACE.  (THIS COMMAND WILL CREATE A NEW DATASET IF NEEDED)\n+\n%COMMAND ===> REPOTHER 'THE.TARGET.DATASET'\n+***************************** TOP OF DATA *************************************\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#RJUST": {"ttr": 1802, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1a\\x00\\x18\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 26, "newlines": 24, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  -------------------- RJUST  MACRO  -------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%RJUST+MACRO IS USED TO RIGHT JUSTIFY TEXT WITHIN A DATA SET.\n+\n+USE:\n+FIRST ON THE LINE NUMBERS OF THE DATA SET INDICATE A RANGE OF THE LINES\n+TO BE \"JUSTIFIED\" , \"CC\" TO \"CC\" OR \"CNN\" (NN BEING NUMBERS).  THEN ON\n+THE COMMAND LINE TYPE IN RJUST. (SCROLLING IS NOT ALLOWED AFTER TYPING\n+IN RJUST UNTIL THE RJUST COMMAND IS COMPLETE).\n+\n%COMMAND ===> RJUST\n+***************************** TOP OF DATA *************************************\n%=BNDS> <                                                            >\n+000001          DATA LINE 1\n+CC0002               DATA LINE 2\n+CC0003                  DATA LINE 3\n+\n%RESULT:\n%=BNDS> <                                                            >\n+000001          DATA LINE 1\n+000002                                                    DATA LINE 2\n+000003                                                    DATA LINE 3\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#RNAME": {"ttr": 1804, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x0e\\x00\\x0c\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 14, "newlines": 12, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ RNAME     MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%RNAME+MACRO IS USED TO RENAME A MEMBER OF THE CURRENT PDS. YOU WILL BE\n+PROMPTED TO INSURE YOU REALLY WANT TO RENAME THE MEMBER.\n+AN OPTIONAL SECOND PARAMETER OF \"NO\" WILL RENAME THE MEMBER WITHOUT PROMPTING.\n+USE:\n+TYPE%RNAME+ON THE COMMAND LINE FOLLOWED BY THE MEMBER NAME\n+\n%COMMAND ===> RNAME MEMBER\n+***************************** TOP OF DATA *************************************\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#S": {"ttr": 1806, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x16\\x00\\x14\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 22, "newlines": 20, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ S         MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%S+MACRO IS USED TO EDIT ANOTHER MEMBER OF THE CURRENT PDS BEING\n+EDITED (THE MEMBER BEING EDITED MAY NOT BE EDITED WITH THIS COMMAND)\n+\n+USE:\n+TYPE%S+ON THE COMMAND LINE FOLLOWED BY THE MEMBER NAME TO EDIT\n+\n%COMMAND ===> S JCL1\n+***************************** TOP OF DATA *************************************\n%RESULT:\n%EDIT -- CURRENT.DATASET(JCL1)\n+***************************** TOP OF DATA *************************************\n //H562813K JOB  (AD01,E009),'DAVIS-E009-3357EB',                        0001003\n //   MSGCLASS=X,REGION=2048K,                                           0002003\n //   CLASS=A,                                                           0002103\n //   NOTIFY=H562813                                                     0002203\n //STEP4  EXEC PGM=IEBCOPY,TIME=1440                                     0029003\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#SEPLINE": {"ttr": 1808, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1b\\x00\\x19\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 27, "newlines": 25, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ SEPLINE   MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%SEPLINE+MACRO IS USED TO PLACE SEPARATION LINES IN THE DATASET BEING\n+EDITED.\n+\n+USE:\n+TYPE%SEPLINE+ON THE COMMAND LINE\n+\n%COMMAND ===> SEPLINE\n+***************************** TOP OF DATA *************************************\n+000001  1I1JLK1LLS899--SA22PP;;777SSKLL';'244677822--099896654412233KK2\n+000002  1I1JLK1000899--SA2222;;7RRSSKLL';'987677822--099896654412233KK2\n+000003  1R1JRKRLLS879--S822PP;;447SSWLL';'244677822--099896654412233KK2\n+\n%RESULT:\n+***************************** TOP OF DATA *************************************\n--------------------------------------------------------------------------------\n+000001  1I1JLK1LLS899--SA22PP;;777SSKLL';'244677822--099896654412233KK2\n--------------------------------------------------------------------------------\n+000002  1I1JLK1000899--SA2222;;7RRSSKLL';'987677822--099896654412233KK2\n--------------------------------------------------------------------------------\n+000003  1R1JRKRLLS879--S822PP;;447SSWLL';'244677822--099896654412233KK2\n--------------------------------------------------------------------------------\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#SHOWCT2": {"ttr": 1810, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x19\\x00\\x17\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 25, "newlines": 23, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ SHOWCUT2  MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%SHOWCUT2+MACRO IS USED TO SHOW THE FIRST LINE OF ALL \"CUT\" LINES.  .\n+AN OPTIONAL PARM OF TERSE WILL PREVENT DISPLAY FOR CUT LEVELS WITH\n+NO LINES CUT.\n+\n+USE:\n+TYPE%SHOWCUT2+ON THE COMMAND LINE AND OPTIONAL TERSE PARM.\n+\n%COMMAND ===> SHOWCUT2 {TERSE}\n+***************************** TOP OF DATA *************************************\n%RESULT:\n%==MSG>\n%==MSG> CUT LEVEL 1 HAS 4 LINE(S)\n%==MSG>          DATA LINE 1\n%==MSG> CUT LEVEL 2 HAS 9 LINE(S)\n%==MSG>          DATA LINE 1\n%==MSG> NO LINE(S) CUT FOR LEVEL 3\n%==MSG> CUT LEVEL 4 HAS 9 LINE(S)\n%==MSG>          DATA LINE 1\n%==MSG> NO LINE(S) CUT FOR LEVEL 5\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#SHOWCUT": {"ttr": 1812, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x13\\x00\\x11\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 19, "newlines": 17, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ SHOWCUT   MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%SHOWCUT+MACRO IS USED TO SHOW CUT DATA IN THE VARIOUS LEVELS OF CUT.\n+\n+USE:\n+TYPE%SHOWCUT+ON THE COMMAND LINE AND AN OPTIONAL LEVEL NUMBER.\n+\n%COMMAND ===> SHOWCUT 2\n+***************************** TOP OF DATA *************************************\n%RESULT:\n%CUT LEVEL 2 HAS 4 LINE(S)\n         DATA LINE 1\n         DATA LINE 2\n         DATA LINE 3\n         DATA LINE 4\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#SHOWDCB": {"ttr": 1814, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x12\\x00\\x10\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 18, "newlines": 16, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ SHOWDCB   MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%SHOWDCB+MACRO IS USED TO SHOW THE DCB OF THE DATASET BEING EDITED.\n+\n+USE:\n+TYPE%SHOWDCB+ON THE COMMAND LINE\n+\n%COMMAND ===> SHOWDCB\n+***************************** TOP OF DATA *************************************\n+000001  DATA LINE\n+\n%RESULT:\n%DCB=(LRECL=80,BLKSIZE=6160,RECFM=FB,DSORG=PO)\n+000001  DATA LINE 1\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#SHOWFLO": {"ttr": 1816, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x0e\\x00\\x0c\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 14, "newlines": 12, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ SHOWFLOW  MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%SHOWFLOW+MACRO IS USED TO SHOW THE FLOW OF DECISION LOGIC IN A CLIST OR\n+PL/1 PROGRAM.\n+\n+USE:\n+TYPE%SHOWFLOW+ON THE COMMAND LINE WHILE EDITING THE CLIST OR PL/1 PROGRAM.\n+\n%COMMAND ===> SHOWFLOW\n+***************************** TOP OF DATA *************************************\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#SHOWMAC": {"ttr": 1818, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x14\\x00\\x0c\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 20, "newlines": 12, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ SHOWMACS  MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%SHOWMACS+MACRO IS USED TO SHOW THE VARIOUS HELP PANELS FOR THE EDIT\n+MACROS ONE AT A TIME.\n+\n+USE OF THE UP AND DOWN SCROLL KEYS MAY BE USED TO MOVE UP AND DOWN WHILE\n+VIEWING THE VARIOUS PANELS. A NUMERIC AMOUNT ON THE COMMAND LINE AND THEN\n+PRESSING OF THE UP AND DOWN KEY WILL MOVE AHEAD OR BACK BY THAT MANY PANELS.\n+\n%PFKEY 3+OR%PFKEY 15+WILL TERMINATE THE SHOWMACS MACRO.\n+\n+USE:\n+TYPE%SHOWMACS+ON THE COMMAND LINE\n+\n%COMMAND ===> SHOWMACS\n+***************************** TOP OF DATA *************************************\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#SLINE": {"ttr": 1820, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x18\\x00\\x16\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 24, "newlines": 22, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ SLINE     MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%SLINE+MACRO IS USED TO PLACE A SEPARATION LINE IN THE DATASET BEING\n+EDITED AT THE POINT DESIGINATED BY THE \"A\" OR \"B\" RANGE COMMAND.\n+\n+USE:\n+TYPE%SLINE+ON THE COMMAND LINE AND AN \"A\" OR \"B\" ON THE TARGET LINE NUMBER.\n+\n%COMMAND ===> SLINE\n+***************************** TOP OF DATA *************************************\n+000001  1I1JLK1LLS899--SA22PP;;777SSKLL';'244677822--099896654412233KK2\n+A00002  1I1JLK1000899--SA2222;;7RRSSKLL';'987677822--099896654412233KK2\n+000003  1R1JRKRLLS879--S822PP;;447SSWLL';'244677822--099896654412233KK2\n+\n%RESULT:\n+***************************** TOP OF DATA *************************************\n+000001  1I1JLK1LLS899--SA22PP;;777SSKLL';'244677822--099896654412233KK2\n+000002  1I1JLK1000899--SA2222;;7RRSSKLL';'987677822--099896654412233KK2\n%==MSGS>------------------------------------------------------------------------\n+000003  1R1JRKRLLS879--S822PP;;447SSWLL';'244677822--099896654412233KK2\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#SORTDUP": {"ttr": 1822, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x12\\x00\\x10\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 18, "newlines": 16, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ SORTDUPS  MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%SORTDUPS+MACRO IS USED TO SORT THE CURRENT DATASET AND FIND AND/OR\n+DELETE THE DUPLICATE RECORDS. %SORTDUPS+DEFAULTS TO THE BOUNDS SETTINGS\n+OF DATASET. MATCHES ON SUBFIELDS OF THE RECORDS CAN BE MADE BY INDICATING\n+THE STARTING AND ENDING COLUMN WHEN ENTERING THE SORTDUPS MACRO. OPTIONAL\n+DISPOSITION OF THE OUTPUT MAY BE INDICATED.  DEFAULT DISPOSITION IS TO\n+SHOW ALL THE DUPES.  TO UNDO THE RESULTS OF THE SORTDUPS MACRO CANCEL\n+THE EDIT SESSION WITHOUT SAVING.\n+\n+PARAMETERS ARE POSITIONAL AND OPTIONAL\n+\n%COMMAND ===> SORTDUPS  {STARTCOL} {ENDCOL} {DELDUPS/SHOWDUPS/SHODUPS} {DEBUG}\n+***************************** TOP OF DATA *************************************\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#ST": {"ttr": 1824, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1a\\x00\\x19\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 26, "newlines": 25, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ SUPRTYPE  MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n\n+                  W   W EEEEE L      CCCC OOOOO M   M EEEEE\n                   W   W E     L     C     O   O MM MM E\n                   W W W EEEE  L     C     O   O M M M EEEE\n                   WW WW E     L     C     O   O M   M E\n                   W   W EEEEE LLLLL  CCCC OOOOO M   M EEEEE\n\n                                  TTTTT OOOOO\n                                    T   O   O\n                                    T   O   O\n                                    T   O   O\n                                    T   OOOOO\n\n%          SSSS U   U PPPP  EEEEE RRRR        TTTTT Y   Y PPPP  EEEEE\n          S     U   U P   P E     R   R         T    Y Y  P   P E\n           SSS  U   U PPPP  EEEE  RRRR  -----   T     Y   PPPP  EEEE\n              S U   U P     E     R  R          T     Y   P     E\n          SSSS   UUU  P     EEEEE R   R         T     Y   P     EEEEE\n\n\n+                 P R E S S   E N T E R  T O  C O N T I N U E\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#STAMP": {"ttr": 1826, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x17\\x00\\x15\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 23, "newlines": 21, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ STAMP     MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%STAMP+MACRO IS USED TO \"STAMP\" INFORMATION INTO A DATASET.\n+\n+USE:\n+TYPE%STAMP+ON THE COMMAND LINE AND PLACE AN \"A\" OR \"B\" RANGE COMMAND ON\n+THE DESIRED TARGET LINENUMBER.\n+\n%COMMAND ===> STAMP\n+***************************** TOP OF DATA *************************************\n+000001  ISREDIT MACRO\n+\n%RESULT:\n+***************************** TOP OF DATA *************************************\n+000001  ISREDIT MACRO\n+000002                     /* ANOTHER FINE EDIT MACRO */\n+000003                         /* BROUGHT TO YOU */\n+000004                    /* BY YOUR TECHNICAL SUPPORT */\n+000005                              /* STAFF */\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#ST2": {"ttr": 1828, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1b\\x00\\x18\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 27, "newlines": 24, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  --------------- ST SUPRTYPE MACRO --------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%ST+MACRO IS USED TO CREATE MULTIPLE BLOCK CHARACTERS IN TEXT.\n+\n+USE:\n+TYPE%ST+ON THE COMMAND LINE, FOLLOWED BY A STRING OF CHARACTERS.\n+THAT YOU WISH TO HAVE IN BLOCK LETTERS IN YOUR TEXT.  THEN PLACE THE CURSOR\n+ONE THE LINE WHERE THE TEXT IS TO BE INSERTED.  IF THERE ARE 13 CHARACTERS OR\n+LESS THEY WILL BE CREATED STARTING AT THE LINE WHERE THE CURSOR IS. IF THE\n+CURSOR IS NOT WITHIN THE TEXT THE %SUPER-TYPE+CHARACTERS WILL BEGIN ON THE\n+FIRST LINE, AN ATTEMPT WILL BE MADE TO CENTER THE TEXT IF ONLY ONE LINE\n+IS CREATED.\n+\n+IF MORE THAN 13 CHARACTERS ARE TYPED, THE FIRST 13 (INCLUDING SPACES) WILL\n+BE ON THE FIRST INDICATED LINE, A LINE IS SKIPPED (CHARACTER REQUIRE 5 LINES)\n+AND THE NEXT GROUP IS CREATED.  IF MORE THAN 26 CHARACTERS ARE TYPED,\n+THE NEXT 13 ARE TYPED AFTER SKIPPING ANOTHER LINE. TO TYPE A SINGLE QUESTION\n+MARK \"?\", ENTER \"ST ??\" AS IN MOST OF THESE MACROS A SINGLE\"?\" DISPLAYS THE\n+HELP PANEL.\n+\n%COMMAND ===> ST HI THERE\n+***************************** TOP OF DATA *************************************\n%                 P R E S S  E N T E R  T O  C O N T I N U E\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#ST3": {"ttr": 1830, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x18\\x00\\x18\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ SUPRTYPE  MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n\n\n+               H   H  III     TTTTT H   H EEEEE RRRR  EEEEE\n                H   H   I        T   H   H E     R   R E\n                HHHHH   I        T   HHHHH EEEE  RRRR  EEEE\n                H   H   I        T   H   H E     R  R  E\n                H   H  III       T   H   H EEEEE R   R EEEEE\n\n\n\n%ANOTHER EXAMPLE:\n%COMMAND ===> ST ABCFEFGHIKJLMNOPQRSTUVWXYZ0123456789#@$\n+***************************** TOP OF DATA *************************************\n\n\n\n\n\n%                 P R E S S  E N T E R  T O  C O N T I N U E\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#ST4": {"ttr": 2050, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00!\\x00\\x18\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 33, "newlines": 24, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ SUPRTYPE  MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n\n AAA  BBBB   CCCC DDDD  EEEEE FFFFF  GGGG H   H  III    JJJ K  K  L     M   M\nA   A B   B C     D   D E     F     G     H   H   I      J  K K   L     MM MM\nAAAAA BBBB  C     D   D EEEE  FFFF  G  GG HHHHH   I      J  KK    L     M M M\nA   A B   B C     D   D E     F     G   G H   H   I   J  J  K K   L     M   M\nA   A BBBB   CCCC DDDD  EEEEE F      GGGG H   H  III   JJ   K  K  LLLLL M   M\n\nN   N OOOOO PPPP   QQQ  RRRR   SSSS TTTTT U   U V   V W   W X   X Y   Y X   X\nNN  N O   O P   P Q   Q R   R S       T   U   U V   V W   W  X X   Y Y   X X\nN N N O   O PPPP  Q   Q RRRR   SSS    T   U   U V   V W W W   X     Y     X\nN  NN O   O P     Q \u00a2\u00a2Q R  R      S   T   U   U  V V  WW WW  X X    Y    X X\nN   N OOOOO P      QQ\u00a2\u00a2 R   R SSSS    T    UUU    V   W   W X   X   Y   X   X\n\n 000    1   2222  3333  4  4  55555  666  77777  888   999  @@@@@  # #   $|$$\n0   0  11       2     3 4  4  5     6        7  8   8 9   9 @   @ ##### $ |\n0   0   1      2   333  44444 5555  6666    7    888   9999 @ @ @  # #   $|$\n0   0   1     2       3    4      5 6   6   7   8   8     9 @ @ @ #####   | $\n 000   111  22222 3333     4  5555   666    7    888   999  @@@@   # #  $$|$\n\n\n%                 P R E S S  E N T E R  T O  C O N T I N U E\n)PROC\n&KEY = .PFKEY\n)END\n\n\n\n\n\n\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#ST5": {"ttr": 2052, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x18\\x00\\x16\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 24, "newlines": 22, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  --------------- ST SUPRTYPE MACRO --------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+TO TYPE VERY LONG STRINGS, AS MANY AS YOU CAN GET ON A LINE OF DATA,\n+ENTER THE STRING OF DATA ON A LINE WITHIN THE TEXT. TYPE %ST+ON THE\n+COMMAND LINE, MOVE THE CURSOR TO THE LINE WITH THE STRING TO BE TYPED\n+ON IT, PRESS ENTER.\n+\n+THE ENTIRE LINE WILL BE READ INTO SUPER-TYPE AND UP TO 13 CHARACTERS WILL BE\n+TYPED ON A LINE.  SPACING IS UP TO YOU. YOU MUST PAN YOUR TEXT SO THAT IT\n+APPEARS THE WAY YOU WANT IT.\n+\n+THE LINE WITH THE TEXT WILL BE PRESERVED.  TO REDO A LONG STRING OF TEXT, USE\n+THE%CUT+MACRO TO SAVE YOUR LINE WITH THE TEXT.  USE THE %WIPEIT+MACRO TO GET\n+A CLEAN TARGET AREA.  RESTORE YOUR TEXT LINE WITH THE%PASTE+MACRO. MAKE\n+THE NEEDED CORRECTIONS, AND TRY THE ABOVE EXERCISE AGAIN.\n+\n+\n+\n+NOTE: THE CUT, PASTE, AND WIPEIT MACROS ARE PART OF THE PDS WHERE THE\n%ST+MACRO ORIGINATED.\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#SUM": {"ttr": 2054, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1b\\x00\\x19\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 27, "newlines": 25, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------  SUM MACRO   ------------------------      TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE %SUM+MACRO IS USED TO ADD  COLUMNS OF NUMBERS.  SUM CAN HANDLE\n+NUMBERS WITH UP TO 3 DECIMAL PLACES.  NUMBERS MUST BE ALIGNED WITH EQUAL\n+NUMBER OF DECIMAL PLACES.  ONLY VALID NUMERIC DATA WILL BE ADDED.  IF A\n+FIELD HAS A SHORTER DECIMAL THAN THE OTHERS, ERRORS WILL RESULT.  SUM\n+CAN HANDLE X AND NX TYPE DATALINES THE DEFAULT IS ALL.  IF YOU WISH TO\n+EXCLUDE LINES, USE THE NX PARM, IF YOU WANT TO SUM ONLY EXCLUDED LINES\n+USE THE X PARM. THE STARTING AND ENDING COLUMN OF THE DATA MUST BE\n+IDENTIFIED BY ENTERING STARTING AND ENDING COLUMN.\n+USE:\n+ON THE COMMAND LINE TYPE IN SUM PARM STARTING ENDING\n+\n%COMMAND ===> SUM NX 27 35                                                     +\n+***************************** TOP OF DATA *************************************\n%----0----1----1----2----2----3----3----4----4----5----5----6----6----7----7----\n%----5----0----5----0----5----0----5----0----5----0----5----0----5----0----5----\n+                          1,2345.08\n+                             345.25\n%RESULT:\n+***************************** TOP OF DATA *************************************\n+SUM OF NUMBERS IN COLUMNS 27 TO 35 IS 12690.33\n+    PROCESSED 2 VALID AND 0 INVALID LINES\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#SUPERT": {"ttr": 2056, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1a\\x00\\x00\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 26, "newlines": 0, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ SUPRTYPE  MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n\n+                  W   W EEEEE L      CCCC OOOOO M   M EEEEE\n                   W   W E     L     C     O   O MM MM E\n                   W W W EEEE  L     C     O   O M M M EEEE\n                   WW WW E     L     C     O   O M   M E\n                   W   W EEEEE LLLLL  CCCC OOOOO M   M EEEEE\n\n                                  TTTTT OOOOO\n                                    T   O   O\n                                    T   O   O\n                                    T   O   O\n                                    T   OOOOO\n\n%          SSSS U   U PPPP  EEEEE RRRR        TTTTT Y   Y PPPP  EEEEE\n          S     U   U P   P E     R   R         T    Y Y  P   P E\n           SSS  U   U PPPP  EEEE  RRRR  -----   T     Y   PPPP  EEEE\n              S U   U P     E     R  R          T     Y   P     E\n          SSSS   UUU  P     EEEEE R   R         T     Y   P     EEEEE\n\n\n+                 P R E S S   E N T E R  T O  C O N T I N U E\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#T": {"ttr": 2058, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x15\\x00\\x13\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 21, "newlines": 19, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ T         MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%T+MACRO IS USED TO PLACE THE TIME AND DATE IN THE SHORT MESSAGE AREA OF\n+THE CURRENT EDIT PANEL.\n+\n+USE:\n+TYPE%T+ON THE COMMAND LINE\n+\n%EDIT ---- THIS.DATA.SET                                 COLUMNS 001 072\n%COMMAND ===> T                                         SCROLL ===> CSR\n+***************************** TOP OF DATA *************************************\n+\n%RESULT:\n%EDIT ---- THIS.DATA.SET                               22:32:55 08/28/88\n%COMMAND ===> T                                         SCROLL ===> CSR\n+***************************** TOP OF DATA *************************************\n+\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#TJ": {"ttr": 2060, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x19\\x00\\x19\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ TEXTJOIN  MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%TEXTJOIN+MACRO IS USED TO JOIN TEXT FROM A LINE AND THE SUCCEEDING\n+LINE.\n+USE:\n+TYPE%TEXTJOIN+ON THE COMMAND LINE AND PLACE THE CURSOR ON THE LINE\n+\n+   AN ALIAS OF%TJ+FOR THIS IS SUGGESTED, IN WHICH CASE THE COMMAND\n+   LINE ENTRY WOULD BE%TJ.+HINT A PFKEY MAY BE SET TO THE TEXTJOIN\n    OR TJ VALUE.\n+\n+POSITION WHERE  YOU WANT TO JOIN THE LINES AND PRESS ENTER.\n%COMMAND ===> TEXTJOIN\n+***************************** TOP OF DATA *************************************\n+000001  DATA LINE 1\n+                   %-+  <=== CURSOR\n+000002  DATA LINE 2\n+\n+RESULT:\n+\n+000001  DATA LINE 1 DATA LINE 2\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#TYPE": {"ttr": 2062, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1b\\x00\\x19\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 27, "newlines": 25, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  --------------------- TYPE MACRO ---------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%TYPE+MACRO IS USED TO CREATE BLOCK CHARACTERS IN TEXT.\n+\n+USE:\n+TYPE%TYPE+ON THE COMMAND LINE.  THEN TYPE A CHARACTER IN THE TEXT WHERE\n+YOU WANT THAT CHARACTER.  HINT YOU CAN SET A PFKEY TO THE VALUE OF%TYPE+AND\n+THEN ALL YOU NEED TO DO IS PRESS THE PFKEY AFTER YOU HAVE ENTERED THE\n+CHARACTER WHERE YOU WANT IT.  THE CHARACTER IN THIS DEMO IS HIGHLIGHTED\n+IT WILL NOT BE IN YOUR TEXT.\n+\n%COMMAND ===> TYPE\n+***************************** TOP OF DATA *************************************\n+000001  DATA LINE 1%A+\n+\n%RESULT:\n+***************************** TOP OF DATA *************************************\n+000001  DATA LINE 1% AAA\n+000002  DATA LINE 2%A   A\n+000003  DATA LINE 3%AAAAA\n+000004  DATA LINE 4%A   A\n+000005  DATA LINE 5%A   A\n+000006  DATA LINE 6\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#UCASE": {"ttr": 2064, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x17\\x00\\x15\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 23, "newlines": 21, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ UCASE     MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%UCASE+MACRO IS USED TO CONVERT THE ENTIRE DATASET TO UPPER-CASE.\n+\n+USE:\n+TYPE%UCASE+ON THE COMMAND LINE\n+\n%COMMAND ===> UCASE A\n+***************************** TOP OF DATA *************************************\n+000001  Data line 1\n+000002  Data line 2\n+000003  Data line 3\n+000004  Data line 4\n%RESULT:\n+***************************** TOP OF DATA *************************************\n+000001  DATA LINE 1\n+000002  DATA LINE 2\n+000003  DATA LINE 3\n+000004  DATA LINE 4\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#UNSEP": {"ttr": 2066, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1c\\x00\\x1a\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 28, "newlines": 26, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ UNSEP     MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%UNSEP+MACRO IS USED TO REMOVE SEPARATION LINES IN THE DATASET CREATED\n+BY THE SEPLINE MACRO\n+\n+USE:\n+TYPE%UNSEP+ON THE COMMAND LINE\n+\n%COMMAND ===> UNSEP\n+***************************** TOP OF DATA *************************************\n--------------------------------------------------------------------------------\n+000001  1I1JLK1LLS899--SA22PP;;777SSKLL';'244677822--099896654412233KK2\n--------------------------------------------------------------------------------\n+000002  1I1JLK1000899--SA2222;;7RRSSKLL';'987677822--099896654412233KK2\n--------------------------------------------------------------------------------\n+000003  1R1JRKRLLS879--S822PP;;447SSWLL';'244677822--099896654412233KK2\n--------------------------------------------------------------------------------\n%RESULT:\n+***************************** TOP OF DATA *************************************\n+000001  1I1JLK1LLS899--SA22PP;;777SSKLL';'244677822--099896654412233KK2\n+000002  1I1JLK1000899--SA2222;;7RRSSKLL';'987677822--099896654412233KK2\n+000003  1R1JRKRLLS879--S822PP;;447SSWLL';'244677822--099896654412233KK2\n+\n)PROC\n&KEY = .PFKEY\n)END\n----------------------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#XCOPY": {"ttr": 2068, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x11\\x00\\x0f\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 17, "newlines": 15, "modlines": 0, "user": "PANEL"}, "text": "%EDITMAC  ------------------ XCOPY     MACRO  ------------------------  TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+THE%XCOPY+MACRO IS USED TO COPY ANOTHER DATASET INTO THE CURRENT MEMBER OF\n+THE PDS BEING EDITED. (DOES NOT WORK WHILE EDITING A SEQUENTIAL DATASET)\n+\n+USE:\n+TYPE%XCOPY+ON THE COMMAND LINE FOLLOWED BY THE DATASET NAME TO BE COPIED.\n+AN \"A\" OR \"B\" RANGE COMMAND MAY BE USED.  IF NO RANGE COMMAND IS USED THE\n+XCOPIED DATASET WILL BE PLACED AT THE END OF DATA. IF THE COPIED DATASET\n+IS A PDS THE MEMBER MUST BE SPECIFIED.\n+\n%COMMAND ===> XCOPY 'ANY.DATA.SET(MEMBER)'\n+***************************** TOP OF DATA *************************************\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#XSEND": {"ttr": 2070, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x17\\x00\\x14\\x00\\x00\\xd7\\xc1\\xd5\\xc5\\xd3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 23, "newlines": 20, "modlines": 0, "user": "PANEL"}, "text": "EDITMAC ---------------------- XSEND     MACRO -------------------------TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+     THE XSEND MACRO WILL INVOKE TRANSMIT COMMAND ON THE DATASET YOU ARE\n+     EDITING.\n+\n+\n%USE:\n+\n+           ENTER%XSEND+  ON  THE  EDIT  COMMAND  LINE  WHEN  YOU HAVE\n+           COMPLETED EDITING THE DATASET.  THE TARGET DATASET WILL BE\n+           'USERID.XSEND' IF MORE THAN ONE  DATASET  IS TO BE SENT, A\n+           SUFFIX CHARACTER MAY BE SUPPLIED WHICH WILL BE APPENDED TO\n+           THE DATASET NAME.\n+\n+\n%EXAMPLE:+\n+\n+ COMMAND ===> XSEND NODEID.USER {X} OPTIONAL SUFFIX CHARACTER\n+\n)PROC\n&KEY = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADDCMDS": {"ttr": 2072, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00T\\x00M\\x00\\x00\\xc3\\xd3\\xc9\\xe2\\xe3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 84, "newlines": 77, "modlines": 0, "user": "CLIST"}, "text": "PROC 0  CMD(ISPCMDS)\nCONTROL NOMSG\n ISPEXEC VPUT (ISPC1 ISPC2) PROFILE\n CLRSCRN\n WRITE                **** WAIT CHECKING CONCATENATION ****\n WRITE                * SEARCHING FOR: ISPTLIB AND ISPTABL*\nSET &TARGETDD = ISPTLIB\nSET &FLAG2 = ISPTLIB\nISPEXEC VPUT FLAG2 PROFILE\nISPEXEC VPUT TARGETDD PROFILE\nFREE F(MSGS1)\n   SET &Q = &SUBSTR(1:2,&SYSTIME)\n   SET &Q1 = &SUBSTR(4:5,&SYSTIME)\n   SET &Q2 = &SUBSTR(7:8,&SYSTIME)\n   SET &MSGS = &STR(LS&Q&Q1&Q2)\n   SET &MDA = &STR(&SYSPREF..&MSGS)\n  FREE ATTRLIST(ISPMSGS)\n    ATTRIB ISPMSGS DSORG(PS) RECFM( F B ) +\n      LRECL( 80 ) BLKSIZE( 80 )\n       ALLOC DA('&MDA') SP (1,1) TRACKS USING (ISPMSGS) +\n        F(MSGS1) NEW\n ISPEXEC EDIT DATASET('&MDA')   MACRO(CMDUPDT1)\nSET &FLAG2 = TABL\nISPEXEC VPUT FLAG2 PROFILE\nSET &TARGETDD = ISPTABL\nISPEXEC VPUT (TARGETDD) PROFILE\n ISPEXEC EDIT DATASET('&MDA')   MACRO(CMDUPDT1)\n DELETE '&MDA'\n ISPEXEC VGET (ISPC1 ISPC2) PROFILE\n CLRSCRN\nSET &DATAID = &ISPC1\nSET &MEM = &CMD\nSET &DSN = &ISPC2\n  ISPEXEC  LMINIT DATAID(DD01)  DATASET('&DATAID')  ENQ(SHR)\nISPEXEC  LMINIT DATAID(DD02) DATASET('&DSN') ENQ(SHR) VOLUME(&SYSVOLUME)\n IF &MEM \u00ac= THEN DO\n   ISPEXEC  LMCOPY FROMID(&DD01) TOMEM(@@@@CMDS) TRUNC REPLACE +\n     TODATAID(&DD02) FROMMEM(&MEM)\n     IF &LASTCC =8 THEN DO\n           SET ZEDSMSG = &STR(MEMBER NOT FOUND)\n             SET ZEDLMSG = &STR(&DATAID(&MEM) NOT FOUND)\n           ISPEXEC SETMSG MSG(ISRZ001)\n           EXIT\n          END\n END\nSET &RESP1 = ENTER\nISPEXEC VPUT (RESP1) PROFILE\nISPEXEC SELECT PGM(ISPUCM) PARM(@@@@CMDS)\nISPEXEC VGET CMDIN PROFILE\n  IF &CMDIN = THEN SET &CMDIN = REFRESH\n  IF &SUBSTR(1:3,&CMDIN) = CAN THEN GOTO LCLOSE\nCONTROL NOFLUSH\nSET &TBNM = @@@@CMDS\nISPEXEC TBOPEN &TBNM WRITE\nTABSORT: +\n  ISPEXEC  TBSORT  &TBNM   FIELDS(ZCTVERB)\n  ISPEXEC  TBCLOSE &TBNM         REPLCOPY\nWRITE              ****** COMMAND TABLE SORTED REPLACING ******\nWRITE              **** TO ACTIVATE: EXIT AND REENTER ISPF ****\n   ISPEXEC  LMCOPY FROMID(&DD02) TOMEM(&MEM) TRUNC REPLACE +\n     TODATAID(&DD01) FROMMEM(@@@@CMDS)\n     IF &LASTCC =8 THEN DO\n           SET ZEDSMSG = &STR(MEMBER NOT FOUND)\n             SET ZEDLMSG = &STR(&DATAID(&MEM) NOT FOUND)\n           ISPEXEC SETMSG MSG(ISRZ001)\n           EXIT\n          END\nLCLOSE: +\n  IF &SUBSTR(1:3,&CMDIN) = CAN THEN DO\n  WRITE CANCEL COMMAND ACCEPTED NO UPDATES MADE\n  END\nISPEXEC LMCLOSE DATAID(&DD01)\nISPEXEC LMFREE DATAID(&DD01)\nISPEXEC LMCLOSE DATAID(&DD02)\nISPEXEC LMFREE DATAID(&DD02)\nSET  PDSDSN = &DSN\nISPEXEC  LMINIT DATAID(PDSID) DATASET('&PDSDSN') +\n                ENQ(SHRW)                        +\n                ORG(PDSORG)\nISPEXEC LMOPEN DATAID(&PDSID) OPTION(OUTPUT)\nISPEXEC LMMDEL DATAID(&PDSID) MEMBER(@@@@CMDS)\nISPEXEC LMCLOSE DATAID(&PDSID)\nISPEXEC LMFREE DATAID(&PDSID)\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMBOX": {"ttr": 2075, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x003\\x003\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 51, "newlines": 51, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP) NOPROCESS\n IF &HELP = ? THEN DO\n ISPEXEC DISPLAY PANEL(ASMBOX)\n EXIT\n END\n DO WHILE &LENGTH(&STR(&STARS)) LT 65\n SET &STARS = &STR(&STR(&STARS)&STR(*))\n END\n   ISREDIT PROCESS RANGE C\n   SET LCC = &LASTCC\n   ISREDIT (RC) = RANGE_CMD\n   IF &LASTCC = 4 | &STR(&RC) \u00ac= &STR(C) THEN DO\n      SET &ZEDSMSG = NO RANGE SPECIFIED\n      SET &ZEDLMSG = YOU MUST SPECIFY A RANGE OF LINES TO BE BOXED +\n         USING A \"C<N>\" OR \"CC\"\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(4)\n   END\n   ISREDIT (FIRST) = LINENUM .ZFRANGE\n   ISREDIT (LAST) = LINENUM .ZLRANGE\n   ISREDIT (FR) = LINENUM .ZFRANGE\n   ISREDIT (LR) = LINENUM .ZLRANGE\n  ISREDIT BOUNDS 1 71\n   SET &C = &FR\n  DO WHILE (&C <= &LR)\n    ISREDIT SHIFT ) &C 3\n    SET &C = &C + 1\n    END\n       ISREDIT MASKLINE = \"&STR(******&STARS)\"\n       ISREDIT LINE_BEFORE &FIRST = MASKLINE\n  ISREDIT (LB,RB) = BOUNDS\n  SET I = &FR\n  DO WHILE (&I <= &LR)\n    ISREDIT\n    ISREDIT LABEL &I = .LJ\n    ISREDIT SEEK P'\u00ac' .LJ .LJ &LB &RB FIRST\n    ISREDIT SEEK P'\u00ac' .LJ .LJ &LB &RB LAST\n    ISREDIT CHANGE P'=' '*'  1\n    ISREDIT CHANGE P'=' '*' 71\n    IF &I = &FR THEN ISREDIT LABEL &I = .LJX\n    SET I = &I + 1\n  END\n  ISREDIT SEEK P'=' .LJX .LJX FIRST\n       ISREDIT MASKLINE = \"&STR(******&STARS)\"\n  SET &LAST = &LAST + 1\n       ISREDIT LINE_AFTER &LAST = MASKLINE\nERROROUT:+\n       ISREDIT MASKLINE = ' '\n      SET RC = 0\n  END\n  EXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "B": {"ttr": 2077, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\t\\x00\\x05\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 9, "newlines": 5, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (MEM)\n      IF &MEM = ? THEN DO\n      ISPEXEC DISPLAY PANEL(B)\n      EXIT\n      END\n ISREDIT (WORKDSN) = DATASET\n         ISREDIT (DSNAME) = DATASET\nISPEXEC BROWSE DATASET('&WORKDSN(&MEM)')\nEXIT CODE(1)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BIG": {"ttr": 2305, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x02\\x18\\x02\\x18\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 536, "newlines": 536, "modlines": 0, "user": "EDITMAC"}, "text": "  ISREDIT MACRO (LETTER)\n  IF &STR(&LETTER) = ? THEN +\n    DO\n      ISPEXEC DISPLAY PANEL(BIG)\n      EXIT CODE(1)\n    END\n  ISREDIT (ROW,COL) = CURSOR\n\n  ISPEXEC CONTROL ERRORS RETURN\n  IF &LETTER = 1 THEN  SET &LETTER = &STR(N1)\n  IF &LETTER = 2 THEN  SET &LETTER = &STR(N2)\n  IF &LETTER = 3 THEN  SET &LETTER = &STR(N3)\n  IF &LETTER = 4 THEN  SET &LETTER = &STR(N4)\n  IF &LETTER = 5 THEN  SET &LETTER = &STR(N5)\n  IF &LETTER = 6 THEN  SET &LETTER = &STR(N6)\n  IF &LETTER = 7 THEN  SET &LETTER = &STR(N7)\n  IF &LETTER = 8 THEN  SET &LETTER = &STR(N8)\n  IF &LETTER = 9 THEN  SET &LETTER = &STR(N9)\n  IF &LETTER = 0 THEN  SET &LETTER = &STR(N0)\n  GOTO &LETTER\n\nA: +\nISREDIT LINE &ROW           = LINE + < &COL '  AAAAAAAAAA'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' AAAAAAAAAAAA'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' AA        AA'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' AA        AA'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' AA        AA'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' AAAAAAAAAAAA'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' AAAAAAAAAAAA'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL ' AA        AA'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL ' AA        AA'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' AA        AA'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' AA        AA'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' AA        AA'>\nGOTO PROCESS\nB: +\nISREDIT LINE &ROW           = LINE + < &COL ' BBBBBBBBBBB'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' BBBBBBBBBBBB'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' BB         BB'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' BB         BB'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' BB        BB'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' BBBBBBBBBB'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' BBBBBBBBBB'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL ' BB        BB'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL ' BB         BB'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' BB         BB'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' BBBBBBBBBBBB'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' BBBBBBBBBBB'>\nGOTO PROCESS\nC: +\nISREDIT LINE &ROW           = LINE + < &COL '  CCCCCCCCCC'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' CCCCCCCCCCCC'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' CC        CC'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' CC'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' CC'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' CC'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' CC'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL ' CC'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL ' CC'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' CC        CC'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' CCCCCCCCCCCC'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  CCCCCCCCCC'>\nGOTO PROCESS\nD: +\nISREDIT LINE &ROW           = LINE + < &COL ' DDDDDDDDD'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' DDDDDDDDDD'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' DD       DD'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' DD        DD'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' DD        DD'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' DD        DD'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' DD        DD'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL ' DD        DD'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL ' DD        DD'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' DD        DD'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' DDDDDDDDDD'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' DDDDDDDDD'>\nGOTO PROCESS\nE: +\nISREDIT LINE &ROW           = LINE + < &COL ' EEEEEEEEEEEE'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' EEEEEEEEEEEE'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' EE'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' EE'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' EE'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' EEEEEEEE'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' EEEEEEEE'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL ' EE'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL ' EE'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' EE'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' EEEEEEEEEEEE'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' EEEEEEEEEEEE'>\nGOTO PROCESS\nF: +\nISREDIT LINE &ROW           = LINE + < &COL ' FFFFFFFFFFFF'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' FFFFFFFFFFFF'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' FF'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' FF'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' FF'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' FFFFFFFF'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' FFFFFFFF'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL ' FF'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL ' FF'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' FF'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' FF'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' FF'>\nGOTO PROCESS\nG: +\nISREDIT LINE &ROW           = LINE + < &COL '  GGGGGGGGGG'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' GGGGGGGGGGGG'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' GG        GG'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' GG'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' GG'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' GG'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' GG     GGGGG'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL ' GG     GGGGG'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL ' GG        GG'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' GG        GG'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' GGGGGGGGGGGG'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  GGGGGGGGGG'>\nGOTO PROCESS\nH: +\nISREDIT LINE &ROW           = LINE + < &COL ' HH        HH'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' HH        HH'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' HH        HH'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' HH        HH'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' HH        HH'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' HHHHHHHHHHHH'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' HHHHHHHHHHHH'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL ' HH        HH'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL ' HH        HH'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' HH        HH'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' HH        HH'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' HH        HH'>\nGOTO PROCESS\nI: +\nISREDIT LINE &ROW           = LINE + < &COL '  IIIIIIIIII'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL '  IIIIIIIIII'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL '      II'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL '      II'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL '      II'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL '      II'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL '      II'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL '      II'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL '      II'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL '      II'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  IIIIIIIIII'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  IIIIIIIIII'>\nGOTO PROCESS\nJ: +\nISREDIT LINE &ROW           = LINE + < &COL '   JJJJJJJJJJ'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL '   JJJJJJJJJJ'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL '       JJ'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL '       JJ'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL '       JJ'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL '       JJ'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL '       JJ'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL '       JJ'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL ' JJ    JJ'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' JJ    JJ'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' JJJJJJJJ'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  JJJJJJ'>\nGOTO PROCESS\nK: +\nISREDIT LINE &ROW           = LINE + < &COL ' KK         KK'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' KK        KK'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' KK       KK'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' KK      KK'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' KK     KK'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' KKKKKKK'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' KKKKKKK'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL ' KK     KK'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL ' KK      KK'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' KK       KK'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' KK        KK'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' KK         KK'>\nGOTO PROCESS\nL: +\nISREDIT LINE &ROW           = LINE + < &COL ' LL'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' LL'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' LL'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' LL'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' LL'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' LL'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' LL'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL ' LL'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL ' LL'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' LL'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' LLLLLLLLLLLL'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' LLLLLLLLLLLL'>\nGOTO PROCESS\nM: +\nISREDIT LINE &ROW           = LINE + < &COL ' MM         MM'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' MMM       MMM'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' MMMM     MMMM'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' MM MM   MM MM'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' MM   MMMM  MM'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' MM    MM   MM'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' MM         MM'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL ' MM         MM'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL ' MM         MM'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' MM         MM'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' MM         MM'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' MM         MM'>\nGOTO PROCESS\nN: +\nISREDIT LINE &ROW           = LINE + < &COL ' NN         NN'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' NNN        NN'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' NNNN       NN'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' NN NN      NN'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' NN   NN    NN'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' NN    NN   NN'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' NN     NN  NN'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL ' NN      NN NN'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL ' NN       NNNN'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' NN        NNN'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' NN         NN'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' NN          N'>\nGOTO PROCESS\nO: +\nISREDIT LINE &ROW           = LINE + < &COL ' OOOOOOOOOOOO'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' OOOOOOOOOOOO'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' OO        OO'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' OO        OO'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' OO        OO'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' OO        OO'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' OO        OO'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL ' OO        OO'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL ' OO        OO'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' OO        OO'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' OOOOOOOOOOOO'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' OOOOOOOOOOOO'>\nGOTO PROCESS\nP: +\nISREDIT LINE &ROW           = LINE + < &COL ' PPPPPPPPPPP'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' PPPPPPPPPPPP'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' PP        PP'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' PP        PP'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' PP        PP'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' PPPPPPPPPPPP'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' PPPPPPPPPPP'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL ' PP'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL ' PP'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' PP'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' PP'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' PP'>\nGOTO PROCESS\nQ: +\nISREDIT LINE &ROW           = LINE + < &COL '  QQQQQQQQQQ'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' QQQQQQQQQQQQ'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' QQ         QQ'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' QQ         QQ'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' QQ         QQ'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' QQ         QQ'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' QQ         QQ'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL ' QQ     QQ  QQ'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL ' QQ      QQ QQ'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' QQ       QQQQ'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' QQQQQQQQQQQ'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  QQQQQQQQ QQ'>\nGOTO PROCESS\nR: +\nISREDIT LINE &ROW           = LINE + < &COL ' RRRRRRRRRRR'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' RRRRRRRRRRRR'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' RR        RR'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' RR        RR'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' RR        RR'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' RRRRRRRRRRRR'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' RRRRRRRRRRR'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL ' RR    RR'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL ' RR     RR'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' RR      RR'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' RR       RR'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' RR        RR'>\nGOTO PROCESS\nS: +\nISREDIT LINE &ROW           = LINE + < &COL '  SSSSSSSSSS'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' SSSSSSSSSSSS'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' SS        SS'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' SS'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' SSS'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL '  SSSSSSSSS'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL '   SSSSSSSSS'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL '          SSS'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL '           SS'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' SS        SS'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' SSSSSSSSSSSS'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  SSSSSSSSSS'>\nGOTO PROCESS\nT: +\nISREDIT LINE &ROW           = LINE + < &COL ' TTTTTTTTTTTT'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' TTTTTTTTTTTT'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL '      TT'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL '      TT'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL '      TT'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL '      TT'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL '      TT'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL '      TT'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL '      TT'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL '      TT'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '      TT'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '      TT'>\nGOTO PROCESS\nU: +\nISREDIT LINE &ROW           = LINE + < &COL ' UU        UU'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' UU        UU'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' UU        UU'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' UU        UU'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' UU        UU'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' UU        UU'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' UU        UU'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL ' UU        UU'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL ' UU        UU'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' UU        UU'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' UUUUUUUUUUUU'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  UUUUUUUUUU'>\nGOTO PROCESS\nV: +\nISREDIT LINE &ROW           = LINE + < &COL ' VV        VV'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' VV        VV'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' VV        VV'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' VV        VV'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' VV        VV'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' VV        VV'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' VV        VV'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL '  VV      VV'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL '   VV    VV'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL '    VV  VV'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '     VVVV'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '      VV'>\nGOTO PROCESS\nW: +\nISREDIT LINE &ROW           = LINE + < &COL ' WW        WW'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' WW        WW'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' WW        WW'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' WW        WW'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' WW        WW'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' WW        WW'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' WW   WW   WW'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL ' WW  WWWW  WW'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL ' WW WW  WW WW'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' WWWW    WWWW'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' WWW      WWW'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' WW        WW'>\nGOTO PROCESS\nX: +\nISREDIT LINE &ROW           = LINE + < &COL ' XX        XX'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' XX        XX'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL '  XX      XX'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL '   XX    XX'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL '    XX  XX'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL '     XXXX'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL '     XXXX'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL '    XX  XX'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL '   XX    XX'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL '  XX      XX'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' XX        XX'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' XX        XX'>\nGOTO PROCESS\nY: +\nISREDIT LINE &ROW           = LINE + < &COL ' YY        YY'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' YY        YY'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL '  YY      YY'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL '   YY    YY'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL '    YY  YY'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL '     YYYY'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL '      YY'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL '      YY'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL '      YY'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL '      YY'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '      YY'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '      YY'>\nGOTO PROCESS\nZ: +\nISREDIT LINE &ROW           = LINE + < &COL ' ZZZZZZZZZZZZ'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' ZZZZZZZZZZZZ'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL '          ZZ'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL '         ZZ'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL '        ZZ'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL '       ZZ'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL '      ZZ'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL '     ZZ'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL '    ZZ'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL '   ZZ'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  ZZZZZZZZZZZ'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' ZZZZZZZZZZZZ'>\nGOTO PROCESS\nN1: +\nISREDIT LINE &ROW           = LINE + < &COL '      11'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL '     111'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL '    1111'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL '      11'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL '      11'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL '      11'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL '      11'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL '      11'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL '      11'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL '      11'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  1111111111'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  1111111111'>\nGOTO PROCESS\nN2: +\nISREDIT LINE &ROW           = LINE + < &COL '  2222222222'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' 222222222222'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' 22        22'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL '           22'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL '           22'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL '          22'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL '        22'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL '      22'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL '    22'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL '  22'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' 222222222222'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' 222222222222'>\nGOTO PROCESS\nN3: +\nISREDIT LINE &ROW           = LINE + < &COL '  3333333333'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' 333333333333'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' 33        33'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL '           33'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL '           33'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL '        3333'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL '        3333'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL '           33'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL '           33'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' 33        33'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' 333333333333'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  3333333333'>\nGOTO PROCESS\nN4: +\nISREDIT LINE &ROW           = LINE + < &COL '       444'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL '      4444'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL '     44 44'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL '    44  44'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL '   44   44'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL '  44444444444'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' 444444444444'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL '        44'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL '        44'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL '        44'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '        44'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '        44'>\nGOTO PROCESS\nN5: +\nISREDIT LINE &ROW           = LINE + < &COL ' 555555555555'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' 555555555555'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' 55'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' 55'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' 55'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' 555555555'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' 5555555555'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL '          55'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL '           55'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL '           55'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' 555555555555'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  5555555555'>\nGOTO PROCESS\nN6: +\nISREDIT LINE &ROW           = LINE + < &COL '  6666666666'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' 666666666666'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' 66        66'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' 66'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' 66'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' 66666666666'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' 666666666666'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL ' 66        66'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL ' 66        66'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' 66        66'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' 666666666666'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  6666666666'>\nGOTO PROCESS\nN7: +\nISREDIT LINE &ROW           = LINE + < &COL ' 777777777777'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' 77777777777'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' 77      77'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL '        77'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL '       77'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL '      77'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL '      77'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL '      77'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL '      77'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL '      77'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '      77'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '      77'>\nGOTO PROCESS\nN8: +\nISREDIT LINE &ROW           = LINE + < &COL '  8888888888'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' 888888888888'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' 88        88'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' 88        88'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL '  88      88'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL '   88888888'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL '   88888888'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL '  88      88'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL ' 88        88'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' 88        88'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' 888888888888'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  8888888888'>\nGOTO PROCESS\nN9: +\nISREDIT LINE &ROW           = LINE + < &COL '  9999999999'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL ' 999999999999'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' 99        99'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' 99        99'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' 99        99'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' 999999999999'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' 999999999999'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL '           99'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL '           99'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' 99        99'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL ' 999999999999'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  9999999999'>\nGOTO PROCESS\nN0: +\nISREDIT LINE &ROW           = LINE + < &COL '   00000000'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL '  0000000000'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL ' 00        00'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL ' 00        00'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL ' 00        00'>\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL ' 00        00'>\nISREDIT LINE &EVAL(&ROW+6)  = LINE + < &COL ' 00        00'>\nISREDIT LINE &EVAL(&ROW+7)  = LINE + < &COL ' 00        00'>\nISREDIT LINE &EVAL(&ROW+8)  = LINE + < &COL ' 00        00'>\nISREDIT LINE &EVAL(&ROW+9)  = LINE + < &COL ' 00        00'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  0000000000'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '   00000000'>\nPROCESS: +\n  IF &MAXCC  > 0 THEN -\n    DO\n      SET ZEDSMSG = INCOMPLETE BOX\n      SET ZEDLMSG = NOT ENOUGH LINES/COLUMNS TO DRAW COMPLETE BOX\n      ISPEXEC SETMSG MSG(ISRZ001)\n    END\n  SET &COL = &COL + 2\n  SET &ROW = &ROW + 1\n\n  ISREDIT CURSOR = (ROW,COL)\n  EXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BIGS": {"ttr": 2314, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x02\\x18\\x02\\x18\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 536, "newlines": 536, "modlines": 0, "user": "EDITMAC"}, "text": "  ISREDIT MACRO (LETTER)\n  IF &STR(&LETTER) = ? THEN +\n    DO\n      ISPEXEC DISPLAY PANEL(BIGS)\n      EXIT CODE(1)\n    END\n  ISREDIT (ROW,COL) = CURSOR\n\n  ISPEXEC CONTROL ERRORS RETURN\n  IF &LETTER = 1 THEN  SET &LETTER = &STR(N1)\n  IF &LETTER = 2 THEN  SET &LETTER = &STR(N2)\n  IF &LETTER = 3 THEN  SET &LETTER = &STR(N3)\n  IF &LETTER = 4 THEN  SET &LETTER = &STR(N4)\n  IF &LETTER = 5 THEN  SET &LETTER = &STR(N5)\n  IF &LETTER = 6 THEN  SET &LETTER = &STR(N6)\n  IF &LETTER = 7 THEN  SET &LETTER = &STR(N7)\n  IF &LETTER = 8 THEN  SET &LETTER = &STR(N8)\n  IF &LETTER = 9 THEN  SET &LETTER = &STR(N9)\n  IF &LETTER = 0 THEN  SET &LETTER = &STR(N0)\n  GOTO &LETTER\n\nA: +\nISREDIT LINE &ROW           = LINE + < &COL '             AAAAAAAAAA'>\nISREDIT LINE &EVAL(&ROW+1 ) = LINE + < &COL '           AAAAAAAAAAAA'>\nISREDIT LINE &EVAL(&ROW+2 ) = LINE + < &COL '          AA        AA'>\nISREDIT LINE &EVAL(&ROW+3 ) = LINE + < &COL '         AA        AA'>\nISREDIT LINE &EVAL(&ROW+4 ) = LINE + < &COL '        AA        AA'>\nISREDIT LINE &EVAL(&ROW+5 ) = LINE + < &COL '       AAAAAAAAAAAA'>\nISREDIT LINE &EVAL(&ROW+6 ) = LINE + < &COL '      AAAAAAAAAAAA'>\nISREDIT LINE &EVAL(&ROW+7 ) = LINE + < &COL '     AA        AA'>\nISREDIT LINE &EVAL(&ROW+8 ) = LINE + < &COL '    AA        AA'>\nISREDIT LINE &EVAL(&ROW+9 ) = LINE + < &COL '   AA        AA'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  AA        AA'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' AA        AA'>\nGOTO PROCESS\nB: +\nISREDIT LINE &ROW           = LINE + < &COL '            BBBBBBBBBBB'>\nISREDIT LINE &EVAL(&ROW+1 ) = LINE + < &COL '           BBBBBBBBBBBB'>\nISREDIT LINE &EVAL(&ROW+2 ) = LINE + < &COL '          BB        BB'>\nISREDIT LINE &EVAL(&ROW+3 ) = LINE + < &COL '         BB        BB'>\nISREDIT LINE &EVAL(&ROW+4 ) = LINE + < &COL '        BB       BB'>\nISREDIT LINE &EVAL(&ROW+5 ) = LINE + < &COL '       BBBBBBBBBB'>\nISREDIT LINE &EVAL(&ROW+6 ) = LINE + < &COL '      BBBBBBBBBB'>\nISREDIT LINE &EVAL(&ROW+7 ) = LINE + < &COL '     BB       BB'>\nISREDIT LINE &EVAL(&ROW+8 ) = LINE + < &COL '    BB        BB'>\nISREDIT LINE &EVAL(&ROW+9 ) = LINE + < &COL '   BB        BB'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  BBBBBBBBBBBB'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' BBBBBBBBBBB'>\nGOTO PROCESS\nC: +\nISREDIT LINE &ROW           = LINE + < &COL '             CCCCCCCCCC'>\nISREDIT LINE &EVAL(&ROW+1 ) = LINE + < &COL '           CCCCCCCCCCCC'>\nISREDIT LINE &EVAL(&ROW+2 ) = LINE + < &COL '          CC        CC'>\nISREDIT LINE &EVAL(&ROW+3 ) = LINE + < &COL '         CC'>\nISREDIT LINE &EVAL(&ROW+4 ) = LINE + < &COL '        CC'>\nISREDIT LINE &EVAL(&ROW+5 ) = LINE + < &COL '       CC'>\nISREDIT LINE &EVAL(&ROW+6 ) = LINE + < &COL '      CC'>\nISREDIT LINE &EVAL(&ROW+7 ) = LINE + < &COL '     CC'>\nISREDIT LINE &EVAL(&ROW+8 ) = LINE + < &COL '    CC'>\nISREDIT LINE &EVAL(&ROW+9 ) = LINE + < &COL '   CC        CC'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  CCCCCCCCCCCC'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  CCCCCCCCCC'>\nGOTO PROCESS\nD: +\nISREDIT LINE &ROW          = LINE + < &COL '            DDDDDDDDD'>\nISREDIT LINE &EVAL(&ROW+1 ) = LINE + < &COL '           DDDDDDDDDD'>\nISREDIT LINE &EVAL(&ROW+2 ) = LINE + < &COL '          DD       DD'>\nISREDIT LINE &EVAL(&ROW+3 ) = LINE + < &COL '         DD        DD'>\nISREDIT LINE &EVAL(&ROW+4 ) = LINE + < &COL '        DD        DD'>\nISREDIT LINE &EVAL(&ROW+5 ) = LINE + < &COL '       DD        DD'>\nISREDIT LINE &EVAL(&ROW+6 ) = LINE + < &COL '      DD        DD'>\nISREDIT LINE &EVAL(&ROW+7 ) = LINE + < &COL '     DD        DD'>\nISREDIT LINE &EVAL(&ROW+8 ) = LINE + < &COL '    DD        DD'>\nISREDIT LINE &EVAL(&ROW+9 ) = LINE + < &COL '   DD       DD'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  DDDDDDDDDD'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' DDDDDDDDD'>\nGOTO PROCESS\nE: +\nISREDIT LINE &ROW          = LINE + < &COL '            EEEEEEEEEEEE'>\nISREDIT LINE &EVAL(&ROW+1 ) = LINE + < &COL '           EEEEEEEEEEEE'>\nISREDIT LINE &EVAL(&ROW+2 ) = LINE + < &COL '          EE'>\nISREDIT LINE &EVAL(&ROW+3 ) = LINE + < &COL '         EE'>\nISREDIT LINE &EVAL(&ROW+4 ) = LINE + < &COL '        EE'>\nISREDIT LINE &EVAL(&ROW+5 ) = LINE + < &COL '       EEEEEEEE'>\nISREDIT LINE &EVAL(&ROW+6 ) = LINE + < &COL '      EEEEEEEE'>\nISREDIT LINE &EVAL(&ROW+7 ) = LINE + < &COL '     EE'>\nISREDIT LINE &EVAL(&ROW+8 ) = LINE + < &COL '    EE'>\nISREDIT LINE &EVAL(&ROW+9 ) = LINE + < &COL '   EE'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  EEEEEEEEEEEE'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' EEEEEEEEEEEE'>\nGOTO PROCESS\nF: +\nISREDIT LINE &ROW         = LINE + < &COL   '            FFFFFFFFFFFF'>\nISREDIT LINE &EVAL(&ROW+1 ) = LINE + < &COL '           FFFFFFFFFFFF'>\nISREDIT LINE &EVAL(&ROW+2 ) = LINE + < &COL '          FF'>\nISREDIT LINE &EVAL(&ROW+3 ) = LINE + < &COL '         FF'>\nISREDIT LINE &EVAL(&ROW+4 ) = LINE + < &COL '        FF'>\nISREDIT LINE &EVAL(&ROW+5 ) = LINE + < &COL '       FFFFFFFF'>\nISREDIT LINE &EVAL(&ROW+6 ) = LINE + < &COL '      FFFFFFFF'>\nISREDIT LINE &EVAL(&ROW+7 ) = LINE + < &COL '     FF'>\nISREDIT LINE &EVAL(&ROW+8 ) = LINE + < &COL '    FF'>\nISREDIT LINE &EVAL(&ROW+9 ) = LINE + < &COL '   FF'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  FF'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' FF'>\nGOTO PROCESS\nG: +\nISREDIT LINE &ROW           = LINE + < &COL '             GGGGGGGGGG'>\nISREDIT LINE &EVAL(&ROW+1 ) = LINE + < &COL '           GGGGGGGGGGGG'>\nISREDIT LINE &EVAL(&ROW+2 ) = LINE + < &COL '          GG        GG'>\nISREDIT LINE &EVAL(&ROW+3 ) = LINE + < &COL '         GG'>\nISREDIT LINE &EVAL(&ROW+4 ) = LINE + < &COL '        GG'>\nISREDIT LINE &EVAL(&ROW+5 ) = LINE + < &COL '       GG'>\nISREDIT LINE &EVAL(&ROW+6 ) = LINE + < &COL '      GG     GGGGG'>\nISREDIT LINE &EVAL(&ROW+7 ) = LINE + < &COL '     GG     GGGGG'>\nISREDIT LINE &EVAL(&ROW+8 ) = LINE + < &COL '    GG        GG'>\nISREDIT LINE &EVAL(&ROW+9 ) = LINE + < &COL '   GG        GG'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  GGGGGGGGGGGG'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  GGGGGGGGGG'>\nGOTO PROCESS\nH: +\nISREDIT LINE &ROW           = LINE + < &COL '            HH        HH'>\nISREDIT LINE &EVAL(&ROW+1 ) = LINE + < &COL '           HH        HH'>\nISREDIT LINE &EVAL(&ROW+2 ) = LINE + < &COL '          HH        HH'>\nISREDIT LINE &EVAL(&ROW+3 ) = LINE + < &COL '         HH        HH'>\nISREDIT LINE &EVAL(&ROW+4 ) = LINE + < &COL '        HH        HH'>\nISREDIT LINE &EVAL(&ROW+5 ) = LINE + < &COL '       HHHHHHHHHHHH'>\nISREDIT LINE &EVAL(&ROW+6 ) = LINE + < &COL '      HHHHHHHHHHHH'>\nISREDIT LINE &EVAL(&ROW+7 ) = LINE + < &COL '     HH        HH'>\nISREDIT LINE &EVAL(&ROW+8 ) = LINE + < &COL '    HH        HH'>\nISREDIT LINE &EVAL(&ROW+9 ) = LINE + < &COL '   HH        HH'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  HH        HH'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' HH        HH'>\nGOTO PROCESS\nI: +\nISREDIT LINE &ROW         = LINE + < &COL '                IIIIIIIIII'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '             IIIIIIIIII'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '                II'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '               II'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '              II'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '             II'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '            II'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '           II'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '          II'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '         II'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '   IIIIIIIIII'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  IIIIIIIIII'>\nGOTO PROCESS\nJ: +\nISREDIT LINE &ROW          = LINE + < &COL '               JJJJJJJJJJ'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '              JJJJJJJJJJ'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '                 JJ'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '                JJ'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '               JJ'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '              JJ'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '             JJ'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '            JJ'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '     JJ    JJ'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '    JJ    JJ'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  JJJJJJJJ'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  JJJJJJ'>\nGOTO PROCESS\nK: +\nISREDIT LINE &ROW          = LINE + < &COL '             KK        KK'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '            KK       KK'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '           KK      KK'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '          KK     KK'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '         KK    KK'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '        KKKKKKK'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '       KKKKKKK'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '      KK    KK'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '     KK     KK'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '    KK      KK'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  KK       KK'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' KK        KK'>\nGOTO PROCESS\nL: +\nISREDIT LINE &ROW          = LINE + < &COL '             LL'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '            LL'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '           LL'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '          LL'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '         LL'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '        LL'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '       LL'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '      LL'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '     LL'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '    LL'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  LLLLLLLLLLLL'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' LLLLLLLLLLLL'>\nGOTO PROCESS\nM: +\nISREDIT LINE &ROW          = LINE + < &COL '             MM        MM'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '            MMM      MMM'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '           MMMM    MMMM'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '          MM MM  MM MM'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '         MM  MMMM  MM'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '        MM   MM   MM'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '       MM        MM'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '      MM        MM'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '     MM        MM'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '    MM        MM'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  MM        MM'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' MM        MM'>\nGOTO PROCESS\nN: +\nISREDIT LINE &ROW          = LINE + < &COL '             NN        NN'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '            NNN       NN'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '           NNNN      NN'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '          NN NN     NN'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '         NN  NN    NN'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '        NN   NN   NN'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '       NN    NN  NN'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '      NN     NN NN'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '     NN      NNNN'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '    NN       NNN'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  NN        NN'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' NN         N'>\nGOTO PROCESS\nO: +\nISREDIT LINE &ROW          = LINE + < &COL '             OOOOOOOOOOOO'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '            OOOOOOOOOOOO'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '           OO        OO'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '          OO        OO'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '         OO        OO'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '        OO        OO'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '       OO        OO'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '      OO        OO'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '     OO        OO'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '    OO        OO'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  OOOOOOOOOOOO'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' OOOOOOOOOOOO'>\nGOTO PROCESS\nP: +\nISREDIT LINE &ROW          = LINE + < &COL '             PPPPPPPPPPP'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '            PPPPPPPPPPPP'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '           PP        PP'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '          PP        PP'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '         PP        PP'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '        PPPPPPPPPPPP'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '       PPPPPPPPPPP'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '      PP'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '     PP'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '    PP'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  PP'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' PP'>\nGOTO PROCESS\nQ: +\nISREDIT LINE &ROW          = LINE + < &COL '              QQQQQQQQQQ'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '            QQQQQQQQQQQQ'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '           QQ        QQ'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '          QQ        QQ'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '         QQ        QQ'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '        QQ        QQ'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '       QQ        QQ'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '      QQ    QQ  QQ'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '     QQ     QQ QQ'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '    QQ      QQQQ'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  QQQQQQQQQQQ'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  QQQQQQQQ QQ'>\nGOTO PROCESS\nR: +\nISREDIT LINE &ROW          = LINE + < &COL '             RRRRRRRRRRR'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '            RRRRRRRRRRRR'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '           RR        RR'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '          RR        RR'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '         RR        RR'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '        RRRRRRRRRRRR'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '       RRRRRRRRRRR'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '      RR    RR'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '     RR     RR'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '    RR      RR'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  RR       RR'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' RR        RR'>\nGOTO PROCESS\nS: +\nISREDIT LINE &ROW          = LINE + < &COL '              SSSSSSSSSS'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '            SSSSSSSSSSSS'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '           SS        SS'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '          SS'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '         SSS'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '         SSSSSSSSS'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '         SSSSSSSSS'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '               SSS'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '               SS'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '    SS        SS'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  SSSSSSSSSSSS'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  SSSSSSSSSS'>\nGOTO PROCESS\nT: +\nISREDIT LINE &ROW          = LINE + < &COL '             TTTTTTTTTTTT'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '            TTTTTTTTTTTT'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '                TT'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '               TT'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '              TT'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '             TT'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '            TT'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '           TT'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '          TT'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '         TT'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '       TT'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '      TT'>\nGOTO PROCESS\nU: +\nISREDIT LINE &ROW          = LINE + < &COL '             UU        UU'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '            UU        UU'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '           UU        UU'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '          UU        UU'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '         UU        UU'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '        UU        UU'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '       UU        UU'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '      UU        UU'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '     UU        UU'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '    UU        UU'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  UUUUUUUUUUUU'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  UUUUUUUUUU'>\nGOTO PROCESS\nV: +\nISREDIT LINE &ROW          = LINE + < &COL '             VV        VV'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '            VV        VV'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '           VV        VV'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '          VV        VV'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '         VV        VV'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '        VV        VV'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '       VV        VV'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '       VV      VV'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '       VV    VV'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '       VV  VV'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '      VVVV'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '      VV'>\nGOTO PROCESS\nW: +\nISREDIT LINE &ROW          = LINE + < &COL '             WW        WW'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '            WW        WW'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '           WW        WW'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '          WW        WW'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '         WW        WW'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '        WW        WW'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '       WW   WW   WW'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '      WW  WWWW  WW'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '     WW WW  WW WW'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '    WWWW    WWWW'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  WWW      WWW'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' WW        WW'>\nGOTO PROCESS\nX: +\nISREDIT LINE &ROW          = LINE + < &COL '            XX         XX'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '            XX        XX'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '            XX      XX'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '            XX    XX'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '            XX  XX'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '            XXXX'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '           XXXX'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '         XX  XX'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '       XX    XX'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '     XX      XX'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  XX        XX'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' XX        XX'>\nGOTO PROCESS\nY: +\nISREDIT LINE &ROW          = LINE + < &COL '            YY         YY'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '            YY        YY'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '            YY      YY'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '            YY    YY'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '            YY  YY'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '            YYYY'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '            YY'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '           YY'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '          YY'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '         YY'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '       YY'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '      YY'>\nGOTO PROCESS\nZ: +\nISREDIT LINE &ROW          = LINE + < &COL '             ZZZZZZZZZZZZ'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '            ZZZZZZZZZZZZ'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '                    ZZ'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '                  ZZ'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '                ZZ'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '              ZZ'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '            ZZ'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '          ZZ'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '        ZZ'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '      ZZ'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '   ZZZZZZZZZZZ'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' ZZZZZZZZZZZZ'>\nGOTO PROCESS\nN1: +\nISREDIT LINE &ROW           = LINE + < &COL '                 11'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '                111'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '              1111'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '               11'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '              11'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '             11'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '            11'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '           11'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '          11'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '         11'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '   1111111111'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  1111111111'>\nGOTO PROCESS\nN2: +\nISREDIT LINE &ROW           = LINE + < &COL '             2222222222'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '            222222222222'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '           22        22'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '                    22'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '                   22'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '                 22'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '              22'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '           22'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '        22'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '     22'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  222222222222'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' 222222222222'>\nGOTO PROCESS\nN3: +\nISREDIT LINE &ROW           = LINE + < &COL '             3333333333'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '            333333333333'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '           33        33'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '                    33'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '                   33'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '               3333'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '              3333'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '                33'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '               33'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '    33        33'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  333333333333'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  3333333333'>\nGOTO PROCESS\nN4: +\nISREDIT LINE &ROW           = LINE + < &COL '                  444'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '                 4444'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '               44 44'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '             44  44'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '           44   44'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '         44444444444'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '       444444444444'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '             44'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '            44'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '           44'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '         44'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '        44'>\nGOTO PROCESS\nN5: +\nISREDIT LINE &ROW           = LINE + < &COL '            555555555555'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '            555555555555'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '           55'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '          55'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '         55'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '        555555555'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '       5555555555'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '               55'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '               55'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '              55'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  555555555555'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL ' 55555555555'>\nGOTO PROCESS\nN6: +\nISREDIT LINE &ROW          = LINE + < &COL '             6666666666'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '            666666666666'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '           66        66'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '          66'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '         66'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '        66666666666'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '       666666666666'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '      66        66'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '     66        66'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '    66        66'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  666666666666'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  6666666666'>\nGOTO PROCESS\nN7: +\nISREDIT LINE &ROW          = LINE + < &COL '            777777777777'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '            77777777777'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '           77      77'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '                 77'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '               77'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '             77'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '            77'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '           77'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '          77'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '         77'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '       77'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '      77'>\nGOTO PROCESS\nN8: +\nISREDIT LINE &ROW          = LINE + < &COL '             8888888888'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '            888888888888'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '           88        88'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '          88        88'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '          88      88'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '          88888888'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL '         88888888'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL '       88      88'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL '     88        88'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL '    88        88'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '  888888888888'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '  8888888888'>\nGOTO PROCESS\nN9: +\nISREDIT LINE &ROW          = LINE + < &COL  '             9999999999'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL  '            999999999999'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL  '           99        99'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL  '          99        99'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL  '         99        99'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL  '        999999999999'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL  '       999999999999'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL  '                99'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL  '               99'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL  '    99        99'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '   999999999999'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '   9999999999'>\nGOTO PROCESS\nN0: +\nISREDIT LINE &ROW          = LINE + < &COL  '              00000000'>\nISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL  '             0000000000'>\nISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL  '           00        00'>\nISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL  '          00        00'>\nISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL  '         00        00'>\nISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL  '        00        00'>\nISREDIT LINE &EVAL(&ROW+6) = LINE + < &COL  '       00        00'>\nISREDIT LINE &EVAL(&ROW+7) = LINE + < &COL  '      00        00'>\nISREDIT LINE &EVAL(&ROW+8) = LINE + < &COL  '     00        00'>\nISREDIT LINE &EVAL(&ROW+9) = LINE + < &COL  '    00        00'>\nISREDIT LINE &EVAL(&ROW+10) = LINE + < &COL '    0000000000'>\nISREDIT LINE &EVAL(&ROW+11) = LINE + < &COL '    00000000'>\nPROCESS: +\n  IF &MAXCC  > 0 THEN -\n    DO\n      SET ZEDSMSG = INCOMPLETE BOX\n      SET ZEDLMSG = NOT ENOUGH LINES/COLUMNS TO DRAW COMPLETE BOX\n      ISPEXEC SETMSG MSG(ISRZ001)\n    END\n  SET &COL = &COL + 2\n  SET &ROW = &ROW + 1\n\n  ISREDIT CURSOR = (ROW,COL)\n  EXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BLDCOPY": {"ttr": 2569, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00?\\x00?\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 63, "newlines": 63, "modlines": 0, "user": "EDITMAC"}, "text": " ISREDIT MACRO (DSN) NOPROCESS\n  IF &STR(&DSN) = ? THEN +\n    DO\n      ISPEXEC DISPLAY PANEL(BLDCOPY)\n      EXIT CODE(1)\n    END\nSET  PDSDSN = &DSN\n  SET N = 0\n  ISREDIT PROCESS DEST\n  IF &LASTCC = 0 THEN DO\n  ISREDIT LOCATE .ZDEST\n  IF &LASTCC = 8 THEN +\n     DO\n           SET ZEDSMSG = &STR(EMPTY DATA SET )\n       SET ZEDLMSG = &STR(DSIGEN WORKS ONLY WHEN DATA SET HAS VALID +\n                                 DATA AND LINE NUMBERS)\n           ISPEXEC SETMSG MSG(ISRZ001)\n         EXIT CODE(12)\n   END\n END\n/* INITIALIZE DATASET */\nISPEXEC  LMINIT DATAID(PDSID) DATASET(&PDSDSN) +\n                ENQ(SHRW)                        +\n                ORG(PDSORG)\nSET LMRC = &LASTCC\nIF &LMRC \u00ac= 0 THEN +\n   DO\n      WRITE LMINIT FAILED - RETURN CODE &LMRC\n      WRITE DATA SET IS NOT ALLOCATED OR NOT PARTITIONED\n      EXIT CODE(8)\n   END\n\n/* OPEN DATA SET */\nISPEXEC LMOPEN DATAID(&PDSID) OPTION(INPUT)\nSET LMRC = &LASTCC\n\n/* CALL EDIT WITH EACH MEMBER OF THE DATA SET AND SPECIFY THE */\n/* INITIAL EDIT MACRO.                                        */\nDO WHILE (&LMRC = 0)\n  /* BUILD MEMBER LIST AND RETURN NEXT MEMBER */\n  ISPEXEC LMMLIST DATAID(&PDSID) -\n        OPTION(LIST) MEMBER(MEMBER) -\n        STATS(NO)\n  SET LMRC = &LASTCC\n  IF &LMRC = 0 THEN /* NOT END OF MEMBER LIST */ +\n     DO\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + &N\n       ISREDIT MASKLINE = \"    S M=&MEMBER\"\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n       SET &N = &N + 1\n     END\n END\nISPEXEC LMMLIST DATAID(&PDSID) OPTION(FREE)\n/* CLOSE DATA SET */\nISPEXEC LMCLOSE DATAID(&PDSID)\n/* FREE DATA ID */\nISPEXEC LMFREE  DATAID(&PDSID)\n\nERROROUT:+\n       ISREDIT MASKLINE = ' '\n\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BRODMAC": {"ttr": 2571, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x12\\x00\\x0e\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 18, "newlines": 14, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO                                                           0000000\n  ISREDIT EXCLUDE ALL                                                   0000000\n  ISREDIT DELETE X ALL                                                  0000000\n  CONTROL ASIS                                                          0000000\n  SET &I = 1                                                            0000000\n  SET &SYSOUTTRAP = 400                                                 0000000\n  TSOEXEC LISTBC                                                        0000000\n  SET &BCNUM = &SYSOUTLINE                                              0000000\n  DO WHILE &BCNUM >= &I                                                 0000000\n     SET &TEMP = &&SYSOUTLINE&I                                         0000000\n     IF &SUBSTR(1:9,&TEMP) = IKJ56951I THEN DO\n     SET &BCDISP = NONE\n        END\n     ISREDIT LINE_AFTER .ZLAST = \"&TEMP\"                                0000000\n     SET &I = &I + 1                                                    0000000\n  END                                                                   0000000\nISPEXEC VPUT BCNUM SHARED                                               0000000\nISPEXEC VPUT BCDISP SHARED                                              0000000\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BRODMACD": {"ttr": 2573, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x10\\x00\\x0f\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 16, "newlines": 15, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO                                                           0000000\n  ISREDIT EXCLUDE ALL                                                   0000000\n  ISREDIT DELETE X ALL                                                  0000000\n  CONTROL ASIS                                                          0000000\n  SET &I = 1                                                            0000000\n  SET &SYSOUTTRAP = 400                                                 0000000\n  TSOEXEC LISTBC                                                        0000000\n  SET &BCDEL = &SYSOUTLINE                                              0000000\n  DO WHILE &BCDEL >= &I                                                 0000000\n     SET &TEMP = &&SYSOUTLINE&I                                         0000000\n     ISREDIT LINE_AFTER .ZLAST = \"&TEMP\"                                0000000\n     SET &I = &I + 1                                                    0000000\n  END                                                                   0000000\nISPEXEC VPUT BCDEL SHARED                                               0000000\nISREDIT END\nEXIT                                                                    0000000\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BRODMACI": {"ttr": 2575, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x19\\x00\\x10\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 25, "newlines": 16, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO\nCONTROL NOMSG\nISPEXEC VGET BRODSN SHARED\nISREDIT BOUNDS 1 78\nISREDIT RECOVERY OFF\nISREDIT NUMBER OFF\nISREDIT PACK OFF\nISREDIT NULLS ON\nISREDIT CAPS OFF\n       ALLOC DA('&BRODSN(CURRENT)') FI(IMPORT) SHR\n OPENFILE IMPORT OUTPUT\n ISREDIT (FIRST) = LINENUM .ZFIRST\n ISREDIT (LAST) = LINENUM .ZLAST\n SET &BCNUM = &LAST\n ISPEXEC VPUT BCNUM SHARED\n DO WHILE &FIRST <  &EVAL(&LAST + 1)\n ISREDIT (IMPORT) = LINE &FIRST\n SET &IMPORT = &SUBSTR(1:80,&IMPORT)\n PUTFILE IMPORT\n SET &FIRST = &FIRST + 1\n END\n CLOSFILE IMPORT\n FREE F(IMPORT)\n ISREDIT END\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BRODMACR": {"ttr": 2818, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\t\\x00\\x08\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 9, "newlines": 8, "modlines": 0, "user": "EDITMAC"}, "text": " ISREDIT MACRO\n ISREDIT EXCLUDE ALL\n ISREDIT DELETE X ALL\n ISREDIT COPY BRODBKUP BEFORE .ZFIRST\n ISREDIT RESET\n  ISREDIT  LINE_BEFORE 1 = NOTELINE 'ENTER \"BRODREST\" TO REPLACE +\n    CURRENT BROADCAST MESSAGES WITH THIS MEMBER'\n  ISREDIT  LINE_BEFORE 1 = NOTELINE 'TO EXIT WITHOUT REPLACEMENT +\n    ENTER END OR CANCEL TO EXIT'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BRODMACU": {"ttr": 2820, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x0e\\x00\\x0c\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 14, "newlines": 12, "modlines": 0, "user": "EDITMAC"}, "text": " ISREDIT MACRO\n ISPEXEC VGET BCNUM SHARED\n ISREDIT (FIRST) = LINENUM .ZFIRST\n ISREDIT (LAST) = LINENUM .ZLAST\n DO WHILE &FIRST < &EVAL(&LAST + 1)\n ISREDIT (MSG) = LINE &FIRST\n                   OPER\n                   SEND '&MSG',ALL,SAVE\n                   CONTROL END(XXX)\n                   END\n                   CONTROL END(END)\n SET &FIRST = &FIRST + 1\n END\n ISREDIT END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BRODREST": {"ttr": 2822, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1b\\x00\\x0e\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 27, "newlines": 14, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO                                                           0000000\n  CONTROL ASIS                                                          0000000\n  SET &I = 1                                                            0000000\n  SET &SYSOUTTRAP = 400                                                 0000000\n  TSOEXEC LISTBC                                                        0000000\n  SET &BCDEL = &SYSOUTLINE                                              0000000\n             OPER\n             SET I = 1\n             DO WHILE (&I <= &BCDEL)\n               SEND &I,DELETE\n               SET I = &I + 1\n               END\n             CONTROL END(XXX)\n             END\n             CONTROL END(END)\n ISREDIT (FIRST) = LINENUM .ZFIRST\n ISREDIT (LAST) = LINENUM .ZLAST\n DO WHILE &FIRST < &EVAL(&LAST + 1)\n ISREDIT (MSG) = LINE &FIRST\n                   OPER\n                   SEND '&MSG',ALL,SAVE\n                   CONTROL END(XXX)\n                   END\n                   CONTROL END(END)\n SET &FIRST = &FIRST + 1\n END\n ISREDIT END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BRODUPDR": {"ttr": 2824, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x08\\x00\\x04\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 8, "newlines": 4, "modlines": 0, "user": "EDITMAC"}, "text": " ISREDIT MACRO\n ISREDIT EXCLUDE ALL\n ISREDIT DELETE X ALL\n ISREDIT COPY BRODBKUP BEFORE .ZFIRST\n  ISREDIT  LINE_BEFORE 1 = NOTELINE 'ENTER \"BRODREST\" TO REPLACE +\n    CURRENT BROADCAST MESSAGES WITH THIS MEMBER'\n  ISREDIT  LINE_BEFORE 1 = NOTELINE 'TO EXIT WITHOUT REPLACEMENT +\n    ENTER END OR CANCEL TO EXIT'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BRODUPDT": {"ttr": 2826, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00f\\x00Q\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 102, "newlines": 81, "modlines": 0, "user": "EDITMAC"}, "text": "PROC 0 DEBUG\nIF &DEBUG = DEBUG THEN DO\n     CONTROL MSG LIST SYMLIST CONLIST\nEND\n  SET &BRODSN = &STR(AD06P.BRODCAST)\n  ISPEXEC VPUT BRODSN SHARED\n  IF &SYSDSN('&BRODSN') \u00ac= OK THEN DO\n             SET ZEDSMSG = &NRSTR(DATASET NOT FOUND)\n          SET ZEDLMSG = &NRSTR(DATASET '&BRODSN', NOT FOUND CORRECT +\n        AND CONTINUE)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             GOTO DISPLAY\n             END\nDISPLAY: +\nSET &CH =\nISPEXEC DISPLAY PANEL(BRODPNL)\nIF &KEY = PF03 THEN EXIT CODE(0)\nIF &KEY = PF15 THEN EXIT CODE(0)\nIF &KEY = PF01 THEN GOTO HELPRTN\nIF &KEY = PF13 THEN GOTO HELPRTN\nIF &CH \u00ac= 1 AND &CH \u00ac= 2 AND &CH \u00ac=3 AND &CH \u00ac= 4 AND &CH \u00ac= 5 +\nAND &CH \u00ac= X THEN DO\n             SET ZEDSMSG = &NRSTR(INVALID SELECTION)\n          SET ZEDLMSG = &NRSTR(VALID SELECTIONS ARE 1, 2, 3, 4, 5, OR +\n             X)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             GOTO DISPLAY\n             END\n IF &CH = X THEN EXIT CODE(4)\n IF &CH = 1 THEN GOTO DELRTN\n IF &CH = 2 THEN GOTO EDITRTN\n IF &CH = 3 THEN GOTO IMPORTIT\n IF &CH = 4 THEN GOTO VIEWRTN\n IF &CH = 5 THEN GOTO RESTRTN\n SET &CH =\n EDITRTN: +\n ISPEXEC EDIT DATASET('&BRODSN(CURRENT)') MACRO(BRODMAC)\n             SET CC_EDIT = &LASTCC\n             IF &CC_EDIT > 0 THEN DO\n               IF &CC_EDIT = 4 THEN DO\n ISPEXEC VGET BCDISP SHARED\n   IF &BCDISP = NONE THEN DO\n                 SET ZEDSMSG = NO BRODCAST MESSAGES\n                 SET ZEDLMSG = NO BRODCAST MESSAGES OR WERE NOT\n                 SET ZEDLMSG = &ZEDLMSG CHANGED BY EDIT.\n                 ISPEXEC SETMSG MSG(ISRZ000)\n                 GOTO DISPLAY\n                 END\n               END\n           END\n ISPEXEC VGET BCNUM SHARED\n             OPER\n             SET I = 1\n             DO WHILE (&I <= &BCNUM)\n               SEND &I,DELETE\n               SET I = &I + 1\n               END\n             CONTROL END(XXX)\n             END\n             CONTROL END(END)\n ISPEXEC EDIT DATASET('&BRODSN(CURRENT)') MACRO(BRODMACU)\n GOTO DISPLAY\n DELRTN: +\n ISPEXEC EDIT DATASET('&BRODSN(BRODBKUP)') MACRO(BRODMACD)\n ISPEXEC VGET BCDEL SHARED\n             OPER\n             SET I = 1\n             DO WHILE (&I <= &BCDEL)\n               SEND &I,DELETE\n               SET I = &I + 1\n               END\n             CONTROL END(XXX)\n             END\n             CONTROL END(END)\n GOTO DISPLAY\n VIEWRTN: +\n LISTBC\n GOTO DISPLAY\n IMPORTIT: +\n CLRSCRN\n WRITENR ENTER DATASET NAME TO BE IMPORTED ==>\n READ &TARGET\n IF &SYSDSN('&TARGET') \u00ac= OK  THEN DO\n             SET ZEDSMSG = &NRSTR(DATASET NOT FOUND)\n             SET ZEDLMSG = &NRSTR(DATASET WAS NOT FOUND.  THE DATASET+\n             MUST BE CATALOGED TO BE IMPORTED)\n             ISPEXEC SETMSG MSG(ISRZ001)\n             GOTO DISPLAY\n             END\nISPEXEC VPUT TARGET SHARED\n ISPEXEC EDIT DATASET('&TARGET') MACRO(BRODMACI)\n WRITENR UPDATE BROADCAST WITH IMPORTED DATASET? (Y/N)\n SET &UPANS =\n READ &UPANS\n IF &SUBSTR(1:1,&UPANS) = Y THEN GOTO EDITRTN\n IF &SUBSTR(1:1,&UPANS) = X'A8' THEN GOTO EDITRTN\n IF &SUBSTR(1:1,&UPANS) = X'A8' THEN GOTO EDITRTN\n GOTO DISPLAY\n RESTRTN: +\n ISPEXEC EDIT DATASET('&BRODSN(CURRENT)') MACRO(BRODMACR)\n GOTO DISPLAY\n EXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CENTER": {"ttr": 2829, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00=\\x00=\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 61, "newlines": 61, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (LEFT,RIGHT) NOPROCESS\n                         /* ANOTHER FINE EDIT MACRO */\n                             /* BROUGHT TO YOU */\n                        /* BY YOUR TECHNICAL SUPPORT */\n                                   /* STAFF */\n  IF &STR(&LEFT) = ? THEN +\n    DO\n      ISPEXEC DISPLAY PANEL(CENTER)\n      EXIT CODE(1)\n    END\n    IF &LEFT \u00ac=  AND &RIGHT = THEN DO\n    ISREDIT (L2,RIGHT) = BOUNDS\n    END\n  ISPEXEC CONTROL ERRORS RETURN\n  CONTROL ASIS\n  /* PROCESS LINE COMMANDS, CHECK IF C  WAS SPECIFIED */\n  ISREDIT PROCESS RANGE C\n  SET LCC = &LASTCC\n  ISREDIT (RC) = RANGE_CMD\n  IF &LASTCC = 4 | &STR(&RC) \u00ac= &STR(C) THEN +\n    DO\n      SET &ZEDSMSG = &STR(NO RANGE SPECIFIED)\n      SET &ZEDLMSG = &STR(YOU MUST SPECIFY A RANGE OF LINES +\n                          TO BE CENTERED, USING \"CN\" OR \"CC\")\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(12)\n    END\n\n  ISREDIT (FR)  = LINENUM .ZFRANGE\n  ISREDIT (LR)  = LINENUM .ZLRANGE\n  ISREDIT (LB,RB) = BOUNDS\n  IF &RIGHT \u00ac= THEN DO\n  SET &RB = &RIGHT\n  SET &LB = &LEFT\n  END\n  SET I = &FR\n  DO WHILE (&I <= &LR)\n    ISREDIT\n    ISREDIT LABEL &I = .LJ\n    ISREDIT SEEK P'\u00ac' .LJ .LJ &LB &RB FIRST\n    ISREDIT (LLINE,LCOL) = CURSOR\n    ISREDIT SEEK P'\u00ac' .LJ .LJ &LB &RB LAST\n    ISREDIT (RLINE,RCOL) = CURSOR\n    SET MIDPT = &EVAL(&RB - &LB) / 2\n    SET MIDPT = &MIDPT + &LB\n    SET LEFT = &MIDPT - &LCOL\n    SET RIGHT = &RCOL - &MIDPT\n    SET COUNT = &EVAL(&LEFT - &RIGHT + 1) / 2\n    IF &COUNT > 0 THEN +\n      ISREDIT SHIFT ) &I &COUNT\n    ELSE +\n      IF &COUNT < 0 THEN +\n        DO\n          SET COUNT = -1*&COUNT\n          ISREDIT SHIFT ( &I &COUNT\n        END\n    IF &I = &FR THEN ISREDIT LABEL &I = .LJX\n    SET I = &I + 1\n  END\n  ISREDIT SEEK P'=' .LJX .LJX FIRST\n  EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CHGALL": {"ttr": 2831, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x11\\x00\\x11\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP)\n IF &HELP = ? THEN DO\n ISPEXEC DISPLAY PANEL(CHGALL)\n EXIT\n END\n/**********************************************************************/\n/* INITIAL EDIT MACRO USED TO CHANGE ONE STRING TO ANOTHER            */\n/*                                                                    */\n/* THIS MACRO CAN BE USED IN CONJUNCTION WITH THE EDITPDS CLIST.      */\n/*                                                                    */\n/* THIS MACRO CONTAINS AN ISREDIT END COMMAND AND THEREFORE THE EDIT  */\n/* SCREEN WILL NOT APPEAR.  FOOL                                      */\n/**********************************************************************/\nISPEXEC VGET (MACPARM1 MACPARM2 MACPARM3 MACPARM4 MACPARM5)\n\nISREDIT CHANGE &MACPARM1 &MACPARM2 &MACPARM4 &MACPARM5\nISREDIT END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLISTBOX": {"ttr": 2833, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x003\\x006\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 51, "newlines": 54, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP) NOPROCESS\n IF &HELP = ? THEN DO\n ISPEXEC DISPLAY PANEL(CLISTBOX)\n EXIT\n END\n DO WHILE &LENGTH(&STR(&STARS)) LT 65\n SET &STARS = &STR(&STR(&STARS)&STR(*))\n END\n   ISREDIT PROCESS RANGE C\n   SET LCC = &LASTCC\n   ISREDIT (RC) = RANGE_CMD\n   IF &LASTCC = 4 | &STR(&RC) \u00ac= &STR(C) THEN DO\n      SET &ZEDSMSG = NO RANGE SPECIFIED\n      SET &ZEDLMSG = YOU MUST SPECIFY A RANGE OF LINES TO BE BOXED +\n         USING A \"C<N>\" OR \"CC\"\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(4)\n   END\n   ISREDIT (FIRST) = LINENUM .ZFRANGE\n   ISREDIT (LAST) = LINENUM .ZLRANGE\n   ISREDIT (FR) = LINENUM .ZFRANGE\n   ISREDIT (LR) = LINENUM .ZLRANGE\n  ISREDIT BOUNDS 1 72\n   SET &C = &FR\n  DO WHILE (&C <= &LR)\n    ISREDIT SHIFT ) &C 3\n    SET &C = &C + 1\n    END\n       ISREDIT MASKLINE = \"&STR(/*****&STARS)\"\n       ISREDIT LINE_BEFORE &FIRST = MASKLINE\n  ISREDIT (LB,RB) = BOUNDS\n  SET I = &FR\n  DO WHILE (&I <= &LR)\n    ISREDIT\n    ISREDIT LABEL &I = .LJ\n    ISREDIT SEEK P'\u00ac' .LJ .LJ &LB &RB FIRST\n    ISREDIT SEEK P'\u00ac' .LJ .LJ &LB &RB LAST\n    ISREDIT CHANGE P'===' '/* ' 1\n    ISREDIT CHANGE P'=' '*' 71\n    IF &I = &FR THEN ISREDIT LABEL &I = .LJX\n    SET I = &I + 1\n  END\n  ISREDIT SEEK P'=' .LJX .LJX FIRST\n       ISREDIT MASKLINE = \"&STR(/*****&STARS)\"\n  SET &LAST = &LAST + 1\n       ISREDIT LINE_AFTER &LAST = MASKLINE\nERROROUT:+\n       ISREDIT MASKLINE = ' '\n      SET RC = 0\n  END\n  EXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CLONE": {"ttr": 2835, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00&\\x00\\x16\\x00\\x00\\xc3\\xd3\\xc9\\xe2\\xe3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 38, "newlines": 22, "modlines": 0, "user": "CLIST"}, "text": "PROC 1 DA VOL()\nCONTROL NOMSG\nIF &VOL NE  THEN SET &VOL1 = VOL(&VOL)\nSET &CLONEVOL = &VOL\nISPEXEC VPUT CLONEVOL PROFILE\n IF &DA = ? THEN DO\n ISPEXEC DISPLAY PANEL(CLONE)\n EXIT\n END\nSET &CLONEDSN = &DA &VOL1\nISPEXEC VPUT CLONEDSN PROFILE\nLISTDSI &DA\nFREE F(MSGS1)\n   SET &Q = &SUBSTR(1:2,&SYSTIME)\n   SET &Q1 = &SUBSTR(4:5,&SYSTIME)\n   SET &Q2 = &SUBSTR(7:8,&SYSTIME)\n   SET &MSGS = &STR(MG&Q&Q1&Q2)\n   SET &MDA = &STR(&SYSPREF..&MSGS)\n  FREE ATTRLIST(ISPMSGS)\n    ATTRIB ISPMSGS DSORG(PS) RECFM( F B ) +\n      LRECL( 80 ) BLKSIZE( 80 )\n       ALLOC DA('&MDA') SP (1,1) TRACKS USING (ISPMSGS) +\n        F(MSGS1) NEW\n IF &SYSDSORG = PO THEN  +\n ISPEXEC EDIT DATASET('&MDA')   MACRO(CLONEP)\n IF &SYSDSORG = PS THEN  +\n ISPEXEC EDIT DATASET('&MDA')   MACRO(CLONES)\n IF &SYSDSORG \u00ac= PS AND &SYSDSORG \u00ac= PO THEN DO\n      SET &ZEDSMSG = &STR(UNSUPPORTED DSORG)\n      SET &ZEDLMSG = &STR(XCOPY COMMAND ONLY WORKS WHEN USED +\n                          WITHIN A DATSET WITH DSORG PO OR PS)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(12)\n    END\n WRITENR KEEP DATASET '&MDA' ENTER \"Y\" TO SAVE \"N\" TO DELETE\n READ ANS\n IF &SUBSTR(1:1,&ANS) = Y THEN EXIT\n DELETE '&MDA'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CLONEP": {"ttr": 2837, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\xc3\\x00\\xd0\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 195, "newlines": 208, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (DA VOLUME) NOPROCESS\nCONTROL NOMSG\n IF &DA = ? THEN DO\n ISPEXEC DISPLAY PANEL(CLONEP)\n EXIT\n END\nIF &DA = THEN DO\nISPEXEC VGET CLONEDSN PROFILE\nISPEXEC VGET CLONEVOL PROFILE\nSET &VOLX = &CLONEVOL\nIF &VOLX \u00ac= THEN DO\nSET &AVOL = &STR(UNIT=SYSDA,VOL=SER=&VOLX)\nSET &COMMA = &STR(,)\nEND\nIF &CLONEDSN  NE THEN DO\nSET &DA = &CLONEDSN\nSET &CLONEDSN =\nISPEXEC VPUT CLONEDSN PROFILE\nEND\nEND\nIF &VOLUME = THEN DO\nSET &VOL =\nGOTO SETIN\nEND\nSET &VOL = &STR(VOLUME(&VOLUME))\nSETIN: +\nSET &IN = &DA\nIF &IN = THEN DO\n           SET ZEDSMSG = &STR(INVALID DSN )\n       SET ZEDLMSG = &STR(DSIGEN WORKS WITH VALID DATASET NAMES)\n           ISPEXEC SETMSG MSG(ISRZ001)\n         EXIT CODE(12)\n  END\nLISTDSI &IN DIRECTORY &VOL\nSET CODE = &LASTCC\nSET REASON = &SYSREASON\nIF &CODE = 16 AND &REASON = 5 THEN DO\n           SET ZEDSMSG = &STR(DATASET NO FOUND)\n       SET ZEDLMSG = &STR(&IN MUST BE A FULLY QUALIFIED DATA SET NAME)\n           ISPEXEC SETMSG MSG(ISRZ001)\n         EXIT CODE(12)\n  END\nSET  &SXS1 =   &STR(&SYSDSNAME)\nSET  &SXS2 =   &STR(&SYSVOLUME)\nSET  &SXS3 =   &STR(&SYSUNIT)\nSET  &SXS4 =   &STR(&SYSDSORG)\nSET  &SXS5 =   &STR(&SYSRECFM)\nSET  &SXS6 =   &STR(&SYSLRECL)\nSET  &SXS7 =   &STR(&SYSBLKSIZE)\nSET  &SXS8 =   &STR(&SYSALLOC)\nSET  &SXS9 =   &STR(&SYSUSED)\nSET  &SXS10 =  &STR(&SYSPRIMARY)\nSET  &SXS11 =  &STR(&SYSSECONDS)\nSET  &SXS12 =  &STR(&SYSUNITS)\nSET  &SXS13 =  &STR(&SYSEXTENTS)\nSET  &SXS14 =  &STR(&SYSCREATE)\nSET  &SXS15 =  &STR(&SYSREFDATE)\nSET  &SXS16 =  &STR(&SYSEXDATE)\nSET  &SXS17 =  &STR(&SYSUPDATED)\nSET  &SXS18 =  &STR(&SYSTRKSCYL)\nSET  &SXS19 =  &STR(&SYSBLKSTRK)\nSET  &SXS20 =  &STR(&SYSADIRBLK)\nSET  &SXS21 =  &STR(&SYSUDIRBLK)\nSET  &SXS22 =  &STR(&SYSMEMBERS)\nSET  &SXS23 =  &STR(&SYSMSGLVL1)\nSET  &SXS24 =  &STR(&SYSMSGLVL2)\nSET &DSNIN =  &STR(DSN=&SXS1)\nIF &SXS12 = TRACK THEN SET &SXS12R = TRK\nIF &SXS12 = CYLINDER THEN SET &SXS12R = CYL\nIF &SXS12 = BLOCK THEN SET &SXS12R = &SYSDVAL(&SXS10)\nSET &DORG  =  &STR(DSORG=&SXS4)\nSET &SPAC  =  &STR(SPACE=(&SXS12R\nSET &RCFM  =  &STR(RECFM=&SXS5\nSET &LREC  =  &STR(LRECL=&SXS6\nSET &BLKSZ =  &STR(BLKSIZE=&SXS7\nSET &SLS10 = &SYSDVAL(&SXS10)\nSET &SLS11 = &SYSDVAL(&SXS11)\nSET &SLS20 = &SYSDVAL(&SXS20)\nISPEXEC VPUT (DORG SPAC RCFM LREC BLKSZ) PROFILE\nISPEXEC VGET (DORG SPAC RCFM LREC BLKSZ) PROFILE\nIF &SXS4 = PO THEN +\nSET &CMA = &STR(,)\nSET &SP1 = &STR(&SPAC&CMA(&SLS10,&SLS11,&SLS20),RLSE)\nSET &RGT = &STR())\nSET &L5A = &STR(//          &SP1)&RGT&CMA\nSET &L5A = &STR(&L5A&CMA)\nSET &L5B = &STR(//          DCB=(&DORG,&RCFM,&LREC,&BLKSZ)\nSET &L1 = &STR(//COPY      EXEC PGM=IEBCOPY               )\nSET &L3 = &STR(//SYSPRINT  DD SYSOUT=*                   )\nSET &L4 = &STR(//IN1       DD DISP=SHR,DSN=&SXS1&COMMA  )\nSET &LX = &STR(//          &AVOL                        )\nSET &L5 = &STR(//OUTDD     DD DISP=(,CATLG),UNIT=SYSDA,\nSET &L5C = &STR(//          DSN= <== MODIFY)\nSET &L6 = &STR(//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(2,2)) )\nSET &L7 = &STR(//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(2,2)) )\nSET &L8 = &STR(//SYSIN     DD *                             )\nSET &L9 = &STR(  COPY INDD=((IN1,R)),OUTDD=OUTDD        )\nSET &LA = &STR(/*                                       )\nISPEXEC VPUT (L1  L3 L4 L5 L5A L5B L5C L6 L7 L8 L9 LA) PROFILE\n     ISPEXEC VGET L1  PROFILE\n       ISREDIT MASKLINE = \"&L1\"\n       ISREDIT LINE_AFTER 0    = MASKLINE\n      SET X = 1\n     ISPEXEC VGET L3   PROFILE\n       ISREDIT (LINEPTR) = LINENUM .ZL\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&L3\"\n       ISREDIT LINE_AFTER &X  = MASKLINE\n       SET &X = &X + 1\n\n     ISPEXEC VGET L4   PROFILE\n       ISREDIT (LINEPTR) = LINENUM .ZL\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&L4\"\n       ISREDIT LINE_AFTER &X  = MASKLINE\n       SET &X = &X + 1\n\n   IF &VOLX \u00ac=  THEN DO\n     ISPEXEC VGET LX   PROFILE\n       ISREDIT (LINEPTR) = LINENUM .ZL\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&LX\"\n       ISREDIT LINE_AFTER &X  = MASKLINE\n       SET &X = &X + 1\n       END\n\n     ISPEXEC VGET L5   PROFILE\n       ISREDIT (LINEPTR) = LINENUM .ZL\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&L5\"\n       ISREDIT LINE_AFTER &X  = MASKLINE\n       SET &X = &X + 1\n\n     ISPEXEC VGET L5A  PROFILE\n       ISREDIT (LINEPTR) = LINENUM .ZL\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&L5A\"\n       ISREDIT LINE_AFTER &X  = MASKLINE\n       SET &X = &X + 1\n\n     ISPEXEC VGET L5B  PROFILE\n       ISREDIT (LINEPTR) = LINENUM .ZL\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&L5B\"\n       ISREDIT LINE_AFTER &X  = MASKLINE\n       SET &X = &X + 1\n\n     ISPEXEC VGET L5C  PROFILE\n       ISREDIT (LINEPTR) = LINENUM .ZL\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&L5C\"\n       ISREDIT LINE_AFTER &X  = MASKLINE\n       SET &X = &X + 1\n\n     ISPEXEC VGET L6   PROFILE\n       ISREDIT (LINEPTR) = LINENUM .ZL\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&L6\"\n       ISREDIT LINE_AFTER &X  = MASKLINE\n       SET &X = &X + 1\n\n     ISPEXEC VGET L7   PROFILE\n       ISREDIT (LINEPTR) = LINENUM .ZL\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&L7\"\n       ISREDIT LINE_AFTER &X  = MASKLINE\n       SET &X = &X + 1\n\n     ISPEXEC VGET L8   PROFILE\n       ISREDIT (LINEPTR) = LINENUM .ZL\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&L8\"\n       ISREDIT LINE_AFTER &X  = MASKLINE\n       SET &X = &X + 1\n\n     ISPEXEC VGET L9   PROFILE\n       ISREDIT (LINEPTR) = LINENUM .ZL\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&L9\"\n       ISREDIT LINE_AFTER &X   = MASKLINE\n       SET &X = &X + 1\n\n     ISPEXEC VGET LA   PROFILE\n       ISREDIT (LINEPTR) = LINENUM .ZL\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&LA\"\n       ISREDIT LINE_AFTER &X   = MASKLINE\n\nISPEXEC VERASE (L1  L3 L4 L5 L5A L5B L5C L6 L7 L8 L9 LA LX) PROFILE\n    ISREDIT JC\nERROROUT:+\n       ISREDIT MASKLINE = ' '\n      SET RC = 0\n  EXIT CODE(&RC)\n  END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CLONES": {"ttr": 3074, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\xa4\\x00\\x9c\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 164, "newlines": 156, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (DA VOLUME) NOPROCESS\nCONTROL NOMSG\n IF &DA = ? THEN DO\n ISPEXEC DISPLAY PANEL(CLONES)\n EXIT\n END\nIF &DA = THEN DO\nISPEXEC VGET CLONEDSN PROFILE\nISPEXEC VGET CLONEVOL PROFILE\nSET &VOLX = &CLONEVOL\nIF &VOLX \u00ac= THEN DO\nSET &AVOL = &STR(UNIT=SYSDA,VOL=SER=&VOLX)\nSET &COMMA = &STR(,)\nEND\nIF &CLONEDSN  NE THEN DO\nSET &DA = &CLONEDSN\nSET &CLONEDSN =\nISPEXEC VPUT CLONEDSN PROFILE\nEND\nEND\nIF &VOLUME = THEN DO\nSET &VOL =\nGOTO SETIN\nEND\nSET &VOL = &STR(VOLUME(&VOLUME))\nSETIN: +\nSET &IN = &DA\nIF &IN = THEN DO\n           SET ZEDSMSG = &STR(INVALID DSN )\n       SET ZEDLMSG = &STR(DSIGEN WORKS WITH VALID DATASET NAMES)\n           ISPEXEC SETMSG MSG(ISRZ001)\n         EXIT CODE(12)\n  END\nLISTDSI &IN  &VOL\nSET CODE = &LASTCC\nSET REASON = &SYSREASON\nIF &CODE = 16 AND &REASON = 5 THEN DO\n           SET ZEDSMSG = &STR(DATASET NO FOUND)\n       SET ZEDLMSG = &STR(&IN MUST BE A FULLY QUALIFIED DATA SET NAME)\n           ISPEXEC SETMSG MSG(ISRZ001)\n         EXIT CODE(12)\n  END\nSET  &SXS1 =   &STR(&SYSDSNAME)\nSET  &SXS2 =   &STR(&SYSVOLUME)\nSET  &SXS3 =   &STR(&SYSUNIT)\nSET  &SXS4 =   &STR(&SYSDSORG)\nSET  &SXS5 =   &STR(&SYSRECFM)\nSET  &SXS6 =   &STR(&SYSLRECL)\nSET  &SXS7 =   &STR(&SYSBLKSIZE)\nSET  &SXS8 =   &STR(&SYSALLOC)\nSET  &SXS9 =   &STR(&SYSUSED)\nSET  &SXS10 =  &STR(&SYSPRIMARY)\nSET  &SXS11 =  &STR(&SYSSECONDS)\nSET  &SXS12 =  &STR(&SYSUNITS)\nSET  &SXS13 =  &STR(&SYSEXTENTS)\nSET  &SXS14 =  &STR(&SYSCREATE)\nSET  &SXS15 =  &STR(&SYSREFDATE)\nSET  &SXS16 =  &STR(&SYSEXDATE)\nSET  &SXS17 =  &STR(&SYSUPDATED)\nSET  &SXS18 =  &STR(&SYSTRKSCYL)\nSET  &SXS19 =  &STR(&SYSBLKSTRK)\nSET  &SXS20 =  &STR(&SYSADIRBLK)\nSET  &SXS21 =  &STR(&SYSUDIRBLK)\nSET  &SXS22 =  &STR(&SYSMEMBERS)\nSET  &SXS23 =  &STR(&SYSMSGLVL1)\nSET  &SXS24 =  &STR(&SYSMSGLVL2)\nSET &DSNIN =  &STR(DSN=&SXS1)\nIF &SXS12 = TRACK THEN SET &SXS12R = TRK\nIF &SXS12 = CYLINDER THEN SET &SXS12R = CYL\nIF &SXS12 = BLOCK THEN SET &SXS12R = &SYSDVAL(&SXS10)\nSET &DORG  =  &STR(DSORG=&SXS4)\nSET &SPAC  =  &STR(SPACE=(&SXS12R\nSET &RCFM  =  &STR(RECFM=&SXS5\nSET &LREC  =  &STR(LRECL=&SXS6\nSET &BLKSZ =  &STR(BLKSIZE=&SXS7\nSET &SLS10 = &SYSDVAL(&SXS10)\nSET &SLS11 = &SYSDVAL(&SXS11)\nSET &SLS20 = &SYSDVAL(&SXS20)\nISPEXEC VPUT (DORG SPAC RCFM LREC BLKSZ) PROFILE\nISPEXEC VGET (DORG SPAC RCFM LREC BLKSZ) PROFILE\nSET &CMA = &STR(,)\nSET &SP1 = &STR(&SPAC&CMA(&SLS10,&SLS11),RLSE)\nSET &RGT = &STR())\nSET &L5A = &STR(//          &SP1)&RGT&CMA\nSET &L5A = &STR(&L5A&CMA)\nSET &L5B = &STR(//          DCB=(&DORG,&RCFM,&LREC,&BLKSZ)\nSET &L1 = &STR(//GENR      EXEC PGM=IEBGENER          )\nSET &L3 = &STR(//SYSPRINT  DD SYSOUT=*                )\nSET &L4 = &STR(//SYSUT1    DD DISP=SHR,DSN=&SXS1&COMMA)\nSET &LX = &STR(//          &AVOL                      )\nSET &L5 = &STR(//SYSUT2    DD DISP=(,CATLG),UNIT=SYSDA, )\nSET &L5C = &STR(//          DSN= <== MODIFY)\nSET &L6 = &STR(//SYSIN     DD   DUMMY                    )\nISPEXEC VPUT (L1  L3 L4 L5 L5A L5B L5C L6 LX ) PROFILE\n     ISPEXEC VGET L1\n       ISREDIT MASKLINE = \"&L1\"\n       ISREDIT LINE_AFTER 0  = MASKLINE\n  SET X = 1\n     ISPEXEC VGET L3\n       ISREDIT (LINEPTR) = LINENUM .ZL\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&L3\"\n       ISREDIT LINE_AFTER 1 = MASKLINE\n  SET &X = &X + 1\n\n     ISPEXEC VGET L4\n       ISREDIT (LINEPTR) = LINENUM .ZL\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&L4\"\n       ISREDIT LINE_AFTER &X = MASKLINE\nIF &VOLX \u00ac= THEN DO\n  SET &X = &X + 1\n\n     ISPEXEC VGET LX\n       ISREDIT (LINEPTR) = LINENUM .ZL\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&LX\"\n       ISREDIT LINE_AFTER &X = MASKLINE\n  END\n  SET &X = &X + 1\n\n     ISPEXEC VGET L5\n       ISREDIT (LINEPTR) = LINENUM .ZL\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&L5\"\n       ISREDIT LINE_AFTER &X = MASKLINE\n  SET &X = &X + 1\n\n     ISPEXEC VGET L5C\n       ISREDIT (LINEPTR) = LINENUM .ZL\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&L5C\"\n       ISREDIT LINE_AFTER &X = MASKLINE\n  SET &X = &X + 1\n\n     ISPEXEC VGET L5A\n       ISREDIT (LINEPTR) = LINENUM .ZL\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&L5A\"\n       ISREDIT LINE_AFTER &X = MASKLINE\n  SET &X = &X + 1\n\n     ISPEXEC VGET L5B\n       ISREDIT (LINEPTR) = LINENUM .ZL\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&L5B\"\n       ISREDIT LINE_AFTER &X = MASKLINE\n  SET &X = &X + 1\n\n     ISPEXEC VGET L6\n       ISREDIT (LINEPTR) = LINENUM .ZL\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&L6\"\n       ISREDIT LINE_AFTER &X = MASKLINE\n\n\n    ISREDIT JC\nISPEXEC VERASE (L1 L3 L4 L5 L5A L5B L5C L6 LX ) PROFILE\nERROROUT:+\n       ISREDIT MASKLINE = ' '\nEXIT    CODE(0)\n      SET RC = 0\n  EXIT CODE(&RC)\n  END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CMDS": {"ttr": 3078, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "EDITMAC"}, "text": "PROC 0  ALT() CMDS(CMDS) MYCMDS(SP2CCMDS) WRITE(NOWRITE)\n/*  PAUL DAVIS  TECHNICAL SERVICES, ISPF V2R3M0                      */\nCONTROL NOFLUSH\nIF &ALT \u00ac=  THEN SET &MYCMDS = &ALT&CMDS\nSET &TBNM = &MYCMDS                  /* A COPY OF ISPCMDS            */\nSET &MSG =                           /*                              */\nSET &PNL = ZCMDTBL                   /*                              */\nISPEXEC TBOPEN &TBNM NOWRITE       /*                              */\nSET &RC = &LASTCC                    /*                              */\nIF &RC = 8 THEN DO                   /* TABLE DOES NOT EXIST         */\n                   SET &JHYTBNM = &TBNM /*                   10/18/83*/\n                   ISPEXEC SETMSG MSG(JHAYM111)       /*     03/04/85*/\n                   EXIT              /*                              */\n                END                  /*                              */\n\nTABSORT: +\n  ISPEXEC  TBSORT  &TBNM   FIELDS(ZCTVERB)\nDISPLAY: ISPEXEC TBDISPL &TBNM PANEL(&PNL) MSG(&MSG)\n                                     /*                              */\nSET &RC = &LASTCC                    /*                              */\nIF &RC < 8 && &ZCMD \u00ac=               /*                              */-\n   THEN DO                           /*                              */\n           SET &MSG = ISPZ001        /* INVALID COMMAND              */\n           SET &PNL =                /*                              */\n           GOTO DISPLAY              /*                              */\n        END                          /*                              */\n/*ISPEXEC  TBCLOSE &TBNM         REPLCOPY */\n   ISPEXEC TBEND &TBNM               /*                     */\nSET &MSG =                           /*                              */\nSET &PNL = ZCMDTBL                   /*                              */\nEXIT                                 /*                              */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CMDUPDT1": {"ttr": 3080, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\xdf\\x00\\xdf\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 223, "newlines": 223, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO                                                           0000000\n                         /* ANOTHER FINE EDIT MACRO */\n                             /* BROUGHT TO YOU */\n                        /* BY YOUR TECHNICAL SUPPORT */\n                                  /* STAFF */\n  ISPEXEC VGET TARGETDD PROFILE\n  ISPEXEC VGET FLAG2 PROFILE\n  ISREDIT EXCLUDE ALL                                                   0000000\n  CONTROL ASIS                                                          0000000\n  IF &FLAG2 = TABL THEN GOTO SECOND\n  SET &I = 1                                                            0000000\n  SET &SYSOUTTRAP = 400                                                 0000000\n  LISTA ST                                                              0000000\n  SET &BOT = &SYSOUTLINE                                                0000000\n  DO WHILE &BOT >= &I                                                   0000000\n     SET &TEMP = &&SYSOUTLINE&I                                         0000000\n     ISREDIT LINE_AFTER .ZLAST = \"&TEMP\"                                0000000\n     SET &I = &I + 1                                                    0000000\n  END                                                                   0000000\nSECOND: +\n      ISPEXEC VPUT (DSN1 DSN2 DSN3 DSN4 DSN5 +\n            DSN6 DSN7 DSN8 DSN9 DSN10 DSN11 DSN12) SHARED\n  SET LEN1 = &LENGTH(&TARGETDD)\n  ISREDIT (I)  = LINENUM .ZF\n  ISREDIT (LR)  = LINENUM .ZL\n  ISREDIT (LB,RB) = BOUNDS\n  ISREDIT C '           ' '' 1 ALL\n  ISREDIT C '  ' '$$' 1 ALL\n  DO WHILE (&I <= &LR)\n    ISREDIT (RECX) = LINE &I\n    IF &SUBSTR(3:&LEN1+3,&STR(&RECX)) = &STR(&TARGETDD) THEN DO\n    SET I = &I - 1\n    GOTO REALCODE\n    END\n    SET RECB = &STR(&RECX)\n    SET I = &I + 1\n  END\nNOTABLE: +\nWRITE TARGET DDNAME &TARGETDD NOT FOUND ENTER DATASET NAME FOR TARGET +\n(NO QUOTES)\n  READ TARG2\n     LISTDSI '&TARG2' NODIRECTORY\n\n     SET &LISTDSI_RC = &LASTCC\n     IF  &LISTDSI_RC \u00ac= 0 THEN DO\n      SET &CURPOS = &DSN&DNUM\n      SET ZEDSMSG = &STR(INVALID NAME)\n      SET ZEDLMSG = &STR(TSO DATA SET &TARG2 IS NOT A +\n              CATALOGED DATA SET NAME)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      GOTO NOTABLE\n   END\n  ALLOC DA('&TARG2') FILE(&TARGETDD) SHR\n  SET &RECB = &TARG2\n  SET &I = &I -1\nREALCODE: +\nSET &INDX = 1\n    ISREDIT (RECX&INDX) = LINE &I\n    SET DSN1    = &STR(&RECB)\n    ISPEXEC VPUT (DSN1) SHARED\n/*  CONTROL NOLIST NOCON NOSYM\n    IF &FLAG2 = TABL THEN DO\n    SET ISPC2  = &DSN1\n ISPEXEC VPUT (ISPC2) PROFILE\n ISREDIT CANCEL\n    EXIT\n    END\nSET &I = &I +2\nDO WHILE (&I <   &LR)\n    ISREDIT (RECX) = LINE &I\n    IF &SUBSTR(1:2,&STR(&RECX)) = &STR($$) THEN DO\n    GOTO PUTIT\n    END\n\n    IF &SUBSTR(1:4,&STR(&RECX)) = &STR(KEEP) THEN GOTO NOGO\n/*  CONTROL LIST CON SYM\n    SET &INDX = &INDX + 1\n    ISREDIT (RECX&INDX) = LINE &I\n    SET DSN&INDX = &STR(&RECX)\n    ISPEXEC VPUT (DSN&INDX) SHARED\nNOGO: +\n    SET &I = &I + 1\n     END\n/*  CONTROL NOLIST NOCON NOSYM\nPUTIT: +\n    SET DSN&INDX =\n    ISPEXEC VPUT (DSN&INDX) SHARED\n     IF &DEBUG = DEBUG THEN DO\n     GOTO PREDISPL\n     END\n     CONTROL CAPS NOFLUSH NOMSG\nPREDISPL: ISPEXEC VGET (DSN1 DSN2 DSN3 DSN4 DSN5 +\n            DSN6 DSN7 DSN8 DSN9 DSN10 DSN11 DSN12 MEM) SHARED\nDISPLAY: SET &MEM = ISPCMDS\n\n      SET &FOUND = &STR(NOO)\n      SET &DNUM = 0\nDO WHILE &DNUM < 12\n SET &DNUM = &DNUM + 1\n SET &CURDSN = &STR(&&DSN&DNUM)\n SET &DLEN = &LENGTH(&CURDSN)\n IF &DLEN > 0 THEN DO\n       SET &PDSNAME = &CURDSN\n\n     LISTDSI '&PDSNAME' NODIRECTORY\n\n     SET &LISTDSI_RC = &LASTCC\n     IF  &LISTDSI_RC \u00ac= 0 THEN DO\n      SET &CURPOS = &DSN&DNUM\n      SET ZEDSMSG = &STR(INVALID NAME)\n      SET ZEDLMSG = &STR(TSO DATA SET &PDSNAME IS NOT A +\n              CATALOGED DATA SET NAME)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      GOTO DISPLAY\n      END\n     IF &SYSDSORG \u00ac= PO THEN DO\n      SET &CURPOS = &DSN&DNUM\n      SET ZEDSMSG = &STR(NOT A PDS)\n      SET ZEDLMSG = &STR(TSO DATA SET &PDSNAME IS NOT A +\n              PARTITIONED DATA SET NAME)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      GOTO DISPLAY\n      END\n     SET &DLEN =&LENGTH(&MEM)\n     FREE FI(PDSFILE)\n     SET &FCC = &LASTCC\n     IF &INIT = YES THEN +\n     ISPEXEC LMFREE DATAID(&INP)\n     ALLOC DDNAME(PDSFILE) DA('&PDSNAME') SHR REUS\n     SET &FCC = &LASTCC\n     IF &FCC > 0 THEN DO\n      SET &CURPOS = DSN&DNUM\n      SET ZEDSMSG = &STR(COULD NOT ALLOC)\n      SET ZEDLMSG = &STR(DATA SET COULD NOT BE NOT +\n              BE ALLOCATED)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      GOTO DISPLAY\n     END\n   ISPEXEC LMINIT DATAID(INP) DDNAME(PDSFILE) ENQ(SHR)\n   SET &INIT = YES\n    SET LMCC = &LASTCC\n    IF LMCC > 0 THEN DO\n      WRITE RC &LMCC FOR LMINIT- TYPE END OR HIT ENTER\n      READ ANS\n     IF &ANS = &STR(END) THEN DO\n      SET &CURPOS = DSN&DNUM\n      SET ZEDSMSG = &STR(COULD NOT ALLOC)\n      SET ZEDLMSG = &STR(DATA SET COULD NOT BE NOT +\n              BE INITIALIZED)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      GOTO GETOUT\n      END\n     END\n   ISPEXEC LMOPEN DATAID(&INP) OPTION(INPUT)\n    SET LMCC = &LASTCC\n    IF LMCC > 0 THEN DO\n      WRITE RC &LMCC FOR LMINIT- TYPE END OR HIT ENTER\n      READ ANS\n     IF &ANS = &STR(END) THEN DO\n      SET &CURPOS = DSN&DNUM\n      SET ZEDSMSG = &STR(COULD NOT ALLOC)\n      SET ZEDLMSG = &STR(DATA SET COULD NOT BE NOT +\n              BE INITIALIZED)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      GOTO GETOUT\n      END\n     END\n    SET &INMEMB = &MEM\n    ISPEXEC LMMFIND DATAID(&INP) MEMBER(&INMEMB)\n    SET LMCC = &LASTCC\n   IF &LMCC = 0 THEN DO\n      SET &CURPOS = DSN&DNUM\n      SET &FMEM&DNUM = &STR(====>)\n     SET &ISPC1 = &PDSNAME\n     ISPEXEC VPUT (ISPC1) PROFILE\n      GOTO FINIS\n      ISPEXEC SETMSG MSG(ISRZ001)\n     ISPEXEC LMCLOSE DATAID(&INP)\n     SET &LMCC = &LASTCC\n     ISPEXEC LMFREE DATAID(&INP)\n     SET &LMCC = &LASTCC\n     FREE FI(PDSFILE)\n      ISREDIT CANCEL\n   END\n   END\n  END\n    IF &FOUND \u00ac= &STR(YES) THEN DO\n      SET ZEDSMSG = &STR(&MEM NOT FOUND)\n      SET ZEDLMSG = &STR(MEMBER &MEM NOTFOUND IN CONCATENATION)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      GOTO PREDISPL\n    END\n  ELSE DO\n      SET ZEDSMSG = &STR(&MEM FOUND)\n      SET ZEDLMSG = &STR(MEMBER &MEM FOUND IN &PDSNAME)\n      ISPEXEC SETMSG MSG(ISRZ001)\n    GOTO DISPLAY\n   END\n MSG: +\n ISPEXEC CONTROL DISPLAY REFRESH\n  GOTO PREDISPL\n FINIS: +\n     ISPEXEC LMCLOSE DATAID(&INP)\n     SET &LMCC = &LASTCC\n     ISPEXEC LMFREE DATAID(&INP)\n     SET &LMCC = &LASTCC\n     FREE DDNAME(PDSFILE)\n     SET &FCC = &LASTCC\n     SET &FLAG2 = TABL\n     ISPEXEC VPUT (FLAG2) PROFILE\n     SET &TARGETDD = ISPTABL\n     SET &FLAG =\n     ISREDIT END\n EXIT\n GETOUT +\n     ISPEXEC LMCLOSE DATAID(&INP)\n     SET &LMCC = &LASTCC\n     ISPEXEC LMFREE DATAID(&INP)\n     SET &LMCC = &LASTCC\n     FREE  FI(PDSFILE)\n     SET &FCC = &LASTCC\n  EXIT\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COBBOX": {"ttr": 3085, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00/\\x00=\\x00\\x00\\xc3\\xd6\\xc2\\xd3\\xe2\\xd9\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 47, "newlines": 61, "modlines": 0, "user": "COBLSRC"}, "text": "ISREDIT MACRO (HELP) NOPROCESS\n IF &HELP = ? THEN DO\n ISPEXEC DISPLAY PANEL(COBBOX)\n EXIT\n END\n DO WHILE &LENGTH(&STR(&STARS)) LT 65\n SET &STARS = &STR(&STR(&STARS)&STR(*))\n END\n   ISREDIT PROCESS RANGE C\n   SET LCC = &LASTCC\n   ISREDIT (RC) = RANGE_CMD\n   IF &LASTCC = 4 | &STR(&RC) \u00ac= &STR(C) THEN DO\n      SET &ZEDSMSG = NO RANGE SPECIFIED\n      SET &ZEDLMSG = YOU MUST SPECIFY A RANGE OF LINES TO BE BOXED +\n         USING A \"C<N>\" OR \"CC\"\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(4)\n   END\n   ISREDIT (FIRST) = LINENUM .ZFRANGE\n   ISREDIT (LAST) = LINENUM .ZLRANGE\n   ISREDIT (FR) = LINENUM .ZFRANGE\n   ISREDIT (LR) = LINENUM .ZLRANGE\n       ISREDIT MASKLINE = \"&STR(      &STARS)\"\n       ISREDIT LINE_BEFORE &FIRST = MASKLINE\n  ISREDIT BOUNDS = 7 72\n  ISREDIT (LB,RB) = BOUNDS\n  SET I = &FR\n  DO WHILE (&I <= &LR)\n    ISREDIT\n    ISREDIT LABEL &I = .LJ\n    ISREDIT SEEK P'\u00ac' .LJ .LJ &LB &RB FIRST\n    ISREDIT SEEK P'\u00ac' .LJ .LJ &LB &RB LAST\n    ISREDIT CHANGE P'=' '*' 7\n    ISREDIT CHANGE P'=' '*' 71\n        END\n    IF &I = &FR THEN ISREDIT LABEL &I = .LJX\n    SET I = &I + 1\n  END\n  ISREDIT SEEK P'=' .LJX .LJX FIRST\n       ISREDIT MASKLINE = \"&STR(      &STARS)\"\n  SET &LAST = &LAST + 1\n       ISREDIT LINE_AFTER &LAST = MASKLINE\nERROROUT:+\n       ISREDIT MASKLINE = ' '\n      SET RC = 0\n  END\n  EXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COBLCAS": {"ttr": 3087, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00D\\x00D\\x00\\x00\\xc3\\xd6\\xc2\\xd3\\xe2\\xd9\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 68, "newlines": 68, "modlines": 0, "user": "COBLSRC"}, "text": "       ID DIVISION.\n       PROGRAM-ID.  LCASE  .\n       ENVIRONMENT DIVISION.                                            000000\n       CONFIGURATION SECTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01  LEN0      PIC 9(6) VALUE 0 COMP.\n       01  ISREDIT   PIC X(8) VALUE \"ISREDIT \".\n       01  EM1       PIC X(10) VALUE \"\u00a2  MACRO \u00a2\".\n       01  A1        PIC X(22) VALUE \"\u00a2 CHANGE 'A' 'a' ALL \u00a2\".\n       01  B1        PIC X(22) VALUE \"\u00a2 CHANGE 'B' 'b' ALL \u00a2\".\n       01  C1        PIC X(22) VALUE \"\u00a2 CHANGE 'C' 'c' ALL \u00a2\".\n       01  D1        PIC X(22) VALUE \"\u00a2 CHANGE 'D' 'd' ALL \u00a2\".\n       01  E1        PIC X(22) VALUE \"\u00a2 CHANGE 'E' 'e' ALL \u00a2\".\n       01  F1        PIC X(22) VALUE \"\u00a2 CHANGE 'F' 'f' ALL \u00a2\".\n       01  G1        PIC X(22) VALUE \"\u00a2 CHANGE 'G' 'g' ALL \u00a2\".\n       01  H1        PIC X(22) VALUE \"\u00a2 CHANGE 'H' 'h' ALL \u00a2\".\n       01  I1        PIC X(22) VALUE \"\u00a2 CHANGE 'I' 'i' ALL \u00a2\".\n       01  J1        PIC X(22) VALUE \"\u00a2 CHANGE 'J' 'j' ALL \u00a2\".\n       01  K1        PIC X(22) VALUE \"\u00a2 CHANGE 'K' 'k' ALL \u00a2\".\n       01  L1        PIC X(22) VALUE \"\u00a2 CHANGE 'L' 'l' ALL \u00a2\".\n       01  M1        PIC X(22) VALUE \"\u00a2 CHANGE 'M' 'm' ALL \u00a2\".\n       01  N1        PIC X(22) VALUE \"\u00a2 CHANGE 'N' 'n' ALL \u00a2\".\n       01  O1        PIC X(22) VALUE \"\u00a2 CHANGE 'O' 'o' ALL \u00a2\".\n       01  P1        PIC X(22) VALUE \"\u00a2 CHANGE 'P' 'p' ALL \u00a2\".\n       01  Q1        PIC X(22) VALUE \"\u00a2 CHANGE 'Q' 'q' ALL \u00a2\".\n       01  R1        PIC X(22) VALUE \"\u00a2 CHANGE 'R' 'r' ALL \u00a2\".\n       01  S1        PIC X(22) VALUE \"\u00a2 CHANGE 'S' 's' ALL \u00a2\".\n       01  T1        PIC X(22) VALUE \"\u00a2 CHANGE 'T' 't' ALL \u00a2\".\n       01  U1        PIC X(22) VALUE \"\u00a2 CHANGE 'U' 'u' ALL \u00a2\".\n       01  V1        PIC X(22) VALUE \"\u00a2 CHANGE 'V' 'v' ALL \u00a2\".\n       01  W1        PIC X(22) VALUE \"\u00a2 CHANGE 'W' 'w' ALL \u00a2\".\n       01  X1        PIC X(22) VALUE \"\u00a2 CHANGE 'X' 'x' ALL \u00a2\".\n       01  Y1        PIC X(22) VALUE \"\u00a2 CHANGE 'Y' 'y' ALL \u00a2\".\n       01  Z1        PIC X(22) VALUE \"\u00a2 CHANGE 'Z' 'z' ALL \u00a2\".\n       01  RE1       PIC X(10) VALUE \"\u00a2 RESET \u00a2\".\n       01  CAPS      PIC X(14) VALUE \"\u00a2 CAPS = OFF \u00a2\".\n       PROCEDURE DIVISION.\n           CALL \"ISPLINK\" USING ISREDIT LEN0 EM1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 CAPS\n           CALL \"ISPLINK\" USING ISREDIT LEN0 A1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 B1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 C1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 D1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 E1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 F1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 G1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 H1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 I1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 J1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 K1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 L1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 M1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 N1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 O1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 P1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 Q1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 R1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 S1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 T1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 U1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 V1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 W1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 X1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 Y1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 Z1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 RE1\n           GOBACK.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COBSEPL": {"ttr": 3329, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00-\\x00-\\x00\\x00\\xc3\\xd6\\xc2\\xd3\\xe2\\xd9\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "COBLSRC"}, "text": "       ID DIVISION.\n       PROGRAM-ID.  SEPLINE.\n       ENVIRONMENT DIVISION.                                            000000\n       CONFIGURATION SECTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01  LINEX     PIC X(70) VALUE  ALL \"-\".\n       01  LASTL     PIC 9(6) VALUE 0 COMP.\n       01  LYNE      PIC 9(6) VALUE 0 COMP.\n       01  ISREDIT   PIC X(8) VALUE \"ISREDIT \".\n       01  VDEFINE   PIC X(8) VALUE \"VDEFINE \".\n       01  ZLASTL    PIC X(8) VALUE \"LASTL   \".\n       01  ZLINE     PIC X(8) VALUE \"LINE    \".\n       01  ZLINEX    PIC X(8) VALUE \"LINEX   \".\n       01  FIXED     PIC X(8) VALUE \"FIXED   \".\n       01  CHAR      PIC X(8) VALUE \"CHAR    \".\n       01  LEN0      PIC 9(6) VALUE 0 COMP.\n       01  LEN4      PIC 9(6) VALUE 4 COMP.\n       01  LEN70     PIC 9(6) VALUE 70 COMP.\n       01  EM1       PIC X(10) VALUE \"\u00a2  MACRO \u00a2\".\n       01  EM2       PIC X(24) VALUE \"\u00a2  (SAVE) = USER_STATE \u00a2\".\n       01  EM3       PIC X(10) VALUE \"\u00a2  RESET \u00a2\".\n       01  EM4       PIC X(25) VALUE \"\u00a2  EXCLUDE ------ 1 ALL \u00a2\".\n       01  EM5       PIC X(18) VALUE \"\u00a2  DELETE ALL X  \u00a2\".\n       01  EM6       PIC X(30) VALUE \"\u00a2 LINE_AFTER &LINE = (LINEX) \u00a2\".\n       01  EM7       PIC X(28) VALUE \"\u00a2 (LASTL) = LINENUM .ZLAST \u00a2\".\n       01  EM8       PIC X(23) VALUE \"\u00a2 USER_STATE = (SAVE) \u00a2\".\n       PROCEDURE DIVISION.\n           CALL \"ISPLINK\" USING VDEFINE ZLASTL LASTL FIXED LEN4\n           CALL \"ISPLINK\" USING VDEFINE ZLINE  LYNE  FIXED LEN4\n           CALL \"ISPLINK\" USING VDEFINE ZLINEX LINEX CHAR  LEN70\n           CALL \"ISPLINK\" USING ISREDIT LEN0 EM1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 EM2\n           CALL \"ISPLINK\" USING ISREDIT LEN0 EM3\n           CALL \"ISPLINK\" USING ISREDIT LEN0 EM4\n           CALL \"ISPLINK\" USING ISREDIT LEN0 EM5\n           MOVE 1 TO LASTL\n           MOVE 0 TO LYNE\n           PERFORM LOOP UNTIL LYNE IS NOT LESS THAN (LASTL + 1)\n           CALL \"ISPLINK\" USING ISREDIT LEN0 EM8\n           GOBACK.\n       LOOP.\n           CALL \"ISPLINK\" USING ISREDIT LEN0 EM6\n           CALL \"ISPLINK\" USING ISREDIT LEN0 EM7\n           ADD 2 TO LYNE.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COBUCAS": {"ttr": 3331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00B\\x00B\\x00\\x00\\xc3\\xd6\\xc2\\xd3\\xe2\\xd9\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 66, "newlines": 66, "modlines": 0, "user": "COBLSRC"}, "text": "       ID DIVISION.\n       PROGRAM-ID.  UCASE\n       ENVIRONMENT DIVISION.                                            000000\n       CONFIGURATION SECTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01  LEN0      PIC 9(6) VALUE 0 COMP.\n       01  ISREDIT   PIC X(8) VALUE \"ISREDIT \".\n       01  EM1       PIC X(10) VALUE \"\u00a2  MACRO \u00a2\".\n       01  A1        PIC X(22) VALUE \"\u00a2 CHANGE 'a' 'A' all \u00a2\".\n       01  B1        PIC X(22) VALUE \"\u00a2 CHANGE 'b' 'B' all \u00a2\".\n       01  C1        PIC X(22) VALUE \"\u00a2 CHANGE 'c' 'C' all \u00a2\".\n       01  D1        PIC X(22) VALUE \"\u00a2 CHANGE 'd' 'D' all \u00a2\".\n       01  E1        PIC X(22) VALUE \"\u00a2 CHANGE 'e' 'E' all \u00a2\".\n       01  F1        PIC X(22) VALUE \"\u00a2 CHANGE 'f' 'F' all \u00a2\".\n       01  G1        PIC X(22) VALUE \"\u00a2 CHANGE 'g' 'G' all \u00a2\".\n       01  H1        PIC X(22) VALUE \"\u00a2 CHANGE 'h' 'H' all \u00a2\".\n       01  I1        PIC X(22) VALUE \"\u00a2 CHANGE 'i' 'I' all \u00a2\".\n       01  J1        PIC X(22) VALUE \"\u00a2 CHANGE 'j' 'J' all \u00a2\".\n       01  K1        PIC X(22) VALUE \"\u00a2 CHANGE 'k' 'K' all \u00a2\".\n       01  L1        PIC X(22) VALUE \"\u00a2 CHANGE 'l' 'L' all \u00a2\".\n       01  M1        PIC X(22) VALUE \"\u00a2 CHANGE 'm' 'M' all \u00a2\".\n       01  N1        PIC X(22) VALUE \"\u00a2 CHANGE 'n' 'N' all \u00a2\".\n       01  O1        PIC X(22) VALUE \"\u00a2 CHANGE 'o' 'O' all \u00a2\".\n       01  P1        PIC X(22) VALUE \"\u00a2 CHANGE 'p' 'P' all \u00a2\".\n       01  Q1        PIC X(22) VALUE \"\u00a2 CHANGE 'q' 'Q' all \u00a2\".\n       01  R1        PIC X(22) VALUE \"\u00a2 CHANGE 'r' 'R' all \u00a2\".\n       01  S1        PIC X(22) VALUE \"\u00a2 CHANGE 's' 'S' all \u00a2\".\n       01  T1        PIC X(22) VALUE \"\u00a2 CHANGE 't' 'T' all \u00a2\".\n       01  U1        PIC X(22) VALUE \"\u00a2 CHANGE 'u' 'U' all \u00a2\".\n       01  V1        PIC X(22) VALUE \"\u00a2 CHANGE 'v' 'V' all \u00a2\".\n       01  W1        PIC X(22) VALUE \"\u00a2 CHANGE 'w' 'W' all \u00a2\".\n       01  X1        PIC X(22) VALUE \"\u00a2 CHANGE 'x' 'X' all \u00a2\".\n       01  Y1        PIC X(22) VALUE \"\u00a2 CHANGE 'y' 'Y' all \u00a2\".\n       01  Z1        PIC X(22) VALUE \"\u00a2 CHANGE 'z' 'Z' all \u00a2\".\n       01  RE1       PIC X(10) VALUE \"\u00a2 RESET \u00a2\".\n       PROCEDURE DIVISION.\n           CALL \"ISPLINK\" USING ISREDIT LEN0 EM1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 A1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 B1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 C1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 D1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 E1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 F1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 G1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 H1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 I1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 J1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 K1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 L1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 M1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 N1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 O1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 P1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 Q1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 R1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 S1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 T1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 U1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 V1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 W1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 X1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 Y1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 Z1\n           CALL \"ISPLINK\" USING ISREDIT LEN0 RE1\n           GOBACK.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COMMENTS": {"ttr": 3333, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x15\\x00\\x15\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP)\n  IF &STR(&HELP) = ? THEN +\n    DO\n      ISPEXEC DISPLAY PANEL(COMMENTS)\n      EXIT CODE(1)\n    END\n/*********************************************************************/\n/*  THIS ISPF/PDF EDIT MACRO DISPLAYS ONLY COMMENT LINES, THAT IS    */\n/*  LINES THAT CONTAIN A / FOLLOWED BY AN *.                         */\n/*                                                                   */\n/*  TO RUN:                                                          */\n/*     ENTER COMMENTS ON THE COMMAND LINE                            */\n/*********************************************************************/\n\n/* EXCLUDE ALL LINES */\nISREDIT EXCLUDE ALL\n\n/* FIND ALL COMMENT LINES\nISREDIT FIND ALL '/*'\n\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMPRESS": {"ttr": 3335, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00G\\x00G\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 71, "newlines": 71, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP)\n      IF &HELP = ? THEN DO\n      ISPEXEC DISPLAY PANEL(COMPRESS)\n      EXIT\n      END\n ISREDIT (WORKDSN) = DATASET\n LISTDSI '&WORKDSN'\n SET &DSORG = &SYSDSORG\n IF &DSORG NE PO THEN DO\n           SET ZEDSMSG = &STR(DATASET MUST BE DSORG PO)\n   SET ZEDLMSG = &STR('&WORKDSN' IS DSORG &DSORG ONLY DSORG PO +\n                      CAN BE COMPRESSED)\n           ISPEXEC SETMSG MSG(ISRZ001)\n        EXIT\n  END\nSET  PDSDSN = &WORKDSN\nIF &LIST = LIST THEN CONTROL LIST CONLIST SYMLIST\n\nISPEXEC  LMINIT DATAID(PDSID) DATASET('&PDSDSN') +\n                ENQ(EXCLU)                       +\n                ORG(PDSORG)\nSET &INITCC = &LASTCC\nIF &INITCC \u00ac= 0 THEN +\n   DO\n           SET ZEDSMSG = &STR(LMINIT FAILED CODE &INITCC)\n   SET ZEDLMSG = &STR('&PDSDSN' IS NOT ALLOCATED OR PARTITIONED)\n           ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(8)\n   END\n\nSET RET1 = &LASTCC\n  ISPEXEC  LMCOMP DATAID(&PDSID)\n  SET &COMPCC = &LASTCC\n  IF &COMPCC = 0 THEN\n    DO\n           SET ZEDSMSG = &STR(COMPRESS COND CODE &COMPCC)\n             SET ZEDLMSG = &STR('&PDSDSN' SUCESSFULLY COMPRESED)\n           ISPEXEC SETMSG MSG(ISRZ001)\n    END                   /*      DATA-ID.\n  IF &COMPCC = 12 THEN  DO\n           SET ZEDSMSG = &STR(COMPRESS COND CODE &COMPCC)\n             SET ZEDLMSG = &STR('&PDSDSN' NOT A PDS )\n           ISPEXEC SETMSG MSG(ISRZ001)\n      END\n  IF &COMPCC = 10 THEN  DO\n           SET ZEDSMSG = &STR(COMPRESS COND CODE &COMPCC)\n             SET ZEDLMSG = &STR('&PDSDSN' NOT A PDS )\n           ISPEXEC SETMSG MSG(ISRZ001)\n      END\n  IF &COMPCC = 20 THEN  DO\n           SET ZEDSMSG = &STR(COMPRESS COND CODE &COMPCC)\n             SET ZEDLMSG = &STR(UNABLE TO COMPRESS '&PDSDSN')\n           ISPEXEC SETMSG MSG(ISRZ001)\n      END\nIF &RET1 \u00ac= 0 THEN GOTO EXIT1\nISPEXEC LMCLOSE DATAID(&PDSID)\nISPEXEC LMFREE DATAID(&PDSID)\nEXIT\nEXIT1: +\nIF &INITCC = 8 THEN +\n   DO\n         ISPEXEC LMCLOSE DATAID(&PDSID)\n         ISPEXEC LMFREE DATAID(&PDSID)\n      EXIT CODE(0)\n   END\nISPEXEC LMCLOSE DATAID(&PDSID)\nISPEXEC LMFREE DATAID(&PDSID)\nEXIT\nISPEXEC LMCLOSE DATAID(&PDSID)\nISPEXEC LMFREE DATAID(&PDSID)\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CONLY": {"ttr": 3338, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00Z\\x00Z\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 90, "newlines": 90, "modlines": 0, "user": "EDITMAC"}, "text": "  ISREDIT MACRO (STR1 STR2 RANG1 RANG2 KEY1 COL1 COL2 KEYZ)\n/* MACRO: CONLY                                                       */\n/*                                                                    */\n/* FUNCTION: Displays only those lines with changes in them.          */\n/*  Accepts most CHANGE command parameters.\n/*                                                                    */\n/*                                                                    */\n/*  Written by MICHAEL BOTOS  --  05/29/85                            */\n/*                                                                    */\n/*   UPDATE to add NOCAPS for TSO/E: 12/04/85 - MZB                   */\n/*                                                                    */\n/*                                                                    */\n  CONTROL NOCAPS\n  ISPEXEC CONTROL ERRORS RETURN\n\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/* |                                                               | */\n/* | SYNTAX HELP                                                   | */\n/* |                                                               | */\n/* ----------------------------------------------------------------- */\n  IF &STR(&STR1.) = &STR(?) THEN +\n    DO\n       ISPEXEC DISPLAY PANEL(#CONLY)\n     EXIT CODE(0)\n    END\n\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/* |                                                               | */\n/* | Test for too many parameters                                  | */\n/* |                                                               | */\n/* ----------------------------------------------------------------- */\n  IF X&KEYZ. NE &STR(X) THEN +\n    DO\n       SET ZEDSMSG = &STR(Too many KEYWORDS)\n       SET ZEDLMSG = &STR(Enter CONLY HELP FOR SYNTAX and supported KEY)\n       ISPEXEC SETMSG MSG(ISRZ001)\n     EXIT CODE(12)\n    END\n\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/* |                                                               | */\n/* | Testing for unsupported keywords: ALL, FIRST, LAST, NEXT, NX, | */\n/* |  PREV, and X.                                                 | */\n/* |                                                               | */\n/* | NOTE: Shift back to CAPS for this processing only.            | */\n/* |                                                               | */\n/* ----------------------------------------------------------------- */\n\n  CONTROL CAPS\n  IF X&RANG1. = &STR(XALL) OR X&RANG2. = &STR(XALL) +\n    OR X&KEY1. = &STR(XALL) OR X&COL1. = &STR(XALL) +\n    OR X&COL2. = &STR(XALL) THEN GOTO BADKEY\n  IF X&RANG1. = &STR(XFIRST) OR X&RANG2. = &STR(XFIRST) +\n    OR X&KEY1. = &STR(XFIRST) OR X&COL1. = &STR(XFIRST) +\n    OR X&COL2. = &STR(XFIRST) THEN GOTO BADKEY\n  IF X&RANG1. = &STR(XLAST) OR X&RANG2. = &STR(XLAST) +\n    OR X&KEY1. = &STR(XLAST) OR X&COL1. = &STR(XLAST) +\n    OR X&COL2. = &STR(XLAST) THEN GOTO BADKEY\n  IF X&RANG1. = &STR(XNEXT) OR X&RANG2. = &STR(XNEXT) +\n    OR X&KEY1. = &STR(XNEXT) OR X&COL1. = &STR(XNEXT) +\n    OR X&COL2. = &STR(XNEXT) THEN GOTO BADKEY\n  IF X&RANG1. = &STR(XNX) OR X&RANG2. = &STR(XNX) +\n    OR X&KEY1. = &STR(XNX) OR X&COL1. = &STR(XNX) +\n    OR X&COL2. = &STR(XNX) THEN GOTO BADKEY\n  IF X&RANG1. = &STR(XPREV) OR X&RANG2. = &STR(XPREV) +\n    OR X&KEY1. = &STR(XPREV) OR X&COL1. = &STR(XPREV) +\n    OR X&COL2. = &STR(XPREV) THEN GOTO BADKEY\n  IF X&RANG1. = &STR(XX) OR X&RANG2. = &STR(XX) +\n    OR X&KEY1. = &STR(XX) OR X&COL1. = &STR(XX) +\n    OR X&COL2. = &STR(XX) THEN GOTO BADKEY\n  CONTROL NOCAPS\n\n\n  ISREDIT EXCLUDE ALL\n  ISREDIT CHANGE &STR1. &STR2. &RANG1. &RANG2. &KEY1. &COL1. &COL2. ALL\n\n  EXIT CODE(0)\n\n/* ----------------->   ITEM DOCUMENTATION    <--------------------- */\n/* |                                                               | */\n/* | Set message for unsupported keywords.                         | */\n/* |                                                               | */\n/* ----------------------------------------------------------------- */\n  BADKEY: +\n    DO\n       SET ZEDSMSG = &STR(Invalid KEYWORD)\n       SET ZEDLMSG = &STR(Enter CONLY ? to list SYNTAX and supported KEY\n       ISPEXEC SETMSG MSG(ISRZ001)\n     EXIT CODE(12)\n    END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CONT": {"ttr": 3341, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x001\\x002\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 49, "newlines": 50, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP) NOPROCESS\n                         /* ANOTHER FINE EDIT MACRO */\n                             /* BROUGHT TO YOU */\n                        /* BY YOUR TECHNICAL SUPPORT */\n                                  /* STAFF */\n  IF &STR(&HELP) = ? THEN +\n    DO\n      ISPEXEC DISPLAY PANEL(CONT)\n      EXIT CODE(1)\n    END\n  ISPEXEC CONTROL ERRORS RETURN\n  CONTROL ASIS\n  /* PROCESS LINE COMMANDS, CHECK IF C  WAS SPECIFIED */\n  ISREDIT PROCESS RANGE C\n  SET LCC = &LASTCC\n  ISREDIT (RC) = RANGE_CMD\n  IF &LASTCC = 4 | &STR(&RC) \u00ac= &STR(C) THEN +\n    DO\n      SET &ZEDSMSG = &STR(NO RANGE SPECIFIED)\n      SET &ZEDLMSG = &STR(YOU MUST SPECIFY A RANGE OF LINES +\n                          TO BE CENTERED, USING \"CN\" OR \"CC\")\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(12)\n    END\n\n  ISREDIT (FR)  = LINENUM .ZFRANGE\n  ISREDIT (LR)  = LINENUM .ZLRANGE\n  ISREDIT (LB,RB) = BOUNDS\n  SET I = &FR\n  DO WHILE (&I <= &LR)\n    ISREDIT\n    ISREDIT LABEL &I = .LJ\n    ISREDIT SEEK P'\u00ac' .LJ .LJ &LB &RB FIRST\n    ISREDIT SEEK P'\u00ac' .LJ .LJ &LB &RB LAST\n    ISREDIT CHANGE ' ' 'X' 72\n    SET COUNT = &EVAL(&LEFT - &RIGHT + 1) / 2\n    IF &COUNT > 0 THEN +\n      ISREDIT SHIFT ) &I &COUNT\n    ELSE +\n      IF &COUNT < 0 THEN +\n        DO\n          SET COUNT = -1*&COUNT\n          ISREDIT SHIFT ( &I &COUNT\n        END\n    IF &I = &FR THEN ISREDIT LABEL &I = .LJX\n    SET I = &I + 1\n  END\n  ISREDIT SEEK P'=' .LJX .LJX FIRST\n  EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CONTROL": {"ttr": 3343, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00#\\x00#\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP) NOPROCESS\n     IF &HELP = ? THEN +\n       DO\n         ISPEXEC DISPLAY PANEL(CONTROL)\n         EXIT\n       END\nSTART: +\nIF &HELP = ON THEN DO\nSET &CNTL = &STR(     CONTROL MSG LIST SYMLIST CONLIST)\nGOTO DEST\nEND\nIF &HELP = OFF THEN DO\nSET &CNTL = &STR(     CONTROL NOMSG NOLIST NOSYMLIST NOCONLIST)\nGOTO DEST\nEND\nSET &HELP = ON\nGOTO START\nDEST: +\n  ISREDIT PROCESS DEST\n  IF &LASTCC = 0 THEN DO\n  ISREDIT LOCATE .ZDEST\n  IF &LASTCC = 8 THEN GOTO EMPTY\n       ISREDIT MASKLINE = \"&CNTL\"\n       ISREDIT LINE_AFTER .ZDEST = MASKLINE\n    GOTO ERROROUT\nEMPTY: +\n     ISPEXEC VGET ZLLGJOB1\n       ISREDIT MASKLINE = \"&CNTL\"\n       ISREDIT LINE_AFTER 0 = MASKLINE\nERROROUT:+\n       ISREDIT MASKLINE = ' '\n      SET RC = 0\n  END\n  END\n  EXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CUSTBOX": {"ttr": 3345, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00 \\x00\\x1f\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 32, "newlines": 31, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (WDTH,DPTH)\n      IF &WDTH = ? THEN DO\n      ISPEXEC DISPLAY PANEL(CUSTBOX)\n      EXIT\n      END\n\nISREDIT (ROW,COL) = CURSOR\nISPEXEC CONTROL ERRORS RETURN\nIF &WDTH = THEN SET &WDTH = 20\nIF &DPTH = THEN SET &DPTH = 10\nSET &DASHES = &STR(----------------------------------------)\nSET &DASHES = &STR(&DASHES&DASHES)\nSET &OBEN = &STR(+&SUBSTR(1:&WDTH-2,&DASHES)+)\nSET &UNTEN = &STR(+&SUBSTR(1:&WDTH-2,&DASHES)+)\nSET &MAX = &DPTH - 2\nSET &CNT = 1\nISREDIT LINE &ROW               = LINE + < &COL '&OBEN'>\nDO WHILE(&CNT LE &MAX)\n   ISREDIT LINE &EVAL(&ROW+&CNT) = +\n     LINE + < &COL '|' &EVAL(&COL+&WDTH-1) '|'>\n   SET &CNT = &CNT + 1\nEND\nISREDIT LINE &EVAL(&ROW+&CNT) = LINE + < &COL '&UNTEN'>\nIF &MAXCC > 0 THEN DO\n      SET ZEDSMSG = &STR(INCOMPLETE BOX)\n           SET ZEDLMSG = &STR(NOT ENOUGH ROOM TO DRAW A COMPLETE BOX)\n   ISPEXEC SETMSG MSG(ISRZ000)\nEND\nSET &COL = &COL + 1\nSET &ROW = &ROW + 1\nISREDIT CURSOR = (ROW,COL)\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CUT": {"ttr": 3347, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00{\\x00y\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 123, "newlines": 121, "modlines": 0, "user": "EDITMAC"}, "text": " ISREDIT MACRO (PARM) NOPROCESS\n ISPEXEC CONTROL ERRORS RETURN\n IF &PARM \u00ac= &Z THEN +\n   DO\n     IF &PARM = ? THEN +\n       DO\n         ISPEXEC DISPLAY PANEL(CUT)\n         EXIT\n       END\n     IF &PARM = DELETE THEN DO\n  DELC2\n         EXIT\n  END\n     IF &PARM = SHOW THEN DO\n  SCUT2\n         EXIT\n       END\n     ELSE +\n      DO\n       SET SYSDVAL = &PARM\n       READDVAL LEVEL,KEYWORD\n        IF &DATATYPE(&LEVEL) \u00ac= NUM THEN +\n          DO\n           SET ZEDSMSG = &STR(INVALID ARGUMENT)\n             SET ZEDLMSG = &STR(VALID ARGUMENTS ARE A \"?\" OR A LEVEL +\n                               NUMBER, WITH OPTIONAL \"SHOW\")\n           ISPEXEC SETMSG MSG(ISRZ001)\n          EXIT\n        END\n        IF &KEYWORD \u00ac= &Z THEN +\n          IF &KEYWORD = SHOW THEN +\n             DO\n               SET POOL = PROFILE\n               ISPEXEC VPUT (LEVEL,POOL) PROFILE\n               SET &RC = &LASTCC\n               ISPEXEC CONTROL DISPLAY SM START(2)\n               ISPEXEC SELECT CMD(CUTSHOW)\n               EXIT CODE(&LASTCC)\n             END\n           ELSE +\n             DO\n           SET ZEDSMSG = &STR(INVALID ARGUMENT)\n             SET ZEDLMSG = &STR(VALID ARGUMENTS ARE A \"?\" OR A LEVEL +\n                               NUMBER, WITH OPTIONAL \"SHOW\")\n           ISPEXEC SETMSG MSG(ISRZ001)\n           EXIT\n          END\n     ELSE\n    END\n  END\nELSE +\n  SET LEVEL = 1\nISREDIT PROCESS RANGE C M\nSET RC = &LASTCC\nIF &RC = 4 THEN +\n  DO\n     SET ZEDSMSG = &STR(RANGE NOT SPECIFIED)\n     SET ZEDLMSG = &STR(SPECIFY RANGE FOR THE CUT AND RE-EXECUTE +\n                        THE MACRO)\n     ISPEXEC SETMSG MSG(ISRZ001)\n     EXIT CODE(4)\n   END\nELSE +\n    IF &RC > 0 THEN +\n      DO\n     SET ZEDSMSG = &STR(SEVERE ERROR)\n     SET ZEDLMSG = &STR(SEVERE ERROR OCCURED, RETURN CODE WAS +\n                        &RC)\n     ISPEXEC SETMSG MSG(ISRZ001)\n     EXIT CODE(&RC)\n   END\n ISREDIT (CMD) = RANGE_CMD\n ISREDIT (FIRST) = LINENUM .ZFRANGE\n ISREDIT (LAST) = LINENUM .ZLRANGE\n SET   LINESTOCUT = &EVAL(&LAST-&FIRST+1)\n SET RCUTLM&LEVEL = &LINESTOCUT\n SET &TCUT = &LINESTOCUT\n ISREDIT (LBND,RBND) = BOUNDS\n SET RCUTLB&LEVEL = &LBND\n SET RCUTRB&LEVEL = &RBND\n ISPEXEC VPUT (RCUTLM&LEVEL,RCUTLB&LEVEL,RCUTRB&LEVEL) PROFILE\n SET RC = &LASTCC\n SET INDEX = 0\n CONTROL ASIS\n DO WHILE &INDEX < &LINESTOCUT\n   ISREDIT (WKLINE) = LINE &EVAL(&FIRST + &INDEX)\n   SET RCUT&LEVEL&EVAL(&INDEX+1) = &SUBSTR(&LBND:&RBND,&NRSTR(&WKLINE))\n   ISPEXEC VPUT (RCUT&LEVEL&EVAL(&INDEX+1)) PROFILE\n   SET &RC = &LASTCC\n   SET INDEX  = &INDEX + 1\nEND\nIF &CMD = M THEN +\n  DO\n    ISREDIT (WIDTH) = DATA_WIDTH\n    IF &RBND-&LBND+1 = &WIDTH THEN +\n      ISREDIT DELETE &FIRST &LAST\n    ELSE +\n      DO\n        SET INDEX = 0\n        SET BLANK = &STR(                                              -\n                                                                       -\n                                                                       -\n                                                               )\n      DO WHILE &INDEX < &LINESTOCUT\n       ISREDIT (WKLINE) = LINE &EVAL(&FIRST + &INDEX)\n       IF &LBND > 1 THEN +\n         SET NULINE = &SUBSTR(1:&LBND-1,&NRSTR(&WKLINE))\n       ELSE\n         SET NULINE = &Z\n       SET BLINE = &NRSTR(&NULINE)&SUBSTR(1:&RBND-&LBND+1,+\n           &STR(BLANK))\n       IF &RBND < &WIDTH THEN +\n         SET NULINE = &NRSTR(&BLINE)&SUBSTR(&RBND+1:&WIDTH,+\n           &NRSTR(&WKLINE))\n       ELSE +\n         SET NULINE = &NRSTR(&BLINE)\n       ISREDIT LINE &EVAL(&FIRST + &INDEX) = (NULINE)\n       SET INDEX = &INDEX + 1\n     END\n   END\n END\n           SET ZEDSMSG = &STR(&TCUT LINE(S) CUT LEVEL &LEVEL)\n           ISPEXEC SETMSG MSG(ISRZ001)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CUTTO": {"ttr": 3585, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00=\\x00=\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 61, "newlines": 61, "modlines": 0, "user": "EDITMAC"}, "text": " ISREDIT MACRO (TARGET) NOPROCESS                                       0000000\n      IF &TARGET = ? THEN DO                                            0000000\n      ISPEXEC DISPLAY PANEL(CUTTO)                                      0000000\n      EXIT                                                              0000000\n      END                                                               0000000\n ISREDIT (LREC) = LRECL                                                 0000000\n ISREDIT (DSN) = DATASET                                                0000000\n LISTDSI &TARGET                                                        0000000\nIF &LASTCC NE 0 THEN GOTO DSNERROR                                      0000000\n IF &SYSLRECL GT &LREC THEN GOTO SETUP                                  0000000\n IF &SYSLRECL LT &LREC THEN SET &TRUNC = YES                            0000000\n SETUP:    ISREDIT (ROW,COL) = CURSOR                                   0000000\n           ISREDIT PROCESS RANGE C M                                    0000000\n           SET &RANGCC = &LASTCC                                        0000000\n           IF &RANGCC GT 0 THEN DO                                      0000000\n           SET ZEDSMSG = &STR(INVALID RANGE)                            0000000\n             SET ZEDLMSG = &STR(USE C OR M RANGE TO INDICATE RANGE OF+  0000000\n                                LINES TO COPY)                          0000000\n           ISPEXEC SETMSG MSG(ISRZ001)                                  0000000\n          EXIT                                                          0000000\n        END                                                             0000000\n           ISREDIT (FIRST) = LINENUM .ZFRANGE                           0000000\n           ISREDIT (LAST)  = LINENUM .ZLRANGE                           0000000\n           CONTROL NOMSG                                                0000000\n ALLOC F(CUTIT) DA(&TARGET) SHR                                         0000000\n IF &LASTCC NE 0 THEN DO                                                0000000\n DSNERROR: +                                                            0000000\n          SET ZEDSMSG = &STR(ALLOCATION PROBLEM)                        0000000\n           SET ZEDLMSG = &STR(CHECK &TARGET FOR PROPER DATASET/MEMBER + 0000000\n                              NAME AND IF IT EXISTS)                    0000000\n           ISPEXEC SETMSG MSG(ISRZ001)                                  0000000\n          EXIT CODE(8)                                                  0000000\n        END                                                             0000000\n OPENFILE CUTIT OUTPUT                                                  0000000\n LOOP: +                                                                0000000\n ISREDIT (CUTIT) = LINE &FIRST                                          0000000\n IF &TRUNC = YES THEN DO                                                0000000\n SET &CUTIT = &SUBSTR(1:&LREC,&STR(&CUTIT))                             0000000\n END                                                                    0000000\n PUTFILE CUTIT                                                          0000000\n SET &FIRST = &FIRST + 1                                                0000000\n IF &FIRST GT &LAST THEN GOTO CLOSEOUT                                  0000000\n GOTO LOOP                                                              0000000\n CLOSEOUT: +                                                            0000000\n CLOSFILE CUTIT                                                         0000000\n FREE F(CUTIT)                                                          0000000\n IF &TRUNC = YES THEN DO                                                0000000\n           SET ZEDSMSG = &STR(DATA TRUNCATED)                           0000000\n             SET ZEDLMSG = &STR(&TARGET LREL = &SYSLRECL DATA CUT TO +  0000000\n                               &DSN LRECL &LREC)                        0000000\n           ISPEXEC SETMSG MSG(ISRZ001)                                  0000000\n          EXIT                                                          0000000\n        END                                                             0000000\n         SET &FIRST = &FIRST -1                                         0000000\n           SET ZEDSMSG = &STR(&FIRST RECORDS TRANSFERED)                0000000\n             SET ZEDLMSG = &STR(&FIRST RECORDS FROM &DSN TRANFERED TO+  0000000\n                                 &TARGET)                               0000000\n           ISPEXEC SETMSG MSG(ISRZ001)                                  0000000\n          EXIT                                                          0000000\n        END                                                             0000000\n EXIT                                                                   0000000\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "D": {"ttr": 3587, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x006\\x006\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 54, "newlines": 54, "modlines": 0, "user": "EDITMAC"}, "text": " ISREDIT MACRO (KILL)\n SET &DEL =\n IF &KILL = ? THEN DO\n ISPEXEC DISPLAY PANEL(D)\n EXIT\n END\n ISREDIT (WORKDSN) = DATASET\nSET  PDSDSN = &WORKDSN\nIF &LIST = LIST THEN CONTROL LIST CONLIST SYMLIST\nSET &DEL =\n\n/* INITIALIZE DATASET */\nISPEXEC  LMINIT DATAID(PDSID) DATASET('&PDSDSN') +\n                ENQ(SHRW)                        +\n                ORG(PDSORG)\nSET LMRC = &LASTCC\nIF &LMRC \u00ac= 0 THEN +\n   DO\n      WRITE LMINIT FAILED - RETURN CODE &LMRC\n      WRITE DATA SET IS NOT ALLOCATED OR NOT PARTITIONED\n      EXIT CODE(8)\n   END\n\nWRITE  '&WORKDSN(&KILL)' SELECTED FOR DELETION\n/* OPEN DATA SET */\nISPEXEC LMOPEN DATAID(&PDSID) OPTION(OUTPUT)\nSET RET1 = &LASTCC\nIF &RET1 \u00ac= 0 THEN GOTO EXIT1\nWRITE CONFIRM DELETION OF '&PDSDSN(&KILL)' (Y/N)\nWRITENR ==>\nREAD &DEL\nIF &SUBSTR(1:1,&STR(&DEL)) \u00ac= Y THEN GOTO EXIT1\nISPEXEC LMMDEL DATAID(&PDSID) MEMBER(&KILL)\nSET LMRC = &LASTCC\nIF &LMRC \u00ac= 0 THEN GOTO EXIT1\nWRITE '&PDSDSN(&KILL)'  DELETED\nISPEXEC LMCLOSE DATAID(&PDSID)\nISPEXEC LMFREE DATAID(&PDSID)\nEXIT\nEXIT1: +\nIF &LMRC = 8 THEN +\n   DO\n      WRITE MEMBER &KILL NOT FOUND IN '&PDSDSN'\n         ISPEXEC LMCLOSE DATAID(&PDSID)\n         ISPEXEC LMFREE DATAID(&PDSID)\n      EXIT CODE(0)\n   END\n WRITE '&PDSDSN(&KILL)' NOT DELETED\nISPEXEC LMCLOSE DATAID(&PDSID)\nISPEXEC LMFREE DATAID(&PDSID)\nEXIT\nISPEXEC LMCLOSE DATAID(&PDSID)\nISPEXEC LMFREE DATAID(&PDSID)\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DELCUT": {"ttr": 3589, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00-\\x00-\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "EDITMAC"}, "text": " ISREDIT MACRO (PARM) NOPROCESS\n ISPEXEC CONTROL ERRORS RETURN\n IF &PARM \u00ac= &Z THEN +\n   DO\n     IF &PARM = ? THEN +\n       DO\n         ISPEXEC DISPLAY PANEL(DELCUT)\n         EXIT\n       END\n     ELSE +\n        IF &DATATYPE(&PARM) = NUM THEN +\n          DO\n           SET LEVEL = &PARM\n           END\n        ELSE +\n          DO\n           SET ZEDSMSG = &STR(INVALID ARGUMENT)\n             SET ZEDLMSG = &STR(VALID ARGUMENTS ARE A \"?\" OR A LEVEL +\n                               NUMBER)\n           ISPEXEC SETMSG MSG(ISRZ001)\n          EXIT\n        END\n  END\nELSE +\n SET LEVEL = 1\nISPEXEC VGET (RCUTLM&LEVEL,RCUTLB&LEVEL,RCUTRB&LEVEL) PROFILE\nIF &LASTCC > 0 THEN +\n  DO\n           SET ZEDSMSG = &STR(LEVEL DOES NOT EXIST)\n             SET ZEDLMSG = &STR(NO CUT LINES FOR LEVEL &LEVEL EXIST)\n           ISPEXEC SETMSG MSG(ISRZ001)\n           EXIT CODE(12)\n        END\nSET LINES = &&RCUTLM&LEVEL\nSET LINESTOPASTE = &LINES\n DO WHILE &INDEX < &LINESTOPASTE\n ISPEXEC VERASE RCUT&LEVEL&EVAL(&INDEX+1) PROFILE\n  ISPEXEC VERASE (RCUTLM&LEVEL,RCUTLB&LEVEL,RCUTRB&LEVEL) PROFILE\n   SET INDEX  = &INDEX + 1\n END\n           SET ZEDSMSG = &STR(CUT LEVEL &LEVEL DELETED)\n             SET ZEDLMSG = &STR(&INDEX LINES FOR LEVEL &LEVEL DELETED)\n           ISPEXEC SETMSG MSG(ISRZ001)\n           EXIT CODE(1)\nEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DELC2": {"ttr": 3591, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00(\\x00(\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "EDITMAC"}, "text": " ISREDIT MACRO (PARM) NOPROCESS\n ISPEXEC CONTROL ERRORS RETURN\n                      ISREDIT (ROW,COL)     = CURSOR\n                      IF &ROW NE 1 THEN +\n                      ISREDIT (LAST)    = LINENUM .ZLAST\n                      IF &ROW > &LAST THEN +\n                      SET &ROW = &ROW + 1\n SET LEVEL = 1\n START: +\nISPEXEC VGET (RCUTLM&LEVEL) PROFILE\n  IF &LASTCC = 0 THEN DO\n  SET &CUT = YES\n  SET &FLAG = YES\n  END\n  ELSE  DO\n  SET &CUT = NO\n  END\nSET LINES = &&RCUTLM&LEVEL\nISPEXEC VERASE RCUTLM&LEVEL PROFILE\n  ISPEXEC VERASE (RCUTLB&LEVEL,RCUTRB&LEVEL) PROFILE\n DO WHILE &INDEX < &EVAL(&LINES + 1)\n ISPEXEC VERASE RCUT&LEVEL&INDEX  PROFILE\n   SET INDEX  = &INDEX + 1\n END\n CNTUP: +\n IF &CUT = YES THEN DO\n SET &N1 = &STR(*LEVEL &LEVEL WITH &EVAL(&INDEX - 1) LINES DELETED)\n ISREDIT LINE_BEFORE &ROW = MSGLINE \"&N1\"\n END\n IF &LEVEL > 99 THEN DO\n IF &FLAG \u00ac= YES THEN DO\n SET &N1 = &STR(NO CUT LINES FOUND IN PROFILE TO DELETE)\n ISREDIT LINE_BEFORE &ROW = MSGLINE \"&N1\"\n END\n ISREDIT LOCATE SPE FIRST\n EXIT\n END\n SET &LEVEL = &LEVEL + 1\n SET &INDEX = 0\n GOTO START\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DELDUPS": {"ttr": 3593, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00X\\x00d\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 88, "newlines": 100, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (SCOL1 SCOL2 DEBUG)\n IF &STR(&SCOL1) = ? THEN DO\nHELP: +\n ISPEXEC DISPLAY PANEL(DELDUPS)\n EXIT\n END\n    CONTROL MSG\n    ISREDIT (LEFT,RIGHT) = BOUNDS\n    IF &SCOL1 = THEN DO\n    SET &SCOL1 = &LEFT\n    SET &SCOL2 = &RIGHT\n    SET &SORTOPTS = DELDUPS\n    END\n    ISPEXEC CONTROL ERRORS RETURN\n   SET &RC = 0\nPARSE: IF &SCOL1 = DEBUG OR &SCOL2 = DEBUG THEN CONTROL SYM CON LIST\n    IF &DEBUG =  DEBUG THEN CONTROL SYM CON LIST\n    IF &SCOL1 < 1 OR &SCOL1 < 1 +\n    THEN GOTO PARMERR\n    IF &SCOL2 < &SCOL1 THEN GOTO PARMERR\n    GOTO PROCESS\nPARMERR: +\n    SET ZEDSMSG = &STR(PARAMETER ERROR)\n    SET ZEDLMSG = &STR(SORT BEGIN AND END VALUE MUST BE NUMERIC, +\n              &SCOL1 MUST BE LESS THAN &SCOL2)\n    ISPEXEC SETMSG MSG(ISRZ000)\n    END\n\nPROCESS: SET &NODUPS = 0\n    ISREDIT (BEGIN1) = LINENUM .ZFIRST\n    ISREDIT (END1) = LINENUM .ZLAST\n    SET &TOTRECS = &EVAL(&END1)\n    ISREDIT RESET\n    ISREDIT SORT NX A &SCOL1 &SCOL2\n\n   ISREDIT CURSOR   1,0\n    ISREDIT BOUNDS = &SCOL1 &SCOL2\n   ISREDIT EXCLUDE ALL\n    SET &LINE#1 = &EVAL(&BEGIN1)\n    SET &LINE#2 = &LINE#1 + 1\n\nLOOP: ISREDIT (REC1) =  LINE &LINE#1\n    SET &FLD1 =  &SUBSTR(&SCOL1:&SCOL2,&NRSTR(&REC1))\nLOOPON: ISREDIT (REC2) = LINE &LINE#2\n    IF &NRSTR(&REC2) \u00ac=  THEN +\n    SET  &FLD2 =  &SUBSTR(&SCOL1:&SCOL2,&NRSTR(&REC2))\n        IF &NRSTR(&FLD1) = &NRSTR(&FLD2) THEN DO\n        ISREDIT DELETE &LINE#2 &LINE#2\n        SET &LINE#2 = &LINE#2 - 1\n        SET &RECSX = &RECSX + 1\n        IF &RECSX = &TOTRECS THEN GOTO CLOSE\n        IF &RECSX > &TOTRECS THEN GOTO CLOSE\n    ISREDIT LOCATE &LINE#1\n    ISREDIT LOCATE &LINE#2\n    SET &LINE#2 = &LINE#2 + 1\n    SET &NODUPS =  &NODUPS + 1\n    END\n   ELSE DO\n    SET &FLD1 =  &NRSTR(&FLD2)\n    SET &LINE#1 = &LINE#2\n    SET &LINE#2 = &LINE#2 + 1\n    END\n   IF &LINE#2 < &EVAL(&END1) THEN GOTO LOOPON\n\nCLOSE: IF &NODUPS =  0 THEN DO\n    SET ZEDSMSG =  &STR(NO DUPLICATES)\n    SET ZEDLMSG = &STR(NO DUPILCATES FOUND +\n             IN COLUMNS &SCOL1 THRU &SCOL2)\n    ISPEXEC SETMSG MSG(ISRZ000)\n    ISREDIT RESET\n    ISREDIT BOUNDS &LEFT &RIGHT\n    GOTO SETSCR\n    END\n    ISREDIT RESET\n    ISREDIT BOUNDS &LEFT &RIGHT\n    ISREDIT (END2) = LINENUM .ZLAST\n    SET &NODUPS = &EVAL(&TOTRECS -&END2)\n    SET ZEDSMSG = &STR(&NODUPS DUP(S) DELETED)\n    SET ZEDLMSG = &STR(&NODUPS DUPLICATE(S) DELETED +\n             IN COLUMNS &SCOL1 THRU &SCOL2)\n    ISPEXEC SETMSG MSG(ISRZ000)\n\nSETSCR: ISREDIT BOUNDS = &LEFT,&RIGHT\n   ISREDIT RESET\n   ISREDIT UP MAX\n   IF &RC  =   0 THEN SET &RC = 1\n\nEXIT: EXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSIGENP": {"ttr": 3596, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\xcc\\x00\\xcc\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 204, "newlines": 204, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (DA VOLUME) NOPROCESS\nCONTROL NOMSG\n IF &DA = ? THEN DO\n ISPEXEC DISPLAY PANEL(DSIGENP)\n EXIT\n END\nIF &VOLUME = THEN DO\nSET &VOL =\nGOTO SETIN\nEND\nSET &VOL = &STR(VOLUME(&VOLUME))\nSETIN: +\nSET &IN = &DA\nIF &IN = THEN DO\n           SET ZEDSMSG = &STR(INVALID DSN )\n       SET ZEDLMSG = &STR(DSIGEN WORKS WITH VALID DATASET NAMES)\n           ISPEXEC SETMSG MSG(ISRZ001)\n         EXIT CODE(12)\n  END\n  ISREDIT PROCESS DEST\n  IF &LASTCC = 0 THEN DO\n  ISREDIT LOCATE .ZDEST\n  IF &LASTCC = 8 THEN +\n     DO\n           SET ZEDSMSG = &STR(EMPTY DATA SET )\n       SET ZEDLMSG = &STR(DSIGEN WORKS ONLY WHEN DATA SET HAS VALID +\n                                 DATA AND LINE NUMBERS)\n           ISPEXEC SETMSG MSG(ISRZ001)\n         EXIT CODE(12)\n   END\nSET  &SXS1 =\nSET  &SXS2 =\nSET  &SXS3 =\nSET  &SXS4 =\nSET  &SXS5 =\nSET  &SXS6 =\nSET  &SXS7 =\nSET  &SXS8 =\nSET  &SXS9 =\nSET  &SXS10 =\nSET  &SXS11 =\nSET  &SXS12 =\nSET  &SXS13 =\nSET  &SXS14 =\nSET  &SXS15 =\nSET  &SXS16 =\nSET  &SXS17 =\nSET  &SXS18 =\nSET  &SXS19 =\nSET  &SXS20 =\nSET  &SXS21 =\nSET  &SXS22 =\nSET  &SXS23 =\nSET  &SXS23 =\nLISTDSI &IN DIRECTORY &VOL\nSET CODE = &LASTCC\nSET REASON = &SYSREASON\nIF &CODE = 16 AND &REASON = 5 THEN DO\n           SET ZEDSMSG = &STR(DATASET NO FOUND)\n       SET ZEDLMSG = &STR(&IN MUST BE A FULLY QUALIFIED DATA SET NAME)\n           ISPEXEC SETMSG MSG(ISRZ001)\n         EXIT CODE(12)\n  END\nSET  &SXS1 =   &STR(&SYSDSNAME  )\nSET  &SXS2 =   &STR(&SYSVOLUME  )\nSET  &SXS3 =   &STR(&SYSUNIT    )\nSET  &SXS4 =   &STR(&SYSDSORG   )\nSET  &SXS5 =   &STR(&SYSRECFM   )\nSET  &SXS6 =   &STR(&SYSLRECL   )\nSET  &SXS7 =   &STR(&SYSBLKSIZE )\nSET  &SXS8 =   &STR(&SYSALLOC   )\nSET  &SXS9 =   &STR(&SYSUSED    )\nSET  &SXS10 =  &STR(&SYSPRIMARY )\nSET  &SXS11 =  &STR(&SYSSECONDS )\nSET  &SXS12 =  &STR(&SYSUNITS   )\nSET  &SXS13 =  &STR(&SYSEXTENTS )\nSET  &SXS14 =  &STR(&SYSCREATE  )\nSET  &SXS15 =  &STR(&SYSREFDATE )\nSET  &SXS16 =  &STR(&SYSEXDATE  )\nSET  &SXS17 =  &STR(&SYSUPDATED )\nSET  &SXS18 =  &STR(&SYSTRKSCYL )\nSET  &SXS19 =  &STR(&SYSBLKSTRK )\nSET  &SXS20 =  &STR(&SYSADIRBLK )\nSET  &SXS21 =  &STR(&SYSUDIRBLK )\nSET  &SXS22 =  &STR(&SYSMEMBERS )\nSET  &SXS23 =  &STR(&SYSMSGLVL1 )\nSET  &SXS24 =  &STR(&SYSMSGLVL2 )\nSET &DSNIN =  &STR(DSN=&SXS1)\nIF &SXS12 = TRACK THEN SET &SXS12R = TRK\nIF &SXS12 = CYLINDER THEN SET &SXS12R = CYL\nIF &SXS12 = BLOCK THEN SET &SXS12R = &SYSDVAL(&SXS10)\nSET &DORG  =  &STR(DSORG=&SXS4)\nSET &SPAC  =  &STR(SPACE=(&SXS12R\nSET &RCFM  =  &STR(RECFM=&SXS5\nSET &LREC  =  &STR(LRECL=&SXS6\nSET &BLKSZ =  &STR(BLKSIZE=&SXS7\nSET &SLS10 = &SYSDVAL(&SXS10)\nSET &SLS11 = &SYSDVAL(&SXS11)\nSET &SLS20 = &SYSDVAL(&SXS20)\nISPEXEC VPUT (DORG SPAC RCFM LREC BLKSZ) PROFILE\nISPEXEC VGET (DORG SPAC RCFM LREC BLKSZ) PROFILE\nIF &SXS4 = PO THEN +\nSET &CMA = &STR(,)\nSET &SP1 = &STR(&SPAC&CMA(&SLS10,&SLS11,&SLS20),RLSE)\nSET &RGT = &STR())\nSET &L5A = &STR(//         &SP1)&RGT&CMA\nSET &L5A = &STR(&L5A&CMA)\nSET &L5B   = &STR(//       DCB=(&DORG,&RCFM,&LREC,&BLKSZ)\nSET &L1 = &STR(//COPY    EXEC PGM=IEBCOPY               )\nSET &L3 = &STR(//SYSPRINT DD SYSOUT=*                   )\nSET &L4 = &STR(//IN1      DD DISP=SHR,DSN=&SXS1        )\nSET &L5 = &STR(//OUTDD    DD DISP=(,CATLG),UNIT=SYSDA,DSN= )\nSET &L6 = &STR(//SYSUT3 DD UNIT=DISK,SPACE=(CYL,(2,2))  )\nSET &L7 = &STR(//SYSUT4 DD UNIT=DISK,SPACE=(CYL,(2,2))  )\nSET &L8 = &STR(//SYSIN DD *                             )\nSET &L9 = &STR(  COPY INDD=((IN1,R)),OUTDD=OUTDD        )\nSET &LA = &STR(/*                                       )\nISPEXEC VPUT (L1  L3 L4 L5 L5A L5B L6 L7 L8 L9 LA) PROFILE\n     ISPEXEC VGET L1\n       ISREDIT MASKLINE = \"&L1\"\n       ISREDIT LINE_AFTER .ZDEST = MASKLINE\n\n\n     ISPEXEC VGET L3\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 1\n       ISREDIT MASKLINE = \"&L3\"\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\n     ISPEXEC VGET L4\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 2\n       ISREDIT MASKLINE = \"&L4\"\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\n     ISPEXEC VGET L5\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 3\n       ISREDIT MASKLINE = \"&L5\"\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\n     ISPEXEC VGET L5A\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 4\n       ISREDIT MASKLINE = \"&L5A\"\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\n     ISPEXEC VGET L5B\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 5\n       ISREDIT MASKLINE = \"&L5B\"\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\n     ISPEXEC VGET L6\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 6\n       ISREDIT MASKLINE = \"&L6\"\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\n     ISPEXEC VGET L7\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 7\n       ISREDIT MASKLINE = \"&L7\"\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\n     ISPEXEC VGET L8\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 8\n       ISREDIT MASKLINE = \"&L8\"\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\n     ISPEXEC VGET L9\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 9\n       ISREDIT MASKLINE = \"&L9\"\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\n     ISPEXEC VGET LA\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 10\n       ISREDIT MASKLINE = \"&LA\"\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\nERROROUT:+\n       ISREDIT MASKLINE = ' '\n\n\n      SET RC = 0\n  END\n  ELSE DO\n     IF &MAXCC = 8 THEN DO\n         SET ZEDSMSG = &STR(INDICATE POSITION)\n         SET ZEDLMSG = &STR(MARK 'A' ON LINE AFTER WHICH /*USERPARM +\n                            DATA SHOULD BE INSERTED)\n     END\n     ELSE DO\n         SET ZEDSMSG = &STR(ERROR ENCOUNTERED)\n         SET ZEDLMSG = &STR(UNABLE TO PROCESS REQUEST, +\n                             RECHECK INPUT)\n     END\n     ISPEXEC SETMSG MSG(ISRZ000)\n     SET RC = 12\n  END\n  EXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DSIGENS": {"ttr": 3600, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\xaf\\x00\\xaf\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 175, "newlines": 175, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (DA VOLUME) NOPROCESS\nCONTROL NOMSG\n IF &DA = ? THEN DO\n ISPEXEC DISPLAY PANEL(DSIGENS)\n EXIT\n END\nIF &VOLUME = THEN DO\nSET &VOL =\nGOTO SETIN\nEND\nSET &VOL = &STR(VOLUME(&VOLUME))\nSETIN: +\nSET &IN = &DA\nIF &IN = THEN DO\n           SET ZEDSMSG = &STR(INVALID DSN )\n       SET ZEDLMSG = &STR(DSIGEN WORKS WITH VALID DATASET NAMES)\n           ISPEXEC SETMSG MSG(ISRZ001)\n         EXIT CODE(12)\n  END\n  ISREDIT PROCESS DEST\n  IF &LASTCC = 0 THEN DO\n  ISREDIT LOCATE .ZDEST\n  IF &LASTCC = 8 THEN +\n     DO\n           SET ZEDSMSG = &STR(EMPTY DATA SET )\n        ET ZEDLMSG = &STR(DSIGEN WORKS ONLY WHEN DATA SET HAS VALID +\n                                 DATA AND LINE NUMBERS)\n           ISPEXEC SETMSG MSG(ISRZ001)\n         EXIT CODE(12)\n   END\nSET  &SXS1 =\nSET  &SXS2 =\nSET  &SXS3 =\nSET  &SXS4 =\nSET  &SXS5 =\nSET  &SXS6 =\nSET  &SXS7 =\nSET  &SXS8 =\nSET  &SXS9 =\nSET  &SXS10 =\nSET  &SXS11 =\nSET  &SXS12 =\nSET  &SXS13 =\nSET  &SXS14 =\nSET  &SXS15 =\nSET  &SXS16 =\nSET  &SXS17 =\nSET  &SXS18 =\nSET  &SXS19 =\nSET  &SXS20 =\nSET  &SXS21 =\nSET  &SXS22 =\nSET  &SXS23 =\nSET  &SXS23 =\nLISTDSI &IN  &VOL\nSET CODE = &LASTCC\nSET REASON = &SYSREASON\nIF &CODE = 16 AND &REASON = 5 THEN DO\n           SET ZEDSMSG = &STR(DATASET NO FOUND)\n       SET ZEDLMSG = &STR(&IN MUST BE A FULLY QUALIFIED DATA SET NAME)\n           ISPEXEC SETMSG MSG(ISRZ001)\n         EXIT CODE(12)\n  END\nSET  &SXS1 =   &STR(&SYSDSNAME  )\nSET  &SXS2 =   &STR(&SYSVOLUME  )\nSET  &SXS3 =   &STR(&SYSUNIT    )\nSET  &SXS4 =   &STR(&SYSDSORG   )\nSET  &SXS5 =   &STR(&SYSRECFM   )\nSET  &SXS6 =   &STR(&SYSLRECL   )\nSET  &SXS7 =   &STR(&SYSBLKSIZE )\nSET  &SXS8 =   &STR(&SYSALLOC   )\nSET  &SXS9 =   &STR(&SYSUSED    )\nSET  &SXS10 =  &STR(&SYSPRIMARY )\nSET  &SXS11 =  &STR(&SYSSECONDS )\nSET  &SXS12 =  &STR(&SYSUNITS   )\nSET  &SXS13 =  &STR(&SYSEXTENTS )\nSET  &SXS14 =  &STR(&SYSCREATE  )\nSET  &SXS15 =  &STR(&SYSREFDATE )\nSET  &SXS16 =  &STR(&SYSEXDATE  )\nSET  &SXS17 =  &STR(&SYSUPDATED )\nSET  &SXS18 =  &STR(&SYSTRKSCYL )\nSET  &SXS19 =  &STR(&SYSBLKSTRK )\nSET  &SXS20 =  &STR(&SYSADIRBLK )\nSET  &SXS21 =  &STR(&SYSUDIRBLK )\nSET  &SXS22 =  &STR(&SYSMEMBERS )\nSET  &SXS23 =  &STR(&SYSMSGLVL1 )\nSET  &SXS24 =  &STR(&SYSMSGLVL2 )\nSET &DSNIN =  &STR(DSN=&SXS1)\nIF &SXS12 = TRACK THEN SET &SXS12R = TRK\nIF &SXS12 = CYLINDER THEN SET &SXS12R = CYL\nIF &SXS12 = BLOCK THEN SET &SXS12R = &SYSDVAL(&SXS10)\nSET &DORG  =  &STR(DSORG=&SXS4)\nSET &SPAC  =  &STR(SPACE=(&SXS12R\nSET &RCFM  =  &STR(RECFM=&SXS5\nSET &LREC  =  &STR(LRECL=&SXS6\nSET &BLKSZ =  &STR(BLKSIZE=&SXS7\nSET &SLS10 = &SYSDVAL(&SXS10)\nSET &SLS11 = &SYSDVAL(&SXS11)\nSET &SLS20 = &SYSDVAL(&SXS20)\nISPEXEC VPUT (DORG SPAC RCFM LREC BLKSZ) PROFILE\nISPEXEC VGET (DORG SPAC RCFM LREC BLKSZ) PROFILE\nSET &CMA = &STR(,)\nSET &SP1 = &STR(&SPAC&CMA(&SLS10,&SLS11),RLSE)\nSET &RGT = &STR())\nSET &L5A = &STR(//         &SP1)&RGT&CMA\nSET &L5A = &STR(&L5A&CMA)\nSET &L5B   = &STR(//       DCB=(&DORG,&RCFM,&LREC,&BLKSZ)\nSET &L1 = &STR(//GENR    EXEC PGM=IEBGENER              )\nSET &L3 = &STR(//SYSPRINT DD SYSOUT=*                   )\nSET &L4 = &STR(//SYSUT1   DD DISP=SHR,DSN=&SXS1        )\nSET &L5 = &STR(//SYSUT2   DD DISP=(,CATLG),UNIT=SYSDA,DSN= )\nSET &L6 = &STR(//SYSIN DD DUMMY                         )\nISPEXEC VPUT (L1  L3 L4 L5 L5A L5B L6 ) PROFILE\n     ISPEXEC VGET L1\n       ISREDIT MASKLINE = \"&L1\"\n       ISREDIT LINE_AFTER .ZDEST = MASKLINE\n\n\n     ISPEXEC VGET L3\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 1\n       ISREDIT MASKLINE = \"&L3\"\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\n     ISPEXEC VGET L4\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 2\n       ISREDIT MASKLINE = \"&L4\"\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\n     ISPEXEC VGET L5\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 3\n       ISREDIT MASKLINE = \"&L5\"\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\n     ISPEXEC VGET L5A\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 4\n       ISREDIT MASKLINE = \"&L5A\"\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\n     ISPEXEC VGET L5B\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 5\n       ISREDIT MASKLINE = \"&L5B\"\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\n     ISPEXEC VGET L6\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 6\n       ISREDIT MASKLINE = \"&L6\"\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\nERROROUT:+\n       ISREDIT MASKLINE = ' '\n\n\n      SET RC = 0\n  END\n  ELSE DO\n     IF &MAXCC = 8 THEN DO\n         SET ZEDSMSG = &STR(INDICATE POSITION)\n         SET ZEDLMSG = &STR(MARK 'A' ON LINE AFTER WHICH /*USERPARM +\n                            DATA SHOULD BE INSERTED)\n     END\n     ELSE DO\n         SET ZEDSMSG = &STR(ERROR ENCOUNTERED)\n         SET ZEDLMSG = &STR(UNABLE TO PROCESS REQUEST, +\n                             RECHECK INPUT)\n     END\n     ISPEXEC SETMSG MSG(ISRZ000)\n     SET RC = 12\n  END\n  EXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "E": {"ttr": 3844, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x06\\x00\\x06\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "EDITMAC"}, "text": " ISREDIT MACRO (MEM)\n IF &MEM = ? THEN DO\n ISPEXEC DISPLAY PANEL(E)\n EXIT\n END\n ISREDIT EDIT &MEM\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EDITPDS": {"ttr": 3846, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00L\\x00L\\x00\\x00\\xc3\\xd3\\xc9\\xe2\\xe3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 76, "newlines": 76, "modlines": 0, "user": "CLIST"}, "text": "PROC 2 PDSDSN MACRO +\n       MACPARM1() MACPARM2() MACPARM3() MACPARM4() +\n       LIST\n/**********************************************************************/\n/* THIS CLIST CAN BE USED IN CONJUNCTION WITH AN INITIAL EDIT MACRO   */\n/* TO EDIT ALL MEMBERS OF A PARTITIONED DATA SET.                     */\n/*                                                                    */\n/* THE LAST COMMAND OF THE INITIAL EDIT MACRO THAT YOU USE SHOULD BE  */\n/* AN ISREDIT END OR ISREDIT CANCEL COMMAND.  IF THIS IS THE CASE,    */\n/* THIS CLIST WILL EDIT EACH MEMBER WITHOUT EVER DISPLAYING THE EDIT  */\n/* SCREEN.                                                            */\n/*                                                                    */\n/* UP TO 4 PARAMETERS CAN BE SPECIFIED.  THESE PARAMETERS ARE VPUT TO */\n/* THE SHARED POOL.  YOUR EDIT MACRO CAN VGET THESE PARAMETERS IF     */\n/* NECESSARY.  PARAMETERS CANNOT BE DIRECTLY SPECIFIED WHEN USING AN  */\n/* INITIAL EDIT MACRO.                                                */\n/*                                                                    */\n/* TO RUN: AT ISPF/PDF OPTION 6, ENTER EDITPDS FOLLOWED BY THE        */\n/* DATA SET NAME AND THE MACRO TO BE RUN.  IF YOU WISH TO USE THE     */\n/* MACRO PARAMETERS, ENTER THE VARIABLE NAME (MACPARM1) AND PLACE ITS */\n/* VALUE IN PARENTHESIS.                                              */\n/*                                                                    */\n/* FOR EXAMPLE:                                                       */\n/*      EDITPDS USER.PDS EDITMAC MACPARM1(XXXX) MACPARM2(YYYY)        */\n/*                                                                    */\n/**********************************************************************/\nIF &LIST = LIST THEN CONTROL LIST CONLIST SYMLIST\n\n/* VPUT PARAMETERS TO THE SHARED POOL */\nISPEXEC  VPUT (MACPARM1,MACPARM2,MACPARM3,MACPARM4) SHARED\n\n/* INITIALIZE DATASET */\nISPEXEC  LMINIT DATAID(PDSID) DATASET('&PDSDSN') +\n                ENQ(SHRW)                        +\n                ORG(PDSORG)\nSET LMRC = &LASTCC\nIF &LMRC \u00ac= 0 THEN +\n   DO\n      WRITE LMINIT FAILED - RETURN CODE &LMRC\n      WRITE DATA SET IS NOT ALLOCATED OR NOT PARTITIONED\n      EXIT CODE(8)\n   END\n\n/* OPEN DATA SET */\nISPEXEC LMOPEN DATAID(&PDSID) OPTION(INPUT)\nSET LMRC = &LASTCC\n\n/* CALL EDIT WITH EACH MEMBER OF THE DATA SET AND SPECIFY THE */\n/* INITIAL EDIT MACRO.                                        */\nDO WHILE (&LMRC = 0)\n  /* BUILD MEMBER LIST AND RETURN NEXT MEMBER */\n  ISPEXEC LMMLIST DATAID(&PDSID) -\n        OPTION(LIST) MEMBER(MEMBER) -\n        STATS(NO)\n  SET LMRC = &LASTCC\n\n  IF &LMRC = 0 THEN /* NOT END OF MEMBER LIST */ +\n     DO\n       WRITENR &SYSTIME - PROCESSING &PDSDSN(&MEMBER)\n       ISPEXEC EDIT DATAID(&PDSID) MEMBER(&MEMBER) +\n               MACRO(&MACRO)\n       SET EDRC = &LASTCC\n       WRITE -- RETURN CODE &EDRC\n     END\n END\n\n/* FREE MEMBER LIST */\nISPEXEC LMMLIST DATAID(&PDSID) OPTION(FREE)\n/* CLOSE DATA SET */\nISPEXEC LMCLOSE DATAID(&PDSID)\n/* FREE DATA ID */\nISPEXEC LMFREE  DATAID(&PDSID)\n\n WRITE &SYSTIME - ALL MEMBERS OF &PDSDSN HAVE BEEN PROCESSED\n\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EMACS": {"ttr": 3849, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00G\\x00G\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 71, "newlines": 71, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (WNW,DEBUG)\n      IF &WNW = ? THEN DO\n      ISPEXEC DISPLAY PANEL(EMACS)\n      EXIT\n      END\nIF &DEBUG = DEBUG  THEN +\nCONTROL LIST SYMLIST CONLIST\nIF &WNW \u00ac= THEN DO\nWRITENR TABLE UPDATE LIMITED TO MACRO ADMINISTRATOR ENTER PASSWORD:\nREAD &PASS\nIF &PASS \u00ac= ADMINISTRATOR THEN DO\nWRITE UPDATE MODE ABORTED\nSET &WNW = NOWRITE\nGOTO NOWRITE\nEND\nSET &WNW = WRITE\nGOTO PROCESS\nEND\nNOWRITE: +\nSET &WNW = NOWRITE\nPROCESS: +\nSET &MSG =&STR()\n ISPEXEC CONTROL ERRORS RETURN\nISPEXEC TBOPEN EDITMACS &WNW\n  SET &RCC = &LASTCC\n  IF &RCC = 8 THEN  +\n    DO\n      WRITE THE MASTER TABLE DOES NOT EXIST WE WILL MAKE ONE\n      SET &WNW= WRITE\n      SET &MACNAME = B\n      SET &MACDESC = BROWSE MEMBER OF CURRENT DATA\n      ISPEXEC TBCREATE EDITMACS NAMES(MACNAME MACDESC) WRITE\n      ISPEXEC TBADD EDITMACS\n      ISPEXEC TBOPEN EDITMACS &WNW\n    END\nNEXT: +\n    ISPEXEC TBSORT EDITMACS FIELDS(MACNAME)\nAFTER: +\nISPEXEC TBDISPL EDITMACS PANEL(MACLIST) MSG(&MSG)\nIF &LASTCC = 8 THEN SET &EXIT = YES\nIF &OPTN = A THEN DO\nSET &OPTN = &ZCMD\nEND\nIF &WNW = WRITE THEN DO\nIF &OPTN=A && &WNW=WRITE THEN DO\n    SET &MACNAME =\n    SET &MACDESC =\n    ISPEXEC DISPLAY PANEL(MACADD2)\n    ISPEXEC TBADD EDITMACS\n    END\nIF &OPTN=D && &WNW=WRITE THEN +\n    ISPEXEC TBDELETE EDITMACS\n END\n   ISPEXEC TBCLOSE EDITMACS\n   IF &EXIT = YES THEN EXIT\nISPEXEC TBOPEN EDITMACS &WNW\nSET &OPTN =\n    IF &SUBSTR(1:1,&STR(&ZCMD)) = &STR(L) THEN DO\n        SET &MACNAME = &STR()\n        IF &LENGTH(&STR(&ZCMD)) > 3 THEN DO\n            IF &SUBSTR(3:3,&STR(&ZCMD)) \u00ac= $STR( ) THEN DO\n                SET &MACNAME = &SUBSTR(3:&LENGTH(&STR(&ZCMD)),&STR(&ZCMD))\n                SET &ZCMD  = &STR()\n                ISPEXEC TBSARG EDITMACS NEXT NAMECOND(MACNAME,EQ)\n                END\n                END\n                END\n      ISPEXEC TBSCAN EDITMACS ARGLIST(MACNAME)\n      IF &LASTCC = 0 THEN GOTO AFTER\n   GOTO NEXT\n            END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXIT": {"ttr": 3852, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x02\\x00\\x02\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO\nISPEXEC DISPLAY PANEL(EXIT)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FC": {"ttr": 3854, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP) NOPROCESS\n IF &HELP = ? THEN DO\n ISPEXEC DISPLAY PANEL(FC)\n EXIT\n END\n SET &PTR = FIRST\n IF &HELP \u00ac=  THEN DO\n IF &SUBSTR(1:1,&HELP) = P THEN SET &PTR = PREV\n IF &SUBSTR(1:1,&HELP) = N THEN SET &PTR = NEXT\n END\nISREDIT LOCATE COM &PTR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FIXJCL": {"ttr": 3856, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x88\\x00\\x84\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 136, "newlines": 132, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP) NOPROCESS\n      IF &HELP = ? THEN DO\n      ISPEXEC DISPLAY PANEL(FIXJCL)\n      EXIT\n      END\n/*\n/*    ALIGN JCL JOB, EXEC, AND DD STATEMENTS ON STANDARD BOUNDARIES\n/*    T. M. HANES, ASYST INC. 02/01/88\n/*    D.E.M.I., 03/01/88\n/*\n/*      SITE DEPENDENT DEFINITIONS:\n/*      ALIGNMENT COLUMNS FOR CARD TYPES\nSET     &JOBA = 12\nSET     &JOBB = 17\nSET     &PROCA = 12\nSET     &PROCB = 17\nSET     &PENDA = 12\nSET     &PENDB = 17\nSET     &DDA = 12\nSET     &DDB = 17\nSET     &EXECA = 12\nSET     &EXECB = 17\nSET     &CONTA = 12\nSET     &CONTB = 17\n/*NTROL LIST SYMLIST CONLIST\n/*\n/*      PRESERVE CONTINUATION CHARACTERS IN 72\nISREDIT PROCESS RANGE J\nIF      &LASTCC = 0 THEN DO\n        ISREDIT (RCMD) = RANGE_CMD\n        ISREDIT (JZF) = LINENUM .ZFRANGE\n        ISREDIT (JZL) = LINENUM .ZLRANGE\n        END\nELSE +\n        DO\n        ISREDIT (JZF) = LINENUM .ZFIRST\n        ISREDIT (JZL) = LINENUM .ZLAST\n        END\nISREDIT LABEL &JZF = .JZF\nISREDIT LABEL &JZL = .JZL\nSET     &LJZF = &STR(.JZF)\nSET     &LJZL = &STR(.JZL)\nIF      &JZF  = &JZL THEN SET &LJZF = &STR(.JZL)\n/*\n/*ITE   * JZF = &JZF   JZL = &JZL   LJZF = &LJZF   LJZL = &LJZL\n/*REDIT X ALL  &LJZF &LJZL\n/*REDIT MEND\n/*IT\nISREDIT (CL,CR) = CURSOR\nISREDIT (LB,RB) = BOUNDS\nISREDIT BOUNDS    = 1 71\nISREDIT X ALL\nISREDIT F '//'  1 ALL &LJZF &LJZL\nISREDIT X '//*' 1 ALL &LJZF &LJZL\nISREDIT X '/*'  1 ALL &LJZF &LJZL\n/*      REMOVE EXTRA SPACES\nISREDIT C ' ' '{'      3 71 ALL NX  &LJZF &LJZL\nISREDIT C '{{{{{{' '{' 3 71 ALL NX  &LJZF &LJZL\nISREDIT C '{{{{{' '{'  3 71 ALL NX  &LJZF &LJZL\nISREDIT C '{{{{' '{'   3 71 ALL NX  &LJZF &LJZL\nISREDIT C '{{{' '{'    3 71 ALL NX  &LJZF &LJZL\nISREDIT C '{{' '{'     3 71 ALL NX  &LJZF &LJZL\nISREDIT C '{' ' '      3 71 ALL NX  &LJZF &LJZL\n/*      JOB, PROC, EXEC, DD AND PEND CONVERSION\nSET     &KEYWD = &STR(JOB)\nSET     &FLDA=&DDA-1\nSET     &FLDB=&DDB\nDO      WHILE &KEYWD NE &STR()\n        ISREDIT X ALL\n        ISREDIT F ' &STR(&KEYWD) ' 3 25 ALL                &LJZF &LJZL\n        IF &LASTCC=4 THEN GOTO BYEDT\n        ISREDIT X '//*' 1 ALL                              &LJZF &LJZL\n        ISREDIT C ' &STR(&KEYWD) ' '{&STR(&KEYWD)}' ALL NX &LJZF &LJZL\n        ISREDIT C '{' '{{'  3 25 ALL NX                    &LJZF &LJZL\n        ISREDIT C '}' '}}'  3 40 ALL NX                    &LJZF &LJZL\n        ISREDIT C '{' '{{'  3 25 ALL NX                    &LJZF &LJZL\n        ISREDIT C '}' '}}'  3 40 ALL NX                    &LJZF &LJZL\n        ISREDIT C '{' '{{'  3 25 ALL NX                    &LJZF &LJZL\n        ISREDIT C '}' '}}'  3 40 ALL NX                    &LJZF &LJZL\n        ISREDIT C '{' '{{'  3 25 ALL NX                    &LJZF &LJZL\n        ISREDIT C '{&STR(&KEYWD)}' '_&STR(&KEYWD)_' ALL NX &LJZF &LJZL\n        ISREDIT C ' ' '\u00ac'        ALL NX                    &LJZF &LJZL\n        ISREDIT C '{' ' '   3 &FLDA    ALL NX              &LJZF &LJZL\n        ISREDIT C '{' ''         ALL NX                    &LJZF &LJZL\n        ISREDIT C '}\u00ac' '}'       ALL NX                    &LJZF &LJZL\n        ISREDIT C '}' ' '  10 &FLDB    ALL NX              &LJZF &LJZL\n        ISREDIT C '}' ''         ALL NX                    &LJZF &LJZL\n        ISREDIT C '_&STR(&KEYWD)_' ' &STR(&KEYWD) ' ALL    &LJZF &LJZL\n        ISREDIT C '\u00ac' ' '        ALL NX                    &LJZF &LJZL\nBYEDT:+\n        IF &KEYWD = DD   THEN DO\n             SET &KEYWD = &STR()\n             END\n        IF &KEYWD = PEND THEN DO\n             SET &KEYWD = &STR(DD)\n             SET &FLDA=&DDA-1\n             SET &FLDB=&DDB\n             END\n        IF &KEYWD = EXEC THEN DO\n             SET &KEYWD = &STR(PEND)\n             SET &FLDA=&PENDA-1\n             SET &FLDB=&PENDB\n             END\n        IF &KEYWD = PROC THEN DO\n             SET &KEYWD = &STR(EXEC)\n             SET &FLDA=&EXECA-1\n             SET &FLDB=&EXECB\n             END\n        IF &KEYWD = JOB  THEN DO\n             SET &KEYWD = &STR(PROC)\n             SET &FLDA=&PROCA-1\n             SET &FLDB=&PROCB\n             END\n        END\n/*      CONTINUATION CARD CONVERSION\nISREDIT X ALL\nISREDIT F '// '  1 ALL                             &LJZF &LJZL\nISREDIT X ' EXEC ' 3 20 ALL                        &LJZF &LJZL\nISREDIT X ' DD '   3 20 ALL                        &LJZF &LJZL\nISREDIT X ' PEND ' 3 20 ALL                        &LJZF &LJZL\nISREDIT C ' ' '}'  3 ALL NX                        &LJZF &LJZL\nISREDIT C '}' '}}' 3 25 ALL NX                     &LJZF &LJZL\nISREDIT C '}' '}}' 3 25 ALL NX                     &LJZF &LJZL\nISREDIT C '}' '}}' 3 25 ALL NX                     &LJZF &LJZL\nISREDIT C '}' '}}' 3 25 ALL NX                     &LJZF &LJZL\nISREDIT C '}' '}}' 3 25 ALL NX                     &LJZF &LJZL\nISREDIT C ' ' '\u00ac'  3 70 ALL NX                     &LJZF &LJZL\nISREDIT C '}\u00ac' '}' 3 70 ALL NX                     &LJZF &LJZL\nISREDIT C '}' ' '  3 &CONTA ALL NX                 &LJZF &LJZL\nISREDIT C '}' ''        ALL NX                     &LJZF &LJZL\nISREDIT C '\u00ac' ' '       ALL NX                     &LJZF &LJZL\nISREDIT BOUNDS =  &LB &RB\nISREDIT LEFT MAX\nISREDIT RESET\nISREDIT CURSOR = &CL &CR\nEXIT    CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HEADING": {"ttr": 3859, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\xe0\\x00\\xe0\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 224, "newlines": 224, "modlines": 0, "user": "EDITMAC"}, "text": " ISREDIT MACRO (P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12) NOPROCESS\n CONTROL END(ENDO)\n\n /* HELP                                                             */\n\n IF &STR(&P1) = &STR(?) OR &STR(&P1) = HELP THEN +\n  DO\n   ISREDIT (CAPMOD) = CAPS\n   ISREDIT CAPS = OFF\n   CONTROL ASIS\n   ISPEXEC CONTROL ERRORS RETURN\n   ISREDIT (FLNUM) = DISPLAY_LINES\n   SET &CUTX  = &STR(TO EXECUTE, TYPE HEADING ON YOUR EDIT COMMAND LIN)\n   SET &CUTX  = &STR(&CUTX.E.)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (CUTX)\n   SET &CUTX  = &STR()\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (CUTX)\n   SET &CUTX  = &STR(PRINT DEPTH.)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (CUTX)\n   SET &CUTX  = &STR(YOU MAY CREATE A  MAXIMUM  OF  EIGHT  (8)  HEADING)\n   SET &CUTX  = &STR(&CUTX. LINES AND CHOOSE THE)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (CUTX)\n   SET &CUTX  = &STR(CONTROL CHARACTERS.)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (CUTX)\n   SET &CUTX  = &STR(HEADING WILL ADD HEADINGS   TO  ANY  EDITABLE FILE)\n   SET &CUTX  = &STR(&CUTX. USING ASCII CARRIAGE)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (CUTX)\n   ISREDIT CAPS = &CAPMOD\n   EXIT\n  ENDO\n\n /* HOUSEKEEPING                                                     */\n\n CONTROL ASIS\n ISREDIT (CAPMOD) = CAPS\n ISREDIT CAPS = OFF\n ISREDIT (LINMAX) = LINENUM .ZLAST\n SET &LINEMAX = &LINEMAX\n ISREDIT (WIDTH) = DATA_WIDTH\n SET &PADCT = (&WIDTH - 72) / 2\n IF  &PADCT < 1 THEN &PADCT = 1\n SET &WIDTH = &WIDTH - 8\n SET &B = &STR(                                            )\n SET &B = &STR(&B&B&B)\n SET &PAD = &SUBSTR(1:&PADCT,&B)\n SET &A = &STR(PAGE )\n\n /* GET HEADING LINES                                                */\n\n ISPEXEC DISPLAY PANEL(MGB00064)\n IF &LASTCC = 8 THEN +\n  DO\n   ISREDIT CAPS = &CAPMOD\n   EXIT\n  ENDO\n IF &NRSTR(&H8) NE &STR() THEN SET &HDGCNT = 8\n ELSE IF &NRSTR(&H7) NE &NRSTR() THEN SET &HDGCNT = 7\n ELSE IF &NRSTR(&H6) NE &STR() THEN SET &HDGCNT = 6\n ELSE IF &NRSTR(&H5) NE &STR() THEN SET &HDGCNT = 5\n ELSE IF &NRSTR(&H4) NE &STR() THEN SET &HDGCNT = 4\n ELSE IF &NRSTR(&H3) NE &STR() THEN SET &HDGCNT = 3\n ELSE IF &NRSTR(&H2) NE &STR() THEN SET &HDGCNT = 2\n ELSE SET &HDGCNT = 1\n IF  &PADCT < &HDGCNT THEN &PADCNT = &HDGCNT + 2\n SET &HX8 = &NRSTR(&PAD&H8)\n SET &HX7 = &NRSTR(&PAD&H7)\n SET &HX6 = &NRSTR(&PAD&H6)\n SET &HX5 = &NRSTR(&PAD&H5)\n SET &HX4 = &NRSTR(&PAD&H4)\n SET &HX3 = &NRSTR(&PAD&H3)\n SET &HX2 = &NRSTR(&PAD&H2)\n SET &PAD1 = &SUBSTR(2:&LENGTH(&STR(&PAD)),&STR(&PAD))\n SET &HX1 = &NRSTR(&PAD1&H1)\n SET &HX1 = &SUBSTR(1:&WIDTH,&NRSTR(1&HX1&B))\n SET &HX1 = &NRSTR(&HX1&A)\n SET &LINCNT = &PD-&HDGCNT\n SET &LINMAX = &LINMAX\n ISREDIT FIND P'\u00ac' .ZFIRST .ZLAST 1\n SET &RC = &LASTCC\n\n /* SINCE NO CARRIAGE CONTROL CHARACTERS, INSERT HEADINGS BY         */\n /* ((PAGE DEPTH) - (HEADING COUNT)) IN FILE. (QUICKEST)             */\n\n IF &RC \u00ac= 0 THEN +\n  DO\n   SET &PAGCNT = &LINMAX/&LINCNT\n   SET &I = &PAGCNT*&LINCNT\n   IF &I \u00ac= &LINMAX THEN +\n    DO\n     SET &I = &I + 1\n     SET &PAGCNT = &PAGCNT + 1\n    ENDO\n   ELSE +\n    DO\n     SET &I = &I - &LINCNT + 1\n    ENDO\n   DO WHILE &I \u00ac< 1\n    ISREDIT CURSOR = &I 1\n IF &NRSTR(&H8) NE &STR() THEN SET &HDGCNT = 8\n ELSE IF &NRSTR(&H7) NE &NRSTR() THEN SET &HDGCNT = 7\n ELSE IF &NRSTR(&H6) NE &STR() THEN SET &HDGCNT = 6\n ELSE IF &NRSTR(&H5) NE &STR() THEN SET &HDGCNT = 5\n ELSE IF &NRSTR(&H4) NE &STR() THEN SET &HDGCNT = 4\n ELSE IF &NRSTR(&H3) NE &STR() THEN SET &HDGCNT = 3\n ELSE IF &NRSTR(&H2) NE &STR() THEN SET &HDGCNT = 2\n ELSE SET &HDGCNT = 1\n    IF &NRSTR(&HX8) = THEN SET &HX8 = &STR( )\n    IF &NRSTR(&HX7) = THEN SET &HX7 = &STR( )\n    IF &NRSTR(&HX6) = THEN SET &HX6 = &STR( )\n    IF &NRSTR(&HX5) = THEN SET &HX5 = &STR( )\n    IF &NRSTR(&HX4) = THEN SET &HX4 = &STR( )\n    IF &NRSTR(&HX3) = THEN SET &HX3 = &STR( )\n    IF &NRSTR(&HX2) = THEN SET &HX2 = &STR( )\n        SET &HX8 = &NRSTR(\"&HX8\")\n        SET &HX7 = &NRSTR(\"&HX7\")\n        SET &HX6 = &NRSTR(\"&HX6\")\n        SET &HX5 = &NRSTR(\"&HX5\")\n        SET &HX4 = &NRSTR(\"&HX4\")\n        SET &HX3 = &NRSTR(\"&HX3\")\n        SET &HX2 = &NRSTR(\"&HX2\")\n    IF &HDGCNT > 7 THEN ISREDIT LINE_BEFORE &I = DATALINE &NRSTR(&HX8)\n    IF &HDGCNT > 6 THEN ISREDIT LINE_BEFORE &I = DATALINE &NRSTR(&HX7)\n    IF &HDGCNT > 5 THEN ISREDIT LINE_BEFORE &I = DATALINE &NRSTR(&HX6)\n    IF &HDGCNT > 4 THEN ISREDIT LINE_BEFORE &I = DATALINE &NRSTR(&HX5)\n    IF &HDGCNT > 3 THEN ISREDIT LINE_BEFORE &I = DATALINE &NRSTR(&HX4)\n    IF &HDGCNT > 2 THEN ISREDIT LINE_BEFORE &I = DATALINE &NRSTR(&HX3)\n    IF &HDGCNT > 1 THEN ISREDIT LINE_BEFORE &I = DATALINE &NRSTR(&HX2)\n    SET &Y = &NRSTR(\"&HX1&PAGCNT\")\n    ISREDIT LINE_BEFORE &I = DATALINE &NRSTR(&Y)\n    SET &PAGCNT = &PAGCNT - 1\n    SET &I = &I - &LINCNT\n   ENDO\n  ENDO\n\n /* SINCE CARRIAGE CONTROL CHARACTERS ARE PRESENT, USE THE CARRIAGE  */\n /* CONTROL CHARACTERS TO DETERMINE WHERE TO INSERT HEADINGS IN FILE */\n\n /* CONTROL LIST SYMLIST CONLIST /* */\n IF &RC = 0 THEN +\n  DO\n   SET &PAGDPH = &LINCNT + 30\n   SET &PAGCNT = 1\n   SET &I      = 1\n   DO WHILE &I \u00ac> &LINMAX\n    ISREDIT (INPUT) = LINE &I\n    SET &CC = &SUBSTR(1:1,&NRSTR(&INPUT))\n    IF &NRSTR(&CC) = &STR( ) THEN SET &PAGDPH = &PAGDPH + 1\n    ELSE IF &STR(&CC) = &STR(0) THEN SET &PAGDPH = &PAGDPH + 2\n    ELSE IF &STR(&CC) = &STR(-) THEN SET &PAGDPH = &PAGDPH + 3\n    ELSE IF &STR(&CC) = &STR(+) THEN SET &PAGDPH = &PAGDPH\n    ELSE IF &STR(&CC) = &STR(1) THEN +\n     DO\n      SET &PAGDPH = &LINCNT + 30\n      SET &LINLEN = &LENGTH(&NRSTR(&INPUT)) - 1\n      SET &NINPUT = &SUBSTR(2:&LINLEN,&NRSTR(&INPUT))\n      SET &NINPUT = &STR( &NRSTR(&NINPUT))\n      ISREDIT LINE &I = '&NRSTR(&NINPUT)'\n     ENDO\n    ELSE +\n     DO\n      SET ZEDSMSG = &NRSTR(INVALID CC)\n      SET ZERRALRM = YES\n      SET ZEDLMSG = &STR(INVALID CARRIAGE CONTROL CHARACTER IN COL 1)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(16)\n     ENDO\n    IF &PAGDPH > &LINCNT THEN +\n     DO\n      ISREDIT CURSOR = &I 1\n      IF &DONE \u00ac= YES THEN DO\n        SET &HX8 = &NRSTR(\"&HX8\")\n        SET &HX7 = &NRSTR(\"&HX7\")\n        SET &HX6 = &NRSTR(\"&HX6\")\n        SET &HX5 = &NRSTR(\"&HX5\")\n        SET &HX4 = &NRSTR(\"&HX4\")\n        SET &HX3 = &NRSTR(\"&HX3\")\n        SET &HX2 = &NRSTR(\"&HX2\")\n        SET &DONE = YES\n      ENDO\n    IF &HDGCNT > 7 THEN ISREDIT LINE_BEFORE &I = DATALINE &NRSTR(&HX8)\n    IF &HDGCNT > 6 THEN ISREDIT LINE_BEFORE &I = DATALINE &NRSTR(&HX7)\n    IF &HDGCNT > 5 THEN ISREDIT LINE_BEFORE &I = DATALINE &NRSTR(&HX6)\n    IF &HDGCNT > 4 THEN ISREDIT LINE_BEFORE &I = DATALINE &NRSTR(&HX5)\n    IF &HDGCNT > 3 THEN ISREDIT LINE_BEFORE &I = DATALINE &NRSTR(&HX4)\n    IF &HDGCNT > 2 THEN ISREDIT LINE_BEFORE &I = DATALINE &NRSTR(&HX3)\n    IF &HDGCNT > 1 THEN ISREDIT LINE_BEFORE &I = DATALINE &NRSTR(&HX2)\n      SET &Y = &NRSTR(\"&HX1&PAGCNT\")\n      ISREDIT LINE_BEFORE &I = DATALINE &NRSTR(&Y)\n      SET &PAGCNT = &PAGCNT + 1\n      SET &PAGDPH = &HDGCNT\n      SET &I      = &I + &HDGCNT\n      SET &LINMAX = &LINMAX + &HDGCNT\n     ENDO\n    SET &I = &I + 1\n   ENDO\n  ENDO\n\n /* END OF MACRO                                                      */\n\n ISREDIT CAPS = &CAPMOD\n SET ZEDSMSG = &STR(NORMAL EOM)\n SET ZEDLMSG = &STR(NORMAL END OF HEADING; HEADINGS INSERTED)\n ISPEXEC SETMSG MSG(ISRZ001)\n EXIT\n/* --------------------------- HEADING ----------------------------- */\n/* ================================================================== */\n/*            E L E C T R O N I C   D A T A   S Y S T E M S           */\n/*                HOUSTON INFORMATION PROCESSING CENTER               */\n/*                  OPERATING SYSTEMS SOFTWARE GROUP                  */\n/*                            1301 FANNIN                             */\n/*                          HOUSTON, TX 77002                         */\n/* ------------------------------------------------------------------ */\n/*+ HEADING IS AN EDIT MACRO THAT CREATES HEADINGS FOR FILES          */\n/* ------------------------------------------------------------------ */\n/*                           DEPENDENCIES                             */\n/* PANELS: MGB00064                                                   */\n/* ------------------------------------------------------------------ */\n/*                         MODIFICATION LOG                           */\n/*   DATE     AUTHOR             DESCRIPTION                          */\n/* 06/01/88 M. G. BERRYHILL      CREATION                             */\n/* 05/01/90 M. G. BERRYHILL      ADD CARRIAGE CONTROL SPACING         */\n/* 05/22/90 M. G. BERRYHILL      ADD HELP                             */\n/* 05/23/90 P. G. DAVIS          MODIFIED TO ACCEPT \"'\" AND \"&\"       */\n/* ================================================================== */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "INIT": {"ttr": 4100, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x0b\\x00\\x0c\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 11, "newlines": 12, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP)\n IF &HELP = ? THEN DO\n ISPEXEC DISPLAY PANEL(INIT)\n EXIT\n END\nISREDIT (PDSDSN) = DATASET\nISREDIT DEFINE SEPLINE PGM  MACRO\nISREDIT DEFINE SEP PGM  MACRO\nISREDIT DEFINE LCASE PGM  MACRO\nISREDIT DEFINE UCASE PGM  MACRO\nISREDIT RECOVERY ON\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INITIAL": {"ttr": 4102, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x8a\\x00\\x8a\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 138, "newlines": 138, "modlines": 0, "user": "EDITMAC"}, "text": " ISREDIT MACRO (OPTION)\n IF &STR(&OPTION) = ? THEN DO\n ISPEXEC DISPLAY PANEL(INITIAL)\n EXIT\n END\n SET &PRE = &SYSUID..PVTLIB\n ISPEXEC VGET VNAME PROFILE\n IF &VNAME = THEN DO\n WRITENR ENTER YOUR NAME AS YOU WANT IT TO APPEAR ON DOCUMENTS\n READ &XFIRST &XMID &XLAST\n IF &XFIRST = THEN DO\n WRITE ENTER YOUR NAME AS YOU WANT IT TO APPEAR ON DOCUMENTS\n WRITE IF NO ENTRY IS MADE THIS MACRO WILL TERMINATE\n READ &XFIRST &XMID &XLAST\n IF &XFIRST = THEN EXIT\n END\n SET &VNAME = &STR(&XFIRST &XMID &XLAST)\n ISPEXEC VPUT VNAME PROFILE\n END\nISREDIT (FIRST) = LINENUM .ZF\nIF &FIRST \u00ac= 0 THEN +\n   DO\n         IF &OPTION = &STR(FORCE) THEN\n         ELSE EXIT CODE(0)\n   END\nISREDIT (DATASET) = DATASET\nIF &DATASET = &STR(&PRE..CLIST)    OR +\n   &DATASET = &STR(&PRE..VCLIST)   OR +\n   &DATASET = &STR(&PRE..EDIT.MACROS) THEN +\n   DO\n        ISREDIT NUM ON\n        ISREDIT RECOVERY ON\n        ISREDIT STATS ON\n        ISREDIT (DATASET) = DATASET\n        ISREDIT (MEMBER)  = MEMBER\n        SET &DATASET = &STR(&DATASET.(&MEMBER) )\n        SET &DATA1  = &STR( PROC 0)\nSET &DATA2  = &STR( &NRSTR(/*)\nSET &DATA3  = &STR( &NRSTR(/*)       DATASET:  &DATASET )\nSET &DATA4  = &STR( &NRSTR(/*)        AUTHOR:  &VNAME )\nSET &DATA5  = &STR( &NRSTR(/*)     DATE/TIME:  &SYSDATE     &SYSTIME\nSET &DATA6  = &STR( &NRSTR(/*)   DESCRIPTION: )\nSET &DATA7  = &STR( &NRSTR(/* CONTROL LIST CONLIST SYMLIST)\n        ISREDIT LINE_AFTER 0  = (DATA1)\n        ISREDIT LINE_AFTER 1  = (DATA2)\n        ISREDIT LINE_AFTER 2  = (DATA3)\n        ISREDIT LINE_AFTER 3  = (DATA4)\n        ISREDIT LINE_AFTER 4  = (DATA5)\n        ISREDIT LINE_AFTER 5  = (DATA2)\n        ISREDIT LINE_AFTER 6  = (DATA6)\n        ISREDIT LINE_AFTER 7  = (DATA2)\n        ISREDIT LINE_AFTER 8  = (DATA2)\n        ISREDIT LINE_AFTER 9  = (DATA7)\n        ISREDIT LINE_AFTER 10 = (DATA2)\n        ISREDIT INSERT .ZL 13\n        ISREDIT CURSOR = 07 21\n        EXIT CODE(0)\n   END\nIF &DATASET = &STR(&PRE..CNTL)  OR +\n   &DATASET = &STR(&PRE..SOURCE) THEN   +\n   DO\n        ISREDIT NUM ON\n        ISREDIT RECOVERY ON\n        ISREDIT (DATASET) = DATASET\n        ISREDIT (MEMBER)  = MEMBER\n        SET &DATASET = &STR(&DATASET.(&MEMBER) )\n        ISREDIT STATS ON\n        ISREDIT COPY JOBCARD AFTER .ZL\nSET &DATA1  = &STR(&NRSTR(//*)\nSET &DATA2  = &STR(&NRSTR(//*)       DATASET:  &DATASET )\nSET &DATA3  = &STR(&NRSTR(//*)        AUTHOR:  &VNAME )\nSET &DATA4  = &STR(&NRSTR(//*)     DATE/TIME:  &SYSDATE     &SYSTIME\nSET &DATA5  = &STR(&NRSTR(//*)\nSET &DATA6  = &STR(&NRSTR(//*)   DESCRIPTION: )\nSET &DATA7  = &STR(&NRSTR(//*)\n        ISREDIT LINE_AFTER 2 = (DATA1)\n        ISREDIT LINE_AFTER 3 = (DATA2)\n        ISREDIT LINE_AFTER 4 = (DATA3)\n        ISREDIT LINE_AFTER 5 = (DATA4)\n        ISREDIT LINE_AFTER 6 = (DATA5)\n        ISREDIT LINE_AFTER 7 = (DATA6)\n        ISREDIT LINE_AFTER 8 = (DATA7)\n        ISREDIT INSERT .ZL 14\n        ISREDIT CURSOR = 01 23\n        EXIT CODE(0)\n   END\nIF &DATASET = &STR(&PRE..TEXT) THEN +\n   DO\n        CONTROL ASIS\n        ISREDIT RECOVERY ON\n        ISREDIT NUMBER OFF\n        ISREDIT CAPS OFF\n        ISREDIT (DATASET) = DATASET\n        ISREDIT (MEMBER)  = MEMBER\n        SET &DATASET = &STR(&DATASET.(&MEMBER) )\n        SET &MONTH01 = &STR(JANUARY)\n        SET &MONTH02 = &STR(FEBRUARY)\n        SET &MONTH03 = &STR(MARCH)\n        SET &MONTH04 = &STR(APRIL)\n        SET &MONTH05 = &STR(MAY)\n        SET &MONTH06 = &STR(JUNE)\n        SET &MONTH07 = &STR(JULY)\n        SET &MONTH08 = &STR(AUGUST)\n        SET &MONTH09 = &STR(SEPTEMBER)\n        SET &MONTH10 = &STR(OCTOBER)\n        SET &MONTH11 = &STR(NOVEMBER)\n        SET &MONTH12 = &STR(DECEMBER)\n        SET &MM      = &STR(&SUBSTR(1:2,&SYSDATE))\n        SET &DD      = &STR(&SUBSTR(4:5,&SYSDATE))\n        SET &YY      = &STR(&SUBSTR(7:8,&SYSDATE))\n        SET &MONTH   = &&MONTH&MM\nSET &DATE    = &STR(&MONTH &DD, 19&YY)\nSET &DATA1  = &STR(&NRSTR(1   ENRON CORP                 )\nSET &DATA2  = &STR(&NRSTR(    P.O. BOX 1188              )\nSET &DATA3  = &STR(&NRSTR(    1400 SMITH                 )\nSET &DATA4  = &STR(&NRSTR(    HOUSTON, TEXAS 77251-1188  )\nSET &DATA5  = &STR(&NRSTR(    MEMORANDUM                 )\nSET &DATA6  = &STR(&NRSTR(-          TO:                 )\nSET &DATA7  = &STR(&NRSTR(0        FROM:  &VNAME         )\nSET &DATA8  = &STR(&NRSTR(0        DATE:  &DATE          )\nSET &DATA9  = &STR(&NRSTR(0     SUBJECT:                 )\nSET &DATA10 = &STR(&NRSTR(-                              )\n        ISREDIT LINE_AFTER 0 = (DATA1)\n        ISREDIT LINE_AFTER 1 = (DATA2)\n        ISREDIT LINE_AFTER 2 = (DATA3)\n        ISREDIT LINE_AFTER 3 = (DATA4)\n        ISREDIT LINE_AFTER 4 = (DATA5)\n        ISREDIT LINE_AFTER 5 = (DATA6)\n        ISREDIT LINE_AFTER 6 = (DATA7)\n        ISREDIT LINE_AFTER 7 = (DATA8)\n        ISREDIT LINE_AFTER 8 = (DATA9)\n        ISREDIT LINE_AFTER 9 = (DATA10)\n        ISREDIT BOUNDS 05 72\n        ISREDIT CAPS OFF\n        ISREDIT CURSOR = 06 17\n        EXIT CODE(0)\n   END\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ISPUCMB": {"ttr": 4105, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\r\\x00\\r\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "EDITMAC"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "JC": {"ttr": 4107, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00K\\x00\\x18\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 75, "newlines": 24, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP) NOPROCESS\nISREDIT (MEM) = MEMBER\nISREDIT (DSN) = DATASET\nIF &MEM = THEN SET &DSNX = &STR(&DSN)\nIF &MEM NE THEN SET &DSNX = &STR(&DSN(&MEM))\n IF &HELP = ? THEN DO\n ISPEXEC DISPLAY PANEL(JC)\n EXIT\n END\n  ISREDIT PROCESS DEST\n  IF &LASTCC = 0 THEN DO\n  ISREDIT LOCATE .ZDEST\n  IF &LASTCC = 8 THEN GOTO EMPTY\n     ISPEXEC VGET ZLLGJOB1\n       ISREDIT MASKLINE = \"&ZLLGJOB1\"\n       ISREDIT LINE_AFTER .ZDEST = MASKLINE\n\n     ISPEXEC VGET ZLLGJOB2\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 1\n       ISREDIT MASKLINE = \"&ZLLGJOB2\"\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\n     ISPEXEC VGET ZLLGJOB3\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 2\n       ISREDIT MASKLINE = '&ZLLGJOB3'\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\n     ISPEXEC VGET ZLLGJOB4\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 3\n       ISREDIT MASKLINE = '&ZLLGJOB4'\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 4\n       ISREDIT MASKLINE = '//*   REFER   &DSNX '\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n       GOTO ERROROUT\n    END\n  ELSE DO\nEMPTY: +\n     ISPEXEC VGET ZLLGJOB1\n       ISREDIT MASKLINE = \"&ZLLGJOB1\"\n       ISREDIT LINE_AFTER 0 = MASKLINE\n\n     ISPEXEC VGET ZLLGJOB2\n       ISREDIT (LINEPTR) = LINENUM .ZCSR\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&ZLLGJOB2\"\n       ISREDIT LINE_AFTER 1 = MASKLINE\n\n     ISPEXEC VGET ZLLGJOB3\n       ISREDIT (LINEPTR) = LINENUM .ZCSR\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = '&ZLLGJOB3'\n       ISREDIT LINE_AFTER 2 = MASKLINE\n\n     ISPEXEC VGET ZLLGJOB4\n       ISREDIT (LINEPTR) = LINENUM .ZCSR\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = '&ZLLGJOB4'\n       ISREDIT LINE_AFTER 3 = MASKLINE\n\n       ISREDIT (LINEPTR) = LINENUM .ZCSR\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = '//*   REFER   &DSNX '\n       ISREDIT LINE_AFTER 4 = MASKLINE\nERROROUT:+\n       ISREDIT MASKLINE = ' '\n      SET RC = 0\n  END\n  END\n  EXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JCLBOX": {"ttr": 4110, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00>\\x006\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 62, "newlines": 54, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP) NOPROCESS\n IF &HELP = ? THEN DO\n ISPEXEC DISPLAY PANEL(JC)\n EXIT\n END\n DO WHILE &LENGTH(&STR(&STARS)) LT 65\n SET &STARS = &STR(&STR(&STARS)&STR(*))\n END\n   ISREDIT PROCESS RANGE C\n   SET LCC = &LASTCC\n   ISREDIT (RC) = RANGE_CMD\n   IF &LASTCC = 4 | &STR(&RC) \u00ac= &STR(C) THEN DO\n      SET &ZEDSMSG = NO RANGE SPECIFIED\n      SET &ZEDLMSG = YOU MUST SPECIFY A RANGE OF LINES TO BE CENTERED +\n         USING A \"C<N>\" OR \"CC\"\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(4)\n   END\n   ISREDIT (FIRST) = LINENUM .ZFRANGE\n   ISREDIT (LAST) = LINENUM .ZLRANGE\n   ISREDIT (FR) = LINENUM .ZFRANGE\n   ISREDIT (LR) = LINENUM .ZLRANGE\n  ISREDIT BOUNDS = 1 72\n   SET &C = &FR\n CONTROL LIST MSG CONLIST\n  DO WHILE (&C <= &LR)\n    ISREDIT SHIFT ( &C 2\n    ISREDIT SHIFT > &C 3\n    SET &C = &C + 1\n    END\n CONTROL NOMSG NOLIST NOCONLIST\n       ISREDIT MASKLINE = \"&STR(//****&STARS)\"\n       ISREDIT LINE_BEFORE &FIRST = MASKLINE\n  ISREDIT (LB,RB) = BOUNDS\n  SET I = &FR\n  DO WHILE (&I <= &LR)\n    ISREDIT\n    ISREDIT LABEL &I = .LJ\n    ISREDIT SEEK P'\u00ac' .LJ .LJ &LB &RB FIRST\n    ISREDIT SEEK P'\u00ac' .LJ .LJ &LB &RB LAST\n    ISREDIT CHANGE P'===' '/ *' 1\n    ISREDIT CHANGE P'=' '*' 71\n    SET COUNT = &EVAL(&LEFT - &RIGHT + 1) / 2\n    IF &COUNT > 0 THEN +\n      ISREDIT SHIFT ) &I &COUNT\n    ELSE +\n      IF &COUNT < 0 THEN +\n        DO\n          SET COUNT = -1*&COUNT\n        END\n    IF &I = &FR THEN ISREDIT LABEL &I = .LJX\n    SET I = &I + 1\n  END\n  ISREDIT SEEK P'=' .LJX .LJX FIRST\n       ISREDIT MASKLINE = \"&STR(//****&STARS)\"\n  SET &LAST = &LAST + 1\n       ISREDIT LINE_AFTER &LAST = MASKLINE\nERROROUT:+\n       ISREDIT MASKLINE = ' '\n      SET RC = 0\n  END\n  EXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JOBCARD": {"ttr": 4112, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00=\\x00=\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 61, "newlines": 61, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP) NOPROCESS\n IF &HELP = ? THEN DO\n ISPEXEC DISPLAY PANEL(JC)\n EXIT\n END\n  ISREDIT PROCESS DEST\n  IF &LASTCC = 0 THEN DO\n  ISREDIT LOCATE .ZDEST\n  IF &LASTCC = 8 THEN GOTO EMPTY\n     ISPEXEC VGET ZLLGJOB1\n       ISREDIT MASKLINE = \"&ZLLGJOB1\"\n       ISREDIT LINE_AFTER .ZDEST = MASKLINE\n\n     ISPEXEC VGET ZLLGJOB2\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 1\n       ISREDIT MASKLINE = \"&ZLLGJOB2\"\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\n     ISPEXEC VGET ZLLGJOB3\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 2\n       ISREDIT MASKLINE = '&ZLLGJOB3'\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\n     ISPEXEC VGET ZLLGJOB4\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 3\n       ISREDIT MASKLINE = '&ZLLGJOB4'\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n       GOTO ERROROUT\n    END\n  ELSE DO\nEMPTY: +\n     ISPEXEC VGET ZLLGJOB1\n       ISREDIT MASKLINE = \"&ZLLGJOB1\"\n       ISREDIT LINE_AFTER 0 = MASKLINE\n\n     ISPEXEC VGET ZLLGJOB2\n       ISREDIT (LINEPTR) = LINENUM .ZCSR\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&ZLLGJOB2\"\n       ISREDIT LINE_AFTER 1 = MASKLINE\n\n     ISPEXEC VGET ZLLGJOB3\n       ISREDIT (LINEPTR) = LINENUM .ZCSR\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = '&ZLLGJOB3'\n       ISREDIT LINE_AFTER 2 = MASKLINE\n\n     ISPEXEC VGET ZLLGJOB4\n       ISREDIT (LINEPTR) = LINENUM .ZCSR\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = '&ZLLGJOB4'\n       ISREDIT LINE_AFTER 3 = MASKLINE\nERROROUT:+\n       ISREDIT MASKLINE = ' '\n      SET RC = 0\n  END\n  END\n  EXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LCASE": {"ttr": 4114, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x01\\x00\\x01\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 1, "newlines": 1, "modlines": 0, "user": "EDITMAC"}, "text": "isredit macro    /* used for maclist only */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LCASEC": {"ttr": 4116, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00=\\x00=\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 61, "newlines": 61, "modlines": 0, "user": "EDITMAC"}, "text": "  ISREDIT MACRO\n/**********************************************************************\n/*   THIS MACRO CONVERTS ALL UPPERCASE CHARACTERS TO LOWERCASE        *\n/**********************************************************************\n  ISREDIT CAPS = OFF\n  ISREDIT HEX ON VERT\n  ISREDIT CHANGE X'C0' X'80' ALL\n  ISREDIT CHANGE X'C1' X'81' ALL\n  ISREDIT CHANGE X'C2' X'82' ALL\n  ISREDIT CHANGE X'C3' X'83' ALL\n  ISREDIT CHANGE X'C4' X'84' ALL\n  ISREDIT CHANGE X'C5' X'85' ALL\n  ISREDIT CHANGE X'C6' X'86' ALL\n  ISREDIT CHANGE X'C7' X'87' ALL\n  ISREDIT CHANGE X'C8' X'88' ALL\n  ISREDIT CHANGE X'C9' X'89' ALL\n  ISREDIT CHANGE X'CA' X'8A' ALL\n  ISREDIT CHANGE X'CB' X'8B' ALL\n  ISREDIT CHANGE X'CC' X'8C' ALL\n  ISREDIT CHANGE X'CD' X'8D' ALL\n  ISREDIT CHANGE X'CE' X'8E' ALL\n  ISREDIT CHANGE X'CF' X'8F' ALL\n  ISREDIT CHANGE X'D0' X'90' ALL\n  ISREDIT CHANGE X'D1' X'91' ALL\n  ISREDIT CHANGE X'D2' X'92' ALL\n  ISREDIT CHANGE X'D3' X'93' ALL\n  ISREDIT CHANGE X'D4' X'94' ALL\n  ISREDIT CHANGE X'D5' X'95' ALL\n  ISREDIT CHANGE X'D6' X'96' ALL\n  ISREDIT CHANGE X'D7' X'97' ALL\n  ISREDIT CHANGE X'D8' X'98' ALL\n  ISREDIT CHANGE X'D9' X'99' ALL\n  ISREDIT CHANGE X'DA' X'9A' ALL\n  ISREDIT CHANGE X'DB' X'9B' ALL\n  ISREDIT CHANGE X'DC' X'9C' ALL\n  ISREDIT CHANGE X'DD' X'9D' ALL\n  ISREDIT CHANGE X'DE' X'9E' ALL\n  ISREDIT CHANGE X'DF' X'9F' ALL\n  ISREDIT CHANGE X'E0' X'A0' ALL\n  ISREDIT CHANGE X'E1' X'A1' ALL\n  ISREDIT CHANGE X'E2' X'A2' ALL\n  ISREDIT CHANGE X'E3' X'A3' ALL\n  ISREDIT CHANGE X'E4' X'A4' ALL\n  ISREDIT CHANGE X'E5' X'A5' ALL\n  ISREDIT CHANGE X'E6' X'A6' ALL\n  ISREDIT CHANGE X'E7' X'A7' ALL\n  ISREDIT CHANGE X'E8' X'A8' ALL\n  ISREDIT CHANGE X'E9' X'A9' ALL\n  ISREDIT CHANGE X'EA' X'AA' ALL\n  ISREDIT CHANGE X'EB' X'AB' ALL\n  ISREDIT CHANGE X'EC' X'AC' ALL\n  ISREDIT CHANGE X'ED' X'AD' ALL\n  ISREDIT CHANGE X'EE' X'AE' ALL\n  ISREDIT CHANGE X'EF' X'AF' ALL\n  ISREDIT HEX OFF\n  SET ZEDSMSG = &STR(LOWERCASE COMPLETE)\n  SET ZEDLMSG = &STR(ALL UPPERCASE CHARACTERS CONVERTED TO LOWERCASE)\n  ISPEXEC SETMSG MSG(ISRZ000)\n  ISREDIT RESET CHG\n  ISREDIT LOCATE 1\n  EXIT CODE(1)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LJUST": {"ttr": 4353, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x007\\x007\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 55, "newlines": 55, "modlines": 0, "user": "EDITMAC"}, "text": "   ISREDIT MACRO (TYPE) NOPROCESS\n        IF &STR(&TYPE) = ? THEN +\n            DO\nISPEXEC DISPLAY PANEL(LJUST)\n            EXIT\n            END\n\n   ISPEXEC CONTROL ERRORS RETURN\n   CONTROL ASIS\n   ISREDIT PROCESS RANGE C\n   SET LCC = &LASTCC\n   ISREDIT (RC) = RANGE_CMD\n   IF &LASTCC = 4 | &STR(&RC) \u00ac= &STR(C) THEN DO\n      SET &ZEDSMSG = NO RANGE SPECIFIED\n      SET &ZEDLMSG = YOU MUST SPECIFY A RANGE OF LINES TO BE CENTERED +\n         USING A \"C<N>\" OR \"CC\"\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(4)\n   END\n   ISREDIT (FR) = LINENUM .ZFRANGE\n   ISREDIT (LR) = LINENUM .ZLRANGE\n   ISREDIT (LB,RB) = BOUNDS\n   SET BL = &RB - &LB + 1\n   SET I = &FR\n   DO WHILE( &I <= &LR )\n      ISREDIT (LN) = LINE &I\n      SET L = &LENGTH(&SUBSTR(&LB:&RB,&NRSTR(&LN)))\n      SET S = &LB\n      DO WHILE(&S < &L)\n         IF &SUBSTR(&S:&S,&NRSTR(&LN)) \u00ac= &STR( ) THEN GOTO FOUNDS\n         SET S = &S + 1\n      END\nFOUNDS: +\n      SET E = &L\n      DO WHILE(&E > &S)\n         IF &SUBSTR(&E:&E,&NRSTR(&LN)) \u00ac= &STR( ) THEN GOTO FOUNDE\n         SET E = &E - 1\n      END\nFOUNDE: +\n      SET LINE = &SUBSTR(&S:&E,&NRSTR(&LN))\n      SET L = &LENGTH(&NRSTR(&LINE))\n      SET D = &BL - &L\n      IF &D > 1 THEN DO\n         SET H = &D\n         SET LINE2 = &SUBSTR(1:&H,&STR(                                -\n                                                                       )\n         IF &LB = 1 THEN +\n            SET LINE = &NRSTR(&LINE.&LINE2)\n         ELSE +\n            SET LINE = &SUBSTR(1:&LB-1,&NRSTR(&LN))&NRSTR(&LINE.&LINE2)\n      END\n      ISREDIT LINE &I = (LINE)\n      SET I = &I + 1\n   END\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MACHELP": {"ttr": 4355, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x08\\x00\\x04\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 8, "newlines": 4, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (PAN) NOPROCESS\n      IF &PAN = ? THEN DO\n      ISPEXEC DISPLAY PANEL(MACHELP)\n      EXIT\n      END\n ISPEXEC DISPLAY PANEL(&PAN)\n EXIT\n END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MACLIST": {"ttr": 4357, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00M\\x00M\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 77, "newlines": 77, "modlines": 0, "user": "EDITMAC"}, "text": "PROC 0 WNW DEBUG\nISREDIT MACRO (WNW,DEBUG)\n      IF &WNW = ? THEN DO\n      ISPEXEC DISPLAY PANEL(MACLIST)\n      EXIT\n      END\nIF &DEBUG = DEBUG  THEN +\nCONTROL LIST SYMLIST CONLIST\nIF &WNW \u00ac= THEN DO\nWRITENR TABLE UPDATE LIMITED TO MACRO ADMINISTRATOR ENTER PASSWORD:\nREAD &PASS\nIF &PASS \u00ac= ADMINISTRATOR THEN DO\nWRITE UPDATE MODE ABORTED\nSET &WNW = NOWRITE\nGOTO NOWRITE\nEND\nSET &WNW = WRITE\nGOTO PROCESS\nEND\nNOWRITE: +\nSET &WNW = NOWRITE\nPROCESS: +\nSET &MSG =&STR()\n ISPEXEC CONTROL ERRORS RETURN\nISPEXEC TBOPEN EDITMACS &WNW\n  SET &RCC = &LASTCC\n  IF &RCC = 8 THEN  +\n    DO\n      WRITE THE MASTER TABLE DOES NOT EXIST WE WILL MAKE ONE\n      SET &WNW= WRITE\n      SET &MACNAME = B\n      SET &MACDESC = BROWSE MEMBER OF CURRENT DATA\n      ISPEXEC TBCREATE EDITMACS NAMES(MACNAME MACDESC) WRITE\n      ISPEXEC TBADD EDITMACS\n      ISPEXEC TBOPEN EDITMACS &WNW\n    END\nNEXT: +\nSET &OPTN =\n    ISPEXEC TBSORT EDITMACS FIELDS(MACNAME)\nAFTER: +\nISPEXEC TBDISPL EDITMACS PANEL(MACLIST) MSG(&MSG)\nIF &LASTCC = 8 THEN SET &EXIT = YES\n   IF &EXIT = YES THEN DO\n   ISPEXEC TBCLOSE EDITMACS\n   EXIT\n   END\n        IF &LENGTH(&STR(&ZCMD)) > 2 THEN GOTO SEARCH\n        IF &LENGTH(&STR(&ZCMD)) = 1 THEN DO\n     SET &OPTN = &SUBSTR(1:1,&STR(&ZCMD))\n   END\nIF &OPTN=A && &WNW=WRITE THEN DO\n    SET &MACNAME =\n    SET &MACDESC =\n    ISPEXEC DISPLAY PANEL(MACADD2)\n    ISPEXEC TBADD EDITMACS\n    GOTO NEXT\n    END\nIF &OPTN=D && &WNW=WRITE THEN +\n    ISPEXEC TBDELETE EDITMACS\n    GOTO NEXT\n END\nSEARCH: +\n    IF &SUBSTR(1:1,&STR(&ZCMD)) = &STR(L) OR +\n       &SUBSTR(1:1,&STR(&ZCMD)) = &STR(F) THEN DO\n        SET &MACNAME = &STR()\n        IF &LENGTH(&STR(&ZCMD)) > 3 THEN DO\n            IF &SUBSTR(3:3,&STR(&ZCMD)) \u00ac= $STR( ) THEN DO\n                SET &MACNAME = &SUBSTR(3:&LENGTH(&STR(&ZCMD)),&STR(&ZCMD))\n                SET &ZCMD  = &STR()\n                ISPEXEC TBSARG EDITMACS NEXT NAMECOND(MACNAME,EQ)\n                END\n                END\n                END\n      ISPEXEC TBSCAN EDITMACS ARGLIST(MACNAME)\n      IF &LASTCC = 0 THEN GOTO AFTER\nSET &OPTN =\n   GOTO NEXT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MEMLIST": {"ttr": 4360, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00@\\x00@\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 64, "newlines": 64, "modlines": 0, "user": "EDITMAC"}, "text": " ISREDIT MACRO (FROM,TO)\n ISREDIT (WORKDSN) = DATASET\n SET &Z9 = Z9999999\n IF &FROM = ? THEN DO\n ISPEXEC DISPLAY PANEL(MEMLIST)\n EXIT\n END\n IF &FROM \u00ac= THEN SET &RT = &STR(RANGE &FROM TO &TO)\n IF &TO = THEN SET &TO = &Z9\n SET &TARGET1 = &FROM\n SET T1 = &LENGTH(&TARGET1)\n IF &FROM =  THEN SET &T1 = 8\n SET &TARGET2 = &TO\n SET T2 = &LENGTH(&TARGET2)\nSET  PDSDSN = &WORKDSN\n\n\n/* INITIALIZE DATASET */\nISPEXEC  LMINIT DATAID(PDSID) DATASET('&PDSDSN') +\n                ENQ(SHRW)                        +\n                ORG(PDSORG)\nSET LMRC = &LASTCC\nIF &LMRC \u00ac= 0 THEN +\n   DO\n      WRITE LMINIT FAILED - RETURN CODE &LMRC\n      WRITE DATA SET IS NOT ALLOCATED OR NOT PARTITIONED\n      EXIT CODE(8)\n   END\n\nWRITE LIST OF CURRENT MEMBERS OF:'&WORKDSN'  &RT\n/* OPEN DATA SET */\nISPEXEC LMOPEN DATAID(&PDSID) OPTION(INPUT)\nSET LMRC = &LASTCC\n\n/* CALL EDIT WITH EACH MEMBER OF THE DATA SET AND SPECIFY THE */\n/* INITIAL EDIT MACRO.                                        */\nDO WHILE (&LMRC = 0)\n  /* BUILD MEMBER LIST AND RETURN NEXT MEMBER */\n  ISPEXEC LMMLIST DATAID(&PDSID) -\n        OPTION(LIST) MEMBER(MEMBER) -\n        STATS(NO)\n  SET LMRC = &LASTCC\n  IF &LMRC = 0 THEN /* NOT END OF MEMBER LIST */ +\n     DO\n     IF &SUBSTR(1:&T1,&MEMBER) GE &TARGET1 AND +\n      &SUBSTR(1:&T2,&MEMBER) LE &TARGET2  THEN DO\n       WRITENR &MEMBER\n       END\n     END\n END\n WRITE\n WRITE\n WRITE\n WRITE\nWRITE  END OF SELECTED MEMBER LIST\n/* FREE MEMBER LIST */\nISPEXEC LMMLIST DATAID(&PDSID) OPTION(FREE)\n/* CLOSE DATA SET */\nISPEXEC LMCLOSE DATAID(&PDSID)\n/* FREE DATA ID */\nISPEXEC LMFREE  DATAID(&PDSID)\n\n\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MERGE": {"ttr": 4362, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00R\\x00\\x9e\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 82, "newlines": 158, "modlines": 0, "user": "EDITMAC"}, "text": "//H562813A  JOB  (CHJVFZ,1,9999),'DAVIS--3357EB',\n//          MSGCLASS=X,REGION=2048K,\n//          CLASS=A,\n//          NOTIFY=H562813\n//*   REFER   H562813.PVTLIB.MACSOUT(MERGE)\n//COPYPNLS  EXEC PGM=IEBCOPY\n//SYSPRINT  DD   SYSOUT=*\n//INPNLS    DD   DISP=SHR,DSN=H562813.PVTLIB.MACSOUT\n//OUTPNLS   DD   DISP=SHR,DSN=H562813.PVTLIB.MACPNLS\n//SYSUT3    DD   UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSUT4    DD   UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSIN     DD   *\n  COPY INDD=INPNLS,OUTDD=OUTPNLS\n    S M=((#B,B,R))\n    S M=((#BIG,BIG,R))\n    S M=((#BIGS,BIGS,R))\n    S M=((#BLDCOPY,BLDCOPY,R))\n    S M=((#CENTER,CENTER,R))\n    S M=((#CHGALL,CHGALL,R))\n    S M=((#CLISTBO,CLISTBOX,R))\n    S M=((#CLONE,CLONE,R))\n    S M=((#COBBOX,COBBOX,R))\n    S M=((#COMMENT,COMMENTS,R))\n    S M=((#COMPRES,COMPRESS,R))\n    S M=((#CONT,CONT,R))\n    S M=((#CUT,CUT,R))\n    S M=((#CUTTO,CUTTO,R))\n    S M=((#D,D,R))\n    S M=((#DELCUT,DELCUT,R))\n    S M=((#DSIGENP,DSIGENP,R))\n    S M=((#DSIGENS,DSIGENS,R))\n    S M=((#E,E,R))\n    S M=((#EXIT,EXIT,R))\n    S M=((#FC,FC,R))\n    S M=((#FIXJCL,FIXJCL,R))\n    S M=((#FMEMD00,FMEMD00,R))\n    S M=((#FMEMD00,FMEMD00,R))\n    S M=((#FMEMD02,FMEMD02,R))\n    S M=((#INIT,INIT,R))\n    S M=((#INITIAL,INITIAL,R))\n    S M=((#JC,JC,R))\n    S M=((#JCLBOX,JCLBOX,R))\n    S M=((#LCASE,LCASE,R))\n    S M=((#LJUST,LJUST,R))\n    S M=((#MACHELP,MACHELP,R))\n    S M=((#MACLIST,MACLIST,R))\n    S M=((#MEMLIST,MEMLIST,R))\n    S M=((#MOVECOL,MOVECOLS,R))\n    S M=((#MSTATS,MSTATS,R))\n    S M=((#ONLY,ONLY,R))\n    S M=((#PARA,PARA,R))\n    S M=((#PASTE,PASTE,R))\n    S M=((#PBOX,PBOX,R))\n    S M=((#PFCAN,PFCAN,R))\n    S M=((#PFSET,PFSET,R))\n    S M=((#QCREATE,QCREATE,R))\n    S M=((#QEP,QREP,R))\n    S M=((#RCOLDEL,RCOLDEL,R))\n    S M=((#RCOLS,RCOLS,R))\n    S M=((#REPOTHE,REPOTHER,R))\n    S M=((#RJUST,RJUST,R))\n    S M=((#RNAME,RNAME,R))\n    S M=((#S,S,R))\n    S M=((#SEPLINE,SEPLINE,R))\n    S M=((#SHOWCT2,SHOWCUT2,R))\n    S M=((#SHOWCUT,SHOWCUT,R))\n    S M=((#SHOWDCB,SHOWDCB,R))\n    S M=((#SHOWFLO,SHOWFLOW,R))\n    S M=((#SHOWMAC,SHOWMACS,R))\n    S M=((#SLINE,SLINE,R))\n    S M=((#SORTDUP,SORTDUPS,R))\n    S M=((#STAMP,STAMP,R))\n    S M=((#ST2,ST2,R))\n    S M=((#ST3,ST3,R))\n    S M=((#ST4,ST4,R))\n    S M=((#ST5,ST5,R))\n    S M=((#SUM,SUM,R))\n    S M=((#SUPERT,SUPERT,R))\n    S M=((#T,T,R))\n    S M=((#UCASE,UCASE,R))\n    S M=((#UNSEP,UNSEP,R))\n    S M=((#XCOPY,XCOPY,R))\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MOVECOLS": {"ttr": 4365, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x007\\x007\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 55, "newlines": 55, "modlines": 0, "user": "EDITMAC"}, "text": "   ISREDIT MACRO (START STOP TO) NOPROCESS\n        IF &STR(&START) = HELP THEN +\n            DO\n            ISPEXEC SELECT PGM(ISPTUTOR) PARM(MOVECOLS)\n            EXIT\n            END\n\n   ISPEXEC CONTROL ERRORS RETURN\n   CONTROL ASIS\n   ISREDIT PROCESS RANGE S\n   SET LCC = &LASTCC\n   ISREDIT (RC) = RANGE_CMD\n   IF &LASTCC = 4 | &STR(&RC) \u00ac= &STR(S) THEN DO\n      SET &ZEDSMSG = NO RANGE SPECIFIED\n      SET &ZEDLMSG = YOU MUST SPECIFY A RANGE OF LINES TO BE MANIPULAT+\n         ED A \"S<N>\" OR \"SS\"\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(12)\n   END\n   IF &STOP =  | &START =  | &TO =  THEN DO\n      SET &ZEDSMSG = INVALID MOVE DATA\n      SET &ZEDLMSG = YOU MUST SPECIFY A START AND START COLOUMS AND DE+\n         STINATION OF DATA TO BE MOVED\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(12)\n   END\n   ISREDIT (FR) = LINENUM .ZFRANGE\n   ISREDIT (LR) = LINENUM .ZLRANGE\n   ISREDIT (LB,RB) = BOUNDS\n   SET BL = &RB - &LB + 1\n   SET I = &FR\n   DO WHILE( &I <= &LR )\n      ISREDIT (LN) = LINE &I\n      SET &HOLD = &NRSTR(&LN)\n      SET SEGX = &STR(&SUBSTR(&START:&STOP,&NRSTR(&LN)))\n      IF &START = 1 THEN DO\n      SET &SEG1 =\n      GOTO SEG2\n      END\n      SET SEG1 = &STR(&SUBSTR(&LB:&START-1,&NRSTR(&LN)))\nSEG2: +\n      SET SEG2 = &STR(&SUBSTR(&STOP+1:&RB,&NRSTR(&LN)))\n   SET &LINE = &STR(&SEG1&SEG2)\n   IF &TO = 1 THEN DO\n   SET &SEGA =\n   GOTO SEGB\n   END\n      SET SEGA = &STR(&SUBSTR(&LB:&TO-1,&NRSTR(&LINE)))\nSEGB: +\n  SET SEGB = &STR(&SUBSTR(&TO:&LENGTH(&NRSTR(&LINE)),&NRSTR(&LINE)))\n   SET &LINE = &STR(&SEGA&SEGX&SEGB)\n      ISREDIT LINE &I = (LINE)\n      SET I = &I + 1\n   END\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MRCLEAN": {"ttr": 4367, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x15\\x00\\x15\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP)\n      IF &HELP = ? THEN DO\n      ISPEXEC DISPLAY PANEL(MRCLEAN)\n      EXIT\n      END\nWRITE MR. CLEAN IS ABOUT TO WIPE OUT ALL DATA IN THIS DATASET.  IF YOU\nWRITE WANT THAT TO HAPPEN TYPE IN WIPEIT, OR PRESS A PFKEY TO EXIT\nREAD &MR\nIF &LENGTH(&MR) NE 6 THEN DO\nWRITE DATA PRESERVED\nEXIT\nEND\nIF &MR  = &STR(WIPEIT) THEN DO\nISREDIT (RIGHT) = LRECL\nISREDIT BNDS 1 &RIGHT\nISREDIT C P'=' ' ' ALL\nISREDIT RESET\nEXIT\nEND\nWRITE DATA PRESERVED\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MSTATS": {"ttr": 4369, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00P\\x00P\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 80, "newlines": 80, "modlines": 0, "user": "EDITMAC"}, "text": " ISREDIT MACRO (HELP) NOPROCESS\n ISREDIT (WORKDSN) = DATASET\n ISREDIT (MEMBER) = MEMBER\n IF &HELP = ? THEN DO\n ISPEXEC DISPLAY PANEL(MSTATS)\n EXIT\n END\nSET  PDSDSN = &WORKDSN\n  ISREDIT PROCESS DEST\n  SET &RC = &LASTCC\n     IF &RC = 8 THEN DO\n         SET ZEDSMSG = &STR(INDICATE POSITION)\n  SET ZEDLMSG = &STR(MARK 'A' OR \"B\" ON LINE WHERE STAT LINE +\n                            SHOULD BE INSERTED)\n     ISPEXEC SETMSG MSG(ISRZ000)\n      EXIT CODE(4)\n     END\n  IF &LASTCC = 0 THEN DO\n  ISREDIT LOCATE .ZDEST\n  SET &RC = &LASTCC\n  IF &RC = 8 THEN +\n     DO\n           SET ZEDSMSG = &STR(EMPTY DATA SET )\n        SET ZEDLMSG = &STR($STAS WORKS ONLY WHEN DATA SET HAS VALID +\n                                 DATA AND LINE NUMBERS)\n           ISPEXEC SETMSG MSG(ISRZ001)\n         EXIT CODE(12)\n   END\n\n\n/* INITIALIZE DATASET */\nISPEXEC  LMINIT DATAID(PDSID) DATASET('&PDSDSN') +\n                ENQ(SHRW)                        +\n                ORG(PDSORG)\nSET LMRC = &LASTCC\nIF &LMRC \u00ac= 0 THEN +\n   DO\n      WRITE LMINIT FAILED - RETURN CODE &LMRC\n      WRITE DATA SET IS NOT ALLOCATED OR NOT PARTITIONED\n      EXIT CODE(8)\n   END\n\n/* OPEN DATA SET */\nISPEXEC LMOPEN DATAID(&PDSID) OPTION(INPUT)\nSET LMRC = &LASTCC\n\n/* CALL EDIT WITH EACH MEMBER OF THE DATA SET AND SPECIFY THE */\n/* INITIAL EDIT MACRO.                                        */\n  /* BUILD MEMBER LIST AND RETURN NEXT MEMBER */\n  ISPEXEC LMMFIND DATAID(&PDSID) -\n        MEMBER(&MEMBER) -\n        STATS(YES)\nSET &P = &STR(.)\nSET &M1 = &STR(&MEMBER)\nSETIT: +\nIF &LENGTH(&M1) LT 8 THEN DO\n SET &M1 = &STR(&M1&STR(_))\n GOTO SETIT\n END\nSET &ST =+\n&STR(&M1)&STR(          &ZLVERS&P&ZLMOD &ZLCDATE +\n&ZLMDATE &ZLMTIME &ZLCNORC+\n &ZLINORC &ZLMNORC &ZLUSER)\nSET &S1 = &STR( +\n NAME             VV.MM  CREATED     CHANGED     SIZE INIT   MOD   +\n   ID)\n       SET &TLINE = &STR(MSGLINE \"&S1\")\n       SET &LLINE = &STR(MSGLINE \"&ST\")\n       ISREDIT LINE_AFTER .ZDEST = &LLINE\n       ISREDIT LINE_AFTER .ZDEST = &TLINE\n END\n/* FREE MEMBER LIST */\nISPEXEC LMMLIST DATAID(&PDSID) OPTION(FREE)\n/* CLOSE DATA SET */\nISPEXEC LMCLOSE DATAID(&PDSID)\n/* FREE DATA ID */\nISPEXEC LMFREE  DATAID(&PDSID)\n\n\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ONLY": {"ttr": 4372, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00#\\x00#\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (PARM)\n IF &STR(&PARM) = ? THEN DO\n ISPEXEC DISPLAY PANEL(ONLY)\n EXIT\n END\n/**********************************************************************/\n/* THIS IS A COMBINATION OF EXCLUDE AND FIND SUCH THAT \"ONLY\" THE     */\n/* LINES CONTAINING THE SEARCH STRING WILL BE DISPLAYED.              */\n/*                                                                    */\n/* TO RUN:                                                            */\n/*    ENTER ONLY FOLLOWED BY ANY VALID FIND COMMAND PARAMETER EXCEPT  */\n/*    ALL.                                                            */\n/**********************************************************************/\n/* IF NO PARAMETER WAS GIVEN, DISPLAY MESSAGE AND EXIT */\nIF &STR(&PARM) = &STR() THEN +\n  DO\n    SET &ZEDSMSG = &STR(NO PARAMETER SPECIFIED)\n    SET &ZEDLMSG = &STR(THE ONLY MACRO REQUIRES A SEARCH PARAMETER)\n    ISPEXEC SETMSG MSG(ISRZ001)\n    EXIT CODE(12) /* KEEPS COMMAND ON COMMAND LINE */\n  END\n\n/* EXCLUDE ALL LINES AND THEN FIND THE PARM */\nISREDIT EXCLUDE ALL\nISREDIT FIND ALL '&STR(&PARM)'\n\n/* GET THE FIND COUNTS AND REMOVE LEADING ZEROS FROM FINDLINE */\nISREDIT (FINDCNT,FINDLINE) = FIND_COUNTS\nSET &FINDLINE = &FINDLINE\n\n/* DISPLAY MESSAGE AND EXIT */\nSET ZEDSMSG = &STR(&FINDLINE LINES DISPLAYED)\nSET ZEDLMSG = &STR(ONLY &PARM CAUSED &FINDLINE LINES TO BE SHOWN)\nISPEXEC SETMSG MSG(ISRZ000)\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "OTHER": {"ttr": 4374, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x08\\x00\\x04\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 8, "newlines": 4, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO  (HELP)\n      IF &HELP = ? THEN DO\n      WRITE THIS IS ONLY AN EXAMPLE NO HELP AVAILABLE\n      EXIT\n      END\nSET &ZPF01 = \"HI\"\nSET &ZPF02 = \"BYE\"\nISPEXEC VPUT (ZPF01 ZPF02) PROFILE\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PARA": {"ttr": 4609, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x03\\x95\\x03\\x96\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 917, "newlines": 918, "modlines": 0, "user": "EDITMAC"}, "text": "/* ----------------------------- PARA ------------------------------ */\n/* ================================================================= */\n/*                HOUSTON INFORMATION PROCESSING CENTER              */\n/*                  OPERATING SYSTEMS SOFTWARE GROUP                 */\n/* ================================================================= */\n/*                                                                   */\n/*                                PARA                               */\n/*                        PARAGRAPH REFORMATTER                      */\n/*                                                                   */\n/*+ PARA IS AN EDIT MACRO THAT REFORMATS TEXT PARAGRAPHS.            */\n/* ITS  OPERATING   PARAMETERS   ARE   SPECIFIED   BY  KEYWORD=VALUE */\n/* COMBINATIONS AND/OR KEYWORDS.  EXAMPLE:                           */\n/*         PARA OL=13 NL=14 NJ                                       */\n/*                                                                   */\n/* THESE PARA PARAMETERS WILL BE REMEMBERED THROUGHOUT A SESSION; NO */\n/* RETYPING UNLESS YOU WANT TO CHANGE A PARAMETER:                   */\n/*  OL=NN DEFINES PARAGRAPH'S OLD LEFT MARGIN                        */\n/*  NL=NN DEFINES PARAGRAPH'S NEW LEFT MARGIN                        */\n/*  OR=NN DEFINES PARAGRAPH'S OLD RIGHT MARGIN                       */\n/*  NR=NN DEFINES PARAGRAPH'S NEW RIGHT MARGIN                       */\n/*  I=NN  DEFINES PARAGRAPH'S INDENTATION OF FIRST LINE              */\n/*  D     MEANS DOUBLE SPACE AT END OF SENTENCE                      */\n/*  ND    MEANS NO DOUBLE SPACE AT END OF SENTENCE (SINGLE SPACE)    */\n/*  J     MEANS RIGHT JUSTIFICATION OF PARAGRAPH                     */\n/*  NJ    MEANS NO RIGHT JUSTIFICATION OF PARAGRAPH                  */\n/*                                                                   */\n/* THESE PARA PARAMETERS ARE IN EFFECT FOR ONE EXECUTION ONLY:       */\n/*  C     MEANS CENTERING OF PARAGRAPH                               */\n/*  NC    MEANS NO CENTERING OF PARAGRAPH                            */\n/*  ?     MEANS SHOW PARAMETER VALUES VIA MSGLINE                    */\n/*  HELP  MEANS DISPLAY HELP INFORMATION                             */\n/*  TEST  MEANS TRACE THE EXECUTION OF PARA ON THE USER'S CONSOLE    */\n/*  RH    MEANS REMOVE WORD HYPHENATION                              */\n/*  LC    MEANS CHANGE TO LOWER CASE                                 */\n/*  PROF  MEANS STORE PARA PARAMETERS IN YOUR PROFILE DSN            */\n/*  SHAR  MEANS STORE PARA PARAMETERS IN SHARED VARIABLE POOL        */\n/*                                                                   */\n/* ================================================================= */\n/*                          MODIFICATION LOG                         */\n/*   DATE     AUTHOR             DESCRIPTION                         */\n/* 09/17/86 M. G. BERRYHILL    AUTHOR                                */\n/* 09/29/86 M. G. BERRYHILL    ADD RH, PROF PARAMETERS               */\n/* 10/01/86 M. G. BERRYHILL    FIX ADJUST VALUES                     */\n/* 10/16/86 M. G. BERRYHILL    SPEEDUP MODS, FIX CENTERING FUNCTION  */\n/* 10/29/86 M. G. BERRYHILL    ADD LC, FIX CENTERING FUNCTION        */\n/* ================================================================= */\n SET &STIME = &SYSTIME\n SET &SCPU  = &SYSCPU\n SET &SSRV  = &SYSSRV\n ISREDIT MACRO (P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12) NOPROCESS\n/*********************************************************************/\n/* PHASE 1: PROCESS PARAMETERS                                       */\n/*********************************************************************/\n/* PARA WILL STORE ITS VARIABLES  IN EITHER THE SHARED VARIABLE POOL */\n/* (DEFAULT), OR IN THE  PROFILE  VARIABLE POOL.  A VARIABLE, PARAP, */\n/* IN THE PROFILE VARIABLE POOL  \"REMEMBERS\"  THE USER'S CHOICE.  IF */\n/* PARAP IS NOT FOUND,  THE  SHARED  VARIABLE  POOL IS ASSUMED.  THE */\n/* PARA PARAMETERS ARE  GOTTEN  FROM  THE APPROPRIATE VARIABLE POOL. */\n/* IF NOT FOUND, DEFAULTS ARE CREATED BASED ON DISPLAY COLUMNS.      */\n ISPEXEC VGET (PARAP) PROFILE\n IF &LASTCC \u00ac= 0 THEN SET &PARAP = &STR(S)\n SET &POOL = &STR(SHARED)\n IF &STR(&PARAP) = &STR(P) THEN SET &POOL = &STR(PROFILE)\n ISPEXEC VGET (PARAOL,PARANL,PARAOR,PARANR,PARAD,PARAI,PARAJ) &POOL\n IF &LASTCC \u00ac= 0 THEN +\n  DO\n   SET &PARAI = 0\n   SET &PARAJ = &STR(J)\n   SET &PARAD = &STR(D)\n   ISREDIT (PARAOL,PARAOR) = DISPLAY_COLS\n   SET &PARANL = &PARAOL\n   SET &PARANR = &PARAOR\n  END\n SET &PARAC = &STR(NC)\n SET &PARAL = &STR(NL)\n SET &PARAH = &STR(NH)\n SET &PARAQ = &STR(N?)\n SET &PARAR = &STR(KH)\n SET &PARAT = &STR(NT)\n ISREDIT (MAXCOL) = DATA_WIDTH\n/* PROBLEM:  THE COLS LINE  COMMAND  DISPLAYS RECORD COLUMN NUMBERS, */\n/* WHILE INTERNAL PARA PROCESSING  IS  BASED ON DATA COLUMN NUMBERS. */\n/* IF NUMBER=ON, RECORD  COLUMN  NUMBERS  DO  NOT  MATCH DATA COLUMN */\n/* NUMBERS FOR CERTAIN DATASET  TYPES  AND RECORD FORMATS.  SEE EDIT */\n/* COMMAND IN THE  SPF/PDF  REFERENCE  MANUAL  FOR MORE INFORMATION. */\n/* SINCE THE USER  WILL  BE  CODING  PARAMETERS  IN  TERMS OF RECORD */\n/* COLUMN NUMBERS, AN ADJUSTMENT VALUE MUST BE CALCULATED.           */\n SET &ADJUST = 0\n ISREDIT (NUMPARM1,NUMPARM2) = NUMBER\n IF &STR(&NUMPARM1) = &STR(ON) THEN +\n  DO\n   IF &SUBSTR(9:13,&NUMPARM2) \u00ac= &STR(COBOL) THEN +\n    DO\n     ISREDIT (FRECFM) = RECFM\n     IF &STR(&FRECFM) = &STR(V) THEN SET &ADJUST = 8\n    END\n   ELSE SET &ADJUST = 6\n  END\n/* SCAN THE USER-CODED  PARAMETERS,  EXTRACTING VALUES AND ADJUSTING */\n/* THE PARA OPERATING PARAMETERS.                                    */\n ISREDIT SCAN = OFF\n SET &L = &STR(&&P)\n ISREDIT SCAN = ON\n SET &S = 1\n DO WHILE (&S \u00ac> 12)\n  SET &PARM = &STR(&L&S)\n  SET &S = &S + 1\n  IF &STR(&PARM) \u00ac= &STR() THEN +\n   DO\n    SET &PARMLEN = &LENGTH(&STR(&PARM))\n    SET &KEYLEN = &PARMLEN\n    IF &KEYLEN > 3 THEN SET &KEYLEN = 3\n    SET &KEYWORD = &SUBSTR(1:&KEYLEN,&PARM)\n    IF &KEYLEN > 2 THEN SET &KEYLEN = 2\n    SET &IKEY = &SUBSTR(1:&KEYLEN,&PARM)\n    IF &STR(&KEYWORD) = &STR(NL=) THEN +\n     DO\n      IF &PARMLEN < 4 THEN GOTO MSG1\n      SET &PARANL = &SUBSTR(4:&PARMLEN,&PARM)\n      IF &DATATYPE(&PARANL) \u00ac= NUM THEN GOTO MSG1\n      SET &PARANL = &PARANL - &ADJUST\n      IF &PARANL < 1 THEN GOTO MSG1\n      IF &PARANL > &MAXCOL THEN GOTO MSG1\n     END\n    ELSE IF &STR(&KEYWORD) = &STR(NR=) THEN +\n     DO\n      IF &PARMLEN < 4 THEN GOTO MSG1\n      SET &PARANR = &SUBSTR(4:&PARMLEN,&PARM)\n      IF &DATATYPE(&PARANR) \u00ac= NUM THEN GOTO MSG1\n      SET &PARANR = &PARANR - &ADJUST\n      IF &PARANR < 1 THEN GOTO MSG1\n      IF &PARANR > &MAXCOL THEN GOTO MSG1\n     END\n    ELSE IF &STR(&PARM) = &STR(?) THEN SET &PARAQ = &STR(?)\n    ELSE IF &STR(&IKEY) = &STR(I=) THEN +\n     DO\n      IF &PARMLEN < 3 THEN GOTO MSG1\n      SET &PARAI = &SUBSTR(3:&PARMLEN,&PARM)\n      IF &DATATYPE(&PARAI) \u00ac= NUM THEN GOTO MSG1\n     END\n    ELSE IF &STR(&KEYWORD) = &STR(OL=) THEN +\n     DO\n      IF &PARMLEN < 4 THEN GOTO MSG1\n      SET &PARAOL = &SUBSTR(4:&PARMLEN,&PARM)\n      IF &DATATYPE(&PARAOL) \u00ac= NUM THEN GOTO MSG1\n      SET &PARAOL = &PARAOL - &ADJUST\n      IF &PARAOL < 1 THEN GOTO MSG1\n      IF &PARAOL > &MAXCOL THEN GOTO MSG1\n     END\n    ELSE IF &STR(&KEYWORD) = &STR(OR=) THEN +\n     DO\n      IF &PARMLEN < 4 THEN GOTO MSG1\n      SET &PARAOR = &SUBSTR(4:&PARMLEN,&PARM)\n      IF &DATATYPE(&PARAOR) \u00ac= NUM THEN GOTO MSG1\n      SET &PARAOR = &PARAOR - &ADJUST\n      IF &PARAOR < 1 THEN GOTO MSG1\n      IF &PARAOR > &MAXCOL THEN GOTO MSG1\n     END\n    ELSE IF &STR(&PARM) = &STR(NJ) THEN SET &PARAJ = &STR(NJ)\n    ELSE IF &STR(&PARM) = &STR(J) THEN SET &PARAJ = &STR(J)\n    ELSE IF &STR(&PARM) = &STR(ND) THEN SET &PARAD = &STR(ND)\n    ELSE IF &STR(&PARM) = &STR(D) THEN SET &PARAD = &STR(D)\n    ELSE IF &STR(&PARM) = &STR(NC) THEN SET &PARAC = &STR(NC)\n    ELSE IF &STR(&PARM) = &STR(C) THEN SET &PARAC = &STR(C)\n    ELSE IF &STR(&PARM) = &STR(HELP) THEN SET &PARAH = &STR(H)\n    ELSE IF &STR(&PARM) = &STR(TEST) THEN SET &PARAT = &STR(T)\n    ELSE IF &STR(&PARM) = &STR(RH) THEN SET &PARAR = &STR(RH)\n    ELSE IF &STR(&PARM) = &STR(LC) THEN SET &PARAL = &STR(LC)\n    ELSE IF &STR(&PARM) = &STR(PROF) THEN SET &PARAP = &STR(P)\n    ELSE IF &STR(&PARM) = &STR(SHAR) THEN SET &PARAP = &STR(S)\n    ELSE GOTO MSG1\n   END\n  ELSE SET &S = 13\n END\n SET &PARM = &STR(I,NL CONFLICT)\n SET &P1 = &PARANL + &PARAI\n IF &P1 < 1 THEN GOTO MSG1\n IF &P1 > &MAXCOL THEN GOTO MSG1\n SET &PARM = &STR(NL,NR CONFLICT)\n IF &PARANL \u00ac< &PARANR THEN GOTO MSG1\n SET &PARM = &STR(OL,OR CONFLICT)\n IF &PARAOL \u00ac< &PARAOR THEN GOTO MSG1\n ISPEXEC VPUT (PARAP) PROFILE\n SET &POOL = &STR(SHARED)\n IF &STR(&PARAP) = &STR(P) THEN SET &POOL = &STR(PROFILE)\n ISPEXEC VPUT (PARAOL,PARANL,PARAOR,PARANR,PARAD,PARAI,PARAJ) &POOL\n SET &MAXLEN = &PARANR - &PARANL + 1\n SET &FUNC = &STR(1)\n IF &STR(&PARAC) = &STR(C) THEN SET &FUNC = &STR(2)\n IF &STR(&PARAH) = &STR(H) THEN SET &FUNC = &STR(3)\n IF &STR(&PARAQ) = &STR(?) THEN SET &FUNC = &STR(4)\n IF &STR(&PARAT) = &STR(T) THEN +\n  CONTROL MSG LIST PROMPT CONLIST SYMLIST\n CONTROL ASIS\n ISREDIT (STATUS) = USER_STATE\n ISREDIT CAPS = OFF\n/*********************************************************************/\n/* PHASE   2, FUNCTION 1: REFORMAT PARAGRAPH                         */\n/*********************************************************************/\n/*                                                                   */\n/* FUNCTION 1: REFORMAT PARAGRAPH                                    */\n/* SECTION  1: READ LINES, EXTRACT RIGHT MARGINS, WORDS, AND LEFT    */\n/*             MARGINS.                                              */\n/*                                                                   */\n/* INITIALIZATION                                                    */\n IF &STR(&FUNC) = &STR(1) THEN +\n  DO\n   ISREDIT PROCESS RANGE Z\n   IF &LASTCC > 0 THEN GOTO MSG2\n   ISREDIT (FLNUM) = LINENUM .ZFRANGE\n   ISREDIT (LLNUM) = LINENUM .ZLRANGE\n   ISREDIT LABEL &FLNUM = .BEGINC\n   ISREDIT LABEL &LLNUM = .ENDC\n   SET &BEGINL = &STR(.BEGINC)\n   SET &ENDL = &STR(.ENDC)\n   ISREDIT C X'50' X'FA' &BEGINL &ENDL ALL\n   ISREDIT C X'7D' X'FB' &BEGINL &ENDL ALL\n   SET &ILCNT = &LLNUM - &FLNUM + 1\n   SET &IWCNT = 0\n   ISPEXEC VGET (ZUSER)\n   ISPEXEC TBCREATE &ZUSER.W NAMES(WORD,WORDLEN) NOWRITE\n   IF &LASTCC \u00ac= 0 THEN +\n    DO\n     ISPEXEC TBEND &ZUSER.W\n     ISPEXEC TBCREATE &ZUSER.W NAMES(WORD,WORDLEN) NOWRITE\n    END\n   ISPEXEC TBCREATE &ZUSER.L NAMES(LMARGIN,RMARGIN,LNUM) NOWRITE\n   IF &LASTCC \u00ac= 0 THEN +\n    DO\n     ISPEXEC TBEND &ZUSER.L\n     ISPEXEC TBCREATE &ZUSER.L NAMES(LMARGIN,RMARGIN,LNUM) NOWRITE\n    END\n   SET &LPAD = &STR()\n   SET &LSTOP = &PARANL - 1\n   IF &PARAOL < &PARANL THEN +\n    DO\n     SET &LSTOP = &PARAOL - 1\n     SET &S = 0\n     SET &L = &PARANL - &PARAOL\n     DO WHILE (&S < &L)\n      SET &S = &S + 1\n      SET &LPAD = &STR(&LPAD )\n     END\n    END\n   SET &RPAD = &STR()\n   SET &RSTOP = &PARANR + 1\n   IF &PARAOR > &PARANR THEN +\n    DO\n     SET &RSTOP = &PARAOR + 1\n     SET &S = 0\n     SET &L = &PARAOR - &PARANR\n     DO WHILE (&S < &L)\n      SET &S = &S + 1\n      SET &RPAD = &STR(&RPAD )\n     END\n    END\n   SET &WLNUM = &FLNUM\n   DO WHILE (&WLNUM \u00ac> &LLNUM)\n    ISREDIT (WLINE) = LINE &WLNUM\n    SET &LNUM = &WLNUM\n    SET &WLNUM = &WLNUM + 1\n    SET &LMARGIN = &STR()\n    IF &LSTOP > 0 THEN SET &LMARGIN = &SUBSTR(1:&LSTOP,&WLINE)\n    SET &LMARGIN = &STR(&LMARGIN&LPAD)\n    SET &RMARGIN = &STR()\n    IF &RSTOP <= &MAXCOL THEN +\n     SET &RMARGIN = &SUBSTR(&RSTOP:&MAXCOL,&WLINE)\n    ISPEXEC TBADD &ZUSER.L\n    SET &S = &PARAOL\n    DO WHILE (&S \u00ac> &PARAOR)\n     SET &TS = &SUBSTR(&S,&WLINE)\n     DO WHILE (&STR(&TS) = &STR( ))\n      SET &S = &S + 1\n      IF &S \u00ac> &PARAOR THEN SET &TS = &SUBSTR(&S,&WLINE)\n      ELSE SET &TS = &STR(X)\n     END\n     IF &S \u00ac> &PARAOR THEN +\n      DO\n       SET &SOW = &S\n       DO WHILE (&STR(&TS) \u00ac= &STR( ))\n        SET &S = &S + 1\n        IF &S \u00ac> &PARAOR THEN SET &TS = &SUBSTR(&S,&WLINE)\n        ELSE SET &TS = &STR( )\n       END\n       SET &WORD = &SUBSTR(&SOW:&S-1,&WLINE)\n       SET &WORDLEN = &LENGTH(&STR(&WORD))\n       ISPEXEC TBADD &ZUSER.W\n       SET &IWCNT = &IWCNT + 1\n      END\n    END\n   END\n/*                                                                   */\n/* FUNCTION 1: REFORMAT PARAGRAPH                                    */\n/* SECTION  2: MANIPULATE EXTRACTED WORDS AND LEFT MARGINS           */\n/*                                                                   */\n/* IF DESIRED, REMOVE HYPHENS AND REBUILD WORD. WHY REMOVE HYPHENS?  */\n/* SUPPOSE NL/NR MISCODED PREVIOUSLY, TOO SHORT; NEXT ROUTINE WOULD  */\n/* HAVE SPLIT AND HYPHENATED WORDS PREVIOUSLY. THIS RECOVERS EASILY. */\n   IF &STR(&PARAR) = &STR(RH) THEN +\n    DO\n     ISPEXEC TBTOP &ZUSER.W\n     SET &EOTWRD = 0\n     ISPEXEC TBSKIP &ZUSER.W\n     IF &LASTCC \u00ac= 0 THEN SET &EOTWRD = 1\n     DO WHILE (&EOTWRD = 0)\n      IF &WORDLEN > 1 THEN +\n       DO\n        SET &P1 = &SUBSTR(&WORDLEN,&WORD)\n        IF &STR(&P1) = &STR(-) THEN +\n         DO\n          SET &P2 = &WORDLEN - 1\n          SET &P3 = &SUBSTR(1:&P2,&WORD)\n          ISPEXEC TBSKIP &ZUSER.W\n          IF &LASTCC = 0 THEN +\n           DO\n            SET &WORD = &STR(&P3&WORD)\n            SET &WORDLEN = &WORDLEN + &P2\n            ISPEXEC TBPUT &ZUSER.W\n            ISPEXEC TBSKIP &ZUSER.W NUMBER(-1)\n            ISPEXEC TBDELETE &ZUSER.W\n            SET &IWCNT = &IWCNT - 1\n            ISPEXEC TBSKIP &ZUSER.W\n           END\n          ELSE SET &EOTWRD = 1\n         END\n        ELSE +\n         DO\n          ISPEXEC TBSKIP &ZUSER.W\n          IF &LASTCC \u00ac= 0 THEN SET &EOTWRD = 1\n         END\n       END\n      ELSE +\n       DO\n        ISPEXEC TBSKIP &ZUSER.W\n        IF &LASTCC \u00ac= 0 THEN SET &EOTWRD = 1\n       END\n     END\n     SET &EOTWRD = 0\n     ISPEXEC TBBOTTOM &ZUSER.W\n     IF &LASTCC \u00ac= 0 THEN SET &EOTWRD = 1\n     DO WHILE (&EOTWRD = 0)\n      IF &WORDLEN > 1 THEN +\n       DO\n        SET &P1 = &SUBSTR(1,&WORD)\n        IF &STR(&P1) = &STR(-) THEN +\n         DO\n          SET &P2 = &WORDLEN - 1\n          SET &P3 = &SUBSTR(2:&WORDLEN,&WORD)\n          ISPEXEC TBSKIP &ZUSER.W NUMBER(-1)\n          IF &LASTCC = 0 THEN +\n           DO\n            SET &WORD = &STR(&WORD&P3)\n            SET &WORDLEN = &WORDLEN + &P2\n            ISPEXEC TBPUT &ZUSER.W\n            ISPEXEC TBSKIP &ZUSER.W\n            ISPEXEC TBDELETE &ZUSER.W\n            SET &IWCNT = &IWCNT - 1\n            ISPEXEC TBSKIP &ZUSER.W NUMBER(-1)\n           END\n          ELSE SET &EOTWRD = 1\n         END\n        ELSE +\n         DO\n          ISPEXEC TBSKIP &ZUSER.W NUMBER(-1)\n          IF &LASTCC \u00ac= 0 THEN SET &EOTWRD = 1\n         END\n       END\n      ELSE +\n       DO\n        ISPEXEC TBSKIP &ZUSER.W NUMBER(-1)\n        IF &LASTCC \u00ac= 0 THEN SET &EOTWRD = 1\n       END\n     END\n    END\n/* IF A WORD WON'T FIT BETWEEN NL AND NR, SPLIT AND HYPHENATE IT.    */\n/* ALSO, DOUBLE SPACE AT END OF SENTENCE.                            */\n   SET &P1 = &STR(Y)\n   ISPEXEC TBTOP &ZUSER.W\n   SET &EOTWRD = 0\n   ISPEXEC TBSKIP &ZUSER.W\n   IF &LASTCC \u00ac= 0 THEN SET &EOTWRD = 1\n   DO WHILE (&EOTWRD = 0)\n    IF &STR(&PARAL) = &STR(LC) THEN +\n     DO\n      SET &WORD = &STR(&SYSLC(&WORD))\n      IF &STR(&P1) = &STR(Y) THEN +\n       DO\n        SET &P1 = &STR(N)\n        SET &P2 = &SYSCAPS(&SUBSTR(1,&WORD))\n        SET &P3 = &STR()\n        IF &WORDLEN > 1 THEN SET &P3 = &SUBSTR(2:&WORDLEN,&WORD)\n        SET &WORD = &STR(&P2&P3)\n       END\n      ISPEXEC TBPUT &ZUSER.W\n     END\n    SET &P4 = &SUBSTR(&WORDLEN,&WORD)\n    IF &STR(&P4) = &STR(.) OR &STR(&P4) = &STR(?) +\n    OR &STR(&P4) = &STR(:) OR &STR(&P4) = &STR(!) +\n    OR &STR(&P4) = &STR(\") THEN +\n     DO\n      SET &P1 = &STR(Y)\n      IF &STR(&P4) \u00ac> &STR(\") AND &STR(&PARAD) = &STR(D) THEN +\n       DO\n        SET &WORD = &STR(&WORD )\n        SET &WORDLEN = &WORDLEN + 1\n        IF &WORDLEN \u00ac> &MAXLEN THEN ISPEXEC TBPUT &ZUSER.W\n       END\n     END\n    IF &WORDLEN > &MAXLEN THEN +\n     DO\n      SET &P4 = &SUBSTR(&MAXLEN+1:&WORDLEN,&WORD)\n      SET &P4 = &STR(-&P4)\n      SET &WORDLEN = &MAXLEN\n      SET &WORD = &SUBSTR(1:&MAXLEN,&WORD)\n      ISPEXEC TBPUT &ZUSER.W\n      SET &WORD = &STR(&P4)\n      SET &WORDLEN = &LENGTH(&STR(&P4))\n      ISPEXEC TBADD &ZUSER.W\n      SET &IWCNT = &IWCNT + 1\n      ISPEXEC TBSKIP &ZUSER.W NUMBER(-1)\n     END\n    ISPEXEC TBSKIP &ZUSER.W\n    IF &LASTCC \u00ac= 0 THEN SET &EOTWRD = 1\n   END\n/* ADJUST LEFT MARGIN FOR INDENTATION                                 */\n   ISPEXEC TBTOP &ZUSER.L\n   ISPEXEC TBSKIP &ZUSER.L\n   SET &IPAD = &STR()\n   IF &PARAI > 0 THEN +\n    DO\n     SET &S = 0\n     DO WHILE (&S < &PARAI)\n      SET &S = &S + 1\n      SET &IPAD = &STR(&IPAD )\n     END\n    END\n   IF &PARAI < 0 THEN +\n    DO\n     SET &S = &PARANL + &PARAI - 1\n     SET &LMARGIN = &SUBSTR(1:&S,&LMARGIN)\n    END\n   SET &LMARGIN = &STR(&LMARGIN&IPAD)\n   ISPEXEC TBPUT &ZUSER.L\n/*                                                                   */\n/* FUNCTION 1: REFORMAT PARAGRAPH                                    */\n/* SECTION  3: REBUILD PARAGRAPH                                     */\n/*                                                                   */\n/* READ LINE TABLE AND WORD TABLE, MERGING BOTH TO CREATE NEW LINE   */\n   SET &OLCNT  = 0\n   SET &OWCNT  = 0\n   SET &EOTLIN = 0\n   SET &EOTWRD = 0\n   ISPEXEC TBTOP &ZUSER.W\n   ISPEXEC TBTOP &ZUSER.L\n   ISPEXEC TBSKIP &ZUSER.L\n   IF &LASTCC > 0 THEN SET &EOTLIN = 1\n   DO WHILE (&EOTLIN = 0)\n    SET &WORKSTG = &STR(&LMARGIN)\n    SET &WORKLEN = &LENGTH(&STR(&WORKSTG))\n    SET &EOSLIN = 0\n    SET &WRDCNT = 0\n    IF &EOTWRD = 0 THEN +\n     DO\n      ISPEXEC TBSKIP &ZUSER.W\n      IF &LASTCC \u00ac= 0 THEN +\n       DO\n        SET &EOTWRD = 1\n        SET &EOSLIN = 1\n       END\n      DO WHILE (&EOSLIN = 0)\n       SET &WORKLEN = &WORKLEN + &WORDLEN\n       IF &WORKLEN < &PARANR THEN +\n        DO\n         SET &OWCNT  = &OWCNT  + 1\n         SET &WRDCNT = &WRDCNT + 1\n         SET &WORKLEN = &WORKLEN + 1\n         SET &WORKSTG = &STR(&WORKSTG&WORD )\n        END\n       ELSE IF &WORKLEN > &PARANR THEN +\n        DO\n         SET &WORKLEN = &WORKLEN - &WORDLEN\n         SET &EOSLIN = 1\n         ISPEXEC TBSKIP &ZUSER.W NUMBER(-1)\n        END\n       ELSE IF &WORKLEN = &PARANR THEN +\n        DO\n         SET &OWCNT  = &OWCNT  + 1\n         SET &WRDCNT = &WRDCNT + 1\n         SET &WORKSTG = &STR(&WORKSTG&WORD)\n         SET &EOSLIN = 1\n        END\n       IF &EOSLIN = 0 THEN +\n        DO\n         ISPEXEC TBSKIP &ZUSER.W\n         IF &LASTCC \u00ac= 0 THEN +\n          DO\n           SET &EOTWRD = 1\n           SET &EOSLIN = 1\n          END\n        END\n      END\n     END\n    IF &STR(&PARAJ) = &STR(J) THEN +\n     IF &EOTWRD = 0 THEN +\n      DO\n       DO WHILE (&SUBSTR(&WORKLEN,&WORKSTG) = &STR( ))\n        SET &WORKLEN = &WORKLEN - 1\n        SET &WORKSTG = &SUBSTR(1:&WORKLEN,&WORKSTG)\n       END\n       SET &WRDCNT = &WRDCNT - 1\n       IF &WRDCNT \u00ac> 0 THEN +\n        DO WHILE (&WORKLEN < &PARANR)\n         SET &WORKLEN = &WORKLEN + 1\n         SET &WORKSTG = &STR(&WORKSTG )\n        END\n       SET &SPCADD = &PARANR - &WORKLEN\n       DO WHILE (&SPCADD > &WRDCNT)\n        SET &S = &LENGTH(&STR(&LMARGIN)) + 1\n        SET &P1 = 0\n        DO WHILE (&P1 < &WRDCNT)\n         DO WHILE (&SUBSTR(&S,&WORKSTG) \u00ac= &STR( ))\n          SET &S = &S + 1\n         END\n         SET &P2 = &SUBSTR(1:&S-1,&WORKSTG)\n         SET &P3 = &SUBSTR(&S:&WORKLEN,&WORKSTG)\n         SET &WORKLEN = &WORKLEN + 1\n         SET &WORKSTG = &STR(&P2 &P3)\n         SET &SPCADD = &SPCADD - 1\n         DO WHILE (&SUBSTR(&S,&WORKSTG) = &STR( ))\n          SET &S = &S + 1\n         END\n         SET &P1 = &P1 + 1\n        END\n       END\n       IF &SPCADD > 0 THEN +\n        DO\n         SET &S = &LENGTH(&STR(&LMARGIN)) + 1\n         SET &P1 = (&WRDCNT - &SPCADD) / 2\n         DO WHILE (&P1 > 0)\n          DO WHILE (&SUBSTR(&S,&WORKSTG) \u00ac= &STR( ))\n           SET &S = &S + 1\n          END\n          DO WHILE (&SUBSTR(&S,&WORKSTG)  = &STR( ))\n           SET &S = &S + 1\n          END\n          SET &P1 = &P1 - 1\n         END\n         DO WHILE (&SPCADD > 0)\n          DO WHILE (&SUBSTR(&S,&WORKSTG) \u00ac= &STR( ))\n           SET &S = &S + 1\n          END\n          SET &P1 = &SUBSTR(1:&S-1,&WORKSTG)\n          SET &P2 = &SUBSTR(&S:&WORKLEN,&WORKSTG)\n          SET &WORKLEN = &WORKLEN + 1\n          SET &WORKSTG = &STR(&P1 &P2)\n          SET &SPCADD = &SPCADD - 1\n          DO WHILE (&SUBSTR(&S,&WORKSTG) = &STR( ))\n           SET &S = &S + 1\n          END\n         END\n        END\n      END\n     ELSE +\n      DO WHILE (&WORKLEN < &PARANR)\n       SET &WORKLEN = &WORKLEN + 1\n       SET &WORKSTG = &STR(&WORKSTG )\n      END\n    IF &STR(&PARAJ) = &STR(NJ) THEN +\n     DO WHILE (&WORKLEN < &PARANR)\n      SET &WORKLEN = &WORKLEN + 1\n      SET &WORKSTG = &STR(&WORKSTG )\n     END\n    SET &WORKSTG = &STR(&WORKSTG&RPAD&RMARGIN)\n    ISREDIT LINE &LNUM = (WORKSTG)\n    SET &OLCNT = &OLCNT + 1\n    ISPEXEC TBSKIP &ZUSER.L\n    IF &LASTCC > 0 THEN SET &EOTLIN = 1\n   END\n/* LINE TABLE AT END; WORD TABLE NOT AT END. READ WORD TABLE, CREATE */\n/* NEW LINES.                                                        */\n   IF &EOTWRD = 0 THEN +\n    DO\n     SET &LMARGIN = &STR()\n     SET &S = 0\n     SET &LSTOP = &PARANL - 1\n     DO WHILE (&S < &LSTOP)\n      SET &LMARGIN = &STR(&LMARGIN )\n      SET &S = &S + 1\n     END\n     SET &RMARGIN = &STR()\n     SET &S = 0\n     SET &RSTOP = &MAXCOL - &PARANR\n     DO WHILE (&S < &RSTOP)\n      SET &RMARGIN = &STR(&RMARGIN )\n      SET &S = &S + 1\n     END\n     ISPEXEC TBSKIP &ZUSER.W\n     IF &LASTCC \u00ac= 0 THEN +\n      DO\n       SET &EOTWRD = 1\n       SET &EOSLIN = 1\n      END\n     DO WHILE (&EOTWRD = 0)\n      SET &WORKSTG = &STR(&LMARGIN)\n      SET &WORKLEN = &LENGTH(&STR(&LMARGIN))\n      SET &EOSLIN = 0\n      SET &WRDCNT = 0\n      DO WHILE (&EOSLIN = 0)\n       SET &WORKLEN = &WORKLEN + &WORDLEN\n       IF &WORKLEN < &PARANR THEN +\n        DO\n         SET &OWCNT  = &OWCNT + 1\n         SET &WRDCNT = &WRDCNT + 1\n         SET &WORKLEN = &WORKLEN + 1\n         SET &WORKSTG = &STR(&WORKSTG&WORD )\n        END\n       ELSE IF &WORKLEN > &PARANR THEN +\n        DO\n         SET &WORKLEN = &WORKLEN - &WORDLEN\n         SET &EOSLIN = 1\n         ISPEXEC TBSKIP &ZUSER.W NUMBER(-1)\n        END\n       ELSE IF &WORKLEN = &PARANR THEN +\n        DO\n         SET &OWCNT  = &OWCNT + 1\n         SET &WRDCNT = &WRDCNT + 1\n         SET &WORKSTG = &STR(&WORKSTG&WORD)\n         SET &EOSLIN = 1\n        END\n       IF &EOSLIN = 0 THEN +\n        DO\n         ISPEXEC TBSKIP &ZUSER.W\n         IF &LASTCC \u00ac= 0 THEN +\n          DO\n           SET &EOTWRD = 1\n           SET &EOSLIN = 1\n          END\n        END\n      END\n      IF &STR(&PARAJ) = &STR(J) THEN +\n       IF &EOTWRD = 0 THEN +\n        DO\n         DO WHILE (&SUBSTR(&WORKLEN,&WORKSTG) = &STR( ))\n          SET &WORKLEN = &WORKLEN - 1\n          SET &WORKSTG = &SUBSTR(1:&WORKLEN,&WORKSTG)\n         END\n         SET &WRDCNT = &WRDCNT - 1\n         IF &WRDCNT = 0 THEN +\n          DO WHILE (&WORKLEN < &PARANR)\n           SET &WORKLEN = &WORKLEN + 1\n           SET &WORKSTG = &STR(&WORKSTG )\n          END\n         SET &SPCADD = &PARANR - &WORKLEN\n         DO WHILE (&SPCADD > &WRDCNT)\n          SET &S = &LENGTH(&STR(&LMARGIN)) + 1\n          SET &P1 = 0\n          DO WHILE (&P1 < &WRDCNT)\n           DO WHILE (&SUBSTR(&S,&WORKSTG) \u00ac= &STR( ))\n            SET &S = &S + 1\n           END\n           SET &P2 = &SUBSTR(1:&S-1,&WORKSTG)\n           SET &P3 = &SUBSTR(&S:&WORKLEN,&WORKSTG)\n           SET &WORKLEN = &WORKLEN + 1\n           SET &WORKSTG = &STR(&P2 &P3)\n           SET &SPCADD = &SPCADD - 1\n           DO WHILE (&SUBSTR(&S,&WORKSTG) = &STR( ))\n            SET &S = &S + 1\n           END\n           SET &P1 = &P1 + 1\n          END\n         END\n         IF &SPCADD > 0 THEN +\n          DO\n           SET &S = &LENGTH(&STR(&LMARGIN)) + 1\n           SET &P1 = (&WRDCNT - &SPCADD) / 2\n           DO WHILE (&P1 > 0)\n            DO WHILE (&SUBSTR(&S,&WORKSTG) \u00ac= &STR( ))\n             SET &S = &S + 1\n            END\n            DO WHILE (&SUBSTR(&S,&WORKSTG)  = &STR( ))\n             SET &S = &S + 1\n            END\n            SET &P1 = &P1 - 1\n           END\n           DO WHILE (&SPCADD > 0)\n            DO WHILE (&SUBSTR(&S,&WORKSTG) \u00ac= &STR( ))\n             SET &S = &S + 1\n            END\n            SET &P1 = &SUBSTR(1:&S-1,&WORKSTG)\n            SET &P2 = &SUBSTR(&S:&WORKLEN,&WORKSTG)\n            SET &WORKLEN = &WORKLEN + 1\n            SET &WORKSTG = &STR(&P1 &P2)\n            SET &SPCADD = &SPCADD - 1\n            DO WHILE (&SUBSTR(&S,&WORKSTG) = &STR( ))\n             SET &S = &S + 1\n            END\n           END\n          END\n        END\n       ELSE +\n        DO WHILE (&WORKLEN < &PARANR)\n         SET &WORKLEN = &WORKLEN + 1\n         SET &WORKSTG = &STR(&WORKSTG )\n        END\n      IF &STR(&PARAJ) = &STR(NJ) THEN +\n       DO WHILE (&WORKLEN < &PARANR)\n        SET &WORKLEN = &WORKLEN + 1\n        SET &WORKSTG = &STR(&WORKSTG )\n       END\n      SET &WORKSTG = &STR(&WORKSTG&RMARGIN)\n      ISREDIT LINE_AFTER &LLNUM = DATALINE (WORKSTG)\n      SET &OLCNT  = &OLCNT + 1\n      SET &LLNUM = &LLNUM + 1\n      IF &EOTWRD = 0 THEN +\n       DO\n        ISPEXEC TBSKIP &ZUSER.W\n        IF &LASTCC \u00ac= 0 THEN SET &EOTWRD = 1\n       END\n     END\n    END\n   ISPEXEC TBCLOSE &ZUSER.L\n   ISPEXEC TBCLOSE &ZUSER.W\n   IF &IWCNT \u00ac= &OWCNT THEN GOTO MSG3\n   IF &ILCNT >  &OLCNT THEN GOTO MSG3\n  END\n/*********************************************************************/\n/* PHASE 2, FUNCTION 2: CENTER PARAGRAPH                             */\n/*********************************************************************/\n IF &STR(&FUNC) = &STR(2) THEN +\n  DO\n   ISREDIT PROCESS RANGE Z\n   IF &LASTCC \u00ac= 0 THEN GOTO MSG2\n   ISREDIT (FLNUM) = LINENUM .ZFRANGE\n   ISREDIT (LLNUM) = LINENUM .ZLRANGE\n   SET &WLNUM = &FLNUM\n   DO WHILE (&WLNUM \u00ac> &LLNUM)\n    ISREDIT (WLINE) = LINE &WLNUM\n    SET &SOL = 0\n    DO WHILE (&SOL = 0)\n     SET &S = &PARAOL\n     DO WHILE (&S \u00ac> &PARAOR)\n      IF &SUBSTR(&S,&WLINE) \u00ac= &STR( ) THEN +\n       DO\n        SET &SOL = &S\n        SET &S = &PARAOR\n       END\n      SET &S = &S + 1\n     END\n     IF &SOL = 0 THEN SET &SOL = -1\n    END\n    IF &SOL > 0 THEN +\n     DO\n      SET &EOL = 0\n      DO WHILE (&EOL = 0)\n       SET &S = &PARAOR\n       DO WHILE (&S \u00ac< &PARAOL)\n        IF &SUBSTR(&S,&WLINE) \u00ac= &STR( ) THEN +\n         DO\n          SET &EOL = &S\n          SET &S = &PARAOL\n         END\n        SET &S = &S - 1\n       END\n      END\n      SET &LMARGIN = &STR()\n      SET &S = &SOL - 1\n      IF &S > 0 THEN SET &LMARGIN = &SUBSTR(1:&S,&WLINE)\n      SET &RMARGIN = &STR()\n      SET &S = &EOL + 1\n      IF &S \u00ac> &MAXCOL THEN SET &RMARGIN = &SUBSTR(&S:&MAXCOL,&WLINE)\n      SET &WORKSTG = &SUBSTR(&SOL:&EOL,&WLINE)\n      SET &WORKLEN = &LENGTH(&STR(&WORKSTG))\n      SET &P1 = &PARAOR - &PARAOL + 1\n      IF &P1 > &WORKLEN THEN +\n       DO\n        SET &P2 = ((&P1 - &WORKLEN) / 2) + &PARAOL - 1\n        SET &P3 = &LENGTH(&STR(&LMARGIN))\n        SET &P4 = &P2 - &P3\n        IF &P2 < &P3 THEN +\n         IF &P2 > 0 THEN SET &LMARGIN = &SUBSTR(1:&P2,&LMARGIN)\n         ELSE SET &LMARGIN = &STR()\n        DO WHILE (&P2 > &P3)\n         SET &LMARGIN = &STR(&LMARGIN )\n         SET &P3 = &P3 + 1\n        END\n        SET &P3 = &LENGTH(&STR(&RMARGIN))\n        IF &P4 > 0 THEN +\n         IF &P3 > 0 THEN SET &RMARGIN = &SUBSTR(&P4+1:&P3,&RMARGIN)\n         ELSE SET &RMARGIN = &STR()\n        DO WHILE (&P4 < 0)\n         SET &RMARGIN = &STR( &RMARGIN)\n         SET &P4 = &P4 + 1\n        END\n        SET &WORKSTG = &STR(&LMARGIN&WORKSTG&RMARGIN)\n        ISREDIT LINE &WLNUM = (WORKSTG)\n       END\n     END\n    SET &WLNUM = &WLNUM + 1\n   END\n  END\n/*********************************************************************/\n/* PHASE 2, FUNCTION 3: HELP                                         */\n/*********************************************************************/\n IF &STR(&FUNC) = &STR(3) THEN +\n  DO\n   ISREDIT (FLNUM) = DISPLAY_LINES\n   SET &P1 = &STR(ZZ BLOCK COMMANDS DEFINE START AND END OF PARAGRAPH)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (P1)\n   SET &P1 = &STR( SHAR  MEANS STORE PARA PARAMETERS)\n   SET &P1 = &STR(&P1 IN SHARED VARIABLE POOL)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (P1)\n   SET &P1 = &STR( PROF  MEANS STORE PARA PARAMETERS IN YOUR PROFILE)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (P1)\n   SET &P1 = &STR( LC    MEANS CHANGE PARAGRAPH TO LOWER CASE)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (P1)\n   SET &P1 = &STR( RH    MEANS REMOVE HYPHENS AND REJOIN WORDS)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (P1)\n   SET &P1 = &STR( HELP  MEANS DISPLAY HELP INFORMATION)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (P1)\n   SET &P1 = &STR( ?     MEANS QUERY CURRENT PARAMETER VALUES)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (P1)\n   SET &P1 = &STR( NC    MEANS NO CENTERING OF PARAGRAPH)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (P1)\n   SET &P1 = &STR( C     MEANS CENTERING OF PARAGRAPH)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (P1)\n   SET &P1 = &STR( NJ    MEANS NO RIGHT MARGIN JUSTIFICATION)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (P1)\n   SET &P1 = &STR( J     MEANS RIGHT MARGIN JUSTIFICATION)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (P1)\n   SET &P1 = &STR( ND    MEANS NO DOUBLE SPACE AT END OF SENTENCE)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (P1)\n   SET &P1 = &STR( D     MEANS DOUBLE SPACE AT END OF SENTENCE)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (P1)\n   SET &P1 = &STR( I=NN  DEFINES PARAGRAPH'S FIRST LINE INDENTATION)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (P1)\n   SET &P1 = &STR( NR=NN DEFINES PARAGRAPH'S NEW RIGHT MARGIN)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (P1)\n   SET &P1 = &STR( NL=NN DEFINES PARAGRAPH'S NEW LEFT MARGIN)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (P1)\n   SET &P1 = &STR( OR=NN DEFINES PARAGRAPH'S OLD RIGHT MARGIN)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (P1)\n   SET &P1 = &STR( OL=NN DEFINES PARAGRAPH'S OLD LEFT MARGIN)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (P1)\n   SET &P1 = &STR(PARA'S KEYWORD PARAMETERS ARE:)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (P1)\n   SET &P1 = &STR(PARA IS AN IMPROVED TFLOW; A PARAGRAPH REFORMATTER)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (P1)\n  END\n/*********************************************************************/\n/* PHASE 2, FUNCTION 4: DISPLAY CURRENT PARA PARAMETERS              */\n/*********************************************************************/\n IF &STR(&FUNC) = &STR(4) THEN +\n  DO\n   ISREDIT (FLNUM) = DISPLAY_LINES\n   SET &P1 = &PARAOL + &ADJUST\n   SET &P2 = &PARANL + &ADJUST\n   SET &P3 = &PARAOR + &ADJUST\n   SET &P4 = &PARANR + &ADJUST\n   SET &P5 = &STR(SHAR)\n   IF &STR(&PARAP) = &STR(P) THEN SET &P5 = &STR(PROF)\n   SET &P6 = &STR(PARA PARAMETERS AT &SYSSTIME: OL=&P1 NL=&P2 OR=&P3)\n   SET &P6 = &STR(&P6 NR=&P4 I=&PARAI &PARAJ &PARAD &P5)\n   ISREDIT LINE_AFTER &FLNUM = MSGLINE (P6)\n  END\n/*********************************************************************/\n/* PHASE 3: END OF EXECUTION MESSAGE                                 */\n/*********************************************************************/\n SET &ETIME = &SYSTIME\n SET &P1    = &SUBSTR(1:2,&ETIME)\n SET &P2    = &SUBSTR(4:5,&ETIME)\n SET &P3    = &SUBSTR(7:8,&ETIME)\n SET &P4    = &SUBSTR(1:2,&STIME)\n SET &P5    = &SUBSTR(4:5,&STIME)\n SET &P6    = &SUBSTR(7:8,&STIME)\n IF &P1 < &P4 THEN SET &P1 = &P1 + 24\n SET &WTIME = ((&P1 - &P4) * 3600) + ((&P2 - &P5) * 60) + &P3 - &P6\n SET &ECPU  = &SYSCPU\n SET &P1    = &LENGTH(&STR(&ECPU))\n SET &P2    = &LENGTH(&STR(&SCPU))\n SET &P3    = &SUBSTR(1:&P1-3,&ECPU)\n SET &P4    = &SUBSTR(1:&P2-3,&SCPU)\n SET &P5    = &SUBSTR(&P1-1,&P1,&ECPU)\n SET &P6    = &SUBSTR(&P2-1,&P2,&SCPU)\n IF &P5 < &P6 THEN +\n  DO\n   SET &P5 = &P5 + 100\n   SET &P3 = &P3 - 1\n  END\n SET &P1 = &P3 - &P4\n SET &P2 = &P5 - &P6\n IF &P2 < 10 THEN SET &P2 = &STR(0&P2)\n SET &WCPU = &STR(&P1..&STR(&P2))\n SET &WSRV = &SYSSRV - &SSRV\n SET ZEDSMSG = &STR(PARA: NORMAL END)\n SET &P1 = &STR(PARA ENDED NORMALLY; STATISTICS:\n SET ZEDLMSG = &STR(&P1 TIME=&WTIME CPU=&WCPU SERVICE=&WSRV)\n ISPEXEC SETMSG MSG(ISRZ000)\n ISREDIT C X'FA' X'50' &BEGINL &ENDL ALL\n ISREDIT C X'FB' X'7D' &BEGINL &ENDL ALL\n ISREDIT RESET CHG\n ISREDIT USER_STATE = (STATUS)\n EXIT CODE(0)\n/*********************************************************************/\n/* ERROR MESSAGE ROUTINES                                            */\n/*********************************************************************/\nMSG1: SET ZEDSMSG = &STR(ERROR: &PARM)\n SET ZEDLMSG = &STR(INVALID KEYWORD PARAMETER OR KEYWORD VALUE)\n ISPEXEC SETMSG MSG(ISRZ001)\n EXIT CODE(16)\nMSG2: SET &ZEDSMSG = &STR(ZZ LINE COMMANDS NEEDED)\n SET &ZEDLMSG = &STR(ZZ LINE COMMANDS MARK PARAGRAPH START AND END)\n ISPEXEC SETMSG MSG(ISRZ001)\n EXIT CODE(16)\nMSG3: SET &P1 = &STR(PARA LOGIC ERROR! INPUT WORDS:&IWCNT LINES=&ILCNT)\n SET &P1 = &STR(&P1, OUTPUT WORDS=&OWCNT LINES=&OLCNT)\n ISREDIT LINE_AFTER &FLNUM = MSGLINE (P1)\n EXIT CODE(16)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PARADOC": {"ttr": 4871, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x01D\\x01G\\x00\\x00\\xc8\\xc5\\xd3\\xd7@@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 324, "newlines": 327, "modlines": 0, "user": "HELP"}, "text": " =======================================================================\n\n Text processing on TSO has made strides with the introduction of:\n\n            PPPPPPPPPPP     AAAAA      RRRRRRRRRRR      AAAAA\n           PP        PP   AA   AA     RR        RR    AA   AA\n          PPPPPPPPPPP   AA     AA    RRRRRRRRRRR    AA     AA\n         PP           AAAAAAAAAAA   RR       RR   AAAAAAAAAAA\n        PP           AA        AA  RR        RR  AA        AA\n\n PARA reformats paragraphs easily.   Now  you  can  type a memo using TE\n (Text Enter), and rework it,  adding  lines, blanking or deleting words\n and phrases, then reformat  your  paragraphs  easily.   I can hear some\n questions in your mind:\n\n  1) What do you mean by reformat?\n\n     Para can change  left  and  right  margins, first line indentation,\n     move words from line  to  line  to  adjust line length, justify the\n     left margin, optionally  justify  the  right  margin, and double or\n     single space after end of sentences.\n      8\n     It means that     It means that you  can  create paragraphs side by\n     you       can     side.  These paragraphs are examples.\n     easily create\n     very,   very,        It means that you can indent paragraphs to the\n     very,   very,     right; this paragraph is an example.\n     tall, skinny,\n     slender,          It means that  you  can  indent paragraphs to the\n     willowy,             left.  This paragraph is an example.\n     lean,  narrow\n     paragraphs        You do not have to right justify paragraphs. Or\n     like     this     indent the first line. Or double space after the\n     one.              end of a sentence. This is an example.\n\n                              With   some\n                            ingenuity,  you\n                          can          create\n                        paragraphs    in   many\n                      different styles.   You can\n                    create  impact  by  the  visual\n                  appearance  of  your  writing,  and\n                make your  letters  and  memoranda more\n                effective.  True, visual appearance can\n                  never replace the lasting impact of\n                    content,  but  it  can increase\n                      the attention people pay to\n                        your   letters.   After\n                          all,   didn't   you\n                            read this  far?\n\n                         INTEROFFICE MEMORANDUM\n                         ======================\n\n               New Edit Command: PARA, an improved TFLOW\n =======================================================================\n\n              You can  even  center  paragraphs after you\n              have   reformatted    them.     Like   this\n                        paragraph, for example.\n\n B                You can reformat   paragraphs\n E     that look like this              paragraph with one command.\n F     This paragraph looks\n O        like some paragraphs I have created when I\n R       was just putting my thoughts down, then went back over the\n E    paragraph and cleaned it up.\n !          SEE!\n\n A      You can reformat paragraphs  that  look like this paragraph with\n F   one command.  This  paragraph  looks  like  some  paragraphs I have\n T   created when I was just  putting  my  thoughts down, then went back\n E   over the paragraph and cleaned it up.  SEE!\n R\n\n  2) What do you mean by easily?\n\n     You tell PARA  what  to  do  by  coding  PARA  on  the command line\n     followed by keyword=value or keyword combinations, then use zz line\n     commands to mark the start and end of the paragraph:\n\n        EDIT --- $AFSS.MEMOS.DATA(PARA) - 01.00 ------------------\n        COMMAND ===> PARA NL=6 NR=72 I=3 J D\n        zz 068              You can reformat   paragraphs\n        000069   that look like this              paragraph with o\n        000070   This paragraph looks\n        000071      like some paragraphs I have created when I\n        000072     was just putting my thoughts down, then went ba\n        000073  paragraph and cleaned it up.\n        zz 074        SEE!\n\n     PARA will remember these  combinations  during the ISPF session, so\n     you only have to code any changes the next time you execute PARA.\n\n        EDIT --- $AFSS.MEMOS.DATA(PARA) - 01.00 ------------------\n        COMMAND ===> PARA I=0\n        zz 081     You tell PARA what to do by coding PARA\n        000082        on the command line,\n        zz 083  followed by keyword=value or keyword combinations:\n\n  3) What if I forget these combinations?\n\n     You can ask  PARA  to  tell  you  its current combinations, without\n     doing any paragraph reformatting.  Example:\n\n        EDIT --- $AFSS.MEMOS.DATA(PARA) - 01.00 ------------------\n        COMMAND ===> PARA ?\n        000081     You tell PARA what to do by coding PARA\n        ==MSG> PARA PARAMETERS: OL=1 NL=6 OR=72 NR=72 I=0 J D\n\n                         INTEROFFICE MEMORANDUM\n                         ======================\n\n               New Edit Command: PARA, an improved TFLOW\n =======================================================================\n\n\n     You can then delete the PARA parameters message line.  Example:\n\n        EDIT --- $AFSS.MEMOS.DATA(PARA) - 01.00 ------------------\n        COMMAND ===>\n        000081     You tell PARA what to do by coding PARA\n        d MSG> PARA PARAMETERS: OL=1 NL=6 OR=72 NR=72 I=0 J D\n\n\n  4) What are all these PARA parameters?\n\n     A reference appendix is attached.\n\n\n\n\n\n                            PARA PARAMETERS                       page 1\n                           Reference Appendix\n                            ===============\n\n  Parameters that PARA remembers during an ISPF session:\n  ______________________________________________________\n\n  OL=nn    Old Left side of the paragraph\n  __       _   _\n  OR=nn    Old Right side of the paragraph\n  __       _   _\n\n           The Old parameters tell PARA  where  to find the paragraph to\n           be reformatted.  The first time  PARA executes during an ISPF\n           session, the Old parameters  normally  default to the display\n           columns on the left and right  sides of the screen.  You will\n           only change the Old parameters when:\n            (1) You are editing a  document  wider  than the screen size\n                (i.e., 133 wide for a 3278 model 2, 80 columns wide).\n            (2) Or, when there is  textual  material that you don't want\n                to include on the left or right side of the paragraph to\n                be reformatted.  Example:\n                  EDIT --- $AFSS.WORK.CNTL(SAMPLE) - 01.00 -------------\n                  COMMAND ===>\n                  =COLS> ----+----1----+----2----+----3----+----4----+--\n                  000003 //*  THIS IS A DEMAND DEPOSIT JOB.            *\n                  000004 //*    IT RUNS WEEKLY, EVERY MONDAY, ROLLING  *\n                  000005 //* FORWARD IF MONDAY IS A HOLIDAY.           *\n                In this example, you don't want the //*  and the * to be\n                included in your new paragraph, so you code:\n                  EDIT --- $AFSS.WORK.CNTL(SAMPLE) - 01.00 -------------\n                  COMMAND ===> PARA OL=4 OR=46 NL=4 NR=45\n                  =COLS> ----+----1----+----2----+----3----+----4----+--\n                  zz 003 //*  THIS IS A DEMAND DEPOSIT JOB.            *\n                  000004 //*    IT RUNS WEEKLY, EVERY MONDAY, ROLLING  *\n                  zz 005 //* FORWARD IF MONDAY IS A HOLIDAY.           *\n                to exclude them from  the reformatted  paragraph.  Don't\n                forget to change them  back  if you switch from JCL to a\n                memorandum.\n\n  NL=nn    New Left side of the paragraph\n  __       _   _\n  NR=nn    New Right side of the paragraph\n  __       _   _\n\n           The New parameters  tell  PARA  where  to put the reformatted\n           paragraph.  The New parameters  are the most frequently coded\n           parameters.\n\n  I=nn     Indent the first line of the paragraph nn spaces (default:0)\n  _        _\n\n           The Indent  parameter  can  be  either  zero  (no indenting),\n           positive (Indent nn spaces to the right), or negative (Indent\n           nn spaces to the left).\n\n  J        right margin Justification (default)\n  _                     _\n  NJ       No right margin Justification\n  __       _               _\n\n           If J is specified, PARA  will  insert the necessary number of\n           spaces into each line  of  the  paragraph  to right align the\n           right margin.  The last line will not be justified.\n\n                            PARA PARAMETERS                       page 2\n                           Reference Appendix\n                            ===============\n\n  D        Double space after end of sentence (default)\n  _        _\n  ND       No Double space after end of sentence\n  __       _  _\n\n           The following are recognized as end of sentence:\n             . . . end of sentence.\n             . . . end of sentence!\n             . . . end of sentence?\n             . . . end of sentence:\n             . . . end of sentence\"\n\n  Parameters that PARA will not remember (one time only):\n  _______________________________________________________\n\n  ?        What are PARA's current parameters?\n  _                                          _\n\n           If ?  is specified,  a  msgline  is  created with the current\n           values of the PARA parameters.  Example:\n             EDIT --- $AFSS.MEMOS.DATA(PARA) - 01.00 ------------------\n             COMMAND ===> PARA ?\n             000081     You tell PARA what to do by coding PARA\n             ==MSG> PARA PARAMETERS: OL=1 NL=6 OR=72 NR=72 I=0 J D\n\n  C        Center paragraph\n  _        _\n  NC       No Centering of paragraph (default)\n  __       _  _\n\n           Centering means  center  inside  the  OL/OR boundaries.  This\n           allows you to reformat  a  paragraph,  view the results, then\n           center the paragraph  inside  your  document without figuring\n           out any new parameters.   Centering  does not reformat, since\n           the results  after  both  reformatting  and  centering may be\n           unexpected.\n\n  HELP     display HELP information\n  ____             ____\n\n           If HELP  is  specified,  msglines  are  created which briefly\n           explain the PARA parameters.  Example:\n             EDIT --- $AFSS.MEMOS.DATA(PARA) - 01.00 ------------------\n             COMMAND ===> PARA HELP\n             000081     You tell PARA what to do by coding PARA\n             ==MSG> PARA is an improved TFLOW; A paragraph reformatter\n             ==MSG> PARA'S keyword parameters are:\n             ==MSG>  OL=nn defines paragraph's Old Left margin\n             ==MSG>  OR=nn defines paragraph's Old Right margin\n             ==MSG>  NL=nn defines paragraph's New Left margin\n             ==MSG>  NR=nn defines paragraph's New Right margin\n             ==MSG>  I=nn defines paragraph's first line Indentation\n             ==MSG>  D means Double space at end of sentence\n             ==MSG>  ND means No Double space at end of sentence\n             ==MSG>  J means right margin Justification\n             ==MSG>  NJ means No right margin Justification\n             ==MSG>  C means Centering of paragraph\n             ==MSG>  NC means No Centering of paragraph\n             ==MSG>  ? means Query current parameter values\n             ==MSG>  HELP means display HELP information\n             ==MSG> ZZ block commands define start and end of paragraph\n\n                            PARA PARAMETERS                       page 3\n                           Reference Appendix\n                            ===============\n\n\n  PROF     store PARA parameters in your PROFile dataset\n  ____                                   ____\n  SHAR     store PARA parameters in the SHARed variable pool (default)\n  ____                                  ____\n\n           If you  want  your  PARA  parameters  to  be  remembered from\n           session to session, specify  PROF  once  only.  From then on,\n           PARA will store your PARA  parameters in your PROFile dataset\n           instead of in the SHARED variable pool.  Specify SHAR  if you\n           change your mind.\n\n  RH       Remove Hyphens and reconnect words\n  __       _      _\n\n           Remove Hyphens means if you have  one word split across mult-\n           iple lines with a hyphen (like  mult- iple in this sentence),\n           the  hyphen (-)  will  be   removed  and  the  word  will  be\n           reconnected into one word (i.e. multiple) before reformatting\n           occurs.\n\n           Why have this routine?  Two reasons:\n            (1) Suppose you made an  error  previously when you executed\n                PARA, making NL and NR too close together. If PARA finds\n                a word that cannot  fit  between  NL and NR, PARA splits\n                the word into two or more pieces, hyphenating them. Many\n                words might have  been  split  into pieces. This routine\n                makes recovery easy: just  execute PARA with the correct\n                NL/NR pair and RH.\n            (2) Suppose you  are  modifying  old  text,  with many words\n                hyphenated. Your changes will shift  the position of the\n                hyphenated words  within   the   paragraph,  moving  the\n                hyphenated words to the middle of the line. This routine\n                saves a lot of manual unhyphenation time.\n\n  LC       change paragraph to Lower Case\n  __                           _     _\n\n           LC causes UPPER CASE text in  the  box defined by OL, OR, and\n           the ZZ line commands to be transformed to lower case letters.\n           Start of sentence words will still be capitalized.\n\n           Why have this routine?  Two reasons:\n            (1) Suppose under TE (text entry)  you  typed a lot of upper\n                and lower case text while  editing  a data set which had\n                CAPS=ON.  The text would  be converted entirely to UPPER\n                CASE.  It is faster to  change  the entire text to lower\n                case and recapitalize where  required than to retype the\n                entire text.\n            (2) Suppose you are modifying old  text,  all of which is in\n                capitals.  You want your revised  text in both upper and\n                lower case.  It is faster  to  change the entire text to\n                lower  case  and  recapitalize  where  required  than to\n                retype the entire text.\n\n                        - end of PARA Appendix -                        *\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PASTE": {"ttr": 5121, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x8b\\x00\\x8b\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 139, "newlines": 139, "modlines": 0, "user": "EDITMAC"}, "text": " ISREDIT MACRO (PARM) NOPROCESS\n ISPEXEC CONTROL ERRORS RETURN\n IF &PARM \u00ac= &Z THEN +\n   DO\n     IF &PARM = ? THEN +\n       DO\n         ISPEXEC DISPLAY PANEL(PASTE)\n         EXIT\n       END\n     ELSE +\n        IF &DATATYPE(&PARM) = NUM THEN +\n          DO\n           SET LEVEL = &PARM\n           END\n        ELSE +\n          DO\n           SET ZEDSMSG = &STR(INVALID ARGUMENT)\n             SET ZEDLMSG = &STR(VALID ARGUMENTS ARE A \"?\" OR A LEVEL +\n                               NUMBER)\n           ISPEXEC SETMSG MSG(ISRZ001)\n          EXIT\n        END\n  END\nELSE +\n SET LEVEL = 1\nISREDIT PROCESS DEST RANGE 0\nSET RC = &LASTCC\nIF &RC > 8 THEN +\n DO\n   ISREDIT (EMP1) = LINENUM .ZFIRST\n   ISREDIT (EMP2) = LINENUM .ZLAST\n   IF &EMP1 = &EMP2 THEN +\n     DO\n       SET RC = 4\n         SET EMPTY = YES\n    END\n ELSE +\n    DO\n           SET ZEDSMSG = &STR(RANGE NO SPECIFIED)\n         SET ZEDLMSG = &STR(A RANGE OR INSERTION LINE COMMAND WAS NOT +\n                            PROVIDED - SPECIFY AND RE-EXECUTE)\n           ISPEXEC SETMSG MSG(ISRZ001)\n           EXIT CODE(12)\n          END\n   END\nISPEXEC VGET (RCUTLM&LEVEL,RCUTLB&LEVEL,RCUTRB&LEVEL) PROFILE\nIF &LASTCC > 0 THEN +\n  DO\n           SET ZEDSMSG = &STR(LEVEL DOES NOT EXIST)\n             SET ZEDLMSG = &STR(NO CUT LINES FOR LEVEL &LEVEL EXIST)\n           ISPEXEC SETMSG MSG(ISRZ001)\n           EXIT CODE(12)\n        END\nSET LINES = &&RCUTLM&LEVEL\nSET LINESTOPASTE = &LINES\nSET LBND = &&RCUTLB&LEVEL\nSET LBND = &LBND\nSET RBND = &&RCUTRB&LEVEL\nSET RBND = &RBND\nISREDIT (LHBND,RHBND) = BOUNDS\nIF &RC > 8 THEN +\n  DO\n     SET ZEDSMSG = &STR(NO PLACE TO PASTE)\n     SET ZEDLMSG = &STR(YOU MUST +\n                        USE \"A\" OR \"B\", LINE COMMANDS)\n     ISPEXEC SETMSG MSG(ISRZ001)\n     EXIT CODE(12)\n   END\n CONTROL ASIS\n IF &RC = 4 THEN +\n DO\n   ISREDIT (ILINE) = LINENUM .ZDEST\n   IF &EMPTY = YES THEN +\n    SET ILINE = 0\n  SET INDEX = 0\n DO WHILE &INDEX < &LINESTOPASTE\n ISPEXEC VGET RCUT&LEVEL&EVAL(&INDEX+1) PROFILE\n ISREDIT LINE_AFTER &ILINE = < (LBND) (RCUT&LEVEL&EVAL(&INDEX+1)) >\n   SET INDEX  = &INDEX + 1\n   SET ILINE  = &ILINE + 1\n END\nEND\nELSE +\n  DO\n    ISREDIT (CROW,CPOS) = CURSOR\n    IF &CPOS > 0 THEN +\n     DO\n      SET LPOS =&CPOS\n      SET RPOS = &RBND-&LBND+1\n     END\n   ELSE +\n      DO\n        SET LPOS = &LBND\n        SET RPOS = &RBND\n      END\n    SET BERR = NO\n   IF &LHBND > &LPOS THEN +\n     DO\n     SET ZEDSMSG = &STR(ILLEGAL BOUNDS)\n     SET ZEDLMSG = &STR(YOUR CURRENT LEFT BOUND IS GREATER THAN +\n                        THE RELATIVE LBND )F &LPOS TO BE PASTED)\n        SET BERR = YES\n      END\n    IF &BERR = YES THEN +\n     DO\n     ISPEXEC SETMSG MSG(ISRZ001)\n     EXIT CODE(12)\n END\n  ISREDIT (FIRST) = LINENUM .ZFRANGE\n  ISREDIT (LAST) = LINENUM .ZLRANGE\n  SET RANGE = &EVAL(&LAST-&FIRST+1)\n  IF &RANGE < &LINESTOPASTE THEN +\n         SET LINESTOPASTE = &RANGE\n         SET PLACE = 0\n         SET RINDEX = 0\n     DO WHILE &RINDEX < &RANGE\n       SET &INDEX = 0\n        DO WHILE &INDEX < &LINESTOPASTE\n          ISPEXEC VGET RCUT&LEVEL&EVAL(&INDEX+1) PROFILE\n          SET CUT = &&RCUT&LEVEL&EVAL(&INDEX+1)\n          SET CUT = &SYSNSUB(2,&CUT)\n          ISREDIT (LINE) = LINE &EVAL(&FIRST+&PLACE)\n          IF &LHBND < &LPOS THEN +\n             SET NULINE = &SUBSTR(1:&LPOS-1,&NRSTR(&LINE))\n          ELSE +\n           SET NULINE = &Z\n          SET NULINE = &NRSTR(&NULINE)&NRSTR(&CUT)\n          IF &RHBND > &RPOS THEN +\n            SET NULINE = &NRSTR(&NULINE)+\n             &SUBSTR(&LENGTH(&NRSTR(&NULINE))+1:&RHBND,&NRSTR(&LINE))\n          ISREDIT LINE &EVAL(&FIRST+&PLACE) = (NULINE)\n          SET INDEX = &INDEX +1\n          SET PLACE = &PLACE +1\n       END\n        SET RINDEX = &RINDEX + &LINESTOPASTE\n        IF &RINDEX + &LINESTOPASTE > &RANGE THEN +\n          SET LINESTOPASTE = &RANGE - &RINDEX\n      END\n   END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PBOX": {"ttr": 5124, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "EDITMAC"}, "text": "  ISREDIT MACRO (HELP)\n      IF &HELP = ? THEN DO\n      ISPEXEC DISPLAY PANEL(PBOX)\n      EXIT\n      END\n  ISREDIT (ROW,COL) = CURSOR\n\n  ISPEXEC CONTROL ERRORS RETURN\n\n  ISREDIT LINE &ROW          = LINE + < &COL '-----------'>\n  ISREDIT LINE &EVAL(&ROW+1) = LINE + < &COL '|         |'>\n  ISREDIT LINE &EVAL(&ROW+2) = LINE + < &COL '|         |'>\n  ISREDIT LINE &EVAL(&ROW+3) = LINE + < &COL '|         |'>\n  ISREDIT LINE &EVAL(&ROW+4) = LINE + < &COL '-----------'>\n  ISREDIT LINE &EVAL(&ROW+5) = LINE + < &COL '     |     '>\n  IF &MAXCC > 0 THEN -\n    DO\n      SET ZEDSMSG = INCOMPLETE BOX\n      SET ZEDLMSG = NOT ENOUGH LINES/COLUMNS TO DRAW COMPLETE BOX\n      ISPEXEC SETMSG MSG(ISRZ001)\n    END\n  SET &COL = &COL + 2\n  SET &ROW = &ROW + 1\n\n  ISREDIT CURSOR = (ROW,COL)\n  EXIT\n\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PFCAN": {"ttr": 5126, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00:\\x007\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 58, "newlines": 55, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP)\n      IF &HELP = ? THEN DO\n      ISPEXEC DISPLAY PANEL(PFCAN)\n      EXIT\n      END\n/**********************************************************************/\n/* THIS ISPF/PDF EDIT MACRO RESETS THE PF KEYS TO THEIR ORIGINAL      */\n/* FUNCTION AND THEN CANCELS THE EDIT SESSION.                        */\n/* THIS MACRO WORKS IN CONJUNCTION WITH THE PBOX MACRO.  .            */\n/*                                                                    */\n/* TO RUN:                                                            */\n/*    THE DIAGRAM MACRO REDEFINES THE CANCEL PRIMARY COMMAND TO RUN   */\n/*    THIS MACRO INSTEAD OF CANCELING THE EDIT SESSION DIRECTLY.      */\n/**********************************************************************/\n SET &P = PROFILE\n/* VGET THE SAVED PF KEY VALUES */\nISPEXEC VGET (SAVEPF01 SAVEPF02 SAVEPF03 SAVEPF04 SAVEPF05 SAVEPF06) &P\nISPEXEC VGET (SAVEPF07 SAVEPF08 SAVEPF09 SAVEPF10 SAVEPF11 SAVEPF12) &P\nISPEXEC VGET (SAVEPF13 SAVEPF14 SAVEPF15 SAVEPF16 SAVEPF17 SAVEPF18) &P\nISPEXEC VGET (SAVEPF19 SAVEPF20 SAVEPF21 SAVEPF22 SAVEPF23 SAVEPF24) &P\n\n/* RESTORE THE PF KEYS TO THEIR ORIGINAL VALUES */\nSET &ZPF01 = &SAVEPF01\nSET &ZPF02 = &SAVEPF02\nSET &ZPF03 = &SAVEPF03\nSET &ZPF04 = &SAVEPF04\nSET &ZPF05 = &SAVEPF05\nSET &ZPF06 = &SAVEPF06\nSET &ZPF07 = &SAVEPF07\nSET &ZPF08 = &SAVEPF08\nSET &ZPF09 = &SAVEPF09\nSET &ZPF10 = &SAVEPF10\nSET &ZPF11 = &SAVEPF11\nSET &ZPF12 = &SAVEPF12\nSET &ZPF13 = &SAVEPF13\nSET &ZPF14 = &SAVEPF14\nSET &ZPF15 = &SAVEPF15\nSET &ZPF16 = &SAVEPF16\nSET &ZPF17 = &SAVEPF17\nSET &ZPF18 = &SAVEPF18\nSET &ZPF19 = &SAVEPF19\nSET &ZPF20 = &SAVEPF20\nSET &ZPF21 = &SAVEPF21\nSET &ZPF22 = &SAVEPF22\nSET &ZPF23 = &SAVEPF23\nSET &ZPF24 = &SAVEPF24\n\n/* VPUT THE VARIABLES BACK TO THE PROFILE */\nISPEXEC VPUT (ZPF01 ZPF02 ZPF03 ZPF04 ZPF05 ZPF06) &P\nISPEXEC VPUT (ZPF07 ZPF08 ZPF09 ZPF10 ZPF11 ZPF12) &P\nISPEXEC VPUT (ZPF13 ZPF14 ZPF15 ZPF16 ZPF17 ZPF18) &P\nISPEXEC VPUT (ZPF19 ZPF20 ZPF21 ZPF22 ZPF23 ZPF24) &P\n/* RESET THE FUNCTION OF THE END AND CANCEL COMMANDS */\nISREDIT DEFINE END RESET\nISREDIT DEFINE CANCEL RESET\n\n/* END THE EDIT SESSION */\nISREDIT CANCEL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PFSET": {"ttr": 5128, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00:\\x00:\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 58, "newlines": 58, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (OTHER)\n/**********************************************************************/\n/* THIS ISPF/PDF EDIT MACRO SETS THE PF KEYS TO NEW VALUES AS NEEDED  */\n/* BY THE USER.  AS IT IS SETUP NOW SET &ZPF10 = PBOX IS HARD CODED   */\n/* INTO THE MACRO.  A NEW FEATURE HAS BEEN ADDED TO ALLOW FOR A USER  */\n/* DEFINED MACRO TO BE PASSED AS A PARAMETER.  A SAMPLE MACRO CALLED  */\n/* OTHER IS IN THE PDS WHERE THIS MACRO WAS FOUND.                    */\n/* TYPE IN \"PFSET OTHER\" AND THEN USING THE KEYS COMMAND, VERIFY THAT */\n/* PFK01 IS SET TO \"HI\" AND PFK02 IS \"BYE\".  THEN ISSUE THE PFCAN     */\n/* MACRO AND VERIFY THAT ALL YOUR PFKEYS ARE BACK TO NORMAL.          */\n/**********************************************************************/\n  IF &STR(&OTHER) = ? THEN +\n    DO\n      ISPEXEC DISPLAY PANEL(PFSET)\n      EXIT CODE(1)\n    END\n SET &P = PROFILE\n/* SAVE ORIGINAL PFKEY AND SET NEW VALUE */\nISPEXEC VGET (ZPF01 ZPF02 ZPF03 ZPF04 ZPF05 ZPF06) &P\nISPEXEC VGET (ZPF07 ZPF08 ZPF09 ZPF10 ZPF11 ZPF12) &P\nISPEXEC VGET (ZPF13 ZPF14 ZPF15 ZPF16 ZPF17 ZPF18) &P\nISPEXEC VGET (ZPF19 ZPF20 ZPF21 ZPF22 ZPF23 ZPF24) &P\nSET  &SAVEPF01 = &ZPF01\nSET  &SAVEPF02 = &ZPF02\nSET  &SAVEPF03 = &ZPF03\nSET  &SAVEPF04 = &ZPF04\nSET  &SAVEPF05 = &ZPF05\nSET  &SAVEPF06 = &ZPF06\nSET  &SAVEPF07 = &ZPF07\nSET  &SAVEPF08 = &ZPF08\nSET  &SAVEPF09 = &ZPF09\nSET  &SAVEPF10 = &ZPF10\nSET  &SAVEPF11 = &ZPF11\nSET  &SAVEPF12 = &ZPF12\nSET  &SAVEPF13 = &ZPF13\nSET  &SAVEPF14 = &ZPF14\nSET  &SAVEPF15 = &ZPF15\nSET  &SAVEPF16 = &ZPF16\nSET  &SAVEPF17 = &ZPF17\nSET  &SAVEPF18 = &ZPF18\nSET  &SAVEPF19 = &ZPF19\nSET  &SAVEPF20 = &ZPF20\nSET  &SAVEPF21 = &ZPF21\nSET  &SAVEPF22 = &ZPF22\nSET  &SAVEPF23 = &ZPF23\nSET  &SAVEPF24 = &ZPF24\nSET &ZPF10 = PBOX\n/* OTHER SHOULD BE A MACRO TO SET UP PFKEYS TO YOUR CUSTOMIZED CHOICE\nIF &OTHER NE THEN DO\nISREDIT &OTHER\nEND\n\n/* VPUT THE VARIABLES BACK TO THE PROFILE */\nISPEXEC VPUT (ZPF10) PROFILE\nISPEXEC VPUT (SAVEPF01 SAVEPF02 SAVEPF03 SAVEPF04 SAVEPF05 SAVEPF06) &P\nISPEXEC VPUT (SAVEPF07 SAVEPF08 SAVEPF09 SAVEPF10 SAVEPF11 SAVEPF12) &P\nISPEXEC VPUT (SAVEPF13 SAVEPF14 SAVEPF15 SAVEPF16 SAVEPF17 SAVEPF18) &P\nISPEXEC VPUT (SAVEPF19 SAVEPF20 SAVEPF21 SAVEPF22 SAVEPF23 SAVEPF24) &P\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PRTIT": {"ttr": 5130, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00(\\x00(\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (KW1 KW2 KW3 KW4)\nCONTROL NOMSG\nISREDIT (DSN) = DATASET\nLISTDSI '&DSN'\n  IF &STR(&KW1) = &STR(?) THEN +\n    DO\n       ISPEXEC DISPLAY PANEL(PRTIT)\n     EXIT CODE(0)\n    END\n\n  CONTROL ASIS\nFREE F(MSGS1)\n\n   SET &Q = &SUBSTR(1:2,&SYSTIME)\n   SET &Q1 = &SUBSTR(4:5,&SYSTIME)\n   SET &Q2 = &SUBSTR(7:8,&SYSTIME)\n   SET &MSGS = &STR(LS&Q&Q1&Q2)\n   SET &NAME = &STR(&SYSPREF..&MSGS)\n  FREE ATTRLIST(ISPMSGS)\n    ATTRIB ISPMSGS DSORG(PS) RECFM( F B ) +\n      LRECL( &SYSLRECL ) BLKSIZE( &SYSBLKSIZE )\n       ALLOC DA('&NAME') SP (15,10) TRACKS USING (ISPMSGS) +\n        F(MSGS1) NEW\n SET &INTVAR = &STR( )\n OPENFILE MSGS1 OUTPUT\n ISREDIT (FIRST) = LINENUM .ZFIRST\n ISREDIT (LAST) = LINENUM .ZLAST\n DO WHILE &FIRST <  &EVAL(&LAST + 1)\n ISREDIT (MSGS1) = LINE &FIRST\n PUTFILE MSGS1\n SET &FIRST = &FIRST + 1\n END\n CLOSFILE MSGS1\n\n     VPSPRINT '&NAME' &KW1 &KW2 &KW3 &KW4\n  SET &ZEDSMG = DATA AND VSPRINTED.\n  SET &ZEDLMG = DATASET '&NAME' VPSPRINTED, &WK1\n  ISPEXEC SETMSG MSG(ISRZ000)\n  DELETE '&NAME'\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "QCREATE": {"ttr": 5132, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x14\\x00\\x06\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 20, "newlines": 6, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (MEMBER)\n      IF &MEMBER = ? THEN DO\n      ISPEXEC DISPLAY PANEL(QCREATE)\n      EXIT\n      END\nISREDIT CREATE &MEMBER .ZFIRST .ZLAST\nSET &CREATECC = &LASTCC\nIF &CREATECC = 8 THEN DO\n           SET ZEDSMSG = &STR(&MEMBER ALREADY EXISTS)\n             SET ZEDLMSG = &STR(MEMBER &MEMBER ALREADY EXISTS IN THIS +\n                               PDS CHOOSE ANOTHER MEMBER NAME)\n           ISPEXEC SETMSG MSG(ISRZ001)\n  EXIT\n END\nIF &CREATECC = 0 THEN DO\n           SET ZEDSMSG = &STR(&MEMBER CREATED)\n             SET ZEDLMSG = &STR(MEMBER &MEMBER CREATED)\n           ISPEXEC SETMSG MSG(ISRZ001)\n  EXIT\n END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "QREP": {"ttr": 5134, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x14\\x00\\x14\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (MEMBER)\n      IF &MEMBER = ? THEN DO\n      ISPEXEC DISPLAY PANEL(QREP)\n      EXIT\n      END\nISREDIT CREATE &MEMBER .ZFIRST .ZLAST\nSET &CREATECC = &LASTCC\nIF &CREATECC = 8 THEN DO\n ISREDIT REPLACE &MEMBER .ZFIRST .ZLAST\n           SET ZEDSMSG = &STR(&MEMBER REPLACED)\n             SET ZEDLMSG = &STR(MEMBER &MEMBER REPLACED IN THIS PDS)\n           ISPEXEC SETMSG MSG(ISRZ001)\n  EXIT\n END\nIF &CREATECC = 0 THEN DO\n           SET ZEDSMSG = &STR(&MEMBER CREATED)\n             SET ZEDLMSG = &STR(MEMBER &MEMBER CREATED)\n           ISPEXEC SETMSG MSG(ISRZ001)\n  EXIT\n END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCOLDEL": {"ttr": 5136, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP)\n IF &HELP = ? THEN DO\n ISPEXEC DISPLAY PANEL(RCOLDEL)\n EXIT\n END\nISREDIT EXCLUDE ALL\nISREDIT FIND &STR(----0) 1 ALL\nISREDIT DELETE NX ALL\nISREDIT FIND &STR(----5) 1 ALL\nISREDIT DELETE NX ALL\nISREDIT RESET\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCOLS": {"ttr": 5138, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00:\\x00:\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 58, "newlines": 58, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP) NOPROCESS\n IF &HELP = ? THEN DO\n ISPEXEC DISPLAY PANEL(RCOLS)\n EXIT\n END\nISREDIT (THIS) = MEMBER\n  ISREDIT PROCESS DEST\n  IF &LASTCC = 0 THEN DO\n  ISREDIT LOCATE .ZDEST\n  IF &LASTCC = 8 THEN +\n     DO\n           SET ZEDSMSG = &STR(EMPTY DATA SET )\n            SET ZEDLMSG = &STR(JC WORKS ONLY WHEN DATA SET HAS VALID +\n                                 DATA AND LINE NUMBERS)\n           ISPEXEC SETMSG MSG(ISRZ001)\n         EXIT CODE(12)\n   END\n   ISREDIT (DS1) = DATASET\n   LISTDSI '&DS1'\n   SET &LN = &SYSLRECL\nSET &RULEA = &STR(----0----1----1----2----2----3----3----4)\nSET &RULEB = &STR(----4----5----5----6----6----7----7----8)\nSET &RULEC = &STR(----8----9----9---10---10---11---11---12)\nSET &RULED = &STR(---12---13---13---14---14---15---15---16)\nSET &RULEE = &STR(---16---17---17---18---18---19---19---20)\nSET &RULEF = &STR(---20---21---21---22---22---23---23---24)\nSET &RULEG = &STR(---24---25---25---26---26---27---27---28)\nSET &RULE5 = &STR(----5----0----5----0----5----0----5----0)\nSET &RULEW = &STR(&RULEA&RULEB&RULEC&RULED&RULEE&RULEF&RULEG)\nSET &RULEV = &STR(&RULE5&RULE5&RULE5&RULE5&RULE5&RULE5&RULE5)\nSET &RULEX = &SUBSTR(1:&LN,&STR(&RULEW))\nSET &RULEY = &SUBSTR(1:&LN,&STR(&RULEV))\n       ISREDIT MASKLINE = '&RULEY'\n       ISREDIT LINE_AFTER .ZDEST = MASKLINE\n       ISREDIT MASKLINE = '&RULEX'\n       ISREDIT LINE_AFTER .ZDEST = MASKLINE\n\nERROROUT:+\n       ISREDIT MASKLINE = ' '\n\n\n      SET RC = 0\n  END\n  ELSE DO\n     IF &MAXCC = 8 THEN DO\n         SET ZEDSMSG = &STR(INDICATE POSITION)\n         SET ZEDLMSG = &STR(MARK 'A' ON LINE AFTER WHICH /*USERPARM +\n                            DATA SHOULD BE INSERTED)\n     END\n     ELSE DO\n         SET ZEDSMSG = &STR(ERROR ENCOUNTERED)\n         SET ZEDLMSG = &STR(UNABLE TO PROCESS REQUEST, +\n                             RECHECK INPUT)\n     END\n     ISPEXEC SETMSG MSG(ISRZ000)\n     SET RC = 12\n  END\n  EXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REPOTHER": {"ttr": 5140, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00/\\x00\\x07\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 47, "newlines": 7, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (DSNOUT)\n      IF &DSNOUT = ? THEN DO\n      ISPEXEC DISPLAY PANEL(REPOTHER)\n      EXIT\n      END\nISREDIT (CRDSN) = DATASET\nISREDIT (CRMEM) = MEMBER\nSET &CROUT = &STR('&CRDSN&STR((ZZZZ@&STR())')\nISPEXEC VPUT (CROUT) PROFILE\n ISREDIT REPLACE ZZZZ@ .ZFIRST .ZLAST\n  COPY &CROUT &DSNOUT\n ISREDIT (WORKDSN) = DATASET\nSET  PDSDSN = &WORKDSN\nISPEXEC  LMINIT DATAID(PDSID) DATASET('&PDSDSN') +\n                ENQ(SHRW)                        +\n                ORG(PDSORG)\nSET LMRC = &LASTCC\nIF &LMRC \u00ac= 0 THEN +\n   DO\n      WRITE LMINIT FAILED - RETURN CODE &LMRC\n      WRITE DATA SET IS NOT ALLOCATED OR NOT PARTITIONED\n      EXIT CODE(8)\n   END\n\nISPEXEC LMOPEN DATAID(&PDSID) OPTION(OUTPUT)\nSET RET1 = &LASTCC\nIF &RET1 \u00ac= 0 THEN GOTO EXIT1\nISPEXEC LMMDEL DATAID(&PDSID) MEMBER(ZZZZ@)\nSET LMRC = &LASTCC\nIF &LMRC \u00ac= 0 THEN GOTO EXIT1\nISPEXEC LMCLOSE DATAID(&PDSID)\nISPEXEC LMFREE DATAID(&PDSID)\nEXIT\nEXIT1: +\nIF &LMRC = 8 THEN +\n   DO\n      WRITE ERROR CHECK FOR PDS MEMBER ZZZZ@\n         ISPEXEC LMCLOSE DATAID(&PDSID)\n         ISPEXEC LMFREE DATAID(&PDSID)\n      EXIT CODE(0)\n   END\nISPEXEC LMCLOSE DATAID(&PDSID)\nISPEXEC LMFREE DATAID(&PDSID)\nEXIT\nISPEXEC LMCLOSE DATAID(&PDSID)\nISPEXEC LMFREE DATAID(&PDSID)\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RJUST": {"ttr": 5142, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x007\\x008\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 55, "newlines": 56, "modlines": 0, "user": "EDITMAC"}, "text": "   ISREDIT MACRO (TYPE) NOPROCESS\n      IF &TYPE = ? THEN DO\n      ISPEXEC DISPLAY PANEL(RJUST)\n      EXIT\n      END\n\n/* RJUST MACRO - COMMAND ===> RJUST - LINE COMMANDS C<N> AND CC\n   ISPEXEC CONTROL ERRORS RETURN\n   CONTROL ASIS\n   ISREDIT PROCESS RANGE C\n   SET LCC = &LASTCC\n   ISREDIT (RC) = RANGE_CMD\n   IF &LASTCC = 4 | &STR(&RC) \u00ac= &STR(C) THEN DO\n      SET &ZEDSMSG = NO RANGE SPECIFIED\n      SET &ZEDLMSG = YOU MUST SPECIFY A RANGE OF LINES TO BE CENTERED +\n         USING A \"C<N>\" OR \"CC\"\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(4)\n   END\n   ISREDIT (FR) = LINENUM .ZFRANGE\n   ISREDIT (LR) = LINENUM .ZLRANGE\n   ISREDIT (LB,RB) = BOUNDS\n   SET BL = &RB - &LB + 1\n   SET I = &FR\n   DO WHILE( &I <= &LR )\n      ISREDIT (LN) = LINE &I\n      SET L = &LENGTH(&SUBSTR(&LB:&RB,&NRSTR(&LN)))\n      SET S = &LB\n      DO WHILE(&S < &L)\n         IF &SUBSTR(&S:&S,&NRSTR(&LN)) \u00ac= &STR( ) THEN GOTO FOUNDS\n         SET S = &S + 1\n      END\nFOUNDS: +\n      SET E = &L\n      DO WHILE(&E > &S)\n         IF &SUBSTR(&E:&E,&NRSTR(&LN)) \u00ac= &STR( ) THEN GOTO FOUNDE\n         SET E = &E - 1\n      END\nFOUNDE: +\n      SET LINE = &SUBSTR(&S:&E,&NRSTR(&LN))\n      SET L = &LENGTH(&NRSTR(&LINE))\n      SET D = &BL - &L\n      IF &D > 1 THEN DO\n         SET H = &D\n         SET LINE2 = &SUBSTR(1:&H,&STR(                                -\n                                                                       )\n         IF &LB = 1 THEN +\n            SET LINE = &NRSTR(&LINE2.&LINE)\n         ELSE +\n            SET LINE = &SUBSTR(1:&LB-1,&NRSTR(&LN))&NRSTR(&LINE2.&LINE)\n      END\n      ISREDIT LINE &I = (LINE)\n      SET I = &I + 1\n   END\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RNAME": {"ttr": 5378, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00A\\x00A\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 65, "newlines": 65, "modlines": 0, "user": "EDITMAC"}, "text": " ISREDIT MACRO (OLDMEM,NEWMEM,NO)\n SET &RNAM =\n IF &OLDMEM = ? THEN DO\n ISPEXEC DISPLAY PANEL(RNAME)\n EXIT CODE(1)\n END\n IF &NEWMEM =  THEN DO\n           SET ZEDSMSG = &STR(NO NEWNAME SPECIFIED)\n             SET ZEDLMSG = &STR(PROPER SYNTAX FOR RNAME: RNAME OLDNAM+\n                               E NEWNAME)\n           ISPEXEC SETMSG MSG(ISRZ001)\n           EXIT CODE(12)\n END\n ISREDIT (WORKDSN) = DATASET\nSET  PDSDSN = &WORKDSN\n\n/* INITIALIZE DATASET */\nISPEXEC  LMINIT DATAID(PDSID) DATASET('&PDSDSN') +\n                ENQ(SHRW)                        +\n                ORG(PDSORG)\nSET LMRC = &LASTCC\nIF &LMRC \u00ac= 0 THEN +\n   DO\n      WRITE LMINIT FAILED - RETURN CODE &LMRC\n      WRITE DATA SET IS NOT ALLOCATED OR NOT PARTITIONED\n      EXIT CODE(8)\n   END\n IF &NO = NO THEN GOTO BYPASS\nWRITE  '&WORKDSN(&OLDMEM)' SELECTED FOR RENAME\n/* OPEN DATA SET */\nBYPASS: +\nISPEXEC LMOPEN DATAID(&PDSID) OPTION(OUTPUT)\nSET RET1 = &LASTCC\nIF &RET1 \u00ac= 0 THEN GOTO EXIT1\n IF &NO = NO THEN GOTO BYPASS2\nWRITE CONFIRM RENAME OF &OLDMEM TO &NEWMEM (Y/N)\nWRITENR ==>\nREAD &RNAM\nIF &SUBSTR(1:1,&STR(&RNAM)) \u00ac= Y THEN GOTO EXIT1\nBYPASS2: +\nISPEXEC LMMREN DATAID(&PDSID) MEMBER(&OLDMEM) NEWNAME(&NEWMEM)\nSET LMRC = &LASTCC\nIF &LMRC \u00ac= 0 THEN GOTO EXIT1\n           SET ZEDSMSG = &STR(&OLDMEM NOW &NEWMEM)\n             SET ZEDLMSG = &STR(&OLDMEM RENAMED &NEWMEM)\n           ISPEXEC SETMSG MSG(ISRZ001)\nISPEXEC LMCLOSE DATAID(&PDSID)\nISPEXEC LMFREE DATAID(&PDSID)\nEXIT\nEXIT1: +\nIF &LMRC = 8 THEN +\n   DO\n           SET ZEDSMSG = &STR(&OLDMEM NOT FOUND)\n             SET ZEDLMSG = &STR(&OLDMEM NOT FOUND IN &PDSDSN)\n           ISPEXEC SETMSG MSG(ISRZ001)\n           GOTO EXIT2\n END\n WRITE '&PDSDSN(&OLDMEM)' NOT RENAMED\nEXIT2: +\nISPEXEC LMCLOSE DATAID(&PDSID)\nISPEXEC LMFREE DATAID(&PDSID)\nEXIT\nISPEXEC LMCLOSE DATAID(&PDSID)\nISPEXEC LMFREE DATAID(&PDSID)\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "S": {"ttr": 5380, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x06\\x00\\x06\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "EDITMAC"}, "text": " ISREDIT MACRO (MEM)\n IF &MEM = ? THEN DO\n ISPEXEC DISPLAY PANEL(S)\n EXIT\n END\n ISREDIT EDIT &MEM\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SBOX": {"ttr": 5382, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00 \\x00 \\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (WIDTH,DEPTH)\n        IF &STR(&WIDTH) = HELP THEN +\n            DO\n            ISPEXEC SELECT PGM(ISPTUTOR) PARM(#BOX)\n            EXIT\n            END\n\nISREDIT (ROW,COL) = CURSOR\nISPEXEC CONTROL ERRORS RETURN\nIF &WIDTH = THEN SET &WIDTH = 20\nIF &DEPTH = THEN SET &DEPTH = 10\nSET &DASHS = &STR(----------------------------------------)\nSET &DASHS = &STR(&DASHS&DASHS)\nSET &TOP = &STR(+&SUBSTR(1:&WIDTH-2,&DASHS)+)\nSET &MAX = &DEPTH - 2\nSET &COUNT = 1\nISREDIT LINE &ROW               = LINE + < &COL '&TOP'>\nDO WHILE(&COUNT LE &MAX)\n   ISREDIT LINE &EVAL(&ROW+&COUNT) = +\n     LINE + < &COL '|' &EVAL(&COL+&WIDTH-1) '|'>\n   SET &COUNT = &COUNT + 1\nEND\nISREDIT LINE &EVAL(&ROW+&COUNT) = LINE + < &COL '&TOP'>\nIF &MAXCC > 0 THEN DO\n   SET ZEDSMSG = &STR(INCOMPLETE BOX)\n   SET ZEDLMSG = &STR(NOT ENOUGH ROOM TO DRAW A COMPLETE BOX)\n   ISPEXEC SETMSG MSG(ISRZ000)\nEND\nSET &COL = &COL + 1\nSET &ROW = &ROW + 1\nISREDIT CURSOR = (ROW,COL)\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCUT2": {"ttr": 5384, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00=\\x001\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 61, "newlines": 49, "modlines": 0, "user": "EDITMAC"}, "text": " ISREDIT MACRO (PARM) NOPROCESS\n ISPEXEC CONTROL ERRORS RETURN\n SET &PARM = TERSE\n SET &LEVELX = 1\n     IF &PARM = ? THEN +\n       DO\n         ISPEXEC DISPLAY PANEL(SHOWCUT2)\n         EXIT\n       END\n                      ISREDIT (ROW,COL)     = CURSOR\n                      IF &ROW NE 1 THEN +\n                      ISREDIT (LAST)    = LINENUM .ZLAST\n                      IF &ROW > &LAST THEN +\n                      SET &ROW = &ROW + 1\nSET &N1= &STR(FIRST LINE OF EACH LEVEL OF CUT WILL BE SHOWN)\n ISREDIT LINE_BEFORE &ROW = MSGLINE \"&N1\"\n SET &L = &L + 1\nSTART: +\n SET LEVEL = &LEVELX\nISPEXEC VGET (RCUTLM&LEVEL,RCUTLB&LEVEL,RCUTRB&LEVEL) PROFILE\nIF &LASTCC > 0 THEN +\n  DO\n      IF &PARM = TERSE THEN GOTO NOLINE\n           SET &CUTX = &STR(NO LINE(S) CUT FOR LEVEL &LEVELX)\n           GOTO NOLINE\n        END\nSET LINES = &&RCUTLM&LEVEL\nSET LINESTOPASTE = &LINES\nSET &N2 = &STR(CUT LEVEL &LEVEL HAS &LINES LINE(S))\n ISREDIT LINE_BEFORE &ROW = MSGLINE \"&N2\"\n SET &L = &L + 1\n ISPEXEC VGET RCUT&LEVEL&EVAL(&INDEX+1) PROFILE\n SET &CUT = &STR(&&RCUT&LEVEL&EVAL(&INDEX+1))\n SET &LEN = &LENGTH(&STR(&CUT))\n IF &LEN > 79 THEN SET &LEN = 79\n IF &LENGTH(&STR(&CUT)) NE 0 THEN +\n   SET &CUTX  = &SUBSTR(1:&LEN,&STR(&CUT))\nGOTO HAVECUT\nNOLINE: +\nIF &PARM = TERSE THEN GOTO NEXTLEV\nHAVECUT: +\nSET &HAVE = YES\n IF &LENGTH(&STR(&CUT)) = 0 THEN  SET &CUTX = &STR(*** BLANK LINE ***)\n ISREDIT LINE_BEFORE &ROW = MSGLINE \"&CUTX\"\nNEXTLEV: +\nSET &LEVELX = &LEVELX +1\nIF &LEVELX > 99 THEN GOTO GETOUT\nGOTO START\nGETOUT: +\nIF &HAVE = YES THEN DO\n   SET &CUTX = &STR(ENTER SCUT NN (LE+\n                VEL NUMBER) TO SE MORE DETAIL OF CUT)\n ISREDIT LINE_BEFORE &ROW = MSGLINE \"&CUTX\"\n END\nIF &HAVE \u00ac= YES THEN DO\n   SET &CUTX = &STR(*** NO CUT LINES +\n                 FOUND IN PROFILE ***)\n ISREDIT LINE_BEFORE &ROW = MSGLINE \"&CUTX\"\n END\nISREDIT LOCATE SPE FIRST\nEXIT  CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SEPLINE": {"ttr": 5386, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x05\\x00\\x01\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 5, "newlines": 1, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO  (HELP)\n      IF &HELP = ? THEN DO\n      ISPEXEC DISPLAY PANEL(SEPLINE)\n      EXIT\n      END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SHOWCUT": {"ttr": 5388, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x001\\x001\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 49, "newlines": 49, "modlines": 0, "user": "EDITMAC"}, "text": " ISREDIT MACRO (PARM) NOPROCESS\n ISPEXEC CONTROL ERRORS RETURN\n IF &PARM \u00ac= &Z THEN +\n   DO\n     IF &PARM = ? THEN +\n       DO\n         ISPEXEC DISPLAY PANEL(SHOWCUT)\n         EXIT\n       END\n     ELSE +\n        IF &DATATYPE(&PARM) = NUM THEN +\n          DO\n           SET LEVEL = &PARM\n           END\n        ELSE +\n          DO\n           SET ZEDSMSG = &STR(INVALID ARGUMENT)\n             SET ZEDLMSG = &STR(VALID ARGUMENTS ARE A \"?\" OR A LEVEL +\n                               NUMBER)\n           ISPEXEC SETMSG MSG(ISRZ001)\n          EXIT\n        END\n  END\nELSE +\n SET LEVEL = 1\nISPEXEC VGET (RCUTLM&LEVEL,RCUTLB&LEVEL,RCUTRB&LEVEL) PROFILE\nIF &LASTCC > 0 THEN +\n  DO\n           SET ZEDSMSG = &STR(LEVEL DOES NOT EXIST)\n             SET ZEDLMSG = &STR(NO CUT LINES FOR LEVEL &LEVEL EXIST)\n           ISPEXEC SETMSG MSG(ISRZ001)\n           EXIT CODE(12)\n        END\nSET LINES = &&RCUTLM&LEVEL\nSET LINESTOPASTE = &LINES\nWRITE CUT LEVEL &LEVEL HAS &LINES LINES\n DO WHILE &INDEX < &LINESTOPASTE\n ISPEXEC VGET RCUT&LEVEL&EVAL(&INDEX+1) PROFILE\n SET &CUT = &STR(&&RCUT&LEVEL&EVAL(&INDEX+1))\n SET &LEN = &LENGTH(&STR(&CUT))\n IF &LEN > 79 THEN SET &LEN = 79\n IF &LENGTH(&STR(&CUT)) NE 0 THEN +\n   SET &CUTX  = &SUBSTR(1:&LEN,&STR(&CUT))\n\n IF &LENGTH(&STR(&CUT)) = 0 THEN  SET &CUTX = &STR(*** BLANK LINE ***)\nWRITE &CUTX\n   SET INDEX  = &INDEX + 1\n END\nEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SHOWCUT2": {"ttr": 5390, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x001\\x001\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 49, "newlines": 49, "modlines": 0, "user": "EDITMAC"}, "text": " ISREDIT MACRO (PARM) NOPROCESS\n ISPEXEC CONTROL ERRORS RETURN\n SET &LEVELX = 1\n     IF &PARM = ? THEN +\n       DO\n         ISPEXEC DISPLAY PANEL(SHOWCUT2)\n         EXIT\n       END\n                      ISREDIT (ROW,COL)     = CURSOR\n                      IF &ROW NE 1 THEN +\n                      ISREDIT (LAST)    = LINENUM .ZLAST\n                      IF &ROW > &LAST THEN +\n                      SET &ROW = &ROW + 1\nSET &N1= &STR(FIRST LINE OF EACH LEVEL OF CUT WILL BE SHOWN)\n ISREDIT LINE_BEFORE &ROW = MSGLINE \"&N1\"\n SET &L = &L + 1\nSTART: +\n SET LEVEL = &LEVELX\nISPEXEC VGET (RCUTLM&LEVEL,RCUTLB&LEVEL,RCUTRB&LEVEL) PROFILE\nIF &LASTCC > 0 THEN +\n  DO\n      IF &PARM = TERSE THEN GOTO NOLINE\n           SET &CUTX = &STR(NO LINE(S) CUT FOR LEVEL &LEVELX)\n           GOTO NOLINE\n        END\nSET LINES = &&RCUTLM&LEVEL\nSET LINESTOPASTE = &LINES\nSET &N2 = &STR(CUT LEVEL &LEVEL HAS &LINES LINE(S))\n ISREDIT LINE_BEFORE &ROW = MSGLINE \"&N2\"\n SET &L = &L + 1\n ISPEXEC VGET RCUT&LEVEL&EVAL(&INDEX+1) PROFILE\n SET &CUT = &STR(&&RCUT&LEVEL&EVAL(&INDEX+1))\n SET &LEN = &LENGTH(&STR(&CUT))\n IF &LEN > 79 THEN SET &LEN = 79\n IF &LENGTH(&STR(&CUT)) NE 0 THEN +\n   SET &CUTX  = &SUBSTR(1:&LEN,&STR(&CUT))\nGOTO HAVECUT\nNOLINE: +\nIF &PARM = TERSE THEN GOTO NEXTLEV\nHAVECUT: +\n IF &LENGTH(&STR(&CUT)) = 0 THEN  SET &CUTX = &STR(*** BLANK LINE ***)\n ISREDIT LINE_BEFORE &ROW = MSGLINE \"&CUTX\"\nNEXTLEV: +\nSET &LEVELX = &LEVELX +1\nIF &LEVELX > 99 THEN GOTO GETOUT\nGOTO START\nGETOUT: +\nISREDIT LOCATE SPE FIRST\nEXIT  CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SHOWDCB": {"ttr": 5392, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "EDITMAC"}, "text": "         ISREDIT MACRO (STUFF)\n\n\n         CONTROL FLUSH MSG NOPROMPT\n         ISPEXEC CONTROL ERRORS CANCEL\n\n        IF &STR(&STUFF) = ?  +\n            THEN DO\n            ISPEXEC DISPLAY PANEL(SHOWDCB)\n            EXIT\n            END\n\n         IF &STR(&STUFF) NE THEN +\n            DO\n            SET ZEDSMSG = &STR(INVALID PARAMETERS)\n            SET ZEDLMSG = &STR(NO PARAMTERS ARE ALLOWED FOR THE +\n            SHOWDCB COMMAND)\n            ISPEXEC SETMSG MSG(ISRZ001)\n            EXIT CODE(12)\n            END\n\n         ISREDIT (DSN) = DATASET\nLISTDSI '&DSN' DIRECTORY\n SET ZEDLMSG = &STR(DCB=(LRECL=&SYSLRECL,BLKSIZE=&SYSBLKSIZE,+\n RECFM=&SYSRECFM,DSORG=&SYSDSORG))\n         ISPEXEC SETMSG MSG(ISRZ000)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SHOWFLOW": {"ttr": 5394, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00%\\x00%\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP)\n IF &HELP = ? THEN DO\n ISPEXEC DISPLAY PANEL(SHOWFLOW)\n EXIT\n END\n/*********************************************************************/\n/*  THIS ISPF/PDF EDIT MACRO EXCLUDES ALL LINES IN THE DATA SET AND  */\n/*  THEN FINDS ALL FLOW OF CONTROL WORDS FOR A PL/I PROGRAM.         */\n/*                                                                   */\n/*  TO RUN:                                                          */\n/*     ENTER SHOWFLOW ON THE COMMAND LINE                            */\n/*********************************************************************/\n\n/* SAVE USER STATE SO THAT LAST FIND STRING WILL NOT BE AFFECTED     */\nISREDIT (USTATE) = USER_STATE\n\n/* EXCLUDE ALL LINES */\nISREDIT EXCLUDE ALL\n\n/* FIND CONTROL WORDS */\nISREDIT FIND ALL WORD PROCEDURE\nISREDIT FIND ALL X'7A' 1 20\nISREDIT FIND ALL WORD PROC\nISREDIT FIND ALL WORD CALL\nISREDIT FIND ALL WORD DO\nISREDIT FIND ALL WORD END\nISREDIT FIND ALL WORD IF\nISREDIT FIND ALL WORD THEN\nISREDIT FIND ALL WORD ELSE\nISREDIT FIND ALL WORD SELECT\nISREDIT FIND ALL WORD WHEN\nISREDIT FIND ALL WORD OTHERWISE\n\n/* RESET USER STATE */\nISREDIT USER_STATE = (USTATE)\n\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SHOWMACS": {"ttr": 5396, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x8f\\x00.\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 143, "newlines": 46, "modlines": 0, "user": "EDITMAC"}, "text": "PROC 0\nISREDIT MACRO (HELP)\n      IF &HELP = ? THEN DO\n      ISPEXEC DISPLAY PANEL(SHOWMACS)\n      EXIT\n      END\nSET &PANMAX = 68\nISPEXEC VGET (ZPF03 ZPF15 ZPF08 ZPF20 ZPF07 ZPF19) PROFILE\nSET &P = PROFILE\nSET  &SAVEPF03 = &ZPF03\nSET  &SAVEPF15 = &ZPF15\nSET  &SAVEPF08 = &ZPF08\nSET  &SAVEPF20 = &ZPF20\nSET  &SAVEPF07 = &ZPF07\nSET  &SAVEPF19 = &ZPF19\nSET &ZPF03 =\nSET &ZPF15 =\nSET &ZPF08 =\nSET &ZP204 =\nSET &ZPF07 =\nSET &ZPF19 =\nISPEXEC VPUT (SAVEPF03 SAVEPF15 SAVEPF08 SAVEPF20 SAVEPF21 SAVEPF22) &P\nISPEXEC VPUT (ZPF03 ZPF15 ZPF08 ZPF20 ZPF07 ZPF19) PROFILE\nSET &PANEL0 = ASMBOX\nSET &PANEL1 = B\nSET &PANEL2 = BIG\nSET &PANEL3 = BIGS\nSET &PANEL4 = BLDCOPY\nSET &PANEL5 = CENTER\nSET &PANEL6 = CHGALL\nSET &PANEL7 = CLONE\nSET &PANEL8 = CLISTBOX\nSET &PANEL9  = COBBOX\nSET &PANEL10 = COMMENTS\nSET &PANEL11 = COMPRESS\nSET &PANEL12 = CONLY\nSET &PANEL13 = CONT\nSET &PANEL14 = CONTROL\nSET &PANEL15 = CUT\nSET &PANEL16 = CUTTO\nSET &PANEL17 = D\nSET &PANEL18 = DELCUT\nSET &PANEL19 = DSIGENP\nSET &PANEL20 = DSIGENS\nSET &PANEL21 = E\nSET &PANEL22 = FC\nSET &PANEL23 = FIXJCL\nSET &PANEL24 = INIT\nSET &PANEL25 = INITIAL\nSET &PANEL26 = JC\nSET &PANEL27 = JCLBOX\nSET &PANEL28 = LCASE\nSET &PANEL29 = LJUST\nSET &PANEL30 = MACHELP\nSET &PANEL31 = MEMLIST\nSET &PANEL32 = MSTATS\nSET &PANEL33 = NEWLINES\nSET &PANEL34 = ONLY\nSET &PANEL35 = PASTE\nSET &PANEL36 = PBOX\nSET &PANEL37 = PFCAN\nSET &PANEL38 = PFSET\nSET &PANEL39 = QCREATE\nSET &PANEL40 = QREP\nSET &PANEL41 = RCOLS\nSET &PANEL42 = RCOLDEL\nSET &PANEL43 = REPOTHER\nSET &PANEL44 = RJUST\nSET &PANEL45 = RNAME\nSET &PANEL46 = S\nSET &PANEL47 = SEPLINE\nSET &PANEL48 = SHOWCUT\nSET &PANEL49 = SHOWCUT2\nSET &PANEL50 = SHOWDCB\nSET &PANEL51 = SHOWFLOW\nSET &PANEL52 = SHOWMACS\nSET &PANEL53 = SORTDUPS\nSET &PANEL54 = STAMP\nSET &PANEL55 = SLINE\nSET &PANEL56 = ST\nSET &PANEL57 = ST2\nSET &PANEL58 = ST3\nSET &PANEL59 = ST4\nSET &PANEL60 = ST5\nSET &PANEL61 = SUM\nSET &PANEL62 = T\nSET &PANEL63 = TYPE\nSET &PANEL64 = UCASE\nSET &PANEL65 = UNSEP\nSET &PANEL66 = XCOPY\nSET &PANEL67 = XSEND\nSET &PANEL68 = EXIT\nSET &CTR = 0\nDISPLAY: +\nSET &PANEL = &&PANEL&CTR\nISPEXEC DISPLAY PANEL(&PANEL)\nIF &KEY = PF03 THEN DO\nGOTO EXIT\nEND\nIF &KEY = PF15 THEN DO\nGOTO EXIT\nEND\nIF &KEY = PF07 THEN DO\nIF &DATATYPE(&ZCMD) = NUM THEN DO\nIF &EVAL(&ZCMD) <= &CTR THEN SET &CTR = &CTR -(&EVAL(&ZCMD))\nIF &EVAL(&ZCMD) > &CTR THEN SET &CTR = 0\nSET &ZCMD =\nGOTO DISPLAY\nEND\nSET &CTR = &EVAL(&CTR-1)\nGOTO DISPLAY\nEND\nIF &KEY = PF19 THEN DO\nIF &DATATYPE(&ZCMD) = NUM THEN DO\nIF &EVAL(&ZCMD) <= &CTR THEN SET &CTR = &CTR -(&EVAL(&ZCMD))\nIF &EVAL(&ZCMD) > &CTR THEN SET &CTR = 0\nSET &ZCMD =\nGOTO DISPLAY\nEND\nSET &CTR = &EVAL(&CTR-1)\nGOTO DISPLAY\nEND\nIF &DATATYPE(&ZCMD) = NUM THEN DO\nSET &CTR = &CTR + &EVAL(&ZCMD)\nIF &CTR > &PANMAX THEN SET &CTR = &EVAL(&PANMAX -1)\nSET &ZCMD =\nGOTO DISPLAY\nEND\nSET &CTR = &CTR + 1\nERROR DO\nGOTO EXIT\nEND\nGOTO DISPLAY\nEXIT: +\nISPEXEC VGET (SAVEPF03 SAVEPF15 SAVEPF08 SAVEPF20 SAVEPF07 SAVEPF19) &P\nSET &ZPF03 = &SAVEPF03\nSET &ZPF15 = &SAVEPF15\nSET &ZPF08 = &SAVEPF08\nSET &ZPF20 = &SAVEPF20\nSET &ZPF07 = &SAVEPF07\nSET &ZPF19 = &SAVEPF19\nISPEXEC VPUT (ZPF03 ZPF15 ZPF08 ZPF20 ZPF07 ZPF19) PROFILE\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SLINE": {"ttr": 5633, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00/\\x00/\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 47, "newlines": 47, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP) NOPROCESS\n IF &HELP = ? THEN DO\n ISPEXEC DISPLAY PANEL(SLINE)\n EXIT\n END\nISREDIT (THIS) = MEMBER\n  ISREDIT PROCESS DEST\n  IF &LASTCC = 0 THEN DO\n  ISREDIT LOCATE .ZDEST\n  IF &LASTCC = 8 THEN +\n     DO\n           SET ZEDSMSG = &STR(EMPTY DATA SET )\n        SET ZEDLMSG = &STR(SEPLINE WORKS ONLY WHEN DATA SET HAS VALID +\n                                 DATA AND LINE NUMBERS)\n           ISPEXEC SETMSG MSG(ISRZ001)\n         EXIT CODE(12)\n   END\n   ISREDIT (DS1) = DATASET\n   LISTDSI '&DS1'\n   SET &LN = &SYSLRECL\nSET &RULE5 = &STR(----------------------------------------)\nSET &RULEV = &STR(&RULE5&RULE5&RULE5&RULE5&RULE5&RULE5&RULE5)\nSET &RULEY = &SUBSTR(1:&LN,&STR(&RULEV))\n   SET &SLIN = &STR(MSGLINE \"&RULEY\")\n       ISREDIT LINE_AFTER .ZDEST = &SLIN\n\nERROROUT:+\n       ISREDIT MASKLINE = ' '\n\n\n      SET RC = 0\n  END\n  ELSE DO\n     IF &MAXCC = 8 THEN DO\n         SET ZEDSMSG = &STR(INDICATE POSITION)\n         SET ZEDLMSG = &STR(MARK 'A' ON LINE AFTER WHICH /*USERPARM +\n                            DATA SHOULD BE INSERTED)\n     END\n     ELSE DO\n         SET ZEDSMSG = &STR(ERROR ENCOUNTERED)\n         SET ZEDLMSG = &STR(UNABLE TO PROCESS REQUEST, +\n                             RECHECK INPUT)\n     END\n     ISPEXEC SETMSG MSG(ISRZ000)\n     SET RC = 12\n  END\n  EXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SORTDUPS": {"ttr": 5635, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x9d\\x00\\x95\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 157, "newlines": 149, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (SCOL1 SCOL2 ACTION DEBUG)\n IF &STR(&SCOL1) = ? THEN DO\n ISPEXEC DISPLAY PANEL(SORTDUPS)\n EXIT\n END\n /*\n /*       DATASET:  H562813.PVTLIB.MACSOUT(SORTX)\n /*        AUTHOR:  NANCY T. MYERS\n /*     DATE/TIME:  09/12/88     21:58:15\n /*\n /*   DESCRIPTION:  SORT CURRENT DATA SET FIND / DELETE DUPLICATES\n /*      MODIFIED:  PAUL G. DAVIS ENRON CORP\n /*                 ADDED HELP AND DISPLAY ALL RECORDS CONTAINING DUPS\n /*                 IF SHODUPS SELECTED. IF NO PARAMETERS ENTERED SORT\n /*                 DEFAULTS TO BOUNDS SETTINGS OF DATASET.\n /*\n\n/* ISPF EDIT \"SORTDUPS\" MACRO USING ISPF 2.3 PDF FEATURES\n/*DETERMINE DUPLICATE STRINGS WITHIN DATASETS\n\n/* COPYRIGHT (C) 1988 - NANCY T. MYERS\n\n    CONTROL MSG\n    ISREDIT (BND1,BND2) = BOUNDS\n    IF &SCOL1 = THEN DO\n    SET &SCOL1 = &BND1\n    SET &SCOL2 = &BND2\n    SET &ACTION = SHODUPS\n    END\n    ISPEXEC CONTROL ERRORS RETURN\n    IF &ACTION = THEN SET &ACTION = SHODUPS\n   SET &RC = 0\n   ISPEXEC VGET (ZENVIR)     /*CHECK FOR 2.3 */\n    IF '&STR(&ZENVIR)' NE '&STR(ISPF 2.3MVS/XA  TSO)' THEN DO\n    WRITE           ERROR\n    WRITE THE MACRO \"SORTDUPS\" CAN ONLY BE USED WITH ISPF/PDF 2.3\n    WRITE\n    GOTO HELP\n    END\n   ISPEXEC VGET (ZUSER)       /* UNRELEASED CODE */\n\nCKPARM: IF &SCOL2 = DEBUG THEN CONTROL SYM CON LIST\n    IF &SCOL1 EQ &STR(HELP) THEN GOTO HELP\n    IF &DEBUG =  DEBUG THEN CONTROL SYM CON LIST\n    IF &SCOL1 < 1 OR &SCOL1 > 255 OR +\n    &SCOL2 < 1 OR &SCOL2 > 255 THEN DO\n    WRITE           ERROR\n    WRITE THE FIRST AND SECOND PARM FOR THIS MACRO MUST BE NUMERIC\n    WRITE\n    GOTO HELP\n    END\n    IF &ACTION  NE  &STR(SHODUPS)  AND +\n    &ACTION   NE  &STR(SHOWDUPS) AND  +\n    &ACTION   NE &STR(DELDUPS)  THEN DO\n    WRITE           ERROR\n    WRITE THE THIRD PARM FOR THIS MACRO MUST BE SHODUPS OR DELDUPS\n    WRITE\n    GOTO HELP\n    END\n\nINIT: SET &DUPCNT  =  0\n    ISREDIT (START1) = LINENUM .ZFIRST\n    ISREDIT (END1) = LINENUM .ZLAST\n    SET &TOTRECS = &EVAL(&END1)\n    ISREDIT RESET\n    ISREDIT SORT NX A &SCOL1 &SCOL2\n\n   ISREDIT CURSOR   1,0\n    ISREDIT BOUNDS = &SCOL1 &SCOL2\n   ISREDIT EXCLUDE ALL\n    SET &LINENO1 = &EVAL(&START1)\n    SET &LINENO2 = &LINENO1 + 1\n\nPEAT: ISREDIT (REC1) =  LINE &LINENO1\n    SET &FLD1 =  &SUBSTR(&SCOL1:&SCOL2,&NRSTR(&REC1))\nREPEAT: ISREDIT (REC2) = LINE &LINENO2\n    IF &NRSTR(&REC2) \u00ac=  THEN +\n    SET  &FLD2 =  &SUBSTR(&SCOL1:&SCOL2,&NRSTR(&REC2))\n        IF &NRSTR(&FLD1) = &NRSTR(&FLD2) THEN DO\n        IF &ACTION = SHODUPS OR &ACTION = SHOWDUPS THEN\n        IF &ACTION = DELDUPS THEN DO\n        ISREDIT DELETE &LINENO2 &LINENO2\n        SET &LINENO2 = &LINENO2 - 1\n        SET &RECSX = &RECSX + 1\n        IF &RECSX = &TOTRECS THEN GOTO CLOSE\n        IF &RECSX > &TOTRECS THEN GOTO CLOSE\n        END\n    ISREDIT LOCATE &LINENO1\n    ISREDIT LOCATE &LINENO2\n    SET &LINENO2 =  &LINENO2 + 1\n    SET &DUPCNT =  &DUPCNT + 1\n    END\n   ELSE DO\n    SET &FLD1 =  &NRSTR(&FLD2)\n    SET &LINENO1 = &LINENO2\n    SET &LINENO2 = &LINENO2 + 1\n    END\n   IF &LINENO2 < &EVAL(&END1) THEN GOTO REPEAT\n\nCLOSE: IF &DUPCNT =  0 THEN DO\n    SET ZEDSMSG =  &STR(NO DUPLLCATES)\n    SET ZEDLMSG = &STR(NO DUPLLCATES FOUND +\n             IN COLUMNS &SCOL1 THRU &SCOL2)\n    ISPEXEC SETMSG MSG(ISRZ000)\n    GOTO SETSCR\n    END\n   IF &ACTION  =  &STR(DELDUPS) THEN DO\n    ISREDIT RESET\n    ISREDIT BOUNDS &BND1 &BND2\n    SET ZEDSMSG = &STR(&DUPCNT DUP(S) DELETED)\n    SET ZEDLMSG = &STR(&DUPCNT DUPLICATE(S) DELETED +\n             IN COLUMNS &SCOL1 THRU &SCOL2)\n    ISPEXEC SETMSG MSG(ISRZ000)\n    END\n   ELSE DO\n    SET ZEDSMSG = &STR(&DUPCNT DUP(S) FOUND)\n    SET ZEDLMSG = &STR(&DUPCNT DUPLICATE(S) FOUND +\n             IN COLUMNS &SCOL1 THRU &SCOL2)\n    ISPEXEC SETMSG MSG(ISRZ000)\n    END\n\nSETSCR: ISREDIT BOUNDS = &BND1,&BND2\n   ISREDIT UP MAX\n   IF &RC  =   0 THEN SET &RC = 1\n\nEXIT: EXIT CODE(&RC)\n\n\nHELP: WRITE &SYSICMD IS AN ISPF EDIT MACRO DESIGNED TO FIND AND/OR\n   WRITE ELIMINATE OCCURANCES OF DUPLICATE STRINGS WITHIN USER\n   WRITE DEFINED COLUMNS OF A DATASET. THE DATASET DOES NOT HAVE\n   WRITE TO BE PRESORTED BECAUSE THE EDIT MACRO WILL SORT IT.\n   WRITE\n   WRITE\n   WRITE IT NEEDS THREE PARAMETERS:\n   WRITE 1 - SCOL1 - BEGINNING SORT COLUMN\n   WRITE\n   WRITE 2 - SCOL2 - ENDING SORT COLUMN\n\n\n WRITE\nWRITE 3 - ACTION  ACTION TO BE TAKEN ON THE DUPLLCATES\nWRITE      DELDUPS - DELETE ALL DUPLICATES\nWRITE      SHODUPS - DISPLAY ALL DUPLICATES ONLY\nWRITE\nWRITE       OR\nWRITE\nWRITE IT CAN BE USED WITH ONLY ONE PARAMETER:\nWRITE 1 - HELP - TO DISPLAY THIS MESSAGE\nWRITE      MUST BE \"HELP\"\nWRITE\nWRITE IF YOU DETERMINE THAT YOU WANT TO UNDO WHAT SORTDUPS\nWRITE DID, SIMPLY CANCEL YOUR EDIT SESSION.\nWRITE\nWRITE THIS MACRO IS CREATED AND MAINTAINED BY CONTROL AND\nWRITE INTEGRATION.\nGOTO EXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ST": {"ttr": 5639, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x02b\\x02a\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 610, "newlines": 609, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (CHARS)\n      IF &NRSTR(&CHARS) = ? THEN DO\n      ISPEXEC DISPLAY PANEL(ST)\n      ISPEXEC DISPLAY PANEL(ST2)\n      ISPEXEC DISPLAY PANEL(ST3)\n      ISPEXEC DISPLAY PANEL(ST4)\n      ISPEXEC DISPLAY PANEL(ST5)\n      EXIT\n      END\n      CONTROL MSG\n IF &STR(&CHARS) = THEN DO\n      ISREDIT (ROW,COL) = CURSOR\n      ISREDIT (CHARS) = LINE &ROW\n      SET &ROW = &ROW + 1\n END\n      IF &STR(&CHARS) = &STR(??) THEN SET &CHARS = &STR(?)\n      SET X = &LENGTH(&STR(&CHARS))\n      SET TX = &LENGTH(&STR(&CHARS))\nISREDIT LOCATE 1\nIF &LASTCC =  8 THEN DO\nISREDIT NONUM\nSET &LX = 0\nISREDIT MASKLINE = 'X'\n   DO WHILE &LX < 24\n      ISREDIT LINE_AFTER &LX = MASKLINE\n       SET &LX =  &LX +1\n   END\nISREDIT C 'X' ' ' ALL\nISREDIT MASKLINE = ' '\nISREDIT RESET\nEND\nSET &C = 1\n   DO WHILE &C < &EVAL(&TX + 1)\n    SET &L&C = &SUBSTR(&C:&C,&STR(&CHARS))\n     SET &C = &C + 1\n   END\n  ISPEXEC CONTROL ERRORS RETURN\nISREDIT (ROW,COL) = CURSOR\nSET &ROW = &ROW + 1\nSET ROWX = &ROW\nSET ROWN = &ROW\nISREDIT (REC) = LINE &ROW\nSET &COL = 1\nPROCESS: +\nSET &X2 = &X2 + 1\nIF &X2 LE &X THEN DO\nSET &T = &&L&X2\nSET &LTR = &STR(&T)\n IF &X2 = 14 THEN SET &ROW = &ROW +6\n  IF &X2 = 27 THEN SET &ROW = &ROW +6\n   IF &X2 = 40 THEN SET &ROW = &ROW +6\n    IF &X2 = 53 THEN SET &ROW = &ROW +6\n     IF &X2 = 66 THEN SET &ROW = &ROW +6\n      IF &X2 = 79 THEN SET &ROW = &ROW +6\n IF &X2 > 1 THEN DO\n    SET &COL = &COL +6\n     IF &X2 = 14 THEN SET &COL = 1\n      IF &X2 = 27 THEN SET &COL = 1\n        IF &X2 = 40 THEN SET &COL = 1\n         IF &X2 = 53 THEN SET &COL = 1\n          IF &X2 = 66 THEN SET &COL = 1\n           IF &X2 = 79 THEN SET &COL = 1\n  IF &SPA = Y THEN SET &COL = &COL -3\n    SET &SPA =\n END\nEND\n   IF &X2 > &X THEN DO\n     IF &X < 13 THEN DO\n       SET &D = &EVAL(80 -(&X *6))\n        SET &OVER = &EVAL(&D/2)\n         ISREDIT (BOUNDS) 1 80\n          SET &ROW = &ROWX\n          ISREDIT NULLS ON\n          ISREDIT (CURSOR) = &ROW 1\n          ISREDIT SHIFT ) &ROW &OVER\n          ISREDIT SHIFT ) &EVAL(&ROW + 1) &OVER\n          ISREDIT SHIFT ) &EVAL(&ROW + 2) &OVER\n          ISREDIT SHIFT ) &EVAL(&ROW + 3) &OVER\n          ISREDIT SHIFT ) &EVAL(&ROW + 4) &OVER\n          ISREDIT NULLS OFF\n     END\n     ISREDIT LOCATE &ROWN\n      EXIT\n   END\nIF &NRSTR(&LTR) = &NRSTR(&&) THEN GOTO C47\nIF &NRSTR(&LTR) = &STR(A) THEN GOTO C01\nIF &NRSTR(&LTR) = &STR(B) THEN GOTO C02\nIF &NRSTR(&LTR) = &STR(C) THEN GOTO C03\nIF &NRSTR(&LTR) = &STR(D) THEN GOTO C04\nIF &NRSTR(&LTR) = &STR(E) THEN GOTO C05\nIF &NRSTR(&LTR) = &STR(F) THEN GOTO C06\nIF &NRSTR(&LTR) = &STR(G) THEN GOTO C07\nIF &NRSTR(&LTR) = &STR(H) THEN GOTO C08\nIF &NRSTR(&LTR) = &STR(I) THEN GOTO C09\nIF &NRSTR(&LTR) = &STR(J) THEN GOTO C10\nIF &NRSTR(&LTR) = &STR(K) THEN GOTO C11\nIF &NRSTR(&LTR) = &STR(L) THEN GOTO C12\nIF &NRSTR(&LTR) = &STR(M) THEN GOTO C13\nIF &NRSTR(&LTR) = &STR(N) THEN GOTO C14\nIF &NRSTR(&LTR) = &STR(O) THEN GOTO C15\nIF &NRSTR(&LTR) = &STR(P) THEN GOTO C16\nIF &NRSTR(&LTR) = &STR(Q) THEN GOTO C17\nIF &NRSTR(&LTR) = &STR(R) THEN GOTO C18\nIF &NRSTR(&LTR) = &STR(S) THEN GOTO C19\nIF &NRSTR(&LTR) = &STR(T) THEN GOTO C20\nIF &NRSTR(&LTR) = &STR(U) THEN GOTO C21\nIF &NRSTR(&LTR) = &STR(V) THEN GOTO C22\nIF &NRSTR(&LTR) = &STR(W) THEN GOTO C23\nIF &NRSTR(&LTR) = &STR(X) THEN GOTO C24\nIF &NRSTR(&LTR) = &STR(Y) THEN GOTO C25\nIF &NRSTR(&LTR) = &STR(Z) THEN GOTO C26\nIF &NRSTR(&LTR) = &STR(#) THEN GOTO C27\nIF &NRSTR(&LTR) = &STR(,) THEN GOTO C28\nIF &NRSTR(&LTR) = &STR($) THEN GOTO C29\nIF &NRSTR(&LTR) = &STR(0) THEN GOTO C30\nIF &NRSTR(&LTR) = &STR(1) THEN GOTO C31\nIF &NRSTR(&LTR) = &STR(2) THEN GOTO C32\nIF &NRSTR(&LTR) = &STR(3) THEN GOTO C33\nIF &NRSTR(&LTR) = &STR(4) THEN GOTO C34\nIF &NRSTR(&LTR) = &STR(5) THEN GOTO C35\nIF &NRSTR(&LTR) = &STR(6) THEN GOTO C36\nIF &NRSTR(&LTR) = &STR(7) THEN GOTO C37\nIF &NRSTR(&LTR) = &STR(8) THEN GOTO C38\nIF &NRSTR(&LTR) = &STR(9) THEN GOTO C39\nIF &NRSTR(&LTR) = &STR(@) THEN GOTO C40\nIF &NRSTR(&LTR) = &STR(%) THEN GOTO C41\nIF &NRSTR(&LTR) = &STR(*) THEN GOTO C42\nIF &NRSTR(&LTR) = &STR(/) THEN GOTO C43\nIF &NRSTR(&LTR) = &STR(-) THEN GOTO C44\nIF &NRSTR(&LTR) = &STR(( THEN GOTO C45\nIF &NRSTR(&LTR) = &STR()) THEN GOTO C46\nIF &NRSTR(&LTR) = &STR(*) THEN GOTO C47\nIF &NRSTR(&LTR) = &STR(+) THEN GOTO C48\nIF &NRSTR(&LTR) = &STR(_) THEN GOTO C49\nIF &NRSTR(&LTR) = &STR(\u00a2) THEN GOTO C50\nIF &NRSTR(&LTR) = &STR(|) THEN GOTO C51\nIF &NRSTR(&LTR) = &STR(>) THEN GOTO C52\nIF &NRSTR(&LTR) = &STR(:) THEN GOTO C53\nIF &NRSTR(&LTR) = &STR(;) THEN GOTO C54\nIF &NRSTR(&LTR) = &STR(.) THEN GOTO C55\nIF &NRSTR(&LTR) = &STR(?) THEN GOTO C56\nIF &NRSTR(&LTR) = &STR(') THEN GOTO C57\nIF &NRSTR(&LTR) = &STR(=) THEN GOTO C58\nIF &NRSTR(&LTR) = &STR(!) THEN GOTO C59\nIF &NRSTR(&LTR) = &STR(<) THEN GOTO C60\nIF &NRSTR(&LTR) = &STR(\u00ac) THEN GOTO C61\nIF &NRSTR(&LTR) = &STR( ) THEN GOTO C62\nIF &NRSTR(&LTR) = &STR(\\) THEN GOTO C63\nIF &NRSTR(&LTR) = &STR(\u00a6) THEN GOTO C64\nIF &NRSTR(&LTR) = &STR(\") THEN GOTO C65\nC01: +\nISREDIT LINE &ROW           = LINE + < &COL  ' AAA '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'A   A'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'AAAAA'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'A   A'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'A   A'>\nGOTO PROCESS\nC02: +\nISREDIT LINE &ROW           = LINE + < &COL  'BBBB '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'B   B'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'BBBB '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'B   B'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'BBBB '>\nGOTO PROCESS\nC03: +\nISREDIT LINE &ROW           = LINE + < &COL  ' CCCC'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'C    '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'C    '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'C    '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' CCCC'>\nGOTO PROCESS\nC04: +\nISREDIT LINE &ROW           = LINE + < &COL  'DDDD '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'D   D'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'D   D'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'D   D'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'DDDD '>\nGOTO PROCESS\nC05: +\nISREDIT LINE &ROW           = LINE + < &COL  'EEEEE'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'E    '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'EEEE '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'E    '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'EEEEE'>\nGOTO PROCESS\nC06: +\nISREDIT LINE &ROW           = LINE + < &COL  'FFFFF'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'F    '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'FFFF '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'F    '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'F    '>\nGOTO PROCESS\nC07: +\nISREDIT LINE &ROW           = LINE + < &COL  ' GGGG'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'G    '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'G  GG'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'G   G'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' GGGG'>\nGOTO PROCESS\nC08: +\nISREDIT LINE &ROW           = LINE + < &COL  'H   H'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'H   H'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'HHHHH'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'H   H'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'H   H'>\nGOTO PROCESS\nC09: +\nISREDIT LINE &ROW           = LINE + < &COL  ' III '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '  I  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  I  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  I  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' III '>\nGOTO PROCESS\nC10: +\nISREDIT LINE &ROW           = LINE + < &COL  '  JJJ'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '   J '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '   J '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'J  J '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' JJ  '>\nGOTO PROCESS\nC11: +\nISREDIT LINE &ROW           = LINE + < &COL  'K  K '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'K K  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'KK   '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'K K  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'K  K '>\nGOTO PROCESS\nC12: +\nISREDIT LINE &ROW           = LINE + < &COL  'L    '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'L    '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'L    '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'L    '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'LLLLL'>\nGOTO PROCESS\nC13: +\nISREDIT LINE &ROW           = LINE + < &COL  'M   M'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'MM MM'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'M M M'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'M   M'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'M   M'>\nGOTO PROCESS\nC14: +\nISREDIT LINE &ROW           = LINE + < &COL  'N   N'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'NN  N'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'N N N'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'N  NN'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'N   N'>\nGOTO PROCESS\nC15: +\nISREDIT LINE &ROW           = LINE + < &COL  'OOOOO'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'O   O'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'O   O'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'O   O'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'OOOOO'>\nGOTO PROCESS\nC16: +\nISREDIT LINE &ROW           = LINE + < &COL  'PPPP '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'P   P'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'PPPP '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'P    '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'P    '>\nGOTO PROCESS\nC17: +\nISREDIT LINE &ROW           = LINE + < &COL  ' QQQ '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'Q   Q'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'Q   Q'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'Q \u00a2\u00a2Q'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' QQ\u00a2\u00a2'>\nGOTO PROCESS\nC18: +\nISREDIT LINE &ROW           = LINE + < &COL  'RRRR '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'R   R'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'RRRR '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'R  R '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'R   R'>\nGOTO PROCESS\nC19: +\nISREDIT LINE &ROW           = LINE + < &COL  ' SSSS'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'S    '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  ' SSS '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '    S'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'SSSS '>\nGOTO PROCESS\nC20: +\nISREDIT LINE &ROW           = LINE + < &COL  'TTTTT'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '  T  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  T  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  T  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '  T  '>\nGOTO PROCESS\nC21: +\nISREDIT LINE &ROW           = LINE + < &COL  'U   U'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'U   U'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'U   U'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'U   U'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' UUU '>\nGOTO PROCESS\nC22: +\nISREDIT LINE &ROW           = LINE + < &COL  'V   V'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'V   V'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'V   V'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  ' V V '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '  V  '>\nGOTO PROCESS\nC23: +\nISREDIT LINE &ROW           = LINE + < &COL  'W   W'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'W   W'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'W W W'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'WW WW'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'W   W'>\nGOTO PROCESS\nC24: +\nISREDIT LINE &ROW           = LINE + < &COL  'X   X'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  ' X X '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  X  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  ' X X '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'X   X'>\nGOTO PROCESS\nC25: +\nISREDIT LINE &ROW           = LINE + < &COL  'Y   Y'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  ' Y Y '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  Y  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  Y  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '  Y  '>\nGOTO PROCESS\nC26: +\nISREDIT LINE &ROW           = LINE + < &COL  'ZZZZZ'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '   Z '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  Z  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  ' Z   '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'ZZZZZ'>\nGOTO PROCESS\nC27: +\nISREDIT LINE &ROW           = LINE + < &COL  ' # # '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '#####'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  ' # # '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '#####'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' # # '>\nGOTO PROCESS\nC28: +\nISREDIT LINE &ROW           = LINE + < &COL  \"     \">\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  \"     \">\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  \"     \">\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  \"     \">\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  \"  ,, \">\nISREDIT LINE &EVAL(&ROW+5)  = LINE + < &COL  \"  ,  \">\nGOTO PROCESS\nC29: +\nISREDIT LINE &ROW           = LINE + < &COL  ' $|$$'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '$ |  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  ' $|$ '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  | $'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '$$|$ '>\nGOTO PROCESS\nC30: +\nISREDIT LINE &ROW           = LINE + < &COL  ' 000 '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '0   0'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '0   0'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '0   0'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' 000 '>\nGOTO PROCESS\nC31: +\nISREDIT LINE &ROW           = LINE + < &COL  '  1  '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  ' 11  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  1  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  1  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' 111 '>\nGOTO PROCESS\nC32: +\nISREDIT LINE &ROW           = LINE + < &COL  '2222 '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '    2'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '   2 '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  2  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '22222'>\nGOTO PROCESS\nC33: +\nISREDIT LINE &ROW           = LINE + < &COL  '3333 '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '    3'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  ' 333 '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '    3'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '3333 '>\nGOTO PROCESS\nC34: +\nISREDIT LINE &ROW           = LINE + < &COL  '4  4 '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '4  4 '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '44444'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '   4 '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '   4 '>\nGOTO PROCESS\nC35: +\nISREDIT LINE &ROW           = LINE + < &COL  '55555'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '5    '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '5555 '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '    5'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '5555 '>\nGOTO PROCESS\nC36: +\nISREDIT LINE &ROW           = LINE + < &COL  ' 666 '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '6    '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '6666 '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '6   6'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' 666 '>\nGOTO PROCESS\nC37: +\nISREDIT LINE &ROW           = LINE + < &COL  '77777'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '   7 '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  7  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  7  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '  7  '>\nGOTO PROCESS\nC38: +\nISREDIT LINE &ROW           = LINE + < &COL  ' 888 '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '8   8'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  ' 888 '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '8   8'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' 888 '>\nGOTO PROCESS\nC39: +\nISREDIT LINE &ROW           = LINE + < &COL  ' 999 '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '9   9'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  ' 9999'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '    9'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' 999 '>\nGOTO PROCESS\nC40: +\nISREDIT LINE &ROW           = LINE + < &COL  '@@@@@'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '@   @'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '@ @ @'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '@ @ @'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '@@@@ '>\nGOTO PROCESS\nC41: +\nISREDIT LINE &ROW           = LINE + < &COL  '%%  %'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '   % '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  %  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  ' %   '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '%  %%'>\nGOTO PROCESS\nC42: +\nISREDIT LINE &ROW           = LINE + < &COL  '*   *'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  ' *** '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '*****'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  ' *** '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '*   *'>\nGOTO PROCESS\nC43: +\nISREDIT LINE &ROW           = LINE + < &COL  '    /'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '   / '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  /  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  ' /   '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '/    '>\nGOTO PROCESS\nC44: +\nISREDIT LINE &ROW           = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '-----'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '     '>\nGOTO PROCESS\nC45: +\nISREDIT LINE &ROW           = LINE + < &COL  '   ( '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '  (  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  (  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  (  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '   ( '>\nGOTO PROCESS\nC46: +\nISREDIT LINE &ROW           = LINE + < &COL  ' )   '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '  )  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  )  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  )  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' )   '>\nGOTO PROCESS\nC47: +\nISREDIT LINE &ROW           = LINE + < &COL  ' &&&&&& '\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '&&    '\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  ' &&&& >'\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '&&   &&'\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' &&&&&&&&'\nGOTO PROCESS\nC48: +\nISREDIT LINE &ROW           = LINE + < &COL  '  +  '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '  +  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '+++++'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  +  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '  +  '>\nGOTO PROCESS\nC49: +\nISREDIT LINE &ROW           = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '_____'>\nGOTO PROCESS\nC50: +\nISREDIT LINE &ROW           = LINE + < &COL  '  *  '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  ' C*C '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'C *  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  ' C*C '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '  *  '>\nGOTO PROCESS\nC51: +\nISREDIT LINE &ROW           = LINE + < &COL  '  |  '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '  |  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  |  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  |  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '  |  '>\nGOTO PROCESS\nC52: +\nISREDIT LINE &ROW           = LINE + < &COL  ' >   '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '  >  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '   > '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  >  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' >   '>\nGOTO PROCESS\nC53: +\nISREDIT LINE &ROW           = LINE + < &COL  ' ..  '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  ' ..  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  ' ..  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' ..  '>\nGOTO PROCESS\nC54: +\nISREDIT LINE &ROW           = LINE + < &COL  ' ..  '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  ' ..  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  ' ,,  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '  ,  '>\nGOTO PROCESS\nC55: +\nISREDIT LINE &ROW           = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  ' ..  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' ..  '>\nGOTO PROCESS\nC56: +\nISREDIT LINE &ROW           = LINE + < &COL  ' ??? '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '?   ?'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '   ? '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  ?  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '  ?  '>\nGOTO PROCESS\nC57: +\nISREDIT LINE &ROW           = LINE + < &COL  \"  '' \">\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  \" ''  \">\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  \"     \">\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  \"     \">\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  \"     \">\nGOTO PROCESS\nC58: +\nISREDIT LINE &ROW           = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '====='>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '====='>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '     '>\nGOTO PROCESS\nC59: +\nISREDIT LINE &ROW           = LINE + < &COL  ' ||  '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  ' ||  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  ' ||  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' ..  '>\nGOTO PROCESS\nC60: +\nISREDIT LINE &ROW           = LINE + < &COL  '   < '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '  <  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  ' <   '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  <  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '   < '>\nGOTO PROCESS\nC61: +\nISREDIT LINE &ROW           = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '\u00ac\u00ac\u00ac\u00ac\u00ac'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '    \u00ac'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '     '>\nGOTO PROCESS\nC62: +\nISREDIT LINE &ROW           = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '     '>\nGOTO PROCESS\nC63: +\nISREDIT LINE &ROW           = LINE + < &COL  '\\    '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  ' \\   '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  \\  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '   \\ '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '    \\'>\nGOTO PROCESS\nC64: +\nISREDIT LINE &ROW           = LINE + < &COL  '  \u00a6  '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '  \u00a6  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  \u00a6  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '  \u00a6  '>\nGOTO PROCESS\nC65: +\nISREDIT LINE &ROW           = LINE + < &COL  '  \"\" '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '  \"\" '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '     '>\nSET &SPA = Y\nGOTO PROCESS\nERROR OFF\n  ISREDIT CURSOR = (ROW,NEXT)\n  EXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STAMP": {"ttr": 5894, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x009\\x009\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 57, "newlines": 57, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP) NOPROCESS\n IF &HELP = ? THEN DO\n ISPEXEC DISPLAY PANEL(STAMP)\n EXIT\n END\nSET   L1 = &STR(                    /* ANOTHER FINE EDIT MACRO */  )\nSET   L2 = &STR(                        /* BROUGHT TO YOU */       )\nSET   L3 = &STR(                   /* BY YOUR TECHNICAL SUPPORT */ )\nSET   L4 = &STR(                             /* STAFF */           )\n  ISREDIT PROCESS DEST\n  IF &LASTCC = 0 THEN DO\n  ISREDIT LOCATE .ZDEST\n  IF &LASTCC = 8 THEN GOTO EMPTY\n       ISREDIT MASKLINE = \"&L1\"\n       ISREDIT LINE_AFTER .ZDEST = MASKLINE\n\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 1\n       ISREDIT MASKLINE = \"&L2\"\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 2\n       ISREDIT MASKLINE = \"&L3\"\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n\n       ISREDIT (LINEPTR) = LINENUM .ZDEST\n       SET &LINEPTR = &LINEPTR + 3\n       ISREDIT MASKLINE = \"&L4\"\n       ISREDIT LINE_AFTER &LINEPTR = MASKLINE\n       GOTO ERROROUT\n    END\n  ELSE DO\nEMPTY: +\n       ISREDIT MASKLINE = \"&L1\"\n       ISREDIT LINE_AFTER 0 = MASKLINE\n\n       ISREDIT (LINEPTR) = LINENUM .ZCSR\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&L2\"\n       ISREDIT LINE_AFTER 1 = MASKLINE\n\n       ISREDIT (LINEPTR) = LINENUM .ZCSR\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&L3\"\n       ISREDIT LINE_AFTER 2 = MASKLINE\n\n       ISREDIT (LINEPTR) = LINENUM .ZCSR\n       SET &LINEPTR = .ZLAST\n       ISREDIT MASKLINE = \"&L4\"\n       ISREDIT LINE_AFTER 3 = MASKLINE\nERROROUT:+\n       ISREDIT MASKLINE = ' '\n      SET RC = 0\n  END\n  END\n  EXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STEDITY": {"ttr": 5896, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x01\\x06\\x00\\xd0\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 262, "newlines": 208, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO                                                           0000000\n                         /* ANOTHER FINE EDIT MACRO */\n                             /* BROUGHT TO YOU */\n                        /* BY YOUR TECHNICAL SUPPORT */\n                                  /* STAFF */\n  ISPEXEC VGET TARGETDD PROFILE\n  ISREDIT EXCLUDE ALL                                                   0000000\n  ISREDIT LINE_AFTER .ZLAST = '> OUTPUT FROM TSO COMMAND : &CMDNAME <'  0000000\n  CONTROL ASIS\n  SET &I = 1                                                            0000000\n  SET &SYSOUTTRAP = 400                                                 0000000\n  TSOEXEC LISTA ST                                                      0000000\n  SET &BOT = &SYSOUTLINE                                                0000000\n  DO WHILE &BOT >= &I                                                   0000000\n     SET &TEMP = &&SYSOUTLINE&I                                         0000000\n     ISREDIT LINE_AFTER .ZLAST = \"&TEMP\"                                0000000\n     SET &I = &I + 1                                                    0000000\n  END                                                                   0000000\n      ISPEXEC VPUT (DSN1 DSN2 DSN3 DSN4 DSN5 +\n            DSN6 DSN7 DSN8 DSN9 DSN10 DSN11 DSN12) SHARED\n  SET LEN1 = &LENGTH(&TARGETDD)\n  ISREDIT (I)  = LINENUM .ZF\n  ISREDIT (LR)  = LINENUM .ZL\n  ISREDIT (LB,RB) = BOUNDS\n  ISREDIT C '           ' '' 1 ALL\n  ISREDIT C '  ' '$$' 1 ALL\n  DO WHILE (&I <= &LR)\n    ISREDIT (RECX) = LINE &I\n    IF &SUBSTR(3:&LEN1+3,&STR(&RECX)) = &STR(&TARGETDD) THEN DO\n    SET I = &I - 1\n    GOTO REALCODE\n    END\n    SET RECB = &STR(&RECX)\n    SET I = &I + 1\n  END\nREALCODE: +\nSET &INDX = 1\n    ISREDIT (RECX&INDX) = LINE &I\n    SET DSN1    = &STR(&RECB)\n    ISPEXEC VPUT (DSN1) SHARED\nSET &I = &I +2\nDO WHILE (&I <   &LR)\n    ISREDIT (RECX) = LINE &I\n    IF &SUBSTR(1:2,&STR(&RECX)) = &STR($$) THEN DO\n    GOTO PUTIT\n    END\n\n    IF &SUBSTR(1:4,&STR(&RECX)) = &STR(KEEP) THEN GOTO NOGO\n    SET &INDX = &INDX + 1\n    ISREDIT (RECX&INDX) = LINE &I\n    SET DSN&INDX = &STR(&RECX&INDX)\n    ISPEXEC VPUT (DSN&INDX) SHARED\nNOGO: +\n    SET &I = &I + 1\n     END\nPUTIT: +\n    SET DSN&INDX =\n    ISPEXEC VPUT (DSN&INDX) SHARED\n     IF &DEBUG = DEBUG THEN DO\n     GOTO PREDISPL\n     END\n     CONTROL CAPS NOFLUSH   MSG\nPREDISPL: ISPEXEC VGET (DSN1 DSN2 DSN3 DSN4 DSN5 +\n            DSN6 DSN7 DSN8 DSN9 DSN10 DSN11 DSN12) SHARED\nDISPLAY: ISPEXEC DISPLAY PANEL(FMEMD02) CURSOR(&CURPOS)\n      IF &LASTCC = 8 THEN GOTO FINIS\nCOMMANDS: +\n ISPEXEC VGET HAVECMD PROFILE\n   IF &HAVECMD \u00ac=  THEN DO\n     IF &MEM \u00ac= THEN DO\n       SET &DOMEM =&STR((&STR(&MEM)&STR())\n        END\n   ISPEXEC VGET (WKDSN,WKCMD) PROFILE\n      IF &SUBSTR(1:1,&WKCMD) = E THEN DO\n    ISPEXEC EDIT DATASET('&WKDSN&DOMEM')\n    END\n      IF &SUBSTR(1:1,&WKCMD) = B THEN DO\n    ISPEXEC BROWSE DATASET('&WKDSN&DOMEM')\n    END\n      IF &SUBSTR(1:1,&WKCMD) = P THEN DO\n    PDS '&WKDSN'\n    END\n      IF &SUBSTR(1:1,&WKCMD) = F THEN DO\n            FREE DSNAME('&WKDSN&DOMEM')  KEEP\n    END\n    SET &DOMEM =\n    GOTO DISPLAY\n    END\n      SET &SYSDVAL = &STR()\n      READDVAL FM1 FM2 FM3 FM4 FM5 +\n          FM6 FM7 FM8 FM9 FM10 FM11 FM12\n      ISPEXEC VPUT (DSN1 DSN2 DSN3 DSN4 DSN5 +\n            DSN6 DSN7 DSN8 DSN9 DSN10 DSN11 DSN12) SHARED\n   IF &DSN1  \u00ac= THEN DO\n   LISTDSI '&DSN1'\n   SET &BS1  = &SYSBLKSIZE\n   END\n   IF &DSN2  \u00ac= THEN DO\n   LISTDSI '&DSN2'\n   SET &BS2  = &SYSBLKSIZE\n   END\n   IF &DSN3  \u00ac= THEN DO\n   LISTDSI '&DSN3'\n   SET &BS3  = &SYSBLKSIZE\n   END\n   IF &DSN4  \u00ac= THEN DO\n   LISTDSI '&DSN4'\n   SET &BS4  = &SYSBLKSIZE\n   END\n   IF &DSN5  \u00ac= THEN DO\n   LISTDSI '&DSN5'\n   SET &BS5  = &SYSBLKSIZE\n   END\n   IF &DSN6  \u00ac= THEN DO\n   LISTDSI '&DSN6'\n   SET &BS6  = &SYSBLKSIZE\n   END\n   IF &DSN7  \u00ac= THEN DO\n   LISTDSI '&DSN7'\n   SET &BS7  = &SYSBLKSIZE\n   END\n   IF &DSN8  \u00ac= THEN DO\n   LISTDSI '&DSN8'\n   SET &BS8  = &SYSBLKSIZE\n   END\n   IF &DSN9  \u00ac= THEN DO\n   LISTDSI '&DSN9'\n   SET &BS9  = &SYSBLKSIZE\n   END\n   IF &DSN10 \u00ac= THEN DO\n   LISTDSI '&DSN10'\n   SET &BS10 = &SYSBLKSIZE\n   END\n   IF &DSN11 \u00ac= THEN DO\n   LISTDSI '&DSN11'\n   SET &BS11 = &SYSBLKSIZE\n   END\n   IF &DSN12 \u00ac= THEN DO\n   LISTDSI '&DSN12'\n   SET &BS12 = &SYSBLKSIZE\n   END\n    SET &CURPOS = MEM\n\n      SET &FOUND = &STR(NOO)\n      SET &DNUM = 0\nDO WHILE &DNUM < 12\n SET &DNUM = &DNUM + 1\n SET &CURDSN = &STR(&&DSN&DNUM)\n SET &DLEN = &LENGTH(&CURDSN)\n IF &DLEN > 0 THEN DO\n       SET &PDSNAME = &CURDSN\n\n     LISTDSI '&PDSNAME' NODIRECTORY\n     SET &LISTDSI_RC = &LASTCC\n     IF  &LISTDSI_RC \u00ac= 0 THEN DO\n      SET &CURPOS = &DSN&DNUM\n      SET ZEDSMSG = &STR(INVALID NAME)\n      SET ZEDLMSG = &STR(TSO DATA SET &PDSNAME IS NOT A +\n              CATALOGED DATA SET NAME)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      GOTO DISPLAY\n      END\n     IF &SYSDSORG \u00ac= PO THEN DO\n      SET &CURPOS = &DSN&DNUM\n      SET ZEDSMSG = &STR(NOT A PDS)\n      SET ZEDLMSG = &STR(TSO DATA SET &PDSNAME IS NOT A +\n              PARTITIONED DATA SET NAME)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      GOTO DISPLAY\n      END\n     SET &DLEN =&LENGTH(&MEM)\n     FREE DD(PDSFILE)\n     SET &FCC = &LASTCC\n     ALLOC DDNAME(PDSFILE) DA('&PDSNAME') SHR REUS\n     SET &FCC = &LASTCC\n     IF &FCC > 0 THEN DO\n      WRITE RC &FCC FOR ALLOC OF &PDSNAME - TYPE END OR HIT ENTER\n      READ ANS\n     IF &ANS = &STR(END) THEN DO\n      SET &CURPOS = DSN&DNUM\n      SET ZEDSMSG = &STR(COULD NOT ALLOC)\n      SET ZEDLMSG = &STR(DATA SET COULD NOT BE NOT +\n              BE ALLOCATED)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      GOTO DISPLAY\n      END\n     END\n   ISPEXEC LMINIT DATAID(INP) DDNAME(PDSFILE) ENQ(SHR)\n    SET LMCC = &LASTCC\n    IF LMCC > 0 THEN DO\n      WRITE RC &LMCC FOR LMINIT- TYPE END OR HIT ENTER\n      READ ANS\n     IF &ANS = &STR(END) THEN DO\n      SET &CURPOS = DSN&DNUM\n      SET ZEDSMSG = &STR(COULD NOT ALLOC)\n      SET ZEDLMSG = &STR(DATA SET COULD NOT BE NOT +\n              BE INITIALIZED)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      GOTO GETOUT\n      END\n     END\n   ISPEXEC LMOPEN DATAID(&INP) OPTION(INPUT)\n    SET LMCC = &LASTCC\n    IF LMCC > 0 THEN DO\n      WRITE RC &LMCC FOR LMINIT- TYPE END OR HIT ENTER\n      READ ANS\n     IF &ANS = &STR(END) THEN DO\n      SET &CURPOS = DSN&DNUM\n      SET ZEDSMSG = &STR(COULD NOT ALLOC)\n      SET ZEDLMSG = &STR(DATA SET COULD NOT BE NOT +\n              BE INITIALIZED)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      GOTO GETOUT\n      END\n     END\n    SET &INMEMB = &MEM\n    ISPEXEC LMMFIND DATAID(&INP) MEMBER(&INMEMB)\n    SET LMCC = &LASTCC\n   IF &LMCC = 0 THEN DO\n      SET &CURPOS = DSN&DNUM\n      SET &FM&DNUM = &STR(===>)\n      SET &FOUND = &STR(YES)\n      SET ZEDSMSG = &STR(&MEM FOUND)\n      SET ZEDLMSG = &STR(MEMBER &MEM FOUND IN &PDSNAME)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      IF &SEARCH \u00ac= &STR(ALL) THEN SET &DNUM = 12\n      END\n     ISPEXEC LMCLOSE DATAID(&INP)\n     SET &LMCC = &LASTCC\n     ISPEXEC LMFREE DATAID(&INP)\n     SET &LMCC = &LASTCC\n     FREE DDNAME(PDSFILE)\n     SET &FCC = &LASTCC\n   END\n  END\n    IF &FOUND \u00ac= &STR(YES) THEN DO\n      SET ZEDSMSG = &STR(&MEM NOT FOUND)\n      SET ZEDLMSG = &STR(MEMBER &MEM NOTFOUND IN CONCATENATION)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      GOTO PREDISPL\n    END\n  ELSE DO\n      SET ZEDSMSG = &STR(&MEM FOUND)\n      SET ZEDLMSG = &STR(MEMBER &MEM FOUND IN &PDSNAME)\n      ISPEXEC SETMSG MSG(ISRZ001)\n    GOTO DISPLAY\n   END\n MSG: WRITE FINDMEM COMPLETE\n ISPEXEC CONTROL DISPLAY REFRESH\n  GOTO PREDISPL\n FINIS: +\n     ISREDIT CANCEL\n     EXIT\n GETOUT +\n     ISPEXEC LMCLOSE DATAID(&INP)\n     SET &LMCC = &LASTCC\n     ISPEXEC LMFREE DATAID(&INP)\n     SET &LMCC = &LASTCC\n     FREE DDNAME(PDSFILE)\n     SET &FCC = &LASTCC\n  EXIT\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STEDIT2": {"ttr": 6145, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\xd2\\x00\\xd2\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 210, "newlines": 210, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO                                                           0000000\n                         /* ANOTHER FINE EDIT MACRO */\n                             /* BROUGHT TO YOU */\n                        /* BY YOUR TECHNICAL SUPPORT */\n                                  /* STAFF */\n  ISPEXEC VGET TARGETDD PROFILE\n  ISREDIT EXCLUDE ALL                                                   0000000\n  ISREDIT LINE_AFTER .ZLAST = '> OUTPUT FROM TSO COMMAND : &CMDNAME <'  0000000\n  CONTROL ASIS                                                          0000000\n  SET &I = 1                                                            0000000\n  SET &SYSOUTTRAP = 400                                                 0000000\n  TSOEXEC LISTA ST                                                      0000000\n  SET &BOT = &SYSOUTLINE                                                0000000\n  DO WHILE &BOT >= &I                                                   0000000\n     SET &TEMP = &&SYSOUTLINE&I                                         0000000\n     ISREDIT LINE_AFTER .ZLAST = \"&TEMP\"                                0000000\n     SET &I = &I + 1                                                    0000000\n  END                                                                   0000000\n      ISPEXEC VPUT (DSN1 DSN2 DSN3 DSN4 DSN5 +\n            DSN6 DSN7 DSN8 DSN9 DSN10 DSN11 DSN12) SHARED\n  SET LEN1 = &LENGTH(&TARGETDD)\n  ISREDIT (I)  = LINENUM .ZF\n  ISREDIT (LR)  = LINENUM .ZL\n  ISREDIT (LB,RB) = BOUNDS\n  ISREDIT C '           ' '' 1 ALL\n  ISREDIT C '  ' '$$' 1 ALL\n  DO WHILE (&I <= &LR)\n    ISREDIT (RECX) = LINE &I\n    IF &SUBSTR(3:&LEN1+3,&STR(&RECX)) = &STR(&TARGETDD) THEN DO\n    SET I = &I - 1\n    GOTO REALCODE\n    END\n    SET RECB = &STR(&RECX)\n    SET I = &I + 1\n  END\nREALCODE: +\nSET &INDX = 1\n    ISREDIT (RECX&INDX) = LINE &I\n    SET DSN1    = &STR(&RECB)\n    ISPEXEC VPUT (DSN1) SHARED\n    CONTROL NOLIST NOCON NOSYM\nSET &I = &I +2\nDO WHILE (&I <   &LR)\n    ISREDIT (RECX) = LINE &I\n    IF &SUBSTR(1:2,&STR(&RECX)) = &STR($$) THEN DO\n    GOTO PUTIT\n    END\n\n    IF &SUBSTR(1:4,&STR(&RECX)) = &STR(KEEP) THEN GOTO NOGO\n/*  CONTROL LIST CON SYM\n    SET &INDX = &INDX + 1\n    ISREDIT (RECX&INDX) = LINE &I\n    SET DSN&INDX = &STR(&RECX&INDX)\n    ISPEXEC VPUT (DSN&INDX) SHARED\nNOGO: +\n    SET &I = &I + 1\n     END\n    CONTROL NOLIST NOCON NOSYM\nPUTIT: +\n    SET DSN&INDX =\n    ISPEXEC VPUT (DSN&INDX) SHARED\n     IF &DEBUG = DEBUG THEN DO\n     GOTO PREDISPL\n     END\n     CONTROL CAPS NOFLUSH NOMSG\nPREDISPL: ISPEXEC VGET (DSN1 DSN2 DSN3 DSN4 DSN5 +\n            DSN6 DSN7 DSN8 DSN9 DSN10 DSN11 DSN12 MEM) SHARED\n\n    SET &CURPOS = MEM\nDISPLAY: ISPEXEC DISPLAY PANEL(FMEMD01) CURSOR(&CURPOS)\n      IF &LASTCC = 8 THEN GOTO FINIS\n      SET &SYSDVAL = &STR()\n      READDVAL FMEM1 FMEM2 FMEM3 FMEM4 FMEM5 +\n          FMEM6 FMEM7 FMEM8 FMEM9 FMEM10 FMEM11 FMEM12\n      ISPEXEC VPUT (DSN1 DSN2 DSN3 DSN4 DSN5 +\n            DSN6 DSN7 DSN8 DSN9 DSN10 DSN11 DSN12) SHARED\n\n      SET &FOUND = &STR(NOO)\n      SET &DNUM = 0\nDO WHILE &DNUM < 12\n SET &DNUM = &DNUM + 1\n SET &CURDSN = &STR(&&DSN&DNUM)\n SET &DLEN = &LENGTH(&CURDSN)\n IF &DLEN > 0 THEN DO\n       SET &PDSNAME = &CURDSN\n\n     LISTDSI '&PDSNAME' NODIRECTORY\n     SET &LISTDSI_RC = &LASTCC\n     IF  &LISTDSI_RC \u00ac= 0 THEN DO\n      SET &CURPOS = &DSN&DNUM\n      SET ZEDSMSG = &STR(INVALID NAME)\n      SET ZEDLMSG = &STR(TSO DATA SET &PDSNAME IS NOT A +\n              CATALOGED DATA SET NAME)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      GOTO DISPLAY\n      END\n     IF &SYSDSORG \u00ac= PO THEN DO\n      SET &CURPOS = &DSN&DNUM\n      SET ZEDSMSG = &STR(NOT A PDS)\n      SET ZEDLMSG = &STR(TSO DATA SET &PDSNAME IS NOT A +\n              PARTITIONED DATA SET NAME)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      GOTO DISPLAY\n      END\n     SET &DLEN =&LENGTH(&MEM)\n     FREE DD(PDSFILE)\n     SET &FCC = &LASTCC\n     ALLOC DDNAME(PDSFILE) DA('&PDSNAME') SHR REUS\n     SET &FCC = &LASTCC\n     IF &FCC > 0 THEN DO\n      WRITE RC &FCC FOR ALLOC OF &PDSNAME - TYPE END OR HIT ENTER\n      READ ANS\n     IF &ANS = &STR(END) THEN DO\n      SET &CURPOS = DSN&DNUM\n      SET ZEDSMSG = &STR(COULD NOT ALLOC)\n      SET ZEDLMSG = &STR(DATA SET COULD NOT BE NOT +\n              BE ALLOCATED)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      GOTO DISPLAY\n      END\n     END\n   ISPEXEC LMINIT DATAID(INP) DDNAME(PDSFILE) ENQ(SHR)\n    SET LMCC = &LASTCC\n    IF LMCC > 0 THEN DO\n      WRITE RC &LMCC FOR LMINIT- TYPE END OR HIT ENTER\n      READ ANS\n     IF &ANS = &STR(END) THEN DO\n      SET &CURPOS = DSN&DNUM\n      SET ZEDSMSG = &STR(COULD NOT ALLOC)\n      SET ZEDLMSG = &STR(DATA SET COULD NOT BE NOT +\n              BE INITIALIZED)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      GOTO GETOUT\n      END\n     END\n   ISPEXEC LMOPEN DATAID(&INP) OPTION(INPUT)\n    SET LMCC = &LASTCC\n    IF LMCC > 0 THEN DO\n      WRITE RC &LMCC FOR LMINIT- TYPE END OR HIT ENTER\n      READ ANS\n     IF &ANS = &STR(END) THEN DO\n      SET &CURPOS = DSN&DNUM\n      SET ZEDSMSG = &STR(COULD NOT ALLOC)\n      SET ZEDLMSG = &STR(DATA SET COULD NOT BE NOT +\n              BE INITIALIZED)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      GOTO GETOUT\n      END\n     END\nCOMMANDS: +\n ISPEXEC VGET HAVECMD PROFILE\n   IF &HAVECMD \u00ac=  THEN DO\n   ISPEXEC VGET (WKDSN,WKCMD) PROFILE\n      IF &SUBSTR(1:1,&WKCMD) = E THEN DO\n    ISPEXEC EDIT DATASET(&DSN&WKDSN)\n    END\n      IF &SUBSTR(1:1,&WKCMD) = B THEN DO\n    ISPEXEC BROWSE DATASET(&DSN&WKDSN)\n    END\n      IF &SUBSTR(1:1,&WKCMD) = P THEN DO\n    PDS '&DSN&WKDSN'\n    END\n    END\n    SET &INMEMB = &MEM\n    ISPEXEC LMMFIND DATAID(&INP) MEMBER(&INMEMB)\n    SET LMCC = &LASTCC\n   IF &LMCC = 0 THEN DO\n      SET &CURPOS = DSN&DNUM\n      SET &FMEM&DNUM = &STR(====>)\n      SET &FOUND = &STR(YES)\n      SET ZEDSMSG = &STR(&MEM FOUND)\n      SET ZEDLMSG = &STR(MEMBER &MEM FOUND IN &PDSNAME)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      IF &SEARCH \u00ac= &STR(ALL) THEN SET &DNUM = 12\n      END\n     ISPEXEC LMCLOSE DATAID(&INP)\n     SET &LMCC = &LASTCC\n     ISPEXEC LMFREE DATAID(&INP)\n     SET &LMCC = &LASTCC\n     FREE DDNAME(PDSFILE)\n     SET &FCC = &LASTCC\n   END\n  END\n    IF &FOUND \u00ac= &STR(YES) THEN DO\n      SET ZEDSMSG = &STR(&MEM NOT FOUND)\n      SET ZEDLMSG = &STR(MEMBER &MEM NOTFOUND IN CONCATENATION)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      GOTO PREDISPL\n    END\n  ELSE DO\n      SET ZEDSMSG = &STR(&MEM FOUND)\n      SET ZEDLMSG = &STR(MEMBER &MEM FOUND IN &PDSNAME)\n      ISPEXEC SETMSG MSG(ISRZ001)\n    GOTO DISPLAY\n   END\n MSG: WRITE FINDMEM COMPLETE\n ISPEXEC CONTROL DISPLAY REFRESH\n  GOTO PREDISPL\n FINIS: +\n     ISREDIT CANCEL\n     EXIT\n GETOUT +\n     ISPEXEC LMCLOSE DATAID(&INP)\n     SET &LMCC = &LASTCC\n     ISPEXEC LMFREE DATAID(&INP)\n     SET &LMCC = &LASTCC\n     FREE DDNAME(PDSFILE)\n     SET &FCC = &LASTCC\n  EXIT\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SUM": {"ttr": 6149, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\xe7\\x00\\xe7\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 231, "newlines": 231, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (TYPE,FIRST,LAST)\n IF &STR(&TYPE) = ? THEN DO\n ISPEXEC DISPLAY PANEL(SUM)\n EXIT\n END\n/*\n/*       DATASET:  H562813.PVTLIB.MACSOUT(SUM)\n/*        AUTHOR:  ANDREW CALL\n/*      MODIFIED:  CHANGED FROM 255 VB TO 80 FB  PAUL G. DAVIS\n/*                 CHANGED TO HANDLE UP TO 3 DECIMAL PLACES\n/*     DATE/TIME:  09/11/86     86.254     13:34\n/*\n/*   DESCRIPTION:  EDIT MACRO TO SUM A COLUMN OF NUMBERS\n/*\n/* CONTROL LIST CONLIST SYMLIST\n/*\n\nSETUP:    ISREDIT (START) = LINENUM .ZFIRST\n          ISREDIT (END)   = LINENUM .ZLAST\n          SET &TOTAL   = 0\n          SET &VALID   = 0\n          SET &INVALID = 0\n          IF &DATATYPE(&TYPE) = &STR(NUM) THEN +\n             DO\n                    SET &LAST  = &FIRST\n                    SET &FIRST = &TYPE\n                    SET &TYPE  = &STR(ALL)\n             END\n\nCHECK:    IF &DATATYPE(&FIRST) = &STR(NUM) THEN\n          ELSE DO\n                      SET &ZEDSMSG = &STR(START NOT NUMERIC)\n                      SET &ZEDLMSG = &STR(START COLUMN NUMBER IS NOT NUMERIC)\n                      ISPEXEC SETMSG MSG(ISRZ001)\n                      EXIT CODE(20)\n               END\n          IF &DATATYPE(&LAST) = &STR(NUM) THEN\n          ELSE DO\n                      SET &ZEDSMSG = &STR(END NOT NUMERIC)\n                      SET &ZEDLMSG = &STR(ENDING COLUMN NUMBER IS NOT NUMERIC)\n                      ISPEXEC SETMSG MSG(ISRZ001)\n                      EXIT CODE(20)\n               END\n          IF &TYPE = &STR(X)    THEN GOTO DOX\n          IF &TYPE = &STR(NX)   THEN GOTO DONX\n          IF &TYPE = &STR(ALL)  THEN GOTO DOALL\n          SET &ZEDSMSG = &STR(TYPE IS INVALID)\n          SET &ZEDLMSG = &STR(TYPE OF LINES MUST BE 'X', 'NX', OR 'ALL')\n          ISPEXEC SETMSG MSG(ISRZ001)\n          EXIT CODE(20)\n\nDOX:      DO WHILE &START LE &END\n                ISREDIT (STATUS) = XSTATUS &START\n                IF &STATUS = &STR(X) THEN +\n                   DO\n                           ISREDIT (DATALINE) = LINE &START\n                           SET &HOLDER = &SUBSTR(&FIRST:&LAST,&DATALINE)\n                           SET &HOLDER = &HOLDER\n                           SET &X = &STR(&HOLDER)\n                           IF &X = THEN GOTO BAD1\n                           SET &L3 =1\n                           SET L1 = &LENGTH(&X)\n                           SET &L3 = &L1\n                           DO WHILE &L3 >= 1\n                           SET &TMP = &SUBSTR(&L3:&L3,&STR(&X))\n                           IF &STR(&TMP) = &STR(.) THEN GOTO SIZEX\n                           SET &L3 = &L3 -1\n                           END\nSIZEX: +\n                           SET &L2 =1\n                           SET L1 = &LENGTH(&X)\n                           DO WHILE &L2 LE &L1\n                           SET &TMP = &SUBSTR(&L2:&L2,&STR(&X))\n     IF &TMP NE &STR(,) AND &TMP NE &STR(.)  AND &TMP NE &STR(') THEN +\n                           SET &NUM = &NUM&TMP\n                           SET &L2 = &L2 + 1\n                           END\n                           SET &HOLDER = &NUM\n                           SET &NUM =\nBAD1:                      IF &DATATYPE(&HOLDER) = &STR(NUM) THEN +\n                              DO\n                                    SET &TOTAL  = &TOTAL + &HOLDER\n                                    SET &VALID  = &VALID + 1\n                                       SET &L4 = &L1 - &L3\n                                       IF &L4 > &L5 THEN SET &L5 = &L4\n                                       SET &L3 = &L5\n                              END\n                           ELSE SET &INVALID = &INVALID + 1\n                   END\n                SET &START = &START + 1\n          END\n                          SET &TI = 1\n          IF &L3 = 3 THEN SET &TI = 1000\n          IF &L3 = 2 THEN SET &TI = 100\n          IF &L3 = 1 THEN SET &TI = 10\n          SET &T1 = &TOTAL / &TI\n          SET &T2 = &TOTAL - &T1 * &TI\n          IF &T2 = 0 THEN SET &T2 = &STR(0)\n          IF &T2 < 10 AND &L3 = 2 THEN SET &T2 = &STR(0)&T2\n          IF &T2 < 10 AND &L3 = 3 THEN SET &T2 = &STR(0)&STR(0)&T2\n          SET &TOTAL = &STR(&T1&STR(.)&T2)\n          SET &ZEDSMSG = &STR(SUM:  &TOTAL)\n          SET &ZEDLMSG = &STR(THE SUM OF+\n          '&TYPE' NUMBERS IN COLUMNS &FIRST TO &LAST IS:  &TOTAL)\n          ISPEXEC SETMSG MSG(ISRZ001)\n          ISREDIT LINE_BEFORE 1 = NOTELINE +\n          'SUM OF NUMBERS IN COLUMNS &FIRST TO &LAST IS &TOTAL'\n          ISREDIT LINE_BEFORE 1 = NOTELINE +\n          '       PROCESSED &VALID VALID AND &INVALID INVALID LINES'\n          ISREDIT LINE_BEFORE 1 = NOTELINE ' '\n          EXIT CODE(0)\n\nDONX:     DO WHILE &START LE &END\n                ISREDIT (STATUS) = XSTATUS &START\n                IF &STATUS = &STR(NX) THEN +\n                   DO\n                           ISREDIT (DATALINE) = LINE &START\n                           SET &HOLDER = &SUBSTR(&FIRST:&LAST,&DATALINE)\n                           SET &HOLDER = &HOLDER\n                           SET &X = &STR(&HOLDER)\n                           IF &X = THEN GOTO BAD2\n                           SET &L3 =1\n                           SET L1 = &LENGTH(&X)\n                           IF &L1 = 0 THEN GOTO CK1\n                           SET &L3 = &L1\n                           DO WHILE &L3 >= 1\n                           SET &TMP = &SUBSTR(&L3:&L3,&STR(&X))\n                           IF &STR(&TMP) = &STR(.) THEN GOTO SIZE\n                           SET &L3 = &L3 -1\n                           END\nSIZE: +\n                           SET &L2 =1\n                           SET L1 = &LENGTH(&X)\n                           DO WHILE &L2 LE &L1\n                           SET &TMP = &SUBSTR(&L2:&L2,&STR(&X))\n     IF &TMP NE &STR(,) AND &TMP NE &STR(.)  AND &TMP NE &STR(') THEN +\n                           SET &NUM = &NUM&TMP\n                           SET &L2 = &L2 + 1\n                           END\nCK1:                       SET &HOLDER = &NUM\n                           SET &NUM =\nBAD2:                      IF &DATATYPE(&HOLDER) = &STR(NUM) THEN +\n                              DO\n                                    SET &TOTAL  = &TOTAL + &HOLDER\n                                    SET &VALID  = &VALID + 1\n                                       SET &L4 = &L1 - &L3\n                                       IF &L4 > &L5 THEN SET &L5 = &L4\n                                       SET &L3 = &L5\n                              END\n                           ELSE SET &INVALID = &INVALID + 1\n                   END\n                SET &START = &START + 1\n          END\n                          SET &TI = 1\n          IF &L3 = 3 THEN SET &TI = 1000\n          IF &L3 = 2 THEN SET &TI = 100\n          IF &L3 = 1 THEN SET &TI = 10\n          SET &T1 = &TOTAL / &TI\n          SET &T2 = &TOTAL - &T1 * &TI\n          IF &T2 = 0 THEN SET &T2 = &STR(0)\n          IF &T2 < 10 AND &L3 = 2 THEN SET &T2 = &STR(0)&T2\n          IF &T2 < 10 AND &L3 = 3 THEN SET &T2 = &STR(0)&STR(0)&T2\n          SET &TOTAL = &STR(&T1&STR(.)&T2)\n          SET &ZEDSMSG = &STR(SUM:  &TOTAL)\n          SET &ZEDLMSG = &STR(THE SUM OF '&TYPE+\n          ' NUMBERS IN COLUMNS &FIRST TO &LAST+\n          IS:  &TOTAL)\n          ISREDIT LINE_BEFORE 1 = NOTELINE 'SUM +\n          OF NUMBERS IN COLUMNS &FIRST TO &LAST IS &TOTAL'\n          ISREDIT LINE_BEFORE 1 = NOTELINE '    +\n          PROCESSED &VALID VALID AND &INVALID INVALID LINES'\n          ISREDIT LINE_BEFORE 1 = NOTELINE ' '\n          ISPEXEC SETMSG MSG(ISRZ001)\n          EXIT CODE(0)\n\nDOALL:    DO WHILE &START LE &END\n                ISREDIT (DATALINE) = LINE &START\n                SET &HOLDER = &SUBSTR(&FIRST:&LAST,&DATALINE)\n                SET &HOLDER = &HOLDER\n                           SET &X = &STR(&HOLDER)\n                           IF &X = THEN GOTO BAD3\n                           SET &L3 =1\n                           SET L1 = &LENGTH(&X)\n                           SET &L3 = &L1\n                           DO WHILE &L3 >= 1\n                           SET &TMP = &SUBSTR(&L3:&L3,&STR(&X))\n                           IF &STR(&TMP) = &STR(.) THEN GOTO SIZEALL\n                           SET &L3 = &L3 -1\n                           END\nSIZEALL: +\n                           SET &L2 =1\n                           SET L1 = &LENGTH(&X)\n                           DO WHILE &L2 LE &L1\n                           SET &TMP = &SUBSTR(&L2:&L2,&STR(&X))\n     IF &TMP NE &STR(,) AND &TMP NE &STR(.)  AND &TMP NE &STR(') THEN +\n                           SET &NUM = &NUM&TMP\n                           SET &L2 = &L2 + 1\n                           END\n                           SET &HOLDER = &NUM\n                           SET &NUM =\nBAD3:           IF &DATATYPE(&HOLDER) = &STR(NUM) THEN +\n                   DO\n                         SET &TOTAL  = &TOTAL + &HOLDER\n                         SET &VALID  = &VALID + 1\n                                       SET &L4 = &L1 - &L3\n                                       IF &L4 > &L5 THEN SET &L5 = &L4\n                                       SET &L3 = &L5\n                   END\n                ELSE SET &INVALID = &INVALID + 1\n                SET &START  = &START + 1\n          END\n                          SET &TI = 1\n          IF &L3 = 3 THEN SET &TI = 1000\n          IF &L3 = 2 THEN SET &TI = 100\n          IF &L3 = 1 THEN SET &TI = 10\n          SET &T1 = &TOTAL / &TI\n          SET &T2 = &TOTAL - &T1 * &TI\n          IF &T2 = 0 THEN SET &T2 = &STR(0)\n          IF &T2 < 10 AND &L3 = 2 THEN SET &T2 = &STR(0)&T2\n          IF &T2 < 10 AND &L3 = 3 THEN SET &T2 = &STR(0)&STR(0)&T2\n          SET &TOTAL = &STR(&T1&STR(.)&T2)\n          SET &ZEDSMSG = &STR(SUM:  &TOTAL)\n          SET &ZEDLMSG = &STR(THE SUM OF '&TYPE' +\n          NUMBERS IN COLUMNS &FIRST TO &LAST IS:  &TOTAL)\n          ISREDIT LINE_BEFORE 1 = NOTELINE 'SUM OF +\n          NUMBERS IN COLUMNS &FIRST TO &LAST IS &TOTAL'\n          ISREDIT LINE_BEFORE 1 = NOTELINE ' +\n          PROCESSED &VALID VALID AND &INVALID INVALID LINES'\n          ISREDIT LINE_BEFORE 1 = NOTELINE ' '\n          ISPEXEC SETMSG MSG(ISRZ001)\n          EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "T": {"ttr": 6154, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\t\\x00\\t\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP)\n  IF &STR(&HELP) = ? THEN +\n    DO\n      ISPEXEC DISPLAY PANEL(T)\n      EXIT CODE(12)\n    END\n     SET ZEDSMSG = &STR(&SYSTIME &SYSDATE)\n     ISPEXEC SETMSG MSG(ISRZ001)\n     EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TABLBLD": {"ttr": 6156, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00-\\x00-\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "EDITMAC"}, "text": "PROC 0  WNW(WRITE) DEBUG\nCONTROL NOMSG\nIF &DEBUG = DEBUG  THEN +\nCONTROL LIST SYMLIST CONLIST\nSET &RCODE=0\nSET &MSG =&STR()\n ISPEXEC CONTROL ERRORS RETURN\n   FREE FI(INFILE)\n/**********************************************************************\n/* THIS CLIST BUILDS A EDIT MACRO TABLE USING THE $DESCRPT MEMBER     *\n/* FROM THE EDIT MACRO DISTRIBUTION PDS.  UPDATES CAN BE MADE TO THE  *\n/* TABLE USING THE MACLIST EDIT MACRO FOUND IN THE SAME PDS.  BEFORE  *\n/* THIS CLIST CAN BE RUN, THE ALLOC STATEMENT BELOW MUST BE CHANGED   *\n/* TO REFLECT THE NAME OF THE PDS ON YOUR SYSTEM.                     *\n/*           CHANGE                                                   *\n/*       \\/------------\\/                                             *\n ALLOC DA(PVTLIB.MACSOUT($DESCRPT)) F(INFILE) SHR\n/*       /\\------------/\\                                             *\n/*           CHANGE                                                   *\n OPENFILE INFILE INPUT\nISPEXEC TBOPEN EDITMACS &WNW\nSET &RCC = &LASTCC\n  IF &RCC = 8 THEN  +\n    DO\n      WRITE THE MASTER MACRO TABLE DOES NOT EXIST WE WILL MAKE ONE\n      SET &WNW= WRITE\n      ISPEXEC TBCREATE EDITMACS NAMES(MACNAME MACDESC) WRITE\n      ISPEXEC TBADD EDITMACS\n      ISPEXEC TBOPEN EDITMACS &WNW\n    END\nGETLOOP: +\nGETFILE INFILE\nIF &LASTCC = 400 THEN GOTO ENDIT\nSET &MACNAME = &SUBSTR(1:8,&STR(&INFILE))\nSET &MACDESC = &SUBSTR(11:79,&STR(&INFILE))\nADDLOOP: +\n    ISPEXEC TBADD EDITMACS\n WRITE &MACNAME &MACDESC\n IF &LASTCC > 4 THEN GOTO ENDIT\nGOTO GETLOOP\nENDIT: +\n   ISPEXEC TBCLOSE EDITMACS\n   CLOSFILE INFILE\n   FREE FI(INFILE)\n   EXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TEXTJOIN": {"ttr": 6158, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP) NOPROCESS\nIF &HELP = ? THEN DO\nISPEXEC DISPLAY PANEL(TEXTJOIN)\nEXIT\nEND\n  ISREDIT (LB,RB) = BOUNDS\n  ISREDIT (ROW,COL) = CURSOR\n     ISREDIT C X'50' X'FA' ALL\n ISREDIT (PART1) = LINE &EVAL(&ROW)\n ISREDIT (PART2) = LINE &EVAL(&ROW +1)\n SET &PART1 = &NRSTR(&PART1)\n SET &PART2 = &NRSTR(&PART2)\n SET &L = &EVAL(&LB)\n SET &R = &EVAL(&RB)\n SET &PARTX = &SUBSTR(&L:&COL,&NRSTR(&PART1))\n SET &PARTY = &SUBSTR(&L:&EVAL(&R-&COL),&NRSTR(&PART2))\n SET &PART1 = &NRSTR(&PARTX)\n SET &PART1A = &NRSTR(&PARTY)\n SET PART1 = &NRSTR(&STR(&PART1)&STR(&PART1A))\n SET &X = &EVAL(&LENGTH(&NRSTR(&PARTY))+1)\n SET &PARTZ = &SUBSTR(&X:&EVAL(&R),&NRSTR(&PART2))\n ISREDIT LINE &EVAL(&ROW) = \"&PART1\"\n IF &STR(&PARTZ) \u00ac= THEN +\n ISREDIT LINE &EVAL(&ROW +1) = \"&PARTZ\"\n IF &STR(&PARTZ) = THEN ISREDIT DELETE &EVAL(&ROW +1)\n     ISREDIT C X'FA' X'50' ALL\n     ISREDIT RESET\n     ISREDIT  CURSOR = &ROW 1\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TJ": {"ttr": 6160, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP) NOPROCESS\nIF &HELP = ? THEN DO\nISPEXEC DISPLAY PANEL(TEXTJOIN)\nEXIT\nEND\n  ISREDIT (LB,RB) = BOUNDS\n  ISREDIT (ROW,COL) = CURSOR\n     ISREDIT C X'50' X'FA' ALL\n ISREDIT (PART1) = LINE &EVAL(&ROW)\n ISREDIT (PART2) = LINE &EVAL(&ROW +1)\n SET &PART1 = &NRSTR(&PART1)\n SET &PART2 = &NRSTR(&PART2)\n SET &L = &EVAL(&LB)\n SET &R = &EVAL(&RB)\n SET &PARTX = &SUBSTR(&L:&COL,&NRSTR(&PART1))\n SET &PARTY = &SUBSTR(&L:&EVAL(&R-&COL),&NRSTR(&PART2))\n SET &PART1 = &NRSTR(&PARTX)\n SET &PART1A = &NRSTR(&PARTY)\n SET PART1 = &NRSTR(&STR(&PART1)&STR(&PART1A))\n SET &X = &EVAL(&LENGTH(&NRSTR(&PARTY))+1)\n SET &PARTZ = &SUBSTR(&X:&EVAL(&R),&NRSTR(&PART2))\n ISREDIT LINE &EVAL(&ROW) = \"&PART1\"\n IF &STR(&PARTZ) \u00ac= THEN +\n ISREDIT LINE &EVAL(&ROW +1) = \"&PARTZ\"\n IF &STR(&PARTZ) = THEN ISREDIT DELETE &EVAL(&ROW +1)\n     ISREDIT C X'FA' X'50' ALL\n     ISREDIT RESET\n     ISREDIT  CURSOR = &ROW 1\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TYPE": {"ttr": 6401, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x02\\x02\\x02\\x02\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 514, "newlines": 514, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP)\n      IF &NRSTR(&HELP) = ? THEN DO\n      ISPEXEC DISPLAY PANEL(TYPE)\n      EXIT\n      END\nISREDIT (ROW,COL) = CURSOR\nIF &NRSTR(&HELP) = &NRSTR(&&) THEN GOTO C47\nIF &NRSTR(&HELP) = &STR(A) THEN GOTO C01\nIF &NRSTR(&HELP) = &STR(B) THEN GOTO C02\nIF &NRSTR(&HELP) = &STR(C) THEN GOTO C03\nIF &NRSTR(&HELP) = &STR(D) THEN GOTO C04\nIF &NRSTR(&HELP) = &STR(E) THEN GOTO C05\nIF &NRSTR(&HELP) = &STR(F) THEN GOTO C06\nIF &NRSTR(&HELP) = &STR(G) THEN GOTO C07\nIF &NRSTR(&HELP) = &STR(H) THEN GOTO C08\nIF &NRSTR(&HELP) = &STR(I) THEN GOTO C09\nIF &NRSTR(&HELP) = &STR(J) THEN GOTO C10\nIF &NRSTR(&HELP) = &STR(K) THEN GOTO C11\nIF &NRSTR(&HELP) = &STR(L) THEN GOTO C12\nIF &NRSTR(&HELP) = &STR(M) THEN GOTO C13\nIF &NRSTR(&HELP) = &STR(N) THEN GOTO C14\nIF &NRSTR(&HELP) = &STR(O) THEN GOTO C15\nIF &NRSTR(&HELP) = &STR(P) THEN GOTO C16\nIF &NRSTR(&HELP) = &STR(Q) THEN GOTO C17\nIF &NRSTR(&HELP) = &STR(R) THEN GOTO C18\nIF &NRSTR(&HELP) = &STR(S) THEN GOTO C19\nIF &NRSTR(&HELP) = &STR(T) THEN GOTO C20\nIF &NRSTR(&HELP) = &STR(U) THEN GOTO C21\nIF &NRSTR(&HELP) = &STR(V) THEN GOTO C22\nIF &NRSTR(&HELP) = &STR(W) THEN GOTO C23\nIF &NRSTR(&HELP) = &STR(X) THEN GOTO C24\nIF &NRSTR(&HELP) = &STR(Y) THEN GOTO C25\nIF &NRSTR(&HELP) = &STR(Z) THEN GOTO C26\nIF &NRSTR(&HELP) = &STR(#) THEN GOTO C27\nIF &NRSTR(&HELP) = &STR(,) THEN GOTO C28\nIF &NRSTR(&HELP) = &STR($) THEN GOTO C29\nIF &NRSTR(&HELP) = &STR(0) THEN GOTO C30\nIF &NRSTR(&HELP) = &STR(1) THEN GOTO C31\nIF &NRSTR(&HELP) = &STR(2) THEN GOTO C32\nIF &NRSTR(&HELP) = &STR(3) THEN GOTO C33\nIF &NRSTR(&HELP) = &STR(4) THEN GOTO C34\nIF &NRSTR(&HELP) = &STR(5) THEN GOTO C35\nIF &NRSTR(&HELP) = &STR(6) THEN GOTO C36\nIF &NRSTR(&HELP) = &STR(7) THEN GOTO C37\nIF &NRSTR(&HELP) = &STR(8) THEN GOTO C38\nIF &NRSTR(&HELP) = &STR(9) THEN GOTO C39\nIF &NRSTR(&HELP) = &STR(@) THEN GOTO C40\nIF &NRSTR(&HELP) = &STR(%) THEN GOTO C41\nIF &NRSTR(&HELP) = &STR(*) THEN GOTO C42\nIF &NRSTR(&HELP) = &STR(/) THEN GOTO C43\nIF &NRSTR(&HELP) = &STR(-) THEN GOTO C44\nIF &NRSTR(&HELP) = &STR(( THEN GOTO C45\nIF &NRSTR(&HELP) = &STR()) THEN GOTO C46\nIF &NRSTR(&HELP) = &STR(*) THEN GOTO C47\nIF &NRSTR(&HELP) = &STR(+) THEN GOTO C48\nIF &NRSTR(&HELP) = &STR(_) THEN GOTO C49\nIF &NRSTR(&HELP) = &STR(\u00a2) THEN GOTO C50\nIF &NRSTR(&HELP) = &STR(|) THEN GOTO C51\nIF &NRSTR(&HELP) = &STR(>) THEN GOTO C52\nIF &NRSTR(&HELP) = &STR(:) THEN GOTO C53\nIF &NRSTR(&HELP) = &STR(;) THEN GOTO C54\nIF &NRSTR(&HELP) = &STR(.) THEN GOTO C55\nIF &NRSTR(&HELP) = &STR(?) THEN GOTO C56\nIF &NRSTR(&HELP) = &STR(\") THEN GOTO C57\nIF &NRSTR(&HELP) = &STR(=) THEN GOTO C58\nIF &NRSTR(&HELP) = &STR(!) THEN GOTO C59\nIF &NRSTR(&HELP) = &STR(<) THEN GOTO C60\nIF &NRSTR(&HELP) = &STR(\u00ac) THEN GOTO C61\nIF &NRSTR(&HELP) = &STR( ) THEN GOTO C62\nC01: +\nISREDIT LINE &ROW           = LINE + < &COL  ' AAA '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'A   A'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'AAAAA'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'A   A'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'A   A'>\nGOTO PROCESS\nC02: +\nISREDIT LINE &ROW           = LINE + < &COL  'BBBB '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'B   B'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'BBBB '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'B   B'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'BBBB '>\nGOTO PROCESS\nC03: +\nISREDIT LINE &ROW           = LINE + < &COL  ' CCCC'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'C    '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'C    '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'C    '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' CCCC'>\nGOTO PROCESS\nC04: +\nISREDIT LINE &ROW           = LINE + < &COL  'DDDD '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'D   D'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'D   D'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'D   D'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'DDDD '>\nGOTO PROCESS\nC05: +\nISREDIT LINE &ROW           = LINE + < &COL  'EEEEE'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'E    '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'EEEE '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'E    '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'EEEEE'>\nGOTO PROCESS\nC06: +\nISREDIT LINE &ROW           = LINE + < &COL  'FFFFF'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'F    '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'FFFF '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'F    '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'F    '>\nGOTO PROCESS\nC07: +\nISREDIT LINE &ROW           = LINE + < &COL  ' GGGG'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'G    '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'G  GG'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'G   G'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' GGGG'>\nGOTO PROCESS\nC08: +\nISREDIT LINE &ROW           = LINE + < &COL  'H   H'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'H   H'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'HHHHH'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'H   H'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'H   H'>\nGOTO PROCESS\nC09: +\nISREDIT LINE &ROW           = LINE + < &COL  ' III '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '  I  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  I  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  I  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' III '>\nGOTO PROCESS\nC10: +\nISREDIT LINE &ROW           = LINE + < &COL  '  JJJ'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '   J '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '   J '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'J  J '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' JJ  '>\nGOTO PROCESS\nC11: +\nISREDIT LINE &ROW           = LINE + < &COL  'K  K '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'K K  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'KK   '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'K K  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'K  K '>\nGOTO PROCESS\nC12: +\nISREDIT LINE &ROW           = LINE + < &COL  'L    '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'L    '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'L    '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'L    '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'LLLLL'>\nGOTO PROCESS\nC13: +\nISREDIT LINE &ROW           = LINE + < &COL  'M   M'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'MM MM'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'M M M'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'M   M'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'M   M'>\nGOTO PROCESS\nC14: +\nISREDIT LINE &ROW           = LINE + < &COL  'N   N'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'NN  N'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'N N N'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'N  NN'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'N   N'>\nGOTO PROCESS\nC15: +\nISREDIT LINE &ROW           = LINE + < &COL  'OOOOO'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'O   O'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'O   O'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'O   O'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'OOOOO'>\nGOTO PROCESS\nC16: +\nISREDIT LINE &ROW           = LINE + < &COL  'PPPP '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'P   P'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'PPPP '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'P    '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'P    '>\nGOTO PROCESS\nC17: +\nISREDIT LINE &ROW           = LINE + < &COL  ' QQQ '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'Q   Q'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'Q Q Q'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'Q  Q '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' QQ Q'>\nGOTO PROCESS\nC18: +\nISREDIT LINE &ROW           = LINE + < &COL  'RRRR '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'R   R'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'RRRR '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'R  R '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'R   R'>\nGOTO PROCESS\nC19: +\nISREDIT LINE &ROW           = LINE + < &COL  ' SSSS'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'S    '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  ' SSS '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '    S'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'SSSS '>\nGOTO PROCESS\nC20: +\nISREDIT LINE &ROW           = LINE + < &COL  'TTTTT'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '  T  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  T  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  T  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '  T  '>\nGOTO PROCESS\nC21: +\nISREDIT LINE &ROW           = LINE + < &COL  'U   U'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'U   U'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'U   U'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'U   U'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' UUU '>\nGOTO PROCESS\nC22: +\nISREDIT LINE &ROW           = LINE + < &COL  'V   V'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'V   V'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'V   V'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  ' V V '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '  V  '>\nGOTO PROCESS\nC23: +\nISREDIT LINE &ROW           = LINE + < &COL  'W   W'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  'W   W'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'W W W'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  'WW WW'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'W   W'>\nGOTO PROCESS\nC24: +\nISREDIT LINE &ROW           = LINE + < &COL  'X   X'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  ' X X '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  X  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  ' X X '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'X   X'>\nGOTO PROCESS\nC25: +\nISREDIT LINE &ROW           = LINE + < &COL  'Y   Y'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  ' Y Y '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  Y  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  Y  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '  Y  '>\nGOTO PROCESS\nC26: +\nISREDIT LINE &ROW           = LINE + < &COL  'ZZZZZ'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '   Z '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  Z  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  ' Z   '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  'ZZZZZ'>\nGOTO PROCESS\nC27: +\nISREDIT LINE &ROW           = LINE + < &COL  ' # # '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '#####'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  ' # # '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '#####'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' # # '>\nGOTO PROCESS\nC28: +\nISREDIT LINE &ROW           = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  ' ,,  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '  ,  '>\nGOTO PROCESS\nC29: +\nISREDIT LINE &ROW           = LINE + < &COL  ' $$$$'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '$ $  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  ' $$$ '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  $ $'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '$$$$ '>\nGOTO PROCESS\nC30: +\nISREDIT LINE &ROW           = LINE + < &COL  ' 000 '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '0   0'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '0   0'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '0   0'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' 000 '>\nGOTO PROCESS\nC31: +\nISREDIT LINE &ROW           = LINE + < &COL  '  1  '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  ' 11  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  1  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  1  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' 111 '>\nGOTO PROCESS\nC32: +\nISREDIT LINE &ROW           = LINE + < &COL  '2222 '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '    2'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '   2 '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  2  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '22222'>\nGOTO PROCESS\nC33: +\nISREDIT LINE &ROW           = LINE + < &COL  '3333 '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '    3'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  ' 333 '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '    3'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '3333 '>\nGOTO PROCESS\nC34: +\nISREDIT LINE &ROW           = LINE + < &COL  '4  4 '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '4  4 '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '44444'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '   4 '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '   4 '>\nGOTO PROCESS\nC35: +\nISREDIT LINE &ROW           = LINE + < &COL  '55555'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '5    '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '5555 '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '    5'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '5555 '>\nGOTO PROCESS\nC36: +\nISREDIT LINE &ROW           = LINE + < &COL  ' 666 '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '6    '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '6666 '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '6   6'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' 666 '>\nGOTO PROCESS\nC37: +\nISREDIT LINE &ROW           = LINE + < &COL  '77777'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '   7 '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  7  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  7  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '  7  '>\nGOTO PROCESS\nC38: +\nISREDIT LINE &ROW           = LINE + < &COL  ' 888 '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '8   8'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  ' 888 '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '8   8'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' 888 '>\nGOTO PROCESS\nC39: +\nISREDIT LINE &ROW           = LINE + < &COL  ' 999 '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '9   9'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  ' 9999'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '    9'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' 999 '>\nGOTO PROCESS\nC40: +\nISREDIT LINE &ROW           = LINE + < &COL  '@@@@ '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '    @'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '@@@ @'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '@ @ @'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '@@@@ '>\nGOTO PROCESS\nC41: +\nISREDIT LINE &ROW           = LINE + < &COL  '%%  %'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '   % '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  %  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  ' %   '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '%  %%'>\nGOTO PROCESS\nC42: +\nISREDIT LINE &ROW           = LINE + < &COL  '*   *'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  ' *** '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '*****'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  ' *** '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '*   *'>\nGOTO PROCESS\nC43: +\nISREDIT LINE &ROW           = LINE + < &COL  '    /'>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '   / '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  /  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  ' /   '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '/    '>\nGOTO PROCESS\nC44: +\nISREDIT LINE &ROW           = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '-----'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '     '>\nGOTO PROCESS\nC45: +\nISREDIT LINE &ROW           = LINE + < &COL  '   ( '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '  (  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  (  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  (  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '   ( '>\nGOTO PROCESS\nC46: +\nISREDIT LINE &ROW           = LINE + < &COL  ' )   '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '  )  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  )  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  )  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' )   '>\nGOTO PROCESS\nC47: +\nISREDIT LINE &ROW           = LINE + < &COL  ' &&&&&& '\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '&&    '\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  ' &&&& >'\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '&&   &&'\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' &&&&&&&&'\nGOTO PROCESS\nC48: +\nISREDIT LINE &ROW           = LINE + < &COL  '  +  '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '  +  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '+++++'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  +  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '  +  '>\nGOTO PROCESS\nC49: +\nISREDIT LINE &ROW           = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '_____'>\nGOTO PROCESS\nC50: +\nISREDIT LINE &ROW           = LINE + < &COL  '  *  '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  ' C*C '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  'C *  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  ' C*C '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '  *  '>\nGOTO PROCESS\nC51: +\nISREDIT LINE &ROW           = LINE + < &COL  '  |  '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '  |  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '  |  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  |  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '  |  '>\nGOTO PROCESS\nC52: +\nISREDIT LINE &ROW           = LINE + < &COL  ' >   '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '  >  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '   > '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  >  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' >   '>\nGOTO PROCESS\nC53: +\nISREDIT LINE &ROW           = LINE + < &COL  ' ..  '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  ' ..  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  ' ..  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' ..  '>\nGOTO PROCESS\nC54: +\nISREDIT LINE &ROW           = LINE + < &COL  ' ..  '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  ' ..  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  ' ,,  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '  ,  '>\nGOTO PROCESS\nC55: +\nISREDIT LINE &ROW           = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  ' ..  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' ..  '>\nGOTO PROCESS\nC56: +\nISREDIT LINE &ROW           = LINE + < &COL  ' ??? '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '?   ?'>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '   ? '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  ?  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '  ?  '>\nGOTO PROCESS\nC57: +\nISREDIT LINE &ROW           = LINE + < &COL  ' '' '' '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '     '>\nGOTO PROCESS\nC58: +\nISREDIT LINE &ROW           = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '====='>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '====='>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '     '>\nGOTO PROCESS\nC59: +\nISREDIT LINE &ROW           = LINE + < &COL  ' ||  '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  ' ||  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  ' ||  '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  ' ..  '>\nGOTO PROCESS\nC60: +\nISREDIT LINE &ROW           = LINE + < &COL  '   < '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '  <  '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  ' <   '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '  <  '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '   < '>\nGOTO PROCESS\nC61: +\nISREDIT LINE &ROW           = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '\u00ac\u00ac\u00ac\u00ac\u00ac'>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '    \u00ac'>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '     '>\nGOTO PROCESS\nC62: +\nISREDIT LINE &ROW           = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+1)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+2)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+3)  = LINE + < &COL  '     '>\nISREDIT LINE &EVAL(&ROW+4)  = LINE + < &COL  '     '>\nPROCESS: +\n  IF &MAXCC  > 0 THEN -\n    DO\n      SET ZEDSMSG = INCOMPLETE BOX\n      SET ZEDLMSG = NOT ENOUGH LINES/COLUMNS TO DRAW COMPLETE BOX\n      ISPEXEC SETMSG MSG(ISRZ001)\n    END\n  SET &COL = &COL + 2\n  SET &ROW = &ROW + 1\n\n  ISREDIT CURSOR = (ROW,COL)\n  EXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TYPESET": {"ttr": 6410, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x03\\x00\\x03\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO\nSET &ZPF01 = TYPE\nISPEXEC VPUT (ZPF01) PROFILE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UCASE": {"ttr": 6412, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x05\\x00\\x01\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 5, "newlines": 1, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP)   /* USED FOR MACLIST ONLY */\n      IF &HELP = ? THEN DO\n      ISPEXEC DISPLAY PANEL(UCASE)\n      EXIT\n      END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UCASEC": {"ttr": 6414, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00?\\x00?\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 63, "newlines": 63, "modlines": 0, "user": "EDITMAC"}, "text": "  ISREDIT MACRO\n  CONTROL MSG\n/**********************************************************************\n/*   THIS MACRO COVERTS ALL LOWER CASE CHARACTERS TO UPPERCASE        *\n/**********************************************************************\n  ISREDIT (COL,ROW) = CURSOR\n  ISREDIT HEX ON VERT\n  ISREDIT CHANGE X'80' X'C0' ALL\n  ISREDIT CHANGE X'81' X'C1' ALL\n  ISREDIT CHANGE X'82' X'C2' ALL\n  ISREDIT CHANGE X'83' X'C3' ALL\n  ISREDIT CHANGE X'84' X'C4' ALL\n  ISREDIT CHANGE X'85' X'C5' ALL\n  ISREDIT CHANGE X'86' X'C6' ALL\n  ISREDIT CHANGE X'87' X'C7' ALL\n  ISREDIT CHANGE X'88' X'C8' ALL\n  ISREDIT CHANGE X'89' X'C9' ALL\n  ISREDIT CHANGE X'8A' X'CA' ALL\n  ISREDIT CHANGE X'8B' X'CB' ALL\n  ISREDIT CHANGE X'8C' X'CC' ALL\n  ISREDIT CHANGE X'8D' X'CD' ALL\n  ISREDIT CHANGE X'8E' X'CE' ALL\n  ISREDIT CHANGE X'8F' X'CF' ALL\n  ISREDIT CHANGE X'90' X'D0' ALL\n  ISREDIT CHANGE X'91' X'D1' ALL\n  ISREDIT CHANGE X'92' X'D2' ALL\n  ISREDIT CHANGE X'93' X'D3' ALL\n  ISREDIT CHANGE X'94' X'D4' ALL\n  ISREDIT CHANGE X'95' X'D5' ALL\n  ISREDIT CHANGE X'96' X'D6' ALL\n  ISREDIT CHANGE X'97' X'D7' ALL\n  ISREDIT CHANGE X'98' X'D8' ALL\n  ISREDIT CHANGE X'99' X'D9' ALL\n  ISREDIT CHANGE X'9A' X'DA' ALL\n  ISREDIT CHANGE X'9B' X'DB' ALL\n  ISREDIT CHANGE X'9C' X'DC' ALL\n  ISREDIT CHANGE X'9D' X'DD' ALL\n  ISREDIT CHANGE X'9E' X'DE' ALL\n  ISREDIT CHANGE X'9F' X'DF' ALL\n  ISREDIT CHANGE X'A0' X'E0' ALL\n  ISREDIT CHANGE X'A1' X'E1' ALL\n  ISREDIT CHANGE X'A2' X'E2' ALL\n  ISREDIT CHANGE X'A3' X'E3' ALL\n  ISREDIT CHANGE X'A4' X'E4' ALL\n  ISREDIT CHANGE X'A5' X'E5' ALL\n  ISREDIT CHANGE X'A6' X'E6' ALL\n  ISREDIT CHANGE X'A7' X'E7' ALL\n  ISREDIT CHANGE X'A8' X'E8' ALL\n  ISREDIT CHANGE X'A9' X'E9' ALL\n  ISREDIT CHANGE X'AA' X'EA' ALL\n  ISREDIT CHANGE X'AB' X'EB' ALL\n  ISREDIT CHANGE X'AC' X'EC' ALL\n  ISREDIT CHANGE X'AD' X'ED' ALL\n  ISREDIT CHANGE X'AE' X'EE' ALL\n  ISREDIT CHANGE X'AF' X'EF' ALL\n  ISREDIT HEX OFF\n  ISREDIT CAPS = ON\n  SET ZEDSMSG = &STR(UPPERCASE COMPLETE)\n  SET ZEDLMSG = &STR(ALL LOWERCASE CHARACTERS CONVERTED TO UPPERCASE)\n  ISPEXEC SETMSG MSG(ISRZ000)\n  ISREDIT RESET CHG\n  ISREDIT LOCATE &COL\n  EXIT CODE(1)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UNSEP": {"ttr": 6657, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\t\\x00\\t\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP)\n IF &HELP = ? THEN DO\n ISPEXEC DISPLAY PANEL(UNSEP)\n EXIT\n END\nISREDIT EXCLUDE ALL\nISREDIT FIND &STR(-----) 1 ALL\nISREDIT DELETE NX ALL\nISREDIT RESET\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WHEREMEM": {"ttr": 6659, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x11\\x00\\x11\\x00\\x00\\xc3\\xd3\\xc9\\xe2\\xe3@@@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "CLIST"}, "text": "PROC 1 TARGETDD\nCONTROL NOMSG\nISPEXEC VPUT TARGETDD PROFILE\nFREE F(MSGS1)\n   SET &Q = &SUBSTR(1:2,&SYSTIME)\n   SET &Q1 = &SUBSTR(4:5,&SYSTIME)\n   SET &Q2 = &SUBSTR(7:8,&SYSTIME)\n   SET &MSGS = &STR(LS&Q&Q1&Q2)\n   SET &MDA = &STR(&SYSPREF..&MSGS)\n  FREE ATTRLIST(ISPMSGS)\n    ATTRIB ISPMSGS DSORG(PS) RECFM( F B ) +\n      LRECL( 80 ) BLKSIZE( 80 )\n       ALLOC DA('&MDA') SP (1,1) TRACKS USING (ISPMSGS) +\n        F(MSGS1) NEW\n ISPEXEC EDIT DATASET('&MDA')   MACRO(STEDITY)\n DELETE '&MDA'\n EXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WHERMEM2": {"ttr": 6661, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x11\\x00\\x11\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "EDITMAC"}, "text": "PROC 1 TARGETDD\nCONTROL NOMSG\nISPEXEC VPUT TARGETDD PROFILE\nFREE F(MSGS1)\n   SET &Q = &SUBSTR(1:2,&SYSTIME)\n   SET &Q1 = &SUBSTR(4:5,&SYSTIME)\n   SET &Q2 = &SUBSTR(7:8,&SYSTIME)\n   SET &MSGS = &STR(LS&Q&Q1&Q2)\n   SET &MDA = &STR(&SYSPREF..&MSGS)\n  FREE ATTRLIST(ISPMSGS)\n    ATTRIB ISPMSGS DSORG(PS) RECFM( F B ) +\n      LRECL( 80 ) BLKSIZE( 80 )\n       ALLOC DA('&MDA') SP (1,1) TRACKS USING (ISPMSGS) +\n        F(MSGS1) NEW\n ISPEXEC EDIT DATASET('&MDA')   MACRO(STEDIT2)\n DELETE '&MDA'\n EXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WIPEIT": {"ttr": 6663, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (HELP)\n      IF &HELP = ? THEN DO\n      ISPEXEC DISPLAY PANEL(MRCLEAN)\n      EXIT\n      END\nISREDIT (RIGHT) = LRECL\nISREDIT BNDS 1 &RIGHT\nISREDIT C P'=' ' ' ALL\nISREDIT RESET\nEXIT\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XCOPY": {"ttr": 6665, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x00R\\x00<\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 82, "newlines": 60, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (DATAII) NOPROCESS\n         ISREDIT (DSNAME) = DATASET\nSET &DATAID = &STR(&DATAII)\nLISTDSI '&DSNAME'\nIF &SYSDSORG NE PO THEN +\n    DO\n      SET &ZEDSMSG = &STR(TARGET NOT A PDS)\n      SET &ZEDLMSG = &STR(XCOPY COMMAND ONLY WORKS WHEN USED +\n                          WITHIN A DATSET WITH DSORG PO)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(12)\n    END\n  IF  &SYSDSN(&DATAII) NE OK THEN +\n    DO\n      SET &ZEDSMSG = &STR(DATASET NOT FOUND)\n      SET &ZEDLMSG = &STR(CHECK &DATAII FOR VALID DATASET AND MEMBER +\n                          NAME (AND IF THEY EXIST)     )\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT CODE(12)\n    END\nSET &RIGHT = )\nSET &LEFT = &STR((\nSET CTR = 1\nSET CTR2 = 0\nLOOP: +\nIF &CTR GE &LENGTH(&STR(&DATAII)) THEN GOTO FINISH\nIF &SUBSTR(&CTR:&CTR,&STR(&DATAII)) = &STR(&LEFT) THEN GOTO END2\nSET &CTR = &CTR +1\nGOTO LOOP\nEND2: +\nSET &DATAID = &SUBSTR(1:&CTR-1,&STR(&DATAII))\nIF &SUBSTR(1:1,&DATAID) = &STR(') THEN SET &DATAID = &DATAID&STR(')\nSET &CTR2 = &CTR +1\nSET &CTRX = &CTR +1\nLOOP2: +\nIF &STR(&SUBSTR(&CTR2:&CTR2,&STR(&DATAII))) = &STR(&RIGHT) +\nTHEN GOTO MAKEMEM\nIF &CTR GE &LENGTH(&STR(&DATAII) THEN GOTO FINISH\nSET &CTR2 = &CTR2 +1\nSET &CTR = &CTR +1\nGOTO LOOP2\nMAKEMEM: +\nSET &CTR2 =  &CTR2 -1\nSET &MEM =&SUBSTR(&CTRX:&CTR2,&STR(&DATAII))\nFINISH: +\n ISREDIT (WORKDSN) = DATASET\n LISTDSI '&WORKDSN'\n SET &D = &STR('&WORKDSN')\n  ISPEXEC  LMINIT DATAID(DD01)  DATASET(&DATAID)  ENQ(SHR)\n ISPEXEC  LMINIT DATAID(DD02)  DATASET(&D)  ENQ(SHR) VOLUME(&SYSVOLUME)\n IF &MEM \u00ac= THEN DO\n   ISPEXEC  LMCOPY FROMID(&DD01) TOMEM(@@@TEMP) TRUNC REPLACE +\n     TODATAID(&DD02) FROMMEM(&MEM)\n     IF &LASTCC =8 THEN DO\n           SET ZEDSMSG = &STR(MEMBER NOT FOUND)\n             SET ZEDLMSG = &STR(&DATAID(&MEM) NOT FOUND)\n           ISPEXEC SETMSG MSG(ISRZ001)\n           EXIT\n          END\n END\n IF &MEM = THEN DO\n    ISPEXEC  LMCOPY FROMID(&DD01) TOMEM(@@@TEMP) TRUNC REPLACE +\n   TODATAID(&DD02)\nEND\n  ISREDIT PROCESS DEST\n  SET &RC = &LASTCC\n  IF &RC > 8 THEN DO\n  ISREDIT (FIRST) = LINENUM 0\n END\n  ISREDIT COPY @@@TEMP AFTER .ZDEST\nISPEXEC LMCLOSE DATAID(&DD01)\nISPEXEC LMFREE DATAID(&DD01)\nSET  PDSDSN = &WORKDSN\nISPEXEC  LMINIT DATAID(PDSID) DATASET('&PDSDSN') +\n                ENQ(SHRW)                        +\n                ORG(PDSORG)\n ISREDIT (WORKDSN) = DATASET\nISPEXEC LMOPEN DATAID(&PDSID) OPTION(OUTPUT)\nISPEXEC LMMDEL DATAID(&PDSID) MEMBER(@@@TEMP)\nISPEXEC LMCLOSE DATAID(&PDSID)\nISPEXEC LMFREE DATAID(&PDSID)\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XSEND": {"ttr": 6668, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x04\\x00\\x00\\x00\\x90)\\x8f\\x00\\x90)\\x8f#\\x00\\x004\\x004\\x00\\x00\\xc5\\xc4\\xc9\\xe3\\xd4\\xc1\\xc3@@@'", "ispf": {"version": "05.04", "flags": 0, "createdate": "1990-10-25T00:00:00", "modifydate": "1990-10-25T23:00:00", "lines": 52, "newlines": 52, "modlines": 0, "user": "EDITMAC"}, "text": "ISREDIT MACRO (DEST NUM)\nIF &DEST = ? THEN DO\nISPEXEC DISPLAY PANEL(XSEND)\nEXIT\nEND\nCONTROL NOMSG\nSET L2 = &LENGTH(&DEST)\nSET L3 = &LENGTH(&DEST)\nDO WHILE &L3 > 1\nIF &SUBSTR(&L3:&L3,&NRSTR(&DEST)) = &NRSTR(.) THEN DO\nSET &DEST1 = &SUBSTR(1:&EVAL(&L3 -1),&DEST)\nSET &DEST2 = &SUBSTR(&EVAL(&L3 +1):&L2,&DEST)\nSET &DEST = &DEST1\nSET &USER = &DEST2\nGOTO GO_ON\nEND\nSET &L3 = &L3 - 1\nEND\nGO_ON: +\nDELETE XSEND&NUM\nISREDIT (DSN) = DATASET\nLISTDSI '&DSN'\n  IF &STR(&KW1) = &STR(?) THEN +\n    DO\n       ISPEXEC DISPLAY PANEL(PRTIT)\n     EXIT CODE(0)\n    END\n\n  CONTROL ASIS\nFREE F(MSGS1)\n\n   SET &NAME = &STR(&SYSPREF..XSEND&NUM)\n  FREE ATTRLIST(ISPMSGS)\n    ATTRIB ISPMSGS DSORG(PS) RECFM( F B ) +\n      LRECL( &SYSLRECL ) BLKSIZE( &SYSBLKSIZE )\n       ALLOC DA('&NAME') SP (15,10) TRACKS USING (ISPMSGS) +\n        F(MSGS1) NEW\n SET &INTVAR = &STR( )\n OPENFILE MSGS1 OUTPUT\n ISREDIT (FIRST) = LINENUM .ZFIRST\n ISREDIT (LAST) = LINENUM .ZLAST\n DO WHILE &FIRST <  &EVAL(&LAST + 1)\n ISREDIT (MSGS1) = LINE &FIRST\n PUTFILE MSGS1\n SET &FIRST = &FIRST + 1\n END\n CLOSFILE MSGS1\n   CONTROL MSG\n     XMIT &DEST..&USER DA('&NAME')\n   CONTROL NOMSG\n  DELETE '&NAME'\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT095/FILE095.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT095", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}